;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A8DE7D7D49FC342D9C734C3DDAF29DD1
; Input	CRC32 :	AE173950

; File Name   :	C:\compspace\compare\thunderbird\dlls\original\freebl3.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 0003C9B2 ( 248242.)
; Section size in file		: 0003CA00 ( 248320.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; Exported entry   1. FREEBL_GetVector
; PDB File Name	: c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-tb\security\nss\lib\freebl\freebl3.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public FREEBL_GetVector
FREEBL_GetVector proc near		; DATA XREF: .rdata:off_1004D268o

var_1		= byte ptr -1

		push	ecx
		movsx	eax, ds:byte_1003E1F0
		movsx	ecx, ds:byte_1003E1B8
		add	ecx, eax
		mov	eax, offset dword_1003E228
		mov	[esp+4+var_1], cl
		pop	ecx
		retn
FREEBL_GetVector endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001020(void	*, size_t)
sub_10001020	proc near		; CODE XREF: sub_10001120+1Bp
					; sub_10001120+1D6p

var_14		= dword	ptr -14h
PerformanceCount= LARGE_INTEGER	ptr -10h
Time		= qword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		push	esi
		mov	esi, [esp+18h+arg_4]
		test	esi, esi
		jnz	short loc_10001033
		xor	eax, eax
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10001033:				; CODE XREF: sub_10001020+Aj
		lea	eax, [esp+18h+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		test	eax, eax
		jz	short loc_10001052
		mov	eax, dword ptr [esp+18h+PerformanceCount+4]
		mov	[esp+18h+var_14], eax
		mov	eax, dword ptr [esp+18h+PerformanceCount]
		mov	[esp+18h+arg_4], eax

loc_10001052:				; CODE XREF: sub_10001020+20j
		push	edi
		mov	edi, esi
		cmp	esi, 4
		jb	short loc_1000105F
		mov	edi, 4

loc_1000105F:				; CODE XREF: sub_10001020+38j
		push	ebp
		mov	ebp, [esp+20h+arg_0]
		lea	eax, [esp+20h+arg_4]
		push	edi		; size_t
		push	eax		; void *
		push	ebp		; void *
		call	memcpy
		add	esp, 0Ch
		sub	esi, edi
		jnz	short loc_10001080
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10001080:				; CODE XREF: sub_10001020+55j
		push	ebx
		mov	ebx, esi
		cmp	esi, 4
		jb	short loc_1000108D
		mov	ebx, 4

loc_1000108D:				; CODE XREF: sub_10001020+66j
		push	ebx		; size_t
		lea	eax, [esp+28h+var_14]
		push	eax		; void *
		lea	ecx, [edi+ebp]
		push	ecx		; void *
		call	memcpy
		add	esp, 0Ch
		add	edi, ebx
		sub	esi, ebx
		jz	short loc_100010D3
		call	ds:GetTickCount
		mov	[esp+24h+arg_4], eax
		mov	ebx, esi
		cmp	esi, 4
		jb	short loc_100010BB
		mov	ebx, 4

loc_100010BB:				; CODE XREF: sub_10001020+94j
		push	ebx		; size_t
		lea	eax, [esp+28h+arg_4]
		push	eax		; void *
		lea	eax, [edi+ebp]
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		add	edi, ebx
		sub	esi, ebx
		jnz	short loc_100010DD

loc_100010D3:				; CODE XREF: sub_10001020+83j
		pop	ebx
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_100010DD:				; CODE XREF: sub_10001020+B1j
		lea	eax, [esp+24h+Time]
		push	eax		; Time
		call	ds:_time64
		add	esp, 4
		cmp	esi, 8
		jb	short loc_100010F5
		mov	esi, 8

loc_100010F5:				; CODE XREF: sub_10001020+CEj
		push	esi		; size_t
		lea	eax, [esp+28h+Time]
		push	eax		; void *
		lea	eax, [edi+ebp]
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		lea	eax, [esi+edi]
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 14h
		retn
sub_10001020	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001120	proc near		; CODE XREF: sub_1000C3F0+91p
					; sub_1000CE20+FDp
					; DATA XREF: ...

var_1C8		= dword	ptr -1C8h
SectorsPerCluster= dword ptr -1C4h
BytesPerSector	= dword	ptr -1C0h
NumberOfFreeClusters= dword ptr	-1BCh
MaximumComponentLength=	dword ptr -1B8h
TotalNumberOfClusters= dword ptr -1B4h
var_1B0		= dword	ptr -1B0h
FileSystemFlags	= dword	ptr -1ACh
VolumeSerialNumber= dword ptr -1A8h
Buffer		= _MEMORYSTATUS	ptr -1A4h
FileSystemNameBuffer= byte ptr -184h
VolumeNameBuffer= byte ptr -84h
var_4		= dword	ptr -4

		sub	esp, 1C8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+1C8h+var_4], eax
		lea	eax, [esp+1C8h+FileSystemNameBuffer]
		push	14h		; size_t
		push	eax		; void *
		call	sub_10001020
		push	eax		; size_t
		lea	eax, [esp+1D4h+FileSystemNameBuffer]
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 10h
		mov	[esp+1C8h+Buffer.dwLength], 20h
		lea	eax, [esp+1C8h+Buffer]
		push	eax		; lpBuffer
		call	ds:GlobalMemoryStatus
		lea	eax, [esp+1C8h+Buffer]
		push	20h		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 8
		call	ds:GetLogicalDrives
		mov	[esp+1C8h+var_1C8], eax
		lea	eax, [esp+1C8h+var_1C8]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 8
		mov	[esp+1C8h+var_1C8], 100h
		lea	eax, [esp+1C8h+var_1C8]
		push	eax		; nSize
		lea	eax, [esp+1CCh+FileSystemNameBuffer]
		push	eax		; lpBuffer
		call	ds:GetComputerNameA
		test	eax, eax
		jz	short loc_100011B1
		push	[esp+1C8h+var_1C8] ; size_t
		lea	eax, [esp+1CCh+FileSystemNameBuffer]
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 8

loc_100011B1:				; CODE XREF: sub_10001120+7Fj
		call	ds:GetCurrentProcess
		mov	[esp+1C8h+var_1B0], eax
		lea	eax, [esp+1C8h+var_1B0]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 8
		call	ds:GetCurrentProcessId
		mov	[esp+1C8h+var_1C8], eax
		lea	eax, [esp+1C8h+var_1C8]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 8
		call	ds:GetCurrentThreadId
		mov	[esp+1C8h+var_1C8], eax
		lea	eax, [esp+1C8h+var_1C8]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 8
		mov	[esp+1C8h+VolumeNameBuffer], 0
		lea	eax, [esp+1C8h+FileSystemNameBuffer]
		mov	[esp+1C8h+FileSystemNameBuffer], 0
		push	100h		; nFileSystemNameSize
		push	eax		; lpFileSystemNameBuffer
		lea	eax, [esp+1D0h+FileSystemFlags]
		push	eax		; lpFileSystemFlags
		lea	eax, [esp+1D4h+MaximumComponentLength]
		push	eax		; lpMaximumComponentLength
		lea	eax, [esp+1D8h+VolumeSerialNumber]
		push	eax		; lpVolumeSerialNumber
		push	80h		; nVolumeNameSize
		lea	eax, [esp+1E0h+VolumeNameBuffer]
		push	eax		; lpVolumeNameBuffer
		push	0		; lpRootPathName
		call	ds:GetVolumeInformationA
		lea	ecx, [esp+1C8h+VolumeNameBuffer]
		lea	edx, [ecx+1]
		lea	ecx, [ecx+0]

loc_10001240:				; CODE XREF: sub_10001120+125j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10001240
		sub	ecx, edx
		lea	eax, [esp+1C8h+VolumeNameBuffer]
		push	ecx		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		lea	eax, [esp+1D0h+VolumeSerialNumber]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		lea	eax, [esp+1D8h+MaximumComponentLength]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		lea	eax, [esp+1E0h+FileSystemFlags]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		lea	ecx, [esp+1E8h+FileSystemNameBuffer]
		add	esp, 20h
		lea	edx, [ecx+1]

loc_10001285:				; CODE XREF: sub_10001120+16Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10001285
		sub	ecx, edx
		lea	eax, [esp+1C8h+FileSystemNameBuffer]
		push	ecx		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 8
		lea	eax, [esp+1C8h+TotalNumberOfClusters]
		push	eax		; lpTotalNumberOfClusters
		lea	eax, [esp+1CCh+NumberOfFreeClusters]
		push	eax		; lpNumberOfFreeClusters
		lea	eax, [esp+1D0h+BytesPerSector]
		push	eax		; lpBytesPerSector
		lea	eax, [esp+1D4h+SectorsPerCluster]
		push	eax		; lpSectorsPerCluster
		push	0		; lpRootPathName
		call	ds:GetDiskFreeSpaceA
		test	eax, eax
		jz	short loc_100012EF
		lea	eax, [esp+1C8h+SectorsPerCluster]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		lea	eax, [esp+1D0h+BytesPerSector]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		lea	eax, [esp+1D8h+NumberOfFreeClusters]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		lea	eax, [esp+1E0h+TotalNumberOfClusters]
		push	4		; size_t
		push	eax		; void *
		call	sub_1000C2B0
		add	esp, 20h

loc_100012EF:				; CODE XREF: sub_10001120+19Aj
		lea	eax, [esp+1C8h+FileSystemNameBuffer]
		push	14h		; size_t
		push	eax		; void *
		call	sub_10001020
		push	eax		; size_t
		lea	eax, [esp+1D4h+FileSystemNameBuffer]
		push	eax		; void *
		call	sub_1000C2B0
		mov	ecx, [esp+1D8h+var_4]
		add	esp, 10h
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1C8h
		retn
sub_10001120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001320	proc near		; CODE XREF: sub_1000CCF0+4Cp
					; sub_1000CE20+64p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	ds:SystemFunction036
		test	al, al
		jz	short loc_10001337
		mov	eax, [esp+arg_4]
		retn
; ---------------------------------------------------------------------------

loc_10001337:				; CODE XREF: sub_10001320+10j
		xor	eax, eax
		retn
sub_10001320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001340	proc near		; DATA XREF: .rdata:1003E310o
					; .rdata:1003ECE0o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+40h], 0
		mov	dword ptr [eax+44h], 0
		mov	dword ptr [eax+48h], 67452301h
		mov	dword ptr [eax+4Ch], 0EFCDAB89h
		mov	dword ptr [eax+50h], 98BADCFEh
		mov	dword ptr [eax+54h], 10325476h
		mov	dword ptr [eax+58h], 0C3D2E1F0h
		retn
sub_10001340	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001380	proc near		; DATA XREF: .rdata:1003E43Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, 28h
		push	edi
		mov	edi, [esp+8+arg_0]
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10001380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100013A0(void	*, int)
sub_100013A0	proc near		; DATA XREF: .rdata:1003E30Co
					; .rdata:1003ECDCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0A0h		; size_t
		push	0		; int
		push	[esp+8+arg_0]	; void *
		call	memset
		add	esp, 0Ch
		cmp	[esp+arg_4], 0
		jz	short locret_100013C4
		push	[esp+arg_0]
		call	PORT_Free_Util
		pop	ecx

locret_100013C4:			; CODE XREF: sub_100013A0+18j
		retn
sub_100013A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100013D0(void	*, int,	int)
sub_100013D0	proc near		; CODE XREF: sub_100014F0+7Ap
					; DATA XREF: .rdata:1003E318o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, 0FFFFFFF7h
		push	esi
		push	edi
		mov	edi, [ebx+40h]
		sub	eax, edi
		mov	esi, [ebx+44h]
		and	eax, 3Fh
		inc	eax
		push	eax		; int
		push	offset dword_1003E570 ;	void *
		push	ebx		; void *
		call	sub_100015E0
		shld	esi, edi, 3
		lea	eax, [ebx+74h]
		shl	edi, 3
		push	ebx
		bswap	esi
		bswap	edi
		push	eax
		mov	[ebx+38h], esi
		mov	[ebx+3Ch], edi
		call	sub_10001690
		mov	eax, [ebx+48h]
		add	esp, 14h
		mov	ecx, [esp+0Ch+arg_4]
		bswap	eax
		pop	edi
		mov	[ecx], eax
		mov	eax, [ebx+4Ch]
		bswap	eax
		mov	[ecx+4], eax
		mov	eax, [ebx+50h]
		bswap	eax
		mov	[ecx+8], eax
		mov	eax, [ebx+54h]
		bswap	eax
		mov	[ecx+0Ch], eax
		mov	eax, [ebx+58h]
		bswap	eax
		mov	[ecx+10h], eax
		mov	eax, [esp+8+arg_8]
		pop	esi
		pop	ebx
		test	eax, eax
		jz	short locret_1000144E
		mov	dword ptr [eax], 14h

locret_1000144E:			; CODE XREF: sub_100013D0+76j
		retn
sub_100013D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001450	proc near		; DATA XREF: .rdata:1003ECF4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [edx+48h]
		bswap	eax
		mov	[ecx], eax
		mov	eax, [edx+4Ch]
		bswap	eax
		mov	[ecx+4], eax
		mov	eax, [edx+50h]
		bswap	eax
		mov	[ecx+8], eax
		mov	eax, [edx+54h]
		bswap	eax
		mov	[ecx+0Ch], eax
		mov	eax, [edx+58h]
		bswap	eax
		mov	[ecx+10h], eax
		mov	eax, [esp+arg_8]
		test	eax, eax
		jz	short locret_1000148D
		mov	dword ptr [eax], 14h

locret_1000148D:			; CODE XREF: sub_10001450+35j
		retn
sub_10001450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001490	proc near		; DATA XREF: .rdata:1003E324o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 28h
		push	edi
		mov	edi, [esp+8+arg_4]
		xor	eax, eax
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10001490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100014B0	proc near		; DATA XREF: .rdata:1003E320o
		mov	eax, 0A0h
		retn
sub_100014B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100014C0(int,	void *)
sub_100014C0	proc near		; DATA XREF: .rdata:1003E300o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, edx
		push	esi
		lea	esi, [eax+1]
		lea	ebx, [ebx+0]

loc_100014D0:				; CODE XREF: sub_100014C0+15j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100014D0
		sub	eax, esi
		push	eax		; int
		push	edx		; void *
		push	[esp+0Ch+arg_0]	; int
		call	sub_100014F0
		add	esp, 0Ch
		pop	esi
		retn
sub_100014C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100014F0(int,	void *,	int)
sub_100014F0	proc near		; CODE XREF: sub_100014C0+1Fp
					; sub_1001B8A0+27p
					; DATA XREF: ...

var_A8		= dword	ptr -0A8h
var_A4		= byte ptr -0A4h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0A8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0A8h+var_4], eax
		mov	eax, [esp+0A8h+arg_4]
		push	esi
		push	[esp+0ACh+arg_8] ; int
		mov	esi, [esp+0B0h+arg_0]
		push	eax		; void *
		lea	eax, [esp+0B4h+var_A4]
		mov	[esp+0B4h+var_64], 0
		push	eax		; void *
		mov	[esp+0B8h+var_60], 0
		mov	[esp+0B8h+var_5C], 67452301h
		mov	[esp+0B8h+var_58], 0EFCDAB89h
		mov	[esp+0B8h+var_54], 98BADCFEh
		mov	[esp+0B8h+var_50], 10325476h
		mov	[esp+0B8h+var_4C], 0C3D2E1F0h
		call	sub_100015E0
		push	14h
		lea	eax, [esp+0BCh+var_A8]
		push	eax		; int
		lea	eax, [esp+0C0h+var_A4]
		push	esi		; int
		push	eax		; void *
		call	sub_100013D0
		mov	ecx, [esp+0C8h+var_4]
		add	esp, 1Ch
		xor	eax, eax
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A8h
		retn
sub_100014F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001590	proc near		; DATA XREF: .rdata:1003E308o
					; .rdata:1003ECD4o
		push	0A0h
		call	PORT_Alloc_Util
		add	esp, 4
		retn
sub_10001590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100015A0	proc near		; DATA XREF: .rdata:1003E328o

arg_0		= dword	ptr  4

		push	0A0h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_100015B2
		retn
; ---------------------------------------------------------------------------

loc_100015B2:				; CODE XREF: sub_100015A0+Fj
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 28h
		push	edi
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi
		retn
sub_100015A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100015D0	proc near		; DATA XREF: .rdata:1003E2D8o
					; .rdata:1003E31Co

arg_0		= dword	ptr  4

		mov	[esp+arg_0], 0FFFFE898h
		jmp	PORT_SetError_Util
sub_100015D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100015E0(void	*, void	*, int)
sub_100015E0	proc near		; CODE XREF: sub_100013D0+1Fp
					; sub_100014F0+68p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	loc_10001680
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	edi
		mov	eax, [ebp+40h]
		and	eax, 3Fh
		add	[ebp+40h], esi
		mov	[esp+10h+arg_8], eax
		adc	dword ptr [ebp+44h], 0
		test	eax, eax
		jz	short loc_10001644
		mov	ebx, 40h
		sub	ebx, eax
		cmp	esi, ebx
		jnb	short loc_10001616
		mov	ebx, esi

loc_10001616:				; CODE XREF: sub_100015E0+32j
		mov	edi, [esp+10h+arg_4]
		add	eax, ebp
		push	ebx		; size_t
		push	edi		; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+1Ch+arg_8]
		add	esp, 0Ch
		add	eax, ebx
		sub	esi, ebx
		add	edi, ebx
		test	al, 3Fh
		jnz	short loc_10001648
		lea	eax, [ebp+74h]
		push	ebp
		push	eax
		call	sub_10001690
		add	esp, 8
		jmp	short loc_10001648
; ---------------------------------------------------------------------------

loc_10001644:				; CODE XREF: sub_100015E0+27j
		mov	edi, [esp+10h+arg_4]

loc_10001648:				; CODE XREF: sub_100015E0+53j
					; sub_100015E0+62j
		cmp	esi, 40h
		jb	short loc_1000166E
		lea	eax, [ebp+74h]
		mov	ebx, esi
		shr	ebx, 6
		mov	ebp, eax

loc_10001657:				; CODE XREF: sub_100015E0+88j
		push	edi
		push	ebp
		sub	esi, 40h
		call	sub_10001690
		add	esp, 8
		add	edi, 40h
		dec	ebx
		jnz	short loc_10001657
		mov	ebp, [esp+10h+arg_0]

loc_1000166E:				; CODE XREF: sub_100015E0+6Bj
		test	esi, esi
		jz	short loc_1000167D
		push	esi		; size_t
		push	edi		; void *
		push	ebp		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000167D:				; CODE XREF: sub_100015E0+90j
		pop	edi
		pop	ebp
		pop	ebx

loc_10001680:				; CODE XREF: sub_100015E0+7j
		pop	esi
		retn
sub_100015E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001690	proc near		; CODE XREF: sub_100013D0+3Ap
					; sub_100015E0+5Ap ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [esp+0Ch+arg_4]
		push	ebx
		push	ebp
		mov	ecx, [edx-2Ch]
		mov	ebp, [edx-28h]
		mov	ebx, [edx-24h]
		mov	[esp+14h+var_C], ecx
		push	esi
		push	edi
		mov	edi, [edx-20h]
		mov	esi, [edx-1Ch]
		mov	eax, [eax]
		bswap	eax
		mov	[edx-18h], eax
		mov	edx, ecx
		rol	edx, 5
		mov	ecx, edi
		xor	ecx, ebx
		add	edx, esi
		mov	esi, [esp+1Ch+arg_0]
		and	ecx, ebp
		xor	ecx, edi
		rol	ebp, 1Eh
		add	ecx, edx
		mov	eax, [esi-18h]
		add	eax, 5A827999h
		add	ecx, eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], ecx
		mov	edx, ecx
		mov	ecx, ebx
		rol	edx, 5
		xor	ecx, ebp
		add	edx, edi
		and	ecx, [esp+1Ch+var_C]
		mov	eax, [eax+4]
		xor	ecx, ebx
		mov	edi, [esp+1Ch+var_C]
		add	ecx, edx
		bswap	eax
		mov	[esi-14h], eax
		mov	esi, [esi-14h]
		mov	eax, [esp+1Ch+arg_4]
		add	esi, 5A827999h
		add	esi, ecx
		rol	edi, 1Eh
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, esi
		rol	edx, 5
		mov	eax, [eax+8]
		add	edx, ebx
		mov	ebx, [esp+1Ch+arg_0]
		bswap	eax
		mov	[ecx-10h], eax
		mov	ecx, ebp
		mov	eax, [esp+1Ch+arg_4]
		xor	ecx, edi
		and	ecx, [esp+1Ch+var_8]
		xor	ecx, ebp
		mov	[esp+1Ch+var_C], edi
		mov	edi, [ebx-10h]
		add	ecx, edx
		mov	eax, [eax+0Ch]
		add	edi, 5A827999h
		add	edi, ecx
		mov	ecx, [esp+1Ch+var_8]
		rol	ecx, 1Eh
		mov	edx, edi
		mov	[esp+1Ch+var_8], ecx
		xor	ecx, [esp+1Ch+var_C]
		and	ecx, esi
		rol	edx, 5
		xor	ecx, [esp+1Ch+var_C]
		add	edx, ebp
		bswap	eax
		mov	[ebx-0Ch], eax
		add	ecx, edx
		mov	ebx, [ebx-0Ch]
		add	ebx, 5A827999h
		add	ebx, ecx
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, ebx
		mov	ebp, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+var_8]
		rol	edx, 5
		mov	eax, [eax+10h]
		add	edx, [esp+1Ch+var_C]
		bswap	eax
		mov	[ebp-8], eax
		mov	ebp, [ebp-8]
		mov	eax, [esp+1Ch+arg_4]
		add	ebp, 5A827999h
		rol	esi, 1Eh
		xor	ecx, esi
		and	ecx, edi
		rol	edi, 1Eh
		xor	ecx, [esp+1Ch+var_8]
		mov	eax, [eax+14h]
		add	ecx, edx
		add	ebp, ecx
		mov	ecx, [esp+1Ch+arg_0]
		bswap	eax
		mov	edx, ebp
		rol	edx, 5
		add	edx, [esp+1Ch+var_8]
		mov	[ecx-4], eax
		mov	ecx, esi
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edi
		and	ecx, ebx
		rol	ebx, 1Eh
		xor	ecx, esi
		add	ecx, edx
		mov	eax, [eax-4]
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], edx
		rol	edx, 5
		mov	eax, [eax+18h]
		add	edx, esi
		mov	esi, [esp+1Ch+arg_0]
		bswap	eax
		mov	[ecx], eax
		mov	ecx, edi
		xor	ecx, ebx
		mov	eax, [esi]
		and	ecx, ebp
		xor	ecx, edi
		rol	ebp, 1Eh
		add	ecx, edx
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, ebx
		mov	[esp+1Ch+var_8], edx
		xor	ecx, ebp
		rol	edx, 5
		mov	eax, [eax+1Ch]
		add	edx, edi
		mov	edi, [esp+1Ch+arg_0]
		bswap	eax
		mov	[esi+4], eax
		mov	esi, [esp+1Ch+var_4]
		and	ecx, esi
		mov	eax, [edi+4]
		xor	ecx, ebx
		add	ecx, edx
		rol	esi, 1Eh
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, esi
		mov	[esp+1Ch+var_4], edx
		rol	edx, 5
		xor	ecx, ebp
		mov	eax, [eax+20h]
		bswap	eax
		mov	[edi+8], eax
		mov	edi, [esp+1Ch+var_8]
		add	edx, ebx
		and	ecx, edi
		mov	ebx, [esp+1Ch+arg_0]
		xor	ecx, ebp
		add	ecx, edx
		rol	edi, 1Eh
		mov	eax, [ebx+8]
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, esi
		mov	[esp+1Ch+var_8], edx
		xor	ecx, edi
		rol	edx, 5
		mov	eax, [eax+24h]
		add	edx, ebp
		mov	ebp, [esp+1Ch+arg_0]
		bswap	eax
		mov	[ebx+0Ch], eax
		mov	ebx, [esp+1Ch+var_4]
		and	ecx, ebx
		mov	eax, [ebp+0Ch]
		xor	ecx, esi
		add	ecx, edx
		rol	ebx, 1Eh
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, edi
		mov	[esp+1Ch+var_4], edx
		xor	ecx, ebx
		rol	edx, 5
		mov	eax, [eax+28h]
		add	edx, esi
		mov	esi, [esp+1Ch+arg_0]
		bswap	eax
		mov	[ebp+10h], eax
		mov	ebp, [esp+1Ch+var_8]
		and	ecx, ebp
		mov	eax, [esi+10h]
		xor	ecx, edi
		add	ecx, edx
		rol	ebp, 1Eh
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, ebx
		mov	[esp+1Ch+var_8], edx
		xor	ecx, ebp
		rol	edx, 5
		mov	eax, [eax+2Ch]
		add	edx, edi
		mov	edi, [esp+1Ch+arg_0]
		bswap	eax
		mov	[esi+14h], eax
		mov	esi, [esp+1Ch+var_4]
		and	ecx, esi
		mov	eax, [edi+14h]
		xor	ecx, ebx
		add	ecx, edx
		rol	esi, 1Eh
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, ebp
		mov	[esp+1Ch+var_4], edx
		xor	ecx, esi
		rol	edx, 5
		mov	eax, [eax+30h]
		add	edx, ebx
		mov	ebx, [esp+1Ch+arg_0]
		bswap	eax
		mov	[edi+18h], eax
		mov	edi, [esp+1Ch+var_8]
		and	ecx, edi
		mov	eax, [ebx+18h]
		xor	ecx, ebp
		add	ecx, edx
		lea	edx, [eax+5A827999h]
		add	edx, ecx
		mov	[esp+1Ch+var_8], edx
		mov	eax, [esp+1Ch+arg_4]
		rol	edx, 5
		add	edx, ebp
		rol	edi, 1Eh
		mov	ebp, [esp+1Ch+arg_0]
		mov	ecx, edi
		mov	eax, [eax+34h]
		xor	ecx, esi
		bswap	eax
		mov	[ebx+1Ch], eax
		mov	eax, [ebp+1Ch]
		mov	ebx, [esp+1Ch+var_4]
		and	ecx, ebx
		xor	ecx, esi
		rol	ebx, 1Eh
		add	ecx, edx
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, edi
		mov	[esp+1Ch+var_4], edx
		xor	ecx, ebx
		rol	edx, 5
		mov	eax, [eax+38h]
		add	edx, esi
		mov	esi, [esp+1Ch+arg_0]
		bswap	eax
		mov	[ebp+20h], eax
		mov	ebp, [esp+1Ch+var_8]
		and	ecx, ebp
		mov	eax, [esi+20h]
		xor	ecx, edi
		add	ecx, edx
		rol	ebp, 1Eh
		lea	edx, [eax+5A827999h]
		mov	eax, [esp+1Ch+arg_4]
		add	edx, ecx
		mov	ecx, ebx
		xor	ecx, ebp
		mov	[esp+1Ch+var_8], edx
		rol	edx, 5
		mov	eax, [eax+3Ch]
		add	edx, edi
		bswap	eax
		mov	[esi+24h], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+var_4]
		and	ecx, esi
		xor	ecx, ebx
		rol	esi, 1Eh
		add	ecx, edx
		mov	edi, [eax+24h]
		add	edi, 5A827999h
		add	edi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], edi
		mov	edx, [ecx-18h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-10h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+8]
		xor	eax, ecx
		mov	ecx, ebp
		rol	eax, 1
		xor	ecx, esi
		mov	[edx-18h], eax
		mov	edx, edi
		mov	edi, [esp+1Ch+var_8]
		and	ecx, edi
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, ebp
		rol	edx, 5
		add	edx, ebx
		add	ecx, edx
		mov	ebx, [eax-18h]
		add	ebx, 5A827999h
		add	ebx, ecx
		rol	edi, 1Eh
		mov	[esp+1Ch+var_8], ebx
		mov	ecx, eax
		mov	edx, [ecx+20h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+0Ch]
		xor	eax, ecx
		mov	ecx, esi
		xor	ecx, edi
		rol	eax, 1
		and	ecx, [esp+1Ch+arg_4]
		mov	[edx-14h], eax
		xor	ecx, esi
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ebx
		rol	edx, 5
		add	edx, ebp
		mov	ebp, [esp+1Ch+arg_4]
		add	ecx, edx
		rol	ebp, 1Eh
		mov	ebx, [eax-14h]
		add	ebx, 5A827999h
		mov	[esp+1Ch+arg_4], ebp
		add	ebx, ecx
		mov	ecx, eax
		mov	edx, [ecx-10h]
		mov	eax, [ecx+24h]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-8]
		xor	eax, ecx
		mov	ecx, ebp
		xor	ecx, edi
		rol	eax, 1
		and	ecx, [esp+1Ch+var_8]
		mov	[edx-10h], eax
		xor	ecx, edi
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ebx
		rol	edx, 5
		add	edx, esi
		mov	esi, [esp+1Ch+var_8]
		add	ecx, edx
		rol	esi, 1Eh
		mov	ebp, [eax-10h]
		add	ebp, 5A827999h
		mov	[esp+1Ch+var_8], esi
		add	ebp, ecx
		mov	ecx, eax
		mov	edx, [ecx+14h]
		mov	eax, [ecx-18h]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_4]
		rol	eax, 1
		xor	ecx, esi
		mov	[edx-0Ch], eax
		and	ecx, ebx
		xor	ecx, [esp+1Ch+arg_4]
		mov	edx, ebp
		rol	edx, 5
		add	edx, edi
		rol	ebx, 1Eh
		mov	edi, [esp+1Ch+arg_0]
		add	ecx, edx
		mov	[esp+1Ch+var_4], ebx
		mov	esi, [edi-0Ch]
		mov	edx, [edi+18h]
		add	esi, 5A827999h
		mov	eax, [edi-14h]
		add	esi, ecx
		mov	ecx, [edi-8]
		xor	edx, eax
		mov	eax, [edi]
		xor	ecx, edx
		xor	eax, ecx
		mov	edx, esi
		mov	ecx, [esp+1Ch+var_8]
		xor	ecx, ebx
		rol	edx, 5
		add	edx, [esp+1Ch+arg_4]
		xor	ecx, ebp
		add	ecx, edx
		rol	eax, 1
		mov	[edi-8], eax
		mov	edi, [edi-8]
		add	edi, 6ED9EBA1h
		rol	ebp, 1Eh
		add	edi, ecx
		mov	[esp+1Ch+arg_4], ebp
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [ecx-10h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-4]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+4]
		xor	eax, ecx
		mov	ecx, ebx
		rol	eax, 1
		xor	ecx, ebp
		mov	[edx-4], eax
		xor	ecx, esi
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, edi
		rol	edx, 5
		add	edx, [esp+1Ch+var_8]
		add	ecx, edx
		rol	esi, 1Eh
		mov	ebx, [eax-4]
		add	ebx, 6ED9EBA1h
		add	ebx, ecx
		mov	ecx, eax
		mov	edx, [ecx-0Ch]
		mov	eax, [ecx+20h]
		xor	edx, eax
		mov	ecx, [ecx+8]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		xor	eax, ecx
		mov	ecx, edi
		rol	eax, 1
		xor	ecx, ebp
		mov	[edx], eax
		xor	ecx, esi
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ebx
		rol	edx, 5
		add	edx, [esp+1Ch+var_4]
		add	ecx, edx
		rol	edi, 1Eh
		mov	ebp, [eax]
		add	ebp, 6ED9EBA1h
		add	ebp, ecx
		mov	ecx, eax
		mov	edx, [ecx+24h]
		mov	eax, [ecx+0Ch]
		xor	edx, eax
		mov	ecx, [ecx-8]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+4]
		xor	eax, ecx
		mov	ecx, edi
		rol	eax, 1
		xor	ecx, ebx
		mov	[edx+4], eax
		xor	ecx, esi
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, ebp
		rol	edx, 5
		add	edx, [esp+1Ch+arg_4]
		mov	eax, [eax+4]
		add	ecx, edx
		add	eax, 6ED9EBA1h
		rol	ebx, 1Eh
		add	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+arg_4], eax
		mov	edx, [ecx-18h]
		mov	eax, [ecx+10h]
		xor	edx, eax
		mov	ecx, [ecx+8]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-4]
		xor	eax, ecx
		mov	ecx, edi
		xor	ecx, ebx
		rol	eax, 1
		mov	[edx+8], eax
		xor	ecx, ebp
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		rol	edx, 5
		add	edx, esi
		rol	ebp, 1Eh
		mov	esi, [eax+8]
		add	ecx, edx
		add	esi, 6ED9EBA1h
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_4], esi
		mov	edx, [ecx+14h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx+0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		xor	eax, ecx
		mov	ecx, ebx
		rol	eax, 1
		xor	ecx, ebp
		mov	[edx+0Ch], eax
		mov	edx, esi
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		xor	ecx, esi
		rol	edx, 5
		add	edx, edi
		rol	esi, 1Eh
		mov	edi, [eax+0Ch]
		add	ecx, edx
		add	edi, 6ED9EBA1h
		add	edi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], edi
		mov	edx, [ecx+18h]
		mov	eax, [ecx-10h]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+4]
		xor	eax, ecx
		mov	ecx, ebp
		rol	eax, 1
		xor	ecx, esi
		mov	[edx+10h], eax
		mov	edx, edi
		mov	eax, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+var_4]
		xor	ecx, edi
		rol	edx, 5
		add	edx, ebx
		mov	ebx, [eax+10h]
		add	ecx, edx
		add	ebx, 6ED9EBA1h
		add	ebx, ecx
		rol	edi, 1Eh
		mov	[esp+1Ch+var_4], ebx
		mov	ecx, eax
		mov	edx, [ecx+14h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+8]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx+14h], eax
		mov	edx, ebx
		mov	ebx, [esp+1Ch+arg_4]
		mov	ecx, ebx
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, esi
		xor	ecx, edi
		rol	edx, 5
		add	edx, ebp
		rol	ebx, 1Eh
		add	ecx, edx
		mov	ebp, [eax+14h]
		add	ebp, 6ED9EBA1h
		add	ebp, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], ebp
		mov	edx, [ecx+18h]
		mov	eax, [ecx+20h]
		xor	edx, eax
		mov	ecx, [ecx+0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-8]
		xor	eax, ecx
		mov	ecx, ebx
		rol	eax, 1
		mov	[edx+18h], eax
		mov	edx, ebp
		mov	eax, [esp+1Ch+arg_0]
		mov	ebp, [esp+1Ch+var_4]
		xor	ecx, ebp
		rol	edx, 5
		xor	ecx, edi
		add	edx, esi
		rol	ebp, 1Eh
		mov	esi, [eax+18h]
		add	ecx, edx
		add	esi, 6ED9EBA1h
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_4], esi
		mov	edx, [ecx+24h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-4]
		xor	eax, ecx
		mov	ecx, ebx
		rol	eax, 1
		xor	ecx, ebp
		mov	[edx+1Ch], eax
		mov	edx, esi
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		xor	ecx, esi
		rol	edx, 5
		add	edx, edi
		rol	esi, 1Eh
		mov	edi, [eax+1Ch]
		add	ecx, edx
		add	edi, 6ED9EBA1h
		add	edi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], edi
		mov	edx, [ecx+20h]
		mov	eax, [ecx-18h]
		xor	edx, eax
		mov	ecx, [ecx+14h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		xor	eax, ecx
		mov	ecx, ebp
		rol	eax, 1
		xor	ecx, esi
		mov	[edx+20h], eax
		mov	edx, edi
		mov	eax, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+var_4]
		xor	ecx, edi
		rol	edx, 5
		add	edx, ebx
		rol	edi, 1Eh
		mov	ebx, [eax+20h]
		add	ecx, edx
		add	ebx, 6ED9EBA1h
		add	ebx, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_4], ebx
		mov	edx, [ecx+18h]
		mov	eax, [ecx+24h]
		xor	edx, eax
		mov	ecx, [ecx-14h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+4]
		xor	eax, ecx
		mov	ecx, esi
		rol	eax, 1
		xor	ecx, edi
		mov	[edx+24h], eax
		mov	edx, ebx
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [esp+1Ch+arg_4]
		xor	ecx, ebx
		rol	edx, 5
		add	edx, ebp
		rol	ebx, 1Eh
		mov	ebp, [eax+24h]
		add	ecx, edx
		add	ebp, 6ED9EBA1h
		add	ebp, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], ebp
		mov	edx, [ecx-18h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-10h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+8]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx-18h], eax
		mov	edx, ebp
		mov	ebp, [esp+1Ch+var_4]
		mov	ecx, ebp
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edi
		rol	edx, 5
		xor	ecx, ebx
		add	edx, esi
		rol	ebp, 1Eh
		add	ecx, edx
		mov	esi, [eax-18h]
		add	esi, 6ED9EBA1h
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_4], esi
		mov	edx, [ecx+20h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+0Ch]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx-14h], eax
		mov	edx, esi
		rol	edx, 5
		mov	eax, [esp+1Ch+arg_0]
		add	edx, edi
		mov	esi, [esp+1Ch+arg_4]
		mov	ecx, ebp
		xor	ecx, esi
		rol	esi, 1Eh
		xor	ecx, ebx
		mov	edi, [eax-14h]
		add	ecx, edx
		add	edi, 6ED9EBA1h
		add	edi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], edi
		mov	edx, [ecx-10h]
		mov	eax, [ecx+24h]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-8]
		xor	eax, ecx
		mov	ecx, ebp
		rol	eax, 1
		xor	ecx, esi
		mov	[edx-10h], eax
		mov	edx, edi
		mov	eax, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+var_4]
		xor	ecx, edi
		rol	edx, 5
		add	edx, ebx
		rol	edi, 1Eh
		mov	ebx, [eax-10h]
		add	ecx, edx
		add	ebx, 6ED9EBA1h
		add	ebx, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_4], ebx
		mov	edx, [ecx+14h]
		mov	eax, [ecx-18h]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-4]
		xor	eax, ecx
		mov	ecx, esi
		rol	eax, 1
		xor	ecx, edi
		mov	[edx-0Ch], eax
		mov	edx, ebx
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [esp+1Ch+arg_4]
		xor	ecx, ebx
		rol	edx, 5
		add	edx, ebp
		rol	ebx, 1Eh
		mov	ebp, [eax-0Ch]
		add	ecx, edx
		add	ebp, 6ED9EBA1h
		add	ebp, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], ebp
		mov	edx, [ecx+18h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx-8]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		xor	eax, ecx
		mov	ecx, edi
		rol	eax, 1
		xor	ecx, ebx
		mov	[edx-8], eax
		mov	edx, ebp
		mov	ebp, [esp+1Ch+var_4]
		xor	ecx, ebp
		mov	eax, [esp+1Ch+arg_0]
		rol	edx, 5
		add	edx, esi
		mov	esi, [eax-8]
		add	ecx, edx
		add	esi, 6ED9EBA1h
		rol	ebp, 1Eh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_4], esi
		mov	edx, [ecx-10h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-4]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+4]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx-4], eax
		mov	edx, esi
		mov	esi, [esp+1Ch+arg_4]
		mov	ecx, esi
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, ebx
		xor	ecx, ebp
		rol	edx, 5
		add	edx, edi
		rol	esi, 1Eh
		add	ecx, edx
		mov	[esp+1Ch+arg_4], esi
		mov	edi, [eax-4]
		add	edi, 6ED9EBA1h
		add	edi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_C], edi
		mov	edx, [ecx-0Ch]
		mov	eax, [ecx+20h]
		xor	edx, eax
		mov	ecx, [ecx+8]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		xor	eax, ecx
		mov	ecx, esi
		rol	eax, 1
		mov	[edx], eax
		mov	edx, edi
		mov	eax, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+var_4]
		xor	ecx, edi
		rol	edx, 5
		xor	ecx, ebp
		add	edx, ebx
		rol	edi, 1Eh
		mov	ebx, [eax]
		add	ecx, edx
		add	ebx, 6ED9EBA1h
		add	ebx, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_8], ebx
		mov	edx, [ecx+24h]
		mov	eax, [ecx+0Ch]
		xor	edx, eax
		mov	ecx, [ecx-8]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+4]
		xor	eax, ecx
		mov	ecx, esi
		mov	esi, [esp+1Ch+arg_0]
		xor	ecx, edi
		rol	eax, 1
		mov	[edx+4], eax
		mov	edx, ebx
		mov	ebx, [esp+1Ch+var_C]
		xor	ecx, ebx
		rol	edx, 5
		add	edx, ebp
		mov	ebp, [esi+4]
		add	ecx, edx
		add	ebp, 6ED9EBA1h
		add	ebp, ecx
		mov	[esp+1Ch+var_C], ebp
		mov	edx, [esi-18h]
		mov	eax, [esi+10h]
		xor	edx, eax
		mov	ecx, [esi+8]
		mov	eax, [esi-4]
		xor	ecx, edx
		xor	eax, ecx
		rol	ebx, 1Eh
		rol	eax, 1
		mov	edx, ebx
		or	edx, [esp+1Ch+var_8]
		mov	[esi+8], eax
		and	edx, edi
		mov	eax, ebx
		mov	esi, ebp
		and	eax, [esp+1Ch+var_8]
		or	edx, eax
		rol	esi, 5
		add	esi, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ebp, [esp+1Ch+var_8]
		rol	ebp, 1Eh
		mov	ecx, [eax+8]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], esi
		rol	esi, 5
		add	esi, edi
		mov	edi, [esp+1Ch+var_C]
		mov	edx, [ecx+14h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx+0Ch]
		xor	ecx, edx
		rol	edi, 1Eh
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx+0Ch], eax
		mov	edx, ebp
		or	edx, [esp+1Ch+var_C]
		mov	eax, ebp
		and	eax, [esp+1Ch+var_C]
		and	edx, ebx
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax+0Ch]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_8], esi
		rol	esi, 5
		add	esi, ebx
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, [ecx+18h]
		mov	eax, [ecx-10h]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	eax, [eax+4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+10h], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, eax
		mov	ecx, [ecx+10h]
		or	edx, edi
		and	edx, ebp
		and	eax, edi
		or	edx, eax
		add	ecx, 8F1BBCDCh
		add	esi, edx
		add	esi, ecx
		rol	ebx, 1Eh
		mov	[esp+1Ch+var_C], esi
		mov	ecx, [esp+1Ch+arg_0]
		rol	esi, 5
		add	esi, ebp
		mov	ebp, [esp+1Ch+var_8]
		rol	ebp, 1Eh
		mov	edx, [ecx+14h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+8]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx+14h], eax
		mov	edx, ebx
		or	edx, [esp+1Ch+var_8]
		mov	eax, ebx
		and	eax, [esp+1Ch+var_8]
		and	edx, edi
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax+14h]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], esi
		rol	esi, 5
		add	esi, edi
		mov	edi, [esp+1Ch+var_C]
		mov	edx, [ecx+18h]
		mov	eax, [ecx+20h]
		xor	edx, eax
		mov	ecx, [ecx+0Ch]
		xor	ecx, edx
		rol	edi, 1Eh
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-8]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx+18h], eax
		mov	edx, ebp
		or	edx, [esp+1Ch+var_C]
		mov	eax, ebp
		and	eax, [esp+1Ch+var_C]
		and	edx, ebx
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax+18h]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_8], esi
		rol	esi, 5
		add	esi, ebx
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, [ecx+24h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-4]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx+1Ch], eax
		mov	edx, edi
		or	edx, [esp+1Ch+arg_4]
		mov	eax, edi
		and	eax, [esp+1Ch+arg_4]
		and	edx, ebp
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax+1Ch]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		rol	ebx, 1Eh
		mov	[esp+1Ch+var_C], esi
		mov	ecx, eax
		rol	esi, 5
		add	esi, ebp
		mov	ebp, [esp+1Ch+var_8]
		rol	ebp, 1Eh
		mov	edx, [ecx+20h]
		mov	eax, [ecx-18h]
		xor	edx, eax
		mov	ecx, [ecx+14h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx+20h], eax
		mov	edx, ebx
		or	edx, [esp+1Ch+var_8]
		mov	eax, ebx
		and	eax, [esp+1Ch+var_8]
		and	edx, edi
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax+20h]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], esi
		rol	esi, 5
		add	esi, edi
		mov	edi, [esp+1Ch+var_C]
		mov	edx, [ecx+18h]
		mov	eax, [ecx+24h]
		xor	edx, eax
		mov	ecx, [ecx-14h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		rol	edi, 1Eh
		mov	eax, [eax+4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+24h], eax
		mov	eax, [esp+1Ch+var_C]
		mov	edx, eax
		mov	ecx, [ecx+24h]
		or	edx, ebp
		and	edx, ebx
		and	eax, ebp
		or	edx, eax
		add	ecx, 8F1BBCDCh
		add	esi, edx
		add	esi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_8], esi
		rol	esi, 5
		add	esi, ebx
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, [ecx-18h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-10h]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+8]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx-18h], eax
		mov	edx, edi
		or	edx, [esp+1Ch+arg_4]
		mov	eax, edi
		and	eax, [esp+1Ch+arg_4]
		and	edx, ebp
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax-18h]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		rol	ebx, 1Eh
		mov	[esp+1Ch+var_C], esi
		mov	ecx, eax
		rol	esi, 5
		add	esi, ebp
		mov	ebp, [esp+1Ch+var_8]
		rol	ebp, 1Eh
		mov	edx, [ecx+20h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+0Ch]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx-14h], eax
		mov	edx, ebx
		or	edx, [esp+1Ch+var_8]
		mov	eax, ebx
		and	eax, [esp+1Ch+var_8]
		and	edx, edi
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax-14h]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], esi
		rol	esi, 5
		add	esi, edi
		mov	edi, [esp+1Ch+var_C]
		mov	edx, [ecx-10h]
		mov	eax, [ecx+24h]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		xor	ecx, edx
		rol	edi, 1Eh
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-8]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx-10h], eax
		mov	edx, ebp
		or	edx, [esp+1Ch+var_C]
		mov	eax, ebp
		and	eax, [esp+1Ch+var_C]
		and	edx, ebx
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax-10h]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+var_8], esi
		rol	esi, 5
		add	esi, ebx
		mov	ebx, [esp+1Ch+arg_4]
		mov	edx, [ecx+14h]
		mov	eax, [ecx-18h]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-4]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx-0Ch], eax
		mov	edx, edi
		or	edx, [esp+1Ch+arg_4]
		mov	eax, edi
		and	eax, [esp+1Ch+arg_4]
		and	edx, ebp
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax-0Ch]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		rol	ebx, 1Eh
		mov	[esp+1Ch+var_C], esi
		mov	ecx, eax
		rol	esi, 5
		add	esi, ebp
		mov	ebp, [esp+1Ch+var_8]
		rol	ebp, 1Eh
		mov	edx, [ecx+18h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx-8]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	eax, [eax]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx-8], eax
		mov	ecx, [ecx-8]
		mov	eax, [esp+1Ch+var_8]
		add	ecx, 8F1BBCDCh
		mov	edx, eax
		and	eax, ebx
		or	edx, ebx
		and	edx, edi
		or	edx, eax
		add	esi, edx
		add	esi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		rol	esi, 5
		add	esi, edi
		mov	edi, [esp+1Ch+var_C]
		mov	edx, [ecx-10h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-4]
		xor	ecx, edx
		rol	edi, 1Eh
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+4]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx-4], eax
		mov	edx, ebp
		or	edx, [esp+1Ch+var_C]
		mov	eax, ebp
		and	eax, [esp+1Ch+var_C]
		and	edx, ebx
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax-4]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], esi
		rol	esi, 5
		add	esi, ebx
		mov	ebx, [esp+1Ch+var_4]
		mov	edx, [ecx-0Ch]
		mov	eax, [ecx+20h]
		xor	edx, eax
		mov	ecx, [ecx+8]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx], eax
		mov	edx, edi
		or	edx, [esp+1Ch+var_4]
		mov	eax, edi
		and	eax, [esp+1Ch+var_4]
		and	edx, ebp
		or	edx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	esi, edx
		mov	ecx, [eax]
		add	ecx, 8F1BBCDCh
		add	esi, ecx
		rol	ebx, 1Eh
		mov	[esp+1Ch+var_C], esi
		mov	ecx, eax
		rol	esi, 5
		add	ebp, esi
		mov	edx, [ecx+24h]
		mov	eax, [ecx+0Ch]
		xor	edx, eax
		mov	ecx, [ecx-8]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+4]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx+4], eax
		mov	edx, ebx
		or	edx, [esp+1Ch+arg_4]
		mov	eax, ebx
		and	eax, [esp+1Ch+arg_4]
		and	edx, edi
		or	edx, eax
		rol	[esp+1Ch+arg_4], 1Eh
		mov	eax, [esp+1Ch+arg_0]
		add	ebp, edx
		mov	esi, eax
		mov	ecx, [eax+4]
		mov	edx, [esi-18h]
		add	ecx, 8F1BBCDCh
		mov	eax, [esi+10h]
		add	ebp, ecx
		mov	ecx, [esi+8]
		xor	edx, eax
		mov	eax, [esi-4]
		xor	ecx, edx
		xor	eax, ecx
		rol	eax, 1
		mov	[esi+8], eax
		mov	esi, ebp
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, eax
		or	edx, [esp+1Ch+var_C]
		and	eax, [esp+1Ch+var_C]
		and	edx, ebx
		or	edx, eax
		rol	[esp+1Ch+var_C], 1Eh
		mov	eax, [esp+1Ch+arg_0]
		rol	esi, 5
		add	edi, esi
		mov	esi, eax
		add	edi, edx
		mov	ecx, [eax+8]
		add	ecx, 8F1BBCDCh
		mov	edx, [esi+14h]
		add	edi, ecx
		mov	eax, [esi-14h]
		xor	edx, eax
		mov	ecx, [esi+0Ch]
		mov	eax, [esi]
		xor	ecx, edx
		xor	eax, ecx
		mov	edx, ebp
		or	edx, [esp+1Ch+var_C]
		and	edx, [esp+1Ch+arg_4]
		rol	eax, 1
		mov	[esi+0Ch], eax
		mov	eax, ebp
		and	eax, [esp+1Ch+var_C]
		mov	esi, edi
		or	edx, eax
		rol	esi, 5
		mov	eax, [esp+1Ch+arg_0]
		add	ebx, esi
		mov	esi, eax
		rol	ebp, 1Eh
		add	ebx, edx
		mov	[esp+1Ch+var_4], ebp
		mov	ecx, [eax+0Ch]
		mov	edx, [esi+18h]
		add	ecx, 8F1BBCDCh
		mov	eax, [esi-10h]
		add	ebx, ecx
		mov	ecx, [esi+10h]
		xor	edx, eax
		mov	eax, [esi+4]
		xor	ecx, edx
		xor	eax, ecx
		mov	edx, ebp
		rol	eax, 1
		or	edx, edi
		and	edx, [esp+1Ch+var_C]
		and	ebp, edi
		mov	[esi+10h], eax
		or	ebp, edx
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, ebx
		rol	esi, 5
		add	esi, [esp+1Ch+arg_4]
		add	ebp, esi
		rol	edi, 1Eh
		mov	ecx, [eax+10h]
		mov	esi, eax
		add	ecx, 8F1BBCDCh
		mov	[esp+1Ch+arg_4], edi
		add	ebp, ecx
		mov	edx, [esi+14h]
		mov	eax, [esi+1Ch]
		xor	edx, eax
		mov	ecx, [esi-0Ch]
		mov	eax, [esi+8]
		xor	ecx, edx
		xor	eax, ecx
		mov	edx, edi
		rol	eax, 1
		or	edx, ebx
		and	edx, [esp+1Ch+var_4]
		mov	[esi+14h], eax
		mov	eax, edi
		and	eax, ebx
		mov	esi, ebp
		or	edx, eax
		rol	esi, 5
		mov	eax, [esp+1Ch+arg_0]
		add	esi, [esp+1Ch+var_C]
		add	esi, edx
		rol	ebx, 1Eh
		xor	edi, ebx
		mov	[esp+1Ch+var_8], ebx
		mov	ecx, [eax+14h]
		xor	edi, ebp
		add	ecx, 8F1BBCDCh
		rol	ebp, 1Eh
		add	esi, ecx
		mov	ecx, eax
		mov	edx, [ecx+18h]
		mov	eax, [ecx+20h]
		xor	edx, eax
		mov	ecx, [ecx+0Ch]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, esi
		rol	edx, 5
		add	edx, [esp+1Ch+var_4]
		mov	eax, [eax-8]
		add	edi, edx
		xor	eax, ecx
		mov	[esp+1Ch+var_4], ebp
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+18h], eax
		mov	ecx, [ecx+18h]
		add	ecx, 0CA62C1D6h
		add	edi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [ecx+24h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	eax, [eax-4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+1Ch], eax
		mov	ecx, [ecx+1Ch]
		xor	ebx, ebp
		add	ecx, 0CA62C1D6h
		xor	ebx, esi
		mov	edx, edi
		rol	esi, 1Eh
		rol	edx, 5
		xor	ebp, edi
		add	edx, [esp+1Ch+arg_4]
		xor	ebp, esi
		add	ebx, edx
		rol	edi, 1Eh
		add	ebx, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [ecx+20h]
		mov	eax, [ecx-18h]
		xor	edx, eax
		mov	ecx, [ecx+14h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, ebx
		rol	edx, 5
		add	edx, [esp+1Ch+var_8]
		mov	eax, [eax]
		add	ebp, edx
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+20h], eax
		mov	ecx, [ecx+20h]
		add	ecx, 0CA62C1D6h
		add	ebp, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [ecx+18h]
		mov	eax, [ecx+24h]
		xor	edx, eax
		mov	ecx, [ecx-14h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, ebp
		rol	edx, 5
		add	edx, [esp+1Ch+var_4]
		mov	eax, [eax+4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+24h], eax
		mov	eax, edi
		mov	ecx, [ecx+24h]
		xor	eax, ebx
		xor	eax, esi
		rol	ebx, 1Eh
		add	eax, edx
		add	ecx, 0CA62C1D6h
		add	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+arg_4], eax
		mov	edx, [ecx-18h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-10h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_4]
		rol	edx, 5
		add	esi, edx
		mov	eax, [eax+8]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx-18h], eax
		mov	eax, edi
		mov	ecx, [ecx-18h]
		xor	eax, ebx
		xor	eax, ebp
		add	ecx, 0CA62C1D6h
		add	esi, eax
		add	esi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		rol	ebp, 1Eh
		mov	edx, [ecx+20h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, esi
		mov	esi, [esp+1Ch+arg_4]
		rol	edx, 5
		add	edi, edx
		mov	eax, [eax+0Ch]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx-14h], eax
		mov	eax, ebx
		mov	ecx, [ecx-14h]
		xor	eax, ebp
		xor	eax, esi
		add	ecx, 0CA62C1D6h
		add	edi, eax
		rol	esi, 1Eh
		add	edi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+arg_4], edi
		mov	edx, [ecx-10h]
		mov	eax, [ecx+24h]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, edi
		mov	edi, [esp+1Ch+var_4]
		rol	edx, 5
		add	ebx, edx
		mov	eax, [eax-8]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx-10h], eax
		mov	eax, ebp
		mov	ecx, [ecx-10h]
		xor	eax, esi
		xor	eax, edi
		add	ecx, 0CA62C1D6h
		add	ebx, eax
		rol	edi, 1Eh
		add	ebx, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], ebx
		mov	edx, [ecx+14h]
		mov	eax, [ecx-18h]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, ebx
		mov	ebx, [esp+1Ch+arg_4]
		rol	edx, 5
		add	ebp, edx
		mov	eax, [eax-4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx-0Ch], eax
		mov	eax, ebx
		mov	ecx, [ecx-0Ch]
		xor	eax, esi
		xor	eax, edi
		rol	ebx, 1Eh
		add	ebp, eax
		add	ecx, 0CA62C1D6h
		add	ebp, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+arg_4], ebp
		mov	edx, [ecx+18h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx-8]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	eax, [eax]
		mov	edx, ebp
		xor	eax, ecx
		mov	ebp, [esp+1Ch+var_4]
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		rol	edx, 5
		add	esi, edx
		mov	[ecx-8], eax
		mov	eax, ebx
		mov	ecx, [ecx-8]
		xor	eax, ebp
		xor	eax, edi
		rol	ebp, 1Eh
		add	esi, eax
		add	ecx, 0CA62C1D6h
		add	esi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	edx, [ecx-10h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-4]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, esi
		mov	esi, [esp+1Ch+arg_4]
		rol	edx, 5
		add	edi, edx
		mov	eax, [eax+4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx-4], eax
		mov	eax, ebx
		mov	ecx, [ecx-4]
		xor	eax, ebp
		xor	eax, esi
		add	ecx, 0CA62C1D6h
		add	edi, eax
		rol	esi, 1Eh
		add	edi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+arg_4], edi
		mov	edx, [ecx-0Ch]
		mov	eax, [ecx+20h]
		xor	edx, eax
		mov	ecx, [ecx+8]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, edi
		mov	edi, [esp+1Ch+var_4]
		rol	edx, 5
		add	ebx, edx
		mov	eax, [eax]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx], eax
		mov	eax, ebp
		mov	ecx, [ecx]
		xor	eax, esi
		xor	eax, edi
		add	ecx, 0CA62C1D6h
		add	ebx, eax
		rol	edi, 1Eh
		add	ebx, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], ebx
		mov	edx, [ecx+24h]
		mov	eax, [ecx+0Ch]
		xor	edx, eax
		mov	ecx, [ecx-8]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, ebx
		mov	eax, [eax+4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+4], eax
		mov	ecx, [ecx+4]
		mov	eax, esi
		mov	ebx, [esp+1Ch+arg_4]
		xor	eax, edi
		xor	eax, ebx
		rol	edx, 5
		add	ebp, edx
		rol	ebx, 1Eh
		add	ebp, eax
		add	ecx, 0CA62C1D6h
		add	ebp, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+arg_4], ebp
		mov	edx, [ecx-18h]
		mov	eax, [ecx+10h]
		xor	edx, eax
		mov	ecx, [ecx+8]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, ebp
		mov	ebp, [esp+1Ch+var_4]
		rol	edx, 5
		add	esi, edx
		mov	eax, [eax-4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+8], eax
		mov	eax, ebp
		mov	ecx, [ecx+8]
		xor	eax, edi
		xor	eax, ebx
		rol	ebp, 1Eh
		add	esi, eax
		add	ecx, 0CA62C1D6h
		add	esi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	edx, [ecx+14h]
		mov	eax, [ecx-14h]
		xor	edx, eax
		mov	ecx, [ecx+0Ch]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, esi
		mov	esi, [esp+1Ch+arg_4]
		rol	edx, 5
		add	edi, edx
		mov	eax, [eax]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+0Ch], eax
		mov	eax, ebp
		mov	ecx, [ecx+0Ch]
		xor	eax, esi
		xor	eax, ebx
		rol	esi, 1Eh
		add	edi, eax
		add	ecx, 0CA62C1D6h
		add	edi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_8], edi
		mov	edx, [ecx+18h]
		mov	eax, [ecx-10h]
		xor	edx, eax
		mov	ecx, [ecx+10h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, edi
		mov	edi, [esp+1Ch+var_4]
		rol	edx, 5
		mov	eax, [eax+4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+10h], eax
		mov	eax, ebp
		xor	eax, esi
		xor	eax, edi
		add	ebx, edx
		mov	ecx, [ecx+10h]
		add	ebx, eax
		add	ecx, 0CA62C1D6h
		rol	edi, 1Eh
		add	ebx, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+arg_4], ebx
		mov	edx, [ecx+14h]
		mov	eax, [ecx+1Ch]
		xor	edx, eax
		mov	ecx, [ecx-0Ch]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, ebx
		mov	ebx, [esp+1Ch+var_8]
		rol	edx, 5
		add	ebp, edx
		mov	eax, [eax+8]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+14h], eax
		mov	eax, esi
		mov	ecx, [ecx+14h]
		xor	eax, edi
		xor	eax, ebx
		add	ecx, 0CA62C1D6h
		add	ebp, eax
		rol	ebx, 1Eh
		add	ebp, ecx
		mov	[esp+1Ch+var_8], ebx
		mov	ecx, [esp+1Ch+arg_0]
		xor	ebx, edi
		xor	ebx, [esp+1Ch+arg_4]
		rol	[esp+1Ch+arg_4], 1Eh
		mov	edx, [ecx+18h]
		mov	eax, [ecx+20h]
		xor	edx, eax
		mov	ecx, [ecx+0Ch]
		xor	ecx, edx
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx-8]
		xor	eax, ecx
		rol	eax, 1
		mov	[edx+18h], eax
		mov	edx, ebp
		rol	edx, 5
		add	edx, esi
		mov	esi, [esp+1Ch+arg_0]
		add	ebx, edx
		mov	ecx, [esi+18h]
		mov	edx, [esi+24h]
		add	ecx, 0CA62C1D6h
		mov	eax, [esi+1Ch]
		add	ebx, ecx
		mov	ecx, [esi+10h]
		xor	edx, eax
		mov	eax, [esi-4]
		xor	ecx, edx
		xor	eax, ecx
		mov	edx, ebx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[esi+1Ch], eax
		mov	eax, ebp
		mov	esi, [esp+1Ch+var_8]
		xor	eax, esi
		mov	ecx, [ecx+1Ch]
		xor	eax, [esp+1Ch+arg_4]
		add	ecx, 0CA62C1D6h
		rol	edx, 5
		add	edi, edx
		rol	ebp, 1Eh
		add	edi, eax
		add	edi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [ecx+20h]
		mov	eax, [ecx-18h]
		xor	edx, eax
		mov	ecx, [ecx+14h]
		xor	ecx, edx
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, edi
		rol	edx, 5
		add	esi, edx
		mov	eax, [eax]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+20h], eax
		mov	eax, ebp
		mov	ecx, [ecx+20h]
		xor	eax, ebx
		xor	eax, [esp+1Ch+arg_4]
		add	ecx, 0CA62C1D6h
		add	esi, eax
		rol	ebx, 1Eh
		add	esi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [ecx+18h]
		mov	eax, [ecx+24h]
		xor	edx, eax
		mov	ecx, [ecx-14h]
		mov	eax, [esp+1Ch+arg_0]
		xor	ecx, edx
		mov	edx, esi
		rol	edx, 5
		add	edx, [esp+1Ch+arg_4]
		mov	eax, [eax+4]
		xor	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		rol	eax, 1
		mov	[ecx+24h], eax
		mov	eax, ebp
		mov	ecx, [ecx+24h]
		xor	eax, ebx
		xor	eax, edi
		add	ecx, 0CA62C1D6h
		add	eax, edx
		rol	edi, 1Eh
		add	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		add	[ecx-2Ch], eax
		add	[ecx-28h], esi
		add	[ecx-24h], edi
		add	[ecx-20h], ebx
		add	[ecx-1Ch], ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10001690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002BF0(void	*)
sub_10002BF0	proc near		; DATA XREF: .rdata:1003E2E8o
					; .rdata:1003EC90o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	41h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		add	esp, 0Ch
		mov	byte ptr [esi+40h], 10h
		pop	esi
		retn
sub_10002BF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002C10	proc near		; DATA XREF: .rdata:1003E434o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, 10h
		push	edi
		mov	edi, [esp+8+arg_0]
		rep movsd
		movsb
		pop	edi
		pop	esi
		retn
sub_10002C10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002C30	proc near		; DATA XREF: .rdata:1003E2E4o
					; .rdata:1003EC8Co

arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jz	short locret_10002C44
		mov	[esp+arg_4], 41h
		jmp	PORT_ZFree_Util
; ---------------------------------------------------------------------------

locret_10002C44:			; CODE XREF: sub_10002C30+5j
		retn
sub_10002C30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002C50	proc near		; DATA XREF: .rdata:1003E2F0o
					; .rdata:1003EC98o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 10h
		jnb	short loc_10002C65
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10002C65:				; CODE XREF: sub_10002C50+5j
		push	esi
		mov	esi, [esp+4+arg_0]
		movzx	eax, byte ptr [esi+40h]
		push	eax		; size_t
		push	eax		; int
		mov	al, 10h
		sub	al, [esi+40h]
		movzx	eax, al
		add	eax, 20h
		add	eax, esi
		push	eax		; void *
		call	memset
		push	esi
		call	sub_10002ED0
		mov	eax, [esi]
		mov	[esi+20h], eax
		mov	eax, [esi+4]
		mov	[esi+24h], eax
		mov	eax, [esi+8]
		mov	[esi+28h], eax
		mov	eax, [esi+0Ch]
		push	esi
		mov	[esi+2Ch], eax
		call	sub_10002ED0
		mov	eax, [esp+18h+arg_8]
		add	esp, 14h
		mov	ecx, [esp+4+arg_4]
		mov	dword ptr [eax], 10h
		mov	eax, [esi+10h]
		mov	[ecx], eax
		mov	eax, [esi+14h]
		mov	[ecx+4], eax
		mov	eax, [esi+18h]
		mov	[ecx+8], eax
		mov	eax, [esi+1Ch]
		mov	[ecx+0Ch], eax
		pop	esi
		retn
sub_10002C50	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002CD0	proc near		; DATA XREF: .rdata:1003E2F8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 10h
		push	edi
		mov	edi, [esp+8+arg_4]
		xor	eax, eax
		rep movsd
		movsb
		pop	edi
		pop	esi
		retn
sub_10002CD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002CF0	proc near		; DATA XREF: .rdata:1003E2F4o
		mov	eax, 41h
		retn
sub_10002CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002D00(int,	void *)
sub_10002D00	proc near		; DATA XREF: .rdata:1003E2DCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	41h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10002D2D
		push	0FFFFE890h
		call	PORT_SetError_Util
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002D2D:				; CODE XREF: sub_10002D00+Fj
		push	edi
		push	41h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		mov	edx, [esp+14h+arg_4]
		add	esp, 0Ch
		mov	eax, edx
		mov	byte ptr [esi+40h], 10h
		lea	edi, [eax+1]

loc_10002D48:				; CODE XREF: sub_10002D00+4Dj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10002D48
		sub	eax, edi
		push	eax		; size_t
		push	edx		; void *
		push	esi		; int
		call	sub_10002E20
		movzx	eax, byte ptr [esi+40h]
		push	eax		; size_t
		push	eax		; int
		mov	al, 10h
		sub	al, [esi+40h]
		movzx	eax, al
		add	eax, 20h
		add	eax, esi
		push	eax		; void *
		call	memset
		push	esi
		call	sub_10002ED0
		mov	eax, [esi]
		mov	[esi+20h], eax
		mov	eax, [esi+4]
		mov	[esi+24h], eax
		mov	eax, [esi+8]
		mov	[esi+28h], eax
		mov	eax, [esi+0Ch]
		push	esi
		mov	[esi+2Ch], eax
		call	sub_10002ED0
		mov	ecx, [esp+28h+arg_0]
		mov	eax, [esi+10h]
		push	41h
		push	esi
		mov	[ecx], eax
		mov	eax, [esi+14h]
		mov	[ecx+4], eax
		mov	eax, [esi+18h]
		mov	[ecx+8], eax
		mov	eax, [esi+1Ch]
		mov	[ecx+0Ch], eax
		call	PORT_ZFree_Util
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		retn
sub_10002D00	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002DC0	proc near		; DATA XREF: .rdata:1003E2E0o
					; .rdata:1003EC84o
		push	41h
		call	PORT_ZAlloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short locret_10002DDD
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax

locret_10002DDD:			; CODE XREF: sub_10002DC0+Cj
		retn
sub_10002DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002DE0	proc near		; DATA XREF: .rdata:1003E2FCo

arg_0		= dword	ptr  4

		push	41h
		call	PORT_ZAlloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_10002DFE
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10002DFE:				; CODE XREF: sub_10002DE0+Cj
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 10h
		push	edi
		mov	edi, eax
		rep movsd
		movsb
		pop	edi
		pop	esi
		retn
sub_10002DE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002E20(int,	void *,	size_t)
sub_10002E20	proc near		; CODE XREF: sub_10002D00+54p
					; DATA XREF: .rdata:1003E2ECo ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	al, [edi+40h]
		cmp	al, 10h
		jz	short loc_10002E6E
		movzx	ecx, al
		mov	ebp, ebx
		cmp	ebx, ecx
		jb	short loc_10002E3E
		mov	ebp, ecx

loc_10002E3E:				; CODE XREF: sub_10002E20+1Aj
		mov	esi, [esp+10h+arg_4]
		mov	eax, edi
		push	ebp		; size_t
		sub	eax, ecx
		add	eax, 30h
		push	esi		; void *
		push	eax		; void *
		call	memcpy
		movzx	eax, byte ptr [edi+40h]
		add	esp, 0Ch
		add	eax, ebp
		cmp	eax, 10h
		jb	short loc_10002E68
		push	edi
		call	sub_10002ED0
		add	esp, 4

loc_10002E68:				; CODE XREF: sub_10002E20+3Dj
		sub	ebx, ebp
		add	esi, ebp
		jmp	short loc_10002E72
; ---------------------------------------------------------------------------

loc_10002E6E:				; CODE XREF: sub_10002E20+11j
		mov	esi, [esp+10h+arg_4]

loc_10002E72:				; CODE XREF: sub_10002E20+4Cj
		cmp	ebx, 10h
		jb	short loc_10002EA9
		mov	ebp, ebx
		shr	ebp, 4
		lea	esp, [esp+0]

loc_10002E80:				; CODE XREF: sub_10002E20+87j
		mov	eax, [esi]
		mov	[edi+20h], eax
		mov	eax, [esi+4]
		mov	[edi+24h], eax
		mov	eax, [esi+8]
		mov	[edi+28h], eax
		mov	eax, [esi+0Ch]
		push	edi
		mov	[edi+2Ch], eax
		call	sub_10002ED0
		add	esp, 4
		sub	ebx, 10h
		add	esi, 10h
		dec	ebp
		jnz	short loc_10002E80

loc_10002EA9:				; CODE XREF: sub_10002E20+55j
		test	ebx, ebx
		jz	short loc_10002EBB
		push	ebx		; size_t
		lea	eax, [edi+20h]
		push	esi		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_10002EBB:				; CODE XREF: sub_10002E20+8Bj
		mov	al, 10h
		sub	al, bl
		mov	[edi+40h], al
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10002E20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002ED0	proc near		; CODE XREF: sub_10002C50+34p
					; sub_10002C50+51p ...

var_33		= byte ptr -33h
var_32		= byte ptr -32h
var_31		= byte ptr -31h
var_30		= byte ptr -30h
var_2F		= byte ptr -2Fh
var_2E		= byte ptr -2Eh
var_2D		= byte ptr -2Dh
var_2C		= byte ptr -2Ch
var_2B		= byte ptr -2Bh
var_2A		= byte ptr -2Ah
var_29		= byte ptr -29h
var_28		= byte ptr -28h
var_27		= byte ptr -27h
var_26		= byte ptr -26h
var_25		= byte ptr -25h
var_24		= byte ptr -24h
var_23		= byte ptr -23h
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= byte ptr -20h
var_1F		= byte ptr -1Fh
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
var_1C		= byte ptr -1Ch
var_1B		= byte ptr -1Bh
var_1A		= byte ptr -1Ah
var_19		= byte ptr -19h
var_18		= byte ptr -18h
var_17		= byte ptr -17h
var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= byte ptr -10h
var_F		= byte ptr -0Fh
var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 34h
		mov	eax, [esp+34h+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	cl, [eax+20h]
		movzx	edx, byte ptr [eax+0Fh]
		mov	[esp+40h+var_2B], cl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		xor	cl, [eax]
		mov	dl, [eax+10h]
		mov	bh, dl
		mov	[esp+40h+var_1B], dl
		mov	dl, [eax+21h]
		mov	[esp+40h+var_31], dl
		movzx	edx, dl
		mov	[eax], cl
		movzx	ecx, cl
		xor	edx, ecx
		xor	bh, [esp+40h+var_2B]
		mov	[eax+30h], bh
		mov	cl, ds:byte_1003E5B0[edx]
		xor	cl, [eax+1]
		mov	dl, [eax+11h]
		mov	[esp+40h+var_21], dl
		xor	dl, [esp+40h+var_31]
		mov	[esp+40h+var_5], dl
		mov	[eax+31h], dl
		mov	dl, [eax+22h]
		mov	[esp+40h+var_27], dl
		movzx	edx, dl
		mov	[eax+1], cl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		xor	cl, [eax+2]
		mov	dl, [eax+12h]
		mov	[esp+40h+var_A], dl
		xor	dl, [esp+40h+var_27]
		mov	[esp+40h+var_7], dl
		mov	[eax+32h], dl
		mov	dl, [eax+23h]
		mov	[esp+40h+var_2F], dl
		movzx	edx, dl
		mov	[eax+2], cl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		mov	dl, [eax+13h]
		xor	cl, [eax+3]
		mov	[esp+40h+var_1F], dl
		xor	dl, [esp+40h+var_2F]
		mov	[esp+40h+var_6], dl
		mov	[eax+33h], dl
		mov	dl, [eax+24h]
		mov	[esp+40h+var_29], dl
		movzx	edx, dl
		mov	[eax+3], cl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		mov	dl, [eax+14h]
		xor	cl, [eax+4]
		mov	[esp+40h+var_11], dl
		xor	dl, [esp+40h+var_29]
		mov	[esp+40h+var_1D], dl
		mov	[eax+34h], dl
		mov	dl, [eax+25h]
		mov	[esp+40h+var_2D], dl
		mov	[eax+4], cl
		movzx	edx, dl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		mov	dl, [eax+15h]
		xor	cl, [eax+5]
		mov	[esp+40h+var_C], dl
		xor	dl, [esp+40h+var_2D]
		mov	[eax+5], cl
		mov	[esp+40h+var_23], dl
		mov	[eax+35h], dl
		mov	dl, [eax+26h]
		mov	[esp+40h+var_25], dl
		movzx	edx, dl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		xor	cl, [eax+6]
		mov	dl, [eax+16h]
		mov	[esp+40h+var_F], dl
		xor	dl, [esp+40h+var_25]
		mov	[esp+40h+var_19], dl
		mov	[eax+36h], dl
		mov	dl, [eax+27h]
		mov	[esp+40h+var_33], dl
		movzx	edx, dl
		mov	[eax+6], cl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		xor	cl, [eax+7]
		mov	dl, [eax+17h]
		mov	[esp+40h+var_B], dl
		xor	dl, [esp+40h+var_33]
		mov	[esp+40h+var_17], dl
		mov	[eax+37h], dl
		mov	dl, [eax+28h]
		mov	[esp+40h+var_32], dl
		movzx	edx, dl
		mov	[eax+7], cl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		xor	cl, [eax+8]
		mov	dl, [eax+18h]
		mov	[esp+40h+var_D], dl
		xor	dl, [esp+40h+var_32]
		mov	[esp+40h+var_15], dl
		mov	[eax+38h], dl
		mov	dl, [eax+29h]
		mov	[esp+40h+var_30], dl
		movzx	edx, dl
		mov	[eax+8], cl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		mov	dl, [eax+19h]
		xor	cl, [eax+9]
		mov	[esp+40h+var_9], dl
		xor	dl, [esp+40h+var_30]
		mov	[esp+40h+var_13], dl
		mov	[eax+39h], dl
		mov	dl, [eax+2Ah]
		mov	[esp+40h+var_2E], dl
		movzx	edx, dl
		mov	[eax+9], cl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		mov	dl, [eax+1Ah]
		xor	cl, [eax+0Ah]
		mov	[esp+40h+var_22], dl
		xor	dl, [esp+40h+var_2E]
		mov	[esp+40h+var_20], dl
		mov	[eax+3Ah], dl
		mov	dl, [eax+2Bh]
		mov	[esp+40h+var_2C], dl
		mov	[eax+0Ah], cl
		movzx	edx, dl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		mov	dl, [eax+1Bh]
		xor	cl, [eax+0Bh]
		mov	[esp+40h+var_1E], dl
		xor	dl, [esp+40h+var_2C]
		mov	[esp+40h+var_1C], dl
		mov	[eax+3Bh], dl
		mov	dl, [eax+2Ch]
		mov	[eax+0Bh], cl
		mov	[esp+40h+var_2A], dl
		movzx	edx, dl
		movzx	ecx, cl
		xor	edx, ecx
		mov	bl, [esp+40h+var_7]
		mov	byte ptr [esp+40h+var_4], 0
		mov	cl, ds:byte_1003E5B0[edx]
		xor	cl, [eax+0Ch]
		mov	dl, [eax+1Ch]
		mov	[esp+40h+var_1A], dl
		xor	dl, [esp+40h+var_2A]
		mov	[eax+3Ch], dl
		mov	[esp+40h+var_18], dl
		mov	dl, [eax+2Dh]
		mov	[esp+40h+var_28], dl
		mov	[eax+0Ch], cl
		movzx	edx, dl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		xor	cl, [eax+0Dh]
		mov	dl, [eax+1Dh]
		mov	[esp+40h+var_16], dl
		xor	dl, [esp+40h+var_28]
		mov	[eax+3Dh], dl
		mov	[esp+40h+var_14], dl
		mov	dl, [eax+2Eh]
		mov	[eax+0Dh], cl
		mov	[esp+40h+var_26], dl
		movzx	edx, dl
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		mov	dl, [eax+1Eh]
		xor	cl, [eax+0Eh]
		mov	[esp+40h+var_12], dl
		xor	dl, [esp+40h+var_26]
		mov	[eax+3Eh], dl
		mov	[esp+40h+var_10], dl
		mov	dl, [eax+2Fh]
		mov	[eax+0Eh], cl
		mov	[esp+40h+var_24], dl
		movzx	ecx, cl
		movzx	edx, dl
		xor	edx, ecx
		mov	cl, ds:byte_1003E5B0[edx]
		xor	[eax+0Fh], cl
		mov	cl, [eax+1Fh]
		mov	dl, [esp+40h+var_5]
		mov	dh, [esp+40h+var_6]
		mov	[esp+40h+var_E], cl
		xor	cl, [esp+40h+var_24]
		xor	esi, esi
		mov	[eax+3Fh], cl
		mov	al, [esp+40h+var_1D]
		mov	[esp+40h+var_8], cl
		jmp	short loc_100031C0
; ---------------------------------------------------------------------------
		align 10h

loc_100031C0:				; CODE XREF: sub_10002ED0+2EBj
					; sub_10002ED0+623j
		mov	ecx, [esp+40h+var_4]
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_1B]
		mov	[esp+40h+var_1B], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_21]
		mov	[esp+40h+var_21], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_A]
		mov	[esp+40h+var_A], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_1F]
		mov	[esp+40h+var_1F], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_11]
		mov	[esp+40h+var_11], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_C]
		mov	[esp+40h+var_C], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_F]
		mov	[esp+40h+var_F], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_B]
		mov	[esp+40h+var_B], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_D]
		mov	[esp+40h+var_D], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_9]
		mov	[esp+40h+var_9], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_22]
		mov	[esp+40h+var_22], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_1E]
		mov	[esp+40h+var_1E], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_1A]
		mov	[esp+40h+var_1A], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_16]
		mov	[esp+40h+var_16], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_12]
		mov	[esp+40h+var_12], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_E]
		mov	[esp+40h+var_E], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_2B]
		mov	[esp+40h+var_2B], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_31]
		mov	[esp+40h+var_31], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_27]
		mov	[esp+40h+var_27], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_2F]
		mov	[esp+40h+var_2F], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_29]
		mov	[esp+40h+var_29], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_2D]
		mov	[esp+40h+var_2D], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_25]
		mov	[esp+40h+var_25], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_33]
		mov	[esp+40h+var_33], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_32]
		mov	[esp+40h+var_32], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_30]
		mov	[esp+40h+var_30], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_2E]
		mov	[esp+40h+var_2E], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_2C]
		mov	[esp+40h+var_2C], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_2A]
		mov	[esp+40h+var_2A], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_28]
		mov	[esp+40h+var_28], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_26]
		mov	[esp+40h+var_26], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_24]
		mov	[esp+40h+var_24], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	bh, cl
		movzx	ecx, bh
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	dl, cl
		movzx	ecx, dl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	bl, cl
		movzx	ecx, bl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	dh, cl
		movzx	ecx, dh
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	al, cl
		movzx	ecx, al
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_23]
		mov	[esp+40h+var_23], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_19]
		mov	[esp+40h+var_19], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_17]
		mov	[esp+40h+var_17], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_15]
		mov	[esp+40h+var_15], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_13]
		mov	[esp+40h+var_13], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_20]
		mov	[esp+40h+var_20], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_1C]
		mov	[esp+40h+var_1C], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_18]
		mov	[esp+40h+var_18], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_14]
		mov	[esp+40h+var_14], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_10]
		mov	[esp+40h+var_10], cl
		movzx	ecx, cl
		mov	cl, ds:byte_1003E5B0[ecx]
		xor	cl, [esp+40h+var_8]
		movzx	edi, cl
		add	edi, esi
		mov	[esp+40h+var_8], cl
		and	edi, 800000FFh
		jns	short loc_100034EB
		dec	edi
		or	edi, 0FFFFFF00h
		inc	edi

loc_100034EB:				; CODE XREF: sub_10002ED0+611j
		inc	esi
		mov	[esp+40h+var_4], edi
		cmp	esi, 12h
		jl	loc_100031C0
		mov	ch, [esp+40h+var_2B]
		mov	[esp+40h+var_1D], al
		mov	eax, [esp+40h+arg_0]
		mov	[eax+20h], ch
		mov	ch, [esp+40h+var_1B]
		mov	[eax+10h], ch
		mov	ch, [esp+40h+var_31]
		mov	[eax+21h], ch
		mov	ch, [esp+40h+var_21]
		mov	[eax+11h], ch
		mov	ch, [esp+40h+var_A]
		mov	[eax+12h], ch
		mov	ch, [esp+40h+var_1F]
		mov	[eax+13h], ch
		mov	ch, [esp+40h+var_11]
		mov	[eax+14h], ch
		mov	ch, [esp+40h+var_C]
		mov	[eax+15h], ch
		mov	ch, [esp+40h+var_23]
		mov	[eax+35h], ch
		mov	ch, [esp+40h+var_F]
		mov	[eax+16h], ch
		mov	ch, [esp+40h+var_19]
		mov	[eax+36h], ch
		mov	ch, [esp+40h+var_B]
		mov	[eax+31h], dl
		mov	dl, [esp+40h+var_27]
		mov	[eax+17h], ch
		mov	ch, [esp+40h+var_17]
		mov	[eax+22h], dl
		mov	dl, [esp+40h+var_2F]
		mov	[eax+37h], ch
		mov	ch, [esp+40h+var_D]
		mov	[eax+23h], dl
		mov	dl, [esp+40h+var_29]
		mov	[eax+18h], ch
		mov	ch, [esp+40h+var_15]
		mov	[eax+24h], dl
		mov	dl, [esp+40h+var_1D]
		mov	[eax+38h], ch
		mov	ch, [esp+40h+var_9]
		mov	[eax+34h], dl
		mov	dl, [esp+40h+var_2D]
		mov	[eax+19h], ch
		mov	ch, [esp+40h+var_13]
		mov	[eax+25h], dl
		mov	dl, [esp+40h+var_25]
		mov	[eax+39h], ch
		mov	ch, [esp+40h+var_22]
		mov	[eax+26h], dl
		mov	dl, [esp+40h+var_33]
		mov	[eax+1Ah], ch
		mov	ch, [esp+40h+var_20]
		mov	[eax+27h], dl
		mov	dl, [esp+40h+var_32]
		mov	[eax+3Ah], ch
		mov	ch, [esp+40h+var_1E]
		mov	[eax+28h], dl
		mov	dl, [esp+40h+var_30]
		mov	[eax+1Bh], ch
		mov	ch, [esp+40h+var_1C]
		mov	[eax+29h], dl
		mov	dl, [esp+40h+var_2E]
		mov	[eax+3Bh], ch
		mov	ch, [esp+40h+var_1A]
		mov	[eax+2Ah], dl
		mov	dl, [esp+40h+var_2C]
		mov	[eax+1Ch], ch
		mov	ch, [esp+40h+var_18]
		mov	[eax+2Bh], dl
		mov	dl, [esp+40h+var_2A]
		mov	[eax+3Ch], ch
		mov	ch, [esp+40h+var_16]
		mov	[eax+2Ch], dl
		mov	dl, [esp+40h+var_28]
		mov	[eax+1Dh], ch
		mov	ch, [esp+40h+var_14]
		mov	[eax+30h], bh
		mov	[eax+32h], bl
		mov	[eax+33h], dh
		mov	[eax+2Dh], dl
		mov	dl, [esp+40h+var_26]
		mov	[eax+3Dh], ch
		mov	ch, [esp+40h+var_12]
		mov	[eax+1Eh], ch
		mov	ch, [esp+40h+var_10]
		pop	edi
		mov	[eax+2Eh], dl
		mov	dl, [esp+3Ch+var_24]
		mov	[eax+3Eh], ch
		mov	ch, [esp+3Ch+var_E]
		pop	esi
		mov	[eax+2Fh], dl
		mov	[eax+1Fh], ch
		mov	[eax+3Fh], cl
		mov	byte ptr [eax+40h], 10h
		pop	ebx
		add	esp, 34h
		retn
sub_10002ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003650	proc near		; DATA XREF: .rdata:1003E2C0o
					; .rdata:1003ECB8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 67452301h
		mov	dword ptr [eax+0Ch], 0EFCDAB89h
		mov	dword ptr [eax+10h], 98BADCFEh
		mov	dword ptr [eax+14h], 10325476h
		retn
sub_10003650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003680	proc near		; DATA XREF: .rdata:1003E438o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, 16h
		push	edi
		mov	edi, [esp+8+arg_0]
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10003680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100036A0(void	*, int)
sub_100036A0	proc near		; DATA XREF: .rdata:1003E2BCo
					; .rdata:1003ECB4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	58h		; size_t
		push	0		; int
		push	[esp+8+arg_0]	; void *
		call	memset
		add	esp, 0Ch
		cmp	[esp+arg_4], 0
		jz	short locret_100036C1
		push	[esp+arg_0]
		call	PORT_Free_Util
		pop	ecx

locret_100036C1:			; CODE XREF: sub_100036A0+15j
		retn
sub_100036A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100036D0	proc near		; DATA XREF: .rdata:1003E2C8o
					; .rdata:1003ECC0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esi]
		mov	ecx, edi
		and	ecx, 3Fh
		cmp	[esp+8+arg_C], 10h
		jnb	short loc_100036F4
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100036F4:				; CODE XREF: sub_100036D0+12j
		push	ebx
		mov	ebx, [esi+4]
		mov	eax, edi
		shr	eax, 1Dh
		shl	ebx, 3
		or	ebx, eax
		shl	edi, 3
		mov	eax, 38h
		cmp	ecx, 38h
		jb	short loc_10003714
		mov	eax, 78h

loc_10003714:				; CODE XREF: sub_100036D0+3Dj
		sub	eax, ecx
		push	eax		; int
		push	offset dword_1003E6B0 ;	void *
		push	esi		; int
		call	sub_10003960
		add	esp, 0Ch
		mov	[esi+50h], edi
		lea	eax, [esi+18h]
		mov	[esi+54h], ebx
		push	eax
		push	esi
		call	sub_10003A00
		mov	eax, [esp+14h+arg_8]
		add	esp, 8
		pop	ebx
		test	eax, eax
		jz	short loc_10003747
		mov	dword ptr [eax], 10h

loc_10003747:				; CODE XREF: sub_100036D0+6Fj
		mov	ecx, [esp+8+arg_4]
		mov	eax, [esi+8]
		pop	edi
		mov	[ecx], eax
		mov	eax, [esi+0Ch]
		mov	[ecx+4], eax
		mov	eax, [esi+10h]
		mov	[ecx+8], eax
		mov	eax, [esi+14h]
		mov	[ecx+0Ch], eax
		pop	esi
		retn
sub_100036D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003770	proc near		; DATA XREF: .rdata:1003ECCCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 10h
		jnb	short loc_10003785
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10003785:				; CODE XREF: sub_10003770+5j
		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	esi, [eax+10h]
		mov	edi, [eax+14h]
		mov	ecx, [eax+8]
		mov	edx, [eax+0Ch]
		mov	eax, [esp+8+arg_4]
		mov	[eax], ecx
		mov	[eax+4], edx
		mov	[eax+8], esi
		mov	[eax+0Ch], edi
		mov	eax, [esp+8+arg_8]
		pop	edi
		pop	esi
		test	eax, eax
		jz	short locret_100037B6
		mov	dword ptr [eax], 10h

locret_100037B6:			; CODE XREF: sub_10003770+3Ej
		retn
sub_10003770	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100037C0	proc near		; DATA XREF: .rdata:1003E2D0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 16h
		push	edi
		mov	edi, [esp+8+arg_4]
		xor	eax, eax
		rep movsd
		pop	edi
		pop	esi
		retn
sub_100037C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100037E0	proc near		; DATA XREF: .rdata:1003E2CCo
		mov	eax, 58h
		retn
sub_100037E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100037F0(int,	void *)
sub_100037F0	proc near		; DATA XREF: .rdata:1003E2B0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, edx
		push	esi
		lea	esi, [eax+1]
		lea	ebx, [ebx+0]

loc_10003800:				; CODE XREF: sub_100037F0+15j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10003800
		sub	eax, esi
		push	eax		; int
		push	edx		; void *
		push	[esp+0Ch+arg_0]	; int
		call	sub_10003820
		add	esp, 0Ch
		pop	esi
		retn
sub_100037F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003820(int,	void *,	int)
sub_10003820	proc near		; CODE XREF: sub_100037F0+1Fp
					; DATA XREF: .rdata:1003E2B4o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 5Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+5Ch+var_4], eax
		mov	eax, [esp+5Ch+arg_4]
		push	ebx
		push	esi
		mov	esi, [esp+64h+arg_0]
		push	edi
		push	[esp+68h+arg_8]	; int
		mov	[esp+6Ch+var_5C], 0
		push	eax		; void *
		lea	eax, [esp+70h+var_5C]
		mov	[esp+70h+var_58], 0
		push	eax		; int
		mov	[esp+74h+var_54], 67452301h
		mov	[esp+74h+var_50], 0EFCDAB89h
		mov	[esp+74h+var_4C], 98BADCFEh
		mov	[esp+74h+var_48], 10325476h
		call	sub_10003960
		mov	ecx, [esp+74h+var_5C]
		add	esp, 0Ch
		mov	eax, [esp+68h+var_58]
		mov	edi, ecx
		shl	eax, 3
		mov	edx, ecx
		shr	edi, 1Dh
		and	edx, 3Fh
		or	edi, eax
		lea	ebx, ds:0[ecx*8]
		mov	eax, 38h
		cmp	edx, 38h
		jb	short loc_100038A8
		mov	eax, 78h

loc_100038A8:				; CODE XREF: sub_10003820+81j
		sub	eax, edx
		push	eax		; int
		lea	eax, [esp+6Ch+var_5C]
		push	offset dword_1003E6B0 ;	void *
		push	eax		; int
		call	sub_10003960
		add	esp, 0Ch
		mov	[esp+68h+var_C], ebx
		lea	eax, [esp+68h+var_44]
		mov	[esp+68h+var_8], edi
		push	eax
		lea	eax, [esp+6Ch+var_5C]
		push	eax
		call	sub_10003A00
		mov	eax, [esp+70h+var_54]
		add	esp, 8
		mov	ecx, [esp+68h+var_4]
		mov	[esi], eax
		mov	eax, [esp+68h+var_50]
		mov	[esi+4], eax
		mov	eax, [esp+68h+var_4C]
		mov	[esi+8], eax
		mov	eax, [esp+68h+var_48]
		pop	edi
		mov	[esi+0Ch], eax
		xor	eax, eax
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
sub_10003820	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003910	proc near		; DATA XREF: .rdata:1003E2B8o
					; .rdata:1003ECACo
		push	58h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short locret_1000392D
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax

locret_1000392D:			; CODE XREF: sub_10003910+Cj
		retn
sub_10003910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003930	proc near		; DATA XREF: .rdata:1003E2D4o

arg_0		= dword	ptr  4

		push	58h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000394E
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000394E:				; CODE XREF: sub_10003930+Cj
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 16h
		push	edi
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10003930	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003960(int,	void *,	int)
sub_10003960	proc near		; CODE XREF: sub_100036D0+4Dp
					; sub_10003820+53p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		mov	eax, [ebx]
		mov	ecx, eax
		add	eax, esi
		and	ecx, 3Fh
		mov	[esp+0Ch+arg_0], ecx
		mov	[ebx], eax
		cmp	eax, esi
		jnb	short loc_10003981
		inc	dword ptr [ebx+4]

loc_10003981:				; CODE XREF: sub_10003960+1Cj
		push	ebp
		test	ecx, ecx
		jz	short loc_100039C5
		mov	ebp, 40h
		sub	ebp, ecx
		cmp	esi, ebp
		jnb	short loc_10003993
		mov	ebp, esi

loc_10003993:				; CODE XREF: sub_10003960+2Fj
		mov	edi, [esp+10h+arg_4]
		lea	eax, [ebx+18h]
		push	ebp		; size_t
		add	eax, ecx
		push	edi		; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 0Ch
		add	eax, ebp
		cmp	eax, 40h
		jb	short loc_100039BF
		lea	eax, [ebx+18h]
		push	eax
		push	ebx
		call	sub_10003A00
		add	esp, 8

loc_100039BF:				; CODE XREF: sub_10003960+50j
		sub	esi, ebp
		add	edi, ebp
		jmp	short loc_100039C9
; ---------------------------------------------------------------------------

loc_100039C5:				; CODE XREF: sub_10003960+24j
		mov	edi, [esp+10h+arg_4]

loc_100039C9:				; CODE XREF: sub_10003960+63j
		cmp	esi, 40h
		jb	short loc_100039E6
		mov	ebp, esi
		shr	ebp, 6

loc_100039D3:				; CODE XREF: sub_10003960+84j
		push	edi
		push	ebx
		call	sub_10003A00
		add	esp, 8
		sub	esi, 40h
		add	edi, 40h
		dec	ebp
		jnz	short loc_100039D3

loc_100039E6:				; CODE XREF: sub_10003960+6Cj
		pop	ebp
		test	esi, esi
		jz	short loc_100039F9
		push	esi		; size_t
		lea	eax, [ebx+18h]
		push	edi		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_100039F9:				; CODE XREF: sub_10003960+89j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10003960	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003A00	proc near		; CODE XREF: sub_100036D0+60p
					; sub_10003820+AFp ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 48h
		mov	ecx, [esp+48h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+50h+arg_4]
		mov	ebx, [ecx+8]
		mov	eax, [ecx+10h]
		push	esi
		mov	esi, [ecx+14h]
		mov	edx, [ebp+0]
		push	edi
		mov	edi, [ecx+0Ch]
		mov	ecx, edi
		not	ecx
		mov	[esp+58h+var_48], edx
		and	ecx, esi
		and	eax, edi
		or	ecx, eax
		add	esi, 0E8C7B756h
		add	ecx, edx
		mov	eax, [esp+58h+arg_0]
		lea	edx, [ebx-28955B88h]
		mov	ebx, [ebp+4]
		add	edx, ecx
		mov	[esp+58h+var_34], ebx
		rol	edx, 7
		add	edx, edi
		mov	ecx, edx
		not	ecx
		and	ecx, [eax+10h]
		mov	eax, edi
		and	eax, edx
		or	ecx, eax
		add	ecx, ebx
		mov	ebx, [ebp+8]
		add	esi, ecx
		mov	[esp+58h+var_1C], ebx
		rol	esi, 0Ch
		add	esi, edx
		mov	ecx, esi
		mov	eax, esi
		not	ecx
		and	eax, edx
		and	ecx, edi
		mov	edi, [esp+58h+arg_0]
		or	ecx, eax
		mov	eax, esi
		add	ecx, ebx
		mov	ebx, [ebp+0Ch]
		mov	[esp+58h+var_3C], ebx
		mov	edi, [edi+10h]
		add	edi, 242070DBh
		add	edi, ecx
		ror	edi, 0Fh
		add	edi, esi
		and	eax, edi
		mov	ecx, edi
		not	ecx
		and	ecx, edx
		or	ecx, eax
		mov	eax, [ebp+10h]
		add	ecx, ebx
		mov	[esp+58h+var_24], eax
		mov	ebx, [esp+58h+arg_0]
		mov	eax, edi
		mov	ebx, [ebx+0Ch]
		add	ebx, 0C1BDCEEEh
		add	ebx, ecx
		ror	ebx, 0Ah
		add	ebx, edi
		mov	ecx, ebx
		and	eax, ebx
		not	ecx
		and	ecx, esi
		or	ecx, eax
		mov	eax, [ebp+10h]
		add	eax, 0F57C0FAFh
		add	ecx, eax
		mov	eax, [ebp+14h]
		add	edx, ecx
		rol	edx, 7
		add	edx, ebx
		mov	[esp+58h+var_40], eax
		mov	ecx, edx
		not	ecx
		mov	eax, ebx
		and	ecx, edi
		and	eax, edx
		or	ecx, eax
		mov	eax, [ebp+14h]
		add	eax, 4787C62Ah
		add	ecx, eax
		mov	eax, [ebp+18h]
		add	esi, ecx
		mov	[esp+58h+var_2C], eax
		rol	esi, 0Ch
		add	esi, edx
		mov	ecx, esi
		mov	eax, esi
		not	ecx
		and	eax, edx
		and	ecx, ebx
		or	ecx, eax
		mov	eax, [ebp+18h]
		add	eax, 0A8304613h
		add	ecx, eax
		mov	eax, [ebp+1Ch]
		add	edi, ecx
		mov	[esp+58h+var_10], eax
		ror	edi, 0Fh
		mov	eax, esi
		add	edi, esi
		and	eax, edi
		mov	ecx, edi
		not	ecx
		and	ecx, edx
		or	ecx, eax
		mov	eax, [ebp+1Ch]
		add	eax, 0FD469501h
		add	ecx, eax
		mov	eax, [ebp+20h]
		add	ebx, ecx
		mov	[esp+58h+var_30], eax
		ror	ebx, 0Ah
		mov	eax, edi
		add	ebx, edi
		and	eax, ebx
		mov	ecx, ebx
		not	ecx
		and	ecx, esi
		or	ecx, eax
		mov	eax, [ebp+20h]
		add	eax, 698098D8h
		add	ecx, eax
		mov	eax, [ebp+24h]
		add	edx, ecx
		mov	[esp+58h+var_18], eax
		rol	edx, 7
		mov	eax, ebx
		add	edx, ebx
		and	eax, edx
		mov	ecx, edx
		not	ecx
		and	ecx, edi
		or	ecx, eax
		mov	eax, [ebp+24h]
		mov	ebp, [ebp+28h]
		add	eax, 8B44F7AFh
		add	ecx, eax
		mov	[esp+58h+var_38], ebp
		add	esi, ecx
		rol	esi, 0Ch
		add	esi, edx
		mov	ecx, esi
		mov	eax, esi
		not	ecx
		and	eax, edx
		and	ecx, ebx
		or	ecx, eax
		add	ecx, ebp
		lea	ebp, [edi-0A44Fh]
		add	ebp, ecx
		ror	ebp, 0Fh
		mov	edi, [esp+58h+arg_4]
		add	ebp, esi
		mov	ecx, ebp
		mov	[esp+58h+var_C], ebp
		not	ecx
		and	ecx, edx
		mov	eax, [edi+2Ch]
		mov	[esp+58h+var_20], eax
		mov	eax, esi
		and	eax, ebp
		or	ecx, eax
		mov	eax, [edi+2Ch]
		mov	edi, [edi+30h]
		add	eax, 895CD7BEh
		add	ecx, eax
		mov	[esp+58h+var_14], edi
		add	ebx, ecx
		mov	eax, ebp
		ror	ebx, 0Ah
		add	ebx, ebp
		and	eax, ebx
		mov	[esp+58h+var_8], ebx
		mov	ecx, ebx
		not	ecx
		and	ecx, esi
		or	ecx, eax
		add	ecx, edi
		lea	edi, [edx+6B901122h]
		mov	edx, [esp+58h+arg_4]
		add	edi, ecx
		rol	edi, 7
		add	edi, ebx
		mov	ecx, edi
		mov	[esp+58h+var_4], edi
		mov	eax, [edx+34h]
		not	ecx
		and	ecx, ebp
		mov	[esp+58h+var_28], eax
		mov	eax, ebx
		lea	ebp, [esi-2678E6Dh]
		and	eax, edi
		or	ecx, eax
		add	ecx, [edx+34h]
		mov	edx, [edx+38h]
		add	ebp, ecx
		rol	ebp, 0Ch
		add	ebp, edi
		mov	[esp+58h+var_44], edx
		mov	esi, ebp
		mov	eax, ebp
		and	eax, edi
		not	esi
		mov	ecx, esi
		and	ecx, ebx
		mov	ebx, [esp+58h+var_C]
		or	ecx, eax
		add	ebx, 0A679438Eh
		mov	eax, [esp+58h+arg_4]
		add	ecx, edx
		add	ebx, ecx
		ror	ebx, 0Fh
		add	ebx, ebp
		mov	eax, [eax+3Ch]
		mov	edx, ebx
		mov	[esp+58h+arg_4], eax
		not	edx
		mov	ecx, edx
		mov	eax, ebp
		and	ecx, edi
		and	eax, ebx
		mov	edi, [esp+58h+var_8]
		or	ecx, eax
		add	ecx, [esp+58h+arg_4]
		add	edi, 49B40821h
		add	edi, ecx
		mov	eax, ebp
		ror	edi, 0Ah
		and	esi, ebx
		add	edi, ebx
		and	eax, edi
		or	esi, eax
		add	esi, [esp+58h+var_34]
		and	edx, edi
		mov	eax, [esp+58h+var_4]
		mov	ecx, edi
		add	eax, 0F61E2562h
		not	ecx
		add	esi, eax
		mov	eax, ebx
		rol	esi, 5
		add	esi, edi
		and	ecx, esi
		and	eax, esi
		or	edx, eax
		add	edx, 0C040B340h
		add	edx, [esp+58h+var_2C]
		add	edx, ebp
		rol	edx, 9
		add	edx, esi
		mov	eax, edx
		and	eax, edi
		or	ecx, eax
		add	ecx, 265E5A51h
		add	ecx, [esp+58h+var_20]
		add	ebx, ecx
		mov	ecx, esi
		not	ecx
		rol	ebx, 0Eh
		and	ecx, edx
		add	ebx, edx
		mov	eax, ebx
		and	eax, esi
		or	ecx, eax
		mov	eax, edx
		add	ecx, 0E9B6C7AAh
		add	ecx, [esp+58h+var_48]
		add	edi, ecx
		mov	ecx, edx
		not	ecx
		ror	edi, 0Ch
		and	ecx, ebx
		add	edi, ebx
		and	eax, edi
		or	ecx, eax
		mov	eax, ebx
		add	ecx, 0D62F105Dh
		add	ecx, [esp+58h+var_40]
		add	esi, ecx
		mov	ecx, ebx
		not	ecx
		rol	esi, 5
		and	ecx, edi
		add	esi, edi
		and	eax, esi
		or	ecx, eax
		add	ecx, 2441453h
		add	ecx, [esp+58h+var_38]
		add	edx, ecx
		mov	ecx, edi
		not	ecx
		rol	edx, 9
		and	ecx, esi
		add	edx, esi
		mov	eax, edx
		and	eax, edi
		or	ecx, eax
		add	ecx, 0D8A1E681h
		add	ecx, [esp+58h+arg_4]
		add	ebx, ecx
		mov	ecx, esi
		rol	ebx, 0Eh
		not	ecx
		add	ebx, edx
		and	ecx, edx
		mov	eax, ebx
		and	eax, esi
		or	ecx, eax
		add	ecx, 0E7D3FBC8h
		add	ecx, [esp+58h+var_24]
		add	edi, ecx
		ror	edi, 0Ch
		add	edi, ebx
		mov	ecx, edx
		mov	eax, edx
		not	ecx
		and	eax, edi
		and	ecx, ebx
		mov	ebp, ebx
		or	ecx, eax
		not	ebp
		add	ecx, 21E1CDE6h
		and	ebp, edi
		add	ecx, [esp+58h+var_18]
		mov	eax, ebx
		add	esi, ecx
		mov	ecx, edi
		not	ecx
		rol	esi, 5
		add	esi, edi
		and	eax, esi
		and	ecx, esi
		or	ebp, eax
		add	ebp, 0C33707D6h
		add	ebp, [esp+58h+var_44]
		add	ebp, edx
		lea	edx, [esi-561C16FBh]
		rol	ebp, 9
		add	ebp, esi
		mov	eax, ebp
		and	eax, edi
		or	ecx, eax
		add	ecx, 0F4D50D87h
		add	ecx, [esp+58h+var_3C]
		add	ebx, ecx
		mov	ecx, esi
		not	ecx
		rol	ebx, 0Eh
		and	ecx, ebp
		add	ebx, ebp
		mov	eax, ebx
		and	eax, esi
		lea	esi, [ebp-3105C08h]
		or	ecx, eax
		mov	eax, ebp
		add	ecx, 455A14EDh
		add	ecx, [esp+58h+var_30]
		add	edi, ecx
		mov	ecx, ebp
		not	ecx
		ror	edi, 0Ch
		and	ecx, ebx
		mov	ebp, [esp+58h+var_10]
		add	edi, ebx
		and	eax, edi
		mov	[esp+58h+var_4], edi
		or	ecx, eax
		mov	eax, ebx
		add	ecx, [esp+58h+var_28]
		add	edx, ecx
		mov	ecx, ebx
		not	ecx
		rol	edx, 5
		and	ecx, edi
		add	edx, edi
		and	eax, edx
		or	ecx, eax
		add	ecx, [esp+58h+var_1C]
		add	esi, ecx
		mov	ecx, edi
		rol	esi, 9
		not	ecx
		add	esi, edx
		and	ecx, edx
		mov	eax, esi
		and	eax, edi
		lea	edi, [ebx+676F02D9h]
		or	ecx, eax
		add	ecx, ebp
		add	edi, ecx
		mov	ecx, edx
		rol	edi, 0Eh
		not	ecx
		add	edi, esi
		mov	ebx, [esp+58h+var_4]
		and	ecx, esi
		mov	eax, edi
		add	ebx, 8D2A4C8Ah
		and	eax, edx
		add	ebp, 0F6BB4B60h
		or	ecx, eax
		mov	eax, esi
		add	ecx, [esp+58h+var_14]
		xor	eax, edi
		add	ebx, ecx
		ror	ebx, 0Ch
		add	ebx, edi
		xor	eax, ebx
		add	eax, 0FFFA3942h
		add	eax, [esp+58h+var_40]
		add	edx, eax
		mov	eax, edi
		xor	eax, ebx
		rol	edx, 4
		add	edx, ebx
		xor	eax, edx
		add	eax, 8771F681h
		add	eax, [esp+58h+var_30]
		add	esi, eax
		rol	esi, 0Bh
		add	esi, edx
		mov	eax, esi
		mov	ecx, esi
		xor	eax, ebx
		xor	eax, edx
		add	eax, 6D9D6122h
		add	eax, [esp+58h+var_20]
		add	edi, eax
		rol	edi, 10h
		add	edi, esi
		xor	ecx, edi
		mov	eax, ecx
		xor	eax, edx
		add	eax, 0FDE5380Ch
		add	eax, [esp+58h+var_44]
		add	ebx, eax
		mov	eax, edi
		ror	ebx, 9
		add	ebx, edi
		xor	ecx, ebx
		xor	eax, ebx
		add	ecx, 0A4BEEA44h
		add	ecx, [esp+58h+var_34]
		add	edx, ecx
		rol	edx, 4
		add	edx, ebx
		xor	eax, edx
		add	eax, 4BDECFA9h
		add	eax, [esp+58h+var_24]
		add	esi, eax
		rol	esi, 0Bh
		add	esi, edx
		mov	eax, esi
		mov	ecx, esi
		xor	eax, ebx
		xor	eax, edx
		add	eax, ebp
		lea	ebp, [edx+289B7EC6h]
		add	edi, eax
		rol	edi, 10h
		add	edi, esi
		xor	ecx, edi
		mov	eax, ecx
		xor	eax, edx
		add	eax, 0BEBFBC70h
		add	eax, [esp+58h+var_38]
		add	ebx, eax
		mov	eax, edi
		ror	ebx, 9
		add	ebx, edi
		xor	ecx, ebx
		add	ecx, [esp+58h+var_28]
		add	ebp, ecx
		rol	ebp, 4
		add	ebp, ebx
		xor	eax, ebx
		xor	eax, ebp
		add	eax, 0EAA127FAh
		add	eax, [esp+58h+var_48]
		add	esi, eax
		rol	esi, 0Bh
		add	esi, ebp
		mov	eax, esi
		mov	ecx, esi
		xor	eax, ebx
		xor	eax, ebp
		add	eax, 0D4EF3085h
		add	eax, [esp+58h+var_3C]
		add	edi, eax
		rol	edi, 10h
		add	edi, esi
		xor	ecx, edi
		mov	eax, edi
		mov	edx, ecx
		xor	edx, ebp
		add	edx, 4881D05h
		add	edx, [esp+58h+var_2C]
		add	edx, ebx
		ror	edx, 9
		add	edx, edi
		xor	eax, edx
		xor	ecx, edx
		add	ecx, 0D9D4D039h
		add	ecx, [esp+58h+var_18]
		add	ecx, ebp
		rol	ecx, 4
		add	ecx, edx
		xor	eax, ecx
		add	eax, 0E6DB99E5h
		add	eax, [esp+58h+var_14]
		add	esi, eax
		rol	esi, 0Bh
		add	esi, ecx
		mov	eax, esi
		xor	eax, edx
		xor	eax, ecx
		add	eax, 1FA27CF8h
		add	eax, [esp+58h+arg_4]
		add	edi, eax
		mov	eax, esi
		rol	edi, 10h
		add	edi, esi
		xor	eax, edi
		xor	eax, ecx
		add	eax, 0C4AC5665h
		add	eax, [esp+58h+var_1C]
		add	edx, eax
		mov	eax, esi
		not	eax
		ror	edx, 9
		add	edx, edi
		or	eax, edx
		xor	eax, edi
		add	eax, 0F4292244h
		add	eax, [esp+58h+var_48]
		add	ecx, eax
		mov	eax, edi
		not	eax
		rol	ecx, 6
		add	ecx, edx
		or	eax, ecx
		xor	eax, edx
		add	eax, 432AFF97h
		add	eax, [esp+58h+var_10]
		add	esi, eax
		mov	eax, edx
		rol	esi, 0Ah
		not	eax
		add	esi, ecx
		or	eax, esi
		xor	eax, ecx
		add	eax, 0AB9423A7h
		add	eax, [esp+58h+var_44]
		add	edi, eax
		rol	edi, 0Fh
		add	edi, esi
		mov	eax, ecx
		not	eax
		or	eax, edi
		xor	eax, esi
		add	eax, 0FC93A039h
		add	eax, [esp+58h+var_40]
		add	edx, eax
		mov	eax, esi
		not	eax
		ror	edx, 0Bh
		add	edx, edi
		or	eax, edx
		xor	eax, edi
		add	eax, 655B59C3h
		add	eax, [esp+58h+var_14]
		add	ecx, eax
		mov	eax, edi
		not	eax
		rol	ecx, 6
		add	ecx, edx
		or	eax, ecx
		xor	eax, edx
		add	eax, 8F0CCC92h
		add	eax, [esp+58h+var_3C]
		add	esi, eax
		mov	eax, edx
		not	eax
		rol	esi, 0Ah
		add	esi, ecx
		or	eax, esi
		xor	eax, ecx
		add	eax, 0FFEFF47Dh
		add	eax, [esp+58h+var_38]
		lea	ebx, [esi-1D31920h]
		add	edi, eax
		mov	eax, ecx
		not	eax
		rol	edi, 0Fh
		add	edi, esi
		or	eax, edi
		xor	eax, esi
		add	eax, 85845DD1h
		add	eax, [esp+58h+var_34]
		lea	ebp, [edi-5CFEBCECh]
		add	edx, eax
		mov	eax, esi
		not	eax
		ror	edx, 0Bh
		add	edx, edi
		or	eax, edx
		xor	eax, edi
		add	eax, 6FA87E4Fh
		add	eax, [esp+58h+var_30]
		add	ecx, eax
		mov	eax, edi
		not	eax
		rol	ecx, 6
		add	ecx, edx
		or	eax, ecx
		xor	eax, edx
		add	eax, [esp+58h+arg_4]
		add	ebx, eax
		mov	eax, edx
		not	eax
		rol	ebx, 0Ah
		add	ebx, ecx
		or	eax, ebx
		xor	eax, ecx
		add	eax, [esp+58h+var_2C]
		add	ebp, eax
		mov	eax, ecx
		rol	ebp, 0Fh
		not	eax
		add	ebp, ebx
		or	eax, ebp
		xor	eax, ebx
		add	eax, 4E0811A1h
		add	eax, [esp+58h+var_28]
		add	edx, eax
		ror	edx, 0Bh
		add	edx, ebp
		mov	eax, ebx
		mov	[esp+58h+arg_4], edx
		not	eax
		lea	esi, [ecx-8AC817Eh]
		or	eax, edx
		mov	ecx, [esp+58h+arg_4]
		xor	eax, ebp
		lea	edi, [ebx-42C50DCBh]
		add	eax, [esp+58h+var_24]
		add	ecx, 0EB86D391h
		add	esi, eax
		mov	ebx, [esp+58h+arg_0]
		rol	esi, 6
		mov	eax, ebp
		not	eax
		add	esi, edx
		or	eax, esi
		xor	eax, edx
		add	[ebx+8], esi
		add	eax, [esp+58h+var_20]
		add	edi, eax
		mov	eax, edx
		not	eax
		rol	edi, 0Ah
		add	edi, esi
		lea	edx, [ebp+2AD7D2BBh]
		or	eax, edi
		xor	eax, esi
		add	eax, [esp+58h+var_1C]
		add	edx, eax
		mov	eax, esi
		rol	edx, 0Fh
		not	eax
		add	edx, edi
		add	[ebx+10h], edx
		or	eax, edx
		xor	eax, edi
		add	eax, [esp+58h+var_18]
		add	ecx, eax
		ror	ecx, 0Bh
		add	ecx, [ebx+0Ch]
		add	ecx, edx
		add	[ebx+14h], edi
		pop	edi
		pop	esi
		pop	ebp
		mov	[ebx+0Ch], ecx
		pop	ebx
		add	esp, 48h
		retn
sub_10003A00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10004160(void	*)
sub_10004160	proc near		; DATA XREF: .rdata:1003E4F0o
					; .rdata:1003ED80o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	128h		; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		add	esp, 0Ch
		add	edi, 100h
		mov	ecx, 8
		mov	esi, offset dword_1003E938
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10004160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10004190(void	*, int)
sub_10004190	proc near		; DATA XREF: .rdata:1003E358o
					; .rdata:1003E4ECo ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	128h		; size_t
		push	0		; int
		push	[esp+8+arg_0]	; void *
		call	memset
		add	esp, 0Ch
		cmp	[esp+arg_4], 0
		jz	short locret_100041B4
		push	[esp+arg_0]
		call	PORT_Free_Util
		pop	ecx

locret_100041B4:			; CODE XREF: sub_10004190+18j
		retn
sub_10004190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100041C0	proc near		; DATA XREF: .rdata:1003E4F8o
					; .rdata:1003ED88o

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		cmp	eax, 1Ch
		jb	short loc_100041CE
		mov	eax, 1Ch

loc_100041CE:				; CODE XREF: sub_100041C0+7j
		mov	[esp+arg_C], eax ; size_t
		jmp	sub_10006CC0
sub_100041C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100041E0	proc near		; DATA XREF: .rdata:1003ED94o

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		cmp	eax, 1Ch
		jb	short loc_100041EE
		mov	eax, 1Ch

loc_100041EE:				; CODE XREF: sub_100041E0+7j
		mov	[esp+arg_C], eax ; size_t
		jmp	sub_10006DC0
sub_100041E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10004200(int,	void *)
sub_10004200	proc near		; DATA XREF: .rdata:1003E500o

var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= byte ptr -12Ch
var_2C		= byte ptr -2Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 134h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+134h+var_4], eax
		mov	eax, [esp+134h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+13Ch+arg_4]
		mov	ebx, ebp
		push	esi
		push	edi
		mov	[esp+144h+var_134], eax
		lea	ecx, [ebx+1]
		nop

loc_10004230:				; CODE XREF: sub_10004200+35j
		mov	al, [ebx]
		inc	ebx
		test	al, al
		jnz	short loc_10004230
		push	128h		; size_t
		lea	eax, [esp+148h+var_12C]
		sub	ebx, ecx
		push	0		; int
		push	eax		; void *
		call	memset
		push	ebx		; int
		lea	eax, [esp+154h+var_12C]
		mov	ecx, 8
		mov	esi, offset dword_1003E938
		lea	edi, [esp+154h+var_2C]
		push	ebp		; void *
		rep movsd
		push	eax		; void *
		call	sub_10006FD0
		push	1Ch		; size_t
		lea	eax, [esp+160h+var_130]
		push	eax		; int
		push	[esp+164h+var_134] ; void *
		lea	eax, [esp+168h+var_12C]
		push	eax		; void *
		call	sub_10006CC0
		mov	ecx, [esp+16Ch+var_4]
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 134h
		retn
sub_10004200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100042A0(void	*, void	*, int)
sub_100042A0	proc near		; DATA XREF: .rdata:1003E4FCo

var_130		= dword	ptr -130h
var_12C		= byte ptr -12Ch
var_2C		= byte ptr -2Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		push	ebx
		mov	ebx, [esp+134h+arg_4]
		lea	eax, [esp+134h+var_12C]
		push	ebp
		mov	ebp, [esp+138h+arg_0]
		push	esi
		push	edi
		push	128h		; size_t
		push	0		; int
		push	eax		; void *
		call	memset
		push	[esp+14Ch+arg_8] ; int
		lea	eax, [esp+150h+var_12C]
		mov	ecx, 8
		mov	esi, offset dword_1003E938
		lea	edi, [esp+150h+var_2C]
		push	ebx		; void *
		rep movsd
		push	eax		; void *
		call	sub_10006FD0
		push	1Ch		; size_t
		lea	eax, [esp+15Ch+var_130]
		push	eax		; int
		lea	eax, [esp+160h+var_12C]
		push	ebp		; void *
		push	eax		; void *
		call	sub_10006CC0
		mov	ecx, [esp+168h+var_4]
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn
sub_100042A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004330	proc near		; DATA XREF: .rdata:1003E37Co
					; .rdata:1003E510o

arg_0		= dword	ptr  4

		push	128h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jz	short locret_10004352
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 4Ah
		push	edi
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi

locret_10004352:			; CODE XREF: sub_10004330+Fj
		retn
sub_10004330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_10004360(void	*, void	*, int)
sub_10004360	proc near		; DATA XREF: .rdata:1003E4F4o
					; .rdata:1003ED84o
		jmp	sub_10006FD0
sub_10004360	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10004370(void	*)
sub_10004370	proc near		; CODE XREF: sub_1000C590+65p
					; sub_1000C690+49p ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	128h		; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		add	esp, 0Ch
		add	edi, 100h
		mov	ecx, 8
		mov	esi, offset dword_1003E918
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10004370	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100043A0	proc near		; DATA XREF: .rdata:1003E440o
					; .rdata:1003E514o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, 4Ah
		push	edi
		mov	edi, [esp+8+arg_0]
		rep movsd
		pop	edi
		pop	esi
		retn
sub_100043A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100043C0	proc near		; CODE XREF: sub_10006CC0+4Dp
					; sub_10006FD0+69p ...

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 54h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edx, [esp+64h+arg_0]
		mov	eax, [edx+10h]
		bswap	eax
		mov	[edx+10h], eax
		mov	[esp+64h+var_44], eax
		mov	eax, [edx+14h]
		bswap	eax
		mov	[edx+14h], eax
		mov	[esp+64h+var_48], eax
		mov	eax, [edx+18h]
		bswap	eax
		mov	[edx+18h], eax
		mov	[esp+64h+var_18], eax
		mov	eax, [edx+1Ch]
		bswap	eax
		mov	[edx+1Ch], eax
		mov	[esp+64h+var_14], eax
		mov	eax, [edx+20h]
		bswap	eax
		mov	[edx+20h], eax
		mov	[esp+64h+var_10], eax
		mov	eax, [edx+24h]
		bswap	eax
		mov	[edx+24h], eax
		mov	ebx, [edx+4]
		mov	ebp, [edx+8]
		mov	esi, [edx+0Ch]
		mov	ecx, [edx+38h]
		mov	[esp+64h+var_2C], eax
		mov	eax, [edx+28h]
		bswap	eax
		mov	[edx+28h], eax
		mov	[esp+64h+var_28], eax
		mov	eax, [edx+2Ch]
		bswap	eax
		mov	[edx+2Ch], eax
		mov	[esp+64h+var_24], eax
		mov	eax, [edx+30h]
		bswap	eax
		mov	[edx+30h], eax
		mov	[esp+64h+var_20], eax
		mov	eax, [edx+34h]
		bswap	eax
		mov	[edx+34h], eax
		mov	[esp+64h+var_1C], eax
		mov	eax, [edx+3Ch]
		bswap	eax
		mov	[edx+3Ch], eax
		mov	edi, [edx]
		bswap	ebx
		bswap	ecx
		mov	[edx+38h], ecx
		mov	[esp+64h+var_30], eax
		mov	eax, ebx
		bswap	edi
		mov	[edx], edi
		mov	[edx+4], ebx
		bswap	ebp
		mov	[edx+8], ebp
		bswap	esi
		mov	[edx+0Ch], esi
		mov	edx, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	[esp+64h+var_34], ecx
		mov	eax, ebx
		ror	ecx, 13h
		shr	eax, 3
		xor	edx, eax
		mov	[esp+64h+var_38], edi
		mov	eax, [esp+64h+var_34]
		ror	eax, 11h
		mov	[esp+64h+var_3C], ebx
		xor	ecx, eax
		mov	[esp+64h+var_4C], ebp
		mov	[esp+64h+var_8], esi
		add	edx, [esp+64h+var_2C]
		mov	eax, [esp+64h+var_34]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	ecx, edx
		mov	edx, ebp
		add	ecx, edi
		ror	edx, 12h
		mov	[eax+40h], ecx
		mov	eax, ebp
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, [esp+64h+var_30]
		add	edx, [esp+64h+var_28]
		mov	ecx, eax
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, [esp+64h+var_30]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	ecx, edx
		mov	edx, esi
		add	ecx, ebx
		ror	edx, 12h
		mov	ebx, [eax+40h]
		mov	[eax+44h], ecx
		mov	eax, esi
		ror	eax, 7
		mov	ecx, ebx
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, esi
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebx
		add	edx, [esp+64h+var_24]
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebx
		mov	ebx, [esp+64h+var_44]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	ecx, edx
		mov	edx, ebx
		add	ecx, ebp
		ror	edx, 12h
		mov	ebp, [eax+44h]
		mov	[eax+48h], ecx
		mov	eax, ebx
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		add	edx, [esp+64h+var_20]
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		mov	ebp, [esp+64h+var_48]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	ecx, edx
		mov	edx, ebp
		add	ecx, esi
		ror	edx, 12h
		mov	esi, [eax+48h]
		mov	[eax+4Ch], ecx
		mov	eax, ebp
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebp
		mov	ecx, esi
		shr	eax, 3
		xor	edx, eax
		ror	ecx, 13h
		add	edx, [esp+64h+var_1C]
		mov	eax, esi
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, esi
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [esp+64h+var_18]
		mov	edx, ebx
		mov	[eax+50h], ecx
		mov	eax, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [esp+64h+var_34]
		mov	ecx, [eax+4Ch]
		mov	eax, [eax+4Ch]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		mov	eax, [eax+4Ch]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [esp+64h+var_14]
		mov	edx, ebp
		mov	[eax+54h], ecx
		mov	eax, ebp
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [esp+64h+var_30]
		mov	ecx, [eax+50h]
		mov	eax, [eax+50h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		mov	eax, [eax+50h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [esp+64h+var_10]
		mov	edx, ebx
		mov	[eax+58h], ecx
		mov	eax, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		mov	ecx, [eax+54h]
		mov	eax, [eax+54h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		mov	eax, [eax+54h]
		mov	esi, [esp+64h+arg_0]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, esi
		add	edx, [esi+40h]
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [esp+64h+var_2C]
		mov	[eax+5Ch], ecx
		mov	edx, ebp
		ror	edx, 12h
		mov	eax, ebp
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		add	edx, [esi+44h]
		mov	ecx, [eax+58h]
		mov	eax, [eax+58h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, esi
		mov	eax, [eax+58h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, esi
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [esp+64h+var_28]
		mov	edx, ebx
		mov	[eax+60h], ecx
		mov	eax, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		add	edx, [esi+48h]
		mov	ecx, [eax+5Ch]
		mov	eax, [eax+5Ch]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, esi
		mov	eax, [eax+5Ch]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, esi
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [esp+64h+var_24]
		mov	edx, ebp
		mov	[eax+64h], ecx
		mov	eax, ebp
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		mov	ecx, [eax+60h]
		mov	eax, [eax+60h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, esi
		mov	eax, [eax+60h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, esi
		add	edx, [eax+4Ch]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [esp+64h+var_20]
		mov	[eax+68h], ecx
		mov	edx, ebx
		mov	eax, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		mov	ecx, [eax+64h]
		mov	eax, [eax+64h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, esi
		mov	eax, [eax+64h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, esi
		mov	esi, [esp+64h+var_1C]
		add	edx, [eax+50h]
		add	ecx, edx
		mov	edx, esi
		add	ecx, ebp
		ror	edx, 12h
		mov	ebp, [eax+68h]
		mov	[eax+6Ch], ecx
		mov	eax, esi
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, esi
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+54h]
		mov	ebp, [eax+6Ch]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [esp+64h+var_34]
		mov	[eax+70h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		mov	ebp, [esp+64h+var_30]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+58h]
		add	ecx, edx
		mov	edx, ebp
		add	ecx, esi
		ror	edx, 12h
		mov	esi, [eax+70h]
		mov	[eax+74h], ecx
		mov	eax, ebp
		ror	eax, 7
		mov	ecx, esi
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, esi
		mov	edi, [esp+64h+arg_0]
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, esi
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		mov	esi, [eax+5Ch]
		add	edx, esi
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+40h]
		mov	[eax+78h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		mov	ecx, [eax+74h]
		mov	eax, [eax+74h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		mov	eax, [eax+74h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+60h]
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+44h]
		mov	[eax+7Ch], ecx
		mov	edx, ebp
		ror	edx, 12h
		mov	eax, ebp
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		mov	ecx, [eax+78h]
		mov	eax, [eax+78h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		mov	eax, [eax+78h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+64h]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+48h]
		mov	[eax+80h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		mov	ecx, [eax+7Ch]
		mov	eax, [eax+7Ch]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		mov	eax, [eax+7Ch]
		shr	eax, 0Ah
		xor	ecx, eax
		add	edx, [edi+68h]
		add	ecx, edx
		mov	eax, edi
		add	ecx, ebp
		mov	ebp, [eax+4Ch]
		mov	edx, ebp
		mov	[eax+84h], ecx
		mov	eax, ebp
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		add	edx, [edi+6Ch]
		mov	ecx, [eax+80h]
		mov	eax, [eax+80h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+80h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+50h]
		mov	edx, ebx
		mov	[eax+88h], ecx
		mov	eax, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		add	edx, [edi+70h]
		mov	ecx, [eax+84h]
		mov	eax, [eax+84h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+84h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+54h]
		mov	edx, ebp
		mov	[eax+8Ch], ecx
		mov	eax, ebp
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+88h]
		mov	eax, [eax+88h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+88h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+74h]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+58h]
		mov	[eax+90h], ecx
		mov	edx, ebx
		mov	eax, ebx
		ror	edx, 12h
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+8Ch]
		mov	eax, [eax+8Ch]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+8Ch]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+78h]
		add	ecx, edx
		mov	edx, esi
		add	ecx, ebp
		ror	edx, 12h
		mov	ebp, [eax+90h]
		mov	[eax+94h], ecx
		mov	eax, esi
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, esi
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+7Ch]
		mov	ebp, [eax+94h]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+60h]
		mov	[eax+98h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+80h]
		mov	ebp, [eax+64h]
		add	ecx, edx
		add	ecx, esi
		mov	edx, ebp
		mov	esi, [eax+98h]
		mov	[eax+9Ch], ecx
		mov	eax, ebp
		ror	eax, 7
		mov	ecx, esi
		ror	edx, 12h
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, esi
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		mov	esi, [eax+84h]
		add	edx, esi
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+68h]
		mov	[eax+0A0h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+9Ch]
		mov	eax, [eax+9Ch]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+9Ch]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+88h]
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+6Ch]
		mov	[eax+0A4h], ecx
		mov	edx, ebp
		ror	edx, 12h
		mov	eax, ebp
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+0A0h]
		mov	eax, [eax+0A0h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0A0h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+8Ch]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+70h]
		mov	[eax+0A8h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		add	edx, [edi+90h]
		mov	ecx, [eax+0A4h]
		mov	eax, [eax+0A4h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0A4h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+74h]
		mov	edx, ebp
		mov	[eax+0ACh], ecx
		ror	edx, 12h
		mov	eax, ebp
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		add	edx, [edi+94h]
		mov	ecx, [eax+0A8h]
		mov	eax, [eax+0A8h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0A8h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+78h]
		mov	edx, ebx
		mov	[eax+0B0h], ecx
		mov	eax, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		add	edx, [edi+98h]
		mov	ecx, [eax+0ACh]
		mov	eax, [eax+0ACh]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0ACh]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+7Ch]
		mov	edx, ebp
		mov	[eax+0B4h], ecx
		mov	eax, ebp
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+0B0h]
		mov	eax, [eax+0B0h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0B0h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+9Ch]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+80h]
		mov	[eax+0B8h], ecx
		mov	edx, ebx
		mov	eax, ebx
		ror	edx, 12h
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+0B4h]
		mov	eax, [eax+0B4h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0B4h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0A0h]
		add	ecx, edx
		mov	edx, esi
		add	ecx, ebp
		ror	edx, 12h
		mov	ebp, [eax+0B8h]
		mov	[eax+0BCh], ecx
		mov	eax, esi
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, esi
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0A4h]
		mov	ebp, [eax+0BCh]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+88h]
		mov	[eax+0C0h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0A8h]
		mov	ebp, [eax+8Ch]
		add	ecx, edx
		add	ecx, esi
		mov	edx, ebp
		mov	esi, [eax+0C0h]
		mov	[eax+0C4h], ecx
		mov	eax, ebp
		ror	eax, 7
		mov	ecx, esi
		ror	edx, 12h
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, esi
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		mov	esi, [eax+0ACh]
		add	edx, esi
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+90h]
		mov	edx, ebx
		mov	[eax+0C8h], ecx
		mov	eax, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+0C4h]
		mov	eax, [eax+0C4h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0C4h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0B0h]
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+94h]
		mov	[eax+0CCh], ecx
		mov	edx, ebp
		ror	edx, 12h
		mov	eax, ebp
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+0C8h]
		mov	eax, [eax+0C8h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0C8h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0B4h]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+98h]
		mov	[eax+0D0h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		add	edx, [edi+0B8h]
		mov	ecx, [eax+0CCh]
		mov	eax, [eax+0CCh]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0CCh]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+9Ch]
		mov	edx, ebp
		mov	[eax+0D4h], ecx
		mov	eax, ebp
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		add	edx, [edi+0BCh]
		mov	ecx, [eax+0D0h]
		mov	eax, [eax+0D0h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0D0h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+0A0h]
		mov	edx, ebx
		mov	[eax+0D8h], ecx
		mov	eax, ebx
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		add	edx, [edi+0C0h]
		mov	ecx, [eax+0D4h]
		mov	eax, [eax+0D4h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0D4h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+0A4h]
		mov	edx, ebp
		mov	[eax+0DCh], ecx
		mov	eax, ebp
		ror	eax, 7
		ror	edx, 12h
		xor	edx, eax
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+0D8h]
		mov	eax, [eax+0D8h]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0D8h]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0C4h]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+0A8h]
		mov	[eax+0E0h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		xor	edx, eax
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, edi
		mov	ecx, [eax+0DCh]
		mov	eax, [eax+0DCh]
		ror	eax, 11h
		ror	ecx, 13h
		xor	ecx, eax
		mov	eax, edi
		mov	eax, [eax+0DCh]
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0C8h]
		add	ecx, edx
		mov	edx, esi
		add	ecx, ebp
		ror	edx, 12h
		mov	ebp, [eax+0E0h]
		mov	[eax+0E4h], ecx
		mov	eax, esi
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, esi
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0CCh]
		mov	ebp, [eax+0E4h]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+0B0h]
		mov	[eax+0E8h], ecx
		mov	edx, ebx
		ror	edx, 12h
		mov	eax, ebx
		ror	eax, 7
		mov	ecx, ebp
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebp
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0D0h]
		mov	ebp, [eax+0B4h]
		add	ecx, edx
		add	ecx, esi
		mov	edx, ebp
		mov	esi, [eax+0E8h]
		mov	[eax+0ECh], ecx
		mov	eax, ebp
		ror	eax, 7
		mov	ecx, esi
		ror	edx, 12h
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, esi
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0D4h]
		mov	esi, [eax+0ECh]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+0B8h]
		mov	[eax+0F0h], ecx
		mov	edx, ebx
		mov	eax, ebx
		ror	edx, 12h
		ror	eax, 7
		xor	edx, eax
		mov	ecx, esi
		ror	ecx, 13h
		mov	eax, ebx
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, esi
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0D8h]
		mov	esi, [eax+0F0h]
		add	ecx, edx
		add	ecx, ebp
		mov	ebp, [eax+0BCh]
		mov	[eax+0F4h], ecx
		mov	edx, ebp
		ror	edx, 12h
		mov	eax, ebp
		ror	eax, 7
		mov	ecx, esi
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebp
		shr	eax, 3
		xor	edx, eax
		mov	eax, esi
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, esi
		shr	eax, 0Ah
		xor	ecx, eax
		mov	eax, edi
		add	edx, [eax+0DCh]
		add	ecx, edx
		add	ecx, ebx
		mov	ebx, [eax+0F4h]
		mov	[eax+0F8h], ecx
		mov	ecx, [eax+0C0h]
		mov	edx, ecx
		mov	eax, ecx
		ror	edx, 12h
		ror	eax, 7
		xor	edx, eax
		mov	eax, ecx
		shr	eax, 3
		mov	ecx, ebx
		xor	edx, eax
		ror	ecx, 13h
		mov	eax, ebx
		ror	eax, 11h
		xor	ecx, eax
		mov	eax, ebx
		shr	eax, 0Ah
		mov	ebx, edi
		xor	eax, ecx
		add	edx, [ebx+0E0h]
		mov	ecx, [ebx+110h]
		add	eax, edx
		add	eax, ebp
		mov	edx, ecx
		mov	ebp, [ebx+108h]
		mov	[ebx+0FCh], eax
		mov	[esp+64h+var_4], eax
		mov	eax, [ebx+100h]
		mov	[esp+64h+var_54], eax
		mov	eax, [ebx+104h]
		mov	esi, eax
		mov	ebx, [ebx+11Ch]
		mov	[esp+64h+var_C], eax
		mov	eax, ecx
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 6
		not	ecx
		xor	edx, eax
		and	ecx, [edi+118h]
		add	edx, ebx
		mov	eax, [edi+114h]
		and	eax, [edi+110h]
		xor	ecx, eax
		mov	eax, edi
		add	ecx, edx
		mov	edi, esi
		mov	edx, [esp+64h+var_38]
		add	edx, 428A2F98h
		mov	ebx, [eax+10Ch]
		add	edx, ecx
		mov	eax, [esp+64h+var_54]
		add	ebx, edx
		xor	edi, eax
		and	esi, eax
		mov	ecx, eax
		mov	[esp+64h+var_40], edi
		ror	eax, 0Dh
		and	edi, ebp
		ror	ecx, 16h
		xor	edi, esi
		xor	ecx, eax
		add	edi, edx
		mov	eax, [esp+64h+var_54]
		mov	edx, ebx
		ror	eax, 2
		xor	ecx, eax
		ror	edx, 19h
		add	edi, ecx
		mov	eax, ebx
		ror	eax, 0Bh
		mov	ecx, ebx
		xor	edx, eax
		mov	[esp+64h+var_38], edi
		mov	edi, [esp+64h+arg_0]
		not	ecx
		mov	eax, ebx
		ror	eax, 6
		xor	edx, eax
		and	ecx, [edi+114h]
		add	edx, [esp+64h+var_3C]
		mov	eax, [edi+110h]
		and	eax, ebx
		xor	ecx, eax
		mov	eax, [esp+64h+var_38]
		add	ecx, edx
		mov	edx, edi
		mov	edx, [edx+118h]
		add	edx, 71374491h
		add	edx, ecx
		mov	ecx, eax
		ror	eax, 0Dh
		add	ebp, edx
		ror	ecx, 16h
		xor	ecx, eax
		mov	eax, [esp+64h+var_38]
		ror	eax, 2
		xor	ecx, eax
		mov	eax, [esp+64h+var_40]
		and	eax, [esp+64h+var_38]
		xor	eax, esi
		mov	esi, edi
		add	eax, edx
		mov	edx, ebp
		add	eax, ecx
		ror	edx, 19h
		mov	[esp+64h+var_50], eax
		mov	ecx, ebp
		mov	eax, ebp
		not	ecx
		and	ecx, [esi+110h]
		ror	eax, 0Bh
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, ebp
		xor	ecx, eax
		add	edx, [esp+64h+var_4C]
		mov	esi, [esi+114h]
		add	ecx, edx
		add	esi, 0B5C0FBCFh
		mov	edi, [esp+64h+var_C]
		add	esi, ecx
		mov	ecx, [esp+64h+var_50]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	edi, esi
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ecx
		xor	ecx, [esp+64h+var_54]
		and	ecx, [esp+64h+var_38]
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, [esp+64h+var_54]
		xor	eax, ecx
		add	eax, esi
		mov	esi, edi
		add	eax, edx
		not	esi
		mov	[esp+64h+var_3C], eax
		mov	edx, edi
		ror	edx, 19h
		mov	eax, edi
		ror	eax, 0Bh
		and	esi, ebx
		xor	edx, eax
		mov	ecx, [esp+64h+var_3C]
		mov	eax, edi
		add	ebx, 3956C25Bh
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebp
		add	edx, [esp+64h+var_8]
		and	eax, edi
		xor	esi, eax
		add	esi, edx
		mov	edx, [esp+64h+arg_0]
		mov	eax, [edx+110h]
		mov	edx, ecx
		add	eax, 0E9B5DBA5h
		ror	edx, 16h
		add	esi, eax
		mov	eax, ecx
		add	[esp+64h+var_54], esi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		mov	ecx, eax
		and	eax, [esp+64h+var_3C]
		xor	ecx, [esp+64h+var_3C]
		and	ecx, [esp+64h+var_38]
		xor	eax, ecx
		add	eax, esi
		mov	esi, [esp+64h+var_54]
		add	eax, edx
		mov	ecx, esi
		mov	[esp+64h+var_40], eax
		mov	edx, esi
		mov	eax, esi
		ror	edx, 19h
		ror	eax, 0Bh
		not	ecx
		xor	edx, eax
		and	ecx, ebp
		mov	eax, esi
		and	esi, edi
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		add	edx, [esp+64h+var_44]
		add	esi, edx
		add	esi, ebx
		mov	ebx, [esp+64h+var_38]
		mov	ecx, [esp+64h+var_40]
		add	ebx, esi
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_3C]
		mov	ecx, eax
		and	eax, [esp+64h+var_40]
		xor	ecx, [esp+64h+var_40]
		and	ecx, [esp+64h+var_50]
		xor	eax, ecx
		mov	ecx, ebx
		add	eax, esi
		not	ecx
		add	eax, edx
		lea	esi, [ebp+59F111F1h]
		mov	[esp+64h+var_4C], eax
		mov	edx, ebx
		mov	ebp, [esp+64h+var_4C]
		mov	eax, ebx
		ror	eax, 0Bh
		and	ecx, edi
		ror	edx, 19h
		add	edi, 923F82A4h
		xor	edx, eax
		mov	eax, ebx
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, [esp+64h+var_54]
		add	edx, [esp+64h+var_48]
		xor	ecx, eax
		add	ecx, edx
		mov	eax, ebp
		ror	eax, 0Dh
		add	esi, ecx
		add	[esp+64h+var_50], esi
		mov	edx, ebp
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_40]
		mov	ecx, eax
		and	eax, [esp+64h+var_4C]
		xor	ecx, ebp
		mov	ebp, [esp+64h+var_3C]
		and	ecx, ebp
		xor	eax, ecx
		add	eax, esi
		mov	esi, [esp+64h+var_50]
		add	eax, edx
		mov	ecx, esi
		mov	[esp+64h+var_48], eax
		mov	edx, esi
		mov	eax, esi
		ror	edx, 19h
		ror	eax, 0Bh
		not	ecx
		and	ecx, [esp+64h+var_54]
		xor	edx, eax
		mov	eax, esi
		and	esi, ebx
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		add	edx, [esp+64h+var_18]
		add	esi, edx
		add	esi, edi
		mov	edi, [esp+64h+var_48]
		mov	edx, edi
		mov	eax, edi
		add	ebp, esi
		ror	edx, 16h
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		mov	ecx, eax
		and	eax, [esp+64h+var_48]
		xor	ecx, edi
		mov	edi, [esp+64h+var_40]
		and	ecx, edi
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_44], eax
		mov	edx, ebp
		mov	ecx, [esp+64h+var_44]
		mov	eax, ebp
		ror	eax, 0Bh
		and	esi, ebx
		ror	edx, 19h
		add	ebx, 0D807AA98h
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		add	edx, [esp+64h+var_14]
		and	eax, ebp
		xor	esi, eax
		mov	eax, [esp+64h+var_54]
		add	eax, 0AB1C5ED5h
		add	esi, edx
		add	esi, eax
		mov	edx, ecx
		mov	eax, ecx
		ror	edx, 16h
		ror	eax, 0Dh
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_40], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		mov	ecx, eax
		and	eax, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_44]
		and	ecx, [esp+64h+var_4C]
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		and	ecx, [esp+64h+var_50]
		add	eax, edx
		mov	esi, [esp+64h+var_44]
		mov	edx, edi
		mov	[esp+64h+var_54], eax
		mov	eax, edi
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebp
		add	edx, [esp+64h+var_10]
		and	eax, edi
		mov	edi, [esp+64h+var_44]
		xor	ecx, eax
		add	edx, ecx
		add	edx, ebx
		mov	ebx, [esp+64h+var_54]
		add	[esp+64h+var_4C], edx
		mov	ecx, ebx
		mov	eax, ebx
		ror	ecx, 16h
		xor	edi, ebx
		and	esi, ebx
		ror	eax, 0Dh
		xor	ecx, eax
		mov	eax, ebx
		ror	eax, 2
		mov	ebx, edi
		xor	ecx, eax
		and	ebx, [esp+64h+var_48]
		xor	ebx, esi
		add	ebx, edx
		add	ebx, ecx
		mov	ecx, [esp+64h+var_4C]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Bh
		and	edi, ebx
		ror	edx, 19h
		xor	edi, esi
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 6
		not	ecx
		xor	edx, eax
		and	ecx, ebp
		add	edx, [esp+64h+var_2C]
		mov	eax, [esp+64h+var_40]
		and	eax, [esp+64h+var_4C]
		xor	ecx, eax
		mov	eax, [esp+64h+var_50]
		add	edx, ecx
		add	eax, 12835B01h
		add	edx, eax
		mov	ecx, ebx
		add	[esp+64h+var_48], edx
		mov	eax, ebx
		mov	esi, [esp+64h+var_48]
		ror	eax, 0Dh
		ror	ecx, 16h
		xor	ecx, eax
		mov	eax, ebx
		ror	eax, 2
		xor	ecx, eax
		lea	eax, [edx+edi]
		mov	edi, [esp+64h+var_40]
		add	eax, ecx
		mov	[esp+64h+var_50], eax
		mov	edx, esi
		ror	edx, 19h
		mov	eax, esi
		ror	eax, 0Bh
		mov	ecx, esi
		xor	edx, eax
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	esi, [esp+64h+var_4C]
		ror	eax, 6
		xor	esi, ecx
		mov	ecx, [esp+64h+var_50]
		xor	edx, eax
		add	edx, [esp+64h+var_28]
		add	esi, 243185BEh
		add	esi, edx
		mov	eax, ecx
		ror	eax, 0Dh
		mov	edx, ecx
		ror	edx, 16h
		add	esi, ebp
		mov	ebp, [esp+64h+var_44]
		xor	edx, eax
		mov	eax, ecx
		add	ebp, esi
		xor	ecx, [esp+64h+var_54]
		ror	eax, 2
		and	ecx, ebx
		xor	edx, eax
		mov	[esp+64h+var_44], ebp
		mov	eax, [esp+64h+var_50]
		and	eax, [esp+64h+var_54]
		xor	eax, ecx
		add	eax, esi
		add	eax, edx
		mov	[esp+64h+var_40], eax
		mov	ecx, [esp+64h+var_40]
		mov	edx, ebp
		ror	edx, 19h
		mov	eax, ebp
		ror	eax, 0Bh
		mov	esi, ebp
		xor	edx, eax
		not	esi
		mov	eax, ebp
		add	edi, 550C7DC3h
		mov	ebp, [esp+64h+var_4C]
		and	esi, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		and	eax, [esp+64h+var_44]
		add	edx, [esp+64h+var_24]
		xor	esi, eax
		add	esi, edx
		mov	eax, ecx
		ror	eax, 0Dh
		mov	edx, ecx
		ror	edx, 16h
		add	esi, edi
		xor	edx, eax
		mov	edi, [esp+64h+var_54]
		mov	eax, ecx
		add	edi, esi
		ror	eax, 2
		xor	edx, eax
		mov	[esp+64h+var_54], edi
		mov	eax, [esp+64h+var_50]
		mov	ecx, eax
		and	eax, [esp+64h+var_40]
		xor	ecx, [esp+64h+var_40]
		and	ecx, ebx
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		add	eax, edx
		lea	esi, [ebp+72BE5D74h]
		mov	[esp+64h+var_3C], eax
		mov	edx, edi
		mov	ebp, [esp+64h+var_3C]
		mov	eax, edi
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, edi
		mov	edi, [esp+64h+var_48]
		and	ecx, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_44]
		and	eax, [esp+64h+var_54]
		add	edx, [esp+64h+var_20]
		xor	ecx, eax
		add	ecx, edx
		mov	eax, ebp
		ror	eax, 0Dh
		mov	edx, ebp
		ror	edx, 16h
		add	esi, ecx
		xor	edx, eax
		add	ebx, esi
		mov	eax, ebp
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_40]
		mov	ecx, eax
		and	eax, ebp
		xor	ecx, ebp
		and	ecx, [esp+64h+var_50]
		xor	eax, ecx
		add	eax, esi
		add	eax, edx
		mov	edx, ebx
		mov	[esp+64h+var_48], eax
		mov	eax, ebx
		ror	edx, 19h
		ror	eax, 0Bh
		mov	esi, ebx
		xor	edx, eax
		mov	ebp, [esp+64h+var_44]
		not	esi
		mov	eax, ebx
		ror	eax, 6
		and	esi, ebp
		xor	edx, eax
		add	edi, 80DEB1FEh
		add	edx, [esp+64h+var_1C]
		mov	eax, ebx
		and	eax, [esp+64h+var_54]
		xor	esi, eax
		add	esi, edx
		add	esi, edi
		mov	edi, [esp+64h+var_48]
		add	[esp+64h+var_50], esi
		mov	edx, edi
		ror	edx, 16h
		mov	eax, edi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_3C]
		mov	ecx, eax
		and	eax, edi
		xor	ecx, edi
		mov	edi, [esp+64h+var_54]
		and	ecx, [esp+64h+var_40]
		xor	eax, ecx
		add	eax, esi
		mov	esi, [esp+64h+var_50]
		add	eax, edx
		mov	ecx, esi
		mov	[esp+64h+var_4C], eax
		mov	edx, esi
		ror	edx, 19h
		mov	eax, esi
		ror	eax, 0Bh
		not	ecx
		xor	edx, eax
		and	ecx, edi
		mov	eax, esi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		add	edx, [esp+64h+var_34]
		and	eax, esi
		xor	ecx, eax
		lea	esi, [ebp-6423F959h]
		add	ecx, edx
		mov	ebp, [esp+64h+var_40]
		add	esi, ecx
		mov	ecx, [esp+64h+var_4C]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	ebp, esi
		ror	edx, 16h
		xor	edx, eax
		mov	[esp+64h+var_40], ebp
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		mov	ecx, eax
		and	eax, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_4C]
		and	ecx, [esp+64h+var_3C]
		xor	eax, ecx
		add	eax, esi
		add	eax, edx
		mov	edx, ebp
		mov	[esp+64h+var_44], eax
		mov	eax, ebp
		ror	edx, 19h
		ror	eax, 0Bh
		xor	edx, eax
		mov	ecx, [esp+64h+var_44]
		mov	eax, ebp
		ror	eax, 6
		mov	esi, ebp
		xor	edx, eax
		not	esi
		add	edx, [esp+64h+var_30]
		and	esi, ebx
		mov	eax, [esp+64h+var_50]
		add	edi, 0C19BF174h
		and	eax, ebp
		add	ebx, 0E49B69C1h
		xor	esi, eax
		mov	eax, ecx
		ror	eax, 0Dh
		add	esi, edx
		mov	edx, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_3C]
		ror	edx, 16h
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_3C], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		mov	ecx, eax
		and	eax, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_44]
		and	ecx, [esp+64h+var_48]
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		add	eax, edx
		and	ecx, [esp+64h+var_50]
		mov	esi, [esp+64h+arg_0]
		mov	edx, edi
		mov	[esp+64h+var_54], eax
		mov	eax, edi
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebp
		add	edx, [esi+40h]
		and	eax, edi
		mov	edi, [esp+64h+var_44]
		xor	ecx, eax
		mov	esi, [esp+64h+var_44]
		add	edx, ecx
		add	edx, ebx
		mov	ebx, [esp+64h+var_54]
		add	[esp+64h+var_48], edx
		mov	ecx, ebx
		mov	eax, ebx
		ror	ecx, 16h
		ror	eax, 0Dh
		xor	edi, ebx
		xor	ecx, eax
		and	esi, ebx
		mov	eax, ebx
		mov	ebx, edi
		and	ebx, [esp+64h+var_4C]
		ror	eax, 2
		xor	ebx, esi
		xor	ecx, eax
		add	ebx, edx
		add	ebx, ecx
		mov	ecx, [esp+64h+var_48]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_3C]
		not	ecx
		and	eax, [esp+64h+var_48]
		and	ecx, ebp
		xor	ecx, eax
		mov	ebp, [esp+64h+arg_0]
		mov	eax, [esp+64h+var_50]
		and	edi, ebx
		add	eax, 0EFBE4786h
		xor	edi, esi
		add	edx, [ebp+44h]
		add	edx, ecx
		mov	ecx, ebx
		add	edx, eax
		ror	ecx, 16h
		add	[esp+64h+var_4C], edx
		mov	eax, ebx
		ror	eax, 0Dh
		xor	ecx, eax
		mov	esi, [esp+64h+var_4C]
		mov	eax, ebx
		ror	eax, 2
		xor	ecx, eax
		lea	eax, [edx+edi]
		add	eax, ecx
		mov	edi, [esp+64h+var_3C]
		mov	[esp+64h+var_50], eax
		mov	edx, esi
		ror	edx, 19h
		mov	eax, esi
		ror	eax, 0Bh
		mov	ecx, esi
		xor	edx, eax
		not	ecx
		mov	eax, esi
		and	ecx, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		and	eax, esi
		mov	esi, ebp
		xor	ecx, eax
		mov	ebp, [esp+64h+var_44]
		add	edx, [esi+48h]
		mov	esi, [esp+64h+var_40]
		add	ecx, edx
		add	esi, 0FC19DC6h
		add	esi, ecx
		mov	ecx, [esp+64h+var_50]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	ebp, esi
		ror	edx, 16h
		xor	edx, eax
		mov	[esp+64h+var_44], ebp
		mov	eax, ecx
		xor	ecx, [esp+64h+var_54]
		ror	eax, 2
		and	ecx, ebx
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, [esp+64h+var_54]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_38], eax
		mov	edx, ebp
		mov	eax, ebp
		ror	edx, 19h
		ror	eax, 0Bh
		xor	edx, eax
		mov	eax, ebp
		mov	ebp, [esp+64h+var_48]
		and	esi, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		and	eax, [esp+64h+var_44]
		xor	esi, eax
		mov	ecx, [esp+64h+var_38]
		mov	eax, [esp+64h+arg_0]
		add	edi, 240CA1CCh
		add	edx, [eax+4Ch]
		mov	eax, ecx
		ror	eax, 0Dh
		add	esi, edx
		mov	edx, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_54]
		ror	edx, 16h
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_54], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		mov	ecx, eax
		and	eax, [esp+64h+var_38]
		xor	ecx, [esp+64h+var_38]
		and	ecx, ebx
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		add	eax, edx
		lea	esi, [ebp+2DE92C6Fh]
		mov	[esp+64h+var_3C], eax
		mov	edx, edi
		mov	ebp, [esp+64h+var_3C]
		mov	eax, edi
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, edi
		mov	edi, [esp+64h+var_4C]
		and	ecx, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_44]
		and	eax, [esp+64h+var_54]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+50h]
		mov	eax, ebp
		add	ecx, edx
		ror	eax, 0Dh
		mov	edx, ebp
		add	esi, ecx
		ror	edx, 16h
		add	ebx, esi
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_38]
		mov	ecx, eax
		and	eax, ebp
		xor	ecx, ebp
		mov	ebp, [esp+64h+var_44]
		and	ecx, [esp+64h+var_50]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebx
		add	eax, edx
		not	esi
		mov	[esp+64h+var_48], eax
		mov	edx, ebx
		ror	edx, 19h
		mov	eax, ebx
		ror	eax, 0Bh
		and	esi, ebp
		xor	edx, eax
		mov	eax, ebx
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, [esp+64h+var_54]
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edi, 4A7484AAh
		add	edx, [eax+54h]
		add	esi, edx
		add	esi, edi
		mov	edi, [esp+64h+var_48]
		add	[esp+64h+var_50], esi
		mov	edx, edi
		ror	edx, 16h
		mov	eax, edi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_3C]
		mov	ecx, eax
		and	eax, edi
		xor	ecx, edi
		mov	edi, [esp+64h+var_54]
		and	ecx, [esp+64h+var_38]
		xor	eax, ecx
		add	eax, esi
		mov	esi, [esp+64h+var_50]
		add	eax, edx
		mov	ecx, esi
		mov	[esp+64h+var_4C], eax
		mov	edx, esi
		ror	edx, 19h
		mov	eax, esi
		ror	eax, 0Bh
		not	ecx
		xor	edx, eax
		and	ecx, edi
		mov	eax, esi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, esi
		lea	esi, [ebp+5CB0A9DCh]
		xor	ecx, eax
		mov	ebp, [esp+64h+var_38]
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+58h]
		add	ecx, edx
		add	esi, ecx
		mov	ecx, [esp+64h+var_4C]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	ebp, esi
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		mov	ecx, eax
		and	eax, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_4C]
		and	ecx, [esp+64h+var_3C]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_44], eax
		mov	edx, ebp
		ror	edx, 19h
		mov	eax, ebp
		ror	eax, 0Bh
		and	esi, ebx
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, ebp
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+5Ch]
		mov	ecx, [esp+64h+var_44]
		add	esi, edx
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	edi, 76F988DAh
		ror	edx, 16h
		add	esi, edi
		xor	edx, eax
		mov	edi, [esp+64h+var_3C]
		mov	eax, ecx
		add	edi, esi
		ror	eax, 2
		add	ebx, 983E5152h
		xor	edx, eax
		mov	[esp+64h+var_3C], edi
		mov	eax, [esp+64h+var_4C]
		mov	ecx, eax
		and	eax, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_44]
		and	ecx, [esp+64h+var_48]
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		add	eax, edx
		and	ecx, [esp+64h+var_50]
		mov	[esp+64h+var_40], eax
		mov	edx, edi
		ror	edx, 19h
		mov	eax, edi
		ror	eax, 0Bh
		xor	edx, eax
		mov	esi, [esp+64h+var_44]
		mov	eax, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebp
		and	eax, edi
		mov	edi, [esp+64h+var_44]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+60h]
		add	edx, ecx
		add	edx, ebx
		mov	ebx, [esp+64h+var_40]
		add	[esp+64h+var_48], edx
		mov	ecx, ebx
		mov	eax, ebx
		ror	ecx, 16h
		ror	eax, 0Dh
		xor	edi, ebx
		xor	ecx, eax
		and	esi, ebx
		mov	eax, ebx
		mov	ebx, edi
		and	ebx, [esp+64h+var_4C]
		ror	eax, 2
		xor	ebx, esi
		xor	ecx, eax
		add	ebx, edx
		add	ebx, ecx
		mov	ecx, [esp+64h+var_48]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 6
		not	ecx
		xor	edx, eax
		and	ecx, ebp
		mov	eax, [esp+64h+var_3C]
		and	eax, [esp+64h+var_48]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+64h]
		mov	eax, [esp+64h+var_50]
		add	edx, ecx
		add	eax, 0A831C66Dh
		add	edx, eax
		and	edi, ebx
		add	[esp+64h+var_4C], edx
		xor	edi, esi
		mov	esi, [esp+64h+var_4C]
		mov	ecx, ebx
		ror	ecx, 16h
		mov	eax, ebx
		ror	eax, 0Dh
		xor	ecx, eax
		mov	eax, ebx
		ror	eax, 2
		xor	ecx, eax
		lea	eax, [edx+edi]
		add	eax, ecx
		mov	edi, [esp+64h+var_3C]
		mov	[esp+64h+var_50], eax
		mov	edx, esi
		mov	eax, esi
		ror	edx, 19h
		ror	eax, 0Bh
		mov	ecx, esi
		xor	edx, eax
		not	ecx
		mov	eax, esi
		and	ecx, edi
		ror	eax, 6
		add	edi, 0BF597FC7h
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		and	eax, esi
		mov	esi, [esp+64h+arg_0]
		xor	ecx, eax
		add	ecx, 0B00327C8h
		mov	esi, [esi+68h]
		add	esi, edx
		add	esi, ecx
		mov	ecx, [esp+64h+var_50]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	esi, ebp
		mov	ebp, [esp+64h+var_44]
		ror	edx, 16h
		add	ebp, esi
		xor	edx, eax
		mov	[esp+64h+var_44], ebp
		mov	eax, ecx
		xor	ecx, [esp+64h+var_40]
		ror	eax, 2
		and	ecx, ebx
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, [esp+64h+var_40]
		xor	eax, ecx
		mov	ecx, ebp
		add	eax, esi
		not	ecx
		mov	esi, [esp+64h+arg_0]
		add	eax, edx
		mov	[esp+64h+var_38], eax
		mov	edx, ebp
		mov	eax, ebp
		ror	edx, 19h
		ror	eax, 0Bh
		mov	esi, [esi+6Ch]
		xor	edx, eax
		mov	eax, ebp
		mov	ebp, [esp+64h+var_48]
		ror	eax, 6
		and	ecx, ebp
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		and	eax, [esp+64h+var_44]
		add	esi, edx
		xor	ecx, eax
		add	esi, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_40]
		add	edi, esi
		mov	[esp+64h+var_40], edi
		mov	ecx, [esp+64h+var_38]
		mov	edx, ecx
		ror	edx, 16h
		mov	eax, ecx
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		mov	ecx, eax
		and	eax, [esp+64h+var_38]
		xor	ecx, [esp+64h+var_38]
		and	ecx, ebx
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		add	eax, edx
		mov	esi, [esp+64h+arg_0]
		mov	[esp+64h+var_3C], eax
		mov	edx, edi
		ror	edx, 19h
		mov	eax, edi
		ror	eax, 0Bh
		xor	edx, eax
		mov	eax, edi
		mov	edi, [esp+64h+var_4C]
		and	ecx, edi
		ror	eax, 6
		add	edi, 0D5A79147h
		xor	edx, eax
		mov	eax, [esp+64h+var_44]
		and	eax, [esp+64h+var_40]
		add	edx, [esi+70h]
		xor	ecx, eax
		add	ecx, edx
		lea	esi, [ebp-391FF40Dh]
		mov	ebp, [esp+64h+var_3C]
		add	esi, ecx
		mov	edx, ebp
		mov	eax, ebp
		ror	eax, 0Dh
		add	ebx, esi
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_38]
		mov	ecx, eax
		and	eax, ebp
		xor	ecx, ebp
		mov	ebp, [esp+64h+var_44]
		and	ecx, [esp+64h+var_50]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebx
		add	eax, edx
		not	esi
		mov	[esp+64h+var_48], eax
		mov	edx, ebx
		ror	edx, 19h
		mov	eax, ebx
		ror	eax, 0Bh
		and	esi, ebp
		xor	edx, eax
		mov	eax, ebx
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, [esp+64h+var_40]
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+74h]
		add	esi, edx
		add	esi, edi
		mov	edi, [esp+64h+var_48]
		add	[esp+64h+var_50], esi
		mov	edx, edi
		ror	edx, 16h
		mov	eax, edi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_3C]
		mov	ecx, eax
		and	eax, edi
		xor	ecx, edi
		mov	edi, [esp+64h+var_40]
		and	ecx, [esp+64h+var_38]
		xor	eax, ecx
		add	eax, esi
		mov	esi, [esp+64h+var_50]
		add	eax, edx
		mov	ecx, esi
		mov	[esp+64h+var_4C], eax
		mov	edx, esi
		ror	edx, 19h
		mov	eax, esi
		ror	eax, 0Bh
		not	ecx
		xor	edx, eax
		and	ecx, edi
		mov	eax, esi
		add	edi, 14292967h
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, esi
		lea	esi, [ebp+6CA6351h]
		xor	ecx, eax
		mov	ebp, [esp+64h+var_38]
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+78h]
		add	ecx, edx
		add	esi, ecx
		mov	ecx, [esp+64h+var_4C]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	ebp, esi
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		mov	ecx, eax
		and	eax, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_4C]
		and	ecx, [esp+64h+var_3C]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_44], eax
		mov	edx, ebp
		mov	ecx, [esp+64h+var_44]
		mov	eax, ebp
		ror	eax, 0Bh
		and	esi, ebx
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, ebp
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+7Ch]
		add	esi, edx
		mov	edx, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_3C]
		add	edi, esi
		ror	edx, 16h
		mov	[esp+64h+var_3C], edi
		mov	eax, ecx
		add	ebx, 27B70A85h
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		mov	ecx, eax
		and	eax, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_44]
		and	ecx, [esp+64h+var_48]
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		add	eax, edx
		and	ecx, [esp+64h+var_50]
		mov	[esp+64h+var_40], eax
		mov	edx, edi
		ror	edx, 19h
		mov	eax, edi
		ror	eax, 0Bh
		xor	edx, eax
		mov	esi, [esp+64h+var_44]
		mov	eax, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebp
		and	eax, edi
		mov	edi, [esp+64h+var_44]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+80h]
		add	edx, ecx
		add	edx, ebx
		mov	ebx, [esp+64h+var_40]
		add	[esp+64h+var_48], edx
		mov	ecx, ebx
		ror	ecx, 16h
		mov	eax, ebx
		ror	eax, 0Dh
		xor	edi, ebx
		xor	ecx, eax
		and	esi, ebx
		mov	eax, ebx
		mov	ebx, edi
		and	ebx, [esp+64h+var_4C]
		ror	eax, 2
		xor	ebx, esi
		xor	ecx, eax
		add	ebx, edx
		add	ebx, ecx
		mov	ecx, [esp+64h+var_48]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 6
		not	ecx
		xor	edx, eax
		and	ecx, ebp
		mov	eax, [esp+64h+var_3C]
		and	eax, [esp+64h+var_48]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+84h]
		mov	eax, [esp+64h+var_50]
		add	edx, ecx
		add	eax, 2E1B2138h
		mov	ecx, ebx
		add	edx, eax
		ror	ecx, 16h
		add	[esp+64h+var_4C], edx
		mov	eax, ebx
		ror	eax, 0Dh
		xor	ecx, eax
		mov	eax, ebx
		ror	eax, 2
		xor	ecx, eax
		and	edi, ebx
		xor	edi, esi
		mov	esi, [esp+64h+var_4C]
		lea	eax, [edx+edi]
		mov	edi, [esp+64h+var_3C]
		add	eax, ecx
		mov	edx, esi
		mov	[esp+64h+var_50], eax
		mov	ecx, esi
		ror	edx, 19h
		mov	eax, esi
		ror	eax, 0Bh
		not	ecx
		xor	edx, eax
		and	ecx, edi
		mov	eax, esi
		add	edi, 53380D13h
		and	esi, [esp+64h+var_48]
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		mov	ecx, [esp+64h+var_50]
		mov	eax, [esp+64h+arg_0]
		add	esi, 4D2C6DFCh
		add	edx, [eax+88h]
		mov	eax, ecx
		add	esi, edx
		ror	eax, 0Dh
		mov	edx, ecx
		add	esi, ebp
		mov	ebp, [esp+64h+var_44]
		ror	edx, 16h
		add	ebp, esi
		xor	edx, eax
		mov	[esp+64h+var_44], ebp
		mov	eax, ecx
		xor	ecx, [esp+64h+var_40]
		ror	eax, 2
		and	ecx, ebx
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, [esp+64h+var_40]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_38], eax
		mov	edx, ebp
		mov	ecx, [esp+64h+var_38]
		mov	eax, ebp
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ebp
		mov	ebp, [esp+64h+var_48]
		and	esi, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		and	eax, [esp+64h+var_44]
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+8Ch]
		mov	eax, ecx
		add	esi, edx
		ror	eax, 0Dh
		mov	edx, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_40]
		ror	edx, 16h
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_40], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		mov	ecx, eax
		xor	ecx, [esp+64h+var_38]
		and	eax, [esp+64h+var_38]
		and	ecx, ebx
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		add	eax, edx
		mov	esi, [esp+64h+arg_0]
		mov	[esp+64h+var_3C], eax
		mov	edx, edi
		ror	edx, 19h
		mov	eax, edi
		ror	eax, 0Bh
		xor	edx, eax
		mov	eax, edi
		mov	edi, [esp+64h+var_4C]
		and	ecx, edi
		ror	eax, 6
		add	edi, 766A0ABBh
		xor	edx, eax
		mov	eax, [esp+64h+var_44]
		and	eax, [esp+64h+var_40]
		add	edx, [esi+90h]
		xor	ecx, eax
		add	ecx, edx
		lea	esi, [ebp+650A7354h]
		mov	ebp, [esp+64h+var_3C]
		add	esi, ecx
		mov	edx, ebp
		mov	eax, ebp
		ror	eax, 0Dh
		add	ebx, esi
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_38]
		mov	ecx, eax
		and	eax, ebp
		xor	ecx, ebp
		mov	ebp, [esp+64h+var_44]
		and	ecx, [esp+64h+var_50]
		xor	eax, ecx
		mov	ecx, ebx
		add	eax, esi
		not	ecx
		mov	esi, [esp+64h+arg_0]
		add	eax, edx
		mov	[esp+64h+var_48], eax
		mov	edx, ebx
		ror	edx, 19h
		mov	eax, ebx
		ror	eax, 0Bh
		and	ecx, ebp
		mov	esi, [esi+94h]
		xor	edx, eax
		mov	eax, ebx
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, [esp+64h+var_40]
		add	esi, edx
		xor	ecx, eax
		add	esi, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_48]
		add	[esp+64h+var_50], esi
		mov	edx, edi
		ror	edx, 16h
		mov	eax, edi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_3C]
		mov	ecx, eax
		xor	ecx, edi
		and	ecx, [esp+64h+var_38]
		and	eax, edi
		xor	eax, ecx
		mov	edi, [esp+64h+var_40]
		add	eax, esi
		mov	esi, [esp+64h+var_50]
		add	eax, edx
		mov	ecx, esi
		mov	[esp+64h+var_4C], eax
		mov	edx, esi
		ror	edx, 19h
		mov	eax, esi
		ror	eax, 0Bh
		not	ecx
		xor	edx, eax
		and	ecx, edi
		mov	eax, esi
		add	edi, 92722C85h
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, esi
		mov	esi, [esp+64h+arg_0]
		xor	ecx, eax
		add	edx, [esi+98h]
		lea	esi, [ebp-7E3D36D2h]
		add	ecx, edx
		mov	ebp, [esp+64h+var_38]
		add	esi, ecx
		mov	ecx, [esp+64h+var_4C]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	ebp, esi
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		mov	ecx, eax
		and	eax, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_4C]
		and	ecx, [esp+64h+var_3C]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_44], eax
		mov	edx, ebp
		mov	ecx, [esp+64h+var_44]
		mov	eax, ebp
		ror	eax, 0Bh
		and	esi, ebx
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, ebp
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+9Ch]
		mov	eax, ecx
		add	esi, edx
		ror	eax, 0Dh
		mov	edx, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_3C]
		ror	edx, 16h
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_3C], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		mov	ecx, eax
		xor	ecx, [esp+64h+var_44]
		and	ecx, [esp+64h+var_48]
		and	eax, [esp+64h+var_44]
		xor	eax, ecx
		add	ebx, 0A2BFE8A1h
		add	eax, esi
		mov	ecx, edi
		add	eax, edx
		mov	esi, [esp+64h+var_44]
		mov	[esp+64h+var_40], eax
		mov	edx, edi
		ror	edx, 19h
		mov	eax, edi
		ror	eax, 0Bh
		not	ecx
		xor	edx, eax
		and	ecx, [esp+64h+var_50]
		mov	eax, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebp
		and	eax, edi
		mov	edi, [esp+64h+var_44]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0A0h]
		add	edx, ecx
		add	edx, ebx
		mov	ebx, [esp+64h+var_40]
		add	[esp+64h+var_48], edx
		mov	ecx, ebx
		ror	ecx, 16h
		mov	eax, ebx
		ror	eax, 0Dh
		xor	edi, ebx
		xor	ecx, eax
		and	esi, ebx
		mov	eax, ebx
		mov	ebx, edi
		and	ebx, [esp+64h+var_4C]
		ror	eax, 2
		xor	ebx, esi
		xor	ecx, eax
		add	ebx, edx
		add	ebx, ecx
		mov	ecx, [esp+64h+var_48]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Bh
		and	edi, ebx
		ror	edx, 19h
		xor	edi, esi
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 6
		not	ecx
		xor	edx, eax
		and	ecx, ebp
		mov	eax, [esp+64h+var_3C]
		and	eax, [esp+64h+var_48]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0A4h]
		mov	eax, [esp+64h+var_50]
		add	edx, ecx
		add	eax, 0A81A664Bh
		mov	ecx, ebx
		add	edx, eax
		ror	ecx, 16h
		add	[esp+64h+var_4C], edx
		mov	eax, ebx
		mov	esi, [esp+64h+var_4C]
		ror	eax, 0Dh
		xor	ecx, eax
		mov	eax, ebx
		ror	eax, 2
		xor	ecx, eax
		lea	eax, [edx+edi]
		add	eax, ecx
		mov	edx, esi
		mov	[esp+64h+var_50], eax
		mov	eax, esi
		ror	edx, 19h
		ror	eax, 0Bh
		xor	edx, eax
		mov	edi, [esp+64h+var_3C]
		mov	eax, esi
		mov	ecx, esi
		and	esi, [esp+64h+var_48]
		not	ecx
		ror	eax, 6
		and	ecx, edi
		xor	edx, eax
		xor	esi, ecx
		mov	eax, [esp+64h+arg_0]
		add	esi, 0C24B8B70h
		mov	ecx, [esp+64h+var_50]
		add	edi, 0C76C51A3h
		add	edx, [eax+0A8h]
		mov	eax, ecx
		ror	eax, 0Dh
		add	esi, edx
		mov	edx, ecx
		add	esi, ebp
		mov	ebp, [esp+64h+var_44]
		ror	edx, 16h
		add	ebp, esi
		xor	edx, eax
		mov	[esp+64h+var_44], ebp
		mov	eax, ecx
		xor	ecx, [esp+64h+var_40]
		ror	eax, 2
		and	ecx, ebx
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, [esp+64h+var_40]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_38], eax
		mov	edx, ebp
		mov	ecx, [esp+64h+var_38]
		mov	eax, ebp
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ebp
		mov	ebp, [esp+64h+var_48]
		and	esi, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		and	eax, [esp+64h+var_44]
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0ACh]
		mov	eax, ecx
		add	esi, edx
		ror	eax, 0Dh
		mov	edx, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_40]
		ror	edx, 16h
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_40], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		mov	ecx, eax
		and	eax, [esp+64h+var_38]
		xor	ecx, [esp+64h+var_38]
		and	ecx, ebx
		xor	eax, ecx
		add	eax, esi
		add	eax, edx
		mov	edx, edi
		mov	[esp+64h+var_3C], eax
		mov	eax, edi
		ror	edx, 19h
		ror	eax, 0Bh
		xor	edx, eax
		mov	eax, edi
		lea	esi, [ebp-2E6D17E7h]
		ror	eax, 6
		mov	ecx, edi
		xor	edx, eax
		mov	edi, [esp+64h+var_4C]
		mov	eax, [esp+64h+var_44]
		not	ecx
		and	eax, [esp+64h+var_40]
		and	ecx, edi
		xor	ecx, eax
		mov	ebp, [esp+64h+var_3C]
		mov	eax, [esp+64h+arg_0]
		add	edi, 0D6990624h
		add	edx, [eax+0B0h]
		mov	eax, ebp
		ror	eax, 0Dh
		add	ecx, edx
		add	esi, ecx
		mov	edx, ebp
		ror	edx, 16h
		add	ebx, esi
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_38]
		mov	ecx, eax
		and	eax, ebp
		xor	ecx, ebp
		mov	ebp, [esp+64h+var_44]
		and	ecx, [esp+64h+var_50]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebx
		add	eax, edx
		not	esi
		mov	[esp+64h+var_48], eax
		mov	edx, ebx
		ror	edx, 19h
		mov	eax, ebx
		ror	eax, 0Bh
		and	esi, ebp
		xor	edx, eax
		mov	eax, ebx
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, [esp+64h+var_40]
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0B4h]
		add	esi, edx
		add	esi, edi
		mov	edi, [esp+64h+var_48]
		add	[esp+64h+var_50], esi
		mov	edx, edi
		ror	edx, 16h
		mov	eax, edi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_3C]
		mov	ecx, eax
		and	eax, edi
		xor	ecx, edi
		and	ecx, [esp+64h+var_38]
		xor	eax, ecx
		add	eax, esi
		mov	esi, [esp+64h+var_50]
		add	eax, edx
		mov	edx, esi
		mov	[esp+64h+var_4C], eax
		mov	eax, esi
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, esi
		ror	eax, 6
		xor	edx, eax
		mov	edi, [esp+64h+var_40]
		mov	ecx, esi
		mov	eax, ebx
		and	eax, esi
		not	ecx
		mov	esi, [esp+64h+arg_0]
		and	ecx, edi
		xor	ecx, eax
		add	edi, 106AA070h
		add	edx, [esi+0B8h]
		lea	esi, [ebp-0BF1CA7Bh]
		add	ecx, edx
		mov	ebp, [esp+64h+var_38]
		add	esi, ecx
		mov	ecx, [esp+64h+var_4C]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	ebp, esi
		ror	edx, 16h
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_48]
		mov	ecx, eax
		and	eax, [esp+64h+var_4C]
		xor	ecx, [esp+64h+var_4C]
		and	ecx, [esp+64h+var_3C]
		xor	eax, ecx
		mov	ecx, ebp
		add	eax, esi
		not	ecx
		add	eax, edx
		mov	esi, [esp+64h+arg_0]
		mov	[esp+64h+var_44], eax
		mov	edx, ebp
		ror	edx, 19h
		mov	eax, ebp
		ror	eax, 0Bh
		and	ecx, ebx
		mov	esi, [esi+0BCh]
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, ebp
		add	esi, edx
		xor	ecx, eax
		add	esi, ecx
		mov	ecx, [esp+64h+var_44]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	esi, edi
		mov	edi, [esp+64h+var_3C]
		ror	edx, 16h
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_3C], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		mov	ecx, eax
		and	eax, [esp+64h+var_44]
		xor	ecx, [esp+64h+var_44]
		and	ecx, [esp+64h+var_48]
		xor	eax, ecx
		add	eax, esi
		add	eax, edx
		mov	edx, edi
		mov	[esp+64h+var_40], eax
		mov	eax, edi
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, edi
		ror	eax, 6
		xor	edx, eax
		mov	esi, [esp+64h+arg_0]
		mov	ecx, edi
		add	ebx, 19A4C116h
		not	ecx
		mov	eax, ebp
		and	ecx, [esp+64h+var_50]
		and	eax, edi
		add	edx, [esi+0C0h]
		xor	ecx, eax
		add	edx, ecx
		mov	edi, [esp+64h+var_44]
		mov	esi, [esp+64h+var_44]
		add	edx, ebx
		mov	ebx, [esp+64h+var_40]
		xor	edi, ebx
		add	[esp+64h+var_48], edx
		mov	ecx, ebx
		ror	ecx, 16h
		mov	eax, ebx
		ror	eax, 0Dh
		and	esi, ebx
		xor	ecx, eax
		mov	eax, ebx
		ror	eax, 2
		mov	ebx, edi
		and	ebx, [esp+64h+var_4C]
		xor	ecx, eax
		xor	ebx, esi
		add	ebx, edx
		add	ebx, ecx
		mov	ecx, [esp+64h+var_48]
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Bh
		and	edi, ebx
		ror	edx, 19h
		xor	edi, esi
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 6
		not	ecx
		xor	edx, eax
		and	ecx, ebp
		mov	eax, [esp+64h+var_3C]
		and	eax, [esp+64h+var_48]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0C4h]
		mov	eax, [esp+64h+var_50]
		add	edx, ecx
		add	eax, 1E376C08h
		mov	ecx, ebx
		add	edx, eax
		ror	ecx, 16h
		add	[esp+64h+var_4C], edx
		mov	eax, ebx
		mov	esi, [esp+64h+var_4C]
		ror	eax, 0Dh
		xor	ecx, eax
		mov	eax, ebx
		ror	eax, 2
		xor	ecx, eax
		lea	eax, [edx+edi]
		mov	edi, [esp+64h+var_3C]
		add	eax, ecx
		mov	[esp+64h+var_50], eax
		mov	edx, esi
		mov	eax, esi
		ror	edx, 19h
		ror	eax, 0Bh
		mov	ecx, esi
		xor	edx, eax
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	esi, [esp+64h+var_48]
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		xor	esi, ecx
		add	edx, [eax+0C8h]
		add	esi, 2748774Ch
		mov	ecx, [esp+64h+var_50]
		add	esi, edx
		mov	edx, ecx
		mov	eax, ecx
		ror	eax, 0Dh
		add	esi, ebp
		mov	ebp, [esp+64h+var_44]
		add	edi, 34B0BCB5h
		ror	edx, 16h
		add	ebp, esi
		xor	edx, eax
		mov	[esp+64h+var_44], ebp
		mov	eax, ecx
		xor	ecx, [esp+64h+var_40]
		ror	eax, 2
		and	ecx, ebx
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, [esp+64h+var_40]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_3C], eax
		mov	edx, ebp
		mov	ecx, [esp+64h+var_3C]
		mov	eax, ebp
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ebp
		mov	ebp, [esp+64h+var_48]
		and	esi, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		and	eax, [esp+64h+var_44]
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0CCh]
		mov	eax, ecx
		ror	eax, 0Dh
		add	esi, edx
		mov	edx, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_40]
		ror	edx, 16h
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_40], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		mov	ecx, eax
		and	eax, [esp+64h+var_3C]
		xor	ecx, [esp+64h+var_3C]
		and	ecx, ebx
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		add	eax, edx
		mov	edx, edi
		mov	[esp+64h+var_38], eax
		mov	eax, edi
		ror	eax, 0Bh
		ror	edx, 19h
		xor	edx, eax
		mov	eax, edi
		mov	edi, [esp+64h+var_4C]
		and	ecx, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_44]
		and	eax, [esp+64h+var_40]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0D0h]
		lea	esi, [ebp+391C0CB3h]
		mov	ebp, [esp+64h+var_38]
		add	ecx, edx
		add	esi, ecx
		mov	edx, ebp
		ror	edx, 16h
		mov	eax, ebp
		ror	eax, 0Dh
		add	ebx, esi
		xor	edx, eax
		add	edi, 4ED8AA4Ah
		mov	eax, ebp
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_3C]
		mov	ecx, eax
		and	eax, ebp
		xor	ecx, ebp
		mov	ebp, [esp+64h+var_44]
		and	ecx, [esp+64h+var_50]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebx
		add	eax, edx
		not	esi
		mov	[esp+64h+var_4C], eax
		mov	edx, ebx
		ror	edx, 19h
		mov	eax, ebx
		ror	eax, 0Bh
		and	esi, ebp
		xor	edx, eax
		mov	eax, ebx
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, [esp+64h+var_40]
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0D4h]
		add	esi, edx
		add	esi, edi
		mov	edi, [esp+64h+var_4C]
		add	[esp+64h+var_50], esi
		mov	edx, edi
		ror	edx, 16h
		mov	eax, edi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_38]
		mov	ecx, eax
		and	eax, edi
		xor	ecx, edi
		mov	edi, [esp+64h+var_40]
		and	ecx, [esp+64h+var_3C]
		xor	eax, ecx
		add	eax, esi
		mov	esi, [esp+64h+var_50]
		add	eax, edx
		mov	ecx, esi
		mov	[esp+64h+var_54], eax
		mov	edx, esi
		ror	edx, 19h
		mov	eax, esi
		ror	eax, 0Bh
		not	ecx
		xor	edx, eax
		and	ecx, edi
		mov	eax, esi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebx
		and	eax, esi
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0D8h]
		add	ecx, edx
		lea	esi, [ebp+5B9CCA4Fh]
		add	edi, 682E6FF3h
		add	esi, ecx
		mov	ebp, [esp+64h+var_3C]
		mov	ecx, [esp+64h+var_54]
		add	ebp, esi
		mov	edx, ecx
		mov	[esp+64h+var_3C], ebp
		ror	edx, 16h
		mov	eax, ecx
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_4C]
		mov	ecx, eax
		and	eax, [esp+64h+var_54]
		xor	ecx, [esp+64h+var_54]
		and	ecx, [esp+64h+var_38]
		xor	eax, ecx
		add	eax, esi
		mov	esi, ebp
		add	eax, edx
		not	esi
		mov	[esp+64h+var_48], eax
		mov	edx, ebp
		mov	ecx, [esp+64h+var_48]
		mov	eax, ebp
		ror	eax, 0Bh
		and	esi, ebx
		ror	edx, 19h
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 6
		xor	edx, eax
		mov	eax, [esp+64h+var_50]
		and	eax, ebp
		xor	esi, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0DCh]
		mov	eax, ecx
		ror	eax, 0Dh
		add	esi, edx
		mov	edx, ecx
		add	esi, edi
		mov	edi, [esp+64h+var_38]
		ror	edx, 16h
		add	edi, esi
		xor	edx, eax
		mov	[esp+64h+var_38], edi
		mov	eax, ecx
		ror	eax, 2
		xor	edx, eax
		mov	eax, [esp+64h+var_54]
		mov	ecx, eax
		and	eax, [esp+64h+var_48]
		xor	ecx, [esp+64h+var_48]
		and	ecx, [esp+64h+var_4C]
		xor	eax, ecx
		mov	ecx, edi
		add	eax, esi
		not	ecx
		and	ecx, [esp+64h+var_50]
		add	eax, edx
		mov	[esp+64h+var_44], eax
		mov	edx, edi
		ror	edx, 19h
		mov	eax, edi
		ror	eax, 0Bh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 6
		xor	edx, eax
		mov	eax, ebp
		and	eax, edi
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0E0h]
		add	edx, ecx
		add	ebx, 748F82EEh
		mov	edi, [esp+64h+var_48]
		add	edx, ebx
		mov	ebx, [esp+64h+var_44]
		xor	edi, ebx
		add	[esp+64h+var_4C], edx
		mov	ecx, ebx
		mov	esi, [esp+64h+var_48]
		mov	eax, ebx
		ror	eax, 0Dh
		and	esi, ebx
		ror	ecx, 16h
		xor	ecx, eax
		mov	eax, ebx
		ror	eax, 2
		mov	ebx, edi
		and	ebx, [esp+64h+var_54]
		xor	ecx, eax
		xor	ebx, esi
		add	ebx, edx
		add	ebx, ecx
		mov	ecx, [esp+64h+var_4C]
		mov	edx, ecx
		mov	[esp+64h+var_40], ebx
		ror	edx, 19h
		mov	eax, ecx
		ror	eax, 0Bh
		and	edi, ebx
		xor	edx, eax
		xor	edi, esi
		mov	eax, ecx
		not	ecx
		ror	eax, 6
		and	ecx, ebp
		xor	edx, eax
		mov	eax, [esp+64h+var_38]
		and	eax, [esp+64h+var_4C]
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0E4h]
		mov	eax, [esp+64h+var_50]
		add	edx, ecx
		add	eax, 78A5636Fh
		mov	ecx, ebx
		add	edx, eax
		ror	ecx, 16h
		add	[esp+64h+var_54], edx
		mov	eax, ebx
		mov	esi, [esp+64h+var_54]
		ror	eax, 0Dh
		xor	ecx, eax
		lea	ebp, [edx+edi]
		mov	edi, [esp+64h+var_38]
		mov	eax, ebx
		ror	eax, 2
		mov	edx, esi
		xor	ecx, eax
		ror	edx, 19h
		mov	eax, esi
		add	ebp, ecx
		ror	eax, 0Bh
		mov	ecx, esi
		xor	edx, eax
		mov	[esp+64h+var_30], ebp
		mov	eax, esi
		not	ecx
		and	esi, [esp+64h+var_4C]
		and	ecx, edi
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0E8h]
		mov	eax, [esp+64h+var_3C]
		add	esi, edx
		add	eax, 84C87814h
		mov	edx, ebp
		add	esi, eax
		ror	edx, 16h
		add	[esp+64h+var_48], esi
		mov	eax, ebp
		ror	eax, 0Dh
		xor	edx, eax
		mov	ecx, ebp
		xor	ecx, [esp+64h+var_44]
		mov	eax, ebp
		ror	eax, 2
		and	ebx, ecx
		xor	edx, eax
		add	edi, 8CC70208h
		mov	eax, ebp
		and	eax, [esp+64h+var_44]
		xor	ebx, eax
		add	ebx, esi
		mov	esi, [esp+64h+var_48]
		add	ebx, edx
		mov	eax, esi
		ror	eax, 0Bh
		mov	edx, esi
		ror	edx, 19h
		mov	ecx, esi
		xor	edx, eax
		mov	[esp+64h+var_34], ebx
		mov	eax, esi
		not	ecx
		and	esi, [esp+64h+var_54]
		and	ecx, [esp+64h+var_4C]
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0ECh]
		mov	eax, ebx
		add	esi, edx
		ror	eax, 0Dh
		add	esi, edi
		mov	edx, ebx
		add	[esp+64h+var_44], esi
		mov	edi, ebp
		ror	edx, 16h
		xor	edi, ebx
		and	edi, [esp+64h+var_40]
		xor	edx, eax
		mov	eax, ebx
		ror	eax, 2
		xor	edx, eax
		mov	eax, ebp
		and	eax, ebx
		xor	edi, eax
		add	edi, esi
		mov	esi, [esp+64h+var_44]
		add	edi, edx
		mov	eax, esi
		ror	eax, 0Bh
		mov	edx, esi
		ror	edx, 19h
		mov	ecx, esi
		xor	edx, eax
		mov	[esp+64h+var_8], edi
		mov	eax, esi
		not	ecx
		and	esi, [esp+64h+var_48]
		and	ecx, [esp+64h+var_54]
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		mov	ecx, ebx
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+0F0h]
		mov	eax, [esp+64h+var_4C]
		add	esi, edx
		add	eax, 90BEFFFAh
		mov	edx, edi
		add	esi, eax
		ror	edx, 16h
		add	[esp+64h+var_40], esi
		mov	eax, edi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		xor	ecx, edi
		and	ebp, ecx
		mov	eax, ebx
		and	eax, edi
		xor	ebp, eax
		add	ebp, esi
		mov	esi, [esp+64h+var_40]
		add	ebp, edx
		mov	eax, esi
		ror	eax, 0Bh
		mov	edx, esi
		ror	edx, 19h
		mov	ecx, esi
		xor	edx, eax
		not	ecx
		and	ecx, [esp+64h+var_48]
		mov	eax, esi
		and	esi, [esp+64h+var_44]
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		mov	ecx, edi
		mov	eax, [esp+64h+arg_0]
		xor	ecx, ebp
		and	ebx, ecx
		add	edx, [eax+0F4h]
		mov	eax, [esp+64h+var_54]
		add	esi, edx
		add	eax, 0A4506CEBh
		mov	edx, ebp
		add	esi, eax
		ror	edx, 16h
		add	[esp+64h+var_30], esi
		mov	eax, ebp
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, ebp
		ror	eax, 2
		xor	edx, eax
		mov	eax, edi
		and	eax, ebp
		xor	ebx, eax
		add	ebx, esi
		mov	esi, [esp+64h+var_30]
		add	ebx, edx
		mov	eax, esi
		ror	eax, 0Bh
		mov	edx, esi
		ror	edx, 19h
		mov	ecx, esi
		xor	edx, eax
		not	ecx
		and	ecx, [esp+64h+var_44]
		mov	eax, esi
		and	esi, [esp+64h+var_40]
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		mov	ecx, ebp
		mov	eax, [esp+64h+arg_0]
		add	esi, edx
		mov	edx, ebx
		xor	ecx, ebx
		ror	edx, 16h
		and	edi, ecx
		add	esi, [eax+0F8h]
		mov	eax, [esp+64h+var_48]
		add	eax, 0BEF9A3F7h
		add	esi, eax
		mov	eax, ebx
		add	[esp+64h+var_34], esi
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, ebx
		ror	eax, 2
		xor	edx, eax
		mov	eax, ebp
		and	eax, ebx
		xor	edi, eax
		add	edi, esi
		mov	esi, [esp+64h+var_34]
		add	edi, edx
		mov	edx, esi
		mov	eax, esi
		ror	eax, 0Bh
		mov	ecx, esi
		ror	edx, 19h
		not	ecx
		and	ecx, [esp+64h+var_40]
		xor	edx, eax
		mov	eax, esi
		and	esi, [esp+64h+var_30]
		ror	eax, 6
		xor	esi, ecx
		xor	edx, eax
		mov	ecx, ebx
		add	edx, [esp+64h+var_4]
		xor	ecx, edi
		mov	eax, [esp+64h+var_44]
		add	esi, edx
		add	eax, 0C67178F2h
		mov	edx, edi
		add	esi, eax
		ror	edx, 16h
		mov	eax, edi
		and	ecx, ebp
		ror	eax, 0Dh
		xor	edx, eax
		mov	eax, edi
		ror	eax, 2
		xor	edx, eax
		mov	eax, ebx
		and	eax, edi
		xor	ecx, eax
		mov	eax, [esp+64h+arg_0]
		add	edx, [eax+100h]
		add	ecx, edx
		mov	edx, eax
		mov	eax, [esp+64h+var_C]
		add	ecx, esi
		add	eax, edi
		pop	edi
		add	[edx+10Ch], ebp
		add	[edx+108h], ebx
		mov	[edx+104h], eax
		mov	eax, [esp+60h+var_8]
		add	eax, [edx+110h]
		add	eax, esi
		mov	[edx+100h], ecx
		mov	[edx+110h], eax
		mov	eax, [esp+60h+var_34]
		add	[edx+114h], eax
		mov	eax, [esp+60h+var_30]
		add	[edx+118h], eax
		mov	eax, [esp+60h+var_40]
		add	[edx+11Ch], eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 54h
		retn
sub_100043C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006CC0(void	*, void	*, int,	size_t)
sub_10006CC0	proc near		; CODE XREF: sub_100041C0+12j
					; sub_10004200+79p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	ecx, 38h
		push	esi
		push	edi
		mov	esi, [ebx+124h]
		mov	eax, esi
		and	eax, 3Fh
		cmp	eax, 38h
		jb	short loc_10006CE1
		mov	ecx, 78h

loc_10006CE1:				; CODE XREF: sub_10006CC0+1Aj
		mov	edi, [ebx+120h]
		sub	ecx, eax
		push	ecx		; int
		mov	eax, esi
		shl	edi, 3
		shr	eax, 1Dh
		push	offset dword_1003E728 ;	void *
		push	ebx		; void *
		or	edi, eax
		shl	esi, 3
		call	sub_10006FD0
		bswap	edi
		bswap	esi
		push	ebx
		mov	[ebx+38h], edi
		mov	[ebx+3Ch], esi
		call	sub_100043C0
		mov	eax, [ebx+100h]
		lea	ecx, [ebx+100h]
		bswap	eax
		mov	[ecx], eax
		add	esp, 10h
		mov	eax, [ebx+104h]
		bswap	eax
		mov	[ebx+104h], eax
		mov	eax, [ebx+108h]
		bswap	eax
		mov	[ebx+108h], eax
		mov	eax, [ebx+10Ch]
		mov	esi, [esp+0Ch+arg_C]
		bswap	eax
		mov	[ebx+10Ch], eax
		mov	eax, [ebx+110h]
		bswap	eax
		mov	[ebx+110h], eax
		mov	eax, [ebx+114h]
		bswap	eax
		mov	[ebx+114h], eax
		mov	eax, [ebx+118h]
		bswap	eax
		mov	[ebx+118h], eax
		mov	eax, [ebx+11Ch]
		bswap	eax
		mov	[ebx+11Ch], eax
		cmp	esi, 20h
		jbe	short loc_10006D95
		mov	esi, 20h

loc_10006D95:				; CODE XREF: sub_10006CC0+CEj
		push	esi		; size_t
		push	ecx		; void *
		push	[esp+14h+arg_4]	; void *
		call	memcpy
		mov	eax, [esp+18h+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10006DAD
		mov	[eax], esi

loc_10006DAD:				; CODE XREF: sub_10006CC0+E9j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10006CC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006DC0(int,	void *,	int, size_t)
sub_10006DC0	proc near		; CODE XREF: sub_100041E0+12j
					; DATA XREF: .rdata:1003ED1Co

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 20h
		push	esi
		mov	esi, [esp+24h+arg_0]
		mov	ecx, 8
		push	edi
		add	esi, 100h
		lea	edi, [esp+28h+var_20]
		rep movsd
		mov	eax, [esp+28h+var_20]
		bswap	eax
		mov	[esp+28h+var_20], eax
		mov	eax, [esp+28h+var_1C]
		bswap	eax
		mov	[esp+28h+var_1C], eax
		mov	eax, [esp+28h+var_18]
		bswap	eax
		mov	[esp+28h+var_18], eax
		mov	eax, [esp+28h+var_14]
		mov	esi, [esp+28h+arg_C]
		bswap	eax
		mov	[esp+28h+var_14], eax
		mov	eax, [esp+28h+var_10]
		bswap	eax
		mov	[esp+28h+var_10], eax
		mov	eax, [esp+28h+var_C]
		bswap	eax
		mov	[esp+28h+var_C], eax
		mov	eax, [esp+28h+var_8]
		bswap	eax
		mov	[esp+28h+var_8], eax
		mov	eax, [esp+28h+var_4]
		bswap	eax
		mov	[esp+28h+var_4], eax
		cmp	esi, 20h
		jbe	short loc_10006E38
		mov	esi, 20h

loc_10006E38:				; CODE XREF: sub_10006DC0+71j
		push	esi		; size_t
		lea	eax, [esp+2Ch+var_20]
		push	eax		; void *
		push	[esp+30h+arg_4]	; void *
		call	memcpy
		mov	eax, [esp+34h+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10006E54
		mov	[eax], esi

loc_10006E54:				; CODE XREF: sub_10006DC0+90j
		pop	edi
		pop	esi
		add	esp, 20h
		retn
sub_10006DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006E60	proc near		; DATA XREF: .rdata:1003E378o
					; .rdata:1003E50Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 4Ah
		push	edi
		mov	edi, [esp+8+arg_4]
		xor	eax, eax
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10006E60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006E80	proc near		; DATA XREF: .rdata:1003E374o
					; .rdata:1003E508o
		mov	eax, 128h
		retn
sub_10006E80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006E90(int,	void *)
sub_10006E90	proc near		; DATA XREF: .rdata:1003E36Co

var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= byte ptr -12Ch
var_2C		= byte ptr -2Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 134h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+134h+var_4], eax
		mov	eax, [esp+134h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+13Ch+arg_4]
		mov	ebx, ebp
		push	esi
		push	edi
		mov	[esp+144h+var_134], eax
		lea	ecx, [ebx+1]
		nop

loc_10006EC0:				; CODE XREF: sub_10006E90+35j
		mov	al, [ebx]
		inc	ebx
		test	al, al
		jnz	short loc_10006EC0
		push	128h		; size_t
		lea	eax, [esp+148h+var_12C]
		sub	ebx, ecx
		push	0		; int
		push	eax		; void *
		call	memset
		push	ebx		; int
		lea	eax, [esp+154h+var_12C]
		mov	ecx, 8
		mov	esi, offset dword_1003E918
		lea	edi, [esp+154h+var_2C]
		push	ebp		; void *
		rep movsd
		push	eax		; void *
		call	sub_10006FD0
		push	20h		; size_t
		lea	eax, [esp+160h+var_130]
		push	eax		; int
		push	[esp+164h+var_134] ; void *
		lea	eax, [esp+168h+var_12C]
		push	eax		; void *
		call	sub_10006CC0
		mov	ecx, [esp+16Ch+var_4]
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 134h
		retn
sub_10006E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006F30(void	*, void	*, int)
sub_10006F30	proc near		; CODE XREF: sub_1000C7F0+204p
					; sub_1000C7F0+228p
					; DATA XREF: ...

var_130		= dword	ptr -130h
var_12C		= byte ptr -12Ch
var_2C		= byte ptr -2Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		push	ebx
		mov	ebx, [esp+134h+arg_4]
		lea	eax, [esp+134h+var_12C]
		push	ebp
		mov	ebp, [esp+138h+arg_0]
		push	esi
		push	edi
		push	128h		; size_t
		push	0		; int
		push	eax		; void *
		call	memset
		push	[esp+14Ch+arg_8] ; int
		lea	eax, [esp+150h+var_12C]
		mov	ecx, 8
		mov	esi, offset dword_1003E918
		lea	edi, [esp+150h+var_2C]
		push	ebx		; void *
		rep movsd
		push	eax		; void *
		call	sub_10006FD0
		push	20h		; size_t
		lea	eax, [esp+15Ch+var_130]
		push	eax		; int
		lea	eax, [esp+160h+var_12C]
		push	ebp		; void *
		push	eax		; void *
		call	sub_10006CC0
		mov	ecx, [esp+168h+var_4]
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn
sub_10006F30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006FC0	proc near		; DATA XREF: .rdata:1003E354o
					; .rdata:1003E4E8o ...
		push	128h
		call	PORT_Alloc_Util
		add	esp, 4
		retn
sub_10006FC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006FD0(void	*, void	*, int)
sub_10006FD0	proc near		; CODE XREF: sub_10004200+64p
					; sub_100042A0+57p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	edi
		mov	eax, [ebp+124h]
		mov	edi, eax
		and	edi, 3Fh
		test	ebx, ebx
		jz	loc_1000709C
		add	eax, ebx
		mov	[ebp+124h], eax
		cmp	eax, ebx
		jnb	short loc_10007000
		inc	dword ptr [ebp+120h]

loc_10007000:				; CODE XREF: sub_10006FD0+28j
		push	esi
		test	edi, edi
		jz	short loc_10007047
		mov	esi, 40h
		sub	esi, edi
		cmp	ebx, esi
		jnb	short loc_10007012
		mov	esi, ebx

loc_10007012:				; CODE XREF: sub_10006FD0+3Ej
		mov	eax, [esp+10h+arg_4]
		push	esi		; size_t
		push	eax		; void *
		lea	eax, [edi+ebp]
		push	eax		; void *
		call	memcpy
		mov	edx, [esp+1Ch+arg_4]
		lea	eax, [esi+edi]
		add	edx, esi
		add	esp, 0Ch
		sub	ebx, esi
		mov	[esp+10h+arg_0], edx
		cmp	eax, 40h
		jnz	short loc_1000704F
		push	ebp
		call	sub_100043C0
		mov	edx, [esp+14h+arg_0]
		add	esp, 4
		jmp	short loc_1000704F
; ---------------------------------------------------------------------------

loc_10007047:				; CODE XREF: sub_10006FD0+33j
		mov	edx, [esp+10h+arg_4]
		mov	[esp+10h+arg_0], edx

loc_1000704F:				; CODE XREF: sub_10006FD0+66j
					; sub_10006FD0+75j
		cmp	ebx, 40h
		jb	short loc_10007088
		mov	eax, ebx
		shr	eax, 6
		mov	[esp+10h+arg_8], eax
		lea	ecx, [ecx+0]

loc_10007060:				; CODE XREF: sub_10006FD0+B6j
		mov	esi, edx
		mov	ecx, 10h
		mov	edi, ebp
		add	edx, 40h
		rep movsd
		push	ebp
		mov	[esp+14h+arg_0], edx
		sub	ebx, 40h
		call	sub_100043C0
		mov	edx, [esp+14h+arg_0]
		add	esp, 4
		dec	[esp+10h+arg_8]
		jnz	short loc_10007060

loc_10007088:				; CODE XREF: sub_10006FD0+82j
		pop	esi
		test	ebx, ebx
		jz	short loc_1000709C
		mov	eax, [esp+0Ch+arg_0]
		push	ebx		; size_t
		push	eax		; void *
		push	ebp		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000709C:				; CODE XREF: sub_10006FD0+18j
					; sub_10006FD0+BBj
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_10006FD0	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100070A0(void	*)
sub_100070A0	proc near		; DATA XREF: .rdata:1003E3B4o
					; .rdata:1003ED30o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	2C8h		; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		add	esp, 0Ch
		add	edi, 280h
		mov	ecx, 10h
		mov	esi, offset dword_1003EC18
		rep movsd
		pop	edi
		pop	esi
		retn
sub_100070A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100070D0	proc near		; DATA XREF: .rdata:1003E444o
					; .rdata:1003E448o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, 0B2h
		push	edi
		mov	edi, [esp+8+arg_0]
		rep movsd
		pop	edi
		pop	esi
		retn
sub_100070D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100070F0	proc near		; DATA XREF: .rdata:1003E3BCo
					; .rdata:1003ED38o

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		cmp	eax, 30h
		jb	short loc_100070FE
		mov	eax, 30h

loc_100070FE:				; CODE XREF: sub_100070F0+7j
		mov	[esp+arg_C], eax ; size_t
		jmp	sub_100084A0
sub_100070F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007110	proc near		; DATA XREF: .rdata:1003ED44o

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		cmp	eax, 30h
		jb	short loc_1000711E
		mov	eax, 30h

loc_1000711E:				; CODE XREF: sub_10007110+7j
		mov	[esp+arg_C], eax ; size_t
		jmp	sub_10008620
sub_10007110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007130	proc near		; DATA XREF: .rdata:1003E3A4o
					; .rdata:1003E3D0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 0B2h
		push	edi
		mov	edi, [esp+8+arg_4]
		xor	eax, eax
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10007130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007150	proc near		; DATA XREF: .rdata:1003E3A0o
					; .rdata:1003E3CCo
		mov	eax, 2C8h
		retn
sub_10007150	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007160(int,	void *)
sub_10007160	proc near		; DATA XREF: .rdata:1003E3C4o

var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= byte ptr -2CCh
var_4C		= byte ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2D4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2D4h+var_4], eax
		mov	eax, [esp+2D4h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+2DCh+arg_4]
		mov	ebx, ebp
		push	esi
		push	edi
		mov	[esp+2E4h+var_2D4], eax
		lea	ecx, [ebx+1]
		nop

loc_10007190:				; CODE XREF: sub_10007160+35j
		mov	al, [ebx]
		inc	ebx
		test	al, al
		jnz	short loc_10007190
		push	2C8h		; size_t
		lea	eax, [esp+2E8h+var_2CC]
		sub	ebx, ecx
		push	0		; int
		push	eax		; void *
		call	memset
		push	ebx		; int
		lea	eax, [esp+2F4h+var_2CC]
		mov	ecx, 10h
		mov	esi, offset dword_1003EC18
		lea	edi, [esp+2F4h+var_4C]
		push	ebp		; void *
		rep movsd
		push	eax		; void *
		call	sub_10008880
		push	30h		; size_t
		lea	eax, [esp+300h+var_2D0]
		push	eax		; int
		push	[esp+304h+var_2D4] ; void *
		lea	eax, [esp+308h+var_2CC]
		push	eax		; void *
		call	sub_100084A0
		mov	ecx, [esp+30Ch+var_4]
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2D4h
		retn
sub_10007160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007200(void	*, void	*, int)
sub_10007200	proc near		; DATA XREF: .rdata:1003E3C0o

var_2D0		= dword	ptr -2D0h
var_2CC		= byte ptr -2CCh
var_4C		= byte ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2D0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2D0h+var_4], eax
		push	ebx
		mov	ebx, [esp+2D4h+arg_4]
		lea	eax, [esp+2D4h+var_2CC]
		push	ebp
		mov	ebp, [esp+2D8h+arg_0]
		push	esi
		push	edi
		push	2C8h		; size_t
		push	0		; int
		push	eax		; void *
		call	memset
		push	[esp+2ECh+arg_8] ; int
		lea	eax, [esp+2F0h+var_2CC]
		mov	ecx, 10h
		mov	esi, offset dword_1003EC18
		lea	edi, [esp+2F0h+var_4C]
		push	ebx		; void *
		rep movsd
		push	eax		; void *
		call	sub_10008880
		push	30h		; size_t
		lea	eax, [esp+2FCh+var_2D0]
		push	eax		; int
		lea	eax, [esp+300h+var_2CC]
		push	ebp		; void *
		push	eax		; void *
		call	sub_100084A0
		mov	ecx, [esp+308h+var_4]
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2D0h
		retn
sub_10007200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007290	proc near		; DATA XREF: .rdata:1003E380o
					; .rdata:1003E3ACo ...
		push	2C8h
		call	PORT_Alloc_Util
		add	esp, 4
		retn
sub_10007290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_100072A0(void	*, void	*, int)
sub_100072A0	proc near		; DATA XREF: .rdata:1003E3B8o
					; .rdata:1003ED34o
		jmp	sub_10008880
sub_100072A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100072B0(void	*)
sub_100072B0	proc near		; DATA XREF: .rdata:1003E388o
					; .rdata:1003ED58o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	2C8h		; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		add	esp, 0Ch
		add	edi, 280h
		mov	ecx, 10h
		mov	esi, offset dword_1003EBD8
		rep movsd
		pop	edi
		pop	esi
		retn
sub_100072B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100072E0	proc near		; CODE XREF: sub_100084A0+69p
					; sub_10008880+6Ap ...

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 88h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edx, [esp+98h+arg_0]
		lea	ebx, [edx+8]
		mov	ecx, [edx]
		mov	eax, [edx+4]
		bswap	ecx
		mov	[edx+4], ecx
		mov	ecx, [ebx]
		bswap	eax
		bswap	ecx
		mov	[edx], eax
		mov	eax, [edx+0Ch]
		mov	[edx+0Ch], ecx
		mov	ecx, [edx+10h]
		bswap	eax
		bswap	ecx
		mov	[ebx], eax
		mov	eax, [edx+14h]
		mov	[edx+14h], ecx
		mov	ecx, [edx+18h]
		bswap	eax
		bswap	ecx
		mov	[edx+10h], eax
		mov	eax, [edx+1Ch]
		mov	[edx+1Ch], ecx
		mov	ecx, [edx+20h]
		bswap	eax
		bswap	ecx
		mov	[edx+18h], eax
		mov	eax, [edx+24h]
		mov	[edx+24h], ecx
		mov	ecx, [edx+28h]
		bswap	eax
		bswap	ecx
		mov	[edx+20h], eax
		mov	eax, [edx+2Ch]
		mov	[edx+2Ch], ecx
		mov	ecx, [edx+30h]
		bswap	eax
		bswap	ecx
		mov	[edx+28h], eax
		mov	eax, [edx+34h]
		mov	[edx+34h], ecx
		mov	ecx, [edx+38h]
		bswap	eax
		bswap	ecx
		mov	[edx+30h], eax
		mov	eax, [edx+3Ch]
		mov	[edx+3Ch], ecx
		mov	ecx, [edx+40h]
		bswap	eax
		bswap	ecx
		mov	[edx+38h], eax
		mov	eax, [edx+44h]
		mov	[edx+44h], ecx
		mov	ecx, [edx+48h]
		bswap	eax
		bswap	ecx
		mov	[edx+40h], eax
		mov	eax, [edx+4Ch]
		mov	[edx+4Ch], ecx
		mov	ecx, [edx+50h]
		bswap	eax
		bswap	ecx
		mov	[edx+48h], eax
		mov	eax, [edx+54h]
		mov	[edx+54h], ecx
		mov	ecx, [edx+58h]
		bswap	eax
		bswap	ecx
		mov	[edx+50h], eax
		mov	eax, [edx+5Ch]
		mov	[edx+5Ch], ecx
		mov	ecx, [edx+60h]
		bswap	eax
		mov	[esp+98h+var_3C], ebx
		mov	[edx+58h], eax
		bswap	ecx
		mov	eax, [edx+64h]
		mov	edi, ebx
		bswap	eax
		mov	[edx+60h], eax
		mov	ebx, 40h
		mov	eax, [edx+6Ch]
		mov	[edx+64h], ecx
		mov	ecx, [edx+68h]
		bswap	ecx
		bswap	eax
		mov	[edx+68h], eax
		mov	eax, [edx+74h]
		mov	[edx+6Ch], ecx
		mov	ecx, [edx+70h]
		bswap	ecx
		bswap	eax
		mov	[edx+70h], eax
		mov	eax, [edx+7Ch]
		mov	[edx+74h], ecx
		mov	ecx, [edx+78h]
		bswap	ecx
		bswap	eax
		mov	[edx+78h], eax
		mov	[edx+7Ch], ecx
		jmp	short loc_10007400
; ---------------------------------------------------------------------------
		align 10h

loc_10007400:				; CODE XREF: sub_100072E0+11Bj
					; sub_100072E0+202j
		mov	ebp, [edi+6Ch]
		xor	ecx, ecx
		mov	[esp+98h+var_88], ecx
		mov	eax, ebp
		mov	ecx, [edi+68h]
		mov	edx, ebp
		shr	ecx, 13h
		shl	eax, 0Dh
		or	eax, ecx
		shl	edx, 1Ah
		mov	ecx, [edi+68h]
		shr	ecx, 6
		or	edx, ecx
		mov	ecx, [edi+68h]
		xor	eax, edx
		shl	ecx, 3
		mov	edx, ebp
		shr	edx, 1Dh
		or	edx, ecx
		xor	eax, edx
		add	eax, [edi+40h]
		cmp	eax, [edi+40h]
		jnb	short loc_10007444
		mov	[esp+98h+var_88], 1

loc_10007444:				; CODE XREF: sub_100072E0+15Aj
		mov	edx, [edi+4]
		mov	esi, edx
		mov	ecx, [edi]
		shr	ecx, 8
		shl	esi, 18h
		or	esi, ecx
		shl	edx, 19h
		mov	ecx, [edi]
		shr	ecx, 7
		or	edx, ecx
		mov	ecx, [edi]
		xor	esi, edx
		shr	ecx, 1
		mov	edx, [edi+4]
		shl	edx, 1Fh
		or	edx, ecx
		xor	esi, edx
		mov	edx, [esp+98h+var_88]
		add	eax, esi
		cmp	eax, esi
		jnb	short loc_1000747C
		inc	edx
		mov	[esp+98h+var_88], edx

loc_1000747C:				; CODE XREF: sub_100072E0+195j
		add	eax, [edi-8]
		cmp	eax, [edi-8]
		jnb	short loc_10007489
		inc	edx
		mov	[esp+98h+var_88], edx

loc_10007489:				; CODE XREF: sub_100072E0+1A2j
		mov	ecx, [edi+4]
		mov	edx, ecx
		mov	esi, [edi]
		mov	[edi+78h], eax
		mov	eax, esi
		shl	eax, 1Fh
		shr	edx, 1
		or	edx, eax
		shl	esi, 18h
		mov	eax, ecx
		shr	ecx, 7
		shr	eax, 8
		or	eax, esi
		mov	esi, [edi+68h]
		xor	edx, eax
		mov	eax, esi
		xor	edx, ecx
		shr	eax, 1Dh
		lea	ecx, ds:0[ebp*8]
		shl	esi, 0Dh
		or	ecx, eax
		mov	eax, ebp
		shr	eax, 13h
		or	eax, esi
		shr	ebp, 6
		xor	ecx, eax
		xor	ecx, ebp
		add	edx, ecx
		add	edx, [edi+44h]
		add	edx, [edi-4]
		add	edx, [esp+98h+var_88]
		mov	[edi+7Ch], edx
		add	edi, 8
		dec	ebx
		jnz	loc_10007400
		mov	esi, [esp+98h+arg_0]
		mov	ebx, [esp+98h+var_3C]
		mov	[esp+98h+var_44], offset dword_1003E95C
		mov	edx, [esi+2B4h]
		mov	[esp+98h+var_78], edx
		mov	edx, [esi+2B8h]
		mov	[esp+98h+var_70], edx
		mov	edx, [esi+2BCh]
		mov	[esp+98h+var_84], edx
		mov	edx, offset dword_1003E958
		sub	edx, esi
		mov	eax, [esi+280h]
		mov	[esp+98h+var_30], edx
		mov	edx, offset dword_1003E95C
		sub	edx, esi
		mov	ecx, [esi+2A8h]
		mov	[esp+98h+var_38], edx
		mov	edx, offset dword_1003E960
		sub	edx, esi
		mov	edi, [esi+288h]
		mov	[esp+98h+var_18], edx
		mov	edx, offset dword_1003E964
		sub	edx, esi
		mov	ebp, [esi+2A0h]
		mov	[esp+98h+var_28], edx
		mov	edx, offset dword_1003E968
		sub	edx, esi
		mov	[esp+98h+var_50], eax
		mov	[esp+98h+var_8], edx
		mov	edx, offset dword_1003E96C
		sub	edx, esi
		mov	eax, [esi+284h]
		mov	[esp+98h+var_20], edx
		mov	edx, offset dword_1003E970
		sub	edx, esi
		mov	[esp+98h+var_74], eax
		mov	eax, [esi+28Ch]
		mov	[esp+98h+var_10], edx
		mov	edx, offset dword_1003E974
		sub	edx, esi
		mov	[esp+98h+var_54], eax
		mov	eax, [esi+290h]
		mov	[esp+98h+var_34], edx
		mov	edx, offset dword_1003E978
		sub	edx, esi
		mov	[esp+98h+var_60], eax
		mov	eax, [esi+294h]
		mov	[esp+98h+var_2C], edx
		mov	edx, offset dword_1003E97C
		sub	edx, esi
		mov	[esp+98h+var_80], eax
		mov	eax, [esi+298h]
		mov	[esp+98h+var_24], edx
		mov	edx, offset dword_1003E980
		sub	edx, esi
		mov	[esp+98h+var_68], eax
		mov	eax, [esi+29Ch]
		mov	[esp+98h+var_1C], edx
		mov	edx, offset dword_1003E984
		sub	edx, esi
		mov	[esp+98h+var_7C], eax
		mov	eax, [esi+2A4h]
		mov	[esp+98h+var_14], edx
		mov	edx, offset dword_1003E988
		sub	edx, esi
		mov	[esp+98h+var_4C], eax
		mov	eax, [esi+2ACh]
		mov	[esp+98h+var_C], edx
		mov	edx, offset dword_1003E98C
		mov	[esp+98h+var_6C], eax
		sub	edx, esi
		mov	eax, [esi+2B0h]
		mov	[esp+98h+var_58], ecx
		mov	[esp+98h+var_5C], eax
		mov	[esp+98h+var_4], edx
		jmp	short loc_10007645
; ---------------------------------------------------------------------------

loc_10007641:				; CODE XREF: sub_100072E0+1093j
		mov	eax, [esp+98h+var_5C]

loc_10007645:				; CODE XREF: sub_100072E0+35Fj
		and	ecx, ebp
		mov	edx, ebp
		not	edx
		and	edx, eax
		mov	eax, ebp
		xor	edx, ecx
		shl	eax, 17h
		mov	ecx, [esp+98h+var_4C]
		mov	esi, ecx
		shr	esi, 9
		or	esi, eax
		shl	ecx, 0Eh
		mov	eax, ebp
		shr	eax, 12h
		or	ecx, eax
		mov	eax, ebp
		xor	esi, ecx
		shr	eax, 0Eh
		mov	ecx, [esp+98h+var_4C]
		shl	ecx, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_44]
		xor	esi, ecx
		add	esi, edx
		cmp	esi, edx
		mov	eax, [eax-4]
		sbb	ecx, ecx
		add	esi, eax
		neg	ecx
		mov	[esp+98h+var_88], ecx
		cmp	esi, eax
		jnb	short loc_10007699
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007699:				; CODE XREF: sub_100072E0+3B2j
		add	esi, [ebx-8]
		cmp	esi, [ebx-8]
		jnb	short loc_100076A6
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_100076A6:				; CODE XREF: sub_100072E0+3BFj
		mov	eax, [esp+98h+var_70]
		add	eax, esi
		mov	[esp+98h+var_70], eax
		cmp	eax, esi
		jnb	short loc_100076B9
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_100076B9:				; CODE XREF: sub_100072E0+3D2j
		mov	esi, [esp+98h+var_4C]
		mov	eax, ebp
		shl	eax, 12h
		mov	edx, esi
		shr	edx, 0Eh
		mov	ecx, esi
		or	edx, eax
		shr	ecx, 12h
		mov	eax, ebp
		shl	eax, 0Eh
		or	ecx, eax
		mov	eax, ebp
		xor	edx, ecx
		shr	eax, 9
		mov	ecx, esi
		shl	ecx, 17h
		or	ecx, eax
		mov	eax, [esp+98h+var_6C]
		xor	edx, ecx
		and	eax, esi
		mov	ecx, esi
		mov	esi, [esp+98h+var_84]
		not	ecx
		and	ecx, [esp+98h+var_78]
		xor	ecx, eax
		mov	eax, [esp+98h+var_44]
		add	edx, ecx
		mov	ecx, [esp+98h+var_50]
		add	edx, [ebx-4]
		add	edx, [eax]
		add	edx, [esp+98h+var_88]
		mov	eax, [esp+98h+var_68]
		add	esi, edx
		add	eax, [esp+98h+var_70]
		cmp	eax, [esp+98h+var_70]
		mov	edx, [esp+98h+var_74]
		mov	[esp+98h+var_68], eax
		sbb	eax, eax
		neg	eax
		mov	[esp+98h+var_84], esi
		add	eax, esi
		shl	edx, 4
		add	[esp+98h+var_7C], eax
		mov	esi, edi
		xor	esi, ecx
		mov	eax, edi
		and	esi, [esp+98h+var_60]
		and	eax, ecx
		xor	esi, eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_74]
		shr	eax, 1Ch
		or	edx, eax
		shr	ecx, 2
		mov	eax, [esp+98h+var_50]
		shl	eax, 1Eh
		or	ecx, eax
		mov	eax, [esp+98h+var_50]
		xor	edx, ecx
		shl	eax, 19h
		mov	ecx, [esp+98h+var_74]
		shr	ecx, 7
		or	ecx, eax
		mov	eax, [esp+98h+var_70]
		xor	edx, ecx
		add	edx, esi
		cmp	edx, esi
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+98h+var_70], eax
		mov	[esp+98h+var_64], ecx
		cmp	eax, edx
		jnb	short loc_1000778B
		inc	ecx
		mov	[esp+98h+var_64], ecx

loc_1000778B:				; CODE XREF: sub_100072E0+4A4j
		mov	esi, [esp+98h+var_50]
		mov	eax, esi
		mov	ecx, [esp+98h+var_74]
		mov	edx, ecx
		shr	eax, 7
		shl	ecx, 1Eh
		shl	edx, 19h
		or	edx, eax
		mov	eax, esi
		shr	eax, 2
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shl	eax, 4
		mov	ecx, [esp+98h+var_74]
		shr	ecx, 1Ch
		or	ecx, eax
		mov	esi, [esp+98h+var_7C]
		mov	eax, [esp+98h+var_54]
		xor	edx, ecx
		add	edx, [esp+98h+var_64]
		mov	ecx, eax
		xor	ecx, [esp+98h+var_74]
		and	ecx, [esp+98h+var_80]
		and	eax, [esp+98h+var_74]
		xor	ecx, eax
		shr	esi, 9
		add	ecx, edx
		add	[esp+98h+var_84], ecx
		mov	ecx, [esp+98h+var_68]
		mov	edx, ecx
		mov	eax, ecx
		not	edx
		and	edx, [esp+98h+var_58]
		and	eax, ebp
		xor	edx, eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_7C]
		shl	eax, 17h
		or	esi, eax
		shl	ecx, 0Eh
		mov	eax, [esp+98h+var_68]
		shr	eax, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_68]
		xor	esi, ecx
		shr	eax, 0Eh
		mov	ecx, [esp+98h+var_7C]
		shl	ecx, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_30]
		xor	esi, ecx
		add	esi, edx
		cmp	esi, edx
		mov	eax, [ebx+eax]
		sbb	ecx, ecx
		add	esi, eax
		neg	ecx
		mov	[esp+98h+var_88], ecx
		cmp	esi, eax
		jnb	short loc_1000783B
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_1000783B:				; CODE XREF: sub_100072E0+554j
		add	esi, [ebx]
		cmp	esi, [ebx]
		jnb	short loc_10007846
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007846:				; CODE XREF: sub_100072E0+55Fj
		mov	eax, [esp+98h+var_5C]
		add	eax, esi
		mov	[esp+98h+var_5C], eax
		cmp	eax, esi
		jnb	short loc_10007859
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007859:				; CODE XREF: sub_100072E0+572j
		mov	esi, [esp+98h+var_68]
		mov	eax, esi
		mov	ecx, [esp+98h+var_7C]
		mov	edx, ecx
		shl	eax, 12h
		shr	ecx, 12h
		shr	edx, 0Eh
		or	edx, eax
		mov	eax, esi
		shl	eax, 0Eh
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shr	eax, 9
		mov	ecx, [esp+98h+var_7C]
		shl	ecx, 17h
		or	ecx, eax
		mov	esi, [esp+98h+var_78]
		mov	eax, [esp+98h+var_7C]
		xor	edx, ecx
		mov	ecx, eax
		and	eax, [esp+98h+var_4C]
		not	ecx
		and	ecx, [esp+98h+var_6C]
		xor	ecx, eax
		mov	eax, [esp+98h+var_38]
		add	edx, ecx
		mov	ecx, [esp+98h+var_60]
		add	ecx, [esp+98h+var_5C]
		mov	[esp+98h+var_60], ecx
		add	edx, [ebx+eax]
		add	edx, [ebx+4]
		add	edx, [esp+98h+var_88]
		add	esi, edx
		cmp	ecx, [esp+98h+var_5C]
		mov	ecx, [esp+98h+var_70]
		sbb	eax, eax
		mov	edx, [esp+98h+var_84]
		neg	eax
		mov	[esp+98h+var_78], esi
		add	eax, esi
		shl	edx, 4
		add	[esp+98h+var_80], eax
		mov	eax, [esp+98h+var_50]
		mov	esi, eax
		and	eax, ecx
		xor	esi, ecx
		and	esi, edi
		xor	esi, eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_84]
		shr	eax, 1Ch
		or	edx, eax
		shr	ecx, 2
		mov	eax, [esp+98h+var_70]
		shl	eax, 1Eh
		or	ecx, eax
		mov	eax, [esp+98h+var_70]
		xor	edx, ecx
		shl	eax, 19h
		mov	ecx, [esp+98h+var_84]
		shr	ecx, 7
		or	ecx, eax
		mov	eax, [esp+98h+var_5C]
		xor	edx, ecx
		add	edx, esi
		cmp	edx, esi
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+98h+var_5C], eax
		mov	[esp+98h+var_64], ecx
		cmp	eax, edx
		jnb	short loc_10007932
		inc	ecx
		mov	[esp+98h+var_64], ecx

loc_10007932:				; CODE XREF: sub_100072E0+64Bj
		mov	esi, [esp+98h+var_70]
		mov	eax, esi
		mov	ecx, [esp+98h+var_84]
		mov	edx, ecx
		shr	eax, 7
		shl	ecx, 1Eh
		shl	edx, 19h
		or	edx, eax
		mov	eax, esi
		shr	eax, 2
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shl	eax, 4
		mov	ecx, [esp+98h+var_84]
		shr	ecx, 1Ch
		or	ecx, eax
		mov	esi, [esp+98h+var_80]
		mov	eax, [esp+98h+var_74]
		xor	edx, ecx
		add	edx, [esp+98h+var_64]
		mov	ecx, eax
		xor	ecx, [esp+98h+var_84]
		and	ecx, [esp+98h+var_54]
		and	eax, [esp+98h+var_84]
		xor	ecx, eax
		shr	esi, 9
		add	ecx, edx
		add	[esp+98h+var_78], ecx
		mov	ecx, [esp+98h+var_60]
		mov	edx, ecx
		mov	eax, ecx
		not	edx
		and	eax, [esp+98h+var_68]
		and	edx, ebp
		xor	edx, eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_80]
		shl	eax, 17h
		or	esi, eax
		shl	ecx, 0Eh
		mov	eax, [esp+98h+var_60]
		shr	eax, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_60]
		xor	esi, ecx
		shr	eax, 0Eh
		mov	ecx, [esp+98h+var_80]
		shl	ecx, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_18]
		xor	esi, ecx
		add	esi, edx
		cmp	esi, edx
		mov	eax, [ebx+eax]
		sbb	ecx, ecx
		add	esi, eax
		neg	ecx
		mov	[esp+98h+var_88], ecx
		cmp	esi, eax
		jnb	short loc_100079E5
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_100079E5:				; CODE XREF: sub_100072E0+6FEj
		add	esi, [ebx+8]
		cmp	esi, [ebx+8]
		jnb	short loc_100079F2
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_100079F2:				; CODE XREF: sub_100072E0+70Bj
		mov	eax, [esp+98h+var_58]
		add	eax, esi
		mov	[esp+98h+var_58], eax
		cmp	eax, esi
		jnb	short loc_10007A05
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007A05:				; CODE XREF: sub_100072E0+71Ej
		mov	esi, [esp+98h+var_60]
		mov	eax, esi
		mov	ecx, [esp+98h+var_80]
		mov	edx, ecx
		shl	eax, 12h
		shr	ecx, 12h
		shr	edx, 0Eh
		or	edx, eax
		add	edi, [esp+98h+var_58]
		mov	eax, esi
		shl	eax, 0Eh
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shr	eax, 9
		mov	ecx, [esp+98h+var_80]
		shl	ecx, 17h
		or	ecx, eax
		mov	eax, [esp+98h+var_80]
		xor	edx, ecx
		mov	ecx, eax
		and	eax, [esp+98h+var_7C]
		not	ecx
		and	ecx, [esp+98h+var_4C]
		xor	ecx, eax
		mov	eax, [esp+98h+var_28]
		add	edx, ecx
		mov	ecx, [esp+98h+var_6C]
		add	edx, [ebx+eax]
		add	edx, [ebx+0Ch]
		add	edx, [esp+98h+var_88]
		add	ecx, edx
		cmp	edi, [esp+98h+var_58]
		mov	edx, [esp+98h+var_78]
		sbb	eax, eax
		mov	[esp+98h+var_6C], ecx
		neg	eax
		shl	edx, 4
		add	eax, ecx
		mov	ecx, [esp+98h+var_5C]
		add	[esp+98h+var_54], eax
		mov	eax, [esp+98h+var_70]
		mov	esi, eax
		and	eax, ecx
		xor	esi, ecx
		and	esi, [esp+98h+var_50]
		xor	esi, eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_78]
		shr	eax, 1Ch
		or	edx, eax
		shr	ecx, 2
		mov	eax, [esp+98h+var_5C]
		shl	eax, 1Eh
		or	ecx, eax
		mov	eax, [esp+98h+var_5C]
		xor	edx, ecx
		shl	eax, 19h
		mov	ecx, [esp+98h+var_78]
		shr	ecx, 7
		or	ecx, eax
		mov	eax, [esp+98h+var_58]
		xor	edx, ecx
		add	edx, esi
		cmp	edx, esi
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+98h+var_58], eax
		mov	[esp+98h+var_64], ecx
		cmp	eax, edx
		jnb	short loc_10007AD8
		inc	ecx
		mov	[esp+98h+var_64], ecx

loc_10007AD8:				; CODE XREF: sub_100072E0+7F1j
		mov	esi, [esp+98h+var_5C]
		mov	eax, esi
		mov	ecx, [esp+98h+var_78]
		mov	edx, ecx
		shr	eax, 7
		shl	ecx, 1Eh
		shl	edx, 19h
		or	edx, eax
		mov	eax, esi
		shr	eax, 2
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shl	eax, 4
		mov	ecx, [esp+98h+var_78]
		shr	ecx, 1Ch
		or	ecx, eax
		mov	eax, [esp+98h+var_84]
		xor	edx, ecx
		mov	ecx, eax
		xor	ecx, [esp+98h+var_78]
		and	eax, [esp+98h+var_78]
		and	ecx, [esp+98h+var_74]
		add	edx, [esp+98h+var_64]
		xor	ecx, eax
		mov	eax, [esp+98h+var_60]
		add	ecx, edx
		add	[esp+98h+var_6C], ecx
		and	eax, edi
		mov	ecx, [esp+98h+var_54]
		mov	edx, edi
		mov	esi, ecx
		not	edx
		and	edx, [esp+98h+var_68]
		xor	edx, eax
		shr	esi, 9
		mov	eax, edi
		shl	ecx, 0Eh
		shl	eax, 17h
		or	esi, eax
		mov	eax, edi
		shr	eax, 12h
		or	ecx, eax
		mov	eax, edi
		xor	esi, ecx
		shr	eax, 0Eh
		mov	ecx, [esp+98h+var_54]
		shl	ecx, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_8]
		xor	esi, ecx
		add	esi, edx
		cmp	esi, edx
		mov	eax, [ebx+eax]
		sbb	ecx, ecx
		add	esi, eax
		neg	ecx
		mov	[esp+98h+var_88], ecx
		cmp	esi, eax
		jnb	short loc_10007B83
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007B83:				; CODE XREF: sub_100072E0+89Cj
		add	esi, [ebx+10h]
		cmp	esi, [ebx+10h]
		jnb	short loc_10007B90
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007B90:				; CODE XREF: sub_100072E0+8A9j
		add	ebp, esi
		cmp	ebp, esi
		jnb	short loc_10007B9B
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007B9B:				; CODE XREF: sub_100072E0+8B4j
		mov	esi, [esp+98h+var_54]
		mov	eax, edi
		shl	eax, 12h
		mov	edx, esi
		shr	edx, 0Eh
		mov	ecx, esi
		or	edx, eax
		shr	ecx, 12h
		mov	eax, edi
		shl	eax, 0Eh
		or	ecx, eax
		mov	eax, edi
		xor	edx, ecx
		shr	eax, 9
		mov	ecx, esi
		shl	ecx, 17h
		or	ecx, eax
		mov	eax, [esp+98h+var_80]
		xor	edx, ecx
		and	eax, esi
		mov	ecx, esi
		not	ecx
		and	ecx, [esp+98h+var_7C]
		xor	ecx, eax
		mov	eax, [esp+98h+var_20]
		add	edx, ecx
		mov	ecx, [esp+98h+var_4C]
		add	edx, [ebx+eax]
		add	edx, [ebx+14h]
		add	edx, [esp+98h+var_88]
		mov	eax, [esp+98h+var_50]
		add	ecx, edx
		add	eax, ebp
		mov	edx, [esp+98h+var_6C]
		cmp	eax, ebp
		mov	[esp+98h+var_50], eax
		mov	[esp+98h+var_4C], ecx
		sbb	eax, eax
		shl	edx, 4
		neg	eax
		add	eax, ecx
		mov	ecx, [esp+98h+var_58]
		add	[esp+98h+var_74], eax
		mov	eax, [esp+98h+var_5C]
		mov	esi, eax
		and	eax, ecx
		xor	esi, ecx
		and	esi, [esp+98h+var_70]
		xor	esi, eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_6C]
		shr	eax, 1Ch
		or	edx, eax
		shr	ecx, 2
		mov	eax, [esp+98h+var_58]
		shl	eax, 1Eh
		or	ecx, eax
		mov	eax, [esp+98h+var_58]
		xor	edx, ecx
		shl	eax, 19h
		mov	ecx, [esp+98h+var_6C]
		shr	ecx, 7
		or	ecx, eax
		xor	edx, ecx
		add	edx, esi
		cmp	edx, esi
		sbb	eax, eax
		add	ebp, edx
		neg	eax
		mov	[esp+98h+var_64], eax
		cmp	ebp, edx
		jnb	short loc_10007C64
		inc	eax
		mov	[esp+98h+var_64], eax

loc_10007C64:				; CODE XREF: sub_100072E0+97Dj
		mov	esi, [esp+98h+var_58]
		mov	eax, esi
		mov	ecx, [esp+98h+var_6C]
		mov	edx, ecx
		shr	eax, 7
		shl	ecx, 1Eh
		shl	edx, 19h
		or	edx, eax
		mov	eax, esi
		shr	eax, 2
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shl	eax, 4
		mov	ecx, [esp+98h+var_6C]
		shr	ecx, 1Ch
		or	ecx, eax
		mov	esi, [esp+98h+var_74]
		mov	eax, [esp+98h+var_78]
		xor	edx, ecx
		add	edx, [esp+98h+var_64]
		mov	ecx, eax
		xor	ecx, [esp+98h+var_6C]
		and	ecx, [esp+98h+var_84]
		and	eax, [esp+98h+var_6C]
		xor	ecx, eax
		shr	esi, 9
		add	ecx, edx
		mov	eax, edi
		add	[esp+98h+var_4C], ecx
		mov	ecx, [esp+98h+var_50]
		and	eax, ecx
		mov	edx, ecx
		not	edx
		and	edx, [esp+98h+var_60]
		xor	edx, eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_74]
		shl	eax, 17h
		or	esi, eax
		shl	ecx, 0Eh
		mov	eax, [esp+98h+var_50]
		shr	eax, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_50]
		xor	esi, ecx
		shr	eax, 0Eh
		mov	ecx, [esp+98h+var_74]
		shl	ecx, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_10]
		xor	esi, ecx
		add	esi, edx
		cmp	esi, edx
		mov	eax, [ebx+eax]
		sbb	ecx, ecx
		add	esi, eax
		neg	ecx
		mov	[esp+98h+var_88], ecx
		cmp	esi, eax
		jnb	short loc_10007D17
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007D17:				; CODE XREF: sub_100072E0+A30j
		add	esi, [ebx+18h]
		cmp	esi, [ebx+18h]
		jnb	short loc_10007D24
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007D24:				; CODE XREF: sub_100072E0+A3Dj
		mov	eax, [esp+98h+var_68]
		add	eax, esi
		mov	[esp+98h+var_68], eax
		cmp	eax, esi
		jnb	short loc_10007D37
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007D37:				; CODE XREF: sub_100072E0+A50j
		mov	esi, [esp+98h+var_50]
		mov	eax, esi
		mov	ecx, [esp+98h+var_74]
		mov	edx, ecx
		shl	eax, 12h
		shr	ecx, 12h
		shr	edx, 0Eh
		or	edx, eax
		mov	eax, esi
		shl	eax, 0Eh
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shr	eax, 9
		mov	ecx, [esp+98h+var_74]
		shl	ecx, 17h
		or	ecx, eax
		mov	esi, [esp+98h+var_7C]
		mov	eax, [esp+98h+var_54]
		xor	edx, ecx
		and	eax, [esp+98h+var_74]
		mov	ecx, [esp+98h+var_74]
		not	ecx
		and	ecx, [esp+98h+var_80]
		xor	ecx, eax
		mov	eax, [esp+98h+var_34]
		add	edx, ecx
		mov	ecx, [esp+98h+var_70]
		add	ecx, [esp+98h+var_68]
		mov	[esp+98h+var_70], ecx
		add	edx, [ebx+eax]
		add	edx, [ebx+1Ch]
		add	edx, [esp+98h+var_88]
		add	esi, edx
		cmp	ecx, [esp+98h+var_68]
		mov	[esp+98h+var_7C], esi
		sbb	eax, eax
		neg	eax
		add	eax, esi
		add	[esp+98h+var_84], eax
		mov	eax, [esp+98h+var_58]
		mov	ecx, eax
		xor	ecx, ebp
		and	eax, ebp
		mov	edx, ecx
		mov	[esp+98h+var_64], ecx
		and	edx, [esp+98h+var_5C]
		mov	ecx, [esp+98h+var_4C]
		xor	edx, eax
		mov	[esp+98h+var_3C], eax
		mov	esi, ecx
		shl	esi, 4
		mov	eax, ebp
		shr	eax, 1Ch
		or	esi, eax
		shr	ecx, 2
		mov	eax, ebp
		shl	eax, 1Eh
		or	ecx, eax
		mov	eax, ebp
		xor	esi, ecx
		shl	eax, 19h
		mov	ecx, [esp+98h+var_4C]
		shr	ecx, 7
		or	ecx, eax
		mov	eax, [esp+98h+var_68]
		xor	esi, ecx
		add	esi, edx
		cmp	esi, edx
		sbb	ecx, ecx
		add	eax, esi
		neg	ecx
		mov	[esp+98h+var_68], eax
		mov	[esp+98h+var_88], ecx
		cmp	eax, esi
		jnb	short loc_10007E14
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10007E14:				; CODE XREF: sub_100072E0+B2Dj
		mov	esi, [esp+98h+var_4C]
		mov	edx, esi
		mov	eax, [esp+98h+var_6C]
		mov	ecx, eax
		and	eax, esi
		shl	edx, 19h
		mov	[esp+98h+var_48], eax
		xor	ecx, esi
		mov	[esp+98h+var_40], ecx
		mov	eax, ebp
		shr	eax, 7
		mov	ecx, esi
		or	edx, eax
		shl	ecx, 1Eh
		mov	eax, ebp
		shr	eax, 2
		or	ecx, eax
		mov	eax, ebp
		xor	edx, ecx
		shl	eax, 4
		mov	ecx, esi
		mov	esi, [esp+98h+var_50]
		shr	ecx, 1Ch
		or	ecx, eax
		mov	eax, [esp+98h+var_40]
		and	eax, [esp+98h+var_78]
		xor	edx, ecx
		xor	eax, [esp+98h+var_48]
		add	edx, [esp+98h+var_88]
		mov	ecx, [esp+98h+var_70]
		add	eax, edx
		add	[esp+98h+var_7C], eax
		mov	edx, ecx
		not	edx
		mov	eax, esi
		and	eax, ecx
		and	edx, edi
		xor	edx, eax
		mov	eax, [esp+98h+var_84]
		shr	eax, 9
		mov	[esp+98h+var_88], eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_84]
		shl	eax, 17h
		or	[esp+98h+var_88], eax
		mov	eax, [esp+98h+var_70]
		shl	ecx, 0Eh
		shr	eax, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_70]
		xor	[esp+98h+var_88], ecx
		mov	ecx, [esp+98h+var_84]
		shl	ecx, 12h
		shr	eax, 0Eh
		or	ecx, eax
		mov	eax, [esp+98h+var_2C]
		xor	[esp+98h+var_88], ecx
		mov	ecx, [esp+98h+var_88]
		add	ecx, edx
		mov	eax, [ebx+eax]
		cmp	ecx, edx
		sbb	edx, edx
		add	ecx, eax
		neg	edx
		mov	[esp+98h+var_88], edx
		cmp	ecx, eax
		jnb	short loc_10007EDA
		inc	edx
		mov	[esp+98h+var_88], edx

loc_10007EDA:				; CODE XREF: sub_100072E0+BF3j
		add	ecx, [ebx+20h]
		cmp	ecx, [ebx+20h]
		jnb	short loc_10007EE7
		inc	edx
		mov	[esp+98h+var_88], edx

loc_10007EE7:				; CODE XREF: sub_100072E0+C00j
		mov	eax, [esp+98h+var_60]
		add	eax, ecx
		mov	[esp+98h+var_60], eax
		cmp	eax, ecx
		jnb	short loc_10007EFA
		inc	edx
		mov	[esp+98h+var_88], edx

loc_10007EFA:				; CODE XREF: sub_100072E0+C13j
		mov	ecx, [esp+98h+var_84]
		mov	edx, ecx
		mov	eax, [esp+98h+var_70]
		shl	eax, 12h
		shr	ecx, 12h
		shr	edx, 0Eh
		or	edx, eax
		mov	eax, [esp+98h+var_70]
		shl	eax, 0Eh
		or	ecx, eax
		mov	eax, [esp+98h+var_70]
		xor	edx, ecx
		shr	eax, 9
		mov	ecx, [esp+98h+var_84]
		shl	ecx, 17h
		or	ecx, eax
		mov	eax, [esp+98h+var_74]
		and	eax, [esp+98h+var_84]
		xor	edx, ecx
		mov	ecx, [esp+98h+var_84]
		not	ecx
		and	ecx, [esp+98h+var_54]
		xor	ecx, eax
		mov	eax, [esp+98h+var_24]
		add	edx, ecx
		mov	ecx, [esp+98h+var_64]
		add	edx, [ebx+eax]
		add	edx, [ebx+24h]
		add	edx, [esp+98h+var_88]
		add	[esp+98h+var_80], edx
		mov	eax, [esp+98h+var_5C]
		add	eax, [esp+98h+var_60]
		cmp	eax, [esp+98h+var_60]
		mov	[esp+98h+var_5C], eax
		sbb	eax, eax
		neg	eax
		add	eax, [esp+98h+var_80]
		add	[esp+98h+var_78], eax
		mov	eax, [esp+98h+var_68]
		and	ecx, eax
		xor	ecx, [esp+98h+var_3C]
		mov	[esp+98h+var_64], ecx
		mov	ecx, [esp+98h+var_7C]
		mov	edx, ecx
		shr	eax, 1Ch
		shl	edx, 4
		or	edx, eax
		shr	ecx, 2
		mov	eax, [esp+98h+var_68]
		shl	eax, 1Eh
		or	ecx, eax
		mov	eax, [esp+98h+var_68]
		xor	edx, ecx
		shl	eax, 19h
		mov	ecx, [esp+98h+var_7C]
		shr	ecx, 7
		or	ecx, eax
		mov	eax, [esp+98h+var_60]
		xor	edx, ecx
		add	edx, [esp+98h+var_64]
		cmp	edx, [esp+98h+var_64]
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+98h+var_60], eax
		mov	[esp+98h+var_64], ecx
		cmp	eax, edx
		jnb	short loc_10007FD3
		inc	ecx
		mov	[esp+98h+var_64], ecx

loc_10007FD3:				; CODE XREF: sub_100072E0+CECj
		mov	ecx, [esp+98h+var_7C]
		mov	edx, ecx
		mov	eax, [esp+98h+var_68]
		shr	eax, 7
		shl	edx, 19h
		or	edx, eax
		shl	ecx, 1Eh
		mov	eax, [esp+98h+var_68]
		shr	eax, 2
		or	ecx, eax
		mov	eax, [esp+98h+var_68]
		xor	edx, ecx
		shl	eax, 4
		mov	ecx, [esp+98h+var_7C]
		shr	ecx, 1Ch
		or	ecx, eax
		mov	eax, [esp+98h+var_40]
		and	eax, [esp+98h+var_7C]
		xor	edx, ecx
		xor	eax, [esp+98h+var_48]
		add	edx, [esp+98h+var_64]
		mov	ecx, [esp+98h+var_5C]
		add	eax, edx
		add	[esp+98h+var_80], eax
		mov	edx, ecx
		mov	eax, [esp+98h+var_70]
		not	edx
		and	eax, ecx
		and	edx, esi
		mov	esi, [esp+98h+var_78]
		xor	edx, eax
		mov	eax, ecx
		shr	esi, 9
		mov	ecx, [esp+98h+var_78]
		shl	eax, 17h
		or	esi, eax
		shl	ecx, 0Eh
		mov	eax, [esp+98h+var_5C]
		shr	eax, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_5C]
		xor	esi, ecx
		shr	eax, 0Eh
		mov	ecx, [esp+98h+var_78]
		shl	ecx, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_1C]
		xor	esi, ecx
		add	esi, edx
		cmp	esi, edx
		mov	eax, [ebx+eax]
		sbb	ecx, ecx
		add	esi, eax
		neg	ecx
		mov	[esp+98h+var_88], ecx
		cmp	esi, eax
		jnb	short loc_1000807D
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_1000807D:				; CODE XREF: sub_100072E0+D96j
		add	esi, [ebx+28h]
		cmp	esi, [ebx+28h]
		jnb	short loc_1000808A
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_1000808A:				; CODE XREF: sub_100072E0+DA3j
		add	edi, esi
		cmp	edi, esi
		jnb	short loc_10008095
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10008095:				; CODE XREF: sub_100072E0+DAEj
		mov	esi, [esp+98h+var_5C]
		mov	eax, esi
		mov	ecx, [esp+98h+var_78]
		mov	edx, ecx
		shl	eax, 12h
		shr	edx, 0Eh
		or	edx, eax
		shr	ecx, 12h
		mov	eax, esi
		shl	eax, 0Eh
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shr	eax, 9
		mov	ecx, [esp+98h+var_78]
		shl	ecx, 17h
		or	ecx, eax
		mov	eax, [esp+98h+var_84]
		and	eax, [esp+98h+var_78]
		xor	edx, ecx
		mov	ecx, [esp+98h+var_78]
		not	ecx
		and	ecx, [esp+98h+var_74]
		xor	ecx, eax
		mov	eax, [esp+98h+var_14]
		add	edx, ecx
		mov	ecx, [esp+98h+var_54]
		add	edx, [ebx+eax]
		add	edx, [ebx+2Ch]
		add	edx, [esp+98h+var_88]
		mov	eax, [esp+98h+var_58]
		add	ecx, edx
		add	eax, edi
		mov	edx, [esp+98h+var_80]
		cmp	eax, edi
		mov	[esp+98h+var_58], eax
		mov	[esp+98h+var_54], ecx
		sbb	eax, eax
		shl	edx, 4
		neg	eax
		add	eax, ecx
		mov	ecx, [esp+98h+var_80]
		add	[esp+98h+var_6C], eax
		mov	eax, [esp+98h+var_68]
		mov	esi, eax
		and	eax, ebp
		shr	ecx, 2
		xor	esi, ebp
		and	esi, [esp+98h+var_60]
		xor	esi, eax
		mov	eax, [esp+98h+var_60]
		shr	eax, 1Ch
		or	edx, eax
		mov	eax, [esp+98h+var_60]
		shl	eax, 1Eh
		or	ecx, eax
		mov	eax, [esp+98h+var_60]
		xor	edx, ecx
		shl	eax, 19h
		mov	ecx, [esp+98h+var_80]
		shr	ecx, 7
		or	ecx, eax
		xor	edx, ecx
		add	edx, esi
		cmp	edx, esi
		sbb	eax, eax
		add	edi, edx
		neg	eax
		mov	[esp+98h+var_48], eax
		cmp	edi, edx
		jnb	short loc_10008167
		inc	eax
		mov	[esp+98h+var_48], eax

loc_10008167:				; CODE XREF: sub_100072E0+E80j
		mov	esi, [esp+98h+var_60]
		mov	eax, esi
		mov	ecx, [esp+98h+var_80]
		mov	edx, ecx
		shr	eax, 7
		shl	ecx, 1Eh
		shl	edx, 19h
		or	edx, eax
		mov	eax, esi
		shr	eax, 2
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shl	eax, 4
		mov	ecx, [esp+98h+var_80]
		shr	ecx, 1Ch
		or	ecx, eax
		mov	esi, [esp+98h+var_6C]
		mov	eax, [esp+98h+var_7C]
		xor	edx, ecx
		add	edx, [esp+98h+var_48]
		mov	ecx, eax
		xor	ecx, [esp+98h+var_4C]
		and	ecx, [esp+98h+var_80]
		and	eax, [esp+98h+var_4C]
		xor	ecx, eax
		shr	esi, 9
		mov	eax, [esp+98h+var_5C]
		add	ecx, edx
		add	[esp+98h+var_54], ecx
		mov	ecx, [esp+98h+var_58]
		and	eax, ecx
		mov	edx, ecx
		not	edx
		and	edx, [esp+98h+var_70]
		xor	edx, eax
		mov	eax, ecx
		mov	ecx, [esp+98h+var_6C]
		shl	eax, 17h
		or	esi, eax
		shl	ecx, 0Eh
		mov	eax, [esp+98h+var_58]
		shr	eax, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_58]
		xor	esi, ecx
		shr	eax, 0Eh
		mov	ecx, [esp+98h+var_6C]
		shl	ecx, 12h
		or	ecx, eax
		mov	eax, [esp+98h+var_C]
		xor	esi, ecx
		add	esi, edx
		cmp	esi, edx
		mov	eax, [ebx+eax]
		sbb	ecx, ecx
		add	esi, eax
		neg	ecx
		mov	[esp+98h+var_88], ecx
		cmp	esi, eax
		jnb	short loc_1000821C
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_1000821C:				; CODE XREF: sub_100072E0+F35j
		add	esi, [ebx+30h]
		cmp	esi, [ebx+30h]
		jnb	short loc_10008229
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_10008229:				; CODE XREF: sub_100072E0+F42j
		mov	eax, [esp+98h+var_50]
		add	eax, esi
		mov	[esp+98h+var_50], eax
		cmp	eax, esi
		jnb	short loc_1000823C
		inc	ecx
		mov	[esp+98h+var_88], ecx

loc_1000823C:				; CODE XREF: sub_100072E0+F55j
		mov	esi, [esp+98h+var_58]
		mov	eax, esi
		mov	ecx, [esp+98h+var_6C]
		mov	edx, ecx
		shl	eax, 12h
		shr	edx, 0Eh
		or	edx, eax
		shr	ecx, 12h
		mov	eax, esi
		add	ebp, [esp+98h+var_50]
		shl	eax, 0Eh
		or	ecx, eax
		mov	eax, esi
		xor	edx, ecx
		shr	eax, 9
		mov	ecx, [esp+98h+var_6C]
		mov	esi, edi
		shl	ecx, 17h
		or	ecx, eax
		mov	eax, [esp+98h+var_78]
		and	eax, [esp+98h+var_6C]
		xor	edx, ecx
		mov	ecx, [esp+98h+var_6C]
		not	ecx
		and	ecx, [esp+98h+var_84]
		xor	ecx, eax
		mov	eax, [esp+98h+var_4]
		add	edx, ecx
		mov	ecx, [esp+98h+var_74]
		add	edx, [ebx+eax]
		add	edx, [ebx+34h]
		add	edx, [esp+98h+var_88]
		add	ecx, edx
		cmp	ebp, [esp+98h+var_50]
		mov	[esp+98h+var_74], ecx
		sbb	eax, eax
		xor	esi, [esp+98h+var_68]
		and	esi, [esp+98h+var_60]
		neg	eax
		add	eax, ecx
		mov	ecx, [esp+98h+var_54]
		add	[esp+98h+var_4C], eax
		mov	edx, ecx
		mov	eax, edi
		shl	edx, 4
		and	eax, [esp+98h+var_68]
		xor	esi, eax
		shr	ecx, 2
		mov	eax, edi
		shr	eax, 1Ch
		or	edx, eax
		mov	eax, edi
		shl	eax, 1Eh
		or	ecx, eax
		mov	eax, edi
		xor	edx, ecx
		shl	eax, 19h
		mov	ecx, [esp+98h+var_54]
		shr	ecx, 7
		or	ecx, eax
		xor	edx, ecx
		add	edx, esi
		cmp	edx, esi
		mov	esi, [esp+98h+var_50]
		sbb	eax, eax
		add	esi, edx
		neg	eax
		mov	[esp+98h+var_50], esi
		mov	[esp+98h+var_48], eax
		cmp	esi, edx
		jnb	short loc_1000830C
		inc	eax
		mov	[esp+98h+var_48], eax

loc_1000830C:				; CODE XREF: sub_100072E0+1025j
		mov	ecx, [esp+98h+var_54]
		mov	eax, edi
		mov	edx, ecx
		shr	eax, 7
		shl	edx, 19h
		add	ebx, 40h
		or	edx, eax
		shl	ecx, 1Eh
		mov	eax, edi
		shr	eax, 2
		or	ecx, eax
		mov	eax, edi
		xor	edx, ecx
		shl	eax, 4
		mov	ecx, [esp+98h+var_54]
		shr	ecx, 1Ch
		or	ecx, eax
		mov	eax, [esp+98h+var_54]
		xor	edx, ecx
		mov	ecx, eax
		xor	ecx, [esp+98h+var_7C]
		and	ecx, [esp+98h+var_80]
		and	eax, [esp+98h+var_7C]
		add	edx, [esp+98h+var_48]
		xor	ecx, eax
		mov	eax, [esp+98h+var_44]
		add	ecx, edx
		mov	edx, [esp+98h+var_74]
		add	eax, 40h
		add	edx, ecx
		mov	[esp+98h+var_44], eax
		mov	ecx, [esp+98h+var_58]
		mov	[esp+98h+var_74], edx
		cmp	eax, offset dword_1003EBDC
		jl	loc_10007641
		mov	ecx, [esp+98h+arg_0]
		add	[ecx+280h], esi
		cmp	[ecx+280h], esi
		sbb	eax, eax
		add	[ecx+288h], edi
		neg	eax
		add	eax, edx
		add	[ecx+284h], eax
		cmp	[ecx+288h], edi
		pop	edi
		sbb	eax, eax
		neg	eax
		add	eax, [esp+94h+var_54]
		add	[ecx+28Ch], eax
		mov	eax, [esp+94h+var_60]
		add	[ecx+290h], eax
		cmp	[ecx+290h], eax
		pop	esi
		sbb	eax, eax
		neg	eax
		add	eax, [esp+90h+var_80]
		add	[ecx+294h], eax
		mov	eax, [esp+90h+var_68]
		add	[ecx+298h], eax
		cmp	[ecx+298h], eax
		sbb	eax, eax
		add	[ecx+2A0h], ebp
		neg	eax
		add	eax, [esp+90h+var_7C]
		add	[ecx+29Ch], eax
		cmp	[ecx+2A0h], ebp
		pop	ebp
		sbb	eax, eax
		neg	eax
		add	eax, [esp+8Ch+var_4C]
		add	[ecx+2A4h], eax
		mov	eax, [esp+8Ch+var_58]
		add	[ecx+2A8h], eax
		cmp	[ecx+2A8h], eax
		pop	ebx
		sbb	eax, eax
		neg	eax
		add	eax, [esp+88h+var_6C]
		add	[ecx+2ACh], eax
		mov	eax, [esp+88h+var_5C]
		add	[ecx+2B0h], eax
		cmp	[ecx+2B0h], eax
		sbb	eax, eax
		neg	eax
		add	eax, [esp+88h+var_78]
		add	[ecx+2B4h], eax
		mov	eax, [esp+88h+var_70]
		add	[ecx+2B8h], eax
		cmp	[ecx+2B8h], eax
		sbb	eax, eax
		neg	eax
		add	eax, [esp+88h+var_84]
		add	[ecx+2BCh], eax
		add	esp, 88h
		retn
sub_100072E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008470(void	*, int)
sub_10008470	proc near		; DATA XREF: .rdata:1003E384o
					; .rdata:1003E3B0o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	2C8h		; size_t
		push	0		; int
		push	[esp+8+arg_0]	; void *
		call	memset
		add	esp, 0Ch
		cmp	[esp+arg_4], 0
		jz	short locret_10008494
		push	[esp+arg_0]
		call	PORT_Free_Util
		pop	ecx

locret_10008494:			; CODE XREF: sub_10008470+18j
		retn
sub_10008470	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100084A0(void	*, void	*, int,	size_t)
sub_100084A0	proc near		; CODE XREF: sub_100070F0+12j
					; sub_10007160+79p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	edx, 70h
		push	esi
		push	edi
		mov	eax, [ebx+2C0h]
		and	eax, 7Fh
		cmp	eax, 70h
		jb	short loc_100084BF
		mov	edx, 0F0h

loc_100084BF:				; CODE XREF: sub_100084A0+18j
		mov	ecx, [ebx+2C0h]
		sub	edx, eax
		mov	eax, [ebx+2C4h]
		push	edx		; int
		push	offset dword_1003E728 ;	void *
		lea	esi, ds:0[ecx*8]
		shr	ecx, 1Dh
		lea	edi, ds:0[eax*8]
		push	ebx		; void *
		or	edi, ecx
		call	sub_10008880
		mov	ecx, esi
		mov	dword ptr [ebx+70h], 0
		mov	eax, edi
		mov	dword ptr [ebx+74h], 0
		bswap	ecx
		bswap	eax
		push	ebx
		mov	[ebx+78h], eax
		mov	[ebx+7Ch], ecx
		call	sub_100072E0
		mov	ecx, [ebx+280h]
		lea	edx, [ebx+280h]
		mov	eax, [ebx+284h]
		add	esp, 10h
		bswap	ecx
		bswap	eax
		mov	[edx], eax
		mov	eax, [ebx+28Ch]
		mov	[ebx+284h], ecx
		mov	ecx, [ebx+288h]
		bswap	ecx
		bswap	eax
		mov	[ebx+288h], eax
		mov	eax, [ebx+294h]
		mov	[ebx+28Ch], ecx
		mov	ecx, [ebx+290h]
		bswap	ecx
		bswap	eax
		mov	[ebx+290h], eax
		mov	eax, [ebx+29Ch]
		mov	[ebx+294h], ecx
		mov	ecx, [ebx+298h]
		mov	esi, [esp+0Ch+arg_C]
		bswap	ecx
		mov	[ebx+29Ch], ecx
		mov	ecx, [ebx+2A0h]
		bswap	eax
		mov	[ebx+298h], eax
		mov	eax, [ebx+2A4h]
		bswap	ecx
		mov	[ebx+2A4h], ecx
		mov	ecx, [ebx+2A8h]
		bswap	eax
		mov	[ebx+2A0h], eax
		mov	eax, [ebx+2ACh]
		bswap	ecx
		mov	[ebx+2ACh], ecx
		mov	ecx, [ebx+2B0h]
		bswap	eax
		mov	[ebx+2A8h], eax
		mov	eax, [ebx+2B4h]
		bswap	ecx
		mov	[ebx+2B4h], ecx
		mov	ecx, [ebx+2B8h]
		bswap	eax
		mov	[ebx+2B0h], eax
		mov	eax, [ebx+2BCh]
		bswap	ecx
		mov	[ebx+2BCh], ecx
		bswap	eax
		mov	[ebx+2B8h], eax
		cmp	esi, 40h
		jbe	short loc_10008601
		mov	esi, 40h

loc_10008601:				; CODE XREF: sub_100084A0+15Aj
		push	esi		; size_t
		push	edx		; void *
		push	[esp+14h+arg_4]	; void *
		call	memcpy
		mov	eax, [esp+18h+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008619
		mov	[eax], esi

loc_10008619:				; CODE XREF: sub_100084A0+175j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100084A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008620(int,	void *,	int, size_t)
sub_10008620	proc near		; CODE XREF: sub_10007110+12j
					; DATA XREF: .rdata:1003ED6Co

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 40h
		push	esi
		mov	esi, [esp+44h+arg_0]
		mov	ecx, 10h
		push	edi
		add	esi, 280h
		lea	edi, [esp+48h+var_40]
		rep movsd
		mov	ecx, [esp+48h+var_40]
		mov	eax, [esp+48h+var_3C]
		bswap	ecx
		bswap	eax
		mov	[esp+48h+var_40], eax
		mov	eax, [esp+48h+var_34]
		mov	[esp+48h+var_3C], ecx
		mov	ecx, [esp+48h+var_38]
		bswap	ecx
		bswap	eax
		mov	[esp+48h+var_38], eax
		mov	eax, [esp+48h+var_2C]
		mov	[esp+48h+var_34], ecx
		mov	ecx, [esp+48h+var_30]
		bswap	ecx
		bswap	eax
		mov	[esp+48h+var_30], eax
		mov	eax, [esp+48h+var_24]
		mov	[esp+48h+var_2C], ecx
		mov	ecx, [esp+48h+var_28]
		mov	esi, [esp+48h+arg_C]
		bswap	ecx
		mov	[esp+48h+var_24], ecx
		mov	ecx, [esp+48h+var_20]
		bswap	eax
		mov	[esp+48h+var_28], eax
		mov	eax, [esp+48h+var_1C]
		bswap	ecx
		mov	[esp+48h+var_1C], ecx
		mov	ecx, [esp+48h+var_18]
		bswap	eax
		mov	[esp+48h+var_20], eax
		mov	eax, [esp+48h+var_14]
		bswap	ecx
		mov	[esp+48h+var_14], ecx
		mov	ecx, [esp+48h+var_10]
		bswap	eax
		mov	[esp+48h+var_18], eax
		mov	eax, [esp+48h+var_C]
		bswap	ecx
		mov	[esp+48h+var_C], ecx
		mov	ecx, [esp+48h+var_8]
		bswap	eax
		mov	[esp+48h+var_10], eax
		mov	eax, [esp+48h+var_4]
		bswap	ecx
		mov	[esp+48h+var_4], ecx
		bswap	eax
		mov	[esp+48h+var_8], eax
		cmp	esi, 40h
		jbe	short loc_100086E8
		mov	esi, 40h

loc_100086E8:				; CODE XREF: sub_10008620+C1j
		push	esi		; size_t
		lea	eax, [esp+4Ch+var_40]
		push	eax		; void *
		push	[esp+50h+arg_4]	; void *
		call	memcpy
		mov	eax, [esp+54h+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008704
		mov	[eax], esi

loc_10008704:				; CODE XREF: sub_10008620+E0j
		pop	edi
		pop	esi
		add	esp, 40h
		retn
sub_10008620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008710(int,	void *)
sub_10008710	proc near		; DATA XREF: .rdata:1003E398o

var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= byte ptr -2CCh
var_4C		= byte ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2D4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2D4h+var_4], eax
		mov	eax, [esp+2D4h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+2DCh+arg_4]
		mov	ebx, ebp
		push	esi
		push	edi
		mov	[esp+2E4h+var_2D4], eax
		lea	ecx, [ebx+1]
		nop

loc_10008740:				; CODE XREF: sub_10008710+35j
		mov	al, [ebx]
		inc	ebx
		test	al, al
		jnz	short loc_10008740
		push	2C8h		; size_t
		lea	eax, [esp+2E8h+var_2CC]
		sub	ebx, ecx
		push	0		; int
		push	eax		; void *
		call	memset
		push	ebx		; int
		lea	eax, [esp+2F4h+var_2CC]
		mov	ecx, 10h
		mov	esi, offset dword_1003EBD8
		lea	edi, [esp+2F4h+var_4C]
		push	ebp		; void *
		rep movsd
		push	eax		; void *
		call	sub_10008880
		push	40h		; size_t
		lea	eax, [esp+300h+var_2D0]
		push	eax		; int
		push	[esp+304h+var_2D4] ; void *
		lea	eax, [esp+308h+var_2CC]
		push	eax		; void *
		call	sub_100084A0
		mov	ecx, [esp+30Ch+var_4]
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2D4h
		retn
sub_10008710	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100087B0(void	*, void	*, int)
sub_100087B0	proc near		; DATA XREF: .rdata:1003E394o

var_2D0		= dword	ptr -2D0h
var_2CC		= byte ptr -2CCh
var_4C		= byte ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2D0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2D0h+var_4], eax
		push	ebx
		mov	ebx, [esp+2D4h+arg_4]
		lea	eax, [esp+2D4h+var_2CC]
		push	ebp
		mov	ebp, [esp+2D8h+arg_0]
		push	esi
		push	edi
		push	2C8h		; size_t
		push	0		; int
		push	eax		; void *
		call	memset
		push	[esp+2ECh+arg_8] ; int
		lea	eax, [esp+2F0h+var_2CC]
		mov	ecx, 10h
		mov	esi, offset dword_1003EBD8
		lea	edi, [esp+2F0h+var_4C]
		push	ebx		; void *
		rep movsd
		push	eax		; void *
		call	sub_10008880
		push	40h		; size_t
		lea	eax, [esp+2FCh+var_2D0]
		push	eax		; int
		lea	eax, [esp+300h+var_2CC]
		push	ebp		; void *
		push	eax		; void *
		call	sub_100084A0
		mov	ecx, [esp+308h+var_4]
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2D0h
		retn
sub_100087B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008840	proc near		; DATA XREF: .rdata:1003E3A8o
					; .rdata:1003E3D4o

arg_0		= dword	ptr  4

		push	2C8h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jz	short locret_10008862
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 0B2h
		push	edi
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi

locret_10008862:			; CODE XREF: sub_10008840+Fj
		retn
sub_10008840	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008880(void	*, void	*, int)
sub_10008880	proc near		; CODE XREF: sub_10007160+64p
					; sub_10007200+57p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_8]
		test	ebx, ebx
		jz	loc_10008940
		mov	edx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	eax, [edx+2C0h]
		mov	edi, eax
		add	eax, ebx
		and	edi, 7Fh
		mov	[edx+2C0h], eax
		cmp	eax, ebx
		jnb	short loc_100088B1
		inc	dword ptr [edx+2C4h]

loc_100088B1:				; CODE XREF: sub_10008880+29j
		test	edi, edi
		jz	loc_10008942
		mov	esi, 80h
		sub	esi, edi
		cmp	ebx, esi
		jnb	short loc_100088C6
		mov	esi, ebx

loc_100088C6:				; CODE XREF: sub_10008880+42j
		mov	ebp, [esp+10h+arg_4]
		lea	eax, [edi+edx]
		push	esi		; size_t
		push	ebp		; void *
		push	eax		; void *
		call	memcpy
		lea	eax, [esi+edi]
		add	esp, 0Ch
		add	ebp, esi
		sub	ebx, esi
		cmp	eax, 80h
		jnz	short loc_100088F2
		push	[esp+10h+arg_0]
		call	sub_100072E0
		add	esp, 4

loc_100088F2:				; CODE XREF: sub_10008880+64j
		mov	edx, [esp+10h+arg_0]

loc_100088F6:				; CODE XREF: sub_10008880+C6j
		cmp	ebx, 80h
		jb	short loc_1000892B
		mov	eax, ebx
		shr	eax, 7
		mov	[esp+10h+arg_8], eax

loc_10008907:				; CODE XREF: sub_10008880+A9j
		mov	esi, ebp
		mov	edi, edx
		mov	ecx, 20h
		sub	ebp, 0FFFFFF80h
		rep movsd
		push	edx
		add	ebx, 0FFFFFF80h
		call	sub_100072E0
		mov	edx, [esp+14h+arg_0]
		add	esp, 4
		dec	[esp+10h+arg_8]
		jnz	short loc_10008907

loc_1000892B:				; CODE XREF: sub_10008880+7Cj
		test	ebx, ebx
		jz	short loc_1000893D
		push	ebx		; size_t
		push	ebp		; void *
		push	[esp+18h+arg_0]	; void *
		call	memcpy
		add	esp, 0Ch

loc_1000893D:				; CODE XREF: sub_10008880+ADj
		pop	edi
		pop	esi
		pop	ebp

loc_10008940:				; CODE XREF: sub_10008880+7j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10008942:				; CODE XREF: sub_10008880+33j
		mov	ebp, [esp+10h+arg_4]
		jmp	short loc_100088F6
sub_10008880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008950	proc near		; CODE XREF: sub_10021BD0+B1p
					; sub_10021BD0+F4p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+4]
		push	dword ptr [esi]
		mov	eax, [eax+10h]
		call	eax
		mov	ecx, [esi+4]
		lea	eax, [esi+0Ch]
		push	dword ptr [ecx+1Ch]
		push	eax
		push	dword ptr [esi]
		mov	eax, [ecx+14h]
		call	eax
		add	esp, 10h
		pop	esi
		retn
sub_10008950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008980	proc near		; DATA XREF: .rdata:1003E464o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		push	10Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_100089C2
		mov	edi, [esp+8+arg_0]
		mov	dword ptr [esi+8], 1
		mov	ecx, [edi+4]
		mov	[esi+4], ecx
		mov	eax, [edi+4]
		push	dword ptr [edi]
		mov	eax, [eax+8]
		call	eax
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_100089C7
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_100089C2:				; CODE XREF: sub_10008980+13j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100089C7:				; CODE XREF: sub_10008980+37j
		mov	eax, [edi+4]
		push	dword ptr [eax+1Ch] ; size_t
		lea	eax, [edi+0Ch]
		push	eax		; void *
		lea	eax, [esi+0Ch]
		push	eax		; void *
		call	memcpy
		mov	eax, [edi+4]
		push	dword ptr [eax+1Ch] ; size_t
		lea	eax, [edi+8Ch]
		push	eax		; void *
		lea	eax, [esi+8Ch]
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10008980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008A00	proc near		; CODE XREF: sub_10021BD0+9Ep
					; DATA XREF: .rdata:1003E454o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	10Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10008A16
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008A16:				; CODE XREF: sub_10008A00+12j
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		push	esi
		call	sub_10008B20
		add	esp, 14h
		mov	dword ptr [esi+8], 1
		test	eax, eax
		jz	short loc_10008A45
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		xor	esi, esi

loc_10008A45:				; CODE XREF: sub_10008A00+38j
		mov	eax, esi
		pop	esi
		retn
sub_10008A00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008A50(void	*, int)
sub_10008A50	proc near		; CODE XREF: sub_10021BD0+1ABp
					; DATA XREF: .rdata:1003E46Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10008A8A
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_10008A7A
		mov	eax, [esi+4]
		push	1
		push	ecx
		mov	eax, [eax+0Ch]
		call	eax
		push	10Ch		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		add	esp, 14h

loc_10008A7A:				; CODE XREF: sub_10008A50+Dj
		cmp	[esp+4+arg_4], 0
		jz	short loc_10008A8A
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10008A8A:				; CODE XREF: sub_10008A50+7j
					; sub_10008A50+2Fj
		pop	esi
		retn
sub_10008A50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008A90	proc near		; CODE XREF: sub_10021BD0+DBp
					; sub_10021BD0+13Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_C]
		mov	eax, [esi+4]
		cmp	edi, [eax]
		jnb	short loc_10008AB4
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008AB4:				; CODE XREF: sub_10008A90+Fj
		mov	eax, [eax+18h]
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		push	edi
		push	ebx
		push	ebp
		push	dword ptr [esi]
		call	eax
		mov	ecx, [esi+4]
		add	esp, 10h
		mov	eax, [ebx]
		cmp	eax, [ecx]
		jz	short loc_10008ADC
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008ADC:				; CODE XREF: sub_10008A90+42j
		push	dword ptr [esi]
		mov	eax, [ecx+10h]
		call	eax
		mov	ecx, [esi+4]
		lea	eax, [esi+8Ch]
		push	dword ptr [ecx+1Ch]
		push	eax
		push	dword ptr [esi]
		mov	eax, [ecx+14h]
		call	eax
		push	dword ptr [ebx]
		mov	eax, [esi+4]
		push	ebp
		push	dword ptr [esi]
		mov	eax, [eax+14h]
		call	eax
		mov	eax, [esi+4]
		push	edi
		push	ebx
		push	ebp
		push	dword ptr [esi]
		mov	eax, [eax+18h]
		call	eax
		add	esp, 2Ch
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
sub_10008A90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008B20	proc near		; CODE XREF: sub_10008A00+27p
					; DATA XREF: .rdata:1003E458o

var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 44h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+44h+var_4], eax
		cmp	[esp+44h+arg_10], 0
		mov	ecx, [esp+44h+arg_4]
		push	ebx
		mov	ebx, [esp+48h+arg_0]
		push	edi
		mov	edi, [esp+4Ch+arg_8]
		jz	short loc_10008B6E
		mov	eax, [ecx]
		shr	eax, 1
		cmp	[esp+4Ch+arg_C], eax
		jnb	short loc_10008B6E

loc_10008B4D:				; CODE XREF: sub_10008B20+50j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10008B6E:				; CODE XREF: sub_10008B20+21j
					; sub_10008B20+2Bj
		test	ebx, ebx
		jz	short loc_10008B4D
		mov	dword ptr [ebx+8], 0
		mov	[ebx+4], ecx
		mov	eax, [ecx+4]
		push	ebp
		call	eax
		mov	[ebx], eax
		test	eax, eax
		jz	short loc_10008BDE
		mov	ecx, [ebx+4]
		mov	ebp, [esp+50h+arg_C]
		cmp	ebp, [ecx+1Ch]
		jbe	loc_10008C1C
		push	eax
		mov	eax, [ecx+10h]
		call	eax
		push	[esp+54h+arg_C]
		mov	eax, [ebx+4]
		push	edi
		push	dword ptr [ebx]
		mov	eax, [eax+14h]
		call	eax
		mov	eax, [ebx+4]
		lea	ecx, [esp+60h+arg_C]
		push	40h
		push	ecx
		lea	ecx, [esp+68h+var_44]
		mov	eax, [eax+18h]
		push	ecx
		push	dword ptr [ebx]
		call	eax
		mov	ecx, [ebx+4]
		add	esp, 20h
		mov	ebp, [esp+50h+arg_C]
		cmp	ebp, [ecx]
		jz	short loc_10008C18
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4

loc_10008BDE:				; CODE XREF: sub_10008B20+66j
		push	40h		; size_t
		lea	eax, [esp+54h+var_44]
		push	0		; int
		push	eax		; void *
		call	memset
		mov	ecx, [ebx]
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_10008C03
		mov	eax, [ebx+4]
		push	1
		push	ecx
		mov	eax, [eax+0Ch]
		call	eax
		add	esp, 8

loc_10008C03:				; CODE XREF: sub_10008B20+D3j
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10008C18:				; CODE XREF: sub_10008B20+AFj
		lea	edi, [esp+50h+var_44]

loc_10008C1C:				; CODE XREF: sub_10008B20+72j
		push	esi
		push	dword ptr [ecx+1Ch] ; size_t
		lea	eax, [ebx+0Ch]
		push	36h		; int
		push	eax		; void *
		call	memset
		mov	eax, [ebx+4]
		lea	esi, [ebx+8Ch]
		push	dword ptr [eax+1Ch] ; size_t
		push	5Ch		; int
		push	esi		; void *
		call	memset
		add	esp, 18h
		test	ebp, ebp
		jz	short loc_10008C5C

loc_10008C46:				; CODE XREF: sub_10008B20+13Aj
		movzx	eax, byte ptr [edi]
		lea	edi, [edi+1]
		xor	[esi-80h], al
		lea	esi, [esi+1]
		movzx	eax, byte ptr [edi-1]
		xor	[esi-1], al
		dec	ebp
		jnz	short loc_10008C46

loc_10008C5C:				; CODE XREF: sub_10008B20+124j
		mov	ecx, [esp+54h+var_4]
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
sub_10008B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008C80	proc near		; CODE XREF: sub_10021BD0+B9p
					; sub_10021BD0+C9p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	[esp+arg_8]
		push	[esp+4+arg_4]
		mov	ecx, [eax+4]
		push	dword ptr [eax]
		mov	eax, [ecx+14h]
		call	eax
		add	esp, 0Ch
		retn
sub_10008C80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008CA0	proc near		; DATA XREF: .rdata:1003EC5Co
					; .rdata:1003EC60o ...
		xor	eax, eax
		retn
sub_10008CA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008CB0	proc near		; DATA XREF: .rdata:1003EC70o
					; .rdata:1003EC7Co

arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], 0
		retn
sub_10008CB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008CC0	proc near		; CODE XREF: sub_10019050+6p
					; sub_100190C0+4p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 7
		ja	short loc_10008CD4
		lea	eax, [eax+eax*4]
		lea	eax, dword_1003EC58[eax*8]
		retn
; ---------------------------------------------------------------------------

loc_10008CD4:				; CODE XREF: sub_10008CC0+7j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
sub_10008CC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008CF0	proc near		; DATA XREF: .rdata:1003E42Co
		push	90h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_10008CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008D00(void	*, size_t, int,	int, int)
sub_10008D00	proc near		; DATA XREF: .rdata:1003E270o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	90h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10008D53
		push	0
		push	[esp+8+arg_10]	; int
		push	[esp+0Ch+arg_C]	; int
		push	[esp+10h+arg_8]	; int
		push	[esp+14h+arg_4]	; size_t
		push	[esp+18h+arg_0]	; void *
		push	esi		; void *
		call	sub_10008E50
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_10008D51
		push	90h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		push	esi
		call	PORT_Free_Util
		add	esp, 10h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008D51:				; CODE XREF: sub_10008D00+35j
		mov	eax, esi

loc_10008D53:				; CODE XREF: sub_10008D00+12j
		pop	esi
		retn
sub_10008D00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008D60	proc near		; DATA XREF: .rdata:1003E27Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_14]
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_10008DB7
		test	bl, 7
		jz	short loc_10008D82
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10008D82:				; CODE XREF: sub_10008D60+Ej
		cmp	[esp+4+arg_C], ebx
		jnb	short loc_10008D9A
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10008D9A:				; CODE XREF: sub_10008D60+26j
		mov	eax, [esp+4+arg_0]
		push	ebx
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_4]
		push	eax
		mov	eax, [eax+8Ch]
		call	eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10008DBD

loc_10008DB7:				; CODE XREF: sub_10008D60+9j
		mov	ecx, [esp+4+arg_8]
		mov	[ecx], ebx

loc_10008DBD:				; CODE XREF: sub_10008D60+55j
		pop	ebx
		retn
sub_10008D60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008DC0(void	*, int)
sub_10008DC0	proc near		; DATA XREF: .rdata:1003E274o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10008DE9
		push	90h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_10008DE9
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10008DE9:				; CODE XREF: sub_10008DC0+7j
					; sub_10008DC0+1Ej
		pop	esi
		retn
sub_10008DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008DF0	proc near		; DATA XREF: .rdata:1003E278o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_14]
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_10008E47
		test	bl, 7
		jz	short loc_10008E12
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10008E12:				; CODE XREF: sub_10008DF0+Ej
		cmp	[esp+4+arg_C], ebx
		jnb	short loc_10008E2A
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10008E2A:				; CODE XREF: sub_10008DF0+26j
		mov	eax, [esp+4+arg_0]
		push	ebx
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_4]
		push	eax
		mov	eax, [eax+88h]
		call	eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10008E4D

loc_10008E47:				; CODE XREF: sub_10008DF0+9j
		mov	ecx, [esp+4+arg_8]
		mov	[ecx], ebx

loc_10008E4D:				; CODE XREF: sub_10008DF0+55j
		pop	ebx
		retn
sub_10008DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008E50(void	*, void	*, size_t, int,	int, int)
sub_10008E50	proc near		; CODE XREF: sub_10008D00+2Bp
					; DATA XREF: .rdata:1003E418o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	edx, [esp+arg_4]
		push	ebp
		push	esi
		push	edi
		test	edx, edx
		jz	loc_10008F7F
		mov	esi, [esp+0Ch+arg_0]
		test	esi, esi
		jz	loc_10008F7F
		mov	edi, [esp+0Ch+arg_8]
		test	edi, edi
		jz	loc_10008F7F
		cmp	edi, 80h
		ja	loc_10008F7F
		mov	ebp, [esp+0Ch+arg_14]
		cmp	ebp, 80h
		ja	loc_10008F7F
		mov	eax, [esp+0Ch+arg_10]
		test	eax, eax
		jz	short loc_10008EF1
		cmp	eax, 1
		jnz	loc_10008F7F
		mov	ecx, [esp+0Ch+arg_C]
		test	ecx, ecx
		jz	loc_10008F7F
		mov	dword ptr [esi+88h], offset sub_1000A380
		mov	dword ptr [esi+8Ch], offset sub_10009920
		movzx	eax, word ptr [ecx]
		mov	[esi+80h], ax
		movzx	eax, word ptr [ecx+2]
		mov	[esi+82h], ax
		movzx	eax, word ptr [ecx+4]
		mov	[esi+84h], ax
		movzx	eax, word ptr [ecx+6]
		mov	[esi+86h], ax
		jmp	short loc_10008F05
; ---------------------------------------------------------------------------

loc_10008EF1:				; CODE XREF: sub_10008E50+49j
		mov	dword ptr [esi+88h], offset sub_1000A450
		mov	dword ptr [esi+8Ch], offset sub_100099F0

loc_10008F05:				; CODE XREF: sub_10008E50+9Fj
		push	ebx
		push	edi		; size_t
		push	edx		; void *
		push	esi		; void *
		call	memcpy
		mov	bl, [esi+edi-1]
		mov	edx, 80h
		sub	edx, edi
		add	esp, 0Ch
		mov	ecx, esi
		test	edx, edx
		jle	short loc_10008F3B

loc_10008F22:				; CODE XREF: sub_10008E50+E9j
		mov	al, [ecx]
		lea	ecx, [ecx+1]
		add	al, bl
		dec	edx
		movzx	eax, al
		mov	bl, ds:byte_1003ED98[eax]
		mov	[ecx+edi-1], bl
		test	edx, edx
		jg	short loc_10008F22

loc_10008F3B:				; CODE XREF: sub_10008E50+D0j
		mov	edx, esi
		sub	edx, ebp
		pop	ebx
		movzx	eax, byte ptr [edx+80h]
		mov	al, ds:byte_1003ED98[eax]
		mov	[edx+80h], al
		sub	edx, 0FFFFFF81h
		lea	edi, [edx+ebp]
		cmp	edx, esi
		jb	short loc_10008F79
		lea	ecx, [ecx+0]

loc_10008F60:				; CODE XREF: sub_10008E50+127j
		movzx	ecx, al
		lea	edi, [edi-1]
		movzx	eax, byte ptr [edi+1]
		xor	ecx, eax
		mov	al, ds:byte_1003ED98[ecx]
		mov	[edx], al
		dec	edx
		cmp	edx, esi
		jnb	short loc_10008F60

loc_10008F79:				; CODE XREF: sub_10008E50+10Bj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10008F7F:				; CODE XREF: sub_10008E50+9j
					; sub_10008E50+15j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10008E50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008FA0	proc near		; CODE XREF: sub_10009920+61p
					; sub_100099F0+5Dp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	eax, [esp+10h+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		movzx	ecx, word ptr [eax+4]
		movzx	edx, word ptr [eax+6]
		mov	[esp+18h+var_C], ecx
		push	esi
		movzx	esi, word ptr [eax+2]
		push	edi
		movzx	edi, word ptr [eax]
		mov	eax, ecx
		and	ecx, esi
		ror	dx, 5
		not	eax
		mov	[esp+20h+var_10], esi
		and	eax, edi
		mov	[esp+20h+var_8], edi
		sub	dx, ax
		mov	eax, esi
		sub	dx, cx
		not	eax
		sub	dx, [ebp+7Eh]
		and	esi, edi
		movzx	ecx, word ptr [esp+20h+var_C]
		ror	cx, 3
		movzx	edx, dx
		and	eax, edx
		mov	[esp+20h+var_4], edx
		sub	cx, ax
		mov	eax, edi
		sub	cx, si
		not	eax
		sub	cx, [ebp+7Ch]
		movzx	esi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, esi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], esi
		mov	eax, edx
		and	eax, edi
		sub	cx, ax
		mov	eax, edx
		sub	cx, [ebp+7Ah]
		not	eax
		movzx	edi, cx
		and	edx, esi
		movzx	ecx, word ptr [esp+20h+var_8]
		and	eax, edi
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], edi
		sub	cx, dx
		mov	eax, esi
		sub	cx, [ebp+78h]
		not	eax
		movzx	edx, cx
		and	esi, edi
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		sub	cx, si
		mov	eax, edi
		sub	cx, [ebp+76h]
		not	eax
		movzx	esi, cx
		and	edi, edx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, esi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], esi
		sub	cx, di
		sub	cx, [ebp+74h]
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		mov	[esp+20h+var_C], edi
		ror	cx, 2
		mov	eax, edx
		not	eax
		and	eax, edi
		sub	cx, ax
		mov	eax, esi
		and	eax, edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, [ebp+72h]
		not	eax
		movzx	ebx, cx
		and	esi, edi
		and	eax, ebx
		movzx	ecx, dx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, si
		mov	eax, edi
		sub	cx, [ebp+70h]
		not	eax
		movzx	edx, cx
		and	edi, ebx
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		sub	cx, di
		mov	eax, ebx
		sub	cx, [ebp+6Eh]
		not	eax
		movzx	esi, cx
		and	ebx, edx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, esi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], esi
		sub	cx, bx
		mov	eax, edx
		sub	cx, [ebp+6Ch]
		not	eax
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, edi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], edi
		mov	eax, esi
		and	eax, edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, [ebp+6Ah]
		not	eax
		movzx	ebx, cx
		and	esi, edi
		and	eax, ebx
		movzx	ecx, dx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, si
		mov	eax, edi
		sub	cx, [ebp+68h]
		not	eax
		movzx	edx, cx
		and	edi, ebx
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		sub	cx, di
		mov	eax, ebx
		sub	cx, [ebp+66h]
		not	eax
		movzx	esi, cx
		movzx	ecx, word ptr [esp+20h+var_C]
		mov	[esp+20h+var_4], esi
		ror	cx, 3
		and	eax, esi
		and	ebx, edx
		sub	cx, ax
		mov	eax, edx
		sub	cx, bx
		not	eax
		sub	cx, [ebp+64h]
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, edi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], edi
		mov	eax, esi
		and	eax, edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, [ebp+62h]
		not	eax
		movzx	ebx, cx
		and	esi, edi
		and	eax, ebx
		movzx	ecx, dx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, si
		mov	eax, edi
		sub	cx, [ebp+60h]
		not	eax
		movzx	edx, cx
		and	edi, ebx
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		sub	cx, di
		mov	eax, ebx
		sub	cx, [ebp+5Eh]
		not	eax
		movzx	edi, cx
		and	ebx, edx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, edi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], edi
		sub	cx, bx
		mov	eax, edx
		sub	cx, [ebp+5Ch]
		not	eax
		movzx	esi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, esi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], esi
		mov	bx, word ptr [esp+20h+var_C]
		mov	eax, edi
		and	eax, edx
		sub	cx, ax
		mov	eax, edi
		sub	cx, [ebp+5Ah]
		not	eax
		movzx	edx, cx
		and	edi, esi
		movzx	ecx, word ptr [esp+20h+var_8]
		and	eax, edx
		ror	cx, 1
		and	esi, 3Fh
		sub	cx, ax
		mov	[esp+20h+var_10], edx
		sub	cx, di
		mov	di, word ptr [esp+20h+var_4]
		sub	cx, [ebp+58h]
		sub	di, [ebp+esi*2+0]
		and	edx, 3Fh
		movzx	eax, cx
		mov	[esp+20h+var_8], eax
		mov	word ptr [esp+20h+var_4], di
		sub	bx, [ebp+edx*2+0]
		and	eax, 3Fh
		mov	edx, [esp+20h+arg_0]
		mov	bp, word ptr [esp+20h+var_10]
		mov	cx, word ptr [esp+20h+var_8]
		mov	word ptr [esp+20h+var_C], bx
		sub	bp, [edx+eax*2]
		mov	eax, [esp+20h+var_4]
		and	eax, 3Fh
		ror	di, 5
		mov	word ptr [esp+20h+var_10], bp
		ror	bx, 3
		ror	bp, 2
		sub	cx, [edx+eax*2]
		mov	edx, [esp+20h+var_10]
		mov	word ptr [esp+20h+var_8], cx
		mov	esi, [esp+20h+var_8]
		mov	word ptr [esp+20h+arg_8], cx
		mov	ecx, [esp+20h+var_C]
		mov	eax, ecx
		not	eax
		and	ecx, edx
		and	eax, esi
		sub	di, ax
		mov	eax, [esp+20h+arg_0]
		sub	di, cx
		sub	di, [eax+56h]
		mov	eax, edx
		not	eax
		movzx	ecx, di
		and	eax, ecx
		mov	[esp+20h+var_4], ecx
		sub	bx, ax
		and	edx, esi
		sub	bx, dx
		mov	eax, esi
		mov	edx, [esp+20h+arg_0]
		not	eax
		sub	bx, [edx+54h]
		movzx	edi, bx
		and	eax, edi
		mov	[esp+20h+var_C], edi
		sub	bp, ax
		mov	eax, ecx
		and	eax, esi
		sub	bp, ax
		mov	eax, ecx
		sub	bp, [edx+52h]
		and	ecx, edi
		mov	dx, word ptr [esp+20h+arg_8]
		not	eax
		movzx	esi, bp
		mov	ebp, [esp+20h+arg_0]
		and	eax, esi
		ror	dx, 1
		sub	dx, ax
		mov	[esp+20h+var_10], esi
		sub	dx, cx
		mov	eax, edi
		sub	dx, [ebp+50h]
		not	eax
		movzx	ecx, word ptr [esp+20h+var_4]
		and	edi, esi
		ror	cx, 5
		movzx	edx, dx
		and	eax, edx
		mov	[esp+20h+var_8], edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, di
		not	eax
		sub	cx, [ebp+4Eh]
		and	esi, edx
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, edi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], edi
		sub	cx, si
		sub	cx, [ebp+4Ch]
		movzx	esi, cx
		mov	eax, edx
		movzx	ecx, word ptr [esp+20h+var_10]
		not	eax
		ror	cx, 2
		and	eax, esi
		sub	cx, ax
		mov	[esp+20h+var_C], esi
		mov	eax, edi
		and	eax, edx
		sub	cx, ax
		mov	eax, edi
		sub	cx, [ebp+4Ah]
		not	eax
		movzx	ebx, cx
		and	edi, esi
		and	eax, ebx
		movzx	ecx, dx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, di
		mov	eax, esi
		sub	cx, [ebp+48h]
		not	eax
		movzx	edx, cx
		and	esi, ebx
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		sub	cx, si
		mov	eax, ebx
		sub	cx, [ebp+46h]
		not	eax
		movzx	esi, cx
		and	ebx, edx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, esi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], esi
		sub	cx, bx
		mov	eax, edx
		sub	cx, [ebp+44h]
		not	eax
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, edi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], edi
		mov	eax, esi
		and	eax, edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, [ebp+42h]
		not	eax
		movzx	ebx, cx
		and	esi, edi
		movzx	ecx, dx
		and	eax, ebx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, si
		mov	eax, edi
		sub	cx, [ebp+40h]
		not	eax
		movzx	edx, cx
		and	edi, ebx
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		sub	cx, di
		sub	cx, [ebp+3Eh]
		movzx	esi, cx
		mov	[esp+20h+var_4], esi
		movzx	ecx, word ptr [esp+20h+var_C]
		mov	eax, ebx
		ror	cx, 3
		not	eax
		and	eax, esi
		and	ebx, edx
		sub	cx, ax
		mov	eax, edx
		sub	cx, bx
		not	eax
		sub	cx, [ebp+3Ch]
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, edi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], edi
		mov	eax, esi
		and	eax, edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, [ebp+3Ah]
		not	eax
		movzx	ebx, cx
		and	esi, edi
		and	eax, ebx
		movzx	ecx, dx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, si
		mov	eax, edi
		sub	cx, [ebp+38h]
		not	eax
		movzx	edx, cx
		and	edi, ebx
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		sub	cx, di
		mov	eax, ebx
		sub	cx, [ebp+36h]
		not	eax
		movzx	esi, cx
		and	ebx, edx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, esi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], esi
		sub	cx, bx
		mov	eax, edx
		sub	cx, [ebp+34h]
		not	eax
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, edi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], edi
		mov	eax, esi
		and	eax, edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, [ebp+32h]
		not	eax
		movzx	ebx, cx
		and	esi, edi
		movzx	ecx, dx
		and	eax, ebx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, si
		sub	cx, [ebp+30h]
		movzx	edx, cx
		movzx	ecx, word ptr [esp+20h+var_4]
		mov	[esp+20h+var_8], edx
		ror	cx, 5
		mov	eax, edi
		and	edi, ebx
		not	eax
		and	eax, edx
		sub	cx, ax
		mov	eax, ebx
		sub	cx, di
		not	eax
		sub	cx, [ebp+2Eh]
		and	ebx, edx
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, edi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], edi
		sub	cx, bx
		mov	eax, edx
		sub	cx, [ebp+2Ch]
		not	eax
		movzx	esi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, esi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], esi
		mov	bx, word ptr [esp+20h+var_C]
		mov	eax, edi
		and	eax, edx
		sub	cx, ax
		mov	eax, edi
		sub	cx, [ebp+2Ah]
		not	eax
		movzx	edx, cx
		and	edi, esi
		movzx	ecx, word ptr [esp+20h+var_8]
		and	eax, edx
		ror	cx, 1
		and	esi, 3Fh
		sub	cx, ax
		mov	[esp+20h+var_10], edx
		sub	cx, di
		and	edx, 3Fh
		sub	cx, [ebp+28h]
		mov	di, word ptr [esp+20h+var_4]
		sub	di, [ebp+esi*2+0]
		sub	bx, [ebp+edx*2+0]
		mov	edx, [esp+20h+arg_0]
		mov	bp, word ptr [esp+20h+var_10]
		movzx	eax, cx
		mov	[esp+20h+var_8], eax
		and	eax, 3Fh
		mov	cx, word ptr [esp+20h+var_8]
		mov	word ptr [esp+20h+var_4], di
		mov	word ptr [esp+20h+var_C], bx
		sub	bp, [edx+eax*2]
		mov	eax, [esp+20h+var_4]
		and	eax, 3Fh
		ror	di, 5
		mov	word ptr [esp+20h+var_10], bp
		ror	bx, 3
		sub	cx, [edx+eax*2]
		mov	edx, [esp+20h+var_10]
		mov	word ptr [esp+20h+var_8], cx
		mov	esi, [esp+20h+var_8]
		mov	word ptr [esp+20h+arg_8], cx
		mov	ecx, [esp+20h+var_C]
		mov	eax, ecx
		not	eax
		and	ecx, edx
		and	eax, esi
		sub	di, ax
		mov	eax, [esp+20h+arg_0]
		sub	di, cx
		sub	di, [eax+26h]
		mov	eax, edx
		movzx	ecx, di
		not	eax
		and	eax, ecx
		mov	[esp+20h+var_4], ecx
		sub	bx, ax
		and	edx, esi
		ror	bp, 2
		sub	bx, dx
		mov	eax, esi
		mov	edx, [esp+20h+arg_0]
		not	eax
		sub	bx, [edx+24h]
		movzx	edi, bx
		and	eax, edi
		mov	[esp+20h+var_C], edi
		sub	bp, ax
		mov	eax, ecx
		and	eax, esi
		sub	bp, ax
		mov	eax, ecx
		sub	bp, [edx+22h]
		and	ecx, edi
		mov	dx, word ptr [esp+20h+arg_8]
		not	eax
		movzx	esi, bp
		mov	ebp, [esp+20h+arg_0]
		and	eax, esi
		ror	dx, 1
		sub	dx, ax
		mov	[esp+20h+var_10], esi
		sub	dx, cx
		mov	eax, edi
		sub	dx, [ebp+20h]
		not	eax
		movzx	ecx, word ptr [esp+20h+var_4]
		and	edi, esi
		ror	cx, 5
		movzx	edx, dx
		and	eax, edx
		mov	[esp+20h+var_8], edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, di
		not	eax
		sub	cx, [ebp+1Eh]
		and	esi, edx
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, edi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], edi
		sub	cx, si
		mov	eax, edx
		sub	cx, [ebp+1Ch]
		not	eax
		movzx	esi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, esi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], esi
		mov	eax, edi
		and	eax, edx
		sub	cx, ax
		mov	eax, edi
		sub	cx, [ebp+1Ah]
		not	eax
		movzx	ebx, cx
		and	edi, esi
		movzx	ecx, dx
		and	eax, ebx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, di
		mov	eax, esi
		sub	cx, [ebp+18h]
		not	eax
		movzx	edx, cx
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		and	esi, ebx
		sub	cx, si
		mov	eax, ebx
		sub	cx, [ebp+16h]
		not	eax
		movzx	esi, cx
		and	ebx, edx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, esi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], esi
		sub	cx, bx
		mov	eax, edx
		sub	cx, [ebp+14h]
		not	eax
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, edi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], edi
		mov	eax, esi
		and	eax, edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, [ebp+12h]
		not	eax
		movzx	ebx, cx
		and	esi, edi
		and	eax, ebx
		movzx	ecx, dx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, si
		mov	eax, edi
		sub	cx, [ebp+10h]
		not	eax
		movzx	edx, cx
		and	edi, ebx
		movzx	ecx, word ptr [esp+20h+var_4]
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		sub	cx, di
		mov	eax, ebx
		sub	cx, [ebp+0Eh]
		not	eax
		movzx	esi, cx
		and	ebx, edx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, esi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], esi
		sub	cx, bx
		mov	eax, edx
		sub	cx, [ebp+0Ch]
		not	eax
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, edi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], edi
		mov	eax, esi
		and	eax, edx
		sub	cx, ax
		mov	eax, esi
		sub	cx, [ebp+0Ah]
		not	eax
		movzx	ebx, cx
		and	esi, edi
		movzx	ecx, dx
		and	eax, ebx
		ror	cx, 1
		sub	cx, ax
		mov	[esp+20h+var_10], ebx
		sub	cx, si
		sub	cx, [ebp+8]
		movzx	edx, cx
		mov	eax, edi
		movzx	ecx, word ptr [esp+20h+var_4]
		not	eax
		and	eax, edx
		ror	cx, 5
		sub	cx, ax
		mov	[esp+20h+var_8], edx
		and	edi, ebx
		mov	eax, ebx
		sub	cx, di
		not	eax
		sub	cx, [ebp+6]
		and	ebx, edx
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_C]
		and	eax, edi
		ror	cx, 3
		sub	cx, ax
		mov	[esp+20h+var_4], edi
		sub	cx, bx
		mov	eax, edx
		sub	cx, [ebp+4]
		not	eax
		movzx	esi, cx
		movzx	ecx, word ptr [esp+20h+var_10]
		and	eax, esi
		ror	cx, 2
		sub	cx, ax
		mov	[esp+20h+var_C], esi
		mov	eax, edi
		and	eax, edx
		movzx	edx, dx
		sub	cx, ax
		ror	dx, 1
		sub	cx, [ebp+2]
		mov	eax, edi
		not	eax
		movzx	ecx, cx
		and	eax, ecx
		mov	[esp+20h+var_10], ecx
		mov	ecx, [esp+20h+arg_4]
		sub	dx, ax
		movzx	eax, word ptr [esp+20h+var_10]
		and	edi, esi
		sub	dx, di
		sub	dx, [ebp+0]
		pop	edi
		mov	[ecx+2], ax
		movzx	eax, si
		pop	esi
		mov	[ecx+4], ax
		movzx	eax, word ptr [esp+18h+var_4]
		pop	ebp
		mov	[ecx], dx
		mov	[ecx+6], ax
		pop	ebx
		add	esp, 10h
		retn
sub_10008FA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009920	proc near		; DATA XREF: sub_10008E50+6Ao

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	ebp
		mov	ebp, [esp+14h+arg_C]
		test	ebp, ebp
		jz	loc_100099E3
		mov	ecx, [esp+14h+arg_8]
		dec	ebp
		mov	eax, [esp+14h+arg_4]
		push	ebx
		push	esi
		lea	ebx, [ecx+4]
		shr	ebp, 3
		sub	ecx, eax
		lea	esi, [eax+4]
		push	edi
		mov	edi, [esp+20h+arg_0]
		inc	ebp
		lea	eax, [ecx-4]
		mov	[esp+20h+arg_C], eax

loc_10009953:				; CODE XREF: sub_10009920+BAj
		movzx	eax, word ptr [eax+esi]
		mov	word ptr [esp+20h+var_10], ax
		movzx	eax, word ptr [ebx-2]
		mov	word ptr [esp+20h+var_10+2], ax
		movzx	eax, word ptr [ebx]
		mov	word ptr [esp+20h+var_C], ax
		movzx	eax, word ptr [ebx+2]
		mov	word ptr [esp+20h+var_C+2], ax
		lea	eax, [esp+20h+var_10]
		push	eax
		lea	eax, [esp+24h+var_8]
		push	eax
		push	edi
		call	sub_10008FA0
		mov	ecx, [esp+2Ch+var_8]
		lea	ebx, [ebx+8]
		xor	ecx, [edi+80h]
		lea	esi, [esi+8]
		mov	edx, [esp+2Ch+var_4]
		add	esp, 0Ch
		xor	edx, [edi+84h]
		mov	eax, [esp+20h+var_10]
		mov	[edi+80h], eax
		mov	eax, [esp+20h+var_C]
		mov	[edi+84h], eax
		mov	eax, [esp+20h+arg_C]
		mov	[esi-0Ch], cx
		mov	[esi-8], dx
		mov	[esp+20h+var_8], ecx
		mov	[esp+20h+var_4], edx
		shr	ecx, 10h
		shr	edx, 10h
		mov	[esi-0Ah], cx
		mov	[esi-6], dx
		dec	ebp
		jnz	loc_10009953
		pop	edi
		pop	esi
		pop	ebx

loc_100099E3:				; CODE XREF: sub_10009920+Aj
		xor	eax, eax
		pop	ebp
		add	esp, 10h
		retn
sub_10009920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100099F0	proc near		; DATA XREF: sub_10008E50+ABo

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		test	ebx, ebx
		jz	loc_10009A85
		mov	ecx, [esp+0Ch+arg_8]
		dec	ebx
		mov	eax, [esp+0Ch+arg_4]
		push	ebp
		push	esi
		push	edi
		lea	edi, [ecx+4]
		shr	ebx, 3
		sub	ecx, eax
		lea	esi, [eax+4]
		inc	ebx
		lea	ebp, [ecx-4]
		jmp	short loc_10009A20
; ---------------------------------------------------------------------------
		align 10h

loc_10009A20:				; CODE XREF: sub_100099F0+2Bj
					; sub_100099F0+90j
		movzx	eax, word ptr [esi+ebp]
		mov	[esp+18h+var_8], ax
		movzx	eax, word ptr [edi-2]
		mov	[esp+18h+var_6], ax
		movzx	eax, word ptr [edi]
		mov	[esp+18h+var_4], ax
		movzx	eax, word ptr [edi+2]
		mov	[esp+18h+var_2], ax
		lea	eax, [esp+18h+var_8]
		push	eax
		push	eax
		push	[esp+20h+arg_0]
		call	sub_10008FA0
		movzx	eax, [esp+24h+var_8]
		lea	edi, [edi+8]
		mov	[esi-4], ax
		lea	esi, [esi+8]
		movzx	eax, [esp+24h+var_6]
		add	esp, 0Ch
		mov	[esi-0Ah], ax
		movzx	eax, [esp+18h+var_4]
		mov	[esi-8], ax
		movzx	eax, [esp+18h+var_2]
		mov	[esi-6], ax
		dec	ebx
		jnz	short loc_10009A20
		pop	edi
		pop	esi
		pop	ebp

loc_10009A85:				; CODE XREF: sub_100099F0+Aj
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_100099F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009A90	proc near		; CODE XREF: sub_1000A380+71p
					; sub_1000A450+5Dp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		movzx	eax, word ptr [edx+2]
		mov	[esp+14h+var_8], eax
		push	esi
		movzx	esi, word ptr [edx+4]
		push	edi
		movzx	edi, word ptr [edx+6]
		mov	ecx, edi
		mov	[esp+1Ch+arg_8], esi
		not	ecx
		mov	[esp+1Ch+var_C], edi
		and	ecx, eax
		mov	eax, edi
		and	eax, esi
		add	ecx, eax
		mov	eax, edi
		add	cx, [ebp+0]
		add	cx, [edx]
		rol	cx, 1
		movzx	edx, cx
		and	eax, edx
		mov	[esp+1Ch+var_4], edx
		mov	ecx, edx
		not	ecx
		and	ecx, esi
		add	ecx, eax
		add	cx, [ebp+2]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_8], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebp+4]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+arg_8], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+6]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_C], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		mov	eax, edx
		add	cx, [ebp+8]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_4], esi
		not	ecx
		and	eax, esi
		and	ecx, edi
		add	ecx, eax
		add	cx, [ebp+0Ah]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+var_8], edi
		not	ecx
		and	ecx, edx
		mov	eax, edi
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+0Ch]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+arg_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		add	cx, [ebp+0Eh]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_C], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		mov	eax, esi
		add	cx, [ebp+10h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	edi, cx
		and	eax, edi
		mov	[esp+1Ch+var_4], edi
		mov	ecx, edi
		not	ecx
		and	ecx, edx
		add	ecx, eax
		add	cx, [ebp+12h]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		add	cx, [ebp+14h]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+arg_8], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebp+16h]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+var_C], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		mov	eax, edi
		add	cx, [ebp+18h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_4], edx
		not	ecx
		and	eax, edx
		and	ecx, esi
		add	ecx, eax
		add	cx, [ebp+1Ah]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_8], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebp+1Ch]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+arg_8], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+1Eh]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	ebx, cx
		mov	ecx, ebx
		mov	[esp+1Ch+var_C], ebx
		not	ecx
		mov	eax, ebx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		mov	eax, ebx
		add	cx, [ebp+20h]
		add	cx, dx
		rol	cx, 1
		movzx	esi, cx
		and	eax, esi
		mov	[esp+1Ch+var_4], esi
		mov	ecx, esi
		not	ecx
		and	ecx, edi
		add	ecx, eax
		add	cx, [ebp+22h]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, ebx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+24h]
		add	cx, di
		mov	edi, [esp+1Ch+arg_0]
		rol	cx, 3
		movzx	eax, cx
		mov	ecx, eax
		mov	[esp+1Ch+arg_8], eax
		not	ecx
		and	eax, edx
		and	ecx, esi
		add	ecx, eax
		add	cx, [ebp+26h]
		add	cx, bx
		mov	bx, si
		rol	cx, 5
		movzx	eax, cx
		mov	[esp+1Ch+var_C], eax
		and	eax, 3Fh
		add	bx, [ebp+eax*2+0]
		mov	bp, dx
		mov	word ptr [esp+1Ch+var_4], bx
		mov	eax, [esp+1Ch+var_4]
		and	eax, 3Fh
		add	bp, [edi+eax*2]
		mov	word ptr [esp+1Ch+var_8], bp
		mov	eax, [esp+1Ch+var_8]
		and	eax, 3Fh
		mov	cx, word ptr [esp+1Ch+arg_8]
		add	cx, [edi+eax*2]
		mov	word ptr [esp+1Ch+arg_8], cx
		mov	esi, [esp+1Ch+arg_8]
		mov	eax, esi
		mov	cx, word ptr [esp+1Ch+var_C]
		and	eax, 3Fh
		add	cx, [edi+eax*2]
		mov	word ptr [esp+1Ch+var_C], cx
		mov	edi, [esp+1Ch+var_C]
		mov	ecx, edi
		not	ecx
		mov	eax, edi
		and	ecx, [esp+1Ch+var_8]
		and	eax, esi
		add	ecx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	cx, [eax+28h]
		mov	eax, edi
		add	cx, bx
		mov	ebx, [esp+1Ch+arg_0]
		rol	cx, 1
		movzx	edx, cx
		and	eax, edx
		mov	[esp+1Ch+var_4], edx
		mov	ecx, edx
		not	ecx
		and	ecx, esi
		add	ecx, eax
		add	cx, [ebx+2Ah]
		add	cx, bp
		rol	cx, 2
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_8], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebx+2Ch]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+arg_8], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebx+2Eh]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_C], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		mov	eax, edx
		add	cx, [ebx+30h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_4], esi
		not	ecx
		and	eax, esi
		and	ecx, edi
		add	ecx, eax
		add	cx, [ebx+32h]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+var_8], edi
		not	ecx
		and	ecx, edx
		mov	eax, edi
		and	eax, esi
		add	ecx, eax
		add	cx, [ebx+34h]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+arg_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		add	cx, [ebx+36h]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_C], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		mov	eax, esi
		add	cx, [ebx+38h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	edi, cx
		and	eax, edi
		mov	[esp+1Ch+var_4], edi
		mov	ecx, edi
		not	ecx
		and	ecx, edx
		add	ecx, eax
		add	cx, [ebx+3Ah]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		add	cx, [ebx+3Ch]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+arg_8], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebx+3Eh]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+var_C], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		mov	eax, edi
		add	cx, [ebx+40h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_4], edx
		not	ecx
		and	eax, edx
		and	ecx, esi
		add	ecx, eax
		add	cx, [ebx+42h]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_8], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebx+44h]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+arg_8], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebx+46h]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_C], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		mov	eax, edx
		add	cx, [ebx+48h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	esi, cx
		and	eax, esi
		mov	[esp+1Ch+var_4], esi
		mov	ecx, esi
		not	ecx
		and	ecx, edi
		add	ecx, eax
		add	cx, [ebx+4Ah]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+var_8], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebx+4Ch]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+arg_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		add	cx, [ebx+4Eh]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_C], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebx+50h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	edi, cx
		mov	[esp+1Ch+var_4], edi
		mov	ecx, edi
		mov	eax, esi
		not	ecx
		and	eax, edi
		and	ecx, edx
		add	ecx, eax
		add	cx, [ebx+52h]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		mov	bp, dx
		add	cx, [ebx+54h]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	eax, cx
		mov	ecx, eax
		mov	[esp+1Ch+arg_8], eax
		not	ecx
		and	eax, edx
		and	ecx, edi
		add	ecx, eax
		add	cx, [ebx+56h]
		mov	bx, di
		mov	edi, [esp+1Ch+arg_0]
		add	cx, si
		rol	cx, 5
		movzx	eax, cx
		mov	[esp+1Ch+var_C], eax
		and	eax, 3Fh
		mov	cx, word ptr [esp+1Ch+arg_8]
		add	bx, [edi+eax*2]
		mov	word ptr [esp+1Ch+var_4], bx
		mov	eax, [esp+1Ch+var_4]
		and	eax, 3Fh
		add	bp, [edi+eax*2]
		mov	word ptr [esp+1Ch+var_8], bp
		mov	eax, [esp+1Ch+var_8]
		and	eax, 3Fh
		add	cx, [edi+eax*2]
		mov	word ptr [esp+1Ch+arg_8], cx
		mov	esi, [esp+1Ch+arg_8]
		mov	eax, esi
		mov	cx, word ptr [esp+1Ch+var_C]
		and	eax, 3Fh
		add	cx, [edi+eax*2]
		mov	word ptr [esp+1Ch+var_C], cx
		mov	edi, [esp+1Ch+var_C]
		mov	ecx, edi
		not	ecx
		mov	eax, edi
		and	ecx, [esp+1Ch+var_8]
		and	eax, esi
		add	ecx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	cx, [eax+58h]
		mov	eax, edi
		add	cx, bx
		rol	cx, 1
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_4], edx
		not	ecx
		and	eax, edx
		and	ecx, esi
		add	ecx, eax
		mov	eax, [esp+1Ch+arg_0]
		add	cx, [eax+5Ah]
		add	cx, bp
		rol	cx, 2
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_8], esi
		not	ecx
		and	ecx, edi
		mov	ebp, [esp+1Ch+arg_0]
		mov	eax, esi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebp+5Ch]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+arg_8], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+5Eh]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_C], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		mov	eax, edx
		add	cx, [ebp+60h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	esi, cx
		and	eax, esi
		mov	[esp+1Ch+var_4], esi
		mov	ecx, esi
		not	ecx
		and	ecx, edi
		add	ecx, eax
		add	cx, [ebp+62h]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+var_8], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+64h]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+arg_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		add	cx, [ebp+66h]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_C], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		mov	eax, esi
		add	cx, [ebp+68h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+var_4], edi
		not	ecx
		and	eax, edi
		and	ecx, edx
		add	ecx, eax
		add	cx, [ebp+6Ah]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		add	cx, [ebp+6Ch]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+arg_8], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebp+6Eh]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+var_C], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		mov	eax, edi
		add	cx, [ebp+70h]
		add	cx, word ptr [esp+1Ch+var_4]
		rol	cx, 1
		movzx	edx, cx
		and	eax, edx
		mov	[esp+1Ch+var_4], edx
		mov	ecx, edx
		not	ecx
		and	ecx, esi
		add	ecx, eax
		add	cx, [ebp+72h]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_8], esi
		not	ecx
		mov	eax, esi
		and	ecx, edi
		and	eax, edx
		add	ecx, eax
		add	cx, [ebp+74h]
		add	cx, word ptr [esp+1Ch+arg_8]
		rol	cx, 3
		movzx	edi, cx
		mov	ecx, edi
		mov	[esp+1Ch+arg_8], edi
		not	ecx
		mov	eax, edi
		and	ecx, edx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+76h]
		add	cx, word ptr [esp+1Ch+var_C]
		rol	cx, 5
		movzx	ebx, cx
		mov	ecx, ebx
		mov	[esp+1Ch+var_C], ebx
		not	ecx
		mov	eax, ebx
		and	ecx, esi
		and	eax, edi
		add	ecx, eax
		add	cx, [ebp+78h]
		add	cx, dx
		rol	cx, 1
		movzx	esi, cx
		mov	ecx, esi
		mov	[esp+1Ch+var_4], esi
		not	ecx
		mov	eax, ebx
		and	ecx, edi
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+7Ah]
		add	cx, word ptr [esp+1Ch+var_8]
		rol	cx, 2
		movzx	edx, cx
		mov	ecx, edx
		mov	[esp+1Ch+var_8], edx
		not	ecx
		mov	eax, edx
		and	ecx, ebx
		and	eax, esi
		add	ecx, eax
		add	cx, [ebp+7Ch]
		add	cx, di
		rol	cx, 3
		movzx	eax, cx
		mov	ecx, eax
		mov	[esp+1Ch+arg_8], eax
		not	ecx
		and	eax, edx
		and	ecx, esi
		add	ecx, eax
		add	cx, [ebp+7Eh]
		add	cx, bx
		rol	cx, 5
		movzx	eax, cx
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], eax
		movzx	eax, si
		pop	edi
		mov	[ecx], ax
		movzx	eax, dx
		mov	[ecx+2], ax
		movzx	eax, word ptr [esp+18h+arg_8]
		pop	esi
		mov	[ecx+4], ax
		movzx	eax, word ptr [esp+14h+var_C]
		pop	ebp
		mov	[ecx+6], ax
		pop	ebx
		add	esp, 0Ch
		retn
sub_10009A90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A380	proc near		; DATA XREF: sub_10008E50+60o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	ebp
		mov	ebp, [esp+0Ch+arg_C]
		test	ebp, ebp
		jz	loc_1000A445
		mov	ecx, [esp+0Ch+arg_8]
		dec	ebp
		mov	eax, [esp+0Ch+arg_4]
		push	ebx
		push	esi
		lea	ebx, [ecx+4]
		shr	ebp, 3
		sub	ecx, eax
		lea	esi, [eax+4]
		push	edi
		mov	edi, [esp+18h+arg_0]
		inc	ebp
		lea	eax, [ecx-4]
		mov	[esp+18h+arg_C], eax

loc_1000A3B3:				; CODE XREF: sub_1000A380+BCj
		movzx	eax, word ptr [eax+esi]
		mov	word ptr [esp+18h+var_8], ax
		movzx	eax, word ptr [ebx-2]
		mov	word ptr [esp+18h+var_8+2], ax
		movzx	eax, word ptr [ebx]
		mov	word ptr [esp+18h+var_4], ax
		movzx	eax, word ptr [ebx+2]
		mov	word ptr [esp+18h+var_4+2], ax
		mov	eax, [edi+80h]
		xor	[esp+18h+var_8], eax
		mov	eax, [edi+84h]
		xor	[esp+18h+var_4], eax
		lea	eax, [esp+18h+var_8]
		push	eax
		push	eax
		push	edi
		call	sub_10009A90
		mov	eax, [esp+24h+var_8]
		lea	ebx, [ebx+8]
		mov	[edi+80h], eax
		lea	esi, [esi+8]
		mov	eax, [esp+24h+var_4]
		add	esp, 0Ch
		mov	[edi+84h], eax
		movzx	eax, word ptr [esp+18h+var_8]
		mov	[esi-0Ch], ax
		movzx	eax, word ptr [esp+18h+var_8+2]
		mov	[esi-0Ah], ax
		movzx	eax, word ptr [esp+18h+var_4]
		mov	[esi-8], ax
		movzx	eax, word ptr [esp+18h+var_4+2]
		mov	[esi-6], ax
		mov	eax, [esp+18h+arg_C]
		dec	ebp
		jnz	loc_1000A3B3
		pop	edi
		pop	esi
		pop	ebx

loc_1000A445:				; CODE XREF: sub_1000A380+Aj
		xor	eax, eax
		pop	ebp
		add	esp, 8
		retn
sub_1000A380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A450	proc near		; DATA XREF: sub_10008E50:loc_10008EF1o

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		test	ebx, ebx
		jz	loc_1000A4E5
		mov	ecx, [esp+0Ch+arg_8]
		dec	ebx
		mov	eax, [esp+0Ch+arg_4]
		push	ebp
		push	esi
		push	edi
		lea	edi, [ecx+4]
		shr	ebx, 3
		sub	ecx, eax
		lea	esi, [eax+4]
		inc	ebx
		lea	ebp, [ecx-4]
		jmp	short loc_1000A480
; ---------------------------------------------------------------------------
		align 10h

loc_1000A480:				; CODE XREF: sub_1000A450+2Bj
					; sub_1000A450+90j
		movzx	eax, word ptr [esi+ebp]
		mov	[esp+18h+var_8], ax
		movzx	eax, word ptr [edi-2]
		mov	[esp+18h+var_6], ax
		movzx	eax, word ptr [edi]
		mov	[esp+18h+var_4], ax
		movzx	eax, word ptr [edi+2]
		mov	[esp+18h+var_2], ax
		lea	eax, [esp+18h+var_8]
		push	eax
		push	eax
		push	[esp+20h+arg_0]
		call	sub_10009A90
		movzx	eax, [esp+24h+var_8]
		lea	edi, [edi+8]
		mov	[esi-4], ax
		lea	esi, [esi+8]
		movzx	eax, [esp+24h+var_6]
		add	esp, 0Ch
		mov	[esi-0Ah], ax
		movzx	eax, [esp+18h+var_4]
		mov	[esi-8], ax
		movzx	eax, [esp+18h+var_2]
		mov	[esi-6], ax
		dec	ebx
		jnz	short loc_1000A480
		pop	edi
		pop	esi
		pop	ebp

loc_1000A4E5:				; CODE XREF: sub_1000A450+Aj
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_1000A450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A4F0	proc near		; DATA XREF: .rdata:1003E430o
		push	102h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_1000A4F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A500(void	*, size_t)
sub_1000A500	proc near		; DATA XREF: .rdata:1003E260o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	102h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000A545
		push	0
		push	0
		push	0
		push	0
		push	[esp+14h+arg_4]	; size_t
		push	[esp+18h+arg_0]	; void *
		push	esi		; int
		call	sub_1000A5A0
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000A543
		push	102h
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A543:				; CODE XREF: sub_1000A500+2Fj
		mov	eax, esi

loc_1000A545:				; CODE XREF: sub_1000A500+12j
		pop	esi
		retn
sub_1000A500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A550	proc near		; DATA XREF: .rdata:1003E268o
					; .rdata:1003E26Co

arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_C]
		mov	ecx, [esp+arg_14]
		cmp	eax, ecx
		jnb	short loc_1000A56D
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000A56D:				; CODE XREF: sub_1000A550+Aj
		mov	[esp+arg_14], ecx
		mov	[esp+arg_C], eax
		jmp	sub_1000A760
sub_1000A550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A580	proc near		; DATA XREF: .rdata:1003E264o

arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jz	short locret_1000A594
		mov	[esp+arg_4], 102h
		jmp	PORT_ZFree_Util
; ---------------------------------------------------------------------------

locret_1000A594:			; CODE XREF: sub_1000A580+5j
		retn
sub_1000A580	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A5A0(int,	void *,	size_t)
sub_1000A5A0	proc near		; CODE XREF: sub_1000A500+25p
					; DATA XREF: .rdata:1003E41Co

var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= byte ptr -104h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+10Ch+var_4], eax
		mov	eax, [esp+10Ch+arg_4]
		push	ebx
		mov	ebx, [esp+110h+arg_8]
		mov	[esp+110h+var_108], eax
		push	ebp
		mov	ebp, [esp+114h+arg_0]
		mov	[esp+114h+var_10C], ebp
		test	ebx, ebx
		jz	loc_1000A696
		cmp	ebx, 100h
		jnb	loc_1000A696
		test	ebp, ebp
		jnz	short loc_1000A5F5
		push	0FFFFE005h
		jmp	loc_1000A69B
; ---------------------------------------------------------------------------

loc_1000A5F5:				; CODE XREF: sub_1000A5A0+49j
		push	esi
		push	edi
		mov	ecx, 40h
		mov	esi, offset dword_1003EE98
		mov	edi, ebp
		rep movsd
		mov	edi, 100h
		lea	esi, [esp+11Ch+var_104]
		cmp	ebx, edi
		jnb	short loc_1000A62F
		mov	ebp, eax

loc_1000A614:				; CODE XREF: sub_1000A5A0+85j
		push	ebx		; size_t
		push	ebp		; void *
		push	esi		; void *
		call	memcpy
		sub	edi, ebx
		add	esp, 0Ch
		add	esi, ebx
		cmp	edi, ebx
		ja	short loc_1000A614
		mov	ebp, [esp+11Ch+var_10C]
		mov	eax, [esp+11Ch+var_108]

loc_1000A62F:				; CODE XREF: sub_1000A5A0+70j
		push	edi		; size_t
		push	eax		; void *
		push	esi		; void *
		call	memcpy
		lea	eax, [esp+128h+var_104]
		add	esp, 0Ch
		xor	bl, bl
		mov	esi, ebp
		sub	eax, ebp
		mov	edi, 100h
		mov	[esp+11Ch+var_10C], eax
		lea	ecx, [ecx+0]

loc_1000A650:				; CODE XREF: sub_1000A5A0+D0j
		mov	dl, [esi]
		lea	esi, [esi+1]
		movzx	eax, byte ptr [eax+esi-1]
		add	al, dl
		add	bl, al
		movzx	ecx, bl
		movzx	eax, byte ptr [ecx+ebp]
		mov	[esi-1], al
		mov	eax, [esp+11Ch+var_10C]
		mov	[ecx+ebp], dl
		dec	edi
		jnz	short loc_1000A650
		pop	edi
		pop	esi
		mov	word ptr [ebp+100h], 0
		xor	eax, eax
		pop	ebp
		pop	ebx
		mov	ecx, [esp+10Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10Ch
		retn
; ---------------------------------------------------------------------------

loc_1000A696:				; CODE XREF: sub_1000A5A0+35j
					; sub_1000A5A0+41j
		push	0FFFFE00Eh

loc_1000A69B:				; CODE XREF: sub_1000A5A0+50j
		call	PORT_SetError_Util
		mov	ecx, [esp+118h+var_4]
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10Ch
		retn
sub_1000A5A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A6C0	proc near		; CODE XREF: sub_1000A760+67p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_14]
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	ch, [esi+100h]
		mov	bh, [esi+101h]
		cmp	[esp+0Ch+arg_C], ebp
		jnb	short loc_1000A6F1
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A6F1:				; CODE XREF: sub_1000A6C0+1Bj
		test	ebp, ebp
		jz	short loc_1000A739
		push	edi
		mov	edi, [esp+10h+arg_4]
		sub	[esp+10h+arg_10], edi
		mov	[esp+10h+arg_0], ebp
		mov	ebp, [esp+10h+arg_10]

loc_1000A706:				; CODE XREF: sub_1000A6C0+72j
		inc	ch
		lea	edi, [edi+1]
		movzx	edx, ch
		mov	bl, [edx+esi]
		add	bh, bl
		movzx	eax, bh
		mov	cl, [eax+esi]
		mov	[edx+esi], cl
		add	cl, bl
		mov	[eax+esi], bl
		movzx	eax, cl
		mov	al, [eax+esi]
		xor	al, [edi+ebp-1]
		dec	[esp+10h+arg_0]
		mov	[edi-1], al
		jnz	short loc_1000A706
		mov	ebp, [esp+10h+arg_14]
		pop	edi

loc_1000A739:				; CODE XREF: sub_1000A6C0+33j
		mov	eax, [esp+0Ch+arg_8]
		mov	[eax], ebp
		xor	eax, eax
		mov	[esi+101h], bh
		mov	[esi+100h], ch
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000A6C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A760	proc near		; CODE XREF: sub_1000A550+25j

var_19		= byte ptr -19h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 1Ch
		mov	ecx, [esp+1Ch+arg_C]
		push	ebx
		push	ebp
		mov	ebp, [esp+24h+arg_14]
		push	esi
		mov	esi, [esp+28h+arg_10]
		mov	eax, esi
		and	eax, 3
		mov	[esp+28h+var_14], eax
		push	edi
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, edi
		and	eax, 3
		mov	[esp+2Ch+var_8], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	dl, [eax+101h]
		mov	bh, [eax+100h]
		mov	[esp+2Ch+var_19], dl
		cmp	ecx, ebp
		jnb	short loc_1000A7B9
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1000A7B9:				; CODE XREF: sub_1000A760+3Fj
		cmp	ebp, 8
		jnb	short loc_1000A7D7
		push	ebp
		push	esi
		push	ecx
		push	[esp+38h+arg_8]
		push	edi
		push	eax
		call	sub_1000A6C0
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1000A7D7:				; CODE XREF: sub_1000A760+5Cj
		mov	ecx, [esp+2Ch+arg_8]
		sub	esi, [esp+2Ch+var_14]
		mov	[esp+2Ch+arg_C], esi
		mov	[ecx], ebp
		mov	ecx, [esp+2Ch+var_8]
		sub	edi, ecx
		mov	[esp+2Ch+var_18], edi
		cmp	[esp+2Ch+var_14], ecx
		ja	short loc_1000A813
		sub	ecx, [esp+2Ch+var_14]
		shl	ecx, 3
		mov	[esp+2Ch+var_10], ecx
		mov	ecx, 20h
		sub	ecx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_4], ecx
		mov	ecx, [esp+2Ch+var_8]
		jmp	short loc_1000A830
; ---------------------------------------------------------------------------

loc_1000A813:				; CODE XREF: sub_1000A760+93j
		mov	edi, [esp+2Ch+var_14]
		sub	edi, ecx
		mov	[esp+2Ch+var_10], 20h
		shl	edi, 3
		sub	[esp+2Ch+var_10], edi
		mov	[esp+2Ch+var_4], edi
		mov	edi, [esp+2Ch+var_18]

loc_1000A830:				; CODE XREF: sub_1000A760+B1j
		test	ecx, ecx
		jz	loc_1000A91A
		mov	[esp+2Ch+var_C], 4
		sub	[esp+2Ch+var_C], ecx
		jz	short loc_1000A89F
		mov	ecx, [esp+2Ch+arg_10]
		mov	ebp, [esp+2Ch+arg_4]
		sub	ecx, ebp
		mov	edi, [esp+2Ch+var_C]
		mov	[esp+2Ch+arg_4], ecx

loc_1000A858:				; CODE XREF: sub_1000A760+12Dj
		inc	bh
		lea	ebp, [ebp+1]
		movzx	esi, bh
		mov	bl, [esi+eax]
		add	dl, bl
		movzx	ecx, dl
		mov	[esp+2Ch+var_19], dl
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	[ecx+eax], bl
		movzx	ecx, dl
		mov	edx, [esp+2Ch+arg_4]
		mov	cl, [ecx+eax]
		xor	cl, [edx+ebp-1]
		mov	dl, [esp+2Ch+var_19]
		mov	[ebp-1], cl
		dec	edi
		jnz	short loc_1000A858
		mov	edi, [esp+2Ch+var_18]
		mov	ebp, [esp+2Ch+arg_14]
		mov	esi, [esp+2Ch+arg_C]
		mov	ecx, [esp+2Ch+var_8]

loc_1000A89F:				; CODE XREF: sub_1000A760+E4j
		sub	ebp, [esp+2Ch+var_C]
		add	esi, 4
		mov	edx, [esp+2Ch+var_14]
		add	edi, 4
		mov	[esp+2Ch+arg_14], ebp
		mov	[esp+2Ch+arg_C], esi
		mov	[esp+2Ch+var_18], edi
		cmp	edx, ecx
		jnb	short loc_1000A907
		sub	ecx, edx
		mov	[esp+2Ch+arg_4], 0
		mov	[esp+2Ch+var_8], ecx
		jz	loc_1000A973
		mov	esi, [esp+2Ch+var_C]
		xor	eax, eax
		add	esi, [esp+2Ch+arg_10]
		mov	edi, ecx
		xor	ebp, ebp
		xor	ecx, ecx

loc_1000A8E1:				; CODE XREF: sub_1000A760+18Fj
		movzx	edx, byte ptr [esi+ebp]
		inc	ebp
		shl	edx, cl
		add	ecx, 8
		or	eax, edx
		cmp	ebp, edi
		jb	short loc_1000A8E1
		mov	edi, [esp+2Ch+var_18]
		mov	ebp, [esp+2Ch+arg_14]
		mov	esi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+arg_4], eax
		mov	eax, [esp+2Ch+arg_0]
		jmp	short loc_1000A973
; ---------------------------------------------------------------------------

loc_1000A907:				; CODE XREF: sub_1000A760+15Bj
		jbe	short loc_1000A96B
		mov	edx, [esi]
		add	esi, 4
		mov	ecx, [esp+2Ch+var_4]
		shr	edx, cl
		mov	[esp+2Ch+arg_4], edx
		jmp	short loc_1000A973
; ---------------------------------------------------------------------------

loc_1000A91A:				; CODE XREF: sub_1000A760+D2j
		mov	edx, [esp+2Ch+var_14]
		test	edx, edx
		jz	short loc_1000A96B
		xor	ecx, ecx
		mov	[esp+2Ch+var_8], 4
		sub	[esp+2Ch+var_8], edx
		mov	[esp+2Ch+arg_4], ecx
		jz	short loc_1000A966
		mov	edi, [esp+2Ch+arg_10]
		xor	ebp, ebp
		mov	esi, [esp+2Ch+var_8]
		xor	eax, eax

loc_1000A942:				; CODE XREF: sub_1000A760+1F0j
		movzx	edx, byte ptr [eax+edi]
		inc	eax
		shl	edx, cl
		add	ecx, 8
		or	ebp, edx
		cmp	eax, esi
		jb	short loc_1000A942
		mov	eax, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+var_18]
		mov	esi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+arg_4], ebp
		mov	ebp, [esp+2Ch+arg_14]

loc_1000A966:				; CODE XREF: sub_1000A760+1D4j
		add	esi, 4
		jmp	short loc_1000A973
; ---------------------------------------------------------------------------

loc_1000A96B:				; CODE XREF: sub_1000A760:loc_1000A907j
					; sub_1000A760+1C0j
		mov	[esp+2Ch+arg_4], 0

loc_1000A973:				; CODE XREF: sub_1000A760+16Bj
					; sub_1000A760+1A5j ...
		mov	ecx, [esp+2Ch+var_10]
		test	ecx, ecx
		jz	loc_1000AAD4
		shr	ecx, 3
		mov	[esp+2Ch+arg_0], ecx
		lea	edx, [ecx+4]
		cmp	ebp, edx
		jb	loc_1000AA80
		mov	ecx, ebp
		sub	ecx, edx
		shr	ecx, 2
		inc	ecx
		mov	[esp+2Ch+arg_10], ecx
		lea	ecx, [ecx+0]

loc_1000A9A0:				; CODE XREF: sub_1000A760+316j
		mov	ebp, [esi]
		inc	bh
		mov	dh, [esp+2Ch+var_19]
		add	esi, 4
		mov	[esp+2Ch+arg_C], esi
		movzx	esi, bh
		inc	bh
		mov	bl, [esi+eax]
		add	dh, bl
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	[ecx+eax], bl
		movzx	ecx, dl
		movzx	esi, bh
		inc	bh
		movzx	edi, byte ptr [ecx+eax]
		mov	bl, [esi+eax]
		add	dh, bl
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	[ecx+eax], bl
		movzx	ecx, dl
		movzx	esi, bh
		inc	bh
		movzx	ecx, byte ptr [ecx+eax]
		mov	bl, [esi+eax]
		shl	ecx, 8
		add	dh, bl
		or	edi, ecx
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	[ecx+eax], bl
		movzx	ecx, dl
		movzx	esi, bh
		movzx	ecx, byte ptr [ecx+eax]
		mov	bl, [esi+eax]
		add	dh, bl
		shl	ecx, 10h
		or	edi, ecx
		mov	[esp+2Ch+var_19], dh
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	[ecx+eax], bl
		movzx	ecx, dl
		mov	edx, ebp
		movzx	esi, byte ptr [ecx+eax]
		mov	ecx, [esp+2Ch+var_10]
		shl	esi, 18h
		shl	edx, cl
		or	esi, edi
		or	edx, [esp+2Ch+arg_4]
		mov	edi, [esp+2Ch+var_18]
		xor	esi, edx
		mov	ecx, [esp+2Ch+var_4]
		mov	edx, ebp
		mov	ebp, [esp+2Ch+arg_14]
		shr	edx, cl
		sub	ebp, 4
		mov	[edi], esi
		add	edi, 4
		dec	[esp+2Ch+arg_10]
		mov	esi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_18], edi
		mov	[esp+2Ch+arg_4], edx
		mov	[esp+2Ch+arg_14], ebp
		jnz	loc_1000A9A0
		mov	ecx, [esp+2Ch+arg_0]

loc_1000AA80:				; CODE XREF: sub_1000A760+22Bj
		test	ebp, ebp
		jz	loc_1000ABB2
		sub	esi, ecx
		test	ebp, ebp
		jz	loc_1000ABB2

loc_1000AA92:				; CODE XREF: sub_1000A760+44Aj
		mov	dh, [esp+2Ch+var_19]
		sub	esi, edi
		mov	[esp+2Ch+arg_C], esi
		lea	esp, [esp+0]

loc_1000AAA0:				; CODE XREF: sub_1000A760+36Dj
		inc	bh
		lea	edi, [edi+1]
		movzx	esi, bh
		mov	bl, [esi+eax]
		add	dh, bl
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	esi, [esp+2Ch+arg_C]
		mov	[ecx+eax], bl
		movzx	ecx, dl
		mov	cl, [ecx+eax]
		xor	cl, [esi+edi-1]
		mov	[edi-1], cl
		dec	ebp
		jnz	short loc_1000AAA0
		jmp	loc_1000ABB6
; ---------------------------------------------------------------------------

loc_1000AAD4:				; CODE XREF: sub_1000A760+219j
		mov	dh, [esp+2Ch+var_19]
		cmp	ebp, 4
		jb	loc_1000ABA8
		shr	ebp, 2
		mov	[esp+2Ch+arg_10], ebp

loc_1000AAE8:				; CODE XREF: sub_1000A760+43Ej
		mov	ebp, [esi]
		inc	bh
		add	esi, 4
		mov	[esp+2Ch+arg_C], esi
		movzx	esi, bh
		inc	bh
		mov	bl, [esi+eax]
		add	dh, bl
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	[ecx+eax], bl
		movzx	ecx, dl
		movzx	esi, bh
		inc	bh
		movzx	edi, byte ptr [ecx+eax]
		mov	bl, [esi+eax]
		add	dh, bl
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	[ecx+eax], bl
		movzx	ecx, dl
		movzx	esi, bh
		inc	bh
		movzx	ecx, byte ptr [ecx+eax]
		mov	bl, [esi+eax]
		shl	ecx, 8
		add	dh, bl
		or	edi, ecx
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	[ecx+eax], bl
		movzx	ecx, dl
		movzx	esi, bh
		movzx	ecx, byte ptr [ecx+eax]
		mov	bl, [esi+eax]
		shl	ecx, 10h
		add	dh, bl
		or	edi, ecx
		movzx	ecx, dh
		mov	dl, [ecx+eax]
		mov	[esi+eax], dl
		add	dl, bl
		mov	esi, [esp+2Ch+arg_C]
		mov	[ecx+eax], bl
		movzx	ecx, dl
		movzx	ecx, byte ptr [ecx+eax]
		shl	ecx, 18h
		or	ecx, edi
		mov	edi, [esp+2Ch+var_18]
		xor	ecx, ebp
		mov	ebp, [esp+2Ch+arg_14]
		sub	ebp, 4
		mov	[esp+2Ch+arg_14], ebp
		mov	[edi], ecx
		add	edi, 4
		dec	[esp+2Ch+arg_10]
		mov	[esp+2Ch+var_18], edi
		jnz	loc_1000AAE8
		mov	[esp+2Ch+var_19], dh

loc_1000ABA8:				; CODE XREF: sub_1000A760+37Bj
		test	ebp, ebp
		jnz	loc_1000AA92
		jmp	short loc_1000ABB6
; ---------------------------------------------------------------------------

loc_1000ABB2:				; CODE XREF: sub_1000A760+322j
					; sub_1000A760+32Cj
		mov	dh, [esp+2Ch+var_19]

loc_1000ABB6:				; CODE XREF: sub_1000A760+36Fj
					; sub_1000A760+450j
		pop	edi
		pop	esi
		mov	[eax+100h], bh
		pop	ebp
		mov	[eax+101h], dh
		xor	eax, eax
		pop	ebx
		add	esp, 1Ch
		retn
sub_1000A760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000ABD0	proc near		; DATA XREF: .rdata:1003E280o
		push	0FFFFE898h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
sub_1000ABD0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000ABE0	proc near		; DATA XREF: .rdata:1003E284o
		push	0FFFFE898h
		call	PORT_SetError_Util
		pop	ecx
		retn
sub_1000ABE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000ABF0	proc near		; DATA XREF: .rdata:1003E288o
					; .rdata:1003E28Co ...
		push	0FFFFE898h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_1000ABF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AC10	proc near		; DATA XREF: .rdata:1003E428o
		push	190h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_1000AC10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AC20	proc near		; DATA XREF: sub_1000B050+E7o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	eax, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		add	eax, esi
		mov	[esp+0Ch+arg_8], eax
		cmp	esi, eax
		jz	short loc_1000ACA7
		mov	ecx, [esp+0Ch+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		push	edi
		lea	edx, [ecx+180h]
		jmp	short loc_1000AC50
; ---------------------------------------------------------------------------
		align 10h

loc_1000AC50:				; CODE XREF: sub_1000AC20+27j
					; sub_1000AC20+82j
		mov	eax, [esi]
		mov	edi, [edx]
		mov	ebx, [ecx+184h]
		mov	[edx], eax
		mov	eax, [esi+4]
		add	esi, 8
		mov	[ecx+184h], eax
		lea	eax, [esp+18h+var_8]
		push	eax
		push	edx
		push	ecx
		call	sub_1000B200
		mov	ecx, [esp+24h+var_8]
		lea	ebp, [ebp+8]
		mov	eax, [esp+24h+var_4]
		xor	ecx, edi
		mov	[ebp-8], ecx
		xor	eax, ebx
		mov	[esp+24h+var_8], ecx
		add	esp, 0Ch
		mov	ecx, [esp+18h+arg_0]
		mov	[ebp-4], eax
		mov	[esp+18h+var_4], eax
		lea	edx, [ecx+180h]
		cmp	esi, [esp+18h+arg_8]
		jnz	short loc_1000AC50
		pop	edi
		pop	ebp
		pop	ebx

loc_1000ACA7:				; CODE XREF: sub_1000AC20+14j
		pop	esi
		add	esp, 8
		retn
sub_1000AC20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000ACB0	proc near		; DATA XREF: sub_1000B050+DEo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	eax, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		add	eax, esi
		mov	[esp+0Ch+arg_8], eax
		cmp	esi, eax
		jz	short loc_1000AD1A
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	ebp
		push	edi
		mov	edi, [esp+18h+arg_4]
		lea	ebp, [ebx+180h]

loc_1000ACD7:				; CODE XREF: sub_1000ACB0+65j
		mov	eax, [esi]
		xor	eax, [ebp+0]
		mov	ecx, [esi+4]
		add	esi, 8
		xor	ecx, [ebx+184h]
		mov	[esp+18h+var_8], eax
		lea	eax, [esp+18h+var_8]
		push	ebp
		push	eax
		push	ebx
		mov	[esp+24h+var_4], ecx
		call	sub_1000B200
		mov	eax, [ebp+0]
		lea	edi, [edi+8]
		mov	[edi-8], eax
		add	esp, 0Ch
		mov	eax, [ebx+184h]
		mov	[edi-4], eax
		cmp	esi, [esp+18h+arg_8]
		jnz	short loc_1000ACD7
		pop	edi
		pop	ebp
		pop	ebx

loc_1000AD1A:				; CODE XREF: sub_1000ACB0+14j
		pop	esi
		add	esp, 8
		retn
sub_1000ACB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AD20	proc near		; DATA XREF: .rdata:1003E290o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	190h
		call	PORT_ZAlloc_Util
		push	0
		push	[esp+0Ch+arg_C]
		mov	esi, eax
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	0
		push	[esp+1Ch+arg_0]
		push	esi
		call	sub_1000B050
		add	esp, 20h
		test	eax, eax
		jz	short loc_1000AD60
		push	190h
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AD60:				; CODE XREF: sub_1000AD20+2Cj
		mov	eax, esi
		pop	esi
		retn
sub_1000AD20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AD70	proc near		; DATA XREF: .rdata:1003E29Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_14]
		test	bl, 7
		jnz	short loc_1000ADB7
		cmp	[esp+4+arg_C], ebx
		jb	short loc_1000ADB7
		mov	eax, [esp+4+arg_0]
		test	eax, eax
		jz	short loc_1000ADB7
		cmp	dword ptr [eax+188h], 0AAAAh
		jnz	short loc_1000ADB7
		push	ebx
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_4]
		push	eax
		mov	eax, [eax+18Ch]
		call	eax
		mov	eax, [esp+14h+arg_8]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000ADB3
		mov	[eax], ebx

loc_1000ADB3:				; CODE XREF: sub_1000AD70+3Fj
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000ADB7:				; CODE XREF: sub_1000AD70+8j
					; sub_1000AD70+Ej ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000AD70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000ADD0(void	*, int)
sub_1000ADD0	proc near		; DATA XREF: .rdata:1003E294o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000ADF9
		push	190h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000ADF9
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000ADF9:				; CODE XREF: sub_1000ADD0+7j
					; sub_1000ADD0+1Ej
		pop	esi
		retn
sub_1000ADD0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000AE00:				; DATA XREF: sub_1000B050+6Bo
		push	edi
		mov	edi, [esp+14h]
		test	edi, edi
		jz	short loc_1000AE39
		push	ebx
		mov	ebx, [esp+10h]
		push	ebp
		mov	ebp, [esp+10h]
		push	esi
		mov	esi, [esp+1Ch]
		sub	ebx, esi
		lea	ebx, [ebx+0]

loc_1000AE20:				; CODE XREF: .text:1000AE34j
		lea	eax, [ebx+esi]
		push	eax
		push	esi
		push	ebp
		call	sub_1000B200
		add	esp, 0Ch
		add	esi, 8
		sub	edi, 8
		jnz	short loc_1000AE20
		pop	esi
		pop	ebp
		pop	ebx

loc_1000AE39:				; CODE XREF: .text:1000AE07j
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AE40	proc near		; DATA XREF: sub_1000B050:loc_1000B18Eo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	eax, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		add	eax, esi
		mov	[esp+0Ch+arg_8], eax
		cmp	esi, eax
		jz	loc_1000AEEE
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		push	edi
		lea	ecx, [ebp+180h]
		jmp	short loc_1000AE70
; ---------------------------------------------------------------------------
		align 10h

loc_1000AE70:				; CODE XREF: sub_1000AE40+27j
					; sub_1000AE40+A9j
		mov	eax, [esi]
		mov	edi, [ecx]
		mov	ebx, [ebp+184h]
		mov	[ecx], eax
		mov	eax, [esi+4]
		add	esi, 8
		mov	[ebp+184h], eax
		lea	eax, [esp+18h+var_8]
		push	eax
		push	ecx
		push	ebp
		call	sub_1000B200
		lea	eax, [esp+24h+var_8]
		push	eax
		push	eax
		lea	eax, [ebp+80h]
		push	eax
		call	sub_1000B200
		lea	eax, [esp+30h+var_8]
		push	eax
		push	eax
		lea	eax, [ebp+100h]
		push	eax
		call	sub_1000B200
		mov	edx, [esp+3Ch+arg_4]
		add	esp, 24h
		mov	ecx, [esp+18h+var_8]
		mov	eax, [esp+18h+var_4]
		xor	ecx, edi
		xor	eax, ebx
		mov	[esp+18h+var_8], ecx
		mov	[edx], ecx
		lea	ecx, [ebp+180h]
		mov	[edx+4], eax
		add	edx, 8
		mov	[esp+18h+var_4], eax
		mov	[esp+18h+arg_4], edx
		cmp	esi, [esp+18h+arg_8]
		jnz	short loc_1000AE70
		pop	edi
		pop	ebp
		pop	ebx

loc_1000AEEE:				; CODE XREF: sub_1000AE40+14j
		pop	esi
		add	esp, 8
		retn
sub_1000AE40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AF00	proc near		; DATA XREF: sub_1000B050+12Fo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	eax, [esp+8+arg_C]
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		add	eax, edi
		mov	[esp+0Ch+arg_8], eax
		cmp	edi, eax
		jz	short loc_1000AF84
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		push	esi
		lea	esi, [ebx+180h]

loc_1000AF27:				; CODE XREF: sub_1000AF00+7Fj
		mov	eax, [edi]
		xor	eax, [esi]
		mov	ecx, [edi+4]
		add	edi, 8
		xor	ecx, [ebx+184h]
		mov	[esp+18h+var_8], eax
		lea	eax, [esp+18h+var_8]
		push	esi
		push	eax
		push	ebx
		mov	[esp+24h+var_4], ecx
		call	sub_1000B200
		push	esi
		lea	eax, [ebx+80h]
		push	esi
		push	eax
		call	sub_1000B200
		push	esi
		lea	eax, [ebx+100h]
		push	esi
		push	eax
		call	sub_1000B200
		mov	eax, [esi]
		lea	ebp, [ebp+8]
		mov	[ebp-8], eax
		add	esp, 24h
		mov	eax, [ebx+184h]
		mov	[ebp-4], eax
		cmp	edi, [esp+18h+arg_8]
		jnz	short loc_1000AF27
		pop	esi
		pop	ebp
		pop	ebx

loc_1000AF84:				; CODE XREF: sub_1000AF00+14j
		pop	edi
		add	esp, 8
		retn
sub_1000AF00	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000AF90:				; DATA XREF: sub_1000B050+7Fo
		push	edi
		mov	edi, [esp+14h]
		test	edi, edi
		jz	short loc_1000AFE5
		push	ebx
		mov	ebx, [esp+0Ch]
		push	ebp
		mov	ebp, [esp+18h]
		push	esi
		mov	esi, [esp+18h]
		sub	ebp, esi
		lea	ebx, [ebx+0]

loc_1000AFB0:				; CODE XREF: .text:1000AFE0j
		push	esi
		lea	eax, [esi+ebp]
		push	eax
		push	ebx
		call	sub_1000B200
		push	esi
		lea	eax, [ebx+80h]
		push	esi
		push	eax
		call	sub_1000B200
		push	esi
		lea	eax, [ebx+100h]
		push	esi
		push	eax
		call	sub_1000B200
		add	esp, 24h
		add	esi, 8
		sub	edi, 8
		jnz	short loc_1000AFB0
		pop	esi
		pop	ebp
		pop	ebx

loc_1000AFE5:				; CODE XREF: .text:1000AF97j
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AFF0	proc near		; DATA XREF: .rdata:1003E298o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_14]
		test	bl, 7
		jnz	short loc_1000B037
		cmp	[esp+4+arg_C], ebx
		jb	short loc_1000B037
		mov	eax, [esp+4+arg_0]
		test	eax, eax
		jz	short loc_1000B037
		cmp	dword ptr [eax+188h], 5555h
		jnz	short loc_1000B037
		push	ebx
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_4]
		push	eax
		mov	eax, [eax+18Ch]
		call	eax
		mov	eax, [esp+14h+arg_8]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B033
		mov	[eax], ebx

loc_1000B033:				; CODE XREF: sub_1000AFF0+3Fj
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000B037:				; CODE XREF: sub_1000AFF0+8j
					; sub_1000AFF0+Ej ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000AFF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B050	proc near		; CODE XREF: sub_1000AD20+22p
					; DATA XREF: .rdata:1003E414o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_1000B06B
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000B06B:				; CODE XREF: sub_1000B050+7j
		mov	edx, [esp+4+arg_14]
		mov	eax, edx
		mov	ecx, [esp+4+arg_10]
		neg	eax
		push	ebx
		sbb	eax, eax
		mov	ebx, edx
		and	eax, 0FFFFAAABh
		add	eax, 0AAAAh
		neg	ebx
		push	esi
		sbb	ebx, ebx
		mov	[edi+188h], eax
		and	ebx, 5555h
		add	ebx, 5555h
		cmp	ecx, 3		; switch 4 cases
		ja	loc_1000B1CE	; jumptable 1000B0A6 default case
		jmp	ds:off_1000B1E4[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000B0AD:				; CODE XREF: sub_1000B050+56j
					; DATA XREF: .text:off_1000B1E4o
		push	eax		; jumptable 1000B0A6 case 0
		push	[esp+10h+arg_4]
		push	edi
		call	sub_1000BBB0
		add	esp, 0Ch
		mov	dword ptr [edi+18Ch], offset loc_1000AE00
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000B0CB:				; CODE XREF: sub_1000B050+56j
					; DATA XREF: .text:off_1000B1E4o
		mov	esi, [esp+0Ch+arg_4] ; jumptable 1000B0A6 case 2
		mov	dword ptr [edi+18Ch], offset loc_1000AF90
		push	eax
		push	esi
		test	edx, edx
		jz	loc_1000B198

loc_1000B0E3:				; CODE XREF: sub_1000B050+139j
		push	edi
		call	sub_1000BBB0
		push	ebx
		lea	eax, [esi+8]
		push	eax
		lea	eax, [edi+80h]
		push	eax
		call	sub_1000BBB0
		push	dword ptr [edi+188h]
		lea	eax, [esi+10h]
		push	eax
		lea	eax, [edi+100h]
		push	eax
		call	sub_1000BBB0
		add	esp, 24h
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000B119:				; CODE XREF: sub_1000B050+56j
					; DATA XREF: .text:off_1000B1E4o
		mov	ecx, [esp+0Ch+arg_C] ; jumptable 1000B0A6 case 1
		mov	eax, [ecx]
		mov	[edi+180h], eax
		mov	eax, [ecx+4]
		mov	[edi+184h], eax
		mov	eax, offset sub_1000ACB0
		test	edx, edx
		jnz	short loc_1000B13C
		mov	eax, offset sub_1000AC20

loc_1000B13C:				; CODE XREF: sub_1000B050+E5j
		push	dword ptr [edi+188h]
		mov	[edi+18Ch], eax
		push	[esp+10h+arg_4]
		push	edi
		call	sub_1000BBB0
		add	esp, 0Ch
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000B15B:				; CODE XREF: sub_1000B050+56j
					; DATA XREF: .text:off_1000B1E4o
		mov	ecx, [esp+0Ch+arg_C] ; jumptable 1000B0A6 case 3
		mov	esi, [esp+0Ch+arg_4]
		mov	eax, [ecx]
		mov	[edi+180h], eax
		mov	eax, [ecx+4]
		mov	[edi+184h], eax
		push	dword ptr [edi+188h]
		push	esi
		test	edx, edx
		jz	short loc_1000B18E
		mov	dword ptr [edi+18Ch], offset sub_1000AF00
		jmp	loc_1000B0E3
; ---------------------------------------------------------------------------

loc_1000B18E:				; CODE XREF: sub_1000B050+12Dj
		mov	dword ptr [edi+18Ch], offset sub_1000AE40

loc_1000B198:				; CODE XREF: sub_1000B050+8Dj
		lea	eax, [edi+100h]
		push	eax
		call	sub_1000BBB0
		push	ebx
		lea	eax, [esi+8]
		push	eax
		lea	eax, [edi+80h]
		push	eax
		call	sub_1000BBB0
		push	dword ptr [edi+188h]
		lea	eax, [esi+10h]
		push	eax
		push	edi
		call	sub_1000BBB0
		add	esp, 24h
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000B1CE:				; CODE XREF: sub_1000B050+50j
		push	0FFFFE005h	; jumptable 1000B0A6 default case
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebx
		pop	edi
		retn
sub_1000B050	endp

; ---------------------------------------------------------------------------
		align 4
off_1000B1E4	dd offset loc_1000B0AD	; DATA XREF: sub_1000B050+56r
		dd offset loc_1000B119	; jump table for switch	statement
		dd offset loc_1000B0CB
		dd offset loc_1000B15B
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B200	proc near		; CODE XREF: sub_1000AC20+4Fp
					; sub_1000ACB0+47p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		bswap	ecx
		mov	eax, ecx
		shr	eax, 4
		bswap	edx
		xor	eax, edx
		and	eax, 0F0F0F0Fh
		xor	edx, eax
		shl	eax, 4
		xor	ecx, eax
		mov	eax, ecx
		shr	eax, 10h
		xor	eax, edx
		and	eax, 0FFFFh
		xor	edx, eax
		shl	eax, 10h
		xor	ecx, eax
		push	edi
		lea	eax, ds:0[ecx*4]
		xor	eax, edx
		and	eax, 0CCCCCCCCh
		xor	edx, eax
		shr	eax, 2
		xor	ecx, eax
		mov	eax, ecx
		shl	eax, 8
		xor	eax, edx
		and	eax, 0FF00FF00h
		xor	edx, eax
		shr	eax, 8
		xor	ecx, eax
		mov	edi, ecx
		shr	edi, 1
		xor	edi, edx
		and	edi, 55555555h
		lea	ebx, [edi+edi]
		xor	edi, edx
		mov	edx, [esi]
		xor	ebx, ecx
		rol	edi, 3
		xor	edx, edi
		rol	ebx, 3
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, edi
		xor	ebx, ecx
		ror	edx, 4
		xor	edx, [esi+4]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+8]
		xor	ebx, ecx
		xor	edx, ebx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, ebx
		xor	edi, ecx
		ror	edx, 4
		xor	edx, [esi+0Ch]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+10h]
		xor	edi, ecx
		xor	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, edi
		xor	ebx, ecx
		ror	edx, 4
		xor	edx, [esi+14h]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+18h]
		xor	ebx, ecx
		xor	edx, ebx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	eax, 0FCh
		and	edx, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, ebx
		xor	edi, ecx
		ror	edx, 4
		xor	edx, [esi+1Ch]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+20h]
		xor	edi, ecx
		xor	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, edi
		xor	ebx, ecx
		ror	edx, 4
		xor	edx, [esi+24h]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+28h]
		xor	ebx, ecx
		xor	edx, ebx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, ebx
		ror	edx, 4
		xor	edi, ecx
		xor	edx, [esi+2Ch]
		mov	ecx, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		mov	eax, edx
		shr	eax, 10h
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+30h]
		xor	edi, ecx
		xor	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, edi
		xor	ebx, ecx
		ror	edx, 4
		xor	edx, [esi+34h]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+38h]
		xor	ebx, ecx
		xor	edx, ebx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, ebx
		xor	edi, ecx
		ror	edx, 4
		xor	edx, [esi+3Ch]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		shr	eax, 10h
		and	ecx, 0FCh
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		xor	edi, ecx
		mov	edx, [esi+40h]
		xor	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, edi
		xor	ebx, ecx
		ror	edx, 4
		xor	edx, [esi+44h]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+48h]
		xor	ebx, ecx
		xor	edx, ebx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, ebx
		xor	edi, ecx
		ror	edx, 4
		xor	edx, [esi+4Ch]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+50h]
		xor	edi, ecx
		xor	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		and	edx, 0FCh
		shr	eax, 8
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, edi
		xor	ebx, ecx
		ror	edx, 4
		xor	edx, [esi+54h]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+58h]
		xor	ebx, ecx
		xor	edx, ebx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, ebx
		xor	edi, ecx
		ror	edx, 4
		xor	edx, [esi+5Ch]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+60h]
		xor	edi, ecx
		xor	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, edi
		xor	ebx, ecx
		ror	edx, 4
		xor	edx, [esi+64h]
		mov	ecx, edx
		shr	ecx, 18h
		mov	eax, edx
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+68h]
		xor	ebx, ecx
		xor	edx, ebx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, ebx
		xor	edi, ecx
		ror	edx, 4
		xor	edx, [esi+6Ch]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		and	ecx, 0FCh
		shr	eax, 10h
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+70h]
		xor	edi, ecx
		xor	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		shr	eax, 10h
		and	ecx, 0FCh
		and	eax, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, edi
		xor	ebx, ecx
		ror	edx, 4
		xor	edx, [esi+74h]
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 18h
		shr	eax, 10h
		and	ecx, 0FCh
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		and	edx, 0FCh
		xor	ecx, ds:dword_1003F598[edx]
		mov	edx, [esi+78h]
		xor	ebx, ecx
		xor	edx, ebx
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 10h
		and	eax, 0FCh
		shr	ecx, 18h
		and	ecx, 0FCh
		mov	ecx, ds:dword_1003F098[ecx]
		xor	ecx, ds:dword_1003F298[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F498[eax]
		xor	ecx, ds:dword_1003F698[edx]
		mov	edx, ebx
		xor	edi, ecx
		ror	edx, 4
		xor	edx, [esi+7Ch]
		mov	ecx, edx
		ror	ebx, 3
		mov	eax, edx
		shr	ecx, 18h
		shr	eax, 10h
		and	ecx, 0FCh
		and	eax, 0FCh
		mov	ecx, ds:dword_1003EF98[ecx]
		xor	ecx, ds:dword_1003F198[eax]
		mov	eax, edx
		shr	eax, 8
		and	edx, 0FCh
		and	eax, 0FCh
		xor	ecx, ds:dword_1003F398[eax]
		xor	ecx, ds:dword_1003F598[edx]
		xor	edi, ecx
		mov	ecx, [esp+0Ch+arg_8]
		ror	edi, 3
		mov	eax, edi
		shr	eax, 1
		xor	eax, ebx
		and	eax, 55555555h
		xor	ebx, eax
		add	eax, eax
		xor	edi, eax
		mov	eax, edi
		shl	eax, 8
		xor	eax, ebx
		and	eax, 0FF00FF00h
		xor	ebx, eax
		shr	eax, 8
		xor	edi, eax
		lea	eax, ds:0[edi*4]
		xor	eax, ebx
		and	eax, 0CCCCCCCCh
		xor	ebx, eax
		shr	eax, 2
		xor	edi, eax
		mov	eax, edi
		shr	eax, 10h
		xor	eax, ebx
		and	eax, 0FFFFh
		xor	ebx, eax
		shl	eax, 10h
		xor	edi, eax
		mov	edx, edi
		shr	edx, 4
		xor	edx, ebx
		and	edx, 0F0F0F0Fh
		mov	eax, edx
		shl	eax, 4
		xor	eax, edi
		xor	edx, ebx
		bswap	eax
		bswap	edx
		mov	[ecx], eax
		mov	[ecx+4], edx
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000B200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BBB0	proc near		; CODE XREF: sub_1000B050+63p
					; sub_1000B050+94p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ecx, [esp+10h+arg_4]
		mov	eax, [ecx]
		mov	esi, [ecx+4]
		bswap	eax
		mov	ecx, eax
		mov	ebp, [esp+10h+arg_0]
		shr	ecx, 4
		bswap	esi
		xor	ecx, esi
		and	ecx, 0F0F0F0Fh
		xor	esi, ecx
		shl	ecx, 4
		xor	eax, ecx
		mov	edx, eax
		shr	edx, 12h
		xor	edx, eax
		and	edx, 3333h
		mov	ecx, edx
		shl	ecx, 12h
		or	ecx, edx
		xor	eax, ecx
		mov	edx, eax
		shr	edx, 9
		xor	edx, eax
		and	edx, 550055h
		mov	ecx, edx
		shl	ecx, 9
		or	ecx, edx
		mov	edx, esi
		shr	edx, 12h
		xor	eax, ecx
		xor	edx, esi
		and	eax, 0FFFFFFh
		and	edx, 3333h
		shl	eax, 4
		mov	ecx, edx
		shl	ecx, 12h
		or	ecx, edx
		xor	esi, ecx
		mov	ecx, esi
		shr	ecx, 9
		xor	ecx, esi
		and	ecx, 550055h
		mov	edx, ecx
		shl	edx, 9
		or	edx, ecx
		xor	edx, esi
		bswap	edx
		mov	ebx, edx
		and	edx, 0Fh
		shr	ebx, 4
		or	eax, edx
		cmp	[esp+10h+arg_8], 5555h
		jnz	short loc_1000BC59
		mov	[esp+10h+arg_4], 8
		jmp	short loc_1000BC64
; ---------------------------------------------------------------------------

loc_1000BC59:				; CODE XREF: sub_1000BBB0+9Dj
		add	ebp, 78h
		mov	[esp+10h+arg_4], 0FFFFFFF8h

loc_1000BC64:				; CODE XREF: sub_1000BBB0+A7j
		mov	ecx, 8103h
		mov	[esp+10h+arg_8], ecx
		lea	ecx, [ecx+0]

loc_1000BC70:				; CODE XREF: sub_1000BBB0+1D7j
		test	cl, 1
		mov	edx, ebx
		mov	ecx, eax
		jz	short loc_1000BC85
		shr	edx, 1Bh
		add	ebx, ebx
		shr	ecx, 1Bh
		add	eax, eax
		jmp	short loc_1000BC95
; ---------------------------------------------------------------------------

loc_1000BC85:				; CODE XREF: sub_1000BBB0+C7j
		shr	edx, 1Ah
		lea	ebx, ds:0[ebx*4]
		shr	ecx, 1Ah
		shl	eax, 2

loc_1000BC95:				; CODE XREF: sub_1000BBB0+D3j
		or	eax, ecx
		or	ebx, edx
		and	ebx, 0FFFFFFFh
		and	eax, 0FFFFFFFh
		mov	esi, ebx
		mov	ecx, ebx
		and	ecx, 1800h
		shr	esi, 7
		and	esi, 6000h
		mov	edx, ebx
		or	esi, ecx
		shr	edx, 2
		shr	esi, 9
		mov	ecx, ebx
		and	ecx, 30h
		and	edx, 0E0h
		shl	ecx, 2
		or	esi, ecx
		mov	ecx, ebx
		and	ecx, 7
		shl	ecx, 2
		or	edx, ecx
		mov	ecx, ebx
		mov	edi, ds:dword_1003FA98[esi]
		mov	esi, eax
		shr	ecx, 14h
		and	ecx, 0FCh
		shr	esi, 1
		or	edi, ds:dword_1003F998[edx]
		and	esi, 0C0000h
		mov	edx, eax
		and	edx, 3
		or	edi, ds:dword_1003F798[ecx]
		add	edx, edx
		mov	ecx, ebx
		shr	ecx, 0Bh
		and	ecx, 0FCh
		or	edi, ds:dword_1003F898[ecx]
		mov	ecx, eax
		and	ecx, 3C000h
		or	esi, ecx
		mov	ecx, eax
		and	ecx, 78h
		shr	esi, 0Ch
		or	edx, ecx
		mov	ecx, eax
		shr	ecx, 14h
		and	ecx, 0FCh
		mov	esi, ds:dword_1003FC98[esi]
		or	esi, ds:dword_1003FE98[edx*2]
		or	esi, ds:dword_1003FB98[ecx]
		mov	ecx, eax
		shr	ecx, 5
		and	ecx, 0FCh
		or	esi, ds:dword_1003FD98[ecx]
		mov	ecx, edi
		mov	edx, esi
		shl	ecx, 10h
		xor	esi, edi
		shr	edx, 10h
		and	esi, 0FFFFh
		or	edx, ecx
		mov	ecx, [esp+10h+arg_8]
		xor	esi, edi
		mov	[ebp+0], edx
		mov	[ebp+4], esi
		add	ebp, [esp+10h+arg_4]
		shr	ecx, 1
		mov	[esp+10h+arg_8], ecx
		jnz	loc_1000BC70
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000BBB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000BDA0(void	*, size_t, void	*, int)
sub_1000BDA0	proc near		; CODE XREF: sub_1000BF20+D7p
					; sub_1000BF20+151p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	dword_10052918,	0
		jnz	short loc_1000BDBA
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000BDBA:				; CODE XREF: sub_1000BDA0+7j
		cmp	byte_100508EA, 1
		jb	short loc_1000BDDC
		push	0		; int
		push	0		; int
		push	0		; size_t
		push	0		; void *
		push	offset dword_10050840 ;	int
		call	sub_1000CCF0
		add	esp, 14h
		test	eax, eax
		jnz	short locret_1000BDF9

loc_1000BDDC:				; CODE XREF: sub_1000BDA0+21j
		push	[esp+arg_C]	; int
		push	[esp+4+arg_8]	; void *
		push	[esp+8+arg_4]	; size_t
		push	[esp+0Ch+arg_0]	; void *
		push	offset dword_10050840 ;	int
		call	sub_1000C7F0
		add	esp, 14h

locret_1000BDF9:			; CODE XREF: sub_1000BDA0+3Aj
		retn
sub_1000BDA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000BE00(void	*, size_t, void	*, size_t, void	*, size_t)
sub_1000BE00	proc near		; DATA XREF: .rdata:1003E4BCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		lea	ebx, [esi+ebp]
		add	ebx, [esp+0Ch+arg_14]
		cmp	esi, 20h
		jnb	short loc_1000BE2B
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000BE2B:				; CODE XREF: sub_1000BE00+15j
		push	edi
		push	ebx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000BE50
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000BE48:				; CODE XREF: sub_1000BE00+AAj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000BE50:				; CODE XREF: sub_1000BE00+39j
		push	esi		; size_t
		push	[esp+14h+arg_0]	; void *
		push	edi		; void *
		call	memcpy
		mov	eax, [esp+1Ch+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000BE74
		push	ebp		; size_t
		push	eax		; void *
		lea	eax, [edi+esi]
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000BE74:				; CODE XREF: sub_1000BE00+64j
		mov	eax, [esp+10h+arg_10]
		test	eax, eax
		jz	short loc_1000BE8F
		push	[esp+10h+arg_14] ; size_t
		push	eax		; void *
		lea	eax, [edi+esi]
		add	eax, ebp
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000BE8F:				; CODE XREF: sub_1000BE00+7Aj
		push	ebx
		push	edi
		push	offset dword_10050840
		call	sub_1000CC80
		push	ebx
		push	edi
		mov	esi, eax
		call	PORT_ZFree_Util
		add	esp, 14h
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000BE48
		pop	edi
		pop	esi
		pop	ebp
		mov	dword_10052918,	1
		xor	eax, eax
		pop	ebx
		retn
sub_1000BE00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000BEC0(void	*, size_t, int,	int)
sub_1000BEC0	proc near		; DATA XREF: .rdata:1003E4C0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	dword_10052918,	0
		jnz	short loc_1000BEDA
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000BEDA:				; CODE XREF: sub_1000BEC0+7j
		cmp	[esp+arg_0], 0
		mov	eax, [esp+arg_C]
		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_4]
		jnz	short loc_1000BF01
		test	edx, edx
		jnz	short loc_1000BF01
		test	ecx, ecx
		jnz	short loc_1000BF01
		test	eax, eax
		jnz	short loc_1000BF01
		mov	byte_100508EA, 1
		retn
; ---------------------------------------------------------------------------

loc_1000BF01:				; CODE XREF: sub_1000BEC0+2Bj
					; sub_1000BEC0+2Fj ...
		push	eax		; int
		push	ecx		; int
		push	edx		; size_t
		push	[esp+0Ch+arg_0]	; void *
		push	offset dword_10050840 ;	int
		call	sub_1000CCF0
		add	esp, 14h
		retn
sub_1000BEC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BF20	proc near		; CODE XREF: sub_1000C2B0+25p
					; sub_1000C2B0+E1p ...

var_3C		= byte ptr -3Ch
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+3Ch+var_4], eax
		push	esi
		push	edi
		push	20h
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000BF77
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000BF4D:				; CODE XREF: sub_1000BF20+81j
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE03Fh
		jnz	loc_1000C1BB
		push	50h
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000BFB2
		push	0FFFFE013h
		jmp	loc_1000C1C0
; ---------------------------------------------------------------------------

loc_1000BF77:				; CODE XREF: sub_1000BF20+1Ej
		push	20h		; size_t
		push	offset dword_1003FFA0 ;	void *
		push	edi		; void *
		call	memcpy
		push	20h
		push	edi
		push	offset dword_10050840
		call	sub_1000CC80
		push	20h
		push	edi
		mov	esi, eax
		call	PORT_ZFree_Util
		add	esp, 20h
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000BF4D
		mov	dword_10052918,	1
		jmp	loc_1000C1BB
; ---------------------------------------------------------------------------

loc_1000BFB2:				; CODE XREF: sub_1000BF20+4Bj
		push	50h		; size_t
		push	offset dword_1003FFA0 ;	void *
		push	edi		; void *
		call	memcpy
		push	50h
		push	edi
		push	offset dword_10050840
		call	sub_1000CC80
		push	50h
		push	edi
		mov	esi, eax
		call	PORT_ZFree_Util
		add	esp, 20h
		cmp	esi, 0FFFFFFFFh
		jz	loc_1000C1C8
		push	0		; int
		push	0		; void *
		lea	eax, [esp+4Ch+var_3C]
		mov	dword_10052918,	1
		push	37h		; size_t
		push	eax		; void *
		call	sub_1000BDA0
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000C1B6
		lea	ecx, [esp+44h+var_3C]
		mov	edx, offset dword_1003FFF0
		lea	esi, [eax+33h]

loc_1000C013:				; CODE XREF: sub_1000BF20+106j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_1000C1B6
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1000C013
		mov	ax, [ecx]
		cmp	ax, [edx]
		jnz	loc_1000C1B6
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	loc_1000C1B6
		cmp	dword_10052918,	0
		jz	short loc_1000C0C6
		push	20h		; int
		push	offset dword_10040048 ;	int
		push	20h		; size_t
		push	offset dword_10040028 ;	void *
		push	offset dword_10050840 ;	int
		call	sub_1000CCF0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000C0D3
		push	eax		; int
		push	eax		; void *
		lea	eax, [esp+4Ch+var_3C]
		push	37h		; size_t
		push	eax		; void *
		call	sub_1000BDA0
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000C1B6
		lea	ecx, [esp+44h+var_3C]
		mov	edx, offset dword_10040068
		lea	esi, [eax+33h]
		lea	ecx, [ecx+0]

loc_1000C090:				; CODE XREF: sub_1000BF20+183j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	loc_1000C1B6
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1000C090
		mov	ax, [ecx]
		cmp	ax, [edx]
		jnz	loc_1000C1B6
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	loc_1000C1B6
		cmp	dword_10052918,	0
		jnz	short loc_1000C0EC

loc_1000C0C6:				; CODE XREF: sub_1000BF20+127j
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000C0D3:				; CODE XREF: sub_1000BF20+146j
		call	sub_1000C1E0
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000C0EC:				; CODE XREF: sub_1000BF20+1A4j
		push	0		; int
		push	0		; void *
		lea	eax, [esp+4Ch+var_3C]
		mov	byte_100508EA, 1
		push	37h		; size_t
		push	eax		; void *
		call	sub_1000BDA0
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000C1B6
		lea	ecx, [esp+44h+var_3C]
		mov	edx, offset dword_100400A0
		lea	esi, [eax+33h]
		lea	ebx, [ebx+0]

loc_1000C120:				; CODE XREF: sub_1000BF20+20Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_1000C141
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1000C120
		mov	ax, [ecx]
		cmp	ax, [edx]
		jnz	short loc_1000C141
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jz	short loc_1000C1B6

loc_1000C141:				; CODE XREF: sub_1000BF20+204j
					; sub_1000BF20+217j
		cmp	dword_10052918,	0
		jnz	short loc_1000C159
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1000C175
; ---------------------------------------------------------------------------

loc_1000C159:				; CODE XREF: sub_1000BF20+228j
		push	0		; int
		push	0		; int
		push	4		; size_t
		push	offset dword_10040028 ;	void *
		push	offset dword_10050840 ;	int
		call	sub_1000CCF0
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000C1B6

loc_1000C175:				; CODE XREF: sub_1000BF20+237j
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE03Fh
		jnz	short loc_1000C1B6
		call	sub_1000C1E0
		test	eax, eax
		jnz	short loc_1000C1CB
		call	sub_1000C1E0
		mov	esi, eax
		test	esi, esi
		jz	short loc_1000C1BB
		call	PORT_GetError_Util
		sub	eax, 0FFFFE001h
		neg	eax
		pop	edi
		sbb	eax, eax
		and	eax, esi
		pop	esi
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000C1B6:				; CODE XREF: sub_1000BF20+E1j
					; sub_1000BF20+F7j ...
		call	sub_1000C1E0

loc_1000C1BB:				; CODE XREF: sub_1000BF20+37j
					; sub_1000BF20+8Dj ...
		push	0FFFFE001h

loc_1000C1C0:				; CODE XREF: sub_1000BF20+52j
		call	PORT_SetError_Util
		add	esp, 4

loc_1000C1C8:				; CODE XREF: sub_1000BF20+BCj
		or	eax, 0FFFFFFFFh

loc_1000C1CB:				; CODE XREF: sub_1000BF20+268j
		mov	ecx, [esp+44h+var_4]
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
sub_1000BF20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C1E0	proc near		; CODE XREF: sub_1000BF20:loc_1000C0D3p
					; sub_1000BF20+261p ...
		cmp	dword_10052918,	0
		jnz	short loc_1000C1FA
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000C1FA:				; CODE XREF: sub_1000C1E0+7j
		push	20DCh		; size_t
		push	0		; int
		push	offset dword_10050840 ;	void *
		call	memset
		add	esp, 0Ch
		xor	eax, eax
		retn
sub_1000C1E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C220(void	*, size_t)
sub_1000C220	proc near		; CODE XREF: sub_10016330+145p
					; sub_10016330+1E8p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; size_t
		push	[esp+4+arg_0]	; void *
		push	dword_1004E3E0	; int
		call	sub_1000C3F0
		add	esp, 0Ch
		retn
sub_1000C220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C240	proc near		; DATA XREF: .rdata:1003E32Co
		push	offset sub_1000CE20
		push	offset dword_1004E3E4
		call	ds:PR_CallOnce
		mov	eax, dword_1004E3E0
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		dec	eax
		retn
sub_1000C240	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C260	proc near		; DATA XREF: .rdata:1003E338o
		mov	eax, dword_1004E3E0
		test	eax, eax
		jnz	short loc_1000C277
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_1000C277:				; CODE XREF: sub_1000C260+7j
		push	eax		; void *
		call	sub_1000C750
		mov	eax, ds:dword_100400D8
		add	esp, 4
		mov	dword_1004E3E4,	eax
		mov	eax, ds:dword_100400DC
		mov	dword_1004E3E8,	eax
		mov	eax, ds:dword_100400E0
		mov	dword_1004E3E0,	0
		mov	dword_1004E3EC,	eax
		retn
sub_1000C260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C2B0(void	*, size_t)
sub_1000C2B0	proc near		; CODE XREF: sub_10001120+26p
					; sub_10001120+48p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, dword_1004E3E0
		push	ebx
		push	esi
		push	edi
		push	dword ptr [eax]
		call	ds:PR_Lock
		mov	edi, [esp+10h+arg_4]
		add	esp, 4
		mov	esi, dword_1004E3E0
		cmp	edi, 2000h
		jbe	short loc_1000C32D
		call	sub_1000BF20
		test	eax, eax
		jz	short loc_1000C302
		mov	dword ptr [esi+20D8h], 0
		or	ebx, 0FFFFFFFFh
		mov	esi, dword_1004E3E0
		push	dword ptr [esi]
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C302:				; CODE XREF: sub_1000C2B0+2Cj
		push	edi		; int
		push	[esp+10h+arg_0]	; int
		push	0		; size_t
		push	0		; void *
		push	esi		; int
		call	sub_1000CCF0
		mov	esi, dword_1004E3E0
		add	esp, 14h
		mov	ebx, eax
		push	dword ptr [esi]
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C32D:				; CODE XREF: sub_1000C2B0+23j
		mov	eax, [esi+20D4h]
		mov	ebx, 2000h
		sub	ebx, eax
		cmp	edi, ebx
		jnb	short loc_1000C36C
		push	edi		; size_t
		push	[esp+10h+arg_0]	; void *
		add	eax, 0D2h
		add	eax, esi
		push	eax		; void *
		call	memcpy
		add	[esi+20D4h], edi
		add	esp, 0Ch
		xor	ebx, ebx
		push	dword ptr [esi]
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C36C:				; CODE XREF: sub_1000C2B0+8Cj
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		test	ebx, ebx
		jz	short loc_1000C38B
		push	ebx		; size_t
		add	eax, 0D2h
		add	eax, esi
		push	ebp		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		add	ebp, ebx
		sub	edi, ebx

loc_1000C38B:				; CODE XREF: sub_1000C2B0+C3j
		lea	ebx, [esi+0D2h]
		call	sub_1000BF20
		test	eax, eax
		jz	short loc_1000C3A9
		mov	dword ptr [esi+20D8h], 0
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1000C3BE
; ---------------------------------------------------------------------------

loc_1000C3A9:				; CODE XREF: sub_1000C2B0+E8j
		push	2000h		; int
		push	ebx		; int
		push	0		; size_t
		push	0		; void *
		push	esi		; int
		call	sub_1000CCF0
		add	esp, 14h
		mov	ebx, eax

loc_1000C3BE:				; CODE XREF: sub_1000C2B0+F7j
		mov	esi, dword_1004E3E0
		push	edi		; size_t
		push	ebp		; void *
		lea	eax, [esi+0D2h]
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		mov	[esi+20D4h], edi
		pop	ebp
		push	dword ptr [esi]
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000C2B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C3F0(int,	void *,	size_t)
sub_1000C3F0	proc near		; CODE XREF: sub_1000C220+Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1000C40B
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C40B:				; CODE XREF: sub_1000C3F0+7j
		push	ebx
		mov	ebx, [esp+8+arg_8]
		cmp	ebx, 10000h
		jbe	short loc_1000C42B
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C42B:				; CODE XREF: sub_1000C3F0+26j
		push	ebp
		mov	ebp, ds:PR_Lock
		push	edi
		push	dword ptr [esi]
		call	ebp ; PR_Lock
		add	esp, 4
		cmp	byte ptr [esi+0AAh], 1
		jb	short loc_1000C48D
		call	sub_1000BF20
		test	eax, eax
		jz	short loc_1000C45B
		mov	dword ptr [esi+20D8h], 0
		or	edi, 0FFFFFFFFh
		jmp	short loc_1000C46E
; ---------------------------------------------------------------------------

loc_1000C45B:				; CODE XREF: sub_1000C3F0+5Aj
		push	0		; int
		push	0		; int
		push	0		; size_t
		push	0		; void *
		push	esi		; int
		call	sub_1000CCF0
		add	esp, 14h
		mov	edi, eax

loc_1000C46E:				; CODE XREF: sub_1000C3F0+69j
		push	dword ptr [esi]
		call	ds:PR_Unlock
		add	esp, 4
		test	edi, edi
		jnz	loc_1000C587
		call	sub_10001120
		push	dword ptr [esi]
		call	ebp ; PR_Lock
		add	esp, 4

loc_1000C48D:				; CODE XREF: sub_1000C3F0+51j
		movzx	ecx, byte ptr [esi+0D1h]
		cmp	ebx, ecx
		ja	short loc_1000C4E3
		mov	eax, esi
		sub	eax, ecx
		push	ebx		; size_t
		add	eax, 0D1h
		push	eax		; void *
		push	[esp+18h+arg_4]	; void *
		call	memcpy
		movzx	eax, byte ptr [esi+0D1h]
		mov	ecx, esi
		push	ebx		; size_t
		sub	ecx, eax
		add	ecx, 0D1h
		push	0		; int
		push	ecx		; void *
		call	memset
		sub	[esi+0D1h], bl
		add	esp, 18h
		xor	edi, edi
		push	dword ptr [esi]
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C4E3:				; CODE XREF: sub_1000C3F0+A6j
		mov	eax, [esi+20D4h]
		cmp	ebx, 20h
		jnb	short loc_1000C552
		test	eax, eax
		jz	short loc_1000C4FA
		lea	ecx, [esi+0D2h]
		jmp	short loc_1000C4FC
; ---------------------------------------------------------------------------

loc_1000C4FA:				; CODE XREF: sub_1000C3F0+100j
		xor	ecx, ecx

loc_1000C4FC:				; CODE XREF: sub_1000C3F0+108j
		push	eax		; int
		push	ecx		; void *
		push	20h		; size_t
		lea	ebp, [esi+0B1h]
		push	ebp		; void *
		push	esi		; int
		call	sub_1000C7F0
		mov	edi, eax
		mov	dword ptr [esi+20D4h], 0
		add	esp, 14h
		test	edi, edi
		jnz	short loc_1000C57C
		push	ebx		; size_t
		push	ebp		; void *
		push	[esp+18h+arg_4]	; void *
		call	memcpy
		push	ebx		; size_t
		push	edi		; int
		push	ebp		; void *
		call	memset
		add	esp, 18h
		mov	al, 20h
		sub	al, bl
		mov	[esi+0D1h], al
		push	dword ptr [esi]
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C552:				; CODE XREF: sub_1000C3F0+FCj
		test	eax, eax
		jz	short loc_1000C55E
		lea	ecx, [esi+0D2h]
		jmp	short loc_1000C560
; ---------------------------------------------------------------------------

loc_1000C55E:				; CODE XREF: sub_1000C3F0+164j
		xor	ecx, ecx

loc_1000C560:				; CODE XREF: sub_1000C3F0+16Cj
		push	eax		; int
		push	ecx		; void *
		push	ebx		; size_t
		push	[esp+1Ch+arg_4]	; void *
		push	esi		; int
		call	sub_1000C7F0
		add	esp, 14h
		mov	dword ptr [esi+20D4h], 0
		mov	edi, eax

loc_1000C57C:				; CODE XREF: sub_1000C3F0+12Ej
		push	dword ptr [esi]
		call	ds:PR_Unlock
		add	esp, 4

loc_1000C587:				; CODE XREF: sub_1000C3F0+8Bj
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
sub_1000C3F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C590(void	*, size_t, int,	int, void *, int)
sub_1000C590	proc near		; CODE XREF: sub_1000C750+36p
					; sub_1000C750+4Cp ...

var_139		= byte ptr -139h
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= byte ptr -12Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 13Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+13Ch+var_4], eax
		mov	eax, [esp+13Ch+arg_8]
		push	ebx
		mov	ebx, [esp+140h+arg_10]
		push	esi
		mov	esi, [esp+144h+arg_4]
		mov	[esp+144h+var_138], eax
		mov	[esp+144h+var_139], 1
		push	edi
		mov	edi, [esp+148h+arg_0]
		lea	eax, ds:0[esi*8]
		bswap	eax
		mov	[esp+148h+var_130], eax
		test	esi, esi
		jz	loc_1000C66A
		push	ebp
		mov	ebp, [esp+14Ch+arg_14]
		lea	esp, [esp+0]

loc_1000C5F0:				; CODE XREF: sub_1000C590+D7j
		lea	eax, [esp+14Ch+var_12C]
		push	eax		; void *
		call	sub_10004370
		push	1		; int
		lea	eax, [esp+154h+var_139]
		push	eax		; void *
		lea	eax, [esp+158h+var_12C]
		push	eax		; void *
		call	sub_10006FD0
		push	4		; int
		lea	eax, [esp+160h+var_130]
		push	eax		; void *
		lea	eax, [esp+164h+var_12C]
		push	eax		; void *
		call	sub_10006FD0
		push	[esp+168h+arg_C] ; int
		lea	eax, [esp+16Ch+var_12C]
		push	[esp+16Ch+var_138] ; void *
		push	eax		; void *
		call	sub_10006FD0
		add	esp, 28h
		test	ebx, ebx
		jz	short loc_1000C647
		push	ebp		; int
		lea	eax, [esp+150h+var_12C]
		push	ebx		; void *
		push	eax		; void *
		call	sub_10006FD0
		add	esp, 0Ch

loc_1000C647:				; CODE XREF: sub_1000C590+A6j
		push	esi		; size_t
		lea	eax, [esp+150h+var_134]
		push	eax		; int
		lea	eax, [esp+154h+var_12C]
		push	edi		; void *
		push	eax		; void *
		call	sub_10006CC0
		add	edi, [esp+15Ch+var_134]
		add	esp, 10h
		inc	[esp+14Ch+var_139]
		sub	esi, [esp+14Ch+var_134]
		jnz	short loc_1000C5F0
		pop	ebp

loc_1000C66A:				; CODE XREF: sub_1000C590+4Bj
		mov	ecx, [esp+148h+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 13Ch
		retn
sub_1000C590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C690(int,	void *,	size_t)
sub_1000C690	proc near		; CODE XREF: sub_1000C7F0+20Ep

var_168		= dword	ptr -168h
var_164		= byte ptr -164h
var_3C		= byte ptr -3Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 168h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+168h+var_4], eax
		push	ebx
		push	esi
		mov	esi, [esp+170h+arg_0]
		mov	ecx, 0Dh
		push	edi
		add	esi, 5
		mov	ebx, [esp+174h+arg_4]
		lea	edi, [esp+174h+var_3C]
		rep movsd
		movsw
		movsb
		mov	esi, [esp+174h+arg_8]
		test	esi, esi
		jz	short loc_1000C730

loc_1000C6D4:				; CODE XREF: sub_1000C690+9Ej
		lea	eax, [esp+174h+var_164]
		push	eax		; void *
		call	sub_10004370
		push	37h		; int
		lea	eax, [esp+17Ch+var_3C]
		push	eax		; void *
		lea	eax, [esp+180h+var_164]
		push	eax		; void *
		call	sub_10006FD0
		push	esi		; size_t
		lea	eax, [esp+188h+var_168]
		push	eax		; int
		lea	eax, [esp+18Ch+var_164]
		push	ebx		; void *
		push	eax		; void *
		call	sub_10006CC0
		add	ebx, [esp+194h+var_168]
		add	esp, 20h
		mov	eax, 36h
		sub	esi, [esp+174h+var_168]
		jz	short loc_1000C72C

loc_1000C715:				; CODE XREF: sub_1000C690+9Aj
		test	eax, eax
		js	short loc_1000C72C
		inc	[esp+eax+174h+var_3C]
		mov	cl, [esp+eax+174h+var_3C]
		dec	eax
		test	cl, cl
		jz	short loc_1000C715

loc_1000C72C:				; CODE XREF: sub_1000C690+83j
					; sub_1000C690+87j
		test	esi, esi
		jnz	short loc_1000C6D4

loc_1000C730:				; CODE XREF: sub_1000C690+42j
		mov	ecx, [esp+174h+var_4]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 168h
		retn
sub_1000C690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C750(void	*)
sub_1000C750	proc near		; CODE XREF: sub_1000C260+18p

var_74		= byte ptr -74h
var_3D		= byte ptr -3Dh
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 74h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+74h+var_4], eax
		mov	eax, dword_1004E3E0
		push	ebx
		push	esi
		mov	esi, [esp+7Ch+arg_0]
		push	edi
		push	dword ptr [eax]
		call	ds:PR_DestroyLock
		push	0		; int
		push	0		; void *
		push	37h		; int
		lea	edi, [esi+3Ch]
		push	edi		; int
		lea	eax, [esp+94h+var_74]
		push	37h		; size_t
		push	eax		; void *
		call	sub_1000C590
		push	0		; int
		push	0		; void *
		push	37h		; int
		lea	ebx, [esi+5]
		push	ebx		; int
		lea	eax, [esp+0ACh+var_3D]
		push	37h		; size_t
		push	eax		; void *
		call	sub_1000C590
		push	20DCh		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		mov	ecx, 0Dh
		lea	esi, [esp+0C0h+var_74]
		rep movsd
		mov	ecx, 0Dh
		add	esp, 40h
		movsw
		movsb
		mov	edi, ebx
		lea	esi, [esp+80h+var_3D]
		rep movsd
		mov	ecx, [esp+80h+var_4]
		movsw
		movsb
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
sub_1000C750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C7F0(int,	void *,	size_t,	void *,	int)
sub_1000C7F0	proc near		; CODE XREF: sub_1000BDA0+51p
					; sub_1000C3F0+118p ...

var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= byte ptr -14Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 16Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+16Ch+var_4], eax
		mov	ecx, [esp+16Ch+arg_4]
		push	ebx
		mov	ebx, [esp+170h+arg_C]
		push	edi
		mov	edi, [esp+174h+arg_0]
		mov	[esp+174h+var_154], edi
		mov	[esp+174h+var_158], ecx
		cmp	dword ptr [edi+20D8h], 0
		jnz	short loc_1000C853
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 16Ch
		retn
; ---------------------------------------------------------------------------

loc_1000C853:				; CODE XREF: sub_1000C7F0+3Aj
		push	ebp
		push	esi
		test	ebx, ebx
		jz	loc_1000C9E1
		lea	eax, [esp+17Ch+var_14C]
		mov	byte ptr [edi+4], 2
		lea	esi, [edi+4]
		push	eax		; void *
		call	sub_10004370
		push	38h		; int
		lea	eax, [esp+184h+var_14C]
		push	esi		; void *
		push	eax		; void *
		call	sub_10006FD0
		push	[esp+18Ch+arg_10] ; int
		lea	eax, [esp+190h+var_14C]
		push	ebx		; void *
		push	eax		; void *
		call	sub_10006FD0
		push	20h		; size_t
		push	0		; int
		lea	eax, [esp+1A0h+var_24]
		push	eax		; void *
		lea	eax, [esp+1A4h+var_14C]
		push	eax		; void *
		call	sub_10006CC0
		lea	ecx, [esp+1A8h+var_24]
		xor	edx, edx
		dec	ecx
		lea	eax, [esp+1A8h+var_24]
		sub	eax, ecx
		lea	ebx, [esi+36h]
		mov	[esp+1A8h+var_150], eax
		add	esp, 2Ch
		lea	eax, [esp+17Ch+var_24]
		sub	eax, ecx
		lea	ebp, [ecx+1Fh]
		add	eax, 0FFFFFFFEh
		mov	[esp+17Ch+var_15C], eax
		lea	eax, [esp+17Ch+var_24]
		sub	eax, ecx
		add	eax, 0FFFFFFFDh
		mov	[esp+17Ch+var_164], eax
		mov	eax, edi
		sub	eax, esi
		add	eax, 5
		mov	[esp+17Ch+var_16C], eax
		mov	eax, edi
		sub	eax, esi
		add	eax, 3
		mov	[esp+17Ch+var_168], eax
		mov	eax, edi
		mov	edi, [esp+17Ch+var_150]
		sub	eax, esi
		add	eax, 2
		lea	esi, [edx+8]
		mov	[esp+17Ch+var_160], eax
		jmp	short loc_1000C910
; ---------------------------------------------------------------------------
		align 10h

loc_1000C910:				; CODE XREF: sub_1000C7F0+11Bj
					; sub_1000C7F0+18Fj
		mov	eax, [esp+17Ch+var_16C]
		lea	ebx, [ebx-4]
		movzx	ecx, byte ptr [edi+ebp]
		lea	ebp, [ebp-4]
		movzx	eax, byte ptr [eax+ebx+4]
		add	edx, eax
		mov	eax, [esp+17Ch+var_16C]
		add	edx, ecx
		mov	[eax+ebx+4], dl
		movzx	eax, byte ptr [ebp+4]
		shr	edx, 8
		add	edx, eax
		movzx	eax, byte ptr [ebx+4]
		add	edx, eax
		mov	eax, [esp+17Ch+var_15C]
		mov	[ebx+4], dl
		shr	edx, 8
		movzx	ecx, byte ptr [eax+ebp+4]
		add	ecx, edx
		mov	edx, [esp+17Ch+var_168]
		movzx	eax, byte ptr [edx+ebx+4]
		add	ecx, eax
		mov	eax, [esp+17Ch+var_164]
		mov	[edx+ebx+4], cl
		shr	ecx, 8
		movzx	edx, byte ptr [eax+ebp+4]
		add	edx, ecx
		mov	ecx, [esp+17Ch+var_160]
		movzx	eax, byte ptr [ecx+ebx+4]
		add	edx, eax
		mov	[ecx+ebx+4], dl
		shr	edx, 8
		dec	esi
		jnz	short loc_1000C910
		mov	edi, [esp+17Ch+var_154]
		test	edx, edx
		jz	short loc_1000C9A3
		mov	edx, 0FFFFFFFBh
		lea	ecx, [edi+1Bh]
		sub	edx, edi

loc_1000C993:				; CODE XREF: sub_1000C7F0+1B1j
		lea	eax, [edx+ecx]
		test	eax, eax
		js	short loc_1000C9A3
		inc	byte ptr [ecx]
		mov	al, [ecx]
		dec	ecx
		test	al, al
		jz	short loc_1000C993

loc_1000C9A3:				; CODE XREF: sub_1000C7F0+197j
					; sub_1000C7F0+1A8j
		mov	ecx, [esp+17Ch+var_158]
		xor	eax, eax
		mov	[esp+17Ch+var_24], eax
		mov	[esp+17Ch+var_20], eax
		mov	[esp+17Ch+var_1C], eax
		mov	[esp+17Ch+var_18], eax
		mov	[esp+17Ch+var_14], eax
		mov	[esp+17Ch+var_10], eax
		mov	[esp+17Ch+var_C], eax
		mov	[esp+17Ch+var_8], eax

loc_1000C9E1:				; CODE XREF: sub_1000C7F0+67j
		mov	eax, [esp+17Ch+arg_8]
		cmp	eax, 20h
		jnz	short loc_1000C9FB
		push	37h		; int
		lea	eax, [edi+5]
		push	eax		; void *
		push	ecx		; void *
		call	sub_10006F30
		jmp	short loc_1000CA03
; ---------------------------------------------------------------------------

loc_1000C9FB:				; CODE XREF: sub_1000C7F0+1FBj
		push	eax		; size_t
		push	ecx		; void *
		push	edi		; int
		call	sub_1000C690

loc_1000CA03:				; CODE XREF: sub_1000C7F0+209j
		add	esp, 0Ch
		mov	byte ptr [edi+4], 3
		lea	esi, [edi+4]
		lea	eax, [esp+17Ch+var_24]
		push	38h		; int
		push	esi		; void *
		push	eax		; void *
		call	sub_10006F30
		lea	ecx, [esp+188h+var_24]
		xor	edx, edx
		dec	ecx
		lea	eax, [esp+188h+var_24]
		sub	eax, ecx
		lea	ebx, [esi+36h]
		mov	[esp+188h+var_158], eax
		add	esp, 0Ch
		lea	eax, [esp+17Ch+var_24]
		sub	eax, ecx
		lea	ebp, [ecx+1Fh]
		add	eax, 0FFFFFFFEh
		mov	[esp+17Ch+var_160], eax
		lea	eax, [esp+17Ch+var_24]
		sub	eax, ecx
		add	eax, 0FFFFFFFDh
		mov	[esp+17Ch+var_168], eax
		lea	eax, [edi+5]
		sub	eax, esi
		mov	[esp+17Ch+var_16C], eax
		mov	eax, edi
		sub	eax, esi
		add	eax, 3
		mov	[esp+17Ch+var_164], eax
		mov	eax, edi
		mov	edi, [esp+17Ch+var_158]
		sub	eax, esi
		add	eax, 2
		lea	esi, [edx+8]
		mov	[esp+17Ch+var_15C], eax

loc_1000CA83:				; CODE XREF: sub_1000C7F0+302j
		mov	eax, [esp+17Ch+var_16C]
		lea	ebx, [ebx-4]
		movzx	ecx, byte ptr [edi+ebp]
		lea	ebp, [ebp-4]
		movzx	eax, byte ptr [ebx+eax+4]
		add	edx, eax
		mov	eax, [esp+17Ch+var_16C]
		add	edx, ecx
		mov	[ebx+eax+4], dl
		movzx	eax, byte ptr [ebp+4]
		shr	edx, 8
		add	edx, eax
		movzx	eax, byte ptr [ebx+4]
		add	edx, eax
		mov	eax, [esp+17Ch+var_160]
		mov	[ebx+4], dl
		shr	edx, 8
		movzx	ecx, byte ptr [eax+ebp+4]
		add	ecx, edx
		mov	edx, [esp+17Ch+var_164]
		movzx	eax, byte ptr [ebx+edx+4]
		add	ecx, eax
		mov	eax, [esp+17Ch+var_168]
		mov	[ebx+edx+4], cl
		shr	ecx, 8
		movzx	edx, byte ptr [eax+ebp+4]
		add	edx, ecx
		mov	ecx, [esp+17Ch+var_15C]
		movzx	eax, byte ptr [ebx+ecx+4]
		add	edx, eax
		mov	[ebx+ecx+4], dl
		shr	edx, 8
		dec	esi
		jnz	short loc_1000CA83
		mov	edi, [esp+17Ch+var_154]
		test	edx, edx
		jz	short loc_1000CB16
		mov	edx, 0FFFFFFFBh
		lea	ecx, [edi+1Bh]
		sub	edx, edi

loc_1000CB06:				; CODE XREF: sub_1000C7F0+324j
		lea	eax, [edx+ecx]
		test	eax, eax
		js	short loc_1000CB16
		inc	byte ptr [ecx]
		mov	al, [ecx]
		dec	ecx
		test	al, al
		jz	short loc_1000CB06

loc_1000CB16:				; CODE XREF: sub_1000C7F0+30Aj
					; sub_1000C7F0+31Bj
		xor	ebx, ebx
		lea	ecx, [edi+5]
		mov	ebp, edi
		lea	edx, [ecx+36h]
		sub	ebp, ecx
		lea	esi, [ebx+36h]

loc_1000CB25:				; CODE XREF: sub_1000C7F0+34Bj
		movzx	eax, byte ptr [edx]
		lea	edx, [edx-1]
		movzx	ecx, byte ptr [edx+ebp+3Dh]
		add	ebx, eax
		add	ebx, ecx
		mov	[edx+1], bl
		shr	ebx, 8
		dec	esi
		jns	short loc_1000CB25
		movzx	ecx, byte ptr [edi+0B0h]
		movzx	eax, byte ptr [edi+3Bh]
		add	ecx, eax
		movzx	eax, byte ptr [edi+3Ah]
		mov	[edi+3Bh], cl
		movzx	edx, byte ptr [edi+0AFh]
		shr	ecx, 8
		add	edx, ecx
		add	edx, eax
		movzx	eax, byte ptr [edi+39h]
		mov	[edi+3Ah], dl
		movzx	ecx, byte ptr [edi+0AEh]
		shr	edx, 8
		add	ecx, edx
		add	ecx, eax
		movzx	eax, byte ptr [edi+38h]
		mov	[edi+39h], cl
		movzx	edx, byte ptr [edi+0ADh]
		shr	ecx, 8
		add	edx, ecx
		add	edx, eax
		movzx	eax, byte ptr [edi+37h]
		mov	[edi+38h], dl
		movzx	ecx, byte ptr [edi+0ACh]
		shr	edx, 8
		add	ecx, edx
		add	ecx, eax
		movzx	eax, byte ptr [edi+36h]
		mov	[edi+37h], cl
		movzx	edx, byte ptr [edi+0ABh]
		shr	ecx, 8
		add	edx, ecx
		add	edx, eax
		movzx	eax, byte ptr [edi+35h]
		mov	[edi+36h], dl
		movzx	ecx, byte ptr [edi+0AAh]
		shr	edx, 8
		add	ecx, edx
		add	ecx, eax
		mov	[edi+35h], cl
		shr	ecx, 8
		test	ecx, ecx
		jz	short loc_1000CBF0
		mov	edx, 0FFFFFFFBh
		lea	eax, [edi+34h]
		sub	edx, edi
		lea	esp, [esp+0]

loc_1000CBE0:				; CODE XREF: sub_1000C7F0+3FEj
		lea	ecx, [edx+eax]
		test	ecx, ecx
		js	short loc_1000CBF0
		inc	byte ptr [eax]
		mov	cl, [eax]
		dec	eax
		test	cl, cl
		jz	short loc_1000CBE0

loc_1000CBF0:				; CODE XREF: sub_1000C7F0+3E0j
					; sub_1000C7F0+3F5j
		mov	ecx, 6

loc_1000CBF5:				; CODE XREF: sub_1000C7F0+41Aj
		test	ecx, ecx
		js	short loc_1000CC0C
		inc	byte ptr [edi+ecx+0AAh]
		mov	al, [edi+ecx+0AAh]
		dec	ecx
		test	al, al
		jz	short loc_1000CBF5

loc_1000CC0C:				; CODE XREF: sub_1000C7F0+407j
		lea	ecx, [edi+5]
		mov	esi, 33h
		lea	edx, [edi+73h]

loc_1000CC17:				; CODE XREF: sub_1000C7F0+436j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_1000CC54
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1000CC17
		mov	ax, [ecx]
		cmp	ax, [edx]
		jnz	short loc_1000CC54
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_1000CC54
		push	0FFFFE001h
		mov	dword ptr [edi+20D8h], 0
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000CC66
; ---------------------------------------------------------------------------

loc_1000CC54:				; CODE XREF: sub_1000C7F0+42Bj
					; sub_1000C7F0+43Ej ...
		lea	esi, [edi+5]
		mov	ecx, 0Dh
		add	edi, 73h
		xor	eax, eax
		rep movsd
		movsw
		movsb

loc_1000CC66:				; CODE XREF: sub_1000C7F0+462j
		mov	ecx, [esp+17Ch+var_4]
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 16Ch
		retn
sub_1000C7F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CC80	proc near		; CODE XREF: sub_1000BE00+96p
					; sub_1000BF20+6Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		cmp	eax, 37h
		jnb	short loc_1000CC9A
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000CC9A:				; CODE XREF: sub_1000CC80+7j
		push	esi
		mov	esi, [esp+4+arg_0]
		push	0		; int
		push	0		; void *
		push	eax		; int
		push	[esp+10h+arg_4]	; int
		lea	eax, [esi+5]
		push	37h		; size_t
		push	eax		; void *
		call	sub_1000C590
		push	0		; int
		push	0		; void *
		lea	eax, [esi+4]
		mov	byte ptr [eax],	0
		push	38h		; int
		push	eax		; int
		lea	eax, [esi+3Ch]
		push	37h		; size_t
		push	eax		; void *
		call	sub_1000C590
		xor	eax, eax
		add	esp, 30h
		mov	[esi+0AAh], eax
		mov	[esi+0AEh], ax
		mov	byte ptr [esi+0B0h], 1
		pop	esi
		retn
sub_1000CC80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CCF0(int,	void *,	size_t,	int, int)
sub_1000CCF0	proc near		; CODE XREF: sub_1000BDA0+30p
					; sub_1000BEC0+4Dp ...

var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_3C		= byte ptr -3Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 80h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+80h+var_4], eax
		mov	eax, [esp+80h+arg_C]
		push	ebx
		mov	ebx, [esp+84h+arg_0]
		push	ebp
		mov	ebp, [esp+88h+arg_8]
		push	esi
		mov	esi, [esp+8Ch+arg_4]
		mov	[esp+8Ch+var_78], ebx
		mov	[esp+8Ch+var_7C], eax
		push	edi
		lea	edi, [esp+90h+var_74]
		mov	[esp+90h+var_80], edi
		test	esi, esi
		jnz	short loc_1000CD48
		lea	eax, [esp+90h+var_3C]
		push	37h
		push	eax
		call	sub_10001320
		add	esp, 8
		mov	ebp, eax
		jmp	short loc_1000CD71
; ---------------------------------------------------------------------------

loc_1000CD48:				; CODE XREF: sub_1000CCF0+43j
		cmp	ebp, 37h
		jbe	short loc_1000CD63
		lea	eax, [ebp+38h]
		push	eax
		call	PORT_Alloc_Util
		mov	edi, eax
		mov	[esp+94h+var_80], eax
		add	esp, 4
		test	edi, edi
		jz	short loc_1000CD83

loc_1000CD63:				; CODE XREF: sub_1000CCF0+5Bj
		push	ebp		; size_t
		lea	eax, [edi+38h]
		push	esi		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000CD71:				; CODE XREF: sub_1000CCF0+56j
		cmp	ebp, 20h
		jnb	short loc_1000CD88
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4

loc_1000CD83:				; CODE XREF: sub_1000CCF0+71j
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000CE04
; ---------------------------------------------------------------------------

loc_1000CD88:				; CODE XREF: sub_1000CCF0+84j
		push	[esp+90h+arg_10] ; int
		add	ebx, 4
		mov	ecx, 0Eh
		push	[esp+94h+var_7C] ; void	*
		mov	esi, ebx
		mov	byte ptr [ebx],	1
		rep movsd
		mov	edi, [esp+98h+var_80]
		lea	esi, [ebp+38h]
		mov	ebp, [esp+98h+var_78]
		push	esi		; int
		push	edi		; int
		push	37h		; size_t
		lea	eax, [ebp+5]
		push	eax		; void *
		call	sub_1000C590
		push	esi		; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		push	0		; int
		push	0		; void *
		push	38h		; int
		push	ebx		; int
		lea	eax, [ebp+3Ch]
		mov	byte ptr [ebx],	0
		push	37h		; size_t
		push	eax		; void *
		call	sub_1000C590
		xor	eax, eax
		add	esp, 3Ch
		mov	[ebp+0AAh], eax
		mov	[ebp+0AEh], ax
		lea	eax, [esp+90h+var_74]
		mov	byte ptr [ebp+0B0h], 1
		cmp	edi, eax
		jz	short loc_1000CE02
		push	edi
		call	PORT_Free_Util
		add	esp, 4

loc_1000CE02:				; CODE XREF: sub_1000CCF0+107j
		xor	eax, eax

loc_1000CE04:				; CODE XREF: sub_1000CCF0+96j
		mov	ecx, [esp+90h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 80h
		retn
sub_1000CCF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CE20	proc near		; DATA XREF: sub_1000C240o

var_74		= byte ptr -74h
var_4		= dword	ptr -4

		sub	esp, 74h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+74h+var_4], eax
		cmp	dword_1004E3E0,	0
		push	edi
		jnz	loc_1000CF22
		mov	dword_1004E3E0,	offset dword_1004E3F0
		call	ds:PR_NewLock
		mov	ecx, dword_1004E3E0
		mov	[ecx], eax
		test	eax, eax
		jnz	short loc_1000CE7D
		push	0FFFFE890h
		mov	dword_1004E3E0,	eax
		call	PORT_SetError_Util
		add	esp, 4

loc_1000CE6A:				; CODE XREF: sub_1000CE20+D4j
		or	eax, 0FFFFFFFFh
		pop	edi
		mov	ecx, [esp+74h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_1000CE7D:				; CODE XREF: sub_1000CE20+36j
		lea	eax, [esp+78h+var_74]
		push	6Eh
		push	eax
		call	sub_10001320
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_1000CF34
		push	esi
		mov	esi, dword_1004E3E0
		cmp	byte ptr [esi+5], 0
		jnz	short loc_1000CEB4
		push	edi
		lea	eax, [esp+80h+var_74]
		push	eax
		push	esi
		call	sub_1000CC80
		add	esp, 0Ch
		jmp	short loc_1000CEDF
; ---------------------------------------------------------------------------

loc_1000CEB4:				; CODE XREF: sub_1000CE20+81j
		call	sub_1000BF20
		test	eax, eax
		jz	short loc_1000CECC
		mov	dword ptr [esi+20D8h], 0
		or	esi, 0FFFFFFFFh
		jmp	short loc_1000CEE1
; ---------------------------------------------------------------------------

loc_1000CECC:				; CODE XREF: sub_1000CE20+9Bj
		push	0		; int
		push	0		; int
		push	edi		; size_t
		lea	eax, [esp+88h+var_74]
		push	eax		; void *
		push	esi		; int
		call	sub_1000CCF0
		add	esp, 14h

loc_1000CEDF:				; CODE XREF: sub_1000CE20+92j
		mov	esi, eax

loc_1000CEE1:				; CODE XREF: sub_1000CE20+AAj
		push	edi		; size_t
		lea	eax, [esp+80h+var_74]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		test	esi, esi
		pop	esi
		jnz	loc_1000CE6A
		mov	eax, dword_1004E3E0
		lea	ecx, [esp+78h+var_74]
		push	0		; int
		push	0		; void *
		push	20h		; size_t
		push	ecx		; void *
		push	eax		; int
		mov	dword ptr [eax+20D8h], 1
		call	sub_1000C7F0
		add	esp, 14h
		call	sub_10001120

loc_1000CF22:				; CODE XREF: sub_1000CE20+16j
		xor	eax, eax
		pop	edi
		mov	ecx, [esp+74h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_1000CF34:				; CODE XREF: sub_1000CE20+70j
		mov	eax, dword_1004E3E0
		push	dword ptr [eax]
		call	ds:PR_DestroyLock
		mov	eax, dword_1004E3E0
		add	esp, 4
		mov	ecx, [esp+78h+var_4]
		mov	dword_1004E3E0,	0
		pop	edi
		mov	dword ptr [eax], 0
		xor	ecx, esp
		or	eax, 0FFFFFFFFh
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
sub_1000CE20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CF70(int,	int, void *, size_t)
sub_1000CF70	proc near		; CODE XREF: sub_1000EC70+16Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 10h
		jbe	short loc_1000CF87
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000CF87:				; CODE XREF: sub_1000CF70+5j
		push	esi
		push	18h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1000CF9A
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000CF9A:				; CODE XREF: sub_1000CF70+26j
		push	[esp+4+arg_C]	; size_t
		lea	eax, [esi+8]
		push	[esp+8+arg_8]	; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+10h+arg_4]
		add	esp, 0Ch
		mov	[esi], eax
		mov	eax, [esp+4+arg_0]
		mov	[esi+4], eax
		mov	eax, esi
		pop	esi
		retn
sub_1000CF70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CFC0(int,	void *,	int, int, void *, size_t, size_t)
sub_1000CFC0	proc near		; DATA XREF: sub_1000EC70+186o

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_34		= byte ptr -34h
var_24		= byte ptr -24h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 58h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+58h+var_4], eax
		mov	eax, [esp+58h+arg_0]
		mov	ecx, [esp+58h+arg_4]
		push	ebx
		mov	ebx, [esp+5Ch+arg_10]
		push	ebp
		mov	ebp, [esp+60h+arg_14]
		push	edi
		mov	edi, [esp+64h+arg_18]
		mov	[esp+64h+var_50], eax
		mov	eax, [esp+64h+arg_8]
		mov	[esp+64h+var_54], ecx
		mov	[esp+64h+var_48], eax
		cmp	ebp, edi
		jnb	short loc_1000D01E
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1000D01E:				; CODE XREF: sub_1000CFC0+3Aj
		cmp	[esp+64h+arg_C], ebp
		jnb	short loc_1000D048
		push	0FFFFE003h
		mov	[eax], ebp
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1000D048:				; CODE XREF: sub_1000CFC0+62j
		xor	edx, edx
		mov	eax, ebp
		div	edi
		push	esi
		mov	esi, eax
		mov	eax, ebp
		imul	esi, edi
		sub	eax, esi
		mov	[esp+68h+var_4C], esi
		mov	[esp+68h+var_58], eax
		jz	short loc_1000D0BB
		cmp	ebx, ecx
		jz	short loc_1000D075
		push	ebp		; size_t
		push	ebx		; void *
		push	ecx		; void *
		call	memcpy
		mov	ebx, [esp+74h+var_54]
		add	esp, 0Ch

loc_1000D075:				; CODE XREF: sub_1000CFC0+A4j
		mov	esi, ebp
		sub	esi, edi
		push	edi		; size_t
		lea	eax, [esi+ebx]
		push	eax		; void *
		lea	eax, [esp+70h+var_44]
		push	eax		; void *
		call	memcpy
		mov	ecx, [esp+74h+var_58]
		sub	esi, ecx
		push	ecx		; size_t
		sub	ebp, ecx
		add	ebp, [esp+78h+var_54]
		lea	eax, [esi+ebx]
		push	eax		; void *
		push	ebp		; void *
		call	memcpy
		mov	ebp, [esp+80h+var_54]
		lea	eax, [esp+80h+var_44]
		push	edi		; size_t
		push	eax		; void *
		lea	eax, [esi+ebp]
		push	eax		; void *
		call	memcpy
		mov	esi, [esp+8Ch+var_4C]
		add	esp, 24h
		jmp	short loc_1000D0BD
; ---------------------------------------------------------------------------

loc_1000D0BB:				; CODE XREF: sub_1000CFC0+A0j
		mov	ebp, ecx

loc_1000D0BD:				; CODE XREF: sub_1000CFC0+F9j
		lea	ecx, [edi+edi]
		cmp	esi, ecx
		jnb	short loc_1000D0CD
		mov	eax, [esp+68h+var_50]
		add	eax, 8
		jmp	short loc_1000D0D3
; ---------------------------------------------------------------------------

loc_1000D0CD:				; CODE XREF: sub_1000CFC0+102j
		mov	eax, ebx
		sub	eax, ecx
		add	eax, esi

loc_1000D0D3:				; CODE XREF: sub_1000CFC0+10Bj
		push	edi		; size_t
		push	eax		; void *
		lea	eax, [esp+70h+var_24]
		push	eax		; void *
		call	memcpy
		mov	eax, ebx
		sub	eax, edi
		add	eax, esi
		push	edi		; size_t
		push	eax		; void *
		lea	eax, [esp+7Ch+var_34]
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+80h+var_50]
		push	edi
		push	esi
		push	ebx
		push	[esp+8Ch+arg_C]
		push	[esp+90h+var_48]
		push	ebp
		push	dword ptr [eax+4]
		mov	eax, [eax]
		call	eax
		add	esp, 34h
		test	eax, eax
		jnz	loc_1000D1D6
		mov	eax, [esp+68h+var_48]
		add	ebx, esi
		cmp	[esp+68h+var_58], 0
		mov	[eax], esi
		jz	loc_1000D257
		push	edi		; size_t
		lea	eax, [esp+6Ch+var_44]
		add	ebp, esi
		push	0		; int
		push	eax		; void *
		call	memset
		mov	esi, [esp+74h+var_58]
		lea	eax, [esp+74h+var_44]
		push	esi		; size_t
		push	ebx		; void *
		push	eax		; void *
		call	memcpy
		push	esi		; size_t
		lea	eax, [esp+84h+var_14]
		push	ebx		; void *
		push	eax		; void *
		call	memcpy
		mov	esi, ebp
		add	esp, 24h
		sub	esi, edi
		xor	ecx, ecx
		test	edi, edi
		jz	short loc_1000D16E

loc_1000D161:				; CODE XREF: sub_1000CFC0+1ACj
		mov	al, [esp+ecx+68h+var_24]
		xor	[esp+ecx+68h+var_44], al
		inc	ecx
		cmp	ecx, edi
		jb	short loc_1000D161

loc_1000D16E:				; CODE XREF: sub_1000CFC0+19Fj
		xor	edx, edx
		test	edi, edi
		jz	short loc_1000D190
		mov	ebx, esi
		lea	eax, [esp+68h+var_44]
		sub	ebx, eax
		lea	esp, [esp+0]

loc_1000D180:				; CODE XREF: sub_1000CFC0+1CEj
		lea	ecx, [esp+68h+var_44]
		add	ecx, edx
		inc	edx
		mov	al, [ebx+ecx]
		xor	[ecx], al
		cmp	edx, edi
		jb	short loc_1000D180

loc_1000D190:				; CODE XREF: sub_1000CFC0+1B2j
		mov	ebx, [esp+68h+var_58]
		lea	eax, [esp+68h+var_44]
		push	ebx		; size_t
		push	eax		; void *
		push	ebp		; void *
		call	memcpy
		mov	eax, [esp+74h+var_48]
		push	ebx		; size_t
		add	[eax], ebx
		lea	eax, [esp+78h+var_14]
		push	eax		; void *
		lea	eax, [esp+7Ch+var_44]
		push	eax		; void *
		call	memcpy
		mov	ebx, [esp+80h+var_50]
		lea	eax, [esp+80h+var_44]
		push	edi
		push	edi
		push	eax
		push	edi
		lea	eax, [esp+90h+var_4C]
		push	eax
		mov	eax, [ebx]
		push	esi
		push	dword ptr [ebx+4]
		call	eax
		add	esp, 34h
		test	eax, eax
		jz	short loc_1000D1EC

loc_1000D1D6:				; CODE XREF: sub_1000CFC0+150j
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1000D1EC:				; CODE XREF: sub_1000CFC0+214j
		test	edi, edi
		jz	short loc_1000D22C
		lea	ebx, [esp+68h+var_24]
		mov	ecx, esi
		sub	ebx, esi
		mov	edx, edi
		lea	ebx, [ebx+0]

loc_1000D200:				; CODE XREF: sub_1000CFC0+24Aj
		mov	al, [ebx+ecx]
		lea	ecx, [ecx+1]
		xor	[ecx-1], al
		dec	edx
		jnz	short loc_1000D200
		mov	ebx, [esp+68h+var_50]
		test	edi, edi
		jz	short loc_1000D22C
		lea	edx, [esp+68h+var_34]
		mov	ecx, edi
		sub	edx, esi
		lea	esp, [esp+0]

loc_1000D220:				; CODE XREF: sub_1000CFC0+26Aj
		mov	al, [edx+esi]
		lea	esi, [esi+1]
		xor	[esi-1], al
		dec	ecx
		jnz	short loc_1000D220

loc_1000D22C:				; CODE XREF: sub_1000CFC0+22Ej
					; sub_1000CFC0+252j
		push	edi		; size_t
		lea	eax, [esp+6Ch+var_34]
		push	eax		; void *
		lea	eax, [ebx+8]
		push	eax		; void *
		call	memcpy
		push	edi
		push	edi
		lea	eax, [esp+7Ch+var_34]
		push	eax
		push	edi
		lea	eax, [esp+84h+var_4C]
		push	eax
		lea	eax, [esp+88h+var_44]
		push	eax
		push	dword ptr [ebx+4]
		mov	eax, [ebx]
		call	eax
		add	esp, 28h

loc_1000D257:				; CODE XREF: sub_1000CFC0+163j
		mov	ecx, [esp+68h+var_4]
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
sub_1000CFC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D270	proc near		; DATA XREF: sub_1000EC70:loc_1000ED57o
					; sub_1000EC70:loc_1000EDFBo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jz	short locret_1000D281
		push	[esp+arg_0]
		call	PORT_Free_Util
		pop	ecx

locret_1000D281:			; CODE XREF: sub_1000D270+5j
		retn
sub_1000D270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D290	proc near		; DATA XREF: sub_1000EC70+17Do

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 28h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		mov	eax, [esp+28h+arg_0]
		push	ebx
		mov	ebx, [esp+2Ch+arg_8]
		push	esi
		mov	esi, [esp+30h+arg_14]
		mov	[esp+30h+var_28], eax
		mov	eax, [esp+30h+arg_4]
		push	edi
		mov	edi, [esp+34h+arg_18]
		mov	[esp+34h+var_24], eax
		mov	eax, [esp+34h+arg_10]
		mov	[esp+34h+var_20], eax
		cmp	esi, edi
		jnb	short loc_1000D2EB
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000D2EB:				; CODE XREF: sub_1000D290+37j
		mov	ecx, [esp+34h+arg_C]
		cmp	ecx, esi
		jnb	short loc_1000D317
		push	0FFFFE003h
		mov	[ebx], esi
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000D317:				; CODE XREF: sub_1000D290+61j
		xor	edx, edx
		mov	eax, esi
		div	edi
		push	ebp
		mov	ebp, eax
		mov	eax, [esp+38h+var_28]
		push	edi
		imul	ebp, edi
		push	ebp
		push	[esp+40h+var_20]
		push	ecx
		push	ebx
		push	[esp+4Ch+var_24]
		push	dword ptr [eax+4]
		mov	eax, [eax]
		call	eax
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000D357
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000D357:				; CODE XREF: sub_1000D290+AFj
		mov	[ebx], ebp
		sub	esi, ebp
		jnz	short loc_1000D372
		pop	ebp
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000D372:				; CODE XREF: sub_1000D290+CBj
		mov	eax, esi
		sub	eax, edi
		add	eax, ebp
		mov	[esp+38h+var_1C], eax
		mov	eax, [esp+38h+var_20]
		add	eax, ebp
		push	esi		; size_t
		push	eax		; void *
		lea	eax, [esp+40h+var_14]
		push	eax		; void *
		call	memcpy
		mov	eax, edi
		sub	eax, esi
		push	eax		; size_t
		lea	eax, [esp+48h+var_14]
		add	eax, esi
		push	0		; int
		push	eax		; void *
		call	memset
		mov	esi, [esp+50h+var_1C]
		lea	eax, [esp+50h+var_14]
		push	edi
		push	edi
		push	eax
		mov	eax, [esp+5Ch+arg_C]
		sub	eax, esi
		push	eax
		lea	eax, [esp+60h+var_18]
		push	eax
		mov	eax, [esp+64h+var_24]
		add	eax, esi
		push	eax
		mov	eax, [esp+68h+var_28]
		push	dword ptr [eax+4]
		mov	eax, [eax]
		call	eax
		add	esp, 34h
		test	eax, eax
		jnz	short loc_1000D3D6
		lea	ecx, [esi+edi]
		mov	[ebx], ecx

loc_1000D3D6:				; CODE XREF: sub_1000D290+13Fj
		mov	ecx, [esp+38h+var_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
sub_1000D290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000D3F0(int,	int, int, size_t)
sub_1000D3F0	proc near		; CODE XREF: sub_1000EC70+128p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	30h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1000D403
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D403:				; CODE XREF: sub_1000D3F0+Fj
		push	[esp+4+arg_C]	; size_t
		push	[esp+8+arg_8]	; int
		push	[esp+0Ch+arg_4]	; int
		push	[esp+10h+arg_0]	; int
		push	esi		; int
		call	sub_1000D470
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000D435
		push	30h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		push	esi
		call	PORT_Free_Util
		add	esp, 10h
		xor	esi, esi

loc_1000D435:				; CODE XREF: sub_1000D3F0+2Ej
		mov	eax, esi
		pop	esi
		retn
sub_1000D3F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000D440(void	*, int)
sub_1000D440	proc near		; CODE XREF: sub_1000D890+170p
					; sub_1000DB80+Bp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	30h		; size_t
		push	0		; int
		push	[esp+8+arg_0]	; void *
		call	memset
		add	esp, 0Ch
		cmp	[esp+arg_4], 0
		jz	short locret_1000D461
		push	[esp+arg_0]
		call	PORT_Free_Util
		pop	ecx

locret_1000D461:			; CODE XREF: sub_1000D440+15j
		retn
sub_1000D440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000D470(int,	int, int, int, size_t)
sub_1000D470	proc near		; CODE XREF: sub_1000D3F0+24p
					; sub_1000D890+112p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_C]
		mov	edx, [esi]
		test	edx, edx
		jz	short loc_1000D4CF
		mov	ecx, [esp+4+arg_10]
		lea	eax, ds:0[ecx*8]
		cmp	edx, eax
		ja	short loc_1000D4CF
		mov	edx, [esp+4+arg_0]
		mov	eax, [esp+4+arg_8]
		mov	[edx], eax
		mov	eax, [esp+4+arg_4]
		mov	[edx+2Ch], ecx
		mov	[edx+4], eax
		mov	eax, [esi]
		mov	[edx+28h], eax
		cmp	ecx, 10h
		ja	short loc_1000D4BD
		push	ecx		; size_t
		lea	eax, [esi+4]
		push	eax		; void *
		lea	eax, [edx+8]
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D4BD:				; CODE XREF: sub_1000D470+36j
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D4CF:				; CODE XREF: sub_1000D470+9j
					; sub_1000D470+18j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_1000D470	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D4F0	proc near		; CODE XREF: sub_1000D890+138p
					; sub_1000DA80+E3p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, [esp+arg_8]
		sub	esp, 10h
		push	esi
		mov	esi, [esp+14h+arg_14]
		cmp	[esp+14h+arg_C], esi
		jnb	short loc_1000D519
		push	0FFFFE003h
		mov	[eax], esi
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000D519:				; CODE XREF: sub_1000D4F0+10j
		mov	ecx, [esp+14h+arg_0]
		push	ebx
		mov	ebx, [esp+18h+arg_18]
		mov	dword ptr [eax], 0
		mov	edx, [ecx+2Ch]
		push	ebp
		push	edi
		cmp	edx, ebx
		jz	short loc_1000D587
		mov	eax, ebx
		sub	eax, edx
		mov	[esp+20h+arg_14], eax
		cmp	eax, esi
		jb	short loc_1000D543
		mov	eax, esi
		mov	[esp+20h+arg_14], esi

loc_1000D543:				; CODE XREF: sub_1000D4F0+4Bj
		mov	ebp, [esp+20h+arg_10]
		mov	edi, [esp+20h+arg_4]
		push	eax
		lea	eax, [ecx+18h]
		add	eax, edx
		push	eax
		push	ebp
		push	edi
		call	sub_1000D850
		mov	eax, [esp+30h+arg_14]
		add	esp, 10h
		mov	ecx, [esp+20h+arg_0]
		add	edi, eax
		mov	edx, [esp+20h+arg_8]
		add	ebp, eax
		mov	[esp+20h+arg_C], edi
		add	[ecx+2Ch], eax
		add	[edx], eax
		sub	esi, eax
		mov	[esp+20h+arg_14], esi
		jnz	short loc_1000D593
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000D587:				; CODE XREF: sub_1000D4F0+3Fj
		mov	edi, [esp+20h+arg_4]
		mov	ebp, [esp+20h+arg_10]
		mov	[esp+20h+arg_C], edi

loc_1000D593:				; CODE XREF: sub_1000D4F0+8Bj
		cmp	esi, ebx
		jb	loc_1000D656
		lea	eax, [ebx+7]
		add	eax, ecx
		lea	edx, [ecx+8]
		mov	[esp+20h+var_C], eax
		lea	eax, [ecx+18h]
		mov	[esp+20h+var_8], edx
		mov	[esp+20h+var_10], eax
		jmp	short loc_1000D5B8
; ---------------------------------------------------------------------------

loc_1000D5B4:				; CODE XREF: sub_1000D4F0+160j
		mov	ecx, [esp+20h+arg_0]

loc_1000D5B8:				; CODE XREF: sub_1000D4F0+C2j
		push	ebx
		push	ebx
		push	edx
		push	ebx
		lea	edx, [esp+30h+var_4]
		push	edx
		push	eax
		push	dword ptr [ecx+4]
		mov	eax, [ecx]
		call	eax
		mov	esi, [esp+3Ch+arg_0]
		add	esp, 1Ch
		mov	edx, [esp+20h+var_C]
		mov	[esp+20h+arg_C], eax
		mov	esi, [esi+28h]
		cmp	esi, 8
		jb	short loc_1000D5F1

loc_1000D5E0:				; CODE XREF: sub_1000D4F0+FFj
		inc	byte ptr [edx]
		mov	cl, [edx]
		dec	edx
		test	cl, cl
		jnz	short loc_1000D60F
		sub	esi, 8
		cmp	esi, 8
		jnb	short loc_1000D5E0

loc_1000D5F1:				; CODE XREF: sub_1000D4F0+EEj
		test	esi, esi
		jz	short loc_1000D60F
		mov	al, 1
		mov	ecx, esi
		shl	al, cl
		dec	al
		mov	cl, al
		not	cl
		or	cl, al
		mov	al, [edx]
		inc	al
		and	cl, al
		mov	eax, [esp+20h+arg_C]
		mov	[edx], cl

loc_1000D60F:				; CODE XREF: sub_1000D4F0+F7j
					; sub_1000D4F0+103j
		test	eax, eax
		jnz	short loc_1000D68C
		test	ebx, ebx
		jz	short loc_1000D62E
		mov	edx, [esp+20h+var_10]
		jmp	short loc_1000D620
; ---------------------------------------------------------------------------
		align 10h

loc_1000D620:				; CODE XREF: sub_1000D4F0+12Bj
					; sub_1000D4F0+13Cj
		mov	cl, [edx+eax]
		xor	cl, [eax+ebp]
		mov	[eax+edi], cl
		inc	eax
		cmp	eax, ebx
		jb	short loc_1000D620

loc_1000D62E:				; CODE XREF: sub_1000D4F0+125j
		mov	edx, [esp+20h+arg_8]
		add	edi, ebx
		mov	esi, [esp+20h+arg_14]
		add	ebp, ebx
		mov	eax, [esp+20h+var_10]
		sub	esi, ebx
		mov	[esp+20h+arg_C], edi
		add	[edx], ebx
		mov	edx, [esp+20h+var_8]
		mov	[esp+20h+arg_14], esi
		cmp	esi, ebx
		jnb	loc_1000D5B4

loc_1000D656:				; CODE XREF: sub_1000D4F0+A5j
		test	esi, esi
		jz	short loc_1000D6B6
		mov	eax, [esp+20h+arg_0]
		lea	edx, [esp+20h+var_4]
		push	ebx
		push	ebx
		lea	edi, [eax+8]
		push	edi
		push	ebx
		lea	ecx, [eax+18h]
		push	edx
		push	ecx
		push	dword ptr [eax+4]
		mov	eax, [eax]
		call	eax
		push	ebx
		mov	ebx, [esp+40h+arg_0]
		mov	esi, eax
		push	dword ptr [ebx+28h]
		push	edi
		call	sub_1000D810
		add	esp, 28h
		test	esi, esi
		jz	short loc_1000D697

loc_1000D68C:				; CODE XREF: sub_1000D4F0+121j
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000D697:				; CODE XREF: sub_1000D4F0+19Aj
		mov	esi, [esp+20h+arg_14]
		lea	eax, [ebx+18h]
		push	esi
		push	eax
		push	ebp
		push	[esp+2Ch+arg_C]
		call	sub_1000D850
		mov	eax, [esp+30h+arg_8]
		add	esp, 10h
		mov	[ebx+2Ch], esi
		add	[eax], esi

loc_1000D6B6:				; CODE XREF: sub_1000D4F0+168j
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
sub_1000D4F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D6C0	proc near		; DATA XREF: sub_1000EC70+13Fo

var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 8
		push	ebx
		mov	ebx, [esp+0Ch+arg_14]
		cmp	[esp+0Ch+arg_C], ebx
		jnb	short loc_1000D6E9
		mov	eax, [esp+0Ch+arg_8]
		push	0FFFFE003h
		mov	[eax], ebx
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000D6E9:				; CODE XREF: sub_1000D6C0+Cj
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		mov	esi, [esp+14h+arg_18]
		push	edi
		mov	edi, [esp+18h+arg_8]
		mov	dword ptr [edi], 0
		mov	eax, [ebp+2Ch]
		cmp	eax, esi
		jz	short loc_1000D75D
		sub	esi, eax
		cmp	esi, ebx
		jb	short loc_1000D70D
		mov	esi, ebx

loc_1000D70D:				; CODE XREF: sub_1000D6C0+49j
		add	eax, 18h
		add	eax, ebp
		push	esi
		push	eax
		mov	eax, [esp+20h+arg_10]
		push	eax
		mov	eax, [esp+24h+arg_4]
		push	eax
		call	sub_1000D850
		add	[ebp+2Ch], esi
		add	esp, 10h
		mov	edx, [esp+18h+arg_4]
		mov	ecx, [esp+18h+arg_10]
		add	edx, esi
		add	[edi], esi
		add	ecx, esi
		mov	[esp+18h+var_8], edx
		mov	[esp+18h+arg_14], ecx
		sub	ebx, esi
		jz	loc_1000D801
		mov	esi, [esp+18h+arg_18]

loc_1000D74B:				; CODE XREF: sub_1000D6C0+ADj
		mov	eax, [ebp+4]
		mov	eax, [eax+4]
		cmp	eax, 0Ah
		jnz	short loc_1000D76F
		mov	eax, offset sub_1003A120
		jmp	short loc_1000D77E
; ---------------------------------------------------------------------------

loc_1000D75D:				; CODE XREF: sub_1000D6C0+43j
		mov	ecx, [esp+18h+arg_10]
		mov	edx, [esp+18h+arg_4]
		mov	[esp+18h+arg_14], ecx
		mov	[esp+18h+var_8], edx
		jmp	short loc_1000D74B
; ---------------------------------------------------------------------------

loc_1000D76F:				; CODE XREF: sub_1000D6C0+94j
		cmp	eax, 0Ch
		mov	eax, offset loc_1003A510
		jz	short loc_1000D77E
		mov	eax, offset loc_1003A970

loc_1000D77E:				; CODE XREF: sub_1000D6C0+9Bj
					; sub_1000D6C0+B7j
		push	esi
		push	ebx
		push	ecx
		push	[esp+24h+arg_C]
		push	edi
		push	edx
		push	ebp
		call	eax ; sub_1003A120
		mov	eax, ebx
		xor	edx, edx
		div	esi
		add	esp, 1Ch
		imul	eax, esi
		add	[edi], eax
		mov	[esp+18h+arg_C], eax
		sub	ebx, eax
		jz	short loc_1000D801
		push	esi
		push	esi
		lea	edi, [ebp+8]
		push	edi
		push	esi
		lea	ecx, [esp+28h+var_4]
		push	ecx
		lea	eax, [ebp+18h]
		push	eax
		push	dword ptr [ebp+4]
		mov	eax, [ebp+0]
		call	eax
		push	[esp+34h+arg_18]
		mov	esi, eax
		push	dword ptr [ebp+28h]
		push	edi
		call	sub_1000D810
		add	esp, 28h
		test	esi, esi
		jz	short loc_1000D7D9
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000D7D9:				; CODE XREF: sub_1000D6C0+10Cj
		push	ebx
		lea	eax, [ebp+18h]
		push	eax
		mov	eax, [esp+20h+arg_14]
		add	eax, [esp+20h+arg_C]
		push	eax
		mov	eax, [esp+24h+var_8]
		add	eax, [esp+24h+arg_C]
		push	eax
		call	sub_1000D850
		mov	eax, [esp+28h+arg_8]
		add	esp, 10h
		mov	[ebp+2Ch], ebx
		add	[eax], ebx

loc_1000D801:				; CODE XREF: sub_1000D6C0+81j
					; sub_1000D6C0+DEj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_1000D6C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D810	proc near		; CODE XREF: sub_1000D4F0+190p
					; sub_1000D6C0+102p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		dec	eax
		add	eax, [esp+arg_8]
		cmp	edx, 8
		jb	short loc_1000D833

loc_1000D822:				; CODE XREF: sub_1000D810+21j
		inc	byte ptr [eax]
		mov	cl, [eax]
		dec	eax
		test	cl, cl
		jnz	short locret_1000D84F
		sub	edx, 8
		cmp	edx, 8
		jnb	short loc_1000D822

loc_1000D833:				; CODE XREF: sub_1000D810+10j
		test	edx, edx
		jz	short locret_1000D84F
		mov	ecx, edx
		push	ebx
		mov	bl, 1
		shl	bl, cl
		mov	cl, [eax]
		dec	bl
		mov	dl, bl
		inc	cl
		not	dl
		or	dl, bl
		and	dl, cl
		mov	[eax], dl
		pop	ebx

locret_1000D84F:			; CODE XREF: sub_1000D810+19j
					; sub_1000D810+25j
		retn
sub_1000D810	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D850	proc near		; CODE XREF: sub_1000D4F0+64p
					; sub_1000D4F0+1B5p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_C]
		test	edx, edx
		jz	short locret_1000D882
		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+arg_0]
		sub	esi, eax
		sub	edi, eax
		lea	ebx, [ebx+0]

loc_1000D870:				; CODE XREF: sub_1000D850+2Ej
		mov	cl, [esi+eax]
		lea	eax, [eax+1]
		xor	cl, [eax-1]
		mov	[edi+eax-1], cl
		dec	edx
		jnz	short loc_1000D870
		pop	edi
		pop	esi

locret_1000D882:			; CODE XREF: sub_1000D850+6j
		retn
sub_1000D850	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000D890(int,	int, int, size_t)
sub_1000D890	proc near		; CODE XREF: sub_1000EC70:loc_1000ED66p

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 34h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		mov	eax, [esp+34h+arg_4]
		push	ebx
		mov	ebx, [esp+38h+arg_8]
		push	ebp
		mov	ebp, [esp+3Ch+arg_0]
		push	edi
		mov	edi, [esp+40h+arg_C]
		mov	[esp+40h+var_2C], ebp
		mov	[esp+40h+var_34], eax
		cmp	edi, 10h
		ja	loc_1000DA56
		push	esi
		push	0B0h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_1000DA41
		push	edi		; size_t
		lea	eax, [esp+48h+var_14]
		push	0		; int
		push	eax		; void *
		call	memset
		push	edi
		push	edi
		lea	eax, [esp+58h+var_14]
		push	eax
		push	edi
		lea	eax, [esp+60h+var_30]
		push	eax
		lea	eax, [esp+64h+var_14]
		push	eax
		push	ebp
		call	[esp+6Ch+var_34]
		add	esp, 28h
		test	eax, eax
		jnz	loc_1000DA38
		push	edi
		lea	eax, [esp+48h+var_14]
		push	eax
		push	esi
		call	sub_1000DD70
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000DA38
		mov	[esp+44h+var_28], 20h
		mov	[esp+44h+var_24], eax
		mov	[esp+44h+var_20], eax
		mov	[esp+44h+var_1C], eax
		mov	[esp+44h+var_18], eax
		cmp	edi, 10h
		jnz	short loc_1000D960
		cmp	dword ptr [ebx+4], 0Ch
		jnz	short loc_1000D960
		mov	ecx, [ebx]
		mov	eax, [ecx]
		mov	[esp+44h+var_24], eax
		mov	eax, [ecx+4]
		mov	[esp+44h+var_20], eax
		mov	eax, [ecx+8]
		mov	[esp+44h+var_1C], eax
		mov	byte ptr [esp+44h+var_18+3], 1
		jmp	short loc_1000D990
; ---------------------------------------------------------------------------

loc_1000D960:				; CODE XREF: sub_1000D890+ABj
					; sub_1000D890+B1j
		push	edi		; size_t
		push	dword ptr [ebx+4] ; size_t
		push	dword ptr [ebx]	; void *
		push	esi		; int
		call	sub_1000E0C0
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000DA08
		push	edi		; size_t
		push	edi		; size_t
		lea	eax, [esp+4Ch+var_30]
		push	eax		; int
		lea	eax, [esp+50h+var_24]
		push	eax		; void *
		push	esi		; int
		call	sub_1000DCC0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000DA08

loc_1000D990:				; CODE XREF: sub_1000D890+CEj
		push	edi		; size_t
		lea	eax, [esp+48h+var_28]
		push	eax		; int
		push	[esp+4Ch+var_34] ; int
		lea	ebp, [esi+68h]
		push	[esp+50h+var_2C] ; int
		push	ebp		; int
		call	sub_1000D470
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000DA08
		mov	eax, [ebx+10h]
		lea	ecx, [esp+44h+var_30]
		push	edi
		push	edi
		mov	[esi+98h], eax
		lea	eax, [esi+9Ch]
		push	eax
		push	edi
		push	ecx
		push	eax
		push	ebp
		call	sub_1000D4F0
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1000D9FD
		push	edi		; size_t
		push	dword ptr [ebx+0Ch] ; size_t
		push	dword ptr [ebx+8] ; void *
		push	esi		; int
		call	sub_1000DE90
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000D9FD
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1000D9FD:				; CODE XREF: sub_1000D890+142j
					; sub_1000D890+156j
		push	0		; int
		push	ebp		; void *
		call	sub_1000D440
		add	esp, 8

loc_1000DA08:				; CODE XREF: sub_1000D890+E1j
					; sub_1000D890+FEj ...
		push	esi
		call	sub_10028F00
		lea	eax, [esi+10h]
		push	eax
		call	sub_10028F00
		lea	eax, [esi+20h]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+1Ch], 0
		mov	dword ptr [esi+2Ch], 0

loc_1000DA38:				; CODE XREF: sub_1000D890+73j
					; sub_1000D890+8Aj
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000DA41:				; CODE XREF: sub_1000D890+44j
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1000DA56:				; CODE XREF: sub_1000D890+2Cj
		push	0FFFFE001h
		call	PORT_SetError_Util
		mov	ecx, [esp+44h+var_4]
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
sub_1000D890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DA80(int,	int, int, int, void *, int, size_t)
sub_1000DA80	proc near		; DATA XREF: sub_1000EC70+10Do

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		mov	eax, [esp+24h+arg_4]
		push	ebx
		mov	ebx, [esp+28h+arg_0]
		push	esi
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	esi, [ebx+98h]
		add	esi, 7
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_10]
		push	edi
		mov	edi, [esp+30h+arg_14]
		shr	esi, 3
		mov	[esp+30h+var_20], eax
		cmp	edi, esi
		jnb	short loc_1000DAE3
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+24h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000DAE3:				; CODE XREF: sub_1000DA80+3Fj
		push	ebp
		mov	ebp, [esp+34h+arg_18]
		sub	edi, esi
		push	ebp		; size_t
		push	edi		; size_t
		push	eax		; void *
		push	ebx		; int
		call	sub_1000E0C0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000DB3A
		push	ebp		; size_t
		push	ebp		; int
		lea	eax, [esp+3Ch+var_18]
		push	eax		; int
		lea	eax, [esp+40h+var_14]
		push	eax		; void *
		push	ebx		; int
		call	sub_1000E1A0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000DB3A
		push	esi
		mov	esi, [esp+38h+var_20]
		lea	eax, [edi+esi]
		push	eax
		lea	eax, [esp+3Ch+var_14]
		push	eax
		call	NSS_SecureMemcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000DB50
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000DB3A:				; CODE XREF: sub_1000DA80+78j
					; sub_1000DA80+91j
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+24h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000DB50:				; CODE XREF: sub_1000DA80+ABj
		push	ebp
		push	edi
		push	esi
		push	[esp+40h+arg_C]
		lea	eax, [ebx+68h]
		push	[esp+44h+var_1C]
		push	[esp+48h+var_24]
		push	eax
		call	sub_1000D4F0
		mov	ecx, [esp+50h+var_4]
		add	esp, 1Ch
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
sub_1000DA80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DB80	proc near		; DATA XREF: sub_1000EC70:loc_1000ED82o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	0		; int
		lea	eax, [esi+68h]
		push	eax		; void *
		call	sub_1000D440
		push	esi
		call	sub_10028F00
		lea	eax, [esi+10h]
		push	eax
		call	sub_10028F00
		lea	eax, [esi+20h]
		push	eax
		call	sub_10028F00
		add	esp, 14h
		mov	dword ptr [esi+0Ch], 0
		cmp	[esp+4+arg_4], 0
		mov	dword ptr [esi+1Ch], 0
		mov	dword ptr [esi+2Ch], 0
		jz	short loc_1000DBD0
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000DBD0:				; CODE XREF: sub_1000DB80+45j
		pop	esi
		retn
sub_1000DB80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DBE0(int,	void *,	int, int, int, int, size_t)
sub_1000DBE0	proc near		; DATA XREF: sub_1000EC70+104o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		mov	ebp, [esp+4+arg_0]
		or	ecx, 0FFFFFFFFh
		push	esi
		mov	esi, [esp+8+arg_14]
		sub	ecx, esi
		mov	edx, [ebp+98h]
		add	edx, 7
		shr	edx, 3
		cmp	ecx, edx
		jnb	short loc_1000DC12
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000DC12:				; CODE XREF: sub_1000DBE0+1Dj
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		lea	ecx, [edx+esi]
		cmp	ebx, ecx
		jnb	short loc_1000DC38
		mov	eax, [esp+0Ch+arg_8]
		push	0FFFFE003h
		mov	[eax], ecx
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000DC38:				; CODE XREF: sub_1000DBE0+3Cj
		push	edi
		push	[esp+10h+arg_18]
		mov	edi, [esp+14h+arg_4]
		lea	eax, [ebp+68h]
		push	esi
		push	[esp+18h+arg_10]
		mov	esi, [esp+1Ch+arg_8]
		push	ebx
		push	esi
		push	edi
		push	eax
		call	sub_1000D4F0
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1000DCA2
		push	[esp+10h+arg_18] ; size_t
		push	dword ptr [esi]	; size_t
		push	edi		; void *
		push	ebp		; int
		call	sub_1000E0C0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000DC8F
		push	[esp+10h+arg_18] ; size_t
		mov	eax, [esi]
		lea	ecx, [esp+14h+arg_0]
		sub	ebx, eax
		add	eax, edi
		push	ebx		; int
		push	ecx		; int
		push	eax		; void *
		push	ebp		; int
		call	sub_1000E1A0
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000DCAA

loc_1000DC8F:				; CODE XREF: sub_1000DBE0+8Fj
		push	dword ptr [esi]	; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi], 0

loc_1000DCA2:				; CODE XREF: sub_1000DBE0+7Bj
		pop	edi
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000DCAA:				; CODE XREF: sub_1000DBE0+ADj
		mov	eax, [esp+10h+arg_0]
		add	[esi], eax
		xor	eax, eax
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_1000DBE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DCC0(int,	void *,	int, size_t, size_t)
sub_1000DCC0	proc near		; CODE XREF: sub_1000D890+F4p
					; sub_1000E1A0+51p

var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 14h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+14h+var_4], eax
		push	ebx
		mov	ebx, [esp+18h+arg_4]
		push	ebp
		mov	ebp, [esp+1Ch+arg_8]
		push	esi
		mov	esi, [esp+20h+arg_10]
		push	edi
		mov	edi, [esp+24h+arg_0]
		push	esi		; size_t
		push	edi		; int
		call	sub_1000DF00
		add	esp, 8
		test	eax, eax
		jz	short loc_1000DD06

loc_1000DCF0:				; CODE XREF: sub_1000DCC0+60j
					; sub_1000DCC0+73j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+14h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DD06:				; CODE XREF: sub_1000DCC0+2Ej
		xor	edx, edx
		mov	eax, 10h
		div	esi
		push	esi
		push	eax
		lea	eax, [edi+4Ch]
		push	eax
		push	edi
		call	sub_1000E240
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000DCF0
		push	esi
		lea	eax, [esp+28h+var_14]
		push	eax
		push	edi
		call	sub_1000E3A0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000DCF0
		mov	edi, [esp+24h+arg_C]
		cmp	edi, esi
		jbe	short loc_1000DD3F
		mov	edi, esi

loc_1000DD3F:				; CODE XREF: sub_1000DCC0+7Bj
		push	edi		; size_t
		lea	eax, [esp+28h+var_14]
		push	eax		; void *
		push	ebx		; void *
		call	memcpy
		mov	ecx, [esp+30h+var_4]
		add	esp, 0Ch
		mov	[ebp+0], edi
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
sub_1000DCC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DD70	proc near		; CODE XREF: sub_1000D890+80p

var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 14h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+14h+var_4], eax
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		push	esi
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+1Ch], 0
		mov	dword ptr [esi+2Ch], 0
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		js	short loc_1000DE04
		lea	edi, [esi+10h]
		push	edi
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		js	short loc_1000DE04
		lea	eax, [esi+20h]
		push	eax
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		js	short loc_1000DE04
		push	edi
		call	sub_1002A9C0
		mov	edi, [esp+20h+arg_8]
		lea	eax, [esp+20h+var_14]
		push	edi
		push	[esp+24h+arg_4]
		push	eax
		call	sub_1000E450
		push	edi
		lea	eax, [esp+30h+var_14]
		push	eax
		push	esi
		call	sub_10029F90
		add	esp, 1Ch
		test	eax, eax
		js	short loc_1000DE04
		cmp	edi, 10h
		jz	short loc_1000DE48
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000DE04:				; CODE XREF: sub_1000DD70+34j
					; sub_1000DD70+44j ...
		push	esi
		call	sub_10028F00
		lea	eax, [esi+10h]
		push	eax
		call	sub_10028F00
		lea	eax, [esi+20h]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+1Ch], 0
		or	eax, 0FFFFFFFFh
		mov	dword ptr [esi+2Ch], 0
		pop	edi
		pop	esi
		mov	ecx, [esp+14h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DE48:				; CODE XREF: sub_1000DD70+85j
		mov	ecx, [esp+1Ch+var_4]
		xor	eax, eax
		mov	dword ptr [esi+30h], offset dword_100400E8
		mov	dword ptr [esi+60h], 0
		mov	dword ptr [esi+64h], 0
		mov	dword ptr [esi+44h], 0
		mov	dword ptr [esi+48h], 0
		mov	[esi+4Ch], eax
		mov	[esi+50h], eax
		mov	[esi+54h], eax
		pop	edi
		mov	[esi+58h], eax
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
sub_1000DD70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DE90(int,	void *,	size_t,	size_t)
sub_1000DE90	proc near		; CODE XREF: sub_1000D890+14Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		xor	eax, eax
		mov	dword ptr [esi+60h], 0
		mov	dword ptr [esi+64h], 0
		mov	[esi+4Ch], eax
		mov	[esi+50h], eax
		mov	[esi+54h], eax
		mov	[esi+58h], eax
		mov	[esi+44h], eax
		lea	eax, [esi+10h]
		push	eax
		call	sub_1002A9C0
		mov	eax, [esp+8+arg_8]
		add	esp, 4
		mov	dword ptr [esi+48h], 0
		test	eax, eax
		jz	short loc_1000DEFB
		push	[esp+4+arg_C]	; size_t
		push	eax		; size_t
		push	[esp+0Ch+arg_4]	; void *
		push	esi		; int
		call	sub_1000E0C0
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000DEEA

loc_1000DEE5:				; CODE XREF: sub_1000DE90+69j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000DEEA:				; CODE XREF: sub_1000DE90+53j
		push	[esp+4+arg_C]	; size_t
		push	esi		; int
		call	sub_1000DF00
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000DEE5

loc_1000DEFB:				; CODE XREF: sub_1000DE90+3Dj
		xor	eax, eax
		pop	esi
		retn
sub_1000DE90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DF00(int,	size_t)
sub_1000DF00	proc near		; CODE XREF: sub_1000DCC0+24p
					; sub_1000DE90+5Fp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		push	edi
		mov	edi, [esp+20h+arg_0]
		mov	cl, 28h
		mov	eax, [edi+54h]
		mov	[edi+4Ch], eax
		mov	eax, [edi+58h]
		mov	[edi+50h], eax
		movzx	eax, byte ptr [edi+67h]
		mov	[edi+54h], al
		movzx	eax, byte ptr [edi+66h]
		mov	[edi+55h], al
		mov	eax, [edi+60h]
		mov	edx, [edi+64h]
		call	__aullshr
		mov	[edi+56h], al
		mov	cl, 20h
		mov	eax, [edi+60h]
		mov	edx, [edi+64h]
		call	__aullshr
		mov	[edi+57h], al
		mov	ecx, [edi+60h]
		mov	eax, [edi+64h]
		shrd	ecx, eax, 18h
		mov	[edi+58h], cl
		mov	ecx, [edi+60h]
		shr	eax, 18h
		mov	eax, [edi+64h]
		shrd	ecx, eax, 10h
		mov	[edi+59h], cl
		mov	ecx, [edi+60h]
		shr	eax, 10h
		mov	eax, [edi+64h]
		shrd	ecx, eax, 8
		mov	[edi+5Ah], cl
		shr	eax, 8
		movzx	eax, byte ptr [edi+60h]
		mov	[edi+5Bh], al
		mov	ecx, [edi+44h]
		mov	dword ptr [edi+60h], 0
		mov	dword ptr [edi+64h], 0
		test	ecx, ecx
		jz	loc_1000E0AD
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, esi
		sub	eax, ecx
		push	eax		; size_t
		lea	eax, [edi+34h]
		add	eax, ecx
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		mov	[esp+2Ch+var_1C], 0FFFFFFFFh
		lea	ebx, [edi+34h]
		mov	[esp+2Ch+var_18], 0
		lea	ebp, [edi+20h]
		nop

loc_1000DFD0:				; CODE XREF: sub_1000DF00+13Dj
		inc	dword ptr [edi+48h]
		xor	eax, eax
		test	esi, esi
		jz	short loc_1000DFF5
		lea	edx, [esp+esi+2Ch+var_18+3]
		lea	ecx, [ecx+0]

loc_1000DFE0:				; CODE XREF: sub_1000DF00+F3j
		movzx	ecx, byte ptr [eax+ebx]
		lea	edx, [edx-1]
		inc	eax
		mov	cl, ds:byte_10040100[ecx]
		mov	[edx+1], cl
		cmp	eax, esi
		jb	short loc_1000DFE0

loc_1000DFF5:				; CODE XREF: sub_1000DF00+D7j
		push	esi
		lea	eax, [esp+30h+var_14]
		push	eax
		push	ebp
		call	sub_10029F90
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000E049
		push	ebp
		lea	eax, [edi+10h]
		push	ebp
		push	eax
		call	sub_1002CE90
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000E049
		lea	eax, [edi+10h]
		push	eax
		push	dword ptr [edi+30h]
		push	edi
		push	ebp
		call	sub_1002D2B0
		add	esp, 10h
		test	eax, eax
		js	short loc_1000E049
		mov	ecx, [esp+2Ch+var_18]
		add	ebx, esi
		inc	ecx
		mov	[esp+2Ch+var_18], ecx
		cmp	ecx, 1
		jb	short loc_1000DFD0
		mov	[esp+2Ch+var_1C], 0
		jmp	short loc_1000E07A
; ---------------------------------------------------------------------------

loc_1000E049:				; CODE XREF: sub_1000DF00+106j
					; sub_1000DF00+118j ...
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1000E06D
		cmp	eax, 0FFFFFFFDh
		jz	short loc_1000E066
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1000E05F
		push	0FFFFE001h
		jmp	short loc_1000E072
; ---------------------------------------------------------------------------

loc_1000E05F:				; CODE XREF: sub_1000DF00+156j
		push	0FFFFE013h
		jmp	short loc_1000E072
; ---------------------------------------------------------------------------

loc_1000E066:				; CODE XREF: sub_1000DF00+151j
		push	0FFFFE002h
		jmp	short loc_1000E072
; ---------------------------------------------------------------------------

loc_1000E06D:				; CODE XREF: sub_1000DF00+14Cj
		push	0FFFFE005h

loc_1000E072:				; CODE XREF: sub_1000DF00+15Dj
					; sub_1000DF00+164j ...
		call	PORT_SetError_Util
		add	esp, 4

loc_1000E07A:				; CODE XREF: sub_1000DF00+147j
		push	esi		; size_t
		lea	eax, [edi+34h]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		mov	dword ptr [edi+44h], 0
		cmp	[esp+2Ch+var_1C], 0
		pop	esi
		pop	ebp
		pop	ebx
		jz	short loc_1000E0AD
		or	eax, 0FFFFFFFFh
		pop	edi
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E0AD:				; CODE XREF: sub_1000DF00+97j
					; sub_1000DF00+198j
		mov	ecx, [esp+20h+var_4]
		xor	eax, eax
		pop	edi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
sub_1000DF00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E0C0(int,	void *,	size_t,	size_t)
sub_1000E0C0	proc near		; CODE XREF: sub_1000D890+D7p
					; sub_1000DA80+6Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_C]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		push	edi
		lea	eax, ds:0[ebp*8]
		add	[ebx+60h], eax
		mov	eax, [ebx+44h]
		adc	dword ptr [ebx+64h], 0
		test	eax, eax
		jz	short loc_1000E14A
		mov	esi, ecx
		sub	esi, eax
		cmp	ebp, esi
		jnb	short loc_1000E0EF
		mov	esi, ebp

loc_1000E0EF:				; CODE XREF: sub_1000E0C0+2Bj
		mov	edi, [esp+10h+arg_4]
		test	esi, esi
		jz	short loc_1000E10B
		push	esi		; size_t
		add	eax, 34h
		add	eax, ebx
		push	edi		; void *
		push	eax		; void *
		call	memcpy
		mov	ecx, [esp+1Ch+arg_C]
		add	esp, 0Ch

loc_1000E10B:				; CODE XREF: sub_1000E0C0+35j
		add	[ebx+44h], esi
		add	edi, esi
		mov	[esp+10h+arg_0], edi
		sub	ebp, esi
		jz	short loc_1000E192
		push	ecx
		push	1
		lea	edi, [ebx+34h]
		push	edi
		push	ebx
		call	sub_1000E240
		mov	esi, eax
		mov	eax, [esp+20h+arg_C]
		push	eax		; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		add	esp, 1Ch
		mov	dword ptr [ebx+44h], 0
		test	esi, esi
		jz	short loc_1000E150

loc_1000E142:				; CODE XREF: sub_1000E0C0+B2j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E14A:				; CODE XREF: sub_1000E0C0+23j
		mov	esi, [esp+10h+arg_4]
		jmp	short loc_1000E158
; ---------------------------------------------------------------------------

loc_1000E150:				; CODE XREF: sub_1000E0C0+80j
		mov	esi, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_C]

loc_1000E158:				; CODE XREF: sub_1000E0C0+8Ej
		xor	edx, edx
		mov	eax, ebp
		div	ecx
		mov	edi, eax
		test	edi, edi
		jz	short loc_1000E17D
		push	ecx
		push	edi
		push	esi
		push	ebx
		call	sub_1000E240
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000E142
		imul	edi, [esp+10h+arg_C]
		add	esi, edi
		sub	ebp, edi

loc_1000E17D:				; CODE XREF: sub_1000E0C0+A2j
		test	ebp, ebp
		jz	short loc_1000E192
		push	ebp		; size_t
		lea	eax, [ebx+34h]
		push	esi		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		mov	[ebx+44h], ebp

loc_1000E192:				; CODE XREF: sub_1000E0C0+56j
					; sub_1000E0C0+BFj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000E0C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E1A0(int,	void *,	int, int, size_t)
sub_1000E1A0	proc near		; CODE XREF: sub_1000DA80+87p
					; sub_1000DBE0+A3p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	ecx, [esp+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	eax, [ecx+98h]
		mov	edi, [esp+0Ch+arg_4]
		lea	esi, [eax+7]
		shr	esi, 3
		lea	ebp, ds:0[esi*8]
		sub	ebp, eax
		test	edi, edi
		jnz	short loc_1000E1DE

loc_1000E1C4:				; CODE XREF: sub_1000E1A0+42j
		mov	eax, [esp+0Ch+arg_8]
		push	0FFFFE003h
		mov	[eax], esi
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000E1DE:				; CODE XREF: sub_1000E1A0+22j
		cmp	[esp+0Ch+arg_C], esi
		jb	short loc_1000E1C4
		push	ebx
		push	[esp+10h+arg_10] ; size_t
		mov	ebx, [esp+14h+arg_8]
		push	esi		; size_t
		push	ebx		; int
		push	edi		; void *
		push	ecx		; int
		call	sub_1000DCC0
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000E205
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000E205:				; CODE XREF: sub_1000E1A0+5Bj
		xor	edx, edx
		cmp	[ebx], edx
		jbe	short loc_1000E21F
		mov	ecx, [esp+10h+arg_0]
		nop

loc_1000E210:				; CODE XREF: sub_1000E1A0+7Dj
		mov	al, [ecx+edx+9Ch]
		xor	[edx+edi], al
		inc	edx
		cmp	edx, [ebx]
		jb	short loc_1000E210

loc_1000E21F:				; CODE XREF: sub_1000E1A0+69j
		test	ebp, ebp
		jz	short loc_1000E231
		mov	al, 1
		mov	ecx, ebp
		shl	al, cl
		dec	al
		not	al
		and	[esi+edi-1], al

loc_1000E231:				; CODE XREF: sub_1000E1A0+81j
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
sub_1000E1A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E240	proc near		; CODE XREF: sub_1000DCC0+56p
					; sub_1000E0C0+60p ...

var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		cmp	[esp+18h+arg_8], 0
		push	ebx
		mov	ebx, [esp+1Ch+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+24h+arg_C]
		push	edi
		mov	[esp+28h+var_18], 0
		jbe	short loc_1000E2E3
		mov	edi, [esp+28h+arg_4]
		lea	ebp, [ebx+20h]

loc_1000E270:				; CODE XREF: sub_1000E240+A1j
		inc	dword ptr [ebx+48h]
		xor	eax, eax
		test	esi, esi
		jz	short loc_1000E295
		lea	edx, [esp+esi+28h+var_18+3]
		lea	ecx, [ecx+0]

loc_1000E280:				; CODE XREF: sub_1000E240+53j
		movzx	ecx, byte ptr [eax+edi]
		lea	edx, [edx-1]
		inc	eax
		mov	cl, ds:byte_10040100[ecx]
		mov	[edx+1], cl
		cmp	eax, esi
		jb	short loc_1000E280

loc_1000E295:				; CODE XREF: sub_1000E240+37j
		push	esi
		lea	eax, [esp+2Ch+var_14]
		push	eax
		push	ebp
		call	sub_10029F90
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000E2F8
		lea	eax, [ebx+20h]
		push	eax
		push	eax
		lea	ebp, [ebx+10h]
		push	ebp
		call	sub_1002CE90
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000E2F8
		push	ebp
		push	dword ptr [ebx+30h]
		lea	ebp, [ebx+20h]
		push	ebx
		push	ebp
		call	sub_1002D2B0
		add	esp, 10h
		test	eax, eax
		js	short loc_1000E2F8
		mov	ecx, [esp+28h+var_18]
		add	edi, esi
		inc	ecx
		mov	[esp+28h+var_18], ecx
		cmp	ecx, [esp+28h+arg_8]
		jb	short loc_1000E270

loc_1000E2E3:				; CODE XREF: sub_1000E240+27j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000E2F8:				; CODE XREF: sub_1000E240+66j
					; sub_1000E240+7Bj ...
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1000E370
		cmp	eax, 0FFFFFFFDh
		jz	short loc_1000E34D
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1000E32A
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000E32A:				; CODE XREF: sub_1000E240+C5j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000E34D:				; CODE XREF: sub_1000E240+C0j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000E370:				; CODE XREF: sub_1000E240+BBj
		push	0FFFFE005h
		call	PORT_SetError_Util
		mov	ecx, [esp+2Ch+var_4]
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
sub_1000E240	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E3A0	proc near		; CODE XREF: sub_1000DCC0+69p

var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebx
		mov	ebx, [esp+1Ch+arg_8]
		push	ebp
		mov	ebp, [esp+20h+arg_0]
		push	esi
		mov	esi, [esp+24h+arg_4]
		add	ebp, 10h
		push	edi
		push	ebp
		mov	[esp+2Ch+var_18], esi
		call	sub_1002A950
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jg	short loc_1000E3F7

loc_1000E3D4:				; CODE XREF: sub_1000E3A0+5Dj
					; sub_1000E3A0+88j
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000E3F7:				; CODE XREF: sub_1000E3A0+32j
		lea	eax, [esp+28h+var_14]
		cmp	edi, ebx
		ja	short loc_1000E3D4
		jz	short loc_1000E41B
		mov	esi, ebx
		sub	esi, edi
		push	esi		; size_t
		push	0		; int
		push	eax		; void *
		call	memset
		lea	eax, [esp+34h+var_14]
		add	esp, 0Ch
		add	eax, esi
		mov	esi, [esp+28h+var_18]

loc_1000E41B:				; CODE XREF: sub_1000E3A0+5Fj
		push	edi
		push	eax
		push	ebp
		call	sub_1002A820
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000E3D4
		push	ebx
		lea	eax, [esp+2Ch+var_14]
		push	eax
		push	esi
		call	sub_1000E450
		mov	ecx, [esp+34h+var_4]
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
sub_1000E3A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E450	proc near		; CODE XREF: sub_1000DD70+6Ap
					; sub_1000E3A0+91p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		xor	eax, eax
		test	esi, esi
		jz	short loc_1000E47D
		lea	edx, [esi-1]
		add	edx, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]

loc_1000E467:				; CODE XREF: sub_1000E450+2Aj
		movzx	ecx, byte ptr [eax+edi]
		lea	edx, [edx-1]
		inc	eax
		mov	cl, ds:byte_10040100[ecx]
		mov	[edx+1], cl
		cmp	eax, esi
		jb	short loc_1000E467
		pop	edi

loc_1000E47D:				; CODE XREF: sub_1000E450+9j
		pop	esi
		retn
sub_1000E450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E480(int,	int, int, int, int, size_t, int, int, int, int,	int)
sub_1000E480	proc near		; DATA XREF: .rdata:1003E524o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	eax, [esp+arg_C]
		cmp	dword ptr [eax+24h], 0
		jnz	short loc_1000E48E
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E48E:				; CODE XREF: sub_1000E480+8j
		push	0		; char
		push	[esp+4+arg_28]	; int
		push	[esp+8+arg_24]	; int
		push	[esp+0Ch+arg_20] ; int
		push	[esp+10h+arg_1C] ; int
		push	[esp+14h+arg_18] ; int
		push	[esp+18h+arg_14] ; size_t
		push	[esp+1Ch+arg_10] ; int
		push	eax		; int
		push	[esp+24h+arg_8]	; int
		push	[esp+28h+arg_4]	; int
		push	[esp+2Ch+arg_0]	; int
		call	sub_1000E4D0
		add	esp, 30h
		retn
sub_1000E480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E4D0(int,	int, int, int, int, size_t, int, int, int, int,	int, char)
sub_1000E4D0	proc near		; CODE XREF: sub_1000E480+39p
					; sub_1000EAA0+39p

var_229		= byte ptr -229h
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_21E		= byte ptr -21Eh
var_21D		= byte ptr -21Dh
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= dword	ptr -204h
var_200		= dword	ptr -200h
var_1FC		= dword	ptr -1FCh
var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= byte ptr -1C4h
var_144		= byte ptr -144h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= byte ptr -0F8h
var_F7		= byte ptr -0F7h
var_84		= byte ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= byte ptr  30h

		sub	esp, 22Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+22Ch+var_4], eax
		mov	eax, [esp+22Ch+arg_0]
		mov	[esp+22Ch+var_1E8], eax
		mov	eax, [esp+22Ch+arg_4]
		push	ebx
		mov	[esp+230h+var_1E0], eax
		mov	eax, [esp+230h+arg_10]
		push	ebp
		mov	ebp, [esp+234h+arg_1C]
		mov	[esp+234h+var_1EC], eax
		mov	eax, [esp+234h+arg_18]
		push	esi
		mov	esi, [esp+238h+arg_C]
		mov	[esp+238h+var_208], eax
		mov	eax, [esp+238h+arg_20]
		mov	[esp+238h+var_218], eax
		mov	eax, [esi+4]
		push	edi
		mov	[esp+23Ch+var_228], esi
		mov	[esp+23Ch+var_200], ebp
		call	eax
		mov	ebx, [esi+1Ch]
		xor	edx, edx
		mov	ecx, [esi]
		cmp	ebx, 40h
		mov	[esp+23Ch+var_224], eax
		setnz	dl
		mov	[esp+23Ch+var_20C], ecx
		xor	eax, eax
		mov	[esp+23Ch+var_1D8], ebx
		cmp	dword ptr [esi+20h], 2
		mov	esi, ebp
		setz	al
		lea	edx, ds:8[edx*8]
		mov	[esp+23Ch+var_1FC], edx
		lea	eax, ds:28h[eax*8]
		mov	[esp+23Ch+var_1E4], eax
		xor	eax, eax
		cmp	[esp+23Ch+arg_2C], al
		setz	al
		sub	esi, ecx
		mov	ecx, [esp+23Ch+arg_28]
		xor	edi, edi
		dec	ecx
		mov	[esp+23Ch+var_21C], edi
		lea	eax, ds:2[eax*4]
		mov	[esp+23Ch+var_214], eax
		lea	eax, [esi+edx]
		add	eax, ebx
		add	esi, [esp+23Ch+arg_24]
		add	eax, ecx
		xor	edx, edx
		div	ebx
		xor	edx, edx
		xor	ecx, ecx
		mov	[esp+23Ch+var_210], eax
		mov	eax, esi
		div	ebx
		mov	[esp+23Ch+var_1F4], eax
		mov	eax, [esp+23Ch+var_1FC]
		add	eax, esi
		mov	[esp+23Ch+var_1F0], edx
		xor	edx, edx
		div	ebx
		mov	edx, [esp+23Ch+var_214]
		mov	[esp+23Ch+var_1F8], eax
		xor	eax, eax
		cmp	[esp+23Ch+arg_2C], al
		mov	[esp+23Ch+var_204], eax
		mov	eax, [esp+23Ch+var_210]
		setnz	cl
		add	ecx, edx
		cmp	eax, ecx
		jbe	short loc_1000E5FC
		sub	eax, edx
		mov	edi, eax
		mov	[esp+23Ch+var_204], eax
		imul	edi, ebx
		mov	[esp+23Ch+var_21C], edi

loc_1000E5FC:				; CODE XREF: sub_1000E4D0+11Bj
		mov	eax, [esp+23Ch+var_228]
		push	[esp+23Ch+var_224]
		shl	esi, 3
		mov	eax, [eax+10h]
		call	eax
		add	esp, 4
		cmp	[esp+23Ch+arg_2C], 0
		jnz	short loc_1000E670
		push	ebx		; size_t
		lea	eax, [esp+240h+var_1C4]
		push	0		; int
		push	eax		; void *
		lea	esi, [esi+ebx*8]
		call	memset
		push	[esp+248h+arg_14] ; size_t
		lea	eax, [esp+24Ch+var_1C4]
		push	[esp+24Ch+var_1EC] ; void *
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_1000E65A
		lea	ebx, [ebx+0]

loc_1000E650:				; CODE XREF: sub_1000E4D0+188j
		xor	[esp+eax+23Ch+var_1C4],	36h
		inc	eax
		cmp	eax, ebx
		jb	short loc_1000E650

loc_1000E65A:				; CODE XREF: sub_1000E4D0+178j
		push	ebx
		lea	eax, [esp+240h+var_1C4]
		push	eax
		mov	eax, [esp+244h+var_228]
		push	[esp+244h+var_224]
		mov	eax, [eax+14h]
		call	eax
		add	esp, 0Ch

loc_1000E670:				; CODE XREF: sub_1000E4D0+147j
		xor	ecx, ecx
		xor	eax, eax
		cmp	[esp+23Ch+var_1FC], 10h
		mov	[esp+23Ch+var_1D4], ecx
		mov	[esp+23Ch+var_1D0], ecx
		mov	[esp+23Ch+var_1CC], ecx
		mov	[esp+23Ch+var_1C8], ecx
		jnz	short loc_1000E68E
		lea	eax, [ecx+8]

loc_1000E68E:				; CODE XREF: sub_1000E4D0+1B9j
		mov	ecx, [esp+23Ch+var_228]
		xor	edx, edx
		cmp	dword ptr [ecx+20h], 2
		jnz	short loc_1000E6B7
		lea	ebp, [esp+23Ch+var_1D4]
		xor	ecx, ecx
		add	ebp, eax

loc_1000E6A2:				; CODE XREF: sub_1000E4D0+1E3j
		mov	eax, esi
		lea	edx, [edx+1]
		shr	eax, cl
		add	ecx, 8
		mov	[edx+ebp-1], al
		cmp	ecx, 20h
		jb	short loc_1000E6A2
		jmp	short loc_1000E6DA
; ---------------------------------------------------------------------------

loc_1000E6B7:				; CODE XREF: sub_1000E4D0+1C8j
		lea	ebp, [esp+23Ch+var_1D0]
		add	eax, ebp
		mov	[esp+23Ch+var_210], eax
		mov	ebp, eax

loc_1000E6C3:				; CODE XREF: sub_1000E4D0+208j
		mov	ecx, 3
		mov	eax, esi
		sub	ecx, edx
		shl	ecx, 3
		shr	eax, cl
		mov	[edx+ebp], al
		inc	edx
		cmp	edx, 4
		jb	short loc_1000E6C3

loc_1000E6DA:				; CODE XREF: sub_1000E4D0+1E5j
		mov	ebp, [esp+23Ch+var_200]
		test	edi, edi
		jz	loc_1000E817
		cmp	[esp+23Ch+arg_2C], 0
		jz	loc_1000E788
		mov	esi, [esp+23Ch+var_228]
		sub	ebp, ebx
		push	ebx
		push	[esp+240h+var_208]
		push	[esp+244h+var_224]
		mov	eax, [esi+14h]
		call	eax
		mov	eax, [esp+248h+var_208]
		add	eax, ebx
		push	ebp		; size_t
		push	eax		; void *
		lea	eax, [esp+250h+var_104]
		push	eax		; void *
		call	memcpy
		mov	eax, ebx
		sub	eax, ebp
		push	eax		; size_t
		push	[esp+258h+var_218] ; void *
		lea	eax, [esp+25Ch+var_104]
		add	eax, ebp
		push	eax		; void *
		call	memcpy
		push	ebx
		lea	eax, [esp+264h+var_104]
		push	eax
		push	[esp+268h+var_224]
		mov	eax, [esi+14h]
		call	eax
		xor	edx, edx
		mov	eax, edi
		div	ebx
		add	esp, 30h
		dec	eax
		cmp	eax, 1
		jbe	loc_1000E81B
		mov	esi, [esp+23Ch+var_218]
		mov	edi, [esp+23Ch+var_228]
		sub	esi, ebp
		add	esi, ebx
		lea	ebp, [eax-1]
		lea	esp, [esp+0]

loc_1000E770:				; CODE XREF: sub_1000E4D0+2B1j
		mov	eax, [edi+14h]
		push	ebx
		push	esi
		push	[esp+244h+var_224]
		call	eax
		add	esp, 0Ch
		add	esi, ebx
		dec	ebp
		jnz	short loc_1000E770
		jmp	loc_1000E813
; ---------------------------------------------------------------------------

loc_1000E788:				; CODE XREF: sub_1000E4D0+21Ej
		mov	ecx, [esp+23Ch+var_208]
		mov	eax, [ecx]
		mov	[esp+23Ch+var_104], eax
		mov	eax, [ecx+4]
		mov	[esp+23Ch+var_100], eax
		mov	eax, [ecx+8]
		mov	[esp+23Ch+var_FC], eax
		mov	al, [ecx+0Ch]
		mov	[esp+23Ch+var_F8], al
		lea	eax, [ebx-0Dh]
		push	eax		; size_t
		push	[esp+240h+var_218] ; void *
		lea	eax, [esp+244h+var_F7]
		push	eax		; void *
		call	memcpy
		mov	esi, [esp+248h+var_228]
		lea	eax, [esp+248h+var_104]
		mov	ebp, [esp+248h+var_224]
		push	ebx
		push	eax
		mov	eax, [esi+14h]
		push	ebp
		call	eax
		xor	edx, edx
		mov	eax, edi
		div	ebx
		add	esp, 18h
		cmp	eax, 1
		jbe	short loc_1000E81F
		mov	esi, [esp+23Ch+var_218]
		lea	ebp, [eax-1]
		mov	edi, [esp+23Ch+var_228]
		add	esi, 0FFFFFFF3h
		add	esi, ebx
		lea	ecx, [ecx+0]

loc_1000E800:				; CODE XREF: sub_1000E4D0+341j
		mov	eax, [edi+14h]
		push	ebx
		push	esi
		push	[esp+244h+var_224]
		call	eax
		add	esp, 0Ch
		add	esi, ebx
		dec	ebp
		jnz	short loc_1000E800

loc_1000E813:				; CODE XREF: sub_1000E4D0+2B3j
		mov	edi, [esp+23Ch+var_21C]

loc_1000E817:				; CODE XREF: sub_1000E4D0+210j
		mov	esi, [esp+23Ch+var_228]

loc_1000E81B:				; CODE XREF: sub_1000E4D0+284j
		mov	ebp, [esp+23Ch+var_224]

loc_1000E81F:				; CODE XREF: sub_1000E4D0+31Bj
		push	40h		; size_t
		lea	eax, [esp+240h+var_144]
		push	0		; int
		push	eax		; void *
		call	memset
		mov	eax, [esp+248h+var_214]
		add	esp, 0Ch
		mov	ecx, [esp+23Ch+var_204]
		add	eax, ecx
		mov	[esp+23Ch+var_210], eax
		cmp	ecx, eax
		ja	loc_1000E9C0
		mov	eax, [esp+23Ch+var_1F4]
		movzx	edx, al
		mov	eax, [esp+23Ch+var_1F8]
		movzx	eax, al
		mov	[esp+23Ch+var_1DC], edx
		mov	[esp+23Ch+var_1F8], eax
		nop

loc_1000E860:				; CODE XREF: sub_1000E4D0+4EAj
		movzx	eax, cl
		mov	ecx, [esp+23Ch+var_1F8]
		xor	edx, eax
		xor	ecx, eax
		dec	edx
		dec	ecx
		sar	edx, 1Fh
		sar	ecx, 1Fh
		mov	[esp+23Ch+var_214], edx
		mov	[esp+23Ch+var_21C], ecx
		test	ebx, ebx
		jz	loc_1000E94D
		mov	esi, [esp+23Ch+var_1F0]
		lea	ebp, [esp+23Ch+var_1D4]
		mov	al, cl
		neg	esi
		not	al
		mov	[esp+23Ch+var_21E], al
		or	al, dl
		mov	[esp+23Ch+var_21D], al
		mov	eax, ebx
		sub	eax, [esp+23Ch+var_1FC]
		mov	[esp+23Ch+var_1F4], eax
		mov	eax, [esp+23Ch+var_1FC]
		sub	eax, ebx
		add	ebp, eax
		lea	ecx, [ecx+0]

loc_1000E8B0:				; CODE XREF: sub_1000E4D0+46Fj
		mov	eax, [esp+23Ch+var_200]
		mov	ecx, esi
		not	ecx
		mov	[esp+23Ch+var_229], 0
		sar	ecx, 1Fh
		and	cl, dl
		lea	edx, [esi-1]
		not	edx
		sar	edx, 1Fh
		and	dl, byte ptr [esp+23Ch+var_214]
		cmp	edi, eax
		jnb	short loc_1000E8D8
		mov	eax, [esp+23Ch+var_208]
		jmp	short loc_1000E8EF
; ---------------------------------------------------------------------------

loc_1000E8D8:				; CODE XREF: sub_1000E4D0+400j
		add	eax, [esp+23Ch+arg_28]
		mov	ebx, [esp+23Ch+var_1D8]
		cmp	edi, eax
		jnb	short loc_1000E8F6
		mov	eax, [esp+23Ch+var_218]
		sub	eax, [esp+23Ch+var_200]

loc_1000E8EF:				; CODE XREF: sub_1000E4D0+406j
		mov	al, [eax+edi]
		mov	[esp+23Ch+var_229], al

loc_1000E8F6:				; CODE XREF: sub_1000E4D0+415j
		mov	al, cl
		not	dl
		not	al
		and	cl, 80h
		and	al, [esp+23Ch+var_229]
		inc	edi
		or	al, cl
		and	al, dl
		mov	edx, [esp+23Ch+var_1F0]
		and	al, [esp+23Ch+var_21D]
		lea	ecx, [esi+edx]
		cmp	ecx, [esp+23Ch+var_1F4]
		jb	short loc_1000E928
		mov	cl, [esp+23Ch+var_21E]
		and	cl, al
		mov	al, [ebp+0]
		and	al, byte ptr [esp+23Ch+var_21C]
		or	al, cl

loc_1000E928:				; CODE XREF: sub_1000E4D0+447j
		lea	ecx, [esp+23Ch+var_84]
		inc	ebp
		add	ecx, edx
		mov	[esi+ecx], al
		inc	esi
		lea	eax, [esi+edx]
		mov	edx, [esp+23Ch+var_214]
		cmp	eax, ebx
		jb	loc_1000E8B0
		mov	esi, [esp+23Ch+var_228]
		mov	ebp, [esp+23Ch+var_224]

loc_1000E94D:				; CODE XREF: sub_1000E4D0+3ADj
		push	ebx
		lea	eax, [esp+240h+var_84]
		push	eax
		mov	eax, [esi+14h]
		push	ebp
		call	eax
		push	[esp+248h+var_20C]
		lea	eax, [esp+24Ch+var_84]
		push	0
		push	eax
		mov	eax, [esi+24h]
		push	ebp
		call	eax
		xor	ecx, ecx
		add	esp, 1Ch
		cmp	[esp+23Ch+var_20C], ecx
		jbe	short loc_1000E9A9
		mov	edx, [esp+23Ch+var_21C]
		mov	esi, [esp+23Ch+var_20C]
		jmp	short loc_1000E990
; ---------------------------------------------------------------------------
		align 10h

loc_1000E990:				; CODE XREF: sub_1000E4D0+4B3j
					; sub_1000E4D0+4D3j
		mov	al, [esp+ecx+23Ch+var_84]
		and	al, dl
		or	[esp+ecx+23Ch+var_144],	al
		inc	ecx
		cmp	ecx, esi
		jb	short loc_1000E990
		mov	esi, [esp+23Ch+var_228]

loc_1000E9A9:				; CODE XREF: sub_1000E4D0+4A9j
		mov	ecx, [esp+23Ch+var_204]
		mov	edx, [esp+23Ch+var_1DC]
		inc	ecx
		mov	[esp+23Ch+var_204], ecx
		cmp	ecx, [esp+23Ch+var_210]
		jbe	loc_1000E860

loc_1000E9C0:				; CODE XREF: sub_1000E4D0+373j
		mov	eax, [esi+10h]
		push	ebp
		call	eax
		add	esp, 4
		cmp	[esp+23Ch+arg_2C], 0
		jz	short loc_1000EA2B
		mov	ebx, [esp+23Ch+var_1E4]
		test	ebx, ebx
		jz	short loc_1000E9F4
		mov	ecx, ebx
		lea	edi, [esp+23Ch+var_1C4]
		mov	edx, ecx
		mov	eax, 5C5C5C5Ch
		shr	ecx, 2
		rep stosd
		mov	ecx, edx
		and	ecx, 3
		rep stosb

loc_1000E9F4:				; CODE XREF: sub_1000E4D0+509j
		push	[esp+23Ch+arg_14]
		mov	eax, [esi+14h]
		push	[esp+240h+var_1EC]
		push	ebp
		call	eax
		push	ebx
		lea	eax, [esp+24Ch+var_1C4]
		push	eax
		mov	eax, [esi+14h]
		push	ebp
		call	eax
		push	[esp+254h+var_20C]
		lea	eax, [esp+258h+var_144]
		push	eax
		mov	eax, [esi+14h]
		push	ebp
		call	eax
		add	esp, 24h
		jmp	short loc_1000EA5C
; ---------------------------------------------------------------------------

loc_1000EA2B:				; CODE XREF: sub_1000E4D0+501j
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_1000EA3B

loc_1000EA31:				; CODE XREF: sub_1000E4D0+569j
		xor	[esp+eax+23Ch+var_1C4],	6Ah
		inc	eax
		cmp	eax, ebx
		jb	short loc_1000EA31

loc_1000EA3B:				; CODE XREF: sub_1000E4D0+55Fj
		push	ebx
		lea	eax, [esp+240h+var_1C4]
		push	eax
		mov	eax, [esi+14h]
		push	ebp
		call	eax
		push	[esp+248h+var_20C]
		lea	eax, [esp+24Ch+var_144]
		push	eax
		mov	eax, [esi+14h]
		push	ebp
		call	eax
		add	esp, 18h

loc_1000EA5C:				; CODE XREF: sub_1000E4D0+559j
		push	[esp+23Ch+arg_8]
		mov	eax, [esi+18h]
		push	[esp+240h+var_1E0]
		push	[esp+244h+var_1E8]
		push	ebp
		call	eax
		mov	eax, [esi+0Ch]
		push	1
		push	ebp
		call	eax
		mov	ecx, [esp+254h+var_4]
		add	esp, 18h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 22Ch
		retn
sub_1000E4D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000EAA0(int,	int, int, int, int, size_t, int, int, int, int,	int)
sub_1000EAA0	proc near		; DATA XREF: .rdata:1003E528o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	eax, [esp+arg_C]
		cmp	dword ptr [eax+24h], 0
		jnz	short loc_1000EAAE
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000EAAE:				; CODE XREF: sub_1000EAA0+8j
		push	1		; char
		push	[esp+4+arg_28]	; int
		push	[esp+8+arg_24]	; int
		push	[esp+0Ch+arg_20] ; int
		push	[esp+10h+arg_1C] ; int
		push	[esp+14h+arg_18] ; int
		push	[esp+18h+arg_14] ; size_t
		push	[esp+1Ch+arg_10] ; int
		push	eax		; int
		push	[esp+24h+arg_8]	; int
		push	[esp+28h+arg_4]	; int
		push	[esp+2Ch+arg_0]	; int
		call	sub_1000E4D0
		add	esp, 30h
		retn
sub_1000EAA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EAF0	proc near		; DATA XREF: .rdata:1003E420o
		push	218h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_1000EAF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000EB00(void	*, void	*, int,	int, int, size_t)
sub_1000EB00	proc near		; DATA XREF: .rdata:1003E2A0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		push	218h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000EB78
		push	[esp+4+arg_14]	; size_t
		push	[esp+8+arg_C]	; int
		push	[esp+0Ch+arg_8]	; int
		push	[esp+10h+arg_4]	; void *
		push	[esp+14h+arg_10] ; int
		push	[esp+18h+arg_0]	; void *
		push	esi		; int
		call	sub_1000EC70
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000EB76
		mov	eax, [esi+210h]
		test	eax, eax
		jz	short loc_1000EB69
		mov	ecx, [esi+20Ch]
		test	ecx, ecx
		jz	short loc_1000EB69
		push	1
		push	eax
		call	ecx
		add	esp, 8
		mov	dword ptr [esi+210h], 0
		mov	dword ptr [esi+20Ch], 0

loc_1000EB69:				; CODE XREF: sub_1000EB00+41j
					; sub_1000EB00+4Bj
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EB76:				; CODE XREF: sub_1000EB00+37j
		mov	eax, esi

loc_1000EB78:				; CODE XREF: sub_1000EB00+12j
		pop	esi
		retn
sub_1000EB00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EB80	proc near		; CODE XREF: sub_10010390+Fp
					; DATA XREF: .rdata:1003E2A4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+210h]
		test	eax, eax
		jz	short loc_1000EBB5
		mov	ecx, [esi+20Ch]
		test	ecx, ecx
		jz	short loc_1000EBB5
		push	1
		push	eax
		call	ecx
		add	esp, 8
		mov	dword ptr [esi+210h], 0
		mov	dword ptr [esi+20Ch], 0

loc_1000EBB5:				; CODE XREF: sub_1000EB80+Dj
					; sub_1000EB80+17j
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000EBC5
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000EBC5:				; CODE XREF: sub_1000EB80+3Aj
		pop	esi
		retn
sub_1000EB80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EBD0	proc near		; CODE XREF: sub_10010130+13Bp
					; sub_100103C0+FCp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	ecx, [esp+arg_0]
		push	esi
		test	ecx, ecx
		jz	loc_1000EC5D
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000EC5D
		cmp	[esp+4+arg_10],	0
		mov	esi, [esp+4+arg_14]
		jnz	short loc_1000EBF3
		test	esi, esi
		jnz	short loc_1000EC5D

loc_1000EBF3:				; CODE XREF: sub_1000EBD0+1Dj
		push	edi
		mov	edi, [ecx]
		shl	edi, 2
		cmp	dword ptr [ecx+214h], 0
		jz	short loc_1000EC1F
		xor	edx, edx
		mov	eax, esi
		div	edi
		test	edx, edx
		jz	short loc_1000EC1F
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EC1F:				; CODE XREF: sub_1000EBD0+30j
					; sub_1000EBD0+3Aj
		mov	edx, [esp+8+arg_C]
		cmp	edx, esi
		jnb	short loc_1000EC3A
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EC3A:				; CODE XREF: sub_1000EBD0+55j
		mov	eax, [esp+8+arg_8]
		push	edi
		push	esi
		push	[esp+10h+arg_10]
		mov	[eax], esi
		push	edx
		push	eax
		push	[esp+1Ch+arg_4]
		mov	eax, [ecx+8]
		push	dword ptr [ecx+210h]
		call	eax
		add	esp, 1Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EC5D:				; CODE XREF: sub_1000EBD0+7j
					; sub_1000EBD0+12j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_1000EBD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000EC70(int,	void *,	int, void *, int, int, size_t)
sub_1000EC70	proc near		; CODE XREF: sub_1000EB00+2Dp
					; sub_100100C0+4Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebx
		mov	ebx, [esp+4+arg_14]
		mov	edx, ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_10]
		mov	ecx, edi
		cmp	edi, 2
		jz	short loc_1000EC94
		lea	eax, [edi-3]
		cmp	eax, 1
		ja	short loc_1000EC99
		xor	ecx, ecx
		lea	edx, [ecx+1]
		jmp	short loc_1000EC99
; ---------------------------------------------------------------------------

loc_1000EC94:				; CODE XREF: sub_1000EC70+13j
		mov	ecx, 1

loc_1000EC99:				; CODE XREF: sub_1000EC70+1Bj
					; sub_1000EC70+22j
		mov	ebp, [esp+10h+arg_18]
		mov	esi, [esp+10h+arg_0]
		push	ebp		; size_t
		push	edx		; int
		push	ecx		; int
		push	[esp+1Ch+arg_C]	; void *
		mov	dword ptr [esi+210h], 0
		push	[esp+20h+arg_8]	; int
		mov	dword ptr [esi+20Ch], 0
		push	[esp+24h+arg_4]	; void *
		push	esi		; int
		call	sub_1000EE40
		add	esp, 1Ch
		mov	[esp+10h+arg_10], eax
		test	eax, eax
		jz	short loc_1000ED16
		mov	ecx, [esi+210h]
		test	ecx, ecx
		jz	loc_1000EE2F
		mov	edx, [esi+20Ch]
		test	edx, edx
		jz	loc_1000EE2F
		push	1
		push	ecx
		call	edx
		mov	eax, [esp+18h+arg_10]
		add	esp, 8
		mov	dword ptr [esi+210h], 0
		mov	dword ptr [esi+20Ch], 0
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000ED16:				; CODE XREF: sub_1000EC70+63j
		sub	edi, 2
		jz	loc_1000EDD5
		dec	edi
		jz	short loc_1000ED8E
		dec	edi
		jnz	loc_1000EE2D
		mov	eax, [esp+10h+arg_C]
		push	ebp		; size_t
		push	eax		; int
		push	dword ptr [esi+8] ; int
		push	esi		; int
		cmp	dword_100504DC,	edi
		jz	short loc_1000ED66
		call	sub_10037640
		add	esp, 10h
		mov	[esi+210h], eax
		mov	eax, offset sub_100379F0
		test	ebx, ebx
		jnz	short loc_1000ED57
		mov	eax, offset sub_100378C0

loc_1000ED57:				; CODE XREF: sub_1000EC70+E0j
		mov	dword ptr [esi+20Ch], offset sub_1000D270
		jmp	loc_1000EE05
; ---------------------------------------------------------------------------

loc_1000ED66:				; CODE XREF: sub_1000EC70+C9j
		call	sub_1000D890
		add	esp, 10h
		mov	[esi+210h], eax
		mov	eax, offset sub_1000DBE0
		test	ebx, ebx
		jnz	short loc_1000ED82
		mov	eax, offset sub_1000DA80

loc_1000ED82:				; CODE XREF: sub_1000EC70+10Bj
		mov	dword ptr [esi+20Ch], offset sub_1000DB80
		jmp	short loc_1000EE05
; ---------------------------------------------------------------------------

loc_1000ED8E:				; CODE XREF: sub_1000EC70+B0j
		mov	eax, [esp+10h+arg_C]
		push	ebp		; size_t
		push	eax		; int
		push	dword ptr [esi+8] ; int
		push	esi		; int
		call	sub_1000D3F0
		add	esp, 10h
		mov	[esi+210h], eax
		cmp	dword_100504D0,	0
		jz	short loc_1000EDC2
		mov	dword ptr [esi+8], offset sub_1000D6C0
		mov	dword ptr [esi+20Ch], offset sub_1000D440
		jmp	short loc_1000EE08
; ---------------------------------------------------------------------------

loc_1000EDC2:				; CODE XREF: sub_1000EC70+13Dj
		mov	dword ptr [esi+8], offset sub_1000D4F0
		mov	dword ptr [esi+20Ch], offset sub_1000D440
		jmp	short loc_1000EE08
; ---------------------------------------------------------------------------

loc_1000EDD5:				; CODE XREF: sub_1000EC70+A9j
		mov	eax, [esp+10h+arg_C]
		push	ebp		; size_t
		push	eax		; void *
		push	dword ptr [esi+8] ; int
		push	esi		; int
		call	sub_1000CF70
		add	esp, 10h
		mov	[esi+210h], eax
		mov	eax, offset sub_1000D290
		test	ebx, ebx
		jnz	short loc_1000EDFB
		mov	eax, offset sub_1000CFC0

loc_1000EDFB:				; CODE XREF: sub_1000EC70+184j
		mov	dword ptr [esi+20Ch], offset sub_1000D270

loc_1000EE05:				; CODE XREF: sub_1000EC70+F1j
					; sub_1000EC70+11Cj
		mov	[esi+8], eax

loc_1000EE08:				; CODE XREF: sub_1000EC70+150j
					; sub_1000EC70+163j
		cmp	dword ptr [esi+210h], 0
		mov	dword ptr [esi+214h], 0
		jnz	short loc_1000EE2D
		pop	edi
		mov	dword ptr [esi+20Ch], 0
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000EE2D:				; CODE XREF: sub_1000EC70+B3j
					; sub_1000EC70+1A9j
		xor	eax, eax

loc_1000EE2F:				; CODE XREF: sub_1000EC70+6Dj
					; sub_1000EC70+7Bj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000EC70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000EE40(int,	void *,	int, void *, int, int, size_t)
sub_1000EE40	proc near		; CODE XREF: sub_1000EC70+55p

var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 10h
		push	ebx
		push	edi
		mov	edi, [esp+18h+arg_4]
		test	edi, edi
		jz	short loc_1000EE7C
		mov	ebx, [esp+18h+arg_8]
		lea	eax, [ebx-10h]
		cmp	eax, 10h
		ja	short loc_1000EE7C
		test	bl, 3
		jnz	short loc_1000EE7C
		mov	ecx, [esp+18h+arg_18]
		lea	eax, [ecx-10h]
		cmp	eax, 10h
		ja	short loc_1000EE7C
		test	cl, 3
		jnz	short loc_1000EE7C
		mov	eax, [esp+18h+arg_10]
		test	eax, eax
		jz	short loc_1000EE99
		cmp	eax, 1
		jz	short loc_1000EE92

loc_1000EE7C:				; CODE XREF: sub_1000EE40+Bj
					; sub_1000EE40+17j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000EE92:				; CODE XREF: sub_1000EE40+3Aj
		cmp	[esp+18h+arg_C], 0
		jz	short loc_1000EE7C

loc_1000EE99:				; CODE XREF: sub_1000EE40+35j
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jnz	short loc_1000EEB9
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000EEB9:				; CODE XREF: sub_1000EE40+60j
		cmp	dword_100504CC,	0
		push	ebp
		jnz	loc_1000F004
		push	offset aNss_disable_hw ; "NSS_DISABLE_HW_AES"
		call	ds:getenv
		add	esp, 4
		test	eax, eax
		jnz	loc_1000EF75
		lea	eax, [esp+20h+var_C]
		push	eax
		lea	eax, [esp+24h+arg_4]
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		lea	eax, [esp+2Ch+var_4]
		push	eax
		push	1
		call	sub_1002DC40
		mov	ecx, [esp+34h+arg_4]
		add	esp, 14h
		mov	eax, ecx
		and	eax, 2000000h
		neg	eax
		sbb	eax, eax
		and	eax, 2
		dec	eax
		test	cl, 2
		mov	dword_100504CC,	eax
		mov	eax, 0
		setnz	al
		lea	eax, ds:0FFFFFFFFh[eax*2]
		mov	dword_100504D8,	eax
		test	ecx, 8000000h
		jz	short loc_1000EF64
		test	ecx, 10000000h
		jz	short loc_1000EF64
		mov	ecx, 0
		xgetbv
		mov	[esp+20h+var_10], eax
		mov	eax, [esp+20h+var_10]
		and	eax, 6
		cmp	al, 6
		jnz	short loc_1000EF64
		mov	ecx, [esp+20h+arg_18]
		mov	eax, 1
		mov	dword_100504D4,	eax
		jmp	loc_1000F009
; ---------------------------------------------------------------------------

loc_1000EF64:				; CODE XREF: sub_1000EE40+F0j
					; sub_1000EE40+F8j ...
		mov	ecx, [esp+20h+arg_18]
		or	eax, 0FFFFFFFFh
		mov	dword_100504D4,	eax
		jmp	loc_1000F009
; ---------------------------------------------------------------------------

loc_1000EF75:				; CODE XREF: sub_1000EE40+97j
		mov	dword_100504CC,	0FFFFFFFFh
		mov	dword_100504D4,	0FFFFFFFFh
		mov	dword_100504D8,	0FFFFFFFFh

loc_1000EF93:				; CODE XREF: sub_1000EE40+1D0j
					; sub_1000EE40+1D5j ...
		mov	ecx, [esp+20h+arg_18]
		xor	ebp, ebp
		mov	dword_100504D0,	ebp

loc_1000EF9F:				; CODE XREF: sub_1000EE40+1F1j
					; sub_1000EE40+1FEj
		mov	dword_100504DC,	0

loc_1000EFA9:				; CODE XREF: sub_1000EE40+20Aj
		mov	eax, ecx
		mov	edx, ebx
		shr	eax, 2
		shr	edx, 2
		mov	[esi], eax
		mov	[esp+20h+arg_4], edx
		cmp	edx, eax
		jbe	short loc_1000EFBF
		mov	eax, edx

loc_1000EFBF:				; CODE XREF: sub_1000EE40+17Bj
		add	eax, 6
		cmp	[esp+20h+arg_10], 1
		mov	[esi+4], eax
		jnz	loc_1000F0A9
		push	ecx		; size_t
		push	[esp+24h+arg_C]	; void *
		lea	eax, [esi+0Ch]
		push	eax		; void *
		call	memcpy
		mov	ecx, [esp+2Ch+arg_14]
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_1000F095
		test	ecx, ecx
		jz	short loc_1000F070
		cmp	ebx, 10h
		jnz	short loc_1000F04F
		mov	edx, [esp+20h+arg_4]
		mov	eax, offset loc_100393E0
		jmp	loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F004:				; CODE XREF: sub_1000EE40+81j
		mov	eax, dword_100504D4

loc_1000F009:				; CODE XREF: sub_1000EE40+11Fj
					; sub_1000EE40+130j
		cmp	dword_100504CC,	0
		jle	short loc_1000EF93
		test	bl, 7
		jnz	loc_1000EF93
		cmp	ecx, 10h
		jnz	loc_1000EF93
		mov	ebp, 1
		mov	dword_100504D0,	ebp
		test	eax, eax
		jle	loc_1000EF9F
		cmp	dword_100504D8,	0
		jle	loc_1000EF9F
		mov	dword_100504DC,	ebp
		jmp	loc_1000EFA9
; ---------------------------------------------------------------------------

loc_1000F04F:				; CODE XREF: sub_1000EE40+1B4j
		cmp	ebx, 18h
		jnz	short loc_1000F062
		mov	edx, [esp+20h+arg_4]
		mov	eax, offset loc_100394A0
		jmp	loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F062:				; CODE XREF: sub_1000EE40+212j
		mov	edx, [esp+20h+arg_4]
		mov	eax, offset loc_10039580
		jmp	loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F070:				; CODE XREF: sub_1000EE40+1AFj
		cmp	ebx, 10h
		jnz	short loc_1000F080
		mov	edx, [esp+20h+arg_4]
		mov	eax, offset loc_10039670
		jmp	short loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F080:				; CODE XREF: sub_1000EE40+233j
		mov	eax, offset loc_10039990
		cmp	ebx, 18h
		jz	short loc_1000F08F
		mov	eax, offset loc_10039D20

loc_1000F08F:				; CODE XREF: sub_1000EE40+248j
		mov	edx, [esp+20h+arg_4]
		jmp	short loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F095:				; CODE XREF: sub_1000EE40+1A7j
		mov	eax, offset sub_1000F8F0
		test	ecx, ecx
		jnz	short loc_1000F0A3
		mov	eax, offset sub_1000F490

loc_1000F0A3:				; CODE XREF: sub_1000EE40+25Cj
		mov	edx, [esp+20h+arg_4]
		jmp	short loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F0A9:				; CODE XREF: sub_1000EE40+18Aj
		mov	ecx, [esp+20h+arg_14]
		test	ebp, ebp
		jz	short loc_1000F0F1
		test	ecx, ecx
		jz	short loc_1000F0D4
		cmp	ebx, 10h
		jnz	short loc_1000F0C1
		mov	eax, offset loc_10037B00
		jmp	short loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F0C1:				; CODE XREF: sub_1000EE40+278j
		cmp	ebx, 18h
		jnz	short loc_1000F0CD
		mov	eax, offset loc_10037DC0
		jmp	short loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F0CD:				; CODE XREF: sub_1000EE40+284j
		mov	eax, offset loc_100380F0
		jmp	short loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F0D4:				; CODE XREF: sub_1000EE40+273j
		cmp	ebx, 10h
		jnz	short loc_1000F0E0
		mov	eax, offset loc_10038490
		jmp	short loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F0E0:				; CODE XREF: sub_1000EE40+297j
		mov	eax, offset loc_10038750
		cmp	ebx, 18h
		jz	short loc_1000F0FF
		mov	eax, offset loc_10038A80
		jmp	short loc_1000F0FF
; ---------------------------------------------------------------------------

loc_1000F0F1:				; CODE XREF: sub_1000EE40+26Fj
		mov	eax, offset sub_1000FA00
		test	ecx, ecx
		jnz	short loc_1000F0FF
		mov	eax, offset sub_1000F5B0

loc_1000F0FF:				; CODE XREF: sub_1000EE40+1BFj
					; sub_1000EE40+21Dj ...
		mov	[esi+8], eax
		mov	eax, [esi+4]
		inc	eax
		imul	eax, [esi]
		cmp	eax, 78h
		jbe	short loc_1000F126
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000F126:				; CODE XREF: sub_1000EE40+2CCj
		test	ebp, ebp
		jz	short loc_1000F196
		lea	eax, [esi+2Ch]
		push	eax
		push	edi
		test	ecx, ecx
		jz	short loc_1000F177
		cmp	ebx, 10h
		jnz	short loc_1000F164
		call	sub_10038E20

loc_1000F13D:				; CODE XREF: sub_1000EE40+32Ej
					; sub_1000EE40+335j ...
		add	esp, 8

loc_1000F140:				; CODE XREF: sub_1000EE40+369j
					; sub_1000EE40+375j
		pop	ebp
		mov	[esi+210h], esi
		xor	eax, eax
		mov	dword ptr [esi+20Ch], 0
		mov	dword ptr [esi+214h], 1
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000F164:				; CODE XREF: sub_1000EE40+2F6j
		cmp	ebx, 18h
		jnz	short loc_1000F170
		call	sub_10038FD0
		jmp	short loc_1000F13D
; ---------------------------------------------------------------------------

loc_1000F170:				; CODE XREF: sub_1000EE40+327j
		call	sub_100391D0
		jmp	short loc_1000F13D
; ---------------------------------------------------------------------------

loc_1000F177:				; CODE XREF: sub_1000EE40+2F1j
		cmp	ebx, 10h
		jnz	short loc_1000F183
		call	sub_10038F10
		jmp	short loc_1000F13D
; ---------------------------------------------------------------------------

loc_1000F183:				; CODE XREF: sub_1000EE40+33Aj
		cmp	ebx, 18h
		jnz	short loc_1000F18F
		call	sub_100390E0
		jmp	short loc_1000F13D
; ---------------------------------------------------------------------------

loc_1000F18F:				; CODE XREF: sub_1000EE40+346j
		call	sub_100392C0
		jmp	short loc_1000F13D
; ---------------------------------------------------------------------------

loc_1000F196:				; CODE XREF: sub_1000EE40+2E8j
		push	edx		; int
		push	edi		; void *
		push	esi		; int
		test	ecx, ecx
		jz	short loc_1000F1AB
		call	sub_1000FC60
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F1B7
		jmp	short loc_1000F140
; ---------------------------------------------------------------------------

loc_1000F1AB:				; CODE XREF: sub_1000EE40+35Bj
		call	sub_1000FA60
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000F140

loc_1000F1B7:				; CODE XREF: sub_1000EE40+367j
		pop	ebp
		pop	esi
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
sub_1000EE40	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000F1D0:				; DATA XREF: sub_1000F490+58o
					; sub_1000F5B0+12o ...
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F1E0	proc near		; DATA XREF: sub_1000F490:loc_1000F4DBo
					; sub_1000F5B0+8o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	ecx, [esp+0Ch+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	edi, [ecx+4]
		mov	eax, [ecx]
		imul	eax, edi
		mov	esi, [ecx+eax*4+2Ch]
		lea	eax, [ecx+eax*4]
		mov	ecx, [esp+18h+arg_8]
		mov	edx, [ecx+0Ch]
		xor	edx, [eax+38h]
		mov	ebx, [ecx+8]
		xor	ebx, [eax+34h]
		xor	esi, [ecx]
		mov	[esp+18h+var_C], edx
		mov	edx, [ecx+4]
		xor	edx, [eax+30h]
		sub	eax, 0FFFFFFD8h
		mov	[esp+18h+var_8], ebx
		mov	[esp+18h+arg_0], edx
		mov	[esp+18h+arg_8], esi
		cmp	edi, 1
		jle	loc_1000F350
		dec	edi
		mov	ecx, ebx
		mov	[esp+18h+var_4], edi
		push	ebp

loc_1000F235:				; CODE XREF: sub_1000F1E0+167j
		shr	ecx, 10h
		movzx	ecx, cl
		mov	ebp, [esp+1Ch+var_C]
		shr	edx, 18h
		mov	ebx, ds:dword_10041F00[edx*4]
		xor	ebx, ds:dword_10041B00[ecx*4]
		mov	ecx, ebp
		shr	ecx, 8
		mov	edx, [esp+1Ch+arg_8]
		movzx	ecx, cl
		xor	ebx, ds:dword_10041700[ecx*4]
		movzx	ecx, dl
		xor	ebx, ds:dword_10041300[ecx*4]
		mov	ecx, edx
		shr	ecx, 8
		mov	edx, [esp+1Ch+var_8]
		movzx	ecx, cl
		shr	edx, 18h
		mov	edi, ds:dword_10041700[ecx*4]
		mov	ecx, ebp
		xor	edi, ds:dword_10041F00[edx*4]
		shr	ecx, 10h
		movzx	ecx, cl
		xor	edi, ds:dword_10041B00[ecx*4]
		mov	ecx, [esp+1Ch+arg_0]
		movzx	ecx, cl
		xor	edi, ds:dword_10041300[ecx*4]
		mov	ecx, [esp+1Ch+arg_8]
		shr	ecx, 10h
		movzx	edx, cl
		mov	ecx, [esp+1Ch+arg_0]
		shr	ecx, 8
		movzx	ecx, cl
		mov	esi, ds:dword_10041B00[edx*4]
		mov	edx, [esp+1Ch+arg_8]
		shr	edx, 18h
		xor	esi, ds:dword_10041700[ecx*4]
		mov	ecx, ebp
		shr	ecx, 18h
		mov	edx, ds:dword_10041F00[edx*4]
		xor	esi, ds:dword_10041F00[ecx*4]
		mov	ecx, [esp+1Ch+var_8]
		movzx	ecx, cl
		xor	esi, ds:dword_10041300[ecx*4]
		mov	ecx, [esp+1Ch+arg_0]
		shr	ecx, 10h
		movzx	ecx, cl
		xor	edx, ds:dword_10041B00[ecx*4]
		mov	ecx, [esp+1Ch+var_8]
		shr	ecx, 8
		movzx	ecx, cl
		xor	edx, ds:dword_10041700[ecx*4]
		mov	ecx, ebp
		movzx	ecx, cl
		xor	edx, ds:dword_10041300[ecx*4]
		xor	edx, [eax]
		mov	ecx, [eax-4]
		xor	ecx, esi
		mov	[esp+1Ch+var_C], edx
		mov	edx, [eax-8]
		mov	esi, [eax-0Ch]
		xor	edx, edi
		xor	esi, ebx
		mov	[esp+1Ch+var_8], ecx
		sub	eax, 10h
		mov	[esp+1Ch+arg_0], edx
		dec	[esp+1Ch+var_4]
		mov	[esp+1Ch+arg_8], esi
		jnz	loc_1000F235
		mov	ebx, ecx
		pop	ebp

loc_1000F350:				; CODE XREF: sub_1000F1E0+47j
		mov	edx, [esp+18h+arg_4]
		mov	ecx, [esp+18h+arg_8]
		movzx	ecx, cl
		pop	edi
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx], cl
		mov	ecx, [esp+14h+var_C]
		shr	ecx, 8
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+1], cl
		mov	ecx, ebx
		shr	ecx, 10h
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+2], cl
		mov	ecx, [esp+14h+arg_0]
		shr	ecx, 18h
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+3], cl
		mov	ecx, [esp+14h+arg_0]
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+4], cl
		mov	ecx, [esp+14h+arg_8]
		shr	ecx, 8
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+5], cl
		mov	ecx, [esp+14h+var_C]
		shr	ecx, 10h
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+6], cl
		mov	ecx, ebx
		shr	ecx, 18h
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+7], cl
		movzx	ecx, bl
		shr	ebx, 8
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+8], cl
		mov	ecx, [esp+14h+arg_0]
		shr	ecx, 8
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+9], cl
		mov	ecx, [esp+14h+arg_8]
		shr	ecx, 10h
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+0Ah], cl
		mov	ecx, [esp+14h+var_C]
		shr	ecx, 18h
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+0Bh], cl
		mov	ecx, [esp+14h+var_C]
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+0Ch], cl
		movzx	ecx, bl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+0Dh], cl
		mov	ecx, [esp+14h+arg_0]
		shr	ecx, 10h
		movzx	ecx, cl
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+0Eh], cl
		mov	ecx, [esp+14h+arg_8]
		shr	ecx, 18h
		movzx	ecx, ds:byte_10040200[ecx]
		mov	[edx+0Fh], cl
		mov	ecx, [eax]
		xor	[edx+0Ch], ecx
		mov	ecx, [eax-4]
		xor	[edx+8], ecx
		mov	ecx, [eax-8]
		xor	[edx+4], ecx
		mov	eax, [eax-0Ch]
		xor	[edx], eax
		xor	eax, eax
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000F1E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000F490(int,	int, int, int, int, int, size_t)
sub_1000F490	proc near		; DATA XREF: sub_1000EE40+25Eo

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+38h+var_4], eax
		mov	eax, [esp+38h+arg_0]
		mov	[esp+38h+var_34], eax
		mov	eax, [esp+38h+arg_4]
		push	ebx
		mov	ebx, [esp+3Ch+arg_14]
		mov	[esp+3Ch+var_28], eax
		mov	eax, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_2C], eax
		mov	[esp+3Ch+var_30], ebx
		push	edi
		mov	edi, [esp+40h+arg_18]
		test	ebx, ebx
		jnz	short loc_1000F4DB
		pop	edi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+38h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_1000F4DB:				; CODE XREF: sub_1000F490+36j
		mov	[esp+40h+var_38], offset sub_1000F1E0
		cmp	edi, 10h
		jz	short loc_1000F4F0
		mov	[esp+40h+var_38], offset loc_1000F1D0

loc_1000F4F0:				; CODE XREF: sub_1000F490+56j
		push	ebp
		push	esi
		mov	esi, ebx
		sub	esi, edi
		push	edi		; size_t
		lea	ebp, [esi+eax]
		lea	eax, [esp+4Ch+var_24]
		push	ebp		; void *
		push	eax		; void *
		call	memcpy
		add	esi, [esp+54h+var_28]
		add	esp, 0Ch
		cmp	ebx, edi
		jbe	short loc_1000F54F
		mov	ebx, ebp
		sub	ebx, edi

loc_1000F514:				; CODE XREF: sub_1000F490+BDj
		push	ebp
		push	esi
		push	[esp+50h+var_34]
		call	[esp+54h+var_38]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F590
		test	edi, edi
		jz	short loc_1000F53B
		lea	esp, [esp+0]

loc_1000F530:				; CODE XREF: sub_1000F490+A9j
		mov	cl, [ebx+eax]
		xor	[eax+esi], cl
		inc	eax
		cmp	eax, edi
		jb	short loc_1000F530

loc_1000F53B:				; CODE XREF: sub_1000F490+97j
		mov	eax, [esp+48h+var_30]
		sub	esi, edi
		sub	eax, edi
		sub	ebp, edi
		sub	ebx, edi
		mov	[esp+48h+var_30], eax
		cmp	eax, edi
		ja	short loc_1000F514

loc_1000F54F:				; CODE XREF: sub_1000F490+7Ej
		mov	ebx, [esp+48h+var_34]
		cmp	ebp, [esp+48h+var_2C]
		jnz	short loc_1000F57C
		push	ebp
		push	esi
		push	ebx
		call	[esp+54h+var_38]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F590
		xor	ecx, ecx
		test	edi, edi
		jz	short loc_1000F57C
		lea	ecx, [ecx+0]

loc_1000F570:				; CODE XREF: sub_1000F490+EAj
		mov	al, [ebx+ecx+0Ch]
		xor	[ecx+esi], al
		inc	ecx
		cmp	ecx, edi
		jb	short loc_1000F570

loc_1000F57C:				; CODE XREF: sub_1000F490+C7j
					; sub_1000F490+DBj
		push	edi		; size_t
		lea	eax, [esp+4Ch+var_24]
		push	eax		; void *
		lea	eax, [ebx+0Ch]
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_1000F590:				; CODE XREF: sub_1000F490+93j
					; sub_1000F490+D5j
		mov	ecx, [esp+48h+var_4]
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
sub_1000F490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F5B0	proc near		; DATA XREF: sub_1000EE40+2BAo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_18]
		mov	ecx, offset sub_1000F1E0
		cmp	edi, 10h
		jz	short loc_1000F5C7
		mov	ecx, offset loc_1000F1D0

loc_1000F5C7:				; CODE XREF: sub_1000F5B0+10j
		mov	ebx, [esp+10h+arg_14]
		mov	[esp+10h+arg_18], ecx
		test	ebx, ebx
		jz	short loc_1000F5FC
		mov	ebp, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_10]
		sub	ebp, esi
		lea	ecx, [ecx+0]

loc_1000F5E0:				; CODE XREF: sub_1000F5B0+4Aj
		push	esi
		lea	eax, [esi+ebp]
		push	eax
		push	[esp+18h+arg_0]
		call	ecx
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F5FE
		mov	ecx, [esp+10h+arg_18]
		add	esi, edi
		sub	ebx, edi
		jnz	short loc_1000F5E0

loc_1000F5FC:				; CODE XREF: sub_1000F5B0+21j
		xor	eax, eax

loc_1000F5FE:				; CODE XREF: sub_1000F5B0+40j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000F5B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F610	proc near		; DATA XREF: sub_1000F8F0:loc_1000F93Fo
					; sub_1000FA00+8o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	ecx, [esp+0Ch+arg_8]
		lea	eax, [edx+2Ch]
		push	ebx
		mov	ebx, [eax]
		mov	edx, [edx+4]
		xor	ebx, [ecx]
		mov	[esp+10h+arg_0], ebx
		mov	ebx, [ecx+4]
		xor	ebx, [eax+4]
		mov	[esp+10h+arg_8], ebx
		mov	ebx, [ecx+8]
		xor	ebx, [eax+8]
		mov	ecx, [ecx+0Ch]
		xor	ecx, [eax+0Ch]
		add	eax, 10h
		mov	[esp+10h+var_C], ebx
		mov	[esp+10h+var_8], ecx
		push	ebp
		push	esi
		push	edi
		cmp	edx, 1
		jbe	loc_1000F776
		dec	edx
		mov	[esp+1Ch+var_4], edx
		lea	esp, [esp+0]

loc_1000F660:				; CODE XREF: sub_1000F610+15Ej
		shr	ecx, 10h
		movzx	edx, cl
		mov	ecx, ebx
		shr	ecx, 8
		movzx	ecx, cl
		mov	ebx, ds:dword_10040B00[edx*4]
		mov	edx, [esp+1Ch+arg_8]
		xor	ebx, ds:dword_10040700[ecx*4]
		mov	ecx, [esp+1Ch+arg_0]
		shr	ecx, 18h
		xor	ebx, ds:dword_10040F00[ecx*4]
		movzx	ecx, dl
		shr	edx, 18h
		xor	ebx, ds:dword_10040300[ecx*4]
		mov	ecx, [esp+1Ch+var_8]
		shr	ecx, 8
		movzx	ecx, cl
		mov	edi, ds:dword_10040700[ecx*4]
		xor	edi, ds:dword_10040F00[edx*4]
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+var_C]
		shr	ecx, 10h
		movzx	ecx, cl
		xor	edi, ds:dword_10040B00[ecx*4]
		movzx	ecx, dl
		shr	edx, 18h
		xor	edi, ds:dword_10040300[ecx*4]
		mov	esi, ds:dword_10040F00[edx*4]
		mov	ecx, [esp+1Ch+arg_8]
		mov	edx, [esp+1Ch+var_8]
		shr	ecx, 10h
		movzx	ecx, cl
		xor	esi, ds:dword_10040B00[ecx*4]
		mov	ecx, [esp+1Ch+arg_0]
		shr	ecx, 8
		movzx	ecx, cl
		xor	esi, ds:dword_10040700[ecx*4]
		movzx	ecx, dl
		shr	edx, 18h
		xor	esi, ds:dword_10040300[ecx*4]
		mov	ecx, [esp+1Ch+var_C]
		mov	edx, ds:dword_10040F00[edx*4]
		shr	ecx, 10h
		movzx	ecx, cl
		xor	edx, ds:dword_10040B00[ecx*4]
		mov	ecx, [esp+1Ch+arg_8]
		shr	ecx, 8
		movzx	ecx, cl
		xor	edx, ds:dword_10040700[ecx*4]
		mov	ecx, [esp+1Ch+arg_0]
		movzx	ecx, cl
		xor	edx, ds:dword_10040300[ecx*4]
		xor	edx, [eax]
		mov	ecx, [eax+0Ch]
		mov	[esp+1Ch+arg_0], edx
		xor	ecx, esi
		mov	edx, [eax+4]
		xor	edx, ebx
		mov	[esp+1Ch+var_8], ecx
		mov	ebx, [eax+8]
		add	eax, 10h
		xor	ebx, edi
		mov	[esp+1Ch+arg_8], edx
		dec	[esp+1Ch+var_4]
		mov	[esp+1Ch+var_C], ebx
		jnz	loc_1000F660
		jmp	short loc_1000F77A
; ---------------------------------------------------------------------------

loc_1000F776:				; CODE XREF: sub_1000F610+41j
		mov	edx, [esp+1Ch+arg_8]

loc_1000F77A:				; CODE XREF: sub_1000F610+164j
		mov	ebp, [esp+1Ch+var_8]
		mov	ecx, ebx
		shr	ecx, 10h
		movzx	ecx, cl
		mov	ebx, ds:dword_10040300[ecx*4]
		mov	ecx, ebp
		shr	ecx, 18h
		and	ebx, 0FF0000h
		mov	ecx, ds:dword_10040700[ecx*4]
		and	ecx, 0FF000000h
		or	ebx, ecx
		mov	ecx, edx
		shr	ecx, 8
		movzx	ecx, cl
		mov	ecx, ds:dword_10040F00[ecx*4]
		and	ecx, 0FF00h
		or	ebx, ecx
		mov	ecx, [esp+1Ch+arg_0]
		movzx	ecx, cl
		movzx	ecx, byte ptr ds:dword_10040B00[ecx*4]
		or	ebx, ecx
		mov	ecx, [esp+1Ch+arg_0]
		shr	ecx, 18h
		xor	ebx, [eax]
		mov	edi, ds:dword_10040700[ecx*4]
		mov	ecx, ebp
		shr	ecx, 10h
		and	edi, 0FF000000h
		movzx	ecx, cl
		mov	ecx, ds:dword_10040300[ecx*4]
		and	ecx, 0FF0000h
		or	edi, ecx
		mov	ecx, [esp+1Ch+var_C]
		shr	ecx, 8
		movzx	ecx, cl
		mov	ecx, ds:dword_10040F00[ecx*4]
		and	ecx, 0FF00h
		or	edi, ecx
		movzx	ecx, dl
		movzx	ecx, byte ptr ds:dword_10040B00[ecx*4]
		or	edi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		shr	ecx, 10h
		movzx	ecx, cl
		xor	edi, [eax+4]
		mov	esi, ds:dword_10040300[ecx*4]
		mov	ecx, ebp
		shr	ecx, 8
		and	esi, 0FF0000h
		movzx	ecx, cl
		mov	ecx, ds:dword_10040F00[ecx*4]
		and	ecx, 0FF00h
		or	esi, ecx
		mov	ecx, edx
		shr	ecx, 18h
		mov	ecx, ds:dword_10040700[ecx*4]
		and	ecx, 0FF000000h
		or	esi, ecx
		mov	ecx, [esp+1Ch+var_C]
		movzx	ecx, cl
		movzx	ecx, byte ptr ds:dword_10040B00[ecx*4]
		or	esi, ecx
		mov	ecx, [esp+1Ch+arg_0]
		shr	ecx, 8
		movzx	ecx, cl
		xor	esi, [eax+8]
		mov	edx, ds:dword_10040F00[ecx*4]
		mov	ecx, [esp+1Ch+arg_8]
		and	edx, 0FF00h
		shr	ecx, 10h
		movzx	ecx, cl
		mov	ecx, ds:dword_10040300[ecx*4]
		and	ecx, 0FF0000h
		or	edx, ecx
		mov	ecx, [esp+1Ch+var_C]
		shr	ecx, 18h
		mov	ecx, ds:dword_10040700[ecx*4]
		and	ecx, 0FF000000h
		or	edx, ecx
		mov	ecx, ebp
		movzx	ecx, cl
		movzx	ecx, byte ptr ds:dword_10040B00[ecx*4]
		or	edx, ecx
		xor	edx, [eax+0Ch]
		mov	eax, [esp+1Ch+arg_4]
		mov	[eax+4], edi
		pop	edi
		mov	[eax+8], esi
		pop	esi
		mov	[eax], ebx
		pop	ebp
		mov	[eax+0Ch], edx
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000F610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000F8F0(int,	int, int, int, int, int, size_t)
sub_1000F8F0	proc near		; DATA XREF: sub_1000EE40:loc_1000F095o

var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= byte ptr -104h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 118h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+118h+var_4], eax
		mov	eax, [esp+118h+arg_14]
		mov	ecx, [esp+118h+arg_0]
		mov	edx, [esp+118h+arg_4]
		mov	[esp+118h+var_114], ecx
		push	ebx
		mov	ebx, [esp+11Ch+arg_18]
		test	eax, eax
		jnz	short loc_1000F93F
		pop	ebx
		mov	ecx, [esp+118h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 118h
		retn
; ---------------------------------------------------------------------------

loc_1000F93F:				; CODE XREF: sub_1000F8F0+37j
		mov	[esp+11Ch+var_110], offset sub_1000F610
		push	ebp
		lea	ebp, [ecx+0Ch]
		mov	[esp+120h+var_108], ebp
		push	esi
		mov	esi, ebp
		cmp	ebx, 10h
		jz	short loc_1000F95F
		mov	[esp+124h+var_110], offset loc_1000F1D0

loc_1000F95F:				; CODE XREF: sub_1000F8F0+65j
		push	edi
		test	eax, eax
		jz	short loc_1000F9D8
		mov	ebp, [esp+128h+arg_10]
		lea	edi, [esp+128h+var_104]
		mov	eax, ebx
		sub	edi, ebp
		neg	eax
		sub	edx, ebp
		mov	[esp+128h+var_10C], eax
		mov	[esp+128h+var_118], edx
		nop

loc_1000F980:				; CODE XREF: sub_1000F8F0+E2j
		test	ebx, ebx
		jz	short loc_1000F9A8
		mov	eax, ebp
		sub	esi, ebp
		mov	edx, ebx
		lea	ebx, [ebx+0]

loc_1000F990:				; CODE XREF: sub_1000F8F0+AEj
		mov	cl, [esi+eax]
		lea	eax, [eax+1]
		xor	cl, [eax-1]
		mov	[edi+eax-1], cl
		dec	edx
		jnz	short loc_1000F990
		mov	ecx, [esp+128h+var_114]
		mov	edx, [esp+128h+var_118]

loc_1000F9A8:				; CODE XREF: sub_1000F8F0+92j
		lea	eax, [esp+128h+var_104]
		push	eax
		lea	esi, [edx+ebp]
		push	esi
		push	ecx
		call	[esp+134h+var_110]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F9E5
		add	edi, [esp+128h+var_10C]
		add	ebp, ebx
		sub	[esp+128h+arg_14], ebx
		mov	ecx, [esp+128h+var_114]
		mov	edx, [esp+128h+var_118]
		jnz	short loc_1000F980
		mov	ebp, [esp+128h+var_108]

loc_1000F9D8:				; CODE XREF: sub_1000F8F0+72j
		push	ebx		; size_t
		push	esi		; void *
		push	ebp		; void *
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_1000F9E5:				; CODE XREF: sub_1000F8F0+CBj
		mov	ecx, [esp+128h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 118h
		retn
sub_1000F8F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FA00	proc near		; DATA XREF: sub_1000EE40:loc_1000F0F1o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_18]
		mov	ecx, offset sub_1000F610
		cmp	edi, 10h
		jz	short loc_1000FA17
		mov	ecx, offset loc_1000F1D0

loc_1000FA17:				; CODE XREF: sub_1000FA00+10j
		mov	ebx, [esp+10h+arg_14]
		mov	[esp+10h+arg_18], ecx
		test	ebx, ebx
		jz	short loc_1000FA4C
		mov	ebp, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_10]
		sub	ebp, esi
		lea	ecx, [ecx+0]

loc_1000FA30:				; CODE XREF: sub_1000FA00+4Aj
		push	esi
		lea	eax, [esi+ebp]
		push	eax
		push	[esp+18h+arg_0]
		call	ecx
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000FA4E
		mov	ecx, [esp+10h+arg_18]
		add	esi, edi
		sub	ebx, edi
		jnz	short loc_1000FA30

loc_1000FA4C:				; CODE XREF: sub_1000FA00+21j
		xor	eax, eax

loc_1000FA4E:				; CODE XREF: sub_1000FA00+40j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000FA00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000FA60(int,	void *,	int)
sub_1000FA60	proc near		; CODE XREF: sub_1000EE40:loc_1000F1ABp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	[esp+8+arg_8]	; int
		push	[esp+0Ch+arg_4]	; void *
		mov	ebp, [ebx]
		push	ebx		; int
		call	sub_1000FC60
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000FA83
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000FA83:				; CODE XREF: sub_1000FA60+1Bj
		mov	eax, [ebx]
		add	eax, 0Bh
		push	edi
		mov	edi, 1
		lea	eax, [ebx+eax*4]
		cmp	[ebx+4], edi
		jbe	loc_1000FC44
		push	esi
		jmp	short loc_1000FAA0
; ---------------------------------------------------------------------------
		align 10h

loc_1000FAA0:				; CODE XREF: sub_1000FA60+3Bj
					; sub_1000FA60+1DDj
		movzx	ecx, byte ptr [eax+3]
		movzx	edx, byte ptr [eax+2]
		mov	esi, ds:dword_10042F00[ecx*4]
		xor	esi, ds:dword_10042B00[edx*4]
		movzx	ecx, byte ptr [eax+1]
		xor	esi, ds:dword_10042700[ecx*4]
		movzx	ecx, byte ptr [eax]
		xor	esi, ds:dword_10042300[ecx*4]
		mov	[eax], esi
		movzx	ecx, byte ptr [eax+7]
		movzx	edx, byte ptr [eax+6]
		mov	esi, ds:dword_10042F00[ecx*4]
		xor	esi, ds:dword_10042B00[edx*4]
		movzx	ecx, byte ptr [eax+5]
		xor	esi, ds:dword_10042700[ecx*4]
		movzx	ecx, byte ptr [eax+4]
		xor	esi, ds:dword_10042300[ecx*4]
		mov	[eax+4], esi
		movzx	ecx, byte ptr [eax+0Bh]
		movzx	edx, byte ptr [eax+0Ah]
		mov	esi, ds:dword_10042F00[ecx*4]
		xor	esi, ds:dword_10042B00[edx*4]
		movzx	ecx, byte ptr [eax+9]
		xor	esi, ds:dword_10042700[ecx*4]
		movzx	ecx, byte ptr [eax+8]
		xor	esi, ds:dword_10042300[ecx*4]
		mov	[eax+8], esi
		movzx	ecx, byte ptr [eax+0Fh]
		movzx	edx, byte ptr [eax+0Eh]
		mov	esi, ds:dword_10042F00[ecx*4]
		movzx	ecx, byte ptr [eax+0Dh]
		xor	esi, ds:dword_10042B00[edx*4]
		xor	esi, ds:dword_10042700[ecx*4]
		movzx	ecx, byte ptr [eax+0Ch]
		xor	esi, ds:dword_10042300[ecx*4]
		mov	[eax+0Ch], esi
		add	eax, 10h
		cmp	ebp, 4
		jle	loc_1000FC39	; jumptable 1000FB72 default case
		lea	ecx, [ebp-5]	; switch 4 cases
		cmp	ecx, 3
		ja	loc_1000FC39	; jumptable 1000FB72 default case
		jmp	ds:off_1000FC4C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000FB79:				; CODE XREF: sub_1000FA60+112j
					; DATA XREF: .text:off_1000FC4Co
		movzx	ecx, byte ptr [eax+3] ;	jumptable 1000FB72 case	8
		movzx	edx, byte ptr [eax+2]
		mov	esi, ds:dword_10042F00[ecx*4]
		movzx	ecx, byte ptr [eax+1]
		xor	esi, ds:dword_10042B00[edx*4]
		xor	esi, ds:dword_10042700[ecx*4]
		movzx	ecx, byte ptr [eax]
		xor	esi, ds:dword_10042300[ecx*4]
		mov	[eax], esi
		add	eax, 4

loc_1000FBA9:				; CODE XREF: sub_1000FA60+112j
					; DATA XREF: .text:off_1000FC4Co
		movzx	ecx, byte ptr [eax+3] ;	jumptable 1000FB72 case	7
		movzx	edx, byte ptr [eax+2]
		mov	esi, ds:dword_10042F00[ecx*4]
		movzx	ecx, byte ptr [eax+1]
		xor	esi, ds:dword_10042B00[edx*4]
		xor	esi, ds:dword_10042700[ecx*4]
		movzx	ecx, byte ptr [eax]
		xor	esi, ds:dword_10042300[ecx*4]
		mov	[eax], esi
		add	eax, 4

loc_1000FBD9:				; CODE XREF: sub_1000FA60+112j
					; DATA XREF: .text:off_1000FC4Co
		movzx	ecx, byte ptr [eax+3] ;	jumptable 1000FB72 case	6
		movzx	edx, byte ptr [eax+2]
		mov	esi, ds:dword_10042F00[ecx*4]
		movzx	ecx, byte ptr [eax+1]
		xor	esi, ds:dword_10042B00[edx*4]
		xor	esi, ds:dword_10042700[ecx*4]
		movzx	ecx, byte ptr [eax]
		xor	esi, ds:dword_10042300[ecx*4]
		mov	[eax], esi
		add	eax, 4

loc_1000FC09:				; CODE XREF: sub_1000FA60+112j
					; DATA XREF: .text:off_1000FC4Co
		movzx	ecx, byte ptr [eax+3] ;	jumptable 1000FB72 case	5
		movzx	edx, byte ptr [eax+2]
		mov	esi, ds:dword_10042F00[ecx*4]
		movzx	ecx, byte ptr [eax+1]
		xor	esi, ds:dword_10042B00[edx*4]
		xor	esi, ds:dword_10042700[ecx*4]
		movzx	ecx, byte ptr [eax]
		xor	esi, ds:dword_10042300[ecx*4]
		mov	[eax], esi
		add	eax, 4

loc_1000FC39:				; CODE XREF: sub_1000FA60+100j
					; sub_1000FA60+10Cj
		inc	edi		; jumptable 1000FB72 default case
		cmp	edi, [ebx+4]
		jb	loc_1000FAA0
		pop	esi

loc_1000FC44:				; CODE XREF: sub_1000FA60+34j
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000FA60	endp

; ---------------------------------------------------------------------------
		align 4
off_1000FC4C	dd offset loc_1000FC09	; DATA XREF: sub_1000FA60+112r
		dd offset loc_1000FBD9	; jump table for switch	statement
		dd offset loc_1000FBA9
		dd offset loc_1000FB79
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000FC60(int,	void *,	int)
sub_1000FC60	proc near		; CODE XREF: sub_1000EE40+35Dp
					; sub_1000FA60+11p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		push	ebp
		mov	ebp, [eax+4]
		inc	ebp
		imul	ebp, [eax]
		mov	[esp+14h+var_4], ebp
		cmp	ebx, 7
		jnz	short loc_1000FC93
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		mov	[esp+arg_8], 7
		mov	[esp+arg_0], eax
		jmp	loc_1000FF80
; ---------------------------------------------------------------------------

loc_1000FC93:				; CODE XREF: sub_1000FC60+1Bj
		push	esi
		push	edi
		lea	esi, ds:0[ebx*4]
		add	eax, 2Ch
		push	esi		; size_t
		push	[esp+20h+arg_4]	; void *
		mov	[esp+24h+arg_0], eax
		push	eax		; void *
		call	memcpy
		mov	edx, [esp+28h+arg_0]
		mov	eax, ebp
		sub	eax, ebx
		add	esp, 0Ch
		mov	edi, ebx
		mov	[esp+1Ch+var_8], eax
		lea	ecx, [edx-4]
		add	ecx, esi
		cmp	ebx, eax
		jnb	loc_1000FE13
		mov	ebx, edx
		mov	ebp, edi

loc_1000FCD0:				; CODE XREF: sub_1000FC60+1A5j
		mov	edx, [ecx]
		ror	edx, 8
		mov	eax, edx
		shr	eax, 10h
		and	eax, 0FFh
		movzx	esi, byte ptr ds:dword_10040F00[eax*4]
		mov	eax, edx
		shr	eax, 18h
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		shl	eax, 8
		or	esi, eax
		mov	eax, edx
		shr	eax, 8
		and	eax, 0FFh
		shl	esi, 8
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	esi, eax
		movzx	eax, dl
		shl	esi, 8
		xor	edx, edx
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	esi, eax
		mov	eax, edi
		div	ebp
		add	edi, 4
		xor	esi, ds:dword_100432FC[eax*4]
		xor	esi, [ebx]
		mov	[ecx+4], esi
		mov	edx, esi
		mov	eax, [ebx+4]
		xor	eax, edx
		mov	[ecx+8], eax
		mov	edx, eax
		mov	eax, [ebx+8]
		xor	eax, edx
		mov	[ecx+0Ch], eax
		mov	edx, eax
		mov	eax, [ebx+0Ch]
		add	ecx, 10h
		xor	eax, edx
		add	ebx, 10h
		mov	[esp+1Ch+var_C], ebx
		mov	[ecx], eax
		cmp	ebp, 4
		jz	loc_1000FE01	; jumptable 1000FD71 default case
		lea	eax, [ebp-5]	; switch 4 cases
		cmp	eax, 3
		ja	loc_1000FE01	; jumptable 1000FD71 default case
		jmp	ds:off_1000FF4C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000FD78:				; CODE XREF: sub_1000FC60+111j
					; DATA XREF: sub_1000FC60:off_1000FF4Co
		mov	ebx, [ecx]	; jumptable 1000FD71 case 8
		inc	edi
		mov	eax, ebx
		add	ecx, 4
		shr	eax, 10h
		and	eax, 0FFh
		movzx	edx, byte ptr ds:dword_10040F00[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		shl	eax, 8
		or	edx, eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shl	edx, 8
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	edx, eax
		movzx	eax, bl
		mov	ebx, [esp+1Ch+var_C]
		shl	edx, 8
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	edx, eax
		xor	edx, [ebx]
		add	ebx, 4
		mov	[ecx], edx

loc_1000FDD4:				; CODE XREF: sub_1000FC60+111j
					; DATA XREF: sub_1000FC60:off_1000FF4Co
		mov	edx, [ecx]	; jumptable 1000FD71 case 7
		inc	edi
		mov	eax, [ebx]
		add	ecx, 4
		xor	eax, edx
		add	ebx, 4
		mov	[ecx], eax

loc_1000FDE3:				; CODE XREF: sub_1000FC60+111j
					; DATA XREF: sub_1000FC60:off_1000FF4Co
		mov	edx, [ecx]	; jumptable 1000FD71 case 6
		inc	edi
		mov	eax, [ebx]
		add	ecx, 4
		xor	eax, edx
		add	ebx, 4
		mov	[ecx], eax

loc_1000FDF2:				; CODE XREF: sub_1000FC60+111j
					; DATA XREF: sub_1000FC60:off_1000FF4Co
		mov	edx, [ecx]	; jumptable 1000FD71 case 5
		inc	edi
		mov	eax, [ebx]
		add	ecx, 4
		xor	eax, edx
		add	ebx, 4
		mov	[ecx], eax

loc_1000FE01:				; CODE XREF: sub_1000FC60+FFj
					; sub_1000FC60+10Bj
		cmp	edi, [esp+1Ch+var_8] ; jumptable 1000FD71 default case
		jb	loc_1000FCD0
		mov	ebp, [esp+1Ch+var_4]
		mov	ebx, [esp+1Ch+arg_8]

loc_1000FE13:				; CODE XREF: sub_1000FC60+66j
		mov	edx, [ecx]
		add	ecx, 4
		ror	edx, 8
		mov	eax, edx
		shr	eax, 10h
		and	eax, 0FFh
		movzx	esi, byte ptr ds:dword_10040F00[eax*4]
		mov	eax, edx
		shr	eax, 18h
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		shl	eax, 8
		or	esi, eax
		mov	eax, edx
		shr	eax, 8
		and	eax, 0FFh
		shl	esi, 8
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	esi, eax
		movzx	eax, dl
		shl	esi, 8
		xor	edx, edx
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	esi, eax
		mov	eax, edi
		div	ebx
		mov	edx, [esp+1Ch+arg_0]
		xor	esi, ds:dword_100432FC[eax*4]
		mov	eax, edi
		sub	eax, ebx
		inc	edi
		xor	esi, [edx+eax*4]
		mov	[ecx], esi
		cmp	ebx, 8
		jnb	short loc_1000FEB3
		cmp	edi, ebp
		jnb	loc_1000FF41
		mov	eax, edi
		sub	eax, ebx
		sub	ebp, edi
		lea	esi, [edx+eax*4]

loc_1000FE97:				; CODE XREF: sub_1000FC60+247j
		mov	eax, [esi]
		lea	ecx, [ecx+4]
		mov	edx, [ecx-4]
		lea	esi, [esi+4]
		xor	eax, edx
		mov	[ecx], eax
		dec	ebp
		jnz	short loc_1000FE97
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000FEB3:				; CODE XREF: sub_1000FC60+224j
		cmp	edi, ebp
		jnb	loc_1000FF41
		mov	esi, [esp+1Ch+arg_8]
		mov	eax, edi
		sub	eax, ebx
		lea	eax, [edx+eax*4]
		mov	[esp+1Ch+arg_0], eax
		lea	ebx, [ebx+0]

loc_1000FED0:				; CODE XREF: sub_1000FC60+2DFj
		xor	edx, edx
		mov	ebx, [ecx]
		mov	eax, edi
		lea	ecx, [ecx+4]
		div	esi
		cmp	edx, 4
		jnz	short loc_1000FF2B
		mov	eax, ebx
		shr	eax, 10h
		and	eax, 0FFh
		movzx	edx, byte ptr ds:dword_10040F00[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		shl	eax, 8
		or	edx, eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shl	edx, 8
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	edx, eax
		movzx	eax, bl
		shl	edx, 8
		movzx	ebx, byte ptr ds:dword_10040F00[eax*4]
		or	ebx, edx

loc_1000FF2B:				; CODE XREF: sub_1000FC60+27Ej
		mov	edx, [esp+1Ch+arg_0]
		inc	edi
		mov	eax, [edx]
		add	edx, 4
		xor	eax, ebx
		mov	[esp+1Ch+arg_0], edx
		mov	[ecx], eax
		cmp	edi, ebp
		jb	short loc_1000FED0

loc_1000FF41:				; CODE XREF: sub_1000FC60+228j
					; sub_1000FC60+255j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 4
off_1000FF4C	dd offset loc_1000FDF2	; DATA XREF: sub_1000FC60+111r
		dd offset loc_1000FDE3	; jump table for switch	statement
		dd offset loc_1000FDD4
		dd offset loc_1000FD78
		align 40h

loc_1000FF80:				; CODE XREF: sub_1000FC60+2Ej
		mov	eax, [esp+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		lea	esi, ds:0[eax*4]
		push	esi		; size_t
		push	[esp+14h+arg_4]	; void *
		lea	ebx, [ebp+2Ch]
		push	ebx		; void *
		call	memcpy
		mov	eax, [ebp+4]
		add	esi, 0FFFFFFFCh
		mov	edi, [esp+1Ch+arg_8]
		inc	eax
		imul	eax, [ebp+0]
		add	esp, 0Ch
		add	esi, ebx
		cmp	edi, eax
		jnb	loc_1001009B
		lea	ecx, [ecx+0]

loc_1000FFC0:				; CODE XREF: sub_1000FC60+435j
		xor	edx, edx
		mov	ecx, [esi]
		mov	eax, edi
		lea	esi, [esi+4]
		div	[esp+10h+arg_8]
		mov	[esp+10h+arg_0], eax
		test	edx, edx
		jnz	short loc_10010031
		ror	ecx, 8
		mov	edx, ecx
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	eax, edx
		shr	eax, 18h
		movzx	ecx, byte ptr ds:dword_10040F00[ecx*4]
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		shl	eax, 8
		or	ecx, eax
		mov	eax, edx
		shr	eax, 8
		and	eax, 0FFh
		shl	ecx, 8
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	ecx, eax
		movzx	eax, dl
		shl	ecx, 8
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	ecx, eax
		mov	eax, [esp+10h+arg_0]
		xor	ecx, ds:dword_100432FC[eax*4]
		jmp	short loc_10010081
; ---------------------------------------------------------------------------

loc_10010031:				; CODE XREF: sub_1000FC60+373j
		cmp	edx, 4
		jnz	short loc_10010081
		mov	eax, ecx
		shr	eax, 10h
		and	eax, 0FFh
		movzx	edx, byte ptr ds:dword_10040F00[eax*4]
		mov	eax, ecx
		shr	eax, 18h
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		shl	eax, 8
		or	edx, eax
		mov	eax, ecx
		shr	eax, 8
		and	eax, 0FFh
		shl	edx, 8
		movzx	eax, byte ptr ds:dword_10040F00[eax*4]
		or	edx, eax
		movzx	eax, cl
		shl	edx, 8
		movzx	ecx, byte ptr ds:dword_10040F00[eax*4]
		or	ecx, edx

loc_10010081:				; CODE XREF: sub_1000FC60+3CFj
					; sub_1000FC60+3D4j
		mov	eax, [ebx]
		inc	edi
		xor	eax, ecx
		add	ebx, 4
		mov	[esi], eax
		mov	eax, [ebp+4]
		inc	eax
		imul	eax, [ebp+0]
		cmp	edi, eax
		jb	loc_1000FFC0

loc_1001009B:				; CODE XREF: sub_1000FC60+357j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000FC60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100100B0	proc near		; DATA XREF: .rdata:1003E424o
		push	220h
		call	PORT_Alloc_Util
		add	esp, 4
		retn
sub_100100B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100100C0(void	*, int,	int, int)
sub_100100C0	proc near		; DATA XREF: .rdata:1003E3D8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	220h
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_100100D6
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100100D6:				; CODE XREF: sub_100100C0+12j
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jz	short loc_100100EA
		mov	eax, [ecx]
		mov	[esi], eax
		mov	eax, [ecx+4]
		mov	[esi+4], eax
		jmp	short loc_100100F7
; ---------------------------------------------------------------------------

loc_100100EA:				; CODE XREF: sub_100100C0+1Cj
		mov	dword ptr [esi], 0A6A6A6A6h
		mov	dword ptr [esi+4], 0A6A6A6A6h

loc_100100F7:				; CODE XREF: sub_100100C0+28j
		push	10h		; size_t
		push	[esp+8+arg_8]	; int
		lea	eax, [esi+8]
		push	0		; int
		push	0		; void *
		push	[esp+14h+arg_C]	; int
		push	[esp+18h+arg_0]	; void *
		push	eax		; int
		call	sub_1000EC70
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_10010124
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		xor	esi, esi

loc_10010124:				; CODE XREF: sub_100100C0+57j
		mov	eax, esi
		pop	esi
		retn
sub_100100C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10010130(int,	void *,	int, int, void *, size_t)
sub_10010130	proc near		; DATA XREF: .rdata:1003E3E4o

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_17		= byte ptr -17h
var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 34h
		mov	eax, [ebp+arg_14]
		push	ebx
		push	esi
		or	ebx, 0FFFFFFFFh
		mov	[esp+3Ch+var_20], 10h
		push	edi
		cmp	eax, 18h
		jb	loc_10010371
		test	al, 7
		jnz	loc_10010371
		lea	ecx, [eax-8]
		mov	[esp+40h+var_1C], ecx
		cmp	[ebp+arg_C], ecx
		jnb	short loc_1001017D
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001017D:				; CODE XREF: sub_10010130+35j
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jz	loc_1001035A
		cmp	[ebp+arg_4], 0
		jz	loc_1001035A
		cmp	[ebp+arg_10], 0
		jz	loc_1001035A
		mov	esi, eax
		shr	esi, 3
		lea	eax, ds:0[esi*8]
		push	eax
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esp+40h+var_30], eax
		test	eax, eax
		jz	loc_1001037E
		push	[ebp+arg_14]	; size_t
		dec	esi
		push	[ebp+arg_10]	; void *
		mov	[esp+48h+var_28], esi
		push	eax		; void *
		call	memcpy
		mov	ecx, [esp+4Ch+var_30]
		add	esp, 0Ch
		mov	eax, [ecx]
		mov	[esp+40h+var_10], eax
		mov	eax, [ecx+4]
		mov	[esp+40h+var_C], eax
		lea	eax, [esi+esi*2]
		add	eax, eax
		mov	[esp+40h+var_11], al
		shr	eax, 8
		mov	[esp+40h+var_12], al
		shr	eax, 8
		mov	[esp+40h+var_13], al
		shr	eax, 8
		mov	[esp+40h+var_14], al
		shr	eax, 8
		mov	[esp+40h+var_15], al
		shr	eax, 8
		mov	[esp+40h+var_16], al
		shr	eax, 8
		mov	[esp+40h+var_17], al
		shr	eax, 8
		mov	[esp+40h+var_18], al
		mov	eax, 6
		mov	[esp+40h+var_2C], eax

loc_10010225:				; CODE XREF: sub_10010130+16Fj
		cmp	[esp+40h+var_28], 0
		jz	short loc_10010296
		lea	eax, [edi+8]
		mov	[esp+40h+var_24], eax
		mov	edi, eax

loc_10010235:				; CODE XREF: sub_10010130+15Dj
		lea	eax, [esp+40h+var_18]
		push	eax
		lea	eax, [esp+44h+var_10]
		push	eax
		call	sub_10010670
		mov	ecx, [esp+48h+var_30]
		push	10h
		mov	eax, [ecx+esi*8]
		mov	[esp+4Ch+var_8], eax
		mov	eax, [ecx+esi*8+4]
		mov	[esp+4Ch+var_4], eax
		lea	eax, [esp+4Ch+var_10]
		push	eax
		push	10h
		lea	eax, [esp+54h+var_20]
		push	eax
		lea	eax, [esp+58h+var_10]
		push	eax
		push	edi
		call	sub_1000EBD0
		mov	ebx, eax
		add	esp, 20h
		test	ebx, ebx
		jnz	short loc_1001028F
		mov	edx, [esp+40h+var_30]
		mov	ecx, [esp+40h+var_8]
		mov	[edx+esi*8], ecx
		mov	ecx, [esp+40h+var_4]
		mov	[edx+esi*8+4], ecx
		dec	esi
		jnz	short loc_10010235

loc_1001028F:				; CODE XREF: sub_10010130+147j
		mov	edi, [ebp+arg_0]
		mov	eax, [esp+40h+var_2C]

loc_10010296:				; CODE XREF: sub_10010130+FAj
		mov	esi, [esp+40h+var_28]
		dec	eax
		mov	[esp+40h+var_2C], eax
		jnz	short loc_10010225
		test	ebx, ebx
		jnz	loc_10010334
		lea	ecx, [esp+40h+var_10]
		lea	edx, [ebx+4]

loc_100102B0:				; CODE XREF: sub_10010130+18Fj
		mov	eax, [ecx]
		cmp	eax, [edi]
		jnz	short loc_100102C5
		add	ecx, 4
		add	edi, 4
		sub	edx, 4
		jnb	short loc_100102B0
		xor	eax, eax
		jmp	short loc_100102EA
; ---------------------------------------------------------------------------

loc_100102C5:				; CODE XREF: sub_10010130+184j
		cmp	al, [edi]
		jnz	short loc_100102E5
		mov	al, [ecx+1]
		cmp	al, [edi+1]
		jnz	short loc_100102E5
		mov	al, [ecx+2]
		cmp	al, [edi+2]
		jnz	short loc_100102E5
		mov	al, [ecx+3]
		cmp	al, [edi+3]
		jnz	short loc_100102E5
		xor	eax, eax
		jmp	short loc_100102EA
; ---------------------------------------------------------------------------

loc_100102E5:				; CODE XREF: sub_10010130+197j
					; sub_10010130+19Fj ...
		sbb	eax, eax
		or	eax, 1

loc_100102EA:				; CODE XREF: sub_10010130+193j
					; sub_10010130+1B3j
		test	eax, eax
		jnz	short loc_10010324
		mov	esi, [esp+40h+var_30]
		mov	edi, [esp+40h+var_1C]
		push	edi		; size_t
		lea	eax, [esi+8]
		push	eax		; void *
		push	[ebp+arg_4]	; void *
		call	memcpy
		mov	eax, [ebp+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10010345
		push	[ebp+arg_14]
		mov	[eax], edi
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10010324:				; CODE XREF: sub_10010130+1BCj
		push	0FFFFE002h
		or	ebx, 0FFFFFFFFh
		call	PORT_SetError_Util
		add	esp, 4

loc_10010334:				; CODE XREF: sub_10010130+173j
		mov	eax, [ebp+arg_8]
		mov	esi, [esp+40h+var_30]
		test	eax, eax
		jz	short loc_10010345
		mov	dword ptr [eax], 0

loc_10010345:				; CODE XREF: sub_10010130+1DBj
					; sub_10010130+20Dj
		push	[ebp+arg_14]
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001035A:				; CODE XREF: sub_10010130+52j
					; sub_10010130+5Cj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10010371:				; CODE XREF: sub_10010130+1Dj
					; sub_10010130+25j
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4

loc_1001037E:				; CODE XREF: sub_10010130+87j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10010130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010390	proc near		; DATA XREF: .rdata:1003E3DCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_100103B7
		lea	eax, [esi+8]
		push	0
		push	eax
		call	sub_1000EB80
		add	esp, 8
		cmp	[esp+4+arg_4], 0
		jz	short loc_100103B7
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_100103B7:				; CODE XREF: sub_10010390+7j
					; sub_10010390+1Cj
		pop	esi
		retn
sub_10010390	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100103C0(int,	void *,	int, int, void *, size_t)
sub_100103C0	proc near		; DATA XREF: .rdata:1003E3E0o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 2Ch
		mov	eax, [ebp+arg_14]
		push	ebx
		push	esi
		or	ebx, 0FFFFFFFFh
		mov	[esp+34h+var_20], 10h
		lea	ecx, [eax+8]
		mov	[esp+34h+var_28], ecx
		push	edi
		test	eax, eax
		jz	loc_10010580
		test	al, 7
		jnz	loc_10010580
		cmp	[ebp+arg_C], ecx
		jnb	short loc_1001040C
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001040C:				; CODE XREF: sub_100103C0+34j
		cmp	[ebp+arg_0], 0
		jz	loc_10010569
		cmp	[ebp+arg_4], 0
		jz	loc_10010569
		cmp	[ebp+arg_10], 0
		jz	loc_10010569
		mov	edi, eax
		shr	edi, 3
		lea	eax, ds:8[edi*8]
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		mov	[esp+38h+var_2C], esi
		test	esi, esi
		jz	loc_1001058D
		mov	ecx, [ebp+arg_0]
		push	[ebp+arg_14]	; size_t
		push	[ebp+arg_10]	; void *
		mov	eax, [ecx]
		mov	[esp+40h+var_10], eax
		mov	eax, [ecx+4]
		mov	[esp+40h+var_C], eax
		lea	eax, [esi+8]
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax
		mov	[esp+38h+var_18], eax
		mov	[esp+38h+var_14], eax
		mov	eax, 6
		mov	[esp+38h+var_24], eax

loc_10010482:				; CODE XREF: sub_100103C0+141j
		mov	esi, 1
		cmp	edi, esi
		jb	short loc_100104FC
		mov	edx, [ebp+arg_0]
		add	edx, 8
		mov	[esp+38h+var_1C], edx

loc_10010495:				; CODE XREF: sub_100103C0+136j
		mov	ecx, [esp+38h+var_2C]
		push	10h
		mov	eax, [ecx+esi*8]
		mov	[esp+3Ch+var_8], eax
		mov	eax, [ecx+esi*8+4]
		mov	[esp+3Ch+var_4], eax
		lea	eax, [esp+3Ch+var_10]
		push	eax
		push	10h
		lea	eax, [esp+44h+var_20]
		push	eax
		lea	eax, [esp+48h+var_10]
		push	eax
		push	edx
		call	sub_1000EBD0
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		jnz	short loc_100104F8
		mov	eax, [esp+38h+var_2C]
		mov	ecx, [esp+38h+var_8]
		mov	[eax+esi*8], ecx
		mov	ecx, [esp+38h+var_4]
		mov	[eax+esi*8+4], ecx
		lea	eax, [esp+38h+var_18]
		push	eax
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_10010600
		mov	edx, [esp+40h+var_1C]
		inc	esi
		add	esp, 8
		cmp	esi, edi
		jbe	short loc_10010495

loc_100104F8:				; CODE XREF: sub_100103C0+108j
		mov	eax, [esp+38h+var_24]

loc_100104FC:				; CODE XREF: sub_100103C0+C9j
		dec	eax
		mov	[esp+38h+var_24], eax
		jnz	loc_10010482
		mov	esi, [esp+38h+var_2C]
		mov	edi, [esp+38h+var_28]
		test	ebx, ebx
		jnz	short loc_10010549
		mov	eax, [esp+38h+var_10]
		push	edi		; size_t
		push	esi		; void *
		push	[ebp+arg_4]	; void *
		mov	[esi], eax
		mov	eax, [esp+44h+var_C]
		mov	[esi+4], eax
		call	memcpy
		mov	eax, [ebp+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10010556
		push	edi
		push	esi
		mov	[eax], edi
		call	PORT_ZFree_Util
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10010549:				; CODE XREF: sub_100103C0+151j
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_10010556
		mov	dword ptr [eax], 0

loc_10010556:				; CODE XREF: sub_100103C0+172j
					; sub_100103C0+18Ej
		push	edi
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10010569:				; CODE XREF: sub_100103C0+50j
					; sub_100103C0+5Aj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10010580:				; CODE XREF: sub_100103C0+23j
					; sub_100103C0+2Bj
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4

loc_1001058D:				; CODE XREF: sub_100103C0+87j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_100103C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100105A0	proc near		; DATA XREF: .rdata:1003E410o

arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_18		= dword	ptr  1Ch

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_100105B9
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100105B9:				; CODE XREF: sub_100105A0+6j
		mov	edx, [esp+arg_C]
		test	edx, edx
		jz	short loc_100105CD
		mov	eax, [edx]
		mov	[ecx], eax
		mov	eax, [edx+4]
		mov	[ecx+4], eax
		jmp	short loc_100105DA
; ---------------------------------------------------------------------------

loc_100105CD:				; CODE XREF: sub_100105A0+1Fj
		mov	dword ptr [ecx], 0A6A6A6A6h
		mov	dword ptr [ecx+4], 0A6A6A6A6h

loc_100105DA:				; CODE XREF: sub_100105A0+2Bj
		lea	eax, [ecx+8]
		mov	[esp+arg_18], 10h ; size_t
		mov	[esp+arg_10], 0	; int
		mov	[esp+arg_C], 0	; void *
		mov	[esp+arg_0], eax ; int
		jmp	sub_1000EC70
sub_100105A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010600	proc near		; CODE XREF: sub_100103C0+127p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		inc	byte ptr [edx+7]
		jnz	short loc_10010629
		inc	byte ptr [edx+6]
		jnz	short loc_10010629
		inc	byte ptr [edx+5]
		jnz	short loc_10010629
		inc	byte ptr [edx+4]
		jnz	short loc_10010629
		inc	byte ptr [edx+3]
		jnz	short loc_10010629
		inc	byte ptr [edx+2]
		jnz	short loc_10010629
		inc	byte ptr [edx+1]
		jnz	short loc_10010629
		inc	byte ptr [edx]

loc_10010629:				; CODE XREF: sub_10010600+7j
					; sub_10010600+Cj ...
		mov	ecx, [esp+arg_0]
		movzx	eax, byte ptr [edx]
		xor	[ecx], al
		movzx	eax, byte ptr [edx+1]
		xor	[ecx+1], al
		movzx	eax, byte ptr [edx+2]
		xor	[ecx+2], al
		movzx	eax, byte ptr [edx+3]
		xor	[ecx+3], al
		movzx	eax, byte ptr [edx+4]
		xor	[ecx+4], al
		movzx	eax, byte ptr [edx+5]
		xor	[ecx+5], al
		movzx	eax, byte ptr [edx+6]
		xor	[ecx+6], al
		movzx	eax, byte ptr [edx+7]
		xor	[ecx+7], al
		retn
sub_10010600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010670	proc near		; CODE XREF: sub_10010130+10Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		movzx	eax, byte ptr [edx]
		xor	[ecx], al
		movzx	eax, byte ptr [edx+1]
		xor	[ecx+1], al
		movzx	eax, byte ptr [edx+2]
		xor	[ecx+2], al
		movzx	eax, byte ptr [edx+3]
		xor	[ecx+3], al
		movzx	eax, byte ptr [edx+4]
		xor	[ecx+4], al
		movzx	eax, byte ptr [edx+5]
		xor	[ecx+5], al
		movzx	eax, byte ptr [edx+6]
		xor	[ecx+6], al
		movzx	eax, byte ptr [edx+7]
		xor	[ecx+7], al
		mov	cl, [edx+7]
		lea	eax, [ecx-1]
		mov	[edx+7], al
		test	cl, cl
		jnz	short locret_1001070B
		mov	cl, [edx+6]
		lea	eax, [ecx-1]
		mov	[edx+6], al
		test	cl, cl
		jnz	short locret_1001070B
		mov	cl, [edx+5]
		lea	eax, [ecx-1]
		mov	[edx+5], al
		test	cl, cl
		jnz	short locret_1001070B
		mov	cl, [edx+4]
		lea	eax, [ecx-1]
		mov	[edx+4], al
		test	cl, cl
		jnz	short locret_1001070B
		mov	cl, [edx+3]
		lea	eax, [ecx-1]
		mov	[edx+3], al
		test	cl, cl
		jnz	short locret_1001070B
		mov	cl, [edx+2]
		lea	eax, [ecx-1]
		mov	[edx+2], al
		test	cl, cl
		jnz	short locret_1001070B
		mov	cl, [edx+1]
		lea	eax, [ecx-1]
		mov	[edx+1], al
		test	cl, cl
		jnz	short locret_1001070B
		dec	byte ptr [edx]

locret_1001070B:			; CODE XREF: sub_10010670+49j
					; sub_10010670+56j ...
		retn
sub_10010670	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010710	proc near		; DATA XREF: .rdata:1003E480o
		push	128h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_10010710	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010720	proc near		; DATA XREF: .rdata:1003E484o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		cmp	[esp+arg_0], 0
		push	edi
		jz	loc_10010815
		mov	edi, [esp+4+arg_10]
		cmp	edi, 10h
		jz	short loc_10010743
		cmp	edi, 18h
		jz	short loc_10010743
		cmp	edi, 20h
		jnz	loc_10010815

loc_10010743:				; CODE XREF: sub_10010720+13j
					; sub_10010720+18j
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	short loc_1001076D
		cmp	ebx, 1
		jnz	short loc_1001075A
		test	ebp, ebp
		jnz	short loc_1001076D

loc_1001075A:				; CODE XREF: sub_10010720+34j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1001076D:				; CODE XREF: sub_10010720+2Fj
					; sub_10010720+38j
		push	esi
		push	128h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10010795
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10010795:				; CODE XREF: sub_10010720+5Fj
		cmp	ebx, 1
		jnz	short loc_100107D1
		cmp	[esp+10h+arg_C], 0
		mov	eax, [ebp+0]
		mov	[esi+118h], eax
		mov	eax, [ebp+4]
		mov	[esi+11Ch], eax
		mov	eax, [ebp+8]
		mov	[esi+120h], eax
		mov	eax, [ebp+0Ch]
		mov	[esi+124h], eax
		mov	eax, offset sub_10014000
		jnz	short loc_100107E2
		mov	eax, offset sub_10012410
		jmp	short loc_100107E2
; ---------------------------------------------------------------------------

loc_100107D1:				; CODE XREF: sub_10010720+78j
		cmp	[esp+10h+arg_C], 0
		mov	eax, offset sub_10014110
		jnz	short loc_100107E2
		mov	eax, offset sub_10012550

loc_100107E2:				; CODE XREF: sub_10010720+A8j
					; sub_10010720+AFj ...
		push	edi
		push	[esp+14h+arg_0]
		mov	[esi+4], eax
		push	esi
		mov	[esi], edi
		call	sub_10014170
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1001080E
		push	128h
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1001080E:				; CODE XREF: sub_10010720+D7j
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10010815:				; CODE XREF: sub_10010720+6j
					; sub_10010720+1Dj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		retn
sub_10010720	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010830	proc near		; DATA XREF: .rdata:1003E48Co
					; .rdata:1003E490o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_10010891
		cmp	[esp+arg_4], 0
		jz	short loc_10010891
		cmp	[esp+arg_10], 0
		jz	short loc_10010891
		mov	edx, [esp+arg_8]
		test	edx, edx
		jz	short loc_10010891
		mov	eax, [esp+arg_14]
		test	al, 0Fh
		jz	short loc_10010867
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10010867:				; CODE XREF: sub_10010830+24j
		cmp	[esp+arg_C], eax
		jnb	short loc_1001087E
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1001087E:				; CODE XREF: sub_10010830+3Bj
		mov	[edx], eax
		mov	[esp+arg_14], eax
		mov	[esp+arg_8], edx
		mov	[esp+arg_0], ecx
		mov	eax, [ecx+4]
		jmp	eax
; ---------------------------------------------------------------------------

loc_10010891:				; CODE XREF: sub_10010830+6j
					; sub_10010830+Dj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_10010830	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100108B0(void	*, int)
sub_100108B0	proc near		; DATA XREF: .rdata:1003E488o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_100108C9
		push	128h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		add	esp, 0Ch

loc_100108C9:				; CODE XREF: sub_100108B0+7j
		cmp	[esp+4+arg_4], 0
		jz	short loc_100108D9
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_100108D9:				; CODE XREF: sub_100108B0+1Ej
		pop	esi
		retn
sub_100108B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100108E0	proc near		; DATA XREF: .rdata:1003E47Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		cmp	[esp+arg_4], 0
		jz	loc_10010995
		mov	edx, [esp+arg_8]
		cmp	edx, 10h
		jz	short loc_10010902
		cmp	edx, 18h
		jz	short loc_10010902
		cmp	edx, 20h
		jnz	loc_10010995

loc_10010902:				; CODE XREF: sub_100108E0+12j
					; sub_100108E0+17j
		mov	eax, [esp+arg_10]
		push	esi
		mov	esi, [esp+4+arg_C]
		test	eax, eax
		jz	short loc_10010918
		cmp	eax, 1
		jnz	short loc_10010920
		test	esi, esi
		jz	short loc_10010920

loc_10010918:				; CODE XREF: sub_100108E0+2Dj
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jnz	short loc_10010932

loc_10010920:				; CODE XREF: sub_100108E0+32j
					; sub_100108E0+36j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010932:				; CODE XREF: sub_100108E0+3Ej
		cmp	eax, 1
		jnz	short loc_1001096D
		cmp	[esp+4+arg_14],	0
		mov	eax, [esi]
		mov	[ecx+118h], eax
		mov	eax, [esi+4]
		mov	[ecx+11Ch], eax
		mov	eax, [esi+8]
		mov	[ecx+120h], eax
		mov	eax, [esi+0Ch]
		mov	[ecx+124h], eax
		mov	eax, offset sub_10014000
		jnz	short loc_1001097E
		mov	eax, offset sub_10012410
		jmp	short loc_1001097E
; ---------------------------------------------------------------------------

loc_1001096D:				; CODE XREF: sub_100108E0+55j
		cmp	[esp+4+arg_14],	0
		mov	eax, offset sub_10014110
		jnz	short loc_1001097E
		mov	eax, offset sub_10012550

loc_1001097E:				; CODE XREF: sub_100108E0+84j
					; sub_100108E0+8Bj ...
		push	edx
		push	[esp+8+arg_4]
		mov	[ecx+4], eax
		push	ecx
		call	sub_10014170
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010995:				; CODE XREF: sub_100108E0+5j
					; sub_100108E0+1Cj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_100108E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100109B0	proc near		; CODE XREF: sub_10012410+6Bp
					; sub_10012550+3Bp
					; DATA XREF: ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		mov	eax, [esp+8+arg_8]
		push	ebx
		push	esi
		push	edi
		mov	edx, [eax]
		mov	ecx, [eax+8]
		mov	ebx, [eax+4]
		mov	esi, [eax+0Ch]
		mov	edi, [esp+14h+arg_0]
		bswap	ecx
		mov	[esp+14h+var_8], ecx
		bswap	edx
		xor	edx, [edi+0C0h]
		mov	ecx, edx
		mov	[esp+14h+arg_8], edx
		shr	ecx, 18h
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		bswap	ebx
		mov	edx, ds:dword_10043390[ecx*4]
		mov	ecx, [esp+14h+arg_8]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ecx
		xor	ebx, [edi+0C4h]
		shr	eax, 8
		movzx	eax, al
		mov	[esp+14h+arg_0], ebx
		bswap	esi
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		xor	edx, [edi+0B8h]
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0BCh]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, esi
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edx, [edi+0B0h]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0B4h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+0A8h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0ACh]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+0A0h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0A4h]
		mov	eax, edx
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		xor	edx, [edi+98h]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+9Ch]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+90h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+94h]
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		mov	eax, edx
		shr	edx, 8
		shl	eax, 18h
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+88h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		shr	eax, 1Fh
		mov	edx, [esp+14h+arg_0]
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+80h]
		xor	edx, eax
		mov	eax, [edi+8Ch]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+84h]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+78h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+7Ch]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+70h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+74h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+68h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+6Ch]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		xor	edx, ds:dword_10043F90[eax*4]
		xor	edx, [edi+60h]
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+64h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+58h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+5Ch]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+50h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+54h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+48h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		mov	edx, [esp+14h+arg_0]
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+40h]
		xor	edx, eax
		mov	eax, [edi+4Ch]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+44h]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+38h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+3Ch]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		mov	[esp+14h+var_8], eax
		add	ebx, edx
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+30h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+34h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		xor	edx, [edi+28h]
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+2Ch]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ds:dword_10043790[ecx*4]
		movzx	eax, al
		xor	edx, [edi+20h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+24h]
		mov	eax, [esp+14h+arg_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+arg_8], eax
		xor	ebx, [esp+14h+arg_0]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	[esp+14h+arg_0], ebx
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edx, [edi+18h]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+1Ch]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		shr	edx, 8
		xor	eax, ecx
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, [edi+10h]
		shr	eax, 10h
		mov	edx, esi
		movzx	eax, al
		shl	edx, 18h
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ebx, [edi+4]
		bswap	ebx
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+14h]
		mov	eax, [esp+14h+arg_4]
		xor	ecx, esi
		xor	[esp+14h+arg_8], ecx
		shr	esi, 8
		add	edx, esi
		xor	edx, [esp+14h+arg_0]
		xor	edx, ecx
		mov	ecx, [esp+14h+var_8]
		xor	ecx, [edi]
		bswap	ecx
		mov	[eax], ecx
		mov	ecx, [esp+14h+arg_8]
		pop	edi
		bswap	ecx
		bswap	edx
		mov	[eax+4], ebx
		pop	esi
		mov	[eax+8], ecx
		mov	[eax+0Ch], edx
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_100109B0	endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================


sub_10011500	proc near		; DATA XREF: sub_10012410+4Co
					; sub_10012550+10o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		mov	eax, [esp+8+arg_8]
		push	ebx
		push	esi
		push	edi
		mov	edx, [eax]
		mov	ecx, [eax+8]
		mov	ebx, [eax+4]
		mov	esi, [eax+0Ch]
		mov	edi, [esp+14h+arg_0]
		bswap	ecx
		mov	[esp+14h+var_8], ecx
		bswap	edx
		xor	edx, [edi+100h]
		mov	ecx, edx
		mov	[esp+14h+arg_8], edx
		shr	ecx, 18h
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		bswap	ebx
		mov	edx, ds:dword_10043390[ecx*4]
		mov	ecx, [esp+14h+arg_8]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ecx
		xor	ebx, [edi+104h]
		shr	eax, 8
		movzx	eax, al
		mov	[esp+14h+arg_0], ebx
		bswap	esi
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		xor	edx, [edi+0F8h]
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0FCh]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, esi
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edx, [edi+0F0h]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0F4h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+0E8h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0ECh]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+0E0h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0E4h]
		mov	eax, edx
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		xor	edx, [edi+0D8h]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0DCh]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+0D0h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0D4h]
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		mov	eax, edx
		shr	edx, 8
		shl	eax, 18h
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+0C8h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		shr	eax, 1Fh
		mov	edx, [esp+14h+arg_0]
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+0C0h]
		xor	edx, eax
		mov	eax, [edi+0CCh]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+0C4h]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+0B8h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0BCh]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+0B0h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0B4h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+0A8h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0ACh]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		xor	edx, ds:dword_10043F90[eax*4]
		xor	edx, [edi+0A0h]
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0A4h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+98h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+9Ch]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+90h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+94h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+88h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		mov	edx, [esp+14h+arg_0]
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+80h]
		xor	edx, eax
		mov	eax, [edi+8Ch]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+84h]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+78h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+7Ch]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		mov	[esp+14h+var_8], eax
		add	ebx, edx
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+70h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+74h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		xor	edx, [edi+68h]
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+6Ch]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ds:dword_10043790[ecx*4]
		movzx	eax, al
		xor	edx, [edi+60h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+64h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+58h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+5Ch]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ds:dword_10043790[ecx*4]
		movzx	eax, al
		xor	edx, [edi+50h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+54h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+48h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		mov	edx, [esp+14h+arg_0]
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+40h]
		xor	edx, eax
		mov	eax, [edi+4Ch]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+44h]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+38h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+3Ch]
		xor	ecx, edx
		mov	eax, [esp+14h+var_8]
		xor	eax, ecx
		shr	edx, 8
		mov	[esp+14h+var_8], eax
		add	ebx, edx
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+30h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+34h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		xor	edx, [edi+28h]
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+2Ch]
		mov	eax, edx
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ds:dword_10043790[ecx*4]
		movzx	eax, al
		xor	edx, [edi+20h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+24h]
		mov	eax, [esp+14h+arg_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		mov	[esp+14h+arg_8], eax
		add	ebx, edx
		xor	ebx, [esp+14h+arg_0]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	[esp+14h+arg_0], ebx
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edx, [edi+18h]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+1Ch]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		mov	ebx, edx
		mov	[esp+14h+var_8], eax
		shr	edx, 8
		shl	ebx, 18h
		add	ebx, edx
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	esi, ds:dword_10043390[ecx*4]
		mov	ecx, [esp+14h+var_8]
		xor	esi, ds:dword_10043790[eax*4]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, [edi+10h]
		shr	eax, 10h
		mov	edx, esi
		movzx	eax, al
		shl	edx, 18h
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ebx, [edi+4]
		bswap	ebx
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+14h]
		mov	eax, [esp+14h+arg_4]
		xor	ecx, esi
		xor	[esp+14h+arg_8], ecx
		shr	esi, 8
		add	edx, esi
		xor	edx, [esp+14h+arg_0]
		xor	edx, ecx
		mov	ecx, [esp+14h+var_8]
		xor	ecx, [edi]
		bswap	ecx
		mov	[eax], ecx
		mov	ecx, [esp+14h+arg_8]
		pop	edi
		bswap	ecx
		bswap	edx
		mov	[eax+4], ebx
		pop	esi
		mov	[eax+8], ecx
		mov	[eax+0Ch], edx
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_10011500	endp


; =============== S U B	R O U T	I N E =======================================


sub_10012410	proc near		; DATA XREF: sub_10010720+AAo
					; sub_100108E0+86o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 14h
		push	ebp
		mov	ebp, [esp+18h+arg_14]
		test	ebp, ebp
		jz	loc_10012540
		push	ebx
		push	esi
		mov	esi, [esp+20h+arg_10]
		lea	ebx, [ebp-10h]
		add	ebx, [esp+20h+arg_4]
		add	esi, 0FFFFFFF0h
		add	esi, ebp
		push	edi
		mov	edi, [esp+24h+arg_0]
		mov	eax, [esi]
		mov	[esp+24h+var_10], eax
		cmp	dword ptr [edi], 10h
		mov	eax, [esi+4]
		mov	[esp+24h+var_C], eax
		mov	eax, [esi+8]
		mov	[esp+24h+var_8], eax
		mov	eax, [esi+0Ch]
		mov	[esp+24h+var_4], eax
		mov	eax, offset sub_100109B0
		jz	short loc_10012461
		mov	eax, offset sub_10011500

loc_10012461:				; CODE XREF: sub_10012410+4Aj
		mov	[esp+24h+arg_14], eax
		cmp	ebp, 10h
		jbe	short loc_100124CA
		add	ebp, 0FFFFFFEFh
		lea	ecx, [edi+8]
		shr	ebp, 4
		mov	[esp+24h+var_14], ecx
		inc	ebp

loc_10012478:				; CODE XREF: sub_10012410+B4j
		push	esi
		push	ebx
		push	ecx
		call	eax ; sub_100109B0
		add	esp, 0Ch
		lea	eax, [ebx+1]
		lea	edx, [esi-0Fh]
		mov	edi, 4
		jmp	short loc_10012490
; ---------------------------------------------------------------------------
		align 10h

loc_10012490:				; CODE XREF: sub_10012410+7Bj
					; sub_10012410+A3j
		movzx	ecx, byte ptr [edx-1]
		lea	edx, [edx+4]
		xor	[eax-1], cl
		lea	eax, [eax+4]
		movzx	ecx, byte ptr [edx-4]
		xor	[eax-4], cl
		movzx	ecx, byte ptr [edx-3]
		xor	[eax-3], cl
		movzx	ecx, byte ptr [edx-2]
		xor	[eax-2], cl
		dec	edi
		jnz	short loc_10012490
		mov	eax, [esp+24h+arg_14]
		sub	ebx, 10h
		mov	ecx, [esp+24h+var_14]
		sub	esi, 10h
		dec	ebp
		jnz	short loc_10012478
		mov	edi, [esp+24h+arg_0]

loc_100124CA:				; CODE XREF: sub_10012410+58j
		cmp	esi, [esp+24h+arg_10]
		jnz	short loc_10012515
		push	esi
		lea	eax, [edi+8]
		push	ebx
		push	eax
		call	[esp+30h+arg_14]
		add	esp, 0Ch
		lea	ecx, [ebx+1]
		lea	edx, [edi+119h]
		mov	esi, 4
		jmp	short loc_100124F0
; ---------------------------------------------------------------------------
		align 10h

loc_100124F0:				; CODE XREF: sub_10012410+DBj
					; sub_10012410+103j
		movzx	eax, byte ptr [edx-1]
		lea	edx, [edx+4]
		xor	[ecx-1], al
		lea	ecx, [ecx+4]
		movzx	eax, byte ptr [edx-4]
		xor	[ecx-4], al
		movzx	eax, byte ptr [edx-3]
		xor	[ecx-3], al
		movzx	eax, byte ptr [edx-2]
		xor	[ecx-2], al
		dec	esi
		jnz	short loc_100124F0

loc_10012515:				; CODE XREF: sub_10012410+BEj
		mov	eax, [esp+24h+var_10]
		mov	[edi+118h], eax
		mov	eax, [esp+24h+var_C]
		mov	[edi+11Ch], eax
		mov	eax, [esp+24h+var_8]
		mov	[edi+120h], eax
		mov	eax, [esp+24h+var_4]
		mov	[edi+124h], eax
		pop	edi
		pop	esi
		pop	ebx

loc_10012540:				; CODE XREF: sub_10012410+Aj
		xor	eax, eax
		pop	ebp
		add	esp, 14h
		retn
sub_10012410	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10012550	proc near		; DATA XREF: sub_10010720+BDo
					; sub_100108E0+99o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	ecx, [esp+arg_0]
		push	ebx
		push	edi
		mov	ebx, offset sub_100109B0
		cmp	dword ptr [ecx], 10h
		jz	short loc_10012565
		mov	ebx, offset sub_10011500

loc_10012565:				; CODE XREF: sub_10012550+Ej
		mov	edi, [esp+8+arg_14]
		test	edi, edi
		jz	short loc_1001259C
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		dec	edi
		push	esi
		mov	esi, [esp+10h+arg_10]
		add	ecx, 8
		shr	edi, 4
		sub	ebp, esi
		mov	[esp+10h+arg_0], ecx
		inc	edi

loc_10012585:				; CODE XREF: sub_10012550+48j
		push	esi
		lea	eax, [esi+ebp]
		push	eax
		push	ecx
		call	ebx ; sub_100109B0
		mov	ecx, [esp+1Ch+arg_0]
		add	esp, 0Ch
		add	esi, 10h
		dec	edi
		jnz	short loc_10012585
		pop	esi
		pop	ebp

loc_1001259C:				; CODE XREF: sub_10012550+1Bj
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
sub_10012550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100125B0	proc near		; CODE XREF: sub_10014110+3Bp
					; DATA XREF: sub_10014000+33o ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		mov	eax, [esp+8+arg_8]
		push	ebx
		push	esi
		push	edi
		mov	edx, [eax]
		mov	ecx, [eax+8]
		mov	ebx, [eax+4]
		mov	esi, [eax+0Ch]
		mov	edi, [esp+14h+arg_0]
		bswap	ecx
		mov	[esp+14h+var_8], ecx
		bswap	edx
		xor	edx, [edi]
		mov	ecx, edx
		mov	[esp+14h+arg_8], edx
		shr	ecx, 18h
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		bswap	ebx
		mov	edx, ds:dword_10043390[ecx*4]
		mov	ecx, [esp+14h+arg_8]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ecx
		xor	ebx, [edi+4]
		shr	eax, 8
		movzx	eax, al
		mov	[esp+14h+arg_0], ebx
		bswap	esi
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		xor	edx, [edi+10h]
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+14h]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, esi
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edx, [edi+18h]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+1Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+20h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+24h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+28h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+2Ch]
		mov	eax, edx
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		xor	edx, [edi+30h]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+34h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+38h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+3Ch]
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		mov	eax, edx
		shr	edx, 8
		shl	eax, 18h
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+40h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		shr	eax, 1Fh
		mov	edx, [esp+14h+arg_0]
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+48h]
		xor	edx, eax
		mov	eax, [edi+44h]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+4Ch]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+50h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+54h]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+58h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+5Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+60h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+64h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		xor	edx, ds:dword_10043F90[eax*4]
		xor	edx, [edi+68h]
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+6Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+70h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+74h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+78h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+7Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+80h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		mov	edx, [esp+14h+arg_0]
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+88h]
		xor	edx, eax
		mov	eax, [edi+84h]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+8Ch]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+90h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+94h]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		mov	[esp+14h+var_8], eax
		add	ebx, edx
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+98h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+9Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		xor	edx, [edi+0A0h]
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0A4h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ds:dword_10043790[ecx*4]
		movzx	eax, al
		xor	edx, [edi+0A8h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0ACh]
		mov	eax, [esp+14h+arg_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+arg_8], eax
		xor	ebx, [esp+14h+arg_0]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	[esp+14h+arg_0], ebx
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edx, [edi+0B0h]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0B4h]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		shr	edx, 8
		xor	eax, ecx
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, [edi+0B8h]
		shr	eax, 10h
		mov	edx, esi
		movzx	eax, al
		shl	edx, 18h
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ebx, [edi+0C4h]
		bswap	ebx
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0BCh]
		mov	eax, [esp+14h+arg_4]
		xor	ecx, esi
		xor	[esp+14h+arg_8], ecx
		shr	esi, 8
		add	edx, esi
		xor	edx, [esp+14h+arg_0]
		xor	edx, ecx
		mov	ecx, [esp+14h+var_8]
		xor	ecx, [edi+0C0h]
		bswap	ecx
		mov	[eax], ecx
		mov	ecx, [esp+14h+arg_8]
		pop	edi
		bswap	ecx
		bswap	edx
		mov	[eax+4], ebx
		pop	esi
		mov	[eax+8], ecx
		mov	[eax+0Ch], edx
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_100125B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100130F0	proc near		; DATA XREF: sub_10014000+3Do
					; sub_10014110+10o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		mov	eax, [esp+8+arg_8]
		push	ebx
		push	esi
		push	edi
		mov	edx, [eax]
		mov	ecx, [eax+8]
		mov	ebx, [eax+4]
		mov	esi, [eax+0Ch]
		mov	edi, [esp+14h+arg_0]
		bswap	ecx
		mov	[esp+14h+var_8], ecx
		bswap	edx
		xor	edx, [edi]
		mov	ecx, edx
		mov	[esp+14h+arg_8], edx
		shr	ecx, 18h
		mov	eax, edx
		shr	eax, 10h
		movzx	eax, al
		bswap	ebx
		mov	edx, ds:dword_10043390[ecx*4]
		mov	ecx, [esp+14h+arg_8]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ecx
		xor	ebx, [edi+4]
		shr	eax, 8
		movzx	eax, al
		mov	[esp+14h+arg_0], ebx
		bswap	esi
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		xor	edx, [edi+10h]
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+14h]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, esi
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edx, [edi+18h]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+1Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+20h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+24h]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+28h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+2Ch]
		mov	eax, edx
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		xor	edx, [edi+30h]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+34h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+38h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+3Ch]
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		mov	eax, edx
		shr	edx, 8
		shl	eax, 18h
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+40h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		shr	eax, 1Fh
		mov	edx, [esp+14h+arg_0]
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+48h]
		xor	edx, eax
		mov	eax, [edi+44h]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+4Ch]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+50h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+54h]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		add	ebx, edx
		mov	[esp+14h+var_8], eax
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+58h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+5Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+60h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+64h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		xor	edx, ds:dword_10043F90[eax*4]
		xor	edx, [edi+68h]
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+6Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+70h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+74h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+78h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+7Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+80h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		mov	edx, [esp+14h+arg_0]
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+88h]
		xor	edx, eax
		mov	eax, [edi+84h]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+8Ch]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+90h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+94h]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		mov	[esp+14h+var_8], eax
		add	ebx, edx
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+98h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+9Ch]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		xor	edx, [edi+0A0h]
		movzx	eax, al
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0A4h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ds:dword_10043790[ecx*4]
		movzx	eax, al
		xor	edx, [edi+0A8h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0ACh]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+0B0h]
		shr	ecx, 18h
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0B4h]
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ds:dword_10043790[ecx*4]
		movzx	eax, al
		xor	edx, [edi+0B8h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0BCh]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	ecx, [edi+0C0h]
		and	ecx, [esp+14h+arg_8]
		mov	[esp+14h+arg_0], eax
		mov	eax, ecx
		mov	edx, [esp+14h+arg_0]
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [edi+0C8h]
		xor	edx, eax
		mov	eax, [edi+0C4h]
		or	eax, edx
		mov	[esp+14h+arg_0], edx
		xor	[esp+14h+arg_8], eax
		mov	eax, [edi+0CCh]
		mov	edx, [esp+14h+var_8]
		or	eax, ebx
		xor	edx, eax
		and	ecx, edx
		mov	[esp+14h+var_8], edx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	ebx, eax
		mov	[esp+14h+var_4], ebx
		mov	ebx, [esp+14h+arg_8]
		mov	ecx, ebx
		shr	ecx, 18h
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+arg_0]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		xor	edx, [edi+0D0h]
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0D4h]
		xor	ecx, edx
		mov	eax, [esp+14h+var_8]
		xor	eax, ecx
		shr	edx, 8
		mov	[esp+14h+var_8], eax
		add	ebx, edx
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+var_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		shr	eax, 10h
		movzx	eax, al
		xor	edx, [edi+0D8h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, edx
		xor	ecx, [edi+0DCh]
		shl	eax, 18h
		xor	ecx, edx
		xor	[esp+14h+arg_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, [esp+14h+arg_0]
		xor	eax, ecx
		mov	[esp+14h+arg_0], eax
		mov	eax, [esp+14h+arg_8]
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		mov	ecx, eax
		xor	edx, [edi+0E0h]
		shr	eax, 10h
		shr	ecx, 18h
		movzx	eax, al
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, [esp+14h+arg_0]
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		mov	eax, [esp+14h+arg_0]
		movzx	eax, al
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0E4h]
		mov	eax, edx
		xor	ecx, edx
		shl	eax, 18h
		xor	[esp+14h+var_8], ecx
		shr	edx, 8
		add	eax, edx
		xor	eax, ebx
		mov	ebx, [esp+14h+var_8]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[esp+14h+var_4], eax
		mov	eax, ebx
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+14h+var_4]
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 10h
		mov	ecx, ds:dword_10043790[ecx*4]
		movzx	eax, al
		xor	edx, [edi+0E8h]
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		mov	ebx, edx
		shl	ebx, 18h
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0ECh]
		mov	eax, [esp+14h+arg_8]
		xor	ecx, edx
		xor	eax, ecx
		shr	edx, 8
		mov	[esp+14h+arg_8], eax
		add	ebx, edx
		xor	ebx, [esp+14h+arg_0]
		xor	ebx, ecx
		mov	ecx, eax
		shr	eax, 10h
		movzx	eax, al
		shr	ecx, 18h
		mov	[esp+14h+arg_0], ebx
		mov	edx, ds:dword_10043390[ecx*4]
		xor	edx, ds:dword_10043790[eax*4]
		mov	ecx, [esp+14h+arg_8]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	edx, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	edx, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edx, [edi+0F0h]
		shr	eax, 10h
		movzx	eax, al
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0F4h]
		mov	eax, [esp+14h+var_8]
		xor	ecx, edx
		xor	eax, ecx
		mov	ebx, edx
		mov	[esp+14h+var_8], eax
		shr	edx, 8
		shl	ebx, 18h
		add	ebx, edx
		xor	ebx, [esp+14h+var_4]
		xor	ebx, ecx
		mov	ecx, eax
		shr	ecx, 18h
		shr	eax, 10h
		movzx	eax, al
		mov	esi, ds:dword_10043390[ecx*4]
		mov	ecx, [esp+14h+var_8]
		xor	esi, ds:dword_10043790[eax*4]
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, cl
		mov	ecx, ebx
		shr	ecx, 18h
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, [edi+0F8h]
		shr	eax, 10h
		mov	edx, esi
		movzx	eax, al
		shl	edx, 18h
		xor	ecx, ds:dword_10043B90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		movzx	eax, al
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ebx, [edi+104h]
		bswap	ebx
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, [edi+0FCh]
		mov	eax, [esp+14h+arg_4]
		xor	ecx, esi
		xor	[esp+14h+arg_8], ecx
		shr	esi, 8
		add	edx, esi
		xor	edx, [esp+14h+arg_0]
		xor	edx, ecx
		mov	ecx, [esp+14h+var_8]
		xor	ecx, [edi+100h]
		bswap	ecx
		mov	[eax], ecx
		mov	ecx, [esp+14h+arg_8]
		pop	edi
		bswap	ecx
		bswap	edx
		mov	[eax+4], ebx
		pop	esi
		mov	[eax+8], ecx
		mov	[eax+0Ch], edx
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_100130F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10014000	proc near		; DATA XREF: sub_10010720+A3o
					; sub_100108E0+7Fo

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		mov	eax, [esp+24h+arg_14]
		mov	ecx, [esp+24h+arg_0]
		push	ebx
		mov	ebx, [esp+28h+arg_4]
		test	eax, eax
		jz	loc_100140FC
		cmp	dword ptr [ecx], 10h
		lea	edx, [ecx+118h]
		push	edi
		mov	[esp+2Ch+var_18], edx
		mov	edi, edx
		mov	[esp+2Ch+var_24], offset sub_100125B0
		jz	short loc_10014045
		mov	[esp+2Ch+var_24], offset sub_100130F0

loc_10014045:				; CODE XREF: sub_10014000+3Bj
		test	eax, eax
		jz	loc_100140E5
		add	ecx, 8
		dec	eax
		push	ebp
		push	esi
		mov	[esp+34h+var_1C], ecx
		lea	esi, [esp+34h+var_13]
		mov	ecx, [esp+34h+arg_10]
		sub	esi, ecx
		shr	eax, 4
		inc	eax
		mov	[esp+34h+var_20], eax
		lea	esp, [esp+0]

loc_10014070:				; CODE XREF: sub_10014000+DDj
		lea	edx, [edi+2]
		mov	eax, ecx
		sub	edi, ecx
		mov	ebp, 4
		lea	esp, [esp+0]

loc_10014080:				; CODE XREF: sub_10014000+B3j
		movzx	ecx, byte ptr [edi+eax]
		lea	eax, [eax+4]
		xor	cl, [eax-4]
		lea	edx, [edx+4]
		mov	[esi+eax-5], cl
		movzx	ecx, byte ptr [eax-3]
		xor	cl, [edx-5]
		mov	[esi+eax-4], cl
		movzx	ecx, byte ptr [eax-2]
		xor	cl, [edx-4]
		mov	[esi+eax-3], cl
		movzx	ecx, byte ptr [eax-1]
		xor	cl, [edx-3]
		mov	[esi+eax-2], cl
		dec	ebp
		jnz	short loc_10014080
		lea	eax, [esp+34h+var_14]
		push	eax
		push	ebx
		push	[esp+3Ch+var_1C]
		call	[esp+40h+var_24]
		mov	ecx, [esp+40h+arg_10]
		mov	edi, ebx
		add	ecx, 10h
		add	esp, 0Ch
		sub	esi, 10h
		mov	[esp+34h+arg_10], ecx
		add	ebx, 10h
		dec	[esp+34h+var_20]
		jnz	short loc_10014070
		mov	edx, [esp+34h+var_18]
		pop	esi
		pop	ebp

loc_100140E5:				; CODE XREF: sub_10014000+47j
		mov	eax, [edi]
		mov	[edx], eax
		mov	eax, [edi+4]
		mov	[edx+4], eax
		mov	eax, [edi+8]
		mov	[edx+8], eax
		mov	eax, [edi+0Ch]
		mov	[edx+0Ch], eax
		pop	edi

loc_100140FC:				; CODE XREF: sub_10014000+1Dj
		mov	ecx, [esp+28h+var_4]
		xor	eax, eax
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
sub_10014000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10014110	proc near		; DATA XREF: sub_10010720+B6o
					; sub_100108E0+92o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	ecx, [esp+arg_0]
		push	ebx
		push	edi
		mov	ebx, offset sub_100125B0
		cmp	dword ptr [ecx], 10h
		jz	short loc_10014125
		mov	ebx, offset sub_100130F0

loc_10014125:				; CODE XREF: sub_10014110+Ej
		mov	edi, [esp+8+arg_14]
		test	edi, edi
		jz	short loc_1001415C
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		dec	edi
		push	esi
		mov	esi, [esp+10h+arg_10]
		add	ecx, 8
		shr	edi, 4
		sub	ebp, esi
		mov	[esp+10h+arg_0], ecx
		inc	edi

loc_10014145:				; CODE XREF: sub_10014110+48j
		push	esi
		lea	eax, [esi+ebp]
		push	eax
		push	ecx
		call	ebx ; sub_100125B0
		mov	ecx, [esp+1Ch+arg_0]
		add	esp, 0Ch
		add	esi, 10h
		dec	edi
		jnz	short loc_10014145
		pop	esi
		pop	ebp

loc_1001415C:				; CODE XREF: sub_10014110+1Bj
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
sub_10014110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10014170	proc near		; CODE XREF: sub_10010720+CDp
					; sub_100108E0+A7p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_8]
		mov	[ecx], eax
		cmp	eax, 10h
		jz	short loc_100141AF
		cmp	eax, 18h
		jz	short loc_1001419C
		cmp	eax, 20h
		jnz	short loc_100141BF
		lea	eax, [ecx+8]
		push	eax
		push	[esp+4+arg_4]
		call	sub_10014E90
		add	esp, 8
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1001419C:				; CODE XREF: sub_10014170+12j
		lea	eax, [ecx+8]
		push	eax
		push	[esp+4+arg_4]
		call	sub_10014E30
		add	esp, 8
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100141AF:				; CODE XREF: sub_10014170+Dj
		lea	eax, [ecx+8]
		push	eax
		push	[esp+4+arg_4]
		call	sub_100141D0
		add	esp, 8

loc_100141BF:				; CODE XREF: sub_10014170+17j
		xor	eax, eax
		retn
sub_10014170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100141D0	proc near		; CODE XREF: sub_10014170+47p

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0CCh
		mov	eax, [esp+0CCh+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [eax]
		mov	ebx, [eax+8]
		mov	ebp, [eax+0Ch]
		bswap	ebx
		push	edi
		mov	edi, [eax+4]
		mov	ecx, ebx
		bswap	esi
		bswap	edi
		shr	ecx, 11h
		mov	edx, edi
		shr	edx, 11h
		mov	eax, esi
		shl	eax, 0Fh
		add	edx, eax
		mov	[esp+0DCh+var_C4], ebx
		bswap	ebp
		mov	eax, edi
		mov	[esp+0DCh+var_CC], ebp
		shl	eax, 0Fh
		add	ecx, eax
		mov	[esp+0DCh+var_34], edx
		mov	[esp+0DCh+var_84], ecx
		mov	eax, ebx
		shl	eax, 0Fh
		mov	ecx, ebp
		shr	ecx, 11h
		mov	ebx, esi
		add	ecx, eax
		shr	ebx, 11h
		mov	eax, ebp
		mov	[esp+0DCh+var_30], ecx
		mov	ebp, [esp+0DCh+var_84]
		shl	eax, 0Fh
		add	ebx, eax
		mov	[esp+0DCh+var_1C], esi
		mov	[esp+0DCh+var_7C], ebx
		mov	eax, ebp
		shr	eax, 2
		mov	ebx, edx
		shl	ebx, 1Eh
		add	ebx, eax
		shl	ebp, 1Eh
		mov	eax, ecx
		mov	[esp+0DCh+var_80], ebx
		shr	eax, 2
		add	ebp, eax
		mov	[esp+0DCh+var_14], edi
		mov	[esp+0DCh+var_B4], ebp
		mov	ebp, ecx
		mov	ecx, [esp+0DCh+var_7C]
		mov	eax, ecx
		shr	eax, 2
		shl	ebp, 1Eh
		add	ebp, eax
		shl	ecx, 1Eh
		mov	eax, edx
		mov	[esp+0DCh+var_40], ebp
		mov	edx, [esp+0DCh+var_B4]
		shr	eax, 2
		add	ecx, eax
		shr	edx, 11h
		mov	eax, ebx
		mov	[esp+0DCh+var_A4], ecx
		mov	ebx, [esp+0DCh+var_A4]
		mov	ecx, ebp
		shl	eax, 0Fh
		add	edx, eax
		shr	ecx, 11h
		mov	eax, [esp+0DCh+var_B4]
		shl	eax, 0Fh
		add	ecx, eax
		shr	ebx, 11h
		mov	eax, ebp
		mov	[esp+0DCh+var_A0], edx
		shl	eax, 0Fh
		add	ebx, eax
		mov	ebp, [esp+0DCh+var_80]
		mov	eax, [esp+0DCh+var_A4]
		shl	eax, 0Fh
		shr	ebp, 11h
		add	ebp, eax
		mov	[esp+0DCh+var_38], ebx
		mov	[esp+0DCh+var_98], ebp
		mov	eax, edx
		shl	eax, 11h
		mov	ebp, ecx
		mov	edx, ebx
		shl	ecx, 11h
		shr	edx, 0Fh
		add	edx, ecx
		shr	ebp, 0Fh
		mov	ecx, [esp+0DCh+var_98]
		add	ebp, eax
		mov	eax, ebx
		shr	ecx, 0Fh
		mov	ebx, [esp+0DCh+var_A0]
		shl	eax, 11h
		add	ecx, eax
		shr	ebx, 0Fh
		mov	eax, [esp+0DCh+var_98]
		shl	eax, 11h
		add	ebx, eax
		mov	[esp+0DCh+var_6C], edx
		mov	[esp+0DCh+var_A0], ebx
		mov	eax, ebp
		shl	eax, 11h
		mov	ebx, edx
		shr	ebx, 0Fh
		add	ebx, eax
		mov	[esp+0DCh+var_28], ebp
		mov	eax, ecx
		shr	ebp, 0Fh
		shr	eax, 0Fh
		mov	[esp+0DCh+var_B8], eax
		mov	eax, edx
		mov	edx, [esp+0DCh+var_A0]
		shl	eax, 11h
		add	[esp+0DCh+var_B8], eax
		mov	eax, ecx
		shl	eax, 11h
		shr	edx, 0Fh
		add	edx, eax
		mov	[esp+0DCh+var_74], ecx
		mov	eax, [esp+0DCh+var_A0]
		shl	eax, 11h
		add	ebp, eax
		mov	[esp+0DCh+var_4C], ebx
		mov	eax, [esp+0DCh+var_B8]
		mov	ecx, ebp
		shr	eax, 0Fh
		mov	[esp+0DCh+var_AC], eax
		mov	eax, ebx
		shl	eax, 11h
		add	[esp+0DCh+var_AC], eax
		mov	eax, edx
		shr	eax, 0Fh
		mov	[esp+0DCh+var_88], eax
		mov	eax, [esp+0DCh+var_B8]
		shl	eax, 11h
		add	[esp+0DCh+var_88], eax
		mov	eax, edx
		shr	ecx, 0Fh
		shl	eax, 11h
		add	ecx, eax
		mov	[esp+0DCh+var_5C], edx
		mov	[esp+0DCh+var_20], ecx
		mov	eax, ebp
		mov	ecx, ebx
		shl	eax, 11h
		shr	ecx, 0Fh
		mov	ebx, esi
		add	ecx, eax
		mov	[esp+0DCh+var_60], ebp
		mov	eax, edi
		mov	[esp+0DCh+var_58], ecx
		xor	ebx, 0A09E667Fh
		xor	eax, 3BCC908Bh
		mov	[esp+0DCh+var_C0], eax
		mov	edx, ebx
		shr	eax, 10h
		mov	[esp+0DCh+var_C8], eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	edx, 10h
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+0DCh+var_C8]
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+0DCh+var_C0]
		mov	ebp, ds:dword_10043790[ecx*4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		mov	edi, esi
		and	eax, 0FFh
		shl	edi, 18h
		xor	ebp, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		xor	ebp, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+0DCh+var_C4]
		xor	ebp, ds:dword_10043390[eax*4]
		mov	eax, [esp+0DCh+var_CC]
		xor	ebp, esi
		shr	esi, 8
		xor	ebx, ebp
		add	edi, esi
		xor	ebx, 0B67AE858h
		xor	edi, ebp
		mov	edx, ebx
		xor	eax, edi
		shr	edx, 10h
		xor	eax, 4CAA73B2h
		mov	ecx, edx
		mov	[esp+0DCh+var_C0], eax
		shr	eax, 10h
		mov	[esp+0DCh+var_C8], eax
		mov	eax, ebx
		shr	ecx, 8
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+0DCh+var_C8]
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+0DCh+var_C0]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, esi
		xor	ecx, esi
		shl	eax, 18h
		shr	esi, 8
		add	eax, esi
		mov	[esp+0DCh+var_B0], ecx
		xor	eax, ecx
		mov	[esp+0DCh+var_78], eax
		mov	ebx, ecx
		xor	eax, 0E94F82BEh
		xor	ebx, 0C6EF372Fh
		mov	[esp+0DCh+var_C0], eax
		mov	edx, ebx
		shr	eax, 10h
		mov	[esp+0DCh+var_C8], eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	edx, 10h
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+0DCh+var_C8]
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+0DCh+var_C0]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, esi
		xor	ecx, esi
		shl	eax, 18h
		shr	esi, 8
		add	eax, esi
		xor	eax, ecx
		xor	ecx, ebp
		xor	eax, edi
		mov	[esp+0DCh+var_BC], ecx
		mov	ebx, ecx
		mov	[esp+0DCh+var_94], eax
		xor	eax, 0F1D36F1Ch
		mov	edi, [esp+0DCh+var_B0]
		mov	[esp+0DCh+var_C0], eax
		xor	ebx, 54FF53A5h
		shr	eax, 10h
		mov	edx, ebx
		mov	[esp+0DCh+var_C8], eax
		mov	eax, ebx
		shr	edx, 10h
		shr	eax, 8
		mov	ecx, edx
		shr	ecx, 8
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+0DCh+var_C8]
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+0DCh+var_C0]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, esi
		mov	edx, [esp+0DCh+var_78]
		mov	eax, esi
		shl	eax, 18h
		xor	edi, ecx
		mov	ebp, [esp+0DCh+var_BC]
		shr	esi, 8
		add	eax, esi
		shr	ebp, 11h
		xor	eax, ecx
		mov	esi, [esp+0DCh+var_94]
		xor	edx, eax
		shr	esi, 11h
		mov	ebx, edx
		mov	[esp+0DCh+var_B0], edi
		mov	eax, edi
		shr	ebx, 11h
		shl	eax, 0Fh
		add	ebx, eax
		shr	edi, 11h
		mov	eax, edx
		mov	[esp+0DCh+var_78], edx
		shl	eax, 0Fh
		add	ebp, eax
		mov	[esp+0DCh+var_9C], ebx
		mov	eax, [esp+0DCh+var_BC]
		mov	edx, ebp
		shl	eax, 0Fh
		add	esi, eax
		shr	edx, 11h
		mov	eax, [esp+0DCh+var_94]
		mov	ecx, esi
		shl	eax, 0Fh
		add	edi, eax
		shr	ecx, 11h
		mov	eax, ebx
		mov	[esp+0DCh+var_3C], ebp
		shl	eax, 0Fh
		add	edx, eax
		shr	ebx, 11h
		mov	eax, ebp
		mov	[esp+0DCh+var_64], esi
		shl	eax, 0Fh
		mov	ebp, edi
		add	ecx, eax
		shr	ebp, 11h
		mov	eax, esi
		mov	[esp+0DCh+var_8C], edi
		shl	eax, 0Fh
		mov	esi, ecx
		add	ebp, eax
		shr	esi, 11h
		mov	eax, edi
		mov	[esp+0DCh+var_8], ecx
		shl	eax, 0Fh
		mov	edi, ebp
		add	ebx, eax
		shr	edi, 11h
		mov	eax, edx
		mov	[esp+0DCh+var_2C], edx
		shl	eax, 0Fh
		add	esi, eax
		shr	edx, 11h
		mov	eax, ecx
		mov	[esp+0DCh+var_C0], ebp
		shl	eax, 0Fh
		mov	ecx, ebx
		add	edi, eax
		shr	ecx, 11h
		mov	eax, ebp
		mov	[esp+0DCh+var_C8], ebx
		shl	eax, 0Fh
		mov	ebp, edi
		add	ecx, eax
		shr	ebp, 11h
		mov	eax, ebx
		mov	[esp+0DCh+var_18], esi
		shl	eax, 0Fh
		add	edx, eax
		mov	[esp+0DCh+var_54], edi
		mov	eax, esi
		shl	eax, 0Fh
		add	ebp, eax
		mov	edi, ecx
		mov	eax, [esp+0DCh+var_54]
		mov	ebx, edx
		shl	eax, 0Fh
		shl	ecx, 0Fh
		shr	edi, 11h
		add	edi, eax
		shr	ebx, 11h
		add	ebx, ecx
		shl	edx, 0Fh
		mov	eax, ebx
		mov	[esp+0DCh+var_44], ebx
		shr	eax, 1Eh
		mov	ecx, esi
		shr	ecx, 11h
		add	ecx, edx
		mov	[esp+0DCh+var_70], edi
		mov	[esp+0DCh+var_90], ecx
		lea	eax, [eax+edi*4]
		mov	[esp+0DCh+var_48], ebp
		mov	[esp+0DCh+var_A8], eax
		mov	eax, ecx
		shr	eax, 1Eh
		lea	edx, [eax+ebx*4]
		mov	eax, ebp
		shr	eax, 1Eh
		mov	[esp+0DCh+var_68], edx
		lea	ebx, [eax+ecx*4]
		mov	ecx, [esp+0DCh+var_A8]
		mov	eax, edi
		mov	edi, edx
		shr	eax, 1Eh
		mov	edx, ebx
		shr	edi, 0Fh
		shr	edx, 0Fh
		lea	esi, [eax+ebp*4]
		mov	eax, ecx
		shl	eax, 11h
		mov	ebp, esi
		add	edi, eax
		shr	ecx, 0Fh
		mov	eax, [esp+0DCh+var_68]
		shl	eax, 11h
		add	edx, eax
		shr	ebp, 0Fh
		mov	eax, ebx
		shl	eax, 11h
		add	ebp, eax
		mov	eax, esi
		shl	eax, 11h
		add	ecx, eax
		mov	eax, [esp+0DCh+var_CC]
		xor	[esp+0DCh+var_94], eax
		xor	[esp+0DCh+var_7C], eax
		xor	[esp+0DCh+var_8C], eax
		mov	eax, [esp+0DCh+var_C8]
		not	eax
		mov	[esp+0DCh+var_24], ecx
		mov	ecx, [esp+0DCh+var_C4]
		xor	[esp+0DCh+var_BC], ecx
		xor	[esp+0DCh+var_30], ecx
		xor	[esp+0DCh+var_64], ecx
		mov	[esp+0DCh+var_C], eax
		and	eax, [esp+0DCh+var_CC]
		xor	ecx, eax
		mov	[esp+0DCh+var_C4], ecx
		mov	ecx, [esp+0DCh+var_C0]
		and	ecx, [esp+0DCh+var_C4]
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+0DCh+var_CC]
		xor	ecx, eax
		mov	eax, [esp+0DCh+var_C4]
		xor	[esp+0DCh+var_40], eax
		xor	[esp+0DCh+var_A4], ecx
		xor	[esp+0DCh+var_38], eax
		xor	[esp+0DCh+var_98], ecx
		xor	[esp+0DCh+var_44], eax
		mov	[esp+0DCh+var_CC], ecx
		xor	[esp+0DCh+var_90], ecx
		mov	ecx, [esp+0DCh+var_A0]
		mov	eax, [esp+0DCh+var_CC]
		not	ecx
		and	eax, ecx
		mov	[esp+0DCh+var_10], ecx
		xor	[esp+0DCh+var_C4], eax
		mov	ecx, [esp+0DCh+var_74]
		and	ecx, [esp+0DCh+var_C4]
		mov	eax, ecx
		xor	[esp+0DCh+var_AC], ebp
		shr	eax, 1Fh
		xor	[esp+0DCh+var_A8], ebp
		xor	[esp+0DCh+var_4C], ebp
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+0DCh+var_C4]
		xor	[esp+0DCh+var_CC], eax
		mov	eax, [esp+0DCh+var_60]
		xor	eax, [esp+0DCh+var_CC]
		xor	[esp+0DCh+var_5C], ecx
		xor	[esp+0DCh+var_20], ecx
		mov	[esp+0DCh+var_60], eax
		mov	eax, ecx
		xor	eax, ebx
		xor	ecx, edi
		mov	ebx, [esp+0DCh+var_CC]
		xor	[esp+0DCh+var_58], ebx
		mov	edi, [esp+0DCh+var_24]
		mov	[esp+0DCh+var_50], eax
		mov	eax, ebx
		xor	[esp+0DCh+var_88], edi
		xor	eax, esi
		xor	[esp+0DCh+var_68], edi
		xor	ebx, edx
		xor	[esp+0DCh+var_B8], edi
		mov	esi, edi
		mov	[esp+0DCh+var_CC], ebx
		mov	ebx, [esp+0DCh+var_6C]
		mov	[esp+0DCh+var_C4], ecx
		not	ebx
		mov	ecx, [esp+0DCh+var_28]
		and	esi, ebx
		xor	esi, ebp
		mov	[esp+0DCh+var_4], eax
		xor	[esp+0DCh+var_48], esi
		and	ecx, esi
		xor	[esp+0DCh+var_18], esi
		mov	eax, ecx
		xor	[esp+0DCh+var_80], esi
		shr	eax, 1Fh
		mov	ebp, [esp+0DCh+var_78]
		lea	edx, [eax+ecx*2]
		mov	ecx, [esp+0DCh+var_2C]
		xor	edx, edi
		mov	edi, [esp+0DCh+var_8]
		xor	[esp+0DCh+var_70], edx
		not	edi
		xor	[esp+0DCh+var_54], edx
		mov	eax, edi
		xor	[esp+0DCh+var_B4], edx
		and	eax, edx
		xor	esi, eax
		xor	[esp+0DCh+var_34], esi
		and	ecx, esi
		xor	[esp+0DCh+var_1C], esi
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+0DCh+var_9C]
		xor	edx, eax
		xor	ecx, esi
		mov	eax, [esp+0DCh+var_B0]
		xor	ebp, edx
		xor	[esp+0DCh+var_3C], edx
		xor	eax, esi
		mov	esi, [esp+0DCh+var_14]
		xor	[esp+0DCh+var_84], edx
		xor	esi, edx
		mov	[esp+0DCh+var_9C], ecx
		mov	[esp+0DCh+var_B0], eax
		mov	[esp+0DCh+var_78], ebp
		xor	eax, [esp+0DCh+var_1C]
		xor	ebp, esi
		mov	edx, [esp+0DCh+arg_4]
		mov	esi, ecx
		mov	ecx, [esp+0DCh+var_2C]
		mov	[edx], eax
		mov	eax, [esp+0DCh+var_B4]
		and	eax, edi
		mov	[edx+4], ebp
		xor	eax, [esp+0DCh+var_80]
		xor	[esp+0DCh+var_9C], eax
		and	ecx, eax
		mov	edi, [esp+0DCh+arg_4]
		mov	eax, [esp+0DCh+var_9C]
		mov	ebp, [esp+0DCh+var_34]
		xor	esi, ebp
		xor	[esp+0DCh+var_B0], ebp
		mov	[edi+38h], eax
		mov	eax, ecx
		shr	eax, 1Fh
		mov	edx, [esp+0DCh+var_BC]
		mov	ebp, [esp+0DCh+var_64]
		xor	edx, [esp+0DCh+var_30]
		lea	eax, [eax+ecx*2]
		xor	ebp, [esp+0DCh+var_30]
		xor	eax, [esp+0DCh+var_3C]
		mov	ecx, edi
		xor	eax, [esp+0DCh+var_B4]
		mov	edi, [esp+0DCh+var_2C]
		mov	[ecx+3Ch], eax
		mov	eax, [esp+0DCh+var_8]
		mov	[ecx+44h], eax
		mov	eax, [esp+0DCh+var_C8]
		mov	[ecx+4Ch], eax
		mov	eax, [esp+0DCh+var_40]
		mov	[ecx+40h], edi
		mov	edi, [esp+0DCh+var_C0]
		mov	[ecx+48h], edi
		mov	ecx, [esp+0DCh+var_C]
		and	ecx, [esp+0DCh+var_8C]
		xor	ecx, [esp+0DCh+var_64]
		xor	eax, ecx
		and	edi, ecx
		mov	ecx, [esp+0DCh+arg_4]
		mov	[ecx+50h], eax
		mov	eax, edi
		shr	eax, 1Fh
		lea	eax, [eax+edi*2]
		mov	edi, [esp+0DCh+var_18]
		xor	eax, [esp+0DCh+var_8C]
		xor	eax, [esp+0DCh+var_A4]
		mov	[ecx+54h], eax
		mov	eax, [esp+0DCh+var_38]
		xor	eax, [esp+0DCh+var_40]
		mov	ecx, [esp+0DCh+var_28]
		mov	[esp+0DCh+var_C], eax
		mov	eax, [esp+0DCh+var_48]
		xor	eax, [esp+0DCh+var_18]
		mov	[esp+0DCh+var_14], eax
		mov	eax, [esp+0DCh+var_44]
		xor	eax, [esp+0DCh+var_38]
		mov	[esp+0DCh+var_24], eax
		mov	eax, [esp+0DCh+var_B8]
		xor	edi, [esp+0DCh+var_80]
		and	eax, ebx
		xor	eax, [esp+0DCh+var_4C]
		mov	ebx, [esp+0DCh+var_48]
		and	ecx, eax
		xor	ebx, eax
		mov	eax, [esp+0DCh+arg_4]
		mov	[eax+78h], ebx
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+0DCh+arg_4]
		xor	eax, [esp+0DCh+var_70]
		xor	eax, [esp+0DCh+var_B8]
		mov	[ecx+7Ch], eax
		mov	eax, [esp+0DCh+var_28]
		mov	[ecx+80h], eax
		mov	eax, [esp+0DCh+var_6C]
		mov	[ecx+84h], eax
		mov	eax, [esp+0DCh+var_A0]
		mov	[ecx+8Ch], eax
		mov	eax, [esp+0DCh+var_90]
		and	eax, [esp+0DCh+var_10]
		xor	eax, [esp+0DCh+var_44]
		mov	ebx, [esp+0DCh+var_74]
		mov	[ecx+88h], ebx
		and	ebx, eax
		mov	[esp+0DCh+var_74], ebx
		mov	ebx, [esp+0DCh+var_5C]
		xor	ebx, eax
		mov	[esp+0DCh+var_10], ebx
		mov	ebx, [esp+0DCh+var_74]
		mov	eax, ebx
		shr	eax, 1Fh
		lea	eax, [eax+ebx*2]
		mov	ebx, [esp+0DCh+var_A8]
		xor	eax, [esp+0DCh+var_90]
		xor	eax, [esp+0DCh+var_60]
		mov	[ecx+94h], eax
		mov	eax, ebx
		xor	eax, [esp+0DCh+var_4C]
		xor	ebx, [esp+0DCh+var_AC]
		mov	[esp+0DCh+var_6C], eax
		mov	eax, [esp+0DCh+var_50]
		xor	eax, [esp+0DCh+var_5C]
		mov	[esp+0DCh+var_C8], eax
		mov	eax, [esp+0DCh+var_20]
		xor	[esp+0DCh+var_50], eax
		mov	[esp+0DCh+var_A8], ebx
		mov	ebx, [esp+0DCh+var_C4]
		xor	ebx, eax
		mov	eax, [esp+0DCh+var_CC]
		xor	eax, [esp+0DCh+var_58]
		mov	[ecx+0C4h], eax
		mov	eax, [esp+0DCh+var_94]
		xor	eax, [esp+0DCh+var_BC]
		mov	[ecx+0C0h], ebx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [esp+0DCh+arg_4]
		xor	[esp+0DCh+var_BC], ecx
		mov	ebx, [esp+0DCh+var_BC]
		mov	[eax+14h], ebx
		mov	ebx, [esp+0DCh+var_B0]
		mov	[eax+10h], ecx
		mov	ecx, [esp+0DCh+var_78]
		xor	ecx, ebx
		xor	ecx, [esp+0DCh+var_84]
		mov	eax, ecx
		shr	ecx, 18h
		shl	eax, 8
		add	eax, ecx
		mov	ecx, [esp+0DCh+arg_4]
		xor	ebx, eax
		mov	[ecx+1Ch], ebx
		mov	ebx, [esp+0DCh+var_94]
		xor	ebx, [esp+0DCh+var_7C]
		xor	ebx, edx
		mov	[ecx+18h], eax
		mov	eax, ebx
		shr	ebx, 18h
		shl	eax, 8
		add	eax, ebx
		xor	edx, eax
		mov	[ecx+20h], eax
		mov	[ecx+24h], edx
		mov	edx, [esp+0DCh+var_3C]
		xor	edx, esi
		xor	edx, [esp+0DCh+var_84]
		mov	eax, edx
		shr	edx, 18h
		shl	eax, 8
		add	eax, edx
		xor	esi, eax
		mov	[ecx+2Ch], esi
		mov	esi, ecx
		mov	[esi+28h], eax
		mov	ecx, [esp+0DCh+var_8C]
		xor	ecx, [esp+0DCh+var_7C]
		mov	edx, [esi+38h]
		xor	ecx, ebp
		mov	eax, ecx
		shr	ecx, 18h
		shl	eax, 8
		add	eax, ecx
		xor	ebp, eax
		mov	[esi+30h], eax
		mov	eax, [esi+3Ch]
		xor	eax, edx
		mov	[esi+34h], ebp
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [esi+54h]
		xor	edx, ecx
		mov	[esi+38h], ecx
		mov	[esi+3Ch], edx
		mov	edx, [esi+50h]
		xor	eax, edx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [esp+0DCh+var_54]
		xor	eax, [esp+0DCh+var_B4]
		xor	edx, ecx
		xor	eax, edi
		mov	[esi+50h], ecx
		mov	ecx, eax
		mov	[esi+54h], edx
		mov	edx, [esp+0DCh+var_C]
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [esp+0DCh+var_98]
		xor	eax, [esp+0DCh+var_A4]
		xor	edi, ecx
		xor	eax, edx
		mov	[esi+58h], ecx
		mov	ecx, eax
		mov	[esi+5Ch], edi
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[esi+60h], ecx
		mov	ecx, [esp+0DCh+var_14]
		mov	[esi+64h], edx
		mov	edx, [esp+0DCh+var_70]
		xor	edx, [esp+0DCh+var_54]
		xor	edx, ecx
		mov	eax, edx
		shr	edx, 18h
		shl	eax, 8
		add	eax, edx
		mov	edx, [esp+0DCh+var_90]
		xor	edx, [esp+0DCh+var_98]
		xor	ecx, eax
		mov	[esi+6Ch], ecx
		mov	ecx, [esp+0DCh+var_24]
		xor	edx, ecx
		mov	[esi+68h], eax
		mov	eax, edx
		shl	eax, 8
		shr	edx, 18h
		add	eax, edx
		mov	edx, [esi+78h]
		xor	ecx, eax
		mov	[esi+70h], eax
		mov	eax, [esi+7Ch]
		xor	eax, edx
		mov	[esi+74h], ecx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	eax, [esi+94h]
		mov	ebx, [esp+0DCh+var_10]
		xor	eax, ebx
		mov	ebp, [esp+0DCh+var_68]
		mov	[esi+78h], ecx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	[esi+7Ch], edx
		mov	edx, [esp+0DCh+var_6C]
		xor	ebx, ecx
		mov	[esi+90h], ecx
		mov	eax, ebp
		xor	eax, [esp+0DCh+var_B8]
		xor	eax, edx
		mov	[esi+94h], ebx
		mov	ebx, [esp+0DCh+var_4]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, ebx
		xor	eax, [esp+0DCh+var_60]
		xor	edx, ecx
		xor	ebx, [esp+0DCh+var_58]
		mov	[esi+98h], ecx
		mov	[esi+9Ch], edx
		mov	edx, [esp+0DCh+var_C8]
		xor	eax, edx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[esi+0A0h], ecx
		mov	ecx, [esp+0DCh+var_A8]
		mov	[esi+0A4h], edx
		mov	edx, [esp+0DCh+var_88]
		xor	ebp, edx
		xor	ebp, ecx
		mov	eax, ebp
		shr	ebp, 18h
		shl	eax, 8
		add	eax, ebp
		xor	ecx, eax
		mov	[esi+0A8h], eax
		mov	[esi+0ACh], ecx
		mov	ecx, [esp+0DCh+var_50]
		xor	ebx, ecx
		mov	eax, ebx
		shr	ebx, 18h
		shl	eax, 8
		add	eax, ebx
		xor	ecx, eax
		mov	[esi+0B0h], eax
		mov	[esi+0B4h], ecx
		mov	ecx, [esp+0DCh+var_AC]
		xor	edx, ecx
		mov	eax, edx
		shr	edx, 18h
		shl	eax, 8
		add	eax, edx
		pop	edi
		xor	ecx, eax
		mov	[esi+0B8h], eax
		mov	[esi+0BCh], ecx
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0CCh
		retn
sub_100141D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10014E30	proc near		; CODE XREF: sub_10014170+34p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 20h
		mov	ecx, [esp+20h+arg_0]
		push	[esp+20h+arg_4]
		mov	eax, [ecx]
		mov	[esp+24h+var_20], eax
		mov	eax, [ecx+4]
		mov	[esp+24h+var_1C], eax
		mov	eax, [ecx+8]
		mov	[esp+24h+var_18], eax
		mov	eax, [ecx+0Ch]
		mov	[esp+24h+var_14], eax
		mov	eax, [ecx+10h]
		mov	[esp+24h+var_10], eax
		mov	eax, [ecx+14h]
		mov	[esp+24h+var_C], eax
		mov	eax, [ecx+10h]
		not	eax
		mov	[esp+24h+var_8], eax
		mov	eax, [ecx+14h]
		not	eax
		mov	[esp+24h+var_4], eax
		lea	eax, [esp+24h+var_20]
		push	eax
		call	sub_10014E90
		add	esp, 28h
		retn
sub_10014E30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10014E90	proc near		; CODE XREF: sub_10014170+21p
					; sub_10014E30+4Bp

var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 110h
		mov	eax, [esp+110h+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	ecx, [eax+8]
		mov	ebp, [eax+4]
		mov	ebx, [eax]
		mov	edx, [eax+18h]
		mov	esi, [eax+1Ch]
		bswap	ecx
		mov	[esp+11Ch+var_104], ecx
		mov	ecx, [eax+0Ch]
		bswap	ecx
		mov	[esp+11Ch+var_110], ecx
		mov	ecx, [eax+10h]
		push	edi
		bswap	ebp
		bswap	ecx
		mov	[esp+120h+var_E0], ecx
		mov	edi, ebp
		mov	ecx, [eax+14h]
		mov	eax, [esp+120h+var_104]
		shr	eax, 13h
		shl	edi, 0Dh
		add	edi, eax
		mov	[esp+120h+var_C], ebp
		mov	eax, [esp+120h+var_104]
		shl	eax, 0Dh
		mov	[esp+120h+var_E4], eax
		bswap	ebx
		mov	[esp+120h+var_AC], edi
		mov	edi, [esp+120h+var_110]
		mov	eax, edi
		shr	eax, 13h
		add	[esp+120h+var_E4], eax
		mov	eax, ebx
		shr	eax, 13h
		mov	[esp+120h+var_8], ebx
		shl	ebx, 0Dh
		shl	edi, 0Dh
		add	edi, eax
		mov	eax, ebp
		shr	eax, 13h
		mov	ebp, edi
		add	ebx, eax
		shr	ebp, 11h
		mov	eax, [esp+120h+var_AC]
		mov	[esp+120h+var_C0], ebx
		mov	ebx, [esp+120h+var_E4]
		shl	eax, 0Fh
		shr	ebx, 11h
		add	ebx, eax
		mov	[esp+120h+var_54], edi
		mov	eax, [esp+120h+var_E4]
		shl	eax, 0Fh
		add	ebp, eax
		mov	[esp+120h+var_68], ebx
		mov	ebx, [esp+120h+var_C0]
		mov	eax, edi
		mov	edi, [esp+120h+var_68]
		shl	eax, 0Fh
		shr	ebx, 11h
		add	ebx, eax
		mov	[esp+120h+var_14], ebp
		mov	eax, [esp+120h+var_C0]
		mov	[esp+120h+var_BC], ebx
		mov	ebx, [esp+120h+var_AC]
		shl	eax, 0Fh
		shr	ebx, 11h
		add	ebx, eax
		mov	eax, ebp
		shr	eax, 0Fh
		mov	[esp+120h+var_E8], eax
		mov	eax, edi
		shl	eax, 11h
		add	[esp+120h+var_E8], eax
		mov	[esp+120h+var_4C], ebx
		mov	ebx, [esp+120h+var_BC]
		bswap	ecx
		bswap	edx
		bswap	esi
		mov	eax, ebp
		shr	ebx, 0Fh
		mov	ebp, [esp+120h+var_4C]
		shl	eax, 11h
		add	ebx, eax
		shr	ebp, 0Fh
		mov	eax, [esp+120h+var_BC]
		shl	eax, 11h
		add	ebp, eax
		shr	edi, 0Fh
		mov	eax, [esp+120h+var_4C]
		shl	eax, 11h
		add	edi, eax
		mov	[esp+120h+var_9C], ebx
		mov	eax, ebp
		mov	[esp+120h+var_D8], edi
		shr	eax, 1Eh
		mov	edi, ebx
		mov	ebx, [esp+120h+var_E8]
		mov	[esp+120h+var_74], ebp
		lea	eax, [eax+edi*4]
		mov	[esp+120h+var_8C], eax
		mov	eax, [esp+120h+var_D8]
		shr	eax, 1Eh
		lea	eax, [eax+ebp*4]
		mov	ebp, [esp+120h+var_D8]
		mov	[esp+120h+var_20], eax
		mov	eax, ebx
		shr	eax, 1Eh
		lea	eax, [eax+ebp*4]
		mov	ebp, edx
		mov	[esp+120h+var_50], eax
		mov	eax, edi
		shr	eax, 1Eh
		mov	edi, ecx
		shl	ecx, 0Fh
		shr	ebp, 11h
		add	ebp, ecx
		shr	edi, 11h
		lea	eax, [eax+ebx*4]
		shl	edx, 0Fh
		mov	ebx, [esp+120h+var_E0]
		mov	ecx, esi
		mov	[esp+120h+var_94], eax
		mov	eax, ebx
		shl	eax, 0Fh
		add	edi, eax
		shr	ebx, 11h
		shl	esi, 0Fh
		mov	eax, edi
		add	ebx, esi
		shl	eax, 0Fh
		mov	[esp+120h+var_E0], ebx
		mov	ebx, ebp
		shr	ecx, 11h
		add	ecx, edx
		shr	ebx, 11h
		add	ebx, eax
		mov	[esp+120h+var_84], ebp
		mov	edx, ecx
		mov	[esp+120h+var_48], ecx
		mov	eax, ebp
		shr	edx, 11h
		mov	ebp, [esp+120h+var_E0]
		mov	esi, ebx
		shl	eax, 0Fh
		add	edx, eax
		shr	ebp, 11h
		mov	eax, ecx
		mov	[esp+120h+var_34], edi
		shl	eax, 0Fh
		mov	ecx, edi
		add	ebp, eax
		shr	ecx, 11h
		mov	eax, [esp+120h+var_E0]
		shl	eax, 0Fh
		add	ecx, eax
		mov	[esp+120h+var_40], ebx
		mov	[esp+120h+var_10], edx
		mov	[esp+120h+var_A4], ebp
		mov	[esp+120h+var_18], ecx
		mov	eax, edx
		shl	esi, 1Eh
		shr	eax, 2
		mov	edi, edx
		add	esi, eax
		shl	edi, 1Eh
		mov	eax, ebp
		mov	[esp+120h+var_90], esi
		shr	eax, 2
		mov	edx, ebp
		add	edi, eax
		shl	edx, 1Eh
		mov	eax, ecx
		mov	[esp+120h+var_98], edi
		shr	eax, 2
		add	edx, eax
		shl	ecx, 1Eh
		mov	eax, ebx
		mov	[esp+120h+var_7C], edx
		shr	eax, 2
		add	ecx, eax
		mov	eax, edx
		shr	eax, 1Eh
		mov	[esp+120h+var_80], ecx
		lea	ebx, [eax+edi*4]
		mov	eax, ecx
		shr	eax, 1Eh
		mov	[esp+120h+var_6C], ebx
		lea	ebp, [eax+edx*4]
		mov	eax, esi
		shr	eax, 1Eh
		mov	[esp+120h+var_B4], ebp
		lea	ecx, [eax+ecx*4]
		mov	eax, edi
		shr	eax, 1Eh
		mov	[esp+120h+var_64], ecx
		lea	esi, [eax+esi*4]
		mov	eax, ecx
		shr	eax, 1Eh
		mov	[esp+120h+var_70], esi
		lea	edx, [eax+ebp*4]
		mov	eax, esi
		shr	eax, 1Eh
		mov	[esp+120h+var_100], edx
		lea	ecx, [eax+ecx*4]
		mov	eax, ebx
		shr	eax, 1Eh
		mov	[esp+120h+var_FC], ecx
		lea	eax, [eax+esi*4]
		mov	[esp+120h+var_EC], eax
		mov	eax, ebp
		shr	eax, 1Eh
		lea	eax, [eax+ebx*4]
		mov	ebx, edx
		xor	ebx, [esp+120h+var_8]
		mov	[esp+120h+var_F4], eax
		xor	ebx, 0A09E667Fh
		mov	eax, [esp+120h+var_C]
		mov	edx, ebx
		xor	eax, ecx
		shr	edx, 10h
		xor	eax, 3BCC908Bh
		mov	ecx, edx
		mov	[esp+120h+var_108], eax
		shr	eax, 10h
		mov	[esp+120h+var_10C], eax
		mov	eax, ebx
		shr	ecx, 8
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+120h+var_10C]
		mov	ecx, edx
		shr	ecx, 8
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		xor	esi, ds:dword_10043F90[eax*4]
		and	ecx, 0FFh
		mov	ebp, ds:dword_10043790[ecx*4]
		mov	edi, esi
		mov	ebx, [esp+120h+var_108]
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, [esp+120h+var_110]
		shl	edi, 18h
		xor	ebp, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		xor	ebp, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		xor	ebp, ds:dword_10043390[eax*4]
		mov	eax, [esp+120h+var_104]
		xor	ebp, esi
		xor	eax, ebp
		shr	esi, 8
		xor	eax, [esp+120h+var_EC]
		add	edi, esi
		xor	eax, 0B67AE858h
		xor	edi, ebp
		xor	ecx, edi
		mov	[esp+120h+var_10C], eax
		xor	ecx, [esp+120h+var_F4]
		mov	edx, eax
		xor	ecx, 4CAA73B2h
		shr	eax, 8
		mov	[esp+120h+var_108], ecx
		mov	ebx, ecx
		and	eax, 0FFh
		shr	edx, 10h
		mov	ecx, edx
		shr	ebx, 10h
		shr	ecx, 8
		and	ecx, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		mov	ecx, ebx
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+120h+var_108]
		shr	ecx, 8
		and	ecx, 0FFh
		xor	esi, ds:dword_10043790[eax*4]
		mov	eax, [esp+120h+var_10C]
		movzx	eax, al
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, edx
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, esi
		xor	ecx, esi
		shl	eax, 18h
		shr	esi, 8
		add	eax, esi
		xor	eax, ecx
		xor	ecx, [esp+120h+var_100]
		xor	eax, [esp+120h+var_FC]
		mov	ebx, ecx
		mov	[esp+120h+var_F0], eax
		xor	ebx, 0C6EF372Fh
		xor	eax, 0E94F82BEh
		mov	[esp+120h+var_F8], ecx
		mov	[esp+120h+var_108], eax
		mov	edx, ebx
		shr	eax, 10h
		shr	edx, 10h
		mov	[esp+120h+var_10C], eax
		mov	ecx, edx
		shr	ecx, 8
		mov	eax, ebx
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+120h+var_10C]
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		xor	ebp, [esp+120h+var_EC]
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+120h+var_108]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	edi, [esp+120h+var_F4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, esi
		xor	ecx, esi
		shl	eax, 18h
		shr	esi, 8
		add	eax, esi
		xor	eax, ecx
		xor	ecx, ebp
		xor	eax, edi
		mov	[esp+120h+var_D4], ecx
		mov	[esp+120h+var_B0], eax
		mov	ebx, ecx
		xor	eax, 0F1D36F1Ch
		xor	ebx, 54FF53A5h
		mov	[esp+120h+var_108], eax
		mov	edx, ebx
		shr	eax, 10h
		mov	[esp+120h+var_10C], eax
		mov	eax, ebx
		shr	eax, 8
		shr	edx, 10h
		and	eax, 0FFh
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+120h+var_10C]
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+120h+var_108]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+120h+var_F8]
		xor	ecx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+120h+var_100]
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, esi
		xor	ecx, esi
		shl	eax, 18h
		shr	esi, 8
		xor	edx, ecx
		add	eax, esi
		mov	[esp+120h+var_F8], edx
		xor	eax, ecx
		xor	ebx, edx
		mov	ecx, [esp+120h+var_F0]
		xor	ecx, eax
		mov	[esp+120h+var_100], ebx
		mov	eax, [esp+120h+var_FC]
		mov	[esp+120h+var_F0], ecx
		xor	eax, ecx
		mov	[esp+120h+var_FC], eax
		xor	ebx, 10E527FAh
		xor	eax, 0DE682D1Dh
		mov	ebp, [esp+120h+var_D4]
		mov	[esp+120h+var_108], eax
		mov	edx, ebx
		shr	eax, 10h
		mov	[esp+120h+var_10C], eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	edx, 10h
		mov	ecx, edx
		mov	edi, [esp+120h+var_B0]
		shr	ecx, 8
		and	ecx, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+120h+var_10C]
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+120h+var_108]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		mov	edx, esi
		shl	edx, 18h
		xor	ecx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10043390[eax*4]
		xor	ecx, esi
		shr	esi, 8
		add	edx, esi
		mov	eax, ecx
		xor	eax, [esp+120h+var_EC]
		xor	edx, ecx
		xor	edx, [esp+120h+var_F4]
		xor	eax, ebp
		mov	ebx, eax
		mov	[esp+120h+var_C4], eax
		xor	edx, edi
		xor	ebx, 0B05688C2h
		mov	eax, edx
		mov	[esp+120h+var_B8], edx
		xor	eax, 0B3E6C1FDh
		mov	edx, ebx
		mov	[esp+120h+var_108], eax
		shr	eax, 10h
		mov	[esp+120h+var_10C], eax
		mov	eax, ebx
		shr	edx, 10h
		shr	eax, 8
		mov	ecx, edx
		shr	ecx, 8
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	esi, ds:dword_10043390[ecx*4]
		xor	esi, ds:dword_10043B90[eax*4]
		movzx	eax, dl
		mov	edx, [esp+120h+var_10C]
		mov	ecx, edx
		shr	ecx, 8
		and	ecx, 0FFh
		xor	esi, ds:dword_10043790[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+120h+var_108]
		mov	ecx, ds:dword_10043790[ecx*4]
		xor	esi, ds:dword_10043F90[eax*4]
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10043F90[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10043B90[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+120h+var_F8]
		xor	ecx, ds:dword_10043390[eax*4]
		mov	eax, esi
		xor	ecx, esi
		shl	eax, 18h
		xor	[esp+120h+var_100], ecx
		shr	esi, 8
		add	eax, esi
		mov	esi, ebp
		xor	eax, ecx
		shr	esi, 11h
		xor	[esp+120h+var_FC], eax
		mov	eax, ebx
		mov	ecx, [esp+120h+var_F0]
		mov	edx, ecx
		shl	ecx, 0Fh
		add	esi, ecx
		shl	eax, 0Fh
		mov	ecx, edi
		shr	ebx, 11h
		shr	ecx, 11h
		shl	edi, 0Fh
		add	ebx, edi
		shr	edx, 11h
		add	edx, eax
		mov	[esp+120h+var_F8], ebx
		shl	ebp, 0Fh
		mov	eax, esi
		add	ecx, ebp
		shr	eax, 2
		mov	ebp, ecx
		mov	[esp+120h+var_78], ecx
		mov	ebx, edx
		shl	ebp, 1Eh
		shl	ebx, 1Eh
		mov	edi, esi
		add	ebx, eax
		shl	edi, 1Eh
		mov	eax, ecx
		mov	[esp+120h+var_F0], esi
		mov	esi, [esp+120h+var_F8]
		shr	eax, 2
		add	edi, eax
		shl	esi, 1Eh
		mov	eax, [esp+120h+var_F8]
		shr	eax, 2
		add	ebp, eax
		mov	[esp+120h+var_30], edx
		mov	eax, edx
		mov	[esp+120h+var_88], ebx
		shr	eax, 2
		mov	ecx, ebp
		add	esi, eax
		shr	ecx, 0Fh
		mov	eax, edi
		mov	[esp+120h+var_EC], edi
		shl	eax, 11h
		add	ecx, eax
		mov	[esp+120h+var_5C], ebp
		mov	[esp+120h+var_44], ecx
		mov	eax, ebp
		shl	eax, 11h
		mov	ecx, esi
		shr	ecx, 0Fh
		add	ecx, eax
		mov	[esp+120h+var_38], esi
		mov	[esp+120h+var_A0], ecx
		mov	eax, esi
		mov	ecx, ebx
		shl	eax, 11h
		shr	ecx, 0Fh
		add	ecx, eax
		mov	[esp+120h+var_3C], edi
		mov	[esp+120h+var_D0], ecx
		mov	eax, ebx
		mov	ecx, edi
		mov	[esp+120h+var_108], ebx
		shr	ecx, 0Fh
		shl	eax, 11h
		add	ecx, eax
		mov	ebx, [esp+120h+var_100]
		mov	edx, [esp+120h+var_B8]
		mov	ebp, [esp+120h+var_C4]
		mov	[esp+120h+var_B0], ecx
		mov	ecx, [esp+120h+var_FC]
		mov	eax, ecx
		shr	eax, 2
		shl	ebx, 1Eh
		add	ebx, eax
		shl	ecx, 1Eh
		mov	eax, [esp+120h+var_C4]
		mov	esi, ebx
		shr	eax, 2
		add	ecx, eax
		shl	ebp, 1Eh
		mov	eax, edx
		shl	esi, 1Eh
		shr	eax, 2
		add	ebp, eax
		shl	edx, 1Eh
		mov	eax, [esp+120h+var_100]
		shr	eax, 2
		add	edx, eax
		mov	[esp+120h+var_A8], ecx
		mov	eax, ecx
		mov	[esp+120h+var_F4], edx
		shr	eax, 2
		add	esi, eax
		shl	ecx, 1Eh
		mov	eax, ebp
		mov	[esp+120h+var_DC], esi
		shr	eax, 2
		mov	esi, ebp
		add	ecx, eax
		shl	esi, 1Eh
		mov	eax, edx
		mov	[esp+120h+var_C8], ebx
		shr	eax, 2
		add	esi, eax
		shl	edx, 1Eh
		mov	eax, ebx
		mov	[esp+120h+var_CC], ebp
		mov	ebp, [esp+120h+var_DC]
		mov	ebx, esi
		shr	eax, 2
		add	edx, eax
		shr	ebx, 0Dh
		mov	eax, ecx
		shr	ebp, 0Dh
		shl	eax, 13h
		mov	edi, edx
		add	ebx, eax
		shr	edi, 0Dh
		mov	eax, esi
		mov	[esp+120h+var_28], ecx
		shl	eax, 13h
		add	edi, eax
		shr	ecx, 0Dh
		mov	eax, edx
		shl	eax, 13h
		add	ebp, eax
		mov	eax, [esp+120h+var_DC]
		shl	eax, 13h
		add	ecx, eax
		mov	eax, [esp+120h+var_110]
		xor	[esp+120h+var_B8], eax
		xor	[esp+120h+var_E0], eax
		xor	[esp+120h+var_F8], eax
		mov	eax, [esp+120h+var_18]
		not	eax
		mov	[esp+120h+var_D4], ecx
		mov	ecx, [esp+120h+var_104]
		xor	[esp+120h+var_C4], ecx
		xor	[esp+120h+var_48], ecx
		xor	[esp+120h+var_78], ecx
		mov	[esp+120h+var_2C], eax
		and	eax, [esp+120h+var_110]
		xor	ecx, eax
		mov	[esp+120h+var_104], ecx
		mov	ecx, [esp+120h+var_A4]
		and	ecx, [esp+120h+var_104]
		mov	eax, ecx
		xor	[esp+120h+var_8C], ebp
		shr	eax, 1Fh
		xor	[esp+120h+var_6C], ebp
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+var_104]
		xor	[esp+120h+var_110], eax
		mov	eax, [esp+120h+var_110]
		xor	[esp+120h+var_F4], eax
		xor	[esp+120h+var_C0], eax
		mov	eax, ecx
		xor	eax, [esp+120h+var_5C]
		xor	[esp+120h+var_CC], ecx
		xor	[esp+120h+var_54], ecx
		mov	[esp+120h+var_24], eax
		mov	eax, [esp+120h+var_110]
		xor	eax, [esp+120h+var_38]
		mov	[esp+120h+var_10C], eax
		mov	eax, [esp+120h+var_4C]
		not	eax
		mov	[esp+120h+var_1C], eax
		and	eax, [esp+120h+var_110]
		xor	ecx, eax
		mov	[esp+120h+var_104], ecx
		mov	ecx, [esp+120h+var_BC]
		and	ecx, [esp+120h+var_104]
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+var_110]
		xor	ecx, eax
		mov	eax, [esp+120h+var_104]
		xor	[esp+120h+var_7C], eax
		xor	eax, esi
		xor	[esp+120h+var_80], ecx
		mov	esi, ecx
		mov	[esp+120h+var_60], eax
		mov	eax, esi
		xor	eax, edx
		xor	[esp+120h+var_D8], esi
		mov	edx, [esp+120h+var_104]
		xor	[esp+120h+var_74], edx
		mov	[esp+120h+var_4], eax
		mov	eax, [esp+120h+var_108]
		not	eax
		mov	[esp+120h+var_110], ecx
		mov	[esp+120h+var_58], eax
		and	eax, esi
		xor	edx, eax
		xor	[esp+120h+var_64], edx
		mov	ecx, edx
		and	ecx, [esp+120h+var_38]
		xor	[esp+120h+var_D0], edx
		mov	eax, ecx
		xor	[esp+120h+var_50], edx
		xor	edx, ebx
		shr	eax, 1Fh
		mov	[esp+120h+var_104], edx
		mov	edx, [esp+120h+var_D4]
		xor	[esp+120h+var_20], edx
		xor	[esp+120h+var_B4], edx
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+var_3C]
		xor	esi, eax
		xor	[esp+120h+var_70], esi
		mov	eax, ebp
		xor	eax, [esp+120h+var_44]
		xor	[esp+120h+var_B0], esi
		xor	[esp+120h+var_94], esi
		xor	esi, edi
		mov	edi, [esp+120h+var_5C]
		mov	[esp+120h+var_D4], eax
		not	edi
		mov	eax, edx
		mov	[esp+120h+var_110], esi
		xor	eax, [esp+120h+var_A0]
		mov	[esp+120h+var_A0], edi
		and	edi, edx
		mov	[esp+120h+var_44], eax
		xor	edi, ebp
		mov	ebx, [esp+120h+var_14]
		and	ecx, edi
		xor	[esp+120h+var_E8], edi
		mov	eax, ecx
		xor	[esp+120h+var_DC], edi
		not	ebx
		xor	[esp+120h+var_90], edi
		shr	eax, 1Fh
		mov	ebp, [esp+120h+var_34]
		lea	esi, [eax+ecx*2]
		mov	ecx, [esp+120h+var_68]
		xor	esi, edx
		mov	eax, ebx
		and	eax, esi
		xor	[esp+120h+var_9C], esi
		xor	edi, eax
		xor	[esp+120h+var_28], esi
		xor	[esp+120h+var_98], esi
		and	ecx, edi
		mov	edx, [esp+120h+var_10]
		mov	eax, ecx
		xor	[esp+120h+var_C8], edi
		not	edx
		xor	[esp+120h+var_88], edi
		xor	[esp+120h+var_AC], edi
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+var_40]
		xor	esi, eax
		mov	eax, edx
		xor	[esp+120h+var_A8], esi
		and	eax, esi
		xor	[esp+120h+var_EC], esi
		xor	edi, eax
		xor	[esp+120h+var_E4], esi
		and	ecx, edi
		xor	[esp+120h+var_30], edi
		mov	eax, ecx
		shr	eax, 1Fh
		xor	ebp, edi
		and	edx, [esp+120h+var_A8]
		xor	edx, [esp+120h+var_C8]
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+var_8]
		xor	esi, eax
		xor	ecx, edi
		mov	eax, [esp+120h+var_100]
		xor	[esp+120h+var_FC], esi
		xor	eax, edi
		mov	edi, [esp+120h+var_C]
		mov	[esp+120h+var_100], eax
		xor	edi, esi
		xor	eax, ecx
		xor	[esp+120h+var_F0], esi
		mov	ecx, [esp+120h+arg_4]
		xor	[esp+120h+var_84], esi
		xor	[esp+120h+var_100], ebp
		mov	esi, [esp+120h+var_C4]
		mov	[ecx], eax
		mov	eax, [esp+120h+var_FC]
		xor	eax, edi
		xor	esi, [esp+120h+var_48]
		mov	[ecx+4], eax
		mov	eax, [esp+120h+var_30]
		mov	edi, eax
		mov	ecx, [esp+120h+var_40]
		xor	eax, edx
		and	ecx, edx
		xor	edi, ebp
		mov	edx, [esp+120h+arg_4]
		mov	ebp, [esp+120h+var_78]
		xor	ebp, [esp+120h+var_48]
		mov	[edx+38h], eax
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		xor	eax, [esp+120h+var_A8]
		xor	eax, [esp+120h+var_F0]
		mov	[edx+3Ch], eax
		mov	eax, [esp+120h+var_40]
		mov	[edx+40h], eax
		mov	eax, [esp+120h+var_10]
		mov	[edx+44h], eax
		mov	eax, [esp+120h+var_A4]
		mov	[edx+48h], eax
		mov	ecx, [esp+120h+var_2C]
		and	ecx, [esp+120h+var_F8]
		xor	ecx, [esp+120h+var_78]
		and	[esp+120h+var_A4], ecx
		mov	eax, [esp+120h+var_18]
		mov	[edx+4Ch], eax
		mov	eax, [esp+120h+var_CC]
		xor	eax, ecx
		and	ebx, [esp+120h+var_98]
		mov	[edx+50h], eax
		mov	ecx, [esp+120h+var_A4]
		mov	eax, ecx
		shr	eax, 1Fh
		xor	ebx, [esp+120h+var_90]
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+var_54]
		xor	eax, [esp+120h+var_F4]
		xor	eax, [esp+120h+var_F8]
		mov	[edx+54h], eax
		mov	edx, [esp+120h+var_AC]
		xor	[esp+120h+var_C8], edx
		mov	eax, [esp+120h+var_88]
		xor	[esp+120h+var_CC], ecx
		xor	eax, edx
		mov	edx, [esp+120h+var_24]
		mov	[esp+120h+var_2C], eax
		mov	eax, edx
		xor	eax, ecx
		mov	ecx, [esp+120h+var_68]
		mov	[esp+120h+var_24], eax
		and	ecx, ebx
		mov	eax, [esp+120h+var_88]
		xor	eax, ebx
		mov	ebx, [esp+120h+arg_4]
		mov	[ebx+78h], eax
		mov	eax, ecx
		shr	eax, 1Fh
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+var_1C]
		xor	eax, [esp+120h+var_EC]
		xor	eax, [esp+120h+var_98]
		and	ecx, [esp+120h+var_10C]
		mov	[ebx+7Ch], eax
		xor	ecx, edx
		mov	eax, [esp+120h+var_68]
		mov	edx, [esp+120h+var_BC]
		mov	[ebx+80h], eax
		and	edx, ecx
		mov	eax, [esp+120h+var_14]
		mov	[ebx+84h], eax
		mov	eax, [esp+120h+var_BC]
		mov	[ebx+88h], eax
		mov	eax, [esp+120h+var_4C]
		mov	[ebx+8Ch], eax
		mov	eax, [esp+120h+var_7C]
		xor	eax, ecx
		mov	ecx, ebx
		mov	[ecx+90h], eax
		mov	eax, edx
		shr	eax, 1Fh
		lea	eax, [eax+edx*2]
		mov	edx, [esp+120h+var_DC]
		xor	eax, [esp+120h+var_10C]
		mov	ebx, edx
		xor	eax, [esp+120h+var_80]
		xor	edx, [esp+120h+var_E8]
		xor	ebx, [esp+120h+var_90]
		mov	[ecx+94h], eax
		mov	ecx, [esp+120h+var_60]
		mov	eax, ecx
		xor	eax, [esp+120h+var_7C]
		xor	ecx, [esp+120h+var_74]
		mov	[esp+120h+var_1C], eax
		mov	eax, [esp+120h+var_A0]
		and	eax, [esp+120h+var_B4]
		mov	[esp+120h+var_DC], edx
		mov	[esp+120h+var_60], ecx
		xor	eax, [esp+120h+var_6C]
		mov	ecx, [esp+120h+var_3C]
		and	ecx, eax
		mov	edx, [esp+120h+var_E8]
		xor	edx, eax
		mov	eax, [esp+120h+arg_4]
		mov	[eax+0B8h], edx
		mov	eax, ecx
		shr	eax, 1Fh
		mov	edx, [esp+120h+var_3C]
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+arg_4]
		xor	eax, [esp+120h+var_B4]
		xor	eax, [esp+120h+var_9C]
		mov	[ecx+0BCh], eax
		mov	eax, [esp+120h+var_5C]
		mov	[ecx+0C4h], eax
		mov	eax, [esp+120h+var_108]
		mov	[ecx+0CCh], eax
		mov	eax, [esp+120h+var_58]
		and	eax, [esp+120h+var_D8]
		xor	eax, [esp+120h+var_74]
		mov	[ecx+0C0h], edx
		mov	edx, [esp+120h+var_38]
		mov	[ecx+0C8h], edx
		mov	ecx, eax
		and	ecx, edx
		mov	edx, [esp+120h+var_64]
		xor	edx, eax
		mov	eax, ecx
		shr	eax, 1Fh
		mov	[esp+120h+var_58], edx
		mov	edx, [esp+120h+arg_4]
		lea	eax, [eax+ecx*2]
		mov	ecx, [esp+120h+var_D4]
		xor	eax, [esp+120h+var_70]
		xor	eax, [esp+120h+var_D8]
		mov	[edx+0D4h], eax
		mov	eax, ecx
		xor	eax, [esp+120h+var_6C]
		xor	ecx, [esp+120h+var_8C]
		mov	[esp+120h+var_34], eax
		mov	eax, [esp+120h+var_D0]
		xor	eax, [esp+120h+var_64]
		mov	[esp+120h+var_A0], eax
		mov	eax, [esp+120h+var_50]
		xor	[esp+120h+var_D0], eax
		mov	[esp+120h+var_D4], ecx
		mov	ecx, [esp+120h+var_104]
		xor	ecx, eax
		mov	eax, [esp+120h+var_110]
		xor	eax, [esp+120h+var_94]
		mov	[edx+104h], eax
		mov	eax, [esp+120h+var_B8]
		xor	eax, [esp+120h+var_C4]
		mov	[edx+100h], ecx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [esp+120h+var_C4]
		xor	eax, ecx
		mov	[edx+10h], ecx
		mov	[edx+14h], eax
		mov	eax, [esp+120h+var_100]
		xor	eax, [esp+120h+var_FC]
		xor	eax, [esp+120h+var_84]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [esp+120h+var_100]
		xor	eax, ecx
		mov	[edx+18h], ecx
		mov	[edx+1Ch], eax
		mov	eax, esi
		xor	eax, [esp+120h+var_B8]
		xor	eax, [esp+120h+var_E0]
		mov	ecx, eax
		shl	ecx, 8
		shr	eax, 18h
		add	ecx, eax
		mov	eax, edi
		xor	eax, [esp+120h+var_F0]
		xor	esi, ecx
		xor	eax, [esp+120h+var_84]
		mov	[edx+20h], ecx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	[edx+24h], esi
		xor	edi, ecx
		mov	eax, ebp
		xor	eax, [esp+120h+var_F8]
		xor	eax, [esp+120h+var_E0]
		mov	[edx+2Ch], edi
		mov	edi, edx
		mov	edx, [edi+38h]
		mov	[edi+28h], ecx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [edi+3Ch]
		xor	eax, edx
		mov	[edi+30h], ecx
		xor	ebp, ecx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	[edi+34h], ebp
		mov	eax, [edi+54h]
		xor	edx, ecx
		mov	[edi+3Ch], edx
		mov	edx, [edi+50h]
		xor	eax, edx
		mov	[edi+38h], ecx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+50h], ecx
		mov	[edi+54h], edx
		mov	edx, [esp+120h+var_C8]
		mov	eax, edx
		xor	eax, [esp+120h+var_A8]
		xor	eax, [esp+120h+var_E4]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+58h], ecx
		mov	[edi+5Ch], edx
		mov	edx, [esp+120h+var_CC]
		mov	eax, edx
		xor	eax, [esp+120h+var_F4]
		xor	eax, [esp+120h+var_C0]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+60h], ecx
		mov	[edi+64h], edx
		mov	edx, [esp+120h+var_2C]
		mov	eax, edx
		xor	eax, [esp+120h+var_EC]
		xor	eax, [esp+120h+var_E4]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+68h], ecx
		mov	[edi+6Ch], edx
		mov	edx, [esp+120h+var_24]
		mov	eax, edx
		xor	eax, [esp+120h+var_10C]
		xor	eax, [esp+120h+var_C0]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [edi+7Ch]
		xor	edx, ecx
		mov	[edi+70h], ecx
		mov	[edi+74h], edx
		mov	edx, [edi+78h]
		xor	eax, edx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [edi+94h]
		xor	edx, ecx
		mov	[edi+78h], ecx
		mov	[edi+7Ch], edx
		mov	edx, [edi+90h]
		xor	eax, edx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, ebx
		xor	eax, [esp+120h+var_28]
		xor	edx, ecx
		xor	eax, [esp+120h+var_98]
		mov	[edi+90h], ecx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	[edi+94h], edx
		mov	edx, [esp+120h+var_1C]
		xor	ebx, ecx
		mov	eax, edx
		mov	[edi+98h], ecx
		xor	eax, [esp+120h+var_4]
		xor	eax, [esp+120h+var_80]
		mov	ecx, eax
		mov	[edi+9Ch], ebx
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+0A0h], ecx
		mov	[edi+0A4h], edx
		mov	edx, [esp+120h+var_DC]
		mov	eax, edx
		xor	eax, [esp+120h+var_28]
		xor	eax, [esp+120h+var_9C]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+0A8h], ecx
		mov	[edi+0ACh], edx
		mov	edx, [esp+120h+var_60]
		mov	eax, edx
		xor	eax, [esp+120h+var_4]
		xor	eax, [esp+120h+var_D8]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		mov	eax, [edi+0BCh]
		xor	edx, ecx
		mov	[edi+0B0h], ecx
		mov	[edi+0B4h], edx
		mov	edx, [edi+0B8h]
		xor	eax, edx
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+0B8h], ecx
		mov	[edi+0BCh], edx
		mov	eax, [edi+0D4h]
		mov	edx, [esp+120h+var_58]
		xor	eax, edx
		mov	ecx, eax
		mov	ebp, [esp+120h+var_20]
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+0D0h], ecx
		mov	[edi+0D4h], edx
		mov	edx, [esp+120h+var_34]
		mov	eax, edx
		xor	eax, [esp+120h+var_44]
		xor	eax, [esp+120h+var_B4]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+0D8h], ecx
		mov	[edi+0DCh], edx
		mov	edx, [esp+120h+var_A0]
		mov	eax, edx
		xor	eax, [esp+120h+var_B0]
		xor	eax, [esp+120h+var_70]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+0E0h], ecx
		mov	[edi+0E4h], edx
		mov	edx, [esp+120h+var_D4]
		mov	eax, edx
		xor	eax, [esp+120h+var_44]
		xor	eax, ebp
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+0E8h], ecx
		mov	[edi+0ECh], edx
		mov	edx, [esp+120h+var_D0]
		mov	eax, edx
		xor	eax, [esp+120h+var_B0]
		xor	eax, [esp+120h+var_94]
		mov	ecx, eax
		shr	eax, 18h
		shl	ecx, 8
		add	ecx, eax
		xor	edx, ecx
		mov	[edi+0F0h], ecx
		mov	ecx, [esp+120h+var_8C]
		xor	ebp, ecx
		mov	eax, ebp
		mov	[edi+0F4h], edx
		shr	ebp, 18h
		shl	eax, 8
		add	eax, ebp
		xor	ecx, eax
		mov	[edi+0F8h], eax
		mov	[edi+0FCh], ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 110h
		retn
sub_10014E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10016040(int,	int, int, int, size_t)
sub_10016040	proc near		; DATA XREF: .rdata:1003E254o

var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 54h
		push	ebp
		push	esi
		mov	esi, [esp+5Ch+arg_0]
		xor	eax, eax
		push	edi
		xor	edi, edi
		mov	[esp+60h+var_54], eax
		test	esi, esi
		jz	loc_10016315
		cmp	[esp+60h+arg_4], eax
		jz	loc_10016315
		cmp	[esp+60h+arg_8], eax
		jz	loc_10016315
		mov	ebp, [esp+60h+arg_C]
		test	ebp, ebp
		jz	loc_10016315
		mov	[ebp+0], eax
		mov	[ebp+4], eax
		mov	[ebp+8], eax
		mov	[esp+60h+var_34], eax
		mov	[esp+60h+var_14], eax
		mov	[esp+60h+var_44], eax
		mov	[esp+60h+var_24], eax
		mov	[esp+60h+var_4], eax
		lea	eax, [esp+60h+var_40]
		push	ebx
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016271
		lea	eax, [esp+64h+var_20]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016271
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016271
		lea	eax, [esp+64h+var_30]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016271
		lea	eax, [esp+64h+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016271
		push	dword ptr [esi+8]
		lea	eax, [esp+68h+var_50]
		push	dword ptr [esi+4]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016271
		mov	eax, [esp+64h+arg_8]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+6Ch+var_20]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016271
		mov	eax, [esp+64h+arg_4]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+6Ch+var_40]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016271
		lea	eax, [esp+64h+var_10]
		push	eax
		lea	eax, [esp+68h+var_40]
		push	1
		push	eax
		call	sub_1002A600
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016271
		lea	eax, [esp+64h+var_50]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jle	loc_1001626C
		lea	eax, [esp+64h+var_10]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_1001626C
		lea	eax, [esp+64h+var_30]
		push	eax
		lea	eax, [esp+68h+var_40]
		push	eax
		lea	eax, [esp+6Ch+var_20]
		push	eax
		lea	eax, [esp+70h+var_50]
		push	eax
		call	sub_10026B80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10016271
		lea	eax, [esp+64h+var_30]
		push	eax
		call	sub_1002A950
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jle	short loc_1001626C
		push	edi
		call	PORT_Alloc_Util
		push	edi
		push	eax
		mov	[esp+70h+var_54], eax
		lea	eax, [esp+70h+var_30]
		push	eax
		call	sub_1002A820
		mov	esi, [esp+74h+arg_10]
		xor	ebx, ebx
		add	esp, 10h
		test	eax, eax
		setns	bl
		dec	ebx
		and	ebx, eax
		test	esi, esi
		jnz	short loc_10016222
		mov	esi, edi

loc_10016222:				; CODE XREF: sub_10016040+1DEj
		push	esi
		push	ebp
		push	0
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	edi, esi
		jnb	short loc_10016255
		sub	esi, edi
		push	esi		; size_t
		push	0		; int
		push	dword ptr [ebp+4] ; void *
		call	memset
		mov	eax, [esp+70h+var_54]
		push	edi		; size_t
		push	eax		; void *
		mov	eax, [ebp+4]
		add	eax, esi
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		jmp	short loc_10016271
; ---------------------------------------------------------------------------

loc_10016255:				; CODE XREF: sub_10016040+1F0j
		mov	eax, [esp+64h+var_54]
		sub	eax, esi
		push	esi		; size_t
		add	eax, edi
		push	eax		; void *
		push	dword ptr [ebp+4] ; void *
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_10016271
; ---------------------------------------------------------------------------

loc_1001626C:				; CODE XREF: sub_10016040+159j
					; sub_10016040+173j ...
		mov	ebx, 0FFFFFFFCh

loc_10016271:				; CODE XREF: sub_10016040+69j
					; sub_10016040+80j ...
		lea	eax, [esp+64h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+68h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+6Ch+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+70h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+74h+var_10]
		push	eax
		call	sub_10028F00
		mov	eax, [esp+78h+var_54]
		add	esp, 14h
		test	eax, eax
		jz	short loc_100162B8
		push	edi
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_100162B8:				; CODE XREF: sub_10016040+26Cj
		test	ebx, ebx
		jz	short loc_1001630B
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_100162E0
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_100162D9
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_100162D2
		push	0FFFFE001h
		jmp	short loc_100162E5
; ---------------------------------------------------------------------------

loc_100162D2:				; CODE XREF: sub_10016040+289j
		push	0FFFFE013h
		jmp	short loc_100162E5
; ---------------------------------------------------------------------------

loc_100162D9:				; CODE XREF: sub_10016040+284j
		push	0FFFFE002h
		jmp	short loc_100162E5
; ---------------------------------------------------------------------------

loc_100162E0:				; CODE XREF: sub_10016040+27Fj
		push	0FFFFE005h

loc_100162E5:				; CODE XREF: sub_10016040+290j
					; sub_10016040+297j ...
		call	PORT_SetError_Util
		mov	eax, [ebp+4]
		add	esp, 4
		test	eax, eax
		jz	short loc_10016300
		push	dword ptr [ebp+8]
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_10016300:				; CODE XREF: sub_10016040+2B2j
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001630B:				; CODE XREF: sub_10016040+27Aj
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_10016315:				; CODE XREF: sub_10016040+14j
					; sub_10016040+1Ej ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 54h
		retn
sub_10016040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10016330(size_t, int)
sub_10016330	proc near		; DATA XREF: .rdata:1003E24Co

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 70h
		xor	eax, eax
		mov	[esp+70h+var_70], 0
		push	ebp
		xor	ebp, ebp
		mov	[esp+74h+var_6C], eax
		push	edi
		mov	[esp+78h+var_64], eax
		cmp	[esp+78h+arg_4], eax
		jz	loc_100167F0
		mov	edi, [esp+78h+arg_0]
		test	edi, edi
		js	loc_100167F0
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		mov	[esp+7Ch+var_68], esi
		test	esi, esi
		jnz	short loc_10016390
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_10016390:				; CODE XREF: sub_10016330+47j
		push	ebx
		push	1Ch
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_100163C2
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	esi
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_100163C2:				; CODE XREF: sub_10016330+70j
		mov	[ebx], esi
		lea	eax, [esp+80h+var_50]
		push	eax
		mov	[esp+84h+var_44], ebp
		mov	[esp+84h+var_24], ebp
		mov	[esp+84h+var_54], ebp
		mov	[esp+84h+var_4], ebp
		mov	[esp+84h+var_34], ebp
		mov	[esp+84h+var_14], ebp
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_60]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100166B6
		push	edi
		call	PORT_Alloc_Util
		push	edi		; size_t
		push	eax		; void *
		mov	[esp+8Ch+var_70], eax
		call	sub_1000C220
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	loc_100166B6
		mov	eax, [esp+80h+var_70]
		push	edi
		push	eax
		or	byte ptr [eax],	80h
		or	byte ptr [eax+edi-1], 1
		lea	eax, [esp+88h+var_50]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_64]
		push	eax
		push	1
		lea	eax, ds:0[edi*8]
		push	eax
		lea	eax, [esp+8Ch+var_50]
		push	eax
		call	sub_100264B0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_40]
		push	eax
		lea	eax, [esp+84h+var_50]
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_30]
		push	eax
		lea	eax, [esp+84h+var_40]
		push	eax
		call	sub_100293E0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_100166B6
		push	edi
		call	PORT_Alloc_Util
		push	edi		; size_t
		push	eax		; void *
		mov	[esp+8Ch+var_6C], eax
		call	sub_1000C220
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	loc_100166B6
		mov	eax, [esp+80h+var_6C]
		push	edi
		push	eax
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_50]
		push	eax
		lea	eax, [esp+84h+var_60]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jle	short loc_10016580
		lea	eax, [esp+80h+var_60]
		push	eax
		lea	eax, [esp+84h+var_50]
		push	eax
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100166B6
		mov	edi, edi

loc_10016580:				; CODE XREF: sub_10016330+22Bj
					; sub_10016330+2D5j
		lea	eax, [esp+80h+var_60]
		push	2
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		js	short loc_100165A9
		lea	eax, [esp+80h+var_40]
		push	eax
		lea	eax, [esp+84h+var_60]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		js	short loc_100165B8

loc_100165A9:				; CODE XREF: sub_10016330+261j
		lea	eax, [esp+80h+var_60]
		push	3
		push	eax
		call	sub_1002A0D0
		add	esp, 8

loc_100165B8:				; CODE XREF: sub_10016330+277j
		lea	eax, [esp+80h+var_20]
		push	eax
		lea	eax, [esp+84h+var_50]
		push	eax
		lea	eax, [esp+88h+var_30]
		push	eax
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_100166B6
		lea	eax, [esp+80h+var_20]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10016610
		lea	eax, [esp+80h+var_60]
		push	eax
		push	1
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jns	loc_10016580
		jmp	loc_100166B6
; ---------------------------------------------------------------------------

loc_10016610:				; CODE XREF: sub_10016330+2BFj
		lea	eax, [esp+80h+var_50]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001662B
		mov	esi, 0FFFFFFFDh
		jmp	loc_100166B6
; ---------------------------------------------------------------------------

loc_1001662B:				; CODE XREF: sub_10016330+2EFj
		push	eax
		lea	eax, [ebx+4]
		push	eax
		push	[esp+88h+var_68]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+8]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10016648
		lea	esi, [eax-2]
		jmp	short loc_100166B6
; ---------------------------------------------------------------------------

loc_10016648:				; CODE XREF: sub_10016330+311j
		push	dword ptr [ebx+0Ch]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100166B6
		lea	eax, [esp+80h+var_60]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_10016677
		mov	esi, 0FFFFFFFDh
		jmp	short loc_100166B6
; ---------------------------------------------------------------------------

loc_10016677:				; CODE XREF: sub_10016330+33Ej
		push	eax
		lea	eax, [ebx+10h]
		push	eax
		push	[esp+88h+var_68]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+14h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10016694
		lea	esi, [eax-2]
		jmp	short loc_100166B6
; ---------------------------------------------------------------------------

loc_10016694:				; CODE XREF: sub_10016330+35Dj
		push	dword ptr [ebx+18h]
		push	eax
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100166B6
		mov	eax, [esp+80h+arg_4]
		xor	esi, esi
		mov	[eax], ebx

loc_100166B6:				; CODE XREF: sub_10016330+C0j
					; sub_10016330+D7j ...
		lea	eax, [esp+80h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+84h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+8Ch+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+90h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+94h+var_20]
		push	eax
		call	sub_10028F00
		mov	eax, [esp+98h+var_70]
		add	esp, 18h
		test	eax, eax
		jz	short loc_10016707
		push	edi
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_10016707:				; CODE XREF: sub_10016330+3CBj
		mov	eax, [esp+80h+var_6C]
		test	eax, eax
		jz	short loc_10016719
		push	edi
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_10016719:				; CODE XREF: sub_10016330+3DDj
		test	esi, esi
		jz	loc_100167D4
		cmp	esi, 0FFFFFFFCh
		jz	loc_100167AC
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10016784
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001675C
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		push	1
		push	[esp+84h+var_68]
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_1001675C:				; CODE XREF: sub_10016330+402j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		push	1
		push	[esp+84h+var_68]
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_10016784:				; CODE XREF: sub_10016330+3FDj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		push	1
		push	[esp+84h+var_68]
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_100167AC:				; CODE XREF: sub_10016330+3F4j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		push	1
		push	[esp+84h+var_68]
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_100167D4:				; CODE XREF: sub_10016330+3EBj
		test	ebp, ebp
		jz	short loc_100167E6
		push	1
		push	[esp+84h+var_68]
		call	PORT_FreeArena_Util
		add	esp, 8

loc_100167E6:				; CODE XREF: sub_10016330+4A6j
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_100167F0:				; CODE XREF: sub_10016330+1Fj
					; sub_10016330+2Bj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		add	esp, 70h
		retn
sub_10016330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10016810	proc near		; DATA XREF: .rdata:1003E250o

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 40h
		push	ebp
		xor	ebp, ebp
		cmp	[esp+44h+arg_0], ebp
		jz	loc_10016B29
		cmp	[esp+44h+arg_4], ebp
		jz	loc_10016B29
		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_10016854
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10016854:				; CODE XREF: sub_10016810+2Cj
		push	edi
		push	34h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_10016885
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10016885:				; CODE XREF: sub_10016810+54j
		mov	[edi], ebx
		lea	eax, [esp+4Ch+var_10]
		push	esi
		push	eax
		mov	[esp+54h+var_4], ebp
		mov	[esp+54h+var_34], ebp
		mov	[esp+54h+var_24], ebp
		mov	[esp+54h+var_14], ebp
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10016A3A
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10016A3A
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10016A3A
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10016A3A
		mov	eax, [esp+50h+arg_0]
		add	eax, 4
		push	eax
		lea	eax, [edi+4]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	loc_10016A3A
		push	dword ptr [edi+0Ch]
		lea	eax, [esp+54h+var_30]
		push	dword ptr [edi+8]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10016A3A
		mov	eax, [esp+50h+arg_0]
		add	eax, 10h
		push	eax
		lea	eax, [edi+10h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	loc_10016A3A
		push	dword ptr [edi+18h]
		lea	eax, [esp+54h+var_10]
		push	dword ptr [edi+14h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10016A3A
		mov	eax, [esp+50h+arg_0]
		push	dword ptr [eax+0Ch]
		call	sub_100170F0
		push	eax
		lea	eax, [edi+28h]
		push	eax
		push	ebx
		call	SECITEM_AllocItem_Util
		push	dword ptr [edi+30h] ; size_t
		push	dword ptr [edi+2Ch] ; void *
		call	sub_1000C220
		push	dword ptr [edi+30h]
		lea	eax, [esp+6Ch+var_40]
		push	dword ptr [edi+2Ch]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 24h
		test	esi, esi
		js	loc_10016A3A
		lea	eax, [esp+50h+var_40]
		push	eax
		lea	eax, [esp+54h+var_30]
		push	eax
		lea	eax, [esp+58h+var_40]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10016A3A
		lea	eax, [esp+50h+var_20]
		push	eax
		lea	eax, [esp+54h+var_30]
		push	eax
		lea	eax, [esp+58h+var_40]
		push	eax
		lea	eax, [esp+5Ch+var_10]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10016A3A
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_10016A00
		lea	esi, [ebp-3]
		jmp	short loc_10016A3A
; ---------------------------------------------------------------------------

loc_10016A00:				; CODE XREF: sub_10016810+1E9j
		push	eax
		lea	eax, [edi+1Ch]
		push	eax
		push	dword ptr [edi]
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+20h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10016A1B
		lea	esi, [eax-2]
		jmp	short loc_10016A3A
; ---------------------------------------------------------------------------

loc_10016A1B:				; CODE XREF: sub_10016810+204j
		push	dword ptr [edi+24h]
		push	eax
		lea	eax, [esp+58h+var_20]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10016A3A
		mov	eax, [esp+50h+arg_4]
		xor	esi, esi
		mov	[eax], edi

loc_10016A3A:				; CODE XREF: sub_10016810+99j
					; sub_10016810+B0j ...
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+58h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		test	esi, esi
		jz	loc_10016B10
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10016AEB
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10016AC6
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10016AA1
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10016AA1:				; CODE XREF: sub_10016810+26Aj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10016AC6:				; CODE XREF: sub_10016810+265j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10016AEB:				; CODE XREF: sub_10016810+260j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10016B10:				; CODE XREF: sub_10016810+257j
		test	ebp, ebp
		jz	short loc_10016B1F
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8

loc_10016B1F:				; CODE XREF: sub_10016810+302j
		pop	esi
		pop	edi
		pop	ebx
		mov	eax, ebp
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10016B29:				; CODE XREF: sub_10016810+Aj
					; sub_10016810+14j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
sub_10016810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10016B40	proc near		; DATA XREF: .rdata:1003E258o

var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 84h
		push	ebp
		push	esi
		xor	esi, esi
		xor	ebp, ebp
		push	edi
		cmp	[esp+90h+arg_0], esi
		jz	loc_10016EE0
		cmp	[esp+90h+arg_4], esi
		jz	loc_10016EE0
		cmp	[esp+90h+arg_8], esi
		jz	loc_10016EE0
		cmp	[esp+90h+arg_C], esi
		jz	loc_10016EE0
		cmp	[esp+90h+arg_10], esi
		jz	loc_10016EE0
		mov	edi, [esp+90h+arg_14]
		test	edi, edi
		jz	loc_10016EE0
		xor	eax, eax
		mov	[edi], eax
		mov	[edi+4], eax
		mov	[edi+8], eax
		mov	[esp+90h+var_74], eax
		mov	[esp+90h+var_34], eax
		mov	[esp+90h+var_54], eax
		mov	[esp+90h+var_14], eax
		mov	[esp+90h+var_44], eax
		mov	[esp+90h+var_24], eax
		mov	[esp+90h+var_4], eax
		mov	[esp+90h+var_64], eax
		lea	eax, [esp+90h+var_80]
		push	ebx
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_40]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_60]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_20]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_50]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_30]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_70]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10016E29
		mov	eax, [esp+94h+arg_0]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+9Ch+var_80]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016E29
		mov	eax, [esp+94h+arg_4]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+9Ch+var_40]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016E29
		mov	eax, [esp+94h+arg_8]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+9Ch+var_60]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016E29
		mov	eax, [esp+94h+arg_C]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+9Ch+var_20]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016E29
		mov	eax, [esp+94h+arg_10]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+9Ch+var_50]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_30]
		push	eax
		lea	eax, [esp+98h+var_80]
		push	eax
		lea	eax, [esp+9Ch+var_20]
		push	eax
		lea	eax, [esp+0A0h+var_40]
		push	eax
		call	sub_10026B80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_10]
		push	eax
		lea	eax, [esp+98h+var_80]
		push	eax
		lea	eax, [esp+9Ch+var_50]
		push	eax
		lea	eax, [esp+0A0h+var_60]
		push	eax
		call	sub_10026B80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10016E29
		lea	eax, [esp+94h+var_70]
		push	eax
		lea	eax, [esp+98h+var_80]
		push	eax
		lea	eax, [esp+9Ch+var_10]
		push	eax
		lea	eax, [esp+0A0h+var_30]
		push	eax
		call	sub_10028EB0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_10016E29
		lea	eax, [esp+94h+var_70]
		push	eax
		call	sub_1002A950
		mov	ebp, eax
		push	ebp
		call	PORT_Alloc_Util
		mov	esi, eax
		lea	eax, [esp+9Ch+var_70]
		push	ebp
		push	esi
		push	eax
		mov	[esp+0A8h+var_84], esi
		call	sub_1002A820
		xor	ebx, ebx
		test	eax, eax
		push	80h
		setnle	bl
		push	edi
		dec	ebx
		push	0
		and	ebx, eax
		call	SECITEM_AllocItem_Util
		push	dword ptr [edi+8] ; size_t
		push	0		; int
		push	dword ptr [edi+4] ; void *
		call	memset
		add	esp, 2Ch
		cmp	ebp, 80h
		jb	short loc_10016E16
		mov	edi, [edi+4]
		add	esi, 0FFFFFF80h
		add	esi, ebp
		mov	ecx, 20h
		rep movsd
		mov	esi, [esp+94h+var_84]
		jmp	short loc_10016E29
; ---------------------------------------------------------------------------

loc_10016E16:				; CODE XREF: sub_10016B40+2BFj
		mov	eax, [edi+4]
		push	ebp		; size_t
		sub	eax, ebp
		sub	eax, 0FFFFFF80h
		push	esi		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_10016E29:				; CODE XREF: sub_10016B40+9Cj
					; sub_10016B40+B3j ...
		lea	eax, [esp+94h+var_80]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+98h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+9Ch+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A0h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A4h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A8h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0ACh+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B0h+var_70]
		push	eax
		call	sub_10028F00
		add	esp, 20h
		test	esi, esi
		jz	short loc_10016E90
		push	ebp
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8

loc_10016E90:				; CODE XREF: sub_10016B40+344j
		test	ebx, ebx
		jz	short loc_10016ED3
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_10016EB8
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_10016EB1
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_10016EAA
		push	0FFFFE001h
		jmp	short loc_10016EBD
; ---------------------------------------------------------------------------

loc_10016EAA:				; CODE XREF: sub_10016B40+361j
		push	0FFFFE013h
		jmp	short loc_10016EBD
; ---------------------------------------------------------------------------

loc_10016EB1:				; CODE XREF: sub_10016B40+35Cj
		push	0FFFFE002h
		jmp	short loc_10016EBD
; ---------------------------------------------------------------------------

loc_10016EB8:				; CODE XREF: sub_10016B40+357j
		push	0FFFFE005h

loc_10016EBD:				; CODE XREF: sub_10016B40+368j
					; sub_10016B40+36Fj ...
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 84h
		retn
; ---------------------------------------------------------------------------

loc_10016ED3:				; CODE XREF: sub_10016B40+352j
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 84h
		retn
; ---------------------------------------------------------------------------

loc_10016EE0:				; CODE XREF: sub_10016B40+14j
					; sub_10016B40+21j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 84h
		retn
sub_10016B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10016F00	proc near		; DATA XREF: .rdata:1003E25Co

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 40h
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+4Ch+arg_0]
		test	edi, edi
		jz	loc_100170D5
		mov	ebx, [esp+4Ch+arg_4]
		test	ebx, ebx
		jz	loc_100170D5
		mov	ebp, [esp+4Ch+arg_8]
		test	ebp, ebp
		jz	loc_100170D5
		lea	eax, [esp+4Ch+var_40]
		mov	[esp+4Ch+var_34], 0
		push	esi
		push	eax
		mov	[esp+54h+var_24], 0
		mov	[esp+54h+var_14], 0
		mov	[esp+54h+var_4], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017027
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017027
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017027
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017027
		push	dword ptr [ebx+8]
		lea	eax, [esp+54h+var_40]
		push	dword ptr [ebx+4]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10017027
		push	dword ptr [ebp+8]
		lea	eax, [esp+54h+var_30]
		push	dword ptr [ebp+4]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10017027
		push	dword ptr [edi+8]
		lea	eax, [esp+54h+var_20]
		push	dword ptr [edi+4]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10017027
		lea	eax, [esp+50h+var_10]
		push	eax
		lea	eax, [esp+54h+var_40]
		push	eax
		lea	eax, [esp+58h+var_30]
		push	eax
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10017027
		lea	eax, [esp+50h+var_10]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		mov	ebx, eax
		jmp	short loc_1001702C
; ---------------------------------------------------------------------------

loc_10017027:				; CODE XREF: sub_10016F00+5Cj
					; sub_10016F00+73j ...
		mov	ebx, 1

loc_1001702C:				; CODE XREF: sub_10016F00+125j
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+54h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+58h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+5Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		test	esi, esi
		jz	short loc_100170C6
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100170AF
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10017098
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10017081
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10017081:				; CODE XREF: sub_10016F00+168j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10017098:				; CODE XREF: sub_10016F00+163j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100170AF:				; CODE XREF: sub_10016F00+15Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100170C6:				; CODE XREF: sub_10016F00+159j
		pop	esi
		xor	eax, eax
		test	ebx, ebx
		pop	edi
		pop	ebp
		setz	al
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100170D5:				; CODE XREF: sub_10016F00+Cj
					; sub_10016F00+18j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 40h
		retn
sub_10016F00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100170F0	proc near		; CODE XREF: sub_10016810+163p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 780h
		jb	short loc_10017101
		mov	eax, 40h
		retn
; ---------------------------------------------------------------------------

loc_10017101:				; CODE XREF: sub_100170F0+9j
		cmp	eax, 3C0h
		jb	short loc_1001710E
		mov	eax, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001710E:				; CODE XREF: sub_100170F0+16j
		cmp	eax, 180h
		jb	short loc_1001711B
		mov	eax, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001711B:				; CODE XREF: sub_100170F0+23j
		cmp	eax, 100h
		sbb	eax, eax
		and	eax, 0FFFFFFF8h
		add	eax, 1Ch
		retn
sub_100170F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017130	proc near		; DATA XREF: .rdata:1003E3FCo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		push	ebp
		push	esi
		xor	esi, esi
		mov	[esp+34h+var_2C], 0
		push	edi
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_24], 0
		cmp	[esp+38h+arg_0], esi
		jz	loc_100172FE
		mov	ebp, [esp+38h+arg_4]
		test	ebp, ebp
		jz	loc_100172FE
		cmp	[esp+38h+arg_8], esi
		jz	loc_100172FE
		mov	edi, [esp+38h+arg_10]
		test	edi, edi
		jz	loc_100172FE
		xor	eax, eax
		mov	[esp+38h+var_14], esi
		mov	[edi], eax
		mov	[edi+4], eax
		push	ebx
		mov	[edi+8], eax
		mov	ebx, [ebp+8]
		add	ebx, 7
		sar	ebx, 3
		lea	eax, ds:1[ebx*2]
		push	eax
		mov	[esp+40h+var_24], eax
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esp+3Ch+var_28], eax
		test	eax, eax
		jz	loc_10017279
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017279
		mov	eax, [esp+3Ch+arg_8]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10017279
		cmp	[esp+3Ch+arg_C], 0
		jz	short loc_1001723E
		cmp	dword ptr [ebp+64h], 1
		jz	short loc_1001723E
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_4], 0
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_10017279
		push	dword ptr [ebp+64h]
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_1002A0D0
		lea	eax, [esp+44h+var_20]
		push	eax
		lea	eax, [esp+48h+var_10]
		push	eax
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	short loc_10017279

loc_1001723E:				; CODE XREF: sub_10017130+C1j
					; sub_10017130+C7j
		lea	eax, [esp+3Ch+var_2C]
		push	eax
		push	[esp+40h+arg_0]
		lea	eax, [esp+44h+var_20]
		push	eax
		push	0
		push	ebp
		call	sub_10018500
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10017279
		lea	eax, [esp+3Ch+var_2C]
		push	eax
		call	sub_100184D0
		add	esp, 4
		test	eax, eax
		jz	short loc_100172A7
		push	0FFFFE00Eh
		call	PORT_SetError_Util
		add	esp, 4

loc_10017279:				; CODE XREF: sub_10017130+7Ej
					; sub_10017130+95j ...
		mov	ebx, [esp+3Ch+var_28]
		or	ebp, 0FFFFFFFFh

loc_10017280:				; CODE XREF: sub_10017130+196j
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 4
		test	esi, esi
		jz	short loc_100172E3
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100172D6
		cmp	esi, 0FFFFFFFDh
		jz	short loc_100172CF
		cmp	esi, 0FFFFFFFEh
		jz	short loc_100172C8
		push	0FFFFE001h
		jmp	short loc_100172DB
; ---------------------------------------------------------------------------

loc_100172A7:				; CODE XREF: sub_10017130+13Aj
		push	ebx
		push	edi
		push	0
		call	SECITEM_AllocItem_Util
		push	ebx		; size_t
		mov	ebx, [esp+4Ch+var_28]
		lea	eax, [ebx+1]
		push	eax		; void *
		push	dword ptr [edi+4] ; void *
		call	memcpy
		add	esp, 18h
		xor	ebp, ebp
		jmp	short loc_10017280
; ---------------------------------------------------------------------------

loc_100172C8:				; CODE XREF: sub_10017130+16Ej
		push	0FFFFE013h
		jmp	short loc_100172DB
; ---------------------------------------------------------------------------

loc_100172CF:				; CODE XREF: sub_10017130+169j
		push	0FFFFE002h
		jmp	short loc_100172DB
; ---------------------------------------------------------------------------

loc_100172D6:				; CODE XREF: sub_10017130+164j
		push	0FFFFE005h

loc_100172DB:				; CODE XREF: sub_10017130+175j
					; sub_10017130+19Dj ...
		call	PORT_SetError_Util
		add	esp, 4

loc_100172E3:				; CODE XREF: sub_10017130+15Fj
		test	ebx, ebx
		jz	short loc_100172F4
		push	[esp+3Ch+var_24]
		push	ebx
		call	PORT_ZFree_Util
		add	esp, 8

loc_100172F4:				; CODE XREF: sub_10017130+1B5j
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_100172FE:				; CODE XREF: sub_10017130+24j
					; sub_10017130+30j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 2Ch
		retn
sub_10017130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017320	proc near		; DATA XREF: .rdata:1003E400o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		or	edi, 0FFFFFFFFh
		test	esi, esi
		jnz	short loc_1001733F
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001733F:				; CODE XREF: sub_10017320+Bj
		push	ebx
		mov	ebx, [esi+60h]
		push	ebp
		push	ebx		; size_t
		push	dword ptr [esi+5Ch] ; int
		call	sub_10018010
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	short loc_10017372
		push	ebx
		push	ebp
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	esi
		call	sub_10017380
		push	ebx
		push	ebp
		mov	edi, eax
		call	PORT_ZFree_Util
		add	esp, 1Ch

loc_10017372:				; CODE XREF: sub_10017320+34j
		pop	ebp
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_10017320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017380	proc near		; CODE XREF: sub_10017320+41p
					; DATA XREF: .rdata:1003E408o

var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 74h
		push	ebx
		mov	ebx, [esp+78h+arg_0]
		push	ebp
		push	esi
		push	edi
		xor	edi, edi
		xor	ebp, ebp
		mov	[esp+84h+var_6C], edi
		mov	[esp+84h+var_64], edi
		mov	[esp+84h+var_4], edi
		mov	[esp+84h+var_24], edi
		mov	[esp+84h+var_54], edi
		mov	[esp+84h+var_14], edi
		mov	[esp+84h+var_34], edi
		mov	[esp+84h+var_44], edi
		test	ebx, ebx
		jz	loc_10017858
		mov	esi, [esp+84h+arg_4]
		test	esi, esi
		jz	loc_10017858
		cmp	[esp+84h+arg_8], edi
		jz	loc_10017858
		cmp	[esp+84h+arg_C], edi
		jz	loc_10017858
		cmp	[esp+84h+arg_10], edi
		jl	loc_10017858
		mov	ebp, [ebx+8]
		mov	eax, [ebx+60h]
		add	ebp, 7
		sar	ebp, 3
		mov	[esp+84h+var_74], eax
		cmp	[esi+4], edi
		jz	loc_10017848
		add	eax, eax
		cmp	[esi+8], eax
		jnb	loc_100174B5
		push	0FFFFE003h

loc_10017419:				; CODE XREF: sub_10017380+4C3j
					; sub_10017380+4DDj
		call	PORT_SetError_Util
		add	esp, 4

loc_10017421:				; CODE XREF: sub_10017380+146j
					; sub_10017380+15Dj ...
		xor	ebx, ebx

loc_10017423:				; CODE XREF: sub_10017380+2F3j
					; sub_10017380+30Fj ...
		or	esi, 0FFFFFFFFh

loc_10017426:				; CODE XREF: sub_10017380+4B9j
					; sub_10017380+4D3j
		lea	eax, [esp+84h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+88h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+90h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+94h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+98h+var_50]
		push	eax
		call	sub_10028F00
		add	esp, 18h
		test	ebx, ebx
		jz	short loc_1001747A
		lea	eax, ds:1[ebp*2]
		push	eax
		push	ebx
		call	PORT_ZFree_Util
		add	esp, 8

loc_1001747A:				; CODE XREF: sub_10017380+E7j
		test	edi, edi
		jz	loc_100178B3
		cmp	edi, 0FFFFFFFCh
		jz	loc_1001789B
		cmp	edi, 0FFFFFFFDh
		jz	loc_10017883
		cmp	edi, 0FFFFFFFEh
		jz	loc_1001786B
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_100174B5:				; CODE XREF: sub_10017380+8Ej
		lea	eax, [esp+84h+var_10]
		push	eax
		call	sub_100298B0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10017421
		lea	eax, [esp+84h+var_30]
		push	eax
		call	sub_100298B0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10017421
		lea	eax, [esp+84h+var_60]
		push	eax
		call	sub_100298B0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10017421
		lea	eax, [esp+84h+var_20]
		push	eax
		call	sub_100298B0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10017421
		lea	eax, [esp+84h+var_40]
		push	eax
		call	sub_100298B0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10017421
		lea	eax, [esp+84h+var_50]
		push	eax
		call	sub_100298B0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10017421
		push	dword ptr [ebx+60h]
		lea	eax, [esp+88h+var_50]
		push	dword ptr [ebx+5Ch]
		push	eax
		call	sub_10029F90
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017421
		push	dword ptr [ebx+98h]
		lea	eax, [esp+88h+var_30]
		push	dword ptr [ebx+94h]
		push	eax
		call	sub_10029F90
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017421
		push	[esp+84h+arg_10]
		lea	eax, [esp+88h+var_60]
		push	[esp+88h+arg_C]
		push	eax
		call	sub_10029F90
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017421
		lea	eax, [esp+84h+var_60]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jle	loc_1001783E
		lea	eax, [esp+84h+var_50]
		push	eax
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_1001783E
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_10028D40
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017421
		lea	eax, [esp+84h+var_50]
		push	eax
		call	sub_10028CD0
		mov	esi, eax
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_10028CD0
		add	esp, 8
		cmp	eax, esi
		jg	short loc_10017632
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_10028D40
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017421

loc_10017632:				; CODE XREF: sub_10017380+28Fj
		lea	eax, ds:1[ebp*2]
		push	eax
		mov	[esp+88h+var_64], eax
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esp+84h+var_70], eax
		mov	[esp+84h+var_68], eax
		test	eax, eax
		jz	loc_10017862
		lea	eax, [esp+84h+var_6C]
		push	eax
		push	0
		push	0
		lea	eax, [esp+90h+var_60]
		push	eax
		push	ebx
		call	sub_10018500
		mov	ebx, [esp+98h+var_70]
		add	esp, 14h
		test	eax, eax
		jnz	loc_10017423
		push	ebp
		lea	eax, [ebx+1]
		push	eax
		lea	eax, [esp+8Ch+var_10]
		push	eax
		call	sub_10029F90
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017423
		lea	eax, [esp+84h+var_20]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		lea	eax, [esp+8Ch+var_10]
		push	eax
		call	sub_10029A70
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017423
		lea	eax, [esp+84h+var_20]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100176D9
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10017423
; ---------------------------------------------------------------------------

loc_100176D9:				; CODE XREF: sub_10017380+345j
		mov	esi, [esp+84h+arg_8]
		lea	eax, [esp+84h+var_40]
		push	dword ptr [esi+8]
		push	dword ptr [esi+4]
		push	eax
		call	sub_10029F90
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017423
		lea	eax, [esp+84h+var_50]
		push	eax
		call	sub_10028CD0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10017423
		mov	eax, [esi+8]
		shl	eax, 3
		cmp	eax, edi
		jbe	short loc_1001772F
		sub	eax, edi
		push	eax
		lea	eax, [esp+88h+var_40]
		push	eax
		push	eax
		call	sub_10028C10
		add	esp, 0Ch

loc_1001772F:				; CODE XREF: sub_10017380+39Cj
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_100299A0
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017423
		lea	eax, [esp+84h+var_30]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		lea	eax, [esp+8Ch+var_20]
		push	eax
		lea	eax, [esp+90h+var_30]
		push	eax
		call	sub_10029DF0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		js	loc_10017423
		lea	eax, [esp+84h+var_40]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		lea	eax, [esp+8Ch+var_30]
		push	eax
		lea	eax, [esp+90h+var_40]
		push	eax
		call	sub_10028EB0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		js	loc_10017423
		lea	eax, [esp+84h+var_40]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		lea	eax, [esp+8Ch+var_60]
		push	eax
		lea	eax, [esp+90h+var_40]
		push	eax
		call	sub_10029DF0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		js	loc_10017423
		lea	eax, [esp+84h+var_40]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100177E5
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10017423
; ---------------------------------------------------------------------------

loc_100177E5:				; CODE XREF: sub_10017380+451j
		mov	esi, [esp+84h+arg_4]
		lea	eax, [esp+84h+var_20]
		push	[esp+84h+var_74]
		push	dword ptr [esi+4]
		push	eax
		call	sub_1002A760
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017423
		mov	ecx, [esp+84h+var_74]
		mov	eax, [esi+4]
		push	ecx
		add	eax, ecx
		push	eax
		lea	eax, [esp+8Ch+var_40]
		push	eax
		call	sub_1002A760
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10017423
		mov	eax, [esp+84h+var_74]
		add	eax, eax
		mov	[esi+8], eax
		xor	esi, esi
		xor	edi, edi
		jmp	loc_10017426
; ---------------------------------------------------------------------------

loc_1001783E:				; CODE XREF: sub_10017380+233j
					; sub_10017380+24Dj
		push	0FFFFE03Fh
		jmp	loc_10017419
; ---------------------------------------------------------------------------

loc_10017848:				; CODE XREF: sub_10017380+83j
		add	eax, eax
		xor	ebx, ebx
		mov	[esi+8], eax
		xor	esi, esi
		xor	edi, edi
		jmp	loc_10017426
; ---------------------------------------------------------------------------

loc_10017858:				; CODE XREF: sub_10017380+34j
					; sub_10017380+43j ...
		push	0FFFFE005h
		jmp	loc_10017419
; ---------------------------------------------------------------------------

loc_10017862:				; CODE XREF: sub_10017380+2D0j
		mov	ebx, [esp+84h+var_70]
		jmp	loc_10017423
; ---------------------------------------------------------------------------

loc_1001786B:				; CODE XREF: sub_10017380+117j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_10017883:				; CODE XREF: sub_10017380+10Ej
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_1001789B:				; CODE XREF: sub_10017380+105j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_100178B3:				; CODE XREF: sub_10017380+FCj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 74h
		retn
sub_10017380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100178C0	proc near		; DATA XREF: .rdata:1003E404o

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 90h
		push	ebx
		push	ebp
		mov	ebp, [esp+98h+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		or	edi, 0FFFFFFFFh
		mov	[esp+0A0h+var_90], esi
		mov	[esp+0A0h+var_8C], esi
		mov	[esp+0A0h+var_88], esi
		mov	[esp+0A0h+var_58], esi
		mov	[esp+0A0h+var_44], esi
		mov	[esp+0A0h+var_34], esi
		mov	[esp+0A0h+var_68], esi
		mov	[esp+0A0h+var_14], esi
		mov	[esp+0A0h+var_24], esi
		mov	[esp+0A0h+var_4], esi
		mov	[esp+0A0h+var_78], esi
		test	ebp, ebp
		jz	loc_10017C7B
		mov	eax, [esp+0A0h+arg_4]
		test	eax, eax
		jz	loc_10017C7B
		cmp	[esp+0A0h+arg_8], esi
		jz	loc_10017C7B
		mov	ecx, [ebp+8]
		mov	ebx, [eax+8]
		add	ecx, 7
		sar	ecx, 3
		mov	[esp+0A0h+var_54], ecx
		test	ebx, ebx
		jz	loc_10017C74
		test	bl, 1
		jnz	loc_10017C74
		mov	eax, [ebp+60h]
		add	eax, eax
		cmp	ebx, eax
		ja	loc_10017C74
		lea	eax, ds:1[ecx*2]
		shr	ebx, 1
		push	eax
		lea	eax, [esp+0A4h+var_90]
		push	eax
		push	esi
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	[esp+0A0h+var_8C], esi
		jz	loc_10017C88
		lea	eax, [esp+0A0h+var_64]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_74]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_84]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		mov	eax, [esp+0A0h+arg_4]
		push	ebx
		push	dword ptr [eax+4]
		lea	eax, [esp+0A8h+var_64]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10017C88
		mov	eax, [esp+0A0h+arg_4]
		push	ebx
		mov	eax, [eax+4]
		add	eax, ebx
		push	eax
		lea	eax, [esp+0A8h+var_50]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10017C88
		push	dword ptr [ebp+60h]
		lea	eax, [esp+0A4h+var_84]
		push	dword ptr [ebp+5Ch]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_64]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jle	loc_10017C6D
		lea	eax, [esp+0A0h+var_50]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jle	loc_10017C6D
		lea	eax, [esp+0A0h+var_84]
		push	eax
		lea	eax, [esp+0A4h+var_64]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_10017C6D
		lea	eax, [esp+0A0h+var_84]
		push	eax
		lea	eax, [esp+0A4h+var_50]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_10017C6D
		lea	eax, [esp+0A0h+var_40]
		push	eax
		lea	eax, [esp+0A4h+var_84]
		push	eax
		lea	eax, [esp+0A8h+var_50]
		push	eax
		call	sub_100299A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10017C88
		mov	ebx, [esp+0A0h+arg_8]
		lea	eax, [esp+0A0h+var_74]
		push	dword ptr [ebx+8]
		push	dword ptr [ebx+4]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_84]
		push	eax
		call	sub_10028CD0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017C88
		mov	eax, [ebx+8]
		shl	eax, 3
		cmp	eax, esi
		jbe	short loc_10017B73
		sub	eax, esi
		push	eax
		lea	eax, [esp+0A4h+var_74]
		push	eax
		push	eax
		call	sub_10028C10
		add	esp, 0Ch

loc_10017B73:				; CODE XREF: sub_100178C0+2A0j
		lea	eax, [esp+0A0h+var_74]
		push	eax
		lea	eax, [esp+0A4h+var_84]
		push	eax
		lea	eax, [esp+0A8h+var_40]
		push	eax
		lea	eax, [esp+0ACh+var_74]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_20]
		push	eax
		lea	eax, [esp+0A4h+var_84]
		push	eax
		lea	eax, [esp+0A8h+var_40]
		push	eax
		lea	eax, [esp+0ACh+var_64]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10017C88
		lea	eax, [esp+0A0h+var_90]
		push	eax
		lea	eax, [ebp+84h]
		push	eax
		lea	eax, [esp+0A8h+var_20]
		push	eax
		lea	eax, [esp+0ACh+var_74]
		push	eax
		push	ebp
		call	sub_10018500
		add	esp, 14h
		test	eax, eax
		jz	short loc_10017BF0
		or	edi, 0FFFFFFFFh
		jmp	loc_10017C88
; ---------------------------------------------------------------------------

loc_10017BF0:				; CODE XREF: sub_100178C0+326j
		lea	eax, [esp+0A0h+var_90]
		push	eax
		call	sub_100184D0
		add	esp, 4
		test	eax, eax
		jz	short loc_10017C13

loc_10017C01:				; CODE XREF: sub_100178C0+3A7j
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		or	edi, 0FFFFFFFFh
		jmp	short loc_10017C88
; ---------------------------------------------------------------------------

loc_10017C13:				; CODE XREF: sub_100178C0+33Fj
		mov	eax, [esp+0A0h+var_8C]
		push	[esp+0A0h+var_54]
		inc	eax
		push	eax
		lea	eax, [esp+0A8h+var_30]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10017C88
		lea	eax, [esp+0A0h+var_10]
		push	eax
		lea	eax, [esp+0A4h+var_84]
		push	eax
		lea	eax, [esp+0A8h+var_30]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10017C88
		lea	eax, [esp+0A0h+var_64]
		push	eax
		lea	eax, [esp+0A4h+var_10]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jnz	short loc_10017C01
		xor	edi, edi
		jmp	short loc_10017C88
; ---------------------------------------------------------------------------

loc_10017C6D:				; CODE XREF: sub_100178C0+1EDj
					; sub_100178C0+202j ...
		push	0FFFFE00Ah
		jmp	short loc_10017C80
; ---------------------------------------------------------------------------

loc_10017C74:				; CODE XREF: sub_100178C0+7Ej
					; sub_100178C0+87j ...
		push	0FFFFE004h
		jmp	short loc_10017C80
; ---------------------------------------------------------------------------

loc_10017C7B:				; CODE XREF: sub_100178C0+4Aj
					; sub_100178C0+59j ...
		push	0FFFFE005h

loc_10017C80:				; CODE XREF: sub_100178C0+3B2j
					; sub_100178C0+3B9j
		call	PORT_SetError_Util
		add	esp, 4

loc_10017C88:				; CODE XREF: sub_100178C0+B6j
					; sub_100178C0+CDj ...
		lea	eax, [esp+0A0h+var_64]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A4h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A8h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0ACh+var_74]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B0h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B4h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B8h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0BCh+var_84]
		push	eax
		call	sub_10028F00
		add	esp, 20h
		cmp	[esp+0A0h+var_8C], 0
		jz	short loc_10017CFA
		lea	eax, [esp+0A0h+var_90]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_10017CFA:				; CODE XREF: sub_100178C0+429j
		test	esi, esi
		jz	short loc_10017D79
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10017D5E
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10017D43
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10017D28
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_10017D28:				; CODE XREF: sub_100178C0+44Bj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_10017D43:				; CODE XREF: sub_100178C0+446j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_10017D5E:				; CODE XREF: sub_100178C0+441j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_10017D79:				; CODE XREF: sub_100178C0+43Cj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 90h
		retn
sub_100178C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10017D90(size_t, int)
sub_10017D90	proc near		; DATA XREF: .rdata:1003E3F0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		or	edi, 0FFFFFFFFh
		test	esi, esi
		jnz	short loc_10017DAF
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10017DAF:				; CODE XREF: sub_10017D90+Bj
		push	ebx
		mov	ebx, [esi+60h]
		push	ebp
		push	ebx		; size_t
		push	dword ptr [esi+5Ch] ; int
		call	sub_10018010
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	short loc_10017DDE
		push	ebx		; size_t
		push	ebp		; void *
		push	[esp+18h+arg_4]	; int
		push	esi		; size_t
		call	sub_10018210
		push	ebx
		push	ebp
		mov	edi, eax
		call	PORT_ZFree_Util
		add	esp, 18h

loc_10017DDE:				; CODE XREF: sub_10017D90+34j
		pop	ebp
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_10017D90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_10017DF0(size_t, int,	void *,	size_t)
sub_10017DF0	proc near		; DATA XREF: .rdata:1003E3F4o
		jmp	sub_10018210
sub_10017DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017E00	proc near		; DATA XREF: .rdata:1003E3F8o

var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 24h
		push	ebx
		push	ebp
		mov	ebp, [esp+2Ch+arg_0]
		or	ebx, 0FFFFFFFFh
		mov	[esp+2Ch+var_24], 0
		test	ebp, ebp
		jz	loc_10017FEF
		mov	ecx, [esp+2Ch+arg_4]
		test	ecx, ecx
		jz	loc_10017FEF
		mov	eax, [ecx+4]
		push	edi
		mov	edi, [ebp+8]
		add	edi, 7
		sar	edi, 3
		cmp	byte ptr [eax],	4
		jz	short loc_10017E50
		push	0FFFFE08Eh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, ebx
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10017E50:				; CODE XREF: sub_10017E00+38j
		lea	eax, ds:1[edi*2]
		cmp	[ecx+8], eax
		jz	short loc_10017E73
		push	0FFFFE00Eh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10017E73:				; CODE XREF: sub_10017E00+5Aj
		lea	eax, [esp+30h+var_20]
		mov	[esp+30h+var_14], 0
		push	esi
		push	eax
		mov	[esp+38h+var_4], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017F54
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017F54
		mov	eax, [esp+34h+arg_4]
		push	edi
		mov	eax, [eax+4]
		inc	eax
		push	eax
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10017F54
		mov	eax, [esp+34h+arg_4]
		push	edi
		mov	eax, [eax+4]
		inc	eax
		add	eax, edi
		push	eax
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10017F54
		push	dword ptr [ebp+74h]
		call	sub_1002E440
		mov	esi, eax
		add	esp, 4
		mov	[esp+34h+var_24], esi
		test	esi, esi
		jnz	short loc_10017F21
		mov	eax, [ebp+74h]
		test	eax, eax
		jle	short loc_10017F1A
		cmp	eax, 3Ah
		jge	short loc_10017F1A
		mov	esi, 0FFFFFFFBh
		jmp	short loc_10017F54
; ---------------------------------------------------------------------------

loc_10017F1A:				; CODE XREF: sub_10017E00+10Cj
					; sub_10017E00+111j
		mov	esi, 0FFFFFFFCh
		jmp	short loc_10017F54
; ---------------------------------------------------------------------------

loc_10017F21:				; CODE XREF: sub_10017E00+105j
		lea	eax, [esp+34h+var_10]
		push	eax
		lea	eax, [esp+38h+var_20]
		push	eax
		push	esi
		call	sub_1002E590
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jns	short loc_10017F52
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_10017F54
		push	0FFFFE00Eh
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, esi
		xor	esi, esi
		jmp	short loc_10017F54
; ---------------------------------------------------------------------------

loc_10017F52:				; CODE XREF: sub_10017E00+138j
		xor	ebx, ebx

loc_10017F54:				; CODE XREF: sub_10017E00+95j
					; sub_10017E00+ACj ...
		push	[esp+34h+var_24] ; void	*
		call	sub_1002E3C0
		lea	eax, [esp+38h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_10017FE5
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10017FD5
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10017FBB
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10017FA1
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		mov	eax, ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10017FA1:				; CODE XREF: sub_10017E00+185j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		mov	eax, ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10017FBB:				; CODE XREF: sub_10017E00+180j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		mov	eax, ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10017FD5:				; CODE XREF: sub_10017E00+17Bj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh

loc_10017FE5:				; CODE XREF: sub_10017E00+176j
		pop	esi
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10017FEF:				; CODE XREF: sub_10017E00+16j
					; sub_10017E00+22j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
sub_10017E00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10018010(int,	size_t)
sub_10018010	proc near		; CODE XREF: sub_10017320+28p
					; sub_10017D90+28p

var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 34h
		push	ebx
		push	esi
		push	edi
		xor	ebx, ebx
		lea	eax, [esp+40h+var_30]
		push	eax
		xor	edi, edi
		mov	[esp+44h+var_24], ebx
		mov	[esp+44h+var_14], ebx
		mov	[esp+44h+var_4], ebx
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001816E
		lea	eax, [esp+40h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001816E
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001816E
		mov	ebx, [esp+40h+arg_4]
		push	ebp
		lea	ebp, [ebx+ebx]
		push	ebp
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_1001816B
		push	ebp		; size_t
		push	edi		; void *
		call	sub_1000C220
		add	esp, 8
		mov	[esp+44h+var_34], eax
		test	eax, eax
		jnz	loc_10018167
		push	ebp
		lea	eax, [esp+48h+var_30]
		push	edi
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10018161
		push	ebx
		push	[esp+48h+arg_0]
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10018161
		lea	eax, [esp+44h+var_10]
		push	1
		push	eax
		call	sub_1002A110
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10018161
		lea	eax, [esp+44h+var_20]
		push	eax
		lea	eax, [esp+48h+var_10]
		push	eax
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10018161
		lea	eax, [esp+44h+var_30]
		push	eax
		lea	eax, [esp+48h+var_20]
		push	eax
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10018161
		lea	eax, [esp+44h+var_30]
		push	eax
		lea	eax, [esp+48h+var_10]
		push	eax
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10018161
		push	ebx
		lea	eax, [esp+48h+var_30]
		push	edi
		push	eax
		call	sub_1002A760
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10018161
		push	ebx		; size_t
		lea	eax, [edi+ebx]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_10018161:				; CODE XREF: sub_10018010+9Fj
					; sub_10018010+BBj ...
		mov	ebx, [esp+44h+var_34]
		jmp	short loc_1001816D
; ---------------------------------------------------------------------------

loc_10018167:				; CODE XREF: sub_10018010+86j
		mov	ebx, eax
		jmp	short loc_1001816D
; ---------------------------------------------------------------------------

loc_1001816B:				; CODE XREF: sub_10018010+70j
		xor	ebx, ebx

loc_1001816D:				; CODE XREF: sub_10018010+155j
					; sub_10018010+159j
		pop	ebp

loc_1001816E:				; CODE XREF: sub_10018010+27j
					; sub_10018010+3Ej ...
		lea	eax, [esp+40h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+48h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		test	esi, esi
		jns	short loc_100181DE
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100181CF
		cmp	esi, 0FFFFFFFDh
		jz	short loc_100181C0
		cmp	esi, 0FFFFFFFEh
		jz	short loc_100181B1
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_100181E2
; ---------------------------------------------------------------------------

loc_100181B1:				; CODE XREF: sub_10018010+190j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_100181E2
; ---------------------------------------------------------------------------

loc_100181C0:				; CODE XREF: sub_10018010+18Bj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_100181E2
; ---------------------------------------------------------------------------

loc_100181CF:				; CODE XREF: sub_10018010+186j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_100181E2
; ---------------------------------------------------------------------------

loc_100181DE:				; CODE XREF: sub_10018010+181j
		test	ebx, ebx
		jz	short loc_100181F8

loc_100181E2:				; CODE XREF: sub_10018010+19Fj
					; sub_10018010+1AEj ...
		test	edi, edi
		jz	short loc_100181F8
		push	edi
		call	PORT_Free_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_100181F8:				; CODE XREF: sub_10018010+1D0j
					; sub_10018010+1D4j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 34h
		retn
sub_10018010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10018210(size_t, int,	void *,	size_t)
sub_10018210	proc near		; CODE XREF: sub_10017D90+3Dp
					; sub_10017DF0j

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	ebx
		mov	ebx, [esp+14h+arg_0]
		mov	[esp+14h+var_4], 0
		test	ebx, ebx
		jz	loc_100184B4
		cmp	[esp+14h+arg_4], 0
		jz	loc_100184B4
		cmp	[esp+14h+arg_8], 0
		jz	loc_100184B4
		cmp	[esp+14h+arg_C], 0
		jl	loc_100184B4
		push	ebp
		push	800h
		call	PORT_NewArena_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_10018266
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10018266:				; CODE XREF: sub_10018210+4Bj
		push	esi
		push	0A8h
		push	ebp
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10018290
		push	1
		push	ebp
		call	PORT_FreeArena_Util
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10018290:				; CODE XREF: sub_10018210+69j
		push	edi
		push	1
		lea	eax, [esi+9Ch]
		push	eax
		push	ebp
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+0A0h]
		add	esp, 0Ch
		mov	byte ptr [eax],	1
		mov	[esi], ebp
		mov	eax, [ebx+4]
		mov	[esi+4], eax
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [ebx+0Ch]
		mov	[esi+0Ch], eax
		lea	eax, [ebx+10h]
		push	eax
		lea	eax, [esi+10h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001848E
		mov	eax, [ebx+1Ch]
		mov	[esi+1Ch], eax
		mov	eax, [ebx+20h]
		mov	[esi+20h], eax
		mov	eax, [ebx+24h]
		mov	[esi+24h], eax
		lea	eax, [ebx+28h]
		push	eax
		lea	eax, [esi+28h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001848E
		lea	eax, [ebx+34h]
		push	eax
		lea	eax, [esi+34h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001848E
		lea	eax, [ebx+40h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001848E
		lea	eax, [ebx+4Ch]
		push	eax
		lea	eax, [esi+4Ch]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001848E
		lea	eax, [ebx+58h]
		push	eax
		lea	eax, [esi+58h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001848E
		mov	eax, [ebx+64h]
		mov	[esi+64h], eax
		lea	eax, [ebx+68h]
		push	eax
		lea	eax, [esi+68h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001848E
		mov	eax, [ebx+74h]
		mov	[esi+74h], eax
		lea	eax, [ebx+78h]
		push	eax
		lea	eax, [esi+78h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001848E
		mov	eax, [ebx+8]
		lea	ecx, [esi+84h]
		add	eax, 7
		sar	eax, 3
		lea	eax, ds:1[eax*2]
		push	eax
		push	ecx
		push	ebp
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+60h]
		push	eax
		mov	[esp+30h+arg_0], eax
		lea	eax, [esi+90h]
		push	eax
		push	ebp
		call	SECITEM_AllocItem_Util
		mov	eax, [esp+38h+arg_0]
		add	esp, 18h
		mov	ecx, [esp+20h+arg_C]
		cmp	ecx, eax
		jl	short loc_1001840E
		push	eax		; size_t
		mov	eax, [esp+24h+arg_8]
		push	eax		; void *
		push	dword ptr [esi+94h] ; void *
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1001843D
; ---------------------------------------------------------------------------

loc_1001840E:				; CODE XREF: sub_10018210+1E6j
		sub	eax, ecx
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+94h] ; void *
		call	memset
		mov	ecx, [esp+2Ch+arg_C]
		mov	eax, [esp+2Ch+arg_8]
		push	ecx		; size_t
		push	eax		; void *
		mov	eax, [esp+34h+arg_0]
		sub	eax, ecx
		add	eax, [esi+94h]
		push	eax		; void *
		call	memcpy
		add	esp, 18h

loc_1001843D:				; CODE XREF: sub_10018210+1FCj
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		js	short loc_1001848E
		push	[esp+20h+arg_0]
		lea	eax, [esp+24h+var_10]
		push	dword ptr [esi+94h]
		push	eax
		call	sub_10029F90
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1001848E
		lea	eax, [esi+84h]
		push	eax
		push	0
		push	0
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	ebx
		call	sub_10018500
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_1001848E
		mov	eax, [esp+20h+arg_4]
		mov	[eax], esi

loc_1001848E:				; CODE XREF: sub_10018210+C5j
					; sub_10018210+F2j ...
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		test	edi, edi
		jz	short loc_100184AA
		push	1
		push	ebp
		call	PORT_FreeArena_Util
		add	esp, 8

loc_100184AA:				; CODE XREF: sub_10018210+28Dj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100184B4:				; CODE XREF: sub_10018210+12j
					; sub_10018210+1Dj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
sub_10018210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100184D0	proc near		; CODE XREF: sub_10017130+130p
					; sub_100178C0+335p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 1
		mov	ecx, [edx+8]
		cmp	ecx, eax
		jbe	short loc_100184EE
		mov	edx, [edx+4]

loc_100184E3:				; CODE XREF: sub_100184D0+1Cj
		cmp	byte ptr [edx+eax], 0
		jnz	short loc_100184F4
		inc	eax
		cmp	eax, ecx
		jb	short loc_100184E3

loc_100184EE:				; CODE XREF: sub_100184D0+Ej
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_100184F4:				; CODE XREF: sub_100184D0+17j
		xor	eax, eax
		retn
sub_100184D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018500	proc near		; CODE XREF: sub_10017130+11Fp
					; sub_10017380+2E5p ...

var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 0A4h
		push	ebx
		mov	ebx, [esp+0A8h+arg_C]
		push	ebp
		push	edi
		mov	edi, [esp+0B0h+arg_0]
		or	ebp, 0FFFFFFFFh
		mov	edi, [edi+8]
		add	edi, 7
		sar	edi, 3
		test	ebx, ebx
		jz	short loc_10018555
		mov	eax, [ebx+4]
		cmp	byte ptr [eax],	4
		jnz	short loc_1001853B
		lea	eax, ds:1[edi*2]
		cmp	[ebx+8], eax
		jz	short loc_10018555

loc_1001853B:				; CODE XREF: sub_10018500+2Dj
		push	0FFFFE08Eh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0A4h
		retn
; ---------------------------------------------------------------------------

loc_10018555:				; CODE XREF: sub_10018500+25j
					; sub_10018500+39j
		lea	eax, [esp+0B0h+var_80]
		mov	[esp+0B0h+var_74], 0
		push	esi
		push	eax
		mov	[esp+0B8h+var_64], 0
		mov	[esp+0B8h+var_84], 0
		mov	[esp+0B8h+var_94], 0
		mov	[esp+0B8h+var_54], 0
		mov	[esp+0B8h+var_34], 0
		mov	[esp+0B8h+var_14], 0
		mov	[esp+0B8h+var_44], 0
		mov	[esp+0B8h+var_24], 0
		mov	[esp+0B8h+var_4], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_70]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_90]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_A0]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_60]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		lea	eax, [esp+0B4h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100187B9
		mov	ebp, [esp+0B4h+arg_8]
		test	ebp, ebp
		jz	short loc_100186EC
		test	ebx, ebx
		jz	short loc_100186EC
		mov	eax, [ebx+4]
		inc	eax
		push	edi
		push	eax
		lea	eax, [esp+0BCh+var_80]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100187B6
		mov	eax, [ebx+4]
		inc	eax
		add	eax, edi
		push	edi
		push	eax
		lea	eax, [esp+0BCh+var_70]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100187B6

loc_100186EC:				; CODE XREF: sub_10018500+1AAj
					; sub_10018500+1AEj
		mov	eax, [esp+0B4h+arg_0]
		mov	eax, [eax+74h]
		test	eax, eax
		jz	loc_100187B6
		push	eax
		call	sub_1002E440
		add	esp, 4
		mov	[esp+0B4h+var_A4], eax
		test	eax, eax
		jz	loc_100187B1
		test	ebp, ebp
		jz	short loc_10018732
		test	ebx, ebx
		jz	short loc_10018732
		lea	eax, [esp+0B4h+var_A0]
		push	eax
		lea	eax, [esp+0B8h+var_90]
		push	eax
		lea	eax, [esp+0BCh+var_70]
		push	eax
		lea	eax, [esp+0C0h+var_80]
		push	eax
		push	ebp
		jmp	short loc_10018742
; ---------------------------------------------------------------------------

loc_10018732:				; CODE XREF: sub_10018500+215j
					; sub_10018500+219j
		lea	eax, [esp+0B4h+var_A0]
		push	eax
		lea	eax, [esp+0B8h+var_90]
		push	eax
		push	0
		push	0
		push	0

loc_10018742:				; CODE XREF: sub_10018500+230j
		push	[esp+0C8h+arg_4]
		push	[esp+0CCh+var_A4]
		call	sub_1002EB80
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	short loc_100187A8
		mov	ebx, [esp+0B4h+arg_10]
		push	edi
		mov	eax, [ebx+4]
		mov	byte ptr [eax],	4
		mov	eax, [ebx+4]
		inc	eax
		push	eax
		lea	eax, [esp+0BCh+var_90]
		push	eax
		call	sub_1002A760
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100187A8
		mov	eax, [ebx+4]
		inc	eax
		add	eax, edi
		push	edi
		push	eax
		lea	eax, [esp+0BCh+var_A0]
		push	eax
		call	sub_1002A760
		mov	esi, eax
		add	esp, 0Ch
		xor	eax, eax
		test	esi, esi
		setns	al
		lea	ebp, [eax-1]
		mov	eax, [esp+0B4h+var_A4]
		jmp	short loc_100187BB
; ---------------------------------------------------------------------------

loc_100187A8:				; CODE XREF: sub_10018500+259j
					; sub_10018500+27Fj
		mov	eax, [esp+0B4h+var_A4]
		or	ebp, 0FFFFFFFFh
		jmp	short loc_100187BB
; ---------------------------------------------------------------------------

loc_100187B1:				; CODE XREF: sub_10018500+20Dj
		or	ebp, 0FFFFFFFFh
		jmp	short loc_100187BB
; ---------------------------------------------------------------------------

loc_100187B6:				; CODE XREF: sub_10018500+1C7j
					; sub_10018500+1E6j ...
		or	ebp, 0FFFFFFFFh

loc_100187B9:				; CODE XREF: sub_10018500+C3j
					; sub_10018500+DAj ...
		xor	eax, eax

loc_100187BB:				; CODE XREF: sub_10018500+2A6j
					; sub_10018500+2AFj ...
		push	eax		; void *
		call	sub_1002E3C0
		lea	eax, [esp+0B8h+var_80]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0BCh+var_70]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C0h+var_90]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C4h+var_A0]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C8h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0CCh+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D0h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D4h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D8h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0DCh+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 2Ch
		test	esi, esi
		jz	short loc_1001886F
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001885F
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10018858
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10018851
		push	0FFFFE001h
		jmp	short loc_10018864
; ---------------------------------------------------------------------------

loc_10018851:				; CODE XREF: sub_10018500+348j
		push	0FFFFE013h
		jmp	short loc_10018864
; ---------------------------------------------------------------------------

loc_10018858:				; CODE XREF: sub_10018500+343j
		push	0FFFFE002h
		jmp	short loc_10018864
; ---------------------------------------------------------------------------

loc_1001885F:				; CODE XREF: sub_10018500+33Ej
		push	0FFFFE005h

loc_10018864:				; CODE XREF: sub_10018500+34Fj
					; sub_10018500+356j ...
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh

loc_1001886F:				; CODE XREF: sub_10018500+339j
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0A4h
		retn
sub_10018500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018880	proc near		; DATA XREF: .rdata:1003E56Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [esp+8+arg_4]
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		mov	[esi], ebx
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	eax, [edi+8]
		mov	[esi+8], eax
		mov	eax, [edi+0Ch]
		mov	[esi+0Ch], eax
		lea	eax, [edi+10h]
		push	eax
		lea	eax, [esi+10h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10018977
		mov	eax, [edi+1Ch]
		mov	[esi+1Ch], eax
		mov	eax, [edi+20h]
		mov	[esi+20h], eax
		mov	eax, [edi+24h]
		mov	[esi+24h], eax
		lea	eax, [edi+28h]
		push	eax
		lea	eax, [esi+28h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10018977
		lea	eax, [edi+34h]
		push	eax
		lea	eax, [esi+34h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018977
		lea	eax, [edi+40h]
		push	eax
		lea	eax, [esi+40h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018977
		lea	eax, [edi+4Ch]
		push	eax
		lea	eax, [esi+4Ch]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018977
		lea	eax, [edi+58h]
		push	eax
		lea	eax, [esi+58h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018977
		lea	eax, [edi+68h]
		push	eax
		lea	eax, [esi+68h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018977
		mov	eax, [edi+74h]
		mov	[esi+74h], eax
		lea	eax, [edi+78h]
		push	eax
		lea	eax, [esi+78h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018977
		mov	eax, [edi+64h]
		pop	edi
		mov	[esi+64h], eax
		xor	eax, eax
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10018977:				; CODE XREF: sub_10018880+36j
					; sub_10018880+61j ...
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10018880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018980	proc near		; DATA XREF: .rdata:1003E568o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10018999
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10018999:				; CODE XREF: sub_10018980+12j
		push	ebx
		push	84h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_100189DF
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		lea	eax, [ebx+68h]
		push	dword ptr [esi+8]
		push	eax
		push	edi
		call	SECITEM_AllocItem_Util
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [esi+4] ; void *
		push	dword ptr [ebx+6Ch] ; void *
		call	memcpy
		push	ebx
		push	esi
		push	edi
		call	sub_10018A00
		add	esp, 24h
		pop	esi
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100189F0

loc_100189DF:				; CODE XREF: sub_10018980+2Cj
		push	1
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100189F0:				; CODE XREF: sub_10018980+5Dj
		mov	eax, [esp+8+arg_4]
		mov	[eax], ebx
		xor	eax, eax
		pop	ebx
		pop	edi
		retn
sub_10018980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018A00	proc near		; CODE XREF: sub_10018980+51p
					; DATA XREF: .rdata:1003E564o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	ecx, [esp+0Ch+arg_4]
		push	edi
		or	edi, 0FFFFFFFFh
		mov	[esp+10h+var_C], 0
		mov	[esp+10h+var_8], 0
		mov	eax, [ecx+8]
		mov	[esp+10h+var_4], 0
		cmp	eax, 0Ah
		jz	short loc_10018A44
		cmp	eax, 7
		jz	short loc_10018A44
		push	0FFFFE08Dh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, edi
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018A44:				; CODE XREF: sub_10018A00+29j
					; sub_10018A00+2Ej
		mov	ecx, [ecx+4]
		add	eax, 0FFFFFFFEh
		mov	[esp+10h+var_4], eax
		push	ebx
		lea	eax, [ecx+2]
		mov	[esp+14h+var_8], eax
		cmp	byte ptr [ecx],	6
		jnz	loc_10018CE3
		lea	eax, [esp+14h+var_C]
		push	eax
		call	SECOID_FindOIDTag_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	loc_10018CE3
		mov	eax, [esp+14h+var_4]
		mov	ecx, [esp+14h+arg_0]
		push	esi
		mov	esi, [esp+18h+arg_8]
		push	eax
		push	ecx
		mov	[esi], ecx
		mov	dword ptr [esi+64h], 0
		mov	dword ptr [esi+4], 1
		mov	dword ptr [esi+74h], 0
		mov	[esi+80h], eax
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		mov	[esi+7Ch], eax
		test	eax, eax
		jz	loc_10018CC7	; jumptable 10018AD5 default case
		push	[esp+18h+var_4]	; size_t
		push	[esp+1Ch+var_8]	; void *
		push	eax		; void *
		call	memcpy
		add	ebx, 0FFFFFF36h
		add	esp, 0Ch
		cmp	ebx, 39h	; switch 58 cases
		ja	loc_10018CC7	; jumptable 10018AD5 default case
		jmp	ds:off_10018CFC[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10018ADC:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 20
		push	2
		push	15h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018AE6:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 21
		push	2
		push	16h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018AF0:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 22
		push	2
		push	17h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018AFA:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 23
		push	2
		push	18h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B04:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 24
		push	2
		push	19h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B0E:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 25
		push	2
		push	1Ah
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B18:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 26
		push	2
		push	1Bh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B22:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 29
		push	2
		push	1Ch
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B2C:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 30
		push	2
		push	1Dh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B36:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 31
		push	2
		push	1Eh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B40:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 32
		push	2
		push	1Fh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B4A:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 35
		push	2
		push	20h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B54:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 36
		push	2
		push	21h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B5E:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 37
		push	2
		push	22h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B68:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 38
		push	2
		push	23h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B72:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 39
		push	2
		push	24h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B7C:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 40
		push	2
		push	2Fh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B86:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 41
		push	2
		push	30h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B90:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 42
		push	2
		push	31h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018B9A:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 43
		push	2
		push	32h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BA4:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 44
		push	2
		push	6
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BAE:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 45
		push	2
		push	33h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BB8:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 46
		push	2
		push	7
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BC2:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 47
		push	2
		push	34h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BCC:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 48
		push	2
		push	35h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BD6:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 49
		push	2
		push	8
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BE0:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 50
		push	2
		push	9
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BEA:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 51
		push	2
		push	36h
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BF4:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 52
		push	2
		push	0Ah
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018BFE:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 53
		push	2
		push	0Bh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C08:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 54
		push	2
		push	0Ch
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C12:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 55
		push	2
		push	0Dh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C1C:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 56
		push	2
		push	0Eh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C26:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 57
		push	2
		push	0Fh
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C30:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 0
		push	1
		push	1
		jmp	loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C3A:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 1
		push	1
		push	10h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C41:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 2
		push	1
		push	11h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C48:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 3
		push	1
		push	12h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C4F:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 4
		push	1
		push	13h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C56:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 5
		push	1
		push	14h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C5D:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 6
		push	1
		push	3
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C64:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 7
		push	1
		push	25h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C6B:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 8
		push	1
		push	26h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C72:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 9
		push	1
		push	27h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C79:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 10
		push	1
		push	28h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C80:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 11
		push	1
		push	29h
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C87:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 12
		push	1
		push	2Ah
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C8E:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 13
		push	1
		push	2Bh
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C95:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 14
		push	1
		push	2Ch
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018C9C:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 15
		push	1
		push	2Dh
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018CA3:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 16
		push	1
		push	2
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018CAA:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 17
		push	1
		push	2Eh
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018CB1:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 18
		push	1
		push	4
		jmp	short loc_10018CBD
; ---------------------------------------------------------------------------

loc_10018CB8:				; CODE XREF: sub_10018A00+D5j
					; DATA XREF: .text:off_10018CFCo
		push	esi		; jumptable 10018AD5 case 19
		push	1
		push	5

loc_10018CBD:				; CODE XREF: sub_10018A00+E1j
					; sub_10018A00+EBj ...
		call	sub_10018DF0
		mov	edi, eax
		add	esp, 0Ch

loc_10018CC7:				; CODE XREF: sub_10018A00+AFj
					; sub_10018A00+CFj ...
		cmp	dword ptr [esi+64h], 0 ; jumptable 10018AD5 default case
		pop	esi
		jnz	short loc_10018CDB
		push	0FFFFE08Dh
		call	PORT_SetError_Util
		add	esp, 4

loc_10018CDB:				; CODE XREF: sub_10018A00+2CCj
		pop	ebx
		mov	eax, edi
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018CE3:				; CODE XREF: sub_10018A00+59j
					; sub_10018A00+70j
		push	0FFFFE08Dh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		add	esp, 0Ch
		retn
sub_10018A00	endp

; ---------------------------------------------------------------------------
		align 4
off_10018CFC	dd offset loc_10018C30,	offset loc_10018C3A, offset loc_10018C41
					; DATA XREF: sub_10018A00+D5r
		dd offset loc_10018C48,	offset loc_10018C4F, offset loc_10018C56 ; jump	table for switch statement
		dd offset loc_10018C5D,	offset loc_10018C64, offset loc_10018C6B
		dd offset loc_10018C72,	offset loc_10018C79, offset loc_10018C80
		dd offset loc_10018C87,	offset loc_10018C8E, offset loc_10018C95
		dd offset loc_10018C9C,	offset loc_10018CA3, offset loc_10018CAA
		dd offset loc_10018CB1,	offset loc_10018CB8, offset loc_10018ADC
		dd offset loc_10018AE6,	offset loc_10018AF0, offset loc_10018AFA
		dd offset loc_10018B04,	offset loc_10018B0E, offset loc_10018B18
		dd offset loc_10018CC7,	offset loc_10018CC7, offset loc_10018B22
		dd offset loc_10018B2C,	offset loc_10018B36, offset loc_10018B40
		dd offset loc_10018CC7,	offset loc_10018CC7, offset loc_10018B4A
		dd offset loc_10018B54,	offset loc_10018B5E, offset loc_10018B68
		dd offset loc_10018B72,	offset loc_10018B7C, offset loc_10018B86
		dd offset loc_10018B90,	offset loc_10018B9A, offset loc_10018BA4
		dd offset loc_10018BAE,	offset loc_10018BB8, offset loc_10018BC2
		dd offset loc_10018BCC,	offset loc_10018BD6, offset loc_10018BE0
		dd offset loc_10018BEA,	offset loc_10018BF4, offset loc_10018BFE
		dd offset loc_10018C08,	offset loc_10018C12, offset loc_10018C1C
		dd offset loc_10018C26
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018DF0	proc near		; CODE XREF: sub_10018A00:loc_10018CBDp

var_128		= word ptr -128h
var_126		= byte ptr -126h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 128h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+128h+var_4], eax
		push	ebx
		mov	ebx, [esp+12Ch+arg_8]
		push	ebp
		mov	ebp, [esp+130h+arg_0]
		cmp	ebp, 3Ah
		ja	loc_10018F43
		mov	[ebx+74h], ebp
		mov	ebp, dword_1004E000[ebp*4]
		test	ebp, ebp
		jz	loc_10018F43
		mov	eax, [ebp+8]
		mov	[ebx+8], eax
		mov	eax, [esp+130h+arg_4]
		cmp	eax, 1
		mov	[ebx+0Ch], eax
		lea	eax, [ebx+10h]
		push	dword ptr [ebp+0Ch]
		push	eax
		push	dword ptr [ebx]
		call	sub_10018F60
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10018F43
		push	dword ptr [ebp+10h]
		lea	eax, [ebx+28h]
		push	eax
		push	dword ptr [ebx]
		call	sub_10018F60
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10018F43
		push	dword ptr [ebp+14h]
		lea	eax, [ebx+34h]
		push	eax
		push	dword ptr [ebx]
		call	sub_10018F60
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10018F43
		mov	edx, [ebp+18h]
		push	esi
		push	edi
		mov	[esp+138h+var_128], 3430h
		mov	esi, edx
		mov	[esp+138h+var_126], 0

loc_10018EA0:				; CODE XREF: sub_10018DF0+B5j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_10018EA0
		lea	edi, [esp+138h+var_128]
		sub	edx, esi
		dec	edi
		mov	edi, edi

loc_10018EB0:				; CODE XREF: sub_10018DF0+C6j
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_10018EB0
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		mov	edx, [ebp+1Ch]
		and	ecx, 3
		rep movsb
		mov	esi, edx
		jmp	short loc_10018ED0
; ---------------------------------------------------------------------------
		align 10h

loc_10018ED0:				; CODE XREF: sub_10018DF0+DBj
					; sub_10018DF0+E5j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_10018ED0
		lea	edi, [esp+138h+var_128]
		sub	edx, esi
		dec	edi
		mov	edi, edi

loc_10018EE0:				; CODE XREF: sub_10018DF0+F6j
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_10018EE0
		mov	ecx, edx
		lea	eax, [esp+138h+var_128]
		shr	ecx, 2
		rep movsd
		push	eax
		lea	eax, [ebx+4Ch]
		mov	ecx, edx
		push	eax
		push	dword ptr [ebx]
		and	ecx, 3
		rep movsb
		call	sub_10018F60
		add	esp, 0Ch
		pop	edi
		pop	esi
		test	eax, eax
		jz	short loc_10018F43
		push	dword ptr [ebp+20h]
		lea	eax, [ebx+58h]
		push	eax
		push	dword ptr [ebx]
		call	sub_10018F60
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10018F43
		mov	eax, [ebp+24h]
		mov	[ebx+64h], eax
		xor	eax, eax
		pop	ebp
		pop	ebx
		mov	ecx, [esp+128h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 128h
		retn
; ---------------------------------------------------------------------------

loc_10018F43:				; CODE XREF: sub_10018DF0+27j
					; sub_10018DF0+39j ...
		mov	ecx, [esp+130h+var_4]
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 128h
		retn
sub_10018DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018F60	proc near		; CODE XREF: sub_10018DF0+5Bp
					; sub_10018DF0+74p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		mov	ecx, esi
		push	edi
		xor	edi, edi
		xor	ebx, ebx
		lea	edx, [ecx+1]

loc_10018F70:				; CODE XREF: sub_10018F60+15j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10018F70
		sub	ecx, edx
		mov	eax, ecx
		and	eax, 80000001h
		jns	short loc_10018F87
		dec	eax
		or	eax, 0FFFFFFFEh
		inc	eax

loc_10018F87:				; CODE XREF: sub_10018F60+20j
		jz	short loc_10018F8F
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10018F8F:				; CODE XREF: sub_10018F60:loc_10018F87j
		cmp	ecx, 2
		jle	short loc_10018FAA

loc_10018F94:				; CODE XREF: sub_10018F60+48j
		cmp	byte ptr [esi],	30h
		jnz	short loc_10018FAA
		cmp	byte ptr [esi+1], 30h
		jnz	short loc_10018FAA
		sub	ecx, 2
		add	esi, 2
		cmp	ecx, 2
		jg	short loc_10018F94

loc_10018FAA:				; CODE XREF: sub_10018F60+32j
					; sub_10018F60+37j ...
		mov	eax, ecx
		cdq
		push	ebp
		sub	eax, edx
		mov	ebp, eax
		sar	ebp, 1
		push	ebp
		push	[esp+14h+arg_0]
		call	PORT_ArenaAlloc_Util
		mov	ecx, [esp+18h+arg_4]
		add	esp, 8
		mov	[ecx+4], eax
		test	eax, eax
		jz	short loc_1001903A
		mov	[ecx+8], ebp
		cmp	[esi], bl
		jz	short loc_10019033

loc_10018FD3:				; CODE XREF: sub_10018F60+D1j
		mov	al, [edi+esi]
		cmp	al, 30h
		jl	short loc_10018FE6
		cmp	al, 39h
		jg	short loc_10018FE6
		movsx	eax, al
		sub	eax, 30h
		jmp	short loc_10019004
; ---------------------------------------------------------------------------

loc_10018FE6:				; CODE XREF: sub_10018F60+78j
					; sub_10018F60+7Cj
		cmp	al, 61h
		jl	short loc_10018FF6
		cmp	al, 66h
		jg	short loc_10018FF6
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_10019004
; ---------------------------------------------------------------------------

loc_10018FF6:				; CODE XREF: sub_10018F60+88j
					; sub_10018F60+8Cj
		cmp	al, 41h
		jl	short loc_1001903A
		cmp	al, 46h
		jg	short loc_1001903A
		movsx	eax, al
		sub	eax, 37h

loc_10019004:				; CODE XREF: sub_10018F60+84j
					; sub_10018F60+94j
		shl	ebx, 4
		add	ebx, eax
		mov	eax, edi
		and	eax, 80000001h
		jns	short loc_10019017
		dec	eax
		or	eax, 0FFFFFFFEh
		inc	eax

loc_10019017:				; CODE XREF: sub_10018F60+B0j
		jz	short loc_1001902C
		mov	ecx, [ecx+4]
		mov	eax, edi
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[eax+ecx], bl
		xor	ebx, ebx
		mov	ecx, [esp+10h+arg_4]

loc_1001902C:				; CODE XREF: sub_10018F60:loc_10019017j
		inc	edi
		cmp	byte ptr [edi+esi], 0
		jnz	short loc_10018FD3

loc_10019033:				; CODE XREF: sub_10018F60+71j
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, ecx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001903A:				; CODE XREF: sub_10018F60+6Aj
					; sub_10018F60+98j ...
		pop	ebp
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_10018F60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019050	proc near		; CODE XREF: sub_10019F00+47p
					; sub_1001B3B0+197p ...

var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	esi
		push	[esp+8+arg_0]
		call	sub_10008CC0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1001906A
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001906A:				; CODE XREF: sub_10019050+12j
		mov	eax, [esi+4]
		push	edi
		call	eax
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1001907D
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001907D:				; CODE XREF: sub_10019050+24j
		mov	eax, [esi+10h]
		push	edi
		call	eax
		push	[esp+10h+arg_C]
		mov	eax, [esi+14h]
		push	[esp+14h+arg_8]
		push	edi
		call	eax
		push	dword ptr [esi]
		lea	eax, [esp+20h+var_4]
		push	eax
		push	[esp+24h+arg_4]
		mov	eax, [esi+18h]
		push	edi
		call	eax
		mov	eax, [esi+0Ch]
		push	1
		push	edi
		call	eax
		add	esp, 28h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ecx
		retn
sub_10019050	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100190C0	proc near		; CODE XREF: sub_10019410+53Dp
					; sub_1001A810+E8p ...

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_10008CC0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100190D1
		retn
; ---------------------------------------------------------------------------

loc_100190D1:				; CODE XREF: sub_100190C0+Ej
		mov	eax, [eax]
		retn
sub_100190C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100190E0	proc near		; CODE XREF: sub_1001C400+9p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		xor	esi, esi
		test	edx, edx
		jnz	short loc_100190FD

loc_100190EB:				; CODE XREF: sub_100190E0+66j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100190FD:				; CODE XREF: sub_100190E0+9j
		mov	ecx, [edx+8]
		mov	eax, [edx+0Ch]
		test	ecx, ecx
		jnz	short loc_1001910B
		xor	eax, eax
		jmp	short loc_10019116
; ---------------------------------------------------------------------------

loc_1001910B:				; CODE XREF: sub_100190E0+25j
		cmp	eax, 1
		jbe	short loc_10019116
		cmp	byte ptr [ecx],	0
		jnz	short loc_10019116
		dec	eax

loc_10019116:				; CODE XREF: sub_100190E0+29j
					; sub_100190E0+2Ej ...
		lea	ecx, ds:0[eax*8]
		mov	eax, [edx+18h]
		mov	edx, [edx+14h]
		test	edx, edx
		jnz	short loc_1001912B
		xor	eax, eax
		jmp	short loc_10019136
; ---------------------------------------------------------------------------

loc_1001912B:				; CODE XREF: sub_100190E0+45j
		cmp	eax, 1
		jbe	short loc_10019136
		cmp	byte ptr [edx],	0
		jnz	short loc_10019136
		dec	eax

loc_10019136:				; CODE XREF: sub_100190E0+49j
					; sub_100190E0+4Ej ...
		shl	eax, 3
		cmp	ecx, 400h
		jnb	short loc_1001917C
		cmp	eax, 0A0h
		jnz	short loc_100190EB
		cmp	ecx, 200h
		jb	short loc_10019168
		test	cl, 3Fh
		jnz	short loc_10019168
		lea	eax, [ecx-200h]
		cdq
		and	edx, 3Fh
		add	eax, edx
		sar	eax, 6
		test	eax, eax
		jns	short loc_10019188

loc_10019168:				; CODE XREF: sub_100190E0+6Ej
					; sub_100190E0+73j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001917C:				; CODE XREF: sub_100190E0+5Fj
		push	eax
		push	ecx
		call	sub_1001C370
		add	esp, 8
		mov	esi, eax

loc_10019188:				; CODE XREF: sub_100190E0+86j
		mov	eax, esi
		pop	esi
		retn
sub_100190E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019190	proc near		; DATA XREF: .rdata:1003E494o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_100191D4
		mov	eax, [esi]
		push	0
		test	eax, eax
		jz	short loc_100191AC
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100191AC:				; CODE XREF: sub_10019190+Fj
		lea	eax, [esi+4]
		push	eax
		call	SECITEM_FreeItem_Util
		lea	eax, [esi+10h]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		lea	eax, [esi+1Ch]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 1Ch

loc_100191D4:				; CODE XREF: sub_10019190+7j
		pop	esi
		retn
sub_10019190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100191E0	proc near		; DATA XREF: .rdata:1003E498o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10019219
		mov	eax, [esi]
		push	0
		test	eax, eax
		jz	short loc_100191FC
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100191FC:				; CODE XREF: sub_100191E0+Fj
		lea	eax, [esi+8]
		push	eax
		call	SECITEM_FreeItem_Util
		lea	eax, [esi+14h]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 14h

loc_10019219:				; CODE XREF: sub_100191E0+7j
		pop	esi
		retn
sub_100191E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019220	proc near		; CODE XREF: sub_10021660+17Bp

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_10019238
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10019238:				; CODE XREF: sub_10019220+6j
		mov	eax, [ecx+18h]
		mov	ecx, [ecx+14h]
		test	ecx, ecx
		jnz	short loc_10019246
		xor	eax, eax
		jmp	short loc_10019251
; ---------------------------------------------------------------------------

loc_10019246:				; CODE XREF: sub_10019220+20j
		cmp	eax, 1
		jbe	short loc_10019251
		cmp	byte ptr [ecx],	0
		jnz	short loc_10019251
		dec	eax

loc_10019251:				; CODE XREF: sub_10019220+24j
					; sub_10019220+29j ...
		shl	eax, 3
		cmp	eax, 0E0h
		jnb	short loc_10019261
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_10019261:				; CODE XREF: sub_10019220+39j
		cmp	eax, 100h
		jnb	short loc_1001926E
		mov	eax, 7
		retn
; ---------------------------------------------------------------------------

loc_1001926E:				; CODE XREF: sub_10019220+46j
		cmp	eax, 180h
		jnb	short loc_1001927B

__RTC_NumErrors:
		mov	eax, 4
		retn
; ---------------------------------------------------------------------------

loc_1001927B:				; CODE XREF: sub_10019220+53j
		cmp	eax, 200h
		sbb	eax, eax
		add	eax, 6
		retn
sub_10019220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019290	proc near		; CODE XREF: sub_1001C400+35p
					; sub_1001C490+14p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+8]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_1001929F
		retn
; ---------------------------------------------------------------------------

loc_1001929F:				; CODE XREF: sub_10019290+Cj
		cmp	ecx, 1
		jbe	short loc_100192AA
		cmp	byte ptr [eax],	0
		jnz	short loc_100192AA
		dec	ecx

loc_100192AA:				; CODE XREF: sub_10019290+12j
					; sub_10019290+17j
		mov	eax, ecx
		retn
sub_10019290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100192B0	proc near		; DATA XREF: .rdata:1003E33Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		cmp	ecx, 8
		ja	short loc_100192E8
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_100192E8
		mov	edx, [esp+arg_8]
		test	edx, edx
		jz	short loc_100192E8
		push	edx
		push	eax
		add	ecx, 8
		shl	ecx, 6
		mov	eax, ecx
		shr	eax, 3
		push	eax
		push	0
		push	0A0h
		push	ecx
		call	sub_1001BA60
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_100192E8:				; CODE XREF: sub_100192B0+7j
					; sub_100192B0+Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_100192B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019300	proc near		; DATA XREF: .rdata:1003E340o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		cmp	eax, 8
		ja	short loc_10019336
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short loc_10019336
		mov	edx, [esp+arg_C]
		test	edx, edx
		jz	short loc_10019336
		push	edx
		push	ecx
		push	[esp+8+arg_4]
		add	eax, 8
		push	0
		shl	eax, 6
		push	0A0h
		push	eax
		call	sub_1001BA60
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10019336:				; CODE XREF: sub_10019300+7j
					; sub_10019300+Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_10019300	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019350	proc near		; DATA XREF: .rdata:1003E51Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		test	esi, esi
		jnz	short loc_1001939A
		xor	esi, esi
		cmp	edi, 400h
		jz	short loc_10019395
		cmp	edi, 800h
		jz	short loc_1001938E
		cmp	edi, 0C00h
		jz	short loc_10019387
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001939A
; ---------------------------------------------------------------------------

loc_10019387:				; CODE XREF: sub_10019350+26j
		mov	esi, 100h
		jmp	short loc_1001939A
; ---------------------------------------------------------------------------

loc_1001938E:				; CODE XREF: sub_10019350+1Ej
		mov	esi, 0E0h
		jmp	short loc_1001939A
; ---------------------------------------------------------------------------

loc_10019395:				; CODE XREF: sub_10019350+16j
		mov	esi, 0A0h

loc_1001939A:				; CODE XREF: sub_10019350+Cj
					; sub_10019350+35j ...
		mov	eax, [esp+8+arg_8]
		test	eax, eax
		jnz	short loc_100193A7
		mov	eax, esi
		shr	eax, 3

loc_100193A7:				; CODE XREF: sub_10019350+50j
		cmp	edi, 400h
		jz	short loc_100193D7
		cmp	edi, 800h
		jz	short loc_100193C7
		cmp	edi, 0C00h
		jnz	short loc_100193DF
		cmp	esi, 100h
		jmp	short loc_100193DD
; ---------------------------------------------------------------------------

loc_100193C7:				; CODE XREF: sub_10019350+65j
		cmp	esi, 0E0h
		jz	short loc_100193F2
		cmp	esi, 100h
		jmp	short loc_100193DD
; ---------------------------------------------------------------------------

loc_100193D7:				; CODE XREF: sub_10019350+5Dj
		cmp	esi, 0A0h

loc_100193DD:				; CODE XREF: sub_10019350+75j
					; sub_10019350+85j
		jz	short loc_100193F2

loc_100193DF:				; CODE XREF: sub_10019350+6Dj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100193F2:				; CODE XREF: sub_10019350+7Dj
					; sub_10019350:loc_100193DDj
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	eax
		push	2
		push	esi
		push	edi
		call	sub_1001BA60
		add	esp, 18h
		pop	edi
		pop	esi
		retn
sub_10019350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019410	proc near		; DATA XREF: .rdata:1003E344o

var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= byte ptr -0BCh
var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= byte ptr -98h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0D4h
		push	ebx
		mov	ebx, [esp+0D8h+arg_0]
		push	ebp
		xor	ebp, ebp
		mov	[esp+0DCh+var_84], ebp
		mov	[esp+0DCh+var_80], ebp
		mov	[esp+0DCh+var_7C], ebp
		push	edi
		test	ebx, ebx
		jz	loc_10019CD6
		mov	eax, [esp+0E0h+arg_4]
		test	eax, eax
		jz	loc_10019CD6
		mov	edi, [esp+0E0h+arg_8]
		test	edi, edi
		jz	loc_10019CD6
		cmp	[ebx+0Ch], ebp
		jz	loc_10019CD6
		cmp	[ebx+18h], ebp
		jz	loc_10019CD6
		cmp	[eax+10h], ebp
		jz	loc_10019CD6
		cmp	[ebx+24h], ebp
		jnz	short loc_1001947E
		cmp	dword ptr [eax+4], 0FFFFFFFFh
		jz	loc_10019CD6

loc_1001947E:				; CODE XREF: sub_10019410+62j
		lea	eax, [esp+0E0h+var_20]
		mov	[esp+0E0h+var_14], ebp
		push	esi
		push	eax
		mov	[esp+0E8h+var_B0], ebp
		mov	[esp+0E8h+var_A0], ebp
		mov	[esp+0E8h+var_8C], ebp
		mov	[esp+0E8h+var_34], ebp
		mov	[esp+0E8h+var_24], ebp
		mov	[esp+0E8h+var_44], ebp
		mov	[esp+0E8h+var_4], ebp
		mov	[esp+0E8h+var_54], ebp
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_BC]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_AC]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_98]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_60]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019BCA
		mov	[edi], ebp
		lea	eax, [esp+0E4h+var_BC]
		push	dword ptr [ebx+0Ch]
		push	dword ptr [ebx+8]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019BCA
		push	dword ptr [ebx+18h]
		lea	eax, [esp+0E8h+var_AC]
		push	dword ptr [ebx+14h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019BCA
		mov	eax, [ebx+24h]
		test	eax, eax
		jz	short loc_100195F4
		push	eax
		push	dword ptr [ebx+20h]
		lea	eax, [esp+0ECh+var_98]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019BCA

loc_100195F4:				; CODE XREF: sub_10019410+1C7j
		lea	eax, [esp+0E4h+var_AC]
		push	eax
		call	sub_10028CD0
		mov	ebp, eax
		lea	eax, [esp+0E8h+var_BC]
		push	eax
		mov	[esp+0ECh+var_C4], ebp
		call	sub_10028CD0
		add	esp, 8
		mov	[esp+0E4h+var_D4], eax
		cmp	eax, 400h
		jnb	short loc_1001965D
		cmp	ebp, 0A0h
		jnz	loc_10019BC2
		cmp	eax, 200h
		jb	loc_10019BC2
		test	al, 3Fh
		jnz	loc_10019BC2
		add	eax, 0FFFFFE00h
		cdq
		and	edx, 3Fh
		add	eax, edx
		sar	eax, 6
		cmp	eax, 8
		ja	loc_10019BC2
		mov	ebp, [esp+0E4h+var_D4]
		mov	eax, 1000h
		jmp	short loc_1001967A
; ---------------------------------------------------------------------------

loc_1001965D:				; CODE XREF: sub_10019410+20Aj
		push	ebp
		push	eax
		call	sub_1001C370
		add	esp, 8
		test	eax, eax
		jnz	loc_10019BC2
		mov	ebp, [esp+0E4h+var_D4]
		lea	eax, ds:0[ebp*4]

loc_1001967A:				; CODE XREF: sub_10019410+24Bj
		cmp	dword ptr [ebx+24h], 0
		mov	[esp+0E4h+var_D0], eax
		jz	short loc_1001969E
		lea	eax, [esp+0E4h+var_BC]
		push	eax
		lea	eax, [esp+0E8h+var_98]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_10019BC2

loc_1001969E:				; CODE XREF: sub_10019410+272j
		lea	eax, [esp+0E4h+var_10]
		push	eax
		lea	eax, [esp+0E8h+var_AC]
		push	eax
		lea	eax, [esp+0ECh+var_BC]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019BC8
		lea	eax, [esp+0E4h+var_10]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jnz	loc_10019BC2
		push	[esp+0E4h+var_C4]
		push	ebp
		call	sub_1001C3D0
		push	eax
		lea	eax, [esp+0F0h+var_AC]
		push	eax
		call	sub_10026830
		add	esp, 10h
		test	eax, eax
		jnz	loc_10019BC2
		push	[esp+0E4h+var_C4]
		push	ebp
		call	sub_1001C3D0
		push	eax
		lea	eax, [esp+0F0h+var_BC]
		push	eax
		call	sub_10026830
		add	esp, 10h
		test	eax, eax
		jnz	loc_10019BC2
		mov	eax, [esp+0E4h+arg_4]
		mov	edx, [esp+0E4h+var_D0]
		mov	ecx, [eax+4]
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_10019737
		cmp	ecx, edx
		jnb	loc_10019BC2

loc_10019737:				; CODE XREF: sub_10019410+31Dj
		mov	ecx, [eax+10h]
		shl	ecx, 3
		mov	[esp+0E4h+var_D4], ecx
		mov	ecx, [esp+0E4h+var_C4]
		cmp	[esp+0E4h+var_D4], ecx
		jb	loc_10019BC2
		shr	edx, 1
		cmp	[esp+0E4h+var_D4], edx
		jnb	loc_10019BC2
		lea	edx, [esp+0E4h+var_D0]
		add	eax, 8
		push	edx
		lea	edx, [esp+0E8h+var_CC]
		mov	[esp+0E8h+var_88], eax
		push	edx
		lea	edx, [esp+0ECh+var_C0]
		push	edx
		lea	edx, [esp+0F0h+var_30]
		push	edx
		lea	edx, [esp+0F4h+var_AC]
		push	edx
		push	eax
		push	[esp+0FCh+var_D4]
		push	ecx
		push	ebp
		call	sub_10019F70
		add	esp, 24h
		test	eax, eax
		jnz	loc_10019BC2
		lea	eax, [esp+0E4h+var_30]
		push	eax
		lea	eax, [esp+0E8h+var_AC]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jnz	loc_10019BC2
		mov	ecx, [esp+0E4h+var_D0]
		mov	eax, [esp+0E4h+arg_4]
		cmp	ecx, 2
		jnz	loc_1001992E
		mov	ecx, [eax+10h]
		mov	eax, 0AAAAAAABh
		mul	ecx
		mov	[esp+0E4h+var_78], 0
		mov	eax, edx
		mov	[esp+0E4h+var_74], 0
		shr	eax, 1
		mov	edx, ecx
		mov	[esp+0E4h+var_70], 0
		mov	[esp+0E4h+var_6C], 0
		mov	[esp+0E4h+var_68], 0
		mov	[esp+0E4h+var_64], 0
		mov	[esp+0E4h+var_9C], 0
		mov	[esp+0E4h+var_D4], eax
		cmp	[esp+0E4h+var_C0], edx
		jnb	loc_10019BC2
		lea	ecx, ds:0[eax*8]
		mov	eax, [esp+0E4h+var_C4]
		dec	eax
		cmp	ecx, eax
		jbe	loc_10019BC2
		mov	eax, [esp+0E4h+var_D4]
		mov	ecx, [esp+0E4h+var_C0]
		add	eax, ecx
		cmp	eax, edx
		jnb	loc_10019BC2
		mov	eax, [esp+0E4h+arg_4]
		mov	[esp+0E4h+var_70], ecx
		mov	ecx, [eax+0Ch]
		mov	eax, ecx
		sub	eax, [esp+0E4h+var_C0]
		add	eax, edx
		mov	[esp+0E4h+var_74], eax
		mov	eax, [esp+0E4h+var_D4]
		sub	edx, eax
		sub	edx, [esp+0E4h+var_C0]
		add	eax, ecx
		mov	[esp+0E4h+var_68], eax
		lea	eax, [esp+0E4h+var_9C]
		push	eax
		lea	eax, [esp+0E8h+var_84]
		mov	[esp+0E8h+var_64], edx
		push	eax
		lea	eax, [esp+0ECh+var_20]
		push	eax
		lea	eax, [esp+0F0h+var_78]
		push	eax
		lea	eax, [ebp+1]
		shr	eax, 1
		inc	eax
		push	eax
		push	[esp+0F8h+var_CC]
		call	sub_1001B3B0
		add	esp, 18h
		mov	[esp+0E4h+var_C8], eax
		test	eax, eax
		jnz	loc_10019BBC
		lea	eax, [esp+0E4h+var_9C]
		push	eax
		lea	eax, [esp+0E8h+var_84]
		push	eax
		lea	eax, [esp+0ECh+var_40]
		push	eax
		lea	eax, [esp+0F0h+var_30]
		push	eax
		lea	eax, [esp+0F4h+var_20]
		push	eax
		push	ebp
		push	[esp+0FCh+var_CC]
		call	sub_1001AC60
		mov	ebp, eax
		add	esp, 1Ch
		test	ebp, ebp
		jnz	loc_10019BCA
		lea	eax, [esp+0E4h+var_40]
		push	eax
		lea	eax, [esp+0E8h+var_BC]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_10019909

loc_100198FE:				; CODE XREF: sub_10019410+5E7j
					; sub_10019410+601j ...
		mov	dword ptr [edi], 0FFFFFFFFh
		jmp	loc_10019BCA
; ---------------------------------------------------------------------------

loc_10019909:				; CODE XREF: sub_10019410+4ECj
		lea	eax, [esp+0E4h+var_84]
		push	eax
		lea	eax, [esp+0E8h+var_6C]
		push	eax
		call	SECITEM_CompareItem_Util

loc_10019918:				; CODE XREF: sub_10019410+5ACj
		add	esp, 8
		test	eax, eax
		jz	loc_100199C1
		mov	dword ptr [edi], 0FFFFFFFFh
		jmp	loc_10019BCA
; ---------------------------------------------------------------------------

loc_1001992E:				; CODE XREF: sub_10019410+3B0j
		cmp	dword ptr [eax+4], 0FFFFFFFFh
		jnz	short loc_10019949
		xor	ebp, ebp
		test	ecx, ecx
		jnz	loc_100199C1
		mov	dword ptr [edi], 0FFFFFFFFh
		jmp	loc_10019BCA
; ---------------------------------------------------------------------------

loc_10019949:				; CODE XREF: sub_10019410+522j
		push	[esp+0E4h+var_CC]
		call	sub_100190C0
		mov	ecx, eax
		xor	edx, edx
		shl	ecx, 3
		lea	eax, [ebp-1]
		div	ecx
		lea	ecx, [eax+1]
		mov	eax, [esp+0E8h+arg_4]
		imul	ecx, [eax+4]
		mov	eax, [esp+0E8h+var_D0]
		neg	eax
		sbb	eax, eax
		add	eax, 2
		add	ecx, eax
		lea	eax, [esp+0E8h+var_40]
		push	eax
		lea	eax, [esp+0ECh+var_AC]
		push	eax
		push	[esp+0F0h+var_88]
		push	[esp+0F4h+var_D4]
		push	ecx
		push	[esp+0FCh+var_C4]
		push	ebp
		push	[esp+104h+var_CC]
		call	sub_1001A810
		mov	ebp, eax
		add	esp, 24h
		test	ebp, ebp
		jnz	loc_10019BCA
		lea	eax, [esp+0E4h+var_40]
		push	eax
		lea	eax, [esp+0E8h+var_BC]
		push	eax
		call	sub_10028F50
		jmp	loc_10019918
; ---------------------------------------------------------------------------

loc_100199C1:				; CODE XREF: sub_10019410+50Dj
					; sub_10019410+528j
		cmp	dword ptr [ebx+24h], 0
		jz	loc_10019BCA
		push	0
		lea	eax, [esp+0E8h+var_BC]
		push	0
		push	eax
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_98]
		push	2
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jle	loc_100198FE
		lea	eax, [esp+0E4h+var_BC]
		push	eax
		lea	eax, [esp+0E8h+var_98]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_100198FE
		push	1
		lea	eax, [esp+0E8h+var_BC]
		push	0
		push	eax
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_60]
		push	eax
		lea	eax, [esp+0E8h+var_BC]
		push	eax
		lea	eax, [esp+0ECh+var_AC]
		push	eax
		lea	eax, [esp+0F0h+var_98]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_60]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jnz	loc_100198FE
		mov	eax, [esp+0E4h+arg_4]
		mov	ecx, [eax+1Ch]
		test	ecx, ecx
		jnz	short loc_10019A98
		cmp	[esp+0E4h+var_D0], ecx
		jz	loc_10019BCA
		mov	dword ptr [edi], 0FFFFFFFEh
		jmp	loc_10019BCA
; ---------------------------------------------------------------------------

loc_10019A98:				; CODE XREF: sub_10019410+671j
		cmp	ecx, 1
		jnz	short loc_10019AFF
		cmp	[esp+0E4h+var_D0], 0
		jz	short loc_10019AFF
		mov	eax, [eax+18h]
		lea	ecx, [esp+0E4h+var_50]
		push	ecx
		movzx	eax, byte ptr [eax]
		push	eax
		push	[esp+0ECh+var_88]
		lea	eax, [esp+0F0h+var_AC]
		push	eax
		lea	eax, [esp+0F4h+var_BC]
		push	eax
		push	[esp+0F8h+var_CC]
		call	sub_1001A550
		mov	ebp, eax
		add	esp, 18h
		test	ebp, ebp
		jnz	loc_10019BCA

loc_10019AD7:				; CODE XREF: sub_10019410+7A7j
		lea	eax, [esp+0E4h+var_50]
		push	eax
		lea	eax, [esp+0E8h+var_98]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	loc_10019BCA
		mov	dword ptr [edi], 0FFFFFFFFh
		jmp	loc_10019BCA
; ---------------------------------------------------------------------------

loc_10019AFF:				; CODE XREF: sub_10019410+68Bj
					; sub_10019410+692j
		push	ecx
		push	dword ptr [eax+18h]
		lea	eax, [esp+0ECh+var_60]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019BCA
		push	0
		lea	eax, [esp+0E8h+var_BC]
		push	0
		push	eax
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019BCA
		lea	eax, [esp+0E4h+var_98]
		push	2
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jle	loc_100198FE
		lea	eax, [esp+0E4h+var_BC]
		push	eax
		lea	eax, [esp+0E8h+var_98]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	loc_100198FE
		push	1
		lea	eax, [esp+0E8h+var_BC]
		push	0
		push	eax
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10019BCA
		lea	eax, [esp+0E4h+var_C8]
		push	eax
		lea	eax, [esp+0E8h+var_50]
		push	eax
		lea	eax, [esp+0ECh+var_60]
		push	eax
		lea	eax, [esp+0F0h+var_AC]
		push	eax
		lea	eax, [esp+0F4h+var_BC]
		push	eax
		call	sub_1001A3C0
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	short loc_10019BCA
		cmp	[esp+0E4h+var_C8], eax
		jz	loc_100198FE
		jmp	loc_10019AD7
; ---------------------------------------------------------------------------

loc_10019BBC:				; CODE XREF: sub_10019410+496j
		mov	ebp, [esp+0E4h+var_C8]
		jmp	short loc_10019BCA
; ---------------------------------------------------------------------------

loc_10019BC2:				; CODE XREF: sub_10019410+212j
					; sub_10019410+21Dj ...
		mov	dword ptr [edi], 0FFFFFFFFh

loc_10019BC8:				; CODE XREF: sub_10019410+2ACj
		xor	ebp, ebp

loc_10019BCA:				; CODE XREF: sub_10019410+B9j
					; sub_10019410+D0j ...
		lea	eax, [esp+0E4h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E8h+var_BC]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0ECh+var_AC]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0F0h+var_98]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0F4h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0F8h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0FCh+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+100h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+104h+var_60]
		push	eax
		call	sub_10028F00
		add	esp, 24h
		cmp	[esp+0E4h+var_80], 0
		jz	short loc_10019C4F
		lea	eax, [esp+0E4h+var_84]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_10019C4F:				; CODE XREF: sub_10019410+82Ej
		test	esi, esi
		jz	short loc_10019CC9
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10019CB9
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10019C9C
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10019C7F
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0D4h
		retn
; ---------------------------------------------------------------------------

loc_10019C7F:				; CODE XREF: sub_10019410+850j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0D4h
		retn
; ---------------------------------------------------------------------------

loc_10019C9C:				; CODE XREF: sub_10019410+84Bj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0D4h
		retn
; ---------------------------------------------------------------------------

loc_10019CB9:				; CODE XREF: sub_10019410+846j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh

loc_10019CC9:				; CODE XREF: sub_10019410+841j
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0D4h
		retn
; ---------------------------------------------------------------------------

loc_10019CD6:				; CODE XREF: sub_10019410+20j
					; sub_10019410+2Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0D4h
		retn
sub_10019410	endp


; =============== S U B	R O U T	I N E =======================================


sub_10019CF0	proc near		; CODE XREF: sub_10019F00+2Ap
					; sub_1001AC60+1D1p ...

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 40h
		lea	eax, [esp+40h+var_40]
		mov	[esp+40h+var_34], 0
		push	ebx
		push	eax
		mov	[esp+48h+var_24], 0
		mov	[esp+48h+var_4], 0
		mov	[esp+48h+var_14], 0
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10019E5C
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10019E5C
		lea	eax, [esp+44h+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10019E5C
		mov	eax, [esp+44h+arg_0]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+4Ch+var_40]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10019E5C
		push	esi
		mov	esi, [esp+48h+arg_4]
		cmp	esi, 0FFFFFFFFh
		jnb	short loc_10019D91
		lea	eax, [esp+48h+var_40]
		push	eax
		push	esi
		push	eax
		call	sub_10028DB0
		jmp	short loc_10019DD4
; ---------------------------------------------------------------------------

loc_10019D91:				; CODE XREF: sub_10019CF0+91j
		lea	eax, [esp+48h+var_20]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10019E5B
		lea	eax, [esp+48h+var_20]
		push	esi
		push	eax
		call	sub_1002A170
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10019E5B
		lea	eax, [esp+48h+var_40]
		push	eax
		lea	eax, [esp+4Ch+var_20]
		push	eax
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_10028D40

loc_10019DD4:				; CODE XREF: sub_10019CF0+9Fj
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_10019E5B
		lea	eax, [esp+48h+var_30]
		push	eax
		push	0
		push	[esp+50h+arg_8]
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_10029420
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_10019E5B
		mov	esi, [esp+48h+arg_C]
		cmp	dword ptr [esi+4], 0
		jz	short loc_10019E10
		push	0
		push	esi
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_10019E10:				; CODE XREF: sub_10019CF0+113j
		lea	eax, [esp+48h+var_30]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_10019E28
		mov	ebx, 0FFFFFFFDh
		jmp	short loc_10019E5B
; ---------------------------------------------------------------------------

loc_10019E28:				; CODE XREF: sub_10019CF0+12Fj
		push	eax
		push	esi
		push	0
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10019E40
		lea	ebx, [eax-2]
		jmp	short loc_10019E5B
; ---------------------------------------------------------------------------

loc_10019E40:				; CODE XREF: sub_10019CF0+149j
		push	dword ptr [esi+8]
		push	eax
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_1002A820
		xor	ebx, ebx
		add	esp, 0Ch
		test	eax, eax
		setns	bl
		dec	ebx
		and	ebx, eax

loc_10019E5B:				; CODE XREF: sub_10019CF0+B2j
					; sub_10019CF0+CAj ...
		pop	esi

loc_10019E5C:				; CODE XREF: sub_10019CF0+34j
					; sub_10019CF0+4Bj ...
		lea	eax, [esp+44h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+48h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_10019EEE
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_10019ED9
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_10019EC4
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_10019EAF
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10019EAF:				; CODE XREF: sub_10019CF0+1A8j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10019EC4:				; CODE XREF: sub_10019CF0+1A3j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10019ED9:				; CODE XREF: sub_10019CF0+19Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10019EEE:				; CODE XREF: sub_10019CF0+199j
		xor	eax, eax
		pop	ebx
		add	esp, 40h
		retn
sub_10019CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019F00	proc near		; CODE XREF: sub_1001A810+148p
					; sub_1001A810+1F9p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 0Ch
		lea	eax, [esp+0Ch+var_C]
		mov	[esp+0Ch+var_C], 0
		push	eax
		push	[esp+10h+arg_C]
		mov	[esp+14h+var_8], 0
		push	[esp+14h+arg_8]
		mov	[esp+18h+var_4], 0
		push	[esp+18h+arg_4]
		call	sub_10019CF0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10019F6A
		push	esi
		push	[esp+10h+var_4]
		push	[esp+14h+var_8]
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_0]
		call	sub_10019050
		add	esp, 10h
		mov	esi, eax
		cmp	[esp+10h+var_8], 0
		jz	short loc_10019F67
		lea	eax, [esp+10h+var_C]
		push	0
		push	eax
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_10019F67:				; CODE XREF: sub_10019F00+56j
		mov	eax, esi
		pop	esi

loc_10019F6A:				; CODE XREF: sub_10019F00+34j
		add	esp, 0Ch
		retn
sub_10019F00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019F70	proc near		; CODE XREF: sub_10019410+375p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 18h
		mov	eax, [esp+18h+arg_18]
		push	esi
		mov	[esp+1Ch+var_C], 0
		mov	[esp+1Ch+var_8], 0
		mov	dword ptr [eax], 0
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_10], 0
		cmp	eax, 400h
		jnb	short loc_1001A006
		mov	esi, [esp+1Ch+arg_14]
		push	esi
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		call	sub_1001B8A0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10019FFE
		push	esi
		push	[esp+20h+arg_10]
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jnz	short loc_10019FFE
		mov	eax, [esp+1Ch+arg_1C]
		pop	esi
		mov	dword ptr [eax], 3
		mov	eax, [esp+18h+arg_20]
		mov	dword ptr [eax], 0
		xor	eax, eax
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10019FFE:				; CODE XREF: sub_10019F70+60j
					; sub_10019F70+71j
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1001A006:				; CODE XREF: sub_10019F70+47j
		push	ebx
		mov	ebx, [esp+20h+arg_14]
		push	edi
		mov	edi, [esp+24h+arg_10]
		cmp	eax, 400h
		jnz	short loc_1001A057
		push	ebx
		push	[esp+28h+arg_C]
		push	[esp+2Ch+arg_8]
		call	sub_1001B8A0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001A057
		push	ebx
		push	edi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001A057
		mov	eax, [esp+24h+arg_1C]
		pop	edi
		pop	ebx
		pop	esi
		mov	dword ptr [eax], 3
		mov	eax, [esp+18h+arg_20]
		mov	dword ptr [eax], 0
		xor	eax, eax
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1001A057:				; CODE XREF: sub_10019F70+A5j
					; sub_10019F70+BAj ...
		push	ebp
		mov	ebp, [esp+28h+arg_4]
		cmp	ebp, 0E0h
		jnb	short loc_1001A06B
		mov	esi, 3
		jmp	short loc_1001A094
; ---------------------------------------------------------------------------

loc_1001A06B:				; CODE XREF: sub_10019F70+F2j
		cmp	ebp, 100h
		jnb	short loc_1001A07A
		mov	esi, 7
		jmp	short loc_1001A094
; ---------------------------------------------------------------------------

loc_1001A07A:				; CODE XREF: sub_10019F70+101j
		cmp	ebp, 180h
		jnb	short loc_1001A089

loc_1001A082:				; CODE XREF: sub_10019F70+14Dj
					; DATA XREF: .text:off_1001A270o
		mov	esi, 4		; jumptable 1001A0BD case 7
		jmp	short loc_1001A094
; ---------------------------------------------------------------------------

loc_1001A089:				; CODE XREF: sub_10019F70+110j
		cmp	ebp, 200h
		sbb	esi, esi
		add	esi, 6

loc_1001A094:				; CODE XREF: sub_10019F70+F9j
					; sub_10019F70+108j ...
		push	ebx
		push	[esp+2Ch+arg_C]
		push	ebp
		push	esi
		call	sub_1001B740
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1001A0B5
		push	ebx
		push	edi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1001A0D9

loc_1001A0B5:				; CODE XREF: sub_10019F70+135j
		add	esi, 0FFFFFFFDh	; switch 5 cases
		cmp	esi, 4
		ja	short loc_1001A0F3 ; jumptable 1001A0BD	default	case
		jmp	ds:off_1001A270[esi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001A0C4:				; CODE XREF: sub_10019F70+14Dj
					; DATA XREF: .text:off_1001A270o
		mov	esi, 7		; jumptable 1001A0BD case 3
		jmp	short loc_1001A094
; ---------------------------------------------------------------------------

loc_1001A0CB:				; CODE XREF: sub_10019F70+14Dj
					; DATA XREF: .text:off_1001A270o
		mov	esi, 5		; jumptable 1001A0BD case 4
		jmp	short loc_1001A094
; ---------------------------------------------------------------------------

loc_1001A0D2:				; CODE XREF: sub_10019F70+14Dj
					; DATA XREF: .text:off_1001A270o
		mov	esi, 6		; jumptable 1001A0BD case 5
		jmp	short loc_1001A094
; ---------------------------------------------------------------------------

loc_1001A0D9:				; CODE XREF: sub_10019F70+143j
		mov	eax, [esp+28h+arg_1C]
		pop	ebp
		pop	edi
		pop	ebx
		mov	[eax], esi
		mov	eax, [esp+1Ch+arg_20]
		pop	esi
		mov	dword ptr [eax], 1
		xor	eax, eax
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1001A0F3:				; CODE XREF: sub_10019F70+14Bj
					; sub_10019F70+14Dj
					; DATA XREF: ...
		mov	ecx, [esp+28h+arg_C] ; jumptable 1001A0BD default case
		mov	eax, [ecx]
		mov	[esp+28h+var_C], eax
		mov	eax, [ecx+4]
		mov	[esp+28h+var_8], eax
		mov	eax, [ecx+8]
		mov	[esp+28h+var_4], eax
		mov	eax, 0AAAAAAABh
		mul	dword ptr [ecx+8]
		shr	edx, 1
		mov	[esp+28h+var_4], edx
		cmp	ebp, 0E0h
		jnb	short loc_1001A128
		mov	edi, 3
		jmp	short loc_1001A151
; ---------------------------------------------------------------------------

loc_1001A128:				; CODE XREF: sub_10019F70+1AFj
		cmp	ebp, 100h
		jnb	short loc_1001A137
		mov	edi, 7
		jmp	short loc_1001A151
; ---------------------------------------------------------------------------

loc_1001A137:				; CODE XREF: sub_10019F70+1BEj
		cmp	ebp, 180h
		jnb	short loc_1001A146
		mov	edi, 4
		jmp	short loc_1001A151
; ---------------------------------------------------------------------------

loc_1001A146:				; CODE XREF: sub_10019F70+1CDj
		cmp	ebp, 200h
		sbb	edi, edi
		add	edi, 6

loc_1001A151:				; CODE XREF: sub_10019F70+1B6j
					; sub_10019F70+1C5j ...
		mov	esi, [esp+28h+arg_10]

loc_1001A155:				; CODE XREF: sub_10019F70+238j
					; sub_10019F70+23Fj ...
		lea	eax, [esp+28h+arg_0]
		push	eax
		lea	eax, [esp+2Ch+var_18]
		push	eax
		push	ebx
		lea	eax, [esp+34h+var_C]
		push	eax
		push	ebp
		push	edi
		call	sub_1001B3B0
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1001A190
		push	ebx
		push	esi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1001A1BF
		lea	eax, [esp+28h+var_18]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001A190:				; CODE XREF: sub_10019F70+201j
		add	edi, 0FFFFFFFDh	; switch 5 cases
		cmp	edi, 4
		ja	loc_1001A263	; jumptable 1001A19C default case
		jmp	ds:off_1001A284[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001A1A3:				; CODE XREF: sub_10019F70+22Cj
					; DATA XREF: .text:off_1001A284o
		mov	edi, 7		; jumptable 1001A19C case 3
		jmp	short loc_1001A155
; ---------------------------------------------------------------------------

loc_1001A1AA:				; CODE XREF: sub_10019F70+22Cj
					; DATA XREF: .text:off_1001A284o
		mov	edi, 4		; jumptable 1001A19C case 7
		jmp	short loc_1001A155
; ---------------------------------------------------------------------------

loc_1001A1B1:				; CODE XREF: sub_10019F70+22Cj
					; DATA XREF: .text:off_1001A284o
		mov	edi, 5		; jumptable 1001A19C case 4
		jmp	short loc_1001A155
; ---------------------------------------------------------------------------

loc_1001A1B8:				; CODE XREF: sub_10019F70+22Cj
					; DATA XREF: .text:off_1001A284o
		mov	edi, 6		; jumptable 1001A19C case 5
		jmp	short loc_1001A155
; ---------------------------------------------------------------------------

loc_1001A1BF:				; CODE XREF: sub_10019F70+20Fj
		mov	eax, [esp+28h+arg_C]
		mov	ebx, [esp+28h+var_10]
		mov	edx, [eax+8]
		sub	edx, ebx
		js	loc_1001A254
		mov	ecx, [eax+4]
		mov	esi, ebx
		add	ecx, edx
		mov	edx, [esp+28h+var_14]
		sub	esi, 4
		jb	short loc_1001A1F3

loc_1001A1E2:				; CODE XREF: sub_10019F70+281j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_1001A1F8
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_1001A1E2

loc_1001A1F3:				; CODE XREF: sub_10019F70+270j
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001A225

loc_1001A1F8:				; CODE XREF: sub_10019F70+276j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_1001A254
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001A225
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_1001A254
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001A225
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_1001A254
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1001A225
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	short loc_1001A254

loc_1001A225:				; CODE XREF: sub_10019F70+286j
					; sub_10019F70+291j ...
		mov	eax, [esp+28h+arg_18]
		push	0
		mov	[eax], ebx
		mov	eax, [esp+2Ch+arg_1C]
		mov	[eax], edi
		mov	eax, [esp+2Ch+arg_20]
		mov	dword ptr [eax], 2
		lea	eax, [esp+2Ch+var_18]
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1001A254:				; CODE XREF: sub_10019F70+25Cj
					; sub_10019F70+28Cj ...
		lea	eax, [esp+28h+var_18]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001A263:				; CODE XREF: sub_10019F70+226j
					; sub_10019F70+22Cj
					; DATA XREF: ...
		pop	ebp		; jumptable 1001A19C default case
		pop	edi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 18h
		retn
sub_10019F70	endp

; ---------------------------------------------------------------------------
		align 10h
off_1001A270	dd offset loc_1001A0C4	; DATA XREF: sub_10019F70+14Dr
		dd offset loc_1001A0CB	; jump table for switch	statement
		dd offset loc_1001A0D2
		dd offset loc_1001A0F3
		dd offset loc_1001A082
off_1001A284	dd offset loc_1001A1A3	; DATA XREF: sub_10019F70+22Cr
		dd offset loc_1001A1B1	; jump table for switch	statement
		dd offset loc_1001A1B8
		dd offset loc_1001A263
		dd offset loc_1001A1AA
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A2A0	proc near		; CODE XREF: sub_1001BA60+5C0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [esi+4] ; void *
		call	sub_1000C220
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001A31F
		push	dword ptr [esi+8]
		push	dword ptr [esi+4]
		push	[esp+0Ch+arg_4]
		call	sub_10029F90
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1001A324
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1001A312
		cmp	eax, 0FFFFFFFDh
		jz	short loc_1001A300
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1001A2EE
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001A2EE:				; CODE XREF: sub_1001A2A0+3Aj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001A300:				; CODE XREF: sub_1001A2A0+35j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001A312:				; CODE XREF: sub_1001A2A0+30j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1001A31F:				; CODE XREF: sub_1001A2A0+15j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001A324:				; CODE XREF: sub_1001A2A0+2Bj
		xor	eax, eax
		pop	esi
		retn
sub_1001A2A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A330	proc near		; CODE XREF: sub_1001BA60+259p

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		cmp	eax, 0E0h
		jnb	short loc_1001A341
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_1001A341:				; CODE XREF: sub_1001A330+9j
		cmp	eax, 100h
		jnb	short loc_1001A34E
		mov	eax, 7
		retn
; ---------------------------------------------------------------------------

loc_1001A34E:				; CODE XREF: sub_1001A330+16j
		cmp	eax, 180h
		jnb	short loc_1001A35B

__RTC_NumErrors_0:
		mov	eax, 4
		retn
; ---------------------------------------------------------------------------

loc_1001A35B:				; CODE XREF: sub_1001A330+23j
		cmp	eax, 200h
		sbb	eax, eax
		add	eax, 6
		retn
sub_1001A330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A370	proc near		; CODE XREF: sub_1001BA60+2B5p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+4], 0
		jnz	short loc_1001A38D
		push	dword ptr [esi+8]
		push	[esp+8+arg_4]
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[esi+4], eax

loc_1001A38D:				; CODE XREF: sub_1001A370+9j
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_1001A3A6
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001A3A6:				; CODE XREF: sub_1001A370+22j
		push	dword ptr [esi+8] ; size_t
		push	eax		; void *
		call	sub_1000C220
		mov	ecx, [esi+4]
		add	esp, 8
		or	byte ptr [ecx],	80h
		pop	esi
		retn
sub_1001A370	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A3C0	proc near		; CODE XREF: sub_10019410+78Fp
					; sub_1001BA60+5F1p

var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 20h
		push	ebx
		push	ebp
		mov	ebp, [esp+28h+arg_10]
		lea	eax, [esp+28h+var_10]
		xor	ebx, ebx
		push	esi
		push	eax
		mov	[ebp+0], ebx
		mov	[esp+30h+var_4], ebx
		mov	[esp+30h+var_14], ebx
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001A4BB
		lea	eax, [esp+2Ch+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001A4BB
		lea	eax, [esp+2Ch+var_20]
		push	eax
		push	1
		push	[esp+34h+arg_0]
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001A4BB
		push	edi
		mov	edi, [esp+30h+arg_8]
		lea	eax, [esp+30h+var_20]
		push	eax
		push	edi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		js	short loc_1001A44E
		push	edi
		lea	eax, [esp+34h+var_20]
		push	eax
		push	edi
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001A4BA

loc_1001A44E:				; CODE XREF: sub_1001A3C0+77j
		push	1
		push	edi
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jg	short loc_1001A462
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001A4BA
; ---------------------------------------------------------------------------

loc_1001A462:				; CODE XREF: sub_1001A3C0+9Bj
		push	0
		lea	eax, [esp+34h+var_10]
		push	eax
		push	[esp+38h+arg_4]
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001A4BA
		push	[esp+30h+arg_C]
		lea	eax, [esp+34h+var_10]
		push	[esp+34h+arg_0]
		push	eax
		push	edi
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001A4BA
		push	1
		push	[esp+34h+arg_C]
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jg	short loc_1001A4B3
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001A4BA
; ---------------------------------------------------------------------------

loc_1001A4B3:				; CODE XREF: sub_1001A3C0+ECj
		mov	dword ptr [ebp+0], 1

loc_1001A4BA:				; CODE XREF: sub_1001A3C0+8Cj
					; sub_1001A3C0+A0j ...
		pop	edi

loc_1001A4BB:				; CODE XREF: sub_1001A3C0+28j
					; sub_1001A3C0+3Fj ...
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+30h+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 8
		test	esi, esi
		jz	short loc_1001A541
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001A52A
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001A513
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001A4FC
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001A4FC:				; CODE XREF: sub_1001A3C0+123j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001A513:				; CODE XREF: sub_1001A3C0+11Ej
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001A52A:				; CODE XREF: sub_1001A3C0+119j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001A541:				; CODE XREF: sub_1001A3C0+114j
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 20h
		retn
sub_1001A3C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A550	proc near		; CODE XREF: sub_10019410+6B5p
					; sub_1001BA60+6A9p

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_43		= byte ptr -43h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= byte ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 88h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+88h+var_4], eax
		mov	eax, [esp+88h+arg_4]
		mov	[esp+88h+var_84], eax
		mov	eax, [esp+88h+arg_8]
		push	ebx
		mov	[esp+8Ch+var_78], eax
		xor	ebx, ebx
		mov	eax, [esp+8Ch+arg_C]
		push	ebp
		mov	[esp+90h+var_7C], eax
		xor	ebp, ebp
		mov	eax, [esp+90h+arg_14]
		push	esi
		mov	[esp+94h+var_80], eax
		lea	eax, [esp+94h+var_74]
		push	edi
		mov	edi, [esp+98h+arg_0]
		push	eax
		mov	[esp+9Ch+var_68], ebx
		mov	[esp+9Ch+var_48], ebx
		mov	[esp+9Ch+var_58], ebx
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001A742
		lea	eax, [esp+98h+var_54]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001A742
		lea	eax, [esp+98h+var_64]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001A742
		push	edi
		call	sub_10008CC0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1001A614
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001A74A
; ---------------------------------------------------------------------------

loc_1001A614:				; CODE XREF: sub_1001A550+ADj
		mov	eax, [edi+4]
		call	eax
		mov	ebp, eax
		test	ebp, ebp
		jnz	short loc_1001A627
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001A74A
; ---------------------------------------------------------------------------

loc_1001A627:				; CODE XREF: sub_1001A550+CDj
		lea	eax, [esp+98h+var_54]
		push	eax
		push	1
		push	[esp+0A0h+var_84]
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001A74A
		push	0
		lea	eax, [esp+9Ch+var_74]
		push	eax
		push	[esp+0A0h+var_78]
		lea	eax, [esp+0A4h+var_54]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001A74A
		mov	ebx, 1
		jmp	short loc_1001A670
; ---------------------------------------------------------------------------
		align 10h

loc_1001A670:				; CODE XREF: sub_1001A550+11Bj
					; sub_1001A550+1DAj
		mov	eax, [edi+10h]
		push	ebp
		call	eax
		mov	eax, [esp+9Ch+var_7C]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		mov	eax, [edi+14h]
		push	ebp
		call	eax
		mov	eax, [edi+14h]
		push	4
		push	offset aGgen	; "ggen"
		push	ebp
		call	eax
		push	1
		lea	eax, [esp+0B8h+arg_10]
		push	eax
		mov	eax, [edi+14h]
		push	ebp
		call	eax
		mov	eax, ebx
		mov	[esp+0C0h+var_43], bl
		shr	eax, 8
		mov	[esp+0C0h+var_44], al
		lea	eax, [esp+0C0h+var_44]
		push	2
		push	eax
		mov	eax, [edi+14h]
		push	ebp
		call	eax
		push	40h
		lea	eax, [esp+0D0h+var_88]
		push	eax
		lea	eax, [esp+0D4h+var_44]
		push	eax
		mov	eax, [edi+18h]
		push	ebp
		call	eax
		add	esp, 44h
		lea	eax, [esp+98h+var_44]
		push	[esp+98h+var_88]
		push	eax
		lea	eax, [esp+0A0h+var_64]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001A748
		push	[esp+98h+var_80]
		lea	eax, [esp+9Ch+var_74]
		push	[esp+9Ch+var_84]
		push	eax
		lea	eax, [esp+0A4h+var_64]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001A748
		push	2
		push	[esp+9Ch+var_80]
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jns	short loc_1001A735
		inc	ebx
		cmp	ebx, 10000h
		jb	loc_1001A670
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001A74A
; ---------------------------------------------------------------------------

loc_1001A735:				; CODE XREF: sub_1001A550+1D1j
		cmp	ebx, 10000h
		jb	short loc_1001A748
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001A74A
; ---------------------------------------------------------------------------

loc_1001A742:				; CODE XREF: sub_1001A550+6Cj
					; sub_1001A550+83j ...
		mov	edi, [esp+98h+var_88]
		jmp	short loc_1001A74A
; ---------------------------------------------------------------------------

loc_1001A748:				; CODE XREF: sub_1001A550+19Fj
					; sub_1001A550+1BFj ...
		xor	ebx, ebx

loc_1001A74A:				; CODE XREF: sub_1001A550+BFj
					; sub_1001A550+D2j ...
		push	40h		; size_t
		lea	eax, [esp+9Ch+var_44]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		test	ebp, ebp
		jz	short loc_1001A76A
		mov	eax, [edi+0Ch]
		push	1
		push	ebp
		call	eax
		add	esp, 8

loc_1001A76A:				; CODE XREF: sub_1001A550+20Dj
		lea	eax, [esp+98h+var_74]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+9Ch+var_54]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A0h+var_64]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1001A7E6
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001A7D4
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001A7C2
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001A7B0
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001A7E8
; ---------------------------------------------------------------------------

loc_1001A7B0:				; CODE XREF: sub_1001A550+24Cj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001A7E8
; ---------------------------------------------------------------------------

loc_1001A7C2:				; CODE XREF: sub_1001A550+247j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001A7E8
; ---------------------------------------------------------------------------

loc_1001A7D4:				; CODE XREF: sub_1001A550+242j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001A7E8
; ---------------------------------------------------------------------------

loc_1001A7E6:				; CODE XREF: sub_1001A550+23Dj
		mov	eax, ebx

loc_1001A7E8:				; CODE XREF: sub_1001A550+25Ej
					; sub_1001A550+270j ...
		mov	ecx, [esp+98h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 88h
		retn
sub_1001A550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A810	proc near		; CODE XREF: sub_10019410+588p
					; sub_1001BA60+3AAp

var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= byte ptr -0B4h
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= byte ptr -8Ch
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 0C0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0C0h+var_4], eax
		mov	eax, [esp+0C0h+arg_14]
		mov	[esp+0C0h+var_B8], eax
		mov	eax, [esp+0C0h+arg_18]
		mov	[esp+0C0h+var_90], eax
		mov	eax, [esp+0C0h+arg_1C]
		push	ebp
		xor	ebp, ebp
		mov	[esp+0C4h+var_A4], eax
		lea	eax, [esp+0C4h+var_8C]
		mov	[esp+0C4h+var_80], ebp
		push	esi
		push	eax
		mov	[esp+0CCh+var_94], ebp
		mov	[esp+0CCh+var_68], ebp
		mov	[esp+0CCh+var_48], ebp
		mov	[esp+0CCh+var_58], ebp
		mov	[esp+0CCh+var_A8], ebp
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001AB45
		lea	eax, [esp+0C8h+var_A0]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001AB45
		lea	eax, [esp+0C8h+var_74]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001AB45
		lea	eax, [esp+0C8h+var_54]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001AB45
		lea	eax, [esp+0C8h+var_B4]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001AB45
		lea	eax, [esp+0C8h+var_64]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001AB45
		mov	ebp, [esp+0C8h+arg_0]
		push	ebx
		push	edi
		push	ebp
		call	sub_100190C0
		mov	[esp+0D4h+var_C0], eax
		xor	edx, edx
		add	esp, 4
		xor	edi, edi
		lea	ebx, ds:0[eax*8]
		mov	eax, [esp+0D0h+arg_4]
		dec	eax
		mov	[esp+0D0h+var_7C], eax
		div	ebx
		mov	ebx, eax
		mov	[esp+0D0h+var_78], edx
		mov	eax, [esp+0D0h+arg_10]
		mov	[esp+0D0h+var_BC], ebx
		test	ebx, ebx
		jz	loc_1001A9F1
		xor	ebx, ebx
		jmp	short loc_1001A940
; ---------------------------------------------------------------------------
		align 10h

loc_1001A940:				; CODE XREF: sub_1001A810+128j
					; sub_1001A810+1D7j
		lea	ecx, [esp+0D0h+var_44]
		push	ecx
		push	eax
		mov	eax, [esp+0D8h+arg_C]
		add	eax, edi
		push	eax
		push	[esp+0DCh+var_B8]
		push	ebp
		call	sub_10019F00
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	loc_1001AB43
		push	[esp+0D0h+var_C0]
		lea	eax, [esp+0D4h+var_44]
		push	eax
		lea	eax, [esp+0D8h+var_B4]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001AB43
		lea	eax, [esp+0D0h+var_B4]
		push	ebx
		push	eax
		push	eax
		call	sub_10028BD0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001AB43
		lea	eax, [esp+0D0h+var_8C]
		push	eax
		lea	eax, [esp+0D4h+var_B4]
		push	eax
		lea	eax, [esp+0D8h+var_8C]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001AB43
		mov	ecx, [esp+0D0h+var_C0]
		inc	edi
		mov	ebp, [esp+0D0h+arg_0]
		lea	eax, ds:0[ecx*8]
		add	ebx, eax
		mov	eax, [esp+0D0h+arg_10]
		cmp	edi, [esp+0D0h+var_BC]
		jb	loc_1001A940
		mov	ebx, [esp+0D0h+var_BC]

loc_1001A9F1:				; CODE XREF: sub_1001A810+120j
		lea	ecx, [esp+0D0h+var_44]
		push	ecx
		push	eax
		mov	eax, [esp+0D8h+arg_C]
		add	eax, ebx
		push	eax
		push	[esp+0DCh+var_B8]
		push	ebp
		call	sub_10019F00
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	loc_1001AB43
		mov	edi, [esp+0D0h+var_C0]
		lea	eax, [esp+0D0h+var_44]
		push	edi
		push	eax
		lea	eax, [esp+0D8h+var_64]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001AB43
		lea	eax, [esp+0D0h+var_B4]
		push	eax
		push	ebp
		push	[esp+0D8h+var_78]
		lea	eax, [esp+0DCh+var_64]
		push	eax
		call	sub_10029420
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001AB43
		lea	eax, ds:0[edi*8]
		imul	ebx, eax
		lea	eax, [esp+0D0h+var_B4]
		push	ebx
		push	eax
		push	eax
		call	sub_10028BD0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001AB43
		lea	eax, [esp+0D0h+var_8C]
		push	eax
		lea	eax, [esp+0D4h+var_B4]
		push	eax
		lea	eax, [esp+0D8h+var_8C]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001AB43
		push	1
		push	[esp+0D4h+var_7C]
		lea	eax, [esp+0D8h+var_A0]
		push	eax
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001AB43
		lea	eax, [esp+0D0h+var_A0]
		push	eax
		lea	eax, [esp+0D4h+var_8C]
		push	eax
		lea	eax, [esp+0D8h+var_A0]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001AB43
		lea	eax, [esp+0D0h+var_54]
		push	eax
		push	[esp+0D4h+var_90]
		call	sub_10029D40
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_1001AB43
		lea	eax, [esp+0D0h+var_74]
		push	eax
		lea	eax, [esp+0D4h+var_54]
		push	eax
		lea	eax, [esp+0D8h+var_A0]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001AB43
		lea	eax, [esp+0D0h+var_74]
		push	eax
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001AB43
		push	[esp+0D0h+var_A4]
		lea	eax, [esp+0D4h+var_74]
		push	eax
		lea	eax, [esp+0D8h+var_A0]
		push	eax
		call	sub_1002A540
		add	esp, 0Ch
		mov	esi, eax

loc_1001AB43:				; CODE XREF: sub_1001A810+154j
					; sub_1001A810+177j ...
		pop	edi
		pop	ebx

loc_1001AB45:				; CODE XREF: sub_1001A810+65j
					; sub_1001A810+7Cj ...
		lea	eax, [esp+0C8h+var_8C]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0CCh+var_A0]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D0h+var_74]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D4h+var_54]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D8h+var_64]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0DCh+var_B4]
		push	eax
		call	sub_10028F00
		add	esp, 18h
		test	esi, esi
		jz	loc_1001AC3A
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001AC13
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001ABEC
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001ABC5
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		mov	ecx, [esp+0C0h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C0h
		retn
; ---------------------------------------------------------------------------

loc_1001ABC5:				; CODE XREF: sub_1001A810+38Cj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		mov	ecx, [esp+0C0h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C0h
		retn
; ---------------------------------------------------------------------------

loc_1001ABEC:				; CODE XREF: sub_1001A810+387j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		mov	ecx, [esp+0C0h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C0h
		retn
; ---------------------------------------------------------------------------

loc_1001AC13:				; CODE XREF: sub_1001A810+382j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		mov	ecx, [esp+0C0h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C0h
		retn
; ---------------------------------------------------------------------------

loc_1001AC3A:				; CODE XREF: sub_1001A810+379j
		mov	ecx, [esp+0C8h+var_4]
		mov	eax, ebp
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C0h
		retn
sub_1001A810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001AC60	proc near		; CODE XREF: sub_10019410+4C3p
					; sub_1001B3B0+148p ...

var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= byte ptr -240h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= byte ptr -224h
var_218		= dword	ptr -218h
var_214		= byte ptr -214h
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F8		= dword	ptr -1F8h
var_1F4		= byte ptr -1F4h
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= byte ptr -1D4h
var_1C8		= dword	ptr -1C8h
var_1C4		= byte ptr -1C4h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 24Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24Ch+var_4], eax
		mov	eax, [esp+24Ch+arg_8]
		push	ebx
		push	ebp
		mov	[esp+254h+var_1E0], eax
		or	ebp, 0FFFFFFFFh
		mov	eax, [esp+254h+arg_C]
		push	esi
		mov	[esp+258h+var_1DC], eax
		mov	eax, [esp+258h+arg_10]
		push	edi
		push	[esp+25Ch+arg_0]
		mov	edi, [esp+260h+arg_14]
		mov	[esp+260h+var_24C], eax
		mov	eax, [esp+260h+arg_18]
		mov	[esp+260h+var_248], edi
		mov	[esp+260h+var_22C], eax
		call	sub_10008CC0
		add	esp, 4
		test	eax, eax
		jz	short loc_1001ACC7
		mov	eax, [eax]

loc_1001ACC7:				; CODE XREF: sub_1001AC60+63j
		mov	[esp+25Ch+var_244], eax
		lea	ebx, ds:0[eax*8]
		lea	eax, [esp+25Ch+var_224]
		mov	[esp+25Ch+var_218], 0
		push	eax
		mov	[esp+260h+var_1F8], 0
		mov	[esp+260h+var_234], 0
		mov	[esp+260h+var_208], 0
		mov	[esp+260h+var_1E8], 0
		mov	[esp+260h+var_1C8], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_204]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_240]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_214]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_1F4]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_1D4]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B2C3
		mov	eax, [esp+25Ch+arg_4]
		xor	edx, edx
		dec	eax
		mov	ecx, [esp+25Ch+var_22C]
		add	eax, ebx
		div	ebx
		push	1C0h		; size_t
		mov	ebx, eax
		mov	eax, [ecx]
		mov	[esp+260h+var_1D8], eax
		lea	eax, [esp+260h+var_1C4]
		push	0		; int
		push	eax		; void *
		mov	[esp+268h+var_1E4], ebx
		call	memset
		add	esp, 0Ch
		xor	edi, edi
		test	ebx, ebx
		jle	short loc_1001AE25
		mov	eax, [esp+25Ch+var_244]
		neg	eax
		mov	[esp+25Ch+var_228], eax
		lea	eax, [ebx-1]
		imul	eax, [esp+25Ch+var_244]
		lea	eax, [esp+eax+25Ch+var_1C4]
		mov	[esp+25Ch+var_230], eax

loc_1001ADF0:				; CODE XREF: sub_1001AC60+1C3j
		push	eax
		push	200h
		push	edi
		push	[esp+268h+var_248]
		push	[esp+26Ch+arg_0]
		call	sub_10019F00
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	loc_1001B2BF
		mov	eax, [esp+25Ch+var_230]
		inc	edi
		add	eax, [esp+25Ch+var_228]
		mov	[esp+25Ch+var_230], eax
		cmp	edi, ebx
		jl	short loc_1001ADF0

loc_1001AE25:				; CODE XREF: sub_1001AC60+171j
		mov	edi, [esp+25Ch+var_248]
		push	edi
		push	200h
		push	ebx
		push	edi
		call	sub_10019CF0
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jnz	loc_1001B2C3
		mov	ecx, [esp+25Ch+var_244]
		mov	esi, ebx
		mov	dl, 1
		lea	eax, ds:0[ecx*8]
		imul	esi, eax
		mov	eax, [esp+25Ch+arg_4]
		lea	ecx, [eax-1]
		sub	esi, eax
		and	ecx, 7
		shr	esi, 3
		shl	dl, cl
		lea	ecx, [esp+25Ch+var_1C4]
		add	ecx, esi
		lea	eax, [edx-1]
		and	al, [ecx]
		or	al, dl
		mov	[ecx], al
		mov	eax, [esp+25Ch+var_244]
		imul	eax, ebx
		mov	[esp+25Ch+var_230], eax
		sub	eax, esi
		push	eax
		push	ecx
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_204]
		push	eax
		push	[esp+260h+var_1DC]
		push	[esp+264h+var_1E0]
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_204]
		push	eax
		push	eax
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_240]
		push	eax
		lea	eax, [esp+260h+var_204]
		push	eax
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_240]
		push	eax
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		push	ebp
		lea	eax, [esp+260h+var_240]
		push	eax
		lea	eax, [esp+264h+var_204]
		push	eax
		lea	eax, [esp+268h+var_240]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001B2C3
		mov	eax, [esp+25Ch+arg_4]
		dec	eax
		push	eax
		lea	eax, [esp+260h+var_1D4]
		push	eax
		call	sub_10028D20
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_224]
		push	eax
		lea	eax, [esp+260h+var_204]
		push	eax
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3

loc_1001AF80:				; CODE XREF: sub_1001AC60+636j
		lea	eax, [esp+25Ch+var_224]
		push	eax
		push	1
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_224]
		push	eax
		call	sub_10028CD0
		add	esp, 4
		cmp	eax, [esp+25Ch+arg_4]
		jbe	loc_1001B050
		lea	eax, [esp+25Ch+var_240]
		push	eax
		lea	eax, [esp+260h+var_204]
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_240]
		push	eax
		push	eax
		lea	eax, [esp+264h+var_1D4]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		push	0
		lea	eax, [esp+260h+var_240]
		push	eax
		lea	eax, [esp+264h+var_204]
		push	eax
		lea	eax, [esp+268h+var_240]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_224]
		push	eax
		lea	eax, [esp+260h+var_204]
		push	eax
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_224]
		push	eax
		push	1
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3

loc_1001B050:				; CODE XREF: sub_1001AC60+34Ej
		mov	eax, [esp+25Ch+var_22C]
		push	1C0h		; size_t
		push	0		; int
		inc	dword ptr [eax]
		lea	eax, [esp+264h+var_1C4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		xor	edi, edi
		test	ebx, ebx
		jle	short loc_1001B0C3
		mov	eax, [esp+25Ch+var_244]
		neg	eax
		mov	[esp+25Ch+var_228], eax
		lea	eax, [ebx-1]
		imul	eax, [esp+25Ch+var_244]
		lea	ebx, [esp+25Ch+var_1C4]
		add	ebx, eax
		mov	edi, edi

loc_1001B090:				; CODE XREF: sub_1001AC60+45Dj
		push	ebx
		push	200h
		push	edi
		push	[esp+268h+var_248]
		push	[esp+26Ch+arg_0]
		call	sub_10019F00
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	loc_1001B2BF
		add	ebx, [esp+25Ch+var_228]
		inc	edi
		cmp	edi, [esp+25Ch+var_1E4]
		jl	short loc_1001B090
		mov	ebx, [esp+25Ch+var_1E4]

loc_1001B0C3:				; CODE XREF: sub_1001AC60+411j
		mov	edi, [esp+25Ch+var_248]
		push	edi
		push	200h
		push	ebx
		push	edi
		call	sub_10019CF0
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jnz	loc_1001B2C3
		push	[esp+25Ch+var_230]
		lea	eax, [esp+260h+var_1C4]
		push	eax
		lea	eax, [esp+264h+var_214]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_1F4]
		push	eax
		lea	eax, [esp+260h+var_224]
		push	3
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_214]
		push	eax
		lea	eax, [esp+260h+var_1F4]
		push	eax
		lea	eax, [esp+264h+var_214]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_214]
		push	eax
		push	2
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_1F4]
		push	eax
		push	[esp+260h+var_1DC]
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_1F4]
		push	eax
		push	eax
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_1F4]
		push	eax
		lea	eax, [esp+260h+var_224]
		push	eax
		lea	eax, [esp+264h+var_1F4]
		push	eax
		lea	eax, [esp+268h+var_214]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_214]
		push	eax
		lea	eax, [esp+260h+var_1F4]
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_214]
		push	eax
		lea	eax, [esp+260h+var_224]
		push	eax
		lea	eax, [esp+264h+var_214]
		push	eax
		call	sub_100295D0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_214]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001B24C
		lea	eax, [esp+25Ch+var_214]
		push	eax
		lea	eax, [esp+260h+var_224]
		push	eax
		push	[esp+264h+var_1E0]
		lea	eax, [esp+268h+var_1F4]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001B2C3
		lea	eax, [esp+25Ch+var_214]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001B29E

loc_1001B24C:				; CODE XREF: sub_1001AC60+5AFj
		mov	ecx, [esp+25Ch+var_1D8]
		mov	eax, [esp+25Ch+arg_4]
		lea	eax, [ecx+eax*4]
		mov	ecx, [esp+25Ch+var_22C]
		cmp	[ecx], eax
		jnb	short loc_1001B2BA
		lea	eax, [esp+25Ch+var_240]
		push	eax
		push	1
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001B2C3
		lea	eax, [esp+25Ch+var_224]
		push	eax
		lea	eax, [esp+260h+var_204]
		push	eax
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jns	loc_1001AF80
		jmp	short loc_1001B2C3
; ---------------------------------------------------------------------------

loc_1001B29E:				; CODE XREF: sub_1001AC60+5EAj
		mov	ebx, [esp+25Ch+var_24C]
		lea	eax, [esp+25Ch+var_224]
		push	ebx
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_1001B2C7
		xor	ebp, ebp
		jmp	short loc_1001B2C7
; ---------------------------------------------------------------------------

loc_1001B2BA:				; CODE XREF: sub_1001AC60+603j
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001B2C3
; ---------------------------------------------------------------------------

loc_1001B2BF:				; CODE XREF: sub_1001AC60+1AEj
					; sub_1001AC60+44Ej
		mov	edi, [esp+25Ch+var_248]

loc_1001B2C3:				; CODE XREF: sub_1001AC60+B6j
					; sub_1001AC60+CDj ...
		mov	ebx, [esp+25Ch+var_24C]

loc_1001B2C7:				; CODE XREF: sub_1001AC60+654j
					; sub_1001AC60+658j
		lea	eax, [esp+25Ch+var_224]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+260h+var_204]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+268h+var_214]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+26Ch+var_1F4]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+270h+var_1D4]
		push	eax
		call	sub_10028F00
		add	esp, 18h
		test	esi, esi
		jz	short loc_1001B364
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001B352
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001B340
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001B32E
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001B369
; ---------------------------------------------------------------------------

loc_1001B32E:				; CODE XREF: sub_1001AC60+6BAj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001B369
; ---------------------------------------------------------------------------

loc_1001B340:				; CODE XREF: sub_1001AC60+6B5j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001B369
; ---------------------------------------------------------------------------

loc_1001B352:				; CODE XREF: sub_1001AC60+6B0j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001B369
; ---------------------------------------------------------------------------

loc_1001B364:				; CODE XREF: sub_1001AC60+6ABj
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_1001B38D

loc_1001B369:				; CODE XREF: sub_1001AC60+6CCj
					; sub_1001AC60+6DEj ...
		push	ebx
		call	sub_1002A9C0
		add	esp, 4
		cmp	dword ptr [edi+4], 0
		jz	short loc_1001B383
		push	0
		push	edi
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001B383:				; CODE XREF: sub_1001AC60+716j
		mov	eax, [esp+25Ch+var_22C]
		mov	dword ptr [eax], 0

loc_1001B38D:				; CODE XREF: sub_1001AC60+707j
		mov	ecx, [esp+25Ch+var_4]
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24Ch
		retn
sub_1001AC60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001B3B0	proc near		; CODE XREF: sub_10019410+488p
					; sub_10019F70+1F7p ...

var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= byte ptr -0B4h
var_A8		= dword	ptr -0A8h
var_A4		= byte ptr -0A4h
var_98		= dword	ptr -98h
var_94		= byte ptr -94h
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0C4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0C4h+var_4], eax
		mov	eax, [esp+0C4h+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+0CCh+arg_10]
		or	ebx, 0FFFFFFFFh
		push	esi
		mov	[esp+0D0h+var_C0], eax
		mov	eax, [esp+0D0h+arg_C]
		push	edi
		push	[esp+0D4h+arg_0]
		mov	[esp+0D8h+var_BC], eax
		mov	eax, [esp+0D8h+arg_14]
		mov	[esp+0D8h+var_C4], eax
		call	sub_10008CC0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1001B40A
		xor	edi, edi
		jmp	short loc_1001B40C
; ---------------------------------------------------------------------------

loc_1001B40A:				; CODE XREF: sub_1001B3B0+54j
		mov	edi, [eax]

loc_1001B40C:				; CODE XREF: sub_1001B3B0+58j
		lea	eax, [esp+0D4h+var_A4]
		mov	[esp+0D4h+var_98], 0
		push	eax
		mov	[esp+0D8h+var_88], 0
		mov	[esp+0D8h+var_A8], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B670
		lea	eax, [esp+0D4h+var_94]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B670
		lea	eax, [esp+0D4h+var_B4]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001B670
		mov	eax, [esp+0D4h+arg_4]
		cmp	eax, 2
		jb	loc_1001B66D
		cmp	eax, 21h
		jb	loc_1001B507
		lea	eax, [esp+0D4h+var_B4]
		push	eax
		call	sub_1002A9C0
		lea	eax, [esp+0D8h+var_B4]
		push	eax
		push	1
		push	eax
		call	sub_10028DB0
		mov	edi, [esp+0E4h+var_C4]
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001B674
		push	edi
		push	ebp
		lea	eax, [esp+0DCh+var_94]
		push	eax
		mov	eax, [esp+0E0h+arg_4]
		push	[esp+0E0h+var_C0]
		inc	eax
		shr	eax, 1
		inc	eax
		push	eax
		push	[esp+0E8h+arg_0]
		call	sub_1001B3B0
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		jnz	loc_1001B674
		push	edi
		push	ebp
		push	[esp+0DCh+var_BC]
		lea	eax, [esp+0E0h+var_B4]
		push	eax
		lea	eax, [esp+0E4h+var_94]
		push	eax
		push	[esp+0E8h+arg_4]
		push	[esp+0ECh+arg_0]
		call	sub_1001AC60
		add	esp, 1Ch
		mov	ebx, eax
		jmp	loc_1001B674
; ---------------------------------------------------------------------------

loc_1001B507:				; CODE XREF: sub_1001B3B0+CCj
		push	[esp+0D4h+var_C0]
		push	ebp
		push	0
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001B670
		mov	ecx, [esp+0D4h+var_C4]
		mov	[ecx], eax
		mov	eax, [esp+0D4h+arg_4]
		dec	eax
		and	eax, 7
		mov	[esp+0D4h+var_C0], eax

loc_1001B535:				; CODE XREF: sub_1001B3B0+28Fj
		push	dword ptr [ebp+8]
		lea	eax, [esp+0D8h+var_84]
		push	dword ptr [ebp+4]
		push	eax
		push	[esp+0E0h+arg_0]
		call	sub_10019050
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	loc_1001B670
		lea	eax, [esp+0D4h+var_84]
		add	eax, edi
		push	eax
		push	200h
		push	1
		push	ebp
		push	[esp+0E4h+arg_0]
		call	sub_10019F00
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	loc_1001B670
		test	edi, edi
		jle	short loc_1001B595

loc_1001B585:				; CODE XREF: sub_1001B3B0+1E3j
		lea	edx, [esp+0D4h+var_84]
		add	edx, eax
		inc	eax
		mov	cl, [edx+edi]
		xor	[edx], cl
		cmp	eax, edi
		jl	short loc_1001B585

loc_1001B595:				; CODE XREF: sub_1001B3B0+1D3j
		mov	ecx, [esp+0D4h+var_C0]
		lea	esi, ds:0[edi*8]
		sub	esi, [esp+0D4h+arg_4]
		mov	dl, 1
		shl	dl, cl
		lea	ecx, [esp+0D4h+var_84]
		shr	esi, 3
		add	ecx, esi
		lea	eax, [edx-1]
		and	al, [ecx]
		or	al, dl
		mov	[ecx], al
		mov	eax, edi
		or	byte ptr [esp+edi+0D4h+var_88+3], 1
		sub	eax, esi
		push	eax
		push	ecx
		lea	eax, [esp+0DCh+var_A4]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001B670
		mov	eax, [esp+0D4h+var_C4]
		push	ebp
		push	200h
		push	2
		inc	dword ptr [eax]
		push	ebp
		call	sub_10019CF0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_1001B670
		mov	eax, ds:dword_10045B98
		cmp	ds:dword_10045B9C[eax*4], 0FFF1h
		jb	short loc_1001B66D
		mov	[esp+0D4h+var_B8], eax
		lea	eax, [esp+0D4h+var_B8]
		push	eax
		lea	eax, [esp+0D8h+var_A4]
		push	eax
		call	sub_100263C0
		mov	esi, eax
		add	esp, 8
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1001B64C
		test	esi, esi
		jnz	short loc_1001B670
		mov	ecx, [esp+0D4h+var_C4]
		mov	eax, [esp+0D4h+arg_4]
		shl	eax, 2
		cmp	[ecx], eax
		jbe	loc_1001B535
		or	ebx, 0FFFFFFFFh
		mov	edi, ecx
		jmp	short loc_1001B674
; ---------------------------------------------------------------------------

loc_1001B64C:				; CODE XREF: sub_1001B3B0+279j
		push	[esp+0D4h+var_BC]
		lea	eax, [esp+0D8h+var_A4]
		push	eax
		call	sub_100290F0
		mov	edi, [esp+0DCh+var_C4]
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_1001B674
		xor	esi, esi
		xor	ebx, ebx
		jmp	short loc_1001B674
; ---------------------------------------------------------------------------

loc_1001B66D:				; CODE XREF: sub_1001B3B0+C3j
					; sub_1001B3B0+25Cj
		or	ebx, 0FFFFFFFFh

loc_1001B670:				; CODE XREF: sub_1001B3B0+85j
					; sub_1001B3B0+9Cj ...
		mov	edi, [esp+0D4h+var_C4]

loc_1001B674:				; CODE XREF: sub_1001B3B0+F4j
					; sub_1001B3B0+124j ...
		lea	eax, [esp+0D4h+var_A4]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D8h+var_94]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0DCh+var_B4]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1001B6F0
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001B6DE
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001B6CC
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001B6BA
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001B6F5
; ---------------------------------------------------------------------------

loc_1001B6BA:				; CODE XREF: sub_1001B3B0+2F6j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001B6F5
; ---------------------------------------------------------------------------

loc_1001B6CC:				; CODE XREF: sub_1001B3B0+2F1j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001B6F5
; ---------------------------------------------------------------------------

loc_1001B6DE:				; CODE XREF: sub_1001B3B0+2ECj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001B6F5
; ---------------------------------------------------------------------------

loc_1001B6F0:				; CODE XREF: sub_1001B3B0+2E7j
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_1001B718

loc_1001B6F5:				; CODE XREF: sub_1001B3B0+308j
					; sub_1001B3B0+31Aj ...
		push	[esp+0D4h+var_BC]
		call	sub_1002A9C0
		add	esp, 4
		cmp	dword ptr [ebp+4], 0
		jz	short loc_1001B712
		push	0
		push	ebp
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001B712:				; CODE XREF: sub_1001B3B0+355j
		mov	dword ptr [edi], 0

loc_1001B718:				; CODE XREF: sub_1001B3B0+343j
		mov	ecx, [esp+0D4h+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C4h
		retn
sub_1001B3B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001B740	proc near		; CODE XREF: sub_10019F70+12Bp
					; sub_1001BA60+30Bp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+4Ch+var_4], eax
		mov	eax, [esp+4Ch+arg_8]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+5Ch+arg_4]
		xor	esi, esi
		push	[esp+5Ch+arg_0]
		mov	[esp+60h+var_4C], eax
		mov	eax, [esp+60h+arg_C]
		mov	[esp+60h+var_48], eax
		shr	edi, 3
		call	sub_10008CC0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1001B77F
		xor	ebx, ebx
		jmp	short loc_1001B781
; ---------------------------------------------------------------------------

loc_1001B77F:				; CODE XREF: sub_1001B740+39j
		mov	ebx, [eax]

loc_1001B781:				; CODE XREF: sub_1001B740+3Dj
		mov	eax, [esp+5Ch+var_4C]
		xor	ebp, ebp
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+64h+var_44]
		push	eax
		push	[esp+68h+arg_0]
		call	sub_10019050
		add	esp, 10h
		mov	[esp+5Ch+var_4C], eax
		test	eax, eax
		jnz	short loc_1001B7CC
		cmp	ebx, edi
		jle	short loc_1001B7AE
		mov	ebp, ebx
		sub	ebp, edi

loc_1001B7AE:				; CODE XREF: sub_1001B740+68j
		lea	eax, [esp+5Ch+var_44]
		add	eax, ebp
		push	edi
		push	eax
		push	[esp+64h+var_48]
		or	byte ptr [eax],	80h
		or	byte ptr [esp+ebx+68h+var_48+3], 1
		call	sub_10029F90
		add	esp, 0Ch
		mov	esi, eax

loc_1001B7CC:				; CODE XREF: sub_1001B740+64j
		push	40h		; size_t
		lea	eax, [esp+60h+var_44]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		test	esi, esi
		jz	loc_1001B880
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001B85D
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001B83A
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001B817
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001B817:				; CODE XREF: sub_1001B740+B2j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001B83A:				; CODE XREF: sub_1001B740+ADj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001B85D:				; CODE XREF: sub_1001B740+A8j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001B880:				; CODE XREF: sub_1001B740+9Fj
		mov	ecx, [esp+5Ch+var_4]
		mov	eax, [esp+5Ch+var_4C]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
sub_1001B740	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001B8A0	proc near		; CODE XREF: sub_10019F70+56p
					; sub_10019F70+B0p ...

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 40h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+40h+var_4], eax
		push	ebx
		mov	ebx, [esp+44h+arg_4]
		lea	eax, [esp+44h+var_2C]
		push	ebp
		mov	ebp, [esp+48h+arg_8]
		push	esi
		push	edi
		push	dword ptr [ebx+8] ; int
		xor	esi, esi
		push	dword ptr [ebx+4] ; void *
		push	eax		; int
		call	sub_100014F0
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1001B965
		lea	eax, [esp+50h+var_18]
		push	eax
		push	[esp+54h+arg_0]
		push	1
		push	ebx
		push	3
		call	sub_10019F00
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_1001B965
		jmp	short loc_1001B900
; ---------------------------------------------------------------------------
		align 10h

loc_1001B900:				; CODE XREF: sub_1001B8A0+55j
					; sub_1001B8A0+A7j
		movzx	ecx, byte ptr [esp+eax+50h+var_18]
		xor	cl, byte ptr [esp+eax+50h+var_2C]
		mov	byte ptr [esp+eax+50h+var_40], cl
		movzx	ecx, byte ptr [esp+eax+50h+var_2C+1]
		xor	cl, byte ptr [esp+eax+50h+var_18+1]
		mov	byte ptr [esp+eax+50h+var_40+1], cl
		movzx	ecx, byte ptr [esp+eax+50h+var_2C+2]
		xor	cl, byte ptr [esp+eax+50h+var_18+2]
		mov	byte ptr [esp+eax+50h+var_40+2], cl
		movzx	ecx, byte ptr [esp+eax+50h+var_2C+3]
		xor	cl, byte ptr [esp+eax+50h+var_18+3]
		mov	byte ptr [esp+eax+50h+var_40+3], cl
		movzx	ecx, byte ptr [esp+eax+50h+var_28]
		xor	cl, byte ptr [esp+eax+50h+var_14]
		mov	byte ptr [esp+eax+50h+var_3C], cl
		add	eax, 5
		cmp	eax, 14h
		jl	short loc_1001B900
		or	byte ptr [esp+50h+var_40], 80h
		lea	eax, [esp+50h+var_40]
		or	[esp+50h+var_2D], 1
		push	14h
		push	eax
		push	ebp
		call	sub_10029F90
		add	esp, 0Ch
		mov	esi, eax

loc_1001B965:				; CODE XREF: sub_1001B8A0+33j
					; sub_1001B8A0+53j
		xor	eax, eax
		mov	[esp+50h+var_40], eax
		mov	[esp+50h+var_3C], eax
		mov	[esp+50h+var_38], eax
		mov	[esp+50h+var_34], eax
		mov	[esp+20h], eax
		mov	[esp+50h+var_2C], eax
		mov	[esp+50h+var_28], eax
		mov	[esp+50h+var_24], eax
		mov	[esp+50h+var_20], eax
		mov	[esp+50h+var_1C], eax
		mov	[esp+50h+var_18], eax
		mov	[esp+50h+var_14], eax
		mov	[esp+50h+var_10], eax
		mov	[esp+50h+var_C], eax
		mov	[esp+50h+var_8], eax
		test	esi, esi
		jz	loc_1001BA46
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001BA23
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001BA00
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001B9DD
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001B9DD:				; CODE XREF: sub_1001B8A0+118j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001BA00:				; CODE XREF: sub_1001B8A0+113j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001BA23:				; CODE XREF: sub_1001B8A0+10Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001BA46:				; CODE XREF: sub_1001B8A0+105j
		mov	ecx, [esp+50h+var_4]
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
sub_1001B8A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001BA60	proc near		; CODE XREF: sub_100192B0+2Fp
					; sub_10019300+2Dp ...

var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0B4h
		push	ebx
		mov	ebx, [esp+0B8h+arg_4]
		mov	eax, ebx
		push	edi
		shr	eax, 3
		or	edi, 0FFFFFFFFh
		mov	[esp+0BCh+var_50], 0
		mov	[esp+0BCh+var_4C], 0
		mov	[esp+0BCh+var_48], 0
		mov	[esp+0BCh+var_A0], 0
		mov	[esp+0BCh+var_9C], 0
		mov	[esp+0BCh+var_98], 0
		mov	[esp+0BCh+var_6C], 0
		mov	[esp+0BCh+var_68], 0
		mov	[esp+0BCh+var_64], 0
		mov	[esp+0BCh+var_88], 0
		mov	[esp+0BCh+var_84], 0
		mov	[esp+0BCh+var_80], 0
		mov	[esp+0BCh+var_A8], 0
		cmp	[esp+0BCh+arg_C], eax
		jb	loc_1001C349
		cmp	[esp+0BCh+arg_10], 0
		jz	loc_1001C349
		cmp	[esp+0BCh+arg_14], 0
		jz	loc_1001C349
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1001BB35
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, edi
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 0B4h
		retn
; ---------------------------------------------------------------------------

loc_1001BB35:				; CODE XREF: sub_1001BA60+BAj
		push	ebp
		push	28h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebp, eax
		add	esp, 8
		mov	[esp+0C4h+var_B4], ebp
		test	ebp, ebp
		jnz	short loc_1001BB6E
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	esi

loc_1001BB58:				; CODE XREF: sub_1001BA60+133j
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 0B4h
		retn
; ---------------------------------------------------------------------------

loc_1001BB6E:				; CODE XREF: sub_1001BA60+E9j
		push	800h
		mov	[ebp+0], esi
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1001BB95
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	dword ptr [ebp+0]
		jmp	short loc_1001BB58
; ---------------------------------------------------------------------------

loc_1001BB95:				; CODE XREF: sub_1001BA60+122j
		push	20h
		push	esi
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[esp+0C4h+var_B0], eax
		test	eax, eax
		jnz	short loc_1001BBD5
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	esi
		call	PORT_FreeArena_Util
		push	1
		push	dword ptr [ebp+0]
		call	PORT_FreeArena_Util
		add	esp, 14h
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 0B4h
		retn
; ---------------------------------------------------------------------------

loc_1001BBD5:				; CODE XREF: sub_1001BA60+146j
		mov	[eax], esi
		lea	ebp, [eax+8]
		lea	eax, [esp+0C4h+var_60]
		mov	[esp+0C4h+var_A4], ebp
		push	eax
		mov	[esp+0C8h+var_54], 0
		mov	[esp+0C8h+var_70], 0
		mov	[esp+0C8h+var_24], 0
		mov	[esp+0C8h+var_34], 0
		mov	[esp+0C8h+var_14], 0
		mov	[esp+0C8h+var_4], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C23D
		lea	eax, [esp+0C4h+var_7C]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C23D
		lea	eax, [esp+0C4h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C23D
		lea	eax, [esp+0C4h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C23D
		lea	eax, [esp+0C4h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C23D
		lea	eax, [esp+0C4h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C23D
		push	ebx
		mov	ebx, [esp+0C8h+arg_0]
		push	ebx
		call	sub_1001A330
		lea	ecx, [ebx-1]
		mov	[esp+0CCh+var_AC], eax
		push	eax
		mov	[esp+0D0h+var_44], ecx
		call	sub_100190C0
		mov	ecx, eax
		xor	edx, edx
		shl	ecx, 3
		lea	eax, [ebx-1]
		add	esp, 0Ch
		div	ecx
		mov	[esp+0C4h+var_94], eax
		jmp	short loc_1001BCF0
; ---------------------------------------------------------------------------
		align 10h

loc_1001BCF0:				; CODE XREF: sub_1001BA60+285j
					; sub_1001BA60+342j ...
		mov	eax, [esp+0C4h+var_A8]
		mov	ecx, [esp+0C4h+arg_C]
		inc	eax
		mov	[esp+0C4h+var_A8], eax
		cmp	eax, 3E8h
		jg	loc_1001C230
		mov	eax, [esp+0C4h+var_B0]
		mov	[ebp+8], ecx
		push	dword ptr [eax]
		push	ebp
		call	sub_1001A370
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	loc_1001C23D
		mov	eax, [esp+0C4h+arg_8]
		test	eax, eax
		jnz	short loc_1001BD51
		mov	ecx, [esp+0C4h+arg_C]
		lea	eax, [esp+0C4h+var_7C]
		push	eax
		push	ebp
		lea	eax, ds:0[ecx*8]
		push	eax
		call	sub_1001B8A0
		add	esp, 0Ch
		jmp	short loc_1001BD73
; ---------------------------------------------------------------------------

loc_1001BD51:				; CODE XREF: sub_1001BA60+2D0j
		cmp	eax, 1
		jnz	loc_1001BEB9
		lea	eax, [esp+0C4h+var_7C]
		push	eax
		push	ebp
		push	[esp+0CCh+arg_4]
		push	[esp+0D0h+var_AC]
		call	sub_1001B740
		add	esp, 10h

loc_1001BD73:				; CODE XREF: sub_1001BA60+2EFj
		mov	edi, eax
		test	edi, edi
		jnz	loc_1001C23D
		push	[esp+0C4h+arg_4]
		push	ebx
		call	sub_1001C3D0
		push	eax
		lea	eax, [esp+0D0h+var_7C]
		push	eax
		call	sub_10026830
		add	esp, 10h
		mov	esi, eax
		neg	eax
		sbb	eax, eax
		mov	[esp+0C4h+var_8C], eax
		jnz	loc_1001BCF0
		mov	ebx, [esp+0C4h+arg_8]
		mov	eax, [esp+0C4h+arg_0]
		neg	ebx
		sbb	ebx, ebx
		add	ebx, 2
		cmp	eax, 400h
		jb	short loc_1001BDD1
		lea	ecx, ds:0FFFFFFFFh[eax*4]
		mov	[esp+0C4h+var_90], ecx
		jmp	short loc_1001BDD9
; ---------------------------------------------------------------------------

loc_1001BDD1:				; CODE XREF: sub_1001BA60+362j
		mov	[esp+0C4h+var_90], 0FFFh

loc_1001BDD9:				; CODE XREF: sub_1001BA60+36Fj
		xor	ebp, ebp
		jmp	short loc_1001BDE0
; ---------------------------------------------------------------------------
		align 10h

loc_1001BDE0:				; CODE XREF: sub_1001BA60+37Bj
					; sub_1001BA60+43Aj
		mov	edx, [esp+0C4h+arg_C]
		lea	ecx, [esp+0C4h+var_60]
		push	ecx
		lea	ecx, [esp+0C8h+var_7C]
		push	ecx
		push	[esp+0CCh+var_A4]
		lea	ecx, ds:0[edx*8]
		push	ecx
		push	ebx
		push	[esp+0D8h+arg_4]
		push	eax
		push	[esp+0E0h+var_AC]
		call	sub_1001A810
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jnz	loc_1001C23D
		push	1
		push	[esp+0C8h+var_44]
		lea	eax, [esp+0CCh+var_20]
		push	eax
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C23D
		lea	eax, [esp+0C4h+var_20]
		push	eax
		lea	eax, [esp+0C8h+var_60]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		js	short loc_1001BE85
		push	[esp+0C4h+arg_4]
		push	[esp+0C8h+arg_0]
		call	sub_1001C3D0
		push	eax
		lea	eax, [esp+0D0h+var_60]
		push	eax
		call	sub_10026830
		add	esp, 10h
		mov	esi, eax
		neg	eax
		sbb	eax, eax
		mov	[esp+0C4h+var_8C], eax
		jz	short loc_1001BE9F

loc_1001BE85:				; CODE XREF: sub_1001BA60+3F6j
		mov	eax, [esp+0C4h+var_94]
		inc	ebp
		inc	eax
		add	ebx, eax
		cmp	ebp, [esp+0C4h+var_90]
		ja	short loc_1001BEA9
		mov	eax, [esp+0C4h+arg_0]
		jmp	loc_1001BDE0
; ---------------------------------------------------------------------------

loc_1001BE9F:				; CODE XREF: sub_1001BA60+423j
		cmp	ebp, [esp+0C4h+var_90]
		jbe	loc_1001BFE0

loc_1001BEA9:				; CODE XREF: sub_1001BA60+431j
		mov	ebx, [esp+0C4h+arg_0]
		mov	ebp, [esp+0C4h+var_A4]
		jmp	loc_1001BCF0
; ---------------------------------------------------------------------------

loc_1001BEB9:				; CODE XREF: sub_1001BA60+2F4j
		mov	eax, [ebp+0]
		mov	[esp+0C4h+var_A0], eax
		mov	eax, [ebp+4]
		mov	[esp+0C4h+var_9C], eax
		mov	eax, [ebp+8]
		mov	[esp+0C4h+var_98], eax
		lea	eax, [esp+0C4h+var_94]
		push	eax
		lea	eax, [esp+0C8h+var_6C]
		mov	[esp+0C8h+var_94], 0
		push	eax
		lea	eax, [esp+0CCh+var_7C]
		push	eax
		lea	eax, [esp+0D0h+var_A0]
		push	eax
		push	[esp+0D4h+arg_4]
		push	[esp+0D8h+var_AC]
		call	sub_1001B3B0
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		jnz	loc_1001C23D
		mov	[esp+0C4h+var_A8], eax
		lea	eax, [esp+0C4h+var_A8]
		push	eax
		lea	eax, [esp+0C8h+var_88]
		push	eax
		lea	eax, [esp+0CCh+var_10]
		push	eax
		lea	eax, [esp+0D0h+var_6C]
		push	eax
		lea	eax, [ebx+1]
		shr	eax, 1
		inc	eax
		push	eax
		push	[esp+0D8h+var_AC]
		call	sub_1001B3B0
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		jnz	loc_1001C23D
		lea	eax, [esp+0C4h+var_A8]
		push	eax
		lea	eax, [esp+0C8h+var_88]
		push	eax
		lea	eax, [esp+0CCh+var_60]
		push	eax
		lea	eax, [esp+0D0h+var_7C]
		push	eax
		lea	eax, [esp+0D4h+var_10]
		push	eax
		push	ebx
		push	[esp+0DCh+var_AC]
		call	sub_1001AC60
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jnz	loc_1001C23D
		mov	ecx, [esp+0C4h+var_64]
		add	ecx, [esp+0C4h+var_80]
		mov	eax, [esp+0C4h+var_98]
		add	eax, ecx
		mov	[ebp+8], eax
		push	eax
		mov	eax, [esp+0C8h+var_B0]
		push	dword ptr [eax]
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[ebp+4], eax
		test	eax, eax
		jz	loc_1001C23D
		push	[esp+0C4h+var_98] ; size_t
		push	[esp+0C8h+var_9C] ; void *
		push	eax		; void *
		call	memcpy
		push	[esp+0D0h+var_80] ; size_t
		mov	eax, [ebp+4]
		push	[esp+0D4h+var_84] ; void *
		add	eax, [esp+0D8h+var_98]
		push	eax		; void *
		call	memcpy
		push	[esp+0DCh+var_64] ; size_t
		mov	eax, [ebp+4]
		add	eax, [esp+0E0h+var_80]
		push	[esp+0E0h+var_68] ; void *
		add	eax, [esp+0E4h+var_98]
		push	eax		; void *
		call	memcpy
		add	esp, 24h
		xor	ebp, ebp
		jmp	short loc_1001BFE7
; ---------------------------------------------------------------------------

loc_1001BFE0:				; CODE XREF: sub_1001BA60+443j
		mov	ebx, [esp+0C4h+arg_0]

loc_1001BFE7:				; CODE XREF: sub_1001BA60+57Ej
		cmp	[esp+0C4h+arg_8], 0
		jnz	loc_1001C0C8
		shr	ebx, 3
		lea	eax, [esp+0C4h+var_50]
		push	ebx
		push	eax
		push	0
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	[esp+0C4h+var_4C], 0
		jz	loc_1001C23D

loc_1001C013:				; CODE XREF: sub_1001BA60+608j
		lea	eax, [esp+0C4h+var_40]
		push	eax
		lea	eax, [esp+0C8h+var_50]
		push	eax
		call	sub_1001A2A0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	loc_1001C23D
		lea	eax, [esp+0C4h+var_8C]
		push	eax
		lea	eax, [esp+0C8h+var_30]
		push	eax
		lea	eax, [esp+0CCh+var_40]
		push	eax
		lea	eax, [esp+0D0h+var_7C]
		push	eax
		lea	eax, [esp+0D4h+var_60]
		push	eax
		call	sub_1001A3C0
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	loc_1001C23D
		cmp	[esp+0C4h+var_8C], 1
		jnz	short loc_1001C013
		lea	eax, [esp+0C4h+var_40]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001C086
		lea	esi, [edi-3]
		jmp	loc_1001C23D
; ---------------------------------------------------------------------------

loc_1001C086:				; CODE XREF: sub_1001BA60+61Cj
		mov	ebx, [esp+0C4h+var_B0]
		push	eax
		lea	eax, [ebx+14h]
		push	eax
		push	dword ptr [ebx]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+18h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001C0A8
		lea	esi, [eax-2]
		jmp	loc_1001C23D
; ---------------------------------------------------------------------------

loc_1001C0A8:				; CODE XREF: sub_1001BA60+63Ej
		push	dword ptr [ebx+1Ch]
		push	eax
		lea	eax, [esp+0CCh+var_40]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C23D
		jmp	short loc_1001C11B
; ---------------------------------------------------------------------------

loc_1001C0C8:				; CODE XREF: sub_1001BA60+58Fj
		mov	ebx, [esp+0C4h+var_B0]
		push	1
		push	dword ptr [ebx]
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[ebx+18h], eax
		test	eax, eax
		jz	loc_1001C23D
		mov	dword ptr [ebx+1Ch], 1
		mov	byte ptr [eax],	1
		lea	eax, [esp+0C4h+var_30]
		push	eax
		push	1
		push	[esp+0CCh+var_A4]
		lea	eax, [esp+0D0h+var_7C]
		push	eax
		lea	eax, [esp+0D4h+var_60]
		push	eax
		push	[esp+0D8h+var_AC]
		call	sub_1001A550
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		jnz	loc_1001C23D

loc_1001C11B:				; CODE XREF: sub_1001BA60+666j
		lea	eax, [esp+0C4h+var_60]
		push	eax
		call	sub_1002A950
		mov	ebx, [esp+0C8h+var_B4]
		add	esp, 4
		test	eax, eax
		jg	short loc_1001C13A
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001C241
; ---------------------------------------------------------------------------

loc_1001C13A:				; CODE XREF: sub_1001BA60+6CEj
		push	eax
		lea	eax, [ebx+4]
		push	eax
		push	dword ptr [ebx]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+8]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001C158
		lea	esi, [eax-2]
		jmp	loc_1001C241
; ---------------------------------------------------------------------------

loc_1001C158:				; CODE XREF: sub_1001BA60+6EEj
		push	dword ptr [ebx+0Ch]
		push	eax
		lea	eax, [esp+0CCh+var_60]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C241
		lea	eax, [esp+0C4h+var_7C]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001C18E
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001C241
; ---------------------------------------------------------------------------

loc_1001C18E:				; CODE XREF: sub_1001BA60+722j
		push	eax
		lea	eax, [ebx+10h]
		push	eax
		push	dword ptr [ebx]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+14h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001C1AC
		lea	esi, [eax-2]
		jmp	loc_1001C241
; ---------------------------------------------------------------------------

loc_1001C1AC:				; CODE XREF: sub_1001BA60+742j
		push	dword ptr [ebx+18h]
		push	eax
		lea	eax, [esp+0CCh+var_7C]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001C241
		lea	eax, [esp+0C4h+var_30]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001C1DE
		mov	esi, 0FFFFFFFDh
		jmp	short loc_1001C241
; ---------------------------------------------------------------------------

loc_1001C1DE:				; CODE XREF: sub_1001BA60+775j
		push	eax
		lea	eax, [ebx+1Ch]
		push	eax
		push	dword ptr [ebx]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+20h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001C1F9
		lea	esi, [eax-2]
		jmp	short loc_1001C241
; ---------------------------------------------------------------------------

loc_1001C1F9:				; CODE XREF: sub_1001BA60+792j
		push	dword ptr [ebx+24h]
		push	eax
		lea	eax, [esp+0CCh+var_30]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001C241
		mov	eax, [esp+0C4h+var_B0]
		xor	esi, esi
		mov	ecx, [esp+0C4h+arg_10]
		mov	[eax+4], ebp
		mov	[ecx], ebx
		mov	ecx, [esp+0C4h+arg_14]
		mov	[ecx], eax
		jmp	short loc_1001C241
; ---------------------------------------------------------------------------

loc_1001C230:				; CODE XREF: sub_1001BA60+2A5j
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4

loc_1001C23D:				; CODE XREF: sub_1001BA60+1CBj
					; sub_1001BA60+1E2j ...
		mov	ebx, [esp+0C4h+var_B4]

loc_1001C241:				; CODE XREF: sub_1001BA60+6D5j
					; sub_1001BA60+6F3j ...
		mov	eax, [esp+0C4h+var_84]
		test	eax, eax
		jz	short loc_1001C252
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_1001C252:				; CODE XREF: sub_1001BA60+7E7j
		mov	eax, [esp+0C4h+var_68]
		test	eax, eax
		jz	short loc_1001C263
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_1001C263:				; CODE XREF: sub_1001BA60+7F8j
		lea	eax, [esp+0C4h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C8h+var_7C]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0CCh+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D0h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D4h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D8h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 18h
		test	esi, esi
		jz	short loc_1001C309
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001C2F7
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001C2E5
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001C2D3
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	edi, 0FFFFFFFFh
		jmp	short loc_1001C30D
; ---------------------------------------------------------------------------

loc_1001C2D3:				; CODE XREF: sub_1001BA60+85Fj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	edi, 0FFFFFFFFh
		jmp	short loc_1001C30D
; ---------------------------------------------------------------------------

loc_1001C2E5:				; CODE XREF: sub_1001BA60+85Aj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	edi, 0FFFFFFFFh
		jmp	short loc_1001C30D
; ---------------------------------------------------------------------------

loc_1001C2F7:				; CODE XREF: sub_1001BA60+855j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	edi, 0FFFFFFFFh
		jmp	short loc_1001C30D
; ---------------------------------------------------------------------------

loc_1001C309:				; CODE XREF: sub_1001BA60+850j
		test	edi, edi
		jz	short loc_1001C326

loc_1001C30D:				; CODE XREF: sub_1001BA60+871j
					; sub_1001BA60+883j ...
		push	1
		push	dword ptr [ebx]
		call	PORT_FreeArena_Util
		mov	eax, [esp+0CCh+var_B0]
		push	1
		push	dword ptr [eax]
		call	PORT_FreeArena_Util
		add	esp, 10h

loc_1001C326:				; CODE XREF: sub_1001BA60+8ABj
		cmp	[esp+0C4h+var_4C], 0
		jz	short loc_1001C33C
		lea	eax, [esp+0C4h+var_50]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001C33C:				; CODE XREF: sub_1001BA60+8CBj
		pop	ebp
		pop	esi
		mov	eax, edi
		pop	edi
		pop	ebx
		add	esp, 0B4h
		retn
; ---------------------------------------------------------------------------

loc_1001C349:				; CODE XREF: sub_1001BA60+86j
					; sub_1001BA60+94j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		add	esp, 0B4h
		retn
sub_1001BA60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C370	proc near		; CODE XREF: sub_100190E0+9Ep
					; sub_10019410+24Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	eax, 400h
		jz	short loc_1001C3A5
		cmp	eax, 800h
		jz	short loc_1001C393
		cmp	eax, 0C00h
		jnz	short loc_1001C3AF
		cmp	[esp+arg_4], 100h
		jmp	short loc_1001C3AD
; ---------------------------------------------------------------------------

loc_1001C393:				; CODE XREF: sub_1001C370+10j
		mov	eax, [esp+arg_4]
		cmp	eax, 0E0h
		jz	short loc_1001C3C0
		cmp	eax, 100h
		jmp	short loc_1001C3AD
; ---------------------------------------------------------------------------

loc_1001C3A5:				; CODE XREF: sub_1001C370+9j
		cmp	[esp+arg_4], 0A0h

loc_1001C3AD:				; CODE XREF: sub_1001C370+21j
					; sub_1001C370+33j
		jz	short loc_1001C3C0

loc_1001C3AF:				; CODE XREF: sub_1001C370+17j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1001C3C0:				; CODE XREF: sub_1001C370+2Cj
					; sub_1001C370:loc_1001C3ADj
		xor	eax, eax
		retn
sub_1001C370	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C3D0	proc near		; CODE XREF: sub_10019410+2D1p
					; sub_10019410+2F1p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 400h
		jz	short loc_1001C3F8
		cmp	eax, 800h
		jz	short loc_1001C3F2
		sub	eax, 0C00h
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFFFF2h
		add	eax, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001C3F2:				; CODE XREF: sub_1001C3D0+10j
		mov	eax, 38h
		retn
; ---------------------------------------------------------------------------

loc_1001C3F8:				; CODE XREF: sub_1001C3D0+9j
		mov	eax, 28h
		retn
sub_1001C3D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C400	proc near		; DATA XREF: .rdata:1003E238o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	edi
		call	sub_100190E0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1001C47C
		push	ebx
		push	esi
		mov	[esp+18h+var_8], eax
		lea	ebx, [edi+10h]
		lea	eax, [esp+18h+var_C]
		push	eax
		push	ebx
		push	0
		call	sub_1001C4D0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1001C469
		push	ebx
		call	sub_10019290
		add	esp, 4
		cmp	[esp+18h+var_4], eax
		jz	short loc_1001C455
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001C469
; ---------------------------------------------------------------------------

loc_1001C455:				; CODE XREF: sub_1001C400+41j
		push	[esp+18h+arg_4]
		lea	eax, [esp+1Ch+var_C]
		push	eax
		push	edi
		call	sub_1001CCB0
		add	esp, 0Ch
		mov	esi, eax

loc_1001C469:				; CODE XREF: sub_1001C400+32j
					; sub_1001C400+53j
		lea	eax, [esp+18h+var_C]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebx

loc_1001C47C:				; CODE XREF: sub_1001C400+13j
		pop	edi
		add	esp, 0Ch
		retn
sub_1001C400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C490	proc near		; DATA XREF: .rdata:1003E244o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		push	esi
		mov	esi, [esp+10h+arg_0]
		mov	[esp+10h+var_8], eax
		lea	eax, [esi+10h]
		push	eax
		call	sub_10019290
		push	[esp+14h+arg_8]
		mov	[esp+18h+var_4], eax
		lea	eax, [esp+18h+var_C]
		push	eax
		push	esi
		call	sub_1001CCB0
		add	esp, 10h
		pop	esi
		add	esp, 0Ch
		retn
sub_1001C490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C4D0	proc near		; CODE XREF: sub_1001C400+26p
					; sub_100253A0+3D5p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+arg_4]
		push	edi
		mov	edi, 0Ah
		test	ebp, ebp
		jz	loc_1001C597
		mov	ecx, [ebp+4]
		test	ecx, ecx
		jz	loc_1001C597
		mov	eax, [ebp+8]
		test	eax, eax
		jz	loc_1001C597
		cmp	byte ptr [ecx],	0
		jnz	short loc_1001C507
		cmp	eax, 1
		jz	loc_1001C597

loc_1001C507:				; CODE XREF: sub_1001C4D0+2Cj
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		push	eax
		push	esi
		push	[esp+14h+arg_0]
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001C525
		pop	esi
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001C525:				; CODE XREF: sub_1001C4D0+4Cj
		push	ebx
		lea	ebx, [esi+8]
		lea	esp, [esp+0]

loc_1001C530:				; CODE XREF: sub_1001C4D0+97j
		push	dword ptr [ebx]
		push	ebx
		push	dword ptr [esi+4]
		push	ebp
		call	sub_1001CC10
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1001C576
		mov	ecx, [ebx]
		dec	ecx
		jz	short loc_1001C55B
		mov	edx, [esi+4]
		jmp	short loc_1001C550
; ---------------------------------------------------------------------------
		align 10h

loc_1001C550:				; CODE XREF: sub_1001C4D0+7Bj
					; sub_1001C4D0+89j
		cmp	byte ptr [edx+eax], 0
		jnz	short loc_1001C590
		inc	eax
		cmp	eax, ecx
		jb	short loc_1001C550

loc_1001C55B:				; CODE XREF: sub_1001C4D0+76j
		mov	ecx, [esi+4]
		cmp	byte ptr [eax+ecx], 1
		ja	short loc_1001C590
		dec	edi
		test	edi, edi
		jg	short loc_1001C530
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4

loc_1001C576:				; CODE XREF: sub_1001C4D0+71j
		cmp	[esp+10h+arg_0], 0
		jz	short loc_1001C588
		push	0
		push	esi
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001C588:				; CODE XREF: sub_1001C4D0+ABj
		pop	ebx
		pop	esi
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001C590:				; CODE XREF: sub_1001C4D0+84j
					; sub_1001C4D0+92j
		pop	ebx
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001C597:				; CODE XREF: sub_1001C4D0+Dj
					; sub_1001C4D0+18j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		retn
sub_1001C4D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C5B0	proc near		; DATA XREF: .rdata:1003E23Co

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 30h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+30h+var_4], eax
		mov	eax, [esp+30h+arg_4]
		push	ebx
		mov	ebx, [esp+34h+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	[esp+40h+var_28], eax
		lea	esi, [ebx+10h]
		mov	eax, [esp+40h+arg_8]
		mov	edi, 0Ah
		push	esi
		mov	[esp+44h+var_2C], eax
		mov	[esp+44h+var_30], 0
		call	sub_10019290
		push	0
		mov	ebp, eax
		call	PORT_SetError_Util
		add	esp, 8

loc_1001C5F8:				; CODE XREF: sub_1001C5B0+A0j
		push	20h
		lea	eax, [esp+44h+var_30]
		push	eax
		lea	eax, [esp+48h+var_24]
		push	eax
		push	esi
		call	sub_1001CC10
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1001C682
		mov	ecx, [esp+40h+var_30]
		cmp	ecx, ebp
		jnz	short loc_1001C670
		test	ecx, ecx
		jz	short loc_1001C62C
		lea	ecx, [ecx+0]

loc_1001C620:				; CODE XREF: sub_1001C5B0+7Aj
		cmp	[esp+eax+40h+var_24], 0
		jnz	short loc_1001C652
		inc	eax
		cmp	eax, ecx
		jb	short loc_1001C620

loc_1001C62C:				; CODE XREF: sub_1001C5B0+6Bj
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh

loc_1001C63C:				; CODE XREF: sub_1001C5B0+BEj
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE03Fh
		jnz	short loc_1001C680
		dec	edi
		test	edi, edi
		jle	short loc_1001C680
		lea	esi, [ebx+10h]
		jmp	short loc_1001C5F8
; ---------------------------------------------------------------------------

loc_1001C652:				; CODE XREF: sub_1001C5B0+75j
		lea	eax, [esp+40h+var_24]
		push	eax
		push	[esp+44h+var_2C]
		push	[esp+48h+var_28]
		push	ebx
		call	sub_1001CF70
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_1001C680
		jmp	short loc_1001C63C
; ---------------------------------------------------------------------------

loc_1001C670:				; CODE XREF: sub_1001C5B0+67j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh

loc_1001C680:				; CODE XREF: sub_1001C5B0+96j
					; sub_1001C5B0+9Bj ...
		mov	eax, esi

loc_1001C682:				; CODE XREF: sub_1001C5B0+5Fj
		mov	ecx, [esp+40h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
sub_1001C5B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_1001C6A0	proc near		; DATA XREF: .rdata:1003E248o
		jmp	sub_1001CF70
sub_1001C6A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C6B0	proc near		; CODE XREF: sub_10021660+235p
					; DATA XREF: .rdata:1003E240o

var_C8		= byte ptr -0C8h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= byte ptr -0B4h
var_A8		= dword	ptr -0A8h
var_A4		= byte ptr -0A4h
var_98		= dword	ptr -98h
var_94		= byte ptr -94h
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0C8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0C8h+var_4], eax
		push	ebp
		mov	ebp, [esp+0CCh+arg_8]
		push	esi
		mov	esi, [esp+0D0h+arg_4]
		push	edi
		mov	edi, [esp+0D4h+arg_0]
		mov	[esp+0D4h+var_B8], esi
		test	edi, edi
		jz	loc_1001CBC1
		test	esi, esi
		jz	loc_1001CBC1
		test	ebp, ebp
		jz	loc_1001CBC1
		lea	eax, [edi+10h]
		push	ebx
		push	eax
		call	sub_10019290
		mov	ebx, eax
		add	esp, 4
		lea	eax, [ebx+ebx]
		cmp	[esi+8], eax
		jnz	loc_1001CBAF
		mov	esi, [ebp+8]
		cmp	esi, 40h
		ja	loc_1001CBAF
		cmp	esi, 14h
		jb	loc_1001CBAF
		push	ebx		; size_t
		lea	eax, [esp+0DCh+var_24]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		cmp	esi, ebx
		jnb	short loc_1001C745
		mov	ecx, ebx
		sub	ecx, esi
		jmp	short loc_1001C747
; ---------------------------------------------------------------------------

loc_1001C745:				; CODE XREF: sub_1001C6B0+8Dj
		xor	ecx, ecx

loc_1001C747:				; CODE XREF: sub_1001C6B0+93j
		mov	eax, ebx
		sub	eax, ecx
		push	eax		; size_t
		push	dword ptr [ebp+4] ; void *
		lea	eax, [esp+0E0h+var_24]
		add	eax, ecx
		push	eax		; void *
		call	memcpy
		lea	eax, [esp+0E4h+var_74]
		mov	[esp+0E4h+var_68], 0
		push	eax
		mov	[esp+0E8h+var_BC], 0
		mov	[esp+0E8h+var_58], 0
		mov	[esp+0E8h+var_98], 0
		mov	[esp+0E8h+var_A8], 0
		mov	[esp+0E8h+var_48], 0
		mov	[esp+0E8h+var_88], 0
		mov	[esp+0E8h+var_28], 0
		mov	[esp+0E8h+var_78], 0
		mov	[esp+0E8h+var_38], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_C8]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_64]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_A4]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_B4]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_54]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_94]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_34]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_84]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_44]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CB14
		push	dword ptr [edi+0Ch]
		lea	eax, [esp+0DCh+var_74]
		push	dword ptr [edi+8]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CB14
		push	dword ptr [edi+18h]
		lea	eax, [esp+0DCh+var_C8]
		push	dword ptr [edi+14h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CB14
		push	dword ptr [edi+24h]
		lea	eax, [esp+0DCh+var_64]
		push	dword ptr [edi+20h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CB14
		push	dword ptr [edi+30h]
		lea	eax, [esp+0DCh+var_A4]
		push	dword ptr [edi+2Ch]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CB14
		mov	edi, [esp+0D8h+var_B8]
		lea	eax, [esp+0D8h+var_B4]
		push	ebx
		push	dword ptr [edi+4]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CB14
		mov	eax, [edi+4]
		add	eax, ebx
		push	ebx
		push	eax
		lea	eax, [esp+0E0h+var_54]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_B4]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jle	loc_1001CB07
		lea	eax, [esp+0D8h+var_54]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jle	loc_1001CB07
		lea	eax, [esp+0D8h+var_C8]
		push	eax
		lea	eax, [esp+0DCh+var_B4]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_1001CB07
		lea	eax, [esp+0D8h+var_C8]
		push	eax
		lea	eax, [esp+0DCh+var_54]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_1001CB07
		lea	eax, [esp+0D8h+var_44]
		push	eax
		lea	eax, [esp+0DCh+var_C8]
		push	eax
		lea	eax, [esp+0E0h+var_54]
		push	eax
		call	sub_100299A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CB14
		push	ebx
		lea	eax, [esp+0DCh+var_24]
		push	eax
		lea	eax, [esp+0E0h+var_94]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_94]
		push	eax
		lea	eax, [esp+0DCh+var_C8]
		push	eax
		lea	eax, [esp+0E0h+var_44]
		push	eax
		lea	eax, [esp+0E4h+var_94]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_34]
		push	eax
		lea	eax, [esp+0DCh+var_C8]
		push	eax
		lea	eax, [esp+0E0h+var_44]
		push	eax
		lea	eax, [esp+0E4h+var_B4]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_64]
		push	eax
		lea	eax, [esp+0DCh+var_74]
		push	eax
		lea	eax, [esp+0E0h+var_94]
		push	eax
		lea	eax, [esp+0E4h+var_64]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001CB14
		lea	eax, [esp+0D8h+var_A4]
		push	eax
		lea	eax, [esp+0DCh+var_74]
		push	eax
		lea	eax, [esp+0E0h+var_34]
		push	eax
		lea	eax, [esp+0E4h+var_A4]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001CB14
		lea	eax, [esp+0D8h+var_84]
		push	eax
		lea	eax, [esp+0DCh+var_74]
		push	eax
		lea	eax, [esp+0E0h+var_A4]
		push	eax
		lea	eax, [esp+0E4h+var_64]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001CB14
		lea	eax, [esp+0D8h+var_84]
		push	eax
		lea	eax, [esp+0DCh+var_C8]
		push	eax
		lea	eax, [esp+0E0h+var_84]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001CB14
		lea	eax, [esp+0D8h+var_B4]
		push	eax
		lea	eax, [esp+0DCh+var_84]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001CB07
		xor	ebx, ebx
		jmp	short loc_1001CB17
; ---------------------------------------------------------------------------

loc_1001CB07:				; CODE XREF: sub_1001C6B0+2BCj
					; sub_1001C6B0+2D4j ...
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4

loc_1001CB14:				; CODE XREF: sub_1001C6B0+11Bj
					; sub_1001C6B0+132j ...
		or	ebx, 0FFFFFFFFh

loc_1001CB17:				; CODE XREF: sub_1001C6B0+455j
		lea	eax, [esp+0D8h+var_74]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0DCh+var_C8]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E0h+var_64]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E4h+var_A4]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E8h+var_B4]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0ECh+var_54]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0F0h+var_94]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0F4h+var_34]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0F8h+var_84]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0FCh+var_44]
		push	eax
		call	sub_10028F00
		add	esp, 28h
		test	esi, esi
		jz	short loc_1001CB94
		push	esi
		call	sub_1001D560
		add	esp, 4

loc_1001CB94:				; CODE XREF: sub_1001C6B0+4D9j
		mov	eax, ebx

loc_1001CB96:				; CODE XREF: sub_1001C6B0+50Fj
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+0C8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C8h
		retn
; ---------------------------------------------------------------------------

loc_1001CBAF:				; CODE XREF: sub_1001C6B0+5Dj
					; sub_1001C6B0+69j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001CB96
; ---------------------------------------------------------------------------

loc_1001CBC1:				; CODE XREF: sub_1001C6B0+32j
					; sub_1001C6B0+3Aj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		mov	ecx, [esp+0D8h+var_4]
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C8h
		retn
sub_1001C6B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001CBF0	proc near		; DATA XREF: .rdata:1003E478o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	14h
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	sub_1001D400
		add	esp, 10h
		retn
sub_1001CBF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001CC10	proc near		; CODE XREF: sub_1001C4D0+67p
					; sub_1001C5B0+55p

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		sub	esp, 0Ch
		push	esi
		mov	esi, [eax+8]
		push	edi
		mov	edi, [eax+4]
		cmp	byte ptr [edi],	0
		jnz	short loc_1001CC26
		inc	edi
		dec	esi

loc_1001CC26:				; CODE XREF: sub_1001CC10+12j
		cmp	[esp+14h+arg_C], esi
		jnb	short loc_1001CC42
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1001CC39:				; CODE XREF: sub_1001CC10+4Fj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001CC42:				; CODE XREF: sub_1001CC10+1Aj
		lea	eax, [esi+esi]
		mov	[esp+14h+var_8], 0
		push	eax
		lea	eax, [esp+18h+var_C]
		push	eax
		push	0
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1001CC39
		mov	eax, [esp+14h+arg_8]
		push	ebx
		push	[esp+18h+var_4]	; size_t
		push	[esp+1Ch+var_8]	; void *
		mov	[eax], esi
		call	sub_1000C220
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_1001CC92
		push	[esp+18h+arg_4]
		push	esi
		push	edi
		push	[esp+24h+var_8]
		call	sub_1001D400
		add	esp, 10h
		mov	ebx, eax

loc_1001CC92:				; CODE XREF: sub_1001CC10+6Cj
		lea	eax, [esp+18h+var_C]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 0Ch
		retn
sub_1001CC10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001CCB0	proc near		; CODE XREF: sub_1001C400+5Fp
					; sub_1001C490+27p

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 40h
		push	ebp
		mov	ebp, [esp+44h+arg_0]
		test	ebp, ebp
		jz	loc_1001CF54
		cmp	[esp+44h+arg_8], 0
		jz	loc_1001CF54
		mov	eax, [esp+44h+arg_4]
		test	eax, eax
		jz	loc_1001CF54
		cmp	dword ptr [eax+4], 0
		jz	loc_1001CF54
		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_1001CD0B
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001CD0B:				; CODE XREF: sub_1001CCB0+43j
		push	edi
		push	40h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1001CD3C
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001CD3C:				; CODE XREF: sub_1001CCB0+6Bj
		mov	[edi], ebx
		lea	eax, [esp+4Ch+var_30]
		push	esi
		push	eax
		mov	[esp+54h+var_24], 0
		mov	[esp+54h+var_14], 0
		mov	[esp+54h+var_4], 0
		mov	[esp+54h+var_34], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CEF7
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CEF7
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CEF7
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001CEF7
		lea	eax, [ebp+4]
		push	eax
		lea	eax, [edi+4]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CEF7
		lea	eax, [ebp+10h]
		push	eax
		lea	eax, [edi+10h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CEF7
		lea	eax, [ebp+1Ch]
		push	eax
		lea	eax, [edi+1Ch]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CEF7
		push	dword ptr [ebp+0Ch]
		lea	eax, [esp+54h+var_30]
		push	dword ptr [ebp+8]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CEF7
		push	dword ptr [ebp+24h]
		lea	eax, [esp+54h+var_20]
		push	dword ptr [ebp+20h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CEF7
		mov	ebp, [esp+50h+arg_4]
		lea	eax, [esp+50h+var_10]
		push	dword ptr [ebp+8]
		push	dword ptr [ebp+4]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001CEF7
		push	dword ptr [ebp+8]
		lea	eax, [edi+34h]
		push	eax
		push	ebx
		call	SECITEM_AllocItem_Util
		push	dword ptr [ebp+8] ; size_t
		push	dword ptr [ebp+4] ; void *
		push	dword ptr [edi+38h] ; void *
		call	memcpy
		lea	eax, [esp+68h+var_40]
		push	eax
		lea	eax, [esp+6Ch+var_30]
		push	eax
		lea	eax, [esp+70h+var_10]
		push	eax
		lea	eax, [esp+74h+var_20]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 28h
		test	esi, esi
		js	short loc_1001CEF7
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001CEBC
		mov	esi, 0FFFFFFFDh
		jmp	short loc_1001CEF7
; ---------------------------------------------------------------------------

loc_1001CEBC:				; CODE XREF: sub_1001CCB0+203j
		push	eax
		lea	eax, [edi+28h]
		push	eax
		push	ebx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+2Ch]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001CED6
		lea	esi, [eax-2]
		jmp	short loc_1001CEF7
; ---------------------------------------------------------------------------

loc_1001CED6:				; CODE XREF: sub_1001CCB0+21Fj
		push	dword ptr [edi+30h]
		push	eax
		lea	eax, [esp+58h+var_40]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001CEF7
		mov	eax, [esp+50h+arg_8]
		xor	esi, esi
		mov	[eax], edi
		xor	edi, edi

loc_1001CEF7:				; CODE XREF: sub_1001CCB0+C0j
					; sub_1001CCB0+D7j ...
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+54h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+58h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+5Ch+var_40]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		test	edi, edi
		jz	short loc_1001CF32
		push	1
		push	dword ptr [edi]
		call	PORT_FreeArena_Util
		add	esp, 8

loc_1001CF32:				; CODE XREF: sub_1001CCB0+274j
		test	esi, esi
		jz	short loc_1001CF4A
		push	esi
		call	sub_1001D560
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	edi
		pop	ebx
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001CF4A:				; CODE XREF: sub_1001CCB0+284j
		pop	esi
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001CF54:				; CODE XREF: sub_1001CCB0+Aj
					; sub_1001CCB0+15j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
sub_1001CCB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001CF70	proc near		; CODE XREF: sub_1001C5B0+B0p
					; sub_1001C6A0j

var_9C		= byte ptr -9Ch
var_90		= dword	ptr -90h
var_8C		= byte ptr -8Ch
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 9Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+9Ch+var_4], eax
		mov	eax, [esp+9Ch+arg_C]
		push	ebp
		mov	ebp, [esp+0A0h+arg_4]
		push	esi
		mov	esi, [esp+0A4h+arg_8]
		push	edi
		mov	edi, [esp+0A8h+arg_0]
		mov	[esp+0A8h+var_5C], esi
		mov	[esp+0A8h+var_58], eax
		test	edi, edi
		jz	loc_1001D3CF
		test	ebp, ebp
		jz	loc_1001D3CF
		test	esi, esi
		jz	loc_1001D3CF
		lea	eax, [edi+10h]
		push	ebx
		push	eax
		call	sub_10019290
		mov	ebx, eax
		add	esp, 4
		lea	eax, [ebx+ebx]
		cmp	[ebp+8], eax
		jb	loc_1001D3BD
		mov	esi, [esi+8]
		cmp	esi, 40h
		ja	loc_1001D3BD
		cmp	esi, 14h
		jb	loc_1001D3BD
		push	ebx		; size_t
		lea	eax, [esp+0B0h+var_24]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		cmp	esi, ebx
		jnb	short loc_1001D010
		mov	ecx, ebx
		sub	ecx, esi
		jmp	short loc_1001D012
; ---------------------------------------------------------------------------

loc_1001D010:				; CODE XREF: sub_1001CF70+98j
		xor	ecx, ecx

loc_1001D012:				; CODE XREF: sub_1001CF70+9Ej
		mov	eax, ebx
		sub	eax, ecx
		push	eax		; size_t
		mov	eax, [esp+0B0h+var_5C]
		push	dword ptr [eax+4] ; void *
		lea	eax, [esp+0B4h+var_24]
		add	eax, ecx
		push	eax		; void *
		call	memcpy
		lea	eax, [esp+0B8h+var_34]
		mov	[esp+0B8h+var_28], 0
		push	eax
		mov	[esp+0BCh+var_70], 0
		mov	[esp+0BCh+var_38], 0
		mov	[esp+0BCh+var_48], 0
		mov	[esp+0BCh+var_60], 0
		mov	[esp+0BCh+var_80], 0
		mov	[esp+0BCh+var_90], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_7C]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_44]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_54]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_6C]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_8C]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_9C]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001D2F8
		push	dword ptr [edi+0Ch]
		lea	eax, [esp+0B0h+var_34]
		push	dword ptr [edi+8]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001D2F8
		push	dword ptr [edi+18h]
		lea	eax, [esp+0B0h+var_7C]
		push	dword ptr [edi+14h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001D2F8
		push	dword ptr [edi+24h]
		lea	eax, [esp+0B0h+var_44]
		push	dword ptr [edi+20h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001D2F8
		push	dword ptr [edi+3Ch]
		lea	eax, [esp+0B0h+var_54]
		push	dword ptr [edi+38h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001D2F8
		push	ebx
		push	[esp+0B0h+var_58]
		lea	eax, [esp+0B4h+var_6C]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_8C]
		push	eax
		lea	eax, [esp+0B0h+var_34]
		push	eax
		lea	eax, [esp+0B4h+var_6C]
		push	eax
		lea	eax, [esp+0B8h+var_44]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_8C]
		push	eax
		lea	eax, [esp+0B0h+var_7C]
		push	eax
		lea	eax, [esp+0B4h+var_8C]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001D2F8
		push	ebx
		lea	eax, [esp+0B0h+var_24]
		push	eax
		lea	eax, [esp+0B4h+var_9C]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_6C]
		push	eax
		lea	eax, [esp+0B0h+var_7C]
		push	eax
		lea	eax, [esp+0B4h+var_6C]
		push	eax
		call	sub_100299A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_54]
		push	eax
		lea	eax, [esp+0B0h+var_7C]
		push	eax
		lea	eax, [esp+0B4h+var_8C]
		push	eax
		lea	eax, [esp+0B8h+var_54]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_9C]
		push	eax
		lea	eax, [esp+0B0h+var_7C]
		push	eax
		lea	eax, [esp+0B4h+var_54]
		push	eax
		lea	eax, [esp+0B8h+var_9C]
		push	eax
		call	sub_10028EB0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001D2F8
		lea	eax, [esp+0ACh+var_9C]
		push	eax
		lea	eax, [esp+0B0h+var_7C]
		push	eax
		lea	eax, [esp+0B4h+var_6C]
		push	eax
		lea	eax, [esp+0B8h+var_9C]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001D2F8
		lea	eax, [esp+0ACh+var_8C]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jz	loc_1001D3A8
		lea	eax, [esp+0ACh+var_9C]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jz	loc_1001D3A8
		push	ebx
		push	dword ptr [ebp+4]
		lea	eax, [esp+0B4h+var_8C]
		push	eax
		call	sub_1002A760
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001D2F8
		mov	eax, [ebp+4]
		add	eax, ebx
		push	ebx
		push	eax
		lea	eax, [esp+0B4h+var_9C]
		push	eax
		call	sub_1002A760
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001D2F8
		lea	eax, [ebx+ebx]
		xor	esi, esi
		mov	[ebp+8], eax

loc_1001D2F8:				; CODE XREF: sub_1001CF70+10Fj
					; sub_1001CF70+126j ...
		xor	ebx, ebx

loc_1001D2FA:				; CODE XREF: sub_1001CF70+448j
		xor	eax, eax
		mov	[esp+0ACh+var_24], eax
		mov	[esp+0ACh+var_20], eax
		mov	[esp+0ACh+var_1C], eax
		mov	[esp+0ACh+var_18], eax
		mov	[esp+0ACh+var_14], eax
		mov	[esp+0ACh+var_10], eax
		mov	[esp+0ACh+var_C], eax
		mov	[esp+0ACh+var_8], eax
		lea	eax, [esp+0ACh+var_34]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B0h+var_7C]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B4h+var_44]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B8h+var_54]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0BCh+var_6C]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C0h+var_8C]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C4h+var_9C]
		push	eax
		call	sub_10028F00
		add	esp, 1Ch
		test	esi, esi
		jz	short loc_1001D38D
		push	esi
		call	sub_1001D560
		add	esp, 4
		or	ebx, 0FFFFFFFFh

loc_1001D38D:				; CODE XREF: sub_1001CF70+40Fj
		mov	eax, ebx

loc_1001D38F:				; CODE XREF: sub_1001CF70+45Dj
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+9Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 9Ch
		retn
; ---------------------------------------------------------------------------

loc_1001D3A8:				; CODE XREF: sub_1001CF70+334j
					; sub_1001CF70+349j
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001D2FA
; ---------------------------------------------------------------------------

loc_1001D3BD:				; CODE XREF: sub_1001CF70+68j
					; sub_1001CF70+74j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001D38F
; ---------------------------------------------------------------------------

loc_1001D3CF:				; CODE XREF: sub_1001CF70+3Dj
					; sub_1001CF70+45j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		mov	ecx, [esp+0ACh+var_4]
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 9Ch
		retn
sub_1001CF70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001D400	proc near		; CODE XREF: sub_1001CBF0+Ep
					; sub_1001CC10+78p

var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 30h
		lea	eax, [esp+30h+var_30]
		mov	[esp+30h+var_24], 0
		push	esi
		push	eax
		mov	[esp+38h+var_14], 0
		mov	[esp+38h+var_4], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001D4C2
		lea	eax, [esp+34h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_1001D4C2
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_1001D4C2
		push	edi
		mov	edi, [esp+38h+arg_8]
		lea	eax, [edi+edi]
		push	eax
		push	[esp+3Ch+arg_0]
		lea	eax, [esp+40h+var_30]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001D4C1
		push	edi
		push	[esp+3Ch+arg_4]
		lea	eax, [esp+40h+var_20]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001D4C1
		lea	eax, [esp+38h+var_10]
		push	eax
		lea	eax, [esp+3Ch+var_20]
		push	eax
		lea	eax, [esp+40h+var_30]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001D4C1
		push	edi
		push	[esp+3Ch+arg_C]
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_1002A760
		add	esp, 0Ch
		mov	esi, eax

loc_1001D4C1:				; CODE XREF: sub_1001D400+76j
					; sub_1001D400+8Ej ...
		pop	edi

loc_1001D4C2:				; CODE XREF: sub_1001D400+2Cj
					; sub_1001D400+43j ...
		lea	eax, [esp+34h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+38h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1001D54A
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001D535
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001D520
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001D50B
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001D50B:				; CODE XREF: sub_1001D400+F4j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001D520:				; CODE XREF: sub_1001D400+EFj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001D535:				; CODE XREF: sub_1001D400+EAj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001D54A:				; CODE XREF: sub_1001D400+E5j
		xor	eax, eax
		pop	esi
		add	esp, 30h
		retn
sub_1001D400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001D560	proc near		; CODE XREF: sub_1001C6B0+4DCp
					; sub_1001CCB0+287p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1001D59A
		cmp	eax, 0FFFFFFFDh
		jz	short loc_1001D58D
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1001D580
		mov	[esp+arg_0], 0FFFFE001h
		jmp	PORT_SetError_Util
; ---------------------------------------------------------------------------

loc_1001D580:				; CODE XREF: sub_1001D560+11j
		mov	[esp+arg_0], 0FFFFE013h
		jmp	PORT_SetError_Util
; ---------------------------------------------------------------------------

loc_1001D58D:				; CODE XREF: sub_1001D560+Cj
		mov	[esp+arg_0], 0FFFFE002h
		jmp	PORT_SetError_Util
; ---------------------------------------------------------------------------

loc_1001D59A:				; CODE XREF: sub_1001D560+7j
		mov	[esp+arg_0], 0FFFFE005h
		jmp	PORT_SetError_Util
sub_1001D560	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_1001D5B0	proc near		; DATA XREF: .rdata:1003E350o
		jmp	sub_1001D600
sub_1001D5B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001D5C0	proc near		; DATA XREF: .rdata:1003E4B4o
		push	offset sub_1001ECB0
		push	offset dword_100504F4
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1001D5E8
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1001D5E8:				; CODE XREF: sub_1001D5C0+15j
		xor	eax, eax
		retn
sub_1001D5C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001D5F0	proc near		; DATA XREF: .rdata:1003E4B8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_10050838,	eax
		retn
sub_1001D5F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001D600	proc near		; CODE XREF: sub_1001D5B0j
		cmp	dword_100504F4,	0
		jz	locret_1001D6D4
		push	esi
		mov	esi, dword_100504EC
		cmp	esi, offset dword_100504EC
		jz	short loc_1001D67B
		push	edi
		lea	ecx, [ecx+0]

loc_1001D620:				; CODE XREF: sub_1001D600+78j
		mov	ecx, [esi+4]
		mov	eax, [esi]
		mov	[ecx], eax
		mov	ecx, [esi]
		mov	eax, [esi+4]
		mov	[ecx+4], eax
		cmp	dword ptr [esi+18h], 0
		jz	short loc_1001D658

loc_1001D635:				; CODE XREF: sub_1001D600+56j
		mov	edi, [esi+18h]
		mov	eax, [edi]
		mov	[esi+18h], eax
		lea	eax, [edi+4]
		push	eax
		call	sub_10028F00
		lea	eax, [edi+14h]
		push	eax
		call	sub_10028F00
		add	esp, 8
		cmp	dword ptr [esi+18h], 0
		jnz	short loc_1001D635

loc_1001D658:				; CODE XREF: sub_1001D600+33j
		lea	eax, [esi+8]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		push	esi
		call	PORT_Free_Util
		mov	esi, dword_100504EC
		add	esp, 0Ch
		cmp	esi, offset dword_100504EC
		jnz	short loc_1001D620
		pop	edi

loc_1001D67B:				; CODE XREF: sub_1001D600+1Aj
		mov	eax, dword_100504E4
		pop	esi
		test	eax, eax
		jz	short loc_1001D699
		push	eax
		call	ds:PR_DestroyCondVar
		add	esp, 4
		mov	dword_100504E4,	0

loc_1001D699:				; CODE XREF: sub_1001D600+83j
		mov	eax, dword_100504E0
		test	eax, eax
		jz	short loc_1001D6B6
		push	eax
		call	ds:PR_DestroyLock
		add	esp, 4

__cfltcvt_init:
		mov	dword_100504E0,	0

loc_1001D6B6:				; CODE XREF: sub_1001D600+A0j
		mov	dword_100504F4,	0
		mov	dword_100504F8,	0
		mov	dword_100504FC,	0

locret_1001D6D4:			; CODE XREF: sub_1001D600+7j
		retn
sub_1001D600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001D6E0(int,	size_t)
sub_1001D6E0	proc near		; DATA XREF: .rdata:1003E22Co

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 44h
		push	esi
		push	edi
		mov	edi, [esp+4Ch+arg_4]
		xor	esi, esi
		test	edi, edi
		jz	loc_1001D982
		mov	ecx, [esp+4Ch+arg_0]
		mov	eax, ecx
		and	eax, 8000000Fh
		jns	short loc_1001D705
		dec	eax
		or	eax, 0FFFFFFF0h
		inc	eax

loc_1001D705:				; CODE XREF: sub_1001D6E0+1Ej
		jnz	loc_1001D982
		mov	eax, ecx
		mov	ecx, [edi+8]
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	ecx, eax
		ja	loc_1001D982
		cmp	eax, 800h
		jg	loc_1001D982
		cmp	ecx, 8
		ja	loc_1001D982
		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		mov	[esp+50h+var_44], ebx
		test	ebx, ebx
		jnz	short loc_1001D763
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_1001D763:				; CODE XREF: sub_1001D6E0+6Bj
		push	ebp
		push	70h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_1001D794
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_1001D794:				; CODE XREF: sub_1001D6E0+93j
		mov	eax, [esp+54h+arg_0]
		cdq
		and	edx, 0Fh
		mov	[ebp+0], ebx
		add	eax, edx
		mov	[esp+54h+var_34], esi
		sar	eax, 4
		mov	[esp+54h+arg_4], eax
		lea	eax, [esp+54h+var_40]
		push	eax
		mov	[esp+58h+var_24], esi
		mov	[esp+58h+var_14], esi
		mov	[esp+58h+var_4], esi
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001D8EA
		lea	eax, [esp+54h+var_30]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001D8EA
		lea	eax, [esp+54h+var_20]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001D8EA
		lea	eax, [esp+54h+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001D8EA
		push	1
		lea	eax, [ebp+4]
		push	eax
		push	[esp+5Ch+var_44]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebp+8]
		mov	byte ptr [eax],	0
		lea	eax, [esp+60h+var_20]
		push	dword ptr [edi+8]
		push	dword ptr [edi+4]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		js	loc_1001D8EA
		xor	edi, edi

loc_1001D848:				; CODE XREF: sub_1001D6E0+204j
		push	0
		call	PORT_SetError_Util
		push	[esp+58h+arg_4]	; size_t
		lea	eax, [esp+5Ch+var_40]
		push	eax		; int
		call	sub_1001E7C0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1001D8EA
		push	[esp+54h+arg_4]	; size_t
		lea	eax, [esp+58h+var_30]
		push	eax		; int
		call	sub_1001E7C0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1001D8EA
		lea	eax, [esp+54h+var_30]
		push	eax
		lea	eax, [esp+58h+var_40]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	short loc_1001D8A9
		lea	eax, [esp+54h+var_30]
		push	eax
		lea	eax, [esp+58h+var_40]
		push	eax
		call	sub_10029580
		add	esp, 8

loc_1001D8A9:				; CODE XREF: sub_1001D6E0+1B5j
		push	[esp+54h+arg_0]
		lea	eax, [esp+58h+var_10]
		push	ebp
		push	1
		push	eax
		push	0
		lea	eax, [esp+68h+var_20]
		push	eax
		lea	eax, [esp+6Ch+var_30]
		push	eax
		lea	eax, [esp+70h+var_40]
		push	eax
		call	sub_1001F670
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jz	short loc_1001D8EA
		inc	edi
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE03Fh
		jnz	short loc_1001D8EA
		cmp	edi, 0Ah
		jl	loc_1001D848

loc_1001D8EA:				; CODE XREF: sub_1001D6E0+E9j
					; sub_1001D6E0+100j ...
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+58h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+60h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_1001D964
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_1001D955
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_1001D946
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_1001D937
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001D968
; ---------------------------------------------------------------------------

loc_1001D937:				; CODE XREF: sub_1001D6E0+246j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001D968
; ---------------------------------------------------------------------------

loc_1001D946:				; CODE XREF: sub_1001D6E0+241j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001D968
; ---------------------------------------------------------------------------

loc_1001D955:				; CODE XREF: sub_1001D6E0+23Cj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001D968
; ---------------------------------------------------------------------------

loc_1001D964:				; CODE XREF: sub_1001D6E0+237j
		test	esi, esi
		jz	short loc_1001D978

loc_1001D968:				; CODE XREF: sub_1001D6E0+255j
					; sub_1001D6E0+264j ...
		push	1
		push	[esp+58h+var_44]
		call	PORT_FreeArena_Util
		add	esp, 8
		xor	ebp, ebp

loc_1001D978:				; CODE XREF: sub_1001D6E0+286j
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_1001D982:				; CODE XREF: sub_1001D6E0+Dj
					; sub_1001D6E0:loc_1001D705j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		add	esp, 44h
		retn
sub_1001D6E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001D9A0	proc near		; DATA XREF: .rdata:1003E4CCo

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 70h
		push	ebx
		push	ebp
		xor	ebx, ebx
		mov	[esp+78h+var_64], 0
		push	esi
		lea	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_68], 1
		push	edi
		push	eax
		mov	[esp+84h+var_6C], 1
		or	ebp, 0FFFFFFFFh
		mov	[esp+84h+var_70], ebx
		mov	[esp+84h+var_54], ebx
		mov	[esp+84h+var_44], ebx
		mov	[esp+84h+var_34], ebx
		mov	[esp+84h+var_24], ebx
		mov	[esp+84h+var_14], ebx
		mov	[esp+84h+var_4], ebx
		call	sub_100298B0
		mov	edi, [esp+84h+arg_0]
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001DC8B
		lea	eax, [esp+80h+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001DC8B
		lea	eax, [esp+80h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001DC8B
		lea	eax, [esp+80h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001DC8B
		lea	eax, [esp+80h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001DC8B
		lea	eax, [esp+80h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001DC8B
		cmp	[edi], ebx
		jnz	short loc_1001DA93
		push	800h
		call	PORT_NewArena_Util
		add	esp, 4
		mov	[esp+80h+var_64], eax
		test	eax, eax
		jz	loc_1001DC8B
		mov	[edi], eax

loc_1001DA93:				; CODE XREF: sub_1001D9A0+D6j
		mov	ecx, [edi+20h]
		test	ecx, ecx
		jz	short loc_1001DABD
		push	dword ptr [edi+24h]
		lea	eax, [esp+84h+var_40]
		push	ecx
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001DC8B
		xor	ecx, ecx
		mov	[esp+80h+var_68], ecx
		jmp	short loc_1001DAC2
; ---------------------------------------------------------------------------

loc_1001DABD:				; CODE XREF: sub_1001D9A0+F8j
		mov	ecx, 1

loc_1001DAC2:				; CODE XREF: sub_1001D9A0+11Bj
		mov	eax, [edi+2Ch]
		test	eax, eax
		jz	short loc_1001DB21
		push	dword ptr [edi+30h]
		push	eax
		lea	eax, [esp+88h+var_30]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001DC8B
		mov	[esp+80h+var_6C], ebx

loc_1001DAE8:				; CODE XREF: sub_1001D9A0+183j
		mov	eax, [edi+38h]
		test	eax, eax
		jz	short loc_1001DB2F
		cmp	byte ptr [eax],	0
		mov	ecx, [edi+3Ch]
		mov	ebx, ecx
		jnz	short loc_1001DAFA
		dec	ebx

loc_1001DAFA:				; CODE XREF: sub_1001D9A0+157j
		push	ecx
		push	eax
		lea	eax, [esp+88h+var_60]
		shl	ebx, 4
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001DC8B
		mov	eax, 1
		mov	[esp+80h+var_70], eax
		jmp	short loc_1001DB31
; ---------------------------------------------------------------------------

loc_1001DB21:				; CODE XREF: sub_1001D9A0+127j
		test	ecx, ecx
		jz	short loc_1001DAE8

loc_1001DB25:				; CODE XREF: sub_1001D9A0+255j
					; sub_1001D9A0+260j ...
		mov	esi, 0FFFFFFFCh
		jmp	loc_1001DC8B
; ---------------------------------------------------------------------------

loc_1001DB2F:				; CODE XREF: sub_1001D9A0+14Dj
		xor	eax, eax

loc_1001DB31:				; CODE XREF: sub_1001D9A0+17Fj
		mov	ecx, [edi+44h]
		test	ecx, ecx
		jz	short loc_1001DB70
		cmp	byte ptr [ecx],	0
		mov	edx, [edi+48h]
		mov	ebx, edx
		jnz	short loc_1001DB43
		dec	ebx

loc_1001DB43:				; CODE XREF: sub_1001D9A0+1A0j
		shl	ebx, 4
		test	eax, eax
		lea	eax, [esp+80h+var_50]
		jnz	short loc_1001DB52
		lea	eax, [esp+80h+var_60]

loc_1001DB52:				; CODE XREF: sub_1001D9A0+1ACj
		push	edx
		push	ecx
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001DC8B
		mov	eax, [esp+80h+var_70]
		inc	eax
		mov	[esp+80h+var_70], eax

loc_1001DB70:				; CODE XREF: sub_1001D9A0+196j
		mov	ecx, [edi+14h]
		test	ecx, ecx
		jz	short loc_1001DBA9
		cmp	byte ptr [ecx],	0
		mov	eax, [edi+18h]
		mov	ebx, eax
		jnz	short loc_1001DB82
		dec	ebx

loc_1001DB82:				; CODE XREF: sub_1001D9A0+1DFj
		push	eax
		push	ecx
		lea	eax, [esp+88h+var_20]
		shl	ebx, 3
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001DC8B
		mov	eax, [esp+80h+var_70]
		mov	ecx, 1
		jmp	short loc_1001DBAB
; ---------------------------------------------------------------------------

loc_1001DBA9:				; CODE XREF: sub_1001D9A0+1D5j
		xor	ecx, ecx

loc_1001DBAB:				; CODE XREF: sub_1001D9A0+207j
		cmp	eax, 1
		jnz	short loc_1001DBEB
		test	ecx, ecx
		jz	short loc_1001DBF0
		lea	eax, [esp+80h+var_10]
		push	eax
		lea	eax, [esp+84h+var_50]
		push	eax
		lea	eax, [esp+88h+var_60]
		push	eax
		lea	eax, [esp+8Ch+var_20]
		push	eax
		call	sub_100291E0
		lea	eax, [esp+90h+var_10]
		push	eax
		call	sub_100290C0
		add	esp, 14h
		test	eax, eax
		jz	short loc_1001DC3B
		mov	esi, 0FFFFFFFCh
		jmp	loc_1001DC8B
; ---------------------------------------------------------------------------

loc_1001DBEB:				; CODE XREF: sub_1001D9A0+20Ej
		cmp	eax, 2
		jge	short loc_1001DC3B

loc_1001DBF0:				; CODE XREF: sub_1001D9A0+212j
		cmp	[esp+80h+var_68], 0
		jnz	loc_1001DB25
		cmp	[esp+80h+var_6C], 0
		jnz	loc_1001DB25
		test	eax, eax
		jg	short loc_1001DC12
		test	ecx, ecx
		jz	loc_1001DB25

loc_1001DC12:				; CODE XREF: sub_1001D9A0+268j
		push	ebx
		push	ecx
		lea	eax, [esp+88h+var_20]
		push	eax
		lea	eax, [esp+8Ch+var_50]
		push	eax
		lea	eax, [esp+90h+var_60]
		push	eax
		lea	eax, [esp+94h+var_30]
		push	eax
		lea	eax, [esp+98h+var_40]
		push	eax
		call	sub_1001FBC0
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	short loc_1001DC8B

loc_1001DC3B:				; CODE XREF: sub_1001D9A0+23Fj
					; sub_1001D9A0+24Ej
		lea	eax, [esp+80h+var_50]
		push	eax
		lea	eax, [esp+84h+var_60]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	short loc_1001DC63
		lea	eax, [esp+80h+var_50]
		push	eax
		lea	eax, [esp+84h+var_60]
		push	eax
		call	sub_10029580
		add	esp, 8

loc_1001DC63:				; CODE XREF: sub_1001D9A0+2AFj
		push	ebx
		push	edi
		push	[esp+88h+var_6C]
		lea	eax, [esp+8Ch+var_30]
		push	eax
		push	[esp+90h+var_68]
		lea	eax, [esp+94h+var_40]
		push	eax
		lea	eax, [esp+98h+var_50]
		push	eax
		lea	eax, [esp+9Ch+var_60]
		push	eax
		call	sub_1001F670
		add	esp, 20h
		mov	ebp, eax

loc_1001DC8B:				; CODE XREF: sub_1001D9A0+5Bj
					; sub_1001D9A0+72j ...
		lea	eax, [esp+80h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+84h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+88h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+8Ch+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+90h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+94h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 18h
		test	esi, esi
		jz	short loc_1001DD28
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001DD16
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001DD04
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001DCF2
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001DD2C
; ---------------------------------------------------------------------------

loc_1001DCF2:				; CODE XREF: sub_1001D9A0+33Ej
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001DD2C
; ---------------------------------------------------------------------------

loc_1001DD04:				; CODE XREF: sub_1001D9A0+339j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001DD2C
; ---------------------------------------------------------------------------

loc_1001DD16:				; CODE XREF: sub_1001D9A0+334j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001DD2C
; ---------------------------------------------------------------------------

loc_1001DD28:				; CODE XREF: sub_1001D9A0+32Fj
		test	ebp, ebp
		jz	short loc_1001DD45

loc_1001DD2C:				; CODE XREF: sub_1001D9A0+350j
					; sub_1001D9A0+362j ...
		mov	eax, [esp+80h+var_64]
		test	eax, eax
		jz	short loc_1001DD45
		push	1
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	dword ptr [edi], 0

loc_1001DD45:				; CODE XREF: sub_1001D9A0+38Aj
					; sub_1001D9A0+392j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 70h
		retn
sub_1001D9A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001DD50	proc near		; DATA XREF: .rdata:1003E34Co

var_B0		= byte ptr -0B0h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0B0h
		push	ebx
		xor	ebx, ebx
		lea	eax, [esp+0B4h+var_80]
		push	esi
		push	eax
		mov	[esp+0BCh+var_74], ebx
		mov	[esp+0BCh+var_94], ebx
		mov	[esp+0BCh+var_14], ebx
		mov	[esp+0BCh+var_54], ebx
		mov	[esp+0BCh+var_44], ebx
		mov	[esp+0BCh+var_84], ebx
		mov	[esp+0BCh+var_64], ebx
		mov	[esp+0BCh+var_34], ebx
		mov	[esp+0BCh+var_24], ebx
		mov	[esp+0BCh+var_4], ebx
		mov	[esp+0BCh+var_A4], ebx
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_A0]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_60]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_90]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_70]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		lea	eax, [esp+0B8h+var_B0]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E22C
		push	edi
		mov	edi, [esp+0BCh+arg_0]
		mov	eax, [edi+14h]
		test	eax, eax
		jz	loc_1001E226
		cmp	[edi+38h], ebx
		jz	loc_1001E226
		cmp	[edi+44h], ebx
		jz	loc_1001E226
		cmp	[edi+20h], ebx
		jz	loc_1001E226
		cmp	[edi+2Ch], ebx
		jz	loc_1001E226
		cmp	[edi+50h], ebx
		jz	loc_1001E226
		cmp	[edi+5Ch], ebx
		jz	loc_1001E226
		cmp	[edi+68h], ebx
		jz	loc_1001E226
		push	dword ptr [edi+18h]
		push	eax
		lea	eax, [esp+0C4h+var_20]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		push	dword ptr [edi+3Ch]
		lea	eax, [esp+0C0h+var_80]
		push	dword ptr [edi+38h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		push	dword ptr [edi+48h]
		lea	eax, [esp+0C0h+var_A0]
		push	dword ptr [edi+44h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		push	dword ptr [edi+24h]
		lea	eax, [esp+0C0h+var_90]
		push	dword ptr [edi+20h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		push	dword ptr [edi+30h]
		lea	eax, [esp+0C0h+var_70]
		push	dword ptr [edi+2Ch]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		push	dword ptr [edi+54h]
		lea	eax, [esp+0C0h+var_40]
		push	dword ptr [edi+50h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		push	dword ptr [edi+60h]
		lea	eax, [esp+0C0h+var_30]
		push	dword ptr [edi+5Ch]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		push	dword ptr [edi+6Ch]
		lea	eax, [esp+0C0h+var_10]
		push	dword ptr [edi+68h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_A0]
		push	eax
		lea	eax, [esp+0C0h+var_80]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001DFFA
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001DFFA:				; CODE XREF: sub_1001DD50+2A0j
		lea	eax, [esp+0BCh+var_B0]
		push	eax
		lea	eax, [esp+0C0h+var_A0]
		push	eax
		lea	eax, [esp+0C4h+var_80]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_20]
		push	eax
		lea	eax, [esp+0C0h+var_B0]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E03C
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001E03C:				; CODE XREF: sub_1001DD50+2E2j
		lea	eax, [esp+0BCh+var_60]
		push	eax
		lea	eax, [esp+0C0h+var_80]
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_B0]
		push	eax
		lea	eax, [esp+0C0h+var_60]
		push	eax
		lea	eax, [esp+0C4h+var_90]
		push	eax
		call	sub_100295D0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_B0]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E096
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001E096:				; CODE XREF: sub_1001DD50+33Cj
		lea	eax, [esp+0BCh+var_50]
		push	eax
		lea	eax, [esp+0C0h+var_A0]
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_B0]
		push	eax
		lea	eax, [esp+0C0h+var_50]
		push	eax
		lea	eax, [esp+0C4h+var_90]
		push	eax
		call	sub_100295D0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_B0]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E0F0
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001E0F0:				; CODE XREF: sub_1001DD50+396j
		lea	eax, [esp+0BCh+var_B0]
		push	eax
		lea	eax, [esp+0C0h+var_60]
		push	eax
		lea	eax, [esp+0C4h+var_90]
		push	eax
		lea	eax, [esp+0C8h+var_70]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_B0]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E131
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001E131:				; CODE XREF: sub_1001DD50+3D7j
		lea	eax, [esp+0BCh+var_B0]
		push	eax
		lea	eax, [esp+0C0h+var_50]
		push	eax
		lea	eax, [esp+0C4h+var_90]
		push	eax
		lea	eax, [esp+0C8h+var_70]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_B0]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E172
		or	ebx, 0FFFFFFFFh
		jmp	loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001E172:				; CODE XREF: sub_1001DD50+418j
		lea	eax, [esp+0BCh+var_B0]
		push	eax
		lea	eax, [esp+0C0h+var_60]
		push	eax
		lea	eax, [esp+0C4h+var_70]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E22B
		lea	eax, [esp+0BCh+var_40]
		push	eax
		lea	eax, [esp+0C0h+var_B0]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E1AE
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001E1AE:				; CODE XREF: sub_1001DD50+457j
		lea	eax, [esp+0BCh+var_B0]
		push	eax
		lea	eax, [esp+0C0h+var_50]
		push	eax
		lea	eax, [esp+0C4h+var_70]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001E22B
		lea	eax, [esp+0BCh+var_30]
		push	eax
		lea	eax, [esp+0C0h+var_B0]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E1E9
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001E1E9:				; CODE XREF: sub_1001DD50+492j
		lea	eax, [esp+0BCh+var_B0]
		push	eax
		lea	eax, [esp+0C0h+var_80]
		push	eax
		lea	eax, [esp+0C4h+var_10]
		push	eax
		lea	eax, [esp+0C8h+var_A0]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001E22B
		lea	eax, [esp+0BCh+var_B0]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E22B
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1001E22B
; ---------------------------------------------------------------------------

loc_1001E226:				; CODE XREF: sub_1001DD50+155j
					; sub_1001DD50+15Ej ...
		mov	esi, 0FFFFFFFCh

loc_1001E22B:				; CODE XREF: sub_1001DD50+1B2j
					; sub_1001DD50+1CFj ...
		pop	edi

loc_1001E22C:				; CODE XREF: sub_1001DD50+53j
					; sub_1001DD50+6Aj ...
		lea	eax, [esp+0B8h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0BCh+var_80]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C0h+var_A0]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C4h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C8h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0CCh+var_90]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D0h+var_70]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D4h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D8h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0DCh+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E0h+var_B0]
		push	eax
		call	sub_10028F00
		add	esp, 2Ch
		test	esi, esi
		jz	short loc_1001E320
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001E307
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001E2EE
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001E2D5
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001E2D5:				; CODE XREF: sub_1001DD50+56Aj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001E2EE:				; CODE XREF: sub_1001DD50+565j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001E307:				; CODE XREF: sub_1001DD50+560j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001E320:				; CODE XREF: sub_1001DD50+55Bj
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 0B0h
		retn
sub_1001DD50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001E330(size_t, int,	int)
sub_1001E330	proc near		; CODE XREF: sub_10020600+34p
					; sub_100207A0+29p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	0		; int
		push	[esp+4+arg_8]	; int
		push	[esp+8+arg_4]	; int
		push	[esp+0Ch+arg_0]	; size_t
		call	sub_1001ED10
		add	esp, 10h
		retn
sub_1001E330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001E350(size_t, int,	int)
sub_1001E350	proc near		; CODE XREF: sub_100206B0+9Ap
					; sub_10020A00+60p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	1		; int
		push	[esp+4+arg_8]	; int
		push	[esp+8+arg_4]	; int
		push	[esp+0Ch+arg_0]	; size_t
		call	sub_1001ED10
		add	esp, 10h
		retn
sub_1001E350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001E370	proc near		; CODE XREF: sub_10020250+4Cp
					; sub_10020350+66p ...

var_40		= byte ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 40h
		push	ebp
		push	edi
		mov	edi, [esp+48h+arg_0]
		xor	ebp, ebp
		test	edi, edi
		jz	loc_1001E60E
		cmp	[esp+48h+arg_4], ebp
		jz	loc_1001E60E
		cmp	[esp+48h+arg_8], ebp
		jz	loc_1001E60E
		lea	eax, [esp+48h+var_40]
		mov	[esp+48h+var_34], ebp
		push	esi
		push	eax
		mov	[esp+50h+var_24], ebp
		mov	[esp+50h+var_14], ebp
		mov	[esp+50h+var_4], ebp
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E56C
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E56C
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E56C
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E56C
		mov	eax, [edi+8]
		xor	ecx, ecx
		push	ebx
		mov	ebx, [edi+0Ch]
		cmp	[eax], cl
		mov	eax, [edi+14h]
		setz	cl
		sub	ebx, ecx
		xor	ecx, ecx
		mov	[esp+50h+arg_0], ebx
		cmp	[eax], cl
		mov	eax, [edi+18h]
		setz	cl
		sub	eax, ecx
		cmp	eax, ebx
		ja	loc_1001E55B
		cmp	ebx, 800h
		ja	loc_1001E55B
		cmp	eax, 8
		ja	loc_1001E55B
		push	dword ptr [edi+0Ch]
		lea	eax, [esp+54h+var_40]
		push	dword ptr [edi+8]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E56B
		push	dword ptr [edi+18h]
		lea	eax, [esp+54h+var_30]
		push	dword ptr [edi+14h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E56B
		mov	eax, [esp+50h+var_28]
		cmp	eax, [esp+50h+var_38]
		ja	loc_1001E55B
		mov	eax, [edi+8]
		xor	ecx, ecx
		mov	edx, [esp+50h+arg_8]
		mov	edi, ebx
		cmp	[eax], cl
		setz	cl
		add	ecx, eax
		sub	edi, 4
		jb	short loc_1001E4B4

loc_1001E4A3:				; CODE XREF: sub_1001E370+142j
		mov	eax, [edx]
		cmp	eax, [ecx]
		jnz	short loc_1001E4BB
		add	edx, 4
		add	ecx, 4
		sub	edi, 4
		jnb	short loc_1001E4A3

loc_1001E4B4:				; CODE XREF: sub_1001E370+131j
		xor	ebx, ebx
		cmp	edi, 0FFFFFFFCh
		jz	short loc_1001E4F6

loc_1001E4BB:				; CODE XREF: sub_1001E370+137j
		movzx	ebx, byte ptr [edx]
		movzx	eax, byte ptr [ecx]
		sub	ebx, eax
		jnz	short loc_1001E4F6
		cmp	edi, 0FFFFFFFDh
		jz	short loc_1001E4F6
		movzx	ebx, byte ptr [edx+1]
		movzx	eax, byte ptr [ecx+1]
		sub	ebx, eax
		jnz	short loc_1001E4F6
		cmp	edi, 0FFFFFFFEh
		jz	short loc_1001E4F6
		movzx	ebx, byte ptr [edx+2]
		movzx	eax, byte ptr [ecx+2]
		sub	ebx, eax
		jnz	short loc_1001E4F6
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001E4F6
		movzx	ebx, byte ptr [edx+3]
		movzx	eax, byte ptr [ecx+3]
		sub	ebx, eax

loc_1001E4F6:				; CODE XREF: sub_1001E370+149j
					; sub_1001E370+153j ...
		test	ebx, ebx
		js	short loc_1001E501
		push	0FFFFE004h
		jmp	short loc_1001E560
; ---------------------------------------------------------------------------

loc_1001E501:				; CODE XREF: sub_1001E370+188j
		mov	edi, [esp+50h+arg_0]
		lea	eax, [esp+50h+var_20]
		push	edi
		push	[esp+54h+arg_8]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001E56B
		lea	eax, [esp+50h+var_10]
		push	eax
		lea	eax, [esp+54h+var_40]
		push	eax
		lea	eax, [esp+58h+var_30]
		push	eax
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001E56B
		push	edi
		push	[esp+54h+arg_4]
		lea	eax, [esp+58h+var_10]
		push	eax
		call	sub_1002A760
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001E56B
		xor	esi, esi
		jmp	short loc_1001E56B
; ---------------------------------------------------------------------------

loc_1001E55B:				; CODE XREF: sub_1001E370+B9j
					; sub_1001E370+C5j ...
		push	0FFFFE028h

loc_1001E560:				; CODE XREF: sub_1001E370+18Fj
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh

loc_1001E56B:				; CODE XREF: sub_1001E370+EBj
					; sub_1001E370+108j ...
		pop	ebx

loc_1001E56C:				; CODE XREF: sub_1001E370+49j
					; sub_1001E370+60j ...
		lea	eax, [esp+4Ch+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+54h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+58h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		test	esi, esi
		jz	short loc_1001E605
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001E5F5
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001E5DC
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001E5C3
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001E5C3:				; CODE XREF: sub_1001E370+238j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001E5DC:				; CODE XREF: sub_1001E370+233j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001E5F5:				; CODE XREF: sub_1001E370+22Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh

loc_1001E605:				; CODE XREF: sub_1001E370+229j
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001E60E:				; CODE XREF: sub_1001E370+Dj
					; sub_1001E370+17j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		add	esp, 40h
		retn
sub_1001E370	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001E630(int,	int, int, int, size_t)
sub_1001E630	proc near		; CODE XREF: sub_1001E8E0+189p

var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 20h
		push	ebp
		lea	eax, [esp+24h+var_10]
		xor	ebp, ebp
		push	esi
		push	eax
		mov	[esp+2Ch+var_4], ebp
		mov	[esp+2Ch+var_14], ebp
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E732
		lea	eax, [esp+28h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001E732
		mov	eax, [esp+28h+arg_0]
		push	dword ptr [eax+24h]
		push	dword ptr [eax+20h]
		lea	eax, [esp+30h+var_10]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001E732
		push	ebx
		push	edi
		mov	edi, [esp+30h+arg_10]
		push	edi
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_1001E6B2
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001E730
; ---------------------------------------------------------------------------

loc_1001E6B2:				; CODE XREF: sub_1001E630+71j
		push	edi		; size_t
		push	ebx		; void *
		call	sub_1000C220
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_1001E726
		push	edi
		lea	eax, [esp+34h+var_20]
		push	ebx
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001E726
		lea	eax, [esp+30h+var_20]
		push	eax
		push	[esp+34h+arg_C]
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001E726
		push	[esp+30h+arg_4]
		lea	eax, [esp+34h+var_10]
		push	[esp+34h+arg_C]
		push	eax
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001E726
		push	[esp+30h+arg_8]
		lea	eax, [esp+34h+var_20]
		push	[esp+34h+arg_C]
		push	eax
		call	sub_100299A0
		add	esp, 0Ch
		mov	esi, eax

loc_1001E726:				; CODE XREF: sub_1001E630+90j
					; sub_1001E630+A5j ...
		push	edi
		push	ebx
		call	PORT_ZFree_Util
		add	esp, 8

loc_1001E730:				; CODE XREF: sub_1001E630+80j
		pop	edi
		pop	ebx

loc_1001E732:				; CODE XREF: sub_1001E630+20j
					; sub_1001E630+37j ...
		lea	eax, [esp+28h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 8
		test	esi, esi
		jz	short loc_1001E7B4
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001E79E
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001E788
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001E772
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001E772:				; CODE XREF: sub_1001E630+12Aj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001E788:				; CODE XREF: sub_1001E630+125j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001E79E:				; CODE XREF: sub_1001E630+120j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1001E7B4:				; CODE XREF: sub_1001E630+11Bj
		pop	esi
		mov	eax, ebp
		pop	ebp
		add	esp, 20h
		retn
sub_1001E630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001E7C0(int,	size_t)
sub_1001E7C0	proc near		; CODE XREF: sub_1001D6E0+178p
					; sub_1001D6E0+193p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		push	ebx
		mov	[esp+18h+var_8], edi
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1001E7F5
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001E7F5:				; CODE XREF: sub_1001E7C0+1Dj
		push	ebp
		xor	ebp, ebp

loc_1001E7F8:				; CODE XREF: sub_1001E7C0+8Cj
		push	ebx		; size_t
		push	esi		; void *
		call	sub_1000C220
		add	esp, 8
		mov	[esp+18h+var_4], eax
		test	eax, eax
		jnz	short loc_1001E84E
		or	byte ptr [esi],	0C0h
		or	byte ptr [esi+ebx-1], 1
		push	ebx
		push	esi
		push	[esp+20h+arg_0]
		call	sub_10029F90
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_1001E84E
		lea	eax, [esp+18h+var_8]
		push	eax
		push	0
		lea	eax, ds:0[ebx*8]
		push	eax
		push	[esp+24h+arg_0]
		call	sub_100264B0
		mov	edi, eax
		add	esp, 10h
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_1001E84E
		inc	ebp
		cmp	ebp, 0Ah
		jl	short loc_1001E7F8

loc_1001E84E:				; CODE XREF: sub_1001E7C0+48j
					; sub_1001E7C0+64j ...
		push	ebx
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		pop	ebp
		test	edi, edi
		jz	short loc_1001E8C8
		cmp	edi, 0FFFFFFFCh
		jz	short loc_1001E8B1
		cmp	edi, 0FFFFFFFDh
		jz	short loc_1001E89A
		cmp	edi, 0FFFFFFFEh
		jz	short loc_1001E883
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001E883:				; CODE XREF: sub_1001E7C0+AAj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001E89A:				; CODE XREF: sub_1001E7C0+A5j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001E8B1:				; CODE XREF: sub_1001E7C0+A0j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001E8C8:				; CODE XREF: sub_1001E7C0+9Bj
		mov	eax, [esp+14h+var_4]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
sub_1001E7C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001E8E0(int,	int, size_t, int, int)
sub_1001E8E0	proc near		; CODE XREF: sub_1001ED10+19Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ebx
		push	ebp
		xor	eax, eax
		xor	ebx, ebx
		push	esi
		push	edi
		mov	[esp+14h+var_4], eax
		or	edi, 0FFFFFFFFh
		mov	eax, dword_100504E0
		test	eax, eax
		jz	loc_1001E9C9
		lea	ecx, [ecx+0]

loc_1001E900:				; CODE XREF: sub_1001E8E0+E3j
		push	eax
		call	ds:PR_Lock
		mov	esi, dword_100504EC
		add	esp, 4
		cmp	esi, offset dword_100504EC
		jz	short loc_1001E93F
		mov	ebp, [esp+14h+arg_0]
		add	ebp, 10h
		nop

loc_1001E920:				; CODE XREF: sub_1001E8E0+5Dj
		lea	eax, [esi+8]
		mov	ebx, esi
		push	ebp
		push	eax
		call	SECITEM_CompareItem_Util
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jns	short loc_1001E941
		mov	esi, [esi]
		cmp	esi, offset dword_100504EC
		jnz	short loc_1001E920

loc_1001E93F:				; CODE XREF: sub_1001E8E0+36j
		test	edi, edi

loc_1001E941:				; CODE XREF: sub_1001E8E0+53j
		jz	short loc_1001E983
		push	33Ch
		call	PORT_ZAlloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	loc_1001EA2F
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		push	ebx
		call	sub_1001EC40
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1001E9DF
		mov	[ebx], esi
		mov	eax, [esi+4]
		mov	[ebx+4], eax
		mov	eax, [esi+4]
		mov	[eax], ebx
		mov	[esi+4], ebx

loc_1001E983:				; CODE XREF: sub_1001E8E0:loc_1001E941j
		mov	ebp, [ebx+18h]
		test	ebp, ebp
		jnz	loc_1001EB57
		mov	esi, [ebx+14h]
		test	esi, esi
		jnz	loc_1001EA3E
		inc	dword_100504E8
		push	0FFFFFFFFh
		push	dword_100504E4
		call	ds:PR_WaitCondVar
		push	dword_100504E0
		call	ds:PR_Unlock
		mov	eax, dword_100504E0
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1001E900

loc_1001E9C9:				; CODE XREF: sub_1001E8E0+17j
					; sub_1001E8E0+137j
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4

loc_1001E9D6:				; CODE XREF: sub_1001E8E0+120j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001E9DF:				; CODE XREF: sub_1001E8E0+91j
		push	33Ch
		push	ebx
		call	PORT_ZFree_Util
		add	esp, 8

loc_1001E9ED:				; CODE XREF: sub_1001E8E0+15Cj
		xor	ebx, ebx

loc_1001E9EF:				; CODE XREF: sub_1001E8E0+272j
					; sub_1001E8E0+294j ...
		push	dword_100504E0
		call	ds:PR_Unlock
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1001E9D6
		cmp	ebx, 0FFFFFFFCh
		jz	loc_1001EBC1
		cmp	ebx, 0FFFFFFFDh
		jz	loc_1001EBAB
		cmp	ebx, 0FFFFFFFEh
		jnz	short loc_1001E9C9
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001EA2F:				; CODE XREF: sub_1001E8E0+74j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001E9ED
; ---------------------------------------------------------------------------

loc_1001EA3E:				; CODE XREF: sub_1001E8E0+B3j
		mov	eax, [esi]
		mov	[ebx+14h], eax
		mov	dword ptr [esi], 0
		push	dword_100504E0
		call	ds:PR_Unlock
		push	[esp+18h+arg_8]	; size_t
		push	[esp+1Ch+arg_4]	; int
		push	[esp+20h+arg_10] ; int
		push	[esp+24h+arg_C]	; int
		push	[esp+28h+arg_0]	; int
		call	sub_1001E630
		add	esp, 18h
		test	eax, eax
		jnz	loc_1001EB1D
		lea	edi, [esi+4]
		push	edi
		call	sub_100298B0
		mov	ebp, eax
		add	esp, 4
		mov	[esp+14h+var_4], ebp
		test	ebp, ebp
		js	loc_1001EB1D
		lea	eax, [esi+14h]
		push	eax
		call	sub_100298B0
		mov	ebp, eax
		add	esp, 4
		mov	[esp+14h+var_4], ebp
		test	ebp, ebp
		js	short loc_1001EB1D
		push	edi
		push	[esp+18h+arg_C]
		call	sub_100290F0
		add	esp, 8
		mov	[esp+14h+var_4], eax
		test	eax, eax
		js	short loc_1001EB1D
		lea	eax, [esi+14h]
		push	eax
		push	[esp+18h+arg_10]
		call	sub_100290F0
		add	esp, 8
		mov	[esp+14h+var_4], eax
		test	eax, eax
		js	short loc_1001EB1D
		push	dword_100504E0
		mov	eax, ds:PR_Lock
		call	eax ; PR_Lock
		mov	dword ptr [esi+24h], 32h
		add	esp, 4
		mov	eax, [ebx+18h]
		mov	[esi], eax
		mov	[ebx+18h], esi
		cmp	dword_100504E8,	0
		jle	loc_1001EB94
		push	dword_100504E4
		call	ds:PR_NotifyAllCondVar
		add	esp, 4
		mov	dword_100504E8,	0
		jmp	short loc_1001EB94
; ---------------------------------------------------------------------------

loc_1001EB1D:				; CODE XREF: sub_1001E8E0+193j
					; sub_1001E8E0+1ADj ...
		push	dword_100504E0
		mov	eax, ds:PR_Lock
		call	eax ; PR_Lock
		lea	eax, [esi+4]
		push	eax
		call	sub_10028F00
		lea	eax, [esi+14h]
		push	eax
		call	sub_10028F00
		mov	dword ptr [esi+24h], 0
		add	esp, 0Ch
		mov	eax, [ebx+14h]
		mov	[esi], eax
		mov	[ebx+14h], esi
		mov	ebx, [esp+14h+var_4]
		jmp	loc_1001E9EF
; ---------------------------------------------------------------------------

loc_1001EB57:				; CODE XREF: sub_1001E8E0+A8j
		dec	dword ptr [ebp+24h]
		cmp	dword ptr [ebp+24h], 0
		push	[esp+14h+arg_C]
		jle	short loc_1001EBD7
		lea	eax, [ebp+4]
		push	eax
		call	sub_100290F0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1001E9EF
		push	[esp+14h+arg_10]
		lea	eax, [ebp+14h]
		push	eax
		call	sub_100290F0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1001E9EF

loc_1001EB94:				; CODE XREF: sub_1001E8E0+21Cj
					; sub_1001E8E0+23Bj ...
		push	dword_100504E0
		call	ds:PR_Unlock
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001EBAB:				; CODE XREF: sub_1001E8E0+12Ej
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001EBC1:				; CODE XREF: sub_1001E8E0+125j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001EBD7:				; CODE XREF: sub_1001E8E0+282j
		lea	edi, [ebp+4]
		push	edi
		call	sub_10029580
		push	[esp+1Ch+arg_10]
		lea	esi, [ebp+14h]
		push	esi
		call	sub_10029580
		push	edi
		call	sub_10028F00
		push	esi
		call	sub_10028F00
		mov	eax, [ebp+0]
		add	esp, 18h
		mov	dword ptr [ebp+24h], 0
		mov	[ebx+18h], eax
		mov	eax, [ebx+14h]
		mov	[ebp+0], eax
		mov	[ebx+14h], ebp
		cmp	dword_100504E8,	0
		jle	loc_1001EB94
		push	dword_100504E4
		call	ds:PR_NotifyCondVar
		add	esp, 4
		dec	dword_100504E8
		jmp	loc_1001EB94
sub_1001E8E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001EC40	proc near		; CODE XREF: sub_1001E8E0+87p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		push	esi
		push	edi
		mov	esi, 14h
		lea	edi, [edx+1Ch]
		mov	[edx], edx
		mov	eax, edi
		mov	[edx+4], edx
		jmp	short loc_1001EC60
; ---------------------------------------------------------------------------
		align 10h

loc_1001EC60:				; CODE XREF: sub_1001EC40+15j
					; sub_1001EC40+3Dj
		mov	dword ptr [eax+10h], 0
		lea	ecx, [eax+28h]
		mov	[eax], ecx
		mov	dword ptr [eax+20h], 0
		mov	dword ptr [eax+24h], 0
		mov	eax, ecx
		dec	esi
		jnz	short loc_1001EC60
		mov	eax, [esp+8+arg_4]
		add	eax, 10h
		mov	[edx+314h], esi
		push	eax
		lea	eax, [edx+8]
		mov	[edx+18h], esi
		push	eax
		push	esi
		mov	[edx+14h], edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	esi
		retn
sub_1001EC40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001ECB0	proc near		; DATA XREF: sub_1001D5C0o
		call	ds:PR_NewLock
		mov	dword_100504E0,	eax
		test	eax, eax
		jnz	short loc_1001ECD0

loc_1001ECBF:				; CODE XREF: sub_1001ECB0+31j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1001ECD0:				; CODE XREF: sub_1001ECB0+Dj
		push	eax
		call	ds:PR_NewCondVar
		add	esp, 4
		mov	dword_100504E4,	eax
		test	eax, eax
		jz	short loc_1001ECBF
		mov	dword_100504E8,	0
		xor	eax, eax
		mov	dword_100504EC,	offset dword_100504EC
		mov	dword_100504F0,	offset dword_100504EC
		retn
sub_1001ECB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001ED10(size_t, int,	int, int)
sub_1001ED10	proc near		; CODE XREF: sub_1001E330+Ep
					; sub_1001E350+Ep

var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 50h
		push	ebp
		push	esi
		mov	esi, [esp+58h+arg_0]
		xor	ebp, ebp
		test	esi, esi
		jz	loc_1001F044
		cmp	[esp+58h+arg_4], ebp
		jz	loc_1001F044
		mov	edx, [esp+58h+arg_8]
		test	edx, edx
		jz	loc_1001F044
		mov	eax, [esi+14h]
		xor	ecx, ecx
		push	ebx
		mov	ebx, [esi+18h]
		push	edi
		cmp	[eax], cl
		setz	cl
		sub	ebx, ecx
		xor	ecx, ecx
		cmp	[eax], cl
		mov	edi, ebx
		mov	[esp+60h+arg_0], ebx
		setz	cl
		add	ecx, eax
		sub	edi, 4
		jb	short loc_1001ED71
		mov	edi, edi

loc_1001ED60:				; CODE XREF: sub_1001ED10+5Fj
		mov	eax, [edx]
		cmp	eax, [ecx]
		jnz	short loc_1001ED78
		add	edx, 4
		add	ecx, 4
		sub	edi, 4
		jnb	short loc_1001ED60

loc_1001ED71:				; CODE XREF: sub_1001ED10+4Cj
		xor	ebx, ebx
		cmp	edi, 0FFFFFFFCh
		jz	short loc_1001EDB3

loc_1001ED78:				; CODE XREF: sub_1001ED10+54j
		movzx	ebx, byte ptr [edx]
		movzx	eax, byte ptr [ecx]
		sub	ebx, eax
		jnz	short loc_1001EDB3
		cmp	edi, 0FFFFFFFDh
		jz	short loc_1001EDB3
		movzx	ebx, byte ptr [edx+1]
		movzx	eax, byte ptr [ecx+1]
		sub	ebx, eax
		jnz	short loc_1001EDB3
		cmp	edi, 0FFFFFFFEh
		jz	short loc_1001EDB3
		movzx	ebx, byte ptr [edx+2]
		movzx	eax, byte ptr [ecx+2]
		sub	ebx, eax
		jnz	short loc_1001EDB3
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001EDB3
		movzx	ebx, byte ptr [edx+3]
		movzx	eax, byte ptr [ecx+3]
		sub	ebx, eax

loc_1001EDB3:				; CODE XREF: sub_1001ED10+66j
					; sub_1001ED10+70j ...
		test	ebx, ebx
		js	short loc_1001EDCF
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001EDCF:				; CODE XREF: sub_1001ED10+A5j
		lea	eax, [esp+60h+var_30]
		mov	[esp+60h+var_24], ebp
		push	eax
		mov	[esp+64h+var_44], ebp
		mov	[esp+64h+var_34], ebp
		mov	[esp+64h+var_14], ebp
		mov	[esp+64h+var_4], ebp
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001EF94
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001EF94
		lea	eax, [esp+60h+var_40]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001EF94
		lea	eax, [esp+60h+var_20]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001EF94
		lea	eax, [esp+60h+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001EF94
		push	dword ptr [esi+18h]
		lea	eax, [esp+64h+var_30]
		push	dword ptr [esi+14h]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001EF94
		mov	edi, [esp+60h+arg_0]
		lea	eax, [esp+60h+var_50]
		push	edi
		push	[esp+64h+arg_8]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001EF94
		cmp	dword_1004E0EC,	ebp
		jz	short loc_1001EEE4
		lea	eax, [esp+60h+var_10]
		push	eax		; int
		lea	eax, [esp+64h+var_20]
		push	eax		; int
		push	edi		; size_t
		lea	eax, [esp+6Ch+var_30]
		push	eax		; int
		push	esi		; int
		call	sub_1001E8E0
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	loc_1001EF94
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	eax, [esp+64h+var_30]
		push	eax
		lea	eax, [esp+68h+var_20]
		push	eax
		lea	eax, [esp+6Ch+var_50]
		push	eax
		call	sub_10029DF0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_1001EF94

loc_1001EEE4:				; CODE XREF: sub_1001ED10+189j
		cmp	dword ptr [esi+3Ch], 0
		jz	short loc_1001EF2E
		cmp	dword ptr [esi+48h], 0
		jz	short loc_1001EF2E
		cmp	dword ptr [esi+54h], 0
		jz	short loc_1001EF2E
		cmp	dword ptr [esi+60h], 0
		jz	short loc_1001EF2E
		cmp	dword ptr [esi+6Ch], 0
		jz	short loc_1001EF2E
		cmp	[esp+60h+arg_C], 0
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	eax, [esp+64h+var_40]
		push	eax
		push	esi
		jz	short loc_1001EF1E
		call	sub_1001F060
		add	esp, 0Ch
		jmp	short loc_1001EF47
; ---------------------------------------------------------------------------

loc_1001EF1E:				; CODE XREF: sub_1001ED10+202j
		call	sub_1001F1E0
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	short loc_1001EF4D
		jmp	short loc_1001EF94
; ---------------------------------------------------------------------------

loc_1001EF2E:				; CODE XREF: sub_1001ED10+1D8j
					; sub_1001ED10+1DEj ...
		push	edi
		lea	eax, [esp+64h+var_30]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		lea	eax, [esp+6Ch+var_40]
		push	eax
		push	esi
		call	sub_1001F590
		add	esp, 14h

loc_1001EF47:				; CODE XREF: sub_1001ED10+20Cj
		mov	ebp, eax
		test	ebp, ebp
		jnz	short loc_1001EF94

loc_1001EF4D:				; CODE XREF: sub_1001ED10+21Aj
		cmp	dword_1004E0EC,	0
		jz	short loc_1001EF78
		lea	eax, [esp+60h+var_40]
		push	eax
		lea	eax, [esp+64h+var_30]
		push	eax
		lea	eax, [esp+68h+var_10]
		push	eax
		lea	eax, [esp+6Ch+var_40]
		push	eax
		call	sub_10029DF0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_1001EF94

loc_1001EF78:				; CODE XREF: sub_1001ED10+244j
		push	edi
		push	[esp+64h+arg_4]
		lea	eax, [esp+68h+var_40]
		push	eax
		call	sub_1002A760
		xor	ebx, ebx
		add	esp, 0Ch
		test	eax, eax
		setns	bl
		dec	ebx
		and	ebx, eax

loc_1001EF94:				; CODE XREF: sub_1001ED10+E4j
					; sub_1001ED10+FBj ...
		lea	eax, [esp+60h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+68h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+6Ch+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+70h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 14h
		test	ebx, ebx
		jz	short loc_1001F03A
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_1001F02A
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_1001F010
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_1001EFF6
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001EFF6:				; CODE XREF: sub_1001ED10+2CAj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001F010:				; CODE XREF: sub_1001ED10+2C5j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		mov	eax, ebp
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001F02A:				; CODE XREF: sub_1001ED10+2C0j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh

loc_1001F03A:				; CODE XREF: sub_1001ED10+2BBj
		pop	edi
		pop	ebx
		pop	esi
		mov	eax, ebp
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001F044:				; CODE XREF: sub_1001ED10+Dj
					; sub_1001ED10+17j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
sub_1001ED10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001F060	proc near		; CODE XREF: sub_1001ED10+204p

var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 30h
		push	esi
		push	edi
		xor	edi, edi
		lea	eax, [esp+38h+var_30]
		push	eax
		mov	[esp+3Ch+var_24], edi
		mov	[esp+3Ch+var_14], edi
		mov	[esp+3Ch+var_4], edi
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F140
		lea	eax, [esp+38h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F140
		lea	eax, [esp+38h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F140
		push	ebx
		push	[esp+3Ch+arg_8]
		mov	ebx, [esp+40h+arg_0]
		push	[esp+40h+arg_4]
		push	ebx
		call	sub_1001F1E0
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1001F13F
		push	dword ptr [ebx+18h]
		lea	eax, [esp+40h+var_30]
		push	dword ptr [ebx+14h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001F13F
		push	dword ptr [ebx+24h]
		lea	eax, [esp+40h+var_20]
		push	dword ptr [ebx+20h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001F13F
		lea	eax, [esp+3Ch+var_10]
		push	eax
		lea	eax, [esp+40h+var_30]
		push	eax
		lea	eax, [esp+44h+var_20]
		push	eax
		push	[esp+48h+arg_4]
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001F13F
		push	[esp+3Ch+arg_8]
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1001F13F
		or	edi, 0FFFFFFFFh

loc_1001F13F:				; CODE XREF: sub_1001F060+72j
					; sub_1001F060+8Bj ...
		pop	ebx

loc_1001F140:				; CODE XREF: sub_1001F060+24j
					; sub_1001F060+3Bj ...
		lea	eax, [esp+38h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1001F1CC
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001F1B6
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001F1A0
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001F18A
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001F18A:				; CODE XREF: sub_1001F060+112j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001F1A0:				; CODE XREF: sub_1001F060+10Dj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001F1B6:				; CODE XREF: sub_1001F060+108j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001F1CC:				; CODE XREF: sub_1001F060+103j
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 30h
		retn
sub_1001F060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001F1E0	proc near		; CODE XREF: sub_1001ED10:loc_1001EF1Ep
					; sub_1001F060+66p

var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 90h
		lea	eax, [esp+90h+var_90]
		mov	[esp+90h+var_84], 0
		push	esi
		push	eax
		mov	[esp+98h+var_74], 0
		mov	[esp+98h+var_14], 0
		mov	[esp+98h+var_34], 0
		mov	[esp+98h+var_24], 0
		mov	[esp+98h+var_4], 0
		mov	[esp+98h+var_44], 0
		mov	[esp+98h+var_64], 0
		mov	[esp+98h+var_54], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		lea	eax, [esp+94h+var_80]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		lea	eax, [esp+94h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		lea	eax, [esp+94h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		lea	eax, [esp+94h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		lea	eax, [esp+94h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		lea	eax, [esp+94h+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		lea	eax, [esp+94h+var_70]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		lea	eax, [esp+94h+var_60]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F4A7
		push	edi
		mov	edi, [esp+98h+arg_0]
		lea	eax, [esp+98h+var_90]
		push	dword ptr [edi+3Ch]
		push	dword ptr [edi+38h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001F4A6
		push	dword ptr [edi+48h]
		lea	eax, [esp+9Ch+var_80]
		push	dword ptr [edi+44h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001F4A6
		push	dword ptr [edi+54h]
		lea	eax, [esp+9Ch+var_20]
		push	dword ptr [edi+50h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001F4A6
		push	dword ptr [edi+60h]
		lea	eax, [esp+9Ch+var_40]
		push	dword ptr [edi+5Ch]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001F4A6
		push	dword ptr [edi+6Ch]
		lea	eax, [esp+9Ch+var_30]
		push	dword ptr [edi+68h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001F4A6
		mov	edi, [esp+98h+arg_8]
		lea	eax, [esp+98h+var_60]
		push	eax
		lea	eax, [esp+9Ch+var_90]
		push	eax
		push	edi
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001F4A6
		lea	eax, [esp+98h+var_10]
		push	eax
		lea	eax, [esp+9Ch+var_90]
		push	eax
		lea	eax, [esp+0A0h+var_20]
		push	eax
		lea	eax, [esp+0A4h+var_60]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001F4A6
		lea	eax, [esp+98h+var_60]
		push	eax
		lea	eax, [esp+9Ch+var_80]
		push	eax
		push	edi
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001F4A6
		lea	eax, [esp+98h+var_50]
		push	eax
		lea	eax, [esp+9Ch+var_80]
		push	eax
		lea	eax, [esp+0A0h+var_40]
		push	eax
		lea	eax, [esp+0A4h+var_60]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001F4A6
		lea	eax, [esp+98h+var_70]
		push	eax
		lea	eax, [esp+9Ch+var_90]
		push	eax
		lea	eax, [esp+0A0h+var_50]
		push	eax
		lea	eax, [esp+0A4h+var_10]
		push	eax
		call	sub_1002A710
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001F4A6
		lea	eax, [esp+98h+var_70]
		push	eax
		lea	eax, [esp+9Ch+var_90]
		push	eax
		lea	eax, [esp+0A0h+var_30]
		push	eax
		lea	eax, [esp+0A4h+var_70]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001F4A6
		mov	edi, [esp+98h+arg_4]
		lea	eax, [esp+98h+var_80]
		push	edi
		push	eax
		lea	eax, [esp+0A0h+var_70]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001F4A6
		push	edi
		lea	eax, [esp+9Ch+var_50]
		push	eax
		push	edi
		call	sub_10028D40
		add	esp, 0Ch
		mov	esi, eax

loc_1001F4A6:				; CODE XREF: sub_1001F1E0+145j
					; sub_1001F1E0+162j ...
		pop	edi

loc_1001F4A7:				; CODE XREF: sub_1001F1E0+65j
					; sub_1001F1E0+7Cj ...
		lea	eax, [esp+94h+var_90]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+98h+var_80]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+9Ch+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A0h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A4h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A8h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0ACh+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B0h+var_70]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B4h+var_60]
		push	eax
		call	sub_10028F00
		add	esp, 24h
		test	esi, esi
		jz	short loc_1001F57A
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001F562
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001F54A
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001F532
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_1001F532:				; CODE XREF: sub_1001F1E0+338j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_1001F54A:				; CODE XREF: sub_1001F1E0+333j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_1001F562:				; CODE XREF: sub_1001F1E0+32Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_1001F57A:				; CODE XREF: sub_1001F1E0+329j
		xor	eax, eax
		pop	esi
		add	esp, 90h
		retn
sub_1001F1E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001F590	proc near		; CODE XREF: sub_1001ED10+22Fp

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		lea	eax, [esp+10h+var_10]
		mov	[esp+10h+var_4], 0
		push	esi
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_1001F5E6
		mov	eax, [esp+14h+arg_0]
		push	dword ptr [eax+30h]
		push	dword ptr [eax+2Ch]
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001F5E6
		push	[esp+14h+arg_4]
		lea	eax, [esp+18h+var_10]
		push	[esp+18h+arg_C]
		push	eax
		push	[esp+20h+arg_8]
		call	sub_10026B80
		add	esp, 10h
		mov	esi, eax

loc_1001F5E6:				; CODE XREF: sub_1001F590+1Cj
					; sub_1001F590+39j
		lea	eax, [esp+14h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		test	esi, esi
		jz	short loc_1001F65A
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001F645
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001F630
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001F61B
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001F61B:				; CODE XREF: sub_1001F590+74j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001F630:				; CODE XREF: sub_1001F590+6Fj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001F645:				; CODE XREF: sub_1001F590+6Aj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001F65A:				; CODE XREF: sub_1001F590+65j
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
sub_1001F590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001F670	proc near		; CODE XREF: sub_1001D6E0+1E6p
					; sub_1001D9A0+2E1p

var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 50h
		push	ebx
		push	ebp
		xor	ebp, ebp
		lea	eax, [esp+58h+var_40]
		push	esi
		push	eax
		mov	[esp+60h+var_34], ebp
		mov	[esp+60h+var_24], ebp
		mov	[esp+60h+var_14], ebp
		mov	[esp+60h+var_4], ebp
		mov	[esp+60h+var_44], ebp
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001FB04
		lea	eax, [esp+5Ch+var_30]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001FB04
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001FB04
		lea	eax, [esp+5Ch+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001FB04
		lea	eax, [esp+5Ch+var_50]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_1001FB04
		mov	ebp, [esp+5Ch+arg_4]
		push	edi
		mov	edi, [esp+60h+arg_0]
		push	ebp
		push	edi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1001F745
		lea	eax, [esp+60h+var_40]
		push	eax
		push	ebp
		push	edi
		call	sub_10029B70
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		lea	eax, [esp+60h+var_40]
		push	eax
		call	sub_10028CD0
		add	esp, 4
		cmp	eax, [esp+60h+arg_1C]
		jz	short loc_1001F75A

loc_1001F745:				; CODE XREF: sub_1001F670+A4j
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	loc_1001FB03
; ---------------------------------------------------------------------------

loc_1001F75A:				; CODE XREF: sub_1001F670+D3j
		lea	eax, [esp+60h+var_20]
		push	eax
		push	1
		push	edi
		call	sub_1002A600
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		lea	eax, [esp+60h+var_10]
		push	eax
		push	1
		push	ebp
		call	sub_1002A600
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		mov	esi, [esp+60h+arg_C]
		mov	ebp, [esp+60h+arg_10]
		test	esi, esi
		jnz	short loc_1001F7A1
		cmp	[esp+60h+arg_14], 0
		jz	short loc_1001F80C

loc_1001F7A1:				; CODE XREF: sub_1001F670+128j
		lea	eax, [esp+60h+var_30]
		push	eax
		lea	eax, [esp+64h+var_10]
		push	eax
		lea	eax, [esp+68h+var_20]
		push	eax
		call	sub_10029B70
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		test	esi, esi
		jz	short loc_1001F7D3
		mov	eax, [esp+60h+arg_8]
		push	eax
		lea	eax, [esp+64h+var_30]
		push	eax
		push	ebp
		jmp	short loc_1001F7DE
; ---------------------------------------------------------------------------

loc_1001F7D3:				; CODE XREF: sub_1001F670+154j
		push	ebp
		lea	eax, [esp+64h+var_30]
		push	eax
		mov	eax, [esp+68h+arg_8]
		push	eax

loc_1001F7DE:				; CODE XREF: sub_1001F670+161j
		call	sub_100299A0
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_1001F80C
		cmp	ebx, 0FFFFFFFBh
		jnz	loc_1001FB01
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		xor	ebx, ebx
		or	ebp, 0FFFFFFFFh
		jmp	loc_1001FB03
; ---------------------------------------------------------------------------

loc_1001F80C:				; CODE XREF: sub_1001F670+12Fj
					; sub_1001F670+17Aj
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	eax, [esp+64h+var_20]
		push	eax
		push	ebp
		call	sub_10029A70
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001F844
		mov	ebx, 0FFFFFFFDh
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F844:				; CODE XREF: sub_1001F670+1C8j
		mov	esi, [esp+60h+arg_18]
		push	eax
		lea	eax, [esi+4Ch]
		push	eax
		push	dword ptr [esi]
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+50h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001F866
		lea	ebx, [eax-2]
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F866:				; CODE XREF: sub_1001F670+1ECj
		push	dword ptr [esi+54h]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	eax, [esp+64h+var_10]
		push	eax
		push	ebp
		call	sub_10029A70
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001F8B9
		mov	ebx, 0FFFFFFFDh
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F8B9:				; CODE XREF: sub_1001F670+23Dj
		push	eax
		lea	eax, [esi+58h]
		push	eax
		push	dword ptr [esi]
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+5Ch]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001F8D7
		lea	ebx, [eax-2]
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F8D7:				; CODE XREF: sub_1001F670+25Dj
		push	dword ptr [esi+60h]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		lea	eax, [esp+60h+var_50]
		push	eax
		push	edi
		push	[esp+68h+arg_4]
		call	sub_100299A0
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001F929
		mov	ebx, 0FFFFFFFDh
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F929:				; CODE XREF: sub_1001F670+2ADj
		push	eax
		lea	eax, [esi+64h]
		push	eax
		push	dword ptr [esi]
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+68h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001F947
		lea	ebx, [eax-2]
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F947:				; CODE XREF: sub_1001F670+2CDj
		push	dword ptr [esi+6Ch]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		lea	eax, [esp+60h+var_40]
		mov	dword ptr [esi+14h], 0
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001F984
		mov	ebx, 0FFFFFFFDh
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F984:				; CODE XREF: sub_1001F670+308j
		push	eax
		lea	eax, [esi+10h]
		push	eax
		push	dword ptr [esi]
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+14h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001F9A2
		lea	ebx, [eax-2]
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F9A2:				; CODE XREF: sub_1001F670+328j
		push	dword ptr [esi+18h]
		push	eax
		lea	eax, [esp+68h+var_40]
		push	eax
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		push	ebp
		mov	dword ptr [esi+2Ch], 0
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001F9DB
		mov	ebx, 0FFFFFFFDh
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F9DB:				; CODE XREF: sub_1001F670+35Fj
		push	eax
		lea	eax, [esi+28h]
		push	eax
		push	dword ptr [esi]
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+2Ch]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001F9F9
		lea	ebx, [eax-2]
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001F9F9:				; CODE XREF: sub_1001F670+37Fj
		push	dword ptr [esi+30h]
		push	eax
		push	ebp
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		mov	ebx, [esp+60h+arg_8]
		push	ebx
		mov	dword ptr [esi+20h], 0
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001FA32
		mov	ebx, 0FFFFFFFDh
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001FA32:				; CODE XREF: sub_1001F670+3B6j
		push	eax
		lea	eax, [esi+1Ch]
		push	eax
		push	dword ptr [esi]
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+20h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001FA50
		lea	ebx, [eax-2]
		jmp	loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001FA50:				; CODE XREF: sub_1001F670+3D6j
		push	dword ptr [esi+24h]
		push	eax
		push	ebx
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1001FB01
		push	edi
		mov	dword ptr [esi+38h], 0
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001FA82
		mov	ebx, 0FFFFFFFDh
		jmp	short loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001FA82:				; CODE XREF: sub_1001F670+409j
		push	eax
		lea	eax, [esi+34h]
		push	eax
		push	dword ptr [esi]
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+38h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001FA9D
		lea	ebx, [eax-2]
		jmp	short loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001FA9D:				; CODE XREF: sub_1001F670+426j
		push	dword ptr [esi+3Ch]
		push	eax
		push	edi
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_1001FB01
		mov	ebx, [esp+60h+arg_4]
		push	ebx
		mov	dword ptr [esi+44h], 0
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1001FACF
		mov	ebx, 0FFFFFFFDh
		jmp	short loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001FACF:				; CODE XREF: sub_1001F670+456j
		push	eax
		lea	eax, [esi+40h]
		push	eax
		push	dword ptr [esi]
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+44h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001FAEA
		lea	ebx, [eax-2]
		jmp	short loc_1001FB01
; ---------------------------------------------------------------------------

loc_1001FAEA:				; CODE XREF: sub_1001F670+473j
		push	dword ptr [esi+48h]
		push	eax
		push	ebx
		call	sub_1002A820
		xor	ebx, ebx
		add	esp, 0Ch
		test	eax, eax
		setns	bl
		dec	ebx
		and	ebx, eax

loc_1001FB01:				; CODE XREF: sub_1001F670+B9j
					; sub_1001F670+FEj ...
		xor	ebp, ebp

loc_1001FB03:				; CODE XREF: sub_1001F670+E5j
					; sub_1001F670+197j
		pop	edi

loc_1001FB04:				; CODE XREF: sub_1001F670+2Dj
					; sub_1001F670+44j ...
		lea	eax, [esp+5Ch+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+60h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+64h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+68h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+6Ch+var_50]
		push	eax
		call	sub_10028F00
		add	esp, 14h
		test	ebx, ebx
		jz	short loc_1001FBA8
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_1001FB91
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_1001FB7A
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_1001FB63
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001FB63:				; CODE XREF: sub_1001F670+4DAj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001FB7A:				; CODE XREF: sub_1001F670+4D5j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001FB91:				; CODE XREF: sub_1001F670+4D0j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1001FBA8:				; CODE XREF: sub_1001F670+4CBj
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 50h
		retn
sub_1001F670	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001FBC0	proc near		; CODE XREF: sub_1001D9A0+28Dp

var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 74h
		lea	eax, [esp+74h+var_50]
		mov	[esp+74h+var_44], 0
		push	esi
		push	eax
		mov	[esp+7Ch+var_24], 0
		mov	[esp+7Ch+var_4], 0
		mov	[esp+7Ch+var_64], 0
		mov	[esp+7Ch+var_34], 0
		mov	[esp+7Ch+var_14], 0
		mov	[esp+7Ch+var_54], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100200B1
		lea	eax, [esp+78h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100200B1
		lea	eax, [esp+78h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100200B1
		lea	eax, [esp+78h+var_70]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100200B1
		lea	eax, [esp+78h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100200B1
		lea	eax, [esp+78h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100200B1
		lea	eax, [esp+78h+var_60]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100200B1
		push	edi
		mov	edi, [esp+7Ch+arg_0]
		push	edi
		call	sub_10028CD0
		add	esp, 4
		cmp	eax, 17h
		jle	short loc_1001FCBD
		mov	esi, 0FFFFFFFDh
		jmp	loc_100200B0
; ---------------------------------------------------------------------------

loc_1001FCBD:				; CODE XREF: sub_1001FBC0+F1j
		lea	eax, [esp+7Ch+var_50]
		push	eax
		push	[esp+80h+arg_4]
		push	edi
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200B0
		lea	eax, [esp+7Ch+var_50]
		push	eax
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200B0
		lea	eax, [esp+7Ch+var_50]
		push	ebx
		push	eax
		call	sub_10028CD0
		mov	ebx, [esp+84h+arg_18]
		sub	eax, ebx
		mov	[esp+84h+var_74], eax
		lea	eax, [esp+84h+var_70]
		lea	ecx, [ebx-1]
		push	ecx
		push	eax
		call	sub_10028D20
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200AF
		push	0
		lea	eax, [esp+84h+var_70]
		push	eax
		push	eax
		lea	eax, [esp+8Ch+var_50]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_100200AF
		lea	eax, [esp+80h+var_70]
		push	edi
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		js	short loc_1001FD74
		lea	eax, [esp+80h+var_70]
		push	eax
		push	1
		push	edi
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200AF

loc_1001FD74:				; CODE XREF: sub_1001FBC0+198j
		mov	edi, [esp+80h+arg_C]
		lea	eax, [esp+80h+var_20]
		push	ebp
		mov	ebp, [esp+84h+arg_14]
		push	eax
		push	1
		test	ebp, ebp
		jz	short loc_1001FDA9
		push	[esp+8Ch+arg_10]
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200AE
		jmp	short loc_1001FE06
; ---------------------------------------------------------------------------

loc_1001FDA9:				; CODE XREF: sub_1001FBC0+1CCj
		push	[esp+8Ch+arg_8]
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_40]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		lea	eax, [esp+8Ch+var_20]
		push	eax
		lea	eax, [esp+90h+var_50]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_40]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	loc_100200A9
		push	edi
		call	sub_1002A9C0
		add	esp, 4

loc_1001FE06:				; CODE XREF: sub_1001FBC0+1E7j
		test	esi, esi
		jnz	loc_10020085
		mov	edi, edi

loc_1001FE10:				; CODE XREF: sub_1001FBC0+47Ej
		lea	eax, [esp+84h+var_70]
		push	eax
		call	sub_10028CD0
		add	esp, 4
		cmp	eax, [esp+84h+var_74]
		jb	loc_10020085
		lea	eax, [esp+84h+var_40]
		push	eax
		lea	eax, [esp+88h+var_30]
		push	eax
		lea	eax, [esp+8Ch+var_70]
		push	eax
		lea	eax, [esp+90h+var_50]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_40]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	loc_1002002A
		lea	eax, [esp+84h+var_30]
		push	eax
		call	sub_10028CD0
		add	esp, 4
		test	ebp, ebp
		jnz	loc_1001FF08
		mov	ecx, ebx
		shr	ecx, 1
		cmp	eax, ecx
		jnz	loc_1002002A
		lea	eax, [esp+84h+var_30]
		push	2
		push	eax
		call	sub_10026380
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1002002A
		lea	eax, [esp+84h+var_20]
		push	eax
		lea	eax, [esp+88h+var_30]
		push	1
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_20]
		push	eax
		call	sub_10020110
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1001FEDA
		cmp	esi, 0FFFFFFFFh
		jnz	loc_100200AE
		jmp	loc_1002002A
; ---------------------------------------------------------------------------

loc_1001FEDA:				; CODE XREF: sub_1001FBC0+30Aj
		push	edi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	loc_10020046
		lea	eax, [esp+84h+var_20]
		push	edi
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_100200AE
		jmp	loc_1002002A
; ---------------------------------------------------------------------------

loc_1001FF08:				; CODE XREF: sub_1001FBC0+2B1j
		cmp	eax, ebx
		jnz	loc_1002002A
		lea	eax, [esp+84h+var_30]
		push	4
		push	eax
		call	sub_10026380
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1002002A
		lea	eax, [esp+84h+var_10]
		push	eax
		lea	eax, [esp+88h+var_30]
		push	eax
		lea	eax, [esp+8Ch+var_20]
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_10]
		push	eax
		push	eax
		call	sub_100293E0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	eax, [esp+88h+var_10]
		push	eax
		call	sub_1002A1C0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_40]
		push	eax
		push	[esp+88h+arg_10]
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	eax, [esp+88h+var_40]
		push	eax
		call	sub_1002A380
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_60]
		push	edi
		push	eax
		call	sub_1002A1C0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_40]
		push	edi
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002004D
		lea	eax, [esp+84h+var_60]
		push	eax
		push	1
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_60]
		push	edi
		push	eax
		call	sub_1002A1C0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_100200AE
		lea	eax, [esp+84h+var_40]
		push	edi
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002004D

loc_1002002A:				; CODE XREF: sub_1001FBC0+29Cj
					; sub_1001FBC0+2BDj ...
		lea	eax, [esp+84h+var_70]
		push	eax
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_1001FE10
		jmp	short loc_10020085
; ---------------------------------------------------------------------------

loc_10020046:				; CODE XREF: sub_1001FBC0+325j
		mov	esi, 0FFFFFFFDh
		jmp	short loc_10020085
; ---------------------------------------------------------------------------

loc_1002004D:				; CODE XREF: sub_1001FBC0+424j
					; sub_1001FBC0+468j
		push	[esp+84h+arg_8]
		lea	eax, [esp+88h+var_60]
		push	eax
		lea	eax, [esp+8Ch+var_10]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100200AE
		push	edi
		lea	eax, [esp+88h+var_60]
		push	eax
		lea	eax, [esp+8Ch+var_10]
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100200AE

loc_10020085:				; CODE XREF: sub_1001FBC0+248j
					; sub_1001FBC0+261j ...
		lea	eax, [esp+84h+var_70]
		push	eax
		call	sub_10028CD0
		add	esp, 4
		cmp	eax, [esp+84h+var_74]
		jnb	short loc_100200AE
		test	ebp, ebp
		jnz	short loc_100200A9
		push	edi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100200AE

loc_100200A9:				; CODE XREF: sub_1001FBC0+237j
					; sub_1001FBC0+4DAj
		mov	esi, 0FFFFFFFDh

loc_100200AE:				; CODE XREF: sub_1001FBC0+1E1j
					; sub_1001FBC0+1FCj ...
		pop	ebp

loc_100200AF:				; CODE XREF: sub_1001FBC0+163j
					; sub_1001FBC0+182j ...
		pop	ebx

loc_100200B0:				; CODE XREF: sub_1001FBC0+F8j
					; sub_1001FBC0+116j ...
		pop	edi

loc_100200B1:				; CODE XREF: sub_1001FBC0+4Dj
					; sub_1001FBC0+64j ...
		lea	eax, [esp+78h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+7Ch+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+80h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+84h+var_70]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+88h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+8Ch+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+90h+var_60]
		push	eax
		call	sub_10028F00
		add	esp, 1Ch
		mov	eax, esi
		pop	esi
		add	esp, 74h
		retn
sub_1001FBC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020110	proc near		; CODE XREF: sub_1001FBC0+2FEp

arg_0		= dword	ptr  4

		push	2
		push	[esp+4+arg_0]
		call	sub_10026420
		add	esp, 8
		test	eax, eax
		jnz	short locret_10020130
		push	2
		push	[esp+4+arg_0]
		call	sub_10026830
		add	esp, 8

locret_10020130:			; CODE XREF: sub_10020110+10j
		retn
sub_10020110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020140	proc near		; CODE XREF: sub_10020BC0+169p
					; sub_10020BC0+1A3p ...

var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 14h
		push	edi
		push	[esp+18h+arg_0]
		call	sub_10008CC0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1002015E
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1002015E:				; CODE XREF: sub_10020140+14j
		mov	eax, [edi+4]
		push	ebx
		push	esi
		call	eax
		mov	esi, eax
		xor	edx, edx
		mov	eax, [esp+20h+arg_8]
		xor	ebx, ebx
		dec	eax
		mov	[esp+20h+var_10], esi
		add	eax, [edi]
		div	dword ptr [edi]
		mov	[esp+20h+var_4], eax
		test	eax, eax
		jz	loc_1002023A
		dec	eax
		mov	[esp+20h+var_C], eax
		push	ebp
		lea	ebx, [ebx+0]

loc_10020190:				; CODE XREF: sub_10020140+F3j
		mov	eax, ebx
		mov	[esp+24h+var_11], bl
		shr	eax, 18h
		mov	[esp+24h+var_14], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[esp+24h+var_13], al
		mov	eax, ebx
		shr	eax, 8
		mov	[esp+24h+var_12], al
		mov	eax, [edi+10h]
		push	esi
		call	eax
		push	[esp+28h+arg_10]
		mov	eax, [edi+14h]
		push	[esp+2Ch+arg_C]
		push	esi
		call	eax
		push	4
		lea	eax, [esp+38h+var_14]
		push	eax
		mov	eax, [edi+14h]
		push	esi
		call	eax
		mov	eax, [edi]
		add	esp, 1Ch
		mov	ebp, eax
		imul	ebp, ebx
		push	eax
		add	ebp, [esp+28h+arg_4]
		cmp	ebx, [esp+28h+var_C]
		jz	short loc_100201F6
		lea	eax, [esp+28h+var_8]
		push	eax
		mov	eax, [edi+18h]
		push	ebp
		push	esi
		call	eax
		add	esp, 10h
		jmp	short loc_1002022E
; ---------------------------------------------------------------------------

loc_100201F6:				; CODE XREF: sub_10020140+A3j
		call	PORT_Alloc_Util
		push	dword ptr [edi]
		mov	ecx, [edi+18h]
		mov	esi, eax
		lea	eax, [esp+2Ch+var_8]
		push	eax
		push	esi
		push	[esp+34h+var_10]
		call	ecx
		mov	ecx, [edi]
		mov	eax, [esp+38h+arg_8]
		imul	ecx, ebx
		sub	eax, ecx
		push	eax		; size_t
		push	esi		; void *
		push	ebp		; void *
		call	memcpy
		push	esi
		call	PORT_Free_Util
		mov	esi, [esp+48h+var_10]
		add	esp, 24h

loc_1002022E:				; CODE XREF: sub_10020140+B4j
		inc	ebx
		cmp	ebx, [esp+24h+var_4]
		jb	loc_10020190
		pop	ebp

loc_1002023A:				; CODE XREF: sub_10020140+3Ej
		mov	eax, [edi+0Ch]
		push	1
		push	esi
		call	eax
		add	esp, 8
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	edi
		add	esp, 14h
		retn
sub_10020140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020250	proc near		; DATA XREF: .rdata:1003E55Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	ecx, ecx
		push	esi
		push	edi
		mov	eax, [ebp+8]
		mov	ebx, [ebp+0Ch]
		cmp	[eax], cl
		setz	cl
		sub	ebx, ecx
		cmp	[esp+10h+arg_8], ebx
		jnz	loc_10020342
		mov	esi, [esp+10h+arg_10]
		lea	eax, [ebx-0Bh]
		cmp	esi, eax
		ja	loc_10020342
		lea	eax, [ebx+1]
		push	eax
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_10020342
		push	[esp+10h+arg_4]
		push	edi
		push	ebp
		call	sub_1001E370
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10020339
		cmp	[edi], al
		jnz	loc_10020339
		cmp	byte ptr [edi+1], 1
		jnz	short loc_10020339
		lea	ecx, [eax+2]
		mov	eax, ebx
		sub	eax, esi
		dec	eax
		cmp	eax, ecx
		jbe	short loc_100202D1

loc_100202C6:				; CODE XREF: sub_10020250+7Fj
		cmp	byte ptr [ecx+edi], 0FFh
		jnz	short loc_10020339
		inc	ecx
		cmp	ecx, eax
		jb	short loc_100202C6

loc_100202D1:				; CODE XREF: sub_10020250+74j
		cmp	byte ptr [ecx+edi], 0
		jnz	short loc_10020339
		mov	edx, [esp+10h+arg_C]
		mov	ecx, edi
		sub	ecx, esi
		add	ecx, ebx
		sub	esi, 4
		jb	short loc_100202F7

loc_100202E6:				; CODE XREF: sub_10020250+A5j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_100202FC
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_100202E6

loc_100202F7:				; CODE XREF: sub_10020250+94j
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10020329

loc_100202FC:				; CODE XREF: sub_10020250+9Aj
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_10020339
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10020329
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_10020339
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10020329
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_10020339
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10020329
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	short loc_10020339

loc_10020329:				; CODE XREF: sub_10020250+AAj
					; sub_10020250+B5j ...
		push	edi
		call	PORT_Free_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020339:				; CODE XREF: sub_10020250+56j
					; sub_10020250+5Ej ...
		push	edi
		call	PORT_Free_Util
		add	esp, 4

loc_10020342:				; CODE XREF: sub_10020250+1Bj
					; sub_10020250+2Aj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10020250	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020350	proc near		; DATA XREF: .rdata:1003E554o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		xor	ecx, ecx
		push	esi
		mov	eax, [ebx+8]
		mov	esi, [ebx+0Ch]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+8+arg_14],	esi
		jz	short loc_1002037E
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002037E:				; CODE XREF: sub_10020350+19j
		cmp	[esp+8+arg_4], 0
		jz	short loc_10020404
		cmp	[esp+8+arg_8], 0
		jz	short loc_10020404
		push	edi
		push	esi
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100203B0
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100203B0:				; CODE XREF: sub_10020350+4Aj
		push	[esp+0Ch+arg_10]
		push	edi
		push	ebx
		call	sub_1001E370
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100203DC
		push	edi
		call	PORT_Free_Util
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100203DC:				; CODE XREF: sub_10020350+70j
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		push	edi
		push	[esp+20h+arg_18]
		call	sub_10021270
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 1Ch
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020404:				; CODE XREF: sub_10020350+33j
					; sub_10020350+3Aj
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebx
		retn
sub_10020350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020420	proc near		; DATA XREF: .rdata:1003E530o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	ecx, ecx
		push	esi
		push	edi
		mov	eax, [ebp+8]
		mov	edi, [ebp+0Ch]
		cmp	[eax], cl
		setz	cl
		sub	edi, ecx
		cmp	[esp+10h+arg_8], edi
		jnz	loc_100204DC
		mov	esi, [esp+10h+arg_10]
		cmp	esi, edi
		ja	loc_100204DC
		lea	eax, [edi+1]
		push	eax
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_100204DC
		push	[esp+10h+arg_4]
		push	ebx
		push	ebp
		call	sub_1001E370
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100204D3
		mov	edx, [esp+10h+arg_C]
		mov	ecx, ebx
		sub	ecx, esi
		add	ecx, edi
		sub	esi, 4
		jb	short loc_10020491

loc_10020480:				; CODE XREF: sub_10020420+6Fj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_10020496
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_10020480

loc_10020491:				; CODE XREF: sub_10020420+5Ej
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100204C3

loc_10020496:				; CODE XREF: sub_10020420+64j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_100204D3
		cmp	esi, 0FFFFFFFDh
		jz	short loc_100204C3
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_100204D3
		cmp	esi, 0FFFFFFFEh
		jz	short loc_100204C3
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	short loc_100204D3
		cmp	esi, 0FFFFFFFFh
		jz	short loc_100204C3
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	short loc_100204D3

loc_100204C3:				; CODE XREF: sub_10020420+74j
					; sub_10020420+7Fj ...
		push	ebx
		call	PORT_Free_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100204D3:				; CODE XREF: sub_10020420+4Fj
					; sub_10020420+7Aj ...
		push	ebx
		call	PORT_Free_Util
		add	esp, 4

loc_100204DC:				; CODE XREF: sub_10020420+1Bj
					; sub_10020420+27j ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10020420	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100204F0(int,	void *,	int, int, int, int)
sub_100204F0	proc near		; DATA XREF: .rdata:1003E560o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		xor	ecx, ecx
		push	esi
		push	edi
		mov	eax, [ebx+8]
		mov	edi, [ebx+0Ch]
		cmp	[eax], cl
		setz	cl
		sub	edi, ecx
		cmp	[esp+0Ch+arg_14], edi
		jnz	short loc_10020569
		lea	eax, [edi+1]
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10020569
		push	[esp+0Ch+arg_10]
		push	esi
		push	ebx
		call	sub_1001E370
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10020560
		mov	edx, [esp+0Ch+arg_8]
		mov	[edx], eax
		cmp	[esi], al
		jnz	short loc_10020560
		cmp	byte ptr [esi+1], 1
		jnz	short loc_10020560
		mov	ecx, 2
		cmp	edi, ecx
		jbe	short loc_10020560
		lea	esp, [esp+0]

loc_10020550:				; CODE XREF: sub_100204F0+6Ej
		mov	al, [ecx+esi]
		test	al, al
		jz	short loc_10020570
		cmp	al, 0FFh
		jnz	short loc_10020560
		inc	ecx
		cmp	ecx, edi
		jb	short loc_10020550

loc_10020560:				; CODE XREF: sub_100204F0+3Ej
					; sub_100204F0+48j ...
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10020569:				; CODE XREF: sub_100204F0+1Aj
					; sub_100204F0+2Cj
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020570:				; CODE XREF: sub_100204F0+65j
		mov	eax, edi
		sub	eax, ecx
		lea	ecx, [eax-1]
		mov	[edx], ecx
		test	ecx, ecx
		jz	short loc_10020560
		cmp	ecx, [esp+0Ch+arg_C]
		ja	short loc_10020560
		mov	eax, esi
		sub	eax, ecx
		push	ecx		; size_t
		add	eax, edi
		push	eax		; void *
		push	[esp+14h+arg_4]	; void *
		call	memcpy
		push	esi
		call	PORT_Free_Util
		add	esp, 10h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100204F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100205B0	proc near		; DATA XREF: .rdata:1003E534o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	edx, [esp+arg_0]
		xor	ecx, ecx
		push	esi
		mov	eax, [edx+8]
		mov	esi, [edx+0Ch]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+4+arg_14],	esi
		jnz	short loc_100205EF
		cmp	[esp+4+arg_C], esi
		jb	short loc_100205EF
		push	[esp+4+arg_10]
		push	[esp+8+arg_4]
		push	edx
		call	sub_1001E370
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100205EF
		mov	eax, [esp+4+arg_8]
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100205EF:				; CODE XREF: sub_100205B0+18j
					; sub_100205B0+1Ej ...
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_100205B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020600(size_t, void	*, int,	int, int, int)
sub_10020600	proc near		; DATA XREF: .rdata:1003E54Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		xor	ecx, ecx
		push	esi
		push	edi
		mov	eax, [ebx+14h]
		mov	edi, [ebx+18h]
		cmp	[eax], cl
		setz	cl
		sub	edi, ecx
		cmp	[esp+0Ch+arg_14], edi
		jnz	short loc_10020674
		lea	eax, [edi+1]
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10020674
		push	[esp+0Ch+arg_10] ; int
		push	esi		; int
		push	ebx		; size_t
		call	sub_1001E330
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002066B
		cmp	[esi], al
		jnz	short loc_1002066B
		cmp	byte ptr [esi+1], 2
		jnz	short loc_1002066B
		mov	edx, [esp+0Ch+arg_8]
		mov	ecx, 2
		mov	[edx], eax
		cmp	edi, ecx
		jbe	short loc_1002066B
		lea	esp, [esp+0]

loc_10020660:				; CODE XREF: sub_10020600+69j
		cmp	byte ptr [ecx+esi], 0
		jz	short loc_1002067B
		inc	ecx
		cmp	ecx, edi
		jb	short loc_10020660

loc_1002066B:				; CODE XREF: sub_10020600+3Ej
					; sub_10020600+42j ...
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10020674:				; CODE XREF: sub_10020600+1Aj
					; sub_10020600+2Cj
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002067B:				; CODE XREF: sub_10020600+64j
		mov	eax, edi
		sub	eax, ecx
		lea	ecx, [eax-1]
		mov	[edx], ecx
		test	ecx, ecx
		jz	short loc_1002066B
		cmp	ecx, [esp+0Ch+arg_C]
		ja	short loc_1002066B
		mov	eax, esi
		sub	eax, ecx
		push	ecx		; size_t
		add	eax, edi
		push	eax		; void *
		push	[esp+14h+arg_4]	; void *
		call	memcpy
		push	esi
		call	PORT_Free_Util
		add	esp, 10h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10020600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100206B0(size_t, int,	int, int, int, int, int, int, int, int)
sub_100206B0	proc near		; DATA XREF: .rdata:1003E544o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		mov	edx, [esp+arg_0]
		xor	ecx, ecx
		push	esi
		mov	eax, [edx+14h]
		mov	esi, [edx+18h]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+4+arg_4], 0
		jz	loc_10020789
		cmp	[esp+4+arg_8], 0
		jz	loc_10020789
		cmp	[esp+4+arg_24],	esi
		jz	short loc_100206F2
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100206F2:				; CODE XREF: sub_100206B0+2Ej
		push	ebx
		mov	ebx, [esp+8+arg_C]
		push	ebp
		mov	ebp, [esp+0Ch+arg_10]
		test	ebp, ebp
		jnz	short loc_10020729
		test	ebx, ebx
		jnz	short loc_1002072D

loc_10020704:				; CODE XREF: sub_100206B0+7Bj
		push	edi
		push	esi
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10020741
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10020729:				; CODE XREF: sub_100206B0+4Ej
		test	ebx, ebx
		jnz	short loc_10020704

loc_1002072D:				; CODE XREF: sub_100206B0+52j
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10020741:				; CODE XREF: sub_100206B0+62j
		push	[esp+10h+arg_20] ; int
		push	edi		; int
		push	[esp+18h+arg_0]	; size_t
		call	sub_1001E350
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10020776
		push	ebp
		push	ebx
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	esi
		push	edi
		push	[esp+28h+arg_1C]
		push	[esp+2Ch+arg_18]
		push	[esp+30h+arg_14]
		call	sub_10020BC0
		add	esp, 24h

loc_10020776:				; CODE XREF: sub_100206B0+A4j
		push	esi
		push	edi
		mov	ebx, eax
		call	PORT_ZFree_Util
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10020789:				; CODE XREF: sub_100206B0+19j
					; sub_100206B0+24j
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_100206B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100207A0(size_t, int,	int, int, int, int)
sub_100207A0	proc near		; DATA XREF: .rdata:1003E53Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	edx, [esp+arg_0]
		xor	ecx, ecx
		push	esi
		mov	eax, [edx+14h]
		mov	esi, [edx+18h]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	esi, [esp+4+arg_C]
		ja	short loc_100207DF
		cmp	[esp+4+arg_14],	esi
		jnz	short loc_100207DF
		push	[esp+4+arg_10]	; int
		push	[esp+8+arg_4]	; int
		push	edx		; size_t
		call	sub_1001E330
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100207DF
		mov	eax, [esp+4+arg_8]
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100207DF:				; CODE XREF: sub_100207A0+18j
					; sub_100207A0+1Ej ...
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_100207A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100207F0	proc near		; DATA XREF: .rdata:1003E548o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0Ch
		xor	ecx, ecx
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	esi
		push	edi
		mov	eax, [ebx+8]
		mov	esi, [ebx+0Ch]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+18h+arg_C], esi
		jb	short loc_10020851
		mov	eax, [esp+18h+arg_14]
		mov	[esp+18h+var_4], eax
		mov	eax, [esp+18h+arg_10]
		mov	[esp+18h+var_8], eax
		lea	eax, [esp+18h+var_C]
		push	eax
		push	2
		push	esi
		call	sub_100214D0
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_10020851
		push	edi
		push	[esp+1Ch+arg_4]
		push	ebx
		call	sub_1001E370
		add	esp, 0Ch
		push	esi
		push	edi
		test	eax, eax
		jz	short loc_1002085B
		call	PORT_ZFree_Util
		add	esp, 8

loc_10020851:				; CODE XREF: sub_100207F0+1Dj
					; sub_100207F0+43j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1002085B:				; CODE XREF: sub_100207F0+57j
		call	PORT_ZFree_Util
		mov	eax, [esp+20h+arg_8]
		add	esp, 8
		pop	edi
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
sub_100207F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020880(int,	int, int, int, int, void *, size_t, int, int, int, void	*, size_t)
sub_10020880	proc near		; DATA XREF: .rdata:1003E540o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		xor	ecx, ecx
		push	esi
		mov	eax, [ebp+8]
		mov	esi, [ebp+0Ch]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+8+arg_24],	esi
		jnb	short loc_100208AE
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100208AE:				; CODE XREF: sub_10020880+19j
		cmp	[esp+8+arg_4], 0
		jz	loc_10020969
		cmp	[esp+8+arg_8], 0
		jz	loc_10020969
		mov	eax, [esp+8+arg_10]
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		test	eax, eax
		jnz	short loc_100208FA
		test	ebx, ebx
		jnz	short loc_100208FE

loc_100208D5:				; CODE XREF: sub_10020880+7Cj
		push	edi
		push	esi
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10020912
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100208FA:				; CODE XREF: sub_10020880+4Fj
		test	ebx, ebx
		jnz	short loc_100208D5

loc_100208FE:				; CODE XREF: sub_10020880+53j
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020912:				; CODE XREF: sub_10020880+63j
		push	[esp+10h+arg_18] ; size_t
		push	[esp+14h+arg_14] ; void	*
		push	[esp+18h+arg_10] ; int
		push	ebx		; int
		push	[esp+20h+arg_8]	; int
		push	[esp+24h+arg_4]	; int
		push	[esp+28h+arg_2C] ; size_t
		push	[esp+2Ch+arg_28] ; void	*
		push	esi		; int
		push	edi		; int
		call	sub_10020F10
		mov	ebx, eax
		add	esp, 28h
		test	ebx, ebx
		jnz	short loc_10020959
		push	edi
		push	[esp+14h+arg_1C]
		push	ebp
		call	sub_1001E370
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_10020959
		mov	eax, [esp+10h+arg_20]
		mov	[eax], esi

loc_10020959:				; CODE XREF: sub_10020880+BDj
					; sub_10020880+D1j
		push	edi
		call	PORT_Free_Util
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020969:				; CODE XREF: sub_10020880+33j
					; sub_10020880+3Ej
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		retn
sub_10020880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020980(int,	int, int, int, void *, size_t)
sub_10020980	proc near		; DATA XREF: .rdata:1003E538o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	ecx, ecx
		push	esi
		push	edi
		mov	eax, [ebp+8]
		mov	esi, [ebp+0Ch]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+10h+arg_C], esi
		jb	short loc_100209DE
		mov	ebx, [esp+10h+arg_14]
		cmp	ebx, esi
		ja	short loc_100209DE
		push	esi
		call	PORT_ZAlloc_Util
		mov	edi, eax
		push	ebx		; size_t
		push	[esp+18h+arg_10] ; void	*
		mov	ecx, edi
		sub	ecx, ebx
		add	ecx, esi
		push	ecx		; void *
		call	memcpy
		push	edi
		push	[esp+24h+arg_4]
		push	ebp
		call	sub_1001E370
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_100209E6
		test	edi, edi
		jz	short loc_100209DE
		push	esi
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8

loc_100209DE:				; CODE XREF: sub_10020980+1Bj
					; sub_10020980+23j ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100209E6:				; CODE XREF: sub_10020980+4Ej
		push	esi
		push	edi
		call	PORT_ZFree_Util
		mov	eax, [esp+18h+arg_8]
		add	esp, 8
		pop	edi
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10020980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020A00(size_t, int,	int, int, int, int)
sub_10020A00	proc near		; DATA XREF: .rdata:1003E558o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0Ch
		xor	ecx, ecx
		push	esi
		push	edi
		mov	edi, [esp+14h+arg_0]
		mov	eax, [edi+14h]
		mov	esi, [edi+18h]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+14h+arg_C], esi
		jnb	short loc_10020A27
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020A27:				; CODE XREF: sub_10020A00+1Cj
		mov	eax, [esp+14h+arg_14]
		mov	[esp+14h+var_4], eax
		mov	eax, [esp+14h+arg_10]
		push	ebx
		mov	[esp+18h+var_8], eax
		lea	eax, [esp+18h+var_C]
		push	eax
		push	1
		push	esi
		call	sub_100214D0
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_10020A5A
		or	edi, 0FFFFFFFFh
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020A5A:				; CODE XREF: sub_10020A00+4Cj
		push	ebx		; int
		push	[esp+1Ch+arg_4]	; int
		push	edi		; size_t
		call	sub_1001E350
		mov	ecx, [esp+24h+arg_8]
		mov	edi, eax
		push	esi
		push	ebx
		mov	[ecx], esi
		call	PORT_ZFree_Util
		add	esp, 14h
		mov	eax, edi
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 0Ch
		retn
sub_10020A00	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020A80(size_t, int,	int, void *, size_t, int, int, int, int)
sub_10020A80	proc near		; DATA XREF: .rdata:1003E550o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		xor	ecx, ecx
		push	esi
		mov	eax, [ebp+14h]
		mov	esi, [ebp+18h]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+8+arg_1C],	esi
		jnb	short loc_10020AAE
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020AAE:				; CODE XREF: sub_10020A80+19j
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	short loc_10020B2A
		cmp	[esp+0Ch+arg_8], 0
		jz	short loc_10020B2A
		push	edi
		push	esi
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10020AE3
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020AE3:				; CODE XREF: sub_10020A80+4Cj
		push	[esp+10h+arg_10] ; size_t
		push	[esp+14h+arg_C]	; void *
		push	[esp+18h+arg_8]	; int
		push	ebx		; int
		push	[esp+20h+arg_20] ; int
		push	esi		; int
		push	edi		; void *
		call	sub_100210E0
		mov	ebx, eax
		add	esp, 1Ch
		test	ebx, ebx
		jnz	short loc_10020B1A
		push	edi		; int
		push	[esp+14h+arg_14] ; int
		push	ebp		; size_t
		call	sub_1001E350
		mov	ebx, eax
		add	esp, 0Ch
		mov	eax, [esp+10h+arg_18]
		mov	[eax], esi

loc_10020B1A:				; CODE XREF: sub_10020A80+82j
		push	edi
		call	PORT_Free_Util
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020B2A:				; CODE XREF: sub_10020A80+35j
					; sub_10020A80+3Cj
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_10020A80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020B40(size_t, int,	int, int, void *, size_t)
sub_10020B40	proc near		; DATA XREF: .rdata:1003E52Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		xor	ecx, ecx
		push	esi
		mov	eax, [ebp+14h]
		mov	esi, [ebp+18h]
		cmp	[eax], cl
		setz	cl
		sub	esi, ecx
		cmp	[esp+8+arg_C], esi
		jnb	short loc_10020B61
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020B61:				; CODE XREF: sub_10020B40+19j
		push	edi
		mov	edi, [esp+0Ch+arg_14]
		cmp	edi, esi
		jbe	short loc_10020B73
		or	edi, 0FFFFFFFFh
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020B73:				; CODE XREF: sub_10020B40+28j
		push	ebx
		push	esi
		call	PORT_ZAlloc_Util
		mov	ebx, eax
		sub	eax, edi
		push	edi		; size_t
		push	[esp+18h+arg_10] ; void	*
		add	eax, esi
		push	eax		; void *
		call	memcpy
		push	ebx		; int
		push	[esp+24h+arg_4]	; int
		push	ebp		; size_t
		call	sub_1001E350
		mov	ecx, [esp+2Ch+arg_8]
		add	esp, 1Ch
		mov	edi, eax
		mov	[ecx], esi
		test	ebx, ebx
		jz	short loc_10020BAF
		push	esi
		push	ebx
		call	PORT_ZFree_Util
		add	esp, 8

loc_10020BAF:				; CODE XREF: sub_10020B40+63j
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10020B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020BC0	proc near		; CODE XREF: sub_100206B0+BEp

var_6E		= byte ptr -6Eh
var_6D		= byte ptr -6Dh
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 70h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+70h+var_4], eax
		mov	eax, [esp+70h+arg_0]
		push	ebx
		mov	ebx, [esp+74h+arg_10]
		mov	[esp+74h+var_4C], eax
		mov	eax, [esp+74h+arg_4]
		push	ebp
		mov	ebp, [esp+78h+arg_1C]
		mov	[esp+78h+var_50], eax
		mov	eax, [esp+78h+arg_C]
		mov	[esp+78h+var_68], eax
		mov	eax, [esp+78h+arg_14]
		push	esi
		push	eax
		mov	[esp+80h+var_64], ebx
		mov	[esp+80h+var_58], 0FFFFFFFFh
		call	sub_10008CC0
		mov	esi, eax
		add	esp, 4
		mov	eax, [esi]
		lea	eax, ds:2[eax*2]
		cmp	ebx, eax
		jnb	short loc_10020C47
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+70h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_10020C47:				; CODE XREF: sub_10020BC0+63j
		mov	eax, [esi+4]
		push	edi
		call	eax
		mov	edi, eax
		test	edi, edi
		jnz	short loc_10020C76
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+70h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_10020C76:				; CODE XREF: sub_10020BC0+91j
		mov	eax, [esi+10h]
		push	edi
		call	eax
		mov	eax, [esp+84h+arg_20]
		add	esp, 4
		test	eax, eax
		jz	short loc_10020C95
		push	eax
		mov	eax, [esi+14h]
		push	ebp
		push	edi
		call	eax
		add	esp, 0Ch

loc_10020C95:				; CODE XREF: sub_10020BC0+C8j
		push	40h
		lea	eax, [esp+84h+var_6C]
		push	eax
		lea	eax, [esp+88h+var_44]
		push	eax
		mov	eax, [esi+18h]
		push	edi
		call	eax
		mov	eax, [esi+0Ch]
		push	1
		push	edi
		call	eax
		push	ebx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jnz	short loc_10020CD0
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10020EED
; ---------------------------------------------------------------------------

loc_10020CD0:				; CODE XREF: sub_10020BC0+FCj
		mov	ebp, ebx
		sub	ebp, [esi]
		dec	ebp
		push	ebp
		mov	[esp+84h+var_5C], ebp
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		mov	[esp+80h+var_54], ebx
		test	ebx, ebx
		jnz	short loc_10020D02
		push	0FFFFE013h
		call	PORT_SetError_Util
		mov	esi, [esp+84h+var_64]
		add	esp, 4
		jmp	loc_10020EE3
; ---------------------------------------------------------------------------

loc_10020D02:				; CODE XREF: sub_10020BC0+12Aj
		push	[esp+80h+var_64] ; size_t
		push	[esp+84h+var_68] ; void	*
		push	edi		; void *
		call	memcpy
		mov	ecx, [esi]
		mov	eax, [esp+8Ch+var_64]
		sub	eax, ecx
		dec	eax
		push	eax
		lea	eax, [edi+1]
		add	eax, ecx
		push	eax
		push	ecx
		push	ebx
		push	[esp+9Ch+arg_18]
		call	sub_10020140
		xor	ecx, ecx
		add	esp, 20h
		mov	[esp+80h+var_6C], ecx
		cmp	[esi], ecx
		jbe	short loc_10020D54
		jmp	short loc_10020D40
; ---------------------------------------------------------------------------
		align 10h

loc_10020D40:				; CODE XREF: sub_10020BC0+17Bj
					; sub_10020BC0+192j
		mov	al, [ecx+ebx]
		xor	[edi+ecx+1], al
		mov	ecx, [esp+80h+var_6C]
		inc	ecx
		mov	[esp+80h+var_6C], ecx
		cmp	ecx, [esi]
		jb	short loc_10020D40

loc_10020D54:				; CODE XREF: sub_10020BC0+179j
		push	dword ptr [esi]
		lea	eax, [edi+1]
		push	eax
		push	ebp
		push	ebx
		push	[esp+90h+arg_18]
		call	sub_10020140
		xor	edx, edx
		add	esp, 14h
		mov	[esp+80h+var_6C], edx
		test	ebp, ebp
		jz	short loc_10020D8F

loc_10020D75:				; CODE XREF: sub_10020BC0+1CDj
		mov	eax, [esi]
		add	eax, edx
		lea	ecx, [eax+edi]
		mov	al, [edx+ebx]
		xor	[ecx+1], al
		mov	edx, [esp+80h+var_6C]
		inc	edx
		mov	[esp+80h+var_6C], edx
		cmp	edx, ebp
		jb	short loc_10020D75

loc_10020D8F:				; CODE XREF: sub_10020BC0+1B3j
		mov	al, [edi]
		lea	ecx, [edi+1]
		mov	esi, [esi]
		mov	dl, al
		neg	dl
		mov	[esp+80h+var_60], 0
		or	dl, al
		mov	[esp+80h+var_68], esi
		not	dl
		xor	dh, dh
		shr	dl, 7
		add	ecx, esi
		xor	ah, ah
		mov	[esp+80h+var_6E], dh
		test	esi, esi
		jz	short loc_10020DE6
		lea	esi, [esp+80h+var_44]
		sub	esi, ecx
		mov	[esp+80h+var_48], esi
		mov	esi, [esp+80h+var_68]
		mov	ebp, [esp+80h+var_48]
		lea	ecx, [ecx+0]

loc_10020DD0:				; CODE XREF: sub_10020BC0+21Cj
		mov	al, [ecx+ebp]
		lea	ecx, [ecx+1]
		xor	al, [ecx-1]
		or	ah, al
		dec	esi
		jnz	short loc_10020DD0
		mov	ebp, [esp+80h+var_5C]
		mov	esi, [esp+80h+var_68]

loc_10020DE6:				; CODE XREF: sub_10020BC0+1F9j
		mov	al, ah
		neg	al
		or	al, ah
		not	al
		shr	al, 7
		and	dl, al
		lea	eax, ds:1[esi*2]
		mov	esi, [esp+80h+var_64]
		mov	[esp+80h+var_6D], dl
		mov	[esp+80h+var_6C], eax
		cmp	eax, esi
		jnb	short loc_10020E82
		mov	bh, [esp+80h+var_6E]
		mov	ebp, eax

loc_10020E10:				; CODE XREF: sub_10020BC0+2B0j
		mov	bl, [edi+ebp]
		mov	cl, 1
		sub	cl, bl
		mov	al, bl
		dec	al
		or	cl, al
		not	cl
		shr	cl, 7
		movzx	edx, cl
		movzx	ecx, bh
		not	ecx
		and	ecx, edx
		dec	dl
		dec	ecx
		mov	eax, ecx
		and	ecx, [esp+80h+var_60]
		not	eax
		and	eax, ebp
		inc	ebp
		or	eax, ecx
		mov	[esp+80h+var_6C], ebp
		mov	[esp+80h+var_60], eax
		mov	cl, bl
		neg	cl
		mov	al, dl
		or	cl, bl
		not	dl
		and	al, bh
		and	dl, 1
		or	al, dl
		not	cl
		mov	dl, [esp+80h+var_6D]
		mov	bh, al
		shr	cl, 7
		not	al
		not	cl
		and	cl, al
		dec	cl
		and	dl, cl
		mov	[esp+80h+var_6D], dl
		cmp	ebp, esi
		jb	short loc_10020E10
		mov	ebp, [esp+80h+var_5C]
		mov	[esp+80h+var_6E], bh
		mov	ebx, [esp+80h+var_54]
		mov	dh, [esp+80h+var_6E]

loc_10020E82:				; CODE XREF: sub_10020BC0+248j
		test	dl, dh
		jnz	short loc_10020E95
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10020ED9
; ---------------------------------------------------------------------------

loc_10020E95:				; CODE XREF: sub_10020BC0+2C4j
		mov	ecx, [esp+80h+var_60]
		mov	eax, esi
		mov	edx, [esp+80h+var_50]
		inc	ecx
		sub	eax, ecx
		mov	[edx], eax
		cmp	eax, [esp+80h+arg_8]
		jbe	short loc_10020EBC
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10020ED9
; ---------------------------------------------------------------------------

loc_10020EBC:				; CODE XREF: sub_10020BC0+2EBj
		test	eax, eax
		jz	short loc_10020ED1
		push	eax		; size_t
		lea	eax, [ecx+edi]
		push	eax		; void *
		push	[esp+88h+var_4C] ; void	*
		call	memcpy
		add	esp, 0Ch

loc_10020ED1:				; CODE XREF: sub_10020BC0+2FEj
		mov	[esp+80h+var_58], 0

loc_10020ED9:				; CODE XREF: sub_10020BC0+2D3j
					; sub_10020BC0+2FAj
		push	ebp
		push	ebx
		call	PORT_ZFree_Util
		add	esp, 8

loc_10020EE3:				; CODE XREF: sub_10020BC0+13Dj
		push	esi
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8

loc_10020EED:				; CODE XREF: sub_10020BC0+10Bj
		mov	ecx, [esp+80h+var_4]
		mov	eax, [esp+80h+var_58]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
sub_10020BC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020F10(int,	int, void *, size_t, int, int, int, int, void *, size_t)
sub_10020F10	proc near		; CODE XREF: sub_10020880+B1p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		push	ecx
		push	ebx
		push	esi
		push	edi
		push	[esp+10h+arg_10]
		call	sub_10008CC0
		mov	edi, [esp+14h+arg_4]
		mov	esi, eax
		add	esp, 4
		mov	ecx, [esi]
		lea	ecx, ds:2[ecx*2]
		cmp	edi, ecx
		jb	loc_100210C5
		mov	ebx, edi
		sub	ebx, ecx
		cmp	[esp+10h+arg_C], ebx
		ja	loc_100210C5
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		mov	byte ptr [ebp+0], 0
		mov	eax, [esi+4]
		call	eax
		mov	[esp+14h+arg_4], eax
		test	eax, eax
		jz	loc_10021027
		push	eax
		mov	eax, [esi+10h]
		call	eax
		mov	eax, [esp+18h+arg_1C]
		add	esp, 4
		test	eax, eax
		jz	short loc_10020F81
		push	eax
		push	[esp+18h+arg_18]
		mov	eax, [esi+14h]
		push	[esp+1Ch+arg_4]
		call	eax
		add	esp, 0Ch

loc_10020F81:				; CODE XREF: sub_10020F10+5Ej
		mov	eax, [esi]
		lea	ecx, [esp+14h+var_4]
		push	eax
		inc	eax
		push	ecx
		add	eax, ebp
		push	eax
		push	[esp+20h+arg_4]
		mov	eax, [esi+18h]
		call	eax
		mov	eax, [esi+0Ch]
		push	1
		push	[esp+28h+arg_4]
		call	eax
		mov	ecx, [esp+2Ch+arg_C]
		add	esp, 18h
		sub	ebx, ecx
		jz	short loc_10020FC7
		mov	eax, [esi]
		push	ebx		; size_t
		push	0		; int
		lea	eax, ds:1[eax*2]
		add	eax, ebp
		push	eax		; void *
		call	memset
		mov	ecx, [esp+20h+arg_C]
		add	esp, 0Ch

loc_10020FC7:				; CODE XREF: sub_10020F10+9Aj
		mov	eax, ebp
		sub	eax, ecx
		add	eax, edi
		mov	byte ptr [eax-1], 1
		test	ecx, ecx
		jz	short loc_10020FE3
		push	ecx		; size_t
		push	[esp+18h+arg_8]	; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_10020FE3:				; CODE XREF: sub_10020F10+C3j
		mov	ecx, [esp+14h+arg_20]
		lea	eax, [ebp+1]
		mov	[esp+14h+arg_4], eax
		test	ecx, ecx
		jnz	short loc_10021007
		push	dword ptr [esi]	; size_t
		push	eax		; void *
		call	sub_1000C220
		add	esp, 8
		test	eax, eax
		jz	short loc_10021015
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10021007:				; CODE XREF: sub_10020F10+E0j
		push	[esp+14h+arg_24] ; size_t
		push	ecx		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_10021015:				; CODE XREF: sub_10020F10+EFj
		sub	edi, [esi]
		dec	edi
		push	edi
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_1002103D

loc_10021027:				; CODE XREF: sub_10020F10+49j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1002103D:				; CODE XREF: sub_10020F10+115j
		push	dword ptr [esi]
		lea	eax, [ebp+1]
		push	eax
		push	edi
		push	ebx
		push	[esp+24h+arg_14]
		call	sub_10020140
		xor	edx, edx
		add	esp, 14h
		mov	[esp+14h+var_4], edx
		test	edi, edi
		jz	short loc_10021078
		jmp	short loc_10021060
; ---------------------------------------------------------------------------
		align 10h

loc_10021060:				; CODE XREF: sub_10020F10+14Bj
					; sub_10020F10+166j
		mov	ecx, [esi]
		mov	al, [ebx+edx]
		add	ecx, edx
		xor	[ecx+ebp+1], al
		mov	edx, [esp+14h+var_4]
		inc	edx
		mov	[esp+14h+var_4], edx
		cmp	edx, edi
		jb	short loc_10021060

loc_10021078:				; CODE XREF: sub_10020F10+149j
		mov	ecx, [esi]
		lea	eax, [ebp+1]
		push	edi
		add	eax, ecx
		push	eax
		push	ecx
		push	ebx
		push	[esp+24h+arg_14]
		call	sub_10020140
		xor	ecx, ecx
		add	esp, 14h
		mov	[esp+14h+var_4], ecx
		cmp	[esi], ecx
		jbe	short loc_100210B3
		mov	edx, [esp+14h+arg_4]
		lea	ecx, [ecx+0]

loc_100210A0:				; CODE XREF: sub_10020F10+1A1j
		mov	al, [ebx+ecx]
		xor	[edx+ecx], al
		mov	ecx, [esp+14h+var_4]
		inc	ecx
		mov	[esp+14h+var_4], ecx
		cmp	ecx, [esi]
		jb	short loc_100210A0

loc_100210B3:				; CODE XREF: sub_10020F10+187j
		push	edi
		push	ebx
		call	PORT_ZFree_Util
		add	esp, 8
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100210C5:				; CODE XREF: sub_10020F10+21j
					; sub_10020F10+2Fj
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
sub_10020F10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100210E0(void	*, int,	int, int, int, void *, size_t)
sub_100210E0	proc near		; CODE XREF: sub_10020A80+76p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 8
		push	ebp
		push	esi
		push	[esp+10h+arg_C]
		call	sub_10008CC0
		mov	esi, [esp+14h+arg_4]
		add	esp, 4
		mov	ebp, [esp+10h+arg_18]
		mov	[esp+10h+var_8], eax
		mov	ecx, [eax]
		sub	esi, ecx
		add	ecx, 2
		dec	esi
		add	ecx, ebp
		cmp	[esp+10h+arg_4], ecx
		jnb	short loc_10021123
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10021123:				; CODE XREF: sub_100210E0+2Bj
		mov	ecx, [esp+10h+arg_14]
		push	ebx
		push	edi
		mov	edi, [esp+18h+arg_0]
		mov	ebx, esi
		sub	ebx, ebp
		push	ebp		; size_t
		lea	eax, [ebx+edi]
		test	ecx, ecx
		jnz	short loc_1002114E
		push	eax		; void *
		call	sub_1000C220
		add	esp, 8
		test	eax, eax
		jz	short loc_10021158
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002114E:				; CODE XREF: sub_100210E0+57j
		push	ecx		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_10021158:				; CODE XREF: sub_100210E0+64j
		mov	eax, [esp+18h+var_8]
		mov	eax, [eax+4]
		call	eax
		mov	[esp+18h+arg_18], eax
		test	eax, eax
		jz	loc_100211F3
		push	eax
		mov	eax, [esp+1Ch+var_8]
		mov	eax, [eax+10h]
		call	eax
		mov	eax, [esp+1Ch+var_8]
		push	8
		push	offset dword_10044B80
		push	[esp+24h+arg_18]
		mov	eax, [eax+14h]
		call	eax
		mov	eax, [esp+28h+var_8]
		push	dword ptr [eax]
		mov	eax, [eax+14h]
		push	[esp+2Ch+arg_8]
		push	[esp+30h+arg_18]
		call	eax
		push	ebp
		mov	ebp, [esp+38h+var_8]
		lea	eax, [ebx+edi]
		push	eax
		push	[esp+3Ch+arg_18]
		mov	eax, [ebp+14h]
		call	eax
		push	dword ptr [ebp+0]
		lea	ecx, [esp+44h+var_4]
		push	ecx
		lea	eax, [esi+edi]
		push	eax
		push	[esp+4Ch+arg_18]
		mov	eax, [ebp+18h]
		call	eax
		mov	eax, [ebp+0Ch]
		push	1
		push	[esp+54h+arg_18]
		call	eax
		add	esp, 40h
		lea	eax, [ebx-1]
		push	eax		; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		push	esi
		mov	byte ptr [ebx+edi-1], 1
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_1002120B

loc_100211F3:				; CODE XREF: sub_100210E0+87j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002120B:				; CODE XREF: sub_100210E0+111j
		push	dword ptr [ebp+0]
		lea	eax, [esi+edi]
		push	eax
		push	esi
		push	ebx
		push	[esp+28h+arg_10]
		call	sub_10020140
		xor	ecx, ecx
		add	esp, 14h
		mov	[esp+18h+var_4], ecx
		test	esi, esi
		jz	short loc_10021243
		lea	ebx, [ebx+0]

loc_10021230:				; CODE XREF: sub_100210E0+161j
		mov	al, [ebx+ecx]
		xor	[ecx+edi], al
		mov	ecx, [esp+18h+var_4]
		inc	ecx
		mov	[esp+18h+var_4], ecx
		cmp	ecx, esi
		jb	short loc_10021230

loc_10021243:				; CODE XREF: sub_100210E0+148j
		push	ebx
		call	PORT_Free_Util
		mov	eax, [esp+1Ch+arg_4]
		add	esp, 4
		and	byte ptr [edi],	7Fh
		mov	byte ptr [edi+eax-1], 0BCh
		xor	eax, eax
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 8
		retn
sub_100210E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021270	proc near		; CODE XREF: sub_10020350+9Ep

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	[esp+14h+arg_C]
		call	sub_10008CC0
		mov	edx, [esp+18h+arg_14]
		add	esp, 4
		mov	[esp+14h+var_8], eax
		add	edx, 2
		mov	ecx, [eax]
		mov	eax, [esp+14h+arg_8]
		mov	ebx, eax
		sub	ebx, ecx
		add	ecx, edx
		dec	ebx
		cmp	eax, ecx
		jb	loc_100214B3
		mov	ebp, [esp+14h+arg_4]
		cmp	byte ptr [eax+ebp-1], 0BCh
		jnz	loc_100214B3
		test	byte ptr [ebp+0], 80h
		jnz	loc_100214B3
		push	esi
		push	ebx
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_100212E1
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100212E1:				; CODE XREF: sub_10021270+58j
		mov	eax, [esp+18h+var_8]
		push	edi
		lea	edi, [ebx+ebp]
		push	dword ptr [eax]
		push	edi
		push	ebx
		push	esi
		push	[esp+2Ch+arg_10]
		call	sub_10020140
		xor	ecx, ecx
		add	esp, 14h
		mov	[esp+1Ch+var_C], ecx
		test	ebx, ebx
		jz	short loc_10021317

loc_10021304:				; CODE XREF: sub_10021270+A5j
		mov	al, [ecx+ebp]
		xor	[ecx+esi], al
		mov	ecx, [esp+1Ch+var_C]
		inc	ecx
		mov	[esp+1Ch+var_C], ecx
		cmp	ecx, ebx
		jb	short loc_10021304

loc_10021317:				; CODE XREF: sub_10021270+92j
		mov	edx, [esp+1Ch+arg_14]
		mov	eax, ebx
		and	byte ptr [esi],	7Fh
		xor	ecx, ecx
		sub	eax, edx
		mov	[esp+1Ch+var_C], ecx
		dec	eax
		jz	short loc_1002133F
		jmp	short loc_10021330
; ---------------------------------------------------------------------------
		align 10h

loc_10021330:				; CODE XREF: sub_10021270+BBj
					; sub_10021270+CDj
		cmp	byte ptr [ecx+esi], 0
		jnz	short loc_1002134F
		inc	ecx
		mov	[esp+1Ch+var_C], ecx
		cmp	ecx, eax
		jb	short loc_10021330

loc_1002133F:				; CODE XREF: sub_10021270+B9j
		mov	eax, esi
		sub	eax, edx
		add	eax, ebx
		mov	[esp+1Ch+var_4], eax
		cmp	byte ptr [eax-1], 1
		jz	short loc_1002136D

loc_1002134F:				; CODE XREF: sub_10021270+C4j
		push	esi
		call	PORT_Free_Util
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1002136D:				; CODE XREF: sub_10021270+DDj
		mov	ebx, [esp+1Ch+var_8]
		push	dword ptr [ebx]
		call	PORT_Alloc_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_1002139F
		push	esi
		call	PORT_Free_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1002139F:				; CODE XREF: sub_10021270+10Fj
		mov	eax, [ebx+4]
		call	eax
		mov	[esp+1Ch+arg_8], eax
		test	eax, eax
		jnz	short loc_100213D0
		push	esi
		call	PORT_Free_Util
		push	ebp
		call	PORT_Free_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 0Ch
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100213D0:				; CODE XREF: sub_10021270+13Aj
		push	eax
		mov	eax, [ebx+10h]
		call	eax
		mov	eax, [ebx+14h]
		push	8
		push	offset dword_10044B80
		push	[esp+28h+arg_8]
		call	eax
		push	dword ptr [ebx]
		mov	eax, [ebx+14h]
		push	[esp+30h+arg_0]
		push	[esp+34h+arg_8]
		call	eax
		mov	edx, [esp+38h+arg_14]
		mov	eax, [ebx+14h]
		push	edx
		push	[esp+3Ch+var_4]
		push	[esp+40h+arg_8]
		call	eax
		push	dword ptr [ebx]
		lea	eax, [esp+48h+var_C]
		push	eax
		mov	eax, [ebx+18h]
		push	ebp
		push	[esp+50h+arg_8]
		call	eax
		mov	eax, [ebx+0Ch]
		push	1
		push	[esp+58h+arg_8]
		call	eax
		add	esp, 40h
		push	esi
		call	PORT_Free_Util
		mov	edx, [ebx]
		add	esp, 4
		mov	ecx, ebp
		sub	edx, 4
		jb	short loc_10021449

loc_10021438:				; CODE XREF: sub_10021270+1D7j
		mov	eax, [ecx]
		cmp	eax, [edi]
		jnz	short loc_1002144E
		add	ecx, 4
		add	edi, 4
		sub	edx, 4
		jnb	short loc_10021438

loc_10021449:				; CODE XREF: sub_10021270+1C6j
		cmp	edx, 0FFFFFFFCh
		jz	short loc_1002149E

loc_1002144E:				; CODE XREF: sub_10021270+1CCj
		mov	al, [ecx]
		cmp	al, [edi]
		jnz	short loc_1002147B
		cmp	edx, 0FFFFFFFDh
		jz	short loc_1002149E
		mov	al, [ecx+1]
		cmp	al, [edi+1]
		jnz	short loc_1002147B
		cmp	edx, 0FFFFFFFEh
		jz	short loc_1002149E
		mov	al, [ecx+2]
		cmp	al, [edi+2]
		jnz	short loc_1002147B
		cmp	edx, 0FFFFFFFFh
		jz	short loc_1002149E
		mov	al, [ecx+3]
		cmp	al, [edi+3]
		jz	short loc_1002149E

loc_1002147B:				; CODE XREF: sub_10021270+1E2j
					; sub_10021270+1EFj ...
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		push	ebp
		call	PORT_Free_Util
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1002149E:				; CODE XREF: sub_10021270+1DCj
					; sub_10021270+1E7j ...
		push	ebp
		xor	esi, esi
		call	PORT_Free_Util
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100214B3:				; CODE XREF: sub_10021270+2Bj
					; sub_10021270+3Aj ...
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10021270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100214D0	proc near		; CODE XREF: sub_100207F0+37p
					; sub_10020A00+40p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	ebp
		call	PORT_Alloc_Util
		mov	ecx, eax
		add	esp, 4
		mov	[esp+0Ch+var_8], ecx
		test	ecx, ecx
		jnz	short loc_100214F0
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100214F0:				; CODE XREF: sub_100214D0+19j
		mov	eax, [esp+0Ch+arg_4]
		push	ebx
		lea	ebx, [ecx+1]
		mov	byte ptr [ecx],	0
		mov	[ebx], al
		inc	ebx
		push	esi
		push	edi
		dec	eax
		jz	loc_100215C7
		dec	eax
		jnz	loc_100215D6
		mov	eax, [esp+18h+arg_8]
		mov	edi, ebp
		sub	edi, [eax+8]
		sub	edi, 3
		cmp	edi, 8
		jl	loc_100215D6
		lea	eax, [ebp-2]
		mov	esi, eax
		mov	[esp+18h+var_4], eax
		push	esi		; size_t
		push	ebx		; void *
		call	sub_1000C220
		add	esp, 8
		test	eax, eax
		jnz	short loc_100215A7
		xor	ebp, ebp
		test	edi, edi
		jle	short loc_1002157F

loc_10021540:				; CODE XREF: sub_100214D0+ADj
		cmp	byte ptr [ebx+ebp], 0
		jnz	short loc_1002157A
		cmp	esi, edi
		jg	short loc_10021568
		mov	eax, [esp+18h+arg_0]
		sub	eax, edi
		sub	eax, 2
		push	eax		; size_t
		lea	eax, [edi+ebx]
		push	eax		; void *
		call	sub_1000C220
		add	esp, 8
		test	eax, eax
		jnz	short loc_100215A7
		mov	esi, [esp+18h+var_4]

loc_10021568:				; CODE XREF: sub_100214D0+78j
					; sub_100214D0+A3j
		mov	al, [esi+ebx-1]
		dec	esi
		test	al, al
		jnz	short loc_10021577
		cmp	esi, edi
		jg	short loc_10021568
		jmp	short loc_1002157B
; ---------------------------------------------------------------------------

loc_10021577:				; CODE XREF: sub_100214D0+9Fj
		mov	[ebx+ebp], al

loc_1002157A:				; CODE XREF: sub_100214D0+74j
		inc	ebp

loc_1002157B:				; CODE XREF: sub_100214D0+A5j
		cmp	ebp, edi
		jl	short loc_10021540

loc_1002157F:				; CODE XREF: sub_100214D0+6Ej
		mov	eax, [esp+18h+arg_8]
		mov	byte ptr [ebx+edi], 0
		push	dword ptr [eax+8] ; size_t
		push	dword ptr [eax+4] ; void *
		lea	eax, [edi+1]
		add	eax, ebx
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+24h+var_8]
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100215A7:				; CODE XREF: sub_100214D0+68j
					; sub_100214D0+92j
		push	[esp+18h+var_8]
		call	PORT_Free_Util
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100215C7:				; CODE XREF: sub_100214D0+31j
		mov	esi, [esp+18h+arg_8]
		sub	ebp, [esi+8]
		sub	ebp, 3
		cmp	ebp, 8
		jge	short loc_100215E9

loc_100215D6:				; CODE XREF: sub_100214D0+38j
					; sub_100214D0+4Dj
		push	ecx
		call	PORT_Free_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100215E9:				; CODE XREF: sub_100214D0+104j
		push	ebp		; size_t
		push	0FFh		; int
		push	ebx		; void *
		call	memset
		mov	byte ptr [ebx+ebp], 0
		lea	eax, [ebp+1]
		push	dword ptr [esi+8] ; size_t
		add	eax, ebx
		push	dword ptr [esi+4] ; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+30h+var_8]
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 8
		retn
sub_100214D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021620	proc near		; DATA XREF: .rdata:1003E3E8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	ds:PR_GetLibraryFilePathname
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10021650
		push	esi
		push	edi		; void *
		call	sub_10021660
		push	edi
		mov	esi, eax
		call	ds:PR_Free
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10021650:				; CODE XREF: sub_10021620+16j
		xor	eax, eax
		pop	edi
		retn
sub_10021620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10021660(void	*)
sub_10021660	proc near		; CODE XREF: sub_10021620+1Ap
					; sub_10021960+28p
					; DATA XREF: ...

var_109C	= dword	ptr -109Ch
var_1098	= byte ptr -1098h
var_1094	= dword	ptr -1094h
var_1090	= dword	ptr -1090h
var_108C	= dword	ptr -108Ch
var_1088	= dword	ptr -1088h
var_1084	= dword	ptr -1084h
var_1080	= dword	ptr -1080h
var_107C	= dword	ptr -107Ch
var_1078	= byte ptr -1078h
var_1074	= byte ptr -1074h
var_1070	= dword	ptr -1070h
var_1068	= byte ptr -1068h
var_1064	= dword	ptr -1064h
var_105C	= byte ptr -105Ch
var_1058	= dword	ptr -1058h
var_1050	= byte ptr -1050h
var_104C	= dword	ptr -104Ch
var_1044	= byte ptr -1044h
var_1004	= byte ptr -1004h
var_1003	= byte ptr -1003h
var_1002	= byte ptr -1002h
var_1001	= byte ptr -1001h
var_1000	= byte ptr -1000h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, 109Ch
		call	__alloca_probe
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+109Ch+var_4], eax
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10A8h+arg_0]
		lea	eax, [esp+10A8h+var_1078]
		push	edi
		push	34h		; size_t
		xor	ebx, ebx
		mov	[esp+10B0h+var_1080], esi
		xor	edi, edi
		mov	[esp+10B0h+var_108C], ebx
		push	edi		; int
		push	eax		; void *
		xor	ebp, ebp
		mov	[esp+10B8h+var_1088], ebx
		mov	[esp+10B8h+var_1084], ebx
		mov	[esp+10B8h+var_109C], ebx
		call	memset
		add	esp, 0Ch
		mov	[esp+10ACh+var_1090], 40h
		lea	eax, [esp+10ACh+var_1044]
		mov	[esp+10ACh+var_1094], eax
		test	esi, esi
		jz	loc_100218FB
		push	esi		; void *
		call	sub_100219D0
		add	esp, 4
		mov	[esp+10ACh+var_107C], eax
		test	eax, eax
		jz	loc_100218EA
		push	edi
		push	1
		push	eax
		call	ds:PR_Open
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_100218A9
		push	0Ch
		lea	eax, [esp+10B0h+var_1004]
		push	eax
		push	esi
		call	ds:PR_Read
		add	esp, 0Ch
		cmp	eax, 0Ch
		jnz	loc_100218A9
		cmp	[esp+10ACh+var_1004], 0F1h
		jnz	loc_100218A9
		cmp	[esp+10ACh+var_1003], 0C5h
		jnz	loc_100218A9
		cmp	[esp+10ACh+var_1002], 1
		jnz	loc_100218A9
		cmp	[esp+10ACh+var_1001], 2
		jb	loc_100218A9
		lea	eax, [esp+10ACh+var_1000]
		push	edi
		push	eax
		call	sub_100219A0
		add	esp, 4
		push	eax
		push	esi
		call	ds:PR_Seek
		lea	eax, [esp+10B8h+var_1074]
		push	eax
		push	esi
		call	sub_10021A40
		add	esp, 14h
		test	eax, eax
		jnz	loc_100218A9
		lea	eax, [esp+10ACh+var_1068]
		push	eax
		push	esi
		call	sub_10021A40
		add	esp, 8
		test	eax, eax
		jnz	loc_100218A9
		lea	eax, [esp+10ACh+var_105C]
		push	eax
		push	esi
		call	sub_10021A40
		add	esp, 8
		test	eax, eax
		jnz	loc_100218A9
		lea	eax, [esp+10ACh+var_1050]
		push	eax
		push	esi
		call	sub_10021A40
		add	esp, 8
		test	eax, eax
		jnz	loc_100218A9
		lea	eax, [esp+10ACh+var_108C]
		push	eax
		push	esi
		call	sub_10021A40
		add	esp, 8
		test	eax, eax
		jnz	loc_100218A9
		push	esi
		call	ds:PR_Close
		lea	eax, [esp+10B0h+var_1078]
		xor	esi, esi
		push	eax
		call	sub_10019220
		push	eax
		call	sub_10008CC0
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_100218A9
		push	esi
		push	1
		push	[esp+10B4h+var_1080]
		call	ds:PR_Open
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_100218A9
		mov	ecx, [edi+4]
		call	ecx
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_100218A9
		mov	ecx, [edi+10h]
		push	ebx
		call	ecx
		push	1000h
		lea	eax, [esp+10B4h+var_1004]
		push	eax
		push	ebp
		call	ds:PR_Read
		add	esp, 10h
		test	eax, eax
		jle	short loc_1002186A
		lea	ecx, [ecx+0]

loc_10021840:				; CODE XREF: sub_10021660+208j
		push	eax
		lea	eax, [esp+10B0h+var_1004]
		push	eax
		mov	eax, [edi+14h]
		push	ebx
		call	eax
		push	1000h
		lea	eax, [esp+10BCh+var_1004]
		push	eax
		push	ebp
		call	ds:PR_Read
		add	esp, 18h
		test	eax, eax
		jg	short loc_10021840

loc_1002186A:				; CODE XREF: sub_10021660+1DBj
		push	ebp
		call	ds:PR_Close
		push	[esp+10B0h+var_1090]
		lea	eax, [esp+10B4h+var_1090]
		xor	ebp, ebp
		push	eax
		push	[esp+10B8h+var_1094]
		mov	eax, [edi+18h]
		push	ebx
		call	eax
		lea	eax, [esp+10C0h+var_1098]
		push	eax
		lea	eax, [esp+10C4h+var_108C]
		push	eax
		lea	eax, [esp+10C8h+var_1078]
		push	eax
		call	sub_1001C6B0
		add	esp, 20h
		test	eax, eax
		jnz	short loc_100218A9
		mov	[esp+10ACh+var_109C], 1

loc_100218A9:				; CODE XREF: sub_10021660+8Bj
					; sub_10021660+A8j ...
		push	[esp+10ACh+var_107C]
		call	PORT_Free_Util
		add	esp, 4
		test	esi, esi
		jz	short loc_100218C7
		push	esi
		mov	esi, ds:PR_Close
		call	esi ; PR_Close
		add	esp, 4
		jmp	short loc_100218CD
; ---------------------------------------------------------------------------

loc_100218C7:				; CODE XREF: sub_10021660+257j
		mov	esi, ds:PR_Close

loc_100218CD:				; CODE XREF: sub_10021660+265j
		test	ebp, ebp
		jz	short loc_100218D7
		push	ebp
		call	esi ; PR_Close
		add	esp, 4

loc_100218D7:				; CODE XREF: sub_10021660+26Fj
		test	ebx, ebx
		jz	short loc_100218EA
		test	edi, edi
		jz	short loc_100218EA
		mov	eax, [edi+0Ch]
		push	1
		push	ebx
		call	eax
		add	esp, 8

loc_100218EA:				; CODE XREF: sub_10021660+74j
					; sub_10021660+279j ...
		mov	eax, [esp+10ACh+var_1088]
		test	eax, eax
		jz	short loc_100218FB
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_100218FB:				; CODE XREF: sub_10021660+5Fj
					; sub_10021660+290j
		mov	eax, [esp+10ACh+var_1070]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		test	eax, eax
		jz	short loc_10021910
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_10021910:				; CODE XREF: sub_10021660+2A5j
		mov	eax, [esp+109Ch+var_1064]
		test	eax, eax
		jz	short loc_10021921
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_10021921:				; CODE XREF: sub_10021660+2B6j
		mov	eax, [esp+109Ch+var_1058]
		test	eax, eax
		jz	short loc_10021932
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_10021932:				; CODE XREF: sub_10021660+2C7j
		mov	ecx, [esp+109Ch+var_104C]
		test	ecx, ecx
		jz	short loc_10021943
		push	ecx
		call	PORT_Free_Util
		add	esp, 4

loc_10021943:				; CODE XREF: sub_10021660+2D8j
		mov	ecx, [esp+109Ch+var_4]
		mov	eax, [esp+109Ch+var_109C]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 109Ch
		retn
sub_10021660	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021960	proc near		; DATA XREF: .rdata:1003E3ECo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1002196E
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1002196E:				; CODE XREF: sub_10021960+6j
		push	esi
		push	edi
		push	offset sub_100219A0
		push	eax
		xor	edi, edi
		call	ds:PR_GetLibraryFilePathname
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10021999
		push	esi		; void *
		call	sub_10021660
		push	esi
		mov	edi, eax
		call	ds:PR_Free
		add	esp, 8

loc_10021999:				; CODE XREF: sub_10021960+25j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_10021960	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100219A0	proc near		; CODE XREF: sub_10021660+EFp
					; DATA XREF: sub_10021960+10o

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [edx+1]
		shl	eax, 8
		or	eax, ecx
		movzx	ecx, byte ptr [edx+2]
		shl	eax, 8
		or	eax, ecx
		movzx	ecx, byte ptr [edx+3]
		shl	eax, 8
		or	eax, ecx
		retn
sub_100219A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100219D0(void	*)
sub_100219D0	proc near		; CODE XREF: sub_10021660+66p

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	esi, edi
		lea	ecx, [esi+1]
		lea	ecx, [ecx+0]

loc_100219E0:				; CODE XREF: sub_100219D0+15j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_100219E0
		sub	esi, ecx
		lea	eax, [esi+5]
		push	eax
		call	PORT_Alloc_Util
		lea	ebx, [esi-4]
		add	esp, 4
		mov	ebp, eax
		test	ebx, ebx
		jle	short loc_10021A18
		push	5		; size_t
		lea	ecx, [ebx+edi]
		push	offset a_dll	; ".dll"
		push	ecx		; char *
		call	ds:strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10021A18
		mov	esi, ebx

loc_10021A18:				; CODE XREF: sub_100219D0+2Cj
					; sub_100219D0+44j
		push	esi		; size_t
		push	edi		; void *
		push	ebp		; void *
		call	memcpy
		mov	eax, ds:dword_10044B90
		add	esp, 0Ch
		mov	[esi+ebp], eax
		mov	al, ds:byte_10044B94
		mov	[esi+ebp+4], al
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100219D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021A40	proc near		; CODE XREF: sub_10021660+105p
					; sub_10021660+11Bp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	4
		lea	eax, [esp+8+var_4]
		push	eax
		push	[esp+0Ch+arg_0]
		call	ds:PR_Read
		add	esp, 0Ch
		cmp	eax, 4
		jz	short loc_10021A5F
		or	eax, 0FFFFFFFFh
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10021A5F:				; CODE XREF: sub_10021A40+18j
		mov	eax, [esp+4+var_4]
		movzx	ecx, al
		shl	ecx, 8
		movzx	eax, ah
		or	ecx, eax
		movzx	eax, byte ptr [esp+4+var_4+2]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esp+4+var_4+3]
		push	esi
		mov	esi, [esp+8+arg_4]
		shl	ecx, 8
		or	ecx, eax
		push	ecx
		mov	[esi+8], ecx
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esi+4], eax
		test	eax, eax
		jz	short loc_10021AC1
		push	dword ptr [esi+8]
		push	eax
		push	[esp+10h+arg_0]
		call	ds:PR_Read
		add	esp, 0Ch
		cmp	eax, [esi+8]
		jz	short loc_10021ACE
		push	dword ptr [esi+4]
		call	PORT_Free_Util
		add	esp, 4
		mov	dword ptr [esi+4], 0

loc_10021AC1:				; CODE XREF: sub_10021A40+57j
		mov	dword ptr [esi+8], 0
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10021ACE:				; CODE XREF: sub_10021A40+6Dj
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
sub_10021A40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021AE0	proc near		; DATA XREF: .rdata:1003E44Co

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 24h
		mov	ecx, [esp+24h+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	esi, [ecx+8]
		or	ebx, 0FFFFFFFFh
		mov	edx, esi
		mov	[esp+30h+var_24], 0
		mov	eax, esi
		shr	edx, 1
		and	eax, 1
		mov	[esp+30h+var_1C], 0
		add	edx, eax
		mov	[esp+30h+var_18], 0
		mov	eax, [ecx+4]
		mov	[esp+30h+var_14], eax
		sub	eax, edx
		add	eax, esi
		mov	[esp+30h+var_10], edx
		mov	esi, [esp+30h+arg_C]
		mov	[esp+30h+var_C], 0
		mov	[esp+30h+var_4], edx
		mov	[esp+30h+var_8], eax
		push	dword ptr [esi+8]
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		mov	[esp+30h+var_20], edi
		test	edi, edi
		jz	short loc_10021BC3
		push	[esp+30h+arg_10]
		mov	eax, [esi+8]
		push	esi
		push	[esp+38h+arg_8]
		mov	[esp+3Ch+var_1C], eax
		lea	eax, [esp+3Ch+var_18]
		push	[esp+3Ch+arg_4]
		push	eax
		push	2
		call	sub_10021BD0
		add	esp, 18h
		test	eax, eax
		jnz	short loc_10021BB2
		push	[esp+30h+arg_10]
		lea	eax, [esp+34h+var_24]
		push	eax
		push	[esp+38h+arg_8]
		lea	eax, [esp+3Ch+var_C]
		push	[esp+3Ch+arg_4]
		push	eax
		push	3
		call	sub_10021BD0
		mov	edi, [esp+48h+var_20]
		add	esp, 18h
		test	eax, eax
		jnz	short loc_10021BB2
		xor	edx, edx
		cmp	[esi+8], edx
		jbe	short loc_10021BB0

loc_10021BA1:				; CODE XREF: sub_10021AE0+CEj
		mov	ecx, [esi+4]
		mov	al, [edx+edi]
		xor	[ecx+edx], al
		inc	edx
		cmp	edx, [esi+8]
		jb	short loc_10021BA1

loc_10021BB0:				; CODE XREF: sub_10021AE0+BFj
		xor	ebx, ebx

loc_10021BB2:				; CODE XREF: sub_10021AE0+90j
					; sub_10021AE0+B8j
		test	edi, edi
		jz	short loc_10021BC3
		push	[esp+30h+var_1C]
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8

loc_10021BC3:				; CODE XREF: sub_10021AE0+69j
					; sub_10021AE0+D4j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 24h
		retn
sub_10021AE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021BD0	proc near		; CODE XREF: sub_10021AE0+86p
					; sub_10021AE0+AAp
					; DATA XREF: ...

var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0A4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0A4h+var_4], eax
		mov	ecx, [esp+0A4h+arg_4]
		mov	eax, [esp+0A4h+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0B0h+arg_10]
		xor	ebx, ebx
		mov	[esp+0B0h+var_90], ecx
		mov	ecx, [esp+0B0h+arg_C]
		push	edi
		mov	edi, [esp+0B4h+arg_8]
		mov	[esp+0B4h+var_94], ecx
		mov	ecx, [esp+0B4h+arg_14]
		push	eax
		mov	[esp+0B8h+var_8C], edi
		mov	[esp+0B8h+var_88], ecx
		mov	[esp+0B8h+var_A4], 0
		mov	[esp+0B8h+var_98], ebx
		mov	[esp+0B8h+var_9C], 0FFFFFFFFh
		call	sub_10008CC0
		mov	ebp, [esi+8]
		add	esp, 4
		mov	edx, eax
		mov	eax, [esi+4]
		mov	[esp+0B4h+var_A0], eax
		test	edi, edi
		jz	short loc_10021C5F
		mov	ebx, edi
		lea	ecx, [ebx+1]

loc_10021C56:				; CODE XREF: sub_10021BD0+8Bj
		mov	al, [ebx]
		inc	ebx
		test	al, al
		jnz	short loc_10021C56
		sub	ebx, ecx

loc_10021C5F:				; CODE XREF: sub_10021BD0+7Fj
		mov	eax, [esp+0B4h+var_90]
		push	[esp+0B4h+var_88]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		push	edx
		call	sub_10008A00
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_10021D89
		push	esi
		call	sub_10008950
		push	ebx
		push	edi
		push	esi
		call	sub_10008C80
		mov	eax, [esp+0C4h+var_94]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		push	esi
		call	sub_10008C80
		push	40h
		lea	eax, [esp+0D4h+var_A4]
		push	eax
		lea	eax, [esp+0D8h+var_84]
		push	eax
		push	esi
		call	sub_10008A90
		add	esp, 2Ch
		test	eax, eax
		jnz	loc_10021D78
		test	ebp, ebp
		jz	loc_10021D70

loc_10021CC3:				; CODE XREF: sub_10021BD0+19Aj
		push	esi
		call	sub_10008950
		push	[esp+0B8h+var_A4]
		lea	eax, [esp+0BCh+var_84]
		push	eax
		push	esi
		call	sub_10008C80
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_10021CEA
		push	ebx
		push	edi
		push	esi
		call	sub_10008C80
		add	esp, 0Ch

loc_10021CEA:				; CODE XREF: sub_10021BD0+10Dj
		mov	eax, [esp+0B4h+var_94]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		push	esi
		call	sub_10008C80
		push	40h
		lea	eax, [esp+0C4h+var_98]
		push	eax
		lea	eax, [esp+0C8h+var_44]
		push	eax
		push	esi
		call	sub_10008A90
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_10021D78
		push	esi
		call	sub_10008950
		push	[esp+0B8h+var_A4]
		lea	eax, [esp+0BCh+var_84]
		push	eax
		push	esi
		call	sub_10008C80
		push	40h
		lea	eax, [esp+0C8h+var_A4]
		push	eax
		lea	eax, [esp+0CCh+var_84]
		push	eax
		push	esi
		call	sub_10008A90
		add	esp, 20h
		test	eax, eax
		jnz	short loc_10021D78
		mov	edi, [esp+0B4h+var_98]
		cmp	edi, ebp
		jb	short loc_10021D4E
		mov	edi, ebp

loc_10021D4E:				; CODE XREF: sub_10021BD0+17Aj
		push	edi		; size_t
		lea	eax, [esp+0B8h+var_44]
		push	eax		; void *
		push	[esp+0BCh+var_A0] ; void *
		call	memcpy
		add	[esp+0C0h+var_A0], edi
		add	esp, 0Ch
		sub	ebp, edi
		mov	edi, [esp+0B4h+var_8C]
		jnz	loc_10021CC3

loc_10021D70:				; CODE XREF: sub_10021BD0+EDj
		mov	[esp+0B4h+var_9C], 0

loc_10021D78:				; CODE XREF: sub_10021BD0+E5j
					; sub_10021BD0+144j ...
		push	1		; int
		push	esi		; void *
		call	sub_10008A50
		mov	eax, [esp+0BCh+var_9C]
		add	esp, 8
		jmp	short loc_10021D8C
; ---------------------------------------------------------------------------

loc_10021D89:				; CODE XREF: sub_10021BD0+AAj
		or	eax, 0FFFFFFFFh

loc_10021D8C:				; CODE XREF: sub_10021BD0+1B7j
		mov	ecx, [esp+0B4h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A4h
		retn
sub_10021BD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021DB0	proc near		; DATA XREF: .rdata:1003E4A0o
		push	98h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_10021DB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021DC0	proc near		; DATA XREF: .rdata:1003E4A4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	98h
		call	PORT_ZAlloc_Util
		push	0
		push	[esp+0Ch+arg_C]
		mov	esi, eax
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	10h
		push	[esp+1Ch+arg_0]
		push	esi
		call	sub_10021F40
		add	esp, 20h
		test	eax, eax
		jz	short loc_10021E00
		push	98h
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10021E00:				; CODE XREF: sub_10021DC0+2Cj
		mov	eax, esi
		pop	esi
		retn
sub_10021DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021E10	proc near		; DATA XREF: .rdata:1003E4B0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10021E29

loc_10021E18:				; CODE XREF: sub_10021E10+20j
					; sub_10021E10+2Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10021E29:				; CODE XREF: sub_10021E10+6j
		cmp	dword ptr [eax+94h], 0
		jnz	short loc_10021E18
		mov	ecx, [eax+90h]
		sub	ecx, 0
		jz	short loc_10021E66
		dec	ecx
		jnz	short loc_10021E18
		push	esi
		mov	esi, [esp+4+arg_14]
		push	ecx
		push	eax
		add	eax, 10h
		push	eax
		push	esi
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_10]
		call	sub_10021FE0
		mov	eax, [esp+1Ch+arg_8]
		add	esp, 18h
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10021E66:				; CODE XREF: sub_10021E10+2Bj
		add	eax, 10h
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_10]
		call	sub_10022380
		mov	eax, [esp+0Ch+arg_8]
		add	esp, 0Ch
		mov	ecx, [esp+arg_14]
		mov	[eax], ecx
		xor	eax, eax
		retn
sub_10021E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10021E90(void	*, int)
sub_10021E90	proc near		; DATA XREF: .rdata:1003E4A8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10021EB9
		push	98h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_10021EB9
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10021EB9:				; CODE XREF: sub_10021E90+7j
					; sub_10021E90+1Ej
		pop	esi
		retn
sub_10021E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021EC0	proc near		; DATA XREF: .rdata:1003E4ACo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10021ED9

loc_10021EC8:				; CODE XREF: sub_10021EC0+20j
					; sub_10021EC0+2Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10021ED9:				; CODE XREF: sub_10021EC0+6j
		cmp	dword ptr [eax+94h], 0
		jz	short loc_10021EC8
		mov	ecx, [eax+90h]
		sub	ecx, 0
		jz	short loc_10021F17
		dec	ecx
		jnz	short loc_10021EC8
		push	esi
		mov	esi, [esp+4+arg_14]
		push	1
		push	eax
		add	eax, 10h
		push	eax
		push	esi
		push	[esp+14h+arg_4]
		push	[esp+18h+arg_10]
		call	sub_10021FE0
		mov	eax, [esp+1Ch+arg_8]
		add	esp, 18h
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10021F17:				; CODE XREF: sub_10021EC0+2Bj
		add	eax, 10h
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_10]
		call	sub_100231C0
		mov	eax, [esp+0Ch+arg_8]
		add	esp, 0Ch
		mov	ecx, [esp+arg_14]
		mov	[eax], ecx
		xor	eax, eax
		retn
sub_10021EC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021F40	proc near		; CODE XREF: sub_10021DC0+22p
					; DATA XREF: .rdata:1003E49Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10021F5B

loc_10021F49:				; CODE XREF: sub_10021F40+25j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10021F5B:				; CODE XREF: sub_10021F40+7j
		mov	eax, [esp+4+arg_10]
		sub	eax, 0
		jz	short loc_10021FA9
		dec	eax
		jnz	short loc_10021F49
		mov	ecx, [esp+4+arg_C]
		mov	eax, [ecx]
		mov	[esi], eax
		mov	eax, [ecx+4]
		mov	[esi+4], eax
		mov	eax, [ecx+8]
		mov	[esi+8], eax
		mov	eax, [ecx+0Ch]
		mov	[esi+0Ch], eax
		lea	eax, [esi+10h]
		push	eax
		push	[esp+8+arg_4]
		call	sub_10024000
		mov	eax, [esp+0Ch+arg_14]
		add	esp, 8
		mov	[esi+94h], eax
		xor	eax, eax
		mov	dword ptr [esi+90h], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10021FA9:				; CODE XREF: sub_10021F40+22j
		lea	eax, [esi+10h]
		push	eax
		push	[esp+8+arg_4]
		call	sub_10024000
		mov	eax, [esp+0Ch+arg_14]
		add	esp, 8
		mov	[esi+94h], eax
		xor	eax, eax
		mov	dword ptr [esi+90h], 0
		pop	esi
		retn
sub_10021F40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021FE0	proc near		; CODE XREF: sub_10021E10+44p
					; sub_10021EC0+45p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+38h+var_4], eax
		cmp	[esp+38h+arg_14], 0
		mov	ecx, [esp+38h+arg_C]
		push	ebx
		mov	ebx, [esp+3Ch+arg_0]
		push	ebp
		mov	ebp, [esp+40h+arg_10]
		push	esi
		push	edi
		mov	edi, [esp+48h+arg_4]
		mov	esi, ebp
		mov	[esp+48h+var_38], ebx
		mov	[esp+48h+var_28], edi
		mov	[esp+48h+var_30], ecx
		mov	[esp+48h+var_24], ebp
		jz	loc_10022155
		mov	edx, [esp+48h+arg_8]
		mov	[esp+48h+var_20], edx
		cmp	edx, 10h
		jb	loc_100220D9
		shr	edx, 4
		mov	[esp+48h+var_34], edx

loc_10022037:				; CODE XREF: sub_10021FE0+EFj
		mov	eax, ebx
		lea	edx, [ebx+3]
		sub	eax, esi
		lea	ecx, [edi+1]
		mov	[esp+48h+var_18], eax
		mov	ebp, 4
		mov	eax, edi
		sub	eax, esi
		sub	ebx, edi
		mov	[esp+48h+var_2C], ebx
		mov	edi, eax
		mov	ebx, [esp+48h+var_18]
		mov	[esp+48h+var_1C], eax
		mov	edi, edi

loc_10022060:				; CODE XREF: sub_10021FE0+B8j
		movzx	eax, byte ptr [ebx+esi]
		lea	esi, [esi+4]
		xor	al, [esi-4]
		lea	ecx, [ecx+4]
		mov	[edi+esi-4], al
		lea	edx, [edx+4]
		mov	eax, [esp+48h+var_2C]
		movzx	eax, byte ptr [eax+ecx-4]
		xor	al, [esi-3]
		mov	[ecx-4], al
		movzx	eax, byte ptr [esi-2]
		xor	al, [edx-5]
		mov	[ecx-3], al
		movzx	eax, byte ptr [esi-1]
		xor	al, [edx-4]
		mov	[ecx-2], al
		dec	ebp
		jnz	short loc_10022060
		push	[esp+48h+var_30]
		mov	edi, [esp+4Ch+var_28]
		push	edi
		push	edi
		call	sub_100231C0
		mov	edx, [esp+54h+var_20]
		mov	esi, edi
		mov	ebx, [esp+54h+var_38]
		sub	edx, 10h
		add	ebx, 10h
		mov	[esp+54h+var_20], edx
		add	edi, 10h
		mov	[esp+54h+var_38], ebx
		add	esp, 0Ch
		mov	[esp+48h+var_28], edi
		dec	[esp+48h+var_34]
		jnz	loc_10022037
		mov	ebp, [esp+48h+var_24]

loc_100220D9:				; CODE XREF: sub_10021FE0+4Aj
		test	edx, edx
		jz	short loc_1002213C
		sub	ebx, esi
		mov	ecx, esi
		sub	edi, esi
		mov	ebp, edx
		mov	[esp+48h+var_2C], edi
		lea	esp, [esp+0]

loc_100220F0:				; CODE XREF: sub_10021FE0+11Ej
		mov	al, [ecx+ebx]
		lea	ecx, [ecx+1]
		xor	al, [ecx-1]
		mov	[ecx+edi-1], al
		dec	ebp
		jnz	short loc_100220F0
		mov	edi, [esp+48h+var_28]
		mov	ebp, [esp+48h+var_24]
		cmp	edx, 10h
		jnb	short loc_1002212C
		mov	ebx, 10h
		lea	ecx, [edi+edx]
		sub	esi, edi
		sub	ebx, edx
		lea	esp, [esp+0]

loc_10022120:				; CODE XREF: sub_10021FE0+14Aj
		mov	al, [esi+ecx]
		lea	ecx, [ecx+1]
		mov	[ecx-1], al
		dec	ebx
		jnz	short loc_10022120

loc_1002212C:				; CODE XREF: sub_10021FE0+12Bj
		push	[esp+48h+var_30]
		push	edi
		push	edi
		call	sub_100231C0
		add	esp, 0Ch
		mov	esi, edi

loc_1002213C:				; CODE XREF: sub_10021FE0+FBj
		mov	eax, [esi]
		mov	[ebp+0], eax
		mov	eax, [esi+4]
		mov	[ebp+4], eax
		mov	eax, [esi+8]
		mov	[ebp+8], eax
		mov	eax, [esi+0Ch]
		jmp	loc_1002235C
; ---------------------------------------------------------------------------

loc_10022155:				; CODE XREF: sub_10021FE0+39j
		cmp	ebx, edi
		jz	loc_10022235
		mov	ebp, [esp+48h+arg_8]
		mov	[esp+48h+var_34], ebp
		cmp	ebp, 10h
		jb	short loc_100221D2
		shr	ebp, 4
		mov	[esp+48h+var_38], ebp

loc_10022171:				; CODE XREF: sub_10021FE0+1F0j
		push	ecx
		push	edi
		push	ebx
		call	sub_10022380
		add	esp, 0Ch
		lea	edx, [esi+2]
		mov	ecx, edi
		sub	esi, edi
		mov	ebp, 4
		jmp	short loc_10022190
; ---------------------------------------------------------------------------
		align 10h

loc_10022190:				; CODE XREF: sub_10021FE0+1A8j
					; sub_10021FE0+1D3j
		movzx	eax, byte ptr [ecx+esi]
		lea	ecx, [ecx+4]
		xor	[ecx-4], al
		lea	edx, [edx+4]
		movzx	eax, byte ptr [edx-5]
		xor	[ecx-3], al
		movzx	eax, byte ptr [edx-4]
		xor	[ecx-2], al
		movzx	eax, byte ptr [edx-3]
		xor	[ecx-1], al
		dec	ebp
		jnz	short loc_10022190
		mov	ebp, [esp+48h+var_34]
		mov	esi, ebx
		mov	ecx, [esp+48h+var_30]
		sub	ebp, 10h
		add	ebx, 10h
		mov	[esp+48h+var_34], ebp
		add	edi, 10h
		dec	[esp+48h+var_38]
		jnz	short loc_10022171

loc_100221D2:				; CODE XREF: sub_10021FE0+188j
		test	ebp, ebp
		jz	short loc_10022208
		push	ecx
		lea	eax, [esp+4Ch+var_14]
		push	eax
		push	ebx
		call	sub_10022380
		add	esp, 0Ch
		xor	edx, edx
		test	ebp, ebp
		jz	short loc_10022206
		lea	eax, [esp+48h+var_14]
		sub	esi, eax
		sub	edi, eax

loc_100221F3:				; CODE XREF: sub_10021FE0+224j
		lea	ecx, [esp+48h+var_14]
		add	ecx, edx
		inc	edx
		mov	al, [ecx+esi]
		xor	al, [ecx]
		mov	[ecx+edi], al
		cmp	edx, ebp
		jb	short loc_100221F3

loc_10022206:				; CODE XREF: sub_10021FE0+209j
		mov	esi, ebx

loc_10022208:				; CODE XREF: sub_10021FE0+1F4j
		mov	ecx, [esp+48h+var_24]
		mov	eax, [esi]
		pop	edi
		mov	[ecx], eax
		mov	eax, [esi+4]
		mov	[ecx+4], eax
		mov	eax, [esi+8]
		mov	[ecx+8], eax
		mov	eax, [esi+0Ch]
		pop	esi
		pop	ebp
		mov	[ecx+0Ch], eax
		pop	ebx
		mov	ecx, [esp+38h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_10022235:				; CODE XREF: sub_10021FE0+177j
		mov	esi, [esp+48h+arg_8]
		cmp	esi, 10h
		jb	loc_100222F2
		lea	eax, [ebp+2]
		mov	[esp+48h+var_2C], eax
		mov	eax, ebp
		sub	eax, edi
		mov	[esp+48h+var_34], eax
		mov	eax, esi
		shr	eax, 4
		mov	[esp+48h+var_38], eax
		lea	ebx, [ebx+0]

loc_10022260:				; CODE XREF: sub_10021FE0+30Cj
		mov	eax, [ebx]
		mov	[esp+48h+var_1C], eax
		mov	eax, [ebx+4]
		push	ecx
		mov	[esp+4Ch+var_18], eax
		mov	eax, [ebx+8]
		mov	[esp+4Ch+var_20], eax
		mov	eax, [ebx+0Ch]
		push	edi
		push	ebx
		mov	[esp+54h+var_28], eax
		call	sub_10022380
		mov	ecx, [esp+54h+var_2C]
		add	esp, 0Ch
		mov	edx, [esp+48h+var_34]
		mov	ebp, 4

loc_10022293:				; CODE XREF: sub_10021FE0+2D5j
		movzx	eax, byte ptr [edx+edi]
		lea	ecx, [ecx+4]
		xor	[edi], al
		movzx	eax, byte ptr [ecx-5]
		xor	[edi+1], al
		movzx	eax, byte ptr [ecx-4]
		xor	[edi+2], al
		movzx	eax, byte ptr [ecx-3]
		xor	[edi+3], al
		add	edi, 4
		dec	ebp
		jnz	short loc_10022293
		mov	ebp, [esp+48h+var_24]
		sub	edx, 10h
		mov	eax, [esp+48h+var_1C]
		sub	esi, 10h
		mov	ecx, [esp+48h+var_30]
		add	ebx, 10h
		dec	[esp+48h+var_38]
		mov	[ebp+0], eax
		mov	eax, [esp+48h+var_18]
		mov	[ebp+4], eax
		mov	eax, [esp+48h+var_20]
		mov	[ebp+8], eax
		mov	eax, [esp+48h+var_28]
		mov	[ebp+0Ch], eax
		mov	[esp+48h+var_34], edx
		jnz	loc_10022260

loc_100222F2:				; CODE XREF: sub_10021FE0+25Cj
		test	esi, esi
		jz	short loc_1002235F
		mov	eax, [ebx]
		mov	[esp+48h+var_14], eax
		mov	eax, [ebx+4]
		mov	[esp+48h+var_10], eax
		mov	eax, [ebx+8]
		mov	[esp+48h+var_C], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+48h+var_8], eax
		lea	eax, [esp+48h+var_14]
		push	ecx
		push	eax
		push	eax
		call	sub_10022380
		add	esp, 0Ch
		xor	edx, edx
		test	esi, esi
		jz	short loc_10022343
		lea	eax, [esp+48h+var_14]
		mov	ebx, ebp
		sub	ebx, eax
		sub	edi, eax

loc_10022330:				; CODE XREF: sub_10021FE0+361j
		lea	ecx, [esp+48h+var_14]
		add	ecx, edx
		inc	edx
		mov	al, [ebx+ecx]
		xor	al, [ecx]
		mov	[ecx+edi], al
		cmp	edx, esi
		jb	short loc_10022330

loc_10022343:				; CODE XREF: sub_10021FE0+344j
		mov	eax, [esp+48h+var_14]
		mov	[ebp+0], eax
		mov	eax, [esp+48h+var_10]
		mov	[ebp+4], eax
		mov	eax, [esp+48h+var_C]
		mov	[ebp+8], eax
		mov	eax, [esp+48h+var_8]

loc_1002235C:				; CODE XREF: sub_10021FE0+170j
		mov	[ebp+0Ch], eax

loc_1002235F:				; CODE XREF: sub_10021FE0+314j
		mov	ecx, [esp+48h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
sub_10021FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10022380	proc near		; CODE XREF: sub_10021E10+62p
					; sub_10021FE0+194p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		movzx	edx, byte ptr [esi+8]
		movzx	eax, byte ptr [esi+9]
		movzx	ecx, byte ptr [esi+0Ch]
		mov	ebx, [edi+78h]
		shl	edx, 8
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [esi+0Ah]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Bh]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Dh]
		or	ecx, eax
		mov	[esp+1Ch+arg_0], edx
		movzx	eax, byte ptr [esi+0Eh]
		xor	ebx, edx
		mov	edx, [edi+7Ch]
		shl	ecx, 8
		xor	edx, ebx
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Fh]
		shl	ecx, 8
		or	ecx, eax
		xor	edx, ecx
		mov	[esp+1Ch+var_C], ecx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		movzx	ebx, byte ptr [esi]
		shl	ebx, 8
		xor	ecx, ds:dword_10044B98[eax*4]
		movzx	eax, byte ptr [esi+1]
		or	ebx, eax
		shl	ebx, 8
		movzx	eax, byte ptr [esi+2]
		or	ebx, eax
		movzx	eax, byte ptr [esi+3]
		shl	ebx, 8
		or	ebx, eax
		lea	eax, [ecx+edx]
		movzx	edx, byte ptr [esi+4]
		xor	ebx, eax
		movzx	eax, byte ptr [esi+5]
		shl	edx, 8
		or	edx, eax
		mov	[esp+1Ch+arg_8], ebx
		movzx	eax, byte ptr [esi+6]
		mov	ebx, [edi+70h]
		mov	ebp, [esp+1Ch+arg_8]
		xor	ebx, ebp
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+7]
		shl	edx, 8
		or	edx, eax
		xor	edx, ecx
		mov	[esp+1Ch+var_8], edx
		mov	edx, [edi+74h]
		mov	esi, [esp+1Ch+var_8]
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+68h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	edx, [edi+6Ch]
		xor	eax, ecx
		mov	[esp+1Ch+var_C], eax
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+60h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+64h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+58h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+5Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+50h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+54h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+48h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+4Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+40h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+44h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+38h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+3Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		mov	ecx, ds:dword_10045398[ecx*4]
		and	eax, 0FFh
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+30h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+34h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		mov	ecx, ds:dword_10045398[ecx*4]
		and	eax, 0FFh
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+28h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+2Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+20h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+24h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+18h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+1Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+10h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+14h]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+8]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+0Ch]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		mov	[esp+1Ch+var_8], esi
		lea	eax, [ecx+edx]
		mov	edx, [edi+4]
		xor	ebp, eax
		xor	ebx, ebp
		mov	[esp+1Ch+arg_8], ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+var_4], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+var_4]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		pop	edi
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+18h+arg_0]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+18h+var_C]
		xor	ebx, eax
		xor	edx, ecx
		mov	ecx, [esp+18h+arg_4]
		mov	eax, ebx
		shr	eax, 18h
		mov	[ecx], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx+1], al
		mov	eax, ebx
		shr	eax, 8
		mov	[ecx+2], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx+4], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+5], al
		mov	eax, edx
		shr	eax, 8
		mov	[ecx+6], al
		mov	[ecx+7], dl
		mov	edx, ebp
		mov	eax, edx
		mov	[ecx+0Bh], dl
		shr	eax, 18h
		mov	[ecx+8], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+9], al
		mov	eax, edx
		shr	eax, 8
		mov	edx, esi
		mov	[ecx+0Ah], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx+0Ch], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+0Dh], al
		mov	eax, edx
		pop	esi
		shr	eax, 8
		pop	ebp
		mov	[ecx+3], bl
		mov	[ecx+0Eh], al
		mov	[ecx+0Fh], dl
		pop	ebx
		add	esp, 0Ch
		retn
sub_10022380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100231C0	proc near		; CODE XREF: sub_10021EC0+63p
					; sub_10021FE0+C4p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		movzx	edx, byte ptr [esi+8]
		movzx	eax, byte ptr [esi+9]
		movzx	ecx, byte ptr [esi+0Ch]
		mov	ebx, [edi]
		shl	edx, 8
		or	edx, eax
		shl	ecx, 8
		movzx	eax, byte ptr [esi+0Ah]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Bh]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Dh]
		or	ecx, eax
		mov	[esp+1Ch+arg_0], edx
		movzx	eax, byte ptr [esi+0Eh]
		xor	ebx, edx
		mov	edx, [edi+4]
		shl	ecx, 8
		xor	edx, ebx
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Fh]
		shl	ecx, 8
		or	ecx, eax
		xor	edx, ecx
		mov	[esp+1Ch+var_C], ecx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		movzx	ebx, byte ptr [esi]
		shl	ebx, 8
		xor	ecx, ds:dword_10044B98[eax*4]
		movzx	eax, byte ptr [esi+1]
		or	ebx, eax
		shl	ebx, 8
		movzx	eax, byte ptr [esi+2]
		or	ebx, eax
		movzx	eax, byte ptr [esi+3]
		shl	ebx, 8
		or	ebx, eax
		lea	eax, [ecx+edx]
		movzx	edx, byte ptr [esi+4]
		xor	ebx, eax
		movzx	eax, byte ptr [esi+5]
		shl	edx, 8
		or	edx, eax
		mov	[esp+1Ch+arg_8], ebx
		movzx	eax, byte ptr [esi+6]
		mov	ebx, [edi+8]
		mov	ebp, [esp+1Ch+arg_8]
		xor	ebx, ebp
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+7]
		shl	edx, 8
		or	edx, eax
		xor	edx, ecx
		mov	[esp+1Ch+var_8], edx
		mov	edx, [edi+0Ch]
		mov	esi, [esp+1Ch+var_8]
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+10h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	edx, [edi+14h]
		xor	eax, ecx
		mov	[esp+1Ch+var_C], eax
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+18h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+1Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+20h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+24h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+28h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+2Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		shr	eax, 8
		and	eax, 0FFh
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+30h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+34h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+38h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+3Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+40h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+44h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		mov	ecx, ds:dword_10045398[ecx*4]
		and	eax, 0FFh
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+48h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+4Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		mov	ecx, ds:dword_10045398[ecx*4]
		and	eax, 0FFh
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+50h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		mov	[esp+1Ch+var_C], eax
		xor	ebx, edx
		mov	edx, [edi+54h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+58h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+5Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+60h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+64h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+68h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		lea	eax, [ecx+edx]
		mov	edx, [edi+6Ch]
		xor	ebp, eax
		xor	ebx, ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+70h]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	eax, [esp+1Ch+var_C]
		xor	eax, ecx
		mov	[esp+1Ch+arg_0], edx
		xor	ebx, edx
		mov	[esp+1Ch+var_C], eax
		mov	edx, [edi+74h]
		xor	edx, ebx
		xor	edx, eax
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+arg_8], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+arg_8]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [edi+78h]
		xor	ecx, ds:dword_10044B98[eax*4]
		xor	esi, ecx
		mov	[esp+1Ch+var_8], esi
		lea	eax, [ecx+edx]
		mov	edx, [edi+7Ch]
		xor	ebp, eax
		xor	ebx, ebp
		mov	[esp+1Ch+arg_8], ebp
		xor	edx, ebx
		xor	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		xor	ecx, ds:dword_10044B98[eax*4]
		add	ebx, ecx
		mov	[esp+1Ch+var_4], ecx
		mov	ecx, ebx
		mov	eax, ebx
		shr	eax, 8
		shr	ecx, 10h
		and	eax, 0FFh
		and	ecx, 0FFh
		mov	edx, ds:dword_10045398[ecx*4]
		xor	edx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	edx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+1Ch+var_4]
		xor	edx, ds:dword_10044B98[eax*4]
		add	ebx, edx
		mov	ecx, ebx
		mov	eax, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		pop	edi
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+18h+arg_0]
		xor	ecx, ds:dword_10044B98[eax*4]
		lea	eax, [ecx+edx]
		mov	edx, [esp+18h+var_C]
		xor	ebx, eax
		xor	edx, ecx
		mov	ecx, [esp+18h+arg_4]
		mov	eax, ebx
		shr	eax, 18h
		mov	[ecx], al
		mov	eax, ebx
		shr	eax, 10h
		mov	[ecx+1], al
		mov	eax, ebx
		shr	eax, 8
		mov	[ecx+2], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx+4], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+5], al
		mov	eax, edx
		shr	eax, 8
		mov	[ecx+6], al
		mov	[ecx+7], dl
		mov	edx, ebp
		mov	eax, edx
		mov	[ecx+0Bh], dl
		shr	eax, 18h
		mov	[ecx+8], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+9], al
		mov	eax, edx
		shr	eax, 8
		mov	edx, esi
		mov	[ecx+0Ah], al
		mov	eax, edx
		shr	eax, 18h
		mov	[ecx+0Ch], al
		mov	eax, edx
		shr	eax, 10h
		mov	[ecx+0Dh], al
		mov	eax, edx
		pop	esi
		shr	eax, 8
		pop	ebp
		mov	[ecx+3], bl
		mov	[ecx+0Eh], al
		mov	[ecx+0Fh], dl
		pop	ebx
		add	esp, 0Ch
		retn
sub_100231C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024000	proc near		; CODE XREF: sub_10021F40+49p
					; sub_10021F40+71p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ecx, [esp+18h+arg_0]
		movzx	ebp, byte ptr [ecx]
		movzx	eax, byte ptr [ecx+1]
		movzx	esi, byte ptr [ecx+4]
		movzx	edx, byte ptr [ecx+8]
		shl	ebp, 8
		or	ebp, eax
		shl	esi, 8
		movzx	eax, byte ptr [ecx+2]
		shl	ebp, 8
		or	ebp, eax
		shl	edx, 8
		movzx	eax, byte ptr [ecx+3]
		shl	ebp, 8
		or	ebp, eax
		movzx	eax, byte ptr [ecx+5]
		or	esi, eax
		movzx	eax, byte ptr [ecx+6]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+7]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+9]
		or	edx, eax
		mov	ebx, esi
		movzx	eax, byte ptr [ecx+0Ah]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+0Bh]
		movzx	edi, byte ptr [ecx+0Ch]
		shl	edx, 8
		or	edx, eax
		shl	edi, 8
		movzx	eax, byte ptr [ecx+0Dh]
		or	edi, eax
		mov	[esp+18h+arg_0], edx
		movzx	eax, byte ptr [ecx+0Eh]
		add	edx, 61C88647h
		shl	edi, 8
		add	edx, ebp
		or	edi, eax
		movzx	eax, byte ptr [ecx+0Fh]
		shl	edi, 8
		mov	ecx, edx
		or	edi, eax
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	eax, edx
		shr	eax, 8
		sub	ebx, edi
		and	eax, 0FFh
		sub	ebx, 61C88647h
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	[edx+4], ecx
		mov	ecx, esi
		mov	edx, [esp+18h+arg_0]
		mov	eax, ebp
		shl	ecx, 18h
		add	edx, 0C3910C8Dh
		shr	eax, 8
		xor	ecx, eax
		shr	esi, 8
		shl	ebp, 18h
		xor	ebp, esi
		mov	esi, ecx
		add	edx, esi
		mov	ebx, ebp
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		sub	ebx, edi
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		add	ebx, 3C6EF373h
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+8], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, ebp
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, [esp+18h+arg_0]
		mov	[edx+0Ch], ecx
		mov	ecx, edi
		shr	ecx, 18h
		lea	edx, [esi-78DDE6E6h]
		shl	eax, 8
		xor	ecx, eax
		shl	edi, 8
		mov	eax, [esp+18h+arg_0]
		shr	eax, 18h
		xor	eax, edi
		mov	edi, ecx
		sub	ebx, eax
		mov	[esp+18h+arg_0], eax
		add	edx, edi
		add	ebx, 78DDE6E6h
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+10h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, esi
		mov	[edx+14h], ecx
		mov	ecx, ebp
		shl	ecx, 18h
		shr	eax, 8
		xor	ecx, eax
		shr	ebp, 8
		shl	esi, 18h
		xor	esi, ebp
		mov	ebp, ecx
		mov	ebx, esi
		sub	ebx, [esp+18h+arg_0]
		sub	ebx, 0E443234h
		lea	edx, [ebp+0E443234h]
		add	edx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+18h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, esi
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, edi
		mov	[edx+1Ch], ecx
		mov	edx, [esp+18h+arg_0]
		mov	ecx, edx
		shr	ecx, 18h
		shl	eax, 8
		xor	ecx, eax
		shl	edx, 8
		mov	[esp+18h+arg_0], ecx
		shr	edi, 18h
		xor	edi, edx
		lea	edx, [ebp+1C886467h]
		add	edx, ecx
		sub	ebx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		sub	ebx, 1C886467h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	[edx+20h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		mov	eax, ebx
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebp
		mov	[edx+24h], ecx
		mov	ecx, esi
		shl	ecx, 18h
		shr	eax, 8
		xor	ecx, eax
		shr	esi, 8
		mov	[esp+18h+var_4], ecx
		shl	ebp, 18h
		xor	ebp, esi
		mov	esi, [esp+18h+arg_0]
		mov	ebx, ebp
		sub	ebx, edi
		sub	ebx, 3910C8CDh
		lea	edx, [esi+3910C8CDh]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+28h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, ebp
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, esi
		mov	[edx+2Ch], ecx
		mov	ecx, edi
		shl	edi, 8
		shr	esi, 18h
		xor	esi, edi
		shr	ecx, 18h
		mov	edi, [esp+18h+var_4]
		sub	ebx, esi
		shl	eax, 8
		sub	ebx, 72219199h
		xor	ecx, eax
		mov	[esp+18h+arg_0], ecx
		lea	edx, [edi+72219199h]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+30h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, edi
		mov	[edx+34h], ecx
		mov	ecx, ebp
		shl	ecx, 18h
		shr	eax, 8
		xor	ecx, eax
		shr	ebp, 8
		mov	[esp+18h+var_4], ecx
		shl	edi, 18h
		xor	edi, ebp
		mov	ebp, [esp+18h+arg_0]
		mov	ebx, edi
		sub	ebx, esi
		add	ebx, 1BBCDCCFh
		lea	edx, [ebp-1BBCDCCFh]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+38h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, edi
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebp
		mov	[edx+3Ch], ecx
		mov	ecx, esi
		shl	esi, 8
		shr	ebp, 18h
		xor	ebp, esi
		shr	ecx, 18h
		mov	esi, [esp+18h+var_4]
		sub	ebx, ebp
		shl	eax, 8
		add	ebx, 3779B99Eh
		xor	ecx, eax
		mov	[esp+18h+arg_0], ecx
		lea	edx, [esi-3779B99Eh]
		add	edx, ecx
		mov	ecx, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	eax, edx
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+40h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, esi
		mov	[edx+44h], ecx
		mov	ecx, edi
		shl	ecx, 18h
		shr	eax, 8
		xor	ecx, eax
		shr	edi, 8
		mov	[esp+18h+var_4], ecx
		shl	esi, 18h
		xor	esi, edi
		mov	edi, [esp+18h+arg_0]
		mov	ebx, esi
		sub	ebx, ebp
		add	ebx, 6EF3733Ch
		lea	edx, [edi-6EF3733Ch]
		add	edx, ecx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+48h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, edi
		mov	[edx+4Ch], ecx
		mov	ecx, ebp
		shr	ecx, 18h
		shl	eax, 8
		shl	ebp, 8
		xor	ecx, eax
		shr	edi, 18h
		xor	edi, ebp
		mov	[esp+18h+arg_0], ecx
		mov	ebp, [esp+18h+var_4]
		lea	edx, [ebp+22191988h]
		mov	ebx, esi
		add	edx, ecx
		sub	ebx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		sub	ebx, 22191988h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+50h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebp
		mov	[edx+54h], ecx
		mov	ecx, esi
		mov	edx, [esp+18h+arg_0]
		shl	ecx, 18h
		add	edx, 4432330Fh
		shr	eax, 8
		xor	ecx, eax
		shl	ebp, 18h
		add	edx, ecx
		mov	[esp+18h+var_8], ecx
		mov	ecx, edx
		shr	esi, 8
		shr	ecx, 10h
		mov	eax, edx
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		xor	ebp, esi
		mov	ebx, ebp
		mov	[esp+18h+var_4], ebp
		sub	ebx, edi
		mov	ebp, edi
		mov	ecx, ds:dword_10045398[ecx*4]
		sub	ebx, 4432330Fh
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+58h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	[edx+5Ch], ecx
		shr	ebp, 18h
		mov	ecx, [esp+18h+arg_0]
		mov	eax, ecx
		mov	edx, [esp+18h+var_8]
		mov	esi, [esp+18h+var_4]
		add	edx, 8864661Dh
		shr	ecx, 18h
		mov	ebx, esi
		shl	eax, 8
		xor	ebp, eax
		shl	edi, 8
		xor	ecx, edi
		add	edx, ebp
		sub	ebx, ecx
		mov	[esp+18h+arg_0], ecx
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		add	ebx, 779B99E3h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	edi, esi
		shl	edi, 18h
		shr	esi, 8
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+60h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	[edx+64h], ecx
		mov	ecx, [esp+18h+var_8]
		mov	eax, ecx
		shr	eax, 8
		xor	edi, eax
		shl	ecx, 18h
		xor	ecx, esi
		mov	[esp+18h+var_4], edi
		mov	ebx, ecx
		mov	[esp+18h+var_8], ecx
		sub	ebx, [esp+18h+arg_0]
		lea	edx, [edi+10C8CC3Ah]
		sub	ebx, 10C8CC3Ah
		add	edx, ebp
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+68h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebp
		mov	[edx+6Ch], ecx
		lea	edx, [edi+21919873h]
		mov	ecx, [esp+18h+arg_0]
		mov	esi, ecx
		shl	eax, 8
		shl	ecx, 8
		mov	edi, [esp+18h+var_8]
		mov	ebx, edi
		shr	esi, 18h
		xor	esi, eax
		shr	ebp, 18h
		xor	ebp, ecx
		add	edx, esi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		sub	ebx, ebp
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		sub	ebx, 21919873h
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+70h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		mov	ebx, [esp+18h+var_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	eax, ebx
		mov	[edx+74h], ecx
		mov	edx, edi
		shr	eax, 8
		shl	edx, 18h
		xor	edx, eax
		shl	ebx, 18h
		add	edx, 432330E5h
		shr	edi, 8
		add	edx, esi
		xor	ebx, edi
		mov	ecx, edx
		mov	eax, edx
		shr	ecx, 10h
		sub	ebx, ebp
		and	ecx, 0FFh
		shr	eax, 8
		and	eax, 0FFh
		sub	ebx, 432330E5h
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, edx
		shr	eax, 18h
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, dl
		mov	edx, [esp+18h+arg_4]
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	[edx+78h], ecx
		mov	ecx, ebx
		shr	ecx, 10h
		mov	eax, ebx
		shr	eax, 8
		and	ecx, 0FFh
		and	eax, 0FFh
		pop	edi
		pop	esi
		mov	ecx, ds:dword_10045398[ecx*4]
		xor	ecx, ds:dword_10044F98[eax*4]
		mov	eax, ebx
		shr	eax, 18h
		pop	ebp
		xor	ecx, ds:dword_10045798[eax*4]
		movzx	eax, bl
		pop	ebx
		xor	ecx, ds:dword_10044B98[eax*4]
		mov	[edx+7Ch], ecx
		add	esp, 8
		retn
sub_10024000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024B20	proc near		; DATA XREF: .rdata:1003E4E0o

var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 60h
		cmp	[esp+60h+arg_0], 0
		push	ebp
		push	esi
		push	edi
		jz	loc_10024F2C
		mov	esi, [esp+6Ch+arg_4]
		test	esi, esi
		jz	loc_10024F2C
		cmp	dword ptr [esi+4], 0
		jz	loc_10024F2C
		cmp	dword ptr [esi+8], 0
		jz	loc_10024F2C
		mov	edi, [esp+6Ch+arg_8]
		test	edi, edi
		jz	loc_10024F2C
		cmp	dword ptr [edi+4], 0
		jz	loc_10024F2C
		cmp	dword ptr [edi+8], 0
		jz	loc_10024F2C
		mov	ebp, [esp+6Ch+arg_C]
		test	ebp, ebp
		jz	loc_10024F2C
		cmp	dword ptr [ebp+4], 0
		jz	loc_10024F2C
		cmp	dword ptr [ebp+8], 0
		jz	loc_10024F2C
		mov	eax, [esp+6Ch+arg_10]
		test	eax, eax
		jz	loc_10024F2C
		cmp	dword ptr [eax+4], 0
		jz	loc_10024F2C
		cmp	dword ptr [eax+8], 0
		jz	loc_10024F2C
		mov	eax, [esp+6Ch+arg_14]
		test	eax, eax
		jz	loc_10024F2C
		cmp	dword ptr [eax+4], 0
		jz	loc_10024F2C
		cmp	dword ptr [eax+8], 0
		jz	loc_10024F2C
		mov	eax, [esp+6Ch+arg_18]
		test	eax, eax
		jz	loc_10024F2C
		cmp	dword ptr [eax+4], 0
		jz	loc_10024F2C
		cmp	dword ptr [eax+8], 0
		jz	loc_10024F2C
		mov	eax, [esp+6Ch+arg_1C]
		test	eax, eax
		jz	loc_10024F2C
		cmp	dword ptr [eax+4], 0
		jnz	loc_10024F2C
		lea	eax, [esp+6Ch+var_50]
		mov	[esp+6Ch+var_44], 0
		push	ebx
		push	eax
		mov	[esp+74h+var_24], 0
		mov	[esp+74h+var_54], 0
		mov	[esp+74h+var_34], 0
		mov	[esp+74h+var_14], 0
		mov	[esp+74h+var_4], 0
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10024E70
		lea	eax, [esp+70h+var_30]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10024E70
		lea	eax, [esp+70h+var_60]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10024E70
		lea	eax, [esp+70h+var_40]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10024E70
		lea	eax, [esp+70h+var_20]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10024E70
		lea	eax, [esp+70h+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10024E70
		push	dword ptr [edi+8]
		lea	eax, [esp+74h+var_30]
		push	dword ptr [edi+4]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10024E70
		mov	eax, [esp+70h+arg_14]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+78h+var_60]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10024E70
		lea	eax, [esp+70h+var_40]
		push	eax
		lea	eax, [esp+74h+var_60]
		push	eax
		lea	eax, [esp+78h+var_30]
		push	eax
		call	sub_1002A540
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10024E70
		push	dword ptr [esi+8]
		lea	eax, [esp+74h+var_50]
		push	dword ptr [esi+4]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10024E70
		mov	eax, [esp+70h+arg_10]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+78h+var_60]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10024E70
		lea	eax, [esp+70h+var_20]
		push	eax
		lea	eax, [esp+74h+var_50]
		push	eax
		lea	eax, [esp+78h+var_40]
		push	eax
		lea	eax, [esp+7Ch+var_60]
		push	eax
		call	sub_10026B80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10024E70
		mov	eax, [esp+70h+arg_18]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+78h+var_60]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10024E70
		lea	eax, [esp+70h+var_10]
		push	eax
		lea	eax, [esp+74h+var_50]
		push	eax
		lea	eax, [esp+78h+var_60]
		push	eax
		lea	eax, [esp+7Ch+var_20]
		push	eax
		call	sub_10029DF0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10024E70
		push	dword ptr [ebp+8]
		lea	eax, [esp+74h+var_40]
		push	dword ptr [ebp+4]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_10024E70
		lea	eax, [esp+70h+var_60]
		push	eax
		lea	eax, [esp+74h+var_50]
		push	eax
		lea	eax, [esp+78h+var_40]
		push	eax
		lea	eax, [esp+7Ch+var_10]
		push	eax
		call	sub_10026B80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_10024E70
		lea	eax, [esp+70h+var_60]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_10024E34
		mov	ebx, 0FFFFFFFDh
		jmp	short loc_10024E70
; ---------------------------------------------------------------------------

loc_10024E34:				; CODE XREF: sub_10024B20+30Bj
		mov	ebx, [esp+70h+arg_1C]
		push	eax
		push	ebx
		push	[esp+78h+arg_0]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10024E55
		lea	ebx, [eax-2]
		jmp	short loc_10024E70
; ---------------------------------------------------------------------------

loc_10024E55:				; CODE XREF: sub_10024B20+32Ej
		push	dword ptr [ebx+8]
		push	eax
		lea	eax, [esp+78h+var_60]
		push	eax
		call	sub_1002A820
		xor	ebx, ebx
		add	esp, 0Ch
		test	eax, eax
		setns	bl
		dec	ebx
		and	ebx, eax

loc_10024E70:				; CODE XREF: sub_10024B20+135j
					; sub_10024B20+14Cj ...
		lea	eax, [esp+70h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+74h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+78h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+7Ch+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+80h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+84h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 18h
		test	ebx, ebx
		jz	short loc_10024F22
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_10024F0A
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_10024EF2
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_10024EDA
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10024EDA:				; CODE XREF: sub_10024B20+3A0j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10024EF2:				; CODE XREF: sub_10024B20+39Bj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10024F0A:				; CODE XREF: sub_10024B20+396j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10024F22:				; CODE XREF: sub_10024B20+391j
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10024F2C:				; CODE XREF: sub_10024B20+Bj
					; sub_10024B20+17j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 60h
		retn
sub_10024B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024F50	proc near		; DATA XREF: .rdata:1003E4DCo

var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 50h
		cmp	[esp+50h+arg_0], 0
		push	ebp
		push	esi
		push	edi
		jz	loc_10025380
		mov	edi, [esp+5Ch+arg_4]
		test	edi, edi
		jz	loc_10025380
		cmp	dword ptr [edi+4], 0
		jz	loc_10025380
		cmp	dword ptr [edi+8], 0
		jz	loc_10025380
		mov	esi, [esp+5Ch+arg_8]
		test	esi, esi
		jz	loc_10025380
		cmp	dword ptr [esi+4], 0
		jz	loc_10025380
		cmp	dword ptr [esi+8], 0
		jz	loc_10025380
		mov	eax, [esp+5Ch+arg_C]
		test	eax, eax
		jz	loc_10025380
		cmp	dword ptr [eax+4], 0
		jz	loc_10025380
		cmp	dword ptr [eax+8], 0
		jz	loc_10025380
		mov	eax, [esp+5Ch+arg_10]
		test	eax, eax
		jz	loc_10025380
		cmp	dword ptr [eax+4], 0
		jz	loc_10025380
		cmp	dword ptr [eax+8], 0
		jz	loc_10025380
		mov	eax, [esp+5Ch+arg_14]
		test	eax, eax
		jz	loc_10025380
		cmp	dword ptr [eax+4], 0
		jz	loc_10025380
		cmp	dword ptr [eax+8], 0
		jz	loc_10025380
		mov	ebp, [esp+5Ch+arg_18]
		test	ebp, ebp
		jz	loc_10025380
		cmp	dword ptr [ebp+4], 0
		jnz	loc_10025380
		mov	eax, [esp+5Ch+arg_24]
		test	eax, eax
		jz	short loc_1002506F
		cmp	dword ptr [eax+4], 0
		jnz	loc_10025380
		mov	eax, [esp+5Ch+arg_1C]
		test	eax, eax
		jz	loc_10025380
		cmp	dword ptr [eax+4], 0
		jz	loc_10025380
		cmp	dword ptr [eax+8], 0
		jz	loc_10025380
		mov	eax, [esp+5Ch+arg_20]
		test	eax, eax
		jz	loc_10025380
		cmp	dword ptr [eax+4], 0
		jz	loc_10025380
		cmp	dword ptr [eax+8], 0
		jz	loc_10025380

loc_1002506F:				; CODE XREF: sub_10024F50+D0j
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_14], 0
		push	ebx
		push	eax
		mov	[esp+64h+var_24], 0
		mov	[esp+64h+var_4], 0
		mov	[esp+64h+var_34], 0
		mov	[esp+64h+var_44], 0
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_100252CE
		lea	eax, [esp+60h+var_30]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_100252CE
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_100252CE
		cmp	[esp+60h+arg_24], 0
		jz	loc_1002523A
		lea	eax, [esp+60h+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_100252CE
		lea	eax, [esp+60h+var_40]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_100252CE
		push	dword ptr [esi+8]
		lea	eax, [esp+64h+var_30]
		push	dword ptr [esi+4]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_100252CE
		mov	eax, [esp+60h+arg_1C]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+68h+var_10]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_100252CE
		mov	eax, [esp+60h+arg_20]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+68h+var_40]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_100252CE
		lea	eax, [esp+60h+var_40]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jle	loc_10025230
		lea	eax, [esp+60h+var_30]
		push	eax
		lea	eax, [esp+64h+var_40]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_10025230
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	eax, [esp+64h+var_30]
		push	eax
		lea	eax, [esp+68h+var_40]
		push	eax
		lea	eax, [esp+6Ch+var_10]
		push	eax
		call	sub_10029DF0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_100252CE
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_100251EE
		mov	ebx, 0FFFFFFFDh
		jmp	loc_100252CE
; ---------------------------------------------------------------------------

loc_100251EE:				; CODE XREF: sub_10024F50+292j
		mov	ebx, [esp+60h+arg_24]
		mov	esi, [esp+60h+arg_0]
		push	eax
		push	ebx
		push	esi
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10025213
		lea	ebx, [eax-2]
		jmp	loc_100252CE
; ---------------------------------------------------------------------------

loc_10025213:				; CODE XREF: sub_10024F50+2B9j
		push	dword ptr [ebx+8]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_100252CE
		jmp	short loc_1002523E
; ---------------------------------------------------------------------------

loc_10025230:				; CODE XREF: sub_10024F50+23Dj
					; sub_10024F50+257j
		mov	ebx, 0FFFFFFFCh
		jmp	loc_100252CE
; ---------------------------------------------------------------------------

loc_1002523A:				; CODE XREF: sub_10024F50+195j
		mov	esi, [esp+60h+arg_0]

loc_1002523E:				; CODE XREF: sub_10024F50+2DEj
		push	dword ptr [edi+8]
		lea	eax, [esp+64h+var_20]
		push	dword ptr [edi+4]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_100252CE
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	eax, [esp+64h+var_20]
		push	eax
		push	[esp+68h+arg_14]
		push	[esp+6Ch+arg_10]
		push	[esp+70h+arg_C]
		call	sub_100261F0
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		js	short loc_100252CE
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_1002529C
		mov	ebx, 0FFFFFFFDh
		jmp	short loc_100252CE
; ---------------------------------------------------------------------------

loc_1002529C:				; CODE XREF: sub_10024F50+343j
		push	eax
		push	ebp
		push	esi
		call	SECITEM_AllocItem_Util
		mov	eax, [ebp+4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100252B3
		lea	ebx, [eax-2]
		jmp	short loc_100252CE
; ---------------------------------------------------------------------------

loc_100252B3:				; CODE XREF: sub_10024F50+35Cj
		push	dword ptr [ebp+8]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_1002A820
		xor	ebx, ebx
		add	esp, 0Ch
		test	eax, eax
		setns	bl
		dec	ebx
		and	ebx, eax

loc_100252CE:				; CODE XREF: sub_10024F50+159j
					; sub_10024F50+170j ...
		lea	eax, [esp+60h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+64h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+68h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+6Ch+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+70h+var_50]
		push	eax
		call	sub_10028F00
		add	esp, 14h
		test	ebx, ebx
		jz	short loc_10025376
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_1002535E
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_10025346
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_1002532E
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1002532E:				; CODE XREF: sub_10024F50+3C4j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10025346:				; CODE XREF: sub_10024F50+3BFj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1002535E:				; CODE XREF: sub_10024F50+3BAj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10025376:				; CODE XREF: sub_10024F50+3B5j
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10025380:				; CODE XREF: sub_10024F50+Bj
					; sub_10024F50+17j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 50h
		retn
sub_10024F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100253A0	proc near		; DATA XREF: .rdata:1003E4D4o

var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 0B0h
		cmp	[esp+0B0h+arg_0], 0
		push	ebp
		push	esi
		push	edi
		mov	[esp+0BCh+var_B0], 0
		jz	loc_10025A15
		mov	esi, [esp+0BCh+arg_4]
		test	esi, esi
		jz	loc_10025A15
		cmp	dword ptr [esi+8], 0
		jz	loc_10025A15
		cmp	dword ptr [esi+0Ch], 0
		jz	loc_10025A15
		cmp	dword ptr [esi+14h], 0
		jz	loc_10025A15
		cmp	dword ptr [esi+18h], 0
		jz	loc_10025A15
		cmp	dword ptr [esi+20h], 0
		jz	loc_10025A15
		cmp	dword ptr [esi+24h], 0
		jz	loc_10025A15
		mov	eax, [esp+0BCh+arg_C]
		test	eax, eax
		jz	loc_10025A15
		cmp	dword ptr [eax+4], 0
		jz	loc_10025A15
		cmp	dword ptr [eax+8], 0
		jz	loc_10025A15
		mov	eax, [esp+0BCh+arg_10]
		test	eax, eax
		jz	loc_10025A15
		cmp	dword ptr [eax+4], 0
		jz	loc_10025A15
		cmp	dword ptr [eax+8], 0
		jz	loc_10025A15
		mov	eax, [esp+0BCh+arg_14]
		test	eax, eax
		jz	short loc_1002546F
		cmp	dword ptr [eax+4], 0
		jz	loc_10025A15
		cmp	dword ptr [eax+8], 0
		jz	loc_10025A15

loc_1002546F:				; CODE XREF: sub_100253A0+B9j
		mov	ebp, [esp+0BCh+arg_18]
		test	ebp, ebp
		jnz	short loc_1002548E
		mov	edi, [esp+0BCh+arg_1C]
		test	edi, edi
		jz	loc_10025A15
		cmp	[edi+4], ebp
		jmp	short loc_100254AB
; ---------------------------------------------------------------------------

loc_1002548E:				; CODE XREF: sub_100253A0+D8j
		cmp	dword ptr [ebp+4], 0
		jz	loc_10025A15
		cmp	dword ptr [ebp+8], 0
		jz	loc_10025A15
		mov	edi, [esp+0BCh+arg_1C]
		test	edi, edi

loc_100254AB:				; CODE XREF: sub_100253A0+ECj
		jnz	loc_10025A15
		mov	eax, [esp+0BCh+arg_20]
		test	eax, eax
		jz	loc_10025A15
		cmp	dword ptr [eax+4], 0
		jnz	loc_10025A15
		mov	eax, [esp+0BCh+arg_24]
		test	eax, eax
		jz	loc_10025A15
		cmp	dword ptr [eax+4], 0
		jnz	loc_10025A15
		lea	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+var_54], 0
		push	ebx
		push	eax
		mov	[esp+0C4h+var_34], 0
		mov	[esp+0C4h+var_84], 0
		mov	[esp+0C4h+var_24], 0
		mov	[esp+0C4h+var_94], 0
		mov	[esp+0C4h+var_74], 0
		mov	[esp+0C4h+var_64], 0
		mov	[esp+0C4h+var_14], 0
		mov	[esp+0C4h+var_4], 0
		mov	[esp+0C4h+var_44], 0
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_40]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_90]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_30]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_A0]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_80]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_70]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_20]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_10]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_50]
		push	eax
		call	sub_100298B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10025918
		push	dword ptr [esi+0Ch]
		lea	eax, [esp+0C4h+var_60]
		push	dword ptr [esi+8]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10025918
		push	dword ptr [esi+18h]
		lea	eax, [esp+0C4h+var_40]
		push	dword ptr [esi+14h]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10025918
		push	dword ptr [esi+24h]
		lea	eax, [esp+0C4h+var_90]
		push	dword ptr [esi+20h]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10025918
		mov	eax, [esp+0C0h+arg_10]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+0C8h+var_30]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_A0]
		test	ebp, ebp
		jnz	short loc_1002573D
		push	eax
		lea	eax, [esp+0C4h+var_60]
		push	eax
		lea	eax, [esp+0C8h+var_30]
		push	eax
		lea	eax, [esp+0CCh+var_90]
		push	eax
		call	sub_10026B80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_A0]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_100256FC
		lea	ebx, [ebp-3]
		jmp	loc_10025918
; ---------------------------------------------------------------------------

loc_100256FC:				; CODE XREF: sub_100253A0+352j
		push	eax
		push	edi
		push	[esp+0C8h+arg_0]
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002571C
		lea	ebx, [eax-2]
		jmp	loc_10025918
; ---------------------------------------------------------------------------

loc_1002571C:				; CODE XREF: sub_100253A0+372j
		push	dword ptr [edi+8]
		push	eax
		lea	eax, [esp+0C8h+var_A0]
		push	eax
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10025918
		xor	ebx, ebx
		mov	ebp, edi
		jmp	short loc_10025756
; ---------------------------------------------------------------------------

loc_1002573D:				; CODE XREF: sub_100253A0+31Cj
		push	dword ptr [ebp+8]
		push	dword ptr [ebp+4]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10025918

loc_10025756:				; CODE XREF: sub_100253A0+39Bj
		mov	eax, [esp+0C0h+arg_14]
		test	eax, eax
		jnz	short loc_10025793
		mov	[esp+0C0h+var_A8], eax
		lea	eax, [esp+0C0h+var_AC]
		push	eax
		lea	eax, [esi+10h]
		push	eax
		push	[esp+0C8h+arg_0]
		call	sub_1001C4D0
		add	esp, 0Ch
		mov	[esp+0C0h+var_B0], eax
		test	eax, eax
		jnz	loc_10025918
		mov	ecx, [esp+0C0h+var_A4]
		mov	edx, [esp+0C0h+var_A8]
		jmp	short loc_100257A1
; ---------------------------------------------------------------------------

loc_10025793:				; CODE XREF: sub_100253A0+3BFj
		mov	edx, [eax+4]
		mov	ecx, [eax+8]
		mov	[esp+0C0h+var_A8], edx
		mov	[esp+0C0h+var_A4], ecx

loc_100257A1:				; CODE XREF: sub_100253A0+3F1j
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_80]
		push	eax
		call	sub_10029F90
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_70]
		push	eax
		lea	eax, [esp+0C4h+var_60]
		push	eax
		lea	eax, [esp+0C8h+var_80]
		push	eax
		lea	eax, [esp+0CCh+var_90]
		push	eax
		call	sub_10026B80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_70]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_100257FB
		mov	ebx, 0FFFFFFFDh
		jmp	loc_10025918
; ---------------------------------------------------------------------------

loc_100257FB:				; CODE XREF: sub_100253A0+44Fj
		mov	edi, [esp+0C0h+arg_20]
		push	eax
		push	edi
		push	[esp+0C8h+arg_0]
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10025822
		lea	ebx, [eax-2]
		jmp	loc_10025918
; ---------------------------------------------------------------------------

loc_10025822:				; CODE XREF: sub_100253A0+478j
		push	dword ptr [edi+8]
		push	eax
		lea	eax, [esp+0C8h+var_70]
		push	eax
		call	sub_1002A820
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_20]
		push	eax
		push	[esp+0C4h+arg_C]
		lea	eax, [esi+1Ch]
		push	ebp
		push	edi
		push	eax
		push	[esp+0D4h+arg_8]
		call	sub_10026040
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		js	loc_10025918
		lea	eax, [esp+0C0h+var_10]
		push	eax
		lea	eax, [esp+0C4h+var_40]
		push	eax
		lea	eax, [esp+0C8h+var_20]
		push	eax
		lea	eax, [esp+0CCh+var_30]
		push	eax
		call	sub_10029DF0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_10025918
		lea	eax, [esp+0C0h+var_50]
		push	eax
		lea	eax, [esp+0C4h+var_40]
		push	eax
		lea	eax, [esp+0C8h+var_10]
		push	eax
		lea	eax, [esp+0CCh+var_80]
		push	eax
		call	sub_1002A710
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_10025918
		lea	eax, [esp+0C0h+var_50]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_100258D9
		mov	ebx, 0FFFFFFFDh
		jmp	short loc_10025918
; ---------------------------------------------------------------------------

loc_100258D9:				; CODE XREF: sub_100253A0+530j
		mov	ebx, [esp+0C0h+arg_24]
		push	eax
		push	ebx
		push	[esp+0C8h+arg_0]
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100258FD
		lea	ebx, [eax-2]
		jmp	short loc_10025918
; ---------------------------------------------------------------------------

loc_100258FD:				; CODE XREF: sub_100253A0+556j
		push	dword ptr [ebx+8]
		push	eax
		lea	eax, [esp+0C8h+var_50]
		push	eax
		call	sub_1002A820
		xor	ebx, ebx
		add	esp, 0Ch
		test	eax, eax
		setns	bl
		dec	ebx
		and	ebx, eax

loc_10025918:				; CODE XREF: sub_100253A0+1B4j
					; sub_100253A0+1CEj ...
		lea	eax, [esp+0C0h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C4h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0C8h+var_90]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0CCh+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D0h+var_A0]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D4h+var_80]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D8h+var_70]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0DCh+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E0h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E4h+var_50]
		push	eax
		call	sub_10028F00
		mov	eax, [esp+0E8h+var_B0]
		add	esp, 28h
		test	eax, eax
		jnz	short loc_10025A0A
		test	ebx, ebx
		jz	short loc_10025A0A
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_100259FA
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_100259DF
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_100259C4
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_100259C4:				; CODE XREF: sub_100253A0+607j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_100259DF:				; CODE XREF: sub_100253A0+602j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_100259FA:				; CODE XREF: sub_100253A0+5FDj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh

loc_10025A0A:				; CODE XREF: sub_100253A0+5F4j
					; sub_100253A0+5F8j
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_10025A15:				; CODE XREF: sub_100253A0+19j
					; sub_100253A0+28j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0B0h
		retn
sub_100253A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10025A30	proc near		; DATA XREF: .rdata:1003E4D8o

var_BC		= byte ptr -0BCh
var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 0BCh
		push	ebx
		xor	ebx, ebx
		push	ebp
		push	edi
		cmp	[esp+0C8h+arg_0], ebx
		jz	loc_10026019
		mov	edi, [esp+0C8h+arg_4]
		test	edi, edi
		jz	loc_10026019
		cmp	[edi+8], ebx
		jz	loc_10026019
		cmp	[edi+0Ch], ebx
		jz	loc_10026019
		cmp	[edi+14h], ebx
		jz	loc_10026019
		cmp	[edi+18h], ebx
		jz	loc_10026019
		cmp	[edi+20h], ebx
		jz	loc_10026019
		cmp	[edi+24h], ebx
		jz	loc_10026019
		mov	eax, [esp+0C8h+arg_C]
		test	eax, eax
		jz	loc_10026019
		cmp	[eax+4], ebx
		jz	loc_10026019
		cmp	[eax+8], ebx
		jz	loc_10026019
		mov	edx, [esp+0C8h+arg_10]
		test	edx, edx
		jz	loc_10026019
		cmp	[edx+4], ebx
		jz	loc_10026019
		cmp	[edx+8], ebx
		jz	loc_10026019
		mov	ecx, [esp+0C8h+arg_14]
		test	ecx, ecx
		jz	loc_10026019
		cmp	[ecx+4], ebx
		jz	loc_10026019
		cmp	[ecx+8], ebx
		jz	loc_10026019
		mov	ebp, [esp+0C8h+arg_18]
		test	ebp, ebp
		jz	loc_10026019
		cmp	[ebp+4], ebx
		jz	loc_10026019
		cmp	[ebp+8], ebx
		jz	loc_10026019
		mov	ecx, [esp+0C8h+arg_1C]
		test	ecx, ecx
		jz	loc_10026019
		cmp	[ecx+4], ebx
		jz	loc_10026019
		cmp	[ecx+8], ebx
		jz	loc_10026019
		push	edx
		push	eax
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jz	loc_10026019
		lea	eax, [esp+0C8h+var_BC]
		mov	[esp+0C8h+var_B0], ebx
		push	esi
		push	eax
		mov	[esp+0D0h+var_64], ebx
		mov	[esp+0D0h+var_34], ebx
		mov	[esp+0D0h+var_54], ebx
		mov	[esp+0D0h+var_94], ebx
		mov	[esp+0D0h+var_14], ebx
		mov	[esp+0D0h+var_44], ebx
		mov	[esp+0D0h+var_74], ebx
		mov	[esp+0D0h+var_24], ebx
		mov	[esp+0D0h+var_4], ebx
		mov	[esp+0D0h+var_84], ebx
		mov	[esp+0D0h+var_A8], ebx
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_70]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_60]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_A0]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_80]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_90]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10025F0E
		push	dword ptr [edi+0Ch]
		lea	eax, [esp+0D0h+var_BC]
		push	dword ptr [edi+8]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10025F0E
		push	dword ptr [edi+18h]
		lea	eax, [esp+0D0h+var_70]
		push	dword ptr [edi+14h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10025F0E
		push	dword ptr [edi+24h]
		lea	eax, [esp+0D0h+var_40]
		push	dword ptr [edi+20h]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10025F0E
		mov	eax, [esp+0CCh+arg_14]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+0D4h+var_A0]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10025F0E
		mov	eax, [esp+0CCh+arg_1C]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+0D4h+var_80]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_60]
		push	eax
		lea	eax, [esp+0D0h+var_BC]
		push	1
		push	eax
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_50]
		push	eax
		lea	eax, [esp+0D0h+var_BC]
		push	eax
		lea	eax, [esp+0D4h+var_70]
		push	eax
		lea	eax, [esp+0D8h+var_A0]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_A0]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jle	loc_10025EFE
		lea	eax, [esp+0CCh+var_60]
		push	eax
		lea	eax, [esp+0D0h+var_A0]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_10025EFE
		lea	eax, [esp+0CCh+var_70]
		push	eax
		lea	eax, [esp+0D0h+var_80]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_10025EFE
		lea	eax, [esp+0CCh+var_50]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jnz	loc_10025EFE
		lea	eax, [esp+0CCh+var_20]
		push	eax
		push	[esp+0D0h+arg_10]
		lea	eax, [edi+1Ch]
		push	[esp+0D4h+arg_14]
		push	ebp
		push	eax
		push	[esp+0E0h+arg_8]
		call	sub_10026040
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_30]
		push	eax
		lea	eax, [esp+0D0h+var_BC]
		push	eax
		lea	eax, [esp+0D4h+var_80]
		push	eax
		lea	eax, [esp+0D8h+var_40]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_10]
		push	eax
		lea	eax, [esp+0D0h+var_BC]
		push	eax
		lea	eax, [esp+0D4h+var_20]
		push	eax
		lea	eax, [esp+0D8h+var_A0]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_90]
		push	eax
		lea	eax, [esp+0D0h+var_BC]
		push	eax
		lea	eax, [esp+0D4h+var_10]
		push	eax
		lea	eax, [esp+0D8h+var_30]
		push	eax
		call	sub_10029DF0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10025F0E
		lea	eax, [esp+0CCh+var_90]
		push	eax
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		jg	short loc_10025EA1
		lea	esi, [ebx-3]
		jmp	short loc_10025F0E
; ---------------------------------------------------------------------------

loc_10025EA1:				; CODE XREF: sub_10025A30+46Aj
		push	eax
		lea	eax, [esp+0D0h+var_AC]
		push	eax
		push	[esp+0D4h+arg_0]
		call	SECITEM_AllocItem_Util
		mov	eax, [esp+0D8h+var_A8]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10025EC3
		lea	esi, [eax-2]
		jmp	short loc_10025F0E
; ---------------------------------------------------------------------------

loc_10025EC3:				; CODE XREF: sub_10025A30+48Cj
		push	[esp+0CCh+var_A4]
		push	eax
		lea	eax, [esp+0D4h+var_90]
		push	eax
		call	sub_1002A820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10025F0E
		mov	eax, [esp+0CCh+var_A4]
		xor	esi, esi
		cmp	eax, [ebp+8]
		jnz	short loc_10025EFE
		push	eax
		push	dword ptr [ebp+4]
		push	[esp+0D4h+var_A8]
		call	NSS_SecureMemcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10025EFE
		xor	ebx, ebx
		jmp	short loc_10025F0E
; ---------------------------------------------------------------------------

loc_10025EFE:				; CODE XREF: sub_10025A30+352j
					; sub_10025A30+36Cj ...
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh

loc_10025F0E:				; CODE XREF: sub_10025A30+165j
					; sub_10025A30+17Cj ...
		lea	eax, [esp+0CCh+var_BC]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D0h+var_70]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D4h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0D8h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0DCh+var_A0]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E0h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E4h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0E8h+var_80]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0ECh+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0F0h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0F4h+var_90]
		push	eax
		call	sub_10028F00
		add	esp, 2Ch
		test	ebx, ebx
		jnz	short loc_1002600C
		test	esi, esi
		jz	short loc_1002600C
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10025FFC
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10025FDF
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10025FC2
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		mov	eax, ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0BCh
		retn
; ---------------------------------------------------------------------------

loc_10025FC2:				; CODE XREF: sub_10025A30+573j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		mov	eax, ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0BCh
		retn
; ---------------------------------------------------------------------------

loc_10025FDF:				; CODE XREF: sub_10025A30+56Ej
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh
		mov	eax, ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0BCh
		retn
; ---------------------------------------------------------------------------

loc_10025FFC:				; CODE XREF: sub_10025A30+569j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh

loc_1002600C:				; CODE XREF: sub_10025A30+560j
					; sub_10025A30+564j
		pop	esi
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 0BCh
		retn
; ---------------------------------------------------------------------------

loc_10026019:				; CODE XREF: sub_10025A30+12j
					; sub_10025A30+21j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0BCh
		retn
sub_10025A30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026040	proc near		; CODE XREF: sub_100253A0+4B9p
					; sub_10025A30+3C5p

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 64h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+64h+var_4], eax
		mov	ecx, [esp+64h+arg_C]
		mov	eax, [esp+64h+arg_0]
		push	ebp
		mov	ebp, [esp+68h+arg_8]
		push	esi
		mov	esi, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_48], ecx
		mov	ecx, [esp+6Ch+arg_10]
		push	edi
		mov	[esp+70h+var_58], ecx
		mov	ecx, [esp+70h+arg_14]
		push	eax
		mov	[esp+74h+var_5C], ecx
		call	sub_10008CC0
		mov	edi, eax
		add	esp, 4
		mov	[esp+70h+var_64], edi
		test	edi, edi
		jz	loc_10026172
		cmp	dword ptr [edi], 40h
		ja	loc_10026172
		mov	ecx, [edi+4]
		push	ebx
		call	ecx
		mov	ebx, eax
		mov	[esp+74h+var_60], ebx
		test	ebx, ebx
		jnz	short loc_100260C1
		lea	eax, [ebx-2]
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_100260C1:				; CODE XREF: sub_10026040+69j
		lea	eax, [esp+74h+var_44]
		mov	[esp+74h+var_50], eax
		mov	eax, [edi]
		mov	[esp+74h+var_4C], eax
		mov	eax, [edi+10h]
		push	ebx
		call	eax
		lea	eax, [esp+78h+var_64]
		push	esi
		push	eax
		call	sub_10026190
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10026152
		lea	eax, [esp+74h+var_64]
		push	ebp
		push	eax
		call	sub_10026190
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10026152
		push	[esp+74h+var_48]
		lea	eax, [esp+78h+var_64]
		push	eax
		call	sub_10026190
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10026152
		push	[esp+74h+var_58]
		lea	eax, [esp+78h+var_64]
		push	eax
		call	sub_10026190
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10026152
		push	40h
		lea	eax, [esp+78h+var_4C]
		push	eax
		push	[esp+7Ch+var_50]
		mov	eax, [edi+18h]
		push	ebx
		call	eax
		push	[esp+84h+var_4C]
		push	[esp+88h+var_50]
		push	[esp+8Ch+var_5C]
		call	sub_10029F90
		add	esp, 1Ch
		mov	esi, eax

loc_10026152:				; CODE XREF: sub_10026040+A7j
					; sub_10026040+BBj ...
		mov	eax, [edi+0Ch]
		push	1
		push	ebx
		call	eax
		add	esp, 8
		mov	eax, esi
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_10026172:				; CODE XREF: sub_10026040+4Cj
					; sub_10026040+55j
		mov	ecx, [esp+70h+var_4]
		mov	eax, 0FFFFFFFCh
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
sub_10026040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026190	proc near		; CODE XREF: sub_10026040+9Bp
					; sub_10026040+AFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_4]
		mov	eax, [edi+8]
		cmp	eax, 0FFFFh
		jbe	short loc_100261A6
		mov	eax, 0FFFFFFFCh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100261A6:				; CODE XREF: sub_10026190+Dj
		shr	eax, 8
		lea	ecx, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	byte ptr [esp+8+arg_4],	al
		mov	al, [edi+8]
		mov	byte ptr [esp+8+arg_4+1], al
		mov	eax, [esi]
		push	2
		push	ecx
		push	dword ptr [esi+4]
		mov	eax, [eax+14h]
		call	eax
		push	dword ptr [edi+8]
		mov	eax, [esi]
		push	dword ptr [edi+4]
		push	dword ptr [esi+4]
		mov	eax, [eax+14h]
		call	eax
		add	esp, 18h
		xor	eax, eax
		pop	esi
		pop	edi
		retn
sub_10026190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100261F0	proc near		; CODE XREF: sub_10024F50+326p

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 40h
		lea	eax, [esp+40h+var_10]
		mov	[esp+40h+var_4], 0
		push	esi
		push	eax
		mov	[esp+48h+var_24], 0
		mov	[esp+48h+var_14], 0
		mov	[esp+48h+var_34], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10026340
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10026340
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10026340
		lea	eax, [esp+44h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10026340
		mov	eax, [esp+44h+arg_0]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026340
		mov	eax, [esp+44h+arg_4]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026340
		mov	eax, [esp+44h+arg_8]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_10029F90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10026340
		lea	eax, [esp+44h+var_20]
		push	eax
		lea	eax, [esp+48h+var_30]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jnz	short loc_100262EF
		mov	eax, 0FFFFFFFCh
		pop	esi
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100262EF:				; CODE XREF: sub_100261F0+F3j
		lea	eax, [esp+44h+var_40]
		push	eax
		lea	eax, [esp+48h+var_30]
		push	eax
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10026340
		lea	eax, [esp+44h+var_40]
		push	eax
		lea	eax, [esp+48h+var_20]
		push	eax
		lea	eax, [esp+4Ch+var_40]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10026340
		push	[esp+44h+arg_10]
		lea	eax, [esp+48h+var_40]
		push	[esp+48h+arg_C]
		push	eax
		call	sub_10029A70
		add	esp, 0Ch
		mov	esi, eax

loc_10026340:				; CODE XREF: sub_100261F0+35j
					; sub_100261F0+4Cj ...
		lea	eax, [esp+44h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+48h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		mov	eax, esi
		pop	esi
		add	esp, 40h
		retn
sub_100261F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026380	proc near		; CODE XREF: sub_1001FBC0+2CAp
					; sub_1001FBC0+357p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1002638E
		mov	eax, 0FFFFFFFCh
		retn
; ---------------------------------------------------------------------------

loc_1002638E:				; CODE XREF: sub_10026380+6j
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_1002639A
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1002639A:				; CODE XREF: sub_10026380+14j
		lea	edx, [esp+arg_0]
		push	edx
		push	ecx
		push	eax
		call	sub_10029B10
		add	esp, 0Ch
		test	eax, eax
		jnz	short locret_100263B5
		mov	eax, [esp+arg_0]
		neg	eax
		sbb	eax, eax

locret_100263B5:			; CODE XREF: sub_10026380+2Bj
		retn
sub_10026380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100263C0	proc near		; CODE XREF: sub_1001B3B0+26Cp
					; sub_100264B0+289p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	esi
		test	ecx, ecx
		jz	short loc_1002640C
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_1002640C
		mov	eax, [esi]
		cmp	eax, 198Eh
		jle	short loc_100263E1
		mov	eax, 198Eh
		jmp	short loc_100263E5
; ---------------------------------------------------------------------------

loc_100263E1:				; CODE XREF: sub_100263C0+18j
		test	eax, eax
		jle	short loc_1002640C

loc_100263E5:				; CODE XREF: sub_100263C0+1Fj
		lea	edx, [esp+4+arg_0]
		push	edx
		push	eax
		push	offset dword_10045BA0
		push	ecx
		call	sub_10026B30
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10026411
		mov	ecx, [esp+4+arg_0]
		mov	ecx, ds:dword_10045BA0[ecx*4]
		mov	[esi], ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002640C:				; CODE XREF: sub_100263C0+7j
					; sub_100263C0+Fj ...
		mov	eax, 0FFFFFFFCh

loc_10026411:				; CODE XREF: sub_100263C0+3Bj
		pop	esi
		retn
sub_100263C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026420	proc near		; CODE XREF: sub_10020110+6p
					; sub_100264B0+20Dp ...

var_20		= byte ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 20h
		lea	eax, [esp+20h+var_20]
		push	eax
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100264A8
		push	esi
		push	[esp+24h+arg_4]
		lea	eax, [esp+28h+var_20]
		push	eax
		call	sub_1002A0D0
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_10026498
		lea	eax, [esp+24h+var_10]
		push	eax
		mov	eax, [esp+28h+arg_0]
		push	eax
		push	eax
		lea	eax, [esp+30h+var_20]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_1002648B
		lea	eax, [esp+24h+var_10]
		push	eax
		lea	eax, [esp+28h+var_20]
		push	eax
		call	sub_10028F50
		add	esp, 8
		mov	esi, eax
		neg	esi
		sbb	esi, esi

loc_1002648B:				; CODE XREF: sub_10026420+51j
		lea	eax, [esp+24h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_10026498:				; CODE XREF: sub_10026420+33j
		lea	eax, [esp+24h+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	esi

loc_100264A8:				; CODE XREF: sub_10026420+11j
		add	esp, 20h
		retn
sub_10026420	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100264B0	proc near		; CODE XREF: sub_10016330+190p
					; sub_1001E7C0+79p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 28h
		push	ebx
		xor	ebx, ebx
		cmp	[esp+2Ch+arg_0], ebx
		jnz	short loc_100264C4
		lea	eax, [ebx-4]
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_100264C4:				; CODE XREF: sub_100264B0+Aj
		push	edi
		mov	edi, [esp+30h+arg_4]
		cmp	edi, 10h
		ja	short loc_100264D9
		pop	edi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_100264D9:				; CODE XREF: sub_100264B0+1Cj
		push	ebp
		push	8000h		; size_t
		call	ds:malloc
		mov	ebp, eax
		add	esp, 4
		mov	[esp+34h+var_28], ebp
		test	ebp, ebp
		jnz	short loc_100264FC
		lea	eax, [ebp-2]
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_100264FC:				; CODE XREF: sub_100264B0+40j
		lea	eax, [esp+34h+var_10]
		mov	[esp+34h+var_4], ebx
		push	esi
		push	eax
		mov	[esp+3Ch+var_14], ebx
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100267C7
		lea	eax, [esp+38h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_100267C7
		cmp	edi, 514h
		jb	short loc_10026545
		mov	ebp, 2
		jmp	loc_100265EC
; ---------------------------------------------------------------------------

loc_10026545:				; CODE XREF: sub_100264B0+89j
		cmp	edi, 352h
		jb	short loc_10026557
		mov	ebp, 3
		jmp	loc_100265EC
; ---------------------------------------------------------------------------

loc_10026557:				; CODE XREF: sub_100264B0+9Bj
		cmp	edi, 28Ah
		jb	short loc_10026569
		mov	ebp, 4
		jmp	loc_100265EC
; ---------------------------------------------------------------------------

loc_10026569:				; CODE XREF: sub_100264B0+ADj
		cmp	edi, 226h
		jb	short loc_10026578
		mov	ebp, 5
		jmp	short loc_100265EC
; ---------------------------------------------------------------------------

loc_10026578:				; CODE XREF: sub_100264B0+BFj
		cmp	edi, 1C2h
		jb	short loc_10026587
		mov	ebp, 6
		jmp	short loc_100265EC
; ---------------------------------------------------------------------------

loc_10026587:				; CODE XREF: sub_100264B0+CEj
		cmp	edi, 190h
		jb	short loc_10026596
		mov	ebp, 7
		jmp	short loc_100265EC
; ---------------------------------------------------------------------------

loc_10026596:				; CODE XREF: sub_100264B0+DDj
		cmp	edi, 15Eh
		jb	short loc_100265A5
		mov	ebp, 8
		jmp	short loc_100265EC
; ---------------------------------------------------------------------------

loc_100265A5:				; CODE XREF: sub_100264B0+ECj
		cmp	edi, 12Ch
		jb	short loc_100265B4
		mov	ebp, 9
		jmp	short loc_100265EC
; ---------------------------------------------------------------------------

loc_100265B4:				; CODE XREF: sub_100264B0+FBj
		cmp	edi, 0FAh
		jb	short loc_100265C3
		mov	ebp, 0Ch
		jmp	short loc_100265EC
; ---------------------------------------------------------------------------

loc_100265C3:				; CODE XREF: sub_100264B0+10Aj
		cmp	edi, 0C8h
		jb	short loc_100265D2
		mov	ebp, 0Fh
		jmp	short loc_100265EC
; ---------------------------------------------------------------------------

loc_100265D2:				; CODE XREF: sub_100264B0+119j
		cmp	edi, 96h
		jb	short loc_100265E1
		mov	ebp, 12h
		jmp	short loc_100265EC
; ---------------------------------------------------------------------------

loc_100265E1:				; CODE XREF: sub_100264B0+128j
		cmp	edi, 64h
		sbb	ebp, ebp
		and	ebp, 17h
		add	ebp, 1Bh

loc_100265EC:				; CODE XREF: sub_100264B0+90j
					; sub_100264B0+A2j ...
		cmp	[esp+38h+arg_8], ebx
		jz	short loc_100265F3
		dec	edi

loc_100265F3:				; CODE XREF: sub_100264B0+140j
		push	1
		lea	eax, [edi-1]
		push	eax
		push	[esp+40h+arg_0]
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100267C3
		push	1
		push	0
		push	[esp+40h+arg_0]
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100267C3
		mov	esi, [esp+38h+arg_0]
		push	esi
		call	sub_10028CD0
		add	esp, 4
		lea	ebx, [eax-1]
		cmp	ebx, edi
		jb	short loc_1002665F
		lea	ecx, [ecx+0]

loc_10026640:				; CODE XREF: sub_100264B0+1ADj
		push	0
		push	ebx
		push	esi
		call	sub_10028C50
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100267C3
		mov	esi, [esp+38h+arg_0]
		dec	ebx
		cmp	ebx, edi
		jnb	short loc_10026640

loc_1002665F:				; CODE XREF: sub_100264B0+18Bj
		push	8000h		; size_t
		push	[esp+3Ch+var_28] ; void	*
		push	198Dh		; int
		push	offset dword_10045BA4 ;	int
		push	esi		; int
		call	sub_10026AC0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_100267C3
		mov	eax, [esp+38h+var_28]
		or	esi, 0FFFFFFFFh
		xor	ebx, ebx
		xor	edi, edi

loc_10026690:				; CODE XREF: sub_100264B0+2F8j
		cmp	byte ptr [eax+ebx], 0
		jnz	loc_1002679E
		lea	eax, [esp+38h+var_10]
		push	eax
		push	edi
		push	[esp+40h+arg_0]
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100267C3
		lea	eax, [esp+38h+var_10]
		push	2
		push	eax
		call	sub_10026420
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_10026795
		lea	eax, [esp+38h+var_10]
		push	ebp
		push	eax
		call	sub_10026830
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_10026795
		cmp	[esp+38h+arg_8], eax
		jz	loc_100267B2
		lea	eax, [esp+38h+var_20]
		push	eax
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_10029D40
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_100267C3
		lea	eax, [esp+38h+var_20]
		push	eax
		push	1
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100267C3
		lea	eax, [esp+38h+var_24]
		mov	[esp+38h+var_24], 198Eh
		push	eax
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_100263C0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10026756
		lea	eax, [esp+38h+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 4
		jmp	short loc_1002679A
; ---------------------------------------------------------------------------

loc_10026756:				; CODE XREF: sub_100264B0+295j
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_100267C3
		lea	eax, [esp+38h+var_20]
		push	2
		push	eax
		call	sub_10026420
		mov	esi, eax
		add	esp, 8
		lea	eax, [esp+38h+var_20]
		test	esi, esi
		jnz	short loc_1002678C
		push	ebp
		push	eax
		call	sub_10026830
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_10026809
		lea	eax, [esp+38h+var_20]

loc_1002678C:				; CODE XREF: sub_100264B0+2C2j
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_10026795:				; CODE XREF: sub_100264B0+219j
					; sub_100264B0+231j
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_100267C3

loc_1002679A:				; CODE XREF: sub_100264B0+2A4j
		mov	eax, [esp+38h+var_28]

loc_1002679E:				; CODE XREF: sub_100264B0+1E4j
		add	edi, 2
		inc	ebx
		cmp	edi, 10000h
		jl	loc_10026690
		test	esi, esi
		jnz	short loc_100267C3

loc_100267B2:				; CODE XREF: sub_100264B0+23Bj
					; sub_100264B0+375j
		push	[esp+38h+arg_0]
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_10029580
		add	esp, 8

loc_100267C3:				; CODE XREF: sub_100264B0+159j
					; sub_100264B0+173j ...
		mov	ebp, [esp+38h+var_28]

loc_100267C7:				; CODE XREF: sub_100264B0+66j
					; sub_100264B0+7Dj
		lea	eax, [esp+38h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_10028F00
		mov	eax, [esp+40h+arg_C]
		add	esp, 8
		test	eax, eax
		jz	short loc_100267E8
		add	[eax], ebx

loc_100267E8:				; CODE XREF: sub_100264B0+334j
		push	8000h		; size_t
		push	0		; int
		push	ebp		; void *
		call	memset
		push	ebp		; void *
		call	ds:free
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10026809:				; CODE XREF: sub_100264B0+2D2j
		lea	eax, [esp+38h+var_10]
		push	eax
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_10029580
		lea	eax, [esp+40h+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		jmp	short loc_100267B2
sub_100264B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026830	proc near		; CODE XREF: sub_10019410+2DCp
					; sub_10019410+2FCp ...

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 40h
		push	ebx
		mov	ebx, [esp+44h+arg_0]
		test	ebx, ebx
		jnz	short loc_10026844
		lea	eax, [ebx-4]
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10026844:				; CODE XREF: sub_10026830+Aj
		lea	eax, [esp+44h+var_20]
		mov	[esp+44h+var_24], 0
		push	esi
		push	eax
		mov	[esp+4Ch+var_14], 0
		mov	[esp+4Ch+var_4], 0
		mov	[esp+4Ch+var_34], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10026A2F
		lea	eax, [esp+48h+var_20]
		push	eax
		push	1
		push	ebx
		call	sub_1002A600
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026A2F
		lea	eax, [esp+48h+var_20]
		push	ebp
		push	eax
		call	sub_1002A8C0
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_100268B2
		or	esi, 0FFFFFFFFh
		jmp	loc_10026A2E
; ---------------------------------------------------------------------------

loc_100268B2:				; CODE XREF: sub_10026830+78j
		push	dword ptr [ebx+8]
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_10029940
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10026A2E
		lea	eax, [esp+4Ch+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10026A2E
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10026A2E
		push	0
		lea	eax, [esp+50h+var_10]
		push	eax
		lea	eax, [esp+54h+var_20]
		push	ebp
		push	eax
		call	sub_10029420
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10026A2E
		push	edi
		xor	edi, edi
		mov	[esp+50h+arg_0], edi
		cmp	[esp+50h+arg_4], edi
		jle	loc_10026A2D
		lea	ebx, [ebx+0]

loc_10026930:				; CODE XREF: sub_10026830+1F7j
		push	dword ptr [ebx+8]
		lea	eax, [esp+54h+var_30]
		push	eax
		call	sub_1002C8E0
		lea	eax, [esp+58h+var_30]
		push	eax
		call	sub_10026A70
		lea	eax, [esp+5Ch+var_30]
		push	eax
		push	ebx
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		js	loc_10026A2D
		lea	eax, [esp+50h+var_30]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jg	short loc_10026979
		dec	edi
		jmp	loc_10026A1E
; ---------------------------------------------------------------------------

loc_10026979:				; CODE XREF: sub_10026830+141j
		lea	eax, [esp+50h+var_40]
		push	eax
		push	ebx
		lea	eax, [esp+58h+var_10]
		push	eax
		lea	eax, [esp+5Ch+var_30]
		push	eax
		call	sub_10026B80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10026A2D
		lea	eax, [esp+50h+var_40]
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	short loc_10026A1C
		lea	eax, [esp+50h+var_20]
		push	eax
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_10026A1C
		or	esi, 0FFFFFFFFh
		lea	edi, [esi+2]
		cmp	ebp, edi
		jbe	short loc_10026A2D
		mov	edi, edi

loc_100269D0:				; CODE XREF: sub_10026830+1E4j
		lea	eax, [esp+50h+var_40]
		push	eax
		push	ebx
		push	eax
		call	sub_1002A340
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10026A2D
		lea	eax, [esp+50h+var_40]
		or	esi, 0FFFFFFFFh
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	short loc_10026A2D
		lea	eax, [esp+50h+var_20]
		push	eax
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_10026A18
		inc	edi
		cmp	edi, ebp
		jb	short loc_100269D0
		jmp	short loc_10026A2D
; ---------------------------------------------------------------------------

loc_10026A18:				; CODE XREF: sub_10026830+1DFj
		mov	edi, [esp+50h+arg_0]

loc_10026A1C:				; CODE XREF: sub_10026830+17Cj
					; sub_10026830+192j
		xor	esi, esi

loc_10026A1E:				; CODE XREF: sub_10026830+144j
		inc	edi
		mov	[esp+50h+arg_0], edi
		cmp	edi, [esp+50h+arg_4]
		jl	loc_10026930

loc_10026A2D:				; CODE XREF: sub_10026830+F4j
					; sub_10026830+12Aj ...
		pop	edi

loc_10026A2E:				; CODE XREF: sub_10026830+7Dj
					; sub_10026830+96j ...
		pop	ebp

loc_10026A2F:				; CODE XREF: sub_10026830+46j
					; sub_10026830+60j
		lea	eax, [esp+48h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+4Ch+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+54h+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 40h
		retn
sub_10026830	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026A70	proc near		; CODE XREF: sub_10026830+112p

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		test	ebp, ebp
		jnz	short loc_10026A82
		lea	eax, [esi-4]
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10026A82:				; CODE XREF: sub_10026A70+Aj
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+8], ebx
		jbe	short loc_10026AB5
		push	edi
		jmp	short loc_10026A90
; ---------------------------------------------------------------------------
		align 10h

loc_10026A90:				; CODE XREF: sub_10026A70+1Bj
					; sub_10026A70+42j
		mov	edi, 4

loc_10026A95:				; CODE XREF: sub_10026A70+36j
		call	ds:rand
		and	eax, 0FFh
		shl	esi, 8
		or	esi, eax
		dec	edi
		jnz	short loc_10026A95
		mov	eax, [ebp+0Ch]
		mov	[eax+ebx*4], esi
		inc	ebx
		cmp	ebx, [ebp+8]
		jb	short loc_10026A90
		pop	edi

loc_10026AB5:				; CODE XREF: sub_10026A70+18j
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
sub_10026A70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10026AC0(int,	int, int, void *, size_t)
sub_10026AC0	proc near		; CODE XREF: sub_100264B0+1C3p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_C]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+14h+arg_10]
		push	edi		; size_t
		push	0		; int
		push	ebx		; void *
		call	memset
		xor	ebp, ebp
		add	esp, 0Ch
		cmp	[esp+14h+arg_8], ebp
		jbe	short loc_10026B21

loc_10026AE1:				; CODE XREF: sub_10026AC0+5Fj
		mov	eax, [esp+14h+arg_4]
		mov	esi, [eax+ebp*4]
		lea	eax, [esp+14h+var_4]
		push	eax
		push	esi
		push	[esp+1Ch+arg_0]
		call	sub_10029B10
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10026B23
		mov	ecx, [esp+14h+var_4]
		test	ecx, ecx
		jz	short loc_10026B0C
		shr	ecx, 1
		mov	eax, esi
		sub	eax, ecx

loc_10026B0C:				; CODE XREF: sub_10026AC0+44j
		cmp	eax, edi
		jnb	short loc_10026B1A

loc_10026B10:				; CODE XREF: sub_10026AC0+58j
		mov	byte ptr [eax+ebx], 1
		add	eax, esi
		cmp	eax, edi
		jb	short loc_10026B10

loc_10026B1A:				; CODE XREF: sub_10026AC0+4Ej
		inc	ebp
		cmp	ebp, [esp+14h+arg_8]
		jb	short loc_10026AE1

loc_10026B21:				; CODE XREF: sub_10026AC0+1Fj
		xor	eax, eax

loc_10026B23:				; CODE XREF: sub_10026AC0+3Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10026AC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026B30	proc near		; CODE XREF: sub_100263C0+31p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		xor	esi, esi
		test	edi, edi
		jle	short loc_10026B66
		mov	ebx, [esp+10h+arg_4]
		mov	ebp, [esp+10h+arg_0]

loc_10026B46:				; CODE XREF: sub_10026B30+34j
		lea	eax, [esp+10h+arg_8]
		push	eax
		push	dword ptr [ebx+esi*4]
		push	ebp
		call	sub_10029B10
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10026B69
		cmp	[esp+10h+arg_8], eax
		jz	short loc_10026B6E
		inc	esi
		cmp	esi, edi
		jl	short loc_10026B46

loc_10026B66:				; CODE XREF: sub_10026B30+Cj
		or	eax, 0FFFFFFFFh

loc_10026B69:				; CODE XREF: sub_10026B30+29j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10026B6E:				; CODE XREF: sub_10026B30+2Fj
		mov	eax, [esp+10h+arg_C]
		test	eax, eax
		jz	short loc_10026B78
		mov	[eax], esi

loc_10026B78:				; CODE XREF: sub_10026B30+44j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10026B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026B80	proc near		; CODE XREF: sub_10016040+18Dp
					; sub_10016330+29Cp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		push	ebx
		mov	ebx, [esp+40h+arg_8]
		push	ebx
		call	sub_10029A50
		add	esp, 4
		test	eax, eax
		jnz	short loc_10026BAF
		push	[esp+40h+arg_C]
		push	ebx
		push	[esp+48h+arg_4]
		push	[esp+4Ch+arg_0]
		call	sub_1002B5D0
		add	esp, 10h
		pop	ebx
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_10026BAF:				; CODE XREF: sub_10026B80+13j
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+4Ch+arg_0]
		push	ebx
		push	edi
		mov	[esp+54h+var_28], 0
		mov	[esp+54h+var_18], 0
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	short loc_10026BD8
		mov	ebp, edi
		jmp	short loc_10026C0A
; ---------------------------------------------------------------------------

loc_10026BD8:				; CODE XREF: sub_10026B80+52j
		lea	eax, [esp+4Ch+var_24]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10026DCB
		lea	ebp, [esp+4Ch+var_24]
		mov	eax, ebp
		push	eax
		push	ebx
		push	edi
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026DCB

loc_10026C0A:				; CODE XREF: sub_10026B80+56j
		mov	eax, [ebx+8]
		mov	[esp+4Ch+var_3C], eax
		lea	eax, ds:2[eax*2]
		push	eax
		lea	eax, [esp+50h+var_34]
		push	eax
		call	sub_10029940
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10026DCB
		mov	eax, [ebx]
		mov	[esp+4Ch+var_14], eax
		mov	eax, [ebx+4]
		mov	[esp+4Ch+var_10], eax
		mov	eax, [ebx+8]
		mov	[esp+4Ch+var_C], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+4Ch+var_8], eax
		push	dword ptr [eax]
		call	sub_1002C3C0
		neg	eax
		mov	[esp+50h+var_4], eax
		lea	eax, [esp+50h+var_34]
		push	eax
		push	ebp
		call	sub_100290F0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026DCB
		push	[esp+4Ch+var_C]
		lea	eax, [esp+50h+var_34]
		push	eax
		call	sub_1002C4D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10026DCB
		lea	eax, [esp+4Ch+var_34]
		push	eax
		push	0
		lea	eax, [esp+54h+var_14]
		push	eax
		lea	eax, [esp+58h+var_34]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10026DCB
		push	[esp+4Ch+arg_4]
		call	sub_10028CD0
		add	esp, 4
		mov	edi, eax
		cmp	dword_1004E0F0,	0
		jz	short loc_10026CDC
		cmp	edi, 30Ch
		jbe	short loc_10026CD4
		mov	esi, 6
		jmp	short loc_10026D07
; ---------------------------------------------------------------------------

loc_10026CD4:				; CODE XREF: sub_10026B80+14Bj
		cmp	edi, 100h
		jmp	short loc_10026CF1
; ---------------------------------------------------------------------------

loc_10026CDC:				; CODE XREF: sub_10026B80+143j
		cmp	edi, 1E0h
		jbe	short loc_10026CEB
		mov	esi, 6
		jmp	short loc_10026D07
; ---------------------------------------------------------------------------

loc_10026CEB:				; CODE XREF: sub_10026B80+162j
		cmp	edi, 0A0h

loc_10026CF1:				; CODE XREF: sub_10026B80+15Aj
		jbe	short loc_10026CFA
		mov	esi, 5
		jmp	short loc_10026D07
; ---------------------------------------------------------------------------

loc_10026CFA:				; CODE XREF: sub_10026B80:loc_10026CF1j
		mov	eax, 14h
		cmp	eax, edi
		sbb	esi, esi
		and	esi, 3
		inc	esi

loc_10026D07:				; CODE XREF: sub_10026B80+152j
					; sub_10026B80+169j ...
		mov	eax, dword_10050500
		test	eax, eax
		jnz	short loc_10026D28
		call	sub_1002DFB0
		test	eax, eax
		jnz	short loc_10026D86
		mov	dword_1004E0F0,	eax

loc_10026D1E:				; CODE XREF: sub_10026B80+209j
		mov	eax, 6

loc_10026D23:				; CODE XREF: sub_10026B80+215j
					; sub_10026B80+222j
		mov	dword_10050500,	eax

loc_10026D28:				; CODE XREF: sub_10026B80+18Ej
		cmp	dword_1004E0F0,	0
		jz	short loc_10026D37
		cmp	esi, eax
		jbe	short loc_10026D37
		mov	esi, eax

loc_10026D37:				; CODE XREF: sub_10026B80+1AFj
					; sub_10026B80+1B3j
		mov	ebp, 1
		lea	ecx, [esi-1]
		mov	eax, ebp
		xor	edx, edx
		shl	eax, cl
		mov	[esp+4Ch+var_38], eax
		mov	eax, edi
		div	esi
		test	edx, edx
		jz	short loc_10026D57
		mov	eax, esi
		sub	eax, edx
		add	edi, eax

loc_10026D57:				; CODE XREF: sub_10026B80+1CFj
		cmp	dword_1004E0F0,	0
		lea	eax, [esp+4Ch+var_14]
		jz	short loc_10026DA7
		mov	ecx, esi
		shl	ebp, cl
		push	ebp
		push	esi
		push	edi
		push	[esp+58h+var_3C]
		push	eax
		push	[esp+60h+arg_C]
		mov	eax, [esp+64h+arg_4]
		push	ebx
		push	eax
		lea	eax, [esp+6Ch+var_34]
		push	eax
		call	sub_10027EE0
		jmp	short loc_10026DC6
; ---------------------------------------------------------------------------

loc_10026D86:				; CODE XREF: sub_10026B80+197j
		cmp	eax, 40h
		jnb	short loc_10026D1E
		cmp	eax, 20h
		jb	short loc_10026D97
		mov	eax, 5
		jmp	short loc_10026D23
; ---------------------------------------------------------------------------

loc_10026D97:				; CODE XREF: sub_10026B80+20Ej
		cmp	eax, 10h
		sbb	eax, eax
		and	eax, 0FFFFFFFDh
		add	eax, 4
		jmp	loc_10026D23
; ---------------------------------------------------------------------------

loc_10026DA7:				; CODE XREF: sub_10026B80+1E2j
		push	[esp+4Ch+var_38]
		push	esi
		push	edi
		push	[esp+58h+var_3C]
		push	eax
		push	[esp+60h+arg_C]
		mov	eax, [esp+64h+arg_4]
		push	ebx
		push	eax
		lea	eax, [esp+6Ch+var_34]
		push	eax
		call	sub_10026DF0

loc_10026DC6:				; CODE XREF: sub_10026B80+204j
		mov	esi, eax
		add	esp, 24h

loc_10026DCB:				; CODE XREF: sub_10026B80+69j
					; sub_10026B80+84j ...
		lea	eax, [esp+4Ch+var_34]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+50h+var_24]
		push	eax
		call	sub_10028F00
		add	esp, 8
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 3Ch
		retn
sub_10026B80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026DF0	proc near		; CODE XREF: sub_10026B80+241p

var_240		= dword	ptr -240h
var_23C		= byte ptr -23Ch
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= byte ptr -224h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= byte ptr -214h
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F8		= byte ptr -1F8h
var_1F4		= byte ptr -1F4h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 240h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+240h+var_4], eax
		mov	eax, [esp+240h+arg_4]
		mov	ecx, 20h
		push	ebx
		push	ebp
		mov	ebp, [esp+248h+arg_10]
		mov	[esp+248h+var_228], eax
		mov	eax, [esp+248h+arg_C]
		push	esi
		push	edi
		mov	edi, [esp+250h+arg_0]
		mov	[esp+250h+var_22C], eax
		lea	eax, [esp+250h+var_1F8]
		mov	[esp+250h+var_230], 0
		mov	[esp+250h+var_208], 0
		mov	[esp+250h+var_218], 0
		lea	ecx, [ecx+0]

loc_10026E50:				; CODE XREF: sub_10026DF0+6Aj
		mov	dword ptr [eax], 0
		lea	eax, [eax+10h]
		dec	ecx
		jnz	short loc_10026E50
		mov	esi, [esp+250h+arg_14]
		lea	eax, [esi+1]
		lea	eax, [esi+eax*2]
		push	eax
		lea	eax, [esp+254h+var_23C]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		lea	eax, [esi+1]
		lea	eax, [esi+eax*2]
		push	eax
		lea	eax, [esp+254h+var_214]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		lea	eax, [esp+250h+var_204]
		push	edi
		push	eax
		call	sub_100298D0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [edi+8]
		inc	eax
		lea	eax, [esi+eax*2]
		push	eax
		lea	eax, [esp+254h+var_224]
		push	eax
		call	sub_10029940
		lea	eax, [esp+258h+var_224]
		push	eax
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		lea	eax, [esp+250h+var_224]
		push	ebp
		push	eax
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	edi, 1
		cmp	[esp+250h+arg_20], edi
		jbe	short loc_10026F63
		lea	esi, [esp+250h+var_1F4]
		jmp	short loc_10026F10
; ---------------------------------------------------------------------------
		align 10h

loc_10026F10:				; CODE XREF: sub_10026DF0+11Bj
					; sub_10026DF0+171j
		mov	eax, [esp+250h+var_21C]
		mov	ecx, [esp+250h+arg_14]
		inc	eax
		lea	eax, [ecx+eax*2]
		push	eax
		push	esi
		call	sub_10029940
		push	esi
		lea	eax, [esp+25Ch+var_224]
		push	eax
		lea	eax, [esi-10h]
		push	eax
		call	sub_10029B70
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		inc	edi
		add	esi, 10h
		cmp	edi, [esp+250h+arg_20]
		jb	short loc_10026F10

loc_10026F63:				; CODE XREF: sub_10026DF0+115j
		lea	eax, [esp+250h+var_23C]
		push	1
		push	eax
		call	sub_1002A0D0
		lea	eax, [esp+258h+var_23C]
		push	eax
		push	eax
		call	sub_100290F0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		push	dword ptr [ebp+8]
		lea	eax, [esp+254h+var_23C]
		push	eax
		call	sub_1002C4D0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		lea	eax, [esp+250h+var_23C]
		push	eax
		push	0
		push	ebp
		push	eax
		call	sub_100291E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		mov	ecx, [esp+250h+arg_18]
		lea	edi, [esp+250h+var_23C]
		mov	eax, [esp+250h+arg_1C]
		lea	esi, [esp+250h+var_214]
		sub	ecx, eax
		mov	[esp+250h+arg_18], ecx
		js	loc_10027E5E

loc_10026FE1:				; CODE XREF: sub_10026DF0+1068j
		push	eax
		push	ecx
		push	[esp+258h+var_228]
		call	sub_10028B30
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+arg_1C]
		mov	[esp+250h+var_240], ebx
		cmp	eax, 1
		jnz	short loc_10027060
		test	ebx, ebx
		jz	loc_10027E1B
		test	al, bl
		jz	loc_10027ECE
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		lea	eax, [esp+258h+var_204]
		push	eax
		push	esi
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		jmp	loc_10027E41
; ---------------------------------------------------------------------------

loc_10027060:				; CODE XREF: sub_10026DF0+217j
		cmp	eax, 4
		jnz	loc_10027346
		test	ebx, ebx
		jnz	loc_10027116
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		jmp	loc_10027E41
; ---------------------------------------------------------------------------

loc_10027116:				; CODE XREF: sub_10026DF0+27Bj
		test	bl, 1
		jz	loc_100271DF
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 1
		push	ebp
		shl	eax, 4
		push	esi
		add	eax, ebx
		push	eax
		push	edi
		call	sub_100287E0
		add	esp, 10h
		jmp	loc_10027E35
; ---------------------------------------------------------------------------

loc_100271DF:				; CODE XREF: sub_10026DF0+329j
		test	bl, 2
		jz	loc_10027281
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 2
		push	ebp
		shl	eax, 4
		push	edi
		add	eax, ebx
		push	eax
		push	esi
		call	sub_100287E0
		add	esp, 10h
		jmp	loc_10027E15
; ---------------------------------------------------------------------------

loc_10027281:				; CODE XREF: sub_10026DF0+3F2j
		test	bl, 4
		jz	short loc_100272F7
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 3
		push	ebp
		shl	eax, 4
		push	esi
		add	eax, ebx
		push	eax
		push	edi
		call	sub_100287E0
		add	esp, 10h
		jmp	loc_10027DF1
; ---------------------------------------------------------------------------

loc_100272F7:				; CODE XREF: sub_10026DF0+494j
		test	bl, 8
		jz	loc_10027ECE
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		push	ebp
		and	eax, 0FFFFFFF0h
		push	edi
		add	eax, ebx
		push	eax
		push	esi
		call	sub_100287E0
		add	esp, 10h
		jmp	loc_10027DC9
; ---------------------------------------------------------------------------

loc_10027346:				; CODE XREF: sub_10026DF0+273j
		cmp	eax, 5
		jnz	loc_1002783F
		test	ebx, ebx
		jz	loc_10027D83
		test	bl, 1
		jz	loc_10027452
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 1
		push	ebp
		shl	eax, 4
		push	edi
		add	eax, ebx
		push	eax
		push	esi
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		jmp	loc_10027E41
; ---------------------------------------------------------------------------

loc_10027452:				; CODE XREF: sub_10026DF0+56Aj
		test	bl, 2
		jz	loc_1002754E
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 2
		push	ebp
		shl	eax, 4
		push	esi
		add	eax, ebx
		push	eax
		push	edi
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		jmp	loc_10027E41
; ---------------------------------------------------------------------------

loc_1002754E:				; CODE XREF: sub_10026DF0+665j
		test	bl, 4
		jz	loc_1002764A
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 3
		push	ebp
		shl	eax, 4
		push	edi
		add	eax, ebx
		push	eax
		push	esi
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		jmp	loc_10027E41
; ---------------------------------------------------------------------------

loc_1002764A:				; CODE XREF: sub_10026DF0+761j
		test	bl, 8
		jz	loc_10027743
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		push	ebp
		and	eax, 0FFFFFFF0h
		push	esi
		add	eax, ebx
		push	eax
		push	edi
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		jmp	loc_10027E41
; ---------------------------------------------------------------------------

loc_10027743:				; CODE XREF: sub_10026DF0+85Dj
		test	bl, 10h
		jz	loc_10027ECE
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 5
		push	ebp
		shl	eax, 4
		push	edi
		add	eax, ebx
		push	eax
		push	esi
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		jmp	loc_10027E41
; ---------------------------------------------------------------------------

loc_1002783F:				; CODE XREF: sub_10026DF0+559j
		cmp	eax, 6
		jnz	loc_10027ECE
		test	ebx, ebx
		jnz	loc_10027945
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		jmp	loc_10027E41
; ---------------------------------------------------------------------------

loc_10027945:				; CODE XREF: sub_10026DF0+A5Aj
		test	bl, 1
		jz	loc_10027A5E
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 1
		push	ebp
		shl	eax, 4
		push	esi
		add	eax, ebx
		push	eax
		push	edi
		call	sub_100287E0
		add	esp, 10h
		jmp	loc_10027E35
; ---------------------------------------------------------------------------

loc_10027A5E:				; CODE XREF: sub_10026DF0+B58j
		test	bl, 2
		jz	loc_10027B50
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 2
		push	ebp
		shl	eax, 4
		push	edi
		add	eax, ebx
		push	eax
		push	esi
		call	sub_100287E0
		add	esp, 10h
		jmp	loc_10027E15
; ---------------------------------------------------------------------------

loc_10027B50:				; CODE XREF: sub_10026DF0+C71j
		test	bl, 4
		jz	loc_10027C1A
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 3
		push	ebp
		shl	eax, 4
		push	esi
		add	eax, ebx
		push	eax
		push	edi
		call	sub_100287E0
		add	esp, 10h
		jmp	loc_10027DF1
; ---------------------------------------------------------------------------

loc_10027C1A:				; CODE XREF: sub_10026DF0+D63j
		test	bl, 8
		jz	loc_10027CB9
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		push	ebp
		and	eax, 0FFFFFFF0h
		push	edi
		add	eax, ebx
		push	eax
		push	esi
		call	sub_100287E0
		add	esp, 10h
		jmp	loc_10027DC9
; ---------------------------------------------------------------------------

loc_10027CB9:				; CODE XREF: sub_10026DF0+E2Dj
		test	bl, 10h
		jz	short loc_10027D2C
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 5
		push	ebp
		shl	eax, 4
		push	esi
		add	eax, ebx
		push	eax
		push	edi
		call	sub_100287E0
		add	esp, 10h
		jmp	short loc_10027DA1
; ---------------------------------------------------------------------------

loc_10027D2C:				; CODE XREF: sub_10026DF0+ECCj
		test	bl, 20h
		jz	loc_10027ECE
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		mov	eax, [esp+250h+var_240]
		lea	ebx, [esp+250h+var_204]
		shr	eax, 6
		push	ebp
		shl	eax, 4
		push	edi
		add	eax, ebx
		push	eax
		push	esi
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027E74

loc_10027D83:				; CODE XREF: sub_10026DF0+561j
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		add	esp, 8

loc_10027DA1:				; CODE XREF: sub_10026DF0+F3Aj
		mov	ebx, eax
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		add	esp, 8

loc_10027DC9:				; CODE XREF: sub_10026DF0+551j
					; sub_10026DF0+EC4j
		mov	ebx, eax
		test	ebx, ebx
		js	loc_10027E74
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		add	esp, 8

loc_10027DF1:				; CODE XREF: sub_10026DF0+502j
					; sub_10026DF0+E25j
		mov	ebx, eax
		test	ebx, ebx
		js	loc_10027E74
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10027E74
		push	ebp
		push	edi
		call	sub_100289A0
		add	esp, 8

loc_10027E15:				; CODE XREF: sub_10026DF0+48Cj
					; sub_10026DF0+D5Bj
		mov	ebx, eax
		test	ebx, ebx
		js	short loc_10027E74

loc_10027E1B:				; CODE XREF: sub_10026DF0+21Bj
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10027E74
		push	ebp
		push	esi
		call	sub_100289A0
		add	esp, 8

loc_10027E35:				; CODE XREF: sub_10026DF0+3EAj
					; sub_10026DF0+C69j
		mov	ebx, eax
		test	ebx, ebx
		js	short loc_10027E74
		mov	eax, edi
		mov	edi, esi
		mov	esi, eax

loc_10027E41:				; CODE XREF: sub_10026DF0+26Bj
					; sub_10026DF0+321j ...
		mov	ecx, [esp+250h+arg_18]
		mov	eax, [esp+250h+arg_1C]
		sub	ecx, eax
		mov	[esp+250h+arg_18], ecx
		jns	loc_10026FE1

loc_10027E5E:				; CODE XREF: sub_10026DF0+1EBj
		push	ebp
		push	edi
		call	sub_100289A0
		push	[esp+258h+var_22C]
		mov	ebx, eax
		push	edi
		call	sub_10029580
		add	esp, 10h

loc_10027E74:				; CODE XREF: sub_10026DF0+8Bj
					; sub_10026DF0+A9j ...
		lea	eax, [esp+250h+var_23C]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+254h+var_214]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+258h+var_224]
		push	eax
		call	sub_10028F00
		mov	ebp, [esp+25Ch+arg_20]
		add	esp, 0Ch
		test	ebp, ebp
		jz	short loc_10027EB3
		lea	esi, [esp+250h+var_204]

loc_10027EA4:				; CODE XREF: sub_10026DF0+10C1j
		push	esi
		call	sub_10028F00
		add	esp, 4
		add	esi, 10h
		dec	ebp
		jnz	short loc_10027EA4

loc_10027EB3:				; CODE XREF: sub_10026DF0+10AEj
		mov	ecx, [esp+250h+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 240h
		retn
; ---------------------------------------------------------------------------

loc_10027ECE:				; CODE XREF: sub_10026DF0+223j
					; sub_10026DF0+50Aj ...
		call	ds:abort
sub_10026DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10027EE0	proc near		; CODE XREF: sub_10026B80+1FFp

var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 94h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+94h+var_4], eax
		mov	eax, [esp+94h+arg_0]
		mov	ecx, [esp+94h+arg_1C]
		mov	edx, [esp+94h+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+9Ch+arg_10]
		mov	[esp+9Ch+var_8C], eax
		mov	eax, [esp+9Ch+arg_C]
		push	esi
		mov	esi, [esp+0A0h+arg_20]
		mov	[esp+0A0h+var_5C], eax
		mov	eax, [esp+0A0h+arg_14]
		mov	[esp+0A0h+var_94], eax
		mov	eax, [esp+0A0h+arg_18]
		push	edi
		push	ecx
		sub	eax, ecx
		mov	[esp+0A8h+var_58], edx
		push	eax
		push	edx
		mov	[esp+0B0h+var_88], esi
		mov	[esp+0B0h+var_80], 0
		mov	[esp+0B0h+var_84], 0
		mov	[esp+0B0h+var_70], 0
		mov	[esp+0B0h+var_60], 0
		mov	[esp+0B0h+var_38], 0
		mov	[esp+0B0h+var_28], 0
		mov	[esp+0B0h+var_18], 0
		mov	[esp+0B0h+var_8], 0
		mov	[esp+0B0h+var_48], 0
		call	sub_10028B30
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10028691
		mov	eax, [esp+0A4h+var_94]
		mov	edi, ebx
		lea	eax, [eax+eax*2]
		add	eax, 2
		push	eax
		lea	eax, [esp+0A8h+var_7C]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		mov	ecx, [esp+0A4h+var_94]
		lea	eax, [ecx+1]
		lea	eax, [ecx+eax*2]
		push	eax
		lea	eax, [esp+0A8h+var_6C]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		cmp	esi, 2
		jbe	loc_100281A4
		mov	ecx, [esp+0A4h+var_94]
		lea	eax, [ecx+1]
		lea	eax, [ecx+eax*2]
		push	eax
		lea	eax, [esp+0A8h+var_44]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		mov	ecx, [esp+0A4h+var_94]
		lea	eax, [ecx+1]
		lea	eax, [ecx+eax*2]
		push	eax
		lea	eax, [esp+0A8h+var_34]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		mov	ecx, [esp+0A4h+var_94]
		lea	eax, [ecx+1]
		lea	eax, [ecx+eax*2]
		push	eax
		lea	eax, [esp+0A8h+var_24]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		mov	ecx, [esp+0A4h+var_94]
		lea	eax, [ecx+1]
		lea	eax, [ecx+eax*2]
		push	eax
		lea	eax, [esp+0A8h+var_14]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		lea	eax, [esp+0A4h+var_44]
		push	1
		push	eax
		call	sub_1002A0D0
		lea	eax, [esp+0ACh+var_44]
		push	eax
		push	ebp
		push	eax
		call	sub_10028A40
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		js	loc_10028691
		lea	eax, [esp+0A4h+var_34]
		push	eax
		push	[esp+0A8h+var_8C]
		call	sub_100290F0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		lea	eax, [esp+0A4h+var_24]
		push	eax
		push	[esp+0A8h+var_8C]
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		lea	eax, [esp+0A4h+var_24]
		push	ebp
		push	eax
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		lea	eax, [esp+0A8h+var_14]
		push	eax
		push	[esp+0ACh+var_8C]
		lea	eax, [esp+0B0h+var_24]
		push	eax
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10028691
		mov	ebx, [esp+0A4h+var_94]
		lea	eax, ds:1[ebx*4]
		imul	eax, esi
		push	eax		; size_t
		call	ds:malloc
		add	esp, 4
		mov	[esp+0A4h+var_80], eax
		test	eax, eax
		jnz	short loc_10028151
		lea	ebx, [eax-2]
		jmp	loc_10028691
; ---------------------------------------------------------------------------

loc_10028151:				; CODE XREF: sub_10027EE0+267j
		lea	ecx, [esi-1]
		add	ecx, eax
		mov	eax, esi
		neg	eax
		push	esi
		and	ecx, eax
		lea	eax, [esp+0A8h+var_44]
		push	ebx
		push	ecx
		push	eax
		mov	[esp+0B4h+var_84], ecx
		call	sub_10028730
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10028691
		cmp	edi, 4
		jnb	short loc_100281DC
		lea	eax, [esp+0A4h+var_7C]
		shl	edi, 4
		push	eax
		lea	eax, [esp+0A8h+var_44]
		add	eax, edi
		push	eax
		call	sub_100290F0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		mov	edi, esi
		jmp	short loc_100281DC
; ---------------------------------------------------------------------------

loc_100281A4:				; CODE XREF: sub_10027EE0+115j
		lea	eax, [esp+0A4h+var_7C]
		test	edi, edi
		jnz	short loc_100281C5
		push	1
		push	eax
		call	sub_1002A0D0
		lea	eax, [esp+0ACh+var_7C]
		push	eax
		push	ebp
		push	eax
		call	sub_10028A40
		add	esp, 14h
		jmp	short loc_100281D2
; ---------------------------------------------------------------------------

loc_100281C5:				; CODE XREF: sub_10027EE0+2CAj
		push	eax
		push	[esp+0A8h+var_8C]
		call	sub_100290F0
		add	esp, 8

loc_100281D2:				; CODE XREF: sub_10027EE0+2E3j
		mov	ebx, eax
		test	ebx, ebx
		js	loc_10028691

loc_100281DC:				; CODE XREF: sub_10027EE0+29Dj
					; sub_10027EE0+2C2j
		mov	eax, 4
		mov	[esp+0A4h+var_90], eax
		cmp	esi, eax
		jbe	loc_10028334
		mov	ecx, esi
		nop

loc_100281F0:				; CODE XREF: sub_10027EE0+44Ej
		mov	esi, eax
		and	esi, 3
		test	al, 1
		jz	loc_10028290
		mov	eax, esi
		lea	ebx, [esp+0A4h+var_44]
		shl	eax, 4
		add	eax, ebx
		push	ebp
		push	eax
		push	[esp+0ACh+var_8C]
		add	eax, 0FFFFFFF0h
		push	eax
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10028691
		mov	eax, [esp+0A4h+var_90]
		cmp	esi, 3
		jnz	loc_10028323
		push	[esp+0A4h+var_88]
		add	eax, 0FFFFFFFDh
		push	[esp+0A8h+var_94]
		add	eax, [esp+0ACh+var_84]
		push	eax
		lea	eax, [esp+0B0h+var_44]
		push	eax
		call	sub_10028730
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10028691
		mov	eax, [esp+0A4h+var_90]
		cmp	edi, eax
		ja	loc_10028323
		lea	eax, [esp+0A4h+var_7C]
		and	edi, esi
		push	eax
		shl	edi, 4
		lea	eax, [esp+0A8h+var_44]
		add	eax, edi
		push	eax
		call	sub_100290F0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		mov	edi, [esp+0A4h+var_88]
		jmp	loc_1002831F
; ---------------------------------------------------------------------------

loc_10028290:				; CODE XREF: sub_10027EE0+317j
		cmp	eax, 8
		jbe	short loc_100282B0
		push	ecx
		push	[esp+0A8h+var_94]
		shr	eax, 1
		add	eax, [esp+0ACh+var_84]
		push	eax
		lea	eax, [esp+0B0h+var_6C]
		push	eax
		call	sub_10028A80
		add	esp, 10h
		jmp	short loc_100282D0
; ---------------------------------------------------------------------------

loc_100282B0:				; CODE XREF: sub_10027EE0+3B3j
		shr	eax, 1
		lea	ebx, [esp+0A4h+var_44]
		and	eax, 3
		cmp	eax, esi
		jnz	short loc_100282E9
		lea	ecx, [esp+0A4h+var_6C]
		shl	eax, 4
		push	ecx
		add	eax, ebx
		push	eax
		call	sub_100290F0
		add	esp, 8

loc_100282D0:				; CODE XREF: sub_10027EE0+3CEj
		mov	ebx, eax
		test	ebx, ebx
		js	loc_10028691
		lea	eax, [esp+0A4h+var_44]
		shl	esi, 4
		add	esi, eax
		lea	eax, [esp+0A4h+var_6C]
		jmp	short loc_100282F7
; ---------------------------------------------------------------------------

loc_100282E9:				; CODE XREF: sub_10027EE0+3DBj
		shl	esi, 4
		add	esi, ebx
		shl	eax, 4
		lea	ebx, [esp+0A4h+var_44]
		add	eax, ebx

loc_100282F7:				; CODE XREF: sub_10027EE0+407j
		push	esi
		push	eax
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691

loc_1002831F:				; CODE XREF: sub_10027EE0+3ABj
		mov	eax, [esp+0A4h+var_90]

loc_10028323:				; CODE XREF: sub_10027EE0+34Bj
					; sub_10027EE0+37Ej
		mov	ecx, [esp+0A4h+var_88]
		inc	eax
		mov	[esp+0A4h+var_90], eax
		cmp	eax, ecx
		jb	loc_100281F0

loc_10028334:				; CODE XREF: sub_10027EE0+307j
		mov	ecx, [esp+0A4h+arg_1C]
		lea	esi, [esp+0A4h+var_7C]
		lea	edi, [esp+0A4h+var_6C]
		cmp	ecx, 1
		jz	short loc_10028371
		mov	ecx, [esp+0A4h+var_94]
		lea	eax, [ecx+1]
		lea	eax, [ecx+eax*2]
		push	eax
		lea	eax, [esp+0A8h+var_54]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		mov	ecx, [esp+0A4h+arg_1C]

loc_10028371:				; CODE XREF: sub_10027EE0+466j
		mov	edx, [esp+0A4h+arg_18]
		lea	eax, [ecx+ecx]
		sub	edx, eax
		mov	[esp+0A4h+arg_18], edx
		js	loc_1002867B
		lea	ebx, [ebx+0]

loc_10028390:				; CODE XREF: sub_10027EE0+795j
		push	ecx
		push	edx
		push	[esp+0ACh+var_58]
		call	sub_10028B30
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10028691
		mov	eax, [esp+0A4h+arg_1C]
		dec	eax
		mov	[esp+0A4h+var_90], ebx
		cmp	eax, 5		; switch 6 cases
		ja	loc_10028705	; jumptable 100283BD default case
		jmp	ds:off_1002870C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100283C4:				; CODE XREF: sub_10027EE0+4DDj
					; DATA XREF: .text:off_1002870Co
		test	ebx, ebx	; jumptable 100283BD case 0
		jnz	short loc_100283EB
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	edi
		call	sub_100289A0
		add	esp, 8
		jmp	loc_1002854F
; ---------------------------------------------------------------------------

loc_100283EB:				; CODE XREF: sub_10027EE0+4E6j
		test	bl, 1
		jz	loc_10028705	; jumptable 100283BD default case
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	esi
		push	[esp+0ACh+var_8C]
		jmp	loc_1002864F
; ---------------------------------------------------------------------------

loc_10028427:				; CODE XREF: sub_10027EE0+4DDj
					; DATA XREF: .text:off_1002870Co
		push	edi		; jumptable 100283BD case 5
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691

loc_10028477:				; CODE XREF: sub_10027EE0+4DDj
					; DATA XREF: .text:off_1002870Co
		push	edi		; jumptable 100283BD case 3
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	[esp+0A4h+var_88]
		mov	eax, [esp+0A8h+var_90]
		push	[esp+0A8h+var_94]
		add	eax, [esp+0ACh+var_84]
		push	eax
		lea	eax, [esp+0B0h+var_54]
		push	eax
		call	sub_10028A80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	edi
		lea	eax, [esp+0ACh+var_54]
		push	eax
		push	esi
		call	sub_100287E0
		add	esp, 10h

loc_1002854F:				; CODE XREF: sub_10027EE0+506j
		mov	ebx, eax
		test	ebx, ebx
		js	loc_10028691
		mov	eax, esi
		mov	esi, edi
		mov	edi, eax
		jmp	loc_1002865E
; ---------------------------------------------------------------------------

loc_10028564:				; CODE XREF: sub_10027EE0+4DDj
					; DATA XREF: .text:off_1002870Co
		push	edi		; jumptable 100283BD case 4
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	esi
		push	edi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	ebp
		push	esi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10028691
		push	edi
		push	esi
		call	sub_1002A1C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10028691
		push	ebp
		push	edi
		call	sub_100289A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10028691
		push	[esp+0A4h+var_88]
		mov	eax, [esp+0A8h+var_90]
		push	[esp+0A8h+var_94]
		add	eax, [esp+0ACh+var_84]
		push	eax
		lea	eax, [esp+0B0h+var_54]
		push	eax
		call	sub_10028A80
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_10028691
		push	ebp
		push	esi
		lea	eax, [esp+0ACh+var_54]
		push	eax

loc_1002864F:				; CODE XREF: sub_10027EE0+542j
		push	edi
		call	sub_100287E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_10028691

loc_1002865E:				; CODE XREF: sub_10027EE0+67Fj
		mov	edx, [esp+0A4h+arg_18]
		mov	ecx, [esp+0A4h+arg_1C]
		sub	edx, ecx
		mov	[esp+0A4h+arg_18], edx
		jns	loc_10028390

loc_1002867B:				; CODE XREF: sub_10027EE0+4A4j
		push	ebp
		push	esi
		call	sub_100289A0
		push	[esp+0ACh+var_5C]
		mov	ebx, eax
		push	esi
		call	sub_10029580
		add	esp, 10h

loc_10028691:				; CODE XREF: sub_10027EE0+C6j
					; sub_10027EE0+EAj ...
		lea	eax, [esp+0A4h+var_7C]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0A8h+var_6C]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0ACh+var_44]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B0h+var_34]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B4h+var_24]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0B8h+var_14]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+0BCh+var_54]
		push	eax
		call	sub_10028F00
		push	[esp+0C0h+var_80] ; void *
		call	ds:free
		mov	ecx, [esp+0C4h+var_4]
		add	esp, 20h
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 94h
		retn
; ---------------------------------------------------------------------------

loc_10028705:				; CODE XREF: sub_10027EE0+4D7j
					; sub_10027EE0+4DDj ...
		call	ds:abort	; jumptable 100283BD default case
sub_10027EE0	endp

; ---------------------------------------------------------------------------
		align 4
off_1002870C	dd offset loc_100283C4	; DATA XREF: sub_10027EE0+4DDr
		dd offset loc_10028705	; jump table for switch	statement
		dd offset loc_10028705
		dd offset loc_10028477
		dd offset loc_10028564
		dd offset loc_10028427
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028730	proc near		; CODE XREF: sub_10027EE0+288p
					; sub_10027EE0+366p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	eax, [esp+8+arg_8]
		mov	ecx, [esp+8+arg_4]
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_C]
		imul	eax, edi
		lea	ebp, [ecx+eax*4]
		xor	ecx, ecx
		add	ebx, 0Ch
		mov	[esp+18h+arg_C], ecx
		mov	[esp+18h+var_8], ebx
		lea	ebx, [ebx+0]

loc_10028760:				; CODE XREF: sub_10028730+94j
		mov	esi, [ebx-4]
		mov	edx, [ebx]
		lea	eax, [edx+esi*4]
		mov	[esp+18h+var_4], eax
		mov	eax, [esp+18h+arg_4]
		add	eax, ecx
		cmp	dword ptr [ebx-0Ch], 0
		jnz	short loc_100287D0
		cmp	esi, [esp+18h+arg_8]
		ja	short loc_100287D0
		mov	ecx, [esp+18h+var_4]
		xor	esi, esi
		sub	ecx, edx
		cmp	[esp+18h+var_4], edx
		sbb	ebx, ebx
		not	ebx
		and	ebx, ecx
		jbe	short loc_100287A0

loc_10028792:				; CODE XREF: sub_10028730+6Ej
		mov	cl, [edx]
		lea	edx, [edx+1]
		mov	[eax], cl
		inc	esi
		add	eax, edi
		cmp	esi, ebx
		jb	short loc_10028792

loc_100287A0:				; CODE XREF: sub_10028730+60j
		cmp	eax, ebp
		jnb	short loc_100287AD

loc_100287A4:				; CODE XREF: sub_10028730+7Bj
		mov	byte ptr [eax],	0
		add	eax, edi
		cmp	eax, ebp
		jb	short loc_100287A4

loc_100287AD:				; CODE XREF: sub_10028730+72j
		mov	ecx, [esp+18h+arg_C]
		mov	ebx, [esp+18h+var_8]
		inc	ecx
		add	ebx, 10h
		mov	[esp+18h+arg_C], ecx
		mov	[esp+18h+var_8], ebx
		cmp	ecx, 4
		jb	short loc_10028760
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100287D0:				; CODE XREF: sub_10028730+46j
					; sub_10028730+4Cj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 8
		retn
sub_10028730	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100287E0	proc near		; CODE XREF: sub_10026DF0+259p
					; sub_10026DF0+3E2p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		test	esi, esi
		jz	loc_10028988
		mov	ebp, [esp+14h+arg_4]
		test	ebp, ebp
		jz	loc_10028988
		mov	ebx, [esp+14h+arg_8]
		test	ebx, ebx
		jz	loc_10028988
		mov	eax, [esi+8]
		cmp	eax, [ebp+8]
		jnb	short loc_10028820
		mov	eax, ebp
		mov	ebp, esi
		mov	esi, eax
		mov	[esp+14h+arg_4], ebp
		mov	[esp+14h+arg_0], esi

loc_10028820:				; CODE XREF: sub_100287E0+30j
		mov	eax, [ebx+0Ch]
		push	edi
		mov	edi, [esp+18h+arg_C]
		mov	dword ptr [ebx+8], 1
		mov	dword ptr [eax], 0
		mov	eax, [edi+8]
		lea	eax, ds:1[eax*2]
		push	eax
		push	ebx
		mov	[esp+20h+var_4], eax
		call	sub_1002C8E0
		add	esp, 8
		test	eax, eax
		jnz	loc_10028980
		mov	ebp, [ebp+0Ch]
		push	dword ptr [ebx+0Ch]
		mov	eax, [esi+8]
		mov	[esp+1Ch+var_8], eax
		push	dword ptr [ebp+0]
		push	eax
		push	dword ptr [esi+0Ch]
		call	sub_1002D930
		mov	ecx, [esp+28h+var_8]
		add	ebp, 4
		mov	eax, [esp+28h+var_4]
		sub	eax, ecx
		lea	eax, ds:0FFFFFFFCh[eax*4]
		push	eax		; size_t
		mov	eax, [ebx+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		add	eax, 4
		push	eax		; void *
		call	memset
		mov	eax, [ebx+0Ch]
		push	eax
		mov	eax, [eax]
		imul	eax, [edi+10h]
		push	eax
		push	dword ptr [edi+8]
		push	dword ptr [edi+0Ch]
		call	sub_1002DA60
		mov	eax, [esp+44h+arg_4]
		mov	esi, 1
		add	esp, 2Ch
		mov	eax, [eax+8]
		mov	[esp+18h+var_4], eax
		cmp	eax, esi
		jbe	short loc_1002890B

loc_100288C1:				; CODE XREF: sub_100287E0+129j
		mov	ecx, [ebp+0]
		lea	ebp, [ebp+4]
		test	ecx, ecx
		jz	short loc_100288E6
		mov	eax, [ebx+0Ch]
		lea	eax, [eax+esi*4]
		push	eax
		mov	eax, [esp+1Ch+arg_0]
		push	ecx
		push	[esp+20h+var_8]
		push	dword ptr [eax+0Ch]
		call	sub_1002DA60
		add	esp, 10h

loc_100288E6:				; CODE XREF: sub_100287E0+E9j
		mov	eax, [ebx+0Ch]
		lea	ecx, [eax+esi*4]
		mov	eax, [edi+10h]
		imul	eax, [ecx]
		push	ecx
		push	eax
		push	dword ptr [edi+8]
		push	dword ptr [edi+0Ch]
		call	sub_1002DA60
		mov	eax, [esp+28h+var_4]
		inc	esi
		add	esp, 10h
		cmp	esi, eax
		jb	short loc_100288C1

loc_1002890B:				; CODE XREF: sub_100287E0+DFj
		mov	ebp, [edi+8]
		cmp	eax, ebp
		jnb	short loc_10028937
		cmp	esi, ebp
		jnb	short loc_10028937

loc_10028916:				; CODE XREF: sub_100287E0+155j
		mov	eax, [ebx+0Ch]
		lea	ecx, [eax+esi*4]
		mov	eax, [edi+10h]
		imul	eax, [ecx]
		push	ecx
		push	eax
		push	dword ptr [edi+8]
		push	dword ptr [edi+0Ch]
		call	sub_1002DA60
		inc	esi
		add	esp, 10h
		cmp	esi, ebp
		jb	short loc_10028916

loc_10028937:				; CODE XREF: sub_100287E0+130j
					; sub_100287E0+134j
		mov	ecx, [ebx+8]
		cmp	ecx, 1
		jbe	short loc_10028956
		mov	eax, [ebx+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_10028948:				; CODE XREF: sub_100287E0+174j
		cmp	dword ptr [eax], 0
		jnz	short loc_10028956
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_10028948

loc_10028956:				; CODE XREF: sub_100287E0+15Dj
					; sub_100287E0+16Bj
		mov	[ebx+8], ecx
		push	dword ptr [edi+8]
		push	ebx
		call	sub_1002CA80
		push	edi
		push	ebx
		call	sub_1002AFA0
		add	esp, 10h
		test	eax, eax
		js	short loc_1002897E
		push	edi
		push	ebx
		call	sub_1002CBE0
		add	esp, 8
		test	eax, eax
		js	short loc_10028980

loc_1002897E:				; CODE XREF: sub_100287E0+18Ej
		xor	eax, eax

loc_10028980:				; CODE XREF: sub_100287E0+6Fj
					; sub_100287E0+19Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10028988:				; CODE XREF: sub_100287E0+Cj
					; sub_100287E0+18j ...
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 8
		retn
sub_100287E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100289A0	proc near		; CODE XREF: sub_10026DF0+F7p
					; sub_10026DF0+154p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [esi+8]
		lea	eax, ds:1[eax*2]
		push	eax
		push	edi
		call	sub_1002C8E0
		add	esp, 8
		test	eax, eax
		js	short loc_10028A3C
		mov	ecx, [esi+8]
		push	ebx
		xor	ebx, ebx
		test	ecx, ecx
		jz	short loc_100289F2
		lea	esp, [esp+0]

loc_100289D0:				; CODE XREF: sub_100289A0+50j
		mov	eax, [edi+0Ch]
		lea	eax, [eax+ebx*4]
		push	eax
		mov	eax, [eax]
		imul	eax, [esi+10h]
		push	eax
		push	ecx
		push	dword ptr [esi+0Ch]
		call	sub_1002DA60
		mov	ecx, [esi+8]
		inc	ebx
		add	esp, 10h
		cmp	ebx, ecx
		jb	short loc_100289D0

loc_100289F2:				; CODE XREF: sub_100289A0+2Aj
		mov	ecx, [edi+8]
		pop	ebx
		cmp	ecx, 1
		jbe	short loc_10028A12
		mov	eax, [edi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_10028A04:				; CODE XREF: sub_100289A0+70j
		cmp	dword ptr [eax], 0
		jnz	short loc_10028A12
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_10028A04

loc_10028A12:				; CODE XREF: sub_100289A0+59j
					; sub_100289A0+67j
		mov	[edi+8], ecx
		push	dword ptr [esi+8]
		push	edi
		call	sub_1002CA80
		push	esi
		push	edi
		call	sub_1002AFA0
		add	esp, 10h
		test	eax, eax
		js	short loc_10028A3A
		push	esi
		push	edi
		call	sub_1002CBE0
		add	esp, 8
		test	eax, eax
		js	short loc_10028A3C

loc_10028A3A:				; CODE XREF: sub_100289A0+8Aj
		xor	eax, eax

loc_10028A3C:				; CODE XREF: sub_100289A0+20j
					; sub_100289A0+98j
		pop	edi
		pop	esi
		retn
sub_100289A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028A40	proc near		; CODE XREF: sub_10027EE0+1BCp
					; sub_10027EE0+2DBp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	esi
		push	[esp+8+arg_0]
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	short loc_10028A79
		push	edi
		mov	edi, [esp+8+arg_4]
		push	dword ptr [edi+8]
		push	esi
		call	sub_1002C4D0
		add	esp, 8
		test	eax, eax
		js	short loc_10028A78
		push	esi
		push	0
		push	edi
		push	esi
		call	sub_100291E0
		add	esp, 10h

loc_10028A78:				; CODE XREF: sub_10028A40+29j
		pop	edi

loc_10028A79:				; CODE XREF: sub_10028A40+14j
		pop	esi
		retn
sub_10028A40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028A80	proc near		; CODE XREF: sub_10027EE0+3C6p
					; sub_10027EE0+64Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		xor	esi, esi
		mov	edx, [edi+0Ch]
		mov	[edi+8], eax
		mov	dword ptr [edi], 0
		lea	ecx, [edx+eax*4]
		mov	eax, ecx
		sub	eax, edx
		cmp	ecx, edx
		sbb	ebx, ebx
		not	ebx
		and	ebx, eax
		jbe	short loc_10028AC3
		mov	ecx, [esp+0Ch+arg_4]
		push	ebp
		mov	ebp, [esp+10h+arg_C]

loc_10028AB3:				; CODE XREF: sub_10028A80+40j
		mov	al, [ecx]
		lea	edx, [edx+1]
		inc	esi
		mov	[edx-1], al
		add	ecx, ebp
		cmp	esi, ebx
		jb	short loc_10028AB3
		pop	ebp

loc_10028AC3:				; CODE XREF: sub_10028A80+28j
		mov	eax, [edi+8]
		cmp	eax, 1
		jbe	short loc_10028AE2
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4]
		add	ecx, 0FFFFFFFCh

loc_10028AD4:				; CODE XREF: sub_10028A80+60j
		cmp	dword ptr [ecx], 0
		jnz	short loc_10028AE2
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_10028AD4

loc_10028AE2:				; CODE XREF: sub_10028A80+49j
					; sub_10028A80+57j
		mov	[edi+8], eax
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10028A80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028AF0	proc near		; CODE XREF: sub_1002EC90+4DAp
					; sub_1002EC90+4FFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_10028AFC
		lea	eax, [ecx-4]
		retn
; ---------------------------------------------------------------------------

loc_10028AFC:				; CODE XREF: sub_10028AF0+6j
		mov	eax, [ecx+8]
		push	esi
		mov	esi, [esp+4+arg_4]
		dec	eax
		mov	edx, esi
		shr	edx, 5
		cmp	edx, eax
		jbe	short loc_10028B15
		mov	eax, 0FFFFFFFDh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028B15:				; CODE XREF: sub_10028AF0+1Cj
		mov	eax, [ecx+0Ch]
		and	esi, 1Fh
		mov	ecx, esi
		pop	esi
		mov	eax, [eax+edx*4]
		shr	eax, cl
		and	eax, 1
		retn
sub_10028AF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028B30	proc near		; CODE XREF: sub_10026DF0+1F7p
					; sub_10027EE0+BAp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_8]
		mov	ecx, ebp
		mov	eax, [eax+0Ch]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	esi, 1
		shr	edx, 5
		and	edi, 1Fh
		shl	esi, cl
		dec	esi
		lea	ebx, [eax+edx*4]
		cmp	ebp, 20h
		jb	short loc_10028B69
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10028B69:				; CODE XREF: sub_10028B30+2Dj
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [eax+8]
		mov	eax, [esp+10h+arg_4]
		add	eax, 1Fh
		shr	eax, 5
		cmp	eax, ecx
		jbe	short loc_10028B88
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFDh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10028B88:				; CODE XREF: sub_10028B30+4Cj
		lea	eax, [edi+ebp]
		cmp	eax, 20h
		jbe	short loc_10028BB4
		lea	eax, [edx+1]
		cmp	eax, ecx
		jnb	short loc_10028BB4
		mov	edx, [ebx+4]
		mov	ecx, 20h
		mov	eax, [ebx]
		sub	ecx, edi
		shl	edx, cl
		mov	ecx, edi
		shr	eax, cl
		or	edx, eax
		and	esi, edx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10028BB4:				; CODE XREF: sub_10028B30+5Ej
					; sub_10028B30+65j
		mov	edx, [ebx]
		mov	ecx, edi
		shr	edx, cl
		and	esi, edx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10028B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028BD0	proc near		; CODE XREF: sub_1001A810+184p
					; sub_1001A810+261p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10028BFE
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10028BFE
		push	esi
		push	eax
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10028C03
		push	[esp+4+arg_8]
		push	esi
		call	sub_1002C6C0
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028BFE:				; CODE XREF: sub_10028BD0+7j
					; sub_10028BD0+Fj
		mov	eax, 0FFFFFFFCh

loc_10028C03:				; CODE XREF: sub_10028BD0+1Dj
		pop	esi
		retn
sub_10028BD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028C10	proc near		; CODE XREF: sub_10017380+3A7p
					; sub_100178C0+2ABp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10028C40
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10028C40
		push	esi
		push	eax
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10028C45
		push	[esp+4+arg_8]
		push	esi
		call	sub_1002B360
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028C40:				; CODE XREF: sub_10028C10+7j
					; sub_10028C10+Fj
		mov	eax, 0FFFFFFFCh

loc_10028C45:				; CODE XREF: sub_10028C10+1Dj
		pop	esi
		retn
sub_10028C10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028C50	proc near		; CODE XREF: sub_10019410+5C4p
					; sub_10019410+610p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10028C5E
		lea	eax, [esi-4]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028C5E:				; CODE XREF: sub_10028C50+7j
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	edi
		mov	edi, ebx
		shr	edi, 5
		lea	eax, [edi+1]
		cmp	eax, [esi+8]
		jbe	short loc_10028C7F
		push	eax
		push	esi
		call	sub_1002C8E0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10028CC3

loc_10028C7F:				; CODE XREF: sub_10028C50+1Fj
		mov	eax, [esi+0Ch]
		and	ebx, 1Fh
		mov	edx, 1
		mov	ecx, ebx
		shl	edx, cl
		cmp	[esp+0Ch+arg_8], 0
		jz	short loc_10028C9A
		or	[eax+edi*4], edx
		jmp	short loc_10028C9F
; ---------------------------------------------------------------------------

loc_10028C9A:				; CODE XREF: sub_10028C50+43j
		not	edx
		and	[eax+edi*4], edx

loc_10028C9F:				; CODE XREF: sub_10028C50+48j
		mov	ecx, [esi+8]
		cmp	ecx, 1
		jbe	short loc_10028CBE
		mov	eax, [esi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_10028CB0:				; CODE XREF: sub_10028C50+6Cj
		cmp	dword ptr [eax], 0
		jnz	short loc_10028CBE
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_10028CB0

loc_10028CBE:				; CODE XREF: sub_10028C50+55j
					; sub_10028C50+63j
		mov	[esi+8], ecx
		xor	eax, eax

loc_10028CC3:				; CODE XREF: sub_10028C50+2Dj
		pop	edi
		pop	ebx
		pop	esi
		retn
sub_10028C50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028CD0	proc near		; CODE XREF: sub_10017380+279p
					; sub_10017380+285p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	edx, edx
		test	eax, eax
		jnz	short loc_10028CE0
		mov	eax, 0FFFFFFFCh
		retn
; ---------------------------------------------------------------------------

loc_10028CE0:				; CODE XREF: sub_10028CD0+8j
		mov	ecx, [eax+8]
		test	ecx, ecx
		jle	short loc_10028D07
		mov	eax, [eax+0Ch]
		push	esi
		lea	esi, [eax+ecx*4]
		mov	edi, edi

loc_10028CF0:				; CODE XREF: sub_10028CD0+2Dj
		mov	eax, [esi-4]
		lea	esi, [esi-4]
		dec	ecx
		test	eax, eax
		jnz	short loc_10028D01
		test	ecx, ecx
		jg	short loc_10028CF0
		jmp	short loc_10028D06
; ---------------------------------------------------------------------------

loc_10028D01:				; CODE XREF: sub_10028CD0+29j
					; sub_10028CD0+34j
		inc	edx
		shr	eax, 1
		jnz	short loc_10028D01

loc_10028D06:				; CODE XREF: sub_10028CD0+2Fj
		pop	esi

loc_10028D07:				; CODE XREF: sub_10028CD0+15j
		shl	ecx, 5
		add	edx, ecx
		jnz	short loc_10028D13
		mov	edx, 1

loc_10028D13:				; CODE XREF: sub_10028CD0+3Cj
		mov	eax, edx
		retn
sub_10028CD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028D20	proc near		; CODE XREF: sub_1001AC60+2EDp
					; sub_1001FBC0+157p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10028D2E
		mov	eax, 0FFFFFFFCh
		retn
; ---------------------------------------------------------------------------

loc_10028D2E:				; CODE XREF: sub_10028D20+6j
		mov	[esp+arg_0], eax
		jmp	sub_1002A9F0
sub_10028D20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028D40	proc near		; CODE XREF: sub_10017380+262p
					; sub_10017380+2A0p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		test	esi, esi
		jz	short loc_10028DA5
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	short loc_10028DA5
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	short loc_10028DA5
		mov	eax, [esi]
		cmp	eax, [edi]
		jnz	short loc_10028D6B
		push	ebx
		push	edi
		push	esi
		call	sub_1002AB80
		jmp	short loc_10028D85
; ---------------------------------------------------------------------------

loc_10028D6B:				; CODE XREF: sub_10028D40+1Fj
		push	edi
		push	esi
		call	sub_1002AFA0
		add	esp, 8
		push	ebx
		test	eax, eax
		js	short loc_10028D7E
		push	edi
		push	esi
		jmp	short loc_10028D80
; ---------------------------------------------------------------------------

loc_10028D7E:				; CODE XREF: sub_10028D40+38j
		push	esi
		push	edi

loc_10028D80:				; CODE XREF: sub_10028D40+3Cj
		call	sub_1002CC80

loc_10028D85:				; CODE XREF: sub_10028D40+29j
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10028D9F
		push	0
		push	ebx
		call	sub_1002B040
		add	esp, 8
		test	eax, eax
		jnz	short loc_10028D9F
		mov	[ebx], eax

loc_10028D9F:				; CODE XREF: sub_10028D40+4Cj
					; sub_10028D40+5Bj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10028DA5:				; CODE XREF: sub_10028D40+9j
					; sub_10028D40+11j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_10028D40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028DB0	proc near		; CODE XREF: sub_10016330+2C9p
					; sub_10019CF0+9Ap ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		sub	esp, 10h
		push	ebx
		test	eax, eax
		jz	loc_10028E99
		mov	ebx, [esp+14h+arg_8]
		test	ebx, ebx
		jz	loc_10028E99
		push	esi
		push	eax
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_10028E93
		lea	eax, [esp+18h+var_10]
		push	edi
		cmp	[esp+1Ch+var_10], esi
		jnz	short loc_10028DFC
		push	[esp+1Ch+arg_4]
		push	eax
		call	sub_1002ACD0
		jmp	short loc_10028E19
; ---------------------------------------------------------------------------

loc_10028DFC:				; CODE XREF: sub_10028DB0+3Ej
		mov	edi, [esp+1Ch+arg_4]
		push	edi
		push	eax
		call	sub_1002B040
		add	esp, 8
		test	eax, eax
		lea	eax, [esp+1Ch+var_10]
		js	short loc_10028E28
		push	edi
		push	eax
		call	sub_1002CD90

loc_10028E19:				; CODE XREF: sub_10028DB0+4Aj
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10028E83
		mov	edx, [esp+1Ch+var_4]
		jmp	short loc_10028E3E
; ---------------------------------------------------------------------------

loc_10028E28:				; CODE XREF: sub_10028DB0+60j
		push	eax
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10029E40
		mov	edx, [esp+24h+var_4]
		add	esp, 8
		sub	edi, [edx]
		mov	[edx], edi

loc_10028E3E:				; CODE XREF: sub_10028DB0+76j
		push	ebp
		mov	ebp, [esp+20h+var_8]
		cmp	ebp, 1
		ja	short loc_10028E54
		xor	eax, eax
		cmp	eax, [edx]
		sbb	edi, edi
		and	edi, [esp+20h+var_10]
		jmp	short loc_10028E58
; ---------------------------------------------------------------------------

loc_10028E54:				; CODE XREF: sub_10028DB0+96j
		mov	edi, [esp+20h+var_10]

loc_10028E58:				; CODE XREF: sub_10028DB0+A2j
		mov	eax, [ebx]
		mov	ecx, [esp+20h+var_C]
		mov	[esp+20h+var_10], eax
		mov	eax, [ebx+4]
		mov	[esp+20h+var_C], eax
		mov	eax, [ebx+8]
		mov	[esp+20h+var_8], eax
		mov	eax, [ebx+0Ch]
		mov	[ebx], edi
		mov	[ebx+4], ecx
		mov	[ebx+8], ebp
		mov	[esp+20h+var_4], eax
		mov	[ebx+0Ch], edx
		pop	ebp

loc_10028E83:				; CODE XREF: sub_10028DB0+70j
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	edi

loc_10028E93:				; CODE XREF: sub_10028DB0+2Fj
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10028E99:				; CODE XREF: sub_10028DB0+Aj
					; sub_10028DB0+16j
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 10h
		retn
sub_10028DB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028EB0	proc near		; CODE XREF: sub_10016B40+260p
					; sub_10017380+40Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10028EEF
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jz	short loc_10028EEF
		cmp	[esp+4+arg_8], 0
		jz	short loc_10028EEF
		mov	esi, [esp+4+arg_C]
		test	esi, esi
		jz	short loc_10028EEF
		push	esi
		push	ecx
		push	eax
		call	sub_10028D40
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10028EF4
		push	esi
		push	[esp+8+arg_8]
		push	esi
		call	sub_10029A70
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028EEF:				; CODE XREF: sub_10028EB0+7j
					; sub_10028EB0+Fj ...
		mov	eax, 0FFFFFFFCh

loc_10028EF4:				; CODE XREF: sub_10028EB0+2Dj
		pop	esi
		retn
sub_10028EB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028F00	proc near		; CODE XREF: sub_1000D890+179p
					; sub_1000D890+182p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10028F48
		mov	ecx, [esi+0Ch]
		test	ecx, ecx
		jz	short loc_10028F3A
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ecx		; void *
		call	memset
		mov	eax, [esi+0Ch]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10028F33
		push	eax		; void *
		call	ds:free
		add	esp, 4

loc_10028F33:				; CODE XREF: sub_10028F00+27j
		mov	dword ptr [esi+0Ch], 0

loc_10028F3A:				; CODE XREF: sub_10028F00+Ej
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+4], 0

loc_10028F48:				; CODE XREF: sub_10028F00+7j
		pop	esi
		retn
sub_10028F00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028F50	proc near		; CODE XREF: sub_10016040+169p
					; sub_10016330+221p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10028F8F
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_10028F8F
		push	esi
		mov	esi, [eax]
		cmp	esi, [ecx]
		jnz	short loc_10028F7F
		push	ecx
		push	eax
		call	sub_1002AFA0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10028F77

loc_10028F75:				; CODE XREF: sub_10028F50+29j
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028F77:				; CODE XREF: sub_10028F50+23j
		test	esi, esi
		jz	short loc_10028F75
		neg	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028F7F:				; CODE XREF: sub_10028F50+15j
		xor	eax, eax
		test	esi, esi
		pop	esi
		setz	al
		lea	eax, ds:0FFFFFFFFh[eax*2]
		retn
; ---------------------------------------------------------------------------

loc_10028F8F:				; CODE XREF: sub_10028F50+6j
					; sub_10028F50+Ej
		xor	eax, eax
		retn
sub_10028F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028FA0	proc near		; CODE XREF: sub_10016040+14Fp
					; sub_10016330+257p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10028FA9
		retn
; ---------------------------------------------------------------------------

loc_10028FA9:				; CODE XREF: sub_10028FA0+6j
		cmp	dword ptr [eax], 1
		jnz	short loc_10028FB2

loc_10028FAE:				; CODE XREF: sub_10028FA0+29j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10028FB2:				; CODE XREF: sub_10028FA0+Cj
		cmp	dword ptr [eax+8], 1
		jbe	short loc_10028FBE
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_10028FBE:				; CODE XREF: sub_10028FA0+16j
		mov	eax, [eax+0Ch]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		cmp	ecx, eax
		ja	short loc_10028FAE
		sbb	eax, eax
		neg	eax
		retn
sub_10028FA0	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10028FD0(size_t, int)
sub_10028FD0	proc near		; CODE XREF: sub_10031460+151p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		push	edi
		mov	edi, [esp+14h+arg_0]
		test	edi, edi
		jnz	short loc_10028FE3
		xor	eax, eax
		pop	edi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10028FE3:				; CODE XREF: sub_10028FD0+Aj
		mov	ecx, dword_1004E218
		push	ebx
		push	esi
		test	ecx, ecx
		jz	short loc_1002901B
		lea	eax, ds:0FFFFFFFFh[ecx*2]
		xor	edx, edx
		div	ecx
		push	4		; size_t
		mov	ebx, eax
		imul	ebx, ecx
		push	ebx		; size_t
		call	ds:calloc
		mov	esi, eax
		add	esp, 8
		mov	[esp+1Ch+var_4], esi
		test	esi, esi
		jz	short loc_1002901F
		mov	[esp+1Ch+var_C], ebx
		jmp	short loc_1002901F
; ---------------------------------------------------------------------------

loc_1002901B:				; CODE XREF: sub_10028FD0+1Dj
		mov	esi, [esp+1Ch+var_4]

loc_1002901F:				; CODE XREF: sub_10028FD0+43j
					; sub_10028FD0+49j
		mov	ecx, [esp+1Ch+var_C]
		push	ebp
		mov	ebp, [esp+20h+arg_4]
		mov	eax, ebp
		cdq
		mov	ebx, eax
		lea	eax, ds:0[ecx*4]
		push	eax		; size_t
		xor	ebx, edx
		mov	[esp+24h+arg_0], eax
		push	0		; int
		push	esi		; void *
		sub	ebx, edx
		call	memset
		xor	eax, eax
		mov	[esp+2Ch+var_8], 1
		add	esp, 0Ch
		mov	[esp+20h+var_10], eax
		test	ebp, ebp
		jz	short loc_10029067
		mov	[esi], ebx
		jns	short loc_10029067
		mov	eax, 1
		mov	[esp+20h+var_10], eax

loc_10029067:				; CODE XREF: sub_10028FD0+88j
					; sub_10028FD0+8Cj
		mov	ebp, [edi]
		cmp	ebp, eax
		jnz	short loc_10029089
		lea	eax, [esp+20h+var_10]
		push	eax
		push	edi
		call	sub_1002AFA0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_10029097
		test	ebp, ebp
		jz	short loc_10029097
		neg	ebx
		jmp	short loc_10029097
; ---------------------------------------------------------------------------

loc_10029089:				; CODE XREF: sub_10028FD0+9Bj
		xor	ebx, ebx
		test	ebp, ebp
		setz	bl
		lea	ebx, ds:0FFFFFFFFh[ebx*2]

loc_10029097:				; CODE XREF: sub_10028FD0+AFj
					; sub_10028FD0+B3j ...
		pop	ebp
		test	esi, esi
		jz	short loc_100290B2
		push	[esp+1Ch+arg_0]	; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		push	esi		; void *
		call	ds:free
		add	esp, 10h

loc_100290B2:				; CODE XREF: sub_10028FD0+CAj
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	edi
		add	esp, 10h
		retn
sub_10028FD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100290C0	proc near		; CODE XREF: sub_10017380+229p
					; sub_10017380+33Bp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 1
		jnz	short loc_100290CD
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100290CD:				; CODE XREF: sub_100290C0+7j
		cmp	dword ptr [eax+8], 1
		jnz	short loc_100290DE
		mov	eax, [eax+0Ch]
		cmp	dword ptr [eax], 0
		jnz	short loc_100290DE
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100290DE:				; CODE XREF: sub_100290C0+11j
					; sub_100290C0+19j
		mov	eax, 1
		retn
sub_100290C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100290F0	proc near		; CODE XREF: sub_1001AC60+648p
					; sub_1001B3B0+2A5p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	loc_100291CD
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	loc_100291CD
		cmp	edi, esi
		jnz	short loc_10029113
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029113:				; CODE XREF: sub_100290F0+1Cj
		mov	eax, [esi+4]
		push	ebx
		mov	ebx, [edi+8]
		push	ebp
		cmp	eax, ebx
		jb	short loc_10029159
		sub	eax, ebx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [esi+0Ch]
		push	0		; int
		lea	eax, [eax+ebx*4]
		push	eax		; void *
		call	memset
		mov	eax, [edi+8]
		shl	eax, 2
		push	eax		; size_t
		push	dword ptr [edi+0Ch] ; void *
		push	dword ptr [esi+0Ch] ; void *
		call	memcpy
		mov	eax, [edi+8]
		add	esp, 18h
		mov	[esi+8], eax
		mov	eax, [edi]
		mov	[esi], eax
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029159:				; CODE XREF: sub_100290F0+2Dj
		push	4		; size_t
		push	dword ptr [edi+4] ; size_t
		call	ds:calloc
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_10029175
		lea	eax, [ebp-2]
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029175:				; CODE XREF: sub_100290F0+7Bj
		lea	eax, ds:0[ebx*4]
		push	eax		; size_t
		push	dword ptr [edi+0Ch] ; void *
		push	ebp		; void *
		call	memcpy
		mov	ecx, [esi+0Ch]
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_100291B3
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ecx		; void *
		call	memset
		mov	eax, [esi+0Ch]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100291B3
		push	eax		; void *
		call	ds:free
		add	esp, 4

loc_100291B3:				; CODE XREF: sub_100290F0+9Ej
					; sub_100290F0+B7j
		mov	[esi+0Ch], ebp
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	eax, [edi+8]
		pop	ebp
		mov	[esi+8], eax
		mov	eax, [edi]
		pop	ebx
		mov	[esi], eax
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100291CD:				; CODE XREF: sub_100290F0+8j
					; sub_100290F0+14j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
sub_100290F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100291E0	proc near		; CODE XREF: sub_1001A3C0+B2p
					; sub_1001A550+104p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		push	esi
		mov	esi, [esp+40h+arg_0]
		push	edi
		test	esi, esi
		jz	loc_100293D1
		mov	edi, [esp+44h+arg_4]
		test	edi, edi
		jz	loc_100293D1
		mov	eax, [esi]
		mov	[esp+44h+var_38], eax
		mov	eax, [edi]
		mov	[esp+44h+var_34], eax
		cmp	eax, 1
		jz	short loc_10029227
		cmp	dword ptr [edi+8], 1
		jnz	short loc_10029227
		mov	eax, [edi+0Ch]
		cmp	dword ptr [eax], 0
		jnz	short loc_10029227
		pop	edi
		mov	eax, 0FFFFFFFDh
		pop	esi
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_10029227:				; CODE XREF: sub_100291E0+2Cj
					; sub_100291E0+32j ...
		push	ebx
		mov	ebx, [esp+48h+arg_C]
		mov	[esp+48h+var_4], 0
		mov	[esp+48h+var_14], 0
		mov	[esp+48h+var_24], 0
		push	ebp
		test	ebx, ebx
		jz	short loc_1002926B
		cmp	ebx, esi
		jz	short loc_1002926B
		cmp	ebx, edi
		jz	short loc_1002926B
		push	ebx
		push	esi
		call	sub_100290F0
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		js	loc_100293A6
		mov	[esp+4Ch+var_3C], ebx
		jmp	short loc_1002928B
; ---------------------------------------------------------------------------

loc_1002926B:				; CODE XREF: sub_100291E0+67j
					; sub_100291E0+6Bj ...
		lea	eax, [esp+4Ch+var_20]
		push	esi
		push	eax
		call	sub_100298D0
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		js	loc_100293A6
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_3C], eax

loc_1002928B:				; CODE XREF: sub_100291E0+89j
		mov	ebp, [esp+4Ch+arg_8]
		test	ebp, ebp
		jz	short loc_100292BE
		cmp	ebp, esi
		jz	short loc_100292BE
		cmp	ebp, edi
		jz	short loc_100292BE
		push	dword ptr [esi+8]
		push	ebp
		call	sub_1002C8E0
		add	esp, 8
		mov	[esp+4Ch+arg_0], eax
		test	eax, eax
		js	loc_100293A2
		push	ebp
		call	sub_1002A9C0
		add	esp, 4
		jmp	short loc_100292DE
; ---------------------------------------------------------------------------

loc_100292BE:				; CODE XREF: sub_100291E0+B1j
					; sub_100291E0+B5j ...
		push	dword ptr [esi+8]
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_10029940
		add	esp, 8
		mov	[esp+4Ch+arg_0], eax
		test	eax, eax
		js	loc_100293A2
		lea	ebp, [esp+4Ch+var_10]

loc_100292DE:				; CODE XREF: sub_100291E0+DCj
		push	edi
		push	esi
		call	sub_1002AFA0
		add	esp, 8
		test	eax, eax
		jg	short loc_10029314
		jz	short loc_100292FD
		push	ebp
		call	sub_1002A9C0
		mov	esi, [esp+50h+var_3C]
		add	esp, 4
		jmp	short loc_10029345
; ---------------------------------------------------------------------------

loc_100292FD:				; CODE XREF: sub_100291E0+10Cj
		push	1
		push	ebp
		call	sub_1002A0D0
		mov	esi, [esp+54h+var_3C]
		push	esi
		call	sub_1002A9C0
		add	esp, 0Ch
		jmp	short loc_10029345
; ---------------------------------------------------------------------------

loc_10029314:				; CODE XREF: sub_100291E0+10Aj
		lea	eax, [esp+4Ch+var_30]
		push	edi
		push	eax
		call	sub_100298D0
		add	esp, 8
		mov	[esp+4Ch+arg_0], eax
		test	eax, eax
		js	short loc_100293A2
		mov	esi, [esp+4Ch+var_3C]
		lea	eax, [esp+4Ch+var_30]
		push	ebp
		push	eax
		push	esi
		call	sub_1002B070
		add	esp, 0Ch
		mov	[esp+4Ch+arg_0], eax
		test	eax, eax
		js	short loc_100293A2

loc_10029345:				; CODE XREF: sub_100291E0+11Bj
					; sub_100291E0+132j
		mov	ecx, [esp+4Ch+var_38]
		xor	eax, eax
		cmp	ecx, [esp+4Ch+var_34]
		push	0
		setnz	al
		mov	[esi], ecx
		push	ebp
		mov	[ebp+0], eax
		call	sub_1002B040
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029369
		mov	[ebp+0], eax

loc_10029369:				; CODE XREF: sub_100291E0+184j
		push	0
		push	esi
		call	sub_1002B040
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002937A
		mov	[esi], eax

loc_1002937A:				; CODE XREF: sub_100291E0+196j
		mov	eax, [esp+4Ch+arg_8]
		test	eax, eax
		jz	short loc_10029390
		cmp	eax, ebp
		jz	short loc_10029390
		push	eax
		push	ebp
		call	sub_1002B590
		add	esp, 8

loc_10029390:				; CODE XREF: sub_100291E0+1A0j
					; sub_100291E0+1A4j
		test	ebx, ebx
		jz	short loc_100293A2
		cmp	ebx, esi
		jz	short loc_100293A2
		push	ebx
		push	esi
		call	sub_1002B590
		add	esp, 8

loc_100293A2:				; CODE XREF: sub_100291E0+CDj
					; sub_100291E0+F4j ...
		mov	ebp, [esp+4Ch+arg_0]

loc_100293A6:				; CODE XREF: sub_100291E0+7Fj
					; sub_100291E0+9Dj
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+54h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_100293D1:				; CODE XREF: sub_100291E0+Bj
					; sub_100291E0+17j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		add	esp, 3Ch
		retn
sub_100291E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100293E0	proc near		; CODE XREF: sub_10016330+1CAp
					; sub_1001FBC0+38Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_1002940E
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_1002940E
		push	esi
		push	eax
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029413
		push	1
		push	esi
		call	sub_1002B360
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002940E:				; CODE XREF: sub_100293E0+7j
					; sub_100293E0+Fj
		mov	eax, 0FFFFFFFCh

loc_10029413:				; CODE XREF: sub_100293E0+1Dj
		pop	esi
		retn
sub_100293E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029420	proc near		; CODE XREF: sub_10019CF0+FDp
					; sub_1001A810+23Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jnz	short loc_1002942E
		lea	eax, [ebx-4]
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002942E:				; CODE XREF: sub_10029420+7j
		push	esi
		mov	esi, [esp+8+arg_8]
		test	esi, esi
		jz	short loc_10029445
		push	esi
		push	ebx
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002947F

loc_10029445:				; CODE XREF: sub_10029420+15j
		push	edi
		mov	edi, [esp+0Ch+arg_C]
		test	edi, edi
		jz	short loc_1002945C
		push	edi
		push	ebx
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002947E

loc_1002945C:				; CODE XREF: sub_10029420+2Cj
		mov	ebx, [esp+0Ch+arg_4]
		test	esi, esi
		jz	short loc_1002946E
		push	ebx
		push	esi
		call	sub_1002B360
		add	esp, 8

loc_1002946E:				; CODE XREF: sub_10029420+42j
		test	edi, edi
		jz	short loc_1002947C
		push	ebx
		push	edi
		call	sub_1002C580
		add	esp, 8

loc_1002947C:				; CODE XREF: sub_10029420+50j
		xor	eax, eax

loc_1002947E:				; CODE XREF: sub_10029420+3Aj
		pop	edi

loc_1002947F:				; CODE XREF: sub_10029420+23j
		pop	esi
		pop	ebx
		retn
sub_10029420	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029490	proc near		; CODE XREF: sub_10029B10+44p
					; sub_10037540+82p ...

var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	esi
		mov	esi, [esp+14h+arg_0]
		test	esi, esi
		jnz	short loc_100294A4
		lea	eax, [esi-4]
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100294A4:				; CODE XREF: sub_10029490+Aj
		push	edi
		mov	edi, [esp+18h+arg_4]
		test	edi, edi
		jnz	short loc_100294B6
		lea	eax, [edi-3]
		pop	edi
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100294B6:				; CODE XREF: sub_10029490+1Bj
		push	ebx
		push	edi
		call	sub_1002C480
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	short loc_10029503
		mov	ecx, ebx
		mov	edi, 1
		shl	edi, cl
		mov	ecx, [esi+0Ch]
		dec	edi
		push	ebp
		mov	ebp, [esp+20h+arg_8]
		and	edi, [ecx]
		test	ebp, ebp
		jz	short loc_100294EF
		push	ebp
		push	esi
		call	sub_100290F0
		push	ebx
		push	ebp
		call	sub_1002B360
		add	esp, 10h

loc_100294EF:				; CODE XREF: sub_10029490+4Cj
		mov	eax, [esp+20h+arg_C]
		pop	ebp
		test	eax, eax
		jz	short loc_100294FA
		mov	[eax], edi

loc_100294FA:				; CODE XREF: sub_10029490+66j
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10029503:				; CODE XREF: sub_10029490+34j
		lea	eax, [esp+1Ch+var_10]
		push	esi
		push	eax
		call	sub_100298D0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029573
		lea	eax, [esp+1Ch+arg_0]
		push	eax
		lea	eax, [esp+20h+var_10]
		push	edi
		push	eax
		call	sub_1002B400
		mov	edx, [esp+28h+arg_8]
		add	esp, 0Ch
		cmp	[esp+1Ch+var_8], 1
		mov	esi, eax
		ja	short loc_10029544
		mov	ecx, [esp+1Ch+var_4]
		cmp	dword ptr [ecx], 0
		ja	short loc_10029544
		mov	dword ptr [edx], 0

loc_10029544:				; CODE XREF: sub_10029490+A3j
					; sub_10029490+ACj
		mov	ecx, [esp+1Ch+arg_C]
		test	ecx, ecx
		jz	short loc_10029552
		mov	eax, [esp+1Ch+arg_0]
		mov	[ecx], eax

loc_10029552:				; CODE XREF: sub_10029490+BAj
		test	edx, edx
		jz	short loc_10029564
		push	edx
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_1002B590
		add	esp, 8

loc_10029564:				; CODE XREF: sub_10029490+C4j
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi

loc_10029573:				; CODE XREF: sub_10029490+83j
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 10h
		retn
sub_10029490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029580	proc near		; CODE XREF: sub_1001D6E0+1C1p
					; sub_1001D9A0+2BBp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jz	short loc_100295C5
		push	ebp
		mov	ebp, [esp+8+arg_4]
		test	ebp, ebp
		jz	short loc_100295C4
		mov	eax, [ebp+0]
		mov	ecx, [ebx]
		mov	edx, [ebx+4]
		push	esi
		mov	esi, [ebx+8]
		push	edi
		mov	edi, [ebx+0Ch]
		mov	[ebx], eax
		mov	eax, [ebp+4]
		mov	[ebx+4], eax
		mov	eax, [ebp+8]
		mov	[ebx+8], eax
		mov	eax, [ebp+0Ch]
		mov	[ebx+0Ch], eax
		mov	[ebp+0], ecx
		mov	[ebp+4], edx
		mov	[ebp+8], esi
		mov	[ebp+0Ch], edi
		pop	edi
		pop	esi

loc_100295C4:				; CODE XREF: sub_10029580+10j
		pop	ebp

loc_100295C5:				; CODE XREF: sub_10029580+7j
		pop	ebx
		retn
sub_10029580	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100295D0	proc near		; CODE XREF: sub_1001AC60+58Cp
					; sub_1001DD50+319p ...

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 30h
		push	ebx
		push	esi
		mov	esi, [esp+38h+arg_0]
		xor	ebx, ebx
		push	edi
		test	esi, esi
		jz	loc_1002989C
		mov	edi, [esp+3Ch+arg_4]
		test	edi, edi
		jz	loc_1002989C
		mov	ecx, [esp+3Ch+arg_8]
		test	ecx, ecx
		jz	loc_1002989C
		cmp	dword ptr [esi], 1
		push	ebp
		jz	short loc_1002964B
		mov	ebp, [esi+8]
		cmp	ebp, 1
		jnz	short loc_1002964B
		mov	eax, [esi+0Ch]
		cmp	[eax], ebx
		jnz	short loc_1002962D
		push	edi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10029629
		pop	ebp
		pop	edi
		pop	esi
		lea	eax, [ebx-3]
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_10029629:				; CODE XREF: sub_100295D0+4Cj
		mov	ecx, [esp+40h+arg_8]

loc_1002962D:				; CODE XREF: sub_100295D0+3Fj
		cmp	ebp, 1
		jnz	short loc_1002964B
		mov	eax, [esi+0Ch]
		cmp	[eax], ebx
		jnz	short loc_1002964B
		push	ecx
		push	edi
		call	sub_100290F0
		add	esp, 8
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002964B:				; CODE XREF: sub_100295D0+30j
					; sub_100295D0+38j ...
		push	edi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1002966E
		mov	eax, [esp+40h+arg_8]
		push	eax
		push	esi
		call	sub_100290F0
		add	esp, 8
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002966E:				; CODE XREF: sub_100295D0+86j
		mov	ecx, dword_1004E218
		test	ecx, ecx
		jz	loc_1002988F
		lea	eax, ds:0FFFFFFFFh[ecx*2]
		xor	edx, edx
		div	ecx
		push	4		; size_t
		mov	ebp, eax
		imul	ebp, ecx
		push	ebp		; size_t
		call	ds:calloc
		add	esp, 8
		mov	[esp+40h+var_24], eax
		test	eax, eax
		jnz	short loc_100296AD
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFEh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_100296AD:				; CODE XREF: sub_100295D0+CEj
		lea	eax, [esp+40h+var_10]
		mov	[esp+40h+var_30], ebx
		push	esi
		push	eax
		mov	[esp+48h+var_28], 1
		mov	[esp+48h+var_2C], ebp
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_10029878
		lea	eax, [esp+40h+var_20]
		push	edi
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002986B
		lea	eax, [esp+40h+var_10]
		mov	[esp+40h+var_10], ebx
		xor	edi, edi
		push	eax
		mov	[esp+44h+var_20], edi
		call	sub_10029A30
		add	esp, 4
		test	eax, eax
		jz	short loc_1002974F
		jmp	short loc_10029710
; ---------------------------------------------------------------------------
		align 10h

loc_10029710:				; CODE XREF: sub_100295D0+138j
					; sub_100295D0+179j
		lea	eax, [esp+40h+var_20]
		push	eax
		call	sub_10029A30
		add	esp, 4
		test	eax, eax
		jz	short loc_1002974B
		lea	eax, [esp+40h+var_10]
		push	1
		push	eax
		call	sub_1002B360
		lea	eax, [esp+48h+var_20]
		push	1
		push	eax
		call	sub_1002B360
		lea	eax, [esp+50h+var_10]
		inc	ebx
		push	eax
		call	sub_10029A30
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10029710

loc_1002974B:				; CODE XREF: sub_100295D0+14Fj
		mov	edi, [esp+40h+var_20]

loc_1002974F:				; CODE XREF: sub_100295D0+136j
		mov	eax, [esp+40h+var_4]
		mov	eax, [eax]
		and	eax, 1
		lea	eax, [esp+40h+var_30]
		push	eax
		jz	short loc_10029781
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002985E
		test	edi, edi
		setz	al
		mov	[esp+40h+var_30], eax
		jmp	short loc_100297A0
; ---------------------------------------------------------------------------

loc_10029781:				; CODE XREF: sub_100295D0+18Dj
		lea	eax, [esp+44h+var_10]
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002985E
		jmp	short loc_100297A0
; ---------------------------------------------------------------------------
		align 10h

loc_100297A0:				; CODE XREF: sub_100295D0+1AFj
					; sub_100295D0+1C8j ...
		mov	eax, [esp+40h+var_24]
		mov	eax, [eax]
		and	eax, 1
		lea	eax, [esp+40h+var_30]
		jnz	short loc_100297BC
		push	1
		push	eax
		call	sub_1002B360
		add	esp, 8
		jmp	short loc_100297A0
; ---------------------------------------------------------------------------

loc_100297BC:				; CODE XREF: sub_100295D0+1DDj
		push	eax
		call	sub_100290C0
		add	esp, 4
		cmp	eax, 1
		jnz	short loc_100297E4
		lea	eax, [esp+40h+var_10]
		push	eax
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1002985E
		jmp	short loc_10029807
; ---------------------------------------------------------------------------

loc_100297E4:				; CODE XREF: sub_100295D0+1F8j
		lea	eax, [esp+40h+var_20]
		push	eax
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1002985E
		cmp	[esp+40h+var_30], eax
		setz	al
		mov	[esp+40h+var_20], eax

loc_10029807:				; CODE XREF: sub_100295D0+212j
		lea	eax, [esp+40h+var_30]
		push	eax
		lea	eax, [esp+44h+var_20]
		push	eax
		lea	eax, [esp+48h+var_10]
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002985E
		push	eax
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_1002B040
		add	esp, 8
		test	eax, eax
		jnz	loc_100297A0
		lea	eax, [esp+40h+var_20]
		push	ebx
		push	eax
		call	sub_1002A9F0
		mov	eax, [esp+48h+arg_8]
		push	eax
		lea	eax, [esp+4Ch+var_20]
		push	eax
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_10029B70
		add	esp, 14h
		mov	esi, eax

loc_1002985E:				; CODE XREF: sub_100295D0+1A0j
					; sub_100295D0+1C2j ...
		lea	eax, [esp+40h+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_1002986B:				; CODE XREF: sub_100295D0+117j
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_10029878:				; CODE XREF: sub_100295D0+FFj
		lea	eax, [esp+40h+var_30]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002988F:				; CODE XREF: sub_100295D0+A6j
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002989C:				; CODE XREF: sub_100295D0+Ej
					; sub_100295D0+1Aj ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 30h
		retn
sub_100295D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100298B0	proc near		; CODE XREF: sub_1000DD70+2Ap
					; sub_1000DD70+3Ap ...

arg_0		= dword	ptr  4

		push	dword_1004E218
		push	[esp+4+arg_0]
		call	sub_10029940
		add	esp, 8
		retn
sub_100298B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100298D0	proc near		; CODE XREF: sub_10026DF0+B5p
					; sub_10028DB0+23p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_1002992B
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_1002992B
		cmp	edi, esi
		jz	short loc_10029926
		push	4		; size_t
		push	dword ptr [esi+4] ; size_t
		call	ds:calloc
		mov	ecx, eax
		add	esp, 8
		mov	[edi+0Ch], ecx
		test	ecx, ecx
		jnz	short loc_10029903
		pop	edi
		lea	eax, [ecx-2]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029903:				; CODE XREF: sub_100298D0+2Bj
		mov	eax, [esi+8]
		shl	eax, 2
		push	eax		; size_t
		push	dword ptr [esi+0Ch] ; void *
		push	ecx		; void *
		call	memcpy
		mov	eax, [esi+8]
		add	esp, 0Ch
		mov	[edi+8], eax
		mov	eax, [esi+4]
		mov	[edi+4], eax
		mov	eax, [esi]
		mov	[edi], eax

loc_10029926:				; CODE XREF: sub_100298D0+14j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002992B:				; CODE XREF: sub_100298D0+8j
					; sub_100298D0+10j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
sub_100298D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029940	proc near		; CODE XREF: sub_10026830+8Ap
					; sub_10026B80+9Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10029994
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_10029994
		mov	ecx, dword_1004E218
		dec	eax
		add	eax, ecx
		xor	edx, edx
		div	ecx
		push	edi
		mov	edi, eax
		imul	edi, ecx
		push	4		; size_t
		push	edi		; size_t
		call	ds:calloc
		add	esp, 8
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_1002997F
		pop	edi
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002997F:				; CODE XREF: sub_10029940+35j
		mov	[esi+4], edi
		xor	eax, eax
		pop	edi
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+8], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029994:				; CODE XREF: sub_10029940+7j
					; sub_10029940+Fj
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
sub_10029940	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100299A0	proc near		; CODE XREF: sub_10017380+3BEp
					; sub_100178C0+24Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		test	esi, esi
		jz	short loc_10029A22
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	short loc_10029A22
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	short loc_10029A22
		cmp	dword ptr [esi], 1
		jz	short loc_100299CE
		cmp	dword ptr [esi+8], 1
		jnz	short loc_100299CE
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax], 0
		jz	short loc_10029A19

loc_100299CE:				; CODE XREF: sub_100299A0+1Ej
					; sub_100299A0+24j
		push	edi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jz	short loc_10029A19
		mov	eax, [edi+0Ch]
		mov	eax, [eax]
		and	eax, 1
		jz	short loc_100299F4
		push	ebx
		push	edi
		push	esi
		call	sub_1002C2B0
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100299F4:				; CODE XREF: sub_100299A0+43j
		push	esi
		call	sub_10029A30
		add	esp, 4
		test	eax, eax
		jz	short loc_10029A0A
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFBh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029A0A:				; CODE XREF: sub_100299A0+5Fj
		push	ebx
		push	edi
		push	esi
		call	sub_1002BE00
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029A19:				; CODE XREF: sub_100299A0+2Cj
					; sub_100299A0+39j
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029A22:				; CODE XREF: sub_100299A0+9j
					; sub_100299A0+11j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_100299A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029A30	proc near		; CODE XREF: sub_100295D0+12Cp
					; sub_100295D0+145p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10029A40
		xor	ecx, ecx
		test	ecx, ecx
		setz	al
		retn
; ---------------------------------------------------------------------------

loc_10029A40:				; CODE XREF: sub_10029A30+6j
		mov	eax, [eax+0Ch]
		mov	ecx, [eax]
		xor	eax, eax
		and	ecx, 1
		test	ecx, ecx
		setz	al
		retn
sub_10029A30	endp


; =============== S U B	R O U T	I N E =======================================


sub_10029A50	proc near		; CODE XREF: sub_10026B80+9p
					; sub_10031460+418p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10029A59
		retn
; ---------------------------------------------------------------------------

loc_10029A59:				; CODE XREF: sub_10029A50+6j
		mov	eax, [eax+0Ch]
		mov	eax, [eax]
		and	eax, 1
		retn
sub_10029A50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029A70	proc near		; CODE XREF: sub_10016810+1AAp
					; sub_10017380+324p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		test	ebx, ebx
		jz	loc_10029B00
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	short loc_10029B00
		mov	esi, [esp+0Ch+arg_8]
		test	esi, esi
		jz	short loc_10029B00
		cmp	dword ptr [edi], 1
		jnz	short loc_10029A9D
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029A9D:				; CODE XREF: sub_10029A70+22j
		push	edi
		push	ebx
		call	sub_1002AFA0
		add	esp, 8
		push	esi
		test	eax, eax
		jle	short loc_10029AD4
		push	0
		push	edi
		push	ebx
		call	sub_100291E0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10029B05
		cmp	dword ptr [esi], 1
		jnz	short loc_10029AFA

loc_10029AC1:				; CODE XREF: sub_10029A70+80j
		push	esi
		push	edi
		push	esi
		call	sub_10028D40
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10029AFA
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029AD4:				; CODE XREF: sub_10029A70+3Aj
		jns	short loc_10029AF2
		push	ebx
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029B05
		push	ebx
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jns	short loc_10029AFA
		jmp	short loc_10029AC1
; ---------------------------------------------------------------------------

loc_10029AF2:				; CODE XREF: sub_10029A70:loc_10029AD4j
		call	sub_1002A9C0
		add	esp, 4

loc_10029AFA:				; CODE XREF: sub_10029A70+4Fj
					; sub_10029A70+5Ej ...
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029B00:				; CODE XREF: sub_10029A70+9j
					; sub_10029A70+15j ...
		mov	eax, 0FFFFFFFCh

loc_10029B05:				; CODE XREF: sub_10029A70+4Aj
					; sub_10029A70+71j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10029A70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029B10	proc near		; CODE XREF: sub_10026380+21p
					; sub_10026AC0+32p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	esi
		test	edx, edx
		jz	short loc_10029B68
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	short loc_10029B68
		cmp	dword ptr [edx+8], 1
		mov	ecx, [esp+4+arg_4]
		ja	short loc_10029B4B
		mov	eax, [edx+0Ch]
		mov	eax, [eax]
		cmp	eax, ecx
		jb	short loc_10029B36
		ja	short loc_10029B4B

loc_10029B36:				; CODE XREF: sub_10029B10+22j
		cmp	dword ptr [edx], 1
		jnz	short loc_10029B43
		sub	ecx, eax
		xor	eax, eax
		mov	[esi], ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029B43:				; CODE XREF: sub_10029B10+29j
		mov	ecx, eax
		xor	eax, eax
		mov	[esi], ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029B4B:				; CODE XREF: sub_10029B10+19j
					; sub_10029B10+24j
		lea	eax, [esp+4+arg_0]
		push	eax
		push	0
		push	ecx
		push	edx
		call	sub_10029490
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10029B6D
		mov	ecx, [esp+4+arg_0]
		mov	[esi], ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029B68:				; CODE XREF: sub_10029B10+7j
					; sub_10029B10+Fj
		mov	eax, 0FFFFFFFCh

loc_10029B6D:				; CODE XREF: sub_10029B10+4Ej
		pop	esi
		retn
sub_10029B10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029B70	proc near		; CODE XREF: sub_10017130+100p
					; sub_1001AC60+254p ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 20h
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+2Ch+arg_0]
		test	edi, edi
		jz	loc_10029D26
		mov	ebx, [esp+2Ch+arg_4]
		test	ebx, ebx
		jz	loc_10029D26
		mov	esi, [esp+2Ch+arg_8]
		test	esi, esi
		jz	loc_10029D26
		cmp	edi, esi
		jnz	short loc_10029BC6
		lea	eax, [esp+2Ch+var_10]
		push	edi
		push	eax
		call	sub_100298D0
		add	esp, 8
		test	eax, eax
		jnz	loc_10029D2B
		cmp	edi, ebx
		jnz	short loc_10029BC0
		lea	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+arg_4], ebx

loc_10029BC0:				; CODE XREF: sub_10029B70+46j
		lea	edi, [esp+2Ch+var_10]
		jmp	short loc_10029BF2
; ---------------------------------------------------------------------------

loc_10029BC6:				; CODE XREF: sub_10029B70+2Cj
		cmp	ebx, esi
		jnz	short loc_10029BEA
		lea	eax, [esp+2Ch+var_10]
		push	ebx
		push	eax
		call	sub_100298D0
		add	esp, 8
		test	eax, eax
		jnz	loc_10029D2B
		lea	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+arg_4], ebx
		jmp	short loc_10029BF2
; ---------------------------------------------------------------------------

loc_10029BEA:				; CODE XREF: sub_10029B70+58j
		mov	[esp+2Ch+var_4], 0

loc_10029BF2:				; CODE XREF: sub_10029B70+54j
					; sub_10029B70+78j
		mov	eax, [edi+8]
		cmp	eax, [ebx+8]
		jnb	short loc_10029C04
		mov	eax, ebx
		mov	ebx, edi
		mov	[esp+2Ch+arg_4], ebx
		mov	edi, eax

loc_10029C04:				; CODE XREF: sub_10029B70+88j
		mov	eax, [esi+0Ch]
		mov	dword ptr [esi+8], 1
		mov	dword ptr [eax], 0
		mov	eax, [edi+8]
		add	eax, [ebx+8]
		push	eax
		push	esi
		call	sub_1002C8E0
		add	esp, 8
		mov	[esp+2Ch+var_14], eax
		test	eax, eax
		jnz	loc_10029D0E
		push	ebp
		mov	ebp, [ebx+0Ch]
		push	dword ptr [esi+0Ch]
		push	dword ptr [ebp+0]
		push	dword ptr [edi+8]
		push	dword ptr [edi+0Ch]
		call	sub_1002D930
		mov	eax, [ebx+8]
		add	ebp, 4
		mov	ecx, [edi+8]
		add	esp, 10h
		mov	[esp+30h+var_20], ebp
		mov	ebp, 1
		mov	[esp+30h+var_1C], ecx
		mov	[esp+30h+var_18], eax
		cmp	eax, ebp
		jbe	short loc_10029CB4
		mov	ebx, [esp+30h+var_20]
		lea	ecx, ds:4[ecx*4]
		mov	[esp+30h+arg_0], ecx

loc_10029C75:				; CODE XREF: sub_10029B70+13Ej
		mov	edx, [ebx]
		lea	ebx, [ebx+4]
		mov	eax, [esi+0Ch]
		test	edx, edx
		jz	short loc_10029C9B
		lea	eax, [eax+ebp*4]
		push	eax
		push	edx
		push	[esp+38h+var_1C]
		push	dword ptr [edi+0Ch]
		call	sub_1002D9C0
		mov	ecx, [esp+40h+arg_0]
		add	esp, 10h
		jmp	short loc_10029CA2
; ---------------------------------------------------------------------------

loc_10029C9B:				; CODE XREF: sub_10029B70+10Fj
		mov	dword ptr [ecx+eax], 0

loc_10029CA2:				; CODE XREF: sub_10029B70+129j
		inc	ebp
		add	ecx, 4
		mov	[esp+30h+arg_0], ecx
		cmp	ebp, [esp+30h+var_18]
		jb	short loc_10029C75
		mov	ebx, [esp+30h+arg_4]

loc_10029CB4:				; CODE XREF: sub_10029B70+F4j
		mov	ecx, [esi+8]
		pop	ebp
		cmp	ecx, 1
		jbe	short loc_10029CD4
		mov	eax, [esi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_10029CC6:				; CODE XREF: sub_10029B70+162j
		cmp	dword ptr [eax], 0
		jnz	short loc_10029CD4
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_10029CC6

loc_10029CD4:				; CODE XREF: sub_10029B70+14Bj
					; sub_10029B70+159j
		mov	[esi+8], ecx
		mov	eax, [edi]
		cmp	eax, [ebx]
		jz	short loc_10029D08
		cmp	ecx, 1
		ja	short loc_10029CEA
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax], 0
		jbe	short loc_10029D08

loc_10029CEA:				; CODE XREF: sub_10029B70+170j
		lea	eax, [esp+2Ch+var_10]
		mov	dword ptr [esi], 1
		push	eax
		call	sub_10028F00
		mov	eax, [esp+30h+var_14]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10029D08:				; CODE XREF: sub_10029B70+16Bj
					; sub_10029B70+178j
		mov	dword ptr [esi], 0

loc_10029D0E:				; CODE XREF: sub_10029B70+BAj
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_10028F00
		mov	eax, [esp+30h+var_14]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10029D26:				; CODE XREF: sub_10029B70+Cj
					; sub_10029B70+18j ...
		mov	eax, 0FFFFFFFCh

loc_10029D2B:				; CODE XREF: sub_10029B70+3Ej
					; sub_10029B70+6Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
sub_10029B70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029D40	proc near		; CODE XREF: sub_1001A810+2D7p
					; sub_100264B0+24Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10029D6A
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10029D6A
		push	esi
		push	eax
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029D6F
		push	esi
		call	sub_1002C5F0
		add	esp, 4
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029D6A:				; CODE XREF: sub_10029D40+7j
					; sub_10029D40+Fj
		mov	eax, 0FFFFFFFCh

loc_10029D6F:				; CODE XREF: sub_10029D40+1Dj
		pop	esi
		retn
sub_10029D40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029D80	proc near		; CODE XREF: sub_10035DB0+5Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10029DDA
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	short loc_10029DDA
		cmp	[esp+4+arg_4], 0
		jnz	short loc_10029DBD
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029DBD:				; CODE XREF: sub_10029D80+16j
		push	esi
		push	eax
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029DDF
		push	[esp+4+arg_4]
		push	esi
		call	sub_1002C7E0
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029DDA:				; CODE XREF: sub_10029D80+7j
					; sub_10029D80+Fj
		mov	eax, 0FFFFFFFCh

loc_10029DDF:				; CODE XREF: sub_10029D80+49j
		pop	esi
		retn
sub_10029D80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029DF0	proc near		; CODE XREF: sub_10017380+3E4p
					; sub_10017380+430p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10029E2F
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jz	short loc_10029E2F
		cmp	[esp+4+arg_8], 0
		jz	short loc_10029E2F
		mov	esi, [esp+4+arg_C]
		test	esi, esi
		jz	short loc_10029E2F
		push	esi
		push	ecx
		push	eax
		call	sub_10029B70
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10029E34
		push	esi
		push	[esp+8+arg_8]
		push	esi
		call	sub_10029A70
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029E2F:				; CODE XREF: sub_10029DF0+7j
					; sub_10029DF0+Fj ...
		mov	eax, 0FFFFFFFCh

loc_10029E34:				; CODE XREF: sub_10029DF0+2Dj
		pop	esi
		retn
sub_10029DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029E40	proc near		; CODE XREF: sub_10028DB0+7Ep
					; sub_1002A600+98p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10029E85
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10029E85
		push	esi
		push	eax
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029E8A
		cmp	dword ptr [esi+8], 1
		ja	short loc_10029E77
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax], 0
		ja	short loc_10029E77
		mov	dword ptr [esi], 0
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029E77:				; CODE XREF: sub_10029E40+23j
					; sub_10029E40+2Bj
		xor	eax, eax
		cmp	dword ptr [esi], 1
		setnz	al
		mov	[esi], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029E85:				; CODE XREF: sub_10029E40+7j
					; sub_10029E40+Fj
		mov	eax, 0FFFFFFFCh

loc_10029E8A:				; CODE XREF: sub_10029E40+1Dj
		pop	esi
		retn
sub_10029E40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029E90	proc near		; CODE XREF: sub_1002E5B0+B8p
					; sub_1002E5B0+D4p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		push	esi
		xor	esi, esi
		mov	[esp+10h+var_4], esi
		push	edi
		test	ebx, ebx
		jz	loc_10029F7E
		mov	edi, [esp+14h+arg_4]
		test	edi, edi
		jz	loc_10029F7E
		mov	ebp, [esp+14h+arg_8]
		lea	eax, [ebp-2]
		cmp	eax, 3Eh
		ja	loc_10029F7E
		push	ebx
		call	sub_1002A9C0
		add	esp, 4
		cmp	byte ptr [edi],	0
		jz	short loc_10029EF5

loc_10029ED1:				; CODE XREF: sub_10029E90+63j
		movzx	eax, byte ptr [esi+edi]
		push	ebp
		push	eax
		call	sub_1002CE10
		add	esp, 8
		test	eax, eax
		jns	short loc_10029EF5
		mov	al, [esi+edi]
		cmp	al, 2Dh
		jz	short loc_10029EF5
		cmp	al, 2Bh
		jz	short loc_10029EF5
		inc	esi
		cmp	byte ptr [esi+edi], 0
		jnz	short loc_10029ED1

loc_10029EF5:				; CODE XREF: sub_10029E90+3Fj
					; sub_10029E90+51j ...
		mov	al, [esi+edi]
		cmp	al, 2Dh
		jnz	short loc_10029F06
		mov	[esp+14h+var_4], 1
		jmp	short loc_10029F12
; ---------------------------------------------------------------------------

loc_10029F06:				; CODE XREF: sub_10029E90+6Aj
		cmp	al, 2Bh
		jnz	short loc_10029F13
		mov	[esp+14h+var_4], 0

loc_10029F12:				; CODE XREF: sub_10029E90+74j
		inc	esi

loc_10029F13:				; CODE XREF: sub_10029E90+78j
		movzx	eax, byte ptr [edi+esi]
		add	edi, esi
		push	ebp
		push	eax
		call	sub_1002CE10
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10029F61
		lea	esp, [esp+0]

loc_10029F30:				; CODE XREF: sub_10029E90+CFj
		push	ebp
		push	ebx
		call	sub_1002C7E0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029F83
		push	esi
		push	ebx
		call	sub_1002ACD0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029F83
		movzx	eax, byte ptr [edi+1]
		inc	edi
		push	ebp
		push	eax
		call	sub_1002CE10
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jns	short loc_10029F30

loc_10029F61:				; CODE XREF: sub_10029E90+97j
		push	0
		push	ebx
		call	sub_1002B040
		add	esp, 8
		neg	eax
		sbb	eax, eax
		and	eax, [esp+14h+var_4]
		pop	edi
		pop	esi
		mov	[ebx], eax
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10029F7E:				; CODE XREF: sub_10029E90+11j
					; sub_10029E90+1Dj ...
		mov	eax, 0FFFFFFFCh

loc_10029F83:				; CODE XREF: sub_10029E90+ACj
					; sub_10029E90+BAj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10029E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029F90	proc near		; CODE XREF: sub_1000DD70+76p
					; sub_1000DF00+FCp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		test	esi, esi
		jz	loc_1002A0C5
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	loc_1002A0C5
		mov	ebp, [esp+0Ch+arg_8]
		test	ebp, ebp
		jz	loc_1002A0C5
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		mov	edx, ebp
		mov	dword ptr [esi+8], 1
		add	esp, 0Ch
		mov	dword ptr [esi], 0
		and	edx, 3
		jz	short loc_10029FF9
		xor	ecx, ecx
		test	edx, edx
		jle	short loc_10029FF4

loc_10029FE5:				; CODE XREF: sub_10029F90+62j
		movzx	eax, byte ptr [edi]
		dec	edx
		shl	ecx, 8
		inc	edi
		or	ecx, eax
		dec	ebp
		test	edx, edx
		jg	short loc_10029FE5

loc_10029FF4:				; CODE XREF: sub_10029F90+53j
		mov	eax, [esi+0Ch]
		mov	[eax], ecx

loc_10029FF9:				; CODE XREF: sub_10029F90+4Dj
		push	ebx
		test	ebp, ebp
		jz	loc_1002A0BE
		lea	ecx, [edi+2]

loc_1002A005:				; CODE XREF: sub_10029F90+129j
		movzx	edi, byte ptr [ecx-2]
		movzx	eax, byte ptr [ecx-1]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [ecx]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [ecx+1]
		add	ecx, 4
		shl	edi, 8
		push	esi
		or	edi, eax
		mov	[esp+14h+arg_0], ecx
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1002A041
		test	edi, edi
		jz	loc_1002A0B0
		jmp	short loc_1002A0AB
; ---------------------------------------------------------------------------

loc_1002A041:				; CODE XREF: sub_10029F90+A5j
		mov	ecx, [esi+8]
		cmp	ecx, 1
		jnz	short loc_1002A051
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax], 0
		jz	short loc_1002A0AB

loc_1002A051:				; CODE XREF: sub_10029F90+B7j
		lea	ebx, [ecx+1]
		cmp	ebx, ecx
		jbe	short loc_1002A08C
		cmp	ebx, [esi+4]
		jbe	short loc_1002A070
		push	ebx
		push	esi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002A089
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1002A070:				; CODE XREF: sub_10029F90+CBj
		mov	eax, ebx
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [esi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002A089:				; CODE XREF: sub_10029F90+D9j
		mov	[esi+8], ebx

loc_1002A08C:				; CODE XREF: sub_10029F90+C6j
		mov	edx, [esi+8]
		sub	edx, 2
		js	short loc_1002A0A2

loc_1002A094:				; CODE XREF: sub_10029F90+110j
		mov	eax, [esi+0Ch]
		lea	ecx, [eax+edx*4]
		dec	edx
		mov	eax, [ecx]
		mov	[ecx+4], eax
		jns	short loc_1002A094

loc_1002A0A2:				; CODE XREF: sub_10029F90+102j
		mov	eax, [esi+0Ch]
		mov	dword ptr [eax], 0

loc_1002A0AB:				; CODE XREF: sub_10029F90+AFj
					; sub_10029F90+BFj
		mov	eax, [esi+0Ch]
		mov	[eax], edi

loc_1002A0B0:				; CODE XREF: sub_10029F90+A9j
		sub	ebp, 4
		jz	short loc_1002A0BE
		mov	ecx, [esp+10h+arg_0]
		jmp	loc_1002A005
; ---------------------------------------------------------------------------

loc_1002A0BE:				; CODE XREF: sub_10029F90+6Cj
					; sub_10029F90+123j
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1002A0C5:				; CODE XREF: sub_10029F90+9j
					; sub_10029F90+15j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebp
		retn
sub_10029F90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A0D0	proc near		; CODE XREF: sub_10016330+280p
					; sub_10017130+ECp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1002A103
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		mov	ecx, [esi+0Ch]
		add	esp, 0Ch
		mov	eax, [esp+4+arg_4]
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		mov	[ecx], eax

loc_1002A103:				; CODE XREF: sub_1002A0D0+7j
		pop	esi
		retn
sub_1002A0D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A110	proc near		; CODE XREF: sub_10018010+C8p
					; sub_100307B0+1ECp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		mov	eax, ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		cdq
		mov	edi, eax
		xor	edi, edx
		sub	edi, edx
		test	esi, esi
		jnz	short loc_1002A12F
		pop	edi
		lea	eax, [esi-4]
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A12F:				; CODE XREF: sub_1002A110+16j
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		test	ebx, ebx
		jz	short loc_1002A161
		mov	eax, [esi+0Ch]
		mov	[eax], edi
		jns	short loc_1002A161
		mov	dword ptr [esi], 1

loc_1002A161:				; CODE XREF: sub_1002A110+42j
					; sub_1002A110+49j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1002A110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A170	proc near		; CODE XREF: sub_10019CF0+BEp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1002A180
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002A180:				; CODE XREF: sub_1002A170+7j
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		mov	ecx, [esp+10h+arg_4]
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		test	ecx, ecx
		jz	short loc_1002A1AE
		mov	eax, [esi+0Ch]
		mov	[eax], ecx

loc_1002A1AE:				; CODE XREF: sub_1002A170+37j
		xor	eax, eax
		pop	esi
		retn
sub_1002A170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A1C0	proc near		; CODE XREF: sub_1001FBC0+3ABp
					; sub_1001FBC0+402p ...

var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		push	esi
		test	ebp, ebp
		jz	loc_1002A32E
		mov	esi, [esp+1Ch+arg_4]
		test	esi, esi
		jz	loc_1002A32E
		cmp	ebp, esi
		jnz	short loc_1002A207
		lea	eax, [esp+1Ch+var_10]
		push	ebp
		push	eax
		call	sub_100298D0
		mov	ecx, eax
		add	esp, 8
		mov	[esp+1Ch+var_14], ecx
		test	ecx, ecx
		jnz	loc_1002A333
		lea	ebp, [esp+1Ch+var_10]
		mov	[esp+1Ch+arg_0], ebp
		jmp	short loc_1002A217
; ---------------------------------------------------------------------------

loc_1002A207:				; CODE XREF: sub_1002A1C0+1Fj
		mov	[esp+1Ch+var_4], 0
		mov	[esp+1Ch+var_14], 0

loc_1002A217:				; CODE XREF: sub_1002A1C0+45j
		push	edi
		mov	edi, [ebp+8]
		add	edi, edi
		cmp	edi, [esi+4]
		jbe	short loc_1002A241
		push	edi
		push	esi
		mov	dword ptr [esi+8], 1
		call	sub_1002BA50
		mov	ecx, eax
		add	esp, 8
		mov	[esp+20h+var_14], ecx
		test	ecx, ecx
		js	loc_1002A301

loc_1002A241:				; CODE XREF: sub_1002A1C0+60j
		mov	eax, [esi+0Ch]
		mov	[esi+8], edi
		push	ebx
		mov	dword ptr [eax], 0
		mov	edi, [ebp+8]
		mov	ebx, [ebp+0Ch]
		dec	edi
		mov	eax, [esi+0Ch]
		test	edi, edi
		jle	short loc_1002A2BB
		mov	ecx, [ebx]
		add	eax, 4
		push	eax
		push	ecx
		add	ebx, 4
		push	edi
		push	ebx
		call	sub_1002D930
		dec	edi
		add	esp, 10h
		test	edi, edi
		jle	short loc_1002A2A2
		mov	ebp, 0Ch
		lea	ebx, [ebx+0]

loc_1002A280:				; CODE XREF: sub_1002A1C0+DCj
		mov	eax, [esi+0Ch]
		mov	ecx, [ebx]
		add	eax, ebp
		push	eax
		push	ecx
		add	ebx, 4
		push	edi
		push	ebx
		call	sub_1002D9C0
		dec	edi
		add	esp, 10h
		add	ebp, 8
		test	edi, edi
		jg	short loc_1002A280
		mov	ebp, [esp+24h+arg_0]

loc_1002A2A2:				; CODE XREF: sub_1002A1C0+B3j
		mov	ecx, [esi+8]
		mov	eax, [esi+0Ch]
		push	esi
		mov	dword ptr [eax+ecx*4-4], 0
		call	sub_1002C5F0
		add	esp, 4
		jmp	short loc_1002A2C2
; ---------------------------------------------------------------------------

loc_1002A2BB:				; CODE XREF: sub_1002A1C0+9Aj
		mov	dword ptr [eax+4], 0

loc_1002A2C2:				; CODE XREF: sub_1002A1C0+F9j
		push	dword ptr [esi+0Ch]
		push	dword ptr [ebp+8]
		push	dword ptr [ebp+0Ch]
		call	sub_1002DB30
		mov	ecx, [esi+8]
		add	esp, 0Ch
		mov	dword ptr [esi], 0
		pop	ebx
		cmp	ecx, 1
		jbe	short loc_1002A2FE
		mov	eax, [esi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh
		jmp	short loc_1002A2F0
; ---------------------------------------------------------------------------
		align 10h

loc_1002A2F0:				; CODE XREF: sub_1002A1C0+12Bj
					; sub_1002A1C0+13Cj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002A2FE
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002A2F0

loc_1002A2FE:				; CODE XREF: sub_1002A1C0+120j
					; sub_1002A1C0+133j
		mov	[esi+8], ecx

loc_1002A301:				; CODE XREF: sub_1002A1C0+7Bj
		mov	esi, [esp+20h+var_4]
		pop	edi
		test	esi, esi
		jz	short loc_1002A324
		mov	eax, [esp+1Ch+var_C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		push	esi		; void *
		call	ds:free
		add	esp, 10h

loc_1002A324:				; CODE XREF: sub_1002A1C0+148j
		mov	eax, [esp+1Ch+var_14]
		pop	esi
		pop	ebp
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1002A32E:				; CODE XREF: sub_1002A1C0+Bj
					; sub_1002A1C0+17j
		mov	eax, 0FFFFFFFCh

loc_1002A333:				; CODE XREF: sub_1002A1C0+37j
		pop	esi
		pop	ebp
		add	esp, 14h
		retn
sub_1002A1C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A340	proc near		; CODE XREF: sub_10026830+1A7p
					; .text:1002FFC0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_1002A376
		cmp	[esp+4+arg_4], 0
		jz	short loc_1002A376
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	short loc_1002A376
		push	esi
		push	eax
		call	sub_1002A1C0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A37B
		push	esi
		push	[esp+8+arg_4]
		push	esi
		call	sub_10029A70
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002A376:				; CODE XREF: sub_1002A340+7j
					; sub_1002A340+Ej ...
		mov	eax, 0FFFFFFFCh

loc_1002A37B:				; CODE XREF: sub_1002A340+24j
		pop	esi
		retn
sub_1002A340	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A380	proc near		; CODE XREF: sub_1001FBC0+3EAp

var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 20h
		push	ebx
		push	edi
		mov	edi, [esp+28h+arg_0]
		test	edi, edi
		jz	loc_1002A52E
		mov	ebx, [esp+28h+arg_4]
		test	ebx, ebx
		jz	loc_1002A52E
		cmp	dword ptr [edi], 1
		jnz	short loc_1002A3AD
		pop	edi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002A3AD:				; CODE XREF: sub_1002A380+20j
		mov	ecx, [edi+8]
		cmp	ecx, 1
		ja	short loc_1002A3D1
		mov	eax, [edi+0Ch]
		mov	eax, [eax]
		cmp	eax, 1
		jb	short loc_1002A3C1
		ja	short loc_1002A3D1

loc_1002A3C1:				; CODE XREF: sub_1002A380+3Dj
		push	ebx
		push	edi
		call	sub_100290F0
		add	esp, 8
		pop	edi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002A3D1:				; CODE XREF: sub_1002A380+33j
					; sub_1002A380+3Fj
		push	ecx
		lea	eax, [esp+2Ch+var_20]
		push	eax
		call	sub_10029940
		add	esp, 8
		test	eax, eax
		jnz	loc_1002A533
		push	esi
		lea	eax, [esp+2Ch+var_10]
		push	edi
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002A518
		mov	eax, [esp+2Ch+var_8]
		cmp	eax, 1
		jbe	short loc_1002A419
		shr	eax, 1
		push	eax
		lea	eax, [esp+30h+var_10]
		push	eax
		call	sub_1002CA80
		add	esp, 8

loc_1002A419:				; CODE XREF: sub_1002A380+87j
		lea	eax, [esp+2Ch+var_20]
		push	eax
		lea	eax, [esp+30h+var_10]
		push	eax
		call	sub_100290F0
		lea	eax, [esp+34h+var_20]
		push	eax
		push	eax
		call	sub_1002A1C0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	loc_1002A50B

loc_1002A440:				; CODE XREF: sub_1002A380+168j
		lea	eax, [esp+2Ch+var_20]
		push	eax
		push	edi
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002A50B
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_1002C5F0
		push	esi
		lea	eax, [esp+34h+var_20]
		push	eax
		lea	eax, [esp+38h+var_10]
		push	eax
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1002A50B
		lea	eax, [esp+2Ch+var_10]
		push	1
		push	eax
		call	sub_1002B360
		add	esp, 8
		cmp	[esp+2Ch+var_20], 1
		jz	short loc_1002A4AA
		cmp	[esp+2Ch+var_18], 1
		jnz	short loc_1002A4AA
		mov	eax, [esp+2Ch+var_14]
		cmp	[eax], esi
		jz	short loc_1002A4F0

loc_1002A4AA:				; CODE XREF: sub_1002A380+119j
					; sub_1002A380+120j
		lea	eax, [esp+2Ch+var_10]
		push	eax
		lea	eax, [esp+30h+var_20]
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002A50B
		lea	eax, [esp+2Ch+var_20]
		push	eax
		lea	eax, [esp+30h+var_10]
		push	eax
		call	sub_100290F0
		lea	eax, [esp+34h+var_20]
		push	eax
		push	eax
		call	sub_1002A1C0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_1002A440
		jmp	short loc_1002A50B
; ---------------------------------------------------------------------------

loc_1002A4F0:				; CODE XREF: sub_1002A380+128j
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	1
		push	eax
		call	sub_1002A600
		lea	eax, [esp+38h+var_10]
		push	ebx
		push	eax
		call	sub_1002B590
		add	esp, 14h

loc_1002A50B:				; CODE XREF: sub_1002A380+BAj
					; sub_1002A380+D3j ...
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_1002A518:				; CODE XREF: sub_1002A380+7Aj
		lea	eax, [esp+2Ch+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002A52E:				; CODE XREF: sub_1002A380+Bj
					; sub_1002A380+17j
		mov	eax, 0FFFFFFFCh

loc_1002A533:				; CODE XREF: sub_1002A380+61j
		pop	edi
		pop	ebx
		add	esp, 20h
		retn
sub_1002A380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A540	proc near		; CODE XREF: sub_10016330+23Cp
					; sub_10018010+E5p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		test	edi, edi
		jz	loc_1002A5F2
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	loc_1002A5F2
		mov	esi, [esp+0Ch+arg_8]
		test	esi, esi
		jz	loc_1002A5F2
		cmp	edi, ebx
		jnz	short loc_1002A57A
		push	esi
		call	sub_1002A9C0
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A57A:				; CODE XREF: sub_1002A540+29j
		mov	eax, [edi]
		cmp	eax, [ebx]
		jz	short loc_1002A593
		push	esi
		push	ebx
		push	edi
		call	sub_1002AB80
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_1002A5EC
		jmp	short loc_1002A5DB
; ---------------------------------------------------------------------------

loc_1002A593:				; CODE XREF: sub_1002A540+3Ej
		push	ebx
		push	edi
		call	sub_1002AFA0
		add	esp, 8
		push	esi
		test	eax, eax
		jnz	short loc_1002A5AE
		call	sub_1002A9C0
		add	esp, 4
		xor	ebx, ebx
		jmp	short loc_1002A5DB
; ---------------------------------------------------------------------------

loc_1002A5AE:				; CODE XREF: sub_1002A540+60j
		jle	short loc_1002A5C2
		push	ebx
		push	edi
		call	sub_1002CC80
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_1002A5EC
		jmp	short loc_1002A5DB
; ---------------------------------------------------------------------------

loc_1002A5C2:				; CODE XREF: sub_1002A540:loc_1002A5AEj
		push	edi
		push	ebx
		call	sub_1002CC80
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_1002A5EC
		xor	eax, eax
		cmp	[edi], eax
		setz	al
		mov	[esi], eax

loc_1002A5DB:				; CODE XREF: sub_1002A540+51j
					; sub_1002A540+6Cj ...
		push	0
		push	esi
		call	sub_1002B040
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A5EC
		mov	[esi], eax

loc_1002A5EC:				; CODE XREF: sub_1002A540+4Fj
					; sub_1002A540+7Ej ...
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A5F2:				; CODE XREF: sub_1002A540+9j
					; sub_1002A540+15j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_1002A540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A600	proc near		; CODE XREF: sub_10016040+136p
					; sub_10016330+1AEp ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		sub	esp, 10h
		push	ebx
		test	eax, eax
		jz	loc_1002A700
		mov	ebx, [esp+14h+arg_8]
		test	ebx, ebx
		jz	loc_1002A700
		push	esi
		push	eax
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002A6FA
		cmp	[esp+18h+var_10], 1
		lea	eax, [esp+18h+var_10]
		push	edi
		jnz	short loc_1002A662
		push	[esp+1Ch+arg_4]
		push	eax
		call	sub_1002ACD0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002A6EA
		mov	edx, [esp+1Ch+var_4]
		mov	edi, [esp+1Ch+var_10]
		jmp	short loc_1002A6AD
; ---------------------------------------------------------------------------

loc_1002A662:				; CODE XREF: sub_1002A600+3Fj
		mov	edi, [esp+1Ch+arg_4]
		push	edi
		push	eax
		call	sub_1002B040
		add	esp, 8
		test	eax, eax
		lea	eax, [esp+1Ch+var_10]
		js	short loc_1002A692
		push	edi
		push	eax
		call	sub_1002CD90
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1002A6EA
		mov	edx, [esp+1Ch+var_4]
		mov	edi, [esp+1Ch+var_10]
		jmp	short loc_1002A6AD
; ---------------------------------------------------------------------------

loc_1002A692:				; CODE XREF: sub_1002A600+76j
		push	eax
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10029E40
		mov	edx, [esp+24h+var_4]
		add	esp, 8
		sub	edi, [edx]
		mov	[edx], edi
		mov	edi, 1

loc_1002A6AD:				; CODE XREF: sub_1002A600+60j
					; sub_1002A600+90j
		push	ebp
		mov	ebp, [esp+20h+var_8]
		cmp	ebp, 1
		ja	short loc_1002A6BF
		xor	eax, eax
		cmp	eax, [edx]
		sbb	eax, eax
		and	edi, eax

loc_1002A6BF:				; CODE XREF: sub_1002A600+B5j
		mov	eax, [ebx]
		mov	ecx, [esp+20h+var_C]
		mov	[esp+20h+var_10], eax
		mov	eax, [ebx+4]
		mov	[esp+20h+var_C], eax
		mov	eax, [ebx+8]
		mov	[esp+20h+var_8], eax
		mov	eax, [ebx+0Ch]
		mov	[ebx], edi
		mov	[ebx+4], ecx
		mov	[ebx+8], ebp
		mov	[esp+20h+var_4], eax
		mov	[ebx+0Ch], edx
		pop	ebp

loc_1002A6EA:				; CODE XREF: sub_1002A600+52j
					; sub_1002A600+86j
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	edi

loc_1002A6FA:				; CODE XREF: sub_1002A600+2Fj
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002A700:				; CODE XREF: sub_1002A600+Aj
					; sub_1002A600+16j
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 10h
		retn
sub_1002A600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A710	proc near		; CODE XREF: sub_1001F1E0+265p
					; sub_100253A0+513p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_1002A74F
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jz	short loc_1002A74F
		cmp	[esp+4+arg_8], 0
		jz	short loc_1002A74F
		mov	esi, [esp+4+arg_C]
		test	esi, esi
		jz	short loc_1002A74F
		push	esi
		push	ecx
		push	eax
		call	sub_1002A540
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002A754
		push	esi
		push	[esp+8+arg_8]
		push	esi
		call	sub_10029A70
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002A74F:				; CODE XREF: sub_1002A710+7j
					; sub_1002A710+Fj ...
		mov	eax, 0FFFFFFFCh

loc_1002A754:				; CODE XREF: sub_1002A710+2Dj
		pop	esi
		retn
sub_1002A710	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A760	proc near		; CODE XREF: sub_10017380+478p
					; sub_10017380+49Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		xor	esi, esi
		test	ebp, ebp
		jz	loc_1002A816
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	loc_1002A816
		cmp	[ebp+0], esi
		jnz	loc_1002A816
		push	ebp
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		js	loc_1002A816
		mov	ecx, [esp+0Ch+arg_8]
		cmp	eax, ecx
		ja	short loc_1002A816
		cmp	ecx, eax
		jbe	short loc_1002A7BB
		sub	ecx, eax
		xor	eax, eax
		mov	edx, ecx
		push	edi
		shr	ecx, 2
		mov	edi, ebx
		rep stosd
		mov	ecx, edx
		and	ecx, 3
		add	ebx, edx
		rep stosb
		pop	edi

loc_1002A7BB:				; CODE XREF: sub_1002A760+41j
		mov	edx, [ebp+8]
		dec	edx
		js	short loc_1002A80D

loc_1002A7C1:				; CODE XREF: sub_1002A760+A7j
		mov	eax, [ebp+0Ch]
		mov	eax, [eax+edx*4]
		mov	ecx, eax
		shr	ecx, 18h
		test	esi, esi
		jnz	short loc_1002A7D4
		test	cl, cl
		jz	short loc_1002A7D8

loc_1002A7D4:				; CODE XREF: sub_1002A760+6Ej
		mov	[esi+ebx], cl
		inc	esi

loc_1002A7D8:				; CODE XREF: sub_1002A760+72j
		mov	ecx, eax
		shr	ecx, 10h
		test	esi, esi
		jnz	short loc_1002A7E5
		test	cl, cl
		jz	short loc_1002A7E9

loc_1002A7E5:				; CODE XREF: sub_1002A760+7Fj
		mov	[esi+ebx], cl
		inc	esi

loc_1002A7E9:				; CODE XREF: sub_1002A760+83j
		mov	ecx, eax
		shr	ecx, 8
		test	esi, esi
		jnz	short loc_1002A7F6
		test	cl, cl
		jz	short loc_1002A7FA

loc_1002A7F6:				; CODE XREF: sub_1002A760+90j
		mov	[esi+ebx], cl
		inc	esi

loc_1002A7FA:				; CODE XREF: sub_1002A760+94j
		test	esi, esi
		jnz	short loc_1002A802
		test	al, al
		jz	short loc_1002A806

loc_1002A802:				; CODE XREF: sub_1002A760+9Cj
		mov	[esi+ebx], al
		inc	esi

loc_1002A806:				; CODE XREF: sub_1002A760+A0j
		dec	edx
		jns	short loc_1002A7C1
		test	esi, esi
		jnz	short loc_1002A810

loc_1002A80D:				; CODE XREF: sub_1002A760+5Fj
		mov	byte ptr [ebx],	0

loc_1002A810:				; CODE XREF: sub_1002A760+ABj
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A816:				; CODE XREF: sub_1002A760+Bj
					; sub_1002A760+17j ...
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_1002A760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A820	proc near		; CODE XREF: sub_1000E3A0+7Ep
					; sub_10016040+1C3p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		test	ebx, ebx
		jz	short loc_1002A8AC
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	short loc_1002A8AC
		cmp	[ebx], esi
		jnz	short loc_1002A8AC
		push	ebx
		call	sub_1002A950
		add	esp, 4
		test	eax, eax
		js	short loc_1002A8AC
		cmp	eax, [esp+0Ch+arg_8]
		ja	short loc_1002A8AC
		mov	edx, [ebx+8]
		dec	edx
		js	short loc_1002A89E

loc_1002A852:				; CODE XREF: sub_1002A820+78j
		mov	eax, [ebx+0Ch]
		mov	ecx, [eax+edx*4]
		mov	eax, ecx
		shr	eax, 18h
		test	esi, esi
		jnz	short loc_1002A865
		test	al, al
		jz	short loc_1002A869

loc_1002A865:				; CODE XREF: sub_1002A820+3Fj
		mov	[esi+edi], al
		inc	esi

loc_1002A869:				; CODE XREF: sub_1002A820+43j
		mov	eax, ecx
		shr	eax, 10h
		test	esi, esi
		jnz	short loc_1002A876
		test	al, al
		jz	short loc_1002A87A

loc_1002A876:				; CODE XREF: sub_1002A820+50j
		mov	[esi+edi], al
		inc	esi

loc_1002A87A:				; CODE XREF: sub_1002A820+54j
		mov	eax, ecx
		shr	eax, 8
		test	esi, esi
		jnz	short loc_1002A887
		test	al, al
		jz	short loc_1002A88B

loc_1002A887:				; CODE XREF: sub_1002A820+61j
		mov	[esi+edi], al
		inc	esi

loc_1002A88B:				; CODE XREF: sub_1002A820+65j
		test	esi, esi
		jnz	short loc_1002A893
		test	cl, cl
		jz	short loc_1002A897

loc_1002A893:				; CODE XREF: sub_1002A820+6Dj
		mov	[esi+edi], cl
		inc	esi

loc_1002A897:				; CODE XREF: sub_1002A820+71j
		dec	edx
		jns	short loc_1002A852
		test	esi, esi
		jnz	short loc_1002A8A6

loc_1002A89E:				; CODE XREF: sub_1002A820+30j
		mov	byte ptr [edi],	0
		mov	esi, 1

loc_1002A8A6:				; CODE XREF: sub_1002A820+7Cj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A8AC:				; CODE XREF: sub_1002A820+Bj
					; sub_1002A820+13j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_1002A820	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A8C0	proc near		; CODE XREF: sub_10026830+6Cp
					; sub_1002AD40+100p ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		xor	edx, edx
		test	edi, edi
		jz	short loc_1002A941
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_1002A941
		cmp	dword ptr [edi], 1
		jz	short loc_1002A8E1
		cmp	dword ptr [edi+8], 1
		jnz	short loc_1002A8E1
		cmp	[eax], edx
		jz	short loc_1002A941

loc_1002A8E1:				; CODE XREF: sub_1002A8C0+15j
					; sub_1002A8C0+1Bj
		mov	ecx, [eax]
		push	esi
		xor	esi, esi
		test	ecx, ecx
		jnz	short loc_1002A902
		mov	edi, [edi+8]
		lea	ecx, [ecx+0]

loc_1002A8F0:				; CODE XREF: sub_1002A8C0+40j
		cmp	esi, edi
		jnb	short loc_1002A938
		mov	ecx, [eax+4]
		add	eax, 4
		add	edx, 20h
		inc	esi
		test	ecx, ecx
		jz	short loc_1002A8F0

loc_1002A902:				; CODE XREF: sub_1002A8C0+28j
					; sub_1002A8C0+7Aj
		test	cx, cx
		jnz	short loc_1002A90D
		shr	ecx, 10h
		add	edx, 10h

loc_1002A90D:				; CODE XREF: sub_1002A8C0+45j
		test	cl, cl
		jnz	short loc_1002A917
		shr	ecx, 8
		add	edx, 8

loc_1002A917:				; CODE XREF: sub_1002A8C0+4Fj
		test	cl, 0Fh
		jnz	short loc_1002A922
		shr	ecx, 4
		add	edx, 4

loc_1002A922:				; CODE XREF: sub_1002A8C0+5Aj
		test	cl, 3
		jnz	short loc_1002A92D
		shr	ecx, 2
		add	edx, 2

loc_1002A92D:				; CODE XREF: sub_1002A8C0+65j
		test	cl, 1
		jnz	short loc_1002A933
		inc	edx

loc_1002A933:				; CODE XREF: sub_1002A8C0+70j
		pop	esi
		mov	eax, edx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1002A938:				; CODE XREF: sub_1002A8C0+32j
		test	ecx, ecx
		jnz	short loc_1002A902
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1002A941:				; CODE XREF: sub_1002A8C0+9j
					; sub_1002A8C0+10j ...
		xor	eax, eax
		pop	edi
		retn
sub_1002A8C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A950	proc near		; CODE XREF: sub_1000E3A0+26p
					; sub_10016040+1A4p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	edi
		xor	edi, edi
		test	edx, edx
		jnz	short loc_1002A962

loc_1002A95B:				; CODE XREF: sub_1002A950+14j
		mov	eax, 0FFFFFFFCh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1002A962:				; CODE XREF: sub_1002A950+9j
		cmp	[edx], edi
		jnz	short loc_1002A95B
		mov	eax, [edx+8]
		push	esi
		lea	ecx, [eax-1]
		lea	esi, ds:0[eax*4]
		test	ecx, ecx
		js	short loc_1002A98F
		mov	eax, [edx+0Ch]
		lea	eax, [eax+ecx*4]
		mov	edi, edi

loc_1002A980:				; CODE XREF: sub_1002A950+3Dj
		mov	edi, [eax]
		test	edi, edi
		jnz	short loc_1002A98F
		sub	esi, 4
		sub	eax, 4
		dec	ecx
		jns	short loc_1002A980

loc_1002A98F:				; CODE XREF: sub_1002A950+26j
					; sub_1002A950+34j
		test	esi, esi
		jnz	short loc_1002A999
		lea	eax, [esi+1]
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1002A999:				; CODE XREF: sub_1002A950+41j
		mov	ecx, 18h
		mov	edi, edi

loc_1002A9A0:				; CODE XREF: sub_1002A950+5Cj
		mov	edx, edi
		shr	edx, cl
		test	dl, dl
		jnz	short loc_1002A9AE
		dec	esi
		sub	ecx, 8
		jns	short loc_1002A9A0

loc_1002A9AE:				; CODE XREF: sub_1002A950+56j
		mov	eax, esi
		pop	esi
		pop	edi
		retn
sub_1002A950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A9C0	proc near		; CODE XREF: sub_1000DD70+57p
					; sub_1000DE90+28p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1002A9EA
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0

loc_1002A9EA:				; CODE XREF: sub_1002A9C0+7j
		pop	esi
		retn
sub_1002A9C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A9F0	proc near		; CODE XREF: sub_10028D20+12j
					; sub_100295D0+270p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, ebx
		and	ebx, 1Fh
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		shr	ebp, 5
		push	edi
		test	esi, esi
		jz	short loc_1002AA29
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0

loc_1002AA29:				; CODE XREF: sub_1002A9F0+16j
		mov	ecx, [esi+8]
		lea	edi, [ebp+1]
		cmp	edi, ecx
		jbe	short loc_1002AA67
		cmp	edi, [esi+4]
		jbe	short loc_1002AA4B
		push	edi
		push	esi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002AA64
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002AA4B:				; CODE XREF: sub_1002A9F0+46j
		mov	eax, edi
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [esi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002AA64:				; CODE XREF: sub_1002A9F0+54j
		mov	[esi+8], edi

loc_1002AA67:				; CODE XREF: sub_1002A9F0+41j
		mov	eax, [esi+0Ch]
		mov	ecx, ebx
		pop	edi
		pop	esi
		lea	edx, [eax+ebp*4]
		mov	eax, 1
		shl	eax, cl
		or	[edx], eax
		xor	eax, eax
		pop	ebp
		pop	ebx
		retn
sub_1002A9F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002AA80	proc near		; CODE XREF: sub_10033B70+15Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		xor	ebx, ebx
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [ebp+8]
		mov	ecx, [esi+8]
		cmp	edi, ecx
		jbe	short loc_1002AACC
		cmp	edi, [esi+4]
		jbe	short loc_1002AAB0
		push	edi
		push	esi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002AAC9
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002AAB0:				; CODE XREF: sub_1002AA80+1Bj
		mov	eax, edi
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [esi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002AAC9:				; CODE XREF: sub_1002AA80+29j
		mov	[esi+8], edi

loc_1002AACC:				; CODE XREF: sub_1002AA80+16j
		mov	eax, [ebp+0Ch]
		xor	edi, edi
		mov	ebp, [ebp+8]
		mov	edx, [esi+0Ch]
		test	ebp, ebp
		jz	short loc_1002AB03
		mov	edi, ebp
		mov	esi, eax
		nop

loc_1002AAE0:				; CODE XREF: sub_1002AA80+7Dj
		mov	ecx, [esi]
		lea	esi, [esi+4]
		add	ecx, [edx]
		cmp	ecx, [edx]
		sbb	eax, eax
		add	ecx, ebx
		neg	eax
		mov	[edx], ecx
		add	edx, 4
		cmp	ecx, ebx
		sbb	ebx, ebx
		neg	ebx
		add	ebx, eax
		dec	ebp
		jnz	short loc_1002AAE0
		mov	esi, [esp+10h+arg_0]

loc_1002AB03:				; CODE XREF: sub_1002AA80+59j
		mov	ebp, [esi+8]
		test	ebx, ebx
		jz	short loc_1002AB78
		lea	ebx, [ebx+0]

loc_1002AB10:				; CODE XREF: sub_1002AA80+A7j
		cmp	edi, ebp
		jnb	short loc_1002AB30
		mov	eax, [edx]
		add	eax, ebx
		xor	ebx, ebx
		mov	[edx], eax
		add	edx, 4
		test	eax, eax
		setz	bl
		inc	edi
		test	ebx, ebx
		jnz	short loc_1002AB10
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002AB30:				; CODE XREF: sub_1002AA80+92j
		test	ebx, ebx
		jz	short loc_1002AB78
		mov	ecx, [esi+8]
		lea	edi, [ebp+1]
		cmp	edi, ecx
		jbe	short loc_1002AB72
		cmp	edi, [esi+4]
		jbe	short loc_1002AB56
		push	edi
		push	esi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002AB6F
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002AB56:				; CODE XREF: sub_1002AA80+C1j
		mov	eax, edi
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [esi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002AB6F:				; CODE XREF: sub_1002AA80+CFj
		mov	[esi+8], edi

loc_1002AB72:				; CODE XREF: sub_1002AA80+BCj
		mov	eax, [esi+0Ch]
		mov	[eax+ebp*4], ebx

loc_1002AB78:				; CODE XREF: sub_1002AA80+88j
					; sub_1002AA80+B2j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1002AA80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002AB80	proc near		; CODE XREF: sub_10028D40+24p
					; sub_1002A540+43p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		sub	esp, 8
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_8]
		xor	esi, esi
		mov	eax, [ebp+0]
		mov	[edi], eax
		mov	eax, [ebp+8]
		cmp	eax, [ecx+8]
		jnb	short loc_1002ABAC
		mov	[esp+18h+arg_4], ebp
		mov	ebp, ecx
		mov	[esp+18h+arg_0], ebp

loc_1002ABAC:				; CODE XREF: sub_1002AB80+20j
		mov	ebx, [ebp+8]
		mov	ecx, [edi+8]
		cmp	ebx, ecx
		jbe	short loc_1002ABED
		cmp	ebx, [edi+4]
		jbe	short loc_1002ABD1
		push	ebx
		push	edi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002ABEA
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002ABD1:				; CODE XREF: sub_1002AB80+39j
		mov	eax, ebx
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [edi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002ABEA:				; CODE XREF: sub_1002AB80+47j
		mov	[edi+8], ebx

loc_1002ABED:				; CODE XREF: sub_1002AB80+34j
		mov	eax, [esp+18h+arg_4]
		mov	edx, [ebp+0Ch]
		mov	ebx, [edi+0Ch]
		mov	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	[esp+18h+var_4], ecx
		xor	ecx, ecx
		mov	[esp+18h+var_8], eax
		mov	[esp+18h+arg_4], ecx
		test	eax, eax
		jz	short loc_1002AC4D
		mov	ebp, [esp+18h+var_4]
		mov	edi, eax
		mov	[esp+18h+arg_4], edi
		lea	esp, [esp+0]

loc_1002AC20:				; CODE XREF: sub_1002AB80+C3j
		mov	eax, [edx]
		lea	ebp, [ebp+4]
		mov	ecx, [ebp-4]
		add	edx, 4
		add	ecx, eax
		cmp	ecx, eax
		sbb	eax, eax
		add	ecx, esi
		neg	eax
		mov	[ebx], ecx
		add	ebx, 4
		cmp	ecx, esi
		sbb	esi, esi
		neg	esi
		add	esi, eax
		dec	edi
		jnz	short loc_1002AC20
		mov	edi, [esp+18h+arg_8]
		mov	ebp, [esp+18h+arg_0]

loc_1002AC4D:				; CODE XREF: sub_1002AB80+8Dj
		mov	ebp, [ebp+8]
		mov	eax, [esp+18h+arg_4]
		cmp	eax, ebp
		jnb	short loc_1002AC74
		mov	ecx, ebp
		sub	ebx, edx
		sub	ecx, eax
		mov	edi, edi

loc_1002AC60:				; CODE XREF: sub_1002AB80+F2j
		mov	eax, [edx]
		lea	edx, [edx+4]
		add	eax, esi
		cmp	eax, esi
		mov	[ebx+edx-4], eax
		sbb	esi, esi
		neg	esi
		dec	ecx
		jnz	short loc_1002AC60

loc_1002AC74:				; CODE XREF: sub_1002AB80+D6j
		test	esi, esi
		jz	short loc_1002ACC1
		mov	ecx, [edi+8]
		lea	ebx, [ebp+1]
		cmp	ebx, ecx
		jbe	short loc_1002ACB9
		cmp	ebx, [edi+4]
		jbe	short loc_1002AC9D
		push	ebx
		push	edi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002ACB6
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002AC9D:				; CODE XREF: sub_1002AB80+105j
		mov	eax, ebx
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [edi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002ACB6:				; CODE XREF: sub_1002AB80+113j
		mov	[edi+8], ebx

loc_1002ACB9:				; CODE XREF: sub_1002AB80+100j
		mov	eax, [edi+0Ch]
		mov	[eax+ebp*4], esi
		mov	ebp, ebx

loc_1002ACC1:				; CODE XREF: sub_1002AB80+F6j
		mov	[edi+8], ebp
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
sub_1002AB80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002ACD0	proc near		; CODE XREF: sub_10028DB0+45p
					; sub_10029E90+B0p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	esi, [edi+0Ch]
		mov	edx, [edi+8]
		mov	ecx, [esi]
		add	ecx, [esp+0Ch+arg_4]
		mov	[esi], ecx
		add	esi, 4
		cmp	ecx, [esp+0Ch+arg_4]
		sbb	ebx, ebx
		neg	ebx
		jz	short loc_1002AD0B

loc_1002ACF2:				; CODE XREF: sub_1002ACD0+39j
		dec	edx
		test	edx, edx
		jle	short loc_1002AD11
		mov	ecx, [esi]
		add	ecx, ebx
		xor	ebx, ebx
		mov	[esi], ecx
		add	esi, 4
		test	ecx, ecx
		setz	bl
		test	ebx, ebx
		jnz	short loc_1002ACF2

loc_1002AD0B:				; CODE XREF: sub_1002ACD0+20j
					; sub_1002ACD0+43j ...
		xor	eax, eax

loc_1002AD0D:				; CODE XREF: sub_1002ACD0+5Bj
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002AD11:				; CODE XREF: sub_1002ACD0+25j
		test	ebx, ebx
		jz	short loc_1002AD0B
		test	edx, edx
		jnz	short loc_1002AD0B
		mov	esi, [edi+8]
		lea	eax, [esi+1]
		push	eax
		push	edi
		call	sub_1002C8E0
		add	esp, 8
		test	eax, eax
		js	short loc_1002AD0D
		mov	ecx, [edi+0Ch]
		pop	edi
		mov	[ecx+esi*4], ebx
		pop	esi
		pop	ebx
		retn
sub_1002ACD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002AD40	proc near		; CODE XREF: sub_1002C2B0+BEp

var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 30h
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+3Ch+arg_0]
		xor	ebx, ebx
		test	edi, edi
		jz	loc_1002AF94
		cmp	[esp+3Ch+arg_4], ebx
		jz	loc_1002AF94
		mov	ebp, [esp+3Ch+arg_8]
		test	ebp, ebp
		jz	loc_1002AF94
		mov	ecx, dword_1004E218
		mov	[esp+3Ch+var_14], ebx
		mov	[esp+3Ch+var_24], ebx
		mov	[esp+3Ch+var_4], ebx
		push	esi
		test	ecx, ecx
		jz	short loc_1002ADC1
		lea	eax, ds:0FFFFFFFFh[ecx*2]
		xor	edx, edx
		div	ecx
		push	4		; size_t
		mov	esi, eax
		imul	esi, ecx
		push	esi		; size_t
		call	ds:calloc
		add	esp, 8
		mov	[esp+40h+var_14], eax
		test	eax, eax
		jnz	short loc_1002ADAD
		lea	esi, [ebx-2]
		jmp	loc_1002AF69
; ---------------------------------------------------------------------------

loc_1002ADAD:				; CODE XREF: sub_1002AD40+63j
		mov	[esp+40h+var_1C], esi
		xor	esi, esi
		mov	[esp+40h+var_20], ebx
		mov	[esp+40h+var_18], 1
		jmp	short loc_1002ADC6
; ---------------------------------------------------------------------------

loc_1002ADC1:				; CODE XREF: sub_1002AD40+3Fj
		mov	esi, 0FFFFFFFCh

loc_1002ADC6:				; CODE XREF: sub_1002AD40+7Fj
		test	esi, esi
		js	loc_1002AF69
		lea	eax, [esp+40h+var_30]
		push	edi
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002AF69
		push	[esp+40h+arg_4]
		lea	eax, [esp+44h+var_10]
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002AF69
		push	1
		push	ebp
		call	sub_1002A0D0
		lea	eax, [esp+48h+var_20]
		push	eax
		call	sub_1002A9C0
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	sub_100290C0
		add	esp, 10h
		test	eax, eax
		jz	loc_1002AF34
		jmp	short loc_1002AE30
; ---------------------------------------------------------------------------
		align 10h

loc_1002AE30:				; CODE XREF: sub_1002AD40+E8j
					; sub_1002AD40+137j ...
		mov	esi, [esp+40h+var_24]
		mov	eax, [esi]
		and	eax, 1
		lea	eax, [esp+40h+var_30]
		jnz	short loc_1002AE79
		push	eax
		call	sub_1002A8C0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_1002AF34
		lea	eax, [esp+40h+var_30]
		push	edi
		push	eax
		call	sub_1002B360
		lea	eax, [esp+48h+var_20]
		push	edi
		push	eax
		call	sub_1002C6C0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1002AF69
		add	ebx, edi
		jmp	short loc_1002AE30
; ---------------------------------------------------------------------------

loc_1002AE79:				; CODE XREF: sub_1002AD40+FDj
		push	1
		push	eax
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jz	loc_1002AF3B
		lea	eax, [esp+40h+var_10]
		push	eax
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	short loc_1002AEC5
		lea	eax, [esp+40h+var_10]
		push	eax
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_1002B590
		lea	eax, [esp+48h+var_20]
		push	eax
		push	ebp
		call	sub_1002B590
		mov	esi, [esp+50h+var_24]
		add	esp, 10h
		jmp	short loc_1002AEC7
; ---------------------------------------------------------------------------

loc_1002AEC5:				; CODE XREF: sub_1002AD40+160j
		jz	short loc_1002AF34

loc_1002AEC7:				; CODE XREF: sub_1002AD40+183j
		mov	eax, [esp+40h+var_4]
		mov	eax, [eax]
		xor	eax, [esi]
		test	al, 3
		lea	eax, [esp+40h+var_30]
		push	eax
		lea	eax, [esp+44h+var_10]
		push	eax
		lea	eax, [esp+48h+var_30]
		push	eax
		jnz	short loc_1002AF0B
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002AF69
		push	ebp
		lea	eax, [esp+44h+var_20]
		push	eax
		push	ebp
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jns	loc_1002AE30
		jmp	short loc_1002AF69
; ---------------------------------------------------------------------------

loc_1002AF0B:				; CODE XREF: sub_1002AD40+1A0j
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002AF69
		push	ebp
		lea	eax, [esp+44h+var_20]
		push	eax
		push	ebp
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jns	loc_1002AE30
		jmp	short loc_1002AF69
; ---------------------------------------------------------------------------

loc_1002AF34:				; CODE XREF: sub_1002AD40+E2j
					; sub_1002AD40+10Cj ...
		mov	esi, 0FFFFFFFBh
		jmp	short loc_1002AF69
; ---------------------------------------------------------------------------

loc_1002AF3B:				; CODE XREF: sub_1002AD40+146j
		mov	esi, ebx
		test	ebx, ebx
		js	short loc_1002AF69
		cmp	dword ptr [ebp+0], 0
		jz	short loc_1002AF67
		mov	edi, [esp+40h+arg_4]
		jmp	short loc_1002AF50
; ---------------------------------------------------------------------------
		align 10h

loc_1002AF50:				; CODE XREF: sub_1002AD40+20Bj
					; sub_1002AD40+225j
		push	ebp
		push	edi
		push	ebp
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002AF69
		cmp	dword ptr [ebp+0], 0
		jnz	short loc_1002AF50

loc_1002AF67:				; CODE XREF: sub_1002AD40+205j
		mov	esi, ebx

loc_1002AF69:				; CODE XREF: sub_1002AD40+68j
					; sub_1002AD40+88j ...
		lea	eax, [esp+40h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+48h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002AF94:				; CODE XREF: sub_1002AD40+Ej
					; sub_1002AD40+18j ...
		pop	edi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 30h
		retn
sub_1002AD40	endp


; =============== S U B	R O U T	I N E =======================================


sub_1002AFA0	proc near		; CODE XREF: sub_100287E0+184p
					; sub_100289A0+80p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	ebx, [esi+8]
		mov	eax, [edi+8]
		cmp	ebx, eax
		ja	short loc_1002B030
		jb	short loc_1002B029
		mov	esi, [esi+0Ch]
		lea	ecx, ds:0[ebx*4]
		mov	edi, [edi+0Ch]
		xor	edx, edx
		xor	eax, eax
		add	esi, ecx
		add	edi, ecx
		cmp	ebx, 4
		jb	short loc_1002B005

loc_1002AFD1:				; CODE XREF: sub_1002AFA0+63j
		mov	edx, [esi-4]
		sub	esi, 10h
		mov	eax, [edi-4]
		sub	edi, 10h
		sub	ebx, 4
		cmp	edx, eax
		jnz	short loc_1002B01D
		mov	edx, [esi+8]
		mov	eax, [edi+8]
		cmp	edx, eax
		jnz	short loc_1002B01D
		mov	edx, [esi+4]
		mov	eax, [edi+4]
		cmp	edx, eax
		jnz	short loc_1002B01D
		mov	edx, [esi]
		mov	eax, [edi]
		cmp	edx, eax
		jnz	short loc_1002B01D
		cmp	ebx, 4
		jnb	short loc_1002AFD1

loc_1002B005:				; CODE XREF: sub_1002AFA0+2Fj
		sub	edi, esi

loc_1002B007:				; CODE XREF: sub_1002AFA0+79j
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jz	short loc_1002B01B
		mov	edx, [esi-4]
		sub	esi, 4
		mov	eax, [edi+esi]
		cmp	edx, eax
		jz	short loc_1002B007

loc_1002B01B:				; CODE XREF: sub_1002AFA0+6Cj
		cmp	edx, eax

loc_1002B01D:				; CODE XREF: sub_1002AFA0+42j
					; sub_1002AFA0+4Cj ...
		ja	short loc_1002B030
		cmp	edx, eax
		jb	short loc_1002B029
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002B029:				; CODE XREF: sub_1002AFA0+15j
					; sub_1002AFA0+81j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002B030:				; CODE XREF: sub_1002AFA0+13j
					; sub_1002AFA0:loc_1002B01Dj
		pop	edi
		pop	esi
		mov	eax, 1
		pop	ebx
		retn
sub_1002AFA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B040	proc near		; CODE XREF: sub_10028D40+51p
					; sub_10028DB0+52p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+8], 1
		jbe	short loc_1002B050
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1002B050:				; CODE XREF: sub_1002B040+8j
		mov	eax, [eax+0Ch]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax]
		cmp	ecx, eax
		jbe	short loc_1002B061
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1002B061:				; CODE XREF: sub_1002B040+1Bj
		sbb	eax, eax
		neg	eax
		retn
sub_1002B040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B070	proc near		; CODE XREF: sub_100291E0+155p

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 30h
		push	edi
		mov	edi, [esp+34h+arg_4]
		cmp	dword ptr [edi], 1
		jz	short loc_1002B095
		cmp	dword ptr [edi+8], 1
		jnz	short loc_1002B095
		mov	eax, [edi+0Ch]
		cmp	dword ptr [eax], 0
		jnz	short loc_1002B095
		mov	eax, 0FFFFFFFDh
		pop	edi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B095:				; CODE XREF: sub_1002B070+Bj
					; sub_1002B070+11j ...
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	[esp+44h+var_4], 0
		call	sub_1002C400
		mov	ebp, [esp+44h+arg_0]
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_1002B0E6
		mov	edi, [esp+40h+arg_8]
		push	edi
		push	ebp
		call	sub_100290F0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002B353
		push	esi
		push	edi
		call	sub_1002B360
		push	esi
		push	ebp
		call	sub_1002C580
		add	esp, 10h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B0E6:				; CODE XREF: sub_1002B070+41j
		mov	dword ptr [ebp+0], 0
		lea	eax, [esp+40h+var_10]
		mov	dword ptr [edi], 0
		push	dword ptr [ebp+4]
		push	eax
		call	sub_10029940
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002B331
		lea	eax, [esp+40h+var_28]
		push	eax
		push	edi
		push	ebp
		call	sub_1002C890
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1002B331
		mov	eax, [ebp+0]
		mov	ecx, [esp+40h+arg_8]
		mov	[esp+40h+var_20], eax
		mov	eax, [ebp+4]
		mov	[esp+40h+var_1C], eax
		mov	eax, [ebp+8]
		mov	[esp+40h+var_18], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+40h+var_14], eax
		mov	eax, [ecx+4]
		mov	[ecx+8], eax
		lea	esp, [esp+0]

loc_1002B150:				; CODE XREF: sub_1002B070+273j
		mov	ecx, [ebp+8]
		mov	esi, [edi+8]
		mov	[esp+40h+var_30], ecx
		cmp	ecx, esi
		ja	short loc_1002B174
		push	edi
		push	ebp
		call	sub_1002AFA0
		add	esp, 8
		test	eax, eax
		js	loc_1002B2F7
		mov	ecx, [esp+40h+var_30]

loc_1002B174:				; CODE XREF: sub_1002B070+ECj
		mov	eax, [ebp+0Ch]
		sub	ecx, esi
		push	edi
		mov	[esp+44h+var_30], ecx
		mov	[esp+44h+var_18], esi
		lea	eax, [eax+ecx*4]
		mov	[esp+44h+var_14], eax
		mov	eax, [ebp+4]
		sub	eax, ecx
		mov	[esp+44h+var_2C], eax
		mov	[esp+44h+var_1C], eax
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_1002AFA0
		mov	ecx, [esp+48h+var_14]
		add	esp, 8
		test	eax, eax
		jns	short loc_1002B1C4
		mov	eax, [esp+40h+var_2C]
		sub	ecx, 4
		dec	[esp+40h+var_30]
		inc	esi
		inc	eax
		mov	[esp+40h+var_14], ecx
		mov	[esp+40h+var_18], esi
		mov	[esp+40h+var_1C], eax

loc_1002B1C4:				; CODE XREF: sub_1002B070+139j
		mov	eax, [ecx+esi*4-4]
		mov	edx, [edi+8]
		mov	[esp+40h+arg_4], eax
		mov	[esp+40h+var_2C], eax
		mov	eax, [edi+0Ch]
		mov	edx, [eax+edx*4-4]
		mov	eax, [esp+40h+var_2C]
		cmp	eax, edx
		jb	short loc_1002B1EC
		mov	[esp+40h+arg_4], 1
		jmp	short loc_1002B222
; ---------------------------------------------------------------------------

loc_1002B1EC:				; CODE XREF: sub_1002B070+170j
		cmp	esi, 1
		jbe	loc_1002B2EF
		lea	ebx, [esp+40h+var_24]
		push	ebx
		lea	ebx, [esp+44h+arg_4]
		push	ebx
		push	edx
		push	dword ptr [ecx+esi*4-8]
		push	eax
		call	sub_1002D910
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		js	loc_1002B331
		cmp	[esp+40h+arg_4], 0
		jbe	loc_1002B2F7

loc_1002B222:				; CODE XREF: sub_1002B070+17Aj
		lea	eax, [esp+40h+var_10]
		push	eax
		push	edi
		call	sub_100290F0
		push	[esp+48h+arg_4]
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_1002C7E0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_1002B331
		lea	eax, [esp+40h+var_20]
		mov	esi, 4
		push	eax
		lea	eax, [esp+44h+var_10]
		push	eax
		call	sub_1002AFA0
		add	esp, 8
		test	eax, eax
		jle	short loc_1002B291

loc_1002B263:				; CODE XREF: sub_1002B070+21Bj
		test	esi, esi
		jle	short loc_1002B28F
		dec	[esp+40h+arg_4]
		lea	eax, [esp+40h+var_10]
		push	edi
		push	eax
		call	sub_1002CBE0
		lea	eax, [esp+48h+var_20]
		dec	esi
		push	eax
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_1002AFA0
		add	esp, 10h
		test	eax, eax
		jg	short loc_1002B263
		test	esi, esi

loc_1002B28F:				; CODE XREF: sub_1002B070+1F5j
		js	short loc_1002B2E8

loc_1002B291:				; CODE XREF: sub_1002B070+1F1j
		lea	eax, [esp+40h+var_10]
		push	eax
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_1002CBE0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002B331
		mov	eax, [ebp+8]
		cmp	eax, 1
		jbe	short loc_1002B2CE
		mov	ecx, [ebp+0Ch]
		lea	ecx, [ecx+eax*4]
		add	ecx, 0FFFFFFFCh
		mov	edi, edi

loc_1002B2C0:				; CODE XREF: sub_1002B070+25Cj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002B2CE
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002B2C0

loc_1002B2CE:				; CODE XREF: sub_1002B070+243j
					; sub_1002B070+253j
		mov	edx, [esp+40h+var_30]
		mov	[ebp+8], eax
		mov	eax, [esp+40h+arg_8]
		mov	ecx, [eax+0Ch]
		mov	eax, [esp+40h+arg_4]
		mov	[ecx+edx*4], eax
		jmp	loc_1002B150
; ---------------------------------------------------------------------------

loc_1002B2E8:				; CODE XREF: sub_1002B070:loc_1002B28Fj
		mov	ebx, 0FFFFFFFDh
		jmp	short loc_1002B331
; ---------------------------------------------------------------------------

loc_1002B2EF:				; CODE XREF: sub_1002B070+17Fj
		mov	[esp+40h+arg_4], 0

loc_1002B2F7:				; CODE XREF: sub_1002B070+FAj
					; sub_1002B070+1ACj
		mov	eax, [esp+40h+var_28]
		test	eax, eax
		jz	short loc_1002B309
		push	eax
		push	ebp
		call	sub_1002B360
		add	esp, 8

loc_1002B309:				; CODE XREF: sub_1002B070+28Dj
		mov	edx, [esp+40h+arg_8]
		mov	ecx, [edx+8]
		cmp	ecx, 1
		jbe	short loc_1002B32E
		mov	eax, [edx+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh
		mov	edi, edi

loc_1002B320:				; CODE XREF: sub_1002B070+2BCj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002B32E
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002B320

loc_1002B32E:				; CODE XREF: sub_1002B070+2A3j
					; sub_1002B070+2B3j
		mov	[edx+8], ecx

loc_1002B331:				; CODE XREF: sub_1002B070+97j
					; sub_1002B070+B0j ...
		mov	esi, [esp+40h+var_4]
		test	esi, esi
		jz	short loc_1002B353
		mov	eax, [esp+40h+var_C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		push	esi		; void *
		call	ds:free
		add	esp, 10h

loc_1002B353:				; CODE XREF: sub_1002B070+55j
					; sub_1002B070+2C7j
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	edi
		add	esp, 30h
		retn
sub_1002B070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B360	proc near		; CODE XREF: sub_10028C10+24p
					; sub_100293E0+22p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_4]
		mov	eax, ebx
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		shr	eax, 5
		push	eax
		push	edi
		call	sub_1002CA80
		add	esp, 8
		and	ebx, 1Fh
		jz	short loc_1002B3D1
		mov	ecx, ebx
		mov	eax, 1
		shl	eax, cl
		mov	ecx, [edi+8]
		dec	eax
		push	ebp
		xor	ebp, ebp
		mov	[esp+10h+arg_0], eax
		dec	ecx
		mov	[esp+10h+arg_4], ecx
		js	short loc_1002B3D0
		mov	eax, 20h
		sub	eax, ebx
		mov	[esp+10h+var_4], eax
		push	esi

loc_1002B3A6:				; CODE XREF: sub_1002B360+6Dj
		mov	eax, [edi+0Ch]
		lea	esi, [eax+ecx*4]
		mov	ecx, [esp+14h+var_4]
		mov	eax, [esi]
		mov	edx, eax
		and	edx, [esp+14h+arg_0]
		shl	ebp, cl
		mov	ecx, ebx
		shr	eax, cl
		mov	ecx, [esp+14h+arg_4]
		or	ebp, eax
		dec	ecx
		mov	[esi], ebp
		mov	ebp, edx
		mov	[esp+14h+arg_4], ecx
		jns	short loc_1002B3A6
		pop	esi

loc_1002B3D0:				; CODE XREF: sub_1002B360+38j
		pop	ebp

loc_1002B3D1:				; CODE XREF: sub_1002B360+1Dj
		mov	eax, [edi+8]
		cmp	eax, 1
		jbe	short loc_1002B3F0
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4]
		add	ecx, 0FFFFFFFCh

loc_1002B3E2:				; CODE XREF: sub_1002B360+8Ej
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002B3F0
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002B3E2

loc_1002B3F0:				; CODE XREF: sub_1002B360+77j
					; sub_1002B360+85j
		mov	[edi+8], eax
		pop	edi
		pop	ebx
		pop	ecx
		retn
sub_1002B360	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B400	proc near		; CODE XREF: sub_10029490+90p

var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 24h
		push	edi
		mov	edi, [esp+28h+arg_4]
		test	edi, edi
		jnz	short loc_1002B414
		lea	eax, [edi-3]
		pop	edi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1002B414:				; CODE XREF: sub_1002B400+Aj
		cmp	edi, 1
		jnz	short loc_1002B42E
		mov	eax, [esp+28h+arg_8]
		test	eax, eax
		jz	short loc_1002B427
		mov	dword ptr [eax], 0

loc_1002B427:				; CODE XREF: sub_1002B400+1Fj
		xor	eax, eax
		pop	edi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1002B42E:				; CODE XREF: sub_1002B400+17j
		push	ebp
		mov	ebp, [esp+2Ch+arg_0]
		mov	eax, [ebp+8]
		cmp	eax, 1
		jnz	short loc_1002B458
		mov	ecx, [ebp+0Ch]
		xor	edx, edx
		mov	eax, [ecx]
		div	edi
		mov	[ecx], eax
		mov	eax, [esp+2Ch+arg_8]
		test	eax, eax
		jz	short loc_1002B450
		mov	[eax], edx

loc_1002B450:				; CODE XREF: sub_1002B400+4Cj
		pop	ebp
		xor	eax, eax
		pop	edi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1002B458:				; CODE XREF: sub_1002B400+39j
		push	esi
		push	eax
		lea	eax, [esp+34h+var_20]
		mov	[esp+34h+var_4], 0
		push	eax
		mov	[esp+38h+var_14], 0
		call	sub_10029940
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002B565
		lea	eax, [esp+30h+var_10]
		push	ebp
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002B565
		push	ebx
		mov	ebx, [esp+34h+var_8]
		xor	ecx, ecx
		dec	ebx
		js	loc_1002B523
		mov	ebp, [esp+34h+var_4]
		jmp	short loc_1002B4B0
; ---------------------------------------------------------------------------
		align 10h

loc_1002B4B0:				; CODE XREF: sub_1002B400+ABj
					; sub_1002B400+11Bj
		mov	eax, [ebp+ebx*4+0]
		mov	[esp+34h+arg_4], eax
		test	ecx, ecx
		jz	short loc_1002B4DD
		lea	edx, [esp+34h+arg_4]
		push	edx
		lea	edx, [esp+38h+var_24]
		push	edx
		push	edi
		push	eax
		push	ecx
		call	sub_1002D910
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_1002B564
		jmp	short loc_1002B4F7
; ---------------------------------------------------------------------------

loc_1002B4DD:				; CODE XREF: sub_1002B400+BAj
		cmp	eax, edi
		jb	short loc_1002B4EF
		xor	edx, edx
		div	edi
		mov	[esp+34h+var_24], eax
		mov	[esp+34h+arg_4], edx
		jmp	short loc_1002B4F7
; ---------------------------------------------------------------------------

loc_1002B4EF:				; CODE XREF: sub_1002B400+DFj
		mov	[esp+34h+var_24], 0

loc_1002B4F7:				; CODE XREF: sub_1002B400+DBj
					; sub_1002B400+EDj
		lea	eax, [esp+34h+var_20]
		push	1
		push	eax
		call	sub_1002C4D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_1002B564
		dec	ebx
		mov	edx, [esp+34h+var_14]
		mov	eax, [esp+34h+var_24]
		mov	[edx], eax
		mov	ecx, [esp+34h+arg_4]
		jns	short loc_1002B4B0
		mov	ebp, [esp+34h+arg_0]
		jmp	short loc_1002B52B
; ---------------------------------------------------------------------------

loc_1002B523:				; CODE XREF: sub_1002B400+A1j
		mov	edx, [esp+34h+var_14]
		mov	ecx, [esp+34h+arg_4]

loc_1002B52B:				; CODE XREF: sub_1002B400+121j
		mov	eax, [esp+34h+arg_8]
		test	eax, eax
		jz	short loc_1002B535
		mov	[eax], ecx

loc_1002B535:				; CODE XREF: sub_1002B400+131j
		mov	eax, [esp+34h+var_18]
		cmp	eax, 1
		jbe	short loc_1002B552
		lea	ecx, [eax-1]
		lea	ecx, [edx+ecx*4]

loc_1002B544:				; CODE XREF: sub_1002B400+150j
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002B552
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002B544

loc_1002B552:				; CODE XREF: sub_1002B400+13Cj
					; sub_1002B400+147j
		mov	[esp+34h+var_18], eax
		lea	eax, [esp+34h+var_20]
		push	ebp
		push	eax
		call	sub_10029580
		add	esp, 8

loc_1002B564:				; CODE XREF: sub_1002B400+D5j
					; sub_1002B400+10Aj
		pop	ebx

loc_1002B565:				; CODE XREF: sub_1002B400+7Bj
					; sub_1002B400+93j
		lea	eax, [esp+30h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	edi
		add	esp, 24h
		retn
sub_1002B400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B590	proc near		; CODE XREF: sub_100291E0+1A8p
					; sub_100291E0+1BAp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		push	ebx
		push	ebp
		mov	ebx, [edx+8]
		mov	ebp, [edx+0Ch]
		mov	eax, [ecx]
		push	esi
		mov	esi, [edx]
		push	edi
		mov	edi, [edx+4]
		mov	[edx], eax
		mov	eax, [ecx+4]
		mov	[edx+4], eax
		mov	eax, [ecx+8]
		mov	[edx+8], eax
		mov	eax, [ecx+0Ch]
		mov	[edx+0Ch], eax
		mov	[ecx], esi
		mov	[ecx+4], edi
		pop	edi
		mov	[ecx+8], ebx
		pop	esi
		mov	[ecx+0Ch], ebp
		pop	ebp
		pop	ebx
		retn
sub_1002B590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B5D0	proc near		; CODE XREF: sub_10026B80+22p

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 30h
		push	ebx
		push	esi
		mov	esi, [esp+38h+arg_0]
		test	esi, esi
		jz	loc_1002B8C8
		mov	ebx, [esp+38h+arg_4]
		test	ebx, ebx
		jz	loc_1002B8C8
		cmp	[esp+38h+arg_C], 0
		jz	loc_1002B8C8
		cmp	dword ptr [ebx], 1
		push	ebp
		jz	loc_1002B8BC
		mov	ebp, [esp+3Ch+arg_8]
		push	ebp
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jle	loc_1002B8BC
		mov	ecx, dword_1004E218
		push	edi
		test	ecx, ecx
		jz	loc_1002B8AF
		lea	eax, ds:0FFFFFFFFh[ecx*2]
		xor	edx, edx
		div	ecx
		push	4		; size_t
		mov	edi, eax
		imul	edi, ecx
		push	edi		; size_t
		call	ds:calloc
		add	esp, 8
		mov	[esp+40h+var_14], eax
		test	eax, eax
		jnz	short loc_1002B657
		pop	edi
		pop	ebp
		pop	esi
		mov	eax, 0FFFFFFFEh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B657:				; CODE XREF: sub_1002B5D0+78j
		lea	eax, [esp+40h+var_10]
		mov	[esp+40h+var_20], 0
		push	esi
		push	eax
		mov	[esp+48h+var_18], 1
		mov	[esp+48h+var_1C], edi
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002B898
		lea	eax, [esp+40h+var_10]
		push	eax
		push	ebp
		push	eax
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002B898
		mov	ecx, dword_1004E218
		test	ecx, ecx
		jz	short loc_1002B6EA
		lea	eax, ds:0FFFFFFFFh[ecx*2]
		xor	edx, edx
		div	ecx
		push	4		; size_t
		mov	esi, eax
		imul	esi, ecx
		push	esi		; size_t
		call	ds:calloc
		add	esp, 8
		mov	[esp+40h+var_24], eax
		test	eax, eax
		jnz	short loc_1002B6D2
		lea	esi, [eax-2]
		jmp	loc_1002B88B
; ---------------------------------------------------------------------------

loc_1002B6D2:				; CODE XREF: sub_1002B5D0+F8j
		mov	[esp+40h+var_2C], esi
		xor	esi, esi
		mov	[esp+40h+var_30], 0
		mov	[esp+40h+var_28], 1
		jmp	short loc_1002B6EF
; ---------------------------------------------------------------------------

loc_1002B6EA:				; CODE XREF: sub_1002B5D0+D4j
		mov	esi, 0FFFFFFFCh

loc_1002B6EF:				; CODE XREF: sub_1002B5D0+118j
		test	esi, esi
		jnz	loc_1002B88B
		lea	eax, [esp+40h+var_20]
		push	1
		push	eax
		call	sub_1002A0D0
		lea	eax, [esp+48h+var_30]
		push	1
		push	eax
		call	sub_1002ACD0
		mov	eax, [ebp+8]
		add	eax, eax
		push	eax
		lea	eax, [esp+54h+var_30]
		push	eax
		call	sub_1002C4D0
		push	esi
		lea	eax, [esp+5Ch+var_30]
		push	eax
		push	ebp
		push	eax
		call	sub_100291E0
		mov	esi, eax
		add	esp, 28h
		test	esi, esi
		jnz	loc_1002B87E
		mov	eax, [ebx+8]
		xor	ecx, ecx
		mov	[esp+40h+arg_0], ecx
		dec	eax
		jz	loc_1002B7F0
		lea	esp, [esp+0]

loc_1002B750:				; CODE XREF: sub_1002B5D0+21Aj
		mov	eax, [ebx+0Ch]
		xor	edi, edi
		mov	ebx, [eax+ecx*4]

loc_1002B758:				; CODE XREF: sub_1002B5D0+205j
		test	bl, 1
		jz	short loc_1002B79B
		lea	eax, [esp+40h+var_20]
		push	eax
		lea	eax, [esp+44h+var_10]
		push	eax
		lea	eax, [esp+48h+var_20]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002B87E
		lea	eax, [esp+40h+var_30]
		push	eax
		lea	eax, [esp+44h+var_20]
		push	ebp
		push	eax
		call	sub_1002C930
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002B87E

loc_1002B79B:				; CODE XREF: sub_1002B5D0+18Bj
		lea	eax, [esp+40h+var_10]
		shr	ebx, 1
		push	eax
		call	sub_1002CAF0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	loc_1002B87E
		lea	eax, [esp+40h+var_30]
		push	eax
		lea	eax, [esp+44h+var_10]
		push	ebp
		push	eax
		call	sub_1002C930
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002B87E
		inc	edi
		cmp	edi, 20h
		jb	short loc_1002B758
		mov	ebx, [esp+40h+arg_4]
		mov	ecx, [esp+40h+arg_0]
		inc	ecx
		mov	[esp+40h+arg_0], ecx
		mov	eax, [ebx+8]
		dec	eax
		cmp	ecx, eax
		jb	loc_1002B750

loc_1002B7F0:				; CODE XREF: sub_1002B5D0+173j
		mov	eax, [ebx+0Ch]
		mov	ebx, [eax+ecx*4]
		test	ebx, ebx
		jz	short loc_1002B86D
		lea	ebx, [ebx+0]

loc_1002B800:				; CODE XREF: sub_1002B5D0+29Bj
		test	bl, 1
		jz	short loc_1002B83B
		lea	eax, [esp+40h+var_20]
		push	eax
		lea	eax, [esp+44h+var_10]
		push	eax
		lea	eax, [esp+48h+var_20]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002B87E
		lea	eax, [esp+40h+var_30]
		push	eax
		lea	eax, [esp+44h+var_20]
		push	ebp
		push	eax
		call	sub_1002C930
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002B87E

loc_1002B83B:				; CODE XREF: sub_1002B5D0+233j
		lea	eax, [esp+40h+var_10]
		shr	ebx, 1
		push	eax
		call	sub_1002CAF0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1002B87E
		lea	eax, [esp+40h+var_30]
		push	eax
		lea	eax, [esp+44h+var_10]
		push	ebp
		push	eax
		call	sub_1002C930
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002B87E
		test	ebx, ebx
		jnz	short loc_1002B800

loc_1002B86D:				; CODE XREF: sub_1002B5D0+228j
		push	[esp+40h+arg_C]
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_1002B590
		add	esp, 8

loc_1002B87E:				; CODE XREF: sub_1002B5D0+163j
					; sub_1002B5D0+1A8j ...
		lea	eax, [esp+40h+var_30]
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_1002B88B:				; CODE XREF: sub_1002B5D0+FDj
					; sub_1002B5D0+121j
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_1002B898:				; CODE XREF: sub_1002B5D0+ADj
					; sub_1002B5D0+C6j
		lea	eax, [esp+40h+var_20]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B8AF:				; CODE XREF: sub_1002B5D0+50j
		pop	edi
		pop	ebp
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B8BC:				; CODE XREF: sub_1002B5D0+2Cj
					; sub_1002B5D0+41j
		pop	ebp
		pop	esi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B8C8:				; CODE XREF: sub_1002B5D0+Bj
					; sub_1002B5D0+17j ...
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 30h
		retn
sub_1002B5D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B8E0	proc near		; CODE XREF: sub_1002C2B0+D0p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		mov	eax, [esp+4+arg_0]
		push	ebx
		mov	ebx, [esp+8+arg_C]
		push	ebp
		cmp	dword ptr [eax], 1
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	[esp+10h+var_4], edi
		push	ebx
		jnz	short loc_1002B911
		mov	ebp, [esp+14h+arg_4]
		push	ebp
		push	eax
		call	sub_10028D40
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_1002B926
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1002B911:				; CODE XREF: sub_1002B8E0+18j
		push	eax
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	loc_1002BA41
		mov	ebp, [esp+10h+arg_4]

loc_1002B926:				; CODE XREF: sub_1002B8E0+2Aj
		lea	ecx, [edi+1Fh]
		shr	ecx, 5
		push	esi
		mov	esi, [ebp+8]
		inc	ecx
		add	esi, ecx
		mov	ecx, [ebx+8]
		cmp	esi, ecx
		ja	short loc_1002B940
		mov	esi, ecx
		cmp	esi, ecx
		jbe	short loc_1002B977

loc_1002B940:				; CODE XREF: sub_1002B8E0+58j
		cmp	esi, [ebx+4]
		jbe	short loc_1002B95B
		push	esi
		push	ebx
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002B974
		jns	short loc_1002B977
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1002B95B:				; CODE XREF: sub_1002B8E0+63j
		mov	eax, esi
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [ebx+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002B974:				; CODE XREF: sub_1002B8E0+71j
		mov	[ebx+8], esi

loc_1002B977:				; CODE XREF: sub_1002B8E0+5Ej
					; sub_1002B8E0+73j
		mov	eax, [ebp+0Ch]
		mov	ebp, 2
		mov	ecx, ebp
		mov	edx, ebp
		mov	esi, [eax]
		mov	eax, esi
		imul	eax, esi
		sub	ecx, eax
		imul	ecx, esi
		mov	eax, ecx
		imul	eax, esi
		sub	edx, eax
		imul	edx, ecx
		mov	ecx, ebp
		mov	eax, edx
		imul	eax, esi
		sub	ecx, eax
		imul	ecx, edx
		mov	eax, ecx
		imul	eax, esi
		sub	ebp, eax
		imul	ebp, ecx
		neg	ebp
		mov	[esp+14h+arg_0], ebp
		test	edi, edi
		jle	short loc_1002BA0F
		xor	ecx, ecx
		mov	[esp+14h+arg_8], ecx
		nop

loc_1002B9C0:				; CODE XREF: sub_1002B8E0+12Dj
		mov	esi, edi
		cmp	edi, 20h
		jb	short loc_1002B9CC
		mov	esi, 20h

loc_1002B9CC:				; CODE XREF: sub_1002B8E0+E5j
		mov	ebp, [ebx+0Ch]
		add	ebp, ecx
		mov	edx, [ebp+0]
		imul	edx, [esp+14h+arg_0]
		cmp	esi, 20h
		jnb	short loc_1002B9EA
		mov	eax, 1
		mov	ecx, esi
		shl	eax, cl
		dec	eax
		and	edx, eax

loc_1002B9EA:				; CODE XREF: sub_1002B8E0+FCj
		push	ebp
		mov	ebp, [esp+18h+arg_4]
		push	edx
		push	dword ptr [ebp+8]
		push	dword ptr [ebp+0Ch]
		call	sub_1002DA60
		mov	ecx, [esp+24h+arg_8]
		sub	edi, esi
		add	ecx, 4
		add	esp, 10h
		mov	[esp+14h+arg_8], ecx
		test	edi, edi
		jg	short loc_1002B9C0

loc_1002BA0F:				; CODE XREF: sub_1002B8E0+D7j
		mov	ecx, [ebx+8]
		cmp	ecx, 1
		jbe	short loc_1002BA2E
		mov	eax, [ebx+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_1002BA20:				; CODE XREF: sub_1002B8E0+14Cj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002BA2E
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002BA20

loc_1002BA2E:				; CODE XREF: sub_1002B8E0+135j
					; sub_1002B8E0+143j
		push	[esp+14h+var_4]
		mov	[ebx+8], ecx
		push	ebx
		call	sub_1002B360
		add	esp, 8
		xor	eax, eax
		pop	esi

loc_1002BA41:				; CODE XREF: sub_1002B8E0+3Cj
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1002B8E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002BA50	proc near		; CODE XREF: sub_10029F90+CFp
					; sub_1002A1C0+6Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		cmp	eax, [esi+4]
		jbe	short loc_1002BAC6
		mov	ecx, dword_1004E218
		dec	eax
		add	eax, ecx
		xor	edx, edx
		div	ecx
		push	4		; size_t
		mov	edi, eax
		imul	edi, ecx
		push	edi		; size_t
		call	ds:calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_1002BA8B
		pop	edi
		pop	esi
		lea	eax, [ebx-2]
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002BA8B:				; CODE XREF: sub_1002BA50+32j
		mov	eax, [esi+8]
		shl	eax, 2
		push	eax		; size_t
		push	dword ptr [esi+0Ch] ; void *
		push	ebx		; void *
		call	memcpy
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		mov	eax, [esi+0Ch]
		add	esp, 18h
		test	eax, eax
		jz	short loc_1002BAC0
		push	eax		; void *
		call	ds:free
		add	esp, 4

loc_1002BAC0:				; CODE XREF: sub_1002BA50+64j
		mov	[esi+0Ch], ebx
		mov	[esi+4], edi

loc_1002BAC6:				; CODE XREF: sub_1002BA50+Ej
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1002BA50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002BAD0	proc near		; CODE XREF: sub_1002BE00+1Dj
					; sub_1002BE00+2CAp ...

var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		sub	esp, 50h
		push	ebx
		mov	ebx, [esp+54h+arg_4]
		push	ebp
		push	edi
		lea	edi, [ebx+4]
		test	ecx, ecx
		jz	loc_1002BDF2
		mov	eax, [ecx+0Ch]
		mov	ebp, [eax]
		mov	eax, ebp
		and	eax, 1
		jz	loc_1002BDF2
		push	esi
		cmp	ebx, 20h
		ja	short loc_1002BB7B
		mov	eax, ebp
		mov	edi, 2
		imul	eax, ebp
		mov	ecx, edi
		mov	edx, edi
		mov	esi, edi
		sub	ecx, eax
		imul	ecx, ebp
		mov	eax, ecx
		imul	eax, ebp
		sub	edx, eax
		imul	edx, ecx
		mov	eax, edx
		imul	eax, ebp
		sub	esi, eax
		imul	esi, edx
		mov	eax, esi
		imul	eax, ebp
		sub	edi, eax
		imul	edi, esi
		cmp	ebx, 20h
		jnb	short loc_1002BB43
		mov	eax, 1
		mov	ecx, ebx
		shl	eax, cl
		dec	eax
		and	edi, eax

loc_1002BB43:				; CODE XREF: sub_1002BAD0+65j
		mov	esi, [esp+60h+arg_8]
		test	esi, esi
		jz	short loc_1002BB71
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		mov	eax, [esi+0Ch]
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		mov	[eax], edi

loc_1002BB71:				; CODE XREF: sub_1002BAD0+79j
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1002BB7B:				; CODE XREF: sub_1002BAD0+2Dj
		push	ecx
		lea	eax, [esp+64h+var_10]
		mov	[esp+64h+var_14], 0
		push	eax
		mov	[esp+68h+var_44], 0
		mov	[esp+68h+var_4], 0
		mov	[esp+68h+var_34], 0
		mov	[esp+68h+var_24], 0
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002BDB3
		lea	eax, [esp+60h+var_10]
		push	ebx
		push	eax
		call	sub_1002C580
		lea	eax, [esp+68h+var_10]
		push	eax
		lea	eax, [esp+6Ch+var_20]
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1002BDB3
		lea	eax, [esp+60h+var_20]
		push	eax
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002BDB3
		mov	ebp, dword_1004E218
		mov	ecx, ds:calloc
		test	ebp, ebp
		jz	short loc_1002BC56
		xor	edx, edx
		lea	eax, ds:0FFFFFFFFh[ebp*2]
		div	ebp
		push	4		; size_t
		mov	esi, eax
		imul	esi, ebp
		push	esi		; size_t
		call	ecx ; calloc
		add	esp, 8
		mov	[esp+60h+var_34], eax
		test	eax, eax
		jnz	short loc_1002BC38

loc_1002BC2E:				; CODE XREF: sub_1002BAD0+1B5j
		mov	esi, 0FFFFFFFEh
		jmp	loc_1002BDB3
; ---------------------------------------------------------------------------

loc_1002BC38:				; CODE XREF: sub_1002BAD0+15Cj
		mov	ecx, ds:calloc
		mov	[esp+60h+var_3C], esi
		xor	esi, esi
		mov	[esp+60h+var_40], 0
		mov	[esp+60h+var_38], 1
		jmp	short loc_1002BC5B
; ---------------------------------------------------------------------------

loc_1002BC56:				; CODE XREF: sub_1002BAD0+13Cj
		mov	esi, 0FFFFFFFCh

loc_1002BC5B:				; CODE XREF: sub_1002BAD0+184j
		test	esi, esi
		js	loc_1002BDB3
		test	ebp, ebp
		jz	short loc_1002BC9F
		xor	edx, edx
		lea	eax, ds:0FFFFFFFFh[ebp*2]
		div	ebp
		push	4		; size_t
		mov	esi, eax
		imul	esi, ebp
		push	esi		; size_t
		call	ecx ; calloc
		add	esp, 8
		mov	[esp+60h+var_24], eax
		test	eax, eax
		jz	short loc_1002BC2E
		mov	[esp+60h+var_2C], esi
		xor	esi, esi
		mov	[esp+60h+var_30], 0
		mov	[esp+60h+var_28], 1
		jmp	short loc_1002BCA4
; ---------------------------------------------------------------------------

loc_1002BC9F:				; CODE XREF: sub_1002BAD0+195j
		mov	esi, 0FFFFFFFCh

loc_1002BCA4:				; CODE XREF: sub_1002BAD0+1CDj
		test	esi, esi
		js	loc_1002BDB3
		lea	eax, [esp+60h+var_30]
		push	ebx
		push	eax
		call	sub_1002A9F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002BDB3

loc_1002BCC4:				; CODE XREF: sub_1002BAD0+2C3j
		lea	eax, [esp+60h+var_40]
		push	eax
		lea	eax, [esp+64h+var_50]
		push	eax
		lea	eax, [esp+68h+var_10]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002BDB3
		lea	eax, [esp+60h+var_40]
		push	eax
		push	eax
		push	offset dword_1004C2E0
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002BDB3
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	eax, [esp+64h+var_40]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002BDB3
		lea	eax, [esp+60h+var_50]
		push	ebx
		push	eax
		call	sub_1002C580
		add	esp, 8
		cmp	[esp+60h+var_50], 0
		jz	short loc_1002BD64
		jmp	short loc_1002BD40
; ---------------------------------------------------------------------------
		align 10h

loc_1002BD40:				; CODE XREF: sub_1002BAD0+268j
					; sub_1002BAD0+292j
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	eax, [esp+64h+var_30]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002BDB3
		cmp	[esp+60h+var_50], 0
		jnz	short loc_1002BD40

loc_1002BD64:				; CODE XREF: sub_1002BAD0+266j
		lea	eax, [esp+60h+var_20]
		push	eax
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002BD99
		lea	eax, [esp+60h+var_20]
		push	eax
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_1002BDB3
		dec	edi
		jnz	loc_1002BCC4

loc_1002BD99:				; CODE XREF: sub_1002BAD0+2A8j
		test	edi, edi
		jnz	short loc_1002BDA2
		lea	esi, [edi-5]
		jmp	short loc_1002BDB3
; ---------------------------------------------------------------------------

loc_1002BDA2:				; CODE XREF: sub_1002BAD0+2CBj
		lea	eax, [esp+60h+var_50]
		push	eax
		push	[esp+64h+arg_8]
		call	sub_10029580
		add	esp, 8

loc_1002BDB3:				; CODE XREF: sub_1002BAD0+E5j
					; sub_1002BAD0+10Cj ...
		lea	eax, [esp+60h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+68h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+6Ch+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+70h+var_30]
		push	eax
		call	sub_10028F00
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1002BDF2:				; CODE XREF: sub_1002BAD0+13j
					; sub_1002BAD0+23j
		pop	edi
		pop	ebp
		mov	eax, 0FFFFFFFBh
		pop	ebx
		add	esp, 50h
		retn
sub_1002BAD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002BE00	proc near		; CODE XREF: sub_100299A0+6Dp

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 70h
		push	esi
		mov	esi, [esp+74h+arg_4]
		push	esi
		call	sub_1002C400
		add	esp, 4
		test	eax, eax
		js	short loc_1002BE22
		pop	esi
		add	esp, 70h
		mov	[esp+arg_4], eax
		jmp	sub_1002BAD0
; ---------------------------------------------------------------------------

loc_1002BE22:				; CODE XREF: sub_1002BE00+13j
		push	ebx
		push	ebp
		push	edi
		lea	eax, [esp+80h+var_10]
		mov	[esp+80h+var_4], 0
		push	esi
		xor	ebx, ebx
		mov	[esp+84h+var_34], 0
		xor	ebp, ebp
		mov	[esp+84h+var_54], 0
		push	eax
		mov	[esp+88h+var_24], 0
		mov	[esp+88h+var_14], 0
		mov	[esp+88h+var_44], ebx
		mov	[esp+88h+var_64], ebp
		call	sub_100298D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002C1C4
		mov	edi, dword_1004E218
		mov	ecx, ds:calloc
		test	edi, edi
		jz	short loc_1002BEC3
		xor	edx, edx
		lea	eax, ds:0FFFFFFFFh[edi*2]
		div	edi
		push	4		; size_t
		mov	esi, eax
		imul	esi, edi
		push	esi		; size_t
		call	ecx ; calloc
		add	esp, 8
		mov	[esp+80h+var_34], eax
		test	eax, eax
		jnz	short loc_1002BEA9
		lea	esi, [ebx-2]
		jmp	loc_1002C1C4
; ---------------------------------------------------------------------------

loc_1002BEA9:				; CODE XREF: sub_1002BE00+9Fj
		mov	ecx, ds:calloc
		mov	[esp+80h+var_3C], esi
		xor	esi, esi
		mov	[esp+80h+var_40], ebx
		mov	[esp+80h+var_38], 1
		jmp	short loc_1002BEC8
; ---------------------------------------------------------------------------

loc_1002BEC3:				; CODE XREF: sub_1002BE00+7Fj
		mov	esi, 0FFFFFFFCh

loc_1002BEC8:				; CODE XREF: sub_1002BE00+C1j
		test	esi, esi
		js	loc_1002C1C4
		test	edi, edi
		jz	short loc_1002BF10
		xor	edx, edx
		lea	eax, ds:0FFFFFFFFh[edi*2]
		div	edi
		push	4		; size_t
		mov	esi, eax
		imul	esi, edi
		push	esi		; size_t
		call	ecx ; calloc
		add	esp, 8
		mov	[esp+80h+var_54], eax
		test	eax, eax
		jnz	short loc_1002BEFC
		lea	esi, [eax-2]
		jmp	loc_1002C1C4
; ---------------------------------------------------------------------------

loc_1002BEFC:				; CODE XREF: sub_1002BE00+F2j
		mov	[esp+80h+var_5C], esi
		xor	esi, esi
		mov	[esp+80h+var_60], ebx
		mov	[esp+80h+var_58], 1
		jmp	short loc_1002BF15
; ---------------------------------------------------------------------------

loc_1002BF10:				; CODE XREF: sub_1002BE00+D2j
		mov	esi, 0FFFFFFFCh

loc_1002BF15:				; CODE XREF: sub_1002BE00+10Ej
		test	esi, esi
		js	loc_1002C1C4
		test	edi, edi
		jz	short loc_1002BF61
		xor	edx, edx
		lea	eax, ds:0FFFFFFFFh[edi*2]
		div	edi
		push	4		; size_t
		mov	esi, eax
		imul	esi, edi
		push	esi		; size_t
		call	ds:calloc
		add	esp, 8
		mov	[esp+80h+var_24], eax
		test	eax, eax
		jnz	short loc_1002BF4D
		lea	esi, [eax-2]
		jmp	loc_1002C1C4
; ---------------------------------------------------------------------------

loc_1002BF4D:				; CODE XREF: sub_1002BE00+143j
		mov	[esp+80h+var_2C], esi
		xor	esi, esi
		mov	[esp+80h+var_30], ebx
		mov	[esp+80h+var_28], 1
		jmp	short loc_1002BF66
; ---------------------------------------------------------------------------

loc_1002BF61:				; CODE XREF: sub_1002BE00+11Fj
		mov	esi, 0FFFFFFFCh

loc_1002BF66:				; CODE XREF: sub_1002BE00+15Fj
		test	esi, esi
		js	loc_1002C1C4
		test	edi, edi
		jz	short loc_1002BFB2
		xor	edx, edx
		lea	eax, ds:0FFFFFFFFh[edi*2]
		div	edi
		push	4		; size_t
		mov	esi, eax
		imul	esi, edi
		push	esi		; size_t
		call	ds:calloc
		add	esp, 8
		mov	[esp+80h+var_14], eax
		test	eax, eax
		jnz	short loc_1002BF9E
		lea	esi, [eax-2]
		jmp	loc_1002C1C4
; ---------------------------------------------------------------------------

loc_1002BF9E:				; CODE XREF: sub_1002BE00+194j
		mov	[esp+80h+var_1C], esi
		xor	esi, esi
		mov	[esp+80h+var_20], ebx
		mov	[esp+80h+var_18], 1
		jmp	short loc_1002BFB7
; ---------------------------------------------------------------------------

loc_1002BFB2:				; CODE XREF: sub_1002BE00+170j
		mov	esi, 0FFFFFFFCh

loc_1002BFB7:				; CODE XREF: sub_1002BE00+1B0j
		test	esi, esi
		js	loc_1002C1C4
		test	edi, edi
		jz	short loc_1002C005
		xor	edx, edx
		lea	eax, ds:0FFFFFFFFh[edi*2]
		div	edi
		push	4		; size_t
		mov	esi, eax
		imul	esi, edi
		push	esi		; size_t
		call	ds:calloc
		mov	ebx, eax
		add	esp, 8
		mov	[esp+80h+var_44], ebx
		test	ebx, ebx
		jnz	short loc_1002BFF1
		lea	esi, [eax-2]
		jmp	loc_1002C1C4
; ---------------------------------------------------------------------------

loc_1002BFF1:				; CODE XREF: sub_1002BE00+1E7j
		mov	[esp+80h+var_4C], esi
		xor	esi, esi
		mov	[esp+80h+var_50], ebp
		mov	[esp+80h+var_48], 1
		jmp	short loc_1002C00A
; ---------------------------------------------------------------------------

loc_1002C005:				; CODE XREF: sub_1002BE00+1C1j
		mov	esi, 0FFFFFFFCh

loc_1002C00A:				; CODE XREF: sub_1002BE00+203j
		test	esi, esi
		js	loc_1002C1C4
		test	edi, edi
		jz	short loc_1002C05C
		xor	edx, edx
		lea	eax, ds:0FFFFFFFFh[edi*2]
		div	edi
		push	4		; size_t
		mov	esi, eax
		imul	esi, edi
		push	esi		; size_t
		call	ds:calloc
		mov	ebp, eax
		add	esp, 8
		mov	[esp+80h+var_64], ebp
		test	ebp, ebp
		jnz	short loc_1002C044
		lea	esi, [eax-2]
		jmp	loc_1002C1C4
; ---------------------------------------------------------------------------

loc_1002C044:				; CODE XREF: sub_1002BE00+23Aj
		mov	[esp+80h+var_6C], esi
		xor	esi, esi
		mov	[esp+80h+var_70], 0
		mov	[esp+80h+var_68], 1
		jmp	short loc_1002C061
; ---------------------------------------------------------------------------

loc_1002C05C:				; CODE XREF: sub_1002BE00+214j
		mov	esi, 0FFFFFFFCh

loc_1002C061:				; CODE XREF: sub_1002BE00+25Aj
		test	esi, esi
		js	loc_1002C1C4
		push	[esp+80h+arg_4]
		call	sub_1002A8C0
		mov	edi, eax
		lea	eax, [esp+84h+var_10]
		push	edi
		push	eax
		call	sub_1002B360
		lea	eax, [esp+8Ch+var_40]
		push	edi
		push	eax
		call	sub_1002A9F0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_1002C1C4
		lea	eax, [esp+80h+var_60]
		push	eax
		lea	eax, [esp+84h+var_10]
		push	eax
		push	[esp+88h+arg_0]
		call	sub_1002C2B0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C1C4
		lea	eax, [esp+80h+var_30]
		push	eax
		push	edi
		push	[esp+88h+arg_0]
		call	sub_1002BAD0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C1C4
		lea	eax, [esp+80h+var_20]
		push	eax
		lea	eax, [esp+84h+var_10]
		push	edi
		push	eax
		call	sub_1002BAD0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C1C4
		lea	eax, [esp+80h+var_50]
		push	eax
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	eax, [esp+88h+var_30]
		push	eax
		call	sub_1002A540
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C1C0
		lea	eax, [esp+80h+var_70]
		push	eax
		lea	eax, [esp+84h+var_20]
		push	eax
		lea	eax, [esp+88h+var_50]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C1BC
		lea	eax, [esp+80h+var_70]
		push	edi
		push	eax
		call	sub_1002C580
		add	esp, 8
		cmp	[esp+80h+var_70], 0
		jz	short loc_1002C174

loc_1002C150:				; CODE XREF: sub_1002BE00+372j
		lea	eax, [esp+80h+var_70]
		push	eax
		lea	eax, [esp+84h+var_40]
		push	eax
		lea	eax, [esp+88h+var_70]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002C1BC
		cmp	[esp+80h+var_70], 0
		jnz	short loc_1002C150

loc_1002C174:				; CODE XREF: sub_1002BE00+34Ej
		mov	edi, [esp+80h+arg_8]
		lea	eax, [esp+80h+var_10]
		push	edi
		push	eax
		lea	eax, [esp+88h+var_70]
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002C1BC
		push	edi
		lea	eax, [esp+84h+var_60]
		push	edi
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002C1BC
		push	edi
		push	[esp+84h+arg_4]
		push	edi
		call	sub_10029A70
		add	esp, 0Ch
		mov	esi, eax

loc_1002C1BC:				; CODE XREF: sub_1002BE00+335j
					; sub_1002BE00+36Bj ...
		mov	ebp, [esp+80h+var_64]

loc_1002C1C0:				; CODE XREF: sub_1002BE00+314j
		mov	ebx, [esp+80h+var_44]

loc_1002C1C4:				; CODE XREF: sub_1002BE00+6Bj
					; sub_1002BE00+A4j ...
		mov	ecx, [esp+80h+var_4]
		mov	edi, ds:free
		test	ecx, ecx
		jz	short loc_1002C1EE
		mov	eax, [esp+80h+var_C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ecx		; void *
		call	memset
		push	[esp+8Ch+var_4]	; void *
		call	edi ; free
		add	esp, 10h

loc_1002C1EE:				; CODE XREF: sub_1002BE00+3D0j
		mov	ecx, [esp+80h+var_34]
		test	ecx, ecx
		jz	short loc_1002C20F
		mov	eax, [esp+80h+var_3C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ecx		; void *
		call	memset
		push	[esp+8Ch+var_34] ; void	*
		call	edi ; free
		add	esp, 10h

loc_1002C20F:				; CODE XREF: sub_1002BE00+3F4j
		mov	ecx, [esp+80h+var_54]
		test	ecx, ecx
		jz	short loc_1002C230
		mov	eax, [esp+80h+var_5C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ecx		; void *
		call	memset
		push	[esp+8Ch+var_54] ; void	*
		call	edi ; free
		add	esp, 10h

loc_1002C230:				; CODE XREF: sub_1002BE00+415j
		mov	ecx, [esp+80h+var_24]
		test	ecx, ecx
		jz	short loc_1002C251
		mov	eax, [esp+80h+var_2C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ecx		; void *
		call	memset
		push	[esp+8Ch+var_24] ; void	*
		call	edi ; free
		add	esp, 10h

loc_1002C251:				; CODE XREF: sub_1002BE00+436j
		mov	ecx, [esp+80h+var_14]
		test	ecx, ecx
		jz	short loc_1002C272
		mov	eax, [esp+80h+var_1C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ecx		; void *
		call	memset
		push	[esp+8Ch+var_14] ; void	*
		call	edi ; free
		add	esp, 10h

loc_1002C272:				; CODE XREF: sub_1002BE00+457j
		test	ebx, ebx
		jz	short loc_1002C28C
		mov	eax, [esp+80h+var_4C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ebx		; void *
		call	memset
		push	ebx		; void *
		call	edi ; free
		add	esp, 10h

loc_1002C28C:				; CODE XREF: sub_1002BE00+474j
		test	ebp, ebp
		jz	short loc_1002C2A6
		mov	eax, [esp+80h+var_6C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ebp		; void *
		call	memset
		push	ebp		; void *
		call	edi ; free
		add	esp, 10h

loc_1002C2A6:				; CODE XREF: sub_1002BE00+48Ej
		pop	edi
		pop	ebp
		pop	ebx
		mov	eax, esi
		pop	esi
		add	esp, 70h
		retn
sub_1002BE00	endp


; =============== S U B	R O U T	I N E =======================================


sub_1002C2B0	proc near		; CODE XREF: sub_100299A0+48p
					; sub_1002BE00+2ABp

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+1Ch+arg_0]
		test	edi, edi
		jz	loc_1002C3AC
		mov	esi, [esp+1Ch+arg_4]
		test	esi, esi
		jz	loc_1002C3AC
		mov	ebx, [esp+1Ch+arg_8]
		test	ebx, ebx
		jz	loc_1002C3AC
		cmp	dword ptr [edi], 1
		jz	short loc_1002C2F1
		cmp	dword ptr [edi+8], 1
		jnz	short loc_1002C2F1
		mov	eax, [edi+0Ch]
		cmp	dword ptr [eax], 0
		jz	loc_1002C3A0

loc_1002C2F1:				; CODE XREF: sub_1002C2B0+2Dj
					; sub_1002C2B0+33j
		push	esi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jz	loc_1002C3A0
		push	esi
		call	sub_10029A30
		add	esp, 4
		test	eax, eax
		jz	short loc_1002C31B
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFBh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002C31B:				; CODE XREF: sub_1002C2B0+5Dj
		mov	[esp+1Ch+var_4], 0
		cmp	edi, ebx
		jnz	short loc_1002C347
		lea	eax, [esp+1Ch+var_10]
		push	edi
		push	eax
		call	sub_100298D0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002C3B1
		cmp	edi, esi
		jnz	short loc_1002C341
		lea	esi, [esp+1Ch+var_10]

loc_1002C341:				; CODE XREF: sub_1002C2B0+8Bj
		lea	edi, [esp+1Ch+var_10]
		jmp	short loc_1002C36B
; ---------------------------------------------------------------------------

loc_1002C347:				; CODE XREF: sub_1002C2B0+75j
		cmp	esi, ebx
		jnz	short loc_1002C363
		lea	eax, [esp+1Ch+var_10]
		push	esi
		push	eax
		call	sub_100298D0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002C3B1
		lea	esi, [esp+1Ch+var_10]
		jmp	short loc_1002C36B
; ---------------------------------------------------------------------------

loc_1002C363:				; CODE XREF: sub_1002C2B0+99j
		mov	[esp+1Ch+var_4], 0

loc_1002C36B:				; CODE XREF: sub_1002C2B0+95j
					; sub_1002C2B0+B1j
		push	ebx
		push	esi
		push	edi
		call	sub_1002AD40
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_1002C38A
		push	ebx
		push	edi
		push	esi
		push	ebx
		call	sub_1002B8E0
		add	esp, 10h
		mov	edi, eax

loc_1002C38A:				; CODE XREF: sub_1002C2B0+CAj
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002C3A0:				; CODE XREF: sub_1002C2B0+3Bj
					; sub_1002C2B0+4Cj
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002C3AC:				; CODE XREF: sub_1002C2B0+Cj
					; sub_1002C2B0+18j ...
		mov	eax, 0FFFFFFFCh

loc_1002C3B1:				; CODE XREF: sub_1002C2B0+87j
					; sub_1002C2B0+ABj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
sub_1002C2B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C3C0	proc near		; CODE XREF: sub_10026B80+CDp
					; sub_100321D0+77p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ebx, 2
		mov	eax, edi
		mov	ecx, ebx
		imul	eax, edi
		mov	edx, ebx
		mov	esi, ebx
		sub	ecx, eax
		imul	ecx, edi
		mov	eax, ecx
		imul	eax, edi
		sub	edx, eax
		imul	edx, ecx
		mov	ecx, edx
		imul	ecx, edi
		sub	esi, ecx
		imul	esi, edx
		mov	ecx, esi
		imul	ecx, edi
		pop	edi
		sub	ebx, ecx
		imul	ebx, esi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
sub_1002C3C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1002C400	proc near		; CODE XREF: sub_1002B070+31p
					; sub_1002BE00+9p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	ecx, [eax+8]
		mov	esi, [eax+0Ch]
		dec	ecx
		mov	edx, [esi+ecx*4]
		test	edx, edx
		jz	short loc_1002C471
		lea	eax, [edx-1]
		test	edx, eax
		jnz	short loc_1002C471
		xor	eax, eax
		test	edx, 0FFFF0000h
		jz	short loc_1002C429
		mov	eax, 10h

loc_1002C429:				; CODE XREF: sub_1002C400+22j
		test	edx, 0FF00FF00h
		jz	short loc_1002C434
		add	eax, 8

loc_1002C434:				; CODE XREF: sub_1002C400+2Fj
		test	edx, 0F0F0F0F0h
		jz	short loc_1002C43F
		add	eax, 4

loc_1002C43F:				; CODE XREF: sub_1002C400+3Aj
		test	edx, 0CCCCCCCCh
		jz	short loc_1002C44A
		add	eax, 2

loc_1002C44A:				; CODE XREF: sub_1002C400+45j
		test	edx, 0AAAAAAAAh
		jz	short loc_1002C453
		inc	eax

loc_1002C453:				; CODE XREF: sub_1002C400+50j
		test	eax, eax
		js	short loc_1002C474
		test	ecx, ecx
		jz	short loc_1002C474
		dec	ecx
		js	short loc_1002C474
		lea	edx, [esi+ecx*4]

loc_1002C461:				; CODE XREF: sub_1002C400+6Dj
		cmp	dword ptr [edx], 0
		jnz	short loc_1002C471
		add	eax, 20h
		sub	edx, 4
		dec	ecx
		jns	short loc_1002C461
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002C471:				; CODE XREF: sub_1002C400+11j
					; sub_1002C400+18j ...
		or	eax, 0FFFFFFFFh

loc_1002C474:				; CODE XREF: sub_1002C400+55j
					; sub_1002C400+59j ...
		pop	esi
		retn
sub_1002C400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C480	proc near		; CODE XREF: sub_10029490+28p
					; sub_1002C7E0+3Cp

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_1002C4C9
		lea	eax, [ecx-1]
		test	ecx, eax
		jnz	short loc_1002C4C9
		xor	eax, eax
		test	ecx, 0FFFF0000h
		jz	short loc_1002C49E
		mov	eax, 10h

loc_1002C49E:				; CODE XREF: sub_1002C480+17j
		test	ecx, 0FF00FF00h
		jz	short loc_1002C4A9
		add	eax, 8

loc_1002C4A9:				; CODE XREF: sub_1002C480+24j
		test	ecx, 0F0F0F0F0h
		jz	short loc_1002C4B4
		add	eax, 4

loc_1002C4B4:				; CODE XREF: sub_1002C480+2Fj
		test	ecx, 0CCCCCCCCh
		jz	short loc_1002C4BF
		add	eax, 2

loc_1002C4BF:				; CODE XREF: sub_1002C480+3Aj
		test	ecx, 0AAAAAAAAh
		jz	short locret_1002C4CC
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_1002C4C9:				; CODE XREF: sub_1002C480+6j
					; sub_1002C480+Dj
		or	eax, 0FFFFFFFFh

locret_1002C4CC:			; CODE XREF: sub_1002C480+45j
		retn
sub_1002C480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C4D0	proc near		; CODE XREF: sub_10026B80+F9p
					; sub_10026DF0+19Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		test	ebx, ebx
		jnz	short loc_1002C4DD
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002C4DD:				; CODE XREF: sub_1002C4D0+7j
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	ecx, [esi+8]
		cmp	ecx, 1
		jnz	short loc_1002C4F7
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax], 0
		jnz	short loc_1002C4F7
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002C4F7:				; CODE XREF: sub_1002C4D0+18j
					; sub_1002C4D0+20j
		push	edi
		lea	edi, [ecx+ebx]
		cmp	edi, ecx
		jbe	short loc_1002C532
		cmp	edi, [esi+4]
		jbe	short loc_1002C516
		push	edi
		push	esi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002C52F
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002C516:				; CODE XREF: sub_1002C4D0+32j
		mov	eax, edi
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [esi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002C52F:				; CODE XREF: sub_1002C4D0+40j
		mov	[esi+8], edi

loc_1002C532:				; CODE XREF: sub_1002C4D0+2Dj
		mov	edx, [esi+8]
		sub	edx, ebx
		dec	edx
		js	short loc_1002C550
		lea	edi, [edx+ebx]
		shl	edi, 2

loc_1002C540:				; CODE XREF: sub_1002C4D0+7Ej
		mov	ecx, [esi+0Ch]
		lea	edi, [edi-4]
		mov	eax, [ecx+edx*4]
		dec	edx
		mov	[edi+ecx+4], eax
		jns	short loc_1002C540

loc_1002C550:				; CODE XREF: sub_1002C4D0+68j
		xor	ecx, ecx
		test	ebx, ebx
		jz	short loc_1002C56F
		jmp	short loc_1002C560
; ---------------------------------------------------------------------------
		align 10h

loc_1002C560:				; CODE XREF: sub_1002C4D0+86j
					; sub_1002C4D0+9Dj
		mov	eax, [esi+0Ch]
		mov	dword ptr [eax+ecx*4], 0
		inc	ecx
		cmp	ecx, ebx
		jb	short loc_1002C560

loc_1002C56F:				; CODE XREF: sub_1002C4D0+84j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1002C4D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C580	proc near		; CODE XREF: sub_10029420+54p
					; sub_1002B070+64p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, ecx
		shr	edi, 5
		cmp	edi, [esi+8]
		jnb	short loc_1002C5E2
		mov	eax, [esi+0Ch]
		and	ecx, 1Fh
		lea	edx, [eax+edi*4]
		mov	eax, 1
		shl	eax, cl
		lea	ecx, [edi+1]
		dec	eax
		and	[edx], eax
		cmp	ecx, [esi+8]
		jnb	short loc_1002C5C0
		nop

loc_1002C5B0:				; CODE XREF: sub_1002C580+3Ej
		mov	eax, [esi+0Ch]
		mov	dword ptr [eax+ecx*4], 0
		inc	ecx
		cmp	ecx, [esi+8]
		jb	short loc_1002C5B0

loc_1002C5C0:				; CODE XREF: sub_1002C580+2Dj
		mov	eax, [esi+8]
		cmp	eax, 1
		jbe	short loc_1002C5DF
		mov	ecx, [esi+0Ch]
		lea	ecx, [ecx+eax*4]
		add	ecx, 0FFFFFFFCh

loc_1002C5D1:				; CODE XREF: sub_1002C580+5Dj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002C5DF
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002C5D1

loc_1002C5DF:				; CODE XREF: sub_1002C580+46j
					; sub_1002C580+54j
		mov	[esi+8], eax

loc_1002C5E2:				; CODE XREF: sub_1002C580+12j
		pop	edi
		pop	esi
		retn
sub_1002C580	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C5F0	proc near		; CODE XREF: sub_10029D40+20p
					; sub_1002A1C0+F1p ...

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		xor	esi, esi
		mov	ebp, [edi+8]
		mov	edx, [edi+0Ch]
		test	ebp, ebp
		jle	loc_1002C6A7
		mov	ebx, ebp
		lea	ebx, [ebx+0]

loc_1002C610:				; CODE XREF: sub_1002C5F0+33j
		mov	ecx, [edx]
		lea	edx, [edx+4]
		lea	eax, [ecx+ecx]
		or	eax, esi
		mov	esi, ecx
		shr	esi, 1Fh
		mov	[edx-4], eax
		dec	ebx
		jnz	short loc_1002C610
		test	esi, esi
		jz	short loc_1002C6A7
		mov	eax, [edi+4]
		cmp	ebp, eax
		jb	short loc_1002C69E
		lea	edx, [eax+1]
		cmp	edx, eax
		jbe	short loc_1002C69E
		mov	ecx, dword_1004E218
		push	4		; size_t
		lea	eax, [ecx-1]
		add	eax, edx
		xor	edx, edx
		div	ecx
		imul	eax, ecx
		push	eax		; size_t
		mov	[esp+18h+arg_0], eax
		call	ds:calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_1002C6AE
		mov	ecx, [edi+8]
		shl	ecx, 2
		push	ecx		; size_t
		push	dword ptr [edi+0Ch] ; void *
		push	ebx		; void *
		call	memcpy
		mov	eax, [edi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [edi+0Ch] ; void *
		call	memset
		mov	eax, [edi+0Ch]
		add	esp, 18h
		test	eax, eax
		jz	short loc_1002C694
		push	eax		; void *
		call	ds:free
		add	esp, 4

loc_1002C694:				; CODE XREF: sub_1002C5F0+98j
		mov	eax, [esp+10h+arg_0]
		mov	[edi+0Ch], ebx
		mov	[edi+4], eax

loc_1002C69E:				; CODE XREF: sub_1002C5F0+3Ej
					; sub_1002C5F0+45j
		mov	eax, [edi+0Ch]
		mov	[eax+ebp*4], esi
		inc	dword ptr [edi+8]

loc_1002C6A7:				; CODE XREF: sub_1002C5F0+12j
					; sub_1002C5F0+37j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002C6AE:				; CODE XREF: sub_1002C5F0+6Dj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFEh
		pop	ebx
		retn
sub_1002C5F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C6C0	proc near		; CODE XREF: sub_10028BD0+24p
					; sub_1002AD40+123p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		test	esi, esi
		jnz	short loc_1002C6D4
		lea	eax, [esi-4]
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002C6D4:				; CODE XREF: sub_1002C6C0+Aj
		mov	edx, [esi+8]
		mov	eax, [esi+0Ch]
		push	ebx
		mov	ebx, [esp+10h+arg_4]
		push	ebp
		lea	eax, [eax+edx*4]
		mov	ebp, ebx
		push	edi
		and	ebx, 1Fh
		mov	[esp+18h+var_8], eax
		or	edi, 0FFFFFFFFh
		shr	ebp, 5
		mov	eax, 20h
		mov	[esp+18h+arg_4], ebx
		sub	eax, ebx
		mov	ecx, eax
		mov	[esp+18h+var_4], eax
		shl	edi, cl
		mov	ecx, [esp+18h+var_8]
		and	edi, [ecx-4]
		neg	edi
		sbb	edi, edi
		neg	edi
		add	edi, edx
		add	edi, ebp
		cmp	edi, edx
		jbe	short loc_1002C74C
		cmp	edi, [esi+4]
		jbe	short loc_1002C736
		push	edi
		push	esi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002C749
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002C736:				; CODE XREF: sub_1002C6C0+5Ej
		mov	eax, edi
		sub	eax, edx
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ecx		; void *
		call	memset
		add	esp, 0Ch

loc_1002C749:				; CODE XREF: sub_1002C6C0+6Cj
		mov	[esi+8], edi

loc_1002C74C:				; CODE XREF: sub_1002C6C0+59j
		test	ebp, ebp
		jz	short loc_1002C75E
		push	ebp
		push	esi
		call	sub_1002C4D0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002C7D7

loc_1002C75E:				; CODE XREF: sub_1002C6C0+8Ej
		test	ebx, ebx
		jz	short loc_1002C7B3
		mov	ecx, [esi+0Ch]
		xor	ebx, ebx
		mov	eax, [esi+8]
		lea	edi, [ecx+ebp*4]
		xor	ebp, ebp
		lea	edx, [ecx+eax*4]
		mov	eax, edx
		sub	eax, edi
		add	eax, 3
		shr	eax, 2
		cmp	edx, edi
		sbb	ecx, ecx
		not	ecx
		and	ecx, eax
		mov	[esp+18h+var_8], ecx
		jbe	short loc_1002C7B3
		mov	esi, [esp+18h+arg_4]
		mov	edi, edi

loc_1002C790:				; CODE XREF: sub_1002C6C0+EDj
		mov	edx, [edi]
		lea	edi, [edi+4]
		mov	ecx, esi
		mov	eax, edx
		shl	eax, cl
		inc	ebp
		mov	ecx, [esp+18h+var_4]
		or	eax, ebx
		mov	ebx, edx
		mov	[edi-4], eax
		shr	ebx, cl
		cmp	ebp, [esp+18h+var_8]
		jb	short loc_1002C790
		mov	esi, [esp+18h+arg_0]

loc_1002C7B3:				; CODE XREF: sub_1002C6C0+A0j
					; sub_1002C6C0+C8j
		mov	ecx, [esi+8]
		cmp	ecx, 1
		jbe	short loc_1002C7D2
		mov	eax, [esi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_1002C7C4:				; CODE XREF: sub_1002C6C0+110j
		cmp	dword ptr [eax], 0
		jnz	short loc_1002C7D2
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002C7C4

loc_1002C7D2:				; CODE XREF: sub_1002C6C0+F9j
					; sub_1002C6C0+107j
		mov	[esi+8], ecx
		xor	eax, eax

loc_1002C7D7:				; CODE XREF: sub_1002C6C0+9Cj
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 8
		retn
sub_1002C6C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C7E0	proc near		; CODE XREF: sub_10029D80+50p
					; sub_10029E90+A2p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jnz	short loc_1002C816
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1002C812
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0

loc_1002C812:				; CODE XREF: sub_1002C7E0+Fj
					; sub_1002C7E0+39j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002C816:				; CODE XREF: sub_1002C7E0+7j
		cmp	esi, 1
		jz	short loc_1002C812
		push	esi
		call	sub_1002C480
		add	esp, 4
		test	eax, eax
		js	short loc_1002C832
		pop	esi
		mov	[esp+arg_4], eax
		jmp	sub_1002C6C0
; ---------------------------------------------------------------------------

loc_1002C832:				; CODE XREF: sub_1002C7E0+46j
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	ebx, [edi+8]
		lea	eax, [ebx+1]
		push	eax
		push	edi
		call	sub_1002C8E0
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		js	short loc_1002C881
		mov	ecx, [edi+0Ch]
		push	ecx
		push	esi
		push	ebx
		push	ecx
		call	sub_1002D930
		mov	ecx, [edi+8]
		add	esp, 10h
		cmp	ecx, 1
		jbe	short loc_1002C87E
		mov	eax, [edi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh
		nop

loc_1002C870:				; CODE XREF: sub_1002C7E0+9Cj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002C87E
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002C870

loc_1002C87E:				; CODE XREF: sub_1002C7E0+84j
					; sub_1002C7E0+93j
		mov	[edi+8], ecx

loc_1002C881:				; CODE XREF: sub_1002C7E0+6Dj
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	esi
		retn
sub_1002C7E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C890	proc near		; CODE XREF: sub_1002B070+A4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		xor	edx, edx
		xor	esi, esi
		mov	ecx, [edi+8]
		mov	eax, [edi+0Ch]
		mov	eax, [eax+ecx*4-4]
		test	eax, eax
		js	short loc_1002C8D2

loc_1002C8A8:				; CODE XREF: sub_1002C890+1Bj
		inc	esi
		add	eax, eax
		jns	short loc_1002C8A8
		test	esi, esi
		jz	short loc_1002C8D2
		push	esi
		push	[esp+0Ch+arg_0]
		call	sub_1002C6C0
		add	esp, 8
		test	eax, eax
		js	short loc_1002C8DA
		push	esi
		push	edi
		call	sub_1002C6C0
		mov	edx, eax
		add	esp, 8
		test	edx, edx
		js	short loc_1002C8D8

loc_1002C8D2:				; CODE XREF: sub_1002C890+16j
					; sub_1002C890+1Fj
		mov	eax, [esp+8+arg_8]
		mov	[eax], esi

loc_1002C8D8:				; CODE XREF: sub_1002C890+40j
		mov	eax, edx

loc_1002C8DA:				; CODE XREF: sub_1002C890+30j
		pop	edi
		pop	esi
		retn
sub_1002C890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C8E0	proc near		; CODE XREF: sub_10026830+108p
					; sub_100287E0+65p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	ecx, [esi+8]
		cmp	edi, ecx
		jbe	short loc_1002C923
		cmp	edi, [esi+4]
		jbe	short loc_1002C907
		push	edi
		push	esi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002C920
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002C907:				; CODE XREF: sub_1002C8E0+14j
		mov	eax, edi
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [esi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002C920:				; CODE XREF: sub_1002C8E0+22j
		mov	[esi+8], edi

loc_1002C923:				; CODE XREF: sub_1002C8E0+Fj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_1002C8E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C930	proc near		; CODE XREF: sub_1002B5D0+1B9p
					; sub_1002B5D0+1EFp ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		lea	eax, [esp+10h+var_10]
		push	edi
		mov	edi, [esp+14h+arg_0]
		push	edi
		push	eax
		call	sub_100298D0
		add	esp, 8
		test	eax, eax
		jnz	loc_1002CA74
		push	ebx
		mov	ebx, [esp+18h+arg_4]
		push	esi
		mov	eax, [ebx+8]
		dec	eax
		push	eax
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_1002CA80
		lea	eax, [esp+24h+var_10]
		push	eax
		push	[esp+28h+arg_8]
		push	eax
		call	sub_10029B70
		mov	eax, [ebx+8]
		inc	eax
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_1002CA80
		mov	eax, [ebx+8]
		inc	eax
		shl	eax, 5
		push	eax
		push	edi
		call	sub_1002C580
		lea	eax, [esp+40h+var_10]
		push	eax
		push	ebx
		push	eax
		call	sub_10029B70
		mov	eax, [ebx+8]
		inc	eax
		shl	eax, 5
		push	eax
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_1002C580
		push	edi
		lea	eax, [esp+58h+var_10]
		push	eax
		push	edi
		call	sub_1002A540
		mov	esi, eax
		add	esp, 44h
		test	esi, esi
		jnz	loc_1002CA4E
		cmp	dword ptr [edi], 1
		jnz	short loc_1002CA20
		mov	eax, [esp+1Ch+var_C]
		shl	eax, 2
		push	eax		; size_t
		push	esi		; int
		mov	esi, [esp+24h+var_4]
		push	esi		; void *
		call	memset
		mov	dword ptr [esi], 1
		mov	eax, [ebx+8]
		inc	eax
		mov	[esp+28h+var_8], 1
		push	eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_10], 0
		push	eax
		call	sub_1002C4D0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1002CA4E
		push	edi
		lea	eax, [esp+20h+var_10]
		push	eax
		push	edi
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002CA4E

loc_1002CA20:				; CODE XREF: sub_1002C930+98j
		push	ebx
		push	edi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		js	short loc_1002CA4E
		mov	edi, edi

loc_1002CA30:				; CODE XREF: sub_1002C930+11Cj
		push	ebx
		push	edi
		call	sub_1002CBE0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1002CA4E
		push	ebx
		push	edi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	short loc_1002CA30

loc_1002CA4E:				; CODE XREF: sub_1002C930+8Fj
					; sub_1002C930+D9j ...
		mov	edi, [esp+1Ch+var_4]
		test	edi, edi
		jz	short loc_1002CA70
		mov	eax, [esp+1Ch+var_C]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	edi		; void *
		call	memset
		push	edi		; void *
		call	ds:free
		add	esp, 10h

loc_1002CA70:				; CODE XREF: sub_1002C930+124j
		mov	eax, esi
		pop	esi
		pop	ebx

loc_1002CA74:				; CODE XREF: sub_1002C930+17j
		pop	edi
		add	esp, 10h
		retn
sub_1002C930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CA80	proc near		; CODE XREF: sub_100287E0+17Dp
					; sub_100289A0+79p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		test	ebx, ebx
		jz	short loc_1002CAE0
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	ecx, [esi+8]
		cmp	ebx, ecx
		jb	short loc_1002CAB9
		mov	eax, [esi+4]
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	dword ptr [esi+0Ch] ; void *
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002CAB9:				; CODE XREF: sub_1002CA80+13j
		push	edi
		mov	edi, [esi+0Ch]
		lea	edx, [edi+ebx*4]
		sub	ecx, ebx
		jz	short loc_1002CAD1

loc_1002CAC4:				; CODE XREF: sub_1002CA80+4Fj
		mov	eax, [edx]
		lea	edx, [edx+4]
		mov	[edi], eax
		add	edi, 4
		dec	ecx
		jnz	short loc_1002CAC4

loc_1002CAD1:				; CODE XREF: sub_1002CA80+42j
		sub	[esi+8], ebx
		test	ebx, ebx
		jz	short loc_1002CADE
		mov	ecx, ebx
		xor	eax, eax
		rep stosd

loc_1002CADE:				; CODE XREF: sub_1002CA80+56j
		pop	edi
		pop	esi

loc_1002CAE0:				; CODE XREF: sub_1002CA80+7j
		pop	ebx
		retn
sub_1002CA80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CAF0	proc near		; CODE XREF: sub_1002B5D0+1D2p
					; sub_1002B5D0+272p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 14h
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		push	esi
		mov	eax, [ebx+8]
		add	eax, eax
		jz	loc_1002CBCB
		mov	ecx, dword_1004E218
		dec	eax
		add	eax, ecx
		xor	edx, edx
		div	ecx
		push	4		; size_t
		mov	esi, eax
		imul	esi, ecx
		push	esi		; size_t
		call	ds:calloc
		add	esp, 8
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		jnz	short loc_1002CB35
		pop	esi
		mov	eax, 0FFFFFFFEh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1002CB35:				; CODE XREF: sub_1002CAF0+38j
		push	ebp
		lea	eax, [esp+20h+var_10]
		mov	[esp+20h+var_10], 0
		push	eax
		push	ebx
		mov	[esp+28h+var_8], 1
		mov	[esp+28h+var_C], esi
		call	sub_1002A1C0
		mov	esi, eax
		add	esp, 8
		mov	[esp+20h+arg_0], esi
		test	esi, esi
		jnz	short loc_1002CBA0
		mov	eax, [ebx]
		mov	ecx, [esp+20h+var_10]
		mov	ebp, [ebx+0Ch]
		mov	esi, [esp+20h+var_8]
		mov	edx, [esp+20h+var_C]
		mov	[esp+20h+var_10], eax
		mov	eax, [ebx+4]
		mov	[esp+20h+var_14], eax
		mov	eax, [ebx+8]
		mov	[ebx], ecx
		push	edi
		mov	edi, [esp+24h+var_4]
		mov	[ebx+4], edx
		mov	[ebx+8], esi
		mov	esi, [esp+24h+arg_0]
		mov	[esp+24h+var_8], eax
		mov	eax, [esp+24h+var_14]
		mov	[ebx+0Ch], edi
		pop	edi
		jmp	short loc_1002CBA8
; ---------------------------------------------------------------------------

loc_1002CBA0:				; CODE XREF: sub_1002CAF0+70j
		mov	ebp, [esp+20h+var_4]
		mov	eax, [esp+20h+var_C]

loc_1002CBA8:				; CODE XREF: sub_1002CAF0+AEj
		test	ebp, ebp
		jz	short loc_1002CBC2
		shl	eax, 2
		push	eax		; size_t
		push	0		; int
		push	ebp		; void *
		call	memset
		push	ebp		; void *
		call	ds:free
		add	esp, 10h

loc_1002CBC2:				; CODE XREF: sub_1002CAF0+BAj
		pop	ebp
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1002CBCB:				; CODE XREF: sub_1002CAF0+Ej
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 14h
		retn
sub_1002CAF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CBE0	proc near		; CODE XREF: sub_100287E0+192p
					; sub_100289A0+8Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		mov	edi, [ecx+0Ch]
		xor	esi, esi
		mov	ecx, [ecx+8]
		mov	eax, [ebp+0Ch]
		lea	ebx, [edi+ecx*4]
		cmp	edi, ebx
		jnb	short loc_1002CC23
		mov	edi, edi

loc_1002CC00:				; CODE XREF: sub_1002CBE0+41j
		mov	edx, [eax]
		sub	edx, [edi]
		add	edi, 4
		cmp	[eax], edx
		sbb	ecx, ecx
		neg	ecx
		test	esi, esi
		jz	short loc_1002CC18
		dec	edx
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_1002CC18
		inc	ecx

loc_1002CC18:				; CODE XREF: sub_1002CBE0+2Fj
					; sub_1002CBE0+35j
		mov	[eax], edx
		mov	esi, ecx
		add	eax, 4
		cmp	edi, ebx
		jb	short loc_1002CC00

loc_1002CC23:				; CODE XREF: sub_1002CBE0+1Cj
		mov	edx, [ebp+8]
		mov	ecx, [ebp+0Ch]
		lea	edi, [ecx+edx*4]
		test	esi, esi
		jz	short loc_1002CC47

loc_1002CC30:				; CODE XREF: sub_1002CBE0+65j
		cmp	eax, edi
		jnb	short loc_1002CC47
		mov	edx, [eax]
		mov	ecx, edx
		sub	ecx, esi
		mov	[eax], ecx
		add	eax, 4
		cmp	edx, ecx
		sbb	esi, esi
		neg	esi
		jnz	short loc_1002CC30

loc_1002CC47:				; CODE XREF: sub_1002CBE0+4Ej
					; sub_1002CBE0+52j
		mov	ecx, [ebp+8]
		cmp	ecx, 1
		jbe	short loc_1002CC66
		mov	eax, [ebp+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_1002CC58:				; CODE XREF: sub_1002CBE0+84j
		cmp	dword ptr [eax], 0
		jnz	short loc_1002CC66
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002CC58

loc_1002CC66:				; CODE XREF: sub_1002CBE0+6Dj
					; sub_1002CBE0+7Bj
		neg	esi
		mov	[ebp+8], ecx
		pop	edi
		sbb	esi, esi
		and	esi, 0FFFFFFFDh
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1002CBE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CC80	proc near		; CODE XREF: sub_10028D40:loc_10028D80p
					; sub_1002A540+72p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_8]
		xor	esi, esi
		mov	eax, [ebp+0]
		mov	ecx, [edi+8]
		mov	[edi], eax
		mov	ebx, [ebp+8]
		cmp	ebx, ecx
		jbe	short loc_1002CCD7
		cmp	ebx, [edi+4]
		jbe	short loc_1002CCBB
		push	ebx
		push	edi
		call	sub_1002BA50
		add	esp, 8
		test	eax, eax
		jz	short loc_1002CCD4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002CCBB:				; CODE XREF: sub_1002CC80+23j
		mov	eax, ebx
		sub	eax, ecx
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [edi+0Ch]
		push	0		; int
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1002CCD4:				; CODE XREF: sub_1002CC80+31j
		mov	[edi+8], ebx

loc_1002CCD7:				; CODE XREF: sub_1002CC80+1Ej
		mov	eax, [esp+18h+arg_4]
		xor	edx, edx
		mov	ebx, [ebp+0Ch]
		mov	edi, [edi+0Ch]
		mov	ebp, [eax+8]
		mov	ecx, [eax+0Ch]
		test	ebp, ebp
		jle	short loc_1002CD1F
		mov	[esp+18h+var_4], ebp
		mov	edx, ecx

loc_1002CCF3:				; CODE XREF: sub_1002CC80+99j
		mov	eax, [ebx]
		lea	edx, [edx+4]
		mov	ecx, eax
		add	ebx, 4
		sub	ecx, [edx-4]
		cmp	eax, ecx
		sbb	eax, eax
		neg	eax
		test	esi, esi
		jz	short loc_1002CD11
		dec	ecx
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_1002CD11
		inc	eax

loc_1002CD11:				; CODE XREF: sub_1002CC80+88j
					; sub_1002CC80+8Ej
		mov	[edi], ecx
		mov	esi, eax
		add	edi, 4
		dec	ebp
		jnz	short loc_1002CCF3
		mov	edx, [esp+18h+var_4]

loc_1002CD1F:				; CODE XREF: sub_1002CC80+6Bj
		mov	ebp, [esp+18h+arg_0]
		mov	ebp, [ebp+8]
		cmp	edx, ebp
		jge	short loc_1002CD48
		sub	ebp, edx
		add	edx, ebp
		mov	edi, edi

loc_1002CD30:				; CODE XREF: sub_1002CC80+C6j
		mov	ecx, [ebx]
		lea	ebx, [ebx+4]
		mov	eax, ecx
		lea	edi, [edi+4]
		sub	eax, esi
		cmp	ecx, eax
		mov	[edi-4], eax
		sbb	esi, esi
		neg	esi
		dec	ebp
		jnz	short loc_1002CD30

loc_1002CD48:				; CODE XREF: sub_1002CC80+A8j
		mov	ecx, [esp+18h+arg_8]
		mov	[ecx+8], edx
		cmp	edx, 1
		jbe	short loc_1002CD6E
		mov	eax, [ecx+0Ch]
		lea	eax, [eax+edx*4]
		add	eax, 0FFFFFFFCh
		lea	ecx, [ecx+0]

loc_1002CD60:				; CODE XREF: sub_1002CC80+ECj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002CD6E
		dec	edx
		sub	eax, 4
		cmp	edx, 1
		ja	short loc_1002CD60

loc_1002CD6E:				; CODE XREF: sub_1002CC80+D2j
					; sub_1002CC80+E3j
		neg	esi
		mov	[ecx+8], edx
		pop	edi
		sbb	esi, esi
		and	esi, 0FFFFFFFDh
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
sub_1002CC80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CD90	proc near		; CODE XREF: sub_10028DB0+64p
					; sub_1002A600+7Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		mov	edx, [ebx+0Ch]
		mov	esi, [ebx+8]
		mov	ecx, [edx]
		mov	eax, ecx
		sub	eax, [esp+0Ch+arg_4]
		mov	[edx], eax
		add	edx, 4
		cmp	ecx, eax
		sbb	edi, edi
		neg	edi
		jz	short loc_1002CDC8

loc_1002CDB2:				; CODE XREF: sub_1002CD90+36j
		dec	esi
		jz	short loc_1002CDC8
		mov	ecx, [edx]
		mov	eax, ecx
		sub	eax, edi
		mov	[edx], eax
		add	edx, 4
		cmp	ecx, eax
		sbb	edi, edi
		neg	edi
		jnz	short loc_1002CDB2

loc_1002CDC8:				; CODE XREF: sub_1002CD90+20j
					; sub_1002CD90+23j
		mov	ecx, [ebx+8]
		cmp	ecx, 1
		jbe	short loc_1002CDEE
		mov	eax, [ebx+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh
		lea	esp, [esp+0]

loc_1002CDE0:				; CODE XREF: sub_1002CD90+5Cj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002CDEE
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002CDE0

loc_1002CDEE:				; CODE XREF: sub_1002CD90+3Ej
					; sub_1002CD90+53j
		mov	[ebx+8], ecx
		test	edi, edi
		jz	short loc_1002CE00
		test	esi, esi
		jnz	short loc_1002CE00
		pop	edi
		lea	eax, [esi-3]
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002CE00:				; CODE XREF: sub_1002CD90+63j
					; sub_1002CD90+67j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1002CD90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CE10	proc near		; CODE XREF: sub_10029E90+47p
					; sub_10029E90+8Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 24h
		mov	eax, [esp+arg_0]
		push	esi
		jle	short loc_1002CE21
		movsx	esi, al
		jmp	short loc_1002CE30
; ---------------------------------------------------------------------------

loc_1002CE21:				; CODE XREF: sub_1002CE10+Aj
		movsx	eax, al
		push	eax		; int
		call	ds:toupper
		add	esp, 4
		mov	esi, eax

loc_1002CE30:				; CODE XREF: sub_1002CE10+Fj
		push	esi		; int
		call	ds:isdigit
		add	esp, 4
		test	eax, eax
		jz	short loc_1002CE43
		lea	eax, [esi-30h]
		jmp	short loc_1002CE67
; ---------------------------------------------------------------------------

loc_1002CE43:				; CODE XREF: sub_1002CE10+2Cj
		push	esi		; int
		call	ds:isupper
		add	esp, 4
		test	eax, eax
		jz	short loc_1002CE56
		lea	eax, [esi-37h]
		jmp	short loc_1002CE67
; ---------------------------------------------------------------------------

loc_1002CE56:				; CODE XREF: sub_1002CE10+3Fj
		push	esi		; int
		call	ds:islower
		add	esp, 4
		test	eax, eax
		jz	short loc_1002CE6D
		lea	eax, [esi-3Dh]

loc_1002CE67:				; CODE XREF: sub_1002CE10+31j
					; sub_1002CE10+44j
		test	eax, eax
		js	short loc_1002CE87
		jmp	short loc_1002CE81
; ---------------------------------------------------------------------------

loc_1002CE6D:				; CODE XREF: sub_1002CE10+52j
		cmp	esi, 2Bh
		jnz	short loc_1002CE77
		lea	eax, [esi+13h]
		jmp	short loc_1002CE81
; ---------------------------------------------------------------------------

loc_1002CE77:				; CODE XREF: sub_1002CE10+60j
		cmp	esi, 2Fh
		jnz	short loc_1002CE87
		mov	eax, 3Fh

loc_1002CE81:				; CODE XREF: sub_1002CE10+5Bj
					; sub_1002CE10+65j
		cmp	eax, [esp+4+arg_4]
		jl	short loc_1002CE8A

loc_1002CE87:				; CODE XREF: sub_1002CE10+59j
					; sub_1002CE10+6Aj
		or	eax, 0FFFFFFFFh

loc_1002CE8A:				; CODE XREF: sub_1002CE10+75j
		pop	esi
		retn
sub_1002CE10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CE90	proc near		; CODE XREF: sub_1000DF00+10Ep
					; sub_1000E240+71p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		mov	ebx, [ecx+8]
		push	esi
		push	edi
		mov	eax, [ebp+8]
		cmp	eax, ebx
		jb	short loc_1002CEB0
		mov	esi, [ebp+0Ch]
		mov	edi, eax
		mov	ebp, [ecx+0Ch]
		jmp	short loc_1002CEBA
; ---------------------------------------------------------------------------

loc_1002CEB0:				; CODE XREF: sub_1002CE90+14j
		mov	esi, [ecx+0Ch]
		mov	edi, ebx
		mov	ebp, [ebp+0Ch]
		mov	ebx, eax

loc_1002CEBA:				; CODE XREF: sub_1002CE90+1Ej
		push	edi
		push	[esp+14h+arg_8]
		call	sub_1002C8E0
		mov	edx, eax
		add	esp, 8
		mov	[esp+10h+arg_4], edx
		test	edx, edx
		js	short loc_1002CF41
		mov	eax, [esp+10h+arg_8]
		mov	ecx, [eax+0Ch]
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_1002CEF8
		sub	ebp, esi
		mov	[esp+10h+arg_0], ebx

loc_1002CEE4:				; CODE XREF: sub_1002CE90+62j
		mov	eax, [esi+ebp]
		xor	eax, [esi]
		add	esi, 4
		mov	[ecx], eax
		add	ecx, 4
		dec	ebx
		jnz	short loc_1002CEE4
		mov	eax, [esp+10h+arg_0]

loc_1002CEF8:				; CODE XREF: sub_1002CE90+4Cj
		cmp	eax, edi
		jnb	short loc_1002CF12
		mov	edx, edi
		sub	ecx, esi
		sub	edx, eax

loc_1002CF02:				; CODE XREF: sub_1002CE90+7Cj
		mov	eax, [esi]
		lea	esi, [esi+4]
		mov	[ecx+esi-4], eax
		dec	edx
		jnz	short loc_1002CF02
		mov	edx, [esp+10h+arg_4]

loc_1002CF12:				; CODE XREF: sub_1002CE90+6Aj
		mov	ecx, [esp+10h+arg_8]
		mov	[ecx+8], edi
		mov	dword ptr [ecx], 0
		cmp	edi, 1
		jbe	short loc_1002CF3E
		mov	eax, [ecx+0Ch]
		lea	eax, [eax+edi*4]
		add	eax, 0FFFFFFFCh
		lea	ecx, [ecx+0]

loc_1002CF30:				; CODE XREF: sub_1002CE90+ACj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002CF3E
		dec	edi
		sub	eax, 4
		cmp	edi, 1
		ja	short loc_1002CF30

loc_1002CF3E:				; CODE XREF: sub_1002CE90+92j
					; sub_1002CE90+A3j
		mov	[ecx+8], edi

loc_1002CF41:				; CODE XREF: sub_1002CE90+3Fj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, edx
		pop	ebx
		retn
sub_1002CE90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CF50	proc near		; CODE XREF: sub_1002D2B0+38p
					; sub_1002D300+134p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	eax, [esp+10h+arg_0]
		push	esi
		mov	esi, [esp+14h+arg_8]
		mov	[esp+14h+var_8], 0
		cmp	eax, esi
		jz	short loc_1002CF80
		push	esi
		push	eax
		call	sub_100290F0
		mov	ecx, eax
		add	esp, 8
		mov	[esp+14h+var_8], ecx
		test	ecx, ecx
		js	loc_1002D10C

loc_1002CF80:				; CODE XREF: sub_1002CF50+16j
		mov	edx, [esi+0Ch]
		push	ebx
		mov	ebx, [esi+8]
		push	ebp
		push	edi
		mov	edi, [esp+20h+arg_4]
		dec	ebx
		mov	[esp+20h+arg_0], edx
		mov	[esp+20h+var_10], ebx
		mov	ebp, [edi]
		shr	ebp, 5
		mov	[esp+20h+var_4], ebp
		cmp	ebx, ebp
		jle	loc_1002D053
		mov	eax, ebx
		sub	eax, ebp
		lea	esi, [edx+eax*4]
		mov	[esp+20h+var_C], esi

loc_1002CFB2:				; CODE XREF: sub_1002CF50+F9j
		mov	ebp, [edx+ebx*4]
		lea	eax, [edx+ebx*4]
		test	ebp, ebp
		jnz	short loc_1002CFCD
		dec	ebx
		sub	esi, 4
		mov	[esp+20h+var_10], ebx
		mov	[esp+20h+var_C], esi
		jmp	loc_1002D043
; ---------------------------------------------------------------------------

loc_1002CFCD:				; CODE XREF: sub_1002CF50+6Aj
		mov	dword ptr [eax], 0
		mov	edx, 1
		cmp	dword ptr [edi+4], 0
		lea	eax, [edi+4]
		jbe	short loc_1002D022

loc_1002CFE1:				; CODE XREF: sub_1002CF50+CCj
		mov	ecx, [edi]
		sub	ecx, [eax]
		mov	eax, ebp
		mov	esi, ecx
		sar	ecx, 5
		sub	ebx, ecx
		and	esi, 1Fh
		mov	ecx, [esp+20h+arg_0]
		lea	ebx, [ecx+ebx*4]
		mov	ecx, esi
		shr	eax, cl
		xor	[ebx], eax
		test	esi, esi
		jz	short loc_1002D010
		mov	ecx, 20h
		mov	eax, ebp
		sub	ecx, esi
		shl	eax, cl
		xor	[ebx-4], eax

loc_1002D010:				; CODE XREF: sub_1002CF50+B0j
		mov	ebx, [esp+20h+var_10]
		inc	edx
		cmp	dword ptr [edi+edx*4], 0
		lea	eax, [edi+edx*4]
		ja	short loc_1002CFE1
		mov	esi, [esp+20h+var_C]

loc_1002D022:				; CODE XREF: sub_1002CF50+8Fj
		mov	edx, [edi]
		mov	eax, ebp
		and	edx, 1Fh
		mov	ecx, edx
		shr	eax, cl
		xor	[esi], eax
		test	edx, edx
		jz	short loc_1002D03F
		mov	ecx, 20h
		sub	ecx, edx
		shl	ebp, cl
		xor	[esi-4], ebp

loc_1002D03F:				; CODE XREF: sub_1002CF50+E1j
		mov	edx, [esp+20h+arg_0]

loc_1002D043:				; CODE XREF: sub_1002CF50+78j
		mov	ebp, [esp+20h+var_4]
		cmp	ebx, ebp
		jg	loc_1002CFB2
		mov	esi, [esp+20h+arg_8]

loc_1002D053:				; CODE XREF: sub_1002CF50+51j
		jnz	loc_1002D0E3
		lea	ebx, [edx+ebp*4]
		mov	[esp+20h+var_4], ebx

loc_1002D060:				; CODE XREF: sub_1002CF50+14Bj
					; sub_1002CF50+18Dj
		mov	ecx, [edi]
		mov	eax, [ebx]
		and	ecx, 1Fh
		mov	ebp, eax
		shr	ebp, cl
		test	ebp, ebp
		jz	short loc_1002D0DF
		mov	edx, 20h
		sub	edx, ecx
		test	ecx, ecx
		jz	short loc_1002D084
		mov	ecx, edx
		shl	eax, cl
		shr	eax, cl
		mov	[ebx], eax
		jmp	short loc_1002D08A
; ---------------------------------------------------------------------------

loc_1002D084:				; CODE XREF: sub_1002CF50+128j
		mov	dword ptr [ebx], 0

loc_1002D08A:				; CODE XREF: sub_1002CF50+132j
		mov	edx, [esp+20h+arg_0]
		lea	ecx, [edi+4]
		mov	eax, 1
		xor	[edx], ebp
		cmp	dword ptr [ecx], 0
		jbe	short loc_1002D060
		lea	ecx, [ecx+0]

loc_1002D0A0:				; CODE XREF: sub_1002CF50+187j
		mov	esi, [ecx]
		mov	ecx, esi
		shr	ecx, 5
		and	esi, 1Fh
		lea	ebx, [edx+ecx*4]
		mov	ecx, esi
		mov	edx, ebp
		shl	edx, cl
		mov	ecx, 20h
		xor	[ebx], edx
		sub	ecx, esi
		mov	edx, ebp
		shr	edx, cl
		test	esi, esi
		jz	short loc_1002D0CB
		test	edx, edx
		jz	short loc_1002D0CB
		xor	[ebx+4], edx

loc_1002D0CB:				; CODE XREF: sub_1002CF50+172j
					; sub_1002CF50+176j
		mov	edx, [esp+20h+arg_0]
		inc	eax
		cmp	dword ptr [edi+eax*4], 0
		lea	ecx, [edi+eax*4]
		ja	short loc_1002D0A0
		mov	ebx, [esp+20h+var_4]
		jmp	short loc_1002D060
; ---------------------------------------------------------------------------

loc_1002D0DF:				; CODE XREF: sub_1002CF50+11Dj
		mov	esi, [esp+20h+arg_8]

loc_1002D0E3:				; CODE XREF: sub_1002CF50:loc_1002D053j
		mov	ecx, [esi+8]
		pop	edi
		pop	ebp
		pop	ebx
		cmp	ecx, 1
		jbe	short loc_1002D105
		mov	eax, [esi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_1002D0F7:				; CODE XREF: sub_1002CF50+1B3j
		cmp	dword ptr [eax], 0
		jnz	short loc_1002D105
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002D0F7

loc_1002D105:				; CODE XREF: sub_1002CF50+19Cj
					; sub_1002CF50+1AAj
		mov	eax, [esp+14h+var_8]
		mov	[esi+8], ecx

loc_1002D10C:				; CODE XREF: sub_1002CF50+2Aj
		pop	esi
		add	esp, 10h
		retn
sub_1002CF50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D120	proc near		; CODE XREF: sub_1002D2B0+26p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		push	ebx
		mov	ebx, [esp+20h+arg_0]
		mov	[esp+20h+var_4], 0
		push	esi
		push	edi
		test	ebx, ebx
		jz	loc_1002D29F
		mov	edi, [esp+28h+arg_4]
		test	edi, edi
		jz	loc_1002D29F
		mov	esi, [esp+28h+arg_8]
		test	esi, esi
		jz	loc_1002D29F
		push	ebp
		cmp	ebx, esi
		jnz	short loc_1002D17D
		lea	eax, [esp+2Ch+var_10]
		push	ebx
		push	eax
		call	sub_100298D0
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		js	loc_1002D288
		cmp	ebx, edi
		jnz	short loc_1002D177
		lea	edi, [esp+2Ch+var_10]

loc_1002D177:				; CODE XREF: sub_1002D120+51j
		lea	ebx, [esp+2Ch+var_10]
		jmp	short loc_1002D19D
; ---------------------------------------------------------------------------

loc_1002D17D:				; CODE XREF: sub_1002D120+35j
		cmp	edi, esi
		jnz	short loc_1002D19D
		lea	eax, [esp+2Ch+var_10]
		push	edi
		push	eax
		call	sub_100298D0
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		js	loc_1002D288
		lea	edi, [esp+2Ch+var_10]

loc_1002D19D:				; CODE XREF: sub_1002D120+5Bj
					; sub_1002D120+5Fj
		mov	eax, [ebx+8]
		cmp	eax, [edi+8]
		jnb	short loc_1002D1AB
		mov	eax, edi
		mov	edi, ebx
		mov	ebx, eax

loc_1002D1AB:				; CODE XREF: sub_1002D120+83j
		mov	eax, [esi+0Ch]
		mov	dword ptr [esi+8], 1
		mov	dword ptr [eax], 0
		mov	eax, [ebx+8]
		add	eax, [edi+8]
		push	eax
		push	esi
		call	sub_1002C8E0
		mov	ebp, eax
		add	esp, 8
		mov	[esp+2Ch+var_14], ebp
		test	ebp, ebp
		js	loc_1002D288
		mov	eax, [edi+0Ch]
		push	dword ptr [esi+0Ch]
		mov	[esp+30h+arg_0], eax
		push	dword ptr [eax]
		push	dword ptr [ebx+8]
		push	dword ptr [ebx+0Ch]
		call	sub_1002D490
		mov	edx, [edi+8]
		add	esp, 10h
		mov	eax, [ebx+8]
		mov	edi, 1
		mov	ecx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_1C], eax
		add	ecx, 4
		add	eax, edx
		mov	[esp+2Ch+var_18], edx
		mov	[esi+8], eax
		cmp	edx, edi
		jbe	short loc_1002D260
		mov	ebp, [esp+2Ch+var_1C]
		lea	ebp, ds:4[ebp*4]

loc_1002D221:				; CODE XREF: sub_1002D120+13Aj
		mov	edx, [ecx]
		add	ecx, 4
		mov	eax, [esi+0Ch]
		mov	[esp+2Ch+arg_0], ecx
		test	edx, edx
		jz	short loc_1002D24B
		lea	eax, [eax+edi*4]
		push	eax
		push	edx
		push	[esp+34h+var_1C]
		push	dword ptr [ebx+0Ch]
		call	sub_1002D6D0
		mov	ecx, [esp+3Ch+arg_0]
		add	esp, 10h
		jmp	short loc_1002D252
; ---------------------------------------------------------------------------

loc_1002D24B:				; CODE XREF: sub_1002D120+10Fj
		mov	dword ptr [eax+ebp], 0

loc_1002D252:				; CODE XREF: sub_1002D120+129j
		inc	edi
		add	ebp, 4
		cmp	edi, [esp+2Ch+var_18]
		jb	short loc_1002D221
		mov	ebp, [esp+2Ch+var_14]

loc_1002D260:				; CODE XREF: sub_1002D120+F4j
		mov	ecx, [esi+8]
		cmp	ecx, 1
		jbe	short loc_1002D27F
		mov	eax, [esi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_1002D271:				; CODE XREF: sub_1002D120+15Dj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002D27F
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002D271

loc_1002D27F:				; CODE XREF: sub_1002D120+146j
					; sub_1002D120+154j
		mov	[esi+8], ecx
		mov	dword ptr [esi], 0

loc_1002D288:				; CODE XREF: sub_1002D120+49j
					; sub_1002D120+73j ...
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, ebp
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1002D29F:				; CODE XREF: sub_1002D120+14j
					; sub_1002D120+20j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 1Ch
		retn
sub_1002D120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D2B0	proc near		; CODE XREF: sub_1000DF00+123p
					; sub_1000E240+86p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		cmp	eax, ecx
		jnz	short loc_1002D2CE
		push	[esp+arg_C]
		push	[esp+4+arg_8]
		push	eax
		call	sub_1002D300
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1002D2CE:				; CODE XREF: sub_1002D2B0+Aj
		push	esi
		mov	esi, [esp+4+arg_C]
		push	esi
		push	ecx
		push	eax
		call	sub_1002D120
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002D2F0
		push	esi
		push	[esp+8+arg_8]
		push	esi
		call	sub_1002CF50
		add	esp, 0Ch

loc_1002D2F0:				; CODE XREF: sub_1002D2B0+30j
		pop	esi
		retn
sub_1002D2B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D300	proc near		; CODE XREF: sub_1002D2B0+15p

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		push	esi
		mov	esi, [esp+14h+arg_0]
		push	edi
		test	esi, esi
		jz	loc_1002D481
		mov	edi, [esp+18h+arg_8]
		test	edi, edi
		jz	loc_1002D481
		mov	[esp+18h+var_4], 0
		push	ebx
		cmp	esi, edi
		jnz	short loc_1002D346
		lea	eax, [esp+1Ch+var_10]
		push	esi
		push	eax
		call	sub_100298D0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002D46B
		lea	esi, [esp+1Ch+var_10]

loc_1002D346:				; CODE XREF: sub_1002D300+28j
		mov	eax, [edi+0Ch]
		mov	dword ptr [edi+8], 1
		mov	dword ptr [eax], 0
		mov	eax, [esi+8]
		add	eax, eax
		push	eax
		push	edi
		call	sub_1002C8E0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002D46B
		mov	eax, [esi+0Ch]
		mov	ebx, [edi+0Ch]
		push	ebp
		mov	ebp, [esi+8]
		mov	[esp+20h+arg_0], eax
		lea	eax, ds:0[ebp*2]
		mov	[edi+8], eax
		test	ebp, ebp
		jz	loc_1002D42E
		mov	edi, [esp+20h+arg_0]

loc_1002D393:				; CODE XREF: sub_1002D300+124j
		mov	esi, [edi]
		lea	edi, [edi+4]
		mov	eax, esi
		lea	ebx, [ebx+8]
		shr	eax, 0Ch
		and	eax, 0Fh
		mov	ecx, ds:dword_1004C3C0[eax*4]
		mov	eax, esi
		shr	eax, 8
		and	eax, 0Fh
		shl	ecx, 8
		or	ecx, ds:dword_1004C3C0[eax*4]
		mov	eax, esi
		shr	eax, 4
		and	eax, 0Fh
		shl	ecx, 8
		or	ecx, ds:dword_1004C3C0[eax*4]
		mov	eax, esi
		and	eax, 0Fh
		shl	ecx, 8
		or	ecx, ds:dword_1004C3C0[eax*4]
		mov	eax, esi
		mov	[ebx-8], ecx
		mov	ecx, esi
		shr	eax, 1Ch
		shr	ecx, 18h
		and	ecx, 0Fh
		mov	edx, ds:dword_1004C3C0[eax*4]
		mov	eax, esi
		shl	edx, 8
		or	edx, ds:dword_1004C3C0[ecx*4]
		shr	eax, 14h
		and	eax, 0Fh
		shl	edx, 8
		shr	esi, 10h
		and	esi, 0Fh
		or	edx, ds:dword_1004C3C0[eax*4]
		shl	edx, 8
		or	edx, ds:dword_1004C3C0[esi*4]
		mov	[ebx-4], edx
		dec	ebp
		jnz	loc_1002D393
		mov	edi, [esp+20h+arg_8]

loc_1002D42E:				; CODE XREF: sub_1002D300+89j
		push	edi
		push	[esp+24h+arg_4]
		push	edi
		call	sub_1002CF50
		add	esp, 0Ch
		mov	ebx, eax
		pop	ebp
		test	ebx, ebx
		js	short loc_1002D46B
		mov	ecx, [edi+8]
		cmp	ecx, 1
		jbe	short loc_1002D462
		mov	eax, [edi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_1002D454:				; CODE XREF: sub_1002D300+160j
		cmp	dword ptr [eax], 0
		jnz	short loc_1002D462
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002D454

loc_1002D462:				; CODE XREF: sub_1002D300+149j
					; sub_1002D300+157j
		mov	[edi+8], ecx
		mov	dword ptr [edi], 0

loc_1002D46B:				; CODE XREF: sub_1002D300+3Cj
					; sub_1002D300+69j ...
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002D481:				; CODE XREF: sub_1002D300+Bj
					; sub_1002D300+17j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		add	esp, 10h
		retn
sub_1002D300	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D490	proc near		; CODE XREF: sub_1002D120+CBp

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 54h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+54h+var_4], eax
		mov	ecx, [esp+54h+arg_4]
		push	ebx
		mov	ebx, [esp+58h+arg_C]
		push	ebp
		xor	ebp, ebp
		test	ecx, ecx
		jz	loc_1002D6B1
		push	esi
		push	edi
		mov	edi, [esp+64h+arg_8]
		mov	eax, edi
		shr	eax, 3
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_50], eax
		mov	eax, edi
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_38], eax
		mov	eax, edi
		shr	eax, 6
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_48], eax
		mov	eax, edi
		shr	eax, 9
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_28], eax
		mov	eax, edi
		shr	eax, 0Ch
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_40], eax
		mov	eax, edi
		shr	eax, 0Fh
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_30], eax
		mov	eax, edi
		shr	eax, 12h
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_54], eax
		mov	eax, edi
		shr	eax, 15h
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_4C], eax
		mov	eax, edi
		shr	eax, 18h
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_44], eax
		mov	eax, edi
		shr	eax, 1Bh
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_3C], eax
		mov	eax, edi
		shr	eax, 1Eh
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_34], eax

loc_1002D562:				; CODE XREF: sub_1002D490+219j
		mov	eax, [esp+64h+arg_0]
		dec	ecx
		mov	[esp+64h+arg_4], ecx
		mov	[esp+64h+var_24], 0
		mov	esi, [eax]
		add	eax, 4
		mov	[esp+64h+arg_0], eax
		mov	eax, esi
		and	esi, 3FFFFFFFh
		shr	eax, 1Eh
		mov	[esp+64h+var_2C], eax
		mov	[esp+64h+var_20], esi
		lea	ecx, [esi+esi]
		mov	eax, ecx
		mov	[esp+64h+var_1C], ecx
		lea	edx, [ecx+ecx]
		xor	eax, esi
		mov	[esp+64h+var_18], eax
		mov	eax, edx
		xor	eax, esi
		mov	[esp+64h+var_14], edx
		xor	edx, ecx
		mov	[esp+64h+var_10], eax
		mov	eax, [esp+64h+var_50]
		mov	ecx, [esp+64h+var_38]
		mov	[esp+64h+var_C], edx
		xor	edx, esi
		mov	[esp+64h+var_8], edx
		mov	esi, [eax]
		lea	eax, ds:0[esi*8]
		shr	esi, 1Dh
		xor	eax, [ecx]
		mov	ecx, [esp+64h+var_48]
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 6
		xor	eax, ecx
		shr	edx, 1Ah
		mov	ecx, [esp+64h+var_28]
		xor	esi, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 9
		xor	eax, ecx
		shr	edx, 17h
		mov	ecx, [esp+64h+var_40]
		xor	esi, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 0Ch
		xor	eax, ecx
		shr	edx, 14h
		mov	ecx, [esp+64h+var_30]
		xor	esi, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 0Fh
		xor	eax, ecx
		shr	edx, 11h
		mov	ecx, [esp+64h+var_54]
		xor	esi, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 12h
		xor	eax, ecx
		shr	edx, 0Eh
		mov	ecx, [esp+64h+var_4C]
		xor	esi, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 15h
		xor	eax, ecx
		shr	edx, 0Bh
		mov	ecx, [esp+64h+var_44]
		xor	esi, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 18h
		shr	edx, 8
		xor	eax, ecx
		xor	esi, edx
		mov	ecx, [esp+64h+var_3C]
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 1Bh
		xor	eax, ecx
		shr	edx, 5
		mov	ecx, [esp+64h+var_34]
		xor	esi, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shr	edx, 2
		shl	ecx, 1Eh
		xor	esi, edx
		mov	edx, [esp+64h+var_2C]
		xor	eax, ecx
		test	dl, 1
		jz	short loc_1002D688
		mov	ecx, edi
		shl	ecx, 1Eh
		xor	eax, ecx
		mov	ecx, edi
		shr	ecx, 2
		xor	esi, ecx

loc_1002D688:				; CODE XREF: sub_1002D490+1E8j
		test	dl, 2
		jz	short loc_1002D69A
		mov	ecx, edi
		shl	ecx, 1Fh
		xor	eax, ecx
		mov	ecx, edi
		shr	ecx, 1
		xor	esi, ecx

loc_1002D69A:				; CODE XREF: sub_1002D490+1FBj
		mov	ecx, [esp+64h+arg_4]
		xor	eax, ebp
		mov	[ebx], eax
		mov	ebp, esi
		add	ebx, 4
		test	ecx, ecx
		jnz	loc_1002D562
		pop	edi
		pop	esi

loc_1002D6B1:				; CODE XREF: sub_1002D490+1Cj
		mov	ecx, [esp+5Ch+var_4]
		mov	[ebx], ebp
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
sub_1002D490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D6D0	proc near		; CODE XREF: sub_1002D120+11Dp

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 54h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+54h+var_4], eax
		mov	ecx, [esp+54h+arg_4]
		push	ebx
		mov	ebx, [esp+58h+arg_C]
		push	ebp
		xor	ebp, ebp
		test	ecx, ecx
		jz	loc_1002D8F5
		push	esi
		push	edi
		mov	edi, [esp+64h+arg_8]
		mov	eax, edi
		shr	eax, 3
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_50], eax
		mov	eax, edi
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_38], eax
		mov	eax, edi
		shr	eax, 6
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_48], eax
		mov	eax, edi
		shr	eax, 9
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_28], eax
		mov	eax, edi
		shr	eax, 0Ch
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_40], eax
		mov	eax, edi
		shr	eax, 0Fh
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_30], eax
		mov	eax, edi
		shr	eax, 12h
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_54], eax
		mov	eax, edi
		shr	eax, 15h
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_4C], eax
		mov	eax, edi
		shr	eax, 18h
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_44], eax
		mov	eax, edi
		shr	eax, 1Bh
		and	eax, 7
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_3C], eax
		mov	eax, edi
		shr	eax, 1Eh
		lea	eax, [esp+eax*4+64h+var_24]
		mov	[esp+64h+var_34], eax

loc_1002D7A2:				; CODE XREF: sub_1002D6D0+21Dj
		mov	eax, [esp+64h+arg_0]
		dec	ecx
		mov	[esp+64h+arg_4], ecx
		mov	[esp+64h+var_24], 0
		mov	esi, [eax]
		add	eax, 4
		mov	[esp+64h+arg_0], eax
		mov	eax, esi
		and	esi, 3FFFFFFFh
		shr	eax, 1Eh
		mov	[esp+64h+var_2C], eax
		mov	[esp+64h+var_20], esi
		lea	ecx, [esi+esi]
		mov	eax, ecx
		mov	[esp+64h+var_1C], ecx
		lea	edx, [ecx+ecx]
		xor	eax, esi
		mov	[esp+64h+var_18], eax
		mov	eax, edx
		xor	eax, esi
		mov	[esp+64h+var_14], edx
		xor	edx, ecx
		mov	[esp+64h+var_10], eax
		mov	eax, [esp+64h+var_50]
		mov	ecx, [esp+64h+var_38]
		mov	[esp+64h+var_C], edx
		xor	edx, esi
		mov	[esp+64h+var_8], edx
		mov	eax, [eax]
		lea	esi, ds:0[eax*8]
		shr	eax, 1Dh
		xor	esi, [ecx]
		mov	ecx, [esp+64h+var_48]
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 6
		xor	esi, ecx
		shr	edx, 1Ah
		mov	ecx, [esp+64h+var_28]
		xor	eax, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 9
		xor	esi, ecx
		shr	edx, 17h
		mov	ecx, [esp+64h+var_40]
		xor	eax, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 0Ch
		xor	esi, ecx
		shr	edx, 14h
		mov	ecx, [esp+64h+var_30]
		xor	eax, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 0Fh
		xor	esi, ecx
		shr	edx, 11h
		mov	ecx, [esp+64h+var_54]
		xor	eax, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 12h
		xor	esi, ecx
		shr	edx, 0Eh
		mov	ecx, [esp+64h+var_4C]
		xor	eax, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 15h
		xor	esi, ecx
		shr	edx, 0Bh
		mov	ecx, [esp+64h+var_44]
		xor	eax, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 18h
		shr	edx, 8
		xor	esi, ecx
		xor	eax, edx
		mov	ecx, [esp+64h+var_3C]
		mov	edx, [ecx]
		mov	ecx, edx
		shl	ecx, 1Bh
		xor	esi, ecx
		shr	edx, 5
		mov	ecx, [esp+64h+var_34]
		xor	eax, edx
		mov	edx, [ecx]
		mov	ecx, edx
		shr	edx, 2
		shl	ecx, 1Eh
		xor	eax, edx
		mov	edx, [esp+64h+var_2C]
		xor	esi, ecx
		test	dl, 1
		jz	short loc_1002D8C8
		mov	ecx, edi
		shl	ecx, 1Eh
		xor	esi, ecx
		mov	ecx, edi
		shr	ecx, 2
		xor	eax, ecx

loc_1002D8C8:				; CODE XREF: sub_1002D6D0+1E8j
		test	dl, 2
		jz	short loc_1002D8DA
		mov	ecx, edi
		shl	ecx, 1Fh
		xor	esi, ecx
		mov	ecx, edi
		shr	ecx, 1
		xor	eax, ecx

loc_1002D8DA:				; CODE XREF: sub_1002D6D0+1FBj
		mov	ecx, [ebx]
		xor	ecx, esi
		xor	ecx, ebp
		mov	ebp, eax
		mov	[ebx], ecx
		add	ebx, 4
		mov	ecx, [esp+64h+arg_4]
		test	ecx, ecx
		jnz	loc_1002D7A2
		pop	edi
		pop	esi

loc_1002D8F5:				; CODE XREF: sub_1002D6D0+1Cj
		xor	[ebx], ebp
		mov	ecx, [esp+5Ch+var_4]
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
sub_1002D6D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D910	proc near		; CODE XREF: sub_1002B070+195p
					; sub_1002B400+C9p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	edx, [esp+4+arg_0]
		mov	eax, [esp+4+arg_4]
		mov	ebx, [esp+4+arg_8]
		div	ebx
		mov	ebx, [esp+4+arg_C]
		mov	[ebx], eax
		mov	ebx, [esp+4+arg_10]
		mov	[ebx], edx
		xor	eax, eax
		pop	ebx
		retn
sub_1002D910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D930	proc near		; CODE XREF: sub_100287E0+89p
					; sub_10029B70+D0p ...
		mov	eax, dword_1004E21C
		cmp	eax, 0
		jz	short loc_1002D94B
		jg	short loc_1002D981
		call	sub_1002E0C0
		mov	dword_1004E21C,	eax
		cmp	eax, 0
		jg	short loc_1002D981

loc_1002D94B:				; CODE XREF: sub_1002D930+8j
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	ebx, 0
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002D979
		mov	esi, [ebp+8]
		cld

loc_1002D968:				; CODE XREF: sub_1002D930+47j
		lodsd
		mov	edx, [ebp+10h]
		mul	edx
		add	eax, ebx
		adc	edx, 0
		mov	ebx, edx
		stosd
		dec	ecx
		jnz	short loc_1002D968

loc_1002D979:				; CODE XREF: sub_1002D930+32j
		mov	[edi], ebx
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1002D981:				; CODE XREF: sub_1002D930+Aj
					; sub_1002D930+19j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		psubq	mm2, mm2
		mov	ecx, [ebp+0Ch]
		movd	mm1, dword ptr [ebp+10h]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002D9B5
		mov	esi, [ebp+8]
		cld

loc_1002D99C:				; CODE XREF: sub_1002D930+83j
		movd	mm0, dword ptr [esi]
		add	esi, 4
		pmuludq	mm0, mm1
		paddq	mm2, mm0
		movd	dword ptr [edi], mm2
		add	edi, 4
		psrlq	mm2, 20h
		dec	ecx
		jnz	short loc_1002D99C

loc_1002D9B5:				; CODE XREF: sub_1002D930+66j
		movd	dword ptr [edi], mm2
		emms
		pop	esi
		pop	edi
		leave
		retn
sub_1002D930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D9C0	proc near		; CODE XREF: sub_10029B70+11Dp
					; sub_1002A1C0+CEp
		mov	eax, dword_1004E21C
		cmp	eax, 0
		jz	short loc_1002D9DB
		jg	short loc_1002DA18
		call	sub_1002E0C0
		mov	dword_1004E21C,	eax
		cmp	eax, 0
		jg	short loc_1002DA18

loc_1002D9DB:				; CODE XREF: sub_1002D9C0+8j
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	ebx, 0
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002DA10
		mov	esi, [ebp+8]
		cld

loc_1002D9F8:				; CODE XREF: sub_1002D9C0+4Ej
		lodsd
		mov	edx, [ebp+10h]
		mul	edx
		add	eax, ebx
		adc	edx, 0
		mov	ebx, [edi]
		add	eax, ebx
		adc	edx, 0
		mov	ebx, edx
		stosd
		dec	ecx
		jnz	short loc_1002D9F8

loc_1002DA10:				; CODE XREF: sub_1002D9C0+32j
		mov	[edi], ebx
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_1002DA18:				; CODE XREF: sub_1002D9C0+Aj
					; sub_1002D9C0+19j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		psubq	mm2, mm2
		mov	ecx, [ebp+0Ch]
		movd	mm1, dword ptr [ebp+10h]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002DA52
		mov	esi, [ebp+8]
		cld

loc_1002DA33:				; CODE XREF: sub_1002D9C0+90j
		movd	mm0, dword ptr [esi]
		add	esi, 4
		pmuludq	mm0, mm1
		paddq	mm2, mm0
		movd	mm0, dword ptr [edi]
		paddq	mm2, mm0
		movd	dword ptr [edi], mm2
		add	edi, 4
		psrlq	mm2, 20h
		dec	ecx
		jnz	short loc_1002DA33

loc_1002DA52:				; CODE XREF: sub_1002D9C0+6Dj
		movd	dword ptr [edi], mm2
		emms
		pop	esi
		pop	edi
		leave
		retn
sub_1002D9C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DA60	proc near		; CODE XREF: sub_100287E0+C5p
					; sub_100287E0+FEp ...
		mov	eax, dword_1004E21C
		cmp	eax, 0
		jz	short loc_1002DA7B
		jg	short loc_1002DACA
		call	sub_1002E0C0
		mov	dword_1004E21C,	eax
		cmp	eax, 0
		jg	short loc_1002DACA

loc_1002DA7B:				; CODE XREF: sub_1002DA60+8j
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	ebx, 0
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002DAB0
		cld
		mov	esi, [ebp+8]

loc_1002DA98:				; CODE XREF: sub_1002DA60+4Ej
		lodsd
		mov	edx, [ebp+10h]
		mul	edx
		add	eax, ebx
		adc	edx, 0
		mov	ebx, [edi]
		add	eax, ebx
		adc	edx, 0
		mov	ebx, edx
		stosd
		dec	ecx
		jnz	short loc_1002DA98

loc_1002DAB0:				; CODE XREF: sub_1002DA60+32j
		cmp	ebx, 0
		jz	short loc_1002DAC4
		mov	eax, [edi]
		add	eax, ebx
		stosd
		jnb	short loc_1002DAC4

loc_1002DABC:				; CODE XREF: sub_1002DA60+62j
		mov	eax, [edi]
		adc	eax, 0
		stosd
		jb	short loc_1002DABC

loc_1002DAC4:				; CODE XREF: sub_1002DA60+53j
					; sub_1002DA60+5Aj
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 2

loc_1002DACA:				; CODE XREF: sub_1002DA60+Aj
					; sub_1002DA60+19j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		psubq	mm2, mm2
		mov	ecx, [ebp+0Ch]
		movd	mm1, dword ptr [ebp+10h]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002DB05
		mov	esi, [ebp+8]
		cld

loc_1002DAE6:				; CODE XREF: sub_1002DA60+A3j
		movd	mm0, dword ptr [esi]
		movd	mm3, dword ptr [edi]
		add	esi, 4
		pmuludq	mm0, mm1
		paddq	mm2, mm0
		paddq	mm2, mm3
		movd	dword ptr [edi], mm2
		add	edi, 4
		psrlq	mm2, 20h
		dec	ecx
		jnz	short loc_1002DAE6

loc_1002DB05:				; CODE XREF: sub_1002DA60+80j
		movd	ebx, mm2
		cmp	ebx, 0
		jz	short loc_1002DB1C
		mov	eax, [edi]
		add	eax, ebx
		stosd
		jnb	short loc_1002DB1C

loc_1002DB14:				; CODE XREF: sub_1002DA60+BAj
		mov	eax, [edi]
		adc	eax, 0
		stosd
		jb	short loc_1002DB14

loc_1002DB1C:				; CODE XREF: sub_1002DA60+ABj
					; sub_1002DA60+B2j
		emms
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
sub_1002DA60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DB30	proc near		; CODE XREF: sub_1002A1C0+10Bp
		mov	eax, dword_1004E21C
		cmp	eax, 0
		jz	short loc_1002DB4B
		jg	short loc_1002DBA2
		call	sub_1002E0C0
		mov	dword_1004E21C,	eax
		cmp	eax, 0
		jg	short loc_1002DBA2

loc_1002DB4B:				; CODE XREF: sub_1002DB30+8j
		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx
		mov	ebx, 0
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+10h]
		cmp	ecx, 0
		jz	short loc_1002DB88
		cld
		mov	esi, [ebp+8]

loc_1002DB68:				; CODE XREF: sub_1002DB30+56j
		lodsd
		mul	eax
		add	eax, ebx
		adc	edx, 0
		mov	ebx, [edi]
		add	eax, ebx
		mov	ebx, [edi+4]
		stosd
		adc	edx, ebx
		mov	ebx, 0
		mov	eax, edx
		adc	ebx, 0
		stosd
		dec	ecx
		jnz	short loc_1002DB68

loc_1002DB88:				; CODE XREF: sub_1002DB30+32j
		cmp	ebx, 0
		jz	short loc_1002DB9C
		mov	eax, [edi]
		add	eax, ebx
		stosd
		jnb	short loc_1002DB9C

loc_1002DB94:				; CODE XREF: sub_1002DB30+6Aj
		mov	eax, [edi]
		adc	eax, 0
		stosd
		jb	short loc_1002DB94

loc_1002DB9C:				; CODE XREF: sub_1002DB30+5Bj
					; sub_1002DB30+62j
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 2

loc_1002DBA2:				; CODE XREF: sub_1002DB30+Aj
					; sub_1002DB30+19j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		psubq	mm2, mm2
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+10h]
		cmp	ecx, 0
		jz	short loc_1002DBE8
		mov	esi, [ebp+8]
		cld

loc_1002DBBA:				; CODE XREF: sub_1002DB30+B6j
		movd	mm0, dword ptr [esi]
		movd	mm3, dword ptr [edi]
		add	esi, 4
		pmuludq	mm0, mm0
		paddq	mm2, mm0
		paddq	mm2, mm3
		movd	mm3, dword ptr [edi+4]
		movd	dword ptr [edi], mm2
		psrlq	mm2, 20h
		paddq	mm2, mm3
		movd	dword ptr [edi+4], mm2
		psrlq	mm2, 20h
		add	edi, 8
		dec	ecx
		jnz	short loc_1002DBBA

loc_1002DBE8:				; CODE XREF: sub_1002DB30+84j
		movd	ebx, mm2
		cmp	ebx, 0
		jz	short loc_1002DBFF
		mov	eax, [edi]
		add	eax, ebx
		stosd
		jnb	short loc_1002DBFF

loc_1002DBF7:				; CODE XREF: sub_1002DB30+CDj
		mov	eax, [edi]
		adc	eax, 0
		stosd
		jb	short loc_1002DBF7

loc_1002DBFF:				; CODE XREF: sub_1002DB30+BEj
					; sub_1002DB30+C5j
		emms
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
sub_1002DB30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DC10	proc near		; CODE XREF: sub_1002DFB0+13p
					; sub_1002DFB0+33p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 8
		push	ebx
		push	eax
		push	ebx
		pushf
		pop	eax
		push	eax
		mov	[esp+18h+var_4], eax
		mov	ebx, [esp+18h+arg_0]
		xor	eax, ebx
		push	eax
		popf
		pushf
		pop	eax
		popf
		mov	[esp+14h+var_8], eax
		pop	ebx
		pop	eax
		mov	eax, [esp+0Ch+var_8]
		xor	eax, [esp+0Ch+var_4]
		pop	ebx
		add	esp, 8
		retn
sub_1002DC10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DC40	proc near		; CODE XREF: sub_1000EE40+B3p
					; sub_1002DD20+39p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 10h
		push	ebx
		push	esi
		push	edi
		pusha
		mov	eax, [esp+3Ch+arg_0]
		cpuid
		mov	[esp+3Ch+var_10], eax
		mov	[esp+3Ch+var_C], ebx
		mov	[esp+3Ch+var_8], ecx
		mov	[esp+3Ch+var_4], edx
		popa
		mov	ecx, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+var_10]
		pop	edi
		pop	esi
		mov	[ecx], eax
		mov	ecx, [esp+14h+arg_8]
		mov	eax, [esp+14h+var_C]
		pop	ebx
		mov	[ecx], eax
		mov	ecx, [esp+10h+arg_C]
		mov	eax, [esp+10h+var_8]
		mov	[ecx], eax
		mov	ecx, [esp+10h+arg_10]
		mov	eax, [esp+10h+var_4]
		mov	[ecx], eax
		add	esp, 10h
		retn
sub_1002DC40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DC90	proc near		; CODE XREF: sub_1002DD20+6Ep
					; sub_1002DD20+88p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		cmp	ds:byte_1004C401[ecx*2], 0
		movzx	eax, ds:byte_1004C400[ecx*2]
		jz	short locret_1002DD14
		cmp	eax, 6
		jz	short loc_1002DCFC
		cmp	eax, 8
		jz	short loc_1002DCFC
		mov	edx, [esp+arg_4]
		cmp	dword ptr [edx], 2
		jl	short loc_1002DCD8
		cmp	eax, 9
		jz	short loc_1002DCC3
		cmp	eax, 0Bh
		jnz	short loc_1002DCD8

loc_1002DCC3:				; CODE XREF: sub_1002DC90+2Cj
		mov	eax, [esp+arg_8]
		mov	dword ptr [edx], 2
		movzx	ecx, ds:byte_1004C401[ecx*2]
		mov	[eax], ecx
		retn
; ---------------------------------------------------------------------------

loc_1002DCD8:				; CODE XREF: sub_1002DC90+27j
					; sub_1002DC90+31j
		cmp	dword ptr [edx], 3
		jl	short locret_1002DD14
		cmp	eax, 0Ch
		jz	short loc_1002DCE7
		cmp	eax, 0Eh
		jnz	short locret_1002DD14

loc_1002DCE7:				; CODE XREF: sub_1002DC90+50j
		mov	eax, [esp+arg_8]
		mov	dword ptr [edx], 3
		movzx	ecx, ds:byte_1004C401[ecx*2]
		mov	[eax], ecx
		retn
; ---------------------------------------------------------------------------

loc_1002DCFC:				; CODE XREF: sub_1002DC90+19j
					; sub_1002DC90+1Ej
		mov	eax, [esp+arg_4]
		mov	dword ptr [eax], 1
		mov	eax, [esp+arg_8]
		movzx	ecx, ds:byte_1004C401[ecx*2]
		mov	[eax], ecx

locret_1002DD14:			; CODE XREF: sub_1002DC90+14j
					; sub_1002DC90+4Bj ...
		retn
sub_1002DC90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DD20	proc near		; CODE XREF: sub_1002DFB0+DAp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 14h
		push	ebx
		xor	ebx, ebx
		mov	[esp+18h+var_10], 4
		cmp	[esp+18h+arg_0], 2
		mov	[esp+18h+var_14], ebx
		jge	short loc_1002DD40
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1002DD40:				; CODE XREF: sub_1002DD20+17j
		push	ebp
		push	esi
		push	edi
		lea	eax, [esp+24h+var_C]
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		lea	eax, [esp+2Ch+var_4]
		push	eax
		lea	eax, [esp+30h+arg_0]
		push	eax
		push	2
		call	sub_1002DC40
		mov	edi, [esp+38h+arg_0]
		add	esp, 14h
		mov	ebp, edi
		mov	esi, ebx
		and	ebp, 0Fh
		jle	loc_1002DF45

loc_1002DD72:				; CODE XREF: sub_1002DD20+21Bj
		test	edi, edi
		js	short loc_1002DDDD
		lea	eax, [esp+24h+var_14]
		mov	ebx, edi
		push	eax
		lea	eax, [esp+28h+var_10]
		and	ebx, 0FFFFFF00h
		push	eax
		mov	eax, ebx
		shr	eax, 18h
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+30h+var_14]
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 10h
		and	eax, 0FFh
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+3Ch+var_14]
		push	eax
		lea	eax, [esp+40h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+48h+var_14]
		push	eax
		lea	eax, [esp+4Ch+var_10]
		push	eax
		movzx	eax, bl
		push	eax
		call	sub_1002DC90
		add	esp, 30h

loc_1002DDDD:				; CODE XREF: sub_1002DD20+54j
		mov	ebx, [esp+24h+var_4]
		test	ebx, ebx
		js	short loc_1002DE44
		lea	eax, [esp+24h+var_14]
		push	eax
		lea	eax, [esp+28h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 18h
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+30h+var_14]
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 10h
		and	eax, 0FFh
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+3Ch+var_14]
		push	eax
		lea	eax, [esp+40h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+48h+var_14]
		push	eax
		lea	eax, [esp+4Ch+var_10]
		push	eax
		movzx	eax, bl
		push	eax
		call	sub_1002DC90
		add	esp, 30h

loc_1002DE44:				; CODE XREF: sub_1002DD20+C3j
		mov	ebx, [esp+24h+var_8]
		test	ebx, ebx
		js	short loc_1002DEAB
		lea	eax, [esp+24h+var_14]
		push	eax
		lea	eax, [esp+28h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 18h
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+30h+var_14]
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 10h
		and	eax, 0FFh
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+3Ch+var_14]
		push	eax
		lea	eax, [esp+40h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+48h+var_14]
		push	eax
		lea	eax, [esp+4Ch+var_10]
		push	eax
		movzx	eax, bl
		push	eax
		call	sub_1002DC90
		add	esp, 30h

loc_1002DEAB:				; CODE XREF: sub_1002DD20+12Aj
		mov	ebx, [esp+24h+var_C]
		test	ebx, ebx
		js	short loc_1002DF12
		lea	eax, [esp+24h+var_14]
		push	eax
		lea	eax, [esp+28h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 18h
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+30h+var_14]
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 10h
		and	eax, 0FFh
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+3Ch+var_14]
		push	eax
		lea	eax, [esp+40h+var_10]
		push	eax
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		push	eax
		call	sub_1002DC90
		lea	eax, [esp+48h+var_14]
		push	eax
		lea	eax, [esp+4Ch+var_10]
		push	eax
		movzx	eax, bl
		push	eax
		call	sub_1002DC90
		add	esp, 30h

loc_1002DF12:				; CODE XREF: sub_1002DD20+191j
		inc	esi
		cmp	esi, ebp
		jz	short loc_1002DF41
		lea	eax, [esp+24h+var_C]
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		lea	eax, [esp+2Ch+var_4]
		push	eax
		lea	eax, [esp+30h+arg_0]
		push	eax
		push	2
		call	sub_1002DC40
		mov	edi, [esp+38h+arg_0]
		add	esp, 14h
		cmp	esi, ebp
		jl	loc_1002DD72

loc_1002DF41:				; CODE XREF: sub_1002DD20+1F5j
		mov	ebx, [esp+24h+var_14]

loc_1002DF45:				; CODE XREF: sub_1002DD20+4Cj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 14h
		retn
sub_1002DD20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DF50	proc near		; CODE XREF: sub_1002DFB0:loc_1002E091p

var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8
var_4		= byte ptr -4

		sub	esp, 10h
		lea	eax, [esp+10h+var_8]
		push	eax
		lea	eax, [esp+14h+var_C]
		push	eax
		lea	eax, [esp+18h+var_4]
		push	eax
		lea	eax, [esp+1Ch+var_10]
		push	eax
		push	80000000h
		call	sub_1002DC40
		add	esp, 14h
		cmp	[esp+10h+var_10], 80000005h
		jb	short loc_1002DFA7
		lea	eax, [esp+10h+var_8]
		push	eax
		lea	eax, [esp+14h+var_C]
		push	eax
		lea	eax, [esp+18h+var_4]
		push	eax
		lea	eax, [esp+1Ch+var_10]
		push	eax
		push	80000005h
		call	sub_1002DC40
		movzx	eax, [esp+24h+var_C]
		add	esp, 14h
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002DFA7:				; CODE XREF: sub_1002DF50+2Bj
		xor	eax, eax
		add	esp, 10h
		retn
sub_1002DF50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DFB0	proc near		; CODE XREF: sub_10026B80+190p

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_4		= dword	ptr -4

		sub	esp, 58h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+58h+var_4], eax
		push	40000h
		call	sub_1002DC10
		add	esp, 4
		test	eax, eax
		jnz	short loc_1002DFDE
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1002DFDE:				; CODE XREF: sub_1002DFB0+1Dj
		push	200000h
		call	sub_1002DC10
		add	esp, 4
		test	eax, eax
		jz	loc_1002E09D
		push	esi
		push	edi
		lea	eax, [esp+60h+var_54]
		push	eax
		lea	eax, [esp+64h+var_50]
		push	eax
		lea	eax, [esp+68h+var_4C]
		push	eax
		lea	eax, [esp+6Ch+var_58]
		push	eax
		push	0
		call	sub_1002DC40
		mov	eax, [esp+74h+var_4C]
		add	esp, 14h
		mov	[esp+60h+var_48], eax
		mov	edi, 9
		mov	eax, [esp+60h+var_54]
		xor	esi, esi
		mov	[esp+60h+var_44], eax
		mov	eax, [esp+60h+var_50]
		mov	[esp+60h+var_40], eax
		mov	[esp+60h+var_3C], 0
		jmp	short loc_1002E040
; ---------------------------------------------------------------------------
		align 10h

loc_1002E040:				; CODE XREF: sub_1002DFB0+87j
					; sub_1002DFB0+CFj
		mov	ecx, ds:off_1004C600[esi*4]
		lea	eax, [esp+60h+var_48]
		jmp	short loc_1002E050
; ---------------------------------------------------------------------------
		align 10h

loc_1002E050:				; CODE XREF: sub_1002DFB0+9Bj
					; sub_1002DFB0+BAj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_1002E070
		test	dl, dl
		jz	short loc_1002E06C
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_1002E070
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_1002E050

loc_1002E06C:				; CODE XREF: sub_1002DFB0+A8j
		xor	eax, eax
		jmp	short loc_1002E075
; ---------------------------------------------------------------------------

loc_1002E070:				; CODE XREF: sub_1002DFB0+A4j
					; sub_1002DFB0+B0j
		sbb	eax, eax
		or	eax, 1

loc_1002E075:				; CODE XREF: sub_1002DFB0+BEj
		test	eax, eax
		jnz	short loc_1002E07B
		mov	edi, esi

loc_1002E07B:				; CODE XREF: sub_1002DFB0+C7j
		inc	esi
		cmp	esi, 0Ah
		jl	short loc_1002E040
		test	edi, edi
		pop	edi
		pop	esi
		push	[esp+58h+var_58]
		jnz	short loc_1002E091
		call	sub_1002DD20
		jmp	short loc_1002E096
; ---------------------------------------------------------------------------

loc_1002E091:				; CODE XREF: sub_1002DFB0+D8j
		call	sub_1002DF50

loc_1002E096:				; CODE XREF: sub_1002DFB0+DFj
		add	esp, 4
		test	eax, eax
		jnz	short loc_1002E0A2

loc_1002E09D:				; CODE XREF: sub_1002DFB0+3Dj
		mov	eax, 20h

loc_1002E0A2:				; CODE XREF: sub_1002DFB0+EBj
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
sub_1002DFB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E0C0	proc near		; CODE XREF: sub_1002D930+Cp
					; sub_1002D9C0+Cp ...

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4

		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		push	40000h
		call	sub_1002DC10
		add	esp, 4
		test	eax, eax
		jz	loc_1002E1B2
		push	200000h
		call	sub_1002DC10
		add	esp, 4
		test	eax, eax
		jz	loc_1002E1B2
		lea	eax, [esp+24h+var_24]
		push	eax
		lea	eax, [esp+28h+var_18]
		push	eax
		lea	eax, [esp+2Ch+var_20]
		push	eax
		lea	eax, [esp+30h+var_1C]
		push	eax
		push	0
		call	sub_1002DC40
		mov	eax, [esp+38h+var_20]
		add	esp, 14h
		cmp	[esp+24h+var_1C], 0
		mov	[esp+24h+var_14], eax
		mov	eax, [esp+24h+var_24]
		mov	[esp+24h+var_10], eax
		mov	eax, [esp+24h+var_18]
		mov	[esp+24h+var_C], eax
		mov	[esp+24h+var_8], 0
		jz	short loc_1002E1B2
		push	esi
		mov	esi, offset off_1004C600
		mov	edi, edi

loc_1002E140:				; CODE XREF: sub_1002E0C0+B8j
		mov	ecx, [esi]
		lea	eax, [esp+28h+var_14]

loc_1002E146:				; CODE XREF: sub_1002E0C0+A0j
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_1002E166
		test	dl, dl
		jz	short loc_1002E162
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_1002E166
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_1002E146

loc_1002E162:				; CODE XREF: sub_1002E0C0+8Ej
		xor	eax, eax
		jmp	short loc_1002E16B
; ---------------------------------------------------------------------------

loc_1002E166:				; CODE XREF: sub_1002E0C0+8Aj
					; sub_1002E0C0+96j
		sbb	eax, eax
		or	eax, 1

loc_1002E16B:				; CODE XREF: sub_1002E0C0+A4j
		test	eax, eax
		jz	short loc_1002E17A
		add	esi, 4
		cmp	esi, offset dword_1004C628
		jl	short loc_1002E140

loc_1002E17A:				; CODE XREF: sub_1002E0C0+ADj
		lea	eax, [esp+28h+var_24]
		push	eax
		lea	eax, [esp+2Ch+var_18]
		push	eax
		lea	eax, [esp+30h+var_20]
		push	eax
		lea	eax, [esp+34h+var_1C]
		push	eax
		push	1
		call	sub_1002DC40
		mov	eax, [esp+3Ch+var_24]
		add	esp, 14h
		shr	eax, 1Ah
		and	eax, 1
		pop	esi
		mov	ecx, [esp+24h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1002E1B2:				; CODE XREF: sub_1002E0C0+1Dj
					; sub_1002E0C0+32j ...
		mov	ecx, [esp+24h+var_4]
		xor	eax, eax
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
sub_1002E0C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E1D0	proc near		; CODE XREF: sub_1002E5B0:loc_1002E7BAp
					; sub_1002E5B0+240p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	esi
		call	sub_1002E4A0
		mov	esi, eax
		test	esi, esi
		jz	loc_1002E2B0
		push	[esp+4+arg_0]
		call	sub_1002F2F0
		add	esp, 4
		mov	[esi+4], eax
		test	eax, eax
		jz	loc_1002E2A7
		lea	eax, [esi+0Ch]
		push	eax
		push	[esp+8+arg_4]
		call	sub_100290F0
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	loc_1002E2A1
		lea	eax, [esi+1Ch]
		push	eax
		push	[esp+8+arg_8]
		call	sub_100290F0
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	short loc_1002E2A1
		lea	eax, [esi+2Ch]
		push	eax
		push	[esp+8+arg_C]
		call	sub_100290F0
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	short loc_1002E2A1
		lea	eax, [esi+3Ch]
		push	eax
		push	[esp+8+arg_10]
		call	sub_100290F0
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	short loc_1002E2A1
		lea	eax, [esi+4Ch]
		push	eax
		push	[esp+8+arg_14]
		call	sub_100290F0
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	short loc_1002E2A1
		mov	eax, [esp+4+arg_18]
		mov	[esi+5Ch], eax
		mov	dword ptr [esi+60h], offset sub_100307B0
		mov	dword ptr [esi+64h], offset sub_10030C40
		mov	dword ptr [esi+68h], offset loc_10030BC0
		mov	dword ptr [esi+6Ch], offset sub_10032AB0
		mov	dword ptr [esi+70h], 0
		mov	dword ptr [esi+74h], offset sub_10031B00
		mov	dword ptr [esi+78h], offset sub_10030CC0

loc_1002E2A1:				; CODE XREF: sub_1002E1D0+3Bj
					; sub_1002E1D0+55j ...
		jnz	short loc_1002E2A7
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002E2A7:				; CODE XREF: sub_1002E1D0+21j
					; sub_1002E1D0:loc_1002E2A1j
		push	esi		; void *
		call	sub_1002E3C0
		add	esp, 4

loc_1002E2B0:				; CODE XREF: sub_1002E1D0+Aj
		xor	eax, eax
		pop	esi
		retn
sub_1002E1D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E2C0	proc near		; CODE XREF: sub_1002E5B0+19Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	esi
		call	sub_1002E4A0
		mov	esi, eax
		test	esi, esi
		jz	loc_1002E3B1
		push	[esp+4+arg_0]
		call	sub_100321D0
		add	esp, 4
		mov	[esi+4], eax
		test	eax, eax
		jz	loc_1002E3A8
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esi+0Ch]
		push	ecx
		push	[esp+0Ch+arg_4]
		call	eax
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		js	loc_1002E3A2
		mov	ecx, [esi+4]
		lea	eax, [esi+1Ch]
		push	ecx
		push	eax
		push	[esp+0Ch+arg_8]
		mov	eax, [ecx+44h]
		call	eax
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		js	loc_1002E3A2
		mov	ecx, [esi+4]
		lea	eax, [esi+2Ch]
		push	ecx
		push	eax
		push	[esp+0Ch+arg_C]
		mov	eax, [ecx+44h]
		call	eax
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		js	short loc_1002E3A2
		mov	ecx, [esi+4]
		lea	eax, [esi+3Ch]
		push	ecx
		push	eax
		push	[esp+0Ch+arg_10]
		mov	eax, [ecx+44h]
		call	eax
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		js	short loc_1002E3A2
		lea	eax, [esi+4Ch]
		push	eax
		push	[esp+8+arg_14]
		call	sub_100290F0
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	short loc_1002E3A2
		mov	eax, [esp+4+arg_18]
		mov	[esi+5Ch], eax
		mov	dword ptr [esi+60h], offset sub_100307B0
		mov	dword ptr [esi+64h], offset sub_10030C40
		mov	dword ptr [esi+68h], offset loc_10030BC0
		mov	dword ptr [esi+6Ch], offset sub_10032AB0
		mov	dword ptr [esi+70h], 0
		mov	dword ptr [esi+74h], offset sub_10031B00
		mov	dword ptr [esi+78h], offset sub_10030CC0

loc_1002E3A2:				; CODE XREF: sub_1002E2C0+3Cj
					; sub_1002E2C0+5Aj ...
		jnz	short loc_1002E3A8
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002E3A8:				; CODE XREF: sub_1002E2C0+21j
					; sub_1002E2C0:loc_1002E3A2j
		push	esi		; void *
		call	sub_1002E3C0
		add	esp, 4

loc_1002E3B1:				; CODE XREF: sub_1002E2C0+Aj
		xor	eax, eax
		pop	esi
		retn
sub_1002E2C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002E3C0(void	*)
sub_1002E3C0	proc near		; CODE XREF: sub_10017E00+158p
					; sub_10018500+2BCp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1002E434
		push	dword ptr [esi+4] ; void *
		call	sub_1002F430
		add	esp, 4
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_1002E434
		lea	eax, [esi+0Ch]
		push	eax
		call	sub_10028F00
		lea	eax, [esi+1Ch]
		push	eax
		call	sub_10028F00
		lea	eax, [esi+2Ch]
		push	eax
		call	sub_10028F00
		lea	eax, [esi+3Ch]
		push	eax
		call	sub_10028F00
		lea	eax, [esi+4Ch]
		push	eax
		call	sub_10028F00
		mov	eax, [esi+8]
		add	esp, 14h
		test	eax, eax
		jz	short loc_1002E41A
		push	eax		; void *
		call	ds:free
		add	esp, 4

loc_1002E41A:				; CODE XREF: sub_1002E3C0+4Ej
		mov	eax, [esi+84h]
		test	eax, eax
		jz	short loc_1002E42A
		push	esi
		call	eax
		add	esp, 4

loc_1002E42A:				; CODE XREF: sub_1002E3C0+62j
		push	esi		; void *
		call	ds:free
		add	esp, 4

loc_1002E434:				; CODE XREF: sub_1002E3C0+7j
					; sub_1002E3C0+17j
		pop	esi
		retn
sub_1002E3C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E440	proc near		; CODE XREF: sub_10017E00+F5p
					; sub_10018500+1FFp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		push	[esp+0Ch+arg_0]
		xor	esi, esi
		xor	edi, edi
		call	sub_1002E9C0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1002E46C
		push	ebx
		push	[esp+10h+arg_0]
		call	sub_1002E5B0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1002E471

loc_1002E46C:				; CODE XREF: sub_1002E440+17j
		mov	edi, 0FFFFFFFBh

loc_1002E471:				; CODE XREF: sub_1002E440+2Aj
		push	ebx		; void *
		call	sub_1002E940
		add	esp, 4
		test	edi, edi
		jz	short loc_1002E48D
		push	esi		; void *
		call	sub_1002E3C0
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002E48D:				; CODE XREF: sub_1002E440+3Cj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
sub_1002E440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E4A0	proc near		; CODE XREF: sub_1002E1D0+1p
					; sub_1002E2C0+1p
		push	esi
		push	88h		; size_t
		call	ds:malloc
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_1002E579
		lea	eax, [esi+0Ch]
		mov	dword ptr [esi], 0
		push	eax
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+18h], 0
		mov	dword ptr [esi+28h], 0
		mov	dword ptr [esi+38h], 0
		mov	dword ptr [esi+48h], 0
		mov	dword ptr [esi+58h], 0
		mov	dword ptr [esi+70h], 0
		mov	dword ptr [esi+74h], 0
		mov	dword ptr [esi+78h], 0
		mov	dword ptr [esi+7Ch], 0
		mov	dword ptr [esi+80h], 0
		mov	dword ptr [esi+84h], 0
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		js	short loc_1002E56E
		lea	eax, [esi+1Ch]
		push	eax
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		js	short loc_1002E56E
		lea	eax, [esi+2Ch]
		push	eax
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		js	short loc_1002E56E
		lea	eax, [esi+3Ch]
		push	eax
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		js	short loc_1002E56E
		lea	eax, [esi+4Ch]
		push	eax
		call	sub_100298B0
		add	esp, 4
		test	eax, eax

loc_1002E56E:				; CODE XREF: sub_1002E4A0+8Ej
					; sub_1002E4A0+9Ej ...
		jz	short loc_1002E57D
		push	esi		; void *
		call	sub_1002E3C0
		add	esp, 4

loc_1002E579:				; CODE XREF: sub_1002E4A0+13j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002E57D:				; CODE XREF: sub_1002E4A0:loc_1002E56Ej
		mov	eax, esi
		pop	esi
		retn
sub_1002E4A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E590	proc near		; CODE XREF: sub_10017E00+12Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	eax
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		mov	eax, [eax+78h]
		call	eax
		add	esp, 0Ch
		retn
sub_1002E590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E5B0	proc near		; CODE XREF: sub_1002E440+1Ep

var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 60h
		push	ebx
		xor	ebx, ebx
		lea	eax, [esp+64h+var_60]
		push	esi
		push	eax
		mov	[esp+6Ch+var_54], ebx
		mov	[esp+6Ch+var_44], ebx
		mov	[esp+6Ch+var_34], ebx
		mov	[esp+6Ch+var_24], ebx
		mov	[esp+6Ch+var_14], ebx
		mov	[esp+6Ch+var_4], ebx
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002E762
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002E762
		lea	eax, [esp+68h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002E762
		lea	eax, [esp+68h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002E762
		lea	eax, [esp+68h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002E762
		lea	eax, [esp+68h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002E762
		push	edi
		mov	edi, [esp+6Ch+arg_4]
		lea	eax, [esp+6Ch+var_60]
		push	10h
		push	dword ptr [edi+0Ch]
		push	eax
		call	sub_10029E90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002E761
		push	10h
		push	dword ptr [edi+10h]
		lea	eax, [esp+74h+var_50]
		push	eax
		call	sub_10029E90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002E761
		push	10h
		push	dword ptr [edi+14h]
		lea	eax, [esp+74h+var_40]
		push	eax
		call	sub_10029E90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002E761
		push	10h
		push	dword ptr [edi+18h]
		lea	eax, [esp+74h+var_30]
		push	eax
		call	sub_10029E90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002E761
		push	10h
		push	dword ptr [edi+1Ch]
		lea	eax, [esp+74h+var_20]
		push	eax
		call	sub_10029E90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002E761
		push	10h
		push	dword ptr [edi+20h]
		lea	eax, [esp+74h+var_10]
		push	eax
		call	sub_10029E90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002E761
		lea	eax, [esp+6Ch+var_60]
		push	eax
		call	sub_10028CD0
		add	esp, 4
		dec	eax
		jns	short loc_1002E712
		mov	esi, eax
		jmp	short loc_1002E761
; ---------------------------------------------------------------------------

loc_1002E712:				; CODE XREF: sub_1002E5B0+15Cj
		cmp	[edi+4], ebx
		jnz	short loc_1002E75C
		mov	eax, [esp+6Ch+arg_0]
		push	dword ptr [edi+24h]
		sub	eax, 3
		jz	loc_1002E7D2
		sub	eax, 2
		lea	eax, [esp+70h+var_10]
		push	eax
		lea	eax, [esp+74h+var_20]
		push	eax
		lea	eax, [esp+78h+var_30]
		push	eax
		lea	eax, [esp+7Ch+var_40]
		push	eax
		lea	eax, [esp+80h+var_50]
		push	eax
		lea	eax, [esp+84h+var_60]
		push	eax
		jz	short loc_1002E7BA
		call	sub_1002E2C0
		mov	ebx, eax
		add	esp, 1Ch
		test	ebx, ebx
		jnz	loc_1002E82C

loc_1002E75C:				; CODE XREF: sub_1002E5B0+165j
					; sub_1002E5B0+216j ...
		mov	esi, 0FFFFFFFBh

loc_1002E761:				; CODE XREF: sub_1002E5B0+C4j
					; sub_1002E5B0+E0j ...
		pop	edi

loc_1002E762:				; CODE XREF: sub_1002E5B0+30j
					; sub_1002E5B0+47j ...
		lea	eax, [esp+68h+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+6Ch+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+70h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+74h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+78h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+7Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 18h
		test	esi, esi
		jz	loc_1002E853
		push	ebx		; void *
		call	sub_1002E3C0
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	ebx
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_1002E7BA:				; CODE XREF: sub_1002E5B0+198j
		call	sub_1002E1D0
		mov	ebx, eax
		add	esp, 1Ch
		test	ebx, ebx
		jz	short loc_1002E75C
		push	5
		push	ebx
		call	sub_10033DC0
		jmp	short loc_1002E81F
; ---------------------------------------------------------------------------

loc_1002E7D2:				; CODE XREF: sub_1002E5B0+171j
		lea	eax, [esp+70h+var_10]
		push	eax
		lea	eax, [esp+74h+var_20]
		push	eax
		lea	eax, [esp+78h+var_30]
		push	eax
		lea	eax, [esp+7Ch+var_40]
		push	eax
		lea	eax, [esp+80h+var_50]
		push	eax
		lea	eax, [esp+84h+var_60]
		push	eax
		call	sub_1002E1D0
		mov	ebx, eax
		add	esp, 1Ch
		test	ebx, ebx
		jz	loc_1002E75C
		push	3
		push	ebx
		call	sub_10033AA0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002E761
		push	3
		push	ebx
		call	sub_10034380

loc_1002E81F:				; CODE XREF: sub_1002E5B0+220j
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002E761

loc_1002E82C:				; CODE XREF: sub_1002E5B0+1A6j
		mov	eax, [edi]
		test	eax, eax
		jz	loc_1002E761
		push	eax		; char *
		call	ds:strdup
		add	esp, 4
		mov	[ebx+8], eax
		test	eax, eax
		jnz	loc_1002E761
		lea	esi, [eax-2]
		jmp	loc_1002E761
; ---------------------------------------------------------------------------

loc_1002E853:				; CODE XREF: sub_1002E5B0+1F3j
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 60h
		retn
sub_1002E5B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E860	proc near		; CODE XREF: sub_1002E9C0+1Bj

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		push	28h		; size_t
		push	1		; size_t
		call	ds:calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_1002E92A
		mov	edi, [esp+0Ch+arg_0]
		mov	ebx, ds:strdup
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_1002E89A
		push	eax		; char *
		call	ebx ; strdup
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jz	loc_1002E92A

loc_1002E89A:				; CODE XREF: sub_1002E860+28j
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	eax, [edi+8]
		mov	[esi+8], eax
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_1002E8BA
		push	eax		; char *
		call	ebx ; strdup
		add	esp, 4
		mov	[esi+0Ch], eax
		test	eax, eax
		jz	short loc_1002E92A

loc_1002E8BA:				; CODE XREF: sub_1002E860+4Bj
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_1002E8CE
		push	eax		; char *
		call	ebx ; strdup
		add	esp, 4
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_1002E92A

loc_1002E8CE:				; CODE XREF: sub_1002E860+5Fj
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_1002E8E2
		push	eax		; char *
		call	ebx ; strdup
		add	esp, 4
		mov	[esi+14h], eax
		test	eax, eax
		jz	short loc_1002E92A

loc_1002E8E2:				; CODE XREF: sub_1002E860+73j
		mov	eax, [edi+18h]
		test	eax, eax
		jz	short loc_1002E8F6
		push	eax		; char *
		call	ebx ; strdup
		add	esp, 4
		mov	[esi+18h], eax
		test	eax, eax
		jz	short loc_1002E92A

loc_1002E8F6:				; CODE XREF: sub_1002E860+87j
		mov	eax, [edi+1Ch]
		test	eax, eax
		jz	short loc_1002E90A
		push	eax		; char *
		call	ebx ; strdup
		add	esp, 4
		mov	[esi+1Ch], eax
		test	eax, eax
		jz	short loc_1002E92A

loc_1002E90A:				; CODE XREF: sub_1002E860+9Bj
		mov	eax, [edi+20h]
		test	eax, eax
		jz	short loc_1002E91E
		push	eax		; char *
		call	ebx ; strdup
		add	esp, 4
		mov	[esi+20h], eax
		test	eax, eax
		jz	short loc_1002E92A

loc_1002E91E:				; CODE XREF: sub_1002E860+AFj
		mov	eax, [edi+24h]
		mov	[esi+24h], eax
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002E92A:				; CODE XREF: sub_1002E860+14j
					; sub_1002E860+34j ...
		push	esi		; void *
		call	sub_1002E940
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1002E860	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002E940(void	*)
sub_1002E940	proc near		; CODE XREF: sub_1002E440+32p
					; sub_1002E860+CBp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1002E9B1
		mov	eax, [esi]
		push	edi
		mov	edi, ds:free
		test	eax, eax
		jz	short loc_1002E95C
		push	eax		; void *
		call	edi ; free
		add	esp, 4

loc_1002E95C:				; CODE XREF: sub_1002E940+14j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1002E969
		push	eax		; void *
		call	edi ; free
		add	esp, 4

loc_1002E969:				; CODE XREF: sub_1002E940+21j
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1002E976
		push	eax		; void *
		call	edi ; free
		add	esp, 4

loc_1002E976:				; CODE XREF: sub_1002E940+2Ej
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_1002E983
		push	eax		; void *
		call	edi ; free
		add	esp, 4

loc_1002E983:				; CODE XREF: sub_1002E940+3Bj
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_1002E990
		push	eax		; void *
		call	edi ; free
		add	esp, 4

loc_1002E990:				; CODE XREF: sub_1002E940+48j
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_1002E99D
		push	eax		; void *
		call	edi ; free
		add	esp, 4

loc_1002E99D:				; CODE XREF: sub_1002E940+55j
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_1002E9AA
		push	eax		; void *
		call	edi ; free
		add	esp, 4

loc_1002E9AA:				; CODE XREF: sub_1002E940+62j
		push	esi		; void *
		call	edi ; free
		add	esp, 4
		pop	edi

loc_1002E9B1:				; CODE XREF: sub_1002E940+7j
		pop	esi
		retn
sub_1002E940	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E9C0	proc near		; CODE XREF: sub_1002E440+Bp

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		lea	eax, [ecx-1]
		cmp	eax, 38h
		ja	short loc_1002E9E0
		mov	eax, dword_1004E220[ecx*4]
		test	eax, eax
		jz	short loc_1002E9E0
		mov	[esp+arg_0], eax
		jmp	sub_1002E860
; ---------------------------------------------------------------------------

loc_1002E9E0:				; CODE XREF: sub_1002E9C0+Aj
					; sub_1002E9C0+15j
		xor	eax, eax
		retn
sub_1002E9C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E9F0	proc near		; CODE XREF: sub_1002EC90+63Cp
					; sub_10030CC0+22Fp ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 10h
		push	ebx
		mov	ebx, [esp+14h+arg_4]
		push	edi
		test	ebx, ebx
		jz	loc_1002EB74
		mov	edi, [esp+18h+arg_0]
		test	edi, edi
		jz	loc_1002EB74
		push	ebp
		push	esi
		lea	ebp, [edi+4Ch]
		mov	[esp+20h+var_4], 0
		push	ebp
		push	ebx
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jle	short loc_1002EA5A
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002EB54
		lea	eax, [esp+20h+var_10]
		push	eax
		push	ebp
		push	ebx
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002EB54
		jmp	short loc_1002EA77
; ---------------------------------------------------------------------------

loc_1002EA5A:				; CODE XREF: sub_1002E9F0+36j
		mov	eax, [ebx+8]
		mov	[esp+20h+var_8], eax
		mov	eax, [ebx+4]
		mov	[esp+20h+var_C], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+20h+var_10], 0
		mov	[esp+20h+var_4], eax

loc_1002EA77:				; CODE XREF: sub_1002E9F0+68j
		mov	eax, [esp+20h+arg_8]
		test	eax, eax
		jz	short loc_1002EAF0
		mov	ecx, [esp+20h+arg_C]
		test	ecx, ecx
		jz	short loc_1002EAF0
		mov	edx, [edi+4]
		mov	esi, [edx+44h]
		test	esi, esi
		jz	short loc_1002EACF
		push	edx
		push	[esp+24h+arg_10]
		push	eax
		call	esi
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002EB54
		mov	eax, [edi+4]
		mov	ebp, [esp+20h+arg_14]
		push	eax
		push	ebp
		push	[esp+28h+arg_C]
		mov	eax, [eax+44h]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002EB54
		mov	eax, [esp+20h+arg_10]
		push	edi
		push	ebp
		push	eax
		push	ebp
		jmp	short loc_1002EB14
; ---------------------------------------------------------------------------

loc_1002EACF:				; CODE XREF: sub_1002E9F0+9Fj
		mov	ebp, [esp+20h+arg_14]
		push	edi
		push	ebp
		push	[esp+28h+arg_10]
		push	ecx
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		mov	eax, [edi+6Ch]
		call	eax
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jns	short loc_1002EB28
		jmp	short loc_1002EB54
; ---------------------------------------------------------------------------

loc_1002EAF0:				; CODE XREF: sub_1002E9F0+8Dj
					; sub_1002E9F0+95j
		mov	ebp, [esp+20h+arg_14]
		mov	eax, [edi+70h]
		push	edi
		push	ebp
		push	[esp+28h+arg_10]
		test	eax, eax
		jz	short loc_1002EB0D
		lea	ecx, [esp+2Ch+var_10]
		push	ecx
		call	eax
		add	esp, 10h
		jmp	short loc_1002EB22
; ---------------------------------------------------------------------------

loc_1002EB0D:				; CODE XREF: sub_1002E9F0+10Fj
		lea	eax, [edi+3Ch]
		push	eax
		lea	eax, [edi+2Ch]

loc_1002EB14:				; CODE XREF: sub_1002E9F0+DDj
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		mov	eax, [edi+6Ch]
		call	eax
		add	esp, 18h

loc_1002EB22:				; CODE XREF: sub_1002E9F0+11Bj
		mov	esi, eax
		test	esi, esi
		js	short loc_1002EB54

loc_1002EB28:				; CODE XREF: sub_1002E9F0+FCj
		mov	eax, [edi+4]
		mov	ecx, [eax+48h]
		test	ecx, ecx
		jz	short loc_1002EB54
		push	eax
		mov	eax, [esp+24h+arg_10]
		push	eax
		push	eax
		call	ecx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002EB54
		mov	eax, [edi+4]
		push	eax
		push	ebp
		push	ebp
		mov	eax, [eax+48h]
		call	eax
		add	esp, 0Ch
		mov	esi, eax

loc_1002EB54:				; CODE XREF: sub_1002E9F0+49j
					; sub_1002E9F0+62j ...
		mov	eax, [esp+20h+var_4]
		cmp	eax, [ebx+0Ch]
		jz	short loc_1002EB6A
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_1002EB6A:				; CODE XREF: sub_1002E9F0+16Bj
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002EB74:				; CODE XREF: sub_1002E9F0+Bj
					; sub_1002E9F0+17j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 10h
		retn
sub_1002E9F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002EB80	proc near		; CODE XREF: sub_10018500+24Dp

var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 20h
		push	ebp
		mov	ebp, [esp+24h+arg_0]
		mov	[esp+24h+var_14], 0
		mov	[esp+24h+var_4], 0
		test	ebp, ebp
		jnz	short loc_1002EBA4
		lea	eax, [ebp-4]
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002EBA4:				; CODE XREF: sub_1002EB80+1Aj
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+30h+arg_4]
		test	edi, edi
		jz	short loc_1002EBF2
		lea	ebx, [ebp+4Ch]
		push	ebx
		push	edi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		js	short loc_1002EBF4
		lea	eax, [esp+30h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002EC68
		lea	eax, [esp+30h+var_20]
		push	eax
		push	ebx
		push	edi
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002EC68
		lea	edi, [esp+30h+var_20]
		jmp	short loc_1002EBF4
; ---------------------------------------------------------------------------

loc_1002EBF2:				; CODE XREF: sub_1002EB80+2Dj
		xor	edi, edi

loc_1002EBF4:				; CODE XREF: sub_1002EB80+3Ej
					; sub_1002EB80+70j
		mov	ebx, [esp+30h+arg_8]
		test	ebx, ebx
		jz	short loc_1002EC3E
		lea	eax, [ebp+4Ch]
		push	eax
		push	ebx
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		js	short loc_1002EC40
		lea	eax, [esp+30h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_1002EC68
		lea	eax, [esp+30h+var_10]
		push	eax
		lea	eax, [ebp+4Ch]
		push	eax
		push	ebx
		call	sub_10029A70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002EC68
		lea	ebx, [esp+30h+var_10]
		jmp	short loc_1002EC40
; ---------------------------------------------------------------------------

loc_1002EC3E:				; CODE XREF: sub_1002EB80+7Aj
		xor	ebx, ebx

loc_1002EC40:				; CODE XREF: sub_1002EB80+8Bj
					; sub_1002EB80+BCj
		mov	eax, [ebp+74h]
		push	ebp
		push	[esp+34h+arg_18]
		push	[esp+38h+arg_14]
		push	[esp+3Ch+arg_10]
		push	[esp+40h+arg_C]
		push	ebx
		push	edi
		test	eax, eax
		jz	short loc_1002EC5E
		call	eax
		jmp	short loc_1002EC63
; ---------------------------------------------------------------------------

loc_1002EC5E:				; CODE XREF: sub_1002EB80+D8j
		call	sub_1002EC90

loc_1002EC63:				; CODE XREF: sub_1002EB80+DCj
		mov	esi, eax
		add	esp, 1Ch

loc_1002EC68:				; CODE XREF: sub_1002EB80+51j
					; sub_1002EB80+6Aj ...
		lea	eax, [esp+30h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 8
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 20h
		retn
sub_1002EB80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002EC90	proc near		; CODE XREF: sub_1002EB80:loc_1002EC5Ep

var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F4		= byte ptr -1F4h
var_1E8		= byte ptr -1E8h
var_1E4		= byte ptr -1E4h
var_1D4		= byte ptr -1D4h
var_1C4		= byte ptr -1C4h
var_1B4		= byte ptr -1B4h
var_1A4		= byte ptr -1A4h
var_194		= byte ptr -194h
var_184		= byte ptr -184h
var_174		= byte ptr -174h
var_164		= byte ptr -164h
var_144		= byte ptr -144h
var_124		= byte ptr -124h
var_104		= byte ptr -104h
var_F4		= byte ptr -0F4h
var_84		= byte ptr -84h
var_74		= byte ptr -74h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 224h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+224h+var_4], eax
		mov	edx, [esp+224h+arg_4]
		mov	eax, [esp+224h+arg_8]
		mov	ecx, [esp+224h+arg_C]
		push	ebx
		mov	ebx, [esp+228h+arg_14]
		push	ebp
		mov	ebp, [esp+22Ch+arg_18]
		mov	[esp+22Ch+var_208], edx
		mov	[esp+22Ch+var_210], eax
		mov	[esp+22Ch+var_214], ecx
		mov	[esp+22Ch+var_21C], ebx
		push	esi
		mov	esi, [esp+230h+arg_0]
		mov	[esp+230h+var_20C], esi
		push	edi
		mov	edi, [esp+234h+arg_10]
		mov	[esp+234h+var_220], edi
		test	ebp, ebp
		jnz	short loc_1002ECFF

loc_1002ECF5:				; CODE XREF: sub_1002EC90+75j
					; sub_1002EC90+79j ...
		mov	eax, 0FFFFFFFCh
		jmp	loc_1002F2D4
; ---------------------------------------------------------------------------

loc_1002ECFF:				; CODE XREF: sub_1002EC90+63j
		test	esi, esi
		jnz	short loc_1002ED19
		test	edx, edx
		jz	short loc_1002ECF5
		test	eax, eax
		jz	short loc_1002ECF5
		test	ecx, ecx
		jz	short loc_1002ECF5
		push	ebx
		push	edi
		push	ecx
		push	eax
		push	edx
		jmp	loc_1002F2CB
; ---------------------------------------------------------------------------

loc_1002ED19:				; CODE XREF: sub_1002EC90+71j
		test	edx, edx
		jz	loc_1002F2C4
		test	eax, eax
		jz	loc_1002F2C4
		test	ecx, ecx
		jz	loc_1002F2C4
		lea	eax, [esp+234h+var_1E8]
		mov	ecx, 4
		lea	ebx, [ebx+0]

loc_1002ED40:				; CODE XREF: sub_1002EC90+EFj
		mov	dword ptr [eax-10h], 0
		lea	eax, [eax+80h]
		mov	dword ptr [eax-80h], 0
		mov	dword ptr [eax-70h], 0
		mov	dword ptr [eax-60h], 0
		mov	dword ptr [eax-50h], 0
		mov	dword ptr [eax-40h], 0
		mov	dword ptr [eax-30h], 0
		mov	dword ptr [eax-20h], 0
		dec	ecx
		jnz	short loc_1002ED40
		mov	[esp+234h+var_224], ecx
		lea	ecx, [esp+234h+var_1F4]
		mov	[esp+234h+var_218], ecx
		lea	ecx, [ecx+0]

loc_1002ED90:				; CODE XREF: sub_1002EC90+151j
		xor	ebx, ebx
		mov	esi, ecx

loc_1002ED94:				; CODE XREF: sub_1002EC90+138j
		lea	eax, [esi-10h]
		push	14h
		push	eax
		call	sub_10029940
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_1002F292
		push	14h
		push	esi
		call	sub_10029940
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_1002F292
		inc	ebx
		add	esi, 20h
		cmp	ebx, 4
		jl	short loc_1002ED94
		mov	eax, [esp+234h+var_224]
		mov	ecx, [esp+234h+var_218]
		inc	eax
		sub	ecx, 0FFFFFF80h
		mov	[esp+234h+var_224], eax
		mov	[esp+234h+var_218], ecx
		cmp	eax, 4
		jl	short loc_1002ED90
		mov	edi, [esp+234h+var_208]
		push	edi
		call	sub_10028CD0
		mov	ebx, [esp+238h+var_20C]
		mov	esi, eax
		push	ebx
		call	sub_10028CD0
		add	esp, 8
		cmp	eax, esi
		jge	loc_1002EEAD
		mov	eax, [ebp+4]
		mov	[esp+234h+var_224], edi
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_1002EE48
		push	eax
		lea	eax, [esp+238h+var_184]
		push	eax
		push	[esp+23Ch+var_210]
		call	ecx
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_1002F292
		mov	eax, [ebp+4]
		lea	ecx, [esp+234h+var_174]
		push	eax
		push	ecx
		push	[esp+23Ch+var_214]
		mov	eax, [eax+44h]
		call	eax
		add	esp, 0Ch
		jmp	short loc_1002EE7A
; ---------------------------------------------------------------------------

loc_1002EE48:				; CODE XREF: sub_1002EC90+180j
		lea	eax, [esp+234h+var_184]
		push	eax
		push	[esp+238h+var_210]
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_1002F292
		lea	eax, [esp+234h+var_174]
		push	eax
		push	[esp+238h+var_214]
		call	sub_100290F0
		add	esp, 8

loc_1002EE7A:				; CODE XREF: sub_1002EC90+1B6j
		mov	edi, eax
		test	edi, edi
		js	loc_1002F292
		lea	eax, [esp+234h+var_1E4]
		push	eax
		lea	eax, [ebp+2Ch]
		push	eax
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_1002F292
		lea	eax, [esp+234h+var_1D4]
		push	eax
		lea	eax, [ebp+3Ch]
		push	eax
		jmp	loc_1002EF4F
; ---------------------------------------------------------------------------

loc_1002EEAD:				; CODE XREF: sub_1002EC90+16Ej
		lea	eax, [esp+234h+var_184]
		mov	[esp+234h+var_224], ebx
		push	eax
		lea	eax, [ebp+2Ch]
		mov	[esp+238h+var_20C], edi
		push	eax
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_1002F292
		lea	eax, [esp+234h+var_174]
		push	eax
		lea	eax, [ebp+3Ch]
		push	eax
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_1002F292
		mov	eax, [ebp+4]
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_1002EF2B
		push	eax
		lea	eax, [esp+238h+var_1E4]
		push	eax
		push	[esp+23Ch+var_210]
		call	ecx
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_1002F292
		mov	eax, [ebp+4]
		lea	ecx, [esp+234h+var_1D4]
		push	eax
		push	ecx
		push	[esp+23Ch+var_214]
		mov	eax, [eax+44h]
		call	eax
		add	esp, 0Ch
		jmp	short loc_1002EF57
; ---------------------------------------------------------------------------

loc_1002EF2B:				; CODE XREF: sub_1002EC90+269j
		lea	eax, [esp+234h+var_1E4]
		push	eax
		push	[esp+238h+var_210]
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_1002F292
		lea	eax, [esp+234h+var_1D4]
		push	eax
		push	[esp+238h+var_214]

loc_1002EF4F:				; CODE XREF: sub_1002EC90+218j
		call	sub_100290F0
		add	esp, 8

loc_1002EF57:				; CODE XREF: sub_1002EC90+299j
		mov	edi, eax
		test	edi, edi
		js	loc_1002F292
		lea	eax, [esp+234h+var_204]
		push	eax
		call	sub_1002A9C0
		lea	eax, [esp+238h+var_1F4]
		push	eax
		call	sub_1002A9C0
		push	ebp
		lea	eax, [esp+240h+var_F4]
		push	eax
		lea	eax, [esp+244h+var_104]
		push	eax
		lea	eax, [esp+248h+var_174]
		push	eax
		lea	eax, [esp+24Ch+var_184]
		push	eax
		mov	eax, [ebp+68h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_1002F292
		push	ebp
		lea	eax, [esp+238h+var_74]
		push	eax
		lea	eax, [esp+23Ch+var_84]
		push	eax
		lea	eax, [esp+240h+var_F4]
		push	eax
		lea	eax, [esp+244h+var_104]
		push	eax
		lea	eax, [esp+248h+var_174]
		push	eax
		lea	eax, [esp+24Ch+var_184]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_1002F292
		mov	ebx, 1
		lea	esi, [esp+234h+var_164]

loc_1002EFF7:				; CODE XREF: sub_1002EC90+398j
		push	ebp
		lea	eax, [esi+10h]
		push	eax
		push	esi
		lea	eax, [esi-10h]
		push	eax
		lea	eax, [esi-20h]
		push	eax
		lea	eax, [esp+248h+var_1D4]
		push	eax
		lea	eax, [esp+24Ch+var_1E4]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_1002F292
		inc	ebx
		sub	esi, 0FFFFFF80h
		cmp	ebx, 4
		jl	short loc_1002EFF7
		push	ebp
		lea	eax, [esp+238h+var_1B4]
		push	eax
		lea	eax, [esp+23Ch+var_1C4]
		push	eax
		lea	eax, [esp+240h+var_1D4]
		push	eax
		lea	eax, [esp+244h+var_1E4]
		push	eax
		mov	eax, [ebp+68h]
		call	eax
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		js	loc_1002F292
		mov	ebx, 1
		lea	esi, [esp+234h+var_144]

loc_1002F060:				; CODE XREF: sub_1002EC90+407j
		push	ebp
		lea	eax, [esi+10h]
		push	eax
		push	esi
		lea	eax, [esi-30h]
		push	eax
		lea	eax, [esi-40h]
		push	eax
		lea	eax, [esp+248h+var_1B4]
		push	eax
		lea	eax, [esp+24Ch+var_1C4]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_1002F292
		inc	ebx
		sub	esi, 0FFFFFF80h
		cmp	ebx, 4
		jl	short loc_1002F060
		push	ebp
		lea	eax, [esp+238h+var_194]
		push	eax
		lea	eax, [esp+23Ch+var_1A4]
		push	eax
		lea	eax, [esp+240h+var_1B4]
		push	eax
		lea	eax, [esp+244h+var_1C4]
		push	eax
		lea	eax, [esp+248h+var_1D4]
		push	eax
		lea	eax, [esp+24Ch+var_1E4]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_1002F292
		mov	ebx, 1
		lea	esi, [esp+234h+var_124]

loc_1002F0E2:				; CODE XREF: sub_1002EC90+489j
		push	ebp
		lea	eax, [esi+10h]
		push	eax
		push	esi
		lea	eax, [esi-50h]
		push	eax
		lea	eax, [esi-60h]
		push	eax
		lea	eax, [esp+248h+var_194]
		push	eax
		lea	eax, [esp+24Ch+var_1A4]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_1002F292
		inc	ebx
		sub	esi, 0FFFFFF80h
		cmp	ebx, 4
		jl	short loc_1002F0E2
		push	[esp+234h+var_224]
		call	sub_10028CD0
		push	[esp+238h+var_220]
		inc	eax
		cdq
		sub	eax, edx
		mov	ebx, eax
		sar	ebx, 1
		call	sub_1002A9C0
		push	[esp+23Ch+var_21C]
		call	sub_1002A9C0
		add	esp, 0Ch
		dec	ebx
		mov	[esp+234h+var_218], ebx
		js	loc_1002F262
		lea	esi, [ebx+ebx]
		nop

loc_1002F150:				; CODE XREF: sub_1002EC90+5CCj
		mov	ebx, [esp+234h+var_224]
		lea	edi, [esi+1]
		push	ebx
		call	sub_10028CD0
		add	esp, 4
		cmp	edi, eax
		jl	short loc_1002F168
		xor	ebx, ebx
		jmp	short loc_1002F174
; ---------------------------------------------------------------------------

loc_1002F168:				; CODE XREF: sub_1002EC90+4D2j
		push	edi
		push	ebx
		call	sub_10028AF0
		add	esp, 8
		mov	ebx, eax

loc_1002F174:				; CODE XREF: sub_1002EC90+4D6j
		push	[esp+234h+var_224]
		add	ebx, ebx
		call	sub_10028CD0
		add	esp, 4
		cmp	esi, eax
		jl	short loc_1002F18A
		xor	eax, eax
		jmp	short loc_1002F197
; ---------------------------------------------------------------------------

loc_1002F18A:				; CODE XREF: sub_1002EC90+4F4j
		push	esi
		push	[esp+238h+var_224]
		call	sub_10028AF0
		add	esp, 8

loc_1002F197:				; CODE XREF: sub_1002EC90+4F8j
		or	ebx, eax
		mov	[esp+234h+var_208], ebx
		mov	ebx, [esp+234h+var_20C]
		push	ebx
		call	sub_10028CD0
		add	esp, 4
		cmp	edi, eax
		jl	short loc_1002F1B2
		xor	ebx, ebx
		jmp	short loc_1002F1BE
; ---------------------------------------------------------------------------

loc_1002F1B2:				; CODE XREF: sub_1002EC90+51Cj
		push	edi
		push	ebx
		call	sub_10028AF0
		add	esp, 8
		mov	ebx, eax

loc_1002F1BE:				; CODE XREF: sub_1002EC90+520j
		mov	edi, [esp+234h+var_20C]
		add	ebx, ebx
		push	edi
		call	sub_10028CD0
		add	esp, 4
		cmp	esi, eax
		jl	short loc_1002F1D5
		xor	eax, eax
		jmp	short loc_1002F1DF
; ---------------------------------------------------------------------------

loc_1002F1D5:				; CODE XREF: sub_1002EC90+53Fj
		push	esi
		push	edi
		call	sub_10028AF0
		add	esp, 8

loc_1002F1DF:				; CODE XREF: sub_1002EC90+543j
		mov	ecx, [esp+234h+var_220]
		or	ebx, eax
		mov	eax, [esp+234h+var_21C]
		push	ebp
		push	eax
		push	ecx
		push	eax
		mov	eax, [ebp+68h]
		push	ecx
		call	eax
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		js	loc_1002F292
		mov	eax, [esp+234h+var_21C]
		mov	ecx, [esp+234h+var_220]
		push	ebp
		push	eax
		push	ecx
		push	eax
		mov	eax, [ebp+68h]
		push	ecx
		call	eax
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		js	short loc_1002F292
		mov	eax, [esp+234h+var_208]
		mov	edx, [esp+234h+var_21C]
		push	ebp
		push	edx
		lea	ecx, [ebx+eax*4]
		mov	ebx, [esp+23Ch+var_220]
		shl	ecx, 5
		lea	eax, [esp+23Ch+var_1F4]
		add	eax, ecx
		push	ebx
		push	eax
		lea	eax, [esp+244h+var_204]
		add	eax, ecx
		push	eax
		mov	eax, [ebp+60h]
		push	edx
		push	ebx
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	short loc_1002F292
		mov	ebx, [esp+234h+var_218]
		sub	esi, 2
		dec	ebx
		mov	[esp+234h+var_218], ebx
		test	ebx, ebx
		jns	loc_1002F150

loc_1002F262:				; CODE XREF: sub_1002EC90+4B6j
		mov	eax, [ebp+4]
		mov	ecx, [eax+48h]
		test	ecx, ecx
		jz	short loc_1002F292
		push	eax
		mov	eax, [esp+238h+var_220]
		push	eax
		push	eax
		call	ecx
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_1002F292
		mov	eax, [ebp+4]
		mov	ecx, [esp+234h+var_21C]
		push	eax
		push	ecx
		mov	eax, [eax+48h]
		push	ecx
		call	eax
		add	esp, 0Ch
		mov	edi, eax

loc_1002F292:				; CODE XREF: sub_1002EC90+116j
					; sub_1002EC90+12Bj ...
		lea	esi, [esp+234h+var_1F4]
		mov	ebp, 4
		jmp	short loc_1002F2A0
; ---------------------------------------------------------------------------
		align 10h

loc_1002F2A0:				; CODE XREF: sub_1002EC90+60Bj
					; sub_1002EC90+62Ej
		mov	ebx, 4

loc_1002F2A5:				; CODE XREF: sub_1002EC90+62Bj
		lea	eax, [esi-10h]
		push	eax
		call	sub_10028F00
		push	esi
		call	sub_10028F00
		add	esp, 8
		add	esi, 20h
		dec	ebx
		jnz	short loc_1002F2A5
		dec	ebp
		jnz	short loc_1002F2A0
		mov	eax, edi
		jmp	short loc_1002F2D4
; ---------------------------------------------------------------------------

loc_1002F2C4:				; CODE XREF: sub_1002EC90+8Bj
					; sub_1002EC90+93j ...
		push	ebx
		push	edi
		push	0
		push	0
		push	esi

loc_1002F2CB:				; CODE XREF: sub_1002EC90+84j
		push	ebp
		call	sub_1002E9F0
		add	esp, 18h

loc_1002F2D4:				; CODE XREF: sub_1002EC90+6Aj
					; sub_1002EC90+632j
		mov	ecx, [esp+234h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 224h
		retn
sub_1002EC90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002F2F0	proc near		; CODE XREF: sub_1002E1D0+14p
					; sub_100321D0+5p

arg_0		= dword	ptr  4

		push	esi
		call	sub_1002F470
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1002F2FE
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002F2FE:				; CODE XREF: sub_1002F2F0+Aj
		push	ebp
		push	edi
		lea	ebp, [esi+4]
		push	ebp
		push	[esp+10h+arg_0]
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_1002F3ED
		push	[esp+0Ch+arg_0]
		call	sub_10028CD0
		mov	[esi+14h], eax
		add	esp, 4
		mov	eax, [esi+0Ch]
		add	eax, 0FFFFFFFDh
		mov	dword ptr [esi+24h], 0
		mov	dword ptr [esi+20h], 0
		mov	dword ptr [esi+1Ch], 0
		mov	dword ptr [esi+18h], 0
		cmp	eax, 3		; switch 4 cases
		ja	short loc_1002F397 ; jumptable 1002F350	default	case
		jmp	ds:off_1002F420[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F357:				; CODE XREF: sub_1002F2F0+60j
					; DATA XREF: .text:off_1002F420o
		mov	dword ptr [esi+28h], offset sub_1002F530 ; jumptable 1002F350 case 0
		mov	dword ptr [esi+30h], offset loc_10030080
		jmp	short loc_1002F3A5
; ---------------------------------------------------------------------------

loc_1002F367:				; CODE XREF: sub_1002F2F0+60j
					; DATA XREF: .text:off_1002F420o
		mov	dword ptr [esi+28h], offset sub_1002F6C0 ; jumptable 1002F350 case 1
		mov	dword ptr [esi+30h], offset sub_10030190
		jmp	short loc_1002F3A5
; ---------------------------------------------------------------------------

loc_1002F377:				; CODE XREF: sub_1002F2F0+60j
					; DATA XREF: .text:off_1002F420o
		mov	dword ptr [esi+28h], offset sub_1002F8E0 ; jumptable 1002F350 case 2
		mov	dword ptr [esi+30h], offset sub_10030330
		jmp	short loc_1002F3A5
; ---------------------------------------------------------------------------

loc_1002F387:				; CODE XREF: sub_1002F2F0+60j
					; DATA XREF: .text:off_1002F420o
		mov	dword ptr [esi+28h], offset sub_1002FB70 ; jumptable 1002F350 case 3
		mov	dword ptr [esi+30h], offset sub_10030530
		jmp	short loc_1002F3A5
; ---------------------------------------------------------------------------

loc_1002F397:				; CODE XREF: sub_1002F2F0+5Ej
		mov	dword ptr [esi+28h], offset loc_1002F4E0 ; jumptable 1002F350 default case
		mov	dword ptr [esi+30h], offset sub_1002FFD0

loc_1002F3A5:				; CODE XREF: sub_1002F2F0+75j
					; sub_1002F2F0+85j ...
		mov	dword ptr [esi+2Ch], offset loc_1002FF70
		test	edi, edi
		mov	dword ptr [esi+34h], offset loc_1002FF30
		mov	dword ptr [esi+38h], offset loc_1002FF50
		mov	dword ptr [esi+3Ch], offset loc_1002FFB0
		mov	dword ptr [esi+40h], offset sub_1002FEA0
		mov	dword ptr [esi+44h], 0
		mov	dword ptr [esi+48h], 0
		mov	dword ptr [esi+4Ch], 0
		mov	dword ptr [esi+50h], 0
		mov	dword ptr [esi+54h], 0

loc_1002F3ED:				; CODE XREF: sub_1002F2F0+24j
		jz	short loc_1002F41A
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_1002F414
		push	ebp
		call	sub_10028F00
		mov	eax, [esi+54h]
		add	esp, 4
		test	eax, eax
		jz	short loc_1002F40A
		push	esi
		call	eax
		add	esp, 4

loc_1002F40A:				; CODE XREF: sub_1002F2F0+112j
		push	esi		; void *
		call	ds:free
		add	esp, 4

loc_1002F414:				; CODE XREF: sub_1002F2F0+102j
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002F41A:				; CODE XREF: sub_1002F2F0:loc_1002F3EDj
		pop	edi
		pop	ebp
		mov	eax, esi
		pop	esi
		retn
sub_1002F2F0	endp

; ---------------------------------------------------------------------------
off_1002F420	dd offset loc_1002F357	; DATA XREF: sub_1002F2F0+60r
		dd offset loc_1002F367	; jump table for switch	statement
		dd offset loc_1002F377
		dd offset loc_1002F387

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002F430(void	*)
sub_1002F430	proc near		; CODE XREF: sub_1002E3C0+Cp
					; sub_100321D0+8Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1002F461
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_1002F461
		lea	eax, [esi+4]
		push	eax
		call	sub_10028F00
		mov	eax, [esi+54h]
		add	esp, 4
		test	eax, eax
		jz	short loc_1002F457
		push	esi
		call	eax
		add	esp, 4

loc_1002F457:				; CODE XREF: sub_1002F430+1Fj
		push	esi		; void *
		call	ds:free
		add	esp, 4

loc_1002F461:				; CODE XREF: sub_1002F430+7j
					; sub_1002F430+Cj
		pop	esi
		retn
sub_1002F430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002F470	proc near		; CODE XREF: sub_1002F2F0+1p
		push	esi
		push	58h		; size_t
		call	ds:malloc
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1002F484
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002F484:				; CODE XREF: sub_1002F470+10j
		push	edi
		lea	edi, [esi+4]
		mov	dword ptr [esi], 0
		push	edi
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+54h], 0
		call	sub_100298B0
		add	esp, 4
		test	eax, eax
		jz	short loc_1002F4D3
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_1002F4CE
		push	edi
		call	sub_10028F00
		mov	eax, [esi+54h]
		add	esp, 4
		test	eax, eax
		jz	short loc_1002F4C4
		push	esi
		call	eax
		add	esp, 4

loc_1002F4C4:				; CODE XREF: sub_1002F470+4Cj
		push	esi		; void *
		call	ds:free
		add	esp, 4

loc_1002F4CE:				; CODE XREF: sub_1002F470+3Cj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002F4D3:				; CODE XREF: sub_1002F470+37j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
sub_1002F470	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1002F4E0:				; DATA XREF: sub_1002F2F0:loc_1002F397o
		push	esi
		mov	esi, [esp+10h]
		push	esi
		push	dword ptr [esp+10h]
		push	dword ptr [esp+10h]
		call	sub_10028D40
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002F521
		push	edi
		mov	edi, [esp+18h]
		add	edi, 4
		push	edi
		push	esi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		js	short loc_1002F51E
		push	esi
		push	edi
		push	esi
		call	sub_1002A540
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002F51E:				; CODE XREF: .text:1002F50Ej
		xor	eax, eax
		pop	edi

loc_1002F521:				; CODE XREF: .text:1002F4F8j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002F530	proc near		; DATA XREF: sub_1002F2F0:loc_1002F357o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 14h
		mov	ecx, [esp+14h+arg_0]
		xor	edx, edx
		push	ebx
		push	ebp
		push	esi
		mov	eax, [ecx+8]
		xor	ebx, ebx
		push	edi
		xor	ebp, ebp
		mov	[esp+24h+var_14], ebx
		xor	esi, esi
		mov	[esp+24h+var_10], ebp
		xor	edi, edi
		mov	[esp+24h+var_C], edx
		dec	eax
		jz	short loc_1002F569
		dec	eax
		jz	short loc_1002F563
		dec	eax
		jnz	short loc_1002F572
		mov	eax, [ecx+0Ch]
		mov	edx, [eax+8]

loc_1002F563:				; CODE XREF: sub_1002F530+28j
		mov	eax, [ecx+0Ch]
		mov	esi, [eax+4]

loc_1002F569:				; CODE XREF: sub_1002F530+25j
		mov	eax, [ecx+0Ch]
		mov	ebx, [eax]
		mov	[esp+24h+var_14], ebx

loc_1002F572:				; CODE XREF: sub_1002F530+2Bj
		mov	ecx, [esp+24h+arg_4]
		mov	eax, [ecx+8]
		dec	eax
		jz	short loc_1002F592
		dec	eax
		jz	short loc_1002F588
		dec	eax
		jnz	short loc_1002F59B
		mov	eax, [ecx+0Ch]
		mov	edi, [eax+8]

loc_1002F588:				; CODE XREF: sub_1002F530+4Dj
		mov	eax, [ecx+0Ch]
		mov	eax, [eax+4]
		mov	[esp+24h+var_C], eax

loc_1002F592:				; CODE XREF: sub_1002F530+4Aj
		mov	eax, [ecx+0Ch]
		mov	ebp, [eax]
		mov	[esp+24h+var_10], ebp

loc_1002F59B:				; CODE XREF: sub_1002F530+50j
		add	ebp, ebx
		cmp	ebp, ebx
		mov	ebx, [esp+24h+var_C]
		push	3
		sbb	ecx, ecx
		add	ebx, esi
		neg	ecx
		cmp	ebx, esi
		mov	esi, [esp+28h+arg_8]
		sbb	eax, eax
		add	ebx, ecx
		neg	eax
		mov	[esp+28h+var_8], ebx
		cmp	ebx, ecx
		push	esi
		sbb	ecx, ecx
		add	edi, edx
		neg	ecx
		add	ecx, eax
		cmp	edi, edx
		mov	[esp+2Ch+arg_4], ecx
		sbb	eax, eax
		add	edi, ecx
		neg	eax
		mov	[esp+2Ch+var_C], eax
		call	sub_1002C8E0
		mov	edx, eax
		add	esp, 8
		mov	[esp+24h+arg_0], edx
		test	edx, edx
		js	loc_1002F6AA
		mov	ecx, [esi+0Ch]
		cmp	edi, [esp+24h+arg_4]
		mov	[ecx+8], edi
		mov	ecx, [esi+0Ch]
		mov	[ecx+4], ebx
		mov	ecx, [esi+0Ch]
		mov	ebx, [esp+24h+arg_C]
		mov	[ecx], ebp
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+8], 3
		mov	eax, [ebx+10h]
		mov	ebp, [eax+8]
		sbb	eax, eax
		neg	eax
		add	eax, [esp+24h+var_C]
		jnz	short loc_1002F63A
		cmp	edi, ebp
		ja	short loc_1002F63A
		jnz	short loc_1002F686
		lea	eax, [ebx+4]
		push	eax
		push	esi
		call	sub_10028F50
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1002F682

loc_1002F63A:				; CODE XREF: sub_1002F530+F0j
					; sub_1002F530+F4j
		mov	eax, [ebx+10h]
		mov	ebx, [esp+24h+var_10]
		add	ebx, [esp+24h+var_14]
		mov	ecx, [esp+24h+var_8]
		sub	ecx, [eax+4]
		sub	ebx, [eax]
		cmp	[esp+24h+var_8], ecx
		mov	eax, [esp+24h+var_14]
		sbb	edx, edx
		add	eax, [esp+24h+var_10]
		neg	edx
		cmp	ebx, eax
		jbe	short loc_1002F66A
		mov	eax, ecx
		dec	ecx
		test	eax, eax
		jnz	short loc_1002F66A
		inc	edx

loc_1002F66A:				; CODE XREF: sub_1002F530+130j
					; sub_1002F530+137j
		sub	edi, ebp
		test	edx, edx
		jz	short loc_1002F671
		dec	edi

loc_1002F671:				; CODE XREF: sub_1002F530+13Ej
		mov	eax, [esi+0Ch]
		mov	[eax+8], edi
		mov	eax, [esi+0Ch]
		mov	[eax+4], ecx
		mov	eax, [esi+0Ch]
		mov	[eax], ebx

loc_1002F682:				; CODE XREF: sub_1002F530+108j
		mov	edx, [esp+24h+arg_0]

loc_1002F686:				; CODE XREF: sub_1002F530+F6j
		mov	ecx, [esi+8]
		cmp	ecx, 1
		jbe	short loc_1002F6A5
		mov	eax, [esi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh

loc_1002F697:				; CODE XREF: sub_1002F530+173j
		cmp	dword ptr [eax], 0
		jnz	short loc_1002F6A5
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002F697

loc_1002F6A5:				; CODE XREF: sub_1002F530+15Cj
					; sub_1002F530+16Aj
		mov	[esi+8], ecx
		mov	eax, edx

loc_1002F6AA:				; CODE XREF: sub_1002F530+B6j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_1002F530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002F6C0	proc near		; DATA XREF: sub_1002F2F0:loc_1002F367o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 14h
		mov	ecx, [esp+14h+arg_0]
		xor	edx, edx
		push	ebx
		push	ebp
		push	esi
		mov	eax, [ecx+8]
		xor	ebx, ebx
		push	edi
		dec	eax
		mov	[esp+24h+var_14], edx
		xor	esi, esi
		mov	[esp+24h+var_8], edx
		xor	edi, edi
		mov	[esp+24h+var_10], ebx
		xor	ebp, ebp
		mov	[esp+24h+var_C], edx
		mov	[esp+24h+var_4], edx
		cmp	eax, 3		; switch 4 cases
		ja	short loc_1002F718 ; jumptable 1002F6F2	default	case
		jmp	ds:off_1002F8C0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F6F9:				; CODE XREF: sub_1002F6C0+32j
					; DATA XREF: .text:off_1002F8C0o
		mov	eax, [ecx+0Ch]	; jumptable 1002F6F2 case 3
		mov	eax, [eax+0Ch]
		mov	[esp+24h+var_8], eax

loc_1002F703:				; CODE XREF: sub_1002F6C0+32j
					; DATA XREF: .text:off_1002F8C0o
		mov	eax, [ecx+0Ch]	; jumptable 1002F6F2 case 2
		mov	edi, [eax+8]

loc_1002F709:				; CODE XREF: sub_1002F6C0+32j
					; DATA XREF: .text:off_1002F8C0o
		mov	eax, [ecx+0Ch]	; jumptable 1002F6F2 case 1
		mov	esi, [eax+4]

loc_1002F70F:				; CODE XREF: sub_1002F6C0+32j
					; DATA XREF: .text:off_1002F8C0o
		mov	eax, [ecx+0Ch]	; jumptable 1002F6F2 case 0
		mov	edx, [eax]
		mov	[esp+24h+var_14], edx

loc_1002F718:				; CODE XREF: sub_1002F6C0+30j
		mov	ecx, [esp+24h+arg_4] ; jumptable 1002F6F2 default case
		mov	eax, [ecx+8]
		dec	eax
		cmp	eax, 3		; switch 4 cases
		ja	short loc_1002F74F ; jumptable 1002F725	default	case
		jmp	ds:off_1002F8D0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F72C:				; CODE XREF: sub_1002F6C0+65j
					; DATA XREF: .text:off_1002F8D0o
		mov	eax, [ecx+0Ch]	; jumptable 1002F725 case 3
		mov	eax, [eax+0Ch]
		mov	[esp+24h+var_4], eax

loc_1002F736:				; CODE XREF: sub_1002F6C0+65j
					; DATA XREF: .text:off_1002F8D0o
		mov	eax, [ecx+0Ch]	; jumptable 1002F725 case 2
		mov	eax, [eax+8]
		mov	[esp+24h+var_C], eax

loc_1002F740:				; CODE XREF: sub_1002F6C0+65j
					; DATA XREF: .text:off_1002F8D0o
		mov	eax, [ecx+0Ch]	; jumptable 1002F725 case 1
		mov	ebp, [eax+4]

loc_1002F746:				; CODE XREF: sub_1002F6C0+65j
					; DATA XREF: .text:off_1002F8D0o
		mov	eax, [ecx+0Ch]	; jumptable 1002F725 case 0
		mov	ebx, [eax]
		mov	[esp+24h+var_10], ebx

loc_1002F74F:				; CODE XREF: sub_1002F6C0+63j
		lea	eax, [ebx+edx]	; jumptable 1002F725 default case
		mov	ebx, [esp+24h+var_C]
		cmp	eax, edx
		push	4
		sbb	ecx, ecx
		add	ebp, esi
		neg	ecx
		cmp	ebp, esi
		mov	esi, [esp+28h+arg_8]
		sbb	eax, eax
		add	ebp, ecx
		neg	eax
		cmp	ebp, ecx
		push	esi
		sbb	ecx, ecx
		add	ebx, edi
		neg	ecx
		add	ecx, eax
		cmp	ebx, edi
		mov	edi, [esp+2Ch+var_4]
		sbb	eax, eax
		add	ebx, ecx
		neg	eax
		mov	[esp+2Ch+var_C], ebx
		cmp	ebx, ecx
		sbb	edx, edx
		add	edi, [esp+2Ch+var_8]
		neg	edx
		add	edx, eax
		cmp	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_0], edx
		sbb	eax, eax
		add	edi, edx
		neg	eax
		mov	[esp+2Ch+arg_4], eax
		call	sub_1002C8E0
		add	esp, 8
		mov	[esp+24h+var_8], eax
		test	eax, eax
		js	loc_1002F8B5
		mov	ecx, [esi+0Ch]
		mov	[ecx+0Ch], edi
		mov	ecx, [esi+0Ch]
		mov	[ecx+8], ebx
		mov	ecx, [esi+0Ch]
		mov	ebx, [esp+24h+arg_C]
		mov	[ecx+4], ebp
		mov	eax, [esi+0Ch]
		mov	ecx, [esp+24h+var_10]
		add	ecx, [esp+24h+var_14]
		cmp	edi, [esp+24h+arg_0]
		mov	[eax], ecx
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+8], 4
		mov	eax, [ebx+10h]
		mov	ecx, [eax+0Ch]
		sbb	eax, eax
		neg	eax
		mov	[esp+24h+var_4], ecx
		add	eax, [esp+24h+arg_4]
		jnz	short loc_1002F81D
		cmp	edi, ecx
		ja	short loc_1002F81D
		jnz	loc_1002F88E
		lea	eax, [ebx+4]
		push	eax
		push	esi
		call	sub_10028F50
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1002F88E

loc_1002F81D:				; CODE XREF: sub_1002F6C0+13Fj
					; sub_1002F6C0+143j
		mov	eax, [ebx+10h]
		mov	edx, ebp
		mov	ebx, [esp+24h+var_10]
		add	ebx, [esp+24h+var_14]
		mov	ecx, [eax+8]
		sub	edx, [eax+4]
		mov	[esp+24h+arg_0], ecx
		mov	ecx, ebx
		sub	ecx, [eax]
		cmp	ebp, edx
		mov	[esp+24h+arg_4], ecx
		sbb	ebp, ebp
		neg	ebp
		cmp	ecx, ebx
		jbe	short loc_1002F84E
		mov	eax, edx
		dec	edx
		test	eax, eax
		jnz	short loc_1002F84E
		inc	ebp

loc_1002F84E:				; CODE XREF: sub_1002F6C0+184j
					; sub_1002F6C0+18Bj
		mov	ecx, [esp+24h+var_C]
		sub	ecx, [esp+24h+arg_0]
		cmp	[esp+24h+var_C], ecx
		sbb	ebx, ebx
		neg	ebx
		test	ebp, ebp
		jz	short loc_1002F86A
		mov	eax, ecx
		dec	ecx
		test	eax, eax
		jnz	short loc_1002F86A
		inc	ebx

loc_1002F86A:				; CODE XREF: sub_1002F6C0+1A0j
					; sub_1002F6C0+1A7j
		sub	edi, [esp+24h+var_4]
		test	ebx, ebx
		jz	short loc_1002F873
		dec	edi

loc_1002F873:				; CODE XREF: sub_1002F6C0+1B0j
		mov	eax, [esi+0Ch]
		mov	[eax+0Ch], edi
		mov	eax, [esi+0Ch]
		mov	[eax+8], ecx
		mov	eax, [esi+0Ch]
		mov	ecx, [esp+24h+arg_4]
		mov	[eax+4], edx
		mov	eax, [esi+0Ch]
		mov	[eax], ecx

loc_1002F88E:				; CODE XREF: sub_1002F6C0+145j
					; sub_1002F6C0+15Bj
		mov	eax, [esi+8]
		cmp	eax, 1
		jbe	short loc_1002F8AE
		mov	ecx, [esi+0Ch]
		lea	ecx, [ecx+eax*4]
		add	ecx, 0FFFFFFFCh
		nop

loc_1002F8A0:				; CODE XREF: sub_1002F6C0+1ECj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002F8AE
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002F8A0

loc_1002F8AE:				; CODE XREF: sub_1002F6C0+1D4j
					; sub_1002F6C0+1E3j
		mov	[esi+8], eax
		mov	eax, [esp+24h+var_8]

loc_1002F8B5:				; CODE XREF: sub_1002F6C0+F3j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_1002F6C0	endp

; ---------------------------------------------------------------------------
		align 10h
off_1002F8C0	dd offset loc_1002F70F	; DATA XREF: sub_1002F6C0+32r
		dd offset loc_1002F709	; jump table for switch	statement
		dd offset loc_1002F703
		dd offset loc_1002F6F9
off_1002F8D0	dd offset loc_1002F746	; DATA XREF: sub_1002F6C0+65r
		dd offset loc_1002F740	; jump table for switch	statement
		dd offset loc_1002F736
		dd offset loc_1002F72C

; =============== S U B	R O U T	I N E =======================================


sub_1002F8E0	proc near		; DATA XREF: sub_1002F2F0:loc_1002F377o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 14h
		mov	ecx, [esp+14h+arg_0]
		xor	edx, edx
		push	ebx
		push	ebp
		push	esi
		mov	eax, [ecx+8]
		xor	esi, esi
		push	edi
		dec	eax
		mov	[esp+24h+var_10], edx
		xor	edi, edi
		mov	[esp+24h+var_8], edx
		xor	ebx, ebx
		mov	[esp+24h+var_14], edx
		xor	ebp, ebp
		mov	[esp+24h+var_C], edx
		mov	[esp+24h+var_4], edx
		cmp	eax, 4		; switch 5 cases
		ja	short loc_1002F93E ; jumptable 1002F912	default	case
		jmp	ds:off_1002FB44[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F919:				; CODE XREF: sub_1002F8E0+32j
					; DATA XREF: .text:off_1002FB44o
		mov	eax, [ecx+0Ch]	; jumptable 1002F912 case 4
		mov	eax, [eax+10h]
		mov	[esp+24h+var_8], eax

loc_1002F923:				; CODE XREF: sub_1002F8E0+32j
					; DATA XREF: .text:off_1002FB44o
		mov	eax, [ecx+0Ch]	; jumptable 1002F912 case 3
		mov	eax, [eax+0Ch]
		mov	[esp+24h+var_10], eax

loc_1002F92D:				; CODE XREF: sub_1002F8E0+32j
					; DATA XREF: .text:off_1002FB44o
		mov	eax, [ecx+0Ch]	; jumptable 1002F912 case 2
		mov	edi, [eax+8]

loc_1002F933:				; CODE XREF: sub_1002F8E0+32j
					; DATA XREF: .text:off_1002FB44o
		mov	eax, [ecx+0Ch]	; jumptable 1002F912 case 1
		mov	esi, [eax+4]

loc_1002F939:				; CODE XREF: sub_1002F8E0+32j
					; DATA XREF: .text:off_1002FB44o
		mov	eax, [ecx+0Ch]	; jumptable 1002F912 case 0
		mov	edx, [eax]

loc_1002F93E:				; CODE XREF: sub_1002F8E0+30j
		mov	ecx, [esp+24h+arg_4] ; jumptable 1002F912 default case
		mov	eax, [ecx+8]
		dec	eax
		cmp	eax, 4		; switch 5 cases
		ja	short loc_1002F97B ; jumptable 1002F94B	default	case
		jmp	ds:off_1002FB58[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F952:				; CODE XREF: sub_1002F8E0+6Bj
					; DATA XREF: .text:off_1002FB58o
		mov	eax, [ecx+0Ch]	; jumptable 1002F94B case 4
		mov	eax, [eax+10h]
		mov	[esp+24h+var_4], eax

loc_1002F95C:				; CODE XREF: sub_1002F8E0+6Bj
					; DATA XREF: .text:off_1002FB58o
		mov	eax, [ecx+0Ch]	; jumptable 1002F94B case 3
		mov	eax, [eax+0Ch]
		mov	[esp+24h+var_C], eax

loc_1002F966:				; CODE XREF: sub_1002F8E0+6Bj
					; DATA XREF: .text:off_1002FB58o
		mov	eax, [ecx+0Ch]	; jumptable 1002F94B case 2
		mov	eax, [eax+8]
		mov	[esp+24h+var_14], eax

loc_1002F970:				; CODE XREF: sub_1002F8E0+6Bj
					; DATA XREF: .text:off_1002FB58o
		mov	eax, [ecx+0Ch]	; jumptable 1002F94B case 1
		mov	ebp, [eax+4]

loc_1002F976:				; CODE XREF: sub_1002F8E0+6Bj
					; DATA XREF: .text:off_1002FB58o
		mov	eax, [ecx+0Ch]	; jumptable 1002F94B case 0
		mov	ebx, [eax]

loc_1002F97B:				; CODE XREF: sub_1002F8E0+69j
		lea	eax, [ebx+edx]	; jumptable 1002F94B default case
		mov	ebx, [esp+24h+var_14]
		cmp	eax, edx
		mov	[esp+24h+arg_0], eax
		mov	edx, [esp+24h+var_C]
		sbb	ecx, ecx
		add	ebp, esi
		neg	ecx
		cmp	ebp, esi
		mov	esi, [esp+24h+arg_8]
		sbb	eax, eax
		add	ebp, ecx
		neg	eax
		cmp	ebp, ecx
		push	5
		sbb	ecx, ecx
		add	ebx, edi
		neg	ecx
		add	ecx, eax
		cmp	ebx, edi
		mov	edi, [esp+28h+var_4]
		sbb	eax, eax
		add	ebx, ecx
		neg	eax
		mov	[esp+28h+var_14], ebx
		cmp	ebx, ecx
		push	esi
		sbb	ecx, ecx
		add	edx, [esp+2Ch+var_10]
		neg	ecx
		add	ecx, eax
		cmp	edx, [esp+2Ch+var_10]
		sbb	eax, eax
		add	edx, ecx
		neg	eax
		mov	[esp+2Ch+arg_4], edx
		cmp	edx, ecx
		sbb	edx, edx
		add	edi, [esp+2Ch+var_8]
		neg	edx
		add	edx, eax
		cmp	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+var_C], edx
		sbb	eax, eax
		add	edi, edx
		neg	eax
		mov	[esp+2Ch+var_4], eax
		call	sub_1002C8E0
		add	esp, 8
		mov	[esp+24h+var_10], eax
		test	eax, eax
		js	loc_1002FB3C
		mov	ecx, [esi+0Ch]
		mov	edx, [esp+24h+arg_4]
		cmp	edi, [esp+24h+var_C]
		mov	[ecx+10h], edi
		mov	ecx, [esi+0Ch]
		mov	[ecx+0Ch], edx
		mov	ecx, [esi+0Ch]
		mov	edx, [esp+24h+arg_0]
		mov	[ecx+8], ebx
		mov	eax, [esi+0Ch]
		mov	ebx, [esp+24h+arg_C]
		mov	[eax+4], ebp
		mov	eax, [esi+0Ch]
		mov	[eax], edx
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+8], 5
		mov	eax, [ebx+10h]
		mov	ecx, [eax+10h]
		sbb	eax, eax
		neg	eax
		mov	[esp+24h+var_8], ecx
		add	eax, [esp+24h+var_4]
		jnz	short loc_1002FA79
		cmp	edi, ecx
		ja	short loc_1002FA79
		jnz	loc_1002FB16
		lea	eax, [ebx+4]
		push	eax
		push	esi
		call	sub_10028F50
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1002FB16
		mov	edx, [esp+24h+arg_0]

loc_1002FA79:				; CODE XREF: sub_1002F8E0+173j
					; sub_1002F8E0+177j
		mov	eax, [ebx+10h]
		mov	ebx, ebp
		mov	ecx, [eax+0Ch]
		sub	ebx, [eax+4]
		mov	[esp+24h+var_4], ecx
		mov	ecx, [eax+8]
		mov	[esp+24h+arg_0], ecx
		mov	ecx, edx
		sub	ecx, [eax]
		cmp	ebp, ebx
		mov	[esp+24h+var_C], ecx
		sbb	ebp, ebp
		neg	ebp
		cmp	ecx, edx
		jbe	short loc_1002FAA9
		mov	eax, ebx
		dec	ebx
		test	eax, eax
		jnz	short loc_1002FAA9
		inc	ebp

loc_1002FAA9:				; CODE XREF: sub_1002F8E0+1BFj
					; sub_1002F8E0+1C6j
		mov	edx, [esp+24h+var_14]
		sub	edx, [esp+24h+arg_0]
		cmp	[esp+24h+var_14], edx
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+24h+arg_0], ecx
		test	ebp, ebp
		jz	short loc_1002FACD
		mov	eax, edx
		dec	edx
		test	eax, eax
		jnz	short loc_1002FACD
		inc	ecx
		mov	[esp+24h+arg_0], ecx

loc_1002FACD:				; CODE XREF: sub_1002F8E0+1DFj
					; sub_1002F8E0+1E6j
		mov	ecx, [esp+24h+arg_4]
		sub	ecx, [esp+24h+var_4]
		cmp	[esp+24h+arg_4], ecx
		sbb	ebp, ebp
		neg	ebp
		cmp	[esp+24h+arg_0], 0
		jz	short loc_1002FAEC
		mov	eax, ecx
		dec	ecx
		test	eax, eax
		jnz	short loc_1002FAEC
		inc	ebp

loc_1002FAEC:				; CODE XREF: sub_1002F8E0+202j
					; sub_1002F8E0+209j
		sub	edi, [esp+24h+var_8]
		test	ebp, ebp
		jz	short loc_1002FAF5
		dec	edi

loc_1002FAF5:				; CODE XREF: sub_1002F8E0+212j
		mov	eax, [esi+0Ch]
		mov	[eax+10h], edi
		mov	eax, [esi+0Ch]
		mov	[eax+0Ch], ecx
		mov	eax, [esi+0Ch]
		mov	ecx, [esp+24h+var_C]
		mov	[eax+8], edx
		mov	eax, [esi+0Ch]
		mov	[eax+4], ebx
		mov	eax, [esi+0Ch]
		mov	[eax], ecx

loc_1002FB16:				; CODE XREF: sub_1002F8E0+179j
					; sub_1002F8E0+18Fj
		mov	eax, [esi+8]
		cmp	eax, 1
		jbe	short loc_1002FB35
		mov	ecx, [esi+0Ch]
		lea	ecx, [ecx+eax*4]
		add	ecx, 0FFFFFFFCh

loc_1002FB27:				; CODE XREF: sub_1002F8E0+253j
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002FB35
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002FB27

loc_1002FB35:				; CODE XREF: sub_1002F8E0+23Cj
					; sub_1002F8E0+24Aj
		mov	[esi+8], eax
		mov	eax, [esp+24h+var_10]

loc_1002FB3C:				; CODE XREF: sub_1002F8E0+121j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_1002F8E0	endp

; ---------------------------------------------------------------------------
off_1002FB44	dd offset loc_1002F939	; DATA XREF: sub_1002F8E0+32r
		dd offset loc_1002F933	; jump table for switch	statement
		dd offset loc_1002F92D
		dd offset loc_1002F923
		dd offset loc_1002F919
off_1002FB58	dd offset loc_1002F976	; DATA XREF: sub_1002F8E0+6Br
		dd offset loc_1002F970	; jump table for switch	statement
		dd offset loc_1002F966
		dd offset loc_1002F95C
		dd offset loc_1002F952
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002FB70	proc near		; DATA XREF: sub_1002F2F0:loc_1002F387o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 28h
		mov	ecx, [esp+28h+arg_0]
		xor	edx, edx
		push	ebx
		push	ebp
		push	esi
		mov	eax, [ecx+8]
		xor	ebx, ebx
		push	edi
		dec	eax
		mov	[esp+38h+var_28], edx
		xor	esi, esi
		mov	[esp+38h+var_1C], edx
		xor	edi, edi
		mov	[esp+38h+var_14], edx
		xor	ebp, ebp
		mov	[esp+38h+var_C], edx
		mov	[esp+38h+var_24], ebx
		mov	[esp+38h+var_20], edx
		mov	[esp+38h+var_18], edx
		mov	[esp+38h+var_10], edx
		mov	[esp+38h+var_8], edx
		cmp	eax, 5		; switch 6 cases
		ja	short loc_1002FBEC ; jumptable 1002FBB2	default	case
		jmp	ds:off_1002FE70[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002FBB9:				; CODE XREF: sub_1002FB70+42j
					; DATA XREF: .text:off_1002FE70o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBB2 case 5
		mov	eax, [eax+14h]
		mov	[esp+38h+var_C], eax

loc_1002FBC3:				; CODE XREF: sub_1002FB70+42j
					; DATA XREF: .text:off_1002FE70o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBB2 case 4
		mov	eax, [eax+10h]
		mov	[esp+38h+var_14], eax

loc_1002FBCD:				; CODE XREF: sub_1002FB70+42j
					; DATA XREF: .text:off_1002FE70o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBB2 case 3
		mov	eax, [eax+0Ch]
		mov	[esp+38h+var_1C], eax

loc_1002FBD7:				; CODE XREF: sub_1002FB70+42j
					; DATA XREF: .text:off_1002FE70o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBB2 case 2
		mov	edi, [eax+8]

loc_1002FBDD:				; CODE XREF: sub_1002FB70+42j
					; DATA XREF: .text:off_1002FE70o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBB2 case 1
		mov	esi, [eax+4]

loc_1002FBE3:				; CODE XREF: sub_1002FB70+42j
					; DATA XREF: .text:off_1002FE70o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBB2 case 0
		mov	edx, [eax]
		mov	[esp+38h+var_28], edx

loc_1002FBEC:				; CODE XREF: sub_1002FB70+40j
		mov	ecx, [esp+38h+arg_4] ; jumptable 1002FBB2 default case
		mov	eax, [ecx+8]
		dec	eax
		cmp	eax, 5		; switch 6 cases
		ja	short loc_1002FC37 ; jumptable 1002FBF9	default	case
		jmp	ds:off_1002FE88[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002FC00:				; CODE XREF: sub_1002FB70+89j
					; DATA XREF: .text:off_1002FE88o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBF9 case 5
		mov	eax, [eax+14h]
		mov	[esp+38h+var_8], eax

loc_1002FC0A:				; CODE XREF: sub_1002FB70+89j
					; DATA XREF: .text:off_1002FE88o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBF9 case 4
		mov	eax, [eax+10h]
		mov	[esp+38h+var_10], eax

loc_1002FC14:				; CODE XREF: sub_1002FB70+89j
					; DATA XREF: .text:off_1002FE88o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBF9 case 3
		mov	eax, [eax+0Ch]
		mov	[esp+38h+var_18], eax

loc_1002FC1E:				; CODE XREF: sub_1002FB70+89j
					; DATA XREF: .text:off_1002FE88o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBF9 case 2
		mov	eax, [eax+8]
		mov	[esp+38h+var_20], eax

loc_1002FC28:				; CODE XREF: sub_1002FB70+89j
					; DATA XREF: .text:off_1002FE88o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBF9 case 1
		mov	ebp, [eax+4]

loc_1002FC2E:				; CODE XREF: sub_1002FB70+89j
					; DATA XREF: .text:off_1002FE88o
		mov	eax, [ecx+0Ch]	; jumptable 1002FBF9 case 0
		mov	ebx, [eax]
		mov	[esp+38h+var_24], ebx

loc_1002FC37:				; CODE XREF: sub_1002FB70+87j
		lea	eax, [ebx+edx]	; jumptable 1002FBF9 default case
		mov	ebx, [esp+38h+var_20]
		cmp	eax, edx
		mov	edx, [esp+38h+var_18]
		push	6
		sbb	ecx, ecx
		add	ebp, esi
		neg	ecx
		cmp	ebp, esi
		mov	esi, [esp+3Ch+arg_8]
		sbb	eax, eax
		add	ebp, ecx
		neg	eax
		mov	[esp+3Ch+var_4], ebp
		cmp	ebp, ecx
		push	esi
		sbb	ecx, ecx
		add	ebx, edi
		neg	ecx
		add	ecx, eax
		cmp	ebx, edi
		mov	edi, [esp+40h+var_8]
		sbb	eax, eax
		add	ebx, ecx
		neg	eax
		mov	[esp+40h+var_20], ebx
		cmp	ebx, ecx
		sbb	ecx, ecx
		add	edx, [esp+40h+var_1C]
		neg	ecx
		add	ecx, eax
		cmp	edx, [esp+40h+var_1C]
		sbb	eax, eax
		add	edx, ecx
		neg	eax
		mov	[esp+40h+arg_0], edx
		cmp	edx, ecx
		mov	edx, [esp+40h+var_10]
		sbb	ecx, ecx
		add	edx, [esp+40h+var_14]
		neg	ecx
		add	ecx, eax
		cmp	edx, [esp+40h+var_14]
		sbb	eax, eax
		add	edx, ecx
		neg	eax
		mov	[esp+40h+var_10], edx
		cmp	edx, ecx
		sbb	edx, edx
		add	edi, [esp+40h+var_C]
		neg	edx
		add	edx, eax
		cmp	edi, [esp+40h+var_C]
		mov	[esp+40h+arg_4], edx
		sbb	eax, eax
		add	edi, edx
		neg	eax
		mov	[esp+40h+var_8], eax
		call	sub_1002C8E0
		add	esp, 8
		mov	[esp+38h+var_1C], eax
		test	eax, eax
		js	loc_1002FE65
		mov	ecx, [esi+0Ch]
		mov	edx, [esp+38h+var_10]
		mov	eax, [esp+38h+arg_0]
		mov	[ecx+14h], edi
		mov	ecx, [esi+0Ch]
		mov	[ecx+10h], edx
		mov	ecx, [esi+0Ch]
		mov	[ecx+0Ch], eax
		mov	eax, [esi+0Ch]
		mov	ecx, [esp+38h+var_24]
		add	ecx, [esp+38h+var_28]
		cmp	edi, [esp+38h+arg_4]
		mov	[eax+8], ebx
		mov	eax, [esi+0Ch]
		mov	ebx, [esp+38h+arg_C]
		mov	[eax+4], ebp
		mov	eax, [esi+0Ch]
		mov	[eax], ecx
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+8], 6
		mov	eax, [ebx+10h]
		mov	ecx, [eax+14h]
		sbb	eax, eax
		neg	eax
		mov	[esp+38h+var_14], ecx
		add	eax, [esp+38h+var_8]
		jnz	short loc_1002FD5D
		cmp	edi, ecx
		ja	short loc_1002FD5D
		jnz	loc_1002FE3E
		lea	eax, [ebx+4]
		push	eax
		push	esi
		call	sub_10028F50
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1002FE3E

loc_1002FD5D:				; CODE XREF: sub_1002FB70+1CBj
					; sub_1002FB70+1CFj
		mov	eax, [ebx+10h]
		mov	ebx, [esp+38h+var_24]
		add	ebx, [esp+38h+var_28]
		mov	ecx, [eax+10h]
		sub	ebp, [eax+4]
		mov	[esp+38h+var_C], ecx
		mov	ecx, [eax+0Ch]
		mov	[esp+38h+var_8], ecx
		mov	ecx, [eax+8]
		mov	[esp+38h+arg_4], ecx
		mov	ecx, ebx
		sub	ecx, [eax]
		cmp	[esp+38h+var_4], ebp
		mov	[esp+38h+var_18], ecx
		sbb	edx, edx
		neg	edx
		cmp	ecx, ebx
		jbe	short loc_1002FD9C
		mov	eax, ebp
		dec	ebp
		test	eax, eax
		jnz	short loc_1002FD9C
		inc	edx

loc_1002FD9C:				; CODE XREF: sub_1002FB70+222j
					; sub_1002FB70+229j
		mov	ebx, [esp+38h+var_20]
		sub	ebx, [esp+38h+arg_4]
		cmp	[esp+38h+var_20], ebx
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+38h+arg_4], ecx
		test	edx, edx
		jz	short loc_1002FDC0
		mov	eax, ebx
		dec	ebx
		test	eax, eax
		jnz	short loc_1002FDC0
		inc	ecx
		mov	[esp+38h+arg_4], ecx

loc_1002FDC0:				; CODE XREF: sub_1002FB70+242j
					; sub_1002FB70+249j
		mov	edx, [esp+38h+arg_0]
		sub	edx, [esp+38h+var_8]
		cmp	[esp+38h+arg_0], edx
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+38h+arg_4], 0
		mov	[esp+38h+arg_0], ecx
		jz	short loc_1002FDE7
		mov	eax, edx
		dec	edx
		test	eax, eax
		jnz	short loc_1002FDE7
		inc	ecx
		mov	[esp+38h+arg_0], ecx

loc_1002FDE7:				; CODE XREF: sub_1002FB70+269j
					; sub_1002FB70+270j
		mov	ecx, [esp+38h+var_10]
		sub	ecx, [esp+38h+var_C]
		cmp	[esp+38h+var_10], ecx
		sbb	eax, eax
		neg	eax
		cmp	[esp+38h+arg_0], 0
		mov	[esp+38h+arg_4], eax
		jz	short loc_1002FE0E
		mov	eax, ecx
		dec	ecx
		test	eax, eax
		mov	eax, [esp+38h+arg_4]
		jnz	short loc_1002FE0E
		inc	eax

loc_1002FE0E:				; CODE XREF: sub_1002FB70+290j
					; sub_1002FB70+29Bj
		sub	edi, [esp+38h+var_14]
		test	eax, eax
		jz	short loc_1002FE17
		dec	edi

loc_1002FE17:				; CODE XREF: sub_1002FB70+2A4j
		mov	eax, [esi+0Ch]
		mov	[eax+14h], edi
		mov	eax, [esi+0Ch]
		mov	[eax+10h], ecx
		mov	eax, [esi+0Ch]
		mov	ecx, [esp+38h+var_18]
		mov	[eax+0Ch], edx
		mov	eax, [esi+0Ch]
		mov	[eax+8], ebx
		mov	eax, [esi+0Ch]
		mov	[eax+4], ebp
		mov	eax, [esi+0Ch]
		mov	[eax], ecx

loc_1002FE3E:				; CODE XREF: sub_1002FB70+1D1j
					; sub_1002FB70+1E7j
		mov	eax, [esi+8]
		cmp	eax, 1
		jbe	short loc_1002FE5E
		mov	ecx, [esi+0Ch]
		lea	ecx, [ecx+eax*4]
		add	ecx, 0FFFFFFFCh
		nop

loc_1002FE50:				; CODE XREF: sub_1002FB70+2ECj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002FE5E
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002FE50

loc_1002FE5E:				; CODE XREF: sub_1002FB70+2D4j
					; sub_1002FB70+2E3j
		mov	[esi+8], eax
		mov	eax, [esp+38h+var_1C]

loc_1002FE65:				; CODE XREF: sub_1002FB70+16Bj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 28h
		retn
sub_1002FB70	endp

; ---------------------------------------------------------------------------
		align 10h
off_1002FE70	dd offset loc_1002FBE3	; DATA XREF: sub_1002FB70+42r
		dd offset loc_1002FBDD	; jump table for switch	statement
		dd offset loc_1002FBD7
		dd offset loc_1002FBCD
		dd offset loc_1002FBC3
		dd offset loc_1002FBB9
off_1002FE88	dd offset loc_1002FC2E	; DATA XREF: sub_1002FB70+89r
		dd offset loc_1002FC28	; jump table for switch	statement
		dd offset loc_1002FC1E
		dd offset loc_1002FC14
		dd offset loc_1002FC0A
		dd offset loc_1002FC00

; =============== S U B	R O U T	I N E =======================================


sub_1002FEA0	proc near		; CODE XREF: .text:100322B4p
					; DATA XREF: sub_1002F2F0+D3o

var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		cmp	[esp+10h+arg_0], 0
		jnz	short loc_1002FEC6
		push	[esp+10h+arg_8]
		mov	eax, [esp+14h+arg_C]
		add	eax, 4
		push	eax
		push	[esp+18h+arg_4]
		call	sub_100299A0
		add	esp, 0Ch
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002FEC6:				; CODE XREF: sub_1002FEA0+8j
		lea	eax, [esp+10h+var_10]
		push	esi
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_1002FF12
		push	ebx
		mov	ebx, [esp+18h+arg_C]
		lea	eax, [esp+18h+var_10]
		push	eax
		add	ebx, 4
		push	ebx
		push	[esp+20h+arg_4]
		call	sub_100299A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002FF11
		push	[esp+18h+arg_8]
		lea	eax, [esp+1Ch+var_10]
		push	ebx
		push	eax
		push	[esp+24h+arg_0]
		call	sub_10029DF0
		add	esp, 10h
		mov	esi, eax

loc_1002FF11:				; CODE XREF: sub_1002FEA0+57j
		pop	ebx

loc_1002FF12:				; CODE XREF: sub_1002FEA0+37j
		lea	eax, [esp+14h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	esi
		add	esp, 10h
		retn
sub_1002FEA0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1002FF30:				; DATA XREF: sub_1002F2F0+BEo
		push	dword ptr [esp+8]
		mov	eax, [esp+10h]
		add	eax, 4
		push	eax
		push	dword ptr [esp+0Ch]
		call	sub_10029A70
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1002FF50:				; DATA XREF: sub_1002F2F0+C5o
		push	dword ptr [esp+0Ch]
		mov	eax, [esp+14h]
		add	eax, 4
		push	eax
		push	dword ptr [esp+10h]
		push	dword ptr [esp+10h]
		call	sub_10029DF0
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1002FF70:				; DATA XREF: sub_1002F2F0:loc_1002F3A5o
		push	dword ptr [esp+4]
		call	sub_100290C0
		add	esp, 4
		push	dword ptr [esp+8]
		test	eax, eax
		jnz	short loc_1002FF8F
		call	sub_1002A9C0
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1002FF8F:				; CODE XREF: .text:1002FF82j
		mov	eax, [esp+10h]
		push	dword ptr [esp+8]
		add	eax, 4
		push	eax
		call	sub_1002A540
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1002FFB0:				; DATA XREF: sub_1002F2F0+CCo
		push	dword ptr [esp+8]
		mov	eax, [esp+10h]
		add	eax, 4
		push	eax
		push	dword ptr [esp+0Ch]
		call	sub_1002A340
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002FFD0	proc near		; DATA XREF: sub_1002F2F0+AEo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		push	esi
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_0]
		call	sub_1002A540
		mov	ebx, [esp+18h+arg_C]
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, 0FFFFFFFDh
		jnz	short loc_10030054
		push	esi
		push	[esp+10h+arg_0]
		push	[esp+14h+arg_4]
		call	sub_1002A540
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10030075
		push	esi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jns	short loc_10030027
		push	esi
		lea	eax, [ebx+4]
		push	eax
		push	esi
		call	sub_10028D40
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10030075

loc_10030027:				; CODE XREF: sub_1002FFD0+43j
		push	esi
		call	sub_100290C0
		add	esp, 4
		push	esi
		test	eax, eax
		jnz	short loc_10030041
		call	sub_1002A9C0
		add	esp, 4
		xor	edi, edi
		jmp	short loc_10030054
; ---------------------------------------------------------------------------

loc_10030041:				; CODE XREF: sub_1002FFD0+63j
		lea	eax, [ebx+4]
		push	esi
		push	eax
		call	sub_1002A540
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_10030073

loc_10030054:				; CODE XREF: sub_1002FFD0+21j
					; sub_1002FFD0+6Fj
		push	esi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jns	short loc_10030073
		push	esi
		lea	eax, [ebx+4]
		push	eax
		push	esi
		call	sub_10028D40
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10030073:				; CODE XREF: sub_1002FFD0+82j
					; sub_1002FFD0+8Fj
		mov	eax, edi

loc_10030075:				; CODE XREF: sub_1002FFD0+36j
					; sub_1002FFD0+55j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1002FFD0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10030080:				; DATA XREF: sub_1002F2F0+6Eo
		push	ecx
		mov	ecx, [esp+8]
		xor	edx, edx
		push	ebx
		push	ebp
		push	esi
		mov	eax, [ecx+8]
		xor	esi, esi
		push	edi
		xor	ebp, ebp
		mov	[esp+10h], edx
		xor	edi, edi
		xor	ebx, ebx
		dec	eax
		jz	short loc_100300AF
		dec	eax
		jz	short loc_100300A9
		dec	eax
		jnz	short loc_100300B4
		mov	eax, [ecx+0Ch]
		mov	ebx, [eax+8]

loc_100300A9:				; CODE XREF: .text:1003009Ej
		mov	eax, [ecx+0Ch]
		mov	edi, [eax+4]

loc_100300AF:				; CODE XREF: .text:1003009Bj
		mov	eax, [ecx+0Ch]
		mov	ebp, [eax]

loc_100300B4:				; CODE XREF: .text:100300A1j
		mov	ecx, [esp+1Ch]
		mov	eax, [ecx+8]
		dec	eax
		jz	short loc_100300D4
		dec	eax
		jz	short loc_100300CE
		dec	eax
		jnz	short loc_100300D9
		mov	eax, [ecx+0Ch]
		mov	eax, [eax+8]
		mov	[esp+10h], eax

loc_100300CE:				; CODE XREF: .text:100300BFj
		mov	eax, [ecx+0Ch]
		mov	esi, [eax+4]

loc_100300D4:				; CODE XREF: .text:100300BCj
		mov	eax, [ecx+0Ch]
		mov	edx, [eax]

loc_100300D9:				; CODE XREF: .text:100300C2j
		mov	eax, edi
		mov	ecx, ebp
		sub	ebp, edx
		sub	edi, esi
		cmp	eax, edi
		sbb	edx, edx
		neg	edx
		cmp	ebp, ecx
		jbe	short loc_100300F3
		mov	eax, edi
		dec	edi
		test	eax, eax
		jnz	short loc_100300F3
		inc	edx

loc_100300F3:				; CODE XREF: .text:100300E9j
					; .text:100300F0j
		mov	eax, ebx
		sub	ebx, [esp+10h]
		cmp	eax, ebx
		sbb	ecx, ecx
		neg	ecx
		test	edx, edx
		jz	short loc_1003010B
		mov	eax, ebx
		dec	ebx
		test	eax, eax
		jnz	short loc_1003010B
		inc	ecx

loc_1003010B:				; CODE XREF: .text:10030101j
					; .text:10030108j
		test	ecx, ecx
		jz	short loc_10030137
		mov	eax, [esp+24h]
		mov	esi, [eax+10h]
		add	ebp, [esi]
		cmp	ebp, [esi]
		sbb	edx, edx
		add	edi, [esi+4]
		neg	edx
		cmp	edi, [esi+4]
		sbb	ecx, ecx
		add	edi, edx
		neg	ecx
		cmp	edi, edx
		sbb	eax, eax
		neg	eax
		add	eax, [esi+8]
		add	eax, ecx
		add	ebx, eax

loc_10030137:				; CODE XREF: .text:1003010Dj
		mov	esi, [esp+20h]
		push	3
		push	esi
		call	sub_1002C8E0
		mov	edx, eax
		add	esp, 8
		test	edx, edx
		js	short loc_10030188
		mov	ecx, [esi+0Ch]
		mov	[ecx+8], ebx
		mov	ecx, [esi+0Ch]
		mov	[ecx+4], edi
		mov	ecx, [esi+0Ch]
		mov	[ecx], ebp
		mov	ecx, 3
		mov	eax, [esi+0Ch]
		mov	dword ptr [esi], 0
		add	eax, 8
		mov	dword ptr [esi+8], 3

loc_10030175:				; CODE XREF: .text:10030181j
		cmp	dword ptr [eax], 0
		jnz	short loc_10030183
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_10030175

loc_10030183:				; CODE XREF: .text:10030178j
		mov	[esi+8], ecx
		mov	eax, edx

loc_10030188:				; CODE XREF: .text:1003014Aj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030190	proc near		; DATA XREF: sub_1002F2F0+7Eo

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		mov	ecx, [esp+0Ch+arg_0]
		xor	edx, edx
		push	ebx
		push	ebp
		push	esi
		mov	eax, [ecx+8]
		xor	esi, esi
		push	edi
		dec	eax
		mov	[esp+1Ch+var_C], esi
		xor	ebp, ebp
		mov	[esp+1Ch+var_8], esi
		xor	edi, edi
		mov	[esp+1Ch+var_4], esi
		xor	ebx, ebx
		cmp	eax, 3		; switch 4 cases
		ja	short loc_100301D8 ; jumptable 100301BA	default	case
		jmp	ds:off_1003030C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100301C1:				; CODE XREF: sub_10030190+2Aj
					; DATA XREF: .text:off_1003030Co
		mov	eax, [ecx+0Ch]	; jumptable 100301BA case 3
		mov	ebx, [eax+0Ch]

loc_100301C7:				; CODE XREF: sub_10030190+2Aj
					; DATA XREF: .text:off_1003030Co
		mov	eax, [ecx+0Ch]	; jumptable 100301BA case 2
		mov	edi, [eax+8]

loc_100301CD:				; CODE XREF: sub_10030190+2Aj
					; DATA XREF: .text:off_1003030Co
		mov	eax, [ecx+0Ch]	; jumptable 100301BA case 1
		mov	ebp, [eax+4]

loc_100301D3:				; CODE XREF: sub_10030190+2Aj
					; DATA XREF: .text:off_1003030Co
		mov	eax, [ecx+0Ch]	; jumptable 100301BA case 0
		mov	edx, [eax]

loc_100301D8:				; CODE XREF: sub_10030190+28j
		mov	ecx, [esp+1Ch+arg_4] ; jumptable 100301BA default case
		mov	eax, [ecx+8]
		dec	eax
		cmp	eax, 3		; switch 4 cases
		ja	short loc_1003020F ; jumptable 100301E5	default	case
		jmp	ds:off_1003031C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100301EC:				; CODE XREF: sub_10030190+55j
					; DATA XREF: .text:off_1003031Co
		mov	eax, [ecx+0Ch]	; jumptable 100301E5 case 3
		mov	eax, [eax+0Ch]
		mov	[esp+1Ch+var_4], eax

loc_100301F6:				; CODE XREF: sub_10030190+55j
					; DATA XREF: .text:off_1003031Co
		mov	eax, [ecx+0Ch]	; jumptable 100301E5 case 2
		mov	eax, [eax+8]
		mov	[esp+1Ch+var_8], eax

loc_10030200:				; CODE XREF: sub_10030190+55j
					; DATA XREF: .text:off_1003031Co
		mov	eax, [ecx+0Ch]	; jumptable 100301E5 case 1
		mov	eax, [eax+4]
		mov	[esp+1Ch+var_C], eax

loc_1003020A:				; CODE XREF: sub_10030190+55j
					; DATA XREF: .text:off_1003031Co
		mov	eax, [ecx+0Ch]	; jumptable 100301E5 case 0
		mov	esi, [eax]

loc_1003020F:				; CODE XREF: sub_10030190+53j
		mov	eax, ebp	; jumptable 100301E5 default case
		mov	ecx, edx
		sub	ebp, [esp+1Ch+var_C]
		sub	edx, esi
		cmp	eax, ebp
		mov	[esp+1Ch+arg_0], edx
		sbb	esi, esi
		neg	esi
		cmp	edx, ecx
		jbe	short loc_1003022F
		mov	eax, ebp
		dec	ebp
		test	eax, eax
		jnz	short loc_1003022F
		inc	esi

loc_1003022F:				; CODE XREF: sub_10030190+95j
					; sub_10030190+9Cj
		mov	eax, edi
		sub	edi, [esp+1Ch+var_8]
		cmp	eax, edi
		sbb	edx, edx
		neg	edx
		test	esi, esi
		jz	short loc_10030247
		mov	eax, edi
		dec	edi
		test	eax, eax
		jnz	short loc_10030247
		inc	edx

loc_10030247:				; CODE XREF: sub_10030190+ADj
					; sub_10030190+B4j
		mov	eax, ebx
		sub	ebx, [esp+1Ch+var_4]
		cmp	eax, ebx
		sbb	ecx, ecx
		neg	ecx
		test	edx, edx
		jz	short loc_1003025F
		mov	eax, ebx
		dec	ebx
		test	eax, eax
		jnz	short loc_1003025F
		inc	ecx

loc_1003025F:				; CODE XREF: sub_10030190+C5j
					; sub_10030190+CCj
		test	ecx, ecx
		jz	short loc_100302A7
		mov	eax, [esp+1Ch+arg_C]
		mov	ecx, [esp+1Ch+arg_0]
		mov	esi, [eax+10h]
		add	ecx, [esi]
		cmp	ecx, [esi]
		mov	[esp+1Ch+arg_0], ecx
		sbb	ecx, ecx
		add	ebp, [esi+4]
		neg	ecx
		cmp	ebp, [esi+4]
		sbb	eax, eax
		add	ebp, ecx
		neg	eax
		cmp	ebp, ecx
		sbb	edx, edx
		add	edi, [esi+8]
		neg	edx
		add	edx, eax
		cmp	edi, [esi+8]
		sbb	ecx, ecx
		add	edi, edx
		neg	ecx
		cmp	edi, edx
		sbb	eax, eax
		neg	eax
		add	eax, [esi+0Ch]
		add	eax, ecx
		add	ebx, eax

loc_100302A7:				; CODE XREF: sub_10030190+D1j
		mov	esi, [esp+1Ch+arg_8]
		push	4
		push	esi
		call	sub_1002C8E0
		mov	edx, eax
		add	esp, 8
		test	edx, edx
		js	short loc_10030303
		mov	ecx, [esi+0Ch]
		mov	[ecx+0Ch], ebx
		mov	ecx, [esi+0Ch]
		mov	[ecx+8], edi
		mov	ecx, [esi+0Ch]
		mov	[ecx+4], ebp
		mov	eax, [esi+0Ch]
		mov	ecx, [esp+1Ch+arg_0]
		mov	[eax], ecx
		mov	ecx, 4
		mov	eax, [esi+0Ch]
		mov	dword ptr [esi], 0
		add	eax, 0Ch
		mov	dword ptr [esi+8], 4
		nop

loc_100302F0:				; CODE XREF: sub_10030190+16Cj
		cmp	dword ptr [eax], 0
		jnz	short loc_100302FE
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_100302F0

loc_100302FE:				; CODE XREF: sub_10030190+163j
		mov	[esi+8], ecx
		mov	eax, edx

loc_10030303:				; CODE XREF: sub_10030190+12Aj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10030190	endp

; ---------------------------------------------------------------------------
		align 4
off_1003030C	dd offset loc_100301D3	; DATA XREF: sub_10030190+2Ar
		dd offset loc_100301CD	; jump table for switch	statement
		dd offset loc_100301C7
		dd offset loc_100301C1
off_1003031C	dd offset loc_1003020A	; DATA XREF: sub_10030190+55r
		dd offset loc_10030200	; jump table for switch	statement
		dd offset loc_100301F6
		dd offset loc_100301EC
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030330	proc near		; DATA XREF: sub_1002F2F0+8Eo

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		mov	ecx, [esp+10h+arg_0]
		xor	edx, edx
		push	ebx
		push	ebp
		push	esi
		mov	eax, [ecx+8]
		xor	ebp, ebp
		push	edi
		dec	eax
		mov	[esp+20h+var_10], 0
		xor	edi, edi
		mov	[esp+20h+var_C], 0
		xor	ebx, ebx
		mov	[esp+20h+var_8], 0
		xor	esi, esi
		mov	[esp+20h+var_4], 0
		cmp	eax, 4		; switch 5 cases
		ja	short loc_10030392 ; jumptable 1003036E	default	case
		jmp	ds:off_10030508[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10030375:				; CODE XREF: sub_10030330+3Ej
					; DATA XREF: .text:off_10030508o
		mov	eax, [ecx+0Ch]	; jumptable 1003036E case 4
		mov	esi, [eax+10h]

loc_1003037B:				; CODE XREF: sub_10030330+3Ej
					; DATA XREF: .text:off_10030508o
		mov	eax, [ecx+0Ch]	; jumptable 1003036E case 3
		mov	ebx, [eax+0Ch]

loc_10030381:				; CODE XREF: sub_10030330+3Ej
					; DATA XREF: .text:off_10030508o
		mov	eax, [ecx+0Ch]	; jumptable 1003036E case 2
		mov	edi, [eax+8]

loc_10030387:				; CODE XREF: sub_10030330+3Ej
					; DATA XREF: .text:off_10030508o
		mov	eax, [ecx+0Ch]	; jumptable 1003036E case 1
		mov	ebp, [eax+4]

loc_1003038D:				; CODE XREF: sub_10030330+3Ej
					; DATA XREF: .text:off_10030508o
		mov	eax, [ecx+0Ch]	; jumptable 1003036E case 0
		mov	edx, [eax]

loc_10030392:				; CODE XREF: sub_10030330+3Cj
		mov	ecx, [esp+20h+arg_4] ; jumptable 1003036E default case
		mov	eax, [ecx+8]
		dec	eax
		cmp	eax, 4		; switch 5 cases
		ja	short loc_100303D5 ; jumptable 1003039F	default	case
		jmp	ds:off_1003051C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100303A6:				; CODE XREF: sub_10030330+6Fj
					; DATA XREF: .text:off_1003051Co
		mov	eax, [ecx+0Ch]	; jumptable 1003039F case 4
		mov	eax, [eax+10h]
		mov	[esp+20h+var_4], eax

loc_100303B0:				; CODE XREF: sub_10030330+6Fj
					; DATA XREF: .text:off_1003051Co
		mov	eax, [ecx+0Ch]	; jumptable 1003039F case 3
		mov	eax, [eax+0Ch]
		mov	[esp+20h+var_8], eax

loc_100303BA:				; CODE XREF: sub_10030330+6Fj
					; DATA XREF: .text:off_1003051Co
		mov	eax, [ecx+0Ch]	; jumptable 1003039F case 2
		mov	eax, [eax+8]
		mov	[esp+20h+var_C], eax

loc_100303C4:				; CODE XREF: sub_10030330+6Fj
					; DATA XREF: .text:off_1003051Co
		mov	eax, [ecx+0Ch]	; jumptable 1003039F case 1
		mov	eax, [eax+4]
		mov	[esp+20h+var_10], eax

loc_100303CE:				; CODE XREF: sub_10030330+6Fj
					; DATA XREF: .text:off_1003051Co
		mov	eax, [ecx+0Ch]	; jumptable 1003039F case 0
		mov	eax, [eax]
		jmp	short loc_100303D7
; ---------------------------------------------------------------------------

loc_100303D5:				; CODE XREF: sub_10030330+6Dj
		xor	eax, eax	; jumptable 1003039F default case

loc_100303D7:				; CODE XREF: sub_10030330+A3j
		mov	ecx, edx
		sub	edx, eax
		mov	eax, ebp
		mov	[esp+20h+arg_0], edx
		sub	ebp, [esp+20h+var_10]
		cmp	eax, ebp
		sbb	edx, edx
		neg	edx
		cmp	[esp+20h+arg_0], ecx
		jbe	short loc_100303F9
		mov	eax, ebp
		dec	ebp
		test	eax, eax
		jnz	short loc_100303F9
		inc	edx

loc_100303F9:				; CODE XREF: sub_10030330+BFj
					; sub_10030330+C6j
		mov	eax, edi
		sub	edi, [esp+20h+var_C]
		cmp	eax, edi
		sbb	ecx, ecx
		neg	ecx
		test	edx, edx
		jz	short loc_10030411
		mov	eax, edi
		dec	edi
		test	eax, eax
		jnz	short loc_10030411
		inc	ecx

loc_10030411:				; CODE XREF: sub_10030330+D7j
					; sub_10030330+DEj
		mov	eax, ebx
		sub	ebx, [esp+20h+var_8]
		cmp	eax, ebx
		sbb	edx, edx
		neg	edx
		test	ecx, ecx
		jz	short loc_10030429
		mov	eax, ebx
		dec	ebx
		test	eax, eax
		jnz	short loc_10030429
		inc	edx

loc_10030429:				; CODE XREF: sub_10030330+EFj
					; sub_10030330+F6j
		mov	eax, esi
		sub	esi, [esp+20h+var_4]
		cmp	eax, esi
		mov	[esp+20h+arg_4], esi
		sbb	ecx, ecx
		neg	ecx
		test	edx, edx
		jz	short loc_10030449
		mov	eax, esi
		dec	esi
		mov	[esp+20h+arg_4], esi
		test	eax, eax
		jnz	short loc_10030449
		inc	ecx

loc_10030449:				; CODE XREF: sub_10030330+10Bj
					; sub_10030330+116j
		test	ecx, ecx
		jz	short loc_10030495
		mov	eax, [esp+20h+arg_C]
		mov	ecx, [esp+20h+arg_0]
		mov	esi, [eax+10h]
		add	ecx, [esi]
		cmp	ecx, [esi]
		mov	[esp+20h+arg_0], ecx
		sbb	ecx, ecx
		add	ebp, [esi+4]
		neg	ecx
		cmp	ebp, [esi+4]
		sbb	eax, eax
		add	ebp, ecx
		neg	eax
		cmp	ebp, ecx
		sbb	edx, edx
		add	edi, [esi+8]
		neg	edx
		add	edx, eax
		cmp	edi, [esi+8]
		sbb	ecx, ecx
		add	edi, edx
		neg	ecx
		cmp	edi, edx
		sbb	eax, eax
		neg	eax
		add	eax, [esi+0Ch]
		mov	esi, [esp+20h+arg_4]
		add	eax, ecx
		add	ebx, eax

loc_10030495:				; CODE XREF: sub_10030330+11Bj
		push	5
		push	[esp+24h+arg_8]
		call	sub_1002C8E0
		add	esp, 8
		mov	[esp+20h+arg_4], eax
		test	eax, eax
		js	short loc_100304FD
		mov	edx, [esp+20h+arg_8]
		mov	ecx, [edx+0Ch]
		mov	[ecx+10h], esi
		mov	ecx, [edx+0Ch]
		mov	[ecx+0Ch], ebx
		mov	ecx, [edx+0Ch]
		mov	[ecx+8], edi
		mov	eax, [edx+0Ch]
		mov	ecx, [esp+20h+arg_0]
		mov	[eax+4], ebp
		mov	eax, [edx+0Ch]
		mov	[eax], ecx
		mov	ecx, 5
		mov	eax, [edx+0Ch]
		mov	dword ptr [edx], 0
		add	eax, 10h
		mov	dword ptr [edx+8], 5

loc_100304E8:				; CODE XREF: sub_10030330+1C4j
		cmp	dword ptr [eax], 0
		jnz	short loc_100304F6
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_100304E8

loc_100304F6:				; CODE XREF: sub_10030330+1BBj
		mov	eax, [esp+20h+arg_4]
		mov	[edx+8], ecx

loc_100304FD:				; CODE XREF: sub_10030330+179j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10030330	endp

; ---------------------------------------------------------------------------
		align 4
off_10030508	dd offset loc_1003038D	; DATA XREF: sub_10030330+3Er
		dd offset loc_10030387	; jump table for switch	statement
		dd offset loc_10030381
		dd offset loc_1003037B
		dd offset loc_10030375
off_1003051C	dd offset loc_100303CE	; DATA XREF: sub_10030330+6Fr
		dd offset loc_100303C4	; jump table for switch	statement
		dd offset loc_100303BA
		dd offset loc_100303B0
		dd offset loc_100303A6

; =============== S U B	R O U T	I N E =======================================


sub_10030530	proc near		; DATA XREF: sub_1002F2F0+9Eo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	ecx, [esp+1Ch+arg_0]
		xor	edx, edx
		push	ebx
		push	ebp
		push	esi
		mov	eax, [ecx+8]
		xor	esi, esi
		push	edi
		dec	eax
		mov	[esp+2Ch+var_18], 0
		xor	ebx, ebx
		mov	[esp+2Ch+var_14], 0
		xor	edi, edi
		mov	[esp+2Ch+var_10], 0
		xor	ebp, ebp
		mov	[esp+2Ch+var_C], 0
		mov	[esp+2Ch+var_8], 0
		mov	[esp+2Ch+var_4], 0
		mov	[esp+2Ch+var_1C], 0
		cmp	eax, 5		; switch 6 cases
		ja	short loc_100305B4 ; jumptable 10030586	default	case
		jmp	ds:off_10030780[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1003058D:				; CODE XREF: sub_10030530+56j
					; DATA XREF: .text:off_10030780o
		mov	eax, [ecx+0Ch]	; jumptable 10030586 case 5
		mov	edx, [eax+14h]

loc_10030593:				; CODE XREF: sub_10030530+56j
					; DATA XREF: .text:off_10030780o
		mov	eax, [ecx+0Ch]	; jumptable 10030586 case 4
		mov	ebp, [eax+10h]

loc_10030599:				; CODE XREF: sub_10030530+56j
					; DATA XREF: .text:off_10030780o
		mov	eax, [ecx+0Ch]	; jumptable 10030586 case 3
		mov	edi, [eax+0Ch]

loc_1003059F:				; CODE XREF: sub_10030530+56j
					; DATA XREF: .text:off_10030780o
		mov	eax, [ecx+0Ch]	; jumptable 10030586 case 2
		mov	ebx, [eax+8]

loc_100305A5:				; CODE XREF: sub_10030530+56j
					; DATA XREF: .text:off_10030780o
		mov	eax, [ecx+0Ch]	; jumptable 10030586 case 1
		mov	esi, [eax+4]

loc_100305AB:				; CODE XREF: sub_10030530+56j
					; DATA XREF: .text:off_10030780o
		mov	eax, [ecx+0Ch]	; jumptable 10030586 case 0
		mov	eax, [eax]
		mov	[esp+2Ch+var_1C], eax

loc_100305B4:				; CODE XREF: sub_10030530+54j
		mov	ecx, [esp+2Ch+arg_4] ; jumptable 10030586 default case
		mov	eax, [ecx+8]
		dec	eax
		cmp	eax, 5		; switch 6 cases
		ja	short loc_10030603 ; jumptable 100305C1	default	case
		jmp	ds:off_10030798[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100305C8:				; CODE XREF: sub_10030530+91j
					; DATA XREF: .text:off_10030798o
		mov	eax, [ecx+0Ch]	; jumptable 100305C1 case 5
		mov	eax, [eax+14h]
		mov	[esp+2Ch+var_4], eax

loc_100305D2:				; CODE XREF: sub_10030530+91j
					; DATA XREF: .text:off_10030798o
		mov	eax, [ecx+0Ch]	; jumptable 100305C1 case 4
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_8], eax

loc_100305DC:				; CODE XREF: sub_10030530+91j
					; DATA XREF: .text:off_10030798o
		mov	eax, [ecx+0Ch]	; jumptable 100305C1 case 3
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_C], eax

loc_100305E6:				; CODE XREF: sub_10030530+91j
					; DATA XREF: .text:off_10030798o
		mov	eax, [ecx+0Ch]	; jumptable 100305C1 case 2
		mov	eax, [eax+8]
		mov	[esp+2Ch+var_10], eax

loc_100305F0:				; CODE XREF: sub_10030530+91j
					; DATA XREF: .text:off_10030798o
		mov	eax, [ecx+0Ch]	; jumptable 100305C1 case 1
		mov	eax, [eax+4]
		mov	[esp+2Ch+var_14], eax

loc_100305FA:				; CODE XREF: sub_10030530+91j
					; DATA XREF: .text:off_10030798o
		mov	eax, [ecx+0Ch]	; jumptable 100305C1 case 0
		mov	eax, [eax]
		mov	[esp+2Ch+var_18], eax

loc_10030603:				; CODE XREF: sub_10030530+8Fj
		mov	eax, [esp+2Ch+var_1C] ;	jumptable 100305C1 default case
		mov	ecx, eax
		sub	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_1C], eax
		mov	eax, esi
		sub	esi, [esp+2Ch+var_14]
		cmp	eax, esi
		mov	[esp+2Ch+arg_0], esi
		sbb	eax, eax
		neg	eax
		cmp	[esp+2Ch+var_1C], ecx
		mov	[esp+2Ch+arg_4], eax
		mov	ecx, eax
		jbe	short loc_10030639
		mov	eax, esi
		dec	esi
		mov	[esp+2Ch+arg_0], esi
		test	eax, eax
		jnz	short loc_10030639
		inc	ecx

loc_10030639:				; CODE XREF: sub_10030530+FBj
					; sub_10030530+106j
		mov	eax, ebx
		sub	ebx, [esp+2Ch+var_10]
		cmp	eax, ebx
		sbb	esi, esi
		neg	esi
		test	ecx, ecx
		jz	short loc_10030651
		mov	eax, ebx
		dec	ebx
		test	eax, eax
		jnz	short loc_10030651
		inc	esi

loc_10030651:				; CODE XREF: sub_10030530+117j
					; sub_10030530+11Ej
		mov	eax, edi
		sub	edi, [esp+2Ch+var_C]
		cmp	eax, edi
		sbb	ecx, ecx
		neg	ecx
		test	esi, esi
		jz	short loc_10030669
		mov	eax, edi
		dec	edi
		test	eax, eax
		jnz	short loc_10030669
		inc	ecx

loc_10030669:				; CODE XREF: sub_10030530+12Fj
					; sub_10030530+136j
		mov	eax, ebp
		sub	ebp, [esp+2Ch+var_8]
		cmp	eax, ebp
		sbb	esi, esi
		neg	esi
		test	ecx, ecx
		jz	short loc_10030681
		mov	eax, ebp
		dec	ebp
		test	eax, eax
		jnz	short loc_10030681
		inc	esi

loc_10030681:				; CODE XREF: sub_10030530+147j
					; sub_10030530+14Ej
		mov	eax, edx
		sub	edx, [esp+2Ch+var_4]
		cmp	eax, edx
		mov	[esp+2Ch+arg_4], edx
		sbb	ecx, ecx
		neg	ecx
		test	esi, esi
		jz	short loc_100306A1
		mov	eax, edx
		dec	edx
		mov	[esp+2Ch+arg_4], edx
		test	eax, eax
		jnz	short loc_100306A1
		inc	ecx

loc_100306A1:				; CODE XREF: sub_10030530+163j
					; sub_10030530+16Ej
		test	ecx, ecx
		jz	short loc_10030705
		mov	eax, [esp+2Ch+arg_C]
		mov	ecx, [esp+2Ch+var_1C]
		mov	edx, [esp+2Ch+arg_0]
		mov	esi, [eax+10h]
		add	ecx, [esi]
		cmp	ecx, [esi]
		mov	[esp+2Ch+var_1C], ecx
		sbb	ecx, ecx
		add	edx, [esi+4]
		neg	ecx
		cmp	edx, [esi+4]
		sbb	eax, eax
		add	edx, ecx
		neg	eax
		mov	[esp+2Ch+arg_0], edx
		cmp	edx, ecx
		sbb	ecx, ecx
		add	ebx, [esi+8]
		neg	ecx
		add	ecx, eax
		cmp	ebx, [esi+8]
		sbb	eax, eax
		add	ebx, ecx
		neg	eax
		cmp	ebx, ecx
		sbb	edx, edx
		add	edi, [esi+0Ch]
		neg	edx
		add	edx, eax
		cmp	edi, [esi+0Ch]
		sbb	ecx, ecx
		add	edi, edx
		neg	ecx
		cmp	edi, edx
		sbb	eax, eax
		neg	eax
		add	eax, [esi+10h]
		add	eax, ecx
		add	ebp, eax

loc_10030705:				; CODE XREF: sub_10030530+173j
		mov	esi, [esp+2Ch+arg_8]
		push	6
		push	esi
		call	sub_1002C8E0
		add	esp, 8
		mov	[esp+2Ch+var_4], eax
		test	eax, eax
		js	short loc_10030778
		mov	ecx, [esi+0Ch]
		mov	edx, [esp+2Ch+arg_4]
		mov	[ecx+14h], edx
		mov	ecx, [esi+0Ch]
		mov	[ecx+10h], ebp
		mov	ecx, [esi+0Ch]
		mov	[ecx+0Ch], edi
		mov	eax, [esi+0Ch]
		mov	ecx, [esp+2Ch+arg_0]
		mov	[eax+8], ebx
		mov	eax, [esi+0Ch]
		mov	[eax+4], ecx
		mov	eax, [esi+0Ch]
		mov	ecx, [esp+2Ch+var_1C]
		mov	[eax], ecx
		mov	ecx, 6
		mov	eax, [esi+0Ch]
		mov	dword ptr [esi], 0
		add	eax, 14h
		mov	dword ptr [esi+8], 6

loc_10030763:				; CODE XREF: sub_10030530+23Fj
		cmp	dword ptr [eax], 0
		jnz	short loc_10030771
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_10030763

loc_10030771:				; CODE XREF: sub_10030530+236j
		mov	eax, [esp+2Ch+var_4]
		mov	[esi+8], ecx

loc_10030778:				; CODE XREF: sub_10030530+1EAj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
sub_10030530	endp

; ---------------------------------------------------------------------------
off_10030780	dd offset loc_100305AB	; DATA XREF: sub_10030530+56r
		dd offset loc_100305A5	; jump table for switch	statement
		dd offset loc_1003059F
		dd offset loc_10030599
		dd offset loc_10030593
		dd offset loc_1003058D
off_10030798	dd offset loc_100305FA	; DATA XREF: sub_10030530+91r
		dd offset loc_100305F0	; jump table for switch	statement
		dd offset loc_100305E6
		dd offset loc_100305DC
		dd offset loc_100305D2
		dd offset loc_100305C8

; =============== S U B	R O U T	I N E =======================================


sub_100307B0	proc near		; CODE XREF: .text:10030BD8p
					; DATA XREF: sub_1002E1D0+A0o ...

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 40h
		lea	eax, [esp+40h+var_10]
		mov	[esp+40h+var_4], 0
		push	esi
		push	eax
		mov	[esp+48h+var_14], 0
		mov	[esp+48h+var_34], 0
		mov	[esp+48h+var_24], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030B89
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030B89
		lea	eax, [esp+44h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030B89
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030B89
		mov	esi, [esp+44h+arg_0]
		push	ebx
		mov	ebx, [esp+48h+arg_4]
		push	ebx
		push	esi
		call	sub_10030BF0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10030882
		push	[esp+48h+arg_10]
		push	[esp+4Ch+arg_8]
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10030B88
		push	[esp+48h+arg_14]
		push	[esp+4Ch+arg_C]
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10030B88
		xor	esi, esi
		jmp	loc_10030B88
; ---------------------------------------------------------------------------

loc_10030882:				; CODE XREF: sub_100307B0+95j
		push	ebp
		mov	ebp, [esp+4Ch+arg_C]
		push	edi
		mov	edi, [esp+50h+arg_8]
		push	ebp
		push	edi
		call	sub_10030BF0
		add	esp, 8
		test	eax, eax
		jnz	short loc_100308CD
		push	[esp+50h+arg_10]
		push	esi
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10030B86
		push	[esp+50h+arg_14]
		push	ebx
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10030B86
		jmp	loc_10030B84
; ---------------------------------------------------------------------------

loc_100308CD:				; CODE XREF: sub_100307B0+E8j
		push	edi
		push	esi
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jz	short loc_1003094B
		mov	edi, [esp+50h+arg_18]
		lea	ecx, [esp+50h+var_30]
		add	edi, 4
		mov	eax, [edi]
		push	eax
		push	ecx
		push	ebp
		mov	eax, [eax+30h]
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_40]
		mov	ebx, [esp+50h+arg_0]
		push	eax
		push	ecx
		mov	ecx, [esp+58h+arg_8]
		mov	eax, [eax+30h]
		push	ecx
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_10]
		push	eax
		push	ecx
		lea	ecx, [esp+58h+var_40]
		mov	eax, [eax+40h]
		push	ecx
		lea	ecx, [esp+5Ch+var_30]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		jmp	loc_10030A94
; ---------------------------------------------------------------------------

loc_1003094B:				; CODE XREF: sub_100307B0+129j
		push	ebp
		push	ebx
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jnz	loc_10030B6F
		push	ebp
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jz	loc_10030B6F
		mov	ebx, [esp+50h+arg_18]
		lea	ecx, [esp+50h+var_40]
		mov	eax, [ebx+4]
		lea	edi, [ebx+4]
		push	eax
		push	ecx
		mov	ecx, [esp+58h+arg_8]
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10030B86
		lea	eax, [esp+50h+var_20]
		push	3
		push	eax
		call	sub_1002A110
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10030B86
		mov	eax, [edi]
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_100309CD
		push	eax
		lea	eax, [esp+54h+var_20]
		push	eax
		push	eax
		call	ecx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10030B86

loc_100309CD:				; CODE XREF: sub_100307B0+205j
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_40]
		push	eax
		push	ecx
		lea	ecx, [esp+58h+var_20]
		mov	eax, [eax+38h]
		push	ecx
		lea	ecx, [esp+5Ch+var_40]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		mov	ecx, [edi]
		lea	eax, [esp+50h+var_40]
		push	ecx
		push	eax
		lea	eax, [ebx+0Ch]
		push	eax
		lea	eax, [esp+5Ch+var_40]
		push	eax
		mov	eax, [ecx+28h]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		lea	eax, [esp+50h+var_20]
		push	2
		push	eax
		call	sub_1002A110
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10030B86
		mov	eax, [edi]
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_10030A4C
		push	eax
		lea	eax, [esp+54h+var_20]
		push	eax
		push	eax
		call	ecx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10030B86

loc_10030A4C:				; CODE XREF: sub_100307B0+284j
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_30]
		push	eax
		push	ecx
		lea	ecx, [esp+58h+var_20]
		mov	eax, [eax+38h]
		push	ecx
		push	ebp
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_10]
		push	eax
		push	ecx
		lea	ecx, [esp+58h+var_30]
		mov	eax, [eax+40h]
		push	ecx
		lea	ecx, [esp+5Ch+var_40]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		mov	ebx, [esp+50h+arg_0]

loc_10030A94:				; CODE XREF: sub_100307B0+196j
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_40]
		push	eax
		push	ecx
		lea	ecx, [esp+58h+var_10]
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10030B86
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_40]
		push	eax
		push	ecx
		push	ebx
		mov	eax, [eax+30h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_40]
		mov	ebx, [esp+50h+arg_8]
		push	eax
		push	ecx
		mov	eax, [eax+30h]
		push	ebx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B86
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_30]
		push	eax
		push	ecx
		lea	ecx, [esp+58h+var_40]
		mov	eax, [eax+30h]
		push	ecx
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10030B86
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_30]
		push	eax
		push	ecx
		lea	ecx, [esp+58h+var_10]
		mov	eax, [eax+38h]
		push	ecx
		lea	ecx, [esp+5Ch+var_30]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10030B86
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_30]
		push	eax
		push	ecx
		push	ebp
		mov	eax, [eax+30h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10030B86
		push	[esp+50h+arg_10]
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10030B86
		push	[esp+50h+arg_14]
		lea	eax, [esp+54h+var_30]
		push	eax
		call	sub_100290F0
		add	esp, 8
		mov	esi, eax
		jmp	short loc_10030B86
; ---------------------------------------------------------------------------

loc_10030B6F:				; CODE XREF: sub_100307B0+1A7j
					; sub_100307B0+1B8j
		push	[esp+50h+arg_10]
		call	sub_1002A9C0
		push	[esp+54h+arg_14]
		call	sub_1002A9C0
		add	esp, 8

loc_10030B84:				; CODE XREF: sub_100307B0+118j
		xor	esi, esi

loc_10030B86:				; CODE XREF: sub_100307B0+FBj
					; sub_100307B0+112j ...
		pop	edi
		pop	ebp

loc_10030B88:				; CODE XREF: sub_100307B0+ABj
					; sub_100307B0+C5j ...
		pop	ebx

loc_10030B89:				; CODE XREF: sub_100307B0+35j
					; sub_100307B0+4Cj ...
		lea	eax, [esp+44h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+48h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+4Ch+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		mov	eax, esi
		pop	esi
		add	esp, 40h
		retn
sub_100307B0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10030BC0:				; DATA XREF: sub_1002E1D0+AEo
					; sub_1002E2C0+BFo
		push	dword ptr [esp+14h]
		mov	ecx, [esp+0Ch]
		push	dword ptr [esp+14h]
		mov	eax, [esp+0Ch]
		push	dword ptr [esp+14h]
		push	ecx
		push	eax
		push	ecx
		push	eax
		call	sub_100307B0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030BF0	proc near		; CODE XREF: sub_100307B0+8Bp
					; sub_100307B0+DEp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10030C11
		push	[esp+arg_4]
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10030C11
		retn
; ---------------------------------------------------------------------------

loc_10030C11:				; CODE XREF: sub_10030BF0+Ej
					; sub_10030BF0+1Ej
		or	eax, 0FFFFFFFFh
		retn
sub_10030BF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030C20	proc near		; CODE XREF: sub_10031960+79p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_1002A9C0
		push	[esp+4+arg_4]
		call	sub_1002A9C0
		add	esp, 8
		xor	eax, eax
		retn
sub_10030C20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030C40	proc near		; DATA XREF: sub_1002E1D0+A7o
					; sub_1002E2C0+B8o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 10h
		lea	eax, [esp+10h+var_10]
		mov	[esp+10h+var_4], 0
		push	esi
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_10030CA3
		push	edi
		mov	edi, [esp+18h+arg_18]
		lea	ecx, [esp+18h+var_10]
		mov	eax, [edi+4]
		push	eax
		push	ecx
		push	[esp+20h+arg_C]
		mov	eax, [eax+2Ch]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10030CA2
		push	edi
		push	[esp+1Ch+arg_14]
		lea	eax, [esp+20h+var_10]
		push	[esp+20h+arg_10]
		push	eax
		push	[esp+28h+arg_8]
		mov	eax, [edi+60h]
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_0]
		call	eax
		add	esp, 1Ch
		mov	esi, eax

loc_10030CA2:				; CODE XREF: sub_10030C40+3Cj
		pop	edi

loc_10030CA3:				; CODE XREF: sub_10030C40+1Cj
		lea	eax, [esp+14h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	esi
		add	esp, 10h
		retn
sub_10030C40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030CC0	proc near		; DATA XREF: sub_1002E1D0+CAo
					; sub_1002E2C0+DBo

var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 50h
		lea	eax, [esp+50h+var_10]
		mov	[esp+50h+var_4], 0
		push	esi
		push	eax
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_14], 0
		mov	[esp+58h+var_34], 0
		mov	[esp+58h+var_24], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030F1D
		lea	eax, [esp+54h+var_50]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030F1D
		lea	eax, [esp+54h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030F1D
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030F1D
		lea	eax, [esp+54h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10030F1D
		push	ebx
		mov	ebx, [esp+58h+arg_0]
		push	ebp
		mov	ebp, [esp+5Ch+arg_4]
		push	ebp
		push	ebx
		call	sub_10030BF0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10030D7F
		or	esi, 0FFFFFFFFh
		jmp	loc_10030F1B
; ---------------------------------------------------------------------------

loc_10030D7F:				; CODE XREF: sub_10030CC0+B5j
		cmp	dword ptr [ebx], 1
		push	edi
		jz	loc_10030F17
		mov	edi, [esp+60h+arg_8]
		mov	eax, [edi+4]
		add	eax, 4
		push	eax
		push	ebx
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_10030F17
		cmp	dword ptr [ebp+0], 1
		jz	loc_10030F17
		mov	eax, [edi+4]
		add	eax, 4
		push	eax
		push	ebp
		call	sub_10028F50
		add	esp, 8
		test	eax, eax
		jns	loc_10030F17
		mov	eax, [edi+4]
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_10030DEE
		push	eax
		lea	eax, [esp+64h+var_40]
		push	eax
		push	ebx
		call	ecx
		mov	eax, [edi+4]
		lea	ecx, [esp+6Ch+var_30]
		push	eax
		push	ecx
		push	ebp
		mov	eax, [eax+44h]
		call	eax
		add	esp, 18h
		jmp	short loc_10030E07
; ---------------------------------------------------------------------------

loc_10030DEE:				; CODE XREF: sub_10030CC0+10Fj
		lea	eax, [esp+60h+var_40]
		push	eax
		push	ebx
		call	sub_100290F0
		lea	eax, [esp+68h+var_30]
		push	eax
		push	ebp
		call	sub_100290F0
		add	esp, 10h

loc_10030E07:				; CODE XREF: sub_10030CC0+12Cj
		mov	eax, [edi+4]
		lea	ecx, [esp+60h+var_10]
		push	eax
		push	ecx
		lea	ecx, [esp+68h+var_30]
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10030F1A
		mov	eax, [edi+4]
		lea	ecx, [esp+60h+var_20]
		push	eax
		push	ecx
		lea	ecx, [esp+68h+var_40]
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10030F1A
		mov	ecx, [edi+4]
		lea	eax, [esp+60h+var_20]
		push	ecx
		push	eax
		lea	eax, [edi+0Ch]
		push	eax
		lea	eax, [esp+6Ch+var_20]
		push	eax
		mov	eax, [ecx+28h]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030F1A
		mov	eax, [edi+4]
		lea	ecx, [esp+60h+var_50]
		push	eax
		push	ecx
		lea	ecx, [esp+68h+var_40]
		mov	eax, [eax+38h]
		push	ecx
		lea	ecx, [esp+6Ch+var_20]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030F1A
		mov	ecx, [edi+4]
		lea	eax, [esp+60h+var_50]
		push	ecx
		push	eax
		lea	eax, [edi+1Ch]
		push	eax
		lea	eax, [esp+6Ch+var_50]
		push	eax
		mov	eax, [ecx+28h]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10030F1A
		mov	eax, [edi+4]
		lea	ecx, [esp+60h+var_50]
		push	eax
		push	ecx
		push	ecx
		mov	eax, [eax+30h]
		lea	ecx, [esp+6Ch+var_10]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10030F1A
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10030F17
		lea	eax, [esp+60h+var_30]
		push	eax
		lea	eax, [esp+64h+var_40]
		push	eax
		push	ebp
		push	ebx
		lea	eax, [edi+4Ch]
		push	eax
		push	edi
		call	sub_1002E9F0
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		js	short loc_10030F1A
		lea	eax, [esp+60h+var_30]
		push	eax
		lea	eax, [esp+64h+var_40]
		push	eax
		call	sub_10030BF0
		add	esp, 8
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		jmp	short loc_10030F1A
; ---------------------------------------------------------------------------

loc_10030F17:				; CODE XREF: sub_10030CC0+C3j
					; sub_10030CC0+DFj ...
		or	esi, 0FFFFFFFFh

loc_10030F1A:				; CODE XREF: sub_10030CC0+161j
					; sub_10030CC0+181j ...
		pop	edi

loc_10030F1B:				; CODE XREF: sub_10030CC0+BAj
		pop	ebp
		pop	ebx

loc_10030F1D:				; CODE XREF: sub_10030CC0+3Dj
					; sub_10030CC0+54j ...
		lea	eax, [esp+54h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+58h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+60h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+64h+var_30]
		push	eax
		call	sub_10028F00
		add	esp, 14h
		mov	eax, esi
		pop	esi
		add	esp, 50h
		retn
sub_10030CC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030F60	proc near		; CODE XREF: sub_10031B00+5FEp

var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 60h
		lea	eax, [esp+60h+var_50]
		mov	[esp+60h+var_44], 0
		push	esi
		push	eax
		mov	[esp+68h+var_14], 0
		mov	[esp+68h+var_54], 0
		mov	[esp+68h+var_34], 0
		mov	[esp+68h+var_4], 0
		mov	[esp+68h+var_24], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031391
		lea	eax, [esp+64h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031391
		lea	eax, [esp+64h+var_60]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031391
		lea	eax, [esp+64h+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031391
		lea	eax, [esp+64h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031391
		lea	eax, [esp+64h+var_30]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031391
		push	ebx
		mov	ebx, [esp+68h+arg_8]
		push	ebx
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10031069
		push	[esp+68h+arg_20]
		push	[esp+6Ch+arg_1C]
		push	[esp+70h+arg_18]
		push	[esp+74h+arg_14]
		push	[esp+78h+arg_10]
		push	[esp+7Ch+arg_C]
		call	sub_100313E0
		add	esp, 18h
		mov	esi, eax
		jmp	loc_10031390
; ---------------------------------------------------------------------------

loc_10031069:				; CODE XREF: sub_10030F60+CEj
		push	ebp
		mov	ebp, [esp+6Ch+arg_10]
		push	ebp
		push	[esp+70h+arg_C]
		call	sub_10030BF0
		add	esp, 8
		test	eax, eax
		jnz	short loc_100310D6
		push	[esp+6Ch+arg_14]
		push	[esp+70h+arg_0]
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1003138F
		push	[esp+6Ch+arg_18]
		push	[esp+70h+arg_4]
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1003138F
		push	[esp+6Ch+arg_1C]
		push	ebx
		call	sub_100290F0
		add	esp, 8
		mov	esi, eax
		jmp	loc_1003138F
; ---------------------------------------------------------------------------

loc_100310D6:				; CODE XREF: sub_10030F60+123j
		push	edi
		mov	edi, [esp+70h+arg_20]
		lea	ecx, [esp+70h+var_50]
		mov	eax, [edi+4]
		push	eax
		push	ecx
		push	ebx
		mov	eax, [eax+3Ch]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_20]
		push	eax
		push	ecx
		lea	ecx, [esp+78h+var_50]
		mov	eax, [eax+38h]
		push	ebx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_50]
		push	eax
		push	ecx
		push	[esp+78h+arg_C]
		mov	eax, [eax+38h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_20]
		push	eax
		push	ecx
		push	ebp
		mov	eax, [eax+38h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_60]
		push	eax
		push	ecx
		push	[esp+78h+arg_0]
		mov	eax, [eax+30h]
		lea	ecx, [esp+7Ch+var_50]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_40]
		push	eax
		push	ecx
		push	[esp+78h+arg_4]
		mov	eax, [eax+30h]
		lea	ecx, [esp+7Ch+var_20]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		lea	eax, [esp+70h+var_60]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10031218
		lea	eax, [esp+70h+var_40]
		push	eax
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10031202
		mov	eax, [esp+70h+var_34]
		push	edi
		push	[esp+74h+arg_1C]
		push	[esp+78h+arg_18]
		mov	dword ptr [eax], 1
		lea	eax, [esp+7Ch+var_40]
		push	[esp+7Ch+arg_14]
		push	eax
		push	ebp
		push	[esp+88h+arg_C]
		call	sub_10031460
		add	esp, 1Ch
		jmp	loc_1003138C
; ---------------------------------------------------------------------------

loc_10031202:				; CODE XREF: sub_10030F60+266j
		push	[esp+70h+arg_1C]
		call	sub_1002A9C0
		add	esp, 4
		xor	esi, esi
		jmp	loc_1003138E
; ---------------------------------------------------------------------------

loc_10031218:				; CODE XREF: sub_10030F60+255j
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_10]
		push	eax
		push	ecx
		lea	ecx, [esp+78h+var_60]
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_30]
		push	eax
		push	ecx
		lea	ecx, [esp+78h+var_10]
		mov	eax, [eax+38h]
		push	ecx
		lea	ecx, [esp+7Ch+var_60]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_60]
		push	eax
		push	[esp+74h+arg_1C]
		mov	eax, [eax+38h]
		push	ecx
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_60]
		push	eax
		push	ecx
		lea	ecx, [esp+78h+var_10]
		mov	eax, [eax+38h]
		push	ecx
		push	[esp+7Ch+arg_0]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_50]
		push	eax
		push	ecx
		lea	ecx, [esp+78h+var_40]
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_60]
		mov	ebx, [esp+70h+arg_14]
		push	eax
		push	ebx
		mov	eax, [eax+28h]
		push	ecx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_30]
		push	eax
		push	ebx
		push	ebx
		mov	eax, [eax+28h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_50]
		push	eax
		push	ebx
		push	ebx
		mov	eax, [eax+30h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_30]
		push	eax
		push	ecx
		push	ecx
		push	[esp+7Ch+arg_4]
		mov	eax, [eax+38h]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_60]
		mov	ebp, [esp+70h+arg_18]
		push	eax
		push	ebp
		mov	eax, [eax+30h]
		push	ebx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_40]
		push	eax
		push	ebp
		push	ebp
		mov	eax, [eax+38h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1003138E
		mov	eax, [edi+4]
		lea	ecx, [esp+70h+var_30]
		push	eax
		push	ebp
		push	ecx
		mov	eax, [eax+30h]
		push	ebp
		call	eax
		add	esp, 10h

loc_1003138C:				; CODE XREF: sub_10030F60+29Dj
		mov	esi, eax

loc_1003138E:				; CODE XREF: sub_10030F60+194j
					; sub_10030F60+1B5j ...
		pop	edi

loc_1003138F:				; CODE XREF: sub_10030F60+13Cj
					; sub_10030F60+159j ...
		pop	ebp

loc_10031390:				; CODE XREF: sub_10030F60+104j
		pop	ebx

loc_10031391:				; CODE XREF: sub_10030F60+45j
					; sub_10030F60+5Cj ...
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+68h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+6Ch+var_60]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+70h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+74h+var_10]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+78h+var_30]
		push	eax
		call	sub_10028F00
		add	esp, 18h
		mov	eax, esi
		pop	esi
		add	esp, 60h
		retn
sub_10030F60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100313E0	proc near		; CODE XREF: sub_10030F60+FAp
					; sub_10032550+4Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_4]
		push	esi
		push	[esp+8+arg_0]
		call	sub_10030BF0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10031406
		push	[esp+4+arg_10]
		call	sub_1002A9C0
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10031406:				; CODE XREF: sub_100313E0+14j
		push	[esp+4+arg_8]
		push	[esp+8+arg_0]
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	short loc_10031454
		push	[esp+4+arg_C]
		push	esi
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	short loc_10031454
		mov	esi, [esp+4+arg_10]
		push	1
		push	esi
		call	sub_1002A110
		add	esp, 8
		test	eax, eax
		js	short loc_10031454
		mov	ecx, [esp+4+arg_14]
		mov	ecx, [ecx+4]
		mov	edx, [ecx+44h]
		test	edx, edx
		jz	short loc_10031454
		push	ecx
		push	esi
		push	esi
		call	edx
		add	esp, 0Ch

loc_10031454:				; CODE XREF: sub_100313E0+38j
					; sub_100313E0+49j ...
		pop	esi
		retn
sub_100313E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031460	proc near		; CODE XREF: sub_10030F60+295p
					; sub_10031B00+591p ...

var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 44h
		push	esi
		lea	eax, [esp+48h+var_30]
		mov	[esp+48h+var_24], 0
		push	edi
		push	eax
		mov	[esp+50h+var_14], 0
		mov	[esp+50h+var_34], 0
		mov	[esp+50h+var_4], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1003191B
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1003191B
		lea	eax, [esp+4Ch+var_40]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1003191B
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1003191B
		push	ebx
		mov	ebx, [esp+50h+arg_8]
		push	ebp
		push	ebx
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jz	loc_1003190B
		mov	ebp, [esp+54h+arg_4]
		push	ebp
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jz	loc_1003190B
		push	1
		push	ebx
		call	sub_10028FA0
		mov	edi, [esp+5Ch+arg_18]
		add	esp, 8
		test	eax, eax
		jnz	loc_100315A7
		mov	eax, [edi+4]
		lea	ecx, [esp+54h+var_30]
		add	edi, 4
		push	eax
		push	ecx
		push	[esp+5Ch+arg_0]
		mov	eax, [eax+3Ch]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_30]
		mov	eax, [eax+28h]
		push	ecx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_30]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_40]
		mov	eax, [eax+28h]
		push	ecx
		lea	ecx, [esp+60h+var_30]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	ecx, [edi]
		lea	eax, [esp+54h+var_40]
		push	ecx
		push	eax
		mov	eax, [esp+5Ch+arg_18]
		add	eax, 0Ch
		push	eax
		lea	eax, [esp+60h+var_30]
		push	eax
		mov	eax, [ecx+28h]
		jmp	loc_10031741
; ---------------------------------------------------------------------------

loc_100315A7:				; CODE XREF: sub_10031460+BEj
		lea	eax, [edi+0Ch]
		push	0FFFFFFFDh	; int
		push	eax		; size_t
		mov	[esp+5Ch+var_44], eax
		call	sub_10028FD0
		add	edi, 4
		add	esp, 8
		test	eax, eax
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+3Ch]
		jnz	loc_1003167B
		lea	ecx, [esp+58h+var_40]
		push	ecx
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_30]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_40]
		mov	eax, [eax+28h]
		push	ecx
		push	[esp+60h+arg_0]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_20]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_40]
		mov	eax, [eax+30h]
		push	ecx
		push	[esp+60h+arg_0]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_20]
		mov	eax, [eax+38h]
		push	ecx
		lea	ecx, [esp+60h+var_30]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_30]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_40]
		mov	eax, [eax+28h]
		push	ecx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		push	ecx
		lea	ecx, [esp+60h+var_30]
		jmp	loc_1003173D
; ---------------------------------------------------------------------------

loc_1003167B:				; CODE XREF: sub_10031460+164j
		lea	ecx, [esp+58h+var_30]
		push	ecx
		push	[esp+5Ch+arg_0]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_30]
		mov	eax, [eax+28h]
		push	ecx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_30]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_40]
		mov	eax, [eax+28h]
		push	ecx
		lea	ecx, [esp+60h+var_30]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		push	ebx
		mov	eax, [eax+3Ch]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		push	ecx
		mov	eax, [eax+3Ch]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		push	[esp+5Ch+var_44]
		mov	eax, [eax+38h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_30]
		push	ecx
		lea	ecx, [esp+60h+var_40]

loc_1003173D:				; CODE XREF: sub_10031460+216j
		mov	eax, [eax+28h]
		push	ecx

loc_10031741:				; CODE XREF: sub_10031460+142j
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		push	1
		push	ebx
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+28h]
		jnz	short loc_10031786
		mov	ebx, [esp+58h+arg_14]
		push	ebx
		push	ebp
		push	ebp
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_30]
		push	eax
		push	ecx
		push	ebx
		jmp	short loc_100317C4
; ---------------------------------------------------------------------------

loc_10031786:				; CODE XREF: sub_10031460+303j
		lea	ecx, [esp+58h+var_30]
		push	ecx
		push	ebp
		push	ebp
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_30]
		push	eax
		push	[esp+58h+arg_14]
		mov	eax, [eax+38h]
		push	ebx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_30]
		push	eax
		push	ecx
		push	ecx

loc_100317C4:				; CODE XREF: sub_10031460+324j
		mov	eax, [eax+3Ch]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_10]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_30]
		mov	eax, [eax+38h]
		push	ecx
		push	[esp+60h+arg_0]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_20]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_10]
		mov	eax, [eax+28h]
		push	ecx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		mov	ebx, [esp+54h+arg_C]
		push	eax
		push	ebx
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_20]
		push	eax
		push	ebx
		push	ecx
		mov	eax, [eax+30h]
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_20]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_30]
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031919
		lea	eax, [esp+54h+var_20]
		push	eax
		call	sub_10029A50
		add	esp, 4
		test	eax, eax
		jz	short loc_100318A2
		lea	eax, [esp+54h+var_20]
		push	eax
		mov	eax, [edi]
		add	eax, 4
		push	eax
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_10028D40
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10031919

loc_100318A2:				; CODE XREF: sub_10031460+422j
		lea	eax, [esp+54h+var_20]
		push	eax
		push	eax
		call	sub_100293E0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_10]
		push	eax
		push	ecx
		push	ebx
		mov	eax, [eax+30h]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_40]
		push	eax
		push	ecx
		lea	ecx, [esp+5Ch+var_10]
		mov	eax, [eax+38h]
		push	ecx
		lea	ecx, [esp+60h+var_40]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031919
		mov	eax, [edi]
		lea	ecx, [esp+54h+var_20]
		push	eax
		push	[esp+58h+arg_10]
		mov	eax, [eax+30h]
		push	ecx
		lea	ecx, [esp+60h+var_40]
		push	ecx
		call	eax
		add	esp, 10h
		mov	esi, eax
		jmp	short loc_10031919
; ---------------------------------------------------------------------------

loc_1003190B:				; CODE XREF: sub_10031460+92j
					; sub_10031460+A7j
		push	[esp+54h+arg_14]
		call	sub_1002A9C0
		add	esp, 4
		xor	esi, esi

loc_10031919:				; CODE XREF: sub_10031460+E0j
					; sub_10031460+100j ...
		pop	ebp
		pop	ebx

loc_1003191B:				; CODE XREF: sub_10031460+36j
					; sub_10031460+4Dj ...
		lea	eax, [esp+4Ch+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+58h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		add	esp, 44h
		retn
sub_10031460	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031950	proc near		; CODE XREF: sub_10032550+28p
					; sub_10032880+20p

arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		call	sub_100290C0
		add	esp, 4
		retn
sub_10031950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031960	proc near		; CODE XREF: sub_10031B00+632p
					; sub_10032AB0+39Bp

var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 30h
		lea	eax, [esp+30h+var_30]
		mov	[esp+30h+var_24], 0
		push	esi
		push	eax
		mov	[esp+38h+var_14], 0
		mov	[esp+38h+var_4], 0
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031ABF
		lea	eax, [esp+34h+var_20]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031ABF
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031ABF
		mov	esi, [esp+34h+arg_8]
		push	esi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100319E8
		push	[esp+34h+arg_10]
		push	[esp+38h+arg_C]
		call	sub_10030C20
		add	esp, 8
		mov	esi, eax
		jmp	loc_10031ABF
; ---------------------------------------------------------------------------

loc_100319E8:				; CODE XREF: sub_10031960+6Fj
		push	1
		push	esi
		call	sub_10028FA0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10031A28
		push	[esp+34h+arg_C]
		push	[esp+38h+arg_0]
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10031ABF
		push	[esp+34h+arg_10]
		push	[esp+38h+arg_4]
		call	sub_100290F0
		add	esp, 8
		mov	esi, eax
		jmp	loc_10031ABF
; ---------------------------------------------------------------------------

loc_10031A28:				; CODE XREF: sub_10031960+95j
		push	edi
		mov	edi, [esp+38h+arg_14]
		lea	ecx, [esp+38h+var_30]
		mov	eax, [edi+4]
		push	eax
		push	ecx
		push	esi
		mov	eax, [eax+40h]
		push	0
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031ABE
		mov	eax, [edi+4]
		lea	ecx, [esp+38h+var_20]
		push	eax
		push	ecx
		lea	ecx, [esp+40h+var_30]
		mov	eax, [eax+3Ch]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10031ABE
		mov	eax, [edi+4]
		lea	ecx, [esp+38h+var_10]
		push	eax
		push	ecx
		lea	ecx, [esp+40h+var_20]
		mov	eax, [eax+38h]
		push	ecx
		lea	ecx, [esp+44h+var_30]
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031ABE
		mov	eax, [edi+4]
		lea	ecx, [esp+38h+var_20]
		push	eax
		push	[esp+3Ch+arg_C]
		mov	eax, [eax+38h]
		push	ecx
		push	[esp+44h+arg_0]
		call	eax
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031ABE
		mov	eax, [edi+4]
		lea	ecx, [esp+38h+var_10]
		push	eax
		push	[esp+3Ch+arg_10]
		mov	eax, [eax+38h]
		push	ecx
		push	[esp+44h+arg_4]
		call	eax
		add	esp, 10h
		mov	esi, eax

loc_10031ABE:				; CODE XREF: sub_10031960+E5j
					; sub_10031960+101j ...
		pop	edi

loc_10031ABF:				; CODE XREF: sub_10031960+2Cj
					; sub_10031960+43j ...
		lea	eax, [esp+34h+var_30]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+38h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		add	esp, 30h
		retn
sub_10031960	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031AF0	proc near		; CODE XREF: sub_10032880+38p
					; sub_10032AB0+2C5p

arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		call	sub_1002A9C0
		add	esp, 4
		xor	eax, eax
		retn
sub_10031AF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031B00	proc near		; DATA XREF: sub_1002E1D0+C3o
					; sub_1002E2C0+D4o

var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= byte ptr -218h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F4		= byte ptr -1F4h
var_1E8		= byte ptr -1E8h
var_1E4		= byte ptr -1E4h
var_1D4		= byte ptr -1D4h
var_1C4		= byte ptr -1C4h
var_1B4		= byte ptr -1B4h
var_1A4		= byte ptr -1A4h
var_194		= byte ptr -194h
var_184		= byte ptr -184h
var_174		= byte ptr -174h
var_164		= byte ptr -164h
var_144		= byte ptr -144h
var_124		= byte ptr -124h
var_104		= byte ptr -104h
var_F4		= byte ptr -0F4h
var_84		= byte ptr -84h
var_74		= byte ptr -74h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 238h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+238h+var_4], eax
		mov	eax, [esp+238h+arg_0]
		mov	ecx, 4
		mov	edx, [esp+238h+arg_14]
		push	ebx
		mov	ebx, [esp+23Ch+arg_8]
		push	ebp
		mov	ebp, [esp+240h+arg_18]
		push	esi
		mov	esi, [esp+244h+arg_10]
		mov	[esp+244h+var_230], eax
		mov	eax, [esp+244h+arg_C]
		push	edi
		mov	edi, [esp+248h+arg_4]
		mov	[esp+248h+var_234], eax
		lea	eax, [esp+248h+var_1E8]
		mov	[esp+248h+var_208], edi
		mov	[esp+248h+var_220], ebx
		mov	[esp+248h+var_228], esi
		mov	[esp+248h+var_224], edx
		mov	[esp+248h+var_21C], ebp
		mov	edi, edi

loc_10031B70:				; CODE XREF: sub_10031B00+AFj
		mov	dword ptr [eax-10h], 0
		lea	eax, [eax+80h]
		mov	dword ptr [eax-80h], 0
		mov	dword ptr [eax-70h], 0
		mov	dword ptr [eax-60h], 0
		mov	dword ptr [eax-50h], 0
		mov	dword ptr [eax-40h], 0
		mov	dword ptr [eax-30h], 0
		mov	dword ptr [eax-20h], 0
		dec	ecx
		jnz	short loc_10031B70
		mov	[esp+248h+var_20C], ecx
		test	ebp, ebp
		jnz	short loc_10031BC3

loc_10031BB9:				; CODE XREF: sub_10031B00+CDj
					; sub_10031B00+D1j ...
		mov	eax, 0FFFFFFFCh
		jmp	loc_100321B4
; ---------------------------------------------------------------------------

loc_10031BC3:				; CODE XREF: sub_10031B00+B7j
		mov	eax, [esp+248h+var_230]
		test	eax, eax
		jnz	short loc_10031BE5
		test	edi, edi
		jz	short loc_10031BB9
		test	ebx, ebx
		jz	short loc_10031BB9
		mov	eax, [esp+248h+var_234]
		test	eax, eax
		jz	short loc_10031BB9
		push	edx
		push	esi
		push	eax
		push	ebx
		push	edi
		jmp	loc_100321AB
; ---------------------------------------------------------------------------

loc_10031BE5:				; CODE XREF: sub_10031B00+C9j
		test	edi, edi
		jz	loc_100321A4
		test	ebx, ebx
		jz	loc_100321A4
		cmp	[esp+248h+var_234], 0
		jz	loc_100321A4
		lea	ecx, [esp+248h+var_1F4]
		mov	[esp+248h+var_238], 0
		mov	[esp+248h+var_22C], ecx

loc_10031C10:				; CODE XREF: sub_10031B00+15Dj
		xor	ebx, ebx
		mov	esi, ecx

loc_10031C14:				; CODE XREF: sub_10031B00+144j
		lea	eax, [esi-10h]
		push	eax
		call	sub_100298B0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10032168
		push	esi
		call	sub_100298B0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_10032168
		inc	ebx
		add	esi, 20h
		cmp	ebx, 4
		jl	short loc_10031C14
		mov	eax, [esp+248h+var_238]
		mov	ecx, [esp+248h+var_22C]
		inc	eax
		sub	ecx, 0FFFFFF80h
		mov	[esp+248h+var_238], eax
		mov	[esp+248h+var_22C], ecx
		cmp	eax, 4
		jl	short loc_10031C10
		mov	edi, [esp+248h+var_208]
		push	edi
		call	sub_10028CD0
		mov	ebx, [esp+24Ch+var_230]
		mov	esi, eax
		push	ebx
		call	sub_10028CD0
		add	esp, 8
		cmp	eax, esi
		jge	loc_10031D29
		mov	eax, [ebp+4]
		mov	[esp+248h+var_238], edi
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_10031CC4
		push	eax
		lea	eax, [esp+24Ch+var_184]
		push	eax
		push	[esp+250h+var_220]
		call	ecx
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10032168
		mov	eax, [ebp+4]
		lea	ecx, [esp+248h+var_174]
		push	eax
		push	ecx
		push	[esp+250h+var_234]
		mov	eax, [eax+44h]
		call	eax
		add	esp, 0Ch
		jmp	short loc_10031CF6
; ---------------------------------------------------------------------------

loc_10031CC4:				; CODE XREF: sub_10031B00+18Cj
		lea	eax, [esp+248h+var_184]
		push	eax
		push	[esp+24Ch+var_220]
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_10032168
		lea	eax, [esp+248h+var_174]
		push	eax
		push	[esp+24Ch+var_234]
		call	sub_100290F0
		add	esp, 8

loc_10031CF6:				; CODE XREF: sub_10031B00+1C2j
		mov	edi, eax
		test	edi, edi
		js	loc_10032168
		lea	eax, [esp+248h+var_1E4]
		push	eax
		lea	eax, [ebp+2Ch]
		push	eax
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_10032168
		lea	eax, [esp+248h+var_1D4]
		push	eax
		lea	eax, [ebp+3Ch]
		push	eax
		jmp	loc_10031DCB
; ---------------------------------------------------------------------------

loc_10031D29:				; CODE XREF: sub_10031B00+17Aj
		lea	eax, [esp+248h+var_184]
		mov	[esp+248h+var_238], ebx
		push	eax
		lea	eax, [ebp+2Ch]
		mov	[esp+24Ch+var_230], edi
		push	eax
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_10032168
		lea	eax, [esp+248h+var_174]
		push	eax
		lea	eax, [ebp+3Ch]
		push	eax
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_10032168
		mov	eax, [ebp+4]
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_10031DA7
		push	eax
		lea	eax, [esp+24Ch+var_1E4]
		push	eax
		push	[esp+250h+var_220]
		call	ecx
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_10032168
		mov	eax, [ebp+4]
		lea	ecx, [esp+248h+var_1D4]
		push	eax
		push	ecx
		push	[esp+250h+var_234]
		mov	eax, [eax+44h]
		call	eax
		add	esp, 0Ch
		jmp	short loc_10031DD3
; ---------------------------------------------------------------------------

loc_10031DA7:				; CODE XREF: sub_10031B00+275j
		lea	eax, [esp+248h+var_1E4]
		push	eax
		push	[esp+24Ch+var_220]
		call	sub_100290F0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_10032168
		lea	eax, [esp+248h+var_1D4]
		push	eax
		push	[esp+24Ch+var_234]

loc_10031DCB:				; CODE XREF: sub_10031B00+224j
		call	sub_100290F0
		add	esp, 8

loc_10031DD3:				; CODE XREF: sub_10031B00+2A5j
		mov	edi, eax
		test	edi, edi
		js	loc_10032168
		lea	eax, [esp+248h+var_204]
		push	eax
		call	sub_1002A9C0
		lea	eax, [esp+24Ch+var_1F4]
		push	eax
		call	sub_1002A9C0
		push	ebp
		lea	eax, [esp+254h+var_F4]
		push	eax
		lea	eax, [esp+258h+var_104]
		push	eax
		lea	eax, [esp+25Ch+var_174]
		push	eax
		lea	eax, [esp+260h+var_184]
		push	eax
		mov	eax, [ebp+68h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_10032168
		push	ebp
		lea	eax, [esp+24Ch+var_74]
		push	eax
		lea	eax, [esp+250h+var_84]
		push	eax
		lea	eax, [esp+254h+var_F4]
		push	eax
		lea	eax, [esp+258h+var_104]
		push	eax
		lea	eax, [esp+25Ch+var_174]
		push	eax
		lea	eax, [esp+260h+var_184]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_10032168
		mov	ebx, 1
		lea	esi, [esp+248h+var_164]

loc_10031E73:				; CODE XREF: sub_10031B00+3A7j
		push	ebp
		lea	eax, [esi+10h]
		push	eax
		push	esi
		lea	eax, [esi-10h]
		push	eax
		lea	eax, [esi-20h]
		push	eax
		lea	eax, [esp+25Ch+var_1D4]
		push	eax
		lea	eax, [esp+260h+var_1E4]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_10032168
		inc	ebx
		sub	esi, 0FFFFFF80h
		cmp	ebx, 4
		jl	short loc_10031E73
		push	ebp
		lea	eax, [esp+24Ch+var_1B4]
		push	eax
		lea	eax, [esp+250h+var_1C4]
		push	eax
		lea	eax, [esp+254h+var_1D4]
		push	eax
		lea	eax, [esp+258h+var_1E4]
		push	eax
		mov	eax, [ebp+68h]
		call	eax
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		js	loc_10032168
		mov	ebx, 1
		lea	esi, [esp+248h+var_144]

loc_10031EE5:				; CODE XREF: sub_10031B00+41Cj
		push	ebp
		lea	eax, [esi+10h]
		push	eax
		push	esi
		lea	eax, [esi-30h]
		push	eax
		lea	eax, [esi-40h]
		push	eax
		lea	eax, [esp+25Ch+var_1B4]
		push	eax
		lea	eax, [esp+260h+var_1C4]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_10032168
		inc	ebx
		sub	esi, 0FFFFFF80h
		cmp	ebx, 4
		jl	short loc_10031EE5
		push	ebp
		lea	eax, [esp+24Ch+var_194]
		push	eax
		lea	eax, [esp+250h+var_1A4]
		push	eax
		lea	eax, [esp+254h+var_1B4]
		push	eax
		lea	eax, [esp+258h+var_1C4]
		push	eax
		lea	eax, [esp+25Ch+var_1D4]
		push	eax
		lea	eax, [esp+260h+var_1E4]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_10032168
		mov	ebx, 1
		lea	esi, [esp+248h+var_124]
		lea	ebx, [ebx+0]

loc_10031F70:				; CODE XREF: sub_10031B00+4A7j
		push	ebp
		lea	eax, [esi+10h]
		push	eax
		push	esi
		lea	eax, [esi-50h]
		push	eax
		lea	eax, [esi-60h]
		push	eax
		lea	eax, [esp+25Ch+var_194]
		push	eax
		lea	eax, [esp+260h+var_1A4]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_10032168
		inc	ebx
		sub	esi, 0FFFFFF80h
		cmp	ebx, 4
		jl	short loc_10031F70
		push	[esp+248h+var_238]
		call	sub_10028CD0
		inc	eax
		cdq
		sub	eax, edx
		mov	ebx, eax
		lea	eax, [esp+24Ch+var_218]
		push	eax
		sar	ebx, 1
		call	sub_100298B0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	loc_10032168
		lea	eax, [esp+248h+var_218]
		push	eax
		call	sub_1002A9C0
		add	esp, 4
		dec	ebx
		mov	[esp+248h+var_22C], ebx
		js	loc_10032120
		lea	esi, [ebx+ebx]
		lea	esp, [esp+0]

loc_10031FF0:				; CODE XREF: sub_10031B00+61Aj
		mov	ebx, [esp+248h+var_238]
		lea	edi, [esi+1]
		push	ebx
		call	sub_10028CD0
		add	esp, 4
		cmp	edi, eax
		jl	short loc_10032008
		xor	ebp, ebp
		jmp	short loc_10032014
; ---------------------------------------------------------------------------

loc_10032008:				; CODE XREF: sub_10031B00+502j
		push	edi
		push	ebx
		call	sub_10028AF0
		add	esp, 8
		mov	ebp, eax

loc_10032014:				; CODE XREF: sub_10031B00+506j
		push	ebx
		add	ebp, ebp
		call	sub_10028CD0
		add	esp, 4
		cmp	esi, eax
		jl	short loc_10032027
		xor	eax, eax
		jmp	short loc_10032031
; ---------------------------------------------------------------------------

loc_10032027:				; CODE XREF: sub_10031B00+521j
		push	esi
		push	ebx
		call	sub_10028AF0
		add	esp, 8

loc_10032031:				; CODE XREF: sub_10031B00+525j
		mov	ebx, [esp+248h+var_230]
		or	ebp, eax
		push	ebx
		call	sub_10028CD0
		add	esp, 4
		cmp	edi, eax
		jl	short loc_10032048
		xor	ebx, ebx
		jmp	short loc_10032054
; ---------------------------------------------------------------------------

loc_10032048:				; CODE XREF: sub_10031B00+542j
		push	edi
		push	ebx
		call	sub_10028AF0
		add	esp, 8
		mov	ebx, eax

loc_10032054:				; CODE XREF: sub_10031B00+546j
		mov	edi, [esp+248h+var_230]
		add	ebx, ebx
		push	edi
		call	sub_10028CD0
		add	esp, 4
		cmp	esi, eax
		jl	short loc_1003206B
		xor	eax, eax
		jmp	short loc_10032075
; ---------------------------------------------------------------------------

loc_1003206B:				; CODE XREF: sub_10031B00+565j
		push	esi
		push	edi
		call	sub_10028AF0
		add	esp, 8

loc_10032075:				; CODE XREF: sub_10031B00+569j
		push	[esp+248h+var_21C]
		mov	ecx, [esp+24Ch+var_228]
		lea	edx, [esp+24Ch+var_218]
		or	ebx, eax
		lea	eax, [esp+24Ch+var_218]
		push	eax
		mov	eax, [esp+250h+var_224]
		push	eax
		push	ecx
		push	edx
		push	eax
		push	ecx
		call	sub_10031460
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_10032168
		push	[esp+248h+var_21C]
		mov	ecx, [esp+24Ch+var_228]
		lea	eax, [esp+24Ch+var_218]
		push	eax
		mov	eax, [esp+250h+var_224]
		lea	edx, [esp+250h+var_218]
		push	eax
		push	ecx
		push	edx
		push	eax
		push	ecx
		call	sub_10031460
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		js	loc_10032168
		mov	edx, [esp+248h+var_224]
		lea	ecx, [ebx+ebp*4]
		mov	ebp, [esp+248h+var_21C]
		lea	eax, [esp+248h+var_218]
		mov	ebx, [esp+248h+var_228]
		push	ebp
		push	eax
		push	edx
		shl	ecx, 5
		lea	eax, [esp+254h+var_1F4]
		push	ebx
		add	eax, ecx
		push	eax
		lea	eax, [esp+25Ch+var_204]
		add	eax, ecx
		push	eax
		lea	eax, [esp+260h+var_218]
		push	eax
		push	edx
		push	ebx
		call	sub_10030F60
		mov	edi, eax
		add	esp, 24h
		test	edi, edi
		js	short loc_10032168
		mov	ebx, [esp+248h+var_22C]
		sub	esi, 2
		dec	ebx
		mov	[esp+248h+var_22C], ebx
		test	ebx, ebx
		jns	loc_10031FF0

loc_10032120:				; CODE XREF: sub_10031B00+4E3j
		mov	esi, [esp+248h+var_224]
		lea	eax, [esp+248h+var_218]
		mov	ebx, [esp+248h+var_228]
		push	ebp
		push	esi
		push	ebx
		push	eax
		push	esi
		push	ebx
		call	sub_10031960
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		js	short loc_10032168
		mov	eax, [ebp+4]
		mov	ecx, [eax+48h]
		test	ecx, ecx
		jz	short loc_10032168
		push	eax
		push	ebx
		push	ebx
		call	ecx
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_10032168
		mov	eax, [ebp+4]
		push	eax
		push	esi
		push	esi
		mov	eax, [eax+48h]
		call	eax
		add	esp, 0Ch
		mov	edi, eax

loc_10032168:				; CODE XREF: sub_10031B00+124j
					; sub_10031B00+137j ...
		lea	eax, [esp+248h+var_218]
		push	eax
		call	sub_10028F00
		add	esp, 4
		lea	esi, [esp+248h+var_1F4]
		mov	ebp, 4
		mov	edi, edi

loc_10032180:				; CODE XREF: sub_10031B00+69Ej
		mov	ebx, 4

loc_10032185:				; CODE XREF: sub_10031B00+69Bj
		lea	eax, [esi-10h]
		push	eax
		call	sub_10028F00
		push	esi
		call	sub_10028F00
		add	esp, 8
		add	esi, 20h
		dec	ebx
		jnz	short loc_10032185
		dec	ebp
		jnz	short loc_10032180
		mov	eax, edi
		jmp	short loc_100321B4
; ---------------------------------------------------------------------------

loc_100321A4:				; CODE XREF: sub_10031B00+E7j
					; sub_10031B00+EFj ...
		push	edx
		push	esi
		push	0
		push	0
		push	eax

loc_100321AB:				; CODE XREF: sub_10031B00+E0j
		push	ebp
		call	sub_1002E9F0
		add	esp, 18h

loc_100321B4:				; CODE XREF: sub_10031B00+BEj
					; sub_10031B00+6A2j
		mov	ecx, [esp+248h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 238h
		retn
sub_10031B00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100321D0	proc near		; CODE XREF: sub_1002E2C0+14p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		call	sub_1002F2F0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_100321E5
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100321E5:				; CODE XREF: sub_100321D0+11j
		push	edi
		push	14h		; size_t
		call	ds:malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_10032259
		mov	eax, [esi+4]
		mov	dword ptr [esi+38h], offset sub_10032370
		mov	dword ptr [esi+3Ch], offset loc_10032410
		mov	dword ptr [esi+40h], offset loc_100322A0
		mov	dword ptr [esi+44h], offset sub_10032310
		mov	dword ptr [esi+48h], offset loc_10032270
		mov	[esi+4Ch], edi
		mov	dword ptr [esi+50h], 0
		mov	dword ptr [esi+54h], offset loc_10032350
		mov	[edi], eax
		mov	eax, [esi+8]
		mov	[edi+4], eax
		mov	eax, [esi+0Ch]
		mov	[edi+8], eax
		mov	eax, [esi+10h]
		mov	[edi+0Ch], eax
		mov	eax, [esi+10h]
		push	dword ptr [eax]
		call	sub_1002C3C0
		add	esp, 4
		neg	eax
		mov	[edi+10h], eax
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10032259:				; CODE XREF: sub_100321D0+25j
		push	esi		; void *
		call	sub_1002F430
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn
sub_100321D0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10032270:				; DATA XREF: sub_100321D0+46o
		mov	eax, [esp+4]
		push	esi
		mov	esi, [esp+0Ch]
		cmp	eax, esi
		jz	short loc_1003228B
		push	esi
		push	eax
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	short loc_1003229B

loc_1003228B:				; CODE XREF: .text:1003227Bj
		mov	eax, [esp+10h]
		push	dword ptr [eax+4Ch]
		push	esi
		call	sub_100289A0
		add	esp, 8

loc_1003229B:				; CODE XREF: .text:10032289j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_100322A0:				; DATA XREF: sub_100321D0+38o
		push	esi
		mov	esi, [esp+10h]
		push	edi
		mov	edi, [esp+18h]
		push	edi
		push	esi
		push	dword ptr [esp+18h]
		push	dword ptr [esp+18h]
		call	sub_1002FEA0
		add	esp, 10h
		test	eax, eax
		js	short loc_10032304
		push	ebp
		mov	ebp, [edi+4Ch]
		push	esi
		push	esi
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	short loc_100322ED
		push	dword ptr [ebp+8]
		push	esi
		call	sub_1002C4D0
		add	esp, 8
		test	eax, eax
		js	short loc_100322ED
		push	esi
		push	ebp
		push	esi
		call	sub_10029A70
		add	esp, 0Ch

loc_100322ED:				; CODE XREF: .text:100322D0j
					; .text:100322E0j
		pop	ebp
		test	eax, eax
		js	short loc_10032304
		cmp	dword ptr [esp+0Ch], 0
		jnz	short loc_10032304
		push	edi
		push	esi
		push	esi
		call	sub_10032310
		add	esp, 0Ch

loc_10032304:				; CODE XREF: .text:100322BEj
					; .text:100322F0j ...
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032310	proc near		; CODE XREF: .text:100322FCp
					; DATA XREF: sub_100321D0+3Fo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [eax+4Ch]
		push	esi
		push	[esp+0Ch+arg_0]
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	short loc_10032349
		push	dword ptr [edi+8]
		push	esi
		call	sub_1002C4D0
		add	esp, 8
		test	eax, eax
		js	short loc_10032349
		push	esi
		push	edi
		push	esi
		call	sub_10029A70
		add	esp, 0Ch

loc_10032349:				; CODE XREF: sub_10032310+1Cj
					; sub_10032310+2Cj
		pop	edi
		pop	esi
		retn
sub_10032310	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10032350:				; DATA XREF: sub_100321D0+57o
		push	esi
		mov	esi, [esp+8]
		mov	eax, [esi+4Ch]
		test	eax, eax
		jz	short loc_1003236D
		push	eax
		call	ds:free
		add	esp, 4
		mov	dword ptr [esi+4Ch], 0

loc_1003236D:				; CODE XREF: .text:1003235Aj
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032370	proc near		; CODE XREF: .text:1003241Ep
					; DATA XREF: sub_100321D0+2Ao

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	ebx
		mov	ebx, [esp+14h+arg_4]
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], 0
		cmp	ebp, edi
		jz	short loc_100323AB
		cmp	ebx, edi
		jz	short loc_100323AB
		mov	eax, [esp+1Ch+arg_C]
		push	dword ptr [eax+4Ch]
		push	edi
		push	ebx
		push	ebp
		call	sub_100287E0
		add	esp, 10h
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100323AB:				; CODE XREF: sub_10032370+1Cj
					; sub_10032370+20j
		lea	eax, [esp+1Ch+var_10]
		push	esi
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_100323FC
		mov	eax, [esp+20h+arg_C]
		push	dword ptr [eax+4Ch]
		lea	eax, [esp+24h+var_10]
		push	eax
		push	ebx
		push	ebp
		call	sub_100287E0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_100323FC
		lea	eax, [esp+20h+var_10]
		push	edi
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_100323FC
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4

loc_100323FC:				; CODE XREF: sub_10032370+4Dj
					; sub_10032370+69j ...
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10032370	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10032410:				; DATA XREF: sub_100321D0+31o
		push	dword ptr [esp+0Ch]
		mov	eax, [esp+8]
		push	dword ptr [esp+0Ch]
		push	eax
		push	eax
		call	sub_10032370
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032430	proc near		; CODE XREF: sub_10032AB0+307p

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		sub	esp, 10h
		dec	eax
		push	ebx
		mov	ebx, 1
		push	ebp
		test	eax, eax
		jle	short loc_10032448

loc_10032443:				; CODE XREF: sub_10032430+16j
		add	ebx, ebx
		dec	eax
		jnz	short loc_10032443

loc_10032448:				; CODE XREF: sub_10032430+11j
		push	[esp+18h+arg_8]
		lea	eax, [esp+1Ch+var_10]
		mov	[esp+1Ch+var_4], 0
		push	eax
		call	sub_100298D0
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		js	loc_10032536
		push	esi
		lea	eax, [esp+1Ch+var_10]
		xor	esi, esi
		push	edi
		push	eax
		call	sub_100290C0
		mov	edi, [esp+24h+arg_0]
		add	esp, 4
		test	eax, eax
		jle	loc_10032517
		jmp	short loc_10032490
; ---------------------------------------------------------------------------
		align 10h

loc_10032490:				; CODE XREF: sub_10032430+58j
					; sub_10032430+E1j
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10029A50
		add	esp, 4
		test	eax, eax
		jz	short loc_100324F2
		mov	eax, [esp+20h+var_4]
		lea	ecx, ds:0FFFFFFFFh[ebx*2]
		mov	al, [eax]
		and	al, cl
		movsx	ecx, al
		mov	[esi+edi], al
		cmp	ecx, ebx
		jl	short loc_100324C3
		mov	cl, bl
		add	cl, cl
		sub	al, cl
		mov	[esi+edi], al

loc_100324C3:				; CODE XREF: sub_10032430+88j
		mov	al, [esi+edi]
		lea	ecx, [esp+20h+var_10]
		test	al, al
		movsx	eax, al
		push	ecx
		js	short loc_100324E0
		push	eax
		mov	eax, ecx
		push	eax
		call	sub_1002A600
		add	esp, 0Ch
		jmp	short loc_100324F6
; ---------------------------------------------------------------------------

loc_100324E0:				; CODE XREF: sub_10032430+A0j
		neg	eax
		push	eax
		lea	eax, [esp+28h+var_10]
		push	eax
		call	sub_10028DB0
		add	esp, 0Ch
		jmp	short loc_100324F6
; ---------------------------------------------------------------------------

loc_100324F2:				; CODE XREF: sub_10032430+6Fj
		mov	byte ptr [esi+edi], 0

loc_100324F6:				; CODE XREF: sub_10032430+AEj
					; sub_10032430+C0j
		lea	eax, [esp+20h+var_10]
		push	eax
		push	eax
		call	sub_100293E0
		lea	eax, [esp+28h+var_10]
		inc	esi
		push	eax
		call	sub_100290C0
		add	esp, 0Ch
		test	eax, eax
		jg	loc_10032490

loc_10032517:				; CODE XREF: sub_10032430+52j
		mov	ecx, [esp+20h+arg_4]
		inc	ecx
		cmp	esi, ecx
		jge	short loc_10032534
		sub	ecx, esi
		add	edi, esi
		mov	edx, ecx
		xor	eax, eax
		shr	ecx, 2
		rep stosd
		mov	ecx, edx
		and	ecx, 3
		rep stosb

loc_10032534:				; CODE XREF: sub_10032430+EEj
		pop	edi
		pop	esi

loc_10032536:				; CODE XREF: sub_10032430+35j
		lea	eax, [esp+18h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10032430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032550	proc near		; CODE XREF: sub_10032AB0+386p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	edi
		mov	edi, [esp+14h+arg_28]
		push	ebx
		push	[esp+18h+arg_4]
		lea	eax, [edi+30h]
		mov	[esp+1Ch+arg_28], eax
		lea	ebp, [edi+20h]
		lea	eax, [edi+50h]
		push	esi
		mov	[esp+20h+var_4], eax
		call	sub_10031950
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100325F6
		mov	edi, [esp+14h+arg_2C]
		mov	ebx, [esp+14h+arg_20]
		push	edi
		push	ebx
		push	[esp+1Ch+arg_1C]
		push	[esp+20h+arg_18]
		push	[esp+24h+arg_14]
		push	[esp+28h+arg_10]
		call	sub_100313E0
		add	esp, 18h
		test	eax, eax
		js	loc_10032876
		mov	eax, [edi+4]
		mov	esi, [esp+14h+arg_24]
		push	eax
		push	esi
		mov	eax, [eax+3Ch]
		push	ebx
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032876
		mov	eax, [edi+4]
		push	eax
		push	esi
		push	esi
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032876
		mov	ecx, [edi+4]
		lea	eax, [edi+0Ch]
		push	ecx
		push	esi
		push	eax
		mov	eax, [ecx+38h]
		push	esi
		call	eax
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100325F6:				; CODE XREF: sub_10032550+32j
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		call	sub_10030BF0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10032662
		push	[esp+14h+arg_18]
		push	esi
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	loc_10032876
		push	[esp+14h+arg_1C]
		push	[esp+18h+arg_4]
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	loc_10032876
		push	[esp+14h+arg_20]
		push	ebx
		call	sub_100290F0
		add	esp, 8
		test	eax, eax
		js	loc_10032876
		push	[esp+14h+arg_24]
		push	[esp+18h+arg_C]
		call	sub_100290F0
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10032662:				; CODE XREF: sub_10032550+B8j
		mov	esi, [esp+14h+arg_2C]
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	ebx
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+10h]
		push	eax
		push	ecx
		push	ebx
		mov	eax, [eax+38h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	[esp+1Ch+arg_10]
		mov	eax, [eax+38h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+10h]
		push	eax
		push	ecx
		push	[esp+1Ch+arg_14]
		mov	eax, [eax+38h]
		push	ecx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_0]
		mov	eax, [eax+30h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+30h]
		push	eax
		push	ecx
		push	[esp+1Ch+arg_4]
		mov	eax, [eax+30h]
		lea	ecx, [edi+10h]
		push	ecx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+40h]
		push	eax
		push	ecx
		push	ebp
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+50h]
		push	eax
		push	ecx
		lea	ecx, [edi+40h]
		mov	eax, [eax+38h]
		push	ecx
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		push	eax
		push	[esp+18h+arg_20]
		mov	eax, [eax+38h]
		push	ebp
		push	ebx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+40h]
		push	eax
		push	ebp
		push	ecx
		push	[esp+20h+arg_0]
		mov	eax, [eax+38h]
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+30h]
		push	eax
		push	edi
		push	ecx
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		mov	ebx, [esp+14h+arg_18]
		push	eax
		push	ebx
		mov	eax, [eax+28h]
		push	ebp
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+50h]
		push	eax
		push	ebx
		push	ebx
		mov	eax, [eax+28h]
		push	ecx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		push	eax
		push	ebx
		push	ebx
		mov	eax, [eax+30h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		lea	ecx, [edi+50h]
		push	eax
		push	ecx
		push	ecx
		push	[esp+20h+arg_4]
		mov	eax, [eax+38h]
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032876
		mov	eax, [esi+4]
		mov	edi, [esp+14h+arg_1C]
		push	eax
		push	edi
		mov	eax, [eax+30h]
		push	ebx
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032876
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	edi
		push	[esp+20h+arg_28]
		mov	eax, [eax+38h]
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032876
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	[esp+1Ch+var_4]
		mov	eax, [eax+30h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032876
		mov	eax, [esi+4]
		mov	edi, [esp+14h+arg_24]
		push	eax
		push	edi
		push	[esp+1Ch+arg_20]
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10032876
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	edi
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10032876
		mov	ecx, [esi+4]
		lea	eax, [esi+0Ch]
		push	ecx
		push	edi
		push	eax
		mov	eax, [ecx+38h]
		push	edi
		call	eax
		add	esp, 10h

loc_10032876:				; CODE XREF: sub_10032550+58j
					; sub_10032550+72j ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10032550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032880	proc near		; CODE XREF: sub_10032AB0+331p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_20]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		lea	eax, [edi+20h]
		push	[esp+14h+arg_0]
		lea	ebp, [edi+10h]
		mov	[esp+18h+arg_20], eax
		lea	ebx, [edi+30h]
		call	sub_10031950
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100328C4
		push	[esp+0Ch+arg_18]
		push	[esp+10h+arg_14]
		push	[esp+14h+arg_10]
		call	sub_10031AF0
		add	esp, 0Ch
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100328C4:				; CODE XREF: sub_10032880+2Aj
		push	esi
		mov	esi, [esp+10h+arg_24]
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	[esp+18h+arg_0]
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		lea	ecx, [edi+20h]
		push	eax
		push	ecx
		push	edi
		mov	eax, [eax+28h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		lea	ecx, [edi+20h]
		push	eax
		push	edi
		push	ecx
		mov	eax, [eax+28h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		lea	ecx, [edi+20h]
		push	eax
		push	ecx
		push	[esp+18h+arg_C]
		mov	eax, [eax+28h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	ebx
		push	[esp+18h+arg_8]
		mov	eax, [eax+38h]
		push	[esp+1Ch+arg_4]
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	[esp+14h+arg_18]
		mov	eax, [eax+28h]
		push	ebx
		push	ebx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	[esp+18h+arg_4]
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	edi
		mov	eax, [eax+28h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	ebp
		push	edi
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	ebp
		push	ebp
		mov	eax, [eax+28h]
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	ebx
		push	edi
		push	[esp+1Ch+arg_0]
		mov	eax, [eax+38h]
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	ebx
		push	ebx
		mov	eax, [eax+28h]
		push	ebx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		mov	edi, [esp+10h+arg_10]
		push	eax
		push	edi
		push	[esp+18h+arg_20]
		mov	eax, [eax+3Ch]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	ebx
		mov	eax, [eax+30h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	ebx
		mov	eax, [eax+30h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	ebx
		push	edi
		mov	eax, [eax+30h]
		push	ebx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032AA4
		mov	eax, [esi+4]
		mov	edi, [esp+10h+arg_14]
		push	eax
		push	edi
		push	[esp+18h+arg_20]
		mov	eax, [eax+38h]
		push	ebx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	ebp
		mov	eax, [eax+30h]
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032AA4
		mov	eax, [esi+4]
		mov	edi, [esp+10h+arg_1C]
		push	eax
		push	edi
		mov	eax, [eax+38h]
		push	ebp
		push	[esp+1Ch+arg_C]
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_10032AA4
		mov	eax, [esi+4]
		push	eax
		push	edi
		push	edi
		mov	eax, [eax+28h]
		push	edi
		call	eax
		add	esp, 10h

loc_10032AA4:				; CODE XREF: sub_10032880+5Cj
					; sub_10032880+76j ...
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_10032880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032AB0	proc near		; DATA XREF: sub_1002E1D0+B5o
					; sub_1002E2C0+C6o

var_2BC		= dword	ptr -2BCh
var_2B8		= dword	ptr -2B8h
var_2B4		= byte ptr -2B4h
var_2A8		= dword	ptr -2A8h
var_2A4		= dword	ptr -2A4h
var_2A0		= dword	ptr -2A0h
var_29C		= dword	ptr -29Ch
var_298		= dword	ptr -298h
var_294		= byte ptr -294h
var_288		= dword	ptr -288h
var_284		= byte ptr -284h
var_278		= dword	ptr -278h
var_274		= byte ptr -274h
var_268		= dword	ptr -268h
var_264		= byte ptr -264h
var_258		= dword	ptr -258h
var_248		= dword	ptr -248h
var_238		= dword	ptr -238h
var_228		= dword	ptr -228h
var_218		= dword	ptr -218h
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F4		= byte ptr -1F4h
var_1E8		= byte ptr -1E8h
var_104		= byte ptr -104h
var_F4		= byte ptr -0F4h
var_E4		= byte ptr -0E4h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 2BCh
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2BCh+var_4], eax
		mov	eax, [esp+2BCh+arg_C]
		mov	ecx, 10h
		mov	edx, [esp+2BCh+arg_4]
		push	ebx
		mov	ebx, [esp+2C0h+arg_8]
		push	ebp
		mov	ebp, [esp+2C4h+arg_14]
		mov	[esp+2C4h+var_29C], eax
		mov	eax, [esp+2C4h+arg_10]
		push	esi
		mov	esi, [esp+2C8h+arg_0]
		mov	[esp+2C8h+var_298], eax
		lea	eax, [esp+2C8h+var_1E8]
		mov	[esp+2C8h+var_2A4], esi
		mov	[esp+2C8h+var_2BC], edx
		mov	[esp+2C8h+var_2A0], ebx
		mov	[esp+2C8h+var_2B8], 0
		mov	[esp+2C8h+var_2A8], 0
		mov	[esp+2C8h+var_288], 0
		mov	[esp+2C8h+var_268], 0
		mov	[esp+2C8h+var_278], 0
		lea	esp, [esp+0]

loc_10032B40:				; CODE XREF: sub_10032AB0+A2j
		mov	dword ptr [eax-10h], 0
		lea	eax, [eax+20h]
		mov	dword ptr [eax-20h], 0
		dec	ecx
		jnz	short loc_10032B40
		mov	[esp+2C8h+var_258], ecx
		mov	[esp+2C8h+var_248], ecx
		mov	[esp+2C8h+var_238], ecx
		mov	[esp+2C8h+var_228], ecx
		mov	[esp+2C8h+var_218], ecx
		mov	[esp+2C8h+var_208], ecx
		test	ebp, ebp
		jz	loc_10032EE8
		test	esi, esi
		jz	loc_10032EE8
		test	edx, edx
		jz	loc_10032EE8
		test	ebx, ebx
		jz	loc_10032EE8
		lea	eax, [esp+2C8h+var_274]
		push	edi
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10032E55
		lea	eax, [esp+2CCh+var_284]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10032E55
		lea	eax, [esp+2CCh+var_2B4]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10032E55
		lea	eax, [esp+2CCh+var_294]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10032E55
		xor	ebx, ebx
		lea	edi, [esp+2CCh+var_1F4]

loc_10032C01:				; CODE XREF: sub_10032AB0+181j
		lea	eax, [edi-10h]
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10032E55
		push	edi
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10032E55
		inc	ebx
		add	edi, 20h
		cmp	ebx, 10h
		jl	short loc_10032C01
		xor	edi, edi
		lea	ebx, [esp+2CCh+var_264]
		lea	esp, [esp+0]

loc_10032C40:				; CODE XREF: sub_10032AB0+1AAj
		push	ebx
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10032E55
		inc	edi
		add	ebx, 10h
		cmp	edi, 6
		jl	short loc_10032C40
		lea	eax, [esp+2CCh+var_104]
		push	eax
		push	[esp+2D0h+var_2BC]
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10032E55
		lea	eax, [esp+2CCh+var_F4]
		push	eax
		push	[esp+2D0h+var_2A0]
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10032E55
		push	ebp
		lea	eax, [esp+2D0h+var_284]
		push	eax
		lea	eax, [esp+2D4h+var_274]
		push	eax
		lea	eax, [esp+2D8h+var_F4]
		push	eax
		lea	eax, [esp+2DCh+var_104]
		push	eax
		mov	eax, [ebp+68h]
		call	eax
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_10032E55
		mov	ebx, 8
		lea	edi, [esp+2CCh+var_E4]

loc_10032CD1:				; CODE XREF: sub_10032AB0+252j
		push	ebp
		lea	eax, [edi+10h]
		push	eax
		push	edi
		lea	eax, [esp+2D8h+var_284]
		push	eax
		lea	eax, [esp+2DCh+var_274]
		push	eax
		lea	eax, [edi-10h]
		push	eax
		lea	eax, [edi-20h]
		push	eax
		mov	eax, [ebp+60h]
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10032E55
		inc	ebx
		add	edi, 20h
		cmp	ebx, 0Fh
		jl	short loc_10032CD1
		mov	[esp+2CCh+var_2BC], 0
		lea	edi, [esp+2CCh+var_1F4]
		lea	ebx, [esp+2CCh+var_14]
		lea	ebx, [ebx+0]

loc_10032D20:				; CODE XREF: sub_10032AB0+2B4j
		lea	eax, [edi-10h]
		push	eax
		lea	eax, [ebx-10h]
		push	eax
		call	sub_100290F0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10032E55
		mov	eax, [ebp+4]
		push	eax
		push	edi
		push	ebx
		mov	eax, [eax+2Ch]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10032E55
		mov	eax, [esp+2CCh+var_2BC]
		add	edi, 20h
		inc	eax
		sub	ebx, 20h
		mov	[esp+2CCh+var_2BC], eax
		cmp	eax, 8
		jl	short loc_10032D20
		mov	edi, [esp+2CCh+var_298]
		lea	eax, [esp+2CCh+var_2B4]
		mov	ebx, [esp+2CCh+var_29C]
		push	eax
		push	edi
		push	ebx
		call	sub_10031AF0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10032E55
		lea	eax, [ebp+4Ch]
		push	eax
		call	sub_10028CD0
		mov	esi, eax
		lea	ecx, [esi+1]
		push	ecx		; size_t
		call	ds:malloc
		add	esp, 8
		mov	[esp+2CCh+var_2B8], eax
		test	eax, eax
		jnz	short loc_10032DAF
		lea	esi, [eax-2]
		jmp	loc_10032E55
; ---------------------------------------------------------------------------

loc_10032DAF:				; CODE XREF: sub_10032AB0+2F5j
		push	5
		push	[esp+2D0h+var_2A4]
		push	esi
		push	eax
		call	sub_10032430
		add	esp, 10h
		test	esi, esi
		js	short loc_10032E41

loc_10032DC3:				; CODE XREF: sub_10032AB0+38Fj
		push	ebp
		lea	eax, [esp+2D0h+var_264]
		push	eax
		lea	eax, [esp+2D4h+var_294]
		push	eax
		lea	eax, [esp+2D8h+var_2B4]
		push	eax
		push	edi
		push	ebx
		lea	eax, [esp+2E4h+var_294]
		push	eax
		lea	eax, [esp+2E8h+var_2B4]
		push	eax
		push	edi
		push	ebx
		call	sub_10032880
		mov	eax, [esp+2F4h+var_2B8]
		add	esp, 28h
		mov	al, [esi+eax]
		test	al, al
		jz	short loc_10032E3E
		movsx	eax, al
		add	eax, 0Fh
		cdq
		sub	eax, edx
		mov	ecx, eax
		lea	eax, [esp+2CCh+var_264]
		push	ebp
		push	eax
		lea	eax, [esp+2D4h+var_294]
		sar	ecx, 1
		push	eax
		lea	eax, [esp+2D8h+var_2B4]
		shl	ecx, 5
		push	eax
		push	edi
		push	ebx
		lea	eax, [esp+2E4h+var_1F4]
		add	eax, ecx
		push	eax
		lea	eax, [esp+2E8h+var_204]
		add	eax, ecx
		push	eax
		lea	eax, [esp+2ECh+var_294]
		push	eax
		lea	eax, [esp+2F0h+var_2B4]
		push	eax
		push	edi
		push	ebx
		call	sub_10032550
		add	esp, 30h

loc_10032E3E:				; CODE XREF: sub_10032AB0+342j
		dec	esi
		jns	short loc_10032DC3

loc_10032E41:				; CODE XREF: sub_10032AB0+311j
		push	ebp
		push	edi
		push	ebx
		lea	eax, [esp+2D8h+var_2B4]
		push	eax
		push	edi
		push	ebx
		call	sub_10031960
		add	esp, 18h
		mov	esi, eax

loc_10032E55:				; CODE XREF: sub_10032AB0+FDj
					; sub_10032AB0+114j ...
		lea	edi, [esp+2CCh+var_264]
		mov	ebx, 6
		mov	edi, edi

loc_10032E60:				; CODE XREF: sub_10032AB0+3BDj
		push	edi
		call	sub_10028F00
		add	esp, 4
		add	edi, 10h
		dec	ebx
		jnz	short loc_10032E60
		lea	edi, [esp+2CCh+var_1F4]
		mov	ebx, 10h
		jmp	short loc_10032E80
; ---------------------------------------------------------------------------
		align 10h

loc_10032E80:				; CODE XREF: sub_10032AB0+3CBj
					; sub_10032AB0+3E6j
		lea	eax, [edi-10h]
		push	eax
		call	sub_10028F00
		push	edi
		call	sub_10028F00
		add	esp, 8
		add	edi, 20h
		dec	ebx
		jnz	short loc_10032E80
		lea	eax, [esp+2CCh+var_274]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+2D0h+var_284]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+2D4h+var_2B4]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+2D8h+var_294]
		push	eax
		call	sub_10028F00
		push	[esp+2DCh+var_2B8] ; void *
		call	ds:free
		add	esp, 14h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+2BCh+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2BCh
		retn
; ---------------------------------------------------------------------------

loc_10032EE8:				; CODE XREF: sub_10032AB0+CDj
					; sub_10032AB0+D5j ...
		mov	ecx, [esp+2C8h+var_4]
		mov	eax, 0FFFFFFFCh
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2BCh
		retn
sub_10032AB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032F10	proc near		; CODE XREF: .text:10033A60p
					; .text:10033A8Cp
					; DATA XREF: ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 4Ch
		push	ebx
		mov	ebx, [esp+50h+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	ebp, [ebx+8]
		push	ebx
		mov	[esp+60h+var_10], 0
		call	sub_10028CD0
		xor	ecx, ecx
		mov	[esp+60h+var_1C], 0
		xor	esi, esi
		mov	[esp+60h+var_28], 0
		xor	edx, edx
		mov	[esp+60h+var_24], 0
		xor	edi, edi
		mov	[esp+60h+var_20], ecx
		add	esp, 4
		mov	[esp+5Ch+var_2C], esi
		mov	[esp+5Ch+var_3C], edx
		mov	[esp+5Ch+var_38], edi
		mov	[esp+5Ch+var_34], ecx
		cmp	eax, 100h
		jge	short loc_10032F8E
		mov	eax, [esp+5Ch+arg_4]
		cmp	ebx, eax
		jnz	short loc_10032F7C
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_10032F7C:				; CODE XREF: sub_10032F10+60j
		push	eax
		push	ebx
		call	sub_100290F0
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_10032F8E:				; CODE XREF: sub_10032F10+58j
		cmp	eax, 200h
		jle	short loc_10032FB2
		push	[esp+5Ch+arg_4]
		mov	eax, [esp+60h+arg_8]
		add	eax, 4
		push	eax
		push	ebx
		call	sub_10029A70
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_10032FB2:				; CODE XREF: sub_10032F10+83j
		lea	eax, [ebp-9]	; switch 8 cases
		cmp	eax, 7
		ja	short loc_10033011 ; jumptable 10032FBA	default	case
		jmp	ds:off_10033A20[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10032FC1:				; CODE XREF: sub_10032F10+AAj
					; DATA XREF: .text:off_10033A20o
		mov	eax, [ebx+0Ch]	; jumptable 10032FBA case 16
		mov	eax, [eax+3Ch]
		mov	[esp+5Ch+var_34], eax

loc_10032FCB:				; CODE XREF: sub_10032F10+AAj
					; DATA XREF: .text:off_10033A20o
		mov	eax, [ebx+0Ch]	; jumptable 10032FBA case 15
		mov	edi, [eax+38h]
		mov	[esp+5Ch+var_38], edi

loc_10032FD5:				; CODE XREF: sub_10032F10+AAj
					; DATA XREF: .text:off_10033A20o
		mov	eax, [ebx+0Ch]	; jumptable 10032FBA case 14
		mov	edx, [eax+34h]
		mov	[esp+5Ch+var_3C], edx

loc_10032FDF:				; CODE XREF: sub_10032F10+AAj
					; DATA XREF: .text:off_10033A20o
		mov	eax, [ebx+0Ch]	; jumptable 10032FBA case 13
		mov	esi, [eax+30h]
		mov	[esp+5Ch+var_2C], esi

loc_10032FE9:				; CODE XREF: sub_10032F10+AAj
					; DATA XREF: .text:off_10033A20o
		mov	eax, [ebx+0Ch]	; jumptable 10032FBA case 12
		mov	ecx, [eax+2Ch]
		mov	[esp+5Ch+var_20], ecx

loc_10032FF3:				; CODE XREF: sub_10032F10+AAj
					; DATA XREF: .text:off_10033A20o
		mov	eax, [ebx+0Ch]	; jumptable 10032FBA case 11
		mov	eax, [eax+28h]
		mov	[esp+5Ch+var_24], eax

loc_10032FFD:				; CODE XREF: sub_10032F10+AAj
					; DATA XREF: .text:off_10033A20o
		mov	eax, [ebx+0Ch]	; jumptable 10032FBA case 10
		mov	eax, [eax+24h]
		mov	[esp+5Ch+var_28], eax

loc_10033007:				; CODE XREF: sub_10032F10+AAj
					; DATA XREF: .text:off_10033A20o
		mov	eax, [ebx+0Ch]	; jumptable 10032FBA case 9
		mov	eax, [eax+20h]
		mov	[esp+5Ch+var_1C], eax

loc_10033011:				; CODE XREF: sub_10032F10+A8j
		mov	ebx, [ebx+0Ch]	; jumptable 10032FBA default case
		mov	eax, [ebx+0Ch]
		lea	ebp, [eax+ecx]
		cmp	ebp, eax
		mov	[esp+5Ch+var_14], ebp
		sbb	ecx, ecx
		add	esi, [ebx+10h]
		neg	ecx
		cmp	esi, [ebx+10h]
		sbb	eax, eax
		add	esi, ecx
		neg	eax
		mov	[esp+5Ch+var_18], esi
		cmp	esi, ecx
		sbb	ecx, ecx
		add	edx, [ebx+14h]
		neg	ecx
		add	ecx, eax
		cmp	edx, [ebx+14h]
		sbb	eax, eax
		add	edx, ecx
		neg	eax
		mov	[esp+5Ch+var_30], edx
		cmp	edx, ecx
		sbb	ecx, ecx
		add	edi, [ebx+18h]
		neg	ecx
		add	ecx, eax
		cmp	edi, [ebx+18h]
		sbb	eax, eax
		add	edi, ecx
		neg	eax
		cmp	edi, ecx
		sbb	edx, edx
		neg	edx
		add	edx, eax
		mov	eax, [ebx+1Ch]
		mov	ebx, [esp+5Ch+var_34]
		add	ebx, eax
		cmp	ebx, eax
		sbb	ecx, ecx
		add	ebx, edx
		neg	ecx
		cmp	ebx, edx
		sbb	eax, eax
		add	ebp, [esp+5Ch+var_20]
		neg	eax
		add	eax, ecx
		cmp	ebp, [esp+5Ch+var_14]
		sbb	edx, edx
		add	esi, [esp+5Ch+var_2C]
		neg	edx
		cmp	esi, [esp+5Ch+var_18]
		sbb	ecx, ecx
		add	esi, edx
		neg	ecx
		mov	[esp+5Ch+var_14], esi
		cmp	esi, edx
		mov	esi, [esp+5Ch+var_3C]
		sbb	edx, edx
		add	esi, [esp+5Ch+var_30]
		neg	edx
		add	edx, ecx
		cmp	esi, [esp+5Ch+var_30]
		sbb	ecx, ecx
		add	esi, edx
		neg	ecx
		mov	[esp+5Ch+var_18], esi
		cmp	esi, edx
		mov	esi, [esp+5Ch+var_38]
		sbb	edx, edx
		add	esi, edi
		neg	edx
		add	edx, ecx
		cmp	esi, edi
		sbb	ecx, ecx
		add	esi, edx
		neg	ecx
		mov	[esp+5Ch+var_30], esi
		cmp	esi, edx
		sbb	esi, esi
		mov	edi, [esp+5Ch+var_34]
		neg	esi
		add	esi, ecx
		add	edi, ebx
		cmp	edi, ebx
		mov	ebx, [esp+5Ch+var_2C]
		sbb	edx, edx
		add	edi, esi
		neg	edx
		cmp	edi, esi
		mov	esi, [esp+5Ch+var_38]
		sbb	ecx, ecx
		add	ebx, ebp
		neg	ecx
		add	ecx, edx
		add	eax, ecx
		cmp	ebx, ebp
		mov	ebp, [esp+5Ch+var_3C]
		sbb	edx, edx
		add	ebp, [esp+5Ch+var_14]
		neg	edx
		cmp	ebp, [esp+5Ch+var_14]
		sbb	ecx, ecx
		add	ebp, edx
		neg	ecx
		cmp	ebp, edx
		sbb	edx, edx
		add	esi, [esp+5Ch+var_18]
		neg	edx
		add	edx, ecx
		cmp	esi, [esp+5Ch+var_18]
		sbb	ecx, ecx
		add	esi, edx
		neg	ecx
		mov	[esp+5Ch+var_14], esi
		cmp	esi, edx
		mov	edx, [esp+5Ch+var_34]
		sbb	esi, esi
		neg	esi
		add	esi, ecx
		mov	ecx, [esp+5Ch+var_30]
		add	edx, ecx
		cmp	edx, ecx
		mov	[esp+5Ch+var_30], edx
		mov	ecx, [esp+5Ch+var_30]
		sbb	edx, edx
		add	ecx, esi
		neg	edx
		mov	[esp+5Ch+var_30], ecx
		cmp	ecx, esi
		sbb	ecx, ecx
		neg	ecx
		add	ecx, edx
		mov	edx, [esp+5Ch+var_1C]
		add	edi, ecx
		cmp	edi, ecx
		mov	[esp+5Ch+var_18], edi
		sbb	ecx, ecx
		neg	ecx
		add	eax, ecx
		mov	ecx, [esp+5Ch+arg_0]
		mov	esi, [ecx+0Ch]
		add	edx, [esi]
		cmp	edx, [esi]
		mov	ecx, [esi+4]
		mov	esi, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_40], edx
		sbb	edx, edx
		add	esi, ecx
		neg	edx
		cmp	esi, ecx
		sbb	ecx, ecx
		add	esi, edx
		neg	ecx
		mov	[esp+5Ch+var_44], esi
		cmp	esi, edx
		mov	esi, [esp+5Ch+arg_0]
		sbb	edx, edx
		neg	edx
		add	edx, ecx
		mov	ecx, [esi+0Ch]
		mov	ecx, [ecx+8]
		mov	esi, [esp+5Ch+var_24]
		add	esi, ecx
		cmp	esi, ecx
		sbb	ecx, ecx
		add	esi, edx
		neg	ecx
		mov	[esp+5Ch+var_48], esi
		cmp	esi, edx
		mov	esi, [esp+5Ch+var_2C]
		sbb	edx, edx
		add	esi, ebx
		neg	edx
		add	edx, ecx
		cmp	esi, ebx
		mov	ebx, [esp+5Ch+var_3C]
		sbb	ecx, ecx
		add	esi, edx
		neg	ecx
		mov	[esp+5Ch+var_4C], esi
		cmp	esi, edx
		sbb	edx, edx
		add	ebx, ebp
		neg	edx
		add	edx, ecx
		cmp	ebx, ebp
		mov	ebp, [esp+5Ch+var_34]
		sbb	ecx, ecx
		add	ebx, edx
		neg	ecx
		mov	[esp+5Ch+var_C], ebx
		cmp	ebx, edx
		mov	ebx, [esp+5Ch+var_38]
		sbb	edx, edx
		add	ebx, [esp+5Ch+var_14]
		neg	edx
		add	edx, ecx
		cmp	ebx, [esp+5Ch+var_14]
		sbb	ecx, ecx
		add	ebx, edx
		neg	ecx
		mov	[esp+5Ch+var_14], ebx
		cmp	ebx, edx
		sbb	edx, edx
		neg	edx
		add	edx, ecx
		mov	ecx, [esp+5Ch+var_30]
		lea	ebx, [ecx+ebp]
		cmp	ebx, ecx
		sbb	ecx, ecx
		add	ebx, edx
		neg	ecx
		cmp	ebx, edx
		sbb	esi, esi
		add	edi, ebp
		neg	esi
		mov	ebp, [esp+5Ch+var_28]
		add	esi, ecx
		cmp	edi, [esp+5Ch+var_18]
		sbb	edx, edx
		add	edi, esi
		neg	edx
		cmp	edi, esi
		mov	esi, [esp+5Ch+var_38]
		sbb	ecx, ecx
		add	esi, ebx
		neg	ecx
		add	ecx, edx
		add	eax, ecx
		cmp	esi, ebx
		sbb	ecx, ecx
		neg	ecx
		add	edi, ecx
		cmp	edi, ecx
		sbb	ecx, ecx
		add	ebp, [esp+5Ch+var_40]
		neg	ecx
		add	eax, ecx
		cmp	ebp, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_30], eax
		sbb	edx, edx
		mov	ebx, [esp+5Ch+var_24]
		neg	edx
		add	ebx, [esp+5Ch+var_44]
		cmp	ebx, [esp+5Ch+var_44]
		mov	eax, [esp+5Ch+var_20]
		sbb	ecx, ecx
		add	ebx, edx
		neg	ecx
		cmp	ebx, edx
		sbb	edx, edx
		add	eax, [esp+5Ch+var_48]
		neg	edx
		add	edx, ecx
		cmp	eax, [esp+5Ch+var_48]
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+5Ch+var_18], eax
		cmp	eax, edx
		mov	eax, [esp+5Ch+var_3C]
		sbb	edx, edx
		add	eax, [esp+5Ch+var_4C]
		neg	edx
		add	edx, ecx
		cmp	eax, [esp+5Ch+var_4C]
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+5Ch+var_48], eax
		cmp	eax, edx
		mov	eax, [esp+5Ch+var_38]
		sbb	edx, edx
		add	eax, [esp+5Ch+var_C]
		neg	edx
		add	edx, ecx
		cmp	eax, [esp+5Ch+var_C]
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+5Ch+var_C], eax
		cmp	eax, edx
		mov	eax, [esp+5Ch+var_34]
		sbb	edx, edx
		add	eax, [esp+5Ch+var_14]
		neg	edx
		add	edx, ecx
		cmp	eax, [esp+5Ch+var_14]
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+5Ch+var_14], eax
		cmp	eax, edx
		mov	eax, [esp+5Ch+var_3C]
		sbb	edx, edx
		add	eax, esi
		neg	edx
		add	edx, ecx
		cmp	eax, esi
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	[esp+5Ch+var_8], eax
		cmp	eax, edx
		mov	eax, [esp+5Ch+var_1C]
		sbb	esi, esi
		add	eax, edi
		neg	esi
		add	esi, ecx
		cmp	eax, edi
		sbb	edx, edx
		add	eax, esi
		neg	edx
		mov	[esp+5Ch+var_4], eax
		cmp	eax, esi
		mov	eax, [esp+5Ch+var_30]
		sbb	ecx, ecx
		neg	ecx
		add	ecx, edx
		add	eax, ecx
		mov	ecx, ebp
		sub	ecx, [esp+5Ch+var_20]
		mov	edx, ebx
		mov	[esp+5Ch+var_40], ecx
		sub	edx, [esp+5Ch+var_2C]
		cmp	ebx, edx
		mov	[esp+5Ch+var_4C], edx
		sbb	edi, edi
		neg	edi
		cmp	ecx, ebp
		jbe	short loc_1003336A
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_4C], edx
		test	ecx, ecx
		jnz	short loc_1003336A
		inc	edi

loc_1003336A:				; CODE XREF: sub_10032F10+44Cj
					; sub_10032F10+457j
		mov	edx, [esp+5Ch+var_18]
		sub	edx, [esp+5Ch+var_3C]
		cmp	[esp+5Ch+var_18], edx
		mov	[esp+5Ch+var_44], edx
		sbb	esi, esi
		neg	esi
		test	edi, edi
		jz	short loc_1003338E
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_44], edx
		test	ecx, ecx
		jnz	short loc_1003338E
		inc	esi

loc_1003338E:				; CODE XREF: sub_10032F10+470j
					; sub_10032F10+47Bj
		mov	ecx, [esp+5Ch+var_48]
		xor	edx, edx
		mov	ebx, ecx
		test	esi, esi
		jz	short loc_100333A6
		lea	ebx, [ecx-1]
		test	ecx, ecx
		jnz	short loc_100333A6
		mov	edx, 1

loc_100333A6:				; CODE XREF: sub_10032F10+488j
					; sub_10032F10+48Fj
		mov	esi, [esp+5Ch+var_C]
		xor	edi, edi
		mov	[esp+5Ch+var_48], esi
		test	edx, edx
		jz	short loc_100333C4
		lea	ecx, [esi-1]
		mov	[esp+5Ch+var_48], ecx
		test	esi, esi
		jnz	short loc_100333C4
		mov	edi, 1

loc_100333C4:				; CODE XREF: sub_10032F10+4A2j
					; sub_10032F10+4ADj
		mov	edx, [esp+5Ch+var_14]
		xor	ecx, ecx
		mov	esi, edx
		test	edi, edi
		jz	short loc_100333DA
		lea	esi, [edx-1]
		test	edx, edx
		jnz	short loc_100333DA
		lea	ecx, [edx+1]

loc_100333DA:				; CODE XREF: sub_10032F10+4BEj
					; sub_10032F10+4C5j
		mov	ebp, [esp+5Ch+var_8]
		sub	ebp, [esp+5Ch+var_1C]
		cmp	[esp+5Ch+var_8], ebp
		sbb	edx, edx
		neg	edx
		test	ecx, ecx
		jz	short loc_100333F6
		mov	ecx, ebp
		dec	ebp
		test	ecx, ecx
		jnz	short loc_100333F6
		inc	edx

loc_100333F6:				; CODE XREF: sub_10032F10+4DCj
					; sub_10032F10+4E3j
		mov	edi, [esp+5Ch+var_4]
		sub	edi, [esp+5Ch+var_24]
		cmp	[esp+5Ch+var_4], edi
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+5Ch+var_14], ecx
		test	edx, edx
		jz	short loc_1003341A
		mov	ecx, edi
		dec	edi
		test	ecx, ecx
		mov	ecx, [esp+5Ch+var_14]
		jnz	short loc_1003341A
		inc	ecx

loc_1003341A:				; CODE XREF: sub_10032F10+4FCj
					; sub_10032F10+507j
		sub	eax, ecx
		mov	ecx, [esp+5Ch+var_40]
		mov	edx, ecx
		mov	[esp+5Ch+var_30], eax
		sub	ecx, [esp+5Ch+var_2C]
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_40], ecx
		mov	ecx, [esp+5Ch+var_4C]
		sub	[esp+5Ch+var_4C], eax
		cmp	ecx, [esp+5Ch+var_4C]
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+5Ch+var_18], ecx
		cmp	[esp+5Ch+var_40], edx
		jbe	short loc_1003345F
		mov	edx, [esp+5Ch+var_4C]
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_4C], edx
		test	ecx, ecx
		jnz	short loc_1003345F
		inc	[esp+5Ch+var_18]

loc_1003345F:				; CODE XREF: sub_10032F10+53Aj
					; sub_10032F10+549j
		mov	edx, [esp+5Ch+var_44]
		mov	ecx, edx
		sub	edx, [esp+5Ch+var_38]
		cmp	ecx, edx
		mov	[esp+5Ch+var_44], edx
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+5Ch+var_18], 0
		mov	[esp+5Ch+var_14], ecx
		jz	short loc_1003348D
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_44], edx
		test	ecx, ecx
		jnz	short loc_1003348D
		inc	[esp+5Ch+var_14]

loc_1003348D:				; CODE XREF: sub_10032F10+56Cj
					; sub_10032F10+577j
		mov	ecx, ebx
		sub	ebx, [esp+5Ch+var_34]
		cmp	ecx, ebx
		sbb	edx, edx
		neg	edx
		cmp	[esp+5Ch+var_14], 0
		jz	short loc_100334A8
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_100334A8
		inc	edx

loc_100334A8:				; CODE XREF: sub_10032F10+58Ej
					; sub_10032F10+595j
		xor	ecx, ecx
		test	edx, edx
		jz	short loc_100334C6
		mov	edx, [esp+5Ch+var_48]
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_48], edx
		test	ecx, ecx
		jnz	short loc_100334C4
		mov	ecx, 1
		jmp	short loc_100334C6
; ---------------------------------------------------------------------------

loc_100334C4:				; CODE XREF: sub_10032F10+5ABj
		xor	ecx, ecx

loc_100334C6:				; CODE XREF: sub_10032F10+59Cj
					; sub_10032F10+5B2j
		mov	[esp+5Ch+var_14], 0
		test	ecx, ecx
		jz	short loc_100334E1
		mov	ecx, esi
		dec	esi
		test	ecx, ecx
		jnz	short loc_100334E1
		mov	[esp+5Ch+var_14], 1

loc_100334E1:				; CODE XREF: sub_10032F10+5C0j
					; sub_10032F10+5C7j
		mov	ecx, ebp
		sub	ebp, [esp+5Ch+var_28]
		cmp	ecx, ebp
		sbb	edx, edx
		neg	edx
		cmp	[esp+5Ch+var_14], 0
		jz	short loc_100334FC
		mov	ecx, ebp
		dec	ebp
		test	ecx, ecx
		jnz	short loc_100334FC
		inc	edx

loc_100334FC:				; CODE XREF: sub_10032F10+5E2j
					; sub_10032F10+5E9j
		mov	ecx, edi
		sub	edi, [esp+5Ch+var_20]
		cmp	ecx, edi
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+5Ch+var_14], ecx
		test	edx, edx
		jz	short loc_1003351C
		mov	ecx, edi
		dec	edi
		test	ecx, ecx
		mov	ecx, [esp+5Ch+var_14]
		jnz	short loc_1003351C
		inc	ecx

loc_1003351C:				; CODE XREF: sub_10032F10+5FEj
					; sub_10032F10+609j
		sub	[esp+5Ch+var_30], ecx
		mov	ecx, [esp+5Ch+var_40]
		mov	edx, ecx
		sub	ecx, [esp+5Ch+var_3C]
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_40], ecx
		mov	ecx, [esp+5Ch+var_4C]
		sub	[esp+5Ch+var_4C], eax
		cmp	ecx, [esp+5Ch+var_4C]
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+5Ch+var_14], ecx
		cmp	[esp+5Ch+var_40], edx
		jbe	short loc_1003355F
		mov	edx, [esp+5Ch+var_4C]
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_4C], edx
		test	ecx, ecx
		jnz	short loc_1003355F
		inc	[esp+5Ch+var_14]

loc_1003355F:				; CODE XREF: sub_10032F10+63Aj
					; sub_10032F10+649j
		mov	edx, [esp+5Ch+var_44]
		mov	ecx, edx
		sub	edx, [esp+5Ch+var_34]
		cmp	ecx, edx
		mov	[esp+5Ch+var_44], edx
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+5Ch+var_14], 0
		mov	[esp+5Ch+var_18], ecx
		jz	short loc_1003358D
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_44], edx
		test	ecx, ecx
		jnz	short loc_1003358D
		inc	[esp+5Ch+var_18]

loc_1003358D:				; CODE XREF: sub_10032F10+66Cj
					; sub_10032F10+677j
		mov	ecx, ebx
		sub	ebx, [esp+5Ch+var_1C]
		cmp	ecx, ebx
		sbb	edx, edx
		neg	edx
		cmp	[esp+5Ch+var_18], 0
		mov	[esp+5Ch+var_1C], edx
		jz	short loc_100335B0
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_100335B0
		inc	edx
		mov	[esp+5Ch+var_1C], edx

loc_100335B0:				; CODE XREF: sub_10032F10+692j
					; sub_10032F10+699j
		mov	edx, [esp+5Ch+var_48]
		mov	ecx, edx
		sub	edx, [esp+5Ch+var_28]
		cmp	ecx, edx
		mov	[esp+5Ch+var_48], edx
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+5Ch+var_1C], 0
		mov	[esp+5Ch+var_14], ecx
		jz	short loc_100335DE
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_48], edx
		test	ecx, ecx
		jnz	short loc_100335DE
		inc	[esp+5Ch+var_14]

loc_100335DE:				; CODE XREF: sub_10032F10+6BDj
					; sub_10032F10+6C8j
		mov	ecx, esi
		sub	esi, [esp+5Ch+var_24]
		cmp	ecx, esi
		sbb	edx, edx
		neg	edx
		cmp	[esp+5Ch+var_14], 0
		jz	short loc_100335F9
		mov	ecx, esi
		dec	esi
		test	ecx, ecx
		jnz	short loc_100335F9
		inc	edx

loc_100335F9:				; CODE XREF: sub_10032F10+6DFj
					; sub_10032F10+6E6j
		mov	[esp+5Ch+var_14], 0
		test	edx, edx
		jz	short loc_10033614
		mov	ecx, ebp
		dec	ebp
		test	ecx, ecx
		jnz	short loc_10033614
		mov	[esp+5Ch+var_14], 1

loc_10033614:				; CODE XREF: sub_10032F10+6F3j
					; sub_10032F10+6FAj
		mov	ecx, edi
		sub	edi, [esp+5Ch+var_2C]
		cmp	ecx, edi
		sbb	edx, edx
		neg	edx
		cmp	[esp+5Ch+var_14], 0
		jz	short loc_1003362F
		mov	ecx, edi
		dec	edi
		test	ecx, ecx
		jnz	short loc_1003362F
		inc	edx

loc_1003362F:				; CODE XREF: sub_10032F10+715j
					; sub_10032F10+71Cj
		sub	[esp+5Ch+var_30], edx
		mov	ecx, [esp+5Ch+var_40]
		mov	edx, ecx
		sub	ecx, [esp+5Ch+var_38]
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_40], ecx
		mov	ecx, [esp+5Ch+var_4C]
		sub	[esp+5Ch+var_4C], eax
		cmp	ecx, [esp+5Ch+var_4C]
		mov	eax, [esp+5Ch+var_30]
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+5Ch+var_14], ecx
		cmp	[esp+5Ch+var_40], edx
		jbe	short loc_10033677
		mov	edx, [esp+5Ch+var_4C]
		mov	ecx, edx
		dec	edx
		test	ecx, ecx
		mov	ecx, [esp+5Ch+var_14]
		mov	[esp+5Ch+var_4C], edx
		jnz	short loc_10033677
		inc	ecx

loc_10033677:				; CODE XREF: sub_10032F10+751j
					; sub_10032F10+764j
		mov	[esp+5Ch+var_14], 0
		test	ecx, ecx
		jz	short loc_1003369A
		mov	edx, [esp+5Ch+var_44]
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_44], edx
		test	ecx, ecx
		jnz	short loc_1003369A
		mov	[esp+5Ch+var_14], 1

loc_1003369A:				; CODE XREF: sub_10032F10+771j
					; sub_10032F10+780j
		mov	ecx, ebx
		sub	ebx, [esp+5Ch+var_28]
		cmp	ecx, ebx
		sbb	edx, edx
		neg	edx
		cmp	[esp+5Ch+var_14], 0
		mov	[esp+5Ch+var_18], edx
		jz	short loc_100336BD
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_100336BD
		inc	edx
		mov	[esp+5Ch+var_18], edx

loc_100336BD:				; CODE XREF: sub_10032F10+79Fj
					; sub_10032F10+7A6j
		mov	edx, [esp+5Ch+var_48]
		mov	ecx, edx
		sub	edx, [esp+5Ch+var_24]
		cmp	ecx, edx
		mov	[esp+5Ch+var_48], edx
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+5Ch+var_18], 0
		mov	[esp+5Ch+var_14], ecx
		jz	short loc_100336EB
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_48], edx
		test	ecx, ecx
		jnz	short loc_100336EB
		inc	[esp+5Ch+var_14]

loc_100336EB:				; CODE XREF: sub_10032F10+7CAj
					; sub_10032F10+7D5j
		mov	ecx, esi
		sub	esi, [esp+5Ch+var_20]
		cmp	ecx, esi
		mov	[esp+5Ch+var_1C], esi
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+5Ch+var_14], 0
		mov	[esp+5Ch+var_18], ecx
		jz	short loc_10033716
		mov	ecx, esi
		dec	esi
		test	ecx, ecx
		mov	[esp+5Ch+var_1C], esi
		mov	ecx, [esp+5Ch+var_18]
		jnz	short loc_10033716
		inc	ecx

loc_10033716:				; CODE XREF: sub_10032F10+7F4j
					; sub_10032F10+803j
		mov	[esp+5Ch+var_14], 0
		test	ecx, ecx
		jz	short loc_10033731
		mov	ecx, ebp
		dec	ebp
		test	ecx, ecx
		jnz	short loc_10033731
		mov	[esp+5Ch+var_14], 1

loc_10033731:				; CODE XREF: sub_10032F10+810j
					; sub_10032F10+817j
		mov	ecx, edi
		sub	edi, [esp+5Ch+var_3C]
		cmp	ecx, edi
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+5Ch+var_14], 0
		mov	[esp+5Ch+var_18], ecx
		jz	short loc_10033754
		mov	ecx, edi
		dec	edi
		test	ecx, ecx
		mov	ecx, [esp+5Ch+var_18]
		jnz	short loc_10033754
		inc	ecx

loc_10033754:				; CODE XREF: sub_10032F10+836j
					; sub_10032F10+841j
		sub	eax, ecx
		test	eax, eax
		jle	loc_10033816
		mov	edi, edi

loc_10033760:				; CODE XREF: sub_10032F10+8FCj
		mov	edx, [esp+5Ch+var_40]
		mov	ecx, edx
		add	edx, eax
		cmp	edx, ecx
		mov	[esp+5Ch+var_40], edx
		mov	edx, [esp+5Ch+var_4C]
		sbb	ecx, ecx
		neg	ecx
		add	edx, ecx
		cmp	edx, ecx
		mov	[esp+5Ch+var_4C], edx
		mov	edx, [esp+5Ch+var_44]
		sbb	ecx, ecx
		neg	ecx
		add	edx, ecx
		cmp	edx, ecx
		mov	[esp+5Ch+var_44], edx
		mov	edx, ebx
		sbb	esi, esi
		sub	edx, eax
		neg	esi
		cmp	edx, ebx
		sbb	ecx, ecx
		add	edx, esi
		neg	ecx
		mov	ebx, edx
		cmp	edx, esi
		mov	edx, [esp+5Ch+var_48]
		sbb	esi, esi
		neg	esi
		add	esi, ecx
		lea	ecx, [edx-1]
		cmp	ecx, edx
		sbb	edx, edx
		add	ecx, esi
		neg	edx
		mov	[esp+5Ch+var_48], ecx
		cmp	ecx, esi
		sbb	esi, esi
		neg	esi
		add	esi, edx
		mov	edx, [esp+5Ch+var_1C]
		lea	ecx, [edx-1]
		cmp	ecx, edx
		sbb	edx, edx
		add	ecx, esi
		neg	edx
		mov	[esp+5Ch+var_1C], ecx
		cmp	ecx, esi
		sbb	esi, esi
		neg	esi
		add	esi, edx
		mov	edx, ebp
		sub	edx, eax
		dec	edx
		cmp	edx, ebp
		sbb	ecx, ecx
		add	edx, esi
		neg	ecx
		mov	ebp, edx
		cmp	edx, esi
		sbb	edx, edx
		dec	eax
		add	eax, edi
		neg	edx
		add	edx, ecx
		cmp	eax, edi
		sbb	ecx, ecx
		add	eax, edx
		neg	ecx
		mov	edi, eax
		cmp	eax, edx
		sbb	eax, eax
		neg	eax
		add	eax, ecx
		test	eax, eax
		jg	loc_10033760
		mov	esi, [esp+5Ch+var_1C]

loc_10033816:				; CODE XREF: sub_10032F10+848j
		jns	loc_10033922
		lea	esp, [esp+0]

loc_10033820:				; CODE XREF: sub_10032F10+A0Cj
		mov	ecx, [esp+5Ch+var_40]
		neg	eax
		mov	edx, ecx
		mov	[esp+5Ch+var_14], 0
		sub	edx, eax
		mov	[esp+5Ch+var_40], edx
		cmp	edx, ecx
		mov	edx, [esp+5Ch+var_48]
		jbe	short loc_1003384F
		mov	ecx, [esp+5Ch+var_4C]
		dec	[esp+5Ch+var_4C]
		test	ecx, ecx
		mov	ecx, 1
		jz	short loc_10033853

loc_1003384F:				; CODE XREF: sub_10032F10+92Cj
		mov	ecx, [esp+5Ch+var_14]

loc_10033853:				; CODE XREF: sub_10032F10+93Dj
		mov	[esp+5Ch+var_18], 0
		test	ecx, ecx
		jz	short loc_10033873
		mov	ecx, [esp+5Ch+var_44]
		dec	[esp+5Ch+var_44]
		test	ecx, ecx
		jnz	short loc_10033873
		mov	[esp+5Ch+var_18], 1

loc_10033873:				; CODE XREF: sub_10032F10+94Dj
					; sub_10032F10+959j
		mov	ecx, ebx
		add	ebx, eax
		cmp	ecx, ebx
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+5Ch+var_18], 0
		mov	[esp+5Ch+var_14], ecx
		jz	short loc_10033893
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_10033893
		inc	[esp+5Ch+var_14]

loc_10033893:				; CODE XREF: sub_10032F10+976j
					; sub_10032F10+97Dj
		mov	ecx, edx
		inc	edx
		cmp	ecx, edx
		mov	[esp+5Ch+var_48], edx
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+5Ch+var_14], 0
		mov	[esp+5Ch+var_18], ecx
		jz	short loc_100338BD
		mov	ecx, edx
		dec	edx
		mov	[esp+5Ch+var_48], edx
		mov	edx, [esp+5Ch+var_18]
		test	ecx, ecx
		jnz	short loc_100338C1
		inc	edx
		jmp	short loc_100338C1
; ---------------------------------------------------------------------------

loc_100338BD:				; CODE XREF: sub_10032F10+999j
		mov	edx, [esp+5Ch+var_18]

loc_100338C1:				; CODE XREF: sub_10032F10+9A8j
					; sub_10032F10+9ABj
		mov	ecx, esi
		inc	esi
		cmp	ecx, esi
		sbb	ecx, ecx
		neg	ecx
		test	edx, edx
		mov	[esp+5Ch+var_14], ecx
		mov	edx, ecx
		jz	short loc_100338DC
		mov	ecx, esi
		dec	esi
		test	ecx, ecx
		jnz	short loc_100338DC
		inc	edx

loc_100338DC:				; CODE XREF: sub_10032F10+9C2j
					; sub_10032F10+9C9j
		mov	ecx, ebp
		inc	ebp
		add	ebp, eax
		cmp	ecx, ebp
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+5Ch+var_14], ecx
		test	edx, edx
		jz	short loc_100338FA
		mov	ecx, ebp
		dec	ebp
		test	ecx, ecx
		jnz	short loc_100338FA
		inc	[esp+5Ch+var_14]

loc_100338FA:				; CODE XREF: sub_10032F10+9DDj
					; sub_10032F10+9E4j
		mov	ecx, 1
		mov	edx, edi
		sub	ecx, eax
		add	edi, ecx
		cmp	edx, edi
		sbb	eax, eax
		neg	eax
		cmp	[esp+5Ch+var_14], 0
		jz	short loc_1003391A
		mov	ecx, edi
		dec	edi
		test	ecx, ecx
		jnz	short loc_1003391A
		inc	eax

loc_1003391A:				; CODE XREF: sub_10032F10+A00j
					; sub_10032F10+A07j
		neg	eax
		js	loc_10033820

loc_10033922:				; CODE XREF: sub_10032F10:loc_10033816j
		mov	edx, [esp+5Ch+arg_4]
		cmp	[esp+5Ch+arg_0], edx
		jz	short loc_10033947
		push	8
		push	edx
		call	sub_1002C8E0
		add	esp, 8
		mov	[esp+5Ch+var_10], eax
		test	eax, eax
		js	loc_10033A15
		mov	edx, [esp+5Ch+arg_4]

loc_10033947:				; CODE XREF: sub_10032F10+A1Aj
		mov	eax, [edx+0Ch]
		mov	ecx, [esp+5Ch+var_48]
		mov	dword ptr [edx], 0
		mov	dword ptr [edx+8], 8
		mov	[eax+1Ch], edi
		mov	eax, [edx+0Ch]
		mov	[eax+18h], ebp
		mov	eax, [edx+0Ch]
		mov	[eax+14h], esi
		mov	eax, [edx+0Ch]
		mov	[eax+10h], ecx
		mov	eax, [edx+0Ch]
		mov	[eax+0Ch], ebx
		mov	eax, [edx+0Ch]
		mov	edx, [esp+5Ch+var_44]
		mov	[eax+8], edx
		mov	eax, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+var_4C]
		mov	eax, [eax+0Ch]
		mov	[eax+4], edx
		mov	eax, [esp+5Ch+arg_4]
		mov	edx, [esp+5Ch+var_40]
		mov	eax, [eax+0Ch]
		mov	[eax], edx
		mov	edx, [esp+5Ch+var_4C]
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_100339E7
		cmp	ebp, 1
		ja	short loc_100339C9
		jnz	short loc_100339E7
		test	esi, esi
		jnz	short loc_100339C9
		test	ecx, ecx
		jnz	short loc_100339C9
		test	ebx, ebx
		jnz	short loc_100339C9
		cmp	[esp+5Ch+var_44], 0FFFFFFFFh
		jnz	short loc_100339E7
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_100339E7
		cmp	[esp+5Ch+var_40], edx
		jnz	short loc_100339E7

loc_100339C9:				; CODE XREF: sub_10032F10+A97j
					; sub_10032F10+A9Dj ...
		mov	ecx, [esp+5Ch+arg_4]
		mov	eax, [esp+5Ch+arg_8]
		push	ecx
		add	eax, 4
		push	eax
		push	ecx
		call	sub_1002A540
		add	esp, 0Ch
		mov	[esp+5Ch+var_10], eax
		test	eax, eax
		js	short loc_10033A15

loc_100339E7:				; CODE XREF: sub_10032F10+A92j
					; sub_10032F10+A99j ...
		mov	ecx, [esp+5Ch+arg_4]
		mov	edx, [ecx+8]
		cmp	edx, 1
		jbe	short loc_10033A0E
		mov	eax, [ecx+0Ch]
		lea	eax, [eax+edx*4]
		add	eax, 0FFFFFFFCh
		lea	esp, [esp+0]

loc_10033A00:				; CODE XREF: sub_10032F10+AFCj
		cmp	dword ptr [eax], 0
		jnz	short loc_10033A0E
		dec	edx
		sub	eax, 4
		cmp	edx, 1
		ja	short loc_10033A00

loc_10033A0E:				; CODE XREF: sub_10032F10+AE1j
					; sub_10032F10+AF3j
		mov	eax, [esp+5Ch+var_10]
		mov	[ecx+8], edx

loc_10033A15:				; CODE XREF: sub_10032F10+A2Dj
					; sub_10032F10+AD5j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 4Ch
		retn
sub_10032F10	endp

; ---------------------------------------------------------------------------
		align 10h
off_10033A20	dd offset loc_10033007	; DATA XREF: sub_10032F10+AAr
		dd offset loc_10032FFD	; jump table for switch	statement
		dd offset loc_10032FF3
		dd offset loc_10032FE9
		dd offset loc_10032FDF
		dd offset loc_10032FD5
		dd offset loc_10032FCB
		dd offset loc_10032FC1
; ---------------------------------------------------------------------------

loc_10033A40:				; DATA XREF: sub_10033AA0+18o
		push	esi
		mov	esi, [esp+10h]
		push	esi
		push	dword ptr [esp+10h]
		push	dword ptr [esp+10h]
		call	sub_10029B70
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10033A68
		push	dword ptr [esp+14h]
		push	esi
		push	esi
		call	sub_10032F10
		add	esp, 0Ch

loc_10033A68:				; CODE XREF: .text:10033A58j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10033A70:				; DATA XREF: sub_10033AA0+22o
		push	esi
		mov	esi, [esp+0Ch]
		push	esi
		push	dword ptr [esp+0Ch]
		call	sub_1002A1C0
		add	esp, 8
		test	eax, eax
		js	short loc_10033A94
		push	dword ptr [esp+10h]
		push	esi
		push	esi
		call	sub_10032F10
		add	esp, 0Ch

loc_10033A94:				; CODE XREF: .text:10033A84j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033AA0	proc near		; CODE XREF: sub_1002E5B0+255p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 3
		jnz	short loc_10033AC9
		mov	ecx, [esp+arg_0]
		mov	eax, [ecx+4]
		mov	dword ptr [eax+34h], offset sub_10032F10
		mov	eax, [ecx+4]
		mov	dword ptr [eax+38h], offset loc_10033A40
		mov	eax, [ecx+4]
		mov	dword ptr [eax+3Ch], offset loc_10033A70

loc_10033AC9:				; CODE XREF: sub_10033AA0+5j
		xor	eax, eax
		retn
sub_10033AA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033AD0	proc near		; DATA XREF: sub_10033DC0+2Co

var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		cmp	[esp+10h+arg_0], 0
		jnz	short loc_10033AF6
		push	[esp+10h+arg_8]
		mov	eax, [esp+14h+arg_C]
		add	eax, 4
		push	eax
		push	[esp+18h+arg_4]
		call	sub_100299A0
		add	esp, 0Ch
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10033AF6:				; CODE XREF: sub_10033AD0+8j
		lea	eax, [esp+10h+var_10]
		push	esi
		push	eax
		call	sub_100298B0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_10033B55
		push	ebp
		mov	ebp, [esp+18h+arg_C]
		lea	eax, [esp+18h+var_10]
		push	eax
		lea	eax, [ebp+4]
		push	eax
		push	[esp+20h+arg_4]
		call	sub_100299A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10033B54
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		lea	eax, [esp+1Ch+var_10]
		push	edi
		push	eax
		push	[esp+24h+arg_0]
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10033B53
		push	ebp
		push	edi
		push	edi
		call	sub_10033B70
		add	esp, 0Ch
		mov	esi, eax

loc_10033B53:				; CODE XREF: sub_10033AD0+74j
		pop	edi

loc_10033B54:				; CODE XREF: sub_10033AD0+57j
		pop	ebp

loc_10033B55:				; CODE XREF: sub_10033AD0+37j
		lea	eax, [esp+14h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, esi
		pop	esi
		add	esp, 10h
		retn
sub_10033AD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033B70	proc near		; CODE XREF: sub_10033AD0+79p
					; .text:10033D80p ...

var_88		= dword	ptr -88h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 60h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+60h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+68h+arg_8]
		push	esi
		mov	esi, [esp+6Ch+arg_4]
		push	edi
		mov	edi, [esp+70h+arg_0]
		push	edi
		mov	[esp+74h+var_5C], esi
		mov	[esp+74h+var_60], ebp
		call	sub_10028CD0
		push	40h		; size_t
		mov	ebx, eax
		mov	[esp+78h+var_48], 0
		lea	eax, [esp+78h+var_44]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 10h
		mov	[esp+70h+var_58], 0
		mov	[esp+70h+var_54], 11h
		lea	eax, [esp+70h+var_48]
		mov	[esp+70h+var_50], 11h
		mov	[esp+70h+var_4C], eax
		cmp	ebx, 209h
		jge	short loc_10033C15
		cmp	edi, esi
		jnz	short loc_10033BF8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10033BF8:				; CODE XREF: sub_10033B70+71j
		push	esi
		push	edi
		call	sub_100290F0
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10033C15:				; CODE XREF: sub_10033B70+6Dj
		cmp	ebx, 412h
		jle	short loc_10033C40
		push	esi
		lea	eax, [ebp+4]
		push	eax
		push	edi
		call	sub_10029A70
		add	esp, 0Ch
		mov	ebx, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10033C40:				; CODE XREF: sub_10033B70+ABj
		mov	ebx, [edi+8]
		mov	edx, 10h
		dec	ebx
		cmp	ebx, edx
		jbe	short loc_10033C74
		mov	esi, [edi+0Ch]
		lea	ebp, [esp+70h+var_48]

loc_10033C54:				; CODE XREF: sub_10033B70+FAj
		mov	ecx, [esi+edx*4+4]
		mov	eax, [esi+edx*4]
		shl	ecx, 17h
		shr	eax, 9
		or	ecx, eax
		mov	[ebp+edx*4-40h], ecx
		inc	edx
		cmp	edx, ebx
		jb	short loc_10033C54
		mov	esi, [esp+70h+var_5C]
		mov	ebp, [esp+70h+var_60]

loc_10033C74:				; CODE XREF: sub_10033B70+DBj
		mov	eax, [edi+0Ch]
		mov	eax, [eax+edx*4]
		shr	eax, 9
		mov	[esp+edx*4+70h+var_88],	eax
		cmp	edi, esi
		jz	short loc_10033CB4
		push	11h
		push	esi
		call	sub_1002C8E0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10033D41
		xor	edx, edx
		lea	esp, [esp+0]

loc_10033CA0:				; CODE XREF: sub_10033B70+142j
		mov	eax, [edi+0Ch]
		mov	ecx, [esi+0Ch]
		mov	eax, [edx+eax]
		mov	[edx+ecx], eax
		add	edx, 4
		cmp	edx, 44h
		jb	short loc_10033CA0

loc_10033CB4:				; CODE XREF: sub_10033B70+113j
		mov	eax, [esi+0Ch]
		mov	dword ptr [esi+8], 11h
		and	dword ptr [eax+40h], 1FFh
		lea	eax, [esp+70h+var_58]
		push	eax
		push	esi
		call	sub_1002AA80
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10033D41
		mov	eax, [esi+0Ch]
		test	dword ptr [eax+40h], 200h
		jz	short loc_10033D02
		push	1
		push	esi
		call	sub_1002ACD0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10033D41
		mov	eax, [esi+0Ch]
		and	dword ptr [eax+40h], 1FFh
		jmp	short loc_10033D1C
; ---------------------------------------------------------------------------

loc_10033D02:				; CODE XREF: sub_10033B70+173j
		lea	eax, [ebp+4]
		push	eax
		push	esi
		call	sub_1002AFA0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10033D1C
		push	esi
		call	sub_1002A9C0
		add	esp, 4

loc_10033D1C:				; CODE XREF: sub_10033B70+190j
					; sub_10033B70+1A1j
		mov	ecx, [esi+8]
		cmp	ecx, 1
		jbe	short loc_10033D3E
		mov	eax, [esi+0Ch]
		lea	eax, [eax+ecx*4]
		add	eax, 0FFFFFFFCh
		lea	ecx, [ecx+0]

loc_10033D30:				; CODE XREF: sub_10033B70+1CCj
		cmp	dword ptr [eax], 0
		jnz	short loc_10033D3E
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_10033D30

loc_10033D3E:				; CODE XREF: sub_10033B70+1B2j
					; sub_10033B70+1C3j
		mov	[esi+8], ecx

loc_10033D41:				; CODE XREF: sub_10033B70+124j
					; sub_10033B70+167j ...
		mov	ecx, [esp+70h+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
sub_10033B70	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10033D60:				; DATA XREF: sub_10033DC0+18o
		push	esi
		mov	esi, [esp+10h]
		push	esi
		push	dword ptr [esp+10h]
		push	dword ptr [esp+10h]
		call	sub_10029B70
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10033D88
		push	dword ptr [esp+14h]
		push	esi
		push	esi
		call	sub_10033B70
		add	esp, 0Ch

loc_10033D88:				; CODE XREF: .text:10033D78j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10033D90:				; DATA XREF: sub_10033DC0+22o
		push	esi
		mov	esi, [esp+0Ch]
		push	esi
		push	dword ptr [esp+0Ch]
		call	sub_1002A1C0
		add	esp, 8
		test	eax, eax
		js	short loc_10033DB4
		push	dword ptr [esp+10h]
		push	esi
		push	esi
		call	sub_10033B70
		add	esp, 0Ch

loc_10033DB4:				; CODE XREF: .text:10033DA4j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033DC0	proc near		; CODE XREF: sub_1002E5B0+21Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 5
		jnz	short loc_10033DF3
		mov	ecx, [esp+arg_0]
		mov	eax, [ecx+4]
		mov	dword ptr [eax+34h], offset sub_10033B70
		mov	eax, [ecx+4]
		mov	dword ptr [eax+38h], offset loc_10033D60
		mov	eax, [ecx+4]
		mov	dword ptr [eax+3Ch], offset loc_10033D90
		mov	eax, [ecx+4]
		mov	dword ptr [eax+40h], offset sub_10033AD0

loc_10033DF3:				; CODE XREF: sub_10033DC0+5j
		xor	eax, eax
		retn
sub_10033DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033E00	proc near		; CODE XREF: sub_100340B0+5Dp
					; DATA XREF: sub_10034380+Bo

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0B8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0B8h+var_4], eax
		mov	ecx, [esp+0B8h+arg_0]
		xor	eax, eax
		push	ebx
		mov	ebx, [esp+0BCh+arg_8]
		push	esi
		mov	esi, [esp+0C0h+arg_4]
		mov	[esp+0C0h+var_B8], eax
		mov	[esp+0C0h+var_B4], eax
		mov	[esp+0C0h+var_B0], eax
		mov	[esp+0C0h+var_AC], eax
		mov	[esp+0C0h+var_A8], eax
		mov	[esp+0C0h+var_A4], eax
		mov	[esp+0C0h+var_A0], eax
		mov	[esp+0C0h+var_9C], eax
		mov	eax, [ecx+8]
		push	edi
		mov	edi, [esp+0C4h+arg_C]
		shl	eax, 2
		push	eax		; size_t
		push	dword ptr [ecx+0Ch] ; void *
		lea	eax, [esp+0CCh+var_B8]
		push	eax		; void *
		call	memcpy
		lea	eax, [esp+0D0h+var_B8]
		push	eax
		lea	eax, [esp+0D4h+var_94]
		push	eax
		lea	eax, [esp+0D8h+var_4C]
		push	eax
		lea	eax, [esp+0DCh+var_70]
		push	eax
		call	sub_100368C0
		lea	eax, [esp+0E0h+var_94]
		push	eax
		lea	eax, [esp+0E4h+var_B8]
		push	eax
		call	sub_10034470
		lea	eax, [esp+0E8h+var_B8]
		push	eax
		lea	eax, [esp+0ECh+var_94]
		push	eax
		call	sub_100357E0
		lea	eax, [esp+0F0h+var_94]
		push	eax
		lea	eax, [esp+0F4h+var_70]
		push	eax
		lea	eax, [esp+0F8h+var_28]
		push	eax
		call	sub_10034920
		lea	eax, [esp+0FCh+var_94]
		push	eax
		lea	eax, [esp+100h+var_B8]
		push	eax
		push	eax
		call	sub_10034920
		add	esp, 44h
		lea	eax, [esp+0C4h+var_B8]
		push	eax
		lea	eax, [esp+0C8h+var_4C]
		push	eax
		lea	eax, [esp+0CCh+var_70]
		push	eax
		call	sub_10034920
		push	edi
		lea	eax, [esp+0D4h+var_28]
		push	eax
		push	esi
		call	sub_10035DB0
		add	esp, 18h
		test	eax, eax
		js	short loc_10033F09
		push	edi
		lea	eax, [esp+0C8h+var_70]
		push	eax
		push	ebx
		call	sub_10035DB0
		add	esp, 0Ch

loc_10033F09:				; CODE XREF: sub_10033E00+F8j
		mov	ecx, [esp+0C4h+var_4]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0B8h
		retn
sub_10033E00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033F30	proc near		; CODE XREF: sub_100340B0+74p
					; DATA XREF: sub_10034380+12o

var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0E0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0E0h+var_4], eax
		mov	ecx, [esp+0E0h+arg_0]
		mov	eax, [esp+0E0h+arg_C]
		push	ebx
		mov	ebx, [esp+0E4h+arg_8]
		mov	[esp+0E4h+var_E0], eax
		xor	eax, eax
		push	ebp
		mov	ebp, [esp+0E8h+arg_10]
		push	esi
		mov	esi, [esp+0ECh+arg_4]
		mov	[esp+0ECh+var_DC], eax
		mov	[esp+0ECh+var_D8], eax
		mov	[esp+0ECh+var_D4], eax
		mov	[esp+0ECh+var_D0], eax
		mov	[esp+0ECh+var_CC], eax
		mov	[esp+0ECh+var_C8], eax
		mov	[esp+0ECh+var_C4], eax
		mov	[esp+0ECh+var_C0], eax
		mov	eax, [ecx+8]
		push	edi
		mov	edi, [esp+0F0h+arg_14]
		shl	eax, 2
		push	eax		; size_t
		push	dword ptr [ecx+0Ch] ; void *
		lea	eax, [esp+0F8h+var_DC]
		push	eax		; void *
		call	memcpy
		push	edi
		lea	eax, [esp+100h+var_4C]
		push	esi
		push	eax
		call	sub_10037540
		add	esp, 18h
		test	eax, eax
		js	loc_10034096
		push	edi
		lea	eax, [esp+0F4h+var_B8]
		push	ebx
		push	eax
		call	sub_10037540
		add	esp, 0Ch
		test	eax, eax
		js	loc_10034096
		lea	eax, [esp+0F0h+var_DC]
		push	eax
		lea	eax, [esp+0F4h+var_B8]
		push	eax
		lea	eax, [esp+0F8h+var_4C]
		push	eax
		lea	eax, [esp+0FCh+var_70]
		push	eax
		lea	eax, [esp+100h+var_28]
		push	eax
		lea	eax, [esp+104h+var_94]
		push	eax
		call	sub_10036D70
		lea	eax, [esp+108h+var_70]
		push	eax
		lea	eax, [esp+10Ch+var_DC]
		push	eax
		call	sub_10034470
		lea	eax, [esp+110h+var_DC]
		push	eax
		lea	eax, [esp+114h+var_B8]
		push	eax
		call	sub_100357E0
		lea	eax, [esp+118h+var_B8]
		push	eax
		lea	eax, [esp+11Ch+var_94]
		push	eax
		lea	eax, [esp+120h+var_70]
		push	eax
		call	sub_10034920
		lea	eax, [esp+124h+var_B8]
		push	eax
		lea	eax, [esp+128h+var_DC]
		push	eax
		push	eax
		call	sub_10034920
		add	esp, 40h
		lea	eax, [esp+0F0h+var_DC]
		push	eax
		lea	eax, [esp+0F4h+var_28]
		push	eax
		lea	eax, [esp+0F8h+var_94]
		push	eax
		call	sub_10034920
		push	edi
		lea	eax, [esp+100h+var_70]
		push	eax
		push	[esp+104h+var_E0]
		call	sub_10035DB0
		add	esp, 18h
		test	eax, eax
		js	short loc_10034096
		push	edi
		lea	eax, [esp+0F4h+var_94]
		push	eax
		push	ebp
		call	sub_10035DB0
		add	esp, 0Ch

loc_10034096:				; CODE XREF: sub_10033F30+90j
					; sub_10033F30+A7j ...
		mov	ecx, [esp+0F0h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0E0h
		retn
sub_10033F30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100340B0	proc near		; DATA XREF: sub_10034380+19o

var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_120		= byte ptr -120h
var_FC		= byte ptr -0FCh
var_D8		= byte ptr -0D8h
var_B4		= byte ptr -0B4h
var_90		= byte ptr -90h
var_6C		= byte ptr -6Ch
var_48		= byte ptr -48h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 150h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+150h+var_4], eax
		mov	edx, [esp+150h+arg_8]
		mov	ecx, [esp+150h+arg_C]
		mov	eax, [esp+150h+arg_10]
		push	ebx
		mov	ebx, [esp+154h+arg_18]
		push	ebp
		mov	ebp, [esp+158h+arg_14]
		push	esi
		mov	esi, [esp+15Ch+arg_0]
		push	edi
		mov	edi, [esp+160h+arg_4]
		mov	[esp+160h+var_14C], edx
		mov	[esp+160h+var_148], ecx
		mov	[esp+160h+var_150], eax
		test	edi, edi
		jnz	short loc_1003411A
		push	ebx
		push	ebp
		push	eax
		push	esi
		call	sub_10033E00
		add	esp, 10h
		jmp	loc_1003435F
; ---------------------------------------------------------------------------

loc_1003411A:				; CODE XREF: sub_100340B0+57j
		test	esi, esi
		jnz	short loc_10034131
		push	ebx
		push	ebp
		push	eax
		push	ecx
		push	edx
		push	edi
		call	sub_10033F30
		add	esp, 18h
		jmp	loc_1003435F
; ---------------------------------------------------------------------------

loc_10034131:				; CODE XREF: sub_100340B0+6Cj
		push	esi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10034164
		push	edi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10034164
		push	[esp+160h+var_150]
		call	sub_1002A9C0
		push	ebp
		call	sub_1002A9C0
		add	esp, 8
		xor	eax, eax
		jmp	loc_1003435F
; ---------------------------------------------------------------------------

loc_10034164:				; CODE XREF: sub_100340B0+8Cj
					; sub_100340B0+99j
		xor	eax, eax
		mov	[esp+160h+var_144], eax
		mov	[esp+160h+var_140], eax
		mov	[esp+160h+var_13C], eax
		mov	[esp+160h+var_138], eax
		mov	[esp+160h+var_134], eax
		mov	[esp+160h+var_130], eax
		mov	[esp+160h+var_12C], eax
		mov	[esp+160h+var_128], eax
		mov	eax, [esi+8]
		shl	eax, 2
		push	eax		; size_t
		push	dword ptr [esi+0Ch] ; void *
		lea	eax, [esp+168h+var_144]
		push	eax		; void *
		call	memcpy
		xor	eax, eax
		mov	[esp+16Ch+var_24], eax
		mov	[esp+16Ch+var_20], eax
		mov	[esp+16Ch+var_1C], eax
		mov	[esp+16Ch+var_18], eax
		mov	[esp+16Ch+var_14], eax
		mov	[esp+16Ch+var_10], eax
		mov	[esp+16Ch+var_C], eax
		mov	[esp+16Ch+var_8], eax
		mov	eax, [edi+8]
		shl	eax, 2
		push	eax		; size_t
		push	dword ptr [edi+0Ch] ; void *
		lea	eax, [esp+174h+var_24]
		push	eax		; void *
		call	memcpy
		push	ebx
		push	[esp+17Ch+var_14C]
		lea	eax, [esp+180h+var_B4]
		push	eax
		call	sub_10037540
		add	esp, 24h
		test	eax, eax
		js	loc_1003435F
		push	ebx
		push	[esp+164h+var_148]
		lea	eax, [esp+168h+var_90]
		push	eax
		call	sub_10037540
		add	esp, 0Ch
		test	eax, eax
		js	loc_1003435F
		lea	eax, [esp+160h+var_144]
		push	eax
		lea	eax, [esp+164h+var_120]
		push	eax
		lea	eax, [esp+168h+var_FC]
		push	eax
		lea	eax, [esp+16Ch+var_D8]
		push	eax
		call	sub_100368C0
		lea	eax, [esp+170h+var_24]
		push	eax
		lea	eax, [esp+174h+var_90]
		push	eax
		lea	eax, [esp+178h+var_B4]
		push	eax
		lea	eax, [esp+17Ch+var_144]
		push	eax
		lea	eax, [esp+180h+var_6C]
		push	eax
		lea	eax, [esp+184h+var_48]
		push	eax
		call	sub_10036D70
		push	edi
		call	sub_100290C0
		add	esp, 2Ch
		test	eax, eax
		jz	loc_1003430D
		push	esi
		call	sub_100290C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100342C9
		mov	ecx, 9
		lea	esi, [esp+160h+var_48]
		lea	edi, [esp+160h+var_D8]
		rep movsd
		mov	ecx, 9
		lea	esi, [esp+160h+var_6C]
		lea	edi, [esp+160h+var_FC]
		rep movsd
		mov	ecx, 9
		lea	esi, [esp+160h+var_144]
		lea	edi, [esp+160h+var_120]
		rep movsd
		jmp	short loc_1003430D
; ---------------------------------------------------------------------------

loc_100342C9:				; CODE XREF: sub_100340B0+1DFj
		lea	eax, [esp+160h+var_144]
		push	eax
		lea	eax, [esp+164h+var_6C]
		push	eax
		lea	eax, [esp+168h+var_48]
		push	eax
		lea	eax, [esp+16Ch+var_120]
		push	eax
		lea	eax, [esp+170h+var_FC]
		push	eax
		lea	eax, [esp+174h+var_D8]
		push	eax
		lea	eax, [esp+178h+var_120]
		push	eax
		lea	eax, [esp+17Ch+var_FC]
		push	eax
		lea	eax, [esp+180h+var_D8]
		push	eax
		call	sub_10036370
		add	esp, 24h

loc_1003430D:				; CODE XREF: sub_100340B0+1CEj
					; sub_100340B0+217j
		lea	eax, [esp+160h+var_120]
		push	eax
		lea	eax, [esp+164h+var_FC]
		push	eax
		lea	eax, [esp+168h+var_D8]
		push	eax
		lea	eax, [esp+16Ch+var_90]
		push	eax
		lea	eax, [esp+170h+var_B4]
		push	eax
		call	sub_10036830
		push	ebx
		lea	eax, [esp+178h+var_B4]
		push	eax
		push	[esp+17Ch+var_150]
		call	sub_10035DB0
		add	esp, 20h
		test	eax, eax
		js	short loc_1003435F
		push	ebx
		lea	eax, [esp+164h+var_90]
		push	eax
		push	ebp
		call	sub_10035DB0
		add	esp, 0Ch

loc_1003435F:				; CODE XREF: sub_100340B0+65j
					; sub_100340B0+7Cj ...
		mov	ecx, [esp+160h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 150h
		retn
sub_100340B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10034380	proc near		; CODE XREF: sub_1002E5B0+26Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 3
		jnz	short loc_100343A0
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+70h], offset sub_10033E00
		mov	dword ptr [eax+6Ch], offset sub_10033F30
		mov	dword ptr [eax+74h], offset sub_100340B0

loc_100343A0:				; CODE XREF: sub_10034380+5j
		xor	eax, eax
		retn
sub_10034380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100343B0	proc near		; CODE XREF: sub_10035E90+BDp
					; sub_10035E90+D0p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		mov	eax, [ebx]
		push	edi
		sub	eax, [ebp+0]
		mov	edi, [esp+10h+arg_0]
		add	eax, 7FFFFFF8h
		mov	esi, eax
		shr	esi, 1Dh
		and	eax, 1FFFFFFFh
		mov	[edi], eax
		mov	eax, 4
		jmp	short loc_100343E0
; ---------------------------------------------------------------------------
		align 10h

loc_100343E0:				; CODE XREF: sub_100343B0+2Bj
					; sub_100343B0+70j
		mov	edx, [eax+ebx]
		sub	edx, [eax+ebp]
		add	edx, ds:dword_1004D050[eax]
		add	edx, esi
		mov	[eax+edi], edx
		and	dword ptr [eax+edi], 0FFFFFFFh
		mov	esi, [eax+ebx+4]
		sub	esi, [eax+ebp+4]
		add	esi, ds:dword_1004D054[eax]
		shr	edx, 1Ch
		add	esi, edx
		mov	[eax+edi+4], esi
		and	dword ptr [eax+edi+4], 1FFFFFFFh
		add	eax, 8
		shr	esi, 1Dh
		cmp	eax, 24h
		jnz	short loc_100343E0
		lea	edx, [esi-1]
		lea	eax, [esi+esi]
		shr	edx, 1Fh
		add	[edi], eax
		dec	edx
		mov	eax, esi
		mov	ecx, edx
		shl	eax, 0Bh
		and	ecx, 10000000h
		sub	ecx, eax
		mov	eax, edx
		add	[edi+0Ch], ecx
		and	eax, 0FFFFFFFh
		add	[edi+14h], eax
		mov	ecx, edx
		mov	eax, esi
		and	ecx, 1FFFFFFFh
		add	[edi+10h], ecx
		and	edx, 1
		shl	esi, 19h
		shl	eax, 16h
		sub	esi, edx
		add	[edi+1Ch], esi
		sub	ecx, eax
		add	[edi+18h], ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100343B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10034470	proc near		; CODE XREF: sub_10033E00+8Fp
					; sub_10033F30+E6p ...

var_124		= byte ptr -124h
var_100		= byte ptr -100h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 124h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+124h+var_4], eax
		push	ebx
		mov	ebx, [esp+128h+arg_4]
		lea	eax, [esp+128h+var_4C]
		push	ebp
		mov	ebp, [esp+12Ch+arg_0]
		push	esi
		push	edi
		push	ebx
		push	eax
		call	sub_100357E0
		lea	eax, [esp+13Ch+var_4C]
		push	eax
		push	ebx
		push	eax
		call	sub_10034920
		lea	eax, [esp+148h+var_4C]
		mov	ecx, 9
		push	eax
		lea	esi, [esp+14Ch+var_4C]
		lea	edi, [esp+14Ch+var_B8]
		rep movsd
		push	eax
		call	sub_100357E0
		lea	eax, [esp+150h+var_4C]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+158h+var_B8]
		push	eax
		lea	eax, [esp+15Ch+var_4C]
		push	eax
		push	eax
		call	sub_10034920
		lea	eax, [esp+164h+var_4C]
		mov	ecx, 9
		push	eax
		lea	esi, [esp+168h+var_4C]
		lea	edi, [esp+168h+var_100]
		rep movsd
		push	eax
		call	sub_100357E0
		lea	eax, [esp+16Ch+var_4C]
		push	eax
		push	eax
		call	sub_100357E0
		add	esp, 40h
		lea	eax, [esp+134h+var_4C]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+13Ch+var_4C]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+144h+var_100]
		push	eax
		lea	eax, [esp+148h+var_4C]
		push	eax
		push	eax
		call	sub_10034920
		mov	ecx, 9
		lea	esi, [esp+150h+var_4C]
		lea	edi, [esp+150h+var_124]
		add	esp, 1Ch
		rep movsd
		mov	esi, 8

loc_10034574:				; CODE XREF: sub_10034470+116j
		lea	eax, [esp+134h+var_4C]
		push	eax
		push	eax
		call	sub_100357E0
		add	esp, 8
		dec	esi
		jnz	short loc_10034574
		lea	eax, [esp+134h+var_124]
		push	eax
		lea	eax, [esp+138h+var_4C]
		push	eax
		push	eax
		call	sub_10034920
		mov	ecx, 9
		lea	esi, [esp+140h+var_4C]
		lea	edi, [esp+140h+var_DC]
		add	esp, 0Ch
		rep movsd
		mov	esi, 10h

loc_100345B5:				; CODE XREF: sub_10034470+157j
		lea	eax, [esp+134h+var_4C]
		push	eax
		push	eax
		call	sub_100357E0
		add	esp, 8
		dec	esi
		jnz	short loc_100345B5
		lea	eax, [esp+134h+var_DC]
		push	eax
		lea	eax, [esp+138h+var_4C]
		push	eax
		push	eax
		call	sub_10034920
		mov	ecx, 9
		lea	esi, [esp+140h+var_4C]
		lea	edi, [esp+140h+var_70]
		add	esp, 0Ch
		rep movsd
		mov	esi, 20h
		lea	esp, [esp+0]

loc_10034600:				; CODE XREF: sub_10034470+1A2j
		lea	eax, [esp+134h+var_4C]
		push	eax
		push	eax
		call	sub_100357E0
		add	esp, 8
		dec	esi
		jnz	short loc_10034600
		lea	eax, [esp+134h+var_4C]
		mov	ecx, 9
		push	ebx
		push	eax
		lea	esi, [esp+13Ch+var_4C]
		lea	edi, [esp+13Ch+var_94]
		rep movsd
		push	eax
		call	sub_10034920
		add	esp, 0Ch
		mov	esi, 0C0h

loc_10034640:				; CODE XREF: sub_10034470+1E2j
		lea	eax, [esp+134h+var_4C]
		push	eax
		push	eax
		call	sub_100357E0
		add	esp, 8
		dec	esi
		jnz	short loc_10034640
		lea	eax, [esp+134h+var_70]
		push	eax
		lea	eax, [esp+138h+var_94]
		push	eax
		lea	eax, [esp+13Ch+var_28]
		push	eax
		call	sub_10034920
		add	esp, 0Ch
		mov	esi, 10h
		lea	esp, [esp+0]

loc_10034680:				; CODE XREF: sub_10034470+222j
		lea	eax, [esp+134h+var_28]
		push	eax
		push	eax
		call	sub_100357E0
		add	esp, 8
		dec	esi
		jnz	short loc_10034680
		lea	eax, [esp+134h+var_DC]
		push	eax
		lea	eax, [esp+138h+var_28]
		push	eax
		push	eax
		call	sub_10034920
		add	esp, 0Ch
		mov	esi, 8
		nop

loc_100346B0:				; CODE XREF: sub_10034470+252j
		lea	eax, [esp+134h+var_28]
		push	eax
		push	eax
		call	sub_100357E0
		add	esp, 8
		dec	esi
		jnz	short loc_100346B0
		lea	eax, [esp+134h+var_124]
		push	eax
		lea	eax, [esp+138h+var_28]
		push	eax
		push	eax
		call	sub_10034920
		add	esp, 0Ch
		mov	esi, 4
		nop

loc_100346E0:				; CODE XREF: sub_10034470+282j
		lea	eax, [esp+134h+var_28]
		push	eax
		push	eax
		call	sub_100357E0
		add	esp, 8
		dec	esi
		jnz	short loc_100346E0
		lea	eax, [esp+134h+var_100]
		push	eax
		lea	eax, [esp+138h+var_28]
		push	eax
		push	eax
		call	sub_10034920
		lea	eax, [esp+140h+var_28]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+148h+var_28]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+150h+var_B8]
		push	eax
		lea	eax, [esp+154h+var_28]
		push	eax
		push	eax
		call	sub_10034920
		lea	eax, [esp+15Ch+var_28]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+164h+var_28]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+16Ch+var_28]
		push	ebx
		push	eax
		push	eax
		call	sub_10034920
		add	esp, 44h
		lea	eax, [esp+134h+var_4C]
		push	eax
		lea	eax, [esp+138h+var_28]
		push	eax
		push	ebp
		call	sub_10034920
		mov	ecx, [esp+140h+var_4]
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 124h
		retn
sub_10034470	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100347A0	proc near		; CODE XREF: sub_10036370+168p
					; sub_10036370+1D0p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 28h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		push	esi
		mov	esi, [esp+2Ch+arg_0]
		mov	ecx, 9
		push	edi
		lea	edi, [esp+30h+var_28]
		rep movsd
		mov	edi, [esp+30h+var_28]

loc_100347C3:				; CODE XREF: sub_100347A0+C5j
		mov	esi, edi
		mov	eax, 1
		shr	esi, 1Dh
		and	edi, 1FFFFFFFh
		mov	[esp+30h+var_28], edi
		jmp	short loc_100347E0
; ---------------------------------------------------------------------------
		align 10h

loc_100347E0:				; CODE XREF: sub_100347A0+37j
					; sub_100347A0+6Cj
		add	[esp+eax*4+30h+var_28],	esi
		mov	ecx, [esp+eax*4+30h+var_28]
		and	[esp+eax*4+30h+var_28],	0FFFFFFFh
		shr	ecx, 1Ch
		add	[esp+eax*4+30h+var_24],	ecx
		mov	esi, [esp+eax*4+30h+var_24]
		and	[esp+eax*4+30h+var_24],	1FFFFFFFh
		add	eax, 2
		shr	esi, 1Dh
		cmp	eax, 9
		jnz	short loc_100347E0
		mov	eax, [esp+30h+var_28]
		lea	edx, [esi-1]
		shr	edx, 1Fh
		dec	edx
		mov	ecx, edx
		lea	edi, [eax+esi*2]
		and	ecx, 10000000h
		mov	eax, esi
		mov	[esp+30h+var_28], edi
		shl	eax, 0Bh
		sub	ecx, eax
		mov	eax, edx
		add	[esp+30h+var_1C], ecx
		and	eax, 0FFFFFFFh
		add	[esp+30h+var_14], eax
		mov	ecx, edx
		and	ecx, 1FFFFFFFh
		mov	eax, esi
		add	[esp+30h+var_18], ecx
		and	edx, 1
		shl	eax, 16h
		sub	ecx, eax
		mov	eax, esi
		add	[esp+30h+var_10], ecx
		shl	eax, 19h
		sub	eax, edx
		add	[esp+30h+var_C], eax
		test	esi, esi
		jnz	loc_100347C3
		lea	ecx, [esp+30h+var_28]
		mov	edx, offset dword_1004C774
		mov	esi, 20h
		lea	esp, [esp+0]

loc_10034880:				; CODE XREF: sub_100347A0+EFj
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_100348A4
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_10034880
		pop	edi
		mov	al, 1
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_100348A4:				; CODE XREF: sub_100347A0+E4j
		lea	ecx, [esp+30h+var_28]
		mov	edx, offset dword_1004C798
		mov	esi, 20h

loc_100348B2:				; CODE XREF: sub_100347A0+121j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_100348D6
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_100348B2
		pop	edi
		mov	al, 1
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_100348D6:				; CODE XREF: sub_100347A0+116j
		lea	ecx, [esp+30h+var_28]
		mov	edx, offset dword_1004C7BC
		mov	esi, 20h

loc_100348E4:				; CODE XREF: sub_100347A0+153j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_10034908
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_100348E4
		pop	edi
		mov	al, 1
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10034908:				; CODE XREF: sub_100347A0+148j
		mov	ecx, [esp+30h+var_4]
		xor	al, al
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
sub_100347A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10034920	proc near		; CODE XREF: sub_10033E00+B8p
					; sub_10033E00+C8p ...

var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0D4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0D4h+var_4], eax
		mov	eax, [esp+0D4h+arg_0]
		push	ebx
		mov	ebx, [esp+0D8h+arg_4]
		push	ebp
		mov	ebp, [esp+0DCh+arg_8]
		push	esi
		push	edi
		push	0
		mov	esi, [ebp+0]
		mov	[esp+0E8h+var_94], eax
		mov	eax, [ebx]
		push	eax
		push	0
		push	esi
		mov	[esp+0F4h+var_90], eax
		mov	[esp+0F4h+var_98], esi
		call	__allmul
		push	0
		mov	[esp+0E8h+var_8C], eax
		mov	eax, [ebp+4]
		push	esi
		mov	[esp+0ECh+var_A4], eax
		mov	eax, [ebx+4]
		push	0
		push	eax
		mov	[esp+0F4h+var_88], edx
		mov	[esp+0F4h+var_9C], eax
		call	__allmul
		mov	ecx, [ebp+4]
		mov	esi, eax
		push	0
		push	dword ptr [ebx]
		mov	edi, edx
		push	0
		push	ecx
		call	__allmul
		mov	ecx, [ebp+8]
		add	esi, eax
		mov	eax, [esp+0E4h+var_A4]
		push	0
		push	dword ptr [ebx+4]
		adc	edi, edx
		mov	[esp+0ECh+var_A8], ecx
		mov	ecx, [ebx+8]
		add	eax, eax
		push	0
		push	eax
		mov	[esp+0F4h+var_84], esi
		mov	[esp+0F4h+var_80], edi
		mov	[esp+0F4h+var_A0], ecx
		call	__allmul
		push	0
		push	dword ptr [ebp+0]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	dword ptr [ebx+8]
		call	__allmul
		push	0
		push	dword ptr [ebx]
		add	esi, eax
		push	0
		push	dword ptr [ebp+8]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebp+0]
		add	esi, eax
		mov	eax, [ebp+0Ch]
		mov	[esp+0ECh+var_B4], eax
		mov	eax, [ebx+0Ch]
		adc	edi, edx
		push	0
		push	eax
		mov	[esp+0F4h+var_7C], esi
		mov	[esp+0F4h+var_78], edi
		mov	[esp+0F4h+var_B0], eax
		call	__allmul
		mov	esi, eax
		mov	edi, edx
		push	0
		push	dword ptr [ebx+4]
		push	0
		push	dword ptr [ebp+8]
		call	__allmul
		push	0
		add	esi, eax
		mov	eax, [ebp+4]
		push	eax
		push	0
		push	dword ptr [ebx+8]
		adc	edi, edx
		call	__allmul
		mov	ecx, [ebp+0Ch]
		add	esi, eax
		push	0
		push	dword ptr [ebx]
		adc	edi, edx
		push	0
		push	ecx
		call	__allmul
		mov	ecx, [ebp+4]
		add	esi, eax
		mov	eax, [ebp+10h]
		mov	[esp+0E4h+var_B8], eax
		adc	edi, edx
		mov	eax, [ebx+10h]
		push	0
		mov	[esp+0E8h+var_BC], eax
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	dword ptr [ebx+0Ch]
		mov	[esp+0F4h+var_74], esi
		mov	[esp+0F4h+var_70], edi
		call	__allmul
		mov	ecx, [ebp+0Ch]
		mov	esi, eax
		push	0
		push	dword ptr [ebx+4]
		mov	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		push	0
		push	dword ptr [ebp+8]
		add	esi, eax
		push	0
		push	dword ptr [ebx+8]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebp+0]
		add	esi, eax
		push	0
		push	dword ptr [ebx+10h]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebx]
		add	esi, eax
		push	0
		push	dword ptr [ebp+10h]
		adc	edi, edx
		call	__allmul
		add	esi, eax
		mov	eax, [ebp+14h]
		push	0
		push	dword ptr [ebx+8]
		mov	[esp+0ECh+var_C4], eax
		adc	edi, edx
		mov	eax, [ebx+14h]
		mov	[esp+0ECh+var_C0], eax
		mov	eax, [ebp+0Ch]
		push	0
		push	eax
		mov	[esp+0F4h+var_6C], esi
		mov	[esp+0F4h+var_68], edi
		call	__allmul
		mov	esi, eax
		mov	edi, edx
		push	0
		push	dword ptr [ebp+8]
		push	0
		push	dword ptr [ebx+0Ch]
		call	__allmul
		push	0
		push	dword ptr [ebp+0]
		add	esi, eax
		push	0
		push	dword ptr [ebx+14h]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebx+4]
		add	esi, eax
		push	0
		push	dword ptr [ebp+10h]
		adc	edi, edx
		call	__allmul
		push	0
		add	esi, eax
		mov	eax, [ebp+4]
		push	eax
		push	0
		push	dword ptr [ebx+10h]
		adc	edi, edx
		call	__allmul
		mov	ecx, [ebp+14h]
		add	esi, eax
		push	0
		push	dword ptr [ebx]
		adc	edi, edx
		push	0
		push	ecx
		call	__allmul
		mov	ecx, [ebp+0Ch]
		add	esi, eax
		mov	eax, [ebp+18h]
		push	0
		push	dword ptr [ebx+0Ch]
		mov	[esp+0ECh+var_C8], eax
		adc	edi, edx
		mov	eax, [ebx+18h]
		mov	[esp+0ECh+var_D4], eax
		lea	eax, [ecx+ecx]
		push	0
		push	eax
		mov	[esp+0F4h+var_64], esi
		mov	[esp+0F4h+var_60], edi
		call	__allmul
		mov	ecx, [ebp+4]
		mov	esi, eax
		push	0
		mov	edi, edx
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	dword ptr [ebx+14h]
		call	__allmul
		mov	ecx, [ebp+14h]
		add	esi, eax
		push	0
		push	dword ptr [ebx+4]
		adc	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		push	0
		push	dword ptr [ebx+8]
		add	esi, eax
		push	0
		push	dword ptr [ebp+10h]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebp+0]
		add	esi, eax
		push	0
		push	dword ptr [ebx+18h]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebp+8]
		add	esi, eax
		push	0
		push	dword ptr [ebx+10h]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebx]
		add	esi, eax
		push	0
		push	dword ptr [ebp+18h]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebx+0Ch]
		add	esi, eax
		mov	eax, [ebp+1Ch]
		push	0
		push	dword ptr [ebp+10h]
		adc	edi, edx
		mov	[esp+0F4h+var_AC], eax
		mov	eax, [ebx+1Ch]
		mov	[esp+0F4h+var_5C], esi
		mov	[esp+0F4h+var_58], edi
		mov	[esp+0F4h+var_D0], eax
		call	__allmul
		push	0
		mov	esi, eax
		mov	edi, edx
		mov	eax, [ebp+0Ch]
		push	eax
		push	0
		push	dword ptr [ebx+10h]
		call	__allmul
		push	0
		push	dword ptr [ebp+0]
		add	esi, eax
		push	0
		push	dword ptr [ebx+1Ch]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebx+8]
		add	esi, eax
		mov	eax, [ebp+14h]
		push	0
		push	eax
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebp+8]
		add	esi, eax
		push	0
		push	dword ptr [ebx+14h]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebx+4]
		add	esi, eax
		push	0
		push	dword ptr [ebp+18h]
		adc	edi, edx
		call	__allmul
		push	0
		push	dword ptr [ebx]
		mov	ebx, [ebp+1Ch]
		add	esi, eax
		push	0
		push	ebx
		adc	edi, edx
		call	__allmul
		push	0
		add	esi, eax
		mov	eax, [ebp+4]
		push	eax
		push	0
		push	[esp+0F0h+var_D4]
		adc	edi, edx
		call	__allmul
		mov	ecx, [esp+0E4h+var_B4]
		add	esi, eax
		mov	eax, [esp+0E4h+arg_4]
		mov	ebp, [ebp+20h]
		adc	edi, edx
		push	0
		mov	[esp+0E8h+var_54], esi
		add	ebx, ebx
		mov	eax, [eax+20h]
		mov	[esp+0E8h+var_CC], eax
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	[esp+0F0h+var_C0]
		mov	[esp+0F4h+var_50], edi
		call	__allmul
		mov	ecx, [esp+0E4h+var_C4]
		mov	esi, eax
		push	0
		push	[esp+0E8h+var_B0]
		mov	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		push	0
		push	[esp+0E8h+var_B8]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_BC]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_9C]
		add	esi, eax
		push	0
		push	ebx
		adc	edi, edx
		call	__allmul
		mov	ecx, [esp+0E4h+var_A4]
		add	esi, eax
		push	0
		adc	edi, edx
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	[esp+0F0h+var_D0]
		call	__allmul
		push	0
		push	[esp+0E8h+var_98]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_CC]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_A0]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_C8]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_A8]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_D4]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_90]
		add	esi, eax
		push	0
		push	ebp
		adc	edi, edx
		call	__allmul
		add	esi, eax
		mov	[esp+0E4h+var_4C], esi
		adc	edi, edx
		mov	[esp+0E4h+var_48], edi
		push	0
		push	[esp+0E8h+var_BC]
		push	0
		push	[esp+0F0h+var_C4]
		call	__allmul
		push	0
		push	[esp+0E8h+var_B8]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	[esp+0F0h+var_C0]
		call	__allmul
		push	0
		push	[esp+0E8h+var_B0]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_C8]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_B4]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_D4]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_A0]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_AC]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_9C]
		add	esi, eax
		push	0
		push	ebp
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_A8]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_D0]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_A4]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_CC]
		adc	edi, edx
		call	__allmul
		mov	ecx, [esp+0E4h+var_C4]
		add	esi, eax
		push	0
		push	[esp+0E8h+var_C0]
		adc	edi, edx
		mov	[esp+0ECh+var_44], esi
		push	0
		lea	eax, [ecx+ecx]
		mov	[esp+0F0h+var_40], edi
		push	eax
		call	__allmul
		mov	ecx, [esp+0E4h+var_B4]
		mov	esi, eax
		push	0
		mov	edi, edx
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	[esp+0F0h+var_D0]
		call	__allmul
		push	0
		push	[esp+0E8h+var_B0]
		add	esi, eax
		push	0
		push	ebx
		adc	edi, edx
		call	__allmul
		add	esi, eax
		push	0
		push	[esp+0E8h+var_BC]
		adc	edi, edx
		push	0
		push	[esp+0F0h+var_C8]
		call	__allmul
		push	0
		push	[esp+0E8h+var_B8]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_D4]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_A0]
		add	esi, eax
		push	0
		push	ebp
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_A8]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_CC]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_C0]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_C8]
		adc	edi, edx
		mov	[esp+0F4h+var_3C], esi
		mov	[esp+0F4h+var_38], edi
		call	__allmul
		push	0
		push	[esp+0E8h+var_C4]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	[esp+0F0h+var_D4]
		call	__allmul
		push	0
		push	[esp+0E8h+var_BC]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_AC]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_B8]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_D0]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_B0]
		add	esi, eax
		push	0
		push	ebp
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_B4]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_CC]
		adc	edi, edx
		call	__allmul
		mov	ecx, [esp+0E4h+var_C4]
		add	esi, eax
		push	0
		adc	edi, edx
		mov	[esp+0E8h+var_34], esi
		mov	[esp+0E8h+var_30], edi
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	[esp+0F0h+var_D0]
		call	__allmul
		push	0
		push	[esp+0E8h+var_C8]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	[esp+0F0h+var_D4]
		call	__allmul
		push	0
		push	[esp+0E8h+var_C0]
		add	esi, eax
		push	0
		push	ebx
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_BC]
		add	esi, eax
		push	0
		push	ebp
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_B8]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_CC]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_D4]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_AC]
		adc	edi, edx
		mov	[esp+0F4h+var_2C], esi
		mov	[esp+0F4h+var_28], edi
		call	__allmul
		push	0
		push	[esp+0E8h+var_C8]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	[esp+0F0h+var_D0]
		call	__allmul
		push	0
		push	[esp+0E8h+var_C0]
		add	esi, eax
		push	0
		push	ebp
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_C4]
		add	esi, eax
		push	0
		push	[esp+0F0h+var_CC]
		adc	edi, edx
		call	__allmul
		push	0
		push	[esp+0E8h+var_D0]
		add	esi, eax
		push	0
		adc	edi, edx
		mov	[esp+0F0h+var_24], esi
		push	ebx
		mov	[esp+0F4h+var_20], edi
		call	__allmul
		push	0
		push	[esp+0E8h+var_D4]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	ebp
		call	__allmul
		mov	ebx, [esp+0E4h+var_CC]
		add	esi, eax
		push	0
		push	[esp+0E8h+var_C8]
		adc	edi, edx
		push	0
		push	ebx
		call	__allmul
		push	0
		push	[esp+0E8h+var_D0]
		add	esi, eax
		push	0
		adc	edi, edx
		mov	[esp+0F0h+var_1C], esi
		push	ebp
		mov	[esp+0F4h+var_18], edi
		call	__allmul
		push	0
		push	[esp+0E8h+var_AC]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	ebx
		call	__allmul
		push	0
		add	esi, eax
		push	ebp
		push	0
		adc	edi, edx
		mov	[esp+0F0h+var_14], esi
		push	ebx
		mov	[esp+0F4h+var_10], edi
		call	__allmul
		mov	[esp+0E4h+var_C], eax
		lea	eax, [esp+0E4h+var_8C]
		push	eax
		push	[esp+0E8h+var_94]
		mov	[esp+0ECh+var_8], edx
		call	sub_10035130
		mov	ecx, [esp+0ECh+var_4]
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D4h
		retn
sub_10034920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035130	proc near		; CODE XREF: sub_10034920+7EBp
					; sub_100357E0+4F5p

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 68h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+68h+var_4], eax
		mov	eax, [esp+68h+arg_0]
		mov	cl, 20h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+78h+arg_4]
		mov	[esp+78h+var_50], eax
		mov	esi, [edi]
		mov	eax, esi
		mov	edx, [edi+4]
		and	eax, 1FFFFFFFh
		mov	[esp+78h+var_4C], eax
		mov	eax, esi
		call	__aullshr
		mov	ecx, [edi+8]
		and	eax, 1FFFFFFh
		shr	esi, 1Dh
		and	ecx, 0FFFFFFFh
		shl	eax, 3
		mov	ebx, 2
		or	eax, esi
		mov	ebp, edi
		add	eax, ecx
		mov	esi, eax
		shr	esi, 1Ch
		and	eax, 0FFFFFFFh
		mov	[esp+78h+var_48], eax
		jmp	short loc_100351A7
; ---------------------------------------------------------------------------
		align 10h

loc_100351A0:				; CODE XREF: sub_10035130+13Bj
		mov	edi, [esp+78h+arg_4]

loc_100351A7:				; CODE XREF: sub_10035130+67j
		mov	eax, [edi+ebx*8-8]
		lea	ecx, [edi-8]
		mov	edx, [ecx+ebx*8+4]
		mov	[esp+78h+var_68], ecx
		mov	cl, 20h
		call	__aullshr
		mov	edx, [ebp+4]
		mov	edi, eax
		mov	eax, [esp+78h+arg_4]
		and	edi, 1FFFFFFh
		shl	edi, 4
		mov	ecx, [eax+ebx*8]
		mov	eax, [ebp+0]
		and	ecx, 1FFFFFFFh
		add	edi, ecx
		mov	cl, 20h
		call	__aullshr
		mov	edx, [esp+78h+var_68]
		shr	eax, 19h
		add	eax, esi
		add	eax, edi
		mov	esi, [edx+ebx*8]
		shr	esi, 1Ch
		add	esi, eax
		mov	[esp+ebx*4+78h+var_4C],	esi
		and	[esp+ebx*4+78h+var_4C],	1FFFFFFFh
		inc	ebx
		shr	esi, 1Dh
		cmp	ebx, 11h
		jz	short loc_10035271
		mov	eax, [edx+ebx*8]
		mov	cl, 20h
		mov	edx, [edx+ebx*8+4]
		call	__aullshr
		mov	ecx, [esp+78h+arg_4]
		and	eax, 1FFFFFFh
		mov	edx, [ebp+0Ch]
		mov	ecx, [ecx+ebx*8]
		and	ecx, 0FFFFFFFh
		lea	edi, [ecx+eax*8]
		mov	eax, [ebp+8]
		mov	cl, 20h
		call	__aullshr
		mov	ecx, [esp+78h+var_68]
		add	ebp, 10h
		shr	eax, 19h
		add	eax, esi
		add	eax, edi
		mov	esi, [ecx+ebx*8]
		shr	esi, 1Dh
		add	esi, eax
		mov	[esp+ebx*4+78h+var_4C],	esi
		and	[esp+ebx*4+78h+var_4C],	0FFFFFFFh
		inc	ebx
		shr	esi, 1Ch
		cmp	ebx, 11h
		jb	loc_100351A0

loc_10035271:				; CODE XREF: sub_10035130+DDj
		mov	ebx, [esp+78h+arg_4]
		mov	cl, 20h
		mov	eax, [ebx+78h]
		mov	edx, [ebx+7Ch]
		call	__aullshr
		mov	edx, [ebx+84h]
		mov	edi, eax
		mov	eax, [ebx+80h]
		mov	cl, 20h
		shr	edi, 19h
		call	__aullshr
		mov	ecx, [ebx+80h]
		add	edi, esi
		mov	ebx, [esp+78h+var_4C]
		shr	ecx, 1Dh
		mov	edx, [esp+78h+var_2C]
		lea	eax, [edi+eax*8]
		mov	[esp+78h+var_4C], 0
		add	ecx, eax
		xor	eax, eax
		mov	[esp+78h+var_60], eax
		mov	eax, ebx
		shr	eax, 1Dh
		and	ebx, 1FFFFFFFh
		add	[esp+78h+var_48], eax
		mov	eax, ebx
		and	eax, 3FFFFh
		mov	[esp+78h+var_8], ecx
		shl	eax, 0Ah
		add	[esp+78h+var_40], eax
		lea	esi, [ebx-1]
		mov	ecx, [esp+78h+var_30]
		mov	eax, ebx
		shr	eax, 12h
		mov	edi, esi
		add	[esp+78h+var_3C], eax
		movzx	eax, bl
		shl	eax, 15h
		add	[esp+78h+var_34], eax
		mov	eax, ebx
		shr	eax, 8
		add	ecx, eax
		shr	edi, 1Fh
		dec	edi
		mov	eax, edi
		and	esi, edi
		and	eax, 10000000h
		add	edx, esi
		add	ecx, eax
		mov	eax, ebx
		and	eax, 0Fh
		shl	eax, 18h
		sub	ecx, eax
		mov	eax, ebx
		shr	eax, 4
		sub	edx, eax
		mov	[esp+78h+var_30], ecx
		mov	eax, edi
		lea	ecx, [esp+78h+var_30]
		and	eax, 20000000h
		add	edx, eax
		mov	eax, ebx
		sub	edx, ebx
		and	eax, 1
		shr	ebx, 1
		shl	eax, 1Ch
		dec	ebx
		add	edx, eax
		and	ebx, edi
		add	[esp+78h+var_28], ebx
		lea	eax, [esp+78h+var_3C]
		mov	[esp+78h+var_2C], edx
		lea	ebx, [esp+78h+var_2C]
		mov	[esp+78h+var_5C], eax
		lea	edx, [esp+78h+var_48]
		lea	eax, [esp+78h+var_28]
		mov	[esp+78h+var_68], edx
		mov	[esp+78h+var_64], ebx
		xor	ebp, ebp
		mov	[esp+78h+var_54], eax

loc_10035375:				; CODE XREF: sub_10035130+3A5j
		mov	eax, [edx]
		mov	esi, [edx]
		shr	eax, 1Ch
		and	esi, 0FFFFFFFh
		add	[esp+ebp+78h+var_44], eax
		mov	eax, [esp+78h+var_68]
		mov	ebx, [esp+78h+var_5C]
		lea	edi, [esi-1]
		mov	edx, edi
		mov	dword ptr [eax], 0
		mov	eax, esi
		and	eax, 3FFFFh
		shr	edx, 1Fh
		shl	eax, 0Bh
		dec	edx
		add	[ebx], eax
		and	edi, edx
		mov	ebx, [esp+78h+var_64]
		mov	eax, esi
		shr	eax, 12h
		add	[esp+ebp+78h+var_38], eax
		mov	eax, esi
		and	eax, 7Fh
		add	[esp+ebp+78h+var_24], edi
		shl	eax, 15h
		add	[ecx], eax
		mov	ecx, edx
		and	ecx, 20000000h
		mov	eax, esi
		shr	eax, 7
		and	edx, 10000000h
		add	ecx, eax
		mov	eax, esi
		add	[ebx], ecx
		and	eax, 0Fh
		mov	ecx, [esp+78h+var_54]
		shl	eax, 19h
		sub	[ebx], eax
		mov	eax, esi
		shr	eax, 4
		add	[ecx], edi
		sub	edx, eax
		mov	eax, [esp+78h+var_60]
		lea	edi, [esp+78h+var_30]
		add	eax, 2
		sub	edx, esi
		add	[ecx], edx
		lea	ecx, [esp+78h+var_48]
		mov	[esp+78h+var_60], eax
		lea	ebp, ds:0[eax*4]
		mov	eax, [esp+ebp+78h+var_4C]
		add	ecx, ebp
		shr	eax, 1Dh
		add	edi, ebp
		mov	[esp+78h+var_68], ecx
		mov	[esp+78h+var_58], edi
		add	[ecx], eax
		lea	ecx, [esp+78h+var_3C]
		mov	ebx, [esp+ebp+78h+var_4C]
		add	ecx, ebp
		and	ebx, 1FFFFFFFh
		mov	[esp+ebp+78h+var_4C], 0
		mov	eax, ebx
		mov	[esp+78h+var_5C], ecx
		and	eax, 3FFFFh
		shl	eax, 0Ah
		add	[esp+ebp+78h+var_40], eax
		lea	edx, [ebx-1]
		mov	eax, ebx
		mov	esi, edx
		shr	eax, 12h
		add	[ecx], eax
		shr	esi, 1Fh
		movzx	eax, bl
		dec	esi
		shl	eax, 15h
		mov	ecx, esi
		add	[esp+ebp+78h+var_34], eax
		and	ecx, 10000000h
		mov	eax, ebx
		shr	eax, 8
		add	ecx, eax
		and	edx, esi
		add	[edi], ecx
		mov	eax, ebx
		mov	ecx, [esp+78h+var_58]
		lea	edi, [esp+78h+var_2C]
		and	eax, 0Fh
		add	edi, ebp
		shl	eax, 18h
		mov	[esp+78h+var_64], edi
		add	[edi], edx
		sub	[ecx], eax
		mov	ecx, ebx
		mov	edx, [esp+78h+var_68]
		and	ecx, 1
		mov	eax, ebx
		shl	ecx, 1Ch
		shr	eax, 4
		sub	ecx, eax
		mov	eax, esi
		and	eax, 20000000h
		add	ecx, eax
		lea	eax, [esp+78h+var_28]
		sub	ecx, ebx
		add	eax, ebp
		add	[edi], ecx
		mov	ecx, [esp+78h+var_58]
		shr	ebx, 1
		dec	ebx
		mov	[esp+78h+var_54], eax
		and	ebx, esi
		add	[eax], ebx
		mov	eax, [esp+78h+var_60]
		inc	eax
		cmp	eax, 9
		jnz	loc_10035375
		mov	ebx, [esp+78h+var_50]
		xor	ecx, ecx
		xor	edx, edx

loc_100354E3:				; CODE XREF: sub_10035130+3EDj
		mov	eax, [esp+edx*4+78h+var_24]
		and	eax, 1
		shl	eax, 1Ch
		add	eax, [esp+edx*4+78h+var_28]
		add	ecx, eax
		mov	eax, [esp+edx*4+78h+var_24]
		mov	[ebx+edx*4], ecx
		and	dword ptr [ebx+edx*4], 1FFFFFFFh
		shr	ecx, 1Dh
		shr	eax, 1
		add	ecx, eax
		mov	[ebx+edx*4+4], ecx
		and	dword ptr [ebx+edx*4+4], 0FFFFFFFh
		add	edx, 2
		shr	ecx, 1Ch
		cmp	edx, 8
		jb	short loc_100354E3
		mov	esi, [esp+78h+var_8]
		add	esi, ecx
		mov	[ebx+20h], esi
		shr	esi, 1Dh
		and	dword ptr [ebx+20h], 1FFFFFFFh
		pop	edi
		lea	edx, [esi-1]
		lea	eax, [esi+esi]
		shr	edx, 1Fh
		add	[ebx], eax
		dec	edx
		mov	eax, esi
		mov	ecx, edx
		and	ecx, 10000000h
		shl	eax, 0Bh
		sub	ecx, eax
		mov	eax, edx
		add	[ebx+0Ch], ecx
		and	eax, 0FFFFFFFh
		add	[ebx+14h], eax
		mov	ecx, edx
		mov	eax, esi
		and	ecx, 1FFFFFFFh
		add	[ebx+10h], ecx
		and	edx, 1
		shl	esi, 19h
		sub	esi, edx
		shl	eax, 16h
		add	[ebx+1Ch], esi
		sub	ecx, eax
		add	[ebx+18h], ecx
		mov	ecx, [esp+74h+var_4]
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 68h
		retn
sub_10035130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035590	proc near		; CODE XREF: sub_10036670+C7p

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	edx, 1
		mov	eax, [edi]
		lea	ecx, [eax+eax*2]
		mov	eax, ecx
		shr	eax, 1Dh
		and	ecx, 1FFFFFFFh
		mov	[edi], ecx
		lea	ecx, [ecx+0]

loc_100355B0:				; CODE XREF: sub_10035590+53j
		mov	ecx, [edi+edx*4]
		lea	eax, [eax+ecx*2]
		add	eax, ecx
		mov	[edi+edx*4], eax
		and	dword ptr [edi+edx*4], 0FFFFFFFh
		mov	ecx, [edi+edx*4+4]
		shr	eax, 1Ch
		lea	eax, [eax+ecx*2]
		add	eax, ecx
		mov	[edi+edx*4+4], eax
		and	dword ptr [edi+edx*4+4], 1FFFFFFFh
		add	edx, 2
		shr	eax, 1Dh
		cmp	edx, 9
		jnz	short loc_100355B0
		lea	esi, [eax-1]
		shr	esi, 1Fh
		lea	ecx, [eax+eax]
		add	[edi], ecx
		dec	esi
		mov	edx, esi
		mov	ecx, eax
		shl	ecx, 0Bh
		and	edx, 10000000h
		sub	edx, ecx
		mov	ecx, esi
		add	[edi+0Ch], edx
		and	ecx, 0FFFFFFFh
		add	[edi+14h], ecx
		mov	edx, esi
		mov	ecx, eax
		and	edx, 1FFFFFFFh
		add	[edi+10h], edx
		and	esi, 1
		shl	ecx, 16h
		shl	eax, 19h
		sub	edx, ecx
		add	[edi+18h], edx
		sub	eax, esi
		add	[edi+1Ch], eax
		pop	edi
		pop	esi
		retn
sub_10035590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035640	proc near		; CODE XREF: sub_10036670+10Ep

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ebx, 1
		mov	eax, [edi]
		mov	edx, eax
		and	eax, 7FFFFFFh
		shr	edx, 1Bh
		lea	ecx, ds:0[eax*4]
		mov	eax, ecx
		shr	eax, 1Dh
		add	eax, edx
		and	ecx, 1FFFFFFFh
		mov	[edi], ecx
		mov	edi, edi

loc_10035670:				; CODE XREF: sub_10035640+78j
		mov	ecx, [edi+ebx*4]
		mov	edx, ecx
		and	ecx, 3FFFFFFh
		shr	edx, 1Ah
		lea	esi, [eax+ecx*4]
		mov	[edi+ebx*4], esi
		and	dword ptr [edi+ebx*4], 0FFFFFFFh
		mov	eax, [edi+ebx*4+4]
		mov	ecx, eax
		shr	esi, 1Ch
		and	eax, 7FFFFFFh
		add	esi, edx
		shr	ecx, 1Bh
		lea	eax, [esi+eax*4]
		mov	[edi+ebx*4+4], eax
		and	dword ptr [edi+ebx*4+4], 1FFFFFFFh
		add	ebx, 2
		shr	eax, 1Dh
		add	eax, ecx
		cmp	ebx, 9
		jnz	short loc_10035670
		lea	esi, [eax-1]
		shr	esi, 1Fh
		lea	ecx, [eax+eax]
		add	[edi], ecx
		dec	esi
		mov	edx, esi
		mov	ecx, eax
		shl	ecx, 0Bh
		and	edx, 10000000h
		sub	edx, ecx
		mov	ecx, esi
		add	[edi+0Ch], edx
		and	ecx, 0FFFFFFFh
		add	[edi+14h], ecx
		mov	edx, esi
		mov	ecx, eax
		and	edx, 1FFFFFFFh
		add	[edi+10h], edx
		and	esi, 1
		shl	ecx, 16h
		shl	eax, 19h
		sub	edx, ecx
		add	[edi+18h], edx
		sub	eax, esi
		add	[edi+1Ch], eax
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10035640	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035710	proc near		; CODE XREF: sub_10036670+184p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ebx, 1
		mov	eax, [edi]
		mov	edx, eax
		and	eax, 3FFFFFFh
		shr	edx, 1Ah
		lea	ecx, ds:0[eax*8]
		mov	eax, ecx
		shr	eax, 1Dh
		add	eax, edx
		and	ecx, 1FFFFFFFh
		mov	[edi], ecx
		mov	edi, edi

loc_10035740:				; CODE XREF: sub_10035710+78j
		mov	ecx, [edi+ebx*4]
		mov	edx, ecx
		and	ecx, 1FFFFFFh
		shr	edx, 19h
		lea	esi, [eax+ecx*8]
		mov	[edi+ebx*4], esi
		and	dword ptr [edi+ebx*4], 0FFFFFFFh
		mov	eax, [edi+ebx*4+4]
		mov	ecx, eax
		shr	esi, 1Ch
		and	eax, 3FFFFFFh
		add	esi, edx
		shr	ecx, 1Ah
		lea	eax, [esi+eax*8]
		mov	[edi+ebx*4+4], eax
		and	dword ptr [edi+ebx*4+4], 1FFFFFFFh
		add	ebx, 2
		shr	eax, 1Dh
		add	eax, ecx
		cmp	ebx, 9
		jnz	short loc_10035740
		lea	esi, [eax-1]
		shr	esi, 1Fh
		lea	ecx, [eax+eax]
		add	[edi], ecx
		dec	esi
		mov	edx, esi
		mov	ecx, eax
		shl	ecx, 0Bh
		and	edx, 10000000h
		sub	edx, ecx
		mov	ecx, esi
		add	[edi+0Ch], edx
		and	ecx, 0FFFFFFFh
		add	[edi+14h], ecx
		mov	edx, esi
		mov	ecx, eax
		and	edx, 1FFFFFFFh
		add	[edi+10h], edx
		and	esi, 1
		shl	ecx, 16h
		shl	eax, 19h
		sub	edx, ecx
		add	[edi+18h], edx
		sub	eax, esi
		add	[edi+1Ch], eax
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10035710	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100357E0	proc near		; CODE XREF: sub_10033E00+9Ep
					; sub_10033F30+F5p ...

var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0B4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0B4h+var_4], eax
		mov	eax, [esp+0B4h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+0BCh+arg_4]
		push	esi
		push	edi
		push	0
		mov	ebx, [ebp+0]
		push	ebx
		push	0
		push	ebx
		mov	[esp+0D4h+var_90], eax
		mov	[esp+0D4h+var_A0], ebx
		call	__allmul
		mov	edi, [ebp+4]
		push	0
		push	ebx
		push	0
		lea	esi, [edi+edi]
		mov	[esp+0D0h+var_8C], eax
		push	esi
		mov	[esp+0D4h+var_88], edx
		mov	[esp+0D4h+var_B0], edi
		call	__allmul
		push	0
		mov	[esp+0C8h+var_84], eax
		mov	eax, [ebp+8]
		push	esi
		push	0
		push	edi
		mov	[esp+0D4h+var_80], edx
		lea	ebx, [eax+eax]
		mov	[esp+0D4h+var_AC], eax
		call	__allmul
		push	0
		push	dword ptr [ebp+0]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	ebx
		call	__allmul
		add	esi, eax
		mov	eax, [ebp+0Ch]
		push	0
		push	[esp+0C8h+var_A0]
		adc	edi, edx
		mov	[esp+0CCh+var_7C], esi
		lea	ebp, [eax+eax]
		mov	[esp+0CCh+var_78], edi
		push	0
		push	ebp
		mov	[esp+0D4h+var_A8], eax
		call	__allmul
		push	0
		push	[esp+0C8h+var_B0]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	ebx
		call	__allmul
		add	esi, eax
		mov	eax, [esp+0C4h+arg_4]
		push	0
		push	[esp+0C8h+var_B0]
		adc	edi, edx
		mov	[esp+0CCh+var_74], esi
		mov	eax, [eax+10h]
		mov	[esp+0CCh+var_9C], eax
		push	0
		mov	[esp+0D0h+var_70], edi
		lea	ebx, [eax+eax]
		mov	eax, [esp+0D0h+var_A8]
		shl	eax, 2
		push	eax
		call	__allmul
		push	0
		mov	esi, eax
		mov	edi, edx
		mov	eax, [esp+0C8h+var_AC]
		push	eax
		push	0
		push	eax
		call	__allmul
		push	0
		push	[esp+0C8h+var_A0]
		add	esi, eax
		push	0
		push	ebx
		adc	edi, edx
		call	__allmul
		add	esi, eax
		mov	eax, [esp+0C4h+arg_4]
		push	0
		push	ebp
		push	0
		mov	eax, [eax+14h]
		adc	edi, edx
		push	[esp+0D0h+var_AC]
		mov	[esp+0D4h+var_6C], esi
		mov	[esp+0D4h+var_68], edi
		mov	[esp+0D4h+var_A4], eax
		call	__allmul
		push	0
		push	[esp+0C8h+var_B0]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	ebx
		call	__allmul
		mov	ebx, [esp+0C4h+var_A4]
		add	esi, eax
		push	0
		push	[esp+0C8h+var_A0]
		adc	edi, edx
		push	0
		lea	eax, [ebx+ebx]
		push	eax
		call	__allmul
		add	esi, eax
		mov	eax, [esp+0C4h+arg_4]
		push	0
		push	ebp
		push	0
		mov	eax, [eax+18h]
		adc	edi, edx
		push	[esp+0D0h+var_A8]
		mov	[esp+0D4h+var_64], esi
		mov	[esp+0D4h+var_60], edi
		shl	ebx, 2
		mov	[esp+0D4h+var_B4], eax
		call	__allmul
		push	0
		push	[esp+0C8h+var_AC]
		mov	esi, eax
		mov	edi, edx
		mov	eax, [esp+0CCh+var_9C]
		push	0
		lea	ebp, [eax+eax]
		push	ebp
		call	__allmul
		push	0
		push	[esp+0C8h+var_B0]
		add	esi, eax
		push	0
		push	ebx
		adc	edi, edx
		call	__allmul
		mov	ecx, [esp+0C4h+var_B4]
		add	esi, eax
		push	0
		push	[esp+0C8h+var_A0]
		adc	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		add	esi, eax
		mov	eax, [esp+0C4h+arg_4]
		mov	[esp+0C4h+var_5C], esi
		adc	edi, edx
		mov	[esp+0C4h+var_58], edi
		mov	eax, [eax+1Ch]
		push	0
		push	ebp
		push	0
		push	[esp+0D0h+var_A8]
		mov	[esp+0D4h+var_98], eax
		call	__allmul
		mov	ecx, [esp+0C4h+var_A4]
		mov	esi, eax
		push	0
		push	[esp+0C8h+var_AC]
		mov	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		mov	ecx, [esp+0C4h+var_B4]
		add	esi, eax
		push	0
		push	[esp+0C8h+var_B0]
		adc	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		mov	ebp, [esp+0C4h+var_98]
		add	esi, eax
		push	0
		push	[esp+0C8h+var_A0]
		adc	edi, edx
		push	0
		lea	eax, ds:0[ebp*2]
		push	eax
		call	__allmul
		add	esi, eax
		mov	eax, [esp+0C4h+arg_4]
		push	0
		adc	edi, edx
		mov	[esp+0C8h+var_54], esi
		mov	[esp+0C8h+var_50], edi
		mov	eax, [eax+20h]
		mov	[esp+0C8h+var_94], eax
		mov	eax, [esp+0C8h+var_9C]
		push	eax
		push	0
		push	eax
		shl	ebp, 2
		call	__allmul
		push	0
		push	[esp+0C8h+var_A8]
		mov	esi, eax
		mov	edi, edx
		push	0
		push	ebx
		call	__allmul
		mov	ecx, [esp+0C4h+var_B4]
		add	esi, eax
		push	0
		push	[esp+0C8h+var_AC]
		adc	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		push	0
		push	[esp+0C8h+var_B0]
		add	esi, eax
		push	0
		push	ebp
		adc	edi, edx
		call	__allmul
		mov	ecx, [esp+0C4h+var_94]
		add	esi, eax
		push	0
		push	[esp+0C8h+var_A0]
		adc	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		add	esi, eax
		adc	edi, edx
		mov	eax, [esp+0C4h+var_A4]
		push	0
		mov	[esp+0C8h+var_4C], esi
		mov	[esp+0C8h+var_48], edi
		lea	ebx, [eax+eax]
		mov	eax, [esp+0C8h+var_9C]
		push	ebx
		push	0
		push	eax
		call	__allmul
		mov	ecx, [esp+0C4h+var_B4]
		mov	esi, eax
		push	0
		push	[esp+0C8h+var_A8]
		mov	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		mov	ecx, [esp+0C4h+var_98]
		add	esi, eax
		push	0
		push	[esp+0C8h+var_AC]
		adc	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		mov	ecx, [esp+0C4h+var_94]
		add	esi, eax
		push	0
		push	[esp+0C8h+var_B0]
		adc	edi, edx
		push	0
		lea	eax, [ecx+ecx]
		push	eax
		call	__allmul
		mov	ecx, [esp+0C4h+var_B4]
		add	esi, eax
		push	0
		adc	edi, edx
		mov	[esp+0C8h+var_44], esi
		mov	[esp+0C8h+var_40], edi
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	[esp+0D0h+var_9C]
		call	__allmul
		push	0
		push	ebx
		push	0
		push	[esp+0D0h+var_A4]
		mov	esi, eax
		mov	edi, edx
		call	__allmul
		push	0
		push	[esp+0C8h+var_A8]
		add	esi, eax
		push	0
		push	ebp
		adc	edi, edx
		call	__allmul
		add	esi, eax
		mov	eax, [esp+0C4h+var_94]
		push	0
		push	[esp+0C8h+var_AC]
		adc	edi, edx
		push	0
		lea	ebx, [eax+eax]
		push	ebx
		call	__allmul
		mov	ecx, [esp+0C4h+var_98]
		add	esi, eax
		push	0
		adc	edi, edx
		mov	[esp+0C8h+var_3C], esi
		mov	[esp+0C8h+var_38], edi
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	[esp+0D0h+var_9C]
		call	__allmul
		mov	ecx, [esp+0C4h+var_B4]
		mov	esi, eax
		push	0
		mov	edi, edx
		lea	eax, [ecx+ecx]
		push	eax
		push	0
		push	[esp+0D0h+var_A4]
		call	__allmul
		push	0
		push	[esp+0C8h+var_A8]
		add	esi, eax
		push	0
		push	ebx
		adc	edi, edx
		call	__allmul
		add	esi, eax
		mov	eax, [esp+0C4h+var_B4]
		push	0
		push	eax
		push	0
		adc	edi, edx
		mov	[esp+0D0h+var_34], esi
		push	eax
		mov	[esp+0D4h+var_30], edi
		call	__allmul
		push	0
		push	ebp
		mov	ebp, [esp+0CCh+var_A4]
		mov	esi, eax
		push	0
		push	ebp
		mov	edi, edx
		call	__allmul
		push	0
		push	[esp+0C8h+var_9C]
		add	esi, eax
		push	0
		push	ebx
		adc	edi, edx
		call	__allmul
		push	0
		add	esi, eax
		push	ebx
		push	0
		adc	edi, edx
		mov	[esp+0D0h+var_2C], esi
		push	ebp
		mov	[esp+0D4h+var_28], edi
		call	__allmul
		mov	esi, eax
		mov	edi, edx
		mov	eax, [esp+0C4h+var_98]
		push	0
		lea	ebp, [eax+eax]
		push	ebp
		push	0
		push	[esp+0D0h+var_B4]
		call	__allmul
		push	0
		push	ebx
		add	esi, eax
		push	0
		push	[esp+0D0h+var_B4]
		adc	edi, edx
		mov	[esp+0D4h+var_24], esi
		mov	[esp+0D4h+var_20], edi
		call	__allmul
		push	0
		push	ebp
		mov	ebp, [esp+0CCh+var_98]
		mov	esi, eax
		push	0
		push	ebp
		mov	edi, edx
		call	__allmul
		add	esi, eax
		mov	[esp+0C4h+var_1C], esi
		adc	edi, edx
		mov	[esp+0C4h+var_18], edi
		push	0
		push	ebx
		push	0
		push	ebp
		call	__allmul
		push	0
		mov	[esp+0C8h+var_14], eax
		mov	eax, [esp+0C8h+var_94]
		push	eax
		push	0
		push	eax
		mov	[esp+0D4h+var_10], edx
		call	__allmul
		mov	[esp+0C4h+var_C], eax
		lea	eax, [esp+0C4h+var_8C]
		push	eax
		push	[esp+0C8h+var_90]
		mov	[esp+0CCh+var_8], edx
		call	sub_10035130
		mov	ecx, [esp+0CCh+var_4]
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0B4h
		retn
sub_100357E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035D00	proc near		; CODE XREF: sub_10035E90+9Fp
					; sub_10035E90+171p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		mov	edx, 1
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	eax, [ebp+0]
		add	eax, [ebx]
		mov	esi, eax
		shr	esi, 1Dh
		and	eax, 1FFFFFFFh
		mov	[edi], eax

loc_10035D26:				; CODE XREF: sub_10035D00+5Bj
		mov	ecx, [ebx+edx*4]
		add	ecx, [ebp+edx*4+0]
		add	ecx, esi
		mov	[edi+edx*4], ecx
		and	dword ptr [edi+edx*4], 0FFFFFFFh
		mov	esi, [ebx+edx*4+4]
		add	esi, [ebp+edx*4+4]
		shr	ecx, 1Ch
		add	esi, ecx
		mov	[edi+edx*4+4], esi
		and	dword ptr [edi+edx*4+4], 1FFFFFFFh
		add	edx, 2
		shr	esi, 1Dh
		cmp	edx, 9
		jnz	short loc_10035D26
		lea	edx, [esi-1]
		lea	eax, [esi+esi]
		shr	edx, 1Fh
		add	[edi], eax
		dec	edx
		mov	eax, esi
		mov	ecx, edx
		shl	eax, 0Bh
		and	ecx, 10000000h
		sub	ecx, eax
		mov	eax, edx
		add	[edi+0Ch], ecx
		and	eax, 0FFFFFFFh
		add	[edi+14h], eax
		mov	ecx, edx
		mov	eax, esi
		and	ecx, 1FFFFFFFh
		add	[edi+10h], ecx
		and	edx, 1
		shl	esi, 19h
		shl	eax, 16h
		sub	esi, edx
		add	[edi+1Ch], esi
		sub	ecx, eax
		add	[edi+18h], ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10035D00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035DB0	proc near		; CODE XREF: sub_10033E00+EEp
					; sub_10033E00+101p ...

var_20		= byte ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 20h
		lea	eax, [esp+20h+var_20]
		push	esi
		push	edi
		push	eax
		call	sub_100298B0
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_100298B0
		mov	edi, [esp+30h+arg_4]
		lea	eax, [esp+30h+var_20]
		push	eax
		lea	eax, [esp+34h+var_10]
		push	dword ptr [edi+20h]
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_10035E6A
		push	ebx
		mov	ebx, 7

loc_10035DF1:				; CODE XREF: sub_10035DB0+86j
		lea	eax, [esp+2Ch+var_10]
		push	eax
		lea	eax, [esp+30h+var_20]
		test	bl, 1
		jnz	short loc_10035E06
		push	20000000h
		jmp	short loc_10035E0B
; ---------------------------------------------------------------------------

loc_10035E06:				; CODE XREF: sub_10035DB0+4Dj
		push	10000000h

loc_10035E0B:				; CODE XREF: sub_10035DB0+54j
		push	eax
		call	sub_10029D80
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10035E69
		lea	eax, [esp+2Ch+var_20]
		push	eax
		push	dword ptr [edi+ebx*4]
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_10028DB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10035E69
		dec	ebx
		jns	short loc_10035DF1
		mov	edi, [esp+2Ch+arg_0]
		lea	eax, [esp+2Ch+var_20]
		push	edi
		push	offset dword_1004D094
		push	eax
		call	sub_10029B70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10035E69
		mov	eax, [esp+2Ch+arg_8]
		mov	eax, [eax+4]
		push	eax
		push	edi
		push	edi
		mov	eax, [eax+34h]
		call	eax
		add	esp, 0Ch
		mov	esi, eax

loc_10035E69:				; CODE XREF: sub_10035DB0+68j
					; sub_10035DB0+83j ...
		pop	ebx

loc_10035E6A:				; CODE XREF: sub_10035DB0+35j
		lea	eax, [esp+28h+var_20]
		push	eax
		call	sub_10028F00
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 8
		mov	eax, esi
		pop	edi
		pop	esi
		add	esp, 20h
		retn
sub_10035DB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035E90	proc near		; CODE XREF: sub_10036D70+212p

var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= byte ptr -148h
var_124		= byte ptr -124h
var_100		= byte ptr -100h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 15Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+15Ch+var_4], eax
		mov	eax, [esp+15Ch+arg_0]
		mov	ecx, [esp+15Ch+arg_1C]
		push	ebx
		mov	ebx, [esp+160h+arg_10]
		push	ebp
		mov	ebp, [esp+164h+arg_18]
		mov	[esp+164h+var_154], eax
		mov	eax, [esp+164h+arg_4]
		push	esi
		mov	esi, [esp+168h+arg_C]
		mov	[esp+168h+var_15C], eax
		mov	eax, [esp+168h+arg_8]
		push	edi
		mov	edi, [esp+16Ch+arg_20]
		mov	[esp+16Ch+var_150], eax
		mov	eax, [esp+16Ch+arg_14]
		push	eax
		mov	[esp+170h+var_14C], eax
		lea	eax, [esp+170h+var_100]
		push	eax
		mov	[esp+174h+var_158], ecx
		call	sub_100357E0
		lea	eax, [esp+174h+var_124]
		push	edi
		push	eax
		call	sub_100357E0
		lea	eax, [esp+17Ch+var_124]
		push	eax
		lea	eax, [esp+180h+var_28]
		push	esi
		push	eax
		call	sub_10034920
		mov	esi, [esp+188h+var_14C]
		lea	eax, [esp+188h+var_148]
		push	edi
		push	esi
		push	eax
		call	sub_10035D00
		lea	eax, [esp+194h+var_148]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+19Ch+var_100]
		push	eax
		lea	eax, [esp+1A0h+var_148]
		push	eax
		push	eax
		call	sub_100343B0
		lea	eax, [esp+1A8h+var_124]
		push	eax
		lea	eax, [esp+1ACh+var_148]
		push	eax
		push	eax
		call	sub_100343B0
		add	esp, 48h
		lea	eax, [esp+16Ch+var_124]
		push	eax
		lea	eax, [esp+170h+var_DC]
		push	edi
		push	eax
		call	sub_10034920
		lea	eax, [esp+178h+var_DC]
		push	eax
		lea	eax, [esp+17Ch+var_4C]
		push	ebx
		push	eax
		call	sub_10034920
		lea	eax, [esp+184h+var_100]
		push	eax
		lea	eax, [esp+188h+var_94]
		push	ebp
		push	eax
		call	sub_10034920
		lea	eax, [esp+190h+var_100]
		push	eax
		lea	eax, [esp+194h+var_DC]
		push	esi
		push	eax
		call	sub_10034920
		lea	eax, [esp+19Ch+var_DC]
		push	eax
		push	[esp+1A0h+var_158]
		lea	eax, [esp+1A4h+var_70]
		push	eax
		call	sub_10034920
		lea	eax, [esp+1A8h+var_28]
		push	eax
		lea	eax, [esp+1ACh+var_94]
		push	eax
		lea	eax, [esp+1B0h+var_124]
		push	eax
		call	sub_100343B0
		add	esp, 48h
		lea	eax, [esp+16Ch+var_124]
		push	eax
		push	eax
		lea	eax, [esp+174h+var_100]
		push	eax
		call	sub_10035D00
		lea	eax, [esp+178h+var_100]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+180h+var_100]
		push	eax
		lea	eax, [esp+184h+var_124]
		push	eax
		lea	eax, [esp+188h+var_DC]
		push	eax
		call	sub_10034920
		lea	eax, [esp+18Ch+var_4C]
		push	eax
		lea	eax, [esp+190h+var_70]
		push	eax
		lea	eax, [esp+194h+var_B8]
		push	eax
		call	sub_100343B0
		lea	eax, [esp+198h+var_B8]
		push	eax
		push	eax
		push	eax
		call	sub_10035D00
		lea	eax, [esp+1A4h+var_100]
		push	eax
		lea	eax, [esp+1A8h+var_28]
		push	eax
		lea	eax, [esp+1ACh+var_94]
		push	eax
		call	sub_10034920
		add	esp, 44h
		lea	eax, [esp+16Ch+var_124]
		push	eax
		lea	eax, [esp+170h+var_148]
		push	eax
		push	[esp+174h+var_150]
		call	sub_10034920
		lea	eax, [esp+178h+var_B8]
		push	eax
		lea	eax, [esp+17Ch+var_70]
		push	eax
		call	sub_100357E0
		mov	ebx, [esp+180h+var_154]
		lea	eax, [esp+180h+var_DC]
		push	eax
		lea	eax, [esp+184h+var_70]
		push	eax
		push	ebx
		call	sub_100343B0
		lea	eax, [esp+18Ch+var_94]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		lea	eax, [esp+198h+var_94]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		lea	eax, [esp+1A4h+var_94]
		push	ebx
		push	eax
		lea	eax, [esp+1ACh+var_148]
		push	eax
		call	sub_100343B0
		mov	ebx, [esp+1B0h+var_15C]
		lea	eax, [esp+1B0h+var_B8]
		add	esp, 44h
		push	eax
		lea	eax, [esp+170h+var_148]
		push	eax
		push	ebx
		call	sub_10034920
		lea	eax, [esp+178h+var_DC]
		push	eax
		lea	eax, [esp+17Ch+var_4C]
		push	eax
		lea	eax, [esp+180h+var_148]
		push	eax
		call	sub_10034920
		lea	eax, [esp+184h+var_148]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		lea	eax, [esp+190h+var_148]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		mov	ecx, [esp+19Ch+var_4]
		add	esp, 30h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 15Ch
		retn
sub_10035E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036160	proc near		; CODE XREF: sub_100368C0+189p
					; sub_10036D70+EFp

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 0ECh
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0ECh+var_4], eax
		mov	eax, [esp+0ECh+arg_0]
		push	ebx
		mov	ebx, [esp+0F0h+arg_1C]
		mov	[esp+0F0h+var_EC], eax
		mov	eax, [esp+0F0h+arg_4]
		push	ebp
		mov	ebp, [esp+0F4h+arg_C]
		mov	[esp+0F4h+var_E0], eax
		mov	eax, [esp+0F4h+arg_8]
		push	esi
		mov	esi, [esp+0F8h+arg_18]
		mov	[esp+0F8h+var_E8], eax
		mov	eax, [esp+0F8h+arg_10]
		push	edi
		mov	edi, [esp+0FCh+arg_14]
		mov	[esp+0FCh+var_E4], eax
		lea	eax, [esp+0FCh+var_DC]
		push	edi
		push	eax
		call	sub_100357E0
		push	edi
		lea	eax, [esp+108h+var_B8]
		push	edi
		push	eax
		call	sub_10035D00
		lea	eax, [esp+110h+var_DC]
		push	eax
		lea	eax, [esp+114h+var_70]
		push	esi
		push	eax
		call	sub_10034920
		lea	eax, [esp+11Ch+var_DC]
		push	eax
		lea	eax, [esp+120h+var_28]
		push	edi
		push	eax
		call	sub_10034920
		lea	eax, [esp+128h+var_28]
		push	eax
		lea	eax, [esp+12Ch+var_DC]
		push	ebx
		push	eax
		call	sub_10034920
		push	ebp
		lea	eax, [esp+138h+var_70]
		push	eax
		lea	eax, [esp+13Ch+var_94]
		push	eax
		call	sub_100343B0
		add	esp, 44h
		lea	eax, [esp+0FCh+var_94]
		push	eax
		push	eax
		lea	eax, [esp+104h+var_70]
		push	eax
		call	sub_10035D00
		lea	eax, [esp+108h+var_70]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+110h+var_70]
		push	eax
		lea	eax, [esp+114h+var_94]
		push	eax
		lea	eax, [esp+118h+var_28]
		push	eax
		call	sub_10034920
		mov	esi, [esp+11Ch+var_E4]
		lea	eax, [esp+11Ch+var_DC]
		push	esi
		push	eax
		lea	eax, [esp+124h+var_4C]
		push	eax
		call	sub_100343B0
		lea	eax, [esp+128h+var_4C]
		push	eax
		push	eax
		push	eax
		call	sub_10035D00
		lea	eax, [esp+134h+var_70]
		push	eax
		lea	eax, [esp+138h+var_DC]
		push	ebp
		push	eax
		call	sub_10034920
		add	esp, 44h
		lea	eax, [esp+0FCh+var_94]
		push	eax
		lea	eax, [esp+100h+var_B8]
		push	eax
		push	[esp+104h+var_E8]
		call	sub_10034920
		lea	eax, [esp+108h+var_4C]
		push	eax
		lea	eax, [esp+10Ch+var_94]
		push	eax
		call	sub_100357E0
		mov	ebx, [esp+110h+var_EC]
		lea	eax, [esp+110h+var_28]
		push	eax
		lea	eax, [esp+114h+var_94]
		push	eax
		push	ebx
		call	sub_100343B0
		lea	eax, [esp+11Ch+var_DC]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		lea	eax, [esp+128h+var_DC]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		push	ebx
		lea	eax, [esp+138h+var_DC]
		push	eax
		lea	eax, [esp+13Ch+var_B8]
		push	eax
		call	sub_100343B0
		mov	ebx, [esp+140h+var_E0]
		lea	eax, [esp+140h+var_4C]
		add	esp, 44h
		push	eax
		lea	eax, [esp+100h+var_B8]
		push	eax
		push	ebx
		call	sub_10034920
		lea	eax, [esp+108h+var_28]
		push	eax
		lea	eax, [esp+10Ch+var_B8]
		push	esi
		push	eax
		call	sub_10034920
		lea	eax, [esp+114h+var_B8]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		lea	eax, [esp+120h+var_B8]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		mov	ecx, [esp+12Ch+var_4]
		add	esp, 30h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0ECh
		retn
sub_10036160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036370	proc near		; CODE XREF: sub_100340B0+255p

var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= byte ptr -148h
var_124		= byte ptr -124h
var_100		= byte ptr -100h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 15Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+15Ch+var_4], eax
		mov	eax, [esp+15Ch+arg_4]
		push	ebx
		mov	ebx, [esp+160h+arg_1C]
		mov	[esp+160h+var_158], eax
		mov	eax, [esp+160h+arg_8]
		push	ebp
		mov	ebp, [esp+164h+arg_0]
		mov	[esp+164h+var_15C], eax
		mov	eax, [esp+164h+arg_C]
		push	esi
		mov	esi, [esp+168h+arg_20]
		mov	[esp+168h+var_14C], eax
		mov	eax, [esp+168h+arg_10]
		push	edi
		mov	edi, [esp+16Ch+arg_18]
		mov	[esp+16Ch+var_154], eax
		mov	eax, [esp+16Ch+arg_14]
		push	eax
		mov	[esp+170h+var_150], eax
		lea	eax, [esp+170h+var_124]
		push	eax
		call	sub_100357E0
		lea	eax, [esp+174h+var_100]
		push	esi
		push	eax
		call	sub_100357E0
		lea	eax, [esp+17Ch+var_100]
		push	eax
		push	[esp+180h+var_14C]
		lea	eax, [esp+184h+var_28]
		push	eax
		call	sub_10034920
		push	esi
		push	[esp+18Ch+var_150]
		lea	eax, [esp+190h+var_148]
		push	eax
		call	sub_10035D00
		lea	eax, [esp+194h+var_148]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+19Ch+var_124]
		push	eax
		lea	eax, [esp+1A0h+var_148]
		push	eax
		push	eax
		call	sub_100343B0
		lea	eax, [esp+1A8h+var_100]
		push	eax
		lea	eax, [esp+1ACh+var_148]
		push	eax
		push	eax
		call	sub_100343B0
		add	esp, 48h
		lea	eax, [esp+16Ch+var_100]
		push	eax
		lea	eax, [esp+170h+var_B8]
		push	esi
		push	eax
		call	sub_10034920
		lea	eax, [esp+178h+var_B8]
		push	eax
		push	[esp+17Ch+var_154]
		lea	eax, [esp+180h+var_4C]
		push	eax
		call	sub_10034920
		lea	eax, [esp+184h+var_124]
		push	eax
		lea	eax, [esp+188h+var_94]
		push	edi
		push	eax
		call	sub_10034920
		mov	esi, [esp+190h+var_150]
		lea	eax, [esp+190h+var_124]
		push	eax
		lea	eax, [esp+194h+var_B8]
		push	esi
		push	eax
		call	sub_10034920
		lea	eax, [esp+19Ch+var_B8]
		push	eax
		lea	eax, [esp+1A0h+var_70]
		push	ebx
		push	eax
		call	sub_10034920
		lea	eax, [esp+1A8h+var_28]
		push	eax
		lea	eax, [esp+1ACh+var_94]
		push	eax
		lea	eax, [esp+1B0h+var_124]
		push	eax
		call	sub_100343B0
		add	esp, 48h
		lea	eax, [esp+16Ch+var_124]
		push	eax
		call	sub_100347A0
		mov	bl, al
		lea	eax, [esp+170h+var_124]
		push	eax
		push	eax
		lea	eax, [esp+178h+var_100]
		push	eax
		call	sub_10035D00
		lea	eax, [esp+17Ch+var_100]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+184h+var_100]
		push	eax
		lea	eax, [esp+188h+var_124]
		push	eax
		lea	eax, [esp+18Ch+var_B8]
		push	eax
		call	sub_10034920
		lea	eax, [esp+190h+var_4C]
		push	eax
		lea	eax, [esp+194h+var_70]
		push	eax
		lea	eax, [esp+198h+var_DC]
		push	eax
		call	sub_100343B0
		add	esp, 30h
		test	bl, bl
		jz	short loc_1003656B
		lea	eax, [esp+16Ch+var_DC]
		push	eax
		call	sub_100347A0
		add	esp, 4
		test	al, al
		jz	short loc_1003656B
		push	esi
		push	[esp+170h+var_154]
		push	[esp+174h+var_14C]
		push	[esp+178h+var_15C]
		push	[esp+17Ch+var_158]
		push	ebp
		call	sub_10036670
		add	esp, 18h
		jmp	loc_10036652
; ---------------------------------------------------------------------------

loc_1003656B:				; CODE XREF: sub_10036370+1C6j
					; sub_10036370+1DAj
		lea	eax, [esp+16Ch+var_DC]
		push	eax
		push	eax
		push	eax
		call	sub_10035D00
		lea	eax, [esp+178h+var_100]
		push	eax
		lea	eax, [esp+17Ch+var_28]
		push	eax
		lea	eax, [esp+180h+var_94]
		push	eax
		call	sub_10034920
		lea	eax, [esp+184h+var_124]
		push	eax
		lea	eax, [esp+188h+var_148]
		push	eax
		push	[esp+18Ch+var_15C]
		call	sub_10034920
		lea	eax, [esp+190h+var_DC]
		push	eax
		lea	eax, [esp+194h+var_70]
		push	eax
		call	sub_100357E0
		lea	eax, [esp+198h+var_B8]
		push	eax
		lea	eax, [esp+19Ch+var_70]
		push	eax
		push	ebp
		call	sub_100343B0
		lea	eax, [esp+1A4h+var_94]
		push	eax
		push	ebp
		push	ebp
		call	sub_100343B0
		add	esp, 44h
		lea	eax, [esp+16Ch+var_94]
		push	eax
		push	ebp
		push	ebp
		call	sub_100343B0
		push	ebp
		lea	eax, [esp+17Ch+var_94]
		push	eax
		lea	eax, [esp+180h+var_148]
		push	eax
		call	sub_100343B0
		mov	ebx, [esp+184h+var_158]
		lea	eax, [esp+184h+var_DC]
		push	eax
		lea	eax, [esp+188h+var_148]
		push	eax
		push	ebx
		call	sub_10034920
		lea	eax, [esp+190h+var_B8]
		push	eax
		lea	eax, [esp+194h+var_4C]
		push	eax
		lea	eax, [esp+198h+var_148]
		push	eax
		call	sub_10034920
		lea	eax, [esp+19Ch+var_148]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		lea	eax, [esp+1A8h+var_148]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		add	esp, 48h

loc_10036652:				; CODE XREF: sub_10036370+1F6j
		mov	ecx, [esp+16Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 15Ch
		retn
sub_10036370	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036670	proc near		; CODE XREF: sub_10036370+1EEp
					; sub_100368C0+A0p ...

var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0E4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0E4h+var_4], eax
		mov	eax, [esp+0E4h+arg_0]
		push	ebx
		mov	ebx, [esp+0E8h+arg_10]
		push	ebp
		mov	ebp, [esp+0ECh+arg_8]
		push	esi
		mov	esi, [esp+0F0h+arg_C]
		mov	[esp+0F0h+var_E0], eax
		mov	eax, [esp+0F0h+arg_4]
		push	edi
		mov	edi, [esp+0F4h+arg_14]
		mov	[esp+0F4h+var_E4], eax
		lea	eax, [esp+0F4h+var_70]
		push	edi
		push	eax
		call	sub_100357E0
		lea	eax, [esp+0FCh+var_28]
		push	ebx
		push	eax
		call	sub_100357E0
		lea	eax, [esp+104h+var_28]
		push	eax
		lea	eax, [esp+108h+var_B8]
		push	esi
		push	eax
		call	sub_10034920
		lea	eax, [esp+110h+var_70]
		push	eax
		lea	eax, [esp+114h+var_DC]
		push	esi
		push	eax
		call	sub_10035D00
		lea	eax, [esp+11Ch+var_70]
		push	eax
		lea	eax, [esp+120h+var_94]
		push	esi
		push	eax
		call	sub_100343B0
		lea	eax, [esp+128h+var_94]
		push	eax
		lea	eax, [esp+12Ch+var_DC]
		push	eax
		lea	eax, [esp+130h+var_4C]
		push	eax
		call	sub_10034920
		add	esp, 40h
		lea	eax, [esp+0F4h+var_4C]
		push	eax
		call	sub_10035590
		push	edi
		lea	eax, [esp+0FCh+var_DC]
		push	ebx
		push	eax
		call	sub_10035D00
		lea	eax, [esp+104h+var_DC]
		push	eax
		push	eax
		call	sub_100357E0
		lea	eax, [esp+10Ch+var_28]
		push	eax
		lea	eax, [esp+110h+var_DC]
		push	eax
		push	eax
		call	sub_100343B0
		lea	eax, [esp+118h+var_70]
		push	eax
		lea	eax, [esp+11Ch+var_DC]
		push	eax
		push	ebp
		call	sub_100343B0
		lea	eax, [esp+124h+var_B8]
		push	eax
		call	sub_10035640
		mov	ebx, [esp+128h+var_E0]
		lea	eax, [esp+128h+var_4C]
		push	eax
		push	ebx
		call	sub_100357E0
		lea	eax, [esp+130h+var_B8]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		add	esp, 48h
		lea	eax, [esp+0F4h+var_B8]
		push	eax
		push	ebx
		push	ebx
		call	sub_100343B0
		push	ebx
		lea	eax, [esp+104h+var_B8]
		push	eax
		lea	eax, [esp+108h+var_DC]
		push	eax
		call	sub_100343B0
		lea	eax, [esp+10Ch+var_DC]
		push	eax
		lea	eax, [esp+110h+var_4C]
		push	eax
		lea	eax, [esp+114h+var_DC]
		push	eax
		call	sub_10034920
		lea	eax, [esp+118h+var_28]
		push	eax
		lea	eax, [esp+11Ch+var_94]
		push	eax
		call	sub_100357E0
		lea	eax, [esp+120h+var_94]
		push	eax
		call	sub_10035710
		lea	eax, [esp+124h+var_94]
		push	eax
		lea	eax, [esp+128h+var_DC]
		push	eax
		push	[esp+12Ch+var_E4]
		call	sub_100343B0
		mov	ecx, [esp+130h+var_4]
		add	esp, 3Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0E4h
		retn
sub_10036670	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036830	proc near		; CODE XREF: sub_100340B0+27Fp

var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 4Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+4Ch+var_4], eax
		mov	eax, [esp+4Ch+arg_10]
		push	ebx
		mov	ebx, [esp+50h+arg_C]
		push	ebp
		mov	ebp, [esp+54h+arg_4]
		push	esi
		mov	esi, [esp+58h+arg_8]
		push	edi
		mov	edi, [esp+5Ch+arg_0]
		push	eax
		lea	eax, [esp+60h+var_4C]
		push	eax
		call	sub_10034470
		lea	eax, [esp+64h+var_4C]
		push	eax
		lea	eax, [esp+68h+var_28]
		push	eax
		call	sub_100357E0
		lea	eax, [esp+6Ch+var_28]
		push	eax
		push	esi
		push	edi
		call	sub_10034920
		lea	eax, [esp+78h+var_28]
		push	eax
		lea	eax, [esp+7Ch+var_4C]
		push	eax
		push	eax
		call	sub_10034920
		lea	eax, [esp+84h+var_4C]
		push	eax
		push	ebx
		push	ebp
		call	sub_10034920
		mov	ecx, [esp+90h+var_4]
		add	esp, 34h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
sub_10036830	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100368C0	proc near		; CODE XREF: sub_10033E00+80p
					; sub_100340B0+18Cp

var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0D4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0D4h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ebx, [esp+0E4h+arg_4]
		or	eax, 0FFFFFFFFh
		mov	ebp, [esp+0E4h+arg_0]
		mov	[esp+0E4h+var_D4], eax
		xor	eax, eax
		mov	esi, [esp+0E4h+arg_8]
		mov	[ebp+0], eax
		mov	[ebp+4], eax
		mov	[ebp+8], eax
		mov	[ebp+0Ch], eax
		mov	[ebp+10h], eax
		mov	[ebp+14h], eax
		mov	[ebp+18h], eax
		mov	[ebp+1Ch], eax
		mov	[ebp+20h], eax
		mov	[ebx], eax
		mov	[ebx+4], eax
		mov	[ebx+8], eax
		mov	[ebx+0Ch], eax
		mov	[ebx+10h], eax
		mov	[ebx+14h], eax
		mov	[ebx+18h], eax
		mov	[ebx+1Ch], eax
		mov	[ebx+20h], eax
		mov	[esi], eax
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		mov	[esi+10h], eax
		mov	[esi+14h], eax
		mov	[esi+18h], eax
		mov	edi, 5Fh
		mov	[esi+1Ch], eax
		mov	[esp+0E4h+var_BC], ebx
		mov	[esi+20h], eax
		mov	[esp+0E4h+var_C8], eax
		mov	[esp+0E4h+var_CC], edi

loc_10036956:				; CODE XREF: sub_100368C0+490j
		test	eax, eax
		jz	short loc_10036968
		push	esi
		push	ebx
		push	ebp
		push	esi
		push	ebx
		push	ebp
		call	sub_10036670
		add	esp, 18h

loc_10036968:				; CODE XREF: sub_100368C0+98j
		mov	eax, edi
		mov	[esp+0E4h+var_C4], offset dword_1004C7E0
		mov	[esp+0E4h+var_D0], eax
		mov	[esp+0E4h+var_C0], 2
		mov	edi, edi

loc_10036980:				; CODE XREF: sub_100368C0+475j
		mov	edi, [esp+0E4h+arg_C]
		lea	ecx, [eax+80h]
		lea	edx, [eax+40h]
		lea	ebx, [eax-40h]
		mov	eax, ecx
		sar	eax, 3
		and	cl, 7
		movzx	eax, byte ptr [eax+edi]
		shr	al, cl
		mov	ecx, [esp+0E4h+arg_C]
		and	al, 1
		movsx	edi, al
		mov	eax, edx
		sar	eax, 3
		and	dl, 7
		add	edi, edi
		movzx	eax, byte ptr [eax+ecx]
		mov	cl, dl
		mov	edx, [esp+0E4h+arg_C]
		shr	al, cl
		mov	ecx, [esp+0E4h+var_D0]
		and	al, 1
		movsx	eax, al
		or	edi, eax
		mov	eax, ecx
		sar	eax, 3
		and	cl, 7
		add	edi, edi
		movzx	eax, byte ptr [eax+edx]
		shr	al, cl
		and	al, 1
		movsx	eax, al
		or	edi, eax
		mov	eax, ebx
		sar	eax, 3
		and	bl, 7
		mov	cl, bl
		add	edi, edi
		mov	ebx, [esp+0E4h+var_C4]
		movzx	eax, byte ptr [eax+edx]
		shr	al, cl
		and	al, 1
		movsx	eax, al
		or	edi, eax
		lea	eax, [esp+0E4h+var_94]
		push	edi
		push	ebx
		push	eax
		lea	eax, [esp+0F0h+var_B8]
		push	eax
		call	sub_100372B0
		lea	eax, [esp+0F4h+var_94]
		add	ebx, 438h
		push	eax
		lea	eax, [esp+0F8h+var_B8]
		mov	[esp+0F8h+var_C4], ebx
		mov	ebx, [esp+0F8h+var_BC]
		push	eax
		push	esi
		push	ebx
		push	ebp
		lea	eax, [esp+108h+var_28]
		push	eax
		lea	eax, [esp+10Ch+var_4C]
		push	eax
		lea	eax, [esp+110h+var_70]
		push	eax
		call	sub_10036160
		mov	ecx, [ebp+0]
		add	esp, 30h
		xor	ecx, [esp+0E4h+var_B8]
		mov	edx, [esp+0E4h+var_D4]
		and	ecx, edx
		xor	[ebp+0], ecx
		mov	ecx, [ebp+4]
		xor	ecx, [esp+0E4h+var_B4]
		and	ecx, edx
		xor	[ebp+4], ecx
		mov	ecx, [ebp+8]
		xor	ecx, [esp+0E4h+var_B0]
		and	ecx, edx
		xor	[ebp+8], ecx
		mov	eax, edx
		mov	ecx, [ebp+0Ch]
		not	eax
		xor	ecx, [esp+0E4h+var_AC]
		and	ecx, edx
		xor	[ebp+0Ch], ecx
		mov	ecx, [ebp+10h]
		xor	ecx, [esp+0E4h+var_A8]
		and	ecx, edx
		xor	[ebp+10h], ecx
		mov	ecx, [ebp+14h]
		xor	ecx, [esp+0E4h+var_A4]
		and	ecx, edx
		xor	[ebp+14h], ecx
		mov	ecx, [ebp+18h]
		xor	ecx, [esp+0E4h+var_A0]
		and	ecx, edx
		xor	[ebp+18h], ecx
		mov	ecx, [ebp+1Ch]
		xor	ecx, [esp+0E4h+var_9C]
		and	ecx, edx
		xor	[ebp+1Ch], ecx
		mov	ecx, [ebp+20h]
		xor	ecx, [esp+0E4h+var_98]
		and	ecx, edx
		xor	[ebp+20h], ecx
		mov	ecx, [ebx]
		xor	ecx, [esp+0E4h+var_94]
		and	ecx, edx
		xor	[ebx], ecx
		mov	ecx, [ebx+4]
		xor	ecx, [esp+0E4h+var_90]
		and	ecx, edx
		xor	[ebx+4], ecx
		mov	ecx, [esp+0E4h+var_8C]
		xor	ecx, [ebx+8]
		and	ecx, edx
		xor	[ebx+8], ecx
		mov	ecx, [esp+0E4h+var_88]
		xor	ecx, [ebx+0Ch]
		and	ecx, edx
		xor	[ebx+0Ch], ecx
		mov	ecx, [esp+0E4h+var_84]
		xor	ecx, [ebx+10h]
		and	ecx, edx
		xor	[ebx+10h], ecx
		mov	ecx, [esp+0E4h+var_80]
		xor	ecx, [ebx+14h]
		and	ecx, edx
		xor	[ebx+14h], ecx
		mov	ecx, [esp+0E4h+var_7C]
		xor	ecx, [ebx+18h]
		and	ecx, edx
		xor	[ebx+18h], ecx
		mov	ecx, [esp+0E4h+var_78]
		xor	ecx, [ebx+1Ch]
		and	ecx, edx
		xor	[ebx+1Ch], ecx
		mov	ecx, [esp+0E4h+var_74]
		xor	ecx, [ebx+20h]
		and	ecx, edx
		xor	[ebx+20h], ecx
		mov	ecx, [esi]
		and	[esi+4], eax
		xor	ecx, 2
		and	ecx, edx
		mov	eax, edx
		xor	[esi], ecx
		not	eax
		mov	ecx, [esi+0Ch]
		and	[esi+8], eax
		xor	ecx, 0FFFF800h
		and	ecx, edx
		xor	[esi+0Ch], ecx
		mov	ecx, [esi+10h]
		xor	ecx, 1FFFFFFFh
		and	ecx, edx
		xor	[esi+10h], ecx
		mov	ecx, [esi+14h]
		xor	ecx, 0FFFFFFFh
		and	ecx, edx
		mov	eax, edx
		xor	[esi+14h], ecx
		dec	edi
		mov	ecx, [esi+18h]
		not	eax
		and	[esi+20h], eax
		xor	ecx, 1FBFFFFFh
		and	ecx, edx
		shr	edi, 1Fh
		xor	[esi+18h], ecx
		dec	edi
		mov	ecx, [esi+1Ch]
		xor	ecx, 1FFFFFFh
		and	ecx, edx
		not	edx
		xor	[esi+1Ch], ecx
		and	edx, edi
		mov	ecx, [ebp+0]
		xor	ecx, [esp+0E4h+var_70]
		and	ecx, edx
		xor	[ebp+0], ecx
		mov	ecx, [esp+0E4h+var_6C]
		xor	ecx, [ebp+4]
		and	ecx, edx
		xor	[ebp+4], ecx
		mov	ecx, [esp+0E4h+var_68]
		xor	ecx, [ebp+8]
		and	ecx, edx
		xor	[ebp+8], ecx
		mov	ecx, [esp+0E4h+var_64]
		xor	ecx, [ebp+0Ch]
		and	ecx, edx
		xor	[ebp+0Ch], ecx
		mov	ecx, [esp+0E4h+var_60]
		xor	ecx, [ebp+10h]
		and	ecx, edx
		xor	[ebp+10h], ecx
		mov	ecx, [esp+0E4h+var_5C]
		xor	ecx, [ebp+14h]
		and	ecx, edx
		xor	[ebp+14h], ecx
		mov	ecx, [esp+0E4h+var_58]
		xor	ecx, [ebp+18h]
		and	ecx, edx
		xor	[ebp+18h], ecx
		mov	ecx, [esp+0E4h+var_54]
		xor	ecx, [ebp+1Ch]
		and	ecx, edx
		xor	[ebp+1Ch], ecx
		mov	ecx, [esp+0E4h+var_50]
		xor	ecx, [ebp+20h]
		and	ecx, edx
		xor	[ebp+20h], ecx
		mov	ecx, [esp+0E4h+var_4C]
		xor	ecx, [ebx]
		and	ecx, edx
		xor	[ebx], ecx
		mov	ecx, [esp+0E4h+var_48]
		xor	ecx, [ebx+4]
		and	ecx, edx
		xor	[ebx+4], ecx
		mov	ecx, [esp+0E4h+var_44]
		xor	ecx, [ebx+8]
		and	ecx, edx
		xor	[ebx+8], ecx
		mov	ecx, [esp+0E4h+var_40]
		xor	ecx, [ebx+0Ch]
		and	ecx, edx
		xor	[ebx+0Ch], ecx
		mov	ecx, [esp+0E4h+var_3C]
		xor	ecx, [ebx+10h]
		and	ecx, edx
		xor	[ebx+10h], ecx
		mov	ecx, [esp+0E4h+var_38]
		xor	ecx, [ebx+14h]
		and	ecx, edx
		xor	[ebx+14h], ecx
		mov	ecx, [esp+0E4h+var_34]
		xor	ecx, [ebx+18h]
		and	ecx, edx
		xor	[ebx+18h], ecx
		not	edi
		mov	ecx, [esp+0E4h+var_30]
		xor	ecx, [ebx+1Ch]
		and	ecx, edx
		mov	eax, [esp+0E4h+var_D0]
		xor	[ebx+1Ch], ecx
		add	eax, 20h
		mov	ecx, [esp+0E4h+var_2C]
		xor	ecx, [ebx+20h]
		and	ecx, edx
		and	[esp+0E4h+var_D4], edi
		xor	[ebx+20h], ecx
		mov	ecx, [esp+0E4h+var_28]
		xor	ecx, [esi]
		and	ecx, edx
		mov	[esp+0E4h+var_D0], eax
		xor	[esi], ecx
		mov	ecx, [esp+0E4h+var_24]
		xor	ecx, [esi+4]
		and	ecx, edx
		xor	[esi+4], ecx
		mov	ecx, [esp+0E4h+var_20]
		xor	ecx, [esi+8]
		and	ecx, edx
		xor	[esi+8], ecx
		mov	ecx, [esp+0E4h+var_1C]
		xor	ecx, [esi+0Ch]
		and	ecx, edx
		xor	[esi+0Ch], ecx
		mov	ecx, [esp+0E4h+var_18]
		xor	ecx, [esi+10h]
		and	ecx, edx
		xor	[esi+10h], ecx
		mov	ecx, [esp+0E4h+var_14]
		xor	ecx, [esi+14h]
		and	ecx, edx
		xor	[esi+14h], ecx
		mov	ecx, [esp+0E4h+var_10]
		xor	ecx, [esi+18h]
		and	ecx, edx
		xor	[esi+18h], ecx
		mov	ecx, [esi+1Ch]
		xor	ecx, [esp+0E4h+var_C]
		and	ecx, edx
		xor	[esi+1Ch], ecx
		mov	ecx, [esi+20h]
		xor	ecx, [esp+0E4h+var_8]
		and	ecx, edx
		xor	[esi+20h], ecx
		dec	[esp+0E4h+var_C0]
		jnz	loc_10036980
		mov	edi, [esp+0E4h+var_CC]
		mov	eax, [esp+0E4h+var_C8]
		dec	edi
		inc	eax
		mov	[esp+0E4h+var_CC], edi
		mov	[esp+0E4h+var_C8], eax
		cmp	edi, 3Fh
		jg	loc_10036956
		mov	ecx, [esp+0E4h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D4h
		retn
sub_100368C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036D70	proc near		; CODE XREF: sub_10033F30+D4p
					; sub_100340B0+1BEp

var_7B0		= dword	ptr -7B0h
var_7AC		= dword	ptr -7ACh
var_7A8		= dword	ptr -7A8h
var_7A4		= dword	ptr -7A4h
var_7A0		= dword	ptr -7A0h
var_79C		= dword	ptr -79Ch
var_798		= dword	ptr -798h
var_794		= dword	ptr -794h
var_790		= dword	ptr -790h
var_78C		= dword	ptr -78Ch
var_788		= dword	ptr -788h
var_784		= dword	ptr -784h
var_780		= dword	ptr -780h
var_77C		= dword	ptr -77Ch
var_778		= dword	ptr -778h
var_774		= dword	ptr -774h
var_770		= dword	ptr -770h
var_76C		= dword	ptr -76Ch
var_768		= dword	ptr -768h
var_764		= dword	ptr -764h
var_760		= dword	ptr -760h
var_75C		= dword	ptr -75Ch
var_758		= dword	ptr -758h
var_754		= dword	ptr -754h
var_750		= dword	ptr -750h
var_74C		= dword	ptr -74Ch
var_748		= dword	ptr -748h
var_744		= dword	ptr -744h
var_740		= dword	ptr -740h
var_73C		= dword	ptr -73Ch
var_738		= dword	ptr -738h
var_734		= dword	ptr -734h
var_730		= dword	ptr -730h
var_72C		= dword	ptr -72Ch
var_728		= dword	ptr -728h
var_724		= dword	ptr -724h
var_720		= dword	ptr -720h
var_71C		= dword	ptr -71Ch
var_718		= dword	ptr -718h
var_714		= dword	ptr -714h
var_710		= dword	ptr -710h
var_70C		= dword	ptr -70Ch
var_708		= dword	ptr -708h
var_704		= dword	ptr -704h
var_700		= dword	ptr -700h
var_6FC		= dword	ptr -6FCh
var_6F8		= dword	ptr -6F8h
var_6F4		= dword	ptr -6F4h
var_6F0		= dword	ptr -6F0h
var_6EC		= dword	ptr -6ECh
var_6E8		= dword	ptr -6E8h
var_6E4		= dword	ptr -6E4h
var_6E0		= dword	ptr -6E0h
var_6DC		= dword	ptr -6DCh
var_6D8		= dword	ptr -6D8h
var_6D4		= dword	ptr -6D4h
var_6D0		= dword	ptr -6D0h
var_6CC		= dword	ptr -6CCh
var_6C8		= dword	ptr -6C8h
var_6C4		= byte ptr -6C4h
var_6A0		= byte ptr -6A0h
var_67C		= byte ptr -67Ch
var_658		= byte ptr -658h
var_634		= byte ptr -634h
var_610		= byte ptr -610h
var_5C8		= byte ptr -5C8h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 7B0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+7B0h+var_4], eax
		mov	eax, [esp+7B0h+arg_4]
		push	ebx
		mov	ebx, [esp+7B4h+arg_8]
		push	ebp
		mov	ebp, [esp+7B8h+arg_0]
		push	esi
		push	edi
		push	6Ch		; size_t
		mov	[esp+7C4h+var_7A4], eax
		lea	eax, [esp+7C4h+var_6C4]
		push	0		; int
		mov	[esp+7C8h+var_7A8], ebp
		mov	ebp, [esp+7C8h+arg_10]
		mov	[esp+7C8h+var_7A0], ebx
		mov	ebx, [esp+7C8h+arg_C]
		push	eax		; void *
		mov	[esp+7CCh+var_7B0], ebx
		mov	[esp+7CCh+var_7AC], ebp
		call	memset
		mov	esi, ebx
		lea	edi, [esp+7CCh+var_658]
		mov	ecx, 9
		lea	ebx, [esp+7CCh+var_5C8]
		rep movsd
		mov	esi, ebp
		lea	edi, [esp+7CCh+var_634]
		mov	ecx, 9
		add	esp, 0Ch
		rep movsd
		mov	ecx, 9
		lea	edi, [esp+7C0h+var_610]
		mov	esi, offset dword_1004C750
		mov	ebp, 2
		rep movsd

loc_10036E12:				; CODE XREF: sub_10036D70+103j
		mov	eax, ebp
		lea	esi, [ebx+24h]
		shr	eax, 1
		lea	edi, [ebx-24h]
		imul	ecx, eax, 6Ch
		lea	eax, [esp+7C0h+var_67C]
		add	eax, ecx
		push	eax
		lea	eax, [esp+7C4h+var_6A0]
		add	eax, ecx
		push	eax
		lea	eax, [esp+7C8h+var_6C4]
		add	eax, ecx
		push	eax
		push	esi
		push	ebx
		push	edi
		call	sub_10036670
		push	[esp+7D8h+var_7AC]
		lea	eax, [ebx+90h]
		push	[esp+7DCh+var_7B0]
		push	esi
		push	ebx
		push	edi
		push	eax
		lea	eax, [ebx+6Ch]
		push	eax
		lea	eax, [ebx+48h]
		push	eax
		call	sub_10036160
		add	ebp, 2
		add	esp, 38h
		add	ebx, 0D8h
		cmp	ebp, 10h
		jl	short loc_10036E12
		mov	ebp, [esp+7C0h+var_7A8]
		xor	eax, eax
		mov	edi, [esp+7C0h+var_7A4]
		mov	ebx, [esp+7C0h+var_7A0]
		mov	[ebp+0], eax
		mov	[ebp+4], eax
		mov	[ebp+8], eax
		mov	[ebp+0Ch], eax
		mov	[ebp+10h], eax
		mov	[ebp+14h], eax
		mov	[ebp+18h], eax
		mov	[ebp+1Ch], eax
		mov	[ebp+20h], eax
		mov	[edi], eax
		mov	[edi+4], eax
		mov	[edi+8], eax
		mov	[edi+0Ch], eax
		mov	[edi+10h], eax
		mov	[edi+14h], eax
		mov	[edi+18h], eax
		mov	[edi+1Ch], eax
		mov	[edi+20h], eax
		mov	[ebx], eax
		mov	[ebx+4], eax
		mov	[ebx+8], eax
		mov	[ebx+0Ch], eax
		mov	[ebx+10h], eax
		mov	[ebx+14h], eax
		mov	[ebx+18h], eax
		mov	[ebx+1Ch], eax
		mov	[ebx+20h], eax
		or	eax, 0FFFFFFFFh
		xor	edx, edx
		mov	[esp+7C0h+var_7B0], eax
		mov	[esp+7C0h+var_7AC], edx
		nop

loc_10036EE0:				; CODE XREF: sub_10036D70+516j
		test	edx, edx
		jz	short loc_10036F1A
		push	ebx
		push	edi
		push	ebp
		push	ebx
		push	edi
		push	ebp
		call	sub_10036670
		push	ebx
		push	edi
		push	ebp
		push	ebx
		push	edi
		push	ebp
		call	sub_10036670
		push	ebx
		push	edi
		push	ebp
		push	ebx
		push	edi
		push	ebp
		call	sub_10036670
		add	esp, 48h
		push	ebx
		push	edi
		push	ebp
		push	ebx
		push	edi
		push	ebp
		call	sub_10036670
		mov	edx, [esp+7D8h+var_7AC]
		add	esp, 18h

loc_10036F1A:				; CODE XREF: sub_10036D70+172j
		mov	eax, [esp+7C0h+arg_14]
		mov	ecx, edx
		shr	ecx, 1
		sub	eax, ecx
		movzx	esi, byte ptr [eax+1Fh]
		test	dl, 1
		jz	short loc_10036F35
		and	esi, 0Fh
		jmp	short loc_10036F38
; ---------------------------------------------------------------------------

loc_10036F35:				; CODE XREF: sub_10036D70+1BEj
		shr	esi, 4

loc_10036F38:				; CODE XREF: sub_10036D70+1C3j
		push	esi
		lea	eax, [esp+7C4h+var_6C4]
		push	eax
		lea	eax, [esp+7C8h+var_754]
		push	eax
		lea	eax, [esp+7CCh+var_778]
		push	eax
		lea	eax, [esp+7D0h+var_79C]
		push	eax
		call	sub_100373C0
		lea	eax, [esp+7D4h+var_754]
		push	eax
		lea	eax, [esp+7D8h+var_778]
		push	eax
		lea	eax, [esp+7DCh+var_79C]
		push	eax
		push	ebx
		push	edi
		push	ebp
		lea	eax, [esp+7ECh+var_70C]
		push	eax
		lea	eax, [esp+7F0h+var_6E8]
		push	eax
		lea	eax, [esp+7F4h+var_730]
		push	eax
		call	sub_10035E90
		mov	edx, [esp+7F8h+var_7B0]
		add	esp, 38h
		mov	ecx, [ebp+0]
		xor	ecx, [esp+7C0h+var_79C]
		and	ecx, edx
		xor	[ebp+0], ecx
		mov	ecx, [ebp+4]
		xor	ecx, [esp+7C0h+var_798]
		and	ecx, edx
		xor	[ebp+4], ecx
		mov	ecx, [ebp+8]
		xor	ecx, [esp+7C0h+var_794]
		and	ecx, edx
		xor	[ebp+8], ecx
		mov	ecx, [esp+7C0h+var_790]
		xor	ecx, [ebp+0Ch]
		and	ecx, edx
		xor	[ebp+0Ch], ecx
		mov	ecx, [esp+7C0h+var_78C]
		xor	ecx, [ebp+10h]
		and	ecx, edx
		xor	[ebp+10h], ecx
		mov	ecx, [esp+7C0h+var_788]
		xor	ecx, [ebp+14h]
		and	ecx, edx
		xor	[ebp+14h], ecx
		mov	ecx, [esp+7C0h+var_784]
		xor	ecx, [ebp+18h]
		and	ecx, edx
		xor	[ebp+18h], ecx
		mov	ecx, [esp+7C0h+var_780]
		xor	ecx, [ebp+1Ch]
		and	ecx, edx
		xor	[ebp+1Ch], ecx
		mov	ecx, [esp+7C0h+var_77C]
		xor	ecx, [ebp+20h]
		and	ecx, edx
		xor	[ebp+20h], ecx
		mov	ecx, [esp+7C0h+var_778]
		xor	ecx, [edi]
		and	ecx, edx
		xor	[edi], ecx
		mov	ecx, [esp+7C0h+var_774]
		xor	ecx, [edi+4]
		and	ecx, edx
		xor	[edi+4], ecx
		mov	ecx, [esp+7C0h+var_770]
		xor	ecx, [edi+8]
		and	ecx, edx
		xor	[edi+8], ecx
		mov	ecx, [esp+7C0h+var_76C]
		xor	ecx, [edi+0Ch]
		and	ecx, edx
		xor	[edi+0Ch], ecx
		mov	ecx, [esp+7C0h+var_768]
		xor	ecx, [edi+10h]
		dec	esi
		and	ecx, edx
		shr	esi, 1Fh
		xor	[edi+10h], ecx
		dec	esi
		mov	ecx, [esp+7C0h+var_764]
		xor	ecx, [edi+14h]
		and	ecx, edx
		xor	[edi+14h], ecx
		mov	ecx, [esp+7C0h+var_760]
		xor	ecx, [edi+18h]
		and	ecx, edx
		xor	[edi+18h], ecx
		mov	ecx, [esp+7C0h+var_75C]
		xor	ecx, [edi+1Ch]
		and	ecx, edx
		xor	[edi+1Ch], ecx
		mov	ecx, [esp+7C0h+var_758]
		xor	ecx, [edi+20h]
		and	ecx, edx
		xor	[edi+20h], ecx
		mov	ecx, [ebx]
		xor	ecx, [esp+7C0h+var_754]
		and	ecx, edx
		xor	[ebx], ecx
		mov	ecx, [ebx+4]
		xor	ecx, [esp+7C0h+var_750]
		and	ecx, edx
		xor	[ebx+4], ecx
		mov	ecx, [ebx+8]
		xor	ecx, [esp+7C0h+var_74C]
		and	ecx, edx
		xor	[ebx+8], ecx
		mov	ecx, [ebx+0Ch]
		xor	ecx, [esp+7C0h+var_748]
		and	ecx, edx
		xor	[ebx+0Ch], ecx
		mov	ecx, [ebx+10h]
		xor	ecx, [esp+7C0h+var_744]
		and	ecx, edx
		xor	[ebx+10h], ecx
		mov	ecx, [ebx+14h]
		xor	ecx, [esp+7C0h+var_740]
		and	ecx, edx
		xor	[ebx+14h], ecx
		mov	ecx, [ebx+18h]
		xor	ecx, [esp+7C0h+var_73C]
		and	ecx, edx
		xor	[ebx+18h], ecx
		mov	ecx, [ebx+1Ch]
		xor	ecx, [esp+7C0h+var_738]
		and	ecx, edx
		xor	[ebx+1Ch], ecx
		mov	ecx, [ebx+20h]
		xor	ecx, [esp+7C0h+var_734]
		and	ecx, edx
		not	edx
		xor	[ebx+20h], ecx
		and	edx, esi
		mov	ecx, [ebp+0]
		xor	ecx, [esp+7C0h+var_730]
		and	ecx, edx
		xor	[ebp+0], ecx
		mov	ecx, [ebp+4]
		xor	ecx, [esp+7C0h+var_72C]
		and	ecx, edx
		xor	[ebp+4], ecx
		mov	ecx, [ebp+8]
		xor	ecx, [esp+7C0h+var_728]
		and	ecx, edx
		xor	[ebp+8], ecx
		mov	ecx, [ebp+0Ch]
		xor	ecx, [esp+7C0h+var_724]
		and	ecx, edx
		xor	[ebp+0Ch], ecx
		mov	ecx, [ebp+10h]
		xor	ecx, [esp+7C0h+var_720]
		and	ecx, edx
		xor	[ebp+10h], ecx
		mov	ecx, [esp+7C0h+var_71C]
		xor	ecx, [ebp+14h]
		and	ecx, edx
		xor	[ebp+14h], ecx
		mov	ecx, [esp+7C0h+var_718]
		xor	ecx, [ebp+18h]
		and	ecx, edx
		xor	[ebp+18h], ecx
		mov	ecx, [esp+7C0h+var_714]
		xor	ecx, [ebp+1Ch]
		and	ecx, edx
		xor	[ebp+1Ch], ecx
		mov	ecx, [ebp+20h]
		xor	ecx, [esp+7C0h+var_710]
		and	ecx, edx
		xor	[ebp+20h], ecx
		mov	ecx, [edi]
		xor	ecx, [esp+7C0h+var_6E8]
		and	ecx, edx
		xor	[edi], ecx
		mov	ecx, [edi+4]
		xor	ecx, [esp+7C0h+var_6E4]
		and	ecx, edx
		xor	[edi+4], ecx
		mov	ecx, [edi+8]
		xor	ecx, [esp+7C0h+var_6E0]
		and	ecx, edx
		xor	[edi+8], ecx
		mov	ecx, [edi+0Ch]
		xor	ecx, [esp+7C0h+var_6DC]
		and	ecx, edx
		xor	[edi+0Ch], ecx
		mov	ecx, [edi+10h]
		xor	ecx, [esp+7C0h+var_6D8]
		and	ecx, edx
		xor	[edi+10h], ecx
		mov	ecx, [edi+14h]
		xor	ecx, [esp+7C0h+var_6D4]
		and	ecx, edx
		xor	[edi+14h], ecx
		mov	ecx, [edi+18h]
		xor	ecx, [esp+7C0h+var_6D0]
		and	ecx, edx
		xor	[edi+18h], ecx
		mov	ecx, [edi+1Ch]
		xor	ecx, [esp+7C0h+var_6CC]
		and	ecx, edx
		xor	[edi+1Ch], ecx
		mov	ecx, [edi+20h]
		xor	ecx, [esp+7C0h+var_6C8]
		and	ecx, edx
		xor	[edi+20h], ecx
		mov	ecx, [ebx]
		xor	ecx, [esp+7C0h+var_70C]
		and	ecx, edx
		xor	[ebx], ecx
		mov	ecx, [ebx+4]
		xor	ecx, [esp+7C0h+var_708]
		and	ecx, edx
		xor	[ebx+4], ecx
		mov	ecx, [ebx+8]
		xor	ecx, [esp+7C0h+var_704]
		and	ecx, edx
		xor	[ebx+8], ecx
		mov	ecx, [ebx+0Ch]
		xor	ecx, [esp+7C0h+var_700]
		and	ecx, edx
		xor	[ebx+0Ch], ecx
		mov	ecx, [ebx+10h]
		xor	ecx, [esp+7C0h+var_6FC]
		and	ecx, edx
		xor	[ebx+10h], ecx
		mov	ecx, [ebx+14h]
		xor	ecx, [esp+7C0h+var_6F8]
		and	ecx, edx
		xor	[ebx+14h], ecx
		mov	ecx, [ebx+18h]
		xor	ecx, [esp+7C0h+var_6F4]
		and	ecx, edx
		xor	[ebx+18h], ecx
		mov	ecx, [ebx+1Ch]
		xor	ecx, [esp+7C0h+var_6F0]
		and	ecx, edx
		not	esi
		xor	[ebx+1Ch], ecx
		mov	ecx, [ebx+20h]
		xor	ecx, [esp+7C0h+var_6EC]
		and	[esp+7C0h+var_7B0], esi
		and	ecx, edx
		mov	edx, [esp+7C0h+var_7AC]
		xor	[ebx+20h], ecx
		inc	edx
		mov	[esp+7C0h+var_7AC], edx
		cmp	edx, 40h
		jl	loc_10036EE0
		mov	ecx, [esp+7C0h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7B0h
		retn
sub_10036D70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100372B0	proc near		; CODE XREF: sub_100368C0+151p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		xor	eax, eax
		mov	ebx, [esp+8+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		xor	ecx, ecx
		mov	ebp, 1
		mov	[edi], eax
		mov	[edi+4], eax
		mov	[edi+8], eax
		mov	[edi+0Ch], eax
		mov	[edi+10h], eax
		mov	[edi+14h], eax
		mov	[edi+18h], eax
		mov	[edi+1Ch], eax
		mov	[edi+20h], eax
		mov	eax, [esp+10h+arg_4]
		mov	[eax], ecx
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	[eax+14h], ecx
		mov	[eax+18h], ecx
		mov	[eax+1Ch], ecx
		mov	[eax+20h], ecx
		lea	ecx, [ecx+0]

loc_10037300:				; CODE XREF: sub_100372B0+FCj
		mov	edx, ebp
		lea	ebx, [ebx+48h]
		xor	edx, [esp+10h+arg_C]
		inc	ebp
		mov	ecx, edx
		shr	ecx, 2
		or	edx, ecx
		mov	ecx, [ebx-48h]
		mov	esi, edx
		shr	esi, 1
		or	esi, edx
		and	esi, 1
		dec	esi
		and	ecx, esi
		or	[edi], ecx
		mov	ecx, [ebx-44h]
		and	ecx, esi
		or	[edi+4], ecx
		mov	ecx, [ebx-40h]
		and	ecx, esi
		or	[edi+8], ecx
		mov	ecx, [ebx-3Ch]
		and	ecx, esi
		or	[edi+0Ch], ecx
		mov	ecx, [ebx-38h]
		and	ecx, esi
		or	[edi+10h], ecx
		mov	ecx, [ebx-34h]
		and	ecx, esi
		or	[edi+14h], ecx
		mov	ecx, [ebx-30h]
		and	ecx, esi
		or	[edi+18h], ecx
		mov	ecx, [ebx-2Ch]
		and	ecx, esi
		or	[edi+1Ch], ecx
		mov	ecx, [ebx-28h]
		and	ecx, esi
		or	[edi+20h], ecx
		mov	ecx, [ebx-24h]
		and	ecx, esi
		or	[eax], ecx
		mov	ecx, [ebx-20h]
		and	ecx, esi
		or	[eax+4], ecx
		mov	ecx, [ebx-1Ch]
		and	ecx, esi
		or	[eax+8], ecx
		mov	ecx, [ebx-18h]
		and	ecx, esi
		or	[eax+0Ch], ecx
		mov	ecx, [ebx-14h]
		and	ecx, esi
		or	[eax+10h], ecx
		mov	ecx, [ebx-10h]
		and	ecx, esi
		or	[eax+14h], ecx
		mov	ecx, [ebx-0Ch]
		and	ecx, esi
		or	[eax+18h], ecx
		mov	ecx, [ebx-8]
		and	ecx, esi
		or	[eax+1Ch], ecx
		mov	ecx, [ebx-4]
		and	ecx, esi
		or	[eax+20h], ecx
		cmp	ebp, 10h
		jb	loc_10037300
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100372B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100373C0	proc near		; CODE XREF: sub_10036D70+1E0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		xor	eax, eax
		mov	ecx, 1
		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	[edi], eax
		mov	[edi+4], eax
		mov	[edi+8], eax
		mov	[edi+0Ch], eax
		mov	[edi+10h], eax
		mov	[edi+14h], eax
		mov	[edi+18h], eax
		mov	[edi+1Ch], eax
		mov	[edi+20h], eax
		mov	[ebx], eax
		mov	[ebx+4], eax
		mov	[ebx+8], eax
		mov	[ebx+0Ch], eax
		mov	[ebx+10h], eax
		mov	[ebx+14h], eax
		mov	[ebx+18h], eax
		mov	[ebx+1Ch], eax
		mov	[ebx+20h], eax
		mov	[ebp+0], eax
		mov	[ebp+4], eax
		mov	[ebp+8], eax
		mov	[ebp+0Ch], eax
		mov	[ebp+10h], eax
		mov	[ebp+14h], eax
		mov	[ebp+18h], eax
		mov	[ebp+1Ch], eax
		mov	[ebp+20h], eax
		mov	eax, [esp+10h+arg_C]
		add	eax, 6Ch
		mov	[esp+10h+arg_C], ecx

loc_10037431:				; CODE XREF: sub_100373C0+16Cj
		mov	edx, ecx
		xor	edx, [esp+10h+arg_10]
		mov	ecx, edx
		shr	ecx, 2
		or	edx, ecx
		mov	ecx, [eax]
		mov	esi, edx
		shr	esi, 1
		or	esi, edx
		and	esi, 1
		dec	esi
		and	ecx, esi
		or	[edi], ecx
		mov	ecx, [eax+4]
		and	ecx, esi
		or	[edi+4], ecx
		mov	ecx, [eax+8]
		and	ecx, esi
		or	[edi+8], ecx
		mov	ecx, [eax+0Ch]
		and	ecx, esi
		or	[edi+0Ch], ecx
		mov	ecx, [eax+10h]
		and	ecx, esi
		or	[edi+10h], ecx
		mov	ecx, [eax+14h]
		and	ecx, esi
		or	[edi+14h], ecx
		mov	ecx, [eax+18h]
		and	ecx, esi
		or	[edi+18h], ecx
		mov	ecx, [eax+1Ch]
		and	ecx, esi
		or	[edi+1Ch], ecx
		mov	ecx, [eax+20h]
		and	ecx, esi
		or	[edi+20h], ecx
		mov	ecx, [eax+24h]
		and	ecx, esi
		or	[ebx], ecx
		mov	ecx, [eax+28h]
		and	ecx, esi
		or	[ebx+4], ecx
		mov	ecx, [eax+2Ch]
		and	ecx, esi
		or	[ebx+8], ecx
		mov	ecx, [eax+30h]
		and	ecx, esi
		or	[ebx+0Ch], ecx
		mov	ecx, [eax+34h]
		and	ecx, esi
		or	[ebx+10h], ecx
		mov	ecx, [eax+38h]
		and	ecx, esi
		or	[ebx+14h], ecx
		mov	ecx, [eax+3Ch]
		and	ecx, esi
		or	[ebx+18h], ecx
		mov	ecx, [eax+40h]
		and	ecx, esi
		or	[ebx+1Ch], ecx
		mov	ecx, [eax+44h]
		and	ecx, esi
		or	[ebx+20h], ecx
		mov	ecx, [eax+48h]
		and	ecx, esi
		or	[ebp+0], ecx
		mov	ecx, [eax+4Ch]
		and	ecx, esi
		or	[ebp+4], ecx
		mov	ecx, [eax+50h]
		and	ecx, esi
		or	[ebp+8], ecx
		mov	ecx, [eax+54h]
		and	ecx, esi
		or	[ebp+0Ch], ecx
		mov	ecx, [eax+58h]
		and	ecx, esi
		or	[ebp+10h], ecx
		mov	ecx, [eax+5Ch]
		and	ecx, esi
		or	[ebp+14h], ecx
		lea	eax, [eax+6Ch]
		mov	ecx, [eax-0Ch]
		and	ecx, esi
		or	[ebp+18h], ecx
		mov	ecx, [eax-8]
		and	ecx, esi
		or	[ebp+1Ch], ecx
		mov	ecx, [eax-4]
		and	ecx, esi
		or	[ebp+20h], ecx
		mov	ecx, [esp+10h+arg_C]
		inc	ecx
		mov	[esp+10h+arg_C], ecx
		cmp	ecx, 10h
		jb	loc_10037431
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100373C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10037540	proc near		; CODE XREF: sub_10033F30+86p
					; sub_10033F30+9Dp ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		push	ebx
		lea	eax, [esp+14h+var_10]
		push	esi
		push	eax
		call	sub_100298B0
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [esi+8]
		add	eax, 8
		push	eax
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_1002C8E0
		mov	eax, [esi+8]
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [esp+28h+var_4]
		push	dword ptr [esi+0Ch] ; void *
		add	eax, 20h
		push	eax		; void *
		call	memcpy
		lea	eax, [esp+30h+var_10]
		push	eax
		push	eax
		call	sub_10029D40
		mov	eax, [esp+38h+arg_8]
		lea	ecx, [esp+38h+var_10]
		mov	eax, [eax+4]
		push	eax
		push	ecx
		push	ecx
		mov	eax, [eax+34h]
		call	eax
		mov	ebx, eax
		add	esp, 2Ch
		test	ebx, ebx
		js	short loc_1003761D
		mov	ecx, [esp+18h+var_4]
		lea	eax, [esp+18h+var_10]
		push	edi
		mov	edi, [esp+1Ch+arg_0]
		push	0
		mov	ecx, [ecx]
		push	eax
		and	ecx, 1FFFFFFFh
		push	20000000h
		push	eax
		mov	[edi], ecx
		call	sub_10029490
		add	esp, 10h
		mov	esi, 1
		nop

loc_100375D0:				; CODE XREF: sub_10037540+DAj
		mov	eax, [esp+1Ch+var_4]
		push	0
		mov	eax, [eax]
		and	eax, 0FFFFFFFh
		mov	[edi+esi*4], eax
		lea	eax, [esp+20h+var_10]
		push	eax
		push	10000000h
		push	eax
		call	sub_10029490
		mov	eax, [esp+2Ch+var_4]
		push	0
		mov	eax, [eax]
		and	eax, 1FFFFFFFh
		mov	[edi+esi*4+4], eax
		lea	eax, [esp+30h+var_10]
		push	eax
		push	20000000h
		push	eax
		call	sub_10029490
		add	esi, 2
		add	esp, 20h
		cmp	esi, 9
		jnz	short loc_100375D0
		pop	edi

loc_1003761D:				; CODE XREF: sub_10037540+60j
		lea	eax, [esp+18h+var_10]
		push	eax
		call	sub_10028F00
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
sub_10037540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10037640	proc near		; CODE XREF: sub_1000EC70+CBp

var_30		= byte ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 30h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+30h+var_4], eax
		mov	eax, [esp+30h+arg_0]
		mov	[esp+30h+var_18], eax
		mov	eax, [esp+30h+arg_4]
		push	edi
		mov	edi, [esp+34h+arg_8]
		mov	[esp+34h+var_28], eax
		mov	eax, [edi+4]
		mov	ecx, eax
		and	eax, 0Fh
		and	ecx, 0FFFFFFF0h
		mov	[esp+34h+var_24], eax
		mov	eax, [edi+0Ch]
		mov	[esp+34h+var_20], ecx
		mov	ecx, eax
		and	ecx, 0FFFFFFF0h
		and	eax, 0Fh
		cmp	[esp+34h+arg_C], 10h
		mov	[esp+34h+var_1C], ecx
		mov	[esp+34h+var_2C], eax
		jz	short loc_100376AF
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		mov	ecx, [esp+30h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_100376AF:				; CODE XREF: sub_10037640+4Ej
		push	esi
		push	140h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	loc_10037802
		mov	ecx, [esp+38h+var_18]
		mov	[esi+130h], ecx
		mov	eax, [edi+10h]
		mov	[esi+134h], eax
		mov	dword ptr [esi+138h], 0
		lea	eax, [ecx+2Ch]
		mov	dword ptr [esi+13Ch], 0
		push	dword ptr [ecx+4]
		push	eax
		push	esi
		call	sub_1003AF00
		pxor	xmm0, xmm0
		lea	eax, [esi+110h]
		movdqu	xmmword	ptr [eax], xmm0
		add	esp, 0Ch
		movdqu	xmmword	ptr [esi+100h],	xmm0
		cmp	dword ptr [edi+4], 0Ch
		jnz	short loc_1003774E
		mov	eax, [edi]
		lea	ecx, [esi+120h]
		mov	edx, 1000000h
		movd	xmm0, dword ptr	[eax+8]
		movd	xmm1, dword ptr	[eax+4]
		movd	xmm2, dword ptr	[eax]
		movd	xmm3, edx
		punpckldq xmm2,	xmm0
		punpckldq xmm1,	xmm3
		punpckldq xmm2,	xmm1
		movdqu	xmmword	ptr [ecx], xmm2
		jmp	loc_100377D6
; ---------------------------------------------------------------------------

loc_1003774E:				; CODE XREF: sub_10037640+D8j
		push	eax
		push	[esp+3Ch+var_20]
		push	dword ptr [edi]
		push	esi
		call	sub_1003B2F0
		mov	eax, [esp+48h+var_24]
		add	esp, 10h
		test	eax, eax
		jz	short loc_100377A1
		push	eax		; size_t
		mov	eax, [edi]
		xor	ecx, ecx
		add	eax, [esp+3Ch+var_20]
		push	eax		; void *
		lea	eax, [esp+40h+var_14]
		mov	[esp+40h+var_14], ecx
		push	eax		; void *
		mov	[esp+44h+var_10], ecx
		mov	[esp+44h+var_C], ecx
		mov	[esp+44h+var_8], ecx
		call	memcpy
		lea	eax, [esi+110h]
		push	eax
		push	10h
		lea	eax, [esp+4Ch+var_14]
		push	eax
		push	esi
		call	sub_1003B2F0
		add	esp, 1Ch

loc_100377A1:				; CODE XREF: sub_10037640+124j
		lea	eax, [esi+120h]
		push	eax
		lea	eax, [esi+100h]
		push	eax
		push	0
		push	dword ptr [edi+4]
		lea	eax, [esi+110h]
		push	eax
		push	esi
		call	sub_1003AE40
		pxor	xmm0, xmm0
		lea	ecx, [esi+120h]
		add	esp, 18h
		movdqu	xmmword	ptr [esi+110h],	xmm0

loc_100377D6:				; CODE XREF: sub_10037640+109j
		push	10h
		push	10h
		push	ecx
		push	10h
		lea	eax, [esp+48h+var_30]
		push	eax
		lea	eax, [esi+100h]
		push	eax
		mov	eax, [esp+50h+var_18]
		push	eax
		call	[esp+54h+var_28]
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_10037815
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10037802:				; CODE XREF: sub_10037640+81j
		pop	esi
		xor	eax, eax
		pop	edi
		mov	ecx, [esp+30h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_10037815:				; CODE XREF: sub_10037640+1B7j
		movdqu	xmm0, xmmword ptr [esi+120h]
		lea	eax, [esi+110h]
		push	eax
		pshufb	xmm0, ds:xmmword_1004D0C0
		push	[esp+3Ch+var_1C]
		paddd	xmm0, ds:xmmword_1004D0B0
		pshufb	xmm0, ds:xmmword_1004D0C0
		movdqu	xmmword	ptr [esi+120h],	xmm0
		push	dword ptr [edi+8]
		push	esi
		call	sub_1003B2F0
		mov	eax, [esp+48h+var_2C]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1003789A
		push	eax		; size_t
		mov	eax, [edi+8]
		xor	ecx, ecx
		add	eax, [esp+3Ch+var_1C]
		push	eax		; void *
		lea	eax, [esp+40h+var_14]
		mov	[esp+40h+var_14], ecx
		push	eax		; void *
		mov	[esp+44h+var_10], ecx
		mov	[esp+44h+var_C], ecx
		mov	[esp+44h+var_8], ecx
		call	memcpy
		lea	eax, [esi+110h]
		push	eax
		push	10h
		lea	eax, [esp+4Ch+var_14]
		push	eax
		push	esi
		call	sub_1003B2F0
		add	esp, 1Ch

loc_1003789A:				; CODE XREF: sub_10037640+21Cj
		mov	eax, [edi+0Ch]
		add	[esi+138h], eax
		mov	eax, esi
		mov	ecx, [esp+38h+var_4]
		pop	esi
		pop	edi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30h
		retn
sub_10037640	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100378C0	proc near		; DATA XREF: sub_1000EC70+E2o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 1Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	ecx, [esp+1Ch+arg_10]
		push	ebx
		mov	ebx, [esp+20h+arg_8]
		push	ebp
		mov	ebp, [esp+24h+arg_0]
		push	esi
		mov	esi, [esp+28h+arg_14]
		push	edi
		mov	edi, [ebp+134h]
		add	edi, 7
		mov	[esp+2Ch+var_1C], eax
		shr	edi, 3
		mov	[esp+2Ch+var_18], ecx
		cmp	esi, edi
		jnb	short loc_10037921
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10037921:				; CODE XREF: sub_100378C0+3Cj
		sub	esi, edi
		cmp	[esp+2Ch+arg_C], esi
		jnb	short loc_1003794E
		push	0FFFFE003h
		mov	[ebx], esi
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1003794E:				; CODE XREF: sub_100378C0+67j
		push	esi
		push	ebp
		push	eax
		push	ecx
		call	sub_1003C505
		add	[ebp+13Ch], esi
		lea	eax, [esp+3Ch+var_14]
		push	eax
		lea	eax, [ebp+100h]
		push	eax
		push	dword ptr [ebp+138h]
		lea	eax, [ebp+110h]
		push	dword ptr [ebp+13Ch]
		push	eax
		push	ebp
		call	sub_1003AE40
		mov	eax, [esp+54h+var_18]
		add	eax, esi
		push	edi
		push	eax
		lea	eax, [esp+5Ch+var_14]
		push	eax
		call	NSS_SecureMemcmp
		add	esp, 34h
		test	eax, eax
		jz	short loc_100379D0
		push	esi		; size_t
		push	0		; int
		push	[esp+34h+var_1C] ; void	*
		call	memset
		push	0FFFFE002h
		mov	dword ptr [ebx], 0
		call	PORT_SetError_Util
		add	esp, 10h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_100379D0:				; CODE XREF: sub_100378C0+D9j
		mov	ecx, [esp+2Ch+var_4]
		xor	eax, eax
		pop	edi
		mov	[ebx], esi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
sub_100378C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100379F0	proc near		; DATA XREF: sub_1000EC70+D9o

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 20h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+20h+var_4], eax
		mov	ecx, [esp+20h+arg_10]
		mov	edx, [esp+20h+arg_4]
		mov	eax, [esp+20h+arg_8]
		push	ebx
		mov	ebx, [esp+24h+arg_14]
		push	esi
		push	edi
		mov	edi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_18], ecx
		or	ecx, 0FFFFFFFFh
		sub	ecx, ebx
		mov	[esp+2Ch+var_1C], edx
		mov	[esp+2Ch+var_20], eax
		mov	esi, [edi+134h]
		add	esi, 7
		shr	esi, 3
		cmp	ecx, esi
		jnb	short loc_10037A58
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+20h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10037A58:				; CODE XREF: sub_100379F0+44j
		push	ebp
		lea	ebp, [ebx+esi]
		cmp	[esp+30h+arg_C], ebp
		jnb	short loc_10037A87
		push	0FFFFE003h
		mov	[eax], ebp
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+20h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10037A87:				; CODE XREF: sub_100379F0+70j
		push	ebx
		push	edi
		push	edx
		push	[esp+3Ch+var_18]
		call	sub_1003B630
		add	[edi+13Ch], ebx
		lea	eax, [esp+40h+var_14]
		push	eax
		lea	eax, [edi+100h]
		push	eax
		push	dword ptr [edi+138h]
		lea	eax, [edi+110h]
		push	dword ptr [edi+13Ch]
		push	eax
		push	edi
		call	sub_1003AE40
		mov	eax, [esp+58h+var_20]
		add	esp, 28h
		mov	[eax], ebp
		test	esi, esi
		jz	short loc_10037AE0
		mov	eax, [esp+30h+var_1C]
		lea	ecx, [esp+30h+var_14]
		push	esi		; size_t
		add	eax, ebx
		push	ecx		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_10037AE0:				; CODE XREF: sub_100379F0+D9j
		mov	ecx, [esp+30h+var_4]
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
sub_100379F0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10037B00:				; DATA XREF: sub_1000EE40+27Ao
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_10037B14:				; CODE XREF: .text:10037D23j
		cmp	edi, 70h
		jb	loc_10037D28
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenclast xmm0, xmm7
		aesenclast xmm1, xmm7
		aesenclast xmm2, xmm7
		aesenclast xmm3, xmm7
		aesenclast xmm4, xmm7
		aesenclast xmm5, xmm7
		aesenclast xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_10037B14
; ---------------------------------------------------------------------------

loc_10037D28:				; CODE XREF: .text:10037B17j
					; .text:10037DB7j
		cmp	edi, 10h
		jb	loc_10037DBC
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_10037D28
; ---------------------------------------------------------------------------

loc_10037DBC:				; CODE XREF: .text:10037D2Bj
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10037DC0:				; DATA XREF: sub_1000EE40+286o
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_10037DD4:				; CODE XREF: .text:10038039j
		cmp	edi, 70h
		jb	loc_1003803E
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenclast xmm0, xmm7
		aesenclast xmm1, xmm7
		aesenclast xmm2, xmm7
		aesenclast xmm3, xmm7
		aesenclast xmm4, xmm7
		aesenclast xmm5, xmm7
		aesenclast xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_10037DD4
; ---------------------------------------------------------------------------

loc_1003803E:				; CODE XREF: .text:10037DD7j
					; .text:100380E7j
		cmp	edi, 10h
		jb	loc_100380EC
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_1003803E
; ---------------------------------------------------------------------------

loc_100380EC:				; CODE XREF: .text:10038041j
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100380F0:				; DATA XREF: sub_1000EE40:loc_1000F0CDo
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_10038104:				; CODE XREF: .text:100383BFj
		cmp	edi, 70h
		jb	loc_100383C4
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesenclast xmm0, xmm7
		aesenclast xmm1, xmm7
		aesenclast xmm2, xmm7
		aesenclast xmm3, xmm7
		aesenclast xmm4, xmm7
		aesenclast xmm5, xmm7
		aesenclast xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_10038104
; ---------------------------------------------------------------------------

loc_100383C4:				; CODE XREF: .text:10038107j
					; .text:10038487j
		cmp	edi, 10h
		jb	loc_1003848C
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesenclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_100383C4
; ---------------------------------------------------------------------------

loc_1003848C:				; CODE XREF: .text:100383C7j
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10038490:				; DATA XREF: sub_1000EE40+299o
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_100384A4:				; CODE XREF: .text:100386B3j
		cmp	edi, 70h
		jb	loc_100386B8
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdeclast xmm0, xmm7
		aesdeclast xmm1, xmm7
		aesdeclast xmm2, xmm7
		aesdeclast xmm3, xmm7
		aesdeclast xmm4, xmm7
		aesdeclast xmm5, xmm7
		aesdeclast xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_100384A4
; ---------------------------------------------------------------------------

loc_100386B8:				; CODE XREF: .text:100384A7j
					; .text:10038747j
		cmp	edi, 10h
		jb	loc_1003874C
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdeclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_100386B8
; ---------------------------------------------------------------------------

loc_1003874C:				; CODE XREF: .text:100386BBj
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10038750:				; DATA XREF: sub_1000EE40:loc_1000F0E0o
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_10038764:				; CODE XREF: .text:100389C9j
		cmp	edi, 70h
		jb	loc_100389CE
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesdeclast xmm0, xmm7
		aesdeclast xmm1, xmm7
		aesdeclast xmm2, xmm7
		aesdeclast xmm3, xmm7
		aesdeclast xmm4, xmm7
		aesdeclast xmm5, xmm7
		aesdeclast xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_10038764
; ---------------------------------------------------------------------------

loc_100389CE:				; CODE XREF: .text:10038767j
					; .text:10038A77j
		cmp	edi, 10h
		jb	loc_10038A7C
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesdeclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_100389CE
; ---------------------------------------------------------------------------

loc_10038A7C:				; CODE XREF: .text:100389D1j
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10038A80:				; DATA XREF: sub_1000EE40+2AAo
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_10038A94:				; CODE XREF: .text:10038D4Fj
		cmp	edi, 70h
		jb	loc_10038D54
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesdeclast xmm0, xmm7
		aesdeclast xmm1, xmm7
		aesdeclast xmm2, xmm7
		aesdeclast xmm3, xmm7
		aesdeclast xmm4, xmm7
		aesdeclast xmm5, xmm7
		aesdeclast xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_10038A94
; ---------------------------------------------------------------------------

loc_10038D54:				; CODE XREF: .text:10038A97j
					; .text:10038E17j
		cmp	edi, 10h
		jb	loc_10038E1C
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesdeclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_10038D54
; ---------------------------------------------------------------------------

loc_10038E1C:				; CODE XREF: .text:10038D57j
		xor	eax, eax
		pop	edi
		retn

; =============== S U B	R O U T	I N E =======================================


sub_10038E20	proc near		; CODE XREF: sub_1000EE40+2F8p
					; sub_10038F10+Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		movdqu	xmm1, xmmword ptr [ecx]
		movdqu	xmmword	ptr [edx], xmm1
		movdqa	xmm2, xmm1
		lea	eax, dword_1004E340
		movdqa	xmm0, xmmword ptr [eax]
		lea	eax, dword_1004E310
		movdqa	xmm4, xmmword ptr [eax]
		mov	eax, 8

loc_10038E4D:				; CODE XREF: sub_10038E20+6Bj
		lea	edx, [edx+10h]
		dec	eax
		pshufb	xmm2, xmm4
		aesenclast xmm2, xmm0
		pslld	xmm0, 1
		movdqa	xmm3, xmm1
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pxor	xmm1, xmm2
		movdqu	xmmword	ptr [edx], xmm1
		movdqa	xmm2, xmm1
		jnz	short loc_10038E4D
		lea	eax, dword_1004E350
		movdqa	xmm0, xmmword ptr [eax]
		pshufb	xmm2, xmm4
		aesenclast xmm2, xmm0
		pslld	xmm0, 1
		movdqa	xmm3, xmm1
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pxor	xmm1, xmm2
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqa	xmm2, xmm1
		pshufb	xmm2, xmm4
		aesenclast xmm2, xmm0
		movdqa	xmm3, xmm1
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pslldq	xmm3, 4
		pxor	xmm1, xmm3
		pxor	xmm1, xmm2
		movdqu	xmmword	ptr [edx+20h], xmm1
		movdqa	xmm2, xmm1
		retn
sub_10038E20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10038F10	proc near		; CODE XREF: sub_1000EE40+33Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		push	edx
		push	ecx
		call	sub_10038E20
		pop	ecx
		pop	edx
		movdqu	xmm0, xmmword ptr [edx]
		movdqu	xmm1, xmmword ptr [edx+0A0h]
		movdqu	xmmword	ptr [edx+0A0h],	xmm0
		movdqu	xmmword	ptr [edx], xmm1
		movdqu	xmm0, xmmword ptr [edx+10h]
		movdqu	xmm1, xmmword ptr [edx+90h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+90h], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmm0, xmmword ptr [edx+20h]
		movdqu	xmm1, xmmword ptr [edx+80h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+80h], xmm0
		movdqu	xmmword	ptr [edx+20h], xmm1
		movdqu	xmm0, xmmword ptr [edx+30h]
		movdqu	xmm1, xmmword ptr [edx+70h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+70h], xmm0
		movdqu	xmmword	ptr [edx+30h], xmm1
		movdqu	xmm0, xmmword ptr [edx+40h]
		movdqu	xmm1, xmmword ptr [edx+60h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+60h], xmm0
		movdqu	xmmword	ptr [edx+40h], xmm1
		movdqu	xmm0, xmmword ptr [edx+50h]
		aesimc	xmm0, xmm0
		movdqu	xmmword	ptr [edx+50h], xmm0
		retn
sub_10038F10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10038FD0	proc near		; CODE XREF: sub_1000EE40+329p
					; sub_100390E0+Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		pxor	xmm3, xmm3
		movdqu	xmm1, xmmword ptr [ecx]
		pinsrd	xmm3, dword ptr	[ecx+10h], 0
		pinsrd	xmm3, dword ptr	[ecx+14h], 1
		movdqu	xmmword	ptr [edx], xmm1
		movdqa	xmm5, xmm3
		lea	eax, dword_1004E340
		movdqu	xmm0, xmmword ptr [eax]
		lea	eax, dword_1004E320
		movdqu	xmm4, xmmword ptr [eax]
		mov	eax, 4

loc_1003900F:				; CODE XREF: sub_10038FD0+FCj
		movdqa	xmm2, xmm3
		pshufb	xmm2, xmm4
		aesenclast xmm2, xmm0
		pslld	xmm0, 1
		movdqa	xmm6, xmm1
		movdqa	xmm7, xmm3
		pslldq	xmm6, 4
		pslldq	xmm7, 4
		pxor	xmm1, xmm6
		pxor	xmm3, xmm7
		pslldq	xmm6, 4
		pxor	xmm1, xmm6
		pslldq	xmm6, 4
		pxor	xmm1, xmm6
		pxor	xmm1, xmm2
		pshufd	xmm2, xmm1, 0FFh
		pxor	xmm3, xmm2
		movdqa	xmm6, xmm1
		shufpd	xmm5, xmm1, 0
		shufpd	xmm6, xmm3, 1
		movdqu	xmmword	ptr [edx+10h], xmm5
		movdqu	xmmword	ptr [edx+20h], xmm6
		movdqa	xmm2, xmm3
		pshufb	xmm2, xmm4
		aesenclast xmm2, xmm0
		pslld	xmm0, 1
		movdqa	xmm6, xmm1
		movdqa	xmm7, xmm3
		pslldq	xmm6, 4
		pslldq	xmm7, 4
		pxor	xmm1, xmm6
		pxor	xmm3, xmm7
		pslldq	xmm6, 4
		pxor	xmm1, xmm6
		pslldq	xmm6, 4
		pxor	xmm1, xmm6
		pxor	xmm1, xmm2
		pshufd	xmm2, xmm1, 0FFh
		pxor	xmm3, xmm2
		movdqu	xmmword	ptr [edx+30h], xmm1
		movdqa	xmm5, xmm3
		lea	edx, [edx+30h]
		dec	eax
		jnz	loc_1003900F
		movdqu	xmmword	ptr [edx+10h], xmm5
		retn
sub_10038FD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100390E0	proc near		; CODE XREF: sub_1000EE40+348p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		push	edx
		push	ecx
		call	sub_10038FD0
		pop	ecx
		pop	edx
		movdqu	xmm0, xmmword ptr [edx]
		movdqu	xmm1, xmmword ptr [edx+0C0h]
		movdqu	xmmword	ptr [edx+0C0h],	xmm0
		movdqu	xmmword	ptr [edx], xmm1
		movdqu	xmm0, xmmword ptr [edx+10h]
		movdqu	xmm1, xmmword ptr [edx+0B0h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+0B0h],	xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmm0, xmmword ptr [edx+20h]
		movdqu	xmm1, xmmword ptr [edx+0A0h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+0A0h],	xmm0
		movdqu	xmmword	ptr [edx+20h], xmm1
		movdqu	xmm0, xmmword ptr [edx+30h]
		movdqu	xmm1, xmmword ptr [edx+90h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+90h], xmm0
		movdqu	xmmword	ptr [edx+30h], xmm1
		movdqu	xmm0, xmmword ptr [edx+40h]
		movdqu	xmm1, xmmword ptr [edx+80h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+80h], xmm0
		movdqu	xmmword	ptr [edx+40h], xmm1
		movdqu	xmm0, xmmword ptr [edx+50h]
		movdqu	xmm1, xmmword ptr [edx+70h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+70h], xmm0
		movdqu	xmmword	ptr [edx+50h], xmm1
		movdqu	xmm0, xmmword ptr [edx+60h]
		aesimc	xmm0, xmm0
		movdqu	xmmword	ptr [edx+60h], xmm0
		retn
sub_100390E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100391D0	proc near		; CODE XREF: sub_1000EE40:loc_1000F170p
					; sub_100392C0+Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		movdqu	xmm1, xmmword ptr [ecx]
		movdqu	xmm3, xmmword ptr [ecx+10h]
		movdqu	xmmword	ptr [edx], xmm1
		movdqu	xmmword	ptr [edx+10h], xmm3
		lea	eax, dword_1004E340
		movdqu	xmm0, xmmword ptr [eax]
		lea	eax, dword_1004E330
		movdqu	xmm5, xmmword ptr [eax]
		pxor	xmm6, xmm6
		mov	eax, 6

loc_10039207:				; CODE XREF: sub_100391D0+A8j
		movdqa	xmm2, xmm3
		pshufb	xmm2, xmm5
		aesenclast xmm2, xmm0
		pslld	xmm0, 1
		movdqa	xmm4, xmm1
		pslldq	xmm4, 4
		pxor	xmm1, xmm4
		pslldq	xmm4, 4
		pxor	xmm1, xmm4
		pslldq	xmm4, 4
		pxor	xmm1, xmm4
		pxor	xmm1, xmm2
		movdqu	xmmword	ptr [edx+20h], xmm1
		pshufd	xmm2, xmm1, 0FFh
		aesenclast xmm2, xmm6
		movdqa	xmm4, xmm3
		pslldq	xmm4, 4
		pxor	xmm3, xmm4
		pslldq	xmm4, 4
		pxor	xmm3, xmm4
		pslldq	xmm4, 4
		pxor	xmm3, xmm4
		pxor	xmm3, xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		lea	edx, [edx+20h]
		dec	eax
		jnz	short loc_10039207
		movdqa	xmm2, xmm3
		pshufb	xmm2, xmm5
		aesenclast xmm2, xmm0
		movdqa	xmm4, xmm1
		pslldq	xmm4, 4
		pxor	xmm1, xmm4
		pslldq	xmm4, 4
		pxor	xmm1, xmm4
		pslldq	xmm4, 4
		pxor	xmm1, xmm4
		pxor	xmm1, xmm2
		movdqu	xmmword	ptr [edx+20h], xmm1
		retn
sub_100391D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100392C0	proc near		; CODE XREF: sub_1000EE40:loc_1000F18Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		push	edx
		push	ecx
		call	sub_100391D0
		pop	ecx
		pop	edx
		movdqu	xmm0, xmmword ptr [edx]
		movdqu	xmm1, xmmword ptr [edx+0E0h]
		movdqu	xmmword	ptr [edx+0E0h],	xmm0
		movdqu	xmmword	ptr [edx], xmm1
		movdqu	xmm0, xmmword ptr [edx+10h]
		movdqu	xmm1, xmmword ptr [edx+0D0h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+0D0h],	xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmm0, xmmword ptr [edx+20h]
		movdqu	xmm1, xmmword ptr [edx+0C0h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+0C0h],	xmm0
		movdqu	xmmword	ptr [edx+20h], xmm1
		movdqu	xmm0, xmmword ptr [edx+30h]
		movdqu	xmm1, xmmword ptr [edx+0B0h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+0B0h],	xmm0
		movdqu	xmmword	ptr [edx+30h], xmm1
		movdqu	xmm0, xmmword ptr [edx+40h]
		movdqu	xmm1, xmmword ptr [edx+0A0h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+0A0h],	xmm0
		movdqu	xmmword	ptr [edx+40h], xmm1
		movdqu	xmm0, xmmword ptr [edx+50h]
		movdqu	xmm1, xmmword ptr [edx+90h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+90h], xmm0
		movdqu	xmmword	ptr [edx+50h], xmm1
		movdqu	xmm0, xmmword ptr [edx+60h]
		movdqu	xmm1, xmmword ptr [edx+80h]
		aesimc	xmm0, xmm0
		aesimc	xmm1, xmm1
		movdqu	xmmword	ptr [edx+80h], xmm0
		movdqu	xmmword	ptr [edx+60h], xmm1
		movdqu	xmm0, xmmword ptr [edx+70h]
		aesimc	xmm0, xmm0
		movdqu	xmmword	ptr [edx+70h], xmm0
		retn
sub_100392C0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_100393E0:				; DATA XREF: sub_1000EE40+1BAo
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]
		movdqu	xmm0, xmmword ptr [ecx-20h]
		movdqu	xmm2, xmmword ptr [ecx]
		movdqu	xmm3, xmmword ptr [ecx+10h]
		movdqu	xmm4, xmmword ptr [ecx+20h]
		movdqu	xmm5, xmmword ptr [ecx+30h]
		movdqu	xmm6, xmmword ptr [ecx+40h]

loc_10039411:				; CODE XREF: .text:10039488j
		cmp	edi, 10h
		jb	short loc_1003948A
		movdqu	xmm1, xmmword ptr [eax]
		pxor	xmm1, xmm2
		pxor	xmm0, xmm1
		aesenc	xmm0, xmm3
		aesenc	xmm0, xmm4
		aesenc	xmm0, xmm5
		aesenc	xmm0, xmm6
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	short loc_10039411
; ---------------------------------------------------------------------------

loc_1003948A:				; CODE XREF: .text:10039414j
		movdqu	xmmword	ptr [ecx-20h], xmm0
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_100394A0:				; DATA XREF: sub_1000EE40+218o
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]
		movdqu	xmm0, xmmword ptr [ecx-20h]
		movdqu	xmm2, xmmword ptr [ecx]
		movdqu	xmm3, xmmword ptr [ecx+10h]
		movdqu	xmm4, xmmword ptr [ecx+20h]
		movdqu	xmm5, xmmword ptr [ecx+30h]
		movdqu	xmm6, xmmword ptr [ecx+40h]

loc_100394D1:				; CODE XREF: .text:10039566j
		cmp	edi, 10h
		jb	loc_1003956B
		movdqu	xmm1, xmmword ptr [eax]
		pxor	xmm1, xmm2
		pxor	xmm0, xmm1
		aesenc	xmm0, xmm3
		aesenc	xmm0, xmm4
		aesenc	xmm0, xmm5
		aesenc	xmm0, xmm6
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_100394D1
; ---------------------------------------------------------------------------

loc_1003956B:				; CODE XREF: .text:100394D4j
		movdqu	xmmword	ptr [ecx-20h], xmm0
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------
		db 8Dh,	0A4h, 24h, 4 dup(0)
; ---------------------------------------------------------------------------
		jmp	short loc_10039580
; ---------------------------------------------------------------------------
		align 10h

loc_10039580:				; CODE XREF: .text:1003957Bj
					; DATA XREF: sub_1000EE40+226o
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]
		movdqu	xmm0, xmmword ptr [ecx-20h]
		movdqu	xmm2, xmmword ptr [ecx]
		movdqu	xmm3, xmmword ptr [ecx+10h]
		movdqu	xmm4, xmmword ptr [ecx+20h]
		movdqu	xmm5, xmmword ptr [ecx+30h]
		movdqu	xmm6, xmmword ptr [ecx+40h]

loc_100395B1:				; CODE XREF: .text:10039660j
		cmp	edi, 10h
		jb	loc_10039665
		movdqu	xmm1, xmmword ptr [eax]
		pxor	xmm1, xmm2
		pxor	xmm0, xmm1
		aesenc	xmm0, xmm3
		aesenc	xmm0, xmm4
		aesenc	xmm0, xmm5
		aesenc	xmm0, xmm6
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesenclast xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_100395B1
; ---------------------------------------------------------------------------

loc_10039665:				; CODE XREF: .text:100395B4j
		movdqu	xmmword	ptr [ecx-20h], xmm0
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10039670:				; DATA XREF: sub_1000EE40+239o
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_10039684:				; CODE XREF: .text:100398DBj
		cmp	edi, 70h
		jb	loc_100398E0
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdeclast xmm0, xmm7
		aesdeclast xmm1, xmm7
		aesdeclast xmm2, xmm7
		aesdeclast xmm3, xmm7
		aesdeclast xmm4, xmm7
		aesdeclast xmm5, xmm7
		aesdeclast xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx-20h]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm1, xmm7
		movdqu	xmm7, xmmword ptr [eax+10h]
		pxor	xmm2, xmm7
		movdqu	xmm7, xmmword ptr [eax+20h]
		pxor	xmm3, xmm7
		movdqu	xmm7, xmmword ptr [eax+30h]
		pxor	xmm4, xmm7
		movdqu	xmm7, xmmword ptr [eax+40h]
		pxor	xmm5, xmm7
		movdqu	xmm7, xmmword ptr [eax+50h]
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [eax+60h]
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		movdqu	xmmword	ptr [ecx-20h], xmm7
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_10039684
; ---------------------------------------------------------------------------

loc_100398E0:				; CODE XREF: .text:10039687j
		movdqu	xmm3, xmmword ptr [ecx-20h]

loc_100398E5:				; CODE XREF: .text:10039980j
		cmp	edi, 10h
		jb	loc_10039985
		movdqu	xmm0, xmmword ptr [eax]
		movdqa	xmm4, xmm0
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdeclast xmm0, xmm7
		pxor	xmm3, xmm0
		movdqu	xmmword	ptr [edx], xmm3
		movdqa	xmm3, xmm4
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_100398E5
; ---------------------------------------------------------------------------

loc_10039985:				; CODE XREF: .text:100398E8j
		movdqu	xmmword	ptr [ecx-20h], xmm3
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10039990:				; DATA XREF: sub_1000EE40:loc_1000F080o
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_100399A4:				; CODE XREF: .text:10039C51j
		cmp	edi, 70h
		jb	loc_10039C56
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesdeclast xmm0, xmm7
		aesdeclast xmm1, xmm7
		aesdeclast xmm2, xmm7
		aesdeclast xmm3, xmm7
		aesdeclast xmm4, xmm7
		aesdeclast xmm5, xmm7
		aesdeclast xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx-20h]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm1, xmm7
		movdqu	xmm7, xmmword ptr [eax+10h]
		pxor	xmm2, xmm7
		movdqu	xmm7, xmmword ptr [eax+20h]
		pxor	xmm3, xmm7
		movdqu	xmm7, xmmword ptr [eax+30h]
		pxor	xmm4, xmm7
		movdqu	xmm7, xmmword ptr [eax+40h]
		pxor	xmm5, xmm7
		movdqu	xmm7, xmmword ptr [eax+50h]
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [eax+60h]
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		movdqu	xmmword	ptr [ecx-20h], xmm7
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_100399A4
; ---------------------------------------------------------------------------

loc_10039C56:				; CODE XREF: .text:100399A7j
		movdqu	xmm3, xmmword ptr [ecx-20h]

loc_10039C5B:				; CODE XREF: .text:10039D10j
		cmp	edi, 10h
		jb	loc_10039D15
		movdqu	xmm0, xmmword ptr [eax]
		movdqa	xmm4, xmm0
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesdeclast xmm0, xmm7
		pxor	xmm3, xmm0
		movdqu	xmmword	ptr [edx], xmm3
		movdqa	xmm3, xmm4
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_10039C5B
; ---------------------------------------------------------------------------

loc_10039D15:				; CODE XREF: .text:10039C5Ej
		movdqu	xmmword	ptr [ecx-20h], xmm3
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10039D20:				; DATA XREF: sub_1000EE40+24Ao
		push	edi
		mov	ecx, [esp+8]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+18h]
		mov	edi, [esp+1Ch]
		lea	ecx, [ecx+2Ch]

loc_10039D34:				; CODE XREF: .text:1003A037j
		cmp	edi, 70h
		jb	loc_1003A03C
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmm1, xmmword ptr [eax+10h]
		movdqu	xmm2, xmmword ptr [eax+20h]
		movdqu	xmm3, xmmword ptr [eax+30h]
		movdqu	xmm4, xmmword ptr [eax+40h]
		movdqu	xmm5, xmmword ptr [eax+50h]
		movdqu	xmm6, xmmword ptr [eax+60h]
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		pxor	xmm1, xmm7
		pxor	xmm2, xmm7
		pxor	xmm3, xmm7
		pxor	xmm4, xmm7
		pxor	xmm5, xmm7
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesdec	xmm0, xmm7
		aesdec	xmm1, xmm7
		aesdec	xmm2, xmm7
		aesdec	xmm3, xmm7
		aesdec	xmm4, xmm7
		aesdec	xmm5, xmm7
		aesdec	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesdeclast xmm0, xmm7
		aesdeclast xmm1, xmm7
		aesdeclast xmm2, xmm7
		aesdeclast xmm3, xmm7
		aesdeclast xmm4, xmm7
		aesdeclast xmm5, xmm7
		aesdeclast xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx-20h]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm1, xmm7
		movdqu	xmm7, xmmword ptr [eax+10h]
		pxor	xmm2, xmm7
		movdqu	xmm7, xmmword ptr [eax+20h]
		pxor	xmm3, xmm7
		movdqu	xmm7, xmmword ptr [eax+30h]
		pxor	xmm4, xmm7
		movdqu	xmm7, xmmword ptr [eax+40h]
		pxor	xmm5, xmm7
		movdqu	xmm7, xmmword ptr [eax+50h]
		pxor	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [eax+60h]
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		movdqu	xmmword	ptr [ecx-20h], xmm7
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_10039D34
; ---------------------------------------------------------------------------

loc_1003A03C:				; CODE XREF: .text:10039D37j
		movdqu	xmm3, xmmword ptr [ecx-20h]

loc_1003A041:				; CODE XREF: .text:1003A110j
		cmp	edi, 10h
		jb	loc_1003A115
		movdqu	xmm0, xmmword ptr [eax]
		movdqa	xmm4, xmm0
		movdqu	xmm7, xmmword ptr [ecx]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesdec	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesdeclast xmm0, xmm7
		pxor	xmm3, xmm0
		movdqu	xmmword	ptr [edx], xmm3
		movdqa	xmm3, xmm4
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_1003A041
; ---------------------------------------------------------------------------

loc_1003A115:				; CODE XREF: .text:1003A044j
		movdqu	xmmword	ptr [ecx-20h], xmm3
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1003A120	proc near		; CODE XREF: sub_1000D6C0+C8p
					; DATA XREF: sub_1000D6C0+96o

var_70		= xmmword ptr -70h
var_60		= xmmword ptr -60h
var_50		= xmmword ptr -50h
var_40		= xmmword ptr -40h
var_30		= xmmword ptr -30h
var_20		= xmmword ptr -20h
var_10		= xmmword ptr -10h
arg_0		= dword	ptr  14h
arg_4		= dword	ptr  18h
arg_10		= dword	ptr  24h
arg_14		= dword	ptr  28h

		push	edi
		push	esi
		push	ebx
		push	ebp
		mov	esi, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_10]
		mov	edi, [esp+arg_14]
		mov	ecx, [esi+4]
		lea	ecx, [ecx+2Ch]
		mov	ebp, esp
		sub	esp, 70h
		and	esp, 0FFFFFFF0h
		movdqu	xmm0, xmmword ptr [esi+8]
		mov	esi, [esi+14h]
		bswap	esi
		movdqu	xmm1, xmmword ptr [ecx]
		pxor	xmm0, xmm1
		movdqa	[esp+70h+var_70], xmm0
		movdqa	[esp+70h+var_60], xmm0
		movdqa	[esp+70h+var_50], xmm0
		movdqa	[esp+70h+var_40], xmm0
		movdqa	[esp+70h+var_30], xmm0
		movdqa	[esp+70h+var_20], xmm0
		movdqa	[esp+70h+var_10], xmm0
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_60+0Ch],	ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_50+0Ch],	ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_40+0Ch],	ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_30+0Ch],	ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_20+0Ch],	ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_10+0Ch],	ebx

loc_1003A1C5:				; CODE XREF: sub_1003A120+32Dj
		cmp	edi, 70h
		jb	loc_1003A452
		movdqu	xmm0, [esp+70h+var_70]
		movdqu	xmm1, [esp+70h+var_60]
		movdqu	xmm2, [esp+70h+var_50]
		movdqu	xmm3, [esp+70h+var_40]
		movdqu	xmm4, [esp+70h+var_30]
		movdqu	xmm5, [esp+70h+var_20]
		movdqu	xmm6, [esp+70h+var_10]
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_70+0Ch],	ebx
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_60+0Ch],	ebx
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_50+0Ch],	ebx
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_40+0Ch],	ebx
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_30+0Ch],	ebx
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_20+0Ch],	ebx
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	dword ptr [esp+70h+var_10+0Ch],	ebx
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenclast xmm0, xmm7
		aesenclast xmm1, xmm7
		aesenclast xmm2, xmm7
		aesenclast xmm3, xmm7
		aesenclast xmm4, xmm7
		aesenclast xmm5, xmm7
		aesenclast xmm6, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax+10h]
		pxor	xmm1, xmm7
		movdqu	xmm7, xmmword ptr [eax+20h]
		pxor	xmm2, xmm7
		movdqu	xmm7, xmmword ptr [eax+30h]
		pxor	xmm3, xmm7
		movdqu	xmm7, xmmword ptr [eax+40h]
		pxor	xmm4, xmm7
		movdqu	xmm7, xmmword ptr [eax+50h]
		pxor	xmm5, xmm7
		movdqu	xmm7, xmmword ptr [eax+60h]
		pxor	xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_1003A1C5
; ---------------------------------------------------------------------------

loc_1003A452:				; CODE XREF: sub_1003A120+A8j
					; sub_1003A120+3C5j
		cmp	edi, 10h
		jb	loc_1003A4EA
		movdqu	xmm0, [esp+70h+var_70]
		add	esp, 10h
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenclast xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_1003A452
; ---------------------------------------------------------------------------

loc_1003A4EA:				; CODE XREF: sub_1003A120+335j
		mov	esi, [ebp+arg_0]
		movdqu	xmm0, [esp+70h+var_70]
		movdqu	xmm1, xmmword ptr [ecx]
		pxor	xmm0, xmm1
		movdqu	xmmword	ptr [esi+8], xmm0
		xor	eax, eax
		mov	esp, ebp
		pop	ebp
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_1003A120	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

loc_1003A510:				; DATA XREF: sub_1000D6C0+B2o
		push	edi
		push	esi
		push	ebx
		push	ebp
		mov	esi, [esp+14h]
		mov	edx, [esp+18h]
		mov	eax, [esp+24h]
		mov	edi, [esp+28h]
		mov	ecx, [esi+4]
		lea	ecx, [ecx+2Ch]
		mov	ebp, esp
		sub	esp, 70h
		and	esp, 0FFFFFFF0h
		movdqu	xmm0, xmmword ptr [esi+8]
		mov	esi, [esi+14h]
		bswap	esi
		movdqu	xmm1, xmmword ptr [ecx]
		pxor	xmm0, xmm1
		movdqa	xmmword	ptr [esp], xmm0
		movdqa	xmmword	ptr [esp+10h], xmm0
		movdqa	xmmword	ptr [esp+20h], xmm0
		movdqa	xmmword	ptr [esp+30h], xmm0
		movdqa	xmmword	ptr [esp+40h], xmm0
		movdqa	xmmword	ptr [esp+50h], xmm0
		movdqa	xmmword	ptr [esp+60h], xmm0
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+1Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+2Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+3Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+4Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+5Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+6Ch], ebx

loc_1003A5B5:				; CODE XREF: .text:1003A893j
		cmp	edi, 70h
		jb	loc_1003A898
		movdqu	xmm0, xmmword ptr [esp]
		movdqu	xmm1, xmmword ptr [esp+10h]
		movdqu	xmm2, xmmword ptr [esp+20h]
		movdqu	xmm3, xmmword ptr [esp+30h]
		movdqu	xmm4, xmmword ptr [esp+40h]
		movdqu	xmm5, xmmword ptr [esp+50h]
		movdqu	xmm6, xmmword ptr [esp+60h]
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+0Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+1Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+2Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+3Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+4Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+5Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+6Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenclast xmm0, xmm7
		aesenclast xmm1, xmm7
		aesenclast xmm2, xmm7
		aesenclast xmm3, xmm7
		aesenclast xmm4, xmm7
		aesenclast xmm5, xmm7
		aesenclast xmm6, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax+10h]
		pxor	xmm1, xmm7
		movdqu	xmm7, xmmword ptr [eax+20h]
		pxor	xmm2, xmm7
		movdqu	xmm7, xmmword ptr [eax+30h]
		pxor	xmm3, xmm7
		movdqu	xmm7, xmmword ptr [eax+40h]
		pxor	xmm4, xmm7
		movdqu	xmm7, xmmword ptr [eax+50h]
		pxor	xmm5, xmm7
		movdqu	xmm7, xmmword ptr [eax+60h]
		pxor	xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_1003A5B5
; ---------------------------------------------------------------------------

loc_1003A898:				; CODE XREF: .text:1003A5B8j
					; .text:1003A945j
		cmp	edi, 10h
		jb	loc_1003A94A
		movdqu	xmm0, xmmword ptr [esp]
		add	esp, 10h
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenclast xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_1003A898
; ---------------------------------------------------------------------------

loc_1003A94A:				; CODE XREF: .text:1003A89Bj
		mov	esi, [ebp+14h]
		movdqu	xmm0, xmmword ptr [esp]
		movdqu	xmm1, xmmword ptr [ecx]
		pxor	xmm0, xmm1
		movdqu	xmmword	ptr [esi+8], xmm0
		xor	eax, eax
		mov	esp, ebp
		pop	ebp
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1003A970:				; DATA XREF: sub_1000D6C0+B9o
		push	edi
		push	esi
		push	ebx
		push	ebp
		mov	esi, [esp+14h]
		mov	edx, [esp+18h]
		mov	eax, [esp+24h]
		mov	edi, [esp+28h]
		mov	ecx, [esi+4]
		lea	ecx, [ecx+2Ch]
		mov	ebp, esp
		sub	esp, 70h
		and	esp, 0FFFFFFF0h
		movdqu	xmm0, xmmword ptr [esi+8]
		mov	esi, [esi+14h]
		bswap	esi
		movdqu	xmm1, xmmword ptr [ecx]
		pxor	xmm0, xmm1
		movdqa	xmmword	ptr [esp], xmm0
		movdqa	xmmword	ptr [esp+10h], xmm0
		movdqa	xmmword	ptr [esp+20h], xmm0
		movdqa	xmmword	ptr [esp+30h], xmm0
		movdqa	xmmword	ptr [esp+40h], xmm0
		movdqa	xmmword	ptr [esp+50h], xmm0
		movdqa	xmmword	ptr [esp+60h], xmm0
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+1Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+2Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+3Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+4Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+5Ch], ebx
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+6Ch], ebx

loc_1003AA15:				; CODE XREF: .text:1003AD49j
		cmp	edi, 70h
		jb	loc_1003AD4E
		movdqu	xmm0, xmmword ptr [esp]
		movdqu	xmm1, xmmword ptr [esp+10h]
		movdqu	xmm2, xmmword ptr [esp+20h]
		movdqu	xmm3, xmmword ptr [esp+30h]
		movdqu	xmm4, xmmword ptr [esp+40h]
		movdqu	xmm5, xmmword ptr [esp+50h]
		movdqu	xmm6, xmmword ptr [esp+60h]
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+0Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+1Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+2Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+3Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+4Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+5Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		inc	esi
		mov	ebx, esi
		bswap	ebx
		xor	ebx, [ecx+0Ch]
		mov	[esp+6Ch], ebx
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesenc	xmm0, xmm7
		aesenc	xmm1, xmm7
		aesenc	xmm2, xmm7
		aesenc	xmm3, xmm7
		aesenc	xmm4, xmm7
		aesenc	xmm5, xmm7
		aesenc	xmm6, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesenclast xmm0, xmm7
		aesenclast xmm1, xmm7
		aesenclast xmm2, xmm7
		aesenclast xmm3, xmm7
		aesenclast xmm4, xmm7
		aesenclast xmm5, xmm7
		aesenclast xmm6, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax+10h]
		pxor	xmm1, xmm7
		movdqu	xmm7, xmmword ptr [eax+20h]
		pxor	xmm2, xmm7
		movdqu	xmm7, xmmword ptr [eax+30h]
		pxor	xmm3, xmm7
		movdqu	xmm7, xmmword ptr [eax+40h]
		pxor	xmm4, xmm7
		movdqu	xmm7, xmmword ptr [eax+50h]
		pxor	xmm5, xmm7
		movdqu	xmm7, xmmword ptr [eax+60h]
		pxor	xmm6, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		movdqu	xmmword	ptr [edx+10h], xmm1
		movdqu	xmmword	ptr [edx+20h], xmm2
		movdqu	xmmword	ptr [edx+30h], xmm3
		movdqu	xmmword	ptr [edx+40h], xmm4
		movdqu	xmmword	ptr [edx+50h], xmm5
		movdqu	xmmword	ptr [edx+60h], xmm6
		lea	eax, [eax+70h]
		lea	edx, [edx+70h]
		sub	edi, 70h
		jmp	loc_1003AA15
; ---------------------------------------------------------------------------

loc_1003AD4E:				; CODE XREF: .text:1003AA18j
					; .text:1003AE15j
		cmp	edi, 10h
		jb	loc_1003AE1A
		movdqu	xmm0, xmmword ptr [esp]
		add	esp, 10h
		movdqu	xmm7, xmmword ptr [ecx+10h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+20h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+30h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+40h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+50h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+60h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+70h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+80h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+90h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0A0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0B0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0C0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0D0h]
		aesenc	xmm0, xmm7
		movdqu	xmm7, xmmword ptr [ecx+0E0h]
		aesenclast xmm0, xmm7
		movdqu	xmm7, xmmword ptr [eax]
		pxor	xmm0, xmm7
		movdqu	xmmword	ptr [edx], xmm0
		lea	eax, [eax+10h]
		lea	edx, [edx+10h]
		sub	edi, 10h
		jmp	loc_1003AD4E
; ---------------------------------------------------------------------------

loc_1003AE1A:				; CODE XREF: .text:1003AD51j
		mov	esi, [ebp+14h]
		movdqu	xmm0, xmmword ptr [esp]
		movdqu	xmm1, xmmword ptr [ecx]
		pxor	xmm0, xmm1
		movdqu	xmmword	ptr [esi+8], xmm0
		xor	eax, eax
		mov	esp, ebp
		pop	ebp
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1003AE40	proc near		; CODE XREF: sub_10037640+17Cp
					; sub_100378C0+BDp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	eax, [esp+4+arg_0]
		mov	ecx, [esp+4+arg_4]
		mov	edx, [esp+4+arg_10]
		mov	ebx, [esp+4+arg_14]
		vzeroupper
		vmovdqu	xmm0, xmmword ptr [ecx]
		vpxor	xmm1, xmm1, xmm1
		vpinsrd	xmm1, xmm1, [esp+4+arg_8], 0
		vpinsrd	xmm1, xmm1, [esp+4+arg_C], 2
		vpsllq	xmm1, xmm1, 3
		vpxor	xmm0, xmm0, xmm1
		vmovdqu	xmm1, xmmword ptr [eax]
		vpclmulqdq xmm2, xmm1, xmm0, 0
		vpclmulqdq xmm5, xmm1, xmm0, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm0, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm0
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm2
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm2, xmm2, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpxor	xmm0, xmm2, xmm5
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpxor	xmm0, xmm0, xmmword ptr	[edx]
		vmovdqu	xmmword	ptr [ebx], xmm0
		vzeroupper
		pop	ebx
		retn
sub_1003AE40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1003AF00	proc near		; CODE XREF: sub_10037640+B6p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_8]
		vzeroupper
		vmovdqu	xmm0, xmmword ptr [ecx]
		lea	ecx, [ecx+10h]
		dec	edx

loc_1003AF17:				; CODE XREF: sub_1003AF00+20j
		vaesenc	xmm0, xmm0, xmmword ptr	[ecx]
		lea	ecx, [ecx+10h]
		dec	edx
		jnz	short loc_1003AF17
		vaesenclast xmm0, xmm0,	xmmword	ptr [ecx]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpsrad	xmm3, xmm0, 1Fh
		vpshufd	xmm3, xmm3, 0FFh
		vpand	xmm5, xmm3, xmmword_1004E3A0
		vpsrld	xmm3, xmm0, 1Fh
		vpslld	xmm4, xmm0, 1
		vpslldq	xmm3, xmm3, 4
		vpxor	xmm0, xmm4, xmm3
		vpxor	xmm0, xmm0, xmm5
		vmovdqu	xmm1, xmm0
		vmovdqu	xmmword	ptr [eax], xmm0
		vpshufd	xmm2, xmm0, 4Eh
		vpxor	xmm2, xmm2, xmm0
		vmovdqu	xmmword	ptr [eax+80h], xmm2
		vpclmulqdq xmm2, xmm1, xmm0, 0
		vpclmulqdq xmm5, xmm1, xmm0, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm0, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm0
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm2
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm2, xmm2, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpxor	xmm0, xmm2, xmm5
		vmovdqu	xmmword	ptr [eax+10h], xmm0
		vpshufd	xmm2, xmm0, 4Eh
		vpxor	xmm2, xmm2, xmm0
		vmovdqu	xmmword	ptr [eax+90h], xmm2
		vpclmulqdq xmm2, xmm1, xmm0, 0
		vpclmulqdq xmm5, xmm1, xmm0, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm0, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm0
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm2
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm2, xmm2, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpxor	xmm0, xmm2, xmm5
		vmovdqu	xmmword	ptr [eax+20h], xmm0
		vpshufd	xmm2, xmm0, 4Eh
		vpxor	xmm2, xmm2, xmm0
		vmovdqu	xmmword	ptr [eax+0A0h],	xmm2
		vpclmulqdq xmm2, xmm1, xmm0, 0
		vpclmulqdq xmm5, xmm1, xmm0, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm0, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm0
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm2
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm2, xmm2, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpxor	xmm0, xmm2, xmm5
		vmovdqu	xmmword	ptr [eax+30h], xmm0
		vpshufd	xmm2, xmm0, 4Eh
		vpxor	xmm2, xmm2, xmm0
		vmovdqu	xmmword	ptr [eax+0B0h],	xmm2
		vpclmulqdq xmm2, xmm1, xmm0, 0
		vpclmulqdq xmm5, xmm1, xmm0, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm0, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm0
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm2
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm2, xmm2, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpxor	xmm0, xmm2, xmm5
		vmovdqu	xmmword	ptr [eax+40h], xmm0
		vpshufd	xmm2, xmm0, 4Eh
		vpxor	xmm2, xmm2, xmm0
		vmovdqu	xmmword	ptr [eax+0C0h],	xmm2
		vpclmulqdq xmm2, xmm1, xmm0, 0
		vpclmulqdq xmm5, xmm1, xmm0, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm0, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm0
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm2
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm2, xmm2, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpxor	xmm0, xmm2, xmm5
		vmovdqu	xmmword	ptr [eax+50h], xmm0
		vpshufd	xmm2, xmm0, 4Eh
		vpxor	xmm2, xmm2, xmm0
		vmovdqu	xmmword	ptr [eax+0D0h],	xmm2
		vpclmulqdq xmm2, xmm1, xmm0, 0
		vpclmulqdq xmm5, xmm1, xmm0, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm0, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm0
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm2
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm2, xmm2, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpxor	xmm0, xmm2, xmm5
		vmovdqu	xmmword	ptr [eax+60h], xmm0
		vpshufd	xmm2, xmm0, 4Eh
		vpxor	xmm2, xmm2, xmm0
		vmovdqu	xmmword	ptr [eax+0E0h],	xmm2
		vpclmulqdq xmm2, xmm1, xmm0, 0
		vpclmulqdq xmm5, xmm1, xmm0, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm0, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm0
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm2
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm2, xmm2, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpclmulqdq xmm3, xmm2, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm2, xmm3, xmm4
		vpxor	xmm0, xmm2, xmm5
		vmovdqu	xmmword	ptr [eax+70h], xmm0
		vpshufd	xmm2, xmm0, 4Eh
		vpxor	xmm2, xmm2, xmm0
		vmovdqu	xmmword	ptr [eax+0F0h],	xmm2
		vzeroupper
		retn
sub_1003AF00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1003B2F0	proc near		; CODE XREF: sub_10037640+116p
					; sub_10037640+159p ...

arg_0		= dword	ptr  4
arg_7		= dword	ptr  0Bh
arg_C		= dword	ptr  10h

		cmp	[esp+arg_7], 0
		jnz	short loc_1003B2F8
		retn
; ---------------------------------------------------------------------------

loc_1003B2F8:				; CODE XREF: sub_1003B2F0+5j
		push	ebx
		push	esi
		mov	eax, [esp+8+arg_0]
		mov	ecx, [esp+10h]
		mov	edx, [esp+8+arg_7+1]
		mov	ebx, [esp+8+arg_C]
		vzeroupper
		vpxor	xmm7, xmm7, xmm7
		vmovdqu	xmm1, xmmword ptr [ebx]
		mov	esi, edx
		and	esi, 7Fh
		jz	loc_1003B3C1
		and	edx, 0FFFFFF80h
		sub	esi, 10h
		vmovdqu	xmm0, xmmword ptr [ecx]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpxor	xmm0, xmm0, xmm1
		vpclmulqdq xmm2, xmm0, xmmword ptr [esi+eax], 0
		vpclmulqdq xmm3, xmm0, xmmword ptr [esi+eax], 11h
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm4, xmm5, xmmword ptr [esi+eax+80h], 0
		lea	ecx, [ecx+10h]
		test	esi, esi
		jnz	short loc_1003B362
		jmp	short loc_1003B3A7
; ---------------------------------------------------------------------------

loc_1003B362:				; CODE XREF: sub_1003B2F0+6Ej
					; sub_1003B2F0+B5j
		sub	esi, 10h
		vmovdqu	xmm0, xmmword ptr [ecx]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpclmulqdq xmm5, xmm0, xmmword ptr [esi+eax], 0
		vpxor	xmm2, xmm2, xmm5
		vpclmulqdq xmm5, xmm0, xmmword ptr [esi+eax], 11h
		vpxor	xmm3, xmm3, xmm5
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm5, xmm5, xmmword ptr [esi+eax+80h], 0
		vpxor	xmm4, xmm4, xmm5
		test	esi, esi
		lea	ecx, [ecx+10h]
		jnz	short loc_1003B362

loc_1003B3A7:				; CODE XREF: sub_1003B2F0+70j
		vpxor	xmm4, xmm4, xmm2
		vpxor	xmm4, xmm4, xmm3
		vpsrldq	xmm5, xmm4, 8
		vpslldq	xmm4, xmm4, 8
		vpxor	xmm7, xmm3, xmm5
		vpxor	xmm1, xmm2, xmm4

loc_1003B3C1:				; CODE XREF: sub_1003B2F0+2Aj
					; sub_1003B2F0+2F6j
		sub	edx, 80h
		jb	loc_1003B5EB
		vmovdqu	xmm0, xmmword ptr [ecx+70h]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpclmulqdq xmm2, xmm0, xmmword ptr [eax], 0
		vpclmulqdq xmm3, xmm0, xmmword ptr [eax], 11h
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm4, xmm5, xmmword ptr [eax+80h], 0
		vmovdqu	xmm0, xmmword ptr [ecx+60h]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+10h], 0
		vpxor	xmm2, xmm2, xmm5
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+10h], 11h
		vpxor	xmm3, xmm3, xmm5
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm5, xmm5, xmmword ptr [eax+90h], 0
		vpxor	xmm4, xmm4, xmm5
		vmovdqu	xmm0, xmmword ptr [ecx+50h]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpclmulqdq xmm6, xmm1, xmmword_1004E3A0, 10h
		vpalignr xmm1, xmm1, xmm1, 8
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+20h], 0
		vpxor	xmm2, xmm2, xmm5
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+20h], 11h
		vpxor	xmm3, xmm3, xmm5
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm5, xmm5, xmmword ptr [eax+0A0h], 0
		vpxor	xmm4, xmm4, xmm5
		vpxor	xmm1, xmm1, xmm6
		vmovdqu	xmm0, xmmword ptr [ecx+40h]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+30h], 0
		vpxor	xmm2, xmm2, xmm5
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+30h], 11h
		vpxor	xmm3, xmm3, xmm5
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm5, xmm5, xmmword ptr [eax+0B0h], 0
		vpxor	xmm4, xmm4, xmm5
		vmovdqu	xmm0, xmmword ptr [ecx+30h]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpclmulqdq xmm6, xmm1, xmmword_1004E3A0, 10h
		vpalignr xmm1, xmm1, xmm1, 8
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+40h], 0
		vpxor	xmm2, xmm2, xmm5
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+40h], 11h
		vpxor	xmm3, xmm3, xmm5
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm5, xmm5, xmmword ptr [eax+0C0h], 0
		vpxor	xmm4, xmm4, xmm5
		vpxor	xmm1, xmm1, xmm6
		vmovdqu	xmm0, xmmword ptr [ecx+20h]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+50h], 0
		vpxor	xmm2, xmm2, xmm5
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+50h], 11h
		vpxor	xmm3, xmm3, xmm5
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm5, xmm5, xmmword ptr [eax+0D0h], 0
		vpxor	xmm4, xmm4, xmm5
		vpxor	xmm1, xmm1, xmm7
		vmovdqu	xmm0, xmmword ptr [ecx+10h]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+60h], 0
		vpxor	xmm2, xmm2, xmm5
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+60h], 11h
		vpxor	xmm3, xmm3, xmm5
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm5, xmm5, xmmword ptr [eax+0E0h], 0
		vpxor	xmm4, xmm4, xmm5
		vmovdqu	xmm0, xmmword ptr [ecx]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpxor	xmm0, xmm0, xmm1
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+70h], 0
		vpxor	xmm2, xmm2, xmm5
		vpclmulqdq xmm5, xmm0, xmmword ptr [eax+70h], 11h
		vpxor	xmm3, xmm3, xmm5
		vpshufd	xmm5, xmm0, 4Eh
		vpxor	xmm5, xmm5, xmm0
		vpclmulqdq xmm5, xmm5, xmmword ptr [eax+0F0h], 0
		vpxor	xmm4, xmm4, xmm5
		vpxor	xmm4, xmm4, xmm2
		vpxor	xmm4, xmm4, xmm3
		vpsrldq	xmm5, xmm4, 8
		vpslldq	xmm4, xmm4, 8
		vpxor	xmm7, xmm3, xmm5
		vpxor	xmm1, xmm2, xmm4
		lea	ecx, [ecx+80h]
		jmp	loc_1003B3C1
; ---------------------------------------------------------------------------

loc_1003B5EB:				; CODE XREF: sub_1003B2F0+D7j
		vpclmulqdq xmm6, xmm1, xmmword_1004E3A0, 10h
		vpalignr xmm1, xmm1, xmm1, 8
		vpxor	xmm1, xmm1, xmm6
		vpclmulqdq xmm6, xmm1, xmmword_1004E3A0, 10h
		vpalignr xmm1, xmm1, xmm1, 8
		vpxor	xmm1, xmm1, xmm6
		vpxor	xmm1, xmm1, xmm7
		vmovdqu	xmmword	ptr [ebx], xmm1
		vzeroupper
		pop	esi
		pop	ebx
		retn
sub_1003B2F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1003B630	proc near		; CODE XREF: sub_100379F0+9Ep

var_110		= xmmword ptr -110h
var_100		= xmmword ptr -100h
var_F0		= xmmword ptr -0F0h
var_E0		= xmmword ptr -0E0h
var_D0		= xmmword ptr -0D0h
var_C0		= xmmword ptr -0C0h
var_B0		= xmmword ptr -0B0h
var_90		= xmmword ptr -90h
var_80		= xmmword ptr -80h
var_70		= xmmword ptr -70h
var_60		= xmmword ptr -60h
var_50		= xmmword ptr -50h
var_40		= xmmword ptr -40h
var_30		= xmmword ptr -30h
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 0
		jnz	short loc_1003B638
		retn
; ---------------------------------------------------------------------------

loc_1003B638:				; CODE XREF: sub_1003B630+5j
		vzeroupper
		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebp, esp
		sub	esp, 100h
		and	esp, 0FFFFFFF0h
		mov	eax, [ebp+14h]
		mov	ecx, [ebp+18h]
		mov	edx, [ebp+1Ch]
		mov	esi, [edx+130h]
		lea	esi, [esi+2Ch]
		mov	ebx, [edx+12Ch]
		bswap	ebx
		vmovdqu	xmm1, xmmword ptr [esi]
		vpxor	xmm1, xmm1, xmmword ptr	[edx+120h]
		vmovdqu	[esp+110h+var_90], xmm1
		cmp	dword ptr [ebp+20h], 70h
		jb	loc_1003C240
		vmovdqu	[esp+110h+var_80], xmm1
		vmovdqu	[esp+110h+var_70], xmm1
		vmovdqu	[esp+110h+var_60], xmm1
		vmovdqu	[esp+110h+var_50], xmm1
		vmovdqu	[esp+110h+var_40], xmm1
		vmovdqu	[esp+110h+var_30], xmm1
		vmovdqu	xmm0, xmmword ptr [edx+120h]
		vpshufb	xmm0, xmm0, xmmword_1004E380
		sub	dword ptr [ebp+20h], 70h
		vpaddd	xmm1, xmm0, xmmword_1004E360
		vpaddd	xmm2, xmm0, xmmword_1004E370
		vpaddd	xmm3, xmm2, xmmword_1004E360
		vpaddd	xmm4, xmm2, xmmword_1004E370
		vpaddd	xmm5, xmm4, xmmword_1004E360
		vpaddd	xmm6, xmm4, xmmword_1004E370
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpshufb	xmm1, xmm1, xmmword_1004E380
		vpshufb	xmm2, xmm2, xmmword_1004E380
		vpshufb	xmm3, xmm3, xmmword_1004E380
		vpshufb	xmm4, xmm4, xmmword_1004E380
		vpshufb	xmm5, xmm5, xmmword_1004E380
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vmovdqu	xmm7, xmmword ptr [esi]
		vpxor	xmm0, xmm0, xmm7
		vpxor	xmm1, xmm1, xmm7
		vpxor	xmm2, xmm2, xmm7
		vpxor	xmm3, xmm3, xmm7
		vpxor	xmm4, xmm4, xmm7
		vpxor	xmm5, xmm5, xmm7
		vpxor	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+10h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 7
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_90+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+20h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_80+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+30h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_70+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+40h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_60+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+50h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_50+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+60h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_40+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+70h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_30+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+80h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+90h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0A0h]
		cmp	dword ptr [esi-28h], 0Ah
		jz	loc_1003BA16
		vmovdqu	xmm7, xmmword ptr [esi+0A0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0B0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0C0h]
		cmp	dword ptr [esi-28h], 0Ch
		jz	short loc_1003BA16
		vmovdqu	xmm7, xmmword ptr [esi+0C0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0D0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0E0h]

loc_1003BA16:				; CODE XREF: sub_1003B630+31Ej
					; sub_1003B630+386j
		vaesenclast xmm0, xmm0,	xmm7
		vaesenclast xmm1, xmm1,	xmm7
		vaesenclast xmm2, xmm2,	xmm7
		vaesenclast xmm3, xmm3,	xmm7
		vaesenclast xmm4, xmm4,	xmm7
		vaesenclast xmm5, xmm5,	xmm7
		vaesenclast xmm6, xmm6,	xmm7
		vpxor	xmm0, xmm0, xmmword ptr	[eax]
		vpxor	xmm1, xmm1, xmmword ptr	[eax+10h]
		vpxor	xmm2, xmm2, xmmword ptr	[eax+20h]
		vpxor	xmm3, xmm3, xmmword ptr	[eax+30h]
		vpxor	xmm4, xmm4, xmmword ptr	[eax+40h]
		vpxor	xmm5, xmm5, xmmword ptr	[eax+50h]
		vpxor	xmm6, xmm6, xmmword ptr	[eax+60h]
		vmovdqu	xmmword	ptr [ecx], xmm0
		vmovdqu	xmmword	ptr [ecx+10h], xmm1
		vmovdqu	xmmword	ptr [ecx+20h], xmm2
		vmovdqu	xmmword	ptr [ecx+30h], xmm3
		vmovdqu	xmmword	ptr [ecx+40h], xmm4
		vmovdqu	xmmword	ptr [ecx+50h], xmm5
		vmovdqu	xmmword	ptr [ecx+60h], xmm6
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpshufb	xmm1, xmm1, xmmword_1004E380
		vpshufb	xmm2, xmm2, xmmword_1004E380
		vpshufb	xmm3, xmm3, xmmword_1004E380
		vpshufb	xmm4, xmm4, xmmword_1004E380
		vpshufb	xmm5, xmm5, xmmword_1004E380
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vmovdqa	[esp+110h+var_100], xmm5
		vmovdqa	[esp+110h+var_F0], xmm4
		vmovdqa	[esp+110h+var_E0], xmm3
		vmovdqa	[esp+110h+var_D0], xmm2
		vmovdqa	[esp+110h+var_C0], xmm1
		vmovdqa	[esp+110h+var_B0], xmm0
		lea	ecx, [ecx+70h]
		lea	eax, [eax+70h]
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_1003BAE8:				; CODE XREF: sub_1003B630+4B6j
					; sub_1003B630+A4Bj
		cmp	dword ptr [ebp+20h], 70h
		jb	loc_1003C080
		sub	dword ptr [ebp+20h], 70h
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm1, xmm5, xmmword ptr [edx+80h], 0
		vmovdqu	xmm5, xmmword ptr [edx]
		vpclmulqdq xmm2, xmm6, xmm5, 11h
		vpclmulqdq xmm3, xmm6, xmm5, 0
		vmovdqu	xmm6, [esp+110h+var_100]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+90h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+10h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_F0]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0A0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+20h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_E0]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0B0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+30h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_D0]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0C0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+40h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_C0]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0D0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+50h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_B0]
		vpxor	xmm6, xmm6, xmmword ptr	[edx+110h]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0E0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+60h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vpxor	xmm1, xmm1, xmm2
		vpxor	xmm1, xmm1, xmm3
		vpsrldq	xmm4, xmm1, 8
		vpxor	xmm5, xmm2, xmm4
		vpslldq	xmm4, xmm1, 8
		vpxor	xmm6, xmm3, xmm4
		vpclmulqdq xmm2, xmm6, xmmword_1004E3A0, 10h
		vpalignr xmm6, xmm6, xmm6, 8
		vpxor	xmm6, xmm6, xmm2
		vpclmulqdq xmm2, xmm6, xmmword_1004E3A0, 10h
		vpalignr xmm6, xmm6, xmm6, 8
		vpxor	xmm6, xmm6, xmm2
		vpxor	xmm6, xmm6, xmm5
		vmovdqu	xmmword	ptr [edx+110h],	xmm6
		vmovdqa	xmm0, [esp+110h+var_90]
		vmovdqa	xmm1, [esp+110h+var_80]
		vmovdqa	xmm2, [esp+110h+var_70]
		vmovdqa	xmm3, [esp+110h+var_60]
		vmovdqa	xmm4, [esp+110h+var_50]
		vmovdqa	xmm5, [esp+110h+var_40]
		vmovdqa	xmm6, [esp+110h+var_30]
		vmovdqu	xmm7, xmmword ptr [esi+10h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_90+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+20h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_80+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+30h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_70+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+40h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_60+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+50h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_50+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+60h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_40+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+70h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_30+0Ch], edi
		vmovdqu	xmm7, xmmword ptr [esi+80h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+90h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0A0h]
		cmp	dword ptr [esi-28h], 0Ah
		jz	loc_1003BFAB
		vmovdqu	xmm7, xmmword ptr [esi+0A0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0B0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0C0h]
		cmp	dword ptr [esi-28h], 0Ch
		jz	short loc_1003BFAB
		vmovdqu	xmm7, xmmword ptr [esi+0C0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0D0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0E0h]

loc_1003BFAB:				; CODE XREF: sub_1003B630+8B3j
					; sub_1003B630+91Bj
		vaesenclast xmm0, xmm0,	xmm7
		vaesenclast xmm1, xmm1,	xmm7
		vaesenclast xmm2, xmm2,	xmm7
		vaesenclast xmm3, xmm3,	xmm7
		vaesenclast xmm4, xmm4,	xmm7
		vaesenclast xmm5, xmm5,	xmm7
		vaesenclast xmm6, xmm6,	xmm7
		vpxor	xmm0, xmm0, xmmword ptr	[eax]
		vpxor	xmm1, xmm1, xmmword ptr	[eax+10h]
		vpxor	xmm2, xmm2, xmmword ptr	[eax+20h]
		vpxor	xmm3, xmm3, xmmword ptr	[eax+30h]
		vpxor	xmm4, xmm4, xmmword ptr	[eax+40h]
		vpxor	xmm5, xmm5, xmmword ptr	[eax+50h]
		vpxor	xmm6, xmm6, xmmword ptr	[eax+60h]
		vmovdqu	xmmword	ptr [ecx], xmm0
		vmovdqu	xmmword	ptr [ecx+10h], xmm1
		vmovdqu	xmmword	ptr [ecx+20h], xmm2
		vmovdqu	xmmword	ptr [ecx+30h], xmm3
		vmovdqu	xmmword	ptr [ecx+40h], xmm4
		vmovdqu	xmmword	ptr [ecx+50h], xmm5
		vmovdqu	xmmword	ptr [ecx+60h], xmm6
		vpshufb	xmm0, xmm0, xmmword_1004E380
		vpshufb	xmm1, xmm1, xmmword_1004E380
		vpshufb	xmm2, xmm2, xmmword_1004E380
		vpshufb	xmm3, xmm3, xmmword_1004E380
		vpshufb	xmm4, xmm4, xmmword_1004E380
		vpshufb	xmm5, xmm5, xmmword_1004E380
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vmovdqa	[esp+110h+var_100], xmm5
		vmovdqa	[esp+110h+var_F0], xmm4
		vmovdqa	[esp+110h+var_E0], xmm3
		vmovdqa	[esp+110h+var_D0], xmm2
		vmovdqa	[esp+110h+var_C0], xmm1
		vmovdqa	[esp+110h+var_B0], xmm0
		lea	ecx, [ecx+70h]
		lea	eax, [eax+70h]
		jmp	loc_1003BAE8
; ---------------------------------------------------------------------------

loc_1003C080:				; CODE XREF: sub_1003B630+4BCj
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm1, xmm5, xmmword ptr [edx+80h], 0
		vmovdqu	xmm5, xmmword ptr [edx]
		vpclmulqdq xmm2, xmm6, xmm5, 11h
		vpclmulqdq xmm3, xmm6, xmm5, 0
		vmovdqu	xmm6, [esp+110h+var_100]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+90h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+10h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_F0]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0A0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+20h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_E0]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0B0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+30h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_D0]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0C0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+40h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_C0]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0D0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+50h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vmovdqu	xmm6, [esp+110h+var_B0]
		vpxor	xmm6, xmm6, xmmword ptr	[edx+110h]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0E0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+60h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		vpxor	xmm1, xmm1, xmm2
		vpxor	xmm1, xmm1, xmm3
		vpsrldq	xmm4, xmm1, 8
		vpxor	xmm5, xmm2, xmm4
		vpslldq	xmm4, xmm1, 8
		vpxor	xmm6, xmm3, xmm4
		vpclmulqdq xmm2, xmm6, xmmword_1004E3A0, 10h
		vpalignr xmm6, xmm6, xmm6, 8
		vpxor	xmm6, xmm6, xmm2
		vpclmulqdq xmm2, xmm6, xmmword_1004E3A0, 10h
		vpalignr xmm6, xmm6, xmm6, 8
		vpxor	xmm6, xmm6, xmm2
		vpxor	xmm6, xmm6, xmm5
		vmovdqu	xmmword	ptr [edx+110h],	xmm6
		sub	ebx, 6

loc_1003C240:				; CODE XREF: sub_1003B630+4Dj
					; sub_1003B630+D54j
		cmp	dword ptr [ebp+20h], 10h
		jb	loc_1003C389
		sub	dword ptr [ebp+20h], 10h
		vmovdqa	xmm2, [esp+110h+var_90]
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+110h+var_90+0Ch], edi
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+10h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+20h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+30h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+40h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+50h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+60h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+70h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+80h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+90h]
		vmovdqu	xmm3, xmmword ptr [esi+0A0h]
		cmp	dword ptr [esi-28h], 0Ah
		jz	short loc_1003C2EC
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0A0h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0B0h]
		vmovdqu	xmm3, xmmword ptr [esi+0C0h]
		cmp	dword ptr [esi-28h], 0Ch
		jz	short loc_1003C2EC
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0C0h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0D0h]
		vmovdqu	xmm3, xmmword ptr [esi+0E0h]

loc_1003C2EC:				; CODE XREF: sub_1003B630+C80j
					; sub_1003B630+CA0j
		vaesenclast xmm2, xmm2,	xmm3
		vpxor	xmm2, xmm2, xmmword ptr	[eax]
		vmovdqu	xmmword	ptr [ecx], xmm2
		lea	eax, [eax+10h]
		lea	ecx, [ecx+10h]
		vpshufb	xmm2, xmm2, xmmword_1004E380
		vpxor	xmm2, xmm2, xmmword ptr	[edx+110h]
		vmovdqu	xmm1, xmmword ptr [edx]
		vpclmulqdq xmm6, xmm1, xmm2, 0
		vpclmulqdq xmm5, xmm1, xmm2, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm2
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm6
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm6, xmm6, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm6, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm6, 4Eh
		vpxor	xmm6, xmm3, xmm4
		vpclmulqdq xmm3, xmm6, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm6, 4Eh
		vpxor	xmm6, xmm3, xmm4
		vpxor	xmm2, xmm6, xmm5
		vmovdqu	xmmword	ptr [edx+110h],	xmm2
		jmp	loc_1003C240
; ---------------------------------------------------------------------------

loc_1003C389:				; CODE XREF: sub_1003B630+C14j
		cmp	dword ptr [ebp+20h], 0
		jz	loc_1003C4F2
		vmovdqa	xmm2, [esp+110h+var_90]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+10h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+20h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+30h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+40h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+50h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+60h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+70h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+80h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+90h]
		vmovdqu	xmm3, xmmword ptr [esi+0A0h]
		cmp	dword ptr [esi-28h], 0Ah
		jz	short loc_1003C420
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0A0h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0B0h]
		vmovdqu	xmm3, xmmword ptr [esi+0C0h]
		cmp	dword ptr [esi-28h], 0Ch
		jz	short loc_1003C420
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0C0h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0D0h]
		vmovdqu	xmm3, xmmword ptr [esi+0E0h]

loc_1003C420:				; CODE XREF: sub_1003B630+DB4j
					; sub_1003B630+DD4j
		vaesenclast xmm2, xmm2,	xmm3
		vpxor	xmm3, xmm3, xmm3
		vmovdqa	[esp+110h+var_110], xmm3
		xor	esi, esi
		mov	edi, edx

loc_1003C432:				; CODE XREF: sub_1003B630+E0Ej
		cmp	[ebp+20h], esi
		jz	short loc_1003C440
		mov	dl, [esi+eax]
		mov	byte ptr [esp+esi+110h+var_110], dl
		inc	esi
		jmp	short loc_1003C432
; ---------------------------------------------------------------------------

loc_1003C440:				; CODE XREF: sub_1003B630+E05j
		vpxor	xmm2, xmm2, [esp+110h+var_110]
		vmovdqa	[esp+110h+var_110], xmm2
		xor	esi, esi

loc_1003C44C:				; CODE XREF: sub_1003B630+E28j
		cmp	[ebp+20h], esi
		jz	short loc_1003C45A
		mov	dl, byte ptr [esp+esi+110h+var_110]
		mov	[esi+ecx], dl
		inc	esi
		jmp	short loc_1003C44C
; ---------------------------------------------------------------------------

loc_1003C45A:				; CODE XREF: sub_1003B630+E1Fj
					; sub_1003B630+E34j
		cmp	esi, 10h
		jz	short loc_1003C466
		mov	byte ptr [esp+esi+110h+var_110], 0
		inc	esi
		jmp	short loc_1003C45A
; ---------------------------------------------------------------------------

loc_1003C466:				; CODE XREF: sub_1003B630+E2Dj
		mov	edx, edi
		vmovdqa	xmm2, [esp+110h+var_110]
		vpshufb	xmm2, xmm2, xmmword_1004E380
		vpxor	xmm2, xmm2, xmmword ptr	[edx+110h]
		vmovdqu	xmm1, xmmword ptr [edx]
		vpclmulqdq xmm6, xmm1, xmm2, 0
		vpclmulqdq xmm5, xmm1, xmm2, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm2
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm6
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm6, xmm6, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm6, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm6, 4Eh
		vpxor	xmm6, xmm3, xmm4
		vpclmulqdq xmm3, xmm6, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm6, 4Eh
		vpxor	xmm6, xmm3, xmm4
		vpxor	xmm2, xmm6, xmm5
		vmovdqu	xmmword	ptr [edx+110h],	xmm2

loc_1003C4F2:				; CODE XREF: sub_1003B630+D5Dj
		inc	ebx
		bswap	ebx
		mov	[edx+12Ch], ebx
		mov	esp, ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		vzeroupper
		retn
sub_1003B630	endp


; =============== S U B	R O U T	I N E =======================================


sub_1003C505	proc near		; CODE XREF: sub_100378C0+92p

var_90		= xmmword ptr -90h
var_80		= xmmword ptr -80h
var_70		= xmmword ptr -70h
var_60		= xmmword ptr -60h
var_50		= xmmword ptr -50h
var_40		= xmmword ptr -40h
var_30		= xmmword ptr -30h
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 0
		jnz	short loc_1003C50D
		retn
; ---------------------------------------------------------------------------

loc_1003C50D:				; CODE XREF: sub_1003C505+5j
		vzeroupper
		push	ebp
		push	ebx
		push	esi
		push	edi
		mov	ebp, esp
		sub	esp, 80h
		and	esp, 0FFFFFFF0h
		mov	ecx, [ebp+14h]
		mov	eax, [ebp+18h]
		mov	edx, [ebp+1Ch]
		mov	esi, [edx+130h]
		lea	esi, [esi+2Ch]
		mov	ebx, [edx+12Ch]
		bswap	ebx
		vmovdqu	xmm1, xmmword ptr [esi]
		vpxor	xmm1, xmm1, xmmword ptr	[edx+120h]
		vmovdqu	[esp+90h+var_90], xmm1
		cmp	dword ptr [ebp+20h], 70h
		jb	loc_1003CACE
		vmovdqu	[esp+90h+var_80], xmm1
		vmovdqu	[esp+90h+var_70], xmm1
		vmovdqu	[esp+90h+var_60], xmm1
		vmovdqu	[esp+90h+var_50], xmm1
		vmovdqu	[esp+90h+var_40], xmm1
		vmovdqu	[esp+90h+var_30], xmm1
		dec	ebx

loc_1003C579:				; CODE XREF: sub_1003C505+5B6j
		cmp	dword ptr [ebp+20h], 70h
		jb	loc_1003CAC0
		sub	dword ptr [ebp+20h], 70h
		vmovdqu	xmm6, xmmword ptr [ecx]
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vpxor	xmm6, xmm6, xmmword ptr	[edx+110h]
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm1, xmm5, xmmword ptr [edx+0E0h], 0
		vmovdqu	xmm5, xmmword ptr [edx+60h]
		vpclmulqdq xmm2, xmm6, xmm5, 11h
		vpclmulqdq xmm3, xmm6, xmm5, 0
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_90+0Ch],	edi
		vmovdqu	xmm6, xmmword ptr [ecx+10h]
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0D0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+50h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_80+0Ch],	edi
		vmovdqu	xmm6, xmmword ptr [ecx+20h]
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0C0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+40h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_70+0Ch],	edi
		vmovdqu	xmm6, xmmword ptr [ecx+30h]
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0B0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+30h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_60+0Ch],	edi
		vmovdqu	xmm6, xmmword ptr [ecx+40h]
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+0A0h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+20h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_50+0Ch],	edi
		vmovdqu	xmm6, xmmword ptr [ecx+50h]
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+90h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx+10h]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_40+0Ch],	edi
		vmovdqu	xmm6, xmmword ptr [ecx+60h]
		vpshufb	xmm6, xmm6, xmmword_1004E380
		vpshufd	xmm5, xmm6, 4Eh
		vpxor	xmm5, xmm5, xmm6
		vpclmulqdq xmm4, xmm5, xmmword ptr [edx+80h], 0
		vpxor	xmm1, xmm1, xmm4
		vmovdqu	xmm5, xmmword ptr [edx]
		vpclmulqdq xmm4, xmm6, xmm5, 11h
		vpxor	xmm2, xmm2, xmm4
		vpclmulqdq xmm4, xmm6, xmm5, 0
		vpxor	xmm3, xmm3, xmm4
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_30+0Ch],	edi
		vpxor	xmm1, xmm1, xmm2
		vpxor	xmm1, xmm1, xmm3
		vpsrldq	xmm4, xmm1, 8
		vpxor	xmm5, xmm2, xmm4
		vpslldq	xmm4, xmm1, 8
		vpxor	xmm6, xmm3, xmm4
		vpclmulqdq xmm2, xmm6, xmmword_1004E3A0, 10h
		vpalignr xmm6, xmm6, xmm6, 8
		vpxor	xmm6, xmm6, xmm2
		vpclmulqdq xmm2, xmm6, xmmword_1004E3A0, 10h
		vpalignr xmm6, xmm6, xmm6, 8
		vpxor	xmm6, xmm6, xmm2
		vpxor	xmm6, xmm6, xmm5
		vmovdqu	xmmword	ptr [edx+110h],	xmm6
		vmovdqa	xmm0, [esp+90h+var_90]
		vmovdqa	xmm1, [esp+90h+var_80]
		vmovdqa	xmm2, [esp+90h+var_70]
		vmovdqa	xmm3, [esp+90h+var_60]
		vmovdqa	xmm4, [esp+90h+var_50]
		vmovdqa	xmm5, [esp+90h+var_40]
		vmovdqa	xmm6, [esp+90h+var_30]
		vmovdqu	xmm7, xmmword ptr [esi+10h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+20h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+30h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+40h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+50h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+60h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+70h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+80h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+90h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0A0h]
		cmp	dword ptr [esi-28h], 0Ah
		jz	loc_1003CA4E
		vmovdqu	xmm7, xmmword ptr [esi+0A0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0B0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0C0h]
		cmp	dword ptr [esi-28h], 0Ch
		jz	short loc_1003CA4E
		vmovdqu	xmm7, xmmword ptr [esi+0C0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0D0h]
		vaesenc	xmm0, xmm0, xmm7
		vaesenc	xmm1, xmm1, xmm7
		vaesenc	xmm2, xmm2, xmm7
		vaesenc	xmm3, xmm3, xmm7
		vaesenc	xmm4, xmm4, xmm7
		vaesenc	xmm5, xmm5, xmm7
		vaesenc	xmm6, xmm6, xmm7
		vmovdqu	xmm7, xmmword ptr [esi+0E0h]

loc_1003CA4E:				; CODE XREF: sub_1003C505+481j
					; sub_1003C505+4E9j
		vaesenclast xmm0, xmm0,	xmm7
		vaesenclast xmm1, xmm1,	xmm7
		vaesenclast xmm2, xmm2,	xmm7
		vaesenclast xmm3, xmm3,	xmm7
		vaesenclast xmm4, xmm4,	xmm7
		vaesenclast xmm5, xmm5,	xmm7
		vaesenclast xmm6, xmm6,	xmm7
		vpxor	xmm0, xmm0, xmmword ptr	[ecx]
		vpxor	xmm1, xmm1, xmmword ptr	[ecx+10h]
		vpxor	xmm2, xmm2, xmmword ptr	[ecx+20h]
		vpxor	xmm3, xmm3, xmmword ptr	[ecx+30h]
		vpxor	xmm4, xmm4, xmmword ptr	[ecx+40h]
		vpxor	xmm5, xmm5, xmmword ptr	[ecx+50h]
		vpxor	xmm6, xmm6, xmmword ptr	[ecx+60h]
		vmovdqu	xmmword	ptr [eax], xmm0
		vmovdqu	xmmword	ptr [eax+10h], xmm1
		vmovdqu	xmmword	ptr [eax+20h], xmm2
		vmovdqu	xmmword	ptr [eax+30h], xmm3
		vmovdqu	xmmword	ptr [eax+40h], xmm4
		vmovdqu	xmmword	ptr [eax+50h], xmm5
		vmovdqu	xmmword	ptr [eax+60h], xmm6
		lea	ecx, [ecx+70h]
		lea	eax, [eax+70h]
		jmp	loc_1003C579
; ---------------------------------------------------------------------------

loc_1003CAC0:				; CODE XREF: sub_1003C505+78j
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_90+0Ch],	edi

loc_1003CACE:				; CODE XREF: sub_1003C505+49j
					; sub_1003C505+70Aj
		cmp	dword ptr [ebp+20h], 10h
		jb	loc_1003CC14
		sub	dword ptr [ebp+20h], 10h
		vmovdqu	xmm2, xmmword ptr [ecx]
		vpshufb	xmm2, xmm2, xmmword_1004E380
		vpxor	xmm2, xmm2, xmmword ptr	[edx+110h]
		vmovdqu	xmm1, xmmword ptr [edx]
		vpclmulqdq xmm6, xmm1, xmm2, 0
		vpclmulqdq xmm5, xmm1, xmm2, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm2
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm6
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm6, xmm6, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm6, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm6, 4Eh
		vpxor	xmm6, xmm3, xmm4
		vpclmulqdq xmm3, xmm6, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm6, 4Eh
		vpxor	xmm6, xmm3, xmm4
		vpxor	xmm2, xmm6, xmm5
		vmovdqu	xmmword	ptr [edx+110h],	xmm2
		vmovdqa	xmm2, [esp+90h+var_90]
		add	ebx, 1
		mov	edi, ebx
		bswap	edi
		xor	edi, [esi+0Ch]
		mov	dword ptr [esp+90h+var_90+0Ch],	edi
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+10h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+20h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+30h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+40h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+50h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+60h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+70h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+80h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+90h]
		vmovdqu	xmm3, xmmword ptr [esi+0A0h]
		cmp	dword ptr [esi-28h], 0Ah
		jz	short loc_1003CBFC
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0A0h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0B0h]
		vmovdqu	xmm3, xmmword ptr [esi+0C0h]
		cmp	dword ptr [esi-28h], 0Ch
		jz	short loc_1003CBFC
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0C0h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0D0h]
		vmovdqu	xmm3, xmmword ptr [esi+0E0h]

loc_1003CBFC:				; CODE XREF: sub_1003C505+6BBj
					; sub_1003C505+6DBj
		vaesenclast xmm2, xmm2,	xmm3
		vpxor	xmm2, xmm2, xmmword ptr	[ecx]
		vmovdqu	xmmword	ptr [eax], xmm2
		lea	eax, [eax+10h]
		lea	ecx, [ecx+10h]
		jmp	loc_1003CACE
; ---------------------------------------------------------------------------

loc_1003CC14:				; CODE XREF: sub_1003C505+5CDj
		cmp	dword ptr [ebp+20h], 0
		jz	loc_1003CD75
		vmovdqa	xmm2, [esp+90h+var_90]
		inc	ebx
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+10h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+20h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+30h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+40h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+50h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+60h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+70h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+80h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+90h]
		vmovdqu	xmm3, xmmword ptr [esi+0A0h]
		cmp	dword ptr [esi-28h], 0Ah
		jz	short loc_1003CCA8
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0A0h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0B0h]
		vmovdqu	xmm3, xmmword ptr [esi+0C0h]
		cmp	dword ptr [esi-28h], 0Ch
		jz	short loc_1003CCA8
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0C0h]
		vaesenc	xmm2, xmm2, xmmword ptr	[esi+0D0h]
		vmovdqu	xmm3, xmmword ptr [esi+0E0h]

loc_1003CCA8:				; CODE XREF: sub_1003C505+767j
					; sub_1003C505+787j
		vaesenclast xmm7, xmm2,	xmm3
		xor	esi, esi
		mov	edi, edx

loc_1003CCB1:				; CODE XREF: sub_1003C505+7B8j
		cmp	[ebp+20h], esi
		jz	short loc_1003CCBF
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+esi+90h+var_90], dl
		inc	esi
		jmp	short loc_1003CCB1
; ---------------------------------------------------------------------------

loc_1003CCBF:				; CODE XREF: sub_1003C505+7AFj
					; sub_1003C505+7C4j
		cmp	esi, 10h
		jz	short loc_1003CCCB
		mov	byte ptr [esp+esi+90h+var_90], 0
		inc	esi
		jmp	short loc_1003CCBF
; ---------------------------------------------------------------------------

loc_1003CCCB:				; CODE XREF: sub_1003C505+7BDj
		mov	edx, edi
		vmovdqa	xmm2, [esp+90h+var_90]
		vpshufb	xmm2, xmm2, xmmword_1004E380
		vpxor	xmm2, xmm2, xmmword ptr	[edx+110h]
		vmovdqu	xmm1, xmmword ptr [edx]
		vpclmulqdq xmm6, xmm1, xmm2, 0
		vpclmulqdq xmm5, xmm1, xmm2, 11h
		vpshufd	xmm3, xmm1, 4Eh
		vpshufd	xmm4, xmm2, 4Eh
		vpxor	xmm3, xmm3, xmm1
		vpxor	xmm4, xmm4, xmm2
		vpclmulqdq xmm3, xmm3, xmm4, 0
		vpxor	xmm3, xmm3, xmm6
		vpxor	xmm3, xmm3, xmm5
		vpslldq	xmm4, xmm3, 8
		vpsrldq	xmm3, xmm3, 8
		vpxor	xmm6, xmm6, xmm4
		vpxor	xmm5, xmm5, xmm3
		vpclmulqdq xmm3, xmm6, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm6, 4Eh
		vpxor	xmm6, xmm3, xmm4
		vpclmulqdq xmm3, xmm6, xmmword_1004E3A0, 10h
		vpshufd	xmm4, xmm6, 4Eh
		vpxor	xmm6, xmm3, xmm4
		vpxor	xmm2, xmm6, xmm5
		vmovdqu	xmmword	ptr [edx+110h],	xmm2
		vpxor	xmm7, xmm7, [esp+90h+var_90]
		vmovdqa	[esp+90h+var_90], xmm7
		xor	esi, esi
		mov	edi, edx

loc_1003CD65:				; CODE XREF: sub_1003C505+86Cj
		cmp	[ebp+20h], esi
		jz	short loc_1003CD73
		mov	dl, byte ptr [esp+esi+90h+var_90]
		mov	[esi+eax], dl
		inc	esi
		jmp	short loc_1003CD65
; ---------------------------------------------------------------------------

loc_1003CD73:				; CODE XREF: sub_1003C505+863j
		mov	edx, edi

loc_1003CD75:				; CODE XREF: sub_1003C505+713j
		bswap	ebx
		mov	[edx+12Ch], ebx
		mov	esp, ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		vzeroupper
		retn
sub_1003C505	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Alloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Free_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_SetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ZFree_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_GetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_SecureMemcmp]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_NewArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_FreeArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_AllocItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CopyItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_FreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOIDTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CompareItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ZfreeItem_Util]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [00000006 BYTES: COLLAPSED FUNCTION memset]
		align 10h
; [0000001F BYTES: COLLAPSED FUNCTION __aullshr]
		align 10h
; [0000002B BYTES: COLLAPSED FUNCTION __alloca_probe]
		align 10h

__ftol2_sse:
		cmp	dword_10050828,	0
		jz	short __ftol2
; [00000013 BYTES: COLLAPSED FUNCTION __ftol2_pentium4]
; ---------------------------------------------------------------------------

__ftol2_sse_excpt:
		cmp	dword_10050828,	0
		jz	short __ftol2
		sub	esp, 4
		fnstcw	word ptr [esp]
		pop	eax
		and	ax, 7Fh
		cmp	ax, 7Fh
		jz	short __ftol2_pentium4
; [00000075 BYTES: COLLAPSED FUNCTION __ftol2]
		align 10h
; [00000034 BYTES: COLLAPSED FUNCTION __allmul]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1003CF90	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_1003D0CB
		mov	eax, dword_10050504
		test	eax, eax
		jle	loc_1003D0C4
		dec	eax
		mov	ebx, offset dword_1005291C
		mov	dword_10050504,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_1003CFCE
; ---------------------------------------------------------------------------

loc_1003CFCA:				; CODE XREF: sub_1003CF90+48j
		cmp	eax, edx
		jz	short loc_1003CFDC

loc_1003CFCE:				; CODE XREF: sub_1003CF90+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_1003CFCA
		jmp	short loc_1003CFE3
; ---------------------------------------------------------------------------

loc_1003CFDC:				; CODE XREF: sub_1003CF90+3Cj
		mov	[ebp+var_4], 1

loc_1003CFE3:				; CODE XREF: sub_1003CF90+4Aj
		cmp	dword_10052920,	2
		jz	short loc_1003CFF9
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_1003D17B
; ---------------------------------------------------------------------------

loc_1003CFF9:				; CODE XREF: sub_1003CF90+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_1003D0AC
		push	dword_10052924	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_1003D026:				; CODE XREF: sub_1003CF90+9Fj
					; sub_1003CF90+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_1003D089
		cmp	[ebx], edi
		jz	short loc_1003D026
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_1003D026
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_10052924	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_1003D07A
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_1003D026

loc_1003D07A:				; CODE XREF: sub_1003CF90+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_1003D026
; ---------------------------------------------------------------------------

loc_1003D089:				; CODE XREF: sub_1003CF90+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1003D096
		push	esi
		call	ds:frex
		pop	ecx

loc_1003D096:				; CODE XREF: sub_1003CF90+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_10052924,	eax
		mov	ebx, offset dword_1005291C
		mov	Ptr, eax

loc_1003D0AC:				; CODE XREF: sub_1003CF90+7Cj
		mov	dword_10052920,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_1003D17B
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_1003D17B
; ---------------------------------------------------------------------------

loc_1003D0C4:				; CODE XREF: sub_1003CF90+19j
					; sub_1003CF90+19Fj
		xor	eax, eax
		jmp	loc_1003D17E
; ---------------------------------------------------------------------------

loc_1003D0CB:				; CODE XREF: sub_1003CF90+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_1003D17B
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_1005291C
		mov	edx, [eax+4]
		jmp	short loc_1003D0ED
; ---------------------------------------------------------------------------

loc_1003D0E9:				; CODE XREF: sub_1003CF90+167j
		cmp	eax, edx
		jz	short loc_1003D0FB

loc_1003D0ED:				; CODE XREF: sub_1003CF90+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_1003D0E9
		jmp	short loc_1003D0FE
; ---------------------------------------------------------------------------

loc_1003D0FB:				; CODE XREF: sub_1003CF90+15Bj
		xor	esi, esi
		inc	esi

loc_1003D0FE:				; CODE XREF: sub_1003CF90+169j
		cmp	dword_10052920,	edi
		push	2
		pop	edi
		jz	short loc_1003D112
		push	1Fh
		call	_amsg_exit
		jmp	short loc_1003D147
; ---------------------------------------------------------------------------

loc_1003D112:				; CODE XREF: sub_1003CF90+177j
		push	offset dword_1003E170
		push	offset dword_1003E160
		mov	dword_10052920,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1003D0C4
		push	offset dword_1003E15C
		push	offset dword_1003E158
		call	_initterm
		pop	ecx
		mov	dword_10052920,	edi

loc_1003D147:				; CODE XREF: sub_1003CF90+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_1003D150
		xor	eax, eax
		xchg	eax, [ebx]

loc_1003D150:				; CODE XREF: sub_1003CF90+1BAj
		cmp	dword_1005292C,	0
		jz	short loc_1003D175
		push	offset dword_1005292C
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_1003D175
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_1005292C

loc_1003D175:				; CODE XREF: sub_1003CF90+1C7j
					; sub_1003CF90+1D6j
		inc	dword_10050504

loc_1003D17B:				; CODE XREF: sub_1003CF90+64j
					; sub_1003CF90+125j ...
		xor	eax, eax
		inc	eax

loc_1003D17E:				; CODE XREF: sub_1003CF90+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_1003CF90	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1003D415	proc near		; DATA XREF: .rdata:1003E168o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		and	dword_10050828,	0
		sub	esp, 1Ch
		push	ebx
		xor	ebx, ebx
		inc	ebx
		or	dword_1004E3C0,	ebx
		push	0Ah		; ProcessorFeature
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	loc_1003D587
		xor	ecx, ecx
		mov	dword_10050828,	ebx
		xor	eax, eax
		cpuid
		push	esi
		mov	esi, dword_1004E3C0
		push	edi
		lea	edi, [ebp+var_1C]
		or	esi, 2
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	eax, [ebp+var_1C]
		mov	ecx, [ebp+var_10]
		mov	[ebp+var_C], eax
		xor	ecx, 49656E69h
		mov	eax, [ebp+var_14]
		xor	eax, 6C65746Eh
		mov	dword_1004E3C0,	esi
		or	ecx, eax
		mov	eax, [ebp+var_18]
		xor	eax, 756E6547h
		or	ecx, eax
		neg	ecx
		push	1
		sbb	cl, cl
		pop	eax
		inc	cl
		push	0
		pop	ecx
		cpuid
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_8], ecx
		jz	short loc_1003D4ED
		mov	eax, [ebp+var_1C]
		and	eax, 0FFF3FF0h
		cmp	eax, 106C0h
		jz	short loc_1003D4DC
		cmp	eax, 20660h
		jz	short loc_1003D4DC
		cmp	eax, 20670h
		jz	short loc_1003D4DC
		cmp	eax, 30650h
		jz	short loc_1003D4DC
		cmp	eax, 30660h
		jz	short loc_1003D4DC
		cmp	eax, 30670h
		jnz	short loc_1003D4ED

loc_1003D4DC:				; CODE XREF: sub_1003D415+A2j
					; sub_1003D415+A9j ...
		mov	edi, dword_1005082C
		or	edi, 1
		mov	dword_1005082C,	edi
		jmp	short loc_1003D4F3
; ---------------------------------------------------------------------------

loc_1003D4ED:				; CODE XREF: sub_1003D415+93j
					; sub_1003D415+C5j
		mov	edi, dword_1005082C

loc_1003D4F3:				; CODE XREF: sub_1003D415+D6j
		cmp	[ebp+var_C], 7
		jl	short loc_1003D52E
		push	7
		xor	ecx, ecx
		lea	esi, [ebp+var_1C]
		pop	eax
		cpuid
		mov	[esi], eax
		mov	eax, esi
		mov	esi, dword_1004E3C0
		mov	[eax+4], ebx
		mov	[eax+8], ecx
		mov	ecx, [ebp+var_8]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_18]
		test	eax, 200h
		jz	short loc_1003D530
		or	edi, 2
		mov	dword_1005082C,	edi
		jmp	short loc_1003D530
; ---------------------------------------------------------------------------

loc_1003D52E:				; CODE XREF: sub_1003D415+E2j
		xor	eax, eax

loc_1003D530:				; CODE XREF: sub_1003D415+10Cj
					; sub_1003D415+117j
		test	ecx, 100000h
		jz	short loc_1003D585
		or	esi, 4
		mov	dword_10050828,	2
		mov	dword_1004E3C0,	esi
		test	ecx, 8000000h
		jz	short loc_1003D585
		test	ecx, 10000000h
		jz	short loc_1003D585
		or	esi, 8
		mov	dword_10050828,	3
		mov	dword_1004E3C0,	esi
		test	al, 20h
		jz	short loc_1003D585
		or	esi, 20h
		mov	dword_10050828,	5
		mov	dword_1004E3C0,	esi

loc_1003D585:				; CODE XREF: sub_1003D415+121j
					; sub_1003D415+13Cj ...
		pop	edi
		pop	esi

loc_1003D587:				; CODE XREF: sub_1003D415+20j
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1003D415	endp

; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1003D5A0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_1003D5DC
		mov	edi, [ebp+arg_4]

loc_1003D5C4:				; CODE XREF: sub_1003D5A0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_1003D5D4
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_1003D5DE

loc_1003D5D4:				; CODE XREF: sub_1003D5A0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_1003D5C4

loc_1003D5DC:				; CODE XREF: sub_1003D5A0+1Fj
		xor	eax, eax

loc_1003D5DE:				; CODE XREF: sub_1003D5A0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1003D5A0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1003D71D(_onexit_t)
sub_1003D71D	proc near		; CODE XREF: sub_1003D7C6+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	14h
		push	offset stru_1004D218
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1003D74F
		push	[ebp+arg_0]	; _onexit_t
		call	ds:_onexit
		pop	ecx
		jmp	short loc_1003D7B4
; ---------------------------------------------------------------------------

loc_1003D74F:				; CODE XREF: sub_1003D71D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_10052924	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+arg_0]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_10052924,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_1003D7BD
; ---------------------------------------------------------------------------

loc_1003D7B2:				; CODE XREF: sub_1003D71D+A8j
		mov	eax, edi

loc_1003D7B4:				; CODE XREF: sub_1003D71D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_1003D7BA:				; DATA XREF: .rdata:stru_1004D218o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 1003D71D

loc_1003D7BD:				; CODE XREF: sub_1003D71D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_1003D71D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1003D7C6(_onexit_t)
sub_1003D7C6	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]	; _onexit_t
		call	sub_1003D71D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_1003D7C6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1003D7DB	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_1003D80B
		test	esi, eax
		jz	short loc_1003D80B
		not	eax
		mov	dword_1004E3B4,	eax
		jmp	short loc_1003D871
; ---------------------------------------------------------------------------

loc_1003D80B:				; CODE XREF: sub_1003D7DB+21j
					; sub_1003D7DB+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_1003D853
		mov	ecx, 0BB40E64Fh
		jmp	short loc_1003D863
; ---------------------------------------------------------------------------

loc_1003D853:				; CODE XREF: sub_1003D7DB+6Fj
		test	esi, ecx
		jnz	short loc_1003D863
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_1003D863:				; CODE XREF: sub_1003D7DB+76j
					; sub_1003D7DB+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_1004E3B4,	ecx

loc_1003D871:				; CODE XREF: sub_1003D7DB+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1003D7DB	endp

; [00000022 BYTES: COLLAPSED FUNCTION DllMain(x,x,x)]

; =============== S U B	R O U T	I N E =======================================


sub_1003D899	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_1004D1C0
		mov	edi, offset dword_1004D1C0
		jmp	short loc_1003D8B2
; ---------------------------------------------------------------------------

loc_1003D8A7:				; CODE XREF: sub_1003D899+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1003D8AF
		call	eax

loc_1003D8AF:				; CODE XREF: sub_1003D899+12j
		add	esi, 4

loc_1003D8B2:				; CODE XREF: sub_1003D899+Cj
		cmp	esi, edi
		jb	short loc_1003D8A7
		pop	edi
		pop	esi
		retn
sub_1003D899	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1003D8B9()
sub_1003D8B9	proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_1004D1C8
		mov	edi, offset dword_1004D1C8
		jmp	short loc_1003D8D2
; ---------------------------------------------------------------------------

loc_1003D8C7:				; CODE XREF: sub_1003D8B9+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1003D8CF
		call	eax

loc_1003D8CF:				; CODE XREF: sub_1003D8B9+12j
		add	esi, 4

loc_1003D8D2:				; CODE XREF: sub_1003D8B9+Cj
		cmp	esi, edi
		jb	short loc_1003D8C7
		pop	edi
		pop	esi
		retn
sub_1003D8B9	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1003D8E6()
sub_1003D8E6	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_10050830
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_1003D8E6	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 80h
		dd 180h	dup(?)
_text		ends

; Section 2. (virtual address 0003E000)
; Virtual size			: 0000FA20 (  64032.)
; Section size in file		: 0000FC00 (  64512.)
; Offset to raw	data for section: 0003CE00
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from ADVAPI32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn SystemFunction036:dword ;	CODE XREF: sub_10001320+8p
					; DATA XREF: sub_10001320+8r ...

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10001020+18p
					; sub_1003D7DB+59p
					; DATA XREF: ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: sub_10001120:loc_100011B1p
					; DATA XREF: sub_10001120:loc_100011B1r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10001120+AAp
					; sub_1003D7DB+4Cp
					; DATA XREF: ...
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10001120+C1p
					; sub_1003D7DB+43p
					; DATA XREF: ...
; DWORD	__stdcall GetLogicalDrives()
		extrn GetLogicalDrives:dword ; CODE XREF: sub_10001120+50p
					; DATA XREF: sub_10001120+50r
; void __stdcall GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer)
		extrn GlobalMemoryStatus:dword ; CODE XREF: sub_10001120+3Bp
					; DATA XREF: sub_10001120+3Br
; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer,	DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR	lpFileSystemNameBuffer,	DWORD nFileSystemNameSize)
		extrn GetVolumeInformationA:dword ; CODE XREF: sub_10001120+10Dp
					; DATA XREF: sub_10001120+10Dr
; BOOL __stdcall GetComputerNameA(LPSTR	lpBuffer, LPDWORD nSize)
		extrn GetComputerNameA:dword ; CODE XREF: sub_10001120+77p
					; DATA XREF: sub_10001120+77r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_10001020+85p
					; DATA XREF: sub_10001020+85r
; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
		extrn GetDiskFreeSpaceA:dword ;	CODE XREF: sub_10001120+192p
					; DATA XREF: sub_10001120+192r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_1003D7DB+34p
					; DATA XREF: sub_1003D7DB+34r
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_1003CF90+6Fp
					; sub_1003CF90+88p ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_1003CF90+A2p ...
; BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule)
		extrn DisableThreadLibraryCalls:dword ;	CODE XREF: DllMain(x,x,x)+15p
					; DATA XREF: DllMain(x,x,x)+15r

;
; Imports from MSVCR120.dll
;
; char *__cdecl	getenv(const char *)
		extrn getenv:dword	; CODE XREF: sub_1000EE40+8Cp
					; DATA XREF: sub_1000EE40+8Cr ...
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_1003D71D+29p
					; DATA XREF: sub_1003D71D+29r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
; int __cdecl toupper(int)
		extrn toupper:dword	; CODE XREF: sub_1002CE10+15p
					; DATA XREF: sub_1002CE10+15r
; int __cdecl isdigit(int)
		extrn isdigit:dword	; CODE XREF: sub_1002CE10+21p
					; DATA XREF: sub_1002CE10+21r
; int __cdecl islower(int)
		extrn islower:dword	; CODE XREF: sub_1002CE10+47p
					; DATA XREF: sub_1002CE10+47r
; int __cdecl isupper(int)
		extrn isupper:dword	; CODE XREF: sub_1002CE10+34p
					; DATA XREF: sub_1002CE10+34r
; void __cdecl __noreturn abort()
		extrn abort:dword	; CODE XREF: sub_10026DF0:loc_10027ECEp
					; sub_10027EE0:loc_10028705p
					; DATA XREF: ...
; int __cdecl rand()
		extrn rand:dword	; CODE XREF: sub_10026A70:loc_10026A95p
					; DATA XREF: sub_10026A70:loc_10026A95r
; int __cdecl strncmp(const char *, const char *, size_t)
		extrn strncmp:dword	; CODE XREF: sub_100219D0+39p
					; DATA XREF: sub_100219D0+39r
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
; void *__cdecl	memset(void *, int, size_t)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; __time64_t __cdecl time64(__time64_t *Time)
		extrn _time64:dword	; CODE XREF: sub_10001020+C2p
					; DATA XREF: sub_10001020+C2r

;
; Imports from mozglue.dll
;
; void __cdecl free(void *)
		extrn free:dword	; CODE XREF: sub_100264B0+346p
					; sub_10027EE0+801p ...
		extrn frex:dword	; CODE XREF: sub_1003CF90+FFp
					; DATA XREF: sub_1003CF90+FFr
; char *__cdecl	strdup(const char *)
		extrn strdup:dword	; CODE XREF: sub_1002E5B0+287p
					; sub_1002E860+2Bp ...
; void *__cdecl	calloc(size_t, size_t)
		extrn calloc:dword	; CODE XREF: sub_10028FD0+32p
					; sub_100290F0+6Ep ...
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; CODE XREF: sub_100264B0+2Fp
					; sub_10027EE0+258p ...

;
; Imports from nss3.dll
;
		extrn __imp_PORT_GetError_Util:dword ; DATA XREF: PORT_GetError_Utilr
					; .rdata:1004D2C8o
		extrn PR_Open:dword	; CODE XREF: sub_10021660+7Ep
					; sub_10021660+19Ap
					; DATA XREF: ...
		extrn PR_GetLibraryFilePathname:dword ;	CODE XREF: sub_10021620+9p
					; sub_10021960+18p
					; DATA XREF: ...
		extrn PR_Close:dword	; CODE XREF: sub_10021660+16Ep
					; sub_10021660+20Bp ...
		extrn PR_NotifyAllCondVar:dword	; CODE XREF: sub_1001E8E0+228p
					; DATA XREF: sub_1001E8E0+228r
		extrn PR_NotifyCondVar:dword ; CODE XREF: sub_1001E8E0+345p
					; DATA XREF: sub_1001E8E0+345r
		extrn PR_WaitCondVar:dword ; CODE XREF:	sub_1001E8E0+C7p
					; DATA XREF: sub_1001E8E0+C7r
		extrn PR_CallOnce:dword	; CODE XREF: sub_1000C240+Ap
					; sub_1001D5C0+Ap
					; DATA XREF: ...
		extrn PR_NewCondVar:dword ; CODE XREF: sub_1001ECB0+21p
					; DATA XREF: sub_1001ECB0+21r
		extrn PR_Seek:dword	; CODE XREF: sub_10021660+F9p
					; DATA XREF: sub_10021660+F9r
		extrn __imp_SECITEM_ZfreeItem_Util:dword
					; DATA XREF: SECITEM_ZfreeItem_Utilr
		extrn __imp_SECITEM_CompareItem_Util:dword
					; DATA XREF: SECITEM_CompareItem_Utilr
		extrn PR_Free:dword	; CODE XREF: sub_10021620+22p
					; sub_10021960+30p
					; DATA XREF: ...
		extrn __imp_SECOID_FindOIDTag_Util:dword
					; DATA XREF: SECOID_FindOIDTag_Utilr
		extrn __imp_PORT_ArenaAlloc_Util:dword ; DATA XREF: PORT_ArenaAlloc_Utilr
		extrn __imp_SECITEM_FreeItem_Util:dword	; DATA XREF: SECITEM_FreeItem_Utilr
		extrn __imp_SECITEM_CopyItem_Util:dword	; DATA XREF: SECITEM_CopyItem_Utilr
		extrn __imp_SECITEM_AllocItem_Util:dword
					; DATA XREF: SECITEM_AllocItem_Utilr
		extrn __imp_PORT_FreeArena_Util:dword ;	DATA XREF: PORT_FreeArena_Utilr
		extrn __imp_PORT_ArenaZAlloc_Util:dword	; DATA XREF: PORT_ArenaZAlloc_Utilr
		extrn PR_DestroyCondVar:dword ;	CODE XREF: sub_1001D600+86p
					; DATA XREF: sub_1001D600+86r
		extrn __imp_PORT_NewArena_Util:dword ; DATA XREF: PORT_NewArena_Utilr
		extrn __imp_NSS_SecureMemcmp:dword ; DATA XREF:	NSS_SecureMemcmpr
		extrn PR_Unlock:dword	; CODE XREF: sub_1000C2B0+43p
					; sub_1000C2B0+6Ep ...
		extrn PR_Lock:dword	; CODE XREF: sub_1000C2B0+Ap
					; sub_1000C3F0+45p ...
		extrn PR_DestroyLock:dword ; CODE XREF:	sub_1000C750+1Fp
					; sub_1000CE20+11Bp ...
		extrn PR_NewLock:dword	; CODE XREF: sub_1000CE20+26p
					; sub_1001ECB0p
					; DATA XREF: ...
		extrn __imp_PORT_ZFree_Util:dword ; DATA XREF: PORT_ZFree_Utilr
		extrn __imp_PORT_ZAlloc_Util:dword ; DATA XREF:	PORT_ZAlloc_Utilr
		extrn __imp_PORT_SetError_Util:dword ; DATA XREF: PORT_SetError_Utilr
		extrn __imp_PORT_Free_Util:dword ; DATA	XREF: PORT_Free_Utilr
		extrn __imp_PORT_Alloc_Util:dword ; DATA XREF: PORT_Alloc_Utilr
		extrn PR_Read:dword	; CODE XREF: sub_10021660+9Cp
					; sub_10021660+1D0p ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1003E158h
dword_1003E158	dd 0			; DATA XREF: sub_1003CF90+1A6o
dword_1003E15C	dd 0			; DATA XREF: sub_1003CF90+1A1o
dword_1003E160	dd 0			; DATA XREF: sub_1003CF90+187o
		dd offset _pre_c_init
		dd offset sub_1003D415
		dd offset ___atonexitinit
dword_1003E170	dd 4 dup(0)		; DATA XREF: sub_1003CF90:loc_1003D112o
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56F29A58h		; TimeDateStamp: Wed Mar 23 13:30:00 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 80h			; SizeOfData
		dd rva asc_1004D128	; AddressOfRawData
		dd 4BF28h		; PointerToRawData
		dd 0			; Characteristics
		dd 56F29A58h		; TimeDateStamp: Wed Mar 23 13:30:00 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_1004D1A8	; AddressOfRawData
		dd 4BFA8h		; PointerToRawData
byte_1003E1B8	db 24h			; DATA XREF: FREEBL_GetVector+8r
aHeaderNss3_19_	db 'Header: NSS 3.19.2.3 Basic ECC  Mar 23 2016 06:29:57 $',0
byte_1003E1F0	db 40h			; DATA XREF: FREEBL_GetVector+1r
aNss3_19_2_3Bas	db '(#)NSS 3.19.2.3 Basic ECC  Mar 23 2016 06:29:57',0
		align 8
dword_1003E228	dd 3110348h		; DATA XREF: FREEBL_GetVector+11o
		dd offset sub_1001D6E0
		dd offset sub_1001E370
		dd offset sub_1001E330
		dd offset sub_1001C400
		dd offset sub_1001C5B0
		dd offset sub_1001C6B0
		dd offset sub_1001C490
		dd offset sub_1001C6A0
		dd offset sub_10016330
		dd offset sub_10016810
		dd offset sub_10016040
		dd offset sub_10016B40
		dd offset sub_10016F00
		dd offset sub_1000A500
		dd offset sub_1000A580
		dd offset sub_1000A550
		dd offset sub_1000A550
		dd offset sub_10008D00
		dd offset sub_10008DC0
		dd offset sub_10008DF0
		dd offset sub_10008D60
		dd offset sub_1000ABD0
		dd offset sub_1000ABE0
		dd offset sub_1000ABF0
		dd offset sub_1000ABF0
		dd offset sub_1000AD20
		dd offset sub_1000ADD0
		dd offset sub_1000AFF0
		dd offset sub_1000AD70
		dd offset sub_1000EB00
		dd offset sub_1000EB80
		dd offset sub_1000EBD0
		dd offset sub_1000EBD0
		dd offset sub_100037F0
		dd offset sub_10003820
		dd offset sub_10003910
		dd offset sub_100036A0
		dd offset sub_10003650
		dd offset sub_10003960
		dd offset sub_100036D0
		dd offset sub_100037E0
		dd offset sub_100037C0
		dd offset sub_10003930
		dd offset sub_100015D0
		dd offset sub_10002D00
		dd offset sub_10002DC0
		dd offset sub_10002C30
		dd offset sub_10002BF0
		dd offset sub_10002E20
		dd offset sub_10002C50
		dd offset sub_10002CF0
		dd offset sub_10002CD0
		dd offset sub_10002DE0
		dd offset sub_100014C0
		dd offset sub_100014F0
		dd offset sub_10001590
		dd offset sub_100013A0
		dd offset sub_10001340
		dd offset sub_100015E0
		dd offset sub_100013D0
		dd offset sub_100015D0
		dd offset sub_100014B0
		dd offset sub_10001490
		dd offset sub_100015A0
		dd offset sub_1000C240
		dd offset sub_1000C2B0
		dd offset sub_1000C220
		dd offset sub_1000C260
		dd offset sub_100192B0
		dd offset sub_10019300
		dd offset sub_10019410
		dd offset sub_1001E350
		dd offset sub_1001DD50
		dd offset sub_1001D5B0
		dd offset sub_10006FC0
		dd offset sub_10004190
		dd offset sub_10004370
		dd offset sub_10006FD0
		dd offset sub_10006CC0
		dd offset sub_10006F30
		dd offset sub_10006E90
		dd offset nullsub_1
		dd offset sub_10006E80
		dd offset sub_10006E60
		dd offset sub_10004330
		dd offset sub_10007290
		dd offset sub_10008470
		dd offset sub_100072B0
		dd offset sub_10008880
		dd offset sub_100084A0
		dd offset sub_100087B0
		dd offset sub_10008710
		dd offset nullsub_1
		dd offset sub_10007150
		dd offset sub_10007130
		dd offset sub_10008840
		dd offset sub_10007290
		dd offset sub_10008470
		dd offset sub_100070A0
		dd offset sub_100072A0
		dd offset sub_100070F0
		dd offset sub_10007200
		dd offset sub_10007160
		dd offset nullsub_1
		dd offset sub_10007150
		dd offset sub_10007130
		dd offset sub_10008840
		dd offset sub_100100C0
		dd offset sub_10010390
		dd offset sub_100103C0
		dd offset sub_10010130
		dd offset sub_10021620
		dd offset sub_10021960
		dd offset sub_10017D90
		dd offset sub_10017DF0
		dd offset sub_10017E00
		dd offset sub_10017130
		dd offset sub_10017320
		dd offset sub_100178C0
		dd offset sub_10017380
		dd offset sub_1000EC70
		dd offset sub_100105A0
		dd offset sub_1000B050
		dd offset sub_10008E50
		dd offset sub_1000A5A0
		dd offset sub_1000EAF0
		dd offset sub_100100B0
		dd offset sub_1000AC10
		dd offset sub_10008CF0
		dd offset sub_1000A4F0
		dd offset sub_10002C10
		dd offset sub_10003680
		dd offset sub_10001380
		dd offset sub_100043A0
		dd offset sub_100070D0
		dd offset sub_100070D0
		dd offset sub_10021AE0
		dd offset sub_10008CC0
		dd offset sub_10008A00
		dd offset sub_10008B20
		dd offset sub_10008950
		dd offset sub_10008C80
		dd offset sub_10008980
		dd offset sub_10008A90
		dd offset sub_10008A50
		dd offset sub_10001120
		dd offset sub_1000ABF0
		dd offset sub_1001CBF0
		dd offset sub_100108E0
		dd offset sub_10010710
		dd offset sub_10010720
		dd offset sub_100108B0
		dd offset sub_10010830
		dd offset sub_10010830
		dd offset sub_10019190
		dd offset sub_100191E0
		dd offset sub_10021F40
		dd offset sub_10021DB0
		dd offset sub_10021DC0
		dd offset sub_10021E90
		dd offset sub_10021EC0
		dd offset sub_10021E10
		dd offset sub_1001D5C0
		dd offset sub_1001D5F0
		dd offset sub_1000BE00
		dd offset sub_1000BEC0
		dd offset sub_1000BDA0
		dd offset sub_1000C1E0
		dd offset sub_1001D9A0
		dd offset sub_1001C4D0
		dd offset sub_100253A0
		dd offset sub_10025A30
		dd offset sub_10024F50
		dd offset sub_10024B20
		dd offset sub_10021BD0
		dd offset sub_10006FC0
		dd offset sub_10004190
		dd offset sub_10004160
		dd offset sub_10004360
		dd offset sub_100041C0
		dd offset sub_100042A0
		dd offset sub_10004200
		dd offset nullsub_1
		dd offset sub_10006E80
		dd offset sub_10006E60
		dd offset sub_10004330
		dd offset sub_100043A0
		dd offset sub_10021660
		dd offset sub_10019350
		dd offset sub_1000BF20
		dd offset sub_1000E480
		dd offset sub_1000EAA0
		dd offset sub_10020B40
		dd offset sub_10020420
		dd offset sub_100205B0
		dd offset sub_10020980
		dd offset sub_100207A0
		dd offset sub_10020880
		dd offset sub_100206B0
		dd offset sub_100207F0
		dd offset sub_10020600
		dd offset sub_10020A80
		dd offset sub_10020350
		dd offset sub_10020A00
		dd offset sub_10020250
		dd offset sub_100204F0
		dd offset sub_10018A00
		dd offset sub_10018980
		dd offset sub_10018880
dword_1003E570	dd 80h,	0Fh dup(0)	; DATA XREF: sub_100013D0+19o
byte_1003E5B0	db 29h			; DATA XREF: sub_10002ED0+1Ar
					; sub_10002ED0+43r ...
		db 2Eh,	43h, 0C9h
		dd 17CD8A2h, 0A154363Dh, 1306F0ECh, 0F305A762h,	8C73C7C0h
		dd 0D92B9398h, 0CA824CBCh, 3C579B1Eh, 16E0D4FDh, 186F4267h
		dd 12E5178Ah, 0D6C44EBEh, 49DE9EDAh, 8EF5FBA0h,	7AEE2FBBh
		dd 917968A9h, 3F07B215h, 8910C294h, 215F220Bh, 9A5D7F80h
		dd 2732905Ah, 0E7CC3E35h, 397F7BFh, 0B33019FFh,	0D1B5A548h
		dd 2A925ED7h, 0C6AA56ACh, 0D238B84Fh, 0B67DA496h, 0E26BFC76h
		dd 0F104749Ch, 59709D45h, 20877164h, 65CF5B86h,	2A82DE6h
		dd 0AD25601Bh, 0F6B9B0AEh, 6961461Ch, 0F7E4034h, 23A34755h
		dd 3AAF51DDh, 0CEF95CC3h, 26EAC5BAh, 6E0D532Ch,	9842885h
		dd 0F4CDDFD3h, 524D8141h, 0C837DC6Ah, 0FAABC16Ch, 87BE124h
		dd 4AB1BD0Ch, 8B958878h, 6DE863E3h, 0FED5CBE9h,	391D003Bh
		dd 0EB7EFF2h, 0E4D05866h, 0F87277A6h, 0A4B75EBh, 0B4504431h
		dd 1A1FED8Fh, 338D99DBh, 1483119Fh
dword_1003E6B0	dd 80h,	1Dh dup(0)	; DATA XREF: sub_100036D0+47o
					; sub_10003820+8Fo
dword_1003E728	dd 80h,	3Bh dup(0)	; DATA XREF: sub_10006CC0+32o
					; sub_100084A0+2Eo
		dd 428A2F98h, 71374491h, 0B5C0FBCFh, 0E9B5DBA5h, 3956C25Bh
		dd 59F111F1h, 923F82A4h, 0AB1C5ED5h, 0D807AA98h, 12835B01h
		dd 243185BEh, 550C7DC3h, 72BE5D74h, 80DEB1FEh, 9BDC06A7h
		dd 0C19BF174h, 0E49B69C1h, 0EFBE4786h, 0FC19DC6h, 240CA1CCh
		dd 2DE92C6Fh, 4A7484AAh, 5CB0A9DCh, 76F988DAh, 983E5152h
		dd 0A831C66Dh, 0B00327C8h, 0BF597FC7h, 0C6E00BF3h, 0D5A79147h
		dd 6CA6351h, 14292967h,	27B70A85h, 2E1B2138h, 4D2C6DFCh
		dd 53380D13h, 650A7354h, 766A0ABBh, 81C2C92Eh, 92722C85h
		dd 0A2BFE8A1h, 0A81A664Bh, 0C24B8B70h, 0C76C51A3h, 0D192E819h
		dd 0D6990624h, 0F40E3585h, 106AA070h, 19A4C116h, 1E376C08h
		dd 2748774Ch, 34B0BCB5h, 391C0CB3h, 4ED8AA4Ah, 5B9CCA4Fh
		dd 682E6FF3h, 748F82EEh, 78A5636Fh, 84C87814h, 8CC70208h
		dd 90BEFFFAh, 0A4506CEBh, 0BEF9A3F7h, 0C67178F2h
dword_1003E918	dd 6A09E667h, 0BB67AE85h, 3C6EF372h, 0A54FF53Ah, 510E527Fh
					; DATA XREF: sub_10004370+21o
					; sub_10006E90+54o ...
		dd 9B05688Ch, 1F83D9ABh, 5BE0CD19h
dword_1003E938	dd 0C1059ED8h, 367CD507h, 3070DD17h, 0F70E5939h, 0FFC00B31h
					; DATA XREF: sub_10004160+21o
					; sub_10004200+54o ...
		dd 68581511h, 64F98FA7h, 0BEFA4FA4h
dword_1003E958	dd 0D728AE22h		; DATA XREF: sub_100072E0+239o
dword_1003E95C	dd 428A2F98h		; DATA XREF: sub_100072E0+213o
					; sub_100072E0+24Ao
dword_1003E960	dd 23EF65CDh		; DATA XREF: sub_100072E0+25Bo
dword_1003E964	dd 71374491h		; DATA XREF: sub_100072E0+26Fo
dword_1003E968	dd 0EC4D3B2Fh		; DATA XREF: sub_100072E0+280o
dword_1003E96C	dd 0B5C0FBCFh		; DATA XREF: sub_100072E0+292o
dword_1003E970	dd 8189DBBCh		; DATA XREF: sub_100072E0+2A3o
dword_1003E974	dd 0E9B5DBA5h		; DATA XREF: sub_100072E0+2BBo
dword_1003E978	dd 0F348B538h		; DATA XREF: sub_100072E0+2D0o
dword_1003E97C	dd 3956C25Bh		; DATA XREF: sub_100072E0+2E5o
dword_1003E980	dd 0B605D019h		; DATA XREF: sub_100072E0+2FAo
dword_1003E984	dd 59F111F1h		; DATA XREF: sub_100072E0+30Fo
dword_1003E988	dd 0AF194F9Bh		; DATA XREF: sub_100072E0+327o
dword_1003E98C	dd 923F82A4h, 0DA6D8118h, 0AB1C5ED5h, 0A3030242h, 0D807AA98h
					; DATA XREF: sub_100072E0+33Fo
		dd 45706FBEh, 12835B01h, 4EE4B28Ch, 243185BEh, 0D5FFB4E2h
		dd 550C7DC3h, 0F27B896Fh, 72BE5D74h, 3B1696B1h,	80DEB1FEh
		dd 25C71235h, 9BDC06A7h, 0CF692694h, 0C19BF174h, 9EF14AD2h
		dd 0E49B69C1h, 384F25E3h, 0EFBE4786h, 8B8CD5B5h, 0FC19DC6h
		dd 77AC9C65h, 240CA1CCh, 592B0275h, 2DE92C6Fh, 6EA6E483h
		dd 4A7484AAh, 0BD41FBD4h, 5CB0A9DCh, 831153B5h,	76F988DAh
		dd 0EE66DFABh, 983E5152h, 2DB43210h, 0A831C66Dh, 98FB213Fh
		dd 0B00327C8h, 0BEEF0EE4h, 0BF597FC7h, 3DA88FC2h, 0C6E00BF3h
		dd 930AA725h, 0D5A79147h, 0E003826Fh, 6CA6351h,	0A0E6E70h
		dd 14292967h, 46D22FFCh, 27B70A85h, 5C26C926h, 2E1B2138h
		dd 5AC42AEDh, 4D2C6DFCh, 9D95B3DFh, 53380D13h, 8BAF63DEh
		dd 650A7354h, 3C77B2A8h, 766A0ABBh, 47EDAEE6h, 81C2C92Eh
		dd 1482353Bh, 92722C85h, 4CF10364h, 0A2BFE8A1h,	0BC423001h
		dd 0A81A664Bh, 0D0F89791h, 0C24B8B70h, 654BE30h, 0C76C51A3h
		dd 0D6EF5218h, 0D192E819h, 5565A910h, 0D6990624h, 5771202Ah
		dd 0F40E3585h, 32BBD1B8h, 106AA070h, 0B8D2D0C8h, 19A4C116h
		dd 5141AB53h, 1E376C08h, 0DF8EEB99h, 2748774Ch,	0E19B48A8h
		dd 34B0BCB5h, 0C5C95A63h, 391C0CB3h, 0E3418ACBh, 4ED8AA4Ah
		dd 7763E373h, 5B9CCA4Fh, 0D6B2B8A3h, 682E6FF3h,	5DEFB2FCh
		dd 748F82EEh, 43172F60h, 78A5636Fh, 0A1F0AB72h,	84C87814h
		dd 1A6439ECh, 8CC70208h, 23631E28h, 90BEFFFAh, 0DE82BDE9h
		dd 0A4506CEBh, 0B2C67915h, 0BEF9A3F7h, 0E372532Bh, 0C67178F2h
		dd 0EA26619Ch, 0CA273ECEh, 21C0C207h, 0D186B8C7h, 0CDE0EB1Eh
		dd 0EADA7DD6h, 0EE6ED178h, 0F57D4F7Fh, 72176FBAh, 6F067AAh
		dd 0A2C898A6h, 0A637DC5h, 0BEF90DAEh, 113F9804h, 131C471Bh
		dd 1B710B35h, 23047D84h, 28DB77F5h, 40C72493h, 32CAAB7Bh
		dd 15C9BEBCh, 3C9EBE0Ah, 9C100D4Ch, 431D67C4h, 0CB3E42B6h
		dd 4CC5D4BEh, 0FC657E2Ah, 597F299Ch, 3AD6FAECh,	5FCB6FABh
		dd 4A475817h, 6C44198Ch
dword_1003EBD8	dd 0F3BCC908h		; DATA XREF: sub_100072B0+21o
					; sub_10008710+54o ...
dword_1003EBDC	dd 6A09E667h, 84CAA73Bh, 0BB67AE85h, 0FE94F82Bh, 3C6EF372h
					; DATA XREF: sub_100072E0+108Eo
		dd 5F1D36F1h, 0A54FF53Ah, 0ADE682D1h, 510E527Fh, 2B3E6C1Fh
		dd 9B05688Ch, 0FB41BD6Bh, 1F83D9ABh, 137E2179h,	5BE0CD19h
dword_1003EC18	dd 0C1059ED8h, 0CBBB9D5Dh, 367CD507h, 629A292Ah, 3070DD17h
					; DATA XREF: sub_100070A0+21o
					; sub_10007160+54o ...
		dd 9159015Ah, 0F70E5939h, 152FECD8h, 0FFC00B31h, 67332667h
		dd 68581511h, 8EB44A87h, 64F98FA7h, 0DB0C2E0Dh,	0BEFA4FA4h
		dd 47B5481Dh
dword_1003EC58	dd 0			; DATA XREF: sub_10008CC0+Co
		dd offset sub_10008CA0
		dd offset sub_10008CA0
		dd offset nullsub_1
		dd offset nullsub_1
		dd offset nullsub_1
		dd offset sub_10008CB0
		dd 2 dup(0)
		dd offset sub_10008CB0
		dd 10h
		dd offset sub_10002DC0
		dd offset sub_10008CA0
		dd offset sub_10002C30
		dd offset sub_10002BF0
		dd offset sub_10002E20
		dd offset sub_10002C50
		dd 40h,	1, 0
		dd 10h
		dd offset sub_10003910
		dd offset sub_10008CA0
		dd offset sub_100036A0
		dd offset sub_10003650
		dd offset sub_10003960
		dd offset sub_100036D0
		dd 40h,	2
		dd offset sub_10003770
		dd 14h
		dd offset sub_10001590
		dd offset sub_10008CA0
		dd offset sub_100013A0
		dd offset sub_10001340
		dd offset sub_100015E0
		dd offset sub_100013D0
		dd 40h,	3
		dd offset sub_10001450
		dd 20h
		dd offset sub_10006FC0
		dd offset sub_10008CA0
		dd offset sub_10004190
		dd offset sub_10004370
		dd offset sub_10006FD0
		dd offset sub_10006CC0
		dd 40h,	4
		dd offset sub_10006DC0
		dd 30h
		dd offset sub_10007290
		dd offset sub_10008CA0
		dd offset sub_10008470
		dd offset sub_100070A0
		dd offset sub_100072A0
		dd offset sub_100070F0
		dd 80h,	5
		dd offset sub_10007110
		dd 40h
		dd offset sub_10007290
		dd offset sub_10008CA0
		dd offset sub_10008470
		dd offset sub_100072B0
		dd offset sub_10008880
		dd offset sub_100084A0
		dd 80h,	6
		dd offset sub_10008620
		dd 1Ch
		dd offset sub_10006FC0
		dd offset sub_10008CA0
		dd offset sub_10004190
		dd offset sub_10004160
		dd offset sub_10004360
		dd offset sub_100041C0
		dd 40h,	7
		dd offset sub_100041E0
byte_1003ED98	db 0D9h			; DATA XREF: sub_10008E50+DDr
					; sub_10008E50+F7r ...
		db 78h,	0F9h, 0C4h
		dd 0EDB5DD19h, 79FDE928h, 9DD8A04Ah, 83377EC6h,	8E53762Bh
		dd 88644C62h, 0A2FB8B44h, 0F5599A17h, 134FB387h, 8D6D4561h
		dd 327D8109h, 0EB408FBDh, 0B7BB786h, 222195F0h,	824E6B5Ch
		dd 9365D654h, 1CB260CEh, 14C05673h, 0DCF18CA7h,	1FCA7512h
		dd 0D1E4BE3Bh, 30D43D42h, 26B63CA3h, 0DA0EBF6Fh, 57076946h
		dd 9B1DF227h, 34394BCh,	0F6C711F8h, 0E73EEF90h,	2FD5C306h
		dd 0D71E66C8h, 0DEEAE808h, 0F7EE5280h, 0AC72AA84h, 2A6A4D35h
		dd 71D21A96h, 7449155Ah, 5ED09F4Bh, 0ECA41804h,	6E41E0C2h
		dd 0CCCB510Fh, 50AF9124h, 3970F4A1h, 853A7C99h,	7AB4B823h
		dd 5B3602FCh, 31975525h, 98FA5D2Dh, 0AE928AE3h,	1029DF05h
		dd 0C9BA6C67h, 0CFE600D3h, 2CA89EE1h, 3F011663h, 0A989E258h
		dd 1B34380Dh, 0B0FF33ABh, 5F0C48BBh, 2ECDB1B9h,	47DBF3C5h
		dd 779CA5E5h, 6820A60Ah, 0ADC17FFEh
dword_1003EE98	dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
					; DATA XREF: sub_1000A5A0+5Co
		dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
		dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
		dd 3F3E3D3Ch, 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch
		dd 53525150h, 57565554h, 5B5A5958h, 5F5E5D5Ch, 63626160h
		dd 67666564h, 6B6A6968h, 6F6E6D6Ch, 73727170h, 77767574h
		dd 7B7A7978h, 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h
		dd 8F8E8D8Ch, 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch
		dd 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h
		dd 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h
		dd 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h
		dd 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh
		dd 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh
dword_1003EF98	dd 4041000h		; DATA XREF: sub_1000B200+DBr
					; sub_1000B200+166r ...
		dd 0
		dd 40000h, 4041010h, 4040010h, 41010h, 10h, 40000h, 1000h
		dd 4041000h, 4041010h, 1000h, 4001010h,	4040010h, 4000000h
		dd 10h,	1010h, 2 dup(4001000h),	2 dup(41000h), 2 dup(4040000h)
		dd 4001010h, 40010h, 2 dup(4000010h), 40010h, 0
		dd 1010h, 41010h, 4000000h, 40000h, 4041010h, 10h, 4040000h
		dd 4041000h, 2 dup(4000000h), 1000h, 4040010h, 40000h
		dd 41000h, 4000010h, 1000h, 10h, 4001010h, 41010h, 4041010h
		dd 40010h, 4040000h, 4001010h, 4000010h, 1010h,	41010h
		dd 4041000h, 1010h, 2 dup(4001000h), 0
		dd 40010h, 41000h, 0
		dd 4040010h
dword_1003F098	dd 420082h		; DATA XREF: sub_1000B200+94r
					; sub_1000B200+11Fr ...
		dd 20002h, 20000h, 420080h, 400000h, 80h, 400082h, 20082h
		dd 82h,	420082h, 420002h, 2, 20002h, 400000h, 80h, 400082h
		dd 420000h, 400080h, 20082h, 0
		dd 2, 20000h, 420080h, 400002h,	400080h, 82h, 0
		dd 420000h, 20080h, 420002h, 400002h, 20080h, 0
		dd 420080h, 400082h, 400000h, 20082h, 400002h, 420002h
		dd 20000h, 400002h, 20002h, 80h, 420082h, 420080h, 80h
		dd 20000h, 2, 20080h, 420002h, 400000h,	82h, 400080h, 20082h
		dd 82h,	400080h, 420000h, 0
		dd 20002h, 20080h, 2, 400082h, 420082h,	420000h
dword_1003F198	dd 820h			; DATA XREF: sub_1000B200+E1r
					; sub_1000B200+16Cr ...
		dd 20080800h, 0
		dd 20080020h, 20000800h, 0
		dd 80820h, 20000800h, 80020h, 2	dup(20000020h),	80000h
		dd 20080820h, 80020h, 20080000h, 820h, 20000000h, 20h
		dd 20080800h, 800h, 80800h, 20080000h, 20080020h, 80820h
		dd 20000820h, 80800h, 80000h, 20000820h, 20h, 20080820h
		dd 800h, 20000000h, 20080800h, 20000000h, 80020h, 820h
		dd 80000h, 20080800h, 20000800h, 0
		dd 800h, 80020h, 20080820h, 20000800h, 20000020h, 800h
		dd 0
		dd 20080020h, 20000820h, 80000h, 20000000h, 20080820h
		dd 20h,	80820h,	80800h,	20000020h, 20080000h, 20000820h
		dd 820h, 20080000h, 80820h, 20h, 20080020h, 80800h
dword_1003F298	dd 2008004h		; DATA XREF: sub_1000B200+9Ar
					; sub_1000B200+125r ...
		dd 2 dup(8204h), 200h, 2008200h, 2000204h, 2000004h, 8004h
		dd 0
		dd 2 dup(2008000h), 2008204h, 204h, 0
		dd 2000200h, 2000004h, 4, 8000h, 2000000h, 2008004h, 200h
		dd 2000000h, 8004h, 8200h, 2000204h, 4,	8200h, 2000200h
		dd 8000h, 2008200h, 2008204h, 204h, 2000200h, 2000004h
		dd 2008000h, 2008204h, 204h, 2 dup(0)
		dd 2008000h, 8200h, 2000200h, 2000204h,	4, 2008004h, 2 dup(8204h)
		dd 200h, 2008204h, 204h, 4, 8000h, 2000004h, 8004h, 2008200h
		dd 2000204h, 8004h, 8200h, 2000000h, 2008004h, 200h, 2000000h
		dd 8000h, 2008200h
dword_1003F398	dd 400h			; DATA XREF: sub_1000B200+F7r
					; sub_1000B200+182r ...
		dd 8200400h, 8200000h, 8000401h, 200000h, 400h,	1, 8200000h
		dd 200401h, 200000h, 8000400h, 200401h,	8000401h, 8200001h
		dd 200400h, 1, 8000000h, 2 dup(200001h), 0
		dd 401h, 2 dup(8200401h), 8000400h, 8200001h, 401h, 0
		dd 8000001h, 8200400h, 8000000h, 8000001h, 200400h, 200000h
		dd 8000401h, 400h, 8000000h, 1,	8200000h, 8000401h, 200401h
		dd 8000400h, 1,	8200001h, 8200400h, 200401h, 400h, 8000000h
		dd 8200001h, 8200401h, 200400h,	8000001h, 8200401h, 8200000h
		dd 0
		dd 200001h, 8000001h, 200400h, 8000400h, 401h, 200000h
		dd 0
		dd 200001h, 8200400h, 401h
dword_1003F498	dd 80000040h		; DATA XREF: sub_1000B200+B0r
					; sub_1000B200+13Br ...
		dd 81000000h, 10000h, 81010040h, 81000000h, 40h, 81010040h
		dd 1000000h, 80010000h,	1010040h, 1000000h, 80000040h
		dd 1000040h, 80010000h,	80000000h, 10040h, 0
		dd 1000040h, 80010040h,	10000h,	1010000h, 80010040h, 40h
		dd 2 dup(81000040h), 0
		dd 1010040h, 81010000h,	10040h,	1010000h, 81010000h, 80000000h
		dd 80010000h, 40h, 81000040h, 1010000h,	81010040h, 1000000h
		dd 10040h, 80000040h, 1000000h,	80010000h, 80000000h, 10040h
		dd 80000040h, 81010040h, 1010000h, 81000000h, 1010040h
		dd 81010000h, 0
		dd 81000040h, 40h, 10000h, 81000000h, 1010040h,	10000h
		dd 1000040h, 80010040h,	0
		dd 81010000h, 80000000h, 1000040h, 80010040h
dword_1003F598	dd 800000h		; DATA XREF: sub_1000B200+FDr
					; sub_1000B200+188r ...
		dd 10800008h, 10002008h, 0
		dd 2000h, 10002008h, 802008h, 10802000h, 10802008h, 800000h
		dd 0
		dd 10000008h, 8, 10000000h, 10800008h, 2008h, 10002000h
		dd 802008h, 800008h, 10002000h,	10000008h, 10800000h, 10802000h
		dd 800008h, 10800000h, 2000h, 2008h, 10802008h,	802000h
		dd 8, 10000000h, 802000h, 10000000h, 802000h, 800000h
		dd 2 dup(10002008h), 2 dup(10800008h), 8, 800008h, 10000000h
		dd 10002000h, 800000h, 10802000h, 2008h, 802008h, 10802000h
		dd 2008h, 10000008h, 10802008h,	10800000h, 802000h, 0
		dd 8, 10802008h, 0
		dd 802008h, 10800000h, 2000h, 10000008h, 10002000h, 2000h
		dd 800008h
dword_1003F698	dd 40004100h		; DATA XREF: sub_1000B200+B6r
					; sub_1000B200+141r ...
		dd 4000h, 100000h, 40104100h, 40000000h, 40004100h, 100h
		dd 40000000h, 100100h, 40100000h, 40104100h, 104000h, 40104000h
		dd 104100h, 4000h, 100h, 40100000h, 40000100h, 40004000h
		dd 4100h, 104000h, 100100h, 40100100h, 40104000h, 4100h
		dd 2 dup(0)
		dd 40100100h, 40000100h, 40004000h, 104100h, 100000h, 104100h
		dd 100000h, 40104000h, 4000h, 100h, 40100100h, 4000h, 104100h
		dd 40004000h, 100h, 40000100h, 40100000h, 40100100h, 40000000h
		dd 100000h, 40004100h, 0
		dd 40104100h, 100100h, 40000100h, 40100000h, 40004000h
		dd 40004100h, 0
		dd 40104100h, 2	dup(104000h), 2	dup(4100h), 100100h, 40000000h
		dd 40104000h
dword_1003F798	dd 0			; DATA XREF: sub_1000BBB0+151r
		dd 1000h, 4000000h, 4001000h, 100000h, 101000h,	4100000h
		dd 4101000h, 8000h, 9000h, 4008000h, 4009000h, 108000h
		dd 109000h, 4108000h, 4109000h,	4, 1004h, 4000004h, 4001004h
		dd 100004h, 101004h, 4100004h, 4101004h, 8004h,	9004h
		dd 4008004h, 4009004h, 108004h,	109004h, 4108004h, 4109004h
		dd 8000000h, 8001000h, 0C000000h, 0C001000h, 8100000h
		dd 8101000h, 0C100000h,	0C101000h, 8008000h, 8009000h
		dd 0C008000h, 0C009000h, 8108000h, 8109000h, 0C108000h
		dd 0C109000h, 8000004h,	8001004h, 0C000004h, 0C001004h
		dd 8100004h, 8101004h, 0C100004h, 0C101004h, 8008004h
		dd 8009004h, 0C008004h,	0C009004h, 8108004h, 8109004h
		dd 0C108004h, 0C109004h
dword_1003F898	dd 0			; DATA XREF: sub_1000BBB0+164r
		dd 2000h, 80000000h, 80002000h,	8, 2008h, 80000008h, 80002008h
		dd 200000h, 202000h, 80200000h,	80202000h, 200008h, 202008h
		dd 80200008h, 80202008h, 20000000h, 20002000h, 0A0000000h
		dd 0A0002000h, 20000008h, 20002008h, 0A0000008h, 0A0002008h
		dd 20200000h, 20202000h, 0A0200000h, 0A0202000h, 20200008h
		dd 20202008h, 0A0200008h, 0A0202008h, 400h, 2400h, 80000400h
		dd 80002400h, 408h, 2408h, 80000408h, 80002408h, 200400h
		dd 202400h, 80200400h, 80202400h, 200408h, 202408h, 80200408h
		dd 80202408h, 20000400h, 20002400h, 0A0000400h,	0A0002400h
		dd 20000408h, 20002408h, 0A0000408h, 0A0002408h, 20200400h
		dd 20202400h, 0A0200400h, 0A0202400h, 20200408h, 20202408h
		dd 0A0200408h, 0A0202408h
dword_1003F998	dd 0			; DATA XREF: sub_1000BBB0+140r
		dd 4000h, 20h, 4020h, 80000h, 84000h, 80020h, 84020h, 800h
		dd 4800h, 820h,	4820h, 80800h, 84800h, 80820h, 84820h
		dd 10h,	4010h, 30h, 4030h, 80010h, 84010h, 80030h, 84030h
		dd 810h, 4810h,	830h, 4830h, 80810h, 84810h, 80830h, 84830h
		dd 400000h, 404000h, 400020h, 404020h, 480000h,	484000h
		dd 480020h, 484020h, 400800h, 404800h, 400820h,	404820h
		dd 480800h, 484800h, 480820h, 484820h, 400010h,	404010h
		dd 400030h, 404030h, 480010h, 484010h, 480030h,	484030h
		dd 400810h, 404810h, 400830h, 404830h, 480810h,	484810h
		dd 480830h, 484830h
dword_1003FA98	dd 0			; DATA XREF: sub_1000BBB0+12Dr
		dd 40000000h, 80h, 40000080h, 40000h, 40040000h, 40080h
		dd 40040080h, 40h, 40000040h, 0C0h, 400000C0h, 40040h
		dd 40040040h, 400C0h, 400400C0h, 10000000h, 50000000h
		dd 10000080h, 50000080h, 10040000h, 50040000h, 10040080h
		dd 50040080h, 10000040h, 50000040h, 100000C0h, 500000C0h
		dd 10040040h, 50040040h, 100400C0h, 500400C0h, 800000h
		dd 40800000h, 800080h, 40800080h, 840000h, 40840000h, 840080h
		dd 40840080h, 800040h, 40800040h, 8000C0h, 408000C0h, 840040h
		dd 40840040h, 8400C0h, 408400C0h, 10800000h, 50800000h
		dd 10800080h, 50800080h, 10840000h, 50840000h, 10840080h
		dd 50840080h, 10800040h, 50800040h, 108000C0h, 508000C0h
		dd 10840040h, 50840040h, 108400C0h, 508400C0h
dword_1003FB98	dd 0			; DATA XREF: sub_1000BBB0+196r
		dd 8, 8000000h,	8000008h, 40000h, 40008h, 8040000h, 8040008h
		dd 2000h, 2008h, 8002000h, 8002008h, 42000h, 42008h, 8042000h
		dd 8042008h, 80000000h,	80000008h, 88000000h, 88000008h
		dd 80040000h, 80040008h, 88040000h, 88040008h, 80002000h
		dd 80002008h, 88002000h, 88002008h, 80042000h, 80042008h
		dd 88042000h, 88042008h, 80000h, 80008h, 8080000h, 8080008h
		dd 0C0000h, 0C0008h, 80C0000h, 80C0008h, 82000h, 82008h
		dd 8082000h, 8082008h, 0C2000h,	0C2008h, 80C2000h, 80C2008h
		dd 80080000h, 80080008h, 88080000h, 88080008h, 800C0000h
		dd 800C0008h, 880C0000h, 880C0008h, 80082000h, 80082008h
		dd 88082000h, 88082008h, 800C2000h, 800C2008h, 880C2000h
		dd 880C2008h
dword_1003FC98	dd 0			; DATA XREF: sub_1000BBB0+189r
		dd 400000h, 8000h, 408000h, 40000000h, 40400000h, 40008000h
		dd 40408000h, 20h, 400020h, 8020h, 408020h, 40000020h
		dd 40400020h, 40008020h, 40408020h, 1000h, 401000h, 9000h
		dd 409000h, 40001000h, 40401000h, 40009000h, 40409000h
		dd 1020h, 401020h, 9020h, 409020h, 40001020h, 40401020h
		dd 40009020h, 40409020h, 100000h, 500000h, 108000h, 508000h
		dd 40100000h, 40500000h, 40108000h, 40508000h, 100020h
		dd 500020h, 108020h, 508020h, 40100020h, 40500020h, 40108020h
		dd 40508020h, 101000h, 501000h,	109000h, 509000h, 40101000h
		dd 40501000h, 40109000h, 40509000h, 101020h, 501020h, 109020h
		dd 509020h, 40101020h, 40501020h, 40109020h, 40509020h
dword_1003FD98	dd 0			; DATA XREF: sub_1000BBB0+1A7r
		dd 40h,	4000000h, 4000040h, 800h, 840h,	4000800h, 4000840h
		dd 800000h, 800040h, 4800000h, 4800040h, 800800h, 800840h
		dd 4800800h, 4800840h, 10000000h, 10000040h, 14000000h
		dd 14000040h, 10000800h, 10000840h, 14000800h, 14000840h
		dd 10800000h, 10800040h, 14800000h, 14800040h, 10800800h
		dd 10800840h, 14800800h, 14800840h, 80h, 0C0h, 4000080h
		dd 40000C0h, 880h, 8C0h, 4000880h, 40008C0h, 800080h, 8000C0h
		dd 4800080h, 48000C0h, 800880h,	8008C0h, 4800880h, 48008C0h
		dd 10000080h, 100000C0h, 14000080h, 140000C0h, 10000880h
		dd 100008C0h, 14000880h, 140008C0h, 10800080h, 108000C0h
		dd 14800080h, 148000C0h, 10800880h, 108008C0h, 14800880h
		dd 148008C0h
dword_1003FE98	dd 0			; DATA XREF: sub_1000BBB0+18Fr
		dd 10h,	400h, 410h, 4, 14h, 404h, 414h,	4000h, 4010h, 4400h
		dd 4410h, 4004h, 4014h,	4404h, 4414h, 20000000h, 20000010h
		dd 20000400h, 20000410h, 20000004h, 20000014h, 20000404h
		dd 20000414h, 20004000h, 20004010h, 20004400h, 20004410h
		dd 20004004h, 20004014h, 20004404h, 20004414h, 200000h
		dd 200010h, 200400h, 200410h, 200004h, 200014h,	200404h
		dd 200414h, 204000h, 204010h, 204400h, 204410h,	204004h
		dd 204014h, 204404h, 204414h, 20200000h, 20200010h, 20200400h
		dd 20200410h, 20200004h, 20200014h, 20200404h, 20200414h
		dd 20204000h, 20204010h, 20204400h, 20204410h, 20204004h
		dd 20204014h, 20204404h, 20204414h, 0
		dd 1
dword_1003FFA0	dd 250D9C8Eh, 0F9042275h, 8B1079C5h, 14377923h,	0BC72C9Fh
					; DATA XREF: sub_1000BF20+59o
					; sub_1000BF20+94o
		dd 0EFEEF839h, 59970C95h, 41850AFCh, 676D9D76h,	12194E00h
		dd 0EA531602h, 0D6D773F2h, 0AEC87E7Fh, 7D99099Ch, 7F489EBBh
		dd 0B34696BBh, 0C8F87503h, 973F4569h, 0E1482E5Eh, 4C97585Dh
dword_1003FFF0	dd 578CE116h, 7EF1D821h, 0B16A05Ah, 0B425A67Eh,	54DB1924h
					; DATA XREF: sub_1000BF20+EBo
		dd 661335FAh, 1B2AAABBh, 4A2E3322h, 529D0714h, 486173FCh
		dd 0FC22C1ACh, 0A4ACFCA4h, 275BDADBh, 0B3C433h
dword_10040028	dd 300A0BC6h, 0E2F40767h, 6F51A724h, 5D3E855Fh,	3BB89767h
					; DATA XREF: sub_1000BF20+132o
					; sub_1000BF20+23Fo
		dd 0B17A9C30h, 0C91BC652h, 7962A846h
dword_10040048	dd 98288286h, 1401CBE7h, 1D4B87AEh, 41C71B99h, 6633FF33h
					; DATA XREF: sub_1000BF20+12Bo
		dd 0C6549540h, 2A404D67h, 65EBF91Fh
dword_10040068	dd 17C60C02h, 0C4BA4986h, 535717Bh, 0C24ADBF0h,	0A4C1382Ch
					; DATA XREF: sub_1000BF20+165o
		dd 4A46E542h, 47BEF07Dh, 0C60EB888h, 131D2B25h,	9687A6EFh
		dd 805B7DA3h, 617638C2h, 0F5D80C7h, 857605h
dword_100400A0	dd 8C4140C4h, 23702FBFh, 307BF288h, 0F31ECAC3h,	5D8153EFh
					; DATA XREF: sub_1000BF20+1F2o
		dd 0F14CED30h, 0EEA589FFh, 0FC0F892h, 0B6DF5388h, 0D3AAF076h
		dd 37641D2Eh, 24AE83Eh,	0E57F0AFFh, 6D2BE9h
dword_100400D8	dd 0			; DATA XREF: sub_1000C260+1Dr
dword_100400DC	dd 0			; DATA XREF: sub_1000C260+2Ar
dword_100400E0	dd 0			; DATA XREF: sub_1000C260+34r
		align 8
dword_100400E8	dd 80h,	7, 2, 1, 2 dup(0) ; DATA XREF: sub_1000DD70+DEo
byte_10040100	db 0			; DATA XREF: sub_1000DF00+E8r
					; sub_1000E240+48r ...
		db 80h,	40h, 0C0h
		dd 0E060A020h, 0D0509010h, 0F070B030h, 0C8488808h, 0E868A828h
		dd 0D8589818h, 0F878B838h, 0C4448404h, 0E464A424h, 0D4549414h
		dd 0F474B434h, 0CC4C8C0Ch, 0EC6CAC2Ch, 0DC5C9C1Ch, 0FC7CBC3Ch
		dd 0C2428202h, 0E262A222h, 0D2529212h, 0F272B232h, 0CA4A8A0Ah
		dd 0EA6AAA2Ah, 0DA5A9A1Ah, 0FA7ABA3Ah, 0C6468606h, 0E666A626h
		dd 0D6569616h, 0F676B636h, 0CE4E8E0Eh, 0EE6EAE2Eh, 0DE5E9E1Eh
		dd 0FE7EBE3Eh, 0C1418101h, 0E161A121h, 0D1519111h, 0F171B131h
		dd 0C9498909h, 0E969A929h, 0D9599919h, 0F979B939h, 0C5458505h
		dd 0E565A525h, 0D5559515h, 0F575B535h, 0CD4D8D0Dh, 0ED6DAD2Dh
		dd 0DD5D9D1Dh, 0FD7DBD3Dh, 0C3438303h, 0E363A323h, 0D3539313h
		dd 0F373B333h, 0CB4B8B0Bh, 0EB6BAB2Bh, 0DB5B9B1Bh, 0FB7BBB3Bh
		dd 0C7478707h, 0E767A727h, 0D7579717h, 0F777B737h, 0CF4F8F0Fh
		dd 0EF6FAF2Fh, 0DF5F9F1Fh, 0FF7FBF3Fh
byte_10040200	db 52h			; DATA XREF: sub_1000F1E0+17Cr
					; sub_1000F1E0+18Fr ...
		db 9, 6Ah, 0D5h
		dd 38A53630h, 9EA340BFh, 0FBD7F381h, 8239E37Ch,	87FF2F9Bh
		dd 44438E34h, 0CBE9DEC4h, 32947B54h, 3D23C2A6h,	0B954CEEh
		dd 4EC3FA42h, 66A12E08h, 0B224D928h, 49A25B76h,	25D18B6Dh
		dd 64F6F872h, 16986886h, 0CC5CA4D4h, 92B6655Dh,	5048706Ch
		dd 0DAB9EDFDh, 5746155Eh, 849D8DA7h, 0ABD890h, 0AD3BC8Ch
		dd 558E4F7h, 645B3B8h, 8F1E2CD0h, 20F3FCAh, 3BDAFC1h, 6B8A1301h
		dd 4111913Ah, 0EADC674Fh, 0CECFF297h, 73E6B4F0h, 2274AC96h
		dd 8535ADE7h, 0E837F9E2h, 6EDF751Ch, 711AF147h,	89C5291Dh
		dd 0E62B76Fh, 1BBE18AAh, 4B3E56FCh, 2079D2C6h, 0FEC0DB9Ah
		dd 0F45ACD78h, 33A8DD1Fh, 31C70788h, 591012B1h,	5FEC8027h
		dd 0A97F5160h, 0D4AB519h, 9F7AE52Dh, 0EF9CC993h, 4D3BE0A0h
		dd 0B0F52AAEh, 3CBBEBC8h, 61995383h, 7E042B17h,	26D677BAh
		dd 631469E1h, 7D0C2155h
dword_10040300	dd 0A56363C6h		; DATA XREF: sub_1000F610+84r
					; sub_1000F610+BEr ...
		dd 847C7CF8h, 997777EEh, 8D7B7BF6h, 0DF2F2FFh, 0BD6B6BD6h
		dd 0B16F6FDEh, 54C5C591h, 50303060h, 3010102h, 0A96767CEh
		dd 7D2B2B56h, 19FEFEE7h, 62D7D7B5h, 0E6ABAB4Dh,	9A7676ECh
		dd 45CACA8Fh, 9D82821Fh, 40C9C989h, 877D7DFAh, 15FAFAEFh
		dd 0EB5959B2h, 0C947478Eh, 0BF0F0FBh, 0ECADAD41h, 67D4D4B3h
		dd 0FDA2A25Fh, 0EAAFAF45h, 0BF9C9C23h, 0F7A4A453h, 967272E4h
		dd 5BC0C09Bh, 0C2B7B775h, 1CFDFDE1h, 0AE93933Dh, 6A26264Ch
		dd 5A36366Ch, 413F3F7Eh, 2F7F7F5h, 4FCCCC83h, 5C343468h
		dd 0F4A5A551h, 34E5E5D1h, 8F1F1F9h, 937171E2h, 73D8D8ABh
		dd 53313162h, 3F15152Ah, 0C040408h, 52C7C795h, 65232346h
		dd 5EC3C39Dh, 28181830h, 0A1969637h, 0F05050Ah,	0B59A9A2Fh
		dd 907070Eh, 36121224h,	9B80801Bh, 3DE2E2DFh, 26EBEBCDh
		dd 6927274Eh, 0CDB2B27Fh, 9F7575EAh, 1B090912h,	9E83831Dh
		dd 742C2C58h, 2E1A1A34h, 2D1B1B36h, 0B26E6EDCh,	0EE5A5AB4h
		dd 0FBA0A05Bh, 0F65252A4h, 4D3B3B76h, 61D6D6B7h, 0CEB3B37Dh
		dd 7B292952h, 3EE3E3DDh, 712F2F5Eh, 97848413h, 0F55353A6h
		dd 68D1D1B9h, 0
		dd 2CEDEDC1h, 60202040h, 1FFCFCE3h, 0C8B1B179h,	0ED5B5BB6h
		dd 0BE6A6AD4h, 46CBCB8Dh, 0D9BEBE67h, 4B393972h, 0DE4A4A94h
		dd 0D44C4C98h, 0E85858B0h, 4ACFCF85h, 6BD0D0BBh, 2AEFEFC5h
		dd 0E5AAAA4Fh, 16FBFBEDh, 0C5434386h, 0D74D4D9Ah, 55333366h
		dd 94858511h, 0CF45458Ah, 10F9F9E9h, 6020204h, 817F7FFEh
		dd 0F05050A0h, 443C3C78h, 0BA9F9F25h, 0E3A8A84Bh, 0F35151A2h
		dd 0FEA3A35Dh, 0C0404080h, 8A8F8F05h, 0AD92923Fh, 0BC9D9D21h
		dd 48383870h, 4F5F5F1h,	0DFBCBC63h, 0C1B6B677h,	75DADAAFh
		dd 63212142h, 30101020h, 1AFFFFE5h, 0EF3F3FDh, 6DD2D2BFh
		dd 4CCDCD81h, 140C0C18h, 35131326h, 2FECECC3h, 0E15F5FBEh
		dd 0A2979735h, 0CC444488h, 3917172Eh, 57C4C493h, 0F2A7A755h
		dd 827E7EFCh, 473D3D7Ah, 0AC6464C8h, 0E75D5DBAh, 2B191932h
		dd 957373E6h, 0A06060C0h, 98818119h, 0D14F4F9Eh, 7FDCDCA3h
		dd 66222244h, 7E2A2A54h, 0AB90903Bh, 8388880Bh,	0CA46468Ch
		dd 29EEEEC7h, 0D3B8B86Bh, 3C141428h, 79DEDEA7h,	0E25E5EBCh
		dd 1D0B0B16h, 76DBDBADh, 3BE0E0DBh, 56323264h, 4E3A3A74h
		dd 1E0A0A14h, 0DB494992h, 0A06060Ch, 6C242448h,	0E45C5CB8h
		dd 5DC2C29Fh, 6ED3D3BDh, 0EFACAC43h, 0A66262C4h, 0A8919139h
		dd 0A4959531h, 37E4E4D3h, 8B7979F2h, 32E7E7D5h,	43C8C88Bh
		dd 5937376Eh, 0B76D6DDAh, 8C8D8D01h, 64D5D5B1h,	0D24E4E9Ch
		dd 0E0A9A949h, 0B46C6CD8h, 0FA5656ACh, 7F4F4F3h, 25EAEACFh
		dd 0AF6565CAh, 8E7A7AF4h, 0E9AEAE47h, 18080810h, 0D5BABA6Fh
		dd 887878F0h, 6F25254Ah, 722E2E5Ch, 241C1C38h, 0F1A6A657h
		dd 0C7B4B473h, 51C6C697h, 23E8E8CBh, 7CDDDDA1h,	9C7474E8h
		dd 211F1F3Eh, 0DD4B4B96h, 0DCBDBD61h, 868B8B0Dh, 858A8A0Fh
		dd 907070E0h, 423E3E7Ch, 0C4B5B571h, 0AA6666CCh, 0D8484890h
		dd 5030306h, 1F6F6F7h, 120E0E1Ch, 0A36161C2h, 5F35356Ah
		dd 0F95757AEh, 0D0B9B969h, 91868617h, 58C1C199h, 271D1D3Ah
		dd 0B99E9E27h, 38E1E1D9h, 13F8F8EBh, 0B398982Bh, 33111122h
		dd 0BB6969D2h, 70D9D9A9h, 898E8E07h, 0A7949433h, 0B69B9B2Dh
		dd 221E1E3Ch, 92878715h, 20E9E9C9h, 49CECE87h, 0FF5555AAh
		dd 78282850h, 7ADFDFA5h, 8F8C8C03h, 0F8A1A159h,	80898909h
		dd 170D0D1Ah, 0DABFBF65h, 31E6E6D7h, 0C6424284h, 0B86868D0h
		dd 0C3414182h, 0B0999929h, 772D2D5Ah, 110F0F1Eh, 0CBB0B07Bh
		dd 0FC5454A8h, 0D6BBBB6Dh, 3A16162Ch
dword_10040700	dd 6363C6A5h		; DATA XREF: sub_1000F610+69r
					; sub_1000F610+95r ...
		dd 7C7CF884h, 7777EE99h, 7B7BF68Dh, 0F2F2FF0Dh,	6B6BD6BDh
		dd 6F6FDEB1h, 0C5C59154h, 30306050h, 1010203h, 6767CEA9h
		dd 2B2B567Dh, 0FEFEE719h, 0D7D7B562h, 0ABAB4DE6h, 7676EC9Ah
		dd 0CACA8F45h, 82821F9Dh, 0C9C98940h, 7D7DFA87h, 0FAFAEF15h
		dd 5959B2EBh, 47478EC9h, 0F0F0FB0Bh, 0ADAD41ECh, 0D4D4B367h
		dd 0A2A25FFDh, 0AFAF45EAh, 9C9C23BFh, 0A4A453F7h, 7272E496h
		dd 0C0C09B5Bh, 0B7B775C2h, 0FDFDE11Ch, 93933DAEh, 26264C6Ah
		dd 36366C5Ah, 3F3F7E41h, 0F7F7F502h, 0CCCC834Fh, 3434685Ch
		dd 0A5A551F4h, 0E5E5D134h, 0F1F1F908h, 7171E293h, 0D8D8AB73h
		dd 31316253h, 15152A3Fh, 404080Ch, 0C7C79552h, 23234665h
		dd 0C3C39D5Eh, 18183028h, 969637A1h, 5050A0Fh, 9A9A2FB5h
		dd 7070E09h, 12122436h,	80801B9Bh, 0E2E2DF3Dh, 0EBEBCD26h
		dd 27274E69h, 0B2B27FCDh, 7575EA9Fh, 909121Bh, 83831D9Eh
		dd 2C2C5874h, 1A1A342Eh, 1B1B362Dh, 6E6EDCB2h, 5A5AB4EEh
		dd 0A0A05BFBh, 5252A4F6h, 3B3B764Dh, 0D6D6B761h, 0B3B37DCEh
		dd 2929527Bh, 0E3E3DD3Eh, 2F2F5E71h, 84841397h,	5353A6F5h
		dd 0D1D1B968h, 0
		dd 0EDEDC12Ch, 20204060h, 0FCFCE31Fh, 0B1B179C8h, 5B5BB6EDh
		dd 6A6AD4BEh, 0CBCB8D46h, 0BEBE67D9h, 3939724Bh, 4A4A94DEh
		dd 4C4C98D4h, 5858B0E8h, 0CFCF854Ah, 0D0D0BB6Bh, 0EFEFC52Ah
		dd 0AAAA4FE5h, 0FBFBED16h, 434386C5h, 4D4D9AD7h, 33336655h
		dd 85851194h, 45458ACFh, 0F9F9E910h, 2020406h, 7F7FFE81h
		dd 5050A0F0h, 3C3C7844h, 9F9F25BAh, 0A8A84BE3h,	5151A2F3h
		dd 0A3A35DFEh, 404080C0h, 8F8F058Ah, 92923FADh,	9D9D21BCh
		dd 38387048h, 0F5F5F104h, 0BCBC63DFh, 0B6B677C1h, 0DADAAF75h
		dd 21214263h, 10102030h, 0FFFFE51Ah, 0F3F3FD0Eh, 0D2D2BF6Dh
		dd 0CDCD814Ch, 0C0C1814h, 13132635h, 0ECECC32Fh, 5F5FBEE1h
		dd 979735A2h, 444488CCh, 17172E39h, 0C4C49357h,	0A7A755F2h
		dd 7E7EFC82h, 3D3D7A47h, 6464C8ACh, 5D5DBAE7h, 1919322Bh
		dd 7373E695h, 6060C0A0h, 81811998h, 4F4F9ED1h, 0DCDCA37Fh
		dd 22224466h, 2A2A547Eh, 90903BABh, 88880B83h, 46468CCAh
		dd 0EEEEC729h, 0B8B86BD3h, 1414283Ch, 0DEDEA779h, 5E5EBCE2h
		dd 0B0B161Dh, 0DBDBAD76h, 0E0E0DB3Bh, 32326456h, 3A3A744Eh
		dd 0A0A141Eh, 494992DBh, 6060C0Ah, 2424486Ch, 5C5CB8E4h
		dd 0C2C29F5Dh, 0D3D3BD6Eh, 0ACAC43EFh, 6262C4A6h, 919139A8h
		dd 959531A4h, 0E4E4D337h, 7979F28Bh, 0E7E7D532h, 0C8C88B43h
		dd 37376E59h, 6D6DDAB7h, 8D8D018Ch, 0D5D5B164h,	4E4E9CD2h
		dd 0A9A949E0h, 6C6CD8B4h, 5656ACFAh, 0F4F4F307h, 0EAEACF25h
		dd 6565CAAFh, 7A7AF48Eh, 0AEAE47E9h, 8081018h, 0BABA6FD5h
		dd 7878F088h, 25254A6Fh, 2E2E5C72h, 1C1C3824h, 0A6A657F1h
		dd 0B4B473C7h, 0C6C69751h, 0E8E8CB23h, 0DDDDA17Ch, 7474E89Ch
		dd 1F1F3E21h, 4B4B96DDh, 0BDBD61DCh, 8B8B0D86h,	8A8A0F85h
		dd 7070E090h, 3E3E7C42h, 0B5B571C4h, 6666CCAAh,	484890D8h
		dd 3030605h, 0F6F6F701h, 0E0E1C12h, 6161C2A3h, 35356A5Fh
		dd 5757AEF9h, 0B9B969D0h, 86861791h, 0C1C19958h, 1D1D3A27h
		dd 9E9E27B9h, 0E1E1D938h, 0F8F8EB13h, 98982BB3h, 11112233h
		dd 6969D2BBh, 0D9D9A970h, 8E8E0789h, 949433A7h,	9B9B2DB6h
		dd 1E1E3C22h, 87871592h, 0E9E9C920h, 0CECE8749h, 5555AAFFh
		dd 28285078h, 0DFDFA57Ah, 8C8C038Fh, 0A1A159F8h, 89890980h
		dd 0D0D1A17h, 0BFBF65DAh, 0E6E6D731h, 424284C6h, 6868D0B8h
		dd 414182C3h, 999929B0h, 2D2D5A77h, 0F0F1E11h, 0B0B07BCBh
		dd 5454A8FCh, 0BBBB6DD6h, 16162C3Ah
dword_10040B00	dd 63C6A563h		; DATA XREF: sub_1000F610+5Er
					; sub_1000F610+B1r ...
		dd 7CF8847Ch, 77EE9977h, 7BF68D7Bh, 0F2FF0DF2h,	6BD6BD6Bh
		dd 6FDEB16Fh, 0C59154C5h, 30605030h, 1020301h, 67CEA967h
		dd 2B567D2Bh, 0FEE719FEh, 0D7B562D7h, 0AB4DE6ABh, 76EC9A76h
		dd 0CA8F45CAh, 821F9D82h, 0C98940C9h, 7DFA877Dh, 0FAEF15FAh
		dd 59B2EB59h, 478EC947h, 0F0FB0BF0h, 0AD41ECADh, 0D4B367D4h
		dd 0A25FFDA2h, 0AF45EAAFh, 9C23BF9Ch, 0A453F7A4h, 72E49672h
		dd 0C09B5BC0h, 0B775C2B7h, 0FDE11CFDh, 933DAE93h, 264C6A26h
		dd 366C5A36h, 3F7E413Fh, 0F7F502F7h, 0CC834FCCh, 34685C34h
		dd 0A551F4A5h, 0E5D134E5h, 0F1F908F1h, 71E29371h, 0D8AB73D8h
		dd 31625331h, 152A3F15h, 4080C04h, 0C79552C7h, 23466523h
		dd 0C39D5EC3h, 18302818h, 9637A196h, 50A0F05h, 9A2FB59Ah
		dd 70E0907h, 12243612h,	801B9B80h, 0E2DF3DE2h, 0EBCD26EBh
		dd 274E6927h, 0B27FCDB2h, 75EA9F75h, 9121B09h, 831D9E83h
		dd 2C58742Ch, 1A342E1Ah, 1B362D1Bh, 6EDCB26Eh, 5AB4EE5Ah
		dd 0A05BFBA0h, 52A4F652h, 3B764D3Bh, 0D6B761D6h, 0B37DCEB3h
		dd 29527B29h, 0E3DD3EE3h, 2F5E712Fh, 84139784h,	53A6F553h
		dd 0D1B968D1h, 0
		dd 0EDC12CEDh, 20406020h, 0FCE31FFCh, 0B179C8B1h, 5BB6ED5Bh
		dd 6AD4BE6Ah, 0CB8D46CBh, 0BE67D9BEh, 39724B39h, 4A94DE4Ah
		dd 4C98D44Ch, 58B0E858h, 0CF854ACFh, 0D0BB6BD0h, 0EFC52AEFh
		dd 0AA4FE5AAh, 0FBED16FBh, 4386C543h, 4D9AD74Dh, 33665533h
		dd 85119485h, 458ACF45h, 0F9E910F9h, 2040602h, 7FFE817Fh
		dd 50A0F050h, 3C78443Ch, 9F25BA9Fh, 0A84BE3A8h,	51A2F351h
		dd 0A35DFEA3h, 4080C040h, 8F058A8Fh, 923FAD92h,	9D21BC9Dh
		dd 38704838h, 0F5F104F5h, 0BC63DFBCh, 0B677C1B6h, 0DAAF75DAh
		dd 21426321h, 10203010h, 0FFE51AFFh, 0F3FD0EF3h, 0D2BF6DD2h
		dd 0CD814CCDh, 0C18140Ch, 13263513h, 0ECC32FECh, 5FBEE15Fh
		dd 9735A297h, 4488CC44h, 172E3917h, 0C49357C4h,	0A755F2A7h
		dd 7EFC827Eh, 3D7A473Dh, 64C8AC64h, 5DBAE75Dh, 19322B19h
		dd 73E69573h, 60C0A060h, 81199881h, 4F9ED14Fh, 0DCA37FDCh
		dd 22446622h, 2A547E2Ah, 903BAB90h, 880B8388h, 468CCA46h
		dd 0EEC729EEh, 0B86BD3B8h, 14283C14h, 0DEA779DEh, 5EBCE25Eh
		dd 0B161D0Bh, 0DBAD76DBh, 0E0DB3BE0h, 32645632h, 3A744E3Ah
		dd 0A141E0Ah, 4992DB49h, 60C0A06h, 24486C24h, 5CB8E45Ch
		dd 0C29F5DC2h, 0D3BD6ED3h, 0AC43EFACh, 62C4A662h, 9139A891h
		dd 9531A495h, 0E4D337E4h, 79F28B79h, 0E7D532E7h, 0C88B43C8h
		dd 376E5937h, 6DDAB76Dh, 8D018C8Dh, 0D5B164D5h,	4E9CD24Eh
		dd 0A949E0A9h, 6CD8B46Ch, 56ACFA56h, 0F4F307F4h, 0EACF25EAh
		dd 65CAAF65h, 7AF48E7Ah, 0AE47E9AEh, 8101808h, 0BA6FD5BAh
		dd 78F08878h, 254A6F25h, 2E5C722Eh, 1C38241Ch, 0A657F1A6h
		dd 0B473C7B4h, 0C69751C6h, 0E8CB23E8h, 0DDA17CDDh, 74E89C74h
		dd 1F3E211Fh, 4B96DD4Bh, 0BD61DCBDh, 8B0D868Bh,	8A0F858Ah
		dd 70E09070h, 3E7C423Eh, 0B571C4B5h, 66CCAA66h,	4890D848h
		dd 3060503h, 0F6F701F6h, 0E1C120Eh, 61C2A361h, 356A5F35h
		dd 57AEF957h, 0B969D0B9h, 86179186h, 0C19958C1h, 1D3A271Dh
		dd 9E27B99Eh, 0E1D938E1h, 0F8EB13F8h, 982BB398h, 11223311h
		dd 69D2BB69h, 0D9A970D9h, 8E07898Eh, 9433A794h,	9B2DB69Bh
		dd 1E3C221Eh, 87159287h, 0E9C920E9h, 0CE8749CEh, 55AAFF55h
		dd 28507828h, 0DFA57ADFh, 8C038F8Ch, 0A159F8A1h, 89098089h
		dd 0D1A170Dh, 0BF65DABFh, 0E6D731E6h, 4284C642h, 68D0B868h
		dd 4182C341h, 9929B099h, 2D5A772Dh, 0F1E110Fh, 0B07BCBB0h
		dd 54A8FC54h, 0BB6DD6BBh, 162C3A16h
dword_10040F00	dd 0C6A56363h		; DATA XREF: sub_1000F610+77r
					; sub_1000F610+9Cr ...
		dd 0F8847C7Ch, 0EE997777h, 0F68D7B7Bh, 0FF0DF2F2h, 0D6BD6B6Bh
		dd 0DEB16F6Fh, 9154C5C5h, 60503030h, 2030101h, 0CEA96767h
		dd 567D2B2Bh, 0E719FEFEh, 0B562D7D7h, 4DE6ABABh, 0EC9A7676h
		dd 8F45CACAh, 1F9D8282h, 8940C9C9h, 0FA877D7Dh,	0EF15FAFAh
		dd 0B2EB5959h, 8EC94747h, 0FB0BF0F0h, 41ECADADh, 0B367D4D4h
		dd 5FFDA2A2h, 45EAAFAFh, 23BF9C9Ch, 53F7A4A4h, 0E4967272h
		dd 9B5BC0C0h, 75C2B7B7h, 0E11CFDFDh, 3DAE9393h,	4C6A2626h
		dd 6C5A3636h, 7E413F3Fh, 0F502F7F7h, 834FCCCCh,	685C3434h
		dd 51F4A5A5h, 0D134E5E5h, 0F908F1F1h, 0E2937171h, 0AB73D8D8h
		dd 62533131h, 2A3F1515h, 80C0404h, 9552C7C7h, 46652323h
		dd 9D5EC3C3h, 30281818h, 37A19696h, 0A0F0505h, 2FB59A9Ah
		dd 0E090707h, 24361212h, 1B9B8080h, 0DF3DE2E2h,	0CD26EBEBh
		dd 4E692727h, 7FCDB2B2h, 0EA9F7575h, 121B0909h,	1D9E8383h
		dd 58742C2Ch, 342E1A1Ah, 362D1B1Bh, 0DCB26E6Eh,	0B4EE5A5Ah
		dd 5BFBA0A0h, 0A4F65252h, 764D3B3Bh, 0B761D6D6h, 7DCEB3B3h
		dd 527B2929h, 0DD3EE3E3h, 5E712F2Fh, 13978484h,	0A6F55353h
		dd 0B968D1D1h, 0
		dd 0C12CEDEDh, 40602020h, 0E31FFCFCh, 79C8B1B1h, 0B6ED5B5Bh
		dd 0D4BE6A6Ah, 8D46CBCBh, 67D9BEBEh, 724B3939h,	94DE4A4Ah
		dd 98D44C4Ch, 0B0E85858h, 854ACFCFh, 0BB6BD0D0h, 0C52AEFEFh
		dd 4FE5AAAAh, 0ED16FBFBh, 86C54343h, 9AD74D4Dh,	66553333h
		dd 11948585h, 8ACF4545h, 0E910F9F9h, 4060202h, 0FE817F7Fh
		dd 0A0F05050h, 78443C3Ch, 25BA9F9Fh, 4BE3A8A8h,	0A2F35151h
		dd 5DFEA3A3h, 80C04040h, 58A8F8Fh, 3FAD9292h, 21BC9D9Dh
		dd 70483838h, 0F104F5F5h, 63DFBCBCh, 77C1B6B6h,	0AF75DADAh
		dd 42632121h, 20301010h, 0E51AFFFFh, 0FD0EF3F3h, 0BF6DD2D2h
		dd 814CCDCDh, 18140C0Ch, 26351313h, 0C32FECECh,	0BEE15F5Fh
		dd 35A29797h, 88CC4444h, 2E391717h, 9357C4C4h, 55F2A7A7h
		dd 0FC827E7Eh, 7A473D3Dh, 0C8AC6464h, 0BAE75D5Dh, 322B1919h
		dd 0E6957373h, 0C0A06060h, 19988181h, 9ED14F4Fh, 0A37FDCDCh
		dd 44662222h, 547E2A2Ah, 3BAB9090h, 0B838888h, 8CCA4646h
		dd 0C729EEEEh, 6BD3B8B8h, 283C1414h, 0A779DEDEh, 0BCE25E5Eh
		dd 161D0B0Bh, 0AD76DBDBh, 0DB3BE0E0h, 64563232h, 744E3A3Ah
		dd 141E0A0Ah, 92DB4949h, 0C0A0606h, 486C2424h, 0B8E45C5Ch
		dd 9F5DC2C2h, 0BD6ED3D3h, 43EFACACh, 0C4A66262h, 39A89191h
		dd 31A49595h, 0D337E4E4h, 0F28B7979h, 0D532E7E7h, 8B43C8C8h
		dd 6E593737h, 0DAB76D6Dh, 18C8D8Dh, 0B164D5D5h,	9CD24E4Eh
		dd 49E0A9A9h, 0D8B46C6Ch, 0ACFA5656h, 0F307F4F4h, 0CF25EAEAh
		dd 0CAAF6565h, 0F48E7A7Ah, 47E9AEAEh, 10180808h, 6FD5BABAh
		dd 0F0887878h, 4A6F2525h, 5C722E2Eh, 38241C1Ch,	57F1A6A6h
		dd 73C7B4B4h, 9751C6C6h, 0CB23E8E8h, 0A17CDDDDh, 0E89C7474h
		dd 3E211F1Fh, 96DD4B4Bh, 61DCBDBDh, 0D868B8Bh, 0F858A8Ah
		dd 0E0907070h, 7C423E3Eh, 71C4B5B5h, 0CCAA6666h, 90D84848h
		dd 6050303h, 0F701F6F6h, 1C120E0Eh, 0C2A36161h,	6A5F3535h
		dd 0AEF95757h, 69D0B9B9h, 17918686h, 9958C1C1h,	3A271D1Dh
		dd 27B99E9Eh, 0D938E1E1h, 0EB13F8F8h, 2BB39898h, 22331111h
		dd 0D2BB6969h, 0A970D9D9h, 7898E8Eh, 33A79494h,	2DB69B9Bh
		dd 3C221E1Eh, 15928787h, 0C920E9E9h, 8749CECEh,	0AAFF5555h
		dd 50782828h, 0A57ADFDFh, 38F8C8Ch, 59F8A1A1h, 9808989h
		dd 1A170D0Dh, 65DABFBFh, 0D731E6E6h, 84C64242h,	0D0B86868h
		dd 82C34141h, 29B09999h, 5A772D2Dh, 1E110F0Fh, 7BCBB0B0h
		dd 0A8FC5454h, 6DD6BBBBh, 2C3A1616h
dword_10041300	dd 50A7F451h		; DATA XREF: sub_1000F1E0+86r
					; sub_1000F1E0+C0r ...
		dd 5365417Eh, 0C3A4171Ah, 965E273Ah, 0CB6BAB3Bh, 0F1459D1Fh
		dd 0AB58FAACh, 9303E34Bh, 55FA3020h, 0F66D76ADh, 9176CC88h
		dd 254C02F5h, 0FCD7E54Fh, 0D7CB2AC5h, 80443526h, 8FA362B5h
		dd 495AB1DEh, 671BBA25h, 980EEA45h, 0E1C0FE5Dh,	2752FC3h
		dd 12F04C81h, 0A397468Dh, 0C6F9D36Bh, 0E75F8F03h, 959C9215h
		dd 0EB7A6DBFh, 0DA595295h, 2D83BED4h, 0D3217458h, 2969E049h
		dd 44C8C98Eh, 6A89C275h, 78798EF4h, 6B3E5899h, 0DD71B927h
		dd 0B64FE1BEh, 17AD88F0h, 66AC20C9h, 0B43ACE7Dh, 184ADF63h
		dd 82311AE5h, 60335197h, 457F5362h, 0E07764B1h,	84AE6BBBh
		dd 1CA081FEh, 942B08F9h, 58684870h, 19FD458Fh, 876CDE94h
		dd 0B7F87B52h, 23D373ABh, 0E2024B72h, 578F1FE3h, 2AAB5566h
		dd 728EBB2h, 3C2B52Fh, 9A7BC586h, 0A50837D3h, 0F2872830h
		dd 0B2A5BF23h, 0BA6A0302h, 5C8216EDh, 2B1CCF8Ah, 92B479A7h
		dd 0F0F207F3h, 0A1E2694Eh, 0CDF4DA65h, 0D5BE0506h, 1F6234D1h
		dd 8AFEA6C4h, 9D532E34h, 0A055F3A2h, 32E18A05h,	75EBF6A4h
		dd 39EC830Bh, 0AAEF6040h, 69F715Eh, 51106EBDh, 0F98A213Eh
		dd 3D06DD96h, 0AE053EDDh, 46BDE64Dh, 0B58D5491h, 55DC471h
		dd 6FD40604h, 0FF155060h, 24FB9819h, 97E9BDD6h,	0CC434089h
		dd 779ED967h, 0BD42E8B0h, 888B8907h, 385B19E7h,	0DBEEC879h
		dd 470A7CA1h, 0E90F427Ch, 0C91E84F8h, 0
		dd 83868009h, 48ED2B32h, 0AC70111Eh, 4E725A6Ch,	0FBFF0EFDh
		dd 5638850Fh, 1ED5AE3Dh, 27392D36h, 64D90F0Ah, 21A65C68h
		dd 0D1545B9Bh, 3A2E3624h, 0B1670A0Ch, 0FE75793h, 0D296EEB4h
		dd 9E919B1Bh, 4FC5C080h, 0A220DC61h, 694B775Ah,	161A121Ch
		dd 0ABA93E2h, 0E52AA0C0h, 43E0223Ch, 1D171B12h,	0B0D090Eh
		dd 0ADC78BF2h, 0B9A8B62Dh, 0C8A91E14h, 8519F157h, 4C0775AFh
		dd 0BBDD99EEh, 0FD607FA3h, 9F2601F7h, 0BCF5725Ch, 0C53B6644h
		dd 347EFB5Bh, 7629438Bh, 0DCC623CBh, 68FCEDB6h,	63F1E4B8h
		dd 0CADC31D7h, 10856342h, 40229713h, 2011C684h,	7D244A85h
		dd 0F83DBBD2h, 1132F9AEh, 6DA129C7h, 4B2F9E1Dh,	0F330B2DCh
		dd 0EC52860Dh, 0D0E3C177h, 6C16B32Bh, 99B970A9h, 0FA489411h
		dd 2264E947h, 0C48CFCA8h, 1A3FF0A0h, 0D82C7D56h, 0EF903322h
		dd 0C74E4987h, 0C1D138D9h, 0FEA2CA8Ch, 360BD498h, 0CF81F5A6h
		dd 28DE7AA5h, 268EB7DAh, 0A4BFAD3Fh, 0E49D3A2Ch, 0D927850h
		dd 9BCC5F6Ah, 62467E54h, 0C2138DF6h, 0E8B8D890h, 5EF7392Eh
		dd 0F5AFC382h, 0BE805D9Fh, 7C93D069h, 0A92DD56Fh, 0B31225CFh
		dd 3B99ACC8h, 0A77D1810h, 6E639CE8h, 7BBB3BDBh,	97826CDh
		dd 0F418596Eh, 1B79AECh, 0A89A4F83h, 656E95E6h,	7EE6FFAAh
		dd 8CFBC21h, 0E6E815EFh, 0D99BE7BAh, 0CE366F4Ah, 0D4099FEAh
		dd 0D67CB029h, 0AFB2A431h, 31233F2Ah, 3094A5C6h, 0C066A235h
		dd 37BC4E74h, 0A6CA82FCh, 0B0D090E0h, 15D8A733h, 4A9804F1h
		dd 0F7DAEC41h, 0E50CD7Fh, 2FF69117h, 8DD64D76h,	4DB0EF43h
		dd 544DAACCh, 0DF0496E4h, 0E3B5D19Eh, 1B886A4Ch, 0B81F2CC1h
		dd 7F516546h, 4EA5E9Dh,	5D358C01h, 737487FAh, 2E410BFBh
		dd 5A1D67B3h, 52D2DB92h, 335610E9h, 1347D66Dh, 8C61D79Ah
		dd 7A0CA137h, 8E14F859h, 893C13EBh, 0EE27A9CEh,	35C961B7h
		dd 0EDE51CE1h, 3CB1477Ah, 59DFD29Ch, 3F73F255h,	79CE1418h
		dd 0BF37C773h, 0EACDF753h, 5BAAFD5Fh, 146F3DDFh, 86DB4478h
		dd 81F3AFCAh, 3EC468B9h, 2C342438h, 5F40A3C2h, 72C31D16h
		dd 0C25E2BCh, 8B493C28h, 41950DFFh, 7101A839h, 0DEB30C08h
		dd 9CE4B4D8h, 90C15664h, 6184CB7Bh, 70B632D5h, 745C6C48h
		dd 4257B8D0h
dword_10041700	dd 0A7F45150h		; DATA XREF: sub_1000F1E0+7Cr
					; sub_1000F1E0+9Cr ...
		dd 65417E53h, 0A4171AC3h, 5E273A96h, 6BAB3BCBh,	459D1FF1h
		dd 58FAACABh, 3E34B93h,	0FA302055h, 6D76ADF6h, 76CC8891h
		dd 4C02F525h, 0D7E54FFCh, 0CB2AC5D7h, 44352680h, 0A362B58Fh
		dd 5AB1DE49h, 1BBA2567h, 0EEA4598h, 0C0FE5DE1h,	752FC302h
		dd 0F04C8112h, 97468DA3h, 0F9D36BC6h, 5F8F03E7h, 9C921595h
		dd 7A6DBFEBh, 595295DAh, 83BED42Dh, 217458D3h, 69E04929h
		dd 0C8C98E44h, 89C2756Ah, 798EF478h, 3E58996Bh,	71B927DDh
		dd 4FE1BEB6h, 0AD88F017h, 0AC20C966h, 3ACE7DB4h, 4ADF6318h
		dd 311AE582h, 33519760h, 7F536245h, 7764B1E0h, 0AE6BBB84h
		dd 0A081FE1Ch, 2B08F994h, 68487058h, 0FD458F19h, 6CDE9487h
		dd 0F87B52B7h, 0D373AB23h, 24B72E2h, 8F1FE357h,	0AB55662Ah
		dd 28EBB207h, 0C2B52F03h, 7BC5869Ah, 837D3A5h, 872830F2h
		dd 0A5BF23B2h, 6A0302BAh, 8216ED5Ch, 1CCF8A2Bh,	0B479A792h
		dd 0F207F3F0h, 0E2694EA1h, 0F4DA65CDh, 0BE0506D5h, 6234D11Fh
		dd 0FEA6C48Ah, 532E349Dh, 55F3A2A0h, 0E18A0532h, 0EBF6A475h
		dd 0EC830B39h, 0EF6040AAh, 9F715E06h, 106EBD51h, 8A213EF9h
		dd 6DD963Dh, 53EDDAEh, 0BDE64D46h, 8D5491B5h, 5DC47105h
		dd 0D406046Fh, 155060FFh, 0FB981924h, 0E9BDD697h, 434089CCh
		dd 9ED96777h, 42E8B0BDh, 8B890788h, 5B19E738h, 0EEC879DBh
		dd 0A7CA147h, 0F427CE9h, 1E84F8C9h, 0
		dd 86800983h, 0ED2B3248h, 70111EACh, 725A6C4Eh,	0FF0EFDFBh
		dd 38850F56h, 0D5AE3D1Eh, 392D3627h, 0D90F0A64h, 0A65C6821h
		dd 545B9BD1h, 2E36243Ah, 670A0CB1h, 0E757930Fh,	96EEB4D2h
		dd 919B1B9Eh, 0C5C0804Fh, 20DC61A2h, 4B775A69h,	1A121C16h
		dd 0BA93E20Ah, 2AA0C0E5h, 0E0223C43h, 171B121Dh, 0D090E0Bh
		dd 0C78BF2ADh, 0A8B62DB9h, 0A91E14C8h, 19F15785h, 775AF4Ch
		dd 0DD99EEBBh, 607FA3FDh, 2601F79Fh, 0F5725CBCh, 3B6644C5h
		dd 7EFB5B34h, 29438B76h, 0C623CBDCh, 0FCEDB668h, 0F1E4B863h
		dd 0DC31D7CAh, 85634210h, 22971340h, 11C68420h,	244A857Dh
		dd 3DBBD2F8h, 32F9AE11h, 0A129C76Dh, 2F9E1D4Bh,	30B2DCF3h
		dd 52860DECh, 0E3C177D0h, 16B32B6Ch, 0B970A999h, 489411FAh
		dd 64E94722h, 8CFCA8C4h, 3FF0A01Ah, 2C7D56D8h, 903322EFh
		dd 4E4987C7h, 0D138D9C1h, 0A2CA8CFEh, 0BD49836h, 81F5A6CFh
		dd 0DE7AA528h, 8EB7DA26h, 0BFAD3FA4h, 9D3A2CE4h, 9278500Dh
		dd 0CC5F6A9Bh, 467E5462h, 138DF6C2h, 0B8D890E8h, 0F7392E5Eh
		dd 0AFC382F5h, 805D9FBEh, 93D0697Ch, 2DD56FA9h,	1225CFB3h
		dd 99ACC83Bh, 7D1810A7h, 639CE86Eh, 0BB3BDB7Bh,	7826CD09h
		dd 18596EF4h, 0B79AEC01h, 9A4F83A8h, 6E95E665h,	0E6FFAA7Eh
		dd 0CFBC2108h, 0E815EFE6h, 9BE7BAD9h, 366F4ACEh, 99FEAD4h
		dd 7CB029D6h, 0B2A431AFh, 233F2A31h, 94A5C630h,	66A235C0h
		dd 0BC4E7437h, 0CA82FCA6h, 0D090E0B0h, 0D8A73315h, 9804F14Ah
		dd 0DAEC41F7h, 50CD7F0Eh, 0F691172Fh, 0D64D768Dh, 0B0EF434Dh
		dd 4DAACC54h, 496E4DFh,	0B5D19EE3h, 886A4C1Bh, 1F2CC1B8h
		dd 5165467Fh, 0EA5E9D04h, 358C015Dh, 7487FA73h,	410BFB2Eh
		dd 1D67B35Ah, 0D2DB9252h, 5610E933h, 47D66D13h,	61D79A8Ch
		dd 0CA1377Ah, 14F8598Eh, 3C13EB89h, 27A9CEEEh, 0C961B735h
		dd 0E51CE1EDh, 0B1477A3Ch, 0DFD29C59h, 73F2553Fh, 0CE141879h
		dd 37C773BFh, 0CDF753EAh, 0AAFD5F5Bh, 6F3DDF14h, 0DB447886h
		dd 0F3AFCA81h, 0C468B93Eh, 3424382Ch, 40A3C25Fh, 0C31D1672h
		dd 25E2BC0Ch, 493C288Bh, 950DFF41h, 1A83971h, 0B30C08DEh
		dd 0E4B4D89Ch, 0C1566490h, 84CB7B61h, 0B632D570h, 5C6C4874h
		dd 57B8D042h
dword_10041B00	dd 0F45150A7h		; DATA XREF: sub_1000F1E0+69r
					; sub_1000F1E0+B2r ...
		dd 417E5365h, 171AC3A4h, 273A965Eh, 0AB3BCB6Bh,	9D1FF145h
		dd 0FAACAB58h, 0E34B9303h, 302055FAh, 76ADF66Dh, 0CC889176h
		dd 2F5254Ch, 0E54FFCD7h, 2AC5D7CBh, 35268044h, 62B58FA3h
		dd 0B1DE495Ah, 0BA25671Bh, 0EA45980Eh, 0FE5DE1C0h, 2FC30275h
		dd 4C8112F0h, 468DA397h, 0D36BC6F9h, 8F03E75Fh,	9215959Ch
		dd 6DBFEB7Ah, 5295DA59h, 0BED42D83h, 7458D321h,	0E0492969h
		dd 0C98E44C8h, 0C2756A89h, 8EF47879h, 58996B3Eh, 0B927DD71h
		dd 0E1BEB64Fh, 88F017ADh, 20C966ACh, 0CE7DB43Ah, 0DF63184Ah
		dd 1AE58231h, 51976033h, 5362457Fh, 64B1E077h, 6BBB84AEh
		dd 81FE1CA0h, 8F9942Bh,	48705868h, 458F19FDh, 0DE94876Ch
		dd 7B52B7F8h, 73AB23D3h, 4B72E202h, 1FE3578Fh, 55662AABh
		dd 0EBB20728h, 0B52F03C2h, 0C5869A7Bh, 37D3A508h, 2830F287h
		dd 0BF23B2A5h, 302BA6Ah, 16ED5C82h, 0CF8A2B1Ch,	79A792B4h
		dd 7F3F0F2h, 694EA1E2h,	0DA65CDF4h, 506D5BEh, 34D11F62h
		dd 0A6C48AFEh, 2E349D53h, 0F3A2A055h, 8A0532E1h, 0F6A475EBh
		dd 830B39ECh, 6040AAEFh, 715E069Fh, 6EBD5110h, 213EF98Ah
		dd 0DD963D06h, 3EDDAE05h, 0E64D46BDh, 5491B58Dh, 0C471055Dh
		dd 6046FD4h, 5060FF15h,	981924FBh, 0BDD697E9h, 4089CC43h
		dd 0D967779Eh, 0E8B0BD42h, 8907888Bh, 19E7385Bh, 0C879DBEEh
		dd 7CA1470Ah, 427CE90Fh, 84F8C91Eh, 0
		dd 80098386h, 2B3248EDh, 111EAC70h, 5A6C4E72h, 0EFDFBFFh
		dd 850F5638h, 0AE3D1ED5h, 2D362739h, 0F0A64D9h,	5C6821A6h
		dd 5B9BD154h, 36243A2Eh, 0A0CB167h, 57930FE7h, 0EEB4D296h
		dd 9B1B9E91h, 0C0804FC5h, 0DC61A220h, 775A694Bh, 121C161Ah
		dd 93E20ABAh, 0A0C0E52Ah, 223C43E0h, 1B121D17h,	90E0B0Dh
		dd 8BF2ADC7h, 0B62DB9A8h, 1E14C8A9h, 0F1578519h, 75AF4C07h
		dd 99EEBBDDh, 7FA3FD60h, 1F79F26h, 725CBCF5h, 6644C53Bh
		dd 0FB5B347Eh, 438B7629h, 23CBDCC6h, 0EDB668FCh, 0E4B863F1h
		dd 31D7CADCh, 63421085h, 97134022h, 0C6842011h,	4A857D24h
		dd 0BBD2F83Dh, 0F9AE1132h, 29C76DA1h, 9E1D4B2Fh, 0B2DCF330h
		dd 860DEC52h, 0C177D0E3h, 0B32B6C16h, 70A999B9h, 9411FA48h
		dd 0E9472264h, 0FCA8C48Ch, 0F0A01A3Fh, 7D56D82Ch, 3322EF90h
		dd 4987C74Eh, 38D9C1D1h, 0CA8CFEA2h, 0D498360Bh, 0F5A6CF81h
		dd 7AA528DEh, 0B7DA268Eh, 0AD3FA4BFh, 3A2CE49Dh, 78500D92h
		dd 5F6A9BCCh, 7E546246h, 8DF6C213h, 0D890E8B8h,	392E5EF7h
		dd 0C382F5AFh, 5D9FBE80h, 0D0697C93h, 0D56FA92Dh, 25CFB312h
		dd 0ACC83B99h, 1810A77Dh, 9CE86E63h, 3BDB7BBBh,	26CD0978h
		dd 596EF418h, 9AEC01B7h, 4F83A89Ah, 95E6656Eh, 0FFAA7EE6h
		dd 0BC2108CFh, 15EFE6E8h, 0E7BAD99Bh, 6F4ACE36h, 9FEAD409h
		dd 0B029D67Ch, 0A431AFB2h, 3F2A3123h, 0A5C63094h, 0A235C066h
		dd 4E7437BCh, 82FCA6CAh, 90E0B0D0h, 0A73315D8h,	4F14A98h
		dd 0EC41F7DAh, 0CD7F0E50h, 91172FF6h, 4D768DD6h, 0EF434DB0h
		dd 0AACC544Dh, 96E4DF04h, 0D19EE3B5h, 6A4C1B88h, 2CC1B81Fh
		dd 65467F51h, 5E9D04EAh, 8C015D35h, 87FA7374h, 0BFB2E41h
		dd 67B35A1Dh, 0DB9252D2h, 10E93356h, 0D66D1347h, 0D79A8C61h
		dd 0A1377A0Ch, 0F8598E14h, 13EB893Ch, 0A9CEEE27h, 61B735C9h
		dd 1CE1EDE5h, 477A3CB1h, 0D29C59DFh, 0F2553F73h, 141879CEh
		dd 0C773BF37h, 0F753EACDh, 0FD5F5BAAh, 3DDF146Fh, 447886DBh
		dd 0AFCA81F3h, 68B93EC4h, 24382C34h, 0A3C25F40h, 1D1672C3h
		dd 0E2BC0C25h, 3C288B49h, 0DFF4195h, 0A8397101h, 0C08DEB3h
		dd 0B4D89CE4h, 566490C1h, 0CB7B6184h, 32D570B6h, 6C48745Ch
		dd 0B8D04257h
dword_10041F00	dd 5150A7F4h		; DATA XREF: sub_1000F1E0+62r
					; sub_1000F1E0+A5r ...
		dd 7E536541h, 1AC3A417h, 3A965E27h, 3BCB6BABh, 1FF1459Dh
		dd 0ACAB58FAh, 4B9303E3h, 2055FA30h, 0ADF66D76h, 889176CCh
		dd 0F5254C02h, 4FFCD7E5h, 0C5D7CB2Ah, 26804435h, 0B58FA362h
		dd 0DE495AB1h, 25671BBAh, 45980EEAh, 5DE1C0FEh,	0C302752Fh
		dd 8112F04Ch, 8DA39746h, 6BC6F9D3h, 3E75F8Fh, 15959C92h
		dd 0BFEB7A6Dh, 95DA5952h, 0D42D83BEh, 58D32174h, 492969E0h
		dd 8E44C8C9h, 756A89C2h, 0F478798Eh, 996B3E58h,	27DD71B9h
		dd 0BEB64FE1h, 0F017AD88h, 0C966AC20h, 7DB43ACEh, 63184ADFh
		dd 0E582311Ah, 97603351h, 62457F53h, 0B1E07764h, 0BB84AE6Bh
		dd 0FE1CA081h, 0F9942B08h, 70586848h, 8F19FD45h, 94876CDEh
		dd 52B7F87Bh, 0AB23D373h, 72E2024Bh, 0E3578F1Fh, 662AAB55h
		dd 0B20728EBh, 2F03C2B5h, 869A7BC5h, 0D3A50837h, 30F28728h
		dd 23B2A5BFh, 2BA6A03h,	0ED5C8216h, 8A2B1CCFh, 0A792B479h
		dd 0F3F0F207h, 4EA1E269h, 65CDF4DAh, 6D5BE05h, 0D11F6234h
		dd 0C48AFEA6h, 349D532Eh, 0A2A055F3h, 532E18Ah,	0A475EBF6h
		dd 0B39EC83h, 40AAEF60h, 5E069F71h, 0BD51106Eh,	3EF98A21h
		dd 963D06DDh, 0DDAE053Eh, 4D46BDE6h, 91B58D54h,	71055DC4h
		dd 46FD406h, 60FF1550h,	1924FB98h, 0D697E9BDh, 89CC4340h
		dd 67779ED9h, 0B0BD42E8h, 7888B89h, 0E7385B19h,	79DBEEC8h
		dd 0A1470A7Ch, 7CE90F42h, 0F8C91E84h, 0
		dd 9838680h, 3248ED2Bh,	1EAC7011h, 6C4E725Ah, 0FDFBFF0Eh
		dd 0F563885h, 3D1ED5AEh, 3627392Dh, 0A64D90Fh, 6821A65Ch
		dd 9BD1545Bh, 243A2E36h, 0CB1670Ah, 930FE757h, 0B4D296EEh
		dd 1B9E919Bh, 804FC5C0h, 61A220DCh, 5A694B77h, 1C161A12h
		dd 0E20ABA93h, 0C0E52AA0h, 3C43E022h, 121D171Bh, 0E0B0D09h
		dd 0F2ADC78Bh, 2DB9A8B6h, 14C8A91Eh, 578519F1h,	0AF4C0775h
		dd 0EEBBDD99h, 0A3FD607Fh, 0F79F2601h, 5CBCF572h, 44C53B66h
		dd 5B347EFBh, 8B762943h, 0CBDCC623h, 0B668FCEDh, 0B863F1E4h
		dd 0D7CADC31h, 42108563h, 13402297h, 842011C6h,	857D244Ah
		dd 0D2F83DBBh, 0AE1132F9h, 0C76DA129h, 1D4B2F9Eh, 0DCF330B2h
		dd 0DEC5286h, 77D0E3C1h, 2B6C16B3h, 0A999B970h,	11FA4894h
		dd 472264E9h, 0A8C48CFCh, 0A01A3FF0h, 56D82C7Dh, 22EF9033h
		dd 87C74E49h, 0D9C1D138h, 8CFEA2CAh, 98360BD4h,	0A6CF81F5h
		dd 0A528DE7Ah, 0DA268EB7h, 3FA4BFADh, 2CE49D3Ah, 500D9278h
		dd 6A9BCC5Fh, 5462467Eh, 0F6C2138Dh, 90E8B8D8h,	2E5EF739h
		dd 82F5AFC3h, 9FBE805Dh, 697C93D0h, 6FA92DD5h, 0CFB31225h
		dd 0C83B99ACh, 10A77D18h, 0E86E639Ch, 0DB7BBB3Bh, 0CD097826h
		dd 6EF41859h, 0EC01B79Ah, 83A89A4Fh, 0E6656E95h, 0AA7EE6FFh
		dd 2108CFBCh, 0EFE6E815h, 0BAD99BE7h, 4ACE366Fh, 0EAD4099Fh
		dd 29D67CB0h, 31AFB2A4h, 2A31233Fh, 0C63094A5h,	35C066A2h
		dd 7437BC4Eh, 0FCA6CA82h, 0E0B0D090h, 3315D8A7h, 0F14A9804h
		dd 41F7DAECh, 7F0E50CDh, 172FF691h, 768DD64Dh, 434DB0EFh
		dd 0CC544DAAh, 0E4DF0496h, 9EE3B5D1h, 4C1B886Ah, 0C1B81F2Ch
		dd 467F5165h, 9D04EA5Eh, 15D358Ch, 0FA737487h, 0FB2E410Bh
		dd 0B35A1D67h, 9252D2DBh, 0E9335610h, 6D1347D6h, 9A8C61D7h
		dd 377A0CA1h, 598E14F8h, 0EB893C13h, 0CEEE27A9h, 0B735C961h
		dd 0E1EDE51Ch, 7A3CB147h, 9C59DFD2h, 553F73F2h,	1879CE14h
		dd 73BF37C7h, 53EACDF7h, 5F5BAAFDh, 0DF146F3Dh,	7886DB44h
		dd 0CA81F3AFh, 0B93EC468h, 382C3424h, 0C25F40A3h, 1672C31Dh
		dd 0BC0C25E2h, 288B493Ch, 0FF41950Dh, 397101A8h, 8DEB30Ch
		dd 0D89CE4B4h, 6490C156h, 7B6184CBh, 0D570B632h, 48745C6Ch
		dd 0D04257B8h
dword_10042300	dd 0			; DATA XREF: sub_1000FA60+64r
					; sub_1000FA60+92r ...
		dd 0B0D090Eh, 161A121Ch, 1D171B12h, 2C342438h, 27392D36h
		dd 3A2E3624h, 31233F2Ah, 58684870h, 5365417Eh, 4E725A6Ch
		dd 457F5362h, 745C6C48h, 7F516546h, 62467E54h, 694B775Ah
		dd 0B0D090E0h, 0BBDD99EEh, 0A6CA82FCh, 0ADC78BF2h, 9CE4B4D8h
		dd 97E9BDD6h, 8AFEA6C4h, 81F3AFCAh, 0E8B8D890h,	0E3B5D19Eh
		dd 0FEA2CA8Ch, 0F5AFC382h, 0C48CFCA8h, 0CF81F5A6h, 0D296EEB4h
		dd 0D99BE7BAh, 7BBB3BDBh, 70B632D5h, 6DA129C7h,	66AC20C9h
		dd 578F1FE3h, 5C8216EDh, 41950DFFh, 4A9804F1h, 23D373ABh
		dd 28DE7AA5h, 35C961B7h, 3EC468B9h, 0FE75793h, 4EA5E9Dh
		dd 19FD458Fh, 12F04C81h, 0CB6BAB3Bh, 0C066A235h, 0DD71B927h
		dd 0D67CB029h, 0E75F8F03h, 0EC52860Dh, 0F1459D1Fh, 0FA489411h
		dd 9303E34Bh, 980EEA45h, 8519F157h, 8E14F859h, 0BF37C773h
		dd 0B43ACE7Dh, 0A92DD56Fh, 0A220DC61h, 0F66D76ADh, 0FD607FA3h
		dd 0E07764B1h, 0EB7A6DBFh, 0DA595295h, 0D1545B9Bh, 0CC434089h
		dd 0C74E4987h, 0AE053EDDh, 0A50837D3h, 0B81F2CC1h, 0B31225CFh
		dd 82311AE5h, 893C13EBh, 942B08F9h, 9F2601F7h, 46BDE64Dh
		dd 4DB0EF43h, 50A7F451h, 5BAAFD5Fh, 6A89C275h, 6184CB7Bh
		dd 7C93D069h, 779ED967h, 1ED5AE3Dh, 15D8A733h, 8CFBC21h
		dd 3C2B52Fh, 32E18A05h,	39EC830Bh, 24FB9819h, 2FF69117h
		dd 8DD64D76h, 86DB4478h, 9BCC5F6Ah, 90C15664h, 0A1E2694Eh
		dd 0AAEF6040h, 0B7F87B52h, 0BCF5725Ch, 0D5BE0506h, 0DEB30C08h
		dd 0C3A4171Ah, 0C8A91E14h, 0F98A213Eh, 0F2872830h, 0EF903322h
		dd 0E49D3A2Ch, 3D06DD96h, 360BD498h, 2B1CCF8Ah,	2011C684h
		dd 1132F9AEh, 1A3FF0A0h, 728EBB2h, 0C25E2BCh, 656E95E6h
		dd 6E639CE8h, 737487FAh, 78798EF4h, 495AB1DEh, 4257B8D0h
		dd 5F40A3C2h, 544DAACCh, 0F7DAEC41h, 0FCD7E54Fh, 0E1C0FE5Dh
		dd 0EACDF753h, 0DBEEC879h, 0D0E3C177h, 0CDF4DA65h, 0C6F9D36Bh
		dd 0AFB2A431h, 0A4BFAD3Fh, 0B9A8B62Dh, 0B2A5BF23h, 83868009h
		dd 888B8907h, 959C9215h, 9E919B1Bh, 470A7CA1h, 4C0775AFh
		dd 51106EBDh, 5A1D67B3h, 6B3E5899h, 60335197h, 7D244A85h
		dd 7629438Bh, 1F6234D1h, 146F3DDFh, 97826CDh, 2752FC3h
		dd 335610E9h, 385B19E7h, 254C02F5h, 2E410BFBh, 8C61D79Ah
		dd 876CDE94h, 9A7BC586h, 9176CC88h, 0A055F3A2h,	0AB58FAACh
		dd 0B64FE1BEh, 0BD42E8B0h, 0D4099FEAh, 0DF0496E4h, 0C2138DF6h
		dd 0C91E84F8h, 0F83DBBD2h, 0F330B2DCh, 0EE27A9CEh, 0E52AA0C0h
		dd 3CB1477Ah, 37BC4E74h, 2AAB5566h, 21A65C68h, 10856342h
		dd 1B886A4Ch, 69F715Eh,	0D927850h, 64D90F0Ah, 6FD40604h
		dd 72C31D16h, 79CE1418h, 48ED2B32h, 43E0223Ch, 5EF7392Eh
		dd 55FA3020h, 1B79AECh,	0ABA93E2h, 17AD88F0h, 1CA081FEh
		dd 2D83BED4h, 268EB7DAh, 3B99ACC8h, 3094A5C6h, 59DFD29Ch
		dd 52D2DB92h, 4FC5C080h, 44C8C98Eh, 75EBF6A4h, 7EE6FFAAh
		dd 63F1E4B8h, 68FCEDB6h, 0B1670A0Ch, 0BA6A0302h, 0A77D1810h
		dd 0AC70111Eh, 9D532E34h, 965E273Ah, 8B493C28h,	80443526h
		dd 0E90F427Ch, 0E2024B72h, 0FF155060h, 0F418596Eh, 0C53B6644h
		dd 0CE366F4Ah, 0D3217458h, 0D82C7D56h, 7A0CA137h, 7101A839h
		dd 6C16B32Bh, 671BBA25h, 5638850Fh, 5D358C01h, 40229713h
		dd 4B2F9E1Dh, 2264E947h, 2969E049h, 347EFB5Bh, 3F73F255h
		dd 0E50CD7Fh, 55DC471h,	184ADF63h, 1347D66Dh, 0CADC31D7h
		dd 0C1D138D9h, 0DCC623CBh, 0D7CB2AC5h, 0E6E815EFh, 0EDE51CE1h
		dd 0F0F207F3h, 0FBFF0EFDh, 92B479A7h, 99B970A9h, 84AE6BBBh
		dd 8FA362B5h, 0BE805D9Fh, 0B58D5491h, 0A89A4F83h, 0A397468Dh
dword_10042700	dd 0			; DATA XREF: sub_1000FA60+5Ar
					; sub_1000FA60+87r ...
		dd 0D090E0Bh, 1A121C16h, 171B121Dh, 3424382Ch, 392D3627h
		dd 2E36243Ah, 233F2A31h, 68487058h, 65417E53h, 725A6C4Eh
		dd 7F536245h, 5C6C4874h, 5165467Fh, 467E5462h, 4B775A69h
		dd 0D090E0B0h, 0DD99EEBBh, 0CA82FCA6h, 0C78BF2ADh, 0E4B4D89Ch
		dd 0E9BDD697h, 0FEA6C48Ah, 0F3AFCA81h, 0B8D890E8h, 0B5D19EE3h
		dd 0A2CA8CFEh, 0AFC382F5h, 8CFCA8C4h, 81F5A6CFh, 96EEB4D2h
		dd 9BE7BAD9h, 0BB3BDB7Bh, 0B632D570h, 0A129C76Dh, 0AC20C966h
		dd 8F1FE357h, 8216ED5Ch, 950DFF41h, 9804F14Ah, 0D373AB23h
		dd 0DE7AA528h, 0C961B735h, 0C468B93Eh, 0E757930Fh, 0EA5E9D04h
		dd 0FD458F19h, 0F04C8112h, 6BAB3BCBh, 66A235C0h, 71B927DDh
		dd 7CB029D6h, 5F8F03E7h, 52860DECh, 459D1FF1h, 489411FAh
		dd 3E34B93h, 0EEA4598h,	19F15785h, 14F8598Eh, 37C773BFh
		dd 3ACE7DB4h, 2DD56FA9h, 20DC61A2h, 6D76ADF6h, 607FA3FDh
		dd 7764B1E0h, 7A6DBFEBh, 595295DAh, 545B9BD1h, 434089CCh
		dd 4E4987C7h, 53EDDAEh,	837D3A5h, 1F2CC1B8h, 1225CFB3h
		dd 311AE582h, 3C13EB89h, 2B08F994h, 2601F79Fh, 0BDE64D46h
		dd 0B0EF434Dh, 0A7F45150h, 0AAFD5F5Bh, 89C2756Ah, 84CB7B61h
		dd 93D0697Ch, 9ED96777h, 0D5AE3D1Eh, 0D8A73315h, 0CFBC2108h
		dd 0C2B52F03h, 0E18A0532h, 0EC830B39h, 0FB981924h, 0F691172Fh
		dd 0D64D768Dh, 0DB447886h, 0CC5F6A9Bh, 0C1566490h, 0E2694EA1h
		dd 0EF6040AAh, 0F87B52B7h, 0F5725CBCh, 0BE0506D5h, 0B30C08DEh
		dd 0A4171AC3h, 0A91E14C8h, 8A213EF9h, 872830F2h, 903322EFh
		dd 9D3A2CE4h, 6DD963Dh,	0BD49836h, 1CCF8A2Bh, 11C68420h
		dd 32F9AE11h, 3FF0A01Ah, 28EBB207h, 25E2BC0Ch, 6E95E665h
		dd 639CE86Eh, 7487FA73h, 798EF478h, 5AB1DE49h, 57B8D042h
		dd 40A3C25Fh, 4DAACC54h, 0DAEC41F7h, 0D7E54FFCh, 0C0FE5DE1h
		dd 0CDF753EAh, 0EEC879DBh, 0E3C177D0h, 0F4DA65CDh, 0F9D36BC6h
		dd 0B2A431AFh, 0BFAD3FA4h, 0A8B62DB9h, 0A5BF23B2h, 86800983h
		dd 8B890788h, 9C921595h, 919B1B9Eh, 0A7CA147h, 775AF4Ch
		dd 106EBD51h, 1D67B35Ah, 3E58996Bh, 33519760h, 244A857Dh
		dd 29438B76h, 6234D11Fh, 6F3DDF14h, 7826CD09h, 752FC302h
		dd 5610E933h, 5B19E738h, 4C02F525h, 410BFB2Eh, 61D79A8Ch
		dd 6CDE9487h, 7BC5869Ah, 76CC8891h, 55F3A2A0h, 58FAACABh
		dd 4FE1BEB6h, 42E8B0BDh, 99FEAD4h, 496E4DFh, 138DF6C2h
		dd 1E84F8C9h, 3DBBD2F8h, 30B2DCF3h, 27A9CEEEh, 2AA0C0E5h
		dd 0B1477A3Ch, 0BC4E7437h, 0AB55662Ah, 0A65C6821h, 85634210h
		dd 886A4C1Bh, 9F715E06h, 9278500Dh, 0D90F0A64h,	0D406046Fh
		dd 0C31D1672h, 0CE141879h, 0ED2B3248h, 0E0223C43h, 0F7392E5Eh
		dd 0FA302055h, 0B79AEC01h, 0BA93E20Ah, 0AD88F017h, 0A081FE1Ch
		dd 83BED42Dh, 8EB7DA26h, 99ACC83Bh, 94A5C630h, 0DFD29C59h
		dd 0D2DB9252h, 0C5C0804Fh, 0C8C98E44h, 0EBF6A475h, 0E6FFAA7Eh
		dd 0F1E4B863h, 0FCEDB668h, 670A0CB1h, 6A0302BAh, 7D1810A7h
		dd 70111EACh, 532E349Dh, 5E273A96h, 493C288Bh, 44352680h
		dd 0F427CE9h, 24B72E2h,	155060FFh, 18596EF4h, 3B6644C5h
		dd 366F4ACEh, 217458D3h, 2C7D56D8h, 0CA1377Ah, 1A83971h
		dd 16B32B6Ch, 1BBA2567h, 38850F56h, 358C015Dh, 22971340h
		dd 2F9E1D4Bh, 64E94722h, 69E04929h, 7EFB5B34h, 73F2553Fh
		dd 50CD7F0Eh, 5DC47105h, 4ADF6318h, 47D66D13h, 0DC31D7CAh
		dd 0D138D9C1h, 0C623CBDCh, 0CB2AC5D7h, 0E815EFE6h, 0E51CE1EDh
		dd 0F207F3F0h, 0FF0EFDFBh, 0B479A792h, 0B970A999h, 0AE6BBB84h
		dd 0A362B58Fh, 805D9FBEh, 8D5491B5h, 9A4F83A8h,	97468DA3h
dword_10042B00	dd 0			; DATA XREF: sub_1000FA60+4Fr
					; sub_1000FA60+7Cr ...
		dd 90E0B0Dh, 121C161Ah,	1B121D17h, 24382C34h, 2D362739h
		dd 36243A2Eh, 3F2A3123h, 48705868h, 417E5365h, 5A6C4E72h
		dd 5362457Fh, 6C48745Ch, 65467F51h, 7E546246h, 775A694Bh
		dd 90E0B0D0h, 99EEBBDDh, 82FCA6CAh, 8BF2ADC7h, 0B4D89CE4h
		dd 0BDD697E9h, 0A6C48AFEh, 0AFCA81F3h, 0D890E8B8h, 0D19EE3B5h
		dd 0CA8CFEA2h, 0C382F5AFh, 0FCA8C48Ch, 0F5A6CF81h, 0EEB4D296h
		dd 0E7BAD99Bh, 3BDB7BBBh, 32D570B6h, 29C76DA1h,	20C966ACh
		dd 1FE3578Fh, 16ED5C82h, 0DFF4195h, 4F14A98h, 73AB23D3h
		dd 7AA528DEh, 61B735C9h, 68B93EC4h, 57930FE7h, 5E9D04EAh
		dd 458F19FDh, 4C8112F0h, 0AB3BCB6Bh, 0A235C066h, 0B927DD71h
		dd 0B029D67Ch, 8F03E75Fh, 860DEC52h, 9D1FF145h,	9411FA48h
		dd 0E34B9303h, 0EA45980Eh, 0F1578519h, 0F8598E14h, 0C773BF37h
		dd 0CE7DB43Ah, 0D56FA92Dh, 0DC61A220h, 76ADF66Dh, 7FA3FD60h
		dd 64B1E077h, 6DBFEB7Ah, 5295DA59h, 5B9BD154h, 4089CC43h
		dd 4987C74Eh, 3EDDAE05h, 37D3A508h, 2CC1B81Fh, 25CFB312h
		dd 1AE58231h, 13EB893Ch, 8F9942Bh, 1F79F26h, 0E64D46BDh
		dd 0EF434DB0h, 0F45150A7h, 0FD5F5BAAh, 0C2756A89h, 0CB7B6184h
		dd 0D0697C93h, 0D967779Eh, 0AE3D1ED5h, 0A73315D8h, 0BC2108CFh
		dd 0B52F03C2h, 8A0532E1h, 830B39ECh, 981924FBh,	91172FF6h
		dd 4D768DD6h, 447886DBh, 5F6A9BCCh, 566490C1h, 694EA1E2h
		dd 6040AAEFh, 7B52B7F8h, 725CBCF5h, 506D5BEh, 0C08DEB3h
		dd 171AC3A4h, 1E14C8A9h, 213EF98Ah, 2830F287h, 3322EF90h
		dd 3A2CE49Dh, 0DD963D06h, 0D498360Bh, 0CF8A2B1Ch, 0C6842011h
		dd 0F9AE1132h, 0F0A01A3Fh, 0EBB20728h, 0E2BC0C25h, 95E6656Eh
		dd 9CE86E63h, 87FA7374h, 8EF47879h, 0B1DE495Ah,	0B8D04257h
		dd 0A3C25F40h, 0AACC544Dh, 0EC41F7DAh, 0E54FFCD7h, 0FE5DE1C0h
		dd 0F753EACDh, 0C879DBEEh, 0C177D0E3h, 0DA65CDF4h, 0D36BC6F9h
		dd 0A431AFB2h, 0AD3FA4BFh, 0B62DB9A8h, 0BF23B2A5h, 80098386h
		dd 8907888Bh, 9215959Ch, 9B1B9E91h, 7CA1470Ah, 75AF4C07h
		dd 6EBD5110h, 67B35A1Dh, 58996B3Eh, 51976033h, 4A857D24h
		dd 438B7629h, 34D11F62h, 3DDF146Fh, 26CD0978h, 2FC30275h
		dd 10E93356h, 19E7385Bh, 2F5254Ch, 0BFB2E41h, 0D79A8C61h
		dd 0DE94876Ch, 0C5869A7Bh, 0CC889176h, 0F3A2A055h, 0FAACAB58h
		dd 0E1BEB64Fh, 0E8B0BD42h, 9FEAD409h, 96E4DF04h, 8DF6C213h
		dd 84F8C91Eh, 0BBD2F83Dh, 0B2DCF330h, 0A9CEEE27h, 0A0C0E52Ah
		dd 477A3CB1h, 4E7437BCh, 55662AABh, 5C6821A6h, 63421085h
		dd 6A4C1B88h, 715E069Fh, 78500D92h, 0F0A64D9h, 6046FD4h
		dd 1D1672C3h, 141879CEh, 2B3248EDh, 223C43E0h, 392E5EF7h
		dd 302055FAh, 9AEC01B7h, 93E20ABAh, 88F017ADh, 81FE1CA0h
		dd 0BED42D83h, 0B7DA268Eh, 0ACC83B99h, 0A5C63094h, 0D29C59DFh
		dd 0DB9252D2h, 0C0804FC5h, 0C98E44C8h, 0F6A475EBh, 0FFAA7EE6h
		dd 0E4B863F1h, 0EDB668FCh, 0A0CB167h, 302BA6Ah,	1810A77Dh
		dd 111EAC70h, 2E349D53h, 273A965Eh, 3C288B49h, 35268044h
		dd 427CE90Fh, 4B72E202h, 5060FF15h, 596EF418h, 6644C53Bh
		dd 6F4ACE36h, 7458D321h, 7D56D82Ch, 0A1377A0Ch,	0A8397101h
		dd 0B32B6C16h, 0BA25671Bh, 850F5638h, 8C015D35h, 97134022h
		dd 9E1D4B2Fh, 0E9472264h, 0E0492969h, 0FB5B347Eh, 0F2553F73h
		dd 0CD7F0E50h, 0C471055Dh, 0DF63184Ah, 0D66D1347h, 31D7CADCh
		dd 38D9C1D1h, 23CBDCC6h, 2AC5D7CBh, 15EFE6E8h, 1CE1EDE5h
		dd 7F3F0F2h, 0EFDFBFFh,	79A792B4h, 70A999B9h, 6BBB84AEh
		dd 62B58FA3h, 5D9FBE80h, 5491B58Dh, 4F83A89Ah, 468DA397h
dword_10042F00	dd 0			; DATA XREF: sub_1000FA60+48r
					; sub_1000FA60+75r ...
		dd 0E0B0D09h, 1C161A12h, 121D171Bh, 382C3424h, 3627392Dh
		dd 243A2E36h, 2A31233Fh, 70586848h, 7E536541h, 6C4E725Ah
		dd 62457F53h, 48745C6Ch, 467F5165h, 5462467Eh, 5A694B77h
		dd 0E0B0D090h, 0EEBBDD99h, 0FCA6CA82h, 0F2ADC78Bh, 0D89CE4B4h
		dd 0D697E9BDh, 0C48AFEA6h, 0CA81F3AFh, 90E8B8D8h, 9EE3B5D1h
		dd 8CFEA2CAh, 82F5AFC3h, 0A8C48CFCh, 0A6CF81F5h, 0B4D296EEh
		dd 0BAD99BE7h, 0DB7BBB3Bh, 0D570B632h, 0C76DA129h, 0C966AC20h
		dd 0E3578F1Fh, 0ED5C8216h, 0FF41950Dh, 0F14A9804h, 0AB23D373h
		dd 0A528DE7Ah, 0B735C961h, 0B93EC468h, 930FE757h, 9D04EA5Eh
		dd 8F19FD45h, 8112F04Ch, 3BCB6BABh, 35C066A2h, 27DD71B9h
		dd 29D67CB0h, 3E75F8Fh,	0DEC5286h, 1FF1459Dh, 11FA4894h
		dd 4B9303E3h, 45980EEAh, 578519F1h, 598E14F8h, 73BF37C7h
		dd 7DB43ACEh, 6FA92DD5h, 61A220DCh, 0ADF66D76h,	0A3FD607Fh
		dd 0B1E07764h, 0BFEB7A6Dh, 95DA5952h, 9BD1545Bh, 89CC4340h
		dd 87C74E49h, 0DDAE053Eh, 0D3A50837h, 0C1B81F2Ch, 0CFB31225h
		dd 0E582311Ah, 0EB893C13h, 0F9942B08h, 0F79F2601h, 4D46BDE6h
		dd 434DB0EFh, 5150A7F4h, 5F5BAAFDh, 756A89C2h, 7B6184CBh
		dd 697C93D0h, 67779ED9h, 3D1ED5AEh, 3315D8A7h, 2108CFBCh
		dd 2F03C2B5h, 532E18Ah,	0B39EC83h, 1924FB98h, 172FF691h
		dd 768DD64Dh, 7886DB44h, 6A9BCC5Fh, 6490C156h, 4EA1E269h
		dd 40AAEF60h, 52B7F87Bh, 5CBCF572h, 6D5BE05h, 8DEB30Ch
		dd 1AC3A417h, 14C8A91Eh, 3EF98A21h, 30F28728h, 22EF9033h
		dd 2CE49D3Ah, 963D06DDh, 98360BD4h, 8A2B1CCFh, 842011C6h
		dd 0AE1132F9h, 0A01A3FF0h, 0B20728EBh, 0BC0C25E2h, 0E6656E95h
		dd 0E86E639Ch, 0FA737487h, 0F478798Eh, 0DE495AB1h, 0D04257B8h
		dd 0C25F40A3h, 0CC544DAAh, 41F7DAECh, 4FFCD7E5h, 5DE1C0FEh
		dd 53EACDF7h, 79DBEEC8h, 77D0E3C1h, 65CDF4DAh, 6BC6F9D3h
		dd 31AFB2A4h, 3FA4BFADh, 2DB9A8B6h, 23B2A5BFh, 9838680h
		dd 7888B89h, 15959C92h,	1B9E919Bh, 0A1470A7Ch, 0AF4C0775h
		dd 0BD51106Eh, 0B35A1D67h, 996B3E58h, 97603351h, 857D244Ah
		dd 8B762943h, 0D11F6234h, 0DF146F3Dh, 0CD097826h, 0C302752Fh
		dd 0E9335610h, 0E7385B19h, 0F5254C02h, 0FB2E410Bh, 9A8C61D7h
		dd 94876CDEh, 869A7BC5h, 889176CCh, 0A2A055F3h,	0ACAB58FAh
		dd 0BEB64FE1h, 0B0BD42E8h, 0EAD4099Fh, 0E4DF0496h, 0F6C2138Dh
		dd 0F8C91E84h, 0D2F83DBBh, 0DCF330B2h, 0CEEE27A9h, 0C0E52AA0h
		dd 7A3CB147h, 7437BC4Eh, 662AAB55h, 6821A65Ch, 42108563h
		dd 4C1B886Ah, 5E069F71h, 500D9278h, 0A64D90Fh, 46FD406h
		dd 1672C31Dh, 1879CE14h, 3248ED2Bh, 3C43E022h, 2E5EF739h
		dd 2055FA30h, 0EC01B79Ah, 0E20ABA93h, 0F017AD88h, 0FE1CA081h
		dd 0D42D83BEh, 0DA268EB7h, 0C83B99ACh, 0C63094A5h, 9C59DFD2h
		dd 9252D2DBh, 804FC5C0h, 8E44C8C9h, 0A475EBF6h,	0AA7EE6FFh
		dd 0B863F1E4h, 0B668FCEDh, 0CB1670Ah, 2BA6A03h,	10A77D18h
		dd 1EAC7011h, 349D532Eh, 3A965E27h, 288B493Ch, 26804435h
		dd 7CE90F42h, 72E2024Bh, 60FF1550h, 6EF41859h, 44C53B66h
		dd 4ACE366Fh, 58D32174h, 56D82C7Dh, 377A0CA1h, 397101A8h
		dd 2B6C16B3h, 25671BBAh, 0F563885h, 15D358Ch, 13402297h
		dd 1D4B2F9Eh, 472264E9h, 492969E0h, 5B347EFBh, 553F73F2h
		dd 7F0E50CDh, 71055DC4h, 63184ADFh, 6D1347D6h, 0D7CADC31h
		dd 0D9C1D138h, 0CBDCC623h, 0C5D7CB2Ah, 0EFE6E815h, 0E1EDE51Ch
		dd 0F3F0F207h, 0FDFBFF0Eh, 0A792B479h, 0A999B970h, 0BB84AE6Bh
		dd 0B58FA362h, 9FBE805Dh, 91B58D54h, 83A89A4Fh
dword_100432FC	dd 8DA39746h		; DATA XREF: sub_1000FC60+C9r
					; sub_1000FC60+210r ...
		dd 1, 2, 4, 8, 10h, 20h, 40h, 80h, 1Bh,	36h, 6Ch, 0D8h
		dd 0ABh, 4Dh, 9Ah, 2Fh,	5Eh, 0BCh, 63h,	0C6h, 97h, 35h
		dd 6Ah,	0D4h, 0B3h, 7Dh, 0FAh, 0EFh, 0C5h, 91h
; char aNss_disable_hw[]
aNss_disable_hw	db 'NSS_DISABLE_HW_AES',0 ; DATA XREF: sub_1000EE40+87o
		align 10h
dword_10043390	dd 70707000h		; DATA XREF: sub_100109B0+3Ar
					; sub_100109B0+A9r ...
		dd 82828200h, 2C2C2C00h, 0ECECEC00h, 0B3B3B300h, 27272700h
		dd 0C0C0C000h, 0E5E5E500h, 0E4E4E400h, 85858500h, 57575700h
		dd 35353500h, 0EAEAEA00h, 0C0C0C00h, 0AEAEAE00h, 41414100h
		dd 23232300h, 0EFEFEF00h, 6B6B6B00h, 93939300h,	45454500h
		dd 19191900h, 0A5A5A500h, 21212100h, 0EDEDED00h, 0E0E0E00h
		dd 4F4F4F00h, 4E4E4E00h, 1D1D1D00h, 65656500h, 92929200h
		dd 0BDBDBD00h, 86868600h, 0B8B8B800h, 0AFAFAF00h, 8F8F8F00h
		dd 7C7C7C00h, 0EBEBEB00h, 1F1F1F00h, 0CECECE00h, 3E3E3E00h
		dd 30303000h, 0DCDCDC00h, 5F5F5F00h, 5E5E5E00h,	0C5C5C500h
		dd 0B0B0B00h, 1A1A1A00h, 0A6A6A600h, 0E1E1E100h, 39393900h
		dd 0CACACA00h, 0D5D5D500h, 47474700h, 5D5D5D00h, 3D3D3D00h
		dd 0D9D9D900h, 1010100h, 5A5A5A00h, 0D6D6D600h,	51515100h
		dd 56565600h, 6C6C6C00h, 4D4D4D00h, 8B8B8B00h, 0D0D0D00h
		dd 9A9A9A00h, 66666600h, 0FBFBFB00h, 0CCCCCC00h, 0B0B0B000h
		dd 2D2D2D00h, 74747400h, 12121200h, 2B2B2B00h, 20202000h
		dd 0F0F0F000h, 0B1B1B100h, 84848400h, 99999900h, 0DFDFDF00h
		dd 4C4C4C00h, 0CBCBCB00h, 0C2C2C200h, 34343400h, 7E7E7E00h
		dd 76767600h, 5050500h,	6D6D6D00h, 0B7B7B700h, 0A9A9A900h
		dd 31313100h, 0D1D1D100h, 17171700h, 4040400h, 0D7D7D700h
		dd 14141400h, 58585800h, 3A3A3A00h, 61616100h, 0DEDEDE00h
		dd 1B1B1B00h, 11111100h, 1C1C1C00h, 32323200h, 0F0F0F00h
		dd 9C9C9C00h, 16161600h, 53535300h, 18181800h, 0F2F2F200h
		dd 22222200h, 0FEFEFE00h, 44444400h, 0CFCFCF00h, 0B2B2B200h
		dd 0C3C3C300h, 0B5B5B500h, 7A7A7A00h, 91919100h, 24242400h
		dd 8080800h, 0E8E8E800h, 0A8A8A800h, 60606000h,	0FCFCFC00h
		dd 69696900h, 50505000h, 0AAAAAA00h, 0D0D0D000h, 0A0A0A000h
		dd 7D7D7D00h, 0A1A1A100h, 89898900h, 62626200h,	97979700h
		dd 54545400h, 5B5B5B00h, 1E1E1E00h, 95959500h, 0E0E0E000h
		dd 0FFFFFF00h, 64646400h, 0D2D2D200h, 10101000h, 0C4C4C400h
		dd 0
		dd 48484800h, 0A3A3A300h, 0F7F7F700h, 75757500h, 0DBDBDB00h
		dd 8A8A8A00h, 3030300h,	0E6E6E600h, 0DADADA00h,	9090900h
		dd 3F3F3F00h, 0DDDDDD00h, 94949400h, 87878700h,	5C5C5C00h
		dd 83838300h, 2020200h,	0CDCDCD00h, 4A4A4A00h, 90909000h
		dd 33333300h, 73737300h, 67676700h, 0F6F6F600h,	0F3F3F300h
		dd 9D9D9D00h, 7F7F7F00h, 0BFBFBF00h, 0E2E2E200h, 52525200h
		dd 9B9B9B00h, 0D8D8D800h, 26262600h, 0C8C8C800h, 37373700h
		dd 0C6C6C600h, 3B3B3B00h, 81818100h, 96969600h,	6F6F6F00h
		dd 4B4B4B00h, 13131300h, 0BEBEBE00h, 63636300h,	2E2E2E00h
		dd 0E9E9E900h, 79797900h, 0A7A7A700h, 8C8C8C00h, 9F9F9F00h
		dd 6E6E6E00h, 0BCBCBC00h, 8E8E8E00h, 29292900h,	0F5F5F500h
		dd 0F9F9F900h, 0B6B6B600h, 2F2F2F00h, 0FDFDFD00h, 0B4B4B400h
		dd 59595900h, 78787800h, 98989800h, 6060600h, 6A6A6A00h
		dd 0E7E7E700h, 46464600h, 71717100h, 0BABABA00h, 0D4D4D400h
		dd 25252500h, 0ABABAB00h, 42424200h, 88888800h,	0A2A2A200h
		dd 8D8D8D00h, 0FAFAFA00h, 72727200h, 7070700h, 0B9B9B900h
		dd 55555500h, 0F8F8F800h, 0EEEEEE00h, 0ACACAC00h, 0A0A0A00h
		dd 36363600h, 49494900h, 2A2A2A00h, 68686800h, 3C3C3C00h
		dd 38383800h, 0F1F1F100h, 0A4A4A400h, 40404000h, 28282800h
		dd 0D3D3D300h, 7B7B7B00h, 0BBBBBB00h, 0C9C9C900h, 43434300h
		dd 0C1C1C100h, 15151500h, 0E3E3E300h, 0ADADAD00h, 0F4F4F400h
		dd 77777700h, 0C7C7C700h, 80808000h, 9E9E9E00h
dword_10043790	dd 0E0E0E0h		; DATA XREF: sub_100109B0+45r
					; sub_100109B0+78r ...
		dd 50505h, 585858h, 0D9D9D9h, 676767h, 4E4E4Eh,	818181h
		dd 0CBCBCBh, 0C9C9C9h, 0B0B0Bh,	0AEAEAEh, 6A6A6Ah, 0D5D5D5h
		dd 181818h, 5D5D5Dh, 828282h, 464646h, 0DFDFDFh, 0D6D6D6h
		dd 272727h, 8A8A8Ah, 323232h, 4B4B4Bh, 424242h,	0DBDBDBh
		dd 1C1C1Ch, 9E9E9Eh, 9C9C9Ch, 3A3A3Ah, 0CACACAh, 252525h
		dd 7B7B7Bh, 0D0D0Dh, 717171h, 5F5F5Fh, 1F1F1Fh,	0F8F8F8h
		dd 0D7D7D7h, 3E3E3Eh, 9D9D9Dh, 7C7C7Ch,	606060h, 0B9B9B9h
		dd 0BEBEBEh, 0BCBCBCh, 8B8B8Bh,	161616h, 343434h, 4D4D4Dh
		dd 0C3C3C3h, 727272h, 959595h, 0ABABABh, 8E8E8Eh, 0BABABAh
		dd 7A7A7Ah, 0B3B3B3h, 20202h, 0B4B4B4h,	0ADADADh, 0A2A2A2h
		dd 0ACACACh, 0D8D8D8h, 9A9A9Ah,	171717h, 1A1A1Ah, 353535h
		dd 0CCCCCCh, 0F7F7F7h, 999999h,	616161h, 5A5A5Ah, 0E8E8E8h
		dd 242424h, 565656h, 404040h, 0E1E1E1h,	636363h, 90909h
		dd 333333h, 0BFBFBFh, 989898h, 979797h,	858585h, 686868h
		dd 0FCFCFCh, 0ECECECh, 0A0A0Ah,	0DADADAh, 6F6F6Fh, 535353h
		dd 626262h, 0A3A3A3h, 2E2E2Eh, 80808h, 0AFAFAFh, 282828h
		dd 0B0B0B0h, 747474h, 0C2C2C2h,	0BDBDBDh, 363636h, 222222h
		dd 383838h, 646464h, 1E1E1Eh, 393939h, 2C2C2Ch,	0A6A6A6h
		dd 303030h, 0E5E5E5h, 444444h, 0FDFDFDh, 888888h, 9F9F9Fh
		dd 656565h, 878787h, 6B6B6Bh, 0F4F4F4h,	232323h, 484848h
		dd 101010h, 0D1D1D1h, 515151h, 0C0C0C0h, 0F9F9F9h, 0D2D2D2h
		dd 0A0A0A0h, 555555h, 0A1A1A1h,	414141h, 0FAFAFAh, 434343h
		dd 131313h, 0C4C4C4h, 2F2F2Fh, 0A8A8A8h, 0B6B6B6h, 3C3C3Ch
		dd 2B2B2Bh, 0C1C1C1h, 0FFFFFFh,	0C8C8C8h, 0A5A5A5h, 202020h
		dd 898989h, 0
		dd 909090h, 474747h, 0EFEFEFh, 0EAEAEAh, 0B7B7B7h, 151515h
		dd 60606h, 0CDCDCDh, 0B5B5B5h, 121212h,	7E7E7Eh, 0BBBBBBh
		dd 292929h, 0F0F0Fh, 0B8B8B8h, 70707h, 40404h, 9B9B9Bh
		dd 949494h, 212121h, 666666h, 0E6E6E6h,	0CECECEh, 0EDEDEDh
		dd 0E7E7E7h, 3B3B3Bh, 0FEFEFEh,	7F7F7Fh, 0C5C5C5h, 0A4A4A4h
		dd 373737h, 0B1B1B1h, 4C4C4Ch, 919191h,	6E6E6Eh, 8D8D8Dh
		dd 767676h, 30303h, 2D2D2Dh, 0DEDEDEh, 969696h,	262626h
		dd 7D7D7Dh, 0C6C6C6h, 5C5C5Ch, 0D3D3D3h, 0F2F2F2h, 4F4F4Fh
		dd 191919h, 3F3F3Fh, 0DCDCDCh, 797979h,	1D1D1Dh, 525252h
		dd 0EBEBEBh, 0F3F3F3h, 6D6D6Dh,	5E5E5Eh, 0FBFBFBh, 696969h
		dd 0B2B2B2h, 0F0F0F0h, 313131h,	0C0C0Ch, 0D4D4D4h, 0CFCFCFh
		dd 8C8C8Ch, 0E2E2E2h, 757575h, 0A9A9A9h, 4A4A4Ah, 575757h
		dd 848484h, 111111h, 454545h, 1B1B1Bh, 0F5F5F5h, 0E4E4E4h
		dd 0E0E0Eh, 737373h, 0AAAAAAh, 0F1F1F1h, 0DDDDDDh, 595959h
		dd 141414h, 6C6C6Ch, 929292h, 545454h, 0D0D0D0h, 787878h
		dd 707070h, 0E3E3E3h, 494949h, 808080h,	505050h, 0A7A7A7h
		dd 0F6F6F6h, 777777h, 939393h, 868686h,	838383h, 2A2A2Ah
		dd 0C7C7C7h, 5B5B5Bh, 0E9E9E9h,	0EEEEEEh, 8F8F8Fh, 10101h
		dd 3D3D3Dh
dword_10043B90	dd 38003838h		; DATA XREF: sub_100109B0+60r
					; sub_100109B0+8Br ...
		dd 41004141h, 16001616h, 76007676h, 0D900D9D9h,	93009393h
		dd 60006060h, 0F200F2F2h, 72007272h, 0C200C2C2h, 0AB00ABABh
		dd 9A009A9Ah, 75007575h, 6000606h, 57005757h, 0A000A0A0h
		dd 91009191h, 0F700F7F7h, 0B500B5B5h, 0C900C9C9h, 0A200A2A2h
		dd 8C008C8Ch, 0D200D2D2h, 90009090h, 0F600F6F6h, 7000707h
		dd 0A700A7A7h, 27002727h, 8E008E8Eh, 0B200B2B2h, 49004949h
		dd 0DE00DEDEh, 43004343h, 5C005C5Ch, 0D700D7D7h, 0C700C7C7h
		dd 3E003E3Eh, 0F500F5F5h, 8F008F8Fh, 67006767h,	1F001F1Fh
		dd 18001818h, 6E006E6Eh, 0AF00AFAFh, 2F002F2Fh,	0E200E2E2h
		dd 85008585h, 0D000D0Dh, 53005353h, 0F000F0F0h,	9C009C9Ch
		dd 65006565h, 0EA00EAEAh, 0A300A3A3h, 0AE00AEAEh, 9E009E9Eh
		dd 0EC00ECECh, 80008080h, 2D002D2Dh, 6B006B6Bh,	0A800A8A8h
		dd 2B002B2Bh, 36003636h, 0A600A6A6h, 0C500C5C5h, 86008686h
		dd 4D004D4Dh, 33003333h, 0FD00FDFDh, 66006666h,	58005858h
		dd 96009696h, 3A003A3Ah, 9000909h, 95009595h, 10001010h
		dd 78007878h, 0D800D8D8h, 42004242h, 0CC00CCCCh, 0EF00EFEFh
		dd 26002626h, 0E500E5E5h, 61006161h, 1A001A1Ah,	3F003F3Fh
		dd 3B003B3Bh, 82008282h, 0B600B6B6h, 0DB00DBDBh, 0D400D4D4h
		dd 98009898h, 0E800E8E8h, 8B008B8Bh, 2000202h, 0EB00EBEBh
		dd 0A000A0Ah, 2C002C2Ch, 1D001D1Dh, 0B000B0B0h,	6F006F6Fh
		dd 8D008D8Dh, 88008888h, 0E000E0Eh, 19001919h, 87008787h
		dd 4E004E4Eh, 0B000B0Bh, 0A900A9A9h, 0C000C0Ch,	79007979h
		dd 11001111h, 7F007F7Fh, 22002222h, 0E700E7E7h,	59005959h
		dd 0E100E1E1h, 0DA00DADAh, 3D003D3Dh, 0C800C8C8h, 12001212h
		dd 4000404h, 74007474h,	54005454h, 30003030h, 7E007E7Eh
		dd 0B400B4B4h, 28002828h, 55005555h, 68006868h,	50005050h
		dd 0BE00BEBEh, 0D000D0D0h, 0C400C4C4h, 31003131h, 0CB00CBCBh
		dd 2A002A2Ah, 0AD00ADADh, 0F000F0Fh, 0CA00CACAh, 70007070h
		dd 0FF00FFFFh, 32003232h, 69006969h, 8000808h, 62006262h
		dd 0
		dd 24002424h, 0D100D1D1h, 0FB00FBFBh, 0BA00BABAh, 0ED00EDEDh
		dd 45004545h, 81008181h, 73007373h, 6D006D6Dh, 84008484h
		dd 9F009F9Fh, 0EE00EEEEh, 4A004A4Ah, 0C300C3C3h, 2E002E2Eh
		dd 0C100C1C1h, 1000101h, 0E600E6E6h, 25002525h,	48004848h
		dd 99009999h, 0B900B9B9h, 0B300B3B3h, 7B007B7Bh, 0F900F9F9h
		dd 0CE00CECEh, 0BF00BFBFh, 0DF00DFDFh, 71007171h, 29002929h
		dd 0CD00CDCDh, 6C006C6Ch, 13001313h, 64006464h,	9B009B9Bh
		dd 63006363h, 9D009D9Dh, 0C000C0C0h, 4B004B4Bh,	0B700B7B7h
		dd 0A500A5A5h, 89008989h, 5F005F5Fh, 0B100B1B1h, 17001717h
		dd 0F400F4F4h, 0BC00BCBCh, 0D300D3D3h, 46004646h, 0CF00CFCFh
		dd 37003737h, 5E005E5Eh, 47004747h, 94009494h, 0FA00FAFAh
		dd 0FC00FCFCh, 5B005B5Bh, 97009797h, 0FE00FEFEh, 5A005A5Ah
		dd 0AC00ACACh, 3C003C3Ch, 4C004C4Ch, 3000303h, 35003535h
		dd 0F300F3F3h, 23002323h, 0B800B8B8h, 5D005D5Dh, 6A006A6Ah
		dd 92009292h, 0D500D5D5h, 21002121h, 44004444h,	51005151h
		dd 0C600C6C6h, 7D007D7Dh, 39003939h, 83008383h,	0DC00DCDCh
		dd 0AA00AAAAh, 7C007C7Ch, 77007777h, 56005656h,	5000505h
		dd 1B001B1Bh, 0A400A4A4h, 15001515h, 34003434h,	1E001E1Eh
		dd 1C001C1Ch, 0F800F8F8h, 52005252h, 20002020h,	14001414h
		dd 0E900E9E9h, 0BD00BDBDh, 0DD00DDDDh, 0E400E4E4h, 0A100A1A1h
		dd 0E000E0E0h, 8A008A8Ah, 0F100F1F1h, 0D600D6D6h, 7A007A7Ah
		dd 0BB00BBBBh, 0E300E3E3h, 40004040h, 4F004F4Fh
dword_10043F90	dd 70700070h		; DATA XREF: sub_100109B0+6Fr
					; sub_100109B0+9Ar ...
		dd 2C2C002Ch, 0B3B300B3h, 0C0C000C0h, 0E4E400E4h, 57570057h
		dd 0EAEA00EAh, 0AEAE00AEh, 23230023h, 6B6B006Bh, 45450045h
		dd 0A5A500A5h, 0EDED00EDh, 4F4F004Fh, 1D1D001Dh, 92920092h
		dd 86860086h, 0AFAF00AFh, 7C7C007Ch, 1F1F001Fh,	3E3E003Eh
		dd 0DCDC00DCh, 5E5E005Eh, 0B0B000Bh, 0A6A600A6h, 39390039h
		dd 0D5D500D5h, 5D5D005Dh, 0D9D900D9h, 5A5A005Ah, 51510051h
		dd 6C6C006Ch, 8B8B008Bh, 9A9A009Ah, 0FBFB00FBh,	0B0B000B0h
		dd 74740074h, 2B2B002Bh, 0F0F000F0h, 84840084h,	0DFDF00DFh
		dd 0CBCB00CBh, 34340034h, 76760076h, 6D6D006Dh,	0A9A900A9h
		dd 0D1D100D1h, 4040004h, 14140014h, 3A3A003Ah, 0DEDE00DEh
		dd 11110011h, 32320032h, 9C9C009Ch, 53530053h, 0F2F200F2h
		dd 0FEFE00FEh, 0CFCF00CFh, 0C3C300C3h, 7A7A007Ah, 24240024h
		dd 0E8E800E8h, 60600060h, 69690069h, 0AAAA00AAh, 0A0A000A0h
		dd 0A1A100A1h, 62620062h, 54540054h, 1E1E001Eh,	0E0E000E0h
		dd 64640064h, 10100010h, 0
		dd 0A3A300A3h, 75750075h, 8A8A008Ah, 0E6E600E6h, 9090009h
		dd 0DDDD00DDh, 87870087h, 83830083h, 0CDCD00CDh, 90900090h
		dd 73730073h, 0F6F600F6h, 9D9D009Dh, 0BFBF00BFh, 52520052h
		dd 0D8D800D8h, 0C8C800C8h, 0C6C600C6h, 81810081h, 6F6F006Fh
		dd 13130013h, 63630063h, 0E9E900E9h, 0A7A700A7h, 9F9F009Fh
		dd 0BCBC00BCh, 29290029h, 0F9F900F9h, 2F2F002Fh, 0B4B400B4h
		dd 78780078h, 6060006h,	0E7E700E7h, 71710071h, 0D4D400D4h
		dd 0ABAB00ABh, 88880088h, 8D8D008Dh, 72720072h,	0B9B900B9h
		dd 0F8F800F8h, 0ACAC00ACh, 36360036h, 2A2A002Ah, 3C3C003Ch
		dd 0F1F100F1h, 40400040h, 0D3D300D3h, 0BBBB00BBh, 43430043h
		dd 15150015h, 0ADAD00ADh, 77770077h, 80800080h,	82820082h
		dd 0ECEC00ECh, 27270027h, 0E5E500E5h, 85850085h, 35350035h
		dd 0C0C000Ch, 41410041h, 0EFEF00EFh, 93930093h,	19190019h
		dd 21210021h, 0E0E000Eh, 4E4E004Eh, 65650065h, 0BDBD00BDh
		dd 0B8B800B8h, 8F8F008Fh, 0EBEB00EBh, 0CECE00CEh, 30300030h
		dd 5F5F005Fh, 0C5C500C5h, 1A1A001Ah, 0E1E100E1h, 0CACA00CAh
		dd 47470047h, 3D3D003Dh, 1010001h, 0D6D600D6h, 56560056h
		dd 4D4D004Dh, 0D0D000Dh, 66660066h, 0CCCC00CCh,	2D2D002Dh
		dd 12120012h, 20200020h, 0B1B100B1h, 99990099h,	4C4C004Ch
		dd 0C2C200C2h, 7E7E007Eh, 5050005h, 0B7B700B7h,	31310031h
		dd 17170017h, 0D7D700D7h, 58580058h, 61610061h,	1B1B001Bh
		dd 1C1C001Ch, 0F0F000Fh, 16160016h, 18180018h, 22220022h
		dd 44440044h, 0B2B200B2h, 0B5B500B5h, 91910091h, 8080008h
		dd 0A8A800A8h, 0FCFC00FCh, 50500050h, 0D0D000D0h, 7D7D007Dh
		dd 89890089h, 97970097h, 5B5B005Bh, 95950095h, 0FFFF00FFh
		dd 0D2D200D2h, 0C4C400C4h, 48480048h, 0F7F700F7h, 0DBDB00DBh
		dd 3030003h, 0DADA00DAh, 3F3F003Fh, 94940094h, 5C5C005Ch
		dd 2020002h, 4A4A004Ah,	33330033h, 67670067h, 0F3F300F3h
		dd 7F7F007Fh, 0E2E200E2h, 9B9B009Bh, 26260026h,	37370037h
		dd 3B3B003Bh, 96960096h, 4B4B004Bh, 0BEBE00BEh,	2E2E002Eh
		dd 79790079h, 8C8C008Ch, 6E6E006Eh, 8E8E008Eh, 0F5F500F5h
		dd 0B6B600B6h, 0FDFD00FDh, 59590059h, 98980098h, 6A6A006Ah
		dd 46460046h, 0BABA00BAh, 25250025h, 42420042h,	0A2A200A2h
		dd 0FAFA00FAh, 7070007h, 55550055h, 0EEEE00EEh,	0A0A000Ah
		dd 49490049h, 68680068h, 38380038h, 0A4A400A4h,	28280028h
		dd 7B7B007Bh, 0C9C900C9h, 0C1C100C1h, 0E3E300E3h, 0F4F400F4h
		dd 0C7C700C7h, 9E9E009Eh
off_10044390	dd offset aNistP256	; DATA XREF: .data:1004E00Co
					; "NIST-P256"
		dd 0
		dd 100h
		dd offset aFfffffff000000 ; "FFFFFFFF0000000100000000000000000000000"...
		dd offset aFfffffff0000_0 ; "FFFFFFFF0000000100000000000000000000000"...
		dd offset a5ac635d8aa3a93 ; "5AC635D8AA3A93E7B3EBBD55769886BC651D06B"...
		dd offset a6b17d1f2e12c42 ; "6B17D1F2E12C4247F8BCE6E563A440F277037D8"...
		dd offset a4fe342e2fe1a7f ; "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE335"...
		dd offset aFfffffff0000_1 ; "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAA"...
		dd 1
off_100443B8	dd offset aNistP384	; DATA XREF: .data:1004E010o
					; "NIST-P384"
		align 10h
		dd 180h
		dd offset aFfffffffffffff ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset aFfffffffffff_0 ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset aB3312fa7e23ee7 ; "B3312FA7E23EE7E4988E056BE3F82D19181D9C6"...
		dd offset aAa87ca22be8b05 ; "AA87CA22BE8B05378EB1C71EF320AD746E1D3B6"...
		dd offset a3617de4a96262c ; "3617DE4A96262C6F5D9E98BF9292DC29F8F41DB"...
		dd offset aFfffffffffff_1 ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd 1
off_100443E0	dd offset aNistP521	; DATA XREF: .data:1004E014o
					; "NIST-P521"
		align 8
		dd 209h
		dd offset a01ffffffffffff ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset a01ffffffffff_0 ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset a0051953eb9618e ; "0051953EB9618E1C9A1F929A21A0B68540EEA2D"...
		dd offset a00c6858e06b704 ; "00C6858E06B70404E9CD9E3ECB662395B4429C6"...
		dd offset a011839296a789a ; "011839296A789A3BC0045C8A5FB42C7D1BD998F"...
		dd offset a01ffffffffff_1 ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd 1
aNistP256	db 'NIST-P256',0        ; DATA XREF: .rdata:off_10044390o
					; .rdata:off_1004C6CCo
		align 8
aFfffffff000000	db 'FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF',0
					; DATA XREF: .rdata:1004439Co
					; .rdata:1004C6D8o
		align 10h
aFfffffff0000_0	db 'FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC',0
					; DATA XREF: .rdata:100443A0o
					; .rdata:1004C6DCo
		align 8
a5ac635d8aa3a93	db '5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B',0
					; DATA XREF: .rdata:100443A4o
					; .rdata:1004C6E0o
		align 10h
a6b17d1f2e12c42	db '6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296',0
					; DATA XREF: .rdata:100443A8o
					; .rdata:1004C6E4o
		align 8
a4fe342e2fe1a7f	db '4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5',0
					; DATA XREF: .rdata:100443ACo
					; .rdata:1004C6E8o
		align 10h
aFfffffff0000_1	db 'FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551',0
					; DATA XREF: .rdata:100443B0o
					; .rdata:1004C6ECo
		align 4
aNistP384	db 'NIST-P384',0        ; DATA XREF: .rdata:off_100443B8o
					; .rdata:off_1004C6F4o
		align 10h
aFfffffffffffff	db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF'
					; DATA XREF: .rdata:100443C4o
					; .rdata:1004C700o
		db 'FFFFFFF0000000000000000FFFFFFFF',0
		align 8
aFfffffffffff_0	db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF'
					; DATA XREF: .rdata:100443C8o
					; .rdata:1004C704o
		db 'FFFFFFF0000000000000000FFFFFFFC',0
		align 10h
aB3312fa7e23ee7	db 'B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC'
					; DATA XREF: .rdata:100443CCo
					; .rdata:1004C708o
		db '656398D8A2ED19D2A85C8EDD3EC2AEF',0
		align 8
aAa87ca22be8b05	db 'AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385'
					; DATA XREF: .rdata:100443D0o
					; .rdata:1004C70Co
		db '502F25DBF55296C3A545E3872760AB7',0
		align 10h
a3617de4a96262c	db '3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00'
					; DATA XREF: .rdata:100443D4o
					; .rdata:1004C710o
		db 'A60B1CE1D7E819D7A431D7C90EA0E5F',0
		align 8
aFfffffffffff_1	db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF5'
					; DATA XREF: .rdata:100443D8o
					; .rdata:1004C714o
		db '81A0DB248B0A77AECEC196ACCC52973',0
		align 4
aNistP521	db 'NIST-P521',0        ; DATA XREF: .rdata:off_100443E0o
					; .rdata:off_1004C71Co
		align 4
a01ffffffffffff	db '01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
					; DATA XREF: .rdata:100443ECo
					; .rdata:1004C728o
		db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
		db 'FF',0
		align 10h
a01ffffffffff_0	db '01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
					; DATA XREF: .rdata:100443F0o
					; .rdata:1004C72Co
		db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
		db 'FC',0
		align 4
a0051953eb9618e	db '0051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF10'
					; DATA XREF: .rdata:100443F4o
					; .rdata:1004C730o
		db '9E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F'
		db '00',0
		align 10h
a00c6858e06b704	db '00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3'
					; DATA XREF: .rdata:100443F8o
					; .rdata:1004C734o
		db 'DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD'
		db '66',0
		align 4
a011839296a789a	db '011839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E6'
					; DATA XREF: .rdata:100443FCo
					; .rdata:1004C738o
		db '62C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD166'
		db '50',0
		align 10h
a01ffffffffff_1	db '01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
					; DATA XREF: .rdata:10044400o
					; .rdata:1004C73Co
		db 'FFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E913864'
		db '09',0
		align 4
aGgen		db 'ggen',0             ; DATA XREF: sub_1001A550+13Bo
		align 10h
dword_10044B80	dd 2 dup(0)		; DATA XREF: sub_100210E0+9Do
					; sub_10021270+16Bo
; char a_dll[]
a_dll		db '.dll',0             ; DATA XREF: sub_100219D0+33o
		align 10h
dword_10044B90	dd 6B68632Eh		; DATA XREF: sub_100219D0+50r
byte_10044B94	db 0			; DATA XREF: sub_100219D0+5Br
		align 4
dword_10044B98	dd 2989A1A8h		; DATA XREF: sub_10022380+93r
					; sub_10022380+D6r ...
		dd 5858184h, 16C6D2D4h,	13C3D3D0h, 14445054h, 1D0D111Ch
		dd 2C8CA0ACh, 25052124h, 1D4D515Ch, 3434340h, 18081018h
		dd 1E0E121Ch, 11415150h, 3CCCF0FCh, 0ACAC2C8h, 23436360h
		dd 28082028h, 4444044h,	20002020h, 1D8D919Ch, 20C0E0E0h
		dd 22C2E2E0h, 8C8C0C8h,	17071314h, 2585A1A4h, 0F8F838Ch
		dd 3030300h, 3B4B7378h,	3B8BB3B8h, 13031310h, 12C2D2D0h
		dd 2ECEE2ECh, 30407070h, 0C8C808Ch, 3F0F333Ch, 2888A0A8h
		dd 32023230h, 1DCDD1DCh, 36C6F2F4h, 34447074h, 2CCCE0ECh
		dd 15859194h, 0B0B0308h, 17475354h, 1C4C505Ch, 1B4B5358h
		dd 3D8DB1BCh, 1010100h,	24042024h, 1C0C101Ch, 33437370h
		dd 18889098h, 10001010h, 0CCCC0CCh, 32C2F2F0h, 19C9D1D8h
		dd 2C0C202Ch, 27C7E3E4h, 32427270h, 3838380h, 1B8B9398h
		dd 11C1D1D0h, 6868284h,	9C9C1C8h, 20406060h, 10405050h
		dd 2383A3A0h, 2BCBE3E8h, 0D0D010Ch, 3686B2B4h, 1E8E929Ch
		dd 0F4F434Ch, 3787B3B4h, 1A4A5258h, 6C6C2C4h, 38487078h
		dd 2686A2A4h, 12021210h, 2F8FA3ACh, 15C5D1D4h, 21416160h
		dd 3C3C3C0h, 3484B0B4h,	1414140h, 12425250h, 3D4D717Ch
		dd 0D8D818Ch, 8080008h,	1F0F131Ch, 19899198h, 0
		dd 19091118h, 4040004h,	13435350h, 37C7F3F4h, 21C1E1E0h
		dd 3DCDF1FCh, 36467274h, 2F0F232Ch, 27072324h, 3080B0B0h
		dd 0B8B8388h, 0E0E020Ch, 2B8BA3A8h, 2282A2A0h, 2E4E626Ch
		dd 13839390h, 0D4D414Ch, 29496168h, 3C4C707Ch, 9090108h
		dd 0A0A0208h, 3F8FB3BCh, 2FCFE3ECh, 33C3F3F0h, 5C5C1C4h
		dd 7878384h, 14041014h,	3ECEF2FCh, 24446064h, 1ECED2DCh
		dd 2E0E222Ch, 0B4B4348h, 1A0A1218h, 6060204h, 21012120h
		dd 2B4B6368h, 26466264h, 2020200h, 35C5F1F4h, 12829290h
		dd 0A8A8288h, 0C0C000Ch, 3383B3B0h, 3E4E727Ch, 10C0D0D0h
		dd 3A4A7278h, 7474344h,	16869294h, 25C5E1E4h, 26062224h
		dd 808080h, 2D8DA1ACh, 1FCFD3DCh, 2181A1A0h, 30003030h
		dd 37073334h, 2E8EA2ACh, 36063234h, 15051114h, 22022220h
		dd 38083038h, 34C4F0F4h, 2787A3A4h, 5454144h, 0C4C404Ch
		dd 1818180h, 29C9E1E8h,	4848084h, 17879394h, 35053134h
		dd 0BCBC3C8h, 0ECEC2CCh, 3C0C303Ch, 31417170h, 11011110h
		dd 7C7C3C4h, 9898188h, 35457174h, 3BCBF3F8h, 1ACAD2D8h
		dd 38C8F0F8h, 14849094h, 19495158h, 2828280h, 4C4C0C4h
		dd 3FCFF3FCh, 9494148h,	39093138h, 27476364h, 0C0C0C0h
		dd 0FCFC3CCh, 17C7D3D4h, 3888B0B8h, 0F0F030Ch, 0E8E828Ch
		dd 2424240h, 23032320h,	11819190h, 2C4C606Ch, 1BCBD3D8h
		dd 2484A0A4h, 34043034h, 31C1F1F0h, 8484048h, 2C2C2C0h
		dd 2F4F636Ch, 3D0D313Ch, 2D0D212Ch, 404040h, 3E8EB2BCh
		dd 3E0E323Ch, 3C8CB0BCh, 1C1C1C0h, 2A8AA2A8h, 3A8AB2B8h
		dd 0E4E424Ch, 15455154h, 3B0B3338h, 1CCCD0DCh, 28486068h
		dd 3F4F737Ch, 1C8C909Ch, 18C8D0D8h, 0A4A4248h, 16465254h
		dd 37477374h, 2080A0A0h, 2DCDE1ECh, 6464244h, 3585B1B4h
		dd 2B0B2328h, 25456164h, 3ACAF2F8h, 23C3E3E0h, 3989B1B8h
		dd 3181B1B0h, 1F8F939Ch, 1E4E525Ch, 39C9F1F8h, 26C6E2E4h
		dd 3282B2B0h, 31013130h, 2ACAE2E8h, 2D4D616Ch, 1F4F535Ch
		dd 24C4E0E4h, 30C0F0F0h, 0DCDC1CCh, 8888088h, 16061214h
		dd 3A0A3238h, 18485058h, 14C4D0D4h, 22426260h, 29092128h
		dd 7070304h, 33033330h,	28C8E0E8h, 1B0B1318h, 5050104h
		dd 39497178h, 10809090h, 2A4A6268h, 2A0A2228h, 1A8A9298h
dword_10044F98	dd 38380830h		; DATA XREF: sub_10022380+7Dr
					; sub_10022380+BCr ...
		dd 0E828C8E0h, 2C2D0D21h, 0A42686A2h, 0CC0FCFC3h, 0DC1ECED2h
		dd 0B03383B3h, 0B83888B0h, 0AC2F8FA3h, 60204060h, 54154551h
		dd 0C407C7C3h, 44044440h, 6C2F4F63h, 682B4B63h,	581B4B53h
		dd 0C003C3C3h, 60224262h, 30330333h, 0B43585B1h, 28290921h
		dd 0A02080A0h, 0E022C2E2h, 0A42787A3h, 0D013C3D3h, 90118191h
		dd 10110111h, 4060602h,	1C1C0C10h, 0BC3C8CB0h, 34360632h
		dd 480B4B43h, 0EC2FCFE3h, 88088880h, 6C2C4C60h,	0A82888A0h
		dd 14170713h, 0C404C4C0h, 14160612h, 0F434C4F0h, 0C002C2C2h
		dd 44054541h, 0E021C1E1h, 0D416C6D2h, 3C3F0F33h, 3C3D0D31h
		dd 8C0E8E82h, 98188890h, 28280820h, 4C0E4E42h, 0F436C6F2h
		dd 3C3E0E32h, 0A42585A1h, 0F839C9F1h, 0C0D0D01h, 0DC1FCFD3h
		dd 0D818C8D0h, 282B0B23h, 64264662h, 783A4A72h,	24270723h
		dd 2C2F0F23h, 0F031C1F1h, 70324272h, 40024242h,	0D414C4D0h
		dd 40014141h, 0C000C0C0h, 70334373h, 64274763h,	0AC2C8CA0h
		dd 880B8B83h, 0F437C7F3h, 0AC2D8DA1h, 80008080h, 1C1F0F13h
		dd 0C80ACAC2h, 2C2C0C20h, 0A82A8AA2h, 34340430h, 0D012C2D2h
		dd 80B0B03h, 0EC2ECEE2h, 0E829C9E1h, 5C1D4D51h,	94148490h
		dd 18180810h, 0F838C8F0h, 54174753h, 0AC2E8EA2h, 8080800h
		dd 0C405C5C1h, 10130313h, 0CC0DCDC1h, 84068682h, 0B83989B1h
		dd 0FC3FCFF3h, 7C3D4D71h, 0C001C1C1h, 30310131h, 0F435C5F1h
		dd 880A8A82h, 682A4A62h, 0B03181B1h, 0D011C1D1h, 20200020h
		dd 0D417C7D3h, 20202h, 20220222h, 4040400h, 68284860h
		dd 70314171h, 4070703h,	0D81BCBD3h, 9C1D8D91h, 98198991h
		dd 60214161h, 0BC3E8EB2h, 0E426C6E2h, 58194951h, 0DC1DCDD1h
		dd 50114151h, 90108090h, 0DC1CCCD0h, 981A8A92h,	0A02383A3h
		dd 0A82B8BA3h, 0D010C0D0h, 80018181h, 0C0F0F03h, 44074743h
		dd 181A0A12h, 0E023C3E3h, 0EC2CCCE0h, 8C0D8D81h, 0BC3F8FB3h
		dd 94168692h, 783B4B73h, 5C1C4C50h, 0A02282A2h,	0A02181A1h
		dd 60234363h, 20230323h, 4C0D4D41h, 0C808C8C0h,	9C1E8E92h
		dd 9C1C8C90h, 383A0A32h, 0C0C0C00h, 2C2E0E22h, 0B83A8AB2h
		dd 6C2E4E62h, 9C1F8F93h, 581A4A52h, 0F032C2F2h,	90128292h
		dd 0F033C3F3h, 48094941h, 78384870h, 0CC0CCCC0h, 14150511h
		dd 0F83BCBF3h, 70304070h, 74354571h, 7C3F4F73h,	34350531h
		dd 10100010h, 30303h, 64244460h, 6C2D4D61h, 0C406C6C2h
		dd 74344470h, 0D415C5D1h, 0B43484B0h, 0E82ACAE2h, 8090901h
		dd 74364672h, 18190911h, 0FC3ECEF2h, 40004040h,	10120212h
		dd 0E020C0E0h, 0BC3D8DB1h, 4050501h, 0F83ACAF2h, 10101h
		dd 0F030C0F0h, 282A0A22h, 5C1E4E52h, 0A82989A1h, 54164652h
		dd 40034343h, 84058581h, 14140410h, 88098981h, 981B8B93h
		dd 0B03080B0h, 0E425C5E1h, 48084840h, 78394971h, 94178793h
		dd 0FC3CCCF0h, 1C1E0E12h, 80028282h, 20210121h,	8C0C8C80h
		dd 181B0B13h, 5C1F4F53h, 74374773h, 54144450h, 0B03282B2h
		dd 1C1D0D11h, 24250521h, 4C0F4F43h, 0
		dd 44064642h, 0EC2DCDE1h, 58184850h, 50124252h,	0E82BCBE3h
		dd 7C3E4E72h, 0D81ACAD2h, 0C809C9C1h, 0FC3DCDF1h, 30300030h
		dd 94158591h, 64254561h, 3C3C0C30h, 0B43686B2h,	0E424C4E0h
		dd 0B83B8BB3h, 7C3C4C70h, 0C0E0E02h, 50104050h,	38390931h
		dd 24260622h, 30320232h, 84048480h, 68294961h, 90138393h
		dd 34370733h, 0E427C7E3h, 24240420h, 0A42484A0h, 0C80BCBC3h
		dd 50134353h, 80A0A02h,	84078783h, 0D819C9D1h, 4C0C4C40h
		dd 80038383h, 8C0F8F83h, 0CC0ECEC2h, 383B0B33h,	480A4A42h
		dd 0B43787B3h
dword_10045398	dd 0A1A82989h		; DATA XREF: sub_10022380+76r
					; sub_10022380+B5r ...
		dd 81840585h, 0D2D416C6h, 0D3D013C3h, 50541444h, 111C1D0Dh
		dd 0A0AC2C8Ch, 21242505h, 515C1D4Dh, 43400343h,	10181808h
		dd 121C1E0Eh, 51501141h, 0F0FC3CCCh, 0C2C80ACAh, 63602343h
		dd 20282808h, 40440444h, 20202000h, 919C1D8Dh, 0E0E020C0h
		dd 0E2E022C2h, 0C0C808C8h, 13141707h, 0A1A42585h, 838C0F8Fh
		dd 3000303h, 73783B4Bh,	0B3B83B8Bh, 13101303h, 0D2D012C2h
		dd 0E2EC2ECEh, 70703040h, 808C0C8Ch, 333C3F0Fh,	0A0A82888h
		dd 32303202h, 0D1DC1DCDh, 0F2F436C6h, 70743444h, 0E0EC2CCCh
		dd 91941585h, 3080B0Bh,	53541747h, 505C1C4Ch, 53581B4Bh
		dd 0B1BC3D8Dh, 1000101h, 20242404h, 101C1C0Ch, 73703343h
		dd 90981888h, 10101000h, 0C0CC0CCCh, 0F2F032C2h, 0D1D819C9h
		dd 202C2C0Ch, 0E3E427C7h, 72703242h, 83800383h,	93981B8Bh
		dd 0D1D011C1h, 82840686h, 0C1C809C9h, 60602040h, 50501040h
		dd 0A3A02383h, 0E3E82BCBh, 10C0D0Dh, 0B2B43686h, 929C1E8Eh
		dd 434C0F4Fh, 0B3B43787h, 52581A4Ah, 0C2C406C6h, 70783848h
		dd 0A2A42686h, 12101202h, 0A3AC2F8Fh, 0D1D415C5h, 61602141h
		dd 0C3C003C3h, 0B0B43484h, 41400141h, 52501242h, 717C3D4Dh
		dd 818C0D8Dh, 80808h, 131C1F0Fh, 91981989h, 0
		dd 11181909h, 40404h, 53501343h, 0F3F437C7h, 0E1E021C1h
		dd 0F1FC3DCDh, 72743646h, 232C2F0Fh, 23242707h,	0B0B03080h
		dd 83880B8Bh, 20C0E0Eh,	0A3A82B8Bh, 0A2A02282h,	626C2E4Eh
		dd 93901383h, 414C0D4Dh, 61682949h, 707C3C4Ch, 1080909h
		dd 2080A0Ah, 0B3BC3F8Fh, 0E3EC2FCFh, 0F3F033C3h, 0C1C405C5h
		dd 83840787h, 10141404h, 0F2FC3ECEh, 60642444h,	0D2DC1ECEh
		dd 222C2E0Eh, 43480B4Bh, 12181A0Ah, 2040606h, 21202101h
		dd 63682B4Bh, 62642646h, 2000202h, 0F1F435C5h, 92901282h
		dd 82880A8Ah, 0C0C0Ch, 0B3B03383h, 727C3E4Eh, 0D0D010C0h
		dd 72783A4Ah, 43440747h, 92941686h, 0E1E425C5h,	22242606h
		dd 80800080h, 0A1AC2D8Dh, 0D3DC1FCFh, 0A1A02181h, 30303000h
		dd 33343707h, 0A2AC2E8Eh, 32343606h, 11141505h,	22202202h
		dd 30383808h, 0F0F434C4h, 0A3A42787h, 41440545h, 404C0C4Ch
		dd 81800181h, 0E1E829C9h, 80840484h, 93941787h,	31343505h
		dd 0C3C80BCBh, 0C2CC0ECEh, 303C3C0Ch, 71703141h, 11101101h
		dd 0C3C407C7h, 81880989h, 71743545h, 0F3F83BCBh, 0D2D81ACAh
		dd 0F0F838C8h, 90941484h, 51581949h, 82800282h,	0C0C404C4h
		dd 0F3FC3FCFh, 41480949h, 31383909h, 63642747h,	0C0C000C0h
		dd 0C3CC0FCFh, 0D3D417C7h, 0B0B83888h, 30C0F0Fh, 828C0E8Eh
		dd 42400242h, 23202303h, 91901181h, 606C2C4Ch, 0D3D81BCBh
		dd 0A0A42484h, 30343404h, 0F1F031C1h, 40480848h, 0C2C002C2h
		dd 636C2F4Fh, 313C3D0Dh, 212C2D0Dh, 40400040h, 0B2BC3E8Eh
		dd 323C3E0Eh, 0B0BC3C8Ch, 0C1C001C1h, 0A2A82A8Ah, 0B2B83A8Ah
		dd 424C0E4Eh, 51541545h, 33383B0Bh, 0D0DC1CCCh,	60682848h
		dd 737C3F4Fh, 909C1C8Ch, 0D0D818C8h, 42480A4Ah,	52541646h
		dd 73743747h, 0A0A02080h, 0E1EC2DCDh, 42440646h, 0B1B43585h
		dd 23282B0Bh, 61642545h, 0F2F83ACAh, 0E3E023C3h, 0B1B83989h
		dd 0B1B03181h, 939C1F8Fh, 525C1E4Eh, 0F1F839C9h, 0E2E426C6h
		dd 0B2B03282h, 31303101h, 0E2E82ACAh, 616C2D4Dh, 535C1F4Fh
		dd 0E0E424C4h, 0F0F030C0h, 0C1CC0DCDh, 80880888h, 12141606h
		dd 32383A0Ah, 50581848h, 0D0D414C4h, 62602242h,	21282909h
		dd 3040707h, 33303303h,	0E0E828C8h, 13181B0Bh, 1040505h
		dd 71783949h, 90901080h, 62682A4Ah, 22282A0Ah, 92981A8Ah
dword_10045798	dd 8303838h		; DATA XREF: sub_10022380+89r
					; sub_10022380+C8r ...
		dd 0C8E0E828h, 0D212C2Dh, 86A2A426h, 0CFC3CC0Fh, 0CED2DC1Eh
		dd 83B3B033h, 88B0B838h, 8FA3AC2Fh, 40606020h, 45515415h
		dd 0C7C3C407h, 44404404h, 4F636C2Fh, 4B63682Bh,	4B53581Bh
		dd 0C3C3C003h, 42626022h, 3333033h, 85B1B435h, 9212829h
		dd 80A0A020h, 0C2E2E022h, 87A3A427h, 0C3D3D013h, 81919011h
		dd 1111011h, 6020406h, 0C101C1Ch, 8CB0BC3Ch, 6323436h
		dd 4B43480Bh, 0CFE3EC2Fh, 88808808h, 4C606C2Ch,	88A0A828h
		dd 7131417h, 0C4C0C404h, 6121416h, 0C4F0F434h, 0C2C2C002h
		dd 45414405h, 0C1E1E021h, 0C6D2D416h, 0F333C3Fh, 0D313C3Dh
		dd 8E828C0Eh, 88909818h, 8202828h, 4E424C0Eh, 0C6F2F436h
		dd 0E323C3Eh, 85A1A425h, 0C9F1F839h, 0D010C0Dh,	0CFD3DC1Fh
		dd 0C8D0D818h, 0B23282Bh, 46626426h, 4A72783Ah,	7232427h
		dd 0F232C2Fh, 0C1F1F031h, 42727032h, 42424002h,	0C4D0D414h
		dd 41414001h, 0C0C0C000h, 43737033h, 47636427h,	8CA0AC2Ch
		dd 8B83880Bh, 0C7F3F437h, 8DA1AC2Dh, 80808000h,	0F131C1Fh
		dd 0CAC2C80Ah, 0C202C2Ch, 8AA2A82Ah, 4303434h, 0C2D2D012h
		dd 0B03080Bh, 0CEE2EC2Eh, 0C9E1E829h, 4D515C1Dh, 84909414h
		dd 8101818h, 0C8F0F838h, 47535417h, 8EA2AC2Eh, 8000808h
		dd 0C5C1C405h, 3131013h, 0CDC1CC0Dh, 86828406h,	89B1B839h
		dd 0CFF3FC3Fh, 4D717C3Dh, 0C1C1C001h, 1313031h,	0C5F1F435h
		dd 8A82880Ah, 4A62682Ah, 81B1B031h, 0C1D1D011h,	202020h
		dd 0C7D3D417h, 2020002h, 2222022h, 4000404h, 48606828h
		dd 41717031h, 7030407h,	0CBD3D81Bh, 8D919C1Dh, 89919819h
		dd 41616021h, 8EB2BC3Eh, 0C6E2E426h, 49515819h,	0CDD1DC1Dh
		dd 41515011h, 80909010h, 0CCD0DC1Ch, 8A92981Ah,	83A3A023h
		dd 8BA3A82Bh, 0C0D0D010h, 81818001h, 0F030C0Fh,	47434407h
		dd 0A12181Ah, 0C3E3E023h, 0CCE0EC2Ch, 8D818C0Dh, 8FB3BC3Fh
		dd 86929416h, 4B73783Bh, 4C505C1Ch, 82A2A022h, 81A1A021h
		dd 43636023h, 3232023h,	4D414C0Dh, 0C8C0C808h, 8E929C1Eh
		dd 8C909C1Ch, 0A32383Ah, 0C000C0Ch, 0E222C2Eh, 8AB2B83Ah
		dd 4E626C2Eh, 8F939C1Fh, 4A52581Ah, 0C2F2F032h,	82929012h
		dd 0C3F3F033h, 49414809h, 48707838h, 0CCC0CC0Ch, 5111415h
		dd 0CBF3F83Bh, 40707030h, 45717435h, 4F737C3Fh,	5313435h
		dd 101010h, 3030003h, 44606424h, 4D616C2Dh, 0C6C2C406h
		dd 44707434h, 0C5D1D415h, 84B0B434h, 0CAE2E82Ah, 9010809h
		dd 46727436h, 9111819h,	0CEF2FC3Eh, 40404000h, 2121012h
		dd 0C0E0E020h, 8DB1BC3Dh, 5010405h, 0CAF2F83Ah,	1010001h
		dd 0C0F0F030h, 0A22282Ah, 4E525C1Eh, 89A1A829h,	46525416h
		dd 43434003h, 85818405h, 4101414h, 89818809h, 8B93981Bh
		dd 80B0B030h, 0C5E1E425h, 48404808h, 49717839h,	87939417h
		dd 0CCF0FC3Ch, 0E121C1Eh, 82828002h, 1212021h, 8C808C0Ch
		dd 0B13181Bh, 4F535C1Fh, 47737437h, 44505414h, 82B2B032h
		dd 0D111C1Dh, 5212425h,	4F434C0Fh, 0
		dd 46424406h, 0CDE1EC2Dh, 48505818h, 42525012h,	0CBE3E82Bh
		dd 4E727C3Eh, 0CAD2D81Ah, 0C9C1C809h, 0CDF1FC3Dh, 303030h
		dd 85919415h, 45616425h, 0C303C3Ch, 86B2B436h, 0C4E0E424h
		dd 8BB3B83Bh, 4C707C3Ch, 0E020C0Eh, 40505010h, 9313839h
		dd 6222426h, 2323032h, 84808404h, 49616829h, 83939013h
		dd 7333437h, 0C7E3E427h, 4202424h, 84A0A424h, 0CBC3C80Bh
		dd 43535013h, 0A02080Ah, 87838407h, 0C9D1D819h,	4C404C0Ch
		dd 83838003h, 8F838C0Fh, 0CEC2CC0Eh, 0B33383Bh,	4A42480Ah
		dd 87B3B437h
dword_10045B98	dd 198Eh		; DATA XREF: sub_1001B3B0+24Cr
dword_10045B9C	dd 0			; DATA XREF: sub_1001B3B0+251r
dword_10045BA0	dd 2			; DATA XREF: sub_100263C0+2Bo
					; sub_100263C0+41r
dword_10045BA4	dd 3, 5, 7, 0Bh, 0Dh, 11h, 13h,	17h, 1Dh, 1Fh, 25h, 29h
					; DATA XREF: sub_100264B0+1BDo
		dd 2Bh,	2Fh, 35h, 3Bh, 3Dh, 43h, 47h, 49h, 4Fh,	53h, 59h
		dd 61h,	65h, 67h, 6Bh, 6Dh, 71h, 7Fh, 83h, 89h,	8Bh, 95h
		dd 97h,	9Dh, 0A3h, 0A7h, 0ADh, 0B3h, 0B5h, 0BFh, 0C1h
		dd 0C5h, 0C7h, 0D3h, 0DFh, 0E3h, 0E5h, 0E9h, 0EFh, 0F1h
		dd 0FBh, 101h, 107h, 10Dh, 10Fh, 115h, 119h, 11Bh, 125h
		dd 133h, 137h, 139h, 13Dh, 14Bh, 151h, 15Bh, 15Dh, 161h
		dd 167h, 16Fh, 175h, 17Bh, 17Fh, 185h, 18Dh, 191h, 199h
		dd 1A3h, 1A5h, 1AFh, 1B1h, 1B7h, 1BBh, 1C1h, 1C9h, 1CDh
		dd 1CFh, 1D3h, 1DFh, 1E7h, 1EBh, 1F3h, 1F7h, 1FDh, 209h
		dd 20Bh, 21Dh, 223h, 22Dh, 233h, 239h, 23Bh, 241h, 24Bh
		dd 251h, 257h, 259h, 25Fh, 265h, 269h, 26Bh, 277h, 281h
		dd 283h, 287h, 28Dh, 293h, 295h, 2A1h, 2A5h, 2ABh, 2B3h
		dd 2BDh, 2C5h, 2CFh, 2D7h, 2DDh, 2E3h, 2E7h, 2EFh, 2F5h
		dd 2F9h, 301h, 305h, 313h, 31Dh, 329h, 32Bh, 335h, 337h
		dd 33Bh, 33Dh, 347h, 355h, 359h, 35Bh, 35Fh, 36Dh, 371h
		dd 373h, 377h, 38Bh, 38Fh, 397h, 3A1h, 3A9h, 3ADh, 3B3h
		dd 3B9h, 3C7h, 3CBh, 3D1h, 3D7h, 3DFh, 3E5h, 3F1h, 3F5h
		dd 3FBh, 3FDh, 407h, 409h, 40Fh, 419h, 41Bh, 425h, 427h
		dd 42Dh, 43Fh, 443h, 445h, 449h, 44Fh, 455h, 45Dh, 463h
		dd 469h, 47Fh, 481h, 48Bh, 493h, 49Dh, 4A3h, 4A9h, 4B1h
		dd 4BDh, 4C1h, 4C7h, 4CDh, 4CFh, 4D5h, 4E1h, 4EBh, 4FDh
		dd 4FFh, 503h, 509h, 50Bh, 511h, 515h, 517h, 51Bh, 527h
		dd 529h, 52Fh, 551h, 557h, 55Dh, 565h, 577h, 581h, 58Fh
		dd 593h, 595h, 599h, 59Fh, 5A7h, 5ABh, 5ADh, 5B3h, 5BFh
		dd 5C9h, 5CBh, 5CFh, 5D1h, 5D5h, 5DBh, 5E7h, 5F3h, 5FBh
		dd 607h, 60Dh, 611h, 617h, 61Fh, 623h, 62Bh, 62Fh, 63Dh
		dd 641h, 647h, 649h, 64Dh, 653h, 655h, 65Bh, 665h, 679h
		dd 67Fh, 683h, 685h, 69Dh, 6A1h, 6A3h, 6ADh, 6B9h, 6BBh
		dd 6C5h, 6CDh, 6D3h, 6D9h, 6DFh, 6F1h, 6F7h, 6FBh, 6FDh
		dd 709h, 713h, 71Fh, 727h, 737h, 745h, 74Bh, 74Fh, 751h
		dd 755h, 757h, 761h, 76Dh, 773h, 779h, 78Bh, 78Dh, 79Dh
		dd 79Fh, 7B5h, 7BBh, 7C3h, 7C9h, 7CDh, 7CFh, 7D3h, 7DBh
		dd 7E1h, 7EBh, 7EDh, 7F7h, 805h, 80Fh, 815h, 821h, 823h
		dd 827h, 829h, 833h, 83Fh, 841h, 851h, 853h, 859h, 85Dh
		dd 85Fh, 869h, 871h, 883h, 89Bh, 89Fh, 8A5h, 8ADh, 8BDh
		dd 8BFh, 8C3h, 8CBh, 8DBh, 8DDh, 8E1h, 8E9h, 8EFh, 8F5h
		dd 8F9h, 905h, 907h, 91Dh, 923h, 925h, 92Bh, 92Fh, 935h
		dd 943h, 949h, 94Dh, 94Fh, 955h, 959h, 95Fh, 96Bh, 971h
		dd 977h, 985h, 989h, 98Fh, 99Bh, 9A3h, 9A9h, 9ADh, 9C7h
		dd 9D9h, 9E3h, 9EBh, 9EFh, 9F5h, 9F7h, 9FDh, 0A13h, 0A1Fh
		dd 0A21h, 0A31h, 0A39h,	0A3Dh, 0A49h, 0A57h, 0A61h, 0A63h
		dd 0A67h, 0A6Fh, 0A75h,	0A7Bh, 0A7Fh, 0A81h, 0A85h, 0A8Bh
		dd 0A93h, 0A97h, 0A99h,	0A9Fh, 0AA9h, 0AABh, 0AB5h, 0ABDh
		dd 0AC1h, 0ACFh, 0AD9h,	0AE5h, 0AE7h, 0AEDh, 0AF1h, 0AF3h
		dd 0B03h, 0B11h, 0B15h,	0B1Bh, 0B23h, 0B29h, 0B2Dh, 0B3Fh
		dd 0B47h, 0B51h, 0B57h,	0B5Dh, 0B65h, 0B6Fh, 0B7Bh, 0B89h
		dd 0B8Dh, 0B93h, 0B99h,	0B9Bh, 0BB7h, 0BB9h, 0BC3h, 0BCBh
		dd 0BCFh, 0BDDh, 0BE1h,	0BE9h, 0BF5h, 0BFBh, 0C07h, 0C0Bh
		dd 0C11h, 0C25h, 0C2Fh,	0C31h, 0C41h, 0C5Bh, 0C5Fh, 0C61h
		dd 0C6Dh, 0C73h, 0C77h,	0C83h, 0C89h, 0C91h, 0C95h, 0C9Dh
		dd 0CB3h, 0CB5h, 0CB9h,	0CBBh, 0CC7h, 0CE3h, 0CE5h, 0CEBh
		dd 0CF1h, 0CF7h, 0CFBh,	0D01h, 0D03h, 0D0Fh, 0D13h, 0D1Fh
		dd 0D21h, 0D2Bh, 0D2Dh,	0D3Dh, 0D3Fh, 0D4Fh, 0D55h, 0D69h
		dd 0D79h, 0D81h, 0D85h,	0D87h, 0D8Bh, 0D8Dh, 0DA3h, 0DABh
		dd 0DB7h, 0DBDh, 0DC7h,	0DC9h, 0DCDh, 0DD3h, 0DD5h, 0DDBh
		dd 0DE5h, 0DE7h, 0DF3h,	0DFDh, 0DFFh, 0E09h, 0E17h, 0E1Dh
		dd 0E21h, 0E27h, 0E2Fh,	0E35h, 0E3Bh, 0E4Bh, 0E57h, 0E59h
		dd 0E5Dh, 0E6Bh, 0E71h,	0E75h, 0E7Dh, 0E87h, 0E8Fh, 0E95h
		dd 0E9Bh, 0EB1h, 0EB7h,	0EB9h, 0EC3h, 0ED1h, 0ED5h, 0EDBh
		dd 0EEDh, 0EEFh, 0EF9h,	0F07h, 0F0Bh, 0F0Dh, 0F17h, 0F25h
		dd 0F29h, 0F31h, 0F43h,	0F47h, 0F4Dh, 0F4Fh, 0F53h, 0F59h
		dd 0F5Bh, 0F67h, 0F6Bh,	0F7Fh, 0F95h, 0FA1h, 0FA3h, 0FA7h
		dd 0FADh, 0FB3h, 0FB5h,	0FBBh, 0FD1h, 0FD3h, 0FD9h, 0FE9h
		dd 0FEFh, 0FFBh, 0FFDh,	1003h, 100Fh, 101Fh, 1021h, 1025h
		dd 102Bh, 1039h, 103Dh,	103Fh, 1051h, 1069h, 1073h, 1079h
		dd 107Bh, 1085h, 1087h,	1091h, 1093h, 109Dh, 10A3h, 10A5h
		dd 10AFh, 10B1h, 10BBh,	10C1h, 10C9h, 10E7h, 10F1h, 10F3h
		dd 10FDh, 1105h, 110Bh,	1115h, 1127h, 112Dh, 1139h, 1145h
		dd 1147h, 1159h, 115Fh,	1163h, 1169h, 116Fh, 1181h, 1183h
		dd 118Dh, 119Bh, 11A1h,	11A5h, 11A7h, 11ABh, 11C3h, 11C5h
		dd 11D1h, 11D7h, 11E7h,	11EFh, 11F5h, 11FBh, 120Dh, 121Dh
		dd 121Fh, 1223h, 1229h,	122Bh, 1231h, 1237h, 1241h, 1247h
		dd 1253h, 125Fh, 1271h,	1273h, 1279h, 127Dh, 128Fh, 1297h
		dd 12AFh, 12B3h, 12B5h,	12B9h, 12BFh, 12C1h, 12CDh, 12D1h
		dd 12DFh, 12FDh, 1307h,	130Dh, 1319h, 1327h, 132Dh, 1337h
		dd 1343h, 1345h, 1349h,	134Fh, 1357h, 135Dh, 1367h, 1369h
		dd 136Dh, 137Bh, 1381h,	1387h, 138Bh, 1391h, 1393h, 139Dh
		dd 139Fh, 13AFh, 13BBh,	13C3h, 13D5h, 13D9h, 13DFh, 13EBh
		dd 13EDh, 13F3h, 13F9h,	13FFh, 141Bh, 1421h, 142Fh, 1433h
		dd 143Bh, 1445h, 144Dh,	1459h, 146Bh, 146Fh, 1471h, 1475h
		dd 148Dh, 1499h, 149Fh,	14A1h, 14B1h, 14B7h, 14BDh, 14CBh
		dd 14D5h, 14E3h, 14E7h,	1505h, 150Bh, 1511h, 1517h, 151Fh
		dd 1525h, 1529h, 152Bh,	1537h, 153Dh, 1541h, 1543h, 1549h
		dd 155Fh, 1565h, 1567h,	156Bh, 157Dh, 157Fh, 1583h, 158Fh
		dd 1591h, 1597h, 159Bh,	15B5h, 15BBh, 15C1h, 15C5h, 15CDh
		dd 15D7h, 15F7h, 1607h,	1609h, 160Fh, 1613h, 1615h, 1619h
		dd 161Bh, 1625h, 1633h,	1639h, 163Dh, 1645h, 164Fh, 1655h
		dd 1669h, 166Dh, 166Fh,	1675h, 1693h, 1697h, 169Fh, 16A9h
		dd 16AFh, 16B5h, 16BDh,	16C3h, 16CFh, 16D3h, 16D9h, 16DBh
		dd 16E1h, 16E5h, 16EBh,	16EDh, 16F7h, 16F9h, 1709h, 170Fh
		dd 1723h, 1727h, 1733h,	1741h, 175Dh, 1763h, 1777h, 177Bh
		dd 178Dh, 1795h, 179Bh,	179Fh, 17A5h, 17B3h, 17B9h, 17BFh
		dd 17C9h, 17CBh, 17D5h,	17E1h, 17E9h, 17F3h, 17F5h, 17FFh
		dd 1807h, 1813h, 181Dh,	1835h, 1837h, 183Bh, 1843h, 1849h
		dd 184Dh, 1855h, 1867h,	1871h, 1877h, 187Dh, 187Fh, 1885h
		dd 188Fh, 189Bh, 189Dh,	18A7h, 18ADh, 18B3h, 18B9h, 18C1h
		dd 18C7h, 18D1h, 18D7h,	18D9h, 18DFh, 18E5h, 18EBh, 18F5h
		dd 18FDh, 1915h, 191Bh,	1931h, 1933h, 1945h, 1949h, 1951h
		dd 195Bh, 1979h, 1981h,	1993h, 1997h, 1999h, 19A3h, 19A9h
		dd 19ABh, 19B1h, 19B5h,	19C7h, 19CFh, 19DBh, 19EDh, 19FDh
		dd 1A03h, 1A05h, 1A11h,	1A17h, 1A21h, 1A23h, 1A2Dh, 1A2Fh
		dd 1A35h, 1A3Fh, 1A4Dh,	1A51h, 1A69h, 1A6Bh, 1A7Bh, 1A7Dh
		dd 1A87h, 1A89h, 1A93h,	1AA7h, 1AABh, 1AADh, 1AB1h, 1AB9h
		dd 1AC9h, 1ACFh, 1AD5h,	1AD7h, 1AE3h, 1AF3h, 1AFBh, 1AFFh
		dd 1B05h, 1B23h, 1B25h,	1B2Fh, 1B31h, 1B37h, 1B3Bh, 1B41h
		dd 1B47h, 1B4Fh, 1B55h,	1B59h, 1B65h, 1B6Bh, 1B73h, 1B7Fh
		dd 1B83h, 1B91h, 1B9Dh,	1BA7h, 1BBFh, 1BC5h, 1BD1h, 1BD7h
		dd 1BD9h, 1BEFh, 1BF7h,	1C09h, 1C13h, 1C19h, 1C27h, 1C2Bh
		dd 1C2Dh, 1C33h, 1C3Dh,	1C45h, 1C4Bh, 1C4Fh, 1C55h, 1C73h
		dd 1C81h, 1C8Bh, 1C8Dh,	1C99h, 1CA3h, 1CA5h, 1CB5h, 1CB7h
		dd 1CC9h, 1CE1h, 1CF3h,	1CF9h, 1D09h, 1D1Bh, 1D21h, 1D23h
		dd 1D35h, 1D39h, 1D3Fh,	1D41h, 1D4Bh, 1D53h, 1D5Dh, 1D63h
		dd 1D69h, 1D71h, 1D75h,	1D7Bh, 1D7Dh, 1D87h, 1D89h, 1D95h
		dd 1D99h, 1D9Fh, 1DA5h,	1DA7h, 1DB3h, 1DB7h, 1DC5h, 1DD7h
		dd 1DDBh, 1DE1h, 1DF5h,	1DF9h, 1E01h, 1E07h, 1E0Bh, 1E13h
		dd 1E17h, 1E25h, 1E2Bh,	1E2Fh, 1E3Dh, 1E49h, 1E4Dh, 1E4Fh
		dd 1E6Dh, 1E71h, 1E89h,	1E8Fh, 1E95h, 1EA1h, 1EADh, 1EBBh
		dd 1EC1h, 1EC5h, 1EC7h,	1ECBh, 1EDDh, 1EE3h, 1EEFh, 1EF7h
		dd 1EFDh, 1F01h, 1F0Dh,	1F0Fh, 1F1Bh, 1F39h, 1F49h, 1F4Bh
		dd 1F51h, 1F67h, 1F75h,	1F7Bh, 1F85h, 1F91h, 1F97h, 1F99h
		dd 1F9Dh, 1FA5h, 1FAFh,	1FB5h, 1FBBh, 1FD3h, 1FE1h, 1FE7h
		dd 1FEBh, 1FF3h, 1FFFh,	2011h, 201Bh, 201Dh, 2027h, 2029h
		dd 202Dh, 2033h, 2047h,	204Dh, 2051h, 205Fh, 2063h, 2065h
		dd 2069h, 2077h, 207Dh,	2089h, 20A1h, 20ABh, 20B1h, 20B9h
		dd 20C3h, 20C5h, 20E3h,	20E7h, 20EDh, 20EFh, 20FBh, 20FFh
		dd 210Dh, 2113h, 2135h,	2141h, 2149h, 214Fh, 2159h, 215Bh
		dd 215Fh, 2173h, 217Dh,	2185h, 2195h, 2197h, 21A1h, 21AFh
		dd 21B3h, 21B5h, 21C1h,	21C7h, 21D7h, 21DDh, 21E5h, 21E9h
		dd 21F1h, 21F5h, 21FBh,	2203h, 2209h, 220Fh, 221Bh, 2221h
		dd 2225h, 222Bh, 2231h,	2239h, 224Bh, 224Fh, 2263h, 2267h
		dd 2273h, 2275h, 227Fh,	2285h, 2287h, 2291h, 229Dh, 229Fh
		dd 22A3h, 22B7h, 22BDh,	22DBh, 22E1h, 22E5h, 22EDh, 22F7h
		dd 2303h, 2309h, 230Bh,	2327h, 2329h, 232Fh, 2333h, 2335h
		dd 2345h, 2351h, 2353h,	2359h, 2363h, 236Bh, 2383h, 238Fh
		dd 2395h, 23A7h, 23ADh,	23B1h, 23BFh, 23C5h, 23C9h, 23D5h
		dd 23DDh, 23E3h, 23EFh,	23F3h, 23F9h, 2405h, 240Bh, 2417h
		dd 2419h, 2429h, 243Dh,	2441h, 2443h, 244Dh, 245Fh, 2467h
		dd 246Bh, 2479h, 247Dh,	247Fh, 2485h, 249Bh, 24A1h, 24AFh
		dd 24B5h, 24BBh, 24C5h,	24CBh, 24CDh, 24D7h, 24D9h, 24DDh
		dd 24DFh, 24F5h, 24F7h,	24FBh, 2501h, 2507h, 2513h, 2519h
		dd 2527h, 2531h, 253Dh,	2543h, 254Bh, 254Fh, 2573h, 2581h
		dd 258Dh, 2593h, 2597h,	259Dh, 259Fh, 25ABh, 25B1h, 25BDh
		dd 25CDh, 25CFh, 25D9h,	25E1h, 25F7h, 25F9h, 2605h, 260Bh
		dd 260Fh, 2615h, 2627h,	2629h, 2635h, 263Bh, 263Fh, 264Bh
		dd 2653h, 2659h, 2665h,	2669h, 266Fh, 267Bh, 2681h, 2683h
		dd 268Fh, 269Bh, 269Fh,	26ADh, 26B3h, 26C3h, 26C9h, 26CBh
		dd 26D5h, 26DDh, 26EFh,	26F5h, 2717h, 2719h, 2735h, 2737h
		dd 274Dh, 2753h, 2755h,	275Fh, 276Bh, 276Dh, 2773h, 2777h
		dd 277Fh, 2795h, 279Bh,	279Dh, 27A7h, 27AFh, 27B3h, 27B9h
		dd 27C1h, 27C5h, 27D1h,	27E3h, 27EFh, 2803h, 2807h, 280Dh
		dd 2813h, 281Bh, 281Fh,	2821h, 2831h, 283Dh, 283Fh, 2849h
		dd 2851h, 285Bh, 285Dh,	2861h, 2867h, 2875h, 2881h, 2897h
		dd 289Fh, 28BBh, 28BDh,	28C1h, 28D5h, 28D9h, 28DBh, 28DFh
		dd 28EDh, 28F7h, 2903h,	2905h, 2911h, 2921h, 2923h, 293Fh
		dd 2947h, 295Dh, 2965h,	2969h, 296Fh, 2975h, 2983h, 2987h
		dd 298Fh, 299Bh, 29A1h,	29A7h, 29ABh, 29BFh, 29C3h, 29D5h
		dd 29D7h, 29E3h, 29E9h,	29EDh, 29F3h, 2A01h, 2A13h, 2A1Dh
		dd 2A25h, 2A2Fh, 2A4Fh,	2A55h, 2A5Fh, 2A65h, 2A6Bh, 2A6Dh
		dd 2A73h, 2A83h, 2A89h,	2A8Bh, 2A97h, 2A9Dh, 2AB9h, 2ABBh
		dd 2AC5h, 2ACDh, 2ADDh,	2AE3h, 2AEBh, 2AF1h, 2AFBh, 2B13h
		dd 2B27h, 2B31h, 2B33h,	2B3Dh, 2B3Fh, 2B4Bh, 2B4Fh, 2B55h
		dd 2B69h, 2B6Dh, 2B6Fh,	2B7Bh, 2B8Dh, 2B97h, 2B99h, 2BA3h
		dd 2BA5h, 2BA9h, 2BBDh,	2BCDh, 2BE7h, 2BEBh, 2BF3h, 2BF9h
		dd 2BFDh, 2C09h, 2C0Fh,	2C17h, 2C23h, 2C2Fh, 2C35h, 2C39h
		dd 2C41h, 2C57h, 2C59h,	2C69h, 2C77h, 2C81h, 2C87h, 2C93h
		dd 2C9Fh, 2CADh, 2CB3h,	2CB7h, 2CCBh, 2CCFh, 2CDBh, 2CE1h
		dd 2CE3h, 2CE9h, 2CEFh,	2CFFh, 2D07h, 2D1Dh, 2D1Fh, 2D3Bh
		dd 2D43h, 2D49h, 2D4Dh,	2D61h, 2D65h, 2D71h, 2D89h, 2D9Dh
		dd 2DA1h, 2DA9h, 2DB3h,	2DB5h, 2DC5h, 2DC7h, 2DD3h, 2DDFh
		dd 2E01h, 2E03h, 2E07h,	2E0Dh, 2E19h, 2E1Fh, 2E25h, 2E2Dh
		dd 2E33h, 2E37h, 2E39h,	2E3Fh, 2E57h, 2E5Bh, 2E6Fh, 2E79h
		dd 2E7Fh, 2E85h, 2E93h,	2E97h, 2E9Dh, 2EA3h, 2EA5h, 2EB1h
		dd 2EB7h, 2EC1h, 2EC3h,	2ECDh, 2ED3h, 2EE7h, 2EEBh, 2F05h
		dd 2F09h, 2F0Bh, 2F11h,	2F27h, 2F29h, 2F41h, 2F45h, 2F4Bh
		dd 2F4Dh, 2F51h, 2F57h,	2F6Fh, 2F75h, 2F7Dh, 2F81h, 2F83h
		dd 2FA5h, 2FABh, 2FB3h,	2FC3h, 2FCFh, 2FD1h, 2FDBh, 2FDDh
		dd 2FE7h, 2FEDh, 2FF5h,	2FF9h, 3001h, 300Dh, 3023h, 3029h
		dd 3037h, 303Bh, 3055h,	3059h, 305Bh, 3067h, 3071h, 3079h
		dd 307Dh, 3085h, 3091h,	3095h, 30A3h, 30A9h, 30B9h, 30BFh
		dd 30C7h, 30CBh, 30D1h,	30D7h, 30DFh, 30E5h, 30EFh, 30FBh
		dd 30FDh, 3103h, 3109h,	3119h, 3121h, 3127h, 312Dh, 3139h
		dd 3143h, 3145h, 314Bh,	315Dh, 3161h, 3167h, 316Dh, 3173h
		dd 317Fh, 3191h, 3199h,	319Fh, 31A9h, 31B1h, 31C3h, 31C7h
		dd 31D5h, 31DBh, 31EDh,	31F7h, 31FFh, 3209h, 3215h, 3217h
		dd 321Dh, 3229h, 3235h,	3259h, 325Dh, 3263h, 326Bh, 326Fh
		dd 3275h, 3277h, 327Bh,	328Dh, 3299h, 329Fh, 32A7h, 32ADh
		dd 32B3h, 32B7h, 32C9h,	32CBh, 32CFh, 32D1h, 32E9h, 32EDh
		dd 32F3h, 32F9h, 3307h,	3325h, 332Bh, 332Fh, 3335h, 3341h
		dd 3347h, 335Bh, 335Fh,	3367h, 336Bh, 3373h, 3379h, 337Fh
		dd 3383h, 33A1h, 33A3h,	33ADh, 33B9h, 33C1h, 33CBh, 33D3h
		dd 33EBh, 33F1h, 33FDh,	3401h, 340Fh, 3413h, 3419h, 341Bh
		dd 3437h, 3445h, 3455h,	3457h, 3463h, 3469h, 346Dh, 3481h
		dd 348Bh, 3491h, 3497h,	349Dh, 34A5h, 34AFh, 34BBh, 34C9h
		dd 34D3h, 34E1h, 34F1h,	34FFh, 3509h, 3517h, 351Dh, 352Dh
		dd 3533h, 353Bh, 3541h,	3551h, 3565h, 356Fh, 3571h, 3577h
		dd 357Bh, 357Dh, 3581h,	358Dh, 358Fh, 3599h, 359Bh, 35A1h
		dd 35B7h, 35BDh, 35BFh,	35C3h, 35D5h, 35DDh, 35E7h, 35EFh
		dd 3605h, 3607h, 3611h,	3623h, 3631h, 3635h, 3637h, 363Bh
		dd 364Dh, 364Fh, 3653h,	3659h, 3661h, 366Bh, 366Dh, 368Bh
		dd 368Fh, 36ADh, 36AFh,	36B9h, 36BBh, 36CDh, 36D1h, 36E3h
		dd 36E9h, 36F7h, 3701h,	3703h, 3707h, 371Bh, 373Fh, 3745h
		dd 3749h, 374Fh, 375Dh,	3761h, 3775h, 377Fh, 378Dh, 37A3h
		dd 37A9h, 37ABh, 37C9h,	37D5h, 37DFh, 37F1h, 37F3h, 37F7h
		dd 3805h, 380Bh, 3821h,	3833h, 3835h, 3841h, 3847h, 384Bh
		dd 3853h, 3857h, 385Fh,	3865h, 386Fh, 3871h, 387Dh, 388Fh
		dd 3899h, 38A7h, 38B7h,	38C5h, 38C9h, 38CFh, 38D5h, 38D7h
		dd 38DDh, 38E1h, 38E3h,	38FFh, 3901h, 391Dh, 3923h, 3925h
		dd 3929h, 392Fh, 393Dh,	3941h, 394Dh, 395Bh, 396Bh, 3979h
		dd 397Dh, 3983h, 398Bh,	3991h, 3995h, 399Bh, 39A1h, 39A7h
		dd 39AFh, 39B3h, 39BBh,	39BFh, 39CDh, 39DDh, 39E5h, 39EBh
		dd 39EFh, 39FBh, 3A03h,	3A13h, 3A15h, 3A1Fh, 3A27h, 3A2Bh
		dd 3A31h, 3A4Bh, 3A51h,	3A5Bh, 3A63h, 3A67h, 3A6Dh, 3A79h
		dd 3A87h, 3AA5h, 3AA9h,	3AB7h, 3ACDh, 3AD5h, 3AE1h, 3AE5h
		dd 3AEBh, 3AF3h, 3AFDh,	3B03h, 3B11h, 3B1Bh, 3B21h, 3B23h
		dd 3B2Dh, 3B39h, 3B45h,	3B53h, 3B59h, 3B5Fh, 3B71h, 3B7Bh
		dd 3B81h, 3B89h, 3B9Bh,	3B9Fh, 3BA5h, 3BA7h, 3BADh, 3BB7h
		dd 3BB9h, 3BC3h, 3BCBh,	3BD1h, 3BD7h, 3BE1h, 3BE3h, 3BF5h
		dd 3BFFh, 3C01h, 3C0Dh,	3C11h, 3C17h, 3C1Fh, 3C29h, 3C35h
		dd 3C43h, 3C4Fh, 3C53h,	3C5Bh, 3C65h, 3C6Bh, 3C71h, 3C85h
		dd 3C89h, 3C97h, 3CA7h,	3CB5h, 3CBFh, 3CC7h, 3CD1h, 3CDDh
		dd 3CDFh, 3CF1h, 3CF7h,	3D03h, 3D0Dh, 3D19h, 3D1Bh, 3D1Fh
		dd 3D21h, 3D2Dh, 3D33h,	3D37h, 3D3Fh, 3D43h, 3D6Fh, 3D73h
		dd 3D75h, 3D79h, 3D7Bh,	3D85h, 3D91h, 3D97h, 3D9Dh, 3DABh
		dd 3DAFh, 3DB5h, 3DBBh,	3DC1h, 3DC9h, 3DCFh, 3DF3h, 3E05h
		dd 3E09h, 3E0Fh, 3E11h,	3E1Dh, 3E23h, 3E29h, 3E2Fh, 3E33h
		dd 3E41h, 3E57h, 3E63h,	3E65h, 3E77h, 3E81h, 3E87h, 3EA1h
		dd 3EB9h, 3EBDh, 3EBFh,	3EC3h, 3EC5h, 3EC9h, 3ED7h, 3EDBh
		dd 3EE1h, 3EE7h, 3EEFh,	3EFFh, 3F0Bh, 3F0Dh, 3F37h, 3F3Bh
		dd 3F3Dh, 3F41h, 3F59h,	3F5Fh, 3F65h, 3F67h, 3F79h, 3F7Dh
		dd 3F8Bh, 3F91h, 3FADh,	3FBFh, 3FCDh, 3FD3h, 3FDDh, 3FE9h
		dd 3FEBh, 3FF1h, 3FFDh,	401Bh, 4021h, 4025h, 402Bh, 4031h
		dd 403Fh, 4043h, 4045h,	405Dh, 4061h, 4067h, 406Dh, 4087h
		dd 4091h, 40A3h, 40A9h,	40B1h, 40B7h, 40BDh, 40DBh, 40DFh
		dd 40EBh, 40F7h, 40F9h,	4109h, 410Bh, 4111h, 4115h, 4121h
		dd 4133h, 4135h, 413Bh,	413Fh, 4159h, 4165h, 416Bh, 4177h
		dd 417Bh, 4193h, 41ABh,	41B7h, 41BDh, 41BFh, 41CBh, 41E7h
		dd 41EFh, 41F3h, 41F9h,	4205h, 4207h, 4219h, 421Fh, 4223h
		dd 4229h, 422Fh, 4243h,	4253h, 4255h, 425Bh, 4261h, 4273h
		dd 427Dh, 4283h, 4285h,	4289h, 4291h, 4297h, 429Dh, 42B5h
		dd 42C5h, 42CBh, 42D3h,	42DDh, 42E3h, 42F1h, 4307h, 430Fh
		dd 431Fh, 4325h, 4327h,	4333h, 4337h, 4339h, 434Fh, 4357h
		dd 4369h, 438Bh, 438Dh,	4393h, 43A5h, 43A9h, 43AFh, 43B5h
		dd 43BDh, 43C7h, 43CFh,	43E1h, 43E7h, 43EBh, 43EDh, 43F1h
		dd 43F9h, 4409h, 440Bh,	4417h, 4423h, 4429h, 443Bh, 443Fh
		dd 4445h, 444Bh, 4451h,	4453h, 4459h, 4465h, 446Fh, 4483h
		dd 448Fh, 44A1h, 44A5h,	44ABh, 44ADh, 44BDh, 44BFh, 44C9h
		dd 44D7h, 44DBh, 44F9h,	44FBh, 4505h, 4511h, 4513h, 452Bh
		dd 4531h, 4541h, 4549h,	4553h, 4555h, 4561h, 4577h, 457Dh
		dd 457Fh, 458Fh, 45A3h,	45ADh, 45AFh, 45BBh, 45C7h, 45D9h
		dd 45E3h, 45EFh, 45F5h,	45F7h, 4601h, 4603h, 4609h, 4613h
		dd 4625h, 4627h, 4633h,	4639h, 463Dh, 4643h, 4645h, 465Dh
		dd 4679h, 467Bh, 467Fh,	4681h, 468Bh, 468Dh, 469Dh, 46A9h
		dd 46B1h, 46C7h, 46C9h,	46CFh, 46D3h, 46D5h, 46DFh, 46E5h
		dd 46F9h, 4705h, 470Fh,	4717h, 4723h, 4729h, 472Fh, 4735h
		dd 4739h, 474Bh, 474Dh,	4751h, 475Dh, 476Fh, 4771h, 477Dh
		dd 4783h, 4787h, 4789h,	4799h, 47A5h, 47B1h, 47BFh, 47C3h
		dd 47CBh, 47DDh, 47E1h,	47EDh, 47FBh, 4801h, 4807h, 480Bh
		dd 4813h, 4819h, 481Dh,	4831h, 483Dh, 4847h, 4855h, 4859h
		dd 485Bh, 486Bh, 486Dh,	4879h, 4897h, 489Bh, 48A1h, 48B9h
		dd 48CDh, 48E5h, 48EFh,	48F7h, 4903h, 490Dh, 4919h, 491Fh
		dd 492Bh, 4937h, 493Dh,	4945h, 4955h, 4963h, 4969h, 496Dh
		dd 4973h, 4997h, 49ABh,	49B5h, 49D3h, 49DFh, 49E1h, 49E5h
		dd 49E7h, 4A03h, 4A0Fh,	4A1Dh, 4A23h, 4A39h, 4A41h, 4A45h
		dd 4A57h, 4A5Dh, 4A6Bh,	4A7Dh, 4A81h, 4A87h, 4A89h, 4A8Fh
		dd 4AB1h, 4AC3h, 4AC5h,	4AD5h, 4ADBh, 4AEDh, 4AEFh, 4B07h
		dd 4B0Bh, 4B0Dh, 4B13h,	4B1Fh, 4B25h, 4B31h, 4B3Bh, 4B43h
		dd 4B49h, 4B59h, 4B65h,	4B6Dh, 4B77h, 4B85h, 4BADh, 4BB3h
		dd 4BB5h, 4BBBh, 4BBFh,	4BCBh, 4BD9h, 4BDDh, 4BDFh, 4BE3h
		dd 4BE5h, 4BE9h, 4BF1h,	4BF7h, 4C01h, 4C07h, 4C0Dh, 4C0Fh
		dd 4C15h, 4C1Bh, 4C21h,	4C2Dh, 4C33h, 4C4Bh, 4C55h, 4C57h
		dd 4C61h, 4C67h, 4C73h,	4C79h, 4C7Fh, 4C8Dh, 4C93h, 4C99h
		dd 4CCDh, 4CE1h, 4CE7h,	4CF1h, 4CF3h, 4CFDh, 4D05h, 4D0Fh
		dd 4D1Bh, 4D27h, 4D29h,	4D2Fh, 4D33h, 4D41h, 4D51h, 4D59h
		dd 4D65h, 4D6Bh, 4D81h,	4D83h, 4D8Dh, 4D95h, 4D9Bh, 4DB1h
		dd 4DB3h, 4DC9h, 4DCFh,	4DD7h, 4DE1h, 4DEDh, 4DF9h, 4DFBh
		dd 4E05h, 4E0Bh, 4E17h,	4E19h, 4E1Dh, 4E2Bh, 4E35h, 4E37h
		dd 4E3Dh, 4E4Fh, 4E53h,	4E5Fh, 4E67h, 4E79h, 4E85h, 4E8Bh
		dd 4E91h, 4E95h, 4E9Bh,	4EA1h, 4EAFh, 4EB3h, 4EB5h, 4EC1h
		dd 4ECDh, 4ED1h, 4ED7h,	4EE9h, 4EFBh, 4F07h, 4F09h, 4F19h
		dd 4F25h, 4F2Dh, 4F3Fh,	4F49h, 4F63h, 4F67h, 4F6Dh, 4F75h
		dd 4F7Bh, 4F81h, 4F85h,	4F87h, 4F91h, 4FA5h, 4FA9h, 4FAFh
		dd 4FB7h, 4FBBh, 4FCFh,	4FD9h, 4FDBh, 4FFDh, 4FFFh, 5003h
		dd 501Bh, 501Dh, 5029h,	5035h, 503Fh, 5045h, 5047h, 5053h
		dd 5071h, 5077h, 5083h,	5093h, 509Fh, 50A1h, 50B7h, 50C9h
		dd 50D5h, 50E3h, 50EDh,	50EFh, 50FBh, 5107h, 510Bh, 510Dh
		dd 5111h, 5117h, 5123h,	5125h, 5135h, 5147h, 5149h, 5171h
		dd 5179h, 5189h, 518Fh,	5197h, 51A1h, 51A3h, 51A7h, 51B9h
		dd 51C1h, 51CBh, 51D3h,	51DFh, 51E3h, 51F5h, 51F7h, 5209h
		dd 5213h, 5215h, 5219h,	521Bh, 521Fh, 5227h, 5243h, 5245h
		dd 524Bh, 5261h, 526Dh,	5273h, 5281h, 5293h, 5297h, 529Dh
		dd 52A5h, 52ABh, 52B1h,	52BBh, 52C3h, 52C7h, 52C9h, 52DBh
		dd 52E5h, 52EBh, 52FFh,	5315h, 531Dh, 5323h, 5341h, 5345h
		dd 5347h, 534Bh, 535Dh,	5363h, 5381h, 5383h, 5387h, 538Fh
		dd 5395h, 5399h, 539Fh,	53ABh, 53B9h, 53DBh, 53E9h, 53EFh
		dd 53F3h, 53F5h, 53FBh,	53FFh, 540Dh, 5411h, 5413h, 5419h
		dd 5435h, 5437h, 543Bh,	5441h, 5449h, 5453h, 5455h, 545Fh
		dd 5461h, 546Bh, 546Dh,	5471h, 548Fh, 5491h, 549Dh, 54A9h
		dd 54B3h, 54C5h, 54D1h,	54DFh, 54E9h, 54EBh, 54F7h, 54FDh
		dd 5507h, 550Dh, 551Bh,	5527h, 552Bh, 5539h, 553Dh, 554Fh
		dd 5551h, 555Bh, 5563h,	5567h, 556Fh, 5579h, 5585h, 5597h
		dd 55A9h, 55B1h, 55B7h,	55C9h, 55D9h, 55E7h, 55EDh, 55F3h
		dd 55FDh, 560Bh, 560Fh,	5615h, 5617h, 5623h, 562Fh, 5633h
		dd 5639h, 563Fh, 564Bh,	564Dh, 565Dh, 565Fh, 566Bh, 5671h
		dd 5675h, 5683h, 5689h,	568Dh, 568Fh, 569Bh, 56ADh, 56B1h
		dd 56D5h, 56E7h, 56F3h,	56FFh, 5701h, 5705h, 5707h, 570Bh
		dd 5713h, 571Fh, 5723h,	5747h, 574Dh, 575Fh, 5761h, 576Dh
		dd 5777h, 577Dh, 5789h,	57A1h, 57A9h, 57AFh, 57B5h, 57C5h
		dd 57D1h, 57D3h, 57E5h,	57EFh, 5803h, 580Dh, 580Fh, 5815h
		dd 5827h, 582Bh, 582Dh,	5855h, 585Bh, 585Dh, 586Dh, 586Fh
		dd 5873h, 587Bh, 588Dh,	5897h, 58A3h, 58A9h, 58ABh, 58B5h
		dd 58BDh, 58C1h, 58C7h,	58D3h, 58D5h, 58DFh, 58F1h, 58F9h
		dd 58FFh, 5903h, 5917h,	591Bh, 5921h, 5945h, 594Bh, 594Dh
		dd 5957h, 595Dh, 5975h,	597Bh, 5989h, 5999h, 599Fh, 59B1h
		dd 59B3h, 59BDh, 59D1h,	59DBh, 59E3h, 59E9h, 59EDh, 59F3h
		dd 59F5h, 59FFh, 5A01h,	5A0Dh, 5A11h, 5A13h, 5A17h, 5A1Fh
		dd 5A29h, 5A2Fh, 5A3Bh,	5A4Dh, 5A5Bh, 5A67h, 5A77h, 5A7Fh
		dd 5A85h, 5A95h, 5A9Dh,	5AA1h, 5AA3h, 5AA9h, 5ABBh, 5AD3h
		dd 5AE5h, 5AEFh, 5AFBh,	5AFDh, 5B01h, 5B0Fh, 5B19h, 5B1Fh
		dd 5B25h, 5B2Bh, 5B3Dh,	5B49h, 5B4Bh, 5B67h, 5B79h, 5B87h
		dd 5B97h, 5BA3h, 5BB1h,	5BC9h, 5BD5h, 5BEBh, 5BF1h, 5BF3h
		dd 5BFDh, 5C05h, 5C09h,	5C0Bh, 5C0Fh, 5C1Dh, 5C29h, 5C2Fh
		dd 5C33h, 5C39h, 5C47h,	5C4Bh, 5C4Dh, 5C51h, 5C6Fh, 5C75h
		dd 5C77h, 5C7Dh, 5C87h,	5C89h, 5CA7h, 5CBDh, 5CBFh, 5CC3h
		dd 5CC9h, 5CD1h, 5CD7h,	5CDDh, 5CEDh, 5CF9h, 5D05h, 5D0Bh
		dd 5D13h, 5D17h, 5D19h,	5D31h, 5D3Dh, 5D41h, 5D47h, 5D4Fh
		dd 5D55h, 5D5Bh, 5D65h,	5D67h, 5D6Dh, 5D79h, 5D95h, 5DA3h
		dd 5DA9h, 5DADh, 5DB9h,	5DC1h, 5DC7h, 5DD3h, 5DD7h, 5DDDh
		dd 5DEBh, 5DF1h, 5DFDh,	5E07h, 5E0Dh, 5E13h, 5E1Bh, 5E21h
		dd 5E27h, 5E2Bh, 5E2Dh,	5E31h, 5E39h, 5E45h, 5E49h, 5E57h
		dd 5E69h, 5E73h, 5E75h,	5E85h, 5E8Bh, 5E9Fh, 5EA5h, 5EAFh
		dd 5EB7h, 5EBBh, 5ED9h,	5EFDh, 5F09h, 5F11h, 5F27h, 5F33h
		dd 5F35h, 5F3Bh, 5F47h,	5F57h, 5F5Dh, 5F63h, 5F65h, 5F77h
		dd 5F7Bh, 5F95h, 5F99h,	5FA1h, 5FB3h, 5FBDh, 5FC5h, 5FCFh
		dd 5FD5h, 5FE3h, 5FE7h,	5FFBh, 6011h, 6023h, 602Fh, 6037h
		dd 6053h, 605Fh, 6065h,	606Bh, 6073h, 6079h, 6085h, 609Dh
		dd 60ADh, 60BBh, 60BFh,	60CDh, 60D9h, 60DFh, 60E9h, 60F5h
		dd 6109h, 610Fh, 6113h,	611Bh, 612Dh, 6139h, 614Bh, 6155h
		dd 6157h, 615Bh, 616Fh,	6179h, 6187h, 618Bh, 6191h, 6193h
		dd 619Dh, 61B5h, 61C7h,	61C9h, 61CDh, 61E1h, 61F1h, 61FFh
		dd 6209h, 6217h, 621Dh,	6221h, 6227h, 623Bh, 6241h, 624Bh
		dd 6251h, 6253h, 625Fh,	6265h, 6283h, 628Dh, 6295h, 629Bh
		dd 629Fh, 62A5h, 62ADh,	62D5h, 62D7h, 62DBh, 62DDh, 62E9h
		dd 62FBh, 62FFh, 6305h,	630Dh, 6317h, 631Dh, 632Fh, 6341h
		dd 6343h, 634Fh, 635Fh,	6367h, 636Dh, 6371h, 6377h, 637Dh
		dd 637Fh, 63B3h, 63C1h,	63C5h, 63D9h, 63E9h, 63EBh, 63EFh
		dd 63F5h, 6401h, 6403h,	6409h, 6415h, 6421h, 6427h, 642Bh
		dd 6439h, 6443h, 6449h,	644Fh, 645Dh, 6467h, 6475h, 6485h
		dd 648Dh, 6493h, 649Fh,	64A3h, 64ABh, 64C1h, 64C7h, 64C9h
		dd 64DBh, 64F1h, 64F7h,	64F9h, 650Bh, 6511h, 6521h, 652Fh
		dd 6539h, 653Fh, 654Bh,	654Dh, 6553h, 6557h, 655Fh, 6571h
		dd 657Dh, 658Dh, 658Fh,	6593h, 65A1h, 65A5h, 65ADh, 65B9h
		dd 65C5h, 65E3h, 65F3h,	65FBh, 65FFh, 6601h, 6607h, 661Dh
		dd 6629h, 6631h, 663Bh,	6641h, 6647h, 664Dh, 665Bh, 6661h
		dd 6673h, 667Dh, 6689h,	668Bh, 6695h, 6697h, 669Bh, 66B5h
		dd 66B9h, 66C5h, 66CDh,	66D1h, 66E3h, 66EBh, 66F5h, 6703h
		dd 6713h, 6719h, 671Fh,	6727h, 6731h, 6737h, 673Fh, 6745h
		dd 6751h, 675Bh, 676Fh,	6779h, 6781h, 6785h, 6791h, 67ABh
		dd 67BDh, 67C1h, 67CDh,	67DFh, 67E5h, 6803h, 6809h, 6811h
		dd 6817h, 682Dh, 6839h,	683Bh, 683Fh, 6845h, 684Bh, 684Dh
		dd 6857h, 6859h, 685Dh,	6863h, 6869h, 686Bh, 6871h, 6887h
		dd 6899h, 689Fh, 68B1h,	68BDh, 68C5h, 68D1h, 68D7h, 68E1h
		dd 68EDh, 68EFh, 68FFh,	6901h, 690Bh, 690Dh, 6917h, 6929h
		dd 692Fh, 6943h, 6947h,	6949h, 694Fh, 6965h, 696Bh, 6971h
		dd 6983h, 6989h, 6997h,	69A3h, 69B3h, 69B5h, 69BBh, 69C1h
		dd 69C5h, 69D3h, 69DFh,	69E3h, 69E5h, 69F7h, 6A07h, 6A2Bh
		dd 6A37h, 6A3Dh, 6A4Bh,	6A67h, 6A69h, 6A75h, 6A7Bh, 6A87h
		dd 6A8Dh, 6A91h, 6A93h,	6AA3h, 6AC1h, 6AC9h, 6AE1h, 6AE7h
		dd 6B05h, 6B0Fh, 6B11h,	6B23h, 6B27h, 6B2Dh, 6B39h, 6B41h
		dd 6B57h, 6B59h, 6B5Fh,	6B75h, 6B87h, 6B89h, 6B93h, 6B95h
		dd 6B9Fh, 6BBDh, 6BBFh,	6BDBh, 6BE1h, 6BEFh, 6BFFh, 6C05h
		dd 6C19h, 6C29h, 6C2Bh,	6C31h, 6C35h, 6C55h, 6C59h, 6C5Bh
		dd 6C5Fh, 6C65h, 6C67h,	6C73h, 6C77h, 6C7Dh, 6C83h, 6C8Fh
		dd 6C91h, 6C97h, 6C9Bh,	6CA1h, 6CA9h, 6CAFh, 6CB3h, 6CC7h
		dd 6CCBh, 6CEBh, 6CF5h,	6CFDh, 6D0Dh, 6D0Fh, 6D25h, 6D27h
		dd 6D2Bh, 6D31h, 6D39h,	6D3Fh, 6D4Fh, 6D5Dh, 6D61h, 6D73h
		dd 6D7Bh, 6D7Fh, 6D93h,	6D99h, 6DA5h, 6DB1h, 6DB7h, 6DC1h
		dd 6DC3h, 6DCDh, 6DCFh,	6DDBh, 6DF7h, 6E03h, 6E15h, 6E17h
		dd 6E29h, 6E33h, 6E3Bh,	6E45h, 6E75h, 6E77h, 6E7Bh, 6E81h
		dd 6E89h, 6E93h, 6E95h,	6E9Fh, 6EBDh, 6EBFh, 6EE3h, 6EE9h
		dd 6EF3h, 6EF9h, 6EFBh,	6F0Dh, 6F11h, 6F17h, 6F1Fh, 6F2Fh
		dd 6F3Dh, 6F4Dh, 6F53h,	6F61h, 6F65h, 6F79h, 6F7Dh, 6F83h
		dd 6F85h, 6F8Fh, 6F9Bh,	6F9Dh, 6FA3h, 6FAFh, 6FB5h, 6FBBh
		dd 6FBFh, 6FCBh, 6FCDh,	6FD3h, 6FD7h, 6FE3h, 6FE9h, 6FF1h
		dd 6FF5h, 6FF7h, 6FFDh,	700Fh, 7019h, 701Fh, 7027h, 7033h
		dd 7039h, 704Fh, 7051h,	7057h, 7063h, 7075h, 7079h, 7087h
		dd 708Dh, 7091h, 70A5h,	70ABh, 70BBh, 70C3h, 70C7h, 70CFh
		dd 70E5h, 70EDh, 70F9h,	70FFh, 7105h, 7115h, 7121h, 7133h
		dd 7151h, 7159h, 715Dh,	715Fh, 7163h, 7169h, 7183h, 7187h
		dd 7195h, 71ADh, 71C3h,	71C9h, 71CBh, 71D1h, 71DBh, 71E1h
		dd 71EFh, 71F5h, 71FBh,	7207h, 7211h, 7217h, 7219h, 7225h
		dd 722Fh, 723Bh, 7243h,	7255h, 7267h, 7271h, 7277h, 727Fh
		dd 728Fh, 7295h, 729Bh,	72A3h, 72B3h, 72C7h, 72CBh, 72CDh
		dd 72D7h, 72D9h, 72E3h,	72EFh, 72F5h, 72FDh, 7303h, 730Dh
		dd 7321h, 732Bh, 733Dh,	7357h, 735Bh, 7361h, 737Fh, 7381h
		dd 7385h, 738Dh, 7393h,	739Fh, 73ABh, 73BDh, 73C1h, 73C9h
		dd 73DFh, 73E5h, 73E7h,	73F3h, 7415h, 741Bh, 742Dh, 7439h
		dd 743Fh, 7441h, 745Dh,	746Bh, 747Bh, 7489h, 748Dh, 749Bh
		dd 74A7h, 74ABh, 74B1h,	74B7h, 74B9h, 74DDh, 74E1h, 74E7h
		dd 74FBh, 7507h, 751Fh,	7525h, 753Bh, 753Dh, 754Dh, 755Fh
		dd 756Bh, 7577h, 7589h,	758Bh, 7591h, 7597h, 759Dh, 75A1h
		dd 75A7h, 75B5h, 75B9h,	75BBh, 75D1h, 75D9h, 75E5h, 75EBh
		dd 75F5h, 75FBh, 7603h,	760Fh, 7621h, 762Dh, 7633h, 763Dh
		dd 763Fh, 7655h, 7663h,	7669h, 766Fh, 7673h, 7685h, 768Bh
		dd 769Fh, 76B5h, 76B7h,	76C3h, 76DBh, 76DFh, 76F1h, 7703h
		dd 7705h, 771Bh, 771Dh,	7721h, 772Dh, 7735h, 7741h, 774Bh
		dd 7759h, 775Dh, 775Fh,	7771h, 7781h, 77A7h, 77ADh, 77B3h
		dd 77B9h, 77C5h, 77CFh,	77D5h, 77E1h, 77E9h, 77EFh, 77F3h
		dd 77F9h, 7807h, 7825h,	782Bh, 7835h, 783Dh, 7853h, 7859h
		dd 7861h, 786Dh, 7877h,	7879h, 7883h, 7885h, 788Bh, 7895h
		dd 7897h, 78A1h, 78ADh,	78BFh, 78D3h, 78D9h, 78DDh, 78E5h
		dd 78FBh, 7901h, 7907h,	7925h, 792Bh, 7939h, 793Fh, 794Bh
		dd 7957h, 795Dh, 7967h,	7969h, 7973h, 7991h, 7993h, 79A3h
		dd 79ABh, 79AFh, 79B1h,	79B7h, 79C9h, 79CDh, 79CFh, 79D5h
		dd 79D9h, 79F3h, 79F7h,	79FFh, 7A05h, 7A0Fh, 7A11h, 7A15h
		dd 7A1Bh, 7A23h, 7A27h,	7A2Dh, 7A4Bh, 7A57h, 7A59h, 7A5Fh
		dd 7A65h, 7A69h, 7A7Dh,	7A93h, 7A9Bh, 7A9Fh, 7AA1h, 7AA5h
		dd 7AEDh, 7AF5h, 7AF9h,	7B01h, 7B17h, 7B19h, 7B1Dh, 7B2Bh
		dd 7B35h, 7B37h, 7B3Bh,	7B4Fh, 7B55h, 7B5Fh, 7B71h, 7B77h
		dd 7B8Bh, 7B9Bh, 7BA1h,	7BA9h, 7BAFh, 7BB3h, 7BC7h, 7BD3h
		dd 7BE9h, 7BEBh, 7BEFh,	7BF1h, 7BFDh, 7C07h, 7C19h, 7C1Bh
		dd 7C31h, 7C37h, 7C49h,	7C67h, 7C69h, 7C73h, 7C81h, 7C8Bh
		dd 7C93h, 7CA3h, 7CD5h,	7CDBh, 7CE5h, 7CEDh, 7CF7h, 7D03h
		dd 7D09h, 7D1Bh, 7D1Dh,	7D33h, 7D39h, 7D3Bh, 7D3Fh, 7D45h
		dd 7D4Dh, 7D53h, 7D59h,	7D63h, 7D75h, 7D77h, 7D8Dh, 7D8Fh
		dd 7D9Fh, 7DADh, 7DB7h,	7DBDh, 7DBFh, 7DCBh, 7DD5h, 7DE9h
		dd 7DEDh, 7DFBh, 7E01h,	7E05h, 7E29h, 7E2Bh, 7E2Fh, 7E35h
		dd 7E41h, 7E43h, 7E47h,	7E55h, 7E61h, 7E67h, 7E6Bh, 7E71h
		dd 7E73h, 7E79h, 7E7Dh,	7E91h, 7E9Bh, 7E9Dh, 7EA7h, 7EADh
		dd 7EB9h, 7EBBh, 7ED3h,	7EDFh, 7EEBh, 7EF1h, 7EF7h, 7EFBh
		dd 7F13h, 7F15h, 7F19h,	7F31h, 7F33h, 7F39h, 7F3Dh, 7F43h
		dd 7F4Bh, 7F5Bh, 7F61h,	7F63h, 7F6Dh, 7F79h, 7F87h, 7F8Dh
		dd 7FAFh, 7FB5h, 7FC3h,	7FC9h, 7FCDh, 7FCFh, 7FEDh, 8003h
		dd 800Bh, 800Fh, 8015h,	801Dh, 8021h, 8023h, 803Fh, 8041h
		dd 8047h, 804Bh, 8065h,	8077h, 808Dh, 808Fh, 8095h, 80A5h
		dd 80ABh, 80ADh, 80BDh,	80C9h, 80CBh, 80D7h, 80DBh, 80E1h
		dd 80E7h, 80F5h, 80FFh,	8105h, 810Dh, 8119h, 811Dh, 812Fh
		dd 8131h, 813Bh, 8143h,	8153h, 8159h, 815Fh, 817Dh, 817Fh
		dd 8189h, 819Bh, 819Dh,	81A7h, 81AFh, 81B3h, 81BBh, 81C7h
		dd 81DFh, 8207h, 8209h,	8215h, 821Fh, 8225h, 8231h, 8233h
		dd 823Fh, 8243h, 8245h,	8249h, 824Fh, 8261h, 826Fh, 827Bh
		dd 8281h, 8285h, 8293h,	82B1h, 82B5h, 82BDh, 82C7h, 82CFh
		dd 82D5h, 82DFh, 82F1h,	82F9h, 82FDh, 830Bh, 831Bh, 8321h
		dd 8329h, 832Dh, 8333h,	8335h, 833Fh, 8341h, 834Dh, 8351h
		dd 8353h, 8357h, 835Dh,	8365h, 8369h, 836Fh, 838Fh, 83A7h
		dd 83B1h, 83B9h, 83CBh,	83D5h, 83D7h, 83DDh, 83E7h, 83E9h
		dd 83EDh, 83FFh, 8405h,	8411h, 8413h, 8423h, 8425h, 843Bh
		dd 8441h, 8447h, 844Fh,	8461h, 8465h, 8477h, 8483h, 848Bh
		dd 8491h, 8495h, 84A9h,	84AFh, 84CDh, 84E3h, 84EFh, 84F1h
		dd 84F7h, 8509h, 850Dh,	854Bh, 854Fh, 8551h, 855Dh, 8563h
		dd 856Dh, 856Fh, 857Bh,	8587h, 85A3h, 85A5h, 85A9h, 85B7h
		dd 85CDh, 85D3h, 85D5h,	85DBh, 85E1h, 85EBh, 85F9h, 85FDh
		dd 85FFh, 8609h, 860Fh,	8617h, 8621h, 862Fh, 8639h, 863Fh
		dd 8641h, 864Dh, 8663h,	8675h, 867Dh, 8687h, 8699h, 86A5h
		dd 86A7h, 86B3h, 86B7h,	86C3h, 86C5h, 86CFh, 86D1h, 86D7h
		dd 86E9h, 86EFh, 86F5h,	8717h, 871Dh, 871Fh, 872Bh, 872Fh
		dd 8735h, 8747h, 8759h,	875Bh, 876Bh, 8771h, 8777h, 877Fh
		dd 8785h, 878Fh, 87A1h,	87A9h, 87B3h, 87BBh, 87C5h, 87C7h
		dd 87CBh, 87DDh, 87F7h,	8803h, 8819h, 881Bh, 881Fh, 8821h
		dd 8837h, 883Dh, 8843h,	8851h, 8861h, 8867h, 887Bh, 8885h
		dd 8891h, 8893h, 88A5h,	88CFh, 88D3h, 88EBh, 88EDh, 88F3h
		dd 88FDh, 8909h, 890Bh,	8911h, 891Bh, 8923h, 8927h, 892Dh
		dd 8939h, 8945h, 894Dh,	8951h, 8957h, 8963h, 8981h, 8995h
		dd 899Bh, 89B3h, 89B9h,	89C3h, 89CFh, 89D1h, 89DBh, 89EFh
		dd 89F5h, 89FBh, 89FFh,	8A0Bh, 8A19h, 8A23h, 8A35h, 8A41h
		dd 8A49h, 8A4Fh, 8A5Bh,	8A5Fh, 8A6Dh, 8A77h, 8A79h, 8A85h
		dd 8AA3h, 8AB3h, 8AB5h,	8AC1h, 8AC7h, 8ACBh, 8ACDh, 8AD1h
		dd 8AD7h, 8AF1h, 8AF5h,	8B07h, 8B09h, 8B0Dh, 8B13h, 8B21h
		dd 8B57h, 8B5Dh, 8B91h,	8B93h, 8BA3h, 8BA9h, 8BAFh, 8BBBh
		dd 8BD5h, 8BD9h, 8BDBh,	8BE1h, 8BF7h, 8BFDh, 8BFFh, 8C0Bh
		dd 8C17h, 8C1Dh, 8C27h,	8C39h, 8C3Bh, 8C47h, 8C53h, 8C5Dh
		dd 8C6Fh, 8C7Bh, 8C81h,	8C89h, 8C8Fh, 8C99h, 8C9Fh, 8CA7h
		dd 8CABh, 8CADh, 8CB1h,	8CC5h, 8CDDh, 8CE3h, 8CE9h, 8CF3h
		dd 8D01h, 8D0Bh, 8D0Dh,	8D23h, 8D29h, 8D37h, 8D41h, 8D5Bh
		dd 8D5Fh, 8D71h, 8D79h,	8D85h, 8D91h, 8D9Bh, 8DA7h, 8DADh
		dd 8DB5h, 8DC5h, 8DCBh,	8DD3h, 8DD9h, 8DDFh, 8DF5h, 8DF7h
		dd 8E01h, 8E15h, 8E1Fh,	8E25h, 8E51h, 8E63h, 8E69h, 8E73h
		dd 8E75h, 8E79h, 8E7Fh,	8E8Dh, 8E91h, 8EABh, 8EAFh, 8EB1h
		dd 8EBDh, 8EC7h, 8ECFh,	8ED3h, 8EDBh, 8EE7h, 8EEBh, 8EF7h
		dd 8EFFh, 8F15h, 8F1Dh,	8F23h, 8F2Dh, 8F3Fh, 8F45h, 8F4Bh
		dd 8F53h, 8F59h, 8F65h,	8F69h, 8F71h, 8F83h, 8F8Dh, 8F99h
		dd 8F9Fh, 8FABh, 8FADh,	8FB3h, 8FB7h, 8FB9h, 8FC9h, 8FD5h
		dd 8FE1h, 8FEFh, 8FF9h,	9007h, 900Dh, 9017h, 9023h, 9025h
		dd 9031h, 9037h, 903Bh,	9041h, 9043h, 904Fh, 9053h, 906Dh
		dd 9073h, 9085h, 908Bh,	9095h, 909Bh, 909Dh, 90AFh, 90B9h
		dd 90C1h, 90C5h, 90DFh,	90E9h, 90FDh, 9103h, 9113h, 9127h
		dd 9133h, 913Dh, 9145h,	914Fh, 9151h, 9161h, 9167h, 917Bh
		dd 9185h, 9199h, 919Dh,	91BBh, 91BDh, 91C1h, 91C9h, 91D9h
		dd 91DBh, 91EDh, 91F1h,	91F3h, 91F9h, 9203h, 9215h, 9221h
		dd 922Fh, 9241h, 9247h,	9257h, 926Bh, 9271h, 9275h, 927Dh
		dd 9283h, 9287h, 928Dh,	9299h, 92A1h, 92ABh, 92ADh, 92B9h
		dd 92BFh, 92C3h, 92C5h,	92CBh, 92D5h, 92D7h, 92E7h, 92F3h
		dd 9301h, 930Bh, 9311h,	9319h, 931Fh, 933Bh, 933Dh, 9343h
		dd 9355h, 9373h, 9395h,	9397h, 93A7h, 93B3h, 93B5h, 93C7h
		dd 93D7h, 93DDh, 93E5h,	93EFh, 93F7h, 9401h, 9409h, 9413h
		dd 943Fh, 9445h, 944Bh,	944Fh, 9463h, 9467h, 9469h, 946Dh
		dd 947Bh, 9497h, 949Fh,	94A5h, 94B5h, 94C3h, 94E1h, 94E7h
		dd 9505h, 9509h, 9517h,	9521h, 9527h, 952Dh, 9535h, 9539h
		dd 954Bh, 9557h, 955Dh,	955Fh, 9575h, 9581h, 9589h, 958Fh
		dd 959Bh, 959Fh, 95ADh,	95B1h, 95B7h, 95B9h, 95BDh, 95CFh
		dd 95E3h, 95E9h, 95F9h,	961Fh, 962Fh, 9631h, 9635h, 963Bh
		dd 963Dh, 9665h, 968Fh,	969Dh, 96A1h, 96A7h, 96A9h, 96C1h
		dd 96CBh, 96D1h, 96D3h,	96E5h, 96EFh, 96FBh, 96FDh, 970Dh
		dd 970Fh, 9715h, 9725h,	972Bh, 9733h, 9737h, 9739h, 9743h
		dd 9749h, 9751h, 975Bh,	975Dh, 976Fh, 977Fh, 9787h, 9793h
		dd 97A5h, 97B1h, 97B7h,	97C3h, 97CDh, 97D3h, 97D9h, 97EBh
		dd 97F7h, 9805h, 9809h,	980Bh, 9815h, 9829h, 982Fh, 983Bh
		dd 9841h, 9851h, 986Bh,	986Fh, 9881h, 9883h, 9887h, 98A7h
		dd 98B1h, 98B9h, 98BFh,	98C3h, 98C9h, 98CFh, 98DDh, 98E3h
		dd 98F5h, 98F9h, 98FBh,	990Dh, 9917h, 991Fh, 9929h, 9931h
		dd 993Bh, 993Dh, 9941h,	9947h, 9949h, 9953h, 997Dh, 9985h
		dd 9991h, 9995h, 999Bh,	99ADh, 99AFh, 99BFh, 99C7h, 99CBh
		dd 99CDh, 99D7h, 99E5h,	99F1h, 99FBh, 9A0Fh, 9A13h, 9A1Bh
		dd 9A25h, 9A4Bh, 9A4Fh,	9A55h, 9A57h, 9A61h, 9A75h, 9A7Fh
		dd 9A8Bh, 9A91h, 9A9Dh,	9AB7h, 9AC3h, 9AC7h, 9ACFh, 9AEBh
		dd 9AF3h, 9AF7h, 9AFFh,	9B17h, 9B1Dh, 9B27h, 9B2Fh, 9B35h
		dd 9B45h, 9B51h, 9B59h,	9B63h, 9B6Fh, 9B77h, 9B8Dh, 9B93h
		dd 9B95h, 9B9Fh, 9BA1h,	9BA7h, 9BB1h, 9BB7h, 9BBDh, 9BC5h
		dd 9BCBh, 9BCFh, 9BDDh,	9BF9h, 9C01h, 9C11h, 9C23h, 9C2Bh
		dd 9C2Fh, 9C35h, 9C49h,	9C4Dh, 9C5Fh, 9C65h, 9C67h, 9C7Fh
		dd 9C97h, 9C9Dh, 9CA3h,	9CAFh, 9CBBh, 9CBFh, 9CC1h, 9CD7h
		dd 9CD9h, 9CE3h, 9CE9h,	9CF1h, 9CFDh, 9D01h, 9D15h, 9D27h
		dd 9D2Dh, 9D31h, 9D3Dh,	9D55h, 9D5Bh, 9D61h, 9D97h, 9D9Fh
		dd 9DA5h, 9DA9h, 9DC3h,	9DE7h, 9DEBh, 9DEDh, 9DF1h, 9E0Bh
		dd 9E17h, 9E23h, 9E27h,	9E2Dh, 9E33h, 9E3Bh, 9E47h, 9E51h
		dd 9E53h, 9E5Fh, 9E6Fh,	9E81h, 9E87h, 9E8Fh, 9E95h, 9EA1h
		dd 9EB3h, 9EBDh, 9EBFh,	9EF5h, 9EF9h, 9EFBh, 9F05h, 9F23h
		dd 9F2Fh, 9F37h, 9F3Bh,	9F43h, 9F53h, 9F61h, 9F6Dh, 9F73h
		dd 9F77h, 9F7Dh, 9F89h,	9F8Fh, 9F91h, 9F95h, 9FA3h, 9FAFh
		dd 9FB3h, 9FC1h, 9FC7h,	9FDFh, 9FE5h, 9FEBh, 9FF5h, 0A001h
		dd 0A00Dh, 0A021h, 0A033h, 0A039h, 0A03Fh, 0A04Fh, 0A057h
		dd 0A05Bh, 0A061h, 0A075h, 0A079h, 0A099h, 0A09Dh, 0A0ABh
		dd 0A0B5h, 0A0B7h, 0A0BDh, 0A0C9h, 0A0D9h, 0A0DBh, 0A0DFh
		dd 0A0E5h, 0A0F1h, 0A0F3h, 0A0FDh, 0A105h, 0A10Bh, 0A10Fh
		dd 0A111h, 0A11Bh, 0A129h, 0A12Fh, 0A135h, 0A141h, 0A153h
		dd 0A175h, 0A17Dh, 0A187h, 0A18Dh, 0A1A5h, 0A1ABh, 0A1ADh
		dd 0A1B7h, 0A1C3h, 0A1C5h, 0A1E3h, 0A1EDh, 0A1FBh, 0A207h
		dd 0A213h, 0A223h, 0A229h, 0A22Fh, 0A231h, 0A243h, 0A247h
		dd 0A24Dh, 0A26Bh, 0A279h, 0A27Dh, 0A283h, 0A289h, 0A28Bh
		dd 0A291h, 0A295h, 0A29Bh, 0A2A9h, 0A2AFh, 0A2B3h, 0A2BBh
		dd 0A2C5h, 0A2D1h, 0A2D7h, 0A2F7h, 0A301h, 0A309h, 0A31Fh
		dd 0A321h, 0A32Bh, 0A331h, 0A349h, 0A351h, 0A355h, 0A373h
		dd 0A379h, 0A37Bh, 0A387h, 0A397h, 0A39Fh, 0A3A5h, 0A3A9h
		dd 0A3AFh, 0A3B7h, 0A3C7h, 0A3D5h, 0A3DBh, 0A3E1h, 0A3E5h
		dd 0A3E7h, 0A3F1h, 0A3FDh, 0A3FFh, 0A40Fh, 0A41Dh, 0A421h
		dd 0A423h, 0A427h, 0A43Bh, 0A44Dh, 0A457h, 0A459h, 0A463h
		dd 0A469h, 0A475h, 0A493h, 0A49Bh, 0A4ADh, 0A4B9h, 0A4C3h
		dd 0A4C5h, 0A4CBh, 0A4D1h, 0A4D5h, 0A4E1h, 0A4EDh, 0A4EFh
		dd 0A4F3h, 0A4FFh, 0A511h, 0A529h, 0A52Bh, 0A535h, 0A53Bh
		dd 0A543h, 0A553h, 0A55Bh, 0A561h, 0A56Dh, 0A577h, 0A585h
		dd 0A58Bh, 0A597h, 0A59Dh, 0A5A3h, 0A5A7h, 0A5A9h, 0A5C1h
		dd 0A5C5h, 0A5CBh, 0A5D3h, 0A5D9h, 0A5DDh, 0A5DFh, 0A5E3h
		dd 0A5E9h, 0A5F7h, 0A5FBh, 0A603h, 0A60Dh, 0A625h, 0A63Dh
		dd 0A649h, 0A64Bh, 0A651h, 0A65Dh, 0A673h, 0A691h, 0A693h
		dd 0A699h, 0A6ABh, 0A6B5h, 0A6BBh, 0A6C1h, 0A6C9h, 0A6CDh
		dd 0A6CFh, 0A6D5h, 0A6DFh, 0A6E7h, 0A6F1h, 0A6F7h, 0A6FFh
		dd 0A70Fh, 0A715h, 0A723h, 0A729h, 0A72Dh, 0A745h, 0A74Dh
		dd 0A757h, 0A759h, 0A765h, 0A76Bh, 0A76Fh, 0A793h, 0A795h
		dd 0A7ABh, 0A7B1h, 0A7B9h, 0A7BFh, 0A7C9h, 0A7D1h, 0A7D7h
		dd 0A7E3h, 0A7EDh, 0A7FBh, 0A805h, 0A80Bh, 0A81Dh, 0A829h
		dd 0A82Bh, 0A837h, 0A83Bh, 0A855h, 0A85Fh, 0A86Dh, 0A87Dh
		dd 0A88Fh, 0A897h, 0A8A9h, 0A8B5h, 0A8C1h, 0A8C7h, 0A8D7h
		dd 0A8E5h, 0A8FDh, 0A907h, 0A913h, 0A91Bh, 0A931h, 0A937h
		dd 0A939h, 0A943h, 0A97Fh, 0A985h, 0A987h, 0A98Bh, 0A993h
		dd 0A9A3h, 0A9B1h, 0A9BBh, 0A9C1h, 0A9D9h, 0A9DFh, 0A9EBh
		dd 0A9FDh, 0AA15h, 0AA17h, 0AA35h, 0AA39h, 0AA3Bh, 0AA47h
		dd 0AA4Dh, 0AA57h, 0AA59h, 0AA5Dh, 0AA6Bh, 0AA71h, 0AA81h
		dd 0AA83h, 0AA8Dh, 0AA95h, 0AAABh, 0AABFh, 0AAC5h, 0AAC9h
		dd 0AAE9h, 0AAEFh, 0AB01h, 0AB05h, 0AB07h, 0AB0Bh, 0AB0Dh
		dd 0AB11h, 0AB19h, 0AB4Dh, 0AB5Bh, 0AB71h, 0AB73h, 0AB89h
		dd 0AB9Dh, 0ABA7h, 0ABAFh, 0ABB9h, 0ABBBh, 0ABC1h, 0ABC5h
		dd 0ABD3h, 0ABD7h, 0ABDDh, 0ABF1h, 0ABF5h, 0ABFBh, 0ABFDh
		dd 0AC09h, 0AC15h, 0AC1Bh, 0AC27h, 0AC37h, 0AC39h, 0AC45h
		dd 0AC4Fh, 0AC57h, 0AC5Bh, 0AC61h, 0AC63h, 0AC7Fh, 0AC8Bh
		dd 0AC93h, 0AC9Dh, 0ACA9h, 0ACABh, 0ACAFh, 0ACBDh, 0ACD9h
		dd 0ACE1h, 0ACE7h, 0ACEBh, 0ACEDh, 0ACF1h
		dd 0ACF7h, 0ACF9h, 0AD05h, 0AD3Fh, 0AD45h, 0AD53h, 0AD5Dh
		dd 0AD5Fh, 0AD65h, 0AD81h, 0ADA1h, 0ADA5h, 0ADC3h, 0ADCBh
		dd 0ADD1h, 0ADD5h, 0ADDBh, 0ADE7h, 0ADF3h, 0ADF5h, 0ADF9h
		dd 0ADFFh, 0AE05h, 0AE13h, 0AE23h, 0AE2Bh, 0AE49h, 0AE4Dh
		dd 0AE4Fh, 0AE59h, 0AE61h, 0AE67h, 0AE6Bh, 0AE71h, 0AE8Bh
		dd 0AE8Fh, 0AE9Bh, 0AE9Dh, 0AEA7h, 0AEB9h, 0AEC5h, 0AED1h
		dd 0AEE3h, 0AEE5h, 0AEE9h, 0AEF5h, 0AEFDh, 0AF09h, 0AF13h
		dd 0AF27h, 0AF2Bh, 0AF33h, 0AF43h, 0AF4Fh, 0AF57h, 0AF5Dh
		dd 0AF6Dh, 0AF75h, 0AF7Fh, 0AF8Bh, 0AF99h, 0AF9Fh, 0AFA3h
		dd 0AFABh, 0AFB7h, 0AFBBh, 0AFCFh, 0AFD5h, 0AFFDh, 0B005h
		dd 0B015h, 0B01Bh, 0B03Fh, 0B041h, 0B047h, 0B04Bh, 0B051h
		dd 0B053h, 0B069h, 0B07Bh, 0B07Dh, 0B087h, 0B08Dh, 0B0B1h
		dd 0B0BFh, 0B0CBh, 0B0CFh, 0B0E1h, 0B0E9h, 0B0EDh, 0B0FBh
		dd 0B105h, 0B107h, 0B111h, 0B119h, 0B11Dh, 0B11Fh, 0B131h
		dd 0B141h, 0B14Dh, 0B15Bh, 0B165h, 0B173h, 0B179h, 0B17Fh
		dd 0B1A9h, 0B1B3h, 0B1B9h, 0B1BFh, 0B1D3h, 0B1DDh, 0B1E5h
		dd 0B1F1h, 0B1F5h, 0B201h, 0B213h, 0B215h, 0B21Fh, 0B22Dh
		dd 0B23Fh, 0B249h, 0B25Bh, 0B263h, 0B269h, 0B26Dh, 0B27Bh
		dd 0B281h, 0B28Bh, 0B2A9h, 0B2B7h, 0B2BDh, 0B2C3h, 0B2C7h
		dd 0B2D3h, 0B2F9h, 0B2FDh, 0B2FFh, 0B303h, 0B309h, 0B311h
		dd 0B31Dh, 0B327h, 0B32Dh, 0B33Fh, 0B345h, 0B377h, 0B37Dh
		dd 0B381h, 0B387h, 0B393h, 0B39Bh, 0B3A5h, 0B3C5h, 0B3CBh
		dd 0B3E1h, 0B3E3h, 0B3EDh, 0B3F9h, 0B40Bh, 0B40Dh, 0B413h
		dd 0B417h, 0B435h, 0B43Dh, 0B443h, 0B449h, 0B45Bh, 0B465h
		dd 0B467h, 0B46Bh, 0B477h, 0B48Bh, 0B495h, 0B49Dh, 0B4B5h
		dd 0B4BFh, 0B4C1h, 0B4C7h, 0B4DDh, 0B4E3h, 0B4E5h, 0B4F7h
		dd 0B501h, 0B50Dh, 0B50Fh, 0B52Dh, 0B53Fh, 0B54Bh, 0B567h
		dd 0B569h, 0B56Fh, 0B573h, 0B579h, 0B587h, 0B58Dh, 0B599h
		dd 0B5A3h, 0B5ABh, 0B5AFh, 0B5BBh, 0B5D5h, 0B5DFh, 0B5E7h
		dd 0B5EDh, 0B5FDh, 0B5FFh, 0B609h, 0B61Bh, 0B629h, 0B62Fh
		dd 0B633h, 0B639h, 0B647h, 0B657h, 0B659h, 0B65Fh, 0B663h
		dd 0B66Fh, 0B683h, 0B687h, 0B69Bh, 0B69Fh, 0B6A5h, 0B6B1h
		dd 0B6B3h, 0B6D7h, 0B6DBh, 0B6E1h, 0B6E3h, 0B6EDh, 0B6EFh
		dd 0B705h, 0B70Dh, 0B713h, 0B71Dh, 0B729h, 0B735h, 0B747h
		dd 0B755h, 0B76Dh, 0B791h, 0B795h, 0B7A9h, 0B7C1h, 0B7CBh
		dd 0B7D1h, 0B7D3h, 0B7EFh, 0B7F5h, 0B807h, 0B80Fh, 0B813h
		dd 0B819h, 0B821h, 0B827h, 0B82Bh, 0B82Dh, 0B839h, 0B855h
		dd 0B867h, 0B875h, 0B885h, 0B893h, 0B8A5h, 0B8AFh, 0B8B7h
		dd 0B8BDh, 0B8C1h, 0B8C7h, 0B8CDh, 0B8D5h, 0B8EBh, 0B8F7h
		dd 0B8F9h, 0B903h, 0B915h, 0B91Bh, 0B91Dh, 0B92Fh, 0B939h
		dd 0B93Bh, 0B947h, 0B951h, 0B963h, 0B983h, 0B989h, 0B98Dh
		dd 0B993h, 0B999h, 0B9A1h, 0B9A7h, 0B9ADh, 0B9B7h, 0B9CBh
		dd 0B9D1h, 0B9DDh, 0B9E7h, 0B9EFh, 0B9F9h, 0BA07h, 0BA0Dh
		dd 0BA17h, 0BA25h, 0BA29h, 0BA2Bh, 0BA41h, 0BA53h, 0BA55h
		dd 0BA5Fh, 0BA61h, 0BA65h, 0BA79h, 0BA7Dh, 0BA7Fh, 0BAA1h
		dd 0BAA3h, 0BAAFh, 0BAB5h, 0BABFh, 0BAC1h, 0BACBh, 0BADDh
		dd 0BAE3h, 0BAF1h, 0BAFDh, 0BB09h, 0BB1Fh, 0BB27h, 0BB2Dh
		dd 0BB3Dh, 0BB43h, 0BB4Bh, 0BB4Fh, 0BB5Bh, 0BB61h, 0BB69h
		dd 0BB6Dh, 0BB91h, 0BB97h, 0BB9Dh, 0BBB1h, 0BBC9h, 0BBCFh
		dd 0BBDBh, 0BBEDh, 0BBF7h, 0BBF9h, 0BC03h, 0BC1Dh, 0BC23h
		dd 0BC33h, 0BC3Bh, 0BC41h, 0BC45h, 0BC5Dh, 0BC6Fh, 0BC77h
		dd 0BC83h, 0BC8Fh, 0BC99h, 0BCABh, 0BCB7h, 0BCB9h, 0BCD1h
		dd 0BCD5h, 0BCE1h, 0BCF3h, 0BCFFh, 0BD0Dh, 0BD17h, 0BD19h
		dd 0BD1Dh, 0BD35h, 0BD41h, 0BD4Fh, 0BD59h, 0BD5Fh, 0BD61h
		dd 0BD67h, 0BD6Bh, 0BD71h, 0BD8Bh, 0BD8Fh, 0BD95h, 0BD9Bh
		dd 0BD9Dh, 0BDB3h, 0BDBBh, 0BDCDh, 0BDD1h, 0BDE3h, 0BDEBh
		dd 0BDEFh, 0BE07h, 0BE09h, 0BE15h, 0BE21h, 0BE25h, 0BE27h
		dd 0BE5Bh, 0BE5Dh, 0BE6Fh, 0BE75h, 0BE79h, 0BE7Fh, 0BE8Bh
		dd 0BE8Dh, 0BE93h, 0BE9Fh, 0BEA9h, 0BEB1h, 0BEB5h, 0BEB7h
		dd 0BECFh, 0BED9h, 0BEDBh, 0BEE5h, 0BEE7h, 0BEF3h, 0BEF9h
		dd 0BF0Bh, 0BF33h, 0BF39h, 0BF4Dh, 0BF5Dh, 0BF5Fh, 0BF6Bh
		dd 0BF71h, 0BF7Bh, 0BF87h, 0BF89h, 0BF8Dh, 0BF93h, 0BFA1h
		dd 0BFADh, 0BFB9h, 0BFCFh, 0BFD5h, 0BFDDh, 0BFE1h, 0BFE3h
		dd 0BFF3h, 0C005h, 0C011h, 0C013h, 0C019h, 0C029h, 0C02Fh
		dd 0C031h, 0C037h, 0C03Bh, 0C047h, 0C065h, 0C06Dh, 0C07Dh
		dd 0C07Fh, 0C091h, 0C09Bh, 0C0B3h, 0C0B5h, 0C0BBh, 0C0D3h
		dd 0C0D7h, 0C0D9h, 0C0EFh, 0C0F1h, 0C101h, 0C103h, 0C109h
		dd 0C115h, 0C119h, 0C12Bh, 0C133h, 0C137h, 0C145h, 0C149h
		dd 0C15Bh, 0C173h, 0C179h, 0C17Bh, 0C181h, 0C18Bh, 0C18Dh
		dd 0C197h, 0C1BDh, 0C1C3h, 0C1CDh, 0C1DBh, 0C1E1h, 0C1E7h
		dd 0C1FFh, 0C203h, 0C205h, 0C211h, 0C221h, 0C22Fh, 0C23Fh
		dd 0C24Bh, 0C24Dh, 0C253h, 0C25Dh, 0C277h, 0C27Bh, 0C27Dh
		dd 0C289h, 0C28Fh, 0C293h, 0C29Fh, 0C2A7h, 0C2B3h, 0C2BDh
		dd 0C2CFh
		dd 0C2D5h, 0C2E3h, 0C2FFh, 0C301h, 0C307h, 0C311h, 0C313h
		dd 0C317h, 0C325h, 0C347h, 0C349h, 0C34Fh, 0C365h, 0C367h
		dd 0C371h, 0C37Fh, 0C383h, 0C385h, 0C395h, 0C39Dh, 0C3A7h
		dd 0C3ADh, 0C3B5h, 0C3BFh, 0C3C7h, 0C3CBh, 0C3D1h, 0C3D3h
		dd 0C3E3h, 0C3E9h, 0C3EFh, 0C401h, 0C41Fh, 0C42Dh, 0C433h
		dd 0C437h, 0C455h, 0C457h, 0C461h, 0C46Fh, 0C473h, 0C487h
		dd 0C491h, 0C499h, 0C49Dh, 0C4A5h, 0C4B7h, 0C4BBh, 0C4C9h
		dd 0C4CFh, 0C4D3h, 0C4EBh, 0C4F1h, 0C4F7h, 0C509h, 0C51Bh
		dd 0C51Dh, 0C541h, 0C547h, 0C551h, 0C55Fh, 0C56Bh, 0C56Fh
		dd 0C575h, 0C577h, 0C595h, 0C59Bh, 0C59Fh, 0C5A1h, 0C5A7h
		dd 0C5C3h, 0C5D7h, 0C5DBh, 0C5EFh, 0C5FBh, 0C613h, 0C623h
		dd 0C635h, 0C641h, 0C64Fh, 0C655h, 0C659h, 0C665h, 0C685h
		dd 0C691h, 0C697h, 0C6A1h, 0C6A9h, 0C6B3h, 0C6B9h, 0C6CBh
		dd 0C6CDh, 0C6DDh, 0C6EBh, 0C6F1h, 0C707h, 0C70Dh, 0C719h
		dd 0C71Bh, 0C72Dh, 0C731h, 0C739h, 0C757h, 0C763h, 0C767h
		dd 0C773h, 0C775h, 0C77Fh, 0C7A5h, 0C7BBh, 0C7BDh, 0C7C1h
		dd 0C7CFh, 0C7D5h, 0C7E1h, 0C7F9h, 0C7FDh, 0C7FFh, 0C803h
		dd 0C811h, 0C81Dh, 0C827h, 0C829h, 0C839h, 0C83Fh, 0C853h
		dd 0C857h, 0C86Bh, 0C881h, 0C88Dh, 0C88Fh, 0C893h, 0C895h
		dd 0C8A1h, 0C8B7h, 0C8CFh, 0C8D5h, 0C8DBh, 0C8DDh, 0C8E3h
		dd 0C8E7h, 0C8EDh, 0C8EFh, 0C8F9h, 0C905h, 0C911h, 0C917h
		dd 0C919h, 0C91Fh, 0C92Fh, 0C937h, 0C93Dh, 0C941h, 0C953h
		dd 0C95Fh, 0C96Bh, 0C979h, 0C97Dh, 0C989h, 0C98Fh, 0C997h
		dd 0C99Dh, 0C9AFh, 0C9B5h, 0C9BFh, 0C9CBh, 0C9D9h, 0C9DFh
		dd 0C9E3h, 0C9EBh, 0CA01h, 0CA07h, 0CA09h, 0CA25h, 0CA37h
		dd 0CA39h, 0CA4Bh, 0CA55h, 0CA5Bh, 0CA69h, 0CA73h, 0CA75h
		dd 0CA7Fh, 0CA8Dh, 0CA93h, 0CA9Dh, 0CA9Fh, 0CAB5h, 0CABBh
		dd 0CAC3h, 0CAC9h, 0CAD9h, 0CAE5h, 0CAEDh, 0CB03h, 0CB05h
		dd 0CB09h, 0CB17h, 0CB29h, 0CB35h, 0CB3Bh, 0CB53h, 0CB59h
		dd 0CB63h, 0CB65h, 0CB71h, 0CB87h, 0CB99h, 0CB9Fh, 0CBB3h
		dd 0CBB9h, 0CBC3h, 0CBD1h, 0CBD5h, 0CBD7h, 0CBDDh, 0CBE9h
		dd 0CBFFh, 0CC0Dh, 0CC19h, 0CC1Dh, 0CC23h, 0CC2Bh, 0CC41h
		dd 0CC43h, 0CC4Dh, 0CC59h, 0CC61h, 0CC89h, 0CC8Bh, 0CC91h
		dd 0CC9Bh, 0CCA3h, 0CCA7h, 0CCD1h, 0CCE5h, 0CCE9h, 0CD09h
		dd 0CD15h, 0CD1Fh, 0CD25h, 0CD31h, 0CD3Dh, 0CD3Fh, 0CD49h
		dd 0CD51h, 0CD57h, 0CD5Bh, 0CD63h, 0CD67h, 0CD81h, 0CD93h
		dd 0CD97h, 0CD9Fh, 0CDBBh, 0CDC1h, 0CDD3h, 0CDD9h, 0CDE5h
		dd 0CDE7h, 0CDF1h, 0CDF7h, 0CDFDh, 0CE0Bh, 0CE15h, 0CE21h
		dd 0CE2Fh, 0CE47h, 0CE4Dh, 0CE51h, 0CE65h, 0CE7Bh, 0CE7Dh
		dd 0CE8Fh, 0CE93h, 0CE99h, 0CEA5h, 0CEA7h, 0CEB7h, 0CEC9h
		dd 0CED7h, 0CEDDh, 0CEE3h, 0CEE7h, 0CEEDh, 0CEF5h, 0CF07h
		dd 0CF0Bh, 0CF19h, 0CF37h, 0CF3Bh, 0CF4Dh, 0CF55h, 0CF5Fh
		dd 0CF61h, 0CF65h, 0CF6Dh, 0CF79h, 0CF7Dh, 0CF89h, 0CF9Bh
		dd 0CF9Dh, 0CFA9h, 0CFB3h, 0CFB5h, 0CFC5h, 0CFCDh, 0CFD1h
		dd 0CFEFh, 0CFF1h, 0CFF7h, 0D013h, 0D015h, 0D01Fh, 0D021h
		dd 0D033h, 0D03Dh, 0D04Bh, 0D04Fh, 0D069h, 0D06Fh, 0D081h
		dd 0D085h, 0D099h, 0D09Fh, 0D0A3h, 0D0ABh, 0D0BDh, 0D0C1h
		dd 0D0CDh, 0D0E7h, 0D0FFh, 0D103h, 0D117h, 0D12Dh, 0D12Fh
		dd 0D141h, 0D157h, 0D159h, 0D15Dh, 0D169h, 0D16Bh, 0D171h
		dd 0D177h, 0D17Dh, 0D181h, 0D187h, 0D195h, 0D199h, 0D1B1h
		dd 0D1BDh, 0D1C3h, 0D1D5h, 0D1D7h, 0D1E3h, 0D1FFh, 0D20Dh
		dd 0D211h, 0D217h, 0D21Fh, 0D235h, 0D23Bh, 0D247h, 0D259h
		dd 0D261h, 0D265h, 0D279h, 0D27Fh, 0D283h, 0D289h, 0D28Bh
		dd 0D29Dh, 0D2A3h, 0D2A7h, 0D2B3h, 0D2BFh, 0D2C7h, 0D2E3h
		dd 0D2E9h, 0D2F1h, 0D2FBh, 0D2FDh, 0D315h, 0D321h, 0D32Bh
		dd 0D343h, 0D34Bh, 0D355h, 0D369h, 0D375h, 0D37Bh, 0D387h
		dd 0D393h, 0D397h, 0D3A5h, 0D3B1h, 0D3C9h, 0D3EBh, 0D3FDh
		dd 0D405h, 0D40Fh, 0D415h, 0D427h, 0D42Fh, 0D433h, 0D43Bh
		dd 0D44Bh, 0D459h, 0D45Fh, 0D463h, 0D469h, 0D481h, 0D483h
		dd 0D489h, 0D48Dh, 0D493h, 0D495h, 0D4A5h, 0D4ABh, 0D4B1h
		dd 0D4C5h, 0D4DDh, 0D4E1h, 0D4E3h, 0D4E7h, 0D4F5h, 0D4F9h
		dd 0D50Bh, 0D50Dh, 0D513h, 0D51Fh, 0D523h, 0D531h, 0D535h
		dd 0D537h, 0D549h, 0D559h, 0D55Fh, 0D565h, 0D567h, 0D577h
		dd 0D58Bh, 0D591h, 0D597h, 0D5B5h, 0D5B9h, 0D5C1h, 0D5C7h
		dd 0D5DFh, 0D5EFh, 0D5F5h, 0D5FBh, 0D603h, 0D60Fh, 0D62Dh
		dd 0D631h, 0D643h, 0D655h, 0D65Dh, 0D661h, 0D67Bh, 0D685h
		dd 0D687h, 0D69Dh, 0D6A5h, 0D6AFh, 0D6BDh, 0D6C3h, 0D6C7h
		dd 0D6D9h, 0D6E1h, 0D6EDh, 0D709h, 0D70Bh, 0D711h, 0D715h
		dd 0D721h, 0D727h, 0D73Fh, 0D745h, 0D74Dh, 0D757h, 0D76Bh
		dd 0D77Bh, 0D783h, 0D7A1h, 0D7A7h, 0D7ADh, 0D7B1h, 0D7B3h
		dd 0D7BDh, 0D7CBh, 0D7D1h, 0D7DBh, 0D7FBh, 0D811h, 0D823h
		dd 0D825h, 0D829h, 0D82Bh, 0D82Fh, 0D837h, 0D84Dh, 0D855h
		dd 0D867h, 0D873h, 0D88Fh, 0D891h, 0D8A1h, 0D8ADh, 0D8BFh
		dd 0D8CDh
		dd 0D8D7h, 0D8E9h, 0D8F5h, 0D8FBh, 0D91Bh, 0D925h, 0D933h
		dd 0D939h, 0D943h, 0D945h, 0D94Fh, 0D951h, 0D957h, 0D96Dh
		dd 0D96Fh, 0D973h, 0D979h, 0D981h, 0D98Bh, 0D991h, 0D99Fh
		dd 0D9A5h, 0D9A9h, 0D9B5h, 0D9D3h, 0D9EBh, 0D9F1h, 0D9F7h
		dd 0D9FFh, 0DA05h, 0DA09h, 0DA0Bh, 0DA0Fh, 0DA15h, 0DA1Dh
		dd 0DA23h, 0DA29h, 0DA3Fh, 0DA51h, 0DA59h, 0DA5Dh, 0DA5Fh
		dd 0DA71h, 0DA77h, 0DA7Bh, 0DA7Dh, 0DA8Dh, 0DA9Fh, 0DAB3h
		dd 0DABDh, 0DAC3h, 0DAC9h, 0DAE7h, 0DAE9h, 0DAF5h, 0DB11h
		dd 0DB17h, 0DB1Dh, 0DB23h, 0DB25h, 0DB31h, 0DB3Bh, 0DB43h
		dd 0DB55h, 0DB67h, 0DB6Bh, 0DB73h, 0DB85h, 0DB8Fh, 0DB91h
		dd 0DBADh, 0DBAFh, 0DBB9h, 0DBC7h, 0DBCBh, 0DBCDh, 0DBEBh
		dd 0DBF7h, 0DC0Dh, 0DC27h, 0DC31h, 0DC39h, 0DC3Fh, 0DC49h
		dd 0DC51h, 0DC61h, 0DC6Fh, 0DC75h, 0DC7Bh, 0DC85h, 0DC93h
		dd 0DC99h, 0DC9Dh, 0DC9Fh, 0DCA9h, 0DCB5h, 0DCB7h, 0DCBDh
		dd 0DCC7h, 0DCCFh, 0DCD3h, 0DCD5h, 0DCDFh, 0DCF9h, 0DD0Fh
		dd 0DD15h, 0DD17h, 0DD23h, 0DD35h, 0DD39h, 0DD53h, 0DD57h
		dd 0DD5Fh, 0DD69h, 0DD6Fh, 0DD7Dh, 0DD87h, 0DD89h, 0DD9Bh
		dd 0DDA1h, 0DDABh, 0DDBFh, 0DDC5h, 0DDCBh, 0DDCFh, 0DDE7h
		dd 0DDE9h, 0DDEDh, 0DDF5h, 0DDFBh, 0DE0Bh, 0DE19h, 0DE29h
		dd 0DE3Bh, 0DE3Dh, 0DE41h, 0DE4Dh, 0DE4Fh, 0DE59h, 0DE5Bh
		dd 0DE61h, 0DE6Dh, 0DE77h, 0DE7Dh, 0DE83h, 0DE97h, 0DE9Dh
		dd 0DEA1h, 0DEA7h, 0DECDh, 0DED1h, 0DED7h, 0DEE3h, 0DEF1h
		dd 0DEF5h, 0DF01h, 0DF09h, 0DF13h, 0DF1Fh, 0DF2Bh, 0DF33h
		dd 0DF37h, 0DF3Dh, 0DF4Bh, 0DF55h, 0DF5Bh, 0DF67h, 0DF69h
		dd 0DF73h, 0DF85h, 0DF87h, 0DF99h, 0DFA3h, 0DFABh, 0DFB5h
		dd 0DFB7h, 0DFC3h, 0DFC7h, 0DFD5h, 0DFF1h, 0DFF3h, 0E003h
		dd 0E005h, 0E017h, 0E01Dh, 0E027h, 0E02Dh, 0E035h, 0E045h
		dd 0E053h, 0E071h, 0E07Bh, 0E08Fh, 0E095h, 0E09Fh, 0E0B7h
		dd 0E0B9h, 0E0D5h, 0E0D7h, 0E0E3h, 0E0F3h, 0E0F9h, 0E101h
		dd 0E125h, 0E129h, 0E131h, 0E135h, 0E143h, 0E14Fh, 0E159h
		dd 0E161h, 0E16Dh, 0E171h, 0E177h, 0E17Fh, 0E183h, 0E189h
		dd 0E197h, 0E1ADh, 0E1B5h, 0E1BBh, 0E1BFh, 0E1C1h, 0E1CBh
		dd 0E1D1h, 0E1E5h, 0E1EFh, 0E1F7h, 0E1FDh, 0E203h, 0E219h
		dd 0E22Bh, 0E22Dh, 0E23Dh, 0E243h, 0E257h, 0E25Bh, 0E275h
		dd 0E279h, 0E287h, 0E29Dh, 0E2ABh, 0E2AFh, 0E2BBh, 0E2C1h
		dd 0E2C9h, 0E2CDh, 0E2D3h, 0E2D9h, 0E2F3h, 0E2FDh, 0E2FFh
		dd 0E311h, 0E323h, 0E327h, 0E329h, 0E339h, 0E33Bh, 0E34Dh
		dd 0E351h, 0E357h, 0E35Fh, 0E363h, 0E369h, 0E375h, 0E377h
		dd 0E37Dh, 0E383h, 0E39Fh, 0E3C5h, 0E3C9h, 0E3D1h, 0E3E1h
		dd 0E3FBh, 0E3FFh, 0E401h, 0E40Bh, 0E417h, 0E419h, 0E423h
		dd 0E42Bh, 0E431h, 0E43Bh, 0E447h, 0E449h, 0E453h, 0E455h
		dd 0E46Dh, 0E471h, 0E48Fh, 0E4A9h, 0E4AFh, 0E4B5h, 0E4C7h
		dd 0E4CDh, 0E4D3h, 0E4E9h, 0E4EBh, 0E4F5h, 0E507h, 0E521h
		dd 0E525h, 0E537h, 0E53Fh, 0E545h, 0E54Bh, 0E557h, 0E567h
		dd 0E56Dh, 0E575h, 0E585h, 0E58Bh, 0E593h, 0E5A3h, 0E5A5h
		dd 0E5CFh, 0E609h, 0E611h, 0E615h, 0E61Bh, 0E61Dh, 0E621h
		dd 0E629h, 0E639h, 0E63Fh, 0E653h, 0E657h, 0E663h, 0E66Fh
		dd 0E675h, 0E681h, 0E683h, 0E68Dh, 0E68Fh, 0E695h, 0E6ABh
		dd 0E6ADh, 0E6B7h, 0E6BDh, 0E6C5h, 0E6CBh, 0E6D5h, 0E6E3h
		dd 0E6E9h, 0E6EFh, 0E6F3h, 0E705h, 0E70Dh, 0E717h, 0E71Fh
		dd 0E72Fh, 0E73Dh, 0E747h, 0E749h, 0E753h, 0E755h, 0E761h
		dd 0E767h, 0E76Bh, 0E77Fh, 0E789h, 0E791h, 0E7C5h, 0E7CDh
		dd 0E7D7h, 0E7DDh, 0E7DFh, 0E7E9h, 0E7F1h, 0E7FBh, 0E801h
		dd 0E807h, 0E80Fh, 0E819h, 0E81Bh, 0E831h, 0E833h, 0E837h
		dd 0E83Dh, 0E84Bh, 0E84Fh, 0E851h, 0E869h, 0E875h, 0E879h
		dd 0E893h, 0E8A5h, 0E8A9h, 0E8AFh, 0E8BDh, 0E8DBh, 0E8E1h
		dd 0E8E5h, 0E8EBh, 0E8EDh, 0E903h, 0E90Bh, 0E90Fh, 0E915h
		dd 0E917h, 0E92Dh, 0E933h, 0E93Bh, 0E94Bh, 0E951h, 0E95Fh
		dd 0E963h, 0E969h, 0E97Bh, 0E983h, 0E98Fh, 0E995h, 0E9A1h
		dd 0E9B9h, 0E9D7h, 0E9E7h, 0E9EFh, 0EA11h, 0EA19h, 0EA2Fh
		dd 0EA35h, 0EA43h, 0EA4Dh, 0EA5Fh, 0EA6Dh, 0EA71h, 0EA7Dh
		dd 0EA85h, 0EA89h, 0EAADh, 0EAB3h, 0EAB9h, 0EABBh, 0EAC5h
		dd 0EAC7h, 0EACBh, 0EADFh, 0EAE5h, 0EAEBh, 0EAF5h, 0EB01h
		dd 0EB07h, 0EB09h, 0EB31h, 0EB39h, 0EB3Fh, 0EB5Bh, 0EB61h
		dd 0EB63h, 0EB6Fh, 0EB81h, 0EB85h, 0EB9Dh, 0EBABh, 0EBB1h
		dd 0EBB7h, 0EBC1h, 0EBD5h, 0EBDFh, 0EBEDh, 0EBFDh, 0EC0Bh
		dd 0EC1Bh, 0EC21h, 0EC29h, 0EC4Dh, 0EC51h, 0EC5Dh, 0EC69h
		dd 0EC6Fh, 0EC7Bh, 0ECADh, 0ECB9h, 0ECBFh, 0ECC3h, 0ECC9h
		dd 0ECCFh, 0ECD7h, 0ECDDh, 0ECE7h, 0ECE9h, 0ECF3h, 0ECF5h
		dd 0ED07h, 0ED11h, 0ED1Fh, 0ED2Fh, 0ED37h, 0ED3Dh, 0ED41h
		dd 0ED55h, 0ED59h, 0ED5Bh, 0ED65h, 0ED6Bh, 0ED79h, 0ED8Bh
		dd 0ED95h, 0EDBBh, 0EDC5h, 0EDD7h, 0EDD9h, 0EDE3h, 0EDE5h
		dd 0EDF1h, 0EDF5h, 0EDF7h, 0EDFBh, 0EE09h, 0EE0Fh, 0EE19h
		dd 0EE21h
		dd 0EE49h, 0EE4Fh, 0EE63h, 0EE67h, 0EE73h, 0EE7Bh, 0EE81h
		dd 0EEA3h, 0EEABh, 0EEC1h, 0EEC9h, 0EED5h, 0EEDFh, 0EEE1h
		dd 0EEF1h, 0EF1Bh, 0EF27h, 0EF2Fh, 0EF45h, 0EF4Dh, 0EF63h
		dd 0EF6Bh, 0EF71h, 0EF93h, 0EF95h, 0EF9Bh, 0EF9Fh, 0EFADh
		dd 0EFB3h, 0EFC3h, 0EFC5h, 0EFDBh, 0EFE1h, 0EFE9h, 0F001h
		dd 0F017h, 0F01Dh, 0F01Fh, 0F02Bh, 0F02Fh, 0F035h, 0F043h
		dd 0F047h, 0F04Fh, 0F067h, 0F06Bh, 0F071h, 0F077h, 0F079h
		dd 0F08Fh, 0F0A3h, 0F0A9h, 0F0ADh, 0F0BBh, 0F0BFh, 0F0C5h
		dd 0F0CBh, 0F0D3h, 0F0D9h, 0F0E3h, 0F0E9h, 0F0F1h, 0F0F7h
		dd 0F107h, 0F115h, 0F11Bh, 0F121h, 0F137h, 0F13Dh, 0F155h
		dd 0F175h, 0F17Bh, 0F18Dh, 0F193h, 0F1A5h, 0F1AFh, 0F1B7h
		dd 0F1D5h, 0F1E7h, 0F1EDh, 0F1FDh, 0F209h, 0F20Fh, 0F21Bh
		dd 0F21Dh, 0F223h, 0F227h, 0F233h, 0F23Bh, 0F241h, 0F257h
		dd 0F25Fh, 0F265h, 0F269h, 0F277h, 0F281h, 0F293h, 0F2A7h
		dd 0F2B1h, 0F2B3h, 0F2B9h, 0F2BDh, 0F2BFh, 0F2DBh, 0F2EDh
		dd 0F2EFh, 0F2F9h, 0F2FFh, 0F305h, 0F30Bh, 0F319h, 0F341h
		dd 0F359h, 0F35Bh, 0F35Fh, 0F367h, 0F373h, 0F377h, 0F38Bh
		dd 0F38Fh, 0F3AFh, 0F3C1h, 0F3D1h, 0F3D7h, 0F3FBh, 0F403h
		dd 0F409h, 0F40Dh, 0F413h, 0F421h, 0F425h, 0F42Bh, 0F445h
		dd 0F44Bh, 0F455h, 0F463h, 0F475h, 0F47Fh, 0F485h, 0F48Bh
		dd 0F499h, 0F4A3h, 0F4A9h, 0F4AFh, 0F4BDh, 0F4C3h, 0F4DBh
		dd 0F4DFh, 0F4EDh, 0F503h, 0F50Bh, 0F517h, 0F521h, 0F529h
		dd 0F535h, 0F547h, 0F551h, 0F563h, 0F56Bh, 0F583h, 0F58Dh
		dd 0F595h, 0F599h, 0F5B1h, 0F5B7h, 0F5C9h, 0F5CFh, 0F5D1h
		dd 0F5DBh, 0F5F9h, 0F5FBh, 0F605h, 0F607h, 0F60Bh, 0F60Dh
		dd 0F635h, 0F637h, 0F653h, 0F65Bh, 0F661h, 0F667h, 0F679h
		dd 0F67Fh, 0F689h, 0F697h, 0F69Bh, 0F6ADh, 0F6CBh, 0F6DDh
		dd 0F6DFh, 0F6EBh, 0F709h, 0F70Fh, 0F72Dh, 0F731h, 0F743h
		dd 0F74Fh, 0F751h, 0F755h, 0F763h, 0F769h, 0F773h, 0F779h
		dd 0F781h, 0F787h, 0F791h, 0F79Dh, 0F79Fh, 0F7A5h, 0F7B1h
		dd 0F7BBh, 0F7BDh, 0F7CFh, 0F7D3h, 0F7E7h, 0F7EBh, 0F7F1h
		dd 0F7FFh, 0F805h, 0F80Bh, 0F821h, 0F827h, 0F82Dh, 0F835h
		dd 0F847h, 0F859h, 0F863h, 0F865h, 0F86Fh, 0F871h, 0F877h
		dd 0F87Bh, 0F881h, 0F88Dh, 0F89Fh, 0F8A1h, 0F8ABh, 0F8B3h
		dd 0F8B7h, 0F8C9h, 0F8CBh, 0F8D1h, 0F8D7h, 0F8DDh, 0F8E7h
		dd 0F8EFh, 0F8F9h, 0F8FFh, 0F911h, 0F91Dh, 0F925h, 0F931h
		dd 0F937h, 0F93Bh, 0F941h, 0F94Fh, 0F95Fh, 0F961h, 0F96Dh
		dd 0F971h, 0F977h, 0F99Dh, 0F9A3h, 0F9A9h, 0F9B9h, 0F9CDh
		dd 0F9E9h, 0F9FDh, 0FA07h, 0FA0Dh, 0FA13h, 0FA21h, 0FA25h
		dd 0FA3Fh, 0FA43h, 0FA51h, 0FA5Bh, 0FA6Dh, 0FA7Bh, 0FA97h
		dd 0FA99h, 0FA9Dh, 0FAABh, 0FABBh, 0FABDh, 0FAD9h, 0FADFh
		dd 0FAE7h, 0FAEDh, 0FB0Fh, 0FB17h, 0FB1Bh, 0FB2Dh, 0FB2Fh
		dd 0FB3Fh, 0FB47h, 0FB4Dh, 0FB75h, 0FB7Dh, 0FB8Fh, 0FB93h
		dd 0FBB1h, 0FBB7h, 0FBC3h, 0FBC5h, 0FBE3h, 0FBE9h, 0FBF3h
		dd 0FC01h, 0FC29h, 0FC37h, 0FC41h, 0FC43h, 0FC4Fh, 0FC59h
		dd 0FC61h, 0FC65h, 0FC6Dh, 0FC73h, 0FC79h, 0FC95h, 0FC97h
		dd 0FC9Bh, 0FCA7h, 0FCB5h, 0FCC5h, 0FCCDh, 0FCEBh, 0FCFBh
		dd 0FD0Dh, 0FD0Fh, 0FD19h, 0FD2Bh, 0FD31h, 0FD51h, 0FD55h
		dd 0FD67h, 0FD6Dh, 0FD6Fh, 0FD7Bh, 0FD85h, 0FD97h, 0FD99h
		dd 0FD9Fh, 0FDA9h, 0FDB7h, 0FDC9h, 0FDE5h, 0FDEBh, 0FDF3h
		dd 0FE03h, 0FE05h, 0FE09h, 0FE1Dh, 0FE27h, 0FE2Fh, 0FE41h
		dd 0FE4Bh, 0FE4Dh, 0FE57h, 0FE5Fh, 0FE63h, 0FE69h, 0FE75h
		dd 0FE7Bh, 0FE8Fh, 0FE93h, 0FE95h, 0FE9Bh, 0FE9Fh, 0FEB3h
		dd 0FEBDh, 0FED7h, 0FEE9h, 0FEF3h, 0FEF5h, 0FF07h, 0FF0Dh
		dd 0FF1Dh, 0FF2Bh, 0FF2Fh, 0FF49h, 0FF4Dh, 0FF5Bh, 0FF65h
		dd 0FF71h, 0FF7Fh, 0FF85h, 0FF8Bh, 0FF8Fh, 0FF9Dh, 0FFA7h
		dd 0FFA9h, 0FFC7h, 0FFD9h, 0FFEFh, 0FFF1h, 2 dup(0)
dword_1004C1E0	dd 3F800000h, 3F21849Dh, 3F000000h, 3EDC81A3h, 3EC61192h
		dd 3EB660CAh, 3EAAAAABh, 3EA1849Dh, 3E9A209Bh, 3E94004Eh
		dd 3E8ED19Ch, 3E8A5CA8h, 3E867A00h, 3E830CEEh, 3E800000h
		dd 3E7A85ACh, 3E759166h, 3E710F09h, 3E6CEE69h, 3E692264h
		dd 3E65A02Ch, 3E625ECBh, 3E5F56BBh, 3E5C81A3h, 3E59DA1Ah
		dd 3E575B7Ch, 3E5501C7h, 3E52C983h, 3E50AFA6h, 3E4EB187h
		dd 3E4CCCCDh, 3E4AFF64h, 3E494774h, 3E47A356h, 3E461192h
		dd 3E4490D4h, 3E431FE9h, 3E41BDBDh, 3E406956h, 3E3F21CFh
		dd 3E3DE659h, 3E3CB636h, 3E3B90B8h, 3E3A7540h, 3E39633Bh
		dd 3E385A22h, 3E375978h, 3E3660CAh, 3E356FADh, 3E3485BEh
		dd 3E33A2A1h, 3E32C600h, 3E31EF8Bh, 3E311EF7h, 3E305400h
		dd 3E2F8E63h, 3E2ECDE4h, 3E2E1248h, 3E2D5B5Bh, 3E2CA8EAh
		dd 3E2BFAC4h, 3E2B50BDh, 3E2AAAABh, 2
dword_1004C2E0	dd 0			; DATA XREF: sub_1002BAD0+21Bo
		dd 2 dup(1)
		dd offset dword_1004C1E0+0FCh
aUnknownResultC	db 'unknown result code',0 ; DATA XREF: .data:1004E1F8o
aBooleanTrue	db 'boolean true',0     ; DATA XREF: .data:1004E1FCo
		align 4
aBooleanFalse	db 'boolean false',0    ; DATA XREF: .data:1004E200o
		align 4
aOutOfMemory	db 'out of memory',0    ; DATA XREF: .data:1004E204o
		align 4
aArgumentOutOfR	db 'argument out of range',0 ; DATA XREF: .data:1004E208o
		align 4
aInvalidInputPa	db 'invalid input parameter',0 ; DATA XREF: .data:1004E20Co
aResultIsUndefi	db 'result is undefined',0 ; DATA XREF: .data:1004E210o
a0123456789abcd	db '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/',0
					; DATA XREF: .data:1004E214o
		align 10h
dword_1004C3C0	dd 0			; DATA XREF: sub_1002D300+A3r
					; sub_1002D300+B5r ...
		dd 1, 4, 5, 10h, 11h, 14h, 15h,	40h, 41h, 44h, 45h, 50h
		dd 51h,	54h, 55h
byte_1004C400	db 0			; DATA XREF: sub_1002DC90+Cr
byte_1004C401	db 0			; DATA XREF: sub_1002DC90+4r
					; sub_1002DC90+3Dr ...
		dw 3
		dd 40003h, 10004h, 2 dup(12007h), 2 dup(12008h), 0Ah dup(10001h)
		dd 400C400Ch, 400C0001h, 10001h, 400C0001h, 10001h, 14008h
		dd 10001h, 14007h, 3 dup(10001h), 2 dup(40090001h), 14009h
		dd 10001h, 20090009h, 2	dup(20092009h),	5 dup(10001h)
		dd 30003h, 10003h, 3 dup(10001h), 40001h, 40004h, 4 dup(10001h)
		dd 40084008h, 14008h, 3	dup(10001h), 1050105h, 10105h
		dd 2 dup(10001h), 40090001h, 40094009h,	14009h,	2 dup(10001h)
		dd 2 dup(20092009h), 40094009h,	14h dup(10001h), 10003h
		dd 40001h, 26h dup(10001h)
off_1004C600	dd offset aGenuineintel	; DATA XREF: sub_1002DFB0:loc_1002E040r
					; sub_1002E0C0+79o
					; "GenuineIntel"
		dd offset aAuthenticamd	; "AuthenticAMD"
		dd offset aCyrixinstead	; "CyrixInstead"
		dd offset aCentaurhauls	; "CentaurHauls"
		dd offset aNexgendriven	; "NexGenDriven"
		dd offset aGenuinetmx86	; "GenuineTMx86"
		dd offset aRiseriserise	; "RiseRiseRise"
		dd offset aUmcUmcUmc	; "UMC UMC UMC "
		dd offset aSisSisSis	; "Sis Sis Sis "
		dd offset aGeodeByNsc	; "Geode by NSC"
dword_1004C628	dd 0Ah			; DATA XREF: sub_1002E0C0+B2o
aGenuineintel	db 'GenuineIntel',0     ; DATA XREF: .rdata:off_1004C600o
		align 4
aAuthenticamd	db 'AuthenticAMD',0     ; DATA XREF: .rdata:1004C604o
		align 4
aCyrixinstead	db 'CyrixInstead',0     ; DATA XREF: .rdata:1004C608o
		align 4
aCentaurhauls	db 'CentaurHauls',0     ; DATA XREF: .rdata:1004C60Co
		align 4
aNexgendriven	db 'NexGenDriven',0     ; DATA XREF: .rdata:1004C610o
		align 4
aGenuinetmx86	db 'GenuineTMx86',0     ; DATA XREF: .rdata:1004C614o
		align 4
aRiseriserise	db 'RiseRiseRise',0     ; DATA XREF: .rdata:1004C618o
		align 4
aUmcUmcUmc	db 'UMC UMC UMC ',0     ; DATA XREF: .rdata:1004C61Co
		align 4
aSisSisSis	db 'Sis Sis Sis ',0     ; DATA XREF: .rdata:1004C620o
		align 4
aGeodeByNsc	db 'Geode by NSC',0     ; DATA XREF: .rdata:1004C624o
		align 4
off_1004C6CC	dd offset aNistP256	; DATA XREF: .data:1004E22Co
					; "NIST-P256"
		dd 0
		dd 100h
		dd offset aFfffffff000000 ; "FFFFFFFF0000000100000000000000000000000"...
		dd offset aFfffffff0000_0 ; "FFFFFFFF0000000100000000000000000000000"...
		dd offset a5ac635d8aa3a93 ; "5AC635D8AA3A93E7B3EBBD55769886BC651D06B"...
		dd offset a6b17d1f2e12c42 ; "6B17D1F2E12C4247F8BCE6E563A440F277037D8"...
		dd offset a4fe342e2fe1a7f ; "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE335"...
		dd offset aFfffffff0000_1 ; "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAA"...
		dd 1
off_1004C6F4	dd offset aNistP384	; DATA XREF: .data:1004E230o
					; "NIST-P384"
		dd 0
		dd 180h
		dd offset aFfffffffffffff ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset aFfffffffffff_0 ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset aB3312fa7e23ee7 ; "B3312FA7E23EE7E4988E056BE3F82D19181D9C6"...
		dd offset aAa87ca22be8b05 ; "AA87CA22BE8B05378EB1C71EF320AD746E1D3B6"...
		dd offset a3617de4a96262c ; "3617DE4A96262C6F5D9E98BF9292DC29F8F41DB"...
		dd offset aFfffffffffff_1 ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd 1
off_1004C71C	dd offset aNistP521	; DATA XREF: .data:1004E234o
					; "NIST-P521"
		dd 0
		dd 209h
		dd offset a01ffffffffffff ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset a01ffffffffff_0 ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset a0051953eb9618e ; "0051953EB9618E1C9A1F929A21A0B68540EEA2D"...
		dd offset a00c6858e06b704 ; "00C6858E06B70404E9CD9E3ECB662395B4429C6"...
		dd offset a011839296a789a ; "011839296A789A3BC0045C8A5FB42C7D1BD998F"...
		dd offset a01ffffffffff_1 ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd 1, 0
		dd 0FFFFFFFh, 1FFFFFFFh
dword_1004C750	dd 2, 2	dup(0)		; DATA XREF: sub_10036D70+96o
		dd 0FFFF800h, 1FFFFFFFh, 0FFFFFFFh, 1FBFFFFFh, 1FFFFFFh
		dd 0
dword_1004C774	dd 9 dup(0)		; DATA XREF: sub_100347A0+CFo
dword_1004C798	dd 1FFFFFFFh, 0FFFFFFFh, 1FFFFFFFh, 3FFh, 2 dup(0)
					; DATA XREF: sub_100347A0+108o
		dd 200000h, 0F000000h, 0FFFFFFFh
dword_1004C7BC	dd 1FFFFFFEh, 0FFFFFFFh, 1FFFFFFFh, 7FFh, 2 dup(0)
					; DATA XREF: sub_100347A0+13Ao
		dd 400000h, 0E000000h, 1FFFFFFFh
dword_1004C7E0	dd 11522878h, 0E730D41h, 0DB60179h, 4AFE2FFh, 12883ADDh
					; DATA XREF: sub_100368C0+AAo
		dd 0CADDD88h, 119E7EDCh, 0D4A6EABh, 3120BEEh, 1D2AAC15h
		dd 0F25357Ch, 19E45CDDh, 5C721D0h, 1992C5A5h, 0A237487h
		dd 154BA21h, 14B10BBh, 0AE3FE3h, 0D41A576h, 922FC51h, 234994Fh
		dd 60B60D3h, 164586AEh,	0CE95F18h, 1FE49073h, 3FA36CCh
		dd 5EBCD2Ch, 0B402F2Fh,	15C70BFh, 1561925Ch, 5A26704h
		dd 0DA91E90h, 0CDC1C7Fh, 1EA12446h, 0E1ADE1Eh, 0EC91F22h
		dd 26F7778h, 566847Eh, 0A0BEC9Eh, 234F453h, 1A31F21Ah
		dd 0D85E75Ch, 56C7109h,	0A267A00h, 0B57C050h, 98FB57h
		dd 0AA837CCh, 60C0792h,	0CFA5E19h, 61BAB9Eh, 589E39Bh
		dd 0A324C5h, 7D6DEE7h, 2976E4Bh, 1FC4124Ah, 0A8C244Bh
		dd 1CE86762h, 0CD61C7Eh, 1831C8E0h, 75774E1h, 1D96A5A9h
		dd 843A649h, 0C3AB0FAh,	6E2E7D5h, 7673A2Ah, 178B65E8h
		dd 4003E9Bh, 1A1F11C2h,	7816EAh, 0F643E11h, 58C43DFh, 0F423FC2h
		dd 19633FFAh, 891F2B2h,	123C231Ch, 46ADD8Ch, 54700DDh
		dd 59E2B17h, 172DB40Fh,	83E277Dh, 0B0DD609h, 0FD1DA12h
		dd 35C6E52h, 19EDE20Ch,	0D19E0C0h, 97D0F40h, 0B015B19h
		dd 449E3F5h, 0E10C9Eh, 33AB581h, 56A67ABh, 577734Dh, 1DDDC062h
		dd 0C57B10Dh, 149B39Dh,	26A9E7Bh, 0C35DF9Fh, 48764CDh
		dd 76DBCCAh, 0CA4B366h,	0E9303ABh, 1A7480E7h, 57E9E81h
		dd 1E13EB50h, 0F466CF3h, 6F16B20h, 4BA3173h, 0C168C33h
		dd 15CB5439h, 6A38E11h,	73658BDh, 0B29564Fh, 3F6DC5Bh
		dd 53B97Eh, 1322C4C0h, 65DD7FFh, 3A1E4F6h, 14E614AAh, 9246317h
		dd 1BC83ACAh, 0AD97EEDh, 0D38CE4Ah, 0F82B006h, 341F077h
		dd 0A6ADD89h, 4894ACDh,	9F162D5h, 0F8410EFh, 1B266A56h
		dd 0D7F223h, 3E0CB92h, 0E39B672h, 6A2901Ah, 69A8556h, 7E7C0h
		dd 9B7D8D3h, 309A80h, 1AD05F7Fh, 0C2FB5DDh, 0CBFD41Dh
		dd 9CEB638h, 1051825Ch,	0DA0CF5Bh, 812E881h, 6F35669h
		dd 6A56F2Ch, 1DF8D184h,	345820h, 1477D477h, 1645DB1h, 0BE80C51h
		dd 0C22BE3Eh, 0E35E65Ah, 1AEB7AA0h, 0C375315h, 0F67BC99h
		dd 7FDD7B9h, 191FC1BEh,	61235Dh, 2C184E9h, 1C5A839h, 47A1E26h
		dd 0B7CB456h, 93E225Dh,	14F3C6EDh, 0CCC1AC9h, 17FE37F3h
		dd 4988989h, 1A90C502h,	2F32042h, 0A17769Bh, 0AFD8C7Ch
		dd 8191C6Eh, 1DCDB237h,	16200C0h, 107B32A1h, 66C08DBh
		dd 10D06A02h, 3FC93h, 5620023h,	16722B27h, 68B5C59h, 270FCFCh
		dd 0FAD0ECCh, 0E5DE1C2h, 0EAB466Bh, 2FC513Ch, 407F75Ch
		dd 0BAAB133h, 9705FE9h,	0B88B8E7h, 734C993h, 1E1FF8Fh
		dd 19156970h, 0ABD0F00h, 10469EA7h, 3293AC0h, 0CDC98AAh
		dd 1D843FDh, 0E14BFE8h,	15BE825Fh, 8B5212h, 0EB3FB67h
		dd 81CBD29h, 0BC62F16h,	2B6FCC7h, 0F5A4E29h, 13560B66h
		dd 0C0B6AC2h, 51AE690h,	0D41E271h, 0F3E9BD4h, 1D70AABh
		dd 1029F72h, 73E1C35h, 0EE70FBCh, 0AD81BAFh, 9ECC49Ah
		dd 86C741Eh, 0FE6BE30h,	176752E7h, 23D416h, 1F83DE85h
		dd 27DE188h, 66F70B8h, 181CD51Fh, 96B6E4Ch, 188F2335h
		dd 0A5DF759h, 17A77EB6h, 0FEB0E73h, 154AE914h, 2F3EC51h
		dd 3826B59h, 0B91F17Dh,	1C72949h, 1362BF0Ah, 0E23FDDFh
		dd 0A5614B0h, 0F7D8Fh, 79061h, 823D9D2h, 8213F39h, 1128AE0Bh
		dd 0D095D05h, 0B85C0C2h, 1ECB2EFh, 24DDC84h, 0E35E901h
		dd 18411A4Ah, 0F5DDC3Dh, 3786689h, 52260E8h, 5AE3564h
		dd 542B10Dh, 8D93A45h, 19952AA4h, 996CC41h, 1051A729h
		dd 4BE3499h, 52B23AAh, 109F307Eh, 6F5B6BBh, 1F84E1E7h
		dd 77A0CFAh, 10C4DF3Fh,	25A02EAh, 0B048035h, 0E31DE66h
		dd 0C6ECAA3h, 28EA335h,	2886024h, 1372F020h, 0F55D35h
		dd 15E4684Ch, 0F2A9E17h, 1A4A7529h, 0CB7BEB1h, 0B2A78A1h
		dd 1AB21F1Fh, 6361CCFh,	6C9179Dh, 0B135627h, 1267B974h
		dd 4408BADh, 1CBFF658h,	0E3D6511h, 0C7D76Fh, 1CC7A69h
		dd 0E7EE31Bh, 54FAB4Fh,	2B914Fh, 1AD27A30h, 0CD3579Eh
		dd 0C50124Ch, 50DAA90h,	0B13F72h, 0B06AA75h, 70F5CC6h
		dd 1649E5AAh, 84A5312h,	329043Ch, 41C4011h, 13D32411h
		dd 0B04A838h, 0D760D2Dh, 1713B532h, 0BAA0C03h, 84022ABh
		dd 6BCF5C1h, 2F45379h, 18AE070h, 18C9E11Eh, 20BCA9Ah, 66F496Bh
		dd 3EEF294h, 67500D2h, 0D7F613Ch, 2DBBEBh, 0B741038h, 0E04133Fh
		dd 1582968Dh, 0BE985F7h, 1ACBC1Ah, 1A6A939Fh, 33E50F6h
		dd 0D665ED4h, 0B4B7BD6h, 1E5A3799h, 6B33847h, 17FA56FFh
		dd 65EF930h, 21DC4Ah, 2B37659h,	450FE17h, 0B357B65h, 0DF5EFACh
		dd 15397BEFh, 9D35A7Fh,	112AC15Fh, 624E62Eh, 0A90AE2Fh
		dd 107EECD2h, 1F69BBEh,	77D6BCEh, 5741394h, 13C684FCh
		dd 950C910h, 725522Bh, 0DC78583h, 40EEABBh, 1FDE328Ah
		dd 0BD61D96h, 0D28C387h, 9E77D89h, 12550C40h, 759CB7Dh
		dd 367EF34h, 0AE2A960h,	91B8BDCh, 93462A9h, 0F469EFh, 0B2E9AEFh
		dd 0D2CA771h, 54E1F42h,	7AAA49h, 6316ABBh, 2413C8Eh, 5425BF9h
		dd 1BED3E3Ah, 0F272274h, 1F5E7326h, 6416517h, 0EA27072h
		dd 9CEDEA7h, 6E7633h, 7C91952h,	0D806DCEh, 8E2A7E1h, 0E421E1Ah
		dd 418C9E1h, 1DBC890h, 1B395C36h, 0A1DC175h, 1DC4EF73h
		dd 8956F34h, 0E4B5CF2h,	1B0D3A18h, 3194A36h, 6C2641Fh
		dd 0E44124Ch, 0A2F4EAAh, 0A8C25BAh, 0F927ED7h, 627B614h
		dd 7371CCAh, 0BA16694h,	417BC03h, 7C0A7E3h, 9C35C19h, 1168A205h
		dd 8B6B00Dh, 10E3EDC9h,	9C19BF2h, 5882229h, 1B2B4162h
		dd 0A5CEF1Ah, 1543622Bh, 9BD433Eh, 364E04Dh, 7480792h
		dd 5C9B5B3h, 0E85FF25h,	408EF57h, 1814CFA4h, 121B41Bh
		dd 0D248A0Fh, 3B05222h,	39BB16Ah, 0C75966Dh, 0A038113h
		dd 0A4A1769h, 11FBC6Ch,	917E50Eh, 0EEC3DA8h, 169D6EACh
		dd 10C1699h, 0A416153h,	0F724912h, 15CD60B7h, 4ACBAD9h
		dd 5EFC5FAh, 0F150ED7h,	122B51h, 1104B40Ah, 0CB7F442h
		dd 0FBB28FFh, 6AC53CAh,	196142CCh, 7BF0FA9h, 957651h, 4E0F215h
		dd 0ED439F8h, 3F46BD5h,	5ACE82Fh, 110916B6h, 6DB078h, 0FFD7D57h
		dd 0F2ECAACh, 0CA86DECh, 15D6B2DAh, 965ECC9h, 1C92B4C2h
		dd 1F3811h, 1CB080F5h, 2D8B804h, 19D1C12Dh, 0F20BD46h
		dd 1951FA7h, 0A3656C3h,	523A425h, 0FCD0692h, 0D44DDC8h
		dd 131F0F5Bh, 0AF80E4Ah, 0CD9FC74h, 99BB618h, 2DB944Ch
		dd 0A673090h, 1C210E1h,	178C8D23h, 1474383h, 10B8743Dh
		dd 985A55Bh, 2E74779h, 576138h,	9587927h, 133130FAh, 0BE05516h
		dd 9F4D619h, 0BB62570h,	99EC591h, 0D9468FEh, 1D07782Dh
		dd 0FC72E0Bh, 701B298h,	1863863Bh, 85954B8h, 121A0C36h
		dd 9E7FEDFh, 0F64B429h,	9B9D71Eh, 14E2F5D8h, 0F858D3Ah
		dd 942EEA8h, 0DA5B765h,	6EDAFFFh, 0A9D18CCh, 0C65E4BAh
		dd 1C747E86h, 0E4EA915h, 1981D7A1h, 8395659h, 52ED4E2h
		dd 87D43B7h, 37AB11Bh, 19D292CEh, 0F8D4692h, 18C3053Fh
		dd 8863E13h, 4C146C0h, 6BDF55Ah
		dd 4E4457Dh, 16152289h,	0AC78EC2h, 1A59C5A2h, 2028B97h
		dd 71C2D01h, 295851Fh, 404747Bh, 878558Dh, 7D29AA4h, 13D8341Fh
		dd 8DAEFD7h, 139C972Dh,	6B7EA75h, 0D4A9DDEh, 0FF163D8h
		dd 81D55D7h, 0A5BEF68h,	0B7B30D8h, 0BE73D6Fh, 0AA88141h
		dd 0D976C81h, 7E7A9CCh,	18BEB771h, 0D773CBDh, 13F51951h
		dd 9D0C177h, 1C49A78h
dword_1004D050	dd 7FFFFFF8h		; DATA XREF: sub_100343B0+36r
dword_1004D054	dd 3FFFFFFCh		; DATA XREF: sub_100343B0+50r
dword_1004D058	dd 7FFFFFFCh, 40001FFCh, 7FFFFFFCh, 3FFFFFFCh, 80FFFFFCh
		dd 37FFFFFCh, 7FFFFFFCh, 80000000h, 1, 0FFFFFFFFh, 0
		dd 80000001h, 0FFFFFFFEh, 1, 7FFFFFFFh
dword_1004D094	dd 0			; DATA XREF: sub_10035DB0+91o
		dd 2 dup(8)
		dd offset dword_1004D058+1Ch
		dd 10000000h, 20000000h, 0
xmmword_1004D0B0 xmmword 1		; DATA XREF: sub_10037640+1F1r
xmmword_1004D0C0 xmmword 102030405060708090A0B0C0D0E0Fh	; DATA XREF: sub_10037640+1E4r
					; sub_10037640+1F9r
dword_1004D0D0	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_1003D1E8r
					; ___DllMainCRTStartup+A8r ...
off_1004D0D4	dd offset dword_10050508 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_10050558
		align 10h
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd 0			; SEHandlerTable
		dd 0			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_1004D128	db 'RSDS'               ; DATA XREF: .rdata:1003E194o
					; CV signature
		dd 41B364DAh		; Data1	; GUID
		dw 0CA23h		; Data2
		dw 4C13h		; Data3
		db 0BEh, 2Eh, 0AFh, 90h, 0ECh, 67h, 66h, 0B6h; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-' ; PdbFileName
		db 'tb\security\nss\lib\freebl\freebl3.pdb',0
; Debug	information (type 12)
dword_1004D1A8	dd 0			; DATA XREF: .rdata:1003E1B0o
		dd 2 dup(45h), 3 dup(0)
dword_1004D1C0	dd 2 dup(0)		; DATA XREF: sub_1003D899+2o
					; sub_1003D899+7o
dword_1004D1C8	dd 2 dup(0)		; DATA XREF: sub_1003D8B9+2o
					; sub_1003D8B9+7o
stru_1004D1D0	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1003D1AA
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_1004D1F8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1003D5F0
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_1003D679	; ScopeRecord.FilterFunc
		dd offset loc_1003D68C	; ScopeRecord.HandlerFunc
		align 8
stru_1004D218	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_1003D71D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1003D71D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_1003D7BA	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for freebl3.dll
;
		dd 0			; Characteristics
		dd 56F29A58h		; TimeDateStamp: Wed Mar 23 13:30:00 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aFreebl3_dll	; Name
		dd 1			; Base
		dd 1			; NumberOfFunctions
		dd 1			; NumberOfNames
		dd rva off_1004D268	; AddressOfFunctions
		dd rva off_1004D26C	; AddressOfNames
		dd rva word_1004D270	; AddressOfNameOrdinals
;
; Export Address Table for freebl3.dll
;
off_1004D268	dd rva FREEBL_GetVector	; DATA XREF: .rdata:1004D25Co
;
; Export Names Table for freebl3.dll
;
off_1004D26C	dd rva aFreebl_getvect	; DATA XREF: .rdata:1004D260o
					; "FREEBL_GetVector"
;
; Export Ordinals Table	for freebl3.dll
;
word_1004D270	dw 0			; DATA XREF: .rdata:1004D264o
aFreebl3_dll	db 'freebl3.dll',0      ; DATA XREF: .rdata:1004D24Co
aFreebl_getvect	db 'FREEBL_GetVector',0 ; DATA XREF: .rdata:off_1004D26Co
		align 10h
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_1004D310 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva QueryPerformanceCounter ; Import	Address	Table
__IMPORT_DESCRIPTOR_ADVAPI32 dd	rva off_1004D308 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aAdvapi32_dll	; DLL Name
		dd rva SystemFunction036 ; Import Address Table
__IMPORT_DESCRIPTOR_nss3 dd rva	off_1004D3D8 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNss3_dll	; DLL Name
		dd rva __imp_PORT_GetError_Util	; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_1004D354 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva getenv		; Import Address Table
__IMPORT_DESCRIPTOR_mozglue dd rva off_1004D3C0	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMozglue_dll	; DLL Name
		dd rva free		; Import Address Table
		dd 5 dup(0)
;
; Import names for ADVAPI32.dll
;
off_1004D308	dd rva word_1004D542	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_ADVAPI32o
		dd 0
;
; Import names for KERNEL32.dll
;
off_1004D310	dd rva word_1004D488	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_1004D4A2
		dd rva word_1004D4B6
		dd rva word_1004D4CC
		dd rva word_1004D474
		dd rva word_1004D4F2
		dd rva word_1004D508
		dd rva word_1004D520
		dd rva word_1004D4E2
		dd rva word_1004D460
		dd rva word_1004D9EA
		dd rva word_1004D9CE
		dd rva word_1004D9BA
		dd rva word_1004D9AA
		dd rva word_1004D99A
		dd rva word_1004DA04
		dd 0
;
; Import names for MSVCR120.dll
;
off_1004D354	dd rva word_1004D800	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_1004D95C
		dd rva word_1004D952
		dd rva word_1004D944
		dd rva word_1004D936
		dd rva word_1004D92C
		dd rva word_1004D924
		dd rva word_1004D90C
		dd rva word_1004D8F2
		dd rva word_1004D8DC
		dd rva word_1004D8CE
		dd rva word_1004D8C2
		dd rva word_1004D8B4
		dd rva word_1004D89E
		dd rva word_1004D88C
		dd rva word_1004D85E
		dd rva word_1004D854
		dd rva word_1004D84A
		dd rva word_1004D840
		dd rva word_1004D82E
		dd rva word_1004D814
		dd rva word_1004D80A
		dd rva word_1004D980
		dd rva word_1004D7F6
		dd rva word_1004D7EC
		dd rva word_1004D7E2
		dd 0
;
; Import names for mozglue.dll
;
off_1004D3C0	dd rva word_1004D81C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_mozglueo
		dd rva word_1004D8AC
		dd rva word_1004D868
		dd rva word_1004D836
		dd rva word_1004D824
		dd 0
;
; Import names for nss3.dll
;
off_1004D3D8	dd rva word_1004D5D2	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_nss3o
		dd rva word_1004D7A4
		dd rva word_1004D788
		dd rva word_1004D7AE
		dd rva word_1004D772
		dd rva word_1004D75E
		dd rva word_1004D74C
		dd rva word_1004D5C4
		dd rva word_1004D728
		dd rva word_1004D7C4
		dd rva word_1004D70E
		dd rva word_1004D6F2
		dd rva word_1004D7CE
		dd rva word_1004D6D8
		dd rva word_1004D6C0
		dd rva word_1004D6A8
		dd rva word_1004D690
		dd rva word_1004D676
		dd rva word_1004D660
		dd rva word_1004D648
		dd rva word_1004D738
		dd rva word_1004D632
		dd rva word_1004D61E
		dd rva word_1004D612
		dd rva word_1004D608
		dd rva word_1004D5F6
		dd rva word_1004D5E8
		dd rva word_1004D5B2
		dd rva word_1004D59E
		dd rva word_1004D588
		dd rva word_1004D576
		dd rva word_1004D564
		dd rva word_1004D7BA
		dd 0
word_1004D460	dw 218h			; DATA XREF: .rdata:1004D334o
		db 'GetDiskFreeSpaceA',0
word_1004D474	dw 257h			; DATA XREF: .rdata:1004D320o
		db 'GetLogicalDrives',0
		align 4
word_1004D488	dw 42Dh			; DATA XREF: .rdata:off_1004D310o
		db 'QueryPerformanceCounter',0
word_1004D4A2	dw 209h			; DATA XREF: .rdata:1004D314o
		db 'GetCurrentProcess',0
word_1004D4B6	dw 20Ah			; DATA XREF: .rdata:1004D318o
		db 'GetCurrentProcessId',0
word_1004D4CC	dw 20Eh			; DATA XREF: .rdata:1004D31Co
		db 'GetCurrentThreadId',0
		align 2
word_1004D4E2	dw 2F2h			; DATA XREF: .rdata:1004D330o
		db 'GetTickCount',0
		align 2
word_1004D4F2	dw 323h			; DATA XREF: .rdata:1004D324o
		db 'GlobalMemoryStatus',0
		align 4
word_1004D508	dw 306h			; DATA XREF: .rdata:1004D328o
		db 'GetVolumeInformationA',0
word_1004D520	dw 1CEh			; DATA XREF: .rdata:1004D32Co
		db 'GetComputerNameA',0
		align 4
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:1004D29Co
		align 2
word_1004D542	dw 31Ah			; DATA XREF: .rdata:off_1004D308o
		db 'SystemFunction036',0
aAdvapi32_dll	db 'ADVAPI32.dll',0     ; DATA XREF: .rdata:1004D2B0o
		align 4
word_1004D564	dw 1EBh			; DATA XREF: .rdata:1004D454o
		db 'PORT_Alloc_Util',0
word_1004D576	dw 1F9h			; DATA XREF: .rdata:1004D450o
		db 'PORT_Free_Util',0
		align 4
word_1004D588	dw 201h			; DATA XREF: .rdata:1004D44Co
		db 'PORT_SetError_Util',0
		align 2
word_1004D59E	dw 20Ah			; DATA XREF: .rdata:1004D448o
		db 'PORT_ZAlloc_Util',0
		align 2
word_1004D5B2	dw 20Bh			; DATA XREF: .rdata:1004D444o
		db 'PORT_ZFree_Util',0
word_1004D5C4	dw 22Eh			; DATA XREF: .rdata:1004D3F4o
		db 'PR_CallOnce',0
word_1004D5D2	dw 1FBh			; DATA XREF: .rdata:off_1004D3D8o
		db 'PORT_GetError_Util',0
		align 4
word_1004D5E8	dw 2FEh			; DATA XREF: .rdata:1004D440o
		db 'PR_NewLock',0
		align 2
word_1004D5F6	dw 259h			; DATA XREF: .rdata:1004D43Co
		db 'PR_DestroyLock',0
		align 4
word_1004D608	dw 2F0h			; DATA XREF: .rdata:1004D438o
		db 'PR_Lock',0
word_1004D612	dw 371h			; DATA XREF: .rdata:1004D434o
		db 'PR_Unlock',0
word_1004D61E	dw 118h			; DATA XREF: .rdata:1004D430o
		db 'NSS_SecureMemcmp',0
		align 2
word_1004D632	dw 1FDh			; DATA XREF: .rdata:1004D42Co
		db 'PORT_NewArena_Util',0
		align 4
word_1004D648	dw 1F5h			; DATA XREF: .rdata:1004D424o
		db 'PORT_ArenaZAlloc_Util',0
word_1004D660	dw 1F8h			; DATA XREF: .rdata:1004D420o
		db 'PORT_FreeArena_Util',0
word_1004D676	dw 397h			; DATA XREF: .rdata:1004D41Co
		db 'SECITEM_AllocItem_Util',0
		align 10h
word_1004D690	dw 39Ch			; DATA XREF: .rdata:1004D418o
		db 'SECITEM_CopyItem_Util',0
word_1004D6A8	dw 3A1h			; DATA XREF: .rdata:1004D414o
		db 'SECITEM_FreeItem_Util',0
word_1004D6C0	dw 1EDh			; DATA XREF: .rdata:1004D410o
		db 'PORT_ArenaAlloc_Util',0
		align 4
word_1004D6D8	dw 3E6h			; DATA XREF: .rdata:1004D40Co
		db 'SECOID_FindOIDTag_Util',0
		align 2
word_1004D6F2	dw 39Ah			; DATA XREF: .rdata:1004D404o
		db 'SECITEM_CompareItem_Util',0
		align 2
word_1004D70E	dw 3A7h			; DATA XREF: .rdata:1004D400o
		db 'SECITEM_ZfreeItem_Util',0
		align 4
word_1004D728	dw 2FDh			; DATA XREF: .rdata:1004D3F8o
		db 'PR_NewCondVar',0
word_1004D738	dw 257h			; DATA XREF: .rdata:1004D428o
		db 'PR_DestroyCondVar',0
word_1004D74C	dw 376h			; DATA XREF: .rdata:1004D3F0o
		db 'PR_WaitCondVar',0
		align 2
word_1004D75E	dw 30Eh			; DATA XREF: .rdata:1004D3ECo
		db 'PR_NotifyCondVar',0
		align 2
word_1004D772	dw 30Dh			; DATA XREF: .rdata:1004D3E8o
		db 'PR_NotifyAllCondVar',0
word_1004D788	dw 2ACh			; DATA XREF: .rdata:1004D3E0o
		db 'PR_GetLibraryFilePathname',0
word_1004D7A4	dw 310h			; DATA XREF: .rdata:1004D3DCo
		db 'PR_Open',0
word_1004D7AE	dw 239h			; DATA XREF: .rdata:1004D3E4o
		db 'PR_Close',0
		align 2
word_1004D7BA	dw 32Dh			; DATA XREF: .rdata:1004D458o
		db 'PR_Read',0
word_1004D7C4	dw 33Ah			; DATA XREF: .rdata:1004D3FCo
		db 'PR_Seek',0
word_1004D7CE	dw 28Dh			; DATA XREF: .rdata:1004D408o
		db 'PR_Free',0
aNss3_dll	db 'nss3.dll',0         ; DATA XREF: .rdata:1004D2C4o
		align 2
word_1004D7E2	dw 4E8h			; DATA XREF: .rdata:1004D3B8o
		db '_time64',0
word_1004D7EC	dw 6E6h			; DATA XREF: .rdata:1004D3B4o
		db 'memcpy',0
		align 2
word_1004D7F6	dw 6EAh			; DATA XREF: .rdata:1004D3B0o
		db 'memset',0
		align 10h
word_1004D800	dw 693h			; DATA XREF: .rdata:off_1004D354o
		db 'getenv',0
		align 2
word_1004D80A	dw 73Bh			; DATA XREF: .rdata:1004D3A8o
		db 'strncmp',0
word_1004D814	dw 707h			; DATA XREF: .rdata:1004D3A4o
		db 'rand',0
		align 4
word_1004D81C	dw 4Eh			; DATA XREF: .rdata:off_1004D3C0o
		db 'free',0
		align 4
word_1004D824	dw 56h			; DATA XREF: .rdata:1004D3D0o
		db 'malloc',0
		align 2
word_1004D82E	dw 5DCh			; DATA XREF: .rdata:1004D3A0o
		db 'abort',0
word_1004D836	dw 4Dh			; DATA XREF: .rdata:1004D3CCo
		db 'calloc',0
		align 10h
word_1004D840	dw 6AAh			; DATA XREF: .rdata:1004D39Co
		db 'isupper',0
word_1004D84A	dw 6A6h			; DATA XREF: .rdata:1004D398o
		db 'islower',0
word_1004D854	dw 6A3h			; DATA XREF: .rdata:1004D394o
		db 'isdigit',0
word_1004D85E	dw 75Dh			; DATA XREF: .rdata:1004D390o
		db 'toupper',0
word_1004D868	dw 5Ch			; DATA XREF: .rdata:1004D3C8o
		db 'strdup',0
		align 2
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:1004D2D8o
		align 10h
aMozglue_dll	db 'mozglue.dll',0      ; DATA XREF: .rdata:1004D2ECo
word_1004D88C	dw 16Fh			; DATA XREF: .rdata:1004D38Co
		db '__CppXcptFilter',0
word_1004D89E	dw 217h			; DATA XREF: .rdata:1004D388o
		db '_amsg_exit',0
		align 4
word_1004D8AC	dw 4Fh			; DATA XREF: .rdata:1004D3C4o
		db 'frex',0
		align 4
word_1004D8B4	dw 3A5h			; DATA XREF: .rdata:1004D384o
		db '_malloc_crt',0
word_1004D8C2	dw 30Ch			; DATA XREF: .rdata:1004D380o
		db '_initterm',0
word_1004D8CE	dw 30Dh			; DATA XREF: .rdata:1004D37Co
		db '_initterm_e',0
word_1004D8DC	dw 250h			; DATA XREF: .rdata:1004D378o
		db '_crt_debugger_hook',0
		align 2
word_1004D8F2	dw 1ACh			; DATA XREF: .rdata:1004D374o
		db '__crtUnhandledException',0
word_1004D90C	dw 1ABh			; DATA XREF: .rdata:1004D370o
		db '__crtTerminateProcess',0
word_1004D924	dw 394h			; DATA XREF: .rdata:1004D36Co
		db '_lock',0
word_1004D92C	dw 504h			; DATA XREF: .rdata:1004D368o
		db '_unlock',0
word_1004D936	dw 22Eh			; DATA XREF: .rdata:1004D364o
		db '_calloc_crt',0
word_1004D944	dw 1AEh			; DATA XREF: .rdata:1004D360o
		db '__dllonexit',0
word_1004D952	dw 43Ah			; DATA XREF: .rdata:1004D35Co
		db '_onexit',0
word_1004D95C	dw 18Ch			; DATA XREF: .rdata:1004D358o
		db '__clean_type_info_names_internal',0
		align 10h
word_1004D980	dw 27Ah			; DATA XREF: .rdata:1004D3ACo
		db '_except_handler4_common',0
word_1004D99A	dw 121h			; DATA XREF: .rdata:1004D348o
		db 'EncodePointer',0
word_1004D9AA	dw 0FEh			; DATA XREF: .rdata:1004D344o
		db 'DecodePointer',0
word_1004D9BA	dw 367h			; DATA XREF: .rdata:1004D340o
		db 'IsDebuggerPresent',0
word_1004D9CE	dw 36Dh			; DATA XREF: .rdata:1004D33Co
		db 'IsProcessorFeaturePresent',0
word_1004D9EA	dw 2D6h			; DATA XREF: .rdata:1004D338o
		db 'GetSystemTimeAsFileTime',0
word_1004DA04	dw 113h			; DATA XREF: .rdata:1004D34Co
		db 'DisableThreadLibraryCalls',0
		align 800h
_rdata		ends

; Section 3. (virtual address 0004E000)
; Virtual size			: 00004930 (  18736.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 0004CA00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 1004E000h
dword_1004E000	dd 0			; DATA XREF: sub_10018DF0+30r
		dd 2 dup(0)
		dd offset off_10044390
		dd offset off_100443B8
		dd offset off_100443E0
		dd 35h dup(0)
dword_1004E0EC	dd 1			; DATA XREF: sub_1001ED10+183r
					; sub_1001ED10:loc_1001EF4Dr
dword_1004E0F0	dd 1			; DATA XREF: sub_10026B80+13Cr
					; sub_10026B80+199w ...
		dd 0
		dd 2010100h, 2 dup(3020201h), 4030302h,	3020201h, 2 dup(4030302h)
		dd 5040403h, 3020201h, 2 dup(4030302h),	5040403h, 4030302h
		dd 2 dup(5040403h), 6050504h, 3020201h,	2 dup(4030302h)
		dd 5040403h, 4030302h, 2 dup(5040403h),	6050504h, 4030302h
		dd 2 dup(5040403h), 6050504h, 5040403h,	2 dup(6050504h)
		dd 7060605h, 3020201h, 2 dup(4030302h),	5040403h, 4030302h
		dd 2 dup(5040403h), 6050504h, 4030302h,	2 dup(5040403h)
		dd 6050504h, 5040403h, 2 dup(6050504h),	7060605h, 4030302h
		dd 2 dup(5040403h), 6050504h, 5040403h,	2 dup(6050504h)
		dd 7060605h, 5040403h, 2 dup(6050504h),	7060605h, 6050504h
		dd 2 dup(7060605h), 8070706h
		dd offset aUnknownResultC ; "unknown result code"
		dd offset aBooleanTrue	; "boolean true"
		dd offset aBooleanFalse	; "boolean false"
		dd offset aOutOfMemory	; "out of memory"
		dd offset aArgumentOutOfR ; "argument out of range"
		dd offset aInvalidInputPa ; "invalid input parameter"
		dd offset aResultIsUndefi ; "result is undefined"
		dd offset a0123456789abcd ; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabc"...
dword_1004E218	dd 40h			; DATA XREF: sub_10028FD0:loc_10028FE3r
					; sub_100295D0:loc_1002966Er ...
dword_1004E21C	dd 0FFFFFFFFh		; DATA XREF: sub_1002D930r
					; sub_1002D930+11w ...
dword_1004E220	dd 0			; DATA XREF: sub_1002E9C0+Cr
		dd 2 dup(0)
		dd offset off_1004C6CC
		dd offset off_1004C6F4
		dd offset off_1004C71C
		dd 36h dup(0)
dword_1004E310	dd 4 dup(0C0F0E0Dh)	; DATA XREF: sub_10038E20+1Eo
dword_1004E320	dd 4 dup(4070605h)	; DATA XREF: sub_10038FD0+30o
dword_1004E330	dd 4 dup(0C0F0E0Dh)	; DATA XREF: sub_100391D0+24o
dword_1004E340	dd 4 dup(1)		; DATA XREF: sub_10038E20+14o
					; sub_10038FD0+26o ...
dword_1004E350	dd 4 dup(1Bh)		; DATA XREF: sub_10038E20+6Do
xmmword_1004E360 xmmword 1		; DATA XREF: sub_1003B630+9Er
					; sub_1003B630+AEr ...
xmmword_1004E370 xmmword 2		; DATA XREF: sub_1003B630+A6r
					; sub_1003B630+B6r ...
xmmword_1004E380 xmmword 102030405060708090A0B0C0D0E0Fh	; DATA XREF: sub_1003AE40+A1r
					; sub_1003AF00+27r ...
		dd 4 dup(0F0F0F0Fh)
xmmword_1004E3A0 xmmword 0C2000000000000000000000000000001h ; DATA XREF: sub_1003AE40+77r
					; sub_1003AE40+8Ar ...
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_10001120+6r
					; sub_100014F0+6r ...
dword_1004E3B4	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_1003D7DB+29w ...
		align 10h
dword_1004E3C0	dd 1			; DATA XREF: sub_1003D415+11w
					; sub_1003D415+33r ...
		align 10h
dword_1004E3D0	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
		align 10h
; void *dword_1004E3E0
dword_1004E3E0	dd 0			; DATA XREF: sub_1000C220+8r
					; sub_1000C240+10r ...
dword_1004E3E4	dd 0			; DATA XREF: sub_1000C240+5o
					; sub_1000C260+25w
dword_1004E3E8	dd 0			; DATA XREF: sub_1000C260+2Fw
dword_1004E3EC	dd 0			; DATA XREF: sub_1000C260+43w
dword_1004E3F0	dd 4 dup(0)		; DATA XREF: sub_1000CE20+1Co
		dd 833h	dup(?)
dword_100504CC	dd ?			; DATA XREF: sub_1000EE40:loc_1000EEB9r
					; sub_1000EE40+D1w ...
dword_100504D0	dd ?			; DATA XREF: sub_1000EC70+136r
					; sub_1000EE40+159w ...
dword_100504D4	dd ?			; DATA XREF: sub_1000EE40+11Aw
					; sub_1000EE40+12Bw ...
dword_100504D8	dd ?			; DATA XREF: sub_1000EE40+E5w
					; sub_1000EE40+149w ...
dword_100504DC	dd ?			; DATA XREF: sub_1000EC70+C3r
					; sub_1000EE40:loc_1000EF9Fw ...
dword_100504E0	dd ?			; DATA XREF: sub_1001D600:loc_1001D699r
					; sub_1001D600:__cfltcvt_initw	...
dword_100504E4	dd ?			; DATA XREF: sub_1001D600:loc_1001D67Br
					; sub_1001D600+8Fw ...
dword_100504E8	dd ?			; DATA XREF: sub_1001E8E0+B9w
					; sub_1001E8E0+215r ...
dword_100504EC	dd ?			; DATA XREF: sub_1001D600+Er
					; sub_1001D600+14o ...
dword_100504F0	dd ?			; DATA XREF: sub_1001ECB0+49w
dword_100504F4	dd ?			; DATA XREF: sub_1001D5C0+5o
					; sub_1001D600r ...
dword_100504F8	dd ?			; DATA XREF: sub_1001D600+C0w
dword_100504FC	dd ?			; DATA XREF: sub_1001D600+CAw
dword_10050500	dd ?			; DATA XREF: sub_10026B80:loc_10026D07r
					; sub_10026B80:loc_10026D23w
dword_10050504	dd ?			; DATA XREF: sub_1003CF90+12r
					; sub_1003CF90+25w ...
dword_10050508	dd ?			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_1004D0D4o
dword_1005050C	dd ?			; DATA XREF: ___report_gsfailure+A9w
		dd ?
dword_10050514	dd ?			; DATA XREF: ___report_gsfailure+9Aw
dword_10050518	dd ?			; DATA XREF: ___report_gsfailure+B3w
dword_1005051C	dd ?			; DATA XREF: ___report_gsfailure+C3w
		dd 0Eh dup(?)
dword_10050558	dd ?			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:1004D0D8o
		dd 22h dup(?)
word_100505E4	dw ?			; DATA XREF: ___report_gsfailure+5Fw
		align 4
word_100505E8	dw ?			; DATA XREF: ___report_gsfailure+58w
		align 4
word_100505EC	dw ?			; DATA XREF: ___report_gsfailure+51w
		align 10h
word_100505F0	dw ?			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_100505F4	dd ?			; DATA XREF: ___report_gsfailure+36w
dword_100505F8	dd ?			; DATA XREF: ___report_gsfailure+30w
dword_100505FC	dd ?			; DATA XREF: ___report_gsfailure+2Aw
dword_10050600	dd ?			; DATA XREF: ___report_gsfailure+24w
dword_10050604	dd ?			; DATA XREF: ___report_gsfailure+1Ew
dword_10050608	dd ?			; DATA XREF: ___report_gsfailure:loc_1003D333w
dword_1005060C	dd ?			; DATA XREF: ___report_gsfailure+70w
dword_10050610	dd ?			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_10050614	dw ?			; DATA XREF: ___report_gsfailure+43w
		align 4
dword_10050618	dd ?			; DATA XREF: ___report_gsfailure+67w
dword_1005061C	dd ?			; DATA XREF: ___report_gsfailure+80w
word_10050620	dw ?			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 80h dup(?)
dword_10050824	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_10050828	dd ?			; DATA XREF: .text:__ftol2_sser
					; .text:__ftol2_sse_excptr ...
dword_1005082C	dd ?			; DATA XREF: sub_1003D415:loc_1003D4DCr
					; sub_1003D415+D0w ...
dword_10050830	dd 2 dup(?)		; DATA XREF: sub_1003D8E6o
dword_10050838	dd ?			; DATA XREF: sub_1001D5F0+4w
		align 10h
dword_10050840	dd 2Ah dup(?)		; DATA XREF: sub_1000BDA0+2Bo
					; sub_1000BDA0+4Co ...
		db 2 dup(?)
byte_100508EA	db ?			; DATA XREF: sub_1000BDA0:loc_1000BDBAr
					; sub_1000BEC0+39w ...
		align 4
		dd 80Bh	dup(?)
dword_10052918	dd ?			; DATA XREF: sub_1000BDA0r
					; sub_1000BE00+AFw ...
dword_1005291C	dd ?			; DATA XREF: sub_1003CF90+20o
					; sub_1003CF90+112o ...
dword_10052920	dd ?			; DATA XREF: sub_1003CF90:loc_1003CFE3r
					; sub_1003CF90:loc_1003D0ACw ...
; PVOID	dword_10052924
dword_10052924	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_1003CF90+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_1003CF90:loc_1003CFF9r ...
dword_1005292C	dd ?			; DATA XREF: sub_1003CF90:loc_1003D150r
					; sub_1003CF90+1C9o ...
		align 800h
_data		ends


		end DllEntryPoint
