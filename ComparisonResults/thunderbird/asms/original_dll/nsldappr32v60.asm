;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6E6B16D1F3FCD325F557483A9B9FE3B9
; Input	CRC32 :	E9B78825

; File Name   :	C:\compspace\compare\thunderbird\dlls\original\nsldappr32v60.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 000021B2 (   8626.)
; Section size in file		: 00002200 (   8704.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; PDB File Name	: c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-tb\ldap\sdks\c-sdk\ldap\libraries\libprldap\nsldappr32v60.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_10001000	proc near		; DATA XREF: sub_100011E0+36o

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah
var_28		= dword	ptr -28h
var_24		= xmmword ptr -24h
var_14		= xmmword ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 34h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		mov	eax, [esp+34h+arg_0]
		push	ebx
		mov	ebx, [esp+38h+arg_10]
		push	esi
		mov	esi, [esp+3Ch+arg_C]
		push	edi
		mov	edi, [esp+40h+arg_18]
		test	edi, edi
		jnz	short loc_10001039

loc_10001025:				; CODE XREF: sub_10001000+5Aj
					; sub_10001000+89j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10001039:				; CODE XREF: sub_10001000+23j
		lea	ecx, [esp+40h+var_24]
		xorps	xmm0, xmm0
		push	ecx
		push	eax
		movdqu	[esp+48h+var_24], xmm0
		movdqu	[esp+48h+var_14], xmm0
		call	ds:PR_StringToNetAddr
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10001025
		push	0
		call	ds:PR_htons
		add	esp, 4
		mov	word ptr [esp+40h+var_24+2], ax
		lea	eax, [esp+40h+var_34]
		push	eax
		push	[esp+44h+arg_14]
		lea	eax, [esp+48h+var_24]
		push	ebx
		push	eax
		call	ds:PR_GetHostByAddr
		add	esp, 10h
		mov	[edi], eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10001025
		mov	ecx, [esp+40h+var_34]
		mov	eax, esi
		mov	[esi], ecx
		mov	ecx, [esp+40h+var_30]
		mov	[esi+4], ecx
		movsx	ecx, [esp+40h+var_2C]
		mov	[esi+8], ecx
		movsx	ecx, [esp+40h+var_2A]
		mov	[esi+0Ch], ecx
		mov	ecx, [esp+40h+var_28]
		mov	[esi+10h], ecx
		mov	ecx, [esp+40h+var_4]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
sub_10001000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100010D0	proc near		; DATA XREF: sub_100011E0+2Eo

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 10h
		push	esi
		mov	esi, [esp+14h+arg_10]
		test	esi, esi
		jz	short loc_1000112E
		lea	eax, [esp+14h+var_10]
		push	eax
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	30h
		push	17h
		push	[esp+28h+arg_0]
		call	ds:PR_GetIPNodeByName
		add	esp, 18h
		mov	[esi], eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000112E
		mov	eax, [esp+14h+arg_4]
		mov	ecx, [esp+14h+var_10]
		pop	esi
		mov	[eax], ecx
		mov	ecx, [esp+10h+var_C]
		mov	[eax+4], ecx
		movsx	ecx, [esp+10h+var_8]
		mov	[eax+8], ecx
		movsx	ecx, [esp+10h+var_6]
		mov	[eax+0Ch], ecx
		mov	ecx, [esp+10h+var_4]
		mov	[eax+10h], ecx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000112E:				; CODE XREF: sub_100010D0+Aj
					; sub_100010D0+2Fj
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
sub_100010D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001140(LDAP	*ld, int, int, int)
sub_10001140	proc near		; DATA XREF: sub_100011E0+18o

var_28		= dword	ptr -28h
var_24		= xmmword ptr -24h
var_4		= dword	ptr -4
ld		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 28h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		mov	eax, [esp+28h+ld]
		push	esi
		mov	esi, [esp+2Ch+arg_4]
		push	edi
		mov	edi, [esp+30h+arg_8]
		test	eax, eax
		jz	short loc_100011C1
		lea	ecx, [esp+30h+var_28]
		push	ecx		; int
		push	eax		; ld
		call	sub_10001B30
		add	esp, 8
		test	eax, eax
		jnz	short loc_100011C1
		lea	eax, [esp+30h+var_24]
		push	eax
		mov	eax, [esp+34h+var_28]
		push	dword ptr [eax]
		call	ds:PR_GetPeerName
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100011C1
		push	[esp+30h+arg_C]
		movdqu	xmm0, [esp+34h+var_24]
		lea	eax, [esp+34h+var_24]
		push	edi
		push	eax
		movdqu	xmmword	ptr [esi], xmm0
		call	ds:PR_NetAddrToString
		inc	eax
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		dec	eax
		pop	esi
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_100011C1:				; CODE XREF: sub_10001140+1Ej
					; sub_10001140+30j ...
		mov	ecx, [esp+30h+var_4]
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
sub_10001140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100011E0(LDAP	*ld)
sub_100011E0	proc near		; CODE XREF: prldap_init+37p
					; prldap_install_routines+28p

var_14		= xmmword ptr -14h
var_4		= dword	ptr -4
ld		= dword	ptr  4

		sub	esp, 14h
		lea	eax, [esp+14h+var_14]
		mov	[esp+14h+var_4], 0
		push	eax		; invalue
		push	60h		; option
		push	[esp+1Ch+ld]	; ld
		xorps	xmm0, xmm0
		mov	[esp+20h+var_4], offset	sub_10001140
		movdqu	[esp+20h+var_14], xmm0
		mov	dword ptr [esp+20h+var_14+4], 400h
		mov	dword ptr [esp+20h+var_14+8], offset sub_100010D0
		mov	dword ptr [esp+20h+var_14+0Ch],	offset sub_10001000
		call	ldap_set_option
		neg	eax
		sbb	eax, eax
		add	esp, 14h
		retn
sub_100011E0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

loc_10001230:				; DATA XREF: sub_100023D0+51o
		jmp	ds:PR_GetOSError
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001240	proc near		; CODE XREF: .text:100012BAp
					; sub_100012E0+191p ...
		call	ds:PR_GetError
		mov	ecx, dword_10005000
		mov	edx, eax
		xor	eax, eax
		cmp	ecx, 0FFFFE8DCh
		jz	short loc_1000126C

loc_10001258:				; CODE XREF: sub_10001240+2Aj
		cmp	ecx, edx
		jz	short loc_10001270
		mov	ecx, dword_10005008[eax*8]
		inc	eax
		cmp	ecx, 0FFFFE8DCh
		jnz	short loc_10001258

loc_1000126C:				; CODE XREF: sub_10001240+16j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10001270:				; CODE XREF: sub_10001240+1Aj
		mov	eax, dword_10005004[eax*8]
		retn
sub_10001240	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001280	proc near		; CODE XREF: .text:100012C0p
					; sub_100012E0+2Ap ...

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	ds:PR_GetError
		push	eax
		call	ds:PR_SetError
		add	esp, 8
		retn
sub_10001280	endp

; ---------------------------------------------------------------------------
		align 10h

loc_100012A0:				; DATA XREF: sub_10001560+43o
		push	esi
		push	edi
		mov	edi, [esp+10h]
		xor	esi, esi
		push	dword ptr [edi]
		call	ds:PR_Close
		add	esp, 4
		test	eax, eax
		jz	short loc_100012C8
		or	esi, 0FFFFFFFFh
		call	sub_10001240
		push	eax
		call	sub_10001280
		add	esp, 4

loc_100012C8:				; CODE XREF: .text:100012B5j
		lea	eax, [esp+10h]
		test	eax, eax
		jz	short loc_100012DA
		push	edi
		call	ds:PR_Free
		add	esp, 4

loc_100012DA:				; CODE XREF: .text:100012CEj
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100012E0	proc near		; DATA XREF: sub_10001560+3Bo
					; prldap_is_installed+39o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_50		= byte ptr -50h
Block		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= xmmword ptr -38h
var_28		= xmmword ptr -28h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+38h+var_4], eax
		mov	eax, [esp+38h+arg_14]
		push	ebp
		mov	ebp, [esp+3Ch+arg_0]
		push	edi
		mov	edi, [esp+40h+arg_C]
		mov	dword ptr [esp+40h+var_38+0Ch],	eax
		test	edi, 2
		jz	short loc_10001326
		push	16h
		call	sub_10001280
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		mov	ecx, [esp+38h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_10001326:				; CODE XREF: sub_100012E0+26j
		push	ebx
		push	0Ch
		push	1
		call	ds:PR_Calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	loc_100014C1
		mov	ecx, [esp+44h+arg_10]
		test	ecx, ecx
		jz	short loc_1000134C
		mov	ecx, [ecx+8]
		mov	[ebx+4], ecx

loc_1000134C:				; CODE XREF: sub_100012E0+64j
		push	esi
		lea	eax, [esp+48h+var_38+8]
		or	esi, 0FFFFFFFFh
		push	eax
		lea	eax, [esp+4Ch+var_38+4]
		push	eax
		lea	eax, [esp+50h+var_38]
		push	eax
		push	[esp+54h+arg_4]
		push	ebp
		call	ldap_x_hostlist_first
		lea	esp, [esp+0]

loc_10001370:				; CODE XREF: sub_100012E0+170j
		test	eax, eax
		jnz	loc_10001456
		mov	eax, [esp+5Ch+Block]
		test	eax, eax
		jz	loc_10001464
		push	8020h
		push	0
		push	eax
		call	ds:PR_GetAddrInfoByName
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	short loc_100013F5
		xor	edi, edi
		lea	ecx, [ecx+0]

loc_100013A0:				; CODE XREF: sub_100012E0+103j
		lea	eax, [esp+5Ch+var_38]
		xorps	xmm0, xmm0
		push	eax
		push	[esp+60h+var_48]
		movdqu	[esp+64h+var_38], xmm0
		push	ebp
		push	edi
		movdqu	[esp+6Ch+var_28], xmm0
		call	ds:PR_EnumerateAddrInfo
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_100013E5
		push	[esp+5Ch+var_4]
		lea	eax, [esp+60h+var_38]
		push	[esp+60h+var_8]
		push	eax
		push	ebx
		call	sub_10001BE0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_100013A0

loc_100013E5:				; CODE XREF: sub_100012E0+E7j
		push	ebp
		call	ds:PR_FreeAddrInfo
		mov	edi, [esp+60h+var_4]
		add	esp, 4
		jmp	short loc_10001432
; ---------------------------------------------------------------------------

loc_100013F5:				; CODE XREF: sub_100012E0+B9j
		lea	eax, [esp+5Ch+var_38]
		push	eax
		push	[esp+60h+Block]
		call	ds:PR_StringToNetAddr
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001432
		push	[esp+5Ch+var_48]
		call	ds:PR_htons
		add	esp, 4
		mov	word ptr [esp+5Ch+var_38+2], ax
		lea	eax, [esp+5Ch+var_38]
		push	edi
		push	[esp+60h+var_8]
		push	eax
		push	ebx
		call	sub_10001BE0
		add	esp, 10h
		mov	esi, eax

loc_10001432:				; CODE XREF: sub_100012E0+113j
					; sub_100012E0+129j
		push	[esp+5Ch+Block]	; Block
		call	ldap_memfree
		push	[esp+60h+var_48]
		lea	eax, [esp+64h+Block]
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	ldap_x_hostlist_next
		test	esi, esi
		js	loc_10001370

loc_10001456:				; CODE XREF: sub_100012E0+92j
		mov	eax, [esp+6Ch+var_5C]
		test	eax, eax
		jz	short loc_10001464
		push	eax		; Block
		call	ldap_memfree

loc_10001464:				; CODE XREF: sub_100012E0+9Ej
					; sub_100012E0+17Cj
		push	[esp+70h+var_58]
		call	ldap_x_hostlist_statusfree
		test	esi, esi
		jns	short loc_100014A6
		call	sub_10001240
		push	eax
		call	sub_10001280
		lea	eax, [esp+78h+var_54]
		add	esp, 4
		test	eax, eax
		jz	short loc_100014AC
		push	ebx
		call	ds:PR_Free
		add	esp, 4
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		mov	ecx, dword ptr [esp+64h+var_38+8]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_100014A6:				; CODE XREF: sub_100012E0+18Fj
		mov	eax, [esp+74h+var_58]
		mov	[eax], ebx

loc_100014AC:				; CODE XREF: sub_100012E0+1A5j
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		mov	ecx, dword ptr [esp+64h+var_38+8]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_100014C1:				; CODE XREF: sub_100012E0+58j
		call	sub_10001240
		push	eax
		call	sub_10001280
		mov	ecx, [esp+48h+var_4]
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	edi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
sub_100012E0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

loc_100014F0:				; DATA XREF: sub_10001560+67o
		lea	eax, [esp+8]
		test	eax, eax
		jz	short locret_10001522
		push	esi
		mov	esi, [esp+0Ch]
		test	esi, esi
		jz	short loc_10001521
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10001517
		push	eax
		call	ds:PR_Free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_10001517:				; CODE XREF: .text:10001505j
		push	esi
		call	ds:PR_Free
		add	esp, 4

loc_10001521:				; CODE XREF: .text:100014FFj
		pop	esi

locret_10001522:			; CODE XREF: .text:100014F6j
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001530	proc near		; CODE XREF: prldap_get_session_option+43p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		test	edx, edx
		jnz	short loc_1000153E
		mov	eax, 59h
		retn
; ---------------------------------------------------------------------------

loc_1000153E:				; CODE XREF: sub_10001530+6j
		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1000154F
		mov	ecx, dword_10005288
		mov	[edx], ecx
		retn
; ---------------------------------------------------------------------------

loc_1000154F:				; CODE XREF: sub_10001530+14j
		mov	eax, [eax+8]
		mov	[edx], eax
		xor	eax, eax
		retn
sub_10001530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001560(LDAP	*ld, int)
sub_10001560	proc near		; CODE XREF: prldap_init+19p
					; prldap_install_routines+Ap

invalue		= xmmword ptr -28h
var_18		= xmmword ptr -18h
var_8		= qword	ptr -8
ld		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 28h
		cmp	[esp+28h+arg_4], 0
		xorps	xmm0, xmm0
		movdqu	[esp+28h+invalue], xmm0
		mov	dword ptr [esp+28h+invalue], 28h
		movdqu	[esp+28h+var_18], xmm0
		mov	dword ptr [esp+28h+invalue+0Ch], offset	loc_100019A0
		movq	[esp+28h+var_8], xmm0
		mov	dword ptr [esp+28h+var_18], offset sub_10001D10
		mov	dword ptr [esp+28h+var_18+4], offset loc_10001770
		mov	dword ptr [esp+28h+invalue+4], offset sub_100012E0
		mov	dword ptr [esp+28h+invalue+8], offset loc_100012A0
		jz	short loc_100015BF
		mov	dword ptr [esp+28h+var_18+8], offset loc_10001AF0
		mov	dword ptr [esp+28h+var_18+0Ch],	offset loc_10001AA0
		jmp	short loc_100015CF
; ---------------------------------------------------------------------------

loc_100015BF:				; CODE XREF: sub_10001560+4Bj
		mov	dword ptr [esp+28h+var_18+8], offset sub_100016D0
		mov	dword ptr [esp+28h+var_18+0Ch],	offset loc_100014F0

loc_100015CF:				; CODE XREF: sub_10001560+5Dj
		push	esi
		mov	esi, [esp+2Ch+ld]
		test	esi, esi
		jz	short loc_1000160C
		push	10h
		push	1
		call	ds:PR_Calloc
		add	esp, 8
		test	eax, eax
		jz	short loc_100015F2
		mov	ecx, dword_10005288
		mov	[eax+8], ecx

loc_100015F2:				; CODE XREF: sub_10001560+87j
		mov	dword ptr [esp+2Ch+var_8], eax
		test	eax, eax
		jnz	short loc_10001614
		push	eax
		push	eax
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000160C:				; CODE XREF: sub_10001560+76j
		mov	dword ptr [esp+2Ch+var_8], 0

loc_10001614:				; CODE XREF: sub_10001560+98j
		lea	eax, [esp+2Ch+invalue]
		push	eax		; invalue
		push	4F00h		; option
		push	esi		; ld
		call	ldap_set_option
		test	eax, eax
		jz	short loc_10001666
		lea	eax, [esp+38h+var_18+4]
		test	eax, eax
		jz	short loc_1000165E
		mov	eax, dword ptr [esp+38h+var_18+4]
		test	eax, eax
		jz	short loc_1000165E
		mov	ecx, [eax]
		mov	esi, ds:PR_Free
		test	ecx, ecx
		jz	short loc_10001658
		push	ecx
		call	esi ; PR_Free
		mov	eax, dword ptr [esp+3Ch+var_18+4]
		add	esp, 4
		mov	dword ptr [eax], 0
		mov	eax, dword ptr [esp+38h+var_18+4]

loc_10001658:				; CODE XREF: sub_10001560+E2j
		push	eax
		call	esi ; PR_Free
		add	esp, 4

loc_1000165E:				; CODE XREF: sub_10001560+CEj
					; sub_10001560+D6j
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10001666:				; CODE XREF: sub_10001560+C6j
		xor	eax, eax
		pop	esi
		add	esp, 28h
		retn
sub_10001560	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2018. prldap_is_installed

; =============== S U B	R O U T	I N E =======================================


; int __cdecl prldap_is_installed(LDAP *ld)
		public prldap_is_installed
prldap_is_installed proc near		; CODE XREF: prldap_import_connection+53p
					; DATA XREF: .rdata:off_10004338o

var_30		= dword	ptr -30h
var_28		= xmmword ptr -28h
var_18		= xmmword ptr -18h
var_8		= qword	ptr -8
ld		= dword	ptr  4

		sub	esp, 28h
		mov	eax, [esp+28h+ld]
		xorps	xmm0, xmm0
		movq	[esp+28h+var_8], xmm0
		movdqu	[esp+28h+var_28], xmm0
		mov	dword ptr [esp+28h+var_28], 28h
		movdqu	[esp+28h+var_18], xmm0
		test	eax, eax
		jz	short loc_100016BC
		lea	ecx, [esp+28h+var_28]
		push	ecx		; outvalue
		push	4F00h		; option
		push	eax		; ld
		call	ldap_get_option
		test	eax, eax
		jnz	short loc_100016BC
		cmp	[esp+34h+var_30], offset sub_100012E0
		jnz	short loc_100016BC
		mov	eax, 1
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_100016BC:				; CODE XREF: prldap_is_installed+24j
					; prldap_is_installed+37j ...
		xor	eax, eax
		add	esp, 28h
		retn
prldap_is_installed endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100016D0(LDAP	*ld, int)
sub_100016D0	proc near		; CODE XREF: .text:10001AF8p
					; DATA XREF: sub_10001560:loc_100015BFo

invalue		= byte ptr -34h
outvalue	= xmmword ptr -28h
var_18		= xmmword ptr -18h
var_8		= qword	ptr -8
ld		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 28h
		cmp	[esp+28h+arg_4], 0
		push	esi
		jnz	loc_10001763
		mov	esi, [esp+2Ch+ld]
		lea	eax, [esp+2Ch+outvalue]
		push	eax		; outvalue
		xorps	xmm0, xmm0
		push	4F00h		; option
		movdqu	[esp+34h+outvalue], xmm0
		push	esi		; ld
		movdqu	[esp+38h+var_18], xmm0
		mov	dword ptr [esp+38h+outvalue], 28h
		movq	[esp+38h+var_8], xmm0
		call	ldap_get_option
		test	eax, eax
		jns	short loc_10001723

loc_10001714:				; CODE XREF: sub_100016D0+91j
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10001723:				; CODE XREF: sub_100016D0+42j
		push	10h
		push	1
		call	ds:PR_Calloc
		add	esp, 8
		test	eax, eax
		jz	short loc_1000173D
		mov	ecx, dword_10005288
		mov	[eax+8], ecx

loc_1000173D:				; CODE XREF: sub_100016D0+62j
		mov	dword ptr [esp+38h+var_18+4], eax
		test	eax, eax
		jnz	short loc_1000174F
		mov	eax, 5Ah
		pop	esi
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000174F:				; CODE XREF: sub_100016D0+73j
		lea	eax, [esp+38h+invalue]
		push	eax		; invalue
		push	4F00h		; option
		push	esi		; ld
		call	ldap_set_option
		test	eax, eax
		js	short loc_10001714

loc_10001763:				; CODE XREF: sub_100016D0+9j
		xor	eax, eax
		pop	esi
		add	esp, 28h
		retn
sub_100016D0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

loc_10001770:				; DATA XREF: sub_10001560+33o
		push	edi
		mov	edi, [esp+14h]
		test	edi, edi
		jnz	short loc_10001788
		push	16h
		call	sub_10001280
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10001788:				; CODE XREF: .text:10001777j
		push	ebp
		mov	ebp, [esp+10h]
		push	esi
		cmp	[edi+4], ebp
		jge	short loc_100017DD
		mov	ecx, [edi]
		lea	esi, [ebp+5]
		lea	eax, ds:0[esi*8]
		push	eax
		test	ecx, ecx
		jnz	short loc_100017AF
		call	ds:PR_Malloc
		add	esp, 4
		jmp	short loc_100017B9
; ---------------------------------------------------------------------------

loc_100017AF:				; CODE XREF: .text:100017A2j
		push	ecx
		call	ds:PR_Realloc
		add	esp, 8

loc_100017B9:				; CODE XREF: .text:100017ADj
		mov	[esp+1Ch], eax
		test	eax, eax
		jnz	short loc_100017D6
		call	sub_10001240
		push	eax
		call	sub_10001280
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ebp
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100017D6:				; CODE XREF: .text:100017BFj
		mov	[edi], eax
		mov	[edi+4], esi
		jmp	short loc_100017E3
; ---------------------------------------------------------------------------

loc_100017DD:				; CODE XREF: .text:10001791j
		mov	eax, [edi]
		mov	[esp+1Ch], eax

loc_100017E3:				; CODE XREF: .text:100017DBj
		test	ebp, ebp
		jle	loc_1000189C
		mov	edx, [esp+10h]
		lea	ecx, [eax+4]
		add	edx, 8
		mov	esi, ebp

loc_100017F7:				; CODE XREF: .text:10001896j
		mov	eax, [edx-4]
		test	eax, eax
		jnz	short loc_10001803
		mov	[ecx-4], eax
		jmp	short loc_10001808
; ---------------------------------------------------------------------------

loc_10001803:				; CODE XREF: .text:100017FCj
		mov	eax, [eax]
		mov	[ecx-4], eax

loc_10001808:				; CODE XREF: .text:10001801j
		xor	eax, eax
		mov	[ecx], eax
		cmp	[edx-8], eax
		jl	short loc_10001889
		movsx	eax, word ptr [edx]
		test	dword_1000525C,	eax
		jz	short loc_10001825
		mov	ax, word_10005258
		mov	[ecx], ax

loc_10001825:				; CODE XREF: .text:1000181Aj
		movsx	eax, word ptr [edx]
		test	dword_10005264,	eax
		jz	short loc_10001839
		mov	ax, word_10005260
		or	[ecx], ax

loc_10001839:				; CODE XREF: .text:1000182Ej
		movsx	eax, word ptr [edx]
		test	dword_1000526C,	eax
		jz	short loc_1000184D
		mov	ax, word_10005268
		or	[ecx], ax

loc_1000184D:				; CODE XREF: .text:10001842j
		movsx	eax, word ptr [edx]
		test	dword_10005274,	eax
		jz	short loc_10001861
		mov	ax, word_10005270
		or	[ecx], ax

loc_10001861:				; CODE XREF: .text:10001856j
		movsx	eax, word ptr [edx]
		test	dword_1000527C,	eax
		jz	short loc_10001875
		mov	ax, word_10005278
		or	[ecx], ax

loc_10001875:				; CODE XREF: .text:1000186Aj
		movsx	eax, word ptr [edx]
		test	dword_10005284,	eax
		jz	short loc_10001889
		mov	ax, word_10005280
		or	[ecx], ax

loc_10001889:				; CODE XREF: .text:1000180Fj
					; .text:1000187Ej
		xor	eax, eax
		add	ecx, 8
		mov	[edx+2], ax
		add	edx, 0Ch
		dec	esi
		jnz	loc_100017F7

loc_1000189C:				; CODE XREF: .text:100017E5j
		mov	esi, [esp+18h]
		mov	edi, [edi+8]
		test	esi, esi
		jnz	short loc_100018AB
		xor	eax, eax
		jmp	short loc_100018BE
; ---------------------------------------------------------------------------

loc_100018AB:				; CODE XREF: .text:100018A5j
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_100018B4
		or	eax, esi
		jmp	short loc_100018BE
; ---------------------------------------------------------------------------

loc_100018B4:				; CODE XREF: .text:100018AEj
		push	esi
		call	ds:PR_MillisecondsToInterval
		add	esp, 4

loc_100018BE:				; CODE XREF: .text:100018A9j
					; .text:100018B2j
		test	edi, edi
		jnz	short loc_100018C6
		xor	eax, eax
		jmp	short loc_100018DE
; ---------------------------------------------------------------------------

loc_100018C6:				; CODE XREF: .text:100018C0j
		cmp	edi, 0FFFFFFFFh
		jz	short loc_100018DE
		cmp	esi, 0FFFFFFFFh
		jz	short loc_100018D4
		cmp	esi, edi
		jle	short loc_100018DE

loc_100018D4:				; CODE XREF: .text:100018CEj
		push	edi
		call	ds:PR_MillisecondsToInterval
		add	esp, 4

loc_100018DE:				; CODE XREF: .text:100018C4j
					; .text:100018C9j ...
		mov	edi, [esp+1Ch]
		push	eax
		push	ebp
		push	edi
		call	ds:PR_Poll
		add	esp, 0Ch
		mov	esi, eax
		test	ebp, ebp
		jle	loc_1000198D
		mov	ecx, [esp+10h]
		lea	edx, [edi+6]
		add	ecx, 0Ah

loc_10001902:				; CODE XREF: .text:10001987j
		cmp	dword ptr [edx-6], 0
		jz	short loc_10001980
		mov	ax, word_10005258
		test	[edx], ax
		jz	short loc_1000191C
		mov	ax, word ptr dword_1000525C
		or	[ecx], ax

loc_1000191C:				; CODE XREF: .text:10001911j
		mov	ax, word_10005260
		test	[edx], ax
		jz	short loc_10001930
		mov	ax, word ptr dword_10005264
		or	[ecx], ax

loc_10001930:				; CODE XREF: .text:10001925j
		mov	ax, word_10005268
		test	[edx], ax
		jz	short loc_10001944
		mov	ax, word ptr dword_1000526C
		or	[ecx], ax

loc_10001944:				; CODE XREF: .text:10001939j
		mov	ax, word_10005270
		test	[edx], ax
		jz	short loc_10001958
		mov	ax, word ptr dword_10005274
		or	[ecx], ax

loc_10001958:				; CODE XREF: .text:1000194Dj
		mov	ax, word_10005278
		test	[edx], ax
		jz	short loc_1000196C
		mov	ax, word ptr dword_1000527C
		or	[ecx], ax

loc_1000196C:				; CODE XREF: .text:10001961j
		mov	ax, word_10005280
		test	[edx], ax
		jz	short loc_10001980
		mov	ax, word ptr dword_10005284
		or	[ecx], ax

loc_10001980:				; CODE XREF: .text:10001906j
					; .text:10001975j
		add	edx, 8
		add	ecx, 0Ch
		dec	ebp
		jnz	loc_10001902

loc_1000198D:				; CODE XREF: .text:100018F2j
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_100019A0:				; DATA XREF: sub_10001560+1Do
		push	esi
		mov	esi, [esp+14h]
		or	ecx, 0FFFFFFFFh
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_100019B3
		xor	ecx, ecx
		jmp	short loc_100019C4
; ---------------------------------------------------------------------------

loc_100019B3:				; CODE XREF: .text:100019ADj
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100019C4
		push	eax
		call	ds:PR_MillisecondsToInterval
		add	esp, 4
		mov	ecx, eax

loc_100019C4:				; CODE XREF: .text:100019B1j
					; .text:100019B6j
		push	ecx
		push	0
		push	dword ptr [esp+18h]
		push	dword ptr [esp+18h]
		push	dword ptr [esi]
		call	ds:PR_Recv
		add	esp, 14h
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100019E0(LDAP	*ld, int)
sub_100019E0	proc near		; CODE XREF: prldap_get_session_info+1Cp
					; prldap_get_session_option+13p ...

outvalue	= xmmword ptr -28h
var_18		= xmmword ptr -18h
var_8		= qword	ptr -8
ld		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 28h
		push	esi
		mov	esi, [esp+2Ch+ld]
		push	edi
		test	esi, esi
		jz	short loc_10001A5D
		mov	edi, [esp+30h+arg_4]
		test	edi, edi
		jz	short loc_10001A5D
		lea	eax, [esp+30h+outvalue]
		xorps	xmm0, xmm0
		push	eax		; outvalue
		push	4F00h		; option
		movdqu	[esp+38h+outvalue], xmm0
		push	esi		; ld
		movdqu	[esp+3Ch+var_18], xmm0
		mov	dword ptr [esp+3Ch+outvalue], 28h
		movq	[esp+3Ch+var_8], xmm0
		call	ldap_get_option
		test	eax, eax
		jns	short loc_10001A36
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	edi
		pop	esi
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10001A36:				; CODE XREF: sub_100019E0+44j
		mov	eax, dword ptr [esp+3Ch+var_18+4]
		test	eax, eax
		jnz	short loc_10001A53
		push	eax
		push	eax
		push	52h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		mov	eax, 52h
		pop	esi
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10001A53:				; CODE XREF: sub_100019E0+5Cj
		mov	[edi], eax
		xor	eax, eax
		pop	edi
		pop	esi
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10001A5D:				; CODE XREF: sub_100019E0+Bj
					; sub_100019E0+13j
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		mov	eax, 59h
		pop	esi
		add	esp, 28h
		retn
sub_100019E0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001A80	proc near		; CODE XREF: prldap_set_session_option+43p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_10001A94
		mov	dword_10005288,	eax
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10001A94:				; CODE XREF: sub_10001A80+Aj
		mov	[ecx+8], eax
		xor	eax, eax
		retn
sub_10001A80	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10001AA0:				; DATA XREF: sub_10001560+55o
		push	ecx
		push	esi
		mov	esi, [esp+10h]
		push	esi
		push	dword ptr [esp+10h]
		call	sub_100026C0
		lea	eax, [esp+0Ch]
		add	esp, 8
		test	eax, eax
		jz	short loc_10001ADF
		test	esi, esi
		jz	short loc_10001ADF
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10001AD5
		push	eax
		call	ds:PR_Free
		add	esp, 4
		mov	dword ptr [esi], 0

loc_10001AD5:				; CODE XREF: .text:10001AC3j
		push	esi
		call	ds:PR_Free
		add	esp, 4

loc_10001ADF:				; CODE XREF: .text:10001AB9j
					; .text:10001ABDj
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10001AF0:				; DATA XREF: sub_10001560+4Do
		push	dword ptr [esp+8]
		push	dword ptr [esp+8]
		call	sub_100016D0
		add	esp, 8
		test	eax, eax
		jz	loc_100026F0
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001B10	proc near		; CODE XREF: prldap_import_connection+9Ep

arg_0		= dword	ptr  4

		push	0Ch
		push	1
		call	ds:PR_Calloc
		add	esp, 8
		test	eax, eax
		jz	short locret_10001B2F
		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short locret_10001B2F
		mov	ecx, [ecx+8]
		mov	[eax+4], ecx

locret_10001B2F:			; CODE XREF: sub_10001B10+Fj
					; sub_10001B10+17j
		retn
sub_10001B10	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001B30(LDAP	*ld, int)
sub_10001B30	proc near		; CODE XREF: sub_10001140+26p
					; prldap_get_default_socket_info+1Cp ...

var_20		= xmmword ptr -20h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
ld		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		push	esi
		mov	esi, [esp+18h+ld]
		push	edi
		test	esi, esi
		jz	loc_10001BC4
		mov	edi, [esp+1Ch+arg_4]
		test	edi, edi
		jz	short loc_10001BC4
		lea	eax, [esp+1Ch+ld]
		push	eax		; outvalue
		push	4F03h		; option
		push	esi		; ld
		call	ldap_get_option
		test	eax, eax
		jns	short loc_10001B6D

loc_10001B5D:				; CODE XREF: sub_10001B30+6Bj
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	edi
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10001B6D:				; CODE XREF: sub_10001B30+2Bj
		lea	eax, [esp+28h+var_20]
		mov	[esp+28h+var_10], 0
		push	eax
		push	100h
		push	[esp+30h+var_8]
		xorps	xmm0, xmm0
		movdqu	[esp+34h+var_20], xmm0
		mov	dword ptr [esp+34h+var_20], 14h
		call	ber_sockbuf_get_option
		test	eax, eax
		js	short loc_10001B5D
		mov	eax, dword ptr [esp+34h+var_20]
		test	eax, eax
		jnz	short loc_10001BBA
		push	eax
		push	eax
		push	52h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		mov	eax, 52h
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10001BBA:				; CODE XREF: sub_10001B30+73j
		mov	[edi], eax
		xor	eax, eax
		pop	edi
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10001BC4:				; CODE XREF: sub_10001B30+Bj
					; sub_10001B30+17j
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		mov	eax, 59h
		pop	esi
		add	esp, 14h
		retn
sub_10001B30	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001BE0	proc near		; CODE XREF: sub_100012E0+F7p
					; sub_100012E0+148p

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_44		= dword	ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 50h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+50h+var_4], eax
		mov	eax, [esp+50h+arg_4]
		mov	[esp+50h+var_50], eax
		push	esi
		mov	esi, [esp+54h+arg_0]
		movzx	eax, word ptr [eax]
		push	eax
		call	ds:PR_OpenTCPSocket
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jz	short loc_10001C50
		test	[esp+54h+arg_C], 1
		jz	short loc_10001C63
		lea	ecx, [esp+54h+var_4C]
		mov	[esp+54h+var_4C], 0
		push	ecx
		push	eax
		mov	[esp+5Ch+var_44], 1
		call	ds:PR_SetSocketOption
		add	esp, 8
		test	eax, eax
		jz	short loc_10001C63
		call	sub_10001240
		push	eax
		call	sub_10001280
		push	dword ptr [esi]
		call	ds:PR_Close
		add	esp, 8

loc_10001C50:				; CODE XREF: sub_10001BE0+2Bj
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10001C63:				; CODE XREF: sub_10001BE0+35j
					; sub_10001BE0+58j
		push	ebx
		mov	ebx, [esi+4]
		push	edi
		mov	edi, [esp+5Ch+arg_8]
		test	edi, edi
		jnz	short loc_10001C74
		xor	eax, eax
		jmp	short loc_10001C87
; ---------------------------------------------------------------------------

loc_10001C74:				; CODE XREF: sub_10001BE0+8Ej
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_10001C7D
		or	eax, edi
		jmp	short loc_10001C87
; ---------------------------------------------------------------------------

loc_10001C7D:				; CODE XREF: sub_10001BE0+97j
		push	edi
		call	ds:PR_MillisecondsToInterval
		add	esp, 4

loc_10001C87:				; CODE XREF: sub_10001BE0+92j
					; sub_10001BE0+9Bj
		test	ebx, ebx
		jnz	short loc_10001C8F
		xor	eax, eax
		jmp	short loc_10001CA7
; ---------------------------------------------------------------------------

loc_10001C8F:				; CODE XREF: sub_10001BE0+A9j
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_10001CA7
		cmp	edi, 0FFFFFFFFh
		jz	short loc_10001C9D
		cmp	edi, ebx
		jle	short loc_10001CA7

loc_10001C9D:				; CODE XREF: sub_10001BE0+B7j
		push	ebx
		call	ds:PR_MillisecondsToInterval
		add	esp, 4

loc_10001CA7:				; CODE XREF: sub_10001BE0+ADj
					; sub_10001BE0+B2j ...
		push	eax
		push	[esp+60h+var_50]
		push	dword ptr [esi]
		call	ds:PR_Connect
		add	esp, 0Ch
		pop	edi
		pop	ebx
		test	eax, eax
		jz	short loc_10001CEE
		call	ds:PR_GetError
		cmp	eax, 0FFFFE8D2h
		jz	short loc_10001CEE
		push	dword ptr [esi]
		call	ds:PR_Close
		add	esp, 4
		mov	dword ptr [esi], 0
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+50h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10001CEE:				; CODE XREF: sub_10001BE0+DBj
					; sub_10001BE0+E8j
		mov	ecx, [esp+54h+var_4]
		mov	eax, 1
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
sub_10001BE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001D10	proc near		; DATA XREF: sub_10001560+2Bo

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_C]
		or	ebx, 0FFFFFFFFh
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		push	edi
		mov	eax, [ebp+4]
		mov	edi, [esp+10h+arg_4]
		test	eax, eax
		jnz	short loc_10001D2E
		xor	ebx, ebx
		jmp	short loc_10001D3F
; ---------------------------------------------------------------------------

loc_10001D2E:				; CODE XREF: sub_10001D10+18j
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10001D3F
		push	eax
		call	ds:PR_MillisecondsToInterval
		add	esp, 4
		mov	ebx, eax

loc_10001D3F:				; CODE XREF: sub_10001D10+1Cj
					; sub_10001D10+21j
		test	esi, esi
		jle	short loc_10001D7F
		mov	ecx, 800000h
		jmp	short loc_10001D50
; ---------------------------------------------------------------------------
		align 10h

loc_10001D50:				; CODE XREF: sub_10001D10+38j
					; sub_10001D10+6Dj
		push	ebx
		cmp	esi, 800000h
		mov	eax, esi
		push	0
		cmovg	eax, ecx
		push	eax
		push	edi
		push	dword ptr [ebp+0]
		call	ds:PR_Send
		add	esp, 14h
		test	eax, eax
		js	short loc_10001D85
		jz	short loc_10001D7F
		sub	esi, eax
		add	edi, eax
		mov	ecx, 800000h
		test	esi, esi
		jg	short loc_10001D50

loc_10001D7F:				; CODE XREF: sub_10001D10+31j
					; sub_10001D10+60j
		sub	edi, [esp+10h+arg_4]
		mov	eax, edi

loc_10001D85:				; CODE XREF: sub_10001D10+5Ej
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001D10	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2021. prldap_get_default_socket_info

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	prldap_get_default_socket_info(LDAP *ld, int)
		public prldap_get_default_socket_info
prldap_get_default_socket_info proc near ; DATA	XREF: .rdata:off_10004338o

ld		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10001DE3
		cmp	dword ptr [esi], 0Ch
		jnz	short loc_10001DE3
		mov	eax, [esp+4+ld]
		test	eax, eax
		jz	short loc_10001DCD
		lea	ecx, [esp+4+ld]
		push	ecx		; int
		push	eax		; ld
		call	sub_10001B30
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001DF7
		mov	ecx, [esp+4+ld]
		mov	eax, [ecx]
		mov	[esi+4], eax
		mov	eax, [ecx+8]
		mov	[esi+8], eax
		xor	eax, eax
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10001DCD:				; CODE XREF: prldap_get_default_socket_info+14j
		push	0
		push	0
		push	59h
		push	0
		call	ldap_set_lderrno
		mov	eax, 59h
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10001DE3:				; CODE XREF: prldap_get_default_socket_info+7j
					; prldap_get_default_socket_info+Cj
		push	0
		push	0
		push	59h
		push	[esp+10h+ld]
		call	ldap_set_lderrno
		mov	eax, 59h

loc_10001DF7:				; CODE XREF: prldap_get_default_socket_info+26j
		pop	esi
		retn	8
prldap_get_default_socket_info endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2013. prldap_get_session_info

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	prldap_get_session_info(LDAP *ld, int, int)
		public prldap_get_session_info
prldap_get_session_info	proc near	; DATA XREF: .rdata:off_10004338o

ld		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	short loc_10001E66
		cmp	dword ptr [esi], 8
		jnz	short loc_10001E66
		mov	eax, [esp+4+ld]
		test	eax, eax
		jz	short loc_10001E38
		lea	ecx, [esp+4+ld]
		push	ecx		; int
		push	eax		; ld
		call	sub_100019E0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001E7A
		mov	eax, [esp+4+ld]
		mov	eax, [eax+0Ch]
		mov	[esi+4], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001E38:				; CODE XREF: prldap_get_session_info+14j
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_10001E50
		mov	[esp+4+ld], eax
		mov	eax, [eax+0Ch]
		mov	[esi+4], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001E50:				; CODE XREF: prldap_get_session_info+3Ej
		push	0
		push	0
		push	59h
		push	0
		call	ldap_set_lderrno
		mov	eax, 59h
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001E66:				; CODE XREF: prldap_get_session_info+7j
					; prldap_get_session_info+Cj
		push	0
		push	0
		push	59h
		push	[esp+10h+ld]
		call	ldap_set_lderrno
		mov	eax, 59h

loc_10001E7A:				; CODE XREF: prldap_get_session_info+26j
		pop	esi
		retn	0Ch
prldap_get_session_info	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2017. prldap_get_session_option

; =============== S U B	R O U T	I N E =======================================


; int __cdecl prldap_get_session_option(LDAP *ld, int, int, int)
		public prldap_get_session_option
prldap_get_session_option proc near	; DATA XREF: .rdata:off_10004338o

var_4		= dword	ptr -4
ld		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		mov	eax, [esp+4+ld]
		xor	ecx, ecx
		mov	[esp+4+var_4], ecx
		test	eax, eax
		jz	short loc_10001EA4
		lea	ecx, [esp+4+var_4]
		push	ecx		; int
		push	eax		; ld
		call	sub_100019E0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001ECB
		mov	ecx, [esp+4+var_4]
		jmp	short loc_10001EB0
; ---------------------------------------------------------------------------

loc_10001EA4:				; CODE XREF: prldap_get_session_option+Cj
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		cmovnz	ecx, eax
		mov	[esp+4+var_4], ecx

loc_10001EB0:				; CODE XREF: prldap_get_session_option+22j
		mov	eax, [esp+4+arg_8]
		dec	eax
		jz	short loc_10001EBE
		mov	eax, 59h
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001EBE:				; CODE XREF: prldap_get_session_option+35j
		push	[esp+4+arg_C]
		push	ecx
		call	sub_10001530
		add	esp, 8

loc_10001ECB:				; CODE XREF: prldap_get_session_option+1Dj
		pop	ecx
		retn
prldap_get_session_option endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2015. prldap_get_socket_info

; =============== S U B	R O U T	I N E =======================================


		public prldap_get_socket_info
prldap_get_socket_info proc near	; DATA XREF: .rdata:off_10004338o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_10001EF5
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short loc_10001EF5
		cmp	dword ptr [ecx], 0Ch
		jnz	short loc_10001EF5
		mov	eax, [edx]
		mov	[ecx+4], eax
		mov	eax, [edx+8]
		mov	[ecx+8], eax
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001EF5:				; CODE XREF: prldap_get_socket_info+6j
					; prldap_get_socket_info+Ej ...
		mov	eax, 59h
		retn	0Ch
prldap_get_socket_info endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2019. prldap_import_connection

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	prldap_import_connection(LDAP *ld)
		public prldap_import_connection
prldap_import_connection proc near	; DATA XREF: .rdata:off_10004338o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
outvalue	= dword	ptr -4
ld		= dword	ptr  4

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+ld]
		mov	[esp+0Ch+outvalue], 0FFFFFFFFh
		mov	[esp+0Ch+var_8], 0
		test	esi, esi
		jnz	short loc_10001F30
		push	esi
		push	esi
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 8
		retn	4
; ---------------------------------------------------------------------------

loc_10001F30:				; CODE XREF: prldap_import_connection+1Aj
		lea	eax, [esp+0Ch+outvalue]
		push	eax		; outvalue
		push	1		; option
		push	esi		; ld
		call	ldap_get_option
		test	eax, eax
		jns	short loc_10001F52
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		add	esp, 8
		retn	4
; ---------------------------------------------------------------------------

loc_10001F52:				; CODE XREF: prldap_import_connection+3Fj
		push	esi		; ld
		call	prldap_is_installed
		add	esp, 4
		test	eax, eax
		jz	short loc_10001F77
		push	0
		push	0
		push	52h
		push	esi
		call	ldap_set_lderrno
		mov	eax, 52h
		pop	esi
		add	esp, 8
		retn	4
; ---------------------------------------------------------------------------

loc_10001F77:				; CODE XREF: prldap_import_connection+5Dj
		push	1		; int
		push	esi		; ld
		call	prldap_install_routines
		test	eax, eax
		jnz	loc_10002010
		lea	eax, [esp+18h+var_14]
		push	eax		; int
		push	esi		; ld
		call	sub_100019E0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10002010
		push	edi
		push	[esp+1Ch+var_14]
		call	sub_10001B10
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10001FC1
		push	eax
		push	eax
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		lea	eax, [edi+5Ah]
		pop	edi
		pop	esi
		add	esp, 8
		retn	4
; ---------------------------------------------------------------------------

loc_10001FC1:				; CODE XREF: prldap_import_connection+AAj
		push	[esp+1Ch+var_10]
		call	ds:PR_ImportTCPSocket
		add	esp, 4
		test	eax, eax
		jnz	short loc_10001FE9
		push	eax
		push	eax
		push	52h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		mov	eax, 52h
		pop	esi
		add	esp, 8
		retn	4
; ---------------------------------------------------------------------------

loc_10001FE9:				; CODE XREF: prldap_import_connection+D0j
		push	edi		; invalue
		push	4F02h		; option
		push	esi		; ld
		mov	[edi], eax
		call	ldap_set_option
		test	eax, eax
		jz	short loc_1000200D
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	edi
		pop	esi
		add	esp, 8
		retn	4
; ---------------------------------------------------------------------------

loc_1000200D:				; CODE XREF: prldap_import_connection+F9j
		xor	eax, eax
		pop	edi

loc_10002010:				; CODE XREF: prldap_import_connection+81j
					; prldap_import_connection+97j
		pop	esi
		add	esp, 8
		retn	4
prldap_import_connection endp ;	sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2010. prldap_init

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	prldap_init(PCHAR HostName, ULONG PortNumber, int)
		public prldap_init
prldap_init	proc near		; DATA XREF: .rdata:off_10004338o

HostName	= dword	ptr  4
PortNumber	= dword	ptr  8

		push	esi
		push	[esp+4+PortNumber] ; PortNumber
		push	[esp+8+HostName] ; HostName
		call	ldap_init
		mov	esi, eax
		test	esi, esi
		jz	short loc_10002089
		push	[esp+0Ch+HostName] ; int
		push	esi		; ld
		call	sub_10001560
		add	esp, 8
		test	eax, eax
		jnz	short loc_10002063
		push	[esp+0Ch+HostName] ; int
		push	esi		; ld
		call	sub_100023D0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10002063
		push	esi		; ld
		call	sub_100011E0
		add	esp, 4
		test	eax, eax
		jz	short loc_10002087

loc_10002063:				; CODE XREF: prldap_init+23j
					; prldap_init+34j
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		test	eax, eax
		jz	short loc_10002087
		push	16h
		call	sub_10001280
		add	esp, 4
		push	esi		; ld
		call	ldap_unbind
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10002087:				; CODE XREF: prldap_init+41j
					; prldap_init+4Fj
		mov	eax, esi

loc_10002089:				; CODE XREF: prldap_init+12j
		pop	esi
		retn	0Ch
prldap_init	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2011. prldap_install_routines

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	prldap_install_routines(LDAP *ld, int)
		public prldap_install_routines
prldap_install_routines	proc near	; CODE XREF: prldap_import_connection+7Ap
					; DATA XREF: .rdata:off_10004338o

ld		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]	; int
		mov	esi, [esp+8+ld]
		push	esi		; ld
		call	sub_10001560
		add	esp, 8
		test	eax, eax
		jnz	short loc_100020C8
		push	[esp+4+arg_4]	; int
		push	esi		; ld
		call	sub_100023D0
		add	esp, 8
		test	eax, eax
		jnz	short loc_100020C8
		push	esi		; ld
		call	sub_100011E0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100020C8
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_100020C8:				; CODE XREF: prldap_install_routines+14j
					; prldap_install_routines+25j ...
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		retn	8
prldap_install_routines	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2020. prldap_set_default_socket_info

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	prldap_set_default_socket_info(LDAP *ld, int)
		public prldap_set_default_socket_info
prldap_set_default_socket_info proc near ; DATA	XREF: .rdata:off_10004338o

ld		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10002137
		cmp	dword ptr [esi], 0Ch
		jnz	short loc_10002137
		mov	eax, [esp+4+ld]
		test	eax, eax
		jz	short loc_10002121
		lea	ecx, [esp+4+ld]
		push	ecx		; int
		push	eax		; ld
		call	sub_10001B30
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000214B
		mov	eax, [esp+4+ld]
		mov	ecx, [esi+4]
		mov	[eax], ecx
		mov	eax, [esp+4+ld]
		mov	ecx, [esi+8]
		pop	esi
		mov	[eax+8], ecx
		xor	eax, eax
		retn	8
; ---------------------------------------------------------------------------

loc_10002121:				; CODE XREF: prldap_set_default_socket_info+14j
		push	0
		push	0
		push	59h
		push	0
		call	ldap_set_lderrno
		mov	eax, 59h
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10002137:				; CODE XREF: prldap_set_default_socket_info+7j
					; prldap_set_default_socket_info+Cj
		push	0
		push	0
		push	59h
		push	[esp+10h+ld]
		call	ldap_set_lderrno
		mov	eax, 59h

loc_1000214B:				; CODE XREF: prldap_set_default_socket_info+26j
		pop	esi
		retn	8
prldap_set_default_socket_info endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2012. prldap_set_session_info

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	prldap_set_session_info(LDAP *ld, int, int)
		public prldap_set_session_info
prldap_set_session_info	proc near	; DATA XREF: .rdata:off_10004338o

ld		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	short loc_100021B2
		cmp	dword ptr [esi], 8
		jnz	short loc_100021B2
		mov	eax, [esp+4+ld]
		test	eax, eax
		jz	short loc_10002188
		lea	ecx, [esp+4+ld]
		push	ecx		; int
		push	eax		; ld
		call	sub_100019E0
		add	esp, 8
		test	eax, eax
		jnz	short loc_100021C6
		mov	ecx, [esp+4+ld]
		mov	eax, [esi+4]
		pop	esi
		mov	[ecx+0Ch], eax
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10002188:				; CODE XREF: prldap_set_session_info+14j
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jz	short loc_1000219C
		mov	eax, [esi+4]
		mov	[ecx+0Ch], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000219C:				; CODE XREF: prldap_set_session_info+3Ej
		push	0
		push	0
		push	59h
		push	0
		call	ldap_set_lderrno
		mov	eax, 59h
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100021B2:				; CODE XREF: prldap_set_session_info+7j
					; prldap_set_session_info+Cj
		push	0
		push	0
		push	59h
		push	[esp+10h+ld]
		call	ldap_set_lderrno
		mov	eax, 59h

loc_100021C6:				; CODE XREF: prldap_set_session_info+26j
		pop	esi
		retn	0Ch
prldap_set_session_info	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2016. prldap_set_session_option

; =============== S U B	R O U T	I N E =======================================


; int __cdecl prldap_set_session_option(LDAP *ld, int, int, int)
		public prldap_set_session_option
prldap_set_session_option proc near	; DATA XREF: .rdata:off_10004338o

var_4		= dword	ptr -4
ld		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		mov	eax, [esp+4+ld]
		xor	ecx, ecx
		mov	[esp+4+var_4], ecx
		test	eax, eax
		jz	short loc_100021F4
		lea	ecx, [esp+4+var_4]
		push	ecx		; int
		push	eax		; ld
		call	sub_100019E0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000221B
		mov	ecx, [esp+4+var_4]
		jmp	short loc_10002200
; ---------------------------------------------------------------------------

loc_100021F4:				; CODE XREF: prldap_set_session_option+Cj
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		cmovnz	ecx, eax
		mov	[esp+4+var_4], ecx

loc_10002200:				; CODE XREF: prldap_set_session_option+22j
		mov	eax, [esp+4+arg_8]
		dec	eax
		jz	short loc_1000220E
		mov	eax, 59h
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000220E:				; CODE XREF: prldap_set_session_option+35j
		push	[esp+4+arg_C]
		push	ecx
		call	sub_10001A80
		add	esp, 8

loc_1000221B:				; CODE XREF: prldap_set_session_option+1Dj
		pop	ecx
		retn
prldap_set_session_option endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 2014. prldap_set_socket_info

; =============== S U B	R O U T	I N E =======================================


		public prldap_set_socket_info
prldap_set_socket_info proc near	; DATA XREF: .rdata:off_10004338o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_10002245
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short loc_10002245
		cmp	dword ptr [ecx], 0Ch
		jnz	short loc_10002245
		mov	eax, [ecx+4]
		mov	[edx], eax
		mov	eax, [ecx+8]
		mov	[edx+8], eax
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10002245:				; CODE XREF: prldap_set_socket_info+6j
					; prldap_set_socket_info+Ej ...
		mov	eax, 59h
		retn	0Ch
prldap_set_socket_info endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002250	proc near		; CODE XREF: sub_100023D0+98p
					; .text:10002721p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		push	dword_100052AC
		call	ds:PR_Lock
		mov	esi, dword_100052A8
		add	esp, 4
		xor	edi, edi
		test	esi, esi
		jz	short loc_1000227E
		mov	edi, edi

loc_10002270:				; CODE XREF: sub_10002250+2Cj
		cmp	dword ptr [esi], 0
		jz	short loc_100022B5
		mov	edi, esi
		mov	esi, [esi+8]
		test	esi, esi
		jnz	short loc_10002270

loc_1000227E:				; CODE XREF: sub_10002250+1Cj
		push	offset dword_1000528C
		call	ds:PR_AtomicIncrement
		push	0Ch
		mov	ebx, eax
		call	ds:PR_Malloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_100022F1
		mov	[esi+4], ebx
		mov	dword ptr [esi+8], 0
		test	edi, edi
		jnz	short loc_100022B2
		mov	dword_100052A8,	esi
		jmp	short loc_100022B5
; ---------------------------------------------------------------------------

loc_100022B2:				; CODE XREF: sub_10002250+58j
		mov	[edi+8], esi

loc_100022B5:				; CODE XREF: sub_10002250+23j
					; sub_10002250+60j
		mov	eax, [esp+0Ch+arg_0]
		mov	edi, [esi+4]
		mov	[esi], eax
		push	dword_100052B0
		call	ds:PR_GetThreadPrivate
		add	esp, 4
		test	eax, eax
		jz	short loc_100022F1
		cmp	edi, [eax]
		jge	short loc_100022F1
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_100022F1
		cmp	dword ptr [eax+edi*4], 0
		jz	short loc_100022F1
		push	esi
		push	0
		push	0
		push	0
		call	sub_100025E0
		add	esp, 10h

loc_100022F1:				; CODE XREF: sub_10002250+4Aj
					; sub_10002250+7Fj ...
		push	dword_100052AC
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10002250	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10002310:				; DATA XREF: sub_100023D0+83o
		mov	eax, [esp+0Ch]
		push	esi
		test	eax, eax
		jz	short loc_10002360
		push	dword_100052B0
		mov	esi, [eax+4]
		call	ds:PR_GetThreadPrivate
		add	esp, 4
		test	eax, eax
		jz	short loc_10002360
		cmp	esi, [eax]
		jge	short loc_10002360
		mov	edx, [eax+4]
		test	edx, edx
		jz	short loc_10002360
		mov	edx, [edx+esi*4]
		test	edx, edx
		jz	short loc_10002360
		mov	ecx, [esp+8]
		test	ecx, ecx
		jz	short loc_1000234E
		mov	eax, [edx+8]
		mov	[ecx], eax

loc_1000234E:				; CODE XREF: .text:10002347j
		mov	eax, [esp+0Ch]
		test	eax, eax
		jz	short loc_1000235B
		mov	ecx, [edx+0Ch]
		mov	[eax], ecx

loc_1000235B:				; CODE XREF: .text:10002354j
		mov	eax, [edx+4]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002360:				; CODE XREF: .text:10002317j
					; .text:1000232Dj ...
		mov	eax, [esp+8]
		test	eax, eax
		jz	short loc_1000236E
		mov	dword ptr [eax], 0

loc_1000236E:				; CODE XREF: .text:10002366j
		mov	eax, [esp+0Ch]
		test	eax, eax
		jz	short loc_1000237C
		mov	dword ptr [eax], 0

loc_1000237C:				; CODE XREF: .text:10002374j
		mov	eax, 52h
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10002390:				; DATA XREF: sub_100023D0+E4o
		jmp	ds:PR_GetCurrentThread
; ---------------------------------------------------------------------------
		align 10h

loc_100023A0:				; DATA XREF: sub_100023D0+3o
		call	ds:PR_NewLock
		mov	dword_100052AC,	eax
		test	eax, eax
		jz	short loc_100023CC
		push	offset loc_10002750
		push	offset dword_100052B0
		call	ds:PR_NewThreadPrivateIndex
		add	esp, 8
		test	eax, eax
		jnz	short loc_100023CC
		mov	dword_100052A8,	eax
		retn
; ---------------------------------------------------------------------------

loc_100023CC:				; CODE XREF: .text:100023ADj
					; .text:100023C4j
		or	eax, 0FFFFFFFFh
		retn

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100023D0(LDAP	*ld, int)
sub_100023D0	proc near		; CODE XREF: prldap_init+2Ap
					; prldap_install_routines+1Bp

var_48		= xmmword ptr -48h
var_38		= qword	ptr -38h
invalue		= xmmword ptr -24h
var_14		= xmmword ptr -14h
var_4		= dword	ptr -4
ld		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 3Ch
		push	offset loc_100023A0
		push	offset dword_100052B4
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_10002400
		push	0
		push	0
		push	52h
		push	[esp+48h+ld]
		call	ldap_set_lderrno
		or	eax, 0FFFFFFFFh
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_10002400:				; CODE XREF: sub_100023D0+18j
		cmp	[esp+3Ch+arg_4], 0
		xorps	xmm0, xmm0
		movdqu	[esp+3Ch+var_14], xmm0
		push	esi
		mov	esi, [esp+40h+ld]
		movdqu	[esp+40h+invalue], xmm0
		mov	[esp+40h+var_4], 0
		mov	dword ptr [esp+40h+var_14], offset loc_10001230
		mov	dword ptr [esp+40h+var_14+4], offset sub_10001280
		jz	short loc_10002478
		mov	dword ptr [esp+40h+invalue], offset loc_100024D0
		mov	dword ptr [esp+40h+invalue+4], offset loc_100024E0
		mov	dword ptr [esp+40h+invalue+8], offset loc_100024F0
		mov	dword ptr [esp+40h+invalue+0Ch], offset	loc_10002500
		mov	dword ptr [esp+40h+var_14+8], offset loc_10002310
		mov	dword ptr [esp+40h+var_14+0Ch],	offset sub_100025E0
		test	esi, esi
		jz	short loc_10002478
		push	esi
		call	sub_10002250
		add	esp, 4
		mov	[esp+40h+var_4], eax
		test	eax, eax
		jz	short loc_10002495

loc_10002478:				; CODE XREF: sub_100023D0+61j
					; sub_100023D0+95j
		lea	eax, [esp+40h+invalue]
		push	eax		; invalue
		push	5		; option
		push	esi		; ld
		call	ldap_set_option
		test	eax, eax
		jz	short loc_1000249D
		push	dword ptr [esp+4Ch+var_14+4]
		call	sub_10002520
		add	esp, 4

loc_10002495:				; CODE XREF: sub_100023D0+A6j
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000249D:				; CODE XREF: sub_100023D0+B7j
		lea	eax, [esp+4Ch+var_48]
		xorps	xmm0, xmm0
		push	eax		; invalue
		push	65h		; option
		movq	[esp+54h+var_38], xmm0
		push	esi		; ld
		movdqu	[esp+58h+var_48], xmm0
		mov	dword ptr [esp+58h+var_38+4], offset loc_10002390
		call	ldap_set_option
		neg	eax
		pop	esi
		sbb	eax, eax
		add	esp, 3Ch
		retn
sub_100023D0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

loc_100024D0:				; DATA XREF: sub_100023D0+63o
		jmp	ds:PR_NewLock
; ---------------------------------------------------------------------------
		align 10h

loc_100024E0:				; DATA XREF: sub_100023D0+6Bo
		jmp	ds:PR_DestroyLock
; ---------------------------------------------------------------------------
		align 10h

loc_100024F0:				; DATA XREF: sub_100023D0+73o
		push	dword ptr [esp+4]
		call	ds:PR_Lock
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10002500:				; DATA XREF: sub_100023D0+7Bo
		push	dword ptr [esp+4]
		call	ds:PR_Unlock
		inc	eax
		add	esp, 4
		neg	eax
		sbb	eax, eax
		neg	eax
		dec	eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002520	proc near		; CODE XREF: sub_100023D0+BDp
					; sub_100026C0+1Fp

arg_0		= dword	ptr  4

		push	ebx
		push	edi
		push	dword_100052AC
		call	ds:PR_Lock
		mov	ebx, [esp+0Ch+arg_0]
		push	dword_100052B0
		mov	edi, [ebx+4]
		call	ds:PR_GetThreadPrivate
		add	esp, 8
		test	eax, eax
		jz	short loc_100025C2
		cmp	edi, [eax]
		jge	short loc_100025C2
		push	esi
		mov	esi, [eax+4]
		test	esi, esi
		jz	short loc_100025C1
		mov	esi, [esi+edi*4]
		test	esi, esi
		jz	short loc_100025C1
		mov	edi, [ebx+4]
		cmp	edi, dword_1000528C
		jg	short loc_100025C1
		push	dword_100052B0
		call	ds:PR_GetThreadPrivate
		add	esp, 4
		test	eax, eax
		jz	short loc_1000257D
		cmp	edi, [eax]
		jl	short loc_1000258B

loc_1000257D:				; CODE XREF: sub_10002520+57j
		push	edi
		push	eax
		call	sub_100027D0
		add	esp, 8
		test	eax, eax
		jz	short loc_100025C1

loc_1000258B:				; CODE XREF: sub_10002520+5Bj
		mov	eax, [eax+4]
		mov	dword ptr [eax+edi*4], 0
		cmp	dword ptr [esi], 4D4F5A45h
		jnz	short loc_100025C1
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_100025AA
		push	eax		; Block
		call	ldap_memfree

loc_100025AA:				; CODE XREF: sub_10002520+82j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_100025B7
		push	eax		; Block
		call	ldap_memfree

loc_100025B7:				; CODE XREF: sub_10002520+8Fj
		push	esi
		call	ds:PR_Free
		add	esp, 4

loc_100025C1:				; CODE XREF: sub_10002520+32j
					; sub_10002520+39j ...
		pop	esi

loc_100025C2:				; CODE XREF: sub_10002520+26j
					; sub_10002520+2Aj
		push	dword_100052AC
		mov	dword ptr [ebx], 0
		call	ds:PR_Unlock
		add	esp, 4
		pop	edi
		pop	ebx
		retn
sub_10002520	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100025E0	proc near		; CODE XREF: sub_10002250+99p
					; DATA XREF: sub_100023D0+8Bo

arg_0		= dword	ptr  4
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_C]
		test	edi, edi
		jz	loc_1000266D
		push	ebx
		mov	ebx, [edi+4]
		push	esi
		push	dword_100052B0
		call	ds:PR_GetThreadPrivate
		add	esp, 4
		test	eax, eax
		jz	short loc_10002617
		cmp	ebx, [eax]
		jge	short loc_10002617
		mov	esi, [eax+4]
		test	esi, esi
		jz	short loc_10002617
		mov	esi, [esi+ebx*4]
		test	esi, esi
		jnz	short loc_1000263C

loc_10002617:				; CODE XREF: sub_100025E0+23j
					; sub_100025E0+27j ...
		push	10h
		push	1
		call	ds:PR_Calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1000266B
		mov	dword ptr [esi], 4D4F5A45h
		push	esi
		push	dword ptr [edi+4]
		call	sub_10002670
		add	esp, 8

loc_1000263C:				; CODE XREF: sub_100025E0+35j
		mov	eax, [esp+0Ch+arg_0]
		mov	[esi+4], eax
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_10002650
		push	eax		; Block
		call	ldap_memfree

loc_10002650:				; CODE XREF: sub_100025E0+68j
		mov	eax, [esp+10h+arg_0]
		mov	[esi+8], eax
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10002664
		push	eax		; Block
		call	ldap_memfree

loc_10002664:				; CODE XREF: sub_100025E0+7Cj
		mov	eax, [esp+14h+arg_0]
		mov	[esi+0Ch], eax

loc_1000266B:				; CODE XREF: sub_100025E0+48j
		pop	esi
		pop	ebx

loc_1000266D:				; CODE XREF: sub_100025E0+7j
		pop	edi
		retn
sub_100025E0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002670	proc near		; CODE XREF: sub_100025E0+54p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	esi, dword_1000528C
		jle	short loc_10002682

loc_1000267D:				; CODE XREF: sub_10002670+35j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002682:				; CODE XREF: sub_10002670+Bj
		push	dword_100052B0
		call	ds:PR_GetThreadPrivate
		add	esp, 4
		test	eax, eax
		jz	short loc_10002699
		cmp	esi, [eax]
		jl	short loc_100026A7

loc_10002699:				; CODE XREF: sub_10002670+23j
		push	esi
		push	eax
		call	sub_100027D0
		add	esp, 8
		test	eax, eax
		jz	short loc_1000267D

loc_100026A7:				; CODE XREF: sub_10002670+27j
		mov	ecx, [eax+4]
		mov	eax, [esp+4+arg_4]
		mov	[ecx+esi*4], eax
		xor	eax, eax
		pop	esi
		retn
sub_10002670	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100026C0(LDAP	*ld)
sub_100026C0	proc near		; CODE XREF: .text:10001AABp

var_24		= byte ptr -24h
var_10		= dword	ptr -10h
ld		= dword	ptr  4

		sub	esp, 24h
		lea	eax, [esp+24h+var_24]
		push	eax		; outvalue
		push	5		; option
		push	[esp+2Ch+ld]	; ld
		call	ldap_get_option
		test	eax, eax
		jnz	short loc_100026E7
		mov	eax, [esp+30h+var_10]
		test	eax, eax
		jz	short loc_100026E7
		push	eax
		call	sub_10002520
		add	esp, 4

loc_100026E7:				; CODE XREF: sub_100026C0+14j
					; sub_100026C0+1Cj
		add	esp, 24h
		retn
sub_100026C0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

loc_100026F0:				; CODE XREF: .text:10001B02j
		sub	esp, 24h
		lea	eax, [esp]
		push	esi
		mov	esi, [esp+2Ch]
		push	eax
		push	5
		push	esi
		call	ldap_get_option
		test	eax, eax
		jz	short loc_10002712

loc_10002708:				; CODE XREF: .text:1000272Fj
					; .text:10002740j
		mov	eax, 52h
		pop	esi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10002712:				; CODE XREF: .text:10002706j
		cmp	dword ptr [esp+24h], 0
		jnz	short loc_10002742
		cmp	dword ptr [esp+1Ch], 0
		jz	short loc_10002742
		push	esi
		call	sub_10002250
		add	esp, 4
		mov	[esp+24h], eax
		test	eax, eax
		jz	short loc_10002708
		lea	eax, [esp+4]
		push	eax
		push	5
		push	esi
		call	ldap_set_option
		test	eax, eax
		jnz	short loc_10002708

loc_10002742:				; CODE XREF: .text:10002717j
					; .text:1000271Ej
		xor	eax, eax
		pop	esi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10002750:				; DATA XREF: .text:100023AFo
		push	edi
		mov	edi, [esp+8]
		test	edi, edi
		jz	short loc_100027C9
		cmp	dword ptr [edi+4], 0
		push	ebp
		mov	ebp, ds:PR_Free
		jz	short loc_100027C2
		push	ebx
		xor	ebx, ebx
		cmp	[edi], ebx
		jle	short loc_100027B2
		push	esi
		mov	edi, edi

loc_10002770:				; CODE XREF: .text:100027AFj
		mov	eax, [edi+4]
		mov	esi, [eax+ebx*4]
		test	esi, esi
		jz	short loc_100027AC
		cmp	dword ptr [esi], 4D4F5A45h
		jnz	short loc_1000279C
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_1000278F
		push	eax
		call	ldap_memfree

loc_1000278F:				; CODE XREF: .text:10002787j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1000279C
		push	eax
		call	ldap_memfree

loc_1000279C:				; CODE XREF: .text:10002780j
					; .text:10002794j
		push	esi
		call	ebp ; PR_Free
		mov	eax, [edi+4]
		add	esp, 4
		mov	dword ptr [eax+ebx*4], 0

loc_100027AC:				; CODE XREF: .text:10002778j
		inc	ebx
		cmp	ebx, [edi]
		jl	short loc_10002770
		pop	esi

loc_100027B2:				; CODE XREF: .text:1000276Bj
		push	dword ptr [edi+4]
		call	ebp ; PR_Free
		add	esp, 4
		mov	dword ptr [edi+4], 0
		pop	ebx

loc_100027C2:				; CODE XREF: .text:10002764j
		push	edi
		call	ebp ; PR_Free
		add	esp, 4
		pop	ebp

loc_100027C9:				; CODE XREF: .text:10002757j
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100027D0	proc near		; CODE XREF: sub_10002520+5Fp
					; sub_10002670+2Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, ds:PR_Calloc
		test	esi, esi
		jnz	short loc_10002802
		push	8
		push	1
		call	edi ; PR_Calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_100027F2
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100027F2:				; CODE XREF: sub_100027D0+1Dj
		push	esi
		push	dword_100052B0
		call	ds:PR_SetThreadPrivate
		add	esp, 8

loc_10002802:				; CODE XREF: sub_100027D0+Ej
		mov	eax, 66666667h
		imul	[esp+8+arg_4]
		push	ebx
		sar	edx, 2
		mov	eax, edx
		shr	eax, 1Fh
		inc	eax
		add	eax, edx
		lea	ebx, [eax+eax*4]
		add	ebx, ebx
		cmp	ebx, [esi]
		jle	short loc_10002857
		push	4
		push	ebx
		call	edi ; PR_Calloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_10002832
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002832:				; CODE XREF: sub_100027D0+5Cj
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_10002852
		mov	eax, [esi]
		shl	eax, 2
		push	eax		; size_t
		push	ecx		; void *
		push	edi		; void *
		call	memcpy
		push	dword ptr [esi+4]
		call	ds:PR_Free
		add	esp, 10h

loc_10002852:				; CODE XREF: sub_100027D0+67j
		mov	[esi], ebx
		mov	[esi+4], edi

loc_10002857:				; CODE XREF: sub_100027D0+4Ej
		pop	ebx
		pop	edi
		mov	eax, esi
		pop	esi
		retn
sub_100027D0	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION ldap_set_option]
; [00000006 BYTES: COLLAPSED FUNCTION ber_sockbuf_get_option]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_get_option]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_memfree]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_get_lderrno]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_set_lderrno]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_x_hostlist_first]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_x_hostlist_next]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_x_hostlist_statusfree]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_init]
; [00000006 BYTES: COLLAPSED FUNCTION ldap_unbind]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002902	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_10002A3D
		mov	eax, dword_100052C0
		test	eax, eax
		jle	loc_10002A36
		dec	eax
		mov	ebx, offset dword_100055F0
		mov	dword_100052C0,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_10002940
; ---------------------------------------------------------------------------

loc_1000293C:				; CODE XREF: sub_10002902+48j
		cmp	eax, edx
		jz	short loc_1000294E

loc_10002940:				; CODE XREF: sub_10002902+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_1000293C
		jmp	short loc_10002955
; ---------------------------------------------------------------------------

loc_1000294E:				; CODE XREF: sub_10002902+3Cj
		mov	[ebp+var_4], 1

loc_10002955:				; CODE XREF: sub_10002902+4Aj
		cmp	dword_100055F4,	2
		jz	short loc_1000296B
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_10002AED
; ---------------------------------------------------------------------------

loc_1000296B:				; CODE XREF: sub_10002902+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_10002A1E
		push	dword_100055F8	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_10002998:				; CODE XREF: sub_10002902+9Fj
					; sub_10002902+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_100029FB
		cmp	[ebx], edi
		jz	short loc_10002998
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_10002998
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_100055F8	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_100029EC
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_10002998

loc_100029EC:				; CODE XREF: sub_10002902+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_10002998
; ---------------------------------------------------------------------------

loc_100029FB:				; CODE XREF: sub_10002902+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10002A08
		push	esi		; void *
		call	ds:free
		pop	ecx

loc_10002A08:				; CODE XREF: sub_10002902+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_100055F8,	eax
		mov	ebx, offset dword_100055F0
		mov	Ptr, eax

loc_10002A1E:				; CODE XREF: sub_10002902+7Cj
		mov	dword_100055F4,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_10002AED
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_10002AED
; ---------------------------------------------------------------------------

loc_10002A36:				; CODE XREF: sub_10002902+19j
					; sub_10002902+19Fj
		xor	eax, eax
		jmp	loc_10002AF0
; ---------------------------------------------------------------------------

loc_10002A3D:				; CODE XREF: sub_10002902+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_10002AED
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_100055F0
		mov	edx, [eax+4]
		jmp	short loc_10002A5F
; ---------------------------------------------------------------------------

loc_10002A5B:				; CODE XREF: sub_10002902+167j
		cmp	eax, edx
		jz	short loc_10002A6D

loc_10002A5F:				; CODE XREF: sub_10002902+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10002A5B
		jmp	short loc_10002A70
; ---------------------------------------------------------------------------

loc_10002A6D:				; CODE XREF: sub_10002902+15Bj
		xor	esi, esi
		inc	esi

loc_10002A70:				; CODE XREF: sub_10002902+169j
		cmp	dword_100055F4,	edi
		push	2
		pop	edi
		jz	short loc_10002A84
		push	1Fh
		call	_amsg_exit
		jmp	short loc_10002AB9
; ---------------------------------------------------------------------------

loc_10002A84:				; CODE XREF: sub_10002902+177j
		push	offset dword_10004144
		push	offset dword_10004138
		mov	dword_100055F4,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10002A36
		push	offset dword_10004134
		push	offset dword_10004130
		call	_initterm
		pop	ecx
		mov	dword_100055F4,	edi

loc_10002AB9:				; CODE XREF: sub_10002902+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_10002AC2
		xor	eax, eax
		xchg	eax, [ebx]

loc_10002AC2:				; CODE XREF: sub_10002902+1BAj
		cmp	dword_10005600,	0
		jz	short loc_10002AE7
		push	offset dword_10005600
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_10002AE7
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_10005600

loc_10002AE7:				; CODE XREF: sub_10002902+1C7j
					; sub_10002902+1D6j
		inc	dword_100052C0

loc_10002AED:				; CODE XREF: sub_10002902+64j
					; sub_10002902+125j ...
		xor	eax, eax
		inc	eax

loc_10002AF0:				; CODE XREF: sub_10002902+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10002902	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002DA0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_10002DDC
		mov	edi, [ebp+arg_4]

loc_10002DC4:				; CODE XREF: sub_10002DA0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10002DD4
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_10002DDE

loc_10002DD4:				; CODE XREF: sub_10002DA0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_10002DC4

loc_10002DDC:				; CODE XREF: sub_10002DA0+1Fj
		xor	eax, eax

loc_10002DDE:				; CODE XREF: sub_10002DA0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10002DA0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10002F1D(_onexit_t)
sub_10002F1D	proc near		; CODE XREF: sub_10002FC6+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	14h
		push	offset stru_100042F0
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10002F4F
		push	[ebp+arg_0]	; _onexit_t
		call	ds:_onexit
		pop	ecx
		jmp	short loc_10002FB4
; ---------------------------------------------------------------------------

loc_10002F4F:				; CODE XREF: sub_10002F1D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_100055F8	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+arg_0]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_100055F8,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_10002FBD
; ---------------------------------------------------------------------------

loc_10002FB2:				; CODE XREF: sub_10002F1D+A8j
		mov	eax, edi

loc_10002FB4:				; CODE XREF: sub_10002F1D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_10002FBA:				; DATA XREF: .rdata:stru_100042F0o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 10002F1D

loc_10002FBD:				; CODE XREF: sub_10002F1D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_10002F1D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10002FC6(_onexit_t)
sub_10002FC6	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]	; _onexit_t
		call	sub_10002F1D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_10002FC6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002FDB	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_1000300B
		test	esi, eax
		jz	short loc_1000300B
		not	eax
		mov	dword_10005294,	eax
		jmp	short loc_10003071
; ---------------------------------------------------------------------------

loc_1000300B:				; CODE XREF: sub_10002FDB+21j
					; sub_10002FDB+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_10003053
		mov	ecx, 0BB40E64Fh
		jmp	short loc_10003063
; ---------------------------------------------------------------------------

loc_10003053:				; CODE XREF: sub_10002FDB+6Fj
		test	esi, ecx
		jnz	short loc_10003063
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_10003063:				; CODE XREF: sub_10002FDB+76j
					; sub_10002FDB+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_10005294,	ecx

loc_10003071:				; CODE XREF: sub_10002FDB+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10002FDB	endp

; [00000022 BYTES: COLLAPSED FUNCTION DllMain(x,x,x)]

; =============== S U B	R O U T	I N E =======================================


sub_10003099	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_10004298
		mov	edi, offset dword_10004298
		jmp	short loc_100030B2
; ---------------------------------------------------------------------------

loc_100030A7:				; CODE XREF: sub_10003099+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100030AF
		call	eax

loc_100030AF:				; CODE XREF: sub_10003099+12j
		add	esi, 4

loc_100030B2:				; CODE XREF: sub_10003099+Cj
		cmp	esi, edi
		jb	short loc_100030A7
		pop	edi
		pop	esi
		retn
sub_10003099	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100030B9()
sub_100030B9	proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_100042A0
		mov	edi, offset dword_100042A0
		jmp	short loc_100030D2
; ---------------------------------------------------------------------------

loc_100030C7:				; CODE XREF: sub_100030B9+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100030CF
		call	eax

loc_100030CF:				; CODE XREF: sub_100030B9+12j
		add	esi, 4

loc_100030D2:				; CODE XREF: sub_100030B9+Cj
		cmp	esi, edi
		jb	short loc_100030C7
		pop	edi
		pop	esi
		retn
sub_100030B9	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100030E6()
sub_100030E6	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_100055E8
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_100030E6	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 80h
		dd 380h	dup(?)
_text		ends

; Section 2. (virtual address 00004000)
; Virtual size			: 00000AF0 (   2800.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00002600
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_10002902+A2p ...
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_10002902+6Fp
					; sub_10002902+88p ...
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10002FDB+59p
					; DATA XREF: sub_10002FDB+59r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10002FDB+4Cp
					; DATA XREF: sub_10002FDB+4Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10002FDB+43p
					; DATA XREF: sub_10002FDB+43r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10002FDB+34p
					; DATA XREF: sub_10002FDB+34r
; BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule)
		extrn DisableThreadLibraryCalls:dword ;	CODE XREF: DllMain(x,x,x)+15p
					; DATA XREF: DllMain(x,x,x)+15r

;
; Imports from MSVCR120.dll
;
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r ...
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; void __cdecl free(void *)
		extrn free:dword	; CODE XREF: sub_10002902+FFp
					; DATA XREF: sub_10002902+FFr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_10002F1D+29p
					; DATA XREF: sub_10002F1D+29r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn __imp__lock:dword	; DATA XREF: _lockr

;
; Imports from NSLDAP32V60.dll
;
		extrn __imp_ber_sockbuf_get_option:dword
					; DATA XREF: ber_sockbuf_get_optionr
					; .rdata:100044F4o
; ULONG	__cdecl	ldap_get_option(LDAP *ld, int option, void *outvalue)
		extrn __imp_ldap_get_option:dword ; DATA XREF: ldap_get_optionr
; void __cdecl ldap_memfree(PCHAR Block)
		extrn __imp_ldap_memfree:dword ; DATA XREF: ldap_memfreer
		extrn __imp_ldap_get_lderrno:dword ; DATA XREF:	ldap_get_lderrnor
		extrn __imp_ldap_set_lderrno:dword ; DATA XREF:	ldap_set_lderrnor
		extrn __imp_ldap_x_hostlist_first:dword	; DATA XREF: ldap_x_hostlist_firstr
		extrn __imp_ldap_x_hostlist_next:dword ; DATA XREF: ldap_x_hostlist_nextr
		extrn __imp_ldap_x_hostlist_statusfree:dword
					; DATA XREF: ldap_x_hostlist_statusfreer
; LDAP *__cdecl	ldap_init(PCHAR	HostName, ULONG	PortNumber)
		extrn __imp_ldap_init:dword ; DATA XREF: ldap_initr
; ULONG	__cdecl	ldap_set_option(LDAP *ld, int option, void *invalue)
		extrn __imp_ldap_set_option:dword ; DATA XREF: ldap_set_optionr
; ULONG	__cdecl	ldap_unbind(LDAP *ld)
		extrn __imp_ldap_unbind:dword ;	DATA XREF: ldap_unbindr

;
; Imports from nss3.dll
;
		extrn PR_Unlock:dword	; CODE XREF: sub_10002250+A7p
					; .text:10002504p ...
		extrn PR_AtomicIncrement:dword ; CODE XREF: sub_10002250+33p
					; DATA XREF: sub_10002250+33r
		extrn PR_GetCurrentThread:dword	; DATA XREF: .text:loc_10002390r
		extrn PR_NewThreadPrivateIndex:dword ; CODE XREF: .text:100023B9p
					; DATA XREF: .text:100023B9r
		extrn PR_SetThreadPrivate:dword	; CODE XREF: sub_100027D0+29p
					; DATA XREF: sub_100027D0+29r
		extrn PR_GetThreadPrivate:dword	; CODE XREF: sub_10002250+74p
					; .text:10002322p ...
		extrn PR_CallOnce:dword	; CODE XREF: sub_100023D0+Dp
					; DATA XREF: sub_100023D0+Dr
		extrn PR_Lock:dword	; CODE XREF: sub_10002250+9p
					; .text:100024F4p ...
		extrn PR_NewLock:dword	; CODE XREF: .text:loc_100023A0p
					; DATA XREF: .text:loc_100023A0r ...
		extrn PR_ImportTCPSocket:dword ; CODE XREF: prldap_import_connection+C5p
					; DATA XREF: prldap_import_connection+C5r
		extrn PR_EnumerateAddrInfo:dword ; CODE	XREF: sub_100012E0+DAp
					; DATA XREF: sub_100012E0+DAr
		extrn PR_FreeAddrInfo:dword ; CODE XREF: sub_100012E0+106p
					; DATA XREF: sub_100012E0+106r
		extrn PR_GetAddrInfoByName:dword ; CODE	XREF: sub_100012E0+ACp
					; DATA XREF: sub_100012E0+ACr
		extrn PR_Free:dword	; CODE XREF: .text:100012D1p
					; sub_100012E0+1A8p ...
		extrn PR_Realloc:dword	; CODE XREF: .text:100017B0p
					; DATA XREF: .text:100017B0r
		extrn PR_Calloc:dword	; CODE XREF: sub_100012E0+4Bp
					; sub_10001560+7Cp ...
		extrn PR_Malloc:dword	; CODE XREF: .text:100017A4p
					; sub_10002250+3Dp
					; DATA XREF: ...
		extrn PR_Poll:dword	; CODE XREF: .text:100018E5p
					; DATA XREF: .text:100018E5r
		extrn PR_SetSocketOption:dword ; CODE XREF: sub_10001BE0+4Dp
					; DATA XREF: sub_10001BE0+4Dr
		extrn PR_Send:dword	; CODE XREF: sub_10001D10+53p
					; DATA XREF: sub_10001D10+53r
		extrn PR_Recv:dword	; CODE XREF: .text:100019D1p
					; DATA XREF: .text:100019D1r
		extrn PR_Connect:dword	; CODE XREF: sub_10001BE0+CEp
					; DATA XREF: sub_10001BE0+CEr
		extrn PR_OpenTCPSocket:dword ; CODE XREF: sub_10001BE0+1Ep
					; DATA XREF: sub_10001BE0+1Er
		extrn PR_Close:dword	; CODE XREF: .text:100012AAp
					; sub_10001BE0+67p ...
		extrn PR_MillisecondsToInterval:dword ;	CODE XREF: .text:100018B5p
					; .text:100018D5p ...
		extrn PR_GetOSError:dword ; DATA XREF: .text:loc_10001230r
		extrn PR_GetError:dword	; CODE XREF: sub_10001240p
					; sub_10001280+4p ...
		extrn PR_SetError:dword	; CODE XREF: sub_10001280+Bp
					; DATA XREF: sub_10001280+Br
		extrn PR_htons:dword	; CODE XREF: sub_10001000+5Ep
					; sub_100012E0+12Fp
					; DATA XREF: ...
		extrn PR_GetHostByAddr:dword ; CODE XREF: sub_10001000+7Bp
					; DATA XREF: sub_10001000+7Br
		extrn PR_GetIPNodeByName:dword ; CODE XREF: sub_100010D0+21p
					; DATA XREF: sub_100010D0+21r
		extrn PR_NetAddrToString:dword ; CODE XREF: sub_10001140+5Fp
					; DATA XREF: sub_10001140+5Fr
		extrn PR_StringToNetAddr:dword ; CODE XREF: sub_10001000+4Ep
					; sub_100012E0+11Ep
					; DATA XREF: ...
		extrn PR_GetPeerName:dword ; CODE XREF:	sub_10001140+3Dp
					; DATA XREF: sub_10001140+3Dr
		extrn PR_DestroyLock:dword ; DATA XREF:	.text:loc_100024E0r


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10004130h
dword_10004130	dd 0			; DATA XREF: sub_10002902+1A6o
dword_10004134	dd 0			; DATA XREF: sub_10002902+1A1o
dword_10004138	dd 0			; DATA XREF: sub_10002902+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
dword_10004144	dd 3 dup(0)		; DATA XREF: sub_10002902:loc_10002A84o
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56F29A75h		; TimeDateStamp: Wed Mar 23 13:30:29 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 97h			; SizeOfData
		dd rva asc_100041E0	; AddressOfRawData
		dd 27E0h		; PointerToRawData
		dd 0			; Characteristics
		dd 56F29A75h		; TimeDateStamp: Wed Mar 23 13:30:29 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_10004278	; AddressOfRawData
		dd 2878h		; PointerToRawData
dword_10004188	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_10002B5Ar
					; ___DllMainCRTStartup+A8r ...
off_1000418C	dd offset dword_100052C8 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_10005318
		align 8
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_100041E0	db 'RSDS'               ; DATA XREF: .rdata:10004164o
					; CV signature
		dd 377D1D54h		; Data1	; GUID
		dw 19EFh		; Data2
		dw 46CBh		; Data3
		db 8Eh,	0D5h, 0F5h, 48h, 19h, 8Bh, 0B5h, 9; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-' ; PdbFileName
		db 'tb\ldap\sdks\c-sdk\ldap\libraries\libprldap\nsldappr32v60.pdb',0
		align 4
; Debug	information (type 12)
dword_10004278	dd 0			; DATA XREF: .rdata:10004180o
		dd 2 dup(13h), 3 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:100041D8o
		align 8
dword_10004298	dd 2 dup(0)		; DATA XREF: sub_10003099+2o
					; sub_10003099+7o
dword_100042A0	dd 2 dup(0)		; DATA XREF: sub_100030B9+2o
					; sub_100030B9+7o
stru_100042A8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10002B1C
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_100042D0	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10002DF0
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_10002E79	; ScopeRecord.FilterFunc
		dd offset loc_10002E8C	; ScopeRecord.HandlerFunc
		align 10h
stru_100042F0	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_10002F1D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10002F1D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_10002FBA	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for NSLDAPPR32V60.dll
;
		dd 0			; Characteristics
		dd 56F29A75h		; TimeDateStamp: Wed Mar 23 13:30:29 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aNsldappr32v60_	; Name
		dd 7DAh			; Base
		dd 0Ch			; NumberOfFunctions
		dd 0Ch			; NumberOfNames
		dd rva off_10004338	; AddressOfFunctions
		dd rva off_10004368	; AddressOfNames
		dd rva word_10004398	; AddressOfNameOrdinals
;
; Export Address Table for NSLDAPPR32V60.dll
;
off_10004338	dd rva prldap_init, rva	prldap_install_routines, rva prldap_set_session_info
					; DATA XREF: .rdata:1000432Co
		dd rva prldap_get_session_info,	rva prldap_set_socket_info
		dd rva prldap_get_socket_info, rva prldap_set_session_option
		dd rva prldap_get_session_option, rva prldap_is_installed
		dd rva prldap_import_connection, rva prldap_set_default_socket_info
		dd rva prldap_get_default_socket_info
;
; Export Names Table for NSLDAPPR32V60.dll
;
off_10004368	dd rva aPrldap_get_def,	rva aPrldap_get_ses, rva aPrldap_get_s_0
					; DATA XREF: .rdata:10004330o
		dd rva aPrldap_get_soc,	rva aPrldap_import_, rva aPrldap_init ;	"prldap_get_default_socket_info"
		dd rva aPrldap_install,	rva aPrldap_is_inst, rva aPrldap_set_def
		dd rva aPrldap_set_ses,	rva aPrldap_set_s_0, rva aPrldap_set_soc
;
; Export Ordinals Table	for NSLDAPPR32V60.dll
;
word_10004398	dw 0Bh,	3, 7, 5, 9, 0, 1, 8, 0Ah, 2, 6,	4 ; DATA XREF: .rdata:10004334o
aNsldappr32v60_	db 'NSLDAPPR32V60.dll',0 ; DATA XREF: .rdata:1000431Co
aPrldap_get_def	db 'prldap_get_default_socket_info',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_get_ses	db 'prldap_get_session_info',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_get_s_0	db 'prldap_get_session_option',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_get_soc	db 'prldap_get_socket_info',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_import_	db 'prldap_import_connection',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_init	db 'prldap_init',0      ; DATA XREF: .rdata:off_10004368o
aPrldap_install	db 'prldap_install_routines',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_is_inst	db 'prldap_is_installed',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_set_def	db 'prldap_set_default_socket_info',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_set_ses	db 'prldap_set_session_info',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_set_s_0	db 'prldap_set_session_option',0 ; DATA XREF: .rdata:off_10004368o
aPrldap_set_soc	db 'prldap_set_socket_info',0 ; DATA XREF: .rdata:off_10004368o
		align 4
__IMPORT_DESCRIPTOR_NSLDAP32V60	dd rva dword_100045B8 ;	Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNsldap32v60_dl	; DLL Name
		dd rva __imp_ber_sockbuf_get_option ; Import Address Table
__IMPORT_DESCRIPTOR_nss3 dd rva	off_100045E8 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNss3_dll	; DLL Name
		dd rva PR_Unlock	; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10004570 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva _calloc_crt	; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10004548 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva EncodePointer	; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10004548	dd rva word_10004A16	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10004A26
		dd rva word_10004A36
		dd rva word_10004A4A
		dd rva word_10004A66
		dd rva word_10004A80
		dd rva word_10004A96
		dd rva word_10004AAC
		dd rva word_10004AC6
		dd 0
;
; Import names for MSVCR120.dll
;
off_10004570	dd rva word_100049B2	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_10004908
		dd rva word_1000491A
		dd rva word_10004928
		dd rva word_10004930
		dd rva word_1000493E
		dd rva word_1000494A
		dd rva word_10004958
		dd rva word_1000496E
		dd rva word_10004988
		dd rva word_100049FC
		dd rva word_100049D8
		dd rva word_100049CE
		dd rva word_100049C0
		dd rva word_100048F0
		dd rva word_100049A8
		dd rva word_100049A0
		dd 0
;
; Import names for NSLDAP32V60.dll
;
dword_100045B8	dd 8000008Eh		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_NSLDAP32V60o
		dd 800001A3h
		dd 800000C8h
		dd 800001AEh
		dd 800001AFh
		dd 80000211h
		dd 80000212h
		dd 80000213h
		dd 80000055h
		dd 800001A2h
		dd 8000000Dh
		dd 0
;
; Import names for nss3.dll
;
off_100045E8	dd rva word_10004858	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_nss3o
		dd rva word_10004864
		dd rva word_1000487A
		dd rva word_10004890
		dd rva word_100048AC
		dd rva word_100048C2
		dd rva word_100048D8
		dd rva word_1000484E
		dd rva word_1000482E
		dd rva word_10004818
		dd rva word_10004800
		dd rva word_100047EE
		dd rva word_100047D6
		dd rva word_100047CC
		dd rva word_100047BE
		dd rva word_100047B2
		dd rva word_100047A6
		dd rva word_1000479C
		dd rva word_10004786
		dd rva word_1000477C
		dd rva word_10004772
		dd rva word_10004764
		dd rva word_10004750
		dd rva word_10004744
		dd rva word_10004728
		dd rva word_10004718
		dd rva word_1000470A
		dd rva word_100046FC
		dd rva word_100046F0
		dd rva word_100046DC
		dd rva word_100046C6
		dd rva word_100046B0
		dd rva word_1000469A
		dd rva word_10004688
		dd rva word_1000483C
		dd 0
aNsldap32v60_dl	db 'NSLDAP32V60.dll',0  ; DATA XREF: .rdata:100044F0o
word_10004688	dw 2B9h			; DATA XREF: .rdata:1000466Co
		db 'PR_GetPeerName',0
		align 2
word_1000469A	dw 361h			; DATA XREF: .rdata:10004668o
		db 'PR_StringToNetAddr',0
		align 10h
word_100046B0	dw 2FCh			; DATA XREF: .rdata:10004664o
		db 'PR_NetAddrToString',0
		align 2
word_100046C6	dw 2A7h			; DATA XREF: .rdata:10004660o
		db 'PR_GetIPNodeByName',0
		align 4
word_100046DC	dw 2A5h			; DATA XREF: .rdata:1000465Co
		db 'PR_GetHostByAddr',0
		align 10h
word_100046F0	dw 384h			; DATA XREF: .rdata:10004658o
		db 'PR_htons',0
		align 4
word_100046FC	dw 346h			; DATA XREF: .rdata:10004654o
		db 'PR_SetError',0
word_1000470A	dw 29Eh			; DATA XREF: .rdata:10004650o
		db 'PR_GetError',0
word_10004718	dw 2B3h			; DATA XREF: .rdata:1000464Co
		db 'PR_GetOSError',0
word_10004728	dw 2FAh			; DATA XREF: .rdata:10004648o
		db 'PR_MillisecondsToInterval',0
word_10004744	dw 239h			; DATA XREF: .rdata:10004644o
		db 'PR_Close',0
		align 10h
word_10004750	dw 316h			; DATA XREF: .rdata:10004640o
		db 'PR_OpenTCPSocket',0
		align 4
word_10004764	dw 23Eh			; DATA XREF: .rdata:1000463Co
		db 'PR_Connect',0
		align 2
word_10004772	dw 331h			; DATA XREF: .rdata:10004638o
		db 'PR_Recv',0
word_1000477C	dw 33Dh			; DATA XREF: .rdata:10004634o
		db 'PR_Send',0
word_10004786	dw 34Fh			; DATA XREF: .rdata:10004630o
		db 'PR_SetSocketOption',0
		align 4
word_1000479C	dw 31Ah			; DATA XREF: .rdata:1000462Co
		db 'PR_Poll',0
word_100047A6	dw 2F6h			; DATA XREF: .rdata:10004628o
		db 'PR_Malloc',0
word_100047B2	dw 230h			; DATA XREF: .rdata:10004624o
		db 'PR_Calloc',0
word_100047BE	dw 32Fh			; DATA XREF: .rdata:10004620o
		db 'PR_Realloc',0
		align 4
word_100047CC	dw 28Dh			; DATA XREF: .rdata:1000461Co
		db 'PR_Free',0
word_100047D6	dw 292h			; DATA XREF: .rdata:10004618o
		db 'PR_GetAddrInfoByName',0
		align 2
word_100047EE	dw 28Eh			; DATA XREF: .rdata:10004614o
		db 'PR_FreeAddrInfo',0
word_10004800	dw 26Eh			; DATA XREF: .rdata:10004610o
		db 'PR_EnumerateAddrInfo',0
		align 4
word_10004818	dw 2DAh			; DATA XREF: .rdata:1000460Co
		db 'PR_ImportTCPSocket',0
		align 2
word_1000482E	dw 2FEh			; DATA XREF: .rdata:10004608o
		db 'PR_NewLock',0
		align 4
word_1000483C	dw 259h			; DATA XREF: .rdata:10004670o
		db 'PR_DestroyLock',0
		align 2
word_1000484E	dw 2F0h			; DATA XREF: .rdata:10004604o
		db 'PR_Lock',0
word_10004858	dw 371h			; DATA XREF: .rdata:off_100045E8o
		db 'PR_Unlock',0
word_10004864	dw 21Eh			; DATA XREF: .rdata:100045ECo
		db 'PR_AtomicIncrement',0
		align 2
word_1000487A	dw 298h			; DATA XREF: .rdata:100045F0o
		db 'PR_GetCurrentThread',0
word_10004890	dw 308h			; DATA XREF: .rdata:100045F4o
		db 'PR_NewThreadPrivateIndex',0
		align 4
word_100048AC	dw 356h			; DATA XREF: .rdata:100045F8o
		db 'PR_SetThreadPrivate',0
word_100048C2	dw 2CBh			; DATA XREF: .rdata:100045FCo
		db 'PR_GetThreadPrivate',0
word_100048D8	dw 22Eh			; DATA XREF: .rdata:10004600o
		db 'PR_CallOnce',0
aNss3_dll	db 'nss3.dll',0         ; DATA XREF: .rdata:10004504o
		align 10h
word_100048F0	dw 6E6h			; DATA XREF: .rdata:100045A8o
		db 'memcpy',0
		align 2
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10004518o
		align 4
word_10004908	dw 16Fh			; DATA XREF: .rdata:10004574o
		db '__CppXcptFilter',0
word_1000491A	dw 217h			; DATA XREF: .rdata:10004578o
		db '_amsg_exit',0
		align 4
word_10004928	dw 683h			; DATA XREF: .rdata:1000457Co
		db 'free',0
		align 10h
word_10004930	dw 3A5h			; DATA XREF: .rdata:10004580o
		db '_malloc_crt',0
word_1000493E	dw 30Ch			; DATA XREF: .rdata:10004584o
		db '_initterm',0
word_1000494A	dw 30Dh			; DATA XREF: .rdata:10004588o
		db '_initterm_e',0
word_10004958	dw 250h			; DATA XREF: .rdata:1000458Co
		db '_crt_debugger_hook',0
		align 2
word_1000496E	dw 1ACh			; DATA XREF: .rdata:10004590o
		db '__crtUnhandledException',0
word_10004988	dw 1ABh			; DATA XREF: .rdata:10004594o
		db '__crtTerminateProcess',0
word_100049A0	dw 394h			; DATA XREF: .rdata:100045B0o
		db '_lock',0
word_100049A8	dw 504h			; DATA XREF: .rdata:100045ACo
		db '_unlock',0
word_100049B2	dw 22Eh			; DATA XREF: .rdata:off_10004570o
		db '_calloc_crt',0
word_100049C0	dw 1AEh			; DATA XREF: .rdata:100045A4o
		db '__dllonexit',0
word_100049CE	dw 43Ah			; DATA XREF: .rdata:100045A0o
		db '_onexit',0
word_100049D8	dw 18Ch			; DATA XREF: .rdata:1000459Co
		db '__clean_type_info_names_internal',0
		align 4
word_100049FC	dw 27Ah			; DATA XREF: .rdata:10004598o
		db '_except_handler4_common',0
word_10004A16	dw 121h			; DATA XREF: .rdata:off_10004548o
		db 'EncodePointer',0
word_10004A26	dw 0FEh			; DATA XREF: .rdata:1000454Co
		db 'DecodePointer',0
word_10004A36	dw 367h			; DATA XREF: .rdata:10004550o
		db 'IsDebuggerPresent',0
word_10004A4A	dw 36Dh			; DATA XREF: .rdata:10004554o
		db 'IsProcessorFeaturePresent',0
word_10004A66	dw 42Dh			; DATA XREF: .rdata:10004558o
		db 'QueryPerformanceCounter',0
word_10004A80	dw 20Ah			; DATA XREF: .rdata:1000455Co
		db 'GetCurrentProcessId',0
word_10004A96	dw 20Eh			; DATA XREF: .rdata:10004560o
		db 'GetCurrentThreadId',0
		align 4
word_10004AAC	dw 2D6h			; DATA XREF: .rdata:10004564o
		db 'GetSystemTimeAsFileTime',0
word_10004AC6	dw 113h			; DATA XREF: .rdata:10004568o
		db 'DisableThreadLibraryCalls',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:1000452Co
		align 800h
_rdata		ends

; Section 3. (virtual address 00005000)
; Virtual size			: 00000604 (   1540.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00003200
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10005000h
dword_10005000	dd 0FFFFE890h		; DATA XREF: sub_10001240+6r
dword_10005004	dd 0Ch			; DATA XREF: sub_10001240:loc_10001270r
dword_10005008	dd 0FFFFE891h		; DATA XREF: sub_10001240+1Cr
		dd 9, 0FFFFE892h, 0Bh, 0FFFFE893h, 0Eh,	0FFFFE894h, 16h
		dd 0FFFFE895h, 0Dh, 0FFFFE896h,	0FFFFFFFFh, 0FFFFE897h
		dd 0FFFFFFFFh, 0FFFFE898h, 81h,	0FFFFE899h, 5, 0FFFFE89Ah
		dd 8Ah,	0FFFFE89Bh, 0FFFFFFFFh,	0FFFFE89Ch, 14h, 0FFFFE89Dh
		dd 16h,	0FFFFE89Eh, 65h, 0FFFFE89Fh, 66h, 0FFFFE8A0h, 71h
		dd 0FFFFE8A1h, 0Eh, 0FFFFE8A2h,	64h, 0FFFFE8A3h, 6Bh, 0FFFFE8A4h
		dd 6Eh,	0FFFFE8A5h, 8Ah, 0FFFFE8A6h, 7Eh, 0FFFFE8A7h, 0FFFFFFFFh
		dd 0FFFFE8A8h, 0FFFFFFFFh, 0FFFFE8A9h, 0FFFFFFFFh, 0FFFFE8AAh
		dd 0FFFFFFFFh, 0FFFFE8ABh, 6Eh,	0FFFFE8ACh, 0FFFFFFFFh
		dd 0FFFFE8ADh, 0FFFFFFFFh, 0FFFFE8AEh, 0FFFFFFFFh, 0FFFFE8AFh
		dd 80h,	0FFFFE8B0h, 88h, 0FFFFE8B1h, 0FFFFFFFFh, 0FFFFE8B2h
		dd 0Dh,	0FFFFE8B3h, 82h, 0FFFFE8B4h, 87h, 0FFFFE8B5h, 0FFFFFFFFh
		dd 0FFFFE8B6h, 84h, 0FFFFE8B7h,	6Ch, 0FFFFE8B8h, 22h, 0FFFFE8B9h
		dd 24h,	0FFFFE8BAh, 24h, 0FFFFE8BBh, 1Bh, 0FFFFE8BCh, 1Ch
		dd 0FFFFE8BDh, 20h, 0FFFFE8BEh,	1Dh, 0FFFFE8BFh, 15h, 0FFFFE8C0h
		dd 72h,	0FFFFE8C1h, 26h, 0FFFFE8C2h, 2,	0FFFFE8C3h, 14h
		dd 0FFFFE8C4h, 1Eh, 0FFFFE8C5h,	29h, 0FFFFE8C6h, 10h, 0FFFFE8C7h
		dd 12h,	0FFFFE8C8h, 0FFFFFFFFh,	0FFFFE8C9h, 11h, 0FFFFE8CAh
		dd 0FFFFFFFFh, 0FFFFE8CBh, 0FFFFFFFFh, 0FFFFE8CCh, 0FFFFFFFEh
		dd 0FFFFE8CDh, 17h, 0FFFFE8CEh,	0FFFFFFFFh, 0FFFFE8CFh
		dd 1Dh,	0FFFFE8D0h, 8Bh, 0FFFFE8D1h, 0FFFFFFFFh, 0FFFFE8D2h
		dd 0FFFFFFFFh, 0FFFFE8D3h, 0FFFFFFFFh, 0FFFFE8D4h, 0FFFFFFFFh
		dd 0FFFFE8D5h, 0FFFFFFFFh, 0FFFFE8D6h, 74h, 0FFFFE8D7h
		dd 274Ah, 0FFFFE8D8h, 6Ah, 0FFFFE8D9h, 6Eh, 0FFFFE8DCh
		dd 0FFFFFFFFh
word_10005258	dw 1			; DATA XREF: .text:1000181Cr
					; .text:10001908r
		align 4
dword_1000525C	dd 1			; DATA XREF: .text:10001814r
					; .text:10001913r
word_10005260	dw 4			; DATA XREF: .text:10001830r
					; .text:loc_1000191Cr
		align 4
dword_10005264	dd 2			; DATA XREF: .text:10001828r
					; .text:10001927r
word_10005268	dw 2			; DATA XREF: .text:10001844r
					; .text:loc_10001930r
		align 4
dword_1000526C	dd 4			; DATA XREF: .text:1000183Cr
					; .text:1000193Br
word_10005270	dw 8			; DATA XREF: .text:10001858r
					; .text:loc_10001944r
		align 4
dword_10005274	dd 8			; DATA XREF: .text:10001850r
					; .text:1000194Fr
word_10005278	dw 20h			; DATA XREF: .text:1000186Cr
					; .text:loc_10001958r
		align 4
dword_1000527C	dd 10h			; DATA XREF: .text:10001864r
					; .text:10001963r
word_10005280	dw 10h			; DATA XREF: .text:10001880r
					; .text:loc_1000196Cr
		align 4
dword_10005284	dd 20h			; DATA XREF: .text:10001878r
					; .text:10001977r
dword_10005288	dd 0FFFFFFFFh		; DATA XREF: sub_10001530+16r
					; sub_10001560+89r ...
dword_1000528C	dd 0FFFFFFFFh		; DATA XREF: sub_10002250:loc_1000227Eo
					; sub_10002520+3Er ...
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_10001000+3r
					; sub_10001140+3r ...
dword_10005294	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_10002FDB+29w ...
		align 10h
dword_100052A0	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
		align 8
dword_100052A8	dd 0			; DATA XREF: sub_10002250+Fr
					; sub_10002250+5Aw ...
dword_100052AC	dd 0			; DATA XREF: sub_10002250+3r
					; sub_10002250:loc_100022F1r ...
dword_100052B0	dd 0			; DATA XREF: sub_10002250+6Er
					; .text:10002319r ...
dword_100052B4	dd 3 dup(0)		; DATA XREF: sub_100023D0+8o
dword_100052C0	dd 0			; DATA XREF: sub_10002902+12r
					; sub_10002902+25w ...
		align 8
dword_100052C8	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_1000418Co
dword_100052CC	dd 0			; DATA XREF: ___report_gsfailure+A9w
		dd 0
dword_100052D4	dd 0			; DATA XREF: ___report_gsfailure+9Aw
dword_100052D8	dd 0			; DATA XREF: ___report_gsfailure+B3w
dword_100052DC	dd 0			; DATA XREF: ___report_gsfailure+C3w
		dd 0Eh dup(0)
dword_10005318	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:10004190o
		dd 22h dup(0)
word_100053A4	dw 0			; DATA XREF: ___report_gsfailure+5Fw
		align 4
word_100053A8	dw 0			; DATA XREF: ___report_gsfailure+58w
		align 4
word_100053AC	dw 0			; DATA XREF: ___report_gsfailure+51w
		align 10h
word_100053B0	dw 0			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_100053B4	dd 0			; DATA XREF: ___report_gsfailure+36w
dword_100053B8	dd 0			; DATA XREF: ___report_gsfailure+30w
dword_100053BC	dd 0			; DATA XREF: ___report_gsfailure+2Aw
dword_100053C0	dd 0			; DATA XREF: ___report_gsfailure+24w
dword_100053C4	dd 0			; DATA XREF: ___report_gsfailure+1Ew
dword_100053C8	dd 0			; DATA XREF: ___report_gsfailure:loc_10002CA5w
dword_100053CC	dd 0			; DATA XREF: ___report_gsfailure+70w
dword_100053D0	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_100053D4	dw 0			; DATA XREF: ___report_gsfailure+43w
		align 4
dword_100053D8	dd 0			; DATA XREF: ___report_gsfailure+67w
dword_100053DC	dd 0			; DATA XREF: ___report_gsfailure+80w
word_100053E0	dw 0			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 7 dup(0)
		dd 79h dup(?)
dword_100055E4	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_100055E8	dd 2 dup(?)		; DATA XREF: sub_100030E6o
dword_100055F0	dd ?			; DATA XREF: sub_10002902+20o
					; sub_10002902+112o ...
dword_100055F4	dd ?			; DATA XREF: sub_10002902:loc_10002955r
					; sub_10002902:loc_10002A1Ew ...
; PVOID	dword_100055F8
dword_100055F8	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_10002902+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_10002902:loc_1000296Br ...
dword_10005600	dd ?			; DATA XREF: sub_10002902:loc_10002AC2r
					; sub_10002902+1C9o ...
		align 1000h
_data		ends


		end DllEntryPoint
