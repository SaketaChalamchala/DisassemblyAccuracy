;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BCA0796BA3D2B0B1ACA3E50D50979F91
; Input	CRC32 :	41400509

; File Name   :	C:\compspace\compare\thunderbird\dlls\original\libEGL.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00006074 (  24692.)
; Section size in file		: 00006200 (  25088.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; PDB File Name	: c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-tb\gfx\angle\src\libEGL\libEGL.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_10001000	proc near		; DATA XREF: .rdata:10008168o
		push	offset sub_1000703A ; _onexit_t
		call	sub_100065CF
		pop	ecx
		retn
sub_10001000	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000100C	proc near		; DATA XREF: .rdata:1000816Co
		push	offset sub_10007045 ; _onexit_t
		call	sub_100065CF
		pop	ecx
		retn
sub_1000100C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001018	proc near		; DATA XREF: .rdata:10008170o
		push	offset sub_10007050 ; _onexit_t
		call	sub_100065CF
		pop	ecx
		retn
sub_10001018	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001024	proc near		; DATA XREF: .rdata:10008164o

var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		fld	ds:flt_100085B0
		push	9		; int
		push	ecx
		fstp	[esp+10h+var_10] ; float
		call	sub_10001DC3
		pop	ecx
		pop	ecx
		fstp	[ebp+var_4]
		fld	ds:flt_100085B0
		push	9		; int
		push	ecx
		fstp	[esp+10h+var_10] ; float
		call	sub_10001DC3
		pop	ecx
		pop	ecx
		fstp	[ebp+var_8]
		fld	ds:flt_100085B0
		push	10h		; int
		push	ecx
		fstp	[esp+10h+var_10] ; float
		call	sub_10001DC3
		fld	[ebp+var_4]
		fsub	ds:dbl_100085A8
		pop	ecx
		pop	ecx
		fdiv	[ebp+var_8]
		fmulp	st(1), st
		fstp	flt_1000A034
		mov	esp, ebp
		pop	ebp
		retn
sub_10001024	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001080	proc near		; CODE XREF: sub_10002836+Ap

var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		xor	ebx, ebx
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_0]
		mov	ecx, [ebp+10h]
		mov	[esp+18h+arg_4], ecx
		mov	eax, [edi]
		mov	esi, [eax+4]
		cmp	[esi+edi+24h], ebx
		jl	short loc_100010B6
		jg	short loc_100010AA
		cmp	[esi+edi+20h], ebx
		jbe	short loc_100010B6

loc_100010AA:				; CODE XREF: sub_10001080+22j
		mov	esi, [esi+edi+20h]
		cmp	esi, ecx
		jbe	short loc_100010B6
		sub	esi, ecx
		jmp	short loc_100010B8
; ---------------------------------------------------------------------------

loc_100010B6:				; CODE XREF: sub_10001080+20j
					; sub_10001080+28j ...
		xor	esi, esi

loc_100010B8:				; CODE XREF: sub_10001080+34j
		push	edi
		lea	ecx, [esp+1Ch+var_8]
		call	sub_10002755
		cmp	[esp+18h+var_4], bl
		jnz	short loc_100010D0
		push	4
		pop	ebx
		jmp	loc_10001178
; ---------------------------------------------------------------------------

loc_100010D0:				; CODE XREF: sub_10001080+46j
		mov	eax, [edi]
		mov	eax, [eax+4]
		mov	eax, [eax+edi+14h]
		and	eax, 1C0h
		cmp	eax, 40h
		jz	short loc_1000110A
		test	esi, esi
		jz	short loc_1000110A

loc_100010E7:				; CODE XREF: sub_10001080+88j
		mov	eax, [edi]
		mov	ecx, [eax+4]
		mov	al, [ecx+edi+40h]
		mov	ecx, [ecx+edi+38h]
		mov	byte ptr [esp+18h+arg_0], al
		push	[esp+18h+arg_0]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000115C
		dec	esi
		jnz	short loc_100010E7

loc_1000110A:				; CODE XREF: sub_10001080+61j
					; sub_10001080+65j
		cmp	dword ptr [ebp+14h], 10h
		jb	short loc_10001113
		mov	ebp, [ebp+0]

loc_10001113:				; CODE XREF: sub_10001080+8Ej
		mov	eax, [edi]
		push	0
		push	[esp+1Ch+arg_4]
		mov	eax, [eax+4]
		push	ebp
		mov	ecx, [eax+edi+38h]
		call	ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	eax, [esp+18h+arg_4]
		jnz	short loc_10001166
		test	edx, edx
		jnz	short loc_10001166

loc_10001133:				; CODE XREF: sub_10001080+DFj
		test	esi, esi
		jz	short loc_10001169

loc_10001137:				; CODE XREF: sub_10001080+D8j
		mov	eax, [edi]
		mov	ecx, [eax+4]
		mov	al, [ecx+edi+40h]
		mov	ecx, [ecx+edi+38h]
		mov	byte ptr [esp+18h+arg_4], al
		push	[esp+18h+arg_4]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10001161
		dec	esi
		jnz	short loc_10001137
		jmp	short loc_10001169
; ---------------------------------------------------------------------------

loc_1000115C:				; CODE XREF: sub_10001080+85j
		push	4
		pop	ebx
		jmp	short loc_10001133
; ---------------------------------------------------------------------------

loc_10001161:				; CODE XREF: sub_10001080+D5j
		or	ebx, 4
		jmp	short loc_10001169
; ---------------------------------------------------------------------------

loc_10001166:				; CODE XREF: sub_10001080+ADj
					; sub_10001080+B1j
		push	4
		pop	ebx

loc_10001169:				; CODE XREF: sub_10001080+B5j
					; sub_10001080+DAj ...
		mov	eax, [edi]
		mov	eax, [eax+4]
		and	dword ptr [eax+edi+20h], 0
		and	dword ptr [eax+edi+24h], 0

loc_10001178:				; CODE XREF: sub_10001080+4Bj
		mov	eax, [edi]
		push	0
		push	ebx
		mov	ecx, [eax+4]
		add	ecx, edi
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		mov	esi, [esp+18h+var_8]
		mov	ecx, esi
		call	ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
		mov	eax, [esi]
		mov	ecx, [eax+4]
		mov	ecx, [ecx+esi+38h]
		test	ecx, ecx
		jz	short loc_100011A6
		mov	edx, [ecx]
		call	dword ptr [edx+8]

loc_100011A6:				; CODE XREF: sub_10001080+11Fj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn
sub_10001080	endp


; =============== S U B	R O U T	I N E =======================================


sub_100011AF	proc near		; CODE XREF: sub_10002836+1Bp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	[esp+1Ch+arg_4]
		xor	ebp, ebp
		call	sub_10004951
		mov	edi, [esp+20h+arg_0]
		pop	ecx
		mov	[esp+1Ch+var_C], eax
		mov	ecx, [edi]
		mov	ecx, [ecx+4]
		mov	ebx, [ecx+edi+24h]
		mov	esi, [ecx+edi+20h]
		test	ebx, ebx
		jl	short loc_100011F1
		jg	short loc_100011EB
		test	esi, esi
		jz	short loc_100011F1
		test	ebx, ebx
		jl	short loc_100011F1
		jg	short loc_100011EB
		cmp	esi, eax
		jbe	short loc_100011F1

loc_100011EB:				; CODE XREF: sub_100011AF+2Cj
					; sub_100011AF+36j
		sub	esi, eax
		sbb	ebx, ebp
		jmp	short loc_100011F5
; ---------------------------------------------------------------------------

loc_100011F1:				; CODE XREF: sub_100011AF+2Aj
					; sub_100011AF+30j ...
		xor	esi, esi
		xor	ebx, ebx

loc_100011F5:				; CODE XREF: sub_100011AF+40j
		push	edi
		lea	ecx, [esp+20h+var_8]
		call	sub_10002755
		cmp	[esp+1Ch+var_4], 0
		jnz	short loc_1000120E
		push	4
		pop	ebp
		jmp	loc_100012C4
; ---------------------------------------------------------------------------

loc_1000120E:				; CODE XREF: sub_100011AF+55j
		mov	eax, [edi]
		mov	eax, [eax+4]
		mov	eax, [eax+edi+14h]
		and	eax, 1C0h
		cmp	eax, 40h
		jz	short loc_10001257
		test	ebx, ebx
		jl	short loc_10001257
		jle	short loc_10001253

loc_10001227:				; CODE XREF: sub_100011AF+A0j
					; sub_100011AF+A6j
		mov	eax, [edi]
		mov	ecx, [eax+4]
		mov	al, [ecx+edi+40h]
		mov	ecx, [ecx+edi+38h]
		mov	byte ptr [esp+1Ch+arg_0], al
		push	[esp+1Ch+arg_0]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100012B2
		add	esi, 0FFFFFFFFh
		adc	ebx, 0FFFFFFFFh
		test	ebx, ebx
		jg	short loc_10001227
		jl	short loc_10001257

loc_10001253:				; CODE XREF: sub_100011AF+76j
		test	esi, esi
		jnz	short loc_10001227

loc_10001257:				; CODE XREF: sub_100011AF+70j
					; sub_100011AF+74j ...
		mov	eax, [edi]
		push	0
		push	[esp+20h+var_C]
		mov	eax, [eax+4]
		push	[esp+24h+arg_4]
		mov	ecx, [eax+edi+38h]
		call	ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	eax, [esp+1Ch+var_C]
		jnz	short loc_100012B2
		test	edx, edx
		jnz	short loc_100012B2
		test	ebx, ebx
		jl	short loc_100012B5
		jle	short loc_100012AC

loc_10001280:				; CODE XREF: sub_100011AF+F9j
					; sub_100011AF+FFj
		mov	eax, [edi]
		mov	ecx, [eax+4]
		mov	al, [ecx+edi+40h]
		mov	ecx, [ecx+edi+38h]
		mov	byte ptr [esp+1Ch+arg_0], al
		push	[esp+1Ch+arg_0]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100012B2
		add	esi, 0FFFFFFFFh
		adc	ebx, 0FFFFFFFFh
		test	ebx, ebx
		jg	short loc_10001280
		jl	short loc_100012B5

loc_100012AC:				; CODE XREF: sub_100011AF+CFj
		test	esi, esi
		jnz	short loc_10001280
		jmp	short loc_100012B5
; ---------------------------------------------------------------------------

loc_100012B2:				; CODE XREF: sub_100011AF+96j
					; sub_100011AF+C5j ...
		push	4
		pop	ebp

loc_100012B5:				; CODE XREF: sub_100011AF+CDj
					; sub_100011AF+FBj ...
		mov	eax, [edi]
		mov	eax, [eax+4]
		and	dword ptr [eax+edi+20h], 0
		and	dword ptr [eax+edi+24h], 0

loc_100012C4:				; CODE XREF: sub_100011AF+5Aj
		mov	eax, [edi]
		push	0
		push	ebp
		mov	ecx, [eax+4]
		add	ecx, edi
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		mov	esi, [esp+1Ch+var_8]
		mov	ecx, esi
		call	ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
		mov	eax, [esi]
		mov	ecx, [eax+4]
		mov	ecx, [ecx+esi+38h]
		test	ecx, ecx
		jz	short loc_100012F2
		mov	edx, [ecx]
		call	dword ptr [edx+8]

loc_100012F2:				; CODE XREF: sub_100011AF+13Cj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_100011AF	endp


; =============== S U B	R O U T	I N E =======================================


sub_100012FC	proc near		; CODE XREF: sub_10002AA5+16p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi], 0
		pop	ecx
		pop	esi
		retn
sub_100012FC	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000130E	proc near		; CODE XREF: sub_10001B98+3Fp
					; sub_10001D38+2Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	edx, edi
		mov	[esp+10h+arg_4], edx
		lea	esi, ds:2[edi*2]
		cmp	esi, ebp
		jge	short loc_1000135B

loc_1000132F:				; CODE XREF: sub_1000130E+47j
		push	dword ptr [ebx+esi*4-4]
		lea	ecx, [esp+14h+arg_10]
		push	dword ptr [ebx+esi*4]
		call	sub_100028F8
		test	al, al
		jz	short loc_10001344
		dec	esi

loc_10001344:				; CODE XREF: sub_1000130E+33j
		mov	eax, [ebx+esi*4]
		mov	[ebx+edi*4], eax
		mov	edi, esi
		lea	esi, ds:2[esi*2]
		cmp	esi, ebp
		jl	short loc_1000132F
		mov	edx, [esp+10h+arg_4]

loc_1000135B:				; CODE XREF: sub_1000130E+1Fj
		jnz	short loc_10001367
		mov	eax, [ebx+ebp*4-4]
		mov	[ebx+edi*4], eax
		lea	edi, [ebp-1]

loc_10001367:				; CODE XREF: sub_1000130E:loc_1000135Bj
		mov	eax, [esp+10h+arg_10]
		push	ecx
		push	ecx
		mov	ecx, esp
		push	[esp+18h+arg_C]
		push	edx
		mov	[ecx], eax
		mov	eax, [esp+20h+arg_14]
		push	edi
		push	ebx
		mov	[ecx+4], al
		call	sub_10001E07
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000130E	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000138C	proc near		; CODE XREF: sub_10002D1F+43p
					; sub_10004A2B+B9p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_100013AE
		cmp	eax, 0FFFFFFFFh
		ja	short loc_100013A8
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_100013AE

loc_100013A8:				; CODE XREF: sub_1000138C+Dj
		jmp	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
; ---------------------------------------------------------------------------

loc_100013AE:				; CODE XREF: sub_1000138C+8j
					; sub_1000138C+1Aj
		mov	eax, ecx
		retn
sub_1000138C	endp


; =============== S U B	R O U T	I N E =======================================


sub_100013B1	proc near		; CODE XREF: sub_10002FFB+Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_100013D8
		cmp	eax, 3FFFFFFFh
		ja	short loc_100013D2
		shl	eax, 2
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_100013D8

loc_100013D2:				; CODE XREF: sub_100013B1+Fj
		jmp	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
; ---------------------------------------------------------------------------

loc_100013D8:				; CODE XREF: sub_100013B1+8j
					; sub_100013B1+1Fj
		mov	eax, ecx
		retn
sub_100013B1	endp


; =============== S U B	R O U T	I N E =======================================


sub_100013DB	proc near		; CODE XREF: sub_10002C0B+4p
					; sub_10002C89+7p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_10001402
		cmp	eax, 0CCCCCCCh
		ja	short loc_100013FC
		imul	eax, 14h
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_10001402

loc_100013FC:				; CODE XREF: sub_100013DB+Fj
		jmp	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
; ---------------------------------------------------------------------------

loc_10001402:				; CODE XREF: sub_100013DB+8j
					; sub_100013DB+1Fj
		mov	eax, ecx
		retn
sub_100013DB	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001405	proc near		; CODE XREF: sub_10002C5F+4p
					; sub_10002CED+7p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_1000142F
		cmp	eax, 1999999h
		ja	short loc_10001429
		imul	eax, 0A0h
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_1000142F

loc_10001429:				; CODE XREF: sub_10001405+Fj
		jmp	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
; ---------------------------------------------------------------------------

loc_1000142F:				; CODE XREF: sub_10001405+8j
					; sub_10001405+22j
		mov	eax, ecx
		retn
sub_10001405	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001432	proc near		; CODE XREF: sub_10002C35+4p
					; sub_10002CBB+7p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_10001459
		cmp	eax, 0AAAAAAAh
		ja	short loc_10001453
		imul	eax, 18h
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_10001459

loc_10001453:				; CODE XREF: sub_10001432+Fj
		jmp	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
; ---------------------------------------------------------------------------

loc_10001459:				; CODE XREF: sub_10001432+8j
					; sub_10001432+1Fj
		mov	eax, ecx
		retn
sub_10001432	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000145C	proc near		; CODE XREF: sub_10001657+1Dp

arg_0		= dword	ptr  4

		call	sub_10002C89
		lea	edx, [eax+10h]
		mov	word ptr [eax+0Ch], 0
		test	edx, edx
		jz	short locret_10001476
		mov	ecx, [esp+arg_0]
		mov	ecx, [ecx]
		mov	[edx], ecx

locret_10001476:			; CODE XREF: sub_1000145C+10j
		retn	4
sub_1000145C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001479	proc near		; CODE XREF: sub_10001775+1Dp

arg_0		= dword	ptr  4

		push	edi
		call	sub_10002CED
		lea	edi, [eax+10h]
		mov	word ptr [eax+0Ch], 0
		test	edi, edi
		jz	short loc_10001497
		push	esi
		mov	esi, [esp+8+arg_0]
		push	24h
		pop	ecx
		rep movsd
		pop	esi

loc_10001497:				; CODE XREF: sub_10001479+11j
		pop	edi
		retn	4
sub_10001479	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000149B	proc near		; CODE XREF: sub_100043E8+55p

arg_0		= dword	ptr  4

		push	esi
		call	sub_10002CBB
		mov	edx, eax
		lea	esi, [edx+10h]
		mov	word ptr [edx+0Ch], 0
		test	esi, esi
		jz	short loc_100014BE
		mov	eax, [esp+4+arg_0]
		mov	ecx, [eax]
		mov	[esi], ecx
		mov	eax, [eax+4]
		mov	[esi+4], eax

loc_100014BE:				; CODE XREF: sub_1000149B+13j
		mov	eax, edx
		pop	esi
		retn	4
sub_1000149B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100014C4	proc near		; CODE XREF: sub_10002207+15p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100014E6
		mov	eax, [ebp+arg_0]
		add	esp, 18h
		pop	ebp
		retn
sub_100014C4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100014E6	proc near		; CODE XREF: sub_100014C4+15p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		jmp	short loc_100014FB
; ---------------------------------------------------------------------------

loc_100014EF:				; CODE XREF: sub_100014E6+18j
		push	esi
		lea	ecx, [ebp+arg_C]
		call	sub_10002836
		add	esi, 18h

loc_100014FB:				; CODE XREF: sub_100014E6+7j
		cmp	esi, [ebp+arg_8]
		jnz	short loc_100014EF
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_C]
		pop	esi
		mov	[eax], ecx
		mov	ecx, [ebp+arg_10]
		mov	[eax+4], ecx
		pop	ebp
		retn
sub_100014E6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001511	proc near		; CODE XREF: sub_10003B41+25p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	[ebp+arg_0], esi
		jz	short loc_10001531
		push	edi
		mov	edi, [ebp+arg_8]

loc_10001521:				; CODE XREF: sub_10001511+1Dj
		inc	dword ptr [edi]
		lea	ecx, [ebp+arg_0]
		call	sub_1000287A
		cmp	[ebp+arg_0], esi
		jnz	short loc_10001521
		pop	edi

loc_10001531:				; CODE XREF: sub_10001511+Aj
		pop	esi
		pop	ebp
		retn
sub_10001511	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10001534(int, char,	int, int, void *)
sub_10001534	proc near		; CODE XREF: sub_10001893+6Cp

var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, ecx
		push	esi
		push	edi
		mov	eax, [ebx+4]
		cmp	eax, 0AAAAAA9h
		jb	short loc_1000155B
		push	[ebp+arg_10]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		mov	[esp+10h+var_10], offset aMapSetTTooLong ; "map/set<T> too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_1000155B:				; CODE XREF: sub_10001534+10j
		mov	edi, [ebp+arg_10]
		inc	eax
		mov	[ebx+4], eax
		mov	eax, [ebp+arg_8]
		mov	[edi+4], eax
		mov	ecx, [ebx]
		cmp	eax, ecx
		jnz	short loc_1000157C
		mov	[ecx+4], edi
		mov	eax, [ebx]
		mov	[eax], edi
		mov	eax, [ebx]
		mov	[eax+8], edi
		jmp	short loc_1000159B
; ---------------------------------------------------------------------------

loc_1000157C:				; CODE XREF: sub_10001534+38j
		cmp	[ebp+arg_4], 0
		jz	short loc_1000158E
		mov	[eax], edi
		mov	ecx, [ebx]
		cmp	eax, [ecx]
		jnz	short loc_1000159B
		mov	[ecx], edi
		jmp	short loc_1000159B
; ---------------------------------------------------------------------------

loc_1000158E:				; CODE XREF: sub_10001534+4Cj
		mov	[eax+8], edi
		mov	ecx, [ebx]
		cmp	eax, [ecx+8]
		jnz	short loc_1000159B
		mov	[ecx+8], edi

loc_1000159B:				; CODE XREF: sub_10001534+46j
					; sub_10001534+54j ...
		mov	eax, [edi+4]
		mov	esi, edi
		jmp	loc_10001638
; ---------------------------------------------------------------------------

loc_100015A5:				; CODE XREF: sub_10001534+108j
		mov	eax, [esi+4]
		mov	edx, [eax+4]
		mov	ecx, [edx]
		cmp	eax, ecx
		jnz	short loc_100015E9
		mov	ecx, [edx+8]
		cmp	byte ptr [ecx+0Ch], 0
		jz	short loc_100015EF
		cmp	esi, [eax+8]
		jnz	short loc_100015C9
		mov	esi, eax
		mov	ecx, ebx
		push	esi
		call	sub_10002FBA

loc_100015C9:				; CODE XREF: sub_10001534+89j
		mov	eax, [esi+4]
		mov	ecx, ebx
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10003142
		jmp	short loc_10001635
; ---------------------------------------------------------------------------

loc_100015E9:				; CODE XREF: sub_10001534+7Bj
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_10001609

loc_100015EF:				; CODE XREF: sub_10001534+84j
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		mov	esi, [eax+4]
		jmp	short loc_10001635
; ---------------------------------------------------------------------------

loc_10001609:				; CODE XREF: sub_10001534+B9j
		cmp	esi, [eax]
		jnz	short loc_10001617
		mov	esi, eax
		mov	ecx, ebx
		push	esi
		call	sub_10003142

loc_10001617:				; CODE XREF: sub_10001534+D7j
		mov	eax, [esi+4]
		mov	ecx, ebx
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10002FBA

loc_10001635:				; CODE XREF: sub_10001534+B3j
					; sub_10001534+D3j
		mov	eax, [esi+4]

loc_10001638:				; CODE XREF: sub_10001534+6Cj
		cmp	byte ptr [eax+0Ch], 0
		jz	loc_100015A5
		mov	eax, [ebx]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [ebp+arg_0]
		mov	[eax], edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	14h
sub_10001534	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001657	proc near		; CODE XREF: sub_1000194A+6Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+4], 0CCCCCCBh
		jb	short loc_1000166E
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_1000166E:				; CODE XREF: sub_10001657+Aj
		push	ebx
		push	esi
		push	[esp+0Ch+arg_C]
		call	sub_1000145C
		inc	dword ptr [edi+4]
		mov	ebx, eax
		mov	eax, [esp+0Ch+arg_8]
		mov	[ebx+4], eax
		mov	ecx, [edi]
		cmp	eax, ecx
		jnz	short loc_10001699
		mov	[ecx+4], ebx
		mov	eax, [edi]
		mov	[eax], ebx
		mov	eax, [edi]
		mov	[eax+8], ebx
		jmp	short loc_100016B9
; ---------------------------------------------------------------------------

loc_10001699:				; CODE XREF: sub_10001657+32j
		cmp	byte ptr [esp+0Ch+arg_4], 0
		jz	short loc_100016AC
		mov	[eax], ebx
		mov	ecx, [edi]
		cmp	eax, [ecx]
		jnz	short loc_100016B9
		mov	[ecx], ebx
		jmp	short loc_100016B9
; ---------------------------------------------------------------------------

loc_100016AC:				; CODE XREF: sub_10001657+47j
		mov	[eax+8], ebx
		mov	ecx, [edi]
		cmp	eax, [ecx+8]
		jnz	short loc_100016B9
		mov	[ecx+8], ebx

loc_100016B9:				; CODE XREF: sub_10001657+40j
					; sub_10001657+4Fj ...
		mov	eax, [ebx+4]
		mov	esi, ebx
		jmp	loc_10001756
; ---------------------------------------------------------------------------

loc_100016C3:				; CODE XREF: sub_10001657+103j
		mov	eax, [esi+4]
		mov	edx, [eax+4]
		mov	ecx, [edx]
		cmp	eax, ecx
		jnz	short loc_10001707
		mov	ecx, [edx+8]
		cmp	byte ptr [ecx+0Ch], 0
		jz	short loc_1000170D
		cmp	esi, [eax+8]
		jnz	short loc_100016E7
		mov	esi, eax
		mov	ecx, edi
		push	esi
		call	sub_10002FBA

loc_100016E7:				; CODE XREF: sub_10001657+84j
		mov	eax, [esi+4]
		mov	ecx, edi
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10003142
		jmp	short loc_10001753
; ---------------------------------------------------------------------------

loc_10001707:				; CODE XREF: sub_10001657+76j
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_10001727

loc_1000170D:				; CODE XREF: sub_10001657+7Fj
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		mov	esi, [eax+4]
		jmp	short loc_10001753
; ---------------------------------------------------------------------------

loc_10001727:				; CODE XREF: sub_10001657+B4j
		cmp	esi, [eax]
		jnz	short loc_10001735
		mov	esi, eax
		mov	ecx, edi
		push	esi
		call	sub_10003142

loc_10001735:				; CODE XREF: sub_10001657+D2j
		mov	eax, [esi+4]
		mov	ecx, edi
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10002FBA

loc_10001753:				; CODE XREF: sub_10001657+AEj
					; sub_10001657+CEj
		mov	eax, [esi+4]

loc_10001756:				; CODE XREF: sub_10001657+67j
		cmp	byte ptr [eax+0Ch], 0
		jz	loc_100016C3
		mov	eax, [edi]
		pop	esi
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esp+8+arg_0]
		mov	[eax], ebx
		pop	ebx
		pop	edi
		retn	14h
sub_10001657	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001775	proc near		; CODE XREF: sub_100019FD+7Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+4], 1999998h
		jb	short loc_1000178C
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_1000178C:				; CODE XREF: sub_10001775+Aj
		push	ebx
		push	esi
		push	[esp+0Ch+arg_C]
		call	sub_10001479
		inc	dword ptr [edi+4]
		mov	ebx, eax
		mov	eax, [esp+0Ch+arg_8]
		mov	[ebx+4], eax
		mov	ecx, [edi]
		cmp	eax, ecx
		jnz	short loc_100017B7
		mov	[ecx+4], ebx
		mov	eax, [edi]
		mov	[eax], ebx
		mov	eax, [edi]
		mov	[eax+8], ebx
		jmp	short loc_100017D7
; ---------------------------------------------------------------------------

loc_100017B7:				; CODE XREF: sub_10001775+32j
		cmp	byte ptr [esp+0Ch+arg_4], 0
		jz	short loc_100017CA
		mov	[eax], ebx
		mov	ecx, [edi]
		cmp	eax, [ecx]
		jnz	short loc_100017D7
		mov	[ecx], ebx
		jmp	short loc_100017D7
; ---------------------------------------------------------------------------

loc_100017CA:				; CODE XREF: sub_10001775+47j
		mov	[eax+8], ebx
		mov	ecx, [edi]
		cmp	eax, [ecx+8]
		jnz	short loc_100017D7
		mov	[ecx+8], ebx

loc_100017D7:				; CODE XREF: sub_10001775+40j
					; sub_10001775+4Fj ...
		mov	eax, [ebx+4]
		mov	esi, ebx
		jmp	loc_10001874
; ---------------------------------------------------------------------------

loc_100017E1:				; CODE XREF: sub_10001775+103j
		mov	eax, [esi+4]
		mov	edx, [eax+4]
		mov	ecx, [edx]
		cmp	eax, ecx
		jnz	short loc_10001825
		mov	ecx, [edx+8]
		cmp	byte ptr [ecx+0Ch], 0
		jz	short loc_1000182B
		cmp	esi, [eax+8]
		jnz	short loc_10001805
		mov	esi, eax
		mov	ecx, edi
		push	esi
		call	sub_10002FBA

loc_10001805:				; CODE XREF: sub_10001775+84j
		mov	eax, [esi+4]
		mov	ecx, edi
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10003142
		jmp	short loc_10001871
; ---------------------------------------------------------------------------

loc_10001825:				; CODE XREF: sub_10001775+76j
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_10001845

loc_1000182B:				; CODE XREF: sub_10001775+7Fj
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		mov	esi, [eax+4]
		jmp	short loc_10001871
; ---------------------------------------------------------------------------

loc_10001845:				; CODE XREF: sub_10001775+B4j
		cmp	esi, [eax]
		jnz	short loc_10001853
		mov	esi, eax
		mov	ecx, edi
		push	esi
		call	sub_10003142

loc_10001853:				; CODE XREF: sub_10001775+D2j
		mov	eax, [esi+4]
		mov	ecx, edi
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10002FBA

loc_10001871:				; CODE XREF: sub_10001775+AEj
					; sub_10001775+CEj
		mov	eax, [esi+4]

loc_10001874:				; CODE XREF: sub_10001775+67j
		cmp	byte ptr [eax+0Ch], 0
		jz	loc_100017E1
		mov	eax, [edi]
		pop	esi
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esp+8+arg_0]
		mov	[eax], ebx
		pop	ebx
		pop	edi
		retn	14h
sub_10001775	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10001893(int, int, int, void *)
sub_10001893	proc near		; CODE XREF: sub_100043E8+67p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_8]
		mov	dl, 1
		push	ebp
		mov	ebp, ecx
		mov	byte ptr [esp+0Ch+var_4], dl
		push	esi
		push	edi
		mov	ecx, [ebp+0]
		mov	edi, ecx
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_100018E2
		mov	esi, [ebx]
		mov	dh, byte ptr [esp+14h+arg_4]

loc_100018B8:				; CODE XREF: sub_10001893+4Dj
		mov	edi, eax
		test	dh, dh
		jz	short loc_100018C7
		cmp	[eax+10h], esi
		sbb	dl, dl
		inc	dl
		jmp	short loc_100018CD
; ---------------------------------------------------------------------------

loc_100018C7:				; CODE XREF: sub_10001893+29j
		cmp	esi, [eax+10h]
		setb	dl

loc_100018CD:				; CODE XREF: sub_10001893+32j
		mov	byte ptr [esp+14h+var_4], dl
		test	dl, dl
		jz	short loc_100018D9
		mov	eax, [eax]
		jmp	short loc_100018DC
; ---------------------------------------------------------------------------

loc_100018D9:				; CODE XREF: sub_10001893+40j
		mov	eax, [eax+8]

loc_100018DC:				; CODE XREF: sub_10001893+44j
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_100018B8

loc_100018E2:				; CODE XREF: sub_10001893+1Dj
		mov	esi, edi
		mov	[esp+14h+arg_4], esi
		test	dl, dl
		jz	short loc_1000191F
		cmp	edi, [ecx]
		jnz	short loc_10001912
		push	[esp+14h+arg_C]	; void *
		push	ebx		; int
		push	edi		; int
		push	1		; char

loc_100018F8:				; CODE XREF: sub_10001893+9Dj
		lea	eax, [esp+24h+arg_4]
		mov	ecx, ebp
		push	eax		; int
		call	sub_10001534
		mov	ecx, [eax]
		mov	eax, [esp+14h+arg_0]
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1
		jmp	short loc_10001942
; ---------------------------------------------------------------------------

loc_10001912:				; CODE XREF: sub_10001893+5Bj
		lea	ecx, [esp+14h+arg_4]
		call	sub_100028B4
		mov	esi, [esp+14h+arg_4]

loc_1000191F:				; CODE XREF: sub_10001893+57j
		mov	eax, [esi+10h]
		push	[esp+14h+arg_C]	; void *
		cmp	eax, [ebx]
		jnb	short loc_10001932
		push	ebx
		push	edi
		push	[esp+20h+var_4]
		jmp	short loc_100018F8
; ---------------------------------------------------------------------------

loc_10001932:				; CODE XREF: sub_10001893+95j
		call	??3@YAXPAX@Z	; operator delete(void *)
		mov	eax, [esp+18h+arg_0]
		pop	ecx
		mov	[eax], esi
		mov	byte ptr [eax+4], 0

loc_10001942:				; CODE XREF: sub_10001893+7Dj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn	10h
sub_10001893	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000194A	proc near		; CODE XREF: sub_10003608+8Cp
					; sub_100036AC+1D9p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ebp
		mov	ebp, ecx
		mov	dl, 1
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	ecx, [ebp+0]
		mov	esi, ecx
		mov	byte ptr [esp+10h+var_4], dl
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_1000199A
		mov	dh, byte ptr [esp+10h+arg_4]
		push	ebx
		mov	ebx, [edi]

loc_1000196F:				; CODE XREF: sub_1000194A+4Dj
		mov	esi, eax
		test	dh, dh
		jz	short loc_1000197E
		cmp	[eax+10h], ebx
		sbb	dl, dl
		inc	dl
		jmp	short loc_10001984
; ---------------------------------------------------------------------------

loc_1000197E:				; CODE XREF: sub_1000194A+29j
		cmp	ebx, [eax+10h]
		setb	dl

loc_10001984:				; CODE XREF: sub_1000194A+32j
		mov	byte ptr [esp+14h+var_4], dl
		test	dl, dl
		jz	short loc_10001990
		mov	eax, [eax]
		jmp	short loc_10001993
; ---------------------------------------------------------------------------

loc_10001990:				; CODE XREF: sub_1000194A+40j
		mov	eax, [eax+8]

loc_10001993:				; CODE XREF: sub_1000194A+44j
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_1000196F
		pop	ebx

loc_1000199A:				; CODE XREF: sub_1000194A+1Cj
		mov	eax, esi
		mov	[esp+10h+arg_4], eax
		test	dl, dl
		jz	short loc_100019D7
		cmp	esi, [ecx]
		jnz	short loc_100019CA
		push	[esp+10h+arg_C]
		push	edi
		push	esi
		push	1

loc_100019B0:				; CODE XREF: sub_1000194A+9Ej
		lea	eax, [esp+20h+arg_4]
		mov	ecx, ebp
		push	eax
		call	sub_10001657
		mov	ecx, [eax]
		mov	eax, [esp+10h+arg_0]
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1
		jmp	short loc_100019F6
; ---------------------------------------------------------------------------

loc_100019CA:				; CODE XREF: sub_1000194A+5Cj
		lea	ecx, [esp+10h+arg_4]
		call	sub_100028B4
		mov	eax, [esp+10h+arg_4]

loc_100019D7:				; CODE XREF: sub_1000194A+58j
		mov	ecx, [eax+10h]
		cmp	ecx, [edi]
		jnb	short loc_100019EA
		push	[esp+10h+arg_C]
		push	edi
		push	esi
		push	[esp+1Ch+var_4]
		jmp	short loc_100019B0
; ---------------------------------------------------------------------------

loc_100019EA:				; CODE XREF: sub_1000194A+92j
		mov	ecx, [esp+10h+arg_0]
		mov	[ecx], eax
		mov	eax, ecx
		mov	byte ptr [ecx+4], 0

loc_100019F6:				; CODE XREF: sub_1000194A+7Ej
		pop	edi
		pop	esi
		pop	ebp
		pop	ecx
		retn	10h
sub_1000194A	endp


; =============== S U B	R O U T	I N E =======================================


sub_100019FD	proc near		; CODE XREF: sub_10003246+48p
					; sub_1000471B+11Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ebx
		mov	ebx, ecx
		mov	al, 1
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		push	esi
		mov	ecx, [ebx]
		push	edi
		mov	edi, ecx
		mov	byte ptr [esp+14h+var_4], al
		mov	esi, [ecx+4]
		cmp	byte ptr [esi+0Dh], 0
		jnz	short loc_10001A5A
		lea	ecx, [ebx+8]

loc_10001A1E:				; CODE XREF: sub_100019FD+59j
		cmp	byte ptr [esp+14h+arg_4], 0
		lea	eax, [esi+10h]
		mov	edi, esi
		jz	short loc_10001A39
		push	ebp
		push	eax
		call	sub_100028F8
		neg	al
		sbb	al, al
		inc	al
		jmp	short loc_10001A40
; ---------------------------------------------------------------------------

loc_10001A39:				; CODE XREF: sub_100019FD+2Bj
		push	eax
		push	ebp
		call	sub_100028F8

loc_10001A40:				; CODE XREF: sub_100019FD+3Aj
		mov	byte ptr [esp+14h+var_4], al
		test	al, al
		jz	short loc_10001A4C
		mov	esi, [esi]
		jmp	short loc_10001A4F
; ---------------------------------------------------------------------------

loc_10001A4C:				; CODE XREF: sub_100019FD+49j
		mov	esi, [esi+8]

loc_10001A4F:				; CODE XREF: sub_100019FD+4Dj
		cmp	byte ptr [esi+0Dh], 0
		lea	ecx, [ebx+8]
		jz	short loc_10001A1E
		mov	ecx, [ebx]

loc_10001A5A:				; CODE XREF: sub_100019FD+1Cj
		mov	esi, edi
		mov	[esp+14h+arg_4], esi
		test	al, al
		jz	short loc_10001A97
		cmp	edi, [ecx]
		jnz	short loc_10001A8A
		push	[esp+14h+arg_C]
		push	ebp
		push	edi
		push	1

loc_10001A70:				; CODE XREF: sub_100019FD+B5j
		lea	eax, [esp+24h+arg_4]
		mov	ecx, ebx
		push	eax
		call	sub_10001775
		mov	ecx, [eax]
		mov	eax, [esp+14h+arg_0]
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1
		jmp	short loc_10001ABE
; ---------------------------------------------------------------------------

loc_10001A8A:				; CODE XREF: sub_100019FD+69j
		lea	ecx, [esp+14h+arg_4]
		call	sub_100028B4
		mov	esi, [esp+14h+arg_4]

loc_10001A97:				; CODE XREF: sub_100019FD+65j
		push	ebp
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebx+8]
		call	sub_100028F8
		test	al, al
		jz	short loc_10001AB4
		push	[esp+14h+arg_C]
		push	ebp
		push	edi
		push	[esp+20h+var_4]
		jmp	short loc_10001A70
; ---------------------------------------------------------------------------

loc_10001AB4:				; CODE XREF: sub_100019FD+A9j
		mov	eax, [esp+14h+arg_0]
		mov	[eax], esi
		mov	byte ptr [eax+4], 0

loc_10001ABE:				; CODE XREF: sub_100019FD+8Bj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn	10h
sub_100019FD	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001AC6(void	*, int,	char)
sub_10001AC6	proc near		; CODE XREF: sub_10001B74+1Bp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		sub	esp, 0Ch
		push	edi
		mov	edi, [esp+10h+arg_0]
		cmp	edi, [esp+10h+arg_4]
		jz	loc_10001B6F
		push	esi
		lea	esi, [edi+4]
		mov	[esp+14h+var_8], esi
		cmp	esi, [esp+14h+arg_4]
		jz	loc_10001B6E
		push	ebx
		push	ebp

loc_10001AEC:				; CODE XREF: sub_10001AC6+A4j
		push	dword ptr [edi]
		mov	ebx, [esi]
		lea	ecx, [esp+20h+arg_8]
		push	ebx
		mov	[esp+24h+var_C], esi
		call	sub_100028F8
		test	al, al
		jz	short loc_10001B18
		push	[esp+1Ch+arg_4]
		lea	eax, [esi+4]
		push	eax		; int
		push	esi		; int
		push	edi		; void *
		call	sub_10001D13
		add	esp, 10h
		mov	[edi], ebx
		jmp	short loc_10001B5F
; ---------------------------------------------------------------------------

loc_10001B18:				; CODE XREF: sub_10001AC6+3Aj
		lea	ebp, [esi-4]
		mov	eax, [ebp+0]
		lea	ecx, [esp+1Ch+arg_8]
		push	eax
		push	ebx
		call	sub_100028F8
		test	al, al
		jz	short loc_10001B59
		mov	edi, [esp+1Ch+var_C]
		mov	esi, [ebp+0]

loc_10001B34:				; CODE XREF: sub_10001AC6+85j
		mov	[edi], esi
		lea	ecx, [esp+1Ch+arg_8]
		mov	edi, ebp
		sub	ebp, 4
		mov	esi, [ebp+0]
		push	esi
		push	ebx
		call	sub_100028F8
		test	al, al
		jnz	short loc_10001B34
		mov	esi, [esp+1Ch+var_8]
		mov	[esp+1Ch+var_C], edi
		mov	edi, [esp+1Ch+arg_0]

loc_10001B59:				; CODE XREF: sub_10001AC6+65j
		mov	eax, [esp+1Ch+var_C]
		mov	[eax], ebx

loc_10001B5F:				; CODE XREF: sub_10001AC6+50j
		add	esi, 4
		mov	[esp+1Ch+var_8], esi
		cmp	esi, [esp+1Ch+arg_4]
		jnz	short loc_10001AEC
		pop	ebp
		pop	ebx

loc_10001B6E:				; CODE XREF: sub_10001AC6+1Ej
		pop	esi

loc_10001B6F:				; CODE XREF: sub_10001AC6+Cj
		pop	edi
		add	esp, 0Ch
		retn
sub_10001AC6	endp


; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_10001B74@<eax>(char@<cl>, void *, int, int, int)
sub_10001B74	proc near		; CODE XREF: sub_10001E53+FCp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		push	0
		push	ecx
		push	ecx		; char
		mov	ecx, esp
		push	[esp+0Ch+arg_4]	; int
		push	[esp+10h+arg_0]	; void *
		mov	[ecx], eax
		mov	eax, [esp+14h+arg_C]
		mov	[ecx+4], al
		call	sub_10001AC6
		add	esp, 14h
		retn
sub_10001B74	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001B98	proc near		; CODE XREF: sub_10002237+2Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		sub	edi, ebx
		sar	edi, 2
		mov	eax, edi
		cdq
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1
		test	esi, esi
		jle	short loc_10001BE3
		mov	ebp, [esp+10h+arg_8]

loc_10001BBA:				; CODE XREF: sub_10001B98+49j
		push	ecx
		dec	esi
		push	ecx
		mov	cl, [esp+18h+arg_C]
		mov	eax, [ebx+esi*4]
		mov	[esp+18h+arg_4], eax
		mov	eax, esp
		mov	[eax], ebp
		mov	[eax+4], cl
		lea	eax, [esp+18h+arg_4]
		push	eax
		push	edi
		push	esi
		push	ebx
		call	sub_1000130E
		add	esp, 18h
		test	esi, esi
		jg	short loc_10001BBA

loc_10001BE3:				; CODE XREF: sub_10001B98+1Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001B98	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001BE8	proc near		; CODE XREF: sub_10001C43+4Ep
					; sub_10001C43+6Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		lea	ecx, [esp+0Ch+arg_C]
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	ebp, [esi]
		mov	ebx, [edi]
		push	ebx
		push	ebp
		call	sub_100028F8
		test	al, al
		jz	short loc_10001C0B
		mov	[esi], ebx
		mov	[edi], ebp

loc_10001C0B:				; CODE XREF: sub_10001BE8+1Dj
		mov	ebp, [esp+10h+arg_8]
		lea	ecx, [esp+10h+arg_C]
		push	dword ptr [esi]
		mov	ebx, [ebp+0]
		push	ebx
		call	sub_100028F8
		test	al, al
		jz	short loc_10001C3E
		mov	eax, [esi]
		lea	ecx, [esp+10h+arg_C]
		mov	[ebp+0], eax
		mov	[esi], ebx
		mov	ebp, [edi]
		push	ebp
		push	ebx
		call	sub_100028F8
		test	al, al
		jz	short loc_10001C3E
		mov	[esi], ebp
		mov	[edi], ebx

loc_10001C3E:				; CODE XREF: sub_10001BE8+38j
					; sub_10001BE8+50j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001BE8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001C43	proc near		; CODE XREF: sub_10002001+35p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	edx, [esp+arg_8]
		mov	eax, edx
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		sub	eax, edi
		sar	eax, 2
		push	ecx
		push	ecx
		cmp	eax, 28h
		jle	loc_10001CF1
		mov	cl, byte ptr [esp+18h+arg_10]
		inc	eax
		mov	esi, [esp+18h+arg_C]
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		mov	ebp, eax
		mov	ebx, eax
		mov	eax, esp
		shl	ebp, 3
		shl	ebx, 2
		mov	[eax], esi
		mov	[eax+4], cl
		lea	edx, [ebx+edi]
		lea	eax, [edi+ebp]
		mov	[esp+18h+arg_0], edx
		push	eax
		push	edx
		push	edi
		call	sub_10001BE8
		mov	edi, [esp+24h+arg_4]
		add	esp, 0Ch
		mov	cl, byte ptr [esp+18h+arg_10]
		mov	eax, esp
		mov	[eax], esi
		mov	[eax+4], cl
		lea	eax, [ebx+edi]
		push	eax
		mov	eax, edi
		sub	eax, ebx
		push	edi
		push	eax
		call	sub_10001BE8
		mov	edx, [esp+24h+arg_8]
		add	esp, 0Ch
		mov	ecx, [esp+18h+arg_C]
		mov	eax, esp
		mov	esi, edx
		sub	esi, ebx
		mov	bl, byte ptr [esp+18h+arg_10]
		push	edx
		sub	edx, ebp
		mov	[eax], ecx
		push	esi
		push	edx
		mov	[eax+4], bl
		call	sub_10001BE8
		mov	ecx, [esp+24h+arg_C]
		add	esp, 0Ch
		mov	eax, esp
		push	esi
		push	edi
		push	[esp+20h+arg_0]
		mov	[eax], ecx
		mov	[eax+4], bl
		jmp	short loc_10001D06
; ---------------------------------------------------------------------------

loc_10001CF1:				; CODE XREF: sub_10001C43+18j
		mov	eax, [esp+18h+arg_C]
		mov	ecx, esp
		push	edx
		push	[esp+1Ch+arg_4]
		mov	[ecx], eax
		mov	eax, [esp+20h+arg_10]
		mov	[ecx+4], al
		push	edi

loc_10001D06:				; CODE XREF: sub_10001C43+ACj
		call	sub_10001BE8
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001C43	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001D13(void	*, int,	int)
sub_10001D13	proc near		; CODE XREF: sub_10001AC6+46p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		sub	ecx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_8]
		and	ecx, 0FFFFFFFCh
		push	ecx		; size_t
		push	[esp+8+arg_0]	; void *
		sub	esi, ecx
		push	esi		; void *
		call	ds:memmove
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
sub_10001D13	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001D38	proc near		; CODE XREF: sub_10001D91+28p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_8]
		mov	ecx, [edx]
		push	ecx
		mov	[eax], ecx
		mov	eax, [ebp+arg_10]
		push	ecx
		mov	ecx, esp
		push	[ebp+arg_C]
		mov	[ecx], eax
		mov	eax, [ebp+arg_14]
		mov	[ecx+4], al
		mov	eax, [ebp+arg_4]
		sub	eax, edx
		sar	eax, 2
		push	eax
		push	0
		push	edx
		call	sub_1000130E
		add	esp, 18h
		pop	ebp
		retn
sub_10001D38	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001D6D	proc near		; CODE XREF: sub_10001F5E+2Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		push	0
		push	ecx
		push	ecx
		mov	ecx, esp
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		mov	[ecx], eax
		mov	eax, [esp+14h+arg_C]
		mov	[ecx+4], al
		call	sub_10001D91
		add	esp, 14h
		retn
sub_10001D6D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001D91	proc near		; CODE XREF: sub_10001D6D+1Bp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		push	0
		push	ecx
		push	ecx
		add	edx, 0FFFFFFFCh
		mov	ecx, esp
		mov	eax, [edx]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+arg_8]
		mov	[ecx], eax
		mov	eax, [ebp+arg_C]
		mov	[ecx+4], al
		lea	eax, [ebp+arg_4]
		push	eax
		push	edx
		push	edx
		push	[ebp+arg_0]
		call	sub_10001D38
		add	esp, 1Ch
		pop	ebp
		retn
sub_10001D91	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10001DC3(float, int)
sub_10001DC3	proc near		; CODE XREF: sub_10001024+11p
					; sub_10001024+27p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		mov	eax, ecx
		test	ecx, ecx
		jns	short loc_10001DD1
		neg	eax

loc_10001DD1:				; CODE XREF: sub_10001DC3+Aj
		fld1
		fstp	[ebp+arg_4]

loc_10001DD6:				; CODE XREF: sub_10001DC3+2Dj
		fld	[ebp+arg_0]
		test	al, 1
		jz	short loc_10001DE7
		fld	[ebp+arg_4]
		fld	st(1)
		fmulp	st(1), st
		fstp	[ebp+arg_4]

loc_10001DE7:				; CODE XREF: sub_10001DC3+18j
		shr	eax, 1
		jz	short loc_10001DF2
		fmul	st, st
		fstp	[ebp+arg_0]
		jmp	short loc_10001DD6
; ---------------------------------------------------------------------------

loc_10001DF2:				; CODE XREF: sub_10001DC3+26j
		fstp	st
		fld	[ebp+arg_4]
		test	ecx, ecx
		jns	short loc_10001DFF
		fld1
		fdivrp	st(1), st

loc_10001DFF:				; CODE XREF: sub_10001DC3+36j
		fstp	[ebp+arg_4]
		fld	[ebp+arg_4]
		pop	ebp
		retn
sub_10001DC3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001E07	proc near		; CODE XREF: sub_1000130E+71p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= byte ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		lea	eax, [edi-1]
		jmp	short loc_10001E3B
; ---------------------------------------------------------------------------

loc_10001E1C:				; CODE XREF: sub_10001E07+3Fj
		push	dword ptr [ebp+0]
		mov	eax, [ebx+esi*4]
		lea	ecx, [esp+14h+arg_10]
		push	eax
		call	sub_100028F8
		test	al, al
		jz	short loc_10001E48
		mov	eax, [ebx+esi*4]
		mov	[ebx+edi*4], eax
		mov	edi, esi
		lea	eax, [esi-1]

loc_10001E3B:				; CODE XREF: sub_10001E07+13j
		cdq
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1
		cmp	[esp+10h+arg_8], edi
		jl	short loc_10001E1C

loc_10001E48:				; CODE XREF: sub_10001E07+27j
		mov	eax, [ebp+0]
		mov	[ebx+edi*4], eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001E07	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001E53(void	*, int,	int, int, int)
sub_10001E53	proc near		; CODE XREF: sub_10001E53+89p
					; sub_10001E53+99p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_4]
		mov	eax, edi
		sub	eax, ebp
		sar	eax, 2
		cmp	eax, 20h
		jle	loc_10001F37
		mov	esi, [esp+18h+arg_8]

loc_10001E75:				; CODE XREF: sub_10001E53+AFj
		test	esi, esi
		jle	loc_10001F08
		mov	eax, [esp+18h+arg_C]
		push	ecx
		push	ecx
		mov	ecx, [esp+20h+arg_10]
		mov	edx, esp
		push	edi
		push	ebp
		mov	[edx], eax
		lea	eax, [esp+28h+var_8]
		push	eax
		mov	[edx+4], cl
		call	sub_10002001
		mov	eax, esi
		add	esp, 14h
		cdq
		mov	ecx, edi
		sub	ecx, [esp+18h+var_4]
		sub	eax, edx
		mov	esi, eax
		and	ecx, 0FFFFFFFCh
		sar	esi, 1
		mov	eax, esi
		cdq
		sub	eax, edx
		sar	eax, 1
		add	esi, eax
		mov	eax, [esp+18h+var_8]
		sub	eax, ebp
		push	ecx		; int
		and	eax, 0FFFFFFFCh
		push	ecx		; int
		cmp	eax, ecx
		mov	eax, [esp+20h+arg_C]
		mov	ecx, esp
		push	esi		; int
		mov	[ecx], eax
		mov	eax, [esp+24h+arg_10]
		mov	[ecx+4], al
		jge	short loc_10001EE7
		push	[esp+24h+var_8]	; int
		push	ebp		; void *
		call	sub_10001E53
		mov	ebp, [esp+2Ch+var_4]
		jmp	short loc_10001EF5
; ---------------------------------------------------------------------------

loc_10001EE7:				; CODE XREF: sub_10001E53+82j
		push	edi		; int
		push	[esp+28h+var_4]	; void *
		call	sub_10001E53
		mov	edi, [esp+2Ch+var_8]

loc_10001EF5:				; CODE XREF: sub_10001E53+92j
		mov	eax, edi
		add	esp, 14h
		sub	eax, ebp
		sar	eax, 2
		cmp	eax, 20h
		jg	loc_10001E75

loc_10001F08:				; CODE XREF: sub_10001E53+24j
		cmp	eax, 20h
		jle	short loc_10001F37
		mov	esi, [esp+18h+arg_C]
		mov	bl, byte ptr [esp+18h+arg_10]
		push	ecx
		push	ecx
		mov	eax, esp
		push	edi
		push	ebp
		mov	[eax], esi
		mov	[eax+4], bl
		call	sub_10002237
		pop	ecx
		pop	ecx
		mov	eax, esp
		push	edi
		push	ebp
		mov	[eax], esi
		mov	[eax+4], bl
		call	sub_10002297
		jmp	short loc_10001F54
; ---------------------------------------------------------------------------

loc_10001F37:				; CODE XREF: sub_10001E53+18j
					; sub_10001E53+B8j
		cmp	eax, 1
		jle	short loc_10001F57
		mov	eax, [esp+18h+arg_C]
		push	ecx		; int
		push	ecx		; int
		mov	ecx, esp	; char
		push	edi		; int
		push	ebp		; void *
		mov	[ecx], eax
		mov	eax, [esp+28h+arg_10]
		mov	[ecx+4], al
		call	sub_10001B74

loc_10001F54:				; CODE XREF: sub_10001E53+E2j
		add	esp, 10h

loc_10001F57:				; CODE XREF: sub_10001E53+E7j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn
sub_10001E53	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001F5E	proc near		; CODE XREF: sub_10002297+19p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	esi, edi
		sub	esi, [esp+10h+arg_0]
		mov	eax, esi
		and	eax, 0FFFFFFFCh
		cmp	eax, 4
		jle	short loc_10001FA4
		mov	bl, [esp+10h+arg_C]
		mov	ebp, [esp+10h+arg_8]

loc_10001F7E:				; CODE XREF: sub_10001F5E+44j
		push	ecx
		push	ecx
		mov	eax, esp
		push	edi
		push	[esp+1Ch+arg_0]
		mov	[eax], ebp
		mov	[eax+4], bl
		call	sub_10001D6D
		sub	esi, 4
		add	esp, 10h
		mov	eax, esi
		sub	edi, 4
		and	eax, 0FFFFFFFCh
		cmp	eax, 4
		jg	short loc_10001F7E

loc_10001FA4:				; CODE XREF: sub_10001F5E+16j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001F5E	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10001FA9(void *, int, void *)
sub_10001FA9	proc near		; CODE XREF: sub_10002FFB+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		sub	esi, [esp+4+arg_0]
		and	esi, 0FFFFFFFCh
		push	esi		; size_t
		push	[esp+8+arg_0]	; void *
		push	[esp+0Ch+arg_8]	; void *
		call	ds:memmove
		add	esp, 0Ch
		add	eax, esi
		pop	esi
		retn	0Ch
sub_10001FA9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001FCD	proc near		; CODE XREF: sub_10003048+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, [esp+8+arg_4]
		jz	short loc_10001FFA
		sub	edi, esi

loc_10001FDF:				; CODE XREF: sub_10001FCD+2Bj
		test	esi, esi
		jz	short loc_10001FEE
		lea	eax, [edi+esi]
		mov	ecx, esi
		push	eax		; void *
		call	sub_10002355

loc_10001FEE:				; CODE XREF: sub_10001FCD+14j
		add	esi, 18h
		lea	ecx, [edi+esi]
		cmp	ecx, [esp+8+arg_4]
		jnz	short loc_10001FDF

loc_10001FFA:				; CODE XREF: sub_10001FCD+Ej
		pop	edi
		mov	eax, esi
		pop	esi
		retn	0Ch
sub_10001FCD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002001	proc near		; CODE XREF: sub_10001E53+42p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_8]
		mov	eax, ebp
		push	esi
		mov	esi, [esp+18h+arg_4]
		sub	eax, esi
		sar	eax, 2
		push	edi
		cdq
		push	ecx
		sub	eax, edx
		sar	eax, 1
		push	ecx
		mov	ecx, esp
		lea	edi, [esi+eax*4]
		mov	eax, [esp+24h+arg_C]
		mov	[ecx], eax
		mov	eax, [esp+24h+arg_10]
		mov	[ecx+4], al
		lea	eax, [ebp-4]
		push	eax
		push	edi
		push	esi
		call	sub_10001C43
		lea	ebx, [edi+4]
		add	esp, 14h
		mov	[esp+1Ch+var_C], ebx
		jmp	short loc_1000207B
; ---------------------------------------------------------------------------

loc_10002047:				; CODE XREF: sub_10002001+7Cj
		push	dword ptr [edi]
		lea	eax, [edi-4]
		mov	[esp+20h+var_8], eax
		lea	ecx, [esp+20h+arg_C]
		mov	eax, [eax]
		push	eax
		mov	[esp+24h+var_4], eax
		call	sub_100028F8
		test	al, al
		jnz	short loc_1000207F
		push	[esp+1Ch+var_4]
		lea	ecx, [esp+20h+arg_C]
		push	dword ptr [edi]
		call	sub_100028F8
		test	al, al
		jnz	short loc_1000207F
		mov	edi, [esp+1Ch+var_8]

loc_1000207B:				; CODE XREF: sub_10002001+44j
		cmp	esi, edi
		jb	short loc_10002047

loc_1000207F:				; CODE XREF: sub_10002001+61j
					; sub_10002001+74j
		cmp	ebx, ebp
		jnb	short loc_100020B0

loc_10002083:				; CODE XREF: sub_10002001+A9j
		push	dword ptr [edi]
		lea	ecx, [esp+20h+arg_C]
		push	dword ptr [ebx]
		call	sub_100028F8
		test	al, al
		jnz	short loc_100020AC
		push	dword ptr [ebx]
		lea	ecx, [esp+20h+arg_C]
		push	dword ptr [edi]
		call	sub_100028F8
		test	al, al
		jnz	short loc_100020AC
		add	ebx, 4
		cmp	ebx, ebp
		jb	short loc_10002083

loc_100020AC:				; CODE XREF: sub_10002001+91j
					; sub_10002001+A2j
		mov	[esp+1Ch+var_C], ebx

loc_100020B0:				; CODE XREF: sub_10002001+80j
		mov	esi, edi
		mov	ebp, ebx
		mov	[esp+1Ch+var_8], esi

loc_100020B8:				; CODE XREF: sub_10002001+1AEj
					; sub_10002001+1F0j
		mov	[esp+1Ch+var_4], ebp

loc_100020BC:				; CODE XREF: sub_10002001+1DEj
		cmp	ebp, [esp+1Ch+arg_8]
		jnb	short loc_10002119
		mov	esi, [esp+1Ch+arg_8]

loc_100020C6:				; CODE XREF: sub_10002001+10Aj
		mov	eax, [ebp+0]
		lea	ecx, [esp+1Ch+arg_C]
		push	eax
		push	dword ptr [edi]
		mov	[esp+24h+var_4], eax
		call	sub_100028F8
		test	al, al
		jnz	short loc_10002106
		push	dword ptr [edi]
		lea	ecx, [esp+20h+arg_C]
		push	[esp+20h+var_4]
		call	sub_100028F8
		test	al, al
		jnz	short loc_1000210D
		mov	eax, ebx
		add	ebx, 4
		cmp	eax, ebp
		jz	short loc_10002106
		mov	eax, [ebx-4]
		mov	ecx, [esp+1Ch+var_4]
		mov	[ebx-4], ecx
		mov	[ebp+0], eax

loc_10002106:				; CODE XREF: sub_10002001+DAj
					; sub_10002001+F6j
		add	ebp, 4
		cmp	ebp, esi
		jb	short loc_100020C6

loc_1000210D:				; CODE XREF: sub_10002001+EDj
		mov	esi, [esp+1Ch+var_8]
		mov	[esp+1Ch+var_4], ebp
		mov	[esp+1Ch+var_C], ebx

loc_10002119:				; CODE XREF: sub_10002001+BFj
		mov	eax, [esp+1Ch+arg_4]
		cmp	esi, eax
		jbe	short loc_1000217E
		lea	ebp, [esi-4]
		mov	ebx, eax

loc_10002126:				; CODE XREF: sub_10002001+169j
		push	dword ptr [edi]
		mov	eax, [ebp+0]
		lea	ecx, [esp+20h+arg_C]
		push	eax
		mov	[esp+24h+var_8], eax
		call	sub_100028F8
		test	al, al
		jnz	short loc_10002162
		push	[esp+1Ch+var_8]
		lea	ecx, [esp+20h+arg_C]
		push	dword ptr [edi]
		call	sub_100028F8
		test	al, al
		jnz	short loc_1000216C
		sub	edi, 4
		cmp	edi, ebp
		jz	short loc_10002162
		mov	eax, [edi]
		mov	ecx, [esp+1Ch+var_8]
		mov	[edi], ecx
		mov	[ebp+0], eax

loc_10002162:				; CODE XREF: sub_10002001+13Aj
					; sub_10002001+154j
		sub	esi, 4
		sub	ebp, 4
		cmp	ebx, esi
		jb	short loc_10002126

loc_1000216C:				; CODE XREF: sub_10002001+14Dj
		mov	eax, [esp+1Ch+arg_4]
		cmp	esi, eax
		mov	ebx, [esp+1Ch+var_C]
		mov	ebp, [esp+1Ch+var_4]
		mov	[esp+1Ch+var_8], esi

loc_1000217E:				; CODE XREF: sub_10002001+11Ej
		jnz	short loc_100021B4
		cmp	ebp, [esp+1Ch+arg_8]
		jz	short loc_100021F6
		cmp	ebx, ebp
		jz	short loc_10002192
		mov	ecx, [edi]
		mov	eax, [ebx]
		mov	[edi], eax
		mov	[ebx], ecx

loc_10002192:				; CODE XREF: sub_10002001+187j
		mov	esi, ebp
		mov	edx, edi
		add	ebx, 4
		add	edi, 4
		mov	[esp+1Ch+var_C], ebx
		add	ebp, 4
		mov	eax, [esi]
		mov	ecx, [edx]
		mov	[edx], eax
		mov	[esi], ecx
		mov	esi, [esp+1Ch+var_8]
		jmp	loc_100020B8
; ---------------------------------------------------------------------------

loc_100021B4:				; CODE XREF: sub_10002001:loc_1000217Ej
		sub	esi, 4
		mov	[esp+1Ch+var_8], esi
		cmp	ebp, [esp+1Ch+arg_8]
		jnz	short loc_100021E4
		sub	edi, 4
		cmp	esi, edi
		jz	short loc_100021D0
		mov	ecx, [esi]
		mov	eax, [edi]
		mov	[esi], eax
		mov	[edi], ecx

loc_100021D0:				; CODE XREF: sub_10002001+1C5j
		mov	ecx, [edi]
		sub	ebx, 4
		mov	[esp+1Ch+var_C], ebx
		mov	eax, [ebx]
		mov	[edi], eax
		mov	[ebx], ecx
		jmp	loc_100020BC
; ---------------------------------------------------------------------------

loc_100021E4:				; CODE XREF: sub_10002001+1BEj
		mov	ecx, [ebp+0]
		mov	eax, [esi]
		mov	[ebp+0], eax
		add	ebp, 4
		mov	[esi], ecx
		jmp	loc_100020B8
; ---------------------------------------------------------------------------

loc_100021F6:				; CODE XREF: sub_10002001+183j
		mov	eax, [esp+1Ch+arg_0]
		mov	[eax], edi
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax+4], ebx
		pop	ebx
		add	esp, 0Ch
		retn
sub_10002001	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002207	proc near		; CODE XREF: sub_10003E95+B0p
					; sub_1000450E+136p

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	[ebp+arg_10]
		lea	eax, [ebp+var_8]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	eax
		call	sub_100014C4
		mov	edx, [ebp+arg_0]
		add	esp, 14h
		mov	ecx, [eax]
		mov	[edx], ecx
		mov	ecx, [eax+4]
		mov	eax, edx
		mov	[edx+4], ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_10002207	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002237	proc near		; CODE XREF: sub_10001E53+CDp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		sub	eax, [ebp+arg_0]
		and	eax, 0FFFFFFFCh
		cmp	eax, 4
		jle	short loc_10002269
		mov	eax, [ebp+arg_8]
		push	0
		push	0
		push	ecx
		push	ecx
		mov	ecx, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		mov	[ecx], eax
		mov	eax, [ebp+arg_C]
		mov	[ecx+4], al
		call	sub_10001B98
		add	esp, 18h

loc_10002269:				; CODE XREF: sub_10002237+Fj
		pop	ebp
		retn
sub_10002237	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __usercall sub_1000226B@<eax>(int@<ecx>, void *, int, int, int)
sub_1000226B	proc near		; CODE XREF: sub_1000415C+1A5p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		push	ecx		; int
		push	ecx		; int
		mov	ecx, esp
		mov	[ecx], eax
		mov	eax, [ebp+arg_C]
		mov	[ecx+4], al
		mov	eax, [ebp+arg_4]
		sub	eax, [ebp+arg_0]
		sar	eax, 2
		push	eax		; int
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; void *
		call	sub_10001E53
		add	esp, 14h
		pop	ebp
		retn
sub_1000226B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002297	proc near		; CODE XREF: sub_10001E53+DDp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		push	ecx
		push	ecx
		mov	ecx, esp
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		mov	[ecx], eax
		mov	eax, [esp+10h+arg_C]
		mov	[ecx+4], al
		call	sub_10001F5E
		add	esp, 10h
		retn
sub_10002297	endp


; =============== S U B	R O U T	I N E =======================================


sub_100022B9	proc near		; CODE XREF: sub_10003608+95p
					; sub_100036AC+1E3p ...

arg_0		= dword	ptr  4

		call	sub_10002AEF
		mov	dword ptr [eax], 3000h
		mov	eax, [esp+arg_0]
		retn
sub_100022B9	endp


; =============== S U B	R O U T	I N E =======================================


sub_100022C9	proc near		; CODE XREF: sub_10002599+27p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		call	sub_10002C5F
		mov	ecx, [esp+4+arg_0]
		mov	[esi], eax
		mov	eax, [ecx]
		mov	[esi+8], eax
		mov	al, [ecx+4]
		mov	[esi+0Ch], al
		mov	eax, esi
		pop	esi
		retn	8
sub_100022C9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100022EF	proc near		; CODE XREF: sub_10003E95+98p
					; sub_1000450E+11Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	edi, ecx
		xor	ecx, ecx
		mov	[ebp+var_4], ecx
		cmp	[ebp+arg_4], ecx
		jz	short loc_10002317
		mov	dword ptr [edi], offset	dword_10008364
		mov	eax, ds:??_7ios_base@std@@6B@ ;	const std::ios_base::`vftable'
		mov	[edi+50h], eax
		mov	eax, ds:??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_ios<char,std::char_traits<char>>::`vftable'
		mov	[edi+50h], eax

loc_10002317:				; CODE XREF: sub_100022EF+10j
		push	ecx
		push	ecx
		lea	esi, [edi+4]
		mov	ecx, edi
		push	esi
		call	ds:??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)
		mov	eax, [edi]
		mov	ecx, esi
		mov	eax, [eax+4]
		mov	dword ptr [edi+eax], offset off_10008360
		mov	eax, [edi]
		mov	edx, [eax+4]
		lea	eax, [edx-50h]
		mov	[edx+edi-4], eax
		mov	eax, [ebp+arg_0]
		or	eax, 2
		push	eax
		call	sub_100023C6
		mov	eax, edi
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	8
sub_100022EF	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10002355(void *)
sub_10002355	proc near		; CODE XREF: sub_10001FCD+1Cp
					; sub_10004C60+3Bp ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]	; void *
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [esi],	0
		call	sub_10002BBF
		mov	eax, esi
		pop	esi
		retn	4
sub_10002355	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10002375(void *)
sub_10002375	proc near		; CODE XREF: sub_10003E95+2Dp
					; sub_10003E95+51p ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [esi],	0
		call	sub_10004951
		pop	ecx
		push	eax		; size_t
		push	[esp+8+arg_0]	; void *
		mov	ecx, esi
		call	sub_10003473
		mov	eax, esi
		pop	esi
		retn	4
sub_10002375	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_100023A2(void *, size_t)
sub_100023A2	proc near		; CODE XREF: sub_1000533C+39p
					; sub_1000533C+87p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]	; size_t
		mov	esi, ecx
		push	[esp+8+arg_0]	; void *
		and	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [esi],	0
		call	sub_10003473
		mov	eax, esi
		pop	esi
		retn	8
sub_100023A2	endp


; =============== S U B	R O U T	I N E =======================================


sub_100023C6	proc near		; CODE XREF: sub_100022EF+57p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	ds:??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)
		push	[esp+4+arg_0]
		and	dword ptr [esi+38h], 0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_10008294
		call	sub_10002E74
		mov	[esi+3Ch], eax
		mov	eax, esi
		pop	esi
		retn	4
sub_100023C6	endp


; =============== S U B	R O U T	I N E =======================================


sub_100023ED	proc near		; CODE XREF: sub_10003246+2Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, [esp+arg_0]
		mov	edx, ecx
		mov	ecx, [esp+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		xor	ebp, ebp
		push	edi
		push	8
		pop	edi
		mov	[edx], eax
		mov	[edx+4], ecx
		mov	[edx+8], esi
		mov	[edx+28h], ebp
		mov	[edx+2Ch], ebp
		push	10h
		pop	ebx
		sub	eax, 6ABDh
		jz	short loc_1000248C
		sub	eax, 1594h
		jz	short loc_10002470
		sub	eax, 6
		jz	short loc_1000248C
		dec	eax
		jz	short loc_10002464
		sub	eax, 0D0Ah
		jz	short loc_10002455
		sub	eax, 63Fh
		jnz	short loc_100024A2
		mov	dword ptr [edx+0Ch], 20h
		mov	[edx+10h], edi
		mov	[edx+14h], edi
		mov	[edx+18h], edi
		mov	[edx+20h], edi
		mov	dword ptr [edx+2Ch], 1
		jmp	short loc_100024A2
; ---------------------------------------------------------------------------

loc_10002455:				; CODE XREF: sub_100023ED+43j
		push	5
		pop	eax
		mov	dword ptr [edx+14h], 6
		mov	[edx+20h], ebp
		jmp	short loc_10002499
; ---------------------------------------------------------------------------

loc_10002464:				; CODE XREF: sub_100023ED+3Cj
		mov	[edx+20h], edi
		mov	dword ptr [edx+2Ch], 1
		jmp	short loc_1000247A
; ---------------------------------------------------------------------------

loc_10002470:				; CODE XREF: sub_100023ED+34j
		mov	[edx+20h], ebp
		mov	dword ptr [edx+28h], 1

loc_1000247A:				; CODE XREF: sub_100023ED+81j
		mov	[edx+18h], edi
		mov	[edx+14h], edi
		mov	[edx+10h], edi
		mov	dword ptr [edx+0Ch], 20h
		jmp	short loc_100024A2
; ---------------------------------------------------------------------------

loc_1000248C:				; CODE XREF: sub_100023ED+2Dj
					; sub_100023ED+39j
		push	5
		pop	eax
		mov	dword ptr [edx+20h], 1
		mov	[edx+14h], eax

loc_10002499:				; CODE XREF: sub_100023ED+75j
		mov	[edx+0Ch], ebx
		mov	[edx+10h], eax
		mov	[edx+18h], eax

loc_100024A2:				; CODE XREF: sub_100023ED+4Aj
					; sub_100023ED+66j ...
		mov	ebx, [esp+10h+arg_C]
		xor	eax, eax
		test	bl, bl
		mov	[edx+1Ch], ebp
		mov	[edx+24h], ebp
		setz	al
		mov	dword ptr [edx+30h], 308Eh
		dec	eax
		mov	[edx+38h], ebp
		and	eax, 0FFFFFFE8h
		mov	dword ptr [edx+3Ch], 4
		add	eax, 3050h
		mov	[edx+34h], eax
		sub	ecx, ebp
		jz	short loc_10002511
		sub	ecx, 81A5h
		jz	short loc_10002508
		dec	ecx
		jz	short loc_100024FF
		dec	ecx
		jz	short loc_100024F6
		sub	ecx, 749h
		jnz	short loc_10002517
		mov	dword ptr [edx+40h], 18h
		mov	[edx+78h], edi
		jmp	short loc_10002517
; ---------------------------------------------------------------------------

loc_100024F6:				; CODE XREF: sub_100023ED+F3j
		mov	dword ptr [edx+40h], 20h
		jmp	short loc_10002514
; ---------------------------------------------------------------------------

loc_100024FF:				; CODE XREF: sub_100023ED+F0j
		mov	dword ptr [edx+40h], 18h
		jmp	short loc_10002514
; ---------------------------------------------------------------------------

loc_10002508:				; CODE XREF: sub_100023ED+EDj
		mov	dword ptr [edx+40h], 10h
		jmp	short loc_10002514
; ---------------------------------------------------------------------------

loc_10002511:				; CODE XREF: sub_100023ED+E5j
		mov	[edx+40h], ebp

loc_10002514:				; CODE XREF: sub_100023ED+110j
					; sub_100023ED+119j ...
		mov	[edx+78h], ebp

loc_10002517:				; CODE XREF: sub_100023ED+FBj
					; sub_100023ED+107j
		mov	ecx, [esp+10h+arg_18]
		mov	edi, 3038h
		mov	eax, [esp+10h+arg_1C]
		mov	[edx+50h], eax
		mov	[edx+4Ch], ecx
		imul	ecx, eax
		mov	eax, [esp+10h+arg_14]
		mov	[edx+58h], eax
		mov	eax, [esp+10h+arg_10]
		mov	[edx+5Ch], eax
		xor	eax, eax
		test	esi, esi
		mov	[edx+48h], edi
		mov	[edx+80h], edi
		pop	edi
		setnz	al
		mov	[edx+74h], esi
		pop	esi
		shr	ebx, 8
		mov	[edx+44h], ebp
		test	bl, bl
		mov	[edx+60h], ebp
		mov	[edx+64h], ebp
		mov	[edx+68h], ebp
		mov	[edx+84h], ebp
		mov	[edx+88h], ebp
		mov	[edx+8Ch], ebp
		pop	ebp
		mov	[edx+54h], ecx
		mov	dword ptr [edx+6Ch], 4
		mov	[edx+70h], eax
		mov	dword ptr [edx+7Ch], 405h
		pop	ebx
		jz	short loc_10002594
		push	44h
		pop	eax
		mov	[edx+6Ch], eax
		mov	[edx+3Ch], eax

loc_10002594:				; CODE XREF: sub_100023ED+19Cj
		mov	eax, edx
		retn	20h
sub_100023ED	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002599	proc near		; CODE XREF: sub_100025CC+2Fp
					; sub_1000471B+94p

var_6		= dword	ptr -6
var_2		= byte ptr -2
var_1		= byte ptr -1

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		xor	eax, eax
		mov	esi, ecx
		push	offset dword_100081C8
		lea	ecx, [ebp+var_6]
		mov	[ebp+var_6], eax
		mov	[ebp+var_2], al
		call	sub_10004F8A
		lea	eax, [ebp+var_1]
		mov	ecx, esi
		push	eax
		lea	eax, [ebp+var_6]
		push	eax
		call	sub_100022C9
		mov	eax, esi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10002599	endp


; =============== S U B	R O U T	I N E =======================================


sub_100025CC	proc near		; CODE XREF: sub_100043E8+3Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		xor	ebx, ebx
		mov	[edi+4], eax
		lea	esi, [edi+0Ch]
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, esi
		mov	dword ptr [edi], offset	off_100082D0
		mov	[edi+8], eax
		mov	[esi], ebx
		mov	[esi+4], ebx
		call	sub_10002C0B
		lea	ecx, [edi+14h]
		mov	[esi], eax
		call	sub_10002599
		lea	esi, [edi+24h]
		mov	ecx, esi
		mov	[esi], ebx
		mov	[esi+4], ebx
		call	sub_10002C0B
		mov	[esi], eax
		mov	[edi+2Ch], ebx
		push	0Fh
		pop	eax
		mov	[edi+44h], eax
		mov	[edi+40h], ebx
		mov	[edi+30h], bl
		mov	[edi+5Ch], eax
		mov	eax, edi
		mov	[edi+58h], ebx
		mov	[edi+48h], bl
		pop	edi
		pop	esi
		pop	ebx
		retn	8
sub_100025CC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_10002631(HANDLE hData, int, int, int, int,	int, int, int)
sub_10002631	proc near		; CODE XREF: sub_100038CD+113p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		mov	esi, ecx
		push	1
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		mov	dword ptr [esi], offset	off_100082D8
		mov	[esi+14h], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+1Ch], eax
		mov	eax, [ebp+arg_18]
		mov	[esi+40h], eax
		mov	eax, [esi+4]
		mov	eax, [eax+2Ch]
		or	dword ptr [esi+3Ch], 0FFFFFFFFh
		mov	[esi+8], eax
		xor	eax, eax
		mov	[esi+10h], eax
		mov	[esi+0Ch], eax
		mov	[esi+4Ch], eax
		mov	eax, 305Ch
		mov	[esi+34h], eax
		mov	[esi+38h], eax
		mov	eax, [ebp+arg_10]
		mov	[esi+24h], eax
		mov	eax, [ebp+arg_14]
		mov	dword ptr [esi+28h], 2710h
		mov	dword ptr [esi+2Ch], 3084h
		mov	dword ptr [esi+30h], 3094h
		mov	[esi+20h], eax
		call	sub_100052E9
		mov	eax, [ebp+arg_C]
		mov	ecx, esi	; hData
		mov	[esi+44h], eax
		call	sub_10005414
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	1Ch
sub_10002631	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100026B4	proc near		; CODE XREF: sub_100036AC+196p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		mov	esi, ecx
		xor	ecx, ecx
		push	1
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		mov	[esi+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [esi], offset	off_100082D8
		mov	[esi+14h], ecx
		mov	[esi+1Ch], eax
		mov	eax, [ebp+arg_10]
		mov	[esi+20h], eax
		mov	eax, [ebp+arg_C]
		mov	[esi+24h], eax
		mov	eax, [esi+4]
		mov	[esi+40h], ecx
		mov	eax, [eax+2Ch]
		or	dword ptr [esi+3Ch], 0FFFFFFFFh
		mov	[esi+8], eax
		mov	eax, [ebp+arg_14]
		mov	[esi+10h], ecx
		mov	[esi+18h], cl
		mov	[esi+4Ch], ecx
		mov	ecx, esi
		mov	[esi+34h], eax
		mov	eax, [ebp+arg_18]
		mov	[esi+38h], eax
		mov	dword ptr [esi+28h], 2710h
		mov	dword ptr [esi+2Ch], 3084h
		mov	dword ptr [esi+30h], 3094h
		call	sub_100052E9
		mov	dword ptr [esi+44h], 1
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	1Ch
sub_100026B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002734	proc near		; CODE XREF: sub_10002755+9p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, ecx
		mov	[esi], edx
		mov	eax, [edx]
		mov	eax, [eax+4]
		mov	ecx, [eax+edx+38h]
		test	ecx, ecx
		jz	short loc_1000274F
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_1000274F:				; CODE XREF: sub_10002734+14j
		mov	eax, esi
		pop	esi
		retn	4
sub_10002734	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002755	proc near		; CODE XREF: sub_10001080+3Dp
					; sub_100011AF+4Bp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	esi
		mov	edi, ecx
		call	sub_10002734
		mov	eax, [esi]
		mov	ecx, [eax+4]
		cmp	dword ptr [ecx+esi+0Ch], 0
		jnz	short loc_10002781
		mov	ecx, [ecx+esi+3Ch]
		test	ecx, ecx
		jz	short loc_10002781
		cmp	ecx, esi
		jz	short loc_10002781
		call	ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)

loc_10002781:				; CODE XREF: sub_10002755+18j
					; sub_10002755+20j ...
		mov	eax, [esi]
		mov	eax, [eax+4]
		cmp	dword ptr [eax+esi+0Ch], 0
		setz	al
		mov	[edi+4], al
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_10002755	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002798	proc near		; CODE XREF: sub_1000471B+177p
					; sub_1000706A+5j

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	eax		; int
		push	dword ptr [eax]	; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		call	sub_10003AF2
		push	dword ptr [esi]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_10002798	endp


; =============== S U B	R O U T	I N E =======================================


sub_100027B6	proc near		; CODE XREF: sub_100029AB+6p
		push	esi
		mov	esi, ecx
		mov	eax, [esi-50h]
		lea	ecx, [esi-4Ch]
		mov	eax, [eax+4]
		mov	dword ptr [eax+esi-50h], offset	off_10008360
		mov	eax, [esi-50h]
		mov	edx, [eax+4]
		lea	eax, [edx-50h]
		mov	[edx+esi-54h], eax
		call	sub_100027E6
		lea	ecx, [esi-48h]
		pop	esi
		jmp	ds:??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::~basic_ostream<char,std::char_traits<char>>(void)
sub_100027B6	endp


; =============== S U B	R O U T	I N E =======================================


sub_100027E6	proc near		; CODE XREF: sub_100027B6+21p
					; sub_100029F5+3p
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_10008294
		call	sub_100031C7
		mov	ecx, esi
		pop	esi
		jmp	ds:??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)
sub_100027E6	endp


; =============== S U B	R O U T	I N E =======================================


sub_100027FD	proc near		; CODE XREF: sub_10002A11+3p
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_100082D8
		call	sub_100055C1
		mov	ecx, esi
		pop	esi
		jmp	sub_10004D01
sub_100027FD	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10002813(void *, void *)
sub_10002813	proc near		; CODE XREF: sub_1000450E+151p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	esi, [esp+4+arg_0]
		jz	short loc_10002830
		push	0		; size_t
		push	1		; char
		call	sub_10003185
		push	[esp+4+arg_0]	; void *
		mov	ecx, esi	; void *
		call	sub_10002BBF

loc_10002830:				; CODE XREF: sub_10002813+7j
		mov	eax, esi
		pop	esi
		retn	4
sub_10002813	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002836	proc near		; CODE XREF: sub_100014E6+Dp

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		push	dword ptr [esi+4]
		call	sub_10001080
		cmp	dword ptr [esi], 0
		pop	ecx
		pop	ecx
		jz	short loc_10002858
		push	dword ptr [esi]
		push	dword ptr [esi+4]
		call	sub_100011AF
		pop	ecx
		pop	ecx

loc_10002858:				; CODE XREF: sub_10002836+14j
		mov	eax, esi
		pop	esi
		retn	4
sub_10002836	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000285E	proc near		; CODE XREF: sub_10003AD1+16p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [ecx+4]
		cmp	eax, [edx+4]
		jnz	short loc_10002875
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_10002875
		xor	eax, eax
		inc	eax
		jmp	short locret_10002877
; ---------------------------------------------------------------------------

loc_10002875:				; CODE XREF: sub_1000285E+Aj
					; sub_1000285E+10j
		xor	eax, eax

locret_10002877:			; CODE XREF: sub_1000285E+15j
		retn	4
sub_1000285E	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000287A	proc near		; CODE XREF: sub_10001511+15p
					; sub_10003AF2+29p ...
		mov	edx, ecx
		mov	ecx, [edx]
		cmp	byte ptr [ecx+0Dh], 0
		jnz	short loc_100028B1
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_100028A6
		jmp	short loc_10002891
; ---------------------------------------------------------------------------

loc_1000288F:				; CODE XREF: sub_1000287A+1Dj
		mov	eax, ecx

loc_10002891:				; CODE XREF: sub_1000287A+13j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_1000288F
		mov	[edx], eax
		jmp	short loc_100028B1
; ---------------------------------------------------------------------------

loc_1000289D:				; CODE XREF: sub_1000287A+33j
		mov	eax, [edx]
		cmp	eax, [ecx+8]
		jnz	short loc_100028AF
		mov	[edx], ecx

loc_100028A6:				; CODE XREF: sub_1000287A+11j
		mov	ecx, [ecx+4]
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_1000289D

loc_100028AF:				; CODE XREF: sub_1000287A+28j
		mov	[edx], ecx

loc_100028B1:				; CODE XREF: sub_1000287A+8j
					; sub_1000287A+21j
		mov	eax, edx
		retn
sub_1000287A	endp


; =============== S U B	R O U T	I N E =======================================


sub_100028B4	proc near		; CODE XREF: sub_10001893+83p
					; sub_1000194A+84p ...
		mov	edx, [ecx]
		cmp	byte ptr [edx+0Dh], 0
		jz	short loc_100028C1
		mov	eax, [edx+8]
		jmp	short loc_100028D6
; ---------------------------------------------------------------------------

loc_100028C1:				; CODE XREF: sub_100028B4+6j
		mov	eax, [edx]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_100028E2
		jmp	short loc_100028CD
; ---------------------------------------------------------------------------

loc_100028CB:				; CODE XREF: sub_100028B4+20j
		mov	eax, edx

loc_100028CD:				; CODE XREF: sub_100028B4+15j
		mov	edx, [eax+8]
		cmp	byte ptr [edx+0Dh], 0
		jz	short loc_100028CB

loc_100028D6:				; CODE XREF: sub_100028B4+Bj
		mov	[ecx], eax
		jmp	short loc_100028F5
; ---------------------------------------------------------------------------

loc_100028DA:				; CODE XREF: sub_100028B4+35j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_100028EB
		mov	[ecx], edx

loc_100028E2:				; CODE XREF: sub_100028B4+13j
		mov	edx, [edx+4]
		cmp	byte ptr [edx+0Dh], 0
		jz	short loc_100028DA

loc_100028EB:				; CODE XREF: sub_100028B4+2Aj
		mov	eax, [ecx]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_100028F5
		mov	[ecx], edx

loc_100028F5:				; CODE XREF: sub_100028B4+24j
					; sub_100028B4+3Dj
		mov	eax, ecx
		retn
sub_100028B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100028F8	proc near		; CODE XREF: sub_1000130E+2Cp
					; sub_100019FD+2Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	ebp, ecx
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	eax, [esi+34h]
		mov	edx, [edi+34h]
		cmp	eax, edx
		jz	short loc_10002918

loc_1000290F:				; CODE XREF: sub_100028F8+28j
		sbb	eax, eax
		neg	eax
		jmp	loc_100029A5
; ---------------------------------------------------------------------------

loc_10002918:				; CODE XREF: sub_100028F8+15j
		mov	eax, [esi+30h]
		mov	ecx, [edi+30h]
		cmp	eax, ecx
		jnz	short loc_1000290F
		push	ebx
		push	esi
		mov	ecx, ebp
		call	sub_100056CF
		push	edi
		mov	ecx, ebp
		mov	ebx, eax
		call	sub_100056CF
		mov	ecx, eax
		cmp	ebx, ecx
		jz	short loc_10002944
		xor	eax, eax
		cmp	ebx, ecx
		setnle	al
		jmp	short loc_100029A4
; ---------------------------------------------------------------------------

loc_10002944:				; CODE XREF: sub_100028F8+41j
		mov	ecx, [esi+0Ch]
		mov	edx, [edi+0Ch]
		cmp	ecx, edx
		jnz	short loc_1000298A
		mov	ecx, [esi+70h]
		mov	edx, [edi+70h]
		cmp	ecx, edx
		jnz	short loc_1000298A
		mov	ecx, [esi+74h]
		mov	edx, [edi+74h]
		cmp	ecx, edx
		jnz	short loc_1000298A
		mov	ecx, [esi+40h]
		mov	edx, [edi+40h]
		cmp	ecx, edx
		jnz	short loc_1000298A
		mov	ecx, [esi+78h]
		mov	edx, [edi+78h]
		cmp	ecx, edx
		jnz	short loc_1000298A
		mov	ecx, [esi+24h]
		mov	edx, [edi+24h]
		cmp	ecx, edx
		jnz	short loc_1000298A
		mov	ecx, [esi+68h]
		mov	edx, [edi+68h]
		cmp	ecx, edx
		jz	short loc_10002990

loc_1000298A:				; CODE XREF: sub_100028F8+54j
					; sub_100028F8+5Ej ...
		xor	eax, eax
		cmp	ecx, edx
		jmp	short loc_1000299D
; ---------------------------------------------------------------------------

loc_10002990:				; CODE XREF: sub_100028F8+90j
		mov	ecx, [edi+38h]
		cmp	[esi+38h], ecx
		jz	short loc_100029A2
		xor	eax, eax
		cmp	[esi+38h], ecx

loc_1000299D:				; CODE XREF: sub_100028F8+96j
		setl	al
		jmp	short loc_100029A4
; ---------------------------------------------------------------------------

loc_100029A2:				; CODE XREF: sub_100028F8+9Ej
		xor	al, al

loc_100029A4:				; CODE XREF: sub_100028F8+4Aj
					; sub_100028F8+A8j
		pop	ebx

loc_100029A5:				; CODE XREF: sub_100028F8+1Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	8
sub_100028F8	endp


; =============== S U B	R O U T	I N E =======================================


sub_100029AB	proc near		; CODE XREF: sub_100029CE+Ep
					; sub_10003E95+C4p ...
		push	esi
		lea	esi, [ecx+50h]
		mov	ecx, esi
		call	sub_100027B6
		mov	eax, ds:??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_ios<char,std::char_traits<char>>::`vftable'
		mov	[esi], eax
		mov	eax, ds:??_7ios_base@std@@6B@ ;	const std::ios_base::`vftable'
		push	esi
		mov	[esi], eax
		call	ds:?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor(std::ios_base *)
		pop	ecx
		pop	esi
		retn
sub_100029AB	endp


; =============== S U B	R O U T	I N E =======================================


sub_100029CE	proc near		; DATA XREF: .rdata:off_10008360o

arg_0		= byte ptr  4

		sub	ecx, [ecx-4]
		jmp	$+5
; ---------------------------------------------------------------------------

loc_100029D6:				; CODE XREF: sub_100029CE+3j
		push	esi
		lea	esi, [ecx-50h]
		mov	ecx, esi
		call	sub_100029AB
		test	[esp+4+arg_0], 1
		jz	short loc_100029EF
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_100029EF:				; CODE XREF: sub_100029CE+18j
		mov	eax, esi
		pop	esi
		retn	4
sub_100029CE	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_100029F5(void *, char)
sub_100029F5	proc near		; DATA XREF: .rdata:off_10008294o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_100027E6
		test	[esp+4+arg_0], 1
		jz	short loc_10002A0B
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_10002A0B:				; CODE XREF: sub_100029F5+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_100029F5	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10002A11(void *, char)
sub_10002A11	proc near		; DATA XREF: .rdata:off_100082D8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_100027FD
		test	[esp+4+arg_0], 1
		jz	short loc_10002A27
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_10002A27:				; CODE XREF: sub_10002A11+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_10002A11	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_1]

; =============== S U B	R O U T	I N E =======================================


sub_10002A4A	proc near		; CODE XREF: sub_10002AEF+Ej
					; DllMain(x,x,x):loc_10005730p
		cmp	dwTlsIndex, 0FFFFFFFFh
		jnz	short loc_10002A56
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10002A56:				; CODE XREF: sub_10002A4A+7j
		push	esi
		push	14h		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	esi, eax
		xor	ecx, ecx
		test	esi, esi
		jz	short loc_10002A74
		push	edi
		xor	eax, eax
		mov	edi, esi
		stosd
		stosd
		stosd
		stosd
		stosd
		pop	edi
		jmp	short loc_10002A76
; ---------------------------------------------------------------------------

loc_10002A74:				; CODE XREF: sub_10002A4A+1Bj
		mov	esi, ecx

loc_10002A76:				; CODE XREF: sub_10002A4A+28j
		push	esi		; lpTlsValue
		push	dwTlsIndex	; dwTlsIndex
		mov	dword ptr [esi], 3000h
		mov	dword ptr [esi+4], 30A0h
		mov	[esi+8], ecx
		mov	[esi+0Ch], ecx
		mov	[esi+10h], ecx
		call	sub_10002B59
		movzx	eax, al
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	eax, esi
		pop	esi
		retn
sub_10002A4A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002AA5	proc near		; CODE XREF: DllMain(x,x,x)+12p
					; DllMain(x,x,x):loc_10005737p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	dwTlsIndex	; dwTlsIndex
		call	sub_10002B44
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_100012FC
		push	0		; lpTlsValue
		push	dwTlsIndex	; dwTlsIndex
		call	sub_10002B59
		add	esp, 10h
		mov	esp, ebp
		pop	ebp
		retn
sub_10002AA5	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002AD4(DWORD dwTlsIndex)
sub_10002AD4	proc near		; CODE XREF: DllMain(x,x,x)+3Fp

dwTlsIndex	= dword	ptr  4

		cmp	[esp+dwTlsIndex], 0FFFFFFFFh
		jnz	short loc_10002ADE
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_10002ADE:				; CODE XREF: sub_10002AD4+5j
		push	[esp+dwTlsIndex] ; dwTlsIndex
		call	ds:TlsFree
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
sub_10002AD4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002AEF	proc near		; CODE XREF: sub_100022B9p
					; sub_100034EB+C2p ...
		push	dwTlsIndex	; dwTlsIndex
		call	sub_10002B44
		pop	ecx
		test	eax, eax
		jz	sub_10002A4A
		retn
sub_10002AEF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002B04	proc near		; CODE XREF: sub_100043E8+6p
		mov	eax, dword_1000A04C
		push	esi
		mov	esi, offset dword_1000A044
		test	al, 1
		jnz	short loc_10002B40
		and	dword_1000A044,	0
		or	eax, 1
		and	dword_1000A048,	0
		mov	ecx, esi
		mov	dword_1000A04C,	eax
		call	sub_10002C35
		push	offset sub_1000706A ; _onexit_t
		mov	dword_1000A044,	eax
		call	sub_100065CF
		pop	ecx

loc_10002B40:				; CODE XREF: sub_10002B04+Dj
		mov	eax, esi
		pop	esi
		retn
sub_10002B04	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002B44(DWORD dwTlsIndex)
sub_10002B44	proc near		; CODE XREF: sub_10002AA5+Ap
					; sub_10002AEF+6p

dwTlsIndex	= dword	ptr  4

		cmp	[esp+dwTlsIndex], 0FFFFFFFFh
		jnz	short loc_10002B4E
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10002B4E:				; CODE XREF: sub_10002B44+5j
		push	[esp+dwTlsIndex] ; dwTlsIndex
		call	ds:TlsGetValue
		retn
sub_10002B44	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002B59(DWORD dwTlsIndex, LPVOID lpTlsValue)
sub_10002B59	proc near		; CODE XREF: sub_10002A4A+49p
					; sub_10002AA5+23p

dwTlsIndex	= dword	ptr  4
lpTlsValue	= dword	ptr  8

		cmp	[esp+dwTlsIndex], 0FFFFFFFFh
		jnz	short loc_10002B63
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_10002B63:				; CODE XREF: sub_10002B59+5j
		push	[esp+lpTlsValue] ; lpTlsValue
		push	[esp+4+dwTlsIndex] ; dwTlsIndex
		call	ds:TlsSetValue
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
sub_10002B59	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10002B78(HWND hWnd,	UINT Msg, WPARAM wParam, LPARAM	lParam)
sub_10002B78	proc near		; DATA XREF: sub_10005414+3Ao

hWnd		= dword	ptr  8
Msg		= dword	ptr  0Ch
wParam		= dword	ptr  10h
lParam		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+Msg], 5
		jnz	short loc_10002B9A
		push	offset String	; "Egl::SurfaceOwner"
		push	[ebp+hWnd]	; hWnd
		call	ds:GetPropA
		test	eax, eax
		jz	short loc_10002B9A
		mov	ecx, eax
		call	sub_100034EB

loc_10002B9A:				; CODE XREF: sub_10002B78+7j
					; sub_10002B78+19j
		push	offset aEglSurfacepare ; "Egl::SurfaceParentWndProc"
		push	[ebp+hWnd]	; hWnd
		call	ds:GetPropA
		push	[ebp+lParam]	; lParam
		push	[ebp+wParam]	; wParam
		push	[ebp+Msg]	; Msg
		push	[ebp+hWnd]	; hWnd
		push	eax		; lpPrevWndFunc
		call	ds:CallWindowProcA
		pop	ebp
		retn	10h
sub_10002B78	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10002BBF(void *, void *)
sub_10002BBF	proc near		; CODE XREF: sub_10002355+15p
					; sub_10002813+18p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, ecx
		cmp	dword ptr [esi+14h], 10h
		jnb	short loc_10002BE1
		mov	eax, [esi+10h]
		inc	eax
		jz	short loc_10002BEC
		push	eax		; size_t
		push	esi		; void *
		push	edi		; void *
		call	ds:memmove
		add	esp, 0Ch
		jmp	short loc_10002BEC
; ---------------------------------------------------------------------------

loc_10002BE1:				; CODE XREF: sub_10002BBF+Cj
		test	edi, edi
		jz	short loc_10002BE9
		mov	eax, [esi]
		mov	[edi], eax

loc_10002BE9:				; CODE XREF: sub_10002BBF+24j
		and	dword ptr [esi], 0

loc_10002BEC:				; CODE XREF: sub_10002BBF+12j
					; sub_10002BBF+20j
		mov	eax, [esi+10h]
		mov	[edi+10h], eax
		mov	eax, [esi+14h]
		mov	[edi+14h], eax
		and	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		pop	edi
		mov	byte ptr [esi],	0
		pop	esi
		retn	4
sub_10002BBF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002C0B	proc near		; CODE XREF: sub_100025CC+25p
					; sub_100025CC+3Ep
		push	0
		push	1
		call	sub_100013DB
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10002C1C
		mov	[eax], eax

loc_10002C1C:				; CODE XREF: sub_10002C0B+Dj
		lea	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_10002C25
		mov	[ecx], eax

loc_10002C25:				; CODE XREF: sub_10002C0B+16j
		lea	ecx, [eax+8]
		test	ecx, ecx
		jz	short loc_10002C2E
		mov	[ecx], eax

loc_10002C2E:				; CODE XREF: sub_10002C0B+1Fj
		mov	word ptr [eax+0Ch], 101h
		retn
sub_10002C0B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002C35	proc near		; CODE XREF: sub_10002B04+27p
		push	0
		push	1
		call	sub_10001432
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10002C46
		mov	[eax], eax

loc_10002C46:				; CODE XREF: sub_10002C35+Dj
		lea	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_10002C4F
		mov	[ecx], eax

loc_10002C4F:				; CODE XREF: sub_10002C35+16j
		lea	ecx, [eax+8]
		test	ecx, ecx
		jz	short loc_10002C58
		mov	[ecx], eax

loc_10002C58:				; CODE XREF: sub_10002C35+1Fj
		mov	word ptr [eax+0Ch], 101h
		retn
sub_10002C35	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002C5F	proc near		; CODE XREF: sub_100022C9+Ap
		push	0
		push	1
		call	sub_10001405
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10002C70
		mov	[eax], eax

loc_10002C70:				; CODE XREF: sub_10002C5F+Dj
		lea	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_10002C79
		mov	[ecx], eax

loc_10002C79:				; CODE XREF: sub_10002C5F+16j
		lea	ecx, [eax+8]
		test	ecx, ecx
		jz	short loc_10002C82
		mov	[ecx], eax

loc_10002C82:				; CODE XREF: sub_10002C5F+1Fj
		mov	word ptr [eax+0Ch], 101h
		retn
sub_10002C5F	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002C89	proc near		; CODE XREF: sub_1000145Cp
		push	esi
		push	0
		push	1
		mov	esi, ecx
		call	sub_100013DB
		mov	edx, eax
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	short loc_10002CA1
		mov	ecx, [esi]
		mov	[edx], ecx

loc_10002CA1:				; CODE XREF: sub_10002C89+12j
		lea	ecx, [edx+4]
		test	ecx, ecx
		jz	short loc_10002CAC
		mov	eax, [esi]
		mov	[ecx], eax

loc_10002CAC:				; CODE XREF: sub_10002C89+1Dj
		lea	ecx, [edx+8]
		test	ecx, ecx
		jz	short loc_10002CB7
		mov	eax, [esi]
		mov	[ecx], eax

loc_10002CB7:				; CODE XREF: sub_10002C89+28j
		mov	eax, edx
		pop	esi
		retn
sub_10002C89	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002CBB	proc near		; CODE XREF: sub_1000149B+1p
		push	esi
		push	0
		push	1
		mov	esi, ecx
		call	sub_10001432
		mov	edx, eax
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	short loc_10002CD3
		mov	ecx, [esi]
		mov	[edx], ecx

loc_10002CD3:				; CODE XREF: sub_10002CBB+12j
		lea	ecx, [edx+4]
		test	ecx, ecx
		jz	short loc_10002CDE
		mov	eax, [esi]
		mov	[ecx], eax

loc_10002CDE:				; CODE XREF: sub_10002CBB+1Dj
		lea	ecx, [edx+8]
		test	ecx, ecx
		jz	short loc_10002CE9
		mov	eax, [esi]
		mov	[ecx], eax

loc_10002CE9:				; CODE XREF: sub_10002CBB+28j
		mov	eax, edx
		pop	esi
		retn
sub_10002CBB	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002CED	proc near		; CODE XREF: sub_10001479+1p
		push	esi
		push	0
		push	1
		mov	esi, ecx
		call	sub_10001405
		mov	edx, eax
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	short loc_10002D05
		mov	ecx, [esi]
		mov	[edx], ecx

loc_10002D05:				; CODE XREF: sub_10002CED+12j
		lea	ecx, [edx+4]
		test	ecx, ecx
		jz	short loc_10002D10
		mov	eax, [esi]
		mov	[ecx], eax

loc_10002D10:				; CODE XREF: sub_10002CED+1Dj
		lea	ecx, [edx+8]
		test	ecx, ecx
		jz	short loc_10002D1B
		mov	eax, [esi]
		mov	[ecx], eax

loc_10002D1B:				; CODE XREF: sub_10002CED+28j
		mov	eax, edx
		pop	esi
		retn
sub_10002CED	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10002D1F(void *, int, size_t)
sub_10002D1F	proc near		; CODE XREF: sub_10002E9D+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	esi, ecx
		or	edi, 0Fh
		cmp	edi, 0FFFFFFFEh
		jbe	short loc_10002D37
		mov	edi, [esp+10h+arg_0]
		jmp	short loc_10002D5C
; ---------------------------------------------------------------------------

loc_10002D37:				; CODE XREF: sub_10002D1F+10j
		push	3
		xor	edx, edx
		mov	ebx, [esi+14h]
		mov	eax, edi
		mov	ecx, ebx
		pop	ebp
		div	ebp
		shr	ecx, 1
		cmp	ecx, eax
		jbe	short loc_10002D5C
		push	0FFFFFFFEh
		pop	eax
		sub	eax, ecx
		cmp	ebx, eax
		ja	short loc_10002D59
		lea	edi, [ecx+ebx]
		jmp	short loc_10002D5C
; ---------------------------------------------------------------------------

loc_10002D59:				; CODE XREF: sub_10002D1F+33j
		push	0FFFFFFFEh
		pop	edi

loc_10002D5C:				; CODE XREF: sub_10002D1F+16j
					; sub_10002D1F+2Aj ...
		lea	eax, [edi+1]
		push	0
		push	eax
		call	sub_1000138C
		mov	ebx, [esp+18h+arg_4]
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_10002D8E
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_10002D7D
		mov	ecx, [esi]
		jmp	short loc_10002D7F
; ---------------------------------------------------------------------------

loc_10002D7D:				; CODE XREF: sub_10002D1F+58j
		mov	ecx, esi

loc_10002D7F:				; CODE XREF: sub_10002D1F+5Cj
		test	ebx, ebx
		jz	short loc_10002D8E
		push	ebx		; size_t
		push	ecx		; void *
		push	ebp		; void *
		call	memcpy
		add	esp, 0Ch

loc_10002D8E:				; CODE XREF: sub_10002D1F+52j
					; sub_10002D1F+62j
		push	0		; size_t
		push	1		; char
		mov	ecx, esi	; void *
		call	sub_10003185
		test	esi, esi
		jz	short loc_10002D9F
		mov	[esi], ebp

loc_10002D9F:				; CODE XREF: sub_10002D1F+7Cj
		mov	[esi+14h], edi
		mov	[esi+10h], ebx
		cmp	edi, 10h
		jb	short loc_10002DAC
		mov	esi, [esi]

loc_10002DAC:				; CODE XREF: sub_10002D1F+89j
		pop	edi
		mov	byte ptr [esi+ebx], 0
		pop	esi
		pop	ebp
		pop	ebx
		retn	8
sub_10002D1F	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10002DB7(void *, int)
sub_10002DB7	proc near		; CODE XREF: sub_10003048+3Cp
					; sub_10003220+Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_10002DCC
; ---------------------------------------------------------------------------

loc_10002DBE:				; CODE XREF: sub_10002DB7+19j
		push	0		; size_t
		push	1		; char
		mov	ecx, esi	; void *
		call	sub_10003185
		add	esi, 18h

loc_10002DCC:				; CODE XREF: sub_10002DB7+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_10002DBE
		pop	esi
		retn	8
sub_10002DB7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002DD6	proc near		; CODE XREF: sub_10003B41+Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		mov	esi, [ecx]
		mov	edx, esi
		mov	eax, [esi+4]
		mov	ecx, eax
		cmp	byte ptr [ecx+0Dh], 0
		jnz	short loc_10002E10
		push	edi
		mov	edi, [ebx]

loc_10002DEE:				; CODE XREF: sub_10002DD6+37j
		cmp	[ecx+10h], edi
		jnb	short loc_10002DF8
		mov	ecx, [ecx+8]
		jmp	short loc_10002E09
; ---------------------------------------------------------------------------

loc_10002DF8:				; CODE XREF: sub_10002DD6+1Bj
		cmp	byte ptr [edx+0Dh], 0
		jz	short loc_10002E05
		cmp	edi, [ecx+10h]
		jnb	short loc_10002E05
		mov	edx, ecx

loc_10002E05:				; CODE XREF: sub_10002DD6+26j
					; sub_10002DD6+2Bj
		mov	esi, ecx
		mov	ecx, [ecx]

loc_10002E09:				; CODE XREF: sub_10002DD6+20j
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10002DEE
		pop	edi

loc_10002E10:				; CODE XREF: sub_10002DD6+13j
		cmp	byte ptr [edx+0Dh], 0
		jnz	short loc_10002E18
		mov	eax, [edx]

loc_10002E18:				; CODE XREF: sub_10002DD6+3Ej
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_10002E34
		mov	ecx, [ebx]

loc_10002E20:				; CODE XREF: sub_10002DD6+5Cj
		cmp	ecx, [eax+10h]
		jnb	short loc_10002E2B
		mov	edx, eax
		mov	eax, [eax]
		jmp	short loc_10002E2E
; ---------------------------------------------------------------------------

loc_10002E2B:				; CODE XREF: sub_10002DD6+4Dj
		mov	eax, [eax+8]

loc_10002E2E:				; CODE XREF: sub_10002DD6+53j
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_10002E20

loc_10002E34:				; CODE XREF: sub_10002DD6+46j
		mov	eax, [esp+8+arg_0]
		mov	[eax], esi
		pop	esi
		mov	[eax+4], edx
		pop	ebx
		retn	8
sub_10002DD6	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10002E42(void *)
sub_10002E42	proc near		; CODE XREF: sub_10002E42+16p
					; sub_100035E7+8p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ebx, ecx
		mov	esi, edi
		cmp	byte ptr [edi+0Dh], 0
		jnz	short loc_10002E6E

loc_10002E53:				; CODE XREF: sub_10002E42+2Aj
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_10002E42
		mov	esi, [esi]
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+0Dh], 0
		mov	edi, esi
		pop	ecx
		jz	short loc_10002E53

loc_10002E6E:				; CODE XREF: sub_10002E42+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_10002E42	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E74	proc near		; CODE XREF: sub_100023C6+19p

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		test	cl, 1
		jnz	short loc_10002E82
		push	4
		pop	eax

loc_10002E82:				; CODE XREF: sub_10002E74+9j
		test	cl, 2
		jnz	short loc_10002E8A
		or	eax, 2

loc_10002E8A:				; CODE XREF: sub_10002E74+11j
		test	cl, 8
		jz	short loc_10002E92
		or	eax, 8

loc_10002E92:				; CODE XREF: sub_10002E74+19j
		test	cl, 4
		jz	short locret_10002E9A
		or	eax, 10h

locret_10002E9A:			; CODE XREF: sub_10002E74+21j
		retn	4
sub_10002E74	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E9D	proc near		; CODE XREF: sub_1000329C+53p
					; sub_10003343+58p ...

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	esi, 0FFFFFFFEh
		jbe	short loc_10002EB2
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_10002EB2:				; CODE XREF: sub_10002E9D+8j
		cmp	[ecx+14h], esi
		jnb	short loc_10002EC2
		push	dword ptr [ecx+10h] ; size_t
		push	esi		; int
		call	sub_10002D1F
		jmp	short loc_10002EF3
; ---------------------------------------------------------------------------

loc_10002EC2:				; CODE XREF: sub_10002E9D+18j
		cmp	[esp+4+arg_4], 0
		jz	short loc_10002EE1
		cmp	esi, 10h
		jnb	short loc_10002EE1
		mov	eax, [ecx+10h]
		cmp	esi, eax
		jnb	short loc_10002ED7
		mov	eax, esi

loc_10002ED7:				; CODE XREF: sub_10002E9D+36j
		push	eax		; size_t
		push	1		; char
		call	sub_10003185
		jmp	short loc_10002EF3
; ---------------------------------------------------------------------------

loc_10002EE1:				; CODE XREF: sub_10002E9D+2Aj
					; sub_10002E9D+2Fj
		test	esi, esi
		jnz	short loc_10002EF3
		and	[ecx+10h], esi
		cmp	dword ptr [ecx+14h], 10h
		jb	short loc_10002EF0
		mov	ecx, [ecx]

loc_10002EF0:				; CODE XREF: sub_10002E9D+4Fj
		mov	byte ptr [ecx],	0

loc_10002EF3:				; CODE XREF: sub_10002E9D+23j
					; sub_10002E9D+42j ...
		xor	eax, eax
		cmp	eax, esi
		pop	esi
		sbb	eax, eax
		neg	eax
		retn	8
sub_10002E9D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002EFF	proc near		; CODE XREF: sub_100030AA+37p

arg_0		= dword	ptr  4

		mov	edx, [ecx+8]
		mov	eax, 3FFFFFFFh
		sub	edx, [ecx]
		sar	edx, 2
		mov	ecx, edx
		shr	ecx, 1
		sub	eax, ecx
		cmp	eax, edx
		jnb	short loc_10002F1A
		xor	edx, edx
		jmp	short loc_10002F1C
; ---------------------------------------------------------------------------

loc_10002F1A:				; CODE XREF: sub_10002EFF+15j
		add	edx, ecx

loc_10002F1C:				; CODE XREF: sub_10002EFF+19j
		cmp	edx, [esp+arg_0]
		jnb	short loc_10002F26
		mov	edx, [esp+arg_0]

loc_10002F26:				; CODE XREF: sub_10002EFF+21j
		mov	eax, edx
		retn	4
sub_10002EFF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002F2B	proc near		; CODE XREF: sub_100030F2+3Dp

arg_0		= dword	ptr  4

		mov	eax, [ecx+8]
		sub	eax, [ecx]
		push	18h
		pop	ecx
		cdq
		idiv	ecx
		mov	ecx, 0AAAAAAAh
		mov	edx, eax
		shr	edx, 1
		sub	ecx, edx
		cmp	ecx, eax
		jnb	short loc_10002F49
		xor	eax, eax
		jmp	short loc_10002F4B
; ---------------------------------------------------------------------------

loc_10002F49:				; CODE XREF: sub_10002F2B+18j
		add	eax, edx

loc_10002F4B:				; CODE XREF: sub_10002F2B+1Cj
		cmp	eax, [esp+arg_0]
		jnb	short locret_10002F55
		mov	eax, [esp+arg_0]

locret_10002F55:			; CODE XREF: sub_10002F2B+24j
		retn	4
sub_10002F2B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002F58	proc near		; CODE XREF: sub_10003343+9p
					; sub_10003473+9p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	short loc_10002F8B
		cmp	dword ptr [ecx+14h], 10h
		jb	short loc_10002F6A
		mov	eax, [ecx]
		jmp	short loc_10002F6C
; ---------------------------------------------------------------------------

loc_10002F6A:				; CODE XREF: sub_10002F58+Cj
		mov	eax, ecx

loc_10002F6C:				; CODE XREF: sub_10002F58+10j
		cmp	edx, eax
		jb	short loc_10002F8B
		cmp	dword ptr [ecx+14h], 10h
		push	esi
		jb	short loc_10002F7B
		mov	esi, [ecx]
		jmp	short loc_10002F7D
; ---------------------------------------------------------------------------

loc_10002F7B:				; CODE XREF: sub_10002F58+1Dj
		mov	esi, ecx

loc_10002F7D:				; CODE XREF: sub_10002F58+21j
		mov	eax, [ecx+10h]
		add	eax, esi
		pop	esi
		cmp	eax, edx
		jbe	short loc_10002F8B
		mov	al, 1
		jmp	short locret_10002F8D
; ---------------------------------------------------------------------------

loc_10002F8B:				; CODE XREF: sub_10002F58+6j
					; sub_10002F58+16j ...
		xor	al, al

locret_10002F8D:			; CODE XREF: sub_10002F58+31j
		retn	4
sub_10002F58	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002F90	proc near		; CODE XREF: sub_10003E62+Bp

arg_0		= dword	ptr  4

		mov	edx, [ecx]
		mov	ecx, [edx+4]
		cmp	byte ptr [ecx+0Dh], 0
		jnz	short loc_10002FB5
		mov	eax, [esp+arg_0]
		mov	eax, [eax]

loc_10002FA1:				; CODE XREF: sub_10002F90+23j
		cmp	[ecx+10h], eax
		jnb	short loc_10002FAB
		mov	ecx, [ecx+8]
		jmp	short loc_10002FAF
; ---------------------------------------------------------------------------

loc_10002FAB:				; CODE XREF: sub_10002F90+14j
		mov	edx, ecx
		mov	ecx, [ecx]

loc_10002FAF:				; CODE XREF: sub_10002F90+19j
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10002FA1

loc_10002FB5:				; CODE XREF: sub_10002F90+9j
		mov	eax, edx
		retn	4
sub_10002F90	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002FBA	proc near		; CODE XREF: sub_10001534+90p
					; sub_10001534+FCp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [edx+8]
		mov	eax, [esi]
		mov	[edx+8], eax
		mov	eax, [esi]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_10002FD2
		mov	[eax+4], edx

loc_10002FD2:				; CODE XREF: sub_10002FBA+13j
		mov	eax, [edx+4]
		mov	[esi+4], eax
		mov	eax, [ecx]
		cmp	edx, [eax+4]
		jnz	short loc_10002FE4
		mov	[eax+4], esi
		jmp	short loc_10002FF2
; ---------------------------------------------------------------------------

loc_10002FE4:				; CODE XREF: sub_10002FBA+23j
		mov	eax, [edx+4]
		cmp	edx, [eax]
		jnz	short loc_10002FEF
		mov	[eax], esi
		jmp	short loc_10002FF2
; ---------------------------------------------------------------------------

loc_10002FEF:				; CODE XREF: sub_10002FBA+2Fj
		mov	[eax+8], esi

loc_10002FF2:				; CODE XREF: sub_10002FBA+28j
					; sub_10002FBA+33j
		mov	[esi], edx
		mov	[edx+4], esi
		pop	esi
		retn	4
sub_10002FBA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002FFB	proc near		; CODE XREF: sub_100030AA+3Fp
					; sub_10004D27:loc_10004D4Aj

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		push	0
		push	ebp
		mov	esi, ecx
		call	sub_100013B1
		pop	ecx
		pop	ecx
		mov	edi, eax
		mov	ecx, esi
		push	edi		; void *
		push	dword ptr [esi+4] ; int
		push	dword ptr [esi]	; void *
		call	sub_10001FA9
		mov	ebx, [esi+4]
		sub	ebx, [esi]
		sar	ebx, 2
		cmp	dword ptr [esi], 0
		jz	short loc_10003033
		push	dword ptr [esi]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_10003033:				; CODE XREF: sub_10002FFB+2Ej
		lea	eax, [edi+ebp*4]
		mov	[esi], edi
		mov	[esi+8], eax
		lea	eax, [edi+ebx*4]
		pop	edi
		mov	[esi+4], eax
		pop	esi
		pop	ebp
		pop	ebx
		retn	4
sub_10002FFB	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003048	proc near		; CODE XREF: sub_100030F2+45p

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		push	0
		push	ebx
		mov	esi, ecx
		call	sub_10001432
		pop	ecx
		pop	ecx
		mov	edi, eax
		mov	ecx, esi
		push	edi
		push	dword ptr [esi+4]
		push	dword ptr [esi]
		call	sub_10001FCD
		mov	eax, [esi+4]
		sub	eax, [esi]
		push	18h
		cdq
		pop	ecx
		idiv	ecx
		cmp	dword ptr [esi], 0
		mov	ebp, eax
		jz	short loc_10003091
		push	dword ptr [esi+4] ; int
		mov	ecx, esi
		push	dword ptr [esi]	; void *
		call	sub_10002DB7
		push	dword ptr [esi]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_10003091:				; CODE XREF: sub_10003048+33j
		imul	eax, ebx, 18h
		mov	[esi], edi
		add	eax, edi
		mov	[esi+8], eax
		imul	eax, ebp, 18h
		add	eax, edi
		pop	edi
		mov	[esi+4], eax
		pop	esi
		pop	ebp
		pop	ebx
		retn	4
sub_10003048	endp


; =============== S U B	R O U T	I N E =======================================


sub_100030AA	proc near		; CODE XREF: sub_10004C0E+1Fp
					; sub_10004C0E+39p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		mov	eax, [esi+8]
		mov	edx, [esi+4]
		sub	eax, edx
		sar	eax, 2
		cmp	eax, ecx
		jnb	short loc_100030EE
		sub	edx, [esi]
		mov	eax, 3FFFFFFFh
		sar	edx, 2
		sub	eax, edx
		cmp	eax, ecx
		jnb	short loc_100030DB
		push	offset aVectorTTooLong ; "vector<T> too	long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_100030DB:				; CODE XREF: sub_100030AA+24j
		lea	eax, [edx+ecx]
		mov	ecx, esi
		push	eax
		call	sub_10002EFF
		push	eax
		mov	ecx, esi
		call	sub_10002FFB

loc_100030EE:				; CODE XREF: sub_100030AA+14j
		pop	esi
		retn	4
sub_100030AA	endp


; =============== S U B	R O U T	I N E =======================================


sub_100030F2	proc near		; CODE XREF: sub_10004C60+29p
					; sub_10004C60+4Fp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		push	18h
		pop	ebx
		mov	eax, [esi+8]
		mov	ecx, [esi+4]
		sub	eax, ecx
		cdq
		idiv	ebx
		mov	edi, [esp+0Ch+arg_0]
		cmp	eax, edi
		jnb	short loc_1000313C
		sub	ecx, [esi]
		mov	eax, ecx
		mov	ecx, 0AAAAAAAh
		cdq
		idiv	ebx
		sub	ecx, eax
		cmp	ecx, edi
		jnb	short loc_1000312A
		push	offset aVectorTTooLong ; "vector<T> too	long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_1000312A:				; CODE XREF: sub_100030F2+2Bj
		add	eax, edi
		mov	ecx, esi
		push	eax
		call	sub_10002F2B
		push	eax
		mov	ecx, esi
		call	sub_10003048

loc_1000313C:				; CODE XREF: sub_100030F2+19j
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_100030F2	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003142	proc near		; CODE XREF: sub_10001534+AEp
					; sub_10001534+DEp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [edx]
		mov	eax, [esi+8]
		mov	[edx], eax
		mov	eax, [esi+8]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_1000315A
		mov	[eax+4], edx

loc_1000315A:				; CODE XREF: sub_10003142+13j
		mov	eax, [edx+4]
		mov	[esi+4], eax
		mov	eax, [ecx]
		cmp	edx, [eax+4]
		jnz	short loc_1000316C
		mov	[eax+4], esi
		jmp	short loc_1000317B
; ---------------------------------------------------------------------------

loc_1000316C:				; CODE XREF: sub_10003142+23j
		mov	eax, [edx+4]
		cmp	edx, [eax+8]
		jnz	short loc_10003179
		mov	[eax+8], esi
		jmp	short loc_1000317B
; ---------------------------------------------------------------------------

loc_10003179:				; CODE XREF: sub_10003142+30j
		mov	[eax], esi

loc_1000317B:				; CODE XREF: sub_10003142+28j
					; sub_10003142+35j
		mov	[esi+8], edx
		mov	[edx+4], esi
		pop	esi
		retn	4
sub_10003142	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10003185(void *, char, size_t)
sub_10003185	proc near		; CODE XREF: sub_10002813+Dp
					; sub_10002D1F+75p ...

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	esi, ecx
		jz	short loc_100031B4
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_100031B4
		push	ebx
		mov	ebx, [esi]
		test	edi, edi
		jz	short loc_100031AC
		push	edi		; size_t
		push	ebx		; void *
		push	esi		; void *
		call	memcpy
		add	esp, 0Ch

loc_100031AC:				; CODE XREF: sub_10003185+1Aj
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		pop	ebx

loc_100031B4:				; CODE XREF: sub_10003185+Dj
					; sub_10003185+13j
		mov	[esi+10h], edi
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [edi+esi], 0
		pop	edi
		pop	esi
		retn	8
sub_10003185	endp


; =============== S U B	R O U T	I N E =======================================


sub_100031C7	proc near		; CODE XREF: sub_100027E6+9p
		push	esi
		mov	esi, ecx
		test	byte ptr [esi+3Ch], 1
		jz	short loc_100031DB
		mov	eax, [esi+0Ch]
		push	dword ptr [eax]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_100031DB:				; CODE XREF: sub_100031C7+7j
		mov	eax, [esi+0Ch]
		xor	ecx, ecx
		mov	[eax], ecx
		mov	eax, [esi+1Ch]
		mov	[eax], ecx
		mov	eax, [esi+2Ch]
		mov	[eax], ecx
		mov	eax, [esi+10h]
		mov	[eax], ecx
		mov	eax, [esi+20h]
		mov	[eax], ecx
		mov	eax, [esi+30h]
		mov	[eax], ecx
		and	dword ptr [esi+3Ch], 0FFFFFFFEh
		mov	[esi+38h], ecx
		pop	esi
		retn
sub_100031C7	endp

; [0000001C BYTES: COLLAPSED FUNCTION unknown_libname_2]

; =============== S U B	R O U T	I N E =======================================


sub_10003220	proc near		; CODE XREF: sub_10003E95+CCp
					; sub_1000450E+16Bp
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi], 0
		jz	short loc_10003244
		push	dword ptr [esi+4] ; int
		push	dword ptr [esi]	; void *
		call	sub_10002DB7
		push	dword ptr [esi]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		xor	eax, eax
		pop	ecx
		mov	[esi], eax
		mov	[esi+4], eax
		mov	[esi+8], eax

loc_10003244:				; CODE XREF: sub_10003220+6j
		pop	esi
		retn
sub_10003220	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003246	proc near		; CODE XREF: sub_1000471B+C4p

var_98		= byte ptr -98h
var_8		= byte ptr -8
arg_0		= byte ptr  8
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_1C]
		lea	esi, [ebp+arg_0]
		mov	ebx, ecx
		push	[ebp+arg_18]
		lea	ecx, [ebp+var_98]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		sub	esp, 10h
		mov	edi, esp
		movsd
		movsd
		movsd
		movsd
		call	sub_100023ED
		movzx	eax, byte_1000A038
		mov	ecx, ebx
		push	eax
		lea	eax, [ebp+var_98]
		push	eax
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_100019FD
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	20h
sub_10003246	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_1000329C(int, int, size_t)
sub_1000329C	proc near		; CODE XREF: sub_10003343+28p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	eax, [ebx+10h]
		mov	esi, ecx
		cmp	eax, ebp
		jnb	short loc_100032BB
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)

loc_100032BB:				; CODE XREF: sub_1000329C+12j
		push	edi
		mov	edi, [esp+10h+arg_8]
		sub	eax, ebp
		cmp	eax, edi
		jnb	short loc_100032C8
		mov	edi, eax

loc_100032C8:				; CODE XREF: sub_1000329C+28j
		mov	ecx, [esi+10h]
		or	eax, 0FFFFFFFFh
		sub	eax, ecx
		cmp	eax, edi
		ja	short loc_100032DF
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_100032DF:				; CODE XREF: sub_1000329C+36j
		test	edi, edi
		jz	short loc_1000333A
		lea	eax, [ecx+edi]
		mov	ecx, esi
		push	0
		push	eax
		mov	[esp+18h+arg_0], eax
		call	sub_10002E9D
		test	al, al
		jz	short loc_1000333A
		cmp	dword ptr [ebx+14h], 10h
		jb	short loc_10003300
		mov	ebx, [ebx]

loc_10003300:				; CODE XREF: sub_1000329C+60j
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_1000330A
		mov	ecx, [esi]
		jmp	short loc_1000330C
; ---------------------------------------------------------------------------

loc_1000330A:				; CODE XREF: sub_1000329C+68j
		mov	ecx, esi

loc_1000330C:				; CODE XREF: sub_1000329C+6Cj
		test	edi, edi
		jz	short loc_10003323
		push	edi		; size_t
		lea	eax, [ebx+ebp]
		push	eax		; void *
		mov	eax, [esi+10h]
		add	eax, ecx
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_10003323:				; CODE XREF: sub_1000329C+72j
		cmp	dword ptr [esi+14h], 10h
		mov	ecx, [esp+10h+arg_0]
		mov	[esi+10h], ecx
		jb	short loc_10003334
		mov	eax, [esi]
		jmp	short loc_10003336
; ---------------------------------------------------------------------------

loc_10003334:				; CODE XREF: sub_1000329C+92j
		mov	eax, esi

loc_10003336:				; CODE XREF: sub_1000329C+96j
		mov	byte ptr [eax+ecx], 0

loc_1000333A:				; CODE XREF: sub_1000329C+45j
					; sub_1000329C+5Aj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
sub_1000329C	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10003343(int, void	*, size_t)
sub_10003343	proc near		; CODE XREF: sub_10004690+75p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	esi, ecx
		push	edi
		call	sub_10002F58
		test	al, al
		jz	short loc_10003372
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_1000335F
		mov	eax, [esi]
		jmp	short loc_10003361
; ---------------------------------------------------------------------------

loc_1000335F:				; CODE XREF: sub_10003343+16j
		mov	eax, esi

loc_10003361:				; CODE XREF: sub_10003343+1Aj
		push	[esp+8+arg_4]	; size_t
		sub	edi, eax
		mov	ecx, esi
		push	edi		; int
		push	esi		; int
		call	sub_1000329C
		jmp	short loc_100033DB
; ---------------------------------------------------------------------------

loc_10003372:				; CODE XREF: sub_10003343+10j
		mov	ecx, [esi+10h]
		or	eax, 0FFFFFFFFh
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		sub	eax, ecx
		cmp	eax, ebx
		ja	short loc_1000338E
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_1000338E:				; CODE XREF: sub_10003343+3Ej
		test	ebx, ebx
		jz	short loc_100033D8
		push	ebp
		lea	ebp, [ecx+ebx]
		mov	ecx, esi
		push	0
		push	ebp
		call	sub_10002E9D
		test	al, al
		jz	short loc_100033D7
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_100033AE
		mov	ecx, [esi]
		jmp	short loc_100033B0
; ---------------------------------------------------------------------------

loc_100033AE:				; CODE XREF: sub_10003343+65j
		mov	ecx, esi

loc_100033B0:				; CODE XREF: sub_10003343+69j
		test	ebx, ebx
		jz	short loc_100033C4
		mov	eax, [esi+10h]
		push	ebx		; size_t
		add	eax, ecx
		push	edi		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_100033C4:				; CODE XREF: sub_10003343+6Fj
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], ebp
		jb	short loc_100033D1
		mov	eax, [esi]
		jmp	short loc_100033D3
; ---------------------------------------------------------------------------

loc_100033D1:				; CODE XREF: sub_10003343+88j
		mov	eax, esi

loc_100033D3:				; CODE XREF: sub_10003343+8Cj
		mov	byte ptr [eax+ebp], 0

loc_100033D7:				; CODE XREF: sub_10003343+5Fj
		pop	ebp

loc_100033D8:				; CODE XREF: sub_10003343+4Dj
		mov	eax, esi
		pop	ebx

loc_100033DB:				; CODE XREF: sub_10003343+2Dj
		pop	edi
		pop	esi
		retn	8
sub_10003343	endp


; =============== S U B	R O U T	I N E =======================================


sub_100033E0	proc near		; CODE XREF: sub_10003473+28p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		mov	edi, [ebx+10h]
		mov	esi, ecx
		cmp	edi, ebp
		jnb	short loc_10003400
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)

loc_10003400:				; CODE XREF: sub_100033E0+13j
		sub	edi, ebp
		cmp	[esp+10h+arg_8], edi
		jnb	short loc_1000340C
		mov	edi, [esp+10h+arg_8]

loc_1000340C:				; CODE XREF: sub_100033E0+26j
		cmp	esi, ebx
		jnz	short loc_10003425
		lea	eax, [edi+ebp]
		push	eax
		call	sub_10003DB5
		push	ebp
		push	0
		mov	ecx, esi
		call	sub_10003DE1
		jmp	short loc_1000346A
; ---------------------------------------------------------------------------

loc_10003425:				; CODE XREF: sub_100033E0+2Ej
		push	0
		push	edi
		call	sub_10002E9D
		test	al, al
		jz	short loc_1000346A
		cmp	dword ptr [ebx+14h], 10h
		jb	short loc_10003439
		mov	ebx, [ebx]

loc_10003439:				; CODE XREF: sub_100033E0+55j
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_10003443
		mov	ecx, [esi]
		jmp	short loc_10003445
; ---------------------------------------------------------------------------

loc_10003443:				; CODE XREF: sub_100033E0+5Dj
		mov	ecx, esi

loc_10003445:				; CODE XREF: sub_100033E0+61j
		test	edi, edi
		jz	short loc_10003457
		push	edi		; size_t
		lea	eax, [ebx+ebp]
		push	eax		; void *
		push	ecx		; void *
		call	memcpy
		add	esp, 0Ch

loc_10003457:				; CODE XREF: sub_100033E0+67j
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], edi
		jb	short loc_10003464
		mov	eax, [esi]
		jmp	short loc_10003466
; ---------------------------------------------------------------------------

loc_10003464:				; CODE XREF: sub_100033E0+7Ej
		mov	eax, esi

loc_10003466:				; CODE XREF: sub_100033E0+82j
		mov	byte ptr [eax+edi], 0

loc_1000346A:				; CODE XREF: sub_100033E0+43j
					; sub_100033E0+4Fj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
sub_100033E0	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10003473(void *, size_t)
sub_10003473	proc near		; CODE XREF: sub_10002375+22p
					; sub_100023A2+19p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	ebx
		mov	esi, ecx
		call	sub_10002F58
		test	al, al
		jz	short loc_100034A2
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_1000348F
		mov	eax, [esi]
		jmp	short loc_10003491
; ---------------------------------------------------------------------------

loc_1000348F:				; CODE XREF: sub_10003473+16j
		mov	eax, esi

loc_10003491:				; CODE XREF: sub_10003473+1Aj
		push	[esp+8+arg_4]
		sub	ebx, eax
		mov	ecx, esi
		push	ebx
		push	esi
		call	sub_100033E0
		jmp	short loc_100034E6
; ---------------------------------------------------------------------------

loc_100034A2:				; CODE XREF: sub_10003473+10j
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	ecx, esi
		push	0
		push	edi
		call	sub_10002E9D
		test	al, al
		jz	short loc_100034E3
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_100034BF
		mov	eax, [esi]
		jmp	short loc_100034C1
; ---------------------------------------------------------------------------

loc_100034BF:				; CODE XREF: sub_10003473+46j
		mov	eax, esi

loc_100034C1:				; CODE XREF: sub_10003473+4Aj
		test	edi, edi
		jz	short loc_100034D0
		push	edi		; size_t
		push	ebx		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_100034D0:				; CODE XREF: sub_10003473+50j
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], edi
		jb	short loc_100034DD
		mov	eax, [esi]
		jmp	short loc_100034DF
; ---------------------------------------------------------------------------

loc_100034DD:				; CODE XREF: sub_10003473+64j
		mov	eax, esi

loc_100034DF:				; CODE XREF: sub_10003473+68j
		mov	byte ptr [eax+edi], 0

loc_100034E3:				; CODE XREF: sub_10003473+40j
		mov	eax, esi
		pop	edi

loc_100034E6:				; CODE XREF: sub_10003473+2Dj
		pop	esi
		pop	ebx
		retn	8
sub_10003473	endp


; =============== S U B	R O U T	I N E =======================================


sub_100034EB	proc near		; CODE XREF: sub_10002B78+1Dp
					; sub_100054A4+77p

var_19		= byte ptr -19h
var_18		= dword	ptr -18h
Rect		= tagRECT ptr -14h
var_4		= dword	ptr -4

		sub	esp, 1Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		push	ebx
		push	ebp
		push	esi
		mov	esi, ecx
		push	edi
		mov	eax, [esi]
		call	dword ptr [eax+10h]
		mov	edx, [esi]
		mov	ecx, esi
		mov	ebx, eax
		call	dword ptr [edx+14h]
		xor	ecx, ecx
		mov	edi, eax
		mov	al, cl
		mov	[esp+2Ch+var_18], ecx
		mov	[esp+2Ch+var_19], al
		cmp	[esi+44h], ecx
		jnz	short loc_10003577
		lea	ecx, [esi+14h]
		call	sub_100048A6
		test	al, al
		jnz	short loc_10003571
		lea	eax, [esp+2Ch+Rect]
		push	eax		; lpRect
		lea	ecx, [esi+14h]
		call	sub_10003FB4
		test	al, al
		jz	loc_100035D2
		mov	eax, [esi]
		mov	ecx, esi
		mov	ebx, [esp+2Ch+Rect.right]
		mov	edi, [esp+2Ch+Rect.bottom]
		sub	ebx, [esp+2Ch+Rect.left]
		sub	edi, [esp+2Ch+Rect.top]
		call	dword ptr [eax+10h]
		cmp	ebx, eax
		jnz	short loc_1000356D
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		cmp	edi, eax
		jnz	short loc_1000356D
		xor	ecx, ecx
		mov	al, cl
		jmp	short loc_10003577
; ---------------------------------------------------------------------------

loc_1000356D:				; CODE XREF: sub_100034EB+6Fj
					; sub_100034EB+7Aj
		mov	al, 1
		jmp	short loc_10003575
; ---------------------------------------------------------------------------

loc_10003571:				; CODE XREF: sub_100034EB+3Fj
		mov	al, [esp+2Ch+var_19]

loc_10003575:				; CODE XREF: sub_100034EB+84j
		xor	ecx, ecx

loc_10003577:				; CODE XREF: sub_100034EB+33j
					; sub_100034EB+80j
		mov	dl, [esi+48h]
		test	dl, dl
		jnz	short loc_10003582
		test	al, al
		jz	short loc_10003589

loc_10003582:				; CODE XREF: sub_100034EB+91j
		xor	ecx, ecx
		inc	ecx
		mov	[esp+2Ch+var_18], ecx

loc_10003589:				; CODE XREF: sub_100034EB+95j
		test	dl, dl
		jz	short loc_10003598
		push	edi
		push	ebx
		mov	ecx, esi
		call	sub_10004D52
		jmp	short loc_100035A5
; ---------------------------------------------------------------------------

loc_10003598:				; CODE XREF: sub_100034EB+A0j
		test	al, al
		jz	short loc_100035A9
		push	edi
		push	ebx
		mov	ecx, esi
		call	sub_10004E7B

loc_100035A5:				; CODE XREF: sub_100034EB+ABj
		mov	ecx, [esp+2Ch+var_18]

loc_100035A9:				; CODE XREF: sub_100034EB+AFj
		test	cl, cl
		jz	short loc_100035D2
		call	sub_10002AEF
		cmp	[eax+0Ch], esi
		jnz	short loc_100035CE
		call	sub_10002AEF
		push	esi
		push	dword ptr [eax+8]
		call	libGLESv2_147
		push	eax
		call	libGLESv2_146
		add	esp, 0Ch

loc_100035CE:				; CODE XREF: sub_100034EB+CAj
		mov	al, 1
		jmp	short loc_100035D4
; ---------------------------------------------------------------------------

loc_100035D2:				; CODE XREF: sub_100034EB+50j
					; sub_100034EB+C0j
		xor	al, al

loc_100035D4:				; CODE XREF: sub_100034EB+E5j
		mov	ecx, [esp+2Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
sub_100034EB	endp


; =============== S U B	R O U T	I N E =======================================


sub_100035E7	proc near		; CODE XREF: sub_10003AF2+16p
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_10002E42
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		mov	[eax], eax
		mov	eax, [esi]
		mov	[eax+8], eax
		and	dword ptr [esi+4], 0
		pop	esi
		retn
sub_100035E7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003608	proc near		; CODE XREF: eglCreateContext+E7p

var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+2Ch]
		test	ecx, ecx
		jnz	short loc_1000361F

loc_10003618:				; CODE XREF: sub_10003608+38j
					; sub_10003608+5Bj
		xor	eax, eax
		jmp	loc_100036A5
; ---------------------------------------------------------------------------

loc_1000361F:				; CODE XREF: sub_10003608+Ej
		mov	eax, [ecx]
		push	0
		call	dword ptr [eax+74h]
		test	al, al
		jz	short loc_10003642
		mov	ecx, esi
		call	sub_10004EF1
		test	al, al
		jnz	short loc_10003642
		call	sub_10002AEF
		mov	dword ptr [eax], 300Eh
		jmp	short loc_10003618
; ---------------------------------------------------------------------------

loc_10003642:				; CODE XREF: sub_10003608+20j
					; sub_10003608+2Bj
		cmp	[ebp+arg_4], 2
		jle	short loc_10003665
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+0ACh]
		cmp	eax, 4
		jge	short loc_10003665
		call	sub_10002AEF
		mov	dword ptr [eax], 3005h
		jmp	short loc_10003618
; ---------------------------------------------------------------------------

loc_10003665:				; CODE XREF: sub_10003608+3Ej
					; sub_10003608+4Ej
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	dword ptr [esi+2Ch]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	libGLESv2_144
		add	esp, 14h
		mov	[ebp+var_4], eax
		movzx	eax, byte_1000A038
		lea	ecx, [esi+24h]
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		push	0
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_1000194A
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_100036A5:				; CODE XREF: sub_10003608+12j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	14h
sub_10003608	endp


; =============== S U B	R O U T	I N E =======================================


sub_100036AC	proc near		; CODE XREF: eglCreatePbufferFromClientBuffer+2Fp
					; eglCreatePbufferSurface+23p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		mov	eax, ecx
		xor	ebx, ebx
		push	edi
		push	[esp+1Ch+arg_0]
		mov	ecx, 305Ch
		mov	[esp+20h+var_C], eax
		mov	esi, ecx
		mov	ebp, ecx
		lea	ecx, [eax+14h]
		xor	edi, edi
		call	sub_10003F79
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_8], eax
		test	edx, edx
		jz	loc_100038B6
		mov	ecx, [edx]
		cmp	ecx, 3038h
		jz	loc_100038B6
		add	edx, 4

loc_100036F3:				; CODE XREF: sub_100036AC+B3j
		cmp	ecx, 3081h
		jg	short loc_1000373F
		jz	short loc_1000372F
		sub	ecx, 3056h
		jz	short loc_1000372B
		dec	ecx
		jz	short loc_10003727
		dec	ecx
		jz	short loc_10003753
		sub	ecx, 28h
		jnz	loc_100038B6
		mov	esi, [edx]
		lea	eax, [esi-305Ch]
		cmp	eax, 2
		ja	loc_100038B6
		jmp	short loc_10003753
; ---------------------------------------------------------------------------

loc_10003727:				; CODE XREF: sub_100036AC+5Aj
		mov	edi, [edx]
		jmp	short loc_10003753
; ---------------------------------------------------------------------------

loc_1000372B:				; CODE XREF: sub_100036AC+57j
		mov	ebx, [edx]
		jmp	short loc_10003753
; ---------------------------------------------------------------------------

loc_1000372F:				; CODE XREF: sub_100036AC+4Fj
		mov	ebp, [edx]
		mov	eax, ebp
		sub	eax, 305Ch
		jz	short loc_10003753
		sub	eax, 3
		jmp	short loc_1000374D
; ---------------------------------------------------------------------------

loc_1000373F:				; CODE XREF: sub_100036AC+4Dj
		sub	ecx, 3082h
		jnz	loc_100038A6
		cmp	[edx], ecx

loc_1000374D:				; CODE XREF: sub_100036AC+91j
		jnz	loc_100038B6

loc_10003753:				; CODE XREF: sub_100036AC+5Dj
					; sub_100036AC+79j ...
		mov	ecx, [edx+4]
		add	edx, 8
		cmp	ecx, 3038h
		jnz	short loc_100036F3
		test	edi, edi
		js	loc_10003899
		test	ebx, ebx
		js	loc_10003899
		test	edi, edi
		jz	loc_100038B6
		test	ebx, ebx
		jz	loc_100038B6
		lea	eax, [ecx+24h]
		cmp	esi, eax
		jz	short loc_100037CD
		mov	ecx, [esp+1Ch+var_C]
		mov	ecx, [ecx+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+84h]
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_100037C3
		push	edi
		call	sub_100048C7
		pop	ecx
		test	al, al
		jz	short loc_100037B3
		push	ebx
		call	sub_100048C7
		pop	ecx
		test	al, al
		jnz	short loc_100037C3

loc_100037B3:				; CODE XREF: sub_100036AC+FAj
					; sub_100036AC+11Dj ...
		call	sub_10002AEF
		mov	dword ptr [eax], 3009h
		jmp	loc_100038C1
; ---------------------------------------------------------------------------

loc_100037C3:				; CODE XREF: sub_100036AC+EFj
					; sub_100036AC+105j
		cmp	ebp, 305Ch
		jz	short loc_100037B3
		jmp	short loc_100037D1
; ---------------------------------------------------------------------------

loc_100037CD:				; CODE XREF: sub_100036AC+DAj
		cmp	ebp, eax
		jnz	short loc_100037B3

loc_100037D1:				; CODE XREF: sub_100036AC+11Fj
		mov	eax, [esp+1Ch+var_8]
		test	byte ptr [eax+7Ch], 1
		jz	short loc_100037B3
		cmp	esi, 305Dh
		jnz	short loc_100037ED
		cmp	dword ptr [eax+28h], 1
		jnz	loc_100038B6

loc_100037ED:				; CODE XREF: sub_100036AC+135j
		cmp	esi, 305Eh
		jnz	short loc_100037FF
		cmp	dword ptr [eax+2Ch], 1
		jnz	loc_100038B6

loc_100037FF:				; CODE XREF: sub_100036AC+147j
		mov	eax, [esp+1Ch+var_C]
		push	0
		mov	ecx, [eax+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+74h]
		test	al, al
		jz	short loc_10003822
		mov	ecx, [esp+1Ch+var_C]
		call	sub_10004EF1
		test	al, al
		jz	loc_100038C1

loc_10003822:				; CODE XREF: sub_100036AC+163j
		push	50h		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		test	eax, eax
		jz	short loc_10003849
		mov	ecx, [esp+1Ch+var_8]
		push	ebp
		push	esi
		push	ebx
		mov	ebx, [esp+28h+var_C]
		push	edi
		push	[esp+2Ch+arg_4]
		push	ecx
		push	ebx
		mov	ecx, eax
		call	sub_100026B4
		jmp	short loc_1000384F
; ---------------------------------------------------------------------------

loc_10003849:				; CODE XREF: sub_100036AC+180j
		mov	ebx, [esp+1Ch+var_C]
		xor	eax, eax

loc_1000384F:				; CODE XREF: sub_100036AC+19Bj
		mov	ecx, eax
		mov	[esp+1Ch+arg_0], eax
		call	sub_10004DD0
		test	al, al
		jnz	short loc_1000386E
		mov	ecx, [esp+1Ch+arg_0]
		test	ecx, ecx
		jz	short loc_100038C1
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]
		jmp	short loc_100038C1
; ---------------------------------------------------------------------------

loc_1000386E:				; CODE XREF: sub_100036AC+1B0j
		movzx	eax, byte_1000A038
		lea	ecx, [ebx+0Ch]
		push	eax
		lea	eax, [esp+20h+arg_0]
		push	eax
		push	0
		lea	eax, [esp+28h+var_8]
		push	eax
		call	sub_1000194A
		lea	eax, [esp+1Ch+arg_0]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		jmp	short loc_100038C3
; ---------------------------------------------------------------------------

loc_10003899:				; CODE XREF: sub_100036AC+B7j
					; sub_100036AC+BFj
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		jmp	short loc_100038C1
; ---------------------------------------------------------------------------

loc_100038A6:				; CODE XREF: sub_100036AC+99j
		sub	ecx, 5
		jz	loc_100037B3
		dec	ecx
		jz	loc_100037B3

loc_100038B6:				; CODE XREF: sub_100036AC+30j
					; sub_100036AC+3Ej ...
		call	sub_10002AEF
		mov	dword ptr [eax], 3004h

loc_100038C1:				; CODE XREF: sub_100036AC+112j
					; sub_100036AC+170j ...
		xor	eax, eax

loc_100038C3:				; CODE XREF: sub_100036AC+1EBj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn	0Ch
sub_100036AC	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_100038CD(int, int,	int, int)
sub_100038CD	proc near		; CODE XREF: eglCreateWindowSurface+3Ep

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	[esp+1Ch+arg_4]
		mov	edi, ecx
		lea	ecx, [edi+14h]
		call	sub_10003F79
		and	[esp+1Ch+var_C], 0
		xor	esi, esi
		mov	ecx, [esp+1Ch+arg_8]
		xor	ebx, ebx
		xor	ebp, ebp
		mov	[esp+1Ch+var_8], eax
		test	ecx, ecx
		jz	short loc_10003969
		mov	eax, [ecx]
		mov	edx, 3038h
		cmp	eax, edx
		jz	short loc_10003969
		add	ecx, 4

loc_10003907:				; CODE XREF: sub_100038CD+8Ej
		sub	eax, 3056h
		jz	short loc_10003951
		dec	eax
		jz	short loc_1000394D
		sub	eax, 2Fh
		jz	short loc_10003934
		dec	eax
		jz	short loc_1000398A
		dec	eax
		jz	short loc_1000398A
		sub	eax, 36h
		jz	short loc_1000392C
		sub	eax, 143h
		jnz	short loc_10003940
		mov	ebp, [ecx]
		jmp	short loc_10003953
; ---------------------------------------------------------------------------

loc_1000392C:				; CODE XREF: sub_100038CD+52j
		mov	eax, [ecx]
		mov	[esp+1Ch+var_C], eax
		jmp	short loc_10003953
; ---------------------------------------------------------------------------

loc_10003934:				; CODE XREF: sub_100038CD+47j
		mov	eax, [ecx]
		sub	eax, 3084h
		jz	short loc_10003953
		dec	eax
		jz	short loc_1000398A

loc_10003940:				; CODE XREF: sub_100038CD+59j
		call	sub_10002AEF
		mov	dword ptr [eax], 3004h
		jmp	short loc_10003995
; ---------------------------------------------------------------------------

loc_1000394D:				; CODE XREF: sub_100038CD+42j
		mov	esi, [ecx]
		jmp	short loc_10003953
; ---------------------------------------------------------------------------

loc_10003951:				; CODE XREF: sub_100038CD+3Fj
		mov	ebx, [ecx]

loc_10003953:				; CODE XREF: sub_100038CD+5Dj
					; sub_100038CD+65j ...
		mov	eax, [ecx+4]
		add	ecx, 8
		cmp	eax, edx
		jnz	short loc_10003907
		test	esi, esi
		js	short loc_1000399C
		test	ebx, ebx
		js	short loc_1000399C
		test	ebp, ebp
		jnz	short loc_1000396E

loc_10003969:				; CODE XREF: sub_100038CD+2Aj
					; sub_100038CD+35j
		or	esi, 0FFFFFFFFh
		mov	ebx, esi

loc_1000396E:				; CODE XREF: sub_100038CD+9Aj
		push	[esp+1Ch+arg_0]
		mov	ecx, edi
		call	sub_100044D4
		test	al, al
		jz	short loc_100039A9
		call	sub_10002AEF
		mov	dword ptr [eax], 3003h
		jmp	short loc_10003995
; ---------------------------------------------------------------------------

loc_1000398A:				; CODE XREF: sub_100038CD+4Aj
					; sub_100038CD+4Dj ...
		call	sub_10002AEF
		mov	dword ptr [eax], 3009h

loc_10003995:				; CODE XREF: sub_100038CD+7Ej
					; sub_100038CD+BBj ...
		xor	eax, eax
		jmp	loc_10003A31
; ---------------------------------------------------------------------------

loc_1000399C:				; CODE XREF: sub_100038CD+92j
					; sub_100038CD+96j
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		jmp	short loc_10003995
; ---------------------------------------------------------------------------

loc_100039A9:				; CODE XREF: sub_100038CD+AEj
		mov	ecx, [edi+2Ch]
		push	0
		mov	eax, [ecx]
		call	dword ptr [eax+74h]
		test	al, al
		jz	short loc_100039C2
		mov	ecx, edi
		call	sub_10004EF1
		test	al, al
		jz	short loc_10003995

loc_100039C2:				; CODE XREF: sub_100038CD+E8j
		push	50h		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		test	eax, eax
		jz	short loc_100039E7
		push	[esp+1Ch+var_C]	; int
		mov	ecx, eax	; hData
		push	ebx		; int
		push	esi		; int
		push	ebp		; int
		push	[esp+2Ch+arg_0]	; int
		push	[esp+30h+var_8]	; int
		push	edi		; int
		call	sub_10002631
		jmp	short loc_100039E9
; ---------------------------------------------------------------------------

loc_100039E7:				; CODE XREF: sub_100038CD+FFj
		xor	eax, eax

loc_100039E9:				; CODE XREF: sub_100038CD+118j
		mov	ecx, eax
		mov	[esp+1Ch+arg_4], eax
		call	sub_10004DD0
		test	al, al
		jnz	short loc_10003A08
		mov	ecx, [esp+1Ch+arg_4]
		test	ecx, ecx
		jz	short loc_10003995
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]
		jmp	short loc_10003995
; ---------------------------------------------------------------------------

loc_10003A08:				; CODE XREF: sub_100038CD+129j
		movzx	eax, byte_1000A038
		lea	ecx, [edi+0Ch]
		push	eax
		lea	eax, [esp+20h+arg_4]
		push	eax
		push	0
		lea	eax, [esp+28h+var_8]
		push	eax
		call	sub_1000194A
		lea	eax, [esp+1Ch+arg_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10003A31:				; CODE XREF: sub_100038CD+CAj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn	0Ch
sub_100038CD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003A3B	proc near		; DATA XREF: .rdata:10008280o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	esi
		call	ds:?_Syserror_map@std@@YAPBDH@Z	; std::_Syserror_map(int)
		test	eax, eax
		mov	eax, [esp+8+arg_0]
		pop	ecx
		mov	[eax], esi
		jz	short loc_10003A5B
		mov	dword ptr [eax+4], offset off_1000A004
		jmp	short loc_10003A62
; ---------------------------------------------------------------------------

loc_10003A5B:				; CODE XREF: sub_10003A3B+15j
		mov	dword ptr [eax+4], offset off_1000A00C

loc_10003A62:				; CODE XREF: sub_10003A3B+1Ej
		pop	esi
		retn	8
sub_10003A3B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003A66	proc near		; DATA XREF: .rdata:100081FCo
					; .rdata:10008214o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax], edx
		mov	[eax+4], ecx
		retn	8
sub_10003A66	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003A76	proc near		; CODE XREF: sub_10005529+28p
					; eglDestroyContext+31p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	libGLESv2_145
		pop	ecx
		lea	eax, [esp+4+arg_0]
		push	eax
		lea	ecx, [esi+24h]
		call	sub_10003B41
		pop	esi
		retn	4
sub_10003A76	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003A94	proc near		; CODE XREF: sub_10005529+12p
					; eglDestroySurface+31p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_10003AA5
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_10003AA5:				; CODE XREF: sub_10003A94+9j
		lea	eax, [esp+4+arg_0]
		push	eax
		lea	ecx, [esi+0Ch]
		call	sub_10003B41
		pop	esi
		retn	4
sub_10003A94	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003AB6	proc near		; DATA XREF: .rdata:10008200o
					; .rdata:10008218o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	ecx, [eax+4]
		jnz	short loc_10003ACC
		mov	eax, [eax]
		cmp	eax, [esp+arg_4]
		jnz	short loc_10003ACC
		xor	eax, eax
		inc	eax
		jmp	short locret_10003ACE
; ---------------------------------------------------------------------------

loc_10003ACC:				; CODE XREF: sub_10003AB6+7j
					; sub_10003AB6+Fj
		xor	eax, eax

locret_10003ACE:			; CODE XREF: sub_10003AB6+14j
		retn	8
sub_10003AB6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003AD1	proc near		; DATA XREF: .rdata:10008204o
					; .rdata:1000821Co ...

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	[ebp+arg_4]
		mov	eax, [ecx]
		lea	edx, [ebp+var_8]
		push	[ebp+arg_0]
		push	edx
		call	dword ptr [eax+0Ch]
		mov	ecx, eax
		call	sub_1000285E
		mov	esp, ebp
		pop	ebp
		retn	8
sub_10003AD1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10003AF2(int, void *, int)
sub_10003AF2	proc near		; CODE XREF: sub_10002798+Ep
					; sub_10003B41+39p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		cmp	esi, [eax]
		jnz	short loc_10003B2F
		cmp	[ebp+arg_8], eax
		jnz	short loc_10003B2F
		call	sub_100035E7
		mov	eax, [edi]
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		jmp	short loc_10003B39
; ---------------------------------------------------------------------------

loc_10003B18:				; CODE XREF: sub_10003AF2+40j
		lea	ecx, [ebp+arg_4]
		call	sub_1000287A
		push	esi		; void *
		lea	eax, [ebp+var_4]
		mov	ecx, edi
		push	eax		; int
		call	sub_10003B89
		mov	esi, [ebp+arg_4]

loc_10003B2F:				; CODE XREF: sub_10003AF2+Fj
					; sub_10003AF2+14j
		cmp	esi, [ebp+arg_8]
		jnz	short loc_10003B18
		mov	eax, [ebp+arg_0]
		mov	[eax], esi

loc_10003B39:				; CODE XREF: sub_10003AF2+24j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10003AF2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003B41	proc near		; CODE XREF: sub_10003A76+15p
					; sub_10003A94+19p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		push	[ebp+arg_0]
		lea	eax, [ebp+var_8]
		mov	esi, ecx
		push	eax
		call	sub_10002DD6
		and	[ebp+arg_0], 0
		lea	eax, [ebp+arg_0]
		push	[ebp+arg_0]
		push	eax
		push	[ebp+var_4]
		push	[ebp+var_8]
		call	sub_10001511
		add	esp, 10h
		lea	eax, [ebp+var_4]
		mov	ecx, esi
		push	[ebp+var_4]	; int
		push	[ebp+var_8]	; void *
		push	eax		; int
		call	sub_10003AF2
		mov	eax, [ebp+arg_0]
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	4
sub_10003B41	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10003B89(int, void *)
sub_10003B89	proc near		; CODE XREF: sub_10003AF2+35p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		mov	ebp, ecx
		lea	ecx, [esp+0Ch+arg_4]
		push	edi
		call	sub_1000287A
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10003BA9
		mov	edi, [ebx+8]
		jmp	short loc_10003BC1
; ---------------------------------------------------------------------------

loc_10003BA9:				; CODE XREF: sub_10003B89+19j
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_10003BB6
		mov	edi, ecx
		jmp	short loc_10003BC1
; ---------------------------------------------------------------------------

loc_10003BB6:				; CODE XREF: sub_10003B89+27j
		mov	edx, [esp+10h+arg_4]
		mov	edi, [edx+8]
		cmp	edx, ebx
		jnz	short loc_10003C31

loc_10003BC1:				; CODE XREF: sub_10003B89+1Ej
					; sub_10003B89+2Bj
		cmp	byte ptr [edi+0Dh], 0
		mov	esi, [ebx+4]
		jnz	short loc_10003BCD
		mov	[edi+4], esi

loc_10003BCD:				; CODE XREF: sub_10003B89+3Fj
		mov	eax, [ebp+0]
		cmp	[eax+4], ebx
		jnz	short loc_10003BDA
		mov	[eax+4], edi
		jmp	short loc_10003BE5
; ---------------------------------------------------------------------------

loc_10003BDA:				; CODE XREF: sub_10003B89+4Aj
		cmp	[esi], ebx
		jnz	short loc_10003BE2
		mov	[esi], edi
		jmp	short loc_10003BE5
; ---------------------------------------------------------------------------

loc_10003BE2:				; CODE XREF: sub_10003B89+53j
		mov	[esi+8], edi

loc_10003BE5:				; CODE XREF: sub_10003B89+4Fj
					; sub_10003B89+57j
		mov	edx, [ebp+0]
		cmp	[edx], ebx
		jnz	short loc_10003C08
		cmp	byte ptr [edi+0Dh], 0
		jz	short loc_10003BF6
		mov	eax, esi
		jmp	short loc_10003C06
; ---------------------------------------------------------------------------

loc_10003BF6:				; CODE XREF: sub_10003B89+67j
		mov	ecx, [edi]
		mov	eax, edi
		jmp	short loc_10003C00
; ---------------------------------------------------------------------------

loc_10003BFC:				; CODE XREF: sub_10003B89+7Bj
		mov	eax, ecx
		mov	ecx, [eax]

loc_10003C00:				; CODE XREF: sub_10003B89+71j
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10003BFC

loc_10003C06:				; CODE XREF: sub_10003B89+6Bj
		mov	[edx], eax

loc_10003C08:				; CODE XREF: sub_10003B89+61j
		mov	edx, [ebp+0]
		cmp	[edx+8], ebx
		jnz	short loc_10003C88
		cmp	byte ptr [edi+0Dh], 0
		jz	short loc_10003C1A
		mov	eax, esi
		jmp	short loc_10003C2C
; ---------------------------------------------------------------------------

loc_10003C1A:				; CODE XREF: sub_10003B89+8Bj
		mov	ecx, [edi+8]
		mov	eax, edi
		jmp	short loc_10003C26
; ---------------------------------------------------------------------------

loc_10003C21:				; CODE XREF: sub_10003B89+A1j
		mov	eax, ecx
		mov	ecx, [eax+8]

loc_10003C26:				; CODE XREF: sub_10003B89+96j
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10003C21

loc_10003C2C:				; CODE XREF: sub_10003B89+8Fj
		mov	[edx+8], eax
		jmp	short loc_10003C88
; ---------------------------------------------------------------------------

loc_10003C31:				; CODE XREF: sub_10003B89+36j
		mov	[ecx+4], edx
		mov	eax, [ebx]
		mov	[edx], eax
		cmp	edx, [ebx+8]
		jnz	short loc_10003C41
		mov	esi, edx
		jmp	short loc_10003C5B
; ---------------------------------------------------------------------------

loc_10003C41:				; CODE XREF: sub_10003B89+B2j
		cmp	byte ptr [edi+0Dh], 0
		mov	esi, [edx+4]
		jnz	short loc_10003C4D
		mov	[edi+4], esi

loc_10003C4D:				; CODE XREF: sub_10003B89+BFj
		mov	[esi], edi
		mov	eax, [ebx+8]
		mov	[edx+8], eax
		mov	eax, [ebx+8]
		mov	[eax+4], edx

loc_10003C5B:				; CODE XREF: sub_10003B89+B6j
		mov	eax, [ebp+0]
		cmp	[eax+4], ebx
		jnz	short loc_10003C68
		mov	[eax+4], edx
		jmp	short loc_10003C76
; ---------------------------------------------------------------------------

loc_10003C68:				; CODE XREF: sub_10003B89+D8j
		mov	eax, [ebx+4]
		cmp	[eax], ebx
		jnz	short loc_10003C73
		mov	[eax], edx
		jmp	short loc_10003C76
; ---------------------------------------------------------------------------

loc_10003C73:				; CODE XREF: sub_10003B89+E4j
		mov	[eax+8], edx

loc_10003C76:				; CODE XREF: sub_10003B89+DDj
					; sub_10003B89+E8j
		mov	eax, [ebx+4]
		mov	[edx+4], eax
		mov	al, [ebx+0Ch]
		mov	cl, [edx+0Ch]
		mov	[edx+0Ch], al
		mov	[ebx+0Ch], cl

loc_10003C88:				; CODE XREF: sub_10003B89+85j
					; sub_10003B89+A6j
		cmp	byte ptr [ebx+0Ch], 1
		jnz	loc_10003D92
		jmp	loc_10003D4B
; ---------------------------------------------------------------------------

loc_10003C97:				; CODE XREF: sub_10003B89+1C8j
		cmp	byte ptr [edi+0Ch], 1
		jnz	loc_10003D8E
		mov	ecx, [esi]
		cmp	edi, ecx
		jnz	short loc_10003D13
		mov	ecx, [esi+8]
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_10003CC3
		mov	byte ptr [ecx+0Ch], 1
		mov	ecx, ebp
		push	esi
		mov	byte ptr [esi+0Ch], 0
		call	sub_10002FBA
		mov	ecx, [esi+8]

loc_10003CC3:				; CODE XREF: sub_10003B89+125j
		cmp	byte ptr [ecx+0Dh], 0
		jnz	short loc_10003D46
		mov	eax, [ecx]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10003CDA
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+0Ch], 1
		jz	short loc_10003D42

loc_10003CDA:				; CODE XREF: sub_10003B89+146j
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10003CF8
		mov	eax, [ecx]
		push	ecx
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 0
		mov	ecx, ebp
		call	sub_10003142
		mov	ecx, [esi+8]

loc_10003CF8:				; CODE XREF: sub_10003B89+158j
		mov	al, [esi+0Ch]
		mov	[ecx+0Ch], al
		mov	byte ptr [esi+0Ch], 1
		mov	eax, [ecx+8]
		mov	ecx, ebp
		push	esi
		mov	byte ptr [eax+0Ch], 1
		call	sub_10002FBA
		jmp	short loc_10003D8E
; ---------------------------------------------------------------------------

loc_10003D13:				; CODE XREF: sub_10003B89+11Cj
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_10003D2B
		mov	byte ptr [ecx+0Ch], 1
		mov	ecx, ebp
		push	esi
		mov	byte ptr [esi+0Ch], 0
		call	sub_10003142
		mov	ecx, [esi]

loc_10003D2B:				; CODE XREF: sub_10003B89+18Ej
		cmp	byte ptr [ecx+0Dh], 0
		jnz	short loc_10003D46
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10003D59
		mov	eax, [ecx]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10003D59

loc_10003D42:				; CODE XREF: sub_10003B89+14Fj
		mov	byte ptr [ecx+0Ch], 0

loc_10003D46:				; CODE XREF: sub_10003B89+13Ej
					; sub_10003B89+1A6j
		mov	edi, esi
		mov	esi, [esi+4]

loc_10003D4B:				; CODE XREF: sub_10003B89+109j
		mov	eax, [ebp+0]
		cmp	edi, [eax+4]
		jnz	loc_10003C97
		jmp	short loc_10003D8E
; ---------------------------------------------------------------------------

loc_10003D59:				; CODE XREF: sub_10003B89+1AFj
					; sub_10003B89+1B7j
		mov	eax, [ecx]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10003D76
		mov	eax, [ecx+8]
		push	ecx
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 0
		mov	ecx, ebp
		call	sub_10002FBA
		mov	ecx, [esi]

loc_10003D76:				; CODE XREF: sub_10003B89+1D6j
		mov	al, [esi+0Ch]
		mov	[ecx+0Ch], al
		mov	byte ptr [esi+0Ch], 1
		mov	eax, [ecx]
		mov	ecx, ebp
		push	esi
		mov	byte ptr [eax+0Ch], 1
		call	sub_10003142

loc_10003D8E:				; CODE XREF: sub_10003B89+112j
					; sub_10003B89+188j ...
		mov	byte ptr [edi+0Ch], 1

loc_10003D92:				; CODE XREF: sub_10003B89+103j
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		mov	eax, [ebp+4]
		pop	ecx
		test	eax, eax
		jz	short loc_10003DA4
		dec	eax
		mov	[ebp+4], eax

loc_10003DA4:				; CODE XREF: sub_10003B89+215j
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_4]
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax], ecx
		pop	ebx
		retn	8
sub_10003B89	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003DB5	proc near		; CODE XREF: sub_100033E0+34p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	[ecx+10h], eax
		jnb	short loc_10003DC9
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)

loc_10003DC9:				; CODE XREF: sub_10003DB5+7j
		cmp	dword ptr [ecx+14h], 10h
		mov	[ecx+10h], eax
		jb	short loc_10003DD6
		mov	edx, [ecx]
		jmp	short loc_10003DD8
; ---------------------------------------------------------------------------

loc_10003DD6:				; CODE XREF: sub_10003DB5+1Bj
		mov	edx, ecx

loc_10003DD8:				; CODE XREF: sub_10003DB5+1Fj
		mov	byte ptr [edx+eax], 0
		mov	eax, ecx
		retn	4
sub_10003DB5	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003DE1	proc near		; CODE XREF: sub_100033E0+3Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		push	edi
		mov	edi, [esi+10h]
		cmp	edi, ecx
		jnb	short loc_10003DFB
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)

loc_10003DFB:				; CODE XREF: sub_10003DE1+Dj
		mov	edx, [esp+8+arg_4]
		mov	eax, edi
		sub	eax, ecx
		cmp	eax, edx
		ja	short loc_10003E1C
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], ecx
		jb	short loc_10003E14
		mov	eax, [esi]
		jmp	short loc_10003E16
; ---------------------------------------------------------------------------

loc_10003E14:				; CODE XREF: sub_10003DE1+2Dj
		mov	eax, esi

loc_10003E16:				; CODE XREF: sub_10003DE1+31j
		mov	byte ptr [eax+ecx], 0
		jmp	short loc_10003E5B
; ---------------------------------------------------------------------------

loc_10003E1C:				; CODE XREF: sub_10003DE1+24j
		test	edx, edx
		jz	short loc_10003E5B
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_10003E2A
		mov	eax, [esi]
		jmp	short loc_10003E2C
; ---------------------------------------------------------------------------

loc_10003E2A:				; CODE XREF: sub_10003DE1+43j
		mov	eax, esi

loc_10003E2C:				; CODE XREF: sub_10003DE1+47j
		sub	edi, edx
		push	ebx
		lea	ebx, [eax+ecx]
		mov	eax, edi
		sub	eax, ecx
		jz	short loc_10003E47
		push	eax		; size_t
		lea	eax, [ebx+edx]
		push	eax		; void *
		push	ebx		; void *
		call	ds:memmove
		add	esp, 0Ch

loc_10003E47:				; CODE XREF: sub_10003DE1+55j
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], edi
		pop	ebx
		jb	short loc_10003E55
		mov	eax, [esi]
		jmp	short loc_10003E57
; ---------------------------------------------------------------------------

loc_10003E55:				; CODE XREF: sub_10003DE1+6Ej
		mov	eax, esi

loc_10003E57:				; CODE XREF: sub_10003DE1+72j
		mov	byte ptr [eax+edi], 0

loc_10003E5B:				; CODE XREF: sub_10003DE1+39j
					; sub_10003DE1+3Dj
		pop	edi
		mov	eax, esi
		pop	esi
		retn	8
sub_10003DE1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003E62	proc near		; CODE XREF: sub_100043E8+17p
					; sub_100048F2+12p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		mov	esi, ecx
		push	edi
		call	sub_10002F90
		mov	edx, [esi]
		cmp	eax, edx
		jz	short loc_10003E82
		mov	ecx, [edi]
		mov	[ebp+arg_4], eax
		cmp	ecx, [eax+10h]
		jnb	short loc_10003E85

loc_10003E82:				; CODE XREF: sub_10003E62+14j
		mov	[ebp+arg_4], edx

loc_10003E85:				; CODE XREF: sub_10003E62+1Ej
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+arg_4]
		mov	ecx, [ecx]
		pop	edi
		pop	esi
		mov	[eax], ecx
		pop	ebp
		retn	8
sub_10003E62	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=74h

; int __cdecl sub_10003E95(void	*)
sub_10003E95	proc near		; CODE XREF: sub_1000445D+2Cp

var_C8		= byte ptr -0C8h
var_C4		= byte ptr -0C4h
var_30		= byte ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		lea	ebp, [esp-74h]
		sub	esp, 0C8h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+74h+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+74h+arg_0]
		lea	ecx, [ebp+74h+var_1C]
		xor	ebx, ebx
		push	offset aEgl_ext_client ; "EGL_EXT_client_extensions"
		mov	[ebp+74h+var_28], ebx
		mov	[ebp+74h+var_24], ebx
		mov	[ebp+74h+var_20], ebx
		call	sub_10002375
		lea	eax, [ebp+74h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+74h+var_28]
		call	sub_10004C60
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [ebp+74h+var_1C] ;	void *
		call	sub_10003185
		push	offset aAngle_platform ; "ANGLE_platform_angle"
		lea	ecx, [ebp+74h+var_1C]
		call	sub_10002375
		lea	eax, [ebp+74h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+74h+var_28]
		call	sub_10004C60
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [ebp+74h+var_1C] ;	void *
		call	sub_10003185
		push	offset aAngle_platfo_0 ; "ANGLE_platform_angle_d3d"
		lea	ecx, [ebp+74h+var_1C]
		call	sub_10002375
		lea	eax, [ebp+74h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+74h+var_28]
		call	sub_10004C60
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [ebp+74h+var_1C] ;	void *
		call	sub_10003185
		push	1
		push	2
		lea	ecx, [ebp+74h+var_C8]
		call	sub_100022EF
		lea	eax, [ebp+74h+var_C8]
		push	eax
		push	offset dword_1000836C
		push	[ebp+74h+var_24]
		lea	eax, [ebp+74h+var_30]
		push	[ebp+74h+var_28]
		push	eax
		call	sub_10002207
		add	esp, 14h
		lea	ecx, [ebp+74h+var_C4]
		push	esi		; void *
		call	sub_1000533C
		lea	ecx, [ebp+74h+var_C8]
		call	sub_100029AB
		lea	ecx, [ebp+74h+var_28]
		call	sub_10003220
		mov	ecx, [ebp+74h+var_4]
		mov	eax, esi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		lea	esp, [ebp+74h]
		pop	ebp
		retn
sub_10003E95	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003F79	proc near		; CODE XREF: sub_100036AC+21p
					; sub_100038CD+10p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ecx]
		push	edi
		mov	eax, [esi]
		mov	[ebp+var_4], eax
		cmp	eax, esi
		jz	short loc_10003FA1
		mov	edi, [ebp+arg_0]

loc_10003F8D:				; CODE XREF: sub_10003F79+26j
		cmp	[eax+48h], edi
		jz	short loc_10003FAB
		lea	ecx, [ebp+var_4]
		call	sub_1000287A
		mov	eax, [ebp+var_4]
		cmp	eax, esi
		jnz	short loc_10003F8D

loc_10003FA1:				; CODE XREF: sub_10003F79+Fj
		xor	eax, eax

loc_10003FA3:				; CODE XREF: sub_10003F79+35j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_10003FAB:				; CODE XREF: sub_10003F79+17j
		add	eax, 10h
		jmp	short loc_10003FA3
sub_10003F79	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003FB0	proc near		; DATA XREF: .rdata:1000830Co
		mov	eax, [ecx+4Ch]
		retn
sub_10003FB0	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10003FB4(LPRECT lpRect)
sub_10003FB4	proc near		; CODE XREF: sub_100034EB+49p
					; sub_10004DD0+22p

lpRect		= dword	ptr  4

		push	[esp+lpRect]	; lpRect
		push	dword ptr [ecx]	; hWnd
		call	ds:GetClientRect
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		retn	4
sub_10003FB4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003FC9	proc near		; CODE XREF: eglGetConfigAttrib+24p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		add	ecx, 14h
		call	sub_10003F79
		mov	ecx, [ebp+arg_4]
		add	ecx, 0FFFFCFE0h	; switch 35 cases
		cmp	ecx, 22h
		ja	loc_100040C1	; jumptable 10003FE9 default case
		jmp	ds:off_100040C9[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10003FF0:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+0Ch]	; jumptable 10003FE9 case 12320
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10003FF8:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+20h]	; jumptable 10003FE9 case 12321
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10004000:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+18h]	; jumptable 10003FE9 case 12322
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10004008:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+14h]	; jumptable 10003FE9 case 12323
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10004010:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+10h]	; jumptable 10003FE9 case 12324
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10004018:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+40h]	; jumptable 10003FE9 case 12325
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10004020:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+78h]	; jumptable 10003FE9 case 12326
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10004028:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+34h]	; jumptable 10003FE9 case 12327
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10004030:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+38h]	; jumptable 10003FE9 case 12328
		jmp	loc_100040B8
; ---------------------------------------------------------------------------

loc_10004038:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+44h]	; jumptable 10003FE9 case 12329
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_1000403D:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+60h]	; jumptable 10003FE9 case 12333
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004042:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+68h]	; jumptable 10003FE9 case 12335
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004047:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+74h]	; jumptable 10003FE9 case 12337
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_1000404C:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+70h]	; jumptable 10003FE9 case 12338
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004051:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+7Ch]	; jumptable 10003FE9 case 12339
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004056:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+80h]	; jumptable 10003FE9 case 12340
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_1000405E:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+8Ch]	; jumptable 10003FE9 case 12341
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004066:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+88h]	; jumptable 10003FE9 case 12342
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_1000406E:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+84h]	; jumptable 10003FE9 case 12343
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004076:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+28h]	; jumptable 10003FE9 case 12345
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_1000407B:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+2Ch]	; jumptable 10003FE9 case 12346
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004080:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+5Ch]	; jumptable 10003FE9 case 12347
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004085:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+58h]	; jumptable 10003FE9 case 12348
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_1000408A:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+1Ch]	; jumptable 10003FE9 case 12349
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_1000408F:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+24h]	; jumptable 10003FE9 case 12350
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004094:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+30h]	; jumptable 10003FE9 case 12351
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_10004099:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+6Ch]	; jumptable 10003FE9 case 12352
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_1000409E:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	eax, [ebp+arg_8] ; jumptable 10003FE9 case 12353
		and	dword ptr [eax], 0
		jmp	short loc_100040BD
; ---------------------------------------------------------------------------

loc_100040A6:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+3Ch]	; jumptable 10003FE9 case 12354
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_100040AB:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+4Ch]	; jumptable 10003FE9 case 12332
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_100040B0:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+50h]	; jumptable 10003FE9 case 12330
		jmp	short loc_100040B8
; ---------------------------------------------------------------------------

loc_100040B5:				; CODE XREF: sub_10003FC9+20j
					; DATA XREF: .text:off_100040C9o
		mov	ecx, [eax+54h]	; jumptable 10003FE9 case 12331

loc_100040B8:				; CODE XREF: sub_10003FC9+2Aj
					; sub_10003FC9+32j ...
		mov	eax, [ebp+arg_8]
		mov	[eax], ecx

loc_100040BD:				; CODE XREF: sub_10003FC9+DBj
		mov	al, 1
		jmp	short loc_100040C3
; ---------------------------------------------------------------------------

loc_100040C1:				; CODE XREF: sub_10003FC9+1Aj
					; sub_10003FC9+20j
					; DATA XREF: ...
		xor	al, al		; jumptable 10003FE9 default case

loc_100040C3:				; CODE XREF: sub_10003FC9+F6j
		pop	ebp
		retn	0Ch
sub_10003FC9	endp

; ---------------------------------------------------------------------------
		db 8Bh,	0FFh
off_100040C9	dd offset loc_10003FF0	; DATA XREF: sub_10003FC9+20r
		dd offset loc_10003FF8	; jump table for switch	statement
		dd offset loc_10004000
		dd offset loc_10004008
		dd offset loc_10004010
		dd offset loc_10004018
		dd offset loc_10004020
		dd offset loc_10004028
		dd offset loc_10004030
		dd offset loc_10004038
		dd offset loc_100040B0
		dd offset loc_100040B5
		dd offset loc_100040AB
		dd offset loc_1000403D
		dd offset loc_100040C1
		dd offset loc_10004042
		dd offset loc_100040C1
		dd offset loc_10004047
		dd offset loc_1000404C
		dd offset loc_10004051
		dd offset loc_10004056
		dd offset loc_1000405E
		dd offset loc_10004066
		dd offset loc_1000406E
		dd offset loc_100040C1
		dd offset loc_10004076
		dd offset loc_1000407B
		dd offset loc_10004080
		dd offset loc_10004085
		dd offset loc_1000408A
		dd offset loc_1000408F
		dd offset loc_10004094
		dd offset loc_10004099
		dd offset loc_1000409E
		dd offset loc_100040A6

; =============== S U B	R O U T	I N E =======================================


sub_10004155	proc near		; DATA XREF: .rdata:100082E4o
		mov	eax, [ecx+1Ch]
		mov	eax, [eax+38h]
		retn
sub_10004155	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000415C	proc near		; CODE XREF: eglChooseConfig+47p
					; eglGetConfigs+40p

var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	edi
		lea	ecx, [esp+24h+var_C]
		mov	[esp+24h+var_C], ebx
		mov	[esp+24h+var_8], ebx
		push	dword ptr [esi+4]
		mov	[esp+28h+var_4], ebx
		call	sub_10004D27
		mov	edx, [esi]
		mov	edi, [esp+24h+arg_4]
		mov	eax, [edx]
		mov	[esp+24h+var_14], eax
		cmp	eax, edx
		jz	loc_100042CC
		mov	ebp, 3038h

loc_10004198:				; CODE XREF: sub_1000415C+16Aj
		mov	ecx, [edi]
		cmp	ecx, ebp
		jz	loc_100042A2
		lea	edx, [edi+4]

loc_100041A5:				; CODE XREF: sub_1000415C+140j
		add	ecx, 0FFFFCFE0h	; switch 35 cases
		cmp	ecx, 22h
		ja	loc_10004347	; jumptable 100041B4 default case
		jmp	ds:off_1000435C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100041BB:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+1Ch]	; jumptable 100041B4 case 12320
		jmp	loc_1000428B
; ---------------------------------------------------------------------------

loc_100041C3:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+30h]	; jumptable 100041B4 case 12321
		jmp	loc_1000428B
; ---------------------------------------------------------------------------

loc_100041CB:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+28h]	; jumptable 100041B4 case 12322
		jmp	loc_1000428B
; ---------------------------------------------------------------------------

loc_100041D3:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+24h]	; jumptable 100041B4 case 12323
		jmp	loc_1000428B
; ---------------------------------------------------------------------------

loc_100041DB:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+20h]	; jumptable 100041B4 case 12324
		jmp	loc_1000428B
; ---------------------------------------------------------------------------

loc_100041E3:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+50h]	; jumptable 100041B4 case 12325
		jmp	loc_1000428B
; ---------------------------------------------------------------------------

loc_100041EB:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+88h]	; jumptable 100041B4 case 12326
		jmp	loc_1000428B
; ---------------------------------------------------------------------------

loc_100041F6:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+44h]	; jumptable 100041B4 case 12327

loc_100041F9:				; CODE XREF: sub_1000415C+AAj
					; sub_1000415C+B4j ...
		cmp	ecx, [edx]
		setz	cl
		jmp	loc_10004290
; ---------------------------------------------------------------------------

loc_10004203:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+48h]	; jumptable 100041B4 case 12328
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004208:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+54h]	; jumptable 100041B4 case 12329
		jmp	short loc_1000428B
; ---------------------------------------------------------------------------

loc_1000420D:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+70h]	; jumptable 100041B4 case 12333
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004212:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+78h]	; jumptable 100041B4 case 12335
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004217:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+84h]	; jumptable 100041B4 case 12337
		jmp	short loc_1000428B
; ---------------------------------------------------------------------------

loc_1000421F:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+80h]	; jumptable 100041B4 case 12338
		jmp	short loc_1000428B
; ---------------------------------------------------------------------------

loc_10004227:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+8Ch]	; jumptable 100041B4 case 12339

loc_1000422D:				; CODE XREF: sub_1000415C+11Bj
					; sub_1000415C+120j
		and	ecx, [edx]
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004231:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+90h]	; jumptable 100041B4 case 12340
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004239:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+9Ch]	; jumptable 100041B4 case 12341
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004241:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+98h]	; jumptable 100041B4 case 12342
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004249:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+94h]	; jumptable 100041B4 case 12343
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004251:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+38h]	; jumptable 100041B4 case 12345
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004256:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+3Ch]	; jumptable 100041B4 case 12346
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_1000425B:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+6Ch]	; jumptable 100041B4 case 12347
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004260:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+68h]	; jumptable 100041B4 case 12348
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004265:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+2Ch]	; jumptable 100041B4 case 12349
		jmp	short loc_1000428B
; ---------------------------------------------------------------------------

loc_1000426A:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+34h]	; jumptable 100041B4 case 12350
		jmp	short loc_1000428B
; ---------------------------------------------------------------------------

loc_1000426F:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+40h]	; jumptable 100041B4 case 12351
		jmp	short loc_100041F9
; ---------------------------------------------------------------------------

loc_10004274:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+7Ch]	; jumptable 100041B4 case 12352
		jmp	short loc_1000422D
; ---------------------------------------------------------------------------

loc_10004279:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+4Ch]	; jumptable 100041B4 case 12354
		jmp	short loc_1000422D
; ---------------------------------------------------------------------------

loc_1000427E:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+5Ch]	; jumptable 100041B4 case 12332
		jmp	short loc_1000428B
; ---------------------------------------------------------------------------

loc_10004283:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+60h]	; jumptable 100041B4 case 12330
		jmp	short loc_1000428B
; ---------------------------------------------------------------------------

loc_10004288:				; CODE XREF: sub_1000415C+58j
					; DATA XREF: .text:off_1000435Co
		mov	ecx, [eax+64h]	; jumptable 100041B4 case 12331

loc_1000428B:				; CODE XREF: sub_1000415C+62j
					; sub_1000415C+6Aj ...
		cmp	ecx, [edx]
		setnl	cl

loc_10004290:				; CODE XREF: sub_1000415C+A2j
		test	cl, cl
		jz	short loc_100042B7 ; jumptable 100041B4	case 12353
		mov	ecx, [edx+4]
		add	edx, 8
		cmp	ecx, ebp
		jnz	loc_100041A5

loc_100042A2:				; CODE XREF: sub_1000415C+40j
		add	eax, 10h
		lea	ecx, [esp+24h+var_C]
		mov	[esp+24h+arg_4], eax
		lea	eax, [esp+24h+arg_4]
		push	eax
		call	sub_10004C0E

loc_100042B7:				; CODE XREF: sub_1000415C+58j
					; sub_1000415C+136j
					; DATA XREF: ...
		lea	ecx, [esp+24h+var_14] ;	jumptable 100041B4 case	12353
		call	sub_1000287A
		mov	eax, [esp+24h+var_14]
		cmp	eax, [esi]
		jnz	loc_10004198

loc_100042CC:				; CODE XREF: sub_1000415C+31j
		mov	esi, [esp+24h+arg_0]
		test	esi, esi
		jz	short loc_10004334
		push	edi
		lea	ecx, [esp+28h+var_14]
		mov	[esp+28h+var_14], ebx
		mov	[esp+28h+var_10], bl
		call	sub_10004F8A
		mov	eax, [esp+24h+var_14]
		mov	edi, [esp+24h+var_8]
		mov	ebp, [esp+24h+var_C]
		push	ecx		; int
		push	ecx		; int
		mov	ecx, esp	; int
		push	edi		; int
		push	ebp		; void *
		mov	[ecx], eax
		mov	al, [esp+34h+var_10]
		mov	[ecx+4], al
		call	sub_1000226B
		add	esp, 10h
		cmp	[esp+24h+arg_8], ebx
		jle	short loc_1000432C
		sub	edi, ebp
		sar	edi, 2
		sub	ebp, esi

loc_10004316:				; CODE XREF: sub_1000415C+1CEj
		cmp	ebx, edi
		jge	short loc_1000432C
		mov	eax, [esi+ebp]
		inc	ebx
		mov	eax, [eax+38h]
		mov	[esi], eax
		add	esi, 4
		cmp	ebx, [esp+24h+arg_8]
		jl	short loc_10004316

loc_1000432C:				; CODE XREF: sub_1000415C+1B1j
					; sub_1000415C+1BCj
		mov	eax, [esp+24h+arg_C]
		mov	[eax], ebx
		jmp	short loc_10004345
; ---------------------------------------------------------------------------

loc_10004334:				; CODE XREF: sub_1000415C+176j
		mov	ecx, [esp+24h+var_8]
		mov	eax, [esp+24h+arg_C]
		sub	ecx, [esp+24h+var_C]
		sar	ecx, 2
		mov	[eax], ecx

loc_10004345:				; CODE XREF: sub_1000415C+1D6j
		mov	bl, 1

loc_10004347:				; CODE XREF: sub_1000415C+52j
					; sub_1000415C+58j
					; DATA XREF: ...
		lea	ecx, [esp+24h+var_C] ; jumptable 100041B4 default case
		call	unknown_libname_2 ; Microsoft VisualC 2-11/net runtime
		pop	edi
		pop	esi
		pop	ebp
		mov	al, bl
		pop	ebx
		add	esp, 14h
		retn	10h
sub_1000415C	endp

; ---------------------------------------------------------------------------
off_1000435C	dd offset loc_100041BB	; DATA XREF: sub_1000415C+58r
		dd offset loc_100041C3	; jump table for switch	statement
		dd offset loc_100041CB
		dd offset loc_100041D3
		dd offset loc_100041DB
		dd offset loc_100041E3
		dd offset loc_100041EB
		dd offset loc_100041F6
		dd offset loc_10004203
		dd offset loc_10004208
		dd offset loc_10004283
		dd offset loc_10004288
		dd offset loc_1000427E
		dd offset loc_1000420D
		dd offset loc_10004347
		dd offset loc_10004212
		dd offset loc_10004347
		dd offset loc_10004217
		dd offset loc_1000421F
		dd offset loc_10004227
		dd offset loc_10004231
		dd offset loc_10004239
		dd offset loc_10004241
		dd offset loc_10004249
		dd offset loc_10004347
		dd offset loc_10004251
		dd offset loc_10004256
		dd offset loc_1000425B
		dd offset loc_10004260
		dd offset loc_10004265
		dd offset loc_1000426A
		dd offset loc_1000426F
		dd offset loc_10004274
		dd offset loc_100042B7
		dd offset loc_10004279

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100043E8	proc near		; CODE XREF: eglGetDisplay+9p
					; eglGetPlatformDisplayEXT+9Dp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		call	sub_10002B04
		mov	esi, eax
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		mov	ecx, esi
		push	eax
		call	sub_10003E62
		mov	eax, [eax]
		cmp	eax, [esi]
		jz	short loc_1000440F
		mov	eax, [eax+14h]
		jmp	short loc_10004458
; ---------------------------------------------------------------------------

loc_1000440F:				; CODE XREF: sub_100043E8+20j
		push	ebx
		push	edi
		push	60h		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, [ebp+arg_0]
		pop	ecx
		test	eax, eax
		jz	short loc_1000442F
		push	[ebp+arg_4]
		mov	ecx, eax
		push	ebx
		call	sub_100025CC
		mov	edi, eax
		jmp	short loc_10004431
; ---------------------------------------------------------------------------

loc_1000442F:				; CODE XREF: sub_100043E8+36j
		xor	edi, edi

loc_10004431:				; CODE XREF: sub_100043E8+45j
		lea	eax, [ebp+var_8]
		mov	[ebp+var_8], ebx
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], edi
		call	sub_1000149B
		push	eax		; void *
		add	eax, 10h
		mov	ecx, esi
		push	eax		; int
		push	0		; int
		lea	eax, [ebp+var_8]
		push	eax		; int
		call	sub_10001893
		mov	eax, edi
		pop	edi
		pop	ebx

loc_10004458:				; CODE XREF: sub_100043E8+25j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_100043E8	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000445D	proc near		; CODE XREF: eglQueryString+53p

var_8		= dword	ptr -8
arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10004471
		add	eax, 30h
		cmp	dword ptr [eax+14h], 10h
		jb	short locret_100044AD
		mov	eax, [eax]
		retn
; ---------------------------------------------------------------------------

loc_10004471:				; CODE XREF: sub_1000445D+6j
		mov	eax, dword_1000A068
		push	esi
		mov	esi, offset dword_1000A050
		test	al, 1
		jnz	short loc_1000449B
		or	eax, 1
		push	esi		; void *
		mov	dword_1000A068,	eax
		call	sub_10003E95
		mov	[esp+8+var_8], offset sub_1000705B ; _onexit_t
		call	sub_100065CF
		pop	ecx

loc_1000449B:				; CODE XREF: sub_1000445D+21j
		cmp	dword_1000A064,	10h
		jb	short loc_100044AA
		mov	esi, dword_1000A050

loc_100044AA:				; CODE XREF: sub_1000445D+45j
		mov	eax, esi
		pop	esi

locret_100044AD:			; CODE XREF: sub_1000445D+Fj
		retn
sub_1000445D	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044AE	proc near		; DATA XREF: .rdata:10008304o
		mov	eax, [ecx+1Ch]
		mov	eax, [eax]
		retn
sub_100044AE	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044B4	proc near		; DATA XREF: .rdata:100082ECo
		mov	eax, [ecx+20h]
		retn
sub_100044B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044B8	proc near		; DATA XREF: .rdata:100082F0o
		mov	eax, [ecx+28h]
		retn
sub_100044B8	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044BC	proc near		; DATA XREF: .rdata:100082F4o
		mov	eax, [ecx+2Ch]
		retn
sub_100044BC	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044C0	proc near		; DATA XREF: .rdata:100082F8o
		mov	eax, [ecx+30h]
		retn
sub_100044C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044C4	proc near		; DATA XREF: .rdata:100082E0o
		mov	eax, [ecx+10h]
		retn
sub_100044C4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044C8	proc near		; DATA XREF: .rdata:100082FCo
		mov	eax, [ecx+34h]
		retn
sub_100044C8	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044CC	proc near		; DATA XREF: .rdata:10008300o
		mov	eax, [ecx+38h]
		retn
sub_100044CC	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044D0	proc near		; DATA XREF: .rdata:100082E8o
		mov	eax, [ecx+24h]
		retn
sub_100044D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100044D4	proc near		; CODE XREF: sub_100038CD+A7p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ecx+0Ch]
		push	edi
		mov	eax, [esi]
		mov	[ebp+var_4], eax
		cmp	eax, esi
		jz	short loc_10004500
		mov	edi, [ebp+arg_0]

loc_100044E9:				; CODE XREF: sub_100044D4+2Aj
		mov	eax, [eax+10h]
		cmp	[eax+14h], edi
		jz	short loc_1000450A
		lea	ecx, [ebp+var_4]
		call	sub_1000287A
		mov	eax, [ebp+var_4]
		cmp	eax, esi
		jnz	short loc_100044E9

loc_10004500:				; CODE XREF: sub_100044D4+10j
		xor	al, al

loc_10004502:				; CODE XREF: sub_100044D4+38j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_1000450A:				; CODE XREF: sub_100044D4+1Bj
		mov	al, 1
		jmp	short loc_10004502
sub_100044D4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=78h

sub_1000450E	proc near		; CODE XREF: sub_1000471B:loc_1000487Dp

var_C8		= byte ptr -0C8h
var_C4		= byte ptr -0C4h
var_30		= byte ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-78h]
		sub	esp, 0C8h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+78h+var_4], eax
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		push	offset aEgl_ext_create ; "EGL_EXT_create_context_robustness"
		lea	ecx, [ebp+78h+var_1C]
		mov	[ebp+78h+var_28], edi
		mov	[ebp+78h+var_24], edi
		mov	[ebp+78h+var_20], edi
		call	sub_10002375
		lea	eax, [ebp+78h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+78h+var_28]
		call	sub_10004C60
		xor	ebx, ebx
		lea	ecx, [ebp+78h+var_1C] ;	void *
		push	edi		; size_t
		inc	ebx
		push	ebx		; char
		call	sub_10003185
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+0A4h]
		test	al, al
		jz	short loc_100045AE
		push	offset aEgl_angle_d3d_ ; "EGL_ANGLE_d3d_share_handle_client_buffe"...
		lea	ecx, [ebp+78h+var_1C]
		call	sub_10002375
		lea	eax, [ebp+78h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+78h+var_28]
		call	sub_10004C60
		push	edi		; size_t
		push	ebx		; char
		lea	ecx, [ebp+78h+var_1C] ;	void *
		call	sub_10003185
		push	offset aEgl_angle_surf ; "EGL_ANGLE_surface_d3d_texture_2d_share_"...
		lea	ecx, [ebp+78h+var_1C]
		call	sub_10002375
		lea	eax, [ebp+78h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+78h+var_28]
		call	sub_10004C60
		push	edi		; size_t
		push	ebx		; char
		lea	ecx, [ebp+78h+var_1C] ;	void *
		call	sub_10003185

loc_100045AE:				; CODE XREF: sub_1000450E+58j
		push	offset aEgl_angle_quer ; "EGL_ANGLE_query_surface_pointer"
		lea	ecx, [ebp+78h+var_1C]
		call	sub_10002375
		lea	eax, [ebp+78h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+78h+var_28]
		call	sub_10004C60
		push	edi		; size_t
		push	ebx		; char
		lea	ecx, [ebp+78h+var_1C] ;	void *
		call	sub_10003185
		push	offset aEgl_angle_wind ; "EGL_ANGLE_window_fixed_size"
		lea	ecx, [ebp+78h+var_1C]
		call	sub_10002375
		lea	eax, [ebp+78h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+78h+var_28]
		call	sub_10004C60
		push	edi		; size_t
		push	ebx		; char
		lea	ecx, [ebp+78h+var_1C] ;	void *
		call	sub_10003185
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+0A8h]
		test	al, al
		jz	short loc_10004626
		push	offset aEgl_nv_post_su ; "EGL_NV_post_sub_buffer"
		lea	ecx, [ebp+78h+var_1C]
		call	sub_10002375
		lea	eax, [ebp+78h+var_1C]
		push	eax		; void *
		lea	ecx, [ebp+78h+var_28]
		call	sub_10004C60
		push	edi		; size_t
		push	ebx		; char
		lea	ecx, [ebp+78h+var_1C] ;	void *
		call	sub_10003185

loc_10004626:				; CODE XREF: sub_1000450E+F3j
		push	ebx
		push	2
		lea	ecx, [ebp+78h+var_C8]
		call	sub_100022EF
		lea	eax, [ebp+78h+var_C8]
		push	eax
		push	offset dword_1000836C
		push	[ebp+78h+var_24]
		lea	eax, [ebp+78h+var_30]
		push	[ebp+78h+var_28]
		push	eax
		call	sub_10002207
		add	esp, 14h
		lea	eax, [ebp+78h+var_1C]
		lea	ecx, [ebp+78h+var_C4]
		push	eax		; void *
		call	sub_1000533C
		lea	eax, [ebp+78h+var_1C]
		push	eax		; void *
		lea	ecx, [esi+30h]	; void *
		call	sub_10002813
		push	edi		; size_t
		push	ebx		; char
		lea	ecx, [ebp+78h+var_1C] ;	void *
		call	sub_10003185
		lea	ecx, [ebp+78h+var_C8]
		call	sub_100029AB
		lea	ecx, [ebp+78h+var_28]
		call	sub_10003220
		mov	ecx, [ebp+78h+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		lea	esp, [ebp+78h]
		pop	ebp
		retn
sub_1000450E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004690	proc near		; CODE XREF: sub_1000471B+169p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
DstBuf		= byte ptr -44h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		push	edi
		mov	ebx, offset aGoogleInc_	; "Google Inc."
		mov	esi, ecx
		push	ebx
		call	sub_10004951
		pop	ecx
		push	eax		; size_t
		push	ebx		; void *
		lea	ecx, [esi+48h]
		call	sub_10003473
		and	[ebp+var_4C], 0
		and	[ebp+var_48], 0
		mov	ecx, [esi+2Ch]
		test	ecx, ecx
		jz	short loc_1000470A
		mov	eax, [ecx]
		lea	edx, [ebp+var_4C]
		push	edx
		call	dword ptr [eax+138h]
		test	al, al
		jz	short loc_1000470A
		push	[ebp+var_4C]
		lea	eax, [ebp+DstBuf]
		push	[ebp+var_48]
		push	offset Format	; " (adapter LUID: %08x%08x)"
		push	40h		; SizeInBytes
		push	eax		; DstBuf
		call	ds:sprintf_s
		lea	eax, [ebp+DstBuf]
		push	eax
		call	sub_10004951
		add	esp, 18h
		lea	ecx, [esi+48h]	; int
		push	eax		; size_t
		lea	eax, [ebp+DstBuf]
		push	eax		; void *
		call	sub_10003343

loc_1000470A:				; CODE XREF: sub_10004690+38j
					; sub_10004690+48j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10004690	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000471B	proc near		; CODE XREF: eglInitialize:loc_10005DDEp

var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A0		= dword	ptr -0A0h
var_90		= byte ptr -90h
var_58		= dword	ptr -58h

		sub	esp, 0C0h
		push	ebx
		push	ebp
		push	esi
		mov	ebx, ecx
		push	edi
		mov	[esp+0D0h+var_B4], ebx
		call	sub_100048B5
		test	al, al
		jz	short loc_1000473B
		mov	al, 1
		jmp	loc_1000489B
; ---------------------------------------------------------------------------

loc_1000473B:				; CODE XREF: sub_1000471B+17j
		push	dword ptr [ebx+8]
		push	dword ptr [ebx+4]
		push	ebx
		call	libGLESv2_177
		mov	ecx, eax
		add	esp, 0Ch
		mov	[ebx+2Ch], ecx
		test	ecx, ecx
		jnz	short loc_1000476C
		mov	ecx, ebx
		call	sub_10005529
		call	sub_10002AEF
		mov	dword ptr [eax], 3001h
		xor	al, al
		jmp	loc_1000489B
; ---------------------------------------------------------------------------

loc_1000476C:				; CODE XREF: sub_1000471B+36j
		mov	eax, [ecx]
		call	dword ptr [eax+0B0h]
		mov	ecx, [ebx+2Ch]
		mov	edi, eax
		mov	[esp+0D0h+var_B8], edi
		mov	edx, [ecx]
		call	dword ptr [edx+0B4h]
		mov	ecx, [ebx+2Ch]
		mov	[esp+0D0h+var_AC], eax
		mov	edx, [ecx]
		call	dword ptr [edx+7Ch]
		mov	ecx, [ebx+2Ch]
		mov	esi, [eax+0Ch]
		lea	eax, [esp+0D0h+var_BC]
		mov	edx, [ecx]
		push	eax
		mov	[esp+0D4h+var_A8], esi
		call	dword ptr [edx+0Ch]
		mov	ebp, eax
		lea	ecx, [esp+0D0h+var_A0]
		mov	[esp+0D0h+var_C0], ebp
		call	sub_10002599
		xor	eax, eax
		mov	[esp+0D0h+var_B0], eax
		test	ebp, ebp
		jle	short loc_100047F6
		mov	ebx, [esp+0D0h+var_C0]
		mov	ebp, eax

loc_100047C4:				; CODE XREF: sub_1000471B+D5j
		push	esi
		push	esi
		push	[esp+0D8h+var_AC]
		mov	esi, [esp+0DCh+var_BC]
		lea	ecx, [esp+0DCh+var_A0]
		push	edi
		sub	esp, 10h
		mov	edi, esp
		lea	esi, [esi+ebp]
		movsd
		movsd
		movsd
		movsd
		call	sub_10003246
		mov	esi, [esp+0D0h+var_A8]
		lea	ebp, [ebp+10h]
		mov	edi, [esp+0D0h+var_B8]
		dec	ebx
		jnz	short loc_100047C4
		mov	ebx, [esp+0D0h+var_B4]

loc_100047F6:				; CODE XREF: sub_1000471B+A1j
		mov	ecx, [esp+0D0h+var_A0]
		xor	ebp, ebp
		inc	ebp
		mov	eax, [ecx]
		mov	[esp+0D0h+var_C0], eax
		cmp	eax, ecx
		jz	short loc_10004858
		lea	edx, [ebx+14h]
		mov	[esp+0D0h+var_B8], edx

loc_1000480E:				; CODE XREF: sub_1000471B+137j
		push	24h
		lea	esi, [eax+10h]
		movzx	eax, byte_1000A038
		pop	ecx
		push	eax
		lea	eax, [esp+0D4h+var_90]
		push	eax
		lea	edi, [esp+0D8h+var_90]
		rep movsd
		push	0
		lea	eax, [esp+0DCh+var_A8]
		mov	[esp+0DCh+var_58], ebp
		push	eax
		mov	ecx, edx
		inc	ebp
		call	sub_100019FD
		lea	ecx, [esp+0D0h+var_C0]
		call	sub_1000287A
		mov	eax, [esp+0D0h+var_C0]
		mov	edx, [esp+0D0h+var_B8]
		cmp	eax, [esp+0D0h+var_A0]
		jnz	short loc_1000480E
		mov	ebx, [esp+0D0h+var_B4]

loc_10004858:				; CODE XREF: sub_1000471B+EAj
		mov	ecx, [ebx+2Ch]
		push	[esp+0D0h+var_BC]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		and	[esp+0D0h+var_BC], 0
		mov	ecx, ebx
		call	sub_100048B5
		mov	ecx, ebx
		test	al, al
		jnz	short loc_1000487D
		call	sub_10005529
		jmp	short loc_1000488E
; ---------------------------------------------------------------------------

loc_1000487D:				; CODE XREF: sub_1000471B+159j
		call	sub_1000450E
		mov	ecx, ebx
		call	sub_10004690
		mov	byte ptr [esp+0D0h+var_B0], 1

loc_1000488E:				; CODE XREF: sub_1000471B+160j
		lea	ecx, [esp+0D0h+var_A0]
		call	sub_10002798
		mov	al, byte ptr [esp+0D0h+var_B0]

loc_1000489B:				; CODE XREF: sub_1000471B+1Bj
					; sub_1000471B+4Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0C0h
		retn
sub_1000471B	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048A6	proc near		; CODE XREF: sub_100034EB+38p
		push	dword ptr [ecx]	; hWnd
		call	ds:IsIconic
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
sub_100048A6	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048B5	proc near		; CODE XREF: sub_1000471B+10p
					; sub_1000471B+150p ...
		xor	eax, eax
		cmp	[ecx+2Ch], eax
		jz	short locret_100048C2
		cmp	[ecx+18h], eax
		jbe	short locret_100048C2
		inc	eax

locret_100048C2:			; CODE XREF: sub_100048B5+5j
					; sub_100048B5+Aj
		retn
sub_100048B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048C3	proc near		; DATA XREF: .rdata:100082DCo
		mov	eax, [ecx+40h]
		retn
sub_100048C3	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048C7	proc near		; CODE XREF: sub_100036AC+F2p
					; sub_100036AC+FDp

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		lea	eax, [ecx-1]
		test	ecx, eax
		jnz	short loc_100048DA
		test	ecx, ecx
		jz	short loc_100048DA
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_100048DA:				; CODE XREF: sub_100048C7+9j
					; sub_100048C7+Dj
		xor	eax, eax
		retn
sub_100048C7	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048DD	proc near		; CODE XREF: sub_1000560A+19p

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		add	ecx, 14h
		call	sub_10003F79
		neg	eax
		sbb	eax, eax
		neg	eax
		retn	4
sub_100048DD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100048F2	proc near		; CODE XREF: sub_1000563C+19p

var_4		= byte ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	eax, [ebp+arg_0]
		push	eax
		lea	esi, [ecx+24h]
		lea	eax, [ebp+var_4]
		mov	ecx, esi
		push	eax
		call	sub_10003E62
		mov	ecx, [eax]
		xor	eax, eax
		cmp	ecx, [esi]
		pop	esi
		setnz	al
		mov	esp, ebp
		pop	ebp
		retn	4
sub_100048F2	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10004919(HWND	hWnd)
sub_10004919	proc near		; CODE XREF: eglCreateWindowSurface+1Bp

hWnd		= dword	ptr  4

		push	[esp+hWnd]	; hWnd
		call	ds:IsWindow
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
sub_10004919	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000492A	proc near		; CODE XREF: sub_1000569D+19p

var_4		= byte ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	eax, [ebp+arg_0]
		push	eax
		lea	esi, [ecx+0Ch]
		lea	eax, [ebp+var_4]
		mov	ecx, esi
		push	eax
		call	sub_10003E62
		mov	ecx, [eax]
		xor	eax, eax
		cmp	ecx, [esi]
		pop	esi
		setnz	al
		mov	esp, ebp
		pop	ebp
		retn	4
sub_1000492A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004951	proc near		; CODE XREF: sub_100011AF+Dp
					; sub_10002375+15p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	byte ptr [eax],	0
		jnz	short loc_1000495D
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000495D:				; CODE XREF: sub_10004951+7j
		lea	edx, [eax+1]

loc_10004960:				; CODE XREF: sub_10004951+14j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10004960
		sub	eax, edx
		retn
sub_10004951	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000496A	proc near		; CODE XREF: sub_1000498F+1Ep
					; DATA XREF: .rdata:10008210o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		call	ds:?_Syserror_map@std@@YAPBDH@Z	; std::_Syserror_map(int)
		pop	ecx
		test	eax, eax
		jnz	short loc_1000497E
		mov	eax, offset aUnknownError ; "unknown error"

loc_1000497E:				; CODE XREF: sub_1000496A+Dj
		mov	ecx, [esp+arg_0]
		push	eax		; void *
		call	sub_10002375
		mov	eax, [esp+arg_0]
		retn	8
sub_1000496A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000498F	proc near		; DATA XREF: .rdata:10008240o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 1
		jnz	short loc_100049A7
		mov	ecx, [ebp+arg_0]
		push	offset aIostreamStream ; "iostream stream error"
		call	sub_10002375
		jmp	short loc_100049B2
; ---------------------------------------------------------------------------

loc_100049A7:				; CODE XREF: sub_1000498F+7j
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000496A

loc_100049B2:				; CODE XREF: sub_1000498F+16j
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn	8
sub_1000498F	endp


; =============== S U B	R O U T	I N E =======================================


sub_100049B9	proc near		; DATA XREF: .rdata:1000827Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		call	ds:?_Winerror_map@std@@YAPBDH@Z	; std::_Winerror_map(int)
		pop	ecx
		test	eax, eax
		jnz	short loc_100049CD
		mov	eax, offset aUnknownError ; "unknown error"

loc_100049CD:				; CODE XREF: sub_100049B9+Dj
		mov	ecx, [esp+arg_0]
		push	eax		; void *
		call	sub_10002375
		mov	eax, [esp+arg_0]
		retn	8
sub_100049B9	endp


; =============== S U B	R O U T	I N E =======================================


sub_100049DE	proc near		; DATA XREF: .rdata:1000820Co
		mov	eax, offset aGeneric ; "generic"
		retn
sub_100049DE	endp


; =============== S U B	R O U T	I N E =======================================


sub_100049E4	proc near		; DATA XREF: .rdata:1000823Co
		mov	eax, offset aIostream ;	"iostream"
		retn
sub_100049E4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100049EA	proc near		; DATA XREF: .rdata:10008278o
		mov	eax, offset aSystem ; "system"
		retn
sub_100049EA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100049F0	proc near		; DATA XREF: .rdata:off_100082D0o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	edx, [esi+24h]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		cmp	eax, edx
		jz	short loc_10004A1B

loc_10004A03:				; CODE XREF: sub_100049F0+29j
		mov	ecx, [eax+10h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		lea	ecx, [ebp+var_4]
		call	sub_1000287A
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+24h]
		jnz	short loc_10004A03

loc_10004A1B:				; CODE XREF: sub_100049F0+11j
		call	sub_10002AEF
		pop	esi
		mov	dword ptr [eax], 300Eh
		mov	esp, ebp
		pop	ebp
		retn
sub_100049F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004A2B	proc near		; DATA XREF: .rdata:100082A0o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	esi
		mov	esi, ecx
		test	byte ptr [esi+3Ch], 2
		jz	short loc_10004A3D
		or	eax, 0FFFFFFFFh
		jmp	loc_10004BBD
; ---------------------------------------------------------------------------

loc_10004A3D:				; CODE XREF: sub_10004A2B+8j
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_10004A4E
		xor	eax, eax
		jmp	loc_10004BBC
; ---------------------------------------------------------------------------

loc_10004A4E:				; CODE XREF: sub_10004A2B+1Aj
		test	byte ptr [esi+3Ch], 8
		push	edi
		jz	short loc_10004A74
		mov	edi, [esi+20h]
		cmp	dword ptr [edi], 0
		jz	short loc_10004A74
		mov	edx, [esi+38h]
		cmp	[edi], edx
		jnb	short loc_10004A74
		mov	eax, [esi+30h]
		mov	ecx, [eax]
		add	ecx, [edi]
		mov	[edi], edx
		sub	ecx, edx
		mov	eax, [esi+30h]
		mov	[eax], ecx

loc_10004A74:				; CODE XREF: sub_10004A2B+28j
					; sub_10004A2B+30j ...
		mov	eax, [esi+20h]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_10004A9D
		mov	ecx, [esi+30h]
		mov	ecx, [ecx]
		add	ecx, edx
		cmp	edx, ecx
		jnb	short loc_10004A99
		mov	ecx, esi
		call	ds:?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
		mov	[eax], bl
		mov	eax, ebx
		jmp	loc_10004BBB
; ---------------------------------------------------------------------------

loc_10004A99:				; CODE XREF: sub_10004A2B+5Bj
		test	edx, edx
		jnz	short loc_10004AA1

loc_10004A9D:				; CODE XREF: sub_10004A2B+50j
		xor	ebx, ebx
		jmp	short loc_10004AAD
; ---------------------------------------------------------------------------

loc_10004AA1:				; CODE XREF: sub_10004A2B+70j
		mov	eax, [esi+30h]
		mov	ecx, [esi+0Ch]
		mov	ebx, [eax]
		sub	ebx, [ecx]
		add	ebx, edx

loc_10004AAD:				; CODE XREF: sub_10004A2B+74j
		mov	eax, ebx
		push	20h
		shr	eax, 1
		pop	ecx
		cmp	eax, ecx
		jb	short loc_10004ABE
		mov	ecx, eax
		test	ecx, ecx
		jz	short loc_10004AD1

loc_10004ABE:				; CODE XREF: sub_10004A2B+8Bj
					; sub_10004A2B+A0j
		mov	eax, 7FFFFFFFh
		sub	eax, ecx
		cmp	eax, ebx
		jnb	short loc_10004ACD
		shr	ecx, 1
		jnz	short loc_10004ABE

loc_10004ACD:				; CODE XREF: sub_10004A2B+9Cj
		test	ecx, ecx
		jnz	short loc_10004AD9

loc_10004AD1:				; CODE XREF: sub_10004A2B+91j
		or	eax, 0FFFFFFFFh
		jmp	loc_10004BBB
; ---------------------------------------------------------------------------

loc_10004AD9:				; CODE XREF: sub_10004A2B+A4j
		push	ebp
		lea	eax, [ecx+ebx]
		push	0
		push	eax
		mov	[esp+1Ch+var_4], eax
		call	sub_1000138C
		mov	edi, eax
		pop	ecx
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	ebp, [ecx]
		test	ebx, ebx
		jz	short loc_10004B05
		push	ebx		; size_t
		push	ebp		; void *
		push	edi		; void *
		call	memcpy
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_10004B36

loc_10004B05:				; CODE XREF: sub_10004A2B+C9j
		mov	eax, [esi+10h]
		mov	edx, [esp+14h+var_4]
		mov	[esi+38h], edi
		mov	[eax], edi
		mov	eax, [esi+20h]
		mov	[eax], edi
		mov	eax, [esi+30h]
		mov	[eax], edx
		mov	eax, [esi+0Ch]
		test	byte ptr [esi+3Ch], 4
		mov	[eax], edi
		mov	eax, [esi+1Ch]
		jnz	short loc_10004B6F
		mov	[eax], edi
		mov	eax, [esi+2Ch]
		mov	dword ptr [eax], 1
		jmp	short loc_10004B99
; ---------------------------------------------------------------------------

loc_10004B36:				; CODE XREF: sub_10004A2B+D8j
		mov	ecx, [esi+10h]
		mov	eax, edi
		sub	eax, ebp
		add	[esi+38h], eax
		mov	eax, [esi+20h]
		mov	edx, [eax]
		mov	eax, edi
		sub	eax, ebp
		sub	edx, ebp
		add	[ecx], eax
		add	edx, edi
		mov	eax, [esi+20h]
		mov	ecx, edi
		sub	ecx, edx
		add	ecx, [esp+14h+var_4]
		mov	[eax], edx
		mov	eax, [esi+30h]
		mov	[eax], ecx
		test	byte ptr [esi+3Ch], 4
		jz	short loc_10004B79
		mov	eax, [esi+0Ch]
		mov	[eax], edi
		mov	eax, [esi+1Ch]

loc_10004B6F:				; CODE XREF: sub_10004A2B+FCj
		and	dword ptr [eax], 0
		mov	eax, [esi+2Ch]
		mov	[eax], edi
		jmp	short loc_10004B99
; ---------------------------------------------------------------------------

loc_10004B79:				; CODE XREF: sub_10004A2B+13Aj
		mov	eax, [esi+20h]
		mov	edx, [eax]
		mov	eax, [esi+1Ch]
		mov	ecx, [eax]
		mov	eax, [esi+0Ch]
		sub	ecx, ebp
		add	ecx, edi
		sub	edx, ecx
		inc	edx
		mov	[eax], edi
		mov	eax, [esi+1Ch]
		mov	[eax], ecx
		mov	eax, [esi+2Ch]
		mov	[eax], edx

loc_10004B99:				; CODE XREF: sub_10004A2B+109j
					; sub_10004A2B+14Cj
		test	byte ptr [esi+3Ch], 1
		jz	short loc_10004BA6
		push	ebp		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_10004BA6:				; CODE XREF: sub_10004A2B+172j
		or	dword ptr [esi+3Ch], 1
		mov	ecx, esi
		call	ds:?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
		mov	ecx, [esp+14h+arg_0]
		pop	ebp
		mov	[eax], cl
		mov	eax, ecx

loc_10004BBB:				; CODE XREF: sub_10004A2B+69j
					; sub_10004A2B+A9j
		pop	edi

loc_10004BBC:				; CODE XREF: sub_10004A2B+1Ej
		pop	ebx

loc_10004BBD:				; CODE XREF: sub_10004A2B+Dj
		pop	esi
		pop	ecx
		retn	4
sub_10004A2B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004BC2	proc near		; DATA XREF: .rdata:100082A4o

arg_0		= dword	ptr  4

		mov	edx, ecx
		push	esi
		mov	eax, [edx+1Ch]
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_10004C07
		mov	eax, [edx+0Ch]
		cmp	esi, [eax]
		jbe	short loc_10004C07
		mov	ecx, [esp+4+arg_0]
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_10004BE9
		cmp	cl, [esi-1]
		jz	short loc_10004BE9
		test	byte ptr [edx+3Ch], 2
		jnz	short loc_10004C07

loc_10004BE9:				; CODE XREF: sub_10004BC2+1Aj
					; sub_10004BC2+1Fj
		mov	eax, [edx+2Ch]
		inc	dword ptr [eax]
		mov	eax, [edx+1Ch]
		dec	dword ptr [eax]
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_10004C01
		mov	eax, [edx+1Ch]
		mov	eax, [eax]
		mov	[eax], cl
		jmp	short loc_10004C03
; ---------------------------------------------------------------------------

loc_10004C01:				; CODE XREF: sub_10004BC2+34j
		xor	ecx, ecx

loc_10004C03:				; CODE XREF: sub_10004BC2+3Dj
		mov	eax, ecx
		jmp	short loc_10004C0A
; ---------------------------------------------------------------------------

loc_10004C07:				; CODE XREF: sub_10004BC2+Aj
					; sub_10004BC2+11j ...
		or	eax, 0FFFFFFFFh

loc_10004C0A:				; CODE XREF: sub_10004BC2+43j
		pop	esi
		retn	4
sub_10004BC2	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004C0E	proc near		; CODE XREF: sub_1000415C+156p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [esi+4]
		cmp	edi, eax
		jnb	short loc_10004C40
		cmp	[esi], edi
		ja	short loc_10004C40
		sub	edi, [esi]
		sar	edi, 2
		cmp	eax, [esi+8]
		jnz	short loc_10004C32
		push	1
		call	sub_100030AA

loc_10004C32:				; CODE XREF: sub_10004C0E+1Bj
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_10004C57
		mov	eax, [esi]
		mov	eax, [eax+edi*4]
		jmp	short loc_10004C55
; ---------------------------------------------------------------------------

loc_10004C40:				; CODE XREF: sub_10004C0E+Dj
					; sub_10004C0E+11j
		cmp	eax, [esi+8]
		jnz	short loc_10004C4C
		push	1
		call	sub_100030AA

loc_10004C4C:				; CODE XREF: sub_10004C0E+35j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_10004C57
		mov	eax, [edi]

loc_10004C55:				; CODE XREF: sub_10004C0E+30j
		mov	[ecx], eax

loc_10004C57:				; CODE XREF: sub_10004C0E+29j
					; sub_10004C0E+43j
		add	dword ptr [esi+4], 4
		pop	edi
		pop	esi
		retn	4
sub_10004C0E	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10004C60(void *)
sub_10004C60	proc near		; CODE XREF: sub_10003E95+39p
					; sub_10003E95+5Dp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, [esi+4]
		cmp	edi, ecx
		jnb	short loc_10004CA6
		cmp	[esi], edi
		ja	short loc_10004CA6
		sub	edi, [esi]
		push	ebx
		mov	eax, edi
		push	18h
		cdq
		pop	ebx
		idiv	ebx
		mov	edi, eax
		cmp	ecx, [esi+8]
		jnz	short loc_10004C8E
		push	1
		mov	ecx, esi
		call	sub_100030F2

loc_10004C8E:				; CODE XREF: sub_10004C60+23j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_10004CA0
		imul	eax, edi, 18h
		add	eax, [esi]
		push	eax		; void *
		call	sub_10002355

loc_10004CA0:				; CODE XREF: sub_10004C60+33j
		add	[esi+4], ebx
		pop	ebx
		jmp	short loc_10004CC5
; ---------------------------------------------------------------------------

loc_10004CA6:				; CODE XREF: sub_10004C60+Dj
					; sub_10004C60+11j
		cmp	ecx, [esi+8]
		jnz	short loc_10004CB4
		push	1
		mov	ecx, esi
		call	sub_100030F2

loc_10004CB4:				; CODE XREF: sub_10004C60+49j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_10004CC1
		push	edi		; void *
		call	sub_10002355

loc_10004CC1:				; CODE XREF: sub_10004C60+59j
		add	dword ptr [esi+4], 18h

loc_10004CC5:				; CODE XREF: sub_10004C60+44j
		pop	edi
		pop	esi
		retn	4
sub_10004C60	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004CCA	proc near		; DATA XREF: .rdata:100082D4o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	edx, [esi+0Ch]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		cmp	eax, edx
		jz	short loc_10004CFC

loc_10004CDD:				; CODE XREF: sub_10004CCA+30j
		mov	ecx, [eax+10h]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	ecx, eax
		mov	edx, [eax]
		call	dword ptr [edx+10h]
		lea	ecx, [ebp+var_4]
		call	sub_1000287A
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+0Ch]
		jnz	short loc_10004CDD

loc_10004CFC:				; CODE XREF: sub_10004CCA+11j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10004CCA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004D01	proc near		; CODE XREF: sub_100027FD+11j
					; sub_10004EF1+3Ep
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+10h]
		test	ecx, ecx
		jz	short loc_10004D11
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_10004D11:				; CODE XREF: sub_10004D01+8j
		and	dword ptr [esi+10h], 0
		mov	ecx, [esi+4Ch]
		test	ecx, ecx
		jz	short loc_10004D25
		mov	eax, [ecx]
		call	dword ptr [eax+1Ch]
		and	dword ptr [esi+4Ch], 0

loc_10004D25:				; CODE XREF: sub_10004D01+19j
		pop	esi
		retn
sub_10004D01	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004D27	proc near		; CODE XREF: sub_1000415C+1Ep

arg_0		= dword	ptr  4

		mov	eax, [ecx+8]
		sub	eax, [ecx]
		sar	eax, 2
		cmp	eax, [esp+arg_0]
		jnb	short locret_10004D4F
		cmp	[esp+arg_0], 3FFFFFFFh
		jbe	short loc_10004D4A
		push	offset aVectorTTooLong ; "vector<T> too	long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_10004D4A:				; CODE XREF: sub_10004D27+16j
		jmp	sub_10002FFB
; ---------------------------------------------------------------------------

locret_10004D4F:			; CODE XREF: sub_10004D27+Cj
		retn	4
sub_10004D27	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004D52	proc near		; CODE XREF: sub_100034EB+A6p
					; sub_10004DD0+7Cp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		lea	edx, [esp+0Ch+arg_4]
		xor	eax, eax
		push	ebp
		inc	eax
		mov	[esp+10h+var_8], eax
		mov	[esp+10h+var_4], eax
		push	esi
		mov	esi, ecx
		push	edi
		cmp	ebx, eax
		jg	short loc_10004D75
		lea	edx, [esp+18h+var_8]

loc_10004D75:				; CODE XREF: sub_10004D52+1Dj
		mov	ebp, [esp+18h+arg_0]
		lea	edi, [esp+18h+arg_0]
		cmp	ebp, eax
		jg	short loc_10004D85
		lea	edi, [esp+18h+var_4]

loc_10004D85:				; CODE XREF: sub_10004D52+2Dj
		mov	ecx, [esi+10h]
		push	dword ptr [esi+3Ch]
		push	dword ptr [edx]
		mov	eax, [ecx]
		push	dword ptr [edi]
		call	dword ptr [eax+8]
		mov	edi, eax
		cmp	edi, 300Eh
		jnz	short loc_10004DAA
		mov	ecx, [esi+8]
		mov	eax, [ecx]
		call	dword ptr [eax+6Ch]

loc_10004DA6:				; CODE XREF: sub_10004D52+67j
		xor	al, al
		jmp	short loc_10004DC7
; ---------------------------------------------------------------------------

loc_10004DAA:				; CODE XREF: sub_10004D52+4Aj
		cmp	edi, 3000h
		jz	short loc_10004DBB
		call	sub_10002AEF
		mov	[eax], edi
		jmp	short loc_10004DA6
; ---------------------------------------------------------------------------

loc_10004DBB:				; CODE XREF: sub_10004D52+5Ej
		mov	[esi+24h], ebp
		mov	al, 1
		mov	[esi+20h], ebx
		mov	byte ptr [esi+48h], 0

loc_10004DC7:				; CODE XREF: sub_10004D52+56j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn	8
sub_10004D52	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004DD0	proc near		; CODE XREF: sub_100036AC+1A9p
					; sub_100038CD+122p ...

Rect		= tagRECT ptr -14h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		cmp	dword ptr [esi+44h], 0
		jnz	short loc_10004E18
		lea	eax, [ebp+Rect]
		push	eax		; lpRect
		lea	ecx, [esi+14h]
		call	sub_10003FB4
		test	al, al
		jnz	short loc_10004E0A
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh

loc_10004E06:				; CODE XREF: sub_10004DD0+76j
					; sub_10004DD0+96j
		xor	al, al
		jmp	short loc_10004E6A
; ---------------------------------------------------------------------------

loc_10004E0A:				; CODE XREF: sub_10004DD0+29j
		mov	edi, [ebp+Rect.right]
		mov	ebx, [ebp+Rect.bottom]
		sub	edi, [ebp+Rect.left]
		sub	ebx, [ebp+Rect.top]
		jmp	short loc_10004E1E
; ---------------------------------------------------------------------------

loc_10004E18:				; CODE XREF: sub_10004DD0+19j
		mov	edi, [esi+24h]
		mov	ebx, [esi+20h]

loc_10004E1E:				; CODE XREF: sub_10004DD0+46j
		mov	eax, [esi+1Ch]
		mov	ecx, [esi+8]
		push	dword ptr [eax+4]
		mov	edx, [ecx]
		push	dword ptr [eax]
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi+14h]
		call	dword ptr [edx+18h]
		mov	[esi+10h], eax
		test	eax, eax
		jnz	short loc_10004E48
		call	sub_10002AEF
		mov	dword ptr [eax], 3003h
		jmp	short loc_10004E06
; ---------------------------------------------------------------------------

loc_10004E48:				; CODE XREF: sub_10004DD0+69j
		push	ebx
		push	edi
		mov	ecx, esi
		call	sub_10004D52
		test	al, al
		jnz	short loc_10004E68
		mov	ecx, [esi+10h]
		test	ecx, ecx
		jz	short loc_10004E62
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_10004E62:				; CODE XREF: sub_10004DD0+8Aj
		and	dword ptr [esi+10h], 0
		jmp	short loc_10004E06
; ---------------------------------------------------------------------------

loc_10004E68:				; CODE XREF: sub_10004DD0+83j
		mov	al, 1

loc_10004E6A:				; CODE XREF: sub_10004DD0+38j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10004DD0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004E7B	proc near		; CODE XREF: sub_100034EB+B5p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		lea	edx, [esp+0Ch+arg_4]
		xor	eax, eax
		push	ebp
		inc	eax
		mov	[esp+10h+var_8], eax
		mov	[esp+10h+var_4], eax
		push	esi
		mov	esi, ecx
		push	edi
		cmp	ebx, eax
		jg	short loc_10004E9E
		lea	edx, [esp+18h+var_8]

loc_10004E9E:				; CODE XREF: sub_10004E7B+1Dj
		mov	ebp, [esp+18h+arg_0]
		lea	edi, [esp+18h+arg_0]
		cmp	ebp, eax
		jg	short loc_10004EAE
		lea	edi, [esp+18h+var_4]

loc_10004EAE:				; CODE XREF: sub_10004E7B+2Dj
		mov	ecx, [esi+10h]
		push	dword ptr [edx]
		push	dword ptr [edi]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		mov	edi, eax
		cmp	edi, 300Eh
		jnz	short loc_10004ECF
		mov	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax]

loc_10004ECB:				; CODE XREF: sub_10004E7B+63j
		xor	al, al
		jmp	short loc_10004EE8
; ---------------------------------------------------------------------------

loc_10004ECF:				; CODE XREF: sub_10004E7B+47j
		cmp	edi, 3000h
		jz	short loc_10004EE0
		call	sub_10002AEF
		mov	[eax], edi
		jmp	short loc_10004ECB
; ---------------------------------------------------------------------------

loc_10004EE0:				; CODE XREF: sub_10004E7B+5Aj
		mov	[esi+24h], ebp
		mov	al, 1
		mov	[esi+20h], ebx

loc_10004EE8:				; CODE XREF: sub_10004E7B+52j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn	8
sub_10004E7B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004EF1	proc near		; CODE XREF: sub_10003608+24p
					; sub_100036AC+169p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	edx, [esi+24h]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		cmp	eax, edx
		jz	short loc_10004F20

loc_10004F04:				; CODE XREF: sub_10004EF1+2Dj
		mov	ecx, [eax+10h]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		test	al, al
		jnz	short loc_10004F5B
		lea	ecx, [ebp+var_4]
		call	sub_1000287A
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+24h]
		jnz	short loc_10004F04

loc_10004F20:				; CODE XREF: sub_10004EF1+11j
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		mov	[ebp+var_4], eax
		cmp	eax, ecx
		jz	short loc_10004F44

loc_10004F2C:				; CODE XREF: sub_10004EF1+51j
		mov	ecx, [eax+10h]
		call	sub_10004D01
		lea	ecx, [ebp+var_4]
		call	sub_1000287A
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+0Ch]
		jnz	short loc_10004F2C

loc_10004F44:				; CODE XREF: sub_10004EF1+39j
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		test	al, al
		jnz	short loc_10004F5F
		call	sub_10002AEF
		mov	dword ptr [eax], 3003h

loc_10004F5B:				; CODE XREF: sub_10004EF1+1Dj
		xor	al, al
		jmp	short loc_10004F85
; ---------------------------------------------------------------------------

loc_10004F5F:				; CODE XREF: sub_10004EF1+5Dj
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		mov	[ebp+var_4], eax
		cmp	eax, ecx
		jz	short loc_10004F83

loc_10004F6B:				; CODE XREF: sub_10004EF1+90j
		mov	ecx, [eax+10h]
		call	sub_10004DD0
		lea	ecx, [ebp+var_4]
		call	sub_1000287A
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+0Ch]
		jnz	short loc_10004F6B

loc_10004F83:				; CODE XREF: sub_10004EF1+78j
		mov	al, 1

loc_10004F85:				; CODE XREF: sub_10004EF1+6Cj
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10004EF1	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004F8A	proc near		; CODE XREF: sub_10002599+18p
					; sub_1000415C+185p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, 3038h
		jmp	short loc_10004FD7
; ---------------------------------------------------------------------------

loc_10004F96:				; CODE XREF: sub_10004F8A+4Fj
		cmp	dword ptr [edx+4], 0
		jz	short loc_10004FD4
		cmp	dword ptr [edx+4], 0FFFFFFFFh
		jz	short loc_10004FD4
		mov	eax, [edx]
		sub	eax, 3021h
		jz	short loc_10004FD0
		dec	eax
		jz	short loc_10004FCA
		dec	eax
		jz	short loc_10004FC4
		dec	eax
		jz	short loc_10004FBF
		sub	eax, 19h
		jnz	short loc_10004FD4
		mov	byte ptr [ecx+4], 1
		jmp	short loc_10004FD4
; ---------------------------------------------------------------------------

loc_10004FBF:				; CODE XREF: sub_10004F8A+28j
		mov	byte ptr [ecx],	1
		jmp	short loc_10004FD4
; ---------------------------------------------------------------------------

loc_10004FC4:				; CODE XREF: sub_10004F8A+25j
		mov	byte ptr [ecx+1], 1
		jmp	short loc_10004FD4
; ---------------------------------------------------------------------------

loc_10004FCA:				; CODE XREF: sub_10004F8A+22j
		mov	byte ptr [ecx+2], 1
		jmp	short loc_10004FD4
; ---------------------------------------------------------------------------

loc_10004FD0:				; CODE XREF: sub_10004F8A+1Fj
		mov	byte ptr [ecx+3], 1

loc_10004FD4:				; CODE XREF: sub_10004F8A+10j
					; sub_10004F8A+16j ...
		add	edx, 8

loc_10004FD7:				; CODE XREF: sub_10004F8A+Aj
		cmp	[edx], esi
		jnz	short loc_10004F96
		pop	esi
		retn	4
sub_10004F8A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004FDF	proc near		; DATA XREF: .rdata:100082BCo

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ebx
		mov	ebx, ecx
		push	ebp
		push	esi
		push	edi
		mov	ecx, [ebx+20h]
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_10004FF7
		cmp	[ebx+38h], eax
		jnb	short loc_10004FF7
		mov	[ebx+38h], eax

loc_10004FF7:				; CODE XREF: sub_10004FDF+Ej
					; sub_10004FDF+13j
		test	byte ptr [esp+14h+arg_10], 1
		jz	loc_100050CD
		mov	eax, [ebx+1Ch]
		mov	edx, [eax]
		mov	[esp+14h+var_4], edx
		test	edx, edx
		jz	loc_100050CD
		mov	eax, [esp+14h+arg_C]
		mov	ebp, ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		cmp	eax, 2
		jnz	short loc_10005027
		mov	eax, [ebx+38h]
		jmp	short loc_10005035
; ---------------------------------------------------------------------------

loc_10005027:				; CODE XREF: sub_10004FDF+41j
		cmp	eax, 1
		jnz	short loc_10005049
		test	byte ptr [esp+14h+arg_10], 2
		jnz	short loc_1000504D
		mov	eax, edx

loc_10005035:				; CODE XREF: sub_10004FDF+46j
		mov	ecx, [ebx+0Ch]
		mov	esi, [esp+14h+arg_4]
		mov	edi, [esp+14h+arg_8]
		sub	eax, [ecx]
		cdq
		add	esi, eax
		adc	edi, edx
		jmp	short loc_1000505D
; ---------------------------------------------------------------------------

loc_10005049:				; CODE XREF: sub_10004FDF+4Bj
		test	eax, eax
		jz	short loc_10005055

loc_1000504D:				; CODE XREF: sub_10004FDF+52j
		mov	esi, [ebp+0]
		mov	edi, [ebp+4]
		jmp	short loc_1000505D
; ---------------------------------------------------------------------------

loc_10005055:				; CODE XREF: sub_10004FDF+6Cj
		mov	edi, [esp+14h+arg_8]
		mov	esi, [esp+14h+arg_4]

loc_1000505D:				; CODE XREF: sub_10004FDF+68j
					; sub_10004FDF+74j
		test	edi, edi
		jl	loc_10005156
		jg	short loc_1000506F
		test	esi, esi
		jb	loc_10005156

loc_1000506F:				; CODE XREF: sub_10004FDF+86j
		mov	eax, [ebx+0Ch]
		mov	ecx, [eax]
		mov	eax, [ebx+38h]
		sub	eax, ecx
		cdq
		cmp	edi, edx
		jg	loc_10005156
		jl	short loc_1000508C
		cmp	esi, eax
		ja	loc_10005156

loc_1000508C:				; CODE XREF: sub_10004FDF+A3j
		mov	eax, [ebx+2Ch]
		sub	ecx, [esp+14h+var_4]
		add	ecx, esi
		sub	[eax], ecx
		mov	eax, [ebx+1Ch]
		add	[eax], ecx
		test	byte ptr [esp+14h+arg_10], 2
		jz	loc_10005176
		mov	edx, [ebx+20h]
		cmp	dword ptr [edx], 0
		jz	loc_10005176
		mov	eax, [ebx+30h]
		mov	ecx, [eax]
		mov	eax, [ebx+1Ch]
		add	ecx, [edx]
		mov	eax, [eax]
		sub	ecx, eax
		mov	[edx], eax
		mov	eax, [ebx+30h]
		mov	[eax], ecx
		jmp	loc_10005176
; ---------------------------------------------------------------------------

loc_100050CD:				; CODE XREF: sub_10004FDF+1Dj
					; sub_10004FDF+2Ej
		test	byte ptr [esp+14h+arg_10], 2
		jz	loc_1000515E
		mov	edx, [ecx]
		mov	[esp+14h+arg_10], edx
		test	edx, edx
		jz	short loc_1000515E
		mov	eax, [esp+14h+arg_C]
		mov	ebp, ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		cmp	eax, 2
		jnz	short loc_100050F6
		mov	eax, [ebx+38h]
		jmp	short loc_100050FD
; ---------------------------------------------------------------------------

loc_100050F6:				; CODE XREF: sub_10004FDF+110j
		cmp	eax, 1
		jnz	short loc_10005111
		mov	eax, edx

loc_100050FD:				; CODE XREF: sub_10004FDF+115j
		mov	ecx, [ebx+0Ch]
		mov	esi, [esp+14h+arg_4]
		mov	edi, [esp+14h+arg_8]
		sub	eax, [ecx]
		cdq
		add	esi, eax
		adc	edi, edx
		jmp	short loc_10005125
; ---------------------------------------------------------------------------

loc_10005111:				; CODE XREF: sub_10004FDF+11Aj
		test	eax, eax
		jz	short loc_1000511D
		mov	esi, [ebp+0]
		mov	edi, [ebp+4]
		jmp	short loc_10005125
; ---------------------------------------------------------------------------

loc_1000511D:				; CODE XREF: sub_10004FDF+134j
		mov	edi, [esp+14h+arg_8]
		mov	esi, [esp+14h+arg_4]

loc_10005125:				; CODE XREF: sub_10004FDF+130j
					; sub_10004FDF+13Cj
		test	edi, edi
		jl	short loc_10005156
		jg	short loc_1000512F
		test	esi, esi
		jb	short loc_10005156

loc_1000512F:				; CODE XREF: sub_10004FDF+14Aj
		mov	eax, [ebx+0Ch]
		mov	ecx, [eax]
		mov	eax, [ebx+38h]
		sub	eax, ecx
		cdq
		cmp	edi, edx
		jg	short loc_10005156
		jl	short loc_10005144
		cmp	esi, eax
		ja	short loc_10005156

loc_10005144:				; CODE XREF: sub_10004FDF+15Fj
		mov	eax, [ebx+30h]
		sub	ecx, [esp+14h+arg_10]
		add	ecx, esi
		sub	[eax], ecx
		mov	eax, [ebx+20h]
		add	[eax], ecx
		jmp	short loc_10005176
; ---------------------------------------------------------------------------

loc_10005156:				; CODE XREF: sub_10004FDF+80j
					; sub_10004FDF+8Aj ...
		mov	esi, [ebp+0]
		mov	edi, [ebp+4]
		jmp	short loc_10005176
; ---------------------------------------------------------------------------

loc_1000515E:				; CODE XREF: sub_10004FDF+F3j
					; sub_10004FDF+101j
		mov	esi, [esp+14h+arg_4]
		mov	eax, esi
		mov	edi, [esp+14h+arg_8]
		or	eax, edi
		jz	short loc_10005176
		mov	eax, ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	esi, [eax]
		mov	edi, [eax+4]

loc_10005176:				; CODE XREF: sub_10004FDF+C2j
					; sub_10004FDF+CEj ...
		mov	eax, [esp+14h+arg_0]
		xor	ecx, ecx
		mov	[eax+4], edi
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		pop	ebx
		pop	ecx
		retn	14h
sub_10004FDF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005192	proc near		; DATA XREF: .rdata:100082C0o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_1C		= dword	ptr  20h

		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [esp+0Ch+arg_10]
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_C]
		add	esi, [esp+14h+arg_4]
		push	edi
		adc	ebx, [esp+18h+arg_8]
		mov	edi, ecx
		mov	edx, [edi+20h]
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_100051BB
		cmp	[edi+38h], eax
		jnb	short loc_100051BB
		mov	[edi+38h], eax

loc_100051BB:				; CODE XREF: sub_10005192+1Fj
					; sub_10005192+24j
		mov	eax, ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	ecx, [eax]
		mov	ebp, [eax+4]
		mov	eax, ecx
		mov	[esp+18h+var_8], ecx
		cmp	esi, eax
		jnz	short loc_100051D7
		cmp	ebx, ebp
		jz	loc_1000528E

loc_100051D7:				; CODE XREF: sub_10005192+3Bj
		test	byte ptr [esp+18h+arg_1C], 1
		jz	short loc_10005248
		mov	eax, [edi+1Ch]
		mov	eax, [eax]
		mov	[esp+18h+var_4], eax
		test	eax, eax
		jz	short loc_10005246
		test	ebx, ebx
		jl	short loc_10005240
		jg	short loc_100051F5
		test	esi, esi
		jb	short loc_10005240

loc_100051F5:				; CODE XREF: sub_10005192+5Dj
		mov	eax, [edi+0Ch]
		mov	ecx, [eax]
		mov	eax, [edi+38h]
		sub	eax, ecx
		cdq
		cmp	ebx, edx
		jg	short loc_10005240
		jl	short loc_1000520A
		cmp	esi, eax
		ja	short loc_10005240

loc_1000520A:				; CODE XREF: sub_10005192+72j
		mov	eax, [edi+2Ch]
		sub	ecx, [esp+18h+var_4]
		add	ecx, esi
		sub	[eax], ecx
		mov	eax, [edi+1Ch]
		add	[eax], ecx
		test	byte ptr [esp+18h+arg_1C], 2
		jz	short loc_1000528E
		mov	edx, [edi+20h]
		cmp	dword ptr [edx], 0
		jz	short loc_1000528E
		mov	eax, [edi+30h]
		mov	ecx, [eax]
		mov	eax, [edi+1Ch]
		add	ecx, [edx]
		mov	eax, [eax]
		sub	ecx, eax
		mov	[edx], eax
		mov	eax, [edi+30h]
		mov	[eax], ecx
		jmp	short loc_1000528E
; ---------------------------------------------------------------------------

loc_10005240:				; CODE XREF: sub_10005192+5Bj
					; sub_10005192+61j ...
		mov	esi, [esp+18h+var_8]
		jmp	short loc_1000528C
; ---------------------------------------------------------------------------

loc_10005246:				; CODE XREF: sub_10005192+57j
		mov	eax, ecx

loc_10005248:				; CODE XREF: sub_10005192+4Aj
		test	byte ptr [esp+18h+arg_1C], 2
		jz	short loc_1000528A
		mov	ecx, [edx]
		mov	[esp+18h+arg_1C], ecx
		test	ecx, ecx
		jz	short loc_1000528A
		test	ebx, ebx
		jl	short loc_10005240
		jg	short loc_10005263
		test	esi, esi
		jb	short loc_10005240

loc_10005263:				; CODE XREF: sub_10005192+CBj
		mov	eax, [edi+0Ch]
		mov	ecx, [eax]
		mov	eax, [edi+38h]
		sub	eax, ecx
		cdq
		cmp	ebx, edx
		jg	short loc_10005240
		jl	short loc_10005278
		cmp	esi, eax
		ja	short loc_10005240

loc_10005278:				; CODE XREF: sub_10005192+E0j
		mov	eax, [edi+30h]
		sub	ecx, [esp+18h+arg_1C]
		add	ecx, esi
		sub	[eax], ecx
		mov	eax, [edi+20h]
		add	[eax], ecx
		jmp	short loc_1000528E
; ---------------------------------------------------------------------------

loc_1000528A:				; CODE XREF: sub_10005192+BBj
					; sub_10005192+C5j
		mov	esi, eax

loc_1000528C:				; CODE XREF: sub_10005192+B2j
		mov	ebx, ebp

loc_1000528E:				; CODE XREF: sub_10005192+3Fj
					; sub_10005192+8Dj ...
		mov	eax, [esp+18h+arg_0]
		xor	ecx, ecx
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		mov	[eax+4], ebx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		pop	ebx
		pop	ecx
		pop	ecx
		retn	20h
sub_10005192	endp


; =============== S U B	R O U T	I N E =======================================


sub_100052AB	proc near		; DATA XREF: .rdata:10008308o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+4Ch], eax
		retn	4
sub_100052AB	endp


; =============== S U B	R O U T	I N E =======================================


sub_100052B5	proc near		; CODE XREF: eglBindAPI+24p

arg_0		= dword	ptr  4

		call	sub_10002AEF
		mov	ecx, [esp+arg_0]
		mov	[eax+4], ecx
		retn
sub_100052B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_100052C2	proc near		; CODE XREF: eglMakeCurrent+B0p

arg_0		= dword	ptr  4

		call	sub_10002AEF
		mov	ecx, [esp+arg_0]
		mov	[eax+8], ecx
		retn
sub_100052C2	endp


; =============== S U B	R O U T	I N E =======================================


sub_100052CF	proc near		; CODE XREF: eglMakeCurrent+B6p

arg_0		= dword	ptr  4

		call	sub_10002AEF
		mov	ecx, [esp+arg_0]
		mov	[eax+0Ch], ecx
		retn
sub_100052CF	endp


; =============== S U B	R O U T	I N E =======================================


sub_100052DC	proc near		; CODE XREF: eglMakeCurrent+BCp

arg_0		= dword	ptr  4

		call	sub_10002AEF
		mov	ecx, [esp+arg_0]
		mov	[eax+10h], ecx
		retn
sub_100052DC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100052E9	proc near		; CODE XREF: sub_10002631+6Ap
					; sub_100026B4+6Dp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+3Ch]
		cmp	[esi], eax
		jz	short loc_10005336
		mov	ecx, [edi+8]
		mov	[esi], eax
		mov	eax, [ecx]
		call	dword ptr [eax+0B0h]
		cmp	[esi], eax
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		jl	short loc_10005313
		mov	eax, esi

loc_10005313:				; CODE XREF: sub_100052E9+26j
		mov	ecx, [edi+8]
		mov	eax, [eax]
		mov	[esi], eax
		mov	eax, [ecx]
		call	dword ptr [eax+0B4h]
		cmp	eax, [esi]
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		jl	short loc_1000532E
		mov	eax, esi

loc_1000532E:				; CODE XREF: sub_100052E9+41j
		mov	eax, [eax]
		mov	[esi], eax
		mov	byte ptr [edi+48h], 1

loc_10005336:				; CODE XREF: sub_100052E9+Fj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_100052E9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_1000533C(void *)
sub_1000533C	proc near		; CODE XREF: sub_10003E95+BCp
					; sub_1000450E+145p

var_1C		= byte ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	edx, ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		test	byte ptr [edx+3Ch], 2
		jnz	short loc_100053A0
		mov	eax, [edx+20h]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_100053A0
		cmp	[edx+38h], ecx
		jb	short loc_1000536A
		mov	ecx, [edx+38h]

loc_1000536A:				; CODE XREF: sub_1000533C+29j
		mov	eax, [edx+10h]
		sub	ecx, [eax]
		push	ecx		; size_t
		push	dword ptr [eax]	; void *
		lea	ecx, [ebp+var_1C]
		call	sub_100023A2
		xor	ebx, ebx
		mov	dword ptr [esi+14h], 0Fh
		lea	eax, [ebp+var_1C]
		mov	[esi+10h], ebx
		push	eax		; void *
		mov	ecx, esi	; void *
		mov	[esi], bl
		call	sub_10002BBF
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [ebp+var_1C] ; void *
		call	sub_10003185
		jmp	short loc_10005400
; ---------------------------------------------------------------------------

loc_100053A0:				; CODE XREF: sub_1000533C+1Bj
					; sub_1000533C+24j
		test	byte ptr [edx+3Ch], 4
		push	edi
		jnz	short loc_100053D3
		mov	eax, [edx+1Ch]
		mov	edi, [eax]
		test	edi, edi
		jz	short loc_100053D3
		mov	eax, [edx+0Ch]
		mov	ecx, [eax]
		mov	eax, [edx+2Ch]
		mov	eax, [eax]
		sub	eax, ecx
		add	eax, edi
		push	eax		; size_t
		push	ecx		; void *
		lea	ecx, [ebp+var_1C]
		call	sub_100023A2
		mov	dword ptr [esi+14h], 0Fh
		xor	ebx, ebx
		jmp	short loc_100053E4
; ---------------------------------------------------------------------------

loc_100053D3:				; CODE XREF: sub_1000533C+69j
					; sub_1000533C+72j
		push	0Fh
		pop	eax
		xor	ebx, ebx
		mov	[ebp+var_8], eax
		mov	[ebp+var_C], ebx
		mov	[ebp+var_1C], bl
		mov	[esi+14h], eax

loc_100053E4:				; CODE XREF: sub_1000533C+95j
		lea	eax, [ebp+var_1C]
		mov	[esi+10h], ebx
		push	eax		; void *
		mov	ecx, esi	; void *
		mov	[esi], bl
		call	sub_10002BBF
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [ebp+var_1C] ; void *
		call	sub_10003185
		pop	edi

loc_10005400:				; CODE XREF: sub_1000533C+62j
		mov	ecx, [ebp+var_4]
		mov	eax, esi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn	4
sub_1000533C	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10005414(HANDLE hData)
sub_10005414	proc near		; CODE XREF: sub_10002631+77p

dwProcessId	= dword	ptr -4

		push	ecx
		push	ebx
		mov	ebx, ecx
		push	edi
		mov	edi, [ebx+14h]
		test	edi, edi
		jz	short loc_10005490
		push	esi
		lea	eax, [esp+10h+dwProcessId]
		push	eax		; lpdwProcessId
		push	edi		; hWnd
		call	ds:GetWindowThreadProcessId
		mov	esi, eax
		call	ds:GetCurrentProcessId
		cmp	[esp+10h+dwProcessId], eax
		jnz	short loc_1000548F
		call	ds:GetCurrentThreadId
		cmp	esi, eax
		jnz	short loc_1000548F
		push	ebp
		push	0		; dwErrCode
		call	ds:SetLastError
		push	offset sub_10002B78 ; dwNewLong
		push	0FFFFFFFCh	; nIndex
		push	edi		; hWnd
		call	ds:SetWindowLongA
		mov	ebp, eax
		test	ebp, ebp
		jnz	short loc_10005472
		call	ds:GetLastError
		test	eax, eax
		jz	short loc_10005472
		mov	byte ptr [ebx+18h], 0
		jmp	short loc_1000548E
; ---------------------------------------------------------------------------

loc_10005472:				; CODE XREF: sub_10005414+4Cj
					; sub_10005414+56j
		mov	esi, ds:SetPropA
		push	ebx		; hData
		push	offset String	; "Egl::SurfaceOwner"
		push	edi		; hWnd
		call	esi ; SetPropA
		push	ebp		; hData
		push	offset aEglSurfacepare ; "Egl::SurfaceParentWndProc"
		push	edi		; hWnd
		call	esi ; SetPropA
		mov	byte ptr [ebx+18h], 1

loc_1000548E:				; CODE XREF: sub_10005414+5Cj
		pop	ebp

loc_1000548F:				; CODE XREF: sub_10005414+25j
					; sub_10005414+2Fj
		pop	esi

loc_10005490:				; CODE XREF: sub_10005414+Aj
		pop	edi
		pop	ebx
		pop	ecx
		retn
sub_10005414	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005494	proc near		; CODE XREF: eglSwapBuffers+4Ap
		push	dword ptr [ecx+20h]
		push	dword ptr [ecx+24h]
		push	0
		push	0
		call	sub_100054A4
		retn
sub_10005494	endp


; =============== S U B	R O U T	I N E =======================================


sub_100054A4	proc near		; CODE XREF: sub_10005494+Ap
					; eglPostSubBufferNV+72p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esi+10h]
		test	edi, edi
		jnz	short loc_100054B3
		mov	al, 1
		jmp	short loc_10005524
; ---------------------------------------------------------------------------

loc_100054B3:				; CODE XREF: sub_100054A4+9j
		mov	ecx, [esp+8+arg_8]
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		lea	eax, [ebx+ecx]
		cmp	eax, [esi+24h]
		jle	short loc_100054C9
		mov	ecx, [esi+24h]
		sub	ecx, ebx

loc_100054C9:				; CODE XREF: sub_100054A4+1Ej
		mov	edx, [esp+0Ch+arg_C]
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		lea	eax, [edx+ebp]
		cmp	eax, [esi+20h]
		jle	short loc_100054DF
		mov	edx, [esi+20h]
		sub	edx, ebp

loc_100054DF:				; CODE XREF: sub_100054A4+34j
		test	ecx, ecx
		jz	short loc_10005520
		test	edx, edx
		jz	short loc_10005520
		mov	eax, [edi]
		push	edx
		push	ecx
		push	ebp
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		mov	edi, eax
		cmp	edi, 300Eh
		jnz	short loc_10005506
		mov	ecx, [esi+8]
		mov	eax, [ecx]
		call	dword ptr [eax+6Ch]
		jmp	short loc_10005515
; ---------------------------------------------------------------------------

loc_10005506:				; CODE XREF: sub_100054A4+56j
		cmp	edi, 3000h
		jz	short loc_10005519
		call	sub_10002AEF
		mov	[eax], edi

loc_10005515:				; CODE XREF: sub_100054A4+60j
		xor	al, al
		jmp	short loc_10005522
; ---------------------------------------------------------------------------

loc_10005519:				; CODE XREF: sub_100054A4+68j
		mov	ecx, esi
		call	sub_100034EB

loc_10005520:				; CODE XREF: sub_100054A4+3Dj
					; sub_100054A4+41j
		mov	al, 1

loc_10005522:				; CODE XREF: sub_100054A4+73j
		pop	ebp
		pop	ebx

loc_10005524:				; CODE XREF: sub_100054A4+Dj
		pop	edi
		pop	esi
		retn	10h
sub_100054A4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005529	proc near		; CODE XREF: sub_1000471B+3Ap
					; sub_1000471B+15Bp ...
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		jmp	short loc_10005540
; ---------------------------------------------------------------------------

loc_10005531:				; CODE XREF: sub_10005529+1Aj
		mov	eax, [esi+0Ch]
		mov	ecx, esi
		mov	eax, [eax]
		push	dword ptr [eax+10h]
		call	sub_10003A94

loc_10005540:				; CODE XREF: sub_10005529+6j
		cmp	[esi+10h], edi
		jnz	short loc_10005531
		jmp	short loc_10005556
; ---------------------------------------------------------------------------

loc_10005547:				; CODE XREF: sub_10005529+30j
		mov	eax, [esi+24h]
		mov	ecx, esi
		mov	eax, [eax]
		push	dword ptr [eax+10h]
		call	sub_10003A76

loc_10005556:				; CODE XREF: sub_10005529+1Cj
		cmp	[esi+28h], edi
		jnz	short loc_10005547
		push	dword ptr [esi+2Ch]
		call	libGLESv2_178
		pop	ecx
		mov	[esi+2Ch], edi
		pop	edi
		pop	esi
		retn
sub_10005529	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000556A	proc near		; DATA XREF: .rdata:100082ACo
		push	esi
		mov	esi, [ecx+1Ch]
		mov	edx, [esi]
		test	edx, edx
		jnz	short loc_10005579
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005579:				; CODE XREF: sub_1000556A+8j
		push	edi
		mov	edi, [ecx+2Ch]
		mov	eax, [edi]
		add	eax, edx
		cmp	edx, eax
		jnb	short loc_1000558A
		movzx	eax, byte ptr [edx]
		jmp	short loc_100055BE
; ---------------------------------------------------------------------------

loc_1000558A:				; CODE XREF: sub_1000556A+19j
		test	byte ptr [ecx+3Ch], 4
		jnz	short loc_100055BB
		mov	eax, [ecx+20h]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_100055BB
		cmp	eax, edx
		ja	short loc_100055A2
		cmp	[ecx+38h], edx
		jbe	short loc_100055BB

loc_100055A2:				; CODE XREF: sub_1000556A+31j
		cmp	[ecx+38h], eax
		jnb	short loc_100055AA
		mov	[ecx+38h], eax

loc_100055AA:				; CODE XREF: sub_1000556A+3Bj
		mov	eax, [ecx+38h]
		sub	eax, [esi]
		mov	[edi], eax
		mov	eax, [ecx+1Ch]
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		jmp	short loc_100055BE
; ---------------------------------------------------------------------------

loc_100055BB:				; CODE XREF: sub_1000556A+24j
					; sub_1000556A+2Dj ...
		or	eax, 0FFFFFFFFh

loc_100055BE:				; CODE XREF: sub_1000556A+1Ej
					; sub_1000556A+4Fj
		pop	edi
		pop	esi
		retn
sub_1000556A	endp


; =============== S U B	R O U T	I N E =======================================


sub_100055C1	proc near		; CODE XREF: sub_100027FD+9p
		push	ebx
		mov	ebx, ecx
		cmp	byte ptr [ebx+18h], 0
		jz	short loc_10005608
		push	edi
		mov	edi, [ebx+14h]
		test	edi, edi
		jz	short loc_10005607
		push	ebp
		mov	ebp, offset aEglSurfacepare ; "Egl::SurfaceParentWndProc"
		push	ebp		; lpString
		push	edi		; hWnd
		call	ds:GetPropA
		test	eax, eax
		jz	short loc_100055EE
		push	eax		; dwNewLong
		push	0FFFFFFFCh	; nIndex
		push	edi		; hWnd
		call	ds:SetWindowLongA

loc_100055EE:				; CODE XREF: sub_100055C1+21j
		push	offset String	; "Egl::SurfaceOwner"
		push	edi		; hWnd
		call	ds:RemovePropA
		push	ebp		; lpString
		push	edi		; hWnd
		call	ds:RemovePropA
		mov	byte ptr [ebx+18h], 0
		pop	ebp

loc_10005607:				; CODE XREF: sub_100055C1+Fj
		pop	edi

loc_10005608:				; CODE XREF: sub_100055C1+7j
		pop	ebx
		retn
sub_100055C1	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000560A	proc near		; CODE XREF: eglCreateContext+D0p
					; eglCreatePbufferFromClientBuffer+9p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_1000566E
		pop	ecx
		test	al, al
		jnz	short loc_1000561B

loc_10005618:				; CODE XREF: sub_1000560A+2Dj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_1000561B:				; CODE XREF: sub_1000560A+Cj
		push	[esp+arg_4]
		mov	ecx, [esp+4+arg_0]
		call	sub_100048DD
		test	al, al
		jnz	short loc_10005639
		call	sub_10002AEF
		mov	dword ptr [eax], 3005h
		jmp	short loc_10005618
; ---------------------------------------------------------------------------

loc_10005639:				; CODE XREF: sub_1000560A+20j
		mov	al, 1
		retn
sub_1000560A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000563C	proc near		; CODE XREF: eglDestroyContext+9p
					; eglMakeCurrent+43p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_1000566E
		pop	ecx
		test	al, al
		jnz	short loc_1000564D

loc_1000564A:				; CODE XREF: sub_1000563C+2Dj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_1000564D:				; CODE XREF: sub_1000563C+Cj
		push	[esp+arg_4]
		mov	ecx, [esp+4+arg_0]
		call	sub_100048F2
		test	al, al
		jnz	short loc_1000566B
		call	sub_10002AEF
		mov	dword ptr [eax], 3006h
		jmp	short loc_1000564A
; ---------------------------------------------------------------------------

loc_1000566B:				; CODE XREF: sub_1000563C+20j
		mov	al, 1
		retn
sub_1000563C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000566E	proc near		; CODE XREF: sub_1000560A+4p
					; sub_1000563C+4p ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_10005684
		call	sub_10002AEF
		mov	dword ptr [eax], 3008h

loc_10005681:				; CODE XREF: sub_1000566E+2Aj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_10005684:				; CODE XREF: sub_1000566E+6j
		call	sub_100048B5
		test	al, al
		jnz	short loc_1000569A
		call	sub_10002AEF
		mov	dword ptr [eax], 3001h
		jmp	short loc_10005681
; ---------------------------------------------------------------------------

loc_1000569A:				; CODE XREF: sub_1000566E+1Dj
		mov	al, 1
		retn
sub_1000566E	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000569D	proc near		; CODE XREF: eglBindTexImage+Bp
					; eglCopyBuffers+Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_1000566E
		pop	ecx
		test	al, al
		jnz	short loc_100056AE

loc_100056AB:				; CODE XREF: sub_1000569D+2Dj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_100056AE:				; CODE XREF: sub_1000569D+Cj
		push	[esp+arg_4]
		mov	ecx, [esp+4+arg_0]
		call	sub_1000492A
		test	al, al
		jnz	short loc_100056CC
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh
		jmp	short loc_100056AB
; ---------------------------------------------------------------------------

loc_100056CC:				; CODE XREF: sub_1000569D+20j
		mov	al, 1
		retn
sub_1000569D	endp


; =============== S U B	R O U T	I N E =======================================


sub_100056CF	proc near		; CODE XREF: sub_100028F8+2Ep
					; sub_100028F8+38p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	eax, eax
		cmp	[ecx], al
		jz	short loc_100056DC
		mov	eax, [edx+10h]

loc_100056DC:				; CODE XREF: sub_100056CF+8j
		cmp	byte ptr [ecx+1], 0
		jz	short loc_100056E5
		add	eax, [edx+14h]

loc_100056E5:				; CODE XREF: sub_100056CF+11j
		cmp	byte ptr [ecx+2], 0
		jz	short loc_100056EE
		add	eax, [edx+18h]

loc_100056EE:				; CODE XREF: sub_100056CF+1Aj
		cmp	byte ptr [ecx+3], 0
		jz	short loc_100056F7
		add	eax, [edx+20h]

loc_100056F7:				; CODE XREF: sub_100056CF+23j
		cmp	byte ptr [ecx+4], 0
		jz	short locret_10005700
		add	eax, [edx+1Ch]

locret_10005700:			; CODE XREF: sub_100056CF+2Cj
		retn	4
sub_100056CF	endp


; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12	proc near		; CODE XREF: ___DllMainCRTStartup+7Dp
					; ___DllMainCRTStartup+97p

hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpvReserved	= dword	ptr  0Ch

		mov	eax, [esp+fdwReason]
		sub	eax, 0
		jz	short loc_10005737
		dec	eax
		jz	short loc_1000571C
		dec	eax
		jz	short loc_10005730
		dec	eax
		jnz	short loc_10005748
		call	sub_10002AA5
		jmp	short loc_10005748
; ---------------------------------------------------------------------------

loc_1000571C:				; CODE XREF: DllMain(x,x,x)+Aj
		call	ds:TlsAlloc
		mov	dwTlsIndex, eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10005730
		xor	eax, eax
		jmp	short locret_1000574B
; ---------------------------------------------------------------------------

loc_10005730:				; CODE XREF: DllMain(x,x,x)+Dj
					; DllMain(x,x,x)+27j
		call	sub_10002A4A
		jmp	short loc_10005748
; ---------------------------------------------------------------------------

loc_10005737:				; CODE XREF: DllMain(x,x,x)+7j
		call	sub_10002AA5
		push	dwTlsIndex	; dwTlsIndex
		call	sub_10002AD4
		pop	ecx

loc_10005748:				; CODE XREF: DllMain(x,x,x)+10j
					; DllMain(x,x,x)+17j ...
		xor	eax, eax
		inc	eax

locret_1000574B:			; CODE XREF: DllMain(x,x,x)+2Bj
		retn	0Ch
_DllMain@12	endp

; Exported entry  14. eglBindAPI

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglBindAPI
eglBindAPI	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, 30A0h
		cmp	eax, ecx
		jz	short loc_10005771
		add	eax, 0FFFFCF5Fh
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		xor	eax, eax
		jmp	short loc_1000578B
; ---------------------------------------------------------------------------

loc_10005771:				; CODE XREF: eglBindAPI+Dj
		push	ecx
		call	sub_100052B5
		lea	eax, [ebp+arg_0]
		mov	[ebp+arg_0], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		pop	ecx
		mov	eax, [eax]

loc_1000578B:				; CODE XREF: eglBindAPI+21j
		pop	ebp
		retn	4
eglBindAPI	endp

; Exported entry  20. eglBindTexImage

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglBindTexImage
eglBindTexImage	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	esi
		push	[ebp+arg_0]
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_10005822
		cmp	[ebp+arg_8], 3084h
		jz	short loc_100057BB
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		jmp	short loc_10005822
; ---------------------------------------------------------------------------

loc_100057BB:				; CODE XREF: eglBindTexImage+1Dj
		test	esi, esi
		jz	short loc_10005817
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_10005817
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+34h]
		test	eax, eax
		jz	short loc_100057DD
		call	sub_10002AEF
		mov	dword ptr [eax], 3002h
		jmp	short loc_10005822
; ---------------------------------------------------------------------------

loc_100057DD:				; CODE XREF: eglBindTexImage+3Fj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+24h]
		cmp	eax, 305Ch
		jnz	short loc_100057F8

loc_100057EB:				; CODE XREF: eglBindTexImage+71j
		call	sub_10002AEF
		mov	dword ptr [eax], 3009h
		jmp	short loc_10005822
; ---------------------------------------------------------------------------

loc_100057F8:				; CODE XREF: eglBindTexImage+5Aj
		push	esi
		call	libGLESv2_158
		test	al, al
		jz	short loc_100057EB
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		jmp	short loc_10005824
; ---------------------------------------------------------------------------

loc_10005817:				; CODE XREF: eglBindTexImage+2Ej
					; eglBindTexImage+34j
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh

loc_10005822:				; CODE XREF: eglBindTexImage+14j
					; eglBindTexImage+2Aj ...
		xor	eax, eax

loc_10005824:				; CODE XREF: eglBindTexImage+86j
		pop	esi
		pop	ebp
		retn	0Ch
eglBindTexImage	endp

; Exported entry   7. eglChooseConfig

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglChooseConfig
eglChooseConfig	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	esi
		call	sub_1000566E
		pop	ecx
		test	al, al
		jnz	short loc_1000583F

loc_1000583B:				; CODE XREF: eglChooseConfig+27j
		xor	eax, eax
		jmp	short loc_10005888
; ---------------------------------------------------------------------------

loc_1000583F:				; CODE XREF: eglChooseConfig+10j
		cmp	[ebp+arg_10], 0
		jnz	short loc_10005852
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		jmp	short loc_1000583B
; ---------------------------------------------------------------------------

loc_10005852:				; CODE XREF: eglChooseConfig+1Aj
		mov	eax, [ebp+arg_4]
		mov	[ebp+arg_0], 3038h
		test	eax, eax
		jnz	short loc_10005863
		lea	eax, [ebp+arg_0]

loc_10005863:				; CODE XREF: eglChooseConfig+35j
		push	[ebp+arg_10]
		lea	ecx, [esi+14h]
		push	[ebp+arg_C]
		push	eax
		push	[ebp+arg_8]
		call	sub_1000415C
		lea	eax, [ebp+arg_10]
		mov	[ebp+arg_10], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10005888:				; CODE XREF: eglChooseConfig+14j
		pop	esi
		pop	ebp
		retn	14h
eglChooseConfig	endp

; Exported entry  33. eglCopyBuffers

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglCopyBuffers
eglCopyBuffers	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_4]
		mov	esi, [ebp+arg_0]
		push	esi
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_100058A7

loc_100058A3:				; CODE XREF: eglCopyBuffers+31j
		xor	eax, eax
		jmp	short loc_100058D0
; ---------------------------------------------------------------------------

loc_100058A7:				; CODE XREF: eglCopyBuffers+14j
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+70h]
		test	al, al
		jz	short loc_100058C0
		call	sub_10002AEF
		mov	dword ptr [eax], 300Eh
		jmp	short loc_100058A3
; ---------------------------------------------------------------------------

loc_100058C0:				; CODE XREF: eglCopyBuffers+24j
		and	[ebp+arg_4], 0
		lea	eax, [ebp+arg_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_100058D0:				; CODE XREF: eglCopyBuffers+18j
		pop	esi
		pop	ebp
		retn	0Ch
eglCopyBuffers	endp

; Exported entry  23. eglCreateContext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglCreateContext
eglCreateContext proc near		; DATA XREF: .rdata:off_10008748o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	ecx, [ebp+arg_C]
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		mov	byte ptr [ebp+var_4], 0
		inc	edi
		test	ecx, ecx
		jz	loc_100059C3
		mov	eax, [ecx]
		mov	edx, 3038h
		cmp	eax, edx
		jz	loc_100059C3
		add	ecx, 4

loc_10005900:				; CODE XREF: eglCreateContext+7Aj
		sub	eax, 3098h
		jz	short loc_10005945
		sub	eax, 27h
		jz	short loc_10005927
		sub	eax, 79h
		jnz	short loc_10005935
		cmp	dword ptr [ecx], 31BFh
		jnz	short loc_1000591F
		mov	byte ptr [ebp+var_4], 1
		jmp	short loc_10005947
; ---------------------------------------------------------------------------

loc_1000591F:				; CODE XREF: eglCreateContext+42j
		cmp	dword ptr [ecx], 31BEh
		jmp	short loc_10005933
; ---------------------------------------------------------------------------

loc_10005927:				; CODE XREF: eglCreateContext+35j
		cmp	dword ptr [ecx], 1
		jz	loc_100059C3
		cmp	dword ptr [ecx], 0

loc_10005933:				; CODE XREF: eglCreateContext+50j
		jz	short loc_10005947

loc_10005935:				; CODE XREF: eglCreateContext+3Aj
		call	sub_10002AEF
		mov	dword ptr [eax], 3004h
		jmp	loc_100059CE
; ---------------------------------------------------------------------------

loc_10005945:				; CODE XREF: eglCreateContext+30j
		mov	edi, [ecx]

loc_10005947:				; CODE XREF: eglCreateContext+48j
					; eglCreateContext:loc_10005933j
		mov	eax, [ecx+4]
		add	ecx, 8
		cmp	eax, edx
		jnz	short loc_10005900
		cmp	edi, 2
		jz	short loc_1000595B
		cmp	edi, 3
		jnz	short loc_100059C3

loc_1000595B:				; CODE XREF: eglCreateContext+7Fj
		mov	esi, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		test	esi, esi
		jz	short loc_100059A1
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		cmp	al, byte ptr [ebp+var_4]
		jz	short loc_1000597E

loc_10005971:				; CODE XREF: eglCreateContext+CAj
		call	sub_10002AEF
		mov	dword ptr [eax], 3009h
		jmp	short loc_100059CE
; ---------------------------------------------------------------------------

loc_1000597E:				; CODE XREF: eglCreateContext+9Aj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		cmp	eax, edi
		jz	short loc_10005996
		call	sub_10002AEF
		mov	dword ptr [eax], 3006h
		jmp	short loc_100059CE
; ---------------------------------------------------------------------------

loc_10005996:				; CODE XREF: eglCreateContext+B2j
		mov	eax, [esi+140h]
		cmp	eax, [ebx+2Ch]
		jnz	short loc_10005971

loc_100059A1:				; CODE XREF: eglCreateContext+8Ej
		push	[ebp+arg_4]
		push	ebx
		call	sub_1000560A
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_100059CE
		push	0
		push	[ebp+var_4]
		mov	ecx, ebx
		push	esi
		push	edi
		push	[ebp+arg_4]
		call	sub_10003608
		jmp	short loc_100059D0
; ---------------------------------------------------------------------------

loc_100059C3:				; CODE XREF: eglCreateContext+13j
					; eglCreateContext+22j	...
		call	sub_10002AEF
		mov	dword ptr [eax], 3005h

loc_100059CE:				; CODE XREF: eglCreateContext+6Bj
					; eglCreateContext+A7j	...
		xor	eax, eax

loc_100059D0:				; CODE XREF: eglCreateContext+ECj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	10h
eglCreateContext endp

; Exported entry  18. eglCreatePbufferFromClientBuffer

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglCreatePbufferFromClientBuffer
eglCreatePbufferFromClientBuffer proc near ; DATA XREF:	.rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_0]
		call	sub_1000560A
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_10005A1A
		cmp	[ebp+arg_4], 3200h
		jnz	short loc_10005A0F
		cmp	[ebp+arg_8], 0
		jz	short loc_10005A0F
		push	[ebp+arg_10]
		mov	ecx, [ebp+arg_0]
		push	[ebp+arg_8]
		push	[ebp+arg_C]
		call	sub_100036AC
		jmp	short loc_10005A1C
; ---------------------------------------------------------------------------

loc_10005A0F:				; CODE XREF: eglCreatePbufferFromClientBuffer+1Bj
					; eglCreatePbufferFromClientBuffer+21j
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch

loc_10005A1A:				; CODE XREF: eglCreatePbufferFromClientBuffer+12j
		xor	eax, eax

loc_10005A1C:				; CODE XREF: eglCreatePbufferFromClientBuffer+34j
		pop	ebp
		retn	14h
eglCreatePbufferFromClientBuffer endp

; Exported entry  10. eglCreatePbufferSurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglCreatePbufferSurface
eglCreatePbufferSurface	proc near	; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000560A
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10005A38
		xor	eax, eax
		jmp	short loc_10005A48
; ---------------------------------------------------------------------------

loc_10005A38:				; CODE XREF: eglCreatePbufferSurface+12j
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		push	0
		push	[ebp+arg_4]
		call	sub_100036AC

loc_10005A48:				; CODE XREF: eglCreatePbufferSurface+16j
		pop	ebp
		retn	0Ch
eglCreatePbufferSurface	endp

; Exported entry  11. eglCreatePixmapSurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglCreatePixmapSurface
eglCreatePixmapSurface proc near	; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000560A
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10005A64
		xor	eax, eax
		jmp	short loc_10005A74
; ---------------------------------------------------------------------------

loc_10005A64:				; CODE XREF: eglCreatePixmapSurface+12j
		and	[ebp+arg_4], 0
		lea	eax, [ebp+arg_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10005A74:				; CODE XREF: eglCreatePixmapSurface+16j
		pop	ebp
		retn	10h
eglCreatePixmapSurface endp

; Exported entry   9. eglCreateWindowSurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	eglCreateWindowSurface(int, int, HWND hWnd, int)
		public eglCreateWindowSurface
eglCreateWindowSurface proc near	; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
hWnd		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000560A
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10005A90

loc_10005A8C:				; CODE XREF: eglCreateWindowSurface+30j
		xor	eax, eax
		jmp	short loc_10005ABB
; ---------------------------------------------------------------------------

loc_10005A90:				; CODE XREF: eglCreateWindowSurface+12j
		push	[ebp+hWnd]	; hWnd
		call	sub_10004919
		pop	ecx
		test	al, al
		jnz	short loc_10005AAA
		call	sub_10002AEF
		mov	dword ptr [eax], 300Bh
		jmp	short loc_10005A8C
; ---------------------------------------------------------------------------

loc_10005AAA:				; CODE XREF: eglCreateWindowSurface+23j
		push	[ebp+arg_C]	; int
		mov	ecx, [ebp+arg_0] ; int
		push	[ebp+arg_4]	; int
		push	[ebp+hWnd]	; int
		call	sub_100038CD

loc_10005ABB:				; CODE XREF: eglCreateWindowSurface+16j
		pop	ebp
		retn	10h
eglCreateWindowSurface endp

; Exported entry  24. eglDestroyContext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglDestroyContext
eglDestroyContext proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000563C
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10005AD7

loc_10005AD3:				; CODE XREF: eglDestroyContext+29j
		xor	eax, eax
		jmp	short loc_10005B08
; ---------------------------------------------------------------------------

loc_10005AD7:				; CODE XREF: eglDestroyContext+12j
		cmp	[ebp+arg_4], 0
		jnz	short loc_10005AEA
		call	sub_10002AEF
		mov	dword ptr [eax], 3006h
		jmp	short loc_10005AD3
; ---------------------------------------------------------------------------

loc_10005AEA:				; CODE XREF: eglDestroyContext+1Cj
		push	[ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		call	sub_10003A76
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10005B08:				; CODE XREF: eglDestroyContext+16j
		pop	ebp
		retn	8
eglDestroyContext endp

; Exported entry  12. eglDestroySurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglDestroySurface
eglDestroySurface proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10005B24

loc_10005B20:				; CODE XREF: eglDestroySurface+29j
		xor	eax, eax
		jmp	short loc_10005B55
; ---------------------------------------------------------------------------

loc_10005B24:				; CODE XREF: eglDestroySurface+12j
		cmp	[ebp+arg_4], 0
		jnz	short loc_10005B37
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10005B20
; ---------------------------------------------------------------------------

loc_10005B37:				; CODE XREF: eglDestroySurface+1Cj
		push	[ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		call	sub_10003A94
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10005B55:				; CODE XREF: eglDestroySurface+16j
		pop	ebp
		retn	8
eglDestroySurface endp

; Exported entry   8. eglGetConfigAttrib

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglGetConfigAttrib
eglGetConfigAttrib proc	near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000560A
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10005B71

loc_10005B6D:				; CODE XREF: eglGetConfigAttrib+38j
		xor	eax, eax
		jmp	short loc_10005BA6
; ---------------------------------------------------------------------------

loc_10005B71:				; CODE XREF: eglGetConfigAttrib+12j
		push	[ebp+arg_C]
		mov	ecx, [ebp+arg_0]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	sub_10003FC9
		test	al, al
		jnz	short loc_10005B93
		call	sub_10002AEF
		mov	dword ptr [eax], 3004h
		jmp	short loc_10005B6D
; ---------------------------------------------------------------------------

loc_10005B93:				; CODE XREF: eglGetConfigAttrib+2Bj
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10005BA6:				; CODE XREF: eglGetConfigAttrib+16j
		pop	ebp
		retn	10h
eglGetConfigAttrib endp

; Exported entry   6. eglGetConfigs

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglGetConfigs
eglGetConfigs	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	esi
		call	sub_1000566E
		pop	ecx
		test	al, al
		jnz	short loc_10005BC0

loc_10005BBC:				; CODE XREF: eglGetConfigs+27j
					; eglGetConfigs+54j
		xor	eax, eax
		jmp	short loc_10005C13
; ---------------------------------------------------------------------------

loc_10005BC0:				; CODE XREF: eglGetConfigs+10j
		cmp	[ebp+arg_C], 0
		jnz	short loc_10005BD3
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		jmp	short loc_10005BBC
; ---------------------------------------------------------------------------

loc_10005BD3:				; CODE XREF: eglGetConfigs+1Aj
		push	[ebp+arg_C]
		lea	eax, [ebp+arg_0]
		mov	[ebp+arg_0], 3038h
		push	[ebp+arg_8]
		lea	ecx, [esi+14h]
		push	eax
		push	[ebp+arg_4]
		call	sub_1000415C
		test	al, al
		jnz	short loc_10005C00
		call	sub_10002AEF
		mov	dword ptr [eax], 3004h
		jmp	short loc_10005BBC
; ---------------------------------------------------------------------------

loc_10005C00:				; CODE XREF: eglGetConfigs+47j
		lea	eax, [ebp+arg_C]
		mov	[ebp+arg_C], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10005C13:				; CODE XREF: eglGetConfigs+14j
		pop	esi
		pop	ebp
		retn	10h
eglGetConfigs	endp

; Exported entry  26. eglGetCurrentContext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglGetCurrentContext
eglGetCurrentContext proc near		; DATA XREF: .rdata:off_10008748o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		call	libGLESv2_147
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
eglGetCurrentContext endp

; Exported entry  28. eglGetCurrentDisplay

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglGetCurrentDisplay
eglGetCurrentDisplay proc near		; DATA XREF: .rdata:off_10008748o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		call	sub_10002AEF
		mov	eax, [eax+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
eglGetCurrentDisplay endp

; Exported entry  27. eglGetCurrentSurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglGetCurrentSurface
eglGetCurrentSurface proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 305Ah
		jnz	short loc_10005C78
		call	sub_10002AEF
		mov	eax, [eax+10h]

loc_10005C67:				; CODE XREF: eglGetCurrentSurface+36j
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		jmp	short loc_10005C98
; ---------------------------------------------------------------------------

loc_10005C78:				; CODE XREF: eglGetCurrentSurface+Aj
		cmp	[ebp+arg_0], 3059h
		jnz	short loc_10005C8B
		call	sub_10002AEF
		mov	eax, [eax+0Ch]
		jmp	short loc_10005C67
; ---------------------------------------------------------------------------

loc_10005C8B:				; CODE XREF: eglGetCurrentSurface+2Cj
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		xor	eax, eax

loc_10005C98:				; CODE XREF: eglGetCurrentSurface+23j
		pop	ebp
		retn	4
eglGetCurrentSurface endp

; Exported entry   2. eglGetDisplay

; =============== S U B	R O U T	I N E =======================================


		public eglGetDisplay
eglGetDisplay	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  4

		push	3203h
		push	[esp+4+arg_0]
		call	sub_100043E8
		pop	ecx
		pop	ecx
		retn	4
eglGetDisplay	endp

; Exported entry   1. eglGetError

; =============== S U B	R O U T	I N E =======================================


		public eglGetError
eglGetError	proc near		; DATA XREF: .rdata:off_10008748o
		push	esi
		push	edi
		call	sub_10002AEF
		mov	edi, 3000h
		mov	esi, [eax]
		cmp	esi, edi
		jz	short loc_10005CC8
		call	sub_10002AEF
		mov	[eax], edi

loc_10005CC8:				; CODE XREF: eglGetError+10j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
eglGetError	endp

; Exported entry  35. eglGetPlatformDisplayEXT

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	eglGetPlatformDisplayEXT(int, HDC hDC, int)
		public eglGetPlatformDisplayEXT
eglGetPlatformDisplayEXT proc near	; DATA XREF: .rdata:100084E4o
					; .rdata:off_10008748o

arg_0		= dword	ptr  8
hDC		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 3201h
		jz	short loc_10005CEB
		call	sub_10002AEF
		mov	dword ptr [eax], 3005h
		xor	eax, eax
		jmp	loc_10005D73
; ---------------------------------------------------------------------------

loc_10005CEB:				; CODE XREF: eglGetPlatformDisplayEXT+Aj
		push	[ebp+hDC]	; hDC
		call	ds:WindowFromDC
		test	eax, eax
		jnz	short loc_10005D09
		and	[ebp+hDC], eax
		lea	eax, [ebp+hDC]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		jmp	short loc_10005D73
; ---------------------------------------------------------------------------

loc_10005D09:				; CODE XREF: eglGetPlatformDisplayEXT+29j
		mov	ecx, [ebp+arg_8]
		push	esi
		mov	esi, 3203h
		mov	eax, esi
		push	edi
		test	ecx, ecx
		jz	short loc_10005D66
		mov	edx, [ecx]
		mov	edi, 3038h
		cmp	edx, edi
		jz	short loc_10005D66

loc_10005D24:				; CODE XREF: eglGetPlatformDisplayEXT+69j
		cmp	edx, 3202h
		jnz	short loc_10005D2F
		mov	eax, [ecx+4]

loc_10005D2F:				; CODE XREF: eglGetPlatformDisplayEXT+5Dj
		add	ecx, 8
		mov	edx, [ecx]
		cmp	edx, edi
		jnz	short loc_10005D24
		cmp	eax, esi
		jz	short loc_10005D66
		jle	short loc_10005D5D
		cmp	eax, 3206h
		jle	short loc_10005D66
		cmp	eax, 3208h
		jg	short loc_10005D5D
		and	[ebp+hDC], 0
		lea	eax, [ebp+hDC]

loc_10005D53:				; CODE XREF: eglGetPlatformDisplayEXT+97j
		push	eax
		call	sub_100022B9
		mov	eax, [eax]
		jmp	short loc_10005D70
; ---------------------------------------------------------------------------

loc_10005D5D:				; CODE XREF: eglGetPlatformDisplayEXT+6Fj
					; eglGetPlatformDisplayEXT+7Dj
		and	[ebp+arg_0], 0
		lea	eax, [ebp+arg_0]
		jmp	short loc_10005D53
; ---------------------------------------------------------------------------

loc_10005D66:				; CODE XREF: eglGetPlatformDisplayEXT+4Aj
					; eglGetPlatformDisplayEXT+55j	...
		push	eax
		push	[ebp+hDC]
		call	sub_100043E8
		pop	ecx

loc_10005D70:				; CODE XREF: eglGetPlatformDisplayEXT+8Ej
		pop	ecx
		pop	edi
		pop	esi

loc_10005D73:				; CODE XREF: eglGetPlatformDisplayEXT+19j
					; eglGetPlatformDisplayEXT+3Aj
		pop	ebp
		retn	0Ch
eglGetPlatformDisplayEXT endp

; Exported entry  34. eglGetProcAddress

; =============== S U B	R O U T	I N E =======================================


		public eglGetProcAddress
eglGetProcAddress proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  4

		xor	eax, eax
		push	ebx

loc_10005D7A:				; CODE XREF: eglGetProcAddress+3Bj
		mov	edx, ds:off_100084C8[eax*8]
		mov	ecx, [esp+4+arg_0]

loc_10005D85:				; CODE XREF: eglGetProcAddress+28j
		mov	bl, [ecx]
		cmp	bl, [edx]
		jnz	short loc_10005DA5
		test	bl, bl
		jz	short loc_10005DA1
		mov	bl, [ecx+1]
		cmp	bl, [edx+1]
		jnz	short loc_10005DA5
		add	ecx, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_10005D85

loc_10005DA1:				; CODE XREF: eglGetProcAddress+16j
		xor	ecx, ecx
		jmp	short loc_10005DAA
; ---------------------------------------------------------------------------

loc_10005DA5:				; CODE XREF: eglGetProcAddress+12j
					; eglGetProcAddress+1Ej
		sbb	ecx, ecx
		or	ecx, 1

loc_10005DAA:				; CODE XREF: eglGetProcAddress+2Cj
		test	ecx, ecx
		jz	short loc_10005DBA
		inc	eax
		cmp	eax, 5
		jb	short loc_10005D7A
		pop	ebx
		jmp	libGLESv2_148
; ---------------------------------------------------------------------------

loc_10005DBA:				; CODE XREF: eglGetProcAddress+35j
		mov	eax, ds:off_100084CC[eax*8]
		pop	ebx
		retn	4
eglGetProcAddress endp

; Exported entry   3. eglInitialize

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglInitialize
eglInitialize	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jnz	short loc_10005DDE
		call	sub_10002AEF
		mov	dword ptr [eax], 3008h

loc_10005DDA:				; CODE XREF: eglInitialize+2Dj
		xor	eax, eax
		jmp	short loc_10005E1C
; ---------------------------------------------------------------------------

loc_10005DDE:				; CODE XREF: eglInitialize+8j
		call	sub_1000471B
		test	al, al
		jnz	short loc_10005DF4
		call	sub_10002AEF
		mov	dword ptr [eax], 3001h
		jmp	short loc_10005DDA
; ---------------------------------------------------------------------------

loc_10005DF4:				; CODE XREF: eglInitialize+20j
		mov	eax, [ebp+arg_4]
		xor	ecx, ecx
		inc	ecx
		test	eax, eax
		jz	short loc_10005E00
		mov	[eax], ecx

loc_10005E00:				; CODE XREF: eglInitialize+37j
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_10005E0D
		mov	dword ptr [eax], 4

loc_10005E0D:				; CODE XREF: eglInitialize+40j
		lea	eax, [ebp+arg_0]
		mov	[ebp+arg_0], ecx
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10005E1C:				; CODE XREF: eglInitialize+17j
		pop	ebp
		retn	0Ch
eglInitialize	endp

; Exported entry  25. eglMakeCurrent

; =============== S U B	R O U T	I N E =======================================


		public eglMakeCurrent
eglMakeCurrent	proc near		; CODE XREF: eglReleaseThread+Ap
					; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		mov	ebp, [esp+8+arg_C]
		test	ebp, ebp
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		setz	cl
		test	edi, edi
		jz	short loc_10005E40
		test	ebx, ebx
		jz	short loc_10005E40
		xor	al, al
		jmp	short loc_10005E42
; ---------------------------------------------------------------------------

loc_10005E40:				; CODE XREF: eglMakeCurrent+16j
					; eglMakeCurrent+1Aj
		mov	al, 1

loc_10005E42:				; CODE XREF: eglMakeCurrent+1Ej
		cmp	cl, al
		jz	short loc_10005E58
		call	sub_10002AEF
		mov	dword ptr [eax], 3009h
		xor	eax, eax
		jmp	loc_10005F01
; ---------------------------------------------------------------------------

loc_10005E58:				; CODE XREF: eglMakeCurrent+24j
		push	esi
		mov	esi, [esp+10h+arg_0]
		test	ebp, ebp
		jz	short loc_10005E6E
		push	ebp
		push	esi
		call	sub_1000563C
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_10005ECB

loc_10005E6E:				; CODE XREF: eglMakeCurrent+3Fj
		test	esi, esi
		jz	short loc_10005EA9
		mov	ecx, esi
		call	sub_100048B5
		test	al, al
		jz	short loc_10005EA9
		mov	ecx, [esi+2Ch]
		push	1
		mov	[esp+14h+arg_C], ecx
		mov	eax, [ecx]
		call	dword ptr [eax+74h]
		test	al, al
		jnz	short loc_10005ECB
		mov	ecx, [esp+10h+arg_C]
		mov	eax, [ecx]
		call	dword ptr [eax+70h]
		test	al, al
		jz	short loc_10005EA9
		call	sub_10002AEF
		mov	dword ptr [eax], 300Eh
		jmp	short loc_10005ECB
; ---------------------------------------------------------------------------

loc_10005EA9:				; CODE XREF: eglMakeCurrent+50j
					; eglMakeCurrent+5Bj ...
		test	edi, edi
		jz	short loc_10005EBA
		push	edi
		push	esi
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_10005ECB

loc_10005EBA:				; CODE XREF: eglMakeCurrent+8Bj
		test	ebx, ebx
		jz	short loc_10005ECF
		push	ebx
		push	esi
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10005ECF

loc_10005ECB:				; CODE XREF: eglMakeCurrent+4Cj
					; eglMakeCurrent+6Dj ...
		xor	eax, eax
		jmp	short loc_10005F00
; ---------------------------------------------------------------------------

loc_10005ECF:				; CODE XREF: eglMakeCurrent+9Cj
					; eglMakeCurrent+A9j
		push	esi
		call	sub_100052C2
		push	edi
		call	sub_100052CF
		push	ebx
		call	sub_100052DC
		push	edi
		push	esi
		push	ebp
		call	libGLESv2_146
		lea	eax, [esp+28h+arg_C]
		mov	[esp+28h+arg_C], 1
		push	eax
		call	sub_100022B9
		add	esp, 1Ch
		mov	eax, [eax]

loc_10005F00:				; CODE XREF: eglMakeCurrent+ADj
		pop	esi

loc_10005F01:				; CODE XREF: eglMakeCurrent+33j
		pop	edi
		pop	ebp
		pop	ebx
		retn	10h
eglMakeCurrent	endp

; Exported entry  37. eglPostSubBufferNV

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglPostSubBufferNV
eglPostSubBufferNV proc	near		; DATA XREF: .rdata:100084DCo
					; .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_8], 0
		push	esi
		push	edi
		jl	loc_10005F97
		cmp	[ebp+arg_C], 0
		jl	short loc_10005F97
		cmp	[ebp+arg_10], 0
		jl	short loc_10005F97
		cmp	[ebp+arg_14], 0
		jl	short loc_10005F97
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_0]
		push	esi
		push	edi
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_10005FA2
		mov	ecx, [edi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+70h]
		test	al, al
		jz	short loc_10005F54
		call	sub_10002AEF
		mov	dword ptr [eax], 300Eh
		jmp	short loc_10005FA2
; ---------------------------------------------------------------------------

loc_10005F54:				; CODE XREF: eglPostSubBufferNV+3Ej
		test	esi, esi
		jnz	short loc_10005F65
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10005FA2
; ---------------------------------------------------------------------------

loc_10005F65:				; CODE XREF: eglPostSubBufferNV+4Fj
		cmp	dword ptr [esi+40h], 0
		jz	short loc_10005F82
		push	[ebp+arg_14]
		mov	ecx, esi
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		call	sub_100054A4
		test	al, al
		jz	short loc_10005FA2

loc_10005F82:				; CODE XREF: eglPostSubBufferNV+62j
		lea	eax, [ebp+arg_14]
		mov	[ebp+arg_14], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		jmp	short loc_10005FA4
; ---------------------------------------------------------------------------

loc_10005F97:				; CODE XREF: eglPostSubBufferNV+9j
					; eglPostSubBufferNV+13j ...
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch

loc_10005FA2:				; CODE XREF: eglPostSubBufferNV+32j
					; eglPostSubBufferNV+4Bj ...
		xor	eax, eax

loc_10005FA4:				; CODE XREF: eglPostSubBufferNV+8Ej
		pop	edi
		pop	esi
		pop	ebp
		retn	18h
eglPostSubBufferNV endp

; Exported entry  15. eglQueryAPI

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglQueryAPI
eglQueryAPI	proc near		; DATA XREF: .rdata:off_10008748o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		call	sub_10002AEF
		mov	eax, [eax+4]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
eglQueryAPI	endp

; Exported entry  29. eglQueryContext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglQueryContext
eglQueryContext	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000563C
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10005FE1
		xor	eax, eax
		jmp	short loc_10005FF1
; ---------------------------------------------------------------------------

loc_10005FE1:				; CODE XREF: eglQueryContext+12j
		and	[ebp+arg_4], 0
		lea	eax, [ebp+arg_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10005FF1:				; CODE XREF: eglQueryContext+16j
		pop	ebp
		retn	10h
eglQueryContext	endp

; Exported entry   5. eglQueryString

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglQueryString
eglQueryString	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jnz	short loc_1000600C
		cmp	esi, 3055h
		jz	short loc_1000601B

loc_1000600C:				; CODE XREF: eglQueryString+Dj
		push	edi
		call	sub_1000566E
		pop	ecx
		test	al, al
		jnz	short loc_1000601B

loc_10006017:				; CODE XREF: eglQueryString+44j
		xor	eax, eax
		jmp	short loc_10006082
; ---------------------------------------------------------------------------

loc_1000601B:				; CODE XREF: eglQueryString+15j
					; eglQueryString+20j
		sub	esi, 3053h
		jz	short loc_10006068
		dec	esi
		jz	short loc_1000605C
		dec	esi
		jz	short loc_10006047
		sub	esi, 38h
		jz	short loc_1000603B
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		jmp	short loc_10006017
; ---------------------------------------------------------------------------

loc_1000603B:				; CODE XREF: eglQueryString+37j
		push	offset aOpengl_es ; "OpenGL_ES"
		call	sub_100022B9
		jmp	short loc_10006081
; ---------------------------------------------------------------------------

loc_10006047:				; CODE XREF: eglQueryString+32j
		push	edi
		call	sub_1000445D
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		push	eax
		call	sub_100022B9
		pop	ecx
		jmp	short loc_1000607F
; ---------------------------------------------------------------------------

loc_1000605C:				; CODE XREF: eglQueryString+2Fj
		push	offset a1_4Angle2_1_04 ; "1.4 (ANGLE 2.1.040a674b6d67)"
		call	sub_100022B9
		jmp	short loc_10006081
; ---------------------------------------------------------------------------

loc_10006068:				; CODE XREF: eglQueryString+2Cj
		lea	eax, [edi+48h]
		cmp	dword ptr [eax+14h], 10h
		jb	short loc_10006073
		mov	eax, [eax]

loc_10006073:				; CODE XREF: eglQueryString+7Aj
		mov	[ebp+arg_4], eax
		lea	eax, [ebp+arg_4]
		push	eax
		call	sub_100022B9

loc_1000607F:				; CODE XREF: eglQueryString+65j
		mov	eax, [eax]

loc_10006081:				; CODE XREF: eglQueryString+50j
					; eglQueryString+71j
		pop	ecx

loc_10006082:				; CODE XREF: eglQueryString+24j
		pop	edi
		pop	esi
		pop	ebp
		retn	8
eglQueryString	endp

; Exported entry  13. eglQuerySurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglQuerySurface
eglQuerySurface	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	esi
		push	[ebp+arg_0]
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_100060A5

loc_1000609E:				; CODE XREF: eglQuerySurface+2Cj
					; eglQuerySurface+10Dj
		xor	eax, eax
		jmp	loc_100061C3
; ---------------------------------------------------------------------------

loc_100060A5:				; CODE XREF: eglQuerySurface+14j
		test	esi, esi
		jnz	short loc_100060B6
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh
		jmp	short loc_1000609E
; ---------------------------------------------------------------------------

loc_100060B6:				; CODE XREF: eglQuerySurface+1Fj
		mov	eax, [ebp+arg_8]
		mov	ecx, 3087h
		cmp	eax, ecx
		jg	loc_10006148
		jz	loc_100061B0
		add	ecx, 0FFFFFFF9h
		cmp	eax, ecx
		jg	short loc_10006120
		jz	short loc_10006114
		sub	eax, 3028h
		jz	short loc_10006108
		sub	eax, 2Eh
		jz	short loc_100060FC
		dec	eax
		jz	short loc_100060F0
		dec	eax
		jz	loc_100061B0
		jmp	loc_1000618A
; ---------------------------------------------------------------------------

loc_100060F0:				; CODE XREF: eglQuerySurface+5Aj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		jmp	loc_100061AB
; ---------------------------------------------------------------------------

loc_100060FC:				; CODE XREF: eglQuerySurface+57j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		jmp	loc_100061AB
; ---------------------------------------------------------------------------

loc_10006108:				; CODE XREF: eglQuerySurface+52j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		jmp	loc_100061AB
; ---------------------------------------------------------------------------

loc_10006114:				; CODE XREF: eglQuerySurface+4Bj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+24h]
		jmp	loc_100061AB
; ---------------------------------------------------------------------------

loc_10006120:				; CODE XREF: eglQuerySurface+49j
		sub	eax, 3081h
		jz	short loc_1000613F
		dec	eax
		jz	loc_100061B0
		dec	eax
		jz	short loc_100061B0
		sub	eax, 3
		jnz	short loc_1000618A
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+1Ch]
		jmp	short loc_100061AB
; ---------------------------------------------------------------------------

loc_1000613F:				; CODE XREF: eglQuerySurface+9Dj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+28h]
		jmp	short loc_100061AB
; ---------------------------------------------------------------------------

loc_10006148:				; CODE XREF: eglQuerySurface+38j
		mov	ecx, 3093h
		cmp	eax, ecx
		jg	short loc_10006177
		jz	short loc_1000616E
		sub	eax, 3088h
		jz	short loc_100061B0
		sub	eax, 8
		jz	short loc_100061B0
		dec	eax
		jz	short loc_100061B0
		dec	eax
		jnz	short loc_1000618A
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+18h]
		jmp	short loc_100061AB
; ---------------------------------------------------------------------------

loc_1000616E:				; CODE XREF: eglQuerySurface+C9j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+20h]
		jmp	short loc_100061AB
; ---------------------------------------------------------------------------

loc_10006177:				; CODE XREF: eglQuerySurface+C7j
		sub	eax, 3099h
		jz	short loc_100061B0
		sub	eax, 25h
		jz	short loc_100061A4
		sub	eax, 143h
		jz	short loc_1000619A

loc_1000618A:				; CODE XREF: eglQuerySurface+63j
					; eglQuerySurface+ACj ...
		call	sub_10002AEF
		mov	dword ptr [eax], 3004h
		jmp	loc_1000609E
; ---------------------------------------------------------------------------

loc_1000619A:				; CODE XREF: eglQuerySurface+100j
		mov	eax, [ebp+arg_C]
		mov	ecx, [esi+44h]
		mov	[eax], ecx
		jmp	short loc_100061B0
; ---------------------------------------------------------------------------

loc_100061A4:				; CODE XREF: eglQuerySurface+F9j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]

loc_100061AB:				; CODE XREF: eglQuerySurface+6Fj
					; eglQuerySurface+7Bj ...
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax

loc_100061B0:				; CODE XREF: eglQuerySurface+3Ej
					; eglQuerySurface+5Dj ...
		lea	eax, [ebp+arg_C]
		mov	[ebp+arg_C], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_100061C3:				; CODE XREF: eglQuerySurface+18j
		pop	esi
		pop	ebp
		retn	10h
eglQuerySurface	endp

; Exported entry  36. eglQuerySurfacePointerANGLE

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglQuerySurfacePointerANGLE
eglQuerySurfacePointerANGLE proc near	; DATA XREF: .rdata:off_100084CCo
					; .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	esi
		push	[ebp+arg_0]
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_100061E2

loc_100061DE:				; CODE XREF: eglQuerySurfacePointerANGLE+29j
					; eglQuerySurfacePointerANGLE+45j
		xor	eax, eax
		jmp	short loc_10006253
; ---------------------------------------------------------------------------

loc_100061E2:				; CODE XREF: eglQuerySurfacePointerANGLE+14j
		test	esi, esi
		jnz	short loc_100061F3
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh
		jmp	short loc_100061DE
; ---------------------------------------------------------------------------

loc_100061F3:				; CODE XREF: eglQuerySurfacePointerANGLE+1Cj
		mov	eax, [ebp+arg_8]
		sub	eax, 3200h
		jz	short loc_10006223
		sub	eax, 9
		jz	short loc_1000620F
		call	sub_10002AEF
		mov	dword ptr [eax], 3004h
		jmp	short loc_100061DE
; ---------------------------------------------------------------------------

loc_1000620F:				; CODE XREF: eglQuerySurfacePointerANGLE+38j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_10006239
		mov	edx, [eax]
		mov	ecx, eax
		call	dword ptr [edx+18h]
		jmp	short loc_10006235
; ---------------------------------------------------------------------------

loc_10006223:				; CODE XREF: eglQuerySurfacePointerANGLE+33j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_10006239
		mov	edx, [eax]
		mov	ecx, eax
		call	dword ptr [edx+14h]

loc_10006235:				; CODE XREF: eglQuerySurfacePointerANGLE+59j
		mov	ecx, eax
		jmp	short loc_1000623B
; ---------------------------------------------------------------------------

loc_10006239:				; CODE XREF: eglQuerySurfacePointerANGLE+50j
					; eglQuerySurfacePointerANGLE+64j
		xor	ecx, ecx

loc_1000623B:				; CODE XREF: eglQuerySurfacePointerANGLE+6Fj
		mov	eax, [ebp+arg_C]
		mov	[ebp+arg_C], 1
		mov	[eax], ecx
		lea	eax, [ebp+arg_C]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10006253:				; CODE XREF: eglQuerySurfacePointerANGLE+18j
		pop	esi
		pop	ebp
		retn	10h
eglQuerySurfacePointerANGLE endp

; Exported entry  21. eglReleaseTexImage

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglReleaseTexImage
eglReleaseTexImage proc	near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	esi
		push	[ebp+arg_0]
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_100062DB
		cmp	[ebp+arg_8], 3084h
		jz	short loc_10006284
		call	sub_10002AEF
		mov	dword ptr [eax], 300Ch
		jmp	short loc_100062DB
; ---------------------------------------------------------------------------

loc_10006284:				; CODE XREF: eglReleaseTexImage+1Dj
		test	esi, esi
		jz	short loc_100062D0
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_100062D0
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+24h]
		cmp	eax, 305Ch
		jnz	short loc_100062A9
		call	sub_10002AEF
		mov	dword ptr [eax], 3009h
		jmp	short loc_100062DB
; ---------------------------------------------------------------------------

loc_100062A9:				; CODE XREF: eglReleaseTexImage+42j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+34h]
		test	eax, eax
		jz	short loc_100062BB
		mov	edx, [eax]
		mov	ecx, eax
		call	dword ptr [edx+1Ch]

loc_100062BB:				; CODE XREF: eglReleaseTexImage+5Aj
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		jmp	short loc_100062DD
; ---------------------------------------------------------------------------

loc_100062D0:				; CODE XREF: eglReleaseTexImage+2Ej
					; eglReleaseTexImage+34j
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh

loc_100062DB:				; CODE XREF: eglReleaseTexImage+14j
					; eglReleaseTexImage+2Aj ...
		xor	eax, eax

loc_100062DD:				; CODE XREF: eglReleaseTexImage+76j
		pop	esi
		pop	ebp
		retn	0Ch
eglReleaseTexImage endp

; Exported entry  17. eglReleaseThread

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglReleaseThread
eglReleaseThread proc near		; DATA XREF: .rdata:off_10008748o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	eglMakeCurrent
		lea	eax, [ebp+var_4]
		mov	[ebp+var_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
eglReleaseThread endp

; Exported entry  19. eglSurfaceAttrib

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglSurfaceAttrib
eglSurfaceAttrib proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10006320
		xor	eax, eax
		jmp	short loc_10006333
; ---------------------------------------------------------------------------

loc_10006320:				; CODE XREF: eglSurfaceAttrib+12j
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10006333:				; CODE XREF: eglSurfaceAttrib+16j
		pop	ebp
		retn	10h
eglSurfaceAttrib endp

; Exported entry  38. eglSurfaceReleaseSyncANGLE

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglSurfaceReleaseSyncANGLE
eglSurfaceReleaseSyncANGLE proc	near	; DATA XREF: .rdata:100084D4o
					; .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	esi
		push	[ebp+arg_0]
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_10006351

loc_1000634D:				; CODE XREF: eglSurfaceReleaseSyncANGLE+29j
		xor	eax, eax
		jmp	short loc_10006387
; ---------------------------------------------------------------------------

loc_10006351:				; CODE XREF: eglSurfaceReleaseSyncANGLE+14j
		test	esi, esi
		jnz	short loc_10006362
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh
		jmp	short loc_1000634D
; ---------------------------------------------------------------------------

loc_10006362:				; CODE XREF: eglSurfaceReleaseSyncANGLE+1Cj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_10006374
		mov	edx, [eax]
		mov	ecx, eax
		call	dword ptr [edx+1Ch]

loc_10006374:				; CODE XREF: eglSurfaceReleaseSyncANGLE+34j
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10006387:				; CODE XREF: eglSurfaceReleaseSyncANGLE+18j
		pop	esi
		pop	ebp
		retn	8
eglSurfaceReleaseSyncANGLE endp

; Exported entry  32. eglSwapBuffers

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglSwapBuffers
eglSwapBuffers	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	[ebp+arg_4]
		mov	edi, [ebp+arg_0]
		push	edi
		call	sub_1000569D
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_100063B9
		mov	ecx, [edi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+70h]
		test	al, al
		jz	short loc_100063C0
		call	sub_10002AEF
		mov	dword ptr [eax], 300Eh

loc_100063B9:				; CODE XREF: eglSwapBuffers+14j
					; eglSwapBuffers+45j ...
		xor	eax, eax

loc_100063BB:				; CODE XREF: eglSwapBuffers+66j
		pop	edi
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_100063C0:				; CODE XREF: eglSwapBuffers+20j
		cmp	[ebp+arg_4], 0
		jnz	short loc_100063D3
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh
		jmp	short loc_100063B9
; ---------------------------------------------------------------------------

loc_100063D3:				; CODE XREF: eglSwapBuffers+38j
		mov	ecx, [ebp+arg_4]
		call	sub_10005494
		test	al, al
		jz	short loc_100063B9
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		jmp	short loc_100063BB
eglSwapBuffers	endp

; Exported entry  22. eglSwapInterval

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglSwapInterval
eglSwapInterval	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		call	sub_1000566E
		pop	ecx
		test	al, al
		jnz	short loc_10006408

loc_10006404:				; CODE XREF: eglSwapInterval+2Bj
		xor	eax, eax
		jmp	short loc_1000643C
; ---------------------------------------------------------------------------

loc_10006408:				; CODE XREF: eglSwapInterval+Ej
		call	sub_10002AEF
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jnz	short loc_10006421
		call	sub_10002AEF
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10006404
; ---------------------------------------------------------------------------

loc_10006421:				; CODE XREF: eglSwapInterval+1Ej
		push	[ebp+arg_4]
		call	sub_100052E9
		lea	eax, [ebp+arg_0]
		mov	[ebp+arg_0], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_1000643C:				; CODE XREF: eglSwapInterval+12j
		pop	ebp
		retn	8
eglSwapInterval	endp

; Exported entry   4. eglTerminate

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglTerminate
eglTerminate	proc near		; DATA XREF: .rdata:off_10008748o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jnz	short loc_10006459
		call	sub_10002AEF
		mov	dword ptr [eax], 3008h
		xor	eax, eax
		jmp	short loc_10006471
; ---------------------------------------------------------------------------

loc_10006459:				; CODE XREF: eglTerminate+8j
		call	sub_10005529
		lea	eax, [ebp+arg_0]
		mov	[ebp+arg_0], 1
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]

loc_10006471:				; CODE XREF: eglTerminate+17j
		pop	ebp
		retn	4
eglTerminate	endp

; Exported entry  16. eglWaitClient
; Exported entry  30. eglWaitGL

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglWaitGL
eglWaitGL	proc near		; DATA XREF: .rdata:off_10008748o

var_4		= dword	ptr -4

		push	ebp		; eglWaitClient
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
eglWaitGL	endp

; Exported entry  31. eglWaitNative

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglWaitNative
eglWaitNative	proc near		; DATA XREF: .rdata:off_10008748o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_100022B9
		pop	ecx
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn	4
eglWaitNative	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION libGLESv2_144]
; [00000006 BYTES: COLLAPSED FUNCTION libGLESv2_145]
; [00000006 BYTES: COLLAPSED FUNCTION libGLESv2_146]
; [00000006 BYTES: COLLAPSED FUNCTION libGLESv2_147]
; [00000006 BYTES: COLLAPSED FUNCTION libGLESv2_177]
; [00000006 BYTES: COLLAPSED FUNCTION libGLESv2_178]
; [00000006 BYTES: COLLAPSED FUNCTION libGLESv2_148]
; [00000006 BYTES: COLLAPSED FUNCTION libGLESv2_158]
; [00000006 BYTES: COLLAPSED FUNCTION _purecall]
; [00000006 BYTES: COLLAPSED FUNCTION operator new(uint)]
; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *)]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10006526(_onexit_t)
sub_10006526	proc near		; CODE XREF: sub_100065CF+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	14h
		push	offset stru_100086B8
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10006558
		push	[ebp+arg_0]	; _onexit_t
		call	ds:_onexit
		pop	ecx
		jmp	short loc_100065BD
; ---------------------------------------------------------------------------

loc_10006558:				; CODE XREF: sub_10006526+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_1000A3AC	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+arg_0]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_1000A3AC,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_100065C6
; ---------------------------------------------------------------------------

loc_100065BB:				; CODE XREF: sub_10006526+A8j
		mov	eax, edi

loc_100065BD:				; CODE XREF: sub_10006526+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_100065C3:				; DATA XREF: .rdata:stru_100086B8o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 10006526

loc_100065C6:				; CODE XREF: sub_10006526+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_10006526	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100065CF(_onexit_t)
sub_100065CF	proc near		; CODE XREF: sub_10001000+5p
					; sub_1000100C+5p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]	; _onexit_t
		call	sub_10006526
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_100065CF	endp

; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const &)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::sync(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::uflow(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
		align 10h

__ftol2_sse:
		cmp	dword_1000A390,	0
		jz	short __ftol2
; [00000013 BYTES: COLLAPSED FUNCTION __ftol2_pentium4]
; ---------------------------------------------------------------------------

__ftol2_sse_excpt:
		cmp	dword_1000A390,	0
		jz	short __ftol2
		sub	esp, 4
		fnstcw	word ptr [esp]
		pop	eax
		and	ax, 7Fh
		cmp	ax, 7Fh
		jz	short __ftol2_pentium4
; [00000075 BYTES: COLLAPSED FUNCTION __ftol2]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 10h
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000673C	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_10006877
		mov	eax, dword_1000A06C
		test	eax, eax
		jle	loc_10006870
		dec	eax
		mov	ebx, offset dword_1000A3A0
		mov	dword_1000A06C,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_1000677A
; ---------------------------------------------------------------------------

loc_10006776:				; CODE XREF: sub_1000673C+48j
		cmp	eax, edx
		jz	short loc_10006788

loc_1000677A:				; CODE XREF: sub_1000673C+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10006776
		jmp	short loc_1000678F
; ---------------------------------------------------------------------------

loc_10006788:				; CODE XREF: sub_1000673C+3Cj
		mov	[ebp+var_4], 1

loc_1000678F:				; CODE XREF: sub_1000673C+4Aj
		cmp	dword_1000A3A4,	2
		jz	short loc_100067A5
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_10006927
; ---------------------------------------------------------------------------

loc_100067A5:				; CODE XREF: sub_1000673C+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_10006858
		push	dword_1000A3AC	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_100067D2:				; CODE XREF: sub_1000673C+9Fj
					; sub_1000673C+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_10006835
		cmp	[ebx], edi
		jz	short loc_100067D2
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_100067D2
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_1000A3AC	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_10006826
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_100067D2

loc_10006826:				; CODE XREF: sub_1000673C+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_100067D2
; ---------------------------------------------------------------------------

loc_10006835:				; CODE XREF: sub_1000673C+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10006842
		push	esi
		call	ds:frex
		pop	ecx

loc_10006842:				; CODE XREF: sub_1000673C+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_1000A3AC,	eax
		mov	ebx, offset dword_1000A3A0
		mov	Ptr, eax

loc_10006858:				; CODE XREF: sub_1000673C+7Cj
		mov	dword_1000A3A4,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_10006927
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_10006927
; ---------------------------------------------------------------------------

loc_10006870:				; CODE XREF: sub_1000673C+19j
					; sub_1000673C+19Fj
		xor	eax, eax
		jmp	loc_1000692A
; ---------------------------------------------------------------------------

loc_10006877:				; CODE XREF: sub_1000673C+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_10006927
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_1000A3A0
		mov	edx, [eax+4]
		jmp	short loc_10006899
; ---------------------------------------------------------------------------

loc_10006895:				; CODE XREF: sub_1000673C+167j
		cmp	eax, edx
		jz	short loc_100068A7

loc_10006899:				; CODE XREF: sub_1000673C+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10006895
		jmp	short loc_100068AA
; ---------------------------------------------------------------------------

loc_100068A7:				; CODE XREF: sub_1000673C+15Bj
		xor	esi, esi
		inc	esi

loc_100068AA:				; CODE XREF: sub_1000673C+169j
		cmp	dword_1000A3A4,	edi
		push	2
		pop	edi
		jz	short loc_100068BE
		push	1Fh
		call	_amsg_exit
		jmp	short loc_100068F3
; ---------------------------------------------------------------------------

loc_100068BE:				; CODE XREF: sub_1000673C+177j
		push	offset dword_10008188
		push	offset dword_10008178
		mov	dword_1000A3A4,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10006870
		push	offset dword_10008174
		push	offset dword_10008160
		call	_initterm
		pop	ecx
		mov	dword_1000A3A4,	edi

loc_100068F3:				; CODE XREF: sub_1000673C+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_100068FC
		xor	eax, eax
		xchg	eax, [ebx]

loc_100068FC:				; CODE XREF: sub_1000673C+1BAj
		cmp	dword_1000A3A8,	0
		jz	short loc_10006921
		push	offset dword_1000A3A8
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_10006921
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_1000A3A8

loc_10006921:				; CODE XREF: sub_1000673C+1C7j
					; sub_1000673C+1D6j
		inc	dword_1000A06C

loc_10006927:				; CODE XREF: sub_1000673C+64j
					; sub_1000673C+125j ...
		xor	eax, eax
		inc	eax

loc_1000692A:				; CODE XREF: sub_1000673C+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_1000673C	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10006C54	proc near		; DATA XREF: .rdata:10008184o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		and	dword_1000A390,	0
		sub	esp, 1Ch
		push	ebx
		xor	ebx, ebx
		inc	ebx
		or	dword_1000A020,	ebx
		push	0Ah		; ProcessorFeature
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	loc_10006DC6
		xor	ecx, ecx
		mov	dword_1000A390,	ebx
		xor	eax, eax
		cpuid
		push	esi
		mov	esi, dword_1000A020
		push	edi
		lea	edi, [ebp+var_1C]
		or	esi, 2
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	eax, [ebp+var_1C]
		mov	ecx, [ebp+var_10]
		mov	[ebp+var_C], eax
		xor	ecx, 49656E69h
		mov	eax, [ebp+var_14]
		xor	eax, 6C65746Eh
		mov	dword_1000A020,	esi
		or	ecx, eax
		mov	eax, [ebp+var_18]
		xor	eax, 756E6547h
		or	ecx, eax
		neg	ecx
		push	1
		sbb	cl, cl
		pop	eax
		inc	cl
		push	0
		pop	ecx
		cpuid
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_8], ecx
		jz	short loc_10006D2C
		mov	eax, [ebp+var_1C]
		and	eax, 0FFF3FF0h
		cmp	eax, 106C0h
		jz	short loc_10006D1B
		cmp	eax, 20660h
		jz	short loc_10006D1B
		cmp	eax, 20670h
		jz	short loc_10006D1B
		cmp	eax, 30650h
		jz	short loc_10006D1B
		cmp	eax, 30660h
		jz	short loc_10006D1B
		cmp	eax, 30670h
		jnz	short loc_10006D2C

loc_10006D1B:				; CODE XREF: sub_10006C54+A2j
					; sub_10006C54+A9j ...
		mov	edi, dword_1000A394
		or	edi, 1
		mov	dword_1000A394,	edi
		jmp	short loc_10006D32
; ---------------------------------------------------------------------------

loc_10006D2C:				; CODE XREF: sub_10006C54+93j
					; sub_10006C54+C5j
		mov	edi, dword_1000A394

loc_10006D32:				; CODE XREF: sub_10006C54+D6j
		cmp	[ebp+var_C], 7
		jl	short loc_10006D6D
		push	7
		xor	ecx, ecx
		lea	esi, [ebp+var_1C]
		pop	eax
		cpuid
		mov	[esi], eax
		mov	eax, esi
		mov	esi, dword_1000A020
		mov	[eax+4], ebx
		mov	[eax+8], ecx
		mov	ecx, [ebp+var_8]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_18]
		test	eax, 200h
		jz	short loc_10006D6F
		or	edi, 2
		mov	dword_1000A394,	edi
		jmp	short loc_10006D6F
; ---------------------------------------------------------------------------

loc_10006D6D:				; CODE XREF: sub_10006C54+E2j
		xor	eax, eax

loc_10006D6F:				; CODE XREF: sub_10006C54+10Cj
					; sub_10006C54+117j
		test	ecx, 100000h
		jz	short loc_10006DC4
		or	esi, 4
		mov	dword_1000A390,	2
		mov	dword_1000A020,	esi
		test	ecx, 8000000h
		jz	short loc_10006DC4
		test	ecx, 10000000h
		jz	short loc_10006DC4
		or	esi, 8
		mov	dword_1000A390,	3
		mov	dword_1000A020,	esi
		test	al, 20h
		jz	short loc_10006DC4
		or	esi, 20h
		mov	dword_1000A390,	5
		mov	dword_1000A020,	esi

loc_10006DC4:				; CODE XREF: sub_10006C54+121j
					; sub_10006C54+13Cj ...
		pop	edi
		pop	esi

loc_10006DC6:				; CODE XREF: sub_10006C54+20j
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10006C54	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10006DE0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_10006E1C
		mov	edi, [ebp+arg_4]

loc_10006E04:				; CODE XREF: sub_10006DE0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10006E14
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_10006E1E

loc_10006E14:				; CODE XREF: sub_10006DE0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_10006E04

loc_10006E1C:				; CODE XREF: sub_10006DE0+1Fj
		xor	eax, eax

loc_10006E1E:				; CODE XREF: sub_10006DE0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10006DE0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10006F21	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_10006F51
		test	esi, eax
		jz	short loc_10006F51
		not	eax
		mov	dword_1000A014,	eax
		jmp	short loc_10006FB7
; ---------------------------------------------------------------------------

loc_10006F51:				; CODE XREF: sub_10006F21+21j
					; sub_10006F21+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_10006F99
		mov	ecx, 0BB40E64Fh
		jmp	short loc_10006FA9
; ---------------------------------------------------------------------------

loc_10006F99:				; CODE XREF: sub_10006F21+6Fj
		test	esi, ecx
		jnz	short loc_10006FA9
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_10006FA9:				; CODE XREF: sub_10006F21+76j
					; sub_10006F21+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_1000A014,	ecx

loc_10006FB7:				; CODE XREF: sub_10006F21+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10006F21	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006FBD	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_100086A8
		mov	edi, offset dword_100086A8
		jmp	short loc_10006FD6
; ---------------------------------------------------------------------------

loc_10006FCB:				; CODE XREF: sub_10006FBD+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10006FD3
		call	eax

loc_10006FD3:				; CODE XREF: sub_10006FBD+12j
		add	esi, 4

loc_10006FD6:				; CODE XREF: sub_10006FBD+Cj
		cmp	esi, edi
		jb	short loc_10006FCB
		pop	edi
		pop	esi
		retn
sub_10006FBD	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006FDD()
sub_10006FDD	proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_100086B0
		mov	edi, offset dword_100086B0
		jmp	short loc_10006FF6
; ---------------------------------------------------------------------------

loc_10006FEB:				; CODE XREF: sub_10006FDD+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10006FF3
		call	eax

loc_10006FF3:				; CODE XREF: sub_10006FDD+12j
		add	esi, 4

loc_10006FF6:				; CODE XREF: sub_10006FDD+Cj
		cmp	esi, edi
		jb	short loc_10006FEB
		pop	edi
		pop	esi
		retn
sub_10006FDD	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000700A()
sub_1000700A	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_1000A398
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_1000700A	endp

; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000703A()
sub_1000703A	proc near		; DATA XREF: sub_10001000o
		mov	off_1000A004, offset off_100081F0
		retn
sub_1000703A	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007045()
sub_10007045	proc near		; DATA XREF: sub_1000100Co
		mov	off_1000A008, offset off_100081F0
		retn
sub_10007045	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007050()
sub_10007050	proc near		; DATA XREF: sub_10001018o
		mov	off_1000A00C, offset off_100081F0
		retn
sub_10007050	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000705B()
sub_1000705B	proc near		; DATA XREF: sub_1000445D+31o
		push	0		; size_t
		push	1		; char
		mov	ecx, offset dword_1000A050 ; void *
		call	sub_10003185
		retn
sub_1000705B	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000706A()
sub_1000706A	proc near		; DATA XREF: sub_10002B04+2Co
		mov	ecx, offset dword_1000A044
		jmp	sub_10002798
sub_1000706A	endp

; ---------------------------------------------------------------------------
		align 200h
		dd 380h	dup(?)
_text		ends

; Section 2. (virtual address 00008000)
; Virtual size			: 000016DC (   5852.)
; Section size in file		: 00001800 (   6144.)
; Offset to raw	data for section: 00006600
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10006F21+34p
					; DATA XREF: sub_10006F21+34r ...
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10006F21+59p
					; DATA XREF: sub_10006F21+59r
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_10006526+1Cp
					; sub_10006526+44p ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: ___atonexitinit+1Cp
					; sub_10006526+65p ...
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; CODE XREF: sub_10002AD4+Ep
					; DATA XREF: sub_10002AD4+Er
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_10005414+4Ep
					; DATA XREF: sub_10005414+4Er
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_10005414+34p
					; DATA XREF: sub_10005414+34r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10005414+1Bp
					; sub_10006F21+4Cp
					; DATA XREF: ...
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10005414+27p
					; sub_10006F21+43p
					; DATA XREF: ...
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: DllMain(x,x,x):loc_1000571Cp
					; DATA XREF: DllMain(x,x,x):loc_1000571Cr
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_10002B44+Ep
					; DATA XREF: sub_10002B44+Er
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: sub_10002B59+12p
					; DATA XREF: sub_10002B59+12r

;
; Imports from MSVCP120.dll
;
; const	std::basic_ios<char, struct std::char_traits<char>>::`vftable'
		extrn ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@:dword
					; DATA XREF: sub_100022EF+20r
					; sub_100029AB+Br ...
; const	std::ios_base::`vftable'
		extrn ??_7ios_base@std@@6B@:dword ; DATA XREF: sub_100022EF+18r
					; sub_100029AB+12r
; __int64 const	std::_BADOFF
		extrn ?_BADOFF@std@@3_JB:dword ; DATA XREF: sub_10004FDF+38r
					; sub_10004FDF+107r ...
; __declspec(dllimport)	protected: virtual __int64 __thiscall std::basic_streambuf<char, struct	std::char_traits<char>>::xsputn(char const *, __int64)
		extrn __imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)r
; __declspec(dllimport)	protected: virtual __int64 __thiscall std::basic_streambuf<char, struct	std::char_traits<char>>::xsgetn(char *,	__int64)
		extrn __imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)r
; __declspec(dllimport)	protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void)
		extrn __imp_?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::uflow(void)r
; __declspec(dllimport)	protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sync(void)
		extrn __imp_?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::sync(void)r
; __declspec(dllimport)	protected: virtual __int64 __thiscall std::basic_streambuf<char, struct	std::char_traits<char>>::showmanyc(void)
		extrn __imp_?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)r
; __declspec(dllimport)	protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64)
		extrn __imp_?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)r
; __declspec(dllimport)	protected: virtual void	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &)
		extrn __imp_?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const	&)r
; __declspec(dllimport)	public:	virtual	void __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void)
		extrn __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)r
; __declspec(dllimport)	public:	virtual	void __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void)
		extrn __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)r
; public: class	std::basic_ostream<char, struct	std::char_traits<char>>	& __thiscall std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
		extrn ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:dword
					; CODE XREF: sub_10002755+26p
					; DATA XREF: sub_10002755+26r
; public: void __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Osfx(void)
		extrn ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:dword
					; CODE XREF: sub_10001080+10Ep
					; sub_100011AF+12Bp
					; DATA XREF: ...
; public: virtual __thiscall std::basic_ostream<char, struct std::char_traits<char>>::~basic_ostream<char, struct std::char_traits<char>>(void)
		extrn ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ:dword
					; DATA XREF: sub_100027B6+2Ar
; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::basic_ostream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
		extrn ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:dword
					; CODE XREF: sub_100022EF+30p
					; DATA XREF: sub_100022EF+30r
; public: void __thiscall std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
		extrn ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:dword
					; CODE XREF: sub_10001080+102p
					; sub_100011AF+11Fp
					; DATA XREF: ...
; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Pninc(void)
		extrn ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:dword
					; CODE XREF: sub_10004A2B+5Fp
					; sub_10004A2B+181p
					; DATA XREF: ...
; public: __int64 __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::sputn(char const *, __int64)
		extrn ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:dword
					; CODE XREF: sub_10001080+A3p
					; sub_100011AF+BBp
					; DATA XREF: ...
; public: int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
		extrn ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:dword
					; CODE XREF: sub_10001080+7Cp
					; sub_10001080+CCp ...
; public: virtual __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void)
		extrn ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:dword
					; DATA XREF: sub_100027E6+11r
; protected: __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::basic_streambuf<char, struct	std::char_traits<char>>(void)
		extrn ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:dword
					; CODE XREF: sub_100023C6+3p
					; DATA XREF: sub_100023C6+3r
; void __cdecl std::_Xbad_alloc(void)
		extrn ?_Xbad_alloc@std@@YAXXZ:dword ; DATA XREF: sub_1000138C:loc_100013A8r
					; sub_100013B1:loc_100013D2r ...
; void __cdecl std::_Xlength_error(char	const *)
		extrn ?_Xlength_error@std@@YAXPBD@Z:dword ; CODE XREF: sub_10001534+21p
					; sub_10001657+11p ...
; void __cdecl std::_Xout_of_range(char	const *)
		extrn ?_Xout_of_range@std@@YAXPBD@Z:dword ; CODE XREF: sub_1000329C+19p
					; sub_100033E0+1Ap ...
; char const * __cdecl std::_Syserror_map(int)
		extrn ?_Syserror_map@std@@YAPBDH@Z:dword ; CODE	XREF: sub_10003A3B+6p
					; sub_1000496A+4p
					; DATA XREF: ...
; char const * __cdecl std::_Winerror_map(int)
		extrn ?_Winerror_map@std@@YAPBDH@Z:dword ; CODE	XREF: sub_100049B9+4p
					; DATA XREF: sub_100049B9+4r
; private: static void __cdecl std::ios_base::_Ios_base_dtor(class std::ios_base *)
		extrn ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:dword
					; CODE XREF: sub_100029AB+1Ap
					; DATA XREF: sub_100029AB+1Ar

;
; Imports from MSVCR120.dll
;
; void *__cdecl	memmove(void *,	const void *, size_t)
		extrn memmove:dword	; CODE XREF: sub_10001D13+18p
					; sub_10001FA9+15p ...
; int sprintf_s(char *DstBuf, size_t SizeInBytes, const	char *Format, ...)
		extrn sprintf_s:dword	; CODE XREF: sub_10004690+5Bp
					; DATA XREF: sub_10004690+5Br
; __declspec(dllimport)	void __cdecl operator delete(void *)
		extrn __imp_??3@YAXPAX@Z:dword ; DATA XREF: operator delete(void *)r
; __declspec(dllimport)	void * __cdecl operator	new(unsigned int)
		extrn __imp_??2@YAPAXI@Z:dword ; DATA XREF: operator new(uint)r
		extrn __imp__purecall:dword ; DATA XREF: _purecallr
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_10006526+29p
					; DATA XREF: sub_10006526+29r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr

;
; Imports from USER32.dll
;
; LRESULT __stdcall CallWindowProcA(WNDPROC lpPrevWndFunc, HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn CallWindowProcA:dword ; CODE XREF: sub_10002B78+3Dp
					; DATA XREF: sub_10002B78+3Dr ...
; BOOL __stdcall IsWindow(HWND hWnd)
		extrn IsWindow:dword	; CODE XREF: sub_10004919+4p
					; DATA XREF: sub_10004919+4r
; BOOL __stdcall IsIconic(HWND hWnd)
		extrn IsIconic:dword	; CODE XREF: sub_100048A6+2p
					; DATA XREF: sub_100048A6+2r
; DWORD	__stdcall GetWindowThreadProcessId(HWND	hWnd, LPDWORD lpdwProcessId)
		extrn GetWindowThreadProcessId:dword ; CODE XREF: sub_10005414+13p
					; DATA XREF: sub_10005414+13r
; HWND __stdcall WindowFromDC(HDC hDC)
		extrn WindowFromDC:dword ; CODE	XREF: eglGetPlatformDisplayEXT+21p
					; DATA XREF: eglGetPlatformDisplayEXT+21r
; BOOL __stdcall SetPropA(HWND hWnd, LPCSTR lpString, HANDLE hData)
		extrn SetPropA:dword	; CODE XREF: sub_10005414+6Bp
					; sub_10005414+74p
					; DATA XREF: ...
; HANDLE __stdcall GetPropA(HWND hWnd, LPCSTR lpString)
		extrn GetPropA:dword	; CODE XREF: sub_10002B78+11p
					; sub_10002B78+2Ap ...
; HANDLE __stdcall RemovePropA(HWND hWnd, LPCSTR lpString)
		extrn RemovePropA:dword	; CODE XREF: sub_100055C1+33p
					; sub_100055C1+3Bp
					; DATA XREF: ...
; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
		extrn GetClientRect:dword ; CODE XREF: sub_10003FB4+6p
					; DATA XREF: sub_10003FB4+6r
; LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong)
		extrn SetWindowLongA:dword ; CODE XREF:	sub_10005414+42p
					; sub_100055C1+27p
					; DATA XREF: ...

;
; Imports from libGLESv2.dll
;
		extrn __imp_libGLESv2_145:dword	; DATA XREF: libGLESv2_145r
					; .rdata:10008B84o
		extrn __imp_libGLESv2_158:dword	; DATA XREF: libGLESv2_158r
		extrn __imp_libGLESv2_148:dword	; DATA XREF: libGLESv2_148r
		extrn __imp_libGLESv2_146:dword	; DATA XREF: libGLESv2_146r
		extrn __imp_libGLESv2_178:dword	; DATA XREF: libGLESv2_178r
		extrn __imp_libGLESv2_177:dword	; DATA XREF: libGLESv2_177r
		extrn __imp_libGLESv2_147:dword	; DATA XREF: libGLESv2_147r
		extrn __imp_libGLESv2_144:dword	; DATA XREF: libGLESv2_144r

;
; Imports from mozglue.dll
;
		extrn frex:dword	; CODE XREF: sub_1000673C+FFp
					; DATA XREF: sub_1000673C+FFr ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10008160h
dword_10008160	dd 0			; DATA XREF: sub_1000673C+1A6o
		dd offset sub_10001024
		dd offset sub_10001000
		dd offset sub_1000100C
		dd offset sub_10001018
dword_10008174	dd 0			; DATA XREF: sub_1000673C+1A1o
dword_10008178	dd 0			; DATA XREF: sub_1000673C+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
		dd offset sub_10006C54
dword_10008188	dd 2 dup(0)		; DATA XREF: sub_1000673C:loc_100068BEo
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56F29A4Ah		; TimeDateStamp: Wed Mar 23 13:29:46 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 7Ch			; SizeOfData
		dd rva asc_10008610	; AddressOfRawData
		dd 6C10h		; PointerToRawData
		dd 0			; Characteristics
		dd 56F29A4Ah		; TimeDateStamp: Wed Mar 23 13:29:46 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_1000868C	; AddressOfRawData
		dd 6C8Ch		; PointerToRawData
dword_100081C8	dd 3024h, 1, 3023h, 1, 3022h, 1, 303Dh,	1, 3038h, 0
					; DATA XREF: sub_10002599+Ao
off_100081F0	dd offset unknown_libname_1 ; DATA XREF: unknown_libname_1+8o
					; sub_1000703Ao ...
					; Microsoft VisualC 2-11/net runtime
		dd offset _purecall
		dd offset _purecall
		dd offset sub_10003A66
		dd offset sub_10003AB6
		dd offset sub_10003AD1
off_10008208	dd offset unknown_libname_1 ; DATA XREF: .data:off_1000A004o
					; Microsoft VisualC 2-11/net runtime
		dd offset sub_100049DE
		dd offset sub_1000496A
		dd offset sub_10003A66
		dd offset sub_10003AB6
		dd offset sub_10003AD1
aGeneric	db 'generic',0          ; DATA XREF: sub_100049DEo
aUnknownError	db 'unknown error',0    ; DATA XREF: sub_1000496A+Fo
					; sub_100049B9+Fo
		align 4
off_10008238	dd offset unknown_libname_1 ; DATA XREF: .data:off_1000A008o
					; Microsoft VisualC 2-11/net runtime
		dd offset sub_100049E4
		dd offset sub_1000498F
		dd offset sub_10003A66
		dd offset sub_10003AB6
		dd offset sub_10003AD1
aIostream	db 'iostream',0         ; DATA XREF: sub_100049E4o
		align 4
aIostreamStream	db 'iostream stream error',0 ; DATA XREF: sub_1000498F+Co
		align 4
off_10008274	dd offset unknown_libname_1 ; DATA XREF: .data:off_1000A00Co
					; Microsoft VisualC 2-11/net runtime
		dd offset sub_100049EA
		dd offset sub_100049B9
		dd offset sub_10003A3B
		dd offset sub_10003AB6
		dd offset sub_10003AD1
aSystem		db 'system',0           ; DATA XREF: sub_100049EAo
		align 4
off_10008294	dd offset sub_100029F5	; DATA XREF: sub_100023C6+13o
					; sub_100027E6+3o
		dd offset ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)
		dd offset ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)
		dd offset sub_10004A2B
		dd offset sub_10004BC2
		dd offset ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)
		dd offset sub_1000556A
		dd offset ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::uflow(void)
		dd offset ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)
		dd offset ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)
		dd offset sub_10004FDF
		dd offset sub_10005192
		dd offset ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)
		dd offset ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ;	std::basic_streambuf<char,std::char_traits<char>>::sync(void)
		dd offset ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const	&)
off_100082D0	dd offset sub_100049F0	; DATA XREF: sub_100025CC+17o
		dd offset sub_10004CCA
off_100082D8	dd offset sub_10002A11	; DATA XREF: sub_10002631+11o
					; sub_100026B4+19o ...
		dd offset sub_100048C3
		dd offset sub_100044C4
		dd offset sub_10004155
		dd offset sub_100044D0
		dd offset sub_100044B4
		dd offset sub_100044B8
		dd offset sub_100044BC
		dd offset sub_100044C0
		dd offset sub_100044C8
		dd offset sub_100044CC
		dd offset sub_100044AE
		dd offset sub_100052AB
		dd offset sub_10003FB0
aEgl_ext_client	db 'EGL_EXT_client_extensions',0 ; DATA XREF: sub_10003E95+1Fo
		align 4
aAngle_platform	db 'ANGLE_platform_angle',0 ; DATA XREF: sub_10003E95+49o
		align 4
aAngle_platfo_0	db 'ANGLE_platform_angle_d3d',0 ; DATA XREF: sub_10003E95+6Do
		align 10h
off_10008360	dd offset sub_100029CE	; DATA XREF: sub_100022EF+3Do
					; sub_100027B6+Co
dword_10008364	dd 0			; DATA XREF: sub_100022EF+12o
		dd 50h
dword_1000836C	dd 20h			; DATA XREF: sub_10003E95+A1o
					; sub_1000450E+127o
aEgl_ext_create	db 'EGL_EXT_create_context_robustness',0 ; DATA XREF: sub_1000450E+1Co
		align 4
aEgl_angle_d3d_	db 'EGL_ANGLE_d3d_share_handle_client_buffer',0
					; DATA XREF: sub_1000450E+5Ao
		align 10h
aEgl_angle_surf	db 'EGL_ANGLE_surface_d3d_texture_2d_share_handle',0
					; DATA XREF: sub_1000450E+7Do
		align 10h
aEgl_angle_quer	db 'EGL_ANGLE_query_surface_pointer',0
					; DATA XREF: sub_1000450E:loc_100045AEo
aEgl_angle_wind	db 'EGL_ANGLE_window_fixed_size',0 ; DATA XREF: sub_1000450E+C3o
aEgl_nv_post_su	db 'EGL_NV_post_sub_buffer',0 ; DATA XREF: sub_1000450E+F5o
		align 4
aGoogleInc_	db 'Google Inc.',0      ; DATA XREF: sub_10004690+13o
; char Format[]
Format		db ' (adapter LUID: %08x%08x)',0 ; DATA XREF: sub_10004690+53o
		align 4
; CHAR String[]
String		db 'Egl::SurfaceOwner',0 ; DATA XREF: sub_10002B78+9o
					; sub_10005414+65o ...
		align 10h
; CHAR aEglSurfacepare[]
aEglSurfacepare	db 'Egl::SurfaceParentWndProc',0 ; DATA XREF: sub_10002B78:loc_10002B9Ao
					; sub_10005414+6Eo ...
		align 4
aOpengl_es	db 'OpenGL_ES',0        ; DATA XREF: eglQueryString:loc_1000603Bo
		align 4
a1_4Angle2_1_04	db '1.4 (ANGLE 2.1.040a674b6d67)',0
					; DATA XREF: eglQueryString:loc_1000605Co
		align 4
off_100084C8	dd offset aEglquerysurf_1 ; DATA XREF: eglGetProcAddress:loc_10005D7Ar
					; "eglQuerySurfacePointerANGLE"
off_100084CC	dd offset eglQuerySurfacePointerANGLE
					; DATA XREF: eglGetProcAddress:loc_10005DBAr
		dd offset aEglsurfacere_0 ; "eglSurfaceReleaseSyncANGLE"
		dd offset eglSurfaceReleaseSyncANGLE
		dd offset aEglpostsubbu_0 ; "eglPostSubBufferNV"
		dd offset eglPostSubBufferNV
		dd offset aEglgetplatfo_0 ; "eglGetPlatformDisplayEXT"
		dd offset eglGetPlatformDisplayEXT
		dd offset dword_100081C8+24h
		align 10h
aEglquerysurf_1	db 'eglQuerySurfacePointerANGLE',0 ; DATA XREF: .rdata:off_100084C8o
aEglsurfacere_0	db 'eglSurfaceReleaseSyncANGLE',0 ; DATA XREF: .rdata:100084D0o
		align 4
aEglpostsubbu_0	db 'eglPostSubBufferNV',0 ; DATA XREF: .rdata:100084D8o
		align 4
aEglgetplatfo_0	db 'eglGetPlatformDisplayEXT',0 ; DATA XREF: .rdata:100084E0o
		align 4
aVectorTTooLong	db 'vector<T> too long',0 ; DATA XREF: sub_100030AA+26o
					; sub_100030F2+2Do ...
		align 4
aStringTooLong	db 'string too long',0  ; DATA XREF: sub_10002E9D+Ao
					; sub_1000329C+38o ...
aInvalidStringP	db 'invalid string position',0 ; DATA XREF: sub_1000329C+14o
					; sub_100033E0+15o ...
aMapSetTTooLong	db 'map/set<T> too long',0 ; DATA XREF: sub_10001534+1Ao
					; sub_10001657+Co ...
dbl_100085A8	dq 1.0			; DATA XREF: sub_10001024+45r
flt_100085B0	dd 2.0			; DATA XREF: sub_10001024+5r
					; sub_10001024+1Br ...
		align 8
dword_100085B8	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_10006994r
					; ___DllMainCRTStartup+A8r ...
off_100085BC	dd offset dword_1000A070 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_1000A0C0
		align 8
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_10008610	db 'RSDS'               ; DATA XREF: .rdata:100081A4o
					; CV signature
		dd 873ECD80h		; Data1	; GUID
		dw 9FAAh		; Data2
		dw 4014h		; Data3
		db 0B2h, 0CDh, 0F8h, 0B6h, 0EDh, 5, 18h, 0B6h; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-' ; PdbFileName
		db 'tb\gfx\angle\src\libEGL\libEGL.pdb',0
; Debug	information (type 12)
dword_1000868C	dd 0			; DATA XREF: .rdata:100081C0o
		dd 2 dup(10h), 2 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:10008608o
		align 8
dword_100086A8	dd 2 dup(0)		; DATA XREF: sub_10006FBD+2o
					; sub_10006FBD+7o
dword_100086B0	dd 2 dup(0)		; DATA XREF: sub_10006FDD+2o
					; sub_10006FDD+7o
stru_100086B8	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_10006526+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10006526
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_100065C3	; ScopeRecord.HandlerFunc
		align 8
stru_100086D8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10006956
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_10008700	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10006E30
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_10006EB9	; ScopeRecord.FilterFunc
		dd offset loc_10006ECC	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for libEGL.dll
;
		dd 0			; Characteristics
		dd 56F29A4Ah		; TimeDateStamp: Wed Mar 23 13:29:46 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aLibegl_dll	; Name
		dd 1			; Base
		dd 26h			; NumberOfFunctions
		dd 26h			; NumberOfNames
		dd rva off_10008748	; AddressOfFunctions
		dd rva off_100087E0	; AddressOfNames
		dd rva word_10008878	; AddressOfNameOrdinals
;
; Export Address Table for libEGL.dll
;
off_10008748	dd rva eglGetError, rva	eglGetDisplay, rva eglInitialize
					; DATA XREF: .rdata:1000873Co
		dd rva eglTerminate, rva eglQueryString, rva eglGetConfigs
		dd rva eglChooseConfig,	rva eglGetConfigAttrib,	rva eglCreateWindowSurface
		dd rva eglCreatePbufferSurface,	rva eglCreatePixmapSurface
		dd rva eglDestroySurface, rva eglQuerySurface, rva eglBindAPI
		dd rva eglQueryAPI, rva	eglWaitGL, rva eglReleaseThread
		dd rva eglCreatePbufferFromClientBuffer, rva eglSurfaceAttrib
		dd rva eglBindTexImage,	rva eglReleaseTexImage,	rva eglSwapInterval
		dd rva eglCreateContext, rva eglDestroyContext,	rva eglMakeCurrent
		dd rva eglGetCurrentContext, rva eglGetCurrentSurface
		dd rva eglGetCurrentDisplay, rva eglQueryContext, rva eglWaitGL
		dd rva eglWaitNative, rva eglSwapBuffers, rva eglCopyBuffers
		dd rva eglGetProcAddress, rva eglGetPlatformDisplayEXT
		dd rva eglQuerySurfacePointerANGLE, rva	eglPostSubBufferNV
		dd rva eglSurfaceReleaseSyncANGLE
;
; Export Names Table for libEGL.dll
;
off_100087E0	dd rva aEglbindapi, rva	aEglbindteximag, rva aEglchooseconfi
					; DATA XREF: .rdata:10008740o
		dd rva aEglcopybuffers,	rva aEglcreateconte, rva aEglcreatepbuff ; "eglBindAPI"
		dd rva aEglcreatepbu_0,	rva aEglcreatepixma, rva aEglcreatewindo
		dd rva aEgldestroycont,	rva aEgldestroysurf, rva aEglgetconfigat
		dd rva aEglgetconfigs, rva aEglgetcurrentc, rva	aEglgetcurrentd
		dd rva aEglgetcurrents,	rva aEglgetdisplay, rva	aEglgeterror
		dd rva aEglgetplatform,	rva aEglgetprocaddr, rva aEglinitialize
		dd rva aEglmakecurrent,	rva aEglpostsubbuff, rva aEglqueryapi
		dd rva aEglquerycontex,	rva aEglquerystring, rva aEglquerysurfac
		dd rva aEglquerysurf_0,	rva aEglreleasetexi, rva aEglreleasethre
		dd rva aEglsurfaceattr,	rva aEglsurfacerele, rva aEglswapbuffers
		dd rva aEglswapinterva,	rva aEglterminate, rva aEglwaitclient
		dd rva aEglwaitgl, rva aEglwaitnative
;
; Export Ordinals Table	for libEGL.dll
;
word_10008878	dw 0Dh,	13h, 6,	20h, 16h, 11h, 9, 0Ah, 8, 17h, 0Bh, 7
					; DATA XREF: .rdata:10008744o
		dw 5, 19h, 1Bh,	1Ah, 1,	0, 22h,	21h, 2,	18h, 24h, 0Eh
		dw 1Ch,	4, 0Ch,	23h, 14h, 10h, 12h, 25h, 1Fh, 15h, 3, 0Fh
		dw 1Dh,	1Eh
aLibegl_dll	db 'libEGL.dll',0       ; DATA XREF: .rdata:1000872Co
aEglbindapi	db 'eglBindAPI',0       ; DATA XREF: .rdata:off_100087E0o
aEglbindteximag	db 'eglBindTexImage',0  ; DATA XREF: .rdata:off_100087E0o
aEglchooseconfi	db 'eglChooseConfig',0  ; DATA XREF: .rdata:off_100087E0o
aEglcopybuffers	db 'eglCopyBuffers',0   ; DATA XREF: .rdata:off_100087E0o
aEglcreateconte	db 'eglCreateContext',0 ; DATA XREF: .rdata:off_100087E0o
aEglcreatepbuff	db 'eglCreatePbufferFromClientBuffer',0 ; DATA XREF: .rdata:off_100087E0o
aEglcreatepbu_0	db 'eglCreatePbufferSurface',0 ; DATA XREF: .rdata:off_100087E0o
aEglcreatepixma	db 'eglCreatePixmapSurface',0 ; DATA XREF: .rdata:off_100087E0o
aEglcreatewindo	db 'eglCreateWindowSurface',0 ; DATA XREF: .rdata:off_100087E0o
aEgldestroycont	db 'eglDestroyContext',0 ; DATA XREF: .rdata:off_100087E0o
aEgldestroysurf	db 'eglDestroySurface',0 ; DATA XREF: .rdata:off_100087E0o
aEglgetconfigat	db 'eglGetConfigAttrib',0 ; DATA XREF: .rdata:off_100087E0o
aEglgetconfigs	db 'eglGetConfigs',0    ; DATA XREF: .rdata:off_100087E0o
aEglgetcurrentc	db 'eglGetCurrentContext',0 ; DATA XREF: .rdata:off_100087E0o
aEglgetcurrentd	db 'eglGetCurrentDisplay',0 ; DATA XREF: .rdata:off_100087E0o
aEglgetcurrents	db 'eglGetCurrentSurface',0 ; DATA XREF: .rdata:off_100087E0o
aEglgetdisplay	db 'eglGetDisplay',0    ; DATA XREF: .rdata:off_100087E0o
aEglgeterror	db 'eglGetError',0      ; DATA XREF: .rdata:off_100087E0o
aEglgetplatform	db 'eglGetPlatformDisplayEXT',0 ; DATA XREF: .rdata:off_100087E0o
aEglgetprocaddr	db 'eglGetProcAddress',0 ; DATA XREF: .rdata:off_100087E0o
aEglinitialize	db 'eglInitialize',0    ; DATA XREF: .rdata:off_100087E0o
aEglmakecurrent	db 'eglMakeCurrent',0   ; DATA XREF: .rdata:off_100087E0o
aEglpostsubbuff	db 'eglPostSubBufferNV',0 ; DATA XREF: .rdata:off_100087E0o
aEglqueryapi	db 'eglQueryAPI',0      ; DATA XREF: .rdata:off_100087E0o
aEglquerycontex	db 'eglQueryContext',0  ; DATA XREF: .rdata:off_100087E0o
aEglquerystring	db 'eglQueryString',0   ; DATA XREF: .rdata:off_100087E0o
aEglquerysurfac	db 'eglQuerySurface',0  ; DATA XREF: .rdata:off_100087E0o
aEglquerysurf_0	db 'eglQuerySurfacePointerANGLE',0 ; DATA XREF: .rdata:off_100087E0o
aEglreleasetexi	db 'eglReleaseTexImage',0 ; DATA XREF: .rdata:off_100087E0o
aEglreleasethre	db 'eglReleaseThread',0 ; DATA XREF: .rdata:off_100087E0o
aEglsurfaceattr	db 'eglSurfaceAttrib',0 ; DATA XREF: .rdata:off_100087E0o
aEglsurfacerele	db 'eglSurfaceReleaseSyncANGLE',0 ; DATA XREF: .rdata:off_100087E0o
aEglswapbuffers	db 'eglSwapBuffers',0   ; DATA XREF: .rdata:off_100087E0o
aEglswapinterva	db 'eglSwapInterval',0  ; DATA XREF: .rdata:off_100087E0o
aEglterminate	db 'eglTerminate',0     ; DATA XREF: .rdata:off_100087E0o
aEglwaitclient	db 'eglWaitClient',0    ; DATA XREF: .rdata:off_100087E0o
aEglwaitgl	db 'eglWaitGL',0        ; DATA XREF: .rdata:off_100087E0o
aEglwaitnative	db 'eglWaitNative',0    ; DATA XREF: .rdata:off_100087E0o
		align 4
__IMPORT_DESCRIPTOR_libGLESv2 dd rva dword_10008D34 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aLibglesv2_dll	; DLL Name
		dd rva __imp_libGLESv2_145 ; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10008C00 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva GetSystemTimeAsFileTime ; Import	Address	Table
__IMPORT_DESCRIPTOR_USER32 dd rva off_10008D08 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aUser32_dll	; DLL Name
		dd rva CallWindowProcA	; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10008CB0 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva memmove		; Import Address Table
__IMPORT_DESCRIPTOR_MSVCP120 dd	rva off_10008C3C ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcp120_dll	; DLL Name
		dd rva ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@	; Import Address Table
__IMPORT_DESCRIPTOR_mozglue dd rva off_10008D58	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMozglue_dll	; DLL Name
		dd rva frex		; Import Address Table
		align 20h
;
; Import names for KERNEL32.dll
;
off_10008C00	dd rva word_100096C2	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_100096A8
		dd rva word_1000968C
		dd rva word_10009678
		dd rva word_10009668
		dd rva word_10009658
		dd rva word_10008DE2
		dd rva word_10008D6E
		dd rva word_10008D7E
		dd rva word_10008D8E
		dd rva word_10008DA4
		dd rva word_10008DBA
		dd rva word_10008DC6
		dd rva word_10008DD4
		dd 0
;
; Import names for MSVCP120.dll
;
off_10008C3C	dd rva word_100094EE	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCP120o
		dd rva word_100094D6
		dd rva word_100094C0
		dd rva word_10009470
		dd rva word_1000942A
		dd rva word_100093EA
		dd rva word_100093AC
		dd rva word_10009368
		dd rva word_1000931E
		dd rva word_100092D2
		dd rva word_10009290
		dd rva word_10009250
		dd rva word_1000920E
		dd rva word_100091D0
		dd rva word_10009196
		dd rva word_1000912C
		dd rva word_100090EC
		dd rva word_100090AA
		dd rva word_10009064
		dd rva word_10009024
		dd rva word_10008FE8
		dd rva word_10008FAC
		dd rva word_10008EE6
		dd rva word_10008F00
		dd rva word_10008F20
		dd rva word_10008F40
		dd rva word_10008F60
		dd rva word_10008F80
		dd 0
;
; Import names for MSVCR120.dll
;
off_10008CB0	dd rva word_10008EDC	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_10008ED0
		dd rva word_10008EC0
		dd rva word_10008EB0
		dd rva word_10008EA4
		dd rva word_10009610
		dd rva word_100095F6
		dd rva word_100095E0
		dd rva word_100095C6
		dd rva word_100095B8
		dd rva word_100095AC
		dd rva word_1000959E
		dd rva word_10009588
		dd rva word_10009576
		dd rva word_100094B6
		dd rva word_1000955E
		dd rva word_10009550
		dd rva word_10009530
		dd rva word_10009538
		dd rva word_10009542
		dd rva word_10009634
		dd 0
;
; Import names for USER32.dll
;
off_10008D08	dd rva word_10008DFA	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_USER32o
		dd rva word_10008E0C
		dd rva word_10008E18
		dd rva word_10008E7C
		dd rva word_10008E24
		dd rva word_10008E34
		dd rva word_10008E40
		dd rva word_10008E4C
		dd rva word_10008E5A
		dd rva word_10008E6A
		dd 0
;
; Import names for libGLESv2.dll
;
dword_10008D34	dd 80000091h		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_libGLESv2o
		dd 8000009Eh
		dd 80000094h
		dd 80000092h
		dd 800000B2h
		dd 800000B1h
		dd 80000093h
		dd 80000090h
		dd 0
;
; Import names for mozglue.dll
;
off_10008D58	dd rva word_10009596	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_mozglueo
		dd 0
aLibglesv2_dll	db 'libGLESv2.dll',0    ; DATA XREF: .rdata:10008B80o
word_10008D6E	dw 250h			; DATA XREF: .rdata:10008C1Co
		db 'GetLastError',0
		align 2
word_10008D7E	dw 50Ah			; DATA XREF: .rdata:10008C20o
		db 'SetLastError',0
		align 2
word_10008D8E	dw 20Ah			; DATA XREF: .rdata:10008C24o
		db 'GetCurrentProcessId',0
word_10008DA4	dw 20Eh			; DATA XREF: .rdata:10008C28o
		db 'GetCurrentThreadId',0
		align 2
word_10008DBA	dw 571h			; DATA XREF: .rdata:10008C2Co
		db 'TlsAlloc',0
		align 2
word_10008DC6	dw 573h			; DATA XREF: .rdata:10008C30o
		db 'TlsGetValue',0
word_10008DD4	dw 574h			; DATA XREF: .rdata:10008C34o
		db 'TlsSetValue',0
word_10008DE2	dw 572h			; DATA XREF: .rdata:10008C18o
		db 'TlsFree',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10008B94o
		align 2
word_10008DFA	dw 1Dh			; DATA XREF: .rdata:off_10008D08o
		db 'CallWindowProcA',0
word_10008E0C	dw 211h			; DATA XREF: .rdata:10008D0Co
		db 'IsWindow',0
		align 4
word_10008E18	dw 202h			; DATA XREF: .rdata:10008D10o
		db 'IsIconic',0
		align 4
word_10008E24	dw 372h			; DATA XREF: .rdata:10008D18o
		db 'WindowFromDC',0
		align 4
word_10008E34	dw 2F1h			; DATA XREF: .rdata:10008D1Co
		db 'SetPropA',0
		align 10h
word_10008E40	dw 195h			; DATA XREF: .rdata:10008D20o
		db 'GetPropA',0
		align 4
word_10008E4C	dw 2A8h			; DATA XREF: .rdata:10008D24o
		db 'RemovePropA',0
word_10008E5A	dw 125h			; DATA XREF: .rdata:10008D28o
		db 'GetClientRect',0
word_10008E6A	dw 30Ch			; DATA XREF: .rdata:10008D2Co
		db 'SetWindowLongA',0
		align 4
word_10008E7C	dw 1D3h			; DATA XREF: .rdata:10008D14o
		db 'GetWindowThreadProcessId',0
		align 4
aUser32_dll	db 'USER32.dll',0       ; DATA XREF: .rdata:10008BA8o
		align 4
word_10008EA4	dw 449h			; DATA XREF: .rdata:10008CC0o
		db '_purecall',0
word_10008EB0	dw 70h			; DATA XREF: .rdata:10008CBCo
		db '??2@YAPAXI@Z',0
		align 10h
word_10008EC0	dw 72h			; DATA XREF: .rdata:10008CB8o
		db '??3@YAXPAX@Z',0
		align 10h
word_10008ED0	dw 728h			; DATA XREF: .rdata:10008CB4o
		db 'sprintf_s',0
word_10008EDC	dw 6E8h			; DATA XREF: .rdata:off_10008CB0o
		db 'memmove',0
word_10008EE6	dw 2C9h			; DATA XREF: .rdata:10008C94o
		db '?_Xbad_alloc@std@@YAXXZ',0
word_10008F00	dw 2CCh			; DATA XREF: .rdata:10008C98o
		db '?_Xlength_error@std@@YAXPBD@Z',0
word_10008F20	dw 2CDh			; DATA XREF: .rdata:10008C9Co
		db '?_Xout_of_range@std@@YAXPBD@Z',0
word_10008F40	dw 2B0h			; DATA XREF: .rdata:10008CA0o
		db '?_Syserror_map@std@@YAPBDH@Z',0
		align 10h
word_10008F60	dw 2C5h			; DATA XREF: .rdata:10008CA4o
		db '?_Winerror_map@std@@YAPBDH@Z',0
		align 10h
word_10008F80	dw 243h			; DATA XREF: .rdata:10008CA8o
		db '?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z',0
word_10008FAC	dw 2Ah			; DATA XREF: .rdata:10008C90o
		db '??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ',0
		align 4
word_10008FE8	dw 87h			; DATA XREF: .rdata:10008C8Co
		db '??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ',0
		align 4
word_10009024	dw 4FFh			; DATA XREF: .rdata:10008C88o
		db '?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z',0
word_10009064	dw 502h			; DATA XREF: .rdata:10008C84o
		db '?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@'
		db 'Z',0
		align 2
word_100090AA	dw 27Ch			; DATA XREF: .rdata:10008C80o
		db '?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ',0
word_100090EC	dw 4E6h			; DATA XREF: .rdata:10008C7Co
		db '?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z',0
		align 4
word_1000912C	dw 20h			; DATA XREF: .rdata:10008C78o
		db '??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_st'
		db 'reambuf@DU?$char_traits@D@std@@@1@_N@Z',0
word_10009196	dw 84h			; DATA XREF: .rdata:10008C74o
		db '??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ',0
		align 10h
word_100091D0	dw 276h			; DATA XREF: .rdata:10008C70o
		db '?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ',0
		align 2
word_1000920E	dw 38Eh			; DATA XREF: .rdata:10008C6Co
		db '?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ',0
word_10009250	dw 258h			; DATA XREF: .rdata:10008C68o
		db '?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ',0
		align 10h
word_10009290	dw 2BFh			; DATA XREF: .rdata:10008C64o
		db '?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ',0
		align 2
word_100092D2	dw 41Ch			; DATA XREF: .rdata:10008C60o
		db '?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVloca'
		db 'le@2@@Z',0
		align 2
word_1000931E	dw 4D6h			; DATA XREF: .rdata:10008C5Co
		db '?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@P'
		db 'AD_J@Z',0
word_10009368	dw 4F6h			; DATA XREF: .rdata:10008C58o
		db '?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ'
		db 0
word_100093AC	dw 521h			; DATA XREF: .rdata:10008C54o
		db '?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ',0
word_100093EA	dw 540h			; DATA XREF: .rdata:10008C50o
		db '?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ',0
		align 2
word_1000942A	dw 56Bh			; DATA XREF: .rdata:10008C4Co
		db '?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J'
		db '@Z',0
word_10009470	dw 56Eh			; DATA XREF: .rdata:10008C48o
		db '?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J'
		db '@Z',0
word_100094B6	dw 6E6h			; DATA XREF: .rdata:10008CE8o
		db 'memcpy',0
		align 10h
word_100094C0	dw 1A7h			; DATA XREF: .rdata:10008C44o
		db '?_BADOFF@std@@3_JB',0
		align 2
word_100094D6	dw 159h			; DATA XREF: .rdata:10008C40o
		db '??_7ios_base@std@@6B@',0
word_100094EE	dw 132h			; DATA XREF: .rdata:off_10008C3Co
		db '??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@',0
		align 2
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10008BBCo
		align 10h
word_10009530	dw 394h			; DATA XREF: .rdata:10008CF4o
		db '_lock',0
word_10009538	dw 504h			; DATA XREF: .rdata:10008CF8o
		db '_unlock',0
word_10009542	dw 22Eh			; DATA XREF: .rdata:10008CFCo
		db '_calloc_crt',0
word_10009550	dw 1AEh			; DATA XREF: .rdata:10008CF0o
		db '__dllonexit',0
word_1000955E	dw 43Ah			; DATA XREF: .rdata:10008CECo
		db '_onexit',0
aMsvcp120_dll	db 'MSVCP120.dll',0     ; DATA XREF: .rdata:10008BD0o
		align 2
word_10009576	dw 16Fh			; DATA XREF: .rdata:10008CE4o
		db '__CppXcptFilter',0
word_10009588	dw 217h			; DATA XREF: .rdata:10008CE0o
		db '_amsg_exit',0
		align 2
word_10009596	dw 4Fh			; DATA XREF: .rdata:off_10008D58o
		db 'frex',0
		align 2
word_1000959E	dw 3A5h			; DATA XREF: .rdata:10008CDCo
		db '_malloc_crt',0
word_100095AC	dw 30Ch			; DATA XREF: .rdata:10008CD8o
		db '_initterm',0
word_100095B8	dw 30Dh			; DATA XREF: .rdata:10008CD4o
		db '_initterm_e',0
word_100095C6	dw 27Ah			; DATA XREF: .rdata:10008CD0o
		db '_except_handler4_common',0
word_100095E0	dw 250h			; DATA XREF: .rdata:10008CCCo
		db '_crt_debugger_hook',0
		align 2
word_100095F6	dw 1ACh			; DATA XREF: .rdata:10008CC8o
		db '__crtUnhandledException',0
word_10009610	dw 1ABh			; DATA XREF: .rdata:10008CC4o
		db '__crtTerminateProcess',0
aMozglue_dll	db 'mozglue.dll',0      ; DATA XREF: .rdata:10008BE4o
word_10009634	dw 18Ch			; DATA XREF: .rdata:10008D00o
		db '__clean_type_info_names_internal',0
		align 4
word_10009658	dw 121h			; DATA XREF: .rdata:10008C14o
		db 'EncodePointer',0
word_10009668	dw 0FEh			; DATA XREF: .rdata:10008C10o
		db 'DecodePointer',0
word_10009678	dw 367h			; DATA XREF: .rdata:10008C0Co
		db 'IsDebuggerPresent',0
word_1000968C	dw 36Dh			; DATA XREF: .rdata:10008C08o
		db 'IsProcessorFeaturePresent',0
word_100096A8	dw 42Dh			; DATA XREF: .rdata:10008C04o
		db 'QueryPerformanceCounter',0
word_100096C2	dw 2D6h			; DATA XREF: .rdata:off_10008C00o
		db 'GetSystemTimeAsFileTime',0
		align 1000h
_rdata		ends

; Section 3. (virtual address 0000A000)
; Virtual size			: 000003B4 (	948.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00007E00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 1000A000h
; DWORD	dwTlsIndex
dwTlsIndex	dd 0FFFFFFFFh		; DATA XREF: sub_10002A4Ar
					; sub_10002A4A+2Dr ...
off_1000A004	dd offset off_10008208	; DATA XREF: sub_10003A3B+17o
					; sub_1000703Aw
off_1000A008	dd offset off_10008238	; DATA XREF: sub_10007045w
off_1000A00C	dd offset off_10008274	; DATA XREF: sub_10003A3B:loc_10003A5Bo
					; sub_10007050w
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_100034EB+3r
					; sub_10003E95+Br ...
dword_1000A014	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_10006F21+29w ...
		align 10h
dword_1000A020	dd 1			; DATA XREF: sub_10006C54+11w
					; sub_10006C54+33r ...
dword_1000A024	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
		dd 3 dup(0)
flt_1000A034	dd 0.0			; DATA XREF: sub_10001024+52w
byte_1000A038	db 0			; DATA XREF: sub_10003246+31r
					; sub_10003608+77r ...
		align 4
		dd 2 dup(0)
dword_1000A044	dd 0			; DATA XREF: sub_10002B04+6o
					; sub_10002B04+Fw ...
dword_1000A048	dd 0			; DATA XREF: sub_10002B04+19w
dword_1000A04C	dd 0			; DATA XREF: sub_10002B04r
					; sub_10002B04+22w
dword_1000A050	dd 0			; DATA XREF: sub_1000445D+1Ao
					; sub_1000445D+47r ...
		dd 4 dup(0)
dword_1000A064	dd 0			; DATA XREF: sub_1000445D:loc_1000449Br
dword_1000A068	dd 0			; DATA XREF: sub_1000445D:loc_10004471r
					; sub_1000445D+27w
dword_1000A06C	dd 0			; DATA XREF: sub_1000673C+12r
					; sub_1000673C+25w ...
dword_1000A070	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_100085BCo
dword_1000A074	dd 0			; DATA XREF: ___report_gsfailure+A9w
		dd 0
dword_1000A07C	dd 0			; DATA XREF: ___report_gsfailure+9Aw
dword_1000A080	dd 0			; DATA XREF: ___report_gsfailure+B3w
dword_1000A084	dd 0			; DATA XREF: ___report_gsfailure+C3w
		align 40h
dword_1000A0C0	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:100085C0o
		dd 22h dup(0)
word_1000A14C	dw 0			; DATA XREF: ___report_gsfailure+5Fw
		align 10h
word_1000A150	dw 0			; DATA XREF: ___report_gsfailure+58w
		align 4
word_1000A154	dw 0			; DATA XREF: ___report_gsfailure+51w
		align 4
word_1000A158	dw 0			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_1000A15C	dd 0			; DATA XREF: ___report_gsfailure+36w
dword_1000A160	dd 0			; DATA XREF: ___report_gsfailure+30w
dword_1000A164	dd 0			; DATA XREF: ___report_gsfailure+2Aw
dword_1000A168	dd 0			; DATA XREF: ___report_gsfailure+24w
dword_1000A16C	dd 0			; DATA XREF: ___report_gsfailure+1Ew
dword_1000A170	dd 0			; DATA XREF: ___report_gsfailure:loc_10006B72w
dword_1000A174	dd 0			; DATA XREF: ___report_gsfailure+70w
dword_1000A178	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_1000A17C	dw 0			; DATA XREF: ___report_gsfailure+43w
		align 10h
dword_1000A180	dd 0			; DATA XREF: ___report_gsfailure+67w
dword_1000A184	dd 0			; DATA XREF: ___report_gsfailure+80w
word_1000A188	dw 0			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 1Dh dup(0)
		dd 63h dup(?)
dword_1000A38C	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_1000A390	dd ?			; DATA XREF: .text:__ftol2_sser
					; .text:__ftol2_sse_excptr ...
dword_1000A394	dd ?			; DATA XREF: sub_10006C54:loc_10006D1Br
					; sub_10006C54+D0w ...
dword_1000A398	dd 2 dup(?)		; DATA XREF: sub_1000700Ao
dword_1000A3A0	dd ?			; DATA XREF: sub_1000673C+20o
					; sub_1000673C+112o ...
dword_1000A3A4	dd ?			; DATA XREF: sub_1000673C:loc_1000678Fr
					; sub_1000673C:loc_10006858w ...
dword_1000A3A8	dd ?			; DATA XREF: sub_1000673C:loc_100068FCr
					; sub_1000673C+1C9o ...
; PVOID	dword_1000A3AC
dword_1000A3AC	dd ?			; DATA XREF: ___atonexitinit+27w
					; sub_10006526+49r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: ___atonexitinitr
					; ___atonexitinit+22w ...
		align 1000h
_data		ends


		end DllEntryPoint
