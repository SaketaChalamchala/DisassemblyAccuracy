;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8DD3130FA2325C387B534DC7D4D0D5ED
; Input	CRC32 :	D488AF8B

; File Name   :	C:\compspace\compare\thunderbird\dlls\original\AccessibleMarshal.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 000000B4 (	180.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; PDB File Name	: c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-tb\accessible\interfaces\msaa\AccessibleMarshal.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_orpc		segment	para public 'CODE' use32
		assume cs:_orpc
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10001000(void *, int)
sub_10001000	proc near		; DATA XREF: .rdata:10003378o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	10h		; size_t
		push	4
		pop	eax
		imul	eax, 0
		mov	eax, ds:off_10003350[eax]
		push	dword ptr [eax+4] ; void *
		push	[ebp+arg_0]	; void *
		call	memcmp
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_10001034
		mov	eax, [ebp+arg_4]
		and	dword ptr [eax], 0
		xor	eax, eax
		inc	eax
		jmp	short loc_10001036
; ---------------------------------------------------------------------------

loc_10001034:				; CODE XREF: sub_10001000+27j
		xor	eax, eax

loc_10001036:				; CODE XREF: sub_10001000+32j
		mov	esp, ebp
		pop	ebp
		retn	8
sub_10001000	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_1000103C(void *, int)
sub_1000103C	proc near		; DATA XREF: .rdata:10003848o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	10h		; size_t
		push	4
		pop	eax
		imul	eax, 0
		mov	eax, ds:off_10003820[eax]
		push	dword ptr [eax+4] ; void *
		push	[ebp+arg_0]	; void *
		call	memcmp
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_10001070
		mov	eax, [ebp+arg_4]
		and	dword ptr [eax], 0
		xor	eax, eax
		inc	eax
		jmp	short loc_10001072
; ---------------------------------------------------------------------------

loc_10001070:				; CODE XREF: sub_1000103C+27j
		xor	eax, eax

loc_10001072:				; CODE XREF: sub_1000103C+32j
		mov	esp, ebp
		pop	ebp
		retn	8
sub_1000103C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10001078(void *, int)
sub_10001078	proc near		; DATA XREF: .rdata:10003ACCo

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	10h		; size_t
		push	4
		pop	eax
		imul	eax, 0
		mov	eax, ds:off_10003AA4[eax]
		push	dword ptr [eax+4] ; void *
		push	[ebp+arg_0]	; void *
		call	memcmp
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_100010AC
		mov	eax, [ebp+arg_4]
		and	dword ptr [eax], 0
		xor	eax, eax
		inc	eax
		jmp	short loc_100010AE
; ---------------------------------------------------------------------------

loc_100010AC:				; CODE XREF: sub_10001078+27j
		xor	eax, eax

loc_100010AE:				; CODE XREF: sub_10001078+32j
		mov	esp, ebp
		pop	ebp
		retn	8
sub_10001078	endp

; ---------------------------------------------------------------------------
		align 200h
		dd 380h	dup(?)
_orpc		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000A0A (   2570.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00000600
; Flags	60000020: Text Executable Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10002000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10002000(IRpcStubBuffer *This)
sub_10002000	proc near		; DATA XREF: .rdata:10003330o
					; .rdata:10003800o ...

This		= dword	ptr  4

		push	offset pPSF	; pPSF
		push	[esp+4+This]	; This
		call	NdrCStdStubBuffer_Release
		retn	4
sub_10002000	endp

; Exported entry   1. DllCanUnloadNow

; =============== S U B	R O U T	I N E =======================================


; HRESULT __stdcall DllCanUnloadNow()
		public DllCanUnloadNow
DllCanUnloadNow	proc near		; DATA XREF: .rdata:off_10003C98o
		push	offset pPSF	; pPSFactoryBuffer
		call	ds:NdrDllCanUnloadNow
		retn
DllCanUnloadNow	endp

; Exported entry   2. DllGetClassObject

; =============== S U B	R O U T	I N E =======================================


; HRESULT __stdcall DllGetClassObject(const CLSID *const rclsid, const IID *const riid,	LPVOID *ppv)
		public DllGetClassObject
DllGetClassObject proc near		; DATA XREF: .rdata:off_10003C98o

rclsid		= dword	ptr  4
riid		= dword	ptr  8
ppv		= dword	ptr  0Ch

		mov	eax, pProxyFileList
		mov	eax, [eax+4]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_1000202F
		mov	eax, [eax]
		jmp	short loc_10002031
; ---------------------------------------------------------------------------

loc_1000202F:				; CODE XREF: DllGetClassObject+Cj
		xor	eax, eax

loc_10002031:				; CODE XREF: DllGetClassObject+10j
		push	offset pPSF	; pPSFactoryBuffer
		push	eax		; pclsid
		push	offset pProxyFileList ;	pProxyFileList
		push	[esp+0Ch+ppv]	; ppv
		push	[esp+10h+riid]	; riid
		push	[esp+14h+rclsid] ; rclsid
		call	ds:NdrDllGetClassObject
		retn	0Ch
DllGetClassObject endp


; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12	proc near		; CODE XREF: ___DllMainCRTStartup+7Dp
					; ___DllMainCRTStartup+97p

hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpvReserved	= dword	ptr  0Ch

		cmp	[esp+fdwReason], 1
		jnz	short loc_10002069
		mov	ecx, [esp+hinstDLL]
		push	ecx		; hLibModule
		mov	hDll, ecx
		call	ds:DisableThreadLibraryCalls

loc_10002069:				; CODE XREF: DllMain(x,x,x)+5j
		xor	eax, eax
		inc	eax
		retn	0Ch
_DllMain@12	endp

; Exported entry   3. DllRegisterServer

; =============== S U B	R O U T	I N E =======================================


; HRESULT __stdcall DllRegisterServer()
		public DllRegisterServer
DllRegisterServer proc near		; DATA XREF: .rdata:off_10003C98o
		mov	eax, pProxyFileList
		mov	eax, [eax+4]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_10002081
		mov	eax, [eax]
		jmp	short loc_10002083
; ---------------------------------------------------------------------------

loc_10002081:				; CODE XREF: DllRegisterServer+Cj
		xor	eax, eax

loc_10002083:				; CODE XREF: DllRegisterServer+10j
		push	eax		; pclsid
		push	offset pProxyFileList ;	pProxyFileList
		push	hDll		; hDll
		call	ds:NdrDllRegisterProxy
		retn
DllRegisterServer endp

; Exported entry   4. DllUnregisterServer

; =============== S U B	R O U T	I N E =======================================


; HRESULT __stdcall DllUnregisterServer()
		public DllUnregisterServer
DllUnregisterServer proc near		; DATA XREF: .rdata:off_10003C98o
		mov	eax, pProxyFileList
		mov	eax, [eax+4]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_100020A8
		mov	eax, [eax]
		jmp	short loc_100020AA
; ---------------------------------------------------------------------------

loc_100020A8:				; CODE XREF: DllUnregisterServer+Cj
		xor	eax, eax

loc_100020AA:				; CODE XREF: DllUnregisterServer+10j
		push	eax		; pclsid
		push	offset pProxyFileList ;	pProxyFileList
		push	hDll		; hDll
		call	ds:NdrDllUnregisterProxy
		retn
DllUnregisterServer endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION NdrOleAllocate]
; [00000006 BYTES: COLLAPSED FUNCTION NdrOleFree]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_QueryInterface]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_AddRef]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_Connect]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_Disconnect]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_Invoke]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_IsIIDSupported]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_CountRefs]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_DebugServerQueryInterface]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_DebugServerRelease]
; [00000006 BYTES: COLLAPSED FUNCTION IUnknown_QueryInterface_Proxy]
; [00000006 BYTES: COLLAPSED FUNCTION IUnknown_AddRef_Proxy]
; [00000006 BYTES: COLLAPSED FUNCTION IUnknown_Release_Proxy]
; [00000006 BYTES: COLLAPSED FUNCTION NdrCStdStubBuffer_Release]
; [00000006 BYTES: COLLAPSED FUNCTION BSTR_UserSize]
; [00000006 BYTES: COLLAPSED FUNCTION BSTR_UserMarshal]
; [00000006 BYTES: COLLAPSED FUNCTION BSTR_UserUnmarshal]
; [00000006 BYTES: COLLAPSED FUNCTION BSTR_UserFree]
; [00000006 BYTES: COLLAPSED FUNCTION memcmp]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002182	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_100022BD
		mov	eax, dword_100050E4
		test	eax, eax
		jle	loc_100022B6
		dec	eax
		mov	ebx, offset dword_10005410
		mov	dword_100050E4,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_100021C0
; ---------------------------------------------------------------------------

loc_100021BC:				; CODE XREF: sub_10002182+48j
		cmp	eax, edx
		jz	short loc_100021CE

loc_100021C0:				; CODE XREF: sub_10002182+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_100021BC
		jmp	short loc_100021D5
; ---------------------------------------------------------------------------

loc_100021CE:				; CODE XREF: sub_10002182+3Cj
		mov	[ebp+var_4], 1

loc_100021D5:				; CODE XREF: sub_10002182+4Aj
		cmp	dword_10005414,	2
		jz	short loc_100021EB
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_1000236D
; ---------------------------------------------------------------------------

loc_100021EB:				; CODE XREF: sub_10002182+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_1000229E
		push	dword_10005418	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_10002218:				; CODE XREF: sub_10002182+9Fj
					; sub_10002182+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_1000227B
		cmp	[ebx], edi
		jz	short loc_10002218
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_10002218
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_10005418	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_1000226C
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_10002218

loc_1000226C:				; CODE XREF: sub_10002182+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_10002218
; ---------------------------------------------------------------------------

loc_1000227B:				; CODE XREF: sub_10002182+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10002288
		push	esi
		call	ds:frex
		pop	ecx

loc_10002288:				; CODE XREF: sub_10002182+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_10005418,	eax
		mov	ebx, offset dword_10005410
		mov	Ptr, eax

loc_1000229E:				; CODE XREF: sub_10002182+7Cj
		mov	dword_10005414,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_1000236D
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_1000236D
; ---------------------------------------------------------------------------

loc_100022B6:				; CODE XREF: sub_10002182+19j
					; sub_10002182+19Fj
		xor	eax, eax
		jmp	loc_10002370
; ---------------------------------------------------------------------------

loc_100022BD:				; CODE XREF: sub_10002182+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_1000236D
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_10005410
		mov	edx, [eax+4]
		jmp	short loc_100022DF
; ---------------------------------------------------------------------------

loc_100022DB:				; CODE XREF: sub_10002182+167j
		cmp	eax, edx
		jz	short loc_100022ED

loc_100022DF:				; CODE XREF: sub_10002182+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_100022DB
		jmp	short loc_100022F0
; ---------------------------------------------------------------------------

loc_100022ED:				; CODE XREF: sub_10002182+15Bj
		xor	esi, esi
		inc	esi

loc_100022F0:				; CODE XREF: sub_10002182+169j
		cmp	dword_10005414,	edi
		push	2
		pop	edi
		jz	short loc_10002304
		push	1Fh
		call	_amsg_exit
		jmp	short loc_10002339
; ---------------------------------------------------------------------------

loc_10002304:				; CODE XREF: sub_10002182+177j
		push	offset dword_100030EC
		push	offset dword_100030E0
		mov	dword_10005414,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_100022B6
		push	offset dword_100030DC
		push	offset dword_100030D8
		call	_initterm
		pop	ecx
		mov	dword_10005414,	edi

loc_10002339:				; CODE XREF: sub_10002182+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_10002342
		xor	eax, eax
		xchg	eax, [ebx]

loc_10002342:				; CODE XREF: sub_10002182+1BAj
		cmp	dword_10005420,	0
		jz	short loc_10002367
		push	offset dword_10005420
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_10002367
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_10005420

loc_10002367:				; CODE XREF: sub_10002182+1C7j
					; sub_10002182+1D6j
		inc	dword_100050E4

loc_1000236D:				; CODE XREF: sub_10002182+64j
					; sub_10002182+125j ...
		xor	eax, eax
		inc	eax

loc_10002370:				; CODE XREF: sub_10002182+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10002182	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100024E0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_1000251C
		mov	edi, [ebp+arg_4]

loc_10002504:				; CODE XREF: sub_100024E0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10002514
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_1000251E

loc_10002514:				; CODE XREF: sub_100024E0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_10002504

loc_1000251C:				; CODE XREF: sub_100024E0+1Fj
		xor	eax, eax

loc_1000251E:				; CODE XREF: sub_100024E0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100024E0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000265D(_onexit_t)
sub_1000265D	proc near		; CODE XREF: sub_10002706+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	14h
		push	offset stru_10003C50
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000268F
		push	[ebp+arg_0]	; _onexit_t
		call	ds:_onexit
		pop	ecx
		jmp	short loc_100026F4
; ---------------------------------------------------------------------------

loc_1000268F:				; CODE XREF: sub_1000265D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_10005418	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+arg_0]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_10005418,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_100026FD
; ---------------------------------------------------------------------------

loc_100026F2:				; CODE XREF: sub_1000265D+A8j
		mov	eax, edi

loc_100026F4:				; CODE XREF: sub_1000265D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_100026FA:				; DATA XREF: .rdata:stru_10003C50o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 1000265D

loc_100026FD:				; CODE XREF: sub_1000265D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_1000265D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10002706(_onexit_t)
sub_10002706	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]	; _onexit_t
		call	sub_1000265D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_10002706	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000271B	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_1000274B
		test	esi, eax
		jz	short loc_1000274B
		not	eax
		mov	dword_100050C8,	eax
		jmp	short loc_100027B1
; ---------------------------------------------------------------------------

loc_1000274B:				; CODE XREF: sub_1000271B+21j
					; sub_1000271B+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_10002793
		mov	ecx, 0BB40E64Fh
		jmp	short loc_100027A3
; ---------------------------------------------------------------------------

loc_10002793:				; CODE XREF: sub_1000271B+6Fj
		test	esi, ecx
		jnz	short loc_100027A3
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_100027A3:				; CODE XREF: sub_1000271B+76j
					; sub_1000271B+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_100050C8,	ecx

loc_100027B1:				; CODE XREF: sub_1000271B+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000271B	endp


; =============== S U B	R O U T	I N E =======================================


sub_100027B7	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_10003BF8
		mov	edi, offset dword_10003BF8
		jmp	short loc_100027D0
; ---------------------------------------------------------------------------

loc_100027C5:				; CODE XREF: sub_100027B7+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100027CD
		call	eax

loc_100027CD:				; CODE XREF: sub_100027B7+12j
		add	esi, 4

loc_100027D0:				; CODE XREF: sub_100027B7+Cj
		cmp	esi, edi
		jb	short loc_100027C5
		pop	edi
		pop	esi
		retn
sub_100027B7	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100027D7()
sub_100027D7	proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_10003C00
		mov	edi, offset dword_10003C00
		jmp	short loc_100027F0
; ---------------------------------------------------------------------------

loc_100027E5:				; CODE XREF: sub_100027D7+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100027ED
		call	eax

loc_100027ED:				; CODE XREF: sub_100027D7+12j
		add	esi, 4

loc_100027F0:				; CODE XREF: sub_100027D7+Cj
		cmp	esi, edi
		jb	short loc_100027E5
		pop	edi
		pop	esi
		retn
sub_100027D7	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002804()
sub_10002804	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_100050E8
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_10002804	endp

; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; ---------------------------------------------------------------------------

loc_100028A4:				; DATA XREF: __except_handler4+Fo
		cmp	ecx, ___security_cookie
		jnz	short loc_100028AE
		rep retn
; ---------------------------------------------------------------------------

loc_100028AE:				; CODE XREF: .text:100028AAj
		jmp	___report_gsfailure
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 200h
		dd 100h	dup(?)
_text		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00001292 (   4754.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00001200
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule)
		extrn DisableThreadLibraryCalls:dword ;	CODE XREF: DllMain(x,x,x)+12p
					; DATA XREF: DllMain(x,x,x)+12r ...
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_1000271B+34p
					; DATA XREF: sub_1000271B+34r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_1000271B+43p
					; DATA XREF: sub_1000271B+43r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_1000271B+4Cp
					; DATA XREF: sub_1000271B+4Cr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_1000271B+59p
					; DATA XREF: sub_1000271B+59r
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_10002182+6Fp
					; sub_10002182+88p ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_10002182+A2p ...
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr

;
; Imports from MSVCR120.dll
;
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
					; .rdata:10003D6Co
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_1000265D+29p
					; DATA XREF: sub_1000265D+29r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
; int __cdecl memcmp(const void	*, const void *, size_t)
		extrn __imp_memcmp:dword ; DATA	XREF: memcmpr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr

;
; Imports from OLEAUT32.dll
;
; void __stdcall BSTR_UserFree(unsigned	__int32	*, BSTR	*)
		extrn __imp_BSTR_UserFree:dword	; DATA XREF: BSTR_UserFreer
					; .rdata:10003D58o
; unsigned __int8 *__stdcall BSTR_UserMarshal(unsigned __int32 *, unsigned __int8 *, BSTR *)
		extrn __imp_BSTR_UserMarshal:dword ; DATA XREF:	BSTR_UserMarshalr
; unsigned __int8 *__stdcall BSTR_UserUnmarshal(unsigned __int32 *, unsigned __int8 *, BSTR *)
		extrn __imp_BSTR_UserUnmarshal:dword ; DATA XREF: BSTR_UserUnmarshalr
; unsigned __int32 __stdcall BSTR_UserSize(unsigned __int32 *, unsigned	__int32, BSTR *)
		extrn __imp_BSTR_UserSize:dword	; DATA XREF: BSTR_UserSizer

;
; Imports from RPCRT4.dll
;
; void *__stdcall NdrOleAllocate(size_t	Size)
		extrn __imp_NdrOleAllocate:dword ; DATA	XREF: NdrOleAllocater
					; .rdata:10003D44o
; IRpcStubBuffer *__stdcall CStdStubBuffer_IsIIDSupported(IRpcStubBuffer *This,	const IID *const riid)
		extrn __imp_CStdStubBuffer_IsIIDSupported:dword
					; DATA XREF: CStdStubBuffer_IsIIDSupportedr
; HRESULT __stdcall NdrDllUnregisterProxy(HMODULE hDll,	const ProxyFileInfo **pProxyFileList, const CLSID *pclsid)
		extrn NdrDllUnregisterProxy:dword ; CODE XREF: DllUnregisterServer+20p
					; DATA XREF: DllUnregisterServer+20r
; HRESULT __stdcall NdrDllRegisterProxy(HMODULE	hDll, const ProxyFileInfo **pProxyFileList, const CLSID	*pclsid)
		extrn NdrDllRegisterProxy:dword	; CODE XREF: DllRegisterServer+20p
					; DATA XREF: DllRegisterServer+20r
; HRESULT __stdcall NdrDllCanUnloadNow(CStdPSFactoryBuffer *pPSFactoryBuffer)
		extrn NdrDllCanUnloadNow:dword ; CODE XREF: DllCanUnloadNow+5p
					; DATA XREF: DllCanUnloadNow+5r
; HRESULT __stdcall NdrDllGetClassObject(const CLSID *const rclsid, const IID *const riid, void	**ppv, const ProxyFileInfo **pProxyFileList, const CLSID *pclsid, CStdPSFactoryBuffer *pPSFactoryBuffer)
		extrn NdrDllGetClassObject:dword ; CODE	XREF: DllGetClassObject+2Bp
					; DATA XREF: DllGetClassObject+2Br
; ULONG	__stdcall NdrCStdStubBuffer_Release(IRpcStubBuffer *This, IPSFactoryBuffer *pPSF)
		extrn __imp_NdrCStdStubBuffer_Release:dword
					; DATA XREF: NdrCStdStubBuffer_Releaser
; ULONG	__stdcall IUnknown_Release_Proxy(IUnknown *This)
		extrn __imp_IUnknown_Release_Proxy:dword
					; DATA XREF: IUnknown_Release_Proxyr
; ULONG	__stdcall IUnknown_AddRef_Proxy(IUnknown *This)
		extrn __imp_IUnknown_AddRef_Proxy:dword	; DATA XREF: IUnknown_AddRef_Proxyr
; void __stdcall NdrOleFree(void *NodeToFree)
		extrn __imp_NdrOleFree:dword ; DATA XREF: NdrOleFreer
; HRESULT __stdcall IUnknown_QueryInterface_Proxy(IUnknown *This, const	IID *const riid, void **ppvObject)
		extrn __imp_IUnknown_QueryInterface_Proxy:dword
					; DATA XREF: IUnknown_QueryInterface_Proxyr
; void __stdcall CStdStubBuffer_DebugServerRelease(IRpcStubBuffer *This, void *pv)
		extrn __imp_CStdStubBuffer_DebugServerRelease:dword
					; DATA XREF: CStdStubBuffer_DebugServerReleaser
; HRESULT __stdcall CStdStubBuffer_DebugServerQueryInterface(IRpcStubBuffer *This, void	**ppv)
		extrn __imp_CStdStubBuffer_DebugServerQueryInterface:dword
					; DATA XREF: CStdStubBuffer_DebugServerQueryInterfacer
; HRESULT __stdcall CStdStubBuffer_Invoke(IRpcStubBuffer *This,	RPCOLEMESSAGE *pRpcMsg,	IRpcChannelBuffer *pRpcChannelBuffer)
		extrn __imp_CStdStubBuffer_Invoke:dword	; DATA XREF: CStdStubBuffer_Invoker
; void __stdcall CStdStubBuffer_Disconnect(IRpcStubBuffer *This)
		extrn __imp_CStdStubBuffer_Disconnect:dword
					; DATA XREF: CStdStubBuffer_Disconnectr
; HRESULT __stdcall CStdStubBuffer_Connect(IRpcStubBuffer *This, IUnknown *pUnkServer)
		extrn __imp_CStdStubBuffer_Connect:dword
					; DATA XREF: CStdStubBuffer_Connectr
; ULONG	__stdcall CStdStubBuffer_AddRef(IRpcStubBuffer *This)
		extrn __imp_CStdStubBuffer_AddRef:dword	; DATA XREF: CStdStubBuffer_AddRefr
; HRESULT __stdcall CStdStubBuffer_QueryInterface(IRpcStubBuffer *This,	const IID *const riid, void **ppvObject)
		extrn __imp_CStdStubBuffer_QueryInterface:dword
					; DATA XREF: CStdStubBuffer_QueryInterfacer
; ULONG	__stdcall CStdStubBuffer_CountRefs(IRpcStubBuffer *This)
		extrn __imp_CStdStubBuffer_CountRefs:dword
					; DATA XREF: CStdStubBuffer_CountRefsr

;
; Imports from mozglue.dll
;
		extrn frex:dword	; CODE XREF: sub_10002182+FFp
					; DATA XREF: sub_10002182+FFr ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 100030D8h
dword_100030D8	dd 0			; DATA XREF: sub_10002182+1A6o
dword_100030DC	dd 0			; DATA XREF: sub_10002182+1A1o
dword_100030E0	dd 0			; DATA XREF: sub_10002182+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
dword_100030EC	dd 0			; DATA XREF: sub_10002182:loc_10002304o
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56F29A28h		; TimeDateStamp: Wed Mar 23 13:29:12 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 8Dh			; SizeOfData
		dd rva asc_10003B48	; AddressOfRawData
		dd 1D48h		; PointerToRawData
		dd 0			; Characteristics
		dd 56F29A28h		; TimeDateStamp: Wed Mar 23 13:29:12 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_10003BD8	; AddressOfRawData
		dd 1DD8h		; PointerToRawData
dword_10003128	dd 0D68D6D0h, 4D08D93Dh, 0DF00DA3h, 245BF4D1h, 8A885D04h
					; DATA XREF: .rdata:off_10003318o
					; .data:10005004o
		dd 11C91CEBh, 8E89Fh, 6048102Bh, 2, 240000h, 6C0048h, 0BA0090h
		dd 0
dword_1000315C	dd 1C0411h, 0E0013h, 2011Bh, 0FFFC0009h, 5B060001h, 80317h
		dd 808FFF0h, 83B45B5Ch,	40000h,	0FFDE0000h, 60011h, 0FFE60012h
		dd 83B4h, 4, 0FFF4h, 6C330000h,	0
		dd 0C0003h, 80000h, 3080245h, 1, 21130000h, 200004h, 80070h
		dd 6C330008h, 0
		dd 0C0004h, 80000h, 3080245h, 1, 21130000h, 200004h, 80070h
		dd 6C330008h, 0
		dd 0C0005h, 80000h, 3080245h, 1, 21130000h, 200004h, 80070h
		dd 6C330008h, 0
		dd 0C0006h, 80000h, 3080245h, 1, 21130000h, 200004h, 80070h
		dd 6C330008h, 0
		dd 100007h, 80006h, 3080345h, 1, 480000h, 60004h, 82113h
		dd 700020h, 8000Ch, 6C33h, 80000h, 0Ch,	2460008h, 508h
		dd 1, 4010Bh, 700032h, 80008h, 2 dup(0)
dword_10003280	dd 0			; DATA XREF: .rdata:off_100032D0o
					; .rdata:off_100032F0o
		dd offset NdrOleAllocate
		dd offset NdrOleFree
		align 20h
		dd offset dword_10003128+32h
		dd 1, 50002h, 0
		dd 800025Bh, 0
		dd offset off_10003308
		align 10h
		dd 1, 3	dup(0)
off_100032D0	dd offset dword_10003280 ; DATA	XREF: .rdata:1000331Co
		align 8
		dd offset dword_1000315C+3Eh
		dd offset dword_10003128+1Eh
		dd 4 dup(0)
off_100032F0	dd offset dword_10003280 ; DATA	XREF: .data:off_10005000o
		dd offset dword_1000315C+3Eh
		dd offset dword_10003128+1Eh
		dd 3 dup(0)
off_10003308	dd offset BSTR_UserSize	; DATA XREF: .rdata:100032B8o
		dd offset BSTR_UserMarshal
		dd offset BSTR_UserUnmarshal
		dd offset BSTR_UserFree
off_10003318	dd offset dword_10003128 ; DATA	XREF: .rdata:off_10003358o
		dd offset off_100032D0
		dd 9, 0
		dd offset CStdStubBuffer_QueryInterface
		dd offset CStdStubBuffer_AddRef
		dd offset sub_10002000
		dd offset CStdStubBuffer_Connect
		dd offset CStdStubBuffer_Disconnect
		dd offset CStdStubBuffer_Invoke
		dd offset CStdStubBuffer_IsIIDSupported
		dd offset CStdStubBuffer_CountRefs
		dd offset CStdStubBuffer_DebugServerQueryInterface
		dd offset CStdStubBuffer_DebugServerRelease
off_10003350	dd offset off_10005000	; DATA XREF: sub_10001000+Cr
					; .rdata:off_10003368o
		align 8
off_10003358	dd offset off_10003318	; DATA XREF: .rdata:1000336Co
		align 10h
off_10003360	dd offset aIsimpledomdocu ; DATA XREF: .rdata:10003370o
					; "ISimpleDOMDocument"
		align 8
off_10003368	dd offset off_10003350	; DATA XREF: .data:pProxyFileListo
		dd offset off_10003358
		dd offset off_10003360
		dd 0
		dd offset sub_10001000
		dd 20001h, 4 dup(0)
aIsimpledomdocu	db 'ISimpleDOMDocument',0 ; DATA XREF: .rdata:off_10003360o
		align 4
dword_100033A4	dd 1814CEEBh, 407F49E2h, 75FA99AFh, 7267D5Ah, 0A6245497h
					; DATA XREF: .rdata:off_100037E8o
					; .data:10005034o
		dd 44499C0Bh, 6ABDA585h, 0EAF87DD0h, 0
dword_100033C8	dd 8A885D04h, 11C91CEBh, 8E89Fh, 6048102Bh, 2, 2 dup(0)
		dd 1C0411h, 0E0013h, 2011Bh, 0FFFC0009h, 5B060001h, 80317h
		dd 808FFF0h, 83B45B5Ch,	40000h,	0FFDE0000h, 5C060C11h
		dd 5C080C11h, 20011h, 321h, 40027h, 54270001h, 14h, 0FFD8004Ch
		dd 115B5Ch, 11C0002h, 270002h, 10004h, 145427h,	5B060000h
		dd 100011h, 0FFAE0012h,	83B4h, 4, 321FFF4h, 270000h, 10004h
		dd 40027h, 4C0001h, 5B5CFFE4h, 20011h, 2011Ch, 40027h
		dd 270001h, 10004h, 115B06h, 3210002h, 270000h,	10004h
		dd 40027h, 4C0001h, 5B5CFF6Ah, 21011h, 0CEEB5A2Fh, 49E21814h
		dd 99AF407Fh, 7D5A75FAh, 726h, 0
dword_100034B8	dd 6C330000h, 0		; DATA XREF: .rdata:10003788o
					; .rdata:100037A4o
		dd 200003h, 740000h, 3080745h, 1, 21130000h, 200004h, 82150h
		dd 21130006h, 20000Ch, 102150h,	21500008h, 80014h, 182150h
		dd 700006h, 8001Ch, 6C33h, 40000h, 6001Ch, 6450022h, 10308h
		dd 0
		dd 40048h, 1130006h, 360008h, 0C0113h, 1130050h, 360010h
		dd 142150h, 700006h, 80018h, 6C33h, 50000h, 60018h, 5470008h
		dd 10708h, 1, 40048h, 10B0006h,	740008h, 0C010Bh, 113008Eh
		dd 0A40010h, 140070h, 6C330008h, 0
		dd 1C0006h, 22000Bh, 3080645h, 1, 480000h, 60004h, 80048h
		dd 1130003h, 36000Ch, 100113h, 21500036h, 60014h, 180070h
		dd 6C330008h, 0
		dd 180007h, 8000Bh, 7080547h, 10001h, 480000h, 60004h
		dd 80048h, 10B0003h, 74000Ch, 100113h, 7000A4h,	80014h
		dd 6C33h, 80000h, 5000Ch, 2440008h, 108h, 0
		dd 40048h, 700003h, 80008h, 6C33h, 90000h, 0Ch,	2450008h
		dd 108h, 0
		dd 40013h, 7000BAh, 80008h, 6C33h, 0A0000h, 0Ch, 2450008h
		dd 108h, 0
		dd 40013h, 7000BAh, 80008h, 6C33h, 0B0000h, 0Ch, 2450008h
		dd 108h, 0
		dd 40013h, 7000BAh, 80008h, 6C33h, 0C0000h, 0Ch, 2450008h
		dd 108h, 0
		dd 40013h, 7000BAh, 80008h, 6C33h, 0D0000h, 0Ch, 2450008h
		dd 108h, 0
		dd 40013h, 7000BAh, 80008h, 6C33h, 0E0000h, 80010h, 3450008h
		dd 108h, 0
		dd 40048h, 130008h, 0BA0008h, 0C0070h, 6C330008h, 0
		dd 0C000Fh, 80000h, 3080245h, 1, 21130000h, 200004h, 80070h
		dd 6C330008h, 0
		dd 0C0011h, 80000h, 3080245h, 1, 21130000h, 200004h, 80070h
		dd 8, 0
dword_10003730	dd 0			; DATA XREF: .rdata:off_10003780o
					; .rdata:off_100037A0o
		dd offset NdrOleAllocate
		dd offset NdrOleFree
		dd 5 dup(0)
		dd offset dword_100033C8+1Ah
		dd 1, 50002h, 0
		dd 800025Bh, 0
		dd offset off_100037B8
		align 10h
		dd 1, 3	dup(0)
off_10003780	dd offset dword_10003730 ; DATA	XREF: .rdata:100037ECo
		align 8
		dd offset dword_100034B8+2
		dd offset off_100037C0+2
		align 20h
off_100037A0	dd offset dword_10003730 ; DATA	XREF: .data:off_10005030o
		dd offset dword_100034B8+2
		dd offset off_100037C0+2
		dd 3 dup(0)
off_100037B8	dd offset BSTR_UserSize	; DATA XREF: .rdata:10003768o
		dd offset BSTR_UserMarshal
off_100037C0	dd offset BSTR_UserUnmarshal ; DATA XREF: .rdata:1000378Co
					; .rdata:100037A8o
		dd offset BSTR_UserFree
		dd 420000h, 0B4007Eh, 12600F0h,	16E014Ah, 1B60192h, 1FE01DAh
		dd 0FFFF0228h, 24Ch
off_100037E8	dd offset dword_100033A4 ; DATA	XREF: .rdata:off_10003828o
		dd offset off_10003780
		dd 12h,	0
		dd offset CStdStubBuffer_QueryInterface
		dd offset CStdStubBuffer_AddRef
		dd offset sub_10002000
		dd offset CStdStubBuffer_Connect
		dd offset CStdStubBuffer_Disconnect
		dd offset CStdStubBuffer_Invoke
		dd offset CStdStubBuffer_IsIIDSupported
		dd offset CStdStubBuffer_CountRefs
		dd offset CStdStubBuffer_DebugServerQueryInterface
		dd offset CStdStubBuffer_DebugServerRelease
off_10003820	dd offset off_10005030	; DATA XREF: sub_1000103C+Cr
					; .rdata:off_10003838o
		align 8
off_10003828	dd offset off_100037E8	; DATA XREF: .rdata:1000383Co
		align 10h
off_10003830	dd offset aIsimpledomnode ; DATA XREF: .rdata:10003840o
					; "ISimpleDOMNode"
		align 8
off_10003838	dd offset off_10003820	; DATA XREF: .data:100050ACo
		dd offset off_10003828
		dd offset off_10003830
		align 8
		dd offset sub_1000103C
		dd 20001h, 4 dup(0)
aIsimpledomnode	db 'ISimpleDOMNode',0   ; DATA XREF: .rdata:off_10003830o
		align 10h
dword_10003870	dd 4E747BE5h, 42652052h, 0CA8EF08Ah, 0C0D1AAD7h, 8A885D04h
					; DATA XREF: .rdata:off_10003A6Co
					; .data:10005084o
		dd 11C91CEBh, 8E89Fh, 6048102Bh, 2, 0
		dd 1C0411h, 0E0013h, 2011Bh, 0FFFC0009h, 5B060001h, 80317h
		dd 808FFF0h, 83B45B5Ch,	40000h,	0FFDE0000h, 5C080C11h
		dd 0
dword_100038C8	dd 6C330000h, 0		; DATA XREF: .rdata:10003A20o
					; .rdata:10003A3Co
		dd 0C0003h, 80000h, 3080245h, 1, 21130000h, 200004h, 80070h
		dd 6C330008h, 0
		dd 200004h, 780010h, 1080744h, 0
		dd 480000h, 80004h, 80048h, 21500008h, 8000Ch, 102150h
		dd 21500008h, 80014h, 182150h, 700008h,	8001Ch,	6C33h
		dd 50000h, 100020h, 7440078h, 108h, 0
		dd 40048h, 480008h, 80008h, 0C2150h, 21500008h,	80010h
		dd 142150h, 21500008h, 80018h, 1C0070h,	6C330008h, 0
		dd 100006h, 80010h, 1080344h, 0
		dd 480000h, 80004h, 80048h, 700008h, 8000Ch, 6C33h, 70000h
		dd 0Ch,	2450008h, 10308h, 0
		dd 42113h, 700020h, 80008h, 2 dup(0)
dword_100039C8	dd 0			; DATA XREF: .rdata:off_10003A18o
					; .rdata:off_10003A38o
		dd offset NdrOleAllocate
		dd offset NdrOleFree
		dd 5 dup(0)
		dd offset dword_10003870+26h
		dd 1, 50002h, 0
		dd 800025Bh, 0
		dd offset off_10003A50
		align 8
		dd 1, 3	dup(0)
off_10003A18	dd offset dword_100039C8 ; DATA	XREF: .rdata:10003A70o
		align 10h
		dd offset dword_100038C8+2
		dd offset off_10003A58+2
		dd 4 dup(0)
off_10003A38	dd offset dword_100039C8 ; DATA	XREF: .data:off_10005080o
		dd offset dword_100038C8+2
		dd offset off_10003A58+2
		align 10h
off_10003A50	dd offset BSTR_UserSize	; DATA XREF: .rdata:10003A00o
		dd offset BSTR_UserMarshal
off_10003A58	dd offset BSTR_UserUnmarshal ; DATA XREF: .rdata:10003A24o
					; .rdata:10003A40o
		dd offset BSTR_UserFree
		dd 240000h, 0A80066h, 0D2h
off_10003A6C	dd offset dword_10003870 ; DATA	XREF: .rdata:off_10003AACo
		dd offset off_10003A18
		dd 8, 0
		dd offset CStdStubBuffer_QueryInterface
		dd offset CStdStubBuffer_AddRef
		dd offset sub_10002000
		dd offset CStdStubBuffer_Connect
		dd offset CStdStubBuffer_Disconnect
		dd offset CStdStubBuffer_Invoke
		dd offset CStdStubBuffer_IsIIDSupported
		dd offset CStdStubBuffer_CountRefs
		dd offset CStdStubBuffer_DebugServerQueryInterface
		dd offset CStdStubBuffer_DebugServerRelease
off_10003AA4	dd offset off_10005080	; DATA XREF: sub_10001078+Cr
					; .rdata:off_10003ABCo
		dd 0
off_10003AAC	dd offset off_10003A6C	; DATA XREF: .rdata:10003AC0o
		dd 0
off_10003AB4	dd offset aIsimpledomtext ; DATA XREF: .rdata:10003AC4o
					; "ISimpleDOMText"
		dd 0
off_10003ABC	dd offset off_10003AA4	; DATA XREF: .data:100050B0o
		dd offset off_10003AAC
		dd offset off_10003AB4
		dd 0
		dd offset sub_10001078
		dd 20001h, 4 dup(0)
aIsimpledomtext	db 'ISimpleDOMText',0   ; DATA XREF: .rdata:off_10003AB4o
		align 4
dword_10003AF4	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_100023DAr
					; ___DllMainCRTStartup+A8r ...
off_10003AF8	dd offset dword_100050F0 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_10005140
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_10003B48	db 'RSDS'               ; DATA XREF: .rdata:10003104o
					; CV signature
		dd 0EA602881h		; Data1	; GUID
		dw 36ACh		; Data2
		dw 420Fh		; Data3
		db 0A4h, 0D1h, 5, 52h, 0E3h, 84h, 8, 0C5h; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-' ; PdbFileName
		db 'tb\accessible\interfaces\msaa\AccessibleMarshal.pdb',0
		align 4
; Debug	information (type 12)
dword_10003BD8	dd 0			; DATA XREF: .rdata:10003120o
		dd 2 dup(15h), 3 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:10003B40o
		align 8
dword_10003BF8	dd 2 dup(0)		; DATA XREF: sub_100027B7+2o
					; sub_100027B7+7o
dword_10003C00	dd 2 dup(0)		; DATA XREF: sub_100027D7+2o
					; sub_100027D7+7o
stru_10003C08	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1000239C
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_10003C30	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10002530
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_100025B9	; ScopeRecord.FilterFunc
		dd offset loc_100025CC	; ScopeRecord.HandlerFunc
		align 10h
stru_10003C50	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_1000265D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1000265D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_100026FA	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for AccessibleMarshal.dll
;
		dd 0			; Characteristics
		dd 56F29A28h		; TimeDateStamp: Wed Mar 23 13:29:12 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aAccessiblemars	; Name
		dd 1			; Base
		dd 4			; NumberOfFunctions
		dd 4			; NumberOfNames
		dd rva off_10003C98	; AddressOfFunctions
		dd rva off_10003CA8	; AddressOfNames
		dd rva word_10003CB8	; AddressOfNameOrdinals
;
; Export Address Table for AccessibleMarshal.dll
;
off_10003C98	dd rva DllCanUnloadNow,	rva DllGetClassObject, rva DllRegisterServer
					; DATA XREF: .rdata:10003C8Co
		dd rva DllUnregisterServer
;
; Export Names Table for AccessibleMarshal.dll
;
off_10003CA8	dd rva aDllcanunloadno,	rva aDllgetclassobj, rva aDllregisterser
					; DATA XREF: .rdata:10003C90o
		dd rva aDllunregisters	; "DllCanUnloadNow"
;
; Export Ordinals Table	for AccessibleMarshal.dll
;
word_10003CB8	dw 0, 1, 2, 3		; DATA XREF: .rdata:10003C94o
aAccessiblemars	db 'AccessibleMarshal.dll',0 ; DATA XREF: .rdata:10003C7Co
aDllcanunloadno	db 'DllCanUnloadNow',0  ; DATA XREF: .rdata:off_10003CA8o
aDllgetclassobj	db 'DllGetClassObject',0 ; DATA XREF: .rdata:off_10003CA8o
aDllregisterser	db 'DllRegisterServer',0 ; DATA XREF: .rdata:off_10003CA8o
aDllunregisters	db 'DllUnregisterServer',0 ; DATA XREF: .rdata:off_10003CA8o
		align 10h
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10003D98 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva DisableThreadLibraryCalls ; Import Address Table
__IMPORT_DESCRIPTOR_RPCRT4 dd rva off_10003E18 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aRpcrt4_dll	; DLL Name
		dd rva __imp_NdrOleAllocate ; Import Address Table
__IMPORT_DESCRIPTOR_OLEAUT32 dd	rva dword_10003E04 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aOleaut32_dll	; DLL Name
		dd rva __imp_BSTR_UserFree ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10003DC0 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva __imp__initterm	; Import Address Table
__IMPORT_DESCRIPTOR_mozglue dd rva off_10003E68	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMozglue_dll	; DLL Name
		dd rva frex		; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10003D98	dd rva word_10003E70	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10004262
		dd rva word_10004248
		dd rva word_10004232
		dd rva word_1000421C
		dd rva word_10004202
		dd rva word_100041F2
		dd rva word_100041E2
		dd rva word_10004276
		dd 0
;
; Import names for MSVCR120.dll
;
off_10003DC0	dd rva word_100040FE	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_100041CA
		dd rva word_100041B0
		dd rva word_1000419A
		dd rva word_10004180
		dd rva word_1000415C
		dd rva word_10004146
		dd rva word_10004138
		dd rva word_1000412A
		dd rva word_10004120
		dd rva word_10004118
		dd rva word_1000410A
		dd rva word_100040B0
		dd rva word_100040F0
		dd rva word_100040DA
		dd rva word_100040C8
		dd 0
;
; Import names for OLEAUT32.dll
;
dword_10003E04	dd 8000011Eh		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_OLEAUT32o
		dd 8000011Ch
		dd 8000011Dh
		dd 8000011Bh
		dd 0
;
; Import names for RPCRT4.dll
;
off_10003E18	dd rva word_10003E9A	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_RPCRT4o
		dd rva word_10003F40
		dd rva word_1000407E
		dd rva word_10004068
		dd rva word_10004052
		dd rva word_1000403A
		dd rva word_1000401E
		dd rva word_10004004
		dd rva word_10003FEC
		dd rva word_10003EAC
		dd rva word_10003FCC
		dd rva word_10003FA8
		dd rva word_10003F7C
		dd rva word_10003F28
		dd rva word_10003F0C
		dd rva word_10003EF2
		dd rva word_10003EDA
		dd rva word_10003EBA
		dd rva word_10003F60
		dd 0
;
; Import names for mozglue.dll
;
off_10003E68	dd rva word_100040E8	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_mozglueo
		dd 0
word_10003E70	dw 113h			; DATA XREF: .rdata:off_10003D98o
		db 'DisableThreadLibraryCalls',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10003D2Co
		align 2
word_10003E9A	dw 107h			; DATA XREF: .rdata:off_10003E18o
		db 'NdrOleAllocate',0
		align 4
word_10003EAC	dw 108h			; DATA XREF: .rdata:10003E3Co
		db 'NdrOleFree',0
		align 2
word_10003EBA	dw 8			; DATA XREF: .rdata:10003E5Co
		db 'CStdStubBuffer_QueryInterface',0
word_10003EDA	dw 0			; DATA XREF: .rdata:10003E58o
		db 'CStdStubBuffer_AddRef',0
word_10003EF2	dw 1			; DATA XREF: .rdata:10003E54o
		db 'CStdStubBuffer_Connect',0
		align 4
word_10003F0C	dw 5			; DATA XREF: .rdata:10003E50o
		db 'CStdStubBuffer_Disconnect',0
word_10003F28	dw 6			; DATA XREF: .rdata:10003E4Co
		db 'CStdStubBuffer_Invoke',0
word_10003F40	dw 7			; DATA XREF: .rdata:10003E1Co
		db 'CStdStubBuffer_IsIIDSupported',0
word_10003F60	dw 2			; DATA XREF: .rdata:10003E60o
		db 'CStdStubBuffer_CountRefs',0
		align 4
word_10003F7C	dw 3			; DATA XREF: .rdata:10003E48o
		db 'CStdStubBuffer_DebugServerQueryInterface',0
		align 4
word_10003FA8	dw 4			; DATA XREF: .rdata:10003E44o
		db 'CStdStubBuffer_DebugServerRelease',0
word_10003FCC	dw 10h			; DATA XREF: .rdata:10003E40o
		db 'IUnknown_QueryInterface_Proxy',0
word_10003FEC	dw 0Fh			; DATA XREF: .rdata:10003E38o
		db 'IUnknown_AddRef_Proxy',0
word_10004004	dw 11h			; DATA XREF: .rdata:10003E34o
		db 'IUnknown_Release_Proxy',0
		align 2
word_1000401E	dw 99h			; DATA XREF: .rdata:10003E30o
		db 'NdrCStdStubBuffer_Release',0
word_1000403A	dw 0CEh			; DATA XREF: .rdata:10003E2Co
		db 'NdrDllGetClassObject',0
		align 2
word_10004052	dw 0CDh			; DATA XREF: .rdata:10003E28o
		db 'NdrDllCanUnloadNow',0
		align 4
word_10004068	dw 0CFh			; DATA XREF: .rdata:10003E24o
		db 'NdrDllRegisterProxy',0
word_1000407E	dw 0D0h			; DATA XREF: .rdata:10003E20o
		db 'NdrDllUnregisterProxy',0
aRpcrt4_dll	db 'RPCRT4.dll',0       ; DATA XREF: .rdata:10003D40o
		align 2
aOleaut32_dll	db 'OLEAUT32.dll',0     ; DATA XREF: .rdata:10003D54o
		align 10h
word_100040B0	dw 6E5h			; DATA XREF: .rdata:10003DF0o
		db 'memcmp',0
		align 2
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10003D68o
		align 4
word_100040C8	dw 16Fh			; DATA XREF: .rdata:10003DFCo
		db '__CppXcptFilter',0
word_100040DA	dw 217h			; DATA XREF: .rdata:10003DF8o
		db '_amsg_exit',0
		align 4
word_100040E8	dw 4Fh			; DATA XREF: .rdata:off_10003E68o
		db 'frex',0
		align 10h
word_100040F0	dw 3A5h			; DATA XREF: .rdata:10003DF4o
		db '_malloc_crt',0
word_100040FE	dw 30Ch			; DATA XREF: .rdata:off_10003DC0o
		db '_initterm',0
word_1000410A	dw 30Dh			; DATA XREF: .rdata:10003DECo
		db '_initterm_e',0
word_10004118	dw 394h			; DATA XREF: .rdata:10003DE8o
		db '_lock',0
word_10004120	dw 504h			; DATA XREF: .rdata:10003DE4o
		db '_unlock',0
word_1000412A	dw 22Eh			; DATA XREF: .rdata:10003DE0o
		db '_calloc_crt',0
word_10004138	dw 1AEh			; DATA XREF: .rdata:10003DDCo
		db '__dllonexit',0
word_10004146	dw 43Ah			; DATA XREF: .rdata:10003DD8o
		db '_onexit',0
aMozglue_dll	db 'mozglue.dll',0      ; DATA XREF: .rdata:10003D7Co
word_1000415C	dw 18Ch			; DATA XREF: .rdata:10003DD4o
		db '__clean_type_info_names_internal',0
		align 10h
word_10004180	dw 27Ah			; DATA XREF: .rdata:10003DD0o
		db '_except_handler4_common',0
word_1000419A	dw 250h			; DATA XREF: .rdata:10003DCCo
		db '_crt_debugger_hook',0
		align 10h
word_100041B0	dw 1ACh			; DATA XREF: .rdata:10003DC8o
		db '__crtUnhandledException',0
word_100041CA	dw 1ABh			; DATA XREF: .rdata:10003DC4o
		db '__crtTerminateProcess',0
word_100041E2	dw 121h			; DATA XREF: .rdata:10003DB4o
		db 'EncodePointer',0
word_100041F2	dw 0FEh			; DATA XREF: .rdata:10003DB0o
		db 'DecodePointer',0
word_10004202	dw 42Dh			; DATA XREF: .rdata:10003DACo
		db 'QueryPerformanceCounter',0
word_1000421C	dw 20Ah			; DATA XREF: .rdata:10003DA8o
		db 'GetCurrentProcessId',0
word_10004232	dw 20Eh			; DATA XREF: .rdata:10003DA4o
		db 'GetCurrentThreadId',0
		align 4
word_10004248	dw 2D6h			; DATA XREF: .rdata:10003DA0o
		db 'GetSystemTimeAsFileTime',0
word_10004262	dw 367h			; DATA XREF: .rdata:10003D9Co
		db 'IsDebuggerPresent',0
word_10004276	dw 36Dh			; DATA XREF: .rdata:10003DB8o
		db 'IsProcessorFeaturePresent',0
		align 1000h
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000424 (   1060.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002600
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10005000h
off_10005000	dd offset off_100032F0	; DATA XREF: .rdata:off_10003350o
		dd offset dword_10003128
		dd offset IUnknown_QueryInterface_Proxy
		dd offset IUnknown_AddRef_Proxy
		dd offset IUnknown_Release_Proxy
		dd 6 dup(0FFFFFFFFh), 0
off_10005030	dd offset off_100037A0	; DATA XREF: .rdata:off_10003820o
		dd offset dword_100033A4
		dd offset IUnknown_QueryInterface_Proxy
		dd offset IUnknown_AddRef_Proxy
		dd offset IUnknown_Release_Proxy
		dd 0Dh dup(0FFFFFFFFh),	0
		dd 0FFFFFFFFh
off_10005080	dd offset off_10003A38	; DATA XREF: .rdata:off_10003AA4o
		dd offset dword_10003870
		dd offset IUnknown_QueryInterface_Proxy
		dd offset IUnknown_AddRef_Proxy
		dd offset IUnknown_Release_Proxy
		dd 5 dup(0FFFFFFFFh)
; ProxyFileInfo	*pProxyFileList
pProxyFileList	dd offset off_10003368	; DATA XREF: DllGetClassObjectr
					; DllGetClassObject+1Ao ...
		dd offset off_10003838
		dd offset off_10003ABC
		align 10h
dword_100050C0	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
___security_cookie dd 0BB40E64Eh	; DATA XREF: __IsNonwritableInCurrentImage+1Cr
					; sub_1000271B+Er ...
dword_100050C8	dd 44BF19B1h		; DATA XREF: sub_1000271B+29w
					; sub_1000271B+90w ...
		align 10h
; CStdPSFactoryBuffer pPSF
pPSF		CStdPSFactoryBuffer <0>	; DATA XREF: sub_10002000o
					; DllCanUnloadNowo ...
; HMODULE hDll
hDll		dd 0			; DATA XREF: DllMain(x,x,x)+Cw
					; DllRegisterServer+1Ar ...
dword_100050E4	dd 0			; DATA XREF: sub_10002182+12r
					; sub_10002182+25w ...
dword_100050E8	dd 2 dup(0)		; DATA XREF: sub_10002804o
dword_100050F0	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_10003AF8o
dword_100050F4	dd 0			; DATA XREF: ___report_gsfailure+A9w
		dd 0
dword_100050FC	dd 0			; DATA XREF: ___report_gsfailure+9Aw
dword_10005100	dd 0			; DATA XREF: ___report_gsfailure+B3w
dword_10005104	dd 0			; DATA XREF: ___report_gsfailure+C3w
		align 40h
dword_10005140	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:10003AFCo
		dd 22h dup(0)
word_100051CC	dw 0			; DATA XREF: ___report_gsfailure+5Fw
		align 10h
word_100051D0	dw 0			; DATA XREF: ___report_gsfailure+58w
		align 4
word_100051D4	dw 0			; DATA XREF: ___report_gsfailure+51w
		align 4
word_100051D8	dw 0			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_100051DC	dd 0			; DATA XREF: ___report_gsfailure+36w
dword_100051E0	dd 0			; DATA XREF: ___report_gsfailure+30w
dword_100051E4	dd 0			; DATA XREF: ___report_gsfailure+2Aw
dword_100051E8	dd 0			; DATA XREF: ___report_gsfailure+24w
dword_100051EC	dd 0			; DATA XREF: ___report_gsfailure+1Ew
dword_100051F0	dd 0			; DATA XREF: ___report_gsfailure:loc_10002910w
dword_100051F4	dd 0			; DATA XREF: ___report_gsfailure+70w
dword_100051F8	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_100051FC	dw 0			; DATA XREF: ___report_gsfailure+43w
		align 10h
dword_10005200	dd ?			; DATA XREF: ___report_gsfailure+67w
dword_10005204	dd ?			; DATA XREF: ___report_gsfailure+80w
word_10005208	dw ?			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 80h dup(?)
dword_1000540C	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_10005410	dd ?			; DATA XREF: sub_10002182+20o
					; sub_10002182+112o ...
dword_10005414	dd ?			; DATA XREF: sub_10002182:loc_100021D5r
					; sub_10002182:loc_1000229Ew ...
; PVOID	dword_10005418
dword_10005418	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_10002182+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_10002182:loc_100021EBr ...
dword_10005420	dd ?			; DATA XREF: sub_10002182:loc_10002342r
					; sub_10002182+1C9o ...
		align 1000h
_data		ends


		end DllEntryPoint
