endp
_my_strupr	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_53']
mov ['eax,', 'dword', 'ptr', 'ds:__imp____ctype_ptr__']
mov ['edx,', '[eax]']
mov ['eax,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[eax]']
movsx ['eax,', 'al']
add ['eax,', '1']
add ['eax,', 'edx']
movzx ['eax,', 'byte', 'ptr', '[eax]']
movsx ['eax,', 'al']
and ['eax,', '3']
cmp ['eax,', '2']
jnz ['short', 'loc_4F']
mov ['eax,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[eax]']
movsx ['eax,', 'al']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['[esp],', 'eax']
call ['_toupper']
mov ['edx,', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['[eax],', 'dl']
add ['[ebp+var_C],', '1']
mov ['eax,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[eax]']
test ['al,', 'al']
jnz ['short', 'loc_E']
leave
retn
endp
_try_signed	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '168h']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_D],', '1']
mov ['[ebp+var_49],', '0']
mov ['[ebp+var_14],', 'offset', 'byte_BA8']
jmp ['short', 'loc_9D']
movsx ['eax,', '[ebp+var_D]']
add ['eax,', 'eax']
mov ['[ebp+var_D],', 'al']
add ['[ebp+var_C],', '1']
movzx ['eax,', '[ebp+var_D]']
cmp ['al,', '[ebp+var_49]']
jge ['short', 'loc_9D']
mov ['[ebp+var_14],', 'offset', 'byte_BAA']
cmp ['[ebp+var_D],', '0']
jnz ['short', 'loc_80']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+arg_4]']
jl ['loc_188']
mov ['eax,', '[ebp+arg_4]']
lea ['edx,', '[eax+7]']
test ['eax,', 'eax']
cmovs ['eax,', 'edx']
sar ['eax,', '3']
mov ['[esp+0Ch],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aSintD']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', 'offset', 'aSignedChar']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aTypedefSS']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_my_strupr']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_strlen']
shr ['eax,', '3']
mov ['edx,', '5']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_fputs']
jmp ['short', 'loc_15B']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
mov ['dword', 'ptr', '[esp],', '9']
call ['_fputc']
mov ['eax,', '[ebp+var_18]']
lea ['edx,', '[eax-1]']
mov ['[ebp+var_18],', 'edx']
test ['eax,', 'eax']
jg ['short', 'loc_148']
mov ['eax,', '[ebp+var_C]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a2dBits']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
nop
jmp ['locret_503']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_1E],', '1']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_24],', 'offset', 'byte_BA8']
jmp ['short', 'loc_1C3']
movsx ['eax,', '[ebp+var_1E]']
add ['eax,', 'eax']
mov ['[ebp+var_1E],', 'ax']
add ['[ebp+var_1C],', '1']
movzx ['eax,', '[ebp+var_1E]']
cmp ['ax,', '[ebp+var_4C]']
jge ['short', 'loc_1C3']
mov ['[ebp+var_24],', 'offset', 'byte_BAA']
cmp ['[ebp+var_1E],', '0']
jnz ['short', 'loc_1A4']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+arg_4]']
jl ['loc_2AF']
mov ['eax,', '[ebp+arg_4]']
lea ['edx,', '[eax+7]']
test ['eax,', 'eax']
cmovs ['eax,', 'edx']
sar ['eax,', '3']
mov ['[esp+0Ch],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aSintD']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', 'offset', 'aShort']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aTypedefSS']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_my_strupr']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_strlen']
shr ['eax,', '3']
mov ['edx,', '5']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_fputs']
jmp ['short', 'loc_282']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
mov ['dword', 'ptr', '[esp],', '9']
call ['_fputc']
mov ['eax,', '[ebp+var_28]']
lea ['edx,', '[eax-1]']
mov ['[ebp+var_28],', 'edx']
test ['eax,', 'eax']
jg ['short', 'loc_26F']
mov ['eax,', '[ebp+var_1C]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a2dBits']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
nop
jmp ['locret_503']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_30],', '1']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_34],', 'offset', 'byte_BA8']
jmp ['short', 'loc_2E3']
shl ['[ebp+var_30],', '1']
add ['[ebp+var_2C],', '1']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_50]']
jge ['short', 'loc_2E3']
mov ['[ebp+var_34],', 'offset', 'byte_BAA']
cmp ['[ebp+var_30],', '0']
jnz ['short', 'loc_2CD']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+arg_4]']
jl ['loc_3CE']
mov ['eax,', '[ebp+arg_4]']
lea ['edx,', '[eax+7]']
test ['eax,', 'eax']
cmovs ['eax,', 'edx']
sar ['eax,', '3']
mov ['[esp+0Ch],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aSintD']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', 'offset', 'aInt']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aTypedefSS']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_my_strupr']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_strlen']
shr ['eax,', '3']
mov ['edx,', '5']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_fputs']
jmp ['short', 'loc_3A1']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
mov ['dword', 'ptr', '[esp],', '9']
call ['_fputc']
mov ['eax,', '[ebp+var_38]']
lea ['edx,', '[eax-1]']
mov ['[ebp+var_38],', 'edx']
test ['eax,', 'eax']
jg ['short', 'loc_38E']
mov ['eax,', '[ebp+var_2C]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a2dBits']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
nop
jmp ['locret_503']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_40],', '1']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_44],', 'offset', 'byte_BA8']
jmp ['short', 'loc_402']
shl ['[ebp+var_40],', '1']
add ['[ebp+var_3C],', '1']
mov ['eax,', '[ebp+var_40]']
cmp ['eax,', '[ebp+var_54]']
jge ['short', 'loc_402']
mov ['[ebp+var_44],', 'offset', 'byte_BAA']
cmp ['[ebp+var_40],', '0']
jnz ['short', 'loc_3EC']
mov ['eax,', '[ebp+var_3C]']
cmp ['eax,', '[ebp+arg_4]']
jl ['loc_4E9']
mov ['eax,', '[ebp+arg_4]']
lea ['edx,', '[eax+7]']
test ['eax,', 'eax']
cmovs ['eax,', 'edx']
sar ['eax,', '3']
mov ['[esp+0Ch],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aSintD']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', 'offset', 'aLong']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aTypedefSS']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_my_strupr']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_strlen']
shr ['eax,', '3']
mov ['edx,', '5']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_fputs']
jmp ['short', 'loc_4C0']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
mov ['dword', 'ptr', '[esp],', '9']
call ['_fputc']
mov ['eax,', '[ebp+var_48]']
lea ['edx,', '[eax-1]']
mov ['[ebp+var_48],', 'edx']
test ['eax,', 'eax']
jg ['short', 'loc_4AD']
mov ['eax,', '[ebp+var_3C]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a2dBits']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
jmp ['short', 'locret_503']
mov ['eax,', '[ebp+arg_4]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aThereIsNoDBitT']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
leave
retn
endp
_try_unsigned	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '168h']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_D],', '1']
mov ['[ebp+var_49],', '0']
mov ['[ebp+var_14],', 'offset', 'byte_BA8']
jmp ['short', 'loc_53D']
shl ['[ebp+var_D],', '1']
add ['[ebp+var_C],', '1']
movzx ['eax,', '[ebp+var_D]']
cmp ['al,', '[ebp+var_49]']
jnb ['short', 'loc_53D']
mov ['[ebp+var_14],', 'offset', 'byte_BAA']
cmp ['[ebp+var_D],', '0']
jnz ['short', 'loc_526']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+arg_4]']
jl ['loc_628']
mov ['eax,', '[ebp+arg_4]']
lea ['edx,', '[eax+7]']
test ['eax,', 'eax']
cmovs ['eax,', 'edx']
sar ['eax,', '3']
mov ['[esp+0Ch],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aSintD']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', 'offset', 'aUnsignedChar']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aTypedefSS']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_my_strupr']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_strlen']
shr ['eax,', '3']
mov ['edx,', '5']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_fputs']
jmp ['short', 'loc_5FB']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
mov ['dword', 'ptr', '[esp],', '9']
call ['_fputc']
mov ['eax,', '[ebp+var_18]']
lea ['edx,', '[eax-1]']
mov ['[ebp+var_18],', 'edx']
test ['eax,', 'eax']
jg ['short', 'loc_5E8']
mov ['eax,', '[ebp+var_C]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a2dBits']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
nop
jmp ['locret_99D']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_1E],', '1']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_24],', 'offset', 'byte_BA8']
jmp ['short', 'loc_65D']
shl ['[ebp+var_1E],', '1']
add ['[ebp+var_1C],', '1']
movzx ['eax,', '[ebp+var_1E]']
cmp ['ax,', '[ebp+var_4C]']
jnb ['short', 'loc_65D']
mov ['[ebp+var_24],', 'offset', 'byte_BAA']
cmp ['[ebp+var_1E],', '0']
jnz ['short', 'loc_644']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+arg_4]']
jl ['loc_749']
mov ['eax,', '[ebp+arg_4]']
lea ['edx,', '[eax+7]']
test ['eax,', 'eax']
cmovs ['eax,', 'edx']
sar ['eax,', '3']
mov ['[esp+0Ch],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aSintD']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', 'offset', 'aUnsignedShort']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aTypedefSS']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_my_strupr']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_strlen']
shr ['eax,', '3']
mov ['edx,', '5']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_fputs']
jmp ['short', 'loc_71C']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
mov ['dword', 'ptr', '[esp],', '9']
call ['_fputc']
mov ['eax,', '[ebp+var_28]']
lea ['edx,', '[eax-1]']
mov ['[ebp+var_28],', 'edx']
test ['eax,', 'eax']
jg ['short', 'loc_709']
mov ['eax,', '[ebp+var_1C]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a2dBits']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
nop
jmp ['locret_99D']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_30],', '1']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_34],', 'offset', 'byte_BA8']
jmp ['short', 'loc_77D']
shl ['[ebp+var_30],', '1']
add ['[ebp+var_2C],', '1']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_50]']
jnb ['short', 'loc_77D']
mov ['[ebp+var_34],', 'offset', 'byte_BAA']
cmp ['[ebp+var_30],', '0']
jnz ['short', 'loc_767']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+arg_4]']
jl ['loc_868']
mov ['eax,', '[ebp+arg_4]']
lea ['edx,', '[eax+7]']
test ['eax,', 'eax']
cmovs ['eax,', 'edx']
sar ['eax,', '3']
mov ['[esp+0Ch],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aSintD']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', 'offset', 'aUnsignedInt']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aTypedefSS']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_my_strupr']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_strlen']
shr ['eax,', '3']
mov ['edx,', '5']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_fputs']
jmp ['short', 'loc_83B']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
mov ['dword', 'ptr', '[esp],', '9']
call ['_fputc']
mov ['eax,', '[ebp+var_38]']
lea ['edx,', '[eax-1]']
mov ['[ebp+var_38],', 'edx']
test ['eax,', 'eax']
jg ['short', 'loc_828']
mov ['eax,', '[ebp+var_2C]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a2dBits']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
nop
jmp ['locret_99D']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_40],', '1']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_44],', 'offset', 'byte_BA8']
jmp ['short', 'loc_89C']
shl ['[ebp+var_40],', '1']
add ['[ebp+var_3C],', '1']
mov ['eax,', '[ebp+var_40]']
cmp ['eax,', '[ebp+var_54]']
jnb ['short', 'loc_89C']
mov ['[ebp+var_44],', 'offset', 'byte_BAA']
cmp ['[ebp+var_40],', '0']
jnz ['short', 'loc_886']
mov ['eax,', '[ebp+var_3C]']
cmp ['eax,', '[ebp+arg_4]']
jl ['loc_983']
mov ['eax,', '[ebp+arg_4]']
lea ['edx,', '[eax+7]']
test ['eax,', 'eax']
cmovs ['eax,', 'edx']
sar ['eax,', '3']
mov ['[esp+0Ch],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aSintD']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', 'offset', 'aUnsignedLong']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aTypedefSS']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_sprintf']
lea ['eax,', '[ebp+var_154]']
mov ['[esp],', 'eax']
call ['_my_strupr']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_strlen']
shr ['eax,', '3']
mov ['edx,', '5']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
lea ['eax,', '[ebp+var_D4]']
mov ['[esp],', 'eax']
call ['_fputs']
jmp ['short', 'loc_95A']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+4],', 'eax']
mov ['dword', 'ptr', '[esp],', '9']
call ['_fputc']
mov ['eax,', '[ebp+var_48]']
lea ['edx,', '[eax-1]']
mov ['[ebp+var_48],', 'edx']
test ['eax,', 'eax']
jg ['short', 'loc_947']
mov ['eax,', '[ebp+var_3C]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a2dBits']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
jmp ['short', 'locret_99D']
mov ['eax,', '[ebp+arg_4]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aThereIsNoDBitT']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp],', 'eax']
call ['_fprintf']
leave
retn
endp
_print_pre	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', '1A9h']
mov ['dword', 'ptr', '[esp+4],', '1']
mov ['dword', 'ptr', '[esp],', 'offset', 'aGlobal_hRsaref']
call ['_fwrite']
mov ['eax,', '1']
leave
retn
endp
_print_post	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['[esp+0Ch],', 'eax']
mov ['dword', 'ptr', '[esp+8],', '117h']
mov ['dword', 'ptr', '[esp+4],', '1']
mov ['dword', 'ptr', '[esp],', 'offset', 'aProto_listIsDe']
call ['_fwrite']
mov ['eax,', '1']
leave
retn
endp
_main		proc near
push ['ebp']
mov ['ebp,', 'esp']
and ['esp,', '0FFFFFFF0h']
sub ['esp,', '20h']
call ['___main']
cmp ['[ebp+argc],', '1']
jg ['short', 'loc_A34']
mov ['dword', 'ptr', '[esp+14h],', 'offset', 'aBits_h']
mov ['dword', 'ptr', '[esp+10h],', 'offset', 'a__bits_h__']
call ['___getreent']
mov ['eax,', '[eax+8]']
mov ['[esp+1Ch],', 'eax']
jmp ['loc_AD5']
mov ['eax,', '[ebp+argv]']
mov ['eax,', '[eax+4]']
mov ['[esp+14h],', 'eax']
mov ['eax,', '[esp+14h]']
mov ['[esp],', 'eax']
call ['_strlen']
add ['eax,', '5']
mov ['[esp],', 'eax']
call ['_malloc']
mov ['[esp+10h],', 'eax']
mov ['eax,', '[esp+14h]']
mov ['[esp+8],', 'eax']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'a__S__']
mov ['eax,', '[esp+10h]']
mov ['[esp],', 'eax']
call ['_sprintf']
mov ['eax,', '[esp+10h]']
mov ['[esp+18h],', 'eax']
jmp ['short', 'loc_AAE']
mov ['eax,', 'dword', 'ptr', 'ds:__imp____ctype_ptr__']
mov ['edx,', '[eax]']
mov ['eax,', '[esp+18h]']
movzx ['eax,', 'byte', 'ptr', '[eax]']
movsx ['eax,', 'al']
add ['eax,', '1']
add ['eax,', 'edx']
movzx ['eax,', 'byte', 'ptr', '[eax]']
movsx ['eax,', 'al']
and ['eax,', '7']
test ['eax,', 'eax']
jnz ['short', 'loc_AA9']
mov ['eax,', '[esp+18h]']
mov ['byte', 'ptr', '[eax],', '5Fh']
add ['dword', 'ptr', '[esp+18h],', '1']
mov ['eax,', '[esp+18h]']
movzx ['eax,', 'byte', 'ptr', '[eax]']
test ['al,', 'al']
jnz ['short', 'loc_A7F']
mov ['eax,', '[ebp+argv]']
add ['eax,', '4']
mov ['eax,', '[eax]']
mov ['dword', 'ptr', '[esp+4],', 'offset', 'aW']
mov ['[esp],', 'eax']
call ['_fopen']
mov ['[esp+1Ch],', 'eax']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_print_pre']
mov ['dword', 'ptr', '[esp+4],', '8']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_try_signed']
mov ['dword', 'ptr', '[esp+4],', '10h']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_try_signed']
mov ['dword', 'ptr', '[esp+4],', '20h']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_try_signed']
mov ['dword', 'ptr', '[esp+4],', '40h']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_try_signed']
mov ['dword', 'ptr', '[esp+4],', '8']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_try_unsigned']
mov ['dword', 'ptr', '[esp+4],', '10h']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_try_unsigned']
mov ['dword', 'ptr', '[esp+4],', '20h']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_try_unsigned']
mov ['dword', 'ptr', '[esp+4],', '40h']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_try_unsigned']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_print_post']
mov ['eax,', '[esp+1Ch]']
mov ['[esp],', 'eax']
call ['_fclose']
mov ['eax,', '0']
leave
retn
assume ['cs:_rdata']
align ['10h']
align ['4']
db ["'", "*/',0Ah"]
db ["'#ifndef", "MD5GLOBAL_H',0Ah"]
db ["'#define", "MD5GLOBAL_H',0Ah"]
db ['0Ah']
db ["'/*", 'PROTOTYPES', 'should', 'be', 'set', 'to', 'one', 'if', 'and', 'only', 'if', 'the', 'compiler', "su'"]
db ["'pports',0Ah"]
db ["'", 'function', 'argument', "prototyping.',0Ah"]
db ["'The", 'following', 'makes', 'PROTOTYPES', 'default', 'to', '0', 'if', 'it', 'has', 'not', "already'"]
db ['0Ah']
db ["'", 'been', 'defined', 'with', 'C', 'compiler', "flags.',0Ah"]
db ["'", "*/',0Ah"]
db ["'#ifndef", "PROTOTYPES',0Ah"]
db ["'#define", 'PROTOTYPES', "0',0Ah"]
db ["'#endif',0Ah"]
db ['0Ah']
db ["'/*", 'POINTER', 'defines', 'a', 'generic', 'pointer', 'type', "*/',0Ah"]
db ["'typedef", 'unsigned', 'char', '*POINTER']
db ['0Ah,0']
align ['4']
db ["'/*", 'PROTO_LIST', 'is', 'defined', 'depending', 'on', 'how', 'PROTOTYPES', 'is', 'defined', "a'"]
db ["'bove.',0Ah"]
db ["'If", 'using', 'PROTOTYPES,', 'then', 'PROTO_LIST', 'returns', 'the', 'list,', 'otherwise', "'"]
db ["'it',0Ah"]
db ["'returns", 'an', 'empty', "list.',0Ah"]
db ["'*/',0Ah"]
db ["'#if", "PROTOTYPES',0Ah"]
db ["'#define", 'PROTO_LIST(list)', "list',0Ah"]
db ["'#else',0Ah"]
db ["'#define", 'PROTO_LIST(list)', "()',0Ah"]
db ["'#endif',0Ah"]
db ['0Ah']
db ["'#endif", '/*', 'MD5GLOBAL_H', "*/',0Ah"]
db ['0Ah,0']
align ['4']
assume ['cs:_rdata$zzz']
align ['4']
assume ['cs:_eh_frame']
dd ['14h,', '0']
dd ['527A01h,', '1087C01h,', '4040C1Bh,', '188h,', '2', 'dup(1Ch)']
dd ['offset', 'locret_B9F-1AFBh']
dd ['offset', '_try_signed']
dd ['80E4100h,', '0D420285h,', '0C55B0205h,', '4040Ch,', '1Ch,', '3Ch']
dd ['offset', 'locret_B9F-1ABCh']
dd ['offset', 'loc_4A6']
dd ['80E4100h,', '0D420285h,', '4A20305h,', '4040CC5h,', '1Ch,', '5Ch']
dd ['offset', 'locret_B9F-1636h']
dd ['offset', 'loc_499+1']
dd ['80E4100h,', '0D420285h,', '4960305h,', '4040CC5h,', '1Ch,', '7Ch']
dd ['offset', 'locret_B9F-11BCh']
dd ['offset', 'loc_2F+1']
dd ['80E4100h,', '0D420285h,', '0CC56C05h,', '404h,', '1Ch,', '9Ch']
dd ['offset', 'locret_B9F-11ACh']
dd ['offset', 'loc_2F+1']
dd ['80E4100h,', '0D420285h,', '0CC56C05h,', '404h,', '1Ch,', '0BCh']
dd ['offset', 'locret_B9F-119Ch']
dd ['offset', 'loc_19B+6']
dd ['80E4100h,', '0D420285h,', '19D0305h,', '4040CC5h']
extrn ['__imp____ctype_ptr__:near']
extrn ['___main:near']
extrn ['_toupper:near']
extrn ['_sprintf:near']
extrn ['_strlen:near']
extrn ['_fputs:near']
extrn ['_fputc:near']
extrn ['_fprintf:near']
extrn ['_fwrite:near']
extrn ['___getreent:near']
extrn ['_malloc:near']
extrn ['_fopen:near']
extrn ['_fclose:near']
end
