;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	CBBC6D3A1884C1DD85300201D3FB9CB9
; Input	CRC32 :	1248E6AD

; File Name   :	C:\compspace\compare\gpg\dlls\original\libexpat.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	64200000
; Section 1. (virtual address 00001000)
; Virtual size			: 0001A764 ( 108388.)
; Section size in file		: 0001A800 ( 108544.)
; Offset to raw	data for section: 00000600
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 64201000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; int pre_c_init()
_pre_c_init	proc near		; DATA XREF: .CRT:_pcinito

var_1C		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+var_1C], 80h ;	size_t
		call	_malloc
		mov	ebx, eax
		mov	[esp+1Ch+var_1C], eax ;	ptr
		call	__encode_pointer
		test	ebx, ebx
		mov	ds:___onexitbegin, eax
		mov	ds:___onexitend, eax
		mov	eax, 1
		jz	short loc_64201035
		mov	dword ptr [ebx], 0
		xor	al, al

loc_64201035:				; CODE XREF: _pre_c_init+2Bj
		add	esp, 18h
		pop	ebx
		retn
_pre_c_init	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; WINBOOL __stdcall _CRT_INIT(HANDLE hDllHandle, DWORD dwReason, LPVOID	lpreserved)
		public __CRT_INIT@12
__CRT_INIT@12	proc near		; CODE XREF: ___DllMainCRTStartup+DAp
					; ___DllMainCRTStartup+128p ...

dwMilliseconds	= dword	ptr -1Ch
ExChange	= dword	ptr -18h
Comperand	= dword	ptr -14h
hDllHandle	= dword	ptr  4
dwReason	= dword	ptr  8
lpreserved	= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	edx, [esp+1Ch+dwReason]
		test	edx, edx
		jnz	short loc_642010C6
dwReason_0 = edx			; DWORD
		mov	dwReason_0, ds:__bss_start__
		xor	eax, eax
		test	edx, edx
		jle	short loc_642010BE
		sub	edx, 1
		mov	ebx, ds:__imp__Sleep@4
		mov	ds:__bss_start__, edx
		jmp	short loc_6420107C
; ---------------------------------------------------------------------------
		align 10h

loc_64201070:				; CODE XREF: __CRT_INIT@12+5Dj
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	ebx ; __imp__Sleep@4
		sub	esp, 4

loc_6420107C:				; CODE XREF: __CRT_INIT@12+28j
		mov	[esp+1Ch+Comperand], 0 ; Comperand
		mov	[esp+1Ch+ExChange], 1 ;	ExChange
		mov	[esp+1Ch+dwMilliseconds], offset ___native_startup_lock	; Destination
		call	_InterlockedCompareExchange@12
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_64201070
		mov	eax, ds:___native_startup_state
		cmp	eax, 2
		jz	loc_64201170
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	__amsg_exit
		mov	eax, 1

loc_642010BE:				; CODE XREF: __CRT_INIT@12+17j
					; __CRT_INIT@12+8Ej
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_642010C6:				; CODE XREF: __CRT_INIT@12+Bj
dwReason_0 = edx			; DWORD
		cmp	dwReason_0, 1
		mov	eax, 1
		jnz	short loc_642010BE
		mov	eax, large fs:18h
		mov	esi, ds:__imp__Sleep@4
		mov	ebx, [eax+4]
fiberid	= ebx				; void *
		jmp	short loc_642010F5
; ---------------------------------------------------------------------------

loc_642010E1:				; CODE XREF: __CRT_INIT@12+D2j
		cmp	eax, fiberid
		jz	loc_64201238
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	esi ; __imp__Sleep@4
		sub	esp, 4

loc_642010F5:				; CODE XREF: __CRT_INIT@12+9Fj
		mov	[esp+1Ch+Comperand], 0 ; Comperand
		mov	[esp+1Ch+ExChange], fiberid ; ExChange
		mov	[esp+1Ch+dwMilliseconds], offset ___native_startup_lock	; Destination
		call	_InterlockedCompareExchange@12
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_642010E1
		xor	fiberid, fiberid

loc_64201116:				; CODE XREF: __CRT_INIT@12+1FDj
nested = ebx				; int
		mov	eax, ds:___native_startup_state
		test	eax, eax
		jz	loc_642011F7
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	__amsg_exit

loc_6420112F:				; CODE XREF: __CRT_INIT@12+1F3j
		test	nested,	nested
		jz	loc_64201242

loc_64201137:				; CODE XREF: __CRT_INIT@12+219j
		mov	eax, ds:___dyn_tls_init_callback
		test	eax, eax
		jz	short loc_6420115C
		mov	edx, [esp+1Ch+lpreserved]
		mov	[esp+1Ch+ExChange], 2 ;	dwReason
		mov	[esp+1Ch+Comperand], edx ; lpreserved
		mov	edx, [esp+1Ch+hDllHandle]
		mov	[esp+1Ch+dwMilliseconds], edx ;	hDllHandle
		call	eax ; ___dyn_tls_init@12
		sub	esp, 0Ch

loc_6420115C:				; CODE XREF: __CRT_INIT@12+FEj
		add	ds:__bss_start__, 1
		mov	eax, 1
		add	esp, 14h
		pop	nested
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_64201170:				; CODE XREF: __CRT_INIT@12+67j
		mov	eax, ds:___onexitbegin
		mov	[esp+1Ch+dwMilliseconds], eax ;	codedptr
		call	__decode_pointer
		test	eax, eax
onexitbegin = eax			; _PVFV	*
		mov	ebx, onexitbegin
		jz	short loc_642011C9
		mov	eax, ds:___onexitend
		mov	[esp+1Ch+dwMilliseconds], eax ;	codedptr
		call	__decode_pointer
		mov	esi, eax

loc_64201192:				; CODE XREF: __CRT_INIT@12+15Dj
onexitend = esi				; _PVFV	*
		sub	onexitend, 4
		cmp	ebx, onexitend
		ja	short loc_642011A8

loc_64201199:				; CODE XREF: __CRT_INIT@12+166j
		mov	eax, [onexitend]
		test	eax, eax
		jz	short loc_64201192
		sub	onexitend, 4
		call	eax
		cmp	ebx, onexitend
		jbe	short loc_64201199

loc_642011A8:				; CODE XREF: __CRT_INIT@12+157j
		mov	[esp+1Ch+dwMilliseconds], ebx ;	void *
		nop
		lea	onexitend, [onexitend+0]
		call	_free
		mov	ds:___onexitend, 0
		mov	ds:___onexitbegin, 0

loc_642011C9:				; CODE XREF: __CRT_INIT@12+141j
		mov	ds:___native_startup_state, 0
		mov	[esp+1Ch+ExChange], 0 ;	Value
		mov	[esp+1Ch+dwMilliseconds], offset ___native_startup_lock	; Target
		call	_InterlockedExchange@8
		mov	eax, 1
		sub	esp, 8
		add	esp, 14h
		pop	ebx
		pop	onexitend
		retn	0Ch
; ---------------------------------------------------------------------------

loc_642011F7:				; CODE XREF: __CRT_INIT@12+DDj
nested = ebx				; int
		mov	ds:___native_startup_state, 1
		mov	[esp+1Ch+ExChange], offset ___xi_z
		mov	[esp+1Ch+dwMilliseconds], offset ___crt_xc_end__
		call	__initterm
		mov	[esp+1Ch+ExChange], offset ___xc_z
		mov	[esp+1Ch+dwMilliseconds], offset ___crt_xc_start__
		call	__initterm
		mov	ds:___native_startup_state, 2
		jmp	loc_6420112F
; ---------------------------------------------------------------------------

loc_64201238:				; CODE XREF: __CRT_INIT@12+A3j
fiberid	= ebx				; void *
		mov	fiberid, 1
nested = ebx				; int
		jmp	loc_64201116
; ---------------------------------------------------------------------------

loc_64201242:				; CODE XREF: __CRT_INIT@12+F1j
		mov	[esp+1Ch+ExChange], 0 ;	Value
		mov	[esp+1Ch+dwMilliseconds], offset ___native_startup_lock	; Target
		call	_InterlockedExchange@8
		sub	esp, 8
		jmp	loc_64201137
__CRT_INIT@12	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; WINBOOL __usercall __DllMainCRTStartup@<eax>(HANDLE hDllHandle@<eax>,	DWORD dwReason@<edx>, LPVOID lpreserved@<ecx>)
___DllMainCRTStartup proc near		; CODE XREF: _DllMainCRTStartup@12+1Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

hDllHandle = eax			; HANDLE
dwReason = edx				; DWORD
lpreserved = ecx			; LPVOID
		sub	esp, 2Ch
		test	dwReason, dwReason
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, hDllHandle
		mov	[esp+2Ch+var_C], esi
		mov	esi, dwReason
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, lpreserved
		mov	[esp+2Ch+var_8], edi
		mov	___native_dllmain_reason, dwReason
		jnz	short loc_642012E0
hDllHandle = ebx			; HANDLE
lpreserved = ebp			; LPVOID
		mov	eax, ds:__bss_start__
		test	eax, eax
		jz	i__leave
		call	__pei386_runtime_relocator

loc_64201295:				; CODE XREF: ___DllMainCRTStartup+90j
dwReason = esi				; DWORD	; lpreserved
retcode	= edi				; WINBOOL
		mov	[esp+2Ch+var_24], lpreserved
		mov	[esp+2Ch+var_28], dwReason ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	_DllMain@12
		sub	esp, 0Ch
		cmp	dwReason, 3
		mov	retcode, eax
		jz	loc_642013A0
		test	dwReason, dwReason
		jz	loc_642013A0

loc_642012BB:				; CODE XREF: ___DllMainCRTStartup+B2j
					; ___DllMainCRTStartup+F9j ...
		mov	eax, retcode
		mov	hDllHandle, [esp+2Ch+var_10]
		mov	___native_dllmain_reason, 0FFFFFFFFh
		mov	dwReason, [esp+2Ch+var_C]
dwReason = edx				; DWORD
		mov	retcode, [esp+2Ch+var_8]
		mov	lpreserved, [esp+2Ch+var_4]
lpreserved = ecx			; LPVOID
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
hDllHandle = ebx			; HANDLE
lpreserved = ebp			; LPVOID
		align 10h

loc_642012E0:				; CODE XREF: ___DllMainCRTStartup+21j
		lea	eax, [dwReason-1]
		cmp	eax, 1
		jbe	short loc_64201360

loc_642012E8:				; CODE XREF: ___DllMainCRTStartup+134j
dwReason = esi				; DWORD
retcode	= edi				; WINBOOL
		call	__pei386_runtime_relocator
		cmp	dwReason, 1
		jnz	short loc_64201295
		call	___main
		mov	[esp+2Ch+var_24], lpreserved ; lpreserved
		mov	[esp+2Ch+var_28], 1 ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	_DllMain@12
		sub	esp, 0Ch
		test	eax, eax
		mov	retcode, eax
		jnz	short loc_642012BB
		mov	[esp+2Ch+var_24], lpreserved ; lpreserved
		mov	[esp+2Ch+var_28], 0 ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	_DllMain@12
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], lpreserved ; lpreserved
		mov	[esp+2Ch+var_28], 0 ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	__CRT_INIT@12
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], lpreserved ; lpreserved
		mov	[esp+2Ch+var_28], 0 ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	_DllEntryPoint@12
		sub	esp, 0Ch
		jmp	loc_642012BB
; ---------------------------------------------------------------------------
dwReason = edx				; DWORD
		align 10h

loc_64201360:				; CODE XREF: ___DllMainCRTStartup+86j
		mov	[esp+2Ch+var_24], ecx ;	lpreserved
		mov	[esp+2Ch+var_28], dwReason ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	_DllEntryPoint@12
dwReason = esi				; DWORD
		sub	esp, 0Ch
		test	eax, eax
retcode	= eax				; WINBOOL
		mov	edi, retcode
		jz	loc_642012BB
		mov	[esp+2Ch+var_24], lpreserved ; lpreserved
		mov	[esp+2Ch+var_28], dwReason ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	__CRT_INIT@12
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	loc_642012E8
		jmp	loc_642012BB
; ---------------------------------------------------------------------------
		align 10h

loc_642013A0:				; CODE XREF: ___DllMainCRTStartup+4Dj
					; ___DllMainCRTStartup+55j
		mov	[esp+2Ch+var_24], lpreserved ; lpreserved
		mov	[esp+2Ch+var_28], dwReason ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	__CRT_INIT@12
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_642013C0

i__leave:				; CODE XREF: ___DllMainCRTStartup+2Aj
		xor	edi, edi
		jmp	loc_642012BB
; ---------------------------------------------------------------------------
		align 10h

loc_642013C0:				; CODE XREF: ___DllMainCRTStartup+155j
		test	edi, edi
		jz	loc_642012BB
		mov	[esp+2Ch+var_24], lpreserved ; lpreserved
		mov	[esp+2Ch+var_28], dwReason ; dwReason
		mov	[esp+2Ch+var_2C], hDllHandle ; hDllHandle
		call	_DllEntryPoint@12
		sub	esp, 0Ch
		mov	edi, eax
		jmp	loc_642012BB
___DllMainCRTStartup endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMainCRTStartup(HINSTANCE hinstDLL, DWORD fdwReason,	LPVOID lpReserved)
		public _DllMainCRTStartup@12
_DllMainCRTStartup@12 proc near

var_10		= dword	ptr -10h
hDllHandle	= dword	ptr  4
dwReason	= dword	ptr  8
lpreserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+dwReason]	; dwReason
		mov	ds:_mingw_app_type, 0
		cmp	edx, 1
		jz	short loc_64201420

loc_64201406:				; CODE XREF: _DllMainCRTStartup@12+3Dj
		mov	ecx, [esp+1Ch+lpreserved] ; lpreserved
		mov	eax, [esp+1Ch+hDllHandle] ; hDllHandle
		call	___DllMainCRTStartup
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
dwReason_0 = edx			; DWORD
		align 10h

loc_64201420:				; CODE XREF: _DllMainCRTStartup@12+14j
		mov	[esp+1Ch+var_10], dwReason_0
		call	___security_init_cookie
		mov	edx, [esp+1Ch+var_10]
		jmp	short loc_64201406
_DllMainCRTStartup@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ___gcc_register_frame
___gcc_register_frame proc near		; CODE XREF: _register_frame_ctor+6p
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___JCR_END__
		test	eax, eax
		jz	short locret_6420147B
		mov	dword ptr [esp], offset	ModuleName ; "libgcj_s.dll"
		call	ds:__imp__GetModuleHandleA@4
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_6420146E
		mov	dword ptr [esp+4], offset ProcName ; "_Jv_RegisterClasses"
		mov	[esp], edx	; hModule
		call	ds:__imp__GetProcAddress@8
		sub	esp, 8

loc_6420146E:				; CODE XREF: ___gcc_register_frame+28j
		test	eax, eax
		jz	short locret_6420147B
		mov	dword ptr [esp], offset	___JCR_END__
		call	eax

locret_6420147B:			; CODE XREF: ___gcc_register_frame+Dj
					; ___gcc_register_frame+40j
		leave
		retn
___gcc_register_frame endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __gcc_deregister_frame(void)
		public ___gcc_deregister_frame
___gcc_deregister_frame	proc near	; DATA XREF: _register_frame_ctor+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
___gcc_deregister_frame	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  54. XML_UseParserAsHandlerArg

; =============== S U B	R O U T	I N E =======================================


		public _XML_UseParserAsHandlerArg
_XML_UseParserAsHandlerArg proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[eax+4], eax
		retn
_XML_UseParserAsHandlerArg endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  58. XML_UseForeignDTD

; =============== S U B	R O U T	I N E =======================================


		public _XML_UseForeignDTD
_XML_UseForeignDTD proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	edx, [eax+1E0h]
		cmp	edx, 3
		jz	short loc_642014C1
		cmp	edx, 1
		jz	short loc_642014C1
		mov	[eax+1E9h], cl
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_642014C1:				; CODE XREF: _XML_UseForeignDTD+11j
					; _XML_UseForeignDTD+16j
		mov	eax, 1Ah
		retn
_XML_UseForeignDTD endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. XML_SetReturnNSTriplet

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetReturnNSTriplet
_XML_SetReturnNSTriplet	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [eax+1E0h]
		cmp	edx, 3
		jz	short locret_642014F1
		cmp	edx, 1
		jz	short locret_642014F1
		mov	edx, [esp+arg_4]
		test	edx, edx
		setnz	byte ptr [eax+0EDh]

locret_642014F1:			; CODE XREF: _XML_SetReturnNSTriplet+Dj
					; _XML_SetReturnNSTriplet+12j
		rep retn
_XML_SetReturnNSTriplet	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  52. XML_SetUserData

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetUserData
_XML_SetUserData proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	ecx, [eax+4]
		cmp	ecx, [eax]
		jz	short loc_64201512
		mov	[eax], edx
		retn
; ---------------------------------------------------------------------------

loc_64201512:				; CODE XREF: _XML_SetUserData+Dj
		mov	[eax], edx
		mov	[eax+4], edx
		retn
_XML_SetUserData endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. XML_GetBase

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetBase
_XML_GetBase	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+168h]
		retn
_XML_GetBase	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. XML_GetSpecifiedAttributeCount

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetSpecifiedAttributeCount
_XML_GetSpecifiedAttributeCount	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+180h]
		retn
_XML_GetSpecifiedAttributeCount	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. XML_GetIdAttributeIndex

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetIdAttributeIndex
_XML_GetIdAttributeIndex proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+184h]
		retn
_XML_GetIdAttributeIndex endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. XML_SetElementHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetElementHandler
_XML_SetElementHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax+34h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+38h], edx
		retn
_XML_SetElementHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  48. XML_SetStartElementHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetStartElementHandler
_XML_SetStartElementHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+34h], edx
		retn
_XML_SetStartElementHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. XML_SetEndElementHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetEndElementHandler
_XML_SetEndElementHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+38h], edx
		retn
_XML_SetEndElementHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. XML_SetCharacterDataHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetCharacterDataHandler
_XML_SetCharacterDataHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+3Ch], edx
		retn
_XML_SetCharacterDataHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  44. XML_SetProcessingInstructionHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetProcessingInstructionHandler
_XML_SetProcessingInstructionHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+40h], edx
		retn
_XML_SetProcessingInstructionHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. XML_SetCommentHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetCommentHandler
_XML_SetCommentHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+44h], edx
		retn
_XML_SetCommentHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. XML_SetCdataSectionHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetCdataSectionHandler
_XML_SetCdataSectionHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+48h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+4Ch], edx
		retn
_XML_SetCdataSectionHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  46. XML_SetStartCdataSectionHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetStartCdataSectionHandler
_XML_SetStartCdataSectionHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+48h], edx
		retn
_XML_SetStartCdataSectionHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. XML_SetEndCdataSectionHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetEndCdataSectionHandler
_XML_SetEndCdataSectionHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+4Ch], edx
		retn
_XML_SetEndCdataSectionHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. XML_SetDefaultHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetDefaultHandler
_XML_SetDefaultHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	byte ptr [eax+134h], 0
		mov	[eax+50h], edx
		retn
_XML_SetDefaultHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  28. XML_SetDefaultHandlerExpand

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetDefaultHandlerExpand
_XML_SetDefaultHandlerExpand proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	byte ptr [eax+134h], 1
		mov	[eax+50h], edx
		retn
_XML_SetDefaultHandlerExpand endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. XML_SetDoctypeDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetDoctypeDeclHandler
_XML_SetDoctypeDeclHandler proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax+54h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+58h], edx
		retn
_XML_SetDoctypeDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  47. XML_SetStartDoctypeDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetStartDoctypeDeclHandler
_XML_SetStartDoctypeDeclHandler	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+54h], edx
		retn
_XML_SetStartDoctypeDeclHandler	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. XML_SetEndDoctypeDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetEndDoctypeDeclHandler
_XML_SetEndDoctypeDeclHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+58h], edx
		retn
_XML_SetEndDoctypeDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  51. XML_SetUnparsedEntityDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetUnparsedEntityDeclHandler
_XML_SetUnparsedEntityDeclHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+5Ch], edx
		retn
_XML_SetUnparsedEntityDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  42. XML_SetNotationDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetNotationDeclHandler
_XML_SetNotationDeclHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+60h], edx
		retn
_XML_SetNotationDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  40. XML_SetNamespaceDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetNamespaceDeclHandler
_XML_SetNamespaceDeclHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax+64h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+68h], edx
		retn
_XML_SetNamespaceDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  49. XML_SetStartNamespaceDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetStartNamespaceDeclHandler
_XML_SetStartNamespaceDeclHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+64h], edx
		retn
_XML_SetStartNamespaceDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. XML_SetEndNamespaceDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetEndNamespaceDeclHandler
_XML_SetEndNamespaceDeclHandler	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+68h], edx
		retn
_XML_SetEndNamespaceDeclHandler	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  41. XML_SetNotStandaloneHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetNotStandaloneHandler
_XML_SetNotStandaloneHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+6Ch], edx
		retn
_XML_SetNotStandaloneHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. XML_SetExternalEntityRefHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetExternalEntityRefHandler
_XML_SetExternalEntityRefHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+70h], edx
		retn
_XML_SetExternalEntityRefHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  39. XML_SetExternalEntityRefHandlerArg

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetExternalEntityRefHandlerArg
_XML_SetExternalEntityRefHandlerArg proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		test	eax, eax
		jz	short loc_64201710
		mov	[edx+74h], eax
		retn
; ---------------------------------------------------------------------------

loc_64201710:				; CODE XREF: _XML_SetExternalEntityRefHandlerArg+Aj
		mov	[edx+74h], edx
		retn
_XML_SetExternalEntityRefHandlerArg endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  56. XML_SetSkippedEntityHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetSkippedEntityHandler
_XML_SetSkippedEntityHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+78h], edx
		retn
_XML_SetSkippedEntityHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  50. XML_SetUnknownEncodingHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetUnknownEncodingHandler
_XML_SetUnknownEncodingHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax+7Ch], edx
		mov	edx, [esp+arg_8]
		mov	[eax+0F8h], edx
		retn
_XML_SetUnknownEncodingHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. XML_SetElementDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetElementDeclHandler
_XML_SetElementDeclHandler proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+80h], edx
		retn
_XML_SetElementDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. XML_SetAttlistDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetAttlistDeclHandler
_XML_SetAttlistDeclHandler proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+84h], edx
		retn
_XML_SetAttlistDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. XML_SetEntityDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetEntityDeclHandler
_XML_SetEntityDeclHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+88h], edx
		retn
_XML_SetEntityDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  53. XML_SetXmlDeclHandler

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetXmlDeclHandler
_XML_SetXmlDeclHandler proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+8Ch], edx
		retn
_XML_SetXmlDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  43. XML_SetParamEntityParsing

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetParamEntityParsing
_XML_SetParamEntityParsing proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [eax+1E0h]
		cmp	edx, 3
		jz	short loc_642017B4
		cmp	edx, 1
		jz	short loc_642017B4
		mov	edx, [esp+arg_4]
		mov	[eax+1ECh], edx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_642017B4:				; CODE XREF: _XML_SetParamEntityParsing+Dj
					; _XML_SetParamEntityParsing+12j
		xor	eax, eax
		retn
_XML_SetParamEntityParsing endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetHashSalt
_XML_SetHashSalt proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [eax+1E0h]
		cmp	edx, 3
		jz	short loc_642017E4
		cmp	edx, 1
		jz	short loc_642017E4
		mov	edx, [esp+arg_4]
		mov	[eax+1F0h], edx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_642017E4:				; CODE XREF: _XML_SetHashSalt+Dj
					; _XML_SetHashSalt+12j
		xor	eax, eax
		retn
_XML_SetHashSalt endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  63. XML_StopParser

; =============== S U B	R O U T	I N E =======================================


		public _XML_StopParser
_XML_StopParser	proc near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		mov	eax, [esp+arg_0]
		movzx	ecx, [esp+arg_4]
		mov	edx, [eax+1E0h]
		cmp	edx, 2
		jz	short loc_64201834
		cmp	edx, 3
		jz	short loc_64201823
		test	cl, cl
		jz	short loc_64201851
		cmp	byte ptr [eax+1E8h], 0
		jz	short loc_64201861
		mov	dword ptr [eax+11Ch], 25h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_64201823:				; CODE XREF: _XML_StopParser+17j
		test	cl, cl
		jz	short loc_64201841
		mov	dword ptr [eax+11Ch], 21h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_64201834:				; CODE XREF: _XML_StopParser+12j
		mov	dword ptr [eax+11Ch], 24h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_64201841:				; CODE XREF: _XML_StopParser+35j
		mov	dword ptr [eax+1E0h], 2
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_64201851:				; CODE XREF: _XML_StopParser+1Bj
		mov	dword ptr [eax+1E0h], 2
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_64201861:				; CODE XREF: _XML_StopParser+24j
		mov	dword ptr [eax+1E0h], 3
		mov	eax, 1
		retn
_XML_StopParser	endp

; ---------------------------------------------------------------------------
		jmp	short _XML_ResumeParser
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  64. XML_ResumeParser

; =============== S U B	R O U T	I N E =======================================


		public _XML_ResumeParser
_XML_ResumeParser proc near		; CODE XREF: .text:64201871j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		cmp	dword ptr [ebx+1E0h], 3
		jz	short loc_642018A2
		mov	dword ptr [ebx+11Ch], 22h
		xor	eax, eax

loc_6420189D:				; CODE XREF: _XML_ResumeParser+C8j
					; _XML_ResumeParser+EFj
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_642018A2:				; CODE XREF: _XML_ResumeParser+Fj
		lea	eax, [ebx+18h]
		mov	dword ptr [ebx+1E0h], 1
		mov	[esp+2Ch+var_20], eax
		mov	eax, [ebx+28h]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+18h]
		mov	[esp+2Ch+var_2C], ebx
		mov	[esp+2Ch+var_28], eax
		call	dword ptr [ebx+118h]
		test	eax, eax
		mov	[ebx+11Ch], eax
		jnz	short loc_64201930
		mov	edx, [ebx+1E0h]
		cmp	edx, 1
		ja	short loc_64201950
		cmp	byte ptr [ebx+1E4h], 0
		jnz	short loc_64201960

loc_642018E8:				; CODE XREF: _XML_ResumeParser+D8j
		mov	eax, 1

loc_642018ED:				; CODE XREF: _XML_ResumeParser+DAj
		lea	ecx, [ebx+198h]
		mov	edx, [ebx+90h]
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, [ebx+18h]
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_24], ecx
		mov	ecx, [ebx+128h]
		mov	[esp+2Ch+var_2C], edx
		mov	[esp+2Ch+var_28], ecx
		call	dword ptr [edx+34h]
		mov	edx, [ebx+18h]
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+128h], edx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64201930:				; CODE XREF: _XML_ResumeParser+52j
		mov	eax, [ebx+120h]
		mov	dword ptr [ebx+118h], offset _errorProcessor
		mov	[ebx+124h], eax
		xor	eax, eax
		jmp	loc_6420189D
; ---------------------------------------------------------------------------
		align 10h

loc_64201950:				; CODE XREF: _XML_ResumeParser+5Dj
		cmp	edx, 3
		mov	eax, 2
		jnz	short loc_642018E8
		jmp	short loc_642018ED
; ---------------------------------------------------------------------------
		align 10h

loc_64201960:				; CODE XREF: _XML_ResumeParser+66j
		mov	dword ptr [ebx+1E0h], 2
		mov	eax, 1
		jmp	loc_6420189D
_XML_ResumeParser endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  65. XML_GetParsingStatus

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetParsingStatus
_XML_GetParsingStatus proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [eax+1E0h]
		mov	ecx, [eax+1E4h]
		mov	eax, [esp+arg_4]
		mov	[eax], edx
		mov	[eax+4], ecx
		retn
_XML_GetParsingStatus endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. XML_GetErrorCode

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetErrorCode
_XML_GetErrorCode proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+11Ch]
		retn
_XML_GetErrorCode endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. XML_GetCurrentByteIndex

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetCurrentByteIndex
_XML_GetCurrentByteIndex proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 0FFFFFFFFh
		mov	ecx, [edx+120h]
		test	ecx, ecx
		jz	short locret_642019CB
		mov	eax, [edx+24h]
		add	eax, ecx
		sub	eax, [edx+28h]

locret_642019CB:			; CODE XREF: _XML_GetCurrentByteIndex+11j
		rep retn
_XML_GetCurrentByteIndex endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. XML_GetCurrentByteCount

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetCurrentByteCount
_XML_GetCurrentByteCount proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+124h]
		test	eax, eax
		jz	short loc_642019F0
		mov	edx, [edx+120h]
		test	edx, edx
		jz	short loc_642019F0
		sub	eax, edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642019F0:				; CODE XREF: _XML_GetCurrentByteCount+Cj
					; _XML_GetCurrentByteCount+16j
		xor	eax, eax
		retn
_XML_GetCurrentByteCount endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. XML_GetInputContext

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetInputContext
_XML_GetInputContext proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	edx, [esp+4+arg_0]
		mov	ecx, [edx+120h]
		test	ecx, ecx
		jnz	short loc_64201A13

loc_64201A0F:				; CODE XREF: _XML_GetInputContext+18j
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_64201A13:				; CODE XREF: _XML_GetInputContext+Dj
		mov	eax, [edx+8]
		test	eax, eax
		jz	short loc_64201A0F
		mov	ebx, [esp+4+arg_4]
		sub	ecx, eax
		mov	edx, [edx+1Ch]
		mov	[ebx], ecx
		mov	ecx, [esp+4+arg_8]
		sub	edx, eax
		mov	[ecx], edx
		pop	ebx
		retn
_XML_GetInputContext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. XML_GetCurrentLineNumber

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetCurrentLineNumber
_XML_GetCurrentLineNumber proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	eax, [ebx+120h]
		test	eax, eax
		jz	short loc_64201A7D
		mov	edx, [ebx+128h]
		cmp	eax, edx
		jb	short loc_64201A7D
		mov	ecx, [ebx+90h]
		lea	esi, [ebx+198h]
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_10], esi
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], ecx
		call	dword ptr [ecx+34h]
		mov	eax, [ebx+120h]
		mov	[ebx+128h], eax

loc_64201A7D:				; CODE XREF: _XML_GetCurrentLineNumber+17j
					; _XML_GetCurrentLineNumber+21j
		mov	eax, [ebx+198h]
		mov	esi, [esp+1Ch+var_4]
		mov	ebx, [esp+1Ch+var_8]
		add	esp, 1Ch
		add	eax, 1
		retn
_XML_GetCurrentLineNumber endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. XML_GetCurrentColumnNumber

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetCurrentColumnNumber
_XML_GetCurrentColumnNumber proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	eax, [ebx+120h]
		test	eax, eax
		jz	short loc_64201AED
		mov	edx, [ebx+128h]
		cmp	eax, edx
		jb	short loc_64201AED
		mov	ecx, [ebx+90h]
		lea	esi, [ebx+198h]
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_10], esi
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], ecx
		call	dword ptr [ecx+34h]
		mov	eax, [ebx+120h]
		mov	[ebx+128h], eax

loc_64201AED:				; CODE XREF: _XML_GetCurrentColumnNumber+17j
					; _XML_GetCurrentColumnNumber+21j
		mov	eax, [ebx+19Ch]
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
_XML_GetCurrentColumnNumber endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  59. XML_FreeContentModel

; =============== S U B	R O U T	I N E =======================================


		public _XML_FreeContentModel
_XML_FreeContentModel proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	edx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+arg_0], edx
		mov	eax, [eax+14h]
		add	esp, 0Ch
		jmp	eax
_XML_FreeContentModel endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  60. XML_MemMalloc

; =============== S U B	R O U T	I N E =======================================


		public _XML_MemMalloc
_XML_MemMalloc	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	edx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+arg_0], edx
		mov	eax, [eax+0Ch]
		add	esp, 0Ch
		jmp	eax
_XML_MemMalloc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  61. XML_MemRealloc

; =============== S U B	R O U T	I N E =======================================


		public _XML_MemRealloc
_XML_MemRealloc	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	edx, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		mov	[esp+0Ch+arg_0], edx
		mov	[esp+0Ch+arg_4], ecx
		mov	eax, [eax+10h]
		add	esp, 0Ch
		jmp	eax
_XML_MemRealloc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  62. XML_MemFree

; =============== S U B	R O U T	I N E =======================================


		public _XML_MemFree
_XML_MemFree	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	edx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+arg_0], edx
		mov	eax, [eax+14h]
		add	esp, 0Ch
		jmp	eax
_XML_MemFree	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. XML_ErrorString

; =============== S U B	R O U T	I N E =======================================


		public _XML_ErrorString
_XML_ErrorString proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	eax, eax
		lea	ecx, [edx-1]
		cmp	ecx, 27h
		ja	short locret_64201B95
		mov	eax, ds:_message_4561[edx*4]

locret_64201B95:			; CODE XREF: _XML_ErrorString+Cj
		rep retn
_XML_ErrorString endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. XML_ExpatVersion

; =============== S U B	R O U T	I N E =======================================


		public _XML_ExpatVersion
_XML_ExpatVersion proc near
		mov	eax, offset aExpat_2_1_0 ; "expat_2.1.0"
		retn
_XML_ExpatVersion endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. XML_ExpatVersionInfo

; =============== S U B	R O U T	I N E =======================================


		public _XML_ExpatVersionInfo
_XML_ExpatVersionInfo proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 1
		mov	dword ptr [eax], 2
		retn	4
_XML_ExpatVersionInfo endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  57. XML_GetFeatureList

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetFeatureList
_XML_GetFeatureList proc near
		mov	eax, offset _features_4579
		retn
_XML_GetFeatureList endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_errorProcessor	proc near		; DATA XREF: _XML_ResumeParser+B6o
					; _XML_ParseBuffer+186o ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+11Ch]
		retn
_errorProcessor	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_reportDefault	proc near		; CODE XREF: _doCdataSection+211p
					; _doCdataSection+236p	...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		mov	[esp+5Ch+var_30], ecx
		mov	edi, [esp+5Ch+arg_0]
		cmp	byte ptr [edx+48h], 0
		jnz	loc_64201C97
		cmp	[eax+90h], edx
		jz	loc_64201CB2
		mov	ebp, [eax+12Ch]
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_34], eax
		lea	edx, [ebp+4]
		mov	[esp+5Ch+var_3C], edx
		lea	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_38], edx

loc_64201C36:				; CODE XREF: _reportDefault+9Dj
					; _reportDefault+E2j
		mov	eax, [ebx+2Ch]
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_20], eax
		mov	eax, [ebx+30h]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_50], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+5Ch+var_30]
		mov	edx, [esp+5Ch+var_3C]
		mov	[edx], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], edx
		sub	eax, edx
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+5Ch+var_30]
		mov	[ebp+0], eax
		cmp	[esp+5Ch+var_30], edi
		jnz	short loc_64201C36
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64201C97:				; CODE XREF: _reportDefault+17j
		sub	edi, ecx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ecx
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ebx+50h]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64201CB2:				; CODE XREF: _reportDefault+23j
		lea	ebp, [eax+120h]
		lea	eax, [eax+124h]
		mov	[esp+5Ch+var_3C], eax
		lea	edx, [esp+5Ch+var_20]
		lea	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+var_38], eax
		jmp	loc_64201C36
_reportDefault	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doCdataSection	proc near		; CODE XREF: _doContent+970p
					; _cdataSectionProcessor+36p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		movzx	eax, [esp+5Ch+arg_8]
		cmp	[ebx+90h], edx
		mov	[esp+5Ch+var_38], ecx
		mov	[esp+5Ch+var_31], al
		mov	eax, [ecx]
		mov	[esp+5Ch+var_20], eax
		jz	loc_64201EC0
		mov	edi, [ebx+12Ch]
		lea	ebp, [edi+4]

loc_64201D13:				; CODE XREF: _doCdataSection+1F2j
		mov	edx, [esp+5Ch+var_38]
		mov	[edi], eax
		mov	dword ptr [edx], 0

loc_64201D1F:				; CODE XREF: _doCdataSection+198j
		lea	eax, [esp+5Ch+var_24]
		mov	edx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_50], eax
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], eax
		call	dword ptr [esi+8]
		mov	edx, [esp+5Ch+var_24]
		mov	[ebp+0], edx
		add	eax, 4
		cmp	eax, 2Ch	; switch 45 cases
		jbe	short loc_64201D60

loc_64201D4C:				; CODE XREF: _doCdataSection:loc_64201D60j
					; DATA XREF: .rdata:off_6421D04Co
		mov	eax, [esp+5Ch+var_24] ;	jumptable 64201D60 default case
		mov	[edi], eax
		mov	eax, 17h

loc_64201D57:				; CODE XREF: _doCdataSection+B3j
					; _doCdataSection+CCj ...
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64201D60:				; CODE XREF: _doCdataSection+6Aj
		jmp	ds:off_6421D04C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64201D67:				; CODE XREF: _doCdataSection:loc_64201D60j
					; DATA XREF: .rdata:off_6421D04Co
		mov	eax, [ebx+4Ch]	; jumptable 64201D60 case 44
		test	eax, eax
		jz	loc_64201ED7
		mov	edx, [ebx+4]
		mov	[esp+5Ch+var_5C], edx
		call	eax

loc_64201D7A:				; CODE XREF: _doCdataSection+1FCj
					; _doCdataSection+216j
		mov	eax, [esp+5Ch+var_24]
		mov	edx, [esp+5Ch+var_38]
		mov	[edx], eax
		mov	edx, [esp+5Ch+arg_4]
		mov	[edx], eax
		xor	eax, eax
		cmp	dword ptr [ebx+1E0h], 2
		jnz	short loc_64201D57

loc_64201D95:				; CODE XREF: _doCdataSection+18Fj
		add	esp, 4Ch
		mov	eax, 23h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64201DA2:				; CODE XREF: _doCdataSection:loc_64201D60j
					; DATA XREF: .rdata:off_6421D04Co
		cmp	[esp+5Ch+var_31], 0 ; jumptable	64201D60 cases 0,3
		mov	eax, 14h
		jz	short loc_64201D57

loc_64201DAE:				; CODE XREF: _doCdataSection+EEj
		mov	eax, [esp+5Ch+var_20]
		mov	edx, [esp+5Ch+arg_4]
		mov	[edx], eax
		add	esp, 4Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64201DC2:				; CODE XREF: _doCdataSection:loc_64201D60j
					; DATA XREF: .rdata:off_6421D04Co
		cmp	[esp+5Ch+var_31], 0 ; jumptable	64201D60 case 2
		mov	eax, 6
		jz	short loc_64201D57
		jmp	short loc_64201DAE
; ---------------------------------------------------------------------------

loc_64201DD0:				; CODE XREF: _doCdataSection:loc_64201D60j
					; DATA XREF: .rdata:off_6421D04Co
		mov	eax, [esp+5Ch+var_24] ;	jumptable 64201D60 case	4
		mov	[edi], eax
		add	esp, 4Ch
		mov	eax, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64201DE3:				; CODE XREF: _doCdataSection:loc_64201D60j
					; DATA XREF: .rdata:off_6421D04Co
		mov	ecx, [ebx+3Ch]	; jumptable 64201D60 case 10
		test	ecx, ecx
		jz	loc_64201F47
		cmp	byte ptr [esi+48h], 0
		jnz	loc_64201F24
		mov	[esp+5Ch+var_30], edi
		mov	edi, ecx
		jmp	short loc_64201E06
; ---------------------------------------------------------------------------

loc_64201E00:				; CODE XREF: _doCdataSection+17Aj
		mov	edx, [esp+5Ch+var_30]
		mov	[edx], eax

loc_64201E06:				; CODE XREF: _doCdataSection+11Ej
		mov	eax, [ebx+2Ch]
		lea	edx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_28], eax
		mov	eax, [ebx+30h]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_50], eax
		mov	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_54], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+5Ch+var_24]
		mov	[ebp+0], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_58], edx
		sub	eax, edx
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	edi
		mov	eax, [esp+5Ch+var_20]
		cmp	eax, [esp+5Ch+var_24]
		jnz	short loc_64201E00
		mov	edi, [esp+5Ch+var_30]

loc_64201E60:				; CODE XREF: _doCdataSection+1DAj
					; _doCdataSection+23Fj	...
		mov	[esp+5Ch+var_20], eax
		mov	[edi], eax
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	loc_64201D95
		cmp	eax, 3
		jnz	loc_64201D1F
		mov	eax, [esp+5Ch+var_24]
		mov	edx, [esp+5Ch+arg_4]
		mov	[edx], eax
		add	esp, 4Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64201E92:				; CODE XREF: _doCdataSection:loc_64201D60j
					; DATA XREF: .rdata:off_6421D04Co
		mov	eax, [ebx+3Ch]	; jumptable 64201D60 case 11
		test	eax, eax
		jz	short loc_64201F00
		lea	edx, [esp+5Ch+var_28]
		mov	byte ptr [esp+5Ch+var_28], 0Ah
		mov	[esp+5Ch+var_54], 1
		mov	[esp+5Ch+var_58], edx
		mov	edx, [ebx+4]
		mov	[esp+5Ch+var_5C], edx
		call	eax
		mov	eax, [esp+5Ch+var_24]
		jmp	short loc_64201E60
; ---------------------------------------------------------------------------
		align 10h

loc_64201EC0:				; CODE XREF: _doCdataSection+24j
		lea	edi, [ebx+120h]
		mov	[ebx+120h], eax
		lea	ebp, [ebx+124h]
		jmp	loc_64201D13
; ---------------------------------------------------------------------------

loc_64201ED7:				; CODE XREF: _doCdataSection+8Cj
		mov	edx, [ebx+50h]
		test	edx, edx
		jz	loc_64201D7A
		mov	eax, [esp+5Ch+var_24]
		mov	edx, esi
		mov	ecx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		mov	eax, ebx
		call	_reportDefault
		jmp	loc_64201D7A
; ---------------------------------------------------------------------------
		align 10h

loc_64201F00:				; CODE XREF: _doCdataSection+1B7j
		mov	eax, [ebx+50h]
		test	eax, eax
		jz	short loc_64201F62
		mov	eax, [esp+5Ch+var_24]
		mov	edx, esi
		mov	ecx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		mov	eax, ebx
		call	_reportDefault
		mov	eax, [esp+5Ch+var_24]
		jmp	loc_64201E60
; ---------------------------------------------------------------------------

loc_64201F24:				; CODE XREF: _doCdataSection+112j
		mov	edx, [esp+5Ch+var_20]
		mov	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_58], edx
		sub	eax, edx
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	ecx
		mov	eax, [esp+5Ch+var_24]
		jmp	loc_64201E60
; ---------------------------------------------------------------------------

loc_64201F47:				; CODE XREF: _doCdataSection+108j
		mov	ecx, [ebx+50h]
		test	ecx, ecx
		jz	short loc_64201F62
		mov	eax, [esp+5Ch+var_24]
		mov	edx, esi
		mov	ecx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		mov	eax, ebx
		call	_reportDefault

loc_64201F62:				; CODE XREF: _doCdataSection+225j
					; _doCdataSection+26Cj
		mov	eax, [esp+5Ch+var_24]
		jmp	loc_64201E60
_doCdataSection	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_defineAttribute proc near		; CODE XREF: _doProlog+E94p
					; _doProlog+FFBp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
arg_0		= byte ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_4]
		cmp	[esp+3Ch+arg_0], 0
		mov	[esp+3Ch+var_1E], cl
		setnz	[esp+3Ch+var_1D]
		test	esi, esi
		jnz	short loc_64201FD2
		cmp	[esp+3Ch+var_1D], 0
		jnz	short loc_64201FD2
		mov	ebp, [eax+0Ch]

loc_64201F99:				; CODE XREF: _defineAttribute+8Cj
					; _defineAttribute+93j	...
		cmp	[ebx+10h], ebp
		jz	loc_64202025
		mov	eax, [ebx+14h]

loc_64201FA5:				; CODE XREF: _defineAttribute+E9j
		lea	ecx, [ebp+ebp*2+0]
		lea	eax, [eax+ecx*4]
		mov	ecx, [esp+3Ch+arg_4]
		mov	[eax], edx
		mov	[eax+8], ecx
		movzx	ecx, [esp+3Ch+var_1E]
		test	cl, cl
		mov	[eax+4], cl
		jz	short loc_64202012

loc_64201FC1:				; CODE XREF: _defineAttribute+A6j
		add	dword ptr [ebx+0Ch], 1
		mov	eax, 1

loc_64201FCA:				; CODE XREF: _defineAttribute+116j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64201FD2:				; CODE XREF: _defineAttribute+1Dj
					; _defineAttribute+24j
		mov	edi, [ebx+0Ch]
		test	edi, edi
		mov	ebp, edi
		jle	short loc_64201FF7
		mov	ecx, [ebx+14h]
		xor	eax, eax
		cmp	[ecx], edx
		jnz	short loc_64201FF0
		jmp	short loc_64202018
; ---------------------------------------------------------------------------

loc_64201FE6:				; CODE XREF: _defineAttribute+85j
		mov	esi, [ecx+0Ch]
		add	ecx, 0Ch
		cmp	esi, edx
		jz	short loc_64202018

loc_64201FF0:				; CODE XREF: _defineAttribute+72j
		add	eax, 1
		cmp	eax, edi
		jl	short loc_64201FE6

loc_64201FF7:				; CODE XREF: _defineAttribute+69j
		cmp	[esp+3Ch+var_1D], 0
		jz	short loc_64201F99
		mov	ecx, [ebx+8]
		test	ecx, ecx
		jnz	short loc_64201F99
		cmp	byte ptr [edx+9], 0
		jnz	short loc_64201F99
		mov	[ebx+8], edx
		mov	ebp, edi
		jmp	short loc_64201F99
; ---------------------------------------------------------------------------

loc_64202012:				; CODE XREF: _defineAttribute+4Fj
		mov	byte ptr [edx+8], 1
		jmp	short loc_64201FC1
; ---------------------------------------------------------------------------

loc_64202018:				; CODE XREF: _defineAttribute+74j
					; _defineAttribute+7Ej
		add	esp, 2Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64202025:				; CODE XREF: _defineAttribute+2Cj
		test	ebp, ebp
		jz	short loc_64202060
		lea	esi, [ebp+ebp+0]
		mov	ecx, [esp+3Ch+arg_8]
		lea	eax, [esi+ebp*4]
		shl	eax, 2
		mov	[esp+3Ch+var_38], eax
		mov	eax, [ebx+14h]
		mov	[esp+3Ch+var_24], edx
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ecx+10h]
		mov	edx, [esp+3Ch+var_24]
		test	eax, eax
		jz	short loc_64202084
		mov	[ebx+10h], esi
		mov	[ebx+14h], eax

loc_64202056:				; CODE XREF: _defineAttribute+112j
		mov	ebp, [ebx+0Ch]
		jmp	loc_64201FA5
; ---------------------------------------------------------------------------
		align 10h

loc_64202060:				; CODE XREF: _defineAttribute+B7j
		mov	ecx, [esp+3Ch+arg_8]
		mov	dword ptr [ebx+10h], 8
		mov	[esp+3Ch+var_24], edx
		mov	[esp+3Ch+var_3C], 60h
		call	dword ptr [ecx+0Ch]
		mov	edx, [esp+3Ch+var_24]
		test	eax, eax
		mov	[ebx+14h], eax
		jnz	short loc_64202056

loc_64202084:				; CODE XREF: _defineAttribute+DEj
		xor	eax, eax
		jmp	loc_64201FCA
_defineAttribute endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normalizePublicId proc	near		; CODE XREF: _doProlog+6C6p
					; _doProlog+A9Ep ...
		push	ebp
		mov	edx, eax
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		movzx	ebx, byte ptr [eax]
		test	bl, bl
		jz	short loc_642020F2
		mov	edi, 1
		jmp	short loc_642020CE
; ---------------------------------------------------------------------------

loc_642020A6:				; CODE XREF: _normalizePublicId+44j
		mov	ebp, edi
		shl	ebp, cl
		mov	ecx, ebp
		and	ecx, 400009h
		jz	short loc_642020D6
		cmp	edx, eax
		jz	short loc_642020C4
		cmp	byte ptr [edx-1], 20h
		jz	short loc_642020C4
		mov	byte ptr [edx],	20h
		add	edx, 1

loc_642020C4:				; CODE XREF: _normalizePublicId+26j
					; _normalizePublicId+2Cj
		add	esi, 1
		movzx	ebx, byte ptr [esi]
		test	bl, bl
		jz	short loc_642020E5

loc_642020CE:				; CODE XREF: _normalizePublicId+14j
					; _normalizePublicId+53j
		lea	ecx, [ebx-0Ah]
		cmp	cl, 16h
		jbe	short loc_642020A6

loc_642020D6:				; CODE XREF: _normalizePublicId+22j
		add	esi, 1
		mov	[edx], bl
		movzx	ebx, byte ptr [esi]
		add	edx, 1
		test	bl, bl
		jnz	short loc_642020CE

loc_642020E5:				; CODE XREF: _normalizePublicId+3Cj
		cmp	edx, eax
		jz	short loc_642020F2
		cmp	byte ptr [edx-1], 20h
		lea	eax, [edx-1]
		jz	short loc_64202100

loc_642020F2:				; CODE XREF: _normalizePublicId+Dj
					; _normalizePublicId+57j
		mov	byte ptr [edx],	0
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64202100:				; CODE XREF: _normalizePublicId+60j
		mov	edx, eax
		mov	byte ptr [edx],	0
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_normalizePublicId endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_nextScaffoldPart proc near		; CODE XREF: _doProlog+3E1p
					; _doProlog+15ABp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, eax
		mov	[esp+1Ch+var_C], ebx
		mov	[esp+1Ch+var_4], edi
		mov	ebx, [eax+164h]
		mov	eax, [ebx+0B8h]
		test	eax, eax
		jz	loc_64202218

loc_64202135:				; CODE XREF: _nextScaffoldPart+127j
		mov	edx, [ebx+0B0h]
		mov	eax, [ebx+0ACh]
		cmp	edx, eax
		jb	short loc_6420217A
		mov	edx, [ebx+0A4h]
		test	edx, edx
		jz	loc_642021F4
		imul	eax, 38h
		mov	[esp+1Ch+var_1C], edx
		mov	[esp+1Ch+var_18], eax
		call	dword ptr [esi+10h]
		test	eax, eax
		jz	loc_64202211
		shl	dword ptr [ebx+0ACh], 1

loc_6420216E:				; CODE XREF: _nextScaffoldPart+FCj
		mov	edx, [ebx+0B0h]
		mov	[ebx+0A4h], eax

loc_6420217A:				; CODE XREF: _nextScaffoldPart+33j
		lea	ecx, [edx+1]
		mov	edi, [ebx+0B4h]
		mov	eax, edx
		mov	[ebx+0B0h], ecx
		mov	esi, [ebx+0A4h]
		imul	ecx, edx, 1Ch
		test	edi, edi
		lea	ecx, [esi+ecx]
		jz	short loc_642021C8
		mov	ebx, [ebx+0B8h]
		imul	ebx, [ebx+edi*4-4], 1Ch
		lea	ebx, [esi+ebx]
		mov	edi, [ebx+10h]
		test	edi, edi
		jz	short loc_642021B7
		imul	edi, 1Ch
		mov	[edi+esi+18h], edx

loc_642021B7:				; CODE XREF: _nextScaffoldPart+9Ej
		mov	edi, [ebx+14h]
		test	edi, edi
		jnz	short loc_642021C1
		mov	[ebx+0Ch], edx

loc_642021C1:				; CODE XREF: _nextScaffoldPart+ACj
		add	dword ptr [ebx+14h], 1
		mov	[ebx+10h], edx

loc_642021C8:				; CODE XREF: _nextScaffoldPart+89j
		mov	dword ptr [ecx+18h], 0
		mov	dword ptr [ecx+14h], 0
		mov	dword ptr [ecx+10h], 0
		mov	dword ptr [ecx+0Ch], 0

loc_642021E4:				; CODE XREF: _nextScaffoldPart+106j
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_642021F4:				; CODE XREF: _nextScaffoldPart+3Dj
		mov	[esp+1Ch+var_1C], 380h
		call	dword ptr [esi+0Ch]
		test	eax, eax
		jz	short loc_64202211
		mov	dword ptr [ebx+0ACh], 20h
		jmp	loc_6420216E
; ---------------------------------------------------------------------------

loc_64202211:				; CODE XREF: _nextScaffoldPart+52j
					; _nextScaffoldPart+F0j ...
		mov	eax, 0FFFFFFFFh
		jmp	short loc_642021E4
; ---------------------------------------------------------------------------

loc_64202218:				; CODE XREF: _nextScaffoldPart+1Fj
		mov	eax, [esi+1D4h]
		shl	eax, 2
		mov	[esp+1Ch+var_1C], eax
		call	dword ptr [esi+0Ch]
		test	eax, eax
		mov	[ebx+0B8h], eax
		jz	short loc_64202211
		mov	dword ptr [eax], 0
		jmp	loc_64202135
_nextScaffoldPart endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. XML_GetBuffer

; =============== S U B	R O U T	I N E =======================================


		public _XML_GetBuffer
_XML_GetBuffer	proc near		; CODE XREF: _XML_Parse+C7p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 4Ch
		mov	[esp+4Ch+var_10], ebx
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_C], esi
		mov	ecx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_8], edi
		mov	[esp+4Ch+var_4], ebp
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	loc_64202302
		cmp	eax, 3
		jz	loc_642022F4
		mov	edx, [ebx+20h]
		mov	eax, [ebx+1Ch]
		mov	esi, edx
		sub	esi, eax
		cmp	esi, ecx
		jge	short loc_642022E0
		mov	esi, [ebx+18h]
		mov	edi, eax
		sub	edi, esi
		mov	ebp, esi
		mov	[esp+4Ch+var_24], edi
		mov	edi, [ebx+8]
		sub	ebp, edi
		cmp	ebp, 400h
		mov	[esp+4Ch+var_28], ebp
		jle	short loc_642022A4
		mov	ebp, 400h

loc_642022A4:				; CODE XREF: _XML_GetBuffer+5Dj
		add	ecx, ebp
		add	ecx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_30], ecx
		mov	ecx, edx
		sub	ecx, edi
		cmp	[esp+4Ch+var_30], ecx
		jg	short loc_64202310
		cmp	[esp+4Ch+var_28], ebp
		jg	loc_642023A5

loc_642022C2:				; CODE XREF: _XML_GetBuffer+152j
					; _XML_GetBuffer+18Dj ...
		mov	dword ptr [ebx+124h], 0
		mov	dword ptr [ebx+120h], 0
		mov	dword ptr [ebx+128h], 0

loc_642022E0:				; CODE XREF: _XML_GetBuffer+3Fj
					; _XML_GetBuffer+C0j ...
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_642022F4:				; CODE XREF: _XML_GetBuffer+2Dj
		mov	dword ptr [ebx+11Ch], 21h
		xor	al, al
		jmp	short loc_642022E0
; ---------------------------------------------------------------------------

loc_64202302:				; CODE XREF: _XML_GetBuffer+24j
		mov	dword ptr [ebx+11Ch], 24h
		xor	eax, eax
		jmp	short loc_642022E0
; ---------------------------------------------------------------------------

loc_64202310:				; CODE XREF: _XML_GetBuffer+76j
		sub	edx, esi
		mov	esi, edx
		jz	loc_64202397
		mov	ecx, [esp+4Ch+var_30]
		xchg	ax, ax

loc_64202320:				; CODE XREF: _XML_GetBuffer+E4j
					; _XML_GetBuffer+160j
		add	esi, esi
		cmp	ecx, esi
		jg	short loc_64202320
		mov	[esp+4Ch+var_4C], esi
		call	dword ptr [ebx+0Ch]
		test	eax, eax
		mov	edi, eax
		jz	loc_642023E3
		lea	esi, [eax+esi]
		mov	eax, [ebx+18h]
		mov	[ebx+20h], esi
		test	eax, eax
		jz	loc_642023D2
		mov	esi, eax
		sub	esi, [ebx+8]
		cmp	esi, 400h
		jle	short loc_64202359
		mov	esi, 400h

loc_64202359:				; CODE XREF: _XML_GetBuffer+112j
		mov	edx, [ebx+1Ch]
		mov	[esp+4Ch+var_4C], edi ;	void *
		sub	edx, eax
		sub	eax, esi
		add	edx, esi
		mov	[esp+4Ch+var_44], edx ;	size_t
		mov	[esp+4Ch+var_48], eax ;	void *
		call	_memcpy
		mov	eax, [ebx+8]
		mov	[esp+4Ch+var_4C], eax
		call	dword ptr [ebx+14h]
		mov	eax, [ebx+1Ch]
		sub	eax, [ebx+18h]
		mov	[ebx+8], edi
		lea	eax, [esi+eax]
		lea	eax, [edi+eax]
		add	edi, esi
		mov	[ebx+1Ch], eax
		mov	[ebx+18h], edi
		jmp	loc_642022C2
; ---------------------------------------------------------------------------

loc_64202397:				; CODE XREF: _XML_GetBuffer+D4j
		mov	esi, 400h
		mov	ecx, [esp+4Ch+var_30]
		jmp	loc_64202320
; ---------------------------------------------------------------------------

loc_642023A5:				; CODE XREF: _XML_GetBuffer+7Cj
		mov	esi, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], edi ;	void *
		sub	esi, ebp
		add	ebp, [esp+4Ch+var_24]
		lea	eax, [edi+esi]
		neg	esi
		mov	[esp+4Ch+var_48], eax ;	void *
		mov	[esp+4Ch+var_44], ebp ;	size_t
		call	_memmove
		add	[ebx+1Ch], esi
		add	[ebx+18h], esi
		mov	eax, [ebx+1Ch]
		jmp	loc_642022C2
; ---------------------------------------------------------------------------

loc_642023D2:				; CODE XREF: _XML_GetBuffer+101j
		add	[ebx+1Ch], edi
		mov	eax, [ebx+1Ch]
		mov	[ebx+8], edi
		mov	[ebx+18h], edi
		jmp	loc_642022C2
; ---------------------------------------------------------------------------

loc_642023E3:				; CODE XREF: _XML_GetBuffer+F0j
		mov	dword ptr [ebx+11Ch], 1
		xor	eax, eax
		jmp	loc_642022E0
_XML_GetBuffer	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl addBinding(void *, int)
_addBinding	proc near		; CODE XREF: _setContext+1BFp
					; _storeAtts+2FAp ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= byte ptr -4Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_2C], eax
		mov	[esp+5Ch+var_28], ecx
		movzx	ecx, byte ptr [esi]
		test	cl, cl
		jnz	short loc_64202430
		mov	ebx, [edx]
		mov	eax, 1Ch
		test	ebx, ebx
		jz	short loc_64202450

loc_64202425:				; CODE XREF: _addBinding+12Fj
					; _addBinding+1F7j ...
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64202430:				; CODE XREF: _addBinding+18j
		mov	ebx, [edx]
		test	ebx, ebx
		jz	short loc_6420243F
		cmp	byte ptr [ebx],	78h
		jz	loc_64202534

loc_6420243F:				; CODE XREF: _addBinding+34j
					; _addBinding+138j ...
		mov	[esp+5Ch+var_21], 0
		jmp	loc_6420255D
; ---------------------------------------------------------------------------
		align 10h

loc_64202450:				; CODE XREF: _addBinding+23j
		xor	ebx, ebx

loc_64202452:				; CODE XREF: _addBinding+20Ej
		mov	eax, [esp+5Ch+var_2C]
		mov	edi, [eax+178h]
		cmp	byte ptr [eax+1D8h], 1
		sbb	ebx, 0FFFFFFFFh
		test	edi, edi
		jz	loc_64202648
		cmp	ebx, [edi+18h]
		jg	loc_64202616

loc_64202477:				; CODE XREF: _addBinding+23Cj
		mov	eax, [edi+4]
		mov	ecx, [esp+5Ch+var_2C]
		mov	[ecx+178h], eax

loc_64202484:				; CODE XREF: _addBinding+27Bj
		mov	eax, [edi+10h]
		mov	[edi+14h], ebx
		mov	[esp+5Ch+var_30], edx
		mov	[esp+5Ch+var_54], ebx ;	size_t
		mov	[esp+5Ch+var_58], esi ;	void *
		mov	[esp+5Ch+var_5C], eax ;	void *
		call	_memcpy
		mov	eax, [esp+5Ch+var_2C]
		mov	edx, [esp+5Ch+var_30]
		movzx	ecx, byte ptr [eax+1D8h]
		test	cl, cl
		jz	short loc_642024B8
		mov	eax, [edi+10h]
		mov	[eax+ebx-1], cl

loc_642024B8:				; CODE XREF: _addBinding+AFj
		mov	ecx, [esp+5Ch+var_28]
		mov	eax, [edx+4]
		mov	[edi], edx
		mov	[edi+0Ch], ecx
		mov	[edi+8], eax
		cmp	byte ptr [esi],	0
		jnz	short loc_642024E4
		mov	ecx, [esp+5Ch+var_2C]
		mov	eax, [ecx+164h]
		lea	ecx, [eax+98h]
		cmp	edx, ecx
		jz	loc_64202680

loc_642024E4:				; CODE XREF: _addBinding+CAj
		mov	[edx+4], edi

loc_642024E7:				; CODE XREF: _addBinding+28Aj
		mov	ecx, [esp+5Ch+arg_4]
		mov	eax, [ecx]
		mov	[edi+4], eax
		mov	[ecx], edi
		mov	ecx, [esp+5Ch+var_28]
		test	ecx, ecx
		jz	loc_64202641
		mov	eax, [esp+5Ch+var_2C]
		mov	ecx, [eax+64h]
		test	ecx, ecx
		jz	loc_64202641
		cmp	dword ptr [edx+4], 1
		sbb	eax, eax
		not	eax
		and	esi, eax
		mov	[esp+5Ch+var_54], esi
		mov	eax, [edx]
		mov	edx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [edx+4]
		mov	[esp+5Ch+var_5C], eax
		call	ecx
		xor	eax, eax
		jmp	loc_64202425
; ---------------------------------------------------------------------------

loc_64202534:				; CODE XREF: _addBinding+39j
		cmp	byte ptr [ebx+1], 6Dh
		jnz	loc_6420243F
		cmp	byte ptr [ebx+2], 6Ch
		jnz	loc_6420243F
		movzx	eax, byte ptr [ebx+3]
		cmp	al, 6Eh
		xchg	ax, ax
		jz	loc_64202699
		test	al, al
		setz	[esp+5Ch+var_21]

loc_6420255D:				; CODE XREF: _addBinding+44j
		movzx	eax, [esp+5Ch+var_21]
		xor	ebx, ebx
		mov	[esp+5Ch+var_20], edx
		mov	edi, [esp+5Ch+var_20]
		mov	edx, 1
		mov	[esp+5Ch+var_4C], 1
		xor	eax, 1
		mov	ebp, eax
		nop
		lea	esi, [esi+0]

loc_64202580:				; CODE XREF: _addBinding+1BFj
		test	dl, dl
		jz	short loc_64202594
		xor	edx, edx
		cmp	ebx, 24h
		jg	short loc_64202594
		cmp	cl, ds:_xmlNamespace_5552[ebx]
		setz	dl

loc_64202594:				; CODE XREF: _addBinding+182j
					; _addBinding+189j
		cmp	[esp+5Ch+var_4C], 0
		jz	short loc_642025B6
		mov	eax, ebp
		test	al, al
		jz	short loc_642025B6
		cmp	ebx, 1Dh
		mov	[esp+5Ch+var_4C], 0
		jg	short loc_642025B6
		cmp	ds:_xmlnsNamespace_5554[ebx], cl
		setz	[esp+5Ch+var_4C]

loc_642025B6:				; CODE XREF: _addBinding+199j
					; _addBinding+19Fj ...
		add	ebx, 1
		movzx	ecx, byte ptr [esi+ebx]
		test	cl, cl
		jnz	short loc_64202580
		mov	ecx, edi
		movzx	edi, [esp+5Ch+var_4C]
		mov	[esp+5Ch+var_4C], dl
		mov	edx, ecx
		xor	ecx, ecx
		cmp	ebx, 24h
		setz	cl
		cmp	ebx, 1Dh
		setz	al
		mov	ebp, eax
		movzx	eax, [esp+5Ch+var_4C]
		and	ebp, edi
		and	ecx, eax
		cmp	[esp+5Ch+var_21], cl
		jz	short loc_6420260A
		cmp	[esp+5Ch+var_21], 0
		mov	eax, 26h
		jnz	loc_64202425

loc_642025FD:				; CODE XREF: _addBinding+214j
		add	esp, 4Ch
		mov	eax, 28h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6420260A:				; CODE XREF: _addBinding+1EBj
		mov	ecx, ebp
		test	cl, cl
		jz	loc_64202452
		jmp	short loc_642025FD
; ---------------------------------------------------------------------------

loc_64202616:				; CODE XREF: _addBinding+71j
		lea	ebp, [ebx+18h]
		mov	ecx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_58], ebp
		mov	eax, [edi+10h]
		mov	[esp+5Ch+var_30], edx
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ecx+10h]
		mov	edx, [esp+5Ch+var_30]
		test	eax, eax
		jz	short loc_6420268F
		mov	[edi+10h], eax
		mov	[edi+18h], ebp
		jmp	loc_64202477
; ---------------------------------------------------------------------------

loc_64202641:				; CODE XREF: _addBinding+F8j
					; _addBinding+107j
		xor	eax, eax
		jmp	loc_64202425
; ---------------------------------------------------------------------------

loc_64202648:				; CODE XREF: _addBinding+68j
		mov	ecx, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], 1Ch
		mov	[esp+5Ch+var_30], edx
		call	dword ptr [ecx+0Ch]
		test	eax, eax
		mov	edi, eax
		jz	short loc_6420268F
		mov	ecx, [esp+5Ch+var_2C]
		lea	ebp, [ebx+18h]
		mov	[esp+5Ch+var_5C], ebp
		call	dword ptr [ecx+0Ch]
		mov	edx, [esp+5Ch+var_30]
		test	eax, eax
		mov	[edi+10h], eax
		jz	short loc_642026B7
		mov	[edi+18h], ebp
		jmp	loc_64202484
; ---------------------------------------------------------------------------

loc_64202680:				; CODE XREF: _addBinding+DEj
		mov	dword ptr [eax+9Ch], 0
		jmp	loc_642024E7
; ---------------------------------------------------------------------------

loc_6420268F:				; CODE XREF: _addBinding+234j
					; _addBinding+25Ej
		mov	eax, 1
		jmp	loc_64202425
; ---------------------------------------------------------------------------

loc_64202699:				; CODE XREF: _addBinding+150j
		cmp	byte ptr [ebx+4], 73h
		jnz	loc_6420243F
		cmp	byte ptr [ebx+5], 0
		mov	eax, 27h
		jnz	loc_6420243F
		jmp	loc_64202425
; ---------------------------------------------------------------------------

loc_642026B7:				; CODE XREF: _addBinding+276j
		mov	eax, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_5C], edi
		xchg	ax, ax
		call	dword ptr [eax+14h]
		mov	eax, 1
		jmp	loc_64202425
_addBinding	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_poolGrow	proc near		; CODE XREF: _setContext+17Bp
					; _setContext+204p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_8], edi
		mov	[esp+2Ch+var_4], ebp
		mov	edx, [eax+4]
		test	edx, edx
		jz	loc_642027F7
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_64202802
		mov	edi, [ebx+8]
		mov	ecx, edi
		sub	ecx, eax
		cmp	ecx, [edx+4]
		jl	loc_642027B0

loc_6420270B:				; CODE XREF: _poolGrow+12Dj
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_6420271C
		lea	ecx, [edx+8]
		cmp	ecx, eax
		jz	loc_64202837

loc_6420271C:				; CODE XREF: _poolGrow+3Fj
		sub	edi, eax
		cmp	edi, 3FFh
		jg	short loc_642027A3
		mov	edx, 408h
		mov	ebp, 400h
		mov	edi, 400h

loc_64202735:				; CODE XREF: _poolGrow+DAj
		mov	eax, [ebx+14h]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax]
		test	eax, eax
		mov	esi, eax
		jz	loc_64202830
		mov	[eax+4], edi
		mov	eax, [ebx]
		lea	edi, [esi+8]
		mov	edx, [ebx+10h]
		mov	[esi], eax
		mov	eax, [ebx+0Ch]
		mov	[ebx], esi
		cmp	eax, edx
		mov	ecx, eax
		jz	short loc_64202777
		sub	eax, edx
		mov	[esp+2Ch+var_24], eax ;	size_t
		mov	[esp+2Ch+var_28], edx ;	void *
		mov	[esp+2Ch+var_2C], edi ;	void *
		call	_memcpy
		mov	ecx, [ebx+0Ch]
		mov	eax, [ebx+10h]

loc_64202777:				; CODE XREF: _poolGrow+8Dj
		sub	ecx, eax
		lea	eax, [esi+ecx+8]
		mov	[ebx+0Ch], eax
		lea	eax, [esi+ebp+8]
		mov	[ebx+8], eax
		mov	eax, 1
		mov	[ebx+10h], edi

loc_6420278F:				; CODE XREF: _poolGrow+125j
					; _poolGrow+158j ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_642027A3:				; CODE XREF: _poolGrow+54j
		add	edi, edi
		mov	ebp, edi
		lea	edx, [edi+8]
		jmp	short loc_64202735
; ---------------------------------------------------------------------------
		align 10h

loc_642027B0:				; CODE XREF: _poolGrow+35j
		mov	edi, [ebx]
		mov	esi, [edx]
		mov	[edx], edi
		mov	edx, [ebx+4]
		mov	[ebx+4], esi
		mov	[esp+2Ch+var_24], ecx ;	size_t
		mov	[esp+2Ch+var_28], eax ;	void *
		mov	[ebx], edx
		add	edx, 8
		mov	[esp+2Ch+var_2C], edx ;	void *
		call	_memcpy
		mov	eax, [ebx+0Ch]
		sub	eax, [ebx+10h]
		add	eax, [ebx]
		add	eax, 8
		mov	[ebx+0Ch], eax
		mov	eax, [ebx]
		lea	edx, [eax+8]
		add	eax, [eax+4]
		mov	[ebx+10h], edx
		add	eax, 8
		mov	[ebx+8], eax
		mov	eax, 1
		jmp	short loc_6420278F
; ---------------------------------------------------------------------------

loc_642027F7:				; CODE XREF: _poolGrow+1Aj
		mov	edi, [eax+8]
		mov	eax, [eax+10h]
		jmp	loc_6420270B
; ---------------------------------------------------------------------------

loc_64202802:				; CODE XREF: _poolGrow+25j
		mov	[ebx], edx
		mov	eax, [edx]
		mov	[ebx+4], eax
		mov	dword ptr [edx], 0
		mov	eax, [ebx]
		lea	edx, [eax+8]
		add	eax, [eax+4]
		mov	[ebx+10h], edx
		mov	[ebx+0Ch], edx
		add	eax, 8
		mov	[ebx+8], eax
		mov	eax, 1
		jmp	loc_6420278F
; ---------------------------------------------------------------------------
		align 10h

loc_64202830:				; CODE XREF: _poolGrow+71j
					; _poolGrow+17Ej
		xor	eax, eax
		jmp	loc_6420278F
; ---------------------------------------------------------------------------

loc_64202837:				; CODE XREF: _poolGrow+46j
		sub	edi, eax
		mov	eax, [ebx+14h]
		lea	esi, [edi+edi]
		lea	ecx, [esi+8]
		mov	[esp+2Ch+var_28], ecx
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+4]
		test	eax, eax
		jz	short loc_64202830
		mov	edx, [ebx+0Ch]
		mov	[ebx], eax
		mov	[eax+4], esi
		add	edx, eax
		sub	edx, [ebx+10h]
		add	edx, 8
		mov	[ebx+0Ch], edx
		lea	edx, [eax+8]
		lea	eax, [eax+esi+8]
		mov	[ebx+8], eax
		mov	eax, 1
		mov	[ebx+10h], edx
		jmp	loc_6420278F
_poolGrow	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl lookup(size_t)
_lookup		proc near		; CODE XREF: _setContext+80p
					; _setContext+120p ...

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_41		= byte ptr -41h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, ecx
		sub	esp, 7Ch
		mov	[esp+8Ch+var_48], eax
		mov	eax, [edx+8]
		mov	[esp+8Ch+var_68], edx
		test	eax, eax
		mov	[esp+8Ch+var_64], eax
		jz	loc_64202A1B
		mov	edi, [esp+8Ch+var_48]
		mov	edi, [edi+1F0h]
		mov	[esp+8Ch+var_4C], edi
		movzx	eax, byte ptr [ecx]
		test	al, al
		mov	byte ptr [esp+8Ch+var_70], al
		jz	short loc_642028DB
		mov	edx, eax
		mov	eax, ecx
		mov	ecx, edi
		nop

loc_642028C0:				; CODE XREF: _lookup+53j
		add	eax, 1
		imul	esi, ecx, 0F4243h
		movzx	ecx, dl
		movzx	edx, byte ptr [eax]
		xor	ecx, esi
		test	dl, dl
		jnz	short loc_642028C0
		mov	[esp+8Ch+var_4C], ecx
		mov	edi, ecx

loc_642028DB:				; CODE XREF: _lookup+37j
		mov	ecx, [esp+8Ch+var_68]
		xor	ebp, ebp
		mov	edx, [esp+8Ch+var_64]
		mov	eax, [esp+8Ch+var_4C]
		mov	ecx, [ecx]
		sub	edx, 1
		and	eax, edx
		mov	[esp+8Ch+var_6C], ecx
		mov	ecx, edx
		not	edx
		shr	ecx, 2
		and	edx, edi
		mov	byte ptr [esp+8Ch+var_5C], cl
		mov	[esp+8Ch+var_60], edx

loc_64202905:				; CODE XREF: _lookup+F6j _lookup+FAj
		mov	edx, [esp+8Ch+var_6C]
		lea	edi, ds:0[eax*4]
		add	edx, edi
		mov	esi, [edx]
		test	esi, esi
		jz	short loc_6420297C
		mov	edi, [esi]
		movzx	edx, byte ptr [esp+8Ch+var_70]
		cmp	[edi], dl
		jnz	short loc_64202946
		test	dl, dl
		jz	loc_64202A05
		xor	edx, edx
		jmp	short loc_6420293B
; ---------------------------------------------------------------------------
		align 10h

loc_64202930:				; CODE XREF: _lookup+C4j
		add	edx, 1
		test	cl, cl
		jz	loc_64202A05

loc_6420293B:				; CODE XREF: _lookup+ADj
		movzx	ecx, byte ptr [ebx+edx+1]
		cmp	cl, [edi+edx+1]
		jz	short loc_64202930

loc_64202946:				; CODE XREF: _lookup+A1j
		mov	ecx, ebp
		test	cl, cl
		jnz	short loc_64202967
		mov	edi, [esp+8Ch+var_68]
		mov	ebp, [esp+8Ch+var_60]
		movzx	edx, byte ptr [esp+8Ch+var_5C]
		movzx	ecx, byte ptr [edi+4]
		sub	ecx, 1
		shr	ebp, cl
		and	ebp, edx
		or	ebp, 1

loc_64202967:				; CODE XREF: _lookup+CAj
		mov	ecx, ebp
		movzx	edx, cl
		cmp	eax, edx
		jnb	short loc_64202978
		add	eax, [esp+8Ch+var_64]
		sub	eax, edx
		jmp	short loc_64202905
; ---------------------------------------------------------------------------

loc_64202978:				; CODE XREF: _lookup+EEj
		sub	eax, edx
		jmp	short loc_64202905
; ---------------------------------------------------------------------------

loc_6420297C:				; CODE XREF: _lookup+96j
		mov	eax, [esp+8Ch+arg_0]
		test	eax, eax
		jz	short loc_64202A05
		mov	eax, [esp+8Ch+var_68]
		movzx	ebp, byte ptr [eax+4]
		mov	ecx, ebp
		movzx	eax, cl
		mov	ecx, [esp+8Ch+var_68]
		sub	eax, 1
		mov	[esp+8Ch+var_70], eax
		mov	eax, [ecx+0Ch]
		movzx	ecx, byte ptr [esp+8Ch+var_70]
		shr	eax, cl
		test	eax, eax
		jnz	loc_64202A97

loc_642029B1:				; CODE XREF: _lookup+212j _lookup+39Fj
		mov	ecx, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_78], edx
		mov	eax, [ecx+10h]
		mov	ecx, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_8C], ecx
		call	dword ptr [eax]
		mov	edx, [esp+8Ch+var_78]
		mov	[edx], eax
		mov	edx, [esp+8Ch+var_68]
		mov	eax, [edx]
		mov	eax, [eax+edi]
		test	eax, eax
		jz	short loc_64202A0F
		mov	ecx, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_88], 0 ; int
		mov	[esp+8Ch+var_8C], eax ;	void *
		mov	[esp+8Ch+var_84], ecx ;	size_t
		call	_memset
		mov	edx, [esp+8Ch+var_68]
		mov	eax, [edx]
		add	dword ptr [edx+0Ch], 1
		mov	esi, [eax+edi]
		mov	[esi], ebx

loc_64202A05:				; CODE XREF: _lookup+A5j _lookup+B5j ...
		add	esp, 7Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64202A0F:				; CODE XREF: _lookup+159j _lookup+1A3j
		xor	esi, esi
		add	esp, 7Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64202A1B:				; CODE XREF: _lookup+1Aj
		cmp	[esp+8Ch+arg_0], 0
		jz	short loc_64202A0F
		mov	eax, [edx+10h]
		mov	byte ptr [edx+4], 6
		mov	dword ptr [edx+8], 40h
		mov	[esp+8Ch+var_8C], 100h
		call	dword ptr [eax]
		mov	ecx, [esp+8Ch+var_68]
		test	eax, eax
		mov	[ecx], eax
		jz	loc_64202C3A
		mov	edi, eax
		mov	eax, [esp+8Ch+var_64]
		mov	ecx, 40h
		rep stosd
		mov	edx, [esp+8Ch+var_48]
		mov	eax, [edx+1F0h]
		movzx	edx, byte ptr [ebx]
		test	dl, dl
		jz	short loc_64202A7F
		mov	ecx, ebx

loc_64202A6A:				; CODE XREF: _lookup+1FDj
		add	ecx, 1
		imul	esi, eax, 0F4243h
		movzx	eax, dl
		movzx	edx, byte ptr [ecx]
		xor	eax, esi
		test	dl, dl
		jnz	short loc_64202A6A

loc_64202A7F:				; CODE XREF: _lookup+1E6j
		mov	ecx, [esp+8Ch+var_68]
		mov	edi, [ecx+8]
		mov	edx, [ecx]
		sub	edi, 1
		and	edi, eax
		shl	edi, 2
		add	edx, edi
		jmp	loc_642029B1
; ---------------------------------------------------------------------------

loc_64202A97:				; CODE XREF: _lookup+12Bj
		mov	edi, [esp+8Ch+var_68]
		lea	eax, [ebp+1]
		movzx	ecx, al
		mov	[esp+8Ch+var_70], 1
		shl	[esp+8Ch+var_70], cl
		mov	edx, [esp+8Ch+var_70]
		mov	[esp+8Ch+var_41], al
		mov	eax, [edi+10h]
		mov	[esp+8Ch+var_74], ecx
		shl	edx, 2
		mov	[esp+8Ch+var_8C], edx
		mov	[esp+8Ch+var_78], edx
		call	dword ptr [eax]
		mov	edx, [esp+8Ch+var_78]
		test	eax, eax
		mov	ebp, eax
		jz	loc_64202A05
		mov	edi, [esp+8Ch+var_70]
		mov	[esp+8Ch+var_84], edx ;	size_t
		mov	[esp+8Ch+var_88], 0 ; int
		mov	[esp+8Ch+var_8C], eax ;	void *
		call	_memset
		mov	eax, [esp+8Ch+var_68]
		sub	edi, 1
		mov	ecx, [esp+8Ch+var_74]
		mov	eax, [eax+8]
		test	eax, eax
		mov	[esp+8Ch+var_40], eax
		jz	loc_64202C53
		mov	eax, [esp+8Ch+var_68]
		mov	edx, edi
		sub	ecx, 1
		shr	edx, 2
		mov	[esp+8Ch+var_3C], dl
		mov	edx, edi
		not	edx
		mov	eax, [eax]
		mov	[esp+8Ch+var_6C], 0
		mov	[esp+8Ch+var_5C], edx
		mov	[esp+8Ch+var_60], ecx
		mov	[esp+8Ch+var_64], eax
		mov	[esp+8Ch+var_20], ebx

loc_64202B36:				; CODE XREF: _lookup+346j
		mov	ecx, [esp+8Ch+var_6C]
		mov	ebx, [esp+8Ch+var_64]
		mov	edx, [ebx+ecx*4]
		test	edx, edx
		jz	short loc_64202BB9
		mov	eax, [esp+8Ch+var_48]
		mov	ebx, [edx]
		mov	ecx, [eax+1F0h]
		movzx	eax, byte ptr [ebx]
		test	al, al
		jz	short loc_64202B6D

loc_64202B58:				; CODE XREF: _lookup+2EBj
		add	ebx, 1
		imul	esi, ecx, 0F4243h
		movzx	ecx, al
		movzx	eax, byte ptr [ebx]
		xor	ecx, esi
		test	al, al
		jnz	short loc_64202B58

loc_64202B6D:				; CODE XREF: _lookup+2D6j
		mov	esi, [esp+8Ch+var_5C]
		mov	eax, ecx
		movzx	ebx, [esp+8Ch+var_3C]
		and	eax, edi
		and	esi, ecx
		movzx	ecx, byte ptr [esp+8Ch+var_60]
		shr	esi, cl
		and	esi, ebx
		xor	ebx, ebx
		or	esi, 1

loc_64202B8A:				; CODE XREF: _lookup+3CAj
		lea	ecx, [ebp+eax*4+0]
		cmp	dword ptr [ecx], 0
		jz	short loc_64202BB3

loc_64202B93:				; CODE XREF: _lookup+331j
		test	bl, bl
		jnz	short loc_64202B99
		mov	ebx, esi

loc_64202B99:				; CODE XREF: _lookup+315j
		movzx	ecx, bl
		cmp	eax, ecx
		jnb	loc_64202C48
		add	eax, [esp+8Ch+var_70]
		sub	eax, ecx
		lea	ecx, [ebp+eax*4+0]
		cmp	dword ptr [ecx], 0
		jnz	short loc_64202B93

loc_64202BB3:				; CODE XREF: _lookup+311j
		mov	eax, [esp+8Ch+var_64]
		mov	[ecx], edx

loc_64202BB9:				; CODE XREF: _lookup+2C3j
		add	[esp+8Ch+var_6C], 1
		mov	edx, [esp+8Ch+var_40]
		cmp	[esp+8Ch+var_6C], edx
		jb	loc_64202B36
		mov	ebx, [esp+8Ch+var_20]

loc_64202BD0:				; CODE XREF: _lookup+3E8j
		mov	ecx, [esp+8Ch+var_68]
		mov	edx, [ecx+10h]
		mov	[esp+8Ch+var_8C], eax
		call	dword ptr [edx+8]
		mov	eax, [esp+8Ch+var_68]
		movzx	edx, [esp+8Ch+var_41]
		mov	[eax], ebp
		mov	[eax+4], dl
		mov	ecx, [esp+8Ch+var_70]
		mov	esi, [esp+8Ch+var_4C]
		and	esi, [esp+8Ch+var_5C]
		mov	[eax+8], ecx
		movzx	ecx, byte ptr [esp+8Ch+var_60]
		mov	eax, [esp+8Ch+var_4C]
		shr	esi, cl
		xor	ecx, ecx
		and	eax, edi
		shr	edi, 2
		and	esi, edi
		or	esi, 1

loc_64202C11:				; CODE XREF: _lookup+3B8j _lookup+3D1j
		lea	edi, ds:0[eax*4]
		lea	edx, [ebp+edi+0]
		cmp	dword ptr [edx], 0
		jz	loc_642029B1
		test	cl, cl
		jnz	short loc_64202C2B
		mov	ecx, esi

loc_64202C2B:				; CODE XREF: _lookup+3A7j
		movzx	edx, cl
		cmp	eax, edx
		jnb	short loc_64202C4F
		add	eax, [esp+8Ch+var_70]
		sub	eax, edx
		jmp	short loc_64202C11
; ---------------------------------------------------------------------------

loc_64202C3A:				; CODE XREF: _lookup+1C4j
		mov	dword ptr [ecx+8], 0
		xor	esi, esi
		jmp	loc_64202A05
; ---------------------------------------------------------------------------

loc_64202C48:				; CODE XREF: _lookup+31Ej
		sub	eax, ecx
		jmp	loc_64202B8A
; ---------------------------------------------------------------------------

loc_64202C4F:				; CODE XREF: _lookup+3B0j
		sub	eax, edx
		jmp	short loc_64202C11
; ---------------------------------------------------------------------------

loc_64202C53:				; CODE XREF: _lookup+282j
		mov	edx, [esp+8Ch+var_68]
		sub	ecx, 1
		mov	[esp+8Ch+var_60], ecx
		mov	eax, [edx]
		mov	edx, edi
		not	edx
		mov	[esp+8Ch+var_5C], edx
		jmp	loc_64202BD0
_lookup		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_setContext	proc near		; CODE XREF: _startParsing+2Ej
					; _XML_ExternalEntityParserCreate+7B6p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 3Ch
		mov	ebp, [eax+164h]
		mov	edi, esi
		movzx	eax, byte ptr [edx]
		lea	edx, [ebx+1A0h]
		mov	[esp+4Ch+var_34], edx
		lea	ecx, [ebp+98h]
		lea	edx, [ebp+3Ch]
		mov	[esp+4Ch+var_30], ecx
		lea	ecx, [ebp+50h]
		mov	[esp+4Ch+var_2C], edx
		lea	edx, [ebx+174h]
		mov	[esp+4Ch+var_24], ecx
		mov	[esp+4Ch+var_28], edx

loc_64202CB2:				; CODE XREF: _setContext+DCj
					; _setContext+1E5j
		test	al, al
		jz	short loc_64202D18

loc_64202CB6:				; CODE XREF: _setContext+A6j
		movzx	eax, byte ptr [edi]
		test	al, al
		jz	short loc_64202CC1
		cmp	al, 0Ch
		jnz	short loc_64202D25

loc_64202CC1:				; CODE XREF: _setContext+4Bj
		mov	eax, [ebx+1ACh]
		cmp	eax, [ebx+1A8h]
		jz	loc_64202E70

loc_64202CD3:				; CODE XREF: _setContext+217j
		mov	byte ptr [eax],	0
		mov	ecx, [ebx+1B0h]
		add	eax, 1
		mov	[ebx+1ACh], eax
		mov	edx, ebp
		mov	eax, ebx
		mov	[esp+4Ch+var_4C], 0 ; size_t
		call	_lookup
		test	eax, eax
		jz	short loc_64202CFD
		mov	byte ptr [eax+20h], 1

loc_64202CFD:				; CODE XREF: _setContext+87j
		cmp	byte ptr [edi],	1
		mov	eax, [ebx+1B0h]
		sbb	edi, 0FFFFFFFFh
		mov	esi, edi
		mov	[ebx+1ACh], eax
		movzx	eax, byte ptr [edi]
		test	al, al
		jnz	short loc_64202CB6

loc_64202D18:				; CODE XREF: _setContext+44j
					; _setContext+1D7j
		add	esp, 3Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64202D25:				; CODE XREF: _setContext+4Fj
		cmp	al, 3Dh
		jz	short loc_64202D51
		mov	edx, [ebx+1ACh]
		cmp	edx, [ebx+1A8h]
		jz	loc_64202E90

loc_64202D3B:				; CODE XREF: _setContext+23Aj
		mov	[edx], al
		add	edx, 1
		add	edi, 1
		mov	[ebx+1ACh], edx
		movzx	eax, byte ptr [esi]
		jmp	loc_64202CB2
; ---------------------------------------------------------------------------

loc_64202D51:				; CODE XREF: _setContext+B7j
		mov	ecx, [ebx+1ACh]
		mov	eax, [ebx+1B0h]
		mov	edx, [esp+4Ch+var_30]
		cmp	ecx, eax
		jz	short loc_64202DB1
		cmp	ecx, [ebx+1A8h]
		jz	loc_64202EAF

loc_64202D71:				; CODE XREF: _setContext+256j
		mov	byte ptr [ecx],	0
		add	ecx, 1
		mov	edx, [esp+4Ch+var_2C]
		mov	[ebx+1ACh], ecx
		mov	ecx, [ebx+1B0h]
		mov	eax, ebx
		mov	[esp+4Ch+var_4C], 8 ; size_t
		call	_lookup
		test	eax, eax
		mov	edx, eax
		jz	short loc_64202DF4
		mov	esi, [eax]
		mov	eax, [ebx+1B0h]
		cmp	esi, eax
		jz	loc_64202ECB

loc_64202DAB:				; CODE XREF: _setContext+2A5j
		mov	[ebx+1ACh], eax

loc_64202DB1:				; CODE XREF: _setContext+F3j
		movzx	ecx, byte ptr [edi+1]
		lea	esi, [edi+1]
		cmp	cl, 0Ch
		jz	short loc_64202E02
		test	cl, cl
		jz	short loc_64202E02
		mov	edi, edx
		jmp	short loc_64202DDF
; ---------------------------------------------------------------------------

loc_64202DC5:				; CODE XREF: _setContext+175j
					; _setContext+1F9j
		mov	[eax], cl
		add	esi, 1
		add	eax, 1
		mov	[ebx+1ACh], eax
		movzx	ecx, byte ptr [esi]
		test	cl, cl
		jz	short loc_64202E00
		cmp	cl, 0Ch
		jz	short loc_64202E00

loc_64202DDF:				; CODE XREF: _setContext+153j
		cmp	[ebx+1A8h], eax
		jnz	short loc_64202DC5
		mov	eax, [esp+4Ch+var_34]
		call	_poolGrow
		test	al, al
		jnz	short loc_64202E60

loc_64202DF4:				; CODE XREF: _setContext+129j
					; _setContext+1C6j ...
		xor	eax, eax

loc_64202DF6:				; CODE XREF: _setContext+2F2j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64202E00:				; CODE XREF: _setContext+168j
					; _setContext+16Dj
		mov	edx, edi

loc_64202E02:				; CODE XREF: _setContext+14Bj
					; _setContext+14Fj
		cmp	[ebx+1A8h], eax
		jz	loc_64202F1A

loc_64202E0E:				; CODE XREF: _setContext+2C9j
		mov	byte ptr [eax],	0
		add	eax, 1
		xor	ecx, ecx
		mov	[ebx+1ACh], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_48], eax ;	int
		mov	eax, [ebx+1B0h]
		mov	[esp+4Ch+var_4C], eax ;	void *
		mov	eax, ebx
		call	_addBinding
		test	eax, eax
		jnz	short loc_64202DF4
		mov	eax, [ebx+1B0h]
		mov	[ebx+1ACh], eax
		cmp	byte ptr [esi],	0
		jz	loc_64202D18
		add	esi, 1
		movzx	eax, byte ptr [esi]
		mov	edi, esi
		jmp	loc_64202CB2
; ---------------------------------------------------------------------------
		align 10h

loc_64202E60:				; CODE XREF: _setContext+182j
		mov	eax, [ebx+1ACh]
		movzx	ecx, byte ptr [esi]
		jmp	loc_64202DC5
; ---------------------------------------------------------------------------
		align 10h

loc_64202E70:				; CODE XREF: _setContext+5Dj
		mov	eax, [esp+4Ch+var_34]
		call	_poolGrow
		test	al, al
		jz	loc_64202DF4
		mov	eax, [ebx+1ACh]
		jmp	loc_64202CD3
; ---------------------------------------------------------------------------
		align 10h

loc_64202E90:				; CODE XREF: _setContext+C5j
		mov	eax, [esp+4Ch+var_34]
		call	_poolGrow
		test	al, al
		jz	loc_64202DF4
		mov	edx, [ebx+1ACh]
		movzx	eax, byte ptr [edi]
		jmp	loc_64202D3B
; ---------------------------------------------------------------------------

loc_64202EAF:				; CODE XREF: _setContext+FBj
		mov	eax, [esp+4Ch+var_34]
		call	_poolGrow
		test	al, al
		jz	loc_64202DF4
		mov	ecx, [ebx+1ACh]
		jmp	loc_64202D71
; ---------------------------------------------------------------------------

loc_64202ECB:				; CODE XREF: _setContext+135j
		mov	ecx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_20], edx
		mov	eax, [ecx+0Ch]
		mov	edx, ecx
		jmp	short loc_64202EE3
; ---------------------------------------------------------------------------
		align 10h

loc_64202EE0:				; CODE XREF: _setContext+286j
		add	esi, 1

loc_64202EE3:				; CODE XREF: _setContext+268j
		cmp	[edx+8], eax
		jz	short loc_64202F3E

loc_64202EE8:				; CODE XREF: _setContext+2E4j
		movzx	ecx, byte ptr [esi]
		mov	[eax], cl
		add	eax, 1
		mov	[edx+0Ch], eax
		cmp	byte ptr [esi],	0
		jnz	short loc_64202EE0
		mov	eax, [ebp+60h]
		mov	ecx, [ebp+5Ch]
		mov	edx, [esp+4Ch+var_20]
		test	eax, eax
		mov	[ebp+60h], ecx
		mov	[edx], eax
		jz	loc_64202DF4
		mov	eax, [ebx+1B0h]
		jmp	loc_64202DAB
; ---------------------------------------------------------------------------

loc_64202F1A:				; CODE XREF: _setContext+198j
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_38], edx
		call	_poolGrow
		mov	edx, [esp+4Ch+var_38]
		test	al, al
		jz	loc_64202DF4
		mov	eax, [ebx+1ACh]
		jmp	loc_64202E0E
; ---------------------------------------------------------------------------

loc_64202F3E:				; CODE XREF: _setContext+276j
		mov	eax, edx
		mov	[esp+4Ch+var_38], edx
		call	_poolGrow
		mov	edx, [esp+4Ch+var_38]
		test	al, al
		jz	short loc_64202F56
		mov	eax, [edx+0Ch]
		jmp	short loc_64202EE8
; ---------------------------------------------------------------------------

loc_64202F56:				; CODE XREF: _setContext+2DFj
		mov	edx, [esp+4Ch+var_20]
		xor	eax, eax
		mov	dword ptr [edx], 0
		jmp	loc_64202DF6
_setContext	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_startParsing	proc near		; CODE XREF: _XML_ParseBuffer+100p
					; _XML_Parse+72p ...

_Time		= dword	ptr -1Ch

		push	ebx
		mov	ebx, eax
		sub	esp, 18h
		mov	edx, [eax+1F0h]
		test	edx, edx
		jz	short loc_64202FA3

loc_64202F80:				; CODE XREF: _startParsing+5Cj
		cmp	byte ptr [ebx+0ECh], 0
		jnz	short loc_64202F93
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_64202F93:				; CODE XREF: _startParsing+17j
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		mov	edx, offset _implicitContext ; "xml=http://www.w3.org/XML/1998/namespac"...
		jmp	_setContext
; ---------------------------------------------------------------------------

loc_64202FA3:				; CODE XREF: _startParsing+Ej
		mov	[esp+1Ch+_Time], 0 ; _Time
		call	__time32
		xor	edx, edx
		cmp	eax, 0FFFFFFFFh
		setnb	dl
		add	eax, edx
		mov	[esp+1Ch+_Time], eax ; unsigned	int
		call	_srand
		call	_rand
		mov	[ebx+1F0h], eax
		jmp	short loc_64202F80
_startParsing	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. XML_ParseBuffer

; =============== S U B	R O U T	I N E =======================================


		public _XML_ParseBuffer
_XML_ParseBuffer proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], esi
		mov	esi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_4], edi
		mov	edi, [esp+2Ch+arg_8]
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	loc_64203110
		cmp	eax, 3
		jz	loc_642030F0
		test	eax, eax
		jz	loc_642030C0

loc_6420300B:				; CODE XREF: _XML_ParseBuffer+F8j
					; _XML_ParseBuffer+107j
		mov	eax, [ebx+1Ch]
		mov	ecx, edi
		mov	edx, [ebx+18h]
		add	[ebx+24h], esi
		mov	[ebx+1E4h], cl
		add	eax, esi
		lea	ecx, [ebx+18h]
		mov	dword ptr [ebx+1E0h], 1
		mov	[ebx+128h], edx
		mov	[ebx+1Ch], eax
		mov	[ebx+28h], eax
		mov	[esp+2Ch+var_20], ecx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+118h]
		test	eax, eax
		mov	[ebx+11Ch], eax
		jnz	loc_64203150
		mov	edx, [ebx+1E0h]
		cmp	edx, 1
		jbe	loc_64203130
		cmp	edx, 3
		mov	eax, 2
		jz	short loc_64203078

loc_64203073:				; CODE XREF: _XML_ParseBuffer+162j
		mov	eax, 1

loc_64203078:				; CODE XREF: _XML_ParseBuffer+A1j
		lea	ecx, [ebx+198h]
		mov	edx, [ebx+90h]
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, [ebx+18h]
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_24], ecx
		mov	ecx, [ebx+128h]
		mov	[esp+2Ch+var_2C], edx
		mov	[esp+2Ch+var_28], ecx
		call	dword ptr [edx+34h]
		mov	edx, [ebx+18h]
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+128h], edx
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_642030C0:				; CODE XREF: _XML_ParseBuffer+35j
		mov	ecx, [ebx+1DCh]
		test	ecx, ecx
		jnz	loc_6420300B
		mov	eax, ebx
		call	_startParsing
		test	al, al
		jnz	loc_6420300B
		mov	dword ptr [ebx+11Ch], 1
		xor	eax, eax
		jmp	short loc_642030FC
; ---------------------------------------------------------------------------
		align 10h

loc_642030F0:				; CODE XREF: _XML_ParseBuffer+2Dj
		mov	dword ptr [ebx+11Ch], 21h
		xor	eax, eax

loc_642030FC:				; CODE XREF: _XML_ParseBuffer+119j
					; _XML_ParseBuffer+177j
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64203110:				; CODE XREF: _XML_ParseBuffer+24j
		mov	dword ptr [ebx+11Ch], 24h
		xor	eax, eax
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64203130:				; CODE XREF: _XML_ParseBuffer+93j
		test	edi, edi
		jz	loc_64203073
		mov	dword ptr [ebx+1E0h], 2
		mov	eax, 1
		jmp	short loc_642030FC
; ---------------------------------------------------------------------------
		align 10h

loc_64203150:				; CODE XREF: _XML_ParseBuffer+84j
		mov	eax, [ebx+120h]
		mov	dword ptr [ebx+118h], offset _errorProcessor
		mov	[ebx+124h], eax
		xor	eax, eax
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
_XML_ParseBuffer endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_setElementTypePrefix proc near		; CODE XREF: _storeAtts+6C5p
					; _getElementType+F7p

var_3C		= dword	ptr -3Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		mov	ebp, eax
		push	edi
		mov	edi, edx
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [edx]
		mov	ebx, [eax+164h]
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	loc_6420326A
		lea	edx, [ebx+50h]
		mov	[esp+3Ch+var_24], edx
		lea	edx, [ebx+3Ch]
		mov	[esp+3Ch+var_20], edx
		jmp	short loc_642031BE
; ---------------------------------------------------------------------------
		align 10h

loc_642031B0:				; CODE XREF: _setElementTypePrefix+40j
		add	esi, 1
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	loc_6420326A

loc_642031BE:				; CODE XREF: _setElementTypePrefix+2Cj
					; _setElementTypePrefix+E4j
		cmp	al, 3Ah
		jnz	short loc_642031B0
		mov	edx, [edi]
		cmp	edx, esi
		jz	loc_6420327F
		mov	eax, [ebx+5Ch]
		mov	[esp+3Ch+var_28], edi
		mov	edi, esi
		mov	esi, ebx
		mov	ebx, edx
		jmp	short loc_642031F2
; ---------------------------------------------------------------------------
		align 10h

loc_642031E0:				; CODE XREF: _setElementTypePrefix+75j
					; _setElementTypePrefix+87j
		movzx	edx, byte ptr [ebx]
		add	ebx, 1
		mov	[eax], dl
		add	eax, 1
		cmp	ebx, edi
		mov	[esi+5Ch], eax
		jz	short loc_64203220

loc_642031F2:				; CODE XREF: _setElementTypePrefix+59j
		cmp	[esi+58h], eax
		jnz	short loc_642031E0
		mov	eax, [esp+3Ch+var_24]
		call	_poolGrow
		test	al, al
		jz	short loc_64203216
		mov	eax, [esi+5Ch]
		jmp	short loc_642031E0
; ---------------------------------------------------------------------------

loc_64203209:				; CODE XREF: _setElementTypePrefix+ABj
		mov	eax, [esp+3Ch+var_24]
		call	_poolGrow
		test	al, al
		jnz	short loc_64203284

loc_64203216:				; CODE XREF: _setElementTypePrefix+82j
					; _setElementTypePrefix+CDj
		add	esp, 2Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64203220:				; CODE XREF: _setElementTypePrefix+70j
		mov	ebx, esi
		mov	esi, edi
		mov	edi, [esp+3Ch+var_28]

loc_64203228:				; CODE XREF: _setElementTypePrefix+102j
		cmp	[ebx+58h], eax
		jz	short loc_64203209

loc_6420322D:				; CODE XREF: _setElementTypePrefix+107j
		mov	byte ptr [eax],	0
		mov	ecx, [ebx+60h]
		add	eax, 1
		mov	edx, [esp+3Ch+var_20]
		mov	[ebx+5Ch], eax
		mov	eax, ebp
		mov	[esp+3Ch+var_3C], 8 ; size_t
		call	_lookup
		test	eax, eax
		jz	short loc_64203216
		mov	edx, [ebx+60h]
		cmp	[eax], edx
		jz	short loc_64203277
		mov	[ebx+5Ch], edx

loc_64203259:				; CODE XREF: _setElementTypePrefix+FDj
		add	esi, 1
		mov	[edi+4], eax
		movzx	eax, byte ptr [esi]
		test	al, al
		jnz	loc_642031BE

loc_6420326A:				; CODE XREF: _setElementTypePrefix+18j
					; _setElementTypePrefix+38j
		add	esp, 2Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64203277:				; CODE XREF: _setElementTypePrefix+D4j
		mov	edx, [ebx+5Ch]
		mov	[ebx+60h], edx
		jmp	short loc_64203259
; ---------------------------------------------------------------------------

loc_6420327F:				; CODE XREF: _setElementTypePrefix+46j
		mov	eax, [ebx+5Ch]
		jmp	short loc_64203228
; ---------------------------------------------------------------------------

loc_64203284:				; CODE XREF: _setElementTypePrefix+94j
		mov	eax, [ebx+5Ch]
		jmp	short loc_6420322D
_setElementTypePrefix endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_handleUnknownEncoding proc near	; CODE XREF: _processXmlDecl+3DFp
					; _prologInitProcessor+C8p ...

var_42C		= dword	ptr -42Ch
var_428		= dword	ptr -428h
var_424		= dword	ptr -424h
var_420		= dword	ptr -420h
var_418		= byte ptr -418h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 420h
		mov	ecx, [eax+7Ch]
		test	ecx, ecx
		jz	short loc_64203317
		xor	eax, eax
		lea	esi, [esp+42Ch+var_418]

loc_642032A8:				; CODE XREF: _handleUnknownEncoding+27j
		mov	dword ptr [esi+eax*4], 0FFFFFFFFh
		add	eax, 1
		cmp	eax, 100h
		jnz	short loc_642032A8
		mov	[esp+42Ch+var_18], 0
		mov	[esp+42Ch+var_424], esi
		mov	[esp+42Ch+var_428], edx
		mov	eax, [ebx+0F8h]
		mov	[esp+42Ch+var_14], 0
		mov	[esp+42Ch+var_10], 0
		mov	[esp+42Ch+var_42C], eax
		call	ecx
		test	eax, eax
		jnz	short loc_64203326

loc_642032F1:				; CODE XREF: _handleUnknownEncoding+E1j
		mov	eax, [esp+42Ch+var_10]
		test	eax, eax
		jz	short loc_64203317
		mov	edx, [esp+42Ch+var_18]
		mov	[esp+42Ch+var_42C], edx
		call	eax
		mov	eax, 12h

loc_6420330D:				; CODE XREF: _handleUnknownEncoding+109j
					; _handleUnknownEncoding+119j ...
		add	esp, 420h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_64203317:				; CODE XREF: _handleUnknownEncoding+10j
					; _handleUnknownEncoding+6Aj
		add	esp, 420h
		mov	eax, 12h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_64203326:				; CODE XREF: _handleUnknownEncoding+5Fj
		mov	edi, [ebx+0Ch]
		call	_XmlSizeOfUnknownEncoding
		mov	[esp+42Ch+var_42C], eax
		call	edi
		test	eax, eax
		mov	[ebx+0F0h], eax
		jz	short loc_6420339E
		cmp	byte ptr [ebx+0ECh], 0
		mov	edx, offset _XmlInitUnknownEncodingNS
		jnz	short loc_64203350
		mov	edx, offset _XmlInitUnknownEncoding

loc_64203350:				; CODE XREF: _handleUnknownEncoding+B9j
		mov	ecx, [esp+42Ch+var_18]
		mov	[esp+42Ch+var_428], esi
		mov	[esp+42Ch+var_42C], eax
		mov	[esp+42Ch+var_420], ecx
		mov	ecx, [esp+42Ch+var_14]
		mov	[esp+42Ch+var_424], ecx
		call	edx ; _XmlInitUnknownEncodingNS
		test	eax, eax
		jz	loc_642032F1
		mov	edx, [esp+42Ch+var_18]
		mov	[ebx+90h], eax
		xor	eax, eax
		mov	[ebx+0F4h], edx
		mov	edx, [esp+42Ch+var_10]
		mov	[ebx+0FCh], edx
		jmp	loc_6420330D
; ---------------------------------------------------------------------------

loc_6420339E:				; CODE XREF: _handleUnknownEncoding+ABj
		mov	edx, [esp+42Ch+var_10]
		mov	al, 1
		test	edx, edx
		jz	loc_6420330D
		mov	eax, [esp+42Ch+var_18]
		mov	[esp+42Ch+var_42C], eax
		call	edx
		mov	eax, 1
		jmp	loc_6420330D
_handleUnknownEncoding endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. XML_ParserFree

; =============== S U B	R O U T	I N E =======================================


		public _XML_ParserFree
_XML_ParserFree	proc near		; CODE XREF: _parserCreate+3D3p
					; _XML_ExternalEntityParserCreate+5E1p

var_3C		= dword	ptr -3Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_0]
		test	edi, edi
		jz	loc_642037D3
		mov	eax, [edi+16Ch]
		mov	ebp, eax
		test	ebp, ebp
		mov	[esp+3Ch+var_20], eax
		jz	short loc_6420343B

loc_642033F3:				; CODE XREF: _XML_ParserFree+69j
					; _XML_ParserFree+7Fj
		mov	ecx, [ebp+0]
		mov	eax, [ebp+24h]
		mov	[esp+3Ch+var_20], ecx
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	ebx, [ebp+2Ch]
		test	ebx, ebx
		jnz	short loc_64203412
		jmp	short loc_64203428
; ---------------------------------------------------------------------------
		align 10h

loc_64203410:				; CODE XREF: _XML_ParserFree+56j
		mov	ebx, esi

loc_64203412:				; CODE XREF: _XML_ParserFree+38j
		mov	esi, [ebx+4]
		mov	eax, [ebx+10h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [edi+14h]
		test	esi, esi
		jnz	short loc_64203410

loc_64203428:				; CODE XREF: _XML_ParserFree+3Aj
		mov	[esp+3Ch+var_3C], ebp
		nop
		lea	esi, [esi+0]
		call	dword ptr [edi+14h]
		mov	ebp, [esp+3Ch+var_20]
		test	ebp, ebp
		jnz	short loc_642033F3

loc_6420343B:				; CODE XREF: _XML_ParserFree+21j
		mov	ebp, [edi+170h]
		test	ebp, ebp
		jz	short loc_64203451
		mov	dword ptr [edi+170h], 0
		jmp	short loc_642033F3
; ---------------------------------------------------------------------------

loc_64203451:				; CODE XREF: _XML_ParserFree+73j
		mov	ebx, [edi+12Ch]
		jmp	short loc_64203469
; ---------------------------------------------------------------------------
		align 10h

loc_64203460:				; CODE XREF: _XML_ParserFree+9Dj
					; _XML_ParserFree+B3j
		mov	ebx, [eax+8]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]

loc_64203469:				; CODE XREF: _XML_ParserFree+87j
		test	ebx, ebx
		mov	eax, ebx
		jnz	short loc_64203460
		mov	eax, [edi+130h]
		test	eax, eax
		jz	short loc_64203485
		mov	dword ptr [edi+130h], 0
		jmp	short loc_64203460
; ---------------------------------------------------------------------------

loc_64203485:				; CODE XREF: _XML_ParserFree+A7j
		mov	ebx, [edi+178h]
		test	ebx, ebx
		jnz	short loc_64203493
		jmp	short loc_642034A9
; ---------------------------------------------------------------------------

loc_64203491:				; CODE XREF: _XML_ParserFree+D7j
		mov	ebx, esi

loc_64203493:				; CODE XREF: _XML_ParserFree+BDj
		mov	esi, [ebx+4]
		mov	eax, [ebx+10h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [edi+14h]
		test	esi, esi
		jnz	short loc_64203491

loc_642034A9:				; CODE XREF: _XML_ParserFree+BFj
		mov	ebx, [edi+174h]
		test	ebx, ebx
		jnz	short loc_642034B7
		jmp	short loc_642034CD
; ---------------------------------------------------------------------------

loc_642034B5:				; CODE XREF: _XML_ParserFree+FBj
		mov	ebx, esi

loc_642034B7:				; CODE XREF: _XML_ParserFree+E1j
		mov	esi, [ebx+4]
		mov	eax, [ebx+10h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [edi+14h]
		test	esi, esi
		jnz	short loc_642034B5

loc_642034CD:				; CODE XREF: _XML_ParserFree+E3j
		mov	eax, [edi+1A0h]
		lea	esi, [edi+1A0h]
		test	eax, eax
		jnz	short loc_642034E2
		jmp	short loc_642034F1
; ---------------------------------------------------------------------------
		align 10h

loc_642034E0:				; CODE XREF: _XML_ParserFree+11Fj
		mov	eax, ebx

loc_642034E2:				; CODE XREF: _XML_ParserFree+10Bj
		mov	ebx, [eax]
		mov	edx, [esi+14h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		test	ebx, ebx
		jnz	short loc_642034E0

loc_642034F1:				; CODE XREF: _XML_ParserFree+10Dj
		mov	eax, [edi+1A4h]
		test	eax, eax
		jnz	short loc_64203502
		jmp	short loc_64203511
; ---------------------------------------------------------------------------
		align 10h

loc_64203500:				; CODE XREF: _XML_ParserFree+13Fj
		mov	eax, ebx

loc_64203502:				; CODE XREF: _XML_ParserFree+129j
		mov	ebx, [eax]
		mov	edx, [esi+14h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		test	ebx, ebx
		jnz	short loc_64203500

loc_64203511:				; CODE XREF: _XML_ParserFree+12Bj
		mov	eax, [edi+1B8h]
		lea	esi, [edi+1B8h]
		test	eax, eax
		jnz	short loc_64203525
		jmp	short loc_64203534
; ---------------------------------------------------------------------------

loc_64203523:				; CODE XREF: _XML_ParserFree+162j
		mov	eax, ebx

loc_64203525:				; CODE XREF: _XML_ParserFree+14Fj
		mov	ebx, [eax]
		mov	edx, [esi+14h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		test	ebx, ebx
		jnz	short loc_64203523

loc_64203534:				; CODE XREF: _XML_ParserFree+151j
		mov	eax, [edi+1BCh]
		test	eax, eax
		jnz	short loc_64203544
		xchg	ax, ax
		jmp	short loc_64203553
; ---------------------------------------------------------------------------

loc_64203542:				; CODE XREF: _XML_ParserFree+181j
		mov	eax, ebx

loc_64203544:				; CODE XREF: _XML_ParserFree+16Cj
		mov	ebx, [eax]
		mov	edx, [esi+14h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		test	ebx, ebx
		jnz	short loc_64203542

loc_64203553:				; CODE XREF: _XML_ParserFree+170j
		cmp	byte ptr [edi+1E8h], 0
		jnz	loc_6420376C
		mov	ebx, [edi+164h]
		test	ebx, ebx
		jz	loc_6420376C
		lea	eax, [edi+0Ch]
		mov	esi, [ebx+14h]
		mov	[esp+3Ch+var_20], eax
		mov	eax, [ebx+1Ch]
		mov	ebp, [edi+1DCh]
		lea	edx, [esi+eax*4]
		jmp	short loc_64203589
; ---------------------------------------------------------------------------

loc_64203586:				; CODE XREF: _XML_ParserFree+1C1j
					; _XML_ParserFree+1C8j	...
		add	esi, 4

loc_64203589:				; CODE XREF: _XML_ParserFree+1B4j
		cmp	edx, esi
		jz	short loc_642035B1
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_64203586
		mov	ecx, [eax+10h]
		test	ecx, ecx
		jz	short loc_64203586
		mov	eax, [eax+14h]
		mov	ecx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_24], edx
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ecx+8]
		mov	edx, [esp+3Ch+var_24]
		jmp	short loc_64203586
; ---------------------------------------------------------------------------

loc_642035B1:				; CODE XREF: _XML_ParserFree+1BBj
		cmp	dword ptr [ebx+8], 0
		jz	short loc_642035CF
		xor	esi, esi

loc_642035B9:				; CODE XREF: _XML_ParserFree+1FDj
		mov	edx, [ebx]
		mov	eax, [ebx+10h]
		mov	edx, [edx+esi*4]
		add	esi, 1
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [eax+8]
		cmp	esi, [ebx+8]
		jb	short loc_642035B9

loc_642035CF:				; CODE XREF: _XML_ParserFree+1E5j
		mov	eax, [ebx+10h]
		mov	edx, [ebx]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [eax+8]
		lea	eax, [ebx+84h]
		cmp	dword ptr [ebx+8Ch], 0
		jz	short loc_64203609
		xor	esi, esi

loc_642035EB:				; CODE XREF: _XML_ParserFree+237j
		mov	ecx, [eax]
		mov	edx, [eax+10h]
		mov	[esp+3Ch+var_24], eax
		mov	ecx, [ecx+esi*4]
		add	esi, 1
		mov	[esp+3Ch+var_3C], ecx
		call	dword ptr [edx+8]
		mov	eax, [esp+3Ch+var_24]
		cmp	esi, [eax+8]
		jb	short loc_642035EB

loc_64203609:				; CODE XREF: _XML_ParserFree+217j
		mov	eax, [ebx+94h]
		mov	edx, [ebx+84h]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [eax+8]
		lea	eax, [ebx+14h]
		cmp	dword ptr [ebx+1Ch], 0
		jz	short loc_64203644
		xor	esi, esi

loc_64203626:				; CODE XREF: _XML_ParserFree+272j
		mov	ecx, [eax]
		mov	edx, [eax+10h]
		mov	[esp+3Ch+var_24], eax
		mov	ecx, [ecx+esi*4]
		add	esi, 1
		mov	[esp+3Ch+var_3C], ecx
		call	dword ptr [edx+8]
		mov	eax, [esp+3Ch+var_24]
		cmp	esi, [eax+8]
		jb	short loc_64203626

loc_64203644:				; CODE XREF: _XML_ParserFree+252j
		mov	eax, [ebx+24h]
		mov	edx, [ebx+14h]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [eax+8]
		lea	eax, [ebx+28h]
		cmp	dword ptr [ebx+30h], 0
		jz	short loc_64203679
		xor	esi, esi

loc_6420365B:				; CODE XREF: _XML_ParserFree+2A7j
		mov	ecx, [eax]
		mov	edx, [eax+10h]
		mov	[esp+3Ch+var_24], eax
		mov	ecx, [ecx+esi*4]
		add	esi, 1
		mov	[esp+3Ch+var_3C], ecx
		call	dword ptr [edx+8]
		mov	eax, [esp+3Ch+var_24]
		cmp	esi, [eax+8]
		jb	short loc_6420365B

loc_64203679:				; CODE XREF: _XML_ParserFree+287j
		mov	eax, [ebx+38h]
		mov	edx, [ebx+28h]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [eax+8]
		lea	eax, [ebx+3Ch]
		cmp	dword ptr [ebx+44h], 0
		jz	short loc_642036AE
		xor	esi, esi

loc_64203690:				; CODE XREF: _XML_ParserFree+2DCj
		mov	ecx, [eax]
		mov	edx, [eax+10h]
		mov	[esp+3Ch+var_24], eax
		mov	ecx, [ecx+esi*4]
		add	esi, 1
		mov	[esp+3Ch+var_3C], ecx
		call	dword ptr [edx+8]
		mov	eax, [esp+3Ch+var_24]
		cmp	esi, [eax+8]
		jb	short loc_64203690

loc_642036AE:				; CODE XREF: _XML_ParserFree+2BCj
		mov	eax, [ebx+4Ch]
		mov	edx, [ebx+3Ch]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [eax+8]
		lea	eax, [ebx+50h]
		mov	[esp+3Ch+var_20], eax
		mov	eax, [ebx+50h]
		test	eax, eax
		jnz	short loc_642036D2
		jmp	short loc_642036E5
; ---------------------------------------------------------------------------
		align 10h

loc_642036D0:				; CODE XREF: _XML_ParserFree+313j
		mov	eax, esi

loc_642036D2:				; CODE XREF: _XML_ParserFree+2F6j
		mov	ecx, [esp+3Ch+var_20]
		mov	esi, [eax]
		mov	edx, [ecx+14h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		test	esi, esi
		jnz	short loc_642036D0

loc_642036E5:				; CODE XREF: _XML_ParserFree+2F8j
		mov	eax, [ebx+54h]
		test	eax, eax
		jnz	short loc_642036F4
		lea	esi, [esi+0]
		jmp	short loc_64203707
; ---------------------------------------------------------------------------

loc_642036F2:				; CODE XREF: _XML_ParserFree+335j
		mov	eax, esi

loc_642036F4:				; CODE XREF: _XML_ParserFree+31Aj
		mov	ecx, [esp+3Ch+var_20]
		mov	esi, [eax]
		mov	edx, [ecx+14h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		test	esi, esi
		jnz	short loc_642036F2

loc_64203707:				; CODE XREF: _XML_ParserFree+320j
		lea	eax, [ebx+68h]
		mov	[esp+3Ch+var_20], eax
		mov	eax, [ebx+68h]
		test	eax, eax
		jnz	short loc_64203719
		jmp	short loc_6420372C
; ---------------------------------------------------------------------------

loc_64203717:				; CODE XREF: _XML_ParserFree+35Aj
		mov	eax, esi

loc_64203719:				; CODE XREF: _XML_ParserFree+343j
		mov	ecx, [esp+3Ch+var_20]
		mov	esi, [eax]
		mov	edx, [ecx+14h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		test	esi, esi
		jnz	short loc_64203717

loc_6420372C:				; CODE XREF: _XML_ParserFree+345j
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jnz	short loc_64203737
		jmp	short loc_6420374A
; ---------------------------------------------------------------------------

loc_64203735:				; CODE XREF: _XML_ParserFree+378j
		mov	eax, esi

loc_64203737:				; CODE XREF: _XML_ParserFree+361j
		mov	ecx, [esp+3Ch+var_20]
		mov	esi, [eax]
		mov	edx, [ecx+14h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		test	esi, esi
		jnz	short loc_64203735

loc_6420374A:				; CODE XREF: _XML_ParserFree+363j
		test	ebp, ebp
		jnz	short loc_64203766
		mov	eax, [ebx+0B8h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	eax, [ebx+0A4h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]

loc_64203766:				; CODE XREF: _XML_ParserFree+37Cj
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [edi+14h]

loc_6420376C:				; CODE XREF: _XML_ParserFree+18Aj
					; _XML_ParserFree+198j
		mov	eax, [edi+188h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+1D0h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+8]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+2Ch]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+18Ch]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+0F0h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+0FCh]
		test	eax, eax
		jz	short loc_642037C3
		mov	edx, [edi+0F4h]
		mov	[esp+3Ch+var_3C], edx
		call	eax

loc_642037C3:				; CODE XREF: _XML_ParserFree+3E6j
		mov	[esp+3Ch+arg_0], edi
		mov	eax, [edi+14h]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_642037D3:				; CODE XREF: _XML_ParserFree+Dj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_XML_ParserFree	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_build_node	proc near		; CODE XREF: _build_node+52Fp
					; _doProlog+1C47p

var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	[esp+0DCh+var_C0], eax
		mov	eax, [eax+164h]
		imul	edx, 1Ch
		mov	[esp+0DCh+var_80], ecx
		mov	ebx, [esp+0DCh+var_80]
		mov	esi, [esp+0DCh+var_80]
		mov	[esp+0DCh+var_20], eax
		mov	eax, [eax+0A4h]
		mov	ecx, [eax+edx]
		mov	[ebx], ecx
		mov	ebx, [eax+edx+4]
		cmp	ecx, 4
		mov	[esi+4], ebx
		jz	loc_642040B9
		mov	edi, [esp+0DCh+arg_0]
		mov	ecx, [eax+edx+14h]
		mov	esi, [esp+0DCh+var_80]
		mov	[esp+0DCh+var_5C], 0
		mov	ebx, [edi]
		mov	[esp+0DCh+var_34], 0
		mov	[esi+0Ch], ecx
		imul	ecx, 14h
		mov	eax, [eax+edx+0Ch]
		mov	[esi+10h], ebx
		add	[edi], ecx

loc_6420385B:				; CODE XREF: _build_node+895j
		mov	ebx, [esp+0DCh+var_80]
		mov	esi, [esp+0DCh+var_34]
		cmp	esi, [ebx+0Ch]
		jnb	loc_642040A7
		mov	ebx, [esp+0DCh+var_C0]
		imul	eax, 1Ch
		mov	edx, [esp+0DCh+var_80]
		mov	ecx, [esp+0DCh+var_5C]
		mov	ebx, [ebx+164h]
		mov	[esp+0DCh+var_60], eax
		mov	esi, [esp+0DCh+var_60]
		add	ecx, [edx+10h]
		mov	eax, [ebx+0A4h]
		mov	[esp+0DCh+var_84], ecx
		mov	edi, [esp+0DCh+var_84]
		mov	[esp+0DCh+var_24], ebx
		mov	edx, [eax+esi]
		mov	[ecx], edx
		mov	ecx, [eax+esi+4]
		cmp	edx, 4
		mov	[edi+4], ecx
		jz	loc_6420407A
		mov	edi, [esp+0DCh+var_60]
		mov	ecx, [esp+0DCh+var_84]
		mov	ebx, [esp+0DCh+arg_0]
		mov	esi, [esp+0DCh+var_84]
		mov	edx, [eax+edi+14h]
		mov	[esp+0DCh+var_58], 0
		mov	[esp+0DCh+var_38], 0
		mov	[ecx+0Ch], edx
		mov	ecx, [ebx]
		imul	edx, 14h
		mov	eax, [eax+edi+0Ch]
		mov	[esi+10h], ecx
		add	[ebx], edx

loc_642038FA:				; CODE XREF: _build_node+95Dj
		mov	esi, [esp+0DCh+var_84]
		mov	edi, [esp+0DCh+var_38]
		cmp	edi, [esi+0Ch]
		jnb	loc_64204049
		mov	ecx, [esp+0DCh+var_C0]
		imul	eax, 1Ch
		mov	edi, [esp+0DCh+var_84]
		mov	edx, [esp+0DCh+var_58]
		mov	ecx, [ecx+164h]
		mov	[esp+0DCh+var_64], eax
		mov	ebx, [esp+0DCh+var_64]
		add	edx, [edi+10h]
		mov	eax, [ecx+0A4h]
		mov	[esp+0DCh+var_88], edx
		mov	esi, [esp+0DCh+var_88]
		mov	[esp+0DCh+var_28], ecx
		mov	edx, [eax+ebx]
		mov	ecx, [eax+ebx+4]
		cmp	edx, 4
		mov	[esi], edx
		mov	[esi+4], ecx
		jz	loc_64204142
		mov	esi, [esp+0DCh+var_64]
		mov	ebx, [esp+0DCh+arg_0]
		mov	edi, [esp+0DCh+var_88]
		mov	[esp+0DCh+var_54], 0
		mov	edx, [eax+esi+14h]
		mov	ecx, [ebx]
		mov	[esp+0DCh+var_3C], 0
		mov	[edi+0Ch], edx
		imul	edx, 14h
		mov	eax, [eax+esi+0Ch]
		mov	[edi+10h], ecx
		add	[ebx], edx

loc_64203995:				; CODE XREF: _build_node+864j
		mov	edi, [esp+0DCh+var_88]
		mov	edx, [esp+0DCh+var_3C]
		cmp	edx, [edi+0Ch]
		jnb	loc_64204111
		mov	edx, [esp+0DCh+var_C0]
		imul	eax, 1Ch
		mov	esi, [esp+0DCh+var_88]
		mov	edi, [esp+0DCh+var_54]
		mov	edx, [edx+164h]
		mov	[esp+0DCh+var_68], eax
		mov	ecx, [esp+0DCh+var_68]
		add	edi, [esi+10h]
		mov	eax, [edx+0A4h]
		mov	[esp+0DCh+var_2C], edx
		mov	ebx, ecx
		mov	[esp+0DCh+var_8C], edi
		mov	edx, [eax+ecx]
		mov	ecx, [eax+ecx+4]
		cmp	edx, 4
		mov	[edi], edx
		mov	[edi+4], ecx
		jz	loc_6420416F
		mov	ecx, [esp+0DCh+var_68]
		mov	esi, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+var_8C]
		mov	edi, [esp+0DCh+var_68]
		mov	edx, [eax+ecx+14h]
		mov	ecx, [esi]
		mov	[esp+0DCh+var_50], 0
		mov	[esp+0DCh+var_40], 0
		mov	[ebx+0Ch], edx
		imul	edx, 14h
		mov	eax, [eax+edi+0Ch]
		mov	[ebx+10h], ecx
		add	[esi], edx

loc_64203A32:				; CODE XREF: _build_node+7F2j
		mov	edx, [esp+0DCh+var_8C]
		mov	ecx, [esp+0DCh+var_40]
		cmp	ecx, [edx+0Ch]
		jnb	loc_64204018
		mov	ebx, [esp+0DCh+var_C0]
		imul	eax, 1Ch
		mov	edx, [esp+0DCh+var_8C]
		mov	ecx, [esp+0DCh+var_50]
		mov	ebx, [ebx+164h]
		mov	esi, eax
		add	ecx, [edx+10h]
		mov	[esp+0DCh+var_6C], eax
		mov	edx, [ebx+0A4h]
		mov	[esp+0DCh+var_90], ecx
		mov	edi, [esp+0DCh+var_90]
		mov	[esp+0DCh+var_44], ebx
		mov	eax, [edx+eax]
		mov	[ecx], eax
		mov	ecx, [edx+esi+4]
		cmp	eax, 4
		mov	[edi+4], ecx
		jz	loc_64203FD7
		mov	edi, [esp+0DCh+var_6C]
		mov	ecx, [esp+0DCh+var_90]
		mov	ebx, [esp+0DCh+arg_0]
		mov	esi, [esp+0DCh+var_90]
		mov	eax, [edx+edi+14h]
		mov	[esp+0DCh+var_4C], 0
		mov	[esp+0DCh+var_48], 0
		mov	[ecx+0Ch], eax
		mov	ecx, [ebx]
		imul	eax, 14h
		mov	[esi+10h], ecx
		add	[ebx], eax
		mov	eax, [edx+edi+0Ch]

loc_64203ACF:				; CODE XREF: _build_node+75Fj
		mov	ecx, [esp+0DCh+var_90]
		mov	ebx, [esp+0DCh+var_48]
		cmp	ebx, [ecx+0Ch]
		jnb	loc_64203FA6
		mov	ebx, [esp+0DCh+var_C0]
		imul	eax, 1Ch
		mov	edi, [esp+0DCh+var_90]
		mov	ecx, [esp+0DCh+var_4C]
		mov	ebx, [ebx+164h]
		mov	esi, eax
		add	ecx, [edi+10h]
		mov	[esp+0DCh+var_70], eax
		mov	[esp+0DCh+var_94], ecx
		mov	ecx, [ebx+0A4h]
		mov	edi, [esp+0DCh+var_94]
		mov	[esp+0DCh+var_C4], ebx
		mov	[esp+0DCh+var_30], ebx
		mov	eax, [ecx+eax]
		mov	ebx, [ecx+esi+4]
		cmp	eax, 4
		mov	[edi], eax
		mov	[edi+4], ebx
		jz	loc_64203F44
		mov	ebx, [esp+0DCh+var_70]
		mov	edi, [esp+0DCh+arg_0]
		mov	esi, [esp+0DCh+var_94]
		mov	eax, [ecx+ebx+14h]
		mov	ebx, [edi]
		mov	[esi+0Ch], eax
		imul	eax, 14h
		mov	[esi+10h], ebx
		mov	ebx, [esp+0DCh+var_70]
		add	[edi], eax
		cmp	dword ptr [esi+0Ch], 0
		mov	eax, [ecx+ebx+0Ch]
		jz	loc_64203F1C
		mov	edx, [esp+0DCh+var_C4]
		mov	[esp+0DCh+var_78], 0
		mov	[esp+0DCh+var_74], 0

loc_64203B78:				; CODE XREF: _build_node+6CDj
		imul	eax, 1Ch
		mov	esi, [esp+0DCh+var_94]
		mov	[esp+0DCh+var_98], edx
		mov	edx, [edx+0A4h]
		mov	edi, [esp+0DCh+var_78]
		add	edi, [esi+10h]
		mov	esi, eax
		mov	[esp+0DCh+var_7C], eax
		mov	eax, [edx+eax]
		mov	ebx, [edx+esi+4]
		mov	[esp+0DCh+var_9C], edi
		cmp	eax, 4
		mov	[edi], eax
		mov	[edi+4], ebx
		jz	loc_64203EB2
		mov	ebx, edi
		mov	edi, [esp+0DCh+var_7C]
		mov	esi, [esp+0DCh+arg_0]
		mov	eax, [edx+edi+14h]
		mov	edi, [esp+0DCh+var_9C]
		mov	[ebx+0Ch], eax
		mov	ebx, [esi]
		lea	eax, [eax+eax*4]
		shl	eax, 2
		mov	[edi+10h], ebx
		mov	ebx, [esp+0DCh+var_7C]
		add	[esi], eax
		mov	eax, [edx+ebx+0Ch]
		mov	ebx, [edi+0Ch]
		test	ebx, ebx
		jz	loc_64203E73
		mov	ecx, [esp+0DCh+var_C4]
		mov	[esp+0DCh+var_A4], 0
		mov	[esp+0DCh+var_A0], 0
		nop
		lea	esi, [esi+0]

loc_64203C00:				; CODE XREF: _build_node+629j
		imul	eax, 1Ch
		mov	esi, [esp+0DCh+var_9C]
		mov	[esp+0DCh+var_AC], ecx
		mov	ecx, [ecx+0A4h]
		mov	edi, [esp+0DCh+var_A4]
		add	edi, [esi+10h]
		mov	esi, eax
		mov	[esp+0DCh+var_A8], eax
		mov	eax, [ecx+eax]
		mov	ebx, [ecx+esi+4]
		mov	[esp+0DCh+var_B0], edi
		cmp	eax, 4
		mov	[edi], eax
		mov	[edi+4], ebx
		jz	loc_64203E0E
		mov	esi, [esp+0DCh+var_A8]
		mov	eax, [ecx+esi+14h]
		mov	esi, [esp+0DCh+arg_0]
		mov	[edi+0Ch], eax
		lea	eax, [eax+eax*4]
		mov	ebx, [esi]
		shl	eax, 2
		mov	[edi+10h], ebx
		mov	ebx, [esp+0DCh+var_B0]
		mov	edi, [esp+0DCh+var_A8]
		add	[esi], eax
		mov	ebp, [ebx+0Ch]
		mov	eax, [ecx+edi+0Ch]
		test	ebp, ebp
		jz	loc_64203DD1
		mov	edi, [esp+0DCh+var_C4]
		mov	[esp+0DCh+var_B8], 0
		mov	[esp+0DCh+var_B4], 0

loc_64203C81:				; CODE XREF: _build_node+584j
		imul	eax, 1Ch
		mov	esi, [esp+0DCh+var_B0]
		mov	ebx, [esp+0DCh+var_B8]
		add	ebx, [esi+10h]
		mov	[esp+0DCh+var_BC], eax
		mov	eax, [edi+0A4h]
		mov	esi, [esp+0DCh+var_BC]
		mov	edx, [eax+esi]
		mov	edi, esi
		mov	esi, [eax+esi+4]
		cmp	edx, 4
		mov	[ebx], edx
		mov	[ebx+4], esi
		jz	loc_64203D70
		mov	esi, [esp+0DCh+var_BC]
		mov	edi, [esp+0DCh+arg_0]
		mov	edx, [eax+esi+14h]
		mov	esi, [edi]
		mov	[ebx+0Ch], edx
		lea	edx, [edx+edx*4]
		shl	edx, 2
		mov	[ebx+10h], esi
		add	[edi], edx
		mov	edi, [ebx+0Ch]
		mov	edx, [esp+0DCh+var_BC]
		test	edi, edi
		mov	esi, [eax+edx+0Ch]
		jz	short loc_64203D30
		xor	edi, edi
		xor	ebp, ebp

loc_64203CE6:				; CODE XREF: _build_node+544j
		mov	eax, [esp+0DCh+arg_4]
		add	ebp, 1
		mov	ecx, [ebx+10h]
		mov	edx, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_D8], eax
		mov	eax, [esp+0DCh+var_C0]
		add	ecx, edi
		add	edi, 14h
		mov	[esp+0DCh+var_DC], edx
		mov	edx, esi
		imul	esi, 1Ch
		call	_build_node
		mov	ecx, [esp+0DCh+var_C4]
		add	esi, [ecx+0A4h]
		cmp	ebp, [ebx+0Ch]
		mov	esi, [esi+18h]
		jb	short loc_64203CE6
		mov	esi, [esp+0DCh+var_AC]
		mov	ecx, [esi+0A4h]

loc_64203D30:				; CODE XREF: _build_node+500j
		mov	dword ptr [ebx+8], 0

loc_64203D37:				; CODE XREF: _build_node+5E2j
		mov	edx, [esp+0DCh+var_B0]
		add	[esp+0DCh+var_B4], 1
		mov	edi, [esp+0DCh+var_BC]
		mov	ebx, [esp+0DCh+var_B4]
		add	[esp+0DCh+var_B8], 14h
		cmp	ebx, [edx+0Ch]
		mov	eax, [ecx+edi+18h]
		jnb	short loc_64203DC7
		mov	edi, [esp+0DCh+var_C0]
		mov	edi, [edi+164h]
		mov	[esp+0DCh+var_C4], edi
		jmp	loc_64203C81
; ---------------------------------------------------------------------------
		align 10h

loc_64203D70:				; CODE XREF: _build_node+4CEj
		mov	ecx, [esp+0DCh+arg_4]
		mov	edx, [ecx]
		mov	[ebx+8], edx
		mov	eax, [eax+edi+8]
		mov	edx, [ecx]
		movzx	ecx, byte ptr [eax]
		mov	[edx], cl
		mov	esi, [esp+0DCh+arg_4]
		add	edx, 1
		mov	[esi], edx
		cmp	byte ptr [eax],	0
		jz	short loc_64203DAA

loc_64203D98:				; CODE XREF: _build_node+5C8j
		add	eax, 1
		movzx	ecx, byte ptr [eax]
		mov	[edx], cl
		add	edx, 1
		mov	[esi], edx
		cmp	byte ptr [eax],	0
		jnz	short loc_64203D98

loc_64203DAA:				; CODE XREF: _build_node+5B6j
		mov	edi, [esp+0DCh+var_AC]
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+10h], 0
		mov	ecx, [edi+0A4h]
		jmp	loc_64203D37
; ---------------------------------------------------------------------------

loc_64203DC7:				; CODE XREF: _build_node+574j
		mov	esi, [esp+0DCh+var_98]
		mov	edx, [esi+0A4h]

loc_64203DD1:				; CODE XREF: _build_node+487j
		mov	eax, [esp+0DCh+var_B0]
		mov	dword ptr [eax+8], 0

loc_64203DDC:				; CODE XREF: _build_node+681j
		mov	ebx, [esp+0DCh+var_9C]
		add	[esp+0DCh+var_A0], 1
		mov	ecx, [esp+0DCh+var_A8]
		mov	esi, [esp+0DCh+var_A0]
		add	[esp+0DCh+var_A4], 14h
		cmp	esi, [ebx+0Ch]
		mov	eax, [edx+ecx+18h]
		jnb	short loc_64203E66
		mov	ecx, [esp+0DCh+var_C0]
		mov	ecx, [ecx+164h]
		mov	[esp+0DCh+var_C4], ecx
		jmp	loc_64203C00
; ---------------------------------------------------------------------------

loc_64203E0E:				; CODE XREF: _build_node+451j
		mov	edx, edi
		mov	edi, [esp+0DCh+arg_4]
		mov	eax, [edi]
		mov	[edx+8], eax
		mov	eax, [ecx+esi+8]
		mov	edx, [edi]
		movzx	ecx, byte ptr [eax]
		mov	[edx], cl
		add	edx, 1
		mov	[edi], edx
		cmp	byte ptr [eax],	0
		jz	short loc_64203E45
		mov	ebx, edi

loc_64203E33:				; CODE XREF: _build_node+663j
		add	eax, 1
		movzx	ecx, byte ptr [eax]
		mov	[edx], cl
		add	edx, 1
		mov	[ebx], edx
		cmp	byte ptr [eax],	0
		jnz	short loc_64203E33

loc_64203E45:				; CODE XREF: _build_node+64Fj
		mov	ecx, [esp+0DCh+var_B0]
		mov	ebx, [esp+0DCh+var_98]
		mov	dword ptr [ecx+0Ch], 0
		mov	dword ptr [ecx+10h], 0
		mov	edx, [ebx+0A4h]
		jmp	loc_64203DDC
; ---------------------------------------------------------------------------

loc_64203E66:				; CODE XREF: _build_node+619j
		mov	edi, [esp+0DCh+var_30]
		mov	ecx, [edi+0A4h]

loc_64203E73:				; CODE XREF: _build_node+401j
		mov	ebx, [esp+0DCh+var_9C]
		mov	dword ptr [ebx+8], 0

loc_64203E7E:				; CODE XREF: _build_node+72Aj
		mov	edi, [esp+0DCh+var_94]
		add	[esp+0DCh+var_74], 1
		mov	esi, [esp+0DCh+var_7C]
		mov	edx, [esp+0DCh+var_74]
		add	[esp+0DCh+var_78], 14h
		cmp	edx, [edi+0Ch]
		mov	eax, [ecx+esi+18h]
		jnb	short loc_64203F0F
		mov	ebx, [esp+0DCh+var_C0]
		mov	ebx, [ebx+164h]
		mov	[esp+0DCh+var_C4], ebx
		mov	edx, ebx
		jmp	loc_64203B78
; ---------------------------------------------------------------------------

loc_64203EB2:				; CODE XREF: _build_node+3C9j
		mov	edi, [esp+0DCh+arg_4]
		mov	ecx, [esp+0DCh+var_9C]
		mov	eax, [edi]
		mov	[ecx+8], eax
		mov	eax, [edx+esi+8]
		mov	edx, [edi]
		movzx	ecx, byte ptr [eax]
		mov	[edx], cl
		add	edx, 1
		mov	[edi], edx
		cmp	byte ptr [eax],	0
		jz	short loc_64203EEB
		mov	ebx, edi

loc_64203ED9:				; CODE XREF: _build_node+709j
		add	eax, 1
		movzx	ecx, byte ptr [eax]
		mov	[edx], cl
		add	edx, 1
		mov	[ebx], edx
		cmp	byte ptr [eax],	0
		jnz	short loc_64203ED9

loc_64203EEB:				; CODE XREF: _build_node+6F5j
		mov	ebx, [esp+0DCh+var_9C]
		mov	esi, [esp+0DCh+var_30]
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+10h], 0
		mov	ecx, [esi+0A4h]
		jmp	loc_64203E7E
; ---------------------------------------------------------------------------

loc_64203F0F:				; CODE XREF: _build_node+6BBj
		mov	ecx, [esp+0DCh+var_44]
		mov	edx, [ecx+0A4h]

loc_64203F1C:				; CODE XREF: _build_node+37Ej
		mov	esi, [esp+0DCh+var_94]
		mov	dword ptr [esi+8], 0

loc_64203F27:				; CODE XREF: _build_node+7C4j
		mov	edi, [esp+0DCh+var_70]
		add	[esp+0DCh+var_48], 1
		add	[esp+0DCh+var_4C], 14h
		mov	eax, [edx+edi+18h]
		jmp	loc_64203ACF
; ---------------------------------------------------------------------------

loc_64203F44:				; CODE XREF: _build_node+34Cj
		mov	edx, [esp+0DCh+arg_4]
		mov	eax, [edx]
		mov	[edi+8], eax
		mov	eax, [ecx+esi+8]
		mov	edx, [edx]
		movzx	ecx, byte ptr [eax]
		mov	[edx], cl
		mov	ebx, [esp+0DCh+arg_4]
		add	edx, 1
		mov	[ebx], edx
		cmp	byte ptr [eax],	0
		jz	short loc_64203F85

loc_64203F6C:				; CODE XREF: _build_node+7A3j
		add	eax, 1
		movzx	ecx, byte ptr [eax]
		mov	[edx], cl
		mov	esi, [esp+0DCh+arg_4]
		add	edx, 1
		mov	[esi], edx
		cmp	byte ptr [eax],	0
		jnz	short loc_64203F6C

loc_64203F85:				; CODE XREF: _build_node+78Aj
		mov	edi, [esp+0DCh+var_94]
		mov	eax, [esp+0DCh+var_44]
		mov	dword ptr [edi+0Ch], 0
		mov	dword ptr [edi+10h], 0
		mov	edx, [eax+0A4h]
		jmp	short loc_64203F27
; ---------------------------------------------------------------------------

loc_64203FA6:				; CODE XREF: _build_node+2FDj
		mov	dword ptr [ecx+8], 0

loc_64203FAD:				; CODE XREF: _build_node+836j
		mov	esi, [esp+0DCh+var_2C]
		mov	edi, [esp+0DCh+var_6C]
		add	[esp+0DCh+var_40], 1
		add	[esp+0DCh+var_50], 14h
		mov	eax, [esi+0A4h]
		mov	eax, [eax+edi+18h]
		jmp	loc_64203A32
; ---------------------------------------------------------------------------

loc_64203FD7:				; CODE XREF: _build_node+2ABj
		mov	ecx, [esp+0DCh+arg_4]
		mov	eax, [ecx]
		mov	[edi+8], eax
		mov	edx, [edx+esi+8]
		mov	eax, [ecx]
		jmp	short loc_64203FEE
; ---------------------------------------------------------------------------

loc_64203FEB:				; CODE XREF: _build_node+822j
		add	edx, 1

loc_64203FEE:				; CODE XREF: _build_node+809j
		movzx	ecx, byte ptr [edx]
		mov	[eax], cl
		mov	ebx, [esp+0DCh+arg_4]
		add	eax, 1
		mov	[ebx], eax
		cmp	byte ptr [edx],	0
		jnz	short loc_64203FEB
		mov	esi, [esp+0DCh+var_90]
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+10h], 0
		jmp	short loc_64203FAD
; ---------------------------------------------------------------------------

loc_64204018:				; CODE XREF: _build_node+260j
		mov	dword ptr [edx+8], 0

loc_6420401F:				; CODE XREF: _build_node+9E5j
		mov	ebx, [esp+0DCh+var_28]
		mov	esi, [esp+0DCh+var_68]
		add	[esp+0DCh+var_3C], 1
		add	[esp+0DCh+var_54], 14h
		mov	eax, [ebx+0A4h]
		mov	eax, [eax+esi+18h]
		jmp	loc_64203995
; ---------------------------------------------------------------------------

loc_64204049:				; CODE XREF: _build_node+128j
		mov	dword ptr [esi+8], 0

loc_64204050:				; CODE XREF: _build_node+918j
		mov	edx, [esp+0DCh+var_20]
		mov	ecx, [esp+0DCh+var_60]
		add	[esp+0DCh+var_34], 1
		add	[esp+0DCh+var_5C], 14h
		mov	eax, [edx+0A4h]
		mov	eax, [eax+ecx+18h]
		jmp	loc_6420385B
; ---------------------------------------------------------------------------

loc_6420407A:				; CODE XREF: _build_node+D6j
		mov	ecx, [esp+0DCh+arg_4]
		mov	edx, [ecx]
		mov	[edi+8], edx
		mov	edx, [eax+esi+8]
		mov	eax, [ecx]

loc_6420408C:				; CODE XREF: _build_node+8C5j
		movzx	ecx, byte ptr [edx]
		mov	[eax], cl
		mov	ebx, [esp+0DCh+arg_4]
		add	eax, 1
		mov	[ebx], eax
		cmp	byte ptr [edx],	0
		jz	short loc_642040E6
		add	edx, 1
		jmp	short loc_6420408C
; ---------------------------------------------------------------------------

loc_642040A7:				; CODE XREF: _build_node+89j
		mov	dword ptr [ebx+8], 0

loc_642040AE:				; CODE XREF: _build_node+92Fj
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642040B9:				; CODE XREF: _build_node+3Fj
		mov	edi, [esp+0DCh+arg_4]
		mov	ecx, [edi]
		mov	[esi+8], ecx
		mov	edx, [eax+edx+8]
		mov	eax, [edi]

loc_642040CB:				; CODE XREF: _build_node+904j
		movzx	ecx, byte ptr [edx]
		mov	[eax], cl
		mov	ecx, [esp+0DCh+arg_4]
		add	eax, 1
		mov	[ecx], eax
		cmp	byte ptr [edx],	0
		jz	short loc_642040FD
		add	edx, 1
		jmp	short loc_642040CB
; ---------------------------------------------------------------------------

loc_642040E6:				; CODE XREF: _build_node+8C0j
		mov	esi, [esp+0DCh+var_84]
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+10h], 0
		jmp	loc_64204050
; ---------------------------------------------------------------------------

loc_642040FD:				; CODE XREF: _build_node+8FFj
		mov	ebx, [esp+0DCh+var_80]
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+10h], 0
		jmp	short loc_642040AE
; ---------------------------------------------------------------------------

loc_64204111:				; CODE XREF: _build_node+1C3j
		mov	dword ptr [edi+8], 0

loc_64204118:				; CODE XREF: _build_node+9CEj
		mov	ecx, [esp+0DCh+var_24]
		mov	ebx, [esp+0DCh+var_64]
		add	[esp+0DCh+var_38], 1
		add	[esp+0DCh+var_58], 14h
		mov	eax, [ecx+0A4h]
		mov	eax, [eax+ebx+18h]
		jmp	loc_642038FA
; ---------------------------------------------------------------------------

loc_64204142:				; CODE XREF: _build_node+175j
		mov	edi, [esp+0DCh+arg_4]
		mov	edx, [edi]
		mov	[esi+8], edx
		mov	edx, [eax+ebx+8]
		mov	eax, [edi]

loc_64204154:				; CODE XREF: _build_node+98Dj
		movzx	ecx, byte ptr [edx]
		mov	[eax], cl
		mov	ecx, [esp+0DCh+arg_4]
		add	eax, 1
		mov	[ecx], eax
		cmp	byte ptr [edx],	0
		jz	short loc_6420419C
		add	edx, 1
		jmp	short loc_64204154
; ---------------------------------------------------------------------------

loc_6420416F:				; CODE XREF: _build_node+20Ej
		mov	esi, [esp+0DCh+arg_4]
		mov	edx, [esi]
		mov	[edi+8], edx
		mov	edx, [eax+ebx+8]
		mov	eax, [esi]

loc_64204181:				; CODE XREF: _build_node+9BAj
		movzx	ecx, byte ptr [edx]
		mov	[eax], cl
		mov	edi, [esp+0DCh+arg_4]
		add	eax, 1
		mov	[edi], eax
		cmp	byte ptr [edx],	0
		jz	short loc_642041B3
		add	edx, 1
		jmp	short loc_64204181
; ---------------------------------------------------------------------------

loc_6420419C:				; CODE XREF: _build_node+988j
		mov	ebx, [esp+0DCh+var_88]
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+10h], 0
		jmp	loc_64204118
; ---------------------------------------------------------------------------

loc_642041B3:				; CODE XREF: _build_node+9B5j
		mov	eax, [esp+0DCh+var_8C]
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+10h], 0
		jmp	loc_6420401F
_build_node	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_copyEntityTable proc near		; CODE XREF: _XML_ExternalEntityParserCreate+6FAp
					; _XML_ExternalEntityParserCreate+71Dp

var_5C		= dword	ptr -5Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, ecx
		sub	esp, 4Ch
		mov	[esp+5Ch+var_34], eax
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_30], edx
		mov	[esp+5Ch+var_28], 0
		mov	[esp+5Ch+var_2C], 0
		mov	edi, [eax]
		mov	eax, [eax+8]
		lea	eax, [edi+eax*4]
		mov	[esp+5Ch+var_38], eax
		cmp	[esp+5Ch+var_38], edi
		jz	loc_642043A3
		nop
		lea	esi, [esi+0]

loc_64204210:				; CODE XREF: _copyEntityTable+1CDj
		mov	esi, [edi]
		add	edi, 4
		test	esi, esi
		jnz	short loc_64204231
		mov	eax, [esp+5Ch+var_38]
		lea	esi, [esi+0]

loc_64204220:				; CODE XREF: _copyEntityTable+5Fj
		cmp	eax, edi
		jz	loc_642043A3
		mov	esi, [edi]
		add	edi, 4
		test	esi, esi
		jz	short loc_64204220

loc_64204231:				; CODE XREF: _copyEntityTable+47j
		mov	ebp, [esi]
		mov	eax, [ebx+0Ch]
		jmp	short loc_6420423B
; ---------------------------------------------------------------------------

loc_64204238:				; CODE XREF: _copyEntityTable+84j
		add	ebp, 1

loc_6420423B:				; CODE XREF: _copyEntityTable+66j
		cmp	[ebx+8], eax
		jz	loc_642043B0

loc_64204244:				; CODE XREF: _copyEntityTable+2A3j
		movzx	edx, byte ptr [ebp+0]
		mov	[eax], dl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ebp+0], 0
		jnz	short loc_64204238
		mov	ecx, [ebx+10h]
		mov	[ebx+10h], eax
		test	ecx, ecx
		jz	loc_642043BF
		mov	edx, [esp+5Ch+var_30]
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], 24h ;	size_t
		call	_lookup
		test	eax, eax
		mov	edx, eax
		jz	loc_642043BF
		mov	ebp, [esi+10h]
		test	ebp, ebp
		jz	loc_642043C3
		mov	eax, [ebx+0Ch]
		jmp	short loc_64204295
; ---------------------------------------------------------------------------

loc_64204292:				; CODE XREF: _copyEntityTable+DEj
		add	ebp, 1

loc_64204295:				; CODE XREF: _copyEntityTable+C0j
		cmp	eax, [ebx+8]
		jz	loc_64204432

loc_6420429E:				; CODE XREF: _copyEntityTable+27Cj
		movzx	ecx, byte ptr [ebp+0]
		mov	[eax], cl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ebp+0], 0
		jnz	short loc_64204292
		mov	ecx, [ebx+10h]
		mov	[ebx+10h], eax
		test	ecx, ecx
		jz	loc_642043BF
		mov	eax, [esi+14h]
		mov	[edx+10h], ecx
		test	eax, eax
		mov	[esp+5Ch+var_3C], eax
		jz	short loc_6420431B
		cmp	[esp+5Ch+var_2C], eax
		jz	loc_64204497
		mov	eax, [ebx+0Ch]
		mov	ebp, [esp+5Ch+var_3C]
		jmp	short loc_642042E3
; ---------------------------------------------------------------------------
		align 10h

loc_642042E0:				; CODE XREF: _copyEntityTable+12Cj
		add	ebp, 1

loc_642042E3:				; CODE XREF: _copyEntityTable+10Dj
		cmp	[ebx+8], eax
		jz	loc_642044A3

loc_642042EC:				; CODE XREF: _copyEntityTable+2EDj
		movzx	ecx, byte ptr [ebp+0]
		mov	[eax], cl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ebp+0], 0
		jnz	short loc_642042E0
		mov	ecx, [ebx+10h]
		mov	[ebx+10h], eax
		test	ecx, ecx
		jz	loc_642043BF
		mov	eax, [esp+5Ch+var_3C]
		mov	[edx+14h], ecx
		mov	[esp+5Ch+var_28], ecx
		mov	[esp+5Ch+var_2C], eax

loc_6420431B:				; CODE XREF: _copyEntityTable+FAj
					; _copyEntityTable+2CEj
		mov	ebp, [esi+18h]
		test	ebp, ebp
		jz	short loc_64204352
		mov	eax, [ebx+0Ch]
		jmp	short loc_6420432A
; ---------------------------------------------------------------------------

loc_64204327:				; CODE XREF: _copyEntityTable+173j
		add	ebp, 1

loc_6420432A:				; CODE XREF: _copyEntityTable+155j
		cmp	[ebx+8], eax
		jz	loc_64204478

loc_64204333:				; CODE XREF: _copyEntityTable+2C2j
		movzx	ecx, byte ptr [ebp+0]
		mov	[eax], cl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ebp+0], 0
		jnz	short loc_64204327
		mov	ecx, [ebx+10h]
		mov	[ebx+10h], eax
		test	ecx, ecx
		jz	short loc_642043BF
		mov	[edx+18h], ecx

loc_64204352:				; CODE XREF: _copyEntityTable+150j
					; _copyEntityTable+315j
		mov	ebp, [esi+1Ch]
		test	ebp, ebp
		jz	short loc_6420438B
		mov	eax, [ebx+0Ch]
		jmp	short loc_64204363
; ---------------------------------------------------------------------------
		align 10h

loc_64204360:				; CODE XREF: _copyEntityTable+1ACj
		add	ebp, 1

loc_64204363:				; CODE XREF: _copyEntityTable+18Cj
		cmp	[ebx+8], eax
		jz	loc_64204451

loc_6420436C:				; CODE XREF: _copyEntityTable+29Bj
		movzx	ecx, byte ptr [ebp+0]
		mov	[eax], cl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ebp+0], 0
		jnz	short loc_64204360
		mov	ecx, [ebx+10h]
		mov	[ebx+10h], eax
		test	ecx, ecx
		jz	short loc_642043BF
		mov	[edx+1Ch], ecx

loc_6420438B:				; CODE XREF: _copyEntityTable+187j
		movzx	eax, byte ptr [esi+21h]
		mov	[edx+21h], al
		movzx	eax, byte ptr [esi+22h]
		mov	[edx+22h], al
		cmp	[esp+5Ch+var_38], edi
		jnz	loc_64204210

loc_642043A3:				; CODE XREF: _copyEntityTable+35j
					; _copyEntityTable+52j
		mov	eax, 1

loc_642043A8:				; CODE XREF: _copyEntityTable+1F1j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642043B0:				; CODE XREF: _copyEntityTable+6Ej
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jnz	loc_64204470

loc_642043BF:				; CODE XREF: _copyEntityTable+8Ej
					; _copyEntityTable+ACj	...
		xor	eax, eax
		jmp	short loc_642043A8
; ---------------------------------------------------------------------------

loc_642043C3:				; CODE XREF: _copyEntityTable+B7j
		mov	eax, [esi+8]
		mov	ecx, [esi+4]
		mov	[esp+5Ch+var_3C], eax
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	loc_642044EA

loc_642043D8:				; CODE XREF: _copyEntityTable+33Cj
		xor	ebp, ebp
		cmp	[esp+5Ch+var_3C], 0
		jle	loc_642044CE
		mov	[esp+5Ch+var_24], edi
		mov	edi, ecx
		mov	[esp+5Ch+var_20], esi
		mov	esi, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_3C], edx
		jmp	short loc_6420441B
; ---------------------------------------------------------------------------
		align 10h

loc_64204400:				; CODE XREF: _copyEntityTable+24Ej
					; _copyEntityTable+260j
		movzx	edx, byte ptr [edi+ebp]
		add	ebp, 1
		mov	[eax], dl
		mov	edx, esi
		add	eax, 1
		sub	edx, ebp
		test	edx, edx
		mov	[ebx+0Ch], eax
		jle	loc_642044C2

loc_6420441B:				; CODE XREF: _copyEntityTable+227j
		cmp	[ebx+8], eax
		jnz	short loc_64204400
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jz	short loc_642043BF
		mov	eax, [ebx+0Ch]
		xchg	ax, ax
		jmp	short loc_64204400
; ---------------------------------------------------------------------------

loc_64204432:				; CODE XREF: _copyEntityTable+C8j
		mov	eax, ebx
		mov	[esp+5Ch+var_44], edx
		call	_poolGrow
		mov	edx, [esp+5Ch+var_44]
		test	al, al
		jz	loc_642043BF
		mov	eax, [ebx+0Ch]
		jmp	loc_6420429E
; ---------------------------------------------------------------------------

loc_64204451:				; CODE XREF: _copyEntityTable+196j
		mov	eax, ebx
		mov	[esp+5Ch+var_44], edx
		call	_poolGrow
		mov	edx, [esp+5Ch+var_44]
		test	al, al
		jz	loc_642043BF
		mov	eax, [ebx+0Ch]
		jmp	loc_6420436C
; ---------------------------------------------------------------------------

loc_64204470:				; CODE XREF: _copyEntityTable+1E9j
		mov	eax, [ebx+0Ch]
		jmp	loc_64204244
; ---------------------------------------------------------------------------

loc_64204478:				; CODE XREF: _copyEntityTable+15Dj
		mov	eax, ebx
		mov	[esp+5Ch+var_44], edx
		call	_poolGrow
		mov	edx, [esp+5Ch+var_44]
		test	al, al
		jz	loc_642043BF
		mov	eax, [ebx+0Ch]
		jmp	loc_64204333
; ---------------------------------------------------------------------------

loc_64204497:				; CODE XREF: _copyEntityTable+100j
		mov	eax, [esp+5Ch+var_28]
		mov	[edx+14h], eax
		jmp	loc_6420431B
; ---------------------------------------------------------------------------

loc_642044A3:				; CODE XREF: _copyEntityTable+116j
		mov	eax, ebx
		mov	[esp+5Ch+var_44], edx
		call	_poolGrow
		mov	edx, [esp+5Ch+var_44]
		test	al, al
		jz	loc_642043BF
		mov	eax, [ebx+0Ch]
		jmp	loc_642042EC
; ---------------------------------------------------------------------------

loc_642044C2:				; CODE XREF: _copyEntityTable+245j
		mov	edi, [esp+5Ch+var_24]
		mov	esi, [esp+5Ch+var_20]
		mov	edx, [esp+5Ch+var_3C]

loc_642044CE:				; CODE XREF: _copyEntityTable+20Fj
		mov	ecx, [ebx+10h]
		mov	[ebx+10h], eax
		test	ecx, ecx
		jz	loc_642043BF
		mov	eax, [esi+8]
		mov	[edx+4], ecx
		mov	[edx+8], eax
		jmp	loc_64204352
; ---------------------------------------------------------------------------

loc_642044EA:				; CODE XREF: _copyEntityTable+202j
		mov	eax, ebx
		mov	[esp+5Ch+var_44], edx
		mov	[esp+5Ch+var_40], ecx
		call	_poolGrow
		mov	edx, [esp+5Ch+var_44]
		mov	ecx, [esp+5Ch+var_40]
		test	al, al
		jz	loc_642043BF
		mov	eax, [ebx+0Ch]
		jmp	loc_642043D8
_copyEntityTable endp

; ---------------------------------------------------------------------------
		jmp	short _poolStoreString
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_poolStoreString proc near		; CODE XREF: .text:64204511j
					; _getAttributeId+38p ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		mov	[esp+5Ch+var_20], ecx
		mov	edx, [eax+0Ch]
		mov	edi, [esp+5Ch+arg_0]
		test	edx, edx
		jz	short loc_642045A3

loc_6420453A:				; CODE XREF: _poolStoreString+8Aj
		lea	eax, [ebx+0Ch]
		mov	[esp+5Ch+var_30], eax
		lea	ebp, [esp+5Ch+var_20]

loc_64204545:				; CODE XREF: _poolStoreString+51j
		mov	eax, [ebx+8]
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_50], eax
		call	dword ptr [esi+3Ch]
		cmp	edi, [esp+5Ch+var_20]
		jz	short loc_64204580
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jnz	short loc_64204545

loc_64204573:				; CODE XREF: _poolStoreString+65j
					; _poolStoreString+9Bj
		xor	eax, eax

loc_64204575:				; CODE XREF: _poolStoreString+90j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64204580:				; CODE XREF: _poolStoreString+46j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_64204573
		mov	eax, [ebx+0Ch]
		cmp	eax, [ebx+8]
		jz	short loc_642045B2

loc_6420458F:				; CODE XREF: _poolStoreString+A0j
		mov	byte ptr [eax],	0
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, [ebx+10h]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642045A3:				; CODE XREF: _poolStoreString+18j
		call	_poolGrow
		test	al, al
		jnz	short loc_6420453A
		xor	eax, eax
		xchg	ax, ax
		jmp	short loc_64204575
; ---------------------------------------------------------------------------

loc_642045B2:				; CODE XREF: _poolStoreString+6Dj
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jz	short loc_64204573
		mov	eax, [ebx+0Ch]
		jmp	short loc_6420458F
_poolStoreString endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_getAttributeId	proc near		; CODE XREF: _storeAtts+F4p
					; _doProlog+319p

var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_8], edi
		mov	edi, eax
		mov	[esp+3Ch+var_4], ebp
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_C], esi
		mov	ebx, [eax+164h]
		mov	eax, [ebx+5Ch]
		lea	ebp, [ebx+50h]
		cmp	eax, [ebx+58h]
		jz	short loc_64204630

loc_642045F6:				; CODE XREF: _getAttributeId+7Ej
		mov	byte ptr [eax],	0
		add	eax, 1
		mov	[ebx+5Ch], eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebp
		call	_poolStoreString
		test	eax, eax
		jnz	short loc_64204650

loc_64204611:				; CODE XREF: _getAttributeId+79j
					; _getAttributeId+12Ej	...
		xor	esi, esi

loc_64204613:				; CODE XREF: _getAttributeId+9Ej
					; _getAttributeId+AEj ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64204630:				; CODE XREF: _getAttributeId+24j
		mov	eax, ebp
		mov	[esp+3Ch+var_2C], edx
		mov	[esp+3Ch+var_28], ecx
		call	_poolGrow
		mov	edx, [esp+3Ch+var_2C]
		mov	ecx, [esp+3Ch+var_28]
		test	al, al
		jz	short loc_64204611
		mov	eax, [ebx+5Ch]
		jmp	short loc_642045F6
; ---------------------------------------------------------------------------

loc_64204650:				; CODE XREF: _getAttributeId+3Fj
		add	eax, 1
		mov	[esp+3Ch+var_24], eax
		mov	ecx, eax
		mov	eax, edi
		lea	edx, [ebx+28h]
		mov	[esp+3Ch+var_3C], 0Ch ;	size_t
		call	_lookup
		test	eax, eax
		mov	esi, eax
		jz	short loc_64204613
		mov	edx, [eax]
		cmp	edx, [esp+3Ch+var_24]
		jz	short loc_64204680
		mov	eax, [ebx+60h]
		mov	[ebx+5Ch], eax
		jmp	short loc_64204613
; ---------------------------------------------------------------------------

loc_64204680:				; CODE XREF: _getAttributeId+A6j
		mov	eax, [ebx+5Ch]
		mov	[esp+3Ch+var_24], eax
		mov	[ebx+60h], eax
		cmp	byte ptr [edi+0ECh], 0
		jz	short loc_64204613
		movzx	ecx, byte ptr [edx]
		cmp	cl, 78h
		jz	short loc_64204709
		test	cl, cl
		jz	loc_64204613
		cmp	cl, 3Ah
		jz	loc_64204752

loc_642046AC:				; CODE XREF: _getAttributeId+13Dj
					; _getAttributeId+143j	...
		xor	ecx, ecx
		xchg	ax, ax

loc_642046B0:				; CODE XREF: _getAttributeId+F1j
		add	ecx, 1
		movzx	eax, byte ptr [edx+ecx]
		test	al, al
		jz	loc_64204613
		cmp	al, 3Ah
		jnz	short loc_642046B0
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_20], esi
		xor	esi, esi
		mov	[esp+3Ch+var_24], edi
		mov	edi, ecx
		jmp	short loc_642046E8
; ---------------------------------------------------------------------------

loc_642046D5:				; CODE XREF: _getAttributeId+11Bj
					; _getAttributeId+137j
		movzx	ecx, byte ptr [edx+esi]
		add	esi, 1
		mov	[eax], cl
		add	eax, 1
		cmp	edi, esi
		mov	[ebx+5Ch], eax
		jle	short loc_6420474A

loc_642046E8:				; CODE XREF: _getAttributeId+103j
		cmp	[ebx+58h], eax
		jnz	short loc_642046D5
		mov	eax, ebp
		mov	[esp+3Ch+var_2C], edx
		call	_poolGrow
		mov	edx, [esp+3Ch+var_2C]
		test	al, al
		jz	loc_64204611
		mov	eax, [ebx+5Ch]
		jmp	short loc_642046D5
; ---------------------------------------------------------------------------

loc_64204709:				; CODE XREF: _getAttributeId+C9j
		cmp	byte ptr [edx+1], 6Dh
		jnz	short loc_642046AC
		cmp	byte ptr [edx+2], 6Ch
		jnz	short loc_642046AC
		cmp	byte ptr [edx+3], 6Eh
		jnz	short loc_642046AC
		cmp	byte ptr [edx+4], 73h
		nop
		jnz	short loc_642046AC
		movzx	ecx, byte ptr [edx+5]
		test	cl, cl
		setz	al
		cmp	cl, 3Ah
		jz	short loc_64204786
		test	al, al
		jz	loc_642046AC

loc_64204738:				; CODE XREF: _getAttributeId+1B8j
		add	ebx, 98h
		mov	[esi+4], ebx

loc_64204741:				; CODE XREF: _getAttributeId+1D3j
		mov	byte ptr [esi+9], 1
		jmp	loc_64204613
; ---------------------------------------------------------------------------

loc_6420474A:				; CODE XREF: _getAttributeId+116j
		mov	esi, [esp+3Ch+var_20]
		mov	edi, [esp+3Ch+var_24]

loc_64204752:				; CODE XREF: _getAttributeId+D6j
		cmp	eax, [ebx+58h]
		jz	short loc_642047B0

loc_64204757:				; CODE XREF: _getAttributeId+1F2j
		mov	byte ptr [eax],	0
		mov	ecx, [ebx+60h]
		add	eax, 1
		mov	[ebx+5Ch], eax
		lea	edx, [ebx+3Ch]
		mov	eax, edi
		mov	[esp+3Ch+var_3C], 8 ; size_t
		call	_lookup
		mov	edx, [ebx+60h]
		cmp	[eax], edx
		mov	[esi+4], eax
		jz	short loc_642047A5
		mov	[ebx+5Ch], edx
		jmp	loc_64204613
; ---------------------------------------------------------------------------

loc_64204786:				; CODE XREF: _getAttributeId+15Ej
		test	al, al
		jnz	short loc_64204738
		add	ebx, 3Ch
		mov	eax, edi
		lea	ecx, [edx+6]
		mov	edx, ebx
		mov	[esp+3Ch+var_3C], 8 ; size_t
		call	_lookup
		mov	[esi+4], eax
		jmp	short loc_64204741
; ---------------------------------------------------------------------------

loc_642047A5:				; CODE XREF: _getAttributeId+1ACj
		mov	eax, [ebx+5Ch]
		mov	[ebx+60h], eax
		jmp	loc_64204613
; ---------------------------------------------------------------------------

loc_642047B0:				; CODE XREF: _getAttributeId+185j
		mov	eax, ebp
		call	_poolGrow
		test	al, al
		jz	loc_64204611
		mov	eax, [ebx+5Ch]
		jmp	short loc_64204757
_getAttributeId	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_parserInit	proc near		; CODE XREF: _parserCreate+186p
					; _XML_ParserReset+190p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 10h
		mov	dword ptr [eax+118h], offset _prologInitProcessor
		lea	eax, [eax+100h]
		mov	[esp+1Ch+var_1C], eax
		call	_XmlPrologStateInit
		xor	eax, eax
		test	esi, esi
		jz	short loc_64204834
		lea	edi, [ebx+1A0h]
		mov	eax, [ebx+1ACh]
		jmp	short loc_64204809
; ---------------------------------------------------------------------------

loc_64204806:				; CODE XREF: _parserInit+50j
		add	esi, 1

loc_64204809:				; CODE XREF: _parserInit+34j
		cmp	[edi+8], eax
		jz	loc_64204A62

loc_64204812:				; CODE XREF: _parserInit+2A0j
		movzx	edx, byte ptr [esi]
		mov	[eax], dl
		add	eax, 1
		mov	[edi+0Ch], eax
		cmp	byte ptr [esi],	0
		jnz	short loc_64204806
		mov	edx, [ebx+1ACh]
		mov	eax, [ebx+1B0h]
		mov	[ebx+1B0h], edx

loc_64204834:				; CODE XREF: _parserInit+26j
					; _parserInit+2A7j
		mov	[ebx+0E8h], eax
		lea	eax, [ebx+90h]
		mov	[esp+1Ch+var_18], eax
		lea	eax, [ebx+94h]
		mov	dword ptr [ebx+168h], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_1C], eax
		call	_XmlInitEncoding
		mov	eax, [ebx+8]
		mov	dword ptr [ebx], 0
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx+34h], 0
		mov	dword ptr [ebx+38h], 0
		mov	dword ptr [ebx+3Ch], 0
		mov	dword ptr [ebx+40h], 0
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+48h], 0
		mov	dword ptr [ebx+4Ch], 0
		mov	dword ptr [ebx+50h], 0
		mov	dword ptr [ebx+54h], 0
		mov	dword ptr [ebx+58h], 0
		mov	dword ptr [ebx+5Ch], 0
		mov	dword ptr [ebx+60h], 0
		mov	dword ptr [ebx+64h], 0
		mov	dword ptr [ebx+68h], 0
		mov	dword ptr [ebx+6Ch], 0
		mov	dword ptr [ebx+70h], 0
		mov	[ebx+74h], ebx
		mov	dword ptr [ebx+78h], 0
		mov	dword ptr [ebx+80h], 0
		mov	dword ptr [ebx+84h], 0
		mov	dword ptr [ebx+88h], 0
		mov	dword ptr [ebx+8Ch], 0
		mov	[ebx+18h], eax
		mov	[ebx+1Ch], eax
		mov	dword ptr [ebx+24h], 0
		mov	dword ptr [ebx+28h], 0
		mov	dword ptr [ebx+158h], 0
		mov	dword ptr [ebx+15Ch], 0
		mov	dword ptr [ebx+13Ch], 0
		mov	dword ptr [ebx+140h], 0
		mov	dword ptr [ebx+144h], 0
		mov	dword ptr [ebx+148h], 0
		mov	dword ptr [ebx+14Ch], 0
		mov	dword ptr [ebx+150h], 0
		mov	dword ptr [ebx+154h], 0
		mov	byte ptr [ebx+160h], 0
		mov	byte ptr [ebx+161h], 0
		mov	dword ptr [ebx+198h], 0
		mov	dword ptr [ebx+19Ch], 0
		mov	dword ptr [ebx+11Ch], 0
		mov	dword ptr [ebx+120h], 0
		mov	dword ptr [ebx+124h], 0
		mov	dword ptr [ebx+128h], 0
		mov	dword ptr [ebx+12Ch], 0
		mov	byte ptr [ebx+134h], 1
		mov	dword ptr [ebx+138h], 0
		mov	dword ptr [ebx+16Ch], 0
		mov	dword ptr [ebx+174h], 0
		mov	dword ptr [ebx+180h], 0
		mov	dword ptr [ebx+0F0h], 0
		mov	dword ptr [ebx+0FCh], 0
		mov	dword ptr [ebx+0F4h], 0
		mov	dword ptr [ebx+1DCh], 0
		mov	dword ptr [ebx+1E0h], 0
		mov	byte ptr [ebx+1E8h], 0
		mov	byte ptr [ebx+1E9h], 0
		mov	dword ptr [ebx+1ECh], 0
		mov	dword ptr [ebx+1F0h], 0
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_64204A62:				; CODE XREF: _parserInit+3Cj
		mov	eax, edi
		call	_poolGrow
		test	al, al
		jz	short loc_64204A75
		mov	eax, [edi+0Ch]
		jmp	loc_64204812
; ---------------------------------------------------------------------------

loc_64204A75:				; CODE XREF: _parserInit+29Bj
		xor	eax, eax
		jmp	loc_64204834
_parserInit	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_parserCreate	proc near		; CODE XREF: _XML_ParserCreate_MM+1Aj
					; _XML_ParserCreate+16j ...

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, eax
		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 1Ch
		test	edx, edx
		jz	loc_64204C60
		mov	[esp+2Ch+var_2C], 1F4h
		call	dword ptr [edx]
		test	eax, eax
		mov	ebx, eax
		jz	loc_64204C3C
		mov	eax, [esi]
		mov	[ebx+0Ch], eax
		mov	eax, [esi+4]
		mov	[ebx+10h], eax
		mov	eax, [esi+8]
		mov	[ebx+14h], eax

loc_64204AB9:				; CODE XREF: _parserCreate+207j
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [ebx+20h], 0
		mov	dword ptr [ebx+17Ch], 10h
		mov	[esp+2Ch+var_2C], 100h
		call	dword ptr [ebx+0Ch]
		test	eax, eax
		mov	[ebx+188h], eax
		jz	loc_64204E41
		mov	[esp+2Ch+var_2C], 400h
		call	dword ptr [ebx+0Ch]
		test	eax, eax
		mov	[ebx+2Ch], eax
		jz	loc_64204E35
		mov	esi, [esp+2Ch+arg_0]
		add	eax, 400h
		mov	[ebx+30h], eax
		test	esi, esi
		jz	loc_64204C90
		mov	eax, [esp+2Ch+arg_0]
		lea	edx, [ebx+0Ch]
		mov	[ebx+164h], eax

loc_64204B1F:				; CODE XREF: _parserCreate+384j
		mov	[ebx+1B4h], edx
		mov	eax, ebx
		mov	[ebx+1CCh], edx
		mov	edx, ebp
		mov	dword ptr [ebx+178h], 0
		mov	dword ptr [ebx+170h], 0
		mov	dword ptr [ebx+130h], 0
		mov	dword ptr [ebx+1D4h], 0
		mov	dword ptr [ebx+1D0h], 0
		mov	dword ptr [ebx+7Ch], 0
		mov	dword ptr [ebx+0F8h], 0
		mov	byte ptr [ebx+1D8h], 21h
		mov	byte ptr [ebx+0ECh], 0
		mov	byte ptr [ebx+0EDh], 0
		mov	dword ptr [ebx+18Ch], 0
		mov	dword ptr [ebx+190h], 0
		mov	byte ptr [ebx+194h], 0
		mov	dword ptr [ebx+1A0h], 0
		mov	dword ptr [ebx+1A4h], 0
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1A8h], 0
		mov	dword ptr [ebx+1B8h], 0
		mov	dword ptr [ebx+1BCh], 0
		mov	dword ptr [ebx+1C8h], 0
		mov	dword ptr [ebx+1C4h], 0
		mov	dword ptr [ebx+1C0h], 0
		call	_parserInit
		test	ebp, ebp
		jz	short loc_64204C1D
		mov	ecx, [ebx+0E8h]
		test	ecx, ecx
		jz	loc_64204E4E

loc_64204C1D:				; CODE XREF: _parserCreate+18Dj
		test	edi, edi
		jz	short loc_64204C46
		mov	byte ptr [ebx+0ECh], 1
		call	_XmlGetUtf8InternalEncodingNS
		mov	[ebx+0E4h], eax
		movzx	eax, byte ptr [edi]
		mov	[ebx+1D8h], al

loc_64204C3C:				; CODE XREF: _parserCreate+22j
					; _parserCreate+1F0j ...
		add	esp, 1Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64204C46:				; CODE XREF: _parserCreate+19Fj
		call	_XmlGetUtf8InternalEncoding
		mov	[ebx+0E4h], eax
		add	esp, 1Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64204C60:				; CODE XREF: _parserCreate+Fj
		mov	[esp+2Ch+var_2C], 1F4h ; size_t
		call	_malloc
		test	eax, eax
		mov	ebx, eax
		jz	short loc_64204C3C
		mov	dword ptr [eax+0Ch], offset _malloc
		mov	dword ptr [eax+10h], offset _realloc
		mov	dword ptr [eax+14h], offset _free
		jmp	loc_64204AB9
; ---------------------------------------------------------------------------
		align 10h

loc_64204C90:				; CODE XREF: _parserCreate+8Cj
		mov	[esp+2Ch+var_2C], 0BCh
		call	dword ptr [ebx+0Ch]
		test	eax, eax
		jz	loc_64204E09
		lea	edx, [ebx+0Ch]
		mov	dword ptr [eax+50h], 0
		mov	dword ptr [eax+54h], 0
		mov	dword ptr [eax+60h], 0
		mov	dword ptr [eax+5Ch], 0
		mov	dword ptr [eax+58h], 0
		mov	[eax+64h], edx
		mov	dword ptr [eax+68h], 0
		mov	dword ptr [eax+6Ch], 0
		mov	dword ptr [eax+78h], 0
		mov	dword ptr [eax+74h], 0
		mov	dword ptr [eax+70h], 0
		mov	[eax+7Ch], edx
		mov	byte ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax], 0
		mov	[eax+10h], edx
		mov	byte ptr [eax+18h], 0
		mov	dword ptr [eax+1Ch], 0
		mov	dword ptr [eax+20h], 0
		mov	dword ptr [eax+14h], 0
		mov	[eax+24h], edx
		mov	byte ptr [eax+2Ch], 0
		mov	dword ptr [eax+30h], 0
		mov	dword ptr [eax+34h], 0
		mov	dword ptr [eax+28h], 0
		mov	[eax+38h], edx
		mov	byte ptr [eax+40h], 0
		mov	dword ptr [eax+44h], 0
		mov	dword ptr [eax+48h], 0
		mov	dword ptr [eax+3Ch], 0
		mov	[eax+4Ch], edx
		mov	byte ptr [eax+83h], 0
		mov	byte ptr [eax+88h], 0
		mov	byte ptr [eax+0A0h], 0
		mov	byte ptr [eax+80h], 1
		mov	byte ptr [eax+81h], 0
		mov	byte ptr [eax+82h], 0
		mov	dword ptr [eax+8Ch], 0
		mov	dword ptr [eax+90h], 0
		mov	dword ptr [eax+84h], 0
		mov	[eax+94h], edx
		mov	dword ptr [eax+98h], 0
		mov	dword ptr [eax+9Ch], 0
		mov	dword ptr [eax+0B8h], 0
		mov	dword ptr [eax+0A4h], 0
		mov	dword ptr [eax+0B4h], 0
		mov	dword ptr [eax+0ACh], 0
		mov	dword ptr [eax+0B0h], 0
		mov	dword ptr [eax+0A8h], 0
		mov	[ebx+164h], eax
		jmp	loc_64204B1F
; ---------------------------------------------------------------------------

loc_64204E09:				; CODE XREF: _parserCreate+21Cj
		mov	eax, [ebx+2Ch]
		mov	dword ptr [ebx+164h], 0
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+14h]
		mov	eax, [ebx+188h]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+14h]
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+14h]
		xor	ebx, ebx
		jmp	loc_64204C3C
; ---------------------------------------------------------------------------

loc_64204E35:				; CODE XREF: _parserCreate+78j
		mov	eax, [ebx+188h]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+14h]

loc_64204E41:				; CODE XREF: _parserCreate+63j
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+14h]
		xor	ebx, ebx
		jmp	loc_64204C3C
; ---------------------------------------------------------------------------

loc_64204E4E:				; CODE XREF: _parserCreate+197j
		mov	[esp+2Ch+var_2C], ebx
		xor	ebx, ebx
		call	_XML_ParserFree
		jmp	loc_64204C3C
_parserCreate	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. XML_ParserCreate_MM

; =============== S U B	R O U T	I N E =======================================


		public _XML_ParserCreate_MM
_XML_ParserCreate_MM proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	ecx, [esp+0Ch+arg_8]
		mov	edx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+arg_0], 0
		add	esp, 0Ch
		jmp	_parserCreate
_XML_ParserCreate_MM endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  18. XML_ParserCreate

; =============== S U B	R O U T	I N E =======================================


		public _XML_ParserCreate
_XML_ParserCreate proc near

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		xor	ecx, ecx
		mov	eax, [esp+0Ch+arg_0]
		xor	edx, edx
		mov	[esp+0Ch+arg_0], 0
		add	esp, 0Ch
		jmp	_parserCreate
_XML_ParserCreate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. XML_ParserCreateNS

; =============== S U B	R O U T	I N E =======================================


		public _XML_ParserCreateNS
_XML_ParserCreateNS proc near

var_2C		= dword	ptr -2Ch
var_E		= byte ptr -0Eh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		xor	edx, edx
		mov	eax, [esp+2Ch+arg_4]
		lea	ecx, [esp+2Ch+var_E]
		mov	[esp+2Ch+var_2C], 0
		mov	[esp+2Ch+var_E], al
		mov	eax, [esp+2Ch+arg_0]
		call	_parserCreate
		add	esp, 2Ch
		retn
_XML_ParserCreateNS endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  55. XML_ParserReset

; =============== S U B	R O U T	I N E =======================================


		public _XML_ParserReset
_XML_ParserReset proc near

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		xor	eax, eax
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	ecx, [ebx+1DCh]
		test	ecx, ecx
		jz	short loc_64204EEF
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64204EEF:				; CODE XREF: _XML_ParserReset+15j
		mov	esi, [ebx+16Ch]
		test	esi, esi
		jz	short loc_64204F3E
		mov	eax, [ebx+170h]
		nop

loc_64204F00:				; CODE XREF: _XML_ParserReset+6Cj
		mov	edi, [esi]
		mov	[esi], eax
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_64204F27
		mov	ecx, [ebx+178h]
		jmp	short loc_64204F17
; ---------------------------------------------------------------------------

loc_64204F13:				; CODE XREF: _XML_ParserReset+55j
		mov	ecx, eax
		mov	eax, edx

loc_64204F17:				; CODE XREF: _XML_ParserReset+41j
		mov	edx, [eax+4]
		mov	[eax+4], ecx
		mov	[ebx+178h], eax
		test	edx, edx
		jnz	short loc_64204F13

loc_64204F27:				; CODE XREF: _XML_ParserReset+39j
		test	edi, edi
		mov	dword ptr [esi+2Ch], 0
		mov	[ebx+170h], esi
		jz	short loc_64204F3E
		mov	eax, esi
		mov	esi, edi
		jmp	short loc_64204F00
; ---------------------------------------------------------------------------

loc_64204F3E:				; CODE XREF: _XML_ParserReset+27j
					; _XML_ParserReset+66j
		mov	eax, [ebx+12Ch]
		test	eax, eax
		jz	short loc_64204F64
		mov	ecx, [ebx+130h]
		jmp	short loc_64204F54
; ---------------------------------------------------------------------------

loc_64204F50:				; CODE XREF: _XML_ParserReset+92j
		mov	ecx, eax
		mov	eax, edx

loc_64204F54:				; CODE XREF: _XML_ParserReset+7Ej
		mov	edx, [eax+8]
		mov	[eax+8], ecx
		mov	[ebx+130h], eax
		test	edx, edx
		jnz	short loc_64204F50

loc_64204F64:				; CODE XREF: _XML_ParserReset+76j
		mov	eax, [ebx+174h]
		test	eax, eax
		jz	short loc_64204F8A
		mov	ecx, [ebx+178h]
		jmp	short loc_64204F7A
; ---------------------------------------------------------------------------

loc_64204F76:				; CODE XREF: _XML_ParserReset+B8j
		mov	ecx, eax
		mov	eax, edx

loc_64204F7A:				; CODE XREF: _XML_ParserReset+A4j
		mov	edx, [eax+4]
		mov	[eax+4], ecx
		mov	[ebx+178h], eax
		test	edx, edx
		jnz	short loc_64204F76

loc_64204F8A:				; CODE XREF: _XML_ParserReset+9Cj
		mov	eax, [ebx+0F0h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ebx+14h]
		mov	eax, [ebx+0FCh]
		test	eax, eax
		jz	short loc_64204FAB
		mov	edx, [ebx+0F4h]
		mov	[esp+3Ch+var_3C], edx
		call	eax

loc_64204FAB:				; CODE XREF: _XML_ParserReset+CEj
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_642052CC
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_64204FC9
		jmp	short loc_64204FD7
; ---------------------------------------------------------------------------

loc_64204FC5:				; CODE XREF: _XML_ParserReset+105j
		mov	ecx, eax
		mov	eax, edx

loc_64204FC9:				; CODE XREF: _XML_ParserReset+F1j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_64204FC5

loc_64204FD7:				; CODE XREF: _XML_ParserReset+F3j
					; _XML_ParserReset+408j
		mov	ecx, [ebx+1BCh]
		mov	dword ptr [ebx+1A0h], 0
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		test	ecx, ecx
		mov	dword ptr [ebx+1A8h], 0
		jz	loc_642052DD
		mov	eax, [ebx+1B8h]
		test	eax, eax
		jnz	short loc_64205024
		jmp	short loc_64205032
; ---------------------------------------------------------------------------
		align 10h

loc_64205020:				; CODE XREF: _XML_ParserReset+160j
		mov	ecx, eax
		mov	eax, edx

loc_64205024:				; CODE XREF: _XML_ParserReset+145j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1BCh], eax
		test	edx, edx
		jnz	short loc_64205020

loc_64205032:				; CODE XREF: _XML_ParserReset+147j
					; _XML_ParserReset+419j
		mov	dword ptr [ebx+1C8h], 0
		mov	eax, ebx
		mov	dword ptr [ebx+1C4h], 0
		mov	dword ptr [ebx+1C0h], 0
		mov	edx, [esp+3Ch+arg_4]
		mov	dword ptr [ebx+1B8h], 0
		call	_parserInit
		mov	esi, [ebx+164h]
		lea	eax, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		mov	edi, [esi+14h]
		mov	eax, [esi+1Ch]
		lea	ebp, [edi+eax*4]
		jmp	short loc_64205083
; ---------------------------------------------------------------------------
		align 10h

loc_64205080:				; CODE XREF: _XML_ParserReset+1BBj
					; _XML_ParserReset+1C2j ...
		add	edi, 4

loc_64205083:				; CODE XREF: _XML_ParserReset+1ABj
		cmp	ebp, edi
		jz	short loc_642050A3
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_64205080
		mov	edx, [eax+10h]
		test	edx, edx
		jz	short loc_64205080
		mov	eax, [eax+14h]
		mov	[esp+3Ch+var_3C], eax
		mov	eax, [esp+3Ch+var_20]
		call	dword ptr [eax+8]
		jmp	short loc_64205080
; ---------------------------------------------------------------------------

loc_642050A3:				; CODE XREF: _XML_ParserReset+1B5j
		mov	edi, [esi+8]
		test	edi, edi
		jz	short loc_642050CD
		mov	eax, [esi]
		xor	edi, edi
		xchg	ax, ax

loc_642050B0:				; CODE XREF: _XML_ParserReset+1FBj
		mov	eax, [eax+edi*4]
		mov	edx, [esi+10h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		mov	eax, [esi]
		mov	dword ptr [eax+edi*4], 0
		add	edi, 1
		cmp	edi, [esi+8]
		jb	short loc_642050B0

loc_642050CD:				; CODE XREF: _XML_ParserReset+1D8j
		mov	ecx, [esi+8Ch]
		lea	ebp, [esi+84h]
		mov	dword ptr [esi+0Ch], 0
		mov	byte ptr [esi+83h], 0
		test	ecx, ecx
		jz	short loc_6420510E
		mov	eax, [ebp+0]
		xor	edi, edi

loc_642050F0:				; CODE XREF: _XML_ParserReset+23Cj
		mov	eax, [eax+edi*4]
		mov	edx, [ebp+10h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		mov	eax, [ebp+0]
		mov	dword ptr [eax+edi*4], 0
		add	edi, 1
		cmp	edi, [ebp+8]
		jb	short loc_642050F0

loc_6420510E:				; CODE XREF: _XML_ParserReset+219j
		mov	edx, [esi+1Ch]
		lea	ebp, [esi+14h]
		mov	dword ptr [esi+90h], 0
		test	edx, edx
		jz	short loc_64205145
		mov	eax, [ebp+0]
		xor	edi, edi

loc_64205127:				; CODE XREF: _XML_ParserReset+273j
		mov	eax, [eax+edi*4]
		mov	edx, [ebp+10h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		mov	eax, [ebp+0]
		mov	dword ptr [eax+edi*4], 0
		add	edi, 1
		cmp	edi, [ebp+8]
		jb	short loc_64205127

loc_64205145:				; CODE XREF: _XML_ParserReset+250j
		mov	eax, [esi+30h]
		lea	ebp, [esi+28h]
		mov	dword ptr [esi+20h], 0
		test	eax, eax
		jz	short loc_6420517E
		mov	eax, [ebp+0]
		xor	edi, edi
		nop
		lea	esi, [esi+0]

loc_64205160:				; CODE XREF: _XML_ParserReset+2ACj
		mov	eax, [eax+edi*4]
		mov	edx, [ebp+10h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		mov	eax, [ebp+0]
		mov	dword ptr [eax+edi*4], 0
		add	edi, 1
		cmp	edi, [ebp+8]
		jb	short loc_64205160

loc_6420517E:				; CODE XREF: _XML_ParserReset+284j
		mov	edi, [esi+44h]
		lea	ebp, [esi+3Ch]
		mov	dword ptr [esi+34h], 0
		test	edi, edi
		jz	short loc_642051B2
		mov	eax, [ebp+0]
		xor	edi, edi

loc_64205194:				; CODE XREF: _XML_ParserReset+2E0j
		mov	eax, [eax+edi*4]
		mov	edx, [ebp+10h]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+8]
		mov	eax, [ebp+0]
		mov	dword ptr [eax+edi*4], 0
		add	edi, 1
		cmp	edi, [ebp+8]
		jb	short loc_64205194

loc_642051B2:				; CODE XREF: _XML_ParserReset+2BDj
		mov	ecx, [esi+54h]
		mov	dword ptr [esi+48h], 0
		test	ecx, ecx
		jz	loc_642052EE
		mov	eax, [esi+50h]
		test	eax, eax
		jnz	short loc_642051D4
		jmp	short loc_642051DF
; ---------------------------------------------------------------------------
		align 10h

loc_642051D0:				; CODE XREF: _XML_ParserReset+30Dj
		mov	ecx, eax
		mov	eax, edx

loc_642051D4:				; CODE XREF: _XML_ParserReset+2F9j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[esi+54h], eax
		test	edx, edx
		jnz	short loc_642051D0

loc_642051DF:				; CODE XREF: _XML_ParserReset+2FBj
					; _XML_ParserReset+424j
		mov	ecx, [esi+6Ch]
		mov	dword ptr [esi+50h], 0
		mov	dword ptr [esi+60h], 0
		mov	dword ptr [esi+5Ch], 0
		test	ecx, ecx
		mov	dword ptr [esi+58h], 0
		jz	loc_642052F9
		mov	eax, [esi+68h]
		test	eax, eax
		jnz	short loc_64205214
		jmp	short loc_6420521F
; ---------------------------------------------------------------------------
		align 10h

loc_64205210:				; CODE XREF: _XML_ParserReset+34Dj
		mov	ecx, eax
		mov	eax, edx

loc_64205214:				; CODE XREF: _XML_ParserReset+33Bj
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[esi+6Ch], eax
		test	edx, edx
		jnz	short loc_64205210

loc_6420521F:				; CODE XREF: _XML_ParserReset+33Dj
					; _XML_ParserReset+42Fj
		mov	eax, [esi+0B8h]
		mov	dword ptr [esi+68h], 0
		mov	dword ptr [esi+78h], 0
		mov	dword ptr [esi+74h], 0
		mov	dword ptr [esi+70h], 0
		mov	dword ptr [esi+98h], 0
		mov	dword ptr [esi+9Ch], 0
		mov	byte ptr [esi+0A0h], 0
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ebx+14h]
		mov	eax, [esi+0A4h]
		mov	dword ptr [esi+0B8h], 0
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ebx+14h]
		mov	eax, 1
		mov	dword ptr [esi+0A4h], 0
		mov	dword ptr [esi+0B4h], 0
		mov	dword ptr [esi+0ACh], 0
		mov	dword ptr [esi+0B0h], 0
		mov	dword ptr [esi+0A8h], 0
		mov	byte ptr [esi+80h], 1
		mov	byte ptr [esi+81h], 0
		mov	byte ptr [esi+82h], 0
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642052CC:				; CODE XREF: _XML_ParserReset+E3j
		mov	eax, [ebx+1A0h]
		mov	[ebx+1A4h], eax
		jmp	loc_64204FD7
; ---------------------------------------------------------------------------

loc_642052DD:				; CODE XREF: _XML_ParserReset+137j
		mov	eax, [ebx+1B8h]
		mov	[ebx+1BCh], eax
		jmp	loc_64205032
; ---------------------------------------------------------------------------

loc_642052EE:				; CODE XREF: _XML_ParserReset+2EEj
		mov	eax, [esi+50h]
		mov	[esi+54h], eax
		jmp	loc_642051DF
; ---------------------------------------------------------------------------

loc_642052F9:				; CODE XREF: _XML_ParserReset+330j
		mov	eax, [esi+68h]
		mov	[esi+6Ch], eax
		jmp	loc_6420521F
_XML_ParserReset endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. XML_SetBase

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetBase
_XML_SetBase	proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_10], ebx
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], esi
		mov	[esp+1Ch+var_8], edi
		test	ebx, ebx
		jz	short loc_64205384
		mov	edi, [ebp+164h]
		lea	esi, [edi+50h]
		mov	eax, [edi+5Ch]
		jmp	short loc_64205343
; ---------------------------------------------------------------------------
		align 10h

loc_64205340:				; CODE XREF: _XML_SetBase+46j
		add	ebx, 1

loc_64205343:				; CODE XREF: _XML_SetBase+2Bj
		cmp	[esi+8], eax
		jz	short loc_64205395

loc_64205348:				; CODE XREF: _XML_SetBase+93j
		movzx	edx, byte ptr [ebx]
		mov	[eax], dl
		add	eax, 1
		mov	[esi+0Ch], eax
		cmp	byte ptr [ebx],	0
		jnz	short loc_64205340
		mov	eax, [edi+60h]
		mov	edx, [edi+5Ch]
		test	eax, eax
		mov	[edi+60h], edx
		jz	short loc_642053A5
		mov	[ebp+168h], eax
		mov	eax, 1

loc_64205370:				; CODE XREF: _XML_SetBase+83j
					; _XML_SetBase+97j
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_64205384:				; CODE XREF: _XML_SetBase+1Dj
		mov	dword ptr [ebp+168h], 0
		mov	eax, 1
		jmp	short loc_64205370
; ---------------------------------------------------------------------------

loc_64205395:				; CODE XREF: _XML_SetBase+36j
		mov	eax, esi
		call	_poolGrow
		test	al, al
		jz	short loc_642053A5
		mov	eax, [esi+0Ch]
		jmp	short loc_64205348
; ---------------------------------------------------------------------------

loc_642053A5:				; CODE XREF: _XML_SetBase+53j
					; _XML_SetBase+8Ej
		xor	eax, eax
		jmp	short loc_64205370
_XML_SetBase	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. XML_SetEncoding

; =============== S U B	R O U T	I N E =======================================


		public _XML_SetEncoding
_XML_SetEncoding proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edi
		mov	edi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], ebx
		mov	ebx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_8], esi
		mov	eax, [edi+1E0h]
		cmp	eax, 3
		jz	short loc_64205440
		cmp	eax, 1
		jz	short loc_64205440
		test	ebx, ebx
		jz	short loc_64205451
		lea	esi, [edi+1A0h]
		mov	eax, [edi+1ACh]
		jmp	short loc_642053EB
; ---------------------------------------------------------------------------

loc_642053E8:				; CODE XREF: _XML_SetEncoding+52j
		add	ebx, 1

loc_642053EB:				; CODE XREF: _XML_SetEncoding+36j
		cmp	[esi+8], eax
		jz	loc_64205470

loc_642053F4:				; CODE XREF: _XML_SetEncoding+D0j
		movzx	edx, byte ptr [ebx]
		mov	[eax], dl
		add	eax, 1
		mov	[esi+0Ch], eax
		cmp	byte ptr [ebx],	0
		jnz	short loc_642053E8
		mov	eax, [edi+1B0h]
		mov	edx, [edi+1ACh]
		test	eax, eax
		mov	[edi+0E8h], eax
		setnz	al
		mov	[edi+1B0h], edx
		movzx	eax, al
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_64205433:				; CODE XREF: _XML_SetEncoding+C9j
		mov	dword ptr [edi+0E8h], 0
		lea	esi, [esi+0]

loc_64205440:				; CODE XREF: _XML_SetEncoding+1Fj
					; _XML_SetEncoding+24j
		xor	eax, eax
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_64205451:				; CODE XREF: _XML_SetEncoding+28j
		mov	dword ptr [edi+0E8h], 0
		mov	eax, 1
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64205470:				; CODE XREF: _XML_SetEncoding+3Ej
		mov	eax, esi
		call	_poolGrow
		test	al, al
		jz	short loc_64205433
		mov	eax, [esi+0Ch]
		xchg	ax, ax
		jmp	loc_642053F4
_XML_SetEncoding endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. XML_ExternalEntityParserCreate

; =============== S U B	R O U T	I N E =======================================


		public _XML_ExternalEntityParserCreate
_XML_ExternalEntityParserCreate	proc near

var_BC		= dword	ptr -0BCh
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1E		= byte ptr -1Eh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	edi, [esp+0BCh+arg_0]
		mov	eax, [edi+164h]
		mov	edx, [edi+38h]
		mov	ecx, [edi+3Ch]
		mov	ebp, [edi+34h]
		mov	[esp+0BCh+var_80], eax
		mov	eax, [edi+40h]
		mov	[esp+0BCh+var_30], edx
		mov	edx, [edi+44h]
		mov	[esp+0BCh+var_34], ecx
		mov	ecx, [edi+48h]
		mov	[esp+0BCh+var_38], eax
		mov	eax, [edi+4Ch]
		mov	[esp+0BCh+var_3C], edx
		mov	edx, [edi+50h]
		mov	[esp+0BCh+var_40], ecx
		mov	ecx, [edi+5Ch]
		mov	[esp+0BCh+var_44], eax
		mov	eax, [edi+60h]
		mov	[esp+0BCh+var_48], edx
		mov	edx, [edi+64h]
		mov	[esp+0BCh+var_4C], ecx
		mov	ecx, [edi+68h]
		mov	[esp+0BCh+var_50], eax
		mov	eax, [edi+6Ch]
		mov	[esp+0BCh+var_54], edx
		mov	edx, [edi+70h]
		mov	[esp+0BCh+var_58], ecx
		mov	[esp+0BCh+var_5C], eax
		mov	[esp+0BCh+var_60], edx
		mov	ecx, [edi+78h]
		mov	eax, [edi+7Ch]
		mov	edx, [edi+80h]
		cmp	[esp+0BCh+arg_4], 1
		mov	[esp+0BCh+var_64], ecx
		mov	ecx, [edi+84h]
		mov	[esp+0BCh+var_68], eax
		mov	eax, [edi+88h]
		mov	[esp+0BCh+var_6C], edx
		mov	edx, [edi+8Ch]
		mov	ebx, [edi]
		mov	[esp+0BCh+var_70], ecx
		mov	ecx, [edi+158h]
		mov	[esp+0BCh+var_74], eax
		mov	eax, [edi+4]
		mov	[esp+0BCh+var_78], edx
		mov	esi, [edi+74h]
		mov	[esp+0BCh+var_7C], ecx
		mov	ecx, [edi+1ECh]
		mov	[esp+0BCh+var_84], eax
		mov	eax, [edi+114h]
		movzx	edx, byte ptr [edi+134h]
		mov	[esp+0BCh+var_88], ecx
		mov	ecx, [edi+1F0h]
		mov	[esp+0BCh+var_94], eax
		sbb	eax, eax
		mov	byte ptr [esp+0BCh+var_8C], dl
		movzx	edx, byte ptr [edi+0EDh]
		and	eax, [esp+0BCh+var_80]
		mov	[esp+0BCh+var_98], ecx
		mov	byte ptr [esp+0BCh+var_90], dl
		cmp	byte ptr [edi+0ECh], 0
		jz	loc_64205A98
		movzx	edx, byte ptr [edi+1D8h]
		lea	ecx, [esp+0BCh+var_1E]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_1E], dl
		lea	edx, [edi+0Ch]
		call	_parserCreate
		mov	[esp+0BCh+var_9C], eax

loc_642055DB:				; CODE XREF: _XML_ExternalEntityParserCreate+620j
		mov	eax, [esp+0BCh+var_9C]
		test	eax, eax
		jz	loc_64205A7E
		mov	eax, [esp+0BCh+var_9C]
		mov	edx, [esp+0BCh+var_30]
		mov	ecx, [esp+0BCh+var_34]
		mov	[eax+34h], ebp
		mov	[eax+38h], edx
		mov	edx, [esp+0BCh+var_38]
		mov	[eax+3Ch], ecx
		mov	ecx, [esp+0BCh+var_3C]
		mov	[eax+40h], edx
		mov	edx, [esp+0BCh+var_40]
		mov	[eax+44h], ecx
		mov	ecx, [esp+0BCh+var_44]
		mov	[eax+48h], edx
		mov	edx, [esp+0BCh+var_48]
		mov	[eax+4Ch], ecx
		mov	ecx, [esp+0BCh+var_4C]
		mov	[eax+50h], edx
		mov	edx, [esp+0BCh+var_50]
		mov	[eax+5Ch], ecx
		mov	ecx, [esp+0BCh+var_54]
		mov	[eax+60h], edx
		mov	edx, [esp+0BCh+var_58]
		mov	[eax+64h], ecx
		mov	ecx, [esp+0BCh+var_5C]
		mov	[eax+68h], edx
		mov	edx, [esp+0BCh+var_60]
		mov	[eax+6Ch], ecx
		mov	ecx, [esp+0BCh+var_64]
		mov	[eax+70h], edx
		mov	edx, [esp+0BCh+var_68]
		mov	[eax+78h], ecx
		mov	ecx, [esp+0BCh+var_6C]
		mov	[eax+7Ch], edx
		mov	[eax+80h], ecx
		mov	edx, [esp+0BCh+var_70]
		mov	ecx, [esp+0BCh+var_74]
		cmp	ebx, [esp+0BCh+var_84]
		mov	[eax], ebx
		mov	[eax+84h], edx
		mov	edx, [esp+0BCh+var_78]
		mov	[eax+88h], ecx
		mov	ecx, [esp+0BCh+var_7C]
		mov	[eax+8Ch], edx
		mov	[eax+158h], ecx
		jz	loc_64205B1A
		mov	[eax+4], eax

loc_642056A4:				; CODE XREF: _XML_ExternalEntityParserCreate+690j
		cmp	esi, edi
		jz	short loc_642056AF
		mov	edx, [esp+0BCh+var_9C]
		mov	[edx+74h], esi

loc_642056AF:				; CODE XREF: _XML_ExternalEntityParserCreate+216j
		mov	eax, [esp+0BCh+var_9C]
		movzx	ecx, byte ptr [esp+0BCh+var_8C]
		mov	[eax+1DCh], edi
		mov	[eax+134h], cl
		movzx	edx, byte ptr [esp+0BCh+var_90]
		mov	[eax+0EDh], dl
		mov	ecx, [esp+0BCh+var_98]
		mov	edx, [esp+0BCh+var_88]
		mov	[eax+1F0h], ecx
		mov	ecx, [esp+0BCh+var_94]
		mov	[eax+1ECh], edx
		mov	[eax+114h], ecx
		mov	ecx, [esp+0BCh+arg_4]
		test	ecx, ecx
		jz	loc_64205B25
		add	eax, 0Ch
		mov	edx, [esp+0BCh+var_80]
		mov	[esp+0BCh+var_78], eax
		mov	eax, [esp+0BCh+var_9C]
		mov	ebp, [edx+3Ch]
		mov	esi, [eax+164h]
		mov	eax, [edx+44h]
		lea	ecx, [esi+3Ch]
		lea	eax, [ebp+eax*4+0]
		mov	[esp+0BCh+var_98], eax
		lea	ebx, [esi+50h]
		cmp	[esp+0BCh+var_98], ebp
		mov	[esp+0BCh+var_90], ecx
		jz	short loc_64205793
		nop

loc_64205730:				; CODE XREF: _XML_ExternalEntityParserCreate+301j
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_6420578A
		mov	edx, [eax]
		jmp	short loc_64205743
; ---------------------------------------------------------------------------
		align 10h

loc_64205740:				; CODE XREF: _XML_ExternalEntityParserCreate+2CDj
		add	edx, 1

loc_64205743:				; CODE XREF: _XML_ExternalEntityParserCreate+2A9j
		mov	eax, [ebx+0Ch]
		cmp	eax, [ebx+8]
		jz	loc_64205A57

loc_6420574F:				; CODE XREF: _XML_ExternalEntityParserCreate+603j
		movzx	ecx, byte ptr [edx]
		mov	[eax], cl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [edx],	0
		jnz	short loc_64205740
		mov	ecx, [esi+60h]
		mov	eax, [esi+5Ch]
		test	ecx, ecx
		mov	[esi+60h], eax
		jz	loc_64205A6A
		mov	edx, [esp+0BCh+var_90]
		mov	eax, edi
		mov	[esp+0BCh+var_BC], 8 ; size_t
		call	_lookup
		test	eax, eax
		jz	loc_64205A6A

loc_6420578A:				; CODE XREF: _XML_ExternalEntityParserCreate+2A5j
		add	ebp, 4
		cmp	[esp+0BCh+var_98], ebp
		jnz	short loc_64205730

loc_64205793:				; CODE XREF: _XML_ExternalEntityParserCreate+29Dj
		mov	eax, [esp+0BCh+var_80]
		mov	[esp+0BCh+var_94], edi
		mov	edi, esi
		mov	edx, [eax+28h]
		mov	ecx, eax
		mov	eax, [eax+30h]
		add	ecx, 98h
		mov	[esp+0BCh+var_84], ecx
		lea	ecx, [esi+98h]
		mov	[esp+0BCh+var_7C], ecx
		mov	[esp+0BCh+var_98], edx
		lea	eax, [edx+eax*4]
		mov	[esp+0BCh+var_8C], eax
		lea	eax, [esi+28h]
		cmp	[esp+0BCh+var_8C], edx
		mov	[esp+0BCh+var_88], eax
		jz	loc_64205899

loc_642057D5:				; CODE XREF: _XML_ExternalEntityParserCreate+403j
		mov	esi, [edx]
		test	esi, esi
		jz	loc_64205886
		mov	eax, [edi+5Ch]
		cmp	eax, [edi+58h]
		jz	loc_64205AD5

loc_642057EB:				; CODE XREF: _XML_ExternalEntityParserCreate+653j
		mov	byte ptr [eax],	0
		add	eax, 1
		mov	[edi+5Ch], eax
		mov	ebp, [esi]
		jmp	short loc_642057FB
; ---------------------------------------------------------------------------

loc_642057F8:				; CODE XREF: _XML_ExternalEntityParserCreate+387j
		add	ebp, 1

loc_642057FB:				; CODE XREF: _XML_ExternalEntityParserCreate+366j
		mov	eax, [ebx+0Ch]
		cmp	eax, [ebx+8]
		jz	loc_64205AB5

loc_64205807:				; CODE XREF: _XML_ExternalEntityParserCreate+633j
		movzx	edx, byte ptr [ebp+0]
		mov	[eax], dl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ebp+0], 0
		jnz	short loc_642057F8
		mov	ecx, [edi+60h]
		mov	eax, [edi+5Ch]
		test	ecx, ecx
		mov	[edi+60h], eax
		jz	loc_64205A6A
		mov	edx, [esp+0BCh+var_88]
		add	ecx, 1
		mov	eax, [esp+0BCh+var_94]
		mov	[esp+0BCh+var_BC], 0Ch ; size_t
		call	_lookup
		test	eax, eax
		mov	ebp, eax
		jz	loc_64205A6A
		mov	edx, [esi+4]
		movzx	eax, byte ptr [esi+8]
		test	edx, edx
		mov	[ebp+8], al
		jz	short loc_64205886
		movzx	eax, byte ptr [esi+9]
		mov	[ebp+9], al
		mov	eax, [esi+4]
		cmp	eax, [esp+0BCh+var_84]
		jz	loc_64205AC8
		mov	[esp+0BCh+var_BC], 0 ; size_t
		mov	edx, [esp+0BCh+var_90]
		mov	ecx, [eax]
		mov	eax, [esp+0BCh+var_94]
		call	_lookup
		mov	[ebp+4], eax

loc_64205886:				; CODE XREF: _XML_ExternalEntityParserCreate+349j
					; _XML_ExternalEntityParserCreate+3C7j	...
		add	[esp+0BCh+var_98], 4
		mov	edx, [esp+0BCh+var_98]
		cmp	[esp+0BCh+var_8C], edx
		jnz	loc_642057D5

loc_64205899:				; CODE XREF: _XML_ExternalEntityParserCreate+33Fj
		mov	eax, [esp+0BCh+var_80]
		mov	esi, edi
		mov	edi, [esp+0BCh+var_94]
		mov	[esp+0BCh+var_8C], esi
		mov	edx, [eax+14h]
		mov	eax, [eax+1Ch]
		mov	[esp+0BCh+var_84], edi
		mov	[esp+0BCh+var_7C], edx
		mov	ecx, edx
		lea	eax, [edx+eax*4]
		mov	[esp+0BCh+var_74], eax
		lea	eax, [esi+14h]
		mov	[esp+0BCh+var_70], eax

loc_642058C5:				; CODE XREF: _XML_ExternalEntityParserCreate+5C2j
		cmp	[esp+0BCh+var_74], ecx
		jz	loc_64205B75
		mov	ebp, [ecx]
		test	ebp, ebp
		jz	loc_64205A49
		mov	esi, [ebp+0]
		mov	eax, [ebx+0Ch]
		jmp	short loc_642058E4
; ---------------------------------------------------------------------------

loc_642058E1:				; CODE XREF: _XML_ExternalEntityParserCreate+46Bj
		add	esi, 1

loc_642058E4:				; CODE XREF: _XML_ExternalEntityParserCreate+44Fj
		cmp	[ebx+8], eax
		jz	loc_64205B5C

loc_642058ED:				; CODE XREF: _XML_ExternalEntityParserCreate+6E0j
		movzx	edx, byte ptr [esi]
		mov	[eax], dl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [esi],	0
		jnz	short loc_642058E1
		mov	eax, [esp+0BCh+var_8C]
		mov	ecx, [eax+60h]
		mov	edx, eax
		mov	eax, [eax+5Ch]
		test	ecx, ecx
		mov	[edx+60h], eax
		jz	loc_64205A6A
		mov	edx, [esp+0BCh+var_70]
		mov	eax, [esp+0BCh+var_84]
		mov	[esp+0BCh+var_BC], 18h ; size_t
		call	_lookup
		test	eax, eax
		mov	edi, eax
		jz	loc_64205A6A
		mov	eax, [ebp+0Ch]
		test	eax, eax
		jnz	loc_64205C70

loc_6420593D:				; CODE XREF: _XML_ExternalEntityParserCreate+7F1j
		mov	eax, [ebp+8]
		test	eax, eax
		jz	short loc_6420595D
		mov	[esp+0BCh+var_BC], 0 ; size_t
		mov	edx, [esp+0BCh+var_88]
		mov	ecx, [eax]
		mov	eax, [esp+0BCh+var_84]
		call	_lookup
		mov	[edi+8], eax

loc_6420595D:				; CODE XREF: _XML_ExternalEntityParserCreate+4B2j
		mov	edx, [ebp+4]
		mov	eax, [ebp+0Ch]
		test	edx, edx
		mov	[edi+0Ch], eax
		mov	[edi+10h], eax
		jz	short loc_64205989
		mov	[esp+0BCh+var_BC], 0 ; size_t
		mov	eax, [esp+0BCh+var_84]
		mov	ecx, [edx]
		mov	edx, [esp+0BCh+var_90]
		call	_lookup
		mov	[edi+4], eax
		mov	eax, [edi+0Ch]

loc_64205989:				; CODE XREF: _XML_ExternalEntityParserCreate+4DBj
		test	eax, eax
		jle	loc_64205A49
		xor	esi, esi
		mov	[esp+0BCh+var_98], 0
		nop
		lea	esi, [esi+0]

loc_642059A0:				; CODE XREF: _XML_ExternalEntityParserCreate+5B3j
		mov	eax, [ebp+14h]
		mov	edx, [edi+14h]
		mov	eax, [eax+esi]
		add	edx, esi
		mov	[esp+0BCh+var_94], edx
		mov	edx, [esp+0BCh+var_88]
		mov	[esp+0BCh+var_BC], 0 ; size_t
		mov	ecx, [eax]
		mov	eax, [esp+0BCh+var_84]
		call	_lookup
		mov	ecx, [esp+0BCh+var_94]
		mov	edx, [ebp+14h]
		movzx	edx, byte ptr [edx+esi+4]
		mov	[ecx], eax
		mov	eax, [edi+14h]
		mov	[eax+esi+4], dl
		mov	eax, [ebp+14h]
		mov	edx, [eax+esi+8]
		test	edx, edx
		jz	loc_64205AE8
		mov	eax, [edi+14h]
		add	eax, esi
		mov	[esp+0BCh+var_94], eax
		mov	eax, [ebx+0Ch]
		jmp	short loc_642059FA
; ---------------------------------------------------------------------------

loc_642059F7:				; CODE XREF: _XML_ExternalEntityParserCreate+581j
		add	edx, 1

loc_642059FA:				; CODE XREF: _XML_ExternalEntityParserCreate+565j
		cmp	[ebx+8], eax
		jz	loc_64205AF8

loc_64205A03:				; CODE XREF: _XML_ExternalEntityParserCreate+685j
		movzx	ecx, byte ptr [edx]
		mov	[eax], cl
		add	eax, 1
		mov	[ebx+0Ch], eax
		cmp	byte ptr [edx],	0
		jnz	short loc_642059F7
		mov	edx, [esp+0BCh+var_8C]
		mov	eax, [edx+60h]
		mov	ecx, edx
		mov	edx, [edx+5Ch]
		mov	[ecx+60h], edx

loc_64205A22:				; CODE XREF: _XML_ExternalEntityParserCreate+67Dj
		mov	edx, [esp+0BCh+var_94]
		mov	[edx+8], eax
		mov	eax, [edi+14h]
		mov	eax, [eax+esi+8]
		test	eax, eax
		jz	short loc_64205A6A

loc_64205A34:				; CODE XREF: _XML_ExternalEntityParserCreate+663j
		add	[esp+0BCh+var_98], 1
		add	esi, 0Ch
		mov	ecx, [esp+0BCh+var_98]
		cmp	ecx, [edi+0Ch]
		jl	loc_642059A0

loc_64205A49:				; CODE XREF: _XML_ExternalEntityParserCreate+443j
					; _XML_ExternalEntityParserCreate+4FBj
		add	[esp+0BCh+var_7C], 4
		mov	ecx, [esp+0BCh+var_7C]
		jmp	loc_642058C5
; ---------------------------------------------------------------------------

loc_64205A57:				; CODE XREF: _XML_ExternalEntityParserCreate+2B9j
		mov	eax, ebx
		mov	[esp+0BCh+var_A0], edx
		call	_poolGrow
		mov	edx, [esp+0BCh+var_A0]
		test	al, al
		jnz	short loc_64205A90

loc_64205A6A:				; CODE XREF: _XML_ExternalEntityParserCreate+2DAj
					; _XML_ExternalEntityParserCreate+2F4j	...
		mov	ecx, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_BC], ecx
		call	_XML_ParserFree
		mov	[esp+0BCh+var_9C], 0

loc_64205A7E:				; CODE XREF: _XML_ExternalEntityParserCreate+151j
		mov	eax, [esp+0BCh+var_9C]
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64205A90:				; CODE XREF: _XML_ExternalEntityParserCreate+5D8j
		mov	eax, [ebx+0Ch]
		jmp	loc_6420574F
; ---------------------------------------------------------------------------

loc_64205A98:				; CODE XREF: _XML_ExternalEntityParserCreate+11Aj
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+arg_8]
		lea	edx, [edi+0Ch]
		xor	ecx, ecx
		call	_parserCreate
		mov	[esp+0BCh+var_9C], eax
		jmp	loc_642055DB
; ---------------------------------------------------------------------------

loc_64205AB5:				; CODE XREF: _XML_ExternalEntityParserCreate+371j
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jz	short loc_64205A6A
		mov	eax, [ebx+0Ch]
		jmp	loc_64205807
; ---------------------------------------------------------------------------

loc_64205AC8:				; CODE XREF: _XML_ExternalEntityParserCreate+3D7j
		mov	ecx, [esp+0BCh+var_7C]
		mov	[ebp+4], ecx
		nop
		jmp	loc_64205886
; ---------------------------------------------------------------------------

loc_64205AD5:				; CODE XREF: _XML_ExternalEntityParserCreate+355j
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jz	short loc_64205A6A
		mov	eax, [edi+5Ch]
		jmp	loc_642057EB
; ---------------------------------------------------------------------------

loc_64205AE8:				; CODE XREF: _XML_ExternalEntityParserCreate+553j
		mov	eax, [edi+14h]
		mov	dword ptr [eax+esi+8], 0
		jmp	loc_64205A34
; ---------------------------------------------------------------------------

loc_64205AF8:				; CODE XREF: _XML_ExternalEntityParserCreate+56Dj
		mov	eax, ebx
		mov	[esp+0BCh+var_A0], edx
		call	_poolGrow
		mov	edx, [esp+0BCh+var_A0]
		test	al, al
		jnz	short loc_64205B12
		xor	eax, eax
		jmp	loc_64205A22
; ---------------------------------------------------------------------------

loc_64205B12:				; CODE XREF: _XML_ExternalEntityParserCreate+679j
		mov	eax, [ebx+0Ch]
		jmp	loc_64205A03
; ---------------------------------------------------------------------------

loc_64205B1A:				; CODE XREF: _XML_ExternalEntityParserCreate+20Bj
		mov	[eax+4], ebx
		lea	esi, [esi+0]
		jmp	loc_642056A4
; ---------------------------------------------------------------------------

loc_64205B25:				; CODE XREF: _XML_ExternalEntityParserCreate+266j
		mov	edx, [esp+0BCh+var_9C]
		mov	eax, edx
		add	eax, 100h
		mov	byte ptr [edx+1E8h], 1
		mov	[esp+0BCh+var_BC], eax
		call	_XmlPrologStateInitExternalEntity
		mov	ecx, [esp+0BCh+var_9C]
		mov	eax, [esp+0BCh+var_9C]
		mov	dword ptr [ecx+118h], offset _externalParEntInitProcessor
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64205B5C:				; CODE XREF: _XML_ExternalEntityParserCreate+457j
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jz	loc_64205A6A
		mov	eax, [ebx+0Ch]
		xchg	ax, ax
		jmp	loc_642058ED
; ---------------------------------------------------------------------------

loc_64205B75:				; CODE XREF: _XML_ExternalEntityParserCreate+439j
		mov	eax, [esp+0BCh+var_80]
		mov	ecx, ebx
		mov	esi, [esp+0BCh+var_8C]
		mov	edi, [esp+0BCh+var_84]
		mov	[esp+0BCh+var_BC], eax
		mov	edx, esi
		mov	eax, edi
		call	_copyEntityTable
		test	eax, eax
		jz	loc_64205A6A
		mov	eax, [esp+0BCh+var_80]
		lea	edx, [esi+84h]
		mov	ecx, ebx
		add	eax, 84h
		mov	[esp+0BCh+var_BC], eax
		mov	eax, edi
		call	_copyEntityTable
		test	eax, eax
		jz	loc_64205A6A
		mov	edx, [esp+0BCh+var_80]
		movzx	eax, byte ptr [edx+83h]
		mov	[esi+83h], al
		movzx	eax, byte ptr [edx+80h]
		mov	[esi+80h], al
		movzx	eax, byte ptr [edx+81h]
		mov	[esi+81h], al
		movzx	eax, byte ptr [edx+82h]
		mov	[esi+82h], al
		movzx	eax, byte ptr [edx+0A0h]
		mov	[esi+0A0h], al
		mov	eax, [edx+0A4h]
		mov	[esi+0A4h], eax
		mov	eax, [edx+0A8h]
		mov	[esi+0A8h], eax
		mov	eax, [edx+0ACh]
		mov	[esi+0ACh], eax
		mov	eax, [edx+0B4h]
		mov	[esi+0B4h], eax
		mov	eax, [edx+0B8h]
		mov	edx, [esp+0BCh+arg_4]
		mov	[esi+0B8h], eax
		mov	eax, [esp+0BCh+var_9C]
		call	_setContext
		test	al, al
		jz	loc_64205A6A
		mov	eax, [esp+0BCh+var_9C]
		mov	dword ptr [eax+118h], offset _externalEntityInitProcessor
		mov	eax, [esp+0BCh+var_9C]
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64205C70:				; CODE XREF: _XML_ExternalEntityParserCreate+4A7j
		imul	eax, 0Ch
		mov	ecx, [esp+0BCh+var_78]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ecx]
		test	eax, eax
		mov	[edi+14h], eax
		jnz	loc_6420593D
		mov	eax, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_BC], edi
		call	dword ptr [eax+14h]
		jmp	loc_64205A6A
_XML_ExternalEntityParserCreate	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_appendAttributeValue proc near		; CODE XREF: _appendAttributeValue+34Ap
					; _storeAtts+1B1p ...

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_45		= byte ptr -45h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	ebp, eax
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 6Ch
		mov	eax, [eax+164h]
		mov	[esp+7Ch+var_45], cl
		mov	ebx, [esp+7Ch+arg_8]
		lea	ecx, [ebp+1B8h]
		mov	[esp+7Ch+var_3C], ecx
		lea	edi, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_40], eax
		add	eax, 50h
		mov	[esp+7Ch+var_38], eax
		movzx	eax, [esp+7Ch+var_45]
		lea	edx, [ebx+0Ch]
		mov	[esp+7Ch+var_44], edx
		mov	[esp+7Ch+var_34], eax
		mov	eax, [esp+7Ch+arg_0]

loc_64205CEC:				; CODE XREF: _appendAttributeValue+D0j
		mov	ecx, [esp+7Ch+arg_4]
		lea	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_74], ecx
		call	dword ptr [esi+10h]
		add	eax, 4
		cmp	eax, 2Bh	; switch 44 cases
		jbe	short loc_64205D30

loc_64205D11:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		cmp	[ebp+90h], esi	; jumptable 64205D30 default case
		mov	eax, 17h
		jz	loc_64206015

loc_64205D22:				; CODE XREF: _appendAttributeValue+130j
					; _appendAttributeValue+257j ...
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64205D30:				; CODE XREF: _appendAttributeValue+6Fj
		jmp	ds:off_6421D100[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64205D37:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		mov	eax, [esp+7Ch+arg_0] ; jumptable 64205D30 case 1
		add	eax, [esi+44h]
		mov	[esp+7Ch+var_20], eax

loc_64205D45:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		cmp	[esp+7Ch+var_45], 0 ; jumptable	64205D30 cases 11,43
		jz	loc_64205F00
		mov	eax, [ebx+0Ch]

loc_64205D53:				; CODE XREF: _appendAttributeValue+270j
		cmp	[ebx+8], eax
		jz	loc_64206087

loc_64205D5C:				; CODE XREF: _appendAttributeValue+3F9j
		mov	byte ptr [eax],	20h
		add	eax, 1
		mov	[ebx+0Ch], eax

loc_64205D65:				; CODE XREF: _appendAttributeValue+16Bj
					; _appendAttributeValue+175j ...
		mov	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+arg_0], eax
		jmp	loc_64205CEC
; ---------------------------------------------------------------------------

loc_64205D75:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		mov	ecx, [esp+7Ch+arg_0] ; jumptable 64205D30 case 10
		mov	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_28], ecx
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jz	loc_64206122

loc_64205D8F:				; CODE XREF: _appendAttributeValue+493j
		mov	[esp+7Ch+var_4C], ebp
		mov	ebp, edx

loc_64205D95:				; CODE XREF: _appendAttributeValue+129j
		mov	eax, [ebx+8]
		lea	edx, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_6C], eax
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_70], eax
		call	dword ptr [esi+3Ch]
		cmp	ebp, [esp+7Ch+var_28]
		jz	loc_64206050
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jnz	short loc_64205D95

loc_64205DCB:				; CODE XREF: _appendAttributeValue+1D5j
					; _appendAttributeValue+2A2j ...
		mov	eax, 1
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_64205DD5:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		add	esp, 6Ch	; jumptable 64205D30 case 0
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64205DE0:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		mov	ecx, [esp+7Ch+arg_0] ; jumptable 64205D30 case 14
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_78], ecx
		call	dword ptr [esi+2Ch]
		test	eax, eax
		js	loc_642060E2
		cmp	eax, 20h
		jnz	short loc_64205E1B
		cmp	[esp+7Ch+var_45], 0
		jnz	short loc_64205E1B
		mov	edx, [ebx+0Ch]
		cmp	edx, [ebx+10h]
		jz	loc_64205D65
		cmp	byte ptr [edx-1], 20h
		jz	loc_64205D65

loc_64205E1B:				; CODE XREF: _appendAttributeValue+15Cj
					; _appendAttributeValue+163j
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], eax
		call	_XmlUtf8Encode
		cmp	eax, 0
		mov	ecx, eax
		jz	loc_642060F4
		jle	loc_64205D65
		xor	edx, edx
		mov	eax, [ebx+0Ch]
		mov	[esp+7Ch+var_4C], ebp
		mov	ebp, edx
		mov	[esp+7Ch+var_30], esi
		mov	esi, ecx
		jmp	short loc_64205E67
; ---------------------------------------------------------------------------
		align 10h

loc_64205E50:				; CODE XREF: _appendAttributeValue+1CAj
					; _appendAttributeValue+1E0j
		movzx	edx, byte ptr [edi+ebp]
		add	ebp, 1
		mov	[eax], dl
		add	eax, 1
		cmp	esi, ebp
		mov	[ebx+0Ch], eax
		jle	loc_64206040

loc_64205E67:				; CODE XREF: _appendAttributeValue+1A9j
		cmp	[ebx+8], eax
		jnz	short loc_64205E50
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jz	loc_64205DCB
		mov	eax, [ebx+0Ch]
		xchg	ax, ax
		jmp	short loc_64205E50
; ---------------------------------------------------------------------------

loc_64205E82:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		mov	edx, [esi+44h]	; jumptable 64205D30 case 13
		mov	[esp+7Ch+var_7C], esi
		mov	eax, edx
		neg	eax
		add	edx, [esp+7Ch+arg_0]
		add	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_74], eax
		call	dword ptr [esi+30h]
		test	al, al
		mov	edx, eax
		jz	short loc_64205F20
		mov	eax, [ebx+0Ch]
		cmp	eax, [ebx+8]
		jz	loc_6420609E

loc_64205EB4:				; CODE XREF: _appendAttributeValue+419j
		mov	[eax], dl
		add	eax, 1
		mov	[ebx+0Ch], eax
		jmp	loc_64205D65
; ---------------------------------------------------------------------------

loc_64205EC1:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		cmp	[ebp+90h], esi	; jumptable 64205D30 case 3
		jz	loc_64206027

loc_64205ECD:				; CODE XREF: _appendAttributeValue+246j
		add	esp, 6Ch
		mov	eax, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64205EE0:				; CODE XREF: _appendAttributeValue:loc_64205D30j
					; DATA XREF: .rdata:off_6421D100o
		cmp	[ebp+90h], esi	; jumptable 64205D30 case 4
		jnz	short loc_64205ECD
		mov	eax, [esp+7Ch+var_20]
		mov	[ebp+120h], eax
		mov	eax, 4
		jmp	loc_64205D22
; ---------------------------------------------------------------------------
		align 10h

loc_64205F00:				; CODE XREF: _appendAttributeValue+AAj
		mov	eax, [ebx+0Ch]
		cmp	eax, [ebx+10h]
		jz	loc_64205D65
		cmp	byte ptr [eax-1], 20h
		jnz	loc_64205D53
		jmp	loc_64205D65
; ---------------------------------------------------------------------------
		align 10h

loc_64205F20:				; CODE XREF: _appendAttributeValue+206j
		mov	eax, [esi+44h]
		mov	edx, esi
		mov	ecx, [esp+7Ch+arg_0]
		add	ecx, eax
		neg	eax
		add	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_7C], eax
		mov	eax, [esp+7Ch+var_3C]
		call	_poolStoreString
		test	eax, eax
		jz	loc_64205DCB
		mov	edx, [esp+7Ch+var_40]
		mov	ecx, eax
		mov	eax, ebp
		mov	[esp+7Ch+var_7C], 0 ; size_t
		call	_lookup
		cmp	[esp+7Ch+var_38], ebx
		mov	[esp+7Ch+var_30], eax
		mov	eax, [ebp+1C8h]
		mov	[ebp+1C4h], eax
		jz	loc_642060BE
		mov	edx, [esp+7Ch+var_40]
		cmp	byte ptr [edx+81h], 0
		jnz	loc_64206064

loc_64205F87:				; CODE XREF: _appendAttributeValue+3D0j
		mov	eax, [esp+7Ch+var_30]
		test	eax, eax
		jz	loc_642061A7
		mov	eax, [esp+7Ch+var_30]
		cmp	byte ptr [eax+22h], 0
		jz	loc_6420619D

loc_64205FA1:				; CODE XREF: _appendAttributeValue+3DCj
		mov	edx, [esp+7Ch+var_30]
		cmp	byte ptr [edx+20h], 0
		jnz	short loc_64206004
		mov	eax, edx
		mov	edx, [edx+1Ch]
		test	edx, edx
		jnz	loc_6420617A
		mov	ecx, eax
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6420613E
		add	eax, [ecx+8]
		mov	byte ptr [ecx+20h], 1
		mov	ecx, [esp+7Ch+var_30]
		mov	edx, [ebp+0E4h]
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], eax
		mov	eax, [ecx+4]
		mov	ecx, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_7C], eax
		mov	eax, ebp
		call	_appendAttributeValue
		mov	edx, [esp+7Ch+var_30]
		mov	byte ptr [edx+20h], 0
		test	eax, eax
		jz	loc_64205D65
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_64206004:				; CODE XREF: _appendAttributeValue+309j
		cmp	[ebp+90h], esi
		mov	eax, 0Ch
		jnz	loc_64205D22

loc_64206015:				; CODE XREF: _appendAttributeValue+7Cj
		mov	ecx, [esp+7Ch+arg_0]
		mov	[ebp+120h], ecx
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_64206027:				; CODE XREF: _appendAttributeValue+227j
		mov	edx, [esp+7Ch+arg_0]
		mov	eax, 4
		mov	[ebp+120h], edx
		jmp	loc_64205D22
; ---------------------------------------------------------------------------
		align 10h

loc_64206040:				; CODE XREF: _appendAttributeValue+1C1j
		mov	ebp, [esp+7Ch+var_4C]
		mov	esi, [esp+7Ch+var_30]
		jmp	loc_64205D65
; ---------------------------------------------------------------------------
		align 10h

loc_64206050:				; CODE XREF: _appendAttributeValue+11Aj
		mov	eax, [ebx+10h]
		mov	ebp, [esp+7Ch+var_4C]
		test	eax, eax
		jnz	loc_64205D65
		jmp	loc_64205DCB
; ---------------------------------------------------------------------------

loc_64206064:				; CODE XREF: _appendAttributeValue+2E1j
		cmp	byte ptr [edx+82h], 0
		setnz	al

loc_6420606E:				; CODE XREF: _appendAttributeValue+440j
					; _appendAttributeValue+47Dj
		test	al, al
		jnz	loc_64205F87

loc_64206076:				; CODE XREF: _appendAttributeValue+426j
		mov	ecx, [esp+7Ch+var_30]
		test	ecx, ecx
		jnz	loc_64205FA1
		jmp	loc_64205D65
; ---------------------------------------------------------------------------

loc_64206087:				; CODE XREF: _appendAttributeValue+B6j
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jz	loc_64205DCB
		mov	eax, [ebx+0Ch]
		jmp	loc_64205D5C
; ---------------------------------------------------------------------------

loc_6420609E:				; CODE XREF: _appendAttributeValue+20Ej
		mov	eax, ebx
		mov	byte ptr [esp+7Ch+var_50], dl
		call	_poolGrow
		movzx	edx, byte ptr [esp+7Ch+var_50]
		test	al, al
		jz	loc_64205DCB
		mov	eax, [ebx+0Ch]
		jmp	loc_64205EB4
; ---------------------------------------------------------------------------

loc_642060BE:				; CODE XREF: _appendAttributeValue+2D0j
		mov	ecx, [ebp+110h]
		test	ecx, ecx
		jz	short loc_64206076
		mov	ecx, [esp+7Ch+var_40]
		cmp	byte ptr [ecx+82h], 0
		jz	short loc_64206113
		mov	edx, [ebp+12Ch]
		test	edx, edx
		setz	al
		jmp	short loc_6420606E
; ---------------------------------------------------------------------------

loc_642060E2:				; CODE XREF: _appendAttributeValue+153j
		cmp	[ebp+90h], esi
		jz	short loc_64206163

loc_642060EA:				; CODE XREF: _appendAttributeValue+45Aj
		mov	eax, 0Eh
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_642060F4:				; CODE XREF: _appendAttributeValue+18Cj
		cmp	[ebp+90h], esi
		jnz	short loc_642060EA
		mov	edx, [esp+7Ch+arg_0]
		mov	eax, 0Eh
		mov	[ebp+120h], edx
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_64206113:				; CODE XREF: _appendAttributeValue+433j
		cmp	byte ptr [ecx+81h], 0
		setz	al
		jmp	loc_6420606E
; ---------------------------------------------------------------------------

loc_64206122:				; CODE XREF: _appendAttributeValue+E9j
		mov	eax, ebx
		mov	[esp+7Ch+var_50], edx
		call	_poolGrow
		mov	edx, [esp+7Ch+var_50]
		test	al, al
		jnz	loc_64205D8F
		jmp	loc_64205DCB
; ---------------------------------------------------------------------------

loc_6420613E:				; CODE XREF: _appendAttributeValue+31Fj
		cmp	[ebp+90h], esi
		mov	al, 10h
		jnz	loc_64205D22
		mov	eax, [esp+7Ch+arg_0]
		mov	[ebp+120h], eax
		mov	eax, 10h
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_64206163:				; CODE XREF: _appendAttributeValue+448j
		mov	eax, [esp+7Ch+arg_0]
		mov	[ebp+120h], eax
		mov	eax, 0Eh
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_6420617A:				; CODE XREF: _appendAttributeValue+312j
		cmp	[ebp+90h], esi
		mov	eax, 0Fh
		jnz	loc_64205D22
		mov	edx, [esp+7Ch+arg_0]
		mov	[ebp+120h], edx
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_6420619D:				; CODE XREF: _appendAttributeValue+2FBj
		mov	eax, 18h
		jmp	loc_64205D22
; ---------------------------------------------------------------------------

loc_642061A7:				; CODE XREF: _appendAttributeValue+2EDj
		mov	eax, 0Bh
		jmp	loc_64205D22
_appendAttributeValue endp

; ---------------------------------------------------------------------------
		jmp	short _storeAtts
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_storeAtts	proc near		; CODE XREF: .text:642061B1j
					; _doContent+58Dp ...

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_90		= dword	ptr -90h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 0ACh
		mov	eax, [eax+164h]
		mov	edx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_74], ecx
		mov	[esp+0BCh+var_BC], 0 ; size_t
		mov	ebx, eax
		mov	ecx, [edx]
		add	ebx, 14h
		mov	[esp+0BCh+var_44], eax
		mov	edx, ebx
		mov	eax, esi
		call	_lookup
		test	eax, eax
		mov	[esp+0BCh+var_54], eax
		jz	loc_6420680A

loc_64206206:				; CODE XREF: _storeAtts+6BBj
					; _storeAtts+6CCj
		mov	eax, [esi+188h]
		mov	ecx, [esp+0BCh+var_54]
		mov	ecx, [ecx+0Ch]
		mov	[esp+0BCh+var_B0], eax
		mov	eax, [esi+17Ch]
		mov	[esp+0BCh+var_BC], edi
		mov	[esp+0BCh+var_60], ecx
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [esp+0BCh+var_74]
		mov	[esp+0BCh+var_B8], eax
		call	dword ptr [edi+28h]
		mov	ebx, [esi+17Ch]
		mov	[esp+0BCh+var_5C], eax
		add	eax, [esp+0BCh+var_60]
		cmp	eax, ebx
		jg	loc_64206769

loc_64206249:				; CODE XREF: _storeAtts+5FBj
		mov	edx, [esi+188h]
		mov	[esp+0BCh+var_68], edx

loc_64206253:				; CODE XREF: _storeAtts+5DBj
		mov	ecx, [esp+0BCh+var_5C]
		test	ecx, ecx
		jle	loc_64206E70
		mov	ebx, [esp+0BCh+var_68]
		lea	ecx, [esi+1A0h]
		lea	eax, [esi+1ACh]
		mov	[esp+0BCh+var_58], ecx
		mov	[esp+0BCh+var_4C], eax
		mov	[esp+0BCh+var_64], 0
		mov	[esp+0BCh+var_74], 0
		mov	[esp+0BCh+var_70], 0
		nop

loc_64206290:				; CODE XREF: _storeAtts+24Ej
		mov	edx, [esp+0BCh+var_74]
		shl	edx, 4
		add	ebx, edx
		mov	ebp, [ebx]
		mov	[esp+0BCh+var_78], edx
		mov	[esp+0BCh+var_BC], edi
		mov	[esp+0BCh+var_B8], ebp
		call	dword ptr [edi+20h]
		mov	edx, edi
		add	ebp, eax
		mov	eax, esi
		mov	[esp+0BCh+var_BC], ebp
		mov	ecx, [ebx]
		call	_getAttributeId
		test	eax, eax
		mov	ebx, eax
		jz	loc_64206492
		mov	eax, [eax]
		cmp	byte ptr [eax-1], 0
		jnz	loc_642067C0
		mov	byte ptr [eax-1], 1
		mov	edx, [esp+0BCh+var_70]
		mov	eax, [ebx]
		mov	ecx, [esp+0BCh+var_68]
		mov	ebp, [esp+0BCh+var_78]
		add	ebp, [esi+188h]
		mov	[ecx+edx*4], eax
		add	edx, 1
		mov	[esp+0BCh+var_6C], edx
		cmp	byte ptr [ebp+0Ch], 0
		jnz	loc_64206413
		cmp	byte ptr [ebx+8], 0
		jz	short loc_6420634E
		mov	edx, [esp+0BCh+var_60]
		test	edx, edx
		jle	short loc_6420634E
		mov	edx, [esp+0BCh+var_54]
		mov	eax, [edx+14h]
		cmp	ebx, [eax]
		jz	loc_642066EA
		mov	[esp+0BCh+var_50], esi
		add	eax, 0Ch
		xor	edx, edx
		mov	[esp+0BCh+var_78], ebp
		mov	esi, [esp+0BCh+var_60]
		jmp	short loc_6420633F
; ---------------------------------------------------------------------------
		align 10h

loc_64206330:				; CODE XREF: _storeAtts+184j
		mov	ecx, [eax]
		mov	ebp, eax
		add	eax, 0Ch
		cmp	ebx, ecx
		jz	loc_642066E0

loc_6420633F:				; CODE XREF: _storeAtts+169j
		add	edx, 1
		cmp	esi, edx
		jg	short loc_64206330
		mov	ebp, [esp+0BCh+var_78]
		mov	esi, [esp+0BCh+var_50]

loc_6420634E:				; CODE XREF: _storeAtts+13Fj
					; _storeAtts+147j
		mov	ecx, 1
		mov	byte ptr [esp+0BCh+var_78], 1

loc_64206358:				; CODE XREF: _storeAtts+535j
		mov	eax, [esp+0BCh+var_58]
		mov	edx, edi
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebp+8]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebp+4]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, esi
		call	_appendAttributeValue
		test	eax, eax
		jnz	loc_64206497
		cmp	byte ptr [esp+0BCh+var_78], 0
		jz	loc_64206691
		mov	eax, [esi+1ACh]

loc_6420638F:				; CODE XREF: _storeAtts+518j
		cmp	eax, [esi+1A8h]
		jz	loc_642066B6

loc_6420639B:				; CODE XREF: _storeAtts+4F0j
					; _storeAtts+50Dj
		mov	byte ptr [eax],	0
		add	eax, 1
		mov	edx, [esp+0BCh+var_6C]
		mov	ecx, [esp+0BCh+var_68]
		mov	[esi+1ACh], eax
		mov	eax, [esi+1B0h]
		lea	edx, [ecx+edx*4]
		mov	[edx], eax
		mov	eax, [esi+1ACh]
		mov	[esp+0BCh+var_78], edx
		mov	[esi+1B0h], eax

loc_642063CA:				; CODE XREF: _storeAtts+5A4j
		mov	edx, [ebx+4]
		test	edx, edx
		jz	loc_64206700
		cmp	byte ptr [ebx+9], 0
		jnz	loc_642064A2
		mov	eax, [esp+0BCh+var_6C]
		add	[esp+0BCh+var_64], 1
		add	eax, 1
		mov	[esp+0BCh+var_70], eax
		mov	eax, [ebx]
		mov	byte ptr [eax-1], 2

loc_642063F5:				; CODE XREF: _storeAtts+54Bj
		add	[esp+0BCh+var_74], 1
		mov	ecx, [esp+0BCh+var_74]
		cmp	[esp+0BCh+var_5C], ecx
		jle	loc_642064D6

loc_64206408:				; CODE XREF: _storeAtts+310j
		mov	ebx, [esi+188h]
		jmp	loc_64206290
; ---------------------------------------------------------------------------

loc_64206413:				; CODE XREF: _storeAtts+135j
		mov	eax, [esp+0BCh+var_68]
		lea	ecx, [eax+edx*4]
		mov	eax, [ebp+4]
		mov	edx, [ebp+8]
		mov	[esp+0BCh+var_78], ecx
		mov	[esp+0BCh+var_20], eax
		mov	eax, [esi+1ACh]
		test	eax, eax
		jz	loc_64206E0B

loc_64206439:				; CODE XREF: _storeAtts+C5Ej
		mov	[esp+0BCh+var_48], esi
		mov	ebp, [esp+0BCh+var_58]
		mov	esi, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_50], ebx
		mov	ebx, edx
		nop
		lea	esi, [esi+0]

loc_64206450:				; CODE XREF: _storeAtts+2C6j
		mov	eax, [ebp+8]
		mov	[esp+0BCh+var_B0], esi
		mov	[esp+0BCh+var_B4], ebx
		mov	[esp+0BCh+var_BC], edi
		mov	[esp+0BCh+var_AC], eax
		lea	eax, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_B8], eax
		call	dword ptr [edi+3Ch]
		cmp	ebx, [esp+0BCh+var_20]
		jz	loc_64206710
		mov	eax, ebp
		call	_poolGrow
		test	al, al
		jnz	short loc_64206450

loc_64206488:				; CODE XREF: _storeAtts+560j
					; _storeAtts+C64j ...
		mov	ecx, [esp+0BCh+var_78]
		mov	dword ptr [ecx], 0

loc_64206492:				; CODE XREF: _storeAtts+FDj
					; _storeAtts+48Bj ...
		mov	eax, 1

loc_64206497:				; CODE XREF: _storeAtts+1B8j
					; _storeAtts+301j ...
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642064A2:				; CODE XREF: _storeAtts+219j
		mov	ecx, [esp+0BCh+arg_4]
		mov	[esp+0BCh+var_B8], ecx ; int
		mov	ecx, [esp+0BCh+var_78]
		mov	eax, [ecx]
		mov	ecx, ebx
		mov	[esp+0BCh+var_BC], eax ; void *
		mov	eax, esi
		call	_addBinding
		test	eax, eax
		jnz	short loc_64206497
		add	[esp+0BCh+var_74], 1
		mov	ecx, [esp+0BCh+var_74]
		cmp	[esp+0BCh+var_5C], ecx
		jg	loc_64206408

loc_642064D6:				; CODE XREF: _storeAtts+242j
					; _storeAtts+CC0j
		mov	eax, [esp+0BCh+var_70]
		mov	edx, [esp+0BCh+var_54]
		mov	[esi+180h], eax
		mov	eax, [edx+8]
		test	eax, eax
		jz	loc_642067F2
		mov	edx, [eax]
		cmp	byte ptr [edx-1], 0
		jz	loc_642067F2
		mov	ebx, [esp+0BCh+var_70]
		test	ebx, ebx
		jz	short loc_64206530
		mov	ecx, [esp+0BCh+var_68]
		xor	eax, eax
		cmp	edx, [ecx]
		jz	loc_64206C71
		mov	ebx, ecx
		mov	ecx, [esp+0BCh+var_70]
		jmp	short loc_64206529
; ---------------------------------------------------------------------------
		align 10h

loc_64206520:				; CODE XREF: _storeAtts+36Ej
		cmp	edx, [ebx+eax*4]
		jz	loc_64206C71

loc_64206529:				; CODE XREF: _storeAtts+357j
		add	eax, 2
		cmp	eax, ecx
		jl	short loc_64206520

loc_64206530:				; CODE XREF: _storeAtts+341j
					; _storeAtts+63Cj ...
		mov	ecx, [esp+0BCh+var_60]
		test	ecx, ecx
		jle	loc_642065D2
		xor	ebx, ebx
		xor	edi, edi
		mov	[esp+0BCh+var_74], esi
		jmp	short loc_64206578
; ---------------------------------------------------------------------------

loc_64206546:				; CODE XREF: _storeAtts+3E1j
		mov	byte ptr [esi-1], 2
		add	[esp+0BCh+var_64], 1

loc_6420654F:				; CODE XREF: _storeAtts+645j
		mov	edx, [eax]
		mov	ecx, [esp+0BCh+var_70]
		mov	esi, [esp+0BCh+var_68]
		mov	edx, [edx]
		mov	[esi+ecx*4], edx
		mov	eax, [eax+8]
		mov	[esi+ecx*4+4], eax
		add	ecx, 2
		mov	[esp+0BCh+var_70], ecx

loc_6420656C:				; CODE XREF: _storeAtts+3C9j
					; _storeAtts+3D0j
		add	edi, 1
		add	ebx, 0Ch
		cmp	[esp+0BCh+var_60], edi
		jle	short loc_642065CE

loc_64206578:				; CODE XREF: _storeAtts+384j
					; _storeAtts+40Cj
		mov	esi, [esp+0BCh+var_54]
		mov	eax, ebx
		add	eax, [esi+14h]
		mov	ecx, [eax]
		mov	esi, [ecx]
		cmp	byte ptr [esi-1], 0
		jnz	short loc_6420656C
		mov	ebp, [eax+8]
		test	ebp, ebp
		jz	short loc_6420656C
		mov	edx, [ecx+4]
		test	edx, edx
		jz	loc_64206801
		cmp	byte ptr [ecx+9], 0
		jz	short loc_64206546
		mov	eax, [esp+0BCh+arg_4]
		mov	[esp+0BCh+var_BC], ebp ; void *
		mov	[esp+0BCh+var_B8], eax ; int
		mov	eax, [esp+0BCh+var_74]
		call	_addBinding
		test	eax, eax
		jnz	loc_64206497
		add	edi, 1
		add	ebx, 0Ch
		cmp	[esp+0BCh+var_60], edi
		jg	short loc_64206578

loc_642065CE:				; CODE XREF: _storeAtts+3B6j
		mov	esi, [esp+0BCh+var_74]

loc_642065D2:				; CODE XREF: _storeAtts+376j
		mov	eax, [esp+0BCh+var_70]
		mov	edx, [esp+0BCh+var_68]
		mov	dword ptr [edx+eax*4], 0
		mov	edx, [esp+0BCh+var_64]
		xor	eax, eax
		test	edx, edx
		jz	loc_642068E9
		movzx	eax, byte ptr [esi+194h]
		mov	edx, [esp+0BCh+var_64]
		mov	ebx, [esi+190h]
		movzx	ecx, al
		add	edx, edx
		sar	edx, cl
		test	edx, edx
		jz	loc_642069B5
		mov	edx, [esp+0BCh+var_64]
		mov	ecx, eax

loc_64206615:				; CODE XREF: _storeAtts+45Ej
		mov	eax, edx
		sar	eax, cl
		add	ecx, 1
		test	eax, eax
		jnz	short loc_64206615
		cmp	cl, 2
		mov	[esi+194h], cl
		jbe	loc_64206D02
		mov	ebx, 1
		shl	ebx, cl
		imul	eax, ebx, 0Ch

loc_64206639:				; CODE XREF: _storeAtts+B53j
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [esi+18Ch]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [esi+10h]
		test	eax, eax
		jz	loc_64206492
		mov	[esi+18Ch], eax
		mov	[esp+0BCh+var_58], ebx

loc_6420665B:				; CODE XREF: _storeAtts+D0Fj
		test	ebx, ebx
		jz	short loc_64206680
		sub	ebx, 1
		lea	eax, [ebx+ebx*2]
		shl	eax, 2
		add	eax, [esi+18Ch]
		jmp	short loc_64206673
; ---------------------------------------------------------------------------

loc_64206670:				; CODE XREF: _storeAtts+4BEj
		sub	ebx, 1

loc_64206673:				; CODE XREF: _storeAtts+4AEj
		mov	dword ptr [eax], 0FFFFFFFFh
		sub	eax, 0Ch
		test	ebx, ebx
		jnz	short loc_64206670

loc_64206680:				; CODE XREF: _storeAtts+49Dj
		mov	[esp+0BCh+var_60], 0FFFFFFFEh
		mov	ecx, [esp+0BCh+var_60]
		jmp	loc_642069D2
; ---------------------------------------------------------------------------

loc_64206691:				; CODE XREF: _storeAtts+1C3j
		mov	edx, [esi+1ACh]
		cmp	edx, [esi+1B0h]
		jz	short loc_642066A8
		cmp	byte ptr [edx-1], 20h
		lea	eax, [edx-1]
		jz	short loc_642066D2

loc_642066A8:				; CODE XREF: _storeAtts+4DDj
		mov	eax, edx
		cmp	eax, [esi+1A8h]
		jnz	loc_6420639B

loc_642066B6:				; CODE XREF: _storeAtts+1D5j
		mov	eax, [esp+0BCh+var_58]
		call	_poolGrow
		test	al, al
		jz	loc_64206492
		mov	eax, [esi+1ACh]
		jmp	loc_6420639B
; ---------------------------------------------------------------------------

loc_642066D2:				; CODE XREF: _storeAtts+4E6j
		mov	[esi+1ACh], eax
		jmp	loc_6420638F
; ---------------------------------------------------------------------------
		align 10h

loc_642066E0:				; CODE XREF: _storeAtts+179j
		mov	eax, ebp
		mov	esi, [esp+0BCh+var_50]
		mov	ebp, [esp+0BCh+var_78]

loc_642066EA:				; CODE XREF: _storeAtts+152j
		movzx	eax, byte ptr [eax+4]
		mov	byte ptr [esp+0BCh+var_78], al
		movzx	ecx, al
		jmp	loc_64206358
; ---------------------------------------------------------------------------
		align 10h

loc_64206700:				; CODE XREF: _storeAtts+20Fj
		mov	edx, [esp+0BCh+var_6C]
		add	edx, 1
		mov	[esp+0BCh+var_70], edx
		jmp	loc_642063F5
; ---------------------------------------------------------------------------

loc_64206710:				; CODE XREF: _storeAtts+2B7j
		mov	esi, [esp+0BCh+var_48]
		mov	ebx, [esp+0BCh+var_50]
		mov	ebp, [esi+1B0h]
		test	ebp, ebp
		jz	loc_64206488
		mov	eax, [esi+1ACh]
		cmp	eax, [esi+1A8h]
		jz	loc_64206E54

loc_64206738:				; CODE XREF: _storeAtts+CABj
		mov	byte ptr [eax],	0
		add	eax, 1
		mov	edx, [esp+0BCh+var_78]
		mov	[esi+1ACh], eax
		mov	eax, [esi+1B0h]
		test	eax, eax
		mov	[edx], eax
		jz	loc_64206492
		mov	eax, [esi+1ACh]
		mov	[esi+1B0h], eax
		jmp	loc_642063CA
; ---------------------------------------------------------------------------

loc_64206769:				; CODE XREF: _storeAtts+83j
		add	eax, 10h
		mov	[esi+17Ch], eax
		shl	eax, 4
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [esi+188h]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [esi+10h]
		test	eax, eax
		mov	[esp+0BCh+var_68], eax
		jz	loc_64206492
		cmp	[esp+0BCh+var_5C], ebx
		mov	[esi+188h], eax
		jle	loc_64206253
		mov	[esp+0BCh+var_B0], eax
		mov	ecx, [esp+0BCh+var_5C]
		mov	eax, [esp+0BCh+var_74]
		mov	[esp+0BCh+var_BC], edi
		mov	[esp+0BCh+var_B4], ecx
		mov	[esp+0BCh+var_B8], eax
		call	dword ptr [edi+28h]
		jmp	loc_64206249
; ---------------------------------------------------------------------------

loc_642067C0:				; CODE XREF: _storeAtts+109j
		cmp	[esi+90h], edi
		jz	short loc_642067D5

loc_642067C8:				; CODE XREF: _storeAtts+B7Cj
					; _storeAtts+B95j ...
		mov	eax, 8
		lea	esi, [esi+0]
		jmp	loc_64206497
; ---------------------------------------------------------------------------

loc_642067D5:				; CODE XREF: _storeAtts+606j
		mov	eax, [esi+188h]
		mov	ecx, [esp+0BCh+var_78]
		mov	eax, [eax+ecx]
		mov	[esi+120h], eax
		mov	eax, 8
		jmp	loc_64206497
; ---------------------------------------------------------------------------

loc_642067F2:				; CODE XREF: _storeAtts+329j
					; _storeAtts+335j
		mov	dword ptr [esi+184h], 0FFFFFFFFh
		jmp	loc_64206530
; ---------------------------------------------------------------------------

loc_64206801:				; CODE XREF: _storeAtts+3D7j
		mov	byte ptr [esi-1], 1
		jmp	loc_6420654F
; ---------------------------------------------------------------------------

loc_6420680A:				; CODE XREF: _storeAtts+40j
		mov	ecx, [esp+0BCh+arg_0]
		mov	edx, [esp+0BCh+var_44]
		mov	ebp, [ecx]
		mov	ecx, [esp+0BCh+var_44]
		add	edx, 50h
		mov	eax, [ecx+5Ch]
		jmp	short loc_64206826
; ---------------------------------------------------------------------------

loc_64206823:				; CODE XREF: _storeAtts+67Fj
		add	ebp, 1

loc_64206826:				; CODE XREF: _storeAtts+661j
		cmp	[edx+8], eax
		jz	loc_64206996

loc_6420682F:				; CODE XREF: _storeAtts+7F0j
		movzx	ecx, byte ptr [ebp+0]
		mov	[eax], cl
		add	eax, 1
		mov	[edx+0Ch], eax
		cmp	byte ptr [ebp+0], 0
		jnz	short loc_64206823
		mov	eax, [esp+0BCh+var_44]
		mov	ecx, [eax+60h]
		mov	edx, eax
		mov	eax, [eax+5Ch]
		test	ecx, ecx
		mov	[edx+60h], eax
		jz	loc_64206492
		mov	edx, ebx
		mov	eax, esi
		mov	[esp+0BCh+var_BC], 18h ; size_t
		call	_lookup
		test	eax, eax
		mov	[esp+0BCh+var_54], eax
		jz	loc_64206492
		cmp	byte ptr [esi+0ECh], 0
		jz	loc_64206206
		mov	edx, eax
		mov	eax, esi
		call	_setElementTypePrefix
		test	eax, eax
		jnz	loc_64206206
		jmp	loc_64206492
; ---------------------------------------------------------------------------

loc_64206897:				; CODE XREF: _storeAtts+A84j
		mov	edx, [esp+0BCh+var_6C]
		mov	edx, [edx+18Ch]
		mov	[esp+0BCh+var_5C], edx

loc_642068A5:				; CODE XREF: _storeAtts+A41j
		mov	ecx, [esp+0BCh+var_6C]
		sub	[esp+0BCh+var_64], 1
		mov	edx, [ecx+1B0h]
		mov	[ecx+1B0h], eax
		mov	eax, [esp+0BCh+var_78]
		mov	ecx, [esp+0BCh+var_68]
		mov	[ecx+eax*4], edx
		mov	eax, [esp+0BCh+var_5C]
		mov	ecx, [esp+0BCh+var_60]
		mov	[eax+esi+4], ebx
		mov	[eax+esi], ecx
		mov	[eax+esi+8], edx
		jnz	loc_64206A3F
		mov	eax, [esp+0BCh+var_78]
		mov	esi, [esp+0BCh+var_6C]
		add	eax, 2

loc_642068E9:				; CODE XREF: _storeAtts+429j
		cmp	[esp+0BCh+var_70], eax
		jle	short loc_64206910
		mov	ecx, [esp+0BCh+var_68]
		mov	ebx, [esp+0BCh+var_70]
		lea	edx, [ecx+eax*4]
		lea	esi, [esi+0]

loc_64206900:				; CODE XREF: _storeAtts+74Ej
		mov	ecx, [edx]
		add	eax, 2
		add	edx, 8
		cmp	ebx, eax
		mov	byte ptr [ecx-1], 0
		jg	short loc_64206900

loc_64206910:				; CODE XREF: _storeAtts+72Dj
					; _storeAtts+81Ej ...
		mov	edx, [esp+0BCh+arg_4]
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_64206930
		lea	esi, [esi+0]

loc_64206920:				; CODE XREF: _storeAtts+76Ej
		mov	edx, [eax+0Ch]
		mov	edx, [edx]
		mov	byte ptr [edx-1], 0
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_64206920

loc_64206930:				; CODE XREF: _storeAtts+75Bj
		cmp	byte ptr [esi+0ECh], 0
		jz	loc_64206EED
		mov	ecx, [esp+0BCh+var_54]
		mov	eax, [ecx+4]
		test	eax, eax
		jz	loc_64206EAF
		mov	ebp, [eax+4]
		test	ebp, ebp
		jz	loc_64206EE3
		mov	eax, [esp+0BCh+arg_0]
		mov	ebx, [eax]

loc_64206960:				; CODE XREF: _storeAtts+7A8j
		movzx	eax, byte ptr [ebx]
		add	ebx, 1
		cmp	al, 3Ah
		jnz	short loc_64206960

loc_6420696A:				; CODE XREF: _storeAtts+D06j
		cmp	byte ptr [esi+0EDh], 0
		jz	loc_64206C7C
		mov	edi, [ebp+0]
		mov	edx, [edi]
		test	edx, edx
		jz	loc_64206C7F
		xor	ecx, ecx

loc_64206986:				; CODE XREF: _storeAtts+7CFj
		movzx	eax, byte ptr [edx+ecx]
		add	ecx, 1
		test	al, al
		jnz	short loc_64206986
		jmp	loc_64206C81
; ---------------------------------------------------------------------------

loc_64206996:				; CODE XREF: _storeAtts+669j
		mov	eax, edx
		mov	[esp+0BCh+var_80], edx
		call	_poolGrow
		mov	edx, [esp+0BCh+var_80]
		test	al, al
		jz	loc_64206492
		mov	eax, [edx+0Ch]
		jmp	loc_6420682F
; ---------------------------------------------------------------------------

loc_642069B5:				; CODE XREF: _storeAtts+449j
		mov	[esp+0BCh+var_58], 1
		shl	[esp+0BCh+var_58], cl
		test	ebx, ebx
		jz	loc_64206ECB
		sub	ebx, 1
		mov	[esp+0BCh+var_60], ebx
		mov	ecx, ebx

loc_642069D2:				; CODE XREF: _storeAtts+4CCj
		mov	ebp, [esp+0BCh+var_70]
		mov	[esi+190h], ecx
		test	ebp, ebp
		jz	loc_64206910
		mov	eax, [esp+0BCh+var_44]
		lea	edx, [esi+1A0h]
		mov	ecx, [esp+0BCh+var_58]
		mov	[esp+0BCh+var_3C], edx
		mov	[esp+0BCh+var_78], 0
		add	eax, 28h
		sub	ecx, 1
		mov	[esp+0BCh+var_40], ecx
		shr	ecx, 2
		mov	[esp+0BCh+var_38], eax
		mov	eax, [esp+0BCh+var_40]
		mov	byte ptr [esp+0BCh+var_4C], cl
		mov	[esp+0BCh+var_6C], esi
		not	eax
		mov	[esp+0BCh+var_34], eax

loc_64206A2A:				; CODE XREF: _storeAtts+88Cj
		mov	edx, [esp+0BCh+var_78]
		mov	ecx, [esp+0BCh+var_68]
		mov	esi, [ecx+edx*4]
		cmp	byte ptr [esi-1], 2
		jz	short loc_64206A57
		mov	byte ptr [esi-1], 0

loc_64206A3F:				; CODE XREF: _storeAtts+718j
		add	[esp+0BCh+var_78], 2
		mov	esi, [esp+0BCh+var_78]
		cmp	[esp+0BCh+var_70], esi
		jg	short loc_64206A2A
		mov	esi, [esp+0BCh+var_6C]
		jmp	loc_64206910
; ---------------------------------------------------------------------------

loc_64206A57:				; CODE XREF: _storeAtts+879j
		mov	eax, [esp+0BCh+var_6C]
		mov	ecx, esi
		mov	ebx, [eax+1F0h]
		mov	byte ptr [esi-1], 0
		mov	edx, [esp+0BCh+var_38]
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+var_BC], 0 ; size_t
		call	_lookup
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		test	eax, eax
		mov	[esp+0BCh+var_50], eax
		jz	loc_64206EE3
		mov	edi, [eax+14h]
		test	edi, edi
		jle	loc_64206ED4
		mov	ecx, [esp+0BCh+var_6C]
		xor	edi, edi
		mov	[esp+0BCh+var_74], esi
		mov	ebp, [esp+0BCh+var_50]
		mov	eax, [ecx+1ACh]
		mov	esi, ecx
		jmp	short loc_64206AD1
; ---------------------------------------------------------------------------

loc_64206AB3:				; CODE XREF: _storeAtts+91Ej
					; _storeAtts+943j
		imul	ecx, ebx, 0F4243h
		movzx	ebx, dl
		mov	[eax], dl
		add	edi, 1
		add	eax, 1
		mov	[esi+1ACh], eax
		xor	ebx, ecx
		cmp	[ebp+14h], edi
		jle	short loc_64206B05

loc_64206AD1:				; CODE XREF: _storeAtts+8F1j
		mov	edx, [ebp+10h]
		cmp	[esi+1A8h], eax
		movzx	edx, byte ptr [edx+edi]
		jnz	short loc_64206AB3
		mov	eax, [esp+0BCh+var_3C]
		mov	byte ptr [esp+0BCh+var_80], dl
		call	_poolGrow
		movzx	edx, byte ptr [esp+0BCh+var_80]
		test	al, al
		jz	loc_64206492
		mov	eax, [esi+1ACh]
		jmp	short loc_64206AB3
; ---------------------------------------------------------------------------

loc_64206B05:				; CODE XREF: _storeAtts+90Fj
		mov	esi, [esp+0BCh+var_74]
		lea	esi, [esi+0]

loc_64206B10:				; CODE XREF: _storeAtts+959j
					; _storeAtts+D1Ej
		movzx	edx, byte ptr [esi]
		add	esi, 1
		cmp	dl, 3Ah
		jnz	short loc_64206B10
		mov	edi, [esp+0BCh+var_6C]
		jmp	short loc_64206B24
; ---------------------------------------------------------------------------

loc_64206B21:				; CODE XREF: _storeAtts+992j
		add	esi, 1

loc_64206B24:				; CODE XREF: _storeAtts+95Fj
		movzx	edx, byte ptr [esi]
		mov	ecx, eax
		cmp	[edi+1A8h], eax
		mov	ebp, edx
		jz	loc_64206E29

loc_64206B37:				; CODE XREF: _storeAtts+C8Fj
		imul	ebx, 0F4243h
		mov	eax, ebp
		mov	[ecx], al
		movzx	edx, dl
		lea	eax, [ecx+1]
		mov	[edi+1ACh], eax
		xor	ebx, edx
		cmp	byte ptr [esi],	0
		jnz	short loc_64206B21
		mov	esi, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_30], ecx
		mov	edx, [esp+0BCh+var_40]
		mov	ecx, [edi+18Ch]
		mov	[esp+0BCh+var_6C], edi
		and	esi, ebx
		and	edx, ebx
		mov	[esp+0BCh+var_5C], ecx
		mov	byte ptr [esp+0BCh+var_74], 0
		mov	[esp+0BCh+var_48], esi
		mov	[esp+0BCh+var_90], eax

loc_64206B85:				; CODE XREF: _storeAtts+B5Ej
		lea	esi, [edx+edx*2]
		mov	eax, [esp+0BCh+var_60]
		shl	esi, 2
		add	ecx, esi
		cmp	[ecx], eax
		jnz	short loc_64206BF2

loc_64206B95:				; CODE XREF: _storeAtts+A30j
		cmp	[ecx+4], ebx
		jz	loc_64206D23

loc_64206B9E:				; CODE XREF: _storeAtts+BB0j
		cmp	byte ptr [esp+0BCh+var_74], 0
		jnz	short loc_64206BCB
		mov	esi, [esp+0BCh+var_6C]
		mov	eax, [esp+0BCh+var_48]
		movzx	ecx, byte ptr [esi+194h]
		sub	ecx, 1
		shr	eax, cl
		mov	ecx, eax
		movzx	eax, byte ptr [esp+0BCh+var_4C]
		and	eax, ecx
		mov	byte ptr [esp+0BCh+var_74], al
		or	byte ptr [esp+0BCh+var_74], 1

loc_64206BCB:				; CODE XREF: _storeAtts+9E3j
		movzx	ecx, byte ptr [esp+0BCh+var_74]
		cmp	edx, ecx
		jge	loc_64206D18
		add	edx, [esp+0BCh+var_58]
		mov	eax, [esp+0BCh+var_60]
		sub	edx, ecx
		mov	ecx, [esp+0BCh+var_5C]
		lea	esi, [edx+edx*2]
		shl	esi, 2
		add	ecx, esi
		cmp	[ecx], eax
		jz	short loc_64206B95

loc_64206BF2:				; CODE XREF: _storeAtts+9D3j
		mov	edx, [esp+0BCh+var_6C]
		mov	eax, [esp+0BCh+var_90]
		cmp	byte ptr [edx+0EDh], 0
		jz	loc_642068A5
		movzx	eax, byte ptr [edx+1D8h]
		mov	ecx, [esp+0BCh+var_30]
		mov	[ecx], al
		mov	edx, [esp+0BCh+var_50]
		mov	ecx, [esp+0BCh+var_6C]
		mov	eax, [edx]
		mov	ebp, ecx
		mov	edi, [eax]
		mov	eax, [ecx+1ACh]
		cmp	[ebp+1A8h], eax
		jz	short loc_64206C55

loc_64206C33:				; CODE XREF: _storeAtts+A93j
					; _storeAtts+AAFj
		movzx	edx, byte ptr [edi]
		mov	[eax], dl
		add	eax, 1
		mov	[ebp+1ACh], eax
		cmp	byte ptr [edi],	0
		jz	loc_64206897
		add	edi, 1
		cmp	[ebp+1A8h], eax
		jnz	short loc_64206C33

loc_64206C55:				; CODE XREF: _storeAtts+A71j
		mov	eax, [esp+0BCh+var_3C]
		call	_poolGrow
		test	al, al
		jz	loc_64206492
		mov	eax, [ebp+1ACh]
		jmp	short loc_64206C33
; ---------------------------------------------------------------------------

loc_64206C71:				; CODE XREF: _storeAtts+34Bj
					; _storeAtts+363j
		mov	[esi+184h], eax
		jmp	loc_64206530
; ---------------------------------------------------------------------------

loc_64206C7C:				; CODE XREF: _storeAtts+7B1j
		mov	edi, [ebp+0]

loc_64206C7F:				; CODE XREF: _storeAtts+7BEj
		xor	ecx, ecx

loc_64206C81:				; CODE XREF: _storeAtts+7D1j
		mov	eax, [esp+0BCh+arg_0]
		mov	edx, [esp+0BCh+arg_0]
		mov	[eax+4], ebx
		mov	eax, [ebp+14h]
		mov	[edx+14h], ecx
		mov	[edx+10h], eax
		mov	eax, [edi]
		xor	edi, edi
		mov	[edx+8], eax

loc_64206CA2:				; CODE XREF: _storeAtts+AEBj
		movzx	eax, byte ptr [ebx+edi]
		add	edi, 1
		test	al, al
		jnz	short loc_64206CA2
		mov	eax, [ebp+14h]
		lea	edx, [ecx+eax]
		add	edx, edi
		cmp	edx, [ebp+18h]
		jg	loc_64206D7B
		mov	edx, [ebp+10h]
		mov	[esp+0BCh+var_74], edx

loc_64206CC5:				; CODE XREF: _storeAtts+C46j
		add	edx, eax
		mov	[esp+0BCh+var_BC], edx ; void *
		mov	[esp+0BCh+var_80], edx
		mov	[esp+0BCh+var_7C], ecx
		mov	[esp+0BCh+var_B4], edi ; size_t
		mov	[esp+0BCh+var_B8], ebx ; void *
		call	_memcpy
		mov	ecx, [esp+0BCh+var_7C]
		mov	edx, [esp+0BCh+var_80]
		test	ecx, ecx
		jnz	loc_64206E85

loc_64206CEF:				; CODE XREF: _storeAtts+CEAj
		mov	eax, [ebp+10h]
		mov	edx, [esp+0BCh+arg_0]
		mov	[edx], eax
		xor	eax, eax
		jmp	loc_64206497
; ---------------------------------------------------------------------------

loc_64206D02:				; CODE XREF: _storeAtts+469j
		mov	byte ptr [esi+194h], 3
		mov	eax, 60h
		mov	ebx, 8
		jmp	loc_64206639
; ---------------------------------------------------------------------------

loc_64206D18:				; CODE XREF: _storeAtts+A12j
		sub	edx, ecx
		mov	ecx, [esp+0BCh+var_5C]
		jmp	loc_64206B85
; ---------------------------------------------------------------------------

loc_64206D23:				; CODE XREF: _storeAtts+9D8j
		mov	eax, [esp+0BCh+var_6C]
		mov	edi, [ecx+8]
		mov	ebp, [eax+1B0h]
		movzx	esi, byte ptr [ebp+0]
		mov	ecx, esi
		cmp	cl, [edi]
		jnz	short loc_64206D6C
		test	cl, cl
		jz	loc_642067C8
		xor	ecx, ecx
		mov	esi, [esp+0BCh+var_90]
		jmp	short loc_64206D5B
; ---------------------------------------------------------------------------
		align 10h

loc_64206D50:				; CODE XREF: _storeAtts+BA4j
		add	ecx, 1
		test	al, al
		jz	loc_642067C8

loc_64206D5B:				; CODE XREF: _storeAtts+B88j
		movzx	eax, byte ptr [ebp+ecx+1]
		cmp	al, [edi+ecx+1]
		jz	short loc_64206D50
		mov	[esp+0BCh+var_90], esi
		mov	esi, eax

loc_64206D6C:				; CODE XREF: _storeAtts+B78j
		mov	eax, esi
		test	al, al
		jnz	loc_64206B9E
		jmp	loc_642067C8
; ---------------------------------------------------------------------------

loc_64206D7B:				; CODE XREF: _storeAtts+AF8j
		add	edx, 18h
		mov	[esp+0BCh+var_BC], edx
		mov	[esp+0BCh+var_80], edx
		mov	[esp+0BCh+var_7C], ecx
		call	dword ptr [esi+0Ch]
		mov	edx, [esp+0BCh+var_80]
		test	eax, eax
		mov	[esp+0BCh+var_74], eax
		jz	loc_64206492
		mov	eax, [ebp+10h]
		mov	[ebp+18h], edx
		mov	edx, [ebp+14h]
		mov	[esp+0BCh+var_B8], eax ; void *
		mov	eax, [esp+0BCh+var_74]
		mov	[esp+0BCh+var_B4], edx ; size_t
		mov	[esp+0BCh+var_BC], eax ; void *
		call	_memcpy
		mov	eax, [esi+16Ch]
		mov	ecx, [esp+0BCh+var_7C]
		test	eax, eax
		jz	short loc_64206DE7
		mov	edx, [ebp+10h]
		jmp	short loc_64206DD6
; ---------------------------------------------------------------------------
		align 10h

loc_64206DD0:				; CODE XREF: _storeAtts+C19j
					; _storeAtts+C25j
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_64206DEA

loc_64206DD6:				; CODE XREF: _storeAtts+C0Aj
		cmp	[eax+0Ch], edx
		jnz	short loc_64206DD0
		mov	edx, [esp+0BCh+var_74]
		mov	[eax+0Ch], edx
		mov	edx, [ebp+10h]
		jmp	short loc_64206DD0
; ---------------------------------------------------------------------------

loc_64206DE7:				; CODE XREF: _storeAtts+C05j
		mov	edx, [ebp+10h]

loc_64206DEA:				; CODE XREF: _storeAtts+C14j
		mov	[esp+0BCh+var_BC], edx
		mov	[esp+0BCh+var_7C], ecx
		call	dword ptr [esi+14h]
		mov	eax, [esp+0BCh+var_74]
		mov	ecx, [esp+0BCh+var_7C]
		mov	edx, [esp+0BCh+var_74]
		mov	[ebp+10h], eax
		mov	eax, [ebp+14h]
		jmp	loc_64206CC5
; ---------------------------------------------------------------------------

loc_64206E0B:				; CODE XREF: _storeAtts+273j
		mov	eax, [esp+0BCh+var_58]
		mov	[esp+0BCh+var_80], edx
		call	_poolGrow
		mov	edx, [esp+0BCh+var_80]
		test	al, al
		jnz	loc_64206439
		jmp	loc_64206488
; ---------------------------------------------------------------------------

loc_64206E29:				; CODE XREF: _storeAtts+971j
		mov	eax, [esp+0BCh+var_3C]
		mov	byte ptr [esp+0BCh+var_80], dl
		call	_poolGrow
		movzx	edx, byte ptr [esp+0BCh+var_80]
		test	al, al
		jz	loc_64206492
		mov	ecx, [edi+1ACh]
		movzx	ebp, byte ptr [esi]
		jmp	loc_64206B37
; ---------------------------------------------------------------------------

loc_64206E54:				; CODE XREF: _storeAtts+572j
		mov	eax, [esp+0BCh+var_58]
		call	_poolGrow
		test	al, al
		jz	loc_64206488
		mov	eax, [esi+1ACh]
		jmp	loc_64206738
; ---------------------------------------------------------------------------

loc_64206E70:				; CODE XREF: _storeAtts+99j
		mov	[esp+0BCh+var_64], 0
		mov	[esp+0BCh+var_70], 0
		jmp	loc_642064D6
; ---------------------------------------------------------------------------

loc_64206E85:				; CODE XREF: _storeAtts+B29j
		lea	eax, [edx+edi-1]
		movzx	edx, byte ptr [esi+1D8h]
		mov	[eax], dl
		mov	edx, [ebp+0]
		add	eax, 1
		mov	edx, [edx]
		mov	[esp+0BCh+var_B4], ecx ; size_t
		mov	[esp+0BCh+var_BC], eax ; void *
		mov	[esp+0BCh+var_B8], edx ; void *
		call	_memcpy
		jmp	loc_64206CEF
; ---------------------------------------------------------------------------

loc_64206EAF:				; CODE XREF: _storeAtts+786j
		mov	edx, [esp+0BCh+var_44]
		mov	ebp, [edx+9Ch]
		test	ebp, ebp
		jz	short loc_64206EED
		mov	ecx, [esp+0BCh+arg_0]
		mov	ebx, [ecx]
		jmp	loc_6420696A
; ---------------------------------------------------------------------------

loc_64206ECB:				; CODE XREF: _storeAtts+803j
		mov	ebx, [esp+0BCh+var_58]
		jmp	loc_6420665B
; ---------------------------------------------------------------------------

loc_64206ED4:				; CODE XREF: _storeAtts+8D5j
		mov	edx, [esp+0BCh+var_6C]
		mov	eax, [edx+1ACh]
		jmp	loc_64206B10
; ---------------------------------------------------------------------------

loc_64206EE3:				; CODE XREF: _storeAtts+791j
					; _storeAtts+8CAj
		mov	eax, 1Bh
		jmp	loc_64206497
; ---------------------------------------------------------------------------

loc_64206EED:				; CODE XREF: _storeAtts+777j
					; _storeAtts+CFBj
		xor	eax, eax
		jmp	loc_64206497
_storeAtts	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_getElementType	proc near		; CODE XREF: _doProlog+41Bp
					; _doProlog+111Ep ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [eax+164h]
		mov	[esp+5Ch+var_34], eax
		mov	edi, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_20], ecx
		mov	eax, [ebx+5Ch]
		lea	ebp, [ebx+50h]
		test	eax, eax
		jz	loc_64206FC2

loc_64206F29:				; CODE XREF: _getElementType+CBj
		lea	eax, [ebx+5Ch]
		mov	[esp+5Ch+var_30], ebx
		mov	ebx, eax

loc_64206F32:				; CODE XREF: _getElementType+5Ej
		mov	eax, [ebp+8]
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		call	dword ptr [esi+3Ch]
		cmp	edi, [esp+5Ch+var_20]
		jz	short loc_64206F70
		mov	eax, ebp
		call	_poolGrow
		test	al, al
		jnz	short loc_64206F32

loc_64206F60:				; CODE XREF: _getElementType+79j
					; _getElementType+91j ...
		xor	edi, edi

loc_64206F62:				; CODE XREF: _getElementType+ACj
					; _getElementType+FEj
		add	esp, 4Ch
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64206F70:				; CODE XREF: _getElementType+53j
		mov	ebx, [esp+5Ch+var_30]
		mov	esi, [ebx+60h]
		test	esi, esi
		jz	short loc_64206F60
		mov	eax, [ebx+5Ch]
		cmp	eax, [ebx+58h]
		jz	short loc_64206FD3

loc_64206F83:				; CODE XREF: _getElementType+E9j
		mov	byte ptr [eax],	0
		mov	esi, [ebx+60h]
		add	eax, 1
		mov	[ebx+5Ch], eax
		test	esi, esi
		jz	short loc_64206F60
		mov	eax, [esp+5Ch+var_34]
		lea	edx, [ebx+14h]
		mov	ecx, esi
		mov	[esp+5Ch+var_5C], 18h ;	size_t
		call	_lookup
		test	eax, eax
		mov	edi, eax
		jz	short loc_64206F62
		cmp	[eax], esi
		jz	short loc_64206FEB
		mov	eax, [ebx+60h]
		mov	[ebx+5Ch], eax
		add	esp, 4Ch
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64206FC2:				; CODE XREF: _getElementType+23j
		mov	eax, ebp
		call	_poolGrow
		test	al, al
		jnz	loc_64206F29
		jmp	short loc_64206F60
; ---------------------------------------------------------------------------

loc_64206FD3:				; CODE XREF: _getElementType+81j
		mov	eax, ebp
		call	_poolGrow
		test	al, al
		lea	esi, [esi+0]
		jz	loc_64206F60
		mov	eax, [ebx+5Ch]
		jmp	short loc_64206F83
; ---------------------------------------------------------------------------

loc_64206FEB:				; CODE XREF: _getElementType+B0j
		mov	eax, [ebx+5Ch]
		mov	edx, edi
		mov	[ebx+60h], eax
		mov	eax, [esp+5Ch+var_34]
		call	_setElementTypePrefix
		test	eax, eax
		jnz	loc_64206F62
		jmp	loc_64206F60
_getElementType	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_storeEntityValue proc near		; CODE XREF: _storeEntityValue+450p
					; _entityValueProcessor+64p ...

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		mov	edi, eax
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [eax+164h]
		mov	edx, [edi+114h]
		mov	[esp+7Ch+var_50], ecx
		mov	dword ptr [edi+114h], 1
		mov	ebp, [ebx+68h]
		lea	eax, [ebx+68h]
		mov	[esp+7Ch+var_3C], eax
		mov	[esp+7Ch+var_40], edx
		test	ebp, ebp
		jz	loc_642072C0

loc_6420704B:				; CODE XREF: _storeEntityValue+2BEj
		lea	eax, [edi+1A0h]
		lea	edx, [edi+1ACh]
		mov	[esp+7Ch+var_38], eax
		lea	eax, [ebx+84h]
		mov	[esp+7Ch+var_44], edx
		lea	edx, [ebx+74h]
		mov	[esp+7Ch+var_34], eax
		lea	ebp, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_48], edx

loc_64207074:				; CODE XREF: _storeEntityValue+DFj
		lea	eax, [esp+7Ch+var_20]
		mov	edx, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], eax
		call	dword ptr [esi+14h]
		add	eax, 4
		cmp	eax, 20h	; switch 33 cases
		jbe	short loc_642070C0

loc_6420709D:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		cmp	[edi+90h], esi	; jumptable 642070C0 default case
		mov	eax, 17h
		jz	loc_642073F0

loc_642070AE:				; CODE XREF: _storeEntityValue+F2j
					; _storeEntityValue+15Fj ...
		mov	edx, [esp+7Ch+var_40]
		mov	[edi+114h], edx

loc_642070B8:				; CODE XREF: _storeEntityValue+2C4j
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642070C0:				; CODE XREF: _storeEntityValue+8Bj
		jmp	ds:off_6421D1B0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642070C7:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		mov	eax, [esp+7Ch+var_50] ;	jumptable 642070C0 case	1
		add	eax, [esi+44h]
		mov	[esp+7Ch+var_20], eax

loc_642070D2:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		mov	eax, [ebx+74h]	; jumptable 642070C0 case 11
		cmp	[ebx+70h], eax
		jz	loc_6420742C

loc_642070DE:				; CODE XREF: _storeEntityValue+430j
		mov	byte ptr [eax],	0Ah
		add	eax, 1
		mov	[ebx+74h], eax

loc_642070E7:				; CODE XREF: _storeEntityValue+250j
					; _storeEntityValue+2A8j ...
		mov	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_50], edx
		jmp	short loc_64207074
; ---------------------------------------------------------------------------

loc_642070F1:				; CODE XREF: _storeEntityValue+35Aj
		movzx	eax, byte ptr [ebx+82h]
		mov	[ebx+80h], al
		xchg	ax, ax

loc_64207100:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		xor	eax, eax	; jumptable 642070C0 case 0
		jmp	short loc_642070AE
; ---------------------------------------------------------------------------

loc_64207104:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		mov	eax, [esp+7Ch+var_50] ;	jumptable 642070C0 cases 10,13
		mov	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_28], eax
		mov	eax, [esp+7Ch+var_3C]
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jz	loc_642074E3

loc_6420711F:				; CODE XREF: _storeEntityValue+4E2j
		mov	[esp+7Ch+var_50], edi
		mov	edi, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_4C], ebx
		mov	ebx, edx
		lea	esi, [esi+0]

loc_64207130:				; CODE XREF: _storeEntityValue+154j
		mov	eax, [edi+8]
		mov	edx, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_6C], eax
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_78], eax
		call	dword ptr [esi+3Ch]
		cmp	ebx, [esp+7Ch+var_28]
		jz	loc_642072E0
		mov	eax, edi
		call	_poolGrow
		test	al, al
		jnz	short loc_64207130

loc_64207166:				; CODE XREF: _storeEntityValue+294j
		mov	edi, [esp+7Ch+var_50]

loc_6420716A:				; CODE XREF: _storeEntityValue+21Ej
					; _storeEntityValue+2E7j ...
		mov	eax, 1
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_64207174:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		cmp	[edi+90h], esi	; jumptable 642070C0 case 4
		jz	loc_64207404

loc_64207180:				; CODE XREF: _storeEntityValue+186j
		mov	eax, 4
		jmp	loc_642070AE
; ---------------------------------------------------------------------------
		align 10h

loc_64207190:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		cmp	[edi+90h], esi	; jumptable 642070C0 case 3
		jnz	short loc_64207180
		mov	edx, [esp+7Ch+var_50]
		mov	eax, 4
		mov	[edi+120h], edx
		jmp	loc_642070AE
; ---------------------------------------------------------------------------
		align 10h

loc_642071B0:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		cmp	byte ptr [edi+1E8h], 0 ; jumptable 642070C0 case 32
		jnz	short loc_642071C5
		cmp	[edi+90h], esi
		jz	loc_64207418

loc_642071C5:				; CODE XREF: _storeEntityValue+1A7j
		mov	eax, [esi+44h]
		mov	edx, eax
		add	eax, [esp+7Ch+var_50]
		neg	edx
		add	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_28], eax
		mov	ecx, [edi+1ACh]
		test	ecx, ecx
		jz	loc_642074FD

loc_642071E6:				; CODE XREF: _storeEntityValue+500j
		mov	[esp+7Ch+var_4C], edi
		mov	edi, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_30], ebx
		mov	ebx, edx

loc_642071F4:				; CODE XREF: _storeEntityValue+218j
		mov	eax, [edi+8]
		mov	edx, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_6C], eax
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_78], eax
		call	dword ptr [esi+3Ch]
		cmp	ebx, [esp+7Ch+var_28]
		jz	loc_64207300
		mov	eax, edi
		call	_poolGrow
		test	al, al
		jnz	short loc_642071F4
		mov	edi, [esp+7Ch+var_4C]
		jmp	loc_6420716A
; ---------------------------------------------------------------------------

loc_64207233:				; CODE XREF: _storeEntityValue:loc_642070C0j
					; DATA XREF: .rdata:off_6421D1B0o
		mov	eax, [esp+7Ch+var_50] ;	jumptable 642070C0 case	14
		mov	[esp+7Ch+var_7C], esi
		mov	[esp+7Ch+var_78], eax
		call	dword ptr [esi+2Ch]
		test	eax, eax
		js	loc_64207490
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], eax
		call	_XmlUtf8Encode
		cmp	eax, 0
		mov	ecx, eax
		jz	loc_6420747A
		jle	loc_642070E7
		xor	edx, edx
		mov	eax, [ebx+74h]
		mov	[esp+7Ch+var_50], edi
		mov	edi, ecx
		mov	[esp+7Ch+var_4C], esi
		mov	esi, edx
		jmp	short loc_64207294
; ---------------------------------------------------------------------------
		align 10h

loc_64207280:				; CODE XREF: _storeEntityValue+287j
					; _storeEntityValue+29Dj
		movzx	edx, byte ptr [ebp+esi+0]
		add	esi, 1
		mov	[eax], dl
		add	eax, 1
		cmp	edi, esi
		mov	[ebx+74h], eax
		jle	short loc_642072B0

loc_64207294:				; CODE XREF: _storeEntityValue+267j
		cmp	[ebx+70h], eax
		jnz	short loc_64207280
		mov	eax, [esp+7Ch+var_3C]
		call	_poolGrow
		test	al, al
		jz	loc_64207166
		mov	eax, [ebx+74h]
		jmp	short loc_64207280
; ---------------------------------------------------------------------------
		align 10h

loc_642072B0:				; CODE XREF: _storeEntityValue+282j
		mov	edi, [esp+7Ch+var_50]
		mov	esi, [esp+7Ch+var_4C]
		jmp	loc_642070E7
; ---------------------------------------------------------------------------
		align 10h

loc_642072C0:				; CODE XREF: _storeEntityValue+35j
		call	_poolGrow
		mov	edx, eax
		mov	eax, 1
		test	dl, dl
		jnz	loc_6420704B
		jmp	loc_642070B8
; ---------------------------------------------------------------------------
		align 10h

loc_642072E0:				; CODE XREF: _storeEntityValue+145j
		mov	edx, [esp+7Ch+var_3C]
		mov	ebx, [esp+7Ch+var_4C]
		mov	edi, [esp+7Ch+var_50]
		mov	edx, [edx+10h]
		test	edx, edx
		jnz	loc_642070E7
		jmp	loc_6420716A
; ---------------------------------------------------------------------------
		align 10h

loc_64207300:				; CODE XREF: _storeEntityValue+209j
		mov	edi, [esp+7Ch+var_4C]
		mov	ebx, [esp+7Ch+var_30]
		mov	edx, [edi+1B0h]
		test	edx, edx
		jz	loc_6420716A
		mov	eax, [edi+1ACh]
		cmp	eax, [edi+1A8h]
		jz	loc_6420751B

loc_64207328:				; CODE XREF: _storeEntityValue+522j
		mov	byte ptr [eax],	0
		mov	ecx, [edi+1B0h]
		add	eax, 1
		mov	[edi+1ACh], eax
		test	ecx, ecx
		jz	loc_6420716A
		mov	edx, [esp+7Ch+var_34]
		mov	eax, edi
		mov	[esp+7Ch+var_7C], 0 ; size_t
		call	_lookup
		mov	[esp+7Ch+var_4C], eax
		mov	eax, [edi+1B0h]
		mov	[edi+1ACh], eax
		mov	eax, [esp+7Ch+var_4C]
		test	eax, eax
		jz	loc_642070F1
		mov	edx, [esp+7Ch+var_4C]
		cmp	byte ptr [edx+20h], 0
		jnz	loc_642074AC
		mov	ecx, [edx+10h]
		test	ecx, ecx
		jz	loc_64207445
		mov	eax, [edi+70h]
		test	eax, eax
		jz	short loc_642073DE
		mov	byte ptr [ebx+83h], 0
		mov	eax, [edx+18h]
		mov	byte ptr [edx+20h], 1
		mov	[esp+7Ch+var_6C], eax
		mov	eax, [edx+10h]
		mov	[esp+7Ch+var_70], eax
		mov	eax, [edx+14h]
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_74], eax
		mov	eax, [edi+74h]
		mov	[esp+7Ch+var_7C], eax
		call	dword ptr [edi+70h]
		test	eax, eax
		jz	loc_642074D1
		mov	edx, [esp+7Ch+var_4C]
		mov	byte ptr [edx+20h], 0
		cmp	byte ptr [ebx+83h], 0
		jnz	loc_642070E7

loc_642073DE:				; CODE XREF: _storeEntityValue+37Ej
		movzx	eax, byte ptr [ebx+82h]
		mov	[ebx+80h], al
		jmp	loc_642070E7
; ---------------------------------------------------------------------------

loc_642073F0:				; CODE XREF: _storeEntityValue+98j
		mov	eax, [esp+7Ch+var_50]
		mov	[edi+120h], eax
		mov	eax, 17h
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_64207404:				; CODE XREF: _storeEntityValue+16Aj
		mov	eax, [esp+7Ch+var_20]
		mov	[edi+120h], eax
		mov	eax, 4
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_64207418:				; CODE XREF: _storeEntityValue+1AFj
		mov	eax, [esp+7Ch+var_50]
		mov	[edi+120h], eax
		mov	eax, 0Ah
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_6420742C:				; CODE XREF: _storeEntityValue+C8j
		mov	eax, [esp+7Ch+var_3C]
		call	_poolGrow
		test	al, al
		jz	loc_6420716A
		mov	eax, [ebx+74h]
		jmp	loc_642070DE
; ---------------------------------------------------------------------------

loc_64207445:				; CODE XREF: _storeEntityValue+373j
		mov	byte ptr [edx+20h], 1
		mov	ecx, [edx+4]
		mov	edx, [esp+7Ch+var_4C]
		mov	eax, ecx
		add	eax, [edx+8]
		mov	[esp+7Ch+var_7C], eax
		mov	edx, [edi+0E4h]
		mov	eax, edi
		call	_storeEntityValue
		mov	edx, [esp+7Ch+var_4C]
		mov	byte ptr [edx+20h], 0
		test	eax, eax
		jz	loc_642070E7
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_6420747A:				; CODE XREF: _storeEntityValue+24Aj
		cmp	[edi+90h], esi
		jz	loc_64207537

loc_64207486:				; CODE XREF: _storeEntityValue+486j
		mov	eax, 0Eh
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_64207490:				; CODE XREF: _storeEntityValue+233j
		cmp	[edi+90h], esi
		jnz	short loc_64207486
		mov	edx, [esp+7Ch+var_50]
		mov	eax, 0Eh
		mov	[edi+120h], edx
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_642074AC:				; CODE XREF: _storeEntityValue+368j
		cmp	[edi+90h], esi
		mov	eax, 0Ch
		jnz	loc_642070AE
		mov	eax, [esp+7Ch+var_50]
		mov	[edi+120h], eax
		mov	eax, 0Ch
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_642074D1:				; CODE XREF: _storeEntityValue+3B3j
		mov	eax, [esp+7Ch+var_4C]
		mov	byte ptr [eax+20h], 0
		mov	eax, 15h
		jmp	loc_642070AE
; ---------------------------------------------------------------------------

loc_642074E3:				; CODE XREF: _storeEntityValue+109j
		mov	[esp+7Ch+var_54], edx
		call	_poolGrow
		mov	edx, [esp+7Ch+var_54]
		test	al, al
		jnz	loc_6420711F
		jmp	loc_6420716A
; ---------------------------------------------------------------------------

loc_642074FD:				; CODE XREF: _storeEntityValue+1D0j
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_54], edx
		call	_poolGrow
		mov	edx, [esp+7Ch+var_54]
		test	al, al
		jnz	loc_642071E6
		jmp	loc_6420716A
; ---------------------------------------------------------------------------

loc_6420751B:				; CODE XREF: _storeEntityValue+312j
		mov	eax, [esp+7Ch+var_38]
		call	_poolGrow
		test	al, al
		jz	loc_6420716A
		mov	eax, [edi+1ACh]
		jmp	loc_64207328
; ---------------------------------------------------------------------------

loc_64207537:				; CODE XREF: _storeEntityValue+470j
		mov	eax, [esp+7Ch+var_50]
		mov	[edi+120h], eax
		mov	eax, 0Eh
		jmp	loc_642070AE
_storeEntityValue endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=1Ch

_entityValueProcessor proc near		; DATA XREF: _entityValueInitProcessor+F4o
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+40h]
		lea	ebp, [esp+1Ch]
		mov	eax, [esp+44h]
		mov	edi, [esp+48h]
		mov	esi, [ebx+90h]
		mov	[esp+1Ch], eax
		jmp	short loc_64207577
; ---------------------------------------------------------------------------

loc_64207573:				; CODE XREF: _entityValueProcessor+3Bj
		mov	eax, [esp+1Ch]

loc_64207577:				; CODE XREF: _entityValueProcessor+21j
		mov	[esp+0Ch], ebp
		mov	[esp+8], edi
		mov	[esp+4], eax
		mov	[esp], esi
		call	dword ptr [esi]
		cmp	eax, 0
		jg	short loc_64207573
		jnz	short loc_642075C5

loc_6420758F:				; CODE XREF: _entityValueProcessor+7Cj
		cmp	eax, 0FFFFFFFFh
		mov	edx, 5
		jz	short loc_642075BB
		test	eax, eax
		mov	dl, 4
		lea	esi, [esi+0]
		jz	short loc_642075BB
		cmp	eax, 0FFFFFFFEh
		mov	dl, 6
		jz	short loc_642075BB
		mov	ecx, [esp+44h]
		mov	edx, esi
		mov	eax, ebx
		mov	[esp], edi
		call	_storeEntityValue
		mov	edx, eax

loc_642075BB:				; CODE XREF: _entityValueProcessor+47j
					; _entityValueProcessor+50j ...
		add	esp, 2Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642075C5:				; CODE XREF: _entityValueProcessor+3Dj
		cmp	byte ptr [ebx+1E4h], 0
		jnz	short loc_6420758F
		mov	eax, [esp+4Ch]
		mov	edx, [esp+44h]
		mov	[eax], edx
		xor	edx, edx
		add	esp, 2Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_entityValueProcessor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_processXmlDecl	proc near		; CODE XREF: _entityValueInitProcessor+C9p
					; _doProlog+4D5p ...

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 7Ch
		mov	eax, offset _XmlParseXmlDeclNS
		mov	[esp+8Ch+var_20], 0
		mov	ebp, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_24], 0
		mov	[esp+8Ch+var_28], 0
		mov	[esp+8Ch+var_30], 0FFFFFFFFh
		cmp	byte ptr [ebx+0ECh], 0
		jnz	short loc_64207637
		mov	eax, offset _XmlParseXmlDecl

loc_64207637:				; CODE XREF: _processXmlDecl+40j
		lea	edx, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_68], edx
		lea	edx, [esp+8Ch+var_24]
		mov	[esp+8Ch+var_6C], edx
		lea	edx, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_70], edx
		lea	edx, [esp+8Ch+var_2C]
		mov	[esp+8Ch+var_74], edx
		lea	edx, [esp+8Ch+var_28]
		mov	[esp+8Ch+var_78], edx
		lea	edx, [ebx+120h]
		mov	[esp+8Ch+var_7C], edx
		mov	[esp+8Ch+var_80], ebp
		mov	[esp+8Ch+var_84], edi
		mov	edx, [ebx+90h]
		mov	[esp+8Ch+var_8C], esi
		mov	[esp+8Ch+var_88], edx
		call	eax ; _XmlParseXmlDeclNS
		test	eax, eax
		jnz	short loc_64207694
		cmp	esi, 1
		sbb	eax, eax
		add	eax, 1Fh

loc_6420768C:				; CODE XREF: _processXmlDecl+153j
					; _processXmlDecl+21Aj	...
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64207694:				; CODE XREF: _processXmlDecl+92j
		test	esi, esi
		jz	loc_642078F0

loc_6420769C:				; CODE XREF: _processXmlDecl+305j
					; _processXmlDecl+31Fj	...
		mov	ecx, [ebx+8Ch]
		test	ecx, ecx
		jz	loc_64207935
		mov	esi, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_48], 0
		test	esi, esi
		jz	loc_64207788
		mov	eax, [ebx+90h]
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], eax
		call	dword ptr [eax+20h]
		lea	edi, [esi+eax]
		mov	esi, [ebx+90h]
		lea	eax, [ebx+1B8h]
		mov	[esp+8Ch+var_48], eax
		mov	eax, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_34], eax
		mov	edx, [ebx+1C4h]
		test	edx, edx
		jz	loc_64207A65

loc_642076F7:				; CODE XREF: _processXmlDecl+480j
		lea	eax, [ebx+1C4h]
		mov	[esp+8Ch+var_44], ebx
		mov	ebx, [esp+8Ch+var_48]
		lea	ebp, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_4C], ebp
		mov	ebp, eax
		nop

loc_64207710:				; CODE XREF: _processXmlDecl+14Cj
		mov	eax, [ebx+8]
		mov	edx, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_80], ebp
		mov	[esp+8Ch+var_84], edi
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+var_8C], esi
		call	dword ptr [esi+3Ch]
		cmp	edi, [esp+8Ch+var_34]
		jz	short loc_64207748
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jnz	short loc_64207710

loc_6420773E:				; CODE XREF: _processXmlDecl+164j
					; _processXmlDecl+190j	...
		mov	eax, 1
		jmp	loc_6420768C
; ---------------------------------------------------------------------------

loc_64207748:				; CODE XREF: _processXmlDecl+141j
		mov	ebx, [esp+8Ch+var_44]
		mov	eax, [ebx+1C8h]
		test	eax, eax
		jz	short loc_6420773E
		mov	eax, [ebx+1C4h]
		cmp	eax, [ebx+1C0h]
		jz	loc_64207A98

loc_64207768:				; CODE XREF: _processXmlDecl+4BFj
		mov	byte ptr [eax],	0
		mov	edx, [ebx+1C8h]
		add	eax, 1
		mov	[ebx+1C4h], eax
		test	edx, edx
		mov	[esp+8Ch+var_48], edx
		jz	short loc_6420773E
		mov	[ebx+1C8h], eax

loc_64207788:				; CODE XREF: _processXmlDecl+C8j
		mov	edx, [esp+8Ch+var_28]
		xor	eax, eax
		test	edx, edx
		jz	loc_6420784E
		mov	edi, [ebx+90h]
		lea	eax, [ebx+1B8h]
		mov	[esp+8Ch+var_34], edx
		mov	ebp, [ebx+1C4h]
		mov	esi, [esp+8Ch+var_2C]
		mov	[esp+8Ch+var_44], eax
		sub	esi, [edi+44h]
		test	ebp, ebp
		jz	loc_64207A4D

loc_642077BF:				; CODE XREF: _processXmlDecl+464j
		lea	eax, [ebx+1C4h]
		mov	[esp+8Ch+var_40], ebx
		mov	ebx, [esp+8Ch+var_44]
		lea	ebp, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_4C], ebp
		mov	ebp, eax

loc_642077D7:				; CODE XREF: _processXmlDecl+213j
		mov	eax, [ebx+8]
		mov	edx, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_80], ebp
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+var_8C], edi
		call	dword ptr [edi+3Ch]
		cmp	esi, [esp+8Ch+var_34]
		jz	short loc_64207810
		mov	eax, ebx
		call	_poolGrow
		test	al, al
		jnz	short loc_642077D7
		mov	eax, 1
		jmp	loc_6420768C
; ---------------------------------------------------------------------------
		align 10h

loc_64207810:				; CODE XREF: _processXmlDecl+208j
		mov	ebx, [esp+8Ch+var_40]
		mov	ecx, [ebx+1C8h]
		test	ecx, ecx
		jz	loc_6420773E
		mov	eax, [ebx+1C4h]
		cmp	eax, [ebx+1C0h]
		jz	loc_64207A7B

loc_64207834:				; CODE XREF: _processXmlDecl+4A3j
		mov	byte ptr [eax],	0
		add	eax, 1
		mov	[ebx+1C4h], eax
		mov	eax, [ebx+1C8h]
		test	eax, eax
		jz	loc_6420773E

loc_6420784E:				; CODE XREF: _processXmlDecl+1A0j
		mov	edx, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_50], eax
		mov	[esp+8Ch+var_80], edx
		mov	edx, [esp+8Ch+var_48]
		mov	[esp+8Ch+var_84], edx
		mov	edx, [ebx+4]
		mov	[esp+8Ch+var_8C], edx
		call	dword ptr [ebx+8Ch]
		mov	eax, [esp+8Ch+var_50]

loc_64207876:				; CODE XREF: _processXmlDecl+354j
					; _processXmlDecl+376j
		mov	esi, [ebx+0E8h]
		test	esi, esi
		jz	loc_64207970

loc_64207884:				; CODE XREF: _processXmlDecl+3C7j
					; _processXmlDecl+458j
		test	eax, eax
		jz	loc_64207924

loc_6420788C:				; CODE XREF: _processXmlDecl+33Aj
		mov	ecx, [ebx+1BCh]
		test	ecx, ecx
		jz	loc_642079A0
		mov	eax, [ebx+1B8h]
		test	eax, eax
		jnz	short loc_642078AA
		jmp	short loc_642078B8
; ---------------------------------------------------------------------------

loc_642078A6:				; CODE XREF: _processXmlDecl+2C6j
		mov	ecx, eax
		mov	eax, edx

loc_642078AA:				; CODE XREF: _processXmlDecl+2B2j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1BCh], eax
		test	edx, edx
		jnz	short loc_642078A6

loc_642078B8:				; CODE XREF: _processXmlDecl+2B4j
					; _processXmlDecl+3BCj
		mov	dword ptr [ebx+1B8h], 0
		xor	eax, eax
		mov	dword ptr [ebx+1C8h], 0
		mov	dword ptr [ebx+1C4h], 0
		mov	dword ptr [ebx+1C0h], 0
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642078F0:				; CODE XREF: _processXmlDecl+A6j
		cmp	[esp+8Ch+var_30], 1
		jnz	loc_6420769C
		mov	eax, [ebx+164h]
		mov	byte ptr [eax+82h], 1
		cmp	dword ptr [ebx+1ECh], 1
		jnz	loc_6420769C
		mov	dword ptr [ebx+1ECh], 0
		jmp	loc_6420769C
; ---------------------------------------------------------------------------

loc_64207924:				; CODE XREF: _processXmlDecl+296j
		mov	edx, [esp+8Ch+var_48]
		test	edx, edx
		jnz	loc_6420788C
		jmp	loc_6420768C
; ---------------------------------------------------------------------------

loc_64207935:				; CODE XREF: _processXmlDecl+B4j
		mov	edx, [ebx+50h]
		xor	eax, eax
		mov	[esp+8Ch+var_48], 0
		test	edx, edx
		jz	loc_64207876
		mov	edx, [ebx+90h]
		mov	eax, ebx
		mov	ecx, edi
		mov	[esp+8Ch+var_8C], ebp
		call	_reportDefault
		xor	eax, eax
		mov	[esp+8Ch+var_48], 0
		jmp	loc_64207876
; ---------------------------------------------------------------------------
		align 10h

loc_64207970:				; CODE XREF: _processXmlDecl+28Ej
		mov	edx, [esp+8Ch+var_24]
		test	edx, edx
		jz	short loc_642079B1
		mov	ecx, [ebx+90h]
		mov	esi, [edx+44h]
		cmp	esi, [ecx+44h]
		jz	loc_64207A42
		mov	eax, [esp+8Ch+var_20]
		mov	[ebx+120h], eax
		mov	eax, 13h
		jmp	loc_6420768C
; ---------------------------------------------------------------------------
		align 10h

loc_642079A0:				; CODE XREF: _processXmlDecl+2A4j
		mov	eax, [ebx+1B8h]
		mov	[ebx+1BCh], eax
		jmp	loc_642078B8
; ---------------------------------------------------------------------------

loc_642079B1:				; CODE XREF: _processXmlDecl+386j
		mov	esi, [esp+8Ch+var_20]
		test	esi, esi
		jz	loc_64207884
		mov	ecx, [esp+8Ch+var_48]
		test	ecx, ecx
		jz	loc_64207AC5

loc_642079C9:				; CODE XREF: _processXmlDecl+507j
		mov	edx, [esp+8Ch+var_48]
		mov	eax, ebx
		call	_handleUnknownEncoding
		mov	esi, [ebx+1BCh]
		test	esi, esi
		jz	loc_64207AB4
		mov	edx, [ebx+1B8h]
		test	edx, edx
		jnz	short loc_642079F4
		jmp	short loc_64207A02
; ---------------------------------------------------------------------------
		align 10h

loc_642079F0:				; CODE XREF: _processXmlDecl+410j
		mov	esi, edx
		mov	edx, ecx

loc_642079F4:				; CODE XREF: _processXmlDecl+3FAj
		mov	ecx, [edx]
		mov	[edx], esi
		mov	[ebx+1BCh], edx
		test	ecx, ecx
		jnz	short loc_642079F0

loc_64207A02:				; CODE XREF: _processXmlDecl+3FCj
					; _processXmlDecl+4D0j
		cmp	eax, 12h
		mov	dword ptr [ebx+1B8h], 0
		mov	dword ptr [ebx+1C8h], 0
		mov	dword ptr [ebx+1C4h], 0
		mov	dword ptr [ebx+1C0h], 0
		jnz	loc_6420768C
		mov	edx, [esp+8Ch+var_20]
		mov	[ebx+120h], edx
		jmp	loc_6420768C
; ---------------------------------------------------------------------------

loc_64207A42:				; CODE XREF: _processXmlDecl+394j
		mov	[ebx+90h], edx
		jmp	loc_64207884
; ---------------------------------------------------------------------------

loc_64207A4D:				; CODE XREF: _processXmlDecl+1C9j
		call	_poolGrow
		test	al, al
		jnz	loc_642077BF
		lea	esi, [esi+0]
		jmp	loc_6420773E
; ---------------------------------------------------------------------------

loc_64207A65:				; CODE XREF: _processXmlDecl+101j
		mov	eax, [esp+8Ch+var_48]
		call	_poolGrow
		test	al, al
		jnz	loc_642076F7
		jmp	loc_6420773E
; ---------------------------------------------------------------------------

loc_64207A7B:				; CODE XREF: _processXmlDecl+23Ej
		mov	eax, [esp+8Ch+var_44]
		nop
		call	_poolGrow
		test	al, al
		jz	loc_6420773E
		mov	eax, [ebx+1C4h]
		jmp	loc_64207834
; ---------------------------------------------------------------------------

loc_64207A98:				; CODE XREF: _processXmlDecl+172j
		mov	eax, [esp+8Ch+var_48]
		call	_poolGrow
		test	al, al
		jz	loc_6420773E
		mov	eax, [ebx+1C4h]
		jmp	loc_64207768
; ---------------------------------------------------------------------------

loc_64207AB4:				; CODE XREF: _processXmlDecl+3ECj
		mov	edx, [ebx+1B8h]
		mov	[ebx+1BCh], edx
		jmp	loc_64207A02
; ---------------------------------------------------------------------------

loc_64207AC5:				; CODE XREF: _processXmlDecl+3D3j
		mov	eax, [ebx+90h]
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], eax
		call	dword ptr [eax+20h]
		mov	edx, [ebx+90h]
		mov	ecx, eax
		add	esi, ecx
		mov	ecx, [esp+8Ch+var_20]
		lea	eax, [ebx+1B8h]
		mov	[esp+8Ch+var_8C], esi
		call	_poolStoreString
		test	eax, eax
		mov	[esp+8Ch+var_48], eax
		jnz	loc_642079C9
		jmp	loc_6420773E
_processXmlDecl	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=1Ch

_entityValueInitProcessor proc near	; CODE XREF: _externalParEntInitProcessor+129p
					; DATA XREF: _externalParEntInitProcessor:loc_6420C660o
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [esp+54h]
		lea	ebp, [esp+2Ch]
		mov	ebx, [esp+50h]
		mov	esi, [esp+58h]
		mov	[esp+2Ch], eax
		mov	edi, eax
		mov	[ebx+120h], eax
		jmp	short loc_64207B3D
; ---------------------------------------------------------------------------

loc_64207B35:				; CODE XREF: _entityValueInitProcessor+5Bj
					; _entityValueInitProcessor+60j ...
		mov	[ebx+120h], edx
		mov	edi, edx

loc_64207B3D:				; CODE XREF: _entityValueInitProcessor+23j
		mov	eax, [ebx+90h]
		mov	[esp+0Ch], ebp
		mov	[esp+8], esi
		mov	[esp+4], edi
		mov	[esp], eax
		call	dword ptr [eax]
		mov	edx, [esp+2Ch]
		mov	[ebx+124h], edx
		cmp	eax, 0
		jle	short loc_64207B90
		cmp	eax, 0Ch
		jz	short loc_64207BD0
		cmp	eax, 0Eh
		jnz	short loc_64207B35
		cmp	esi, edx
		nop
		jnz	short loc_64207B35
		cmp	byte ptr [ebx+1E4h], 0
		jnz	short loc_64207B35
		mov	eax, [esp+5Ch]
		xor	ebp, ebp
		mov	[eax], esi

loc_64207B83:				; CODE XREF: _entityValueInitProcessor+8Ej
					; _entityValueInitProcessor+96j ...
		add	esp, 3Ch
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64207B90:				; CODE XREF: _entityValueInitProcessor+51j
		jnz	loc_64207C9A

loc_64207B96:				; CODE XREF: _entityValueInitProcessor+191j
		cmp	eax, 0FFFFFFFFh
		mov	ebp, 5
		jz	short loc_64207B83
		test	eax, eax
		mov	bp, 4
		jz	short loc_64207B83
		cmp	eax, 0FFFFFFFEh
		mov	bp, 6
		jz	short loc_64207B83
		mov	edx, [ebx+90h]
		mov	eax, ebx
		mov	ecx, [esp+54h]
		mov	[esp], esi
		call	_storeEntityValue
		mov	ebp, eax
		jmp	short loc_64207B83
; ---------------------------------------------------------------------------
		align 10h

loc_64207BD0:				; CODE XREF: _entityValueInitProcessor+56j
		mov	[esp], edx
		mov	ecx, edi
		xor	edx, edx
		mov	eax, ebx
		call	_processXmlDecl
		test	eax, eax
		mov	ebp, eax
		jnz	short loc_64207B83
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	loc_64207CBD
		cmp	eax, 3
		jz	loc_64207C86
		mov	eax, [esp+2Ch]
		mov	edx, [esp+5Ch]
		mov	dword ptr [ebx+118h], offset _entityValueProcessor
		mov	edi, [ebx+90h]
		mov	[esp+1Ch], eax
		mov	[edx], eax
		mov	[esp+28h], eax
		jmp	short loc_64207C24
; ---------------------------------------------------------------------------

loc_64207C20:				; CODE XREF: _entityValueInitProcessor+12Cj
		mov	eax, [esp+28h]

loc_64207C24:				; CODE XREF: _entityValueInitProcessor+10Ej
		lea	edx, [esp+28h]
		mov	[esp+0Ch], edx
		mov	[esp+8], esi
		mov	[esp+4], eax
		mov	[esp], edi
		call	dword ptr [edi]
		cmp	eax, 0
		jg	short loc_64207C20
		jnz	loc_64207CCC

loc_64207C44:				; CODE XREF: _entityValueInitProcessor+1C3j
		cmp	eax, 0FFFFFFFFh
		mov	ebp, 5
		lea	esi, [esi+0]
		jz	loc_64207B83
		test	eax, eax
		mov	bp, 4
		jz	loc_64207B83
		cmp	eax, 0FFFFFFFEh
		mov	bp, 6
		jz	loc_64207B83
		mov	ecx, [esp+1Ch]
		mov	edx, edi
		mov	eax, ebx
		mov	[esp], esi
		call	_storeEntityValue
		mov	ebp, eax
		jmp	loc_64207B83
; ---------------------------------------------------------------------------

loc_64207C86:				; CODE XREF: _entityValueInitProcessor+E6j
		mov	eax, [esp+2Ch]
		mov	edx, [esp+5Ch]
		mov	[edx], eax
		add	esp, 3Ch
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64207C9A:				; CODE XREF: _entityValueInitProcessor:loc_64207B90j
		cmp	byte ptr [ebx+1E4h], 0
		jnz	loc_64207B96
		mov	eax, [esp+54h]
		xor	ebp, ebp
		mov	edx, [esp+5Ch]
		mov	[edx], eax
		add	esp, 3Ch
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64207CBD:				; CODE XREF: _entityValueInitProcessor+DDj
		mov	ebp, 23h
		add	esp, 3Ch
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64207CCC:				; CODE XREF: _entityValueInitProcessor+12Ej
		cmp	byte ptr [ebx+1E4h], 0
		jnz	loc_64207C44
		mov	edx, [esp+1Ch]
		mov	eax, [esp+5Ch]
		mov	[eax], edx
		jmp	loc_64207B83
_entityValueInitProcessor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_reportProcessingInstruction proc near	; CODE XREF: _epilogProcessor+1EFp
					; _doContent+9B5p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 5Ch
		mov	edi, [eax+40h]
		test	edi, edi
		jz	loc_64207D90
		mov	eax, [edx+44h]
		lea	edi, [ebx+1A0h]
		mov	[esp+6Ch+var_6C], esi
		lea	edx, [ecx+eax*2]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_44], edx
		call	dword ptr [esi+20h]
		mov	edx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_24], edx
		lea	ebp, [edx+eax]
		mov	edx, [ebx+1ACh]
		test	edx, edx
		jz	loc_64208049

loc_64207D39:				; CODE XREF: _reportProcessingInstruction+362j
		lea	eax, [ebx+1ACh]
		lea	edx, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_3C], ebx
		mov	ebx, eax
		mov	[esp+6Ch+var_38], eax
		mov	[esp+6Ch+var_40], edx

loc_64207D51:				; CODE XREF: _reportProcessingInstruction+91j
		mov	eax, [edi+8]
		mov	[esp+6Ch+var_60], ebx
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_6C], esi
		mov	[esp+6Ch+var_5C], eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], eax
		call	dword ptr [esi+3Ch]
		cmp	ebp, [esp+6Ch+var_24]
		jz	loc_64207E63
		mov	eax, edi
		call	_poolGrow
		test	al, al
		jnz	short loc_64207D51

loc_64207D83:				; CODE XREF: _reportProcessingInstruction+17Fj
					; _reportProcessingInstruction+1AFj ...
		xor	eax, eax

loc_64207D85:				; CODE XREF: _reportProcessingInstruction+14Ej
					; _reportProcessingInstruction+16Ej
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64207D90:				; CODE XREF: _reportProcessingInstruction+10j
		mov	eax, [eax+50h]
		test	eax, eax
		jz	loc_64207E39
		mov	[esp+6Ch+var_20], ecx
		cmp	byte ptr [edx+48h], 0
		jnz	loc_64207E43
		cmp	edx, [ebx+90h]
		lea	edi, [ebx+120h]
		lea	ebp, [ebx+124h]
		jz	short loc_64207DC6
		mov	edi, [ebx+12Ch]
		lea	ebp, [edi+4]

loc_64207DC6:				; CODE XREF: _reportProcessingInstruction+CBj
		mov	[esp+6Ch+var_3C], edi
		mov	edi, [esp+6Ch+arg_0]
		lea	eax, [esp+6Ch+var_24]
		lea	edx, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_40], eax
		mov	[esp+6Ch+var_38], edx
		xchg	ax, ax

loc_64207DE0:				; CODE XREF: _reportProcessingInstruction+147j
		mov	eax, [ebx+2Ch]
		mov	edx, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_24], eax
		mov	eax, [ebx+30h]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_64], edi
		mov	[esp+6Ch+var_6C], esi
		mov	[esp+6Ch+var_5C], eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_60], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+6Ch+var_20]
		mov	[ebp+0], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_68], edx
		sub	eax, edx
		mov	[esp+6Ch+var_64], eax
		mov	eax, [ebx+4]
		mov	[esp+6Ch+var_6C], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+6Ch+var_20]
		mov	edx, [esp+6Ch+var_3C]
		mov	[edx], eax
		cmp	edi, [esp+6Ch+var_20]
		jnz	short loc_64207DE0

loc_64207E39:				; CODE XREF: _reportProcessingInstruction+A5j
		mov	eax, 1
		jmp	loc_64207D85
; ---------------------------------------------------------------------------

loc_64207E43:				; CODE XREF: _reportProcessingInstruction+B3j
		mov	edx, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_68], ecx
		sub	edx, ecx
		mov	[esp+6Ch+var_64], edx
		mov	edx, [ebx+4]
		mov	[esp+6Ch+var_6C], edx
		call	eax
		mov	eax, 1
		jmp	loc_64207D85
; ---------------------------------------------------------------------------

loc_64207E63:				; CODE XREF: _reportProcessingInstruction+82j
		mov	ebx, [esp+6Ch+var_3C]
		mov	eax, [ebx+1B0h]
		test	eax, eax
		jz	loc_64207D83
		mov	eax, [ebx+1ACh]
		cmp	eax, [ebx+1A8h]
		jz	loc_6420805D

loc_64207E87:				; CODE XREF: _reportProcessingInstruction+383j
		mov	byte ptr [eax],	0
		mov	edx, [ebx+1B0h]
		add	eax, 1
		mov	[ebx+1ACh], eax
		test	edx, edx
		mov	[esp+6Ch+var_3C], edx
		jz	loc_64207D83
		mov	[ebx+1B0h], eax
		mov	eax, [esi+44h]
		mov	edx, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], esi
		add	eax, eax
		sub	edx, eax
		mov	[esp+6Ch+var_34], edx
		call	dword ptr [esi+24h]
		mov	[esp+6Ch+var_24], eax
		mov	ebp, [ebx+1ACh]
		test	ebp, ebp
		jz	loc_64208078

loc_64207ED6:				; CODE XREF: _reportProcessingInstruction+391j
		mov	[esp+6Ch+var_30], ebx
		mov	ebp, [esp+6Ch+var_38]
		mov	ebx, [esp+6Ch+var_34]

loc_64207EE2:				; CODE XREF: _reportProcessingInstruction+21Ej
		mov	eax, [edi+8]
		mov	[esp+6Ch+var_60], ebp
		mov	[esp+6Ch+var_64], ebx
		mov	[esp+6Ch+var_6C], esi
		mov	[esp+6Ch+var_5C], eax
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], eax
		call	dword ptr [esi+3Ch]
		cmp	ebx, [esp+6Ch+var_24]
		jz	short loc_64207F15
		mov	eax, edi
		call	_poolGrow
		test	al, al
		jnz	short loc_64207EE2
		jmp	loc_64207D83
; ---------------------------------------------------------------------------

loc_64207F15:				; CODE XREF: _reportProcessingInstruction+213j
		mov	ebx, [esp+6Ch+var_30]
		mov	esi, [ebx+1B0h]
		test	esi, esi
		jz	loc_64207D83
		mov	eax, [ebx+1ACh]
		cmp	eax, [ebx+1A8h]
		jz	loc_6420808C

loc_64207F39:				; CODE XREF: _reportProcessingInstruction+3B3j
		mov	byte ptr [eax],	0
		mov	ecx, [ebx+1B0h]
		add	eax, 1
		mov	[ebx+1ACh], eax
		test	ecx, ecx
		jz	loc_64207D83
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jz	short loc_64207F7B
		cmp	dl, 0Dh
		mov	eax, ecx
		mov	esi, ecx
		jnz	short loc_64207F71
		jmp	loc_64207FF9
; ---------------------------------------------------------------------------

loc_64207F68:				; CODE XREF: _reportProcessingInstruction+289j
		cmp	dl, 0Dh
		jz	loc_64207FF7

loc_64207F71:				; CODE XREF: _reportProcessingInstruction+271j
		add	eax, 1
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_64207F68

loc_64207F7B:				; CODE XREF: _reportProcessingInstruction+268j
					; _reportProcessingInstruction+343j
		mov	edx, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_64], ecx
		mov	[esp+6Ch+var_68], edx
		mov	eax, [ebx+4]
		mov	[esp+6Ch+var_6C], eax
		call	dword ptr [ebx+40h]
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_64208038
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_64207FB4
		jmp	short loc_64207FC2
; ---------------------------------------------------------------------------
		align 10h

loc_64207FB0:				; CODE XREF: _reportProcessingInstruction+2D0j
		mov	ecx, eax
		mov	eax, edx

loc_64207FB4:				; CODE XREF: _reportProcessingInstruction+2B6j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_64207FB0

loc_64207FC2:				; CODE XREF: _reportProcessingInstruction+2B8j
					; _reportProcessingInstruction+354j
		mov	dword ptr [ebx+1A0h], 0
		mov	eax, 1
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1A8h], 0
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64207FF7:				; CODE XREF: _reportProcessingInstruction+27Bj
		mov	esi, eax

loc_64207FF9:				; CODE XREF: _reportProcessingInstruction+273j
		movzx	edx, byte ptr [esi]
		add	eax, 1
		jmp	short loc_64208013
; ---------------------------------------------------------------------------

loc_64208001:				; CODE XREF: _reportProcessingInstruction+326j
		mov	[eax-1], dl
		mov	edi, eax

loc_64208006:				; CODE XREF: _reportProcessingInstruction+337j
		add	esi, 1
		add	eax, 1
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jz	short loc_64208030

loc_64208013:				; CODE XREF: _reportProcessingInstruction+30Fj
					; _reportProcessingInstruction+33Ej
		cmp	dl, 0Dh
		jnz	short loc_64208001
		add	esi, 1
		mov	edi, eax
		mov	byte ptr [eax-1], 0Ah
		movzx	edx, byte ptr [esi]
		cmp	dl, 0Ah
		jz	short loc_64208006
		add	eax, 1
		test	dl, dl
		jnz	short loc_64208013

loc_64208030:				; CODE XREF: _reportProcessingInstruction+321j
		mov	byte ptr [edi],	0
		jmp	loc_64207F7B
; ---------------------------------------------------------------------------

loc_64208038:				; CODE XREF: _reportProcessingInstruction+2A8j
		mov	eax, [ebx+1A0h]
		mov	[ebx+1A4h], eax
		jmp	loc_64207FC2
; ---------------------------------------------------------------------------

loc_64208049:				; CODE XREF: _reportProcessingInstruction+43j
		mov	eax, edi
		call	_poolGrow
		test	al, al
		jnz	loc_64207D39
		jmp	loc_64207D83
; ---------------------------------------------------------------------------

loc_6420805D:				; CODE XREF: _reportProcessingInstruction+191j
		mov	eax, edi
		nop
		call	_poolGrow
		test	al, al
		jz	loc_64207D83
		mov	eax, [ebx+1ACh]
		jmp	loc_64207E87
; ---------------------------------------------------------------------------

loc_64208078:				; CODE XREF: _reportProcessingInstruction+1E0j
		mov	eax, edi
		call	_poolGrow
		test	al, al
		jnz	loc_64207ED6
		jmp	loc_64207D83
; ---------------------------------------------------------------------------

loc_6420808C:				; CODE XREF: _reportProcessingInstruction+243j
		mov	eax, edi
		xchg	ax, ax
		call	_poolGrow
		test	al, al
		jz	loc_64207D83
		mov	eax, [ebx+1ACh]
		jmp	loc_64207F39
_reportProcessingInstruction endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_reportComment	proc near		; CODE XREF: _epilogProcessor+210p
					; _doContent+14Cp ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		mov	ebp, [eax+44h]
		mov	edi, [esp+5Ch+arg_0]
		test	ebp, ebp
		jz	short loc_64208140
		mov	eax, [edx+44h]
		lea	ebp, [ebx+1A0h]
		lea	edx, [eax+eax*2]
		lea	eax, [ecx+eax*4]
		sub	edi, edx
		mov	[esp+5Ch+var_24], eax
		mov	edx, [ebx+1ACh]
		test	edx, edx
		jz	loc_6420834E

loc_642080E9:				; CODE XREF: _reportComment+2A7j
		lea	eax, [ebx+1ACh]
		lea	edx, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_34], ebx
		mov	ebx, eax
		mov	[esp+5Ch+var_38], edx
		lea	esi, [esi+0]

loc_64208100:				; CODE XREF: _reportComment+80j
		mov	eax, [ebp+8]
		mov	[esp+5Ch+var_50], ebx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], eax
		call	dword ptr [esi+3Ch]
		cmp	edi, [esp+5Ch+var_24]
		jz	loc_64208201
		mov	eax, ebp
		call	_poolGrow
		test	al, al
		jnz	short loc_64208100

loc_64208132:				; CODE XREF: _reportComment+15Dj
					; _reportComment+189j ...
		xor	eax, eax

loc_64208134:				; CODE XREF: _reportComment+130j
					; _reportComment+14Cj
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64208140:				; CODE XREF: _reportComment+14j
		mov	eax, [eax+50h]
		test	eax, eax
		jz	loc_642081DB
		mov	[esp+5Ch+var_20], ecx
		cmp	byte ptr [edx+48h], 0
		jnz	loc_642081E5
		cmp	edx, [ebx+90h]
		jz	loc_64208329
		mov	ebp, [ebx+12Ch]
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_38], eax
		lea	edx, [ebp+4]
		mov	[esp+5Ch+var_34], edx
		lea	edx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_30], edx

loc_64208182:				; CODE XREF: _reportComment+129j
					; _reportComment+299j
		mov	eax, [ebx+2Ch]
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_24], eax
		mov	eax, [ebx+30h]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_50], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+5Ch+var_20]
		mov	edx, [esp+5Ch+var_34]
		mov	[edx], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_58], edx
		sub	eax, edx
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+5Ch+var_20]
		mov	[ebp+0], eax
		cmp	edi, [esp+5Ch+var_20]
		jnz	short loc_64208182

loc_642081DB:				; CODE XREF: _reportComment+95j
		mov	eax, 1
		jmp	loc_64208134
; ---------------------------------------------------------------------------

loc_642081E5:				; CODE XREF: _reportComment+A3j
		sub	edi, ecx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ecx
		mov	edx, [ebx+4]
		mov	[esp+5Ch+var_5C], edx
		call	eax
		mov	eax, 1
		jmp	loc_64208134
; ---------------------------------------------------------------------------

loc_64208201:				; CODE XREF: _reportComment+71j
		mov	ebx, [esp+5Ch+var_34]
		mov	eax, [ebx+1B0h]
		test	eax, eax
		jz	loc_64208132
		mov	eax, [ebx+1ACh]
		cmp	eax, [ebx+1A8h]
		jz	loc_64208365

loc_64208225:				; CODE XREF: _reportComment+2CCj
		mov	byte ptr [eax],	0
		mov	esi, [ebx+1B0h]
		add	eax, 1
		mov	[ebx+1ACh], eax
		test	esi, esi
		jz	loc_64208132
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jz	short loc_64208263
		cmp	dl, 0Dh
		mov	eax, esi
		mov	ecx, esi
		jnz	short loc_64208259
		jmp	loc_642082D9
; ---------------------------------------------------------------------------

loc_64208254:				; CODE XREF: _reportComment+1B1j
		cmp	dl, 0Dh
		jz	short loc_642082D7

loc_64208259:				; CODE XREF: _reportComment+19Dj
		add	eax, 1
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_64208254

loc_64208263:				; CODE XREF: _reportComment+194j
					; _reportComment+263j
		mov	[esp+5Ch+var_58], esi
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ebx+44h]
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_64208318
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_64208294
		jmp	short loc_642082A2
; ---------------------------------------------------------------------------
		align 10h

loc_64208290:				; CODE XREF: _reportComment+1F0j
		mov	ecx, eax
		mov	eax, edx

loc_64208294:				; CODE XREF: _reportComment+1D6j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_64208290

loc_642082A2:				; CODE XREF: _reportComment+1D8j
					; _reportComment+274j
		mov	dword ptr [ebx+1A0h], 0
		mov	eax, 1
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1A8h], 0
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642082D7:				; CODE XREF: _reportComment+1A7j
		mov	ecx, eax

loc_642082D9:				; CODE XREF: _reportComment+19Fj
		movzx	edx, byte ptr [ecx]
		add	eax, 1
		jmp	short loc_642082F3
; ---------------------------------------------------------------------------

loc_642082E1:				; CODE XREF: _reportComment+246j
		mov	[eax-1], dl
		mov	edi, eax

loc_642082E6:				; CODE XREF: _reportComment+257j
		add	ecx, 1
		add	eax, 1
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jz	short loc_64208310

loc_642082F3:				; CODE XREF: _reportComment+22Fj
					; _reportComment+25Ej
		cmp	dl, 0Dh
		jnz	short loc_642082E1
		add	ecx, 1
		mov	edi, eax
		mov	byte ptr [eax-1], 0Ah
		movzx	edx, byte ptr [ecx]
		cmp	dl, 0Ah
		jz	short loc_642082E6
		add	eax, 1
		test	dl, dl
		jnz	short loc_642082F3

loc_64208310:				; CODE XREF: _reportComment+241j
		mov	byte ptr [edi],	0
		jmp	loc_64208263
; ---------------------------------------------------------------------------

loc_64208318:				; CODE XREF: _reportComment+1C8j
		mov	eax, [ebx+1A0h]
		mov	[ebx+1A4h], eax
		jmp	loc_642082A2
; ---------------------------------------------------------------------------

loc_64208329:				; CODE XREF: _reportComment+AFj
		lea	eax, [ebx+124h]
		mov	[esp+5Ch+var_34], eax
		lea	edx, [esp+5Ch+var_24]
		lea	eax, [esp+5Ch+var_20]
		lea	ebp, [ebx+120h]
		mov	[esp+5Ch+var_38], edx
		mov	[esp+5Ch+var_30], eax
		jmp	loc_64208182
; ---------------------------------------------------------------------------

loc_6420834E:				; CODE XREF: _reportComment+33j
		mov	eax, ebp
		call	_poolGrow
		test	al, al
		jnz	loc_642080E9
		lea	esi, [esi+0]
		jmp	loc_64208132
; ---------------------------------------------------------------------------

loc_64208365:				; CODE XREF: _reportComment+16Fj
		mov	eax, ebp
		call	_poolGrow
		test	al, al
		xchg	ax, ax
		jz	loc_64208132
		mov	eax, [ebx+1ACh]
		jmp	loc_64208225
_reportComment	endp

; ---------------------------------------------------------------------------
		jmp	short _XML_DefaultCurrent
; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. XML_DefaultCurrent

; =============== S U B	R O U T	I N E =======================================


		public _XML_DefaultCurrent
_XML_DefaultCurrent proc near		; CODE XREF: .text:64208381j

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	edx, [ebx+50h]
		test	edx, edx
		jz	loc_64208448
		mov	eax, [ebx+12Ch]
		test	eax, eax
		jz	loc_64208495
		mov	ecx, [eax]
		mov	esi, [ebx+0E4h]
		mov	edi, [eax+4]
		mov	[esp+5Ch+var_24], ecx
		cmp	byte ptr [esi+48h], 0
		jnz	loc_64208450
		cmp	esi, [ebx+90h]
		jz	loc_64208470
		mov	[esp+5Ch+var_38], eax
		lea	edx, [esp+5Ch+var_20]
		add	eax, 4
		mov	[esp+5Ch+var_30], eax
		lea	ebp, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_34], edx

loc_642083F0:				; CODE XREF: _XML_DefaultCurrent+B6j
					; _XML_DefaultCurrent+100j
		mov	eax, [ebx+2Ch]
		mov	[esp+5Ch+var_20], eax
		mov	eax, [ebx+30h]
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_50], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+5Ch+var_24]
		mov	edx, [esp+5Ch+var_30]
		mov	[edx], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], edx
		sub	eax, edx
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+5Ch+var_24]
		mov	edx, [esp+5Ch+var_38]
		mov	[edx], eax
		cmp	edi, [esp+5Ch+var_24]
		jnz	short loc_642083F0

loc_64208448:				; CODE XREF: _XML_DefaultCurrent+10j
					; _XML_DefaultCurrent+1B7j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64208450:				; CODE XREF: _XML_DefaultCurrent+37j
		sub	edi, ecx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ecx
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	edx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64208470:				; CODE XREF: _XML_DefaultCurrent+43j
		lea	eax, [ebx+120h]
		mov	[esp+5Ch+var_38], eax
		lea	edx, [ebx+124h]
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_30], edx
		lea	ebp, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_34], eax
		jmp	loc_642083F0
; ---------------------------------------------------------------------------

loc_64208495:				; CODE XREF: _XML_DefaultCurrent+1Ej
		mov	eax, [ebx+120h]
		mov	esi, [ebx+90h]
		mov	edi, [ebx+124h]
		mov	[esp+5Ch+var_20], eax
		cmp	byte ptr [esi+48h], 0
		jnz	loc_64208535
		lea	eax, [ebx+120h]
		mov	[esp+5Ch+var_30], eax
		lea	edx, [ebx+124h]
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_38], edx
		lea	ebp, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_34], eax

loc_642084D5:				; CODE XREF: _XML_DefaultCurrent+19Bj
		mov	eax, [ebx+2Ch]
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_24], eax
		mov	eax, [ebx+30h]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_5C], esi
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+5Ch+var_20]
		mov	edx, [esp+5Ch+var_38]
		mov	[edx], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_58], edx
		sub	eax, edx
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+5Ch+var_20]
		mov	edx, [esp+5Ch+var_30]
		mov	[edx], eax
		cmp	edi, [esp+5Ch+var_20]
		jnz	short loc_642084D5
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64208535:				; CODE XREF: _XML_DefaultCurrent+11Fj
		sub	edi, eax
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	edx
		jmp	loc_64208448
_XML_DefaultCurrent endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. XML_Parse

; =============== S U B	R O U T	I N E =======================================


; int __cdecl XML_Parse(int, void *, size_t, int)
		public _XML_Parse
_XML_Parse	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], esi
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_4], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	short loc_642085F0
		cmp	eax, 3
		jz	short loc_642085D0
		test	eax, eax
		jz	short loc_642085B6

loc_6420857F:				; CODE XREF: _XML_Parse+6Ej
					; _XML_Parse+79j
		test	esi, esi
		mov	dword ptr [ebx+1E0h], 1
		jnz	loc_64208610
		mov	eax, edi
		test	edi, edi
		mov	[ebx+1E4h], al
		jnz	loc_64208740

loc_642085A1:				; CODE XREF: _XML_Parse+22Fj
		mov	eax, 1

loc_642085A6:				; CODE XREF: _XML_Parse+D2j
					; _XML_Parse+121j ...
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_642085B6:				; CODE XREF: _XML_Parse+2Dj
		mov	edx, [ebx+1DCh]
		test	edx, edx
		jnz	short loc_6420857F
		mov	eax, ebx
		call	_startParsing
		test	al, al
		jnz	short loc_6420857F
		jmp	loc_64208665
; ---------------------------------------------------------------------------

loc_642085D0:				; CODE XREF: _XML_Parse+29j
					; _XML_Parse+FAj
		mov	dword ptr [ebx+11Ch], 21h
		xor	eax, eax
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642085F0:				; CODE XREF: _XML_Parse+24j
					; _XML_Parse+F5j
		mov	dword ptr [ebx+11Ch], 24h
		xor	eax, eax
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64208610:				; CODE XREF: _XML_Parse+3Bj
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	_XML_GetBuffer
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		jz	loc_642085A6
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], esi ;	size_t
		mov	[esp+2Ch+var_2C], edx ;	void *
		mov	[esp+2Ch+var_28], eax ;	void *
		call	_memcpy
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	short loc_642085F0
		cmp	eax, 3
		jz	short loc_642085D0
		test	eax, eax
		jnz	short loc_64208676
		mov	eax, [ebx+1DCh]
		test	eax, eax
		jnz	short loc_64208676
		mov	eax, ebx
		call	_startParsing
		test	al, al
		jnz	short loc_64208676

loc_64208665:				; CODE XREF: _XML_Parse+7Bj
		mov	dword ptr [ebx+11Ch], 1
		xor	eax, eax
		jmp	loc_642085A6
; ---------------------------------------------------------------------------

loc_64208676:				; CODE XREF: _XML_Parse+FEj
					; _XML_Parse+108j ...
		mov	eax, [ebx+1Ch]
		mov	ecx, edi
		mov	edx, [ebx+18h]
		add	[ebx+24h], esi
		mov	[ebx+1E4h], cl
		add	eax, esi
		lea	ecx, [ebx+18h]
		mov	dword ptr [ebx+1E0h], 1
		mov	[ebx+128h], edx
		mov	[ebx+1Ch], eax
		mov	[ebx+28h], eax
		mov	[esp+2Ch+var_20], ecx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+118h]
		test	eax, eax
		mov	[ebx+11Ch], eax
		jnz	short loc_64208720
		mov	edx, [ebx+1E0h]
		cmp	edx, 1
		ja	loc_642087D4
		test	edi, edi
		jnz	loc_642087C0

loc_642086D8:				; CODE XREF: _XML_Parse+28Cj
		mov	eax, 1

loc_642086DD:				; CODE XREF: _XML_Parse+292j
		lea	ecx, [ebx+198h]
		mov	edx, [ebx+90h]
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, [ebx+18h]
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_24], ecx
		mov	ecx, [ebx+128h]
		mov	[esp+2Ch+var_2C], edx
		mov	[esp+2Ch+var_28], ecx
		call	dword ptr [edx+34h]
		mov	edx, [ebx+18h]
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+128h], edx
		jmp	loc_642085A6
; ---------------------------------------------------------------------------
		align 10h

loc_64208720:				; CODE XREF: _XML_Parse+16Fj
					; _XML_Parse+21Fj
		mov	eax, [ebx+120h]
		mov	dword ptr [ebx+118h], offset _errorProcessor
		mov	[ebx+124h], eax
		xor	eax, eax
		jmp	loc_642085A6
; ---------------------------------------------------------------------------
		align 10h

loc_64208740:				; CODE XREF: _XML_Parse+4Bj
		mov	eax, [ebx+18h]
		lea	ecx, [ebx+18h]
		mov	edx, [ebx+1Ch]
		mov	[ebx+128h], eax
		mov	[ebx+28h], edx
		mov	[esp+2Ch+var_20], ecx
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+118h]
		test	eax, eax
		mov	[ebx+11Ch], eax
		jnz	short loc_64208720
		mov	eax, [ebx+1E0h]
		cmp	eax, 1
		jbe	short loc_642087C0
		cmp	eax, 3
		jnz	loc_642085A1
		lea	edx, [ebx+198h]
		mov	eax, [ebx+90h]
		mov	[esp+2Ch+var_20], edx
		mov	edx, [ebx+18h]
		mov	[esp+2Ch+var_24], edx
		mov	edx, [ebx+128h]
		mov	[esp+2Ch+var_2C], eax
		mov	[esp+2Ch+var_28], edx
		call	dword ptr [eax+34h]
		mov	eax, [ebx+18h]
		mov	[ebx+128h], eax
		mov	eax, 2
		jmp	loc_642085A6
; ---------------------------------------------------------------------------
		align 10h

loc_642087C0:				; CODE XREF: _XML_Parse+182j
					; _XML_Parse+22Aj
		mov	dword ptr [ebx+1E0h], 2
		mov	eax, 1
		jmp	loc_642085A6
; ---------------------------------------------------------------------------

loc_642087D4:				; CODE XREF: _XML_Parse+17Aj
		cmp	edx, 3
		mov	eax, 2
		jnz	loc_642086D8
		jmp	loc_642086DD
_XML_Parse	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_epilogProcessor proc near		; CODE XREF: _doContent+352p
					; _doContent+7CCp
					; DATA XREF: ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 5Ch
		mov	[esp+5Ch+var_10], ebx
		mov	ebx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_4], ebp
		mov	ebp, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_C], esi
		lea	esi, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_8], edi
		mov	edi, [esp+5Ch+arg_8]
		mov	dword ptr [ebx+118h], offset _epilogProcessor
		mov	[ebx+120h], ebp

loc_64208823:				; CODE XREF: _epilogProcessor+CFj
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_20], 0
		mov	[esp+5Ch+var_50], esi
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [eax]
		mov	edx, [esp+5Ch+var_20]
		mov	[ebx+124h], edx
		add	eax, 0Fh
		cmp	eax, 1Eh	; switch 31 cases
		jbe	short loc_64208874

loc_64208854:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		mov	eax, 9		; jumptable 64208874 default case
		lea	esi, [esi+0]

loc_64208860:				; CODE XREF: _epilogProcessor+179j
					; _epilogProcessor+188j ...
		mov	ebx, [esp+5Ch+var_10]
		mov	esi, [esp+5Ch+var_C]
		mov	edi, [esp+5Ch+var_8]
		mov	ebp, [esp+5Ch+var_4]
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------

loc_64208874:				; CODE XREF: _epilogProcessor+62j
		jmp	ds:off_6421D234[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64208880:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		mov	ecx, [ebx+50h]	; jumptable 64208874 case 30
		test	ecx, ecx
		jz	short loc_6420889F
		mov	eax, [ebx+90h]
		mov	ecx, ebp
		mov	[esp+5Ch+var_5C], edx
		mov	edx, eax
		mov	eax, ebx
		call	_reportDefault
		mov	edx, [esp+5Ch+var_20]

loc_6420889F:				; CODE XREF: _epilogProcessor+95j
					; _epilogProcessor+1FCj
		mov	eax, [ebx+1E0h]
		mov	[ebx+120h], edx
		cmp	eax, 2
		jz	loc_64208A13
		cmp	eax, 3
		jz	loc_64208961
		mov	ebp, edx
		jmp	loc_64208823
; ---------------------------------------------------------------------------

loc_642088C4:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		mov	eax, [ebx+50h]	; jumptable 64208874 case 0
		test	eax, eax
		jz	loc_64208961
		mov	esi, [ebx+90h]
		mov	[esp+5Ch+var_24], ebp
		cmp	byte ptr [esi+48h], 0
		jnz	loc_64208A20
		lea	ebp, [ebx+120h]
		lea	edi, [ebx+124h]
		mov	[esp+5Ch+var_30], ebp
		mov	ebp, edi
		mov	edi, edx

loc_642088F7:				; CODE XREF: _epilogProcessor+15Ej
		mov	eax, [ebx+2Ch]
		lea	edx, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_28], eax
		mov	eax, [ebx+30h]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_5C], esi
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_50], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+5Ch+var_24]
		mov	[ebp+0], eax
		mov	ecx, [ebx+2Ch]
		mov	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_58], ecx
		sub	eax, ecx
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+5Ch+var_24]
		mov	edx, [esp+5Ch+var_30]
		mov	[edx], eax
		cmp	edi, [esp+5Ch+var_24]
		jnz	short loc_642088F7

loc_64208950:				; CODE XREF: _epilogProcessor+242j
		cmp	dword ptr [ebx+1E0h], 2
		jz	loc_64208A13
		mov	edx, [esp+5Ch+var_20]

loc_64208961:				; CODE XREF: _epilogProcessor+C7j
					; _epilogProcessor+D9j
		mov	eax, [esp+5Ch+arg_C]
		mov	[eax], edx
		xor	eax, eax
		jmp	loc_64208860
; ---------------------------------------------------------------------------
		align 10h

loc_64208970:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		mov	edx, [esp+5Ch+arg_C] ; jumptable 64208874 case 11
		xor	eax, eax
		mov	[edx], ebp
		jmp	loc_64208860
; ---------------------------------------------------------------------------
		align 10h

loc_64208980:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		cmp	byte ptr [ebx+1E4h], 0 ; jumptable 64208874 case 13
		mov	eax, 6
		jnz	loc_64208860
		mov	edx, [esp+5Ch+arg_C]
		xor	al, al
		mov	[edx], ebp
		jmp	loc_64208860
; ---------------------------------------------------------------------------
		align 10h

loc_642089A0:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		cmp	byte ptr [ebx+1E4h], 0 ; jumptable 64208874 case 14
		mov	eax, 5
		jnz	loc_64208860
		mov	eax, [esp+5Ch+arg_C]
		mov	[eax], ebp
		xor	eax, eax
		jmp	loc_64208860
; ---------------------------------------------------------------------------
		align 10h

loc_642089C0:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		mov	[ebx+120h], edx	; jumptable 64208874 case 15
		mov	eax, 4
		jmp	loc_64208860
; ---------------------------------------------------------------------------

loc_642089D0:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		mov	eax, [ebx+90h]	; jumptable 64208874 case 26
		mov	ecx, ebp
		mov	[esp+5Ch+var_5C], edx
		mov	edx, eax
		mov	eax, ebx
		call	_reportProcessingInstruction
		test	eax, eax
		jz	short loc_64208A09

loc_642089E8:				; CODE XREF: _epilogProcessor+217j
		mov	edx, [esp+5Ch+var_20]
		jmp	loc_6420889F
; ---------------------------------------------------------------------------

loc_642089F1:				; CODE XREF: _epilogProcessor:loc_64208874j
					; DATA XREF: .rdata:off_6421D234o
		mov	eax, [ebx+90h]	; jumptable 64208874 case 28
		mov	ecx, ebp
		mov	[esp+5Ch+var_5C], edx
		mov	edx, eax
		mov	eax, ebx
		call	_reportComment
		test	eax, eax
		jnz	short loc_642089E8

loc_64208A09:				; CODE XREF: _epilogProcessor+1F6j
		mov	eax, 1
		jmp	loc_64208860
; ---------------------------------------------------------------------------

loc_64208A13:				; CODE XREF: _epilogProcessor+BEj
					; _epilogProcessor+167j
		mov	eax, 23h
		jmp	loc_64208860
; ---------------------------------------------------------------------------
		align 10h

loc_64208A20:				; CODE XREF: _epilogProcessor+EDj
		sub	edx, ebp
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], ebp
		mov	edx, [ebx+4]
		mov	[esp+5Ch+var_5C], edx
		call	eax
		jmp	loc_64208950
_epilogProcessor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doContent	proc near		; CODE XREF: _externalEntityContentProcessor+42p
					; _contentProcessor+3Fp ...

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_71		= byte ptr -71h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		push	ebp
		mov	ebp, ecx
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 0ACh
		mov	[esp+0BCh+var_68], edx
		movzx	eax, [esp+0BCh+arg_C]
		mov	edx, [ebx+164h]
		cmp	[ebx+90h], ecx
		mov	[esp+0BCh+var_71], al
		mov	[esp+0BCh+var_6C], edx
		jz	loc_64209415
		mov	edx, [ebx+12Ch]
		mov	[esp+0BCh+var_7C], edx
		mov	ecx, [esp+0BCh+var_7C]
		add	edx, 4
		mov	[esp+0BCh+var_78], edx

loc_64208A89:				; CODE XREF: _doContent+9E9j
		mov	eax, [esp+0BCh+arg_0]
		lea	edx, [ebx+1A0h]
		mov	[esp+0BCh+var_64], edx
		mov	[ecx], eax
		mov	eax, [esp+0BCh+var_6C]
		movzx	ecx, [esp+0BCh+var_71]
		add	eax, 50h
		mov	[esp+0BCh+var_5C], eax
		mov	[esp+0BCh+var_60], ecx

loc_64208AB0:				; CODE XREF: _doContent+F6j
		mov	eax, [esp+0BCh+arg_0]
		lea	edx, [esp+0BCh+var_20]
		mov	ecx, [esp+0BCh+arg_4]
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+var_BC], ebp
		mov	[esp+0BCh+var_20], eax
		mov	[esp+0BCh+var_B4], ecx
		mov	[esp+0BCh+var_B8], eax
		call	dword ptr [ebp+4]
		mov	edx, [esp+0BCh+var_20]
		mov	ecx, [esp+0BCh+var_78]
		mov	[ecx], edx
		add	eax, 5
		cmp	eax, 12h	; switch 19 cases
		jbe	short loc_64208B60
		mov	esi, [ebx+50h]	; jumptable 64208B60 default case
		test	esi, esi
		jz	short loc_64208B14
		mov	eax, [esp+0BCh+var_20]
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportDefault

loc_64208B14:				; CODE XREF: _doContent+B8j
					; _doContent+153j ...
		mov	eax, [esp+0BCh+var_20]

loc_64208B1B:				; CODE XREF: _doContent+3F3j
					; _doContent+42Dj ...
		mov	ecx, [esp+0BCh+var_7C]
		mov	[esp+0BCh+arg_0], eax
		mov	[ecx], eax
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	short loc_64208B67
		cmp	eax, 3
		jnz	loc_64208AB0
		mov	eax, [esp+0BCh+var_20]
		mov	edx, [esp+0BCh+arg_8]
		mov	[edx], eax
		xor	eax, eax

loc_64208B4E:				; CODE XREF: _doContent+165j
					; _doContent+1FEj ...
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64208B60:				; CODE XREF: _doContent+B1j
		jmp	ds:off_6421D2B0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64208B67:				; CODE XREF: _doContent+F1j
		add	esp, 0ACh
		mov	eax, 23h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64208B77:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	eax, [esp+0BCh+var_20] ; jumptable 64208B60 case 18
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportComment
		test	eax, eax
		jnz	loc_64208B14
		lea	esi, [esi+0]

loc_64208BA0:				; CODE XREF: _doContent+50Cj
					; _doContent+658j ...
		mov	eax, 1
		jmp	short loc_64208B4E
; ---------------------------------------------------------------------------

loc_64208BA7:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		cmp	[esp+0BCh+var_71], 0 ; jumptable 64208B60 case 0
		lea	esi, [esi+0]
		jnz	loc_642092A0
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	loc_642096D4
		cmp	byte ptr [ebp+48h], 0
		jnz	loc_64209510
		mov	eax, [ebx+2Ch]
		lea	edx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_2C], eax
		mov	eax, [ebx+30h]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_BC], ebp
		mov	[esp+0BCh+var_AC], eax
		lea	eax, [esp+0BCh+var_2C]
		mov	[esp+0BCh+var_B0], eax
		mov	eax, [esp+0BCh+arg_4]
		mov	[esp+0BCh+var_B4], eax
		call	dword ptr [ebp+3Ch]
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+0BCh+var_2C]
		mov	[esp+0BCh+var_B8], edx
		sub	eax, edx
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+3Ch]

loc_64208C20:				; CODE XREF: _doContent+AF0j
					; _doContent+C99j ...
		mov	ebp, [esp+0BCh+var_68]
		test	ebp, ebp
		jnz	loc_64209535
		mov	eax, [esp+0BCh+var_7C]
		mov	edx, [esp+0BCh+arg_4]
		mov	[eax], edx
		mov	eax, 3
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64208C43:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		cmp	[esp+0BCh+var_71], 0 ; jumptable 64208B60 case 1
		jnz	loc_642092A0
		mov	ecx, [esp+0BCh+var_68]
		test	ecx, ecx
		jle	loc_64209500
		mov	eax, [esp+0BCh+var_68]
		cmp	[ebx+138h], eax
		jz	loc_64208E82

loc_64208C6A:				; CODE XREF: _doContent+23Ej
					; _doContent+833j
		mov	eax, 0Dh
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64208C74:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	ecx, [esp+0BCh+var_68] ; jumptable 64208B60 case 10
		cmp	[ebx+138h], ecx
		jz	short loc_64208C6A
		mov	eax, [ebx+16Ch]
		mov	edx, eax
		mov	[esp+0BCh+var_70], eax
		mov	eax, [eax]
		mov	[ebx+16Ch], eax
		mov	eax, [ebx+170h]
		mov	[edx], eax
		mov	[ebx+170h], edx
		mov	edx, [ebp+44h]
		mov	[esp+0BCh+var_BC], ebp
		add	edx, edx
		add	edx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_80], edx
		call	dword ptr [ebp+20h]
		mov	edx, [esp+0BCh+var_80]
		mov	ecx, eax
		mov	eax, [esp+0BCh+var_70]
		cmp	ecx, [eax+8]
		jnz	loc_64209783
		mov	esi, [eax+4]
		cmp	ecx, ecx
		mov	edi, edx
		repe cmpsb
		jnz	loc_64209783
		mov	eax, [ebx+38h]
		sub	dword ptr [ebx+138h], 1
		test	eax, eax
		jz	loc_642096AA
		mov	ecx, [esp+0BCh+var_70]
		mov	edx, [ecx+10h]
		test	edx, edx
		jnz	loc_64209430

loc_64208CFF:				; CODE XREF: _doContent+9F7j
					; _doContent+A5Bj
		mov	ecx, [esp+0BCh+var_70]
		mov	edx, [ecx+0Ch]
		mov	[esp+0BCh+var_B8], edx
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax

loc_64208D12:				; CODE XREF: _doContent+C6Fj
					; _doContent+C8Fj
		mov	eax, [esp+0BCh+var_70]
		mov	esi, [eax+2Ch]
		test	esi, esi
		jz	short loc_64208D60
		mov	edi, eax
		nop

loc_64208D20:				; CODE XREF: _doContent+31Ej
		mov	edx, [ebx+68h]
		mov	eax, esi
		test	edx, edx
		jz	short loc_64208D3C
		mov	eax, [esi]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	edx
		mov	eax, [edi+2Ch]

loc_64208D3C:				; CODE XREF: _doContent+2E7j
		mov	eax, [eax+4]
		mov	[edi+2Ch], eax
		mov	eax, [ebx+178h]
		mov	[esi+4], eax
		mov	eax, [esi]
		mov	[ebx+178h], esi
		mov	edx, [esi+8]
		mov	[eax+4], edx
		mov	esi, [edi+2Ch]
		test	esi, esi
		jnz	short loc_64208D20

loc_64208D60:				; CODE XREF: _doContent+2DBj
		mov	ecx, [ebx+138h]
		test	ecx, ecx
		jnz	loc_64208B14
		mov	edx, [esp+0BCh+arg_8]
		mov	ecx, [esp+0BCh+arg_4]
		mov	eax, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_BC], ebx
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+var_B4], ecx
		mov	[esp+0BCh+var_B8], eax
		call	_epilogProcessor
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------
		align 10h

loc_64208DA0:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	esi, [ebx+3Ch]	; jumptable 64208B60 case 11
		test	esi, esi
		jz	loc_642092F4
		cmp	byte ptr [ebp+48h], 0
		nop
		jnz	loc_642094D0
		mov	edi, [esp+0BCh+var_78]
		jmp	short loc_64208DC6
; ---------------------------------------------------------------------------
		align 10h

loc_64208DC0:				; CODE XREF: _doContent+3F1j
		mov	edx, [esp+0BCh+var_7C]
		mov	[edx], eax

loc_64208DC6:				; CODE XREF: _doContent+37Aj
		mov	eax, [ebx+2Ch]
		lea	edx, [esp+0BCh+var_2C]
		lea	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_2C], eax
		mov	eax, [ebx+30h]
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+var_B8], ecx
		mov	[esp+0BCh+var_BC], ebp
		mov	[esp+0BCh+var_AC], eax
		mov	eax, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_B4], eax
		call	dword ptr [ebp+3Ch]
		mov	eax, [esp+0BCh+arg_0]
		mov	[edi], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+0BCh+var_2C]
		mov	[esp+0BCh+var_B8], edx
		sub	eax, edx
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	esi
		mov	eax, [esp+0BCh+arg_0]
		cmp	eax, [esp+0BCh+var_20]
		jnz	short loc_64208DC0
		jmp	loc_64208B1B
; ---------------------------------------------------------------------------

loc_64208E38:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	eax, [ebx+3Ch]	; jumptable 64208B60 case 12
		test	eax, eax
		jz	loc_642092F4
		mov	byte ptr [esp+0BCh+var_24], 0Ah

loc_64208E4B:				; CODE XREF: _doContent+8AEj
		mov	[esp+0BCh+var_B4], 1
		lea	edx, [esp+0BCh+var_24]

loc_64208E5A:				; CODE XREF: _doContent+BF8j
		mov	[esp+0BCh+var_B8], edx
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		mov	eax, [esp+0BCh+var_20]
		jmp	loc_64208B1B
; ---------------------------------------------------------------------------

loc_64208E72:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		cmp	[esp+0BCh+var_71], 0 ; jumptable 64208B60 case 4
		mov	eax, 5
		jz	loc_64208B4E

loc_64208E82:				; CODE XREF: _doContent+224j
					; _doContent+7DBj
		mov	eax, [esp+0BCh+arg_0]
		mov	edx, [esp+0BCh+arg_8]
		mov	[edx], eax
		xor	eax, eax
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------
		align 10h

loc_64208EA0:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	eax, [esp+0BCh+var_20] ; jumptable 64208B60 case 5
		mov	ecx, [esp+0BCh+var_7C]
		mov	[ecx], eax
		mov	eax, 4
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64208EB7:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	esi, [ebx+170h]	; jumptable 64208B60 cases 6,7
		test	esi, esi
		jz	loc_6420970F
		mov	eax, [esi]
		mov	[ebx+170h], eax

loc_64208ECD:				; CODE XREF: _doContent+CFEj
		mov	eax, [ebx+16Ch]
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0
		mov	dword ptr [esi+2Ch], 0
		mov	[esi], eax
		mov	eax, [esp+0BCh+arg_0]
		add	eax, [ebp+44h]
		mov	[ebx+16Ch], esi
		mov	[esi+4], eax
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebp
		call	dword ptr [ebp+20h]
		mov	[esp+0BCh+var_58], ebx
		mov	[esi+8], eax
		mov	eax, [esi+4]
		add	dword ptr [ebx+138h], 1
		mov	edx, [esi+8]
		mov	[esp+0BCh+var_2C], eax
		add	edx, eax
		mov	eax, [esi+24h]
		mov	ebx, edx
		mov	[esp+0BCh+var_24], eax
		mov	edi, [esi+28h]
		jmp	short loc_64208F66
; ---------------------------------------------------------------------------

loc_64208F35:				; CODE XREF: _doContent+566j
		mov	edi, [esi+28h]
		mov	edx, [esp+0BCh+var_58]
		mov	[esp+0BCh+var_BC], eax
		sub	edi, eax
		add	edi, edi
		mov	[esp+0BCh+var_B8], edi
		call	dword ptr [edx+10h]
		test	eax, eax
		jz	loc_64208BA0
		mov	[esi+24h], eax
		lea	edi, [eax+edi]
		add	eax, [esp+0BCh+var_70]
		mov	[esi+28h], edi
		mov	[esp+0BCh+var_24], eax

loc_64208F66:				; CODE XREF: _doContent+4F3j
		lea	ecx, [esp+0BCh+var_24]
		sub	edi, 1
		lea	eax, [esp+0BCh+var_2C]
		mov	[esp+0BCh+var_B0], ecx
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_AC], edi
		mov	[esp+0BCh+var_B4], ebx
		mov	[esp+0BCh+var_BC], ebp
		call	dword ptr [ebp+3Ch]
		mov	edx, [esp+0BCh+var_24]
		mov	eax, [esi+24h]
		mov	ecx, edx
		sub	ecx, eax
		cmp	[esp+0BCh+var_2C], ebx
		mov	[esp+0BCh+var_70], ecx
		jnz	short loc_64208F35
		mov	ebx, [esp+0BCh+var_58]
		mov	[esi+0Ch], eax
		lea	eax, [esi+2Ch]
		mov	[esi+18h], ecx
		mov	byte ptr [edx],	0
		mov	ecx, [esp+0BCh+arg_0]
		mov	edx, ebp
		mov	[esp+0BCh+var_B8], eax
		lea	eax, [esi+0Ch]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_storeAtts
		test	eax, eax
		jnz	loc_64208B4E
		mov	eax, [ebx+34h]
		test	eax, eax
		jz	loc_6420963D
		mov	edx, [ebx+188h]
		mov	[esp+0BCh+var_B4], edx
		mov	edx, [esi+0Ch]
		mov	[esp+0BCh+var_B8], edx
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax

loc_64208FFE:				; CODE XREF: _doContent+C02j
					; _doContent+C22j
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_642096FE
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_6420901C
		jmp	short loc_6420902A
; ---------------------------------------------------------------------------

loc_64209018:				; CODE XREF: _doContent+5E8j
		mov	ecx, eax
		mov	eax, edx

loc_6420901C:				; CODE XREF: _doContent+5D4j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_64209018

loc_6420902A:				; CODE XREF: _doContent+5D6j
					; _doContent+CCAj
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1A8h], 0
		mov	eax, [esp+0BCh+var_20]
		mov	dword ptr [ebx+1A0h], 0
		jmp	loc_64208B1B
; ---------------------------------------------------------------------------
		align 10h

loc_64209060:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	esi, [esp+0BCh+arg_0] ;	jumptable 64208B60 cases 8,9
		add	esi, [ebp+44h]
		mov	[esp+0BCh+var_28], 0
		mov	[esp+0BCh+var_BC], ebp
		mov	[esp+0BCh+var_B8], esi
		call	dword ptr [ebp+20h]
		mov	ecx, esi
		mov	edx, ebp
		lea	eax, [esi+eax]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_64]
		call	_poolStoreString
		test	eax, eax
		mov	[esp+0BCh+var_44], eax
		jz	loc_64208BA0
		mov	eax, [ebx+1ACh]
		lea	ecx, [esp+0BCh+var_28]
		mov	edx, ebp
		mov	[ebx+1B0h], eax
		lea	eax, [esp+0BCh+var_44]
		mov	[esp+0BCh+var_B8], ecx
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_storeAtts
		test	eax, eax
		jnz	loc_64208B4E
		mov	eax, [ebx+1ACh]
		mov	edx, 1
		mov	[ebx+1B0h], eax
		mov	eax, [ebx+34h]
		test	eax, eax
		jz	short loc_64209108
		mov	edx, [ebx+188h]
		mov	[esp+0BCh+var_B4], edx
		mov	edx, [esp+0BCh+var_44]
		mov	[esp+0BCh+var_B8], edx
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		xor	edx, edx

loc_64209108:				; CODE XREF: _doContent+6AAj
		mov	eax, [ebx+38h]
		test	eax, eax
		jz	loc_64209678
		mov	edx, [ebx+34h]
		test	edx, edx
		jz	short loc_64209126
		mov	ecx, [esp+0BCh+var_78]
		mov	edx, [ecx]
		mov	ecx, [esp+0BCh+var_7C]
		mov	[ecx], edx

loc_64209126:				; CODE XREF: _doContent+6D8j
		mov	edx, [esp+0BCh+var_44]
		mov	[esp+0BCh+var_B8], edx
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax

loc_64209136:				; CODE XREF: _doContent+C3Aj
					; _doContent+C45j ...
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_64209667
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_64209154
		jmp	short loc_64209162
; ---------------------------------------------------------------------------

loc_64209150:				; CODE XREF: _doContent+720j
		mov	ecx, eax
		mov	eax, edx

loc_64209154:				; CODE XREF: _doContent+70Cj
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_64209150

loc_64209162:				; CODE XREF: _doContent+70Ej
					; _doContent+C33j
		mov	eax, [esp+0BCh+var_28]
		mov	dword ptr [ebx+1A0h], 0
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		test	eax, eax
		mov	dword ptr [ebx+1A8h], 0
		jz	short loc_642091DA

loc_64209195:				; CODE XREF: _doContent+798j
		mov	edx, [ebx+68h]
		mov	esi, eax
		test	edx, edx
		jz	short loc_642091B5
		mov	eax, [eax]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	edx
		mov	eax, [esp+0BCh+var_28]

loc_642091B5:				; CODE XREF: _doContent+75Cj
		mov	eax, [eax+4]
		mov	[esp+0BCh+var_28], eax
		mov	edx, [ebx+178h]
		test	eax, eax
		mov	[esi+4], edx
		mov	edx, [esi]
		mov	[ebx+178h], esi
		mov	ecx, [esi+8]
		mov	[edx+4], ecx
		jnz	short loc_64209195

loc_642091DA:				; CODE XREF: _doContent+753j
		mov	edi, [ebx+138h]
		test	edi, edi
		jnz	loc_64208B14
		mov	eax, [esp+0BCh+arg_8]
		mov	edx, [esp+0BCh+arg_4]
		mov	[esp+0BCh+var_BC], ebx
		mov	[esp+0BCh+var_B0], eax
		mov	eax, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_B4], edx
		mov	[esp+0BCh+var_B8], eax
		call	_epilogProcessor
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209216:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		cmp	[esp+0BCh+var_71], 0 ; jumptable 64208B60 case 2
		jnz	loc_64208E82
		mov	eax, [esp+0BCh+arg_4]
		mov	ecx, [esp+0BCh+var_78]
		mov	[ecx], eax
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	loc_64209560
		lea	eax, [esp+0BCh+var_24]
		mov	byte ptr [esp+0BCh+var_24], 0Ah
		mov	[esp+0BCh+var_B4], 1
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+3Ch]

loc_6420925D:				; CODE XREF: _doContent+B25j
					; _doContent+B45j
		mov	esi, [esp+0BCh+var_68]
		test	esi, esi
		jz	loc_64209500
		mov	ecx, [esp+0BCh+var_68]
		cmp	[ebx+138h], ecx
		jnz	loc_64208C6A
		mov	eax, [esp+0BCh+arg_8]
		mov	edx, [esp+0BCh+arg_4]
		mov	[eax], edx
		xor	eax, eax
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209290:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		cmp	[esp+0BCh+var_71], 0 ; jumptable 64208B60 case 3
		mov	eax, 6
		jz	loc_64208B4E

loc_642092A0:				; CODE XREF: _doContent+170j
					; _doContent+208j
		mov	eax, [esp+0BCh+arg_0]
		mov	ecx, [esp+0BCh+arg_8]
		mov	[ecx], eax
		xor	eax, eax
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_642092B7:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	edx, [ebp+44h]	; jumptable 64208B60 case 14
		mov	[esp+0BCh+var_BC], ebp
		mov	eax, edx
		neg	eax
		add	edx, [esp+0BCh+arg_0]
		add	eax, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_B4], eax
		call	dword ptr [ebp+30h]
		test	al, al
		mov	byte ptr [esp+0BCh+var_24], al
		jz	loc_6420958A
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jnz	loc_64208E4B

loc_642092F4:				; CODE XREF: _doContent+365j
					; _doContent+3FDj ...
		mov	edi, [ebx+50h]
		test	edi, edi
		jz	loc_64208B14
		mov	eax, [esp+0BCh+var_20]
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportDefault
		mov	eax, [esp+0BCh+var_20]
		jmp	loc_64208B1B
; ---------------------------------------------------------------------------

loc_64209325:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	eax, [esp+0BCh+arg_0] ;	jumptable 64208B60 case	15
		mov	[esp+0BCh+var_BC], ebp
		mov	[esp+0BCh+var_B8], eax
		call	dword ptr [ebp+2Ch]
		test	eax, eax
		js	loc_64209893
		mov	esi, [ebx+3Ch]
		test	esi, esi
		jz	short loc_642092F4
		lea	edx, [esp+0BCh+var_44]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_BC], eax
		call	_XmlUtf8Encode
		lea	ecx, [esp+0BCh+var_44]
		mov	[esp+0BCh+var_B8], ecx
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	esi
		mov	eax, [esp+0BCh+var_20]
		jmp	loc_64208B1B
; ---------------------------------------------------------------------------

loc_64209375:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	eax, [ebx+48h]	; jumptable 64208B60 case 13
		test	eax, eax
		jz	loc_642094A0
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax

loc_64209388:				; CODE XREF: _doContent+A65j
					; _doContent+A85j
		mov	ecx, [esp+0BCh+var_60]
		mov	eax, [esp+0BCh+arg_8]
		mov	edx, [esp+0BCh+arg_4]
		mov	[esp+0BCh+var_B4], ecx
		lea	ecx, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], edx
		mov	edx, ebp
		call	_doCdataSection
		test	eax, eax
		jnz	loc_64208B4E
		mov	eax, [esp+0BCh+var_20]
		test	eax, eax
		jnz	loc_64208B1B
		mov	dword ptr [ebx+118h], offset _cdataSectionProcessor
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------
		align 10h

loc_642093E0:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	eax, [esp+0BCh+var_20] ; jumptable 64208B60 case 16
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportProcessingInstruction
		test	eax, eax
		jnz	loc_64208B14
		jmp	loc_64208BA0
; ---------------------------------------------------------------------------

loc_64209407:				; CODE XREF: _doContent:loc_64208B60j
					; DATA XREF: .rdata:off_6421D2B0o
		mov	eax, 11h	; jumptable 64208B60 case 17
		lea	esi, [esi+0]
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209415:				; CODE XREF: _doContent+2Ej
		lea	ecx, [ebx+120h]
		lea	eax, [ebx+124h]
		mov	[esp+0BCh+var_7C], ecx
		mov	[esp+0BCh+var_78], eax
		jmp	loc_64208A89
; ---------------------------------------------------------------------------
		align 10h

loc_64209430:				; CODE XREF: _doContent+2B9j
		cmp	byte ptr [ebx+0ECh], 0
		jz	loc_64208CFF
		mov	eax, [ecx+0Ch]
		add	eax, [ecx+1Ch]
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_6420945F
		lea	esi, [esi+0]

loc_64209450:				; CODE XREF: _doContent+A1Dj
		add	edx, 1
		mov	[eax], cl
		movzx	ecx, byte ptr [edx]
		add	eax, 1
		test	cl, cl
		jnz	short loc_64209450

loc_6420945F:				; CODE XREF: _doContent+A08j
		mov	ecx, [esp+0BCh+var_70]
		mov	edx, [ecx+14h]
		test	edx, edx
		jz	short loc_64209495
		cmp	byte ptr [ebx+0EDh], 0
		jz	short loc_64209495
		movzx	ecx, byte ptr [ebx+1D8h]
		mov	[eax], cl
		movzx	ecx, byte ptr [edx]
		add	eax, 1
		test	cl, cl
		jz	short loc_64209495

loc_64209486:				; CODE XREF: _doContent+A53j
		add	edx, 1
		mov	[eax], cl
		movzx	ecx, byte ptr [edx]
		add	eax, 1
		test	cl, cl
		jnz	short loc_64209486

loc_64209495:				; CODE XREF: _doContent+A28j
					; _doContent+A31j ...
		mov	byte ptr [eax],	0
		mov	eax, [ebx+38h]
		jmp	loc_64208CFF
; ---------------------------------------------------------------------------

loc_642094A0:				; CODE XREF: _doContent+93Aj
		mov	edx, [ebx+50h]
		test	edx, edx
		jz	loc_64209388
		mov	eax, [esp+0BCh+var_20]
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportDefault
		jmp	loc_64209388
; ---------------------------------------------------------------------------
		align 10h

loc_642094D0:				; CODE XREF: _doContent+370j
		mov	edx, [esp+0BCh+arg_0]
		mov	eax, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_B8], edx
		sub	eax, edx
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	esi
		mov	eax, [esp+0BCh+var_20]
		jmp	loc_64208B1B
; ---------------------------------------------------------------------------
		align 10h

loc_64209500:				; CODE XREF: _doContent+214j
					; _doContent+823j
		mov	eax, 3
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------
		align 10h

loc_64209510:				; CODE XREF: _doContent+185j
		mov	edx, [esp+0BCh+arg_0]
		mov	ecx, [esp+0BCh+arg_4]
		mov	[esp+0BCh+var_B8], edx
		sub	ecx, edx
		mov	[esp+0BCh+var_B4], ecx
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		jmp	loc_64208C20
; ---------------------------------------------------------------------------

loc_64209535:				; CODE XREF: _doContent+1E6j
		mov	ecx, [esp+0BCh+var_68]
		cmp	[ebx+138h], ecx
		jz	loc_64209793
		mov	eax, [esp+0BCh+var_7C]
		mov	edx, [esp+0BCh+arg_4]
		mov	[eax], edx
		mov	eax, 0Dh
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------
		align 10h

loc_64209560:				; CODE XREF: _doContent+7F3j
		mov	edi, [ebx+50h]
		test	edi, edi
		jz	loc_6420925D
		mov	edx, [esp+0BCh+arg_4]
		mov	eax, ebx
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], edx
		mov	edx, ebp
		call	_reportDefault
		jmp	loc_6420925D
; ---------------------------------------------------------------------------

loc_6420958A:				; CODE XREF: _doContent+8A3j
		mov	eax, [ebp+44h]
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		add	ecx, eax
		neg	eax
		add	eax, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_5C]
		call	_poolStoreString
		test	eax, eax
		mov	edi, eax
		jz	loc_64208BA0
		mov	edx, [esp+0BCh+var_6C]
		mov	ecx, eax
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], 0 ; size_t
		call	_lookup
		mov	ecx, [esp+0BCh+var_6C]
		cmp	byte ptr [ecx+81h], 0
		mov	esi, eax
		mov	eax, [ecx+60h]
		mov	[ecx+5Ch], eax
		jnz	loc_64209743

loc_642095E4:				; CODE XREF: _doContent+D0Aj
		test	esi, esi
		jz	loc_64209A7E
		cmp	byte ptr [esi+22h], 0
		jz	loc_64209A74

loc_642095F6:				; CODE XREF: _doContent+D12j
		cmp	byte ptr [esi+20h], 0
		jnz	loc_64209A6A
		mov	edx, [esi+1Ch]
		test	edx, edx
		jnz	loc_64209A88
		mov	eax, [esi+4]
		test	eax, eax
		jz	loc_642097AA
		cmp	byte ptr [ebx+134h], 0
		jnz	loc_6420987B
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	loc_642092F4
		mov	[esp+0BCh+var_B4], 0
		mov	edx, [esi]
		jmp	loc_64208E5A
; ---------------------------------------------------------------------------

loc_6420963D:				; CODE XREF: _doContent+59Fj
		mov	ecx, [ebx+50h]
		test	ecx, ecx
		jz	loc_64208FFE
		mov	eax, [esp+0BCh+var_20]
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportDefault
		jmp	loc_64208FFE
; ---------------------------------------------------------------------------

loc_64209667:				; CODE XREF: _doContent+6FEj
		mov	eax, [ebx+1A0h]
		mov	[ebx+1A4h], eax
		jmp	loc_64209162
; ---------------------------------------------------------------------------

loc_64209678:				; CODE XREF: _doContent+6CDj
		test	dl, dl
		jz	loc_64209136
		mov	eax, [ebx+50h]
		test	eax, eax
		jz	loc_64209136
		mov	eax, [esp+0BCh+var_20]
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportDefault
		jmp	loc_64209136
; ---------------------------------------------------------------------------

loc_642096AA:				; CODE XREF: _doContent+2AAj
		mov	esi, [ebx+50h]
		test	esi, esi
		jz	loc_64208D12
		mov	eax, [esp+0BCh+var_20]
		mov	edx, ebp
		mov	ecx, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportDefault
		jmp	loc_64208D12
; ---------------------------------------------------------------------------

loc_642096D4:				; CODE XREF: _doContent+17Bj
		mov	eax, [ebx+50h]
		test	eax, eax
		jz	loc_64208C20
		mov	ecx, [esp+0BCh+arg_4]
		mov	edx, ebp
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], ecx
		mov	ecx, [esp+0BCh+arg_0]
		call	_reportDefault
		jmp	loc_64208C20
; ---------------------------------------------------------------------------

loc_642096FE:				; CODE XREF: _doContent+5C6j
		mov	eax, [ebx+1A0h]
		mov	[ebx+1A4h], eax
		jmp	loc_6420902A
; ---------------------------------------------------------------------------

loc_6420970F:				; CODE XREF: _doContent+47Fj
		mov	[esp+0BCh+var_BC], 30h
		call	dword ptr [ebx+0Ch]
		test	eax, eax
		mov	esi, eax
		jz	loc_64208BA0
		mov	[esp+0BCh+var_BC], 20h
		call	dword ptr [ebx+0Ch]
		test	eax, eax
		mov	[esi+24h], eax
		jz	loc_64209ADB
		add	eax, 20h
		mov	[esi+28h], eax
		jmp	loc_64208ECD
; ---------------------------------------------------------------------------

loc_64209743:				; CODE XREF: _doContent+B9Ej
		cmp	byte ptr [ecx+82h], 0
		jnz	loc_642095E4
		test	esi, esi
		jnz	loc_642095F6
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	loc_642092F4
		mov	[esp+0BCh+var_B4], 0
		mov	[esp+0BCh+var_B8], edi
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		mov	eax, [esp+0BCh+var_20]
		jmp	loc_64208B1B
; ---------------------------------------------------------------------------

loc_64209783:				; CODE XREF: _doContent+289j
					; _doContent+298j
		mov	ecx, [esp+0BCh+var_7C]
		mov	eax, 7
		mov	[ecx], edx
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209793:				; CODE XREF: _doContent+AFFj
		mov	eax, [esp+0BCh+arg_4]
		mov	ecx, [esp+0BCh+arg_8]
		mov	[ecx], eax
		xor	eax, eax
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_642097AA:				; CODE XREF: _doContent+BD0j
		mov	edi, [ebx+70h]
		test	edi, edi
		jz	loc_642092F4
		mov	byte ptr [esi+20h], 1
		mov	eax, [ebx+164h]
		cmp	dword ptr [eax+9Ch], 0
		mov	[esp+0BCh+var_70], eax
		jnz	loc_642098AF
		mov	eax, [ebx+1ACh]
		xor	ecx, ecx

loc_642097D8:				; CODE XREF: _doContent+10B0j
		mov	edx, [esp+0BCh+var_70]
		mov	[esp+0BCh+var_58], esi
		mov	[esp+0BCh+var_50], ebp
		mov	edi, [edx+3Ch]
		mov	edx, [edx+44h]
		mov	esi, edi
		lea	edx, [edi+edx*4]
		mov	[esp+0BCh+var_54], edx

loc_642097F3:				; CODE XREF: _doContent+F80j
		cmp	[esp+0BCh+var_54], esi
		jz	loc_642099C5
		mov	edi, [esi]
		add	esi, 4
		test	edi, edi
		jnz	short loc_6420981B
		mov	edx, [esp+0BCh+var_54]

loc_6420980A:				; CODE XREF: _doContent+DD9j
		cmp	edx, esi
		jz	loc_642099C5
		mov	edi, [esi]
		add	esi, 4
		test	edi, edi
		jz	short loc_6420980A

loc_6420981B:				; CODE XREF: _doContent+DC4j
		cmp	dword ptr [edi+4], 0
		jz	loc_642099BA
		test	cl, cl
		jnz	loc_64209AF5

loc_6420982D:				; CODE XREF: _doContent+10CDj
		mov	ebp, [edi]
		movzx	edx, byte ptr [ebp+0]
		test	dl, dl
		jnz	short loc_6420985A
		jmp	loc_6420993E
; ---------------------------------------------------------------------------
		align 10h

loc_64209840:				; CODE XREF: _doContent+E20j
					; _doContent+E39j
		mov	[eax], dl
		add	ebp, 1
		add	eax, 1
		mov	[ebx+1ACh], eax
		movzx	edx, byte ptr [ebp+0]
		test	dl, dl
		jz	loc_6420993E

loc_6420985A:				; CODE XREF: _doContent+DF5j
		cmp	[ebx+1A8h], eax
		jnz	short loc_64209840
		mov	eax, [esp+0BCh+var_64]
		call	_poolGrow
		test	al, al
		jz	short loc_6420989D
		mov	eax, [ebx+1ACh]
		movzx	edx, byte ptr [ebp+0]
		jmp	short loc_64209840
; ---------------------------------------------------------------------------

loc_6420987B:				; CODE XREF: _doContent+BDDj
		xor	ecx, ecx
		mov	edx, esi
		mov	eax, ebx
		call	_processInternalEntity
		test	eax, eax
		jz	loc_64208B14
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209893:				; CODE XREF: _doContent+8F8j
		mov	eax, 0Eh
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_6420989D:				; CODE XREF: _doContent+E2Dj
					; _doContent+F67j ...
		mov	esi, [esp+0BCh+var_58]

loc_642098A1:				; CODE XREF: _doContent+EF0j
					; _doContent+10F9j ...
		mov	byte ptr [esi+20h], 0
		mov	eax, 1
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_642098AF:				; CODE XREF: _doContent+D8Aj
		mov	eax, [ebx+1ACh]
		cmp	eax, [ebx+1A8h]
		jz	loc_64209B2E

loc_642098C1:				; CODE XREF: _doContent+1105j
		mov	byte ptr [eax],	3Dh
		mov	ecx, [esp+0BCh+var_70]
		add	eax, 1
		cmp	byte ptr [ebx+1D8h], 1
		mov	[ebx+1ACh], eax
		mov	edx, [ecx+9Ch]
		mov	ecx, [edx+14h]
		adc	ecx, 0FFFFFFFFh
		test	ecx, ecx
		jle	loc_64209AEB
		xor	edi, edi
		mov	[esp+0BCh+var_58], ecx
		jmp	short loc_6420991D
; ---------------------------------------------------------------------------

loc_642098F4:				; CODE XREF: _doContent+EE3j
					; _doContent+EFCj
		mov	edx, [esp+0BCh+var_70]
		mov	edx, [edx+9Ch]
		mov	edx, [edx+10h]
		movzx	edx, byte ptr [edx+edi]
		add	edi, 1
		mov	[eax], dl
		add	eax, 1
		cmp	edi, [esp+0BCh+var_58]
		mov	[ebx+1ACh], eax
		jge	loc_64209AEB

loc_6420991D:				; CODE XREF: _doContent+EB2j
		cmp	[ebx+1A8h], eax
		jnz	short loc_642098F4
		mov	eax, [esp+0BCh+var_64]
		call	_poolGrow
		test	al, al
		jz	loc_642098A1
		mov	eax, [ebx+1ACh]
		jmp	short loc_642098F4
; ---------------------------------------------------------------------------

loc_6420993E:				; CODE XREF: _doContent+DF7j
					; _doContent+E14j
		cmp	[ebx+1A8h], eax
		jz	loc_64209B12

loc_6420994A:				; CODE XREF: _doContent+10E9j
		mov	byte ptr [eax],	3Dh
		mov	edx, [edi+4]
		add	eax, 1
		cmp	byte ptr [ebx+1D8h], 1
		mov	[ebx+1ACh], eax
		mov	edx, [edx+14h]
		adc	edx, 0FFFFFFFFh
		test	edx, edx
		jle	short loc_642099B5
		xor	ebp, ebp
		jmp	short loc_6420998C
; ---------------------------------------------------------------------------
		align 10h

loc_64209970:				; CODE XREF: _doContent+F52j
					; _doContent+F73j
		mov	ecx, [edi+4]
		mov	ecx, [ecx+10h]
		movzx	ecx, byte ptr [ecx+ebp]
		add	ebp, 1
		mov	[eax], cl
		add	eax, 1
		cmp	ebp, edx
		mov	[ebx+1ACh], eax
		jge	short loc_642099B5

loc_6420998C:				; CODE XREF: _doContent+F2Cj
		cmp	[ebx+1A8h], eax
		jnz	short loc_64209970
		mov	eax, [esp+0BCh+var_64]
		mov	[esp+0BCh+var_80], edx
		call	_poolGrow
		mov	edx, [esp+0BCh+var_80]
		test	al, al
		jz	loc_6420989D
		mov	eax, [ebx+1ACh]
		jmp	short loc_64209970
; ---------------------------------------------------------------------------

loc_642099B5:				; CODE XREF: _doContent+F28j
					; _doContent+F4Aj
		mov	ecx, 1

loc_642099BA:				; CODE XREF: _doContent+DDFj
		mov	eax, [ebx+1ACh]
		jmp	loc_642097F3
; ---------------------------------------------------------------------------

loc_642099C5:				; CODE XREF: _doContent+DB7j
					; _doContent+DCCj
		mov	edx, [esp+0BCh+var_70]
		mov	esi, [esp+0BCh+var_58]
		mov	ebp, [esp+0BCh+var_50]
		mov	edi, [edx]
		mov	edx, [edx+8]
		mov	[esp+0BCh+var_58], ebp
		mov	ebp, esi
		lea	edx, [edi+edx*4]
		mov	[esp+0BCh+var_70], edx
		jmp	short loc_642099F2
; ---------------------------------------------------------------------------

loc_642099E5:				; CODE XREF: _doContent+FB6j
		mov	esi, [edi]
		add	edi, 4
		test	esi, esi
		jnz	loc_64209A95

loc_642099F2:				; CODE XREF: _doContent+FA3j
					; _doContent+1096j
		cmp	[esp+0BCh+var_70], edi
		jnz	short loc_642099E5
		cmp	[ebx+1A8h], eax
		mov	esi, ebp
		mov	ebp, [esp+0BCh+var_58]
		jz	loc_64209BBD

loc_64209A0A:				; CODE XREF: _doContent+1194j
		mov	byte ptr [eax],	0
		add	eax, 1
		mov	[ebx+1ACh], eax
		mov	eax, [ebx+1B0h]
		mov	byte ptr [esi+20h], 0
		test	eax, eax
		jz	loc_64208BA0
		mov	edx, [esi+18h]
		mov	[esp+0BCh+var_AC], edx
		mov	edx, [esi+10h]
		mov	[esp+0BCh+var_B0], edx
		mov	edx, [esi+14h]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_B4], edx
		mov	eax, [ebx+74h]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+70h]
		test	eax, eax
		jz	loc_64209BB6
		mov	eax, [ebx+1B0h]
		mov	[ebx+1ACh], eax
		mov	eax, [esp+0BCh+var_20]
		jmp	loc_64208B1B
; ---------------------------------------------------------------------------

loc_64209A6A:				; CODE XREF: _doContent+BBAj
		mov	eax, 0Ch
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209A74:				; CODE XREF: _doContent+BB0j
		mov	eax, 18h
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209A7E:				; CODE XREF: _doContent+BA6j
		mov	eax, 0Bh
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209A88:				; CODE XREF: _doContent+BC5j
		mov	eax, 0Fh
		lea	esi, [esi+0]
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209A95:				; CODE XREF: _doContent+FACj
		cmp	byte ptr [esi+20h], 0
		jz	short loc_64209AD0
		test	cl, cl
		lea	esi, [esi+0]
		jnz	loc_64209B6C

loc_64209AA6:				; CODE XREF: _doContent+1140j
		mov	esi, [esi]
		jmp	short loc_64209AC4
; ---------------------------------------------------------------------------

loc_64209AAA:				; CODE XREF: _doContent+1089j
		cmp	[ebx+1A8h], eax
		jz	loc_64209B4A

loc_64209AB6:				; CODE XREF: _doContent+1120j
		mov	[eax], dl
		add	eax, 1
		add	esi, 1
		mov	[ebx+1ACh], eax

loc_64209AC4:				; CODE XREF: _doContent+1068j
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jnz	short loc_64209AAA
		mov	ecx, 1

loc_64209AD0:				; CODE XREF: _doContent+1059j
		mov	eax, [ebx+1ACh]
		jmp	loc_642099F2
; ---------------------------------------------------------------------------

loc_64209ADB:				; CODE XREF: _doContent+CF2j
		mov	[esp+0BCh+var_BC], esi
		call	dword ptr [ebx+14h]
		mov	eax, 1
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209AEB:				; CODE XREF: _doContent+EA6j
					; _doContent+ED7j
		mov	ecx, 1
		jmp	loc_642097D8
; ---------------------------------------------------------------------------

loc_64209AF5:				; CODE XREF: _doContent+DE7j
		cmp	[ebx+1A8h], eax
		jz	loc_64209B85

loc_64209B01:				; CODE XREF: _doContent+115Cj
		mov	byte ptr [eax],	0Ch
		add	eax, 1
		mov	[ebx+1ACh], eax
		jmp	loc_6420982D
; ---------------------------------------------------------------------------

loc_64209B12:				; CODE XREF: _doContent+F04j
		mov	eax, [esp+0BCh+var_64]
		call	_poolGrow
		test	al, al
		jz	loc_6420989D
		mov	eax, [ebx+1ACh]
		jmp	loc_6420994A
; ---------------------------------------------------------------------------

loc_64209B2E:				; CODE XREF: _doContent+E7Bj
		mov	eax, [esp+0BCh+var_64]
		call	_poolGrow
		test	al, al
		jz	loc_642098A1
		mov	eax, [ebx+1ACh]
		jmp	loc_642098C1
; ---------------------------------------------------------------------------

loc_64209B4A:				; CODE XREF: _doContent+1070j
		mov	eax, [esp+0BCh+var_64]
		call	_poolGrow
		test	al, al
		jz	short loc_64209B65
		mov	eax, [ebx+1ACh]
		movzx	edx, byte ptr [esi]
		jmp	loc_64209AB6
; ---------------------------------------------------------------------------

loc_64209B65:				; CODE XREF: _doContent+1115j
					; _doContent+116Cj
		mov	esi, ebp
		jmp	loc_642098A1
; ---------------------------------------------------------------------------

loc_64209B6C:				; CODE XREF: _doContent+1060j
		cmp	[ebx+1A8h], eax
		jz	short loc_64209BA1

loc_64209B74:				; CODE XREF: _doContent+1174j
		mov	byte ptr [eax],	0Ch
		add	eax, 1
		mov	[ebx+1ACh], eax
		jmp	loc_64209AA6
; ---------------------------------------------------------------------------

loc_64209B85:				; CODE XREF: _doContent+10BBj
		mov	eax, [esp+0BCh+var_64]
		call	_poolGrow
		test	al, al
		jz	loc_6420989D
		mov	eax, [ebx+1ACh]
		jmp	loc_64209B01
; ---------------------------------------------------------------------------

loc_64209BA1:				; CODE XREF: _doContent+1132j
		mov	eax, [esp+0BCh+var_64]
		call	_poolGrow
		test	al, al
		jz	short loc_64209B65
		mov	eax, [ebx+1ACh]
		jmp	short loc_64209B74
; ---------------------------------------------------------------------------

loc_64209BB6:				; CODE XREF: _doContent+100Cj
		mov	al, 15h
		jmp	loc_64208B4E
; ---------------------------------------------------------------------------

loc_64209BBD:				; CODE XREF: _doContent+FC4j
		mov	eax, [esp+0BCh+var_64]
		call	_poolGrow
		test	al, al
		jz	loc_642098A1
		mov	eax, [ebx+1ACh]
		jmp	loc_64209A0A
_doContent	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_externalEntityContentProcessor	proc near ; DATA XREF: _externalEntityInitProcessor3+72o
					; _cdataSectionProcessor+68o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		mov	edx, 1
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_0]
		cmp	byte ptr [eax+1E4h], 0
		mov	ecx, [eax+90h]
		setz	al
		movzx	eax, al
		mov	[esp+3Ch+var_30], eax
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_34], eax
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_3C], eax
		mov	eax, [esp+3Ch+arg_0]
		call	_doContent
		test	eax, eax
		mov	[esp+3Ch+var_20], eax
		jz	short loc_64209C40

loc_64209C2F:				; CODE XREF: _externalEntityContentProcessor+6Ej
					; _externalEntityContentProcessor+ADj ...
		mov	eax, [esp+3Ch+var_20]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64209C40:				; CODE XREF: _externalEntityContentProcessor+4Dj
		mov	edx, [esp+3Ch+arg_0]
		mov	ebx, [edx+16Ch]
		test	ebx, ebx
		jnz	short loc_64209C8F
		jmp	short loc_64209C2F
; ---------------------------------------------------------------------------

loc_64209C50:				; CODE XREF: _externalEntityContentProcessor+F3j
					; _externalEntityContentProcessor+FCj
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	short loc_64209C60
		sub	edx, [ebx+24h]
		lea	edx, [eax+edx]
		mov	[ebx+10h], edx

loc_64209C60:				; CODE XREF: _externalEntityContentProcessor+75j
		mov	edx, [esp+3Ch+var_24]
		lea	esi, [eax+edi]
		mov	ebp, [ebx+8]
		mov	ecx, [ebx+4]
		mov	[ebx+24h], eax
		lea	edx, [eax+edx]
		mov	[ebx+28h], edx

loc_64209C76:				; CODE XREF: _externalEntityContentProcessor+D5j
		mov	[esp+3Ch+var_34], ebp ;	size_t
		mov	[esp+3Ch+var_38], ecx ;	void *
		mov	[esp+3Ch+var_3C], esi ;	void *
		call	_memcpy
		mov	[ebx+4], esi
		mov	ebx, [ebx]
		test	ebx, ebx
		jz	short loc_64209C2F

loc_64209C8F:				; CODE XREF: _externalEntityContentProcessor+6Cj
		mov	edi, [ebx+18h]
		mov	edx, [ebx+24h]
		mov	ecx, [ebx+4]
		add	edi, 1
		lea	esi, [edx+edi]
		cmp	esi, ecx
		jz	short loc_64209C2F
		mov	ebp, [ebx+8]
		lea	eax, [edi+ebp]
		mov	[esp+3Ch+var_24], eax
		mov	eax, [ebx+28h]
		sub	eax, edx
		cmp	[esp+3Ch+var_24], eax
		jle	short loc_64209C76
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], edx
		mov	edx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_38], eax
		call	dword ptr [edx+10h]
		test	eax, eax
		jz	short loc_64209CE1
		mov	edx, [ebx+0Ch]
		cmp	edx, [ebx+24h]
		jnz	loc_64209C50
		mov	[ebx+0Ch], eax
		jmp	loc_64209C50
; ---------------------------------------------------------------------------

loc_64209CE1:				; CODE XREF: _externalEntityContentProcessor+EBj
		mov	[esp+3Ch+var_20], 1
		jmp	loc_64209C2F
_externalEntityContentProcessor	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_contentProcessor proc near		; CODE XREF: _doProlog+168Dp
					; DATA XREF: _doProlog+1674o ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_0]
		cmp	byte ptr [eax+1E4h], 0
		mov	ecx, [eax+90h]
		setz	al
		xor	edx, edx
		movzx	eax, al
		mov	[esp+3Ch+var_30], eax
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_34], eax
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_3C], eax
		mov	eax, [esp+3Ch+arg_0]
		call	_doContent
		test	eax, eax
		mov	[esp+3Ch+var_20], eax
		jz	short loc_64209D48

loc_64209D3C:				; CODE XREF: _contentProcessor+66j
					; _contentProcessor+A5j ...
		mov	eax, [esp+3Ch+var_20]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64209D48:				; CODE XREF: _contentProcessor+4Aj
		mov	edx, [esp+3Ch+arg_0]
		mov	ebx, [edx+16Ch]
		test	ebx, ebx
		jnz	short loc_64209D97
		jmp	short loc_64209D3C
; ---------------------------------------------------------------------------

loc_64209D58:				; CODE XREF: _contentProcessor+EBj
					; _contentProcessor+F4j
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	short loc_64209D68
		sub	edx, [ebx+24h]
		lea	edx, [eax+edx]
		mov	[ebx+10h], edx

loc_64209D68:				; CODE XREF: _contentProcessor+6Dj
		mov	edx, [esp+3Ch+var_24]
		lea	esi, [eax+edi]
		mov	ebp, [ebx+8]
		mov	ecx, [ebx+4]
		mov	[ebx+24h], eax
		lea	edx, [eax+edx]
		mov	[ebx+28h], edx

loc_64209D7E:				; CODE XREF: _contentProcessor+CDj
		mov	[esp+3Ch+var_34], ebp ;	size_t
		mov	[esp+3Ch+var_38], ecx ;	void *
		mov	[esp+3Ch+var_3C], esi ;	void *
		call	_memcpy
		mov	[ebx+4], esi
		mov	ebx, [ebx]
		test	ebx, ebx
		jz	short loc_64209D3C

loc_64209D97:				; CODE XREF: _contentProcessor+64j
		mov	edi, [ebx+18h]
		mov	edx, [ebx+24h]
		mov	ecx, [ebx+4]
		add	edi, 1
		lea	esi, [edx+edi]
		cmp	esi, ecx
		jz	short loc_64209D3C
		mov	ebp, [ebx+8]
		lea	eax, [edi+ebp]
		mov	[esp+3Ch+var_24], eax
		mov	eax, [ebx+28h]
		sub	eax, edx
		cmp	[esp+3Ch+var_24], eax
		jle	short loc_64209D7E
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], edx
		mov	edx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_38], eax
		call	dword ptr [edx+10h]
		test	eax, eax
		jz	short loc_64209DF0
		mov	edx, [ebx+0Ch]
		cmp	edx, [ebx+24h]
		jnz	loc_64209D58
		mov	[ebx+0Ch], eax
		jmp	loc_64209D58
; ---------------------------------------------------------------------------
		align 10h

loc_64209DF0:				; CODE XREF: _contentProcessor+E3j
		mov	[esp+3Ch+var_20], 1
		jmp	loc_64209D3C
_contentProcessor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_processInternalEntity proc near	; CODE XREF: _doContent+E41p
					; _doProlog+1A8Bp

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 5Ch
		mov	[esp+5Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+5Ch+var_8], edi
		mov	edi, edx
		mov	[esp+5Ch+var_C], esi
		mov	[esp+5Ch+var_4], ebp
		mov	esi, [eax+130h]
		test	esi, esi
		jz	loc_64209F60
		mov	eax, [esi+8]
		mov	[ebx+130h], eax

loc_64209E2E:				; CODE XREF: _processInternalEntity+17Cj
		mov	byte ptr [edi+20h], 1
		mov	eax, [ebx+12Ch]
		mov	dword ptr [edi+0Ch], 0
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	[esi+8], eax
		mov	eax, [ebx+138h]
		mov	[ebx+12Ch], esi
		mov	[esi+14h], cl
		mov	ebp, [edi+4]
		mov	[esi+0Ch], edi
		mov	[esi+10h], eax
		mov	eax, [edi+8]
		add	eax, ebp
		cmp	byte ptr [edi+21h], 0
		mov	[esp+5Ch+var_30], eax
		jnz	short loc_64209EF0
		lea	eax, [esp+5Ch+var_20]
		mov	ecx, [ebx+0E4h]
		mov	[esp+5Ch+var_54], eax
		mov	eax, [esp+5Ch+var_30]
		mov	edx, [ebx+138h]
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_5C], ebp
		mov	[esp+5Ch+var_58], eax
		mov	eax, ebx
		call	_doContent

loc_64209EA4:				; CODE XREF: _processInternalEntity+143j
		test	eax, eax
		jnz	short loc_64209EDB
		mov	edx, [esp+5Ch+var_20]
		cmp	[esp+5Ch+var_30], edx
		jz	short loc_64209EBF
		cmp	dword ptr [ebx+1E0h], 3
		jz	loc_64209F48

loc_64209EBF:				; CODE XREF: _processInternalEntity+B0j
		mov	byte ptr [edi+20h], 0
		mov	edx, [esi+8]
		mov	[ebx+12Ch], edx
		mov	edx, [ebx+130h]
		mov	[esi+8], edx
		mov	[ebx+130h], esi

loc_64209EDB:				; CODE XREF: _processInternalEntity+A6j
					; _processInternalEntity+157j ...
		mov	ebx, [esp+5Ch+var_10]
		mov	esi, [esp+5Ch+var_C]
		mov	edi, [esp+5Ch+var_8]
		mov	ebp, [esp+5Ch+var_4]
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64209EF0:				; CODE XREF: _processInternalEntity+74j
		mov	ecx, eax
		mov	eax, [ebx+0E4h]
		lea	edx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [eax]
		mov	edx, [esp+5Ch+var_34]
		mov	ecx, ebp
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], edx
		mov	edx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], edx
		mov	edx, [ebx+0E4h]
		mov	[esp+5Ch+var_5C], eax
		mov	eax, ebx
		call	_doProlog
		jmp	loc_64209EA4
; ---------------------------------------------------------------------------

loc_64209F48:				; CODE XREF: _processInternalEntity+B9j
		sub	edx, ebp
		mov	[edi+0Ch], edx
		mov	dword ptr [ebx+118h], offset _internalEntityProcessor
		jmp	loc_64209EDB
; ---------------------------------------------------------------------------
		align 10h

loc_64209F60:				; CODE XREF: _processInternalEntity+1Fj
		mov	byte ptr [esp+5Ch+var_34], cl
		mov	[esp+5Ch+var_5C], 18h
		call	dword ptr [eax+0Ch]
		movzx	ecx, byte ptr [esp+5Ch+var_34]
		mov	esi, eax
		mov	eax, 1
		test	esi, esi
		jnz	loc_64209E2E
		jmp	loc_64209EDB
_processInternalEntity endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doProlog	proc near		; CODE XREF: _processInternalEntity+13Ep
					; _prologProcessor+6Bp	...

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_80		= dword	ptr -80h
var_70		= dword	ptr -70h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= byte ptr  14h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 0ACh
		mov	ebp, [ebx+164h]
		movzx	eax, [esp+0BCh+arg_10]
		cmp	[ebx+90h], esi
		mov	edx, [esp+0BCh+arg_4]
		mov	[esp+0BCh+var_31], al
		jz	loc_6420A2F8
		mov	ecx, [ebx+12Ch]
		lea	eax, [ebx+120h]
		mov	[esp+0BCh+var_48], eax
		mov	[esp+0BCh+var_5C], ecx
		add	ecx, 4
		mov	[esp+0BCh+var_58], ecx
		lea	ecx, [ebx+124h]
		mov	[esp+0BCh+var_44], ecx

loc_64209FED:				; CODE XREF: _doProlog+384j
		lea	eax, [ebx+100h]
		lea	ecx, [ebx+1A0h]
		mov	[esp+0BCh+var_4C], eax
		lea	eax, [ebp+84h]
		mov	[esp+0BCh+var_40], ecx
		lea	ecx, [ebp+50h]
		mov	[esp+0BCh+var_3C], eax
		lea	eax, [ebx+1ACh]
		mov	[esp+0BCh+var_38], ecx
		mov	[esp+0BCh+var_30], eax
		mov	[esp+0BCh+var_50], ebp

loc_6420A029:				; CODE XREF: _doProlog+1DBj
		mov	ecx, [esp+0BCh+var_5C]
		cmp	edx, 0
		mov	ebp, [esp+0BCh+var_58]
		mov	[ecx], edi
		mov	eax, [esp+0BCh+arg_8]
		mov	[ebp+0], eax
		jle	loc_6420A170
		mov	eax, [esp+0BCh+arg_8]

loc_6420A04D:				; CODE XREF: _doProlog+204j
					; _doProlog+304j
		mov	ebp, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_60], edx
		mov	[esp+0BCh+var_AC], esi
		mov	[esp+0BCh+var_BC], ebp
		mov	[esp+0BCh+var_B0], eax
		mov	[esp+0BCh+var_B4], edi
		call	dword ptr [ebx+100h]
		mov	edx, [esp+0BCh+var_60]
		mov	ebp, eax
		lea	eax, [eax+1]
		cmp	eax, 3Dh	; switch 62 cases
		jbe	loc_6420A1A0

loc_6420A080:				; CODE XREF: _doProlog+34Fj
					; _doProlog+363j ...
		mov	ecx, [ebx+50h]	; jumptable 6420A1A0 default case
		test	ecx, ecx
		jz	loc_6420A133
		mov	[esp+0BCh+var_28], edi
		mov	ebp, [esp+0BCh+arg_8]
		cmp	byte ptr [esi+48h], 0
		jnz	loc_6420A320
		cmp	esi, [ebx+90h]
		mov	eax, [esp+0BCh+var_44]
		mov	edi, [esp+0BCh+var_48]
		jz	loc_6420A338
		mov	edi, [ebx+12Ch]
		lea	eax, [edi+4]
		mov	[esp+0BCh+var_54], edi
		mov	edi, eax

loc_6420A0C6:				; CODE XREF: _doProlog+1A1j
					; _doProlog+3AEj
		mov	eax, [ebx+2Ch]
		lea	ecx, [esp+0BCh+var_2C]
		mov	[esp+0BCh+var_2C], eax
		mov	eax, [ebx+30h]
		mov	[esp+0BCh+var_B0], ecx
		mov	[esp+0BCh+var_B4], ebp
		mov	[esp+0BCh+var_BC], esi
		mov	[esp+0BCh+var_AC], eax
		lea	eax, [esp+0BCh+var_28]
		mov	[esp+0BCh+var_B8], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+0BCh+var_28]
		mov	[edi], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+0BCh+var_2C]
		mov	[esp+0BCh+var_B8], edx
		sub	eax, edx
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+0BCh+var_28]
		mov	edx, [esp+0BCh+var_54]
		mov	[edx], eax
		cmp	[esp+0BCh+var_28], ebp
		jnz	short loc_6420A0C6

loc_6420A133:				; CODE XREF: _doProlog+F5j
					; _doProlog+35Dj ...
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	short loc_6420A1B0
		cmp	eax, 3
		jz	short loc_6420A1C1
		mov	edi, [esp+0BCh+arg_8]
		lea	ebp, [esp+0BCh+arg_8]
		mov	eax, [esp+0BCh+arg_0]
		mov	[esp+0BCh+var_B0], ebp
		mov	[esp+0BCh+var_BC], esi
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_B4], eax
		call	dword ptr [esi]
		mov	edx, eax
		jmp	loc_6420A029
; ---------------------------------------------------------------------------

loc_6420A170:				; CODE XREF: _doProlog+B0j
		jnz	loc_6420B5C6

loc_6420A176:				; CODE XREF: _doProlog+163Ej
		lea	eax, [edx+0Fh]
		cmp	eax, 0Fh	; switch 16 cases
		lea	esi, [esi+0]
		jbe	short loc_6420A1A7

loc_6420A182:				; CODE XREF: _doProlog:loc_6420A1A7j
					; DATA XREF: .rdata:off_6421D3F4o
		mov	ecx, [esp+0BCh+arg_0] ;	jumptable 6420A1A7 default case
		neg	edx
		mov	[esp+0BCh+arg_8], ecx
		mov	eax, ecx
		jmp	loc_6420A04D
; ---------------------------------------------------------------------------
		align 10h

loc_6420A1A0:				; CODE XREF: _doProlog+EAj
		jmp	ds:off_6421D2FC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420A1A7:				; CODE XREF: _doProlog+1F0j
		jmp	ds:off_6421D3F4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420A1B0:				; CODE XREF: _doProlog+1ACj
					; _doProlog+1853j
		mov	eax, 23h

loc_6420A1B5:				; CODE XREF: _doProlog+265j
					; _doProlog+279j ...
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		nop
		retn
; ---------------------------------------------------------------------------

loc_6420A1C1:				; CODE XREF: _doProlog+1B1j
		mov	eax, [esp+0BCh+arg_8]
		mov	ecx, [esp+0BCh+arg_C]
		mov	[ecx], eax
		add	esp, 0ACh
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420A1E0:				; CODE XREF: _doProlog:loc_6420A1A7j
					; _doProlog+18AEj
					; DATA XREF: ...
		add	esp, 0ACh	; jumptable 6420A1A7 case 13
		mov	eax, 6
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6420A1F0:				; CODE XREF: _doProlog:loc_6420A1A7j
					; DATA XREF: .rdata:off_6421D3F4o
		mov	eax, 5		; jumptable 6420A1A7 case 14
		jmp	short loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420A1F7:				; CODE XREF: _doProlog:loc_6420A1A7j
					; DATA XREF: .rdata:off_6421D3F4o
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A7 case	15
		mov	edx, [esp+0BCh+var_5C]
		mov	[edx], eax
		mov	eax, 4
		jmp	short loc_6420A1B5
; ---------------------------------------------------------------------------
		align 10h

loc_6420A210:				; CODE XREF: _doProlog:loc_6420A1A7j
					; DATA XREF: .rdata:off_6421D3F4o
		mov	edx, [ebx+90h]	; jumptable 6420A1A7 case 11
		cmp	edx, esi
		jz	short loc_6420A22A
		mov	eax, [ebx+12Ch]
		cmp	byte ptr [eax+14h], 0
		jz	loc_6420B5B6

loc_6420A22A:				; CODE XREF: _doProlog+288j
		cmp	byte ptr [ebx+1E8h], 0
		jnz	short loc_6420A240
		cmp	esi, edx
		mov	eax, 3
		jz	loc_6420A1B5

loc_6420A240:				; CODE XREF: _doProlog+2A1j
		mov	ebp, [esp+0BCh+arg_0]
		mov	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_AC], esi
		mov	[esp+0BCh+var_B8], 0FFFFFFFCh
		mov	[esp+0BCh+var_B0], ebp
		mov	[esp+0BCh+var_B4], ebp
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+100h]
		mov	edx, eax
		mov	eax, 1Dh
		cmp	edx, 0FFFFFFFFh
		jz	loc_6420A1B5
		mov	edx, [esp+0BCh+arg_C]
		xor	al, al
		mov	[edx], edi
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420A288:				; CODE XREF: _doProlog:loc_6420A1A7j
					; DATA XREF: .rdata:off_6421D3F4o
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A7 case	0
		mov	edx, 0Fh
		jmp	loc_6420A04D
; ---------------------------------------------------------------------------

loc_6420A299:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A0 case	23
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_getAttributeId
		test	eax, eax
		mov	[ebx+15Ch], eax
		jz	loc_6420ABC8
		mov	byte ptr [ebx+160h], 0
		mov	dword ptr [ebx+14Ch], 0
		mov	byte ptr [ebx+161h], 0

loc_6420A2D4:				; CODE XREF: _doProlog:loc_6420A1A0j
					; _doProlog+984j ...
		mov	edx, [esp+0BCh+var_50] ; jumptable 6420A1A0 case 34
		cmp	byte ptr [edx+80h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [ebx+84h]
		test	eax, eax
		jnz	loc_6420A133
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420A2F8:				; CODE XREF: _doProlog+32j
		lea	ecx, [ebx+120h]
		lea	eax, [ebx+124h]
		mov	[esp+0BCh+var_48], ecx
		mov	[esp+0BCh+var_5C], ecx
		mov	[esp+0BCh+var_44], eax
		mov	[esp+0BCh+var_58], eax
		jmp	loc_64209FED
; ---------------------------------------------------------------------------
		align 10h

loc_6420A320:				; CODE XREF: _doProlog+10Dj
		sub	ebp, edi
		mov	[esp+0BCh+var_B4], ebp
		mov	[esp+0BCh+var_B8], edi
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+50h]
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420A338:				; CODE XREF: _doProlog+121j
		mov	[esp+0BCh+var_54], edi
		mov	edi, eax
		jmp	loc_6420A0C6
; ---------------------------------------------------------------------------

loc_6420A343:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ebp, 1		; jumptable 6420A1A0 case 54

loc_6420A348:				; CODE XREF: _doProlog+12CDj
					; _doProlog+1370j ...
		mov	eax, [esp+0BCh+var_50]
		cmp	byte ptr [eax+0A0h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		test	ebp, ebp
		jz	loc_6420B627
		mov	edx, [esp+0BCh+arg_8]
		sub	edx, [esi+44h]

loc_6420A36B:				; CODE XREF: _doProlog+169Ej
		mov	eax, ebx
		mov	[esp+0BCh+var_60], edx
		call	_nextScaffoldPart
		mov	edx, [esp+0BCh+var_60]
		test	eax, eax
		js	loc_6420ABC8
		imul	eax, 1Ch
		mov	ecx, [esp+0BCh+var_50]
		mov	[esp+0BCh+var_54], eax
		mov	eax, [ecx+0A4h]
		mov	ecx, [esp+0BCh+var_54]
		mov	dword ptr [eax+ecx], 4
		mov	[eax+ecx+4], ebp
		mov	ecx, edi
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], edx
		mov	edx, esi
		call	_getElementType
		test	eax, eax
		jz	loc_6420ABC8
		mov	ebp, [esp+0BCh+var_50]
		mov	edx, [eax]
		mov	ecx, [esp+0BCh+var_54]
		mov	eax, [ebp+0A4h]
		mov	[eax+ecx+8], edx
		xor	eax, eax
		xchg	ax, ax

loc_6420A3D0:				; CODE XREF: _doProlog+449j
		movzx	ecx, byte ptr [edx+eax]
		add	eax, 1
		test	cl, cl
		jnz	short loc_6420A3D0
		mov	ebp, [esp+0BCh+var_50]
		add	[ebp+0A8h], eax

loc_6420A3E5:				; CODE XREF: _doProlog:loc_6420A1A0j
					; _doProlog+1369j
					; DATA XREF: ...
		mov	ebp, [ebx+80h]	; jumptable 6420A1A0 case 40
		test	ebp, ebp
		jnz	loc_6420A133
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420A3F8:				; CODE XREF: _doProlog:loc_6420A1A0j
					; _doProlog+674j
					; DATA XREF: ...
		mov	ecx, [esp+0BCh+var_5C] ; jumptable 6420A1A0 case 15
		mov	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], esi
		mov	[esp+0BCh+var_B0], ecx
		mov	[esp+0BCh+var_B4], eax
		call	dword ptr [esi+38h]
		test	eax, eax
		jz	loc_6420BD48
		mov	byte ptr [esp+0BCh+var_54], 1

loc_6420A422:				; CODE XREF: _doProlog+6E2j
		mov	ebp, [esp+0BCh+var_50]
		cmp	byte ptr [ebp+80h], 0
		jnz	loc_6420B633

loc_6420A433:				; CODE XREF: _doProlog+543j
					; _doProlog+823j ...
		cmp	byte ptr [esp+0BCh+var_54], 0
		jz	loc_6420A133
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420A443:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		cmp	edx, 0Eh	; jumptable 6420A1A0 case 1
		jnz	loc_6420A080	; jumptable 6420A1A0 default case
		lea	esi, [esi+0]
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420A455:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A0 case	2
		xor	edx, edx
		mov	ecx, edi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_processXmlDecl
		test	eax, eax
		jnz	loc_6420A1B5

loc_6420A472:				; CODE XREF: _doProlog+161Bj
		mov	esi, [ebx+90h]
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420A47D:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [ebx+54h]	; jumptable 6420A1A0 case 5
		mov	byte ptr [esp+0BCh+var_54], 1
		test	eax, eax
		jz	short loc_6420A4C9
		mov	eax, [esp+0BCh+arg_8]
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_40]
		call	_poolStoreString
		test	eax, eax
		mov	[ebx+140h], eax
		jz	loc_6420ABC8
		mov	eax, [ebx+1ACh]
		mov	dword ptr [ebx+148h], 0
		mov	byte ptr [esp+0BCh+var_54], 0
		mov	[ebx+1B0h], eax

loc_6420A4C9:				; CODE XREF: _doProlog+4F7j
		mov	dword ptr [ebx+144h], 0
		jmp	loc_6420A433
; ---------------------------------------------------------------------------

loc_6420A4D8:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		cmp	byte ptr [ebx+1E9h], 0 ; jumptable 6420A1A0 case 3
		mov	ebp, [esp+0BCh+var_50]
		jz	loc_6420B5F6
		movzx	esi, byte ptr [ebp+81h]
		mov	byte ptr [ebp+81h], 1
		mov	eax, [ebx+1ECh]
		test	eax, eax
		jz	loc_6420B5F6
		mov	ecx, [ebx+70h]
		test	ecx, ecx
		jz	loc_6420B5F6
		mov	edx, [esp+0BCh+var_3C]
		mov	ecx, offset _externalSubsetName_6160 ; "#"
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], 24h ; size_t
		call	_lookup
		test	eax, eax
		jz	loc_6420ABC8
		mov	edx, [ebx+168h]
		mov	[eax+14h], edx
		mov	byte ptr [ebp+83h], 0
		mov	edx, [eax+18h]
		mov	[esp+0BCh+var_AC], edx
		mov	edx, [eax+10h]
		mov	[esp+0BCh+var_B0], edx
		mov	eax, [eax+14h]
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+74h]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+70h]
		test	eax, eax
		jz	loc_6420BB5A
		cmp	byte ptr [ebp+83h], 0
		jz	loc_6420B5EE
		cmp	byte ptr [ebp+82h], 0
		jnz	loc_6420B5F6
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_6420B5F6
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		test	eax, eax
		jnz	loc_6420B5F6

loc_6420A5A5:				; CODE XREF: _doProlog+804j
					; _doProlog+D61j ...
		mov	eax, 16h
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------
		align 10h

loc_6420A5B0:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ebp, [ebx+54h]	; jumptable 6420A1A0 case 4
		test	ebp, ebp
		jnz	loc_6420A133
		nop
		lea	esi, [esi+0]
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420A5C5:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	byte ptr [ebx+1E9h], 0 ; jumptable 6420A1A0 case 7
		mov	edx, [esp+0BCh+var_3C]
		mov	ecx, offset _externalSubsetName_6160 ; "#"
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], 24h ; size_t
		call	_lookup
		test	eax, eax
		mov	[ebx+13Ch], eax
		jz	loc_6420ABC8
		mov	eax, [esp+0BCh+var_50]
		mov	byte ptr [eax+81h], 1
		mov	ebp, [ebx+54h]
		test	ebp, ebp
		jz	loc_6420A3F8	; jumptable 6420A1A0 case 15
		mov	edx, [esp+0BCh+var_5C]
		mov	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], esi
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+var_B4], eax
		call	dword ptr [esi+38h]
		test	eax, eax
		jz	loc_6420BD48
		mov	eax, [esi+44h]
		mov	edx, esi
		lea	ecx, [edi+eax]
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_40]
		call	_poolStoreString
		test	eax, eax
		mov	ebp, eax
		jz	loc_6420ABC8
		call	_normalizePublicId
		mov	eax, [ebx+1ACh]
		mov	[ebx+148h], ebp
		mov	byte ptr [esp+0BCh+var_54], 0
		mov	[ebx+1B0h], eax
		jmp	loc_6420A422
; ---------------------------------------------------------------------------

loc_6420A677:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [ebx+54h]	; jumptable 6420A1A0 case 8
		test	eax, eax
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	[esp+0BCh+var_AC], 1
		mov	edx, [ebx+148h]
		mov	[esp+0BCh+var_B0], edx
		mov	edx, [ebx+144h]
		mov	[esp+0BCh+var_B4], edx
		mov	edx, [ebx+140h]
		mov	[esp+0BCh+var_B8], edx
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		mov	ecx, [ebx+1A4h]
		mov	dword ptr [ebx+140h], 0
		test	ecx, ecx
		jz	loc_6420BB49
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_6420A6D8
		jmp	short loc_6420A6E6
; ---------------------------------------------------------------------------

loc_6420A6D4:				; CODE XREF: _doProlog+754j
		mov	ecx, eax
		mov	eax, edx

loc_6420A6D8:				; CODE XREF: _doProlog+740j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_6420A6D4

loc_6420A6E6:				; CODE XREF: _doProlog+742j
					; _doProlog+F32j ...
		mov	dword ptr [ebx+1A0h], 0
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1A8h], 0
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420A713:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	byte ptr [ebx+1E9h], 0 ; jumptable 6420A1A0 case 6
		mov	ecx, [esp+0BCh+var_50]
		mov	byte ptr [ecx+81h], 1
		mov	edx, [ebx+54h]
		test	edx, edx
		jz	loc_6420B8AE
		mov	eax, [esi+44h]
		mov	edx, esi
		lea	ecx, [edi+eax]
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_40]
		call	_poolStoreString
		test	eax, eax
		mov	[ebx+144h], eax
		jz	loc_6420ABC8
		mov	eax, [ebx+1ACh]
		mov	byte ptr [esp+0BCh+var_54], 0
		mov	[ebx+1B0h], eax

loc_6420A76C:				; CODE XREF: _doProlog+192Dj
		mov	ebp, [esp+0BCh+var_50]
		cmp	byte ptr [ebp+82h], 0
		jnz	short loc_6420A79A
		mov	eax, [ebx+1ECh]
		test	eax, eax
		jnz	short loc_6420A79A
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	short loc_6420A79A
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		test	eax, eax
		jz	loc_6420A5A5

loc_6420A79A:				; CODE XREF: _doProlog+7E7j
					; _doProlog+7F1j ...
		mov	ebp, [ebx+13Ch]
		test	ebp, ebp
		jz	loc_6420BC35

loc_6420A7A8:				; CODE XREF: _doProlog+E55j
					; _doProlog+1CD4j
		mov	eax, [esp+0BCh+var_50]
		cmp	byte ptr [eax+80h], 0
		jz	loc_6420A433
		mov	ebp, [ebx+13Ch]
		test	ebp, ebp
		jz	loc_6420A433
		mov	eax, [esi+44h]
		mov	edx, esi
		lea	ecx, [edi+eax]
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_38]
		call	_poolStoreString
		mov	[ebp+10h], eax
		mov	eax, [ebx+13Ch]
		mov	ecx, [eax+10h]
		test	ecx, ecx
		jz	loc_6420ABC8
		mov	edx, [ebx+168h]
		mov	[eax+14h], edx

loc_6420A804:				; CODE XREF: _doProlog+16E9j
		mov	edx, [esp+0BCh+var_50]
		mov	eax, [edx+5Ch]
		mov	[edx+60h], eax
		mov	edx, [ebx+88h]
		test	edx, edx
		jnz	loc_6420A133
		jmp	loc_6420A433
; ---------------------------------------------------------------------------

loc_6420A821:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [ebx+140h]	; jumptable 6420A1A0 case 9
		mov	byte ptr [esp+0BCh+var_54], 1
		test	eax, eax
		jz	loc_6420A8B6
		mov	[esp+0BCh+var_AC], 0
		mov	edx, [ebx+148h]
		mov	[esp+0BCh+var_B0], edx
		mov	edx, [ebx+144h]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_B4], edx
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+54h]
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_6420BB64
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_6420A87B
		jmp	short loc_6420A889
; ---------------------------------------------------------------------------

loc_6420A877:				; CODE XREF: _doProlog+8F7j
		mov	ecx, eax
		mov	eax, edx

loc_6420A87B:				; CODE XREF: _doProlog+8E3j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_6420A877

loc_6420A889:				; CODE XREF: _doProlog+8E5j
					; _doProlog+1BE0j
		mov	dword ptr [ebx+1A0h], 0
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1A8h], 0
		mov	byte ptr [esp+0BCh+var_54], 0

loc_6420A8B6:				; CODE XREF: _doProlog+89Ej
		mov	edx, [ebx+144h]
		test	edx, edx
		jz	loc_6420BA90

loc_6420A8C4:				; CODE XREF: _doProlog+1B0Dj
		mov	ecx, [esp+0BCh+var_50]
		movzx	ebp, byte ptr [ecx+81h]
		mov	byte ptr [ecx+81h], 1
		mov	eax, [ebx+1ECh]
		test	eax, eax
		jnz	loc_6420B8D3

loc_6420A8E4:				; CODE XREF: _doProlog+1948j
					; _doProlog+19D4j ...
		mov	byte ptr [ebx+1E9h], 0

loc_6420A8EB:				; CODE XREF: _doProlog+1B07j
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	loc_6420A433
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420A903:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	byte ptr [ebx+161h], 1 ; jumptable 6420A1A0 case 25
		mov	dword ptr [ebx+14Ch], offset _atypeID_6162 ; "ID"
		jmp	loc_6420A2D4	; jumptable 6420A1A0 case 34
; ---------------------------------------------------------------------------

loc_6420A919:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	dword ptr [ebx+14Ch], offset _atypeIDREF_6163 ;	jumptable 6420A1A0 case	26
		jmp	loc_6420A2D4	; jumptable 6420A1A0 case 34
; ---------------------------------------------------------------------------

loc_6420A928:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ebp, [ebx+154h]	; jumptable 6420A1A0 case 21
		test	ebp, ebp
		jz	loc_6420B84F
		mov	ecx, [ebx+60h]
		test	ecx, ecx
		jz	loc_6420B84F
		mov	ecx, [esp+0BCh+var_58]
		mov	[ecx], edi
		mov	eax, [ebx+154h]
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+var_AC], eax
		mov	eax, [ebx+168h]
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+150h]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+60h]
		mov	byte ptr [esp+0BCh+var_54], 0

loc_6420A97B:				; CODE XREF: _doProlog+18C4j
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_6420B8C2
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_6420A999
		jmp	short loc_6420A9A7
; ---------------------------------------------------------------------------

loc_6420A995:				; CODE XREF: _doProlog+A15j
		mov	ecx, eax
		mov	eax, edx

loc_6420A999:				; CODE XREF: _doProlog+A01j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_6420A995

loc_6420A9A7:				; CODE XREF: _doProlog+A03j
					; _doProlog+CCAj ...
		mov	dword ptr [ebx+1A0h], 0
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1A8h], 0
		jmp	loc_6420A433
; ---------------------------------------------------------------------------

loc_6420A9D4:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+var_5C] ; jumptable 6420A1A0 case 22
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], esi
		mov	[esp+0BCh+var_B0], eax
		mov	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_B4], eax
		call	dword ptr [esi+38h]
		test	eax, eax
		jz	loc_6420BD48
		mov	ecx, [ebx+150h]
		test	ecx, ecx
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [esi+44h]
		mov	edx, esi
		lea	ecx, [edi+eax]
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_40]
		call	_poolStoreString
		test	eax, eax
		mov	edi, eax
		jz	loc_6420ABC8
		call	_normalizePublicId
		mov	[ebx+154h], edi

loc_6420AA39:				; CODE XREF: _doProlog+C32j
		mov	eax, [ebx+1ACh]
		mov	[ebx+1B0h], eax
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420AA4A:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	byte ptr [ebx+160h], 1 ; jumptable 6420A1A0 case 24
		mov	dword ptr [ebx+14Ch], offset _atypeCDATA_6161 ;	"CDATA"
		jmp	loc_6420A2D4	; jumptable 6420A1A0 case 34
; ---------------------------------------------------------------------------

loc_6420AA60:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+var_50] ; jumptable 6420A1A0 case 11
		cmp	byte ptr [eax+80h], 0
		jnz	loc_6420BA30
		mov	ebp, eax
		mov	eax, [eax+60h]
		mov	dword ptr [ebx+13Ch], 0
		mov	[ebp+5Ch], eax
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420AA88:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+var_50] ; jumptable 6420A1A0 case 12
		cmp	byte ptr [eax+80h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	ecx, [ebx+88h]
		test	ecx, ecx
		jnz	loc_6420A133
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6420AAB0:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A0 case	10
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], esi
		mov	[esp+0BCh+var_B4], eax
		call	dword ptr [esi+30h]
		test	eax, eax
		jz	loc_6420B859

loc_6420AACD:				; CODE XREF: _doProlog+1AFBj
		mov	dword ptr [ebx+13Ch], 0
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420AADC:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+var_50] ; jumptable 6420A1A0 case 17
		cmp	byte ptr [eax+80h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	ebp, [ebx+13Ch]
		test	ebp, ebp
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [esp+0BCh+arg_8]
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_38]
		call	_poolStoreString
		mov	[ebp+1Ch], eax
		mov	eax, [ebx+13Ch]
		mov	ecx, [eax+1Ch]
		test	ecx, ecx
		jz	loc_6420ABC8
		mov	ecx, [esp+0BCh+var_50]
		mov	edx, [ecx+5Ch]
		mov	[ecx+60h], edx
		mov	edx, [ebx+5Ch]
		test	edx, edx
		jz	loc_6420BDA3
		mov	ebp, [esp+0BCh+var_58]
		mov	[ebp+0], edi
		mov	edx, [eax+1Ch]
		mov	[esp+0BCh+var_A8], edx
		mov	edx, [eax+18h]
		mov	[esp+0BCh+var_AC], edx
		mov	edx, [eax+10h]
		mov	[esp+0BCh+var_B0], edx
		mov	edx, [eax+14h]
		mov	[esp+0BCh+var_B4], edx
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+5Ch]
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420AB75:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	dword ptr [ebx+14Ch], offset _atypeIDREFS_6164 ; jumptable 6420A1A0 case 27
		jmp	loc_6420A2D4	; jumptable 6420A1A0 case 34
; ---------------------------------------------------------------------------

loc_6420AB84:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ebp, [ebx+60h]	; jumptable 6420A1A0 case 19
		mov	dword ptr [ebx+154h], 0
		mov	dword ptr [ebx+150h], 0
		test	ebp, ebp
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [esp+0BCh+arg_8]
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_40]
		call	_poolStoreString
		test	eax, eax
		mov	[ebx+150h], eax
		jnz	loc_6420AA39

loc_6420ABC8:				; CODE XREF: _doProlog+326j
					; _doProlog+3ECj ...
		mov	eax, 1
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420ABD2:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	edx, [ebx+150h]	; jumptable 6420A1A0 case 20
		test	edx, edx
		jz	loc_6420B688
		mov	eax, [ebx+60h]
		test	eax, eax
		jz	loc_6420B688
		mov	eax, [esi+44h]
		mov	edx, esi
		lea	ecx, [edi+eax]
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_40]
		call	_poolStoreString
		test	eax, eax
		jz	short loc_6420ABC8
		mov	edx, [esp+0BCh+var_58]
		mov	[edx], edi
		mov	edx, [ebx+154h]
		mov	[esp+0BCh+var_B0], eax
		mov	[esp+0BCh+var_AC], edx
		mov	eax, [ebx+168h]
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+150h]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+60h]
		mov	byte ptr [esp+0BCh+var_54], 0

loc_6420AC42:				; CODE XREF: _doProlog+16FDj
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_6420B8C2
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_6420AC64
		jmp	loc_6420A9A7
; ---------------------------------------------------------------------------
		align 10h

loc_6420AC60:				; CODE XREF: _doProlog+CE0j
		mov	ecx, eax
		mov	eax, edx

loc_6420AC64:				; CODE XREF: _doProlog+CC8j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_6420AC60
		jmp	loc_6420A9A7
; ---------------------------------------------------------------------------

loc_6420AC77:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	edx, [ebx+60h]	; jumptable 6420A1A0 case 18
		test	edx, edx
		jnz	loc_6420A133
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420AC87:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	dword ptr [ebx+14Ch], offset _atypeENTITY_6165 ; jumptable 6420A1A0 case 28
		jmp	loc_6420A2D4	; jumptable 6420A1A0 case 34
; ---------------------------------------------------------------------------

loc_6420AC96:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+var_50] ; jumptable 6420A1A0 cases 60,61
		mov	byte ptr [eax+81h], 1
		mov	edx, [ebx+1ECh]
		test	edx, edx
		jnz	loc_6420B980
		mov	edx, [esp+0BCh+var_50]
		movzx	eax, byte ptr [edx+82h]
		mov	[edx+80h], al
		mov	byte ptr [esp+0BCh+var_54], 1

loc_6420ACC5:				; CODE XREF: _doProlog+1FF4j
		mov	ebp, [esp+0BCh+var_50]
		cmp	byte ptr [ebp+82h], 0
		jnz	loc_6420A433
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_6420A433
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		test	eax, eax
		jnz	loc_6420A433
		jmp	loc_6420A5A5
; ---------------------------------------------------------------------------

loc_6420ACF6:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		sub	edx, 0Ch	; jumptable 6420A1A0 case 0
		cmp	edx, 10h
		lea	esi, [esi+0]
		ja	loc_6420B67E
		mov	eax, ds:_CSWTCH_279[edx*4]
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420AD12:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ebp, [esp+0BCh+var_50] ; jumptable 6420A1A0 case 13
		cmp	byte ptr [ebp+80h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [esi+44h]
		mov	edx, esi
		lea	ecx, [edi+eax]
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_storeEntityValue
		mov	edx, [ebx+13Ch]
		test	edx, edx
		mov	ebp, eax
		jz	loc_6420BECE
		mov	ecx, [esp+0BCh+var_50]
		mov	byte ptr [esp+0BCh+var_54], 1
		mov	eax, [ecx+78h]
		mov	[edx+4], eax
		mov	eax, [ecx+74h]
		mov	[esp+0BCh+var_70], eax
		sub	eax, [ecx+78h]
		mov	[edx+8], eax
		mov	eax, [esp+0BCh+var_70]
		mov	[ecx+78h], eax
		mov	ecx, [ebx+88h]
		test	ecx, ecx
		jz	short loc_6420ADD0
		mov	ecx, [esp+0BCh+var_58]
		mov	[ecx], edi
		mov	[esp+0BCh+var_9C], 0
		mov	[esp+0BCh+var_A0], 0
		mov	[esp+0BCh+var_A4], 0
		mov	eax, [ebx+168h]
		mov	[esp+0BCh+var_A8], eax
		mov	eax, [edx+8]
		mov	[esp+0BCh+var_AC], eax
		mov	eax, [edx+4]
		mov	[esp+0BCh+var_B0], eax
		movzx	eax, byte ptr [edx+21h]
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [edx]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+88h]
		mov	byte ptr [esp+0BCh+var_54], 0

loc_6420ADD0:				; CODE XREF: _doProlog+DE9j
					; _doProlog+1F4Dj
		test	ebp, ebp
		jz	loc_6420A433
		mov	eax, ebp
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------
		align 10h

loc_6420ADE0:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	byte ptr [esp+0BCh+var_54], 1 ;	jumptable 6420A1A0 case	14
		jmp	loc_6420A7A8
; ---------------------------------------------------------------------------

loc_6420ADEA:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	edx, [esp+0BCh+var_50] ; jumptable 6420A1A0 cases 36,37
		cmp	byte ptr [edx+80h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		movzx	ecx, byte ptr [ebx+160h]
		mov	edx, [ebx+15Ch]
		mov	[esp+0BCh+var_B4], ebx
		mov	[esp+0BCh+var_B8], 0
		movzx	eax, byte ptr [ebx+161h]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [ebx+158h]
		call	_defineAttribute
		test	eax, eax
		jz	loc_6420ABC8
		mov	edx, [ebx+84h]
		test	edx, edx
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [ebx+14Ch]
		test	eax, eax
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		movzx	edx, byte ptr [eax]
		cmp	dl, 28h
		jz	loc_6420BE81
		cmp	dl, 4Eh
		jz	loc_6420BE77

loc_6420AE62:				; CODE XREF: _doProlog+1EEBj
					; _doProlog+1F39j
		mov	ecx, [esp+0BCh+var_58]
		xor	eax, eax
		cmp	ebp, 24h
		setz	al
		mov	[ecx], edi
		mov	[esp+0BCh+var_A8], eax
		mov	[esp+0BCh+var_AC], 0
		mov	eax, [ebx+14Ch]
		mov	[esp+0BCh+var_B0], eax
		mov	eax, [ebx+15Ch]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+158h]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+84h]
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_6420BB49
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_6420AECB
		jmp	loc_6420A6E6
; ---------------------------------------------------------------------------

loc_6420AEC7:				; CODE XREF: _doProlog+F47j
		mov	ecx, eax
		mov	eax, edx

loc_6420AECB:				; CODE XREF: _doProlog+F30j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_6420AEC7
		jmp	loc_6420A6E6
; ---------------------------------------------------------------------------
		align 10h

loc_6420AEE0:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+var_50] ; jumptable 6420A1A0 cases 38,39
		cmp	byte ptr [eax+80h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	edx, [esi+44h]
		mov	eax, [esp+0BCh+var_38]
		movzx	ecx, byte ptr [ebx+160h]
		mov	[esp+0BCh+var_B4], eax
		mov	eax, edx
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		lea	edx, [edi+edx]
		mov	byte ptr [esp+0BCh+var_54], cl
		movzx	ecx, cl
		mov	[esp+0BCh+var_B8], eax
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], edx
		mov	edx, esi
		call	_appendAttributeValue
		test	eax, eax
		jnz	loc_6420A1B5
		cmp	byte ptr [esp+0BCh+var_54], 0
		jz	loc_6420BD7F
		mov	edx, [esp+0BCh+var_50]
		mov	eax, [edx+5Ch]

loc_6420AF45:				; CODE XREF: _doProlog+1E0Ej
					; _doProlog+205Cj
		cmp	[edx+58h], eax
		jz	loc_6420BFC5

loc_6420AF4E:				; CODE XREF: _doProlog+2050j
		mov	byte ptr [eax],	0
		mov	edx, [esp+0BCh+var_50]
		add	eax, 1
		mov	ecx, [edx+60h]
		mov	[edx+5Ch], eax
		mov	[edx+60h], eax
		mov	edx, [ebx+15Ch]
		mov	[esp+0BCh+var_54], ecx
		mov	eax, [esp+0BCh+var_54]
		movzx	ecx, byte ptr [ebx+160h]
		mov	[esp+0BCh+var_B4], ebx
		mov	[esp+0BCh+var_BC], 0
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+158h]
		call	_defineAttribute
		test	eax, eax
		jz	loc_6420ABC8
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [ebx+14Ch]
		test	eax, eax
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		movzx	edx, byte ptr [eax]
		cmp	dl, 28h
		jz	loc_6420BEEC
		cmp	dl, 4Eh
		jz	loc_6420BEE2

loc_6420AFC9:				; CODE XREF: _doProlog+1F56j
					; _doProlog+1FA4j
		mov	ecx, [esp+0BCh+var_54]
		xor	eax, eax
		cmp	ebp, 26h
		mov	edx, [esp+0BCh+var_58]
		setz	al
		mov	[edx], edi
		mov	[esp+0BCh+var_AC], ecx
		mov	[esp+0BCh+var_A8], eax
		mov	eax, [ebx+14Ch]
		mov	[esp+0BCh+var_B0], eax
		mov	eax, [ebx+15Ch]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+158h]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+84h]
		mov	ecx, [ebx+1A4h]
		test	ecx, ecx
		jz	loc_6420BB49
		mov	eax, [ebx+1A0h]
		test	eax, eax
		jnz	short loc_6420B034
		jmp	loc_6420A6E6
; ---------------------------------------------------------------------------
		align 10h

loc_6420B030:				; CODE XREF: _doProlog+10B0j
		mov	ecx, eax
		mov	eax, edx

loc_6420B034:				; CODE XREF: _doProlog+1097j
		mov	edx, [eax]
		mov	[eax], ecx
		mov	[ebx+1A4h], eax
		test	edx, edx
		jnz	short loc_6420B030
		jmp	loc_6420A6E6
; ---------------------------------------------------------------------------

loc_6420B047:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+var_50] ; jumptable 6420A1A0 case 44
		cmp	byte ptr [eax+0A0h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	ecx, [eax+0B4h]
		mov	edx, [eax+0B8h]
		mov	ebp, [ebx+80h]
		mov	eax, [eax+0A4h]
		imul	edx, [edx+ecx*4-4], 1Ch
		test	ebp, ebp
		mov	dword ptr [edx+eax], 3
		jnz	loc_6420A133
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6420B090:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	edx, [ebx+80h]	; jumptable 6420A1A0 case 41
		test	edx, edx
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [esp+0BCh+arg_8]
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_getElementType
		test	eax, eax
		mov	[ebx+158h], eax
		jz	loc_6420ABC8
		mov	eax, [esp+0BCh+var_50]
		mov	dword ptr [eax+0B4h], 0
		mov	dword ptr [eax+0B0h], 0
		mov	byte ptr [eax+0A0h], 1
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420B0E5:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A0 case	35
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_getElementType
		test	eax, eax
		mov	[ebx+158h], eax
		jnz	loc_6420A2D4	; jumptable 6420A1A0 case 34
		jmp	loc_6420ABC8
; ---------------------------------------------------------------------------
		align 10h

loc_6420B110:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, 3		; jumptable 6420A1A0 case 49

loc_6420B115:				; CODE XREF: _doProlog+1442j
					; _doProlog+144Cj ...
		mov	edx, [esp+0BCh+var_50]
		cmp	byte ptr [edx+0A0h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	ecx, [ebx+80h]
		mov	ebp, [edx+0B8h]
		test	ecx, ecx
		mov	ecx, [edx+0B4h]
		setz	byte ptr [esp+0BCh+var_54]
		sub	ecx, 1
		mov	[edx+0B4h], ecx
		mov	edx, [edx+0A4h]
		mov	[esp+0BCh+var_80], edx
		imul	edx, [ebp+ecx*4+0], 1Ch
		test	ecx, ecx
		mov	ebp, [esp+0BCh+var_80]
		mov	[edx+ebp+4], eax
		jnz	loc_6420A433
		cmp	byte ptr [esp+0BCh+var_54], 0
		jz	loc_6420BB75

loc_6420B172:				; CODE XREF: _doProlog+1C6Ej
		mov	ebp, [esp+0BCh+var_50]
		mov	byte ptr [ebp+0A0h], 0
		mov	dword ptr [ebp+0A8h], 0
		jmp	loc_6420A433
; ---------------------------------------------------------------------------

loc_6420B18C:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A0 case	57
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportComment
		test	eax, eax
		jnz	loc_6420A133
		jmp	loc_6420ABC8
; ---------------------------------------------------------------------------
		align 10h

loc_6420B1B0:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A0 case	56
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportProcessingInstruction
		test	eax, eax
		jnz	loc_6420A133
		jmp	loc_6420ABC8
; ---------------------------------------------------------------------------

loc_6420B1D2:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ecx, [esp+0BCh+var_50] ; jumptable 6420A1A0 case 16
		cmp	byte ptr [ecx+80h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [ebx+13Ch]
		test	eax, eax
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	ebp, [ebx+88h]
		test	ebp, ebp
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [ebx+13Ch]
		mov	ebp, [esp+0BCh+var_58]
		mov	[ebp+0], edi
		mov	[esp+0BCh+var_9C], 0
		mov	edx, [eax+18h]
		mov	[esp+0BCh+var_A0], edx
		mov	edx, [eax+10h]
		mov	[esp+0BCh+var_A4], edx
		mov	edx, [eax+14h]
		mov	[esp+0BCh+var_AC], 0
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+var_A8], edx
		movzx	edx, byte ptr [eax+21h]
		mov	[esp+0BCh+var_B4], edx

loc_6420B241:				; CODE XREF: _doProlog+1E5Aj
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+88h]
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420B258:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ebp, 3		; jumptable 6420A1A0 case 55
		jmp	loc_6420A348
; ---------------------------------------------------------------------------

loc_6420B262:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [ebx+1D0h]	; jumptable 6420A1A0 case 50
		add	eax, [ebx+104h]
		movzx	edx, byte ptr [eax]
		cmp	dl, 2Ch
		jz	loc_6420B67E
		mov	ecx, [esp+0BCh+var_50]
		cmp	byte ptr [ecx+0A0h], 0
		jz	loc_6420B5E4
		test	dl, dl
		jnz	loc_6420B5E4
		mov	ebp, ecx
		mov	ecx, [ecx+0B4h]
		mov	edx, [ebp+0B8h]
		imul	edx, [edx+ecx*4-4], 1Ch
		add	edx, [ebp+0A4h]
		cmp	dword ptr [edx], 3
		jz	loc_6420B5E4
		mov	ecx, [ebx+80h]
		mov	dword ptr [edx], 5
		test	ecx, ecx
		setz	byte ptr [esp+0BCh+var_54]

loc_6420B2C8:				; CODE XREF: _doProlog+1659j
		mov	byte ptr [eax],	7Ch
		jmp	loc_6420A433
; ---------------------------------------------------------------------------

loc_6420B2D0:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [ebx+1D0h]	; jumptable 6420A1A0 case 51
		add	eax, [ebx+104h]
		cmp	byte ptr [eax],	7Ch
		jz	loc_6420B67E
		mov	byte ptr [eax],	2Ch
		mov	eax, [esp+0BCh+var_50]
		cmp	byte ptr [eax+0A0h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		jmp	loc_6420A3E5	; jumptable 6420A1A0 case 40
; ---------------------------------------------------------------------------

loc_6420B2FE:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		xor	ebp, ebp	; jumptable 6420A1A0 case 52
		jmp	loc_6420A348
; ---------------------------------------------------------------------------

loc_6420B305:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ebp, 2		; jumptable 6420A1A0 case 53
		lea	esi, [esi+0]
		jmp	loc_6420A348
; ---------------------------------------------------------------------------

loc_6420B315:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	dword ptr [ebx+14Ch], offset _atypeENTITIES_6166 ; jumptable 6420A1A0 case 29
		nop
		jmp	loc_6420A2D4	; jumptable 6420A1A0 case 34
; ---------------------------------------------------------------------------

loc_6420B325:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	dword ptr [ebx+14Ch], offset _atypeNMTOKEN_6167	; jumptable 6420A1A0 case 30
		jmp	loc_6420A2D4	; jumptable 6420A1A0 case 34
; ---------------------------------------------------------------------------

loc_6420B334:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	dword ptr [ebx+14Ch], offset _atypeNMTOKENS_6168 ; jumptable 6420A1A0 case 31
		jmp	loc_6420A2D4	; jumptable 6420A1A0 case 34
; ---------------------------------------------------------------------------

loc_6420B343:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	ecx, [esp+0BCh+var_50] ; jumptable 6420A1A0 cases 32,33
		cmp	byte ptr [ecx+80h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	edx, [ebx+84h]
		test	edx, edx
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [ebx+14Ch]
		mov	edx, offset _enumValueSep_6170 ; "|"
		test	eax, eax
		jz	loc_6420BE07

loc_6420B375:				; CODE XREF: _doProlog+1E7Fj
					; _doProlog+1E8Aj
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	loc_6420BAB9
		mov	eax, [ebx+1ACh]
		mov	ebp, edx
		jmp	short loc_6420B3AA
; ---------------------------------------------------------------------------
		align 10h

loc_6420B390:				; CODE XREF: _doProlog+1420j
					; _doProlog+143Dj
		mov	[eax], cl
		add	ebp, 1
		add	eax, 1
		mov	[ebx+1ACh], eax
		movzx	ecx, byte ptr [ebp+0]
		test	cl, cl
		jz	loc_6420BAB9

loc_6420B3AA:				; CODE XREF: _doProlog+13F8j
		cmp	[ebx+1A8h], eax
		jnz	short loc_6420B390
		mov	eax, [esp+0BCh+var_40]
		call	_poolGrow
		test	al, al
		jz	loc_6420ABC8
		mov	eax, [ebx+1ACh]
		movzx	ecx, byte ptr [ebp+0]
		jmp	short loc_6420B390
; ---------------------------------------------------------------------------
		align 10h

loc_6420B3D0:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		xor	eax, eax	; jumptable 6420A1A0 case 46
		jmp	loc_6420B115
; ---------------------------------------------------------------------------

loc_6420B3D7:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, 1		; jumptable 6420A1A0 case 48
		jmp	loc_6420B115
; ---------------------------------------------------------------------------

loc_6420B3E1:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	edx, [esp+0BCh+var_50] ; jumptable 6420A1A0 cases 42,43
		cmp	byte ptr [edx+0A0h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [ebx+80h]
		mov	byte ptr [esp+0BCh+var_54], 1
		test	eax, eax
		jz	short loc_6420B463
		mov	[esp+0BCh+var_BC], 14h
		call	dword ptr [ebx+0Ch]
		test	eax, eax
		jz	loc_6420ABC8
		mov	ecx, [esp+0BCh+var_58]
		xor	edx, edx
		cmp	ebp, 29h
		setz	dl
		add	edx, 1
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+10h], 0
		mov	[eax], edx
		mov	[ecx], edi
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+158h]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+80h]
		mov	byte ptr [esp+0BCh+var_54], 0

loc_6420B463:				; CODE XREF: _doProlog+146Fj
		mov	ebp, [esp+0BCh+var_50]
		mov	byte ptr [ebp+0A0h], 0
		jmp	loc_6420A433
; ---------------------------------------------------------------------------

loc_6420B473:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	edx, [ebx+50h]	; jumptable 6420A1A0 case 59
		test	edx, edx
		jz	short loc_6420B48F
		mov	eax, [esp+0BCh+arg_8]
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_reportDefault

loc_6420B48F:				; CODE XREF: _doProlog+14E8j
		cmp	esi, [ebx+90h]
		mov	edi, [esp+0BCh+arg_8]
		jz	loc_6420BAA2
		mov	ebp, [ebx+12Ch]
		lea	eax, [ebp+4]
		mov	[esp+0BCh+var_54], eax

loc_6420B4AF:				; CODE XREF: _doProlog+1B24j
		mov	[ebp+0], edi
		mov	ecx, [esp+0BCh+arg_0]
		lea	edx, [esp+0BCh+var_24]
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+arg_8], 0
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_B4], ecx
		mov	[esp+0BCh+var_BC], esi
		call	dword ptr [esi+0Ch]
		mov	edx, [esp+0BCh+var_24]
		mov	ecx, [esp+0BCh+var_54]
		mov	[ecx], edx
		add	eax, 4
		cmp	eax, 2Eh	; switch 47 cases
		jbe	loc_6420B70A

loc_6420B4F6:				; CODE XREF: _doProlog:loc_6420B70Aj
					; DATA XREF: .rdata:off_6421D434o
		mov	eax, [esp+0BCh+var_24] ; jumptable 6420B70A default case
		mov	[ebp+0], eax
		mov	eax, 17h
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420B50A:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	edx, [ebx+104h]	; jumptable 6420A1A0 case 45
		mov	eax, [ebx+1D4h]
		cmp	edx, eax
		jnb	loc_6420B692
		mov	eax, [ebx+1D0h]

loc_6420B524:				; CODE XREF: _doProlog+1775j
					; _doProlog+1919j
		mov	byte ptr [eax+edx], 0
		mov	eax, [esp+0BCh+var_50]
		cmp	byte ptr [eax+0A0h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, ebx
		call	_nextScaffoldPart
		test	eax, eax
		js	loc_6420ABC8
		mov	edx, [esp+0BCh+var_50]
		mov	ebp, edx
		mov	ecx, [edx+0B4h]
		mov	edx, [edx+0B8h]
		mov	[edx+ecx*4], eax
		mov	edx, [ebp+0A4h]
		imul	eax, 1Ch
		add	dword ptr [ebp+0B4h], 1
		mov	ebp, [ebx+80h]
		mov	dword ptr [eax+edx], 6
		test	ebp, ebp
		jnz	loc_6420A133
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420B587:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, 2		; jumptable 6420A1A0 case 47
		jmp	loc_6420B115
; ---------------------------------------------------------------------------

loc_6420B591:				; CODE XREF: _doProlog:loc_6420A1A0j
					; DATA XREF: .rdata:off_6421D2FCo
		mov	eax, [esp+0BCh+arg_8] ;	jumptable 6420A1A0 case	58
		mov	ecx, edi
		mov	edx, 1
		mov	[esp+0BCh+var_BC], eax
		mov	eax, ebx
		call	_processXmlDecl
		test	eax, eax
		jz	loc_6420A472
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420B5B6:				; CODE XREF: _doProlog+294j
		mov	ecx, [esp+0BCh+arg_C]
		xor	eax, eax
		mov	[ecx], edi
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420B5C6:				; CODE XREF: _doProlog:loc_6420A170j
		cmp	[esp+0BCh+var_31], 0
		jz	loc_6420A176
		mov	eax, [esp+0BCh+arg_C]
		mov	[eax], edi
		xor	eax, eax
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420B5E4:				; CODE XREF: _doProlog+12F5j
					; _doProlog+12FDj ...
		mov	byte ptr [esp+0BCh+var_54], 1
		jmp	loc_6420B2C8
; ---------------------------------------------------------------------------

loc_6420B5EE:				; CODE XREF: _doProlog+5E7j
		mov	ecx, esi
		mov	[ebp+81h], cl

loc_6420B5F6:				; CODE XREF: _doProlog+553j
					; _doProlog+56Fj ...
		mov	ebp, [esp+0BCh+arg_C]
		mov	eax, [esp+0BCh+arg_0]
		mov	dword ptr [ebx+118h], offset _contentProcessor
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_B0], ebp
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_BC], ebx
		call	_contentProcessor
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420B627:				; CODE XREF: _doProlog+3CBj
		mov	edx, [esp+0BCh+arg_8]
		jmp	loc_6420A36B
; ---------------------------------------------------------------------------

loc_6420B633:				; CODE XREF: _doProlog+49Dj
		mov	ecx, [ebx+13Ch]
		test	ecx, ecx
		jz	loc_6420A433
		mov	eax, [esi+44h]
		mov	edx, esi
		lea	ecx, [edi+eax]
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_38]
		call	_poolStoreString
		test	eax, eax
		mov	ebp, eax
		jz	loc_6420ABC8
		call	_normalizePublicId
		mov	eax, [ebx+13Ch]
		mov	[eax+18h], ebp
		jmp	loc_6420A804
; ---------------------------------------------------------------------------

loc_6420B67E:				; CODE XREF: _doProlog+D70j
					; _doProlog+12E4j ...
		mov	eax, 2
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420B688:				; CODE XREF: _doProlog+C4Aj
					; _doProlog+C55j
		mov	byte ptr [esp+0BCh+var_54], 1
		jmp	loc_6420AC42
; ---------------------------------------------------------------------------

loc_6420B692:				; CODE XREF: _doProlog+1588j
		test	eax, eax
		jz	loc_6420B87F
		add	eax, eax
		mov	edx, [ebx+10h]
		mov	[ebx+1D4h], eax
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+1D0h]
		mov	[esp+0BCh+var_BC], eax
		call	edx
		test	eax, eax
		jz	loc_6420ABC8
		mov	ecx, [esp+0BCh+var_50]
		mov	[ebx+1D0h], eax
		mov	edx, [ecx+0B8h]
		test	edx, edx
		jz	loc_6420B8A3
		mov	eax, [ebx+1D4h]
		mov	[esp+0BCh+var_BC], edx
		shl	eax, 2
		mov	[esp+0BCh+var_B8], eax
		call	dword ptr [ebx+10h]
		test	eax, eax
		jz	loc_6420ABC8
		mov	ebp, [esp+0BCh+var_50]
		mov	edx, [ebx+104h]
		mov	[ebp+0B8h], eax
		mov	eax, [ebx+1D0h]
		jmp	loc_6420B524
; ---------------------------------------------------------------------------

loc_6420B70A:				; CODE XREF: _doProlog+1560j
		jmp	ds:off_6421D434[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420B711:				; CODE XREF: _doProlog:loc_6420B70Aj
					; DATA XREF: .rdata:off_6421D434o
		mov	eax, [ebx+50h]	; jumptable 6420B70A case 46
		test	eax, eax
		jz	loc_6420B7C4
		mov	[esp+0BCh+var_2C], edi
		mov	ebp, [esp+0BCh+var_24]
		cmp	byte ptr [esi+48h], 0
		jnz	loc_6420BDEF
		cmp	esi, [ebx+90h]
		mov	eax, [esp+0BCh+var_44]
		mov	edi, [esp+0BCh+var_48]
		jz	loc_6420BF74
		mov	edi, [ebx+12Ch]
		lea	eax, [edi+4]
		mov	[esp+0BCh+var_54], edi
		mov	edi, eax

loc_6420B757:				; CODE XREF: _doProlog+1832j
					; _doProlog+1FEAj
		mov	eax, [ebx+2Ch]
		lea	edx, [esp+0BCh+var_2C]
		mov	[esp+0BCh+var_28], eax
		mov	eax, [ebx+30h]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_B4], ebp
		mov	[esp+0BCh+var_BC], esi
		mov	[esp+0BCh+var_AC], eax
		lea	eax, [esp+0BCh+var_28]
		mov	[esp+0BCh+var_B0], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [esp+0BCh+var_2C]
		mov	[edi], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+0BCh+var_28]
		mov	[esp+0BCh+var_B8], edx
		sub	eax, edx
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+0BCh+var_2C]
		mov	ecx, [esp+0BCh+var_54]
		mov	[ecx], eax
		cmp	ebp, [esp+0BCh+var_2C]
		jnz	short loc_6420B757

loc_6420B7C4:				; CODE XREF: _doProlog+1786j
					; _doProlog+1E72j
		mov	eax, [esp+0BCh+var_24]
		mov	ebp, [esp+0BCh+arg_C]
		cmp	dword ptr [ebx+1E0h], 2
		mov	[esp+0BCh+arg_8], eax
		mov	[ebp+0], eax
		jz	loc_6420A1B0

loc_6420B7E9:				; CODE XREF: _doProlog+1890j
					; _doProlog+18BDj
		mov	edx, [esp+0BCh+arg_8]
		test	edx, edx
		jnz	loc_6420A133
		mov	dword ptr [ebx+118h], offset _ignoreSectionProcessor
		xor	eax, eax
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420B809:				; CODE XREF: _doProlog:loc_6420B70Aj
					; DATA XREF: .rdata:off_6421D434o
		cmp	[esp+0BCh+var_31], 0 ; jumptable 6420B70A cases	0,3
		jz	loc_6420B67E
		mov	edx, [esp+0BCh+arg_C]
		mov	[edx], edi
		jmp	short loc_6420B7E9
; ---------------------------------------------------------------------------

loc_6420B822:				; CODE XREF: _doProlog:loc_6420B70Aj
					; DATA XREF: .rdata:off_6421D434o
		mov	eax, [esp+0BCh+var_24] ; jumptable 6420B70A case 4
		mov	[ebp+0], eax
		mov	eax, 4
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420B836:				; CODE XREF: _doProlog:loc_6420B70Aj
					; DATA XREF: .rdata:off_6421D434o
		cmp	[esp+0BCh+var_31], 0 ; jumptable 6420B70A case 2
		jz	loc_6420A1E0	; jumptable 6420A1A7 case 13
		mov	eax, [esp+0BCh+arg_C]
		mov	[eax], edi
		jmp	short loc_6420B7E9
; ---------------------------------------------------------------------------

loc_6420B84F:				; CODE XREF: _doProlog+9A0j
					; _doProlog+9ABj
		mov	byte ptr [esp+0BCh+var_54], 1
		jmp	loc_6420A97B
; ---------------------------------------------------------------------------

loc_6420B859:				; CODE XREF: _doProlog+B37j
		mov	ecx, [esp+0BCh+var_50]
		cmp	byte ptr [ecx+80h], 0
		jnz	loc_6420BCE1
		mov	eax, [ecx+60h]
		mov	dword ptr [ebx+13Ch], 0
		mov	[ecx+5Ch], eax
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420B87F:				; CODE XREF: _doProlog+1704j
		mov	eax, [ebx+0Ch]
		mov	dword ptr [ebx+1D4h], 20h
		mov	[esp+0BCh+var_BC], 20h
		call	eax
		test	eax, eax
		mov	[ebx+1D0h], eax
		jz	loc_6420ABC8

loc_6420B8A3:				; CODE XREF: _doProlog+173Ej
		mov	edx, [ebx+104h]
		jmp	loc_6420B524
; ---------------------------------------------------------------------------

loc_6420B8AE:				; CODE XREF: _doProlog+79Aj
		mov	dword ptr [ebx+144h], offset _externalSubsetName_6160 ;	"#"
		mov	byte ptr [esp+0BCh+var_54], 1
		jmp	loc_6420A76C
; ---------------------------------------------------------------------------

loc_6420B8C2:				; CODE XREF: _doProlog+9F3j
					; _doProlog+CBAj
		mov	eax, [ebx+1A0h]
		mov	[ebx+1A4h], eax
		jmp	loc_6420A9A7
; ---------------------------------------------------------------------------

loc_6420B8D3:				; CODE XREF: _doProlog+94Ej
		mov	ecx, [ebx+70h]
		test	ecx, ecx
		jz	loc_6420A8E4
		mov	edx, [esp+0BCh+var_3C]
		mov	ecx, offset _externalSubsetName_6160 ; "#"
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], 24h ; size_t
		call	_lookup
		test	eax, eax
		jz	loc_6420ABC8
		cmp	byte ptr [ebx+1E9h], 0
		jz	short loc_6420B912
		mov	edx, [ebx+168h]
		mov	[eax+14h], edx

loc_6420B912:				; CODE XREF: _doProlog+1977j
		mov	edx, [esp+0BCh+var_50]
		mov	byte ptr [edx+83h], 0
		mov	edx, [eax+18h]
		mov	[esp+0BCh+var_AC], edx
		mov	edx, [eax+10h]
		mov	[esp+0BCh+var_B0], edx
		mov	eax, [eax+14h]
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+74h]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+70h]
		test	eax, eax
		jz	loc_6420BB5A
		mov	ecx, [esp+0BCh+var_50]
		cmp	byte ptr [ecx+83h], 0
		jnz	loc_6420BD52
		mov	edx, [ebx+144h]
		test	edx, edx
		jnz	loc_6420A8E4
		mov	edx, [esp+0BCh+var_50]
		mov	eax, ebp
		mov	[edx+81h], al
		jmp	loc_6420A8E4
; ---------------------------------------------------------------------------
		align 10h

loc_6420B980:				; CODE XREF: _doProlog+D19j
		mov	eax, [esi+44h]
		mov	edx, esi
		lea	ecx, [edi+eax]
		neg	eax
		add	eax, [esp+0BCh+arg_8]
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_38]
		call	_poolStoreString
		test	eax, eax
		mov	[esp+0BCh+var_54], eax
		jz	loc_6420ABC8
		mov	edx, [esp+0BCh+var_3C]
		mov	ecx, eax
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], 0 ; size_t
		call	_lookup
		mov	ecx, [esp+0BCh+var_50]
		mov	edx, eax
		mov	eax, [ecx+60h]
		mov	[ecx+5Ch], eax
		mov	eax, [ebx+110h]
		test	eax, eax
		jz	short loc_6420B9F3
		cmp	byte ptr [ecx+82h], 0
		jz	loc_6420BC03
		cmp	dword ptr [ebx+12Ch], 0
		jz	loc_6420BC14

loc_6420B9F3:				; CODE XREF: _doProlog+1A47j
					; _doProlog+1C7Ej
		test	edx, edx
		jz	loc_6420BE35

loc_6420B9FB:				; CODE XREF: _doProlog+1C90j
		cmp	byte ptr [edx+20h], 0
		nop
		jnz	loc_6420BF89
		mov	ecx, [edx+4]
		test	ecx, ecx
		jz	loc_6420BC69
		xor	ecx, ecx
		cmp	ebp, 3Ch
		setz	cl
		mov	eax, ebx
		call	_processInternalEntity
		test	eax, eax
		jz	loc_6420A133
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------
		align 10h

loc_6420BA30:				; CODE XREF: _doProlog+ADBj
		mov	eax, [esp+0BCh+arg_8]
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_38]
		call	_poolStoreString
		test	eax, eax
		mov	ebp, eax
		jz	loc_6420ABC8
		mov	edx, [esp+0BCh+var_3C]
		mov	ecx, eax
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], 24h ; size_t
		call	_lookup
		test	eax, eax
		mov	[ebx+13Ch], eax
		jz	loc_6420ABC8
		cmp	ebp, [eax]
		jz	loc_6420BF39
		mov	edx, [esp+0BCh+var_50]
		mov	eax, [edx+60h]
		mov	[edx+5Ch], eax
		jmp	loc_6420AACD
; ---------------------------------------------------------------------------

loc_6420BA90:				; CODE XREF: _doProlog+92Ej
		cmp	byte ptr [ebx+1E9h], 0
		jz	loc_6420A8EB
		jmp	loc_6420A8C4
; ---------------------------------------------------------------------------

loc_6420BAA2:				; CODE XREF: _doProlog+150Cj
		mov	ebp, [esp+0BCh+var_44]
		mov	[ebx+120h], edi
		mov	[esp+0BCh+var_54], ebp
		mov	ebp, [esp+0BCh+var_48]
		jmp	loc_6420B4AF
; ---------------------------------------------------------------------------

loc_6420BAB9:				; CODE XREF: _doProlog+13EAj
					; _doProlog+1414j
		mov	ebp, [ebx+1B0h]
		test	ebp, ebp
		jz	loc_6420ABC8
		mov	[esp+0BCh+var_24], edi
		mov	ecx, [ebx+1ACh]
		mov	ebp, [esp+0BCh+arg_8]
		test	ecx, ecx
		jz	loc_6420BFF1

loc_6420BAE3:				; CODE XREF: _doProlog+206Cj
		mov	[esp+0BCh+var_54], ebx
		mov	edi, [esp+0BCh+var_40]
		mov	ebx, [esp+0BCh+var_30]
		jmp	short loc_6420BB03
; ---------------------------------------------------------------------------

loc_6420BAF4:				; CODE XREF: _doProlog+1B9Aj
		mov	eax, edi
		call	_poolGrow
		test	al, al
		jz	loc_6420ABC8

loc_6420BB03:				; CODE XREF: _doProlog+1B62j
		mov	eax, [edi+8]
		mov	[esp+0BCh+var_B0], ebx
		mov	[esp+0BCh+var_B4], ebp
		mov	[esp+0BCh+var_BC], esi
		mov	[esp+0BCh+var_AC], eax
		lea	eax, [esp+0BCh+var_24]
		mov	[esp+0BCh+var_B8], eax
		call	dword ptr [esi+3Ch]
		cmp	ebp, [esp+0BCh+var_24]
		jnz	short loc_6420BAF4
		mov	ebx, [esp+0BCh+var_54]
		mov	eax, [ebx+1B0h]
		test	eax, eax
		jz	loc_6420ABC8
		mov	[ebx+14Ch], eax
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420BB49:				; CODE XREF: _doProlog+732j
					; _doProlog+F22j ...
		mov	eax, [ebx+1A0h]
		mov	[ebx+1A4h], eax
		jmp	loc_6420A6E6
; ---------------------------------------------------------------------------

loc_6420BB5A:				; CODE XREF: _doProlog+5DAj
					; _doProlog+19B5j
		mov	eax, 15h
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420BB64:				; CODE XREF: _doProlog+8D5j
		mov	eax, [ebx+1A0h]
		mov	[ebx+1A4h], eax
		jmp	loc_6420A889
; ---------------------------------------------------------------------------

loc_6420BB75:				; CODE XREF: _doProlog+11DCj
		mov	edx, [ebx+164h]
		imul	eax, [edx+0B0h], 14h
		add	eax, [edx+0A8h]
		mov	[esp+0BCh+var_60], edx
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+0Ch]
		mov	edx, [esp+0BCh+var_60]
		test	eax, eax
		mov	ebp, eax
		jz	loc_6420ABC8
		imul	eax, [edx+0B0h], 14h
		mov	ecx, ebp
		lea	edx, [esp+0BCh+var_20]
		mov	[esp+0BCh+var_BC], edx
		xor	edx, edx
		lea	eax, [ebp+eax+0]
		mov	[esp+0BCh+var_24], eax
		lea	eax, [ebp+14h]
		mov	[esp+0BCh+var_20], eax
		lea	eax, [esp+0BCh+var_24]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, ebx
		call	_build_node
		mov	ecx, [esp+0BCh+var_58]
		mov	[ecx], edi
		mov	[esp+0BCh+var_B4], ebp
		mov	eax, [ebx+158h]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+80h]
		jmp	loc_6420B172
; ---------------------------------------------------------------------------

loc_6420BC03:				; CODE XREF: _doProlog+1A50j
		mov	eax, [esp+0BCh+var_50]
		cmp	byte ptr [eax+81h], 0
		jnz	loc_6420B9F3

loc_6420BC14:				; CODE XREF: _doProlog+1A5Dj
		test	edx, edx
		jz	loc_6420C069
		cmp	byte ptr [edx+22h], 0
		jnz	loc_6420B9FB
		mov	eax, 18h
		nop
		lea	esi, [esi+0]
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420BC35:				; CODE XREF: _doProlog+812j
		mov	edx, [esp+0BCh+var_3C]
		mov	ecx, offset _externalSubsetName_6160 ; "#"
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], 24h ; size_t
		call	_lookup
		test	eax, eax
		mov	[ebx+13Ch], eax
		jz	loc_6420ABC8
		mov	dword ptr [eax+18h], 0
		jmp	loc_6420A7A8
; ---------------------------------------------------------------------------

loc_6420BC69:				; CODE XREF: _doProlog+1A7Bj
		cmp	dword ptr [ebx+70h], 0
		jz	loc_6420BE1F
		mov	ebp, [esp+0BCh+var_50]
		mov	byte ptr [ebp+83h], 0
		mov	eax, [edx+18h]
		mov	byte ptr [edx+20h], 1
		mov	[esp+0BCh+var_60], edx
		mov	[esp+0BCh+var_AC], eax
		mov	eax, [edx+10h]
		mov	[esp+0BCh+var_B0], eax
		mov	eax, [edx+14h]
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [ebx+74h]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+70h]
		mov	edx, [esp+0BCh+var_60]
		test	eax, eax
		jz	loc_6420C007
		mov	byte ptr [edx+20h], 0
		mov	eax, [esp+0BCh+var_50]
		cmp	byte ptr [eax+83h], 0
		jnz	loc_6420BF7F
		mov	edx, eax
		movzx	eax, byte ptr [eax+82h]
		mov	[edx+80h], al
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420BCE1:				; CODE XREF: _doProlog+18D4j
		mov	eax, [esp+0BCh+arg_8]
		mov	ecx, edi
		mov	edx, esi
		mov	[esp+0BCh+var_BC], eax
		mov	eax, [esp+0BCh+var_38]
		call	_poolStoreString
		test	eax, eax
		mov	ebp, eax
		jz	loc_6420ABC8
		mov	edx, [esp+0BCh+var_50]
		mov	ecx, eax
		mov	eax, ebx
		mov	[esp+0BCh+var_BC], 24h ; size_t
		call	_lookup
		test	eax, eax
		mov	[ebx+13Ch], eax
		jz	loc_6420ABC8
		cmp	ebp, [eax]
		jz	loc_6420BF93
		mov	ebp, [esp+0BCh+var_50]
		mov	dword ptr [ebx+13Ch], 0
		mov	eax, [ebp+60h]
		mov	[ebp+5Ch], eax
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420BD48:				; CODE XREF: _doProlog+487j
					; _doProlog+699j ...
		mov	eax, 20h
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420BD52:				; CODE XREF: _doProlog+19C6j
		cmp	byte ptr [ecx+82h], 0
		jnz	loc_6420A8E4
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_6420A8E4
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		test	eax, eax
		jnz	loc_6420A8E4
		jmp	loc_6420A5A5
; ---------------------------------------------------------------------------

loc_6420BD7F:				; CODE XREF: _doProlog+FA8j
		mov	ecx, [esp+0BCh+var_50]
		mov	edx, [ecx+5Ch]
		cmp	edx, [ecx+60h]
		jz	short loc_6420BD98
		cmp	byte ptr [edx-1], 20h
		lea	eax, [edx-1]
		jz	loc_6420BFE5

loc_6420BD98:				; CODE XREF: _doProlog+1DF9j
		mov	eax, edx
		mov	edx, [esp+0BCh+var_50]
		jmp	loc_6420AF45
; ---------------------------------------------------------------------------

loc_6420BDA3:				; CODE XREF: _doProlog+BA8j
		cmp	dword ptr [ebx+88h], 0
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	edx, [esp+0BCh+var_58]
		mov	[edx], edi
		mov	edx, [eax+1Ch]
		mov	[esp+0BCh+var_9C], edx
		mov	edx, [eax+18h]
		mov	[esp+0BCh+var_A0], edx
		mov	edx, [eax+10h]
		mov	[esp+0BCh+var_A4], edx
		mov	edx, [eax+14h]
		mov	[esp+0BCh+var_AC], 0
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+var_B4], 0
		mov	[esp+0BCh+var_A8], edx
		jmp	loc_6420B241
; ---------------------------------------------------------------------------

loc_6420BDEF:				; CODE XREF: _doProlog+179Ej
		sub	ebp, edi
		mov	[esp+0BCh+var_B4], ebp
		mov	[esp+0BCh+var_B8], edi
		mov	eax, [ebx+4]
		mov	[esp+0BCh+var_BC], eax
		call	dword ptr [ebx+50h]
		jmp	loc_6420B7C4
; ---------------------------------------------------------------------------

loc_6420BE07:				; CODE XREF: _doProlog+13DFj
		cmp	ebp, 20h
		mov	edx, offset _notationPrefix_6169 ; "NOTATION("
		jz	loc_6420B375
		mov	edx, offset _enumValueStart_6171 ; "("
		jmp	loc_6420B375
; ---------------------------------------------------------------------------

loc_6420BE1F:				; CODE XREF: _doProlog+1CDDj
		mov	ecx, [esp+0BCh+var_50]
		movzx	eax, byte ptr [ecx+82h]
		mov	[ecx+80h], al
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420BE35:				; CODE XREF: _doProlog+1A65j
		mov	edx, [esp+0BCh+var_50]
		cmp	ebp, 3Ch
		movzx	eax, byte ptr [edx+82h]
		mov	[edx+80h], al
		jnz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	loc_6420A080	; jumptable 6420A1A0 default case
		mov	ecx, [esp+0BCh+var_54]
		mov	[esp+0BCh+var_B4], 1
		mov	[esp+0BCh+var_B8], ecx
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_BC], edx
		call	eax
		jmp	loc_6420A133
; ---------------------------------------------------------------------------

loc_6420BE77:				; CODE XREF: _doProlog+ECCj
		cmp	byte ptr [eax+1], 4Fh
		jnz	loc_6420AE62

loc_6420BE81:				; CODE XREF: _doProlog+EC3j
		mov	eax, [ebx+1ACh]
		cmp	eax, [ebx+1A8h]
		jz	loc_6420C075

loc_6420BE93:				; CODE XREF: _doProlog+20FCj
		mov	byte ptr [eax],	29h
		add	eax, 1
		cmp	eax, [ebx+1A8h]
		mov	[ebx+1ACh], eax
		jz	loc_6420C04D

loc_6420BEAB:				; CODE XREF: _doProlog+20D4j
		mov	byte ptr [eax],	0
		mov	edx, [ebx+1B0h]
		add	eax, 1
		mov	[ebx+1ACh], eax
		mov	[ebx+1B0h], eax
		mov	[ebx+14Ch], edx
		jmp	loc_6420AE62
; ---------------------------------------------------------------------------

loc_6420BECE:				; CODE XREF: _doProlog+DB8j
		mov	edx, [esp+0BCh+var_50]
		mov	byte ptr [esp+0BCh+var_54], 1
		mov	eax, [edx+78h]
		mov	[edx+74h], eax
		jmp	loc_6420ADD0
; ---------------------------------------------------------------------------

loc_6420BEE2:				; CODE XREF: _doProlog+1033j
		cmp	byte ptr [eax+1], 4Fh
		jnz	loc_6420AFC9

loc_6420BEEC:				; CODE XREF: _doProlog+102Aj
		mov	eax, [ebx+1ACh]
		cmp	eax, [ebx+1A8h]
		jz	loc_6420C031

loc_6420BEFE:				; CODE XREF: _doProlog+20B8j
		mov	byte ptr [eax],	29h
		add	eax, 1
		cmp	eax, [ebx+1A8h]
		mov	[ebx+1ACh], eax
		jz	loc_6420C015

loc_6420BF16:				; CODE XREF: _doProlog+209Cj
		mov	byte ptr [eax],	0
		mov	edx, [ebx+1B0h]
		add	eax, 1
		mov	[ebx+1ACh], eax
		mov	[ebx+1B0h], eax
		mov	[ebx+14Ch], edx
		jmp	loc_6420AFC9
; ---------------------------------------------------------------------------

loc_6420BF39:				; CODE XREF: _doProlog+1AEBj
		mov	ecx, [esp+0BCh+var_50]
		mov	edx, [ecx+5Ch]
		mov	[ecx+60h], edx
		mov	byte ptr [eax+21h], 1
		mov	edx, [ebx+13Ch]
		mov	dword ptr [eax+18h], 0
		xor	eax, eax
		cmp	dword ptr [ebx+1DCh], 0
		jz	short loc_6420BFB9

loc_6420BF5F:				; CODE XREF: _doProlog+2027j
					; _doProlog+2033j
		mov	[edx+22h], al
		cmp	dword ptr [ebx+88h], 0
		jnz	loc_6420A133
		jmp	loc_6420A080	; jumptable 6420A1A0 default case
; ---------------------------------------------------------------------------

loc_6420BF74:				; CODE XREF: _doProlog+17B2j
		mov	[esp+0BCh+var_54], edi
		mov	edi, eax
		jmp	loc_6420B757
; ---------------------------------------------------------------------------

loc_6420BF7F:				; CODE XREF: _doProlog+1D37j
		mov	byte ptr [esp+0BCh+var_54], 0
		jmp	loc_6420ACC5
; ---------------------------------------------------------------------------

loc_6420BF89:				; CODE XREF: _doProlog+1A70j
		mov	eax, 0Ch
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420BF93:				; CODE XREF: _doProlog+1D99j
		mov	ecx, [esp+0BCh+var_50]
		mov	edx, [ecx+5Ch]
		mov	[ecx+60h], edx
		mov	byte ptr [eax+21h], 0
		mov	edx, [ebx+13Ch]
		mov	dword ptr [eax+18h], 0
		xor	eax, eax
		cmp	dword ptr [ebx+1DCh], 0
		jnz	short loc_6420BF5F

loc_6420BFB9:				; CODE XREF: _doProlog+1FCDj
		cmp	dword ptr [ebx+12Ch], 0
		setz	al
		jmp	short loc_6420BF5F
; ---------------------------------------------------------------------------

loc_6420BFC5:				; CODE XREF: _doProlog+FB8j
		mov	eax, [esp+0BCh+var_38]
		call	_poolGrow
		test	al, al
		jz	loc_6420ABC8
		mov	ecx, [esp+0BCh+var_50]
		mov	eax, [ecx+5Ch]
		jmp	loc_6420AF4E
; ---------------------------------------------------------------------------

loc_6420BFE5:				; CODE XREF: _doProlog+1E02j
		mov	[ecx+5Ch], eax
		mov	edx, [esp+0BCh+var_50]
		jmp	loc_6420AF45
; ---------------------------------------------------------------------------

loc_6420BFF1:				; CODE XREF: _doProlog+1B4Dj
		mov	eax, [esp+0BCh+var_40]
		call	_poolGrow
		test	al, al
		jnz	loc_6420BAE3
		jmp	loc_6420ABC8
; ---------------------------------------------------------------------------

loc_6420C007:				; CODE XREF: _doProlog+1D22j
		mov	byte ptr [edx+20h], 0
		mov	al, 15h
		lea	esi, [esi+0]
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420C015:				; CODE XREF: _doProlog+1F80j
		mov	eax, [esp+0BCh+var_40]
		call	_poolGrow
		test	al, al
		jz	loc_6420ABC8
		mov	eax, [ebx+1ACh]
		jmp	loc_6420BF16
; ---------------------------------------------------------------------------

loc_6420C031:				; CODE XREF: _doProlog+1F68j
		mov	eax, [esp+0BCh+var_40]
		call	_poolGrow
		test	al, al
		jz	loc_6420ABC8
		mov	eax, [ebx+1ACh]
		jmp	loc_6420BEFE
; ---------------------------------------------------------------------------

loc_6420C04D:				; CODE XREF: _doProlog+1F15j
		mov	eax, [esp+0BCh+var_40]
		call	_poolGrow
		test	al, al
		jz	loc_6420ABC8
		mov	eax, [ebx+1ACh]
		jmp	loc_6420BEAB
; ---------------------------------------------------------------------------

loc_6420C069:				; CODE XREF: _doProlog+1C86j
		mov	eax, 0Bh
		xchg	ax, ax
		jmp	loc_6420A1B5
; ---------------------------------------------------------------------------

loc_6420C075:				; CODE XREF: _doProlog+1EFDj
		mov	eax, [esp+0BCh+var_40]
		call	_poolGrow
		test	al, al
		jz	loc_6420ABC8
		mov	eax, [ebx+1ACh]
		jmp	loc_6420BE93
_doProlog	endp

; ---------------------------------------------------------------------------
		jmp	short _prologProcessor
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_prologProcessor proc near		; CODE XREF: .text:6420C091j
					; DATA XREF: _externalParEntProcessor+5Do ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_C], ebx
		mov	ebx, [esp+3Ch+arg_0]
		lea	edx, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_8], esi
		mov	esi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], edi
		mov	edi, [esp+3Ch+arg_8]
		mov	eax, [ebx+90h]
		mov	[esp+3Ch+var_10], esi
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [eax]
		xor	ecx, ecx
		mov	edx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		mov	[esp+3Ch+var_3C], edi
		setz	cl
		mov	[esp+3Ch+var_2C], ecx
		mov	ecx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_38], eax
		mov	eax, ebx
		mov	[esp+3Ch+var_30], ecx
		mov	ecx, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_34], ecx
		mov	ecx, esi
		call	_doProlog
		mov	ebx, [esp+3Ch+var_C]
		mov	esi, [esp+3Ch+var_8]
		mov	edi, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
_prologProcessor endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=20h

_externalParEntProcessor proc near	; DATA XREF: _externalParEntInitProcessor+82o
		sub	esp, 4Ch
		mov	[esp+3Ch], ebx
		mov	ebx, [esp+50h]
		mov	[esp+40h], esi
		mov	esi, [esp+54h]
		mov	[esp+44h], edi
		mov	edi, [esp+58h]
		mov	[esp+48h], ebp
		lea	ebp, [esp+2Ch]
		mov	eax, [ebx+90h]
		mov	[esp+2Ch], esi
		mov	[esp+0Ch], ebp
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	[esp], eax
		call	dword ptr [eax]
		cmp	eax, 0
		mov	ecx, eax
		jle	short loc_6420C1C2
		cmp	eax, 0Eh
		jz	loc_6420C1F3

loc_6420C16E:				; CODE XREF: _externalParEntProcessor+B9j
					; _externalParEntProcessor+F0j
		xor	eax, eax
		mov	edx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		mov	dword ptr [ebx+118h], offset _prologProcessor
		mov	[esp+4], ecx
		mov	ecx, esi
		setz	al
		mov	[esp+10h], eax
		mov	eax, [esp+5Ch]
		mov	[esp], edi
		mov	[esp+0Ch], eax
		mov	eax, [esp+2Ch]
		mov	[esp+8], eax
		mov	eax, ebx
		call	_doProlog

loc_6420C1AE:				; CODE XREF: _externalParEntProcessor+ACj
					; _externalParEntProcessor+B2j	...
		mov	ebx, [esp+3Ch]
		mov	esi, [esp+40h]
		mov	edi, [esp+44h]
		mov	ebp, [esp+48h]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6420C1C2:				; CODE XREF: _externalParEntProcessor+43j
		jnz	short loc_6420C1E0

loc_6420C1C4:				; CODE XREF: _externalParEntProcessor+C7j
		cmp	ecx, 0FFFFFFFFh
		mov	eax, 5
		jz	short loc_6420C1AE
		test	ecx, ecx
		mov	al, 4
		jz	short loc_6420C1AE
		cmp	ecx, 0FFFFFFFEh
		mov	al, 6
		jnz	short loc_6420C16E
		jmp	short loc_6420C1AE
; ---------------------------------------------------------------------------
		align 10h

loc_6420C1E0:				; CODE XREF: _externalParEntProcessor:loc_6420C1C2j
		cmp	byte ptr [ebx+1E4h], 0
		jnz	short loc_6420C1C4
		mov	eax, [esp+5Ch]
		mov	[eax], esi
		xor	eax, eax
		jmp	short loc_6420C1AE
; ---------------------------------------------------------------------------

loc_6420C1F3:				; CODE XREF: _externalParEntProcessor+48j
		mov	eax, [ebx+90h]
		mov	esi, [esp+2Ch]
		mov	[esp+0Ch], ebp
		mov	[esp+8], edi
		mov	[esp], eax
		mov	[esp+4], esi
		call	dword ptr [eax]
		mov	ecx, eax
		jmp	loc_6420C16E
_externalParEntProcessor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ignoreSectionProcessor	proc near	; DATA XREF: _doProlog+1868o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 5Ch
		mov	[esp+5Ch+var_10], ebx
		mov	ebx, [esp+5Ch+arg_0]
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_4], ebp
		mov	ebp, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_C], esi
		mov	[esp+5Ch+var_8], edi
		cmp	byte ptr [ebx+1E4h], 0
		mov	[ebx+120h], ebp
		mov	edi, [ebx+90h]
		mov	[esp+5Ch+var_50], eax
		mov	eax, [esp+5Ch+arg_8]
		setz	byte ptr [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_5C], edi
		call	dword ptr [edi+0Ch]
		mov	esi, [esp+5Ch+var_20]
		mov	[ebx+124h], esi
		add	eax, 4
		cmp	eax, 2Eh	; switch 47 cases
		jbe	short loc_6420C2A4

loc_6420C27F:				; CODE XREF: _ignoreSectionProcessor:loc_6420C2A4j
					; DATA XREF: .rdata:off_6421D4F0o
		mov	[ebx+120h], esi	; jumptable 6420C2A4 default case
		mov	eax, 17h
		lea	esi, [esi+0]

loc_6420C290:				; CODE XREF: _ignoreSectionProcessor+14Fj
					; _ignoreSectionProcessor+1C4j	...
		mov	ebx, [esp+5Ch+var_10]
		mov	esi, [esp+5Ch+var_C]
		mov	edi, [esp+5Ch+var_8]
		mov	ebp, [esp+5Ch+var_4]
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------

loc_6420C2A4:				; CODE XREF: _ignoreSectionProcessor+5Dj
		jmp	ds:off_6421D4F0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420C2B0:				; CODE XREF: _ignoreSectionProcessor:loc_6420C2A4j
					; DATA XREF: .rdata:off_6421D4F0o
		mov	eax, [ebx+50h]	; jumptable 6420C2A4 case 46
		test	eax, eax
		jz	loc_6420C35D
		mov	[esp+5Ch+var_24], ebp
		cmp	byte ptr [edi+48h], 0
		jnz	loc_6420C440
		cmp	edi, [ebx+90h]
		lea	ebp, [ebx+120h]
		lea	edx, [ebx+124h]
		jz	short loc_6420C2E6
		mov	ebp, [ebx+12Ch]
		lea	edx, [ebp+4]

loc_6420C2E6:				; CODE XREF: _ignoreSectionProcessor+BBj
		lea	ecx, [esp+5Ch+var_28]
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_38], edx
		mov	[esp+5Ch+var_34], ecx
		mov	[esp+5Ch+var_30], eax
		lea	esi, [esi+0]

loc_6420C300:				; CODE XREF: _ignoreSectionProcessor+137j
		mov	eax, [ebx+2Ch]
		mov	edx, [esp+5Ch+var_34]
		mov	ecx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_28], eax
		mov	eax, [ebx+30h]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_5C], edi
		call	dword ptr [edi+3Ch]
		mov	eax, [esp+5Ch+var_24]
		mov	edx, [esp+5Ch+var_38]
		mov	[edx], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_58], edx
		sub	eax, edx
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [ebx+50h]
		mov	eax, [esp+5Ch+var_24]
		mov	[ebp+0], eax
		cmp	esi, [esp+5Ch+var_24]
		jnz	short loc_6420C300

loc_6420C359:				; CODE XREF: _ignoreSectionProcessor+232j
		mov	esi, [esp+5Ch+var_20]

loc_6420C35D:				; CODE XREF: _ignoreSectionProcessor+95j
		mov	ecx, [esp+5Ch+arg_C]
		mov	eax, 23h
		cmp	dword ptr [ebx+1E0h], 2
		mov	[ecx], esi
		jz	loc_6420C290
		test	esi, esi
		jz	loc_6420C457
		mov	eax, [ebx+90h]
		lea	edx, [esp+5Ch+var_28]
		mov	ecx, [esp+5Ch+arg_8]
		mov	dword ptr [ebx+118h], offset _prologProcessor
		mov	[esp+5Ch+var_28], esi
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [eax]
		xor	ecx, ecx
		mov	edx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		setz	cl
		mov	[esp+5Ch+var_4C], ecx
		mov	ecx, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_50], ecx
		mov	ecx, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_5C], eax
		mov	eax, ebx
		mov	[esp+5Ch+var_54], ecx
		mov	ecx, esi
		call	_doProlog
		jmp	loc_6420C290
; ---------------------------------------------------------------------------
		align 10h

loc_6420C3F0:				; CODE XREF: _ignoreSectionProcessor:loc_6420C2A4j
					; DATA XREF: .rdata:off_6421D4F0o
		mov	[ebx+120h], esi	; jumptable 6420C2A4 case 4
		mov	eax, 4
		jmp	loc_6420C290
; ---------------------------------------------------------------------------

loc_6420C400:				; CODE XREF: _ignoreSectionProcessor:loc_6420C2A4j
					; DATA XREF: .rdata:off_6421D4F0o
		cmp	byte ptr [esp+5Ch+var_38], 0 ; jumptable 6420C2A4 case 2
		mov	eax, 6
		jz	loc_6420C290
		mov	eax, [esp+5Ch+arg_C]
		mov	[eax], ebp
		xor	eax, eax
		jmp	loc_6420C290
; ---------------------------------------------------------------------------
		align 10h

loc_6420C420:				; CODE XREF: _ignoreSectionProcessor:loc_6420C2A4j
					; DATA XREF: .rdata:off_6421D4F0o
		cmp	byte ptr [esp+5Ch+var_38], 0 ; jumptable 6420C2A4 cases	0,3
		mov	eax, 2
		jz	loc_6420C290
		mov	edx, [esp+5Ch+arg_C]
		xor	al, al
		mov	[edx], ebp
		jmp	loc_6420C290
; ---------------------------------------------------------------------------
		align 10h

loc_6420C440:				; CODE XREF: _ignoreSectionProcessor+A3j
		sub	esi, ebp
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+var_58], ebp
		mov	edx, [ebx+4]
		mov	[esp+5Ch+var_5C], edx
		call	eax
		jmp	loc_6420C359
; ---------------------------------------------------------------------------

loc_6420C457:				; CODE XREF: _ignoreSectionProcessor+157j
		xor	eax, eax
		jmp	loc_6420C290
_ignoreSectionProcessor	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_prologInitProcessor proc near		; DATA XREF: _parserInit+Ao

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		mov	eax, offset _XmlInitEncodingNS
		mov	[esp+3Ch+var_C], ebx
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_8], esi
		mov	esi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], edi
		mov	edi, [esp+3Ch+arg_8]
		cmp	byte ptr [ebx+0ECh], 0
		mov	edx, [ebx+0E8h]
		jnz	short loc_6420C494
		mov	eax, offset _XmlInitEncoding

loc_6420C494:				; CODE XREF: _prologInitProcessor+2Dj
		mov	[esp+3Ch+var_34], edx
		lea	edx, [ebx+90h]
		mov	[esp+3Ch+var_38], edx
		lea	edx, [ebx+94h]
		mov	[esp+3Ch+var_3C], edx
		call	eax ; _XmlInitEncodingNS
		test	eax, eax
		jz	short loc_6420C520

loc_6420C4B1:				; CODE XREF: _prologInitProcessor+CFj
		mov	eax, [ebx+90h]
		lea	edx, [esp+3Ch+var_10]
		mov	dword ptr [ebx+118h], offset _prologProcessor
		mov	[esp+3Ch+var_10], esi
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [eax]
		xor	ecx, ecx
		mov	edx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		mov	[esp+3Ch+var_3C], edi
		setz	cl
		mov	[esp+3Ch+var_2C], ecx
		mov	ecx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_38], eax
		mov	eax, ebx
		mov	[esp+3Ch+var_30], ecx
		mov	ecx, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_34], ecx
		mov	ecx, esi
		call	_doProlog
		mov	ebx, [esp+3Ch+var_C]
		mov	esi, [esp+3Ch+var_8]
		mov	edi, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6420C520:				; CODE XREF: _prologInitProcessor+4Fj
		mov	edx, [ebx+0E8h]
		mov	eax, ebx
		call	_handleUnknownEncoding
		test	eax, eax
		jz	short loc_6420C4B1
		mov	ebx, [esp+3Ch+var_C]
		mov	esi, [esp+3Ch+var_8]
		mov	edi, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
_prologInitProcessor endp

; ---------------------------------------------------------------------------
		jmp	short _externalParEntInitProcessor
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_externalParEntInitProcessor proc near	; CODE XREF: .text:6420C541j
					; DATA XREF: _XML_ExternalEntityParserCreate+6B7o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 5Ch
		mov	eax, offset _XmlInitEncodingNS
		mov	[esp+5Ch+var_10], ebx
		mov	ebx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_C], esi
		mov	esi, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_8], edi
		mov	edi, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_4], ebp
		mov	ebp, [esp+5Ch+arg_C]
		cmp	byte ptr [ebx+0ECh], 0
		mov	edx, [ebx+0E8h]
		jnz	short loc_6420C58C
		mov	eax, offset _XmlInitEncoding

loc_6420C58C:				; CODE XREF: _externalParEntInitProcessor+35j
		mov	[esp+5Ch+var_54], edx
		lea	edx, [ebx+90h]
		mov	[esp+5Ch+var_58], edx
		lea	edx, [ebx+94h]
		mov	[esp+5Ch+var_5C], edx
		call	eax ; _XmlInitEncodingNS
		test	eax, eax
		jz	loc_6420C680

loc_6420C5AD:				; CODE XREF: _externalParEntInitProcessor+141j
		mov	eax, [ebx+164h]
		mov	byte ptr [eax+83h], 1
		mov	edx, [ebx+114h]
		test	edx, edx
		jnz	loc_6420C660
		mov	eax, [ebx+90h]
		lea	edx, [esp+5Ch+var_20]
		mov	dword ptr [ebx+118h], offset _externalParEntProcessor
		mov	[esp+5Ch+var_30], edx
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_20], esi
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [eax]
		mov	edx, [esp+5Ch+var_30]
		cmp	eax, 0
		mov	ecx, eax
		jle	loc_6420C696
		cmp	eax, 0Eh
		jz	loc_6420C6B5

loc_6420C60D:				; CODE XREF: _externalParEntInitProcessor+15Dj
					; _externalParEntInitProcessor+182j
		xor	eax, eax
		mov	edx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		mov	dword ptr [ebx+118h], offset _prologProcessor
		mov	[esp+5Ch+var_58], ecx
		mov	ecx, esi
		setz	al
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_5C], edi
		mov	[esp+5Ch+var_54], eax
		mov	eax, ebx
		call	_doProlog

loc_6420C649:				; CODE XREF: _externalParEntInitProcessor+12Ej
					; _externalParEntInitProcessor+13Fj ...
		mov	ebx, [esp+5Ch+var_10]
		mov	esi, [esp+5Ch+var_C]
		mov	edi, [esp+5Ch+var_8]
		mov	ebp, [esp+5Ch+var_4]
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420C660:				; CODE XREF: _externalParEntInitProcessor+72j
		mov	dword ptr [ebx+118h], offset _entityValueInitProcessor
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebx
		call	_entityValueInitProcessor
		jmp	short loc_6420C649
; ---------------------------------------------------------------------------

loc_6420C680:				; CODE XREF: _externalParEntInitProcessor+57j
		mov	edx, [ebx+0E8h]
		mov	eax, ebx
		call	_handleUnknownEncoding
		test	eax, eax
		jnz	short loc_6420C649
		jmp	loc_6420C5AD
; ---------------------------------------------------------------------------

loc_6420C696:				; CODE XREF: _externalParEntInitProcessor+AEj
		jnz	short loc_6420C6D7

loc_6420C698:				; CODE XREF: _externalParEntInitProcessor+18Ej
		cmp	ecx, 0FFFFFFFFh
		mov	eax, 5
		jz	short loc_6420C649
		test	ecx, ecx
		mov	al, 4
		jz	short loc_6420C649
		cmp	ecx, 0FFFFFFFEh
		mov	al, 6
		jnz	loc_6420C60D
		jmp	short loc_6420C649
; ---------------------------------------------------------------------------

loc_6420C6B5:				; CODE XREF: _externalParEntInitProcessor+B7j
		mov	eax, [ebx+90h]
		mov	esi, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_5C], eax
		mov	[esp+5Ch+var_58], esi
		call	dword ptr [eax]
		mov	ecx, eax
		jmp	loc_6420C60D
; ---------------------------------------------------------------------------

loc_6420C6D7:				; CODE XREF: _externalParEntInitProcessor:loc_6420C696j
		cmp	byte ptr [ebx+1E4h], 0
		jnz	short loc_6420C698
		mov	[ebp+0], esi
		xor	eax, eax
		jmp	loc_6420C649
_externalParEntInitProcessor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_internalEntityProcessor proc near	; DATA XREF: _processInternalEntity+14Do

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 5Ch
		mov	eax, 17h
		mov	[esp+5Ch+var_10], ebx
		mov	ebx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_C], esi
		mov	[esp+5Ch+var_8], edi
		mov	[esp+5Ch+var_4], ebp
		mov	edi, [ebx+12Ch]
		test	edi, edi
		jz	loc_6420C7EA
		mov	esi, [edi+0Ch]
		mov	ebp, [esi+4]
		mov	ecx, [esi+0Ch]
		add	ecx, ebp
		add	ebp, [esi+8]
		cmp	byte ptr [esi+21h], 0
		jnz	loc_6420C800
		lea	eax, [esp+5Ch+var_20]
		mov	edx, [edi+10h]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], ecx
		mov	ecx, [ebx+0E4h]
		mov	[esp+5Ch+var_30], eax
		mov	eax, ebx
		call	_doContent

loc_6420C75D:				; CODE XREF: _internalEntityProcessor+163j
		test	eax, eax
		jnz	loc_6420C7EA
		mov	edx, [esp+5Ch+var_20]
		cmp	ebp, edx
		jz	short loc_6420C77A
		cmp	dword ptr [ebx+1E0h], 3
		jz	loc_6420C8C6

loc_6420C77A:				; CODE XREF: _internalEntityProcessor+7Bj
		mov	byte ptr [esi+20h], 0
		mov	eax, [edi+8]
		mov	[ebx+12Ch], eax
		mov	eax, [ebx+130h]
		mov	[edi+8], eax
		mov	[ebx+130h], edi
		cmp	byte ptr [esi+21h], 0
		jnz	loc_6420C858
		xor	edx, edx
		mov	ecx, [ebx+90h]
		cmp	dword ptr [ebx+1DCh], 0
		mov	dword ptr [ebx+118h], offset _contentProcessor
		setnz	dl
		xor	eax, eax
		cmp	byte ptr [ebx+1E4h], 0
		setz	al
		mov	[esp+5Ch+var_50], eax
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_54], eax
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_5C], eax
		mov	eax, ebx
		call	_doContent

loc_6420C7EA:				; CODE XREF: _internalEntityProcessor+24j
					; _internalEntityProcessor+6Fj	...
		mov	ebx, [esp+5Ch+var_10]
		mov	esi, [esp+5Ch+var_C]
		mov	edi, [esp+5Ch+var_8]
		mov	ebp, [esp+5Ch+var_4]
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420C800:				; CODE XREF: _internalEntityProcessor+3Cj
		mov	eax, [ebx+0E4h]
		lea	edx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_30], edx
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_34], ecx
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_5C], eax
		call	dword ptr [eax]
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_4C], 0
		mov	ecx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], ebp
		mov	[esp+5Ch+var_50], edx
		mov	edx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	eax, ebx
		mov	[esp+5Ch+var_54], edx
		mov	edx, [ebx+0E4h]
		call	_doProlog
		jmp	loc_6420C75D
; ---------------------------------------------------------------------------

loc_6420C858:				; CODE XREF: _internalEntityProcessor+AAj
		mov	edx, [esp+5Ch+var_30]
		mov	dword ptr [ebx+118h], offset _prologProcessor
		mov	eax, [ebx+90h]
		mov	ecx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_50], edx
		mov	edx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_5C], eax
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], edx
		call	dword ptr [eax]
		xor	ecx, ecx
		mov	edx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		setz	cl
		mov	[esp+5Ch+var_4C], ecx
		mov	ecx, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_50], ecx
		mov	ecx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		mov	eax, ebx
		mov	[esp+5Ch+var_54], ecx
		mov	ecx, [esp+5Ch+arg_4]
		call	_doProlog
		jmp	loc_6420C7EA
; ---------------------------------------------------------------------------

loc_6420C8C6:				; CODE XREF: _internalEntityProcessor+84j
		sub	edx, [esi+4]
		mov	[esi+0Ch], edx
		jmp	loc_6420C7EA
_internalEntityProcessor endp

; ---------------------------------------------------------------------------
		jmp	short _externalEntityInitProcessor3
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_externalEntityInitProcessor3 proc near	; CODE XREF: .text:6420C8D1j
					; _externalEntityInitProcessor2+6Bp ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		lea	edx, [esp+4Ch+var_20]
		mov	ebp, [esp+4Ch+arg_4]
		mov	esi, [esp+4Ch+arg_8]
		mov	edi, [esp+4Ch+arg_C]
		mov	eax, [ebx+90h]
		mov	[esp+4Ch+var_20], ebp
		mov	[ebx+120h], ebp
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], eax
		call	dword ptr [eax+4]
		mov	edx, [esp+4Ch+var_20]
		mov	[ebx+124h], edx
		cmp	eax, 0FFFFFFFFh
		jz	loc_6420CA00
		cmp	eax, 0Ch
		jz	loc_6420C9C0
		cmp	eax, 0FFFFFFFEh
		jz	short loc_6420C997

loc_6420C93E:				; CODE XREF: _externalEntityInitProcessor3+115j
		xor	eax, eax
		mov	ecx, [ebx+90h]
		mov	edx, 1
		cmp	byte ptr [ebx+1E4h], 0
		mov	dword ptr [ebx+118h], offset _externalEntityContentProcessor
		mov	dword ptr [ebx+138h], 1
		setz	al
		mov	[esp+4Ch+var_40], eax
		mov	eax, ebx
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebp
		call	_doContent
		test	eax, eax
		mov	[esp+4Ch+var_34], eax
		jz	loc_6420CA20

loc_6420C98B:				; CODE XREF: _externalEntityInitProcessor3+C6j
					; _externalEntityInitProcessor3+F7j ...
		mov	eax, [esp+4Ch+var_34]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6420C997:				; CODE XREF: _externalEntityInitProcessor3+5Cj
		mov	[esp+4Ch+var_34], 6
		cmp	byte ptr [ebx+1E4h], 0
		jnz	short loc_6420C98B

loc_6420C9A8:				; CODE XREF: _externalEntityInitProcessor3+12Fj
		mov	[edi], ebp
		mov	[esp+4Ch+var_34], 0
		mov	eax, [esp+4Ch+var_34]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420C9C0:				; CODE XREF: _externalEntityInitProcessor3+53j
		mov	[esp+4Ch+var_4C], edx
		mov	ecx, ebp
		mov	edx, 1
		mov	eax, ebx
		call	_processXmlDecl
		test	eax, eax
		mov	[esp+4Ch+var_34], eax
		jnz	short loc_6420C98B
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	loc_6420CB00
		cmp	eax, 3
		jz	loc_6420CAF0
		mov	ebp, [esp+4Ch+var_20]
		jmp	loc_6420C93E
; ---------------------------------------------------------------------------
		align 10h

loc_6420CA00:				; CODE XREF: _externalEntityInitProcessor3+4Aj
		mov	[esp+4Ch+var_34], 5
		cmp	byte ptr [ebx+1E4h], 0
		jz	short loc_6420C9A8
		mov	eax, [esp+4Ch+var_34]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420CA20:				; CODE XREF: _externalEntityInitProcessor3+A5j
		mov	esi, [ebx+16Ch]
		test	esi, esi
		jz	loc_6420C98B
		mov	eax, [esi+18h]
		mov	edx, [esi+24h]
		mov	ecx, [esi+4]
		add	eax, 1
		lea	edi, [edx+eax]
		cmp	edi, ecx
		jz	loc_6420C98B
		mov	[esp+4Ch+var_30], ebx
		mov	ebx, eax
		jmp	short loc_6420CAAA
; ---------------------------------------------------------------------------
		align 10h

loc_6420CA50:				; CODE XREF: _externalEntityInitProcessor3+1FBj
					; _externalEntityInitProcessor3+204j
		mov	edx, [esi+10h]
		test	edx, edx
		jz	short loc_6420CA60
		sub	edx, [esi+24h]
		lea	edx, [eax+edx]
		mov	[esi+10h], edx

loc_6420CA60:				; CODE XREF: _externalEntityInitProcessor3+175j
		mov	edx, [esp+4Ch+var_38]
		lea	edi, [eax+ebx]
		mov	ebp, [esi+8]
		mov	ecx, [esi+4]
		mov	[esi+24h], eax
		lea	edx, [eax+edx]
		mov	[esi+28h], edx

loc_6420CA76:				; CODE XREF: _externalEntityInitProcessor3+1DDj
		mov	[esp+4Ch+var_44], ebp ;	size_t
		mov	[esp+4Ch+var_48], ecx ;	void *
		mov	[esp+4Ch+var_4C], edi ;	void *
		call	_memcpy
		mov	[esi+4], edi
		mov	esi, [esi]
		test	esi, esi
		jz	loc_6420C98B
		mov	ebx, [esi+18h]
		mov	edx, [esi+24h]
		mov	ecx, [esi+4]
		add	ebx, 1
		lea	edi, [edx+ebx]
		cmp	edi, ecx
		jz	loc_6420C98B

loc_6420CAAA:				; CODE XREF: _externalEntityInitProcessor3+16Bj
		mov	ebp, [esi+8]
		lea	eax, [ebx+ebp]
		mov	[esp+4Ch+var_38], eax
		mov	eax, [esi+28h]
		sub	eax, edx
		cmp	[esp+4Ch+var_38], eax
		jle	short loc_6420CA76
		mov	eax, [esp+4Ch+var_38]
		mov	[esp+4Ch+var_4C], edx
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], eax
		call	dword ptr [edx+10h]
		test	eax, eax
		jz	short loc_6420CB10
		mov	edx, [esi+0Ch]
		cmp	edx, [esi+24h]
		jnz	loc_6420CA50
		mov	[esi+0Ch], eax
		jmp	loc_6420CA50
; ---------------------------------------------------------------------------
		align 10h

loc_6420CAF0:				; CODE XREF: _externalEntityInitProcessor3+10Bj
		mov	eax, [esp+4Ch+var_20]
		mov	[edi], eax
		jmp	loc_6420C98B
; ---------------------------------------------------------------------------
		align 10h

loc_6420CB00:				; CODE XREF: _externalEntityInitProcessor3+102j
		mov	[esp+4Ch+var_34], 23h
		jmp	loc_6420C98B
; ---------------------------------------------------------------------------
		align 10h

loc_6420CB10:				; CODE XREF: _externalEntityInitProcessor3+1F3j
		mov	[esp+4Ch+var_34], 1
		jmp	loc_6420C98B
_externalEntityInitProcessor3 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_externalEntityInitProcessor2 proc near	; DATA XREF: _externalEntityInitProcessor+63o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_0]
		lea	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_8], edi
		mov	edi, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_C]
		mov	eax, [esi+90h]
		mov	[esp+3Ch+var_20], ebx
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [eax+4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6420CBD8
		cmp	eax, 0Eh
		jz	short loc_6420CBC0
		cmp	eax, 0FFFFFFFEh
		jz	short loc_6420CBA4

loc_6420CB72:				; CODE XREF: _externalEntityInitProcessor2+A6j
					; _externalEntityInitProcessor2+AFj
		mov	dword ptr [esi+118h], offset _externalEntityInitProcessor3
		mov	[esp+3Ch+var_30], ebp
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	_externalEntityInitProcessor3

loc_6420CB90:				; CODE XREF: _externalEntityInitProcessor2+98j
					; _externalEntityInitProcessor2+B6j ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6420CBA4:				; CODE XREF: _externalEntityInitProcessor2+50j
		cmp	byte ptr [esi+1E4h], 0
		jz	short loc_6420CBD1
		mov	[esi+120h], ebx
		mov	eax, 6
		jmp	short loc_6420CB90
; ---------------------------------------------------------------------------
		align 10h

loc_6420CBC0:				; CODE XREF: _externalEntityInitProcessor2+4Bj
		mov	ebx, [esp+3Ch+var_20]
		cmp	ebx, edi
		jnz	short loc_6420CB72
		cmp	byte ptr [esi+1E4h], 0
		jnz	short loc_6420CB72

loc_6420CBD1:				; CODE XREF: _externalEntityInitProcessor2+8Bj
					; _externalEntityInitProcessor2+BFj
		mov	[ebp+0], ebx
		xor	eax, eax
		jmp	short loc_6420CB90
; ---------------------------------------------------------------------------

loc_6420CBD8:				; CODE XREF: _externalEntityInitProcessor2+46j
		cmp	byte ptr [esi+1E4h], 0
		jz	short loc_6420CBD1
		mov	[esi+120h], ebx
		mov	eax, 5
		jmp	short loc_6420CB90
_externalEntityInitProcessor2 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_externalEntityInitProcessor proc near	; DATA XREF: _XML_ExternalEntityParserCreate+7C7o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		mov	eax, offset _XmlInitEncodingNS
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_8], edi
		mov	edi, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_C]
		cmp	byte ptr [ebx+0ECh], 0
		mov	edx, [ebx+0E8h]
		jnz	short loc_6420CC2C
		mov	eax, offset _XmlInitEncoding

loc_6420CC2C:				; CODE XREF: _externalEntityInitProcessor+35j
		mov	[esp+3Ch+var_34], edx
		lea	edx, [ebx+90h]
		mov	[esp+3Ch+var_38], edx
		lea	edx, [ebx+94h]
		mov	[esp+3Ch+var_3C], edx
		call	eax ; _XmlInitEncodingNS
		test	eax, eax
		jz	short loc_6420CCA2

loc_6420CC49:				; CODE XREF: _externalEntityInitProcessor+C1j
		mov	eax, [ebx+90h]
		lea	edx, [esp+3Ch+var_20]
		mov	dword ptr [ebx+118h], offset _externalEntityInitProcessor2
		mov	[esp+3Ch+var_20], esi
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [eax+4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6420CCC7
		cmp	eax, 0Eh
		jz	short loc_6420CCE0
		cmp	eax, 0FFFFFFFEh
		jz	short loc_6420CD00

loc_6420CC82:				; CODE XREF: _externalEntityInitProcessor+F6j
					; _externalEntityInitProcessor+101j
		mov	dword ptr [ebx+118h], offset _externalEntityInitProcessor3
		mov	[esp+3Ch+var_30], ebp
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	_externalEntityInitProcessor3
		jmp	short loc_6420CCB3
; ---------------------------------------------------------------------------

loc_6420CCA2:				; CODE XREF: _externalEntityInitProcessor+57j
		mov	edx, [ebx+0E8h]
		mov	eax, ebx
		call	_handleUnknownEncoding
		test	eax, eax
		jz	short loc_6420CC49

loc_6420CCB3:				; CODE XREF: _externalEntityInitProcessor+B0j
					; _externalEntityInitProcessor+EBj ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6420CCC7:				; CODE XREF: _externalEntityInitProcessor+86j
		cmp	byte ptr [ebx+1E4h], 0
		jz	short loc_6420CD16
		mov	[ebx+120h], esi
		mov	eax, 5
		jmp	short loc_6420CCB3
; ---------------------------------------------------------------------------
		align 10h

loc_6420CCE0:				; CODE XREF: _externalEntityInitProcessor+8Bj
		mov	esi, [esp+3Ch+var_20]
		cmp	edi, esi
		jnz	short loc_6420CC82
		cmp	byte ptr [ebx+1E4h], 0
		mov	esi, edi
		jnz	short loc_6420CC82
		mov	[ebp+0], edi
		xor	eax, eax
		jmp	short loc_6420CCB3
; ---------------------------------------------------------------------------
		align 10h

loc_6420CD00:				; CODE XREF: _externalEntityInitProcessor+90j
		cmp	byte ptr [ebx+1E4h], 0
		jz	short loc_6420CD16
		mov	[ebx+120h], esi
		mov	eax, 6
		jmp	short loc_6420CCB3
; ---------------------------------------------------------------------------

loc_6420CD16:				; CODE XREF: _externalEntityInitProcessor+DEj
					; _externalEntityInitProcessor+117j
		mov	[ebp+0], esi
		xor	eax, eax
		jmp	short loc_6420CCB3
_externalEntityInitProcessor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_cdataSectionProcessor proc near	; DATA XREF: _doContent+98Co

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		xor	eax, eax
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		lea	ecx, [esp+3Ch+arg_4]
		mov	edi, [esp+3Ch+arg_8]
		mov	esi, [esp+3Ch+arg_C]
		cmp	byte ptr [ebx+1E4h], 0
		mov	edx, [ebx+90h]
		mov	[esp+3Ch+var_38], esi
		setz	al
		mov	[esp+3Ch+var_34], eax
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], edi
		call	_doCdataSection
		test	eax, eax
		mov	[esp+3Ch+var_24], eax
		jnz	short loc_6420CDB8
		mov	eax, [esp+3Ch+arg_4]
		test	eax, eax
		jz	short loc_6420CDB8
		mov	ecx, [ebx+1DCh]
		test	ecx, ecx
		jz	loc_6420CE90
		xor	edx, edx
		mov	ecx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		mov	dword ptr [ebx+118h], offset _externalEntityContentProcessor
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		setz	dl
		mov	[esp+3Ch+var_30], edx
		mov	edx, 1
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], edi
		call	_doContent
		test	eax, eax
		mov	[esp+3Ch+var_24], eax
		jz	short loc_6420CDC4

loc_6420CDB8:				; CODE XREF: _cdataSectionProcessor+41j
					; _cdataSectionProcessor+49j ...
		mov	eax, [esp+3Ch+var_24]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6420CDC4:				; CODE XREF: _cdataSectionProcessor+96j
		mov	esi, [ebx+16Ch]
		test	esi, esi
		jz	short loc_6420CDB8
		mov	eax, [esi+18h]
		mov	edx, [esi+24h]
		mov	ecx, [esi+4]
		add	eax, 1
		lea	edi, [edx+eax]
		cmp	edi, ecx
		jz	short loc_6420CDB8
		mov	[esp+3Ch+var_20], ebx
		mov	ebx, eax
		jmp	short loc_6420CE46
; ---------------------------------------------------------------------------
		align 10h

loc_6420CDF0:				; CODE XREF: _cdataSectionProcessor+15Bj
					; _cdataSectionProcessor+164j
		mov	edx, [esi+10h]
		test	edx, edx
		jz	short loc_6420CE00
		sub	edx, [esi+24h]
		lea	edx, [eax+edx]
		mov	[esi+10h], edx

loc_6420CE00:				; CODE XREF: _cdataSectionProcessor+D5j
		mov	edx, [esp+3Ch+var_28]
		lea	edi, [eax+ebx]
		mov	ebp, [esi+8]
		mov	ecx, [esi+4]
		mov	[esi+24h], eax
		lea	edx, [eax+edx]
		mov	[esi+28h], edx

loc_6420CE16:				; CODE XREF: _cdataSectionProcessor+139j
		mov	[esp+3Ch+var_34], ebp ;	size_t
		mov	[esp+3Ch+var_38], ecx ;	void *
		mov	[esp+3Ch+var_3C], edi ;	void *
		call	_memcpy
		mov	[esi+4], edi
		mov	esi, [esi]
		test	esi, esi
		jz	short loc_6420CDB8
		mov	ebx, [esi+18h]
		mov	edx, [esi+24h]
		mov	ecx, [esi+4]
		add	ebx, 1
		lea	edi, [edx+ebx]
		cmp	edi, ecx
		jz	loc_6420CDB8

loc_6420CE46:				; CODE XREF: _cdataSectionProcessor+C7j
		mov	ebp, [esi+8]
		lea	eax, [ebx+ebp]
		mov	[esp+3Ch+var_28], eax
		mov	eax, [esi+28h]
		sub	eax, edx
		cmp	[esp+3Ch+var_28], eax
		jle	short loc_6420CE16
		mov	ecx, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_3C], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_38], ecx
		call	dword ptr [edx+10h]
		test	eax, eax
		jz	loc_6420CFA0
		mov	edx, [esi+0Ch]
		cmp	edx, [esi+24h]
		jnz	loc_6420CDF0
		mov	[esi+0Ch], eax
		jmp	loc_6420CDF0
; ---------------------------------------------------------------------------
		align 10h

loc_6420CE90:				; CODE XREF: _cdataSectionProcessor+53j
		xor	edx, edx
		mov	ecx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		mov	dword ptr [ebx+118h], offset _contentProcessor
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		setz	dl
		mov	[esp+3Ch+var_30], edx
		xor	edx, edx
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], edi
		call	_doContent
		test	eax, eax
		mov	[esp+3Ch+var_24], eax
		jnz	loc_6420CDB8
		mov	esi, [ebx+16Ch]
		test	esi, esi
		jz	loc_6420CDB8
		mov	edx, [esi+18h]
		mov	eax, [esi+24h]
		lea	ecx, [edx+1]
		mov	edx, [esi+4]
		lea	edi, [eax+ecx]
		cmp	edi, edx
		jz	loc_6420CDB8
		mov	[esp+3Ch+var_20], ebx
		mov	ebx, ecx
		jmp	short loc_6420CF5A
; ---------------------------------------------------------------------------
		align 10h

loc_6420CF00:				; CODE XREF: _cdataSectionProcessor+26Bj
					; _cdataSectionProcessor+274j
		mov	edx, [esi+10h]
		test	edx, edx
		jz	short loc_6420CF10
		sub	edx, [esi+24h]
		lea	edx, [eax+edx]
		mov	[esi+10h], edx

loc_6420CF10:				; CODE XREF: _cdataSectionProcessor+1E5j
		mov	edx, [esp+3Ch+var_28]
		lea	edi, [eax+ebx]
		mov	ebp, [esi+8]
		mov	[esi+24h], eax
		lea	edx, [eax+edx]
		mov	[esi+28h], edx
		mov	edx, [esi+4]

loc_6420CF26:				; CODE XREF: _cdataSectionProcessor+24Dj
		mov	[esp+3Ch+var_34], ebp ;	size_t
		mov	[esp+3Ch+var_38], edx ;	void *
		mov	[esp+3Ch+var_3C], edi ;	void *
		call	_memcpy
		mov	[esi+4], edi
		mov	esi, [esi]
		test	esi, esi
		jz	loc_6420CDB8
		mov	ebx, [esi+18h]
		mov	eax, [esi+24h]
		mov	edx, [esi+4]
		add	ebx, 1
		lea	edi, [eax+ebx]
		cmp	edi, edx
		jz	loc_6420CDB8

loc_6420CF5A:				; CODE XREF: _cdataSectionProcessor+1DBj
		mov	ebp, [esi+8]
		lea	ecx, [ebx+ebp]
		mov	[esp+3Ch+var_28], ecx
		mov	ecx, [esi+28h]
		sub	ecx, eax
		cmp	[esp+3Ch+var_28], ecx
		jle	short loc_6420CF26
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_38], edx
		call	dword ptr [ecx+10h]
		test	eax, eax
		jz	short loc_6420CFA0
		mov	edx, [esi+0Ch]
		cmp	edx, [esi+24h]
		jnz	loc_6420CF00
		mov	[esi+0Ch], eax
		jmp	loc_6420CF00
; ---------------------------------------------------------------------------
		align 10h

loc_6420CFA0:				; CODE XREF: _cdataSectionProcessor+14Fj
					; _cdataSectionProcessor+263j
		mov	[esp+3Ch+var_24], 1
		jmp	loc_6420CDB8
_cdataSectionProcessor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_prolog0	proc near		; DATA XREF: _XmlPrologStateInit+4o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		sub	esp, 18h
		mov	edx, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_10]
		lea	eax, [edx-0Bh]
		cmp	eax, 12h	; switch 19 cases
		jbe	short loc_6420CFE6

loc_6420CFC8:				; CODE XREF: _prolog0:loc_6420CFE6j
					; DATA XREF: .rdata:off_6421DD60o
		cmp	edx, 1Ch	; jumptable 6420CFE6 default case
		jnz	short loc_6420CFD9
		mov	edx, [ebx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short loc_6420CFF8

loc_6420CFD9:				; CODE XREF: _prolog0+1Bj _prolog0+76j
		mov	dword ptr [ebx], offset	_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6420CFF8
; ---------------------------------------------------------------------------

loc_6420CFE6:				; CODE XREF: _prolog0+16j
		jmp	ds:off_6421DD60[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420CFF0:				; CODE XREF: _prolog0:loc_6420CFE6j
					; DATA XREF: .rdata:off_6421DD60o
		mov	dword ptr [ebx], offset	_prolog1 ; jumptable 6420CFE6 case 4

loc_6420CFF6:				; CODE XREF: _prolog0:loc_6420CFE6j
					; DATA XREF: .rdata:off_6421DD60o
		xor	eax, eax	; jumptable 6420CFE6 case 3

loc_6420CFF8:				; CODE XREF: _prolog0+27j _prolog0+34j ...
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D000:				; CODE XREF: _prolog0:loc_6420CFE6j
					; DATA XREF: .rdata:off_6421DD60o
		mov	eax, [esp+1Ch+arg_C] ; jumptable 6420CFE6 case 5
		mov	[esp+1Ch+var_10], offset _KW_DOCTYPE ; "DOCTYPE"
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_8]
		mov	edx, [ecx+44h]
		mov	[esp+1Ch+var_1C], ecx
		lea	eax, [eax+edx*2]
		mov	[esp+1Ch+var_18], eax
		call	dword ptr [ecx+1Ch]
		test	eax, eax
		jz	short loc_6420CFD9
		mov	dword ptr [ebx], offset	_doctype0
		mov	eax, 3
		jmp	short loc_6420CFF8
; ---------------------------------------------------------------------------

loc_6420D035:				; CODE XREF: _prolog0:loc_6420CFE6j
					; DATA XREF: .rdata:off_6421DD60o
		mov	dword ptr [ebx], offset	_error ; jumptable 6420CFE6 case 18
		mov	eax, 2
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420D045:				; CODE XREF: _prolog0:loc_6420CFE6j
					; DATA XREF: .rdata:off_6421DD60o
		mov	dword ptr [ebx], offset	_prolog1 ; jumptable 6420CFE6 case 0
		mov	eax, 37h
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420D055:				; CODE XREF: _prolog0:loc_6420CFE6j
					; DATA XREF: .rdata:off_6421DD60o
		mov	dword ptr [ebx], offset	_prolog1 ; jumptable 6420CFE6 case 1
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420D065:				; CODE XREF: _prolog0:loc_6420CFE6j
					; DATA XREF: .rdata:off_6421DD60o
		mov	dword ptr [ebx], offset	_prolog1 ; jumptable 6420CFE6 case 2
		mov	eax, 38h
		add	esp, 18h
		pop	ebx
		retn
_prolog0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_prolog1	proc near		; DATA XREF: _prolog0:loc_6420CFF0o
					; _prolog0:loc_6420D045o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		sub	esp, 18h
		mov	edx, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_10]
		lea	eax, [edx-0Bh]
		cmp	eax, 12h	; switch 19 cases
		jbe	short loc_6420D0B6

loc_6420D098:				; CODE XREF: _prolog1:loc_6420D0B6j
					; DATA XREF: .rdata:off_6421DDACo
		cmp	edx, 1Ch	; jumptable 6420D0B6 default case
		jnz	loc_6420D130
		mov	ecx, [ebx+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jnz	loc_6420D130
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420D0B6:				; CODE XREF: _prolog1+16j
		jmp	ds:off_6421DDAC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420D0C0:				; CODE XREF: _prolog1:loc_6420D0B6j
					; DATA XREF: .rdata:off_6421DDACo
		mov	eax, 37h	; jumptable 6420D0B6 case 0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D0D0:				; CODE XREF: _prolog1:loc_6420D0B6j
					; DATA XREF: .rdata:off_6421DDACo
		mov	eax, 38h	; jumptable 6420D0B6 case 2
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D0E0:				; CODE XREF: _prolog1:loc_6420D0B6j
					; DATA XREF: .rdata:off_6421DDACo
		mov	dword ptr [ebx], offset	_error ; jumptable 6420D0B6 case 18
		mov	eax, 2
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420D0F0:				; CODE XREF: _prolog1:loc_6420D0B6j
					; DATA XREF: .rdata:off_6421DDACo
		xor	eax, eax	; jumptable 6420D0B6 cases 3,4
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420D0F7:				; CODE XREF: _prolog1:loc_6420D0B6j
					; DATA XREF: .rdata:off_6421DDACo
		mov	eax, [esp+1Ch+arg_C] ; jumptable 6420D0B6 case 5
		mov	[esp+1Ch+var_10], offset _KW_DOCTYPE ; "DOCTYPE"
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_8]
		mov	edx, [ecx+44h]
		mov	[esp+1Ch+var_1C], ecx
		lea	eax, [eax+edx*2]
		mov	[esp+1Ch+var_18], eax
		call	dword ptr [ecx+1Ch]
		test	eax, eax
		jz	short loc_6420D130
		mov	dword ptr [ebx], offset	_doctype0
		mov	eax, 3
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D130:				; CODE XREF: _prolog1+1Bj _prolog1+2Bj ...
		mov	dword ptr [ebx], offset	_error
		mov	eax, 0FFFFFFFFh
		add	esp, 18h
		pop	ebx
		retn
_prolog1	endp


; =============== S U B	R O U T	I N E =======================================


_prolog2	proc near		; DATA XREF: _doctype1:loc_6420D2A7o
					; _doctype4:loc_6420D3B0o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 38h
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Dh
		jz	short locret_6420D193
		jle	short loc_6420D170
		xor	eax, eax
		cmp	edx, 0Fh
		jz	short locret_6420D193
		cmp	edx, 1Dh
		xchg	ax, ax
		jnz	short loc_6420D177
		mov	dword ptr [ecx], offset	_error
		mov	al, 2
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D170:				; CODE XREF: _prolog2+12j
		cmp	edx, 0Bh
		mov	al, 37h
		jz	short locret_6420D195

loc_6420D177:				; CODE XREF: _prolog2+20j
		cmp	edx, 1Ch
		jnz	short loc_6420D188
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D193

loc_6420D188:				; CODE XREF: _prolog2+3Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D193:			; CODE XREF: _prolog2+10j _prolog2+19j ...
		rep retn
; ---------------------------------------------------------------------------

locret_6420D195:			; CODE XREF: _prolog2+35j
		rep retn
_prolog2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doctype0	proc near		; DATA XREF: _prolog0+78o _prolog1+9Fo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 12h
		jz	short loc_6420D1E0
		cmp	edx, 29h
		jz	short loc_6420D1E0
		cmp	edx, 0Fh
		mov	eax, 3
		jz	short locret_6420D1F0
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420D1CE
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D1D9

loc_6420D1CE:				; CODE XREF: _doctype0+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D1D9:			; CODE XREF: _doctype0+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D1E0:				; CODE XREF: _doctype0+Bj
					; _doctype0+10j
		mov	dword ptr [ecx], offset	_doctype1
		mov	eax, 4
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420D1F0:			; CODE XREF: _doctype0+1Aj
		rep retn
_doctype0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doctype1	proc near		; DATA XREF: _doctype0:loc_6420D1E0o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		cmp	edx, 11h
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_C]
		jz	short loc_6420D2A7
		jle	short loc_6420D257
		cmp	edx, 12h
		jz	short loc_6420D280
		cmp	edx, 19h
		jnz	short loc_6420D261
		mov	dword ptr [ebx], offset	_internalSubset
		mov	eax, 7

loc_6420D243:				; CODE XREF: _doctype1+5Fj
					; _doctype1+70j ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420D257:				; CODE XREF: _doctype1+2Cj
		cmp	edx, 0Fh
		mov	eax, 3
		jz	short loc_6420D243

loc_6420D261:				; CODE XREF: _doctype1+36j
		cmp	edx, 1Ch
		jnz	short loc_6420D272
		mov	ecx, [ebx+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	short loc_6420D243

loc_6420D272:				; CODE XREF: _doctype1+64j
					; _doctype1+CCj
		mov	dword ptr [ebx], offset	_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6420D243
; ---------------------------------------------------------------------------
		align 10h

loc_6420D280:				; CODE XREF: _doctype1+31j
		mov	[esp+2Ch+var_20], offset _KW_SYSTEM ; "SYSTEM"
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420D2B4
		mov	dword ptr [ebx], offset	_doctype3
		mov	eax, 3
		jmp	short loc_6420D243
; ---------------------------------------------------------------------------

loc_6420D2A7:				; CODE XREF: _doctype1+2Aj
		mov	dword ptr [ebx], offset	_prolog2
		mov	eax, 8
		jmp	short loc_6420D243
; ---------------------------------------------------------------------------

loc_6420D2B4:				; CODE XREF: _doctype1+98j
		mov	[esp+2Ch+var_20], offset _KW_PUBLIC ; "PUBLIC"
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420D272
		mov	dword ptr [ebx], offset	_doctype2
		mov	eax, 3
		jmp	loc_6420D243
_doctype1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doctype2	proc near		; DATA XREF: _doctype1+CEo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 3
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420D313
		cmp	edx, 1Bh
		jz	short loc_6420D315
		cmp	edx, 1Ch
		jnz	short loc_6420D308
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D313

loc_6420D308:				; CODE XREF: _doctype2+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D313:			; CODE XREF: _doctype2+10j
					; _doctype2+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420D315:				; CODE XREF: _doctype2+15j
		mov	dword ptr [ecx], offset	_doctype3
		mov	al, 6
		retn
_doctype2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doctype3	proc near		; DATA XREF: _doctype1+9Ao
					; _doctype2:loc_6420D315o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 3
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420D353
		cmp	edx, 1Bh
		jz	short loc_6420D355
		cmp	edx, 1Ch
		jnz	short loc_6420D348
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D353

loc_6420D348:				; CODE XREF: _doctype3+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D353:			; CODE XREF: _doctype3+10j
					; _doctype3+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420D355:				; CODE XREF: _doctype3+15j
		mov	dword ptr [ecx], offset	_doctype4
		mov	al, 5
		retn
_doctype3	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doctype4	proc near		; DATA XREF: _doctype3:loc_6420D355o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 11h
		jz	short loc_6420D3B0
		cmp	edx, 19h
		jz	short loc_6420D3A0
		cmp	edx, 0Fh
		mov	eax, 3
		jz	short locret_6420D3C0
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420D38E
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D399

loc_6420D38E:				; CODE XREF: _doctype4+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D399:			; CODE XREF: _doctype4+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D3A0:				; CODE XREF: _doctype4+10j
		mov	dword ptr [ecx], offset	_internalSubset
		mov	eax, 7
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D3B0:				; CODE XREF: _doctype4+Bj
		mov	dword ptr [ecx], offset	_prolog2
		mov	eax, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420D3C0:			; CODE XREF: _doctype4+1Aj
		rep retn
_doctype4	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_doctype5	proc near		; DATA XREF: _internalSubset:loc_6420D467o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 3
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420D403
		cmp	edx, 11h
		jz	short loc_6420D405
		cmp	edx, 1Ch
		jnz	short loc_6420D3F8
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D403

loc_6420D3F8:				; CODE XREF: _doctype5+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D403:			; CODE XREF: _doctype5+10j
					; _doctype5+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420D405:				; CODE XREF: _doctype5+15j
		mov	dword ptr [ecx], offset	_prolog2
		mov	al, 8
		retn
_doctype5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_internalSubset	proc near		; CODE XREF: _externalSubset1+4Cj
					; _externalSubset0+5Cj
					; DATA XREF: ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		lea	eax, [edx+4]
		cmp	eax, 20h	; switch 33 cases
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_C]
		jbe	short loc_6420D460

loc_6420D43F:				; CODE XREF: _internalSubset:loc_6420D460j
					; DATA XREF: .rdata:off_6421DDF8o
		cmp	edx, 1Ch	; jumptable 6420D460 default case
		jnz	short loc_6420D450
		mov	ecx, [esi+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	short loc_6420D472

loc_6420D450:				; CODE XREF: _internalSubset+32j
					; _internalSubset+141j
		mov	dword ptr [esi], offset	_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6420D472
; ---------------------------------------------------------------------------
		align 10h

loc_6420D460:				; CODE XREF: _internalSubset+2Dj
		jmp	ds:off_6421DDF8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420D467:				; CODE XREF: _internalSubset:loc_6420D460j
					; DATA XREF: .rdata:off_6421DDF8o
		mov	dword ptr [esi], offset	_doctype5 ; jumptable 6420D460 case 30
		mov	eax, 3

loc_6420D472:				; CODE XREF: _internalSubset+3Ej
					; _internalSubset+4Bj ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420D486:				; CODE XREF: _internalSubset:loc_6420D460j
					; DATA XREF: .rdata:off_6421DDF8o
		mov	eax, 3Ch	; jumptable 6420D460 case 32
		jmp	short loc_6420D472
; ---------------------------------------------------------------------------
		align 10h

loc_6420D490:				; CODE XREF: _internalSubset:loc_6420D460j
					; DATA XREF: .rdata:off_6421DDF8o
		mov	eax, 37h	; jumptable 6420D460 case 15
		jmp	short loc_6420D472
; ---------------------------------------------------------------------------

loc_6420D497:				; CODE XREF: _internalSubset:loc_6420D460j
					; DATA XREF: .rdata:off_6421DDF8o
		mov	eax, 38h	; jumptable 6420D460 case 17
		lea	esi, [esi+0]
		jmp	short loc_6420D472
; ---------------------------------------------------------------------------

loc_6420D4A2:				; CODE XREF: _internalSubset:loc_6420D460j
					; DATA XREF: .rdata:off_6421DDF8o
		xor	eax, eax	; jumptable 6420D460 cases 0,19
		jmp	short loc_6420D472
; ---------------------------------------------------------------------------

loc_6420D4A6:				; CODE XREF: _internalSubset:loc_6420D460j
					; DATA XREF: .rdata:off_6421DDF8o
		mov	[esp+2Ch+var_20], offset _KW_ENTITY ; jumptable	6420D460 case 20
		mov	[esp+2Ch+var_24], ebp
		mov	eax, [ebx+44h]
		mov	[esp+2Ch+var_2C], ebx
		lea	eax, [edi+eax*2]
		mov	[esp+2Ch+var_28], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	short loc_6420D4D3
		mov	dword ptr [esi], offset	_entity0
		mov	eax, 0Bh
		jmp	short loc_6420D472
; ---------------------------------------------------------------------------

loc_6420D4D3:				; CODE XREF: _internalSubset+B4j
		mov	[esp+2Ch+var_20], offset _KW_ATTLIST ; "ATTLIST"
		mov	[esp+2Ch+var_24], ebp
		mov	eax, [ebx+44h]
		mov	[esp+2Ch+var_2C], ebx
		lea	eax, [edi+eax*2]
		mov	[esp+2Ch+var_28], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	short loc_6420D503
		mov	dword ptr [esi], offset	_attlist0
		mov	eax, 21h
		jmp	loc_6420D472
; ---------------------------------------------------------------------------

loc_6420D503:				; CODE XREF: _internalSubset+E1j
		mov	[esp+2Ch+var_20], offset _KW_ELEMENT ; "ELEMENT"
		mov	[esp+2Ch+var_24], ebp
		mov	eax, [ebx+44h]
		mov	[esp+2Ch+var_2C], ebx
		lea	eax, [edi+eax*2]
		mov	[esp+2Ch+var_28], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	short loc_6420D533
		mov	dword ptr [esi], offset	_element0
		mov	eax, 27h
		jmp	loc_6420D472
; ---------------------------------------------------------------------------

loc_6420D533:				; CODE XREF: _internalSubset+111j
		mov	[esp+2Ch+var_20], offset _KW_NOTATION ;	"NOTATION"
		mov	[esp+2Ch+var_24], ebp
		mov	eax, [ebx+44h]
		mov	[esp+2Ch+var_2C], ebx
		lea	eax, [edi+eax*2]
		mov	[esp+2Ch+var_28], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	loc_6420D450
		mov	dword ptr [esi], offset	_notation0
		mov	eax, 11h
		jmp	loc_6420D472
_internalSubset	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_externalSubset1 proc near		; DATA XREF: _entity5+83o
					; _entity10+41o ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_C], ebx
		mov	ecx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	ebx, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_4], edi
		mov	esi, [esp+0Ch+arg_C]
		lea	eax, [edx+4]
		mov	edi, [esp+0Ch+arg_10]
		cmp	eax, 26h	; switch 39 cases
		jbe	short loc_6420D5C1

loc_6420D59A:				; CODE XREF: _externalSubset1:loc_6420D5C1j
					; DATA XREF: .rdata:off_6421DE7Co
		mov	[esp+0Ch+arg_10], edi ;	jumptable 6420D5C1 default case
		mov	edi, [esp+0Ch+var_4]
		mov	[esp+0Ch+arg_C], esi
		mov	esi, [esp+0Ch+var_8]
		mov	[esp+0Ch+arg_8], ebx
		mov	ebx, [esp+0Ch+var_C]
		mov	[esp+0Ch+arg_4], edx
		mov	[esp+0Ch+arg_0], ecx
		add	esp, 0Ch
		jmp	_internalSubset
; ---------------------------------------------------------------------------

loc_6420D5C1:				; CODE XREF: _externalSubset1+28j
		jmp	ds:off_6421DE7C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420D5C8:				; CODE XREF: _externalSubset1:loc_6420D5C1j
					; DATA XREF: .rdata:off_6421DE7Co
		mov	ebx, [ecx+0Ch]	; jumptable 6420D5C1 case 0
		test	ebx, ebx
		jnz	short loc_6420D5E0 ; jumptable 6420D5C1	case 30

loc_6420D5CF:				; CODE XREF: _externalSubset1:loc_6420D5C1j
					; DATA XREF: .rdata:off_6421DE7Co
		xor	eax, eax	; jumptable 6420D5C1 case 19

loc_6420D5D1:				; CODE XREF: _externalSubset1+9Fj
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6420D5E0:				; CODE XREF: _externalSubset1:loc_6420D5C1j
					; _externalSubset1+5Dj	...
		mov	dword ptr [ecx], offset	_error ; jumptable 6420D5C1 case 30
		mov	eax, 0FFFFFFFFh
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D600:				; CODE XREF: _externalSubset1:loc_6420D5C1j
					; DATA XREF: .rdata:off_6421DE7Co
		mov	eax, [ecx+0Ch]	; jumptable 6420D5C1 case 38
		test	eax, eax
		jz	short loc_6420D5E0 ; jumptable 6420D5C1	case 30
		sub	eax, 1
		mov	[ecx+0Ch], eax
		xor	eax, eax
		jmp	short loc_6420D5D1
; ---------------------------------------------------------------------------

loc_6420D611:				; CODE XREF: _externalSubset1:loc_6420D5C1j
					; DATA XREF: .rdata:off_6421DE7Co
		mov	dword ptr [ecx], offset	_condSect0 ; jumptable 6420D5C1	case 37
		xor	eax, eax
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
_externalSubset1 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity0	proc near		; DATA XREF: _internalSubset+B6o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 12h
		jz	short loc_6420D680
		cmp	edx, 16h
		jz	short loc_6420D670
		cmp	edx, 0Fh
		mov	eax, 0Bh
		jz	short locret_6420D690
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420D65E
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D669

loc_6420D65E:				; CODE XREF: _entity0+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D669:			; CODE XREF: _entity0+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D670:				; CODE XREF: _entity0+10j
		mov	dword ptr [ecx], offset	_entity1
		mov	eax, 0Bh
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420D680:				; CODE XREF: _entity0+Bj
		mov	dword ptr [ecx], offset	_entity2
		mov	eax, 9
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420D690:			; CODE XREF: _entity0+1Aj
		rep retn
_entity0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity1	proc near		; DATA XREF: _entity0:loc_6420D670o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 0Bh
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420D6D3
		cmp	edx, 12h
		jz	short loc_6420D6D5
		cmp	edx, 1Ch
		jnz	short loc_6420D6C8
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D6D3

loc_6420D6C8:				; CODE XREF: _entity1+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D6D3:			; CODE XREF: _entity1+10j _entity1+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420D6D5:				; CODE XREF: _entity1+15j
		mov	dword ptr [ecx], offset	_entity7
		mov	al, 0Ah
		retn
_entity1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity2	proc near		; DATA XREF: _entity0:loc_6420D680o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		cmp	edx, 12h
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_C]
		jz	short loc_6420D768
		cmp	edx, 1Bh
		jz	short loc_6420D754
		cmp	edx, 0Fh
		mov	eax, 0Bh
		jz	short loc_6420D740
		cmp	edx, 1Ch
		xchg	ax, ax
		jnz	short loc_6420D72E
		mov	ecx, [ebx+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	short loc_6420D740

loc_6420D72E:				; CODE XREF: _entity2+40j _entity2+C8j
		mov	dword ptr [ebx], offset	_error
		mov	eax, 0FFFFFFFFh
		lea	esi, [esi+0]

loc_6420D740:				; CODE XREF: _entity2+39j _entity2+4Cj ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420D754:				; CODE XREF: _entity2+2Fj
		mov	dword ptr [ebx], offset	_declClose
		mov	eax, 0Ch
		mov	dword ptr [ebx+8], 0Bh
		jmp	short loc_6420D740
; ---------------------------------------------------------------------------

loc_6420D768:				; CODE XREF: _entity2+2Aj
		mov	[esp+2Ch+var_20], offset _KW_SYSTEM ; "SYSTEM"
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420D790
		mov	dword ptr [ebx], offset	_entity4
		mov	eax, 0Bh
		jmp	short loc_6420D740
; ---------------------------------------------------------------------------
		align 10h

loc_6420D790:				; CODE XREF: _entity2+A0j
		mov	[esp+2Ch+var_20], offset _KW_PUBLIC ; "PUBLIC"
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420D72E
		mov	dword ptr [ebx], offset	_entity3
		mov	eax, 0Bh
		jmp	short loc_6420D740
_entity2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity3	proc near		; DATA XREF: _entity2+CAo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 0Bh
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420D7F3
		cmp	edx, 1Bh
		jz	short loc_6420D7F5
		cmp	edx, 1Ch
		jnz	short loc_6420D7E8
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D7F3

loc_6420D7E8:				; CODE XREF: _entity3+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D7F3:			; CODE XREF: _entity3+10j _entity3+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420D7F5:				; CODE XREF: _entity3+15j
		mov	dword ptr [ecx], offset	_entity4
		mov	al, 0Eh
		retn
_entity3	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity4	proc near		; DATA XREF: _entity2+A2o
					; _entity3:loc_6420D7F5o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 0Bh
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420D833
		cmp	edx, 1Bh
		jz	short loc_6420D835
		cmp	edx, 1Ch
		jnz	short loc_6420D828
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D833

loc_6420D828:				; CODE XREF: _entity4+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D833:			; CODE XREF: _entity4+10j _entity4+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420D835:				; CODE XREF: _entity4+15j
		mov	dword ptr [ecx], offset	_entity5
		mov	al, 0Dh
		retn
_entity4	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity5	proc near		; DATA XREF: _entity4:loc_6420D835o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		sub	esp, 18h
		mov	edx, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [esp+1Ch+arg_10]
		cmp	edx, 11h
		jz	short loc_6420D8B7
		cmp	edx, 12h
		jz	short loc_6420D885
		cmp	edx, 0Fh
		mov	eax, 0Bh
		jz	short loc_6420D880
		cmp	edx, 1Ch
		jnz	short loc_6420D875
		mov	ecx, [ebx+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	short loc_6420D880

loc_6420D875:				; CODE XREF: _entity5+27j _entity5+65j
		mov	dword ptr [ebx], offset	_error
		mov	eax, 0FFFFFFFFh

loc_6420D880:				; CODE XREF: _entity5+22j _entity5+33j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420D885:				; CODE XREF: _entity5+18j
		mov	edx, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_10], offset _KW_NDATA ; "NDATA"
		mov	[esp+1Ch+var_1C], eax
		mov	[esp+1Ch+var_14], edx
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], edx
		call	dword ptr [eax+1Ch]
		test	eax, eax
		jz	short loc_6420D875
		mov	dword ptr [ebx], offset	_entity6
		mov	eax, 0Bh
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420D8B7:				; CODE XREF: _entity5+13j
		mov	edx, [ebx+10h]
		mov	eax, offset _internalSubset
		test	edx, edx
		jnz	short loc_6420D8C8
		mov	eax, offset _externalSubset1

loc_6420D8C8:				; CODE XREF: _entity5+81j
		mov	[ebx], eax
		mov	eax, 0Fh
		add	esp, 18h
		pop	ebx
		retn
_entity5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity6	proc near		; DATA XREF: _entity5+67o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 0Bh
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420D913
		cmp	edx, 12h
		jz	short loc_6420D915
		cmp	edx, 1Ch
		jnz	short loc_6420D908
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420D913

loc_6420D908:				; CODE XREF: _entity6+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420D913:			; CODE XREF: _entity6+10j _entity6+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420D915:				; CODE XREF: _entity6+15j
		mov	dword ptr [ecx], offset	_declClose
		mov	al, 10h
		mov	dword ptr [ecx+8], 0Bh
		retn
_entity6	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity7	proc near		; DATA XREF: _entity1:loc_6420D6D5o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		cmp	edx, 12h
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_C]
		jz	short loc_6420D9B8
		cmp	edx, 1Bh
		jz	short loc_6420D9A4
		cmp	edx, 0Fh
		mov	eax, 0Bh
		jz	short loc_6420D990
		cmp	edx, 1Ch
		xchg	ax, ax
		jnz	short loc_6420D97E
		mov	ecx, [ebx+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	short loc_6420D990

loc_6420D97E:				; CODE XREF: _entity7+40j _entity7+C8j
		mov	dword ptr [ebx], offset	_error
		mov	eax, 0FFFFFFFFh
		lea	esi, [esi+0]

loc_6420D990:				; CODE XREF: _entity7+39j _entity7+4Cj ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420D9A4:				; CODE XREF: _entity7+2Fj
		mov	dword ptr [ebx], offset	_declClose
		mov	eax, 0Ch
		mov	dword ptr [ebx+8], 0Bh
		jmp	short loc_6420D990
; ---------------------------------------------------------------------------

loc_6420D9B8:				; CODE XREF: _entity7+2Aj
		mov	[esp+2Ch+var_20], offset _KW_SYSTEM ; "SYSTEM"
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420D9E0
		mov	dword ptr [ebx], offset	_entity9
		mov	eax, 0Bh
		jmp	short loc_6420D990
; ---------------------------------------------------------------------------
		align 10h

loc_6420D9E0:				; CODE XREF: _entity7+A0j
		mov	[esp+2Ch+var_20], offset _KW_PUBLIC ; "PUBLIC"
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420D97E
		mov	dword ptr [ebx], offset	_entity8
		mov	eax, 0Bh
		jmp	short loc_6420D990
_entity7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity8	proc near		; DATA XREF: _entity7+CAo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 0Bh
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420DA43
		cmp	edx, 1Bh
		jz	short loc_6420DA45
		cmp	edx, 1Ch
		jnz	short loc_6420DA38
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DA43

loc_6420DA38:				; CODE XREF: _entity8+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DA43:			; CODE XREF: _entity8+10j _entity8+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420DA45:				; CODE XREF: _entity8+15j
		mov	dword ptr [ecx], offset	_entity9
		mov	al, 0Eh
		retn
_entity8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity9	proc near		; DATA XREF: _entity7+A2o
					; _entity8:loc_6420DA45o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 0Bh
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420DA83
		cmp	edx, 1Bh
		jz	short loc_6420DA85
		cmp	edx, 1Ch
		jnz	short loc_6420DA78
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DA83

loc_6420DA78:				; CODE XREF: _entity9+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DA83:			; CODE XREF: _entity9+10j _entity9+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420DA85:				; CODE XREF: _entity9+15j
		mov	dword ptr [ecx], offset	_entity10
		mov	al, 0Dh
		retn
_entity9	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_entity10	proc near		; DATA XREF: _entity9:loc_6420DA85o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 0Bh
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420DAC3
		cmp	edx, 11h
		jz	short loc_6420DAC5
		cmp	edx, 1Ch
		jnz	short loc_6420DAB8
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DAC3

loc_6420DAB8:				; CODE XREF: _entity10+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DAC3:			; CODE XREF: _entity10+10j
					; _entity10+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420DAC5:				; CODE XREF: _entity10+15j
		mov	edx, [ecx+10h]
		mov	eax, offset _internalSubset
		test	edx, edx
		jnz	short loc_6420DAD6
		mov	eax, offset _externalSubset1

loc_6420DAD6:				; CODE XREF: _entity10+3Fj
		mov	[ecx], eax
		mov	eax, 0Fh
		retn
_entity10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_notation0	proc near		; DATA XREF: _internalSubset+147o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 11h
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420DB13
		cmp	edx, 12h
		jz	short loc_6420DB15
		cmp	edx, 1Ch
		jnz	short loc_6420DB08
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DB13

loc_6420DB08:				; CODE XREF: _notation0+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DB13:			; CODE XREF: _notation0+10j
					; _notation0+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420DB15:				; CODE XREF: _notation0+15j
		mov	dword ptr [ecx], offset	_notation1
		mov	al, 12h
		retn
_notation0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_notation1	proc near		; DATA XREF: _notation0:loc_6420DB15o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, 11h
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_0]
		cmp	eax, 0Fh
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		jz	short loc_6420DB6E
		cmp	eax, 12h
		jz	short loc_6420DB84
		cmp	eax, 1Ch
		jnz	short loc_6420DB63
		mov	ecx, [edi+10h]
		mov	ebx, 3Bh
		test	ecx, ecx
		jz	short loc_6420DB6E

loc_6420DB63:				; CODE XREF: _notation1+35j
					; _notation1+ACj
		mov	dword ptr [edi], offset	_error
		mov	ebx, 0FFFFFFFFh

loc_6420DB6E:				; CODE XREF: _notation1+2Bj
					; _notation1+41j ...
		mov	eax, ebx
		mov	esi, [esp+2Ch+var_C]
		mov	ebx, [esp+2Ch+var_10]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420DB84:				; CODE XREF: _notation1+30j
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_20], offset _KW_SYSTEM ; "SYSTEM"
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420DBB0
		mov	dword ptr [edi], offset	_notation3
		jmp	short loc_6420DB6E
; ---------------------------------------------------------------------------
		align 10h

loc_6420DBB0:				; CODE XREF: _notation1+80j
		mov	edx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_20], offset _KW_PUBLIC ; "PUBLIC"
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_24], edx
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420DB63
		mov	dword ptr [edi], offset	_notation2
		jmp	short loc_6420DB6E
_notation1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_notation2	proc near		; DATA XREF: _notation1+AEo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 11h
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420DC13
		cmp	edx, 1Bh
		jz	short loc_6420DC15
		cmp	edx, 1Ch
		jnz	short loc_6420DC08
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DC13

loc_6420DC08:				; CODE XREF: _notation2+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DC13:			; CODE XREF: _notation2+10j
					; _notation2+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420DC15:				; CODE XREF: _notation2+15j
		mov	dword ptr [ecx], offset	_notation4
		mov	al, 15h
		retn
_notation2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_notation3	proc near		; DATA XREF: _notation1+82o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 11h
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420DC53
		cmp	edx, 1Bh
		jz	short loc_6420DC55
		cmp	edx, 1Ch
		jnz	short loc_6420DC48
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DC53

loc_6420DC48:				; CODE XREF: _notation3+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DC53:			; CODE XREF: _notation3+10j
					; _notation3+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420DC55:				; CODE XREF: _notation3+15j
		mov	dword ptr [ecx], offset	_declClose
		mov	al, 13h
		mov	dword ptr [ecx+8], 11h
		retn
_notation3	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_notation4	proc near		; DATA XREF: _notation2:loc_6420DC15o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 11h
		jz	short loc_6420DCC3
		cmp	edx, 1Bh
		jz	short loc_6420DCB0
		cmp	edx, 0Fh
		mov	eax, 11h
		jz	short locret_6420DCE0
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420DC9E
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DCA9

loc_6420DC9E:				; CODE XREF: _notation4+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DCA9:			; CODE XREF: _notation4+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420DCB0:				; CODE XREF: _notation4+10j
		mov	dword ptr [ecx], offset	_declClose
		mov	eax, 13h
		mov	dword ptr [ecx+8], 11h
		retn
; ---------------------------------------------------------------------------

loc_6420DCC3:				; CODE XREF: _notation4+Bj
		mov	edx, [ecx+10h]
		mov	eax, offset _internalSubset
		test	edx, edx
		jnz	short loc_6420DCD4
		mov	eax, offset _externalSubset1

loc_6420DCD4:				; CODE XREF: _notation4+5Dj
		mov	[ecx], eax
		mov	eax, 14h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420DCE0:			; CODE XREF: _notation4+1Aj
		rep retn
_notation4	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist0	proc near		; DATA XREF: _internalSubset+E3o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 12h
		jz	short loc_6420DD30
		cmp	edx, 29h
		jz	short loc_6420DD30
		cmp	edx, 0Fh
		mov	eax, 21h
		jz	short locret_6420DD40
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420DD1E
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DD29

loc_6420DD1E:				; CODE XREF: _attlist0+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DD29:			; CODE XREF: _attlist0+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420DD30:				; CODE XREF: _attlist0+Bj
					; _attlist0+10j
		mov	dword ptr [ecx], offset	_attlist1
		mov	eax, 22h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420DD40:			; CODE XREF: _attlist0+1Aj
		rep retn
_attlist0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist1	proc near		; DATA XREF: _attlist0:loc_6420DD30o
					; _attlist8:loc_6420E1C4o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 11h
		jz	short loc_6420DDA0
		jle	short loc_6420DD75
		cmp	edx, 12h
		jz	short loc_6420DD69
		cmp	edx, 29h
		jnz	short loc_6420DD7F

loc_6420DD69:				; CODE XREF: _attlist1+12j
		mov	dword ptr [ecx], offset	_attlist2
		mov	eax, 16h
		retn
; ---------------------------------------------------------------------------

loc_6420DD75:				; CODE XREF: _attlist1+Dj
		cmp	edx, 0Fh
		mov	eax, 21h
		jz	short locret_6420DDC0

loc_6420DD7F:				; CODE XREF: _attlist1+17j
		cmp	edx, 1Ch
		jnz	short loc_6420DD90
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DD9B

loc_6420DD90:				; CODE XREF: _attlist1+32j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DD9B:			; CODE XREF: _attlist1+3Ej
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420DDA0:				; CODE XREF: _attlist1+Bj
		mov	edx, [ecx+10h]
		mov	eax, offset _internalSubset
		test	edx, edx
		jnz	short loc_6420DDB1
		mov	eax, offset _externalSubset1

loc_6420DDB1:				; CODE XREF: _attlist1+5Aj
		mov	[ecx], eax
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420DDC0:			; CODE XREF: _attlist1+2Dj
		rep retn
_attlist1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist2	proc near		; DATA XREF: _attlist1:loc_6420DD69o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		cmp	edx, 12h
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_0]
		jz	short loc_6420DE52
		cmp	edx, 17h
		jz	short loc_6420DE44
		cmp	edx, 0Fh
		mov	eax, 21h
		jz	short loc_6420DE30
		cmp	edx, 1Ch
		xchg	ax, ax
		jnz	short loc_6420DE1E
		mov	ecx, [ebp+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	short loc_6420DE30

loc_6420DE1E:				; CODE XREF: _attlist2+40j
					; _attlist2+19Ej
		mov	dword ptr [ebp+0], offset _error
		mov	eax, 0FFFFFFFFh
		lea	esi, [esi+0]

loc_6420DE30:				; CODE XREF: _attlist2+39j
					; _attlist2+4Cj ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420DE44:				; CODE XREF: _attlist2+2Fj
		mov	dword ptr [ebp+0], offset _attlist3
		mov	eax, 21h
		jmp	short loc_6420DE30
; ---------------------------------------------------------------------------

loc_6420DE52:				; CODE XREF: _attlist2+2Aj
		mov	[esp+2Ch+var_20], offset _KW_CDATA ; "CDATA"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		xor	edx, edx
		test	eax, eax
		jnz	loc_6420DF90
		mov	[esp+2Ch+var_20], offset _KW_ID	; "ID"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		mov	edx, 1
		test	eax, eax
		jnz	loc_6420DF90
		mov	[esp+2Ch+var_20], offset _KW_IDREF ; "IDREF"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		mov	edx, 2
		test	eax, eax
		jnz	loc_6420DF90
		mov	[esp+2Ch+var_20], offset _KW_IDREFS ; "IDREFS"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		mov	edx, 3
		test	eax, eax
		jnz	loc_6420DF90
		mov	[esp+2Ch+var_20], offset _KW_ENTITY ; "ENTITY"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		mov	edx, 4
		test	eax, eax
		jnz	loc_6420DF90
		mov	[esp+2Ch+var_20], offset _KW_ENTITIES ;	"ENTITIES"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		mov	edx, 5
		test	eax, eax
		jnz	short loc_6420DF90
		mov	[esp+2Ch+var_20], offset _KW_NMTOKEN ; "NMTOKEN"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		mov	edx, 6
		test	eax, eax
		jnz	short loc_6420DF90
		mov	[esp+2Ch+var_20], offset _KW_NMTOKENS ;	"NMTOKENS"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	short loc_6420DF85
		mov	[esp+2Ch+var_20], offset _KW_NOTATION ;	"NOTATION"
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	loc_6420DE1E
		mov	dword ptr [ebp+0], offset _attlist5
		mov	eax, 21h
		jmp	loc_6420DE30
; ---------------------------------------------------------------------------

loc_6420DF85:				; CODE XREF: _attlist2+184j
		mov	edx, 7
		lea	esi, [esi+0]

loc_6420DF90:				; CODE XREF: _attlist2+9Cj
					; _attlist2+BFj ...
		mov	dword ptr [ebp+0], offset _attlist8
		lea	eax, [edx+17h]
		jmp	loc_6420DE30
_attlist2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist3	proc near		; DATA XREF: _attlist2:loc_6420DE44o
					; _attlist4:loc_6420E040o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 13h
		jg	short loc_6420DFC0
		cmp	edx, 12h
		jl	short loc_6420DFE3

loc_6420DFB2:				; CODE XREF: _attlist3+23j
		mov	dword ptr [ecx], offset	_attlist4
		mov	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420DFC0:				; CODE XREF: _attlist3+Bj
		cmp	edx, 29h
		jz	short loc_6420DFB2

loc_6420DFC5:				; CODE XREF: _attlist3+4Bj
		cmp	edx, 1Ch
		jnz	short loc_6420DFD6
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420DFE1

loc_6420DFD6:				; CODE XREF: _attlist3+28j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420DFE1:			; CODE XREF: _attlist3+34j
		rep retn
; ---------------------------------------------------------------------------

loc_6420DFE3:				; CODE XREF: _attlist3+10j
		cmp	edx, 0Fh
		mov	eax, 21h
		jnz	short loc_6420DFC5
		rep retn
_attlist3	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist4	proc near		; DATA XREF: _attlist3:loc_6420DFB2o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 15h
		jz	short loc_6420E040
		cmp	edx, 18h
		jz	short loc_6420E030
		cmp	edx, 0Fh
		mov	eax, 21h
		jz	short locret_6420E050
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420E01E
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E029

loc_6420E01E:				; CODE XREF: _attlist4+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E029:			; CODE XREF: _attlist4+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E030:				; CODE XREF: _attlist4+10j
		mov	dword ptr [ecx], offset	_attlist8
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E040:				; CODE XREF: _attlist4+Bj
		mov	dword ptr [ecx], offset	_attlist3
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420E050:			; CODE XREF: _attlist4+1Aj
		rep retn
_attlist4	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist5	proc near		; DATA XREF: _attlist2+1A4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 21h
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420E093
		cmp	edx, 17h
		jz	short loc_6420E095
		cmp	edx, 1Ch
		jnz	short loc_6420E088
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E093

loc_6420E088:				; CODE XREF: _attlist5+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E093:			; CODE XREF: _attlist5+10j
					; _attlist5+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420E095:				; CODE XREF: _attlist5+15j
		mov	dword ptr [ecx], offset	_attlist6
		retn
_attlist5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist6	proc near		; DATA XREF: _attlist5:loc_6420E095o
					; _attlist7:loc_6420E130o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 21h
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420E0D3
		cmp	edx, 12h
		jz	short loc_6420E0D5
		cmp	edx, 1Ch
		jnz	short loc_6420E0C8
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E0D3

loc_6420E0C8:				; CODE XREF: _attlist6+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E0D3:			; CODE XREF: _attlist6+10j
					; _attlist6+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420E0D5:				; CODE XREF: _attlist6+15j
		mov	dword ptr [ecx], offset	_attlist7
		mov	al, 20h
		retn
_attlist6	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist7	proc near		; DATA XREF: _attlist6:loc_6420E0D5o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 15h
		jz	short loc_6420E130
		cmp	edx, 18h
		jz	short loc_6420E120
		cmp	edx, 0Fh
		mov	eax, 21h
		jz	short locret_6420E140
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420E10E
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E119

loc_6420E10E:				; CODE XREF: _attlist7+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E119:			; CODE XREF: _attlist7+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E120:				; CODE XREF: _attlist7+10j
		mov	dword ptr [ecx], offset	_attlist8
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E130:				; CODE XREF: _attlist7+Bj
		mov	dword ptr [ecx], offset	_attlist6
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420E140:			; CODE XREF: _attlist7+1Aj
		rep retn
_attlist7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist8	proc near		; DATA XREF: _attlist2:loc_6420DF90o
					; _attlist4:loc_6420E030o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		cmp	edx, 14h
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_C]
		jz	short loc_6420E1D1
		cmp	edx, 1Bh
		jz	short loc_6420E1C4
		cmp	edx, 0Fh
		mov	eax, 21h
		jz	short loc_6420E1B0
		cmp	edx, 1Ch
		xchg	ax, ax
		jnz	short loc_6420E19E
		mov	ecx, [esi+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	short loc_6420E1B0

loc_6420E19E:				; CODE XREF: _attlist8+40j
					; _attlist8+F7j
		mov	dword ptr [esi], offset	_error
		mov	eax, 0FFFFFFFFh
		lea	esi, [esi+0]

loc_6420E1B0:				; CODE XREF: _attlist8+39j
					; _attlist8+4Cj ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420E1C4:				; CODE XREF: _attlist8+2Fj
		mov	dword ptr [esi], offset	_attlist1
		mov	eax, 25h
		jmp	short loc_6420E1B0
; ---------------------------------------------------------------------------

loc_6420E1D1:				; CODE XREF: _attlist8+2Aj
		mov	[esp+2Ch+var_20], offset _KW_IMPLIED ; "IMPLIED"
		mov	[esp+2Ch+var_24], ebp
		mov	eax, [ebx+44h]
		mov	[esp+2Ch+var_2C], ebx
		add	eax, edi
		mov	[esp+2Ch+var_28], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	short loc_6420E200
		mov	dword ptr [esi], offset	_attlist1
		mov	eax, 23h
		jmp	short loc_6420E1B0
; ---------------------------------------------------------------------------
		align 10h

loc_6420E200:				; CODE XREF: _attlist8+9Ej
		mov	[esp+2Ch+var_20], offset _KW_REQUIRED ;	"REQUIRED"
		mov	[esp+2Ch+var_24], ebp
		mov	eax, [ebx+44h]
		mov	[esp+2Ch+var_2C], ebx
		add	eax, edi
		mov	[esp+2Ch+var_28], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	short loc_6420E22C
		mov	dword ptr [esi], offset	_attlist1
		mov	eax, 24h
		jmp	short loc_6420E1B0
; ---------------------------------------------------------------------------

loc_6420E22C:				; CODE XREF: _attlist8+CDj
		mov	[esp+2Ch+var_20], offset _KW_FIXED ; "FIXED"
		mov	[esp+2Ch+var_24], ebp
		add	edi, [ebx+44h]
		mov	[esp+2Ch+var_2C], ebx
		mov	[esp+2Ch+var_28], edi
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	loc_6420E19E
		mov	dword ptr [esi], offset	_attlist9
		mov	eax, 21h
		jmp	loc_6420E1B0
_attlist8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_attlist9	proc near		; DATA XREF: _attlist8+FDo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, 21h
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420E293
		cmp	edx, 1Bh
		jz	short loc_6420E295
		cmp	edx, 1Ch
		jnz	short loc_6420E288
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E293

loc_6420E288:				; CODE XREF: _attlist9+1Aj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E293:			; CODE XREF: _attlist9+10j
					; _attlist9+26j
		rep retn
; ---------------------------------------------------------------------------

loc_6420E295:				; CODE XREF: _attlist9+15j
		mov	dword ptr [ecx], offset	_attlist1
		mov	al, 26h
		retn
_attlist9	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_element0	proc near		; DATA XREF: _internalSubset+113o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 12h
		jz	short loc_6420E2E0
		cmp	edx, 29h
		jz	short loc_6420E2E0
		cmp	edx, 0Fh
		mov	eax, 27h
		jz	short locret_6420E2F0
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420E2CE
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E2D9

loc_6420E2CE:				; CODE XREF: _element0+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E2D9:			; CODE XREF: _element0+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E2E0:				; CODE XREF: _element0+Bj
					; _element0+10j
		mov	dword ptr [ecx], offset	_element1
		mov	eax, 28h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420E2F0:			; CODE XREF: _element0+1Aj
		rep retn
_element0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_element1	proc near		; DATA XREF: _element0:loc_6420E2E0o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		cmp	edx, 12h
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_C]
		jz	short loc_6420E388
		cmp	edx, 17h
		jz	short loc_6420E374
		cmp	edx, 0Fh
		mov	eax, 27h
		jz	short loc_6420E360
		cmp	edx, 1Ch
		xchg	ax, ax
		jnz	short loc_6420E34E
		mov	ecx, [ebx+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	short loc_6420E360

loc_6420E34E:				; CODE XREF: _element1+40j
					; _element1+CEj
		mov	dword ptr [ebx], offset	_error
		mov	eax, 0FFFFFFFFh
		lea	esi, [esi+0]

loc_6420E360:				; CODE XREF: _element1+39j
					; _element1+4Cj ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420E374:				; CODE XREF: _element1+2Fj
		mov	dword ptr [ebx], offset	_element2
		mov	eax, 2Ch
		mov	dword ptr [ebx+4], 1
		jmp	short loc_6420E360
; ---------------------------------------------------------------------------

loc_6420E388:				; CODE XREF: _element1+2Aj
		mov	[esp+2Ch+var_20], offset _KW_EMPTY ; "EMPTY"
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420E3B6
		mov	dword ptr [ebx], offset	_declClose
		mov	eax, 2Ah
		mov	dword ptr [ebx+8], 27h
		jmp	short loc_6420E360
; ---------------------------------------------------------------------------

loc_6420E3B6:				; CODE XREF: _element1+A0j
		mov	[esp+2Ch+var_20], offset _KW_ANY ; "ANY"
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	loc_6420E34E
		mov	dword ptr [ebx], offset	_declClose
		mov	eax, 29h
		mov	dword ptr [ebx+8], 27h
		jmp	loc_6420E360
_element1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_element2	proc near		; DATA XREF: _element1:loc_6420E374o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		sub	esp, 18h
		mov	edx, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_10]
		lea	eax, [edx-0Fh]
		cmp	eax, 1Ah	; switch 27 cases
		jbe	short loc_6420E426

loc_6420E408:				; CODE XREF: _element2:loc_6420E426j
					; DATA XREF: .rdata:off_6421DF18o
		cmp	edx, 1Ch	; jumptable 6420E426 default case
		jnz	loc_6420E4D0
		mov	edx, [ebx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jnz	loc_6420E4D0

loc_6420E421:				; CODE XREF: _element2+90j
					; _element2+EBj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420E426:				; CODE XREF: _element2+16j
		jmp	ds:off_6421DF18[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420E430:				; CODE XREF: _element2:loc_6420E426j
					; DATA XREF: .rdata:off_6421DF18o
		mov	eax, 27h	; jumptable 6420E426 case 0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E440:				; CODE XREF: _element2:loc_6420E426j
					; DATA XREF: .rdata:off_6421DF18o
		mov	dword ptr [ebx], offset	_element7 ; jumptable 6420E426 cases 3,26
		mov	eax, 33h
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420E450:				; CODE XREF: _element2:loc_6420E426j
					; DATA XREF: .rdata:off_6421DF18o
		mov	eax, [esp+1Ch+arg_C] ; jumptable 6420E426 case 5
		mov	[esp+1Ch+var_10], offset _KW_PCDATA ; "PCDATA"
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_8]
		add	eax, [ecx+44h]
		mov	[esp+1Ch+var_1C], ecx
		mov	[esp+1Ch+var_18], eax
		call	dword ptr [ecx+1Ch]
		test	eax, eax
		jz	short loc_6420E4D0
		mov	dword ptr [ebx], offset	_element3
		mov	eax, 2Bh
		jmp	short loc_6420E421
; ---------------------------------------------------------------------------

loc_6420E482:				; CODE XREF: _element2:loc_6420E426j
					; DATA XREF: .rdata:off_6421DF18o
		mov	dword ptr [ebx+4], 2 ; jumptable 6420E426 case 8
		mov	eax, 2Ch
		mov	dword ptr [ebx], offset	_element6
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E4A0:				; CODE XREF: _element2:loc_6420E426j
					; DATA XREF: .rdata:off_6421DF18o
		mov	dword ptr [ebx], offset	_element7 ; jumptable 6420E426 case 15
		mov	eax, 35h
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420E4B0:				; CODE XREF: _element2:loc_6420E426j
					; DATA XREF: .rdata:off_6421DF18o
		mov	dword ptr [ebx], offset	_element7 ; jumptable 6420E426 case 16
		mov	eax, 34h
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420E4C0:				; CODE XREF: _element2:loc_6420E426j
					; DATA XREF: .rdata:off_6421DF18o
		mov	dword ptr [ebx], offset	_element7 ; jumptable 6420E426 case 17
		mov	eax, 36h
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6420E4D0:				; CODE XREF: _element2+1Bj
					; _element2+2Bj ...
		mov	dword ptr [ebx], offset	_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6420E421
_element2	endp


; =============== S U B	R O U T	I N E =======================================


_element3	proc near		; DATA XREF: _element2+85o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 15h
		jz	short loc_6420E550
		jle	short loc_6420E510
		cmp	edx, 18h
		jz	short loc_6420E538
		cmp	edx, 24h
		jnz	short loc_6420E51A
		mov	dword ptr [ecx], offset	_declClose
		mov	eax, 2Eh
		mov	dword ptr [ecx+8], 27h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E510:				; CODE XREF: _element3+Dj
		cmp	edx, 0Fh
		mov	eax, 27h
		jz	short locret_6420E560

loc_6420E51A:				; CODE XREF: _element3+17j
		cmp	edx, 1Ch
		jnz	short loc_6420E52B
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E536

loc_6420E52B:				; CODE XREF: _element3+3Dj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E536:			; CODE XREF: _element3+49j
		rep retn
; ---------------------------------------------------------------------------

loc_6420E538:				; CODE XREF: _element3+12j
		mov	dword ptr [ecx], offset	_declClose
		mov	eax, 2Dh
		mov	dword ptr [ecx+8], 27h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E550:				; CODE XREF: _element3+Bj
		mov	dword ptr [ecx], offset	_element4
		mov	eax, 27h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420E560:			; CODE XREF: _element3+38j
		rep retn
_element3	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_element4	proc near		; DATA XREF: _element3:loc_6420E550o
					; _element5:loc_6420E623o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 12h
		jz	short loc_6420E5B0
		cmp	edx, 29h
		jz	short loc_6420E5B0
		cmp	edx, 0Fh
		mov	eax, 27h
		jz	short locret_6420E5C0
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420E59E
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E5A9

loc_6420E59E:				; CODE XREF: _element4+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E5A9:			; CODE XREF: _element4+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E5B0:				; CODE XREF: _element4+Bj
					; _element4+10j
		mov	dword ptr [ecx], offset	_element5
		mov	eax, 33h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420E5C0:			; CODE XREF: _element4+1Aj
		rep retn
_element4	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_element5	proc near		; DATA XREF: _element4:loc_6420E5B0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		cmp	edx, 15h
		jz	short loc_6420E623
		cmp	edx, 24h
		jz	short loc_6420E610
		cmp	edx, 0Fh
		mov	eax, 27h
		jz	short locret_6420E630
		cmp	edx, 1Ch
		nop
		jnz	short loc_6420E5FE
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E609

loc_6420E5FE:				; CODE XREF: _element5+20j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E609:			; CODE XREF: _element5+2Cj
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E610:				; CODE XREF: _element5+10j
		mov	dword ptr [ecx], offset	_declClose
		mov	eax, 2Eh
		mov	dword ptr [ecx+8], 27h
		retn
; ---------------------------------------------------------------------------

loc_6420E623:				; CODE XREF: _element5+Bj
		mov	dword ptr [ecx], offset	_element4
		mov	eax, 27h
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6420E630:			; CODE XREF: _element5+1Aj
		rep retn
_element5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_element6	proc near		; DATA XREF: _element2+9Eo
					; _element7:loc_6420E700o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lea	eax, [edx-0Fh]
		cmp	eax, 1Ah	; switch 27 cases
		jbe	short loc_6420E662

loc_6420E650:				; CODE XREF: _element6:loc_6420E662j
					; DATA XREF: .rdata:off_6421DF84o
		cmp	edx, 1Ch	; jumptable 6420E662 default case
		jz	short loc_6420E6C0

loc_6420E655:				; CODE XREF: _element6+8Cj
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E660:			; CODE XREF: _element6+8Aj
		rep retn
; ---------------------------------------------------------------------------

loc_6420E662:				; CODE XREF: _element6+Ej
		jmp	ds:off_6421DF84[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420E670:				; CODE XREF: _element6:loc_6420E662j
					; DATA XREF: .rdata:off_6421DF84o
		mov	dword ptr [ecx], offset	_element7 ; jumptable 6420E662 case 17
		mov	eax, 36h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E680:				; CODE XREF: _element6:loc_6420E662j
					; DATA XREF: .rdata:off_6421DF84o
		mov	eax, 27h	; jumptable 6420E662 case 0
		retn
; ---------------------------------------------------------------------------

loc_6420E686:				; CODE XREF: _element6:loc_6420E662j
					; DATA XREF: .rdata:off_6421DF84o
		mov	dword ptr [ecx], offset	_element7 ; jumptable 6420E662 cases 3,26
		mov	eax, 33h
		retn
; ---------------------------------------------------------------------------

loc_6420E692:				; CODE XREF: _element6:loc_6420E662j
					; DATA XREF: .rdata:off_6421DF84o
		add	dword ptr [ecx+4], 1 ; jumptable 6420E662 case 8
		mov	eax, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E6A0:				; CODE XREF: _element6:loc_6420E662j
					; DATA XREF: .rdata:off_6421DF84o
		mov	dword ptr [ecx], offset	_element7 ; jumptable 6420E662 case 15
		mov	eax, 35h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E6B0:				; CODE XREF: _element6:loc_6420E662j
					; DATA XREF: .rdata:off_6421DF84o
		mov	dword ptr [ecx], offset	_element7 ; jumptable 6420E662 case 16
		mov	eax, 34h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E6C0:				; CODE XREF: _element6+13j
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E660
		jmp	short loc_6420E655
_element6	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_element7	proc near		; DATA XREF: _element2:loc_6420E440o
					; _element2:loc_6420E4A0o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lea	eax, [ecx-0Fh]
		cmp	eax, 17h	; switch 24 cases
		jbe	short loc_6420E6F6

loc_6420E6E0:				; CODE XREF: _element7:loc_6420E6F6j
					; DATA XREF: .rdata:off_6421DFF0o
		cmp	ecx, 1Ch	; jumptable 6420E6F6 default case
		jz	loc_6420E787

loc_6420E6E9:				; CODE XREF: _element7+C7j
		mov	dword ptr [edx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E6F4:			; CODE XREF: _element7+62j
					; _element7+84j ...
		rep retn
; ---------------------------------------------------------------------------

loc_6420E6F6:				; CODE XREF: _element7+Ej
		jmp	ds:off_6421DFF0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420E700:				; CODE XREF: _element7:loc_6420E6F6j
					; DATA XREF: .rdata:off_6421DFF0o
		mov	dword ptr [edx], offset	_element6 ; jumptable 6420E6F6 case 23
		mov	eax, 32h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E710:				; CODE XREF: _element7:loc_6420E6F6j
					; DATA XREF: .rdata:off_6421DFF0o
		mov	eax, 27h	; jumptable 6420E6F6 case 0
		retn
; ---------------------------------------------------------------------------

loc_6420E716:				; CODE XREF: _element7:loc_6420E6F6j
					; DATA XREF: .rdata:off_6421DFF0o
		mov	dword ptr [edx], offset	_element6 ; jumptable 6420E6F6 case 6
		mov	eax, 31h
		retn
; ---------------------------------------------------------------------------

loc_6420E722:				; CODE XREF: _element7:loc_6420E6F6j
					; DATA XREF: .rdata:off_6421DFF0o
		mov	ecx, [edx+4]	; jumptable 6420E6F6 case 9
		mov	eax, 2Dh
		sub	ecx, 1
		test	ecx, ecx
		mov	[edx+4], ecx
		jnz	short locret_6420E6F4

loc_6420E734:				; CODE XREF: _element7+82j
					; _element7+96j ...
		mov	dword ptr [edx], offset	_declClose
		mov	dword ptr [edx+8], 27h
		retn
; ---------------------------------------------------------------------------

loc_6420E742:				; CODE XREF: _element7:loc_6420E6F6j
					; DATA XREF: .rdata:off_6421DFF0o
		mov	ecx, [edx+4]	; jumptable 6420E6F6 case 20
		mov	eax, 2Fh
		sub	ecx, 1
		test	ecx, ecx
		mov	[edx+4], ecx
		jz	short loc_6420E734
		jmp	short locret_6420E6F4
; ---------------------------------------------------------------------------

loc_6420E756:				; CODE XREF: _element7:loc_6420E6F6j
					; DATA XREF: .rdata:off_6421DFF0o
		mov	ecx, [edx+4]	; jumptable 6420E6F6 case 21
		mov	eax, 2Eh
		sub	ecx, 1
		test	ecx, ecx
		mov	[edx+4], ecx
		jz	short loc_6420E734
		jmp	short locret_6420E6F4
; ---------------------------------------------------------------------------
		align 10h

loc_6420E770:				; CODE XREF: _element7:loc_6420E6F6j
					; DATA XREF: .rdata:off_6421DFF0o
		mov	ecx, [edx+4]	; jumptable 6420E6F6 case 22
		mov	eax, 30h
		sub	ecx, 1
		test	ecx, ecx
		mov	[edx+4], ecx
		jz	short loc_6420E734
		jmp	locret_6420E6F4
; ---------------------------------------------------------------------------

loc_6420E787:				; CODE XREF: _element7+13j
		mov	ecx, [edx+10h]
		mov	eax, 3Bh
		test	ecx, ecx
		jz	locret_6420E6F4
		jmp	loc_6420E6E9
_element7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_condSect0	proc near		; DATA XREF: _externalSubset1:loc_6420D611o
					; _externalSubset0:loc_6420EA40o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], ebx
		xor	ebx, ebx
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_0]
		cmp	eax, 0Fh
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		jz	short loc_6420E7E0
		cmp	eax, 12h
		jz	short loc_6420E803
		cmp	eax, 1Ch
		jnz	short loc_6420E7F6
		mov	esi, [edi+10h]
		mov	ebx, 3Bh
		test	esi, esi
		jnz	short loc_6420E7F6

loc_6420E7E0:				; CODE XREF: _condSect0+28j
					; _condSect0+61j ...
		mov	eax, ebx
		mov	esi, [esp+2Ch+var_C]
		mov	ebx, [esp+2Ch+var_10]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420E7F6:				; CODE XREF: _condSect0+32j
					; _condSect0+3Ej ...
		mov	dword ptr [edi], offset	_error
		mov	ebx, 0FFFFFFFFh
		jmp	short loc_6420E7E0
; ---------------------------------------------------------------------------

loc_6420E803:				; CODE XREF: _condSect0+2Dj
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_20], offset _KW_INCLUDE ; "INCLUDE"
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420E830
		mov	dword ptr [edi], offset	_condSect1
		jmp	short loc_6420E7E0
; ---------------------------------------------------------------------------
		align 10h

loc_6420E830:				; CODE XREF: _condSect0+7Fj
		mov	edx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_20], offset _KW_IGNORE ; "IGNORE"
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_24], edx
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_6420E7F6
		mov	dword ptr [edi], offset	_condSect2
		jmp	short loc_6420E7E0
_condSect0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_condSect1	proc near		; DATA XREF: _condSect0+81o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		xor	eax, eax
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420E890
		cmp	edx, 19h
		jz	short loc_6420E892
		cmp	edx, 1Ch
		jnz	short loc_6420E885
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E890

loc_6420E885:				; CODE XREF: _condSect1+17j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E890:			; CODE XREF: _condSect1+Dj
					; _condSect1+23j
		rep retn
; ---------------------------------------------------------------------------

loc_6420E892:				; CODE XREF: _condSect1+12j
		mov	dword ptr [ecx], offset	_externalSubset1
		add	dword ptr [ecx+0Ch], 1
		retn
_condSect1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_condSect2	proc near		; DATA XREF: _condSect0+AEo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		xor	eax, eax
		mov	ecx, [esp+arg_0]
		cmp	edx, 0Fh
		jz	short locret_6420E8D0
		cmp	edx, 19h
		jz	short loc_6420E8D2
		cmp	edx, 1Ch
		jnz	short loc_6420E8C5
		mov	edx, [ecx+10h]
		mov	eax, 3Bh
		test	edx, edx
		jz	short locret_6420E8D0

loc_6420E8C5:				; CODE XREF: _condSect2+17j
		mov	dword ptr [ecx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E8D0:			; CODE XREF: _condSect2+Dj
					; _condSect2+23j
		rep retn
; ---------------------------------------------------------------------------

loc_6420E8D2:				; CODE XREF: _condSect2+12j
		mov	dword ptr [ecx], offset	_externalSubset1
		mov	al, 3Ah
		retn
_condSect2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_declClose	proc near		; DATA XREF: _entity2:loc_6420D754o
					; _entity6:loc_6420D915o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		cmp	eax, 0Fh
		jz	short loc_6420E923
		cmp	eax, 11h
		jz	short loc_6420E910
		cmp	eax, 1Ch
		jnz	short loc_6420E900
		mov	ecx, [edx+10h]
		mov	al, 3Bh
		test	ecx, ecx
		jz	short locret_6420E90B

loc_6420E900:				; CODE XREF: _declClose+15j
		mov	dword ptr [edx], offset	_error
		mov	eax, 0FFFFFFFFh

locret_6420E90B:			; CODE XREF: _declClose+1Ej
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420E910:				; CODE XREF: _declClose+10j
		mov	ecx, [edx+10h]
		mov	eax, offset _internalSubset
		test	ecx, ecx
		jnz	short loc_6420E921
		mov	eax, offset _externalSubset1

loc_6420E921:				; CODE XREF: _declClose+3Aj
		mov	[edx], eax

loc_6420E923:				; CODE XREF: _declClose+Bj
		mov	eax, [edx+8]
		retn
_declClose	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_error		proc near		; DATA XREF: _prolog0:loc_6420CFD9o
					; _prolog0:loc_6420D035o ...
		xor	eax, eax
		retn
_error		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlPrologStateInit
_XmlPrologStateInit proc near		; CODE XREF: _parserInit+1Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	_prolog0
		mov	dword ptr [eax+10h], 1
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+14h], 0
		retn
_XmlPrologStateInit endp


; =============== S U B	R O U T	I N E =======================================


		public _XmlPrologStateInitExternalEntity
_XmlPrologStateInitExternalEntity proc near
					; CODE XREF: _XML_ExternalEntityParserCreate+6AAp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	_externalSubset0
		mov	dword ptr [eax+10h], 0
		mov	dword ptr [eax+0Ch], 0
		retn
_XmlPrologStateInitExternalEntity endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_externalSubset0 proc near		; DATA XREF: _XmlPrologStateInitExternalEntity+4o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 0Ch
		mov	eax, 39h
		mov	edx, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], ebx
		mov	ebx, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_8], esi
		mov	esi, [esp+0Ch+arg_C]
		cmp	edx, 0Ch
		mov	[esp+0Ch+var_4], edi
		mov	edi, [esp+0Ch+arg_10]
		mov	dword ptr [ecx], offset	_externalSubset1
		jz	short loc_6420E9F0
		lea	eax, [edx+4]
		cmp	eax, 26h	; switch 39 cases
		jbe	short loc_6420EA00

loc_6420E9BA:				; CODE XREF: _externalSubset0:loc_6420EA00j
					; DATA XREF: .rdata:off_6421E050o
		mov	[esp+0Ch+arg_10], edi ;	jumptable 6420EA00 default case
		mov	edi, [esp+0Ch+var_4]
		mov	[esp+0Ch+arg_C], esi
		mov	esi, [esp+0Ch+var_8]
		mov	[esp+0Ch+arg_8], ebx
		mov	ebx, [esp+0Ch+var_C]
		mov	[esp+0Ch+arg_4], edx
		mov	[esp+0Ch+arg_0], ecx
		add	esp, 0Ch
		jmp	_internalSubset
; ---------------------------------------------------------------------------

loc_6420E9E1:				; CODE XREF: _externalSubset0:loc_6420EA00j
					; DATA XREF: .rdata:off_6421E050o
		mov	eax, [ecx+0Ch]	; jumptable 6420EA00 case 38
		test	eax, eax
		jz	short loc_6420EA20 ; jumptable 6420EA00	case 30
		sub	eax, 1
		mov	[ecx+0Ch], eax
		xor	eax, eax

loc_6420E9F0:				; CODE XREF: _externalSubset0+30j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420EA00:				; CODE XREF: _externalSubset0+38j
		jmp	ds:off_6421E050[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420EA07:				; CODE XREF: _externalSubset0:loc_6420EA00j
					; DATA XREF: .rdata:off_6421E050o
		mov	ebx, [ecx+0Ch]	; jumptable 6420EA00 case 0
		test	ebx, ebx
		jnz	short loc_6420EA20 ; jumptable 6420EA00	case 30

loc_6420EA0E:				; CODE XREF: _externalSubset0:loc_6420EA00j
					; DATA XREF: .rdata:off_6421E050o
		xor	eax, eax	; jumptable 6420EA00 case 19
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420EA20:				; CODE XREF: _externalSubset0+66j
					; _externalSubset0:loc_6420EA00j ...
		mov	dword ptr [ecx], offset	_error ; jumptable 6420EA00 case 30
		mov	eax, 0FFFFFFFFh
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420EA40:				; CODE XREF: _externalSubset0:loc_6420EA00j
					; DATA XREF: .rdata:off_6421E050o
		mov	dword ptr [ecx], offset	_condSect0 ; jumptable 6420EA00	case 37
		xor	eax, eax
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
_externalSubset0 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_isNever	proc near		; DATA XREF: .rdata:642232B4o
					; .rdata:642232C0o ...
		xor	eax, eax
		retn
_isNever	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_utf8_isName2	proc near		; DATA XREF: .rdata:642232ACo
					; .rdata:642235ACo ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8

		sub	esp, 8
		mov	edx, [esp+8+arg_4]
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	esi, 3
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [edx+1]
		and	esi, eax
		shr	al, 2
		mov	ebx, ecx
		and	eax, 7
		and	ecx, 1Fh
		movzx	edx, ds:_namePages[eax]
		shr	bl, 5
		and	ebx, 1
		lea	eax, [ebx+esi*2]
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		and	eax, ds:_namingBitmap[edx*4]
		add	esp, 8
		retn
_utf8_isName2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_utf8_isName3	proc near		; DATA XREF: .rdata:642232B0o
					; .rdata:642235B0o ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8

		sub	esp, 8
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	esi, 3
		movzx	edx, byte ptr [eax+1]
		movzx	ecx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax]
		and	esi, edx
		shr	dl, 2
		mov	ebx, ecx
		shl	eax, 4
		and	edx, 0Fh
		and	eax, 0FFh
		and	ecx, 1Fh
		movzx	edx, ds:_namePages[edx+eax]
		shr	bl, 5
		and	ebx, 1
		lea	eax, [ebx+esi*2]
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		and	eax, ds:_namingBitmap[edx*4]
		add	esp, 8
		retn
_utf8_isName3	endp


; =============== S U B	R O U T	I N E =======================================


_utf8_isNmstrt2	proc near		; DATA XREF: .rdata:642232B8o
					; .rdata:642235B8o ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8

		sub	esp, 8
		mov	edx, [esp+8+arg_4]
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	esi, 3
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [edx+1]
		and	esi, eax
		shr	al, 2
		mov	ebx, ecx
		and	eax, 7
		and	ecx, 1Fh
		movzx	edx, ds:_nmstrtPages[eax]
		shr	bl, 5
		and	ebx, 1
		lea	eax, [ebx+esi*2]
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		and	eax, ds:_namingBitmap[edx*4]
		add	esp, 8
		retn
_utf8_isNmstrt2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_utf8_isNmstrt3	proc near		; DATA XREF: .rdata:642232BCo
					; .rdata:642235BCo ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  8

		sub	esp, 8
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	esi, 3
		movzx	edx, byte ptr [eax+1]
		movzx	ecx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax]
		and	esi, edx
		shr	dl, 2
		mov	ebx, ecx
		shl	eax, 4
		and	edx, 0Fh
		and	eax, 0FFh
		and	ecx, 1Fh
		movzx	edx, ds:_nmstrtPages[edx+eax]
		shr	bl, 5
		and	ebx, 1
		lea	eax, [ebx+esi*2]
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		and	eax, ds:_namingBitmap[edx*4]
		add	esp, 8
		retn
_utf8_isNmstrt3	endp


; =============== S U B	R O U T	I N E =======================================


_utf8_isInvalid2 proc near		; DATA XREF: .rdata:642232C4o
					; .rdata:642235C4o ...

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		cmp	byte ptr [eax],	0C1h
		jbe	short loc_6420EC01
		movzx	eax, byte ptr [eax+1]
		test	al, al
		js	short loc_6420EC07

loc_6420EC01:				; CODE XREF: _utf8_isInvalid2+7j
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_6420EC07:				; CODE XREF: _utf8_isInvalid2+Fj
		and	eax, 0C0h
		cmp	eax, 0C0h
		setz	al
		movzx	eax, al
		retn
_utf8_isInvalid2 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_utf8_isInvalid3 proc near		; DATA XREF: .rdata:642232C8o
					; .rdata:642235C8o ...

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		movzx	edx, byte ptr [eax+2]
		test	dl, dl
		js	short loc_6420EC32

loc_6420EC2C:				; CODE XREF: _utf8_isInvalid3+26j
					; _utf8_isInvalid3+33j	...
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_6420EC32:				; CODE XREF: _utf8_isInvalid3+Aj
		movzx	ecx, byte ptr [eax]
		cmp	cl, 0EFh
		jz	short loc_6420EC90

loc_6420EC3A:				; CODE XREF: _utf8_isInvalid3+74j
		and	edx, 0C0h
		cmp	edx, 0C0h
		jz	short loc_6420EC2C
		cmp	cl, 0E0h
		jz	short loc_6420EC70
		movzx	eax, byte ptr [eax+1]
		test	al, al
		jns	short loc_6420EC2C
		cmp	cl, 0EDh
		jz	short loc_6420ECA2
		and	eax, 0C0h
		cmp	eax, 0C0h
		jz	short loc_6420EC2C

loc_6420EC66:				; CODE XREF: _utf8_isInvalid3+79j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420EC70:				; CODE XREF: _utf8_isInvalid3+2Bj
		movzx	eax, byte ptr [eax+1]
		cmp	al, 9Fh
		jbe	short loc_6420EC2C
		and	eax, 0C0h
		cmp	eax, 0C0h
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420EC90:				; CODE XREF: _utf8_isInvalid3+18j
		cmp	byte ptr [eax+1], 0BFh
		jnz	short loc_6420EC3A
		cmp	dl, 0BDh
		jbe	short loc_6420EC66
		nop
		lea	esi, [esi+0]
		jmp	short loc_6420EC2C
; ---------------------------------------------------------------------------

loc_6420ECA2:				; CODE XREF: _utf8_isInvalid3+38j
		cmp	al, 9Fh
		setnbe	al
		movzx	eax, al
		retn
_utf8_isInvalid3 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_utf8_isInvalid4 proc near		; DATA XREF: .rdata:642232CCo
					; .rdata:642235CCo ...

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		movzx	edx, byte ptr [eax+3]
		test	dl, dl
		js	short loc_6420ECC2

loc_6420ECBC:				; CODE XREF: _utf8_isInvalid4+1Ej
					; _utf8_isInvalid4+26j	...
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_6420ECC2:				; CODE XREF: _utf8_isInvalid4+Aj
		and	edx, 0C0h
		cmp	edx, 0C0h
		jz	short loc_6420ECBC
		movzx	edx, byte ptr [eax+2]
		test	dl, dl
		jns	short loc_6420ECBC
		and	edx, 0C0h
		cmp	edx, 0C0h
		jz	short loc_6420ECBC
		movzx	edx, byte ptr [eax]
		cmp	dl, 0F0h
		jz	short loc_6420ED10
		movzx	eax, byte ptr [eax+1]
		test	al, al
		jns	short loc_6420ECBC
		cmp	dl, 0F4h
		jz	short loc_6420ED1A

loc_6420ECFB:				; CODE XREF: _utf8_isInvalid4+68j
		and	eax, 0C0h
		cmp	eax, 0C0h
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420ED10:				; CODE XREF: _utf8_isInvalid4+3Cj
		movzx	eax, byte ptr [eax+1]
		cmp	al, 8Fh
		jbe	short loc_6420ECBC
		jmp	short loc_6420ECFB
; ---------------------------------------------------------------------------

loc_6420ED1A:				; CODE XREF: _utf8_isInvalid4+49j
		cmp	al, 8Fh
		setnbe	al
		movzx	eax, al
		retn
_utf8_isInvalid4 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_scanComment proc near		; CODE XREF: _normal_contentTok+850p
					; _normal_prologTok+840j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		cmp	edx, ecx
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_8], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_4], edi
		jz	short loc_6420ED62
		cmp	byte ptr [edx],	2Dh
		jz	short loc_6420ED77
		mov	[esi], edx
		xor	eax, eax

loc_6420ED52:				; CODE XREF: _normal_scanComment+80j
					; _normal_scanComment+A5j ...
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420ED62:				; CODE XREF: _normal_scanComment+17j
					; _normal_scanComment+4Cj ...
		mov	eax, 0FFFFFFFFh
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420ED77:				; CODE XREF: _normal_scanComment+1Cj
		lea	edi, [edx+1]
		cmp	ecx, edi
		jz	short loc_6420ED62
		movzx	eax, byte ptr [edx+1]

loc_6420ED82:				; CODE XREF: _normal_scanComment+8Ej
		movzx	eax, al
		cmp	byte ptr [ebx+eax+4Ch],	1Bh
		jbe	short loc_6420EDA0

loc_6420ED8C:				; CODE XREF: _normal_scanComment+6Ej
					; _normal_scanComment+75j
					; DATA XREF: ...
		add	edi, 1		; jumptable 6420EDA5 default case

loc_6420ED8F:				; CODE XREF: _normal_scanComment+D5j
					; _normal_scanComment+FCj ...
		cmp	ecx, edi
		jz	short loc_6420ED62
		movzx	eax, byte ptr [edi]
		movzx	eax, al
		cmp	byte ptr [ebx+eax+4Ch],	1Bh ; switch 28	cases
		ja	short loc_6420ED8C ; jumptable 6420EDA5	default	case

loc_6420EDA0:				; CODE XREF: _normal_scanComment+5Aj
		movzx	eax, byte ptr [ebx+eax+4Ch]
		jmp	ds:off_6421E1A0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420EDAC:				; CODE XREF: _normal_scanComment+75j
					; _normal_scanComment+D0j ...
		mov	[esi], edi	; jumptable 6420EDA5 cases 0,1,8
		xor	eax, eax
		jmp	short loc_6420ED52
; ---------------------------------------------------------------------------

loc_6420EDB2:				; CODE XREF: _normal_scanComment+75j
					; DATA XREF: .rdata:off_6421E1A0o
		add	edi, 1		; jumptable 6420EDA5 case 27
		cmp	edi, ecx
		jz	short loc_6420ED62
		movzx	eax, byte ptr [edi]
		cmp	al, 2Dh
		jnz	short loc_6420ED82
		lea	eax, [edi+1]
		cmp	eax, ecx
		jz	short loc_6420ED62
		cmp	byte ptr [edi+1], 3Eh
		jz	loc_6420EE69
		mov	[esi], eax
		xor	eax, eax
		jmp	loc_6420ED52
; ---------------------------------------------------------------------------
		align 10h

loc_6420EDE0:				; CODE XREF: _normal_scanComment+75j
					; DATA XREF: .rdata:off_6421E1A0o
		mov	eax, ecx	; jumptable 6420EDA5 case 7
		sub	eax, edi
		cmp	eax, 3
		jle	short loc_6420EE5F
		mov	[esp+2Ch+var_10], ecx
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+16Ch]
		mov	ecx, [esp+2Ch+var_10]
		test	eax, eax
		jnz	short loc_6420EDAC ; jumptable 6420EDA5	cases 0,1,8
		add	edi, 4
		jmp	short loc_6420ED8F
; ---------------------------------------------------------------------------

loc_6420EE07:				; CODE XREF: _normal_scanComment+75j
					; DATA XREF: .rdata:off_6421E1A0o
		mov	eax, ecx	; jumptable 6420EDA5 case 6
		sub	eax, edi
		cmp	eax, 2
		jle	short loc_6420EE5F
		mov	[esp+2Ch+var_10], ecx
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+168h]
		mov	ecx, [esp+2Ch+var_10]
		test	eax, eax
		jnz	short loc_6420EDAC ; jumptable 6420EDA5	cases 0,1,8
		add	edi, 3
		jmp	loc_6420ED8F
; ---------------------------------------------------------------------------

loc_6420EE31:				; CODE XREF: _normal_scanComment+75j
					; DATA XREF: .rdata:off_6421E1A0o
		mov	eax, ecx	; jumptable 6420EDA5 case 5
		sub	eax, edi
		cmp	eax, 1
		jle	short loc_6420EE5F
		mov	[esp+2Ch+var_10], ecx
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+164h]
		mov	ecx, [esp+2Ch+var_10]
		test	eax, eax
		jnz	loc_6420EDAC	; jumptable 6420EDA5 cases 0,1,8
		add	edi, 2
		jmp	loc_6420ED8F
; ---------------------------------------------------------------------------

loc_6420EE5F:				; CODE XREF: _normal_scanComment+B7j
					; _normal_scanComment+DEj ...
		mov	eax, 0FFFFFFFEh
		jmp	loc_6420ED52
; ---------------------------------------------------------------------------

loc_6420EE69:				; CODE XREF: _normal_scanComment+9Bj
		add	edi, 2
		mov	eax, 0Dh
		mov	[esi], edi
		jmp	loc_6420ED52
_normal_scanComment endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_scanPi	proc near		; CODE XREF: _normal_contentTok+34Cp
					; _normal_prologTok+5BEj

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		cmp	edx, ecx
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		jz	loc_6420EF86
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		jbe	short loc_6420EED0

loc_6420EEB0:				; CODE XREF: _normal_scanPi+53j
					; _normal_scanPi+C0j ...
		mov	[esi], edx	; jumptable 6420EED3 default case
					; jumptable 6420F04C cases 0,1,8
		xor	ebp, ebp

loc_6420EEB4:				; CODE XREF: _normal_scanPi+82j
					; _normal_scanPi+96j ...
		mov	eax, ebp
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6420EED0:				; CODE XREF: _normal_scanPi+2Ej
		movzx	eax, al
		jmp	ds:off_6421E210[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420EEE0:				; CODE XREF: _normal_scanPi+53j
					; DATA XREF: .rdata:off_6421E210o
		lea	edi, [edx+1]	; jumptable 6420EED3 cases 17,19

loc_6420EEE3:				; CODE XREF: _normal_scanPi+C9j
					; _normal_scanPi+101j ...
		cmp	ecx, edi
		jz	loc_6420EF86
		movzx	eax, byte ptr [edi]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		jbe	loc_6420EF90

loc_6420EEFE:				; CODE XREF: _normal_scanPi+113j
					; _normal_scanPi+174j ...
		mov	[esi], edi	; jumptable 6420EF93 default case
		xor	ebp, ebp
		jmp	short loc_6420EEB4
; ---------------------------------------------------------------------------

loc_6420EF04:				; CODE XREF: _normal_scanPi+53j
					; DATA XREF: .rdata:off_6421E210o
		mov	eax, ecx	; jumptable 6420EED3 case 2
		sub	eax, edx
		cmp	eax, 3
		jg	loc_6420EFA0

loc_6420EF11:				; CODE XREF: _normal_scanPi+9Fj
					; _normal_scanPi+D7j ...
		mov	ebp, 0FFFFFFFEh
		jmp	short loc_6420EEB4
; ---------------------------------------------------------------------------

loc_6420EF18:				; CODE XREF: _normal_scanPi+53j
					; DATA XREF: .rdata:off_6421E210o
		mov	eax, ecx	; jumptable 6420EED3 case 0
		sub	eax, edx
		cmp	eax, 1
		jle	short loc_6420EF11
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+158h]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420EEB0	; jumptable 6420EED3 default case
					; jumptable 6420F04C cases 0,1,8
		lea	edi, [edx+2]
		jmp	short loc_6420EEE3
; ---------------------------------------------------------------------------
		align 10h

loc_6420EF50:				; CODE XREF: _normal_scanPi+53j
					; DATA XREF: .rdata:off_6421E210o
		mov	eax, ecx	; jumptable 6420EED3 case 1
		sub	eax, edx
		cmp	eax, 2
		jle	short loc_6420EF11
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+15Ch]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420EEB0	; jumptable 6420EED3 default case
					; jumptable 6420F04C cases 0,1,8
		lea	edi, [edx+3]
		jmp	loc_6420EEE3
; ---------------------------------------------------------------------------

loc_6420EF86:				; CODE XREF: _normal_scanPi+1Bj
					; _normal_scanPi+65j ...
		mov	ebp, 0FFFFFFFFh
		jmp	loc_6420EEB4
; ---------------------------------------------------------------------------

loc_6420EF90:				; CODE XREF: _normal_scanPi+78j
		movzx	eax, al
		jmp	ds:off_6421E274[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420EFA0:				; CODE XREF: _normal_scanPi+8Bj
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+160h]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420EEB0	; jumptable 6420EED3 default case
					; jumptable 6420F04C cases 0,1,8
		lea	edi, [edx+4]
		jmp	loc_6420EEE3
; ---------------------------------------------------------------------------
		align 10h

loc_6420EFD0:				; CODE XREF: _normal_scanPi+113j
					; DATA XREF: .rdata:off_6421E274o
		add	edi, 1		; jumptable 6420EF93 cases 17,19-22
		jmp	loc_6420EEE3
; ---------------------------------------------------------------------------

loc_6420EFD8:				; CODE XREF: _normal_scanPi+113j
					; DATA XREF: .rdata:off_6421E274o
		mov	eax, edi	; jumptable 6420EF93 case 10
		sub	eax, edx
		cmp	eax, 3
		jz	loc_6420F1E0

loc_6420EFE5:				; CODE XREF: _normal_scanPi+370j
					; _normal_scanPi+389j ...
		mov	ebp, 0Bh

loc_6420EFEA:				; CODE XREF: _normal_scanPi+3ADj
		add	edi, 1
		cmp	edi, ecx
		jz	short loc_6420EF86
		cmp	byte ptr [edi],	3Eh
		jnz	loc_6420EEFE	; jumptable 6420EF93 default case
		add	edi, 1
		mov	[esi], edi
		jmp	loc_6420EEB4
; ---------------------------------------------------------------------------

loc_6420F004:				; CODE XREF: _normal_scanPi+113j
					; DATA XREF: .rdata:off_6421E274o
		mov	eax, edi	; jumptable 6420EF93 cases 4,5,16
		sub	eax, edx
		cmp	eax, 3
		jz	loc_6420F238

loc_6420F011:				; CODE XREF: _normal_scanPi+3C4j
					; _normal_scanPi+3DBj ...
		mov	ebp, 0Bh

loc_6420F016:				; CODE XREF: _normal_scanPi+3FEj
		lea	edx, [edi+1]
		cmp	ecx, edx
		jz	loc_6420EF86
		movzx	eax, byte ptr [edi+1]

loc_6420F025:				; CODE XREF: _normal_scanPi+29Aj
		movzx	eax, al
		cmp	byte ptr [ebx+eax+4Ch],	0Fh
		jbe	short loc_6420F047

loc_6420F02F:				; CODE XREF: _normal_scanPi+1C5j
					; _normal_scanPi+1CCj
					; DATA XREF: ...
		add	edx, 1		; jumptable 6420F04C default case

loc_6420F032:				; CODE XREF: _normal_scanPi+2E5j
					; _normal_scanPi+31Fj ...
		cmp	ecx, edx
		jz	loc_6420EF86
		movzx	eax, byte ptr [edx]
		movzx	eax, al
		cmp	byte ptr [ebx+eax+4Ch],	0Fh ; switch 16	cases
		ja	short loc_6420F02F ; jumptable 6420F04C	default	case

loc_6420F047:				; CODE XREF: _normal_scanPi+1ADj
		movzx	eax, byte ptr [ebx+eax+4Ch]
		jmp	ds:off_6421E2D8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420F053:				; CODE XREF: _normal_scanPi+113j
					; DATA XREF: .rdata:off_6421E274o
		mov	eax, ecx	; jumptable 6420EF93 case 2
		sub	eax, edi
		cmp	eax, 3
		jle	loc_6420EF11
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+154h]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420EEFE	; jumptable 6420EF93 default case
		add	edi, 4
		jmp	loc_6420EEE3
; ---------------------------------------------------------------------------
		align 10h

loc_6420F090:				; CODE XREF: _normal_scanPi+113j
					; DATA XREF: .rdata:off_6421E274o
		mov	eax, ecx	; jumptable 6420EF93 case 1
		sub	eax, edi
		cmp	eax, 2
		jle	loc_6420EF11
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+150h]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420EEFE	; jumptable 6420EF93 default case
		add	edi, 3
		jmp	loc_6420EEE3
; ---------------------------------------------------------------------------
		align 10h

loc_6420F0D0:				; CODE XREF: _normal_scanPi+113j
					; DATA XREF: .rdata:off_6421E274o
		mov	eax, ecx	; jumptable 6420EF93 case 0
		sub	eax, edi
		cmp	eax, 1
		jle	loc_6420EF11
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+14Ch]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420EEFE	; jumptable 6420EF93 default case
		add	edi, 2
		jmp	loc_6420EEE3
; ---------------------------------------------------------------------------

loc_6420F10A:				; CODE XREF: _normal_scanPi+1CCj
					; DATA XREF: .rdata:off_6421E2D8o
		add	edx, 1		; jumptable 6420F04C case 15
		cmp	edx, ecx
		jz	loc_6420EF86
		movzx	eax, byte ptr [edx]
		cmp	al, 3Eh
		jnz	loc_6420F025
		add	edx, 1
		mov	[esi], edx
		jmp	loc_6420EEB4
; ---------------------------------------------------------------------------
		align 10h

loc_6420F130:				; CODE XREF: _normal_scanPi+1CCj
					; DATA XREF: .rdata:off_6421E2D8o
		mov	eax, ecx	; jumptable 6420F04C case 7
		sub	eax, edx
		cmp	eax, 3
		jle	loc_6420EF11
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+16Ch]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jnz	loc_6420EEB0	; jumptable 6420EED3 default case
					; jumptable 6420F04C cases 0,1,8
		add	edx, 4
		jmp	loc_6420F032
; ---------------------------------------------------------------------------

loc_6420F16A:				; CODE XREF: _normal_scanPi+1CCj
					; DATA XREF: .rdata:off_6421E2D8o
		mov	eax, ecx	; jumptable 6420F04C case 6
		sub	eax, edx
		cmp	eax, 2
		jle	loc_6420EF11
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+168h]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jnz	loc_6420EEB0	; jumptable 6420EED3 default case
					; jumptable 6420F04C cases 0,1,8
		add	edx, 3
		jmp	loc_6420F032
; ---------------------------------------------------------------------------

loc_6420F1A4:				; CODE XREF: _normal_scanPi+1CCj
					; DATA XREF: .rdata:off_6421E2D8o
		mov	eax, ecx	; jumptable 6420F04C case 5
		sub	eax, edx
		cmp	eax, 1
		jle	loc_6420EF11
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+164h]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jnz	loc_6420EEB0	; jumptable 6420EED3 default case
					; jumptable 6420F04C cases 0,1,8
		add	edx, 2
		jmp	loc_6420F032
; ---------------------------------------------------------------------------
		align 10h

loc_6420F1E0:				; CODE XREF: _normal_scanPi+15Fj
		movzx	eax, byte ptr [edx]
		cmp	al, 58h
		jz	loc_6420F290
		cmp	al, 78h
		lea	esi, [esi+0]
		jnz	loc_6420EFE5
		xor	ebx, ebx

loc_6420F1F8:				; CODE XREF: _normal_scanPi+415j
		movzx	eax, byte ptr [edx+1]
		lea	ebp, [edx+1]
		cmp	al, 4Dh
		jz	loc_6420F2A2
		cmp	al, 6Dh
		jnz	loc_6420EFE5

loc_6420F20F:				; CODE XREF: _normal_scanPi+427j
		movzx	eax, byte ptr [ebp+1]
		cmp	al, 4Ch
		jz	loc_6420EEFE	; jumptable 6420EF93 default case
		cmp	al, 6Ch
		lea	esi, [esi+0]
		jnz	loc_6420EFE5
		test	ebx, ebx
		mov	ebp, 0Ch
		jz	loc_6420EFEA
		jmp	loc_6420EEFE	; jumptable 6420EF93 default case
; ---------------------------------------------------------------------------

loc_6420F238:				; CODE XREF: _normal_scanPi+18Bj
		movzx	eax, byte ptr [edx]
		cmp	al, 58h
		lea	esi, [esi+0]
		jz	short loc_6420F29A
		cmp	al, 78h
		jnz	loc_6420F011
		xor	eax, eax

loc_6420F24C:				; CODE XREF: _normal_scanPi+420j
		lea	ebp, [edx+1]
		movzx	edx, byte ptr [edx+1]
		cmp	dl, 4Dh
		jz	short loc_6420F2AC
		cmp	dl, 6Dh
		jnz	loc_6420F011

loc_6420F261:				; CODE XREF: _normal_scanPi+431j
		movzx	edx, byte ptr [ebp+1]
		cmp	dl, 4Ch
		jz	loc_6420EEFE	; jumptable 6420EF93 default case
		cmp	dl, 6Ch
		jnz	loc_6420F011
		test	eax, eax
		mov	ebp, 0Ch
		jz	loc_6420F016
		jmp	loc_6420EEFE	; jumptable 6420EF93 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6420F290:				; CODE XREF: _normal_scanPi+365j
		mov	ebx, 1
		jmp	loc_6420F1F8
; ---------------------------------------------------------------------------

loc_6420F29A:				; CODE XREF: _normal_scanPi+3C0j
		mov	eax, 1
		nop
		jmp	short loc_6420F24C
; ---------------------------------------------------------------------------

loc_6420F2A2:				; CODE XREF: _normal_scanPi+381j
		mov	ebx, 1
		jmp	loc_6420F20F
; ---------------------------------------------------------------------------

loc_6420F2AC:				; CODE XREF: _normal_scanPi+3D6j
		mov	eax, 1
		jmp	short loc_6420F261
_normal_scanPi	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_cdataSectionTok	proc near	; DATA XREF: .rdata:642228C8o
					; .rdata:64223168o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	eax, 0FFFFFFFCh
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], ebx
		cmp	ebp, edi
		jz	short loc_6420F320
		movzx	eax, byte ptr [ebp+0]
		cmp	byte ptr [esi+eax+4Ch],	0Ah ; switch 11	cases
		jbe	short loc_6420F334

loc_6420F2F3:				; CODE XREF: _normal_cdataSectionTok+79j
					; DATA XREF: .rdata:off_6421E318o
		lea	ebx, [ebp+1]	; jumptable 6420F339 default case

loc_6420F2F6:				; CODE XREF: _normal_cdataSectionTok+9Bj
					; _normal_cdataSectionTok+112j	...
		cmp	edi, ebx
		jz	short loc_6420F312

loc_6420F2FA:				; CODE XREF: _normal_cdataSectionTok+50j
		movzx	eax, byte ptr [ebx]

loc_6420F2FD:				; CODE XREF: _normal_cdataSectionTok+136j
		movzx	eax, al
		cmp	byte ptr [esi+eax+4Ch],	0Ah ; switch 11	cases
		jbe	loc_6420F424

loc_6420F30B:				; CODE XREF: _normal_cdataSectionTok+169j
					; DATA XREF: .rdata:off_6421E344o
		add	ebx, 1		; jumptable 6420F429 default case
		cmp	edi, ebx
		jnz	short loc_6420F2FA

loc_6420F312:				; CODE XREF: _normal_cdataSectionTok+38j
		mov	edx, [esp+2Ch+arg_C]
		mov	eax, 6
		mov	[edx], edi
		lea	esi, [esi+0]

loc_6420F320:				; CODE XREF: _normal_cdataSectionTok+26j
					; _normal_cdataSectionTok+A5j ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6420F334:				; CODE XREF: _normal_cdataSectionTok+31j
		movzx	eax, byte ptr [esi+eax+4Ch]
		jmp	ds:off_6421E318[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420F340:				; CODE XREF: _normal_cdataSectionTok+79j
					; DATA XREF: .rdata:off_6421E318o
		mov	eax, edi	; jumptable 6420F339 case 6
		sub	eax, ebp
		cmp	eax, 2
		jle	short loc_6420F3AD
		mov	[esp+2Ch+var_28], ebp
		lea	ebx, [ebp+3]
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jz	short loc_6420F2F6

loc_6420F35D:				; CODE XREF: _normal_cdataSectionTok+79j
					; DATA XREF: .rdata:off_6421E318o
		mov	eax, [esp+2Ch+arg_C] ; jumptable 6420F339 cases	0,1,8
		mov	[eax], ebp
		xor	eax, eax
		jmp	short loc_6420F320
; ---------------------------------------------------------------------------

loc_6420F367:				; CODE XREF: _normal_cdataSectionTok+79j
					; DATA XREF: .rdata:off_6421E318o
		mov	eax, [esp+2Ch+arg_C] ; jumptable 6420F339 case 10
		add	ebp, 1
		mov	[eax], ebp
		mov	eax, 7
		jmp	short loc_6420F320
; ---------------------------------------------------------------------------

loc_6420F377:				; CODE XREF: _normal_cdataSectionTok+79j
					; DATA XREF: .rdata:off_6421E318o
		lea	eax, [ebp+1]	; jumptable 6420F339 case 9
		cmp	eax, edi
		jz	loc_6420F4D1
		movzx	edx, byte ptr [ebp+1]
		cmp	byte ptr [esi+edx+4Ch],	0Ah
		jnz	short loc_6420F390
		lea	eax, [ebp+2]

loc_6420F390:				; CODE XREF: _normal_cdataSectionTok+CBj
		mov	edx, [esp+2Ch+arg_C]
		mov	[edx], eax
		mov	eax, 7
		jmp	short loc_6420F320
; ---------------------------------------------------------------------------
		align 10h

loc_6420F3A0:				; CODE XREF: _normal_cdataSectionTok+79j
					; DATA XREF: .rdata:off_6421E318o
		mov	eax, edi	; jumptable 6420F339 case 7
		sub	eax, ebp
		cmp	eax, 3
		jg	loc_6420F4B4

loc_6420F3AD:				; CODE XREF: _normal_cdataSectionTok+87j
					; _normal_cdataSectionTok+FEj
		mov	eax, 0FFFFFFFEh
		jmp	loc_6420F320
; ---------------------------------------------------------------------------

loc_6420F3B7:				; CODE XREF: _normal_cdataSectionTok+79j
					; DATA XREF: .rdata:off_6421E318o
		mov	eax, edi	; jumptable 6420F339 case 5
		sub	eax, ebp
		cmp	eax, 1
		jle	short loc_6420F3AD
		mov	[esp+2Ch+var_28], ebp
		lea	ebx, [ebp+2]
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jz	loc_6420F2F6

loc_6420F3D8:				; CODE XREF: _normal_cdataSectionTok+20Cj
		mov	edx, [esp+2Ch+arg_C]
		xor	eax, eax
		mov	[edx], ebp
		jmp	loc_6420F320
; ---------------------------------------------------------------------------

loc_6420F3E5:				; CODE XREF: _normal_cdataSectionTok+79j
					; DATA XREF: .rdata:off_6421E318o
		lea	ebx, [ebp+1]	; jumptable 6420F339 case 4
		cmp	ebx, edi
		jz	loc_6420F4D1
		movzx	eax, byte ptr [ebp+1]
		cmp	al, 5Dh
		jnz	loc_6420F2FD
		lea	eax, [ebp+2]
		cmp	eax, edi
		jz	loc_6420F4D1
		cmp	byte ptr [ebp+2], 3Eh
		jnz	loc_6420F2F6
		mov	eax, [esp+2Ch+arg_C]
		add	ebp, 3
		mov	[eax], ebp
		mov	eax, 28h
		jmp	loc_6420F320
; ---------------------------------------------------------------------------

loc_6420F424:				; CODE XREF: _normal_cdataSectionTok+45j
		movzx	eax, byte ptr [esi+eax+4Ch]
		jmp	ds:off_6421E344[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420F430:				; CODE XREF: _normal_cdataSectionTok+169j
					; _normal_cdataSectionTok+1B7j	...
		mov	eax, [esp+2Ch+arg_C] ; jumptable 6420F429 cases	0,1,4,8-10
		mov	[eax], ebx
		mov	eax, 6
		jmp	loc_6420F320
; ---------------------------------------------------------------------------

loc_6420F440:				; CODE XREF: _normal_cdataSectionTok+169j
					; DATA XREF: .rdata:off_6421E344o
		mov	eax, edi	; jumptable 6420F429 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_6420F4E0
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	loc_6420F4E0
		add	ebx, 4
		jmp	loc_6420F2F6
; ---------------------------------------------------------------------------
		align 10h

loc_6420F470:				; CODE XREF: _normal_cdataSectionTok+169j
					; DATA XREF: .rdata:off_6421E344o
		mov	eax, edi	; jumptable 6420F429 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_6420F430 ; jumptable 6420F429	cases 0,1,4,8-10
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	short loc_6420F430 ; jumptable 6420F429	cases 0,1,4,8-10
		add	ebx, 3
		jmp	loc_6420F2F6
; ---------------------------------------------------------------------------

loc_6420F492:				; CODE XREF: _normal_cdataSectionTok+169j
					; DATA XREF: .rdata:off_6421E344o
		mov	eax, edi	; jumptable 6420F429 case 5
		sub	eax, ebx
		cmp	eax, 1
		jle	short loc_6420F4E0
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	short loc_6420F4E0
		add	ebx, 2
		jmp	loc_6420F2F6
; ---------------------------------------------------------------------------

loc_6420F4B4:				; CODE XREF: _normal_cdataSectionTok+E7j
		mov	[esp+2Ch+var_28], ebp
		lea	ebx, [ebp+4]
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jz	loc_6420F2F6
		jmp	loc_6420F3D8
; ---------------------------------------------------------------------------

loc_6420F4D1:				; CODE XREF: _normal_cdataSectionTok+BCj
					; _normal_cdataSectionTok+12Aj	...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6420F320
; ---------------------------------------------------------------------------
		align 10h

loc_6420F4E0:				; CODE XREF: _normal_cdataSectionTok+187j
					; _normal_cdataSectionTok+19Cj	...
		mov	edx, [esp+2Ch+arg_C]
		mov	eax, 6
		mov	[edx], ebx
		jmp	loc_6420F320
_normal_cdataSectionTok	endp


; =============== S U B	R O U T	I N E =======================================


_normal_scanRef	proc near		; CODE XREF: _normal_contentTok+1FAp
					; _normal_contentTok+ADBp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		cmp	edx, ecx
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		jz	loc_6420F5A1
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		jbe	short loc_6420F538

loc_6420F520:				; CODE XREF: _normal_scanRef+4Bj
					; _normal_scanRef+A8j ...
		mov	[esi], edx	; jumptable 6420F53B default case
		xor	eax, eax

loc_6420F524:				; CODE XREF: _normal_scanRef+70j
					; _normal_scanRef+B6j ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6420F538:				; CODE XREF: _normal_scanRef+2Ej
		movzx	eax, al
		jmp	ds:off_6421E370[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420F542:				; CODE XREF: _normal_scanRef+4Bj
					; DATA XREF: .rdata:off_6421E370o
		lea	edi, [edx+1]	; jumptable 6420F53B cases 17,19

loc_6420F545:				; CODE XREF: _normal_scanRef+13Dj
					; _normal_scanRef+174j	...
		cmp	ecx, edi
		jz	short loc_6420F5A1
		movzx	eax, byte ptr [edi]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		jbe	loc_6420F632

loc_6420F55C:				; CODE XREF: _normal_scanRef+8Dj
					; _normal_scanRef+145j
					; DATA XREF: ...
		mov	[esi], edi	; jumptable 6420F635 default case
		xor	eax, eax
		jmp	short loc_6420F524
; ---------------------------------------------------------------------------

loc_6420F562:				; CODE XREF: _normal_scanRef+4Bj
					; DATA XREF: .rdata:off_6421E370o
		lea	edi, [edx+1]	; jumptable 6420F53B case 14
		cmp	ecx, edi
		jz	short loc_6420F5A1
		movzx	eax, byte ptr [edx+1]
		cmp	al, 78h
		jz	loc_6420F730
		movzx	eax, al
		cmp	byte ptr [ebx+eax+4Ch],	19h
		jnz	short loc_6420F55C ; jumptable 6420F635	default	case
		add	edx, 2
		cmp	ecx, edx
		jz	short loc_6420F5A1

loc_6420F586:				; CODE XREF: _normal_scanRef+AFj
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		cmp	al, 12h
		jz	loc_6420F756
		cmp	al, 19h
		jnz	short loc_6420F520 ; jumptable 6420F53B	default	case
		add	edx, 1
		cmp	ecx, edx
		jnz	short loc_6420F586

loc_6420F5A1:				; CODE XREF: _normal_scanRef+1Bj
					; _normal_scanRef+57j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6420F524
; ---------------------------------------------------------------------------
		align 10h

loc_6420F5B0:				; CODE XREF: _normal_scanRef+4Bj
					; DATA XREF: .rdata:off_6421E370o
		mov	eax, ecx	; jumptable 6420F53B case 2
		sub	eax, edx
		cmp	eax, 3
		jg	loc_6420F640

loc_6420F5BD:				; CODE XREF: _normal_scanRef+DEj
					; _normal_scanRef+117j	...
		mov	eax, 0FFFFFFFEh
		jmp	loc_6420F524
; ---------------------------------------------------------------------------

loc_6420F5C7:				; CODE XREF: _normal_scanRef+4Bj
					; DATA XREF: .rdata:off_6421E370o
		mov	eax, ecx	; jumptable 6420F53B case 1
		sub	eax, edx
		cmp	eax, 2
		jle	short loc_6420F5BD
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+15Ch]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jnz	loc_6420F723

loc_6420F5F5:				; CODE XREF: _normal_scanRef+138j
					; _normal_scanRef+16Fj
		mov	[esi], edx
		jmp	loc_6420F524
; ---------------------------------------------------------------------------
		align 10h

loc_6420F600:				; CODE XREF: _normal_scanRef+4Bj
					; DATA XREF: .rdata:off_6421E370o
		mov	eax, ecx	; jumptable 6420F53B case 0
		sub	eax, edx
		cmp	eax, 1
		jle	short loc_6420F5BD
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+158h]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	short loc_6420F5F5
		lea	edi, [edx+2]
		jmp	loc_6420F545
; ---------------------------------------------------------------------------

loc_6420F632:				; CODE XREF: _normal_scanRef+66j
		movzx	eax, al
		jmp	ds:off_6421E3D4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6420F640:				; CODE XREF: _normal_scanRef+C7j
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+160h]
		mov	edx, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	short loc_6420F5F5
		lea	edi, [edx+4]
		jmp	loc_6420F545
; ---------------------------------------------------------------------------
		align 10h

loc_6420F670:				; CODE XREF: _normal_scanRef+145j
					; DATA XREF: .rdata:off_6421E3D4o
		add	edi, 1		; jumptable 6420F635 cases 17,19-22
		jmp	loc_6420F545
; ---------------------------------------------------------------------------

loc_6420F678:				; CODE XREF: _normal_scanRef+145j
					; DATA XREF: .rdata:off_6421E3D4o
		mov	eax, ecx	; jumptable 6420F635 case 1
		sub	eax, edi
		cmp	eax, 2
		jle	loc_6420F5BD
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+150h]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420F7A0
		add	edi, 3
		jmp	loc_6420F545
; ---------------------------------------------------------------------------
		align 10h

loc_6420F6B0:				; CODE XREF: _normal_scanRef+145j
					; DATA XREF: .rdata:off_6421E3D4o
		mov	eax, ecx	; jumptable 6420F635 case 0
		sub	eax, edi
		cmp	eax, 1
		jle	loc_6420F5BD
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+14Ch]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420F7A0
		add	edi, 2
		jmp	loc_6420F545
; ---------------------------------------------------------------------------

loc_6420F6E2:				; CODE XREF: _normal_scanRef+145j
					; DATA XREF: .rdata:off_6421E3D4o
		add	edi, 1		; jumptable 6420F635 case 13
		mov	eax, 9
		mov	[esi], edi
		jmp	loc_6420F524
; ---------------------------------------------------------------------------

loc_6420F6F1:				; CODE XREF: _normal_scanRef+145j
					; DATA XREF: .rdata:off_6421E3D4o
		mov	eax, ecx	; jumptable 6420F635 case 2
		sub	eax, edi
		cmp	eax, 3
		jle	loc_6420F5BD
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+154h]
		mov	ecx, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_6420F7A0
		add	edi, 4
		jmp	loc_6420F545
; ---------------------------------------------------------------------------

loc_6420F723:				; CODE XREF: _normal_scanRef+FFj
		lea	edi, [edx+3]
		jmp	loc_6420F545
; ---------------------------------------------------------------------------
		align 10h

loc_6420F730:				; CODE XREF: _normal_scanRef+7Fj
		lea	ebp, [edx+2]
		cmp	ecx, ebp
		jz	loc_6420F5A1
		movzx	edi, byte ptr [edx+2]
		movzx	edi, byte ptr [ebx+edi+4Ch]
		sub	edi, 18h
		mov	eax, edi
		cmp	al, 1
		jbe	short loc_6420F765
		mov	[esi], ebp
		xor	eax, eax
		jmp	loc_6420F524
; ---------------------------------------------------------------------------

loc_6420F756:				; CODE XREF: _normal_scanRef+A0j
					; _normal_scanRef+28Aj
		add	edx, 1
		mov	eax, 0Ah
		mov	[esi], edx
		jmp	loc_6420F524
; ---------------------------------------------------------------------------

loc_6420F765:				; CODE XREF: _normal_scanRef+25Bj
		add	edx, 3
		cmp	ecx, edx
		jz	loc_6420F5A1

loc_6420F770:				; CODE XREF: _normal_scanRef+2A2j
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		cmp	al, 12h
		jz	short loc_6420F756
		jb	loc_6420F520	; jumptable 6420F53B default case
		sub	eax, 18h
		cmp	al, 1
		ja	loc_6420F520	; jumptable 6420F53B default case
		add	edx, 1
		cmp	ecx, edx
		jnz	short loc_6420F770
		jmp	loc_6420F5A1
; ---------------------------------------------------------------------------
		align 10h

loc_6420F7A0:				; CODE XREF: _normal_scanRef+1ACj
					; _normal_scanRef+1E4j	...
		mov	[esi], edi
		jmp	loc_6420F524
_normal_scanRef	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_contentTok proc	near		; DATA XREF: .rdata:off_642228C4o
					; .rdata:64223164o ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	eax, 0FFFFFFFCh
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_4], ebp
		mov	ebp, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_10], ebx
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_8], edi
		mov	edi, [esp+4Ch+arg_C]
		cmp	ebp, esi
		jz	loc_6420F880
		movzx	eax, byte ptr [ebp+0]
		lea	edx, [ebp+1]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah ; switch 11	cases
		jbe	loc_6420F894

loc_6420F7F2:				; CODE XREF: _normal_contentTok+262j
					; _normal_contentTok+28Bj ...
		cmp	esi, edx	; jumptable 6420F899 default case
		jz	loc_6420FFE0
		movzx	ecx, byte ptr [edx]
		mov	ebp, edx
		nop

loc_6420F800:				; CODE XREF: _normal_contentTok+12Dj
					; _normal_contentTok+2B0j
		movzx	ecx, cl
		cmp	byte ptr [ebx+ecx+4Ch],	0Ah ; switch 11	cases
		lea	eax, [ebp+1]
		ja	loc_6420F8D0	; jumptable 6420F816 default case
		movzx	eax, byte ptr [ebx+ecx+4Ch]
		jmp	ds:off_6421E438[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420F81D:				; CODE XREF: _normal_contentTok+32Aj
		lea	eax, [edx+2]
		sub	esi, eax
		cmp	esi, 5
		jle	loc_6420FC20
		cmp	byte ptr [edx+2], 43h
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		cmp	byte ptr [edx+3], 44h
		lea	eax, [edx+3]
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		cmp	byte ptr [edx+4], 41h
		lea	eax, [edx+4]
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		cmp	byte ptr [edx+5], 54h
		lea	eax, [edx+5]
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		cmp	byte ptr [edx+6], 41h
		lea	eax, [edx+6]
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		cmp	byte ptr [edx+7], 5Bh
		lea	eax, [edx+7]
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		add	edx, 8
		mov	eax, 8
		mov	[edi], edx

loc_6420F880:				; CODE XREF: _normal_contentTok+2Aj
					; _normal_contentTok+F7j ...
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6420F894:				; CODE XREF: _normal_contentTok+3Cj
		movzx	eax, byte ptr [ebx+eax+4Ch]
		jmp	ds:off_6421E464[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420F8A0:				; CODE XREF: _normal_contentTok+66j
					; _normal_contentTok+107j ...
		mov	[edi], ebp	; jumptable 6420F816 cases 0-3,8-10
		mov	eax, 6
		jmp	short loc_6420F880
; ---------------------------------------------------------------------------
		align 10h

loc_6420F8B0:				; CODE XREF: _normal_contentTok+66j
					; DATA XREF: .rdata:off_6421E438o
		mov	eax, esi	; jumptable 6420F816 case 7
		sub	eax, ebp
		cmp	eax, 3
		jle	short loc_6420F8A0 ; jumptable 6420F816	cases 0-3,8-10
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+16Ch]
		test	eax, eax
		jnz	short loc_6420F8A0 ; jumptable 6420F816	cases 0-3,8-10
		lea	eax, [ebp+4]
		lea	esi, [esi+0]

loc_6420F8D0:				; CODE XREF: _normal_contentTok+5Bj
					; _normal_contentTok+14Fj ...
		cmp	esi, eax	; jumptable 6420F816 default case
		jz	loc_6420FFE0

loc_6420F8D8:				; CODE XREF: _normal_contentTok+180j
					; _normal_contentTok+191j
		movzx	ecx, byte ptr [eax]
		mov	ebp, eax
		jmp	loc_6420F800
; ---------------------------------------------------------------------------

loc_6420F8E2:				; CODE XREF: _normal_contentTok+66j
					; DATA XREF: .rdata:off_6421E438o
		mov	eax, esi	; jumptable 6420F816 case 6
		sub	eax, ebp
		cmp	eax, 2
		jle	short loc_6420F8A0 ; jumptable 6420F816	cases 0-3,8-10
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+168h]
		test	eax, eax
		jnz	short loc_6420F8A0 ; jumptable 6420F816	cases 0-3,8-10
		lea	eax, [ebp+3]
		jmp	short loc_6420F8D0 ; jumptable 6420F816	default	case
; ---------------------------------------------------------------------------

loc_6420F901:				; CODE XREF: _normal_contentTok+66j
					; DATA XREF: .rdata:off_6421E438o
		mov	eax, esi	; jumptable 6420F816 case 5
		sub	eax, ebp
		cmp	eax, 1
		jle	short loc_6420F8A0 ; jumptable 6420F816	cases 0-3,8-10
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+164h]
		test	eax, eax
		jnz	short loc_6420F8A0 ; jumptable 6420F816	cases 0-3,8-10
		lea	eax, [ebp+2]
		jmp	short loc_6420F8D0 ; jumptable 6420F816	default	case
; ---------------------------------------------------------------------------

loc_6420F920:				; CODE XREF: _normal_contentTok+66j
					; DATA XREF: .rdata:off_6421E438o
		lea	eax, [ebp+1]	; jumptable 6420F816 case 4
		cmp	eax, esi
		jz	loc_6420F8A0	; jumptable 6420F816 cases 0-3,8-10
		cmp	byte ptr [ebp+1], 5Dh
		nop
		jnz	short loc_6420F8D8
		lea	ecx, [ebp+2]
		cmp	ecx, esi
		jz	loc_6420F8A0	; jumptable 6420F816 cases 0-3,8-10
		cmp	byte ptr [ebp+2], 3Eh
		jnz	short loc_6420F8D8
		mov	[edi], ecx
		xor	eax, eax
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420F94C:				; CODE XREF: _normal_contentTok+5C6j
		cmp	al, 15h
		xchg	ax, ax
		jz	loc_6420FD5E	; jumptable 6420FCDF cases 4,5,16

loc_6420F956:				; CODE XREF: _normal_contentTok+E9j
					; _normal_contentTok+268j ...
		mov	[edi], ebp	; jumptable 6420F899 cases 0,1,8
		xor	eax, eax
		jmp	loc_6420F880
; ---------------------------------------------------------------------------
		align 10h

loc_6420F960:				; CODE XREF: _normal_contentTok+E9j
					; DATA XREF: .rdata:off_6421E464o
		lea	edx, [ebp+1]	; jumptable 6420F899 case 9
		mov	eax, 0FFFFFFFDh
		cmp	edx, esi
		jz	loc_6420F880
		movzx	eax, byte ptr [ebp+1]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		jnz	short loc_6420F97E
		lea	edx, [ebp+2]

loc_6420F97E:				; CODE XREF: _normal_contentTok+1C9j
		mov	[edi], edx
		mov	eax, 7
		jmp	loc_6420F880
; ---------------------------------------------------------------------------
		align 10h

loc_6420F990:				; CODE XREF: _normal_contentTok+E9j
					; DATA XREF: .rdata:off_6421E464o
		add	ebp, 1		; jumptable 6420F899 case 10
		mov	eax, 7
		mov	[edi], ebp
		jmp	loc_6420F880
; ---------------------------------------------------------------------------
		align 10h

loc_6420F9A0:				; CODE XREF: _normal_contentTok+E9j
					; DATA XREF: .rdata:off_6421E464o
		lea	edx, [ebp+1]	; jumptable 6420F899 case 3
		mov	ecx, esi
		mov	eax, ebx
		mov	[esp+4Ch+var_4C], edi
		call	_normal_scanRef
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420F9B4:				; CODE XREF: _normal_contentTok+E9j
					; DATA XREF: .rdata:off_6421E464o
		lea	edx, [ebp+1]	; jumptable 6420F899 case 2
		cmp	esi, edx
		jz	loc_6420FC20
		movzx	eax, byte ptr [ebp+1]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		jbe	loc_6420FA65

loc_6420F9D3:				; CODE XREF: _normal_contentTok+2B8j
					; _normal_contentTok+4F5j ...
		mov	[edi], edx	; jumptable 6420FA68 default case
		xor	eax, eax
		jmp	loc_6420F880
; ---------------------------------------------------------------------------
		align 10h

loc_6420F9E0:				; CODE XREF: _normal_contentTok+E9j
					; DATA XREF: .rdata:off_6421E464o
		mov	eax, esi	; jumptable 6420F899 case 7
		sub	eax, ebp
		cmp	eax, 3
		jg	loc_6420FFC0

loc_6420F9ED:				; CODE XREF: _normal_contentTok+24Ej
					; _normal_contentTok+277j ...
		mov	eax, 0FFFFFFFEh
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420F9F7:				; CODE XREF: _normal_contentTok+E9j
					; DATA XREF: .rdata:off_6421E464o
		mov	eax, esi	; jumptable 6420F899 case 6
		sub	eax, ebp
		cmp	eax, 2
		jle	short loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+168h]
		lea	edx, [ebp+3]
		test	eax, eax
		jz	loc_6420F7F2	; jumptable 6420F899 default case
		jmp	loc_6420F956	; jumptable 6420F899 cases 0,1,8
; ---------------------------------------------------------------------------
		align 10h

loc_6420FA20:				; CODE XREF: _normal_contentTok+E9j
					; DATA XREF: .rdata:off_6421E464o
		mov	eax, esi	; jumptable 6420F899 case 5
		sub	eax, ebp
		cmp	eax, 1
		jle	short loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+164h]
		lea	edx, [ebp+2]
		test	eax, eax
		jz	loc_6420F7F2	; jumptable 6420F899 default case
		jmp	loc_6420F956	; jumptable 6420F899 cases 0,1,8
; ---------------------------------------------------------------------------

loc_6420FA46:				; CODE XREF: _normal_contentTok+E9j
					; DATA XREF: .rdata:off_6421E464o
		lea	edx, [ebp+1]	; jumptable 6420F899 case 4
		cmp	edx, esi
		jz	loc_6420FFEC
		movzx	ecx, byte ptr [ebp+1]
		cmp	cl, 5Dh
		jz	loc_6421000A
		mov	ebp, edx
		jmp	loc_6420F800
; ---------------------------------------------------------------------------

loc_6420FA65:				; CODE XREF: _normal_contentTok+21Dj
		movzx	eax, al
		jmp	ds:off_6421E490[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420FA6F:				; CODE XREF: _normal_contentTok+2B8j
					; DATA XREF: .rdata:off_6421E490o
		lea	ebp, [edx+1]	; jumptable 6420FA68 cases 17,19

loc_6420FA72:				; CODE XREF: _normal_contentTok+3B0j
					; _normal_contentTok+3DEj ...
		cmp	esi, ebp
		jz	loc_6420FC20
		xor	edx, edx

loc_6420FA7C:				; CODE XREF: _normal_contentTok+46Aj
		movzx	eax, byte ptr [ebp+0]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		ja	loc_6420F956	; jumptable 6420F899 cases 0,1,8
		movzx	eax, al
		jmp	ds:off_6421E4F4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420FA9A:				; CODE XREF: _normal_contentTok+2B8j
					; DATA XREF: .rdata:off_6421E490o
		lea	ebp, [edx+1]	; jumptable 6420FA68 case 12
		cmp	esi, ebp
		jz	loc_6420FC20
		movzx	eax, byte ptr [edx+1]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		ja	loc_6420F956	; jumptable 6420F899 cases 0,1,8
		movzx	eax, al
		jmp	ds:off_6421E558[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420FAC3:				; CODE XREF: _normal_contentTok+2B8j
					; DATA XREF: .rdata:off_6421E490o
		lea	eax, [edx+1]	; jumptable 6420FA68 case 11
		cmp	esi, eax
		jz	loc_6420FC20
		movzx	ecx, byte ptr [edx+1]
		movzx	ecx, byte ptr [ebx+ecx+4Ch]
		cmp	cl, 14h
		jz	loc_6420F81D
		cmp	cl, 1Bh
		jz	loc_6420FFF6

loc_6420FAE9:				; CODE XREF: _normal_contentTok+7Fj
					; _normal_contentTok+8Cj ...
		mov	[edi], eax	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		xor	eax, eax
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FAF2:				; CODE XREF: _normal_contentTok+2B8j
					; DATA XREF: .rdata:off_6421E490o
		add	edx, 1		; jumptable 6420FA68 case 10
		mov	ecx, esi
		mov	eax, ebx
		mov	[esp+4Ch+var_4C], edi
		call	_normal_scanPi
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FB06:				; CODE XREF: _normal_contentTok+2B8j
					; DATA XREF: .rdata:off_6421E490o
		mov	eax, esi	; jumptable 6420FA68 case 2
		sub	eax, edx
		cmp	eax, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+160h]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jnz	loc_6420FFB6

loc_6420FB30:				; CODE XREF: _normal_contentTok+3ABj
					; _normal_contentTok+3D9j ...
		mov	[edi], edx
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FB37:				; CODE XREF: _normal_contentTok+2B8j
					; DATA XREF: .rdata:off_6421E490o
		mov	eax, esi	; jumptable 6420FA68 case 1
		sub	eax, edx
		cmp	eax, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+15Ch]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jz	short loc_6420FB30
		lea	ebp, [edx+3]
		jmp	loc_6420FA72
; ---------------------------------------------------------------------------

loc_6420FB65:				; CODE XREF: _normal_contentTok+2B8j
					; DATA XREF: .rdata:off_6421E490o
		mov	eax, esi	; jumptable 6420FA68 case 0
		sub	eax, edx
		cmp	eax, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+158h]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jz	short loc_6420FB30
		lea	ebp, [edx+2]
		jmp	loc_6420FA72
; ---------------------------------------------------------------------------

loc_6420FB93:				; CODE XREF: _normal_contentTok+2E3j
					; _normal_contentTok+434j
					; DATA XREF: ...
		lea	eax, [ebp+1]	; jumptable 6420FA93 case 12
					; jumptable 6420FBE4 case 12
		cmp	esi, eax
		jz	loc_6420FC20
		cmp	byte ptr [ebp+1], 3Eh
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		add	ebp, 2
		mov	eax, 4
		mov	[edi], ebp
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FBB7:				; CODE XREF: _normal_contentTok+2E3j
					; _normal_contentTok+434j
					; DATA XREF: ...
		add	ebp, 1		; jumptable 6420FA93 case 6
					; jumptable 6420FBE4 case 6
		mov	eax, 2
		mov	[edi], ebp
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FBC6:				; CODE XREF: _normal_contentTok+2E3j
					; _normal_contentTok+434j
					; DATA XREF: ...
		add	ebp, 1		; jumptable 6420FA93 cases 4,5,16
					; jumptable 6420FBE4 cases 4,5,16
		cmp	esi, ebp
		jz	short loc_6420FC20
		movzx	eax, byte ptr [ebp+0]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		ja	loc_6420F956	; jumptable 6420F899 cases 0,1,8
		movzx	eax, al
		jmp	ds:off_6421E5BC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420FBEB:				; CODE XREF: _normal_contentTok+2E3j
					; DATA XREF: .rdata:off_6421E4F4o
		mov	eax, esi	; jumptable 6420FA93 case 2
		sub	eax, ebp
		cmp	eax, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+154h]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jz	loc_6420FD08
		add	ebp, 4

loc_6420FC18:				; CODE XREF: _normal_contentTok+4A7j
					; _normal_contentTok+4D6j ...
		cmp	esi, ebp
		jnz	loc_6420FA7C

loc_6420FC20:				; CODE XREF: _normal_contentTok+75j
					; _normal_contentTok+209j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FC2A:				; CODE XREF: _normal_contentTok+2E3j
					; DATA XREF: .rdata:off_6421E4F4o
		mov	eax, esi	; jumptable 6420FA93 case 1
		sub	eax, ebp
		cmp	eax, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+150h]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jz	loc_6420FD08
		add	ebp, 3
		jmp	short loc_6420FC18
; ---------------------------------------------------------------------------

loc_6420FC59:				; CODE XREF: _normal_contentTok+2E3j
					; DATA XREF: .rdata:off_6421E4F4o
		mov	eax, esi	; jumptable 6420FA93 case 0
		sub	eax, ebp
		cmp	eax, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+14Ch]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jz	loc_6420FD08
		add	ebp, 2
		jmp	short loc_6420FC18
; ---------------------------------------------------------------------------

loc_6420FC88:				; CODE XREF: _normal_contentTok+2E3j
					; DATA XREF: .rdata:off_6421E4F4o
		test	edx, edx	; jumptable 6420FA93 case 18
		jnz	loc_6420F956	; jumptable 6420F899 cases 0,1,8
		lea	edx, [ebp+1]
		cmp	esi, edx
		jz	short loc_6420FC20
		movzx	eax, byte ptr [ebp+1]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		ja	loc_6420F9D3	; jumptable 6420FA68 default case
		movzx	eax, al
		jmp	ds:off_6421E620[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420FCB5:				; CODE XREF: _normal_contentTok+2E3j
					; DATA XREF: .rdata:off_6421E4F4o
		add	ebp, 1		; jumptable 6420FA93 cases 17,19-22
		jmp	loc_6420FC18
; ---------------------------------------------------------------------------

loc_6420FCBD:				; CODE XREF: _normal_contentTok+30Cj
					; _normal_contentTok+52Fj
					; DATA XREF: ...
		add	ebp, 1		; jumptable 6420FABC cases 17,19
					; jumptable 6420FCDF cases 17-22

loc_6420FCC0:				; CODE XREF: _normal_contentTok+5A9j
					; _normal_contentTok+60Cj ...
		cmp	esi, ebp
		jz	loc_6420FC20
		movzx	eax, byte ptr [ebp+0]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		ja	loc_6420F956	; jumptable 6420F899 cases 0,1,8
		movzx	eax, al
		jmp	ds:off_6421E684[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420FCE6:				; CODE XREF: _normal_contentTok+30Cj
					; DATA XREF: .rdata:off_6421E558o
		mov	eax, esi	; jumptable 6420FABC case 2
		sub	eax, ebp
		cmp	eax, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+160h]
		test	eax, eax
		jnz	loc_6420FDB9

loc_6420FD08:				; CODE XREF: _normal_contentTok+45Fj
					; _normal_contentTok+49Ej ...
		mov	[edi], ebp
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FD0F:				; CODE XREF: _normal_contentTok+30Cj
					; DATA XREF: .rdata:off_6421E558o
		mov	eax, esi	; jumptable 6420FABC case 1
		sub	eax, ebp
		cmp	eax, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+15Ch]
		test	eax, eax
		jnz	loc_6420FDE3
		mov	[edi], ebp
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FD38:				; CODE XREF: _normal_contentTok+30Cj
					; DATA XREF: .rdata:off_6421E558o
		mov	eax, esi	; jumptable 6420FABC case 0
		sub	eax, ebp
		cmp	eax, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+158h]
		test	eax, eax
		jz	short loc_6420FD08

loc_6420FD56:				; CODE XREF: _normal_contentTok+657j
		add	ebp, 2
		jmp	loc_6420FCC0
; ---------------------------------------------------------------------------

loc_6420FD5E:				; CODE XREF: _normal_contentTok+1A0j
					; _normal_contentTok+52Fj ...
		add	ebp, 1		; jumptable 6420FCDF cases 4,5,16
		cmp	esi, ebp
		jz	loc_6420FC20
		movzx	eax, byte ptr [ebp+0]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		cmp	al, 0Bh
		jz	short loc_6420FD88 ; jumptable 6420FCDF	case 6
		ja	loc_6420F94C
		cmp	al, 9
		xchg	ax, ax
		jb	loc_6420F956	; jumptable 6420F899 cases 0,1,8
		jmp	short loc_6420FD5E ; jumptable 6420FCDF	cases 4,5,16
; ---------------------------------------------------------------------------

loc_6420FD88:				; CODE XREF: _normal_contentTok+52Fj
					; _normal_contentTok+5C4j
					; DATA XREF: ...
		add	ebp, 1		; jumptable 6420FCDF case 6
		mov	eax, 5
		mov	[edi], ebp
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FD97:				; CODE XREF: _normal_contentTok+52Fj
					; DATA XREF: .rdata:off_6421E684o
		mov	eax, esi	; jumptable 6420FCDF case 2
		sub	eax, ebp
		cmp	eax, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+154h]
		test	eax, eax
		jz	loc_6420FD08

loc_6420FDB9:				; CODE XREF: _normal_contentTok+552j
		add	ebp, 4
		jmp	loc_6420FCC0
; ---------------------------------------------------------------------------

loc_6420FDC1:				; CODE XREF: _normal_contentTok+52Fj
					; DATA XREF: .rdata:off_6421E684o
		mov	eax, esi	; jumptable 6420FCDF case 1
		sub	eax, ebp
		cmp	eax, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+150h]
		test	eax, eax
		jz	loc_6420FD08

loc_6420FDE3:				; CODE XREF: _normal_contentTok+57Bj
		add	ebp, 3
		jmp	loc_6420FCC0
; ---------------------------------------------------------------------------

loc_6420FDEB:				; CODE XREF: _normal_contentTok+52Fj
					; DATA XREF: .rdata:off_6421E684o
		mov	eax, esi	; jumptable 6420FCDF case 0
		sub	eax, ebp
		cmp	eax, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+14Ch]
		test	eax, eax
		jnz	loc_6420FD56
		jmp	loc_6420FD08
; ---------------------------------------------------------------------------

loc_6420FE12:				; CODE XREF: _normal_contentTok+434j
					; DATA XREF: .rdata:off_6421E5BCo
		lea	eax, [ebp+1]	; jumptable 6420FBE4 cases 17,19

loc_6420FE15:				; CODE XREF: _normal_contentTok+6FBj
					; _normal_contentTok+7D7j ...
		mov	[esp+4Ch+var_20], eax
		xor	ebp, ebp

loc_6420FE1B:				; CODE XREF: _normal_contentTok+8E2j
		cmp	esi, eax
		jz	loc_6420FC20
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [ebx+edx+4Ch]
		sub	edx, 5
		cmp	dl, 18h		; switch 25 cases
		ja	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		movzx	edx, dl
		jmp	ds:off_6421E6E8[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6420FE41:				; CODE XREF: _normal_contentTok+68Aj
					; _normal_contentTok+6CFj ...
		add	eax, 1		; jumptable 6420FE3A case 9
		cmp	esi, eax
		jz	loc_6420FC20
		mov	[esp+4Ch+var_20], eax
		movzx	edx, byte ptr [eax]
		movzx	ecx, byte ptr [ebx+edx+4Ch]
		movzx	ebp, cl
		lea	edx, [ebp-0Ch]
		cmp	edx, 1
		jbe	loc_642101C1
		cmp	cl, 15h
		ja	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		mov	edx, 1
		shl	edx, cl
		mov	ecx, edx
		and	ecx, 200600h
		jnz	short loc_6420FE41 ; jumptable 6420FE3A	case 9
		jmp	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
; ---------------------------------------------------------------------------

loc_6420FE86:				; CODE XREF: _normal_contentTok+434j
					; DATA XREF: .rdata:off_6421E5BCo
		mov	eax, esi	; jumptable 6420FBE4 case 2
		sub	eax, ebp
		cmp	eax, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+160h]
		test	eax, eax
		jz	loc_6420FD08
		lea	eax, [ebp+4]
		jmp	loc_6420FE15
; ---------------------------------------------------------------------------

loc_6420FEB0:				; CODE XREF: _normal_contentTok+4FEj
					; DATA XREF: .rdata:off_6421E620o
		lea	ebp, [edx+1]	; jumptable 6420FCAE cases 17,19
		mov	edx, 1
		jmp	loc_6420FC18
; ---------------------------------------------------------------------------

loc_6420FEBD:				; CODE XREF: _normal_contentTok+4FEj
					; DATA XREF: .rdata:off_6421E620o
		mov	eax, esi	; jumptable 6420FCAE case 2
		sub	eax, edx
		cmp	eax, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+160h]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jz	loc_6420FB30
		lea	ebp, [edx+4]
		mov	edx, 1
		jmp	loc_6420FC18
; ---------------------------------------------------------------------------

loc_6420FEF4:				; CODE XREF: _normal_contentTok+4FEj
					; DATA XREF: .rdata:off_6421E620o
		mov	eax, esi	; jumptable 6420FCAE case 1
		sub	eax, edx
		cmp	eax, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+15Ch]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jz	loc_6420FB30
		lea	ebp, [edx+3]
		mov	edx, 1
		jmp	loc_6420FC18
; ---------------------------------------------------------------------------

loc_6420FF2B:				; CODE XREF: _normal_contentTok+4FEj
					; DATA XREF: .rdata:off_6421E620o
		mov	eax, esi	; jumptable 6420FCAE case 0
		sub	eax, edx
		cmp	eax, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+158h]
		mov	edx, [esp+4Ch+var_30]
		test	eax, eax
		jz	loc_6420FB30
		lea	ebp, [edx+2]
		mov	edx, 1
		jmp	loc_6420FC18
; ---------------------------------------------------------------------------

loc_6420FF62:				; CODE XREF: _normal_contentTok+434j
					; DATA XREF: .rdata:off_6421E5BCo
		mov	eax, esi	; jumptable 6420FBE4 case 1
		sub	eax, ebp
		cmp	eax, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+15Ch]
		test	eax, eax
		jz	loc_6420FD08
		lea	eax, [ebp+3]
		jmp	loc_6420FE15
; ---------------------------------------------------------------------------

loc_6420FF8C:				; CODE XREF: _normal_contentTok+434j
					; DATA XREF: .rdata:off_6421E5BCo
		mov	eax, esi	; jumptable 6420FBE4 case 0
		sub	eax, ebp
		cmp	eax, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+158h]
		test	eax, eax
		jz	loc_6420FD08
		lea	eax, [ebp+2]
		jmp	loc_6420FE15
; ---------------------------------------------------------------------------

loc_6420FFB6:				; CODE XREF: _normal_contentTok+37Aj
		lea	ebp, [edx+4]
		jmp	loc_6420FA72
; ---------------------------------------------------------------------------
		align 10h

loc_6420FFC0:				; CODE XREF: _normal_contentTok+237j
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+16Ch]
		lea	edx, [ebp+4]
		test	eax, eax
		jz	loc_6420F7F2	; jumptable 6420F899 default case
		jmp	loc_6420F956	; jumptable 6420F899 cases 0,1,8
; ---------------------------------------------------------------------------
		align 10h

loc_6420FFE0:				; CODE XREF: _normal_contentTok+44j
					; _normal_contentTok+122j
		mov	[edi], esi
		mov	eax, 6
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FFEC:				; CODE XREF: _normal_contentTok+29Bj
					; _normal_contentTok+85Fj
		mov	eax, 0FFFFFFFBh
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6420FFF6:				; CODE XREF: _normal_contentTok+333j
		add	edx, 2
		mov	ecx, esi
		mov	eax, ebx
		mov	[esp+4Ch+var_4C], edi
		call	_normal_scanComment
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6421000A:				; CODE XREF: _normal_contentTok+2A8j
		lea	eax, [ebp+2]
		cmp	eax, esi
		jz	short loc_6420FFEC
		cmp	byte ptr [ebp+2], 3Eh
		jnz	loc_6420F7F2	; jumptable 6420F899 default case
		nop
		lea	esi, [esi+0]
		jmp	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
; ---------------------------------------------------------------------------

loc_64210025:				; CODE XREF: _normal_contentTok+68Aj
					; DATA XREF: .rdata:off_6421E6E8o
		mov	edx, 1		; jumptable 6420FE3A cases 4,5,16

loc_6421002A:				; CODE XREF: _normal_contentTok+8B0j
		add	eax, 1
		cmp	esi, eax
		nop
		jz	loc_6420FC20
		mov	[esp+4Ch+var_20], eax
		movzx	ecx, byte ptr [eax]
		movzx	ecx, byte ptr [ebx+ecx+4Ch]
		cmp	cl, 0Eh
		jz	loc_6420FE41	; jumptable 6420FE3A case 9
		cmp	cl, 15h
		ja	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		mov	ebp, edx
		shl	ebp, cl
		mov	ecx, ebp
		and	ecx, 200600h
		jnz	short loc_6421002A
		jmp	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
; ---------------------------------------------------------------------------

loc_64210067:				; CODE XREF: _normal_contentTok+68Aj
					; DATA XREF: .rdata:off_6421E6E8o
		mov	edx, esi	; jumptable 6420FE3A case 2
		sub	edx, eax
		cmp	edx, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+154h]
		test	eax, eax
		jz	loc_64210187
		add	[esp+4Ch+var_20], 4

loc_6421008E:				; CODE XREF: _normal_contentTok+90Ej
					; _normal_contentTok+972j ...
		mov	eax, [esp+4Ch+var_20]
		jmp	loc_6420FE1B
; ---------------------------------------------------------------------------

loc_64210097:				; CODE XREF: _normal_contentTok+68Aj
					; DATA XREF: .rdata:off_6421E6E8o
		mov	edx, esi	; jumptable 6420FE3A case 1
		sub	edx, eax
		cmp	edx, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+150h]
		test	eax, eax
		jz	loc_64210187
		add	[esp+4Ch+var_20], 3
		jmp	short loc_6421008E
; ---------------------------------------------------------------------------

loc_642100C0:				; CODE XREF: _normal_contentTok+68Aj
					; DATA XREF: .rdata:off_6421E6E8o
		test	ebp, ebp	; jumptable 6420FE3A case 18
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		lea	edx, [eax+1]
		cmp	esi, edx
		jz	loc_6420FC20
		mov	[esp+4Ch+var_20], edx
		movzx	eax, byte ptr [eax+1]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		cmp	al, 7
		jz	loc_64210194
		ja	short loc_6421015B
		cmp	al, 5
		jz	loc_642101F3
		cmp	al, 6
		jnz	loc_6420F9D3	; jumptable 6420FA68 default case
		mov	eax, esi
		sub	eax, edx
		cmp	eax, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+15Ch]
		test	eax, eax
		jz	short loc_64210187
		add	[esp+4Ch+var_20], 3
		mov	ebp, 1
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_64210127:				; CODE XREF: _normal_contentTok+68Aj
					; DATA XREF: .rdata:off_6421E6E8o
		add	eax, 1		; jumptable 6420FE3A cases 17,19-22
		mov	[esp+4Ch+var_20], eax
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_64210133:				; CODE XREF: _normal_contentTok+68Aj
					; DATA XREF: .rdata:off_6421E6E8o
		mov	edx, esi	; jumptable 6420FE3A case 0
		sub	edx, eax
		cmp	edx, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+14Ch]
		test	eax, eax
		jz	short loc_64210187
		add	[esp+4Ch+var_20], 2
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_6421015B:				; CODE XREF: _normal_contentTok+938j
		cmp	al, 18h
		lea	esi, [esi+0]
		jz	short loc_64210176
		cmp	al, 1Dh
		jz	loc_6420F9D3	; jumptable 6420FA68 default case
		cmp	al, 16h
		lea	esi, [esi+0]
		jnz	loc_6420F9D3	; jumptable 6420FA68 default case

loc_64210176:				; CODE XREF: _normal_contentTok+9B0j
		add	edx, 1
		mov	ebp, 1
		mov	[esp+4Ch+var_20], edx
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_64210187:				; CODE XREF: _normal_contentTok+8D3j
					; _normal_contentTok+903j ...
		mov	eax, [esp+4Ch+var_20]
		mov	[edi], eax
		xor	eax, eax
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_64210194:				; CODE XREF: _normal_contentTok+932j
		mov	eax, esi
		sub	eax, edx
		cmp	eax, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+160h]
		test	eax, eax
		jz	short loc_64210187
		add	[esp+4Ch+var_20], 4
		mov	ebp, 1
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_642101C1:				; CODE XREF: _normal_contentTok+6B1j
		add	eax, 1
		mov	[esp+4Ch+var_20], eax

loc_642101C8:				; CODE XREF: _normal_contentTok+A9Fj
		cmp	esi, eax
		jz	loc_6420FC20
		movzx	edx, byte ptr [eax]
		movzx	ecx, byte ptr [ebx+edx+4Ch]
		movzx	edx, cl
		cmp	ebp, edx
		jz	loc_642102DF
		cmp	cl, 8		; switch 9 cases
		ja	loc_642102D3	; jumptable 642101EC default case
		jmp	ds:off_6421E74C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642101F3:				; CODE XREF: _normal_contentTok+93Cj
		mov	eax, esi
		sub	eax, edx
		cmp	eax, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+158h]
		test	eax, eax
		jz	loc_64210187
		add	[esp+4Ch+var_20], 2
		mov	ebp, 1
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_64210224:				; CODE XREF: _normal_contentTok+A3Cj
					; DATA XREF: .rdata:off_6421E74Co
		mov	edx, esi	; jumptable 642101EC case 6
		sub	edx, eax
		cmp	edx, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+168h]
		test	eax, eax
		jnz	loc_64210187
		add	[esp+4Ch+var_20], 3

loc_6421024B:				; CODE XREF: _normal_contentTok+ACBj
					; _normal_contentTok+AE2j ...
		mov	eax, [esp+4Ch+var_20]
		jmp	loc_642101C8
; ---------------------------------------------------------------------------

loc_64210254:				; CODE XREF: _normal_contentTok+A3Cj
					; DATA XREF: .rdata:off_6421E74Co
		mov	edx, esi	; jumptable 642101EC case 5
		sub	edx, eax
		cmp	edx, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+164h]
		test	eax, eax
		jnz	loc_64210187
		add	[esp+4Ch+var_20], 2
		jmp	short loc_6421024B
; ---------------------------------------------------------------------------

loc_6421027D:				; CODE XREF: _normal_contentTok+A3Cj
					; DATA XREF: .rdata:off_6421E74Co
		lea	edx, [eax+1]	; jumptable 642101EC case 3
		mov	ecx, esi
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_4C], eax
		mov	eax, ebx
		call	_normal_scanRef
		test	eax, eax
		jg	short loc_6421024B
		test	eax, eax
		jnz	loc_6420F880
		mov	edx, [esp+4Ch+var_20]
		mov	[edi], edx
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_642102A7:				; CODE XREF: _normal_contentTok+A3Cj
					; DATA XREF: .rdata:off_6421E74Co
		mov	edx, esi	; jumptable 642101EC case 7
		sub	edx, eax
		cmp	edx, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+16Ch]
		test	eax, eax
		jnz	loc_64210187
		add	[esp+4Ch+var_20], 4
		jmp	loc_6421024B
; ---------------------------------------------------------------------------

loc_642102D3:				; CODE XREF: _normal_contentTok+A36j
					; _normal_contentTok+A3Cj
					; DATA XREF: ...
		add	eax, 1		; jumptable 642101EC default case
		mov	[esp+4Ch+var_20], eax
		jmp	loc_6421024B
; ---------------------------------------------------------------------------

loc_642102DF:				; CODE XREF: _normal_contentTok+A2Dj
		lea	edx, [eax+1]
		cmp	esi, edx
		jz	loc_6420FC20
		mov	[esp+4Ch+var_20], edx
		movzx	eax, byte ptr [eax+1]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 9
		cmp	al, 0Ch		; switch 13 cases
		ja	loc_6420F9D3	; jumptable 6420FA68 default case
		movzx	eax, al
		jmp	ds:off_6421E770[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421030C:				; CODE XREF: _normal_contentTok+B55j
					; _normal_contentTok+B81j
					; DATA XREF: ...
		add	edx, 1		; jumptable 64210305 cases 0,1,12
					; jumptable 64210331 cases 4,5,16
		cmp	esi, edx
		jz	loc_6420FC20
		mov	[esp+4Ch+var_20], edx
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		ja	loc_6420F9D3	; jumptable 6420FA68 default case
		movzx	eax, al
		jmp	ds:off_6421E7A4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64210338:				; CODE XREF: _normal_contentTok+B55j
					; _normal_contentTok+B81j
					; DATA XREF: ...
		lea	eax, [edx+1]	; jumptable 64210305 case 8
					; jumptable 64210331 case 12
		cmp	esi, eax
		jz	loc_6420FC20
		mov	[esp+4Ch+var_20], eax
		cmp	byte ptr [edx+1], 3Eh
		jnz	loc_6420FAE9	; jumptable 6420FE3A default case
					; jumptable 642101EC cases 0-2,8
		add	edx, 2
		mov	eax, 3
		mov	[edi], edx
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_64210360:				; CODE XREF: _normal_contentTok+B55j
					; _normal_contentTok+B81j
					; DATA XREF: ...
		add	edx, 1		; jumptable 64210305 case 2
					; jumptable 64210331 case 6
		mov	eax, 1
		mov	[edi], edx
		jmp	loc_6420F880
; ---------------------------------------------------------------------------

loc_6421036F:				; CODE XREF: _normal_contentTok+B81j
					; DATA XREF: .rdata:off_6421E7A4o
		add	edx, 1		; jumptable 64210331 cases 17,19
		xor	ebp, ebp
		mov	[esp+4Ch+var_20], edx
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_6421037D:				; CODE XREF: _normal_contentTok+B81j
					; DATA XREF: .rdata:off_6421E7A4o
		mov	eax, esi	; jumptable 64210331 case 2
		sub	eax, edx
		cmp	eax, 3
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+160h]
		test	eax, eax
		jz	loc_64210187
		add	[esp+4Ch+var_20], 4
		xor	ebp, ebp
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_642103AB:				; CODE XREF: _normal_contentTok+B81j
					; DATA XREF: .rdata:off_6421E7A4o
		mov	eax, esi	; jumptable 64210331 case 1
		sub	eax, edx
		cmp	eax, 2
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+15Ch]
		test	eax, eax
		jz	loc_64210187
		add	[esp+4Ch+var_20], 3
		xor	ebp, ebp
		jmp	loc_6421008E
; ---------------------------------------------------------------------------

loc_642103D9:				; CODE XREF: _normal_contentTok+B81j
					; DATA XREF: .rdata:off_6421E7A4o
		mov	eax, esi	; jumptable 64210331 case 0
		sub	eax, edx
		cmp	eax, 1
		jle	loc_6420F9ED
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebx
		call	dword ptr [ebx+158h]
		test	eax, eax
		jz	loc_64210187
		add	[esp+4Ch+var_20], 2
		xor	ebp, ebp
		jmp	loc_6421008E
_normal_contentTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_scanPercent proc near		; CODE XREF: _normal_prologTok+2BEj
					; _normal_entityValueTok+114p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		cmp	edx, ecx
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_8], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_4], edi
		jz	loc_64210540
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 19h		; switch 26 cases
		jbe	short loc_64210450

loc_6421043C:				; CODE XREF: _normal_scanPercent+43j
					; DATA XREF: .rdata:off_6421E808o
		mov	[esi], edx	; jumptable 64210453 default case
		xor	eax, eax

loc_64210440:				; CODE XREF: _normal_scanPercent+72j
					; _normal_scanPercent+18Aj ...
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_64210450:				; CODE XREF: _normal_scanPercent+2Aj
		movzx	eax, al
		jmp	ds:off_6421E808[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64210460:				; CODE XREF: _normal_scanPercent+43j
					; DATA XREF: .rdata:off_6421E808o
		lea	edi, [edx+1]	; jumptable 64210453 cases 17,19

loc_64210463:				; CODE XREF: _normal_scanPercent+11Fj
					; _normal_scanPercent+16Dj ...
		cmp	ecx, edi
		jz	loc_64210540
		movzx	eax, byte ptr [edi]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		jbe	loc_64210534

loc_6421047E:				; CODE XREF: _normal_scanPercent+127j
					; DATA XREF: .rdata:off_6421E870o
		mov	[esi], edi	; jumptable 64210537 default case
		xor	eax, eax
		jmp	short loc_64210440
; ---------------------------------------------------------------------------

loc_64210484:				; CODE XREF: _normal_scanPercent+43j
					; DATA XREF: .rdata:off_6421E808o
		mov	[esi], edx	; jumptable 64210453 cases 4,5,16,25
		mov	eax, 16h
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642104A0:				; CODE XREF: _normal_scanPercent+43j
					; DATA XREF: .rdata:off_6421E808o
		mov	eax, ecx	; jumptable 64210453 case 2
		sub	eax, edx
		cmp	eax, 3
		jg	loc_64210555

loc_642104AD:				; CODE XREF: _normal_scanPercent+B9j
					; _normal_scanPercent+F9j ...
		mov	eax, 0FFFFFFFEh
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_642104C2:				; CODE XREF: _normal_scanPercent+43j
					; DATA XREF: .rdata:off_6421E808o
		mov	eax, ecx	; jumptable 64210453 case 1
		sub	eax, edx
		cmp	eax, 2
		jle	short loc_642104AD
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_14], ecx
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+15Ch]
		mov	edx, [esp+2Ch+var_10]
		mov	ecx, [esp+2Ch+var_14]
		test	eax, eax
		jnz	loc_6421062E

loc_642104F0:				; CODE XREF: _normal_scanPercent+11Aj
					; _normal_scanPercent+164j
		mov	[esi], edx
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_64210502:				; CODE XREF: _normal_scanPercent+43j
					; DATA XREF: .rdata:off_6421E808o
		mov	eax, ecx	; jumptable 64210453 case 0
		sub	eax, edx
		cmp	eax, 1
		jle	short loc_642104AD
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_14], ecx
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+158h]
		mov	edx, [esp+2Ch+var_10]
		mov	ecx, [esp+2Ch+var_14]
		test	eax, eax
		jz	short loc_642104F0
		lea	edi, [edx+2]
		jmp	loc_64210463
; ---------------------------------------------------------------------------

loc_64210534:				; CODE XREF: _normal_scanPercent+68j
		movzx	eax, al
		jmp	ds:off_6421E870[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64210540:				; CODE XREF: _normal_scanPercent+17j
					; _normal_scanPercent+55j
		mov	eax, 0FFFFFFFFh
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_64210555:				; CODE XREF: _normal_scanPercent+97j
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_14], ecx
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+160h]
		mov	edx, [esp+2Ch+var_10]
		mov	ecx, [esp+2Ch+var_14]
		test	eax, eax
		jz	loc_642104F0
		lea	edi, [edx+4]
		jmp	loc_64210463
; ---------------------------------------------------------------------------

loc_64210582:				; CODE XREF: _normal_scanPercent+127j
					; DATA XREF: .rdata:off_6421E870o
		add	edi, 1		; jumptable 64210537 cases 17,19-22
		jmp	loc_64210463
; ---------------------------------------------------------------------------
		align 10h

loc_64210590:				; CODE XREF: _normal_scanPercent+127j
					; DATA XREF: .rdata:off_6421E870o
		add	edi, 1		; jumptable 64210537 case 13
		mov	eax, 1Ch
		mov	[esi], edi
		jmp	loc_64210440
; ---------------------------------------------------------------------------
		align 10h

loc_642105A0:				; CODE XREF: _normal_scanPercent+127j
					; DATA XREF: .rdata:off_6421E870o
		mov	eax, ecx	; jumptable 64210537 case 2
		sub	eax, edi
		cmp	eax, 3
		jle	loc_642104AD
		mov	[esp+2Ch+var_14], ecx
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+154h]
		mov	ecx, [esp+2Ch+var_14]
		test	eax, eax
		jz	short loc_64210636
		add	edi, 4
		jmp	loc_64210463
; ---------------------------------------------------------------------------
		align 10h

loc_642105D0:				; CODE XREF: _normal_scanPercent+127j
					; DATA XREF: .rdata:off_6421E870o
		mov	eax, ecx	; jumptable 64210537 case 1
		sub	eax, edi
		cmp	eax, 2
		jle	loc_642104AD
		mov	[esp+2Ch+var_14], ecx
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+150h]
		mov	ecx, [esp+2Ch+var_14]
		test	eax, eax
		jz	short loc_64210636
		add	edi, 3
		jmp	loc_64210463
; ---------------------------------------------------------------------------
		align 10h

loc_64210600:				; CODE XREF: _normal_scanPercent+127j
					; DATA XREF: .rdata:off_6421E870o
		mov	eax, ecx	; jumptable 64210537 case 0
		sub	eax, edi
		cmp	eax, 1
		jle	loc_642104AD
		mov	[esp+2Ch+var_14], ecx
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [ebx+14Ch]
		mov	ecx, [esp+2Ch+var_14]
		test	eax, eax
		jz	short loc_64210636
		add	edi, 2
		jmp	loc_64210463
; ---------------------------------------------------------------------------

loc_6421062E:				; CODE XREF: _normal_scanPercent+DAj
		lea	edi, [edx+3]
		jmp	loc_64210463
; ---------------------------------------------------------------------------

loc_64210636:				; CODE XREF: _normal_scanPercent+1B4j
					; _normal_scanPercent+1E4j ...
		mov	[esi], edi
		jmp	loc_64210440
_normal_scanPercent endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_scanLit	proc near		; CODE XREF: _normal_prologTok+1D5j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 1Ch
		mov	ebp, [esp+2Ch+arg_0]
		cmp	ecx, ebp
		jz	short loc_64210668

loc_64210655:				; CODE XREF: _normal_scanLit+26j
		movzx	eax, byte ptr [edi]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	al, 0Dh		; switch 14 cases
		jbe	short loc_64210670

loc_64210661:				; CODE XREF: _normal_scanLit+33j
					; DATA XREF: .rdata:off_6421E8D4o
		add	edi, 1		; jumptable 64210673 default case

loc_64210664:				; CODE XREF: _normal_scanLit+58j
					; _normal_scanLit+A4j ...
		cmp	ebp, edi
		jnz	short loc_64210655

loc_64210668:				; CODE XREF: _normal_scanLit+13j
		mov	eax, 0FFFFFFFFh
		jmp	short loc_64210688
; ---------------------------------------------------------------------------
		align 10h

loc_64210670:				; CODE XREF: _normal_scanLit+1Fj
		movzx	edx, al
		jmp	ds:off_6421E8D4[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64210680:				; CODE XREF: _normal_scanLit+33j
					; _normal_scanLit+9Fj ...
		mov	eax, [esp+2Ch+arg_4] ; jumptable 64210673 cases	0,1,8
		mov	[eax], edi
		xor	eax, eax

loc_64210688:				; CODE XREF: _normal_scanLit+2Dj
					; _normal_scanLit+61j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64210690:				; CODE XREF: _normal_scanLit+33j
					; DATA XREF: .rdata:off_6421E8D4o
		movzx	eax, al		; jumptable 64210673 cases 12,13
		add	edi, 1
		cmp	eax, ebx
		jnz	short loc_64210664
		cmp	edi, ebp
		mov	eax, 0FFFFFFE5h
		jz	short loc_64210688
		mov	eax, [esp+2Ch+arg_4]
		mov	[eax], edi
		movzx	eax, byte ptr [edi]
		movzx	edx, byte ptr [esi+eax+4Ch]
		xor	eax, eax
		sub	edx, 9
		cmp	dl, 15h
		ja	short loc_64210688
		movzx	edx, dl
		mov	eax, ds:_CSWTCH_450[edx*4]
		jmp	short loc_64210688
; ---------------------------------------------------------------------------

loc_642106C7:				; CODE XREF: _normal_scanLit+33j
					; DATA XREF: .rdata:off_6421E8D4o
		mov	eax, ebp	; jumptable 64210673 case 7
		sub	eax, edi
		cmp	eax, 3
		jle	short loc_64210740
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	short loc_64210680 ; jumptable 64210673	cases 0,1,8
		add	edi, 4
		jmp	loc_64210664
; ---------------------------------------------------------------------------
		align 10h

loc_642106F0:				; CODE XREF: _normal_scanLit+33j
					; DATA XREF: .rdata:off_6421E8D4o
		mov	eax, ebp	; jumptable 64210673 case 6
		sub	eax, edi
		cmp	eax, 2
		jle	short loc_64210740
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	loc_64210680	; jumptable 64210673 cases 0,1,8
		add	edi, 3
		jmp	loc_64210664
; ---------------------------------------------------------------------------

loc_64210716:				; CODE XREF: _normal_scanLit+33j
					; DATA XREF: .rdata:off_6421E8D4o
		mov	eax, ebp	; jumptable 64210673 case 5
		sub	eax, edi
		cmp	eax, 1
		jle	short loc_64210740
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	loc_64210680	; jumptable 64210673 cases 0,1,8
		add	edi, 2
		jmp	loc_64210664
; ---------------------------------------------------------------------------
		align 10h

loc_64210740:				; CODE XREF: _normal_scanLit+8Ej
					; _normal_scanLit+B7j ...
		mov	eax, 0FFFFFFFEh
		jmp	loc_64210688
_normal_scanLit	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_prologTok proc near		; DATA XREF: .rdata:_latin1_encodingo
					; .rdata:_utf8_encodingo ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		mov	edx, 0FFFFFFFCh
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_8], edi
		mov	edi, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_C]
		cmp	esi, edi
		jz	short loc_64210790
		movzx	eax, byte ptr [esi]
		cmp	byte ptr [ebx+eax+4Ch],	24h ; switch 37	cases
		jbe	short loc_642107A6

loc_64210786:				; CODE XREF: _normal_prologTok+5Bj
					; _normal_prologTok+F7j ...
		mov	[ebp+0], esi	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		xor	edx, edx
		nop
		lea	esi, [esi+0]

loc_64210790:				; CODE XREF: _normal_prologTok+2Aj
					; _normal_prologTok+6Dj ...
		mov	eax, edx
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_642107A6:				; CODE XREF: _normal_prologTok+34j
		movzx	eax, byte ptr [ebx+eax+4Ch]
		jmp	ds:off_6421E90C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642107B2:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		add	esi, 1		; jumptable 642107AB case 35
		mov	edx, 26h
		mov	[ebp+0], esi
		jmp	short loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_642107C0:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		lea	edx, [esi+1]	; jumptable 642107AB case 2
		cmp	edx, edi
		jz	loc_64210F08
		movzx	eax, byte ptr [esi+1]
		cmp	byte ptr [ebx+eax+4Ch],	1Dh
		jbe	loc_64210CC5

loc_642107DA:				; CODE XREF: _normal_prologTok+59Aj
		mov	[ebp+0], edx
		xor	edx, edx
		jmp	short loc_64210790
; ---------------------------------------------------------------------------

loc_642107E1:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		lea	eax, [esi+1]	; jumptable 642107AB case 4
		mov	edx, 0FFFFFFE6h
		cmp	eax, edi
		jz	short loc_64210790
		cmp	byte ptr [esi+1], 5Dh
		jz	loc_64210FE6

loc_642107F7:				; CODE XREF: _normal_prologTok+8A5j
		mov	[ebp+0], eax
		mov	edx, 1Ah
		jmp	short loc_64210790
; ---------------------------------------------------------------------------

loc_64210801:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		mov	eax, edi	; jumptable 642107AB case 5
		sub	eax, esi
		cmp	eax, 1
		jle	loc_64210951
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+158h]
		test	eax, eax
		jz	loc_64210DDD
		add	esi, 2
		mov	edx, 0FFFFFFEEh
		mov	eax, 12h

loc_64210830:				; CODE XREF: _normal_prologTok+142j
					; _normal_prologTok+151j ...
		cmp	edi, esi
		jz	loc_64210790
		mov	edx, eax

loc_6421083A:				; CODE XREF: _normal_prologTok+2D5j
		movzx	eax, byte ptr [esi]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 1Fh		; switch 32 cases
		ja	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		movzx	eax, al
		jmp	ds:off_6421E9A0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64210857:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		lea	ecx, [esi+1]	; jumptable 642107AB case 19
		mov	edx, 0FFFFFFFFh
		cmp	edi, ecx
		jz	loc_64210790
		movzx	eax, byte ptr [esi+1]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		ja	loc_64210B50	; jumptable 6421087E default case
		movzx	eax, al
		jmp	ds:off_6421EA20[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64210885:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		add	esi, 1		; jumptable 642107AB cases 22,24
		mov	edx, 0FFFFFFEEh
		mov	eax, 12h
		jmp	short loc_64210830
; ---------------------------------------------------------------------------

loc_64210894:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		add	esi, 1		; jumptable 642107AB cases 23,25-27
		mov	edx, 0FFFFFFEDh
		mov	eax, 13h
		jmp	short loc_64210830
; ---------------------------------------------------------------------------

loc_642108A3:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		lea	eax, [esi+1]	; jumptable 642107AB case 9
		cmp	eax, edi
		jz	loc_64211015
		xchg	ax, ax

loc_642108B0:				; CODE XREF: _normal_prologTok+2C6j
					; _normal_prologTok+55Aj ...
		cmp	eax, edi
		mov	esi, eax
		jz	loc_64210EC3
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [ebx+edx+4Ch]
		cmp	dl, 0Ah
		jz	loc_64210CA7
		cmp	dl, 15h
		jz	loc_64210CA7
		cmp	dl, 9
		jz	loc_64210CB0

loc_642108DD:				; CODE XREF: _normal_prologTok+570j
		mov	[ebp+0], esi
		mov	edx, 0Fh
		jmp	loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_642108F0:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		add	esi, 1		; jumptable 642107AB case 11
		mov	edx, 11h
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210900:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		lea	ecx, [esi+1]	; jumptable 642107AB case 12
		mov	edx, ebx
		mov	[esp+3Ch+arg_4], ebp
		mov	eax, 0Ch
		mov	[esp+3Ch+arg_0], edi

loc_64210912:				; CODE XREF: _normal_prologTok+1F2j
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	_normal_scanLit
; ---------------------------------------------------------------------------
		align 10h

loc_64210930:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		lea	ecx, [esi+1]	; jumptable 642107AB case 13
		mov	edx, ebx
		mov	[esp+3Ch+arg_4], ebp
		mov	eax, 0Dh
		mov	[esp+3Ch+arg_0], edi
		jmp	short loc_64210912
; ---------------------------------------------------------------------------

loc_64210944:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		mov	eax, edi	; jumptable 642107AB case 6
		sub	eax, esi
		cmp	eax, 2
		jg	loc_64210D60

loc_64210951:				; CODE XREF: _normal_prologTok+B8j
					; _normal_prologTok+217j ...
		mov	edx, 0FFFFFFFEh
		jmp	loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_64210960:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		mov	eax, edi	; jumptable 642107AB case 7
		sub	eax, esi
		cmp	eax, 3
		jle	short loc_64210951
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+160h]
		test	eax, eax
		jz	loc_64210F12
		add	esi, 4
		mov	edx, 0FFFFFFEEh
		mov	eax, 12h
		jmp	loc_64210830
; ---------------------------------------------------------------------------

loc_64210990:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		add	esi, 1		; jumptable 642107AB case 36
		mov	edx, 15h
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_642109A0:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		add	esi, 1		; jumptable 642107AB case 20
		mov	edx, 19h
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_642109B0:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		add	esi, 1		; jumptable 642107AB case 31
		mov	edx, 17h
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_642109C0:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		lea	eax, [esi+1]	; jumptable 642107AB case 32
		mov	edx, 0FFFFFFE8h
		cmp	eax, edi
		jz	loc_64210790
		movzx	edx, byte ptr [esi+1]
		movzx	edx, byte ptr [ebx+edx+4Ch]
		sub	edx, 9
		cmp	dl, 1Bh		; switch 28 cases
		jbe	loc_64210D13

loc_642109E5:				; CODE XREF: _normal_prologTok+5C6j
					; _normal_prologTok+667j ...
		mov	[ebp+0], eax	; jumptable 64210D16 default case
		xor	edx, edx
		jmp	loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_642109F0:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		mov	[esp+3Ch+arg_0], ebp ; jumptable 642107AB case 30
		lea	edx, [esi+1]
		mov	ecx, edi
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	_normal_scanPercent
; ---------------------------------------------------------------------------

loc_64210A13:				; CODE XREF: _normal_prologTok+5Bj
					; DATA XREF: .rdata:off_6421E90Co
		lea	eax, [esi+1]	; jumptable 642107AB cases 10,21
		jmp	loc_642108B0
; ---------------------------------------------------------------------------
		align 10h

loc_64210A20:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		add	esi, 1		; jumptable 64210850 cases 17,19-22

loc_64210A23:				; CODE XREF: _normal_prologTok+32Dj
					; _normal_prologTok+365j ...
		cmp	edi, esi
		jnz	loc_6421083A
		neg	edx
		lea	esi, [esi+0]
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210A35:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		cmp	edx, 13h	; jumptable 64210850 case 10
		jz	loc_64210D87
		add	esi, 1
		mov	edx, 1Eh
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_64210A50:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		mov	eax, edi	; jumptable 64210850 case 1
		sub	eax, esi
		cmp	eax, 2
		jle	loc_64210951
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+150h]
		mov	edx, [esp+3Ch+var_20]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 3
		jmp	short loc_64210A23
; ---------------------------------------------------------------------------
		align 10h

loc_64210A80:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		mov	[ebp+0], esi	; jumptable 64210850 cases 4-6,15,16,25,27,30,31
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210A88:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		mov	eax, edi	; jumptable 64210850 case 2
		sub	eax, esi
		cmp	eax, 3
		jle	loc_64210951
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+154h]
		mov	edx, [esp+3Ch+var_20]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 4
		jmp	loc_64210A23
; ---------------------------------------------------------------------------
		align 10h

loc_64210AC0:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		mov	eax, edi	; jumptable 64210850 case 0
		sub	eax, esi
		cmp	eax, 1
		jle	loc_64210951
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+14Ch]
		mov	edx, [esp+3Ch+var_20]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 2
		jmp	loc_64210A23
; ---------------------------------------------------------------------------

loc_64210AF2:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		cmp	edx, 13h	; jumptable 64210850 case 28
		jz	loc_64210D87
		add	esi, 1
		mov	edx, 1Fh
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_64210B10:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		cmp	edx, 13h	; jumptable 64210850 case 29
		jz	loc_64210D87
		add	esi, 1
		mov	edx, 20h
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_64210B30:				; CODE XREF: _normal_prologTok+100j
					; DATA XREF: .rdata:off_6421E9A0o
		add	esi, 1		; jumptable 64210850 case 18
		cmp	edx, 12h
		jz	loc_64210E04
		cmp	edx, 29h
		jnz	loc_64210A23

loc_64210B45:				; CODE XREF: _normal_prologTok+6C9j
					; _normal_prologTok+6D2j
					; DATA XREF: ...
		mov	edx, 13h	; jumptable 64210E22 default case
		jmp	loc_64210A23
; ---------------------------------------------------------------------------
		align 10h

loc_64210B50:				; CODE XREF: _normal_prologTok+125j
					; _normal_prologTok+12Ej ...
		mov	[ebp+0], ecx	; jumptable 6421087E default case
		xor	edx, edx
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210B5A:				; CODE XREF: _normal_prologTok+12Ej
					; DATA XREF: .rdata:off_6421EA20o
		lea	esi, [ecx+1]	; jumptable 6421087E cases 17,19

loc_64210B5D:				; CODE XREF: _normal_prologTok+45Bj
					; _normal_prologTok+48Dj ...
		cmp	edi, esi
		jz	loc_6421100B
		movzx	eax, byte ptr [esi]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 1Fh		; switch 32 cases
		ja	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		movzx	eax, al
		jmp	ds:off_6421EA84[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64210B82:				; CODE XREF: _normal_prologTok+12Ej
					; DATA XREF: .rdata:off_6421EA20o
		mov	eax, edi	; jumptable 6421087E case 2
		sub	eax, ecx
		cmp	eax, 3
		jle	loc_64210951
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_20], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+160h]
		mov	ecx, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_64210B50 ; jumptable 6421087E	default	case
		lea	esi, [ecx+4]
		jmp	short loc_64210B5D
; ---------------------------------------------------------------------------
		align 10h

loc_64210BB0:				; CODE XREF: _normal_prologTok+12Ej
					; DATA XREF: .rdata:off_6421EA20o
		mov	eax, edi	; jumptable 6421087E case 1
		sub	eax, ecx
		cmp	eax, 2
		jle	loc_64210951
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_20], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+15Ch]
		mov	ecx, [esp+3Ch+var_20]
		test	eax, eax
		jz	loc_64210B50	; jumptable 6421087E default case
		lea	esi, [ecx+3]
		jmp	loc_64210B5D
; ---------------------------------------------------------------------------

loc_64210BE2:				; CODE XREF: _normal_prologTok+12Ej
					; DATA XREF: .rdata:off_6421EA20o
		mov	eax, edi	; jumptable 6421087E case 0
		sub	eax, ecx
		cmp	eax, 1
		jle	loc_64210951
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_20], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+158h]
		mov	ecx, [esp+3Ch+var_20]
		test	eax, eax
		jz	loc_64210B50	; jumptable 6421087E default case
		lea	esi, [ecx+2]
		jmp	loc_64210B5D
; ---------------------------------------------------------------------------

loc_64210C14:				; CODE XREF: _normal_prologTok+42Bj
					; DATA XREF: .rdata:off_6421EA84o
		add	esi, 1		; jumptable 64210B7B cases 17,19-22
		jmp	loc_64210B5D
; ---------------------------------------------------------------------------

loc_64210C1C:				; CODE XREF: _normal_prologTok+42Bj
					; DATA XREF: .rdata:off_6421EA84o
		mov	[ebp+0], esi	; jumptable 64210B7B cases 4-6,16,25,27,31
		mov	edx, 14h
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210C29:				; CODE XREF: _normal_prologTok+42Bj
					; DATA XREF: .rdata:off_6421EA84o
		mov	eax, edi	; jumptable 64210B7B case 2
		sub	eax, esi
		cmp	eax, 3
		jle	loc_64210951
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+154h]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 4
		jmp	loc_64210B5D
; ---------------------------------------------------------------------------

loc_64210C53:				; CODE XREF: _normal_prologTok+42Bj
					; DATA XREF: .rdata:off_6421EA84o
		mov	eax, edi	; jumptable 64210B7B case 1
		sub	eax, esi
		cmp	eax, 2
		jle	loc_64210951
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+150h]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 3
		jmp	loc_64210B5D
; ---------------------------------------------------------------------------

loc_64210C7D:				; CODE XREF: _normal_prologTok+42Bj
					; DATA XREF: .rdata:off_6421EA84o
		mov	eax, edi	; jumptable 64210B7B case 0
		sub	eax, esi
		cmp	eax, 1
		jle	loc_64210951
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+14Ch]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 2
		jmp	loc_64210B5D
; ---------------------------------------------------------------------------

loc_64210CA7:				; CODE XREF: _normal_prologTok+175j
					; _normal_prologTok+17Ej
		add	eax, 1
		jmp	loc_642108B0
; ---------------------------------------------------------------------------
		align 10h

loc_64210CB0:				; CODE XREF: _normal_prologTok+187j
		add	eax, 1
		cmp	edi, eax
		jnz	loc_642108B0
		nop
		lea	esi, [esi+0]
		jmp	loc_642108DD
; ---------------------------------------------------------------------------

loc_64210CC5:				; CODE XREF: _normal_prologTok+84j
		movsx	ecx, byte ptr [ebx+eax+4Ch]
		mov	eax, 1
		shl	eax, cl
		test	eax, 214000E0h
		jnz	loc_64210DD0
		test	eax, 10000h
		jnz	loc_64210D91
		test	ah, 80h
		jz	loc_642107DA
		mov	[esp+3Ch+arg_0], ebp
		lea	edx, [esi+2]
		mov	ecx, edi
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	_normal_scanPi
; ---------------------------------------------------------------------------

loc_64210D13:				; CODE XREF: _normal_prologTok+28Fj
		movzx	edx, dl
		jmp	ds:off_6421EB04[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64210D1D:				; CODE XREF: _normal_prologTok+5C6j
					; DATA XREF: .rdata:off_6421EB04o
		add	eax, 1		; jumptable 64210D16 case 25
		mov	edx, 25h
		mov	[ebp+0], eax
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210D2D:				; CODE XREF: _normal_prologTok+5C6j
					; DATA XREF: .rdata:off_6421EB04o
		add	eax, 1		; jumptable 64210D16 case 24
		mov	edx, 24h
		mov	[ebp+0], eax
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210D3D:				; CODE XREF: _normal_prologTok+5C6j
					; DATA XREF: .rdata:off_6421EB04o
		add	eax, 1		; jumptable 64210D16 case 6
		mov	edx, 23h
		mov	[ebp+0], eax
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210D4D:				; CODE XREF: _normal_prologTok+5C6j
					; DATA XREF: .rdata:off_6421EB04o
		mov	[ebp+0], eax	; jumptable 64210D16 cases 0-2,12,23,26,27
		mov	edx, 18h
		jmp	loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_64210D60:				; CODE XREF: _normal_prologTok+1FBj
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+15Ch]
		test	eax, eax
		jz	loc_64210F39
		add	esi, 3
		mov	edx, 0FFFFFFEEh
		mov	eax, 12h
		jmp	loc_64210830
; ---------------------------------------------------------------------------

loc_64210D87:				; CODE XREF: _normal_prologTok+2E8j
					; _normal_prologTok+3A5j ...
		mov	[ebp+0], esi
		xor	dl, dl
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210D91:				; CODE XREF: _normal_prologTok+591j
		lea	eax, [esi+2]
		cmp	edi, eax
		jz	loc_64210F08
		movzx	edx, byte ptr [esi+2]
		movzx	edx, byte ptr [ebx+edx+4Ch]
		cmp	dl, 16h
		jz	loc_64210ED0
		ja	loc_64210F60
		cmp	dl, 14h
		jnz	loc_642109E5	; jumptable 64210D16 default case
		add	esi, 3
		mov	edx, 21h
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------
		align 10h

loc_64210DD0:				; CODE XREF: _normal_prologTok+586j
		mov	[ebp+0], esi
		mov	edx, 1Dh
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210DDD:				; CODE XREF: _normal_prologTok+CDj
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+14Ch]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 2
		mov	edx, 0FFFFFFEDh
		mov	eax, 13h
		jmp	loc_64210830
; ---------------------------------------------------------------------------

loc_64210E04:				; CODE XREF: _normal_prologTok+3E6j
		cmp	esi, edi
		jz	loc_64210F08
		movzx	eax, byte ptr [esi]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h		; switch 25 cases
		ja	loc_64210B45	; jumptable 64210E22 default case
		movzx	eax, al
		jmp	ds:off_6421EB74[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64210E29:				; CODE XREF: _normal_prologTok+6D2j
					; DATA XREF: .rdata:off_6421EB74o
		add	esi, 1		; jumptable 64210E22 cases 17,19-22
		mov	edx, 29h
		jmp	loc_64210A23
; ---------------------------------------------------------------------------

loc_64210E36:				; CODE XREF: _normal_prologTok+6D2j
					; DATA XREF: .rdata:off_6421EB74o
		mov	eax, edi	; jumptable 64210E22 case 2
		sub	eax, esi
		cmp	eax, 3
		jle	loc_64210951
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+154h]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 4
		mov	edx, 29h
		jmp	loc_64210A23
; ---------------------------------------------------------------------------

loc_64210E65:				; CODE XREF: _normal_prologTok+6D2j
					; DATA XREF: .rdata:off_6421EB74o
		mov	eax, edi	; jumptable 64210E22 case 1
		sub	eax, esi
		cmp	eax, 2
		jle	loc_64210951
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+150h]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 3
		mov	edx, 29h
		jmp	loc_64210A23
; ---------------------------------------------------------------------------

loc_64210E94:				; CODE XREF: _normal_prologTok+6D2j
					; DATA XREF: .rdata:off_6421EB74o
		mov	eax, edi	; jumptable 64210E22 case 0
		sub	eax, esi
		cmp	eax, 1
		jle	loc_64210951
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+14Ch]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 2
		mov	edx, 29h
		jmp	loc_64210A23
; ---------------------------------------------------------------------------

loc_64210EC3:				; CODE XREF: _normal_prologTok+164j
		mov	[ebp+0], eax
		mov	edx, 0Fh
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210ED0:				; CODE XREF: _normal_prologTok+658j
					; _normal_prologTok+813j
		add	eax, 1
		mov	edx, 1
		cmp	edi, eax
		jz	short loc_64210F08

loc_64210EDC:				; CODE XREF: _normal_prologTok+7B6j
		movzx	ecx, byte ptr [eax]
		cmp	byte ptr [ebx+ecx+4Ch],	1Eh
		ja	loc_642109E5	; jumptable 64210D16 default case
		movsx	ecx, byte ptr [ebx+ecx+4Ch]
		mov	esi, edx
		shl	esi, cl
		test	esi, 1400000h
		mov	ecx, esi
		jz	loc_64210F95
		add	eax, 1
		cmp	edi, eax
		jnz	short loc_64210EDC

loc_64210F08:				; CODE XREF: _normal_prologTok+75j
					; _normal_prologTok+646j ...
		mov	edx, 0FFFFFFFFh
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210F12:				; CODE XREF: _normal_prologTok+228j
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+154h]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 4
		mov	edx, 0FFFFFFEDh
		mov	eax, 13h
		jmp	loc_64210830
; ---------------------------------------------------------------------------

loc_64210F39:				; CODE XREF: _normal_prologTok+61Fj
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	dword ptr [ebx+150h]
		test	eax, eax
		jz	loc_64210786	; jumptable 642107AB default case
					; jumptable 64210E22 case 24
		add	esi, 3
		mov	edx, 0FFFFFFEDh
		mov	eax, 13h
		jmp	loc_64210830
; ---------------------------------------------------------------------------

loc_64210F60:				; CODE XREF: _normal_prologTok+65Ej
		cmp	dl, 18h
		jz	loc_64210ED0
		cmp	dl, 1Bh
		jnz	loc_642109E5	; jumptable 64210D16 default case
		mov	[esp+3Ch+arg_0], ebp
		lea	edx, [esi+3]
		mov	ecx, edi
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	_normal_scanComment
; ---------------------------------------------------------------------------

loc_64210F95:				; CODE XREF: _normal_prologTok+7ABj
		test	esi, 200600h
		jnz	short loc_64210FD9
		and	ecx, 40000000h
		jz	loc_642109E5	; jumptable 64210D16 default case
		lea	edx, [eax+1]
		cmp	edi, edx
		xchg	ax, ax
		jz	loc_64210F08
		movzx	edx, byte ptr [eax+1]
		cmp	byte ptr [ebx+edx+4Ch],	1Eh
		ja	short loc_64210FD9
		movsx	ecx, byte ptr [ebx+edx+4Ch]
		mov	edx, 1
		shl	edx, cl
		and	edx, 40200600h
		jnz	loc_642109E5	; jumptable 64210D16 default case

loc_64210FD9:				; CODE XREF: _normal_prologTok+84Bj
					; _normal_prologTok+86Fj
		mov	[ebp+0], eax
		mov	edx, 10h
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64210FE6:				; CODE XREF: _normal_prologTok+A1j
		lea	edx, [esi+2]
		cmp	edx, edi
		jz	loc_64210F08
		cmp	byte ptr [esi+2], 3Eh
		jnz	loc_642107F7
		add	esi, 3
		mov	edx, 22h
		mov	[ebp+0], esi
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_6421100B:				; CODE XREF: _normal_prologTok+40Fj
		mov	edx, 0FFFFFFECh
		jmp	loc_64210790
; ---------------------------------------------------------------------------

loc_64211015:				; CODE XREF: _normal_prologTok+158j
		mov	[ebp+0], edi
		mov	edx, 0FFFFFFF1h
		jmp	loc_64210790
_normal_prologTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_attributeValueTok proc near	; DATA XREF: .rdata:642228D0o
					; .rdata:64223170o ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		mov	eax, 0FFFFFFFCh
		mov	ecx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_8], esi
		mov	esi, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_C], ebx
		mov	ebx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_4], edi
		mov	edi, [esp+0Ch+arg_C]
		mov	edx, ecx
		cmp	ecx, esi
		jz	short loc_64211071

loc_64211059:				; CODE XREF: _normal_attributeValueTok+38j
					; _normal_attributeValueTok+BAj ...
		movzx	eax, byte ptr [edx]
		cmp	byte ptr [ebx+eax+4Ch],	15h ; switch 22	cases
		jbe	short loc_64211080

loc_64211063:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		add	edx, 1		; jumptable 64211085 default case
		cmp	esi, edx
		jnz	short loc_64211059

loc_6421106A:				; CODE XREF: _normal_attributeValueTok+C0j
					; _normal_attributeValueTok+D0j ...
		mov	[edi], esi
		mov	eax, 6

loc_64211071:				; CODE XREF: _normal_attributeValueTok+27j
					; _normal_attributeValueTok+F7j ...
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_64211080:				; CODE XREF: _normal_attributeValueTok+31j
		movzx	eax, byte ptr [ebx+eax+4Ch]
		jmp	ds:off_6421EBD8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64211090:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		cmp	edx, ecx	; jumptable 64211085 case 21
		jz	loc_64211160

loc_64211098:				; CODE XREF: _normal_attributeValueTok+95j
					; _normal_attributeValueTok+E7j ...
		mov	[edi], edx
		mov	eax, 6
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642110B0:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		mov	[edi], edx	; jumptable 64211085 case 2
		xor	eax, eax
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_642110C3:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		cmp	edx, ecx	; jumptable 64211085 case 3
		jnz	short loc_64211098
		mov	[esp+0Ch+arg_0], edi
		mov	ecx, esi
		mov	eax, ebx
		mov	esi, [esp+0Ch+var_8]
		add	edx, 1
		mov	ebx, [esp+0Ch+var_C]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	_normal_scanRef
; ---------------------------------------------------------------------------

loc_642110E5:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		add	edx, 2		; jumptable 64211085 case 5
		cmp	esi, edx
		jnz	loc_64211059
		jmp	loc_6421106A
; ---------------------------------------------------------------------------

loc_642110F5:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		add	edx, 3		; jumptable 64211085 case 6
		cmp	esi, edx
		jnz	loc_64211059
		jmp	loc_6421106A
; ---------------------------------------------------------------------------

loc_64211105:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		add	edx, 4		; jumptable 64211085 case 7
		cmp	esi, edx
		jnz	loc_64211059
		jmp	loc_6421106A
; ---------------------------------------------------------------------------

loc_64211115:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		cmp	edx, ecx	; jumptable 64211085 case 9
		jnz	loc_64211098
		lea	ecx, [edx+1]
		mov	eax, 0FFFFFFFDh
		cmp	ecx, esi
		jz	loc_64211071
		movzx	eax, byte ptr [edx+1]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		jnz	short loc_6421113B
		lea	ecx, [edx+2]

loc_6421113B:				; CODE XREF: _normal_attributeValueTok+106j
		mov	[edi], ecx
		mov	eax, 7
		jmp	loc_64211071
; ---------------------------------------------------------------------------

loc_64211147:				; CODE XREF: _normal_attributeValueTok+55j
					; DATA XREF: .rdata:off_6421EBD8o
		cmp	edx, ecx	; jumptable 64211085 case 10
		jnz	loc_64211098
		add	edx, 1
		mov	eax, 7
		mov	[edi], edx
		jmp	loc_64211071
; ---------------------------------------------------------------------------
		align 10h

loc_64211160:				; CODE XREF: _normal_attributeValueTok+62j
		add	edx, 1
		mov	eax, 27h
		mov	[edi], edx
		jmp	loc_64211071
_normal_attributeValueTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_entityValueTok proc near	; DATA XREF: .rdata:642228D4o
					; .rdata:64223174o ...

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	eax, 0FFFFFFFCh
		mov	[esp+1Ch+var_4], edi
		mov	ecx, [esp+1Ch+arg_8]
		mov	edi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_C]
		cmp	edi, ecx
		mov	edx, edi
		jz	short loc_642111B7

loc_6421119A:				; CODE XREF: _normal_entityValueTok+3Ej
					; _normal_entityValueTok+BCj ...
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 3
		cmp	al, 1Bh		; switch 28 cases
		jbe	short loc_642111C7

loc_642111A9:				; CODE XREF: _normal_entityValueTok+5Aj
					; DATA XREF: .rdata:off_6421EC30o
		add	edx, 1		; jumptable 642111CA default case
		cmp	ecx, edx
		jnz	short loc_6421119A

loc_642111B0:				; CODE XREF: _normal_entityValueTok+C2j
					; _normal_entityValueTok+D2j ...
		mov	[esi], ecx
		mov	eax, 6

loc_642111B7:				; CODE XREF: _normal_entityValueTok+28j
					; _normal_entityValueTok+8Ej ...
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_642111C7:				; CODE XREF: _normal_entityValueTok+37j
		movzx	eax, al
		jmp	ds:off_6421EC30[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642111D1:				; CODE XREF: _normal_entityValueTok+5Aj
					; DATA XREF: .rdata:off_6421EC30o
		cmp	edx, edi	; jumptable 642111CA case 27
		jz	loc_6421127C

loc_642111D9:				; CODE XREF: _normal_entityValueTok+82j
					; _normal_entityValueTok+92j ...
		mov	[esi], edx
		mov	eax, 6
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_642111F0:				; CODE XREF: _normal_entityValueTok+5Aj
					; DATA XREF: .rdata:off_6421EC30o
		cmp	edx, edi	; jumptable 642111CA case 7
		jnz	short loc_642111D9
		add	edx, 1
		mov	eax, 7
		mov	[esi], edx
		jmp	short loc_642111B7
; ---------------------------------------------------------------------------

loc_64211200:				; CODE XREF: _normal_entityValueTok+5Aj
					; DATA XREF: .rdata:off_6421EC30o
		cmp	edx, edi	; jumptable 642111CA case 6
		jnz	short loc_642111D9
		lea	edi, [edx+1]
		mov	eax, 0FFFFFFFDh
		cmp	edi, ecx
		jz	short loc_642111B7
		movzx	eax, byte ptr [edx+1]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		jnz	short loc_6421121E
		lea	edi, [edx+2]

loc_6421121E:				; CODE XREF: _normal_entityValueTok+A9j
		mov	[esi], edi
		mov	eax, 7
		jmp	short loc_642111B7
; ---------------------------------------------------------------------------

loc_64211227:				; CODE XREF: _normal_entityValueTok+5Aj
					; DATA XREF: .rdata:off_6421EC30o
		add	edx, 4		; jumptable 642111CA case 4
		cmp	ecx, edx
		jnz	loc_6421119A
		jmp	loc_642111B0
; ---------------------------------------------------------------------------

loc_64211237:				; CODE XREF: _normal_entityValueTok+5Aj
					; DATA XREF: .rdata:off_6421EC30o
		add	edx, 3		; jumptable 642111CA case 3
		cmp	ecx, edx
		jnz	loc_6421119A
		jmp	loc_642111B0
; ---------------------------------------------------------------------------

loc_64211247:				; CODE XREF: _normal_entityValueTok+5Aj
					; DATA XREF: .rdata:off_6421EC30o
		add	edx, 2		; jumptable 642111CA case 2
		cmp	ecx, edx
		jnz	loc_6421119A
		jmp	loc_642111B0
; ---------------------------------------------------------------------------

loc_64211257:				; CODE XREF: _normal_entityValueTok+5Aj
					; DATA XREF: .rdata:off_6421EC30o
		cmp	edx, edi	; jumptable 642111CA case 0
		jnz	loc_642111D9
		mov	[esp+1Ch+arg_0], esi
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		add	edx, 1
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_normal_scanRef
; ---------------------------------------------------------------------------

loc_6421127C:				; CODE XREF: _normal_entityValueTok+63j
		add	edx, 1
		mov	eax, ebx
		mov	[esp+1Ch+var_1C], esi
		call	_normal_scanPercent
		xor	edx, edx
		cmp	eax, 16h
		setz	dl
		sub	edx, 1
		and	eax, edx
		jmp	loc_642111B7
_normal_entityValueTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_ignoreSectionTok proc near	; DATA XREF: .rdata:642228CCo
					; .rdata:6422316Co ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_4]
		mov	edi, [esp+3Ch+arg_8]
		mov	esi, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_C]
		cmp	ebx, edi
		jz	loc_642113E1
		movzx	eax, byte ptr [ebx]
		mov	[esp+3Ch+var_20], 0

loc_642112CA:				; CODE XREF: _normal_ignoreSectionTok+E2j
					; _normal_ignoreSectionTok+F4j	...
		movzx	eax, al
		cmp	byte ptr [esi+eax+4Ch],	8
		jbe	short loc_642112EC

loc_642112D4:				; CODE XREF: _normal_ignoreSectionTok+4Aj
					; _normal_ignoreSectionTok+51j
					; DATA XREF: ...
		add	ebx, 1		; jumptable 642112F1 default case

loc_642112D7:				; CODE XREF: _normal_ignoreSectionTok+86j
					; _normal_ignoreSectionTok+A9j	...
		cmp	edi, ebx
		jz	loc_642113E1
		movzx	eax, byte ptr [ebx]
		movzx	eax, al
		cmp	byte ptr [esi+eax+4Ch],	8 ; switch 9 cases
		ja	short loc_642112D4 ; jumptable 642112F1	default	case

loc_642112EC:				; CODE XREF: _normal_ignoreSectionTok+32j
		movzx	eax, byte ptr [esi+eax+4Ch]
		jmp	ds:off_6421ECA0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642112F8:				; CODE XREF: _normal_ignoreSectionTok+51j
					; _normal_ignoreSectionTok+81j	...
		mov	[ebp+0], ebx	; jumptable 642112F1 cases 0,1,8
		xor	eax, eax

loc_642112FD:				; CODE XREF: _normal_ignoreSectionTok+155j
					; _normal_ignoreSectionTok+162j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64211305:				; CODE XREF: _normal_ignoreSectionTok+51j
					; DATA XREF: .rdata:off_6421ECA0o
		mov	eax, edi	; jumptable 642112F1 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_642113F0
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	short loc_642112F8 ; jumptable 642112F1	cases 0,1,8
		add	ebx, 4
		jmp	short loc_642112D7
; ---------------------------------------------------------------------------

loc_64211328:				; CODE XREF: _normal_ignoreSectionTok+51j
					; DATA XREF: .rdata:off_6421ECA0o
		mov	eax, edi	; jumptable 642112F1 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_642113F0
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	short loc_642112F8 ; jumptable 642112F1	cases 0,1,8
		add	ebx, 3
		jmp	short loc_642112D7
; ---------------------------------------------------------------------------
		align 10h

loc_64211350:				; CODE XREF: _normal_ignoreSectionTok+51j
					; DATA XREF: .rdata:off_6421ECA0o
		mov	eax, edi	; jumptable 642112F1 case 5
		sub	eax, ebx
		cmp	eax, 1
		jle	loc_642113F0
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	short loc_642112F8 ; jumptable 642112F1	cases 0,1,8
		add	ebx, 2
		jmp	loc_642112D7
; ---------------------------------------------------------------------------

loc_64211376:				; CODE XREF: _normal_ignoreSectionTok+51j
					; DATA XREF: .rdata:off_6421ECA0o
		add	ebx, 1		; jumptable 642112F1 case 4
		cmp	ebx, edi
		jz	short loc_642113E1
		movzx	eax, byte ptr [ebx]
		cmp	al, 5Dh
		jnz	loc_642112CA
		add	ebx, 1
		cmp	ebx, edi
		jz	short loc_642113E1
		movzx	eax, byte ptr [ebx]
		cmp	al, 3Eh
		jnz	loc_642112CA
		mov	eax, [esp+3Ch+var_20]
		add	ebx, 1
		test	eax, eax
		jz	short loc_642113FA
		sub	[esp+3Ch+var_20], 1
		jmp	loc_642112D7
; ---------------------------------------------------------------------------
		align 10h

loc_642113B0:				; CODE XREF: _normal_ignoreSectionTok+51j
					; DATA XREF: .rdata:off_6421ECA0o
		add	ebx, 1		; jumptable 642112F1 case 2
		cmp	ebx, edi
		jz	short loc_642113E1
		movzx	eax, byte ptr [ebx]
		cmp	al, 21h
		jnz	loc_642112CA
		add	ebx, 1
		cmp	ebx, edi
		jz	short loc_642113E1
		movzx	eax, byte ptr [ebx]
		cmp	al, 5Bh
		jnz	loc_642112CA
		add	[esp+3Ch+var_20], 1
		add	ebx, 1
		jmp	loc_642112D7
; ---------------------------------------------------------------------------

loc_642113E1:				; CODE XREF: _normal_ignoreSectionTok+19j
					; _normal_ignoreSectionTok+39j	...
		add	esp, 2Ch
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642113F0:				; CODE XREF: _normal_ignoreSectionTok+6Cj
					; _normal_ignoreSectionTok+8Fj	...
		mov	eax, 0FFFFFFFEh
		jmp	loc_642112FD
; ---------------------------------------------------------------------------

loc_642113FA:				; CODE XREF: _normal_ignoreSectionTok+103j
		mov	[ebp+0], ebx
		mov	eax, 2Ah
		jmp	loc_642112FD
_normal_ignoreSectionTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_isPublicId proc	near		; DATA XREF: .rdata:642228F8o
					; .rdata:64223198o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	eax, [esp+10h+arg_4]
		mov	ebx, [esp+10h+arg_8]
		mov	esi, [esp+10h+arg_0]
		add	eax, 1
		sub	ebx, 1
		cmp	eax, ebx
		jz	short loc_64211489
		mov	edi, 1
		nop

loc_64211430:				; CODE XREF: _normal_isPublicId+77j
					; _normal_isPublicId+8Cj
		movzx	edx, byte ptr [eax]
		movzx	ecx, dl
		movzx	ecx, byte ptr [esi+ecx+4Ch]
		sub	ecx, 9
		cmp	cl, 1Ah
		jbe	short loc_64211460

loc_64211443:				; CODE XREF: _normal_isPublicId+69j
					; _normal_isPublicId+85j
		cmp	dl, 24h
		jz	short loc_64211482
		cmp	dl, 40h
		jz	short loc_64211482
		mov	ebp, [esp+10h+arg_C]
		mov	[ebp+0], eax
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211460:				; CODE XREF: _normal_isPublicId+31j
		mov	ebp, edi
		shl	ebp, cl
		test	ebp, 7E5C7F3h
		mov	ecx, ebp
		jnz	short loc_64211482
		test	ebp, 22000h
		jnz	short loc_64211493
		and	ch, 10h
		jz	short loc_64211443
		cmp	dl, 9
		xchg	ax, ax
		jz	short loc_642114A2

loc_64211482:				; CODE XREF: _normal_isPublicId+36j
					; _normal_isPublicId+3Bj ...
		add	eax, 1
		cmp	ebx, eax
		jnz	short loc_64211430

loc_64211489:				; CODE XREF: _normal_isPublicId+18j
					; _normal_isPublicId+90j
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64211493:				; CODE XREF: _normal_isPublicId+64j
		test	dl, dl
		js	short loc_64211443
		add	eax, 1
		cmp	ebx, eax
		jnz	short loc_64211430
		xchg	ax, ax
		jmp	short loc_64211489
; ---------------------------------------------------------------------------

loc_642114A2:				; CODE XREF: _normal_isPublicId+70j
		mov	edx, [esp+10h+arg_C]
		mov	[edx], eax
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_normal_isPublicId endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_getAtts	proc near		; DATA XREF: .rdata:642228E8o
					; .rdata:64223188o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		xor	ebp, ebp
		push	edi
		push	esi
		mov	esi, 1
		push	ebx
		sub	esp, 0Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	edi, [esp+1Ch+arg_0]
		lea	edx, [eax+1]
		movzx	eax, byte ptr [eax+1]
		movzx	ecx, al
		movzx	ebx, byte ptr [edi+ecx+4Ch]
		mov	[esp+1Ch+var_1C], 0
		sub	ebx, 3
		cmp	bl, 1Ah
		jbe	short loc_642114FD

loc_642114E4:				; CODE XREF: _normal_getAtts+4Bj
					; _normal_getAtts+50j ...
		movzx	eax, byte ptr [edx+1] ;	jumptable 64211500 default case
		lea	ecx, [edx+1]
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx

loc_642114F5:				; CODE XREF: _normal_getAtts+87j
					; _normal_getAtts+EFj ...
		sub	ebx, 3
		cmp	bl, 1Ah		; switch 27 cases
		ja	short loc_642114E4 ; jumptable 64211500	default	case

loc_642114FD:				; CODE XREF: _normal_getAtts+32j
		movzx	ebx, bl
		jmp	ds:off_6421ECC4[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64211507:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		test	esi, esi	; jumptable 64211500 cases 19,21,26
		jnz	short loc_642114E4 ; jumptable 64211500	default	case
		cmp	ebp, [esp+1Ch+arg_8]
		nop
		jge	short loc_64211521
		mov	eax, ebp
		shl	eax, 4
		add	eax, [esp+1Ch+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_64211521:				; CODE XREF: _normal_getAtts+60j
		movzx	eax, byte ptr [edx+1]
		lea	ecx, [edx+1]
		mov	esi, 1
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	short loc_642114F5
; ---------------------------------------------------------------------------
		align 10h

loc_64211540:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		cmp	esi, 1		; jumptable 64211500 case 18
		jz	loc_64211750
		cmp	ebp, [esp+1Ch+arg_8]
		jge	short loc_642114E4 ; jumptable 64211500	default	case
		cmp	esi, 2
		jnz	short loc_642114E4 ; jumptable 64211500	default	case
		mov	ecx, ebp
		shl	ecx, 4
		add	ecx, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_18], ecx
		cmp	byte ptr [ecx+0Ch], 0
		jz	loc_642114E4	; jumptable 64211500 default case
		mov	ebx, ecx
		cmp	[ebx+4], edx
		lea	ecx, [edx+1]
		mov	[esp+1Ch+var_14], ecx
		jz	short loc_64211581
		cmp	al, 20h
		jz	loc_642117B4

loc_64211581:				; CODE XREF: _normal_getAtts+C7j
					; _normal_getAtts+30Aj	...
		mov	ebx, [esp+1Ch+var_18]
		mov	esi, 2
		mov	byte ptr [ebx+0Ch], 0
		mov	ecx, [esp+1Ch+var_14]
		movzx	eax, byte ptr [ecx]
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	loc_642114F5
; ---------------------------------------------------------------------------

loc_642115A4:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		cmp	esi, 2		; jumptable 64211500 case 10
		jz	loc_642117A8
		cmp	ebp, [esp+1Ch+arg_8]
		lea	ecx, [edx+1]
		jge	short loc_642115C6
		mov	ebx, [esp+1Ch+arg_C]
		mov	eax, ebp
		lea	ecx, [edx+1]
		shl	eax, 4
		mov	[eax+ebx+4], ecx

loc_642115C6:				; CODE XREF: _normal_getAtts+104j
		movzx	eax, byte ptr [edx+1]
		mov	esi, 2
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		mov	[esp+1Ch+var_1C], 0Dh
		jmp	loc_642114F5
; ---------------------------------------------------------------------------

loc_642115E5:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		cmp	esi, 2		; jumptable 64211500 case 9
		jz	loc_64211770
		cmp	ebp, [esp+1Ch+arg_8]
		lea	ecx, [edx+1]
		jge	short loc_64211607
		mov	ebx, [esp+1Ch+arg_C]
		mov	eax, ebp
		lea	ecx, [edx+1]
		shl	eax, 4
		mov	[eax+ebx+4], ecx

loc_64211607:				; CODE XREF: _normal_getAtts+145j
		movzx	eax, byte ptr [edx+1]
		mov	esi, 2
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		mov	[esp+1Ch+var_1C], 0Ch
		jmp	loc_642114F5
; ---------------------------------------------------------------------------

loc_64211626:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		cmp	esi, 2		; jumptable 64211500 cases 8,14
		jz	loc_642114E4	; jumptable 64211500 default case
		add	esp, 0Ch
		mov	eax, ebp
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211640:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		cmp	esi, 1		; jumptable 64211500 cases 6,7
		jz	loc_64211750
		cmp	ebp, [esp+1Ch+arg_8]
		jge	loc_642114E4	; jumptable 64211500 default case
		cmp	esi, 2
		jnz	loc_642114E4	; jumptable 64211500 default case
		mov	ecx, [esp+1Ch+arg_C]
		mov	eax, ebp
		shl	eax, 4
		mov	byte ptr [eax+ecx+0Ch],	0
		movzx	eax, byte ptr [edx+1]
		lea	ecx, [edx+1]
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	loc_642114F5
; ---------------------------------------------------------------------------

loc_64211680:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		test	esi, esi	; jumptable 64211500 case 4
		jnz	short loc_6421169D
		cmp	ebp, [esp+1Ch+arg_8]
		mov	si, 1
		jge	short loc_6421169D
		mov	eax, ebp
		shl	eax, 4
		add	eax, [esp+1Ch+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_6421169D:				; CODE XREF: _normal_getAtts+1D2j
					; _normal_getAtts+1DCj
		movzx	eax, byte ptr [edx+4]
		lea	ecx, [edx+4]
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	loc_642114F5
; ---------------------------------------------------------------------------

loc_642116B3:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		test	esi, esi	; jumptable 64211500 case 3
		jnz	short loc_642116D0
		cmp	ebp, [esp+1Ch+arg_8]
		mov	si, 1
		jge	short loc_642116D0
		mov	eax, ebp
		shl	eax, 4
		add	eax, [esp+1Ch+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_642116D0:				; CODE XREF: _normal_getAtts+205j
					; _normal_getAtts+20Fj
		movzx	eax, byte ptr [edx+3]
		lea	ecx, [edx+3]
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	loc_642114F5
; ---------------------------------------------------------------------------

loc_642116E6:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		test	esi, esi	; jumptable 64211500 case 2
		jnz	short loc_64211703
		cmp	ebp, [esp+1Ch+arg_8]
		mov	si, 1
		jge	short loc_64211703
		mov	eax, ebp
		shl	eax, 4
		add	eax, [esp+1Ch+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_64211703:				; CODE XREF: _normal_getAtts+238j
					; _normal_getAtts+242j
		movzx	eax, byte ptr [edx+2]
		lea	ecx, [edx+2]
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	loc_642114F5
; ---------------------------------------------------------------------------
		align 10h

loc_64211720:				; CODE XREF: _normal_getAtts+50j
					; DATA XREF: .rdata:off_6421ECC4o
		cmp	ebp, [esp+1Ch+arg_8] ; jumptable 64211500 case 0
		jge	loc_642114E4	; jumptable 64211500 default case
		mov	ebx, [esp+1Ch+arg_C]
		mov	eax, ebp
		shl	eax, 4
		lea	ecx, [edx+1]
		mov	byte ptr [eax+ebx+0Ch],	0
		movzx	eax, byte ptr [edx+1]
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	loc_642114F5
; ---------------------------------------------------------------------------
		align 10h

loc_64211750:				; CODE XREF: _normal_getAtts+93j
					; _normal_getAtts+193j
		movzx	eax, byte ptr [edx+1]
		lea	ecx, [edx+1]
		xor	si, si
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	loc_642114F5
; ---------------------------------------------------------------------------
		align 10h

loc_64211770:				; CODE XREF: _normal_getAtts+138j
		cmp	[esp+1Ch+var_1C], 0Ch
		jnz	loc_642114E4	; jumptable 64211500 default case

loc_6421177A:				; CODE XREF: _normal_getAtts+302j
		cmp	ebp, [esp+1Ch+arg_8]
		jge	short loc_6421178D
		mov	ecx, [esp+1Ch+arg_C]
		mov	eax, ebp
		shl	eax, 4
		mov	[eax+ecx+8], edx

loc_6421178D:				; CODE XREF: _normal_getAtts+2CEj
		movzx	eax, byte ptr [edx+1]
		lea	ecx, [edx+1]
		add	ebp, 1
		xor	esi, esi
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		mov	edx, ecx
		jmp	loc_642114F5
; ---------------------------------------------------------------------------

loc_642117A8:				; CODE XREF: _normal_getAtts+F7j
		cmp	[esp+1Ch+var_1C], 0Dh
		jnz	loc_642114E4	; jumptable 64211500 default case
		jmp	short loc_6421177A
; ---------------------------------------------------------------------------

loc_642117B4:				; CODE XREF: _normal_getAtts+CBj
		movzx	eax, byte ptr [edx+1]
		cmp	al, 20h
		jz	loc_64211581
		movzx	edx, al
		movzx	ebx, byte ptr [edi+edx+4Ch]
		movzx	edx, bl
		cmp	edx, [esp+1Ch+var_1C]
		jz	loc_64211581
		mov	edx, ecx
		jmp	loc_642114F5
_normal_getAtts	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_charRefNumber proc near		; DATA XREF: .rdata:642228ECo
					; .rdata:6422318Co ...

arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		movzx	eax, byte ptr [ebx+2]
		lea	edx, [ebx+2]
		cmp	al, 78h
		jz	short loc_64211847
		cmp	al, 3Bh
		jz	loc_642118CC
		movsx	eax, al
		sub	eax, 30h
		jmp	short loc_64211811
; ---------------------------------------------------------------------------

loc_64211800:				; CODE XREF: _normal_charRefNumber+3Aj
		lea	eax, [eax+eax*4]
		movsx	ecx, cl
		lea	eax, [ecx+eax*2-30h]
		cmp	eax, 10FFFFh
		jg	short loc_64211840

loc_64211811:				; CODE XREF: _normal_charRefNumber+1Ej
		add	edx, 1
		movzx	ecx, byte ptr [edx]
		cmp	cl, 3Bh
		jnz	short loc_64211800
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 0DFh
		jg	short loc_64211896

loc_64211829:				; CODE XREF: _normal_charRefNumber+B4j
		cmp	edx, 0D8h
		jge	short loc_64211840
		test	edx, edx
		jnz	short loc_64211845

loc_64211835:				; CODE XREF: _normal_charRefNumber+EEj
		cmp	ds:byte_6422290C[eax], 0
		jnz	short loc_64211845
		xchg	ax, ax

loc_64211840:				; CODE XREF: _normal_charRefNumber+2Fj
					; _normal_charRefNumber+4Fj ...
		mov	eax, 0FFFFFFFFh

loc_64211845:				; CODE XREF: _normal_charRefNumber+53j
					; _normal_charRefNumber+5Cj ...
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_64211847:				; CODE XREF: _normal_charRefNumber+Ej
		movzx	edx, byte ptr [ebx+3]
		lea	ecx, [ebx+3]
		cmp	dl, 3Bh
		jz	short loc_642118CC
		xor	eax, eax

loc_64211855:				; CODE XREF: _normal_charRefNumber+A7j
		movsx	ebx, dl
		sub	edx, 30h
		cmp	dl, 36h		; switch 55 cases
		ja	short loc_6421187E ; jumptable 64211863	default	case
		movzx	edx, dl
		jmp	ds:off_6421ED30[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64211870:				; CODE XREF: _normal_charRefNumber+83j
					; DATA XREF: .rdata:off_6421ED30o
		shl	eax, 4		; jumptable 64211863 cases 49-54
		lea	eax, [ebx+eax-57h]

loc_64211877:				; CODE XREF: _normal_charRefNumber+D7j
					; _normal_charRefNumber+EAj
		cmp	eax, 10FFFFh
		jg	short loc_64211840

loc_6421187E:				; CODE XREF: _normal_charRefNumber+7Ej
					; _normal_charRefNumber+83j
					; DATA XREF: ...
		add	ecx, 1		; jumptable 64211863 default case
		movzx	edx, byte ptr [ecx]
		cmp	dl, 3Bh
		jnz	short loc_64211855
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 0DFh
		jle	short loc_64211829

loc_64211896:				; CODE XREF: _normal_charRefNumber+47j
		cmp	edx, 0FFh
		jnz	short loc_64211845
		lea	edx, [eax-0FFFEh]
		cmp	edx, 1
		jbe	short loc_64211840
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642118B0:				; CODE XREF: _normal_charRefNumber+83j
					; DATA XREF: .rdata:off_6421ED30o
		shl	eax, 4		; jumptable 64211863 cases 17-22
		lea	eax, [ebx+eax-37h]
		jmp	short loc_64211877
; ---------------------------------------------------------------------------
		align 10h

loc_642118C0:				; CODE XREF: _normal_charRefNumber+83j
					; DATA XREF: .rdata:off_6421ED30o
		mov	edx, eax	; jumptable 64211863 cases 0-9
		shl	edx, 4
		lea	eax, [ebx-30h]
		or	eax, edx
		jmp	short loc_64211877
; ---------------------------------------------------------------------------

loc_642118CC:				; CODE XREF: _normal_charRefNumber+12j
					; _normal_charRefNumber+71j
		xor	eax, eax
		jmp	loc_64211835
_normal_charRefNumber endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_predefinedEntityName proc near	; DATA XREF: .rdata:642228F0o
					; .rdata:64223190o ...

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_8]
		sub	eax, edx
		cmp	eax, 3
		jz	short loc_64211950
		cmp	eax, 4
		jz	short loc_64211920
		cmp	eax, 2
		jz	short loc_64211900

loc_642118F9:				; CODE XREF: _normal_predefinedEntityName+24j
					; _normal_predefinedEntityName+35j ...
		xor	eax, eax

locret_642118FB:			; CODE XREF: _normal_predefinedEntityName+2Ej
					; _normal_predefinedEntityName+64j ...
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211900:				; CODE XREF: _normal_predefinedEntityName+17j
		cmp	byte ptr [edx+1], 74h
		jnz	short loc_642118F9
		movzx	edx, byte ptr [edx]
		mov	al, 3Eh
		cmp	dl, 67h
		jz	short locret_642118FB
		cmp	dl, 6Ch
		mov	al, 3Ch
		jnz	short loc_642118F9
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211920:				; CODE XREF: _normal_predefinedEntityName+12j
		movzx	eax, byte ptr [edx]
		cmp	al, 61h
		jz	short loc_64211970
		cmp	al, 71h
		jnz	short loc_642118F9
		cmp	byte ptr [edx+1], 75h
		nop
		jnz	short loc_642118F9
		cmp	byte ptr [edx+2], 6Fh
		lea	ecx, [edx+2]
		jnz	short loc_642118F9
		cmp	byte ptr [ecx+1], 74h
		mov	eax, 22h
		jz	short locret_642118FB
		xor	eax, eax
		jmp	short locret_642118FB
; ---------------------------------------------------------------------------
		align 10h

loc_64211950:				; CODE XREF: _normal_predefinedEntityName+Dj
		cmp	byte ptr [edx],	61h
		jnz	short loc_642118F9
		cmp	byte ptr [edx+1], 6Dh
		lea	ecx, [edx+1]
		jnz	short loc_642118F9
		cmp	byte ptr [ecx+1], 70h
		mov	eax, 26h
		jz	short locret_642118FB
		xor	eax, eax
		jmp	short locret_642118FB
; ---------------------------------------------------------------------------
		align 10h

loc_64211970:				; CODE XREF: _normal_predefinedEntityName+45j
		cmp	byte ptr [edx+1], 70h
		jnz	short loc_642118F9
		cmp	byte ptr [edx+2], 6Fh
		lea	ecx, [edx+2]
		lea	esi, [esi+0]
		jnz	loc_642118F9
		cmp	byte ptr [ecx+1], 73h
		mov	eax, 27h
		jz	locret_642118FB
		xor	eax, eax
		jmp	locret_642118FB
_normal_predefinedEntityName endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_sameName proc near		; DATA XREF: .rdata:642228D8o
					; .rdata:64223178o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		mov	esi, [esp+8+arg_0]
		mov	edx, [esp+8+arg_4]
		mov	eax, [esp+8+arg_8]

loc_642119AE:				; CODE XREF: _normal_sameName+7Dj
					; _normal_sameName+8Aj
		movzx	ecx, byte ptr [edx]
		movzx	ebx, cl
		movzx	ebx, byte ptr [esi+ebx+4Ch]
		sub	ebx, 5
		cmp	bl, 18h		; switch 25 cases
		jbe	short loc_642119E4

loc_642119C1:				; CODE XREF: _normal_sameName+47j
					; DATA XREF: .rdata:off_6421EE0Co
		movzx	eax, byte ptr [eax] ; jumptable	642119E7 default case
		cmp	cl, al
		jz	short loc_64211A30
		movzx	eax, al
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5
		cmp	al, 18h
		ja	short loc_64211A30
		movzx	eax, al
		mov	eax, ds:_CSWTCH_452[eax*4]
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_642119E4:				; CODE XREF: _normal_sameName+1Fj
		movzx	ebx, bl
		jmp	ds:off_6421EE0C[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_642119F0:				; CODE XREF: _normal_sameName+47j
					; DATA XREF: .rdata:off_6421EE0Co
		cmp	cl, [eax]	; jumptable 642119E7 case 2
		jnz	short loc_64211A38
		add	edx, 1
		add	eax, 1
		movzx	ecx, byte ptr [edx]

loc_642119FD:				; CODE XREF: _normal_sameName+47j
					; DATA XREF: .rdata:off_6421EE0Co
		cmp	[eax], cl	; jumptable 642119E7 case 1
		jnz	short loc_64211A38
		add	edx, 1
		add	eax, 1
		movzx	ecx, byte ptr [edx]

loc_64211A0A:				; CODE XREF: _normal_sameName+47j
					; DATA XREF: .rdata:off_6421EE0Co
		cmp	[eax], cl	; jumptable 642119E7 case 0
		jnz	short loc_64211A38
		movzx	ecx, byte ptr [edx+1]
		cmp	cl, [eax+1]
		jnz	short loc_64211A38
		add	edx, 2
		add	eax, 2
		jmp	short loc_642119AE
; ---------------------------------------------------------------------------
		align 10h

loc_64211A20:				; CODE XREF: _normal_sameName+47j
					; DATA XREF: .rdata:off_6421EE0Co
		cmp	cl, [eax]	; jumptable 642119E7 cases 17-22,24
		jnz	short loc_64211A38
		add	eax, 1
		add	edx, 1
		jmp	short loc_642119AE
; ---------------------------------------------------------------------------
		align 10h

loc_64211A30:				; CODE XREF: _normal_sameName+26j
					; _normal_sameName+35j
		mov	eax, 1
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_64211A38:				; CODE XREF: _normal_sameName+52j
					; _normal_sameName+5Fj	...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
_normal_sameName endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_nameMatchesAscii proc near	; DATA XREF: .rdata:642228DCo
					; .rdata:6422317Co ...

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	edx, [esp+4+arg_C]
		mov	eax, [esp+4+arg_4]
		mov	ebx, [esp+4+arg_8]
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_64211A80
		cmp	eax, ebx
		jnz	short loc_64211A71
		jmp	short loc_64211A75
; ---------------------------------------------------------------------------
		align 10h

loc_64211A60:				; CODE XREF: _normal_nameMatchesAscii+33j
		add	edx, 1
		add	eax, 1
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_64211A80
		cmp	ebx, eax
		jz	short loc_64211A75

loc_64211A71:				; CODE XREF: _normal_nameMatchesAscii+16j
		cmp	cl, [eax]
		jz	short loc_64211A60

loc_64211A75:				; CODE XREF: _normal_nameMatchesAscii+18j
					; _normal_nameMatchesAscii+2Fj
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211A80:				; CODE XREF: _normal_nameMatchesAscii+12j
					; _normal_nameMatchesAscii+2Bj
		cmp	eax, ebx
		setz	al
		movzx	eax, al
		pop	ebx
		retn
_normal_nameMatchesAscii endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_nameLength proc	near		; DATA XREF: .rdata:642228E0o
					; .rdata:64223180o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		mov	ecx, [esp+4+arg_0]
		mov	eax, ebx

loc_64211A9B:				; CODE XREF: _normal_nameLength+33j
					; _normal_nameLength+38j ...
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [ecx+edx+4Ch]
		sub	edx, 5
		cmp	dl, 18h		; switch 25 cases
		jbe	short loc_64211AB0

loc_64211AAB:				; CODE XREF: _normal_nameLength+23j
					; DATA XREF: .rdata:off_6421EE70o
		sub	eax, ebx	; jumptable 64211AB3 default case
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211AB0:				; CODE XREF: _normal_nameLength+19j
		movzx	edx, dl
		jmp	ds:off_6421EE70[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64211AC0:				; CODE XREF: _normal_nameLength+23j
					; DATA XREF: .rdata:off_6421EE70o
		add	eax, 1		; jumptable 64211AB3 cases 17-22,24
		jmp	short loc_64211A9B
; ---------------------------------------------------------------------------

loc_64211AC5:				; CODE XREF: _normal_nameLength+23j
					; DATA XREF: .rdata:off_6421EE70o
		add	eax, 4		; jumptable 64211AB3 case 2
		jmp	short loc_64211A9B
; ---------------------------------------------------------------------------
		align 10h

loc_64211AD0:				; CODE XREF: _normal_nameLength+23j
					; DATA XREF: .rdata:off_6421EE70o
		add	eax, 3		; jumptable 64211AB3 case 1
		jmp	short loc_64211A9B
; ---------------------------------------------------------------------------

loc_64211AD5:				; CODE XREF: _normal_nameLength+23j
					; DATA XREF: .rdata:off_6421EE70o
		add	eax, 2		; jumptable 64211AB3 case 0
		jmp	short loc_64211A9B
_normal_nameLength endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_skipS	proc near		; DATA XREF: .rdata:642228E4o
					; .rdata:64223184o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	edx, [esp+8+arg_0]
		mov	ebx, 1
		mov	eax, [esp+8+arg_4]
		nop

loc_64211AF0:				; CODE XREF: _normal_skipS+36j
		movzx	ecx, byte ptr [eax]
		cmp	byte ptr [edx+ecx+4Ch],	15h
		jbe	short loc_64211B00

loc_64211AFA:				; CODE XREF: _normal_skipS+31j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211B00:				; CODE XREF: _normal_skipS+18j
		movsx	ecx, byte ptr [edx+ecx+4Ch]
		mov	esi, ebx
		shl	esi, cl
		mov	ecx, esi
		and	ecx, 200600h
		jz	short loc_64211AFA
		add	eax, 1
		jmp	short loc_64211AF0
_normal_skipS	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_normal_updatePosition proc near	; DATA XREF: .rdata:642228F4o
					; .rdata:64223194o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		mov	eax, [esp+8+arg_4]
		mov	ebx, [esp+8+arg_8]
		mov	esi, [esp+8+arg_0]
		mov	edx, [esp+8+arg_C]
		cmp	eax, ebx
		jb	short loc_64211B48
		jmp	short loc_64211B78
; ---------------------------------------------------------------------------

loc_64211B38:				; CODE XREF: _normal_updatePosition+36j
					; _normal_updatePosition+3Bj
					; DATA XREF: ...
		mov	ecx, [edx+4]	; jumptable 64211B5B default case
		add	eax, 1
		add	ecx, 1

loc_64211B41:				; CODE XREF: _normal_updatePosition+83j
					; _normal_updatePosition+8Ej ...
		cmp	eax, ebx
		mov	[edx+4], ecx
		jnb	short loc_64211B78

loc_64211B48:				; CODE XREF: _normal_updatePosition+14j
					; _normal_updatePosition+56j
		movzx	ecx, byte ptr [eax]
		movzx	ecx, byte ptr [esi+ecx+4Ch]
		sub	ecx, 5
		cmp	cl, 5		; switch 6 cases
		ja	short loc_64211B38 ; jumptable 64211B5B	default	case
		movzx	ecx, cl
		jmp	ds:off_6421EED4[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64211B62:				; CODE XREF: _normal_updatePosition+3Bj
					; DATA XREF: .rdata:off_6421EED4o
		add	eax, 1		; jumptable 64211B5B case 5
		xor	ecx, ecx
		add	dword ptr [edx], 1
		cmp	eax, ebx
		mov	dword ptr [edx+4], 0FFFFFFFFh
		mov	[edx+4], ecx
		jb	short loc_64211B48

loc_64211B78:				; CODE XREF: _normal_updatePosition+16j
					; _normal_updatePosition+26j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211B80:				; CODE XREF: _normal_updatePosition+3Bj
					; DATA XREF: .rdata:off_6421EED4o
		add	eax, 1		; jumptable 64211B5B case 4
		add	dword ptr [edx], 1
		cmp	eax, ebx
		jz	short loc_64211B9A
		movzx	ecx, byte ptr [eax]
		cmp	byte ptr [esi+ecx+4Ch],	0Ah
		setz	cl
		movzx	ecx, cl
		add	eax, ecx

loc_64211B9A:				; CODE XREF: _normal_updatePosition+68j
		mov	dword ptr [edx+4], 0FFFFFFFFh
		xor	ecx, ecx
		jmp	short loc_64211B41
; ---------------------------------------------------------------------------

loc_64211BA5:				; CODE XREF: _normal_updatePosition+3Bj
					; DATA XREF: .rdata:off_6421EED4o
		mov	ecx, [edx+4]	; jumptable 64211B5B case 2
		add	eax, 4
		add	ecx, 1
		jmp	short loc_64211B41
; ---------------------------------------------------------------------------

loc_64211BB0:				; CODE XREF: _normal_updatePosition+3Bj
					; DATA XREF: .rdata:off_6421EED4o
		mov	ecx, [edx+4]	; jumptable 64211B5B case 1
		add	eax, 3
		add	ecx, 1
		jmp	short loc_64211B41
; ---------------------------------------------------------------------------
		align 10h

loc_64211BC0:				; CODE XREF: _normal_updatePosition+3Bj
					; DATA XREF: .rdata:off_6421EED4o
		mov	ecx, [edx+4]	; jumptable 64211B5B case 0
		add	eax, 2
		add	ecx, 1
		jmp	loc_64211B41
_normal_updatePosition endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_utf8_toUtf8	proc near		; DATA XREF: .rdata:6422319Co
					; .rdata:6422349Co ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8
		mov	ebx, [esp+18h+arg_4]
		mov	ecx, [esp+18h+arg_8]
		mov	edx, [esp+18h+arg_10]
		mov	eax, [ebx]
		mov	ebx, [esp+18h+arg_C]
		mov	esi, [ebx]
		mov	ebx, ecx
		sub	ebx, eax
		sub	edx, esi
		cmp	ebx, edx
		jle	short loc_64211C00
		lea	ecx, [eax+edx]
		cmp	eax, ecx
		jb	loc_64211CAA

loc_64211C00:				; CODE XREF: _utf8_toUtf8+23j
					; _utf8_toUtf8+D4j
		cmp	ecx, eax
		jz	loc_64211C8B

loc_64211C08:				; CODE XREF: _utf8_toUtf8+ECj
		lea	edx, [eax+1]
		mov	ebx, ecx
		sub	ebx, edx
		add	ebx, 1
		cmp	ebx, 9
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_18], ebx
		jbe	loc_64211CD0
		mov	ebx, esi
		or	ebx, eax
		and	ebx, 3
		jnz	loc_64211CD0
		lea	ebx, [eax+4]
		cmp	esi, ebx
		jbe	loc_64211CC1

loc_64211C3A:				; CODE XREF: _utf8_toUtf8+F6j
		mov	edi, [esp+18h+var_18]
		shr	edi, 2
		lea	ebp, ds:0[edi*4]
		test	ebp, ebp
		jz	loc_64211CE7
		xor	edx, edx

loc_64211C51:				; CODE XREF: _utf8_toUtf8+8Cj
		mov	ebx, [eax+edx*4]
		mov	[esi+edx*4], ebx
		add	edx, 1
		cmp	edx, edi
		jb	short loc_64211C51
		add	eax, ebp
		cmp	[esp+18h+var_18], ebp
		lea	ebx, [esi+ebp]
		jz	short loc_64211C81
		lea	edx, [eax+1]
		jmp	short loc_64211C73
; ---------------------------------------------------------------------------
		align 10h

loc_64211C70:				; CODE XREF: _utf8_toUtf8+AFj
		add	edx, 1

loc_64211C73:				; CODE XREF: _utf8_toUtf8+9Bj
					; _utf8_toUtf8+119j
		movzx	eax, byte ptr [eax]
		mov	[ebx], al
		add	ebx, 1
		cmp	ecx, edx
		mov	eax, edx
		jnz	short loc_64211C70

loc_64211C81:				; CODE XREF: _utf8_toUtf8+96j
					; _utf8_toUtf8+115j
		mov	eax, ecx
		sub	eax, [esp+18h+var_14]
		lea	esi, [esi+eax+1]

loc_64211C8B:				; CODE XREF: _utf8_toUtf8+32j
		mov	ebx, [esp+18h+arg_C]
		mov	eax, [esp+18h+arg_4]
		mov	[eax], ecx
		mov	[ebx], esi
		add	esp, 8
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211CA0:				; CODE XREF: _utf8_toUtf8+EAj
		cmp	eax, ebx
		mov	ecx, ebx
		jnb	loc_64211C00

loc_64211CAA:				; CODE XREF: _utf8_toUtf8+2Aj
		movzx	edx, byte ptr [ecx-1]
		lea	ebx, [ecx-1]
		and	edx, 0C0h
		add	edx, 0FFFFFF80h
		jz	short loc_64211CA0
		jmp	loc_64211C08
; ---------------------------------------------------------------------------

loc_64211CC1:				; CODE XREF: _utf8_toUtf8+64j
		lea	ebx, [esi+4]
		cmp	eax, ebx
		ja	loc_64211C3A
		lea	esi, [esi+0]

loc_64211CD0:				; CODE XREF: _utf8_toUtf8+4Cj
					; _utf8_toUtf8+59j
		mov	ebx, esi
		jmp	short loc_64211CD7
; ---------------------------------------------------------------------------

loc_64211CD4:				; CODE XREF: _utf8_toUtf8+113j
		add	edx, 1

loc_64211CD7:				; CODE XREF: _utf8_toUtf8+102j
		movzx	eax, byte ptr [eax]
		mov	[ebx], al
		add	ebx, 1
		cmp	ecx, edx
		mov	eax, edx
		jnz	short loc_64211CD4
		jmp	short loc_64211C81
; ---------------------------------------------------------------------------

loc_64211CE7:				; CODE XREF: _utf8_toUtf8+79j
		mov	ebx, esi
		jmp	short loc_64211C73
_utf8_toUtf8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_utf8_toUtf16	proc near		; DATA XREF: .rdata:642231A0o
					; .rdata:642234A0o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	eax, [esp+10h+arg_C]
		mov	ecx, [esp+10h+arg_4]
		mov	ebp, [esp+10h+arg_0]
		mov	edi, [esp+10h+arg_8]
		mov	edx, [eax]
		mov	esi, [esp+10h+arg_10]
		mov	eax, [ecx]
		lea	esi, [esi+0]

loc_64211D10:				; CODE XREF: _utf8_toUtf16+81j
					; _utf8_toUtf16+D8j ...
		cmp	edx, esi
		jz	short loc_64211D47

loc_64211D14:				; CODE XREF: _utf8_toUtf16+55j
		cmp	eax, edi
		jz	short loc_64211D47
		movzx	ebx, byte ptr [eax]
		movzx	ecx, bl
		movzx	ecx, byte ptr [ebp+ecx+4Ch]
		cmp	cl, 6
		jz	loc_64211DD0
		cmp	cl, 7
		jz	short loc_64211D73
		cmp	cl, 5
		jz	short loc_64211D58
		movsx	bx, bl
		add	eax, 1
		mov	[edx], bx
		add	edx, 2
		cmp	edx, esi
		jnz	short loc_64211D14

loc_64211D47:				; CODE XREF: _utf8_toUtf16+22j
					; _utf8_toUtf16+26j ...
		mov	ecx, [esp+10h+arg_4]
		mov	[ecx], eax
		mov	eax, [esp+10h+arg_C]
		mov	[eax], edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64211D58:				; CODE XREF: _utf8_toUtf16+44j
		movsx	cx, byte ptr [eax+1]
		and	ebx, 1Fh
		add	eax, 2
		shl	ebx, 6
		and	ecx, 3Fh
		or	ecx, ebx
		mov	[edx], cx
		add	edx, 2
		jmp	short loc_64211D10
; ---------------------------------------------------------------------------

loc_64211D73:				; CODE XREF: _utf8_toUtf16+3Fj
		lea	ecx, [edx+2]
		cmp	ecx, esi
		jz	short loc_64211D47
		movsx	ecx, byte ptr [eax+3]
		and	ebx, 7
		shl	ebx, 12h
		and	ecx, 3Fh
		or	ecx, ebx
		movsx	ebx, byte ptr [eax+1]
		and	ebx, 3Fh
		shl	ebx, 0Ch
		or	ecx, ebx
		movsx	ebx, byte ptr [eax+2]
		add	eax, 4
		and	ebx, 3Fh
		shl	ebx, 6
		or	ecx, ebx
		sub	ecx, 10000h
		mov	ebx, ecx
		and	cx, 3FFh
		shr	ebx, 0Ah
		or	cx, 0DC00h
		or	bx, 0D800h
		mov	[edx], bx
		mov	[edx+2], cx
		add	edx, 4
		jmp	loc_64211D10
; ---------------------------------------------------------------------------
		align 10h

loc_64211DD0:				; CODE XREF: _utf8_toUtf16+36j
		movsx	cx, byte ptr [eax+2]
		shl	ebx, 0Ch
		and	ecx, 3Fh
		or	ebx, ecx
		movsx	ecx, byte ptr [eax+1]
		add	eax, 3
		and	ecx, 3Fh
		shl	ecx, 6
		or	ebx, ecx
		mov	[edx], bx
		add	edx, 2
		jmp	loc_64211D10
_utf8_toUtf16	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_latin1_toUtf8	proc near		; DATA XREF: .rdata:642228FCo
					; .rdata:64223C3Co

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	esi, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	ebx, [esp+10h+arg_C]
		mov	ebp, [esp+10h+arg_10]
		mov	eax, [esi]

loc_64211E16:				; CODE XREF: _latin1_toUtf8+6Aj
		cmp	edi, eax
		jz	short loc_64211E37

loc_64211E1A:				; CODE XREF: _latin1_toUtf8+35j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_64211E40
		mov	ecx, [ebx]
		cmp	ecx, ebp
		jz	short loc_64211E37
		add	eax, 1
		mov	[ecx], dl
		add	ecx, 1
		cmp	edi, eax
		mov	[ebx], ecx
		mov	[esi], eax
		jnz	short loc_64211E1A

loc_64211E37:				; CODE XREF: _latin1_toUtf8+18j
					; _latin1_toUtf8+25j ...
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211E40:				; CODE XREF: _latin1_toUtf8+1Fj
		mov	eax, [ebx]
		mov	ecx, ebp
		sub	ecx, eax
		cmp	ecx, 1
		jle	short loc_64211E37
		mov	ecx, edx
		and	edx, 3Fh
		shr	cl, 6
		or	edx, 0FFFFFF80h
		or	ecx, 0FFFFFFC0h
		mov	[eax], cl
		mov	[eax+1], dl
		add	eax, 2
		mov	[ebx], eax
		mov	eax, [esi]
		add	eax, 1
		mov	[esi], eax
		jmp	short loc_64211E16
_latin1_toUtf8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_latin1_toUtf16	proc near		; DATA XREF: .rdata:64222900o
					; .rdata:64223C40o ...

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ecx, [esp+10h+arg_4]
		mov	ebx, [esp+10h+arg_8]
		mov	esi, [esp+10h+arg_C]
		mov	edi, [esp+10h+arg_10]
		mov	eax, [ecx]
		cmp	eax, ebx
		jz	short loc_64211EA8
		mov	edx, [esi]
		jmp	short loc_64211EA4
; ---------------------------------------------------------------------------
		align 10h

loc_64211E90:				; CODE XREF: _latin1_toUtf16+36j
		movzx	ebp, byte ptr [eax]
		add	eax, 1
		mov	[ecx], eax
		mov	[edx], bp
		add	edx, 2
		cmp	ebx, eax
		mov	[esi], edx
		jz	short loc_64211EA8

loc_64211EA4:				; CODE XREF: _latin1_toUtf16+1Cj
		cmp	edx, edi
		jnz	short loc_64211E90

loc_64211EA8:				; CODE XREF: _latin1_toUtf16+18j
					; _latin1_toUtf16+32j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_latin1_toUtf16	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ascii_toUtf8	proc near		; DATA XREF: .rdata:64223DBCo
					; .rdata:642243DCo

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebp, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_8]
		mov	ecx, [esp+10h+arg_C]
		mov	edi, [esp+10h+arg_10]
		mov	eax, [ebp+0]
		cmp	eax, esi
		jnz	short loc_64211EE4
		jmp	short loc_64211EEA
; ---------------------------------------------------------------------------
		align 10h

loc_64211ED0:				; CODE XREF: _ascii_toUtf8+38j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	[edx], bl
		add	edx, 1
		cmp	esi, eax
		mov	[ecx], edx
		mov	[ebp+0], eax
		jz	short loc_64211EEA

loc_64211EE4:				; CODE XREF: _ascii_toUtf8+19j
		mov	edx, [ecx]
		cmp	edx, edi
		jnz	short loc_64211ED0

loc_64211EEA:				; CODE XREF: _ascii_toUtf8+1Bj
					; _ascii_toUtf8+32j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_ascii_toUtf8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_toUtf8	proc near		; DATA XREF: .rdata:6422331Co
					; .rdata:6422363Co ...

var_20		= byte ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, [esp+20h+arg_4]
		mov	edi, [esp+20h+arg_8]
		mov	esi, [esp+20h+arg_C]
		mov	edx, [eax]
		cmp	edx, edi
		jz	loc_64211FAE
		mov	eax, [esi]
		jmp	short loc_64211F42
; ---------------------------------------------------------------------------

loc_64211F11:				; CODE XREF: _little2_toUtf8+5Fj
		cmp	cl, 1
		jnb	loc_64211FC0
		cmp	[esp+20h+var_20], 0
		xchg	ax, ax
		js	loc_64211FC0
		cmp	[esp+20h+arg_10], eax
		jz	loc_6421209E
		movzx	ecx, [esp+20h+var_20]
		mov	[eax], cl
		add	eax, 1
		mov	[esi], eax

loc_64211F3B:				; CODE XREF: _little2_toUtf8+104j
					; _little2_toUtf8+19Bj
		add	edx, 2
		cmp	edi, edx
		jz	short loc_64211FAE

loc_64211F42:				; CODE XREF: _little2_toUtf8+1Fj
					; _little2_toUtf8+BCj
		movzx	ecx, byte ptr [edx]
		mov	[esp+20h+var_20], cl
		movzx	ecx, byte ptr [edx+1]
		cmp	cl, 7
		jbe	short loc_64211F11
		lea	ebp, [ecx+28h]
		mov	ebx, ebp
		cmp	bl, 3
		jbe	loc_64212000
		mov	ebp, [esp+20h+arg_10]
		sub	ebp, eax
		cmp	ebp, 2
		jle	loc_6421209E
		mov	ebx, ecx
		and	ecx, 0Fh
		shr	bl, 4
		add	edx, 2
		mov	ebp, ebx
		or	ebp, 0FFFFFFE0h
		mov	ebx, ebp
		mov	[eax], bl
		movzx	ebx, [esp+20h+var_20]
		shl	ecx, 2
		shr	bl, 6
		mov	ebp, ebx
		or	ebp, 0FFFFFF80h
		or	ebp, ecx
		mov	ecx, ebp
		mov	[eax+1], cl
		movzx	ebx, [esp+20h+var_20]
		and	ebx, 3Fh
		or	ebx, 0FFFFFF80h
		mov	[eax+2], bl
		add	eax, 3
		cmp	edi, edx
		mov	[esi], eax
		jnz	short loc_64211F42

loc_64211FAE:				; CODE XREF: _little2_toUtf8+17j
					; _little2_toUtf8+50j
		mov	eax, [esp+20h+arg_4]
		mov	[eax], edi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64211FC0:				; CODE XREF: _little2_toUtf8+24j
					; _little2_toUtf8+30j
		mov	ebp, [esp+20h+arg_10]
		sub	ebp, eax
		cmp	ebp, 1
		jle	loc_64212090
		movzx	ebx, [esp+20h+var_20]
		shl	ecx, 2
		shr	bl, 6
		mov	ebp, ebx
		or	ebp, 0FFFFFFC0h
		or	ecx, ebp
		mov	[eax], cl
		movzx	ebx, [esp+20h+var_20]
		and	ebx, 3Fh
		or	ebx, 0FFFFFF80h
		mov	[eax+1], bl
		add	eax, 2
		mov	[esi], eax
		jmp	loc_64211F3B
; ---------------------------------------------------------------------------
		align 10h

loc_64212000:				; CODE XREF: _little2_toUtf8+69j
		mov	ebp, [esp+20h+arg_10]
		sub	ebp, eax
		cmp	ebp, 3
		jle	loc_64212090
		movzx	ebx, [esp+20h+var_20]
		and	ecx, 3
		add	edx, 2
		shl	ecx, 2
		shr	bl, 6
		mov	ebp, ebx
		and	ebp, 0FFh
		or	ecx, ebp
		lea	ebp, [ecx+1]
		mov	ecx, ebp
		and	ebp, 3
		sar	ecx, 2
		or	ecx, 0FFFFFFF0h
		mov	[eax], cl
		movzx	ecx, [esp+20h+var_20]
		shl	ebp, 4
		mov	ebx, ebp
		shr	cl, 2
		and	ecx, 0Fh
		or	ecx, 0FFFFFF80h
		or	ecx, ebx
		mov	[eax+1], cl
		lea	ecx, [eax+2]
		movzx	ebx, [esp+20h+var_20]
		mov	[esi], ecx
		movzx	ebp, byte ptr [edx]
		and	ebx, 3
		mov	ecx, ebp
		shr	cl, 6
		shl	ebx, 4
		or	ecx, 0FFFFFF80h
		or	ecx, ebx
		movzx	ebx, byte ptr [edx+1]
		and	ebx, 3
		shl	ebx, 2
		or	ecx, ebx
		mov	[eax+2], cl
		mov	ecx, ebp
		and	ecx, 3Fh
		or	ecx, 0FFFFFF80h
		mov	[eax+3], cl
		add	eax, 4
		mov	[esi], eax
		jmp	loc_64211F3B
; ---------------------------------------------------------------------------

loc_64212090:				; CODE XREF: _little2_toUtf8+D9j
					; _little2_toUtf8+119j
		mov	ebx, [esp+20h+arg_4]
		mov	[ebx], edx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6421209E:				; CODE XREF: _little2_toUtf8+3Aj
					; _little2_toUtf8+78j
		mov	eax, [esp+20h+arg_4]
		mov	[eax], edx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_little2_toUtf8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_toUtf16 proc near		; DATA XREF: .rdata:64223320o
					; .rdata:64223640o ...

var_14		= dword	ptr -14h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	edi, [esp+14h+arg_4]
		mov	esi, [esp+14h+arg_8]
		mov	ebp, [esp+14h+arg_C]
		mov	ebx, [edi]
		mov	ecx, esi
		mov	edx, [ebp+0]
		sub	ecx, ebx
		mov	eax, ebx
		mov	[esp+14h+var_14], ecx
		mov	ecx, [esp+14h+arg_10]
		sub	ecx, edx
		and	ecx, 0FFFFFFFEh
		cmp	[esp+14h+var_14], ecx
		jle	short loc_642120F1
		movzx	ecx, byte ptr [esi-1]
		and	ecx, 0F8h
		cmp	ecx, 0D8h
		jz	short loc_64212130

loc_642120F1:				; CODE XREF: _little2_toUtf16+2Dj
					; _little2_toUtf16+83j
		cmp	ebx, esi
		jz	short loc_64212128
		cmp	[esp+14h+arg_10], edx
		jnz	short loc_64212108
		nop
		lea	esi, [esi+0]
		jmp	short loc_64212128
; ---------------------------------------------------------------------------

loc_64212102:				; CODE XREF: _little2_toUtf16+76j
		cmp	edx, [esp+14h+arg_10]
		jz	short loc_64212128

loc_64212108:				; CODE XREF: _little2_toUtf16+49j
		movzx	ecx, byte ptr [eax+1]
		movzx	eax, byte ptr [eax]
		shl	ecx, 8
		or	eax, ecx
		mov	[edx], ax
		lea	eax, [ebx+2]
		add	edx, 2
		cmp	eax, esi
		mov	ebx, eax
		mov	[ebp+0], edx
		mov	[edi], eax
		jnz	short loc_64212102

loc_64212128:				; CODE XREF: _little2_toUtf16+43j
					; _little2_toUtf16+50j	...
		add	esp, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64212130:				; CODE XREF: _little2_toUtf16+3Fj
		sub	esi, 2
		jmp	short loc_642120F1
_little2_toUtf16 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_toUtf8	proc near		; DATA XREF: .rdata:642240BCo
					; .rdata:6422455Co

var_20		= byte ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, [esp+20h+arg_4]
		mov	edi, [esp+20h+arg_8]
		mov	esi, [esp+20h+arg_C]
		mov	edx, [eax]
		cmp	edx, edi
		jz	loc_642121FE
		mov	eax, [esi]
		jmp	short loc_64212192
; ---------------------------------------------------------------------------

loc_64212161:				; CODE XREF: _big2_toUtf8+5Fj
		cmp	cl, 1
		jnb	loc_64212210
		cmp	[esp+20h+var_20], 0
		xchg	ax, ax
		js	loc_64212210
		cmp	[esp+20h+arg_10], eax
		jz	loc_642122EE
		movzx	ecx, [esp+20h+var_20]
		mov	[eax], cl
		add	eax, 1
		mov	[esi], eax

loc_6421218B:				; CODE XREF: _big2_toUtf8+104j
					; _big2_toUtf8+19Bj
		add	edx, 2
		cmp	edi, edx
		jz	short loc_642121FE

loc_64212192:				; CODE XREF: _big2_toUtf8+1Fj
					; _big2_toUtf8+BCj
		movzx	ecx, byte ptr [edx+1]
		mov	[esp+20h+var_20], cl
		movzx	ecx, byte ptr [edx]
		cmp	cl, 7
		jbe	short loc_64212161
		lea	ebp, [ecx+28h]
		mov	ebx, ebp
		cmp	bl, 3
		jbe	loc_64212250
		mov	ebp, [esp+20h+arg_10]
		sub	ebp, eax
		cmp	ebp, 2
		jle	loc_642122EE
		mov	ebx, ecx
		and	ecx, 0Fh
		shr	bl, 4
		add	edx, 2
		mov	ebp, ebx
		or	ebp, 0FFFFFFE0h
		mov	ebx, ebp
		mov	[eax], bl
		movzx	ebx, [esp+20h+var_20]
		shl	ecx, 2
		shr	bl, 6
		mov	ebp, ebx
		or	ebp, 0FFFFFF80h
		or	ebp, ecx
		mov	ecx, ebp
		mov	[eax+1], cl
		movzx	ebx, [esp+20h+var_20]
		and	ebx, 3Fh
		or	ebx, 0FFFFFF80h
		mov	[eax+2], bl
		add	eax, 3
		cmp	edi, edx
		mov	[esi], eax
		jnz	short loc_64212192

loc_642121FE:				; CODE XREF: _big2_toUtf8+17j
					; _big2_toUtf8+50j
		mov	eax, [esp+20h+arg_4]
		mov	[eax], edi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64212210:				; CODE XREF: _big2_toUtf8+24j
					; _big2_toUtf8+30j
		mov	ebp, [esp+20h+arg_10]
		sub	ebp, eax
		cmp	ebp, 1
		jle	loc_642122E0
		movzx	ebx, [esp+20h+var_20]
		shl	ecx, 2
		shr	bl, 6
		mov	ebp, ebx
		or	ecx, ebp
		or	ecx, 0FFFFFFC0h
		mov	[eax], cl
		movzx	ebx, [esp+20h+var_20]
		and	ebx, 3Fh
		or	ebx, 0FFFFFF80h
		mov	[eax+1], bl
		add	eax, 2
		mov	[esi], eax
		jmp	loc_6421218B
; ---------------------------------------------------------------------------
		align 10h

loc_64212250:				; CODE XREF: _big2_toUtf8+69j
		mov	ebp, [esp+20h+arg_10]
		sub	ebp, eax
		cmp	ebp, 3
		jle	loc_642122E0
		movzx	ebx, [esp+20h+var_20]
		and	ecx, 3
		add	edx, 2
		shl	ecx, 2
		shr	bl, 6
		mov	ebp, ebx
		and	ebp, 0FFh
		or	ebp, ecx
		add	ebp, 1
		mov	ecx, ebp
		and	ebp, 3
		sar	ecx, 2
		or	ecx, 0FFFFFFF0h
		mov	[eax], cl
		movzx	ecx, [esp+20h+var_20]
		shl	ebp, 4
		mov	ebx, ebp
		shr	cl, 2
		and	ecx, 0Fh
		or	ecx, 0FFFFFF80h
		or	ecx, ebx
		mov	[eax+1], cl
		lea	ecx, [eax+2]
		movzx	ebx, [esp+20h+var_20]
		mov	[esi], ecx
		movzx	ebp, byte ptr [edx+1]
		and	ebx, 3
		mov	ecx, ebp
		shr	cl, 6
		shl	ebx, 4
		or	ecx, 0FFFFFF80h
		or	ecx, ebx
		movzx	ebx, byte ptr [edx]
		and	ebx, 3
		shl	ebx, 2
		or	ecx, ebx
		mov	[eax+2], cl
		mov	ecx, ebp
		and	ecx, 3Fh
		or	ecx, 0FFFFFF80h
		mov	[eax+3], cl
		add	eax, 4
		mov	[esi], eax
		jmp	loc_6421218B
; ---------------------------------------------------------------------------

loc_642122E0:				; CODE XREF: _big2_toUtf8+D9j
					; _big2_toUtf8+119j
		mov	ebx, [esp+20h+arg_4]
		mov	[ebx], edx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642122EE:				; CODE XREF: _big2_toUtf8+3Aj
					; _big2_toUtf8+78j
		mov	eax, [esp+20h+arg_4]
		mov	[eax], edx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_big2_toUtf8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_toUtf16	proc near		; DATA XREF: .rdata:642240C0o
					; .rdata:64224560o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	ebp, [esp+14h+arg_C]
		mov	edi, [esp+14h+arg_4]
		mov	ecx, [esp+14h+arg_10]
		mov	esi, [esp+14h+arg_8]
		mov	edx, [ebp+0]
		mov	ebx, [edi]
		sub	ecx, edx
		sub	esi, ebx
		and	ecx, 0FFFFFFFEh
		cmp	esi, ecx
		mov	eax, ebx
		jle	short loc_64212346
		mov	ecx, [esp+14h+arg_8]
		mov	esi, [esp+14h+arg_8]
		movzx	ecx, byte ptr [ecx-2]
		sub	esi, 2
		and	ecx, 0F8h
		cmp	ecx, 0D8h
		jz	short loc_6421234A

loc_64212346:				; CODE XREF: _big2_toUtf16+27j
		mov	esi, [esp+14h+arg_8]

loc_6421234A:				; CODE XREF: _big2_toUtf16+44j
		cmp	ebx, esi
		jz	short loc_6421237C
		cmp	[esp+14h+arg_10], edx
		jnz	short loc_6421235C
		jmp	short loc_6421237C
; ---------------------------------------------------------------------------

loc_64212356:				; CODE XREF: _big2_toUtf16+7Aj
		cmp	edx, [esp+14h+arg_10]
		jz	short loc_6421237C

loc_6421235C:				; CODE XREF: _big2_toUtf16+52j
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	ecx, 8
		or	eax, ecx
		mov	[edx], ax
		lea	eax, [ebx+2]
		add	edx, 2
		cmp	eax, esi
		mov	ebx, eax
		mov	[ebp+0], edx
		mov	[edi], eax
		jnz	short loc_64212356

loc_6421237C:				; CODE XREF: _big2_toUtf16+4Cj
					; _big2_toUtf16+54j ...
		add	esp, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_big2_toUtf16	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_checkPiTarget proc near	; CODE XREF: _little2_scanPi+220p
					; _little2_scanPi+23Cp

arg_0		= dword	ptr  4

		push	ebx
		mov	eax, [esp+4+arg_0]
		sub	ecx, edx
		cmp	ecx, 6
		mov	dword ptr [eax], 0Bh
		jz	short loc_642123B0

loc_642123A2:				; CODE XREF: _little2_checkPiTarget+24j
					; _little2_checkPiTarget+31j ...
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642123B0:				; CODE XREF: _little2_checkPiTarget+10j
		cmp	byte ptr [edx+1], 0
		jnz	short loc_642123A2
		movzx	ecx, byte ptr [edx]
		cmp	cl, 58h
		jz	short loc_64212403
		cmp	cl, 78h
		jnz	short loc_642123A2
		xor	ebx, ebx

loc_642123C5:				; CODE XREF: _little2_checkPiTarget+78j
		lea	ecx, [edx+2]
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_642123A2
		movzx	edx, byte ptr [edx+2]
		cmp	dl, 4Dh
		jz	short loc_64212410
		cmp	dl, 6Dh
		jnz	short loc_642123A2

loc_642123DC:				; CODE XREF: _little2_checkPiTarget+85j
		cmp	byte ptr [ecx+3], 0
		jnz	short loc_642123A2
		movzx	edx, byte ptr [ecx+2]
		cmp	dl, 4Ch
		jz	short loc_64212417
		cmp	dl, 6Ch
		xchg	ax, ax
		jnz	short loc_642123A2
		test	ebx, ebx
		jnz	short loc_64212417
		mov	dword ptr [eax], 0Ch
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_64212403:				; CODE XREF: _little2_checkPiTarget+2Cj
		mov	ebx, 1
		jmp	short loc_642123C5
; ---------------------------------------------------------------------------
		align 10h

loc_64212410:				; CODE XREF: _little2_checkPiTarget+45j
		mov	ebx, 1
		jmp	short loc_642123DC
; ---------------------------------------------------------------------------

loc_64212417:				; CODE XREF: _little2_checkPiTarget+59j
					; _little2_checkPiTarget+64j
		xor	eax, eax
		pop	ebx
		retn
_little2_checkPiTarget endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_scanPi	proc near		; CODE XREF: _little2_contentTok+477p
					; _little2_prologTok+618j

var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		cmp	edx, ecx
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, ecx
		mov	[esp+3Ch+var_C], esi
		mov	esi, eax
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_8], edi
		jz	loc_642125C3
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	short loc_64212462
		movzx	ecx, byte ptr [edx]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64212453:				; CODE XREF: _little2_scanPi+B9j
					; _little2_scanPi+C5j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	short loc_64212497 ; jumptable 6421245B	default	case
		jmp	ds:off_6421EEEC[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64212462:				; CODE XREF: _little2_scanPi+29j
		lea	ecx, [eax+28h]
		movzx	edi, byte ptr [edx]
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_642124B0

loc_6421246D:				; CODE XREF: _little2_scanPi+93j
					; DATA XREF: .rdata:off_6421EF50o
		mov	ecx, edi	; jumptable 642124B3 default case

loc_6421246F:				; CODE XREF: _little2_scanPi+B5j
					; _little2_scanPi+1C0j
		movzx	eax, al
		movzx	edi, ds:_nmstrtPages[eax]
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edi, [eax+edi*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:_namingBitmap[edi*4], eax
		jnz	short loc_642124F0 ; jumptable 6421245B	cases 22,24

loc_64212497:				; CODE XREF: _little2_scanPi+39j
					; _little2_scanPi+3Bj ...
		mov	[ebp+0], edx	; jumptable 6421245B default case
		xor	eax, eax

loc_6421249C:				; CODE XREF: _little2_scanPi+ACj
					; _little2_scanPi+135j	...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_642124B0:				; CODE XREF: _little2_scanPi+4Bj
		movzx	ecx, cl
		jmp	ds:off_6421EF50[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_642124C0:				; CODE XREF: _little2_scanPi+3Bj
					; _little2_scanPi+93j
					; DATA XREF: ...
		sub	ebx, edx	; jumptable 6421245B case 7
					; jumptable 642124B3 cases 0-3
		cmp	ebx, 3
		jg	short loc_64212497 ; jumptable 6421245B	default	case

loc_642124C7:				; CODE XREF: _little2_scanPi+105j
					; _little2_scanPi+120j	...
		mov	eax, 0FFFFFFFEh
		jmp	short loc_6421249C
; ---------------------------------------------------------------------------
		align 10h

loc_642124D0:				; CODE XREF: _little2_scanPi+93j
					; DATA XREF: .rdata:off_6421EF50o
		mov	ecx, edi	; jumptable 642124B3 case 39
		cmp	cl, 0FEh
		jb	short loc_6421246F
		xor	ecx, ecx
		jmp	loc_64212453
; ---------------------------------------------------------------------------
		align 10h

loc_642124E0:				; CODE XREF: _little2_scanPi+93j
					; DATA XREF: .rdata:off_6421EF50o
		mov	ecx, 8		; jumptable 642124B3 cases 4-7
		jmp	loc_64212453
; ---------------------------------------------------------------------------
		align 10h

loc_642124F0:				; CODE XREF: _little2_scanPi+3Bj
					; _little2_scanPi+75j
					; DATA XREF: ...
		lea	edi, [edx+2]	; jumptable 6421245B cases 22,24
		cmp	ebx, edi
		jz	loc_642125C3

loc_642124FB:				; CODE XREF: _little2_scanPi+19Dj
		movzx	eax, byte ptr [edi+1]
		test	al, al
		jnz	short loc_64212560
		movzx	ecx, byte ptr [edi]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_6421250B:				; CODE XREF: _little2_scanPi+1CAj
					; _little2_scanPi+1E4j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	short loc_64212550 ; jumptable 64212513	default	case
		jmp	ds:off_6421EFF0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64212520:				; CODE XREF: _little2_scanPi+3Bj
					; DATA XREF: .rdata:off_6421EEECo
		sub	ebx, edx	; jumptable 6421245B case 6
		cmp	ebx, 2
		jle	short loc_642124C7
		jmp	loc_64212497	; jumptable 6421245B default case
; ---------------------------------------------------------------------------
		align 10h

loc_64212530:				; CODE XREF: _little2_scanPi+3Bj
					; DATA XREF: .rdata:off_6421EEECo
		sub	ebx, edx	; jumptable 6421245B case 5
		cmp	ebx, 1
		jg	loc_64212497	; jumptable 6421245B default case
		nop
		lea	esi, [esi+0]
		jmp	short loc_642124C7
; ---------------------------------------------------------------------------

loc_64212542:				; CODE XREF: _little2_scanPi+F3j
					; DATA XREF: .rdata:off_6421EFF0o
		sub	ebx, edi	; jumptable 64212513 case 5
		cmp	ebx, 1
		jle	loc_642124C7
		lea	esi, [esi+0]

loc_64212550:				; CODE XREF: _little2_scanPi+F1j
					; _little2_scanPi+F3j ...
		mov	[ebp+0], edi	; jumptable 64212513 default case
		xor	eax, eax
		jmp	loc_6421249C
; ---------------------------------------------------------------------------
		align 10h

loc_64212560:				; CODE XREF: _little2_scanPi+E1j
		movzx	ecx, byte ptr [edi]
		mov	byte ptr [esp+3Ch+var_24], cl
		lea	ecx, [eax+28h]
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_642125D0

loc_6421256F:				; CODE XREF: _little2_scanPi+1B3j
					; DATA XREF: .rdata:off_6421F054o
		movzx	ecx, byte ptr [esp+3Ch+var_24] ; jumptable 642125D3 default case
		mov	[esp+3Ch+var_38], cl

loc_64212578:				; CODE XREF: _little2_scanPi+1DCj
					; _little2_scanPi+298j
		movzx	eax, al
		movzx	eax, ds:_namePages[eax]
		mov	[esp+3Ch+var_24], eax
		movzx	eax, [esp+3Ch+var_38]
		mov	ecx, [esp+3Ch+var_24]
		shr	al, 5
		movzx	eax, al
		lea	ecx, [eax+ecx*8]
		mov	eax, 1
		mov	[esp+3Ch+var_24], ecx
		movzx	ecx, [esp+3Ch+var_38]
		and	ecx, 1Fh
		shl	eax, cl
		mov	ecx, [esp+3Ch+var_24]
		test	ds:_namingBitmap[ecx*4], eax
		jz	short loc_64212550 ; jumptable 64212513	default	case

loc_642125B8:				; CODE XREF: _little2_scanPi+F3j
					; DATA XREF: .rdata:off_6421EFF0o
		add	edi, 2		; jumptable 64212513 cases 22,24-27
		cmp	ebx, edi
		jnz	loc_642124FB

loc_642125C3:				; CODE XREF: _little2_scanPi+1Dj
					; _little2_scanPi+D5j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6421249C
; ---------------------------------------------------------------------------
		align 10h

loc_642125D0:				; CODE XREF: _little2_scanPi+14Dj
		movzx	ecx, cl
		jmp	ds:off_6421F054[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642125DA:				; CODE XREF: _little2_scanPi+3Bj
					; DATA XREF: .rdata:off_6421EEECo
		movzx	ecx, byte ptr [edx] ; jumptable	6421245B case 29
		lea	esi, [esi+0]
		jmp	loc_6421246F
; ---------------------------------------------------------------------------

loc_642125E5:				; CODE XREF: _little2_scanPi+1B3j
					; DATA XREF: .rdata:off_6421F054o
		mov	ecx, 8		; jumptable 642125D3 cases 4-7
		jmp	loc_6421250B
; ---------------------------------------------------------------------------
		align 10h

loc_642125F0:				; CODE XREF: _little2_scanPi+1B3j
					; DATA XREF: .rdata:off_6421F054o
		movzx	ecx, byte ptr [esp+3Ch+var_24] ; jumptable 642125D3 case 39
		cmp	cl, 0FEh
		mov	[esp+3Ch+var_38], cl
		jb	loc_64212578
		xor	ecx, ecx
		jmp	loc_6421250B
; ---------------------------------------------------------------------------
		align 10h

loc_64212610:				; CODE XREF: _little2_scanPi+F3j
					; _little2_scanPi+1B3j
					; DATA XREF: ...
		sub	ebx, edi	; jumptable 64212513 case 7
					; jumptable 642125D3 cases 0-3
		cmp	ebx, 3
		jle	loc_642124C7
		nop
		lea	esi, [esi+0]
		jmp	loc_64212550	; jumptable 64212513 default case
; ---------------------------------------------------------------------------

loc_64212625:				; CODE XREF: _little2_scanPi+F3j
					; DATA XREF: .rdata:off_6421EFF0o
		sub	ebx, edi	; jumptable 64212513 case 6
		cmp	ebx, 2
		jle	loc_642124C7
		jmp	loc_64212550	; jumptable 64212513 default case
; ---------------------------------------------------------------------------

loc_64212635:				; CODE XREF: _little2_scanPi+F3j
					; DATA XREF: .rdata:off_6421EFF0o
		lea	eax, [esp+3Ch+var_14] ;	jumptable 64212513 case	15
		mov	ecx, edi
		mov	[esp+3Ch+var_3C], eax
		mov	eax, esi
		call	_little2_checkPiTarget
		test	eax, eax
		jnz	short loc_642126C0

loc_64212649:				; CODE XREF: _little2_scanPi+243j
		mov	[ebp+0], edi
		jmp	loc_6421249C
; ---------------------------------------------------------------------------

loc_64212651:				; CODE XREF: _little2_scanPi+F3j
					; DATA XREF: .rdata:off_6421EFF0o
		lea	eax, [esp+3Ch+var_14] ;	jumptable 64212513 cases 9,10,21
		mov	ecx, edi
		mov	[esp+3Ch+var_3C], eax
		mov	eax, esi
		call	_little2_checkPiTarget
		test	eax, eax
		jz	short loc_64212649
		lea	eax, [edi+2]
		cmp	ebx, eax
		jz	loc_642125C3
		movzx	edx, byte ptr [eax+1]
		movzx	ecx, byte ptr [edi+2]
		test	dl, dl
		jnz	short loc_6421269F

loc_6421267C:				; CODE XREF: _little2_scanPi+27Dj
					; _little2_scanPi+2FCj
		movzx	ecx, cl
		movzx	edx, byte ptr [esi+ecx+4Ch]
		cmp	edx, 0Fh	; switch 16 cases
		jbe	short loc_642126FC

loc_64212689:				; CODE XREF: _little2_scanPi+285j
					; _little2_scanPi+28Aj	...
		add	eax, 2		; jumptable 642126AA default case

loc_6421268C:				; CODE XREF: _little2_scanPi+321j
					; _little2_scanPi+336j
		cmp	ebx, eax
		jz	loc_642125C3
		movzx	edx, byte ptr [eax+1]

loc_64212698:				; CODE XREF: _little2_scanPi+2F4j
		test	dl, dl
		movzx	ecx, byte ptr [eax]
		jz	short loc_6421267C

loc_6421269F:				; CODE XREF: _little2_scanPi+25Aj
		add	edx, 28h
		cmp	dl, 27h		; switch 40 cases
		ja	short loc_64212689 ; jumptable 642126AA	default	case
		movzx	edx, dl
		jmp	ds:off_6421F0F4[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642126B1:				; CODE XREF: _little2_scanPi+F3j
					; DATA XREF: .rdata:off_6421EFF0o
		movzx	ecx, byte ptr [edi] ; jumptable	64212513 case 29
		mov	[esp+3Ch+var_38], cl
		jmp	loc_64212578
; ---------------------------------------------------------------------------
		align 10h

loc_642126C0:				; CODE XREF: _little2_scanPi+227j
		add	edi, 2
		cmp	edi, ebx
		jz	loc_642125C3
		cmp	byte ptr [edi+1], 0
		jnz	loc_64212550	; jumptable 64212513 default case
		cmp	byte ptr [edi],	3Eh
		jnz	loc_64212550	; jumptable 64212513 default case
		add	edi, 2
		mov	eax, [esp+3Ch+var_14]
		mov	[ebp+0], edi
		jmp	loc_6421249C
; ---------------------------------------------------------------------------

loc_642126ED:				; CODE XREF: _little2_scanPi+28Aj
					; _little2_scanPi:loc_642126FCj
					; DATA XREF: ...
		mov	[ebp+0], eax	; jumptable 642126AA cases 4-7
					; jumptable 642126FC cases 0,1,8
		xor	eax, eax
		jmp	loc_6421249C
; ---------------------------------------------------------------------------

loc_642126F7:				; CODE XREF: _little2_scanPi+28Aj
					; DATA XREF: .rdata:off_6421F0F4o
		mov	edx, 7		; jumptable 642126AA cases 0-3

loc_642126FC:				; CODE XREF: _little2_scanPi+267j
					; _little2_scanPi+358j
		jmp	ds:off_6421F194[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64212703:				; CODE XREF: _little2_scanPi:loc_642126FCj
					; DATA XREF: .rdata:off_6421F194o
		add	eax, 2		; jumptable 642126FC case 15
		cmp	eax, ebx
		jz	loc_642125C3
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	short loc_64212698
		movzx	ecx, byte ptr [eax]
		cmp	cl, 3Eh
		jnz	loc_6421267C
		add	eax, 2
		mov	[ebp+0], eax
		mov	eax, [esp+3Ch+var_14]
		jmp	loc_6421249C
; ---------------------------------------------------------------------------

loc_64212731:				; CODE XREF: _little2_scanPi:loc_642126FCj
					; DATA XREF: .rdata:off_6421F194o
		mov	edx, ebx	; jumptable 642126FC case 7
		sub	edx, eax
		cmp	edx, 3
		jle	loc_642124C7
		add	eax, 4
		jmp	loc_6421268C
; ---------------------------------------------------------------------------

loc_64212746:				; CODE XREF: _little2_scanPi:loc_642126FCj
					; DATA XREF: .rdata:off_6421F194o
		mov	edx, ebx	; jumptable 642126FC case 6
		sub	edx, eax
		cmp	edx, 2
		jle	loc_642124C7
		add	eax, 3
		jmp	loc_6421268C
; ---------------------------------------------------------------------------

loc_6421275B:				; CODE XREF: _little2_scanPi:loc_642126FCj
					; DATA XREF: .rdata:off_6421F194o
		mov	edx, ebx	; jumptable 642126FC case 5
		sub	edx, eax
		cmp	edx, 1
		jg	loc_64212689	; jumptable 642126AA default case
		jmp	loc_642124C7
; ---------------------------------------------------------------------------

loc_6421276D:				; CODE XREF: _little2_scanPi+28Aj
					; DATA XREF: .rdata:off_6421F0F4o
		cmp	cl, 0FEh	; jumptable 642126AA case 39
		jb	loc_64212689	; jumptable 642126AA default case
		xor	edx, edx
		jmp	short loc_642126FC
_little2_scanPi	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_cdataSectionTok proc near	; DATA XREF: .rdata:642232E8o
					; .rdata:64223608o ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		mov	eax, 0FFFFFFFCh
		mov	ecx, [esp+10h+arg_4]
		cmp	ecx, [esp+10h+arg_8]
		mov	[esp+10h+var_8], edi
		mov	edi, [esp+10h+arg_0]
		mov	[esp+10h+var_4], ebp
		mov	ebp, [esp+10h+arg_C]
		mov	[esp+10h+var_10], ebx
		mov	[esp+10h+var_C], esi
		jz	loc_64212831
		mov	eax, [esp+10h+arg_8]
		sub	eax, ecx
		test	al, 1
		jnz	loc_642129C0

loc_642127BB:				; CODE XREF: _little2_cdataSectionTok+24Cj
		movzx	eax, byte ptr [ecx+1]
		test	al, al
		jz	loc_64212844
		add	eax, 28h
		movzx	ebx, byte ptr [ecx]
		cmp	al, 27h		; switch 40 cases
		jbe	loc_642128E0

loc_642127D5:				; CODE XREF: _little2_cdataSectionTok+CFj
					; _little2_cdataSectionTok:loc_64212855j ...
		lea	eax, [ecx+2]	; jumptable 64212855 default case

loc_642127D8:				; CODE XREF: _little2_cdataSectionTok+F0j
					; _little2_cdataSectionTok+11Ej ...
		cmp	[esp+10h+arg_8], eax
		jz	loc_64212875
		movzx	ebx, byte ptr [eax+1]
		movzx	esi, byte ptr [eax]

loc_642127E9:				; CODE XREF: _little2_cdataSectionTok+20Aj
					; _little2_cdataSectionTok+234j
		test	bl, bl
		jnz	loc_642128B6
		and	esi, 0FFh
		movzx	ecx, byte ptr [edi+esi+4Ch]
		cmp	ecx, 0Ah	; switch 11 cases
		ja	short loc_6421286B ; jumptable 64212801	default	case

loc_64212801:				; CODE XREF: _little2_cdataSectionTok+151j
					; _little2_cdataSectionTok+15Bj
		jmp	ds:off_6421F1D4[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64212808:				; CODE XREF: _little2_cdataSectionTok:loc_64212855j
					; DATA XREF: .rdata:off_6421F200o
		lea	eax, [ecx+2]	; jumptable 64212855 case 9
		cmp	eax, [esp+10h+arg_8]
		jz	loc_642129D1
		cmp	byte ptr [eax+1], 0
		jnz	short loc_64212829
		movzx	edx, byte ptr [ecx+2]
		cmp	byte ptr [edi+edx+4Ch],	0Ah
		jnz	short loc_64212829
		lea	eax, [ecx+4]

loc_64212829:				; CODE XREF: _little2_cdataSectionTok+99j
					; _little2_cdataSectionTok+A4j
		mov	[ebp+0], eax
		mov	eax, 7

loc_64212831:				; CODE XREF: _little2_cdataSectionTok+27j
					; _little2_cdataSectionTok+108j ...
		mov	ebx, [esp+10h+var_10]
		mov	esi, [esp+10h+var_C]
		mov	edi, [esp+10h+var_8]
		mov	ebp, [esp+10h+var_4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_64212844:				; CODE XREF: _little2_cdataSectionTok+41j
		movzx	eax, byte ptr [ecx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		ja	loc_642127D5	; jumptable 64212855 default case

loc_64212855:				; CODE XREF: _little2_cdataSectionTok+18Bj
					; _little2_cdataSectionTok+195j
		jmp	ds:off_6421F200[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64212860:				; CODE XREF: _little2_cdataSectionTok:loc_64212801j
					; DATA XREF: .rdata:off_6421F1D4o
		mov	ecx, [esp+10h+arg_8] ; jumptable 64212801 case 5
		sub	ecx, eax
		cmp	ecx, 1
		jle	short loc_64212880 ; jumptable 64212801	cases 0,1,4,8-10
					; jumptable 642128C1 cases 4-7

loc_6421286B:				; CODE XREF: _little2_cdataSectionTok+7Fj
					; _little2_cdataSectionTok:loc_64212801j ...
		add	eax, 2		; jumptable 64212801 default case
		xchg	ax, ax
		jmp	loc_642127D8
; ---------------------------------------------------------------------------

loc_64212875:				; CODE XREF: _little2_cdataSectionTok+5Cj
		mov	eax, [esp+10h+arg_8]
		lea	esi, [esi+0]

loc_64212880:				; CODE XREF: _little2_cdataSectionTok:loc_64212801j
					; _little2_cdataSectionTok+E9j	...
		mov	[ebp+0], eax	; jumptable 64212801 cases 0,1,4,8-10
					; jumptable 642128C1 cases 4-7
		mov	eax, 6
		jmp	short loc_64212831
; ---------------------------------------------------------------------------
		align 10h

loc_64212890:				; CODE XREF: _little2_cdataSectionTok:loc_64212801j
					; DATA XREF: .rdata:off_6421F1D4o
		mov	ecx, [esp+10h+arg_8] ; jumptable 64212801 case 7
		sub	ecx, eax
		cmp	ecx, 3
		jle	short loc_64212880 ; jumptable 64212801	cases 0,1,4,8-10
					; jumptable 642128C1 cases 4-7
		add	eax, 4
		jmp	loc_642127D8
; ---------------------------------------------------------------------------

loc_642128A3:				; CODE XREF: _little2_cdataSectionTok:loc_64212801j
					; DATA XREF: .rdata:off_6421F1D4o
		mov	ecx, [esp+10h+arg_8] ; jumptable 64212801 case 6
		sub	ecx, eax
		cmp	ecx, 2
		jle	short loc_64212880 ; jumptable 64212801	cases 0,1,4,8-10
					; jumptable 642128C1 cases 4-7
		add	eax, 3
		jmp	loc_642127D8
; ---------------------------------------------------------------------------

loc_642128B6:				; CODE XREF: _little2_cdataSectionTok+6Bj
		add	ebx, 28h
		cmp	bl, 27h		; switch 40 cases
		ja	short loc_6421286B ; jumptable 64212801	default	case
		movzx	ebx, bl
		jmp	ds:off_6421F22C[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642128C8:				; CODE XREF: _little2_cdataSectionTok+141j
					; DATA XREF: .rdata:off_6421F22Co
		mov	edx, esi	; jumptable 642128C1 case 39
		cmp	dl, 0FEh
		jb	short loc_6421286B ; jumptable 64212801	default	case
		xor	ecx, ecx
		jmp	loc_64212801
; ---------------------------------------------------------------------------

loc_642128D6:				; CODE XREF: _little2_cdataSectionTok+141j
					; DATA XREF: .rdata:off_6421F22Co
		mov	ecx, 7		; jumptable 642128C1 cases 0-3
		jmp	loc_64212801
; ---------------------------------------------------------------------------

loc_642128E0:				; CODE XREF: _little2_cdataSectionTok+4Fj
		movzx	eax, al
		jmp	ds:off_6421F2CC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_642128F0:				; CODE XREF: _little2_cdataSectionTok:loc_64212855j
					; _little2_cdataSectionTok+163j
					; DATA XREF: ...
		mov	[ebp+0], ecx	; jumptable 64212855 cases 0,1,8
					; jumptable 642128E3 cases 4-7
		xor	eax, eax
		jmp	loc_64212831
; ---------------------------------------------------------------------------
		align 10h

loc_64212900:				; CODE XREF: _little2_cdataSectionTok+163j
					; DATA XREF: .rdata:off_6421F2CCo
		cmp	bl, 0FEh	; jumptable 642128E3 case 39
		jb	loc_642127D5	; jumptable 64212855 default case
		xor	eax, eax
		jmp	loc_64212855
; ---------------------------------------------------------------------------

loc_64212910:				; CODE XREF: _little2_cdataSectionTok+163j
					; DATA XREF: .rdata:off_6421F2CCo
		mov	eax, 7		; jumptable 642128E3 cases 0-3
		jmp	loc_64212855
; ---------------------------------------------------------------------------
		align 10h

loc_64212920:				; CODE XREF: _little2_cdataSectionTok:loc_64212855j
					; DATA XREF: .rdata:off_6421F200o
		mov	eax, [esp+10h+arg_8] ; jumptable 64212855 case 7
		sub	eax, ecx
		cmp	eax, 3
		jle	short loc_64212965
		lea	eax, [ecx+4]
		jmp	loc_642127D8
; ---------------------------------------------------------------------------

loc_64212933:				; CODE XREF: _little2_cdataSectionTok:loc_64212855j
					; DATA XREF: .rdata:off_6421F200o
		add	ecx, 2		; jumptable 64212855 case 10
		mov	eax, 7
		mov	[ebp+0], ecx
		jmp	loc_64212831
; ---------------------------------------------------------------------------

loc_64212943:				; CODE XREF: _little2_cdataSectionTok:loc_64212855j
					; DATA XREF: .rdata:off_6421F200o
		mov	eax, [esp+10h+arg_8] ; jumptable 64212855 case 6
		sub	eax, ecx
		cmp	eax, 2
		jle	short loc_64212965
		lea	eax, [ecx+3]
		jmp	loc_642127D8
; ---------------------------------------------------------------------------

loc_64212956:				; CODE XREF: _little2_cdataSectionTok:loc_64212855j
					; DATA XREF: .rdata:off_6421F200o
		mov	eax, [esp+10h+arg_8] ; jumptable 64212855 case 5
		sub	eax, ecx
		cmp	eax, 1
		jg	loc_642127D5	; jumptable 64212855 default case

loc_64212965:				; CODE XREF: _little2_cdataSectionTok+1A9j
					; _little2_cdataSectionTok+1CCj
		mov	eax, 0FFFFFFFEh
		jmp	loc_64212831
; ---------------------------------------------------------------------------
		align 10h

loc_64212970:				; CODE XREF: _little2_cdataSectionTok:loc_64212855j
					; DATA XREF: .rdata:off_6421F200o
		lea	eax, [ecx+2]	; jumptable 64212855 case 4
		cmp	eax, [esp+10h+arg_8]
		jz	short loc_642129D1
		movzx	ebx, byte ptr [eax+1]
		test	bl, bl
		jnz	short loc_642129B0
		movzx	esi, byte ptr [ecx+2]
		mov	edx, esi
		cmp	dl, 5Dh
		jnz	loc_642127E9
		lea	eax, [ecx+4]
		cmp	eax, [esp+10h+arg_8]
		jz	short loc_642129D1
		cmp	byte ptr [eax+1], 0
		jnz	short loc_642129A5
		cmp	byte ptr [ecx+4], 3Eh
		jz	short loc_642129DB

loc_642129A5:				; CODE XREF: _little2_cdataSectionTok+21Dj
		sub	eax, 2
		jmp	loc_642127D8
; ---------------------------------------------------------------------------
		align 10h

loc_642129B0:				; CODE XREF: _little2_cdataSectionTok+1FFj
		movzx	esi, byte ptr [ecx+2]
		jmp	loc_642127E9
; ---------------------------------------------------------------------------
		align 10h

loc_642129C0:				; CODE XREF: _little2_cdataSectionTok+35j
		and	eax, 0FFFFFFFEh
		jz	short loc_642129D1
		lea	eax, [ecx+eax]
		mov	[esp+10h+arg_8], eax
		jmp	loc_642127BB
; ---------------------------------------------------------------------------

loc_642129D1:				; CODE XREF: _little2_cdataSectionTok+8Fj
					; _little2_cdataSectionTok+1F7j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_64212831
; ---------------------------------------------------------------------------

loc_642129DB:				; CODE XREF: _little2_cdataSectionTok+223j
		add	ecx, 6
		mov	eax, 28h
		mov	[ebp+0], ecx
		jmp	loc_64212831
_little2_cdataSectionTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_scanRef proc near		; CODE XREF: _little2_contentTok+29Ap
					; _little2_contentTok+D3Cp ...

var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 18h
		cmp	edx, ecx
		mov	[esp+18h+var_10], ebx
		mov	ebx, ecx
		mov	[esp+18h+var_C], esi
		mov	esi, [esp+18h+arg_0]
		mov	[esp+18h+var_8], edi
		mov	[esp+18h+var_4], ebp
		jz	loc_64212BC2
		movzx	ecx, byte ptr [edx+1]
		test	cl, cl
		mov	[esp+18h+var_11], cl
		jnz	short loc_64212A34
		movzx	edi, byte ptr [edx]
		movzx	edi, byte ptr [eax+edi+4Ch]

loc_64212A25:				; CODE XREF: _little2_scanRef+CBj
					; _little2_scanRef+D5j
		sub	edi, 5		; switch 25 cases
		cmp	edi, 18h
		ja	short loc_64212A73 ; jumptable 64212A2D	default	case
		jmp	ds:off_6421F36C[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64212A34:				; CODE XREF: _little2_scanRef+2Bj
		lea	edi, [ecx+28h]
		movzx	ebp, byte ptr [edx]
		mov	ecx, edi
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_64212A90

loc_64212A41:				; CODE XREF: _little2_scanRef+A6j
					; DATA XREF: .rdata:off_6421F3D0o
		mov	edi, ebp	; jumptable 64212A96 default case

loc_64212A43:				; CODE XREF: _little2_scanRef+C7j
					; _little2_scanRef+200j
		movzx	ecx, [esp+18h+var_11]
		movzx	ebp, ds:_nmstrtPages[ecx]
		mov	ecx, edi
		shr	cl, 5
		movzx	ecx, cl
		lea	ebp, [ecx+ebp*8]
		mov	ecx, edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		test	ds:_namingBitmap[ebp*4], edi
		jnz	loc_64212B13	; jumptable 64212A2D cases 22,24
					; jumptable 64212B3E cases 22,24-27

loc_64212A73:				; CODE XREF: _little2_scanRef+3Bj
					; _little2_scanRef+3Dj	...
		mov	[esi], edx	; jumptable 64212A2D default case
		xor	eax, eax

loc_64212A77:				; CODE XREF: _little2_scanRef+BCj
					; _little2_scanRef+1D7j ...
		mov	ebx, [esp+18h+var_10]
		mov	esi, [esp+18h+var_C]
		mov	edi, [esp+18h+var_8]
		mov	ebp, [esp+18h+var_4]
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64212A90:				; CODE XREF: _little2_scanRef+4Fj
		and	edi, 0FFh
		jmp	ds:off_6421F3D0[edi*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64212AA0:				; CODE XREF: _little2_scanRef+3Dj
					; _little2_scanRef+A6j	...
		sub	ebx, edx	; jumptable 64212A2D case 7
					; jumptable 64212A96 cases 0-3
					; jumptable 64212B3E case 7
					; jumptable 64212BE6 cases 0-3
		cmp	ebx, 3
		jg	short loc_64212A73 ; jumptable 64212A2D	default	case

loc_64212AA7:				; CODE XREF: _little2_scanRef+160j
					; _little2_scanRef+16Aj
		mov	eax, 0FFFFFFFEh
		jmp	short loc_64212A77
; ---------------------------------------------------------------------------
		align 10h

loc_64212AB0:				; CODE XREF: _little2_scanRef+A6j
					; DATA XREF: .rdata:off_6421F3D0o
		mov	ecx, ebp	; jumptable 64212A96 case 39
		mov	edi, ebp
		cmp	cl, 0FEh
		jb	short loc_64212A43
		xor	edi, edi
		jmp	loc_64212A25
; ---------------------------------------------------------------------------

loc_64212AC0:				; CODE XREF: _little2_scanRef+A6j
					; DATA XREF: .rdata:off_6421F3D0o
		mov	edi, 8		; jumptable 64212A96 cases 4-7
		jmp	loc_64212A25
; ---------------------------------------------------------------------------
		align 10h

loc_64212AD0:				; CODE XREF: _little2_scanRef+138j
		lea	edi, [ecx+28h]
		movzx	ebp, byte ptr [edx]
		mov	ecx, edi
		cmp	cl, 27h		; switch 40 cases
		jbe	loc_64212BE0

loc_64212AE1:				; CODE XREF: _little2_scanRef+1F6j
					; DATA XREF: .rdata:off_6421F4D4o
		mov	edi, ebp	; jumptable 64212BE6 default case

loc_64212AE3:				; CODE XREF: _little2_scanRef+23Dj
					; _little2_scanRef+26Cj
		movzx	ecx, [esp+18h+var_11]
		movzx	ebp, ds:_namePages[ecx]
		mov	ecx, edi
		shr	cl, 5
		movzx	ecx, cl
		lea	ebp, [ecx+ebp*8]
		mov	ecx, edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		test	ds:_namingBitmap[ebp*4], edi
		jz	loc_64212A73	; jumptable 64212A2D default case

loc_64212B13:				; CODE XREF: _little2_scanRef+3Dj
					; _little2_scanRef+7Dj	...
		add	edx, 2		; jumptable 64212A2D cases 22,24
					; jumptable 64212B3E cases 22,24-27
		cmp	ebx, edx
		jz	loc_64212BC2
		movzx	ecx, byte ptr [edx+1]
		test	cl, cl
		mov	[esp+18h+var_11], cl
		jnz	short loc_64212AD0
		movzx	edi, byte ptr [edx]
		movzx	edi, byte ptr [eax+edi+4Ch]

loc_64212B32:				; CODE XREF: _little2_scanRef+245j
					; _little2_scanRef+255j
		sub	edi, 5		; switch 25 cases
		cmp	edi, 18h
		ja	loc_64212A73	; jumptable 64212A2D default case
		jmp	ds:off_6421F470[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64212B45:				; CODE XREF: _little2_scanRef+3Dj
					; _little2_scanRef+14Ej
					; DATA XREF: ...
		sub	ebx, edx	; jumptable 64212A2D case 5
					; jumptable 64212B3E case 5
		cmp	ebx, 1
		jg	loc_64212A73	; jumptable 64212A2D default case
		jmp	loc_64212AA7
; ---------------------------------------------------------------------------

loc_64212B55:				; CODE XREF: _little2_scanRef+3Dj
					; _little2_scanRef+14Ej
					; DATA XREF: ...
		sub	ebx, edx	; jumptable 64212A2D case 6
					; jumptable 64212B3E case 6
		cmp	ebx, 2
		jle	loc_64212AA7
		jmp	loc_64212A73	; jumptable 64212A2D default case
; ---------------------------------------------------------------------------

loc_64212B65:				; CODE XREF: _little2_scanRef+3Dj
					; DATA XREF: .rdata:off_6421F36Co
		lea	ebp, [edx+2]	; jumptable 64212A2D case 19
		cmp	ebx, ebp
		jz	short loc_64212BC2
		movzx	edi, byte ptr [ebp+1]
		mov	ecx, edi
		test	cl, cl
		jnz	short loc_64212BD0
		movzx	edi, byte ptr [edx+2]
		mov	ecx, edi
		cmp	cl, 78h
		jz	short loc_64212BF5
		and	edi, 0FFh
		cmp	byte ptr [eax+edi+4Ch],	19h
		jnz	short loc_64212BD0
		add	edx, 4
		cmp	ebx, edx
		jz	short loc_64212BC2

loc_64212B95:				; CODE XREF: _little2_scanRef+1D0j
		movzx	ecx, byte ptr [edx+1]
		test	cl, cl
		jnz	loc_64212A73	; jumptable 64212A2D default case
		movzx	ecx, byte ptr [edx]
		movzx	ecx, byte ptr [eax+ecx+4Ch]
		cmp	ecx, 12h
		jz	loc_64212CE1
		cmp	ecx, 19h
		jnz	loc_64212A73	; jumptable 64212A2D default case
		add	edx, 2
		cmp	ebx, edx
		jnz	short loc_64212B95

loc_64212BC2:				; CODE XREF: _little2_scanRef+1Bj
					; _little2_scanRef+128j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_64212A77
; ---------------------------------------------------------------------------
		align 10h

loc_64212BD0:				; CODE XREF: _little2_scanRef+184j
					; _little2_scanRef+19Cj
		mov	[esi], ebp
		xor	eax, eax
		jmp	loc_64212A77
; ---------------------------------------------------------------------------
		align 10h

loc_64212BE0:				; CODE XREF: _little2_scanRef+EBj
		and	edi, 0FFh
		jmp	ds:off_6421F4D4[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64212BED:				; CODE XREF: _little2_scanRef+3Dj
					; DATA XREF: .rdata:off_6421F36Co
		movzx	edi, byte ptr [edx] ; jumptable	64212A2D case 29
		jmp	loc_64212A43
; ---------------------------------------------------------------------------

loc_64212BF5:				; CODE XREF: _little2_scanRef+18Fj
		lea	ecx, [edx+4]
		cmp	ebx, ecx
		mov	[esp+18h+var_18], ecx
		jz	short loc_64212BC2
		movzx	edi, byte ptr [ecx+1]
		mov	ecx, edi
		test	cl, cl
		jnz	short loc_64212C80
		movzx	edx, byte ptr [edx+4]
		movzx	edx, byte ptr [eax+edx+4Ch]

loc_64212C12:				; CODE XREF: _little2_scanRef+2A5j
					; _little2_scanRef+2C1j
		sub	edx, 18h
		cmp	edx, 1
		jbe	short loc_64212C61

loc_64212C1A:				; CODE XREF: _little2_scanRef+299j
					; _little2_scanRef+2AEj ...
		mov	ecx, [esp+18h+var_18]
		xor	eax, eax
		mov	[esi], ecx
		jmp	loc_64212A77
; ---------------------------------------------------------------------------

loc_64212C26:				; CODE XREF: _little2_scanRef+1F6j
					; DATA XREF: .rdata:off_6421F4D4o
		mov	ecx, ebp	; jumptable 64212BE6 case 39
		mov	edi, ebp
		cmp	cl, 0FEh
		jb	loc_64212AE3
		xor	edi, edi
		jmp	loc_64212B32
; ---------------------------------------------------------------------------
		align 10h

loc_64212C40:				; CODE XREF: _little2_scanRef+1F6j
					; DATA XREF: .rdata:off_6421F4D4o
		mov	edi, 8		; jumptable 64212BE6 cases 4-7
		jmp	loc_64212B32
; ---------------------------------------------------------------------------

loc_64212C4A:				; CODE XREF: _little2_scanRef+14Ej
					; DATA XREF: .rdata:off_6421F470o
		add	edx, 2		; jumptable 64212B3E case 18
		mov	eax, 9
		mov	[esi], edx
		jmp	loc_64212A77
; ---------------------------------------------------------------------------

loc_64212C59:				; CODE XREF: _little2_scanRef+14Ej
					; DATA XREF: .rdata:off_6421F470o
		movzx	edi, byte ptr [edx] ; jumptable	64212B3E case 29
		jmp	loc_64212AE3
; ---------------------------------------------------------------------------

loc_64212C61:				; CODE XREF: _little2_scanRef+228j
		mov	ecx, [esp+18h+var_18]

loc_64212C64:				; CODE XREF: _little2_scanRef+2E0j
		add	ecx, 2
		cmp	ebx, ecx
		jz	loc_64212BC2
		movzx	edx, byte ptr [ecx+1]
		test	dl, dl
		jz	short loc_64212CB6

loc_64212C77:				; CODE XREF: _little2_scanRef+2D3j
					; _little2_scanRef+2DBj
		mov	[esi], ecx
		xor	eax, eax
		jmp	loc_64212A77
; ---------------------------------------------------------------------------

loc_64212C80:				; CODE XREF: _little2_scanRef+217j
		movzx	ebp, byte ptr [edx+4]
		mov	edx, edi
		cmp	dl, 0D8h
		jb	short loc_64212C1A
		mov	ecx, edi
		mov	edx, 7
		cmp	cl, 0DBh
		jbe	loc_64212C12
		cmp	cl, 0FFh
		jnz	loc_64212C1A
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	loc_64212C1A
		xor	edx, edx
		jmp	loc_64212C12
; ---------------------------------------------------------------------------

loc_64212CB6:				; CODE XREF: _little2_scanRef+285j
		movzx	edx, byte ptr [ecx]
		movzx	edx, byte ptr [eax+edx+4Ch]
		cmp	edx, 12h
		jz	short loc_64212CD2
		jl	short loc_64212C77
		sub	edx, 18h
		cmp	edx, 1
		ja	short loc_64212C77
		lea	esi, [esi+0]
		jmp	short loc_64212C64
; ---------------------------------------------------------------------------

loc_64212CD2:				; CODE XREF: _little2_scanRef+2D1j
		add	ecx, 2
		mov	eax, 0Ah
		mov	[esi], ecx
		jmp	loc_64212A77
; ---------------------------------------------------------------------------

loc_64212CE1:				; CODE XREF: _little2_scanRef+1BCj
		add	edx, 2
		mov	eax, 0Ah
		mov	[esi], edx
		jmp	loc_64212A77
_little2_scanRef endp


; =============== S U B	R O U T	I N E =======================================


_little2_contentTok proc near		; DATA XREF: .rdata:642232E4o
					; .rdata:64223604o ...

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 40h
		mov	eax, 0FFFFFFFCh
		mov	[esp+40h+var_10], ebx
		mov	edx, [esp+40h+arg_4]
		mov	ebx, [esp+40h+arg_8]
		mov	[esp+40h+var_C], esi
		mov	esi, [esp+40h+arg_0]
		mov	[esp+40h+var_8], edi
		mov	edi, [esp+40h+arg_C]
		mov	[esp+40h+var_4], ebp
		cmp	edx, ebx
		jz	loc_64212DF0
		mov	ecx, ebx
		sub	ecx, edx
		test	cl, 1
		jnz	loc_64213497

loc_64212D2D:				; CODE XREF: _little2_contentTok+7B5j
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	loc_64212E04
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		ja	loc_64212E12	; jumptable 64212D4A default case

loc_64212D4A:				; CODE XREF: _little2_contentTok+225j
					; _little2_contentTok+240j
		jmp	ds:off_6421F574[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64212D51:				; CODE XREF: _little2_contentTok+4DBj
		lea	ecx, [eax+4]
		sub	ebx, ecx
		cmp	ebx, 0Bh
		jle	loc_64213351
		cmp	byte ptr [ecx+1], 0
		jnz	loc_64212ECF
		cmp	byte ptr [edx+2], 43h
		jnz	loc_64212ECF
		lea	ecx, [eax+6]
		cmp	byte ptr [ecx+1], 0
		jnz	loc_64212ECF
		cmp	byte ptr [edx+4], 44h
		jnz	loc_64212ECF
		lea	ecx, [eax+8]
		cmp	byte ptr [ecx+1], 0
		jnz	loc_64212ECF
		cmp	byte ptr [edx+6], 41h
		jnz	loc_64212ECF
		lea	ecx, [edx+8]
		cmp	byte ptr [ecx+1], 0
		jnz	loc_64212ECF
		cmp	byte ptr [edx+8], 54h
		jnz	loc_64212ECF
		lea	ecx, [edx+0Ah]
		cmp	byte ptr [ecx+1], 0
		jnz	loc_64212ECF
		cmp	byte ptr [ecx],	41h
		jnz	loc_64212ECF
		lea	ecx, [edx+0Ch]
		cmp	byte ptr [ecx+1], 0
		jnz	loc_64212ECF
		cmp	byte ptr [ecx],	5Bh
		xchg	ax, ax
		jnz	loc_64212ECF
		add	edx, 0Eh
		mov	eax, 8
		mov	[edi], edx

loc_64212DF0:				; CODE XREF: _little2_contentTok+2Aj
					; _little2_contentTok+187j ...
		mov	ebx, [esp+40h+var_10]
		mov	esi, [esp+40h+var_C]
		mov	edi, [esp+40h+var_8]
		mov	ebp, [esp+40h+var_4]
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_64212E04:				; CODE XREF: _little2_contentTok+43j
		add	eax, 28h
		movzx	ecx, byte ptr [edx]
		cmp	al, 27h		; switch 40 cases
		jbe	loc_64212F02

loc_64212E12:				; CODE XREF: _little2_contentTok+54j
					; _little2_contentTok+215j ...
		lea	eax, [edx+2]	; jumptable 64212D4A default case

loc_64212E15:				; CODE XREF: _little2_contentTok+2ECj
					; _little2_contentTok+2FDj ...
		cmp	ebx, eax
		jz	loc_642134B0
		movzx	edx, byte ptr [eax+1]
		movzx	ebp, byte ptr [eax]
		mov	ecx, edx
		jmp	short loc_64212E4C
; ---------------------------------------------------------------------------

loc_64212E28:				; CODE XREF: _little2_contentTok+15Ej
		and	ebp, 0FFh
		movzx	edx, byte ptr [esi+ebp+4Ch]
		cmp	edx, 0Ah	; switch 11 cases
		jbe	short loc_64212E85

loc_64212E38:				; CODE XREF: _little2_contentTok+166j
					; _little2_contentTok+16Bj ...
		lea	edx, [eax+2]	; jumptable 64212E5B default case

loc_64212E3B:				; CODE XREF: _little2_contentTok+1ACj
					; _little2_contentTok+1F4j
		cmp	ebx, edx
		jz	loc_642134B0

loc_64212E43:				; CODE XREF: _little2_contentTok+1BBj
					; _little2_contentTok+1C0j ...
		movzx	ecx, byte ptr [edx+1]
		mov	eax, edx
		movzx	ebp, byte ptr [edx]

loc_64212E4C:				; CODE XREF: _little2_contentTok+136j
					; _little2_contentTok+34Bj ...
		test	cl, cl
		jz	short loc_64212E28
		add	ecx, 28h
		cmp	cl, 27h		; switch 40 cases
		ja	short loc_64212E38 ; jumptable 64212E5B	default	case
		movzx	ecx, cl
		jmp	ds:off_6421F5A0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64212E62:				; CODE XREF: _little2_contentTok:loc_64212E85j
					; DATA XREF: .rdata:off_6421F640o
		mov	edx, ebx	; jumptable 64212E85 case 5
		sub	edx, eax
		cmp	edx, 1
		jg	short loc_64212E38 ; jumptable 64212E5B	default	case
		nop
		lea	esi, [esi+0]

loc_64212E70:				; CODE XREF: _little2_contentTok+16Bj
					; _little2_contentTok:loc_64212E85j ...
		mov	[edi], eax	; jumptable 64212E5B cases 4-7
					; jumptable 64212E85 cases 0-3,8-10
		mov	eax, 6
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------
		align 10h

loc_64212E80:				; CODE XREF: _little2_contentTok+16Bj
					; DATA XREF: .rdata:off_6421F5A0o
		mov	edx, 7		; jumptable 64212E5B cases 0-3

loc_64212E85:				; CODE XREF: _little2_contentTok+146j
					; _little2_contentTok+210j
		jmp	ds:off_6421F640[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64212E90:				; CODE XREF: _little2_contentTok:loc_64212E85j
					; DATA XREF: .rdata:off_6421F640o
		mov	edx, ebx	; jumptable 64212E85 case 6
		sub	edx, eax
		cmp	edx, 2
		jle	short loc_64212E70 ; jumptable 64212E5B	cases 4-7
					; jumptable 64212E85 cases 0-3,8-10
		lea	edx, [eax+3]
		jmp	short loc_64212E3B
; ---------------------------------------------------------------------------
		align 10h

loc_64212EA0:				; CODE XREF: _little2_contentTok:loc_64212E85j
					; DATA XREF: .rdata:off_6421F640o
		lea	edx, [eax+2]	; jumptable 64212E85 case 4
		cmp	edx, ebx
		jz	short loc_64212E70 ; jumptable 64212E5B	cases 4-7
					; jumptable 64212E85 cases 0-3,8-10
		cmp	byte ptr [eax+3], 0
		jnz	short loc_64212E43
		cmp	byte ptr [edx],	5Dh
		jnz	short loc_64212E43
		lea	ecx, [eax+4]
		cmp	ecx, ebx
		jz	short loc_64212E70 ; jumptable 64212E5B	cases 4-7
					; jumptable 64212E85 cases 0-3,8-10
		cmp	byte ptr [eax+5], 0
		lea	esi, [esi+0]
		jnz	loc_64212E43
		cmp	byte ptr [ecx],	3Eh
		jnz	loc_64212E43

loc_64212ECF:				; CODE XREF: _little2_contentTok+73j
					; _little2_contentTok+7Dj ...
		mov	[edi], ecx
		xor	eax, eax
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64212ED8:				; CODE XREF: _little2_contentTok:loc_64212E85j
					; DATA XREF: .rdata:off_6421F640o
		mov	edx, ebx	; jumptable 64212E85 case 7
		sub	edx, eax
		cmp	edx, 3
		jle	short loc_64212E70 ; jumptable 64212E5B	cases 4-7
					; jumptable 64212E85 cases 0-3,8-10
		lea	edx, [eax+4]
		jmp	loc_64212E3B
; ---------------------------------------------------------------------------
		align 10h

loc_64212EF0:				; CODE XREF: _little2_contentTok+16Bj
					; DATA XREF: .rdata:off_6421F5A0o
		mov	ecx, ebp	; jumptable 64212E5B case 39
		cmp	cl, 0FEh
		jb	loc_64212E38	; jumptable 64212E5B default case
		xor	edx, edx
		lea	esi, [esi+0]
		jmp	short loc_64212E85
; ---------------------------------------------------------------------------

loc_64212F02:				; CODE XREF: _little2_contentTok+11Cj
		movzx	eax, al
		jmp	ds:off_6421F66C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64212F10:				; CODE XREF: _little2_contentTok+215j
					; DATA XREF: .rdata:off_6421F66Co
		mov	eax, 7		; jumptable 64212F05 cases 0-3
		jmp	loc_64212D4A
; ---------------------------------------------------------------------------
		align 10h

loc_64212F20:				; CODE XREF: _little2_contentTok+215j
					; DATA XREF: .rdata:off_6421F66Co
		cmp	cl, 0FEh	; jumptable 64212F05 case 39
		jb	loc_64212E12	; jumptable 64212D4A default case
		xor	eax, eax
		nop
		lea	esi, [esi+0]
		jmp	loc_64212D4A
; ---------------------------------------------------------------------------

loc_64212F35:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; _little2_contentTok+215j ...
		mov	[edi], edx	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		xor	eax, eax
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------
		align 10h

loc_64212F40:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; DATA XREF: .rdata:off_6421F574o
		lea	ecx, [edx+2]	; jumptable 64212D4A case 9
		mov	eax, 0FFFFFFFDh
		cmp	ecx, ebx
		jz	loc_64212DF0
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_64212F64
		movzx	eax, byte ptr [edx+2]
		cmp	byte ptr [esi+eax+4Ch],	0Ah
		jnz	short loc_64212F64
		lea	ecx, [edx+4]

loc_64212F64:				; CODE XREF: _little2_contentTok+264j
					; _little2_contentTok+26Fj
		mov	[edi], ecx
		mov	eax, 7
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64212F70:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; DATA XREF: .rdata:off_6421F574o
		add	edx, 2		; jumptable 64212D4A case 10
		mov	eax, 7
		mov	[edi], edx
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------
		align 10h

loc_64212F80:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; DATA XREF: .rdata:off_6421F574o
		add	edx, 2		; jumptable 64212D4A case 3
		mov	ecx, ebx
		mov	eax, esi
		mov	[esp+40h+var_40], edi
		call	_little2_scanRef
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64212F94:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; DATA XREF: .rdata:off_6421F574o
		lea	eax, [edx+2]	; jumptable 64212D4A case 2
		cmp	ebx, eax
		jz	loc_64213351
		movzx	ecx, byte ptr [eax+1]
		test	cl, cl
		mov	[esp+40h+var_30], cl
		jnz	loc_64213050
		movzx	ebp, byte ptr [edx+2]
		movzx	ebp, byte ptr [esi+ebp+4Ch]

loc_64212FB8:				; CODE XREF: _little2_contentTok+7EAj
					; _little2_contentTok+7F4j
		sub	ebp, 5		; switch 25 cases
		cmp	ebp, 18h
		ja	loc_642130A1	; jumptable 64212FC4 default case
		jmp	ds:off_6421F70C[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64212FD0:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; DATA XREF: .rdata:off_6421F574o
		mov	eax, ebx	; jumptable 64212D4A case 7
		sub	eax, edx
		cmp	eax, 3
		jle	short loc_64213000
		lea	eax, [edx+4]
		jmp	loc_64212E15
; ---------------------------------------------------------------------------

loc_64212FE1:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; DATA XREF: .rdata:off_6421F574o
		mov	eax, ebx	; jumptable 64212D4A case 6
		sub	eax, edx
		cmp	eax, 2
		jle	short loc_64213000
		lea	eax, [edx+3]
		jmp	loc_64212E15
; ---------------------------------------------------------------------------

loc_64212FF2:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; DATA XREF: .rdata:off_6421F574o
		mov	eax, ebx	; jumptable 64212D4A case 5
		sub	eax, edx
		cmp	eax, 1
		jg	loc_64212E12	; jumptable 64212D4A default case
		nop

loc_64213000:				; CODE XREF: _little2_contentTok+2E7j
					; _little2_contentTok+2F8j ...
		mov	eax, 0FFFFFFFEh
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------
		align 10h

loc_64213010:				; CODE XREF: _little2_contentTok:loc_64212D4Aj
					; DATA XREF: .rdata:off_6421F574o
		lea	eax, [edx+2]	; jumptable 64212D4A case 4
		cmp	eax, ebx
		jz	loc_642134E9
		movzx	ecx, byte ptr [eax+1]
		test	cl, cl
		mov	byte ptr [esp+40h+var_34], cl
		jnz	short loc_64213040
		movzx	ebp, byte ptr [edx+2]
		mov	ecx, ebp
		cmp	cl, 5Dh
		jz	loc_64213609
		movzx	ecx, byte ptr [esp+40h+var_34]
		jmp	loc_64212E4C
; ---------------------------------------------------------------------------

loc_64213040:				; CODE XREF: _little2_contentTok+335j
		movzx	ebp, byte ptr [edx+2]
		jmp	loc_64212E4C
; ---------------------------------------------------------------------------
		align 10h

loc_64213050:				; CODE XREF: _little2_contentTok+2B9j
		movzx	ecx, byte ptr [edx+2]
		mov	byte ptr [esp+40h+var_34], cl
		movzx	ecx, [esp+40h+var_30]
		lea	ebp, [ecx+28h]
		mov	ecx, ebp
		cmp	cl, 27h		; switch 40 cases
		jbe	loc_642134C0

loc_6421306B:				; CODE XREF: _little2_contentTok+55Aj
					; _little2_contentTok+7D6j ...
		movzx	ecx, [esp+40h+var_30] ;	jumptable 642134C6 default case
		movzx	edx, byte ptr [esp+40h+var_34]
		movzx	ecx, ds:_nmstrtPages[ecx]
		shr	dl, 5
		movzx	edx, dl
		lea	ebp, [edx+ecx*8]
		movzx	ecx, byte ptr [esp+40h+var_34]
		mov	edx, 1
		and	ecx, 1Fh
		shl	edx, cl
		test	ds:_namingBitmap[ebp*4], edx
		jnz	loc_64213125	; jumptable 64212FC4 cases 22,24

loc_642130A1:				; CODE XREF: _little2_contentTok+2CEj
					; _little2_contentTok+2D4j ...
		mov	[edi], eax	; jumptable 64212FC4 default case
		xor	eax, eax
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_642130AA:				; CODE XREF: _little2_contentTok+3F9j
					; _little2_contentTok+F95j
		mov	edi, [esp+40h+var_34]

loc_642130AE:				; CODE XREF: _little2_contentTok+2D4j
					; _little2_contentTok+466j ...
		sub	ebx, eax	; jumptable 64212FC4 case 7
					; jumptable 64213156 case 7
					; jumptable 642132F1 case 7
					; jumptable 64213382 case 7
					; jumptable 642134C6 cases 0-3
					; jumptable 64213555 cases 0-3
		cmp	ebx, 3
		jle	loc_64213000
		jmp	short loc_642130A1 ; jumptable 64212FC4	default	case
; ---------------------------------------------------------------------------

loc_642130BB:				; CODE XREF: _little2_contentTok+865j
					; DATA XREF: .rdata:6421FB28o
		test	ebp, ebp	; jumptable 64213555 case 58
		jnz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		add	eax, 2
		cmp	ebx, eax
		jz	loc_64213351
		mov	[esp+40h+var_14], eax
		movzx	ecx, byte ptr [eax+1]
		test	cl, cl
		jnz	loc_64213C75
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [esi+edx+4Ch]
		cmp	edx, 7
		jz	short loc_642130AA
		jg	loc_64213C5D
		mov	edi, [esp+40h+var_34]

loc_642130F5:				; CODE XREF: _little2_contentTok+6F4j
		cmp	edx, 5
		jz	short loc_64213112 ; jumptable 64212FC4	case 5
					; jumptable 64213156 case 5
					; jumptable 642132F1 case 5
					; jumptable 64213382 case 5
		cmp	edx, 6
		lea	esi, [esi+0]
		jnz	short loc_642130A1 ; jumptable 64212FC4	default	case

loc_64213102:				; CODE XREF: _little2_contentTok+2D4j
					; _little2_contentTok+466j ...
		sub	ebx, eax	; jumptable 64212FC4 case 6
					; jumptable 64213156 case 6
					; jumptable 642132F1 case 6
					; jumptable 64213382 case 6
		cmp	ebx, 2
		jle	loc_64213000
		lea	esi, [esi+0]
		jmp	short loc_642130A1 ; jumptable 64212FC4	default	case
; ---------------------------------------------------------------------------

loc_64213112:				; CODE XREF: _little2_contentTok+2D4j
					; _little2_contentTok+408j ...
		sub	ebx, eax	; jumptable 64212FC4 case 5
					; jumptable 64213156 case 5
					; jumptable 642132F1 case 5
					; jumptable 64213382 case 5
		cmp	ebx, 1
		jg	short loc_642130A1 ; jumptable 64212FC4	default	case
		lea	esi, [esi+0]
		jmp	loc_64213000
; ---------------------------------------------------------------------------

loc_64213125:				; CODE XREF: _little2_contentTok+2D4j
					; _little2_contentTok+3ABj
					; DATA XREF: ...
		add	eax, 2		; jumptable 64212FC4 cases 22,24
		cmp	ebx, eax
		jz	loc_64213351
		xor	edx, edx
		mov	[esp+40h+var_38], edx

loc_64213136:				; CODE XREF: _little2_contentTok+65Bj
		movzx	ecx, byte ptr [eax+1]
		test	cl, cl
		jnz	loc_642134F5
		movzx	ebp, byte ptr [eax]
		movzx	ebp, byte ptr [esi+ebp+4Ch]

loc_6421314A:				; CODE XREF: _little2_contentTok+87Ej
					; _little2_contentTok+888j
		sub	ebp, 5		; switch 25 cases
		cmp	ebp, 18h
		ja	loc_642130A1	; jumptable 64212FC4 default case
		jmp	ds:off_6421F770[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421315D:				; CODE XREF: _little2_contentTok+2D4j
					; DATA XREF: .rdata:off_6421F70Co
		lea	edx, [eax+2]	; jumptable 64212FC4 case 15
		mov	ecx, ebx
		mov	eax, esi
		mov	[esp+40h+var_40], edi
		call	_little2_scanPi
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64213171:				; CODE XREF: _little2_contentTok+2D4j
					; DATA XREF: .rdata:off_6421F70Co
		lea	ebp, [eax+2]	; jumptable 64212FC4 case 17
		cmp	ebx, ebp
		jz	loc_64213351
		movzx	ecx, byte ptr [ebp+1]
		test	cl, cl
		mov	byte ptr [esp+40h+var_34], cl
		jnz	loc_64213510
		movzx	ecx, byte ptr [eax+2]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64213195:				; CODE XREF: _little2_contentTok+850j
					; _little2_contentTok+85Aj
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	loc_64213291	; jumptable 642131A1 default case
		jmp	ds:off_6421F7D4[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642131A8:				; CODE XREF: _little2_contentTok+2D4j
					; DATA XREF: .rdata:off_6421F70Co
		lea	edx, [eax+2]	; jumptable 64212FC4 case 16
		cmp	ebx, edx
		jz	loc_64213351
		movzx	ecx, byte ptr [edx+1]
		test	cl, cl
		jnz	loc_64212F35	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		movzx	ecx, byte ptr [eax+2]
		movzx	ecx, byte ptr [esi+ecx+4Ch]
		cmp	ecx, 14h
		jz	loc_64212D51
		cmp	ecx, 1Bh
		jnz	loc_64212F35	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		lea	ecx, [eax+4]
		cmp	ebx, ecx
		jz	loc_64213351
		cmp	byte ptr [ecx+1], 0
		jnz	loc_64212ECF
		cmp	byte ptr [edx+2], 2Dh
		jnz	loc_64212ECF
		add	eax, 6

loc_642131FC:				; CODE XREF: _little2_contentTok+550j
					; _little2_contentTok+A49j ...
		cmp	ebx, eax
		xchg	ax, ax
		jz	loc_64213351
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_64213BFE
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [esi+edx+4Ch]
		cmp	edx, 6
		jz	loc_642139BE
		jg	loc_64213715
		cmp	edx, 1
		jle	loc_642130A1	; jumptable 64212FC4 default case
		cmp	edx, 5
		jz	loc_64213C25

loc_6421323B:				; CODE XREF: _little2_contentTok+C10j
					; _little2_contentTok+F22j ...
		add	eax, 2
		xchg	ax, ax
		jmp	short loc_642131FC
; ---------------------------------------------------------------------------

loc_64213242:				; CODE XREF: _little2_contentTok+2D4j
					; DATA XREF: .rdata:off_6421F70Co
		movzx	edx, byte ptr [edx+2] ;	jumptable 64212FC4 case	29
		mov	byte ptr [esp+40h+var_34], dl
		jmp	loc_6421306B	; jumptable 642134C6 default case
; ---------------------------------------------------------------------------

loc_6421324F:				; CODE XREF: _little2_contentTok+4B1j
					; DATA XREF: .rdata:off_6421F7D4o
		movzx	eax, byte ptr [eax+2] ;	jumptable 642131A1 case	29
		mov	[esp+40h+var_30], al

loc_64213257:				; CODE XREF: _little2_contentTok+833j
					; _little2_contentTok+83Cj ...
		movzx	eax, byte ptr [esp+40h+var_34] ; jumptable 6421352C default case
		movzx	ecx, ds:_nmstrtPages[eax]
		movzx	eax, [esp+40h+var_30]
		shr	al, 5
		movzx	eax, al
		lea	eax, [eax+ecx*8]
		movzx	ecx, [esp+40h+var_30]
		mov	[esp+40h+var_34], eax
		mov	eax, 1
		and	ecx, 1Fh
		shl	eax, cl
		mov	ecx, [esp+40h+var_34]
		test	ds:_namingBitmap[ecx*4], eax
		jnz	short loc_642132B5 ; jumptable 642131A1	cases 22,24

loc_64213291:				; CODE XREF: _little2_contentTok+4ABj
					; _little2_contentTok+4B1j ...
		mov	[edi], ebp	; jumptable 642131A1 default case
		xor	eax, eax
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_6421329A:				; CODE XREF: _little2_contentTok+4B1j
					; DATA XREF: .rdata:off_6421F7D4o
		sub	ebx, ebp	; jumptable 642131A1 case 6
		cmp	ebx, 2
		jle	loc_64213000
		jmp	short loc_64213291 ; jumptable 642131A1	default	case
; ---------------------------------------------------------------------------

loc_642132A7:				; CODE XREF: _little2_contentTok+4B1j
					; DATA XREF: .rdata:off_6421F7D4o
		sub	ebx, ebp	; jumptable 642131A1 case 5
		cmp	ebx, 1
		jg	short loc_64213291 ; jumptable 642131A1	default	case
		xchg	ax, ax
		jmp	loc_64213000
; ---------------------------------------------------------------------------

loc_642132B5:				; CODE XREF: _little2_contentTok+4B1j
					; _little2_contentTok+59Fj
					; DATA XREF: ...
		add	ebp, 2		; jumptable 642131A1 cases 22,24
		cmp	ebx, ebp
		jz	loc_64213351
		add	edx, 8
		mov	[esp+40h+var_3C], esi

loc_642132C7:				; CODE XREF: _little2_contentTok+79Cj
		movzx	esi, byte ptr [edx-1]
		lea	eax, [edx-2]
		mov	ecx, esi
		test	cl, cl
		jnz	loc_64213425
		movzx	ebp, byte ptr [edx-2]
		mov	ecx, [esp+40h+var_3C]
		movzx	ebp, byte ptr [ecx+ebp+4Ch]

loc_642132E5:				; CODE XREF: _little2_contentTok+750j
					; _little2_contentTok+95Bj
		sub	ebp, 5		; switch 25 cases
		cmp	ebp, 18h
		ja	loc_642130A1	; jumptable 64212FC4 default case
		jmp	ds:off_6421F838[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642132F8:				; CODE XREF: _little2_contentTok+4B1j
					; _little2_contentTok+83Cj
					; DATA XREF: ...
		sub	ebx, ebp	; jumptable 642131A1 case 7
					; jumptable 6421352C cases 0-3
		cmp	ebx, 3
		jle	loc_64213000
		jmp	short loc_64213291 ; jumptable 642131A1	default	case
; ---------------------------------------------------------------------------

loc_64213305:				; CODE XREF: _little2_contentTok+466j
					; DATA XREF: .rdata:off_6421F770o
		movzx	ebp, byte ptr [eax] ; jumptable	64213156 case 29

loc_64213308:				; CODE XREF: _little2_contentTok+81Bj
					; _little2_contentTok+876j
		movzx	ecx, cl
		movzx	ecx, ds:_namePages[ecx]
		mov	[esp+40h+var_34], ecx
		mov	edx, [esp+40h+var_34]
		mov	ecx, ebp
		shr	cl, 5
		movzx	ecx, cl
		lea	ecx, [ecx+edx*8]
		mov	[esp+40h+var_34], ecx
		mov	edx, [esp+40h+var_34]
		mov	ecx, ebp
		and	ecx, 1Fh
		mov	ebp, 1
		shl	ebp, cl
		test	ds:_namingBitmap[edx*4], ebp
		jz	loc_642130A1	; jumptable 64212FC4 default case

loc_64213346:				; CODE XREF: _little2_contentTok+466j
					; DATA XREF: .rdata:off_6421F770o
		add	eax, 2		; jumptable 64213156 cases 22,24-27

loc_64213349:				; CODE XREF: _little2_contentTok+721j
		cmp	ebx, eax
		jnz	loc_64213136

loc_64213351:				; CODE XREF: _little2_contentTok+69j
					; _little2_contentTok+2A9j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_6421335B:				; CODE XREF: _little2_contentTok+466j
					; _little2_contentTok+692j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64213156 cases 9,10,21
					; jumptable 64213382 cases 9,10,21
		cmp	ebx, eax
		jz	short loc_64213351
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_6421357D
		movzx	ecx, byte ptr [eax]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64213376:				; CODE XREF: _little2_contentTok+9C8j
					; _little2_contentTok+A53j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	loc_642130A1	; jumptable 64212FC4 default case
		jmp	ds:off_6421F89C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64213389:				; CODE XREF: _little2_contentTok+466j
					; _little2_contentTok+692j
					; DATA XREF: ...
		lea	edx, [eax+2]	; jumptable 64213156 case 17
					; jumptable 64213382 case 17
		cmp	ebx, edx
		jz	short loc_64213351
		cmp	byte ptr [edx+1], 0
		jnz	loc_64212F35	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		cmp	byte ptr [edx],	3Eh
		lea	esi, [esi+0]
		jnz	loc_64212F35	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		add	eax, 4
		mov	[edi], eax
		mov	eax, 4
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_642133B5:				; CODE XREF: _little2_contentTok+466j
					; DATA XREF: .rdata:off_6421F770o
		cmp	[esp+40h+var_38], 0 ; jumptable	64213156 case 23
		jnz	loc_642130A1	; jumptable 64212FC4 default case
		add	eax, 2
		cmp	ebx, eax
		jz	short loc_64213351
		movzx	ecx, byte ptr [eax+1]
		test	cl, cl
		jnz	loc_64213650
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [esi+edx+4Ch]
		cmp	edx, 7
		jz	loc_642130AE	; jumptable 64212FC4 case 7
					; jumptable 64213156 case 7
					; jumptable 642132F1 case 7
					; jumptable 64213382 case 7
					; jumptable 642134C6 cases 0-3
					; jumptable 64213555 cases 0-3
		jle	loc_642130F5
		cmp	edx, 18h
		jz	short loc_64213406
		cmp	edx, 1Dh
		jz	loc_64213C55
		cmp	edx, 16h
		nop
		lea	esi, [esi+0]
		jnz	loc_642130A1	; jumptable 64212FC4 default case

loc_64213406:				; CODE XREF: _little2_contentTok+6FDj
					; _little2_contentTok+9A2j
		add	eax, 2
		mov	[esp+40h+var_38], 1
		jmp	loc_64213349
; ---------------------------------------------------------------------------

loc_64213416:				; CODE XREF: _little2_contentTok+466j
					; _little2_contentTok+692j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64213156 case 11
					; jumptable 64213382 case 11
		mov	[edi], eax
		mov	eax, 2
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64213425:				; CODE XREF: _little2_contentTok+5E2j
		movzx	ecx, byte ptr [edx-2]
		mov	byte ptr [esp+40h+var_34], cl
		mov	ecx, esi
		cmp	cl, 0DFh
		ja	loc_6421362E
		cmp	cl, 0DCh
		mov	ebp, 8
		jnb	loc_642132E5
		cmp	cl, 0D8h
		jnb	loc_642130AE	; jumptable 64212FC4 case 7
					; jumptable 64213156 case 7
					; jumptable 642132F1 case 7
					; jumptable 64213382 case 7
					; jumptable 642134C6 cases 0-3
					; jumptable 64213555 cases 0-3

loc_6421344F:				; CODE XREF: _little2_contentTok+943j
		movzx	ebp, byte ptr [esp+40h+var_34]

loc_64213454:				; CODE XREF: _little2_contentTok+953j
					; _little2_contentTok+F09j
		and	esi, 0FFh
		mov	ecx, ebp
		movzx	esi, ds:_namePages[esi]
		shr	cl, 5
		movzx	ecx, cl
		lea	esi, [ecx+esi*8]
		mov	ecx, ebp
		and	ecx, 1Fh
		mov	ebp, 1
		shl	ebp, cl
		test	ds:_namingBitmap[esi*4], ebp
		jz	loc_642130A1	; jumptable 64212FC4 default case

loc_64213485:				; CODE XREF: _little2_contentTok+601j
					; DATA XREF: .rdata:off_6421F838o
		mov	eax, edx	; jumptable 642132F1 cases 22-27
		add	edx, 2
		cmp	ebx, eax
		jnz	loc_642132C7
		jmp	loc_64213351
; ---------------------------------------------------------------------------

loc_64213497:				; CODE XREF: _little2_contentTok+37j
		and	ecx, 0FFFFFFFEh
		mov	al, 0FFh
		jz	loc_64212DF0
		lea	ebx, [edx+ecx]
		jmp	loc_64212D2D
; ---------------------------------------------------------------------------
		align 10h

loc_642134B0:				; CODE XREF: _little2_contentTok+127j
					; _little2_contentTok+14Dj
		mov	[edi], ebx
		mov	eax, 6
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------
		align 10h

loc_642134C0:				; CODE XREF: _little2_contentTok+375j
		and	ebp, 0FFh
		jmp	ds:off_6421F900[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642134CD:				; CODE XREF: _little2_contentTok+7D6j
					; DATA XREF: .rdata:off_6421F900o
		cmp	byte ptr [esp+40h+var_34], 0FEh	; jumptable 642134C6 case 39
		jb	loc_6421306B	; jumptable 642134C6 default case
		xor	ebp, ebp
		jmp	loc_64212FB8
; ---------------------------------------------------------------------------

loc_642134DF:				; CODE XREF: _little2_contentTok+7D6j
					; DATA XREF: .rdata:off_6421F900o
		mov	ebp, 8		; jumptable 642134C6 cases 4-7
		jmp	loc_64212FB8
; ---------------------------------------------------------------------------

loc_642134E9:				; CODE XREF: _little2_contentTok+325j
					; _little2_contentTok+91Ej
		mov	eax, 0FFFFFFFBh
		xchg	ax, ax
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_642134F5:				; CODE XREF: _little2_contentTok+44Cj
		movzx	edx, byte ptr [eax]
		lea	ebp, [ecx+28h]
		mov	byte ptr [esp+40h+var_34], dl
		mov	edx, ebp
		cmp	dl, 27h
		jbe	short loc_6421354F

loc_64213506:				; CODE XREF: _little2_contentTok+865j
					; DATA XREF: .rdata:6421FA60o ...
		movzx	ebp, byte ptr [esp+40h+var_34] ; jumptable 64213555 cases 8-38
		jmp	loc_64213308
; ---------------------------------------------------------------------------

loc_64213510:				; CODE XREF: _little2_contentTok+496j
		movzx	ecx, byte ptr [eax+2]
		mov	[esp+40h+var_30], cl
		movzx	ecx, byte ptr [esp+40h+var_34]
		add	ecx, 28h
		cmp	cl, 27h		; switch 40 cases
		ja	loc_64213257	; jumptable 6421352C default case
		movzx	ecx, cl
		jmp	ds:off_6421F9A0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64213533:				; CODE XREF: _little2_contentTok+83Cj
					; DATA XREF: .rdata:off_6421F9A0o
		cmp	[esp+40h+var_30], 0FEh ; jumptable 6421352C case 39
		jb	loc_64213257	; jumptable 6421352C default case
		xor	ecx, ecx
		jmp	loc_64213195
; ---------------------------------------------------------------------------

loc_64213545:				; CODE XREF: _little2_contentTok+83Cj
					; DATA XREF: .rdata:off_6421F9A0o
		mov	ecx, 8		; jumptable 6421352C cases 4-7
		jmp	loc_64213195
; ---------------------------------------------------------------------------

loc_6421354F:				; CODE XREF: _little2_contentTok+814j
		and	ebp, 0FFh	; switch 256 cases
		jmp	ds:off_6421FA40[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421355C:				; CODE XREF: _little2_contentTok+865j
					; DATA XREF: .rdata:6421FADCo
		movzx	ebp, byte ptr [esp+40h+var_34] ; jumptable 64213555 case 39
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	loc_64213308
		xor	ebp, ebp
		jmp	loc_6421314A
; ---------------------------------------------------------------------------

loc_64213573:				; CODE XREF: _little2_contentTok+865j
					; DATA XREF: .rdata:6421FA50o ...
		mov	ebp, 8		; jumptable 64213555 cases 4-7
		jmp	loc_6421314A
; ---------------------------------------------------------------------------

loc_6421357D:				; CODE XREF: _little2_contentTok+678j
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax]
		ja	loc_6421369D
		cmp	dl, 0DCh
		jnb	loc_6421373E
		cmp	dl, 0D8h
		jnb	loc_642130AE	; jumptable 64212FC4 case 7
					; jumptable 64213156 case 7
					; jumptable 642132F1 case 7
					; jumptable 64213382 case 7
					; jumptable 642134C6 cases 0-3
					; jumptable 64213555 cases 0-3

loc_6421359B:				; CODE XREF: _little2_contentTok+9B0j
					; _little2_contentTok+9C0j ...
		movzx	edx, dl
		movzx	ebp, ds:_nmstrtPages[edx]
		mov	edx, ecx
		and	ecx, 1Fh
		shr	dl, 5
		movzx	edx, dl
		lea	ebp, [edx+ebp*8]
		mov	edx, 1
		shl	edx, cl
		test	ds:_namingBitmap[ebp*4], edx
		jz	loc_642130A1	; jumptable 64212FC4 default case

loc_642135C7:				; CODE XREF: _little2_contentTok+692j
					; DATA XREF: .rdata:off_6421F89Co
		add	eax, 2		; jumptable 64213382 cases 22,24
		xor	ebp, ebp
		mov	[esp+40h+var_14], eax
		mov	[esp+40h+var_34], edi

loc_642135D4:				; CODE XREF: _little2_contentTok+BA4j
		cmp	ebx, eax
		jz	loc_64213351
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_64213842
		movzx	ecx, byte ptr [eax]
		movzx	edi, byte ptr [esi+ecx+4Ch]

loc_642135F0:				; CODE XREF: _little2_contentTok+B62j
					; _little2_contentTok+BB5j
		sub	edi, 5
		cmp	edi, 18h	; switch 1 cases
		jbe	loc_64213758

loc_642135FC:				; CODE XREF: _little2_contentTok+3CDj
					; _little2_contentTok+865j ...
		mov	edi, [esp+40h+var_34] ;	jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		mov	[edi], eax
		xor	eax, eax
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64213609:				; CODE XREF: _little2_contentTok+340j
		lea	eax, [edx+4]
		cmp	eax, ebx
		jz	loc_642134E9
		cmp	byte ptr [eax+1], 0
		jnz	short loc_64213626
		cmp	byte ptr [edx+4], 3Eh
		xchg	ax, ax
		jz	loc_642130A1	; jumptable 64212FC4 default case

loc_64213626:				; CODE XREF: _little2_contentTok+928j
		sub	eax, 2
		jmp	loc_64212E15
; ---------------------------------------------------------------------------

loc_6421362E:				; CODE XREF: _little2_contentTok+742j
		mov	ecx, esi
		cmp	cl, 0FFh
		jnz	loc_6421344F
		movzx	ebp, byte ptr [esp+40h+var_34]
		mov	ecx, ebp
		cmp	cl, 0FEh
		jb	loc_64213454
		xor	ebp, ebp
		jmp	loc_642132E5
; ---------------------------------------------------------------------------

loc_64213650:				; CODE XREF: _little2_contentTok+6DDj
		cmp	cl, 0DFh
		movzx	ebp, byte ptr [eax]
		ja	short loc_642136BD
		cmp	cl, 0DCh
		jnb	loc_642130A1	; jumptable 64212FC4 default case
		cmp	cl, 0D8h
		jnb	loc_642130AE	; jumptable 64212FC4 case 7
					; jumptable 64213156 case 7
					; jumptable 642132F1 case 7
					; jumptable 64213382 case 7
					; jumptable 642134C6 cases 0-3
					; jumptable 64213555 cases 0-3

loc_6421366A:				; CODE XREF: _little2_contentTok+9D0j
					; _little2_contentTok+9D7j ...
		movzx	ecx, cl
		mov	edx, ebp
		movzx	ecx, ds:_nmstrtPages[ecx]
		shr	dl, 5
		movzx	edx, dl
		lea	edx, [edx+ecx*8]
		mov	ecx, ebp
		and	ecx, 1Fh
		mov	ebp, 1
		shl	ebp, cl
		test	ds:_namingBitmap[edx*4], ebp
		jnz	loc_64213406
		jmp	loc_642130A1	; jumptable 64212FC4 default case
; ---------------------------------------------------------------------------

loc_6421369D:				; CODE XREF: _little2_contentTok+893j
		cmp	dl, 0FFh
		jnz	loc_6421359B
		cmp	cl, 0FEh
		lea	esi, [esi+0]
		jb	loc_6421359B
		xor	ecx, ecx
		jmp	loc_64213376
; ---------------------------------------------------------------------------

loc_642136BD:				; CODE XREF: _little2_contentTok+966j
		cmp	cl, 0FFh
		jnz	short loc_6421366A
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	short loc_6421366A
		jmp	loc_642130A1	; jumptable 64212FC4 default case
; ---------------------------------------------------------------------------

loc_642136CE:				; CODE XREF: _little2_contentTok+601j
					; _little2_contentTok+A13j
					; DATA XREF: ...
		add	eax, 2		; jumptable 642132F1 case 11
		mov	[edi], eax
		mov	eax, 5
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_642136DD:				; CODE XREF: _little2_contentTok+601j
					; DATA XREF: .rdata:off_6421F838o
		mov	esi, [esp+40h+var_3C] ;	jumptable 642132F1 cases 9,10,21
		add	eax, 2

loc_642136E4:				; CODE XREF: _little2_contentTok+A23j
		cmp	ebx, eax
		jz	loc_64213351
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_642130A1	; jumptable 64212FC4 default case
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [esi+edx+4Ch]
		cmp	edx, 0Bh
		jz	short loc_642136CE ; jumptable 642132F1	case 11
		jg	short loc_64213748
		cmp	edx, 9
		jl	loc_642130A1	; jumptable 64212FC4 default case

loc_64213710:				; CODE XREF: _little2_contentTok+A66j
		add	eax, 2
		jmp	short loc_642136E4
; ---------------------------------------------------------------------------

loc_64213715:				; CODE XREF: _little2_contentTok+533j
		cmp	edx, 8
		jz	loc_642130A1	; jumptable 64212FC4 default case
		xchg	ax, ax
		jge	loc_642138FD

loc_64213726:				; CODE XREF: _little2_contentTok+F28j
		mov	edx, ebx
		sub	edx, eax
		cmp	edx, 3
		lea	esi, [esi+0]
		jle	loc_64213000
		add	eax, 4
		jmp	loc_642131FC
; ---------------------------------------------------------------------------

loc_6421373E:				; CODE XREF: _little2_contentTok+89Cj
		mov	ecx, 8
		jmp	loc_64213376
; ---------------------------------------------------------------------------

loc_64213748:				; CODE XREF: _little2_contentTok+A15j
		cmp	edx, 15h
		nop
		lea	esi, [esi+0]
		jnz	loc_642130A1	; jumptable 64212FC4 default case
		jmp	short loc_64213710
; ---------------------------------------------------------------------------

loc_64213758:				; CODE XREF: _little2_contentTok+906j
		nop
		lea	esi, [esi+0]
		jmp	ds:off_6421FAE0[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64213767:				; CODE XREF: _little2_contentTok+AB9j
		movzx	edx, byte ptr [eax]
		movzx	ecx, byte ptr [esi+edx+4Ch]
		cmp	ecx, 0Eh
		jz	loc_64213804	; jumptable 64213555 case 49
		cmp	ecx, 15h
		ja	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8

loc_64213781:				; CODE XREF: _little2_contentTok+ACFj
					; _little2_contentTok+AE0j ...
		mov	edx, 1
		shl	edx, cl
		and	edx, 200600h
		jz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8

loc_64213794:				; CODE XREF: _little2_contentTok+865j
					; DATA XREF: .rdata:6421FAF0o ...
		add	eax, 2		; jumptable 64213555 cases 44,45,56
		cmp	ebx, eax
		jz	loc_64213351
		mov	[esp+40h+var_14], eax
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_64213767
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax]
		ja	loc_642139D5
		cmp	dl, 0DCh
		mov	ecx, 8
		jnb	short loc_64213781
		cmp	dl, 0D8h
		jb	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		mov	ecx, 7
		nop
		jmp	short loc_64213781
; ---------------------------------------------------------------------------

loc_642137D2:				; CODE XREF: _little2_contentTok+B29j
		movzx	edx, byte ptr [eax]
		movzx	edi, byte ptr [esi+edx+4Ch]
		lea	edx, [edi-0Ch]
		cmp	edx, 1
		jbe	loc_64213985
		cmp	edi, 15h
		ja	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8

loc_642137EF:				; CODE XREF: _little2_contentTok+B3Fj
					; _little2_contentTok+B50j ...
		mov	edx, 1
		mov	ecx, edi
		shl	edx, cl
		and	edx, 200600h
		jz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8

loc_64213804:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+A82j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64213555 case 49
		cmp	ebx, eax
		jz	loc_64213351
		mov	[esp+40h+var_14], eax
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_642137D2
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax]
		ja	loc_642138DC
		cmp	dl, 0DCh
		mov	edi, 8
		jnb	short loc_642137EF
		cmp	dl, 0D8h
		jb	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		mov	edi, 7
		nop
		jmp	short loc_642137EF
; ---------------------------------------------------------------------------

loc_64213842:				; CODE XREF: _little2_contentTok+8F2j
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax]
		ja	short loc_64213899
		cmp	dl, 0DCh
		mov	edi, 8
		jnb	loc_642135F0
		cmp	dl, 0D8h
		jnb	short loc_642138C8 ; jumptable 64213555	cases 42,89
					; jumptable 64213B29 case 7

loc_6421385D:				; CODE XREF: _little2_contentTok+BACj
					; _little2_contentTok+BB1j ...
		movzx	edx, dl
		movzx	edi, ds:_namePages[edx]
		mov	edx, ecx
		and	ecx, 1Fh
		shr	dl, 5
		movzx	edx, dl
		lea	edi, [edx+edi*8]
		mov	edx, 1
		shl	edx, cl
		test	ds:_namingBitmap[edi*4], edx
		jz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8

loc_64213889:				; CODE XREF: _little2_contentTok+865j
					; DATA XREF: .rdata:6421FB24o ...
		add	eax, 2		; jumptable 64213555 cases 57,59-62
		mov	[esp+40h+var_14], eax

loc_64213890:				; CODE XREF: _little2_contentTok+EADj
					; _little2_contentTok+FD5j
		mov	eax, [esp+40h+var_14]
		jmp	loc_642135D4
; ---------------------------------------------------------------------------

loc_64213899:				; CODE XREF: _little2_contentTok+B58j
		cmp	dl, 0FFh
		jnz	short loc_6421385D
		cmp	cl, 0FEh
		jb	short loc_6421385D
		xor	edi, edi
		jmp	loc_642135F0
; ---------------------------------------------------------------------------

loc_642138AA:				; CODE XREF: _little2_contentTok+E1Fj
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax]
		ja	loc_64213BDA
		cmp	dl, 0DCh
		jnb	loc_64213BD0
		cmp	dl, 0D8h
		jb	loc_64213B68

loc_642138C8:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+B6Bj ...
		sub	ebx, eax	; jumptable 64213555 cases 42,89
					; jumptable 64213B29 case 7
		mov	edi, [esp+40h+var_34]
		cmp	ebx, 3
		jle	loc_64213000
		jmp	loc_642130A1	; jumptable 64212FC4 default case
; ---------------------------------------------------------------------------

loc_642138DC:				; CODE XREF: _little2_contentTok+B31j
		cmp	dl, 0FFh
		nop
		jnz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		cmp	cl, 0FEh
		lea	esi, [esi+0]
		jb	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		xor	edi, edi
		jmp	loc_642137EF
; ---------------------------------------------------------------------------

loc_642138FD:				; CODE XREF: _little2_contentTok+A30j
		cmp	edx, 1Bh
		jnz	loc_6421323B
		add	eax, 2
		cmp	ebx, eax
		jz	loc_64213351
		cmp	byte ptr [eax+1], 0
		jnz	loc_642131FC
		cmp	byte ptr [eax],	2Dh
		xchg	ax, ax
		jnz	loc_642131FC
		lea	edx, [eax+2]
		cmp	ebx, edx
		jz	loc_64213351
		cmp	byte ptr [edx+1], 0
		jnz	loc_64212F35	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		cmp	byte ptr [edx],	3Eh
		xchg	ax, ax
		jnz	loc_64212F35	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		add	eax, 4
		mov	[edi], eax
		mov	eax, 0Dh
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64213955:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+E39j
					; DATA XREF: ...
		sub	ebx, eax	; jumptable 64213555 cases 41,88
					; jumptable 64213B29 case 6
		mov	edi, [esp+40h+var_34]
		cmp	ebx, 2
		jle	loc_64213000
		jmp	loc_642130A1	; jumptable 64212FC4 default case
; ---------------------------------------------------------------------------

loc_64213969:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+A70j ...
		sub	ebx, eax	; jumptable 64213555 cases 40,87
					; jumptable 64213760 case 0
					; jumptable 64213B29 case 5
		mov	edi, [esp+40h+var_34]
		cmp	ebx, 1
		jg	loc_642130A1	; jumptable 64212FC4 default case
		jmp	loc_64213000
; ---------------------------------------------------------------------------

loc_6421397D:				; CODE XREF: _little2_contentTok+865j
					; DATA XREF: .rdata:6421FB40o
		movzx	ecx, byte ptr [eax] ; jumptable	64213555 case 64
		jmp	loc_6421385D
; ---------------------------------------------------------------------------

loc_64213985:				; CODE XREF: _little2_contentTok+AF0j
		add	eax, 2
		mov	[esp+40h+var_14], eax

loc_6421398C:				; CODE XREF: _little2_contentTok+D16j
		cmp	ebx, eax
		xchg	ax, ax
		jz	loc_64213351
		movzx	ecx, byte ptr [eax+1]
		test	cl, cl
		jnz	loc_64213A98
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [esi+edx+4Ch]
		cmp	edx, edi
		jz	loc_64213A62
		cmp	edx, 8		; switch 9 cases
		ja	short loc_64213A15 ; jumptable 64213555	case 69

loc_642139B7:				; CODE XREF: _little2_contentTok+DBCj
					; _little2_contentTok+DD0j ...
		jmp	ds:off_6421FB44[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642139BE:				; CODE XREF: _little2_contentTok+52Dj
		mov	edx, ebx
		sub	edx, eax
		cmp	edx, 2
		jle	loc_64213000
		add	eax, 3
		xchg	ax, ax
		jmp	loc_642131FC
; ---------------------------------------------------------------------------

loc_642139D5:				; CODE XREF: _little2_contentTok+AC1j
		cmp	dl, 0FFh
		jnz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		cmp	cl, 0FEh
		jb	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		xor	ecx, ecx
		jmp	loc_64213781
; ---------------------------------------------------------------------------

loc_642139EE:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok:loc_642139B7j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 64213555 case 71
					; jumptable 642139B7 case 6
		sub	edx, eax
		cmp	edx, 2
		jle	loc_64213000
		add	eax, 3
		mov	[esp+40h+var_14], eax

loc_64213A02:				; CODE XREF: _little2_contentTok+D2Cj
					; _little2_contentTok+D43j ...
		mov	eax, [esp+40h+var_14]
		jmp	short loc_6421398C
; ---------------------------------------------------------------------------

loc_64213A08:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok:loc_642139B7j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 64213555 case 70
					; jumptable 642139B7 case 5
		sub	edx, eax
		cmp	edx, 1
		jle	loc_64213000

loc_64213A15:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+CC5j ...
		add	eax, 2		; jumptable 64213555 case 69
		mov	[esp+40h+var_14], eax
		jmp	short loc_64213A02
; ---------------------------------------------------------------------------

loc_64213A1E:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok:loc_642139B7j
					; DATA XREF: ...
		lea	edx, [eax+2]	; jumptable 64213555 case 68
					; jumptable 642139B7 case 3
		mov	ecx, ebx
		lea	ebp, [esp+40h+var_14]
		mov	eax, esi
		mov	[esp+40h+var_40], ebp
		call	_little2_scanRef
		test	eax, eax
		jg	short loc_64213A02
		test	eax, eax
		mov	edi, [esp+40h+var_34]
		jnz	loc_64212DF0
		mov	edx, [esp+40h+var_14]
		mov	[edi], edx
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64213A4C:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok:loc_642139B7j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 64213555 case 72
					; jumptable 642139B7 case 7
		sub	edx, eax
		cmp	edx, 3
		jle	loc_64213000
		add	eax, 4
		mov	[esp+40h+var_14], eax
		jmp	short loc_64213A02
; ---------------------------------------------------------------------------

loc_64213A62:				; CODE XREF: _little2_contentTok+CBCj
		add	eax, 2
		cmp	ebx, eax
		jz	loc_64213351
		mov	[esp+40h+var_14], eax
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_64213B30
		movzx	edx, byte ptr [eax]
		movzx	ecx, byte ptr [esi+edx+4Ch]

loc_64213A85:				; CODE XREF: _little2_contentTok+E54j
					; _little2_contentTok+E70j
		sub	ecx, 9		; switch 13 cases
		cmp	ecx, 0Ch
		ja	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		jmp	ds:off_6421FB68[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64213A98:				; CODE XREF: _little2_contentTok+CACj
		cmp	cl, 0DFh
		movzx	ebp, byte ptr [eax]
		ja	loc_64213BB5
		cmp	cl, 0DCh
		mov	edx, 8
		jnb	loc_642139B7
		cmp	cl, 0D8h
		jb	loc_64213A15	; jumptable 64213555 case 69
		mov	edx, 7
		jmp	loc_642139B7
; ---------------------------------------------------------------------------

loc_64213AC5:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+DA1j ...
		lea	edx, [eax+2]	; jumptable 64213555 cases 82,99
					; jumptable 64213A91 case 17
					; jumptable 64213B29 case 17
		mov	edi, [esp+40h+var_34]
		cmp	ebx, edx
		jz	loc_64213351
		mov	[esp+40h+var_14], edx
		cmp	byte ptr [edx+1], 0
		jnz	loc_64212F35	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		cmp	byte ptr [edx],	3Eh
		jnz	loc_64212F35	; jumptable 64212D4A cases 0,1,8
					; jumptable 64212F05 cases 4-7
		add	eax, 4
		mov	[edi], eax
		mov	eax, 3
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64213AFA:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+DA1j ...
		add	eax, 2		; jumptable 64213555 cases 74,75,86,91,92,103
					; jumptable 64213A91 cases 9,10,21
					; jumptable 64213B29 cases 9,10,21
		cmp	ebx, eax
		jz	loc_64213351
		mov	[esp+40h+var_14], eax
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_642138AA
		movzx	ecx, byte ptr [eax]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64213B1D:				; CODE XREF: _little2_contentTok+EE5j
					; _little2_contentTok+F00j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		jmp	ds:off_6421FB9C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64213B30:				; CODE XREF: _little2_contentTok+D87j
		cmp	dl, 0D8h
		movzx	edi, byte ptr [eax]
		jb	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		cmp	dl, 0DBh
		mov	ecx, 7
		jbe	loc_64213A85
		cmp	dl, 0FFh
		jnz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		mov	edx, edi
		cmp	dl, 0FEh
		jb	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		xor	cl, cl
		jmp	loc_64213A85
; ---------------------------------------------------------------------------

loc_64213B65:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+E39j
					; DATA XREF: ...
		movzx	ecx, byte ptr [eax] ; jumptable	64213555 case 111
					; jumptable 64213B29 case 29

loc_64213B68:				; CODE XREF: _little2_contentTok+BD2j
					; _little2_contentTok+EF0j ...
		movzx	edx, dl
		movzx	edi, ds:_nmstrtPages[edx]
		mov	edx, ecx
		and	ecx, 1Fh
		shr	dl, 5
		movzx	edx, dl
		lea	edi, [edx+edi*8]
		mov	edx, 1
		shl	edx, cl
		test	ds:_namingBitmap[edi*4], edx
		jz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8

loc_64213B94:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+E39j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64213555 cases 104,106
					; jumptable 64213B29 cases 22,24
		xor	ebp, ebp
		mov	[esp+40h+var_14], eax
		jmp	loc_64213890
; ---------------------------------------------------------------------------

loc_64213BA2:				; CODE XREF: _little2_contentTok+865j
					; _little2_contentTok+DA1j ...
		mov	edi, [esp+40h+var_34] ;	jumptable 64213555 cases 76,93
					; jumptable 64213A91 case 11
					; jumptable 64213B29 case 11
		add	eax, 2
		mov	[edi], eax
		mov	eax, 1
		jmp	loc_64212DF0
; ---------------------------------------------------------------------------

loc_64213BB5:				; CODE XREF: _little2_contentTok+DAEj
		cmp	cl, 0FFh
		jnz	loc_64213A15	; jumptable 64213555 case 69
		mov	ecx, ebp
		xor	edx, edx
		cmp	cl, 0FEh
		jnb	loc_642139B7
		jmp	loc_64213A15	; jumptable 64213555 case 69
; ---------------------------------------------------------------------------

loc_64213BD0:				; CODE XREF: _little2_contentTok+BC9j
		mov	ecx, 8
		jmp	loc_64213B1D
; ---------------------------------------------------------------------------

loc_64213BDA:				; CODE XREF: _little2_contentTok+BC0j
		cmp	dl, 0FFh
		lea	esi, [esi+0]
		jnz	short loc_64213B68
		cmp	cl, 0FEh
		jb	loc_64213B68
		xor	ecx, ecx
		lea	esi, [esi+0]
		jmp	loc_64213B1D
; ---------------------------------------------------------------------------

loc_64213BF5:				; CODE XREF: _little2_contentTok+601j
					; DATA XREF: .rdata:off_6421F838o
		movzx	ebp, byte ptr [edx-2] ;	jumptable 642132F1 case	29
		jmp	loc_64213454
; ---------------------------------------------------------------------------

loc_64213BFE:				; CODE XREF: _little2_contentTok+51Cj
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax]
		ja	short loc_64213C37
		cmp	dl, 0DCh
		jnb	loc_642130A1	; jumptable 64212FC4 default case
		cmp	dl, 0D8h
		jb	loc_6421323B
		jmp	loc_64213726
; ---------------------------------------------------------------------------

loc_64213C1D:				; CODE XREF: _little2_contentTok+692j
					; DATA XREF: .rdata:off_6421F89Co
		movzx	ecx, byte ptr [eax] ; jumptable	64213382 case 29
		jmp	loc_6421359B
; ---------------------------------------------------------------------------

loc_64213C25:				; CODE XREF: _little2_contentTok+545j
		mov	edx, ebx
		sub	edx, eax
		cmp	edx, 1
		jg	loc_6421323B
		jmp	loc_64213000
; ---------------------------------------------------------------------------

loc_64213C37:				; CODE XREF: _little2_contentTok+F14j
		cmp	dl, 0FFh
		jnz	loc_6421323B
		cmp	cl, 0FEh
		jb	loc_6421323B
		lea	esi, [esi+0]
		jmp	loc_642130A1	; jumptable 64212FC4 default case
; ---------------------------------------------------------------------------

loc_64213C55:				; CODE XREF: _little2_contentTok+702j
		movzx	ebp, byte ptr [eax]
		jmp	loc_6421366A
; ---------------------------------------------------------------------------

loc_64213C5D:				; CODE XREF: _little2_contentTok+3FBj
		cmp	edx, 18h
		jz	short loc_64213CB9
		cmp	edx, 1Dh
		jz	short loc_64213CD6
		cmp	edx, 16h
		jz	short loc_64213CB9

loc_64213C6C:				; CODE XREF: _little2_contentTok+F90j
					; _little2_contentTok+FE4j
		mov	edi, [esp+40h+var_34]
		jmp	loc_642130A1	; jumptable 64212FC4 default case
; ---------------------------------------------------------------------------

loc_64213C75:				; CODE XREF: _little2_contentTok+3E8j
		cmp	cl, 0DFh
		movzx	edx, byte ptr [eax]
		ja	short loc_64213CCA
		cmp	cl, 0DCh
		jnb	short loc_64213C6C
		cmp	cl, 0D8h
		jnb	loc_642130AA

loc_64213C8B:				; CODE XREF: _little2_contentTok+FDDj
					; _little2_contentTok+FE2j ...
		movzx	ecx, cl
		movzx	edi, ds:_nmstrtPages[ecx]
		mov	ecx, edx
		shr	cl, 5
		movzx	ecx, cl
		lea	edi, [ecx+edi*8]
		mov	ecx, edx
		and	ecx, 1Fh
		mov	edx, 1
		shl	edx, cl
		test	ds:_namingBitmap[edi*4], edx
		jz	loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8

loc_64213CB9:				; CODE XREF: _little2_contentTok+F70j
					; _little2_contentTok+F7Aj
		add	eax, 2
		mov	ebp, 1
		mov	[esp+40h+var_14], eax
		jmp	loc_64213890
; ---------------------------------------------------------------------------

loc_64213CCA:				; CODE XREF: _little2_contentTok+F8Bj
		cmp	cl, 0FFh
		jnz	short loc_64213C8B
		cmp	dl, 0FEh
		jb	short loc_64213C8B
		jmp	short loc_64213C6C
; ---------------------------------------------------------------------------

loc_64213CD6:				; CODE XREF: _little2_contentTok+F75j
		movzx	edx, byte ptr [eax]
		lea	esi, [esi+0]
		jmp	short loc_64213C8B
_little2_contentTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_scanPercent proc near		; CODE XREF: _little2_entityValueTok+128p
					; _little2_prologTok+3BEj

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 14h
		cmp	edx, ecx
		mov	[esp+14h+var_10], ebx
		mov	ebx, ecx
		mov	[esp+14h+var_C], esi
		mov	esi, [esp+14h+arg_0]
		mov	[esp+14h+var_8], edi
		mov	[esp+14h+var_4], ebp
		mov	[esp+14h+var_14], eax
		jz	loc_64213E61
		movzx	ecx, byte ptr [edx+1]
		test	cl, cl
		jnz	short loc_64213D33
		movzx	edi, byte ptr [edx]
		movzx	edi, byte ptr [eax+edi+4Ch]

loc_64213D24:				; CODE XREF: _little2_scanPercent+BDj
					; _little2_scanPercent+C7j
		sub	edi, 5		; switch 26 cases
		cmp	edi, 19h
		ja	short loc_64213D70 ; jumptable 64213555	cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 64213D8E cases 43-52,54-56,58,63
		jmp	ds:off_6421FC00[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64213D33:				; CODE XREF: _little2_scanPercent+2Aj
		lea	edi, [ecx+28h]
		movzx	ebp, byte ptr [edx]
		mov	eax, edi
		cmp	al, 27h
		jbe	short loc_64213D88

loc_64213D3F:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej
					; DATA XREF: ...
		mov	edi, ebp	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38

loc_64213D41:				; CODE XREF: _little2_scanPercent+B9j
					; _little2_scanPercent+190j
		movzx	ecx, cl
		movzx	ebp, ds:_nmstrtPages[ecx]
		mov	ecx, edi
		shr	cl, 5
		movzx	ecx, cl
		lea	ebp, [ecx+ebp*8]
		mov	ecx, edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		test	ds:_namingBitmap[ebp*4], edi
		jnz	loc_64213E00	; jumptable 64213555 cases 129,131,195,197-200
					; jumptable 64213D2C cases 22,24
					; jumptable 64213D8E cases 57,59-62
					; jumptable 64213E26 cases 22,24-27
		nop

loc_64213D70:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+3Aj ...
		mov	[esi], edx	; jumptable 64213555 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 64213D8E cases 43-52,54-56,58,63
		xor	eax, eax

loc_64213D74:				; CODE XREF: _little2_scanPercent+B1j
					; _little2_scanPercent+16Cj ...
		mov	ebx, [esp+14h+var_10]
		mov	esi, [esp+14h+var_C]
		mov	edi, [esp+14h+var_8]
		mov	ebp, [esp+14h+var_4]
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_64213D88:				; CODE XREF: _little2_scanPercent+4Dj
		and	edi, 0FFh	; switch 256 cases
		jmp	ds:off_6421FC68[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64213D95:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+3Cj ...
		sub	ebx, edx	; jumptable 64213555 cases 114,138-141,180,203-206
					; jumptable 64213D2C case 7
					; jumptable 64213D8E cases 0-3,42,65-68
					; jumptable 64213E26 case 7
					; jumptable 64213E76 cases 0-3
		cmp	ebx, 3
		jg	short loc_64213D70 ; jumptable 64213555	cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 64213D8E cases 43-52,54-56,58,63

loc_64213D9C:				; CODE XREF: _little2_scanPercent+150j
					; _little2_scanPercent+15Aj
		mov	eax, 0FFFFFFFEh
		jmp	short loc_64213D74
; ---------------------------------------------------------------------------

loc_64213DA3:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej
					; DATA XREF: ...
		mov	eax, ebp	; jumptable 64213555 case 177
					; jumptable 64213D8E case 39
		mov	edi, ebp
		cmp	al, 0FEh
		jb	short loc_64213D41
		xor	edi, edi
		jmp	loc_64213D24
; ---------------------------------------------------------------------------

loc_64213DB2:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej
					; DATA XREF: ...
		mov	edi, 8		; jumptable 64213555 cases 142-145
					; jumptable 64213D8E cases 4-7
		jmp	loc_64213D24
; ---------------------------------------------------------------------------
		align 10h

loc_64213DC0:				; CODE XREF: _little2_scanPercent+11Dj
		lea	edi, [ecx+28h]
		movzx	ebp, byte ptr [edx]
		mov	eax, edi
		cmp	al, 27h		; switch 40 cases
		jbe	loc_64213E70

loc_64213DD0:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej ...
		mov	edi, ebp	; jumptable 64213555 cases 211-241
					; jumptable 64213D8E cases 73-103

loc_64213DD2:				; CODE XREF: _little2_scanPercent+19Bj
					; _little2_scanPercent+1C1j
		movzx	ecx, cl
		movzx	ebp, ds:_namePages[ecx]
		mov	ecx, edi
		shr	cl, 5
		movzx	ecx, cl
		lea	ebp, [ecx+ebp*8]
		mov	ecx, edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		test	ds:_namingBitmap[ebp*4], edi
		jz	loc_64213D70	; jumptable 64213555 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 64213D8E cases 43-52,54-56,58,63

loc_64213E00:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+3Cj ...
		add	edx, 2		; jumptable 64213555 cases 129,131,195,197-200
					; jumptable 64213D2C cases 22,24
					; jumptable 64213D8E cases 57,59-62
					; jumptable 64213E26 cases 22,24-27
		cmp	ebx, edx
		jz	short loc_64213E61
		movzx	ecx, byte ptr [edx+1]
		test	cl, cl
		jnz	short loc_64213DC0
		movzx	edi, byte ptr [edx]
		mov	eax, [esp+14h+var_14]
		movzx	edi, byte ptr [eax+edi+4Ch]

loc_64213E1A:				; CODE XREF: _little2_scanPercent+1A3j
					; _little2_scanPercent+1AAj
		sub	edi, 5		; switch 25 cases
		cmp	edi, 18h
		ja	loc_64213D70	; jumptable 64213555 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 64213D8E cases 43-52,54-56,58,63
		jmp	ds:off_6421FD08[edi*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64213E30:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+3Cj ...
		sub	ebx, edx	; jumptable 64213555 cases 112,178
					; jumptable 64213D2C case 5
					; jumptable 64213D8E case 40
					; jumptable 64213E26 case 5
		cmp	ebx, 1
		jg	loc_64213D70	; jumptable 64213555 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 64213D8E cases 43-52,54-56,58,63
		nop
		lea	esi, [esi+0]
		jmp	loc_64213D9C
; ---------------------------------------------------------------------------

loc_64213E45:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+3Cj ...
		sub	ebx, edx	; jumptable 64213555 cases 113,179
					; jumptable 64213D2C case 6
					; jumptable 64213D8E case 41
					; jumptable 64213E26 case 6
		cmp	ebx, 2
		jle	loc_64213D9C
		jmp	loc_64213D70	; jumptable 64213555 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 64213D8E cases 43-52,54-56,58,63
; ---------------------------------------------------------------------------

loc_64213E55:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+3Cj
					; DATA XREF: ...
		mov	[esi], edx	; jumptable 64213555 cases 116,117,128,137
					; jumptable 64213D2C cases 9,10,21,30
		mov	eax, 16h
		jmp	loc_64213D74
; ---------------------------------------------------------------------------

loc_64213E61:				; CODE XREF: _little2_scanPercent+1Ej
					; _little2_scanPercent+115j
		mov	eax, 0FFFFFFFFh
		jmp	loc_64213D74
; ---------------------------------------------------------------------------
		align 10h

loc_64213E70:				; CODE XREF: _little2_scanPercent+DAj
		and	edi, 0FFh
		jmp	ds:off_6421FD6C[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64213E7D:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+3Cj
					; DATA XREF: ...
		movzx	edi, byte ptr [edx] ; jumptable	64213555 case 136
					; jumptable 64213D2C case 29
		jmp	loc_64213D41
; ---------------------------------------------------------------------------

loc_64213E85:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej ...
		mov	eax, ebp	; jumptable 64213555 case 242
					; jumptable 64213D8E case 104
					; jumptable 64213E76 case 39
		mov	edi, ebp
		cmp	al, 0FEh
		jb	loc_64213DD2
		xor	edi, edi
		jmp	short loc_64213E1A
; ---------------------------------------------------------------------------

loc_64213E95:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej ...
		mov	edi, 8		; jumptable 64213555 cases 207-210
					; jumptable 64213D8E cases 69-72
					; jumptable 64213E76 cases 4-7
		jmp	loc_64213E1A
; ---------------------------------------------------------------------------

loc_64213E9F:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej ...
		add	edx, 2		; jumptable 64213555 case 191
					; jumptable 64213D8E case 53
					; jumptable 64213E26 case 18
		mov	eax, 1Ch
		mov	[esi], edx
		jmp	loc_64213D74
; ---------------------------------------------------------------------------

loc_64213EAE:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej ...
		movzx	edi, byte ptr [edx] ; jumptable	64213555 case 202
					; jumptable 64213D8E case 64
					; jumptable 64213E26 case 29
		jmp	loc_64213DD2
_little2_scanPercent endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_scanLit proc near		; CODE XREF: _little2_prologTok+275j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	esi, [esp+10h+arg_0]
		mov	edi, [esp+10h+arg_4]
		cmp	ecx, esi
		jnz	short loc_64213EED
		jmp	loc_64213FB0
; ---------------------------------------------------------------------------

loc_64213ED5:				; CODE XREF: _little2_scanLit+33j
		movzx	ebx, byte ptr [ecx]
		movzx	ebx, byte ptr [edx+ebx+4Ch]
		cmp	ebx, 0Dh	; switch 14 cases
		jbe	short loc_64213F25

loc_64213EE2:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej ...
		add	ecx, 2		; jumptable 64213555 cases 251-255
					; jumptable 64213D8E cases 113-143,147-149,154-156

loc_64213EE5:				; CODE XREF: _little2_scanLit+85j
					; _little2_scanLit+BFj	...
		cmp	esi, ecx
		jz	loc_64213FB0

loc_64213EED:				; CODE XREF: _little2_scanLit+Ej
		movzx	ebx, byte ptr [ecx+1]
		test	bl, bl
		jz	short loc_64213ED5
		add	ebx, 28h
		movzx	ebp, byte ptr [ecx]
		cmp	bl, 27h		; switch 40 cases
		ja	short loc_64213EE2 ; jumptable 64213555	cases 251-255
					; jumptable 64213D8E cases 113-143,147-149,154-156
		movzx	ebx, bl
		jmp	ds:off_6421FE0C[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64213F10:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej ...
		mov	[edi], ecx	; jumptable 64213555 cases 247-250
					; jumptable 64213D8E cases 109-112,145,146,153
					; jumptable 64213F03 cases 4-7
					; jumptable 64213F25 cases 0,1,8
		xor	eax, eax

loc_64213F14:				; CODE XREF: _little2_scanLit+8Ej
					; _little2_scanLit+B1j	...
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64213F20:				; CODE XREF: _little2_contentTok+865j
					; _little2_scanPercent+9Ej ...
		mov	ebx, 7		; jumptable 64213555 cases 243-246
					; jumptable 64213D8E cases 105-108
					; jumptable 64213F03 cases 0-3

loc_64213F25:				; CODE XREF: _little2_scanLit+20j
					; _little2_scanLit+79j
		jmp	ds:off_6421FEAC[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64213F30:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_scanLit+43j
					; DATA XREF: ...
		mov	ebx, ebp	; jumptable 64213D8E case 144
					; jumptable 64213F03 case 39
		cmp	bl, 0FEh
		jb	short loc_64213EE2 ; jumptable 64213555	cases 251-255
					; jumptable 64213D8E cases 113-143,147-149,154-156
		xor	ebx, ebx
		jmp	short loc_64213F25
; ---------------------------------------------------------------------------
		align 10h

loc_64213F40:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_scanLit:loc_64213F25j
					; DATA XREF: ...
		add	ecx, 2		; jumptable 64213D8E cases 157,158
					; jumptable 64213F25 cases 12,13
		cmp	ebx, eax
		jnz	short loc_64213EE5
		cmp	ecx, esi
		mov	eax, 0FFFFFFE5h
		jz	short loc_64213F14
		mov	[edi], ecx
		movzx	eax, byte ptr [ecx+1]
		test	al, al
		jnz	short loc_64213FBA
		movzx	eax, byte ptr [ecx]
		movzx	eax, byte ptr [edx+eax+4Ch]
		sub	eax, 9
		cmp	eax, 15h
		ja	short loc_64213FD7

loc_64213F6A:				; CODE XREF: _little2_scanLit+106j
		mov	eax, ds:_CSWTCH_454[eax*4]
		jmp	short loc_64213F14
; ---------------------------------------------------------------------------

loc_64213F73:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_scanLit:loc_64213F25j
					; DATA XREF: ...
		mov	ebx, esi	; jumptable 64213D8E case 152
					; jumptable 64213F25 case 7
		sub	ebx, ecx
		cmp	ebx, 3
		jle	short loc_64213FA2
		add	ecx, 4
		jmp	loc_64213EE5
; ---------------------------------------------------------------------------

loc_64213F84:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_scanLit:loc_64213F25j
					; DATA XREF: ...
		mov	ebx, esi	; jumptable 64213D8E case 151
					; jumptable 64213F25 case 6
		sub	ebx, ecx
		cmp	ebx, 2
		jle	short loc_64213FA2
		add	ecx, 3
		jmp	loc_64213EE5
; ---------------------------------------------------------------------------

loc_64213F95:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_scanLit:loc_64213F25j
					; DATA XREF: ...
		mov	ebx, esi	; jumptable 64213D8E case 150
					; jumptable 64213F25 case 5
		sub	ebx, ecx
		cmp	ebx, 1
		jg	loc_64213EE2	; jumptable 64213555 cases 251-255
					; jumptable 64213D8E cases 113-143,147-149,154-156

loc_64213FA2:				; CODE XREF: _little2_scanLit+BAj
					; _little2_scanLit+CBj
		mov	eax, 0FFFFFFFEh
		jmp	loc_64213F14
; ---------------------------------------------------------------------------
		align 10h

loc_64213FB0:				; CODE XREF: _little2_scanLit+10j
					; _little2_scanLit+27j
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64213FBA:				; CODE XREF: _little2_scanLit+98j
		cmp	al, 0D8h
		movzx	edx, byte ptr [ecx]
		jnb	short loc_64213FC8

loc_64213FC1:				; CODE XREF: _little2_scanLit+110j
					; _little2_scanLit+115j
		mov	eax, 14h
		jmp	short loc_64213F6A
; ---------------------------------------------------------------------------

loc_64213FC8:				; CODE XREF: _little2_scanLit+FFj
		cmp	al, 0DFh
		jbe	short loc_64213FD7
		cmp	al, 0FFh
		xchg	ax, ax
		jnz	short loc_64213FC1
		cmp	dl, 0FEh
		jb	short loc_64213FC1

loc_64213FD7:				; CODE XREF: _little2_scanLit+A8j
					; _little2_scanLit+10Aj
		xor	eax, eax
		jmp	loc_64213F14
_little2_scanLit endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_attributeValueTok proc	near	; DATA XREF: .rdata:642232F0o
					; .rdata:64223610o ...

var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 18h
		mov	eax, 0FFFFFFFCh
		mov	ecx, [esp+18h+arg_4]
		mov	[esp+18h+var_C], esi
		mov	esi, [esp+18h+arg_8]
		mov	[esp+18h+var_10], ebx
		mov	ebx, [esp+18h+arg_0]
		mov	[esp+18h+var_4], ebp
		mov	ebp, [esp+18h+arg_C]
		mov	[esp+18h+var_8], edi
		mov	edx, ecx
		cmp	ecx, esi
		jz	short loc_64214035
		mov	[esp+18h+var_18], ecx

loc_64214011:				; CODE XREF: _little2_attributeValueTok+4Bj
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	short loc_64214050
		movzx	eax, byte ptr [edx]
		movzx	edi, byte ptr [ebx+eax+4Ch]
		cmp	edi, 15h	; switch 22 cases
		jbe	short loc_64214070

loc_64214026:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_attributeValueTok+79j ...
		add	edx, 2		; jumptable 64213D8E cases 159,160,163,164,167,170-179

loc_64214029:				; CODE XREF: _little2_attributeValueTok+9Aj
					; _little2_attributeValueTok+A3j
		cmp	esi, edx
		jnz	short loc_64214011
		mov	[ebp+0], esi
		mov	eax, 6

loc_64214035:				; CODE XREF: _little2_attributeValueTok+2Cj
					; _little2_attributeValueTok+B4j ...
		mov	ebx, [esp+18h+var_10]
		mov	esi, [esp+18h+var_C]
		mov	edi, [esp+18h+var_8]
		mov	ebp, [esp+18h+var_4]
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64214050:				; CODE XREF: _little2_attributeValueTok+37j
		movzx	ecx, byte ptr [edx]
		cmp	al, 0D8h
		mov	[esp+18h+var_11], cl
		jb	short loc_64214026 ; jumptable 64213D8E	cases 159,160,163,164,167,170-179
		cmp	al, 0DBh
		mov	edi, 7
		jbe	short loc_64214070
		cmp	al, 0FFh
		jnz	short loc_64214026 ; jumptable 64213D8E	cases 159,160,163,164,167,170-179
		cmp	cl, 0FEh
		jb	short loc_64214026 ; jumptable 64213D8E	cases 159,160,163,164,167,170-179
		xor	di, di

loc_64214070:				; CODE XREF: _little2_attributeValueTok+44j
					; _little2_attributeValueTok+82j
		jmp	ds:off_6421FEE4[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64214077:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_attributeValueTok:loc_64214070j
					; DATA XREF: ...
		add	edx, 3		; jumptable 64213D8E case 165
					; jumptable 64214070 case 6
		jmp	short loc_64214029
; ---------------------------------------------------------------------------
		align 10h

loc_64214080:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_attributeValueTok:loc_64214070j
					; DATA XREF: ...
		add	edx, 4		; jumptable 64213D8E case 166
					; jumptable 64214070 case 7
		jmp	short loc_64214029
; ---------------------------------------------------------------------------

loc_64214085:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_attributeValueTok:loc_64214070j
					; DATA XREF: ...
		mov	ecx, [esp+18h+var_18] ;	jumptable 64213D8E case	168
					; jumptable 64214070 case 9
		cmp	edx, ecx
		jz	short loc_64214101

loc_6421408C:				; CODE XREF: _little2_attributeValueTok+BBj
					; _little2_attributeValueTok+D5j ...
		mov	[ebp+0], edx
		mov	eax, 6
		jmp	short loc_64214035
; ---------------------------------------------------------------------------

loc_64214096:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_attributeValueTok:loc_64214070j
					; DATA XREF: ...
		mov	ecx, [esp+18h+var_18] ;	jumptable 64213D8E case	169
					; jumptable 64214070 case 10
		cmp	edx, ecx
		jnz	short loc_6421408C
		add	edx, 2
		mov	eax, 7
		mov	[ebp+0], edx
		jmp	short loc_64214035
; ---------------------------------------------------------------------------
		align 10h

loc_642140B0:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_attributeValueTok:loc_64214070j
					; DATA XREF: ...
		mov	ecx, [esp+18h+var_18] ;	jumptable 64213D8E case	162
					; jumptable 64214070 case 3
		cmp	edx, ecx
		jnz	short loc_6421408C
		mov	[esp+18h+arg_0], ebp
		mov	ecx, esi
		mov	eax, ebx
		mov	esi, [esp+18h+var_C]
		add	edx, 2
		mov	ebx, [esp+18h+var_10]
		mov	edi, [esp+18h+var_8]
		mov	ebp, [esp+18h+var_4]
		add	esp, 18h
		jmp	_little2_scanRef
; ---------------------------------------------------------------------------
		align 10h

loc_642140E0:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_attributeValueTok:loc_64214070j
					; DATA XREF: ...
		mov	ecx, [esp+18h+var_18] ;	jumptable 64213D8E case	180
					; jumptable 64214070 case 21
		cmp	edx, ecx
		jnz	short loc_6421408C
		add	edx, 2
		mov	eax, 27h
		mov	[ebp+0], edx
		jmp	loc_64214035
; ---------------------------------------------------------------------------

loc_642140F7:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_attributeValueTok:loc_64214070j
					; DATA XREF: ...
		mov	[ebp+0], edx	; jumptable 64213D8E case 161
					; jumptable 64214070 case 2
		xor	eax, eax
		jmp	loc_64214035
; ---------------------------------------------------------------------------

loc_64214101:				; CODE XREF: _little2_attributeValueTok+AAj
		lea	ecx, [edx+2]
		mov	eax, 0FFFFFFFDh
		cmp	ecx, esi
		jz	loc_64214035
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_64214124
		movzx	eax, byte ptr [ecx]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		jnz	short loc_64214124
		lea	ecx, [edx+4]

loc_64214124:				; CODE XREF: _little2_attributeValueTok+135j
					; _little2_attributeValueTok+13Fj
		mov	[ebp+0], ecx
		mov	eax, 7
		jmp	loc_64214035
_little2_attributeValueTok endp

; ---------------------------------------------------------------------------
		jmp	short _little2_entityValueTok
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_entityValueTok	proc near	; CODE XREF: .text:64214131j
					; DATA XREF: .rdata:642232F4o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	eax, 0FFFFFFFCh
		mov	[esp+1Ch+var_C], esi
		mov	ecx, [esp+1Ch+arg_8]
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_10], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_8], edi
		cmp	esi, ecx
		mov	edx, esi
		jz	short loc_642141A0
		mov	[esp+1Ch+var_18], ecx

loc_64214172:				; CODE XREF: _little2_entityValueTok+51j
					; _little2_entityValueTok+FBj ...
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	short loc_642141B4
		movzx	eax, byte ptr [edx]
		movzx	edi, byte ptr [ebx+eax+4Ch]

loc_64214182:				; CODE XREF: _little2_entityValueTok+86j
		sub	edi, 3
		cmp	edi, 1Bh	; switch 28 cases
		jbe	short loc_642141E0

loc_6421418A:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_entityValueTok+7Dj ...
		add	edx, 2		; jumptable 64213D8E cases 182,183,186,189-207
		cmp	[esp+1Ch+var_18], edx
		jnz	short loc_64214172

loc_64214193:				; CODE XREF: _little2_entityValueTok+101j
					; _little2_entityValueTok+113j
		mov	ecx, [esp+1Ch+var_18]
		mov	eax, 6
		mov	[ebp+0], ecx
		nop

loc_642141A0:				; CODE XREF: _little2_entityValueTok+2Cj
					; _little2_entityValueTok+B7j ...
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_642141B4:				; CODE XREF: _little2_entityValueTok+38j
		movzx	ecx, byte ptr [edx]
		cmp	al, 0D8h
		mov	[esp+1Ch+var_11], cl
		jb	short loc_6421418A ; jumptable 64213D8E	cases 182,183,186,189-207
		cmp	al, 0DBh
		mov	edi, 7
		jbe	short loc_64214182
		cmp	al, 0FFh
		jnz	short loc_6421418A ; jumptable 64213D8E	cases 182,183,186,189-207
		cmp	cl, 0FEh
		nop
		jb	short loc_6421418A ; jumptable 64213D8E	cases 182,183,186,189-207
		xor	di, di
		sub	edi, 3
		cmp	edi, 1Bh
		ja	short loc_6421418A ; jumptable 64213D8E	cases 182,183,186,189-207
		lea	esi, [esi+0]

loc_642141E0:				; CODE XREF: _little2_entityValueTok+48j
		jmp	ds:off_6421FF3C[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642141E7:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_entityValueTok:loc_642141E0j
					; DATA XREF: ...
		cmp	edx, esi	; jumptable 64213D8E case 188
					; jumptable 642141E0 case 7
		jz	loc_642142B0

loc_642141EF:				; CODE XREF: _little2_entityValueTok+C6j
					; _little2_entityValueTok+11Ej	...
		mov	[ebp+0], edx
		mov	eax, 6
		jmp	short loc_642141A0
; ---------------------------------------------------------------------------
		align 10h

loc_64214200:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_entityValueTok:loc_642141E0j
					; DATA XREF: ...
		cmp	edx, esi	; jumptable 64213D8E case 187
					; jumptable 642141E0 case 6
		mov	ecx, [esp+1Ch+var_18]
		jnz	short loc_642141EF
		lea	esi, [edx+2]
		mov	eax, 0FFFFFFFDh
		cmp	esi, ecx
		jz	short loc_642141A0
		cmp	byte ptr [esi+1], 0
		jnz	short loc_64214227
		movzx	eax, byte ptr [esi]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		jnz	short loc_64214227
		lea	esi, [edx+4]

loc_64214227:				; CODE XREF: _little2_entityValueTok+D8j
					; _little2_entityValueTok+E2j
		mov	[ebp+0], esi
		mov	eax, 7
		jmp	loc_642141A0
; ---------------------------------------------------------------------------

loc_64214234:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_entityValueTok:loc_642141E0j
					; DATA XREF: ...
		add	edx, 4		; jumptable 64213D8E case 185
					; jumptable 642141E0 case 4
		cmp	[esp+1Ch+var_18], edx
		jnz	loc_64214172
		jmp	loc_64214193
; ---------------------------------------------------------------------------

loc_64214246:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_entityValueTok:loc_642141E0j
					; DATA XREF: ...
		add	edx, 3		; jumptable 64213D8E case 184
					; jumptable 642141E0 case 3
		cmp	[esp+1Ch+var_18], edx
		jnz	loc_64214172
		jmp	loc_64214193
; ---------------------------------------------------------------------------

loc_64214258:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_entityValueTok:loc_642141E0j
					; DATA XREF: ...
		cmp	edx, esi	; jumptable 64213D8E case 208
					; jumptable 642141E0 case 27
		mov	ecx, [esp+1Ch+var_18]
		jnz	short loc_642141EF
		add	edx, 2
		mov	eax, ebx
		mov	[esp+1Ch+var_1C], ebp
		call	_little2_scanPercent
		xor	edx, edx
		cmp	eax, 16h
		setz	dl
		sub	edx, 1
		and	eax, edx
		jmp	loc_642141A0
; ---------------------------------------------------------------------------
		align 10h

loc_64214280:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_entityValueTok:loc_642141E0j
					; DATA XREF: ...
		cmp	edx, esi	; jumptable 64213D8E case 181
					; jumptable 642141E0 case 0
		mov	ecx, [esp+1Ch+var_18]
		jnz	loc_642141EF
		mov	[esp+1Ch+arg_0], ebp
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_C]
		mov	ebx, [esp+1Ch+var_10]
		add	edx, 2
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_little2_scanRef
; ---------------------------------------------------------------------------
		align 10h

loc_642142B0:				; CODE XREF: _little2_entityValueTok+A9j
		add	edx, 2
		mov	eax, 7
		mov	[ebp+0], edx
		jmp	loc_642141A0
_little2_entityValueTok	endp


; =============== S U B	R O U T	I N E =======================================


_little2_ignoreSectionTok proc near	; DATA XREF: .rdata:642232ECo
					; .rdata:6422360Co ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		mov	eax, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_0]
		mov	edi, [esp+10h+arg_C]
		mov	edx, ebx
		sub	edx, eax
		test	dl, 1
		jz	short loc_642142E5
		mov	ebx, edx
		and	ebx, 0FFFFFFFEh
		lea	ebx, [eax+ebx]

loc_642142E5:				; CODE XREF: _little2_ignoreSectionTok+1Bj
		cmp	eax, ebx
		jz	loc_64214430
		movzx	edx, byte ptr [eax+1]
		xor	ebp, ebp
		movzx	ecx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_64214323
		lea	esi, [esi+0]

loc_64214300:				; CODE XREF: _little2_ignoreSectionTok+61j
					; _little2_ignoreSectionTok+EDj ...
		movzx	ecx, cl
		movzx	edx, byte ptr [esi+ecx+4Ch]
		cmp	edx, 8		; switch 9 cases
		jbe	short loc_64214345

loc_6421430D:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_ignoreSectionTok+69j ...
		add	eax, 2		; jumptable 64213D8E cases 217-247,252

loc_64214310:				; CODE XREF: _little2_ignoreSectionTok+ACj
					; _little2_ignoreSectionTok+BCj ...
		cmp	ebx, eax
		jz	loc_64214430
		movzx	edx, byte ptr [eax+1]

loc_6421431C:				; CODE XREF: _little2_ignoreSectionTok+E1j
					; _little2_ignoreSectionTok+100j ...
		test	dl, dl
		movzx	ecx, byte ptr [eax]
		jz	short loc_64214300

loc_64214323:				; CODE XREF: _little2_ignoreSectionTok+38j
		add	edx, 28h
		cmp	dl, 27h		; switch 40 cases
		ja	short loc_6421430D ; jumptable 64213D8E	cases 217-247,252
		movzx	edx, dl
		jmp	ds:off_6421FFAC[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64214335:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_ignoreSectionTok+6Ej ...
		mov	[edi], eax	; jumptable 64213D8E cases 213-216,249,250
					; jumptable 6421432E cases 4-7
					; jumptable 64214345 cases 0,1,8
		xor	eax, eax

loc_64214339:				; CODE XREF: _little2_ignoreSectionTok+CEj
					; _little2_ignoreSectionTok+181j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64214340:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_ignoreSectionTok+6Ej
					; DATA XREF: ...
		mov	edx, 7		; jumptable 64213D8E cases 209-212
					; jumptable 6421432E cases 0-3

loc_64214345:				; CODE XREF: _little2_ignoreSectionTok+4Bj
					; _little2_ignoreSectionTok+97j
		jmp	ds:off_6422004C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64214350:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_ignoreSectionTok+6Ej
					; DATA XREF: ...
		cmp	cl, 0FEh	; jumptable 64213D8E case 248
					; jumptable 6421432E case 39
		jb	short loc_6421430D ; jumptable 64213D8E	cases 217-247,252
		xor	edx, edx
		jmp	short loc_64214345
; ---------------------------------------------------------------------------
		align 10h

loc_64214360:				; CODE XREF: _little2_ignoreSectionTok:loc_64214345j
					; DATA XREF: .rdata:off_6422004Co
		mov	edx, ebx	; jumptable 64214345 case 7
		sub	edx, eax
		cmp	edx, 3
		jle	short loc_64214389
		add	eax, 4
		jmp	short loc_64214310
; ---------------------------------------------------------------------------
		align 10h

loc_64214370:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_ignoreSectionTok:loc_64214345j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 64213D8E case 255
					; jumptable 64214345 case 6
		sub	edx, eax
		cmp	edx, 2
		jle	short loc_64214389
		add	eax, 3
		jmp	short loc_64214310
; ---------------------------------------------------------------------------
		align 10h

loc_64214380:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_ignoreSectionTok:loc_64214345j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 64213D8E case 254
					; jumptable 64214345 case 5
		sub	edx, eax
		cmp	edx, 1
		jg	short loc_6421430D ; jumptable 64213D8E	cases 217-247,252

loc_64214389:				; CODE XREF: _little2_ignoreSectionTok+A7j
					; _little2_ignoreSectionTok+B7j
		mov	eax, 0FFFFFFFEh
		jmp	short loc_64214339
; ---------------------------------------------------------------------------

loc_64214390:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_ignoreSectionTok:loc_64214345j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64213D8E case 253
					; jumptable 64214345 case 4
		cmp	eax, ebx
		jz	loc_64214430
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_6421431C
		movzx	ecx, byte ptr [eax]
		cmp	cl, 5Dh
		jnz	loc_64214300
		add	eax, 2
		cmp	ebx, eax
		jz	short loc_64214430
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_6421431C
		movzx	ecx, byte ptr [eax]
		cmp	cl, 3Eh
		jnz	loc_64214300
		add	eax, 2
		test	ebp, ebp
		jz	short loc_6421443A
		sub	ebp, 1
		jmp	loc_64214310
; ---------------------------------------------------------------------------

loc_642143E1:				; CODE XREF: _little2_scanPercent+9Ej
					; _little2_ignoreSectionTok:loc_64214345j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64213D8E case 251
					; jumptable 64214345 case 2
		cmp	eax, ebx
		jz	short loc_64214430
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_6421431C
		movzx	ecx, byte ptr [eax]
		cmp	cl, 21h
		jnz	loc_64214300
		add	eax, 2
		cmp	eax, ebx
		jz	short loc_64214430
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_6421431C
		movzx	ecx, byte ptr [eax]
		cmp	cl, 5Bh
		jnz	loc_64214300
		add	ebp, 1
		add	eax, 2
		jmp	loc_64214310
; ---------------------------------------------------------------------------
		align 10h

loc_64214430:				; CODE XREF: _little2_ignoreSectionTok+27j
					; _little2_ignoreSectionTok+52j ...
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6421443A:				; CODE XREF: _little2_ignoreSectionTok+117j
		mov	[edi], eax
		mov	eax, 2Ah
		jmp	loc_64214339
_little2_ignoreSectionTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_isPublicId proc near		; DATA XREF: .rdata:64223318o
					; .rdata:64223638o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	eax, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	ebp, [esp+10h+arg_0]
		add	eax, 2
		sub	edi, 2
		cmp	eax, edi
		jz	short loc_642144D9
		lea	esi, [esi+0]

loc_64214470:				; CODE XREF: _little2_isPublicId+87j
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	short loc_64214491
		movzx	ebx, byte ptr [eax]
		movzx	ecx, bl
		movzx	ecx, byte ptr [ebp+ecx+4Ch]

loc_64214483:				; CODE XREF: _little2_isPublicId+9Bj
					; _little2_isPublicId+A9j
		sub	ecx, 9
		cmp	ecx, 1Ah
		jbe	short loc_642144A6

loc_6421448B:				; CODE XREF: _little2_isPublicId+73j
		test	dl, dl
		jz	short loc_6421450C
		jmp	short loc_64214499
; ---------------------------------------------------------------------------

loc_64214491:				; CODE XREF: _little2_isPublicId+26j
		cmp	dl, 0DCh
		movzx	ebx, byte ptr [eax]
		jnb	short loc_642144E3

loc_64214499:				; CODE XREF: _little2_isPublicId+3Fj
					; _little2_isPublicId+80j ...
		mov	edx, [esp+10h+arg_C]
		mov	[edx], eax
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642144A6:				; CODE XREF: _little2_isPublicId+39j
		mov	esi, 1
		shl	esi, cl
		test	esi, 7E5C7F3h
		jnz	short loc_642144D2
		test	esi, 22000h
		jnz	short loc_64214500
		and	esi, 1000h
		jz	short loc_6421448B
		test	dl, dl
		jnz	short loc_642144D2
		cmp	bl, 9
		lea	esi, [esi+0]
		jz	short loc_64214499

loc_642144D2:				; CODE XREF: _little2_isPublicId+63j
					; _little2_isPublicId+77j ...
		add	eax, 2
		cmp	edi, eax
		jnz	short loc_64214470

loc_642144D9:				; CODE XREF: _little2_isPublicId+18j
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642144E3:				; CODE XREF: _little2_isPublicId+47j
		cmp	dl, 0DFh
		mov	ecx, 8
		jbe	short loc_64214483
		cmp	dl, 0FFh
		jnz	short loc_64214499
		cmp	bl, 0FEh
		jb	short loc_64214499
		xor	cl, cl
		jmp	short loc_64214483
; ---------------------------------------------------------------------------
		align 10h

loc_64214500:				; CODE XREF: _little2_isPublicId+6Bj
		test	dl, dl
		jnz	short loc_64214499
		movsx	edx, bl
		and	edx, 0FFFFFF80h
		jz	short loc_642144D2

loc_6421450C:				; CODE XREF: _little2_isPublicId+3Dj
		cmp	bl, 24h
		nop
		jz	short loc_642144D2
		cmp	bl, 40h
		jnz	short loc_64214499
		jmp	short loc_642144D2
_little2_isPublicId endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_getAtts proc near		; DATA XREF: .rdata:64223308o
					; .rdata:64223628o ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		xor	ebp, ebp
		push	edi
		push	esi
		mov	esi, 1
		push	ebx
		sub	esp, 8
		mov	eax, [esp+18h+arg_4]
		lea	edx, [eax+2]
		movzx	eax, byte ptr [eax+2]
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], ebp

loc_64214544:				; CODE XREF: _little2_getAtts+B1j
					; _little2_getAtts+FFj	...
		movzx	ecx, byte ptr [edx+1]
		lea	edi, [edx+1]
		test	cl, cl
		jnz	short loc_64214591

loc_6421454F:				; CODE XREF: _little2_getAtts+6Fj
		mov	ebp, [esp+18h+arg_0]
		movzx	ebx, al
		movzx	ebx, byte ptr [ebp+ebx+4Ch]

loc_6421455B:				; CODE XREF: _little2_getAtts+25Cj
					; _little2_getAtts+266j
		sub	ebx, 3		; switch 27 cases
		cmp	ebx, 1Ah
		ja	short loc_64214580 ; jumptable 64214563	default	case
		jmp	ds:off_64220070[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64214570:				; CODE XREF: _little2_getAtts+43j
					; DATA XREF: .rdata:off_64220070o
		cmp	esi, 2		; jumptable 64214563 cases 11,17
		jnz	loc_64214765
		lea	esi, [esi+0]

loc_64214580:				; CODE XREF: _little2_getAtts+41j
					; _little2_getAtts+43j	...
		add	edx, 2		; jumptable 64214563 default case
		movzx	eax, byte ptr [edx]

loc_64214586:				; CODE XREF: _little2_getAtts+240j
					; _little2_getAtts+310j
		movzx	ecx, byte ptr [edx+1]
		lea	edi, [edx+1]
		test	cl, cl
		jz	short loc_6421454F

loc_64214591:				; CODE XREF: _little2_getAtts+2Dj
		lea	ebx, [ecx+28h]
		cmp	bl, 27h		; switch 40 cases
		ja	short loc_642145A3 ; jumptable 64214563	cases 22,24,29
		movzx	ebx, bl
		jmp	ds:off_642200DC[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642145A3:				; CODE XREF: _little2_getAtts+43j
					; _little2_getAtts+77j	...
		test	esi, esi	; jumptable 64214563 cases 22,24,29
		jnz	short loc_64214580 ; jumptable 64214563	default	case
		mov	esi, [esp+18h+arg_8]
		cmp	[esp+18h+var_18], esi
		xchg	ax, ax
		jge	loc_64214741
		mov	eax, [esp+18h+var_18]
		mov	esi, 1
		shl	eax, 4
		add	eax, [esp+18h+arg_C]
		mov	[eax], edx
		add	edx, 2
		mov	byte ptr [eax+0Ch], 1
		movzx	eax, byte ptr [edx]
		jmp	loc_64214544
; ---------------------------------------------------------------------------

loc_642145D6:				; CODE XREF: _little2_getAtts+43j
					; DATA XREF: .rdata:off_64220070o
		cmp	esi, 1		; jumptable 64214563 case 21
		jz	loc_64214790
		mov	ebx, [esp+18h+arg_8]
		cmp	[esp+18h+var_18], ebx
		jge	short loc_64214580 ; jumptable 64214563	default	case
		cmp	esi, 2
		jnz	short loc_64214580 ; jumptable 64214563	default	case
		mov	ebx, [esp+18h+var_18]
		shl	ebx, 4
		add	ebx, [esp+18h+arg_C]
		cmp	byte ptr [ebx+0Ch], 0
		jz	short loc_64214580 ; jumptable 64214563	default	case
		cmp	[ebx+4], edx
		jz	short loc_6421460E
		test	cl, cl
		jnz	short loc_6421460E
		cmp	al, 20h
		jz	loc_64214835

loc_6421460E:				; CODE XREF: _little2_getAtts+E0j
					; _little2_getAtts+E4j
		lea	ecx, [edx+2]

loc_64214611:				; CODE XREF: _little2_getAtts+326j
					; _little2_getAtts+349j
		mov	byte ptr [ebx+0Ch], 0
		mov	edx, ecx
		movzx	eax, byte ptr [ecx]
		mov	esi, 2
		jmp	loc_64214544
; ---------------------------------------------------------------------------

loc_64214624:				; CODE XREF: _little2_getAtts+43j
					; DATA XREF: .rdata:off_64220070o
		cmp	esi, 2		; jumptable 64214563 case 13
		jz	loc_642147F0
		mov	ebp, [esp+18h+arg_8]
		cmp	[esp+18h+var_18], ebp
		jl	loc_642147A0
		add	edx, 2
		mov	esi, 2
		movzx	eax, byte ptr [edx]
		mov	[esp+18h+var_14], 0Dh
		jmp	loc_64214544
; ---------------------------------------------------------------------------

loc_64214652:				; CODE XREF: _little2_getAtts+43j
					; DATA XREF: .rdata:off_64220070o
		cmp	esi, 2		; jumptable 64214563 case 12
		jz	loc_64214823
		mov	ebp, [esp+18h+arg_8]
		cmp	[esp+18h+var_18], ebp
		jl	loc_642147C6
		add	edx, 2
		mov	esi, 2
		movzx	eax, byte ptr [edx]
		mov	[esp+18h+var_14], 0Ch
		jmp	loc_64214544
; ---------------------------------------------------------------------------

loc_64214680:				; CODE XREF: _little2_getAtts+43j
					; _little2_getAtts+7Cj
					; DATA XREF: ...
		test	esi, esi	; jumptable 64214563 case 7
					; jumptable 6421459C cases 0-3
		jnz	short loc_642146A1
		mov	ebx, [esp+18h+arg_8]
		mov	si, 1
		cmp	[esp+18h+var_18], ebx
		jge	short loc_642146A1
		mov	eax, [esp+18h+var_18]
		shl	eax, 4
		add	eax, [esp+18h+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_642146A1:				; CODE XREF: _little2_getAtts+162j
					; _little2_getAtts+16Fj
		add	edx, 4
		movzx	eax, byte ptr [edx]
		jmp	loc_64214544
; ---------------------------------------------------------------------------
		align 10h

loc_642146B0:				; CODE XREF: _little2_getAtts+43j
					; DATA XREF: .rdata:off_64220070o
		test	esi, esi	; jumptable 64214563 case 6
		jnz	short loc_642146D1
		mov	ecx, [esp+18h+arg_8]
		mov	si, 1
		cmp	[esp+18h+var_18], ecx
		jge	short loc_642146D1
		mov	eax, [esp+18h+var_18]
		shl	eax, 4
		add	eax, [esp+18h+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_642146D1:				; CODE XREF: _little2_getAtts+192j
					; _little2_getAtts+19Fj
		lea	edx, [edi+2]
		movzx	eax, byte ptr [edi+2]
		jmp	loc_64214544
; ---------------------------------------------------------------------------
		align 10h

loc_642146E0:				; CODE XREF: _little2_getAtts+43j
					; DATA XREF: .rdata:off_64220070o
		cmp	esi, 1		; jumptable 64214563 cases 9,10
		jz	loc_64214790
		mov	ebp, [esp+18h+arg_8]
		cmp	[esp+18h+var_18], ebp
		jge	loc_64214580	; jumptable 64214563 default case
		cmp	esi, 2
		jnz	loc_64214580	; jumptable 64214563 default case

loc_642146FF:				; CODE XREF: _little2_getAtts+238j
		mov	eax, [esp+18h+var_18]
		add	edx, 2
		mov	ecx, [esp+18h+arg_C]
		shl	eax, 4
		mov	byte ptr [eax+ecx+0Ch],	0
		movzx	eax, byte ptr [edx]
		jmp	loc_64214544
; ---------------------------------------------------------------------------
		align 10h

loc_64214720:				; CODE XREF: _little2_getAtts+43j
					; DATA XREF: .rdata:off_64220070o
		test	esi, esi	; jumptable 64214563 case 5
		jnz	loc_64214580	; jumptable 64214563 default case
		mov	eax, [esp+18h+arg_8]
		cmp	[esp+18h+var_18], eax
		jge	short loc_64214741
		mov	eax, [esp+18h+var_18]
		shl	eax, 4
		add	eax, [esp+18h+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_64214741:				; CODE XREF: _little2_getAtts+90j
					; _little2_getAtts+20Fj
		add	edx, 2
		mov	esi, 1
		movzx	eax, byte ptr [edx]
		jmp	loc_64214544
; ---------------------------------------------------------------------------

loc_64214751:				; CODE XREF: _little2_getAtts+43j
					; DATA XREF: .rdata:off_64220070o
		mov	ebp, [esp+18h+arg_8] ; jumptable 64214563 case 3
		cmp	[esp+18h+var_18], ebp
		jl	short loc_642146FF
		add	edx, 2
		movzx	eax, byte ptr [edx]
		jmp	loc_64214586
; ---------------------------------------------------------------------------

loc_64214765:				; CODE XREF: _little2_getAtts+53j
		mov	ebp, [esp+18h+var_18]
		add	esp, 8
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64214772:				; CODE XREF: _little2_getAtts+7Cj
					; DATA XREF: .rdata:off_642200DCo
		cmp	al, 0FEh	; jumptable 6421459C case 39
		jb	loc_642145A3	; jumptable 64214563 cases 22,24,29
		xor	ebx, ebx
		jmp	loc_6421455B
; ---------------------------------------------------------------------------

loc_64214781:				; CODE XREF: _little2_getAtts+7Cj
					; DATA XREF: .rdata:off_642200DCo
		mov	ebx, 8		; jumptable 6421459C cases 4-7
		jmp	loc_6421455B
; ---------------------------------------------------------------------------
		align 10h

loc_64214790:				; CODE XREF: _little2_getAtts+B9j
					; _little2_getAtts+1C3j
		add	edx, 2
		xor	si, si
		movzx	eax, byte ptr [edx]
		jmp	loc_64214544
; ---------------------------------------------------------------------------
		align 10h

loc_642147A0:				; CODE XREF: _little2_getAtts+114j
		mov	eax, [esp+18h+var_18]
		add	edx, 2
		mov	esi, 2
		mov	ecx, [esp+18h+arg_C]
		shl	eax, 4
		mov	[eax+ecx+4], edx
		movzx	eax, byte ptr [edx]
		mov	[esp+18h+var_14], 0Dh
		jmp	loc_64214544
; ---------------------------------------------------------------------------

loc_642147C6:				; CODE XREF: _little2_getAtts+142j
		mov	eax, [esp+18h+var_18]
		add	edx, 2
		mov	esi, 2
		mov	ecx, [esp+18h+arg_C]
		shl	eax, 4
		mov	[eax+ecx+4], edx
		movzx	eax, byte ptr [edx]
		mov	[esp+18h+var_14], 0Ch
		jmp	loc_64214544
; ---------------------------------------------------------------------------
		align 10h

loc_642147F0:				; CODE XREF: _little2_getAtts+107j
		cmp	[esp+18h+var_14], 0Dh
		jnz	loc_64214580	; jumptable 64214563 default case

loc_642147FB:				; CODE XREF: _little2_getAtts+308j
		mov	ebx, [esp+18h+arg_8]
		cmp	[esp+18h+var_18], ebx
		jge	short loc_64214812
		mov	eax, [esp+18h+var_18]
		mov	esi, [esp+18h+arg_C]
		shl	eax, 4
		mov	[eax+esi+8], edx

loc_64214812:				; CODE XREF: _little2_getAtts+2E2j
		add	[esp+18h+var_18], 1
		add	edx, 2
		movzx	eax, byte ptr [edx]
		xor	esi, esi
		jmp	loc_64214544
; ---------------------------------------------------------------------------

loc_64214823:				; CODE XREF: _little2_getAtts+135j
		cmp	[esp+18h+var_14], 0Ch
		jz	short loc_642147FB
		add	edx, 2
		movzx	eax, byte ptr [edx]
		jmp	loc_64214586
; ---------------------------------------------------------------------------

loc_64214835:				; CODE XREF: _little2_getAtts+E8j
		movzx	ecx, byte ptr [edx+3]
		test	cl, cl
		jnz	short loc_6421486E
		movzx	eax, byte ptr [edx+2]
		lea	ecx, [edx+2]
		cmp	al, 20h
		jz	loc_64214611
		mov	esi, [esp+18h+arg_0]
		movzx	edx, al
		movzx	edi, byte ptr [esi+edx+4Ch]

loc_64214858:				; CODE XREF: _little2_getAtts+36Aj
					; _little2_getAtts+37Aj ...
		cmp	edi, [esp+18h+var_14]
		mov	edx, ecx
		mov	esi, 2
		jnz	loc_64214544
		jmp	loc_64214611
; ---------------------------------------------------------------------------

loc_6421486E:				; CODE XREF: _little2_getAtts+31Bj
		cmp	cl, 0DFh
		movzx	eax, byte ptr [edx+2]
		ja	short loc_6421488C
		cmp	cl, 0DCh
		jnb	short loc_6421489C
		cmp	cl, 0D8h
		nop
		jb	short loc_64214892
		mov	edi, 7
		lea	ecx, [edx+2]
		jmp	short loc_64214858
; ---------------------------------------------------------------------------

loc_6421488C:				; CODE XREF: _little2_getAtts+355j
		cmp	cl, 0FFh
		nop
		jz	short loc_642148A6

loc_64214892:				; CODE XREF: _little2_getAtts+360j
					; _little2_getAtts+388j
		mov	edi, 1Dh
		lea	ecx, [edx+2]
		jmp	short loc_64214858
; ---------------------------------------------------------------------------

loc_6421489C:				; CODE XREF: _little2_getAtts+35Aj
		mov	edi, 8
		lea	ecx, [edx+2]
		jmp	short loc_64214858
; ---------------------------------------------------------------------------

loc_642148A6:				; CODE XREF: _little2_getAtts+370j
		cmp	al, 0FEh
		jb	short loc_64214892
		xor	edi, edi
		lea	ecx, [edx+2]
		jmp	short loc_64214858
_little2_getAtts endp

; ---------------------------------------------------------------------------
		jmp	short _little2_charRefNumber
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_charRefNumber proc near	; CODE XREF: .text:642148B1j
					; DATA XREF: .rdata:6422330Co ...

arg_4		= dword	ptr  8

		push	ebx
		mov	eax, [esp+4+arg_4]
		lea	edx, [eax+4]
		movzx	ebx, byte ptr [edx+1]
		test	bl, bl
		jnz	short loc_642148D6
		cmp	byte ptr [eax+4], 78h
		jz	short loc_64214947

loc_642148D6:				; CODE XREF: _little2_charRefNumber+Ej
		xor	eax, eax
		jmp	short loc_642148F8
; ---------------------------------------------------------------------------
		align 10h

loc_642148E0:				; CODE XREF: _little2_charRefNumber+47j
		movsx	ecx, cl

loc_642148E3:				; CODE XREF: _little2_charRefNumber+3Fj
		lea	eax, [eax+eax*4]
		lea	eax, [ecx+eax*2-30h]
		cmp	eax, 10FFFFh
		jg	short loc_64214940
		add	edx, 2
		movzx	ebx, byte ptr [edx+1]

loc_642148F8:				; CODE XREF: _little2_charRefNumber+18j
		test	bl, bl
		mov	ecx, 0FFFFFFFFh
		jnz	short loc_642148E3
		movzx	ecx, byte ptr [edx]
		cmp	cl, 3Bh
		jnz	short loc_642148E0

loc_64214909:				; CODE XREF: _little2_charRefNumber+9Cj
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 0DFh
		jle	short loc_64214921
		cmp	edx, 0FFh
		jz	short loc_64214999

loc_6421491E:				; CODE XREF: _little2_charRefNumber+70j
					; _little2_charRefNumber+79j
		pop	ebx
		nop
		retn
; ---------------------------------------------------------------------------

loc_64214921:				; CODE XREF: _little2_charRefNumber+54j
		cmp	edx, 0D8h
		jge	short loc_64214940
		test	edx, edx
		nop
		lea	esi, [esi+0]
		jnz	short loc_6421491E
		cmp	ds:byte_6422290C[eax], 0
		jnz	short loc_6421491E
		nop
		lea	esi, [esi+0]

loc_64214940:				; CODE XREF: _little2_charRefNumber+2Fj
					; _little2_charRefNumber+67j ...
		mov	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_64214947:				; CODE XREF: _little2_charRefNumber+14j
		lea	edx, [eax+6]
		xor	eax, eax
		lea	esi, [esi+0]

loc_64214950:				; CODE XREF: _little2_charRefNumber+C5j
		cmp	byte ptr [edx+1], 0
		jnz	short loc_6421497B ; jumptable 6421496C	default	case
		movzx	ecx, byte ptr [edx]
		cmp	cl, 3Bh
		jz	short loc_64214909
		movsx	ebx, cl
		sub	ecx, 30h
		cmp	cl, 36h		; switch 55 cases
		ja	short loc_6421497B ; jumptable 6421496C	default	case
		movzx	ecx, cl
		jmp	ds:off_6422017C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64214973:				; CODE XREF: _little2_charRefNumber+ACj
					; DATA XREF: .rdata:off_6422017Co
		shl	eax, 4		; jumptable 6421496C cases 0-9
		sub	ebx, 30h
		or	eax, ebx

loc_6421497B:				; CODE XREF: _little2_charRefNumber+94j
					; _little2_charRefNumber+A7j ...
		cmp	eax, 10FFFFh	; jumptable 6421496C default case
		jg	short loc_64214940
		add	edx, 2
		jmp	short loc_64214950
; ---------------------------------------------------------------------------

loc_64214987:				; CODE XREF: _little2_charRefNumber+ACj
					; DATA XREF: .rdata:off_6422017Co
		shl	eax, 4		; jumptable 6421496C cases 49-54
		lea	eax, [eax+ebx-57h]
		jmp	short loc_6421497B ; jumptable 6421496C	default	case
; ---------------------------------------------------------------------------

loc_64214990:				; CODE XREF: _little2_charRefNumber+ACj
					; DATA XREF: .rdata:off_6422017Co
		shl	eax, 4		; jumptable 6421496C cases 17-22
		lea	eax, [eax+ebx-37h]
		jmp	short loc_6421497B ; jumptable 6421496C	default	case
; ---------------------------------------------------------------------------

loc_64214999:				; CODE XREF: _little2_charRefNumber+5Cj
		lea	edx, [eax-0FFFEh]
		cmp	edx, 1
		jbe	short loc_64214940
		pop	ebx
		retn
_little2_charRefNumber endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_predefinedEntityName proc near	; DATA XREF: .rdata:64223310o
					; .rdata:64223630o ...

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_8]
		sub	eax, edx
		mov	ecx, eax
		shr	ecx, 1Fh
		lea	eax, [ecx+eax]
		sar	eax, 1
		cmp	eax, 3
		jz	short loc_64214A47
		cmp	eax, 4
		jz	short loc_64214A00
		cmp	eax, 2
		jz	short loc_642149D7

loc_642149D3:				; CODE XREF: _little2_predefinedEntityName+2Bj
					; _little2_predefinedEntityName+31j ...
		xor	eax, eax

locret_642149D5:			; CODE XREF: _little2_predefinedEntityName+41j
					; _little2_predefinedEntityName+91j ...
		rep retn
; ---------------------------------------------------------------------------

loc_642149D7:				; CODE XREF: _little2_predefinedEntityName+21j
		cmp	byte ptr [edx+3], 0
		jnz	short loc_642149D3
		cmp	byte ptr [edx+2], 74h
		jnz	short loc_642149D3
		cmp	byte ptr [edx+1], 0
		jnz	short loc_642149D3
		movzx	edx, byte ptr [edx]
		mov	al, 3Eh
		cmp	dl, 67h
		jz	short locret_642149D5
		cmp	dl, 6Ch
		mov	al, 3Ch
		jnz	short loc_642149D3
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_64214A00:				; CODE XREF: _little2_predefinedEntityName+1Cj
		cmp	byte ptr [edx+1], 0
		jnz	short loc_642149D3
		movzx	eax, byte ptr [edx]
		cmp	al, 61h
		jz	short loc_64214A86
		cmp	al, 71h
		nop
		jnz	short loc_642149D3
		cmp	byte ptr [edx+3], 0
		jnz	short loc_642149D3
		cmp	byte ptr [edx+2], 75h
		lea	esi, [esi+0]
		jnz	short loc_642149D3
		cmp	byte ptr [edx+5], 0
		jnz	short loc_642149D3
		cmp	byte ptr [edx+4], 6Fh
		lea	esi, [esi+0]
		jnz	short loc_642149D3
		cmp	byte ptr [edx+7], 0
		jnz	short loc_642149D3
		cmp	byte ptr [edx+6], 74h
		mov	eax, 22h
		jz	short locret_642149D5
		xor	eax, eax
		jmp	short locret_642149D5
; ---------------------------------------------------------------------------

loc_64214A47:				; CODE XREF: _little2_predefinedEntityName+17j
		cmp	byte ptr [edx+1], 0
		jnz	short loc_642149D3
		cmp	byte ptr [edx],	61h
		jnz	short loc_642149D3
		cmp	byte ptr [edx+3], 0
		jnz	loc_642149D3
		cmp	byte ptr [edx+2], 6Dh
		jnz	loc_642149D3
		cmp	byte ptr [edx+5], 0
		jnz	loc_642149D3
		cmp	byte ptr [edx+4], 70h
		mov	eax, 26h
		jz	locret_642149D5
		xor	eax, eax
		jmp	locret_642149D5
; ---------------------------------------------------------------------------

loc_64214A86:				; CODE XREF: _little2_predefinedEntityName+5Bj
		cmp	byte ptr [edx+3], 0
		jnz	loc_642149D3
		cmp	byte ptr [edx+2], 70h
		jnz	loc_642149D3
		cmp	byte ptr [edx+5], 0
		xchg	ax, ax
		jnz	loc_642149D3
		cmp	byte ptr [edx+4], 6Fh
		jnz	loc_642149D3
		cmp	byte ptr [edx+7], 0
		jnz	loc_642149D3
		cmp	byte ptr [edx+6], 73h
		mov	eax, 27h
		jz	locret_642149D5
		xor	eax, eax
		jmp	locret_642149D5
_little2_predefinedEntityName endp


; =============== S U B	R O U T	I N E =======================================


_little2_sameName proc near		; DATA XREF: .rdata:642232F8o
					; .rdata:64223618o ...

var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	edi, [esp+14h+arg_0]
		mov	edx, [esp+14h+arg_4]
		mov	eax, [esp+14h+arg_8]

loc_64214AE3:				; CODE XREF: _little2_sameName+8Cj
					; _little2_sameName+D9j
		lea	ecx, [edx+1]
		mov	[esp+14h+var_14], ecx
		movzx	ecx, byte ptr [edx+1]
		test	cl, cl
		jnz	short loc_64214B33
		movzx	edx, byte ptr [edx]
		movzx	ebp, dl
		mov	esi, edx
		movzx	ebp, byte ptr [edi+ebp+4Ch]

loc_64214AFE:				; CODE XREF: _little2_sameName+110j
					; _little2_sameName+11Aj
		sub	ebp, 5
		cmp	ebp, 18h	; switch 25 cases
		jbe	short loc_64214B60

loc_64214B06:				; CODE XREF: _little2_sameName:loc_64214B60j
					; DATA XREF: .rdata:off_64220258o
		movzx	edx, byte ptr [eax+1] ;	jumptable 64214B60 default case
		test	dl, dl
		jnz	loc_64214BF0
		movzx	eax, byte ptr [eax]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5
		cmp	eax, 18h
		jbe	loc_64214C00

loc_64214B26:				; CODE XREF: _little2_sameName+154j
		add	esp, 4
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64214B33:				; CODE XREF: _little2_sameName+1Fj
		movzx	edx, byte ptr [edx]
		lea	ebp, [ecx+28h]
		mov	ebx, ebp
		cmp	bl, 27h
		mov	esi, edx
		jbe	short loc_64214BC0

loc_64214B42:				; CODE XREF: _little2_sameName:loc_64214B60j
					; _little2_sameName+F6j ...
		cmp	[eax], dl	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		jnz	loc_64214C50
		cmp	cl, [eax+1]
		jnz	loc_64214C50
		mov	edx, [esp+14h+var_14]
		add	eax, 2
		add	edx, 1
		jmp	short loc_64214AE3
; ---------------------------------------------------------------------------
		align 10h

loc_64214B60:				; CODE XREF: _little2_sameName+34j
		jmp	ds:off_64220258[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64214B67:				; CODE XREF: _little2_sameName:loc_64214B60j
					; _little2_sameName+F6j
					; DATA XREF: ...
		cmp	[eax], dl	; jumptable 64214B60 case 2
					; jumptable 64214BC6 cases 0-3
		jnz	loc_64214C50
		add	[esp+14h+var_14], 1
		add	eax, 1

loc_64214B76:				; CODE XREF: _little2_sameName+E2j
		cmp	[eax], cl
		jnz	loc_64214C50
		mov	ecx, [esp+14h+var_14]
		add	eax, 1
		mov	edx, [esp+14h+var_14]
		movzx	esi, byte ptr [ecx]
		add	edx, 1

loc_64214B8D:				; CODE XREF: _little2_sameName+E7j
		mov	ebx, esi
		cmp	[eax], bl
		jnz	loc_64214C50
		movzx	ecx, byte ptr [edx]
		cmp	cl, [eax+1]
		jnz	loc_64214C50
		add	edx, 1
		add	eax, 2
		jmp	loc_64214AE3
; ---------------------------------------------------------------------------
		align 10h

loc_64214BB0:				; CODE XREF: _little2_sameName:loc_64214B60j
					; DATA XREF: .rdata:off_64220258o
		mov	ecx, edx	; jumptable 64214B60 case 1
		jmp	short loc_64214B76
; ---------------------------------------------------------------------------

loc_64214BB4:				; CODE XREF: _little2_sameName:loc_64214B60j
					; DATA XREF: .rdata:off_64220258o
		mov	edx, [esp+14h+var_14] ;	jumptable 64214B60 case	0
		jmp	short loc_64214B8D
; ---------------------------------------------------------------------------
		align 10h

loc_64214BC0:				; CODE XREF: _little2_sameName+70j
		and	ebp, 0FFh	; switch 256 cases
		jmp	ds:off_642202BC[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64214BD0:				; CODE XREF: _little2_sameName+F6j
					; DATA XREF: .rdata:64220358o
		cmp	dl, 0FEh	; jumptable 64214BC6 case 39
		jb	loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		xor	ebp, ebp
		nop
		lea	esi, [esi+0]
		jmp	loc_64214AFE
; ---------------------------------------------------------------------------

loc_64214BE5:				; CODE XREF: _little2_sameName+F6j
					; DATA XREF: .rdata:642202CCo ...
		mov	ebp, 8		; jumptable 64214BC6 cases 4-7
		jmp	loc_64214AFE
; ---------------------------------------------------------------------------
		align 10h

loc_64214BF0:				; CODE XREF: _little2_sameName+3Cj
		add	edx, 28h
		movzx	eax, byte ptr [eax]
		cmp	dl, 27h		; switch 1 cases
		jbe	short loc_64214C10

loc_64214BFB:				; CODE XREF: _little2_sameName+F6j
					; _little2_sameName+152j
					; DATA XREF: ...
		mov	eax, 18h	; jumptable 64214BC6 cases 48-78

loc_64214C00:				; CODE XREF: _little2_sameName+50j
		mov	eax, ds:_CSWTCH_456[eax*4]

loc_64214C07:				; CODE XREF: _little2_sameName+16Cj
					; _little2_sameName+17Cj
		add	esp, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64214C10:				; CODE XREF: _little2_sameName+129j
		movzx	edx, dl
		jmp	ds:off_6422035C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64214C20:				; CODE XREF: _little2_sameName+F6j
					; DATA XREF: .rdata:642203F8o
		cmp	al, 0FEh	; jumptable 64214BC6 case 79
		jb	short loc_64214BFB ; jumptable 64214BC6	cases 48-78
		jmp	loc_64214B26
; ---------------------------------------------------------------------------
		align 10h

loc_64214C30:				; CODE XREF: _little2_sameName+F6j
					; DATA XREF: .rdata:6422036Co ...
		mov	eax, 3		; jumptable 64214BC6 cases 44-47
		mov	eax, ds:_CSWTCH_456[eax*4]
		jmp	short loc_64214C07
; ---------------------------------------------------------------------------
		align 10h

loc_64214C40:				; CODE XREF: _little2_sameName+F6j
					; _little2_sameName+143j
					; DATA XREF: ...
		mov	eax, 2		; jumptable 64214BC6 cases 40-43
					; jumptable 64214C13 case 0
		mov	eax, ds:_CSWTCH_456[eax*4]
		jmp	short loc_64214C07
; ---------------------------------------------------------------------------
		align 10h

loc_64214C50:				; CODE XREF: _little2_sameName+74j
					; _little2_sameName+7Dj ...
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_little2_sameName endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_nameMatchesAscii proc near	; DATA XREF: .rdata:642232FCo
					; .rdata:6422361Co ...

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	edx, [esp+4+arg_C]
		mov	eax, [esp+4+arg_4]
		mov	ebx, [esp+4+arg_8]
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_64214CA1
		cmp	eax, ebx
		jnz	short loc_64214C95
		jmp	short loc_64214C9B
; ---------------------------------------------------------------------------
		align 10h

loc_64214C80:				; CODE XREF: _little2_nameMatchesAscii+39j
		cmp	cl, [eax]
		jnz	short loc_64214C9B
		add	edx, 1
		add	eax, 2
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_64214CA1
		cmp	ebx, eax
		jz	short loc_64214C9B

loc_64214C95:				; CODE XREF: _little2_nameMatchesAscii+16j
		cmp	byte ptr [eax+1], 0
		jz	short loc_64214C80

loc_64214C9B:				; CODE XREF: _little2_nameMatchesAscii+18j
					; _little2_nameMatchesAscii+22j ...
		xor	eax, eax
		pop	ebx
		xchg	ax, ax
		retn
; ---------------------------------------------------------------------------

loc_64214CA1:				; CODE XREF: _little2_nameMatchesAscii+12j
					; _little2_nameMatchesAscii+2Fj
		cmp	eax, ebx
		setz	al
		movzx	eax, al
		pop	ebx
		retn
_little2_nameMatchesAscii endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_nameLength proc near		; DATA XREF: .rdata:64223300o
					; .rdata:64223620o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	ebx, [esp+8+arg_4]
		mov	ecx, [esp+8+arg_0]
		mov	eax, ebx

loc_64214CBC:				; CODE XREF: _little2_nameLength+53j
					; _little2_nameLength+73j ...
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	short loc_64214CE0
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [ecx+edx+4Ch]

loc_64214CCC:				; CODE XREF: _little2_nameLength+82j
		sub	edx, 5
		cmp	edx, 18h
		jbe	short loc_64214D12

loc_64214CD4:				; CODE XREF: _little2_sameName+F6j
					; _little2_nameLength+3Ej ...
		sub	eax, ebx	; jumptable 64214BC6 cases 84-87,123-136,143
					; jumptable 64214CEE cases 4-7
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64214CE0:				; CODE XREF: _little2_nameLength+12j
		add	edx, 28h
		movzx	esi, byte ptr [eax]
		cmp	dl, 27h		; switch 40 cases
		ja	short loc_64214D00 ; jumptable 64214BC6	cases 88-118,120,137-142,144
					; jumptable 64214D12 cases 5,22-27,29
		movzx	edx, dl
		jmp	ds:off_642203FC[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64214CF5:				; CODE XREF: _little2_sameName+F6j
					; _little2_nameLength+3Ej
					; DATA XREF: ...
		mov	edx, esi	; jumptable 64214BC6 case 119
					; jumptable 64214CEE case 39
		cmp	dl, 0FEh
		jnb	short loc_64214D30
		lea	esi, [esi+0]

loc_64214D00:				; CODE XREF: _little2_sameName+F6j
					; _little2_nameLength+39j ...
		add	eax, 2		; jumptable 64214BC6 cases 88-118,120,137-142,144
					; jumptable 64214D12 cases 5,22-27,29
		jmp	short loc_64214CBC
; ---------------------------------------------------------------------------

loc_64214D05:				; CODE XREF: _little2_sameName+F6j
					; _little2_nameLength+3Ej
					; DATA XREF: ...
		mov	edx, 7		; jumptable 64214BC6 cases 80-83
					; jumptable 64214CEE cases 0-3
		sub	edx, 5		; switch 25 cases
		cmp	edx, 18h
		ja	short loc_64214CD4 ; jumptable 64214BC6	cases 84-87,123-136,143
					; jumptable 64214CEE cases 4-7

loc_64214D12:				; CODE XREF: _little2_nameLength+22j
		jmp	ds:off_6422049C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64214D20:				; CODE XREF: _little2_sameName+F6j
					; _little2_nameLength:loc_64214D12j
					; DATA XREF: ...
		add	eax, 4		; jumptable 64214BC6 case 122
					; jumptable 64214D12 case 7
		jmp	short loc_64214CBC
; ---------------------------------------------------------------------------

loc_64214D25:				; CODE XREF: _little2_sameName+F6j
					; _little2_nameLength:loc_64214D12j
					; DATA XREF: ...
		add	eax, 3		; jumptable 64214BC6 case 121
					; jumptable 64214D12 case 6
		jmp	short loc_64214CBC
; ---------------------------------------------------------------------------
		align 10h

loc_64214D30:				; CODE XREF: _little2_nameLength+4Aj
		xor	edx, edx
		jmp	short loc_64214CCC
_little2_nameLength endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_skipS	proc near		; DATA XREF: .rdata:64223304o
					; .rdata:64223624o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	ebx, [esp+8+arg_0]
		mov	eax, [esp+8+arg_4]
		lea	esi, [esi+0]

loc_64214D50:				; CODE XREF: _little2_skipS+5Aj
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	short loc_64214D68
		movzx	edx, byte ptr [eax]
		movzx	ecx, byte ptr [ebx+edx+4Ch]
		cmp	ecx, 15h
		jbe	short loc_64214D88

loc_64214D65:				; CODE XREF: _little2_skipS+2Ej
					; _little2_skipS+3Dj ...
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_64214D68:				; CODE XREF: _little2_skipS+16j
		cmp	dl, 0D8h
		movzx	esi, byte ptr [eax]
		jb	short loc_64214D65
		cmp	dl, 0DBh
		mov	ecx, 7
		jbe	short loc_64214D88
		cmp	dl, 0FFh
		jnz	short loc_64214D65
		mov	edx, esi
		cmp	dl, 0FEh
		jb	short loc_64214D65
		xor	cl, cl

loc_64214D88:				; CODE XREF: _little2_skipS+23j
					; _little2_skipS+38j
		mov	edx, 1
		shl	edx, cl
		and	edx, 200600h
		jz	short loc_64214D65
		add	eax, 2
		jmp	short loc_64214D50
_little2_skipS	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_updatePosition	proc near	; DATA XREF: .rdata:64223314o
					; .rdata:64223634o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	eax, [esp+10h+arg_4]
		mov	ebx, [esp+10h+arg_8]
		mov	esi, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_C]
		cmp	eax, ebx
		jnb	short loc_64214E00

loc_64214DB8:				; CODE XREF: _little2_updatePosition+5Ej
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	short loc_64214DD7
		movzx	edx, byte ptr [eax]
		movzx	edi, byte ptr [esi+edx+4Ch]

loc_64214DC8:				; CODE XREF: _little2_updatePosition+47j
					; _little2_updatePosition+CBj
		lea	edx, [edi-5]	; switch 6 cases
		cmp	edx, 5
		ja	short loc_64214DF0 ; jumptable 64214BC6	cases 145,148
		jmp	ds:off_64220500[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64214DD7:				; CODE XREF: _little2_updatePosition+1Ej
		cmp	dl, 0D8h
		movzx	ebp, byte ptr [eax]
		jb	short loc_64214DF0 ; jumptable 64214BC6	cases 145,148
		cmp	dl, 0DBh
		mov	edi, 7
		jbe	short loc_64214DC8
		cmp	dl, 0FFh
		jz	short loc_64214E61
		xchg	ax, ax

loc_64214DF0:				; CODE XREF: _little2_sameName+F6j
					; _little2_updatePosition+2Ej ...
		mov	edx, [ecx+4]	; jumptable 64214BC6 cases 145,148
		add	eax, 2
		add	edx, 1

loc_64214DF9:				; CODE XREF: _little2_updatePosition+8Bj
					; _little2_updatePosition+99j ...
		cmp	eax, ebx
		mov	[ecx+4], edx
		jb	short loc_64214DB8

loc_64214E00:				; CODE XREF: _little2_updatePosition+16j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64214E05:				; CODE XREF: _little2_sameName+F6j
					; _little2_updatePosition+30j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64214BC6 case 149
					; jumptable 64214DD0 case 9
		add	dword ptr [ecx], 1
		cmp	eax, ebx
		jz	short loc_64214E22
		cmp	byte ptr [eax+1], 0
		jnz	short loc_64214E22
		movzx	edx, byte ptr [eax]
		cmp	byte ptr [esi+edx+4Ch],	0Ah
		jnz	short loc_64214E22
		add	eax, 2

loc_64214E22:				; CODE XREF: _little2_updatePosition+6Dj
					; _little2_updatePosition+73j ...
		mov	dword ptr [ecx+4], 0FFFFFFFFh
		xor	edx, edx
		jmp	short loc_64214DF9
; ---------------------------------------------------------------------------
		align 10h

loc_64214E30:				; CODE XREF: _little2_sameName+F6j
					; _little2_updatePosition+30j
					; DATA XREF: ...
		mov	edx, [ecx+4]	; jumptable 64214BC6 case 147
					; jumptable 64214DD0 case 7
		add	eax, 4
		add	edx, 1
		jmp	short loc_64214DF9
; ---------------------------------------------------------------------------
		align 10h

loc_64214E40:				; CODE XREF: _little2_sameName+F6j
					; _little2_updatePosition+30j
					; DATA XREF: ...
		mov	edx, [ecx+4]	; jumptable 64214BC6 case 146
					; jumptable 64214DD0 case 6
		add	eax, 3
		add	edx, 1
		jmp	short loc_64214DF9
; ---------------------------------------------------------------------------
		align 10h

loc_64214E50:				; CODE XREF: _little2_sameName+F6j
					; _little2_updatePosition+30j
					; DATA XREF: ...
		mov	dword ptr [ecx+4], 0FFFFFFFFh ;	jumptable 64214BC6 case	150
					; jumptable 64214DD0 case 10
		add	eax, 2
		xor	edx, edx
		add	dword ptr [ecx], 1
		jmp	short loc_64214DF9
; ---------------------------------------------------------------------------

loc_64214E61:				; CODE XREF: _little2_updatePosition+4Cj
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	short loc_64214DF0 ; jumptable 64214BC6	cases 145,148
		xor	di, di
		jmp	loc_64214DC8
_little2_updatePosition	endp


; =============== S U B	R O U T	I N E =======================================


_big2_checkPiTarget proc near		; CODE XREF: _big2_scanPi+220p
					; _big2_scanPi+23Cp

arg_0		= dword	ptr  4

		push	ebx
		mov	eax, [esp+4+arg_0]
		sub	ecx, edx
		cmp	ecx, 6
		mov	dword ptr [eax], 0Bh
		jz	short loc_64214E90

loc_64214E82:				; CODE XREF: _big2_checkPiTarget+23j
					; _big2_checkPiTarget+31j ...
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64214E90:				; CODE XREF: _big2_checkPiTarget+10j
		cmp	byte ptr [edx],	0
		jnz	short loc_64214E82
		movzx	ecx, byte ptr [edx+1]
		cmp	cl, 58h
		jz	short loc_64214EE4
		cmp	cl, 78h
		jnz	short loc_64214E82
		xor	ebx, ebx

loc_64214EA5:				; CODE XREF: _big2_checkPiTarget+79j
		cmp	byte ptr [edx+2], 0
		lea	ecx, [edx+2]
		jnz	short loc_64214E82
		movzx	edx, byte ptr [ecx+1]
		cmp	dl, 4Dh
		jz	short loc_64214EF0
		cmp	dl, 6Dh
		jnz	short loc_64214E82

loc_64214EBC:				; CODE XREF: _big2_checkPiTarget+85j
		cmp	byte ptr [ecx+2], 0
		lea	edx, [ecx+2]
		jnz	short loc_64214E82
		movzx	edx, byte ptr [edx+1]
		cmp	dl, 4Ch
		jz	short loc_64214EF7
		cmp	dl, 6Ch
		jnz	short loc_64214E82
		test	ebx, ebx
		jnz	short loc_64214EF7
		mov	dword ptr [eax], 0Ch
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_64214EE4:				; CODE XREF: _big2_checkPiTarget+2Cj
		mov	ebx, 1
		jmp	short loc_64214EA5
; ---------------------------------------------------------------------------
		align 10h

loc_64214EF0:				; CODE XREF: _big2_checkPiTarget+45j
		mov	ebx, 1
		jmp	short loc_64214EBC
; ---------------------------------------------------------------------------

loc_64214EF7:				; CODE XREF: _big2_checkPiTarget+5Cj
					; _big2_checkPiTarget+65j
		xor	eax, eax
		pop	ebx
		retn
_big2_checkPiTarget endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_scanPi	proc near		; CODE XREF: _big2_contentTok+453p
					; _big2_prologTok+2EDj

var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		cmp	edx, ecx
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, ecx
		mov	[esp+3Ch+var_C], esi
		mov	esi, eax
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_8], edi
		jz	loc_642150A4
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	short loc_64214F42
		movzx	ecx, byte ptr [edx+1]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64214F33:				; CODE XREF: _big2_scanPi+B9j
					; _big2_scanPi+C5j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	short loc_64214F78 ; jumptable 64214BC6	cases 154-167,169,171-174
		jmp	ds:off_64220518[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64214F42:				; CODE XREF: _big2_scanPi+28j
		lea	ecx, [eax+28h]
		movzx	edi, byte ptr [edx+1]
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_64214F91

loc_64214F4E:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+94j
					; DATA XREF: ...
		mov	ecx, edi	; jumptable 64214BC6 cases 184-214

loc_64214F50:				; CODE XREF: _big2_scanPi+B5j
					; _big2_scanPi+1C0j
		movzx	eax, al
		movzx	edi, ds:_nmstrtPages[eax]
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edi, [eax+edi*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:_namingBitmap[edi*4], eax
		jnz	short loc_64214FD0 ; jumptable 64214BC6	cases 168,170
					; jumptable 64214F3B cases 22,24

loc_64214F78:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+39j ...
		mov	[ebp+0], edx	; jumptable 64214BC6 cases 154-167,169,171-174
		xor	eax, eax

loc_64214F7D:				; CODE XREF: _big2_scanPi+ACj
					; _big2_scanPi+135j ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_64214F91:				; CODE XREF: _big2_scanPi+4Cj
		movzx	ecx, cl
		jmp	ds:off_6422057C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64214FA0:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+3Bj ...
		sub	ebx, edx	; jumptable 64214BC6 cases 153,176-179
					; jumptable 64214F3B case 7
					; jumptable 64214F94 cases 0-3
		cmp	ebx, 3
		jg	short loc_64214F78 ; jumptable 64214BC6	cases 154-167,169,171-174

loc_64214FA7:				; CODE XREF: _big2_scanPi+105j
					; _big2_scanPi+120j ...
		mov	eax, 0FFFFFFFEh
		jmp	short loc_64214F7D
; ---------------------------------------------------------------------------
		align 10h

loc_64214FB0:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+94j
					; DATA XREF: ...
		mov	ecx, edi	; jumptable 64214BC6 case 215
					; jumptable 64214F94 case 39
		cmp	cl, 0FEh
		jb	short loc_64214F50
		xor	ecx, ecx
		jmp	loc_64214F33
; ---------------------------------------------------------------------------
		align 10h

loc_64214FC0:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+94j
					; DATA XREF: ...
		mov	ecx, 8		; jumptable 64214BC6 cases 180-183
					; jumptable 64214F94 cases 4-7
		jmp	loc_64214F33
; ---------------------------------------------------------------------------
		align 10h

loc_64214FD0:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+3Bj ...
		lea	edi, [edx+2]	; jumptable 64214BC6 cases 168,170
					; jumptable 64214F3B cases 22,24
		cmp	ebx, edi
		jz	loc_642150A4

loc_64214FDB:				; CODE XREF: _big2_scanPi+19Ej
		movzx	eax, byte ptr [edi]
		test	al, al
		jnz	short loc_64215040
		movzx	ecx, byte ptr [edi+1]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64214FEB:				; CODE XREF: _big2_scanPi+1CAj
					; _big2_scanPi+1E4j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	short loc_64215030 ; jumptable 64214BC6	cases 219,222-225,227-231,234,239
		jmp	ds:off_6422061C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64215000:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+3Bj
					; DATA XREF: ...
		sub	ebx, edx	; jumptable 64214BC6 case 152
					; jumptable 64214F3B case 6
		cmp	ebx, 2
		jle	short loc_64214FA7
		jmp	loc_64214F78	; jumptable 64214BC6 cases 154-167,169,171-174
; ---------------------------------------------------------------------------
		align 10h

loc_64215010:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+3Bj
					; DATA XREF: ...
		sub	ebx, edx	; jumptable 64214BC6 case 151
					; jumptable 64214F3B case 5
		cmp	ebx, 1
		jg	loc_64214F78	; jumptable 64214BC6 cases 154-167,169,171-174
		nop
		lea	esi, [esi+0]
		jmp	short loc_64214FA7
; ---------------------------------------------------------------------------

loc_64215022:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+F3j
					; DATA XREF: ...
		sub	ebx, edi	; jumptable 64214BC6 case 216
					; jumptable 64214FF3 case 5
		cmp	ebx, 1
		jle	loc_64214FA7
		lea	esi, [esi+0]

loc_64215030:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+F1j ...
		mov	[ebp+0], edi	; jumptable 64214BC6 cases 219,222-225,227-231,234,239
		xor	eax, eax
		jmp	loc_64214F7D
; ---------------------------------------------------------------------------
		align 10h

loc_64215040:				; CODE XREF: _big2_scanPi+E0j
		movzx	ecx, byte ptr [edi+1]
		mov	byte ptr [esp+3Ch+var_24], cl
		lea	ecx, [eax+28h]
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_642150B0

loc_64215050:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+1B3j
					; DATA XREF: ...
		movzx	ecx, byte ptr [esp+3Ch+var_24] ; jumptable 64214BC6 cases 249-255
		mov	[esp+3Ch+var_38], cl

loc_64215059:				; CODE XREF: _big2_scanPi+1DCj
					; _big2_scanPi+299j
		movzx	eax, al
		movzx	eax, ds:_namePages[eax]
		mov	[esp+3Ch+var_24], eax
		movzx	eax, [esp+3Ch+var_38]
		mov	ecx, [esp+3Ch+var_24]
		shr	al, 5
		movzx	eax, al
		lea	ecx, [eax+ecx*8]
		mov	eax, 1
		mov	[esp+3Ch+var_24], ecx
		movzx	ecx, [esp+3Ch+var_38]
		and	ecx, 1Fh
		shl	eax, cl
		mov	ecx, [esp+3Ch+var_24]
		test	ds:_namingBitmap[ecx*4], eax
		jz	short loc_64215030 ; jumptable 64214BC6	cases 219,222-225,227-231,234,239

loc_64215099:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+F3j
					; DATA XREF: ...
		add	edi, 2		; jumptable 64214BC6 cases 233,235-238
					; jumptable 64214FF3 cases 22,24-27
		cmp	ebx, edi
		jnz	loc_64214FDB

loc_642150A4:				; CODE XREF: _big2_scanPi+1Dj
					; _big2_scanPi+D5j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_64214F7D
; ---------------------------------------------------------------------------
		align 10h

loc_642150B0:				; CODE XREF: _big2_scanPi+14Ej
		movzx	ecx, cl
		jmp	ds:off_64220680[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642150BA:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+3Bj
					; DATA XREF: ...
		movzx	ecx, byte ptr [edx+1] ;	jumptable 64214BC6 case	175
					; jumptable 64214F3B case 29
		xchg	ax, ax
		jmp	loc_64214F50
; ---------------------------------------------------------------------------

loc_642150C5:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+1B3j
					; DATA XREF: ...
		mov	ecx, 8		; jumptable 64214BC6 cases 245-248
					; jumptable 642150B3 cases 4-7
		jmp	loc_64214FEB
; ---------------------------------------------------------------------------
		align 10h

loc_642150D0:				; CODE XREF: _big2_scanPi+1B3j
					; DATA XREF: .rdata:off_64220680o
		movzx	ecx, byte ptr [esp+3Ch+var_24] ; jumptable 642150B3 case 39
		cmp	cl, 0FEh
		mov	[esp+3Ch+var_38], cl
		jb	loc_64215059
		xor	ecx, ecx
		jmp	loc_64214FEB
; ---------------------------------------------------------------------------
		align 10h

loc_642150F0:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+F3j ...
		sub	ebx, edi	; jumptable 64214BC6 cases 218,241-244
					; jumptable 64214FF3 case 7
					; jumptable 642150B3 cases 0-3
		cmp	ebx, 3
		jle	loc_64214FA7
		nop
		lea	esi, [esi+0]
		jmp	loc_64215030	; jumptable 64214BC6 cases 219,222-225,227-231,234,239
; ---------------------------------------------------------------------------

loc_64215105:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+F3j
					; DATA XREF: ...
		sub	ebx, edi	; jumptable 64214BC6 case 217
					; jumptable 64214FF3 case 6
		cmp	ebx, 2
		jle	loc_64214FA7
		jmp	loc_64215030	; jumptable 64214BC6 cases 219,222-225,227-231,234,239
; ---------------------------------------------------------------------------

loc_64215115:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+F3j
					; DATA XREF: ...
		lea	eax, [esp+3Ch+var_14] ;	jumptable 64214BC6 case	226
					; jumptable 64214FF3 case 15
		mov	ecx, edi
		mov	[esp+3Ch+var_3C], eax
		mov	eax, esi
		call	_big2_checkPiTarget
		test	eax, eax
		jnz	short loc_642151A0

loc_64215129:				; CODE XREF: _big2_scanPi+243j
		mov	[ebp+0], edi
		jmp	loc_64214F7D
; ---------------------------------------------------------------------------

loc_64215131:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+F3j
					; DATA XREF: ...
		lea	eax, [esp+3Ch+var_14] ;	jumptable 64214BC6 cases 220,221,232
					; jumptable 64214FF3 cases 9,10,21
		mov	ecx, edi
		mov	[esp+3Ch+var_3C], eax
		mov	eax, esi
		call	_big2_checkPiTarget
		test	eax, eax
		jz	short loc_64215129
		lea	eax, [edi+2]
		cmp	ebx, eax
		jz	loc_642150A4
		movzx	edx, byte ptr [edi+2]

loc_64215154:				; CODE XREF: _big2_scanPi+2F3j
		test	dl, dl
		movzx	ecx, byte ptr [eax+1]
		jnz	short loc_6421517F

loc_6421515C:				; CODE XREF: _big2_scanPi+27Dj
					; _big2_scanPi+300j
		movzx	ecx, cl
		movzx	edx, byte ptr [esi+ecx+4Ch]
		cmp	edx, 0Fh	; switch 16 cases
		jbe	short loc_642151DC

loc_64215169:				; CODE XREF: _big2_scanPi+285j
					; _big2_scanPi+28Aj ...
		add	eax, 2		; jumptable 6421518A default case

loc_6421516C:				; CODE XREF: _big2_scanPi+325j
					; _big2_scanPi+33Aj
		cmp	ebx, eax
		jz	loc_642150A4
		movzx	edx, byte ptr [eax]
		movzx	ecx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_6421515C

loc_6421517F:				; CODE XREF: _big2_scanPi+25Aj
		add	edx, 28h
		cmp	dl, 27h		; switch 40 cases
		ja	short loc_64215169 ; jumptable 6421518A	default	case
		movzx	edx, dl
		jmp	ds:off_64220720[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215191:				; CODE XREF: _little2_sameName+F6j
					; _big2_scanPi+F3j
					; DATA XREF: ...
		movzx	ecx, byte ptr [edi+1] ;	jumptable 64214BC6 case	240
					; jumptable 64214FF3 case 29
		mov	[esp+3Ch+var_38], cl
		jmp	loc_64215059
; ---------------------------------------------------------------------------
		align 10h

loc_642151A0:				; CODE XREF: _big2_scanPi+227j
		add	edi, 2
		cmp	edi, ebx
		jz	loc_642150A4
		cmp	byte ptr [edi],	0
		jnz	loc_64215030	; jumptable 64214BC6 cases 219,222-225,227-231,234,239
		cmp	byte ptr [edi+1], 3Eh
		jnz	loc_64215030	; jumptable 64214BC6 cases 219,222-225,227-231,234,239
		add	edi, 2
		mov	eax, [esp+3Ch+var_14]
		mov	[ebp+0], edi
		jmp	loc_64214F7D
; ---------------------------------------------------------------------------

loc_642151CD:				; CODE XREF: _big2_scanPi+28Aj
					; _big2_scanPi:loc_642151DCj
					; DATA XREF: ...
		mov	[ebp+0], eax	; jumptable 6421518A cases 4-7
					; jumptable 642151DC cases 0,1,8
		xor	eax, eax
		jmp	loc_64214F7D
; ---------------------------------------------------------------------------

loc_642151D7:				; CODE XREF: _big2_scanPi+28Aj
					; DATA XREF: .rdata:off_64220720o
		mov	edx, 7		; jumptable 6421518A cases 0-3

loc_642151DC:				; CODE XREF: _big2_scanPi+267j
					; _big2_scanPi+360j
		jmp	ds:off_642207C0[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642151E3:				; CODE XREF: _big2_scanPi:loc_642151DCj
					; DATA XREF: .rdata:off_642207C0o
		add	eax, 2		; jumptable 642151DC case 15
		cmp	eax, ebx
		jz	loc_642150A4
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_64215154
		movzx	ecx, byte ptr [eax+1]
		cmp	cl, 3Eh
		jnz	loc_6421515C
		add	eax, 2
		mov	[ebp+0], eax
		mov	eax, [esp+3Ch+var_14]
		jmp	loc_64214F7D
; ---------------------------------------------------------------------------

loc_64215215:				; CODE XREF: _big2_scanPi:loc_642151DCj
					; DATA XREF: .rdata:off_642207C0o
		mov	edx, ebx	; jumptable 642151DC case 7
		sub	edx, eax
		cmp	edx, 3
		jle	loc_64214FA7
		add	eax, 4
		jmp	loc_6421516C
; ---------------------------------------------------------------------------

loc_6421522A:				; CODE XREF: _big2_scanPi:loc_642151DCj
					; DATA XREF: .rdata:off_642207C0o
		mov	edx, ebx	; jumptable 642151DC case 6
		sub	edx, eax
		cmp	edx, 2
		jle	loc_64214FA7
		add	eax, 3
		jmp	loc_6421516C
; ---------------------------------------------------------------------------

loc_6421523F:				; CODE XREF: _big2_scanPi:loc_642151DCj
					; DATA XREF: .rdata:off_642207C0o
		mov	edx, ebx	; jumptable 642151DC case 5
		sub	edx, eax
		cmp	edx, 1
		jg	loc_64215169	; jumptable 6421518A default case
		jmp	loc_64214FA7
; ---------------------------------------------------------------------------

loc_64215251:				; CODE XREF: _big2_scanPi+28Aj
					; DATA XREF: .rdata:off_64220720o
		cmp	cl, 0FEh	; jumptable 6421518A case 39
		jb	loc_64215169	; jumptable 6421518A default case
		xor	edx, edx
		lea	esi, [esi+0]
		jmp	loc_642151DC
_big2_scanPi	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_cdataSectionTok proc near		; DATA XREF: .rdata:64224088o
					; .rdata:64224528o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		mov	eax, 0FFFFFFFCh
		mov	ecx, [esp+10h+arg_4]
		cmp	ecx, [esp+10h+arg_8]
		mov	[esp+10h+var_8], edi
		mov	edi, [esp+10h+arg_0]
		mov	[esp+10h+var_4], ebp
		mov	ebp, [esp+10h+arg_C]
		mov	[esp+10h+var_10], ebx
		mov	[esp+10h+var_C], esi
		jz	loc_64215321
		mov	eax, [esp+10h+arg_8]
		sub	eax, ecx
		test	al, 1
		jnz	loc_642154B5

loc_642152AB:				; CODE XREF: _big2_cdataSectionTok+251j
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	loc_64215334
		add	eax, 28h
		movzx	ebx, byte ptr [ecx+1]
		cmp	al, 27h		; switch 40 cases
		jbe	loc_642153E0

loc_642152C5:				; CODE XREF: _big2_cdataSectionTok+D0j
					; _big2_cdataSectionTok:loc_64215346j ...
		lea	eax, [ecx+2]	; jumptable 64215346 default case

loc_642152C8:				; CODE XREF: _big2_cdataSectionTok+1BEj
					; _big2_cdataSectionTok+1E1j ...
		cmp	[esp+10h+arg_8], eax
		jz	loc_64215385
		movzx	ebx, byte ptr [eax]

loc_642152D5:				; CODE XREF: _big2_cdataSectionTok+20Fj
		movzx	esi, byte ptr [eax+1]

loc_642152D9:				; CODE XREF: _big2_cdataSectionTok+21Ej
		test	bl, bl
		jnz	loc_64215373

loc_642152E1:				; CODE XREF: _big2_cdataSectionTok+FDj
		and	esi, 0FFh
		movzx	ecx, byte ptr [edi+esi+4Ch]
		cmp	ecx, 0Ah	; switch 11 cases
		ja	short loc_6421535B ; jumptable 642152F1	default	case

loc_642152F1:				; CODE XREF: _big2_cdataSectionTok+159j
					; _big2_cdataSectionTok+165j
		jmp	ds:off_64220800[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642152F8:				; CODE XREF: _big2_cdataSectionTok:loc_64215346j
					; DATA XREF: .rdata:off_6422082Co
		lea	eax, [ecx+2]	; jumptable 64215346 case 9
		cmp	eax, [esp+10h+arg_8]
		jz	loc_642154C6
		cmp	byte ptr [ecx+2], 0
		jnz	short loc_64215319
		movzx	edx, byte ptr [eax+1]
		cmp	byte ptr [edi+edx+4Ch],	0Ah
		jnz	short loc_64215319
		lea	eax, [ecx+4]

loc_64215319:				; CODE XREF: _big2_cdataSectionTok+99j
					; _big2_cdataSectionTok+A4j
		mov	[ebp+0], eax
		mov	eax, 7

loc_64215321:				; CODE XREF: _big2_cdataSectionTok+27j
					; _big2_cdataSectionTok+128j ...
		mov	ebx, [esp+10h+var_10]
		mov	esi, [esp+10h+var_C]
		mov	edi, [esp+10h+var_8]
		mov	ebp, [esp+10h+var_4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_64215334:				; CODE XREF: _big2_cdataSectionTok+40j
		movzx	eax, byte ptr [ecx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		ja	loc_642152C5	; jumptable 64215346 default case

loc_64215346:				; CODE XREF: _big2_cdataSectionTok+19Bj
					; _big2_cdataSectionTok+1A5j
		jmp	ds:off_6422082C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64215350:				; CODE XREF: _big2_cdataSectionTok:loc_642152F1j
					; DATA XREF: .rdata:off_64220800o
		mov	ecx, [esp+10h+arg_8] ; jumptable 642152F1 case 5
		sub	ecx, eax
		cmp	ecx, 1
		jle	short loc_64215390 ; jumptable 642152F1	cases 0,1,4,8-10
					; jumptable 6421537E cases 4-7

loc_6421535B:				; CODE XREF: _big2_cdataSectionTok+7Fj
					; _big2_cdataSectionTok:loc_642152F1j ...
		add	eax, 2		; jumptable 642152F1 default case

loc_6421535E:				; CODE XREF: _big2_cdataSectionTok+13Ej
					; _big2_cdataSectionTok+14Ej
		cmp	[esp+10h+arg_8], eax
		jz	short loc_64215385
		movzx	ebx, byte ptr [eax]
		movzx	esi, byte ptr [eax+1]
		test	bl, bl
		jz	loc_642152E1

loc_64215373:				; CODE XREF: _big2_cdataSectionTok+6Bj
		add	ebx, 28h
		cmp	bl, 27h		; switch 40 cases
		ja	short loc_6421535B ; jumptable 642152F1	default	case
		movzx	ebx, bl
		jmp	ds:off_64220858[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215385:				; CODE XREF: _big2_cdataSectionTok+5Cj
					; _big2_cdataSectionTok+F2j
		mov	eax, [esp+10h+arg_8]
		lea	esi, [esi+0]

loc_64215390:				; CODE XREF: _big2_cdataSectionTok:loc_642152F1j
					; _big2_cdataSectionTok+E9j ...
		mov	[ebp+0], eax	; jumptable 642152F1 cases 0,1,4,8-10
					; jumptable 6421537E cases 4-7
		mov	eax, 6
		jmp	short loc_64215321
; ---------------------------------------------------------------------------
		align 10h

loc_642153A0:				; CODE XREF: _big2_cdataSectionTok:loc_642152F1j
					; DATA XREF: .rdata:off_64220800o
		mov	ecx, [esp+10h+arg_8] ; jumptable 642152F1 case 7
		sub	ecx, eax
		cmp	ecx, 3
		jle	short loc_64215390 ; jumptable 642152F1	cases 0,1,4,8-10
					; jumptable 6421537E cases 4-7
		add	eax, 4
		jmp	short loc_6421535E
; ---------------------------------------------------------------------------

loc_642153B0:				; CODE XREF: _big2_cdataSectionTok:loc_642152F1j
					; DATA XREF: .rdata:off_64220800o
		mov	ecx, [esp+10h+arg_8] ; jumptable 642152F1 case 6
		sub	ecx, eax
		cmp	ecx, 2
		jle	short loc_64215390 ; jumptable 642152F1	cases 0,1,4,8-10
					; jumptable 6421537E cases 4-7
		add	eax, 3
		jmp	short loc_6421535E
; ---------------------------------------------------------------------------

loc_642153C0:				; CODE XREF: _big2_cdataSectionTok+10Ej
					; DATA XREF: .rdata:off_64220858o
		mov	edx, esi	; jumptable 6421537E case 39
		cmp	dl, 0FEh
		jb	short loc_6421535B ; jumptable 642152F1	default	case
		xor	ecx, ecx
		jmp	loc_642152F1
; ---------------------------------------------------------------------------
		align 10h

loc_642153D0:				; CODE XREF: _big2_cdataSectionTok+10Ej
					; DATA XREF: .rdata:off_64220858o
		mov	ecx, 7		; jumptable 6421537E cases 0-3
		jmp	loc_642152F1
; ---------------------------------------------------------------------------
		align 10h

loc_642153E0:				; CODE XREF: _big2_cdataSectionTok+4Fj
		movzx	eax, al
		jmp	ds:off_642208F8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_642153F0:				; CODE XREF: _big2_cdataSectionTok:loc_64215346j
					; _big2_cdataSectionTok+173j
					; DATA XREF: ...
		mov	[ebp+0], ecx	; jumptable 64215346 cases 0,1,8
					; jumptable 642153E3 cases 4-7
		xor	eax, eax
		jmp	loc_64215321
; ---------------------------------------------------------------------------
		align 10h

loc_64215400:				; CODE XREF: _big2_cdataSectionTok+173j
					; DATA XREF: .rdata:off_642208F8o
		cmp	bl, 0FEh	; jumptable 642153E3 case 39
		jb	loc_642152C5	; jumptable 64215346 default case
		xor	eax, eax
		jmp	loc_64215346
; ---------------------------------------------------------------------------

loc_64215410:				; CODE XREF: _big2_cdataSectionTok+173j
					; DATA XREF: .rdata:off_642208F8o
		mov	eax, 7		; jumptable 642153E3 cases 0-3
		jmp	loc_64215346
; ---------------------------------------------------------------------------
		align 10h

loc_64215420:				; CODE XREF: _big2_cdataSectionTok:loc_64215346j
					; DATA XREF: .rdata:off_6422082Co
		mov	eax, [esp+10h+arg_8] ; jumptable 64215346 case 7
		sub	eax, ecx
		cmp	eax, 3
		jle	short loc_64215465
		lea	eax, [ecx+4]
		jmp	loc_642152C8
; ---------------------------------------------------------------------------

loc_64215433:				; CODE XREF: _big2_cdataSectionTok:loc_64215346j
					; DATA XREF: .rdata:off_6422082Co
		add	ecx, 2		; jumptable 64215346 case 10
		mov	eax, 7
		mov	[ebp+0], ecx
		jmp	loc_64215321
; ---------------------------------------------------------------------------

loc_64215443:				; CODE XREF: _big2_cdataSectionTok:loc_64215346j
					; DATA XREF: .rdata:off_6422082Co
		mov	eax, [esp+10h+arg_8] ; jumptable 64215346 case 6
		sub	eax, ecx
		cmp	eax, 2
		jle	short loc_64215465
		lea	eax, [ecx+3]
		jmp	loc_642152C8
; ---------------------------------------------------------------------------

loc_64215456:				; CODE XREF: _big2_cdataSectionTok:loc_64215346j
					; DATA XREF: .rdata:off_6422082Co
		mov	eax, [esp+10h+arg_8] ; jumptable 64215346 case 5
		sub	eax, ecx
		cmp	eax, 1
		jg	loc_642152C5	; jumptable 64215346 default case

loc_64215465:				; CODE XREF: _big2_cdataSectionTok+1B9j
					; _big2_cdataSectionTok+1DCj
		mov	eax, 0FFFFFFFEh
		jmp	loc_64215321
; ---------------------------------------------------------------------------
		align 10h

loc_64215470:				; CODE XREF: _big2_cdataSectionTok:loc_64215346j
					; DATA XREF: .rdata:off_6422082Co
		lea	eax, [ecx+2]	; jumptable 64215346 case 4
		cmp	eax, [esp+10h+arg_8]
		jz	short loc_642154C6
		movzx	ebx, byte ptr [ecx+2]
		test	bl, bl
		jnz	loc_642152D5
		movzx	esi, byte ptr [eax+1]
		mov	edx, esi
		cmp	dl, 5Dh
		jnz	loc_642152D9
		lea	eax, [ecx+4]
		cmp	eax, [esp+10h+arg_8]
		jz	short loc_642154C6
		cmp	byte ptr [ecx+4], 0
		jnz	short loc_642154A9
		cmp	byte ptr [eax+1], 3Eh
		jz	short loc_642154D0

loc_642154A9:				; CODE XREF: _big2_cdataSectionTok+231j
		sub	eax, 2
		lea	esi, [esi+0]
		jmp	loc_642152C8
; ---------------------------------------------------------------------------

loc_642154B5:				; CODE XREF: _big2_cdataSectionTok+35j
		and	eax, 0FFFFFFFEh
		jz	short loc_642154C6
		lea	eax, [ecx+eax]
		mov	[esp+10h+arg_8], eax
		jmp	loc_642152AB
; ---------------------------------------------------------------------------

loc_642154C6:				; CODE XREF: _big2_cdataSectionTok+8Fj
					; _big2_cdataSectionTok+207j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_64215321
; ---------------------------------------------------------------------------

loc_642154D0:				; CODE XREF: _big2_cdataSectionTok+237j
		add	ecx, 6
		mov	eax, 28h
		mov	[ebp+0], ecx
		jmp	loc_64215321
_big2_cdataSectionTok endp


; =============== S U B	R O U T	I N E =======================================


_big2_scanRef	proc near		; CODE XREF: _big2_contentTok+2CAp
					; _big2_contentTok+DB4p ...

var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 14h
		cmp	edx, ecx
		mov	[esp+14h+var_10], ebx
		mov	ebx, ecx
		mov	[esp+14h+var_C], esi
		mov	esi, [esp+14h+arg_0]
		mov	[esp+14h+var_8], edi
		mov	[esp+14h+var_4], ebp
		jz	loc_642156B3
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		mov	[esp+14h+var_11], cl
		jnz	short loc_64215524
		movzx	edi, byte ptr [edx+1]
		movzx	edi, byte ptr [eax+edi+4Ch]

loc_64215515:				; CODE XREF: _big2_scanRef+CBj
					; _big2_scanRef+D5j
		sub	edi, 5		; switch 25 cases
		cmp	edi, 18h
		ja	short loc_64215564 ; jumptable 6421551D	default	case
		jmp	ds:off_64220998[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215524:				; CODE XREF: _big2_scanRef+2Aj
		lea	edi, [ecx+28h]
		movzx	ebp, byte ptr [edx+1]
		mov	ecx, edi
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_64215580

loc_64215532:				; CODE XREF: _big2_scanRef+A6j
					; DATA XREF: .rdata:off_642209FCo
		mov	edi, ebp	; jumptable 64215586 default case

loc_64215534:				; CODE XREF: _big2_scanRef+C7j
					; _big2_scanRef+201j
		movzx	ecx, [esp+14h+var_11]
		movzx	ebp, ds:_nmstrtPages[ecx]
		mov	ecx, edi
		shr	cl, 5
		movzx	ecx, cl
		lea	ebp, [ecx+ebp*8]
		mov	ecx, edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		test	ds:_namingBitmap[ebp*4], edi
		jnz	loc_64215604	; jumptable 6421551D cases 22,24
					; jumptable 6421562F cases 22,24-27

loc_64215564:				; CODE XREF: _big2_scanRef+3Bj
					; _big2_scanRef+3Dj ...
		mov	[esi], edx	; jumptable 6421551D default case
		xor	eax, eax

loc_64215568:				; CODE XREF: _big2_scanRef+BCj
					; _big2_scanRef+1D8j ...
		mov	ebx, [esp+14h+var_10]
		mov	esi, [esp+14h+var_C]
		mov	edi, [esp+14h+var_8]
		mov	ebp, [esp+14h+var_4]
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64215580:				; CODE XREF: _big2_scanRef+50j
		and	edi, 0FFh
		jmp	ds:off_642209FC[edi*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64215590:				; CODE XREF: _big2_scanRef+3Dj
					; _big2_scanRef+A6j ...
		sub	ebx, edx	; jumptable 6421551D case 7
					; jumptable 64215586 cases 0-3
					; jumptable 6421562F case 7
					; jumptable 642156D6 cases 0-3
		cmp	ebx, 3
		jg	short loc_64215564 ; jumptable 6421551D	default	case

loc_64215597:				; CODE XREF: _big2_scanRef+161j
					; _big2_scanRef+16Bj
		mov	eax, 0FFFFFFFEh
		jmp	short loc_64215568
; ---------------------------------------------------------------------------
		align 10h

loc_642155A0:				; CODE XREF: _big2_scanRef+A6j
					; DATA XREF: .rdata:off_642209FCo
		mov	ecx, ebp	; jumptable 64215586 case 39
		mov	edi, ebp
		cmp	cl, 0FEh
		jb	short loc_64215534
		xor	edi, edi
		jmp	loc_64215515
; ---------------------------------------------------------------------------

loc_642155B0:				; CODE XREF: _big2_scanRef+A6j
					; DATA XREF: .rdata:off_642209FCo
		mov	edi, 8		; jumptable 64215586 cases 4-7
		jmp	loc_64215515
; ---------------------------------------------------------------------------
		align 10h

loc_642155C0:				; CODE XREF: _big2_scanRef+138j
		lea	edi, [ecx+28h]
		movzx	ebp, byte ptr [edx+1]
		mov	ecx, edi
		cmp	cl, 27h		; switch 40 cases
		jbe	loc_642156D0

loc_642155D2:				; CODE XREF: _big2_scanRef+1F6j
					; DATA XREF: .rdata:off_64220B00o
		mov	edi, ebp	; jumptable 642156D6 default case

loc_642155D4:				; CODE XREF: _big2_scanRef+267j
					; _big2_scanRef+291j
		movzx	ecx, [esp+14h+var_11]
		movzx	ebp, ds:_namePages[ecx]
		mov	ecx, edi
		shr	cl, 5
		movzx	ecx, cl
		lea	ebp, [ecx+ebp*8]
		mov	ecx, edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		test	ds:_namingBitmap[ebp*4], edi
		jz	loc_64215564	; jumptable 6421551D default case

loc_64215604:				; CODE XREF: _big2_scanRef+3Dj
					; _big2_scanRef+7Ej ...
		add	edx, 2		; jumptable 6421551D cases 22,24
					; jumptable 6421562F cases 22,24-27
		cmp	ebx, edx
		jz	loc_642156B3
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		mov	[esp+14h+var_11], cl
		jnz	short loc_642155C0
		movzx	edi, byte ptr [edx+1]
		movzx	edi, byte ptr [eax+edi+4Ch]

loc_64215623:				; CODE XREF: _big2_scanRef+26Fj
					; _big2_scanRef+279j
		sub	edi, 5		; switch 25 cases
		cmp	edi, 18h
		ja	loc_64215564	; jumptable 6421551D default case
		jmp	ds:off_64220A9C[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215636:				; CODE XREF: _big2_scanRef+3Dj
					; _big2_scanRef+14Fj
					; DATA XREF: ...
		sub	ebx, edx	; jumptable 6421551D case 5
					; jumptable 6421562F case 5
		cmp	ebx, 1
		jg	loc_64215564	; jumptable 6421551D default case
		jmp	loc_64215597
; ---------------------------------------------------------------------------

loc_64215646:				; CODE XREF: _big2_scanRef+3Dj
					; _big2_scanRef+14Fj
					; DATA XREF: ...
		sub	ebx, edx	; jumptable 6421551D case 6
					; jumptable 6421562F case 6
		cmp	ebx, 2
		jle	loc_64215597
		jmp	loc_64215564	; jumptable 6421551D default case
; ---------------------------------------------------------------------------

loc_64215656:				; CODE XREF: _big2_scanRef+3Dj
					; DATA XREF: .rdata:off_64220998o
		lea	ebp, [edx+2]	; jumptable 6421551D case 19
		cmp	ebx, ebp
		jz	short loc_642156B3
		movzx	edi, byte ptr [edx+2]
		mov	ecx, edi
		test	cl, cl
		jnz	short loc_642156C0
		movzx	edi, byte ptr [ebp+1]
		mov	ecx, edi
		cmp	cl, 78h
		jz	short loc_642156E6
		and	edi, 0FFh
		cmp	byte ptr [eax+edi+4Ch],	19h
		jnz	short loc_642156C0
		add	edx, 4
		cmp	ebx, edx
		jz	short loc_642156B3

loc_64215686:				; CODE XREF: _big2_scanRef+1D1j
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jnz	loc_64215564	; jumptable 6421551D default case
		movzx	ecx, byte ptr [edx+1]
		movzx	ecx, byte ptr [eax+ecx+4Ch]
		cmp	ecx, 12h
		jz	loc_642157B0
		cmp	ecx, 19h
		jnz	loc_64215564	; jumptable 6421551D default case
		add	edx, 2
		cmp	ebx, edx
		jnz	short loc_64215686

loc_642156B3:				; CODE XREF: _big2_scanRef+1Bj
					; _big2_scanRef+129j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_64215568
; ---------------------------------------------------------------------------
		align 10h

loc_642156C0:				; CODE XREF: _big2_scanRef+185j
					; _big2_scanRef+19Dj
		mov	[esi], ebp
		xor	eax, eax
		jmp	loc_64215568
; ---------------------------------------------------------------------------
		align 10h

loc_642156D0:				; CODE XREF: _big2_scanRef+ECj
		and	edi, 0FFh
		jmp	ds:off_64220B00[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642156DD:				; CODE XREF: _big2_scanRef+3Dj
					; DATA XREF: .rdata:off_64220998o
		movzx	edi, byte ptr [edx+1] ;	jumptable 6421551D case	29
		jmp	loc_64215534
; ---------------------------------------------------------------------------

loc_642156E6:				; CODE XREF: _big2_scanRef+190j
		lea	ecx, [edx+4]
		cmp	ebx, ecx
		jz	short loc_642156B3
		movzx	edx, byte ptr [edx+4]
		test	dl, dl
		jnz	loc_64215776
		movzx	edx, byte ptr [ecx+1]
		movzx	edi, byte ptr [eax+edx+4Ch]

loc_64215702:				; CODE XREF: _big2_scanRef+2A7j
					; _big2_scanRef+2BCj
		sub	edi, 18h
		cmp	edi, 1
		ja	short loc_64215730

loc_6421570A:				; CODE XREF: _big2_scanRef+24Ej
		add	ecx, 2
		cmp	ebx, ecx
		jz	short loc_642156B3
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jnz	short loc_64215730
		movzx	edx, byte ptr [ecx+1]
		movzx	edx, byte ptr [eax+edx+4Ch]
		cmp	edx, 12h
		jz	short loc_642157A1
		jl	short loc_64215730
		sub	edx, 18h
		cmp	edx, 1
		jbe	short loc_6421570A

loc_64215730:				; CODE XREF: _big2_scanRef+228j
					; _big2_scanRef+236j ...
		mov	[esi], ecx
		xor	eax, eax
		jmp	loc_64215568
; ---------------------------------------------------------------------------
		align 10h

loc_64215740:				; CODE XREF: _big2_scanRef+1F6j
					; DATA XREF: .rdata:off_64220B00o
		mov	ecx, ebp	; jumptable 642156D6 case 39
		mov	edi, ebp
		cmp	cl, 0FEh
		jb	loc_642155D4
		xor	edi, edi
		jmp	loc_64215623
; ---------------------------------------------------------------------------

loc_64215754:				; CODE XREF: _big2_scanRef+1F6j
					; DATA XREF: .rdata:off_64220B00o
		mov	edi, 8		; jumptable 642156D6 cases 4-7
		jmp	loc_64215623
; ---------------------------------------------------------------------------

loc_6421575E:				; CODE XREF: _big2_scanRef+14Fj
					; DATA XREF: .rdata:off_64220A9Co
		add	edx, 2		; jumptable 6421562F case 18
		mov	eax, 9
		mov	[esi], edx
		jmp	loc_64215568
; ---------------------------------------------------------------------------

loc_6421576D:				; CODE XREF: _big2_scanRef+14Fj
					; DATA XREF: .rdata:off_64220A9Co
		movzx	edi, byte ptr [edx+1] ;	jumptable 6421562F case	29
		jmp	loc_642155D4
; ---------------------------------------------------------------------------

loc_64215776:				; CODE XREF: _big2_scanRef+213j
		cmp	dl, 0D8h
		movzx	ebp, byte ptr [ecx+1]
		jb	short loc_64215730
		cmp	dl, 0DBh
		mov	edi, 7
		jbe	loc_64215702
		cmp	dl, 0FFh
		jnz	short loc_64215730
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	short loc_64215730
		xor	di, di
		jmp	loc_64215702
; ---------------------------------------------------------------------------

loc_642157A1:				; CODE XREF: _big2_scanRef+244j
		add	ecx, 2
		mov	eax, 0Ah
		mov	[esi], ecx
		jmp	loc_64215568
; ---------------------------------------------------------------------------

loc_642157B0:				; CODE XREF: _big2_scanRef+1BDj
		add	edx, 2
		mov	eax, 0Ah
		mov	[esi], edx
		jmp	loc_64215568
_big2_scanRef	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_contentTok proc near		; DATA XREF: .rdata:64224084o
					; .rdata:64224524o

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 30h
		mov	eax, 0FFFFFFFCh
		mov	[esp+30h+var_10], ebx
		mov	edx, [esp+30h+arg_4]
		mov	ebx, [esp+30h+arg_8]
		mov	[esp+30h+var_C], esi
		mov	esi, [esp+30h+arg_0]
		mov	[esp+30h+var_8], edi
		mov	edi, [esp+30h+arg_C]
		mov	[esp+30h+var_4], ebp
		cmp	edx, ebx
		jz	loc_642158C0
		mov	ecx, ebx
		sub	ecx, edx
		test	cl, 1
		jnz	loc_64215F47

loc_642157FD:				; CODE XREF: _big2_contentTok+795j
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	loc_642158D4
		movzx	eax, byte ptr [edx+1]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		ja	loc_642158E3	; jumptable 6421581A default case

loc_6421581A:				; CODE XREF: _big2_contentTok+235j
					; _big2_contentTok+250j
		jmp	ds:off_64220BA0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215821:				; CODE XREF: _big2_contentTok+4B5j
		lea	ecx, [eax+4]
		sub	ebx, ecx
		cmp	ebx, 0Bh
		jle	loc_64215E02
		cmp	byte ptr [edx+2], 0
		jnz	loc_642159B0
		cmp	byte ptr [ecx+1], 43h
		jnz	loc_642159B0
		cmp	byte ptr [edx+4], 0
		lea	ecx, [eax+6]
		jnz	loc_642159B0
		cmp	byte ptr [ecx+1], 44h
		jnz	loc_642159B0
		cmp	byte ptr [edx+6], 0
		lea	ecx, [eax+8]
		jnz	loc_642159B0
		cmp	byte ptr [ecx+1], 41h
		jnz	loc_642159B0
		cmp	byte ptr [edx+8], 0
		lea	ecx, [edx+8]
		jnz	loc_642159B0
		cmp	byte ptr [ecx+1], 54h
		jnz	loc_642159B0
		lea	ecx, [edx+0Ah]
		cmp	byte ptr [ecx],	0
		jnz	loc_642159B0
		cmp	byte ptr [ecx+1], 41h
		jnz	loc_642159B0
		lea	ecx, [edx+0Ch]
		cmp	byte ptr [ecx],	0
		jnz	loc_642159B0
		cmp	byte ptr [ecx+1], 5Bh
		xchg	ax, ax
		jnz	loc_642159B0
		add	edx, 0Eh
		mov	eax, 8
		mov	[edi], edx

loc_642158C0:				; CODE XREF: _big2_contentTok+2Aj
					; _big2_contentTok+197j ...
		mov	ebx, [esp+30h+var_10]
		mov	esi, [esp+30h+var_C]
		mov	edi, [esp+30h+var_8]
		mov	ebp, [esp+30h+var_4]
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_642158D4:				; CODE XREF: _big2_contentTok+42j
		add	eax, 28h
		movzx	ecx, byte ptr [edx+1]
		cmp	al, 27h		; switch 40 cases
		jbe	loc_642159E2

loc_642158E3:				; CODE XREF: _big2_contentTok+54j
					; _big2_contentTok+225j ...
		lea	eax, [edx+2]	; jumptable 6421581A default case

loc_642158E6:				; CODE XREF: _big2_contentTok+31Cj
					; _big2_contentTok+32Dj ...
		cmp	ebx, eax
		jz	loc_64215F60
		movzx	edx, byte ptr [eax]
		movzx	ebp, byte ptr [eax+1]
		mov	ecx, edx
		jmp	short loc_64215924
; ---------------------------------------------------------------------------
		align 10h

loc_64215900:				; CODE XREF: _big2_contentTok+166j
		and	ebp, 0FFh
		movzx	edx, byte ptr [esi+ebp+4Ch]
		cmp	edx, 0Ah	; switch 11 cases
		jbe	short loc_64215965

loc_64215910:				; CODE XREF: _big2_contentTok+16Ej
					; _big2_contentTok+173j ...
		lea	edx, [eax+2]	; jumptable 64215933 default case

loc_64215913:				; CODE XREF: _big2_contentTok+1BCj
					; _big2_contentTok+20Cj
		cmp	ebx, edx
		jz	loc_64215F60

loc_6421591B:				; CODE XREF: _big2_contentTok+1CBj
					; _big2_contentTok+1D1j ...
		movzx	ecx, byte ptr [edx]
		mov	eax, edx
		movzx	ebp, byte ptr [edx+1]

loc_64215924:				; CODE XREF: _big2_contentTok+137j
					; _big2_contentTok+37Bj ...
		test	cl, cl
		jz	short loc_64215900
		add	ecx, 28h
		cmp	cl, 27h		; switch 40 cases
		ja	short loc_64215910 ; jumptable 64215933	default	case
		movzx	ecx, cl
		jmp	ds:off_64220BCC[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64215940:				; CODE XREF: _big2_contentTok:loc_64215965j
					; DATA XREF: .rdata:off_64220C6Co
		mov	edx, ebx	; jumptable 64215965 case 5
		sub	edx, eax
		cmp	edx, 1
		jg	short loc_64215910 ; jumptable 64215933	default	case
		lea	esi, [esi+0]

loc_64215950:				; CODE XREF: _big2_contentTok+173j
					; _big2_contentTok:loc_64215965j ...
		mov	[edi], eax	; jumptable 64215933 cases 4-7
					; jumptable 64215965 cases 0-3,8-10
		mov	eax, 6
		jmp	loc_642158C0
; ---------------------------------------------------------------------------
		align 10h

loc_64215960:				; CODE XREF: _big2_contentTok+173j
					; DATA XREF: .rdata:off_64220BCCo
		mov	edx, 7		; jumptable 64215933 cases 0-3

loc_64215965:				; CODE XREF: _big2_contentTok+14Ej
					; _big2_contentTok+220j
		jmp	ds:off_64220C6C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64215970:				; CODE XREF: _big2_contentTok:loc_64215965j
					; DATA XREF: .rdata:off_64220C6Co
		mov	edx, ebx	; jumptable 64215965 case 6
		sub	edx, eax
		cmp	edx, 2
		jle	short loc_64215950 ; jumptable 64215933	cases 4-7
					; jumptable 64215965 cases 0-3,8-10
		lea	edx, [eax+3]
		jmp	short loc_64215913
; ---------------------------------------------------------------------------
		align 10h

loc_64215980:				; CODE XREF: _big2_contentTok:loc_64215965j
					; DATA XREF: .rdata:off_64220C6Co
		lea	edx, [eax+2]	; jumptable 64215965 case 4
		cmp	edx, ebx
		jz	short loc_64215950 ; jumptable 64215933	cases 4-7
					; jumptable 64215965 cases 0-3,8-10
		cmp	byte ptr [eax+2], 0
		jnz	short loc_6421591B
		cmp	byte ptr [eax+3], 5Dh
		jnz	short loc_6421591B
		lea	ecx, [eax+4]
		cmp	ecx, ebx
		jz	short loc_64215950 ; jumptable 64215933	cases 4-7
					; jumptable 64215965 cases 0-3,8-10
		cmp	byte ptr [eax+4], 0
		xchg	ax, ax
		jnz	loc_6421591B
		cmp	byte ptr [eax+5], 3Eh
		jnz	loc_6421591B

loc_642159B0:				; CODE XREF: _big2_contentTok+73j
					; _big2_contentTok+7Dj	...
		mov	[edi], ecx
		xor	eax, eax
		jmp	loc_642158C0
; ---------------------------------------------------------------------------
		align 10h

loc_642159C0:				; CODE XREF: _big2_contentTok:loc_64215965j
					; DATA XREF: .rdata:off_64220C6Co
		mov	edx, ebx	; jumptable 64215965 case 7
		sub	edx, eax
		cmp	edx, 3
		jle	short loc_64215950 ; jumptable 64215933	cases 4-7
					; jumptable 64215965 cases 0-3,8-10
		lea	edx, [eax+4]
		jmp	loc_64215913
; ---------------------------------------------------------------------------

loc_642159D1:				; CODE XREF: _big2_contentTok+173j
					; DATA XREF: .rdata:off_64220BCCo
		mov	ecx, ebp	; jumptable 64215933 case 39
		cmp	cl, 0FEh
		jb	loc_64215910	; jumptable 64215933 default case
		xor	edx, edx
		xchg	ax, ax
		jmp	short loc_64215965
; ---------------------------------------------------------------------------

loc_642159E2:				; CODE XREF: _big2_contentTok+11Dj
		movzx	eax, al
		jmp	ds:off_64220C98[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_642159F0:				; CODE XREF: _big2_contentTok+225j
					; DATA XREF: .rdata:off_64220C98o
		mov	eax, 7		; jumptable 642159E5 cases 0-3
		jmp	loc_6421581A
; ---------------------------------------------------------------------------
		align 10h

loc_64215A00:				; CODE XREF: _big2_contentTok+225j
					; DATA XREF: .rdata:off_64220C98o
		cmp	cl, 0FEh	; jumptable 642159E5 case 39
		jb	loc_642158E3	; jumptable 6421581A default case
		xor	eax, eax
		nop
		lea	esi, [esi+0]
		jmp	loc_6421581A
; ---------------------------------------------------------------------------

loc_64215A15:				; CODE XREF: _big2_contentTok+9D0j
		cmp	eax, 18h
		jz	loc_6421677E
		cmp	eax, 1Dh
		jz	loc_642167B6
		cmp	eax, 16h
		jz	loc_6421677E

loc_64215A30:				; CODE XREF: _big2_contentTok+F81j
					; _big2_contentTok+1006j
		mov	edi, [esp+30h+var_28]

loc_64215A34:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; _big2_contentTok+225j ...
		mov	[edi], edx	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		xor	eax, eax
		jmp	loc_642158C0
; ---------------------------------------------------------------------------
		align 10h

loc_64215A40:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; DATA XREF: .rdata:off_64220BA0o
		lea	ecx, [edx+2]	; jumptable 6421581A case 9
		mov	eax, 0FFFFFFFDh
		cmp	ecx, ebx
		jz	loc_642158C0
		cmp	byte ptr [edx+2], 0
		jnz	short loc_64215A64
		movzx	eax, byte ptr [ecx+1]
		cmp	byte ptr [esi+eax+4Ch],	0Ah
		jnz	short loc_64215A64
		lea	ecx, [edx+4]

loc_64215A64:				; CODE XREF: _big2_contentTok+294j
					; _big2_contentTok+29Fj
		mov	[edi], ecx
		mov	eax, 7
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215A70:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; DATA XREF: .rdata:off_64220BA0o
		add	edx, 2		; jumptable 6421581A case 10
		mov	eax, 7
		mov	[edi], edx
		jmp	loc_642158C0
; ---------------------------------------------------------------------------
		align 10h

loc_64215A80:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; DATA XREF: .rdata:off_64220BA0o
		add	edx, 2		; jumptable 6421581A case 3
		mov	ecx, ebx
		mov	eax, esi
		mov	[esp+30h+var_30], edi
		call	_big2_scanRef
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215A94:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; DATA XREF: .rdata:off_64220BA0o
		lea	eax, [edx+2]	; jumptable 6421581A case 2
		cmp	ebx, eax
		jz	loc_64215E02
		movzx	ecx, byte ptr [edx+2]
		test	cl, cl
		mov	byte ptr [esp+30h+var_24], cl
		jnz	loc_64215B50
		movzx	ebp, byte ptr [eax+1]
		movzx	ebp, byte ptr [esi+ebp+4Ch]

loc_64215AB8:				; CODE XREF: _big2_contentTok+7CAj
					; _big2_contentTok+7D4j
		sub	ebp, 5		; switch 25 cases
		cmp	ebp, 18h
		ja	loc_64215BA0	; jumptable 64215AC4 default case
		jmp	ds:off_64220D38[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64215AD0:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; DATA XREF: .rdata:off_64220BA0o
		mov	eax, ebx	; jumptable 6421581A case 7
		sub	eax, edx
		cmp	eax, 3
		jle	short loc_64215B00
		lea	eax, [edx+4]
		jmp	loc_642158E6
; ---------------------------------------------------------------------------

loc_64215AE1:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; DATA XREF: .rdata:off_64220BA0o
		mov	eax, ebx	; jumptable 6421581A case 6
		sub	eax, edx
		cmp	eax, 2
		jle	short loc_64215B00
		lea	eax, [edx+3]
		jmp	loc_642158E6
; ---------------------------------------------------------------------------

loc_64215AF2:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; DATA XREF: .rdata:off_64220BA0o
		mov	eax, ebx	; jumptable 6421581A case 5
		sub	eax, edx
		cmp	eax, 1
		jg	loc_642158E3	; jumptable 6421581A default case
		nop

loc_64215B00:				; CODE XREF: _big2_contentTok+317j
					; _big2_contentTok+328j ...
		mov	eax, 0FFFFFFFEh
		jmp	loc_642158C0
; ---------------------------------------------------------------------------
		align 10h

loc_64215B10:				; CODE XREF: _big2_contentTok:loc_6421581Aj
					; DATA XREF: .rdata:off_64220BA0o
		lea	eax, [edx+2]	; jumptable 6421581A case 4
		cmp	eax, ebx
		jz	loc_64215F99
		movzx	ecx, byte ptr [edx+2]
		test	cl, cl
		mov	byte ptr [esp+30h+var_28], cl
		jnz	short loc_64215B40
		movzx	ebp, byte ptr [eax+1]
		mov	ecx, ebp
		cmp	cl, 5Dh
		jz	loc_6421602D
		movzx	ecx, byte ptr [esp+30h+var_28]
		jmp	loc_64215924
; ---------------------------------------------------------------------------

loc_64215B40:				; CODE XREF: _big2_contentTok+365j
		movzx	ebp, byte ptr [eax+1]
		jmp	loc_64215924
; ---------------------------------------------------------------------------
		align 10h

loc_64215B50:				; CODE XREF: _big2_contentTok+2E9j
		movzx	ecx, byte ptr [eax+1]
		mov	byte ptr [esp+30h+var_28], cl
		movzx	ecx, byte ptr [esp+30h+var_24]
		lea	ebp, [ecx+28h]
		mov	ecx, ebp
		cmp	cl, 27h		; switch 40 cases
		jbe	loc_64215F70

loc_64215B6B:				; CODE XREF: _big2_contentTok+538j
					; _big2_contentTok+7B6j ...
		movzx	ecx, byte ptr [esp+30h+var_24] ; jumptable 64215F76 default case
		movzx	edx, byte ptr [esp+30h+var_28]
		movzx	ecx, ds:_nmstrtPages[ecx]
		shr	dl, 5
		movzx	edx, dl
		lea	ebp, [edx+ecx*8]
		movzx	ecx, byte ptr [esp+30h+var_28]
		mov	edx, 1
		and	ecx, 1Fh
		shl	edx, cl
		test	ds:_namingBitmap[ebp*4], edx
		jnz	short loc_64215BD5 ; jumptable 64215AC4	cases 22,24
		lea	esi, [esi+0]

loc_64215BA0:				; CODE XREF: _big2_contentTok+2FEj
					; _big2_contentTok+304j ...
		mov	[edi], eax	; jumptable 64215AC4 default case
		xor	eax, eax
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215BA9:				; CODE XREF: _big2_contentTok+304j
					; _big2_contentTok+442j ...
		sub	ebx, eax	; jumptable 64215AC4 case 7
					; jumptable 64215C02 case 7
					; jumptable 64215DA1 case 7
					; jumptable 64215E33 case 7
					; jumptable 64215F76 cases 0-3
					; jumptable 64216005 cases 0-3
		cmp	ebx, 3
		jle	loc_64215B00
		jmp	short loc_64215BA0 ; jumptable 64215AC4	default	case
; ---------------------------------------------------------------------------

loc_64215BB6:				; CODE XREF: _big2_contentTok+304j
					; _big2_contentTok+442j ...
		sub	ebx, eax	; jumptable 64215AC4 case 6
					; jumptable 64215C02 case 6
					; jumptable 64215DA1 case 6
					; jumptable 64215E33 case 6
		cmp	ebx, 2
		jle	loc_64215B00
		jmp	short loc_64215BA0 ; jumptable 64215AC4	default	case
; ---------------------------------------------------------------------------

loc_64215BC3:				; CODE XREF: _big2_contentTok+304j
					; _big2_contentTok+442j ...
		sub	ebx, eax	; jumptable 64215AC4 case 5
					; jumptable 64215C02 case 5
					; jumptable 64215DA1 case 5
					; jumptable 64215E33 case 5
		cmp	ebx, 1
		jg	short loc_64215BA0 ; jumptable 64215AC4	default	case
		lea	esi, [esi+0]
		jmp	loc_64215B00
; ---------------------------------------------------------------------------

loc_64215BD5:				; CODE XREF: _big2_contentTok+304j
					; _big2_contentTok+3DBj
					; DATA XREF: ...
		add	eax, 2		; jumptable 64215AC4 cases 22,24
		cmp	ebx, eax
		jz	loc_64215E02
		xor	edx, edx
		mov	[esp+30h+var_24], edx

loc_64215BE6:				; CODE XREF: _big2_contentTok+63Cj
		movzx	ecx, byte ptr [eax]
		test	cl, cl
		jnz	loc_64215FA5
		movzx	ebp, byte ptr [eax+1]
		movzx	ebp, byte ptr [esi+ebp+4Ch]

loc_64215BFA:				; CODE XREF: _big2_contentTok+85Ej
					; _big2_contentTok+868j
		sub	ebp, 5		; switch 25 cases
		cmp	ebp, 18h
		ja	short loc_64215BA0 ; jumptable 64215AC4	default	case
		jmp	ds:off_64220D9C[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215C09:				; CODE XREF: _big2_contentTok+304j
					; DATA XREF: .rdata:off_64220D38o
		lea	edx, [eax+2]	; jumptable 64215AC4 case 15
		mov	ecx, ebx
		mov	eax, esi
		mov	[esp+30h+var_30], edi
		call	_big2_scanPi
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215C1D:				; CODE XREF: _big2_contentTok+304j
					; DATA XREF: .rdata:off_64220D38o
		lea	ebp, [eax+2]	; jumptable 64215AC4 case 17
		cmp	ebx, ebp
		jz	loc_64215E02
		movzx	eax, byte ptr [eax+2]
		test	al, al
		xchg	ax, ax
		jnz	loc_64215FC1
		movzx	ecx, byte ptr [ebp+1]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64215C3F:				; CODE XREF: _big2_contentTok+830j
					; _big2_contentTok+83Aj
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	loc_64215D3D	; jumptable 64215C4B default case
		jmp	ds:off_64220E00[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215C52:				; CODE XREF: _big2_contentTok+304j
					; DATA XREF: .rdata:off_64220D38o
		lea	edx, [eax+2]	; jumptable 64215AC4 case 16
		cmp	ebx, edx
		jz	loc_64215E02
		movzx	ecx, byte ptr [eax+2]
		test	cl, cl
		jnz	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		movzx	ecx, byte ptr [edx+1]
		movzx	ecx, byte ptr [esi+ecx+4Ch]
		cmp	ecx, 14h
		jz	loc_64215821
		cmp	ecx, 1Bh
		jnz	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		lea	ecx, [eax+4]
		cmp	ebx, ecx
		jz	loc_64215E02
		cmp	byte ptr [edx+2], 0
		jnz	loc_642159B0
		cmp	byte ptr [ecx+1], 2Dh
		lea	esi, [esi+0]
		jnz	loc_642159B0
		add	eax, 6

loc_64215CA9:				; CODE XREF: _big2_contentTok+529j
					; _big2_contentTok+A69j ...
		cmp	ebx, eax
		jz	loc_64215E02
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_642167DD
		movzx	edx, byte ptr [eax+1]
		movzx	edx, byte ptr [esi+edx+4Ch]
		cmp	edx, 6
		jz	loc_64216798
		jg	loc_64216204
		cmp	edx, 1
		jle	loc_64215BA0	; jumptable 64215AC4 default case
		cmp	edx, 5
		jz	loc_642167CB

loc_64215CE6:				; CODE XREF: _big2_contentTok+B03j
					; _big2_contentTok+1012j ...
		add	eax, 2
		jmp	short loc_64215CA9
; ---------------------------------------------------------------------------
		align 10h

loc_64215CF0:				; CODE XREF: _big2_contentTok+304j
					; DATA XREF: .rdata:off_64220D38o
		movzx	edx, byte ptr [eax+1] ;	jumptable 64215AC4 case	29
		mov	byte ptr [esp+30h+var_28], dl
		jmp	loc_64215B6B	; jumptable 64215F76 default case
; ---------------------------------------------------------------------------

loc_64215CFD:				; CODE XREF: _big2_contentTok+48Bj
					; DATA XREF: .rdata:off_64220E00o
		movzx	ecx, byte ptr [ebp+1] ;	jumptable 64215C4B case	29
		mov	byte ptr [esp+30h+var_28], cl

loc_64215D05:				; CODE XREF: _big2_contentTok+80Fj
					; _big2_contentTok+818j ...
		movzx	eax, al		; jumptable 64215FD8 default case
		movzx	ecx, ds:_nmstrtPages[eax]
		movzx	eax, byte ptr [esp+30h+var_28]
		shr	al, 5
		movzx	eax, al
		lea	eax, [eax+ecx*8]
		movzx	ecx, byte ptr [esp+30h+var_28]
		mov	[esp+30h+var_24], eax
		mov	eax, 1
		and	ecx, 1Fh
		shl	eax, cl
		mov	ecx, [esp+30h+var_24]
		test	ds:_namingBitmap[ecx*4], eax
		jnz	short loc_64215D65 ; jumptable 64215C4B	cases 22,24

loc_64215D3D:				; CODE XREF: _big2_contentTok+485j
					; _big2_contentTok+48Bj ...
		mov	[edi], ebp	; jumptable 64215C4B default case
		xor	eax, eax
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215D46:				; CODE XREF: _big2_contentTok+48Bj
					; DATA XREF: .rdata:off_64220E00o
		sub	ebx, ebp	; jumptable 64215C4B case 6
		cmp	ebx, 2
		jle	loc_64215B00
		jmp	short loc_64215D3D ; jumptable 64215C4B	default	case
; ---------------------------------------------------------------------------

loc_64215D53:				; CODE XREF: _big2_contentTok+48Bj
					; DATA XREF: .rdata:off_64220E00o
		sub	ebx, ebp	; jumptable 64215C4B case 5
		cmp	ebx, 1
		jg	short loc_64215D3D ; jumptable 64215C4B	default	case
		lea	esi, [esi+0]
		jmp	loc_64215B00
; ---------------------------------------------------------------------------

loc_64215D65:				; CODE XREF: _big2_contentTok+48Bj
					; _big2_contentTok+57Bj
					; DATA XREF: ...
		add	ebp, 2		; jumptable 64215C4B cases 22,24
		cmp	ebx, ebp
		jz	loc_64215E02
		add	edx, 8
		mov	[esp+30h+var_2C], esi

loc_64215D77:				; CODE XREF: _big2_contentTok+77Cj
		movzx	esi, byte ptr [edx-2]
		lea	eax, [edx-2]
		mov	ecx, esi
		test	cl, cl
		jnz	loc_64215ED5
		movzx	ebp, byte ptr [edx-1]
		mov	ecx, [esp+30h+var_2C]
		movzx	ebp, byte ptr [ecx+ebp+4Ch]

loc_64215D95:				; CODE XREF: _big2_contentTok+730j
					; _big2_contentTok+996j
		sub	ebp, 5		; switch 25 cases
		cmp	ebp, 18h
		ja	loc_64215BA0	; jumptable 64215AC4 default case
		jmp	ds:off_64220E64[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215DA8:				; CODE XREF: _big2_contentTok+48Bj
					; _big2_contentTok+818j
					; DATA XREF: ...
		sub	ebx, ebp	; jumptable 64215C4B case 7
					; jumptable 64215FD8 cases 0-3
		cmp	ebx, 3
		jle	loc_64215B00
		jmp	short loc_64215D3D ; jumptable 64215C4B	default	case
; ---------------------------------------------------------------------------

loc_64215DB5:				; CODE XREF: _big2_contentTok+442j
					; DATA XREF: .rdata:off_64220D9Co
		movzx	ebp, byte ptr [eax+1] ;	jumptable 64215C02 case	29

loc_64215DB9:				; CODE XREF: _big2_contentTok+7FCj
					; _big2_contentTok+856j
		movzx	ecx, cl
		movzx	ecx, ds:_namePages[ecx]
		mov	[esp+30h+var_28], ecx
		mov	edx, [esp+30h+var_28]
		mov	ecx, ebp
		shr	cl, 5
		movzx	ecx, cl
		lea	ecx, [ecx+edx*8]
		mov	[esp+30h+var_28], ecx
		mov	edx, [esp+30h+var_28]
		mov	ecx, ebp
		and	ecx, 1Fh
		mov	ebp, 1
		shl	ebp, cl
		test	ds:_namingBitmap[edx*4], ebp
		jz	loc_64215BA0	; jumptable 64215AC4 default case

loc_64215DF7:				; CODE XREF: _big2_contentTok+442j
					; DATA XREF: .rdata:off_64220D9Co
		add	eax, 2		; jumptable 64215C02 cases 22,24-27

loc_64215DFA:				; CODE XREF: _big2_contentTok+701j
		cmp	ebx, eax
		jnz	loc_64215BE6

loc_64215E02:				; CODE XREF: _big2_contentTok+69j
					; _big2_contentTok+2D9j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215E0C:				; CODE XREF: _big2_contentTok+442j
					; _big2_contentTok+673j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64215C02 cases 9,10,21
					; jumptable 64215E33 cases 9,10,21
		cmp	ebx, eax
		jz	short loc_64215E02
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_64216055
		movzx	ecx, byte ptr [eax+1]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64215E27:				; CODE XREF: _big2_contentTok+A18j
					; _big2_contentTok+AE7j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	loc_64215BA0	; jumptable 64215AC4 default case
		jmp	ds:off_64220EC8[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215E3A:				; CODE XREF: _big2_contentTok+442j
					; _big2_contentTok+673j
					; DATA XREF: ...
		lea	edx, [eax+2]	; jumptable 64215C02 case 17
					; jumptable 64215E33 case 17
		cmp	ebx, edx
		jz	short loc_64215E02
		cmp	byte ptr [eax+2], 0
		jnz	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		cmp	byte ptr [edx+1], 3Eh
		nop
		jnz	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		add	eax, 4
		mov	[edi], eax
		mov	eax, 4
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215E65:				; CODE XREF: _big2_contentTok+442j
					; DATA XREF: .rdata:off_64220D9Co
		cmp	[esp+30h+var_24], 0 ; jumptable	64215C02 case 23
		jnz	loc_64215BA0	; jumptable 64215AC4 default case
		lea	edx, [eax+2]
		cmp	ebx, edx
		jz	short loc_64215E02
		movzx	ecx, byte ptr [eax+2]
		test	cl, cl
		jnz	loc_642160E4
		movzx	eax, byte ptr [edx+1]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 7
		jz	loc_64216292
		jle	loc_6421619A
		cmp	eax, 18h
		xchg	ax, ax
		jz	short loc_64215EB6
		cmp	eax, 1Dh
		jz	loc_642167AD
		cmp	eax, 16h
		xchg	ax, ax
		jnz	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7

loc_64215EB6:				; CODE XREF: _big2_contentTok+6E0j
					; _big2_contentTok+96Ej
		lea	eax, [edx+2]
		mov	[esp+30h+var_24], 1
		jmp	loc_64215DFA
; ---------------------------------------------------------------------------

loc_64215EC6:				; CODE XREF: _big2_contentTok+442j
					; _big2_contentTok+673j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64215C02 case 11
					; jumptable 64215E33 case 11
		mov	[edi], eax
		mov	eax, 2
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215ED5:				; CODE XREF: _big2_contentTok+5C2j
		movzx	ecx, byte ptr [edx-1]
		mov	byte ptr [esp+30h+var_28], cl
		mov	ecx, esi
		cmp	cl, 0DFh
		ja	loc_64216139
		cmp	cl, 0DCh
		mov	ebp, 8
		jnb	loc_64215D95
		cmp	cl, 0D8h
		jnb	loc_64215BA9	; jumptable 64215AC4 case 7
					; jumptable 64215C02 case 7
					; jumptable 64215DA1 case 7
					; jumptable 64215E33 case 7
					; jumptable 64215F76 cases 0-3
					; jumptable 64216005 cases 0-3

loc_64215EFF:				; CODE XREF: _big2_contentTok+97Ej
		movzx	ebp, byte ptr [esp+30h+var_28]

loc_64215F04:				; CODE XREF: _big2_contentTok+98Ej
					; _big2_contentTok+FD3j
		and	esi, 0FFh
		mov	ecx, ebp
		movzx	esi, ds:_namePages[esi]
		shr	cl, 5
		movzx	ecx, cl
		lea	esi, [ecx+esi*8]
		mov	ecx, ebp
		and	ecx, 1Fh
		mov	ebp, 1
		shl	ebp, cl
		test	ds:_namingBitmap[esi*4], ebp
		jz	loc_64215BA0	; jumptable 64215AC4 default case

loc_64215F35:				; CODE XREF: _big2_contentTok+5E1j
					; DATA XREF: .rdata:off_64220E64o
		mov	eax, edx	; jumptable 64215DA1 cases 22-27
		add	edx, 2
		cmp	ebx, eax
		jnz	loc_64215D77
		jmp	loc_64215E02
; ---------------------------------------------------------------------------

loc_64215F47:				; CODE XREF: _big2_contentTok+37j
		and	ecx, 0FFFFFFFEh
		mov	al, 0FFh
		jz	loc_642158C0
		lea	ebx, [edx+ecx]
		jmp	loc_642157FD
; ---------------------------------------------------------------------------
		align 10h

loc_64215F60:				; CODE XREF: _big2_contentTok+128j
					; _big2_contentTok+155j
		mov	[edi], ebx
		mov	eax, 6
		jmp	loc_642158C0
; ---------------------------------------------------------------------------
		align 10h

loc_64215F70:				; CODE XREF: _big2_contentTok+3A5j
		and	ebp, 0FFh
		jmp	ds:off_64220F2C[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215F7D:				; CODE XREF: _big2_contentTok+7B6j
					; DATA XREF: .rdata:off_64220F2Co
		cmp	byte ptr [esp+30h+var_28], 0FEh	; jumptable 64215F76 case 39
		jb	loc_64215B6B	; jumptable 64215F76 default case
		xor	ebp, ebp
		jmp	loc_64215AB8
; ---------------------------------------------------------------------------

loc_64215F8F:				; CODE XREF: _big2_contentTok+7B6j
					; DATA XREF: .rdata:off_64220F2Co
		mov	ebp, 8		; jumptable 64215F76 cases 4-7
		jmp	loc_64215AB8
; ---------------------------------------------------------------------------

loc_64215F99:				; CODE XREF: _big2_contentTok+355j
					; _big2_contentTok+872j
		mov	eax, 0FFFFFFFBh
		xchg	ax, ax
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64215FA5:				; CODE XREF: _big2_contentTok+42Bj
		movzx	edx, byte ptr [eax+1]
		lea	ebp, [ecx+28h]
		mov	byte ptr [esp+30h+var_28], dl
		mov	edx, ebp
		cmp	dl, 27h
		jbe	short loc_64215FFF

loc_64215FB7:				; CODE XREF: _big2_contentTok+845j
					; DATA XREF: .rdata:6422108Co ...
		movzx	ebp, byte ptr [esp+30h+var_28] ; jumptable 64216005 cases 8-38
		jmp	loc_64215DB9
; ---------------------------------------------------------------------------

loc_64215FC1:				; CODE XREF: _big2_contentTok+470j
		movzx	ecx, byte ptr [ebp+1]
		mov	byte ptr [esp+30h+var_28], cl
		lea	ecx, [eax+28h]
		cmp	cl, 27h		; switch 40 cases
		ja	loc_64215D05	; jumptable 64215FD8 default case
		movzx	ecx, cl
		jmp	ds:off_64220FCC[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64215FDF:				; CODE XREF: _big2_contentTok+818j
					; DATA XREF: .rdata:off_64220FCCo
		cmp	byte ptr [esp+30h+var_28], 0FEh	; jumptable 64215FD8 case 39
		jb	loc_64215D05	; jumptable 64215FD8 default case
		xor	ecx, ecx
		lea	esi, [esi+0]
		jmp	loc_64215C3F
; ---------------------------------------------------------------------------

loc_64215FF5:				; CODE XREF: _big2_contentTok+818j
					; DATA XREF: .rdata:off_64220FCCo
		mov	ecx, 8		; jumptable 64215FD8 cases 4-7
		jmp	loc_64215C3F
; ---------------------------------------------------------------------------

loc_64215FFF:				; CODE XREF: _big2_contentTok+7F5j
		and	ebp, 0FFh	; switch 256 cases
		jmp	ds:off_6422106C[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421600C:				; CODE XREF: _big2_contentTok+845j
					; DATA XREF: .rdata:64221108o
		movzx	ebp, byte ptr [esp+30h+var_28] ; jumptable 64216005 case 39
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	loc_64215DB9
		xor	ebp, ebp
		jmp	loc_64215BFA
; ---------------------------------------------------------------------------

loc_64216023:				; CODE XREF: _big2_contentTok+845j
					; DATA XREF: .rdata:6422107Co ...
		mov	ebp, 8		; jumptable 64216005 cases 4-7
		jmp	loc_64215BFA
; ---------------------------------------------------------------------------

loc_6421602D:				; CODE XREF: _big2_contentTok+370j
		lea	eax, [edx+4]
		cmp	eax, ebx
		jz	loc_64215F99
		cmp	byte ptr [edx+4], 0
		jnz	short loc_64216048
		cmp	byte ptr [eax+1], 3Eh
		jz	loc_64215BA0	; jumptable 64215AC4 default case

loc_64216048:				; CODE XREF: _big2_contentTok+87Cj
		sub	eax, 2
		nop
		lea	esi, [esi+0]
		jmp	loc_642158E6
; ---------------------------------------------------------------------------

loc_64216055:				; CODE XREF: _big2_contentTok+658j
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax+1]
		ja	loc_642161BC
		cmp	dl, 0DCh
		jnb	loc_642162A2
		cmp	dl, 0D8h
		xchg	ax, ax
		jnb	loc_64215BA9	; jumptable 64215AC4 case 7
					; jumptable 64215C02 case 7
					; jumptable 64215DA1 case 7
					; jumptable 64215E33 case 7
					; jumptable 64215F76 cases 0-3
					; jumptable 64216005 cases 0-3

loc_64216076:				; CODE XREF: _big2_contentTok+A00j
					; _big2_contentTok+A10j ...
		movzx	edx, dl
		movzx	ebp, ds:_nmstrtPages[edx]
		mov	edx, ecx
		and	ecx, 1Fh
		shr	dl, 5
		movzx	edx, dl
		lea	ebp, [edx+ebp*8]
		mov	edx, 1
		shl	edx, cl
		test	ds:_namingBitmap[ebp*4], edx
		jz	loc_64215BA0	; jumptable 64215AC4 default case

loc_642160A2:				; CODE XREF: _big2_contentTok+673j
					; DATA XREF: .rdata:off_64220EC8o
		add	eax, 2		; jumptable 64215E33 cases 22,24
		xor	ebp, ebp
		mov	[esp+30h+var_14], eax
		mov	[esp+30h+var_28], edi

loc_642160AF:				; CODE XREF: _big2_contentTok+C8Ej
		cmp	ebx, eax
		jz	loc_64215E02
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_642163FB
		movzx	ecx, byte ptr [eax+1]
		movzx	edi, byte ptr [esi+ecx+4Ch]

loc_642160CB:				; CODE XREF: _big2_contentTok+C4Cj
					; _big2_contentTok+CA0j
		sub	edi, 5
		cmp	edi, 18h	; switch 1 cases
		jbe	loc_64216319

loc_642160D7:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+99Dj ...
		mov	edi, [esp+30h+var_28] ;	jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		mov	[edi], eax
		xor	eax, eax
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_642160E4:				; CODE XREF: _big2_contentTok+6BDj
		cmp	cl, 0DFh
		movzx	ebp, byte ptr [edx+1]
		ja	loc_642161DD
		cmp	cl, 0DCh
		jnb	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		cmp	cl, 0D8h
		lea	esi, [esi+0]
		jnb	loc_64216292

loc_64216106:				; CODE XREF: _big2_contentTok+A20j
					; _big2_contentTok+A2Aj ...
		movzx	ecx, cl
		mov	eax, ebp
		movzx	ecx, ds:_nmstrtPages[ecx]
		shr	al, 5
		movzx	eax, al
		lea	eax, [eax+ecx*8]
		mov	ecx, ebp
		and	ecx, 1Fh
		mov	ebp, 1
		shl	ebp, cl
		test	ds:_namingBitmap[eax*4], ebp
		jnz	loc_64215EB6
		jmp	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
; ---------------------------------------------------------------------------

loc_64216139:				; CODE XREF: _big2_contentTok+722j
		mov	ecx, esi
		cmp	cl, 0FFh
		jnz	loc_64215EFF
		movzx	ebp, byte ptr [esp+30h+var_28]
		mov	ecx, ebp
		cmp	cl, 0FEh
		jb	loc_64215F04
		xor	ebp, ebp
		jmp	loc_64215D95
; ---------------------------------------------------------------------------

loc_6421615B:				; CODE XREF: _big2_contentTok+845j
					; DATA XREF: .rdata:64221154o
		test	ebp, ebp	; jumptable 64216005 case 58
		jnz	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		lea	edx, [eax+2]
		cmp	ebx, edx
		jz	loc_64215E02
		mov	[esp+30h+var_14], edx
		movzx	ecx, byte ptr [eax+2]
		test	cl, cl
		jnz	loc_64216735
		movzx	eax, byte ptr [edx+1]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 7
		jz	loc_6421628E	; jumptable 64216005 case 89
					; jumptable 6421669A case 7
		jg	loc_64215A15
		mov	edi, [esp+30h+var_28]

loc_6421619A:				; CODE XREF: _big2_contentTok+6D5j
		cmp	eax, 5
		jz	loc_642162B0
		cmp	eax, 6
		jnz	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7

loc_642161AC:				; CODE XREF: _big2_contentTok+F53j
		sub	ebx, edx
		cmp	ebx, 2
		jle	loc_64215B00
		jmp	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
; ---------------------------------------------------------------------------

loc_642161BC:				; CODE XREF: _big2_contentTok+89Cj
		cmp	dl, 0FFh
		nop
		jnz	loc_64216076
		cmp	cl, 0FEh
		lea	esi, [esi+0]
		jb	loc_64216076
		xor	ecx, ecx
		jmp	loc_64215E27
; ---------------------------------------------------------------------------

loc_642161DD:				; CODE XREF: _big2_contentTok+92Bj
		cmp	cl, 0FFh
		jnz	loc_64216106
		mov	eax, ebp
		cmp	al, 0FEh
		jb	loc_64216106
		jmp	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
; ---------------------------------------------------------------------------

loc_642161F5:				; CODE XREF: _big2_contentTok+5E1j
					; _big2_contentTok+A94j
					; DATA XREF: ...
		add	eax, 2		; jumptable 64215DA1 case 11
		mov	[edi], eax
		mov	eax, 5
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64216204:				; CODE XREF: _big2_contentTok+50Ej
		cmp	edx, 8
		jz	loc_64215BA0	; jumptable 64215AC4 default case
		lea	esi, [esi+0]
		jge	loc_642162C0

loc_64216216:				; CODE XREF: _big2_contentTok+1038j
		mov	edx, ebx
		sub	edx, eax
		cmp	edx, 3
		lea	esi, [esi+0]
		jle	loc_64215B00
		add	eax, 4
		jmp	loc_64215CA9
; ---------------------------------------------------------------------------

loc_6421622E:				; CODE XREF: _big2_contentTok+5E1j
					; DATA XREF: .rdata:off_64220E64o
		mov	esi, [esp+30h+var_2C] ;	jumptable 64215DA1 cases 9,10,21
		add	eax, 2

loc_64216235:				; CODE XREF: _big2_contentTok+AB0j
		cmp	ebx, eax
		jz	loc_64215E02
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_64215BA0	; jumptable 64215AC4 default case
		movzx	edx, byte ptr [eax+1]
		movzx	edx, byte ptr [esi+edx+4Ch]
		cmp	edx, 0Bh
		jz	short loc_642161F5 ; jumptable 64215DA1	case 11
		jg	loc_64216495
		cmp	edx, 9
		nop
		jl	loc_64215BA0	; jumptable 64215AC4 default case

loc_64216266:				; CODE XREF: _big2_contentTok+CE0j
		add	eax, 2
		lea	esi, [esi+0]
		jmp	short loc_64216235
; ---------------------------------------------------------------------------

loc_64216272:				; CODE XREF: _big2_contentTok+EC3j
		cmp	al, 0DFh
		movzx	ecx, byte ptr [edx+1]
		ja	loc_64216722
		cmp	al, 0DCh
		jnb	loc_64216718
		cmp	al, 0D8h
		jb	loc_642166D9

loc_6421628E:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+9CAj ...
		mov	edi, [esp+30h+var_28] ;	jumptable 64216005 case	89
					; jumptable 6421669A case 7

loc_64216292:				; CODE XREF: _big2_contentTok+6CFj
					; _big2_contentTok+940j
		sub	ebx, edx
		cmp	ebx, 3
		jle	loc_64215B00
		jmp	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
; ---------------------------------------------------------------------------

loc_642162A2:				; CODE XREF: _big2_contentTok+8A5j
		mov	ecx, 8
		jmp	loc_64215E27
; ---------------------------------------------------------------------------

loc_642162AC:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+EDAj
					; DATA XREF: ...
		mov	edi, [esp+30h+var_28] ;	jumptable 64216005 case	87
					; jumptable 6421669A case 5

loc_642162B0:				; CODE XREF: _big2_contentTok+9DDj
		sub	ebx, edx
		cmp	ebx, 1
		jg	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		jmp	loc_64215B00
; ---------------------------------------------------------------------------

loc_642162C0:				; CODE XREF: _big2_contentTok+A50j
		cmp	edx, 1Bh
		jnz	loc_64215CE6
		add	eax, 2
		cmp	ebx, eax
		xchg	ax, ax
		jz	loc_64215E02
		cmp	byte ptr [eax],	0
		jnz	loc_64215CA9
		cmp	byte ptr [eax+1], 2Dh
		jnz	loc_64215CA9
		lea	edx, [eax+2]
		cmp	ebx, edx
		xchg	ax, ax
		jz	loc_64215E02
		cmp	byte ptr [eax+2], 0
		jnz	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		cmp	byte ptr [edx+1], 3Eh
		jnz	loc_64215A34	; jumptable 6421581A cases 0,1,8
					; jumptable 642159E5 cases 4-7
		add	eax, 4
		mov	[edi], eax
		mov	eax, 0Dh
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64216319:				; CODE XREF: _big2_contentTok+911j
		jmp	ds:off_6422110C[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64216320:				; CODE XREF: _big2_contentTok+BA2j
		movzx	edx, byte ptr [eax+1]
		movzx	ecx, byte ptr [esi+edx+4Ch]
		cmp	ecx, 0Eh
		jz	loc_642163BE	; jumptable 64216005 case 49
		cmp	ecx, 15h
		ja	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8

loc_6421633B:				; CODE XREF: _big2_contentTok+BB9j
					; _big2_contentTok+BC9j ...
		mov	edx, 1
		shl	edx, cl
		and	edx, 200600h
		jz	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8

loc_6421634E:				; CODE XREF: _big2_contentTok+845j
					; DATA XREF: .rdata:6422111Co ...
		add	eax, 2		; jumptable 64216005 cases 44,45,56
		cmp	ebx, eax
		jz	loc_64215E02
		mov	[esp+30h+var_14], eax
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jz	short loc_64216320
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax+1]
		ja	loc_64216518
		cmp	dl, 0DCh
		mov	ecx, 8
		jnb	short loc_6421633B
		cmp	dl, 0D8h
		jb	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		mov	ecx, 7
		jmp	short loc_6421633B
; ---------------------------------------------------------------------------

loc_6421638B:				; CODE XREF: _big2_contentTok+C12j
		movzx	edx, byte ptr [eax+1]
		movzx	edi, byte ptr [esi+edx+4Ch]
		lea	edx, [edi-0Ch]
		cmp	edx, 1
		jbe	loc_642164D8
		cmp	edi, 15h
		ja	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8

loc_642163A9:				; CODE XREF: _big2_contentTok+C29j
					; _big2_contentTok+C39j ...
		mov	edx, 1
		mov	ecx, edi
		shl	edx, cl
		and	edx, 200600h
		jz	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8

loc_642163BE:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+B6Cj
					; DATA XREF: ...
		add	eax, 2		; jumptable 64216005 case 49
		cmp	ebx, eax
		jz	loc_64215E02
		mov	[esp+30h+var_14], eax
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jz	short loc_6421638B
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax+1]
		ja	loc_64216479
		cmp	dl, 0DCh
		mov	edi, 8
		jnb	short loc_642163A9
		cmp	dl, 0D8h
		jb	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		mov	edi, 7
		jmp	short loc_642163A9
; ---------------------------------------------------------------------------

loc_642163FB:				; CODE XREF: _big2_contentTok+8FCj
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax+1]
		ja	short loc_64216453
		cmp	dl, 0DCh
		mov	edi, 8
		jnb	loc_642160CB
		cmp	dl, 0D8h
		jnb	short loc_64216465 ; jumptable 64216005	case 42

loc_64216417:				; CODE XREF: _big2_contentTok+C96j
					; _big2_contentTok+C9Bj ...
		movzx	edx, dl
		movzx	edi, ds:_namePages[edx]
		mov	edx, ecx
		and	ecx, 1Fh
		shr	dl, 5
		movzx	edx, dl
		lea	edi, [edx+edi*8]
		mov	edx, 1
		shl	edx, cl
		test	ds:_namingBitmap[edi*4], edx
		jz	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8

loc_64216443:				; CODE XREF: _big2_contentTok+845j
					; DATA XREF: .rdata:64221150o ...
		add	eax, 2		; jumptable 64216005 cases 57,59-62
		mov	[esp+30h+var_14], eax

loc_6421644A:				; CODE XREF: _big2_contentTok+F4Aj
					; _big2_contentTok+FCAj
		mov	eax, [esp+30h+var_14]
		jmp	loc_642160AF
; ---------------------------------------------------------------------------

loc_64216453:				; CODE XREF: _big2_contentTok+C42j
		cmp	dl, 0FFh
		jnz	short loc_64216417
		cmp	cl, 0FEh
		jb	short loc_64216417
		xor	edi, edi
		nop
		jmp	loc_642160CB
; ---------------------------------------------------------------------------

loc_64216465:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+C55j
					; DATA XREF: ...
		sub	ebx, eax	; jumptable 64216005 case 42
		mov	edi, [esp+30h+var_28]
		cmp	ebx, 3
		jle	loc_64215B00
		jmp	loc_64215BA0	; jumptable 64215AC4 default case
; ---------------------------------------------------------------------------

loc_64216479:				; CODE XREF: _big2_contentTok+C1Bj
		cmp	dl, 0FFh
		jnz	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		cmp	cl, 0FEh
		jb	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		xor	edi, edi
		lea	esi, [esi+0]
		jmp	loc_642163A9
; ---------------------------------------------------------------------------

loc_64216495:				; CODE XREF: _big2_contentTok+A96j
		cmp	edx, 15h
		jnz	loc_64215BA0	; jumptable 64215AC4 default case
		xchg	ax, ax
		jmp	loc_64216266
; ---------------------------------------------------------------------------

loc_642164A5:				; CODE XREF: _big2_contentTok+845j
					; DATA XREF: .rdata:64221110o
		sub	ebx, eax	; jumptable 64216005 case 41
		mov	edi, [esp+30h+var_28]
		cmp	ebx, 2
		xchg	ax, ax
		jle	loc_64215B00
		jmp	loc_64215BA0	; jumptable 64215AC4 default case
; ---------------------------------------------------------------------------

loc_642164BB:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok:loc_64216319j
					; DATA XREF: ...
		sub	ebx, eax	; jumptable 64216005 case 40
					; jumptable 64216319 case 0
		mov	edi, [esp+30h+var_28]
		cmp	ebx, 1
		jg	loc_64215BA0	; jumptable 64215AC4 default case
		jmp	loc_64215B00
; ---------------------------------------------------------------------------

loc_642164CF:				; CODE XREF: _big2_contentTok+845j
					; DATA XREF: .rdata:6422116Co
		movzx	ecx, byte ptr [eax+1] ;	jumptable 64216005 case	64
		jmp	loc_64216417
; ---------------------------------------------------------------------------

loc_642164D8:				; CODE XREF: _big2_contentTok+BDAj
		add	eax, 2
		mov	[esp+30h+var_14], eax

loc_642164DF:				; CODE XREF: _big2_contentTok+D8Ej
		cmp	ebx, eax
		jz	loc_64215E02
		movzx	ecx, byte ptr [eax]
		test	cl, cl
		jnz	loc_642165E1
		movzx	edx, byte ptr [eax+1]
		movzx	edx, byte ptr [esi+edx+4Ch]
		cmp	edx, edi
		jz	loc_642165AA
		cmp	edx, 8		; switch 9 cases
		ja	short loc_6421655D ; jumptable 64216005	case 69

loc_64216508:				; CODE XREF: _big2_contentTok+E32j
					; _big2_contentTok+E46j ...
		jmp	ds:off_64221170[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421650F:				; CODE XREF: _big2_contentTok+673j
					; DATA XREF: .rdata:off_64220EC8o
		movzx	ecx, byte ptr [eax+1] ;	jumptable 64215E33 case	29
		jmp	loc_64216076
; ---------------------------------------------------------------------------

loc_64216518:				; CODE XREF: _big2_contentTok+BABj
		cmp	dl, 0FFh
		nop
		lea	esi, [esi+0]
		jnz	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		cmp	cl, 0FEh
		jb	loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		xor	ecx, ecx
		jmp	loc_6421633B
; ---------------------------------------------------------------------------

loc_64216536:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok:loc_64216508j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 64216005 case 71
					; jumptable 64216508 case 6
		sub	edx, eax
		cmp	edx, 2
		jle	loc_64215B00
		add	eax, 3
		mov	[esp+30h+var_14], eax

loc_6421654A:				; CODE XREF: _big2_contentTok+DA4j
					; _big2_contentTok+DBBj ...
		mov	eax, [esp+30h+var_14]
		jmp	short loc_642164DF
; ---------------------------------------------------------------------------

loc_64216550:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok:loc_64216508j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 64216005 case 70
					; jumptable 64216508 case 5
		sub	edx, eax
		cmp	edx, 1
		jle	loc_64215B00

loc_6421655D:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+D46j ...
		add	eax, 2		; jumptable 64216005 case 69
		mov	[esp+30h+var_14], eax
		jmp	short loc_6421654A
; ---------------------------------------------------------------------------

loc_64216566:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok:loc_64216508j
					; DATA XREF: ...
		lea	edx, [eax+2]	; jumptable 64216005 case 68
					; jumptable 64216508 case 3
		mov	ecx, ebx
		lea	ebp, [esp+30h+var_14]
		mov	eax, esi
		mov	[esp+30h+var_30], ebp
		call	_big2_scanRef
		test	eax, eax
		jg	short loc_6421654A
		test	eax, eax
		mov	edi, [esp+30h+var_28]
		jnz	loc_642158C0
		mov	edx, [esp+30h+var_14]
		mov	[edi], edx
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64216594:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok:loc_64216508j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 64216005 case 72
					; jumptable 64216508 case 7
		sub	edx, eax
		cmp	edx, 3
		jle	loc_64215B00
		add	eax, 4
		mov	[esp+30h+var_14], eax
		jmp	short loc_6421654A
; ---------------------------------------------------------------------------

loc_642165AA:				; CODE XREF: _big2_contentTok+D3Dj
		lea	edx, [eax+2]
		cmp	ebx, edx
		jz	loc_64215E02
		mov	[esp+30h+var_14], edx
		movzx	eax, byte ptr [eax+2]
		test	al, al
		jnz	loc_642166AE
		movzx	eax, byte ptr [edx+1]
		movzx	ecx, byte ptr [esi+eax+4Ch]

loc_642165CE:				; CODE XREF: _big2_contentTok+EFDj
					; _big2_contentTok+F10j
		sub	ecx, 9		; switch 13 cases
		cmp	ecx, 0Ch
		ja	loc_642166A1	; jumptable 64216005 cases 77-81,83-85,90,94-98,100-102,105,107-110
		jmp	ds:off_64221194[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642165E1:				; CODE XREF: _big2_contentTok+D2Cj
		cmp	cl, 0DFh
		movzx	ebp, byte ptr [eax+1]
		ja	short loc_64216641
		cmp	cl, 0DCh
		mov	edx, 8
		jnb	loc_64216508
		cmp	cl, 0D8h
		jb	loc_6421655D	; jumptable 64216005 case 69
		mov	edx, 7
		jmp	loc_64216508
; ---------------------------------------------------------------------------

loc_6421660B:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+E1Aj ...
		lea	eax, [edx+2]	; jumptable 64216005 cases 82,99
					; jumptable 642165DA case 17
					; jumptable 6421669A case 17
		mov	edi, [esp+30h+var_28]
		cmp	ebx, eax
		jz	loc_64215E02
		mov	[esp+30h+var_14], eax
		cmp	byte ptr [edx+2], 0
		jnz	loc_64215BA0	; jumptable 64215AC4 default case
		cmp	byte ptr [eax+1], 3Eh
		jnz	loc_64215BA0	; jumptable 64215AC4 default case
		add	edx, 4
		mov	eax, 3
		mov	[edi], edx
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_64216641:				; CODE XREF: _big2_contentTok+E28j
		cmp	cl, 0FFh
		jnz	loc_6421655D	; jumptable 64216005 case 69
		mov	ecx, ebp
		xor	edx, edx
		cmp	cl, 0FEh
		jnb	loc_64216508
		jmp	loc_6421655D	; jumptable 64216005 case 69
; ---------------------------------------------------------------------------

loc_6421665C:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+E1Aj ...
		mov	edi, [esp+30h+var_28] ;	jumptable 64216005 cases 76,93
					; jumptable 642165DA case 11
					; jumptable 6421669A case 11
		add	edx, 2
		mov	eax, 1
		mov	[edi], edx
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_6421666F:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+E1Aj ...
		add	edx, 2		; jumptable 64216005 cases 74,75,86,91,92,103
					; jumptable 642165DA cases 9,10,21
					; jumptable 6421669A cases 9,10,21
		cmp	ebx, edx
		jz	loc_64215E02
		mov	[esp+30h+var_14], edx
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	loc_64216272
		movzx	ecx, byte ptr [edx+1]
		movzx	ecx, byte ptr [esi+ecx+4Ch]

loc_64216692:				; CODE XREF: _big2_contentTok+F5Dj
					; _big2_contentTok+F70j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	short loc_642166A1 ; jumptable 64216005	cases 77-81,83-85,90,94-98,100-102,105,107-110
		jmp	ds:off_642211C8[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642166A1:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+E14j ...
		mov	edi, [esp+30h+var_28] ;	jumptable 64216005 cases 77-81,83-85,90,94-98,100-102,105,107-110
		xor	eax, eax
		mov	[edi], edx
		jmp	loc_642158C0
; ---------------------------------------------------------------------------

loc_642166AE:				; CODE XREF: _big2_contentTok+DFFj
		cmp	al, 0D8h
		movzx	edi, byte ptr [edx+1]
		jb	short loc_642166A1 ; jumptable 64216005	cases 77-81,83-85,90,94-98,100-102,105,107-110
		cmp	al, 0DBh
		mov	ecx, 7
		jbe	loc_642165CE
		cmp	al, 0FFh
		jnz	short loc_642166A1 ; jumptable 64216005	cases 77-81,83-85,90,94-98,100-102,105,107-110
		mov	eax, edi
		cmp	al, 0FEh
		jb	short loc_642166A1 ; jumptable 64216005	cases 77-81,83-85,90,94-98,100-102,105,107-110
		xor	cl, cl
		nop
		jmp	loc_642165CE
; ---------------------------------------------------------------------------

loc_642166D5:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+EDAj
					; DATA XREF: ...
		movzx	ecx, byte ptr [edx+1] ;	jumptable 64216005 case	111
					; jumptable 6421669A case 29

loc_642166D9:				; CODE XREF: _big2_contentTok+AC8j
					; _big2_contentTok+F64j ...
		movzx	eax, al
		movzx	edi, ds:_nmstrtPages[eax]
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edi, [eax+edi*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:_namingBitmap[edi*4], eax
		jz	short loc_642166A1 ; jumptable 64216005	cases 77-81,83-85,90,94-98,100-102,105,107-110

loc_64216701:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+EDAj
					; DATA XREF: ...
		add	edx, 2		; jumptable 64216005 cases 104,106
					; jumptable 6421669A cases 22,24
		xor	ebp, ebp
		mov	[esp+30h+var_14], edx
		jmp	loc_6421644A
; ---------------------------------------------------------------------------

loc_6421670F:				; CODE XREF: _big2_contentTok+845j
					; _big2_contentTok+EDAj
					; DATA XREF: ...
		mov	edi, [esp+30h+var_28] ;	jumptable 64216005 case	88
					; jumptable 6421669A case 6
		jmp	loc_642161AC
; ---------------------------------------------------------------------------

loc_64216718:				; CODE XREF: _big2_contentTok+AC0j
		mov	ecx, 8
		jmp	loc_64216692
; ---------------------------------------------------------------------------

loc_64216722:				; CODE XREF: _big2_contentTok+AB8j
		cmp	al, 0FFh
		jnz	short loc_642166D9
		cmp	cl, 0FEh
		jb	short loc_642166D9
		xor	ecx, ecx
		lea	esi, [esi+0]
		jmp	loc_64216692
; ---------------------------------------------------------------------------

loc_64216735:				; CODE XREF: _big2_contentTok+9B8j
		cmp	cl, 0DFh
		movzx	eax, byte ptr [edx+1]
		ja	short loc_642167BC
		cmp	cl, 0DCh
		jnb	loc_64215A30
		cmp	cl, 0D8h
		jnb	loc_6421628E	; jumptable 64216005 case 89
					; jumptable 6421669A case 7

loc_64216750:				; CODE XREF: _big2_contentTok+FFAj
					; _big2_contentTok+1000j ...
		movzx	ecx, cl
		movzx	edi, ds:_nmstrtPages[ecx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		lea	edi, [ecx+edi*8]
		mov	ecx, eax
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		test	ds:_namingBitmap[edi*4], eax
		jz	loc_642166A1	; jumptable 64216005 cases 77-81,83-85,90,94-98,100-102,105,107-110

loc_6421677E:				; CODE XREF: _big2_contentTok+258j
					; _big2_contentTok+26Aj
		add	edx, 2
		mov	ebp, 1
		mov	[esp+30h+var_14], edx
		jmp	loc_6421644A
; ---------------------------------------------------------------------------

loc_6421678F:				; CODE XREF: _big2_contentTok+5E1j
					; DATA XREF: .rdata:off_64220E64o
		movzx	ebp, byte ptr [edx-1] ;	jumptable 64215DA1 case	29
		jmp	loc_64215F04
; ---------------------------------------------------------------------------

loc_64216798:				; CODE XREF: _big2_contentTok+508j
		mov	edx, ebx
		sub	edx, eax
		cmp	edx, 2
		jle	loc_64215B00
		add	eax, 3
		jmp	loc_64215CA9
; ---------------------------------------------------------------------------

loc_642167AD:				; CODE XREF: _big2_contentTok+6E5j
		movzx	ebp, byte ptr [edx+1]
		jmp	loc_64216106
; ---------------------------------------------------------------------------

loc_642167B6:				; CODE XREF: _big2_contentTok+261j
		movzx	eax, byte ptr [edx+1]
		jmp	short loc_64216750
; ---------------------------------------------------------------------------

loc_642167BC:				; CODE XREF: _big2_contentTok+F7Cj
		cmp	cl, 0FFh
		nop
		jnz	short loc_64216750
		cmp	al, 0FEh
		jb	short loc_64216750
		jmp	loc_64215A30
; ---------------------------------------------------------------------------

loc_642167CB:				; CODE XREF: _big2_contentTok+520j
		mov	edx, ebx
		sub	edx, eax
		cmp	edx, 1
		jg	loc_64215CE6
		jmp	loc_64215B00
; ---------------------------------------------------------------------------

loc_642167DD:				; CODE XREF: _big2_contentTok+4F6j
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax+1]
		ja	short loc_642167FD
		cmp	dl, 0DCh
		jnb	loc_64215BA0	; jumptable 64215AC4 default case
		cmp	dl, 0D8h
		jb	loc_64215CE6
		jmp	loc_64216216
; ---------------------------------------------------------------------------

loc_642167FD:				; CODE XREF: _big2_contentTok+1024j
		cmp	dl, 0FFh
		jnz	loc_64215CE6
		cmp	cl, 0FEh
		lea	esi, [esi+0]
		jb	loc_64215CE6
		jmp	loc_64215BA0	; jumptable 64215AC4 default case
_big2_contentTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_scanPercent proc near		; CODE XREF: _big2_entityValueTok+130p
					; _big2_prologTok+3FEj

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 14h
		cmp	edx, ecx
		mov	[esp+14h+var_10], ebx
		mov	ebx, ecx
		mov	[esp+14h+var_C], esi
		mov	esi, [esp+14h+arg_0]
		mov	[esp+14h+var_8], edi
		mov	[esp+14h+var_4], ebp
		mov	[esp+14h+var_14], eax
		jz	loc_64216991
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jnz	short loc_64216863
		movzx	edi, byte ptr [edx+1]
		movzx	edi, byte ptr [eax+edi+4Ch]

loc_64216854:				; CODE XREF: _big2_scanPercent+BDj
					; _big2_scanPercent+C7j
		sub	edi, 5		; switch 26 cases
		cmp	edi, 19h
		ja	short loc_642168A0 ; jumptable 64216005	cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 642168BE cases 43-52,54-56,58,63
		jmp	ds:off_6422122C[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64216863:				; CODE XREF: _big2_scanPercent+29j
		lea	edi, [ecx+28h]
		movzx	ebp, byte ptr [edx+1]
		mov	eax, edi
		cmp	al, 27h
		jbe	short loc_642168B8

loc_64216870:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej
					; DATA XREF: ...
		mov	edi, ebp	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38

loc_64216872:				; CODE XREF: _big2_scanPercent+B9j
					; _big2_scanPercent+191j
		movzx	ecx, cl
		movzx	ebp, ds:_nmstrtPages[ecx]
		mov	ecx, edi
		shr	cl, 5
		movzx	ecx, cl
		lea	ebp, [ecx+ebp*8]
		mov	ecx, edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		test	ds:_namingBitmap[ebp*4], edi
		jnz	loc_64216931	; jumptable 64216005 cases 129,131,195,197-200
					; jumptable 6421685C cases 22,24
					; jumptable 642168BE cases 57,59-62
					; jumptable 64216957 cases 22,24-27

loc_642168A0:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+3Aj ...
		mov	[esi], edx	; jumptable 64216005 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 642168BE cases 43-52,54-56,58,63
		xor	eax, eax

loc_642168A4:				; CODE XREF: _big2_scanPercent+B1j
					; _big2_scanPercent+16Cj ...
		mov	ebx, [esp+14h+var_10]
		mov	esi, [esp+14h+var_C]
		mov	edi, [esp+14h+var_8]
		mov	ebp, [esp+14h+var_4]
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_642168B8:				; CODE XREF: _big2_scanPercent+4Ej
		and	edi, 0FFh	; switch 256 cases
		jmp	ds:off_64221294[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642168C5:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+3Cj ...
		sub	ebx, edx	; jumptable 64216005 cases 114,138-141,180,203-206
					; jumptable 6421685C case 7
					; jumptable 642168BE cases 0-3,42,65-68
					; jumptable 64216957 case 7
					; jumptable 642169A6 cases 0-3
		cmp	ebx, 3
		jg	short loc_642168A0 ; jumptable 64216005	cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 642168BE cases 43-52,54-56,58,63

loc_642168CC:				; CODE XREF: _big2_scanPercent+150j
					; _big2_scanPercent+15Aj
		mov	eax, 0FFFFFFFEh
		jmp	short loc_642168A4
; ---------------------------------------------------------------------------

loc_642168D3:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej
					; DATA XREF: ...
		mov	eax, ebp	; jumptable 64216005 case 177
					; jumptable 642168BE case 39
		mov	edi, ebp
		cmp	al, 0FEh
		jb	short loc_64216872
		xor	edi, edi
		jmp	loc_64216854
; ---------------------------------------------------------------------------

loc_642168E2:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej
					; DATA XREF: ...
		mov	edi, 8		; jumptable 64216005 cases 142-145
					; jumptable 642168BE cases 4-7
		jmp	loc_64216854
; ---------------------------------------------------------------------------
		align 10h

loc_642168F0:				; CODE XREF: _big2_scanPercent+11Dj
		lea	edi, [ecx+28h]
		movzx	ebp, byte ptr [edx+1]
		mov	eax, edi
		cmp	al, 27h		; switch 40 cases
		jbe	loc_642169A0

loc_64216901:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej ...
		mov	edi, ebp	; jumptable 64216005 cases 211-241
					; jumptable 642168BE cases 73-103

loc_64216903:				; CODE XREF: _big2_scanPercent+19Cj
					; _big2_scanPercent+1C3j
		movzx	ecx, cl
		movzx	ebp, ds:_namePages[ecx]
		mov	ecx, edi
		shr	cl, 5
		movzx	ecx, cl
		lea	ebp, [ecx+ebp*8]
		mov	ecx, edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		test	ds:_namingBitmap[ebp*4], edi
		jz	loc_642168A0	; jumptable 64216005 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 642168BE cases 43-52,54-56,58,63

loc_64216931:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+3Cj ...
		add	edx, 2		; jumptable 64216005 cases 129,131,195,197-200
					; jumptable 6421685C cases 22,24
					; jumptable 642168BE cases 57,59-62
					; jumptable 64216957 cases 22,24-27
		cmp	ebx, edx
		jz	short loc_64216991
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jnz	short loc_642168F0
		movzx	edi, byte ptr [edx+1]
		mov	eax, [esp+14h+var_14]
		movzx	edi, byte ptr [eax+edi+4Ch]

loc_6421694B:				; CODE XREF: _big2_scanPercent+1A4j
					; _big2_scanPercent+1ABj
		sub	edi, 5		; switch 25 cases
		cmp	edi, 18h
		ja	loc_642168A0	; jumptable 64216005 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 642168BE cases 43-52,54-56,58,63
		jmp	ds:off_64221334[edi*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64216960:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+3Cj ...
		sub	ebx, edx	; jumptable 64216005 cases 112,178
					; jumptable 6421685C case 5
					; jumptable 642168BE case 40
					; jumptable 64216957 case 5
		cmp	ebx, 1
		jg	loc_642168A0	; jumptable 64216005 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 642168BE cases 43-52,54-56,58,63
		nop
		lea	esi, [esi+0]
		jmp	loc_642168CC
; ---------------------------------------------------------------------------

loc_64216975:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+3Cj ...
		sub	ebx, edx	; jumptable 64216005 cases 113,179
					; jumptable 6421685C case 6
					; jumptable 642168BE case 41
					; jumptable 64216957 case 6
		cmp	ebx, 2
		jle	loc_642168CC
		jmp	loc_642168A0	; jumptable 64216005 cases 115,118-127,130,132-135,181-190,192-194,196,201
					; jumptable 642168BE cases 43-52,54-56,58,63
; ---------------------------------------------------------------------------

loc_64216985:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+3Cj
					; DATA XREF: ...
		mov	[esi], edx	; jumptable 64216005 cases 116,117,128,137
					; jumptable 6421685C cases 9,10,21,30
		mov	eax, 16h
		jmp	loc_642168A4
; ---------------------------------------------------------------------------

loc_64216991:				; CODE XREF: _big2_scanPercent+1Ej
					; _big2_scanPercent+116j
		mov	eax, 0FFFFFFFFh
		jmp	loc_642168A4
; ---------------------------------------------------------------------------
		align 10h

loc_642169A0:				; CODE XREF: _big2_scanPercent+DBj
		and	edi, 0FFh
		jmp	ds:off_64221398[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642169AD:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+3Cj
					; DATA XREF: ...
		movzx	edi, byte ptr [edx+1] ;	jumptable 64216005 case	136
					; jumptable 6421685C case 29
		jmp	loc_64216872
; ---------------------------------------------------------------------------

loc_642169B6:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej ...
		mov	eax, ebp	; jumptable 64216005 case 242
					; jumptable 642168BE case 104
					; jumptable 642169A6 case 39
		mov	edi, ebp
		cmp	al, 0FEh
		jb	loc_64216903
		xor	edi, edi
		jmp	short loc_6421694B
; ---------------------------------------------------------------------------

loc_642169C6:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej ...
		mov	edi, 8		; jumptable 64216005 cases 207-210
					; jumptable 642168BE cases 69-72
					; jumptable 642169A6 cases 4-7
		jmp	loc_6421694B
; ---------------------------------------------------------------------------

loc_642169D0:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej ...
		add	edx, 2		; jumptable 64216005 case 191
					; jumptable 642168BE case 53
					; jumptable 64216957 case 18
		mov	eax, 1Ch
		mov	[esi], edx
		jmp	loc_642168A4
; ---------------------------------------------------------------------------

loc_642169DF:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej ...
		movzx	edi, byte ptr [edx+1] ;	jumptable 64216005 case	202
					; jumptable 642168BE case 64
					; jumptable 64216957 case 29
		jmp	loc_64216903
_big2_scanPercent endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_scanLit	proc near		; CODE XREF: _big2_prologTok+275j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	esi, [esp+10h+arg_0]
		mov	edi, [esp+10h+arg_4]
		cmp	ecx, esi
		jnz	short loc_64216A1E
		jmp	loc_64216AE0
; ---------------------------------------------------------------------------

loc_64216A05:				; CODE XREF: _big2_scanLit+33j
		movzx	ebx, byte ptr [ecx+1]
		movzx	ebx, byte ptr [edx+ebx+4Ch]
		cmp	ebx, 0Dh	; switch 14 cases
		jbe	short loc_64216A55

loc_64216A13:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej ...
		add	ecx, 2		; jumptable 64216005 cases 251-255
					; jumptable 642168BE cases 113-143,147-149,154-156

loc_64216A16:				; CODE XREF: _big2_scanLit+85j
					; _big2_scanLit+BFj ...
		cmp	esi, ecx
		jz	loc_64216AE0

loc_64216A1E:				; CODE XREF: _big2_scanLit+Ej
		movzx	ebx, byte ptr [ecx]
		test	bl, bl
		jz	short loc_64216A05
		add	ebx, 28h
		movzx	ebp, byte ptr [ecx+1]
		cmp	bl, 27h		; switch 40 cases
		ja	short loc_64216A13 ; jumptable 64216005	cases 251-255
					; jumptable 642168BE cases 113-143,147-149,154-156
		movzx	ebx, bl
		jmp	ds:off_64221438[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64216A40:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej ...
		mov	[edi], ecx	; jumptable 64216005 cases 247-250
					; jumptable 642168BE cases 109-112,145,146,153
					; jumptable 64216A34 cases 4-7
					; jumptable 64216A55 cases 0,1,8
		xor	eax, eax

loc_64216A44:				; CODE XREF: _big2_scanLit+8Ej
					; _big2_scanLit+B1j ...
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64216A50:				; CODE XREF: _big2_contentTok+845j
					; _big2_scanPercent+9Ej ...
		mov	ebx, 7		; jumptable 64216005 cases 243-246
					; jumptable 642168BE cases 105-108
					; jumptable 64216A34 cases 0-3

loc_64216A55:				; CODE XREF: _big2_scanLit+21j
					; _big2_scanLit+79j
		jmp	ds:off_642214D8[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64216A60:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_scanLit+44j
					; DATA XREF: ...
		mov	ebx, ebp	; jumptable 642168BE case 144
					; jumptable 64216A34 case 39
		cmp	bl, 0FEh
		jb	short loc_64216A13 ; jumptable 64216005	cases 251-255
					; jumptable 642168BE cases 113-143,147-149,154-156
		xor	ebx, ebx
		jmp	short loc_64216A55
; ---------------------------------------------------------------------------
		align 10h

loc_64216A70:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_scanLit:loc_64216A55j
					; DATA XREF: ...
		add	ecx, 2		; jumptable 642168BE cases 157,158
					; jumptable 64216A55 cases 12,13
		cmp	ebx, eax
		jnz	short loc_64216A16
		cmp	ecx, esi
		mov	eax, 0FFFFFFE5h
		jz	short loc_64216A44
		mov	[edi], ecx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jnz	short loc_64216AEA
		movzx	eax, byte ptr [ecx+1]
		movzx	eax, byte ptr [edx+eax+4Ch]
		sub	eax, 9
		cmp	eax, 15h
		ja	short loc_64216B07

loc_64216A9A:				; CODE XREF: _big2_scanLit+107j
		mov	eax, ds:_CSWTCH_458[eax*4]
		jmp	short loc_64216A44
; ---------------------------------------------------------------------------

loc_64216AA3:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_scanLit:loc_64216A55j
					; DATA XREF: ...
		mov	ebx, esi	; jumptable 642168BE case 152
					; jumptable 64216A55 case 7
		sub	ebx, ecx
		cmp	ebx, 3
		jle	short loc_64216AD2
		add	ecx, 4
		jmp	loc_64216A16
; ---------------------------------------------------------------------------

loc_64216AB4:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_scanLit:loc_64216A55j
					; DATA XREF: ...
		mov	ebx, esi	; jumptable 642168BE case 151
					; jumptable 64216A55 case 6
		sub	ebx, ecx
		cmp	ebx, 2
		jle	short loc_64216AD2
		add	ecx, 3
		jmp	loc_64216A16
; ---------------------------------------------------------------------------

loc_64216AC5:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_scanLit:loc_64216A55j
					; DATA XREF: ...
		mov	ebx, esi	; jumptable 642168BE case 150
					; jumptable 64216A55 case 5
		sub	ebx, ecx
		cmp	ebx, 1
		jg	loc_64216A13	; jumptable 64216005 cases 251-255
					; jumptable 642168BE cases 113-143,147-149,154-156

loc_64216AD2:				; CODE XREF: _big2_scanLit+BAj
					; _big2_scanLit+CBj
		mov	eax, 0FFFFFFFEh
		jmp	loc_64216A44
; ---------------------------------------------------------------------------
		align 10h

loc_64216AE0:				; CODE XREF: _big2_scanLit+10j
					; _big2_scanLit+28j
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64216AEA:				; CODE XREF: _big2_scanLit+97j
		cmp	al, 0D8h
		movzx	edx, byte ptr [ecx+1]
		jnb	short loc_64216AF9

loc_64216AF2:				; CODE XREF: _big2_scanLit+110j
					; _big2_scanLit+115j
		mov	eax, 14h
		jmp	short loc_64216A9A
; ---------------------------------------------------------------------------

loc_64216AF9:				; CODE XREF: _big2_scanLit+100j
		cmp	al, 0DFh
		jbe	short loc_64216B07
		cmp	al, 0FFh
		nop
		jnz	short loc_64216AF2
		cmp	dl, 0FEh
		jb	short loc_64216AF2

loc_64216B07:				; CODE XREF: _big2_scanLit+A8j
					; _big2_scanLit+10Bj
		xor	eax, eax
		jmp	loc_64216A44
_big2_scanLit	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_attributeValueTok	proc near	; DATA XREF: .rdata:64224090o
					; .rdata:64224530o

var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 18h
		mov	eax, 0FFFFFFFCh
		mov	ecx, [esp+18h+arg_4]
		mov	[esp+18h+var_C], esi
		mov	esi, [esp+18h+arg_8]
		mov	[esp+18h+var_10], ebx
		mov	ebx, [esp+18h+arg_0]
		mov	[esp+18h+var_4], ebp
		mov	ebp, [esp+18h+arg_C]
		mov	[esp+18h+var_8], edi
		mov	edx, ecx
		cmp	ecx, esi
		jz	short loc_64216B65
		mov	[esp+18h+var_18], ecx

loc_64216B41:				; CODE XREF: _big2_attributeValueTok+4Bj
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	short loc_64216B80
		movzx	eax, byte ptr [edx+1]
		movzx	edi, byte ptr [ebx+eax+4Ch]
		cmp	edi, 15h	; switch 22 cases
		jbe	short loc_64216BA1

loc_64216B56:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_attributeValueTok+7Aj ...
		add	edx, 2		; jumptable 642168BE cases 159,160,163,164,167,170-179

loc_64216B59:				; CODE XREF: _big2_attributeValueTok+A0j
					; _big2_attributeValueTok+A5j
		cmp	esi, edx
		jnz	short loc_64216B41
		mov	[ebp+0], esi
		mov	eax, 6

loc_64216B65:				; CODE XREF: _big2_attributeValueTok+2Cj
					; _big2_attributeValueTok+B6j ...
		mov	ebx, [esp+18h+var_10]
		mov	esi, [esp+18h+var_C]
		mov	edi, [esp+18h+var_8]
		mov	ebp, [esp+18h+var_4]
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64216B80:				; CODE XREF: _big2_attributeValueTok+36j
		movzx	ecx, byte ptr [edx+1]
		cmp	al, 0D8h
		mov	[esp+18h+var_11], cl
		jb	short loc_64216B56 ; jumptable 642168BE	cases 159,160,163,164,167,170-179
		cmp	al, 0DBh
		mov	edi, 7
		jbe	short loc_64216BA1
		cmp	al, 0FFh
		jnz	short loc_64216B56 ; jumptable 642168BE	cases 159,160,163,164,167,170-179
		cmp	cl, 0FEh
		jb	short loc_64216B56 ; jumptable 642168BE	cases 159,160,163,164,167,170-179
		xor	di, di

loc_64216BA1:				; CODE XREF: _big2_attributeValueTok+44j
					; _big2_attributeValueTok+83j
		jmp	ds:off_64221510[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64216BA8:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_attributeValueTok:loc_64216BA1j
					; DATA XREF: ...
		add	edx, 3		; jumptable 642168BE case 165
					; jumptable 64216BA1 case 6
		nop
		lea	esi, [esi+0]
		jmp	short loc_64216B59
; ---------------------------------------------------------------------------

loc_64216BB2:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_attributeValueTok:loc_64216BA1j
					; DATA XREF: ...
		add	edx, 4		; jumptable 642168BE case 166
					; jumptable 64216BA1 case 7
		jmp	short loc_64216B59
; ---------------------------------------------------------------------------

loc_64216BB7:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_attributeValueTok:loc_64216BA1j
					; DATA XREF: ...
		mov	ecx, [esp+18h+var_18] ;	jumptable 642168BE case	168
					; jumptable 64216BA1 case 9
		cmp	edx, ecx
		jz	short loc_64216C31

loc_64216BBE:				; CODE XREF: _big2_attributeValueTok+BDj
					; _big2_attributeValueTok+D5j ...
		mov	[ebp+0], edx
		mov	eax, 6
		jmp	short loc_64216B65
; ---------------------------------------------------------------------------

loc_64216BC8:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_attributeValueTok:loc_64216BA1j
					; DATA XREF: ...
		mov	ecx, [esp+18h+var_18] ;	jumptable 642168BE case	169
					; jumptable 64216BA1 case 10
		cmp	edx, ecx
		jnz	short loc_64216BBE
		add	edx, 2
		mov	eax, 7
		mov	[ebp+0], edx
		jmp	short loc_64216B65
; ---------------------------------------------------------------------------
		align 10h

loc_64216BE0:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_attributeValueTok:loc_64216BA1j
					; DATA XREF: ...
		mov	ecx, [esp+18h+var_18] ;	jumptable 642168BE case	162
					; jumptable 64216BA1 case 3
		cmp	edx, ecx
		jnz	short loc_64216BBE
		mov	[esp+18h+arg_0], ebp
		mov	ecx, esi
		mov	eax, ebx
		mov	esi, [esp+18h+var_C]
		add	edx, 2
		mov	ebx, [esp+18h+var_10]
		mov	edi, [esp+18h+var_8]
		mov	ebp, [esp+18h+var_4]
		add	esp, 18h
		jmp	_big2_scanRef
; ---------------------------------------------------------------------------
		align 10h

loc_64216C10:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_attributeValueTok:loc_64216BA1j
					; DATA XREF: ...
		mov	ecx, [esp+18h+var_18] ;	jumptable 642168BE case	180
					; jumptable 64216BA1 case 21
		cmp	edx, ecx
		jnz	short loc_64216BBE
		add	edx, 2
		mov	eax, 27h
		mov	[ebp+0], edx
		jmp	loc_64216B65
; ---------------------------------------------------------------------------

loc_64216C27:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_attributeValueTok:loc_64216BA1j
					; DATA XREF: ...
		mov	[ebp+0], edx	; jumptable 642168BE case 161
					; jumptable 64216BA1 case 2
		xor	eax, eax
		jmp	loc_64216B65
; ---------------------------------------------------------------------------

loc_64216C31:				; CODE XREF: _big2_attributeValueTok+ACj
		lea	ecx, [edx+2]
		mov	eax, 0FFFFFFFDh
		cmp	ecx, esi
		jz	loc_64216B65
		cmp	byte ptr [edx+2], 0
		jnz	short loc_64216C55
		movzx	eax, byte ptr [ecx+1]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		jnz	short loc_64216C55
		lea	ecx, [edx+4]

loc_64216C55:				; CODE XREF: _big2_attributeValueTok+135j
					; _big2_attributeValueTok+140j
		mov	[ebp+0], ecx
		mov	eax, 7
		jmp	loc_64216B65
_big2_attributeValueTok	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_entityValueTok proc near		; DATA XREF: .rdata:64224094o
					; .rdata:64224534o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	eax, 0FFFFFFFCh
		mov	[esp+1Ch+var_C], esi
		mov	ecx, [esp+1Ch+arg_8]
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_10], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_8], edi
		cmp	esi, ecx
		mov	edx, esi
		jz	short loc_64216CD0
		mov	[esp+1Ch+var_18], ecx

loc_64216CA2:				; CODE XREF: _big2_entityValueTok+51j
					; _big2_entityValueTok+FCj ...
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	short loc_64216CE4
		movzx	eax, byte ptr [edx+1]
		movzx	edi, byte ptr [ebx+eax+4Ch]

loc_64216CB2:				; CODE XREF: _big2_entityValueTok+87j
		sub	edi, 3
		cmp	edi, 1Bh	; switch 28 cases
		jbe	short loc_64216D10

loc_64216CBA:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_entityValueTok+7Ej ...
		add	edx, 2		; jumptable 642168BE cases 182,183,186,189-207
		cmp	[esp+1Ch+var_18], edx
		jnz	short loc_64216CA2

loc_64216CC3:				; CODE XREF: _big2_entityValueTok+102j
					; _big2_entityValueTok+114j
		mov	ecx, [esp+1Ch+var_18]
		mov	eax, 6
		mov	[ebp+0], ecx
		nop

loc_64216CD0:				; CODE XREF: _big2_entityValueTok+2Cj
					; _big2_entityValueTok+B7j ...
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_64216CE4:				; CODE XREF: _big2_entityValueTok+37j
		movzx	ecx, byte ptr [edx+1]
		cmp	al, 0D8h
		mov	[esp+1Ch+var_11], cl
		jb	short loc_64216CBA ; jumptable 642168BE	cases 182,183,186,189-207
		cmp	al, 0DBh
		mov	edi, 7
		jbe	short loc_64216CB2
		cmp	al, 0FFh
		jnz	short loc_64216CBA ; jumptable 642168BE	cases 182,183,186,189-207
		cmp	cl, 0FEh
		jb	short loc_64216CBA ; jumptable 642168BE	cases 182,183,186,189-207
		xor	di, di
		sub	edi, 3
		cmp	edi, 1Bh
		ja	short loc_64216CBA ; jumptable 642168BE	cases 182,183,186,189-207
		lea	esi, [esi+0]

loc_64216D10:				; CODE XREF: _big2_entityValueTok+48j
		jmp	ds:off_64221568[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64216D17:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_entityValueTok:loc_64216D10j
					; DATA XREF: ...
		cmp	edx, esi	; jumptable 642168BE case 188
					; jumptable 64216D10 case 7
		jz	loc_64216DE4

loc_64216D1F:				; CODE XREF: _big2_entityValueTok+C6j
					; _big2_entityValueTok+126j ...
		mov	[ebp+0], edx
		mov	eax, 6
		jmp	short loc_64216CD0
; ---------------------------------------------------------------------------
		align 10h

loc_64216D30:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_entityValueTok:loc_64216D10j
					; DATA XREF: ...
		cmp	edx, esi	; jumptable 642168BE case 187
					; jumptable 64216D10 case 6
		mov	ecx, [esp+1Ch+var_18]
		jnz	short loc_64216D1F
		lea	esi, [edx+2]
		mov	eax, 0FFFFFFFDh
		cmp	esi, ecx
		jz	short loc_64216CD0
		cmp	byte ptr [edx+2], 0
		jnz	short loc_64216D58
		movzx	eax, byte ptr [esi+1]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		jnz	short loc_64216D58
		lea	esi, [edx+4]

loc_64216D58:				; CODE XREF: _big2_entityValueTok+D8j
					; _big2_entityValueTok+E3j
		mov	[ebp+0], esi
		mov	eax, 7
		jmp	loc_64216CD0
; ---------------------------------------------------------------------------

loc_64216D65:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_entityValueTok:loc_64216D10j
					; DATA XREF: ...
		add	edx, 4		; jumptable 642168BE case 185
					; jumptable 64216D10 case 4
		cmp	[esp+1Ch+var_18], edx
		jnz	loc_64216CA2
		jmp	loc_64216CC3
; ---------------------------------------------------------------------------

loc_64216D77:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_entityValueTok:loc_64216D10j
					; DATA XREF: ...
		add	edx, 3		; jumptable 642168BE case 184
					; jumptable 64216D10 case 3
		cmp	[esp+1Ch+var_18], edx
		jnz	loc_64216CA2
		jmp	loc_64216CC3
; ---------------------------------------------------------------------------
		align 10h

loc_64216D90:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_entityValueTok:loc_64216D10j
					; DATA XREF: ...
		cmp	edx, esi	; jumptable 642168BE case 208
					; jumptable 64216D10 case 27
		mov	ecx, [esp+1Ch+var_18]
		jnz	short loc_64216D1F
		add	edx, 2
		mov	eax, ebx
		mov	[esp+1Ch+var_1C], ebp
		call	_big2_scanPercent
		xor	edx, edx
		cmp	eax, 16h
		setz	dl
		sub	edx, 1
		and	eax, edx
		jmp	loc_64216CD0
; ---------------------------------------------------------------------------

loc_64216DB7:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_entityValueTok:loc_64216D10j
					; DATA XREF: ...
		cmp	edx, esi	; jumptable 642168BE case 181
					; jumptable 64216D10 case 0
		mov	ecx, [esp+1Ch+var_18]
		jnz	loc_64216D1F
		mov	[esp+1Ch+arg_0], ebp
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_C]
		mov	ebx, [esp+1Ch+var_10]
		add	edx, 2
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_big2_scanRef
; ---------------------------------------------------------------------------

loc_64216DE4:				; CODE XREF: _big2_entityValueTok+A9j
		add	edx, 2
		mov	eax, 7
		mov	[ebp+0], edx
		jmp	loc_64216CD0
_big2_entityValueTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_ignoreSectionTok proc near	; DATA XREF: .rdata:6422408Co
					; .rdata:6422452Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		mov	eax, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_0]
		mov	edi, [esp+10h+arg_C]
		mov	edx, ebx
		sub	edx, eax
		test	dl, 1
		jz	short loc_64216E25
		mov	ebx, edx
		and	ebx, 0FFFFFFFEh
		lea	ebx, [eax+ebx]

loc_64216E25:				; CODE XREF: _big2_ignoreSectionTok+1Bj
		cmp	eax, ebx
		jz	loc_64216F70
		movzx	edx, byte ptr [eax]
		xor	ebp, ebp
		movzx	ecx, byte ptr [eax+1]
		test	dl, dl
		jnz	short loc_64216E63
		lea	esi, [esi+0]

loc_64216E40:				; CODE XREF: _big2_ignoreSectionTok+61j
					; _big2_ignoreSectionTok+EDj ...
		movzx	ecx, cl
		movzx	edx, byte ptr [esi+ecx+4Ch]
		cmp	edx, 8		; switch 9 cases
		jbe	short loc_64216E85

loc_64216E4D:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_ignoreSectionTok+69j ...
		add	eax, 2		; jumptable 642168BE cases 217-247,252

loc_64216E50:				; CODE XREF: _big2_ignoreSectionTok+ACj
					; _big2_ignoreSectionTok+BCj ...
		cmp	ebx, eax
		jz	loc_64216F70
		movzx	edx, byte ptr [eax]

loc_64216E5B:				; CODE XREF: _big2_ignoreSectionTok+E0j
					; _big2_ignoreSectionTok+FFj ...
		test	dl, dl
		movzx	ecx, byte ptr [eax+1]
		jz	short loc_64216E40

loc_64216E63:				; CODE XREF: _big2_ignoreSectionTok+38j
		add	edx, 28h
		cmp	dl, 27h		; switch 40 cases
		ja	short loc_64216E4D ; jumptable 642168BE	cases 217-247,252
		movzx	edx, dl
		jmp	ds:off_642215D8[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64216E75:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_ignoreSectionTok+6Ej ...
		mov	[edi], eax	; jumptable 642168BE cases 213-216,249,250
					; jumptable 64216E6E cases 4-7
					; jumptable 64216E85 cases 0,1,8
		xor	eax, eax

loc_64216E79:				; CODE XREF: _big2_ignoreSectionTok+CEj
					; _big2_ignoreSectionTok+181j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64216E80:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_ignoreSectionTok+6Ej
					; DATA XREF: ...
		mov	edx, 7		; jumptable 642168BE cases 209-212
					; jumptable 64216E6E cases 0-3

loc_64216E85:				; CODE XREF: _big2_ignoreSectionTok+4Bj
					; _big2_ignoreSectionTok+97j
		jmp	ds:off_64221678[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64216E90:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_ignoreSectionTok+6Ej
					; DATA XREF: ...
		cmp	cl, 0FEh	; jumptable 642168BE case 248
					; jumptable 64216E6E case 39
		jb	short loc_64216E4D ; jumptable 642168BE	cases 217-247,252
		xor	edx, edx
		jmp	short loc_64216E85
; ---------------------------------------------------------------------------
		align 10h

loc_64216EA0:				; CODE XREF: _big2_ignoreSectionTok:loc_64216E85j
					; DATA XREF: .rdata:off_64221678o
		mov	edx, ebx	; jumptable 64216E85 case 7
		sub	edx, eax
		cmp	edx, 3
		jle	short loc_64216EC9
		add	eax, 4
		jmp	short loc_64216E50
; ---------------------------------------------------------------------------
		align 10h

loc_64216EB0:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_ignoreSectionTok:loc_64216E85j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 642168BE case 255
					; jumptable 64216E85 case 6
		sub	edx, eax
		cmp	edx, 2
		jle	short loc_64216EC9
		add	eax, 3
		jmp	short loc_64216E50
; ---------------------------------------------------------------------------
		align 10h

loc_64216EC0:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_ignoreSectionTok:loc_64216E85j
					; DATA XREF: ...
		mov	edx, ebx	; jumptable 642168BE case 254
					; jumptable 64216E85 case 5
		sub	edx, eax
		cmp	edx, 1
		jg	short loc_64216E4D ; jumptable 642168BE	cases 217-247,252

loc_64216EC9:				; CODE XREF: _big2_ignoreSectionTok+A7j
					; _big2_ignoreSectionTok+B7j
		mov	eax, 0FFFFFFFEh
		jmp	short loc_64216E79
; ---------------------------------------------------------------------------

loc_64216ED0:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_ignoreSectionTok:loc_64216E85j
					; DATA XREF: ...
		add	eax, 2		; jumptable 642168BE case 253
					; jumptable 64216E85 case 4
		cmp	eax, ebx
		jz	loc_64216F70
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_64216E5B
		movzx	ecx, byte ptr [eax+1]
		cmp	cl, 5Dh
		jnz	loc_64216E40
		add	eax, 2
		cmp	ebx, eax
		jz	short loc_64216F70
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_64216E5B
		movzx	ecx, byte ptr [eax+1]
		cmp	cl, 3Eh
		jnz	loc_64216E40
		add	eax, 2
		test	ebp, ebp
		jz	short loc_64216F7A
		sub	ebp, 1
		jmp	loc_64216E50
; ---------------------------------------------------------------------------

loc_64216F21:				; CODE XREF: _big2_scanPercent+9Ej
					; _big2_ignoreSectionTok:loc_64216E85j
					; DATA XREF: ...
		add	eax, 2		; jumptable 642168BE case 251
					; jumptable 64216E85 case 2
		cmp	eax, ebx
		jz	short loc_64216F70
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_64216E5B
		movzx	ecx, byte ptr [eax+1]
		cmp	cl, 21h
		jnz	loc_64216E40
		add	eax, 2
		cmp	eax, ebx
		jz	short loc_64216F70
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_64216E5B
		movzx	ecx, byte ptr [eax+1]
		cmp	cl, 5Bh
		jnz	loc_64216E40
		add	ebp, 1
		add	eax, 2
		jmp	loc_64216E50
; ---------------------------------------------------------------------------
		align 10h

loc_64216F70:				; CODE XREF: _big2_ignoreSectionTok+27j
					; _big2_ignoreSectionTok+52j ...
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64216F7A:				; CODE XREF: _big2_ignoreSectionTok+117j
		mov	[edi], eax
		mov	eax, 2Ah
		jmp	loc_64216E79
_big2_ignoreSectionTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_isPublicId proc near		; DATA XREF: .rdata:642240B8o
					; .rdata:64224558o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	eax, [esp+10h+arg_4]
		mov	edi, [esp+10h+arg_8]
		mov	ebp, [esp+10h+arg_0]
		add	eax, 2
		sub	edi, 2
		cmp	eax, edi
		jz	short loc_64217019
		lea	esi, [esi+0]

loc_64216FB0:				; CODE XREF: _big2_isPublicId+87j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_64216FD1
		movzx	ebx, byte ptr [eax+1]
		movzx	ecx, bl
		movzx	ecx, byte ptr [ebp+ecx+4Ch]

loc_64216FC3:				; CODE XREF: _big2_isPublicId+9Bj
					; _big2_isPublicId+A9j
		sub	ecx, 9
		cmp	ecx, 1Ah
		jbe	short loc_64216FE7

loc_64216FCB:				; CODE XREF: _big2_isPublicId+74j
		test	dl, dl
		jz	short loc_6421704C
		jmp	short loc_64216FDA
; ---------------------------------------------------------------------------

loc_64216FD1:				; CODE XREF: _big2_isPublicId+25j
		cmp	dl, 0DCh
		movzx	ebx, byte ptr [eax+1]
		jnb	short loc_64217023

loc_64216FDA:				; CODE XREF: _big2_isPublicId+3Fj
					; _big2_isPublicId+80j	...
		mov	edx, [esp+10h+arg_C]
		mov	[edx], eax
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64216FE7:				; CODE XREF: _big2_isPublicId+39j
		mov	esi, 1
		shl	esi, cl
		test	esi, 7E5C7F3h
		jnz	short loc_64217012
		test	esi, 22000h
		jnz	short loc_64217040
		and	esi, 1000h
		jz	short loc_64216FCB
		test	dl, dl
		jnz	short loc_64217012
		cmp	bl, 9
		lea	esi, [esi+0]
		jz	short loc_64216FDA

loc_64217012:				; CODE XREF: _big2_isPublicId+64j
					; _big2_isPublicId+78j	...
		add	eax, 2
		cmp	edi, eax
		jnz	short loc_64216FB0

loc_64217019:				; CODE XREF: _big2_isPublicId+18j
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64217023:				; CODE XREF: _big2_isPublicId+48j
		cmp	dl, 0DFh
		mov	ecx, 8
		jbe	short loc_64216FC3
		cmp	dl, 0FFh
		jnz	short loc_64216FDA
		cmp	bl, 0FEh
		jb	short loc_64216FDA
		xor	cl, cl
		jmp	short loc_64216FC3
; ---------------------------------------------------------------------------
		align 10h

loc_64217040:				; CODE XREF: _big2_isPublicId+6Cj
		test	dl, dl
		jnz	short loc_64216FDA
		movsx	edx, bl
		and	edx, 0FFFFFF80h
		jz	short loc_64217012

loc_6421704C:				; CODE XREF: _big2_isPublicId+3Dj
		cmp	bl, 24h
		nop
		jz	short loc_64217012
		cmp	bl, 40h
		jnz	short loc_64216FDA
		jmp	short loc_64217012
_big2_isPublicId endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_getAtts	proc near		; DATA XREF: .rdata:642240A8o
					; .rdata:64224548o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		xor	ebp, ebp
		push	edi
		push	esi
		mov	esi, 1
		push	ebx
		sub	esp, 0Ch
		mov	eax, [esp+1Ch+arg_4]
		movzx	ecx, byte ptr [eax+2]
		lea	edx, [eax+2]
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], ebp
		test	cl, cl
		jnz	short loc_642170CD

loc_64217088:				; CODE XREF: _big2_getAtts+6Bj
		movzx	ebx, byte ptr [edx+1]
		lea	edi, [edx+1]
		mov	ebp, [esp+1Ch+arg_0]
		movzx	eax, bl
		movzx	eax, byte ptr [ebp+eax+4Ch]

loc_6421709B:				; CODE XREF: _big2_getAtts+262j
					; _big2_getAtts+270j
		sub	eax, 3		; switch 27 cases
		cmp	eax, 1Ah
		ja	short loc_642170C0 ; jumptable 642170A3	default	case
		jmp	ds:off_6422169C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_642170B0:				; CODE XREF: _big2_getAtts+43j
					; DATA XREF: .rdata:off_6422169Co
		cmp	esi, 2		; jumptable 642170A3 cases 11,17
		jnz	loc_642172AA
		lea	esi, [esi+0]

loc_642170C0:				; CODE XREF: _big2_getAtts+41j
					; _big2_getAtts+43j ...
		lea	eax, [edx+2]	; jumptable 642170A3 default case
		movzx	ecx, byte ptr [edx+2]
		mov	edx, eax

loc_642170C9:				; CODE XREF: _big2_getAtts+B0j
					; _big2_getAtts+FFj ...
		test	cl, cl
		jz	short loc_64217088

loc_642170CD:				; CODE XREF: _big2_getAtts+26j
		lea	eax, [ecx+28h]
		movzx	ebx, byte ptr [edx+1]
		cmp	al, 27h		; switch 40 cases
		lea	edi, [edx+1]
		ja	short loc_642170E5 ; jumptable 642170A3	cases 22,24,29
		movzx	eax, al
		jmp	ds:off_64221708[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642170E5:				; CODE XREF: _big2_getAtts+43j
					; _big2_getAtts+79j ...
		test	esi, esi	; jumptable 642170A3 cases 22,24,29
		jnz	short loc_642170C0 ; jumptable 642170A3	default	case
		mov	ebp, [esp+1Ch+arg_8]
		cmp	[esp+1Ch+var_1C], ebp
		jge	short loc_64217102

loc_642170F2:				; CODE XREF: _big2_getAtts+210j
		mov	eax, [esp+1Ch+var_1C]
		shl	eax, 4
		add	eax, [esp+1Ch+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_64217102:				; CODE XREF: _big2_getAtts+90j
					; _big2_getAtts+216j
		lea	eax, [edx+2]
		movzx	ecx, byte ptr [edx+2]
		mov	esi, 1
		mov	edx, eax
		jmp	short loc_642170C9
; ---------------------------------------------------------------------------

loc_64217112:				; CODE XREF: _big2_getAtts+43j
					; DATA XREF: .rdata:off_6422169Co
		cmp	esi, 1		; jumptable 642170A3 case 21
		jz	loc_642172D5
		mov	eax, [esp+1Ch+arg_8]
		cmp	[esp+1Ch+var_1C], eax
		jge	short loc_642170C0 ; jumptable 642170A3	default	case
		cmp	esi, 2
		jnz	short loc_642170C0 ; jumptable 642170A3	default	case
		mov	edi, [esp+1Ch+var_1C]
		shl	edi, 4
		add	edi, [esp+1Ch+arg_C]
		cmp	byte ptr [edi+0Ch], 0
		jz	short loc_642170C0 ; jumptable 642170A3	default	case
		cmp	[edi+4], edx
		lea	ebp, [edx+2]
		jz	short loc_6421714E
		test	cl, cl
		jnz	short loc_6421714E
		cmp	bl, 20h
		jz	loc_6421739A

loc_6421714E:				; CODE XREF: _big2_getAtts+DFj
					; _big2_getAtts+E3j ...
		mov	eax, ebp
		mov	esi, 2
		mov	byte ptr [edi+0Ch], 0
		mov	edx, eax
		movzx	ecx, byte ptr [ebp+0]
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_64217164:				; CODE XREF: _big2_getAtts+43j
					; DATA XREF: .rdata:off_6422169Co
		cmp	esi, 2		; jumptable 642170A3 case 13
		jz	loc_64217340
		mov	ebx, [esp+1Ch+arg_8]
		cmp	[esp+1Ch+var_1C], ebx
		jl	loc_642172E6
		lea	eax, [edx+2]
		movzx	ecx, byte ptr [edx+2]
		mov	esi, 2
		mov	[esp+1Ch+var_18], 0Dh
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_64217195:				; CODE XREF: _big2_getAtts+43j
					; DATA XREF: .rdata:off_6422169Co
		cmp	esi, 2		; jumptable 642170A3 case 12
		jz	loc_64217376
		mov	eax, [esp+1Ch+arg_8]
		cmp	[esp+1Ch+var_1C], eax
		jl	loc_64217310
		lea	eax, [edx+2]
		movzx	ecx, byte ptr [edx+2]
		mov	esi, 2
		mov	[esp+1Ch+var_18], 0Ch
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_642171C6:				; CODE XREF: _big2_getAtts+43j
					; DATA XREF: .rdata:off_6422169Co
		cmp	esi, 1		; jumptable 642170A3 cases 9,10
		jz	loc_642172D5
		mov	ebp, [esp+1Ch+arg_8]
		cmp	[esp+1Ch+var_1C], ebp
		jge	loc_642170C0	; jumptable 642170A3 default case
		cmp	esi, 2
		nop
		jnz	loc_642170C0	; jumptable 642170A3 default case
		mov	eax, [esp+1Ch+var_1C]
		mov	ecx, [esp+1Ch+arg_C]
		shl	eax, 4
		mov	byte ptr [eax+ecx+0Ch],	0
		lea	eax, [edx+2]
		movzx	ecx, byte ptr [edx+2]
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_64217203:				; CODE XREF: _big2_getAtts+43j
					; _big2_getAtts+7Ej
					; DATA XREF: ...
		test	esi, esi	; jumptable 642170A3 case 7
					; jumptable 642170DE cases 0-3
		jnz	short loc_64217224
		mov	ebx, [esp+1Ch+arg_8]
		mov	si, 1
		cmp	[esp+1Ch+var_1C], ebx
		jge	short loc_64217224
		mov	eax, [esp+1Ch+var_1C]
		shl	eax, 4
		add	eax, [esp+1Ch+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_64217224:				; CODE XREF: _big2_getAtts+1A5j
					; _big2_getAtts+1B2j
		lea	eax, [edx+4]
		movzx	ecx, byte ptr [edx+4]
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_64217232:				; CODE XREF: _big2_getAtts+43j
					; DATA XREF: .rdata:off_6422169Co
		test	esi, esi	; jumptable 642170A3 case 6
		jnz	short loc_64217253
		mov	ecx, [esp+1Ch+arg_8]
		mov	si, 1
		cmp	[esp+1Ch+var_1C], ecx
		jge	short loc_64217253
		mov	eax, [esp+1Ch+var_1C]
		shl	eax, 4
		add	eax, [esp+1Ch+arg_C]
		mov	[eax], edx
		mov	byte ptr [eax+0Ch], 1

loc_64217253:				; CODE XREF: _big2_getAtts+1D4j
					; _big2_getAtts+1E1j
		lea	eax, [edi+2]
		movzx	ecx, byte ptr [edi+2]
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_64217261:				; CODE XREF: _big2_getAtts+43j
					; DATA XREF: .rdata:off_6422169Co
		test	esi, esi	; jumptable 642170A3 case 5
		jnz	loc_642170C0	; jumptable 642170A3 default case
		mov	eax, [esp+1Ch+arg_8]
		cmp	[esp+1Ch+var_1C], eax
		jl	loc_642170F2
		jmp	loc_64217102
; ---------------------------------------------------------------------------
		align 10h

loc_64217280:				; CODE XREF: _big2_getAtts+43j
					; DATA XREF: .rdata:off_6422169Co
		mov	ebx, [esp+1Ch+arg_8] ; jumptable 642170A3 case 3
		cmp	[esp+1Ch+var_1C], ebx
		jge	loc_642170C0	; jumptable 642170A3 default case
		mov	eax, [esp+1Ch+var_1C]
		mov	ebp, [esp+1Ch+arg_C]
		shl	eax, 4
		mov	byte ptr [eax+ebp+0Ch],	0
		lea	eax, [edx+2]
		movzx	ecx, byte ptr [edx+2]
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_642172AA:				; CODE XREF: _big2_getAtts+53j
		mov	ebp, [esp+1Ch+var_1C]
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642172B7:				; CODE XREF: _big2_getAtts+7Ej
					; DATA XREF: .rdata:off_64221708o
		cmp	bl, 0FEh	; jumptable 642170DE case 39
		jb	loc_642170E5	; jumptable 642170A3 cases 22,24,29
		xor	eax, eax
		jmp	loc_6421709B
; ---------------------------------------------------------------------------

loc_642172C7:				; CODE XREF: _big2_getAtts+7Ej
					; DATA XREF: .rdata:off_64221708o
		mov	eax, 8		; jumptable 642170DE cases 4-7
		lea	esi, [esi+0]
		jmp	loc_6421709B
; ---------------------------------------------------------------------------

loc_642172D5:				; CODE XREF: _big2_getAtts+B5j
					; _big2_getAtts+169j
		lea	eax, [edx+2]
		movzx	ecx, byte ptr [edx+2]
		xor	si, si
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_642172E6:				; CODE XREF: _big2_getAtts+114j
		mov	ecx, [esp+1Ch+var_1C]
		lea	eax, [edx+2]
		mov	esi, 2
		mov	ebp, [esp+1Ch+arg_C]
		shl	ecx, 4
		mov	[ecx+ebp+4], eax
		movzx	ecx, byte ptr [edx+2]
		mov	edx, eax
		mov	[esp+1Ch+var_18], 0Dh
		jmp	loc_642170C9
; ---------------------------------------------------------------------------
		align 10h

loc_64217310:				; CODE XREF: _big2_getAtts+145j
		mov	ecx, [esp+1Ch+var_1C]
		lea	eax, [edx+2]
		mov	esi, 2
		mov	ebx, [esp+1Ch+arg_C]
		shl	ecx, 4
		mov	[ecx+ebx+4], eax
		movzx	ecx, byte ptr [edx+2]
		mov	edx, eax
		mov	[esp+1Ch+var_18], 0Ch
		jmp	loc_642170C9
; ---------------------------------------------------------------------------
		align 10h

loc_64217340:				; CODE XREF: _big2_getAtts+107j
		cmp	[esp+1Ch+var_18], 0Dh
		jnz	loc_642170C0	; jumptable 642170A3 default case
		mov	eax, [esp+1Ch+arg_8]
		cmp	[esp+1Ch+var_1C], eax
		jge	short loc_64217362
		mov	eax, [esp+1Ch+var_1C]
		mov	ecx, [esp+1Ch+arg_C]
		shl	eax, 4
		mov	[eax+ecx+8], edx

loc_64217362:				; CODE XREF: _big2_getAtts+2F2j
					; _big2_getAtts+328j ...
		add	[esp+1Ch+var_1C], 1
		xor	esi, esi
		lea	eax, [edx+2]
		movzx	ecx, byte ptr [edx+2]
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_64217376:				; CODE XREF: _big2_getAtts+138j
		cmp	[esp+1Ch+var_18], 0Ch
		jnz	loc_642170C0	; jumptable 642170A3 default case
		mov	ebp, [esp+1Ch+arg_8]
		cmp	[esp+1Ch+var_1C], ebp
		jge	short loc_64217362
		mov	eax, [esp+1Ch+var_1C]
		mov	ecx, [esp+1Ch+arg_C]
		shl	eax, 4
		mov	[eax+ecx+8], edx
		jmp	short loc_64217362
; ---------------------------------------------------------------------------

loc_6421739A:				; CODE XREF: _big2_getAtts+E8j
		movzx	ecx, byte ptr [ebp+0]
		mov	eax, ebp
		test	cl, cl
		jnz	short loc_642173D3
		movzx	edx, byte ptr [edx+3]
		cmp	dl, 20h
		jz	loc_6421714E
		mov	ebx, [esp+1Ch+arg_0]
		movzx	edx, dl
		movzx	edx, byte ptr [ebx+edx+4Ch]

loc_642173BD:				; CODE XREF: _big2_getAtts+384j
					; _big2_getAtts+390j ...
		cmp	edx, [esp+1Ch+var_18]
		mov	esi, 2
		jz	loc_6421714E
		mov	edx, eax
		jmp	loc_642170C9
; ---------------------------------------------------------------------------

loc_642173D3:				; CODE XREF: _big2_getAtts+342j
		cmp	cl, 0DFh
		movzx	ebx, byte ptr [edx+3]
		ja	short loc_642173F2
		cmp	cl, 0DCh
		mov	edx, 8
		jnb	short loc_642173BD
		cmp	cl, 0D8h
		jb	short loc_642173F7
		mov	edx, 7
		jmp	short loc_642173BD
; ---------------------------------------------------------------------------

loc_642173F2:				; CODE XREF: _big2_getAtts+37Aj
		cmp	cl, 0FFh
		jz	short loc_64217402

loc_642173F7:				; CODE XREF: _big2_getAtts+389j
					; _big2_getAtts+3A9j
		mov	edx, 1Dh
		lea	esi, [esi+0]
		jmp	short loc_642173BD
; ---------------------------------------------------------------------------

loc_64217402:				; CODE XREF: _big2_getAtts+395j
		xor	edx, edx
		cmp	bl, 0FEh
		jnb	short loc_642173BD
		jmp	short loc_642173F7
_big2_getAtts	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_charRefNumber proc near		; DATA XREF: .rdata:642240ACo
					; .rdata:6422454Co

arg_4		= dword	ptr  8

		push	ebx
		mov	eax, [esp+4+arg_4]
		movzx	ebx, byte ptr [eax+4]
		lea	edx, [eax+4]
		test	bl, bl
		jnz	short loc_64217426
		cmp	byte ptr [edx+1], 78h
		jz	short loc_64217497

loc_64217426:				; CODE XREF: _big2_charRefNumber+Ej
		xor	eax, eax
		jmp	short loc_64217447
; ---------------------------------------------------------------------------
		align 10h

loc_64217430:				; CODE XREF: _big2_charRefNumber+47j
		movsx	ecx, cl

loc_64217433:				; CODE XREF: _big2_charRefNumber+3Ej
		lea	eax, [eax+eax*4]
		lea	eax, [ecx+eax*2-30h]
		cmp	eax, 10FFFFh
		jg	short loc_64217490
		add	edx, 2
		movzx	ebx, byte ptr [edx]

loc_64217447:				; CODE XREF: _big2_charRefNumber+18j
		test	bl, bl
		mov	ecx, 0FFFFFFFFh
		jnz	short loc_64217433
		movzx	ecx, byte ptr [edx+1]
		cmp	cl, 3Bh
		jnz	short loc_64217430

loc_64217459:				; CODE XREF: _big2_charRefNumber+9Cj
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 0DFh
		jle	short loc_64217471
		cmp	edx, 0FFh
		jz	short loc_642174E9

loc_6421746E:				; CODE XREF: _big2_charRefNumber+70j
					; _big2_charRefNumber+79j
		pop	ebx
		nop
		retn
; ---------------------------------------------------------------------------

loc_64217471:				; CODE XREF: _big2_charRefNumber+54j
		cmp	edx, 0D8h
		jge	short loc_64217490
		test	edx, edx
		nop
		lea	esi, [esi+0]
		jnz	short loc_6421746E
		cmp	ds:byte_6422290C[eax], 0
		jnz	short loc_6421746E
		nop
		lea	esi, [esi+0]

loc_64217490:				; CODE XREF: _big2_charRefNumber+2Fj
					; _big2_charRefNumber+67j ...
		mov	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_64217497:				; CODE XREF: _big2_charRefNumber+14j
		lea	edx, [eax+6]
		xor	eax, eax
		lea	esi, [esi+0]

loc_642174A0:				; CODE XREF: _big2_charRefNumber+C5j
		cmp	byte ptr [edx],	0
		jnz	short loc_642174CB ; jumptable 642174BC	default	case
		movzx	ecx, byte ptr [edx+1]
		cmp	cl, 3Bh
		jz	short loc_64217459
		movsx	ebx, cl
		sub	ecx, 30h
		cmp	cl, 36h		; switch 55 cases
		ja	short loc_642174CB ; jumptable 642174BC	default	case
		movzx	ecx, cl
		jmp	ds:off_642217A8[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642174C3:				; CODE XREF: _big2_charRefNumber+ACj
					; DATA XREF: .rdata:off_642217A8o
		shl	eax, 4		; jumptable 642174BC cases 0-9
		sub	ebx, 30h
		or	eax, ebx

loc_642174CB:				; CODE XREF: _big2_charRefNumber+93j
					; _big2_charRefNumber+A7j ...
		cmp	eax, 10FFFFh	; jumptable 642174BC default case
		jg	short loc_64217490
		add	edx, 2
		jmp	short loc_642174A0
; ---------------------------------------------------------------------------

loc_642174D7:				; CODE XREF: _big2_charRefNumber+ACj
					; DATA XREF: .rdata:off_642217A8o
		shl	eax, 4		; jumptable 642174BC cases 49-54
		lea	eax, [eax+ebx-57h]
		jmp	short loc_642174CB ; jumptable 642174BC	default	case
; ---------------------------------------------------------------------------

loc_642174E0:				; CODE XREF: _big2_charRefNumber+ACj
					; DATA XREF: .rdata:off_642217A8o
		shl	eax, 4		; jumptable 642174BC cases 17-22
		lea	eax, [eax+ebx-37h]
		jmp	short loc_642174CB ; jumptable 642174BC	default	case
; ---------------------------------------------------------------------------

loc_642174E9:				; CODE XREF: _big2_charRefNumber+5Cj
		lea	edx, [eax-0FFFEh]
		cmp	edx, 1
		jbe	short loc_64217490
		pop	ebx
		retn
_big2_charRefNumber endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_predefinedEntityName proc	near	; DATA XREF: .rdata:642240B0o
					; .rdata:64224550o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_8]
		sub	eax, edx
		mov	ecx, eax
		shr	ecx, 1Fh
		lea	eax, [ecx+eax]
		sar	eax, 1
		cmp	eax, 3
		jz	loc_642175A1
		cmp	eax, 4
		jz	short loc_64217556
		cmp	eax, 2
		jz	short loc_64217530

loc_64217527:				; CODE XREF: _big2_predefinedEntityName+34j
					; _big2_predefinedEntityName+3Aj ...
		xor	eax, eax

locret_64217529:			; CODE XREF: _big2_predefinedEntityName+4Bj
					; _big2_predefinedEntityName+9Bj ...
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_64217530:				; CODE XREF: _big2_predefinedEntityName+25j
		cmp	byte ptr [edx+2], 0
		jnz	short loc_64217527
		cmp	byte ptr [edx+3], 74h
		jnz	short loc_64217527
		cmp	byte ptr [edx],	0
		nop
		jnz	short loc_64217527
		movzx	edx, byte ptr [edx+1]
		mov	al, 3Eh
		cmp	dl, 67h
		jz	short locret_64217529
		cmp	dl, 6Ch
		mov	al, 3Ch
		jnz	short loc_64217527
		rep retn
; ---------------------------------------------------------------------------

loc_64217556:				; CODE XREF: _big2_predefinedEntityName+20j
		cmp	byte ptr [edx],	0
		jnz	short loc_64217527
		movzx	eax, byte ptr [edx+1]
		cmp	al, 61h
		jz	loc_642175F3
		cmp	al, 71h
		jnz	short loc_64217527
		cmp	byte ptr [edx+2], 0
		lea	eax, [edx+2]
		jnz	short loc_64217527
		cmp	byte ptr [eax+1], 75h
		jnz	short loc_64217527
		cmp	byte ptr [edx+4], 0
		lea	eax, [edx+4]
		jnz	short loc_64217527
		cmp	byte ptr [eax+1], 6Fh
		jnz	short loc_64217527
		cmp	byte ptr [edx+6], 0
		lea	ecx, [edx+6]
		jnz	short loc_64217527
		cmp	byte ptr [ecx+1], 74h
		mov	eax, 22h
		jz	short locret_64217529
		xor	eax, eax
		jmp	short locret_64217529
; ---------------------------------------------------------------------------

loc_642175A1:				; CODE XREF: _big2_predefinedEntityName+17j
		cmp	byte ptr [edx],	0
		jnz	loc_64217527
		cmp	byte ptr [edx+1], 61h
		xchg	ax, ax
		jnz	loc_64217527
		cmp	byte ptr [edx+2], 0
		lea	eax, [edx+2]
		lea	esi, [esi+0]
		jnz	loc_64217527
		cmp	byte ptr [eax+1], 6Dh
		jnz	loc_64217527
		cmp	byte ptr [edx+4], 0
		lea	ecx, [edx+4]
		jnz	loc_64217527
		cmp	byte ptr [ecx+1], 70h
		mov	eax, 26h
		jz	locret_64217529
		xor	eax, eax
		jmp	locret_64217529
; ---------------------------------------------------------------------------

loc_642175F3:				; CODE XREF: _big2_predefinedEntityName+61j
		cmp	byte ptr [edx+2], 0
		lea	eax, [edx+2]
		jnz	loc_64217527
		cmp	byte ptr [eax+1], 70h
		jnz	loc_64217527
		cmp	byte ptr [edx+4], 0
		lea	eax, [edx+4]
		jnz	loc_64217527
		cmp	byte ptr [eax+1], 6Fh
		jnz	loc_64217527
		cmp	byte ptr [edx+6], 0
		lea	ecx, [edx+6]
		jnz	loc_64217527
		cmp	byte ptr [ecx+1], 73h
		mov	eax, 27h
		jz	locret_64217529
		xor	eax, eax
		jmp	locret_64217529
_big2_predefinedEntityName endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_sameName	proc near		; DATA XREF: .rdata:64224098o
					; .rdata:64224538o

var_11		= byte ptr -11h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	edi, [esp+14h+arg_0]
		mov	ecx, [esp+14h+arg_4]
		mov	eax, [esp+14h+arg_8]

loc_64217663:				; CODE XREF: _big2_sameName+97j
					; _big2_sameName+E3j
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jnz	short loc_642176B4
		lea	esi, [ecx+1]
		movzx	ecx, byte ptr [ecx+1]
		mov	ebx, esi
		movzx	ebp, cl
		mov	[esp+14h+var_11], cl
		movzx	ebp, byte ptr [edi+ebp+4Ch]

loc_6421767F:				; CODE XREF: _big2_sameName+102j
					; _big2_sameName+110j
		sub	ebp, 5
		cmp	ebp, 18h	; switch 25 cases
		jbe	short loc_642176F0

loc_64217687:				; CODE XREF: _big2_sameName:loc_642176F0j
					; DATA XREF: .rdata:off_64221884o
		movzx	edx, byte ptr [eax] ; jumptable	642176F0 default case
		test	dl, dl
		jnz	loc_64217765
		movzx	eax, byte ptr [eax+1]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5
		cmp	eax, 18h
		jbe	loc_64217776

loc_642176A7:				; CODE XREF: _big2_sameName+144j
		add	esp, 4
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642176B4:				; CODE XREF: _big2_sameName+18j
		lea	esi, [ecx+1]
		movzx	ecx, byte ptr [ecx+1]
		lea	ebp, [edx+28h]
		mov	ebx, esi
		mov	[esp+14h+var_11], cl
		mov	ecx, ebp
		cmp	cl, 27h
		jbe	short loc_64217738

loc_642176CB:				; CODE XREF: _big2_sameName:loc_642176F0j
					; _big2_sameName+EEj ...
		cmp	dl, [eax]	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		jnz	loc_642177C0
		movzx	edx, [esp+14h+var_11]
		cmp	[eax+1], dl
		jnz	loc_642177C0
		add	eax, 2
		lea	ecx, [esi+1]
		jmp	loc_64217663
; ---------------------------------------------------------------------------
		align 10h

loc_642176F0:				; CODE XREF: _big2_sameName+35j
		jmp	ds:off_64221884[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642176F7:				; CODE XREF: _big2_sameName:loc_642176F0j
					; _big2_sameName+EEj
					; DATA XREF: ...
		cmp	dl, [eax]	; jumptable 642176F0 case 2
					; jumptable 6421773E cases 0-3
		jnz	loc_642177C0
		movzx	edx, byte ptr [esi]
		add	eax, 1
		lea	ebx, [esi+1]

loc_64217708:				; CODE XREF: _big2_sameName:loc_642176F0j
					; DATA XREF: .rdata:off_64221884o
		cmp	[eax], dl	; jumptable 642176F0 case 1
		jnz	loc_642177C0
		movzx	edx, byte ptr [ebx]
		add	eax, 1
		add	ebx, 1

loc_64217719:				; CODE XREF: _big2_sameName:loc_642176F0j
					; DATA XREF: .rdata:off_64221884o
		cmp	[eax], dl	; jumptable 642176F0 case 0
		jnz	loc_642177C0
		movzx	edx, byte ptr [ebx]
		cmp	dl, [eax+1]
		jnz	loc_642177C0
		lea	ecx, [ebx+1]
		add	eax, 2
		jmp	loc_64217663
; ---------------------------------------------------------------------------

loc_64217738:				; CODE XREF: _big2_sameName+79j
		and	ebp, 0FFh	; switch 256 cases
		jmp	ds:off_642218E8[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64217745:				; CODE XREF: _big2_sameName+EEj
					; DATA XREF: .rdata:64221984o
		cmp	[esp+14h+var_11], 0FEh ; jumptable 6421773E case 39
		jb	loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		xor	ebp, ebp
		jmp	loc_6421767F
; ---------------------------------------------------------------------------

loc_64217757:				; CODE XREF: _big2_sameName+EEj
					; DATA XREF: .rdata:642218F8o ...
		mov	ebp, 8		; jumptable 6421773E cases 4-7
		lea	esi, [esi+0]
		jmp	loc_6421767F
; ---------------------------------------------------------------------------

loc_64217765:				; CODE XREF: _big2_sameName+3Cj
		add	edx, 28h
		movzx	eax, byte ptr [eax+1]
		cmp	dl, 27h		; switch 1 cases
		jbe	short loc_64217785

loc_64217771:				; CODE XREF: _big2_sameName+EEj
					; _big2_sameName+142j
					; DATA XREF: ...
		mov	eax, 18h	; jumptable 6421773E cases 48-78

loc_64217776:				; CODE XREF: _big2_sameName+51j
		mov	eax, ds:_CSWTCH_460[eax*4]

loc_6421777D:				; CODE XREF: _big2_sameName+15Cj
					; _big2_sameName+16Cj
		add	esp, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64217785:				; CODE XREF: _big2_sameName+11Fj
		movzx	edx, dl
		jmp	ds:off_64221988[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64217790:				; CODE XREF: _big2_sameName+EEj
					; DATA XREF: .rdata:64221A24o
		cmp	al, 0FEh	; jumptable 6421773E case 79
		jb	short loc_64217771 ; jumptable 6421773E	cases 48-78
		jmp	loc_642176A7
; ---------------------------------------------------------------------------
		align 10h

loc_642177A0:				; CODE XREF: _big2_sameName+EEj
					; DATA XREF: .rdata:64221998o ...
		mov	eax, 3		; jumptable 6421773E cases 44-47
		mov	eax, ds:_CSWTCH_460[eax*4]
		jmp	short loc_6421777D
; ---------------------------------------------------------------------------
		align 10h

loc_642177B0:				; CODE XREF: _big2_sameName+EEj
					; _big2_sameName+138j
					; DATA XREF: ...
		mov	eax, 2		; jumptable 6421773E cases 40-43
					; jumptable 64217788 case 0
		mov	eax, ds:_CSWTCH_460[eax*4]
		jmp	short loc_6421777D
; ---------------------------------------------------------------------------
		align 10h

loc_642177C0:				; CODE XREF: _big2_sameName+7Dj
					; _big2_sameName+8Bj ...
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_big2_sameName	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_nameMatchesAscii proc near	; DATA XREF: .rdata:6422409Co
					; .rdata:6422453Co

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	edx, [esp+4+arg_C]
		mov	eax, [esp+4+arg_4]
		mov	ebx, [esp+4+arg_8]
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_64217811
		cmp	eax, ebx
		jnz	short loc_64217806
		jmp	short loc_6421780B
; ---------------------------------------------------------------------------
		align 10h

loc_642177F0:				; CODE XREF: _big2_nameMatchesAscii+39j
		cmp	cl, [eax+1]
		jnz	short loc_6421780B
		add	edx, 1
		add	eax, 2
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_64217811
		cmp	ebx, eax
		jz	short loc_6421780B

loc_64217806:				; CODE XREF: _big2_nameMatchesAscii+16j
		cmp	byte ptr [eax],	0
		jz	short loc_642177F0

loc_6421780B:				; CODE XREF: _big2_nameMatchesAscii+18j
					; _big2_nameMatchesAscii+23j ...
		xor	eax, eax
		pop	ebx
		xchg	ax, ax
		retn
; ---------------------------------------------------------------------------

loc_64217811:				; CODE XREF: _big2_nameMatchesAscii+12j
					; _big2_nameMatchesAscii+30j
		cmp	eax, ebx
		setz	al
		movzx	eax, al
		pop	ebx
		retn
_big2_nameMatchesAscii endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_nameLength proc near		; DATA XREF: .rdata:642240A0o
					; .rdata:64224540o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	ebx, [esp+8+arg_4]
		mov	ecx, [esp+8+arg_0]
		mov	eax, ebx

loc_6421782C:				; CODE XREF: _big2_nameLength+53j
					; _big2_nameLength+73j	...
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_64217850
		movzx	edx, byte ptr [eax+1]
		movzx	edx, byte ptr [ecx+edx+4Ch]

loc_6421783C:				; CODE XREF: _big2_nameLength+82j
		sub	edx, 5
		cmp	edx, 18h
		jbe	short loc_64217882

loc_64217844:				; CODE XREF: _big2_sameName+EEj
					; _big2_nameLength+3Fj	...
		sub	eax, ebx	; jumptable 6421773E cases 84-87,123-136,143
					; jumptable 6421785F cases 4-7
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64217850:				; CODE XREF: _big2_nameLength+11j
		add	edx, 28h
		movzx	esi, byte ptr [eax+1]
		cmp	dl, 27h		; switch 40 cases
		ja	short loc_64217870 ; jumptable 6421773E	cases 88-118,120,137-142,144
					; jumptable 64217882 cases 5,22-27,29
		movzx	edx, dl
		jmp	ds:off_64221A28[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64217866:				; CODE XREF: _big2_sameName+EEj
					; _big2_nameLength+3Fj
					; DATA XREF: ...
		mov	edx, esi	; jumptable 6421773E case 119
					; jumptable 6421785F case 39
		cmp	dl, 0FEh
		jnb	short loc_642178A0
		lea	esi, [esi+0]

loc_64217870:				; CODE XREF: _big2_sameName+EEj
					; _big2_nameLength+3Aj	...
		add	eax, 2		; jumptable 6421773E cases 88-118,120,137-142,144
					; jumptable 64217882 cases 5,22-27,29
		jmp	short loc_6421782C
; ---------------------------------------------------------------------------

loc_64217875:				; CODE XREF: _big2_sameName+EEj
					; _big2_nameLength+3Fj
					; DATA XREF: ...
		mov	edx, 7		; jumptable 6421773E cases 80-83
					; jumptable 6421785F cases 0-3
		sub	edx, 5		; switch 25 cases
		cmp	edx, 18h
		ja	short loc_64217844 ; jumptable 6421773E	cases 84-87,123-136,143
					; jumptable 6421785F cases 4-7

loc_64217882:				; CODE XREF: _big2_nameLength+22j
		jmp	ds:off_64221AC8[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64217890:				; CODE XREF: _big2_sameName+EEj
					; _big2_nameLength:loc_64217882j
					; DATA XREF: ...
		add	eax, 4		; jumptable 6421773E case 122
					; jumptable 64217882 case 7
		jmp	short loc_6421782C
; ---------------------------------------------------------------------------

loc_64217895:				; CODE XREF: _big2_sameName+EEj
					; _big2_nameLength:loc_64217882j
					; DATA XREF: ...
		add	eax, 3		; jumptable 6421773E case 121
					; jumptable 64217882 case 6
		jmp	short loc_6421782C
; ---------------------------------------------------------------------------
		align 10h

loc_642178A0:				; CODE XREF: _big2_nameLength+4Bj
		xor	edx, edx
		jmp	short loc_6421783C
_big2_nameLength endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_skipS	proc near		; DATA XREF: .rdata:642240A4o
					; .rdata:64224544o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	ebx, [esp+8+arg_0]
		mov	eax, [esp+8+arg_4]
		lea	esi, [esi+0]

loc_642178C0:				; CODE XREF: _big2_skipS+62j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_642178D8
		movzx	edx, byte ptr [eax+1]
		movzx	ecx, byte ptr [ebx+edx+4Ch]
		cmp	ecx, 15h
		jbe	short loc_64217900

loc_642178D5:				; CODE XREF: _big2_skipS+2Fj
					; _big2_skipS+3Ej ...
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_642178D8:				; CODE XREF: _big2_skipS+15j
		cmp	dl, 0D8h
		movzx	esi, byte ptr [eax+1]
		jb	short loc_642178D5
		cmp	dl, 0DBh
		mov	ecx, 7
		jbe	short loc_64217900
		cmp	dl, 0FFh
		jnz	short loc_642178D5
		mov	edx, esi
		cmp	dl, 0FEh
		jb	short loc_642178D5
		xor	cl, cl
		lea	esi, [esi+0]

loc_64217900:				; CODE XREF: _big2_skipS+23j
					; _big2_skipS+39j
		mov	edx, 1
		shl	edx, cl
		and	edx, 200600h
		jz	short loc_642178D5
		add	eax, 2
		jmp	short loc_642178C0
_big2_skipS	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_updatePosition proc near		; DATA XREF: .rdata:642240B4o
					; .rdata:64224554o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	eax, [esp+10h+arg_4]
		mov	ebx, [esp+10h+arg_8]
		mov	esi, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_C]
		cmp	eax, ebx
		jnb	short loc_64217980

loc_64217938:				; CODE XREF: _big2_updatePosition+5Ej
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_64217957
		movzx	edx, byte ptr [eax+1]
		movzx	edi, byte ptr [esi+edx+4Ch]

loc_64217948:				; CODE XREF: _big2_updatePosition+48j
					; _big2_updatePosition+CBj
		lea	edx, [edi-5]	; switch 6 cases
		cmp	edx, 5
		ja	short loc_64217970 ; jumptable 6421773E	cases 145,148
		jmp	ds:off_64221B2C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64217957:				; CODE XREF: _big2_updatePosition+1Dj
		cmp	dl, 0D8h
		movzx	ebp, byte ptr [eax+1]
		jb	short loc_64217970 ; jumptable 6421773E	cases 145,148
		cmp	dl, 0DBh
		mov	edi, 7
		jbe	short loc_64217948
		cmp	dl, 0FFh
		jz	short loc_642179E1
		nop

loc_64217970:				; CODE XREF: _big2_sameName+EEj
					; _big2_updatePosition+2Ej ...
		mov	edx, [ecx+4]	; jumptable 6421773E cases 145,148
		add	eax, 2
		add	edx, 1

loc_64217979:				; CODE XREF: _big2_updatePosition+8Bj
					; _big2_updatePosition+99j ...
		cmp	eax, ebx
		mov	[ecx+4], edx
		jb	short loc_64217938

loc_64217980:				; CODE XREF: _big2_updatePosition+16j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64217985:				; CODE XREF: _big2_sameName+EEj
					; _big2_updatePosition+30j
					; DATA XREF: ...
		add	eax, 2		; jumptable 6421773E case 149
					; jumptable 64217950 case 9
		add	dword ptr [ecx], 1
		cmp	eax, ebx
		jz	short loc_642179A2
		cmp	byte ptr [eax],	0
		jnz	short loc_642179A2
		movzx	edx, byte ptr [eax+1]
		cmp	byte ptr [esi+edx+4Ch],	0Ah
		jnz	short loc_642179A2
		add	eax, 2

loc_642179A2:				; CODE XREF: _big2_updatePosition+6Dj
					; _big2_updatePosition+72j ...
		mov	dword ptr [ecx+4], 0FFFFFFFFh
		xor	edx, edx
		jmp	short loc_64217979
; ---------------------------------------------------------------------------
		align 10h

loc_642179B0:				; CODE XREF: _big2_sameName+EEj
					; _big2_updatePosition+30j
					; DATA XREF: ...
		mov	edx, [ecx+4]	; jumptable 6421773E case 147
					; jumptable 64217950 case 7
		add	eax, 4
		add	edx, 1
		jmp	short loc_64217979
; ---------------------------------------------------------------------------
		align 10h

loc_642179C0:				; CODE XREF: _big2_sameName+EEj
					; _big2_updatePosition+30j
					; DATA XREF: ...
		mov	edx, [ecx+4]	; jumptable 6421773E case 146
					; jumptable 64217950 case 6
		add	eax, 3
		add	edx, 1
		jmp	short loc_64217979
; ---------------------------------------------------------------------------
		align 10h

loc_642179D0:				; CODE XREF: _big2_sameName+EEj
					; _big2_updatePosition+30j
					; DATA XREF: ...
		mov	dword ptr [ecx+4], 0FFFFFFFFh ;	jumptable 6421773E case	150
					; jumptable 64217950 case 10
		add	eax, 2
		xor	edx, edx
		add	dword ptr [ecx], 1
		jmp	short loc_64217979
; ---------------------------------------------------------------------------

loc_642179E1:				; CODE XREF: _big2_updatePosition+4Dj
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	short loc_64217970 ; jumptable 6421773E	cases 145,148
		xor	di, di
		jmp	loc_64217948
_big2_updatePosition endp


; =============== S U B	R O U T	I N E =======================================


		public _XmlUtf8Encode
_XmlUtf8Encode	proc near		; CODE XREF: _appendAttributeValue+182p
					; _storeEntityValue+240p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		test	eax, eax
		js	short loc_64217A37
		cmp	eax, 7Fh
		jle	short loc_64217A21
		cmp	eax, 7FFh
		jg	short loc_64217A40
		mov	ecx, eax
		and	eax, 3Fh
		sar	ecx, 6
		or	eax, 0FFFFFF80h
		or	ecx, 0FFFFFFC0h
		mov	[edx+1], al
		mov	eax, 2
		mov	[edx], cl
		retn
; ---------------------------------------------------------------------------

loc_64217A21:				; CODE XREF: _XmlUtf8Encode+Fj
		mov	[edx], al
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64217A30:				; CODE XREF: _XmlUtf8Encode+55j
		cmp	eax, 10FFFFh
		jle	short loc_64217A70

loc_64217A37:				; CODE XREF: _XmlUtf8Encode+Aj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64217A40:				; CODE XREF: _XmlUtf8Encode+16j
		cmp	eax, 0FFFFh
		jg	short loc_64217A30
		mov	ecx, eax
		sar	ecx, 0Ch
		or	ecx, 0FFFFFFE0h
		mov	[edx], cl
		mov	ecx, eax
		and	eax, 3Fh
		sar	ecx, 6
		or	eax, 0FFFFFF80h
		and	ecx, 3Fh
		or	ecx, 0FFFFFF80h
		mov	[edx+2], al
		mov	eax, 3
		mov	[edx+1], cl
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64217A70:				; CODE XREF: _XmlUtf8Encode+45j
		mov	ecx, eax
		sar	ecx, 12h
		or	ecx, 0FFFFFFF0h
		mov	[edx], cl
		mov	ecx, eax
		sar	ecx, 0Ch
		and	ecx, 3Fh
		or	ecx, 0FFFFFF80h
		mov	[edx+1], cl
		mov	ecx, eax
		and	eax, 3Fh
		sar	ecx, 6
		or	eax, 0FFFFFF80h
		and	ecx, 3Fh
		or	ecx, 0FFFFFF80h
		mov	[edx+3], al
		mov	eax, 4
		mov	[edx+2], cl
		retn
_XmlUtf8Encode	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlUtf16Encode
_XmlUtf16Encode	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		test	eax, eax
		js	short loc_64217B00
		cmp	eax, 0FFFFh
		jle	short loc_64217AF0
		cmp	eax, 10FFFFh
		jg	short loc_64217B00
		sub	eax, 10000h
		mov	ecx, eax
		and	ax, 3FFh
		sar	ecx, 0Ah
		sub	ax, 2400h
		sub	cx, 2800h
		mov	[edx+2], ax
		mov	eax, 2
		mov	[edx], cx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64217AF0:				; CODE XREF: _XmlUtf16Encode+11j
		mov	[edx], ax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64217B00:				; CODE XREF: _XmlUtf16Encode+Aj
					; _XmlUtf16Encode+18j
		xor	eax, eax
		retn
_XmlUtf16Encode	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlSizeOfUnknownEncoding
_XmlSizeOfUnknownEncoding proc near	; CODE XREF: _handleUnknownEncoding+99p
		mov	eax, 778h
		retn
_XmlSizeOfUnknownEncoding endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_unknown_isName	proc near		; DATA XREF: _XmlInitUnknownEncoding+145o
					; _XmlInitUnknownEncoding+14Fo	...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_18], edx
		mov	edx, [eax+174h]
		mov	[esp+1Ch+var_1C], edx
		call	dword ptr [eax+170h]
		mov	ecx, eax
		xor	eax, eax
		test	ecx, 0FFFF0000h
		jnz	short loc_64217B70
		mov	eax, ecx
		sar	eax, 8
		movzx	edx, ds:_namePages[eax]
		movzx	eax, cl
		and	ecx, 1Fh
		sar	eax, 5
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		and	eax, ds:_namingBitmap[edx*4]

loc_64217B70:				; CODE XREF: _unknown_isName+28j
		add	esp, 1Ch
		retn
_unknown_isName	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_unknown_isNmstrt proc near		; DATA XREF: _XmlInitUnknownEncoding+163o
					; _XmlInitUnknownEncoding+16Do	...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_18], edx
		mov	edx, [eax+174h]
		mov	[esp+1Ch+var_1C], edx
		call	dword ptr [eax+170h]
		mov	ecx, eax
		xor	eax, eax
		test	ecx, 0FFFF0000h
		jnz	short loc_64217BD0
		mov	eax, ecx
		sar	eax, 8
		movzx	edx, ds:_nmstrtPages[eax]
		movzx	eax, cl
		and	ecx, 1Fh
		sar	eax, 5
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		and	eax, ds:_namingBitmap[edx*4]

loc_64217BD0:				; CODE XREF: _unknown_isNmstrt+28j
		add	esp, 1Ch
		retn
_unknown_isNmstrt endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_unknown_isInvalid proc	near		; DATA XREF: _XmlInitUnknownEncoding+181o
					; _XmlInitUnknownEncoding+18Bo	...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_18], edx
		mov	edx, [eax+174h]
		mov	[esp+1Ch+var_1C], edx
		call	dword ptr [eax+170h]
		test	eax, 0FFFF0000h
		jnz	short loc_64217C36
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 0DFh
		jle	short loc_64217C21
		cmp	edx, 0FFh
		jz	short loc_64217C40

loc_64217C1A:				; CODE XREF: _unknown_isInvalid+4Bj
					; _unknown_isInvalid+54j ...
		shr	eax, 1Fh
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_64217C21:				; CODE XREF: _unknown_isInvalid+30j
		cmp	edx, 0D8h
		jge	short loc_64217C36
		test	edx, edx
		jnz	short loc_64217C1A
		cmp	ds:byte_6422290C[eax], 0
		jnz	short loc_64217C1A

loc_64217C36:				; CODE XREF: _unknown_isInvalid+23j
					; _unknown_isInvalid+47j ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64217C40:				; CODE XREF: _unknown_isInvalid+38j
		lea	edx, [eax-0FFFEh]
		cmp	edx, 1
		ja	short loc_64217C1A
		jmp	short loc_64217C36
_unknown_isInvalid endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_unknown_toUtf16 proc near		; DATA XREF: _XmlInitUnknownEncoding+1A8o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_4]
		mov	ebp, [esp+2Ch+arg_8]
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_C]
		mov	edx, [edi]
		cmp	edx, ebp
		jz	short loc_64217CD1
		mov	eax, [esp+2Ch+arg_10]
		cmp	[ebx], eax
		jnz	short loc_64217C90
		jmp	short loc_64217CD1
; ---------------------------------------------------------------------------

loc_64217C77:				; CODE XREF: _unknown_toUtf16+4Ej
		mov	ecx, [ebx]
		add	edx, 1
		mov	[edi], edx
		mov	[ecx], ax
		add	ecx, 2
		cmp	edx, ebp
		mov	[ebx], ecx
		jz	short loc_64217CD1

loc_64217C8A:				; CODE XREF: _unknown_toUtf16+7Fj
		cmp	[esp+2Ch+arg_10], ecx
		jz	short loc_64217CD1

loc_64217C90:				; CODE XREF: _unknown_toUtf16+23j
		movzx	eax, byte ptr [edx]
		movzx	eax, word ptr [esi+eax*2+178h]
		test	ax, ax
		jnz	short loc_64217C77
		mov	[esp+2Ch+var_28], edx
		mov	eax, [esi+174h]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [esi+170h]
		mov	edx, [edi]
		movzx	ecx, byte ptr [edx]
		movzx	ecx, byte ptr [esi+ecx+4Ch]
		lea	edx, [edx+ecx-3]
		mov	ecx, [ebx]
		mov	[edi], edx
		mov	[ecx], ax
		add	ecx, 2
		cmp	edx, ebp
		mov	[ebx], ecx
		jnz	short loc_64217C8A

loc_64217CD1:				; CODE XREF: _unknown_toUtf16+1Bj
					; _unknown_toUtf16+25j	...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_unknown_toUtf16 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_initScan	proc near		; CODE XREF: _initScanProlog+2Bj
					; _initScanContent+2Ej	...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 3Ch
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	eax, 0FFFFFFFCh
		mov	[esp+3Ch+var_8], edi
		cmp	esi, ebp
		jz	short loc_64217D73
		mov	eax, [edx+4Ch]
		mov	[esp+3Ch+var_20], eax
		lea	eax, [esi+1]
		cmp	eax, ebp
		jz	loc_64217ECC
		movzx	eax, byte ptr [esi]
		mov	[esp+3Ch+var_22], al
		movzx	eax, byte ptr [esi+1]
		movzx	edi, [esp+3Ch+var_22]
		mov	[esp+3Ch+var_21], al
		movzx	eax, al
		shl	edi, 8
		or	eax, edi
		cmp	eax, 0EFBBh
		jz	loc_64217E25
		jle	short loc_64217D87
		cmp	eax, 0FEFFh
		jz	loc_64217DE1
		cmp	eax, 0FFFEh
		jnz	short loc_64217D8E
		cmp	ecx, 1
		jz	loc_64217E73

loc_64217D5C:				; CODE XREF: _initScan+197j
		mov	eax, [esp+3Ch+arg_8]
		add	esi, 2
		mov	edx, [esp+3Ch+var_20]
		mov	[eax], esi
		mov	eax, [ebx+14h]
		mov	[edx], eax
		mov	eax, 0Eh

loc_64217D73:				; CODE XREF: _initScan+24j
					; _initScan+FFj ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_64217D87:				; CODE XREF: _initScan+5Fj
		cmp	eax, 3C00h
		jz	short loc_64217E06

loc_64217D8E:				; CODE XREF: _initScan+71j
		cmp	[esp+3Ch+var_22], 0
		jnz	short loc_64217DB0
		cmp	ecx, 1
		jnz	short loc_64217DA5
		cmp	byte ptr [edx+49h], 5
		mov	eax, 5
		jz	short loc_64217DC0

loc_64217DA5:				; CODE XREF: _initScan+B8j
		mov	eax, [ebx+10h]
		jmp	short loc_64217DC3
; ---------------------------------------------------------------------------
		align 10h

loc_64217DB0:				; CODE XREF: _initScan+B3j
		cmp	[esp+3Ch+var_21], 0
		jz	loc_64217E95

loc_64217DBB:				; CODE XREF: _initScan+171j
					; _initScan+1B8j
		movsx	eax, byte ptr [edx+49h]
		nop

loc_64217DC0:				; CODE XREF: _initScan+C3j
					; _initScan+13Ej ...
		mov	eax, [ebx+eax*4]

loc_64217DC3:				; CODE XREF: _initScan+C8j
					; _initScan+143j
		mov	edx, [esp+3Ch+var_20]
		mov	[edx], eax
		mov	edx, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_30], edx
		call	dword ptr [eax+ecx*4]
		jmp	short loc_64217D73
; ---------------------------------------------------------------------------

loc_64217DE1:				; CODE XREF: _initScan+66j
		cmp	ecx, 1
		jz	loc_64217E84

loc_64217DEA:				; CODE XREF: _initScan+1A8j
		mov	edx, [esp+3Ch+arg_8]
		add	esi, 2
		mov	eax, [ebx+10h]
		mov	[edx], esi
		mov	edx, [esp+3Ch+var_20]
		mov	[edx], eax
		mov	eax, 0Eh
		jmp	loc_64217D73
; ---------------------------------------------------------------------------

loc_64217E06:				; CODE XREF: _initScan+ACj
		movzx	edx, byte ptr [edx+49h]
		cmp	ecx, 1
		mov	[esp+3Ch+var_22], dl
		jnz	short loc_64217E20
		lea	edi, [edx-3]
		movsx	eax, dl
		mov	edx, edi
		cmp	dl, 1
		jbe	short loc_64217DC0

loc_64217E20:				; CODE XREF: _initScan+131j
					; _initScan+1C0j
		mov	eax, [ebx+14h]
		jmp	short loc_64217DC3
; ---------------------------------------------------------------------------

loc_64217E25:				; CODE XREF: _initScan+59j
		cmp	ecx, 1
		jnz	short loc_64217E46
		movsx	eax, byte ptr [edx+49h]
		cmp	eax, 4
		jz	short loc_64217DC0
		test	eax, eax
		jz	short loc_64217DC0
		cmp	eax, 3
		jz	short loc_64217DC0
		cmp	eax, 5
		nop
		jz	loc_64217DC0

loc_64217E46:				; CODE XREF: _initScan+148j
		lea	eax, [esi+2]
		cmp	eax, ebp
		jz	short loc_64217EC2
		cmp	byte ptr [esi+2], 0BFh
		jnz	loc_64217DBB
		mov	eax, [esp+3Ch+arg_8]
		add	esi, 3
		mov	edx, [esp+3Ch+var_20]
		mov	[eax], esi
		mov	eax, [ebx+8]
		mov	[edx], eax
		mov	eax, 0Eh
		jmp	loc_64217D73
; ---------------------------------------------------------------------------

loc_64217E73:				; CODE XREF: _initScan+76j
		cmp	byte ptr [edx+49h], 0
		jnz	loc_64217D5C

loc_64217E7D:				; CODE XREF: _initScan+1E0j
		xor	eax, eax
		jmp	loc_64217DC0
; ---------------------------------------------------------------------------

loc_64217E84:				; CODE XREF: _initScan+104j
		cmp	byte ptr [edx+49h], 0
		jnz	loc_64217DEA
		xor	eax, eax
		jmp	loc_64217DC0
; ---------------------------------------------------------------------------

loc_64217E95:				; CODE XREF: _initScan+D5j
		cmp	ecx, 1
		jz	loc_64217DBB
		xchg	ax, ax
		jmp	loc_64217E20
; ---------------------------------------------------------------------------

loc_64217EA5:				; CODE XREF: _initScan+207j
		mov	edx, edi
		movsx	eax, [esp+3Ch+var_22]
		cmp	dl, 0FEh
		nop
		jb	loc_64217DC0

loc_64217EB6:				; CODE XREF: _initScan+205j
		cmp	ecx, 1
		jnz	short loc_64217EC2
		cmp	[esp+3Ch+var_22], 0
		jz	short loc_64217E7D

loc_64217EC2:				; CODE XREF: _initScan+16Bj
					; _initScan+1D9j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_64217D73
; ---------------------------------------------------------------------------

loc_64217ECC:				; CODE XREF: _initScan+32j
		movzx	edx, byte ptr [edx+49h]
		mov	eax, edx
		sub	eax, 3
		cmp	al, 2
		mov	[esp+3Ch+var_22], dl
		jbe	short loc_64217EC2
		movzx	edi, byte ptr [esi]
		mov	edx, edi
		cmp	dl, 0EFh
		jz	short loc_64217EB6
		ja	short loc_64217EA5
		test	dl, dl
		jz	short loc_64217EC2
		cmp	dl, 3Ch
		movsx	eax, [esp+3Ch+var_22]
		jnz	loc_64217DC0
		jmp	short loc_64217EC2
_initScan	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlGetUtf8InternalEncoding
_XmlGetUtf8InternalEncoding proc near	; CODE XREF: _parserCreate:loc_64204C46p
		mov	eax, offset _internal_utf8_encoding
		retn
_XmlGetUtf8InternalEncoding endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlGetUtf16InternalEncoding
_XmlGetUtf16InternalEncoding proc near
		mov	eax, offset _internal_little2_encoding
		retn
_XmlGetUtf16InternalEncoding endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_initScanProlog	proc near		; DATA XREF: _XmlInitEncoding+1Fo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 8
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		mov	ebx, [esp+0Ch+arg_C]
		mov	edx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, offset _encodings
		mov	[esp+0Ch+arg_4], ecx
		xor	ecx, ecx
		mov	[esp+0Ch+arg_8], ebx
		add	esp, 8
		pop	ebx
		jmp	_initScan
_initScanProlog	endp


; =============== S U B	R O U T	I N E =======================================


_initScanContent proc near		; DATA XREF: _XmlInitEncoding+26o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 8
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		mov	ebx, [esp+0Ch+arg_C]
		mov	edx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, offset _encodings
		mov	[esp+0Ch+arg_4], ecx
		mov	ecx, 1
		mov	[esp+0Ch+arg_8], ebx
		add	esp, 8
		pop	ebx
		jmp	_initScan
_initScanContent endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_findEncoding	proc near		; DATA XREF: _XmlParseXmlDecl+6Bo

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_A0		= byte ptr -0A0h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0CCh
		mov	[esp+0CCh+var_8], edi
		mov	edi, [esp+0CCh+arg_8]
		lea	eax, [esp+0CCh+var_21]
		mov	[esp+0CCh+var_4], ebp
		mov	ebp, [esp+0CCh+arg_0]
		mov	[esp+0CCh+var_BC], eax
		lea	eax, [esp+0CCh+var_20]
		mov	[esp+0CCh+var_C], esi
		lea	esi, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_C0], eax
		lea	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_10], ebx
		mov	[esp+0CCh+var_20], esi
		mov	[esp+0CCh+var_C4], edi
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebp
		call	dword ptr [ebp+3Ch]
		cmp	[esp+0CCh+arg_4], edi
		jz	short loc_64218026

loc_64217FFF:				; CODE XREF: _findEncoding+120j
		xor	ebp, ebp

loc_64218001:				; CODE XREF: _findEncoding+D6j
					; _findEncoding+113j
		mov	eax, ebp
		mov	ebx, [esp+0CCh+var_10]
		mov	esi, [esp+0CCh+var_C]
		mov	edi, [esp+0CCh+var_8]
		mov	ebp, [esp+0CCh+var_4]
		add	esp, 0CCh
		retn
; ---------------------------------------------------------------------------

loc_64218026:				; CODE XREF: _findEncoding+6Dj
		mov	eax, [esp+0CCh+var_20]
		mov	byte ptr [eax],	0
		xor	eax, eax

loc_64218032:				; CODE XREF: _findEncoding+D0j
		movzx	edx, byte ptr [esi+eax]
		movzx	ecx, ds:_KW_UTF_16[eax]
		lea	edi, [edx-61h]
		mov	ebx, edi
		cmp	bl, 19h
		ja	short loc_6421804A
		sub	edx, 20h

loc_6421804A:				; CODE XREF: _findEncoding+B5j
		lea	edi, [ecx-61h]
		mov	ebx, edi
		cmp	bl, 19h
		ja	short loc_64218057
		sub	ecx, 20h

loc_64218057:				; CODE XREF: _findEncoding+C2j
		cmp	dl, cl
		jnz	short loc_64218068
		add	eax, 1
		test	dl, dl
		jnz	short loc_64218032
		cmp	dword ptr [ebp+44h], 2
		jz	short loc_64218001

loc_64218068:				; CODE XREF: _findEncoding+C9j
		xor	ebp, ebp

loc_6421806A:				; CODE XREF: _findEncoding+11Ej
		mov	edi, ds:_encodingNames_10248[ebp*4]
		xor	edx, edx

loc_64218073:				; CODE XREF: _findEncoding+10Aj
		movzx	eax, byte ptr [esi+edx]
		movzx	ecx, byte ptr [edi+edx]
		lea	ebx, [eax-61h]
		cmp	bl, 19h
		ja	short loc_64218086
		sub	eax, 20h

loc_64218086:				; CODE XREF: _findEncoding+F1j
		lea	ebx, [ecx-61h]
		cmp	bl, 19h
		ja	short loc_64218091
		sub	ecx, 20h

loc_64218091:				; CODE XREF: _findEncoding+FCj
		cmp	al, cl
		jnz	short loc_642180A8
		add	edx, 1
		test	al, al
		jnz	short loc_64218073
		mov	ebp, ds:_encodings[ebp*4]
		jmp	loc_64218001
; ---------------------------------------------------------------------------

loc_642180A8:				; CODE XREF: _findEncoding+103j
		add	ebp, 1
		cmp	ebp, 6
		jnz	short loc_6421806A
		jmp	loc_64217FFF
_findEncoding	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlGetUtf8InternalEncodingNS
_XmlGetUtf8InternalEncodingNS proc near	; CODE XREF: _parserCreate+1A8p
		mov	eax, offset _internal_utf8_encoding_ns
		retn
_XmlGetUtf8InternalEncodingNS endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlGetUtf16InternalEncodingNS
_XmlGetUtf16InternalEncodingNS proc near
		mov	eax, offset _internal_little2_encoding_ns
		retn
_XmlGetUtf16InternalEncodingNS endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_initScanPrologNS proc near		; DATA XREF: _XmlInitEncodingNS+1Fo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 8
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		mov	ebx, [esp+0Ch+arg_C]
		mov	edx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, offset _encodingsNS
		mov	[esp+0Ch+arg_4], ecx
		xor	ecx, ecx
		mov	[esp+0Ch+arg_8], ebx
		add	esp, 8
		pop	ebx
		jmp	_initScan
_initScanPrologNS endp


; =============== S U B	R O U T	I N E =======================================


_initScanContentNS proc	near		; DATA XREF: _XmlInitEncodingNS+26o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 8
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		mov	ebx, [esp+0Ch+arg_C]
		mov	edx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, offset _encodingsNS
		mov	[esp+0Ch+arg_4], ecx
		mov	ecx, 1
		mov	[esp+0Ch+arg_8], ebx
		add	esp, 8
		pop	ebx
		jmp	_initScan
_initScanContentNS endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_initUpdatePosition proc near		; DATA XREF: _XmlInitEncoding+2Do
					; _XmlInitEncodingNS+2Do

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	eax, [esp+4+arg_4]
		mov	ebx, [esp+4+arg_8]
		mov	edx, [esp+4+arg_C]
		cmp	eax, ebx
		jb	short loc_64218173
		jmp	short loc_642181A6
; ---------------------------------------------------------------------------

loc_64218163:				; CODE XREF: _big2_sameName+EEj
					; _initUpdatePosition+33j ...
		mov	ecx, [edx+4]	; jumptable 6421773E case 154
		add	eax, 1
		add	ecx, 1

loc_6421816C:				; CODE XREF: _initUpdatePosition+7Dj
					; _initUpdatePosition+89j ...
		cmp	ebx, eax
		mov	[edx+4], ecx
		jbe	short loc_642181A6

loc_64218173:				; CODE XREF: _initUpdatePosition+Fj
					; _initUpdatePosition+54j
		movzx	ecx, byte ptr [eax]
		movzx	ecx, ds:byte_642231AC[ecx]
		sub	ecx, 5
		cmp	cl, 5		; switch 6 cases
		ja	short loc_64218163 ; jumptable 6421773E	case 154
		movzx	ecx, cl
		jmp	ds:off_64221B44[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64218190:				; CODE XREF: _big2_sameName+EEj
					; _initUpdatePosition+38j
					; DATA XREF: ...
		add	eax, 1		; jumptable 6421773E case 156
					; jumptable 64218188 case 5
		xor	ecx, ecx
		add	dword ptr [edx], 1
		cmp	ebx, eax
		mov	dword ptr [edx+4], 0FFFFFFFFh
		mov	[edx+4], ecx
		ja	short loc_64218173

loc_642181A6:				; CODE XREF: _initUpdatePosition+11j
					; _initUpdatePosition+21j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_642181A8:				; CODE XREF: _big2_sameName+EEj
					; _initUpdatePosition+38j
					; DATA XREF: ...
		add	eax, 1		; jumptable 6421773E case 155
					; jumptable 64218188 case 4
		add	dword ptr [edx], 1
		cmp	ebx, eax
		jz	short loc_642181C4
		movzx	ecx, byte ptr [eax]
		cmp	ds:byte_642231AC[ecx], 0Ah
		setz	cl
		movzx	ecx, cl
		add	eax, ecx

loc_642181C4:				; CODE XREF: _initUpdatePosition+60j
		mov	dword ptr [edx+4], 0FFFFFFFFh
		xor	ecx, ecx
		jmp	short loc_6421816C
; ---------------------------------------------------------------------------
		align 10h

loc_642181D0:				; CODE XREF: _big2_sameName+EEj
					; _initUpdatePosition+38j
					; DATA XREF: ...
		mov	ecx, [edx+4]	; jumptable 6421773E case 153
					; jumptable 64218188 case 2
		add	eax, 4
		add	ecx, 1
		jmp	short loc_6421816C
; ---------------------------------------------------------------------------
		align 10h

loc_642181E0:				; CODE XREF: _big2_sameName+EEj
					; _initUpdatePosition+38j
					; DATA XREF: ...
		mov	ecx, [edx+4]	; jumptable 6421773E case 152
					; jumptable 64218188 case 1
		add	eax, 3
		add	ecx, 1
		jmp	short loc_6421816C
; ---------------------------------------------------------------------------
		align 10h

loc_642181F0:				; CODE XREF: _big2_sameName+EEj
					; _initUpdatePosition+38j
					; DATA XREF: ...
		mov	ecx, [edx+4]	; jumptable 6421773E case 151
					; jumptable 64218188 case 0
		add	eax, 2
		add	ecx, 1
		jmp	loc_6421816C
_initUpdatePosition endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlInitEncoding
_XmlInitEncoding proc near		; CODE XREF: _parserInit+8Fp
					; DATA XREF: _prologInitProcessor+2Fo ...

var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	eax, 6
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	esi, [esp+14h+arg_8]
		mov	ebp, [esp+14h+arg_0]
		test	esi, esi
		jnz	short loc_64218246

loc_64218218:				; CODE XREF: _XmlInitEncoding+8Dj
		mov	[ebp+49h], al
		mov	eax, [esp+14h+arg_4]
		mov	dword ptr [ebp+0], offset _initScanProlog
		mov	dword ptr [ebp+4], offset _initScanContent
		mov	dword ptr [ebp+34h], offset _initUpdatePosition
		mov	[ebp+4Ch], eax
		mov	[eax], ebp
		mov	eax, 1

loc_6421823E:				; CODE XREF: _XmlInitEncoding+9Cj
		add	esp, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64218246:				; CODE XREF: _XmlInitEncoding+16j
		mov	[esp+14h+var_14], 0

loc_6421824D:				; CODE XREF: _XmlInitEncoding+98j
		mov	eax, [esp+14h+var_14]
		xor	edx, edx
		mov	edi, ds:_encodingNames_10248[eax*4]
		lea	esi, [esi+0]

loc_64218260:				; CODE XREF: _XmlInitEncoding+87j
		movzx	eax, byte ptr [esi+edx]
		movzx	ecx, byte ptr [edi+edx]
		lea	ebx, [eax-61h]
		cmp	bl, 19h
		ja	short loc_64218273
		sub	eax, 20h

loc_64218273:				; CODE XREF: _XmlInitEncoding+6Ej
		lea	ebx, [ecx-61h]
		cmp	bl, 19h
		ja	short loc_6421827E
		sub	ecx, 20h

loc_6421827E:				; CODE XREF: _XmlInitEncoding+79j
		cmp	al, cl
		jnz	short loc_64218290
		add	edx, 1
		test	al, al
		jnz	short loc_64218260
		movzx	eax, byte ptr [esp+14h+var_14]
		jmp	short loc_64218218
; ---------------------------------------------------------------------------
		align 10h

loc_64218290:				; CODE XREF: _XmlInitEncoding+80j
		add	[esp+14h+var_14], 1
		cmp	[esp+14h+var_14], 6
		jnz	short loc_6421824D
		xor	eax, eax
		jmp	short loc_6421823E
_XmlInitEncoding endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlInitEncodingNS
_XmlInitEncodingNS proc	near		; CODE XREF: _prologInitProcessor+4Bp
					; _externalParEntInitProcessor+53p ...

var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	eax, 6
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	esi, [esp+14h+arg_8]
		mov	ebp, [esp+14h+arg_0]
		test	esi, esi
		jnz	short loc_642182E6

loc_642182B8:				; CODE XREF: _XmlInitEncodingNS+8Dj
		mov	[ebp+49h], al
		mov	eax, [esp+14h+arg_4]
		mov	dword ptr [ebp+0], offset _initScanPrologNS
		mov	dword ptr [ebp+4], offset _initScanContentNS
		mov	dword ptr [ebp+34h], offset _initUpdatePosition
		mov	[ebp+4Ch], eax
		mov	[eax], ebp
		mov	eax, 1

loc_642182DE:				; CODE XREF: _XmlInitEncodingNS+9Cj
		add	esp, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_642182E6:				; CODE XREF: _XmlInitEncodingNS+16j
		mov	[esp+14h+var_14], 0

loc_642182ED:				; CODE XREF: _XmlInitEncodingNS+98j
		mov	eax, [esp+14h+var_14]
		xor	edx, edx
		mov	edi, ds:_encodingNames_10248[eax*4]
		lea	esi, [esi+0]

loc_64218300:				; CODE XREF: _XmlInitEncodingNS+87j
		movzx	eax, byte ptr [esi+edx]
		movzx	ecx, byte ptr [edi+edx]
		lea	ebx, [eax-61h]
		cmp	bl, 19h
		ja	short loc_64218313
		sub	eax, 20h

loc_64218313:				; CODE XREF: _XmlInitEncodingNS+6Ej
		lea	ebx, [ecx-61h]
		cmp	bl, 19h
		ja	short loc_6421831E
		sub	ecx, 20h

loc_6421831E:				; CODE XREF: _XmlInitEncodingNS+79j
		cmp	al, cl
		jnz	short loc_64218330
		add	edx, 1
		test	al, al
		jnz	short loc_64218300
		movzx	eax, byte ptr [esp+14h+var_14]
		jmp	short loc_642182B8
; ---------------------------------------------------------------------------
		align 10h

loc_64218330:				; CODE XREF: _XmlInitEncodingNS+80j
		add	[esp+14h+var_14], 1
		cmp	[esp+14h+var_14], 6
		jnz	short loc_642182ED
		xor	eax, eax
		jmp	short loc_642182DE
_XmlInitEncodingNS endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_unknown_toUtf8	proc near		; DATA XREF: _XmlInitUnknownEncoding:loc_6421864Fo

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_20		= byte ptr -20h
var_1F		= byte ptr -1Fh
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [esp+4Ch+arg_0]
		mov	edi, [esp+4Ch+arg_4]
		mov	esi, [esp+4Ch+arg_C]
		add	eax, 378h
		mov	[esp+4Ch+var_30], eax
		jmp	short loc_6421838D
; ---------------------------------------------------------------------------
		align 10h

loc_64218360:				; CODE XREF: _unknown_toUtf8+69j
		mov	edx, [esp+4Ch+arg_10]
		sub	edx, [esi]
		cmp	ebx, edx
		jg	loc_64218424
		add	eax, 1
		add	ebp, 1
		mov	[edi], eax

loc_64218376:				; CODE XREF: _unknown_toUtf8+CFj
		mov	edx, [esi]
		xor	eax, eax

loc_6421837A:				; CODE XREF: _unknown_toUtf8+4Bj
		movzx	ecx, byte ptr [ebp+eax+0]
		add	eax, 1
		mov	[edx], cl
		add	edx, 1
		cmp	eax, ebx
		mov	[esi], edx
		jnz	short loc_6421837A

loc_6421838D:				; CODE XREF: _unknown_toUtf8+1Cj
		mov	eax, [edi]
		cmp	eax, [esp+4Ch+arg_8]
		jz	loc_64218424
		movzx	edx, byte ptr [eax]
		mov	ecx, [esp+4Ch+var_30]
		lea	ebp, [ecx+edx*4]
		movsx	ebx, byte ptr [ebp+0]
		test	ebx, ebx
		jnz	short loc_64218360
		mov	edx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_48], eax
		mov	eax, [edx+174h]
		mov	[esp+4Ch+var_4C], eax
		call	dword ptr [edx+170h]
		test	eax, eax
		js	short loc_642183ED
		cmp	eax, 7Fh
		jle	short loc_64218414
		cmp	eax, 7FFh
		jg	short loc_64218430
		mov	edx, eax
		and	eax, 3Fh
		sar	edx, 6
		or	eax, 0FFFFFF80h
		or	edx, 0FFFFFFC0h
		mov	ebx, 2
		mov	[esp+4Ch+var_20], dl
		mov	[esp+4Ch+var_1F], al

loc_642183ED:				; CODE XREF: _unknown_toUtf8+84j
					; _unknown_toUtf8+121j	...
		mov	eax, [esp+4Ch+arg_10]
		sub	eax, [esi]
		cmp	eax, ebx
		jl	short loc_64218424

loc_642183F7:				; CODE XREF: _unknown_toUtf8+E2j
		mov	eax, [edi]
		lea	ebp, [esp+4Ch+var_20]
		mov	ecx, [esp+4Ch+arg_0]
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [ecx+edx+4Ch]
		lea	eax, [eax+edx-3]
		mov	[edi], eax
		jmp	loc_64218376
; ---------------------------------------------------------------------------

loc_64218414:				; CODE XREF: _unknown_toUtf8+89j
		mov	[esp+4Ch+var_20], al
		mov	eax, [esp+4Ch+arg_10]
		mov	bl, 1
		sub	eax, [esi]
		cmp	eax, ebx
		jge	short loc_642183F7

loc_64218424:				; CODE XREF: _unknown_toUtf8+28j
					; _unknown_toUtf8+53j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64218430:				; CODE XREF: _unknown_toUtf8+90j
		cmp	eax, 0FFFFh
		jg	short loc_64218463
		mov	edx, eax
		mov	ebx, 3
		sar	edx, 0Ch
		or	edx, 0FFFFFFE0h
		mov	[esp+4Ch+var_20], dl
		mov	edx, eax
		and	eax, 3Fh
		sar	edx, 6
		or	eax, 0FFFFFF80h
		and	edx, 3Fh
		or	edx, 0FFFFFF80h
		mov	[esp+4Ch+var_1F], dl
		mov	[esp+4Ch+var_1E], al
		jmp	short loc_642183ED
; ---------------------------------------------------------------------------

loc_64218463:				; CODE XREF: _unknown_toUtf8+F5j
		cmp	eax, 10FFFFh
		jg	short loc_642183ED
		mov	edx, eax
		mov	ebx, 4
		sar	edx, 12h
		or	edx, 0FFFFFFF0h
		mov	[esp+4Ch+var_20], dl
		mov	edx, eax
		sar	edx, 0Ch
		and	edx, 3Fh
		or	edx, 0FFFFFF80h
		mov	[esp+4Ch+var_1F], dl
		mov	edx, eax
		and	eax, 3Fh
		sar	edx, 6
		or	eax, 0FFFFFF80h
		and	edx, 3Fh
		or	edx, 0FFFFFF80h
		mov	[esp+4Ch+var_1E], dl
		mov	[esp+4Ch+var_1D], al
		jmp	loc_642183ED
_unknown_toUtf8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlInitUnknownEncoding
_XmlInitUnknownEncoding	proc near	; CODE XREF: _XmlInitUnknownEncodingNS+22p
					; DATA XREF: _handleUnknownEncoding+BBo

var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+20h+arg_0]
		mov	edi, [esp+20h+arg_4]
		mov	eax, ebx
		or	eax, offset _latin1_encoding
		test	al, 3
		jnz	loc_642187DB
		cmp	ebx, offset off_642228C4
		jbe	loc_642187CB

loc_642184DA:				; CODE XREF: _XmlInitUnknownEncoding+325j
		xor	eax, eax
		lea	esi, [esi+0]

loc_642184E0:				; CODE XREF: _XmlInitUnknownEncoding+41j
		mov	edx, ds:_latin1_encoding[eax]
		mov	[ebx+eax], edx
		add	eax, 4
		cmp	eax, 170h
		jnz	short loc_642184E0

loc_642184F3:				; CODE XREF: _XmlInitUnknownEncoding+344j
		xor	eax, eax
		jmp	short loc_64218501
; ---------------------------------------------------------------------------

loc_642184F7:				; CODE XREF: _XmlInitUnknownEncoding+5Aj
					; _XmlInitUnknownEncoding+5Fj ...
		add	eax, 1
		cmp	eax, 80h
		jz	short loc_64218520

loc_64218501:				; CODE XREF: _XmlInitUnknownEncoding+45j
		movzx	edx, ds:byte_6422290C[eax]
		test	dl, dl
		jz	short loc_642184F7
		cmp	dl, 1Ch
		jz	short loc_642184F7
		cmp	[edi+eax*4], eax
		jz	short loc_642184F7

loc_64218516:				; CODE XREF: _XmlInitUnknownEncoding+1FCj
					; _XmlInitUnknownEncoding+2F3j
		xor	eax, eax

loc_64218518:				; CODE XREF: _XmlInitUnknownEncoding+2EAj
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64218520:				; CODE XREF: _XmlInitUnknownEncoding+4Fj
		lea	eax, [ebx+378h]
		xor	edx, edx
		mov	[esp+20h+var_14], eax
		jmp	short loc_6421856C
; ---------------------------------------------------------------------------
		align 10h

loc_64218530:				; CODE XREF: _XmlInitUnknownEncoding+D3j
		movzx	ecx, ds:byte_6422290C[eax]
		test	cl, cl
		jnz	loc_64218787

loc_6421853F:				; CODE XREF: _XmlInitUnknownEncoding+2DAj
					; _XmlInitUnknownEncoding+2E2j
		cmp	eax, 1
		mov	[ebx+edx+4Ch], cl
		sbb	ecx, ecx
		mov	[ebx+edx*4+379h], al
		or	eax, ecx
		mov	byte ptr [ebx+edx*4+378h], 1
		mov	[ebx+edx*2+178h], ax

loc_64218561:				; CODE XREF: _XmlInitUnknownEncoding+1D6j
					; _XmlInitUnknownEncoding+272j	...
		add	edx, 1
		cmp	edx, 100h
		jz	short loc_642185DD

loc_6421856C:				; CODE XREF: _XmlInitUnknownEncoding+7Cj
					; _XmlInitUnknownEncoding+12Bj
		mov	eax, [edi+edx*4]
		cmp	eax, 0FFFFFFFFh
		jz	loc_64218667
		test	eax, eax
		js	loc_642187A0
		cmp	eax, 7Fh
		jle	short loc_64218530
		mov	esi, eax
		sar	esi, 8
		cmp	esi, 0DFh
		jg	loc_64218690
		cmp	esi, 0D8h
		jge	short loc_642185B3
		test	esi, esi
		jnz	loc_642186A7
		cmp	ds:byte_6422290C[eax], 0
		jnz	loc_642186A7

loc_642185B3:				; CODE XREF: _XmlInitUnknownEncoding+ECj
					; _XmlInitUnknownEncoding+1F1j
		mov	byte ptr [ebx+edx+4Ch],	0
		mov	word ptr [ebx+edx*2+178h], 0FFFFh
		mov	byte ptr [ebx+edx*4+378h], 1
		mov	byte ptr [ebx+edx*4+379h], 0
		add	edx, 1
		cmp	edx, 100h
		jnz	short loc_6421856C

loc_642185DD:				; CODE XREF: _XmlInitUnknownEncoding+BAj
		mov	ebp, [esp+20h+arg_8]
		mov	eax, [esp+20h+arg_C]
		test	ebp, ebp
		mov	[ebx+174h], eax
		mov	[ebx+170h], ebp
		jz	short loc_6421864F
		mov	dword ptr [ebx+14Ch], offset _unknown_isName
		mov	dword ptr [ebx+150h], offset _unknown_isName
		mov	dword ptr [ebx+154h], offset _unknown_isName
		mov	dword ptr [ebx+158h], offset _unknown_isNmstrt
		mov	dword ptr [ebx+15Ch], offset _unknown_isNmstrt
		mov	dword ptr [ebx+160h], offset _unknown_isNmstrt
		mov	dword ptr [ebx+164h], offset _unknown_isInvalid
		mov	dword ptr [ebx+168h], offset _unknown_isInvalid
		mov	dword ptr [ebx+16Ch], offset _unknown_isInvalid

loc_6421864F:				; CODE XREF: _XmlInitUnknownEncoding+143j
		mov	dword ptr [ebx+3Ch], offset _unknown_toUtf8
		mov	eax, ebx
		mov	dword ptr [ebx+40h], offset _unknown_toUtf16
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64218667:				; CODE XREF: _XmlInitUnknownEncoding+C2j
		mov	byte ptr [ebx+edx+4Ch],	1
		mov	word ptr [ebx+edx*2+178h], 0FFFFh
		mov	byte ptr [ebx+edx*4+378h], 1
		mov	byte ptr [ebx+edx*4+379h], 0
		jmp	loc_64218561
; ---------------------------------------------------------------------------
		align 10h

loc_64218690:				; CODE XREF: _XmlInitUnknownEncoding+E0j
		cmp	esi, 0FFh
		jnz	short loc_642186A7
		lea	ecx, [eax-0FFFEh]
		cmp	ecx, 1
		jbe	loc_642185B3

loc_642186A7:				; CODE XREF: _XmlInitUnknownEncoding+F0j
					; _XmlInitUnknownEncoding+FDj ...
		cmp	eax, 0FFFFh
		jg	loc_64218516
		movzx	ebp, al
		mov	ecx, eax
		sar	ebp, 5
		and	ecx, 1Fh
		mov	[esp+20h+var_20], ebp
		mov	ebp, 1
		shl	ebp, cl
		movzx	ecx, ds:_nmstrtPages[esi]
		mov	[esp+20h+var_18], ebp
		mov	ebp, [esp+20h+var_20]
		lea	ecx, [ebp+ecx*8+0]
		mov	ebp, [esp+20h+var_18]
		test	ds:_namingBitmap[ecx*4], ebp
		jz	short loc_64218727
		cmp	eax, 7FFh
		mov	byte ptr [ebx+edx+4Ch],	16h
		jg	short loc_64218755

loc_642186F2:				; CODE XREF: _XmlInitUnknownEncoding+2A3j
		mov	ebp, [esp+20h+var_14]
		mov	ecx, eax
		sar	ecx, 6
		or	ecx, 0FFFFFFC0h
		mov	[ebp+edx*4+1], cl
		mov	ecx, eax
		and	ecx, 3Fh
		or	ecx, 0FFFFFF80h
		mov	[ebp+edx*4+2], cl
		mov	ecx, 2

loc_64218713:				; CODE XREF: _XmlInitUnknownEncoding+2D5j
		mov	[ebx+edx*4+378h], cl
		mov	[ebx+edx*2+178h], ax
		jmp	loc_64218561
; ---------------------------------------------------------------------------

loc_64218727:				; CODE XREF: _XmlInitUnknownEncoding+234j
		movzx	ecx, ds:_namePages[esi]
		mov	esi, [esp+20h+var_20]
		lea	ecx, [esi+ecx*8]
		mov	esi, [esp+20h+var_18]
		and	esi, ds:_namingBitmap[ecx*4]
		cmp	esi, 1
		sbb	ecx, ecx
		and	ecx, 2
		add	ecx, 1Ah
		cmp	eax, 7FFh
		mov	[ebx+edx+4Ch], cl
		jle	short loc_642186F2

loc_64218755:				; CODE XREF: _XmlInitUnknownEncoding+240j
		mov	esi, [esp+20h+var_14]
		mov	ecx, eax
		sar	ecx, 0Ch
		or	ecx, 0FFFFFFE0h
		mov	[esi+edx*4+1], cl
		mov	ecx, eax
		sar	ecx, 6
		and	ecx, 3Fh
		or	ecx, 0FFFFFF80h
		mov	[esi+edx*4+2], cl
		mov	ecx, eax
		and	ecx, 3Fh
		or	ecx, 0FFFFFF80h
		mov	[esi+edx*4+3], cl
		mov	ecx, 3
		jmp	short loc_64218713
; ---------------------------------------------------------------------------

loc_64218787:				; CODE XREF: _XmlInitUnknownEncoding+89j
		cmp	cl, 1Ch
		jz	loc_6421853F
		cmp	eax, edx
		jz	loc_6421853F
		xor	eax, eax
		jmp	loc_64218518
; ---------------------------------------------------------------------------
		align 10h

loc_642187A0:				; CODE XREF: _XmlInitUnknownEncoding+CAj
		cmp	eax, 0FFFFFFFCh
		jl	loc_64218516
		mov	ecx, 3
		sub	cl, al
		mov	[ebx+edx+4Ch], cl
		mov	byte ptr [ebx+edx*4+378h], 0
		mov	word ptr [ebx+edx*2+178h], 0
		jmp	loc_64218561
; ---------------------------------------------------------------------------

loc_642187CB:				; CODE XREF: _XmlInitUnknownEncoding+24j
		lea	eax, [ebx+4]
		mov	edx, offset _latin1_encoding
		cmp	edx, eax
		ja	loc_642184DA

loc_642187DB:				; CODE XREF: _XmlInitUnknownEncoding+18j
		xor	eax, eax
		lea	esi, [esi+0]

loc_642187E0:				; CODE XREF: _XmlInitUnknownEncoding+342j
		movzx	edx, byte ptr ds:_latin1_encoding[eax]
		mov	[ebx+eax], dl
		add	eax, 1
		cmp	eax, 170h
		jnz	short loc_642187E0
		jmp	loc_642184F3
_XmlInitUnknownEncoding	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlInitUnknownEncodingNS
_XmlInitUnknownEncodingNS proc near	; CODE XREF: _handleUnknownEncoding+DDp
					; DATA XREF: _handleUnknownEncoding+B4o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		mov	eax, [esp+10h+arg_C]
		mov	[esp+10h+var_4], eax
		mov	eax, [esp+10h+arg_8]
		mov	[esp+10h+var_8], eax
		mov	eax, [esp+10h+arg_4]
		mov	[esp+10h+var_C], eax
		mov	eax, [esp+10h+arg_0]
		mov	[esp+10h+var_10], eax
		call	_XmlInitUnknownEncoding
		test	eax, eax
		jz	short loc_64218832
		mov	byte ptr [eax+86h], 17h

loc_64218832:				; CODE XREF: _XmlInitUnknownEncodingNS+29j
		add	esp, 10h
		retn
_XmlInitUnknownEncodingNS endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_parsePseudoAttribute proc near		; CODE XREF: _doParseXmlDecl+62p
					; _doParseXmlDecl+10Dp	...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1D		= byte ptr -1Dh
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		mov	ebp, ecx
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		cmp	edx, ecx
		jz	loc_64218980
		lea	eax, [esp+5Ch+var_1C]
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_28]
		lea	edi, [esp+5Ch+var_1D]
		mov	[esp+5Ch+var_50], eax
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_24], edx
		mov	[esp+5Ch+var_28], edi
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	dword ptr [ebx+3Ch]
		cmp	[esp+5Ch+var_28], edi
		jz	loc_64218969
		movsx	eax, [esp+5Ch+var_1D]
		sub	eax, 9
		cmp	eax, 17h
		ja	loc_64218969
		mov	eax, ds:_CSWTCH_462[eax*4]
		test	eax, eax
		jz	loc_64218969
		lea	esi, [esi+0]

loc_642188B0:				; CODE XREF: _parsePseudoAttribute+B9j
		add	esi, [ebx+44h]
		lea	eax, [esp+5Ch+var_1C]
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_50], eax
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_28], esi
		mov	[esp+5Ch+var_24], edi
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	dword ptr [ebx+3Ch]
		cmp	[esp+5Ch+var_24], edi
		jz	short loc_64218900
		movsx	eax, [esp+5Ch+var_1D]
		sub	eax, 9
		cmp	eax, 17h
		ja	short loc_64218900
		mov	ecx, ds:_CSWTCH_462[eax*4]
		test	ecx, ecx
		jnz	short loc_642188B0
		nop
		lea	esi, [esi+0]

loc_64218900:				; CODE XREF: _parsePseudoAttribute+A1j
					; _parsePseudoAttribute+AEj
		cmp	esi, ebp
		jz	short loc_64218980
		mov	eax, [esp+5Ch+arg_0]
		mov	[eax], esi
		jmp	short loc_64218939
; ---------------------------------------------------------------------------
		align 10h

loc_64218910:				; CODE XREF: _parsePseudoAttribute+127j
		movsx	eax, [esp+5Ch+var_1D]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_64218969
		cmp	eax, 3Dh
		jz	short loc_64218997
		sub	eax, 9
		cmp	eax, 17h
		ja	short loc_64218936
		mov	edx, ds:_CSWTCH_462[eax*4]
		test	edx, edx
		jnz	loc_64218AE0

loc_64218936:				; CODE XREF: _parsePseudoAttribute+E5j
		add	esi, [ebx+44h]

loc_64218939:				; CODE XREF: _parsePseudoAttribute+CAj
		lea	eax, [esp+5Ch+var_1C]
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_50], eax
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_24], esi
		mov	[esp+5Ch+var_28], edi
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	dword ptr [ebx+3Ch]
		cmp	[esp+5Ch+var_28], edi
		jnz	short loc_64218910

loc_64218969:				; CODE XREF: _parsePseudoAttribute+47j
					; _parsePseudoAttribute+58j ...
		mov	eax, [esp+5Ch+arg_C]
		mov	[eax], esi
		xor	eax, eax

loc_64218971:				; CODE XREF: _parsePseudoAttribute+249j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64218980:				; CODE XREF: _parsePseudoAttribute+Fj
					; _parsePseudoAttribute+C2j
		mov	eax, [esp+5Ch+arg_0]
		mov	dword ptr [eax], 0
		add	esp, 4Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64218997:				; CODE XREF: _parsePseudoAttribute+DDj
		mov	eax, [esp+5Ch+arg_4]
		mov	[eax], esi

loc_6421899D:				; CODE XREF: _parsePseudoAttribute+310j
		mov	eax, [esp+5Ch+arg_0]
		cmp	[eax], esi
		jz	short loc_64218969
		add	esi, [ebx+44h]
		lea	eax, [esp+5Ch+var_1C]
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_50], eax
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_24], esi
		mov	[esp+5Ch+var_28], edi
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	dword ptr [ebx+3Ch]
		mov	edx, 0FFFFFFFFh
		cmp	[esp+5Ch+var_28], edi
		jz	short loc_642189E5
		lea	esi, [esi+0]

loc_642189E0:				; CODE XREF: _parsePseudoAttribute+295j
		movsx	edx, [esp+5Ch+var_1D]

loc_642189E5:				; CODE XREF: _parsePseudoAttribute+19Bj
					; _parsePseudoAttribute+29Bj
		lea	eax, [edx-9]
		cmp	eax, 17h
		jbe	loc_64218A90

loc_642189F1:				; CODE XREF: _parsePseudoAttribute+259j
		cmp	edx, 27h
		jnz	loc_64218B55

loc_642189FA:				; CODE XREF: _parsePseudoAttribute+318j
		mov	eax, [esp+5Ch+arg_8]
		movsx	edx, dl
		add	esi, [ebx+44h]
		mov	[esp+5Ch+var_30], ebp
		mov	ebp, edx
		mov	[eax], esi
		jmp	short loc_64218A39
; ---------------------------------------------------------------------------
		align 10h

loc_64218A10:				; CODE XREF: _parsePseudoAttribute+239j
		lea	edx, [eax-41h]
		cmp	edx, 19h
		jbe	short loc_64218A36
		lea	edx, [eax-61h]
		cmp	edx, 19h
		jbe	short loc_64218A36
		lea	edx, [eax-30h]
		cmp	edx, 9
		jbe	short loc_64218A36
		cmp	eax, 2Eh
		jz	short loc_64218A36
		cmp	eax, 5Fh
		jnz	loc_64218B65

loc_64218A36:				; CODE XREF: _parsePseudoAttribute+1D6j
					; _parsePseudoAttribute+1DEj ...
		add	esi, [ebx+44h]

loc_64218A39:				; CODE XREF: _parsePseudoAttribute+1CCj
		lea	eax, [esp+5Ch+var_1C]
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_50], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_24], esi
		mov	[esp+5Ch+var_28], edi
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_54], eax
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_58], eax
		call	dword ptr [ebx+3Ch]
		mov	eax, 0FFFFFFFFh
		cmp	[esp+5Ch+var_28], edi
		jz	short loc_64218A77
		movsx	eax, [esp+5Ch+var_1D]

loc_64218A77:				; CODE XREF: _parsePseudoAttribute+230j
		cmp	ebp, eax
		jnz	short loc_64218A10
		mov	eax, [esp+5Ch+arg_C]
		add	esi, [ebx+44h]
		mov	[eax], esi
		mov	eax, 1
		jmp	loc_64218971
; ---------------------------------------------------------------------------
		align 10h

loc_64218A90:				; CODE XREF: _parsePseudoAttribute+1ABj
		mov	ecx, ds:_CSWTCH_462[eax*4]
		test	ecx, ecx
		jz	loc_642189F1
		add	esi, [ebx+44h]
		lea	eax, [esp+5Ch+var_1C]
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_50], eax
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_28], esi
		mov	[esp+5Ch+var_24], edi
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	dword ptr [ebx+3Ch]
		mov	edx, 0FFFFFFFFh
		cmp	[esp+5Ch+var_24], edi
		jnz	loc_642189E0
		jmp	loc_642189E5
; ---------------------------------------------------------------------------

loc_64218AE0:				; CODE XREF: _parsePseudoAttribute+F0j
		mov	eax, [esp+5Ch+arg_4]
		mov	[eax], esi

loc_64218AE6:				; CODE XREF: _parsePseudoAttribute+2F3j
		add	esi, [ebx+44h]
		lea	eax, [esp+5Ch+var_1C]
		mov	[esp+5Ch+var_4C], eax
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_50], eax
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_28], esi
		mov	[esp+5Ch+var_24], edi
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	dword ptr [ebx+3Ch]
		cmp	[esp+5Ch+var_24], edi
		jz	loc_64218969
		movsx	edx, [esp+5Ch+var_1D]
		lea	eax, [edx-9]
		cmp	eax, 17h
		ja	short loc_64218B40
		mov	eax, ds:_CSWTCH_462[eax*4]
		test	eax, eax
		jnz	short loc_64218AE6
		jmp	loc_64218969
; ---------------------------------------------------------------------------
		align 10h

loc_64218B40:				; CODE XREF: _parsePseudoAttribute+2E8j
		cmp	edx, 3Dh
		jnz	loc_64218969
		lea	esi, [esi+0]
		jmp	loc_6421899D
; ---------------------------------------------------------------------------

loc_64218B55:				; CODE XREF: _parsePseudoAttribute+1B4j
		cmp	edx, 22h
		jz	loc_642189FA
		xchg	ax, ax
		jmp	loc_64218969
; ---------------------------------------------------------------------------

loc_64218B65:				; CODE XREF: _parsePseudoAttribute+1F0j
		cmp	eax, 2Dh
		jz	loc_64218A36
		xchg	ax, ax
		jmp	loc_64218969
_parsePseudoAttribute endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=28h

_doParseXmlDecl	proc near		; CODE XREF: _XmlParseXmlDecl+73j
					; _XmlParseXmlDeclNS+73j
		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, ecx
		sub	esp, 5Ch
		mov	[esp+2Ch], eax
		mov	eax, [ecx+44h]
		lea	ecx, [esp+44h]
		mov	esi, [esp+74h]
		lea	edi, [esp+48h]
		mov	[esp+28h], edx
		lea	ebp, [esp+40h]
		mov	[esp], ecx
		lea	edx, [eax+eax*4]
		add	eax, eax
		add	edx, [esp+70h]
		sub	esi, eax
		lea	eax, [esp+70h]
		mov	ecx, esi
		mov	[esp+0Ch], eax
		mov	eax, ebx
		mov	dword ptr [esp+48h], 0
		mov	dword ptr [esp+44h], 0
		mov	dword ptr [esp+40h], 0
		mov	[esp+70h], edx
		mov	[esp+8], edi
		mov	[esp+4], ebp
		call	_parsePseudoAttribute
		test	eax, eax
		jz	short loc_64218C30
		mov	eax, [esp+44h]
		test	eax, eax
		jz	short loc_64218C30
		mov	edx, [esp+40h]
		mov	dword ptr [esp+0Ch], offset _KW_version	; "version"
		mov	[esp+4], eax
		mov	[esp], ebx
		mov	[esp+8], edx
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	short loc_64218C44
		mov	ecx, [esp+28h]
		test	ecx, ecx
		jz	loc_64218D14
		mov	eax, [esp+44h]
		jmp	short loc_64218C9E
; ---------------------------------------------------------------------------

loc_64218C23:				; CODE XREF: _doParseXmlDecl+11Cj
		mov	ecx, [esp+28h]
		test	ecx, ecx
		jz	loc_64218DF8
		nop

loc_64218C30:				; CODE XREF: _doParseXmlDecl+69j
					; _doParseXmlDecl+71j
		mov	eax, [esp+70h]
		mov	edx, [esp+78h]
		mov	[edx], eax
		xor	eax, eax

loc_64218C3C:				; CODE XREF: _doParseXmlDecl+1A0j
					; _doParseXmlDecl+27Dj	...
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64218C44:				; CODE XREF: _doParseXmlDecl+8Fj
		mov	edx, [esp+7Ch]
		test	edx, edx
		jz	short loc_64218C56
		mov	eax, [esp+48h]
		mov	edx, [esp+7Ch]
		mov	[edx], eax

loc_64218C56:				; CODE XREF: _doParseXmlDecl+CAj
		mov	eax, [esp+80h]
		test	eax, eax
		jz	short loc_64218C6E
		mov	eax, [esp+70h]
		mov	ecx, [esp+80h]
		mov	[ecx], eax

loc_64218C6E:				; CODE XREF: _doParseXmlDecl+DFj
		lea	edx, [esp+44h]
		mov	ecx, esi
		mov	[esp], edx
		mov	edx, [esp+70h]
		lea	eax, [esp+70h]
		mov	[esp+0Ch], eax
		mov	eax, ebx
		mov	[esp+8], edi
		mov	[esp+4], ebp
		call	_parsePseudoAttribute
		test	eax, eax
		jz	short loc_64218D00
		mov	eax, [esp+44h]
		test	eax, eax
		jz	short loc_64218C23

loc_64218C9E:				; CODE XREF: _doParseXmlDecl+A1j
		mov	edx, [esp+40h]
		mov	dword ptr [esp+0Ch], offset _KW_encoding ; "encoding"
		mov	[esp+4], eax
		mov	[esp], ebx
		mov	[esp+8], edx
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	short loc_64218D25
		mov	eax, [esp+44h]

loc_64218CC0:				; CODE XREF: _doParseXmlDecl+272j
		mov	edx, [esp+40h]
		mov	dword ptr [esp+0Ch], offset _KW_standalone ; "standalone"
		mov	[esp+4], eax
		mov	[esp], ebx
		mov	[esp+8], edx
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	short loc_64218CEA
		mov	ebp, [esp+28h]
		test	ebp, ebp
		jz	loc_64218E20

loc_64218CEA:				; CODE XREF: _doParseXmlDecl+15Cj
		mov	eax, [esp+44h]
		mov	edx, [esp+78h]
		mov	[edx], eax
		add	esp, 5Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64218D00:				; CODE XREF: _doParseXmlDecl+114j
					; _doParseXmlDecl+266j
		mov	eax, [esp+70h]
		mov	ecx, [esp+78h]
		mov	[ecx], eax
		add	esp, 5Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_64218D14:				; CODE XREF: _doParseXmlDecl+97j
		mov	eax, [esp+44h]
		mov	ecx, [esp+78h]
		mov	[ecx], eax
		xor	eax, eax
		jmp	loc_64218C3C
; ---------------------------------------------------------------------------

loc_64218D25:				; CODE XREF: _doParseXmlDecl+13Aj
		mov	eax, [esp+48h]
		lea	ecx, [esp+50h]
		mov	[esp+10h], ecx
		lea	edx, [esp+3Ch]
		lea	ecx, [esp+38h]
		mov	[esp+0Ch], edx
		mov	[esp+38h], eax
		lea	eax, [esp+4Fh]
		mov	[esp+3Ch], eax
		mov	[esp+20h], eax
		mov	[esp+8], esi
		mov	[esp+4], ecx
		mov	[esp], ebx
		call	dword ptr [ebx+3Ch]
		mov	eax, [esp+20h]
		cmp	[esp+3Ch], eax
		jz	loc_64218E0E
		movsx	eax, byte ptr [esp+4Fh]
		lea	edx, [eax-41h]
		cmp	edx, 19h
		ja	loc_64218E02

loc_64218D7A:				; CODE XREF: _doParseXmlDecl+288j
		mov	edx, [esp+84h]
		test	edx, edx
		jz	short loc_64218D92
		mov	eax, [esp+48h]
		mov	edx, [esp+84h]
		mov	[edx], eax

loc_64218D92:				; CODE XREF: _doParseXmlDecl+203j
		mov	eax, [esp+88h]
		test	eax, eax
		jz	short loc_64218DC0
		mov	eax, [esp+70h]
		sub	eax, [ebx+44h]
		mov	[esp], ebx
		mov	[esp+8], eax
		mov	eax, [esp+48h]
		mov	[esp+4], eax
		call	dword ptr [esp+2Ch]
		mov	ecx, [esp+88h]
		mov	[ecx], eax

loc_64218DC0:				; CODE XREF: _doParseXmlDecl+21Bj
		lea	edx, [esp+44h]
		mov	ecx, esi
		mov	[esp], edx
		mov	edx, [esp+70h]
		lea	eax, [esp+70h]
		mov	[esp+0Ch], eax
		mov	eax, ebx
		mov	[esp+8], edi
		mov	[esp+4], ebp
		call	_parsePseudoAttribute
		test	eax, eax
		jz	loc_64218D00
		mov	eax, [esp+44h]
		test	eax, eax
		jnz	loc_64218CC0

loc_64218DF8:				; CODE XREF: _doParseXmlDecl+A9j
					; _doParseXmlDecl+355j
		mov	eax, 1
		jmp	loc_64218C3C
; ---------------------------------------------------------------------------

loc_64218E02:				; CODE XREF: _doParseXmlDecl+1F4j
		sub	eax, 61h
		cmp	eax, 19h
		jbe	loc_64218D7A

loc_64218E0E:				; CODE XREF: _doParseXmlDecl+1E3j
		mov	eax, [esp+48h]
		mov	ecx, [esp+78h]
		mov	[ecx], eax
		xor	eax, eax
		jmp	loc_64218C3C
; ---------------------------------------------------------------------------
		align 10h

loc_64218E20:				; CODE XREF: _doParseXmlDecl+164j
		mov	eax, [esp+70h]
		mov	dword ptr [esp+0Ch], offset _KW_yes ; "yes"
		sub	eax, [ebx+44h]
		mov	[esp], ebx
		mov	[esp+8], eax
		mov	eax, [esp+48h]
		mov	[esp+4], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	loc_64218EE8
		mov	edi, [esp+8Ch]
		test	edi, edi
		jz	short loc_64218E61
		mov	ecx, [esp+8Ch]
		mov	dword ptr [ecx], 1

loc_64218E61:				; CODE XREF: _doParseXmlDecl+2D2j
					; _doParseXmlDecl+396j	...
		lea	ecx, [esp+3Ch]
		mov	edx, [esp+70h]
		lea	eax, [esp+4Fh]
		mov	[esp+24h], ecx
		lea	ecx, [esp+38h]
		mov	edi, eax
		mov	ebp, ecx
		jmp	short loc_64218E96
; ---------------------------------------------------------------------------
		align 10h

loc_64218E80:				; CODE XREF: _doParseXmlDecl+34Dj
		mov	edx, ds:_CSWTCH_462[eax*4]
		test	edx, edx
		jz	short loc_64218ECF
		mov	edx, [esp+70h]
		add	edx, [ebx+44h]
		mov	[esp+70h], edx

loc_64218E96:				; CODE XREF: _doParseXmlDecl+2F9j
		mov	eax, [esp+24h]
		lea	ecx, [esp+50h]
		mov	[esp+3Ch], edx
		mov	[esp+38h], edi
		mov	[esp+10h], ecx
		mov	[esp+0Ch], ebp
		mov	[esp+8], esi
		mov	[esp+4], eax
		mov	[esp], ebx
		call	dword ptr [ebx+3Ch]
		cmp	[esp+38h], edi
		jz	short loc_64218ECF
		movsx	eax, byte ptr [esp+4Fh]
		sub	eax, 9
		cmp	eax, 17h
		jbe	short loc_64218E80

loc_64218ECF:				; CODE XREF: _doParseXmlDecl+309j
					; _doParseXmlDecl+340j
		mov	eax, [esp+70h]
		cmp	eax, esi
		jz	loc_64218DF8
		mov	edx, [esp+78h]
		mov	[edx], eax
		xor	eax, eax
		jmp	loc_64218C3C
; ---------------------------------------------------------------------------

loc_64218EE8:				; CODE XREF: _doParseXmlDecl+2C3j
		mov	eax, [esp+70h]
		mov	dword ptr [esp+0Ch], offset _KW_no ; "no"
		sub	eax, [ebx+44h]
		mov	[esp], ebx
		mov	[esp+8], eax
		mov	eax, [esp+48h]
		mov	[esp+4], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	short loc_64218F2E
		mov	ecx, [esp+8Ch]
		test	ecx, ecx
		jz	loc_64218E61
		mov	eax, [esp+8Ch]
		mov	dword ptr [eax], 0
		jmp	loc_64218E61
; ---------------------------------------------------------------------------

loc_64218F2E:				; CODE XREF: _doParseXmlDecl+38Bj
		mov	eax, [esp+48h]
		mov	edx, [esp+78h]
		mov	[edx], eax
		xor	eax, eax
		jmp	loc_64218C3C
_doParseXmlDecl	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlParseXmlDecl
_XmlParseXmlDecl proc near		; DATA XREF: _processXmlDecl+42o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], ebp
		mov	edx, [esp+1Ch+arg_0]
		mov	ebp, [esp+1Ch+arg_24]
		mov	[esp+1Ch+var_10], ebx
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_0], eax
		mov	eax, [esp+1Ch+arg_C]
		mov	ebx, [esp+1Ch+arg_14]
		mov	[esp+1Ch+var_C], esi
		mov	esi, [esp+1Ch+arg_18]
		mov	[esp+1Ch+var_8], edi
		mov	edi, [esp+1Ch+arg_1C]
		mov	[esp+1Ch+arg_4], eax
		mov	eax, [esp+1Ch+arg_10]
		mov	[esp+1Ch+arg_1C], ebp
		mov	ebp, [esp+1Ch+arg_20]
		mov	[esp+1Ch+arg_10], esi
		mov	esi, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_14], edi
		mov	edi, [esp+1Ch+var_8]
		mov	[esp+1Ch+arg_C], ebx
		mov	ebx, [esp+1Ch+var_10]
		mov	[esp+1Ch+arg_18], ebp
		mov	ebp, [esp+1Ch+var_4]
		mov	[esp+1Ch+arg_8], eax
		mov	eax, offset _findEncoding
		add	esp, 1Ch
		jmp	_doParseXmlDecl
_XmlParseXmlDecl endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _XmlParseXmlDeclNS
_XmlParseXmlDeclNS proc	near		; CODE XREF: _processXmlDecl+8Ep
					; DATA XREF: _processXmlDecl+Do

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], ebp
		mov	edx, [esp+1Ch+arg_0]
		mov	ebp, [esp+1Ch+arg_24]
		mov	[esp+1Ch+var_10], ebx
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_0], eax
		mov	eax, [esp+1Ch+arg_C]
		mov	ebx, [esp+1Ch+arg_14]
		mov	[esp+1Ch+var_C], esi
		mov	esi, [esp+1Ch+arg_18]
		mov	[esp+1Ch+var_8], edi
		mov	edi, [esp+1Ch+arg_1C]
		mov	[esp+1Ch+arg_4], eax
		mov	eax, [esp+1Ch+arg_10]
		mov	[esp+1Ch+arg_1C], ebp
		mov	ebp, [esp+1Ch+arg_20]
		mov	[esp+1Ch+arg_10], esi
		mov	esi, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_14], edi
		mov	edi, [esp+1Ch+var_8]
		mov	[esp+1Ch+arg_C], ebx
		mov	ebx, [esp+1Ch+var_10]
		mov	[esp+1Ch+arg_18], ebp
		mov	ebp, [esp+1Ch+var_4]
		mov	[esp+1Ch+arg_8], eax
		mov	eax, offset _findEncodingNS
		add	esp, 1Ch
		jmp	_doParseXmlDecl
_XmlParseXmlDeclNS endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_findEncodingNS	proc near		; DATA XREF: _XmlParseXmlDeclNS+6Bo

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_A0		= byte ptr -0A0h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0CCh
		mov	[esp+0CCh+var_8], edi
		mov	edi, [esp+0CCh+arg_8]
		lea	eax, [esp+0CCh+var_21]
		mov	[esp+0CCh+var_4], ebp
		mov	ebp, [esp+0CCh+arg_0]
		mov	[esp+0CCh+var_BC], eax
		lea	eax, [esp+0CCh+var_20]
		mov	[esp+0CCh+var_C], esi
		lea	esi, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_C0], eax
		lea	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_10], ebx
		mov	[esp+0CCh+var_20], esi
		mov	[esp+0CCh+var_C4], edi
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebp
		call	dword ptr [ebp+3Ch]
		cmp	[esp+0CCh+arg_4], edi
		jz	short loc_642190D6

loc_642190AF:				; CODE XREF: _findEncodingNS+120j
		xor	ebp, ebp

loc_642190B1:				; CODE XREF: _findEncodingNS+D6j
					; _findEncodingNS+113j
		mov	eax, ebp
		mov	ebx, [esp+0CCh+var_10]
		mov	esi, [esp+0CCh+var_C]
		mov	edi, [esp+0CCh+var_8]
		mov	ebp, [esp+0CCh+var_4]
		add	esp, 0CCh
		retn
; ---------------------------------------------------------------------------

loc_642190D6:				; CODE XREF: _findEncodingNS+6Dj
		mov	eax, [esp+0CCh+var_20]
		mov	byte ptr [eax],	0
		xor	eax, eax

loc_642190E2:				; CODE XREF: _findEncodingNS+D0j
		movzx	edx, byte ptr [esi+eax]
		movzx	ecx, ds:_KW_UTF_16[eax]
		lea	edi, [edx-61h]
		mov	ebx, edi
		cmp	bl, 19h
		ja	short loc_642190FA
		sub	edx, 20h

loc_642190FA:				; CODE XREF: _findEncodingNS+B5j
		lea	edi, [ecx-61h]
		mov	ebx, edi
		cmp	bl, 19h
		ja	short loc_64219107
		sub	ecx, 20h

loc_64219107:				; CODE XREF: _findEncodingNS+C2j
		cmp	dl, cl
		jnz	short loc_64219118
		add	eax, 1
		test	dl, dl
		jnz	short loc_642190E2
		cmp	dword ptr [ebp+44h], 2
		jz	short loc_642190B1

loc_64219118:				; CODE XREF: _findEncodingNS+C9j
		xor	ebp, ebp

loc_6421911A:				; CODE XREF: _findEncodingNS+11Ej
		mov	edi, ds:_encodingNames_10248[ebp*4]
		xor	edx, edx

loc_64219123:				; CODE XREF: _findEncodingNS+10Aj
		movzx	eax, byte ptr [esi+edx]
		movzx	ecx, byte ptr [edi+edx]
		lea	ebx, [eax-61h]
		cmp	bl, 19h
		ja	short loc_64219136
		sub	eax, 20h

loc_64219136:				; CODE XREF: _findEncodingNS+F1j
		lea	ebx, [ecx-61h]
		cmp	bl, 19h
		ja	short loc_64219141
		sub	ecx, 20h

loc_64219141:				; CODE XREF: _findEncodingNS+FCj
		cmp	al, cl
		jnz	short loc_64219158
		add	edx, 1
		test	al, al
		jnz	short loc_64219123
		mov	ebp, ds:_encodingsNS[ebp*4]
		jmp	loc_642190B1
; ---------------------------------------------------------------------------

loc_64219158:				; CODE XREF: _findEncodingNS+103j
		add	ebp, 1
		cmp	ebp, 6
		jnz	short loc_6421911A
		jmp	loc_642190AF
_findEncodingNS	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_little2_prologTok proc	near		; DATA XREF: .rdata:_internal_little2_encoding_nso
					; .rdata:_internal_little2_encodingo ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	eax, 0FFFFFFFCh
		mov	[esp+1Ch+var_C], esi
		mov	edx, [esp+1Ch+arg_4]
		mov	esi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_10], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_8], edi
		mov	edi, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_4], ebp
		cmp	edx, esi
		jz	short loc_642191C5
		mov	eax, esi
		sub	eax, edx
		test	al, 1
		jnz	loc_642196F8

loc_642191A8:				; CODE XREF: _little2_prologTok+595j
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	short loc_642191E0
		movzx	ecx, byte ptr [edx]
		movzx	ecx, byte ptr [ebx+ecx+4Ch]
		cmp	ecx, 24h	; switch 37 cases
		jbe	loc_64219290

loc_642191C1:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F0j ...
		mov	[edi], edx	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		xor	eax, eax

loc_642191C5:				; CODE XREF: _little2_prologTok+2Aj
					; _little2_prologTok+CAj ...
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_642191E0:				; CODE XREF: _little2_prologTok+3Ej
		lea	ecx, [eax+28h]
		movzx	ebp, byte ptr [edx]
		cmp	cl, 27h		; switch 40 cases
		jbe	loc_64219270

loc_642191EF:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+103j
					; DATA XREF: ...
		mov	ecx, ebp	; jumptable 6421773E cases 197-227

loc_642191F1:				; CODE XREF: _little2_prologTok+115j
					; _little2_prologTok+3CEj
		movzx	eax, al
		mov	[esp+1Ch+var_1C], eax
		mov	eax, ecx
		mov	ebp, [esp+1Ch+var_1C]
		shr	al, 5
		and	ecx, 1Fh
		movzx	eax, al
		mov	[esp+1Ch+var_14], eax
		mov	eax, 1
		shl	eax, cl
		movzx	ebp, ss:_nmstrtPages[ebp]
		mov	ecx, [esp+1Ch+var_14]
		lea	ecx, [ecx+ebp*8]
		test	ds:_namingBitmap[ecx*4], eax
		jz	loc_642192D2

loc_6421922B:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		add	edx, 2		; jumptable 6421773E cases 251,253
					; jumptable 64219290 cases 22,24
		mov	eax, 0FFFFFFEEh
		mov	ecx, 12h

loc_64219238:				; CODE XREF: _little2_prologTok+18Ej
		cmp	esi, edx
		jz	short loc_642191C5
		mov	eax, ecx
		mov	[esp+1Ch+var_18], ebx

loc_64219242:				; CODE XREF: _little2_prologTok+1ECj
		movzx	ecx, byte ptr [edx+1]
		test	cl, cl
		jnz	loc_64219303
		movzx	ebp, byte ptr [edx]
		mov	ebx, [esp+1Ch+var_18]
		movzx	ebp, byte ptr [ebx+ebp+4Ch]

loc_6421925A:				; CODE XREF: _little2_prologTok+3E5j
					; _little2_prologTok+3EFj
		sub	ebp, 5		; switch 32 cases
		cmp	ebp, 1Fh
		ja	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		jmp	ds:off_64221B5C[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219270:				; CODE XREF: _little2_prologTok+79j
		movzx	ecx, cl
		jmp	ds:off_64221BDC[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219280:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+103j
					; DATA XREF: ...
		mov	ecx, ebp	; jumptable 6421773E case 228
					; jumptable 64219273 case 39
		cmp	cl, 0FEh
		jb	loc_642191F1
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_64219290:				; CODE XREF: _little2_prologTok+4Bj
					; _little2_prologTok+12Cj
		jmp	ds:off_64221C7C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64219297:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+103j
					; DATA XREF: ...
		mov	ecx, 8		; jumptable 6421773E cases 193-196
					; jumptable 64219273 cases 4-7
		jmp	short loc_64219290
; ---------------------------------------------------------------------------
		align 10h

loc_642192A0:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j ...
		sub	esi, edx	; jumptable 6421773E cases 159,189-192,236
					; jumptable 64219266 case 7
					; jumptable 64219273 cases 0-3
					; jumptable 64219290 case 7
					; jumptable 64219376 cases 0-3
					; jumptable 642194F7 case 7
					; jumptable 64219673 case 7
					; jumptable 642197E0 cases 0-3
					; jumptable 642198A1 case 7
					; jumptable 642198F9 cases 0-3
					; jumptable 642199EE cases 0-3
		cmp	esi, 3
		jg	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247

loc_642192AB:				; CODE XREF: _little2_prologTok+14Aj
					; _little2_prologTok+160j ...
		mov	eax, 0FFFFFFFEh
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_642192B5:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j ...
		sub	esi, edx	; jumptable 6421773E cases 158,235
					; jumptable 64219266 case 6
					; jumptable 64219290 case 6
					; jumptable 642194F7 case 6
					; jumptable 64219673 case 6
					; jumptable 642198A1 case 6
		cmp	esi, 2
		jle	short loc_642192AB
		lea	esi, [esi+0]
		jmp	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
; ---------------------------------------------------------------------------

loc_642192C5:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j ...
		sub	esi, edx	; jumptable 6421773E cases 157,234
					; jumptable 64219266 case 5
					; jumptable 64219290 case 5
					; jumptable 642194F7 case 5
					; jumptable 64219673 case 5
					; jumptable 642198A1 case 5
		cmp	esi, 1
		jg	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		jmp	short loc_642192AB
; ---------------------------------------------------------------------------

loc_642192D2:				; CODE XREF: _little2_prologTok+B5j
		mov	ebp, [esp+1Ch+var_1C]
		movzx	ecx, ss:_namePages[ebp]
		mov	ebp, [esp+1Ch+var_14]
		lea	ecx, [ebp+ecx*8+0]
		test	ds:_namingBitmap[ecx*4], eax
		jz	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247

loc_642192F1:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		add	edx, 2		; jumptable 6421773E cases 252,254,255
					; jumptable 64219290 cases 23,25-27
		mov	eax, 0FFFFFFEDh
		mov	ecx, 13h
		jmp	loc_64219238
; ---------------------------------------------------------------------------

loc_64219303:				; CODE XREF: _little2_prologTok+D8j
		movzx	ebx, byte ptr [edx]
		lea	ebp, [ecx+28h]
		mov	byte ptr [esp+1Ch+var_14], bl
		mov	ebx, ebp
		cmp	bl, 27h		; switch 40 cases
		jbe	short loc_64219370

loc_64219314:				; CODE XREF: _little2_prologTok+206j
					; DATA XREF: .rdata:off_64221D10o
		movzx	ebp, byte ptr [esp+1Ch+var_14] ; jumptable 64219376 default case

loc_64219319:				; CODE XREF: _little2_prologTok+3DDj
					; _little2_prologTok+467j
		movzx	ecx, cl
		movzx	ecx, ds:_namePages[ecx]
		mov	[esp+1Ch+var_14], ecx
		mov	ebx, [esp+1Ch+var_14]
		mov	ecx, ebp
		shr	cl, 5
		movzx	ecx, cl
		lea	ecx, [ecx+ebx*8]
		mov	[esp+1Ch+var_14], ecx
		mov	ebx, [esp+1Ch+var_14]
		mov	ecx, ebp
		and	ecx, 1Fh
		mov	ebp, 1
		shl	ebp, cl
		test	ds:_namingBitmap[ebx*4], ebp
		jz	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247

loc_64219357:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j
					; DATA XREF: ...
		add	edx, 2		; jumptable 6421773E cases 174,176-179
					; jumptable 64219266 cases 22,24-27

loc_6421935A:				; CODE XREF: _little2_prologTok+41Bj
					; _little2_prologTok+426j ...
		cmp	esi, edx
		jnz	loc_64219242
		neg	eax
		jmp	loc_642191C5
; ---------------------------------------------------------------------------
		align 10h

loc_64219370:				; CODE XREF: _little2_prologTok+1A2j
		and	ebp, 0FFh
		jmp	ds:off_64221D10[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219380:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		lea	eax, [edx+2]	; jumptable 6421773E case 238
					; jumptable 64219290 case 9
		cmp	eax, esi
		jz	loc_64219AF8

loc_6421938B:				; CODE XREF: _little2_prologTok+3C6j
					; _little2_prologTok+573j ...
		cmp	eax, esi
		mov	edx, eax
		jz	loc_64219869
		movzx	ecx, byte ptr [eax+1]
		test	cl, cl
		jz	loc_642196C3

loc_642193A1:				; CODE XREF: _little2_prologTok+568j
					; _little2_prologTok+579j
		mov	[edi], edx
		mov	eax, 0Fh
		jmp	loc_642191C5
; ---------------------------------------------------------------------------
		align 10h

loc_642193B0:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		add	edx, 2		; jumptable 6421773E case 240
					; jumptable 64219290 case 11
		mov	eax, 11h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------
		align 10h

loc_642193C0:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		lea	ecx, [edx+2]	; jumptable 6421773E case 241
					; jumptable 64219290 case 12
		mov	eax, 0Ch
		mov	[esp+1Ch+arg_4], edi
		mov	edx, ebx
		mov	[esp+1Ch+arg_0], esi

loc_642193D2:				; CODE XREF: _little2_prologTok+352j
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_little2_scanLit
; ---------------------------------------------------------------------------
		align 10h

loc_642193F0:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		lea	ebp, [edx+2]	; jumptable 6421773E case 231
					; jumptable 64219290 case 2
		cmp	ebp, esi
		jz	loc_64219710
		movzx	eax, byte ptr [ebp+1]
		test	al, al
		jnz	loc_64219720
		movzx	eax, byte ptr [ebp+0]
		movzx	ecx, byte ptr [ebx+eax+4Ch]
		cmp	ecx, 1Dh
		jbe	loc_64219748

loc_64219419:				; CODE XREF: _little2_prologTok+5BEj
					; _little2_prologTok+5F4j ...
		mov	[edi], ebp	; jumptable 6421972E cases 4-7
		xor	eax, eax
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219422:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		lea	ecx, [edx+2]	; jumptable 6421773E case 233
					; jumptable 64219290 case 4
		mov	eax, 0FFFFFFE6h
		cmp	ecx, esi
		jz	loc_642191C5
		cmp	byte ptr [ecx+1], 0
		jz	loc_64219805

loc_6421943C:				; CODE XREF: _little2_prologTok+698j
					; _little2_prologTok+6B0j ...
		mov	[edi], ecx
		mov	eax, 1Ah
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219448:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		add	edx, 2		; jumptable 6421773E case 249
					; jumptable 64219290 case 20
		mov	eax, 19h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219457:				; CODE XREF: _little2_prologTok:loc_64219290j
					; DATA XREF: .rdata:off_64221C7Co
		add	edx, 2		; jumptable 64219290 case 32
		mov	eax, 0FFFFFFE8h
		cmp	edx, esi
		jz	loc_642191C5
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	loc_64219794
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [ebx+eax+4Ch]

loc_6421947B:				; CODE XREF: _little2_prologTok+636j
					; _little2_prologTok+650j
		lea	eax, [ecx-9]	; switch 28 cases
		cmp	eax, 1Bh
		ja	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		jmp	ds:off_64221DB0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219490:				; CODE XREF: _little2_prologTok:loc_64219290j
					; DATA XREF: .rdata:off_64221C7Co
		add	edx, 2		; jumptable 64219290 case 35
		mov	eax, 26h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------
		align 10h

loc_642194A0:				; CODE XREF: _little2_prologTok:loc_64219290j
					; DATA XREF: .rdata:off_64221C7Co
		add	edx, 2		; jumptable 64219290 case 31
		mov	eax, 17h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------
		align 10h

loc_642194B0:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		lea	ecx, [edx+2]	; jumptable 6421773E case 242
					; jumptable 64219290 case 13
		mov	eax, 0Dh
		mov	[esp+1Ch+arg_4], edi
		mov	edx, ebx
		mov	[esp+1Ch+arg_0], esi
		jmp	loc_642193D2
; ---------------------------------------------------------------------------

loc_642194C7:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		add	edx, 2		; jumptable 6421773E case 248
					; jumptable 64219290 case 19
		mov	eax, 0FFFFFFFFh
		cmp	esi, edx
		jz	loc_642191C5
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	loc_642197C5
		movzx	ecx, byte ptr [edx]
		movzx	ecx, byte ptr [ebx+ecx+4Ch]

loc_642194EB:				; CODE XREF: _little2_prologTok+684j
					; _little2_prologTok+690j
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		jmp	ds:off_64221E20[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219500:				; CODE XREF: _little2_prologTok:loc_64219290j
					; DATA XREF: .rdata:off_64221C7Co
		add	edx, 2		; jumptable 64219290 case 36
		mov	eax, 15h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------
		align 10h

loc_64219510:				; CODE XREF: _little2_prologTok:loc_64219290j
					; DATA XREF: .rdata:off_64221C7Co
		mov	[esp+1Ch+arg_0], edi ; jumptable 64219290 case 30
		mov	ecx, esi
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_C]
		add	edx, 2
		mov	ebx, [esp+1Ch+var_10]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_little2_scanPercent
; ---------------------------------------------------------------------------

loc_64219533:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok:loc_64219290j
					; DATA XREF: ...
		lea	eax, [edx+2]	; jumptable 6421773E cases 239,250
					; jumptable 64219290 cases 10,21
		jmp	loc_6421938B
; ---------------------------------------------------------------------------

loc_6421953B:				; CODE XREF: _little2_prologTok:loc_64219290j
					; DATA XREF: .rdata:off_64221C7Co
		movzx	ecx, byte ptr [edx] ; jumptable	64219290 case 29
		jmp	loc_642191F1
; ---------------------------------------------------------------------------

loc_64219543:				; CODE XREF: _little2_prologTok+206j
					; DATA XREF: .rdata:off_64221D10o
		movzx	ebp, byte ptr [esp+1Ch+var_14] ; jumptable 64219376 case 39
		mov	ebx, ebp
		cmp	bl, 0FEh
		jb	loc_64219319
		xor	ebp, ebp
		jmp	loc_6421925A
; ---------------------------------------------------------------------------

loc_6421955A:				; CODE XREF: _little2_prologTok+206j
					; DATA XREF: .rdata:off_64221D10o
		mov	ebp, 8		; jumptable 64219376 cases 4-7
		jmp	loc_6421925A
; ---------------------------------------------------------------------------

loc_64219564:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j
					; DATA XREF: ...
		cmp	eax, 13h	; jumptable 6421773E case 185
					; jumptable 64219266 case 33
		jz	loc_64219860
		add	edx, 2
		mov	eax, 1Fh
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_6421957C:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j
					; DATA XREF: ...
		add	edx, 2		; jumptable 6421773E case 175
					; jumptable 64219266 case 23
		cmp	eax, 12h
		jz	loc_64219875
		cmp	eax, 29h
		jnz	loc_6421935A

loc_64219591:				; CODE XREF: _little2_prologTok+72Bj
					; _little2_prologTok+731j
					; DATA XREF: ...
		mov	eax, 13h	; jumptable 642198A1 default case
		jmp	loc_6421935A
; ---------------------------------------------------------------------------

loc_6421959B:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j
					; DATA XREF: ...
		cmp	eax, 13h	; jumptable 6421773E case 167
					; jumptable 64219266 case 15
		xchg	ax, ax
		jz	loc_64219860
		add	edx, 2
		mov	eax, 1Eh
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_642195B5:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j
					; DATA XREF: ...
		mov	[edi], edx	; jumptable 6421773E cases 161-163,172,173,182,184,187,188
					; jumptable 64219266 cases 9-11,20,21,30,32,35,36
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_642195BC:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j
					; DATA XREF: ...
		cmp	eax, 13h	; jumptable 6421773E case 186
					; jumptable 64219266 case 34
		jz	loc_64219860
		add	edx, 2
		mov	eax, 20h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_642195D4:				; CODE XREF: _big2_sameName+EEj
					; _little2_prologTok+F6j
					; DATA XREF: ...
		movzx	ebp, byte ptr [edx] ; jumptable	6421773E case 181
					; jumptable 64219266 case 29
		jmp	loc_64219319
; ---------------------------------------------------------------------------
		align 10h

loc_642195E0:				; CODE XREF: _little2_prologTok+317j
					; DATA XREF: .rdata:off_64221DB0o
		add	edx, 2		; jumptable 64219487 case 33
		mov	eax, 24h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_642195EF:				; CODE XREF: _little2_prologTok+317j
					; DATA XREF: .rdata:off_64221DB0o
		add	edx, 2		; jumptable 64219487 case 15
		mov	eax, 23h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_642195FE:				; CODE XREF: _little2_prologTok+317j
					; DATA XREF: .rdata:off_64221DB0o
		mov	[edi], edx	; jumptable 64219487 cases 9-11,21,32,35,36
		mov	eax, 18h
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_6421960A:				; CODE XREF: _little2_prologTok+317j
					; DATA XREF: .rdata:off_64221DB0o
		add	edx, 2		; jumptable 64219487 case 34
		mov	eax, 25h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219619:				; CODE XREF: _little2_prologTok+503j
					; DATA XREF: .rdata:off_64221E84o
		movzx	ecx, byte ptr [edx] ; jumptable	64219673 case 29

loc_6421961C:				; CODE XREF: _little2_prologTok+781j
					; _little2_prologTok+795j
		movzx	eax, al
		movzx	ebp, ds:_namePages[eax]
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	ebp, [eax+ebp*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:_namingBitmap[ebp*4], eax
		jz	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247

loc_64219648:				; CODE XREF: _little2_prologTok+387j
					; _little2_prologTok+503j ...
		add	edx, 2		; jumptable 642194F7 cases 22,24
					; jumptable 64219673 cases 22,24-27
		cmp	esi, edx
		jz	loc_64219B05
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	loc_642198E4
		movzx	ecx, byte ptr [edx]
		movzx	ecx, byte ptr [ebx+ecx+4Ch]

loc_64219667:				; CODE XREF: _little2_prologTok+7A0j
					; _little2_prologTok+7AAj
		sub	ecx, 5		; switch 32 cases
		cmp	ecx, 1Fh
		ja	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		jmp	ds:off_64221E84[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421967A:				; CODE XREF: _little2_prologTok+387j
					; DATA XREF: .rdata:off_64221E20o
		movzx	ecx, byte ptr [edx] ; jumptable	642194F7 case 29
		mov	byte ptr [esp+1Ch+var_14], cl

loc_64219681:				; CODE XREF: _little2_prologTok+664j
					; _little2_prologTok+670j ...
		movzx	eax, al		; jumptable 642197E0 default case
		movzx	ecx, byte ptr [esp+1Ch+var_14]
		movzx	ebp, ds:_nmstrtPages[eax]
		movzx	eax, byte ptr [esp+1Ch+var_14]
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	ebp, [eax+ebp*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:_namingBitmap[ebp*4], eax
		jz	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		jmp	short loc_64219648 ; jumptable 642194F7	cases 22,24
					; jumptable 64219673 cases 22,24-27
; ---------------------------------------------------------------------------

loc_642196B7:				; CODE XREF: _little2_prologTok+503j
					; DATA XREF: .rdata:off_64221E84o
		mov	[edi], edx	; jumptable 64219673 cases 9-11,21,30,32,36
		mov	eax, 14h
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_642196C3:				; CODE XREF: _little2_prologTok+22Bj
		movzx	ecx, byte ptr [eax]
		movzx	ecx, byte ptr [ebx+ecx+4Ch]
		cmp	ecx, 0Ah
		jz	short loc_642196F0
		cmp	ecx, 15h
		jz	short loc_642196F0
		cmp	ecx, 9
		jnz	loc_642193A1
		add	eax, 2
		cmp	esi, eax
		jnz	loc_6421938B
		jmp	loc_642193A1
; ---------------------------------------------------------------------------
		align 10h

loc_642196F0:				; CODE XREF: _little2_prologTok+55Ej
					; _little2_prologTok+563j
		add	eax, 2
		jmp	loc_6421938B
; ---------------------------------------------------------------------------

loc_642196F8:				; CODE XREF: _little2_prologTok+32j
		and	eax, 0FFFFFFFEh
		nop
		lea	esi, [esi+0]
		jz	short loc_64219710
		lea	esi, [edx+eax]
		jmp	loc_642191A8
; ---------------------------------------------------------------------------
		align 10h

loc_64219710:				; CODE XREF: _little2_prologTok+285j
					; _little2_prologTok+590j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_642191C5
; ---------------------------------------------------------------------------
		align 10h

loc_64219720:				; CODE XREF: _little2_prologTok+291j
		add	eax, 28h
		movzx	ecx, byte ptr [ebp+0]
		cmp	al, 27h		; switch 40 cases
		ja	short loc_64219735 ; jumptable 6421972E	default	case
		movzx	eax, al
		jmp	ds:off_64221F04[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64219735:				; CODE XREF: _little2_prologTok+5B9j
					; _little2_prologTok+5BEj ...
		mov	[edi], edx	; jumptable 6421972E default case
		mov	eax, 1Dh
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219741:				; CODE XREF: _little2_prologTok+5BEj
					; DATA XREF: .rdata:off_64221F04o
		cmp	cl, 0FEh	; jumptable 6421972E case 39
		jb	short loc_64219735 ; jumptable 6421972E	default	case
		xor	ecx, ecx

loc_64219748:				; CODE XREF: _little2_prologTok+2A3j
					; _little2_prologTok+622j
		mov	eax, 1
		shl	eax, cl
		test	eax, 214000E0h
		jnz	short loc_64219735 ; jumptable 6421972E	default	case
		test	eax, 10000h
		jnz	loc_64219840
		test	ah, 80h
		jz	loc_64219419	; jumptable 6421972E cases 4-7
		mov	[esp+1Ch+arg_0], edi
		lea	edx, [ebp+2]
		mov	ecx, esi
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_C]
		mov	ebx, [esp+1Ch+var_10]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_little2_scanPi
; ---------------------------------------------------------------------------

loc_6421978D:				; CODE XREF: _little2_prologTok+5BEj
					; DATA XREF: .rdata:off_64221F04o
		mov	ecx, 7		; jumptable 6421972E cases 0-3
		jmp	short loc_64219748
; ---------------------------------------------------------------------------

loc_64219794:				; CODE XREF: _little2_prologTok+2FDj
		cmp	al, 0D8h
		movzx	ebx, byte ptr [edx]
		jb	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		cmp	al, 0DBh
		mov	ecx, 7
		jbe	loc_6421947B
		cmp	al, 0FFh
		jnz	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		cmp	bl, 0FEh
		jb	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		xor	cl, cl
		nop
		jmp	loc_6421947B
; ---------------------------------------------------------------------------

loc_642197C5:				; CODE XREF: _little2_prologTok+36Dj
		movzx	ecx, byte ptr [edx]
		lea	ebp, [eax+28h]
		mov	byte ptr [esp+1Ch+var_14], cl
		mov	ecx, ebp
		cmp	cl, 27h		; switch 40 cases
		ja	loc_64219681	; jumptable 642197E0 default case
		and	ebp, 0FFh
		jmp	ds:off_64221FA4[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642197E7:				; CODE XREF: _little2_prologTok+670j
					; DATA XREF: .rdata:off_64221FA4o
		cmp	byte ptr [esp+1Ch+var_14], 0FEh	; jumptable 642197E0 case 39
		jb	loc_64219681	; jumptable 642197E0 default case
		xor	ecx, ecx
		jmp	loc_642194EB
; ---------------------------------------------------------------------------

loc_642197F9:				; CODE XREF: _little2_prologTok+670j
					; DATA XREF: .rdata:off_64221FA4o
		mov	ecx, 8		; jumptable 642197E0 cases 4-7
		xchg	ax, ax
		jmp	loc_642194EB
; ---------------------------------------------------------------------------

loc_64219805:				; CODE XREF: _little2_prologTok+2C6j
		cmp	byte ptr [ecx],	5Dh
		jnz	loc_6421943C
		lea	eax, [edx+4]
		cmp	eax, esi
		jz	loc_64219710
		cmp	byte ptr [ecx+3], 0
		lea	esi, [esi+0]
		jnz	loc_6421943C
		cmp	byte ptr [eax],	3Eh
		jnz	loc_6421943C
		add	edx, 6
		mov	eax, 22h
		mov	[edi], edx
		jmp	loc_642191C5
; ---------------------------------------------------------------------------
		align 10h

loc_64219840:				; CODE XREF: _little2_prologTok+5EBj
		lea	eax, [ebp+2]
		cmp	esi, eax
		jz	loc_64219710
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	loc_6421991F

loc_64219857:				; CODE XREF: _little2_prologTok+7C6j
					; _little2_prologTok+7FDj ...
		mov	[edi], eax
		xor	eax, eax
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219860:				; CODE XREF: _little2_prologTok+3F7j
					; _little2_prologTok+430j ...
		mov	[edi], edx
		xor	al, al
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219869:				; CODE XREF: _little2_prologTok+21Fj
		mov	[edi], eax
		mov	eax, 0Fh
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219875:				; CODE XREF: _little2_prologTok+412j
		cmp	edx, esi
		jz	loc_64219710
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	loc_642199D9
		movzx	ecx, byte ptr [edx]
		mov	ebp, [esp+1Ch+var_18]
		movzx	ecx, byte ptr [ebp+ecx+4Ch]

loc_64219895:				; CODE XREF: _little2_prologTok+892j
					; _little2_prologTok+89Cj
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	loc_64219591	; jumptable 642198A1 default case
		jmp	ds:off_64222044[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642198A8:				; CODE XREF: _little2_prologTok+731j
					; DATA XREF: .rdata:off_64222044o
		movzx	ecx, byte ptr [edx] ; jumptable	642198A1 case 29

loc_642198AB:				; CODE XREF: _little2_prologTok+876j
					; _little2_prologTok+88Aj
		movzx	eax, al
		mov	ebx, 1
		movzx	ebp, ds:_namePages[eax]
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		shl	ebx, cl
		lea	eax, [eax+ebp*8]
		test	ds:_namingBitmap[eax*4], ebx
		jz	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247

loc_642198D7:				; CODE XREF: _little2_prologTok+731j
					; DATA XREF: .rdata:off_64222044o
		add	edx, 2		; jumptable 642198A1 cases 22,24-27
		mov	eax, 29h
		jmp	loc_6421935A
; ---------------------------------------------------------------------------

loc_642198E4:				; CODE XREF: _little2_prologTok+4E9j
		lea	ecx, [eax+28h]
		movzx	ebp, byte ptr [edx]
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_642198F6

loc_642198EF:				; CODE XREF: _little2_prologTok+789j
					; DATA XREF: .rdata:off_642220A8o
		mov	ecx, ebp	; jumptable 642198F9 default case
		jmp	loc_6421961C
; ---------------------------------------------------------------------------

loc_642198F6:				; CODE XREF: _little2_prologTok+77Dj
		movzx	ecx, cl
		jmp	ds:off_642220A8[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64219900:				; CODE XREF: _little2_prologTok+789j
					; DATA XREF: .rdata:off_642220A8o
		mov	ecx, ebp	; jumptable 642198F9 case 39
		cmp	cl, 0FEh
		jb	loc_6421961C
		xor	ecx, ecx
		lea	esi, [esi+0]
		jmp	loc_64219667
; ---------------------------------------------------------------------------

loc_64219915:				; CODE XREF: _little2_prologTok+789j
					; DATA XREF: .rdata:off_642220A8o
		mov	ecx, 8		; jumptable 642198F9 cases 4-7
		jmp	loc_64219667
; ---------------------------------------------------------------------------

loc_6421991F:				; CODE XREF: _little2_prologTok+6E1j
		movzx	edx, byte ptr [ebp+2]
		movzx	edx, byte ptr [ebx+edx+4Ch]
		cmp	edx, 16h
		jz	short loc_6421994B
		jg	loc_64219A11
		cmp	edx, 14h
		jnz	loc_64219857
		add	ebp, 4
		mov	eax, 21h
		mov	[edi], ebp
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_6421994B:				; CODE XREF: _little2_prologTok+7BBj
					; _little2_prologTok+810j ...
		add	eax, 2
		cmp	esi, eax
		jz	loc_64219710
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_64219A90
		movzx	edx, byte ptr [eax]
		movzx	ecx, byte ptr [ebx+edx+4Ch]
		cmp	ecx, 1Eh
		ja	loc_64219857

loc_64219973:				; CODE XREF: _little2_prologTok+934j
					; _little2_prologTok+950j
		mov	edx, 1
		shl	edx, cl
		test	edx, 1400000h
		jnz	short loc_6421994B
		test	edx, 200600h
		jnz	short loc_642199CD
		and	edx, 40000000h
		jz	loc_64219857
		lea	ecx, [eax+2]
		cmp	esi, ecx
		jz	loc_64219710
		movzx	edx, byte ptr [eax+3]
		test	dl, dl
		jnz	loc_64219AC5
		movzx	edx, byte ptr [ecx]
		movzx	ecx, byte ptr [ebx+edx+4Ch]
		cmp	ecx, 1Eh
		ja	short loc_642199CD

loc_642199BA:				; CODE XREF: _little2_prologTok+969j
					; _little2_prologTok+983j
		mov	edx, 1
		shl	edx, cl
		and	edx, 40200600h
		jnz	loc_64219857

loc_642199CD:				; CODE XREF: _little2_prologTok+818j
					; _little2_prologTok+848j ...
		mov	[edi], eax
		mov	eax, 10h
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_642199D9:				; CODE XREF: _little2_prologTok+713j
		lea	ecx, [eax+28h]
		movzx	ebp, byte ptr [edx]
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_642199EB

loc_642199E4:				; CODE XREF: _little2_prologTok+87Ej
					; DATA XREF: .rdata:off_64222148o
		mov	ecx, ebp	; jumptable 642199EE default case
		jmp	loc_642198AB
; ---------------------------------------------------------------------------

loc_642199EB:				; CODE XREF: _little2_prologTok+872j
		movzx	ecx, cl
		jmp	ds:off_64222148[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_642199F5:				; CODE XREF: _little2_prologTok+87Ej
					; DATA XREF: .rdata:off_64222148o
		mov	ecx, ebp	; jumptable 642199EE case 39
		cmp	cl, 0FEh
		jb	loc_642198AB
		xor	ecx, ecx
		jmp	loc_64219895
; ---------------------------------------------------------------------------

loc_64219A07:				; CODE XREF: _little2_prologTok+87Ej
					; DATA XREF: .rdata:off_64222148o
		mov	ecx, 8		; jumptable 642199EE cases 4-7
		jmp	loc_64219895
; ---------------------------------------------------------------------------

loc_64219A11:				; CODE XREF: _little2_prologTok+7BDj
		cmp	edx, 18h
		jz	loc_6421994B
		cmp	edx, 1Bh
		lea	esi, [esi+0]
		jnz	loc_64219857
		add	ebp, 4
		cmp	esi, ebp
		jz	loc_64219710
		cmp	byte ptr [ebp+1], 0
		jnz	loc_64219419	; jumptable 6421972E cases 4-7
		cmp	byte ptr [eax+2], 2Dh
		nop
		jnz	loc_64219419	; jumptable 6421972E cases 4-7

loc_64219A46:				; CODE XREF: _little2_prologTok+9B1j
		add	eax, 4

loc_64219A49:				; CODE XREF: _little2_prologTok+919j
					; _little2_prologTok+9DAj ...
		cmp	esi, eax
		jz	loc_64219710
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jnz	loc_64219BAF
		movzx	edx, byte ptr [eax]
		movzx	edx, byte ptr [ebx+edx+4Ch]
		cmp	edx, 6
		jz	loc_64219B9A
		jg	loc_64219B0F
		cmp	edx, 1
		jle	loc_64219857
		cmp	edx, 5
		jz	loc_64219B88

loc_64219A86:				; CODE XREF: _little2_prologTok+9C0j
					; _little2_prologTok+A1Fj ...
		add	eax, 2
		jmp	short loc_64219A49
; ---------------------------------------------------------------------------
		align 10h

loc_64219A90:				; CODE XREF: _little2_prologTok+7ECj
		cmp	dl, 0D8h
		movzx	ebp, byte ptr [eax]
		jb	loc_64219857
		cmp	dl, 0DBh
		mov	ecx, 7
		jbe	loc_64219973
		cmp	dl, 0FFh
		jnz	loc_64219857
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	loc_64219857
		xor	cl, cl
		jmp	loc_64219973
; ---------------------------------------------------------------------------

loc_64219AC5:				; CODE XREF: _little2_prologTok+837j
		cmp	dl, 0D8h
		movzx	ebx, byte ptr [ecx]
		jb	loc_642199CD
		cmp	dl, 0DBh
		mov	ecx, 7
		jbe	loc_642199BA
		cmp	dl, 0FFh
		jnz	loc_642199CD
		cmp	bl, 0FEh
		jb	loc_642199CD
		xor	cl, cl
		jmp	loc_642199BA
; ---------------------------------------------------------------------------

loc_64219AF8:				; CODE XREF: _little2_prologTok+215j
		mov	[edi], esi
		mov	eax, 0FFFFFFF1h
		nop
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219B05:				; CODE XREF: _little2_prologTok+4DDj
		mov	eax, 0FFFFFFECh
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219B0F:				; CODE XREF: _little2_prologTok+8FEj
		cmp	edx, 8
		jz	loc_64219857
		jge	short loc_64219B2C

loc_64219B1A:				; CODE XREF: _little2_prologTok+A60j
		mov	edx, esi
		sub	edx, eax
		cmp	edx, 3
		jg	loc_64219A46
		jmp	loc_642192AB
; ---------------------------------------------------------------------------

loc_64219B2C:				; CODE XREF: _little2_prologTok+9A8j
		cmp	edx, 1Bh
		nop
		jnz	loc_64219A86
		add	eax, 2
		cmp	esi, eax
		nop
		lea	esi, [esi+0]
		jz	loc_64219710
		cmp	byte ptr [eax+1], 0
		jnz	loc_64219A49
		cmp	byte ptr [eax],	2Dh
		jnz	loc_64219A49
		lea	edx, [eax+2]
		cmp	esi, edx
		xchg	ax, ax
		jz	loc_64219710
		cmp	byte ptr [edx+1], 0
		jnz	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		cmp	byte ptr [edx],	3Eh
		jnz	loc_642191C1	; jumptable 6421773E cases 160,164-166,168-171,180,183,229,230,232,237,243-247
		add	eax, 4
		mov	[edi], eax
		mov	eax, 0Dh
		jmp	loc_642191C5
; ---------------------------------------------------------------------------

loc_64219B88:				; CODE XREF: _little2_prologTok+910j
		mov	edx, esi
		sub	edx, eax
		cmp	edx, 1
		jg	loc_64219A86
		jmp	loc_642192AB
; ---------------------------------------------------------------------------

loc_64219B9A:				; CODE XREF: _little2_prologTok+8F8j
		mov	edx, esi
		sub	edx, eax
		cmp	edx, 2
		jle	loc_642192AB
		add	eax, 3
		jmp	loc_64219A49
; ---------------------------------------------------------------------------

loc_64219BAF:				; CODE XREF: _little2_prologTok+8E7j
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax]
		ja	short loc_64219BD5
		cmp	dl, 0DCh
		jnb	loc_64219857
		cmp	dl, 0D8h
		jb	loc_64219A86
		lea	esi, [esi+0]
		jmp	loc_64219B1A
; ---------------------------------------------------------------------------

loc_64219BD5:				; CODE XREF: _little2_prologTok+A45j
		cmp	dl, 0FFh
		jnz	loc_64219A86
		cmp	cl, 0FEh
		jb	loc_64219A86
		jmp	loc_64219857
_little2_prologTok endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_big2_prologTok	proc near		; DATA XREF: .rdata:_big2_encoding_nso
					; .rdata:_big2_encodingo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	eax, 0FFFFFFFCh
		mov	[esp+1Ch+var_C], esi
		mov	edx, [esp+1Ch+arg_4]
		mov	esi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_10], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_8], edi
		mov	edi, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_4], ebp
		cmp	edx, esi
		jz	short loc_64219C45
		mov	eax, esi
		sub	eax, edx
		test	al, 1
		jnz	loc_6421A1A8

loc_64219C28:				; CODE XREF: _big2_prologTok+5C5j
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	short loc_64219C60
		movzx	ecx, byte ptr [edx+1]
		movzx	ecx, byte ptr [ebx+ecx+4Ch]
		cmp	ecx, 24h	; switch 37 cases
		jbe	loc_64219D10

loc_64219C41:				; CODE XREF: _big2_prologTok+F2j
					; _big2_prologTok+F8j ...
		mov	[edi], edx	; jumptable 64219CE8 default case
		xor	eax, eax

loc_64219C45:				; CODE XREF: _big2_prologTok+2Aj
					; _big2_prologTok+CCj ...
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_64219C60:				; CODE XREF: _big2_prologTok+3Dj
		lea	ecx, [eax+28h]
		movzx	ebp, byte ptr [edx+1]
		cmp	cl, 27h		; switch 40 cases
		jbe	loc_64219CF0

loc_64219C70:				; CODE XREF: _big2_prologTok+103j
					; DATA XREF: .rdata:off_64222268o
		mov	ecx, ebp	; jumptable 64219CF3 default case

loc_64219C72:				; CODE XREF: _big2_prologTok+115j
					; _big2_prologTok+40Fj
		movzx	eax, al
		mov	[esp+1Ch+var_1C], eax
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		mov	[esp+1Ch+var_14], eax
		mov	eax, 1
		mov	ebp, [esp+1Ch+var_14]
		shl	eax, cl
		mov	ecx, [esp+1Ch+var_1C]
		movzx	ecx, ds:_nmstrtPages[ecx]
		lea	ebp, [ebp+ecx*8+0]
		test	ds:_namingBitmap[ebp*4], eax
		jz	loc_64219D52

loc_64219CAD:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		add	edx, 2		; jumptable 64219D10 cases 22,24
		mov	eax, 0FFFFFFEEh
		mov	ecx, 12h

loc_64219CBA:				; CODE XREF: _big2_prologTok+18Ej
		cmp	esi, edx
		jz	short loc_64219C45
		mov	eax, ecx
		mov	[esp+1Ch+var_18], ebx

loc_64219CC4:				; CODE XREF: _big2_prologTok+1EDj
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jnz	loc_64219D83
		movzx	ebp, byte ptr [edx+1]
		mov	ebx, [esp+1Ch+var_18]
		movzx	ebp, byte ptr [ebx+ebp+4Ch]

loc_64219CDC:				; CODE XREF: _big2_prologTok+426j
					; _big2_prologTok+430j
		sub	ebp, 5		; switch 32 cases
		cmp	ebp, 1Fh
		ja	loc_64219C41	; jumptable 64219CE8 default case
		jmp	ds:off_642221E8[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219CF0:				; CODE XREF: _big2_prologTok+7Aj
		movzx	ecx, cl
		jmp	ds:off_64222268[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219D00:				; CODE XREF: _big2_prologTok+103j
					; DATA XREF: .rdata:off_64222268o
		mov	ecx, ebp	; jumptable 64219CF3 case 39
		cmp	cl, 0FEh
		jb	loc_64219C72
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_64219D10:				; CODE XREF: _big2_prologTok+4Bj
					; _big2_prologTok+12Cj
		jmp	ds:off_64222308[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_64219D17:				; CODE XREF: _big2_prologTok+103j
					; DATA XREF: .rdata:off_64222268o
		mov	ecx, 8		; jumptable 64219CF3 cases 4-7
		jmp	short loc_64219D10
; ---------------------------------------------------------------------------
		align 10h

loc_64219D20:				; CODE XREF: _big2_prologTok+F8j
					; _big2_prologTok+103j	...
		sub	esi, edx	; jumptable 64219CE8 case 7
					; jumptable 64219CF3 cases 0-3
					; jumptable 64219D10 case 7
					; jumptable 64219DF6 cases 0-3
					; jumptable 6421A351 case 7
					; jumptable 6421A49A cases 0-3
		cmp	esi, 3
		jg	loc_64219C41	; jumptable 64219CE8 default case

loc_64219D2B:				; CODE XREF: _big2_prologTok+14Aj
					; _big2_prologTok+160j	...
		mov	eax, 0FFFFFFFEh
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_64219D35:				; CODE XREF: _big2_prologTok+F8j
					; _big2_prologTok:loc_64219D10j ...
		sub	esi, edx	; jumptable 64219CE8 case 6
					; jumptable 64219D10 case 6
					; jumptable 6421A351 case 6
		cmp	esi, 2
		jle	short loc_64219D2B
		lea	esi, [esi+0]
		jmp	loc_64219C41	; jumptable 64219CE8 default case
; ---------------------------------------------------------------------------

loc_64219D45:				; CODE XREF: _big2_prologTok+F8j
					; _big2_prologTok:loc_64219D10j ...
		sub	esi, edx	; jumptable 64219CE8 case 5
					; jumptable 64219D10 case 5
					; jumptable 6421A351 case 5
		cmp	esi, 1
		jg	loc_64219C41	; jumptable 64219CE8 default case
		jmp	short loc_64219D2B
; ---------------------------------------------------------------------------

loc_64219D52:				; CODE XREF: _big2_prologTok+B7j
		mov	ebp, [esp+1Ch+var_1C]
		movzx	ecx, ss:_namePages[ebp]
		mov	ebp, [esp+1Ch+var_14]
		lea	ecx, [ebp+ecx*8+0]
		test	ds:_namingBitmap[ecx*4], eax
		jz	loc_64219C41	; jumptable 64219CE8 default case

loc_64219D71:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		add	edx, 2		; jumptable 64219D10 cases 23,25-27
		mov	eax, 0FFFFFFEDh
		mov	ecx, 13h
		jmp	loc_64219CBA
; ---------------------------------------------------------------------------

loc_64219D83:				; CODE XREF: _big2_prologTok+D9j
		movzx	ebx, byte ptr [edx+1]
		lea	ebp, [ecx+28h]
		mov	byte ptr [esp+1Ch+var_14], bl
		mov	ebx, ebp
		cmp	bl, 27h		; switch 40 cases
		jbe	short loc_64219DF0

loc_64219D95:				; CODE XREF: _big2_prologTok+206j
					; DATA XREF: .rdata:off_6422239Co
		movzx	ebp, byte ptr [esp+1Ch+var_14] ; jumptable 64219DF6 default case

loc_64219D9A:				; CODE XREF: _big2_prologTok+41Ej
					; _big2_prologTok+4A8j
		movzx	ecx, cl
		movzx	ecx, ds:_namePages[ecx]
		mov	[esp+1Ch+var_14], ecx
		mov	ebx, [esp+1Ch+var_14]
		mov	ecx, ebp
		shr	cl, 5
		movzx	ecx, cl
		lea	ecx, [ecx+ebx*8]
		mov	[esp+1Ch+var_14], ecx
		mov	ebx, [esp+1Ch+var_14]
		mov	ecx, ebp
		and	ecx, 1Fh
		mov	ebp, 1
		shl	ebp, cl
		test	ds:_namingBitmap[ebx*4], ebp
		jz	loc_64219C41	; jumptable 64219CE8 default case

loc_64219DD8:				; CODE XREF: _big2_prologTok+F8j
					; DATA XREF: .rdata:off_642221E8o
		add	edx, 2		; jumptable 64219CE8 cases 22,24-27

loc_64219DDB:				; CODE XREF: _big2_prologTok+474j
					; _big2_prologTok+480j	...
		cmp	esi, edx
		jnz	loc_64219CC4
		neg	eax
		jmp	loc_64219C45
; ---------------------------------------------------------------------------
		align 10h

loc_64219DF0:				; CODE XREF: _big2_prologTok+1A3j
		and	ebp, 0FFh
		jmp	ds:off_6422239C[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219E00:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		lea	eax, [edx+2]	; jumptable 64219D10 case 9
		cmp	eax, esi
		jz	loc_6421A5AD

loc_64219E0B:				; CODE XREF: _big2_prologTok+406j
					; _big2_prologTok+5A2j	...
		cmp	eax, esi
		mov	edx, eax
		jz	loc_6421A319
		movzx	ecx, byte ptr [eax]
		test	cl, cl
		jz	loc_6421A171

loc_64219E20:				; CODE XREF: _big2_prologTok+597j
					; _big2_prologTok+5A8j
		mov	[edi], edx
		mov	eax, 0Fh
		jmp	loc_64219C45
; ---------------------------------------------------------------------------
		align 10h

loc_64219E30:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		add	edx, 2		; jumptable 64219D10 case 11
		mov	eax, 11h
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------
		align 10h

loc_64219E40:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		lea	ecx, [edx+2]	; jumptable 64219D10 case 12
		mov	eax, 0Ch
		mov	[esp+1Ch+arg_4], edi
		mov	edx, ebx
		mov	[esp+1Ch+arg_0], esi

loc_64219E52:				; CODE XREF: _big2_prologTok+392j
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_big2_scanLit
; ---------------------------------------------------------------------------
		align 10h

loc_64219E70:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		lea	ebp, [edx+2]	; jumptable 64219D10 case 2
		cmp	ebp, esi
		jz	loc_6421A1C0
		movzx	eax, byte ptr [edx+2]
		test	al, al
		jnz	loc_6421A1D0
		movzx	eax, byte ptr [ebp+1]
		movzx	ecx, byte ptr [ebx+eax+4Ch]
		cmp	ecx, 1Dh
		ja	loc_6421A0D0	; jumptable 64219FB8 default case
					; jumptable 6421A1DE cases 4-7

loc_64219E99:				; CODE XREF: _big2_prologTok+608j
					; _big2_prologTok+612j
		mov	eax, 1
		shl	eax, cl
		test	eax, 214000E0h
		jnz	loc_6421A1E5	; jumptable 6421A1DE default case
		test	eax, 10000h
		jnz	loc_6421A2F0
		test	ah, 80h
		jz	loc_6421A0D0	; jumptable 64219FB8 default case
					; jumptable 6421A1DE cases 4-7
		mov	[esp+1Ch+arg_0], edi
		lea	edx, [ebp+2]
		mov	ecx, esi
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_C]
		mov	ebx, [esp+1Ch+var_10]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_big2_scanPi
; ---------------------------------------------------------------------------

loc_64219EE2:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		lea	ecx, [edx+2]	; jumptable 64219D10 case 4
		mov	eax, 0FFFFFFE6h
		cmp	ecx, esi
		jz	loc_64219C45
		cmp	byte ptr [edx+2], 0
		jz	loc_6421A2B5

loc_64219EFC:				; CODE XREF: _big2_prologTok+6C9j
					; _big2_prologTok+6E0j	...
		mov	[edi], ecx
		mov	eax, 1Ah
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_64219F08:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		add	edx, 2		; jumptable 64219D10 case 20
		mov	eax, 19h
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_64219F17:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		lea	ecx, [edx+2]	; jumptable 64219D10 case 32
		mov	eax, 0FFFFFFE8h
		cmp	ecx, esi
		jz	loc_64219C45
		movzx	eax, byte ptr [edx+2]
		test	al, al
		jnz	loc_6421A240
		movzx	eax, byte ptr [ecx+1]
		movzx	edx, byte ptr [ebx+eax+4Ch]

loc_64219F3C:				; CODE XREF: _big2_prologTok+663j
					; _big2_prologTok+680j
		lea	eax, [edx-9]
		cmp	eax, 1Bh	; switch 28 cases
		jbe	loc_6421A275

loc_64219F48:				; CODE XREF: _big2_prologTok+656j
					; _big2_prologTok+66Bj	...
		mov	[edi], ecx	; jumptable 6421A275 default case
		xor	eax, eax
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_64219F51:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		add	edx, 2		; jumptable 64219D10 case 35
		mov	eax, 26h
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_64219F60:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		add	edx, 2		; jumptable 64219D10 case 31
		mov	eax, 17h
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------
		align 10h

loc_64219F70:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		lea	ecx, [edx+2]	; jumptable 64219D10 case 13
		mov	eax, 0Dh
		mov	[esp+1Ch+arg_4], edi
		mov	edx, ebx
		mov	[esp+1Ch+arg_0], esi
		jmp	loc_64219E52
; ---------------------------------------------------------------------------

loc_64219F87:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		lea	ebp, [edx+2]	; jumptable 64219D10 case 19
		mov	eax, 0FFFFFFFFh
		cmp	esi, ebp
		jz	loc_64219C45
		movzx	eax, byte ptr [edx+2]
		test	al, al
		jnz	loc_6421A207
		movzx	edx, byte ptr [ebp+1]
		movzx	edx, byte ptr [ebx+edx+4Ch]

loc_64219FAC:				; CODE XREF: _big2_prologTok+640j
					; _big2_prologTok+64Aj
		sub	edx, 5		; switch 25 cases
		cmp	edx, 18h
		ja	loc_6421A0D0	; jumptable 64219FB8 default case
					; jumptable 6421A1DE cases 4-7
		jmp	ds:off_6422243C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_64219FC0:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		add	edx, 2		; jumptable 64219D10 case 36
		mov	eax, 15h
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------
		align 10h

loc_64219FD0:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		mov	[esp+1Ch+arg_0], edi ; jumptable 64219D10 case 30
		mov	ecx, esi
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_C]
		add	edx, 2
		mov	ebx, [esp+1Ch+var_10]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	_big2_scanPercent
; ---------------------------------------------------------------------------

loc_64219FF3:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		lea	eax, [edx+2]	; jumptable 64219D10 cases 10,21
		jmp	loc_64219E0B
; ---------------------------------------------------------------------------

loc_64219FFB:				; CODE XREF: _big2_prologTok:loc_64219D10j
					; DATA XREF: .rdata:off_64222308o
		movzx	ecx, byte ptr [edx+1] ;	jumptable 64219D10 case	29
		jmp	loc_64219C72
; ---------------------------------------------------------------------------

loc_6421A004:				; CODE XREF: _big2_prologTok+206j
					; DATA XREF: .rdata:off_6422239Co
		movzx	ebp, byte ptr [esp+1Ch+var_14] ; jumptable 64219DF6 case 39
		mov	ebx, ebp
		cmp	bl, 0FEh
		jb	loc_64219D9A
		xor	ebp, ebp
		jmp	loc_64219CDC
; ---------------------------------------------------------------------------

loc_6421A01B:				; CODE XREF: _big2_prologTok+206j
					; DATA XREF: .rdata:off_6422239Co
		mov	ebp, 8		; jumptable 64219DF6 cases 4-7
		jmp	loc_64219CDC
; ---------------------------------------------------------------------------

loc_6421A025:				; CODE XREF: _big2_prologTok+F8j
					; DATA XREF: .rdata:off_642221E8o
		cmp	eax, 13h	; jumptable 64219CE8 case 34
		jz	loc_6421A310
		add	edx, 2
		mov	eax, 20h
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A03D:				; CODE XREF: _big2_prologTok+F8j
					; DATA XREF: .rdata:off_642221E8o
		cmp	eax, 13h	; jumptable 64219CE8 case 33
		jz	loc_6421A310
		add	edx, 2
		mov	eax, 1Fh
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A055:				; CODE XREF: _big2_prologTok+F8j
					; DATA XREF: .rdata:off_642221E8o
		add	edx, 2		; jumptable 64219CE8 case 23
		cmp	eax, 12h
		jz	loc_6421A325
		cmp	eax, 29h
		jnz	loc_64219DDB

loc_6421A06A:				; CODE XREF: _big2_prologTok+75Bj
					; _big2_prologTok+761j
					; DATA XREF: ...
		mov	eax, 13h	; jumptable 6421A351 default case
		nop
		jmp	loc_64219DDB
; ---------------------------------------------------------------------------

loc_6421A075:				; CODE XREF: _big2_prologTok+F8j
					; DATA XREF: .rdata:off_642221E8o
		cmp	eax, 13h	; jumptable 64219CE8 case 15
		jz	loc_6421A310
		add	edx, 2
		mov	eax, 1Eh
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A08D:				; CODE XREF: _big2_prologTok+F8j
					; DATA XREF: .rdata:off_642221E8o
		mov	[edi], edx	; jumptable 64219CE8 cases 9-11,20,21,30,32,35,36
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A094:				; CODE XREF: _big2_prologTok+F8j
					; DATA XREF: .rdata:off_642221E8o
		movzx	ebp, byte ptr [edx+1] ;	jumptable 64219CE8 case	29
		jmp	loc_64219D9A
; ---------------------------------------------------------------------------
		align 10h

loc_6421A0A0:				; CODE XREF: _big2_prologTok+3C8j
					; DATA XREF: .rdata:off_6422243Co
		movzx	ecx, byte ptr [ebp+1] ;	jumptable 64219FB8 case	29

loc_6421A0A4:				; CODE XREF: _big2_prologTok+621j
					; _big2_prologTok+62Aj	...
		movzx	eax, al		; jumptable 6421A21A default case
		movzx	edx, ds:_nmstrtPages[eax]
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:_namingBitmap[edx*4], eax
		jnz	short loc_6421A105 ; jumptable 64219FB8	cases 22,24
					; jumptable 6421A12D cases 22,24-27
		lea	esi, [esi+0]

loc_6421A0D0:				; CODE XREF: _big2_prologTok+2A3j
					; _big2_prologTok+2C9j	...
		mov	[edi], ebp	; jumptable 64219FB8 default case
					; jumptable 6421A1DE cases 4-7
		xor	eax, eax
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A0D9:				; CODE XREF: _big2_prologTok+53Dj
					; DATA XREF: .rdata:off_642224A0o
		movzx	ecx, byte ptr [ebp+1] ;	jumptable 6421A12D case	29

loc_6421A0DD:				; CODE XREF: _big2_prologTok+7AFj
					; _big2_prologTok+7B8j	...
		movzx	eax, al		; jumptable 6421A3A8 default case
		movzx	edx, ds:_namePages[eax]
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:_namingBitmap[edx*4], eax
		jz	short loc_6421A0D0 ; jumptable 64219FB8	default	case
					; jumptable 6421A1DE cases 4-7

loc_6421A105:				; CODE XREF: _big2_prologTok+3C8j
					; _big2_prologTok+4DAj	...
		add	ebp, 2		; jumptable 64219FB8 cases 22,24
					; jumptable 6421A12D cases 22,24-27
		cmp	esi, ebp
		jz	loc_6421A5B9
		movzx	eax, byte ptr [ebp+0]
		test	al, al
		jnz	loc_6421A395
		movzx	edx, byte ptr [ebp+1]
		movzx	edx, byte ptr [ebx+edx+4Ch]

loc_6421A125:				; CODE XREF: _big2_prologTok+7CAj
					; _big2_prologTok+7D4j
		sub	edx, 5		; switch 32 cases
		cmp	edx, 1Fh
		ja	short loc_6421A0D0 ; jumptable 64219FB8	default	case
					; jumptable 6421A1DE cases 4-7
		jmp	ds:off_642224A0[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421A134:				; CODE XREF: _big2_prologTok+3C8j
					; _big2_prologTok+53Dj	...
		sub	esi, ebp	; jumptable 64219FB8 case 7
					; jumptable 6421A12D case 7
					; jumptable 6421A21A cases 0-3
					; jumptable 6421A3A8 cases 0-3
		cmp	esi, 3
		jle	loc_64219D2B
		nop
		jmp	short loc_6421A0D0 ; jumptable 64219FB8	default	case
					; jumptable 6421A1DE cases 4-7
; ---------------------------------------------------------------------------

loc_6421A142:				; CODE XREF: _big2_prologTok+3C8j
					; _big2_prologTok+53Dj
					; DATA XREF: ...
		sub	esi, ebp	; jumptable 64219FB8 case 6
					; jumptable 6421A12D case 6
		cmp	esi, 2
		jle	loc_64219D2B
		lea	esi, [esi+0]
		jmp	loc_6421A0D0	; jumptable 64219FB8 default case
					; jumptable 6421A1DE cases 4-7
; ---------------------------------------------------------------------------

loc_6421A155:				; CODE XREF: _big2_prologTok+3C8j
					; _big2_prologTok+53Dj
					; DATA XREF: ...
		sub	esi, ebp	; jumptable 64219FB8 case 5
					; jumptable 6421A12D case 5
		cmp	esi, 1
		jg	loc_6421A0D0	; jumptable 64219FB8 default case
					; jumptable 6421A1DE cases 4-7
		jmp	loc_64219D2B
; ---------------------------------------------------------------------------

loc_6421A165:				; CODE XREF: _big2_prologTok+53Dj
					; DATA XREF: .rdata:off_642224A0o
		mov	[edi], ebp	; jumptable 6421A12D cases 9-11,21,30,32,36
		mov	eax, 14h
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A171:				; CODE XREF: _big2_prologTok+22Aj
		movzx	ecx, byte ptr [eax+1]
		movzx	ecx, byte ptr [ebx+ecx+4Ch]
		cmp	ecx, 0Ah
		jz	short loc_6421A1A0
		cmp	ecx, 15h
		jz	short loc_6421A1A0
		cmp	ecx, 9
		jnz	loc_64219E20
		add	eax, 2
		cmp	esi, eax
		jnz	loc_64219E0B
		jmp	loc_64219E20
; ---------------------------------------------------------------------------
		align 10h

loc_6421A1A0:				; CODE XREF: _big2_prologTok+58Dj
					; _big2_prologTok+592j
		add	eax, 2
		jmp	loc_64219E0B
; ---------------------------------------------------------------------------

loc_6421A1A8:				; CODE XREF: _big2_prologTok+32j
		and	eax, 0FFFFFFFEh
		nop
		lea	esi, [esi+0]
		jz	short loc_6421A1C0
		lea	esi, [edx+eax]
		jmp	loc_64219C28
; ---------------------------------------------------------------------------
		align 10h

loc_6421A1C0:				; CODE XREF: _big2_prologTok+285j
					; _big2_prologTok+5C0j	...
		mov	eax, 0FFFFFFFFh
		jmp	loc_64219C45
; ---------------------------------------------------------------------------
		align 10h

loc_6421A1D0:				; CODE XREF: _big2_prologTok+291j
		add	eax, 28h
		movzx	ecx, byte ptr [ebp+1]
		cmp	al, 27h		; switch 40 cases
		ja	short loc_6421A1E5 ; jumptable 6421A1DE	default	case
		movzx	eax, al
		jmp	ds:off_64222520[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421A1E5:				; CODE XREF: _big2_prologTok+2B5j
					; _big2_prologTok+5E9j	...
		mov	[edi], edx	; jumptable 6421A1DE default case
		mov	eax, 1Dh
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A1F1:				; CODE XREF: _big2_prologTok+5EEj
					; DATA XREF: .rdata:off_64222520o
		cmp	cl, 0FEh	; jumptable 6421A1DE case 39
		jb	short loc_6421A1E5 ; jumptable 6421A1DE	default	case
		xor	ecx, ecx
		jmp	loc_64219E99
; ---------------------------------------------------------------------------

loc_6421A1FD:				; CODE XREF: _big2_prologTok+5EEj
					; DATA XREF: .rdata:off_64222520o
		mov	ecx, 7		; jumptable 6421A1DE cases 0-3
		jmp	loc_64219E99
; ---------------------------------------------------------------------------

loc_6421A207:				; CODE XREF: _big2_prologTok+3ADj
		lea	edx, [eax+28h]
		movzx	ecx, byte ptr [ebp+1]
		cmp	dl, 27h		; switch 40 cases
		ja	loc_6421A0A4	; jumptable 6421A21A default case
		movzx	edx, dl
		jmp	ds:off_642225C0[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421A221:				; CODE XREF: _big2_prologTok+62Aj
					; DATA XREF: .rdata:off_642225C0o
		cmp	cl, 0FEh	; jumptable 6421A21A case 39
		jb	loc_6421A0A4	; jumptable 6421A21A default case
		xor	edx, edx
		lea	esi, [esi+0]
		jmp	loc_64219FAC
; ---------------------------------------------------------------------------

loc_6421A235:				; CODE XREF: _big2_prologTok+62Aj
					; DATA XREF: .rdata:off_642225C0o
		mov	edx, 8		; jumptable 6421A21A cases 4-7
		jmp	loc_64219FAC
; ---------------------------------------------------------------------------
		align 10h

loc_6421A240:				; CODE XREF: _big2_prologTok+33Dj
		cmp	al, 0D8h
		movzx	ebx, byte ptr [ecx+1]
		jb	loc_64219F48	; jumptable 6421A275 default case
		cmp	al, 0DBh
		mov	edx, 7
		jbe	loc_64219F3C
		cmp	al, 0FFh
		jnz	loc_64219F48	; jumptable 6421A275 default case
		cmp	bl, 0FEh
		jb	loc_64219F48	; jumptable 6421A275 default case
		xor	dl, dl
		lea	esi, [esi+0]
		jmp	loc_64219F3C
; ---------------------------------------------------------------------------

loc_6421A275:				; CODE XREF: _big2_prologTok+352j
		jmp	ds:off_64222660[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421A27C:				; CODE XREF: _big2_prologTok:loc_6421A275j
					; DATA XREF: .rdata:off_64222660o
		add	ecx, 2		; jumptable 6421A275 case 25
		mov	eax, 25h
		mov	[edi], ecx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A28B:				; CODE XREF: _big2_prologTok:loc_6421A275j
					; DATA XREF: .rdata:off_64222660o
		add	ecx, 2		; jumptable 6421A275 case 24
		mov	eax, 24h
		mov	[edi], ecx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A29A:				; CODE XREF: _big2_prologTok:loc_6421A275j
					; DATA XREF: .rdata:off_64222660o
		add	ecx, 2		; jumptable 6421A275 case 6
		mov	eax, 23h
		mov	[edi], ecx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A2A9:				; CODE XREF: _big2_prologTok:loc_6421A275j
					; DATA XREF: .rdata:off_64222660o
		mov	[edi], ecx	; jumptable 6421A275 cases 0-2,12,23,26,27
		mov	eax, 18h
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A2B5:				; CODE XREF: _big2_prologTok+306j
		cmp	byte ptr [ecx+1], 5Dh
		jnz	loc_64219EFC
		lea	eax, [edx+4]
		cmp	eax, esi
		jz	loc_6421A1C0
		cmp	byte ptr [edx+4], 0
		xchg	ax, ax
		jnz	loc_64219EFC
		cmp	byte ptr [ecx+3], 3Eh
		jnz	loc_64219EFC
		add	edx, 6
		mov	eax, 22h
		mov	[edi], edx
		jmp	loc_64219C45
; ---------------------------------------------------------------------------
		align 10h

loc_6421A2F0:				; CODE XREF: _big2_prologTok+2C0j
		lea	eax, [ebp+2]
		cmp	esi, eax
		jz	loc_6421A1C0
		movzx	edx, byte ptr [ebp+2]
		test	dl, dl
		jz	loc_6421A3C9

loc_6421A307:				; CODE XREF: _big2_prologTok+7F0j
					; _big2_prologTok+827j	...
		mov	[edi], eax
		xor	eax, eax
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A310:				; CODE XREF: _big2_prologTok+438j
					; _big2_prologTok+450j	...
		mov	[edi], edx
		xor	al, al
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A319:				; CODE XREF: _big2_prologTok+21Fj
		mov	[edi], eax
		mov	eax, 0Fh
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A325:				; CODE XREF: _big2_prologTok+46Bj
		cmp	edx, esi
		jz	loc_6421A1C0
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	loc_6421A484
		movzx	ecx, byte ptr [edx+1]
		mov	ebp, [esp+1Ch+var_18]
		movzx	ecx, byte ptr [ebp+ecx+4Ch]

loc_6421A345:				; CODE XREF: _big2_prologTok+8C0j
					; _big2_prologTok+8CAj
		sub	ecx, 5		; switch 25 cases
		cmp	ecx, 18h
		ja	loc_6421A06A	; jumptable 6421A351 default case
		jmp	ds:off_642226D0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421A358:				; CODE XREF: _big2_prologTok+761j
					; DATA XREF: .rdata:off_642226D0o
		movzx	ecx, byte ptr [edx+1] ;	jumptable 6421A351 case	29

loc_6421A35C:				; CODE XREF: _big2_prologTok+8A2j
					; _big2_prologTok+8B6j
		movzx	eax, al
		mov	ebx, 1
		movzx	ebp, ds:_namePages[eax]
		mov	eax, ecx
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		shl	ebx, cl
		lea	eax, [eax+ebp*8]
		test	ds:_namingBitmap[eax*4], ebx
		jz	loc_64219C41	; jumptable 64219CE8 default case

loc_6421A388:				; CODE XREF: _big2_prologTok+761j
					; DATA XREF: .rdata:off_642226D0o
		add	edx, 2		; jumptable 6421A351 cases 22,24-27
		mov	eax, 29h
		jmp	loc_64219DDB
; ---------------------------------------------------------------------------

loc_6421A395:				; CODE XREF: _big2_prologTok+526j
		lea	edx, [eax+28h]
		movzx	ecx, byte ptr [ebp+1]
		cmp	dl, 27h		; switch 40 cases
		ja	loc_6421A0DD	; jumptable 6421A3A8 default case
		movzx	edx, dl
		jmp	ds:off_64222734[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421A3AF:				; CODE XREF: _big2_prologTok+7B8j
					; DATA XREF: .rdata:off_64222734o
		cmp	cl, 0FEh	; jumptable 6421A3A8 case 39
		jb	loc_6421A0DD	; jumptable 6421A3A8 default case
		xor	edx, edx
		jmp	loc_6421A125
; ---------------------------------------------------------------------------

loc_6421A3BF:				; CODE XREF: _big2_prologTok+7B8j
					; DATA XREF: .rdata:off_64222734o
		mov	edx, 8		; jumptable 6421A3A8 cases 4-7
		jmp	loc_6421A125
; ---------------------------------------------------------------------------

loc_6421A3C9:				; CODE XREF: _big2_prologTok+711j
		movzx	edx, byte ptr [eax+1]
		movzx	edx, byte ptr [ebx+edx+4Ch]
		cmp	edx, 16h
		jz	short loc_6421A3F5
		jg	loc_6421A4BF
		cmp	edx, 14h
		jnz	loc_6421A307
		add	ebp, 4
		mov	eax, 21h
		mov	[edi], ebp
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A3F5:				; CODE XREF: _big2_prologTok+7E5j
					; _big2_prologTok+83Aj	...
		add	eax, 2
		cmp	esi, eax
		jz	loc_6421A1C0
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_6421A540
		movzx	edx, byte ptr [eax+1]
		movzx	ecx, byte ptr [ebx+edx+4Ch]
		cmp	ecx, 1Eh
		ja	loc_6421A307

loc_6421A41D:				; CODE XREF: _big2_prologTok+965j
					; _big2_prologTok+981j
		mov	edx, 1
		shl	edx, cl
		test	edx, 1400000h
		jnz	short loc_6421A3F5
		test	edx, 200600h
		jnz	short loc_6421A478
		and	edx, 40000000h
		jz	loc_6421A307
		lea	edx, [eax+2]
		cmp	esi, edx
		jz	loc_6421A1C0
		movzx	edx, byte ptr [eax+2]
		test	dl, dl
		jnz	loc_6421A576
		movzx	edx, byte ptr [eax+3]
		movzx	ecx, byte ptr [ebx+edx+4Ch]
		cmp	ecx, 1Eh
		ja	short loc_6421A478

loc_6421A465:				; CODE XREF: _big2_prologTok+99Bj
					; _big2_prologTok+9B8j
		mov	edx, 1
		shl	edx, cl
		and	edx, 40200600h
		jnz	loc_6421A307

loc_6421A478:				; CODE XREF: _big2_prologTok+842j
					; _big2_prologTok+873j	...
		mov	[edi], eax
		mov	eax, 10h
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A484:				; CODE XREF: _big2_prologTok+742j
		lea	ecx, [eax+28h]
		movzx	ebp, byte ptr [edx+1]
		cmp	cl, 27h		; switch 40 cases
		jbe	short loc_6421A497

loc_6421A490:				; CODE XREF: _big2_prologTok+8AAj
					; DATA XREF: .rdata:off_642227D4o
		mov	ecx, ebp	; jumptable 6421A49A default case
		jmp	loc_6421A35C
; ---------------------------------------------------------------------------

loc_6421A497:				; CODE XREF: _big2_prologTok+89Ej
		movzx	ecx, cl
		jmp	ds:off_642227D4[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6421A4A1:				; CODE XREF: _big2_prologTok+8AAj
					; DATA XREF: .rdata:off_642227D4o
		mov	ecx, ebp	; jumptable 6421A49A case 39
		cmp	cl, 0FEh
		jb	loc_6421A35C
		xor	ecx, ecx
		xchg	ax, ax
		jmp	loc_6421A345
; ---------------------------------------------------------------------------

loc_6421A4B5:				; CODE XREF: _big2_prologTok+8AAj
					; DATA XREF: .rdata:off_642227D4o
		mov	ecx, 8		; jumptable 6421A49A cases 4-7
		jmp	loc_6421A345
; ---------------------------------------------------------------------------

loc_6421A4BF:				; CODE XREF: _big2_prologTok+7E7j
		cmp	edx, 18h
		jz	loc_6421A3F5
		cmp	edx, 1Bh
		nop
		lea	esi, [esi+0]
		jnz	loc_6421A307
		add	ebp, 4
		cmp	esi, ebp
		jz	loc_6421A1C0
		cmp	byte ptr [eax+2], 0
		jnz	loc_6421A0D0	; jumptable 64219FB8 default case
					; jumptable 6421A1DE cases 4-7
		cmp	byte ptr [ebp+1], 2Dh
		nop
		jnz	loc_6421A0D0	; jumptable 64219FB8 default case
					; jumptable 6421A1DE cases 4-7

loc_6421A4F6:				; CODE XREF: _big2_prologTok+9E9j
		add	eax, 4

loc_6421A4F9:				; CODE XREF: _big2_prologTok+949j
					; _big2_prologTok+A0Cj	...
		cmp	esi, eax
		jz	loc_6421A1C0
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	loc_6421A661
		movzx	edx, byte ptr [eax+1]
		movzx	edx, byte ptr [ebx+edx+4Ch]
		cmp	edx, 6
		jz	loc_6421A64C
		jg	loc_6421A5C5
		cmp	edx, 1
		jle	loc_6421A307
		cmp	edx, 5
		jz	loc_6421A63A

loc_6421A536:				; CODE XREF: _big2_prologTok+9F8j
					; _big2_prologTok+A51j	...
		add	eax, 2
		jmp	short loc_6421A4F9
; ---------------------------------------------------------------------------
		align 10h

loc_6421A540:				; CODE XREF: _big2_prologTok+815j
		cmp	dl, 0D8h
		movzx	ebp, byte ptr [eax+1]
		jb	loc_6421A307
		cmp	dl, 0DBh
		mov	ecx, 7
		jbe	loc_6421A41D
		cmp	dl, 0FFh
		jnz	loc_6421A307
		mov	edx, ebp
		cmp	dl, 0FEh
		jb	loc_6421A307
		xor	cl, cl
		jmp	loc_6421A41D
; ---------------------------------------------------------------------------

loc_6421A576:				; CODE XREF: _big2_prologTok+861j
		cmp	dl, 0D8h
		movzx	ebx, byte ptr [eax+3]
		jb	loc_6421A478
		cmp	dl, 0DBh
		mov	ecx, 7
		jbe	loc_6421A465
		cmp	dl, 0FFh
		jnz	loc_6421A478
		cmp	bl, 0FEh
		lea	esi, [esi+0]
		jb	loc_6421A478
		xor	cl, cl
		jmp	loc_6421A465
; ---------------------------------------------------------------------------

loc_6421A5AD:				; CODE XREF: _big2_prologTok+215j
		mov	[edi], esi
		mov	eax, 0FFFFFFF1h
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A5B9:				; CODE XREF: _big2_prologTok+51Aj
		mov	eax, 0FFFFFFECh
		xchg	ax, ax
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A5C5:				; CODE XREF: _big2_prologTok+92Ej
		cmp	edx, 8
		jz	loc_6421A307
		xchg	ax, ax
		jge	short loc_6421A5E5

loc_6421A5D2:				; CODE XREF: _big2_prologTok+A90j
		mov	edx, esi
		sub	edx, eax
		cmp	edx, 3
		jg	loc_6421A4F6
		nop
		jmp	loc_64219D2B
; ---------------------------------------------------------------------------

loc_6421A5E5:				; CODE XREF: _big2_prologTok+9E0j
		cmp	edx, 1Bh
		jnz	loc_6421A536
		add	eax, 2
		cmp	esi, eax
		jz	loc_6421A1C0
		cmp	byte ptr [eax],	0
		jnz	loc_6421A4F9
		cmp	byte ptr [eax+1], 2Dh
		jnz	loc_6421A4F9
		lea	edx, [eax+2]
		cmp	esi, edx
		jz	loc_6421A1C0
		cmp	byte ptr [eax+2], 0
		jnz	loc_64219C41	; jumptable 64219CE8 default case
		cmp	byte ptr [edx+1], 3Eh
		jnz	loc_64219C41	; jumptable 64219CE8 default case
		add	eax, 4
		mov	[edi], eax
		mov	eax, 0Dh
		jmp	loc_64219C45
; ---------------------------------------------------------------------------

loc_6421A63A:				; CODE XREF: _big2_prologTok+940j
		mov	edx, esi
		sub	edx, eax
		cmp	edx, 1
		jg	loc_6421A536
		jmp	loc_64219D2B
; ---------------------------------------------------------------------------

loc_6421A64C:				; CODE XREF: _big2_prologTok+928j
		mov	edx, esi
		sub	edx, eax
		cmp	edx, 2
		jle	loc_64219D2B
		add	eax, 3
		jmp	loc_6421A4F9
; ---------------------------------------------------------------------------

loc_6421A661:				; CODE XREF: _big2_prologTok+916j
		cmp	dl, 0DFh
		movzx	ecx, byte ptr [eax+1]
		ja	short loc_6421A685
		cmp	dl, 0DCh
		lea	esi, [esi+0]
		jnb	loc_6421A307
		cmp	dl, 0D8h
		jb	loc_6421A536
		nop
		jmp	loc_6421A5D2
; ---------------------------------------------------------------------------

loc_6421A685:				; CODE XREF: _big2_prologTok+A78j
		cmp	dl, 0FFh
		jnz	loc_6421A536
		cmp	cl, 0FEh
		jb	loc_6421A536
		jmp	loc_6421A307
_big2_prologTok	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; _onexit_t __cdecl mingw_onexit(_onexit_t func)
		public _mingw_onexit
_mingw_onexit	proc near		; CODE XREF: _atexit+Ap

codedptr	= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
ptr		= dword	ptr -10h
func		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:___onexitbegin
		mov	ebx, [esp+2Ch+func]
		mov	[esp+2Ch+codedptr], eax	; codedptr
		call	__decode_pointer
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+ptr], eax
		jz	loc_6421A740
func_0 = ebx				; _onexit_t
		mov	[esp+2Ch+codedptr], 8
		call	__lock
		mov	eax, ds:___onexitbegin
		mov	[esp+2Ch+codedptr], eax	; codedptr
		call	__decode_pointer
		mov	[esp+2Ch+ptr], eax
		mov	eax, ds:___onexitend
		mov	[esp+2Ch+codedptr], eax	; codedptr
		call	__decode_pointer
		mov	[esp+2Ch+codedptr], func_0
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+ptr]
		mov	[esp+2Ch+var_28], eax
		call	___dllonexit
		mov	func_0,	eax
retval = ebx				; _onexit_t
		mov	eax, [esp+2Ch+ptr]
		mov	[esp+2Ch+codedptr], eax	; ptr
		call	__encode_pointer
		mov	ds:___onexitbegin, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+codedptr], eax	; ptr
		call	__encode_pointer
		mov	[esp+2Ch+codedptr], 8
		mov	ds:___onexitend, eax
		call	__unlock
		mov	eax, retval
		add	esp, 28h
		pop	retval
		retn
; ---------------------------------------------------------------------------
func_0 = ebx				; _onexit_t
		align 10h

loc_6421A740:				; CODE XREF: _mingw_onexit+1Cj
		mov	[esp+2Ch+codedptr], func_0 ; _onexit_t
		call	ds:__imp___onexit
		add	esp, 28h
		mov	func_0,	eax
retval = ebx				; _onexit_t
		mov	eax, retval
		pop	retval
		retn
_mingw_onexit	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl atexit(_PVFV func)
		public _atexit
_atexit		proc near		; CODE XREF: ___do_global_ctors+31p
					; _register_frame_ctor+12p

var_1C		= dword	ptr -1Ch
func		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+func]
		mov	[esp+1Ch+var_1C], eax ;	func
		call	_mingw_onexit
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
_atexit		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl __tlregdtor(_PVFV	func)
		public ___tlregdtor
___tlregdtor	proc near

func		= dword	ptr  4

		xor	eax, eax
		retn
___tlregdtor	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; BOOL __stdcall __dyn_tls_dtor(HANDLE hDllHandle, DWORD dwReason, LPVOID lpreserved)
		public ___dyn_tls_dtor@12
___dyn_tls_dtor@12 proc	near		; DATA XREF: .CRT:___xl_do

var_1C		= dword	ptr -1Ch
reason		= dword	ptr -18h
reserved	= dword	ptr -14h
hDllHandle	= dword	ptr  4
dwReason	= dword	ptr  8
lpreserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+dwReason]
		test	eax, eax
		jz	short loc_6421A7B0
dwReason_0 = eax			; DWORD
		cmp	dwReason_0, 3
		jz	short loc_6421A7B0
		mov	dwReason_0, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
dwReason_0 = eax			; DWORD
		align 10h

loc_6421A7B0:				; CODE XREF: ___dyn_tls_dtor@12+9j
					; ___dyn_tls_dtor@12+Ej
		mov	edx, [esp+1Ch+lpreserved]
		mov	[esp+1Ch+reason], dwReason_0 ; reason
		mov	dwReason_0, [esp+1Ch+hDllHandle]
		mov	[esp+1Ch+reserved], edx	; reserved
		mov	[esp+1Ch+var_1C], eax ;	hDllHandle
		call	___mingw_TLScallback
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
___dyn_tls_dtor@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall __dyn_tls_init(HANDLE hDllHandle, DWORD dwReason, LPVOID lpreserved)
		public ___dyn_tls_init@12
___dyn_tls_init@12 proc	near		; CODE XREF: __CRT_INIT@12+117p
					; DATA XREF: .rdata:___dyn_tls_init_callbacko ...

var_1C		= dword	ptr -1Ch
reason		= dword	ptr -18h
reserved	= dword	ptr -14h
hDllHandle	= dword	ptr  4
dwReason	= dword	ptr  8
lpreserved	= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	__CRT_MT, 2
		mov	eax, [esp+1Ch+dwReason]
		jz	short loc_6421A7FB
dwReason_0 = eax			; DWORD
		mov	__CRT_MT, 2

loc_6421A7FB:				; CODE XREF: ___dyn_tls_init@12+Fj
		cmp	dwReason_0, 2
		jz	short loc_6421A811
		cmp	dwReason_0, 1
		jz	short loc_6421A840

loc_6421A805:				; CODE XREF: ___dyn_tls_init@12+3Cj
					; ___dyn_tls_init@12+7Cj
ps = ebx				; uintptr_t
		mov	eax, 1
		add	esp, 18h
		pop	ps
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6421A811:				; CODE XREF: ___dyn_tls_init@12+1Ej
dwReason_0 = eax			; DWORD
		mov	ebx, offset ___xd_z
ps = ebx				; uintptr_t
		cmp	ps, offset ___xd_z
		jz	short loc_6421A805
		xchg	ax, ax

loc_6421A820:				; CODE XREF: ___dyn_tls_init@12+51j
		mov	eax, [ps]
		test	eax, eax
		jz	short loc_6421A828
		call	eax

loc_6421A828:				; CODE XREF: ___dyn_tls_init@12+44j
		add	ps, 4
		cmp	ps, offset ___xd_z
		jnz	short loc_6421A820
		mov	eax, 1
		add	esp, 18h
		pop	ps
		retn	0Ch
; ---------------------------------------------------------------------------
dwReason_0 = eax			; DWORD
		align 10h

loc_6421A840:				; CODE XREF: ___dyn_tls_init@12+23j
		mov	dwReason_0, [esp+1Ch+lpreserved]
		mov	[esp+1Ch+reason], 1 ; reason
		mov	[esp+1Ch+reserved], eax	; reserved
		mov	eax, [esp+1Ch+hDllHandle]
		mov	[esp+1Ch+var_1C], eax ;	hDllHandle
		call	___mingw_TLScallback
		jmp	short loc_6421A805
___dyn_tls_init@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void *__cdecl	_decode_pointer(void *codedptr)
		public __decode_pointer
__decode_pointer proc near		; CODE XREF: __CRT_INIT@12+138p
					; __CRT_INIT@12+14Bp ...

codedptr	= dword	ptr  4

		mov	eax, [esp+codedptr]
		retn
__decode_pointer endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void *__cdecl	_encode_pointer(void *ptr)
		public __encode_pointer
__encode_pointer proc near		; CODE XREF: _pre_c_init+15p
					; _mingw_onexit+71p ...

ptr		= dword	ptr  4

		mov	eax, [esp+ptr]
		retn
__encode_pointer endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn static

; void __report_error(const char *msg, ...)
___report_error	proc near		; CODE XREF: ___report_error+191p
					; ___report_error+1A1p	...

p		= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
msg		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:__imp___iob
		mov	[esp+1Ch+var_14], 1Bh ;	size_t
		lea	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], 1 ; size_t
		mov	[esp+1Ch+var_1C], offset aMingwW64Runtim ; "Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+var_10], eax ;	FILE *
		call	_fwrite
		mov	eax, [esp+1Ch+msg]
		mov	[esp+1Ch+var_14], ebx ;	va_list
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+1Ch+var_1C], eax ;	FILE *
		call	_vfprintf
		call	_abort
; ---------------------------------------------------------------------------
		jmp	short ___write_memory
; ---------------------------------------------------------------------------
		align 10h

___write_memory:			; CODE XREF: ___report_error+51j
					; __pei386_runtime_relocator+12Ap ...
		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+78h+p], edx
		jnz	short loc_6421A900
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6421A900:				; CODE XREF: ___report_error+71j
		mov	ecx, ds:_maxSections
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_6421A930
		mov	eax, ds:_the_secs

loc_6421A911:				; CODE XREF: ___report_error+AEj
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_6421A926
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_6421A9A9

loc_6421A926:				; CODE XREF: ___report_error+96j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_6421A911

loc_6421A930:				; CODE XREF: ___report_error+8Aj
		mov	[esp+0], ebx	; p
		call	___mingw_GetSectionForAddress
		test	eax, eax
		mov	ebp, eax
		jz	loc_6421AA16
		lea	edx, [esi+esi*2]
		mov	esi, ds:_the_secs
		shl	edx, 2
		mov	[esp+18h], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	__GetPEImageBase
		mov	edx, [esp+18h]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+78h+dwLength]
		mov	[esp+4], eax	; lpBuffer
		mov	eax, ds:_the_secs
		mov	dword ptr [esp+8], 1Ch ; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+0], eax	; lpAddress
		call	ds:__imp__VirtualQuery@12
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+18h]
		jz	short loc_6421A9F6
		mov	eax, [esp+78h+var_40]
		cmp	eax, 4
		jnz	short loc_6421A9C5

loc_6421A9A2:				; CODE XREF: ___report_error+148j
					; ___report_error+174j
		add	ds:_maxSections, 1

loc_6421A9A9:				; CODE XREF: ___report_error+A0j
		mov	eax, [esp+78h+p]
		mov	[esp+8], edi	; size_t
		mov	[esp+0], ebx	; void *
		mov	[esp+4], eax	; void *
		call	_memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6421A9C5:				; CODE XREF: ___report_error+120j
		cmp	eax, 40h
		jz	short loc_6421A9A2
		mov	eax, [esp+30h]
		add	edx, ds:_the_secs
		mov	dword ptr [esp+8], 40h ; flNewProtect
		mov	[esp+4], eax	; dwSize
		mov	eax, [esp+78h+dwLength]
		mov	[esp+0Ch], edx	; lpflOldProtect
		mov	[esp+0], eax	; lpAddress
		call	ds:__imp__VirtualProtect@16
		sub	esp, 10h
		jmp	short loc_6421A9A2
; ---------------------------------------------------------------------------

loc_6421A9F6:				; CODE XREF: ___report_error+117j
		mov	eax, ds:_the_secs
		mov	eax, [eax+edx+4]
		mov	[esp+8], eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp+0], offset msg ;	"  VirtualQuery	failed for %d bytes at a"...
		mov	[esp+4], eax
		call	___report_error
; ---------------------------------------------------------------------------

loc_6421AA16:				; CODE XREF: ___report_error+BCj
		mov	[esp+4], ebx
		mov	dword ptr [esp+0], offset aAddressPHasNoI ; "Address %p	has no image-section"
		call	___report_error
___report_error	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void _pei386_runtime_relocator()
		public __pei386_runtime_relocator
__pei386_runtime_relocator proc	near	; CODE XREF: ___DllMainCRTStartup+30p
					; ___DllMainCRTStartup:loc_642012E8p

Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

mSecs =	eax				; int
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:_was_init_56313
		test	ebx, ebx
		jz	short loc_6421AA50

loc_6421AA43:				; CODE XREF: __pei386_runtime_relocator+64j
					; __pei386_runtime_relocator+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6421AA50:				; CODE XREF: __pei386_runtime_relocator+11j
		mov	ds:_was_init_56313, 1
		call	___mingw_GetSectionCount
		lea	mSecs, [mSecs+mSecs*2]
		lea	mSecs, ds:1Eh[mSecs*4]
		and	mSecs, 0FFFFFFF0h ; size
		call	__alloca
		mov	ds:_maxSections, 0
		lea	mSecs, [esp+1Fh]
		and	mSecs, 0FFFFFFF0h
		mov	ds:_the_secs, mSecs
		mov	mSecs, offset __rt_psrelocs_end
		sub	mSecs, offset __rt_psrelocs_end
		cmp	mSecs, 7
		jle	short loc_6421AA43
		cmp	mSecs, 0Bh
		mov	ebx, offset __rt_psrelocs_end
		jle	short loc_6421AAC2
		mov	ecx, ds:__rt_psrelocs_end
		test	ecx, ecx
		jnz	short loc_6421AAC2
		mov	edx, ds:dword_64224918
		test	edx, edx
		jnz	short loc_6421AAC2
		mov	mSecs, ds:dword_6422491C
		test	mSecs, mSecs
		jnz	short loc_6421AAC2
		mov	ebx, offset dword_64224920

loc_6421AAC2:				; CODE XREF: __pei386_runtime_relocator+6Ej
					; __pei386_runtime_relocator+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_6421AB30
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_6421AB30
		mov	mSecs, [ebx+8]
		cmp	mSecs, 1
		jnz	loc_6421AC93
		add	ebx, 0Ch
		cmp	ebx, offset __rt_psrelocs_end
		jnb	loc_6421AA43
		mov	esi, 64200000h

loc_6421AAEF:				; CODE XREF: __pei386_runtime_relocator+217j
		mov	mSecs, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	mSecs, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_6421ABED
		cmp	edx, 20h
		jz	loc_6421AC2A
		cmp	edx, 8
		jz	loc_6421AC0C
		mov	[ebp+var_1C], 0
		mov	[esp+4], edx
		mov	dword ptr [esp], offset	aUnknownPseudoR	; "  Unknown pseudo relocation bit size	%d"...
		call	___report_error
; ---------------------------------------------------------------------------

loc_6421AB30:				; CODE XREF: __pei386_runtime_relocator+96j
					; __pei386_runtime_relocator+9Dj
		cmp	ebx, offset __rt_psrelocs_end
		jnb	loc_6421AA43
		mov	esi, 64200000h
		lea	edi, [ebp+flOldProtect]

loc_6421AB44:				; CODE XREF: __pei386_runtime_relocator+135j
		mov	mSecs, [ebx+4]
		mov	ecx, 4
		add	mSecs, esi
		mov	edx, [mSecs]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	___write_memory
; ---------------------------------------------------------------------------
		cmp	ebx, offset __rt_psrelocs_end
		jb	short loc_6421AB44

loc_6421AB67:				; CODE XREF: __pei386_runtime_relocator+21Dj
		mov	ecx, ds:_maxSections
		test	ecx, ecx
		jle	loc_6421AA43
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_6421AB92
; ---------------------------------------------------------------------------
		align 10h

loc_6421AB80:				; CODE XREF: __pei386_runtime_relocator+16Dj
					; __pei386_runtime_relocator+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:_maxSections
		jge	loc_6421AA43

loc_6421AB92:				; CODE XREF: __pei386_runtime_relocator+14Cj
		mov	mSecs, ds:_the_secs
		add	mSecs, ebx
		mov	edx, [mSecs]
		test	edx, edx
		jz	short loc_6421AB80
		lea	edx, [ebp+Buffer]
		mov	dword ptr [esp+8], 1Ch ; dwLength
		mov	[esp+4], edx	; lpBuffer
		mov	mSecs, [mSecs+4]
		mov	[esp], mSecs	; lpAddress
		call	ds:__imp__VirtualQuery@12
		sub	esp, 0Ch
		test	mSecs, mSecs
		jz	loc_6421AC70
		mov	mSecs, ds:_the_secs
		mov	[esp+0Ch], edi	; lpflOldProtect
		mov	mSecs, [mSecs+ebx]
		mov	[esp+8], mSecs	; flNewProtect
		mov	mSecs, [ebp+Buffer.RegionSize]
		mov	[esp+4], mSecs	; dwSize
		mov	mSecs, [ebp+Buffer.BaseAddress]
		mov	[esp], mSecs	; lpAddress
		call	ds:__imp__VirtualProtect@16
		sub	esp, 10h
		jmp	short loc_6421AB80
; ---------------------------------------------------------------------------

loc_6421ABED:				; CODE XREF: __pei386_runtime_relocator+D1j
		movzx	edx, word ptr [mSecs]
		test	dx, dx
		js	short loc_6421AC61
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6421ABFD:				; CODE XREF: __pei386_runtime_relocator+23Ej
		mov	ecx, 2
		lea	edx, [ebp+var_1C]
		call	___write_memory
; ---------------------------------------------------------------------------
		jmp	short loc_6421AC3E
; ---------------------------------------------------------------------------

loc_6421AC0C:				; CODE XREF: __pei386_runtime_relocator+E3j
		movzx	edx, byte ptr [mSecs]
		test	dl, dl
		js	short loc_6421AC52
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6421AC1B:				; CODE XREF: __pei386_runtime_relocator+22Fj
		mov	ecx, 1
		lea	edx, [ebp+var_1C]
		call	___write_memory
; ---------------------------------------------------------------------------
		jmp	short loc_6421AC3E
; ---------------------------------------------------------------------------

loc_6421AC2A:				; CODE XREF: __pei386_runtime_relocator+DAj
		add	edi, [mSecs]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4
		mov	[ebp+var_1C], edi
		call	___write_memory
; ---------------------------------------------------------------------------

loc_6421AC3E:				; CODE XREF: __pei386_runtime_relocator+1DAj
					; __pei386_runtime_relocator+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset __rt_psrelocs_end
		jb	loc_6421AAEF
		jmp	loc_6421AB67
; ---------------------------------------------------------------------------

loc_6421AC52:				; CODE XREF: __pei386_runtime_relocator+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6421AC1B
; ---------------------------------------------------------------------------

loc_6421AC61:				; CODE XREF: __pei386_runtime_relocator+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6421ABFD
; ---------------------------------------------------------------------------

loc_6421AC70:				; CODE XREF: __pei386_runtime_relocator+18Fj
		add	ebx, ds:_the_secs
		mov	mSecs, [ebx+4]
		mov	[esp+8], mSecs
		mov	mSecs, [ebx+8]
		mov	mSecs, [mSecs+8]
		mov	dword ptr [esp], offset	msg ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+4], mSecs
		call	___report_error
; ---------------------------------------------------------------------------

loc_6421AC93:				; CODE XREF: __pei386_runtime_relocator+A5j
		mov	[esp+4], mSecs
		mov	dword ptr [esp], offset	aUnknownPseud_0	; "  Unknown pseudo relocation protocol	ve"...
		call	___report_error
; ---------------------------------------------------------------------------
		align 10h

; void __do_global_dtors(void)
		public ___do_global_dtors
___do_global_dtors:			; DATA XREF: ___do_global_ctors:loc_6421AD0Ao
		sub	esp, 0Ch
		mov	eax, _p_55658
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6421ACD7
		xchg	ax, ax

loc_6421ACC0:				; CODE XREF: __pei386_runtime_relocator+2A5j
		call	eax
		mov	eax, _p_55658
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	_p_55658, edx
		test	eax, eax
		jnz	short loc_6421ACC0

loc_6421ACD7:				; CODE XREF: __pei386_runtime_relocator+28Cj
		add	esp, 0Ch
		retn
__pei386_runtime_relocator endp	; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __do_global_ctors()
		public ___do_global_ctors
___do_global_ctors proc	near		; CODE XREF: ___main+1Ej

func		= dword	ptr -1Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:___CTOR_LIST__
i = ebx					; unsigned int
		cmp	i, 0FFFFFFFFh
		jz	short loc_6421AD20

loc_6421ACF0:				; CODE XREF: ___do_global_ctors+54j
nptrs =	eax				; unsigned int
		test	i, i
		jz	short loc_6421AD0A
		lea	esi, ___CTOR_LIST__[i*4]
		nop
		lea	esi, [esi+0]

loc_6421AD00:				; CODE XREF: ___do_global_ctors+28j
		call	dword ptr [esi]
		sub	esi, 4
		sub	i, 1
		jnz	short loc_6421AD00

loc_6421AD0A:				; CODE XREF: ___do_global_ctors+12j
nptrs =	eax				; unsigned int ; func
		mov	[esp+1Ch+func],	offset ___do_global_dtors
		call	_atexit
		add	esp, 14h
		pop	i
		pop	esi
		retn
; ---------------------------------------------------------------------------
i = ebx					; unsigned int
		align 10h

loc_6421AD20:				; CODE XREF: ___do_global_ctors+Ej
		xor	i, i
nptrs =	ebx				; unsigned int
		jmp	short loc_6421AD26
; ---------------------------------------------------------------------------

loc_6421AD24:				; CODE XREF: ___do_global_ctors+52j
nptrs =	eax				; unsigned int
		mov	ebx, nptrs

loc_6421AD26:				; CODE XREF: ___do_global_ctors+42j
nptrs =	ebx				; unsigned int
		lea	eax, [nptrs+1]
nptrs =	eax				; unsigned int
		mov	edx, ds:___CTOR_LIST__[nptrs*4]
		test	edx, edx
		jnz	short loc_6421AD24
		jmp	short loc_6421ACF0
___do_global_ctors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __main()
		public ___main
___main		proc near		; CODE XREF: ___DllMainCRTStartup+92p
		sub	esp, 0Ch
		mov	ecx, ds:_initialized
		test	ecx, ecx
		jz	short loc_6421AD51
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6421AD51:				; CODE XREF: ___main+Bj
		mov	ds:_initialized, 1
		add	esp, 0Ch
		jmp	short ___do_global_ctors
___main		endp


; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HANDLE	hDllHandle, DWORD dwReason, LPVOID lpreserved)
		public _DllMain@12
_DllMain@12	proc near		; CODE XREF: ___DllMainCRTStartup+40p
					; ___DllMainCRTStartup+A6p ...

hDllHandle	= dword	ptr  4
dwReason	= dword	ptr  8
lpreserved	= dword	ptr  0Ch

		mov	eax, 1
		retn	0Ch
_DllMain@12	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HANDLE hDllHandle, DWORD	dwReason, LPVOID lpreserved)
		public _DllEntryPoint@12
_DllEntryPoint@12 proc near		; CODE XREF: ___DllMainCRTStartup+F1p
					; ___DllMainCRTStartup+10Bp ...

hDllHandle	= dword	ptr  4
dwReason	= dword	ptr  8
lpreserved	= dword	ptr  0Ch

		mov	eax, 1
		retn	0Ch
_DllEntryPoint@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl __report_gsfailure(ULONGLONG StackCookie)
		public ___report_gsfailure
___report_gsfailure proc near

cookie		= dword	ptr -10h
StackCookie	= qword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:_GS_ContextRecord._Esp, edx
		mov	ds:_GS_ExceptionRecord.ExceptionCode, 0C0000409h
		mov	ds:_GS_ExceptionRecord.ExceptionFlags, 1
		mov	ds:_GS_ContextRecord._Eip, eax
		mov	ds:_GS_ExceptionRecord.ExceptionAddress, eax
		mov	eax, dword ptr [ebp+StackCookie]
		mov	dword ptr [esp], 0 ; lpTopLevelExceptionFilter
		mov	ds:_GS_ContextRecord._Ecx, eax
		mov	eax, ___security_cookie
		mov	[ebp+cookie], eax
		mov	eax, ___security_cookie_complement
		mov	[ebp+cookie+4],	eax
		call	ds:__imp__SetUnhandledExceptionFilter@4
		sub	esp, 4
		mov	dword ptr [esp], offset	_GS_ExceptionPointers ;	ExceptionInfo
		call	ds:__imp__UnhandledExceptionFilter@4
		sub	esp, 4
		call	ds:__imp__GetCurrentProcess@0
		mov	dword ptr [esp+4], 0C0000409h ;	uExitCode
		mov	[esp], eax	; hProcess
		call	ds:__imp__TerminateProcess@8
		sub	esp, 8
		call	_abort
___report_gsfailure endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __security_init_cookie()
		public ___security_init_cookie
___security_init_cookie	proc near	; CODE XREF: _DllMainCRTStartup@12+34p

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
perfctr		= LARGE_INTEGER	ptr -2Ch
systime		= FT ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, ___security_cookie
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_6421AE50
		not	eax
		mov	___security_cookie_complement, eax

loc_6421AE36:				; CODE XREF: ___security_init_cookie+BDj
cookie = ebp				; UINT_PTR
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	cookie,	[esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6421AE50:				; CODE XREF: ___security_init_cookie+1Dj
		lea	eax, [esp+4Ch+systime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	dword ptr [esp+4Ch+systime], 0
		mov	dword ptr [esp+4Ch+systime+4], 0
		call	ds:__imp__GetSystemTimeAsFileTime@4
		sub	esp, 4
		mov	eax, dword ptr [esp+4Ch+systime+4]
		mov	ebp, dword ptr [esp+4Ch+systime]
cookie = ebp				; UINT_PTR
		mov	[esp+4Ch+var_30], eax
		call	ds:__imp__GetCurrentProcessId@0
		mov	edi, eax
		call	ds:__imp__GetCurrentThreadId@0
		mov	esi, eax
		call	ds:__imp__GetTickCount@0
		mov	ebx, eax
		lea	eax, [esp+4Ch+perfctr]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:__imp__QueryPerformanceCounter@4
		sub	esp, 4
		xor	cookie,	[esp+4Ch+var_30]
		xor	cookie,	dword ptr [esp+4Ch+perfctr]
		xor	cookie,	dword ptr [esp+4Ch+perfctr+4]
		xor	cookie,	edi
		xor	cookie,	esi
		xor	cookie,	ebx
		mov	eax, cookie
		cmp	cookie,	0BB40E64Eh
		not	eax
		jz	short loc_6421AED2

loc_6421AEC2:				; CODE XREF: ___security_init_cookie+CBj
		mov	___security_cookie, cookie
		mov	___security_cookie_complement, eax
		jmp	loc_6421AE36
; ---------------------------------------------------------------------------

loc_6421AED2:				; CODE XREF: ___security_init_cookie+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_6421AEC2
___security_init_cookie	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; void __mingwthr_run_key_dtors()
___mingwthr_run_key_dtors proc near	; CODE XREF: ___mingw_TLScallback+13p
					; ___mingw_TLScallback:loc_6421AF81p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jnz	short loc_6421AEF8
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6421AEF8:				; CODE XREF: ___mingwthr_run_key_dtors+Ej
		mov	[esp+2Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__EnterCriticalSection@4
		mov	ebx, ds:_key_dtor_list
keyp = ebx				; volatile __mingwthr_key_t *
		sub	esp, 4
		test	keyp, keyp
		jz	short loc_6421AF45
		mov	ebp, ds:__imp__TlsGetValue@4
		mov	edi, ds:__imp__GetLastError@0
value =	esi				; LPVOID
		xchg	ax, ax

loc_6421AF20:				; CODE XREF: ___mingwthr_run_key_dtors+63j
		mov	eax, [keyp]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; __imp__TlsGetValue@4
		sub	esp, 4
		mov	value, eax
		call	edi ; __imp__GetLastError@0
		test	eax, eax
		jnz	short loc_6421AF3E
		test	value, value
		jz	short loc_6421AF3E
		mov	eax, [keyp+4]
		mov	[esp+2Ch+lpCriticalSection], value
		call	eax

loc_6421AF3E:				; CODE XREF: ___mingwthr_run_key_dtors+50j
					; ___mingwthr_run_key_dtors+54j
		mov	keyp, [keyp+8]
		test	keyp, keyp
		jnz	short loc_6421AF20

loc_6421AF45:				; CODE XREF: ___mingwthr_run_key_dtors+30j
		mov	[esp+2Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4
		sub	esp, 4
		add	esp, 1Ch
		pop	keyp
		pop	value
		pop	edi
		pop	ebp
		retn
___mingwthr_run_key_dtors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; WINBOOL __cdecl __mingw_TLScallback(HANDLE hDllHandle, DWORD reason, LPVOID reserved)
		public ___mingw_TLScallback
___mingw_TLScallback proc near		; CODE XREF: ___dyn_tls_dtor@12+33p
					; ___dyn_tls_init@12+77p

lpCriticalSection= dword ptr -1Ch
hDllHandle	= dword	ptr  4
reason		= dword	ptr  8
reserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+reason]
		cmp	eax, 1
		jz	short loc_6421AFB0
reason_0 = eax				; DWORD
		jb	short loc_6421AF81
		cmp	reason_0, 3
		jnz	short loc_6421AF78
		call	___mingwthr_run_key_dtors

loc_6421AF78:				; CODE XREF: ___mingw_TLScallback+11j
					; ___mingw_TLScallback+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6421AF81:				; CODE XREF: ___mingw_TLScallback+Cj
reason_0 = eax				; DWORD
		call	___mingwthr_run_key_dtors
		mov	eax, ds:___mingwthr_cs_init
		cmp	eax, 1
		jnz	short loc_6421AF78
		mov	ds:___mingwthr_cs_init,	0
		mov	[esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__DeleteCriticalSection@4
		sub	esp, 4
		jmp	short loc_6421AF78
; ---------------------------------------------------------------------------
reason_0 = eax				; DWORD
		align 10h

loc_6421AFB0:				; CODE XREF: ___mingw_TLScallback+Aj
		mov	reason_0, ds:___mingwthr_cs_init
		test	eax, eax
		jz	short loc_6421AFD0

loc_6421AFB9:				; CODE XREF: ___mingw_TLScallback+80j
		mov	ds:___mingwthr_cs_init,	1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6421AFD0:				; CODE XREF: ___mingw_TLScallback+57j
		mov	[esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__InitializeCriticalSection@4
		sub	esp, 4
		jmp	short loc_6421AFB9
___mingw_TLScallback endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ___w64_mingwthr_remove_key_dtor(DWORD key)
		public ____w64_mingwthr_remove_key_dtor
____w64_mingwthr_remove_key_dtor proc near ; CODE XREF:	___mingwthr_remove_key_dtor+6j

lpCriticalSection= dword ptr -1Ch
key		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	eax, ds:___mingwthr_cs_init
		mov	ebx, [esp+1Ch+key]
		test	eax, eax
		jnz	short loc_6421B008
key_0 =	ebx				; DWORD
		xor	eax, eax
		add	esp, 18h
		pop	key_0
		retn
; ---------------------------------------------------------------------------

loc_6421B008:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+Fj
key_0 =	ebx				; DWORD	; lpCriticalSection
		mov	[esp+1Ch+lpCriticalSection], offset ___mingwthr_cs
		call	ds:__imp__EnterCriticalSection@4
		mov	eax, ds:_key_dtor_list
cur_key	= eax				; volatile __mingwthr_key_t *
		sub	esp, 4
		test	cur_key, cur_key
		jz	short loc_6421B03F
		mov	edx, [cur_key]
		cmp	edx, key_0
		jnz	short loc_6421B036
		jmp	short loc_6421B076
; ---------------------------------------------------------------------------
		align 10h

loc_6421B030:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+4Dj
		mov	edx, [cur_key]
		cmp	edx, key_0
		jz	short loc_6421B056

loc_6421B036:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+35j
		mov	ecx, cur_key
		mov	cur_key, [cur_key+8]
		test	cur_key, cur_key
		jnz	short loc_6421B030

loc_6421B03F:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+2Fj
		mov	[esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4
		sub	esp, 4

loc_6421B04F:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+84j
		xor	eax, eax
		add	esp, 18h
		pop	key_0
		retn
; ---------------------------------------------------------------------------

loc_6421B056:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+44j
key_0 =	ebx				; DWORD
cur_key	= eax				; volatile __mingwthr_key_t *
		mov	edx, [cur_key+8]
		mov	[ecx+8], edx

loc_6421B05C:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+8Fj
		mov	[esp+1Ch+lpCriticalSection], cur_key ; void *
		call	_free
		mov	[esp+1Ch+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4
		sub	esp, 4
		jmp	short loc_6421B04F
; ---------------------------------------------------------------------------

loc_6421B076:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+37j
cur_key	= eax				; volatile __mingwthr_key_t *
		mov	edx, [cur_key+8]
		mov	ds:_key_dtor_list, edx
		jmp	short loc_6421B05C
____w64_mingwthr_remove_key_dtor endp

; ---------------------------------------------------------------------------
		jmp	short ____w64_mingwthr_add_key_dtor
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ___w64_mingwthr_add_key_dtor(DWORD key, void (*dtor)(void	*))
		public ____w64_mingwthr_add_key_dtor
____w64_mingwthr_add_key_dtor proc near	; CODE XREF: .text:6421B081j
					; ___mingwthr_key_dtor+1Aj

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
key		= dword	ptr  4
dtor		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jnz	short loc_6421B0A2

loc_6421B09D:				; CODE XREF: ____w64_mingwthr_add_key_dtor+2Fj
					; ____w64_mingwthr_add_key_dtor+6Ej
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6421B0A2:				; CODE XREF: ____w64_mingwthr_add_key_dtor+Bj
		mov	[esp+1Ch+var_18], 0Ch ;	size_t
		mov	[esp+1Ch+var_1C], 1 ; size_t
		call	_calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_6421B09D
		mov	eax, [esp+1Ch+key]
		mov	[esp+1Ch+var_1C], offset ___mingwthr_cs	; lpCriticalSection
		mov	[ebx], eax
		mov	eax, [esp+1Ch+dtor]
		mov	[ebx+4], eax
		call	ds:__imp__EnterCriticalSection@4
		mov	eax, ds:_key_dtor_list
		mov	ds:_key_dtor_list, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	[esp+1Ch+var_1C], offset ___mingwthr_cs	; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_6421B09D
____w64_mingwthr_add_key_dtor endp


; =============== S U B	R O U T	I N E =======================================


; WINBOOL __cdecl _ValidateImageBase(PBYTE pImageBase)
		public __ValidateImageBase
__ValidateImageBase proc near

pImageBase	= dword	ptr  4

		mov	eax, [esp+pImageBase]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_6421B110

loc_6421B10B:				; CODE XREF: __ValidateImageBase+19j
pNTHeader = eax				; PIMAGE_NT_HEADERS
		xor	pNTHeader, pNTHeader
		retn
; ---------------------------------------------------------------------------
pImageBase_0 = eax			; PBYTE
		align 10h

loc_6421B110:				; CODE XREF: __ValidateImageBase+9j
		add	pImageBase_0, [pImageBase_0+3Ch]
pNTHeader = eax				; PIMAGE_NT_HEADERS
		cmp	dword ptr [pNTHeader], 4550h
		jnz	short loc_6421B10B
		cmp	word ptr [pNTHeader+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
__ValidateImageBase endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PIMAGE_SECTION_HEADER	__cdecl	_FindPESection(PBYTE pImageBase, DWORD_PTR rva)
		public __FindPESection
__FindPESection	proc near

pImageBase	= dword	ptr  4
rva		= dword	ptr  8

iSection = edx				; unsigned int
		push	esi
		push	ebx
		mov	eax, [esp+8+pImageBase]
pNTHeader = eax				; PIMAGE_NT_HEADERS
		mov	ebx, [esp+8+rva]
		add	pNTHeader, [pNTHeader+3Ch]
		movzx	esi, word ptr [pNTHeader+6]
		movzx	iSection, word ptr [pNTHeader+14h]
		test	esi, esi
		jz	short loc_6421B16C
rva_0 =	ebx				; DWORD_PTR
		movzx	iSection, dx
		lea	pNTHeader, [pNTHeader+iSection+18h]
pSection = eax				; PIMAGE_SECTION_HEADER
		xor	iSection, iSection
		jmp	short loc_6421B157
; ---------------------------------------------------------------------------

loc_6421B154:				; CODE XREF: __FindPESection+3Aj
		add	pSection, 28h

loc_6421B157:				; CODE XREF: __FindPESection+22j
		mov	ecx, [pSection+0Ch]
		cmp	ecx, rva_0
		ja	short loc_6421B165
		add	ecx, [pSection+8]
		cmp	rva_0, ecx
		jb	short loc_6421B16E

loc_6421B165:				; CODE XREF: __FindPESection+2Cj
		add	iSection, 1
		cmp	iSection, esi
		jb	short loc_6421B154

loc_6421B16C:				; CODE XREF: __FindPESection+17j
		xor	pSection, pSection

loc_6421B16E:				; CODE XREF: __FindPESection+33j
		pop	rva_0
		pop	esi
		retn
__FindPESection	endp

; ---------------------------------------------------------------------------
		jmp	short ___mingw_GetSectionForAddress
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PIMAGE_SECTION_HEADER	__cdecl	__mingw_GetSectionForAddress(LPVOID p)
		public ___mingw_GetSectionForAddress
___mingw_GetSectionForAddress proc near	; CODE XREF: ___report_error+B3p
					; .text:6421B171j

p		= dword	ptr  4

		cmp	word ptr ds:64200000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6421B192

loc_6421B18D:				; CODE XREF: ___mingw_GetSectionForAddress+27j
					; ___mingw_GetSectionForAddress+2Fj ...
rva = ebx				; DWORD_PTR
		xor	eax, eax

loc_6421B18F:				; CODE XREF: ___mingw_GetSectionForAddress+61j
		pop	rva
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6421B192:				; CODE XREF: ___mingw_GetSectionForAddress+Bj
		mov	eax, ds:6420003Ch
		cmp	dword ptr [eax+64200000h], 4550h
		lea	edx, [eax+64200000h]
		jnz	short loc_6421B18D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6421B18D
		mov	ebx, [esp+8+p]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 64200000h
rva = ebx				; DWORD_PTR
		test	esi, esi
		jz	short loc_6421B18D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6421B1D5
; ---------------------------------------------------------------------------

loc_6421B1D2:				; CODE XREF: ___mingw_GetSectionForAddress+68j
		add	eax, 28h

loc_6421B1D5:				; CODE XREF: ___mingw_GetSectionForAddress+50j
		mov	ecx, [eax+0Ch]
		cmp	rva, ecx
		jb	short loc_6421B1E3
		add	ecx, [eax+8]
		cmp	rva, ecx
		jb	short loc_6421B18F

loc_6421B1E3:				; CODE XREF: ___mingw_GetSectionForAddress+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6421B1D2
		jmp	short loc_6421B18D
___mingw_GetSectionForAddress endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __mingw_GetSectionCount()
		public ___mingw_GetSectionCount
___mingw_GetSectionCount proc near	; CODE XREF: __pei386_runtime_relocator+2Ap
		cmp	word ptr ds:64200000h, 5A4Dh
		jz	short loc_6421B200

loc_6421B1FB:				; CODE XREF: ___mingw_GetSectionCount+25j
					; ___mingw_GetSectionCount+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6421B200:				; CODE XREF: ___mingw_GetSectionCount+9j
		mov	eax, ds:6420003Ch
		cmp	dword ptr [eax+64200000h], 4550h
		lea	edx, [eax+64200000h]
		jnz	short loc_6421B1FB
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6421B1FB
		movzx	eax, word ptr [edx+6]
		retn
___mingw_GetSectionCount endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PIMAGE_SECTION_HEADER	__cdecl	_FindPESectionExec(size_t eNo)
		public __FindPESectionExec
__FindPESectionExec proc near

eNo		= dword	ptr  4

		cmp	word ptr ds:64200000h, 5A4Dh
		push	ebx
		mov	edx, [esp+4+eNo]
		jz	short loc_6421B244

loc_6421B240:				; CODE XREF: __FindPESectionExec+29j
					; __FindPESectionExec+31j ...
eNo_0 =	edx				; size_t
		xor	eax, eax

loc_6421B242:				; CODE XREF: __FindPESectionExec+5Bj
					; __FindPESectionExec+69j
iSection = ecx				; unsigned int
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6421B244:				; CODE XREF: __FindPESectionExec+Ej
		mov	eax, ds:6420003Ch
		cmp	dword ptr [eax+64200000h], 4550h
		lea	ecx, [eax+64200000h]
		jnz	short loc_6421B240
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6421B240
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_6421B240
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
pSection = eax				; PIMAGE_SECTION_HEADER
		xor	ecx, ecx
iSection = ecx				; unsigned int
		jmp	short loc_6421B283
; ---------------------------------------------------------------------------
		align 10h

loc_6421B280:				; CODE XREF: __FindPESectionExec+65j
		add	pSection, 28h

loc_6421B283:				; CODE XREF: __FindPESectionExec+48j
		test	byte ptr [pSection+27h], 20h
		jz	short loc_6421B290
		test	eNo_0, eNo_0
		jz	short loc_6421B242
		sub	eNo_0, 1

loc_6421B290:				; CODE XREF: __FindPESectionExec+57j
		add	iSection, 1
		cmp	iSection, ebx
		jb	short loc_6421B280
		xor	pSection, pSection
		jmp	short loc_6421B242
__FindPESectionExec endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PBYTE	_GetPEImageBase()
		public __GetPEImageBase
__GetPEImageBase proc near		; CODE XREF: ___report_error+DDp
		cmp	word ptr ds:64200000h, 5A4Dh
		jz	short loc_6421B2B0

loc_6421B2AB:				; CODE XREF: __GetPEImageBase+25j
		xor	eax, eax

locret_6421B2AD:			; CODE XREF: __GetPEImageBase+32j
					; __GetPEImageBase+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6421B2B0:				; CODE XREF: __GetPEImageBase+9j
		mov	eax, ds:6420003Ch
		cmp	dword ptr [eax+64200000h], 4550h
		lea	edx, [eax+64200000h]
		jnz	short loc_6421B2AB
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 64200000h
pImageBase = eax			; PBYTE
		jz	short locret_6421B2AD
		xor	pImageBase, pImageBase
		jmp	short locret_6421B2AD
__GetPEImageBase endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; WINBOOL __cdecl _IsNonwritableInCurrentImage(PBYTE pTarget)
		public __IsNonwritableInCurrentImage
__IsNonwritableInCurrentImage proc near

pTarget		= dword	ptr  4

		cmp	word ptr ds:64200000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6421B2F2

loc_6421B2ED:				; CODE XREF: __IsNonwritableInCurrentImage+27j
					; __IsNonwritableInCurrentImage+2Fj ...
rvaTarget = ebx				; DWORD_PTR
pSection = eax				; PIMAGE_SECTION_HEADER
		xor	pSection, pSection
		pop	rvaTarget
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6421B2F2:				; CODE XREF: __IsNonwritableInCurrentImage+Bj
		mov	eax, ds:6420003Ch
		cmp	dword ptr [eax+64200000h], 4550h
		lea	edx, [eax+64200000h]
		jnz	short loc_6421B2ED
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6421B2ED
		mov	ebx, [esp+8+pTarget]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 64200000h
rvaTarget = ebx				; DWORD_PTR
		test	esi, esi
		jz	short loc_6421B2ED
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
pSection = eax				; PIMAGE_SECTION_HEADER
		xor	edx, edx
		jmp	short loc_6421B335
; ---------------------------------------------------------------------------

loc_6421B332:				; CODE XREF: __IsNonwritableInCurrentImage+68j
		add	pSection, 28h

loc_6421B335:				; CODE XREF: __IsNonwritableInCurrentImage+50j
		mov	ecx, [pSection+0Ch]
		cmp	rvaTarget, ecx
		jb	short loc_6421B343
		add	ecx, [pSection+8]
		cmp	rvaTarget, ecx
		jb	short loc_6421B350

loc_6421B343:				; CODE XREF: __IsNonwritableInCurrentImage+5Aj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_6421B332
		jmp	short loc_6421B2ED
; ---------------------------------------------------------------------------
		align 10h

loc_6421B350:				; CODE XREF: __IsNonwritableInCurrentImage+61j
		test	pSection, pSection
		jz	short loc_6421B2ED
		mov	pSection, [pSection+24h]
		pop	rvaTarget
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
__IsNonwritableInCurrentImage endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; const	char *__cdecl __mingw_enum_import_library_names(int i)
		public ___mingw_enum_import_library_names
___mingw_enum_import_library_names proc	near ; CODE XREF: ___mingw_get_msvcrt_handle+58p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
i		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:64200000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+i]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_6421B390

loc_6421B37D:				; CODE XREF: ___mingw_enum_import_library_names+46j
					; ___mingw_enum_import_library_names+4Ej ...
i_0 = eax				; int
pSection = edx				; PIMAGE_SECTION_HEADER
importsStartRVA	= esi			; DWORD
		xor	i_0, i_0

loc_6421B37F:				; CODE XREF: ___mingw_enum_import_library_names+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	importsStartRVA, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
i_0 = eax				; int
		align 10h

loc_6421B390:				; CODE XREF: ___mingw_enum_import_library_names+1Bj
		mov	edx, ds:6420003Ch
		cmp	dword ptr [edx+64200000h], 4550h
		lea	ecx, [edx+64200000h]
		jnz	short loc_6421B37D
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6421B37D
		mov	esi, [ecx+80h]
importsStartRVA	= esi			; DWORD
		test	importsStartRVA, importsStartRVA
		jz	short loc_6421B37D
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_6421B37D
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
pSection = edx				; PIMAGE_SECTION_HEADER
		xor	ecx, ecx
		jmp	short loc_6421B3D4
; ---------------------------------------------------------------------------

loc_6421B3D1:				; CODE XREF: ___mingw_enum_import_library_names+87j
		add	pSection, 28h

loc_6421B3D4:				; CODE XREF: ___mingw_enum_import_library_names+6Fj
		mov	ebx, [pSection+0Ch]
		cmp	importsStartRVA, ebx
		jb	short loc_6421B3E2
		add	ebx, [pSection+8]
		cmp	importsStartRVA, ebx
		jb	short loc_6421B3EB

loc_6421B3E2:				; CODE XREF: ___mingw_enum_import_library_names+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_6421B3D1
		jmp	short loc_6421B37D
; ---------------------------------------------------------------------------

loc_6421B3EB:				; CODE XREF: ___mingw_enum_import_library_names+80j
		test	pSection, pSection
		lea	importsStartRVA, [importsStartRVA+0]
		jz	short loc_6421B37D
		add	importsStartRVA, 64200000h
importDesc = esi			; PIMAGE_IMPORT_DESCRIPTOR
		jmp	short loc_6421B40A
; ---------------------------------------------------------------------------
		align 10h

loc_6421B400:				; CODE XREF: ___mingw_enum_import_library_names+AFj
					; ___mingw_enum_import_library_names+B6j
		test	i_0, i_0
		jle	short loc_6421B420
		sub	i_0, 1
		add	importDesc, 14h

loc_6421B40A:				; CODE XREF: ___mingw_enum_import_library_names+98j
		mov	ecx, [importDesc+4]
		test	ecx, ecx
		jnz	short loc_6421B400
		mov	pSection, [importDesc+0Ch]
		test	edx, edx
		jnz	short loc_6421B400
		jmp	loc_6421B37D
; ---------------------------------------------------------------------------
pSection = edx				; PIMAGE_SECTION_HEADER
		align 10h

loc_6421B420:				; CODE XREF: ___mingw_enum_import_library_names+A2j
		mov	i_0, 64200000h
pImageBase = eax			; PBYTE
		add	pImageBase, [importDesc+0Ch]
		jmp	loc_6421B37F
___mingw_enum_import_library_names endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; HMODULE __mingw_get_msvcrt_handle()
		public ___mingw_get_msvcrt_handle
___mingw_get_msvcrt_handle proc	near

lpModuleName	= dword	ptr -1Ch

		push	ebx
		xor	edx, edx
i = edx					; int
		sub	esp, 18h
		mov	eax, dword ptr ds:__RUNTIME_PSEUDO_RELOC_LIST_END__+4
		test	eax, eax
		jz	short loc_6421B482

loc_6421B43F:				; CODE XREF: ___mingw_get_msvcrt_handle+9Fj
					; ___mingw_get_msvcrt_handle+BAj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6421B444:				; CODE XREF: ___mingw_get_msvcrt_handle+83j
					; ___mingw_get_msvcrt_handle+88j
lib_name = eax				; const	char *
i = ebx					; int
		movzx	edx, byte ptr [lib_name+3]
		cmp	dl, 43h
		jz	short loc_6421B452
		cmp	dl, 63h
		jnz	short loc_6421B480

loc_6421B452:				; CODE XREF: ___mingw_get_msvcrt_handle+1Bj
		movzx	edx, byte ptr [lib_name+4]
		cmp	dl, 52h
		jz	short loc_6421B462
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_6421B480

loc_6421B462:				; CODE XREF: ___mingw_get_msvcrt_handle+29j
		movzx	edx, byte ptr [lib_name+5]
		cmp	dl, 54h
		jz	short loc_6421B4BE
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_6421B4BE
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_6421B4BE
		lea	esi, [esi+0]

loc_6421B480:				; CODE XREF: ___mingw_get_msvcrt_handle+20j
					; ___mingw_get_msvcrt_handle+30j ...
		mov	edx, i

loc_6421B482:				; CODE XREF: ___mingw_get_msvcrt_handle+Dj
					; ___mingw_get_msvcrt_handle+8Cj
i = edx					; int
		lea	ebx, [i+1]
i = ebx					; int
		mov	[esp+1Ch+lpModuleName],	edx ; i
		call	___mingw_enum_import_library_names
		test	eax, eax
lib_name = eax				; const	char *
		jz	short loc_6421B4D5
		movzx	edx, byte ptr [lib_name]
		cmp	dl, 4Dh
		jz	short loc_6421B49E
		cmp	dl, 6Dh
		jnz	short loc_6421B480

loc_6421B49E:				; CODE XREF: ___mingw_get_msvcrt_handle+67j
		movzx	edx, byte ptr [lib_name+1]
		cmp	dl, 53h
		jz	short loc_6421B4AC
		cmp	dl, 73h
		jnz	short loc_6421B480

loc_6421B4AC:				; CODE XREF: ___mingw_get_msvcrt_handle+75j
		movzx	edx, byte ptr [lib_name+2]
		cmp	dl, 56h
		jz	short loc_6421B444
		cmp	dl, 76h
		jz	short loc_6421B444
		mov	edx, i
		jmp	short loc_6421B482
; ---------------------------------------------------------------------------

loc_6421B4BE:				; CODE XREF: ___mingw_get_msvcrt_handle+39j
					; ___mingw_get_msvcrt_handle+40j ...
		mov	[esp+1Ch+lpModuleName],	lib_name ; lpModuleName
		call	ds:__imp__GetModuleHandleA@4
		test	eax, eax
		push	ebx
		mov	dword ptr ds:__RUNTIME_PSEUDO_RELOC_LIST_END__+4, eax
		jnz	loc_6421B43F

loc_6421B4D5:				; CODE XREF: ___mingw_get_msvcrt_handle+5Fj
lib_name = eax				; const	char * ; "msvcrt.dll"
i = ebx					; int
		mov	[esp+1Ch+lpModuleName],	offset LibFileName
		call	ds:__imp__LoadLibraryW@4
		sub	esp, 4
		mov	dword ptr ds:__RUNTIME_PSEUDO_RELOC_LIST_END__+4, eax
		jmp	loc_6421B43F
___mingw_get_msvcrt_handle endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PIMAGE_SECTION_HEADER	__cdecl	_FindPESectionByName(const char	*pName)
		public __FindPESectionByName
__FindPESectionByName proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
pName		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+pName]
		mov	[esp+2Ch+var_10], ebx
		mov	[esp+2Ch+var_8], edi
		mov	[esp+2Ch+var_4], ebp
		mov	[esp+2Ch+var_2C], esi ;	char *
		call	_strlen
		cmp	eax, 8
		jbe	short loc_6421B530

loc_6421B514:				; CODE XREF: __FindPESectionByName+49j
					; __FindPESectionByName+60j ...
pName_0	= esi				; const	char *
pSection = ebx				; PIMAGE_SECTION_HEADER
iSection = edi				; unsigned int
		xor	pSection, pSection

loc_6421B516:				; CODE XREF: __FindPESectionByName+9Aj
		mov	eax, pSection
		mov	pName_0, [esp+2Ch+var_C]
		mov	pSection, [esp+2Ch+var_10]
		mov	iSection, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
pName_0	= esi				; const	char *
		align 10h

loc_6421B530:				; CODE XREF: __FindPESectionByName+22j
		cmp	word ptr ds:64200000h, 5A4Dh
		jnz	short loc_6421B514
		mov	eax, ds:6420003Ch
		cmp	dword ptr [eax+64200000h], 4550h
		lea	edx, [eax+64200000h]
		jnz	short loc_6421B514
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6421B514
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_6421B514
		movzx	eax, ax
		xor	edi, edi
iSection = edi				; unsigned int
		lea	ebx, [edx+eax+18h]
pSection = ebx				; PIMAGE_SECTION_HEADER
		jmp	short loc_6421B574
; ---------------------------------------------------------------------------

loc_6421B571:				; CODE XREF: __FindPESectionByName+A1j
		add	pSection, 28h

loc_6421B574:				; CODE XREF: __FindPESectionByName+7Fj
		mov	[esp+2Ch+var_24], 8 ; size_t
		mov	[esp+2Ch+var_28], pName_0 ; char *
		mov	[esp+2Ch+var_2C], pSection ; char *
		call	_strncmp
		test	eax, eax
		jz	short loc_6421B516
		add	iSection, 1
		cmp	iSection, ebp
		jb	short loc_6421B571
		jmp	loc_6421B514
__FindPESectionByName endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void *__usercall _alloca@<eax>(unsigned int size@<eax>)
		public __alloca
__alloca	proc near		; CODE XREF: __pei386_runtime_relocator+3Cp

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_6421B5C1

loc_6421B5AC:				; CODE XREF: __alloca+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_6421B5AC

loc_6421B5C1:				; CODE XREF: __alloca+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
__alloca	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _InterlockedCompareExchange(volatile int *Destination, int ExChange, int Comperand)
		public __InterlockedCompareExchange
__InterlockedCompareExchange proc near

Destination	= dword	ptr  4
ExChange	= dword	ptr  8
Comperand	= dword	ptr  0Ch

		mov	eax, [esp+Comperand]
prev = eax				; int
		mov	edx, [esp+ExChange]
		mov	ecx, [esp+Destination]
		lock cmpxchg [ecx], edx
		retn
__InterlockedCompareExchange endp

; ---------------------------------------------------------------------------
		jmp	short _InterlockedCompareExchange@12
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	InterlockedCompareExchange(volatile int	*Destination, int ExChange, int	Comperand)
		public _InterlockedCompareExchange@12
_InterlockedCompareExchange@12 proc near ; CODE	XREF: __CRT_INIT@12+53p
					; __CRT_INIT@12+C8p ...

Destination	= dword	ptr  4
ExChange	= dword	ptr  8
Comperand	= dword	ptr  0Ch

		mov	eax, [esp+Comperand]
		mov	edx, [esp+ExChange]
		mov	ecx, [esp+Destination]
		lock cmpxchg [ecx], edx
		retn	0Ch
_InterlockedCompareExchange@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _InterlockedExchange(volatile int	*Target, int Value)
		public __InterlockedExchange
__InterlockedExchange proc near

Target		= dword	ptr  4
Value		= dword	ptr  8

		mov	eax, [esp+Value]
		mov	edx, [esp+Target]
		lock xchg eax, [edx]
		retn
__InterlockedExchange endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	InterlockedExchange(volatile int *Target, int Value)
		public _InterlockedExchange@8
_InterlockedExchange@8 proc near	; CODE XREF: __CRT_INIT@12+1A2p
					; __CRT_INIT@12+211p

Target		= dword	ptr  4
Value		= dword	ptr  8

		mov	eax, [esp+Value]
		mov	edx, [esp+Target]
		lock xchg eax, [edx]
		retn	8
_InterlockedExchange@8 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; __time32_t __cdecl _time32(__time32_t	*_Time)
		public __time32
__time32	proc near		; CODE XREF: _startParsing+3Ap

_Time		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, ds:__imp__time
		add	esp, 0Ch
		jmp	eax
__time32	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl __mingwthr_key_dtor(DWORD	key, void (*dtor)(void *))
		public ___mingwthr_key_dtor
___mingwthr_key_dtor proc near

key		= dword	ptr  4
dtor		= dword	ptr  8

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+dtor]
		mov	edx, [esp+0Ch+key]
		test	eax, eax
		jz	short loc_6421B670
key_0 =	edx				; DWORD
dtor_0 = eax				; void (*)(void	*)
		mov	[esp+0Ch+dtor],	dtor_0
		mov	[esp+0Ch+key], key_0
		add	esp, 0Ch
		jmp	____w64_mingwthr_add_key_dtor
; ---------------------------------------------------------------------------
key_0 =	edx				; DWORD
dtor_0 = eax				; void (*)(void	*)
		align 10h

loc_6421B670:				; CODE XREF: ___mingwthr_key_dtor+Dj
		add	esp, 0Ch
		retn
___mingwthr_key_dtor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl __mingwthr_remove_key_dtor(DWORD key)
		public ___mingwthr_remove_key_dtor
___mingwthr_remove_key_dtor proc near

key		= dword	ptr  4

		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	____w64_mingwthr_remove_key_dtor
___mingwthr_remove_key_dtor endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _memmove]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _memset]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _srand]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _rand]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _realloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ___dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _strlen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strncmp]
		align 4
_text_18	dd 2 dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_register_frame_ctor proc near		; DATA XREF: .text:___CTOR_LIST__o
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	___gcc_register_frame
		mov	dword ptr [esp], offset	___gcc_deregister_frame	; func
		call	_atexit
		leave
		retn
_register_frame_ctor endp

; ---------------------------------------------------------------------------
		align 10h
		public ___CTOR_LIST__
; func_ptr __CTOR_LIST__[2]
___CTOR_LIST__	dd 0FFFFFFFFh, offset _register_frame_ctor
					; DATA XREF: ___do_global_ctors+5r
					; ___do_global_ctors+14o ...
		dd 0
		public __DTOR_LIST__
; func_ptr _DTOR_LIST__[2]
__DTOR_LIST__	dd 0FFFFFFFFh, 0	; DATA XREF: .data:_p_55658o
		align 100h
		dd 200h	dup(?)
_text		ends

; Section 2. (virtual address 0001C000)
; Virtual size			: 0000001C (	 28.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 0001AE00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 6421C000h
		public ___native_dllmain_reason
; volatile unsigned int	__native_dllmain_reason
___native_dllmain_reason dd 0FFFFFFFFh	; DATA XREF: ___DllMainCRTStartup+1Bw
					; ___DllMainCRTStartup+61w
		public ___native_vcclrit_reason
; volatile unsigned int	__native_vcclrit_reason
___native_vcclrit_reason dd 0FFFFFFFFh
_p_55658	dd offset __DTOR_LIST__+4 ; DATA XREF: __pei386_runtime_relocator+283r
					; __pei386_runtime_relocator+292r ...
		public __CRT_MT
; int _CRT_MT
__CRT_MT	dd 2			; DATA XREF: ___dyn_tls_init@12+4r
					; ___dyn_tls_init@12+11w
		public ___security_cookie
; UINT_PTR __security_cookie
___security_cookie dd 0BB40E64Eh	; DATA XREF: ___report_gsfailure+3Fr
					; ___security_init_cookie+3r ...
		public ___security_cookie_complement
; UINT_PTR __security_cookie_complement
___security_cookie_complement dd 44BF19B1h ; DATA XREF:	___report_gsfailure+47r
					; ___security_init_cookie+21w ...
___JCR_END__	dd 0			; DATA XREF: ___gcc_register_frame+6r
					; ___gcc_register_frame+42o
		public __data_end__
__data_end__	dd 79h dup(0)
		align 1000h
_data		ends

; Section 3. (virtual address 0001D000)
; Virtual size			: 00007914 (  30996.)
; Section size in file		: 00007A00 (  31232.)
; Offset to raw	data for section: 0001B000
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6421D000h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: ___gcc_register_frame+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: ___gcc_register_frame+2Ao
		align 20h
aExpat_2_1_0	db 'expat_2.1.0',0      ; DATA XREF: _XML_ExpatVersiono
off_6421D04C	dd offset loc_64201DA2	; DATA XREF: _doCdataSection:loc_64201D60r
		dd offset loc_64201D4C	; jump table for switch	statement
		dd offset loc_64201DC2
		dd offset loc_64201DA2
		dd offset loc_64201DD0
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201DE3
		dd offset loc_64201E92
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D4C
		dd offset loc_64201D67
off_6421D100	dd offset loc_64205DD5	; DATA XREF: _appendAttributeValue:loc_64205D30r
		dd offset loc_64205D37	; jump table for switch	statement
		dd offset loc_64205D11
		dd offset loc_64205EC1
		dd offset loc_64205EE0
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D75
		dd offset loc_64205D45
		dd offset loc_64205D11
		dd offset loc_64205E82
		dd offset loc_64205DE0
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D11
		dd offset loc_64205D45
off_6421D1B0	dd offset loc_64207100	; DATA XREF: _storeEntityValue:loc_642070C0r
		dd offset loc_642070C7	; jump table for switch	statement
		dd offset loc_6420709D
		dd offset loc_64207190
		dd offset loc_64207174
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_64207104
		dd offset loc_642070D2
		dd offset loc_6420709D
		dd offset loc_64207104
		dd offset loc_64207233
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_6420709D
		dd offset loc_642071B0
off_6421D234	dd offset loc_642088C4	; DATA XREF: _epilogProcessor:loc_64208874r
		dd offset loc_64208854	; jump table for switch	statement
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208970
		dd offset loc_64208854
		dd offset loc_64208980
		dd offset loc_642089A0
		dd offset loc_642089C0
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_64208854
		dd offset loc_642089D0
		dd offset loc_64208854
		dd offset loc_642089F1
		dd offset loc_64208854
		dd offset loc_64208880
off_6421D2B0	dd offset loc_64208BA7	; DATA XREF: _doContent:loc_64208B60r
		dd offset loc_64208C43	; jump table for switch	statement
		dd offset loc_64209216
		dd offset loc_64209290
		dd offset loc_64208E72
		dd offset loc_64208EA0
		dd offset loc_64208EB7
		dd offset loc_64208EB7
		dd offset loc_64209060
		dd offset loc_64209060
		dd offset loc_64208C74
		dd offset loc_64208DA0
		dd offset loc_64208E38
		dd offset loc_64209375
		dd offset loc_642092B7
		dd offset loc_64209325
		dd offset loc_642093E0
		dd offset loc_64209407
		dd offset loc_64208B77
off_6421D2FC	dd offset loc_6420ACF6,	offset loc_6420A443, offset loc_6420A455
					; DATA XREF: _doProlog:loc_6420A1A0r
		dd offset loc_6420A4D8,	offset loc_6420A5B0, offset loc_6420A47D ; jump	table for switch statement
		dd offset loc_6420A713,	offset loc_6420A5C5, offset loc_6420A677
		dd offset loc_6420A821,	offset loc_6420AAB0, offset loc_6420AA60
		dd offset loc_6420AA88,	offset loc_6420AD12, offset loc_6420ADE0
		dd offset loc_6420A3F8,	offset loc_6420B1D2, offset loc_6420AADC
		dd offset loc_6420AC77,	offset loc_6420AB84, offset loc_6420ABD2
		dd offset loc_6420A928,	offset loc_6420A9D4, offset loc_6420A299
		dd offset loc_6420AA4A,	offset loc_6420A903, offset loc_6420A919
		dd offset loc_6420AB75,	offset loc_6420AC87, offset loc_6420B315
		dd offset loc_6420B325,	offset loc_6420B334, offset loc_6420B343
		dd offset loc_6420B343,	offset loc_6420A2D4, offset loc_6420B0E5
		dd offset loc_6420ADEA,	offset loc_6420ADEA, offset loc_6420AEE0
		dd offset loc_6420AEE0,	offset loc_6420A3E5, offset loc_6420B090
		dd offset loc_6420B3E1,	offset loc_6420B3E1, offset loc_6420B047
		dd offset loc_6420B50A,	offset loc_6420B3D0, offset loc_6420B587
		dd offset loc_6420B3D7,	offset loc_6420B110, offset loc_6420B262
		dd offset loc_6420B2D0,	offset loc_6420B2FE, offset loc_6420B305
		dd offset loc_6420A343,	offset loc_6420B258, offset loc_6420B1B0
		dd offset loc_6420B18C,	offset loc_6420B591, offset loc_6420B473
		dd offset loc_6420AC96,	offset loc_6420AC96
off_6421D3F4	dd offset loc_6420A288	; DATA XREF: _doProlog:loc_6420A1A7r
		dd offset loc_6420A182	; jump table for switch	statement
		dd offset loc_6420A182
		dd offset loc_6420A182
		dd offset loc_6420A182
		dd offset loc_6420A182
		dd offset loc_6420A182
		dd offset loc_6420A182
		dd offset loc_6420A182
		dd offset loc_6420A182
		dd offset loc_6420A182
		dd offset loc_6420A210
		dd offset loc_6420A182
		dd offset loc_6420A1E0
		dd offset loc_6420A1F0
		dd offset loc_6420A1F7
off_6421D434	dd offset loc_6420B809	; DATA XREF: _doProlog:loc_6420B70Ar
		dd offset loc_6420B4F6	; jump table for switch	statement
		dd offset loc_6420B836
		dd offset loc_6420B809
		dd offset loc_6420B822
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B4F6
		dd offset loc_6420B711
off_6421D4F0	dd offset loc_6420C420	; DATA XREF: _ignoreSectionProcessor:loc_6420C2A4r
		dd offset loc_6420C27F	; jump table for switch	statement
		dd offset loc_6420C400
		dd offset loc_6420C420
		dd offset loc_6420C3F0
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C27F
		dd offset loc_6420C2B0
aSizeofXml_char	db 'sizeof(XML_Char)',0 ; DATA XREF: .rdata:6421D604o
aSizeofXml_lcha	db 'sizeof(XML_LChar)',0 ; DATA XREF: .rdata:6421D610o
aXml_dtd	db 'XML_DTD',0          ; DATA XREF: .rdata:6421D61Co
aXml_context_by	db 'XML_CONTEXT_BYTES',0 ; DATA XREF: .rdata:6421D628o
aXml_ns		db 'XML_NS',0           ; DATA XREF: .rdata:6421D634o
		align 20h
_features_4579	dd 6			; DATA XREF: _XML_GetFeatureListo
		dd offset aSizeofXml_char ; "sizeof(XML_Char)"
		dd 1, 7
		dd offset aSizeofXml_lcha ; "sizeof(XML_LChar)"
		dd 1, 3
		dd offset aXml_dtd	; "XML_DTD"
		dd 0
		dd 4
		dd offset aXml_context_by ; "XML_CONTEXT_BYTES"
		dd 400h, 8
		dd offset aXml_ns	; "XML_NS"
		dd 4 dup(0)
aOutOfMemory	db 'out of memory',0    ; DATA XREF: .rdata:6421DB64o
aSyntaxError	db 'syntax error',0     ; DATA XREF: .rdata:6421DB68o
aNoElementFound	db 'no element found',0 ; DATA XREF: .rdata:6421DB6Co
aNotWellFormedI	db 'not well-formed (invalid token)',0 ; DATA XREF: .rdata:6421DB70o
aUnclosedToken	db 'unclosed token',0   ; DATA XREF: .rdata:6421DB74o
aPartialCharact	db 'partial character',0 ; DATA XREF: .rdata:6421DB78o
aMismatchedTag	db 'mismatched tag',0   ; DATA XREF: .rdata:6421DB7Co
aDuplicateAttri	db 'duplicate attribute',0 ; DATA XREF: .rdata:6421DB80o
aJunkAfterDocum	db 'junk after document element',0 ; DATA XREF: .rdata:6421DB84o
aIllegalParamet	db 'illegal parameter entity reference',0 ; DATA XREF: .rdata:6421DB88o
aUndefinedEntit	db 'undefined entity',0 ; DATA XREF: .rdata:6421DB8Co
aRecursiveEntit	db 'recursive entity reference',0 ; DATA XREF: .rdata:6421DB90o
aAsynchronousEn	db 'asynchronous entity',0 ; DATA XREF: .rdata:6421DB94o
		align 4
aReferenceToInv	db 'reference to invalid character number',0 ; DATA XREF: .rdata:6421DB98o
aReferenceToBin	db 'reference to binary entity',0 ; DATA XREF: .rdata:6421DB9Co
		align 4
aReferenceToExt	db 'reference to external entity in attribute',0
					; DATA XREF: .rdata:6421DBA0o
		align 4
aXmlOrTextDecla	db 'XML or text declaration not at start of entity',0
					; DATA XREF: .rdata:6421DBA4o
aUnknownEncodin	db 'unknown encoding',0 ; DATA XREF: .rdata:6421DBA8o
aEncodingSpecif	db 'encoding specified in XML declaration is incorrect',0
					; DATA XREF: .rdata:6421DBACo
aUnclosedCdataS	db 'unclosed CDATA section',0 ; DATA XREF: .rdata:6421DBB0o
		align 4
aErrorInProcess	db 'error in processing external entity reference',0
					; DATA XREF: .rdata:6421DBB4o
aDocumentIsNotS	db 'document is not standalone',0 ; DATA XREF: .rdata:6421DBB8o
		align 10h
aUnexpectedPars	db 'unexpected parser state - please send a bug report',0
					; DATA XREF: .rdata:6421DBBCo
		align 4
aEntityDeclared	db 'entity declared in parameter entity',0 ; DATA XREF: .rdata:6421DBC0o
aRequestedFeatu	db 'requested feature requires XML_DTD support in Expat',0
					; DATA XREF: .rdata:6421DBC4o
aCannotChangeSe	db 'cannot change setting once parsing has begun',0
					; DATA XREF: .rdata:6421DBC8o
aUnboundPrefix	db 'unbound prefix',0   ; DATA XREF: .rdata:6421DBCCo
aMustNotUndecla	db 'must not undeclare prefix',0 ; DATA XREF: .rdata:6421DBD0o
		align 4
aIncompleteMark	db 'incomplete markup in parameter entity',0 ; DATA XREF: .rdata:6421DBD4o
		align 4
aXmlDeclaration	db 'XML declaration not well-formed',0 ; DATA XREF: .rdata:6421DBD8o
aTextDeclaratio	db 'text declaration not well-formed',0 ; DATA XREF: .rdata:6421DBDCo
		align 10h
aIllegalCharact	db 'illegal character(s) in public id',0 ; DATA XREF: .rdata:6421DBE0o
aParserSuspende	db 'parser suspended',0 ; DATA XREF: .rdata:6421DBE4o
aParserNotSuspe	db 'parser not suspended',0 ; DATA XREF: .rdata:6421DBE8o
aParsingAborted	db 'parsing aborted',0  ; DATA XREF: .rdata:6421DBECo
aParsingFinishe	db 'parsing finished',0 ; DATA XREF: .rdata:6421DBF0o
		align 4
aCannotSuspendI	db 'cannot suspend in external parameter entity',0
					; DATA XREF: .rdata:6421DBF4o
aReservedPrefix	db 'reserved prefix (xml) must not be undeclared or bound to another '
					; DATA XREF: .rdata:6421DBF8o
		db 'namespace name',0
aReservedPref_0	db 'reserved prefix (xmlns) must not be declared or undeclared',0
					; DATA XREF: .rdata:6421DBFCo
		align 4
aPrefixMustNotB	db 'prefix must not be bound to one of the reserved namespace names',0
					; DATA XREF: .rdata:6421DC00o
		align 10h
_message_4561	dd 0			; DATA XREF: _XML_ErrorString+Er
		dd offset aOutOfMemory	; "out of memory"
		dd offset aSyntaxError	; "syntax error"
		dd offset aNoElementFound ; "no	element	found"
		dd offset aNotWellFormedI ; "not well-formed (invalid token)"
		dd offset aUnclosedToken ; "unclosed token"
		dd offset aPartialCharact ; "partial character"
		dd offset aMismatchedTag ; "mismatched tag"
		dd offset aDuplicateAttri ; "duplicate attribute"
		dd offset aJunkAfterDocum ; "junk after	document element"
		dd offset aIllegalParamet ; "illegal parameter entity reference"
		dd offset aUndefinedEntit ; "undefined entity"
		dd offset aRecursiveEntit ; "recursive entity reference"
		dd offset aAsynchronousEn ; "asynchronous entity"
		dd offset aReferenceToInv ; "reference to invalid character number"
		dd offset aReferenceToBin ; "reference to binary entity"
		dd offset aReferenceToExt ; "reference to external entity in attribu"...
		dd offset aXmlOrTextDecla ; "XML or text declaration not at start of"...
		dd offset aUnknownEncodin ; "unknown encoding"
		dd offset aEncodingSpecif ; "encoding specified	in XML declaration i"...
		dd offset aUnclosedCdataS ; "unclosed CDATA section"
		dd offset aErrorInProcess ; "error in processing external entity ref"...
		dd offset aDocumentIsNotS ; "document is not standalone"
		dd offset aUnexpectedPars ; "unexpected	parser state - please send a"...
		dd offset aEntityDeclared ; "entity declared in	parameter entity"
		dd offset aRequestedFeatu ; "requested feature requires	XML_DTD	supp"...
		dd offset aCannotChangeSe ; "cannot change setting once	parsing	has "...
		dd offset aUnboundPrefix ; "unbound prefix"
		dd offset aMustNotUndecla ; "must not undeclare	prefix"
		dd offset aIncompleteMark ; "incomplete	markup in parameter entity"
		dd offset aXmlDeclaration ; "XML declaration not well-formed"
		dd offset aTextDeclaratio ; "text declaration not well-formed"
		dd offset aIllegalCharact ; "illegal character(s) in public id"
		dd offset aParserSuspende ; "parser suspended"
		dd offset aParserNotSuspe ; "parser not	suspended"
		dd offset aParsingAborted ; "parsing aborted"
		dd offset aParsingFinishe ; "parsing finished"
		dd offset aCannotSuspendI ; "cannot suspend in external	parameter en"...
		dd offset aReservedPrefix ; "reserved prefix (xml) must	not be undec"...
		dd offset aReservedPref_0 ; "reserved prefix (xmlns) must not be dec"...
		dd offset aPrefixMustNotB ; "prefix must not be	bound to one of	the "...
		align 20h
_implicitContext db 'xml=http://www.w3.org/XML/1998/namespace',0
					; DATA XREF: _startParsing+29o
_xmlnsNamespace_5554 db	68h		; DATA XREF: _addBinding+1ABr
aTtpWww_w3_org2	db 'ttp://www.w3.org/2000/xmlns/',0
		align 20h
_xmlNamespace_5552 db 68h		; DATA XREF: _addBinding+18Br
aTtpWww_w3_orgX	db 'ttp://www.w3.org/XML/1998/namespace',0
_enumValueStart_6171 db	'(',0           ; DATA XREF: _doProlog+1E85o
_enumValueSep_6170 db '|',0             ; DATA XREF: _doProlog+13D8o
_notationPrefix_6169 db	'NOTATION(',0   ; DATA XREF: _doProlog+1E7Ao
_atypeNMTOKENS_6168 db 'NMTOKENS',0     ; DATA XREF: _doProlog:loc_6420B334o
_atypeNMTOKEN_6167 db 'NMTOKEN',0       ; DATA XREF: _doProlog:loc_6420B325o
_atypeENTITIES_6166 db 'ENTITIES',0     ; DATA XREF: _doProlog:loc_6420B315o
_atypeENTITY_6165 db 'ENTITY',0         ; DATA XREF: _doProlog:loc_6420AC87o
_atypeIDREFS_6164 db 'IDREFS',0         ; DATA XREF: _doProlog:loc_6420AB75o
_atypeIDREF_6163 db 'IDREF',0           ; DATA XREF: _doProlog:loc_6420A919o
_atypeID_6162	db 'ID',0               ; DATA XREF: _doProlog+97Ao
_atypeCDATA_6161 db 'CDATA',0           ; DATA XREF: _doProlog+AC1o
_externalSubsetName_6160 db '#',0       ; DATA XREF: _doProlog+587o
					; _doProlog+643o ...
		align 20h
_CSWTCH_279	dd 11h			; DATA XREF: _doProlog+D76r
		dd 0Fh dup(2), 0Ah, 7 dup(0)
off_6421DD60	dd offset loc_6420D045	; DATA XREF: _prolog0:loc_6420CFE6r
		dd offset loc_6420D055	; jump table for switch	statement
		dd offset loc_6420D065
		dd offset loc_6420CFF6
		dd offset loc_6420CFF0
		dd offset loc_6420D000
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420CFC8
		dd offset loc_6420D035
off_6421DDAC	dd offset loc_6420D0C0	; DATA XREF: _prolog1:loc_6420D0B6r
		dd offset loc_6420D098	; jump table for switch	statement
		dd offset loc_6420D0D0
		dd offset loc_6420D0F0
		dd offset loc_6420D0F0
		dd offset loc_6420D0F7
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D098
		dd offset loc_6420D0E0
off_6421DDF8	dd offset loc_6420D4A2	; DATA XREF: _internalSubset:loc_6420D460r
		dd offset loc_6420D43F	; jump table for switch	statement
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D490
		dd offset loc_6420D43F
		dd offset loc_6420D497
		dd offset loc_6420D43F
		dd offset loc_6420D4A2
		dd offset loc_6420D4A6
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D43F
		dd offset loc_6420D467
		dd offset loc_6420D43F
		dd offset loc_6420D486
off_6421DE7C	dd offset loc_6420D5C8	; DATA XREF: _externalSubset1:loc_6420D5C1r
		dd offset loc_6420D59A	; jump table for switch	statement
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D5CF
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D5E0
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D59A
		dd offset loc_6420D611
		dd offset loc_6420D600
off_6421DF18	dd offset loc_6420E430	; DATA XREF: _element2:loc_6420E426r
		dd offset loc_6420E408	; jump table for switch	statement
		dd offset loc_6420E408
		dd offset loc_6420E440
		dd offset loc_6420E408
		dd offset loc_6420E450
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E482
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E4A0
		dd offset loc_6420E4B0
		dd offset loc_6420E4C0
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E408
		dd offset loc_6420E440
off_6421DF84	dd offset loc_6420E680	; DATA XREF: _element6:loc_6420E662r
		dd offset loc_6420E650	; jump table for switch	statement
		dd offset loc_6420E650
		dd offset loc_6420E686
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E692
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E6A0
		dd offset loc_6420E6B0
		dd offset loc_6420E670
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E650
		dd offset loc_6420E686
off_6421DFF0	dd offset loc_6420E710	; DATA XREF: _element7:loc_6420E6F6r
		dd offset loc_6420E6E0	; jump table for switch	statement
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E716
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E722
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E6E0
		dd offset loc_6420E742
		dd offset loc_6420E756
		dd offset loc_6420E770
		dd offset loc_6420E700
off_6421E050	dd offset loc_6420EA07	; DATA XREF: _externalSubset0:loc_6420EA00r
		dd offset loc_6420E9BA	; jump table for switch	statement
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420EA0E
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420EA20
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420E9BA
		dd offset loc_6420EA40
		dd offset loc_6420E9E1
_KW_ENTITY	db 'ENTITY',0           ; DATA XREF: _internalSubset:loc_6420D4A6o
					; _attlist2+10Bo
_KW_ATTLIST	db 'ATTLIST',0          ; DATA XREF: _internalSubset:loc_6420D4D3o
_KW_ELEMENT	db 'ELEMENT',0          ; DATA XREF: _internalSubset:loc_6420D503o
_KW_NOTATION	db 'NOTATION',0         ; DATA XREF: _internalSubset:loc_6420D533o
					; _attlist2+186o
_KW_SYSTEM	db 'SYSTEM',0           ; DATA XREF: _doctype1:loc_6420D280o
					; _entity2:loc_6420D768o ...
_KW_PUBLIC	db 'PUBLIC',0           ; DATA XREF: _doctype1:loc_6420D2B4o
					; _entity2:loc_6420D790o ...
_KW_EMPTY	db 'EMPTY',0            ; DATA XREF: _element1:loc_6420E388o
_KW_ANY		db 'ANY',0              ; DATA XREF: _element1:loc_6420E3B6o
_KW_PCDATA	db 'PCDATA',0           ; DATA XREF: _element2+64o
_KW_CDATA	db 'CDATA',0            ; DATA XREF: _attlist2:loc_6420DE52o
_KW_ID		db 'ID',0               ; DATA XREF: _attlist2+A2o
_KW_IDREF	db 'IDREF',0            ; DATA XREF: _attlist2+C5o
_KW_IDREFS	db 'IDREFS',0           ; DATA XREF: _attlist2+E8o
_KW_ENTITIES	db 'ENTITIES',0         ; DATA XREF: _attlist2+12Eo
_KW_NMTOKEN	db 'NMTOKEN',0          ; DATA XREF: _attlist2+14Do
_KW_NMTOKENS	db 'NMTOKENS',0         ; DATA XREF: _attlist2+16Co
_KW_IMPLIED	db 'IMPLIED',0          ; DATA XREF: _attlist8:loc_6420E1D1o
_KW_REQUIRED	db 'REQUIRED',0         ; DATA XREF: _attlist8:loc_6420E200o
_KW_FIXED	db 'FIXED',0            ; DATA XREF: _attlist8:loc_6420E22Co
_KW_NDATA	db 'NDATA',0            ; DATA XREF: _entity5+49o
_KW_INCLUDE	db 'INCLUDE',0          ; DATA XREF: _condSect0+67o
_KW_IGNORE	db 'IGNORE',0           ; DATA XREF: _condSect0+94o
_KW_DOCTYPE	db 'DOCTYPE',0          ; DATA XREF: _prolog0+54o _prolog1+7Bo
		align 20h
off_6421E1A0	dd offset loc_6420EDAC	; DATA XREF: _normal_scanComment+75r
		dd offset loc_6420EDAC	; jump table for switch	statement
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420EE31
		dd offset loc_6420EE07
		dd offset loc_6420EDE0
		dd offset loc_6420EDAC
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420ED8C
		dd offset loc_6420EDB2
off_6421E210	dd offset loc_6420EF18	; DATA XREF: _normal_scanPi+53r
		dd offset loc_6420EF50	; jump table for switch	statement
		dd offset loc_6420EF04
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEE0
		dd offset loc_6420EEB0
		dd offset loc_6420EEE0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
		dd offset loc_6420EEB0
off_6421E274	dd offset loc_6420F0D0	; DATA XREF: _normal_scanPi+113r
		dd offset loc_6420F090	; jump table for switch	statement
		dd offset loc_6420F053
		dd offset loc_6420EEFE
		dd offset loc_6420F004
		dd offset loc_6420F004
		dd offset loc_6420EEFE
		dd offset loc_6420EEFE
		dd offset loc_6420EEFE
		dd offset loc_6420EEFE
		dd offset loc_6420EFD8
		dd offset loc_6420EEFE
		dd offset loc_6420EEFE
		dd offset loc_6420EEFE
		dd offset loc_6420EEFE
		dd offset loc_6420EEFE
		dd offset loc_6420F004
		dd offset loc_6420EFD0
		dd offset loc_6420EEFE
		dd offset loc_6420EFD0
		dd offset loc_6420EFD0
		dd offset loc_6420EFD0
		dd offset loc_6420EFD0
		dd offset loc_6420EEFE
		dd offset loc_6420EEFE
off_6421E2D8	dd offset loc_6420EEB0	; DATA XREF: _normal_scanPi+1CCr
		dd offset loc_6420EEB0	; jump table for switch	statement
		dd offset loc_6420F02F
		dd offset loc_6420F02F
		dd offset loc_6420F02F
		dd offset loc_6420F1A4
		dd offset loc_6420F16A
		dd offset loc_6420F130
		dd offset loc_6420EEB0
		dd offset loc_6420F02F
		dd offset loc_6420F02F
		dd offset loc_6420F02F
		dd offset loc_6420F02F
		dd offset loc_6420F02F
		dd offset loc_6420F02F
		dd offset loc_6420F10A
off_6421E318	dd offset loc_6420F35D	; DATA XREF: _normal_cdataSectionTok+79r
		dd offset loc_6420F35D	; jump table for switch	statement
		dd offset loc_6420F2F3
		dd offset loc_6420F2F3
		dd offset loc_6420F3E5
		dd offset loc_6420F3B7
		dd offset loc_6420F340
		dd offset loc_6420F3A0
		dd offset loc_6420F35D
		dd offset loc_6420F377
		dd offset loc_6420F367
off_6421E344	dd offset loc_6420F430	; DATA XREF: _normal_cdataSectionTok+169r
		dd offset loc_6420F430	; jump table for switch	statement
		dd offset loc_6420F30B
		dd offset loc_6420F30B
		dd offset loc_6420F430
		dd offset loc_6420F492
		dd offset loc_6420F470
		dd offset loc_6420F440
		dd offset loc_6420F430
		dd offset loc_6420F430
		dd offset loc_6420F430
off_6421E370	dd offset loc_6420F600	; DATA XREF: _normal_scanRef+4Br
		dd offset loc_6420F5C7	; jump table for switch	statement
		dd offset loc_6420F5B0
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F562
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F542
		dd offset loc_6420F520
		dd offset loc_6420F542
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
		dd offset loc_6420F520
off_6421E3D4	dd offset loc_6420F6B0	; DATA XREF: _normal_scanRef+145r
		dd offset loc_6420F678	; jump table for switch	statement
		dd offset loc_6420F6F1
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F6E2
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F55C
		dd offset loc_6420F670
		dd offset loc_6420F55C
		dd offset loc_6420F670
		dd offset loc_6420F670
		dd offset loc_6420F670
		dd offset loc_6420F670
		dd offset loc_6420F55C
		dd offset loc_6420F55C
off_6421E438	dd offset loc_6420F8A0	; DATA XREF: _normal_contentTok+66r
		dd offset loc_6420F8A0	; jump table for switch	statement
		dd offset loc_6420F8A0
		dd offset loc_6420F8A0
		dd offset loc_6420F920
		dd offset loc_6420F901
		dd offset loc_6420F8E2
		dd offset loc_6420F8B0
		dd offset loc_6420F8A0
		dd offset loc_6420F8A0
		dd offset loc_6420F8A0
off_6421E464	dd offset loc_6420F956	; DATA XREF: _normal_contentTok+E9r
		dd offset loc_6420F956	; jump table for switch	statement
		dd offset loc_6420F9B4
		dd offset loc_6420F9A0
		dd offset loc_6420FA46
		dd offset loc_6420FA20
		dd offset loc_6420F9F7
		dd offset loc_6420F9E0
		dd offset loc_6420F956
		dd offset loc_6420F960
		dd offset loc_6420F990
off_6421E490	dd offset loc_6420FB65	; DATA XREF: _normal_contentTok+2B8r
		dd offset loc_6420FB37	; jump table for switch	statement
		dd offset loc_6420FB06
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420FAF2
		dd offset loc_6420FAC3
		dd offset loc_6420FA9A
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420FA6F
		dd offset loc_6420F9D3
		dd offset loc_6420FA6F
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
off_6421E4F4	dd offset loc_6420FC59	; DATA XREF: _normal_contentTok+2E3r
		dd offset loc_6420FC2A	; jump table for switch	statement
		dd offset loc_6420FBEB
		dd offset loc_6420F956
		dd offset loc_6420FBC6
		dd offset loc_6420FBC6
		dd offset loc_6420FBB7
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420FB93
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420FBC6
		dd offset loc_6420FCB5
		dd offset loc_6420FC88
		dd offset loc_6420FCB5
		dd offset loc_6420FCB5
		dd offset loc_6420FCB5
		dd offset loc_6420FCB5
		dd offset loc_6420F956
		dd offset loc_6420F956
off_6421E558	dd offset loc_6420FD38	; DATA XREF: _normal_contentTok+30Cr
		dd offset loc_6420FD0F	; jump table for switch	statement
		dd offset loc_6420FCE6
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420FCBD
		dd offset loc_6420F956
		dd offset loc_6420FCBD
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
off_6421E5BC	dd offset loc_6420FF8C	; DATA XREF: _normal_contentTok+434r
		dd offset loc_6420FF62	; jump table for switch	statement
		dd offset loc_6420FE86
		dd offset loc_6420F956
		dd offset loc_6420FBC6
		dd offset loc_6420FBC6
		dd offset loc_6420FBB7
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420FB93
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420FBC6
		dd offset loc_6420FE12
		dd offset loc_6420F956
		dd offset loc_6420FE12
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
off_6421E620	dd offset loc_6420FF2B	; DATA XREF: _normal_contentTok+4FEr
		dd offset loc_6420FEF4	; jump table for switch	statement
		dd offset loc_6420FEBD
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420FEB0
		dd offset loc_6420F9D3
		dd offset loc_6420FEB0
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
off_6421E684	dd offset loc_6420FDEB	; DATA XREF: _normal_contentTok+52Fr
		dd offset loc_6420FDC1	; jump table for switch	statement
		dd offset loc_6420FD97
		dd offset loc_6420F956
		dd offset loc_6420FD5E
		dd offset loc_6420FD5E
		dd offset loc_6420FD88
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420F956
		dd offset loc_6420FD5E
		dd offset loc_6420FCBD
		dd offset loc_6420FCBD
		dd offset loc_6420FCBD
		dd offset loc_6420FCBD
		dd offset loc_6420FCBD
		dd offset loc_6420FCBD
		dd offset loc_6420F956
		dd offset loc_6420F956
off_6421E6E8	dd offset loc_64210133	; DATA XREF: _normal_contentTok+68Ar
		dd offset loc_64210097	; jump table for switch	statement
		dd offset loc_64210067
		dd offset loc_6420FAE9
		dd offset loc_64210025
		dd offset loc_64210025
		dd offset loc_6420FAE9
		dd offset loc_6420FAE9
		dd offset loc_6420FAE9
		dd offset loc_6420FE41
		dd offset loc_6420FAE9
		dd offset loc_6420FAE9
		dd offset loc_6420FAE9
		dd offset loc_6420FAE9
		dd offset loc_6420FAE9
		dd offset loc_6420FAE9
		dd offset loc_64210025
		dd offset loc_64210127
		dd offset loc_642100C0
		dd offset loc_64210127
		dd offset loc_64210127
		dd offset loc_64210127
		dd offset loc_64210127
		dd offset loc_6420FAE9
		dd offset loc_6420FAE9
off_6421E74C	dd offset loc_6420FAE9	; DATA XREF: _normal_contentTok+A3Cr
		dd offset loc_6420FAE9	; jump table for switch	statement
		dd offset loc_6420FAE9
		dd offset loc_6421027D
		dd offset loc_642102D3
		dd offset loc_64210254
		dd offset loc_64210224
		dd offset loc_642102A7
		dd offset loc_6420FAE9
off_6421E770	dd offset loc_6421030C	; DATA XREF: _normal_contentTok+B55r
		dd offset loc_6421030C	; jump table for switch	statement
		dd offset loc_64210360
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_64210338
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6421030C
off_6421E7A4	dd offset loc_642103D9	; DATA XREF: _normal_contentTok+B81r
		dd offset loc_642103AB	; jump table for switch	statement
		dd offset loc_6421037D
		dd offset loc_6420F9D3
		dd offset loc_6421030C
		dd offset loc_6421030C
		dd offset loc_64210360
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_64210338
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6421030C
		dd offset loc_6421036F
		dd offset loc_6420F9D3
		dd offset loc_6421036F
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
		dd offset loc_6420F9D3
off_6421E808	dd offset loc_64210502	; DATA XREF: _normal_scanPercent+43r
		dd offset loc_642104C2	; jump table for switch	statement
		dd offset loc_642104A0
		dd offset loc_6421043C
		dd offset loc_64210484
		dd offset loc_64210484
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_64210484
		dd offset loc_64210460
		dd offset loc_6421043C
		dd offset loc_64210460
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_6421043C
		dd offset loc_64210484
off_6421E870	dd offset loc_64210600	; DATA XREF: _normal_scanPercent+127r
		dd offset loc_642105D0	; jump table for switch	statement
		dd offset loc_642105A0
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_64210590
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_6421047E
		dd offset loc_64210582
		dd offset loc_6421047E
		dd offset loc_64210582
		dd offset loc_64210582
		dd offset loc_64210582
		dd offset loc_64210582
		dd offset loc_6421047E
		dd offset loc_6421047E
off_6421E8D4	dd offset loc_64210680	; DATA XREF: _normal_scanLit+33r
		dd offset loc_64210680	; jump table for switch	statement
		dd offset loc_64210661
		dd offset loc_64210661
		dd offset loc_64210661
		dd offset loc_64210716
		dd offset loc_642106F0
		dd offset loc_642106C7
		dd offset loc_64210680
		dd offset loc_64210661
		dd offset loc_64210661
		dd offset loc_64210661
		dd offset loc_64210690
		dd offset loc_64210690
off_6421E90C	dd offset loc_64210786	; DATA XREF: _normal_prologTok+5Br
		dd offset loc_64210786	; jump table for switch	statement
		dd offset loc_642107C0
		dd offset loc_64210786
		dd offset loc_642107E1
		dd offset loc_64210801
		dd offset loc_64210944
		dd offset loc_64210960
		dd offset loc_64210786
		dd offset loc_642108A3
		dd offset loc_64210A13
		dd offset loc_642108F0
		dd offset loc_64210900
		dd offset loc_64210930
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210857
		dd offset loc_642109A0
		dd offset loc_64210A13
		dd offset loc_64210885
		dd offset loc_64210894
		dd offset loc_64210885
		dd offset loc_64210894
		dd offset loc_64210894
		dd offset loc_64210894
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_642109F0
		dd offset loc_642109B0
		dd offset loc_642109C0
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_642107B2
		dd offset loc_64210990
off_6421E9A0	dd offset loc_64210AC0	; DATA XREF: _normal_prologTok+100r
		dd offset loc_64210A50	; jump table for switch	statement
		dd offset loc_64210A88
		dd offset loc_64210786
		dd offset loc_64210A80
		dd offset loc_64210A80
		dd offset loc_64210A80
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210A35
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210A80
		dd offset loc_64210A80
		dd offset loc_64210A20
		dd offset loc_64210B30
		dd offset loc_64210A20
		dd offset loc_64210A20
		dd offset loc_64210A20
		dd offset loc_64210A20
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210A80
		dd offset loc_64210786
		dd offset loc_64210A80
		dd offset loc_64210AF2
		dd offset loc_64210B10
		dd offset loc_64210A80
		dd offset loc_64210A80
off_6421EA20	dd offset loc_64210BE2	; DATA XREF: _normal_prologTok+12Er
		dd offset loc_64210BB0	; jump table for switch	statement
		dd offset loc_64210B82
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B5A
		dd offset loc_64210B50
		dd offset loc_64210B5A
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
		dd offset loc_64210B50
off_6421EA84	dd offset loc_64210C7D	; DATA XREF: _normal_prologTok+42Br
		dd offset loc_64210C53	; jump table for switch	statement
		dd offset loc_64210C29
		dd offset loc_64210786
		dd offset loc_64210C1C
		dd offset loc_64210C1C
		dd offset loc_64210C1C
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210C1C
		dd offset loc_64210C14
		dd offset loc_64210786
		dd offset loc_64210C14
		dd offset loc_64210C14
		dd offset loc_64210C14
		dd offset loc_64210C14
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210C1C
		dd offset loc_64210786
		dd offset loc_64210C1C
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210786
		dd offset loc_64210C1C
off_6421EB04	dd offset loc_64210D4D	; DATA XREF: _normal_prologTok+5C6r
		dd offset loc_64210D4D	; jump table for switch	statement
		dd offset loc_64210D4D
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_64210D3D
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_64210D4D
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_642109E5
		dd offset loc_64210D4D
		dd offset loc_64210D2D
		dd offset loc_64210D1D
		dd offset loc_64210D4D
		dd offset loc_64210D4D
off_6421EB74	dd offset loc_64210E94	; DATA XREF: _normal_prologTok+6D2r
		dd offset loc_64210E65	; jump table for switch	statement
		dd offset loc_64210E36
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210B45
		dd offset loc_64210E29
		dd offset loc_64210B45
		dd offset loc_64210E29
		dd offset loc_64210E29
		dd offset loc_64210E29
		dd offset loc_64210E29
		dd offset loc_64210B45
		dd offset loc_64210786
off_6421EBD8	dd offset loc_64211063	; DATA XREF: _normal_attributeValueTok+55r
		dd offset loc_64211063	; jump table for switch	statement
		dd offset loc_642110B0
		dd offset loc_642110C3
		dd offset loc_64211063
		dd offset loc_642110E5
		dd offset loc_642110F5
		dd offset loc_64211105
		dd offset loc_64211063
		dd offset loc_64211115
		dd offset loc_64211147
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211063
		dd offset loc_64211090
off_6421EC30	dd offset loc_64211257	; DATA XREF: _normal_entityValueTok+5Ar
		dd offset loc_642111A9	; jump table for switch	statement
		dd offset loc_64211247
		dd offset loc_64211237
		dd offset loc_64211227
		dd offset loc_642111A9
		dd offset loc_64211200
		dd offset loc_642111F0
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111A9
		dd offset loc_642111D1
off_6421ECA0	dd offset loc_642112F8	; DATA XREF: _normal_ignoreSectionTok+51r
		dd offset loc_642112F8	; jump table for switch	statement
		dd offset loc_642113B0
		dd offset loc_642112D4
		dd offset loc_64211376
		dd offset loc_64211350
		dd offset loc_64211328
		dd offset loc_64211305
		dd offset loc_642112F8
off_6421ECC4	dd offset loc_64211720	; DATA XREF: _normal_getAtts+50r
		dd offset loc_642114E4	; jump table for switch	statement
		dd offset loc_642116E6
		dd offset loc_642116B3
		dd offset loc_64211680
		dd offset loc_642114E4
		dd offset loc_64211640
		dd offset loc_64211640
		dd offset loc_64211626
		dd offset loc_642115E5
		dd offset loc_642115A4
		dd offset loc_642114E4
		dd offset loc_642114E4
		dd offset loc_642114E4
		dd offset loc_64211626
		dd offset loc_642114E4
		dd offset loc_642114E4
		dd offset loc_642114E4
		dd offset loc_64211540
		dd offset loc_64211507
		dd offset loc_642114E4
		dd offset loc_64211507
		dd offset loc_642114E4
		dd offset loc_642114E4
		dd offset loc_642114E4
		dd offset loc_642114E4
		dd offset loc_64211507
off_6421ED30	dd offset loc_642118C0,	offset loc_642118C0, offset loc_642118C0
					; DATA XREF: _normal_charRefNumber+83r
		dd offset loc_642118C0,	offset loc_642118C0, offset loc_642118C0 ; jump	table for switch statement
		dd offset loc_642118C0,	offset loc_642118C0, offset loc_642118C0
		dd offset loc_642118C0,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_642118B0
		dd offset loc_642118B0,	offset loc_642118B0, offset loc_642118B0
		dd offset loc_642118B0,	offset loc_642118B0, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_6421187E, offset loc_6421187E
		dd offset loc_6421187E,	offset loc_64211870, offset loc_64211870
		dd offset loc_64211870,	offset loc_64211870, offset loc_64211870
		dd offset loc_64211870
off_6421EE0C	dd offset loc_64211A0A	; DATA XREF: _normal_sameName+47r
		dd offset loc_642119FD	; jump table for switch	statement
		dd offset loc_642119F0
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_642119C1
		dd offset loc_64211A20
		dd offset loc_64211A20
		dd offset loc_64211A20
		dd offset loc_64211A20
		dd offset loc_64211A20
		dd offset loc_64211A20
		dd offset loc_642119C1
		dd offset loc_64211A20
off_6421EE70	dd offset loc_64211AD5	; DATA XREF: _normal_nameLength+23r
		dd offset loc_64211AD0	; jump table for switch	statement
		dd offset loc_64211AC5
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AAB
		dd offset loc_64211AC0
		dd offset loc_64211AC0
		dd offset loc_64211AC0
		dd offset loc_64211AC0
		dd offset loc_64211AC0
		dd offset loc_64211AC0
		dd offset loc_64211AAB
		dd offset loc_64211AC0
off_6421EED4	dd offset loc_64211BC0	; DATA XREF: _normal_updatePosition+3Br
		dd offset loc_64211BB0	; jump table for switch	statement
		dd offset loc_64211BA5
		dd offset loc_64211B38
		dd offset loc_64211B80
		dd offset loc_64211B62
off_6421EEEC	dd offset loc_64212530	; DATA XREF: _little2_scanPi+3Br
		dd offset loc_64212520	; jump table for switch	statement
		dd offset loc_642124C0
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_642124F0
		dd offset loc_64212497
		dd offset loc_642124F0
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_64212497
		dd offset loc_642125DA
off_6421EF50	dd offset loc_642124C0	; DATA XREF: _little2_scanPi+93r
		dd offset loc_642124C0	; jump table for switch	statement
		dd offset loc_642124C0
		dd offset loc_642124C0
		dd offset loc_642124E0
		dd offset loc_642124E0
		dd offset loc_642124E0
		dd offset loc_642124E0
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_6421246D
		dd offset loc_642124D0
off_6421EFF0	dd offset loc_64212542	; DATA XREF: _little2_scanPi+F3r
		dd offset loc_64212625	; jump table for switch	statement
		dd offset loc_64212610
		dd offset loc_64212550
		dd offset loc_64212651
		dd offset loc_64212651
		dd offset loc_64212550
		dd offset loc_64212550
		dd offset loc_64212550
		dd offset loc_64212550
		dd offset loc_64212635
		dd offset loc_64212550
		dd offset loc_64212550
		dd offset loc_64212550
		dd offset loc_64212550
		dd offset loc_64212550
		dd offset loc_64212651
		dd offset loc_642125B8
		dd offset loc_64212550
		dd offset loc_642125B8
		dd offset loc_642125B8
		dd offset loc_642125B8
		dd offset loc_642125B8
		dd offset loc_64212550
		dd offset loc_642126B1
off_6421F054	dd offset loc_64212610	; DATA XREF: _little2_scanPi+1B3r
		dd offset loc_64212610	; jump table for switch	statement
		dd offset loc_64212610
		dd offset loc_64212610
		dd offset loc_642125E5
		dd offset loc_642125E5
		dd offset loc_642125E5
		dd offset loc_642125E5
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_6421256F
		dd offset loc_642125F0
off_6421F0F4	dd offset loc_642126F7	; DATA XREF: _little2_scanPi+28Ar
		dd offset loc_642126F7	; jump table for switch	statement
		dd offset loc_642126F7
		dd offset loc_642126F7
		dd offset loc_642126ED
		dd offset loc_642126ED
		dd offset loc_642126ED
		dd offset loc_642126ED
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_6421276D
off_6421F194	dd offset loc_642126ED	; DATA XREF: _little2_scanPi:loc_642126FCr
		dd offset loc_642126ED	; jump table for switch	statement
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_6421275B
		dd offset loc_64212746
		dd offset loc_64212731
		dd offset loc_642126ED
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212689
		dd offset loc_64212703
off_6421F1D4	dd offset loc_64212880	; DATA XREF: _little2_cdataSectionTok:loc_64212801r
		dd offset loc_64212880	; jump table for switch	statement
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_64212880
		dd offset loc_64212860
		dd offset loc_642128A3
		dd offset loc_64212890
		dd offset loc_64212880
		dd offset loc_64212880
		dd offset loc_64212880
off_6421F200	dd offset loc_642128F0	; DATA XREF: _little2_cdataSectionTok:loc_64212855r
		dd offset loc_642128F0	; jump table for switch	statement
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_64212970
		dd offset loc_64212956
		dd offset loc_64212943
		dd offset loc_64212920
		dd offset loc_642128F0
		dd offset loc_64212808
		dd offset loc_64212933
off_6421F22C	dd offset loc_642128D6	; DATA XREF: _little2_cdataSectionTok+141r
		dd offset loc_642128D6	; jump table for switch	statement
		dd offset loc_642128D6
		dd offset loc_642128D6
		dd offset loc_64212880
		dd offset loc_64212880
		dd offset loc_64212880
		dd offset loc_64212880
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_6421286B
		dd offset loc_642128C8
off_6421F2CC	dd offset loc_64212910	; DATA XREF: _little2_cdataSectionTok+163r
		dd offset loc_64212910	; jump table for switch	statement
		dd offset loc_64212910
		dd offset loc_64212910
		dd offset loc_642128F0
		dd offset loc_642128F0
		dd offset loc_642128F0
		dd offset loc_642128F0
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_642127D5
		dd offset loc_64212900
off_6421F36C	dd offset loc_64212B45	; DATA XREF: _little2_scanRef+3Dr
		dd offset loc_64212B55	; jump table for switch	statement
		dd offset loc_64212AA0
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212B65
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212B13
		dd offset loc_64212A73
		dd offset loc_64212B13
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212BED
off_6421F3D0	dd offset loc_64212AA0	; DATA XREF: _little2_scanRef+A6r
		dd offset loc_64212AA0	; jump table for switch	statement
		dd offset loc_64212AA0
		dd offset loc_64212AA0
		dd offset loc_64212AC0
		dd offset loc_64212AC0
		dd offset loc_64212AC0
		dd offset loc_64212AC0
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212A41
		dd offset loc_64212AB0
off_6421F470	dd offset loc_64212B45	; DATA XREF: _little2_scanRef+14Er
		dd offset loc_64212B55	; jump table for switch	statement
		dd offset loc_64212AA0
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212C4A
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212A73
		dd offset loc_64212B13
		dd offset loc_64212A73
		dd offset loc_64212B13
		dd offset loc_64212B13
		dd offset loc_64212B13
		dd offset loc_64212B13
		dd offset loc_64212A73
		dd offset loc_64212C59
off_6421F4D4	dd offset loc_64212AA0	; DATA XREF: _little2_scanRef+1F6r
		dd offset loc_64212AA0	; jump table for switch	statement
		dd offset loc_64212AA0
		dd offset loc_64212AA0
		dd offset loc_64212C40
		dd offset loc_64212C40
		dd offset loc_64212C40
		dd offset loc_64212C40
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212AE1
		dd offset loc_64212C26
off_6421F574	dd offset loc_64212F35	; DATA XREF: _little2_contentTok:loc_64212D4Ar
		dd offset loc_64212F35	; jump table for switch	statement
		dd offset loc_64212F94
		dd offset loc_64212F80
		dd offset loc_64213010
		dd offset loc_64212FF2
		dd offset loc_64212FE1
		dd offset loc_64212FD0
		dd offset loc_64212F35
		dd offset loc_64212F40
		dd offset loc_64212F70
off_6421F5A0	dd offset loc_64212E80	; DATA XREF: _little2_contentTok+16Br
		dd offset loc_64212E80	; jump table for switch	statement
		dd offset loc_64212E80
		dd offset loc_64212E80
		dd offset loc_64212E70
		dd offset loc_64212E70
		dd offset loc_64212E70
		dd offset loc_64212E70
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212E38
		dd offset loc_64212EF0
off_6421F640	dd offset loc_64212E70	; DATA XREF: _little2_contentTok:loc_64212E85r
		dd offset loc_64212E70	; jump table for switch	statement
		dd offset loc_64212E70
		dd offset loc_64212E70
		dd offset loc_64212EA0
		dd offset loc_64212E62
		dd offset loc_64212E90
		dd offset loc_64212ED8
		dd offset loc_64212E70
		dd offset loc_64212E70
		dd offset loc_64212E70
off_6421F66C	dd offset loc_64212F10	; DATA XREF: _little2_contentTok+215r
		dd offset loc_64212F10	; jump table for switch	statement
		dd offset loc_64212F10
		dd offset loc_64212F10
		dd offset loc_64212F35
		dd offset loc_64212F35
		dd offset loc_64212F35
		dd offset loc_64212F35
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212E12
		dd offset loc_64212F20
off_6421F70C	dd offset loc_64213112	; DATA XREF: _little2_contentTok+2D4r
		dd offset loc_64213102	; jump table for switch	statement
		dd offset loc_642130AE
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_6421315D
		dd offset loc_642131A8
		dd offset loc_64213171
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_64213125
		dd offset loc_642130A1
		dd offset loc_64213125
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_64213242
off_6421F770	dd offset loc_64213112	; DATA XREF: _little2_contentTok+466r
		dd offset loc_64213102	; jump table for switch	statement
		dd offset loc_642130AE
		dd offset loc_642130A1
		dd offset loc_6421335B
		dd offset loc_6421335B
		dd offset loc_64213416
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_64213389
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_6421335B
		dd offset loc_64213346
		dd offset loc_642133B5
		dd offset loc_64213346
		dd offset loc_64213346
		dd offset loc_64213346
		dd offset loc_64213346
		dd offset loc_642130A1
		dd offset loc_64213305
off_6421F7D4	dd offset loc_642132A7	; DATA XREF: _little2_contentTok+4B1r
		dd offset loc_6421329A	; jump table for switch	statement
		dd offset loc_642132F8
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_642132B5
		dd offset loc_64213291
		dd offset loc_642132B5
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_64213291
		dd offset loc_6421324F
off_6421F838	dd offset loc_64213112	; DATA XREF: _little2_contentTok+601r
		dd offset loc_64213102	; jump table for switch	statement
		dd offset loc_642130AE
		dd offset loc_642130A1
		dd offset loc_642136DD
		dd offset loc_642136DD
		dd offset loc_642136CE
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642136DD
		dd offset loc_64213485
		dd offset loc_64213485
		dd offset loc_64213485
		dd offset loc_64213485
		dd offset loc_64213485
		dd offset loc_64213485
		dd offset loc_642130A1
		dd offset loc_64213BF5
off_6421F89C	dd offset loc_64213112	; DATA XREF: _little2_contentTok+692r
		dd offset loc_64213102	; jump table for switch	statement
		dd offset loc_642130AE
		dd offset loc_642130A1
		dd offset loc_6421335B
		dd offset loc_6421335B
		dd offset loc_64213416
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_64213389
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_6421335B
		dd offset loc_642135C7
		dd offset loc_642130A1
		dd offset loc_642135C7
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_642130A1
		dd offset loc_64213C1D
off_6421F900	dd offset loc_642130AE	; DATA XREF: _little2_contentTok+7D6r
		dd offset loc_642130AE	; jump table for switch	statement
		dd offset loc_642130AE
		dd offset loc_642130AE
		dd offset loc_642134DF
		dd offset loc_642134DF
		dd offset loc_642134DF
		dd offset loc_642134DF
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_6421306B
		dd offset loc_642134CD
off_6421F9A0	dd offset loc_642132F8	; DATA XREF: _little2_contentTok+83Cr
		dd offset loc_642132F8	; jump table for switch	statement
		dd offset loc_642132F8
		dd offset loc_642132F8
		dd offset loc_64213545
		dd offset loc_64213545
		dd offset loc_64213545
		dd offset loc_64213545
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213257
		dd offset loc_64213533
off_6421FA40	dd offset loc_642130AE	; DATA XREF: _little2_contentTok+865r
					; jump table for switch	statement
		dd offset loc_642130AE	; jumptable 64212FC4 case 7
					; jumptable 64213156 case 7
					; jumptable 642132F1 case 7
					; jumptable 64213382 case 7
					; jumptable 642134C6 cases 0-3
					; jumptable 64213555 cases 0-3
		dd offset loc_642130AE	; jumptable 64212FC4 case 7
					; jumptable 64213156 case 7
					; jumptable 642132F1 case 7
					; jumptable 64213382 case 7
					; jumptable 642134C6 cases 0-3
					; jumptable 64213555 cases 0-3
		dd offset loc_642130AE	; jumptable 64212FC4 case 7
					; jumptable 64213156 case 7
					; jumptable 642132F1 case 7
					; jumptable 64213382 case 7
					; jumptable 642134C6 cases 0-3
					; jumptable 64213555 cases 0-3
		dd offset loc_64213573	; jumptable 64213555 cases 4-7
		dd offset loc_64213573	; jumptable 64213555 cases 4-7
		dd offset loc_64213573	; jumptable 64213555 cases 4-7
		dd offset loc_64213573	; jumptable 64213555 cases 4-7
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_64213506	; jumptable 64213555 cases 8-38
		dd offset loc_6421355C	; jumptable 64213555 case 39
off_6421FAE0	dd offset loc_64213969	; DATA XREF: _little2_contentTok+A70r
					; jump table for switch	statement
		dd offset loc_64213955	; jumptable 64213555 cases 41,88
					; jumptable 64213B29 case 6
		dd offset loc_642138C8	; jumptable 64213555 cases 42,89
					; jumptable 64213B29 case 7
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_64213794	; jumptable 64213555 cases 44,45,56
		dd offset loc_64213794	; jumptable 64213555 cases 44,45,56
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_64213804	; jumptable 64213555 case 49
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_64213794	; jumptable 64213555 cases 44,45,56
		dd offset loc_64213889	; jumptable 64213555 cases 57,59-62
		dd offset loc_642130BB	; jumptable 64213555 case 58
		dd offset loc_64213889	; jumptable 64213555 cases 57,59-62
		dd offset loc_64213889	; jumptable 64213555 cases 57,59-62
		dd offset loc_64213889	; jumptable 64213555 cases 57,59-62
		dd offset loc_64213889	; jumptable 64213555 cases 57,59-62
		dd offset loc_642135FC	; jumptable 64213555 cases 43,46-48,50-55,63,65-67,73,77-81,83-85,90,94-98,100-102,105,107-110
					; jumptable 642139B7 cases 0-2,8
		dd offset loc_6421397D	; jumptable 64213555 case 64
off_6421FB44	dd offset loc_642135FC	; DATA XREF: _little2_contentTok:loc_642139B7r
		dd offset loc_642135FC	; jump table for switch	statement
		dd offset loc_642135FC
		dd offset loc_64213A1E
		dd offset loc_64213A15
		dd offset loc_64213A08
		dd offset loc_642139EE
		dd offset loc_64213A4C
		dd offset loc_642135FC
off_6421FB68	dd offset loc_64213AFA	; DATA XREF: _little2_contentTok+DA1r
		dd offset loc_64213AFA	; jump table for switch	statement
		dd offset loc_64213BA2
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_64213AC5
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_64213AFA
off_6421FB9C	dd offset loc_64213969	; DATA XREF: _little2_contentTok+E39r
		dd offset loc_64213955	; jump table for switch	statement
		dd offset loc_642138C8
		dd offset loc_642135FC
		dd offset loc_64213AFA
		dd offset loc_64213AFA
		dd offset loc_64213BA2
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_64213AC5
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_64213AFA
		dd offset loc_64213B94
		dd offset loc_642135FC
		dd offset loc_64213B94
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_642135FC
		dd offset loc_64213B65
off_6421FC00	dd offset loc_64213E30	; DATA XREF: _little2_scanPercent+3Cr
		dd offset loc_64213E45	; jump table for switch	statement
		dd offset loc_64213D95
		dd offset loc_64213D70
		dd offset loc_64213E55
		dd offset loc_64213E55
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213E55
		dd offset loc_64213E00
		dd offset loc_64213D70
		dd offset loc_64213E00
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213E7D
		dd offset loc_64213E55
off_6421FC68	dd offset loc_64213D95	; DATA XREF: _little2_scanPercent+9Er
					; jump table for switch	statement
		dd offset loc_64213D95	; jumptable 64213555 cases 114,138-141,180,203-206
					; jumptable 64213D2C case 7
					; jumptable 64213D8E cases 0-3,42,65-68
					; jumptable 64213E26 case 7
					; jumptable 64213E76 cases 0-3
		dd offset loc_64213D95	; jumptable 64213555 cases 114,138-141,180,203-206
					; jumptable 64213D2C case 7
					; jumptable 64213D8E cases 0-3,42,65-68
					; jumptable 64213E26 case 7
					; jumptable 64213E76 cases 0-3
		dd offset loc_64213D95	; jumptable 64213555 cases 114,138-141,180,203-206
					; jumptable 64213D2C case 7
					; jumptable 64213D8E cases 0-3,42,65-68
					; jumptable 64213E26 case 7
					; jumptable 64213E76 cases 0-3
		dd offset loc_64213DB2	; jumptable 64213555 cases 142-145
					; jumptable 64213D8E cases 4-7
		dd offset loc_64213DB2	; jumptable 64213555 cases 142-145
					; jumptable 64213D8E cases 4-7
		dd offset loc_64213DB2	; jumptable 64213555 cases 142-145
					; jumptable 64213D8E cases 4-7
		dd offset loc_64213DB2	; jumptable 64213555 cases 142-145
					; jumptable 64213D8E cases 4-7
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213D3F	; jumptable 64213555 cases 146-176
					; jumptable 64213D8E cases 8-38
		dd offset loc_64213DA3	; jumptable 64213555 case 177
					; jumptable 64213D8E case 39
off_6421FD08	dd offset loc_64213E30	; DATA XREF: _little2_scanPercent+136r
		dd offset loc_64213E45	; jump table for switch	statement
		dd offset loc_64213D95
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213E9F
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213D70
		dd offset loc_64213E00
		dd offset loc_64213D70
		dd offset loc_64213E00
		dd offset loc_64213E00
		dd offset loc_64213E00
		dd offset loc_64213E00
		dd offset loc_64213D70
		dd offset loc_64213EAE
off_6421FD6C	dd offset loc_64213D95	; DATA XREF: _little2_scanPercent+186r
		dd offset loc_64213D95	; jump table for switch	statement
		dd offset loc_64213D95
		dd offset loc_64213D95
		dd offset loc_64213E95
		dd offset loc_64213E95
		dd offset loc_64213E95
		dd offset loc_64213E95
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213DD0
		dd offset loc_64213E85
off_6421FE0C	dd offset loc_64213F20	; DATA XREF: _little2_scanLit+43r
		dd offset loc_64213F20	; jump table for switch	statement
		dd offset loc_64213F20
		dd offset loc_64213F20
		dd offset loc_64213F10
		dd offset loc_64213F10
		dd offset loc_64213F10
		dd offset loc_64213F10
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213F30
off_6421FEAC	dd offset loc_64213F10	; DATA XREF: _little2_scanLit:loc_64213F25r
		dd offset loc_64213F10	; jump table for switch	statement
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213F95
		dd offset loc_64213F84
		dd offset loc_64213F73
		dd offset loc_64213F10
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213EE2
		dd offset loc_64213F40
		dd offset loc_64213F40
off_6421FEE4	dd offset loc_64214026	; DATA XREF: _little2_attributeValueTok:loc_64214070r
		dd offset loc_64214026	; jump table for switch	statement
		dd offset loc_642140F7
		dd offset loc_642140B0
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214077
		dd offset loc_64214080
		dd offset loc_64214026
		dd offset loc_64214085
		dd offset loc_64214096
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_64214026
		dd offset loc_642140E0
off_6421FF3C	dd offset loc_64214280	; DATA XREF: _little2_entityValueTok:loc_642141E0r
		dd offset loc_6421418A	; jump table for switch	statement
		dd offset loc_6421418A
		dd offset loc_64214246
		dd offset loc_64214234
		dd offset loc_6421418A
		dd offset loc_64214200
		dd offset loc_642141E7
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_6421418A
		dd offset loc_64214258
off_6421FFAC	dd offset loc_64214340	; DATA XREF: _little2_ignoreSectionTok+6Er
		dd offset loc_64214340	; jump table for switch	statement
		dd offset loc_64214340
		dd offset loc_64214340
		dd offset loc_64214335
		dd offset loc_64214335
		dd offset loc_64214335
		dd offset loc_64214335
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_6421430D
		dd offset loc_64214350
off_6422004C	dd offset loc_64214335	; DATA XREF: _little2_ignoreSectionTok:loc_64214345r
		dd offset loc_64214335	; jump table for switch	statement
		dd offset loc_642143E1
		dd offset loc_6421430D
		dd offset loc_64214390
		dd offset loc_64214380
		dd offset loc_64214370
		dd offset loc_64214360
		dd offset loc_64214335
off_64220070	dd offset loc_64214751	; DATA XREF: _little2_getAtts+43r
		dd offset loc_64214580	; jump table for switch	statement
		dd offset loc_64214720
		dd offset loc_642146B0
		dd offset loc_64214680
		dd offset loc_64214580
		dd offset loc_642146E0
		dd offset loc_642146E0
		dd offset loc_64214570
		dd offset loc_64214652
		dd offset loc_64214624
		dd offset loc_64214580
		dd offset loc_64214580
		dd offset loc_64214580
		dd offset loc_64214570
		dd offset loc_64214580
		dd offset loc_64214580
		dd offset loc_64214580
		dd offset loc_642145D6
		dd offset loc_642145A3
		dd offset loc_64214580
		dd offset loc_642145A3
		dd offset loc_64214580
		dd offset loc_64214580
		dd offset loc_64214580
		dd offset loc_64214580
		dd offset loc_642145A3
off_642200DC	dd offset loc_64214680	; DATA XREF: _little2_getAtts+7Cr
		dd offset loc_64214680	; jump table for switch	statement
		dd offset loc_64214680
		dd offset loc_64214680
		dd offset loc_64214781
		dd offset loc_64214781
		dd offset loc_64214781
		dd offset loc_64214781
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_642145A3
		dd offset loc_64214772
off_6422017C	dd offset loc_64214973,	offset loc_64214973, offset loc_64214973
					; DATA XREF: _little2_charRefNumber+ACr
		dd offset loc_64214973,	offset loc_64214973, offset loc_64214973 ; jump	table for switch statement
		dd offset loc_64214973,	offset loc_64214973, offset loc_64214973
		dd offset loc_64214973,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_64214990
		dd offset loc_64214990,	offset loc_64214990, offset loc_64214990
		dd offset loc_64214990,	offset loc_64214990, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_6421497B, offset loc_6421497B
		dd offset loc_6421497B,	offset loc_64214987, offset loc_64214987
		dd offset loc_64214987,	offset loc_64214987, offset loc_64214987
		dd offset loc_64214987
off_64220258	dd offset loc_64214BB4	; DATA XREF: _little2_sameName:loc_64214B60r
		dd offset loc_64214BB0	; jump table for switch	statement
		dd offset loc_64214B67
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B06
		dd offset loc_64214B42
		dd offset loc_64214B42
		dd offset loc_64214B42
		dd offset loc_64214B42
		dd offset loc_64214B42
		dd offset loc_64214B42
		dd offset loc_64214B06
		dd offset loc_64214B42
off_642202BC	dd offset loc_64214B67	; DATA XREF: _little2_sameName+F6r
					; jump table for switch	statement
		dd offset loc_64214B67	; jumptable 64214B60 case 2
					; jumptable 64214BC6 cases 0-3
		dd offset loc_64214B67	; jumptable 64214B60 case 2
					; jumptable 64214BC6 cases 0-3
		dd offset loc_64214B67	; jumptable 64214B60 case 2
					; jumptable 64214BC6 cases 0-3
		dd offset loc_64214BE5	; jumptable 64214BC6 cases 4-7
		dd offset loc_64214BE5	; jumptable 64214BC6 cases 4-7
		dd offset loc_64214BE5	; jumptable 64214BC6 cases 4-7
		dd offset loc_64214BE5	; jumptable 64214BC6 cases 4-7
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214B42	; jumptable 64214B60 cases 17-22,24
					; jumptable 64214BC6 cases 8-38
		dd offset loc_64214BD0	; jumptable 64214BC6 case 39
off_6422035C	dd offset loc_64214C40	; DATA XREF: _little2_sameName+143r
					; jump table for switch	statement
		dd offset loc_64214C40	; jumptable 64214BC6 cases 40-43
					; jumptable 64214C13 case 0
		dd offset loc_64214C40	; jumptable 64214BC6 cases 40-43
					; jumptable 64214C13 case 0
		dd offset loc_64214C40	; jumptable 64214BC6 cases 40-43
					; jumptable 64214C13 case 0
		dd offset loc_64214C30	; jumptable 64214BC6 cases 44-47
		dd offset loc_64214C30	; jumptable 64214BC6 cases 44-47
		dd offset loc_64214C30	; jumptable 64214BC6 cases 44-47
		dd offset loc_64214C30	; jumptable 64214BC6 cases 44-47
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214BFB	; jumptable 64214BC6 cases 48-78
		dd offset loc_64214C20	; jumptable 64214BC6 case 79
off_642203FC	dd offset loc_64214D05	; DATA XREF: _little2_nameLength+3Er
		dd offset loc_64214D05	; jump table for switch	statement
		dd offset loc_64214D05
		dd offset loc_64214D05
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214CF5
off_6422049C	dd offset loc_64214D00	; DATA XREF: _little2_nameLength:loc_64214D12r
		dd offset loc_64214D25	; jump table for switch	statement
		dd offset loc_64214D20
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214CD4
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214D00
		dd offset loc_64214CD4
		dd offset loc_64214D00
off_64220500	dd offset loc_64214DF0	; DATA XREF: _little2_updatePosition+30r
		dd offset loc_64214E40	; jump table for switch	statement
		dd offset loc_64214E30
		dd offset loc_64214DF0
		dd offset loc_64214E05
		dd offset loc_64214E50
off_64220518	dd offset loc_64215010	; DATA XREF: _big2_scanPi+3Br
		dd offset loc_64215000	; jump table for switch	statement
		dd offset loc_64214FA0
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214FD0
		dd offset loc_64214F78
		dd offset loc_64214FD0
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_64214F78
		dd offset loc_642150BA
off_6422057C	dd offset loc_64214FA0	; DATA XREF: _big2_scanPi+94r
		dd offset loc_64214FA0	; jump table for switch	statement
		dd offset loc_64214FA0
		dd offset loc_64214FA0
		dd offset loc_64214FC0
		dd offset loc_64214FC0
		dd offset loc_64214FC0
		dd offset loc_64214FC0
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214F4E
		dd offset loc_64214FB0
off_6422061C	dd offset loc_64215022	; DATA XREF: _big2_scanPi+F3r
		dd offset loc_64215105	; jump table for switch	statement
		dd offset loc_642150F0
		dd offset loc_64215030
		dd offset loc_64215131
		dd offset loc_64215131
		dd offset loc_64215030
		dd offset loc_64215030
		dd offset loc_64215030
		dd offset loc_64215030
		dd offset loc_64215115
		dd offset loc_64215030
		dd offset loc_64215030
		dd offset loc_64215030
		dd offset loc_64215030
		dd offset loc_64215030
		dd offset loc_64215131
		dd offset loc_64215099
		dd offset loc_64215030
		dd offset loc_64215099
		dd offset loc_64215099
		dd offset loc_64215099
		dd offset loc_64215099
		dd offset loc_64215030
		dd offset loc_64215191
off_64220680	dd offset loc_642150F0	; DATA XREF: _big2_scanPi+1B3r
		dd offset loc_642150F0	; jump table for switch	statement
		dd offset loc_642150F0
		dd offset loc_642150F0
		dd offset loc_642150C5
		dd offset loc_642150C5
		dd offset loc_642150C5
		dd offset loc_642150C5
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_64215050
		dd offset loc_642150D0
off_64220720	dd offset loc_642151D7	; DATA XREF: _big2_scanPi+28Ar
		dd offset loc_642151D7	; jump table for switch	statement
		dd offset loc_642151D7
		dd offset loc_642151D7
		dd offset loc_642151CD
		dd offset loc_642151CD
		dd offset loc_642151CD
		dd offset loc_642151CD
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215251
off_642207C0	dd offset loc_642151CD	; DATA XREF: _big2_scanPi:loc_642151DCr
		dd offset loc_642151CD	; jump table for switch	statement
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_6421523F
		dd offset loc_6421522A
		dd offset loc_64215215
		dd offset loc_642151CD
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_64215169
		dd offset loc_642151E3
off_64220800	dd offset loc_64215390	; DATA XREF: _big2_cdataSectionTok:loc_642152F1r
		dd offset loc_64215390	; jump table for switch	statement
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_64215390
		dd offset loc_64215350
		dd offset loc_642153B0
		dd offset loc_642153A0
		dd offset loc_64215390
		dd offset loc_64215390
		dd offset loc_64215390
off_6422082C	dd offset loc_642153F0	; DATA XREF: _big2_cdataSectionTok:loc_64215346r
		dd offset loc_642153F0	; jump table for switch	statement
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_64215470
		dd offset loc_64215456
		dd offset loc_64215443
		dd offset loc_64215420
		dd offset loc_642153F0
		dd offset loc_642152F8
		dd offset loc_64215433
off_64220858	dd offset loc_642153D0	; DATA XREF: _big2_cdataSectionTok+10Er
		dd offset loc_642153D0	; jump table for switch	statement
		dd offset loc_642153D0
		dd offset loc_642153D0
		dd offset loc_64215390
		dd offset loc_64215390
		dd offset loc_64215390
		dd offset loc_64215390
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_6421535B
		dd offset loc_642153C0
off_642208F8	dd offset loc_64215410	; DATA XREF: _big2_cdataSectionTok+173r
		dd offset loc_64215410	; jump table for switch	statement
		dd offset loc_64215410
		dd offset loc_64215410
		dd offset loc_642153F0
		dd offset loc_642153F0
		dd offset loc_642153F0
		dd offset loc_642153F0
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_642152C5
		dd offset loc_64215400
off_64220998	dd offset loc_64215636	; DATA XREF: _big2_scanRef+3Dr
		dd offset loc_64215646	; jump table for switch	statement
		dd offset loc_64215590
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215656
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215604
		dd offset loc_64215564
		dd offset loc_64215604
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_642156DD
off_642209FC	dd offset loc_64215590	; DATA XREF: _big2_scanRef+A6r
		dd offset loc_64215590	; jump table for switch	statement
		dd offset loc_64215590
		dd offset loc_64215590
		dd offset loc_642155B0
		dd offset loc_642155B0
		dd offset loc_642155B0
		dd offset loc_642155B0
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_64215532
		dd offset loc_642155A0
off_64220A9C	dd offset loc_64215636	; DATA XREF: _big2_scanRef+14Fr
		dd offset loc_64215646	; jump table for switch	statement
		dd offset loc_64215590
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_6421575E
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215564
		dd offset loc_64215604
		dd offset loc_64215564
		dd offset loc_64215604
		dd offset loc_64215604
		dd offset loc_64215604
		dd offset loc_64215604
		dd offset loc_64215564
		dd offset loc_6421576D
off_64220B00	dd offset loc_64215590	; DATA XREF: _big2_scanRef+1F6r
		dd offset loc_64215590	; jump table for switch	statement
		dd offset loc_64215590
		dd offset loc_64215590
		dd offset loc_64215754
		dd offset loc_64215754
		dd offset loc_64215754
		dd offset loc_64215754
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_642155D2
		dd offset loc_64215740
off_64220BA0	dd offset loc_64215A34	; DATA XREF: _big2_contentTok:loc_6421581Ar
		dd offset loc_64215A34	; jump table for switch	statement
		dd offset loc_64215A94
		dd offset loc_64215A80
		dd offset loc_64215B10
		dd offset loc_64215AF2
		dd offset loc_64215AE1
		dd offset loc_64215AD0
		dd offset loc_64215A34
		dd offset loc_64215A40
		dd offset loc_64215A70
off_64220BCC	dd offset loc_64215960	; DATA XREF: _big2_contentTok+173r
		dd offset loc_64215960	; jump table for switch	statement
		dd offset loc_64215960
		dd offset loc_64215960
		dd offset loc_64215950
		dd offset loc_64215950
		dd offset loc_64215950
		dd offset loc_64215950
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_64215910
		dd offset loc_642159D1
off_64220C6C	dd offset loc_64215950	; DATA XREF: _big2_contentTok:loc_64215965r
		dd offset loc_64215950	; jump table for switch	statement
		dd offset loc_64215950
		dd offset loc_64215950
		dd offset loc_64215980
		dd offset loc_64215940
		dd offset loc_64215970
		dd offset loc_642159C0
		dd offset loc_64215950
		dd offset loc_64215950
		dd offset loc_64215950
off_64220C98	dd offset loc_642159F0	; DATA XREF: _big2_contentTok+225r
		dd offset loc_642159F0	; jump table for switch	statement
		dd offset loc_642159F0
		dd offset loc_642159F0
		dd offset loc_64215A34
		dd offset loc_64215A34
		dd offset loc_64215A34
		dd offset loc_64215A34
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_642158E3
		dd offset loc_64215A00
off_64220D38	dd offset loc_64215BC3	; DATA XREF: _big2_contentTok+304r
		dd offset loc_64215BB6	; jump table for switch	statement
		dd offset loc_64215BA9
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215C09
		dd offset loc_64215C52
		dd offset loc_64215C1D
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BD5
		dd offset loc_64215BA0
		dd offset loc_64215BD5
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215CF0
off_64220D9C	dd offset loc_64215BC3	; DATA XREF: _big2_contentTok+442r
		dd offset loc_64215BB6	; jump table for switch	statement
		dd offset loc_64215BA9
		dd offset loc_64215BA0
		dd offset loc_64215E0C
		dd offset loc_64215E0C
		dd offset loc_64215EC6
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215E3A
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215E0C
		dd offset loc_64215DF7
		dd offset loc_64215E65
		dd offset loc_64215DF7
		dd offset loc_64215DF7
		dd offset loc_64215DF7
		dd offset loc_64215DF7
		dd offset loc_64215BA0
		dd offset loc_64215DB5
off_64220E00	dd offset loc_64215D53	; DATA XREF: _big2_contentTok+48Br
		dd offset loc_64215D46	; jump table for switch	statement
		dd offset loc_64215DA8
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D65
		dd offset loc_64215D3D
		dd offset loc_64215D65
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215D3D
		dd offset loc_64215CFD
off_64220E64	dd offset loc_64215BC3	; DATA XREF: _big2_contentTok+5E1r
		dd offset loc_64215BB6	; jump table for switch	statement
		dd offset loc_64215BA9
		dd offset loc_64215BA0
		dd offset loc_6421622E
		dd offset loc_6421622E
		dd offset loc_642161F5
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_6421622E
		dd offset loc_64215F35
		dd offset loc_64215F35
		dd offset loc_64215F35
		dd offset loc_64215F35
		dd offset loc_64215F35
		dd offset loc_64215F35
		dd offset loc_64215BA0
		dd offset loc_6421678F
off_64220EC8	dd offset loc_64215BC3	; DATA XREF: _big2_contentTok+673r
		dd offset loc_64215BB6	; jump table for switch	statement
		dd offset loc_64215BA9
		dd offset loc_64215BA0
		dd offset loc_64215E0C
		dd offset loc_64215E0C
		dd offset loc_64215EC6
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215E3A
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215E0C
		dd offset loc_642160A2
		dd offset loc_64215BA0
		dd offset loc_642160A2
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_64215BA0
		dd offset loc_6421650F
off_64220F2C	dd offset loc_64215BA9	; DATA XREF: _big2_contentTok+7B6r
		dd offset loc_64215BA9	; jump table for switch	statement
		dd offset loc_64215BA9
		dd offset loc_64215BA9
		dd offset loc_64215F8F
		dd offset loc_64215F8F
		dd offset loc_64215F8F
		dd offset loc_64215F8F
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215B6B
		dd offset loc_64215F7D
off_64220FCC	dd offset loc_64215DA8	; DATA XREF: _big2_contentTok+818r
		dd offset loc_64215DA8	; jump table for switch	statement
		dd offset loc_64215DA8
		dd offset loc_64215DA8
		dd offset loc_64215FF5
		dd offset loc_64215FF5
		dd offset loc_64215FF5
		dd offset loc_64215FF5
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215D05
		dd offset loc_64215FDF
off_6422106C	dd offset loc_64215BA9	; DATA XREF: _big2_contentTok+845r
					; jump table for switch	statement
		dd offset loc_64215BA9	; jumptable 64215AC4 case 7
					; jumptable 64215C02 case 7
					; jumptable 64215DA1 case 7
					; jumptable 64215E33 case 7
					; jumptable 64215F76 cases 0-3
					; jumptable 64216005 cases 0-3
		dd offset loc_64215BA9	; jumptable 64215AC4 case 7
					; jumptable 64215C02 case 7
					; jumptable 64215DA1 case 7
					; jumptable 64215E33 case 7
					; jumptable 64215F76 cases 0-3
					; jumptable 64216005 cases 0-3
		dd offset loc_64215BA9	; jumptable 64215AC4 case 7
					; jumptable 64215C02 case 7
					; jumptable 64215DA1 case 7
					; jumptable 64215E33 case 7
					; jumptable 64215F76 cases 0-3
					; jumptable 64216005 cases 0-3
		dd offset loc_64216023	; jumptable 64216005 cases 4-7
		dd offset loc_64216023	; jumptable 64216005 cases 4-7
		dd offset loc_64216023	; jumptable 64216005 cases 4-7
		dd offset loc_64216023	; jumptable 64216005 cases 4-7
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_64215FB7	; jumptable 64216005 cases 8-38
		dd offset loc_6421600C	; jumptable 64216005 case 39
off_6422110C	dd offset loc_642164BB	; DATA XREF: _big2_contentTok:loc_64216319r
					; jump table for switch	statement
		dd offset loc_642164A5	; jumptable 64216005 case 41
		dd offset loc_64216465	; jumptable 64216005 case 42
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_6421634E	; jumptable 64216005 cases 44,45,56
		dd offset loc_6421634E	; jumptable 64216005 cases 44,45,56
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642163BE	; jumptable 64216005 case 49
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_6421634E	; jumptable 64216005 cases 44,45,56
		dd offset loc_64216443	; jumptable 64216005 cases 57,59-62
		dd offset loc_6421615B	; jumptable 64216005 case 58
		dd offset loc_64216443	; jumptable 64216005 cases 57,59-62
		dd offset loc_64216443	; jumptable 64216005 cases 57,59-62
		dd offset loc_64216443	; jumptable 64216005 cases 57,59-62
		dd offset loc_64216443	; jumptable 64216005 cases 57,59-62
		dd offset loc_642160D7	; jumptable 64216005 cases 43,46-48,50-55,63,65-67,73
					; jumptable 64216508 cases 0-2,8
		dd offset loc_642164CF	; jumptable 64216005 case 64
off_64221170	dd offset loc_642160D7	; DATA XREF: _big2_contentTok:loc_64216508r
		dd offset loc_642160D7	; jump table for switch	statement
		dd offset loc_642160D7
		dd offset loc_64216566
		dd offset loc_6421655D
		dd offset loc_64216550
		dd offset loc_64216536
		dd offset loc_64216594
		dd offset loc_642160D7
off_64221194	dd offset loc_6421666F	; DATA XREF: _big2_contentTok+E1Ar
		dd offset loc_6421666F	; jump table for switch	statement
		dd offset loc_6421665C
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_6421660B
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_6421666F
off_642211C8	dd offset loc_642162AC	; DATA XREF: _big2_contentTok+EDAr
		dd offset loc_6421670F	; jump table for switch	statement
		dd offset loc_6421628E
		dd offset loc_642166A1
		dd offset loc_6421666F
		dd offset loc_6421666F
		dd offset loc_6421665C
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_6421660B
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_6421666F
		dd offset loc_64216701
		dd offset loc_642166A1
		dd offset loc_64216701
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166A1
		dd offset loc_642166D5
off_6422122C	dd offset loc_64216960	; DATA XREF: _big2_scanPercent+3Cr
		dd offset loc_64216975	; jump table for switch	statement
		dd offset loc_642168C5
		dd offset loc_642168A0
		dd offset loc_64216985
		dd offset loc_64216985
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_64216985
		dd offset loc_64216931
		dd offset loc_642168A0
		dd offset loc_64216931
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642169AD
		dd offset loc_64216985
off_64221294	dd offset loc_642168C5	; DATA XREF: _big2_scanPercent+9Er
					; jump table for switch	statement
		dd offset loc_642168C5	; jumptable 64216005 cases 114,138-141,180,203-206
					; jumptable 6421685C case 7
					; jumptable 642168BE cases 0-3,42,65-68
					; jumptable 64216957 case 7
					; jumptable 642169A6 cases 0-3
		dd offset loc_642168C5	; jumptable 64216005 cases 114,138-141,180,203-206
					; jumptable 6421685C case 7
					; jumptable 642168BE cases 0-3,42,65-68
					; jumptable 64216957 case 7
					; jumptable 642169A6 cases 0-3
		dd offset loc_642168C5	; jumptable 64216005 cases 114,138-141,180,203-206
					; jumptable 6421685C case 7
					; jumptable 642168BE cases 0-3,42,65-68
					; jumptable 64216957 case 7
					; jumptable 642169A6 cases 0-3
		dd offset loc_642168E2	; jumptable 64216005 cases 142-145
					; jumptable 642168BE cases 4-7
		dd offset loc_642168E2	; jumptable 64216005 cases 142-145
					; jumptable 642168BE cases 4-7
		dd offset loc_642168E2	; jumptable 64216005 cases 142-145
					; jumptable 642168BE cases 4-7
		dd offset loc_642168E2	; jumptable 64216005 cases 142-145
					; jumptable 642168BE cases 4-7
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_64216870	; jumptable 64216005 cases 146-176
					; jumptable 642168BE cases 8-38
		dd offset loc_642168D3	; jumptable 64216005 case 177
					; jumptable 642168BE case 39
off_64221334	dd offset loc_64216960	; DATA XREF: _big2_scanPercent+137r
		dd offset loc_64216975	; jump table for switch	statement
		dd offset loc_642168C5
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642169D0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_642168A0
		dd offset loc_64216931
		dd offset loc_642168A0
		dd offset loc_64216931
		dd offset loc_64216931
		dd offset loc_64216931
		dd offset loc_64216931
		dd offset loc_642168A0
		dd offset loc_642169DF
off_64221398	dd offset loc_642168C5	; DATA XREF: _big2_scanPercent+186r
		dd offset loc_642168C5	; jump table for switch	statement
		dd offset loc_642168C5
		dd offset loc_642168C5
		dd offset loc_642169C6
		dd offset loc_642169C6
		dd offset loc_642169C6
		dd offset loc_642169C6
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_64216901
		dd offset loc_642169B6
off_64221438	dd offset loc_64216A50	; DATA XREF: _big2_scanLit+44r
		dd offset loc_64216A50	; jump table for switch	statement
		dd offset loc_64216A50
		dd offset loc_64216A50
		dd offset loc_64216A40
		dd offset loc_64216A40
		dd offset loc_64216A40
		dd offset loc_64216A40
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A60
off_642214D8	dd offset loc_64216A40	; DATA XREF: _big2_scanLit:loc_64216A55r
		dd offset loc_64216A40	; jump table for switch	statement
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216AC5
		dd offset loc_64216AB4
		dd offset loc_64216AA3
		dd offset loc_64216A40
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A13
		dd offset loc_64216A70
		dd offset loc_64216A70
off_64221510	dd offset loc_64216B56	; DATA XREF: _big2_attributeValueTok:loc_64216BA1r
		dd offset loc_64216B56	; jump table for switch	statement
		dd offset loc_64216C27
		dd offset loc_64216BE0
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216BA8
		dd offset loc_64216BB2
		dd offset loc_64216B56
		dd offset loc_64216BB7
		dd offset loc_64216BC8
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216B56
		dd offset loc_64216C10
off_64221568	dd offset loc_64216DB7	; DATA XREF: _big2_entityValueTok:loc_64216D10r
		dd offset loc_64216CBA	; jump table for switch	statement
		dd offset loc_64216CBA
		dd offset loc_64216D77
		dd offset loc_64216D65
		dd offset loc_64216CBA
		dd offset loc_64216D30
		dd offset loc_64216D17
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216CBA
		dd offset loc_64216D90
off_642215D8	dd offset loc_64216E80	; DATA XREF: _big2_ignoreSectionTok+6Er
		dd offset loc_64216E80	; jump table for switch	statement
		dd offset loc_64216E80
		dd offset loc_64216E80
		dd offset loc_64216E75
		dd offset loc_64216E75
		dd offset loc_64216E75
		dd offset loc_64216E75
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E4D
		dd offset loc_64216E90
off_64221678	dd offset loc_64216E75	; DATA XREF: _big2_ignoreSectionTok:loc_64216E85r
		dd offset loc_64216E75	; jump table for switch	statement
		dd offset loc_64216F21
		dd offset loc_64216E4D
		dd offset loc_64216ED0
		dd offset loc_64216EC0
		dd offset loc_64216EB0
		dd offset loc_64216EA0
		dd offset loc_64216E75
off_6422169C	dd offset loc_64217280	; DATA XREF: _big2_getAtts+43r
		dd offset loc_642170C0	; jump table for switch	statement
		dd offset loc_64217261
		dd offset loc_64217232
		dd offset loc_64217203
		dd offset loc_642170C0
		dd offset loc_642171C6
		dd offset loc_642171C6
		dd offset loc_642170B0
		dd offset loc_64217195
		dd offset loc_64217164
		dd offset loc_642170C0
		dd offset loc_642170C0
		dd offset loc_642170C0
		dd offset loc_642170B0
		dd offset loc_642170C0
		dd offset loc_642170C0
		dd offset loc_642170C0
		dd offset loc_64217112
		dd offset loc_642170E5
		dd offset loc_642170C0
		dd offset loc_642170E5
		dd offset loc_642170C0
		dd offset loc_642170C0
		dd offset loc_642170C0
		dd offset loc_642170C0
		dd offset loc_642170E5
off_64221708	dd offset loc_64217203	; DATA XREF: _big2_getAtts+7Er
		dd offset loc_64217203	; jump table for switch	statement
		dd offset loc_64217203
		dd offset loc_64217203
		dd offset loc_642172C7
		dd offset loc_642172C7
		dd offset loc_642172C7
		dd offset loc_642172C7
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642170E5
		dd offset loc_642172B7
off_642217A8	dd offset loc_642174C3,	offset loc_642174C3, offset loc_642174C3
					; DATA XREF: _big2_charRefNumber+ACr
		dd offset loc_642174C3,	offset loc_642174C3, offset loc_642174C3 ; jump	table for switch statement
		dd offset loc_642174C3,	offset loc_642174C3, offset loc_642174C3
		dd offset loc_642174C3,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174E0
		dd offset loc_642174E0,	offset loc_642174E0, offset loc_642174E0
		dd offset loc_642174E0,	offset loc_642174E0, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174CB, offset loc_642174CB
		dd offset loc_642174CB,	offset loc_642174D7, offset loc_642174D7
		dd offset loc_642174D7,	offset loc_642174D7, offset loc_642174D7
		dd offset loc_642174D7
off_64221884	dd offset loc_64217719	; DATA XREF: _big2_sameName:loc_642176F0r
		dd offset loc_64217708	; jump table for switch	statement
		dd offset loc_642176F7
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_64217687
		dd offset loc_642176CB
		dd offset loc_642176CB
		dd offset loc_642176CB
		dd offset loc_642176CB
		dd offset loc_642176CB
		dd offset loc_642176CB
		dd offset loc_64217687
		dd offset loc_642176CB
off_642218E8	dd offset loc_642176F7	; DATA XREF: _big2_sameName+EEr
					; jump table for switch	statement
		dd offset loc_642176F7	; jumptable 642176F0 case 2
					; jumptable 6421773E cases 0-3
		dd offset loc_642176F7	; jumptable 642176F0 case 2
					; jumptable 6421773E cases 0-3
		dd offset loc_642176F7	; jumptable 642176F0 case 2
					; jumptable 6421773E cases 0-3
		dd offset loc_64217757	; jumptable 6421773E cases 4-7
		dd offset loc_64217757	; jumptable 6421773E cases 4-7
		dd offset loc_64217757	; jumptable 6421773E cases 4-7
		dd offset loc_64217757	; jumptable 6421773E cases 4-7
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_642176CB	; jumptable 642176F0 cases 17-22,24
					; jumptable 6421773E cases 8-38
		dd offset loc_64217745	; jumptable 6421773E case 39
off_64221988	dd offset loc_642177B0	; DATA XREF: _big2_sameName+138r
					; jump table for switch	statement
		dd offset loc_642177B0	; jumptable 6421773E cases 40-43
					; jumptable 64217788 case 0
		dd offset loc_642177B0	; jumptable 6421773E cases 40-43
					; jumptable 64217788 case 0
		dd offset loc_642177B0	; jumptable 6421773E cases 40-43
					; jumptable 64217788 case 0
		dd offset loc_642177A0	; jumptable 6421773E cases 44-47
		dd offset loc_642177A0	; jumptable 6421773E cases 44-47
		dd offset loc_642177A0	; jumptable 6421773E cases 44-47
		dd offset loc_642177A0	; jumptable 6421773E cases 44-47
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217771	; jumptable 6421773E cases 48-78
		dd offset loc_64217790	; jumptable 6421773E case 79
off_64221A28	dd offset loc_64217875	; DATA XREF: _big2_nameLength+3Fr
		dd offset loc_64217875	; jump table for switch	statement
		dd offset loc_64217875
		dd offset loc_64217875
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217866
off_64221AC8	dd offset loc_64217870	; DATA XREF: _big2_nameLength:loc_64217882r
		dd offset loc_64217895	; jump table for switch	statement
		dd offset loc_64217890
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217844
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217870
		dd offset loc_64217844
		dd offset loc_64217870
off_64221B2C	dd offset loc_64217970	; DATA XREF: _big2_updatePosition+30r
		dd offset loc_642179C0	; jump table for switch	statement
		dd offset loc_642179B0
		dd offset loc_64217970
		dd offset loc_64217985
		dd offset loc_642179D0
off_64221B44	dd offset loc_642181F0	; DATA XREF: _initUpdatePosition+38r
		dd offset loc_642181E0	; jump table for switch	statement
		dd offset loc_642181D0
		dd offset loc_64218163
		dd offset loc_642181A8
		dd offset loc_64218190
off_64221B5C	dd offset loc_642192C5	; DATA XREF: _little2_prologTok+F6r
		dd offset loc_642192B5	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_642191C1
		dd offset loc_642195B5
		dd offset loc_642195B5
		dd offset loc_642195B5
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_6421959B
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642195B5
		dd offset loc_642195B5
		dd offset loc_64219357
		dd offset loc_6421957C
		dd offset loc_64219357
		dd offset loc_64219357
		dd offset loc_64219357
		dd offset loc_64219357
		dd offset loc_642191C1
		dd offset loc_642195D4
		dd offset loc_642195B5
		dd offset loc_642191C1
		dd offset loc_642195B5
		dd offset loc_64219564
		dd offset loc_642195BC
		dd offset loc_642195B5
		dd offset loc_642195B5
off_64221BDC	dd offset loc_642192A0	; DATA XREF: _little2_prologTok+103r
		dd offset loc_642192A0	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_642192A0
		dd offset loc_64219297
		dd offset loc_64219297
		dd offset loc_64219297
		dd offset loc_64219297
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_642191EF
		dd offset loc_64219280
off_64221C7C	dd offset loc_642191C1	; DATA XREF: _little2_prologTok:loc_64219290r
		dd offset loc_642191C1	; jump table for switch	statement
		dd offset loc_642193F0
		dd offset loc_642191C1
		dd offset loc_64219422
		dd offset loc_642192C5
		dd offset loc_642192B5
		dd offset loc_642192A0
		dd offset loc_642191C1
		dd offset loc_64219380
		dd offset loc_64219533
		dd offset loc_642193B0
		dd offset loc_642193C0
		dd offset loc_642194B0
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642194C7
		dd offset loc_64219448
		dd offset loc_64219533
		dd offset loc_6421922B
		dd offset loc_642192F1
		dd offset loc_6421922B
		dd offset loc_642192F1
		dd offset loc_642192F1
		dd offset loc_642192F1
		dd offset loc_642191C1
		dd offset loc_6421953B
		dd offset loc_64219510
		dd offset loc_642194A0
		dd offset loc_64219457
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_64219490
		dd offset loc_64219500
off_64221D10	dd offset loc_642192A0	; DATA XREF: _little2_prologTok+206r
		dd offset loc_642192A0	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_642192A0
		dd offset loc_6421955A
		dd offset loc_6421955A
		dd offset loc_6421955A
		dd offset loc_6421955A
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219314
		dd offset loc_64219543
off_64221DB0	dd offset loc_642195FE	; DATA XREF: _little2_prologTok+317r
		dd offset loc_642195FE	; jump table for switch	statement
		dd offset loc_642195FE
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642195EF
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642195FE
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642195FE
		dd offset loc_642195E0
		dd offset loc_6421960A
		dd offset loc_642195FE
		dd offset loc_642195FE
off_64221E20	dd offset loc_642192C5	; DATA XREF: _little2_prologTok+387r
		dd offset loc_642192B5	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_64219648
		dd offset loc_642191C1
		dd offset loc_64219648
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_6421967A
off_64221E84	dd offset loc_642192C5	; DATA XREF: _little2_prologTok+503r
		dd offset loc_642192B5	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_642191C1
		dd offset loc_642196B7
		dd offset loc_642196B7
		dd offset loc_642196B7
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642196B7
		dd offset loc_64219648
		dd offset loc_642191C1
		dd offset loc_64219648
		dd offset loc_64219648
		dd offset loc_64219648
		dd offset loc_64219648
		dd offset loc_642191C1
		dd offset loc_64219619
		dd offset loc_642196B7
		dd offset loc_642191C1
		dd offset loc_642196B7
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642191C1
		dd offset loc_642196B7
off_64221F04	dd offset loc_6421978D	; DATA XREF: _little2_prologTok+5BEr
		dd offset loc_6421978D	; jump table for switch	statement
		dd offset loc_6421978D
		dd offset loc_6421978D
		dd offset loc_64219419
		dd offset loc_64219419
		dd offset loc_64219419
		dd offset loc_64219419
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219735
		dd offset loc_64219741
off_64221FA4	dd offset loc_642192A0	; DATA XREF: _little2_prologTok+670r
		dd offset loc_642192A0	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_642192A0
		dd offset loc_642197F9
		dd offset loc_642197F9
		dd offset loc_642197F9
		dd offset loc_642197F9
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_64219681
		dd offset loc_642197E7
off_64222044	dd offset loc_642192C5	; DATA XREF: _little2_prologTok+731r
		dd offset loc_642192B5	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_64219591
		dd offset loc_642198D7
		dd offset loc_64219591
		dd offset loc_642198D7
		dd offset loc_642198D7
		dd offset loc_642198D7
		dd offset loc_642198D7
		dd offset loc_64219591
		dd offset loc_642198A8
off_642220A8	dd offset loc_642192A0	; DATA XREF: _little2_prologTok+789r
		dd offset loc_642192A0	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_642192A0
		dd offset loc_64219915
		dd offset loc_64219915
		dd offset loc_64219915
		dd offset loc_64219915
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_642198EF
		dd offset loc_64219900
off_64222148	dd offset loc_642192A0	; DATA XREF: _little2_prologTok+87Er
		dd offset loc_642192A0	; jump table for switch	statement
		dd offset loc_642192A0
		dd offset loc_642192A0
		dd offset loc_64219A07
		dd offset loc_64219A07
		dd offset loc_64219A07
		dd offset loc_64219A07
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199E4
		dd offset loc_642199F5
off_642221E8	dd offset loc_64219D45	; DATA XREF: _big2_prologTok+F8r
		dd offset loc_64219D35	; jump table for switch	statement
		dd offset loc_64219D20
		dd offset loc_64219C41
		dd offset loc_6421A08D
		dd offset loc_6421A08D
		dd offset loc_6421A08D
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_6421A075
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_6421A08D
		dd offset loc_6421A08D
		dd offset loc_64219DD8
		dd offset loc_6421A055
		dd offset loc_64219DD8
		dd offset loc_64219DD8
		dd offset loc_64219DD8
		dd offset loc_64219DD8
		dd offset loc_64219C41
		dd offset loc_6421A094
		dd offset loc_6421A08D
		dd offset loc_64219C41
		dd offset loc_6421A08D
		dd offset loc_6421A03D
		dd offset loc_6421A025
		dd offset loc_6421A08D
		dd offset loc_6421A08D
off_64222268	dd offset loc_64219D20	; DATA XREF: _big2_prologTok+103r
		dd offset loc_64219D20	; jump table for switch	statement
		dd offset loc_64219D20
		dd offset loc_64219D20
		dd offset loc_64219D17
		dd offset loc_64219D17
		dd offset loc_64219D17
		dd offset loc_64219D17
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219C70
		dd offset loc_64219D00
off_64222308	dd offset loc_64219C41	; DATA XREF: _big2_prologTok:loc_64219D10r
		dd offset loc_64219C41	; jump table for switch	statement
		dd offset loc_64219E70
		dd offset loc_64219C41
		dd offset loc_64219EE2
		dd offset loc_64219D45
		dd offset loc_64219D35
		dd offset loc_64219D20
		dd offset loc_64219C41
		dd offset loc_64219E00
		dd offset loc_64219FF3
		dd offset loc_64219E30
		dd offset loc_64219E40
		dd offset loc_64219F70
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_64219F87
		dd offset loc_64219F08
		dd offset loc_64219FF3
		dd offset loc_64219CAD
		dd offset loc_64219D71
		dd offset loc_64219CAD
		dd offset loc_64219D71
		dd offset loc_64219D71
		dd offset loc_64219D71
		dd offset loc_64219C41
		dd offset loc_64219FFB
		dd offset loc_64219FD0
		dd offset loc_64219F60
		dd offset loc_64219F17
		dd offset loc_64219C41
		dd offset loc_64219C41
		dd offset loc_64219F51
		dd offset loc_64219FC0
off_6422239C	dd offset loc_64219D20	; DATA XREF: _big2_prologTok+206r
		dd offset loc_64219D20	; jump table for switch	statement
		dd offset loc_64219D20
		dd offset loc_64219D20
		dd offset loc_6421A01B
		dd offset loc_6421A01B
		dd offset loc_6421A01B
		dd offset loc_6421A01B
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_64219D95
		dd offset loc_6421A004
off_6422243C	dd offset loc_6421A155	; DATA XREF: _big2_prologTok+3C8r
		dd offset loc_6421A142	; jump table for switch	statement
		dd offset loc_6421A134
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A105
		dd offset loc_6421A0D0
		dd offset loc_6421A105
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0A0
off_642224A0	dd offset loc_6421A155	; DATA XREF: _big2_prologTok+53Dr
		dd offset loc_6421A142	; jump table for switch	statement
		dd offset loc_6421A134
		dd offset loc_6421A0D0
		dd offset loc_6421A165
		dd offset loc_6421A165
		dd offset loc_6421A165
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A165
		dd offset loc_6421A105
		dd offset loc_6421A0D0
		dd offset loc_6421A105
		dd offset loc_6421A105
		dd offset loc_6421A105
		dd offset loc_6421A105
		dd offset loc_6421A0D0
		dd offset loc_6421A0D9
		dd offset loc_6421A165
		dd offset loc_6421A0D0
		dd offset loc_6421A165
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A165
off_64222520	dd offset loc_6421A1FD	; DATA XREF: _big2_prologTok+5EEr
		dd offset loc_6421A1FD	; jump table for switch	statement
		dd offset loc_6421A1FD
		dd offset loc_6421A1FD
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A0D0
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1E5
		dd offset loc_6421A1F1
off_642225C0	dd offset loc_6421A134	; DATA XREF: _big2_prologTok+62Ar
		dd offset loc_6421A134	; jump table for switch	statement
		dd offset loc_6421A134
		dd offset loc_6421A134
		dd offset loc_6421A235
		dd offset loc_6421A235
		dd offset loc_6421A235
		dd offset loc_6421A235
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A0A4
		dd offset loc_6421A221
off_64222660	dd offset loc_6421A2A9	; DATA XREF: _big2_prologTok:loc_6421A275r
		dd offset loc_6421A2A9	; jump table for switch	statement
		dd offset loc_6421A2A9
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_6421A29A
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_6421A2A9
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_64219F48
		dd offset loc_6421A2A9
		dd offset loc_6421A28B
		dd offset loc_6421A27C
		dd offset loc_6421A2A9
		dd offset loc_6421A2A9
off_642226D0	dd offset loc_64219D45	; DATA XREF: _big2_prologTok+761r
		dd offset loc_64219D35	; jump table for switch	statement
		dd offset loc_64219D20
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A06A
		dd offset loc_6421A388
		dd offset loc_6421A06A
		dd offset loc_6421A388
		dd offset loc_6421A388
		dd offset loc_6421A388
		dd offset loc_6421A388
		dd offset loc_6421A06A
		dd offset loc_6421A358
off_64222734	dd offset loc_6421A134	; DATA XREF: _big2_prologTok+7B8r
		dd offset loc_6421A134	; jump table for switch	statement
		dd offset loc_6421A134
		dd offset loc_6421A134
		dd offset loc_6421A3BF
		dd offset loc_6421A3BF
		dd offset loc_6421A3BF
		dd offset loc_6421A3BF
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A0DD
		dd offset loc_6421A3AF
off_642227D4	dd offset loc_64219D20	; DATA XREF: _big2_prologTok+8AAr
		dd offset loc_64219D20	; jump table for switch	statement
		dd offset loc_64219D20
		dd offset loc_64219D20
		dd offset loc_6421A4B5
		dd offset loc_6421A4B5
		dd offset loc_6421A4B5
		dd offset loc_6421A4B5
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A490
		dd offset loc_6421A4A1
_KW_version	db 'version',0          ; DATA XREF: _doParseXmlDecl+77o
_KW_encoding	db 'encoding',0         ; DATA XREF: _doParseXmlDecl+122o
_KW_standalone	db 'standalone',0       ; DATA XREF: _doParseXmlDecl+144o
_KW_yes		db 'yes',0              ; DATA XREF: _doParseXmlDecl+2A4o
_KW_no		db 'no',0               ; DATA XREF: _doParseXmlDecl+36Co
_KW_UTF_16	db 55h			; DATA XREF: _findEncoding+A6r
					; _findEncodingNS+A6r ...
aTf16		db 'TF-16',0
		align 10h
_encodingsNS	dd offset _latin1_encoding_ns ;	DATA XREF: _initScanPrologNS+18o
					; _initScanContentNS+18o ...
		dd offset _ascii_encoding_ns
		dd offset _utf8_encoding_ns
		dd offset _big2_encoding_ns
		dd offset _big2_encoding_ns
		dd offset _little2_encoding_ns
		dd offset _utf8_encoding_ns
		align 10h
_latin1_encoding dd offset _normal_prologTok ; DATA XREF: _XmlInitUnknownEncoding+11o
					; _XmlInitUnknownEncoding:loc_642184E0r ...
off_642228C4	dd offset _normal_contentTok ; DATA XREF: _XmlInitUnknownEncoding+1Eo
		dd offset _normal_cdataSectionTok
		dd offset _normal_ignoreSectionTok
		dd offset _normal_attributeValueTok
		dd offset _normal_entityValueTok
		dd offset _normal_sameName
		dd offset _normal_nameMatchesAscii
		dd offset _normal_nameLength
		dd offset _normal_skipS
		dd offset _normal_getAtts
		dd offset _normal_charRefNumber
		dd offset _normal_predefinedEntityName
		dd offset _normal_updatePosition
		dd offset _normal_isPublicId
		dd offset _latin1_toUtf8
		dd offset _latin1_toUtf16
		dd 1, 0
byte_6422290C	db 0			; DATA XREF: _normal_charRefNumber:loc_64211835r
					; _little2_charRefNumber+72r ...
		align 10h
		dd 0
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
_nmstrtPages	db 2			; DATA XREF: _utf8_isNmstrt2+27r
					; _utf8_isNmstrt3+33r ...
		db 3, 4, 5
		dd 80706h, 0B0A0900h, 0F0E0D0Ch, 1110h,	2 dup(0)
		dd 13120000h, 1400h, 3 dup(0)
		dd 1615h, 6 dup(0)
		dd 1010000h, 13h dup(1010101h),	17010101h, 3 dup(0)
		dd 0Ah dup(1010101h), 18010101h, 0Ah dup(0)
_namingBitmap	dd 0			; DATA XREF: _utf8_isName2+48r
					; _utf8_isName3+55r ...
		align 20h
		dd 8 dup(0FFFFFFFFh), 0
		dd 4000000h, 87FFFFFEh,	7FFFFFEh, 2 dup(0)
		dd 2 dup(0FF7FFFFFh), 0FFFFFFFFh, 7FF3FFFFh, 0FFFFFDFEh
		dd 7FFFFFFFh, 2	dup(0FFFFFFFFh), 0FFFFE00Fh, 0FC31FFFFh
		dd 0FFFFFFh, 0
		dd 0FFFF0000h, 2 dup(0FFFFFFFFh), 0F80001FFh, 3, 5 dup(0)
		dd 0FFFFD740h, 0FFFFFFFBh, 547F7FFFh, 0FFFFDh, 0FFFFDFFEh
		dd 0FFFFFFFFh, 0DFFEFFFFh, 0FFFFFFFFh, 0FFFF0003h, 0FFFFFFFFh
		dd 0FFFF199Fh, 33FCFFFh, 0
		dd 0FFFE0000h, 27FFFFFh, 0FFFFFFFEh, 7Fh, 0
		dd 0FFFF0000h, 707FFh, 0
		dd 7FFFFFEh, 7FEh, 0FFFE0000h, 0FFFFFFFFh, 7CFFFFFFh, 2F7FFFh
		dd 60h,	0FFFFFFE0h, 23FFFFFFh, 0FF000000h, 3, 0FFF99FE0h
		dd 3C5FDFFh, 0B0000000h, 30003h, 0FFF987E0h, 36DFDFFh
		dd 5E000000h, 1C0000h, 0FFFBAFE0h, 23EDFDFFh, 0
		dd 1, 0FFF99FE0h, 23CDFDFFh, 0B0000000h, 3, 0D63DC7E0h
		dd 3BFC718h, 2 dup(0)
		dd 0FFFDDFE0h, 3EFFDFFh, 0
		dd 3, 0FFFDDFE0h, 3EFFDFFh, 40000000h, 3, 0FFFDDFE0h, 3FFFDFFh
		dd 0
		dd 3, 4	dup(0)
		dd 0FFFFFFFEh, 0D7FFFh,	3Fh, 0
		dd 0FEF02596h, 200D6CAEh, 1Fh, 3 dup(0)
		dd 0FFFFFEFFh, 3FFh, 9 dup(0)
		dd 0FFFFFFFFh, 0FFFF003Fh, 7FFFFFh, 7DAEDh, 50000000h
		dd 82315001h, 2C62ABh, 40000000h, 0F580C900h, 7, 2010800h
		dd 4 dup(0FFFFFFFFh), 0FFFFFFFh, 2 dup(0FFFFFFFFh), 3FFFFFFh
		dd 3F3FFFFFh, 0FFFFFFFFh, 0AAFF3F3Fh, 3FFFFFFFh, 0FFFFFFFFh
		dd 5FDFFFFFh, 0FCF1FDCh, 1FDC1FFFh, 0
		dd 4C40h, 2 dup(0)
		dd 7, 3	dup(0)
		dd 80h,	3FEh, 0FFFFFFFEh, 0FFFFFFFFh, 1FFFFFh, 0FFFFFFFEh
		dd 0FFFFFFFFh, 7FFFFFFh, 0FFFFFFE0h, 1FFFh, 6 dup(0)
		dd 5 dup(0FFFFFFFFh), 3Fh, 2 dup(0)
		dd 5 dup(0FFFFFFFFh), 0Fh, 3 dup(0)
		dd 7FF6000h, 87FFFFFEh,	7FFFFFEh, 0
		dd 800000h, 2 dup(0FF7FFFFFh), 0FFFFFFh, 0
		dd 0FFFF0000h, 2 dup(0FFFFFFFFh), 0F80001FFh, 30003h, 0
		dd 2 dup(0FFFFFFFFh), 3Fh, 3, 0FFFFD7C0h, 0FFFFFFFBh, 547F7FFFh
		dd 0FFFFDh, 0FFFFDFFEh,	0FFFFFFFFh, 0DFFEFFFFh,	0FFFFFFFFh
		dd 0FFFF007Bh, 0FFFFFFFFh, 0FFFF199Fh, 33FCFFFh, 0
		dd 0FFFE0000h, 27FFFFFh, 0FFFFFFFEh, 0FFFE007Fh, 0BBFFFFFBh
		dd 0FFFF0016h, 707FFh, 0
		dd 7FFFFFEh, 7FFFFh, 0FFFF03FFh, 0FFFFFFFFh, 7CFFFFFFh
		dd 0FFEF7FFFh, 3FF3DFFh, 0FFFFFFEEh, 0F3FFFFFFh, 0FF1E3FFFh
		dd 0FFCFh, 0FFF99FEEh, 0D3C5FDFFh, 0B080399Fh, 3FFCFh
		dd 0FFF987E4h, 0D36DFDFFh, 5E003987h, 1FFFC0h, 0FFFBAFEEh
		dd 0F3EDFDFFh, 3BBFh, 0FFC1h, 0FFF99FEEh, 0F3CDFDFFh, 0B0C0398Fh
		dd 0FFC3h, 0D63DC7ECh, 0C3BFC718h, 803DC7h, 0FF80h, 0FFFDDFEEh
		dd 0C3EFFDFFh, 603DDFh,	0FFC3h,	0FFFDDFECh, 0C3EFFDFFh
		dd 40603DDFh, 0FFC3h, 0FFFDDFECh, 0C3FFFDFFh, 803DCFh
		dd 0FFC3h, 4 dup(0)
		dd 0FFFFFFFEh, 7FF7FFFh, 3FF7FFFh, 0
		dd 0FEF02596h, 3BFF6CAEh, 3FF3F5Fh, 0
		dd 3000000h, 0C2A003FFh, 0FFFFFEFFh, 0FFFE03FFh, 0FEBF0FDFh
		dd 2FE3FFFh, 8 dup(0)
		dd 1FFF0000h, 2, 0A0h, 3EFFFEh,	0FFFFFFFEh, 0FFFFFFFFh
		dd 661FFFFFh, 0FFFFFFFEh, 0FFFFFFFFh, 77FFFFFFh
_namePages	db 19h			; DATA XREF: _utf8_isName2+27r
					; _utf8_isName3+33r ...
		db 3, 1Ah, 1Bh
		dd 1E1D1Ch, 21201F00h, 25242322h, 1110h, 2 dup(0)
		dd 13120000h, 1426h, 3 dup(0)
		dd 1627h, 6 dup(0)
		dd 1010000h, 13h dup(1010101h),	17010101h, 3 dup(0)
		dd 0Ah dup(1010101h), 18010101h, 0Ah dup(0)
_encodingNames_10248 dd	offset _KW_ISO_8859_1 ;	DATA XREF: _findEncoding:loc_6421806Ar
					; _XmlInitEncoding+52r	...
					; "ISO-8859-1"
		dd offset _KW_US_ASCII	; "US-ASCII"
		dd offset _KW_UTF_8	; "UTF-8"
		dd offset _KW_UTF_16
		dd offset _KW_UTF_16BE	; "UTF-16BE"
		dd offset _KW_UTF_16LE	; "UTF-16LE"
		align 10h
_utf8_encoding	dd offset _normal_prologTok ; DATA XREF: .rdata:642235D8o
					; .rdata:642235E8o
		dd offset _normal_contentTok
		dd offset _normal_cdataSectionTok
		dd offset _normal_ignoreSectionTok
		dd offset _normal_attributeValueTok
		dd offset _normal_entityValueTok
		dd offset _normal_sameName
		dd offset _normal_nameMatchesAscii
		dd offset _normal_nameLength
		dd offset _normal_skipS
		dd offset _normal_getAtts
		dd offset _normal_charRefNumber
		dd offset _normal_predefinedEntityName
		dd offset _normal_updatePosition
		dd offset _normal_isPublicId
		dd offset _utf8_toUtf8
		dd offset _utf8_toUtf16
		dd 2 dup(1)
byte_642231AC	db 0			; DATA XREF: _initUpdatePosition+26r
					; _initUpdatePosition+65r
		align 10h
		dd 0
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 10h dup(8080808h), 8 dup(5050505h)
		dd 4 dup(6060606h), 7070707h, 7, 0
		dd 1010000h
		dd offset _utf8_isName2
		dd offset _utf8_isName3
		dd offset _isNever
		dd offset _utf8_isNmstrt2
		dd offset _utf8_isNmstrt3
		dd offset _isNever
		dd offset _utf8_isInvalid2
		dd offset _utf8_isInvalid3
		dd offset _utf8_isInvalid4
		align 20h
_internal_little2_encoding_ns dd offset	_little2_prologTok
					; DATA XREF: _XmlGetUtf16InternalEncodingNSo
		dd offset _little2_contentTok
		dd offset _little2_cdataSectionTok
		dd offset _little2_ignoreSectionTok
		dd offset _little2_attributeValueTok
		dd offset _little2_entityValueTok
		dd offset _little2_sameName
		dd offset _little2_nameMatchesAscii
		dd offset _little2_nameLength
		dd offset _little2_skipS
		dd offset _little2_getAtts
		dd offset _little2_charRefNumber
		dd offset _little2_predefinedEntityName
		dd offset _little2_updatePosition
		dd offset _little2_isPublicId
		dd offset _little2_toUtf8
		dd offset _little2_toUtf16
		dd 2, 100h, 2 dup(0)
		dd 0A1500h, 1500h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
_internal_utf8_encoding_ns dd offset _normal_prologTok
					; DATA XREF: _XmlGetUtf8InternalEncodingNSo
		dd offset _normal_contentTok
		dd offset _normal_cdataSectionTok
		dd offset _normal_ignoreSectionTok
		dd offset _normal_attributeValueTok
		dd offset _normal_entityValueTok
		dd offset _normal_sameName
		dd offset _normal_nameMatchesAscii
		dd offset _normal_nameLength
		dd offset _normal_skipS
		dd offset _normal_getAtts
		dd offset _normal_charRefNumber
		dd offset _normal_predefinedEntityName
		dd offset _normal_updatePosition
		dd offset _normal_isPublicId
		dd offset _utf8_toUtf8
		dd offset _utf8_toUtf16
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 1500h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 10h dup(8080808h), 8 dup(5050505h)
		dd 4 dup(6060606h), 7070707h, 7, 0
		dd 1010000h
		dd offset _utf8_isName2
		dd offset _utf8_isName3
		dd offset _isNever
		dd offset _utf8_isNmstrt2
		dd offset _utf8_isNmstrt3
		dd offset _isNever
		dd offset _utf8_isInvalid2
		dd offset _utf8_isInvalid3
		dd offset _utf8_isInvalid4
_encodings	dd offset _latin1_encoding ; DATA XREF:	_initScanProlog+18o
					; _initScanContent+18o	...
		dd offset _ascii_encoding
		dd offset _utf8_encoding
		dd offset _big2_encoding
		dd offset _big2_encoding
		dd offset _little2_encoding
		dd offset _utf8_encoding
		align 20h
_internal_little2_encoding dd offset _little2_prologTok
					; DATA XREF: _XmlGetUtf16InternalEncodingo
		dd offset _little2_contentTok
		dd offset _little2_cdataSectionTok
		dd offset _little2_ignoreSectionTok
		dd offset _little2_attributeValueTok
		dd offset _little2_entityValueTok
		dd offset _little2_sameName
		dd offset _little2_nameMatchesAscii
		dd offset _little2_nameLength
		dd offset _little2_skipS
		dd offset _little2_getAtts
		dd offset _little2_charRefNumber
		dd offset _little2_predefinedEntityName
		dd offset _little2_updatePosition
		dd offset _little2_isPublicId
		dd offset _little2_toUtf8
		dd offset _little2_toUtf16
		dd 2, 100h, 2 dup(0)
		dd 0A1500h, 1500h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
_internal_utf8_encoding	dd offset _normal_prologTok
					; DATA XREF: _XmlGetUtf8InternalEncodingo
		dd offset _normal_contentTok
		dd offset _normal_cdataSectionTok
		dd offset _normal_ignoreSectionTok
		dd offset _normal_attributeValueTok
		dd offset _normal_entityValueTok
		dd offset _normal_sameName
		dd offset _normal_nameMatchesAscii
		dd offset _normal_nameLength
		dd offset _normal_skipS
		dd offset _normal_getAtts
		dd offset _normal_charRefNumber
		dd offset _normal_predefinedEntityName
		dd offset _normal_updatePosition
		dd offset _normal_isPublicId
		dd offset _utf8_toUtf8
		dd offset _utf8_toUtf16
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 1500h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 10h dup(8080808h), 8 dup(5050505h)
		dd 4 dup(6060606h), 7070707h, 7, 0
		dd 1010000h
		dd offset _utf8_isName2
		dd offset _utf8_isName3
		dd offset _isNever
		dd offset _utf8_isNmstrt2
		dd offset _utf8_isNmstrt3
		dd offset _isNever
		dd offset _utf8_isInvalid2
		dd offset _utf8_isInvalid3
		dd offset _utf8_isInvalid4
		align 20h
_CSWTCH_450	dd 1Bh			; DATA XREF: _normal_scanLit+7Er
		dd 2 dup(1Bh), 8 dup(0)
		dd 2 dup(1Bh), 8 dup(0)
		dd 1Bh,	2 dup(0)
_CSWTCH_452	dd 0			; DATA XREF: _normal_sameName+3Ar
		dd 2 dup(0)
		dd 0Eh dup(1), 6 dup(0)
		dd 1, 8	dup(0)
_CSWTCH_454	dd 1Bh			; DATA XREF: _little2_scanLit:loc_64213F6Ar
		dd 2 dup(1Bh), 8 dup(0)
		dd 2 dup(1Bh), 8 dup(0)
		dd 1Bh,	2 dup(0)
_CSWTCH_456	dd 0			; DATA XREF: _little2_sameName:loc_64214C00r
					; _little2_sameName+165r ...
		dd 2 dup(0)
		dd 0Eh dup(1), 6 dup(0)
		dd 1, 8	dup(0)
_CSWTCH_458	dd 1Bh			; DATA XREF: _big2_scanLit:loc_64216A9Ar
		dd 2 dup(1Bh), 8 dup(0)
		dd 2 dup(1Bh), 8 dup(0)
		dd 1Bh,	2 dup(0)
_CSWTCH_460	dd 0			; DATA XREF: _big2_sameName:loc_64217776r
					; _big2_sameName+155r ...
		dd 2 dup(0)
		dd 0Eh dup(1), 6 dup(0)
		dd 1, 8	dup(0)
_CSWTCH_462	dd 1			; DATA XREF: _parsePseudoAttribute+5Er
					; _parsePseudoAttribute+B0r ...
		dd 1, 2	dup(0)
		dd 1, 12h dup(0)
		dd 1
_latin1_encoding_ns dd offset _normal_prologTok	; DATA XREF: .rdata:_encodingsNSo
		dd offset _normal_contentTok
		dd offset _normal_cdataSectionTok
		dd offset _normal_ignoreSectionTok
		dd offset _normal_attributeValueTok
		dd offset _normal_entityValueTok
		dd offset _normal_sameName
		dd offset _normal_nameMatchesAscii
		dd offset _normal_nameLength
		dd offset _normal_skipS
		dd offset _normal_getAtts
		dd offset _normal_charRefNumber
		dd offset _normal_predefinedEntityName
		dd offset _normal_updatePosition
		dd offset _normal_isPublicId
		dd offset _latin1_toUtf8
		dd offset _latin1_toUtf16
		dd 1, 3	dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
_ascii_encoding_ns dd offset _normal_prologTok ; DATA XREF: .rdata:642228A4o
		dd offset _normal_contentTok
		dd offset _normal_cdataSectionTok
		dd offset _normal_ignoreSectionTok
		dd offset _normal_attributeValueTok
		dd offset _normal_entityValueTok
		dd offset _normal_sameName
		dd offset _normal_nameMatchesAscii
		dd offset _normal_nameLength
		dd offset _normal_skipS
		dd offset _normal_getAtts
		dd offset _normal_charRefNumber
		dd offset _normal_predefinedEntityName
		dd offset _normal_updatePosition
		dd offset _normal_isPublicId
		dd offset _ascii_toUtf8
		dd offset _latin1_toUtf16
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 2Dh dup(0)
_utf8_encoding_ns dd offset _normal_prologTok ;	DATA XREF: .rdata:642228A8o
					; .rdata:642228B8o
		dd offset _normal_contentTok
		dd offset _normal_cdataSectionTok
		dd offset _normal_ignoreSectionTok
		dd offset _normal_attributeValueTok
		dd offset _normal_entityValueTok
		dd offset _normal_sameName
		dd offset _normal_nameMatchesAscii
		dd offset _normal_nameLength
		dd offset _normal_skipS
		dd offset _normal_getAtts
		dd offset _normal_charRefNumber
		dd offset _normal_predefinedEntityName
		dd offset _normal_updatePosition
		dd offset _normal_isPublicId
		dd offset _utf8_toUtf8
		dd offset _utf8_toUtf16
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 10h dup(8080808h), 8 dup(5050505h)
		dd 4 dup(6060606h), 7070707h, 7, 0
		dd 1010000h
		dd offset _utf8_isName2
		dd offset _utf8_isName3
		dd offset _isNever
		dd offset _utf8_isNmstrt2
		dd offset _utf8_isNmstrt3
		dd offset _isNever
		dd offset _utf8_isInvalid2
		dd offset _utf8_isInvalid3
		dd offset _utf8_isInvalid4
		align 20h
_big2_encoding_ns dd offset _big2_prologTok ; DATA XREF: .rdata:642228ACo
					; .rdata:642228B0o
		dd offset _big2_contentTok
		dd offset _big2_cdataSectionTok
		dd offset _big2_ignoreSectionTok
		dd offset _big2_attributeValueTok
		dd offset _big2_entityValueTok
		dd offset _big2_sameName
		dd offset _big2_nameMatchesAscii
		dd offset _big2_nameLength
		dd offset _big2_skipS
		dd offset _big2_getAtts
		dd offset _big2_charRefNumber
		dd offset _big2_predefinedEntityName
		dd offset _big2_updatePosition
		dd offset _big2_isPublicId
		dd offset _big2_toUtf8
		dd offset _big2_toUtf16
		dd 2, 3	dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
_little2_encoding_ns dd	offset _little2_prologTok ; DATA XREF: .rdata:642228B4o
		dd offset _little2_contentTok
		dd offset _little2_cdataSectionTok
		dd offset _little2_ignoreSectionTok
		dd offset _little2_attributeValueTok
		dd offset _little2_entityValueTok
		dd offset _little2_sameName
		dd offset _little2_nameMatchesAscii
		dd offset _little2_nameLength
		dd offset _little2_skipS
		dd offset _little2_getAtts
		dd offset _little2_charRefNumber
		dd offset _little2_predefinedEntityName
		dd offset _little2_updatePosition
		dd offset _little2_isPublicId
		dd offset _little2_toUtf8
		dd offset _little2_toUtf16
		dd 2, 100h, 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 9 dup(0)
_KW_ISO_8859_1	db 'ISO-8859-1',0       ; DATA XREF: .rdata:_encodingNames_10248o
_KW_US_ASCII	db 'US-ASCII',0         ; DATA XREF: .rdata:64223144o
_KW_UTF_8	db 'UTF-8',0            ; DATA XREF: .rdata:64223148o
_KW_UTF_16BE	db 'UTF-16BE',0         ; DATA XREF: .rdata:64223150o
_KW_UTF_16LE	db 'UTF-16LE',0         ; DATA XREF: .rdata:64223154o
		align 10h
_ascii_encoding	dd offset _normal_prologTok ; DATA XREF: .rdata:642235D4o
		dd offset _normal_contentTok
		dd offset _normal_cdataSectionTok
		dd offset _normal_ignoreSectionTok
		dd offset _normal_attributeValueTok
		dd offset _normal_entityValueTok
		dd offset _normal_sameName
		dd offset _normal_nameMatchesAscii
		dd offset _normal_nameLength
		dd offset _normal_skipS
		dd offset _normal_getAtts
		dd offset _normal_charRefNumber
		dd offset _normal_predefinedEntityName
		dd offset _normal_updatePosition
		dd offset _normal_isPublicId
		dd offset _ascii_toUtf8
		dd offset _latin1_toUtf16
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 2Dh dup(0)
_big2_encoding	dd offset _big2_prologTok ; DATA XREF: .rdata:642235DCo
					; .rdata:642235E0o
		dd offset _big2_contentTok
		dd offset _big2_cdataSectionTok
		dd offset _big2_ignoreSectionTok
		dd offset _big2_attributeValueTok
		dd offset _big2_entityValueTok
		dd offset _big2_sameName
		dd offset _big2_nameMatchesAscii
		dd offset _big2_nameLength
		dd offset _big2_skipS
		dd offset _big2_getAtts
		dd offset _big2_charRefNumber
		dd offset _big2_predefinedEntityName
		dd offset _big2_updatePosition
		dd offset _big2_isPublicId
		dd offset _big2_toUtf8
		dd offset _big2_toUtf16
		dd 2, 3	dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
_little2_encoding dd offset _little2_prologTok ; DATA XREF: .rdata:642235E4o
		dd offset _little2_contentTok
		dd offset _little2_cdataSectionTok
		dd offset _little2_ignoreSectionTok
		dd offset _little2_attributeValueTok
		dd offset _little2_entityValueTok
		dd offset _little2_sameName
		dd offset _little2_nameMatchesAscii
		dd offset _little2_nameLength
		dd offset _little2_skipS
		dd offset _little2_getAtts
		dd offset _little2_charRefNumber
		dd offset _little2_predefinedEntityName
		dd offset _little2_updatePosition
		dd offset _little2_isPublicId
		dd offset _little2_toUtf8
		dd offset _little2_toUtf16
		dd 2, 100h, 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
		public ___dyn_tls_init_callback
; const	PIMAGE_TLS_CALLBACK __dyn_tls_init_callback
___dyn_tls_init_callback dd offset ___dyn_tls_init@12
					; DATA XREF: __CRT_INIT@12:loc_64201137r
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: ___report_error+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: ___report_error+19Ao
; char msg[]
msg		db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: ___report_error+186o
					; __pei386_runtime_relocator+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: __pei386_runtime_relocator+267o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: __pei386_runtime_relocator+F4o
		align 4
; const	EXCEPTION_POINTERS GS_ExceptionPointers
_GS_ExceptionPointers EXCEPTION_POINTERS <offset _GS_ExceptionRecord, \
					; DATA XREF: ___report_gsfailure+58o
				    offset _GS_ContextRecord>
; const	WCHAR LibFileName
LibFileName:				; DATA XREF: ___mingw_get_msvcrt_handle:loc_6421B4D5o
		unicode	0, <msvcrt.dll>,0
		align 4
		public __rt_psrelocs_end
__rt_psrelocs_end dd 0			; DATA XREF: __pei386_runtime_relocator+57o
					; __pei386_runtime_relocator+5Co ...
dword_64224918	dd 0			; DATA XREF: __pei386_runtime_relocator+7Ar
dword_6422491C	dd 0			; DATA XREF: __pei386_runtime_relocator+84r
dword_64224920	dd 38h dup(0)		; DATA XREF: __pei386_runtime_relocator+8Do
		align 800h
_rdata		ends

; Section 4. (virtual address 00025000)
; Virtual size			: 000003C8 (	968.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 64225000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		public __bss_start__
; int _bss_start__
__bss_start__	dd ?			; DATA XREF: __CRT_INIT@12+Dr
					; __CRT_INIT@12+22w ...
		public __tls_index
; ULONG	_tls_index
__tls_index	dd ?			; DATA XREF: .tls:TlsIndex_ptro
		public _mingw_initltsdrot_force
; int mingw_initltsdrot_force
_mingw_initltsdrot_force dd ?
		public _mingw_initltsdyn_force
; int mingw_initltsdyn_force
_mingw_initltsdyn_force	dd ?
		public _mingw_initltssuo_force
; int mingw_initltssuo_force
_mingw_initltssuo_force	dd ?
		public _mingw_app_type
; int mingw_app_type
_mingw_app_type	dd ?			; DATA XREF: _DllMainCRTStartup@12+7w
; sSecInfo_0 *the_secs
_the_secs	dd ?			; DATA XREF: ___report_error+8Cr
					; ___report_error+C5r ...
; int maxSections
_maxSections	dd ?			; DATA XREF: ___report_error:loc_6421A900r
					; ___report_error:loc_6421A9A2w ...
; Function-local static	variable
; int was_init_56313
_was_init_56313	dd ?			; DATA XREF: __pei386_runtime_relocator+9r
					; __pei386_runtime_relocator:loc_6421AA50w
; int initialized
_initialized	dd ?			; DATA XREF: ___main+3r
					; ___main:loc_6421AD51w
		align 20h
; EXCEPTION_RECORD GS_ExceptionRecord
_GS_ExceptionRecord EXCEPTION_RECORD <?> ; DATA	XREF: ___report_gsfailure+12w
					; .rdata:_GS_ExceptionPointerso ...
		align 20h
; CONTEXT GS_ContextRecord
_GS_ContextRecord CONTEXT <?>		; DATA XREF: .rdata:_GS_ExceptionPointerso
		align 20h
; volatile int __mingwthr_cs_init
___mingwthr_cs_init dd ?		; DATA XREF: ___mingwthr_run_key_dtors+7r
					; ___mingw_TLScallback+26r ...
; CRITICAL_SECTION __mingwthr_cs
___mingwthr_cs	CRITICAL_SECTION <?>	; DATA XREF: ___mingwthr_run_key_dtors:loc_6421AEF8o
					; ___mingwthr_run_key_dtors:loc_6421AF45o ...
; volatile __mingwthr_key_t *key_dtor_list
_key_dtor_list	dd ?			; DATA XREF: ___mingwthr_run_key_dtors+25r
					; ____w64_mingwthr_remove_key_dtor+25r	...
; char _RUNTIME_PSEUDO_RELOC_LIST_END__[8]
__RUNTIME_PSEUDO_RELOC_LIST_END__ db 8 dup(?) ;	DATA XREF: ___mingw_get_msvcrt_handle+6r
					; ___mingw_get_msvcrt_handle+9Aw ...
		public ___onexitend
; _PVFV	*__onexitend
___onexitend	dd ?			; DATA XREF: _pre_c_init+21w
					; __CRT_INIT@12+143r ...
		public ___onexitbegin
; _PVFV	*__onexitbegin
___onexitbegin	dd ?			; DATA XREF: _pre_c_init+1Cw
					; __CRT_INIT@12:loc_64201170r ...
		public ___native_startup_lock
; volatile void	*__native_startup_lock
___native_startup_lock dd ?		; DATA XREF: __CRT_INIT@12+4Co
					; __CRT_INIT@12+C1o ...
		public ___native_startup_state
; volatile __enative_startup_state_0 __native_startup_state
___native_startup_state	dd ?		; DATA XREF: __CRT_INIT@12+5Fr
					; __CRT_INIT@12:loc_64201116r ...
		dd 4 dup(?)
		public __bss_end__
__bss_end__	dd 30Eh	dup(?)
_bss		ends

;
; Imports from KERNEL32.dll
;
; Section 6. (virtual address 00027000)
; Virtual size			: 00000548 (   1352.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00023400
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
; void __stdcall _DeleteCriticalSection_4(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__DeleteCriticalSection@4:dword
					; CODE XREF: ___mingw_TLScallback+41p
					; DATA XREF: ___mingw_TLScallback+41r
; void __stdcall _EnterCriticalSection_4(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__EnterCriticalSection@4:dword
					; CODE XREF: ___mingwthr_run_key_dtors+1Fp
					; ____w64_mingwthr_remove_key_dtor+1Fp	...
; HANDLE __stdcall _GetCurrentProcess_0()
		extrn __imp__GetCurrentProcess@0:dword ; CODE XREF: ___report_gsfailure+68p
					; DATA XREF: ___report_gsfailure+68r
; DWORD	__stdcall _GetCurrentProcessId_0()
		extrn __imp__GetCurrentProcessId@0:dword
					; CODE XREF: ___security_init_cookie+6Cp
					; DATA XREF: ___security_init_cookie+6Cr
; DWORD	__stdcall _GetCurrentThreadId_0()
		extrn __imp__GetCurrentThreadId@0:dword
					; CODE XREF: ___security_init_cookie+74p
					; DATA XREF: ___security_init_cookie+74r
; DWORD	__stdcall _GetLastError_0()
		extrn __imp__GetLastError@0:dword ; CODE XREF: ___mingwthr_run_key_dtors+4Cp
					; DATA XREF: ___mingwthr_run_key_dtors+38r
; HMODULE __stdcall _GetModuleHandleA_4(LPCSTR lpModuleName)
		extrn __imp__GetModuleHandleA@4:dword ;	CODE XREF: ___gcc_register_frame+16p
					; ___mingw_get_msvcrt_handle+91p
					; DATA XREF: ...
; FARPROC __stdcall _GetProcAddress_8(HMODULE hModule, LPCSTR lpProcName)
		extrn __imp__GetProcAddress@8:dword ; CODE XREF: ___gcc_register_frame+35p
					; DATA XREF: ___gcc_register_frame+35r
; void __stdcall _GetSystemTimeAsFileTime_4(LPFILETIME lpSystemTimeAsFileTime)
		extrn __imp__GetSystemTimeAsFileTime@4:dword
					; CODE XREF: ___security_init_cookie+57p
					; DATA XREF: ___security_init_cookie+57r
; DWORD	__stdcall _GetTickCount_0()
		extrn __imp__GetTickCount@0:dword ; CODE XREF: ___security_init_cookie+7Cp
					; DATA XREF: ___security_init_cookie+7Cr
; void __stdcall _InitializeCriticalSection_4(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__InitializeCriticalSection@4:dword
					; CODE XREF: ___mingw_TLScallback+77p
					; DATA XREF: ___mingw_TLScallback+77r
; PVOID	__stdcall _InterlockedCompareExchange_12(PVOID *Destination, PVOID Exchange, PVOID Comperand)
		extrn __imp__InterlockedCompareExchange@12:dword
; LONG __stdcall _InterlockedExchange_8(LPLONG Target, LONG Value)
		extrn __imp__InterlockedExchange@8:dword
; void __stdcall _LeaveCriticalSection_4(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__LeaveCriticalSection@4:dword
					; CODE XREF: ___mingwthr_run_key_dtors+6Cp
					; ____w64_mingwthr_remove_key_dtor+56p	...
; HMODULE __stdcall _LoadLibraryW_4(LPCWSTR lpLibFileName)
		extrn __imp__LoadLibraryW@4:dword
					; CODE XREF: ___mingw_get_msvcrt_handle+ACp
					; DATA XREF: ___mingw_get_msvcrt_handle+ACr
; BOOL __stdcall _QueryPerformanceCounter_4(LARGE_INTEGER *lpPerformanceCount)
		extrn __imp__QueryPerformanceCounter@4:dword
					; CODE XREF: ___security_init_cookie+8Bp
					; DATA XREF: ___security_init_cookie+8Br
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall _SetUnhandledExceptionFilter_4(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn __imp__SetUnhandledExceptionFilter@4:dword
					; CODE XREF: ___report_gsfailure+4Fp
					; DATA XREF: ___report_gsfailure+4Fr
; void __stdcall _Sleep_4(DWORD	dwMilliseconds)
		extrn __imp__Sleep@4:dword ; CODE XREF:	__CRT_INIT@12+37p
					; __CRT_INIT@12+B0p
					; DATA XREF: ...
; BOOL __stdcall _TerminateProcess_8(HANDLE hProcess, UINT uExitCode)
		extrn __imp__TerminateProcess@8:dword ;	CODE XREF: ___report_gsfailure+79p
					; DATA XREF: ___report_gsfailure+79r
; LPVOID __stdcall _TlsGetValue_4(DWORD	dwTlsIndex)
		extrn __imp__TlsGetValue@4:dword ; CODE	XREF: ___mingwthr_run_key_dtors+45p
					; DATA XREF: ___mingwthr_run_key_dtors+32r
; LONG __stdcall _UnhandledExceptionFilter_4(struct _EXCEPTION_POINTERS	*ExceptionInfo)
		extrn __imp__UnhandledExceptionFilter@4:dword
					; CODE XREF: ___report_gsfailure+5Fp
					; DATA XREF: ___report_gsfailure+5Fr
; BOOL __stdcall _VirtualProtect_16(LPVOID lpAddress, DWORD dwSize, DWORD flNewProtect,	PDWORD lpflOldProtect)
		extrn __imp__VirtualProtect@16:dword ; CODE XREF: ___report_error+16Bp
					; __pei386_runtime_relocator+1B2p
					; DATA XREF: ...
; DWORD	__stdcall _VirtualQuery_12(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION	lpBuffer, DWORD	dwLength)
		extrn __imp__VirtualQuery@12:dword ; CODE XREF:	___report_error+108p
					; __pei386_runtime_relocator+184p
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
		extrn __imp____dllonexit:dword ; DATA XREF: ___dllonexitr
		extrn __imp___amsg_exit:dword ;	DATA XREF: __amsg_exitr
		extrn __imp___initterm:dword ; DATA XREF: __inittermr
; FILE __iob[]
		extrn __imp___iob:dword	; DATA XREF: ___report_error+4r
					; ___report_error+3Cr
		extrn __imp___lock:dword ; DATA	XREF: __lockr
; _onexit_t __cdecl __onexit(_onexit_t)
		extrn __imp___onexit:dword ; CODE XREF:	_mingw_onexit+A3p
					; DATA XREF: _mingw_onexit+A3r
		extrn __imp___unlock:dword ; DATA XREF:	__unlockr
; void __cdecl __noreturn _abort()
		extrn __imp__abort:dword ; DATA	XREF: _abortr
; void *__cdecl	_calloc(size_t,	size_t)
		extrn __imp__calloc:dword ; DATA XREF: _callocr
; void __cdecl _free(void *)
		extrn __imp__free:dword	; DATA XREF: _freer
; size_t __cdecl _fwrite(const void *, size_t, size_t, FILE *)
		extrn __imp__fwrite:dword ; DATA XREF: _fwriter
; void *__cdecl	_malloc(size_t)
		extrn __imp__malloc:dword ; DATA XREF: _mallocr
; void *__cdecl	_memcpy(void *,	const void *, size_t)
		extrn __imp__memcpy:dword ; DATA XREF: _memcpyr
; void *__cdecl	_memmove(void *, const void *, size_t)
		extrn __imp__memmove:dword ; DATA XREF:	_memmover
; void *__cdecl	_memset(void *,	int, size_t)
		extrn __imp__memset:dword ; DATA XREF: _memsetr
; int __cdecl _rand()
		extrn __imp__rand:dword	; DATA XREF: _randr
; void *__cdecl	_realloc(void *, size_t)
		extrn __imp__realloc:dword ; DATA XREF:	_reallocr
; void __cdecl _srand(unsigned int)
		extrn __imp__srand:dword ; DATA	XREF: _srandr
; size_t __cdecl _strlen(const char *)
		extrn __imp__strlen:dword ; DATA XREF: _strlenr
; int __cdecl _strncmp(const char *, const char	*, size_t)
		extrn __imp__strncmp:dword ; DATA XREF:	_strncmpr
; time_t __cdecl _time(time_t *)
		extrn __imp__time:dword	; DATA XREF: __time32+3r
; int __cdecl _vfprintf(FILE *,	const char *, va_list)
		extrn __imp__vfprintf:dword ; DATA XREF: _vfprintfr


; Section 7. (virtual address 00028000)
; Virtual size			: 0000002C (	 44.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00023A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 64228000h
		public ___crt_xc_start__
; _PVFV	__crt_xc_start__[1]
___crt_xc_start__ dd 0			; DATA XREF: __CRT_INIT@12+1DDo
		public ___xc_z
; _PVFV	__xc_z[1]
___xc_z		dd 0			; DATA XREF: __CRT_INIT@12+1D5o
		public ___crt_xc_end__
; _PVFV	__crt_xc_end__[1]
___crt_xc_end__	dd 0			; DATA XREF: __CRT_INIT@12+1C9o
		public _pcinit
; _PIFV	pcinit
_pcinit		dd offset _pre_c_init
		public ___xi_z
; _PVFV	__xi_z[1]
___xi_z		dd 0			; DATA XREF: __CRT_INIT@12+1C1o
		public ___xl_a
; PIMAGE_TLS_CALLBACK __xl_a
___xl_a		dd 0
		public ___xl_c
; PIMAGE_TLS_CALLBACK __xl_c
___xl_c		dd offset ___dyn_tls_init@12 ; DATA XREF: .tls:TlsCallbacks_ptro
		public ___xl_d
; PIMAGE_TLS_CALLBACK __xl_d
___xl_d		dd offset ___dyn_tls_dtor@12
		public ___xl_z
; PIMAGE_TLS_CALLBACK __xl_z
___xl_z		dd 0
		public ___crt_xt_end__
; _PVFV	__crt_xt_end__
___crt_xt_end__	dd 0
; _PVFV	__xd_z
___xd_z		dd 0			; DATA XREF: ___dyn_tls_init@12:loc_6421A811o
					; ___dyn_tls_init@12+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 00029000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00023C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 64229000h
		public __tls_used
; const	IMAGE_TLS_DIRECTORY _tls_used
__tls_used	dd offset TlsStart
TlsEnd_ptr	dd offset __tls_end
TlsIndex_ptr	dd offset __tls_index
TlsCallbacks_ptr dd offset ___xl_c
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		public __tls_start
; char _tls_start
__tls_start	db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:__tls_usedo
		public __tls_end
; char _tls_end[4068]
__tls_end	db 1E4h	dup(0),	0E00h dup(?) ; DATA XREF: .tls:TlsEnd_ptro
_tls		ends


		end _DllMainCRTStartup@12
