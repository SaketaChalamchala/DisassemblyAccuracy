;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	207DDFEC3466752B490CB3CA2EBB8E57
; Input	CRC32 :	21084561

; File Name   :	C:\compspace\compare\gpg\dlls\original\libgcc_s_sjlj-1.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	6CEC0000
; Section 1. (virtual address 00001000)
; Virtual size			: 00007114 (  28948.)
; Section size in file		: 00007200 (  29184.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6CEC1000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_6CEC1000	proc near		; DATA XREF: .CRT:6CECE00Co

Size		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+Size],	80h ; Size
		call	malloc
		mov	ebx, eax
		mov	[esp+1Ch+Size],	eax
		call	sub_6CEC72C0
		test	ebx, ebx
		mov	ds:dword_6CECB3DC, eax
		mov	ds:dword_6CECB3D8, eax
		mov	eax, 1
		jz	short loc_6CEC1035
		mov	dword ptr [ebx], 0
		xor	al, al

loc_6CEC1035:				; CODE XREF: sub_6CEC1000+2Bj
		add	esp, 18h
		pop	ebx
		retn
sub_6CEC1000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC1040	proc near		; CODE XREF: sub_6CEC1260+DAp
					; sub_6CEC1260+128p ...

dwMilliseconds	= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	edx, [esp+1Ch+arg_4]
		test	edx, edx
		jnz	short loc_6CEC10C6
		mov	edx, ds:dword_6CECB000
		xor	eax, eax
		test	edx, edx
		jle	short loc_6CEC10BE
		sub	edx, 1
		mov	ebx, ds:Sleep
		mov	ds:dword_6CECB000, edx
		jmp	short loc_6CEC107C
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1070:				; CODE XREF: sub_6CEC1040+5Dj
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	ebx ; Sleep
		sub	esp, 4

loc_6CEC107C:				; CODE XREF: sub_6CEC1040+28j
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+dwMilliseconds], offset dword_6CECB3E0
		call	sub_6CEC7F60
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6CEC1070
		mov	eax, ds:dword_6CECB3E4
		cmp	eax, 2
		jz	loc_6CEC1170
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, 1

loc_6CEC10BE:				; CODE XREF: sub_6CEC1040+17j
					; sub_6CEC1040+8Ej
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6CEC10C6:				; CODE XREF: sub_6CEC1040+Bj
		cmp	edx, 1
		mov	eax, 1
		jnz	short loc_6CEC10BE
		mov	eax, large fs:18h
		mov	esi, ds:Sleep
		mov	ebx, [eax+4]
		jmp	short loc_6CEC10F5
; ---------------------------------------------------------------------------

loc_6CEC10E1:				; CODE XREF: sub_6CEC1040+D2j
		cmp	eax, ebx
		jz	loc_6CEC1238
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_6CEC10F5:				; CODE XREF: sub_6CEC1040+9Fj
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+dwMilliseconds], offset dword_6CECB3E0
		call	sub_6CEC7F60
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6CEC10E1
		xor	ebx, ebx

loc_6CEC1116:				; CODE XREF: sub_6CEC1040+1FDj
		mov	eax, ds:dword_6CECB3E4
		test	eax, eax
		jz	loc_6CEC11F7
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit

loc_6CEC112F:				; CODE XREF: sub_6CEC1040+1F3j
		test	ebx, ebx
		jz	loc_6CEC1242

loc_6CEC1137:				; CODE XREF: sub_6CEC1040+219j
		mov	eax, ds:off_6CECA314
		test	eax, eax
		jz	short loc_6CEC115C
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 2
		mov	[esp+1Ch+var_14], edx
		mov	edx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwMilliseconds], edx
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_6CEC115C:				; CODE XREF: sub_6CEC1040+FEj
		add	ds:dword_6CECB000, 1
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6CEC1170:				; CODE XREF: sub_6CEC1040+67j
		mov	eax, ds:dword_6CECB3DC
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_6CEC72B0
		test	eax, eax
		mov	ebx, eax
		jz	short loc_6CEC11C9
		mov	eax, ds:dword_6CECB3D8
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_6CEC72B0
		mov	esi, eax

loc_6CEC1192:				; CODE XREF: sub_6CEC1040+15Dj
		sub	esi, 4
		cmp	ebx, esi
		ja	short loc_6CEC11A8

loc_6CEC1199:				; CODE XREF: sub_6CEC1040+166j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6CEC1192
		sub	esi, 4
		call	eax
		cmp	ebx, esi
		jbe	short loc_6CEC1199

loc_6CEC11A8:				; CODE XREF: sub_6CEC1040+157j
		mov	[esp+1Ch+dwMilliseconds], ebx ;	Memory
		nop
		lea	esi, [esi+0]
		call	free
		mov	ds:dword_6CECB3D8, 0
		mov	ds:dword_6CECB3DC, 0

loc_6CEC11C9:				; CODE XREF: sub_6CEC1040+141j
		mov	ds:dword_6CECB3E4, 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_6CECB3E0
		call	sub_6CEC7F90
		mov	eax, 1
		sub	esp, 8
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6CEC11F7:				; CODE XREF: sub_6CEC1040+DDj
		mov	ds:dword_6CECB3E4, 1
		mov	[esp+1Ch+var_18], offset dword_6CECE010
		mov	[esp+1Ch+dwMilliseconds], offset dword_6CECE008
		call	_initterm
		mov	[esp+1Ch+var_18], offset dword_6CECE004
		mov	[esp+1Ch+dwMilliseconds], offset dword_6CECE000
		call	_initterm
		mov	ds:dword_6CECB3E4, 2
		jmp	loc_6CEC112F
; ---------------------------------------------------------------------------

loc_6CEC1238:				; CODE XREF: sub_6CEC1040+A3j
		mov	ebx, 1
		jmp	loc_6CEC1116
; ---------------------------------------------------------------------------

loc_6CEC1242:				; CODE XREF: sub_6CEC1040+F1j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_6CECB3E0
		call	sub_6CEC7F90
		sub	esp, 8
		jmp	loc_6CEC1137
sub_6CEC1040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC1260	proc near		; CODE XREF: DllEntryPoint+1Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		test	edx, edx
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_C], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, ecx
		mov	[esp+2Ch+var_8], edi
		mov	dword_6CEC9028,	edx
		jnz	short loc_6CEC12E0
		mov	eax, ds:dword_6CECB000
		test	eax, eax
		jz	loc_6CEC13B7
		call	sub_6CEC7480

loc_6CEC1295:				; CODE XREF: sub_6CEC1260+90j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC7700
		sub	esp, 0Ch
		cmp	esi, 3
		mov	edi, eax
		jz	loc_6CEC13A0
		test	esi, esi
		jz	loc_6CEC13A0

loc_6CEC12BB:				; CODE XREF: sub_6CEC1260+B2j
					; sub_6CEC1260+F9j ...
		mov	eax, edi
		mov	ebx, [esp+2Ch+var_10]
		mov	dword_6CEC9028,	0FFFFFFFFh
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC12E0:				; CODE XREF: sub_6CEC1260+21j
		lea	eax, [edx-1]
		cmp	eax, 1
		jbe	short loc_6CEC1360

loc_6CEC12E8:				; CODE XREF: sub_6CEC1260+134j
		call	sub_6CEC7480
		cmp	esi, 1
		jnz	short loc_6CEC1295
		call	sub_6CEC1880
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC7700
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	short loc_6CEC12BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC7700
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC1040
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC7710
		sub	esp, 0Ch
		jmp	loc_6CEC12BB
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1360:				; CODE XREF: sub_6CEC1260+86j
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC7710
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jz	loc_6CEC12BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC1040
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	loc_6CEC12E8
		jmp	loc_6CEC12BB
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC13A0:				; CODE XREF: sub_6CEC1260+4Dj
					; sub_6CEC1260+55j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC1040
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6CEC13C0

loc_6CEC13B7:				; CODE XREF: sub_6CEC1260+2Aj
		xor	edi, edi
		jmp	loc_6CEC12BB
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC13C0:				; CODE XREF: sub_6CEC1260+155j
		test	edi, edi
		jz	loc_6CEC12BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6CEC7710
		sub	esp, 0Ch
		mov	edi, eax
		jmp	loc_6CEC12BB
sub_6CEC1260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_10		= dword	ptr -10h
hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpReserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+fdwReason]
		mov	ds:dword_6CECB044, 0
		cmp	edx, 1
		jz	short loc_6CEC1420

loc_6CEC1406:				; CODE XREF: DllEntryPoint+3Dj
		mov	ecx, [esp+1Ch+lpReserved]
		mov	eax, [esp+1Ch+hinstDLL]
		call	sub_6CEC1260
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1420:				; CODE XREF: DllEntryPoint+14j
		mov	[esp+1Ch+var_10], edx
		call	sub_6CEC77B0
		mov	edx, [esp+1Ch+var_10]
		jmp	short loc_6CEC1406
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6CEC1430	proc near		; CODE XREF: sub_6CEC80E0+6p

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_6CEC903C
		test	eax, eax
		jz	short locret_6CEC147B
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcj_s.dll"
		call	ds:GetModuleHandleA
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_6CEC146E
		mov	[esp+18h+lpProcName], offset ProcName ;	"_Jv_RegisterClasses"
		mov	[esp+18h+lpModuleName],	edx ; hModule
		call	ds:GetProcAddress
		sub	esp, 8

loc_6CEC146E:				; CODE XREF: sub_6CEC1430+28j
		test	eax, eax
		jz	short locret_6CEC147B
		mov	[esp+18h+lpModuleName],	offset dword_6CEC903C
		call	eax

locret_6CEC147B:			; CODE XREF: sub_6CEC1430+Dj
					; sub_6CEC1430+40j
		leave
		retn
sub_6CEC1430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6CEC1480()
sub_6CEC1480	proc near		; DATA XREF: sub_6CEC80E0+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_6CEC1480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC1490	proc near		; CODE XREF: sub_6CEC7480+3Cp

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_6CEC14B1

loc_6CEC149C:				; CODE XREF: sub_6CEC1490+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_6CEC149C

loc_6CEC14B1:				; CODE XREF: sub_6CEC1490+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
sub_6CEC1490	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  66. __muldi3

; =============== S U B	R O U T	I N E =======================================


		public __muldi3
__muldi3	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		mov	[esp+0Ch+var_C], ebx
		mov	ebx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	ecx, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_4], edi
		mov	edi, [esp+0Ch+var_4]
		mov	eax, ebx
		mul	ecx
		mov	esi, edx
		mov	edx, [esp+0Ch+arg_C]
		imul	ecx, [esp+0Ch+arg_4]
		imul	edx, ebx
		mov	ebx, [esp+0Ch+var_C]
		add	edx, ecx
		add	edx, esi
		mov	esi, [esp+0Ch+var_8]
		add	esp, 0Ch
		retn
__muldi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  71. __negdi2

; =============== S U B	R O U T	I N E =======================================


		public __negdi2
__negdi2	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		mov	[esp+8+var_4], esi
		mov	ecx, [esp+8+arg_0]
		mov	esi, [esp+8+arg_4]
		mov	[esp+8+var_8], ebx
		xor	ebx, ebx
		mov	eax, ecx
		neg	esi
		test	ecx, ecx
		setnz	bl
		mov	edx, esi
		mov	esi, [esp+8+var_4]
		sub	edx, ebx
		neg	eax
		mov	ebx, [esp+8+var_8]
		add	esp, 8
		retn
__negdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  63. __lshrdi3

; =============== S U B	R O U T	I N E =======================================


		public __lshrdi3
__lshrdi3	proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	[esp+10h+var_10], ebx
		mov	ebx, [esp+10h+arg_8]
		mov	[esp+10h+var_C], esi
		mov	eax, [esp+10h+arg_0]
		mov	[esp+10h+var_8], edi
		mov	edx, [esp+10h+arg_4]
		mov	[esp+10h+var_4], ebp
		test	ebx, ebx
		jz	short loc_6CEC1587
		mov	esi, eax
		mov	eax, 20h
		sub	eax, ebx
		mov	ebp, edx
		test	eax, eax
		jle	short loc_6CEC15A0
		mov	ecx, ebx
		mov	edi, edx
		shr	edi, cl
		mov	ebp, edx
		mov	ecx, eax
		shl	ebp, cl
		mov	ecx, ebx
		shr	esi, cl
		or	ebp, esi

loc_6CEC1583:				; CODE XREF: __lshrdi3+68j
		mov	eax, ebp
		mov	edx, edi

loc_6CEC1587:				; CODE XREF: __lshrdi3+20j
		mov	ebx, [esp+10h+var_10]
		mov	esi, [esp+10h+var_C]
		mov	edi, [esp+10h+var_8]
		mov	ebp, [esp+10h+var_4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC15A0:				; CODE XREF: __lshrdi3+2Fj
		neg	eax
		xor	edi, edi
		mov	ecx, eax
		shr	ebp, cl
		jmp	short loc_6CEC1583
__lshrdi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. __ashldi3

; =============== S U B	R O U T	I N E =======================================


		public __ashldi3
__ashldi3	proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	[esp+10h+var_10], ebx
		mov	ebx, [esp+10h+arg_8]
		mov	[esp+10h+var_C], esi
		mov	eax, [esp+10h+arg_0]
		mov	[esp+10h+var_8], edi
		mov	edx, [esp+10h+arg_4]
		mov	[esp+10h+var_4], ebp
		test	ebx, ebx
		jz	short loc_6CEC15F1
		mov	esi, 20h
		mov	edi, eax
		sub	esi, ebx
		mov	ebp, edx
		test	esi, esi
		jle	short loc_6CEC1604
		mov	ecx, ebx
		mov	edx, eax
		shl	eax, cl
		mov	ecx, esi
		shr	edx, cl
		mov	ecx, ebx
		shl	ebp, cl
		or	edx, ebp

loc_6CEC15F1:				; CODE XREF: __ashldi3+20j
					; __ashldi3+5Ej
		mov	ebx, [esp+10h+var_10]
		mov	esi, [esp+10h+var_C]
		mov	edi, [esp+10h+var_8]
		mov	ebp, [esp+10h+var_4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_6CEC1604:				; CODE XREF: __ashldi3+2Fj
		neg	esi
		mov	edx, edi
		mov	ecx, esi
		xor	eax, eax
		shl	edx, cl
		jmp	short loc_6CEC15F1
__ashldi3	endp

; Exported entry  26. __ashrdi3

; =============== S U B	R O U T	I N E =======================================


		public __ashrdi3
__ashrdi3	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	[esp+0Ch+var_C], ebx
		mov	ebx, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_8], esi
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_4], edi
		mov	edx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	short loc_6CEC164F
		mov	esi, eax
		mov	eax, 20h
		sub	eax, ebx
		test	eax, eax
		jle	short loc_6CEC1660
		mov	edi, edx
		mov	ecx, ebx
		sar	edi, cl
		mov	ecx, eax
		shl	edx, cl
		mov	ecx, ebx
		shr	esi, cl
		or	edx, esi

loc_6CEC164B:				; CODE XREF: __ashrdi3+5Bj
		mov	eax, edx
		mov	edx, edi

loc_6CEC164F:				; CODE XREF: __ashrdi3+1Cj
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1660:				; CODE XREF: __ashrdi3+29j
		neg	eax
		mov	edi, edx
		mov	ecx, eax
		sar	edi, 1Fh
		sar	edx, cl
		jmp	short loc_6CEC164B
__ashrdi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. __cmpdi2

; =============== S U B	R O U T	I N E =======================================


		public __cmpdi2
__cmpdi2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	edx, [esp+4+arg_4]
		mov	eax, [esp+4+arg_C]
		mov	ebx, [esp+4+arg_0]
		mov	ecx, [esp+4+arg_8]
		cmp	edx, eax
		jl	short loc_6CEC16A7
		jg	short loc_6CEC16A0
		cmp	ebx, ecx
		jb	short loc_6CEC16A7
		nop
		lea	esi, [esi+0]
		ja	short loc_6CEC16A0
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC16A0:				; CODE XREF: __cmpdi2+15j __cmpdi2+20j
		mov	eax, 2
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC16A7:				; CODE XREF: __cmpdi2+13j __cmpdi2+19j
		xor	eax, eax
		pop	ebx
		retn
__cmpdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  89. __ucmpdi2

; =============== S U B	R O U T	I N E =======================================


		public __ucmpdi2
__ucmpdi2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	edx, [esp+4+arg_4]
		mov	eax, [esp+4+arg_C]
		mov	ebx, [esp+4+arg_0]
		mov	ecx, [esp+4+arg_8]
		cmp	edx, eax
		jb	short loc_6CEC16E7
		ja	short loc_6CEC16E0
		cmp	ebx, ecx
		jb	short loc_6CEC16E7
		nop
		lea	esi, [esi+0]
		ja	short loc_6CEC16E0
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC16E0:				; CODE XREF: __ucmpdi2+15j
					; __ucmpdi2+20j
		mov	eax, 2
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC16E7:				; CODE XREF: __ucmpdi2+13j
					; __ucmpdi2+19j
		xor	eax, eax
		pop	ebx
		retn
__ucmpdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. __clear_cache

; =============== S U B	R O U T	I N E =======================================


		public __clear_cache
__clear_cache	proc near
		rep retn
__clear_cache	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  44. __enable_execute_stack

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _enable_execute_stack(LPCVOID)
		public __enable_execute_stack
__enable_execute_stack proc near

lpAddress	= dword	ptr -3Ch
lpBuffer	= dword	ptr -38h
dwLength	= dword	ptr -34h
lpflOldProtect	= dword	ptr -30h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-28h
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		lea	eax, [esp+3Ch+Buffer]
		mov	[esp+3Ch+lpBuffer], eax	; lpBuffer
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+dwLength], 1Ch	; dwLength
		mov	[esp+3Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_6CEC1753
		lea	eax, [esp+3Ch+Buffer.Protect]
		mov	[esp+3Ch+lpflOldProtect], eax ;	lpflOldProtect
		mov	eax, [esp+3Ch+Buffer.RegionSize]
		mov	[esp+3Ch+dwLength], 40h	; flNewProtect
		mov	[esp+3Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+3Ch+Buffer.BaseAddress]
		mov	[esp+3Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC1753:				; CODE XREF: __enable_execute_stack+25j
		call	abort
__enable_execute_stack endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, 1000h
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	edx, 40h
		mov	eax, [esp+38h]
		cmp	eax, 7
		jz	short loc_6CEC179D
		cmp	eax, 5
		mov	dl, 20h
		jz	short loc_6CEC179D
		cmp	eax, 4
		mov	dl, 10h
		jz	short loc_6CEC179D
		cmp	eax, 3
		mov	dl, 4
		jz	short loc_6CEC179D
		cmp	eax, 1
		mov	dl, 2
		jnz	short loc_6CEC17D7

loc_6CEC179D:				; CODE XREF: .text:6CEC177Fj
					; .text:6CEC1786j ...
		lea	eax, [esp+1Ch]
		mov	[esp+0Ch], eax
		mov	eax, [esp+34h]
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, [esp+30h]
		mov	[esp], eax
		call	ds:VirtualProtect
		mov	edx, eax
		sub	esp, 10h
		xor	eax, eax
		test	edx, edx
		jz	short loc_6CEC17D0

loc_6CEC17C9:				; CODE XREF: .text:6CEC17D5j
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC17D0:				; CODE XREF: .text:6CEC17C7j
					; .text:6CEC17D9j
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6CEC17C9
; ---------------------------------------------------------------------------

loc_6CEC17D7:				; CODE XREF: .text:6CEC179Bj
		test	eax, eax
		jnz	short loc_6CEC17D0
		mov	dl, 1
		lea	esi, [esi+0]
		jmp	short loc_6CEC179D
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6CEC17F0()
sub_6CEC17F0	proc near		; DATA XREF: sub_6CEC1880:loc_6CEC184Ao
		sub	esp, 0Ch
		mov	edx, off_6CEC9000
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_6CEC1817
		nop

loc_6CEC1800:				; CODE XREF: sub_6CEC17F0+25j
		add	edx, 4
		mov	off_6CEC9000, edx
		call	eax
		mov	edx, off_6CEC9000
		mov	eax, [edx]
		test	eax, eax
		jnz	short loc_6CEC1800

loc_6CEC1817:				; CODE XREF: sub_6CEC17F0+Dj
		add	esp, 0Ch
		retn
sub_6CEC17F0	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6CEC1880

loc_6CEC1820:				; CODE XREF: sub_6CEC1880+1Ej
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:dword_6CEC8100
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_6CEC1860

loc_6CEC1830:				; CODE XREF: sub_6CEC1880-Cj
		test	ebx, ebx
		jz	short loc_6CEC184A
		lea	esi, dword_6CEC8100[ebx*4]
		nop
		lea	esi, [esi+0]

loc_6CEC1840:				; CODE XREF: sub_6CEC1880-38j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_6CEC1840

loc_6CEC184A:				; CODE XREF: sub_6CEC1880-4Ej
		mov	[esp+1Ch+var_1C], offset sub_6CEC17F0 ;	_onexit_t
		call	sub_6CEC71B0
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_6CEC1880
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6CEC1880

loc_6CEC1860:				; CODE XREF: sub_6CEC1880-52j
		xor	ebx, ebx
		jmp	short loc_6CEC1866
; ---------------------------------------------------------------------------

loc_6CEC1864:				; CODE XREF: sub_6CEC1880-Ej
		mov	ebx, eax

loc_6CEC1866:				; CODE XREF: sub_6CEC1880-1Ej
		lea	eax, [ebx+1]
		mov	edx, ds:dword_6CEC8100[eax*4]
		test	edx, edx
		jnz	short loc_6CEC1864
		jmp	short loc_6CEC1830
; END OF FUNCTION CHUNK	FOR sub_6CEC1880
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC1880	proc near		; CODE XREF: sub_6CEC1260+92p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 6CEC1820 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 6CEC1860 SIZE 00000016 BYTES

		sub	esp, 0Ch
		mov	ecx, ds:dword_6CECB004
		test	ecx, ecx
		jz	short loc_6CEC1891
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC1891:				; CODE XREF: sub_6CEC1880+Bj
		mov	ds:dword_6CECB004, 1
		add	esp, 0Ch
		jmp	short loc_6CEC1820
sub_6CEC1880	endp ; sp-analysis failed

; Exported entry  22. __absvsi2

; =============== S U B	R O U T	I N E =======================================


		public __absvsi2
__absvsi2	proc near

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		test	edx, edx
		mov	eax, edx
		js	short loc_6CEC18B1

loc_6CEC18AD:				; CODE XREF: __absvsi2+15j
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC18B1:				; CODE XREF: __absvsi2+Bj
		neg	eax
		test	eax, eax
		jns	short loc_6CEC18AD
		call	abort
__absvsi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. __absvdi2

; =============== S U B	R O U T	I N E =======================================


		public __absvdi2
__absvdi2	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	ecx, [esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], ebx
		mov	[esp+0Ch+var_4], esi
		test	ecx, ecx
		mov	esi, ecx
		mov	ebx, edx
		js	short loc_6CEC18F0

loc_6CEC18DB:				; CODE XREF: __absvdi2+39j
		mov	eax, ebx
		mov	edx, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC18F0:				; CODE XREF: __absvdi2+19j
		neg	ebx
		adc	esi, 0
		neg	esi
		test	esi, esi
		jns	short loc_6CEC18DB
		call	abort
__absvdi2	endp

; Exported entry  24. __addvsi3

; =============== S U B	R O U T	I N E =======================================


		public __addvsi3
__addvsi3	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	ecx, [esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		test	ecx, ecx
		lea	eax, [ecx+edx]
		js	short loc_6CEC1920
		cmp	eax, edx
		setl	dl

loc_6CEC1917:				; CODE XREF: __addvsi3+25j
		test	dl, dl
		jnz	short loc_6CEC1927
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1920:				; CODE XREF: __addvsi3+10j
		cmp	eax, edx
		setnle	dl
		jmp	short loc_6CEC1917
; ---------------------------------------------------------------------------

loc_6CEC1927:				; CODE XREF: __addvsi3+19j
		call	abort
__addvsi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. __addvdi3

; =============== S U B	R O U T	I N E =======================================


		public __addvdi3
__addvdi3	proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], edi
		mov	edi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], ebp
		mov	edx, [esp+1Ch+arg_0]
		mov	ebp, [esp+1Ch+arg_C]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_10], ebx
		mov	ebx, edi
		add	ebx, edx
		mov	[esp+1Ch+var_C], esi
		mov	esi, ebp
		adc	esi, ecx
		test	ebp, ebp
		js	short loc_6CEC1975
		cmp	esi, ecx
		jl	short loc_6CEC1969
		jg	short loc_6CEC1982
		cmp	ebx, edx
		jnb	short loc_6CEC1982

loc_6CEC1969:				; CODE XREF: __addvdi3+31j
					; __addvdi3+47j ...
		lea	esi, [esi+0]
		call	abort
; ---------------------------------------------------------------------------

loc_6CEC1975:				; CODE XREF: __addvdi3+2Dj
		cmp	esi, ecx
		jg	short loc_6CEC1969
		jl	short loc_6CEC1982
		cmp	ebx, edx
		lea	esi, [esi+0]
		ja	short loc_6CEC1969

loc_6CEC1982:				; CODE XREF: __addvdi3+33j
					; __addvdi3+37j ...
		mov	eax, ebx
		mov	edx, esi
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
__addvdi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  88. __subvsi3

; =============== S U B	R O U T	I N E =======================================


		public __subvsi3
__subvsi3	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	ecx, [esp+0Ch+arg_4]
		mov	eax, edx
		sub	eax, ecx
		test	ecx, ecx
		js	short loc_6CEC19C0
		cmp	eax, edx
		setnle	dl

loc_6CEC19B8:				; CODE XREF: __subvsi3+25j
		test	dl, dl
		jnz	short loc_6CEC19C7
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC19C0:				; CODE XREF: __subvsi3+11j
		cmp	eax, edx
		setl	dl
		jmp	short loc_6CEC19B8
; ---------------------------------------------------------------------------

loc_6CEC19C7:				; CODE XREF: __subvsi3+1Aj
		call	abort
__subvsi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  87. __subvdi3

; =============== S U B	R O U T	I N E =======================================


		public __subvdi3
__subvdi3	proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_8], edi
		mov	ecx, [esp+1Ch+arg_4]
		mov	edi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_10], ebx
		mov	ebx, edx
		mov	[esp+1Ch+var_C], esi
		mov	esi, ecx
		sub	ebx, edi
		sbb	esi, ebp
		test	ebp, ebp
		js	short loc_6CEC1A15
		cmp	esi, ecx
		jg	short loc_6CEC1A09
		jl	short loc_6CEC1A22
		cmp	ebx, edx
		jbe	short loc_6CEC1A22

loc_6CEC1A09:				; CODE XREF: __subvdi3+31j
					; __subvdi3+47j ...
		lea	esi, [esi+0]
		call	abort
; ---------------------------------------------------------------------------

loc_6CEC1A15:				; CODE XREF: __subvdi3+2Dj
		cmp	esi, ecx
		jl	short loc_6CEC1A09
		jg	short loc_6CEC1A22
		cmp	ebx, edx
		lea	esi, [esi+0]
		jb	short loc_6CEC1A09

loc_6CEC1A22:				; CODE XREF: __subvdi3+33j
					; __subvdi3+37j ...
		mov	eax, ebx
		mov	edx, esi
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
__subvdi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  69. __mulvsi3

; =============== S U B	R O U T	I N E =======================================


		public __mulvsi3
__mulvsi3	proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	ecx, [esp+1Ch+arg_4]
		mov	eax, ecx
		imul	[esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], edx
		mov	edx, eax
		sar	edx, 1Fh
		cmp	edx, [esp+1Ch+var_10]
		mov	[esp+1Ch+var_14], eax
		jnz	short loc_6CEC1A68
		mov	eax, [esp+1Ch+var_14]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC1A68:				; CODE XREF: __mulvsi3+1Ej
		call	abort
__mulvsi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  68. __mulvdi3

; =============== S U B	R O U T	I N E =======================================


		public __mulvdi3
__mulvdi3	proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	[esp+4Ch+var_10], ebx
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_4]
		mov	eax, [esp+4Ch+arg_8]
		mov	edx, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_4], ebp
		mov	ebp, ebx
		sar	ebp, 1Fh
		cmp	esi, ebp
		mov	[esp+4Ch+var_8], edi
		mov	[esp+4Ch+var_4C], eax
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_44], ebx
		jnz	short loc_6CEC1ADA
		mov	ebp, eax
		mov	ebx, edx
		sar	ebp, 1Fh
		mov	edi, eax
		cmp	edx, ebp
		jnz	loc_6CEC1B4B
		mov	eax, [esp+4Ch+var_44]
		imul	edi
		mov	edi, eax
		mov	ebp, edx

loc_6CEC1AC2:				; CODE XREF: __mulvdi3+D6j
					; __mulvdi3+121j ...
		mov	eax, edi
		mov	edx, ebp
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC1ADA:				; CODE XREF: __mulvdi3+35j
		mov	edx, [esp+4Ch+var_4C]
		mov	ebp, [esp+4Ch+var_48]
		mov	ecx, edx
		sar	ecx, 1Fh
		cmp	ebp, ecx
		mov	[esp+4Ch+var_40], edx
		jnz	loc_6CEC1BD8
		mov	eax, edx
		mul	[esp+4Ch+var_44]
		mov	[esp+4Ch+var_34], eax
		mov	[esp+4Ch+var_20], eax
		mov	eax, [esp+4Ch+var_40]
		mov	[esp+4Ch+var_30], edx
		mul	esi
		test	esi, esi
		mov	[esp+4Ch+var_3C], eax
		mov	ecx, eax
		mov	[esp+4Ch+var_38], edx
		js	loc_6CEC1BA0

loc_6CEC1B1C:				; CODE XREF: __mulvdi3+140j
		cmp	[esp+4Ch+var_40], 0
		js	short loc_6CEC1B96

loc_6CEC1B23:				; CODE XREF: __mulvdi3+12Ej
		mov	ecx, [esp+4Ch+var_30]
		xor	ebx, ebx
		add	ecx, [esp+4Ch+var_3C]
		adc	ebx, [esp+4Ch+var_38]
		mov	eax, ecx
		sar	eax, 1Fh
		cmp	eax, ebx
		jnz	loc_6CEC1BFC
		mov	eax, [esp+4Ch+var_20]
		mov	ebp, ecx
		mov	edi, eax
		jmp	loc_6CEC1AC2
; ---------------------------------------------------------------------------

loc_6CEC1B4B:				; CODE XREF: __mulvdi3+42j
		mov	eax, [esp+4Ch+var_44]
		mul	edi
		mov	[esp+4Ch+var_34], eax
		mov	ecx, eax
		mov	eax, [esp+4Ch+var_44]
		mov	[esp+4Ch+var_30], edx
		mul	ebx
		test	ebx, ebx
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_38], edx
		js	short loc_6CEC1BC6

loc_6CEC1B6D:				; CODE XREF: __mulvdi3+166j
		cmp	[esp+4Ch+var_44], 0
		js	short loc_6CEC1BB5

loc_6CEC1B74:				; CODE XREF: __mulvdi3+154j
		mov	edi, [esp+4Ch+var_30]
		xor	ebp, ebp
		add	edi, [esp+4Ch+var_3C]
		adc	ebp, [esp+4Ch+var_38]
		mov	eax, edi
		sar	eax, 1Fh
		cmp	eax, ebp
		jnz	short loc_6CEC1BFC
		mov	edx, edi
		mov	edi, ecx
		mov	ebp, edx
		jmp	loc_6CEC1AC2
; ---------------------------------------------------------------------------

loc_6CEC1B96:				; CODE XREF: __mulvdi3+B1j
		sub	[esp+4Ch+var_3C], ebx
		sbb	[esp+4Ch+var_38], esi
		jmp	short loc_6CEC1B23
; ---------------------------------------------------------------------------

loc_6CEC1BA0:				; CODE XREF: __mulvdi3+A6j
		mov	eax, [esp+4Ch+var_38]
		sub	eax, [esp+4Ch+var_40]
		mov	[esp+4Ch+var_3C], ecx
		mov	[esp+4Ch+var_38], eax
		jmp	loc_6CEC1B1C
; ---------------------------------------------------------------------------

loc_6CEC1BB5:				; CODE XREF: __mulvdi3+102j
		mov	eax, [esp+4Ch+var_4C]
		mov	edx, [esp+4Ch+var_48]
		sub	[esp+4Ch+var_3C], eax
		sbb	[esp+4Ch+var_38], edx
		jmp	short loc_6CEC1B74
; ---------------------------------------------------------------------------

loc_6CEC1BC6:				; CODE XREF: __mulvdi3+FBj
		mov	edi, [esp+4Ch+var_38]
		sub	edi, [esp+4Ch+var_44]
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_38], edi
		jmp	short loc_6CEC1B6D
; ---------------------------------------------------------------------------

loc_6CEC1BD8:				; CODE XREF: __mulvdi3+7Cj
		test	esi, esi
		js	short loc_6CEC1C01
		test	ebp, ebp
		js	short loc_6CEC1C2B
		test	esi, esi
		jnz	short loc_6CEC1BFC
		test	ebp, ebp
		jnz	short loc_6CEC1BFC
		mov	eax, [esp+4Ch+var_44]
		mul	[esp+4Ch+var_40]
		test	edx, edx
		mov	edi, eax
		mov	ebp, edx
		jns	loc_6CEC1AC2

loc_6CEC1BFC:				; CODE XREF: __mulvdi3+C8j
					; __mulvdi3+119j ...
		call	abort
; ---------------------------------------------------------------------------

loc_6CEC1C01:				; CODE XREF: __mulvdi3+16Aj
		test	ebp, ebp
		js	short loc_6CEC1C57
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_6CEC1BFC
		test	ebp, ebp
		lea	esi, [esi+0]
		jnz	short loc_6CEC1BFC
		mov	eax, [esp+4Ch+var_40]
		mul	[esp+4Ch+var_44]
		mov	ecx, edx
		sub	ecx, [esp+4Ch+var_40]
		jns	short loc_6CEC1BFC
		mov	edi, eax
		mov	ebp, ecx
		jmp	loc_6CEC1AC2
; ---------------------------------------------------------------------------

loc_6CEC1C2B:				; CODE XREF: __mulvdi3+16Ej
		test	esi, esi
		jnz	short loc_6CEC1BFC
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_6CEC1BFC
		mov	eax, [esp+4Ch+var_40]
		mul	[esp+4Ch+var_44]
		mov	ecx, edx
		mov	ebx, eax
		sub	ecx, [esp+4Ch+var_44]
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_38], edx
		jns	short loc_6CEC1BFC

loc_6CEC1C4E:				; CODE XREF: __mulvdi3+206j
		mov	edi, ebx
		mov	ebp, ecx
		jmp	loc_6CEC1AC2
; ---------------------------------------------------------------------------

loc_6CEC1C57:				; CODE XREF: __mulvdi3+193j
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_6CEC1BFC
		cmp	ebp, 0FFFFFFFFh
		nop
		jnz	short loc_6CEC1BFC
		mov	eax, [esp+4Ch+var_40]
		mul	[esp+4Ch+var_44]
		mov	ecx, edx
		mov	ebx, eax
		sub	ecx, [esp+4Ch+var_44]
		sub	ecx, [esp+4Ch+var_40]
		jns	short loc_6CEC1C4E
		jmp	short loc_6CEC1BFC
__mulvdi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  73. __negvsi2

; =============== S U B	R O U T	I N E =======================================


		public __negvsi2
__negvsi2	proc near

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, edx
		neg	eax
		test	edx, edx
		js	short loc_6CEC1CA0
		test	eax, eax
		setnle	dl

loc_6CEC1C94:				; CODE XREF: __negvsi2+25j
		test	dl, dl
		jnz	short loc_6CEC1CA7
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1CA0:				; CODE XREF: __negvsi2+Dj
		mov	edx, eax
		shr	edx, 1Fh
		jmp	short loc_6CEC1C94
; ---------------------------------------------------------------------------

loc_6CEC1CA7:				; CODE XREF: __negvsi2+16j
		call	abort
__negvsi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  72. __negvdi2

; =============== S U B	R O U T	I N E =======================================


		public __negvdi2
__negvdi2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 8
		mov	ecx, [esp+0Ch+arg_0]
		mov	ebx, [esp+0Ch+arg_4]
		mov	eax, ecx
		neg	eax
		mov	edx, ebx
		adc	edx, 0
		neg	edx
		test	ebx, ebx
		js	short loc_6CEC1CE4
		mov	ebx, edx
		sar	ebx, 1Fh
		mov	ecx, ebx
		sub	ecx, eax
		sbb	ebx, edx
		mov	ecx, ebx
		shr	ecx, 1Fh

loc_6CEC1CDB:				; CODE XREF: __negvdi2+39j
		test	cl, cl
		jnz	short loc_6CEC1CEB
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC1CE4:				; CODE XREF: __negvdi2+19j
		mov	ecx, edx
		shr	ecx, 1Fh
		jmp	short loc_6CEC1CDB
; ---------------------------------------------------------------------------

loc_6CEC1CEB:				; CODE XREF: __negvdi2+2Dj
		nop
		lea	esi, [esi+0]
		call	abort
__negvdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  46. __ffssi2

; =============== S U B	R O U T	I N E =======================================


		public __ffssi2
__ffssi2	proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	eax, eax
		test	edx, edx
		jz	short locret_6CEC1D10
		bsf	eax, edx
		add	eax, 1

locret_6CEC1D10:			; CODE XREF: __ffssi2+8j
		rep retn
__ffssi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. __ffsdi2

; =============== S U B	R O U T	I N E =======================================


		public __ffsdi2
__ffsdi2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		test	eax, eax
		jz	short loc_6CEC1D40
		mov	edx, eax
		mov	ecx, 1

loc_6CEC1D33:				; CODE XREF: __ffsdi2+29j
		bsf	eax, edx
		add	eax, ecx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1D40:				; CODE XREF: __ffsdi2+Aj
		xor	eax, eax
		test	edx, edx
		mov	ecx, 21h
		jnz	short loc_6CEC1D33
		rep retn
__ffsdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. __clzsi2

; =============== S U B	R O U T	I N E =======================================


		public __clzsi2
__clzsi2	proc near

arg_0		= dword	ptr  4

		bsr	eax, [esp+arg_0]
		xor	eax, 1Fh
		retn
__clzsi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. __clzdi2

; =============== S U B	R O U T	I N E =======================================


		public __clzdi2
__clzdi2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		xor	edx, edx
		mov	ecx, [esp+arg_0]
		test	eax, eax
		jnz	short loc_6CEC1D72
		mov	eax, ecx
		mov	dl, 20h

loc_6CEC1D72:				; CODE XREF: __clzdi2+Cj
		bsr	eax, eax
		xor	eax, 1Fh
		add	eax, edx
		retn
__clzdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. __ctzsi2

; =============== S U B	R O U T	I N E =======================================


		public __ctzsi2
__ctzsi2	proc near

arg_0		= dword	ptr  4

		bsf	eax, [esp+arg_0]
		retn
__ctzsi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. __ctzdi2

; =============== S U B	R O U T	I N E =======================================


		public __ctzdi2
__ctzdi2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		test	eax, eax
		jnz	short loc_6CEC1DB0
		mov	eax, ecx
		mov	edx, 20h

loc_6CEC1DA3:				; CODE XREF: __ctzdi2+22j
		bsf	eax, eax
		add	eax, edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1DB0:				; CODE XREF: __ctzdi2+Aj
		xor	edx, edx
		jmp	short loc_6CEC1DA3
__ctzdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  77. __popcountsi2

; =============== S U B	R O U T	I N E =======================================


		public __popcountsi2
__popcountsi2	proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, edx
		shr	eax, 10h
		and	eax, 0FFh
		movzx	ecx, ds:byte_6CECA140[eax]
		movzx	eax, dh
		movzx	eax, ds:byte_6CECA140[eax]
		lea	eax, [ecx+eax]
		movzx	ecx, dl
		movzx	ecx, ds:byte_6CECA140[ecx]
		shr	edx, 18h
		movzx	edx, ds:byte_6CECA140[edx]
		lea	eax, [ecx+eax]
		lea	eax, [edx+eax]
		retn
__popcountsi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  76. __popcountdi2

; =============== S U B	R O U T	I N E =======================================


		public __popcountdi2
__popcountdi2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		xor	eax, eax
		push	edi
		xor	ecx, ecx
		push	esi
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		mov	esi, [esp+10h+arg_4]

loc_6CEC1E10:				; CODE XREF: __popcountdi2+37j
		mov	ebp, esi
		mov	edi, ebx
		shrd	edi, ebp, cl
		shr	ebp, cl
		test	cl, 20h
		jz	short loc_6CEC1E20
		mov	edi, ebp

loc_6CEC1E20:				; CODE XREF: __popcountdi2+1Cj
		mov	edx, edi
		add	ecx, 8
		and	edx, 0FFh
		movzx	edx, ds:byte_6CECA140[edx]
		add	eax, edx
		cmp	ecx, 40h
		jnz	short loc_6CEC1E10
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
__popcountdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  75. __paritysi2

; =============== S U B	R O U T	I N E =======================================


		public __paritysi2
__paritysi2	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, eax
		shr	edx, 10h
		xor	edx, eax
		mov	eax, edx
		shr	eax, 8
		xor	eax, edx
		mov	ecx, eax
		shr	ecx, 4
		xor	ecx, eax
		mov	eax, 6996h
		and	ecx, 0Fh
		sar	eax, cl
		and	eax, 1
		retn
__paritysi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  74. __paritydi2

; =============== S U B	R O U T	I N E =======================================


		public __paritydi2
__paritydi2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		xor	eax, [esp+arg_4]
		mov	edx, eax
		shr	edx, 10h
		xor	edx, eax
		mov	eax, edx
		shr	eax, 8
		xor	eax, edx
		mov	ecx, eax
		shr	ecx, 4
		xor	ecx, eax
		mov	eax, 6996h
		and	ecx, 0Fh
		sar	eax, cl
		and	eax, 1
		retn
__paritydi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  79. __powisf2

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _powisf2(float, int)
		public __powisf2
__powisf2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		fld	[esp+arg_0]
		fld	st
		mov	ecx, edx
		sar	ecx, 1Fh
		mov	eax, ecx
		xor	eax, edx
		sub	eax, ecx
		test	al, 1
		jnz	short loc_6CEC1EC2
		fstp	st
		fld1
		jmp	short loc_6CEC1EC2
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1EC0:				; CODE XREF: __powisf2+2Cj
		fxch	st(1)

loc_6CEC1EC2:				; CODE XREF: __powisf2+17j
					; __powisf2+1Dj
		shr	eax, 1
		jz	short loc_6CEC1ED8
		fxch	st(1)

loc_6CEC1EC8:				; CODE XREF: __powisf2+32j
		test	al, 1
		fmul	st, st
		jz	short loc_6CEC1EC0
		shr	eax, 1
		fmul	st(1), st
		jnz	short loc_6CEC1EC8
		fstp	st
		jmp	short loc_6CEC1EDA
; ---------------------------------------------------------------------------

loc_6CEC1ED8:				; CODE XREF: __powisf2+24j
		fstp	st(1)

loc_6CEC1EDA:				; CODE XREF: __powisf2+36j
		test	edx, edx
		js	short loc_6CEC1EE0
		rep retn
; ---------------------------------------------------------------------------

loc_6CEC1EE0:				; CODE XREF: __powisf2+3Cj
		fdivr	ds:flt_6CECA240
		retn
__powisf2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  78. __powidf2

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _powidf2(double, int)
		public __powidf2
__powidf2	proc near

arg_0		= qword	ptr  4
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_8]
		fld	[esp+arg_0]
		fld	st
		mov	ecx, edx
		sar	ecx, 1Fh
		mov	eax, ecx
		xor	eax, edx
		sub	eax, ecx
		test	al, 1
		jnz	short loc_6CEC1F12
		fstp	st
		fld1
		jmp	short loc_6CEC1F12
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1F10:				; CODE XREF: __powidf2+2Cj
		fxch	st(1)

loc_6CEC1F12:				; CODE XREF: __powidf2+17j
					; __powidf2+1Dj
		shr	eax, 1
		jz	short loc_6CEC1F28
		fxch	st(1)

loc_6CEC1F18:				; CODE XREF: __powidf2+32j
		test	al, 1
		fmul	st, st
		jz	short loc_6CEC1F10
		shr	eax, 1
		fmul	st(1), st
		jnz	short loc_6CEC1F18
		fstp	st
		jmp	short loc_6CEC1F2A
; ---------------------------------------------------------------------------

loc_6CEC1F28:				; CODE XREF: __powidf2+24j
		fstp	st(1)

loc_6CEC1F2A:				; CODE XREF: __powidf2+36j
		test	edx, edx
		js	short loc_6CEC1F30
		rep retn
; ---------------------------------------------------------------------------

loc_6CEC1F30:				; CODE XREF: __powidf2+3Cj
		fdivr	ds:flt_6CECA244
		retn
__powidf2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  80. __powixf2

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _powixf2(_TBYTE, int)
		public __powixf2
__powixf2	proc near

arg_0		= tbyte	ptr  4
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_C]
		fld	[esp+arg_0]
		mov	ecx, edx
		sar	ecx, 1Fh
		mov	eax, ecx
		xor	eax, edx
		sub	eax, ecx
		test	al, 1
		fld	st
		jnz	short loc_6CEC1F62
		fstp	st
		fld1
		jmp	short loc_6CEC1F62
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC1F60:				; CODE XREF: __powixf2+2Cj
		fxch	st(1)

loc_6CEC1F62:				; CODE XREF: __powixf2+17j
					; __powixf2+1Dj
		shr	eax, 1
		jz	short loc_6CEC1F78
		fxch	st(1)

loc_6CEC1F68:				; CODE XREF: __powixf2+32j
		test	al, 1
		fmul	st, st
		jz	short loc_6CEC1F60
		shr	eax, 1
		fmul	st(1), st
		jnz	short loc_6CEC1F68
		fstp	st
		jmp	short loc_6CEC1F7A
; ---------------------------------------------------------------------------

loc_6CEC1F78:				; CODE XREF: __powixf2+24j
		fstp	st(1)

loc_6CEC1F7A:				; CODE XREF: __powixf2+36j
		test	edx, edx
		js	short loc_6CEC1F80
		rep retn
; ---------------------------------------------------------------------------

loc_6CEC1F80:				; CODE XREF: __powixf2+3Cj
		fdivr	ds:flt_6CECA248
		retn
__powixf2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  67. __mulsc3

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _mulsc3(float, float, float, float)
		public __mulsc3
__mulsc3	proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 18h
		fld	[esp+18h+arg_4]
		fld	[esp+18h+arg_C]
		fld	[esp+18h+arg_0]
		fmul	[esp+18h+arg_8]
		fstp	[esp+18h+var_4]
		fld	st(1)
		fmul	st, st(1)
		fstp	[esp+18h+var_8]
		fld	[esp+18h+arg_0]
		fmul	st, st(1)
		fstp	[esp+18h+var_C]
		fld	[esp+18h+arg_8]
		fmul	st, st(2)
		fstp	[esp+18h+var_10]
		fld	[esp+18h+var_4]
		fld	[esp+18h+var_8]
		fld	st(1)
		fsub	st, st(1)
		fld	[esp+18h+var_C]
		fld	[esp+18h+var_10]
		fld	st(1)
		fadd	st, st(1)
		fst	[esp+18h+var_14]
		fxch	st(3)
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC202E
		jnz	short loc_6CEC2032
		fstp	st(6)
		fstp	st
		fstp	st
		fstp	st
		fstp	st
		fstp	st
		fstp	st(1)
		jmp	short loc_6CEC2020
; ---------------------------------------------------------------------------

loc_6CEC1FFA:				; CODE XREF: __mulsc3+ABj
		fstp	st
		fstp	st
		fstp	st(3)
		fstp	st
		fstp	st
		fstp	st(1)
		jmp	short loc_6CEC2020
; ---------------------------------------------------------------------------

loc_6CEC2008:				; CODE XREF: __mulsc3+194j
		fstp	st
		fstp	st(1)
		fstp	st(1)
		jmp	short loc_6CEC2020
; ---------------------------------------------------------------------------

loc_6CEC2010:				; CODE XREF: __mulsc3+1A5j
		fstp	st(1)
		fstp	st(1)
		jmp	short loc_6CEC2020
; ---------------------------------------------------------------------------

loc_6CEC2016:				; CODE XREF: __mulsc3+1ABj
		fstp	st(1)
		fstp	st(1)
		lea	esi, [esi+0]

loc_6CEC2020:				; CODE XREF: __mulsc3+68j __mulsc3+76j ...
		fstp	[esp+18h+var_18]
		mov	edx, [esp+18h+var_14]
		mov	eax, [esp+18h+var_18]
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_6CEC202E:				; CODE XREF: __mulsc3+56j
		fxch	st(3)
		jmp	short loc_6CEC2034
; ---------------------------------------------------------------------------

loc_6CEC2032:				; CODE XREF: __mulsc3+58j
		fxch	st(3)

loc_6CEC2034:				; CODE XREF: __mulsc3+A0j
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC203D
		jz	short loc_6CEC1FFA

loc_6CEC203D:				; CODE XREF: __mulsc3+A9j
		fld	[esp+18h+arg_0]
		fsub	st, st
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2452
		xchg	ax, ax
		jnz	loc_6CEC2452

loc_6CEC2056:				; CODE XREF: __mulsc3+4CBj
					; __mulsc3+4D1j
		fld	st(6)
		fsub	st, st(7)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC23AB
		jz	short loc_6CEC2074
		jmp	loc_6CEC23B2
; ---------------------------------------------------------------------------

loc_6CEC206C:				; CODE XREF: __mulsc3+429j
		fxch	st(6)
		xchg	ax, ax
		jmp	short loc_6CEC2074
; ---------------------------------------------------------------------------

loc_6CEC2072:				; CODE XREF: __mulsc3+430j
		fxch	st(6)

loc_6CEC2074:				; CODE XREF: __mulsc3+D5j __mulsc3+E0j
		fxch	st(6)
		fxch	st(5)
		xor	edx, edx

loc_6CEC207A:				; CODE XREF: __mulsc3+480j
					; __mulsc3+4A3j
		fld	[esp+18h+arg_8]
		fsub	st, st
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC234F
		jnz	loc_6CEC234F

loc_6CEC2091:				; CODE XREF: __mulsc3+3C8j
					; __mulsc3+3CEj
		fld	st
		fsub	st, st(1)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC22AD
		jnz	loc_6CEC22AD

loc_6CEC20A6:				; CODE XREF: __mulsc3+322j
					; __mulsc3+328j
		test	dl, dl
		jnz	loc_6CEC2187
		fld	st(4)
		fsub	st, st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC225D
		jnz	loc_6CEC2261
		fstp	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC20DB
; ---------------------------------------------------------------------------

loc_6CEC20CD:				; CODE XREF: __mulsc3+2D8j
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC20DB
; ---------------------------------------------------------------------------

loc_6CEC20D5:				; CODE XREF: __mulsc3+2E0j
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)

loc_6CEC20DB:				; CODE XREF: __mulsc3+13Bj
					; __mulsc3+143j
		fld	st(3)
		fsub	st, st(4)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2287
		jnz	loc_6CEC228B
		fstp	st(3)
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC2102
; ---------------------------------------------------------------------------

loc_6CEC20F8:				; CODE XREF: __mulsc3+302j
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC2102
; ---------------------------------------------------------------------------

loc_6CEC20FE:				; CODE XREF: __mulsc3+308j
		fxch	st(1)
		fxch	st(2)

loc_6CEC2102:				; CODE XREF: __mulsc3+166j
					; __mulsc3+16Cj
		fld	st(1)
		fsub	st, st(2)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2239
		jnz	loc_6CEC223D
		fstp	st(1)

loc_6CEC2119:				; CODE XREF: __mulsc3+2B4j
					; __mulsc3+2BAj
		fld	st(3)
		fsub	st, st(4)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC212E
		jz	loc_6CEC2008
		fxch	st(3)
		jmp	short loc_6CEC2130
; ---------------------------------------------------------------------------

loc_6CEC212E:				; CODE XREF: __mulsc3+192j
		fxch	st(3)

loc_6CEC2130:				; CODE XREF: __mulsc3+19Cj
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC2010
		jp	loc_6CEC2016
		fstp	st

loc_6CEC2143:				; CODE XREF: __mulsc3+2C8j
					; __mulsc3+2F2j ...
		fld	[esp+18h+arg_0]
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC221E
		jnz	loc_6CEC221E
		fstp	st

loc_6CEC215A:				; CODE XREF: __mulsc3+2A4j
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2201
		jnz	loc_6CEC2201

loc_6CEC216B:				; CODE XREF: __mulsc3+289j
		fld	[esp+18h+arg_8]
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC21E4
		jnz	short loc_6CEC21E4
		fstp	st
		fxch	st(1)

loc_6CEC217C:				; CODE XREF: __mulsc3+26Cj
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC21CA
		jz	short loc_6CEC2197
		jmp	short loc_6CEC21CA
; ---------------------------------------------------------------------------

loc_6CEC2187:				; CODE XREF: __mulsc3+118j
		fstp	st(6)
		fstp	st
		fstp	st
		fstp	st
		fstp	st
		fxch	st(1)
		jmp	short loc_6CEC2197
; ---------------------------------------------------------------------------

loc_6CEC2195:				; CODE XREF: __mulsc3+380j
		fxch	st(1)

loc_6CEC2197:				; CODE XREF: __mulsc3+1F3j
					; __mulsc3+203j ...
		fld	[esp+18h+arg_0]
		fmul	[esp+18h+arg_8]
		fld	st(2)
		fmul	st, st(2)
		fsubp	st(1), st
		fld	ds:flt_6CECA24C
		fmul	st(1), st
		fxch	st(2)
		fmul	[esp+18h+arg_0]
		fxch	st(3)
		fmul	[esp+18h+arg_8]
		faddp	st(3), st
		fxch	st(1)
		fmulp	st(2), st
		fxch	st(1)
		fstp	[esp+18h+var_14]
		jmp	loc_6CEC2020
; ---------------------------------------------------------------------------

loc_6CEC21CA:				; CODE XREF: __mulsc3+1F1j
					; __mulsc3+1F5j
		fxam
		fnstsw	ax
		fstp	st
		xor	edx, edx
		test	ah, 2
		jz	short loc_6CEC21DC
		mov	edx, 80000000h

loc_6CEC21DC:				; CODE XREF: __mulsc3+245j
		mov	[esp+18h+var_18], edx
		fld	[esp+18h+var_18]
		jmp	short loc_6CEC2197
; ---------------------------------------------------------------------------

loc_6CEC21E4:				; CODE XREF: __mulsc3+1E4j
					; __mulsc3+1E6j
		fxam
		fnstsw	ax
		fstp	st
		xor	edx, edx
		test	ah, 2
		jz	short loc_6CEC21F6
		mov	edx, 80000000h

loc_6CEC21F6:				; CODE XREF: __mulsc3+25Fj
		fxch	st(1)
		mov	[esp+18h+arg_8], edx
		jmp	loc_6CEC217C
; ---------------------------------------------------------------------------

loc_6CEC2201:				; CODE XREF: __mulsc3+1CFj
					; __mulsc3+1D5j
		fxam
		fnstsw	ax
		fstp	st
		xor	edx, edx
		test	ah, 2
		jz	short loc_6CEC2213
		mov	edx, 80000000h

loc_6CEC2213:				; CODE XREF: __mulsc3+27Cj
		mov	[esp+18h+var_18], edx
		fld	[esp+18h+var_18]
		jmp	loc_6CEC216B
; ---------------------------------------------------------------------------

loc_6CEC221E:				; CODE XREF: __mulsc3+1BCj
					; __mulsc3+1C2j
		fxam
		fnstsw	ax
		fstp	st
		xor	edx, edx
		test	ah, 2
		jz	short loc_6CEC2230
		mov	edx, 80000000h

loc_6CEC2230:				; CODE XREF: __mulsc3+299j
		mov	[esp+18h+arg_0], edx
		jmp	loc_6CEC215A
; ---------------------------------------------------------------------------

loc_6CEC2239:				; CODE XREF: __mulsc3+17Bj
		fxch	st(1)
		jmp	short loc_6CEC223F
; ---------------------------------------------------------------------------

loc_6CEC223D:				; CODE XREF: __mulsc3+181j
		fxch	st(1)

loc_6CEC223F:				; CODE XREF: __mulsc3+2ABj
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2119
		jnz	loc_6CEC2119
		fstp	st(3)
		fstp	st
		fxch	st(1)
		fxch	st(1)
		jmp	loc_6CEC2143
; ---------------------------------------------------------------------------

loc_6CEC225D:				; CODE XREF: __mulsc3+127j
		fxch	st(4)
		jmp	short loc_6CEC2263
; ---------------------------------------------------------------------------

loc_6CEC2261:				; CODE XREF: __mulsc3+12Dj
		fxch	st(4)

loc_6CEC2263:				; CODE XREF: __mulsc3+2CFj
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC20CD
		xchg	ax, ax
		jnz	loc_6CEC20D5
		fstp	st
		fstp	st
		fstp	st
		fstp	st(2)
		fxch	st(1)
		fxch	st(1)
		jmp	loc_6CEC2143
; ---------------------------------------------------------------------------

loc_6CEC2287:				; CODE XREF: __mulsc3+154j
		fxch	st(3)
		jmp	short loc_6CEC228D
; ---------------------------------------------------------------------------

loc_6CEC228B:				; CODE XREF: __mulsc3+15Aj
		fxch	st(3)

loc_6CEC228D:				; CODE XREF: __mulsc3+2F9j
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC20F8
		jnz	loc_6CEC20FE
		fstp	st
		fstp	st
		fstp	st(2)
		fxch	st(1)
		fxch	st(1)
		jmp	loc_6CEC2143
; ---------------------------------------------------------------------------

loc_6CEC22AD:				; CODE XREF: __mulsc3+10Aj
					; __mulsc3+110j
		fucom	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC20A6
		jp	loc_6CEC20A6
		fstp	st(6)
		fstp	st
		fstp	st
		fstp	st
		fstp	st
		fxch	st(1)
		fld	[esp+18h+arg_8]
		xor	edx, edx
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		jz	short loc_6CEC22E0
		mov	edx, 80000000h

loc_6CEC22E0:				; CODE XREF: __mulsc3+349j
		mov	[esp+18h+arg_8], edx
		fld1
		fxch	st(1)

loc_6CEC22E8:				; CODE XREF: __mulsc3+416j
					; __mulsc3+529j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fabs
		jz	short loc_6CEC22F7
		fchs

loc_6CEC22F7:				; CODE XREF: __mulsc3+363j
		fld	[esp+18h+arg_0]
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2335
		jnz	short loc_6CEC2335
		fstp	st
		fxch	st(1)

loc_6CEC2308:				; CODE XREF: __mulsc3+3BDj
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2316
		nop
		jz	loc_6CEC2195

loc_6CEC2316:				; CODE XREF: __mulsc3+37Dj
		fxam
		fnstsw	ax
		fstp	st
		xor	edx, edx
		test	ah, 2
		jz	short loc_6CEC2328
		mov	edx, 80000000h

loc_6CEC2328:				; CODE XREF: __mulsc3+391j
		mov	[esp+18h+var_18], edx
		fld	[esp+18h+var_18]
		fxch	st(1)
		jmp	loc_6CEC2197
; ---------------------------------------------------------------------------

loc_6CEC2335:				; CODE XREF: __mulsc3+370j
					; __mulsc3+372j
		fxam
		fnstsw	ax
		fstp	st
		xor	edx, edx
		test	ah, 2
		jz	short loc_6CEC2347
		mov	edx, 80000000h

loc_6CEC2347:				; CODE XREF: __mulsc3+3B0j
		fxch	st(1)
		mov	[esp+18h+arg_0], edx
		jmp	short loc_6CEC2308
; ---------------------------------------------------------------------------

loc_6CEC234F:				; CODE XREF: __mulsc3+F5j __mulsc3+FBj
		fld	[esp+18h+arg_8]
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2091
		jnz	loc_6CEC2091
		fstp	st(6)
		fstp	st
		fstp	st
		fstp	st
		fstp	st
		fxch	st(1)
		fld	[esp+18h+arg_8]
		mov	edx, 3F800000h
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		jz	short loc_6CEC2389
		mov	edx, 0BF800000h

loc_6CEC2389:				; CODE XREF: __mulsc3+3F2j
		fld	st
		fsub	st, st(1)
		mov	[esp+18h+arg_8], edx
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC24A4
		jnz	loc_6CEC24A4

loc_6CEC23A2:				; CODE XREF: __mulsc3+519j
					; __mulsc3+51Fj
		fldz
		fxch	st(1)
		jmp	loc_6CEC22E8
; ---------------------------------------------------------------------------

loc_6CEC23AB:				; CODE XREF: __mulsc3+CFj
		fxch	st(6)
		lea	esi, [esi+0]
		jmp	short loc_6CEC23B4
; ---------------------------------------------------------------------------

loc_6CEC23B2:				; CODE XREF: __mulsc3+D7j
		fxch	st(6)

loc_6CEC23B4:				; CODE XREF: __mulsc3+420j
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC206C
		nop
		jnz	loc_6CEC2072
		fld	[esp+18h+arg_0]
		xor	edx, edx
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		jz	short loc_6CEC23DC
		mov	edx, 80000000h

loc_6CEC23DC:				; CODE XREF: __mulsc3+445j
		mov	[esp+18h+arg_0], edx
		fld1
		fxch	st(1)

loc_6CEC23E4:				; CODE XREF: __mulsc3+50Fj
					; __mulsc3+541j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fabs
		jz	short loc_6CEC23F3
		fchs

loc_6CEC23F3:				; CODE XREF: __mulsc3+45Fj
		fld	[esp+18h+arg_8]
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2438
		jnz	short loc_6CEC2438
		fstp	st
		fxch	st(5)

loc_6CEC2404:				; CODE XREF: __mulsc3+4C0j
		fucom	st
		fnstsw	ax
		mov	edx, 1
		sahf
		jp	short loc_6CEC2416
		jz	loc_6CEC207A

loc_6CEC2416:				; CODE XREF: __mulsc3+47Ej
		fxam
		fnstsw	ax
		fstp	st
		xor	edx, edx
		test	ah, 2
		jz	short loc_6CEC2428
		mov	edx, 80000000h

loc_6CEC2428:				; CODE XREF: __mulsc3+491j
		mov	[esp+18h+var_18], edx
		mov	edx, 1
		fld	[esp+18h+var_18]
		jmp	loc_6CEC207A
; ---------------------------------------------------------------------------

loc_6CEC2438:				; CODE XREF: __mulsc3+46Cj
					; __mulsc3+46Ej
		fxam
		fnstsw	ax
		fstp	st
		xor	edx, edx
		test	ah, 2
		jz	short loc_6CEC244A
		mov	edx, 80000000h

loc_6CEC244A:				; CODE XREF: __mulsc3+4B3j
		fxch	st(5)
		mov	[esp+18h+arg_8], edx
		jmp	short loc_6CEC2404
; ---------------------------------------------------------------------------

loc_6CEC2452:				; CODE XREF: __mulsc3+B8j __mulsc3+C0j
		fld	[esp+18h+arg_0]
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2056
		jnz	loc_6CEC2056
		fld	[esp+18h+arg_0]
		mov	edx, 3F800000h
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		jz	short loc_6CEC2480
		mov	edx, 0BF800000h

loc_6CEC2480:				; CODE XREF: __mulsc3+4E9j
		fld	st(6)
		fsub	st, st(7)
		mov	[esp+18h+arg_0], edx
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC24BE
		jz	short loc_6CEC2499
		jmp	short loc_6CEC24C2
; ---------------------------------------------------------------------------

loc_6CEC2493:				; CODE XREF: __mulsc3+539j
		fxch	st(6)
		jmp	short loc_6CEC2499
; ---------------------------------------------------------------------------

loc_6CEC2497:				; CODE XREF: __mulsc3+53Bj
		fxch	st(6)

loc_6CEC2499:				; CODE XREF: __mulsc3+4FFj
					; __mulsc3+505j
		fldz
		fxch	st(1)
		fxch	st(7)
		jmp	loc_6CEC23E4
; ---------------------------------------------------------------------------

loc_6CEC24A4:				; CODE XREF: __mulsc3+406j
					; __mulsc3+40Cj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC23A2
		jnz	loc_6CEC23A2
		fld1
		fxch	st(1)
		jmp	loc_6CEC22E8
; ---------------------------------------------------------------------------

loc_6CEC24BE:				; CODE XREF: __mulsc3+4FDj
		fxch	st(6)
		jmp	short loc_6CEC24C4
; ---------------------------------------------------------------------------

loc_6CEC24C2:				; CODE XREF: __mulsc3+501j
		fxch	st(6)

loc_6CEC24C4:				; CODE XREF: __mulsc3+530j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2493
		jnz	short loc_6CEC2497
		fld1
		fxch	st(1)
		jmp	loc_6CEC23E4
__mulsc3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  65. __muldc3

; =============== S U B	R O U T	I N E =======================================


		public __muldc3
__muldc3	proc near

var_3C		= qword	ptr -3Ch
var_34		= qword	ptr -34h
var_2C		= qword	ptr -2Ch
var_24		= qword	ptr -24h
var_1C		= qword	ptr -1Ch
var_14		= qword	ptr -14h
var_C		= qword	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= qword	ptr  8
arg_C		= qword	ptr  10h
arg_14		= qword	ptr  18h
arg_1C		= qword	ptr  20h

		sub	esp, 3Ch
		fld	[esp+3Ch+arg_4]
		fld	[esp+3Ch+arg_C]
		fld	[esp+3Ch+arg_14]
		fld	[esp+3Ch+arg_1C]
		fld	st(3)
		mov	edx, [esp+3Ch+arg_0]
		fmul	st, st(2)
		fstp	[esp+3Ch+var_C]
		fld	st(2)
		fmul	st, st(1)
		fstp	[esp+3Ch+var_14]
		fld	st(3)
		fmul	st, st(1)
		fstp	[esp+3Ch+var_1C]
		fld	st(2)
		fmul	st, st(2)
		fstp	[esp+3Ch+var_24]
		fld	[esp+3Ch+var_C]
		fld	[esp+3Ch+var_14]
		fst	[esp+3Ch+var_2C]
		fsubr	st, st(1)
		fld	[esp+3Ch+var_1C]
		fstp	[esp+3Ch+var_34]
		fld	[esp+3Ch+var_24]
		fstp	[esp+3Ch+var_3C]
		fld	[esp+3Ch+var_34]
		fadd	[esp+3Ch+var_3C]
		fxch	st(1)
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC258D
		jnz	short loc_6CEC2591
		fstp	st(5)
		fstp	st(5)
		fstp	st
		fstp	st
		fstp	st
		jmp	short loc_6CEC2580
; ---------------------------------------------------------------------------

loc_6CEC2552:				; CODE XREF: __muldc3+BAj
		fstp	st(6)
		fstp	st(4)
		fstp	st
		fstp	st
		fstp	st
		jmp	short loc_6CEC2580
; ---------------------------------------------------------------------------

loc_6CEC255E:				; CODE XREF: __muldc3+1A2j
		fstp	st
		fstp	st(4)
		fstp	st
		fstp	st
		fxch	st(1)
		jmp	short loc_6CEC2580
; ---------------------------------------------------------------------------

loc_6CEC256A:				; CODE XREF: __muldc3+1B0j
		fstp	st
		fstp	st(4)
		fstp	st
		fstp	st
		fxch	st(1)
		jmp	short loc_6CEC2580
; ---------------------------------------------------------------------------

loc_6CEC2576:				; CODE XREF: __muldc3+1B6j
		fstp	st
		fstp	st(4)
		fstp	st
		fstp	st
		fxch	st(1)

loc_6CEC2580:				; CODE XREF: __muldc3+70j __muldc3+7Cj ...
		fstp	qword ptr [edx]
		mov	eax, edx
		fstp	qword ptr [edx+8]
		add	esp, 3Ch
		retn	4
; ---------------------------------------------------------------------------

loc_6CEC258D:				; CODE XREF: __muldc3+62j
		fxch	st(1)
		jmp	short loc_6CEC2593
; ---------------------------------------------------------------------------

loc_6CEC2591:				; CODE XREF: __muldc3+64j
		fxch	st(1)

loc_6CEC2593:				; CODE XREF: __muldc3+AFj
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC259C
		jz	short loc_6CEC2552

loc_6CEC259C:				; CODE XREF: __muldc3+B8j
		fld	st(6)
		fsub	st, st(7)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC29BC
		jz	short loc_6CEC25C4
		lea	esi, [esi+0]
		jmp	loc_6CEC29C0
; ---------------------------------------------------------------------------

loc_6CEC25B5:				; CODE XREF: __muldc3+4E7j
		fxch	st(6)
		mov	esi, esi
		lea	edi, [edi+0]
		jmp	short loc_6CEC25C4
; ---------------------------------------------------------------------------

loc_6CEC25C2:				; CODE XREF: __muldc3+4F0j
		fxch	st(6)

loc_6CEC25C4:				; CODE XREF: __muldc3+CBj __muldc3+E0j
		fld	st(5)
		fsub	st, st(6)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC291D
		jz	short loc_6CEC25E4
		jmp	loc_6CEC2921
; ---------------------------------------------------------------------------

loc_6CEC25DA:				; CODE XREF: __muldc3+448j
		fxch	st(5)
		lea	esi, [esi+0]
		jmp	short loc_6CEC25E4
; ---------------------------------------------------------------------------

loc_6CEC25E2:				; CODE XREF: __muldc3+450j
		fxch	st(5)

loc_6CEC25E4:				; CODE XREF: __muldc3+F3j
					; __muldc3+100j
		fxch	st(5)
		fxch	st(4)
		fxch	st(3)
		xor	ecx, ecx

loc_6CEC25EC:				; CODE XREF: __muldc3+4A2j
					; __muldc3+4C0j
		fld	st(3)
		fsub	st, st(4)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC28BD
		jz	short loc_6CEC2608
		jmp	loc_6CEC28C1
; ---------------------------------------------------------------------------

loc_6CEC2602:				; CODE XREF: __muldc3+3E8j
		fxch	st(3)
		jmp	short loc_6CEC2608
; ---------------------------------------------------------------------------

loc_6CEC2606:				; CODE XREF: __muldc3+3F0j
		fxch	st(3)

loc_6CEC2608:				; CODE XREF: __muldc3+11Bj
					; __muldc3+124j
		fld	st
		fsub	st, st(1)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC281F
		jnz	loc_6CEC281F

loc_6CEC261D:				; CODE XREF: __muldc3+344j
					; __muldc3+34Aj
		test	cl, cl
		jnz	loc_6CEC26F7
		fld	st(2)
		fsub	st, st(3)
		fucomp	st
		fnstsw	ax
		sahf
		xchg	ax, ax
		jp	loc_6CEC27D5
		jnz	loc_6CEC27D9
		fstp	st(2)
		fxch	st(1)
		jmp	short loc_6CEC2648
; ---------------------------------------------------------------------------

loc_6CEC2642:				; CODE XREF: __muldc3+300j
		fxch	st(1)
		jmp	short loc_6CEC2648
; ---------------------------------------------------------------------------

loc_6CEC2646:				; CODE XREF: __muldc3+306j
		fxch	st(1)

loc_6CEC2648:				; CODE XREF: __muldc3+160j
					; __muldc3+164j
		fld	[esp+3Ch+var_2C]
		fsub	st, st
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC27FB
		jnz	loc_6CEC27FB

loc_6CEC265F:				; CODE XREF: __muldc3+324j
					; __muldc3+32Aj
		fld	[esp+3Ch+var_34]
		fsub	st, st
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC27B1
		jnz	loc_6CEC27B1

loc_6CEC2676:				; CODE XREF: __muldc3+2DAj
					; __muldc3+2E0j
		fld	[esp+3Ch+var_3C]
		fsub	st, st
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2688
		jz	loc_6CEC255E

loc_6CEC2688:				; CODE XREF: __muldc3+1A0j
		fld	[esp+3Ch+var_3C]
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC256A
		jp	loc_6CEC2576
		fstp	st(4)
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)

loc_6CEC26A6:				; CODE XREF: __muldc3+2F0j
					; __muldc3+316j ...
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2793
		jnz	loc_6CEC2793
		fxch	st(2)
		jmp	short loc_6CEC26BD
; ---------------------------------------------------------------------------

loc_6CEC26BB:				; CODE XREF: __muldc3+2BEj
		fxch	st(2)

loc_6CEC26BD:				; CODE XREF: __muldc3+1D9j
					; __muldc3+2CCj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2775
		jnz	loc_6CEC2775
		fxch	st(1)
		jmp	short loc_6CEC26D4
; ---------------------------------------------------------------------------

loc_6CEC26D2:				; CODE XREF: __muldc3+2A0j
		fxch	st(1)

loc_6CEC26D4:				; CODE XREF: __muldc3+1F0j
					; __muldc3+2AEj
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2757
		jnz	short loc_6CEC2757
		fxch	st(3)
		nop
		jmp	short loc_6CEC26E4
; ---------------------------------------------------------------------------

loc_6CEC26E2:				; CODE XREF: __muldc3+282j
		fxch	st(3)

loc_6CEC26E4:				; CODE XREF: __muldc3+200j
					; __muldc3+290j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC273A
		jnz	short loc_6CEC273A
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC2717
; ---------------------------------------------------------------------------

loc_6CEC26F7:				; CODE XREF: __muldc3+13Fj
		fstp	st(5)
		fstp	st
		fstp	st
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC2717
; ---------------------------------------------------------------------------

loc_6CEC2703:				; CODE XREF: __muldc3+265j
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC2717
; ---------------------------------------------------------------------------

loc_6CEC270D:				; CODE XREF: __muldc3+3A0j
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC2717
; ---------------------------------------------------------------------------

loc_6CEC2713:				; CODE XREF: __muldc3+3B1j
		fxch	st(2)
		fxch	st(3)

loc_6CEC2717:				; CODE XREF: __muldc3+215j
					; __muldc3+221j ...
		fld	st(3)
		fmul	st, st(2)
		fld	st(3)
		fmul	st, st(2)
		fsubp	st(1), st
		fld	ds:flt_6CECA250
		fmul	st(1), st
		fxch	st(5)
		fmulp	st(2), st
		fxch	st(3)
		fmulp	st(2), st
		faddp	st(1), st
		fmulp	st(2), st
		jmp	loc_6CEC2580
; ---------------------------------------------------------------------------

loc_6CEC273A:				; CODE XREF: __muldc3+209j
					; __muldc3+20Bj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2703
		fstp	st
		fldz
		fchs
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC2717
; ---------------------------------------------------------------------------

loc_6CEC2757:				; CODE XREF: __muldc3+1F9j
					; __muldc3+1FBj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	loc_6CEC26E2
		fstp	st
		fldz
		fchs
		fxch	st(3)
		jmp	loc_6CEC26E4
; ---------------------------------------------------------------------------

loc_6CEC2775:				; CODE XREF: __muldc3+1E2j
					; __muldc3+1E8j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	loc_6CEC26D2
		fstp	st
		fldz
		fchs
		fxch	st(1)
		jmp	loc_6CEC26D4
; ---------------------------------------------------------------------------

loc_6CEC2793:				; CODE XREF: __muldc3+1CBj
					; __muldc3+1D1j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	loc_6CEC26BB
		fstp	st
		fldz
		fchs
		fxch	st(2)
		jmp	loc_6CEC26BD
; ---------------------------------------------------------------------------

loc_6CEC27B1:				; CODE XREF: __muldc3+18Aj
					; __muldc3+190j
		fld	[esp+3Ch+var_34]
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2676
		jnz	loc_6CEC2676
		fstp	st(4)
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	loc_6CEC26A6
; ---------------------------------------------------------------------------

loc_6CEC27D5:				; CODE XREF: __muldc3+150j
		fxch	st(2)
		jmp	short loc_6CEC27DB
; ---------------------------------------------------------------------------

loc_6CEC27D9:				; CODE XREF: __muldc3+156j
		fxch	st(2)

loc_6CEC27DB:				; CODE XREF: __muldc3+2F7j
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2642
		jnz	loc_6CEC2646
		fstp	st
		fstp	st(3)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	loc_6CEC26A6
; ---------------------------------------------------------------------------

loc_6CEC27FB:				; CODE XREF: __muldc3+173j
					; __muldc3+179j
		fld	[esp+3Ch+var_2C]
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC265F
		jnz	loc_6CEC265F
		fstp	st(4)
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	loc_6CEC26A6
; ---------------------------------------------------------------------------

loc_6CEC281F:				; CODE XREF: __muldc3+131j
					; __muldc3+137j
		fucom	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC261D
		jp	loc_6CEC261D
		fstp	st(5)
		fstp	st
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxch	st(1)
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC284F
		fstp	st
		fldz
		fchs

loc_6CEC284F:				; CODE XREF: __muldc3+367j
					; __muldc3+548j
		fld1
		fxch	st(2)

loc_6CEC2853:				; CODE XREF: __muldc3+438j
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(1)
		test	ah, 2
		fabs
		jz	short loc_6CEC2864
		fchs

loc_6CEC2864:				; CODE XREF: __muldc3+380j
		fxch	st(3)
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC28A6
		jnz	short loc_6CEC28A6
		fxch	st(2)
		jmp	short loc_6CEC2875
; ---------------------------------------------------------------------------

loc_6CEC2873:				; CODE XREF: __muldc3+3D1j
		fxch	st(2)

loc_6CEC2875:				; CODE XREF: __muldc3+391j
					; __muldc3+3DBj
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2886
		lea	esi, [esi+0]
		jz	loc_6CEC270D

loc_6CEC2886:				; CODE XREF: __muldc3+39Aj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	loc_6CEC2713
		fstp	st
		fldz
		fchs
		fxch	st(2)
		fxch	st(3)
		jmp	loc_6CEC2717
; ---------------------------------------------------------------------------

loc_6CEC28A6:				; CODE XREF: __muldc3+38Bj
					; __muldc3+38Dj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2873
		fstp	st
		fldz
		fchs
		fxch	st(2)
		jmp	short loc_6CEC2875
; ---------------------------------------------------------------------------

loc_6CEC28BD:				; CODE XREF: __muldc3+115j
		fxch	st(3)
		jmp	short loc_6CEC28C3
; ---------------------------------------------------------------------------

loc_6CEC28C1:				; CODE XREF: __muldc3+11Dj
		fxch	st(3)

loc_6CEC28C3:				; CODE XREF: __muldc3+3DFj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2602
		xchg	ax, ax
		jnz	loc_6CEC2606
		fstp	st(5)
		fstp	st
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fld1
		jz	short loc_6CEC28F3
		fstp	st
		fld1
		fchs

loc_6CEC28F3:				; CODE XREF: __muldc3+40Bj
		fld	st(1)
		fsub	st, st(2)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2A0F
		jz	short loc_6CEC2914
		jmp	loc_6CEC2A13
; ---------------------------------------------------------------------------

loc_6CEC2909:				; CODE XREF: __muldc3+53Aj
		fxch	st(1)
		nop
		lea	esi, [esi+0]
		jmp	short loc_6CEC2914
; ---------------------------------------------------------------------------

loc_6CEC2912:				; CODE XREF: __muldc3+540j
		fxch	st(1)

loc_6CEC2914:				; CODE XREF: __muldc3+422j
					; __muldc3+430j
		fldz
		fxch	st(2)
		jmp	loc_6CEC2853
; ---------------------------------------------------------------------------

loc_6CEC291D:				; CODE XREF: __muldc3+EDj
		fxch	st(5)
		jmp	short loc_6CEC2923
; ---------------------------------------------------------------------------

loc_6CEC2921:				; CODE XREF: __muldc3+F5j
		fxch	st(5)

loc_6CEC2923:				; CODE XREF: __muldc3+43Fj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC25DA
		xchg	ax, ax
		jnz	loc_6CEC25E2
		fxch	st(6)
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC294B
		fstp	st
		fldz
		fchs

loc_6CEC294B:				; CODE XREF: __muldc3+463j
					; __muldc3+561j
		fld1
		fxch	st(7)

loc_6CEC294F:				; CODE XREF: __muldc3+52Aj
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(6)
		test	ah, 2
		fabs
		jz	short loc_6CEC2964
		fchs
		fxch	st(4)
		jmp	short loc_6CEC2966
; ---------------------------------------------------------------------------

loc_6CEC2964:				; CODE XREF: __muldc3+47Cj
		fxch	st(4)

loc_6CEC2966:				; CODE XREF: __muldc3+482j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC29A5
		jnz	short loc_6CEC29A5
		fxch	st(3)
		jmp	short loc_6CEC2975
; ---------------------------------------------------------------------------

loc_6CEC2973:				; CODE XREF: __muldc3+4D0j
		fxch	st(3)

loc_6CEC2975:				; CODE XREF: __muldc3+491j
					; __muldc3+4DAj
		fucom	st
		fnstsw	ax
		mov	ecx, 1
		sahf
		nop
		jp	short loc_6CEC2988
		jz	loc_6CEC25EC

loc_6CEC2988:				; CODE XREF: __muldc3+4A0j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC299B
		fstp	st
		fldz
		fchs

loc_6CEC299B:				; CODE XREF: __muldc3+4B3j
		mov	ecx, 1
		jmp	loc_6CEC25EC
; ---------------------------------------------------------------------------

loc_6CEC29A5:				; CODE XREF: __muldc3+48Bj
					; __muldc3+48Dj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2973
		fstp	st
		fldz
		fchs
		fxch	st(3)
		jmp	short loc_6CEC2975
; ---------------------------------------------------------------------------

loc_6CEC29BC:				; CODE XREF: __muldc3+C5j
		fxch	st(6)
		jmp	short loc_6CEC29C2
; ---------------------------------------------------------------------------

loc_6CEC29C0:				; CODE XREF: __muldc3+D0j
		fxch	st(6)

loc_6CEC29C2:				; CODE XREF: __muldc3+4DEj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC25B5
		lea	esi, [esi+0]
		jnz	loc_6CEC25C2
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fld1
		jz	short loc_6CEC29E9
		fstp	st
		fld1
		fchs

loc_6CEC29E9:				; CODE XREF: __muldc3+501j
		fld	st(5)
		fsub	st, st(6)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2A2D
		jz	short loc_6CEC2A04
		jmp	short loc_6CEC2A32
; ---------------------------------------------------------------------------

loc_6CEC29F8:				; CODE XREF: __muldc3+559j
		fxch	st(5)
		lea	esi, [esi+0]
		jmp	short loc_6CEC2A04
; ---------------------------------------------------------------------------

loc_6CEC2A02:				; CODE XREF: __muldc3+55Bj
		fxch	st(5)

loc_6CEC2A04:				; CODE XREF: __muldc3+514j
					; __muldc3+520j
		fldz
		fxch	st(7)
		fxch	st(6)
		jmp	loc_6CEC294F
; ---------------------------------------------------------------------------

loc_6CEC2A0F:				; CODE XREF: __muldc3+41Cj
		fxch	st(1)
		jmp	short loc_6CEC2A15
; ---------------------------------------------------------------------------

loc_6CEC2A13:				; CODE XREF: __muldc3+424j
		fxch	st(1)

loc_6CEC2A15:				; CODE XREF: __muldc3+531j
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2909
		jnz	loc_6CEC2912
		fxch	st(1)
		jmp	loc_6CEC284F
; ---------------------------------------------------------------------------

loc_6CEC2A2D:				; CODE XREF: __muldc3+512j
		fxch	st(5)
		nop
		jmp	short loc_6CEC2A34
; ---------------------------------------------------------------------------

loc_6CEC2A32:				; CODE XREF: __muldc3+516j
		fxch	st(5)

loc_6CEC2A34:				; CODE XREF: __muldc3+550j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC29F8
		jnz	short loc_6CEC2A02
		fxch	st(6)
		fxch	st(5)
		jmp	loc_6CEC294B
__muldc3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  70. __mulxc3

; =============== S U B	R O U T	I N E =======================================


		public __mulxc3
__mulxc3	proc near

var_24		= tbyte	ptr -24h
var_18		= tbyte	ptr -18h
var_C		= tbyte	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= tbyte	ptr  8
arg_10		= tbyte	ptr  14h
arg_1C		= tbyte	ptr  20h
arg_28		= tbyte	ptr  2Ch

		sub	esp, 24h
		fld	[esp+24h+arg_4]
		mov	edx, [esp+24h+arg_0]
		fld	[esp+24h+arg_10]
		fld	[esp+24h+arg_1C]
		fld	[esp+24h+arg_28]
		fld	st(3)
		fmul	st, st(2)
		fld	st(3)
		fmul	st, st(2)
		fstp	[esp+24h+var_C]
		fld	st(4)
		fmul	st, st(2)
		fld	st
		fstp	[esp+24h+var_18]
		fld	st(4)
		fmul	st, st(4)
		fstp	[esp+24h+var_24]
		fld	[esp+24h+var_C]
		fsubr	st, st(2)
		fld	[esp+24h+var_24]
		faddp	st(2), st
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2ADF
		jnz	short loc_6CEC2AE3
		fstp	st(5)
		fstp	st(5)
		fstp	st
		fstp	st
		fstp	st
		jmp	short loc_6CEC2AD2
; ---------------------------------------------------------------------------

loc_6CEC2AA4:				; CODE XREF: __mulxc3+A0j
		fstp	st(6)
		fstp	st(4)
		fstp	st
		fstp	st
		fstp	st
		jmp	short loc_6CEC2AD2
; ---------------------------------------------------------------------------

loc_6CEC2AB0:				; CODE XREF: __mulxc3+182j
		fstp	st
		fstp	st(4)
		fstp	st
		fstp	st
		fxch	st(1)
		jmp	short loc_6CEC2AD2
; ---------------------------------------------------------------------------

loc_6CEC2ABC:				; CODE XREF: __mulxc3+190j
		fstp	st
		fstp	st(4)
		fstp	st
		fstp	st
		fxch	st(1)
		jmp	short loc_6CEC2AD2
; ---------------------------------------------------------------------------

loc_6CEC2AC8:				; CODE XREF: __mulxc3+196j
		fstp	st
		fstp	st(4)
		fstp	st
		fstp	st
		fxch	st(1)

loc_6CEC2AD2:				; CODE XREF: __mulxc3+52j __mulxc3+5Ej ...
		fstp	tbyte ptr [edx]
		mov	eax, edx
		fstp	tbyte ptr [edx+0Ch]
		add	esp, 24h
		retn	4
; ---------------------------------------------------------------------------

loc_6CEC2ADF:				; CODE XREF: __mulxc3+44j
		fxch	st(1)
		jmp	short loc_6CEC2AE5
; ---------------------------------------------------------------------------

loc_6CEC2AE3:				; CODE XREF: __mulxc3+46j
		fxch	st(1)

loc_6CEC2AE5:				; CODE XREF: __mulxc3+91j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2AF2
		lea	esi, [esi+0]
		jz	short loc_6CEC2AA4

loc_6CEC2AF2:				; CODE XREF: __mulxc3+9Aj
		fld	st(6)
		fsub	st, st(7)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2F0C
		jz	short loc_6CEC2B14
		jmp	loc_6CEC2F10
; ---------------------------------------------------------------------------

loc_6CEC2B08:				; CODE XREF: __mulxc3+4C7j
		fxch	st(6)
		lea	esi, [esi+0]
		jmp	short loc_6CEC2B14
; ---------------------------------------------------------------------------

loc_6CEC2B12:				; CODE XREF: __mulxc3+4D0j
		fxch	st(6)

loc_6CEC2B14:				; CODE XREF: __mulxc3+B1j __mulxc3+C0j
		fld	st(5)
		fsub	st, st(6)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2E6D
		jz	short loc_6CEC2B34
		jmp	loc_6CEC2E71
; ---------------------------------------------------------------------------

loc_6CEC2B2A:				; CODE XREF: __mulxc3+428j
		fxch	st(5)
		lea	esi, [esi+0]
		jmp	short loc_6CEC2B34
; ---------------------------------------------------------------------------

loc_6CEC2B32:				; CODE XREF: __mulxc3+430j
		fxch	st(5)

loc_6CEC2B34:				; CODE XREF: __mulxc3+D3j __mulxc3+E0j
		fxch	st(5)
		fxch	st(4)
		fxch	st(3)
		xor	ecx, ecx

loc_6CEC2B3C:				; CODE XREF: __mulxc3+482j
					; __mulxc3+4A0j
		fld	st(3)
		fsub	st, st(4)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2E0D
		jz	short loc_6CEC2B58
		jmp	loc_6CEC2E11
; ---------------------------------------------------------------------------

loc_6CEC2B52:				; CODE XREF: __mulxc3+3C8j
		fxch	st(3)
		jmp	short loc_6CEC2B58
; ---------------------------------------------------------------------------

loc_6CEC2B56:				; CODE XREF: __mulxc3+3D0j
		fxch	st(3)

loc_6CEC2B58:				; CODE XREF: __mulxc3+FBj
					; __mulxc3+104j
		fld	st
		fsub	st, st(1)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2D6F
		jnz	loc_6CEC2D6F

loc_6CEC2B6D:				; CODE XREF: __mulxc3+324j
					; __mulxc3+32Aj
		test	cl, cl
		jnz	loc_6CEC2C47
		fld	st(2)
		fsub	st, st(3)
		fucomp	st
		fnstsw	ax
		sahf
		xchg	ax, ax
		jp	loc_6CEC2D25
		jnz	loc_6CEC2D29
		fstp	st(2)
		fxch	st(1)
		jmp	short loc_6CEC2B98
; ---------------------------------------------------------------------------

loc_6CEC2B92:				; CODE XREF: __mulxc3+2E0j
		fxch	st(1)
		jmp	short loc_6CEC2B98
; ---------------------------------------------------------------------------

loc_6CEC2B96:				; CODE XREF: __mulxc3+2E6j
		fxch	st(1)

loc_6CEC2B98:				; CODE XREF: __mulxc3+140j
					; __mulxc3+144j
		fld	[esp+24h+var_C]
		fsub	st, st
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2D4B
		jnz	loc_6CEC2D4B

loc_6CEC2BAF:				; CODE XREF: __mulxc3+304j
					; __mulxc3+30Aj
		fld	[esp+24h+var_18]
		fsub	st, st
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2D01
		jnz	loc_6CEC2D01

loc_6CEC2BC6:				; CODE XREF: __mulxc3+2BAj
					; __mulxc3+2C0j
		fld	[esp+24h+var_24]
		fsub	st, st
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2BD8
		jz	loc_6CEC2AB0

loc_6CEC2BD8:				; CODE XREF: __mulxc3+180j
		fld	[esp+24h+var_24]
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC2ABC
		jp	loc_6CEC2AC8
		fstp	st(4)
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)

loc_6CEC2BF6:				; CODE XREF: __mulxc3+2D0j
					; __mulxc3+2F6j ...
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2CE3
		jnz	loc_6CEC2CE3
		fxch	st(2)
		jmp	short loc_6CEC2C0D
; ---------------------------------------------------------------------------

loc_6CEC2C0B:				; CODE XREF: __mulxc3+29Ej
		fxch	st(2)

loc_6CEC2C0D:				; CODE XREF: __mulxc3+1B9j
					; __mulxc3+2ACj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2CC5
		jnz	loc_6CEC2CC5
		fxch	st(1)
		jmp	short loc_6CEC2C24
; ---------------------------------------------------------------------------

loc_6CEC2C22:				; CODE XREF: __mulxc3+280j
		fxch	st(1)

loc_6CEC2C24:				; CODE XREF: __mulxc3+1D0j
					; __mulxc3+28Ej
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2CA7
		jnz	short loc_6CEC2CA7
		fxch	st(3)
		nop
		jmp	short loc_6CEC2C34
; ---------------------------------------------------------------------------

loc_6CEC2C32:				; CODE XREF: __mulxc3+262j
		fxch	st(3)

loc_6CEC2C34:				; CODE XREF: __mulxc3+1E0j
					; __mulxc3+270j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2C8A
		jnz	short loc_6CEC2C8A
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC2C67
; ---------------------------------------------------------------------------

loc_6CEC2C47:				; CODE XREF: __mulxc3+11Fj
		fstp	st(5)
		fstp	st
		fstp	st
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC2C67
; ---------------------------------------------------------------------------

loc_6CEC2C53:				; CODE XREF: __mulxc3+245j
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC2C67
; ---------------------------------------------------------------------------

loc_6CEC2C5D:				; CODE XREF: __mulxc3+380j
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC2C67
; ---------------------------------------------------------------------------

loc_6CEC2C63:				; CODE XREF: __mulxc3+391j
		fxch	st(2)
		fxch	st(3)

loc_6CEC2C67:				; CODE XREF: __mulxc3+1F5j
					; __mulxc3+201j ...
		fld	st(3)
		fmul	st, st(2)
		fld	st(3)
		fmul	st, st(2)
		fsubp	st(1), st
		fld	ds:flt_6CECA254
		fmul	st(1), st
		fxch	st(5)
		fmulp	st(2), st
		fxch	st(3)
		fmulp	st(2), st
		faddp	st(1), st
		fmulp	st(2), st
		jmp	loc_6CEC2AD2
; ---------------------------------------------------------------------------

loc_6CEC2C8A:				; CODE XREF: __mulxc3+1E9j
					; __mulxc3+1EBj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2C53
		fstp	st
		fldz
		fchs
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC2C67
; ---------------------------------------------------------------------------

loc_6CEC2CA7:				; CODE XREF: __mulxc3+1D9j
					; __mulxc3+1DBj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	loc_6CEC2C32
		fstp	st
		fldz
		fchs
		fxch	st(3)
		jmp	loc_6CEC2C34
; ---------------------------------------------------------------------------

loc_6CEC2CC5:				; CODE XREF: __mulxc3+1C2j
					; __mulxc3+1C8j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	loc_6CEC2C22
		fstp	st
		fldz
		fchs
		fxch	st(1)
		jmp	loc_6CEC2C24
; ---------------------------------------------------------------------------

loc_6CEC2CE3:				; CODE XREF: __mulxc3+1ABj
					; __mulxc3+1B1j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	loc_6CEC2C0B
		fstp	st
		fldz
		fchs
		fxch	st(2)
		jmp	loc_6CEC2C0D
; ---------------------------------------------------------------------------

loc_6CEC2D01:				; CODE XREF: __mulxc3+16Aj
					; __mulxc3+170j
		fld	[esp+24h+var_18]
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2BC6
		jnz	loc_6CEC2BC6
		fstp	st(4)
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	loc_6CEC2BF6
; ---------------------------------------------------------------------------

loc_6CEC2D25:				; CODE XREF: __mulxc3+130j
		fxch	st(2)
		jmp	short loc_6CEC2D2B
; ---------------------------------------------------------------------------

loc_6CEC2D29:				; CODE XREF: __mulxc3+136j
		fxch	st(2)

loc_6CEC2D2B:				; CODE XREF: __mulxc3+2D7j
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2B92
		jnz	loc_6CEC2B96
		fstp	st
		fstp	st(3)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	loc_6CEC2BF6
; ---------------------------------------------------------------------------

loc_6CEC2D4B:				; CODE XREF: __mulxc3+153j
					; __mulxc3+159j
		fld	[esp+24h+var_C]
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2BAF
		jnz	loc_6CEC2BAF
		fstp	st(4)
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	loc_6CEC2BF6
; ---------------------------------------------------------------------------

loc_6CEC2D6F:				; CODE XREF: __mulxc3+111j
					; __mulxc3+117j
		fucom	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC2B6D
		jp	loc_6CEC2B6D
		fstp	st(5)
		fstp	st
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxch	st(1)
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2D9F
		fstp	st
		fldz
		fchs

loc_6CEC2D9F:				; CODE XREF: __mulxc3+347j
					; __mulxc3+528j
		fld1
		fxch	st(2)

loc_6CEC2DA3:				; CODE XREF: __mulxc3+418j
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(1)
		test	ah, 2
		fabs
		jz	short loc_6CEC2DB4
		fchs

loc_6CEC2DB4:				; CODE XREF: __mulxc3+360j
		fxch	st(3)
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2DF6
		jnz	short loc_6CEC2DF6
		fxch	st(2)
		jmp	short loc_6CEC2DC5
; ---------------------------------------------------------------------------

loc_6CEC2DC3:				; CODE XREF: __mulxc3+3B1j
		fxch	st(2)

loc_6CEC2DC5:				; CODE XREF: __mulxc3+371j
					; __mulxc3+3BBj
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2DD6
		lea	esi, [esi+0]
		jz	loc_6CEC2C5D

loc_6CEC2DD6:				; CODE XREF: __mulxc3+37Aj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	loc_6CEC2C63
		fstp	st
		fldz
		fchs
		fxch	st(2)
		fxch	st(3)
		jmp	loc_6CEC2C67
; ---------------------------------------------------------------------------

loc_6CEC2DF6:				; CODE XREF: __mulxc3+36Bj
					; __mulxc3+36Dj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2DC3
		fstp	st
		fldz
		fchs
		fxch	st(2)
		jmp	short loc_6CEC2DC5
; ---------------------------------------------------------------------------

loc_6CEC2E0D:				; CODE XREF: __mulxc3+F5j
		fxch	st(3)
		jmp	short loc_6CEC2E13
; ---------------------------------------------------------------------------

loc_6CEC2E11:				; CODE XREF: __mulxc3+FDj
		fxch	st(3)

loc_6CEC2E13:				; CODE XREF: __mulxc3+3BFj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2B52
		xchg	ax, ax
		jnz	loc_6CEC2B56
		fstp	st(5)
		fstp	st
		fstp	st
		fxch	st(1)
		fxch	st(2)
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fld1
		jz	short loc_6CEC2E43
		fstp	st
		fld1
		fchs

loc_6CEC2E43:				; CODE XREF: __mulxc3+3EBj
		fld	st(1)
		fsub	st, st(2)
		fucomp	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2F5F
		jz	short loc_6CEC2E64
		jmp	loc_6CEC2F63
; ---------------------------------------------------------------------------

loc_6CEC2E59:				; CODE XREF: __mulxc3+51Aj
		fxch	st(1)
		nop
		lea	esi, [esi+0]
		jmp	short loc_6CEC2E64
; ---------------------------------------------------------------------------

loc_6CEC2E62:				; CODE XREF: __mulxc3+520j
		fxch	st(1)

loc_6CEC2E64:				; CODE XREF: __mulxc3+402j
					; __mulxc3+410j
		fldz
		fxch	st(2)
		jmp	loc_6CEC2DA3
; ---------------------------------------------------------------------------

loc_6CEC2E6D:				; CODE XREF: __mulxc3+CDj
		fxch	st(5)
		jmp	short loc_6CEC2E73
; ---------------------------------------------------------------------------

loc_6CEC2E71:				; CODE XREF: __mulxc3+D5j
		fxch	st(5)

loc_6CEC2E73:				; CODE XREF: __mulxc3+41Fj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2B2A
		xchg	ax, ax
		jnz	loc_6CEC2B32
		fxch	st(6)
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2E9B
		fstp	st
		fldz
		fchs

loc_6CEC2E9B:				; CODE XREF: __mulxc3+443j
					; __mulxc3+541j
		fld1
		fxch	st(7)

loc_6CEC2E9F:				; CODE XREF: __mulxc3+50Aj
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(6)
		test	ah, 2
		fabs
		jz	short loc_6CEC2EB4
		fchs
		fxch	st(4)
		jmp	short loc_6CEC2EB6
; ---------------------------------------------------------------------------

loc_6CEC2EB4:				; CODE XREF: __mulxc3+45Cj
		fxch	st(4)

loc_6CEC2EB6:				; CODE XREF: __mulxc3+462j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2EF5
		jnz	short loc_6CEC2EF5
		fxch	st(3)
		jmp	short loc_6CEC2EC5
; ---------------------------------------------------------------------------

loc_6CEC2EC3:				; CODE XREF: __mulxc3+4B0j
		fxch	st(3)

loc_6CEC2EC5:				; CODE XREF: __mulxc3+471j
					; __mulxc3+4BAj
		fucom	st
		fnstsw	ax
		mov	ecx, 1
		sahf
		nop
		jp	short loc_6CEC2ED8
		jz	loc_6CEC2B3C

loc_6CEC2ED8:				; CODE XREF: __mulxc3+480j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2EEB
		fstp	st
		fldz
		fchs

loc_6CEC2EEB:				; CODE XREF: __mulxc3+493j
		mov	ecx, 1
		jmp	loc_6CEC2B3C
; ---------------------------------------------------------------------------

loc_6CEC2EF5:				; CODE XREF: __mulxc3+46Bj
					; __mulxc3+46Dj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fldz
		jz	short loc_6CEC2EC3
		fstp	st
		fldz
		fchs
		fxch	st(3)
		jmp	short loc_6CEC2EC5
; ---------------------------------------------------------------------------

loc_6CEC2F0C:				; CODE XREF: __mulxc3+ABj
		fxch	st(6)
		jmp	short loc_6CEC2F12
; ---------------------------------------------------------------------------

loc_6CEC2F10:				; CODE XREF: __mulxc3+B3j
		fxch	st(6)

loc_6CEC2F12:				; CODE XREF: __mulxc3+4BEj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2B08
		lea	esi, [esi+0]
		jnz	loc_6CEC2B12
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fld1
		jz	short loc_6CEC2F39
		fstp	st
		fld1
		fchs

loc_6CEC2F39:				; CODE XREF: __mulxc3+4E1j
		fld	st(5)
		fsub	st, st(6)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2F7D
		jz	short loc_6CEC2F54
		jmp	short loc_6CEC2F82
; ---------------------------------------------------------------------------

loc_6CEC2F48:				; CODE XREF: __mulxc3+539j
		fxch	st(5)
		lea	esi, [esi+0]
		jmp	short loc_6CEC2F54
; ---------------------------------------------------------------------------

loc_6CEC2F52:				; CODE XREF: __mulxc3+53Bj
		fxch	st(5)

loc_6CEC2F54:				; CODE XREF: __mulxc3+4F4j
					; __mulxc3+500j
		fldz
		fxch	st(7)
		fxch	st(6)
		jmp	loc_6CEC2E9F
; ---------------------------------------------------------------------------

loc_6CEC2F5F:				; CODE XREF: __mulxc3+3FCj
		fxch	st(1)
		jmp	short loc_6CEC2F65
; ---------------------------------------------------------------------------

loc_6CEC2F63:				; CODE XREF: __mulxc3+404j
		fxch	st(1)

loc_6CEC2F65:				; CODE XREF: __mulxc3+511j
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC2E59
		jnz	loc_6CEC2E62
		fxch	st(1)
		jmp	loc_6CEC2D9F
; ---------------------------------------------------------------------------

loc_6CEC2F7D:				; CODE XREF: __mulxc3+4F2j
		fxch	st(5)
		nop
		jmp	short loc_6CEC2F84
; ---------------------------------------------------------------------------

loc_6CEC2F82:				; CODE XREF: __mulxc3+4F6j
		fxch	st(5)

loc_6CEC2F84:				; CODE XREF: __mulxc3+530j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC2F48
		jnz	short loc_6CEC2F52
		fxch	st(6)
		fxch	st(5)
		jmp	loc_6CEC2E9B
__mulxc3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  40. __divsc3

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _divsc3(float, float, float, float)
		public __divsc3
__divsc3	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		fld	[esp+8+arg_0]
		fld	[esp+8+arg_4]
		fld	[esp+8+arg_8]
		fld	[esp+8+arg_C]
		fld	st(1)
		fabs
		fld	st(1)
		fabs
		fucompp
		fnstsw	ax
		sahf
		jbe	loc_6CEC3060
		fld	st(1)
		fdiv	st, st(1)
		fld	st(2)
		fmul	st, st(1)
		fadd	st, st(2)
		fld	st(5)
		fmul	st, st(2)
		fadd	st, st(5)
		fdiv	st, st(1)
		fxch	st(2)
		fmul	st, st(5)
		fsub	st, st(6)
		fdivrp	st(1), st
		fxch	st(1)

loc_6CEC2FE2:				; CODE XREF: __divsc3+DCj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC3081
		jnz	loc_6CEC3085
		fstp	st(4)
		fstp	st(4)
		fstp	st
		fstp	st
		jmp	short loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC2FFD:				; CODE XREF: __divsc3+F0j
		fstp	st(5)
		fstp	st(3)
		fstp	st
		fstp	st
		jmp	short loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC3007:				; CODE XREF: __divsc3+1DBj
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC3011:				; CODE XREF: __divsc3+1F0j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC301B:				; CODE XREF: __divsc3+1F6j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC3025:				; CODE XREF: __divsc3+207j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC302F:				; CODE XREF: __divsc3+210j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC3039:				; CODE XREF: __divsc3+21Fj
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC3043:				; CODE XREF: __divsc3+225j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		nop
		lea	esi, [esi+0]

loc_6CEC3050:				; CODE XREF: __divsc3+5Bj __divsc3+65j ...
		fstp	[esp+8+var_8]
		mov	eax, [esp+8+var_8]
		fstp	[esp+8+var_8]
		mov	edx, [esp+8+var_8]
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6CEC3060:				; CODE XREF: __divsc3+20j
		fld	st
		fdiv	st, st(2)
		fld	st(1)
		fmul	st, st(1)
		fadd	st, st(3)
		fld	st(4)
		fmul	st, st(2)
		fadd	st, st(6)
		fdiv	st, st(1)
		fxch	st(2)
		fmul	st, st(6)
		fsubr	st, st(5)
		fdivrp	st(1), st
		fxch	st(1)
		jmp	loc_6CEC2FE2
; ---------------------------------------------------------------------------

loc_6CEC3081:				; CODE XREF: __divsc3+47j
		fxch	st(1)
		jmp	short loc_6CEC3087
; ---------------------------------------------------------------------------

loc_6CEC3085:				; CODE XREF: __divsc3+4Dj
		fxch	st(1)

loc_6CEC3087:				; CODE XREF: __divsc3+E3j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3096
		xchg	ax, ax
		jz	loc_6CEC2FFD

loc_6CEC3096:				; CODE XREF: __divsc3+ECj
		fldz
		fxch	st(4)
		fucom	st(4)
		fnstsw	ax
		sahf
		jnz	loc_6CEC3257
		jp	loc_6CEC3261
		fxch	st(3)
		fucom	st(4)
		fnstsw	ax
		fstp	st(4)
		sahf
		jnz	loc_6CEC326B
		jp	loc_6CEC3271
		fxch	st(5)
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3101
		jnz	short loc_6CEC3105
		fstp	st(3)
		fstp	st
		fstp	st(3)
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC30DD
; ---------------------------------------------------------------------------

loc_6CEC30D7:				; CODE XREF: __divsc3+170j
		fstp	st(5)
		fstp	st
		fstp	st(1)

loc_6CEC30DD:				; CODE XREF: __divsc3+135j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fld	ds:flt_6CECA258
		jz	short loc_6CEC30F6
		fstp	st
		fld	ds:flt_6CECA25C

loc_6CEC30F6:				; CODE XREF: __divsc3+14Cj
		fld	st
		fmulp	st(2), st
		fmulp	st(2), st
		jmp	loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC3101:				; CODE XREF: __divsc3+127j
		fxch	st(4)
		jmp	short loc_6CEC3107
; ---------------------------------------------------------------------------

loc_6CEC3105:				; CODE XREF: __divsc3+129j
		fxch	st(4)

loc_6CEC3107:				; CODE XREF: __divsc3+163j
		fucom	st
		fnstsw	ax
		sahf
		jnz	short loc_6CEC3112
		xchg	ax, ax
		jnp	short loc_6CEC30D7

loc_6CEC3112:				; CODE XREF: __divsc3+16Cj
		fld	st(4)
		fsub	st, st(5)
		fstp	[esp+8+var_4]
		fxch	st(1)
		fxch	st(3)
		fxch	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(5)
		fxch	st(2)
		jmp	short loc_6CEC314A
; ---------------------------------------------------------------------------

loc_6CEC312A:				; CODE XREF: __divsc3+2FEj
		fstp	st(5)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)
		jmp	short loc_6CEC314A
; ---------------------------------------------------------------------------

loc_6CEC3136:				; CODE XREF: __divsc3+304j
		fstp	st(5)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)
		jmp	short loc_6CEC314A
; ---------------------------------------------------------------------------

loc_6CEC3142:				; CODE XREF: __divsc3+313j
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)

loc_6CEC314A:				; CODE XREF: __divsc3+188j
					; __divsc3+194j ...
		fld	st(5)
		fsub	st, st(6)
		fxch	st(1)
		fxch	st(5)
		fxch	st(4)
		fxch	st(3)
		fxch	st(2)
		fxch	st(1)

loc_6CEC315A:				; CODE XREF: __divsc3+322j
					; __divsc3+328j ...
		fucomp	st
		fnstsw	ax
		fxch	st(5)
		sahf
		fucom	st
		fnstsw	ax
		setp	dl
		sahf
		setnp	al
		and	dl, al
		jnz	short loc_6CEC319E
		fld	st(3)
		fsub	st, st(4)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3185
		jz	loc_6CEC3007
		fxch	st(3)
		jmp	short loc_6CEC3187
; ---------------------------------------------------------------------------

loc_6CEC3185:				; CODE XREF: __divsc3+1D9j
		fxch	st(3)

loc_6CEC3187:				; CODE XREF: __divsc3+1E3j
		fucom	st
		fnstsw	ax
		sahf
		lea	esi, [esi+0]
		jnz	loc_6CEC3011
		jp	loc_6CEC301B
		fxch	st(3)

loc_6CEC319E:				; CODE XREF: __divsc3+1CEj
		fld	[esp+8+var_4]
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC3025
		lea	esi, [esi+0]
		jp	loc_6CEC302F
		fld	st(4)
		fsub	st, st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC3039
		jp	loc_6CEC3043
		fstp	st(2)
		fstp	st
		test	dl, dl
		jnz	short loc_6CEC3251
		fldz
		fxch	st(1)

loc_6CEC31D7:				; CODE XREF: __divsc3+2B5j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fabs
		jz	short loc_6CEC31E6
		fchs

loc_6CEC31E6:				; CODE XREF: __divsc3+242j
		fld	st(1)
		fsub	st, st(2)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC323A
		jz	short loc_6CEC3204
		jmp	short loc_6CEC323E
; ---------------------------------------------------------------------------

loc_6CEC31F5:				; CODE XREF: __divsc3+2A5j
		fxch	st(1)
		mov	esi, esi
		lea	edi, [edi+0]
		jmp	short loc_6CEC3204
; ---------------------------------------------------------------------------

loc_6CEC3202:				; CODE XREF: __divsc3+2A7j
		fxch	st(1)

loc_6CEC3204:				; CODE XREF: __divsc3+251j
					; __divsc3+260j
		fldz
		fxch	st(2)

loc_6CEC3208:				; CODE XREF: __divsc3+2AFj
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(1)
		test	ah, 2
		fabs
		jz	short loc_6CEC3219
		fchs

loc_6CEC3219:				; CODE XREF: __divsc3+275j
		fld	st(3)
		fmul	st, st(2)
		fld	st(3)
		fmul	st, st(2)
		faddp	st(1), st
		fldz
		fmul	st(1), st
		fxch	st(3)
		fmulp	st(4), st
		fxch	st(1)
		fmulp	st(4), st
		fxch	st(2)
		fsubrp	st(3), st
		fmulp	st(2), st
		jmp	loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC323A:				; CODE XREF: __divsc3+24Fj
		fxch	st(1)
		jmp	short loc_6CEC3240
; ---------------------------------------------------------------------------

loc_6CEC323E:				; CODE XREF: __divsc3+253j
		fxch	st(1)

loc_6CEC3240:				; CODE XREF: __divsc3+29Cj
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC31F5
		jnz	short loc_6CEC3202
		fld1
		fxch	st(2)
		fxch	st(1)
		jmp	short loc_6CEC3208
; ---------------------------------------------------------------------------

loc_6CEC3251:				; CODE XREF: __divsc3+231j
		fld1
		fxch	st(1)
		jmp	short loc_6CEC31D7
; ---------------------------------------------------------------------------

loc_6CEC3257:				; CODE XREF: __divsc3+FFj
		fstp	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC3275
; ---------------------------------------------------------------------------

loc_6CEC3261:				; CODE XREF: __divsc3+105j
		fstp	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC3275
; ---------------------------------------------------------------------------

loc_6CEC326B:				; CODE XREF: __divsc3+114j
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC3275
; ---------------------------------------------------------------------------

loc_6CEC3271:				; CODE XREF: __divsc3+11Aj
		fxch	st(1)
		fxch	st(2)

loc_6CEC3275:				; CODE XREF: __divsc3+2BFj
					; __divsc3+2C9j ...
		fld	st(5)
		fsub	st, st(6)
		fst	[esp+8+var_4]
		fucomp	st
		fnstsw	ax
		fxch	st(5)
		sahf
		fucom	st
		fnstsw	ax
		setp	dl
		sahf
		setnp	al
		and	dl, al
		jnz	short loc_6CEC32B9
		fld	st(4)
		fsub	st, st(5)
		fxch	st(5)
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC312A
		jnz	loc_6CEC3136
		fxch	st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	short loc_6CEC32B9
		jnp	loc_6CEC3142

loc_6CEC32B9:				; CODE XREF: __divsc3+2F1j
					; __divsc3+311j
		fld	st(5)
		fsub	st, st(6)
		fucom	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC315A
		jp	loc_6CEC315A
		fld	st(4)
		fsub	st, st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC315A
		lea	esi, [esi+0]
		jp	loc_6CEC315A
		fstp	st
		fstp	st(2)
		fstp	st
		test	dl, dl
		jnz	short loc_6CEC336B
		fldz
		fxch	st(1)

loc_6CEC32F4:				; CODE XREF: __divsc3+3CFj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fabs
		jz	short loc_6CEC3303
		fchs

loc_6CEC3303:				; CODE XREF: __divsc3+35Fj
		fld	st(2)
		fsub	st, st(3)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3354
		jz	short loc_6CEC3318
		jmp	short loc_6CEC3358
; ---------------------------------------------------------------------------

loc_6CEC3312:				; CODE XREF: __divsc3+3BFj
		fxch	st(2)
		jmp	short loc_6CEC3318
; ---------------------------------------------------------------------------

loc_6CEC3316:				; CODE XREF: __divsc3+3C1j
		fxch	st(2)

loc_6CEC3318:				; CODE XREF: __divsc3+36Ej
					; __divsc3+374j
		fldz
		fxch	st(3)

loc_6CEC331C:				; CODE XREF: __divsc3+3C9j
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(2)
		test	ah, 2
		fabs
		jz	short loc_6CEC332D
		fchs

loc_6CEC332D:				; CODE XREF: __divsc3+389j
		fld	st(2)
		fmul	st, st(4)
		fld	st(1)
		fmul	st, st(3)
		faddp	st(1), st
		fld	ds:flt_6CECA258
		fmul	st(1), st
		fxch	st(2)
		fmulp	st(5), st
		fxch	st(2)
		fmulp	st(3), st
		fxch	st(3)
		fsubrp	st(2), st
		fxch	st(1)
		fmulp	st(2), st
		jmp	loc_6CEC3050
; ---------------------------------------------------------------------------

loc_6CEC3354:				; CODE XREF: __divsc3+36Cj
		fxch	st(2)
		jmp	short loc_6CEC335A
; ---------------------------------------------------------------------------

loc_6CEC3358:				; CODE XREF: __divsc3+370j
		fxch	st(2)

loc_6CEC335A:				; CODE XREF: __divsc3+3B6j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3312
		jnz	short loc_6CEC3316
		fld1
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC331C
; ---------------------------------------------------------------------------

loc_6CEC336B:				; CODE XREF: __divsc3+34Ej
		fld1
		fxch	st(1)
		jmp	short loc_6CEC32F4
__divsc3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. __divdc3

; =============== S U B	R O U T	I N E =======================================


		public __divdc3
__divdc3	proc near

var_C		= qword	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= qword	ptr  8
arg_C		= qword	ptr  10h
arg_14		= qword	ptr  18h
arg_1C		= qword	ptr  20h

		sub	esp, 0Ch
		fld	[esp+0Ch+arg_4]
		fld	[esp+0Ch+arg_C]
		fld	[esp+0Ch+arg_14]
		fld	[esp+0Ch+arg_1C]
		fld	st(1)
		mov	edx, [esp+0Ch+arg_0]
		fabs
		fld	st(1)
		fabs
		fucompp
		fnstsw	ax
		sahf
		jbe	loc_6CEC3440
		fld	st(1)
		fdiv	st, st(1)
		fld	st(2)
		fmul	st, st(1)
		fadd	st, st(2)
		fld	st(5)
		fmul	st, st(2)
		fadd	st, st(5)
		fdiv	st, st(1)
		fxch	st(2)
		fmul	st, st(5)
		fsub	st, st(6)
		fdivrp	st(1), st
		fxch	st(1)

loc_6CEC33C6:				; CODE XREF: __divdc3+DCj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC3461
		jnz	loc_6CEC3465
		fstp	st(4)
		fstp	st(4)
		fstp	st
		fstp	st
		jmp	short loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC33E1:				; CODE XREF: __divdc3+F0j
		fstp	st(5)
		fstp	st(3)
		fstp	st
		fstp	st
		jmp	short loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC33EB:				; CODE XREF: __divdc3+1DAj
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC33F5:				; CODE XREF: __divdc3+1EBj
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC33FF:				; CODE XREF: __divdc3+1F1j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC3409:				; CODE XREF: __divdc3+201j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC3413:				; CODE XREF: __divdc3+207j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC341D:				; CODE XREF: __divdc3+216j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC3427:				; CODE XREF: __divdc3+220j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		nop

loc_6CEC3430:				; CODE XREF: __divdc3+5Fj __divdc3+69j ...
		fstp	qword ptr [edx]
		mov	eax, edx
		fstp	qword ptr [edx+8]
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC3440:				; CODE XREF: __divdc3+24j
		fld	st
		fdiv	st, st(2)
		fld	st(1)
		fmul	st, st(1)
		fadd	st, st(3)
		fld	st(4)
		fmul	st, st(2)
		fadd	st, st(6)
		fdiv	st, st(1)
		fxch	st(2)
		fmul	st, st(6)
		fsubr	st, st(5)
		fdivrp	st(1), st
		fxch	st(1)
		jmp	loc_6CEC33C6
; ---------------------------------------------------------------------------

loc_6CEC3461:				; CODE XREF: __divdc3+4Bj
		fxch	st(1)
		jmp	short loc_6CEC3467
; ---------------------------------------------------------------------------

loc_6CEC3465:				; CODE XREF: __divdc3+51j
		fxch	st(1)

loc_6CEC3467:				; CODE XREF: __divdc3+E3j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3476
		xchg	ax, ax
		jz	loc_6CEC33E1

loc_6CEC3476:				; CODE XREF: __divdc3+ECj
		fldz
		fxch	st(4)
		fucom	st(4)
		fnstsw	ax
		sahf
		jnz	loc_6CEC362B
		jp	loc_6CEC3635
		fxch	st(3)
		fucom	st(4)
		fnstsw	ax
		fstp	st(4)
		sahf
		jnz	loc_6CEC363F
		jp	loc_6CEC3645
		fxch	st(5)
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC34E1
		jnz	short loc_6CEC34E5
		fstp	st(3)
		fstp	st
		fstp	st(3)
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC34BD
; ---------------------------------------------------------------------------

loc_6CEC34B7:				; CODE XREF: __divdc3+170j
		fstp	st(5)
		fstp	st
		fstp	st(1)

loc_6CEC34BD:				; CODE XREF: __divdc3+135j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fld	ds:flt_6CECA260
		jz	short loc_6CEC34D6
		fstp	st
		fld	ds:flt_6CECA264

loc_6CEC34D6:				; CODE XREF: __divdc3+14Cj
		fld	st
		fmulp	st(2), st
		fmulp	st(2), st
		jmp	loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC34E1:				; CODE XREF: __divdc3+127j
		fxch	st(4)
		jmp	short loc_6CEC34E7
; ---------------------------------------------------------------------------

loc_6CEC34E5:				; CODE XREF: __divdc3+129j
		fxch	st(4)

loc_6CEC34E7:				; CODE XREF: __divdc3+163j
		fucom	st
		fnstsw	ax
		sahf
		jnz	short loc_6CEC34F2
		xchg	ax, ax
		jnp	short loc_6CEC34B7

loc_6CEC34F2:				; CODE XREF: __divdc3+16Cj
		fld	st(4)
		fsub	st, st(5)
		fstp	[esp+0Ch+var_C]
		fxch	st(1)
		fxch	st(3)
		fxch	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(5)
		fxch	st(2)
		jmp	short loc_6CEC3529
; ---------------------------------------------------------------------------

loc_6CEC3509:				; CODE XREF: __divdc3+2F1j
		fstp	st(5)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)
		jmp	short loc_6CEC3529
; ---------------------------------------------------------------------------

loc_6CEC3515:				; CODE XREF: __divdc3+2F7j
		fstp	st(5)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)
		jmp	short loc_6CEC3529
; ---------------------------------------------------------------------------

loc_6CEC3521:				; CODE XREF: __divdc3+306j
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)

loc_6CEC3529:				; CODE XREF: __divdc3+187j
					; __divdc3+193j ...
		fld	st(5)
		fsub	st, st(6)
		fxch	st(1)
		fxch	st(5)
		fxch	st(4)
		fxch	st(3)
		fxch	st(2)
		fxch	st(1)

loc_6CEC3539:				; CODE XREF: __divdc3+315j
					; __divdc3+31Bj ...
		fucomp	st
		fnstsw	ax
		fxch	st(5)
		sahf
		fucom	st
		fnstsw	ax
		setp	cl
		sahf
		setnp	al
		and	cl, al
		jnz	short loc_6CEC3579
		fld	st(3)
		fsub	st, st(4)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3564
		jz	loc_6CEC33EB
		fxch	st(3)
		jmp	short loc_6CEC3566
; ---------------------------------------------------------------------------

loc_6CEC3564:				; CODE XREF: __divdc3+1D8j
		fxch	st(3)

loc_6CEC3566:				; CODE XREF: __divdc3+1E2j
		fucom	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC33F5
		jp	loc_6CEC33FF
		fxch	st(3)

loc_6CEC3579:				; CODE XREF: __divdc3+1CDj
		fld	[esp+0Ch+var_C]
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC3409
		jp	loc_6CEC3413
		fld	st(4)
		fsub	st, st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC341D
		lea	esi, [esi+0]
		jp	loc_6CEC3427
		fstp	st(2)
		fstp	st
		test	cl, cl
		jnz	short loc_6CEC3625
		fldz
		fxch	st(1)

loc_6CEC35B2:				; CODE XREF: __divdc3+2A9j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fabs
		jz	short loc_6CEC35C1
		fchs

loc_6CEC35C1:				; CODE XREF: __divdc3+23Dj
		fld	st(1)
		fsub	st, st(2)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC360E
		jz	short loc_6CEC35D8
		xchg	ax, ax
		jmp	short loc_6CEC3612
; ---------------------------------------------------------------------------

loc_6CEC35D2:				; CODE XREF: __divdc3+299j
		fxch	st(1)
		jmp	short loc_6CEC35D8
; ---------------------------------------------------------------------------

loc_6CEC35D6:				; CODE XREF: __divdc3+29Bj
		fxch	st(1)

loc_6CEC35D8:				; CODE XREF: __divdc3+24Cj
					; __divdc3+254j
		fldz
		fxch	st(2)

loc_6CEC35DC:				; CODE XREF: __divdc3+2A3j
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(1)
		test	ah, 2
		fabs
		jz	short loc_6CEC35ED
		fchs

loc_6CEC35ED:				; CODE XREF: __divdc3+269j
		fld	st(3)
		fmul	st, st(2)
		fld	st(3)
		fmul	st, st(2)
		faddp	st(1), st
		fldz
		fmul	st(1), st
		fxch	st(3)
		fmulp	st(4), st
		fxch	st(1)
		fmulp	st(4), st
		fxch	st(2)
		fsubrp	st(3), st
		fmulp	st(2), st
		jmp	loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC360E:				; CODE XREF: __divdc3+24Aj
		fxch	st(1)
		jmp	short loc_6CEC3614
; ---------------------------------------------------------------------------

loc_6CEC3612:				; CODE XREF: __divdc3+250j
		fxch	st(1)

loc_6CEC3614:				; CODE XREF: __divdc3+290j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC35D2
		jnz	short loc_6CEC35D6
		fld1
		fxch	st(2)
		fxch	st(1)
		jmp	short loc_6CEC35DC
; ---------------------------------------------------------------------------

loc_6CEC3625:				; CODE XREF: __divdc3+22Cj
		fld1
		fxch	st(1)
		jmp	short loc_6CEC35B2
; ---------------------------------------------------------------------------

loc_6CEC362B:				; CODE XREF: __divdc3+FFj
		fstp	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC3649
; ---------------------------------------------------------------------------

loc_6CEC3635:				; CODE XREF: __divdc3+105j
		fstp	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC3649
; ---------------------------------------------------------------------------

loc_6CEC363F:				; CODE XREF: __divdc3+114j
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC3649
; ---------------------------------------------------------------------------

loc_6CEC3645:				; CODE XREF: __divdc3+11Aj
		fxch	st(1)
		fxch	st(2)

loc_6CEC3649:				; CODE XREF: __divdc3+2B3j
					; __divdc3+2BDj ...
		fld	st(5)
		fsub	st, st(6)
		fst	[esp+0Ch+var_C]
		fucomp	st
		fnstsw	ax
		fxch	st(5)
		sahf
		fucom	st
		fnstsw	ax
		setp	cl
		sahf
		setnp	al
		and	cl, al
		jnz	short loc_6CEC368C
		fld	st(4)
		fsub	st, st(5)
		fxch	st(5)
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC3509
		jnz	loc_6CEC3515
		fxch	st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	short loc_6CEC368C
		jnp	loc_6CEC3521

loc_6CEC368C:				; CODE XREF: __divdc3+2E4j
					; __divdc3+304j
		fld	st(5)
		fsub	st, st(6)
		fucom	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC3539
		jp	loc_6CEC3539
		fld	st(4)
		fsub	st, st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC3539
		jp	loc_6CEC3539
		fstp	st
		fstp	st(2)
		fstp	st
		test	cl, cl
		jnz	short loc_6CEC373B
		fldz
		fxch	st(1)

loc_6CEC36C4:				; CODE XREF: __divdc3+3BFj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fabs
		jz	short loc_6CEC36D3
		fchs

loc_6CEC36D3:				; CODE XREF: __divdc3+34Fj
		fld	st(2)
		fsub	st, st(3)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3724
		jz	short loc_6CEC36E8
		jmp	short loc_6CEC3728
; ---------------------------------------------------------------------------

loc_6CEC36E2:				; CODE XREF: __divdc3+3AFj
		fxch	st(2)
		jmp	short loc_6CEC36E8
; ---------------------------------------------------------------------------

loc_6CEC36E6:				; CODE XREF: __divdc3+3B1j
		fxch	st(2)

loc_6CEC36E8:				; CODE XREF: __divdc3+35Ej
					; __divdc3+364j
		fldz
		fxch	st(3)

loc_6CEC36EC:				; CODE XREF: __divdc3+3B9j
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(2)
		test	ah, 2
		fabs
		jz	short loc_6CEC36FD
		fchs

loc_6CEC36FD:				; CODE XREF: __divdc3+379j
		fld	st(2)
		fmul	st, st(4)
		fld	st(1)
		fmul	st, st(3)
		faddp	st(1), st
		fld	ds:flt_6CECA260
		fmul	st(1), st
		fxch	st(2)
		fmulp	st(5), st
		fxch	st(2)
		fmulp	st(3), st
		fxch	st(3)
		fsubrp	st(2), st
		fxch	st(1)
		fmulp	st(2), st
		jmp	loc_6CEC3430
; ---------------------------------------------------------------------------

loc_6CEC3724:				; CODE XREF: __divdc3+35Cj
		fxch	st(2)
		jmp	short loc_6CEC372A
; ---------------------------------------------------------------------------

loc_6CEC3728:				; CODE XREF: __divdc3+360j
		fxch	st(2)

loc_6CEC372A:				; CODE XREF: __divdc3+3A6j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC36E2
		jnz	short loc_6CEC36E6
		fld1
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC36EC
; ---------------------------------------------------------------------------

loc_6CEC373B:				; CODE XREF: __divdc3+33Ej
		fld1
		fxch	st(1)
		jmp	short loc_6CEC36C4
__divdc3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  41. __divxc3

; =============== S U B	R O U T	I N E =======================================


		public __divxc3
__divxc3	proc near

var_C		= tbyte	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= tbyte	ptr  8
arg_10		= tbyte	ptr  14h
arg_1C		= tbyte	ptr  20h
arg_28		= tbyte	ptr  2Ch

		sub	esp, 0Ch
		fld	[esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		fld	[esp+0Ch+arg_10]
		fld	[esp+0Ch+arg_1C]
		fld	[esp+0Ch+arg_28]
		fld	st(1)
		fabs
		fld	st(1)
		fabs
		fucompp
		fnstsw	ax
		sahf
		jbe	loc_6CEC3810
		fld	st(1)
		fdiv	st, st(1)
		fld	st(2)
		fmul	st, st(1)
		fadd	st, st(2)
		fld	st(5)
		fmul	st, st(2)
		fadd	st, st(5)
		fdiv	st, st(1)
		fxch	st(2)
		fmul	st, st(5)
		fsub	st, st(6)
		fdivrp	st(1), st
		fxch	st(1)

loc_6CEC3796:				; CODE XREF: __divxc3+DCj
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC3831
		jnz	loc_6CEC3835
		fstp	st(4)
		fstp	st(4)
		fstp	st
		fstp	st
		jmp	short loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC37B1:				; CODE XREF: __divxc3+F0j
		fstp	st(5)
		fstp	st(3)
		fstp	st
		fstp	st
		jmp	short loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC37BB:				; CODE XREF: __divxc3+1DAj
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC37C5:				; CODE XREF: __divxc3+1EBj
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC37CF:				; CODE XREF: __divxc3+1F1j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC37D9:				; CODE XREF: __divxc3+201j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC37E3:				; CODE XREF: __divxc3+207j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC37ED:				; CODE XREF: __divxc3+216j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		jmp	short loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC37F7:				; CODE XREF: __divxc3+220j
		fstp	st
		fstp	st(4)
		fstp	st(2)
		fstp	st
		nop

loc_6CEC3800:				; CODE XREF: __divxc3+5Fj __divxc3+69j ...
		fstp	tbyte ptr [edx]
		mov	eax, edx
		fstp	tbyte ptr [edx+0Ch]
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC3810:				; CODE XREF: __divxc3+24j
		fld	st
		fdiv	st, st(2)
		fld	st(1)
		fmul	st, st(1)
		fadd	st, st(3)
		fld	st(4)
		fmul	st, st(2)
		fadd	st, st(6)
		fdiv	st, st(1)
		fxch	st(2)
		fmul	st, st(6)
		fsubr	st, st(5)
		fdivrp	st(1), st
		fxch	st(1)
		jmp	loc_6CEC3796
; ---------------------------------------------------------------------------

loc_6CEC3831:				; CODE XREF: __divxc3+4Bj
		fxch	st(1)
		jmp	short loc_6CEC3837
; ---------------------------------------------------------------------------

loc_6CEC3835:				; CODE XREF: __divxc3+51j
		fxch	st(1)

loc_6CEC3837:				; CODE XREF: __divxc3+E3j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3846
		xchg	ax, ax
		jz	loc_6CEC37B1

loc_6CEC3846:				; CODE XREF: __divxc3+ECj
		fldz
		fxch	st(4)
		fucom	st(4)
		fnstsw	ax
		sahf
		jnz	loc_6CEC39FB
		jp	loc_6CEC3A05
		fxch	st(3)
		fucom	st(4)
		fnstsw	ax
		fstp	st(4)
		sahf
		jnz	loc_6CEC3A0F
		jp	loc_6CEC3A15
		fxch	st(5)
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC38B1
		jnz	short loc_6CEC38B5
		fstp	st(3)
		fstp	st
		fstp	st(3)
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC388D
; ---------------------------------------------------------------------------

loc_6CEC3887:				; CODE XREF: __divxc3+170j
		fstp	st(5)
		fstp	st
		fstp	st(1)

loc_6CEC388D:				; CODE XREF: __divxc3+135j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fld	ds:flt_6CECA268
		jz	short loc_6CEC38A6
		fstp	st
		fld	ds:flt_6CECA26C

loc_6CEC38A6:				; CODE XREF: __divxc3+14Cj
		fld	st
		fmulp	st(2), st
		fmulp	st(2), st
		jmp	loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC38B1:				; CODE XREF: __divxc3+127j
		fxch	st(4)
		jmp	short loc_6CEC38B7
; ---------------------------------------------------------------------------

loc_6CEC38B5:				; CODE XREF: __divxc3+129j
		fxch	st(4)

loc_6CEC38B7:				; CODE XREF: __divxc3+163j
		fucom	st
		fnstsw	ax
		sahf
		jnz	short loc_6CEC38C2
		xchg	ax, ax
		jnp	short loc_6CEC3887

loc_6CEC38C2:				; CODE XREF: __divxc3+16Cj
		fld	st(4)
		fsub	st, st(5)
		fstp	[esp+0Ch+var_C]
		fxch	st(1)
		fxch	st(3)
		fxch	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(5)
		fxch	st(2)
		jmp	short loc_6CEC38F9
; ---------------------------------------------------------------------------

loc_6CEC38D9:				; CODE XREF: __divxc3+2F3j
		fstp	st(5)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)
		jmp	short loc_6CEC38F9
; ---------------------------------------------------------------------------

loc_6CEC38E5:				; CODE XREF: __divxc3+2F9j
		fstp	st(5)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)
		jmp	short loc_6CEC38F9
; ---------------------------------------------------------------------------

loc_6CEC38F1:				; CODE XREF: __divxc3+308j
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		fxch	st(4)

loc_6CEC38F9:				; CODE XREF: __divxc3+187j
					; __divxc3+193j ...
		fld	st(5)
		fsub	st, st(6)
		fxch	st(1)
		fxch	st(5)
		fxch	st(4)
		fxch	st(3)
		fxch	st(2)
		fxch	st(1)

loc_6CEC3909:				; CODE XREF: __divxc3+317j
					; __divxc3+320j ...
		fucomp	st
		fnstsw	ax
		fxch	st(5)
		sahf
		fucom	st
		fnstsw	ax
		setp	cl
		sahf
		setnp	al
		and	cl, al
		jnz	short loc_6CEC3949
		fld	st(3)
		fsub	st, st(4)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3934
		jz	loc_6CEC37BB
		fxch	st(3)
		jmp	short loc_6CEC3936
; ---------------------------------------------------------------------------

loc_6CEC3934:				; CODE XREF: __divxc3+1D8j
		fxch	st(3)

loc_6CEC3936:				; CODE XREF: __divxc3+1E2j
		fucom	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC37C5
		jp	loc_6CEC37CF
		fxch	st(3)

loc_6CEC3949:				; CODE XREF: __divxc3+1CDj
		fld	[esp+0Ch+var_C]
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC37D9
		jp	loc_6CEC37E3
		fld	st(4)
		fsub	st, st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC37ED
		lea	esi, [esi+0]
		jp	loc_6CEC37F7
		fstp	st(2)
		fstp	st
		test	cl, cl
		jnz	short loc_6CEC39F5
		fldz
		fxch	st(1)

loc_6CEC3982:				; CODE XREF: __divxc3+2A9j
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fabs
		jz	short loc_6CEC3991
		fchs

loc_6CEC3991:				; CODE XREF: __divxc3+23Dj
		fld	st(1)
		fsub	st, st(2)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC39DE
		jz	short loc_6CEC39A8
		xchg	ax, ax
		jmp	short loc_6CEC39E2
; ---------------------------------------------------------------------------

loc_6CEC39A2:				; CODE XREF: __divxc3+299j
		fxch	st(1)
		jmp	short loc_6CEC39A8
; ---------------------------------------------------------------------------

loc_6CEC39A6:				; CODE XREF: __divxc3+29Bj
		fxch	st(1)

loc_6CEC39A8:				; CODE XREF: __divxc3+24Cj
					; __divxc3+254j
		fldz
		fxch	st(2)

loc_6CEC39AC:				; CODE XREF: __divxc3+2A3j
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(1)
		test	ah, 2
		fabs
		jz	short loc_6CEC39BD
		fchs

loc_6CEC39BD:				; CODE XREF: __divxc3+269j
		fld	st(3)
		fmul	st, st(2)
		fld	st(3)
		fmul	st, st(2)
		faddp	st(1), st
		fldz
		fmul	st(1), st
		fxch	st(3)
		fmulp	st(4), st
		fxch	st(1)
		fmulp	st(4), st
		fxch	st(2)
		fsubrp	st(3), st
		fmulp	st(2), st
		jmp	loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC39DE:				; CODE XREF: __divxc3+24Aj
		fxch	st(1)
		jmp	short loc_6CEC39E4
; ---------------------------------------------------------------------------

loc_6CEC39E2:				; CODE XREF: __divxc3+250j
		fxch	st(1)

loc_6CEC39E4:				; CODE XREF: __divxc3+290j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC39A2
		jnz	short loc_6CEC39A6
		fld1
		fxch	st(2)
		fxch	st(1)
		jmp	short loc_6CEC39AC
; ---------------------------------------------------------------------------

loc_6CEC39F5:				; CODE XREF: __divxc3+22Cj
		fld1
		fxch	st(1)
		jmp	short loc_6CEC3982
; ---------------------------------------------------------------------------

loc_6CEC39FB:				; CODE XREF: __divxc3+FFj
		fstp	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC3A19
; ---------------------------------------------------------------------------

loc_6CEC3A05:				; CODE XREF: __divxc3+105j
		fstp	st(4)
		fxch	st(1)
		fxch	st(2)
		fxch	st(3)
		jmp	short loc_6CEC3A19
; ---------------------------------------------------------------------------

loc_6CEC3A0F:				; CODE XREF: __divxc3+114j
		fxch	st(1)
		fxch	st(2)
		jmp	short loc_6CEC3A19
; ---------------------------------------------------------------------------

loc_6CEC3A15:				; CODE XREF: __divxc3+11Aj
		fxch	st(1)
		fxch	st(2)

loc_6CEC3A19:				; CODE XREF: __divxc3+2B3j
					; __divxc3+2BDj ...
		fld	st(5)
		fsub	st, st(6)
		fld	st
		fstp	[esp+0Ch+var_C]
		fucomp	st
		fnstsw	ax
		fxch	st(5)
		sahf
		fucom	st
		fnstsw	ax
		setp	cl
		sahf
		setnp	al
		and	cl, al
		jnz	short loc_6CEC3A5E
		fld	st(4)
		fsub	st, st(5)
		fxch	st(5)
		fucom	st
		fnstsw	ax
		sahf
		jp	loc_6CEC38D9
		jnz	loc_6CEC38E5
		fxch	st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	short loc_6CEC3A5E
		jnp	loc_6CEC38F1

loc_6CEC3A5E:				; CODE XREF: __divxc3+2E6j
					; __divxc3+306j
		fld	st(5)
		fsub	st, st(6)
		fucom	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC3909
		lea	esi, [esi+0]
		jp	loc_6CEC3909
		fld	st(4)
		fsub	st, st(5)
		fucomp	st
		fnstsw	ax
		sahf
		jnz	loc_6CEC3909
		jp	loc_6CEC3909
		fstp	st
		fstp	st(2)
		fstp	st
		test	cl, cl
		jnz	loc_6CEC3B1A
		fldz
		fxch	st(1)

loc_6CEC3A9D:				; CODE XREF: __divxc3+3CEj
		fxam
		fnstsw	ax
		fstp	st
		test	ah, 2
		fabs
		jz	short loc_6CEC3AAC
		fchs

loc_6CEC3AAC:				; CODE XREF: __divxc3+358j
		fld	st(2)
		fsub	st, st(3)
		fucomp	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3B00
		jz	short loc_6CEC3AC4
		jmp	short loc_6CEC3B04
; ---------------------------------------------------------------------------

loc_6CEC3ABB:				; CODE XREF: __divxc3+3BBj
		fxch	st(2)
		lea	esi, [esi+0]
		jmp	short loc_6CEC3AC4
; ---------------------------------------------------------------------------

loc_6CEC3AC2:				; CODE XREF: __divxc3+3C0j
		fxch	st(2)

loc_6CEC3AC4:				; CODE XREF: __divxc3+367j
					; __divxc3+370j
		fldz
		fxch	st(3)

loc_6CEC3AC8:				; CODE XREF: __divxc3+3C8j
		fxam
		fnstsw	ax
		fstp	st
		fxch	st(2)
		test	ah, 2
		fabs
		jz	short loc_6CEC3AD9
		fchs

loc_6CEC3AD9:				; CODE XREF: __divxc3+385j
		fld	st(2)
		fmul	st, st(4)
		fld	st(1)
		fmul	st, st(3)
		faddp	st(1), st
		fld	ds:flt_6CECA268
		fmul	st(1), st
		fxch	st(2)
		fmulp	st(5), st
		fxch	st(2)
		fmulp	st(3), st
		fxch	st(3)
		fsubrp	st(2), st
		fxch	st(1)
		fmulp	st(2), st
		jmp	loc_6CEC3800
; ---------------------------------------------------------------------------

loc_6CEC3B00:				; CODE XREF: __divxc3+365j
		fxch	st(2)
		jmp	short loc_6CEC3B06
; ---------------------------------------------------------------------------

loc_6CEC3B04:				; CODE XREF: __divxc3+369j
		fxch	st(2)

loc_6CEC3B06:				; CODE XREF: __divxc3+3B2j
		fucom	st
		fnstsw	ax
		sahf
		jp	short loc_6CEC3ABB
		lea	esi, [esi+0]
		jnz	short loc_6CEC3AC2
		fld1
		fxch	st(3)
		fxch	st(1)
		jmp	short loc_6CEC3AC8
; ---------------------------------------------------------------------------

loc_6CEC3B1A:				; CODE XREF: __divxc3+343j
		fld1
		fxch	st(1)
		jmp	loc_6CEC3A9D
__divxc3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  28. __bswapsi2

; =============== S U B	R O U T	I N E =======================================


		public __bswapsi2
__bswapsi2	proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, edx
		mov	ecx, edx
		shr	ecx, 18h
		shl	eax, 18h
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 0FF0000h
		and	edx, 0FF00h
		sar	ecx, 8
		or	eax, ecx
		shl	edx, 8
		or	eax, edx
		retn
__bswapsi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. __bswapdi2

; =============== S U B	R O U T	I N E =======================================


		public __bswapdi2
__bswapdi2	proc near

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	[esp+0Ch+var_C], ebx
		mov	ebx, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		mov	esi, ebx
		mov	eax, ebx
		and	esi, 0FF0000h
		mov	edi, ebx
		shr	esi, 8
		and	edi, 0FF00h
		shr	eax, 18h
		mov	edx, ecx
		or	eax, esi
		xor	esi, esi
		shrd	esi, edi, 18h
		shl	edx, 18h
		or	eax, esi
		shr	edi, 18h
		xor	esi, esi
		or	edx, edi
		movzx	edi, bl
		mov	ebx, esi
		mov	esi, edi
		mov	edi, [esp+0Ch+var_4]
		shrd	ebx, esi, 8
		or	eax, ebx
		mov	ebx, ecx
		shr	esi, 8
		and	ebx, 0FF000000h
		or	edx, esi
		xor	esi, esi
		shld	esi, ebx, 8
		shl	ebx, 8
		or	edx, esi
		or	eax, ebx
		mov	ebx, ecx
		and	ebx, 0FF0000h
		xor	esi, esi
		shld	esi, ebx, 18h
		and	ecx, 0FF00h
		shl	ebx, 18h
		or	edx, esi
		mov	esi, [esp+0Ch+var_8]
		shl	ecx, 8
		or	eax, ebx
		mov	ebx, [esp+0Ch+var_C]
		or	edx, ecx
		add	esp, 0Ch
		retn
__bswapdi2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  52. __fixunssfsi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixunssfsi(float)
		public __fixunssfsi
__fixunssfsi	proc near

var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4

		sub	esp, 8
		fld	[esp+8+arg_0]
		fld	ds:flt_6CECA270
		fxch	st(1)
		fucom	st(1)
		fnstsw	ax
		sahf
		jnb	short loc_6CEC3C40
		fstp	st(1)
		fnstcw	[esp+8+var_2]
		movzx	eax, [esp+8+var_2]
		mov	ah, 0Ch
		mov	[esp+8+var_4], ax
		fldcw	[esp+8+var_4]
		fistp	[esp+8+var_8]
		fldcw	[esp+8+var_2]
		mov	eax, [esp+8+var_8]
		add	esp, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC3C40:				; CODE XREF: __fixunssfsi+14j
		fnstcw	[esp+8+var_2]
		fsubrp	st(1), st
		movzx	eax, [esp+8+var_2]
		mov	ah, 0Ch
		mov	[esp+8+var_4], ax
		fldcw	[esp+8+var_4]
		fistp	[esp+8+var_8]
		fldcw	[esp+8+var_2]
		mov	eax, [esp+8+var_8]
		add	esp, 8
		sub	eax, 80000000h
		retn
__fixunssfsi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  50. __fixunsdfsi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixunsdfsi(double)
		public __fixunsdfsi
__fixunsdfsi	proc near

var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= qword	ptr  4

		sub	esp, 8
		fld	[esp+8+arg_0]
		fld	ds:flt_6CECA274
		fxch	st(1)
		fucom	st(1)
		fnstsw	ax
		sahf
		jnb	short loc_6CEC3CB0
		fstp	st(1)
		fnstcw	[esp+8+var_2]
		movzx	eax, [esp+8+var_2]
		mov	ah, 0Ch
		mov	[esp+8+var_4], ax
		fldcw	[esp+8+var_4]
		fistp	[esp+8+var_8]
		fldcw	[esp+8+var_2]
		mov	eax, [esp+8+var_8]
		add	esp, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC3CB0:				; CODE XREF: __fixunsdfsi+14j
		fnstcw	[esp+8+var_2]
		fsubrp	st(1), st
		movzx	eax, [esp+8+var_2]
		mov	ah, 0Ch
		mov	[esp+8+var_4], ax
		fldcw	[esp+8+var_4]
		fistp	[esp+8+var_8]
		fldcw	[esp+8+var_2]
		mov	eax, [esp+8+var_8]
		add	esp, 8
		sub	eax, 80000000h
		retn
__fixunsdfsi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  54. __fixunsxfsi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixunsxfsi(_TBYTE)
		public __fixunsxfsi
__fixunsxfsi	proc near

var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= tbyte	ptr  4

		sub	esp, 8
		fld	[esp+8+arg_0]
		fld	ds:flt_6CECA278
		fxch	st(1)
		fucom	st(1)
		fnstsw	ax
		sahf
		jnb	short loc_6CEC3D20
		fstp	st(1)
		fnstcw	[esp+8+var_2]
		movzx	eax, [esp+8+var_2]
		mov	ah, 0Ch
		mov	[esp+8+var_4], ax
		fldcw	[esp+8+var_4]
		fistp	[esp+8+var_8]
		fldcw	[esp+8+var_2]
		mov	eax, [esp+8+var_8]
		add	esp, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC3D20:				; CODE XREF: __fixunsxfsi+14j
		fnstcw	[esp+8+var_2]
		fsubrp	st(1), st
		movzx	eax, [esp+8+var_2]
		mov	ah, 0Ch
		mov	[esp+8+var_4], ax
		fldcw	[esp+8+var_4]
		fistp	[esp+8+var_8]
		fldcw	[esp+8+var_2]
		mov	eax, [esp+8+var_8]
		add	esp, 8
		sub	eax, 80000000h
		retn
__fixunsxfsi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  48. __fixsfdi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixsfdi(float)
		public __fixsfdi
__fixsfdi	proc near

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		fld	[esp+1Ch+arg_0]
		fldz
		fucomp	st(1)
		fnstsw	ax
		sahf
		ja	short loc_6CEC3D70
		fstp	[esp+1Ch+arg_0]	; float
		add	esp, 1Ch
		jmp	__fixunssfdi
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC3D70:				; CODE XREF: __fixsfdi+Ej
		fchs
		fstp	[esp+1Ch+var_1C] ; float
		call	__fixunssfdi
		neg	eax
		adc	edx, 0
		add	esp, 1Ch
		neg	edx
		retn
__fixsfdi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  47. __fixdfdi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixdfdi(double)
		public __fixdfdi
__fixdfdi	proc near

var_1C		= qword	ptr -1Ch
arg_0		= qword	ptr  4

		sub	esp, 1Ch
		fld	[esp+1Ch+arg_0]
		fldz
		fucomp	st(1)
		fnstsw	ax
		sahf
		ja	short loc_6CEC3DB0
		fstp	[esp+1Ch+arg_0]	; double
		add	esp, 1Ch
		jmp	__fixunsdfdi
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC3DB0:				; CODE XREF: __fixdfdi+Ej
		fchs
		fstp	[esp+1Ch+var_1C] ; double
		call	__fixunsdfdi
		neg	eax
		adc	edx, 0
		add	esp, 1Ch
		neg	edx
		retn
__fixdfdi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  55. __fixxfdi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixxfdi(_TBYTE)
		public __fixxfdi
__fixxfdi	proc near

var_1C		= tbyte	ptr -1Ch
arg_0		= tbyte	ptr  4

		sub	esp, 1Ch
		fld	[esp+1Ch+arg_0]
		fldz
		fucomp	st(1)
		fnstsw	ax
		sahf
		ja	short loc_6CEC3DF0
		fstp	[esp+1Ch+arg_0]	; _TBYTE
		add	esp, 1Ch
		jmp	__fixunsxfdi
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC3DF0:				; CODE XREF: __fixxfdi+Ej
		fchs
		fstp	[esp+1Ch+var_1C] ; _TBYTE
		call	__fixunsxfdi
		neg	eax
		adc	edx, 0
		add	esp, 1Ch
		neg	edx
		retn
__fixxfdi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  51. __fixunssfdi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixunssfdi(float)
		public __fixunssfdi
__fixunssfdi	proc near		; CODE XREF: __fixsfdi+17j
					; __fixsfdi+25p

var_1C		= qword	ptr -1Ch
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		fld	[esp+1Ch+arg_0]
		fnstcw	[esp+1Ch+var_E]
		fld	st
		fmul	ds:flt_6CECA27C
		mov	[esp+1Ch+var_4], esi
		xor	esi, esi
		movzx	eax, [esp+1Ch+var_E]
		mov	[esp+1Ch+var_8], ebx
		mov	ah, 0Ch
		mov	[esp+1Ch+var_10], ax
		fldcw	[esp+1Ch+var_10]
		fistp	[esp+1Ch+var_1C]
		fldcw	[esp+1Ch+var_E]
		mov	dword ptr [esp+1Ch+var_1C+4], esi
		mov	esi, [esp+1Ch+var_4]
		mov	edx, dword ptr [esp+1Ch+var_1C]
		mov	dword ptr [esp+1Ch+var_1C], edx
		fild	[esp+1Ch+var_1C]
		fmul	ds:flt_6CECA280
		faddp	st(1), st
		fldcw	[esp+1Ch+var_10]
		fistp	[esp+1Ch+var_1C]
		fldcw	[esp+1Ch+var_E]
		mov	ebx, dword ptr [esp+1Ch+var_1C]
		mov	eax, ebx
		mov	ebx, [esp+1Ch+var_8]
		add	esp, 1Ch
		retn
__fixunssfdi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  49. __fixunsdfdi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixunsdfdi(double)
		public __fixunsdfdi
__fixunsdfdi	proc near		; CODE XREF: __fixdfdi+17j
					; __fixdfdi+25p

var_1C		= qword	ptr -1Ch
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= qword	ptr  4

		sub	esp, 1Ch
		fld	[esp+1Ch+arg_0]
		fnstcw	[esp+1Ch+var_E]
		fld	st
		fmul	ds:flt_6CECA284
		mov	[esp+1Ch+var_4], esi
		xor	esi, esi
		movzx	eax, [esp+1Ch+var_E]
		mov	[esp+1Ch+var_8], ebx
		mov	ah, 0Ch
		mov	[esp+1Ch+var_10], ax
		fldcw	[esp+1Ch+var_10]
		fistp	[esp+1Ch+var_1C]
		fldcw	[esp+1Ch+var_E]
		mov	dword ptr [esp+1Ch+var_1C+4], esi
		mov	esi, [esp+1Ch+var_4]
		mov	edx, dword ptr [esp+1Ch+var_1C]
		mov	dword ptr [esp+1Ch+var_1C], edx
		fild	[esp+1Ch+var_1C]
		fmul	ds:flt_6CECA288
		faddp	st(1), st
		fldcw	[esp+1Ch+var_10]
		fistp	[esp+1Ch+var_1C]
		fldcw	[esp+1Ch+var_E]
		mov	ebx, dword ptr [esp+1Ch+var_1C]
		mov	eax, ebx
		mov	ebx, [esp+1Ch+var_8]
		add	esp, 1Ch
		retn
__fixunsdfdi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  53. __fixunsxfdi

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _fixunsxfdi(_TBYTE)
		public __fixunsxfdi
__fixunsxfdi	proc near		; CODE XREF: __fixxfdi+17j
					; __fixxfdi+25p

var_24		= qword	ptr -24h
var_18		= word ptr -18h
var_16		= word ptr -16h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= tbyte	ptr  4

		sub	esp, 24h
		fld	[esp+24h+arg_0]
		mov	[esp+24h+var_10], ebx
		xor	ebx, ebx
		mov	[esp+24h+var_C], esi
		xor	esi, esi
		fldz
		fucomp	st(1)
		fnstsw	ax
		mov	[esp+24h+var_8], edi
		mov	[esp+24h+var_4], ebp
		sahf
		ja	short loc_6CEC3F77
		fnstcw	[esp+24h+var_16]
		fld	st
		xor	edx, edx
		fmul	ds:flt_6CECA28C
		movzx	eax, [esp+24h+var_16]
		mov	ah, 0Ch
		mov	[esp+24h+var_18], ax
		fldcw	[esp+24h+var_18]
		fistp	[esp+24h+var_24]
		fldcw	[esp+24h+var_16]
		mov	ebx, dword ptr [esp+24h+var_24]
		mov	dword ptr [esp+24h+var_24], edx
		mov	dword ptr [esp+24h+var_24+4], ebx
		test	ebx, ebx
		mov	ecx, ebx
		fild	[esp+24h+var_24]
		js	short loc_6CEC3FA7

loc_6CEC3F4C:				; CODE XREF: __fixunsxfdi+BDj
		fsubp	st(1), st
		fldz
		fucomp	st(1)
		fnstsw	ax
		sahf
		jbe	short loc_6CEC3F91
		fchs
		mov	edi, edx
		fldcw	[esp+24h+var_18]
		fistp	[esp+24h+var_24]
		fldcw	[esp+24h+var_16]
		xor	esi, esi
		mov	ebp, ecx
		mov	ebx, dword ptr [esp+24h+var_24]
		sub	edi, ebx
		sbb	ebp, esi
		mov	ebx, edi
		mov	esi, ebp
		jmp	short loc_6CEC3F79
; ---------------------------------------------------------------------------

loc_6CEC3F77:				; CODE XREF: __fixunsxfdi+22j
		fstp	st

loc_6CEC3F79:				; CODE XREF: __fixunsxfdi+85j
					; __fixunsxfdi+B5j
		mov	eax, ebx
		mov	edx, esi
		mov	ebx, [esp+24h+var_10]
		mov	esi, [esp+24h+var_C]
		mov	edi, [esp+24h+var_8]
		mov	ebp, [esp+24h+var_4]
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_6CEC3F91:				; CODE XREF: __fixunsxfdi+65j
		fldcw	[esp+24h+var_18]
		fistp	[esp+24h+var_24]
		fldcw	[esp+24h+var_16]
		xor	esi, esi
		mov	ebx, dword ptr [esp+24h+var_24]
		add	ebx, edx
		adc	esi, ecx
		jmp	short loc_6CEC3F79
; ---------------------------------------------------------------------------

loc_6CEC3FA7:				; CODE XREF: __fixunsxfdi+5Aj
		fadd	ds:flt_6CECA290
		jmp	short loc_6CEC3F4C
__fixunsxfdi	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  57. __floatdisf

; =============== S U B	R O U T	I N E =======================================


		public __floatdisf
__floatdisf	proc near

var_1C		= qword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], ebx
		mov	[esp+1Ch+var_4], esi
		mov	ecx, eax
		add	ecx, 0FFFFFFFFh
		mov	ebx, edx
		adc	ebx, 1FFFFFh
		cmp	ebx, 3FFFFFh
		jb	short loc_6CEC3FF5
		jbe	short loc_6CEC4025

loc_6CEC3FDA:				; CODE XREF: __floatdisf+7Aj
		mov	ecx, eax
		and	ecx, 7FFh
		test	ecx, ecx
		jz	short loc_6CEC3FF5
		mov	esi, eax
		and	esi, 0FFFFF800h
		mov	ebx, esi
		or	bh, 8
		mov	eax, ebx

loc_6CEC3FF5:				; CODE XREF: __floatdisf+26j
					; __floatdisf+34j ...
		mov	[esp+1Ch+var_14], edx
		xor	ecx, ecx
		mov	ebx, [esp+1Ch+var_8]
		fild	[esp+1Ch+var_14]
		fmul	ds:flt_6CECA294
		mov	dword ptr [esp+1Ch+var_1C], eax
		mov	esi, [esp+1Ch+var_4]
		mov	dword ptr [esp+1Ch+var_1C+4], ecx
		fild	[esp+1Ch+var_1C]
		faddp	st(1), st
		fstp	[esp+1Ch+var_10]
		fld	[esp+1Ch+var_10]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC4025:				; CODE XREF: __floatdisf+28j
		cmp	ecx, 0FFFFFFFEh
		jbe	short loc_6CEC3FF5
		jmp	short loc_6CEC3FDA
__floatdisf	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  56. __floatdidf

; =============== S U B	R O U T	I N E =======================================


		public __floatdidf
__floatdidf	proc near

var_14		= qword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		xor	edx, edx
		fild	[esp+14h+arg_4]
		fmul	ds:flt_6CECA298
		mov	eax, [esp+14h+arg_0]
		mov	dword ptr [esp+14h+var_14+4], edx
		mov	dword ptr [esp+14h+var_14], eax
		fild	[esp+14h+var_14]
		add	esp, 14h
		faddp	st(1), st
		retn
__floatdidf	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  58. __floatdixf

; =============== S U B	R O U T	I N E =======================================


		public __floatdixf
__floatdixf	proc near

var_14		= qword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		xor	edx, edx
		fild	[esp+14h+arg_4]
		mov	dword ptr [esp+14h+var_14+4], edx
		mov	eax, [esp+14h+arg_0]
		fmul	ds:flt_6CECA29C
		mov	dword ptr [esp+14h+var_14], eax
		fild	[esp+14h+var_14]
		add	esp, 14h
		faddp	st(1), st
		retn
__floatdixf	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  60. __floatundisf

; =============== S U B	R O U T	I N E =======================================


		public __floatundisf
__floatundisf	proc near

var_14		= qword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		mov	edx, [esp+14h+arg_4]
		mov	eax, [esp+14h+arg_0]
		cmp	edx, 1FFFFFh
		jbe	short loc_6CEC40B2
		test	eax, 7FFh
		jz	short loc_6CEC40B2
		and	eax, 0FFFFF800h
		or	ah, 8

loc_6CEC40B2:				; CODE XREF: __floatundisf+11j
					; __floatundisf+18j
		xor	ecx, ecx
		mov	dword ptr [esp+14h+var_14], edx
		xor	edx, edx
		mov	dword ptr [esp+14h+var_14+4], ecx
		fild	[esp+14h+var_14]
		fmul	ds:flt_6CECA2A0
		mov	dword ptr [esp+14h+var_14], eax
		mov	dword ptr [esp+14h+var_14+4], edx
		fild	[esp+14h+var_14]
		faddp	st(1), st
		fstp	[esp+14h+var_8]
		fld	[esp+14h+var_8]
		add	esp, 14h
		retn
__floatundisf	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  59. __floatundidf

; =============== S U B	R O U T	I N E =======================================


		public __floatundidf
__floatundidf	proc near

var_C		= qword	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		xor	edx, edx
		mov	eax, [esp+0Ch+arg_4]
		mov	dword ptr [esp+0Ch+var_C+4], edx
		xor	edx, edx
		mov	dword ptr [esp+0Ch+var_C], eax
		mov	eax, [esp+0Ch+arg_0]
		fild	[esp+0Ch+var_C]
		fmul	ds:flt_6CECA2A4
		mov	dword ptr [esp+0Ch+var_C+4], edx
		mov	dword ptr [esp+0Ch+var_C], eax
		fild	[esp+0Ch+var_C]
		add	esp, 0Ch
		faddp	st(1), st
		retn
__floatundidf	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  61. __floatundixf

; =============== S U B	R O U T	I N E =======================================


		public __floatundixf
__floatundixf	proc near

var_C		= qword	ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		xor	edx, edx
		mov	eax, [esp+0Ch+arg_4]
		mov	dword ptr [esp+0Ch+var_C+4], edx
		xor	edx, edx
		mov	dword ptr [esp+0Ch+var_C], eax
		mov	eax, [esp+0Ch+arg_0]
		fild	[esp+0Ch+var_C]
		mov	dword ptr [esp+0Ch+var_C+4], edx
		fmul	ds:flt_6CECA2A8
		mov	dword ptr [esp+0Ch+var_C], eax
		fild	[esp+0Ch+var_C]
		add	esp, 0Ch
		faddp	st(1), st
		retn
__floatundixf	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  39. __divdi3

; =============== S U B	R O U T	I N E =======================================


		public __divdi3
__divdi3	proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	ecx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		xor	esi, esi
		mov	edx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_C]
		test	ecx, ecx
		mov	[esp+2Ch+var_10], ebx
		js	loc_6CEC4200
		test	ebp, ebp
		js	loc_6CEC4214

loc_6CEC4175:				; CODE XREF: __divdi3+CEj __divdi3+DDj
		mov	eax, ebp
		mov	ebx, edi
		test	eax, eax
		mov	ebp, edx
		mov	edi, ecx
		jnz	short loc_6CEC4191
		cmp	ebx, ecx
		jbe	short loc_6CEC41C0
		mov	eax, ebp
		mov	edx, ecx
		xor	edi, edi
		div	ebx
		mov	ebp, eax
		jmp	short loc_6CEC4199
; ---------------------------------------------------------------------------

loc_6CEC4191:				; CODE XREF: __divdi3+3Fj
		cmp	eax, ecx
		jbe	short loc_6CEC41E0

loc_6CEC4195:				; CODE XREF: __divdi3+B2j
		xor	edi, edi
		xor	ebp, ebp

loc_6CEC4199:				; CODE XREF: __divdi3+4Fj __divdi3+9Dj ...
		test	esi, esi
		mov	eax, ebp
		mov	edx, edi
		jz	short loc_6CEC41A8
		neg	eax
		adc	edx, 0
		neg	edx

loc_6CEC41A8:				; CODE XREF: __divdi3+5Fj
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC41C0:				; CODE XREF: __divdi3+43j
		test	ebx, ebx
		jnz	short loc_6CEC41CF
		mov	eax, 1
		xor	edx, edx
		div	ebx
		mov	ebx, eax

loc_6CEC41CF:				; CODE XREF: __divdi3+82j
		mov	eax, edi
		xor	edx, edx
		div	ebx
		mov	edi, eax
		mov	eax, ebp
		div	ebx
		mov	ebp, eax
		jmp	short loc_6CEC4199
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC41E0:				; CODE XREF: __divdi3+53j
		bsr	edx, eax
		xor	edx, 1Fh
		mov	[esp+2Ch+var_28], edx
		jnz	short loc_6CEC4222
		cmp	ebx, ebp
		jbe	short loc_6CEC41F4
		cmp	eax, ecx
		jnb	short loc_6CEC4195

loc_6CEC41F4:				; CODE XREF: __divdi3+AEj
		xor	edi, edi
		mov	ebp, 1
		jmp	short loc_6CEC4199
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4200:				; CODE XREF: __divdi3+27j
		neg	edx
		mov	esi, 0FFFFFFFFh
		adc	ecx, 0
		neg	ecx
		test	ebp, ebp
		jns	loc_6CEC4175

loc_6CEC4214:				; CODE XREF: __divdi3+2Fj
		neg	edi
		not	esi
		adc	ebp, 0
		neg	ebp
		jmp	loc_6CEC4175
; ---------------------------------------------------------------------------

loc_6CEC4222:				; CODE XREF: __divdi3+AAj
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		mov	edx, 20h
		sub	edx, [esp+2Ch+var_28]
		shl	eax, cl
		mov	ecx, edx
		mov	[esp+2Ch+var_24], eax
		mov	eax, ebx
		shr	eax, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		or	eax, [esp+2Ch+var_24]
		shl	ebx, cl
		mov	ecx, edx
		mov	[esp+2Ch+var_20], ebx
		mov	ebx, edi
		shr	ebx, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		mov	[esp+2Ch+var_24], eax
		mov	eax, ebp
		shl	edi, cl
		mov	ecx, edx
		shr	eax, cl
		mov	edx, ebx
		or	edi, eax
		mov	eax, edi
		div	[esp+2Ch+var_24]
		mov	ebx, edx
		mov	edi, eax
		mul	[esp+2Ch+var_20]
		cmp	ebx, edx
		jb	short loc_6CEC4290
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		shl	ebp, cl
		cmp	ebp, eax
		jnb	short loc_6CEC4287
		cmp	ebx, edx
		jz	short loc_6CEC4290

loc_6CEC4287:				; CODE XREF: __divdi3+141j
		mov	ebp, edi
		xor	edi, edi
		jmp	loc_6CEC4199
; ---------------------------------------------------------------------------

loc_6CEC4290:				; CODE XREF: __divdi3+136j
					; __divdi3+145j
		lea	ebp, [edi-1]
		xor	edi, edi
		jmp	loc_6CEC4199
__divdi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  64. __moddi3

; =============== S U B	R O U T	I N E =======================================


		public __moddi3
__moddi3	proc near

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	ecx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_10], ebx
		mov	ebx, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_4], ebp
		xor	ebp, ebp
		mov	edx, [esp+4Ch+arg_0]
		test	ecx, ecx
		mov	[esp+4Ch+var_8], edi
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_40], esi
		js	loc_6CEC43B2

loc_6CEC42D5:				; CODE XREF: __moddi3+11Ej
		mov	eax, [esp+4Ch+var_40]
		test	eax, eax
		js	loc_6CEC43A0

loc_6CEC42E1:				; CODE XREF: __moddi3+10Dj
		mov	eax, [esp+4Ch+var_40]
		lea	ebx, [esp+4Ch+var_24]
		mov	esi, ecx
		mov	edi, [esp+4Ch+var_44]
		mov	[esp+4Ch+var_38], edx
		mov	[esp+4Ch+var_3C], edx
		test	eax, eax
		jnz	short loc_6CEC4320
		cmp	edi, ecx
		jbe	loc_6CEC4380
		mov	eax, edx
		mov	edx, ecx
		div	edi

loc_6CEC4309:				; CODE XREF: __moddi3+FBj
		test	ebp, ebp
		mov	[ebx], edx
		mov	dword ptr [ebx+4], 0
		jnz	short loc_6CEC432D

loc_6CEC4316:				; CODE XREF: __moddi3+8Bj
		mov	eax, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+var_20]
		jmp	short loc_6CEC433C
; ---------------------------------------------------------------------------

loc_6CEC4320:				; CODE XREF: __moddi3+59j
		cmp	eax, ecx
		jbe	short loc_6CEC4350
		mov	[ebx], edx
		mov	[ebx+4], ecx

loc_6CEC4329:				; CODE XREF: __moddi3+D7j
					; __moddi3+1B1j
		test	ebp, ebp
		jz	short loc_6CEC4316

loc_6CEC432D:				; CODE XREF: __moddi3+74j
		mov	eax, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+var_20]
		neg	eax
		adc	edx, 0
		neg	edx

loc_6CEC433C:				; CODE XREF: __moddi3+7Ej
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC4350:				; CODE XREF: __moddi3+82j
		bsr	edx, eax
		xor	edx, 1Fh
		mov	[esp+4Ch+var_44], edx
		jnz	short loc_6CEC43C3
		cmp	edi, [esp+4Ch+var_3C]
		jbe	loc_6CEC4456
		cmp	eax, ecx
		jb	loc_6CEC4456

loc_6CEC436E:				; CODE XREF: __moddi3+1C2j
		mov	eax, [esp+4Ch+var_3C]
		mov	[ebx+4], esi
		mov	[ebx], eax
		jmp	short loc_6CEC4329
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4380:				; CODE XREF: __moddi3+5Dj
		test	edi, edi
		jnz	short loc_6CEC438F
		mov	eax, 1
		xor	edx, edx
		div	edi
		mov	edi, eax

loc_6CEC438F:				; CODE XREF: __moddi3+E2j
		mov	eax, esi
		xor	edx, edx
		div	edi
		mov	eax, [esp+4Ch+var_3C]
		div	edi
		jmp	loc_6CEC4309
; ---------------------------------------------------------------------------

loc_6CEC43A0:				; CODE XREF: __moddi3+3Bj
		neg	[esp+4Ch+var_44]
		adc	[esp+4Ch+var_40], 0
		neg	[esp+4Ch+var_40]
		jmp	loc_6CEC42E1
; ---------------------------------------------------------------------------

loc_6CEC43B2:				; CODE XREF: __moddi3+2Fj
		neg	edx
		mov	ebp, 0FFFFFFFFh
		adc	ecx, 0
		neg	ecx
		jmp	loc_6CEC42D5
; ---------------------------------------------------------------------------

loc_6CEC43C3:				; CODE XREF: __moddi3+BAj
		movzx	ecx, byte ptr [esp+4Ch+var_44]
		mov	edx, eax
		mov	eax, 20h
		sub	eax, [esp+4Ch+var_44]
		shl	edx, cl
		mov	[esp+4Ch+var_3C], eax
		movzx	ecx, byte ptr [esp+4Ch+var_3C]
		mov	eax, edi
		shr	eax, cl
		movzx	ecx, byte ptr [esp+4Ch+var_44]
		or	eax, edx
		mov	[esp+4Ch+var_30], eax
		mov	eax, [esp+4Ch+var_38]
		shl	edi, cl
		movzx	ecx, byte ptr [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_34], edi
		mov	edi, esi
		shr	edi, cl
		movzx	ecx, byte ptr [esp+4Ch+var_44]
		mov	edx, edi
		shl	esi, cl
		movzx	ecx, byte ptr [esp+4Ch+var_3C]
		shr	eax, cl
		movzx	ecx, byte ptr [esp+4Ch+var_44]
		or	eax, esi
		mov	esi, [esp+4Ch+var_38]
		div	[esp+4Ch+var_30]
		mov	edi, edx
		mul	[esp+4Ch+var_34]
		shl	esi, cl
		cmp	edi, edx
		jb	short loc_6CEC446B
		cmp	esi, eax
		jb	short loc_6CEC4467

loc_6CEC442F:				; CODE XREF: __moddi3+1C9j
					; __moddi3+1D3j
		movzx	ecx, byte ptr [esp+4Ch+var_44]
		sub	esi, eax
		sbb	edi, edx
		mov	eax, edi
		shr	esi, cl
		movzx	ecx, byte ptr [esp+4Ch+var_3C]
		shl	eax, cl
		movzx	ecx, byte ptr [esp+4Ch+var_44]
		or	esi, eax
		mov	[ebx], esi
		shr	edi, cl
		mov	[ebx+4], edi
		jmp	loc_6CEC4329
; ---------------------------------------------------------------------------

loc_6CEC4456:				; CODE XREF: __moddi3+C0j __moddi3+C8j
		mov	ecx, [esp+4Ch+var_3C]
		sub	ecx, edi
		sbb	esi, eax
		mov	[esp+4Ch+var_3C], ecx
		jmp	loc_6CEC436E
; ---------------------------------------------------------------------------

loc_6CEC4467:				; CODE XREF: __moddi3+18Dj
		cmp	edi, edx
		jnz	short loc_6CEC442F

loc_6CEC446B:				; CODE XREF: __moddi3+189j
		sub	eax, [esp+4Ch+var_34]
		sbb	edx, [esp+4Ch+var_30]
		jmp	short loc_6CEC442F
__moddi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  90. __udivdi3

; =============== S U B	R O U T	I N E =======================================


		public __udivdi3
__udivdi3	proc near

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_0]
		test	edx, edx
		mov	[esp+2Ch+var_4], ebp
		jnz	short loc_6CEC44D0
		cmp	ebx, esi
		ja	short loc_6CEC4510
		test	ebx, ebx
		jnz	short loc_6CEC44BA
		mov	eax, 1
		xor	edx, edx
		div	ebx
		mov	ebx, eax

loc_6CEC44BA:				; CODE XREF: __udivdi3+2Dj
		mov	eax, esi
		xor	edx, edx
		div	ebx
		mov	esi, eax
		mov	eax, edi
		div	ebx
		mov	edi, eax
		jmp	short loc_6CEC44F4
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC44D0:				; CODE XREF: __udivdi3+25j
		cmp	edx, esi
		ja	short loc_6CEC44F0
		bsr	ebp, edx
		xor	ebp, 1Fh
		jnz	short loc_6CEC4520
		cmp	ebx, edi
		xchg	ax, ax
		jbe	loc_6CEC4582
		cmp	edx, esi
		jb	loc_6CEC4582
		xchg	ax, ax

loc_6CEC44F0:				; CODE XREF: __udivdi3+52j
		xor	esi, esi
		xor	edi, edi

loc_6CEC44F4:				; CODE XREF: __udivdi3+48j
					; __udivdi3+9Aj ...
		mov	eax, edi
		mov	edx, esi
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4510:				; CODE XREF: __udivdi3+29j
		mov	edx, esi
		mov	eax, edi
		xor	esi, esi
		div	ebx
		mov	edi, eax
		jmp	short loc_6CEC44F4
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4520:				; CODE XREF: __udivdi3+5Aj
		mov	ecx, ebp
		mov	eax, 20h
		sub	eax, ebp
		shl	edx, cl
		mov	ecx, eax
		mov	[esp+2Ch+var_20], edx
		mov	edx, ebx
		shr	edx, cl
		mov	ecx, [esp+2Ch+var_20]
		or	ecx, edx
		mov	edx, edi
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, ebp
		shl	ebx, cl
		mov	ecx, eax
		mov	[esp+2Ch+var_24], ebx
		mov	ebx, esi
		shr	ebx, cl
		mov	ecx, ebp
		shl	esi, cl
		mov	ecx, eax
		shr	edx, cl
		or	esi, edx
		mov	edx, ebx
		mov	eax, esi
		div	[esp+2Ch+var_20]
		mov	ebx, edx
		mov	esi, eax
		mul	[esp+2Ch+var_24]
		cmp	ebx, edx
		jb	short loc_6CEC4590
		mov	ecx, ebp
		shl	edi, cl
		cmp	edi, eax
		jnb	short loc_6CEC4579
		cmp	ebx, edx
		jz	short loc_6CEC4590

loc_6CEC4579:				; CODE XREF: __udivdi3+F3j
		mov	edi, esi
		xor	esi, esi
		jmp	loc_6CEC44F4
; ---------------------------------------------------------------------------

loc_6CEC4582:				; CODE XREF: __udivdi3+60j
					; __udivdi3+68j
		xor	esi, esi
		mov	edi, 1
		jmp	loc_6CEC44F4
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4590:				; CODE XREF: __udivdi3+EBj
					; __udivdi3+F7j
		lea	edi, [esi-1]
		xor	esi, esi
		jmp	loc_6CEC44F4
__udivdi3	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  92. __umoddi3

; =============== S U B	R O U T	I N E =======================================


		public __umoddi3
__umoddi3	proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_8]
		test	edi, edi
		mov	[esp+2Ch+var_4], ebp
		mov	ecx, eax
		mov	ebp, eax
		jnz	short loc_6CEC45F0
		cmp	esi, ebx
		jbe	short loc_6CEC4612
		mov	edx, ebx
		div	esi

loc_6CEC45D3:				; CODE XREF: __umoddi3+8Bj
		mov	eax, edx
		xor	edx, edx

loc_6CEC45D7:				; CODE XREF: __umoddi3+70j
					; __umoddi3+105j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC45F0:				; CODE XREF: __umoddi3+29j
		cmp	edi, ebx
		ja	short loc_6CEC460E
		bsr	eax, edi
		xor	eax, 1Fh
		mov	[esp+2Ch+var_28], eax
		jnz	short loc_6CEC4630
		cmp	esi, ebp
		ja	loc_6CEC46C0

loc_6CEC4608:				; CODE XREF: __umoddi3+122j
		sub	ecx, esi
		sbb	ebx, edi
		mov	eax, ecx

loc_6CEC460E:				; CODE XREF: __umoddi3+52j
					; __umoddi3+12Aj
		mov	edx, ebx
		jmp	short loc_6CEC45D7
; ---------------------------------------------------------------------------

loc_6CEC4612:				; CODE XREF: __umoddi3+2Dj
		test	esi, esi
		jnz	short loc_6CEC4621
		mov	eax, 1
		xor	edx, edx
		div	esi
		mov	esi, eax

loc_6CEC4621:				; CODE XREF: __umoddi3+74j
		mov	eax, ebx
		xor	edx, edx
		div	esi
		mov	eax, ecx
		div	esi
		jmp	short loc_6CEC45D3
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4630:				; CODE XREF: __umoddi3+5Ej
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		mov	eax, edi
		mov	edi, 20h
		sub	edi, [esp+2Ch+var_28]
		mov	edx, esi
		shl	eax, cl
		mov	ecx, edi
		shr	edx, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		or	edx, eax
		mov	eax, ebp
		mov	[esp+2Ch+var_20], edx
		shl	esi, cl
		mov	ecx, edi
		mov	[esp+2Ch+var_24], esi
		mov	esi, ebx
		shr	esi, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		mov	edx, esi
		shl	ebx, cl
		mov	ecx, edi
		shr	eax, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		or	eax, ebx
		div	[esp+2Ch+var_20]
		mov	esi, edx
		shl	ebp, cl
		mul	[esp+2Ch+var_24]
		cmp	esi, edx
		jb	short loc_6CEC46B4
		cmp	ebp, eax
		jb	short loc_6CEC46B0

loc_6CEC4689:				; CODE XREF: __umoddi3+112j
					; __umoddi3+11Cj
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		sub	ebp, eax
		sbb	esi, edx
		mov	eax, esi
		mov	edx, esi
		shr	ebp, cl
		mov	ecx, edi
		shl	eax, cl
		movzx	ecx, byte ptr [esp+2Ch+var_28]
		or	eax, ebp
		shr	edx, cl
		jmp	loc_6CEC45D7
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC46B0:				; CODE XREF: __umoddi3+E7j
		cmp	esi, edx
		jnz	short loc_6CEC4689

loc_6CEC46B4:				; CODE XREF: __umoddi3+E3j
		sub	eax, [esp+2Ch+var_24]
		sbb	edx, [esp+2Ch+var_20]
		jmp	short loc_6CEC4689
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC46C0:				; CODE XREF: __umoddi3+62j
		cmp	edi, ebx
		jb	loc_6CEC4608
		mov	eax, ecx
		jmp	loc_6CEC460E
__umoddi3	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		xor	eax, eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  91. __udivmoddi4

; =============== S U B	R O U T	I N E =======================================


		public __udivmoddi4
__udivmoddi4	proc near

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	edx, [esp+3Ch+arg_C]
		mov	ecx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_8]
		test	edx, edx
		mov	[esp+3Ch+var_8], edi
		mov	eax, ecx
		mov	edi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_4], ebp
		mov	[esp+3Ch+var_30], ecx
		jnz	short loc_6CEC4730
		cmp	esi, ebx
		jbe	short loc_6CEC4793
		mov	edx, ebx
		xor	ebx, ebx
		div	esi

loc_6CEC471B:				; CODE XREF: __udivmoddi4+D0j
		test	edi, edi
		mov	ebp, eax
		mov	esi, ebx
		jz	short loc_6CEC4741
		mov	[edi], edx
		mov	dword ptr [edi+4], 0
		jmp	short loc_6CEC4741
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4730:				; CODE XREF: __udivmoddi4+2Fj
		cmp	edx, ebx
		jbe	short loc_6CEC4760
		xor	esi, esi
		xor	ebp, ebp
		test	edi, edi
		jz	short loc_6CEC4741
		mov	[edi], ecx
		mov	[edi+4], ebx

loc_6CEC4741:				; CODE XREF: __udivmoddi4+41j
					; __udivmoddi4+4Cj ...
		mov	eax, ebp
		mov	edx, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4760:				; CODE XREF: __udivmoddi4+52j
		bsr	ecx, edx
		xor	ecx, 1Fh
		mov	[esp+3Ch+var_2C], ecx
		jnz	short loc_6CEC47B5
		cmp	[esp+3Ch+var_30], esi
		jnb	loc_6CEC4862
		xor	eax, eax
		cmp	ebx, edx
		ja	loc_6CEC4862

loc_6CEC4780:				; CODE XREF: __udivmoddi4+193j
		xor	esi, esi
		test	edi, edi
		mov	ebp, eax
		jz	short loc_6CEC4741
		mov	edx, [esp+3Ch+var_30]
		mov	[edi+4], ebx
		mov	[edi], edx
		jmp	short loc_6CEC4741
; ---------------------------------------------------------------------------

loc_6CEC4793:				; CODE XREF: __udivmoddi4+33j
		test	esi, esi
		jnz	short loc_6CEC47A2
		mov	eax, 1
		xor	edx, edx
		div	esi
		mov	esi, eax

loc_6CEC47A2:				; CODE XREF: __udivmoddi4+B5j
		mov	eax, ebx
		xor	edx, edx
		div	esi
		mov	ebx, eax
		mov	eax, [esp+3Ch+var_30]
		div	esi
		jmp	loc_6CEC471B
; ---------------------------------------------------------------------------

loc_6CEC47B5:				; CODE XREF: __udivmoddi4+8Aj
		movzx	ecx, byte ptr [esp+3Ch+var_2C]
		mov	ebp, edx
		mov	edx, 20h
		sub	edx, [esp+3Ch+var_2C]
		shl	ebp, cl
		mov	[esp+3Ch+var_24], edx
		movzx	ecx, byte ptr [esp+3Ch+var_24]
		mov	edx, esi
		shr	edx, cl
		movzx	ecx, byte ptr [esp+3Ch+var_2C]
		or	edx, ebp
		mov	ebp, ebx
		mov	[esp+3Ch+var_20], edx
		mov	edx, eax
		shl	esi, cl
		movzx	ecx, byte ptr [esp+3Ch+var_24]
		shr	ebp, cl
		movzx	ecx, byte ptr [esp+3Ch+var_2C]
		shl	ebx, cl
		movzx	ecx, byte ptr [esp+3Ch+var_24]
		shr	edx, cl
		movzx	ecx, byte ptr [esp+3Ch+var_2C]
		or	ebx, edx
		mov	edx, ebp
		mov	[esp+3Ch+var_30], ebx
		shl	eax, cl
		mov	[esp+3Ch+var_28], eax
		mov	eax, [esp+3Ch+var_30]
		div	[esp+3Ch+var_20]
		mov	ebx, edx
		mov	[esp+3Ch+var_30], eax
		mul	esi
		cmp	ebx, edx
		jb	short loc_6CEC487C
		cmp	eax, [esp+3Ch+var_28]
		ja	short loc_6CEC4878

loc_6CEC4827:				; CODE XREF: __udivmoddi4+19Aj
					; __udivmoddi4+1A7j
		xor	esi, esi
		test	edi, edi
		mov	ebp, [esp+3Ch+var_30]
		jz	loc_6CEC4741
		mov	ecx, [esp+3Ch+var_28]
		sub	ecx, eax
		sbb	ebx, edx
		mov	eax, ecx
		movzx	ecx, byte ptr [esp+3Ch+var_2C]
		mov	edx, ebx
		shr	eax, cl
		movzx	ecx, byte ptr [esp+3Ch+var_24]
		shl	edx, cl
		movzx	ecx, byte ptr [esp+3Ch+var_2C]
		or	eax, edx
		mov	[edi], eax
		shr	ebx, cl
		mov	[edi+4], ebx
		jmp	loc_6CEC4741
; ---------------------------------------------------------------------------

loc_6CEC4862:				; CODE XREF: __udivmoddi4+90j
					; __udivmoddi4+9Aj
		mov	eax, [esp+3Ch+var_30]
		sub	eax, esi
		sbb	ebx, edx
		mov	[esp+3Ch+var_30], eax
		mov	eax, 1
		jmp	loc_6CEC4780
; ---------------------------------------------------------------------------

loc_6CEC4878:				; CODE XREF: __udivmoddi4+145j
		cmp	edx, ebx
		jnz	short loc_6CEC4827

loc_6CEC487C:				; CODE XREF: __udivmoddi4+13Fj
		sub	[esp+3Ch+var_30], 1
		sub	eax, esi
		sbb	edx, [esp+3Ch+var_20]
		jmp	short loc_6CEC4827
__udivmoddi4	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		xor	ecx, ecx
		lock cmpxchg [edx], ecx
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	eax, [ebx+4]
		sub	eax, 1
		test	eax, eax
		mov	[ebx+4], eax
		jz	short loc_6CEC48D0

loc_6CEC48C5:				; CODE XREF: .text:6CEC48E4j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC48D0:				; CODE XREF: .text:6CEC48C3j
		mov	dword ptr [ebx+8], 0
		mov	[esp], ebx
		call	sub_6CEC7FC0
		sub	esp, 4
		test	eax, eax
		js	short loc_6CEC48C5
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 1
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		add	esp, 18h
		movzx	eax, al
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	[esp], ebx
		call	sub_6CEC7FC0
		mov	edx, eax
		sub	esp, 4
		xor	eax, eax
		test	edx, edx
		js	short loc_6CEC4962
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 1
		mov	eax, [ebx+4]
		mov	[esp], eax
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		movzx	eax, al

loc_6CEC4962:				; CODE XREF: .text:6CEC4939j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 8
		mov	ebx, [esp+10h]
		call	ds:GetCurrentThreadId
		xor	edx, edx
		mov	ecx, eax
		mov	eax, 0FFFFFFFFh
		lock cmpxchg [ebx], edx
		test	eax, eax
		js	short loc_6CEC49A4
		cmp	ecx, [ebx+8]
		mov	eax, 1
		jnz	short loc_6CEC499F
		add	dword ptr [ebx+4], 1
		xor	al, al

loc_6CEC499F:				; CODE XREF: .text:6CEC4997j
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC49A4:				; CODE XREF: .text:6CEC498Dj
		mov	dword ptr [ebx+4], 1
		xor	eax, eax
		mov	[ebx+8], ecx
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+20h]
		call	ds:GetCurrentThreadId
		mov	[esp], ebx
		mov	esi, eax
		call	sub_6CEC8040
		sub	esp, 4
		test	eax, eax
		jz	short loc_6CEC4A00
		cmp	esi, [ebx+8]
		jz	short loc_6CEC4A26
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jnz	short loc_6CEC4A10

loc_6CEC4A00:				; CODE XREF: .text:6CEC49DEj
		mov	dword ptr [ebx+4], 1
		mov	[ebx+8], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC4A10:				; CODE XREF: .text:6CEC49FEj
		mov	[esp], ebx
		call	sub_6CEC7FC0
		mov	eax, 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC4A26:				; CODE XREF: .text:6CEC49E3j
		mov	[esp], ebx
		call	sub_6CEC7FC0
		xor	eax, eax
		add	dword ptr [ebx+4], 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	[esp], ebx
		call	sub_6CEC8040
		sub	esp, 4
		test	eax, eax
		jnz	short loc_6CEC4A60

loc_6CEC4A57:				; CODE XREF: .text:6CEC4A79j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4A60:				; CODE XREF: .text:6CEC4A55j
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	eax, [ebx+4]
		mov	[esp], eax
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	short loc_6CEC4A57
		mov	[esp], ebx
		call	sub_6CEC7FC0
		mov	eax, 1
		sub	esp, 4
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0FFFFh
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+0Ch], eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0FFFFh
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+4], eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	eax, [eax+4]
		mov	[esp], eax
		call	ds:CloseHandle
		sub	esp, 4
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+24h]
		mov	[esp+4], eax
		mov	eax, [esp+20h]
		mov	[esp], eax
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jz	short loc_6CEC4B65
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC4B65:				; CODE XREF: .text:6CEC4B5Dj
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	[esp+14h], ebx
		mov	[esp+18h], esi
		call	ds:GetLastError
		mov	ebx, eax
		mov	eax, [esp+20h]
		mov	[esp], eax
		call	ds:TlsGetValue
		sub	esp, 4
		mov	esi, eax
		mov	[esp], ebx
		call	ds:SetLastError
		mov	eax, esi
		sub	esp, 4
		mov	ebx, [esp+14h]
		mov	esi, [esp+18h]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	[esp], eax
		call	ds:TlsFree
		sub	esp, 4
		test	eax, eax
		jz	short loc_6CEC4BD0
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4BD0:				; CODE XREF: .text:6CEC4BC5j
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	[esp+4], ebx
		mov	ebx, [esp+14h]
		mov	[esp+8], esi
		mov	esi, [esp+10h]
		call	ds:TlsAlloc
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6CEC4C18
		mov	[esi], eax
		mov	esi, [esp+8]
		mov	[esp+14h], ebx
		mov	ebx, [esp+4]
		mov	[esp+10h], eax
		add	esp, 0Ch
		jmp	sub_6CEC7FE0
; ---------------------------------------------------------------------------

loc_6CEC4C18:				; CODE XREF: .text:6CEC4BFCj
		mov	eax, ds:GetLastError
		mov	ebx, [esp+4]
		mov	esi, [esp+8]
		add	esp, 0Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+24h]
		mov	ebx, [esp+20h]
		test	esi, esi
		jz	short loc_6CEC4C53
		test	ebx, ebx
		jz	short loc_6CEC4C53
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_6CEC4C60

loc_6CEC4C4B:				; CODE XREF: .text:6CEC4C76j
					; .text:6CEC4C92j
		xor	eax, eax

loc_6CEC4C4D:				; CODE XREF: .text:6CEC4CA0j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC4C53:				; CODE XREF: .text:6CEC4C3Fj
					; .text:6CEC4C43j
		add	esp, 14h
		mov	eax, 16h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4C60:				; CODE XREF: .text:6CEC4C49j
		lea	eax, [ebx+4]
		mov	[esp], eax
		call	sub_6CEC8040
		sub	esp, 4
		test	eax, eax
		jz	short loc_6CEC4C94
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_6CEC4C4B
		mov	esi, ds:Sleep
		xchg	ax, ax

loc_6CEC4C80:				; CODE XREF: .text:6CEC4C90j
		mov	dword ptr [esp], 0
		call	esi ; Sleep
		mov	eax, [ebx]
		sub	esp, 4
		test	eax, eax
		jz	short loc_6CEC4C80
		jmp	short loc_6CEC4C4B
; ---------------------------------------------------------------------------

loc_6CEC4C94:				; CODE XREF: .text:6CEC4C70j
		call	esi
		xor	eax, eax
		mov	dword ptr [ebx], 1
		xchg	ax, ax
		jmp	short loc_6CEC4C4D
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4CB0:				; DATA XREF: sub_6CEC5600+16Do
		mov	eax, [esp+0Ch]
		mov	ecx, [esp+8]
		mov	edx, [eax+8]
		mov	eax, 1
		cmp	[ecx+8], edx
		jbe	short loc_6CEC4CC7
		rep retn
; ---------------------------------------------------------------------------

loc_6CEC4CC7:				; CODE XREF: .text:6CEC4CC3j
		sbb	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC4CD0	proc near		; CODE XREF: sub_6CEC4D70+3Fp
					; sub_6CEC4D70+7Dp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, ecx
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	[esp+3Ch+var_20], edx
		mov	edx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_24], eax
		lea	esi, [edx+edx+1]
		cmp	esi, [esp+3Ch+arg_4]
		jl	short loc_6CEC4D2A
		jmp	short loc_6CEC4D60
; ---------------------------------------------------------------------------

loc_6CEC4CF1:				; CODE XREF: sub_6CEC4CD0+61j
		lea	edi, [ebp+esi*4+0]
		mov	ebx, esi

loc_6CEC4CF7:				; CODE XREF: sub_6CEC4CD0+8Ej
					; sub_6CEC4CD0+9Cj
		mov	eax, [edi]
		lea	esi, [ebp+edx*4+0]
		mov	[esp+3Ch+var_34], eax
		mov	eax, [esi]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], eax
		call	[esp+3Ch+var_20]
		test	eax, eax
		jns	short loc_6CEC4D60
		mov	edx, [edi]
		mov	eax, [esi]
		mov	[esi], edx
		lea	esi, [ebx+ebx+1]
		mov	edx, ebx
		cmp	[esp+3Ch+arg_4], esi
		mov	[edi], eax
		jle	short loc_6CEC4D60

loc_6CEC4D2A:				; CODE XREF: sub_6CEC4CD0+1Dj
		lea	ebx, [esi+1]
		cmp	[esp+3Ch+arg_4], ebx
		jle	short loc_6CEC4CF1
		mov	eax, [ebp+ebx*4+0]
		lea	edi, [ebp+esi*4+0]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_34], eax
		mov	eax, [edi]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], eax
		call	[esp+3Ch+var_20]
		mov	edx, [esp+3Ch+var_28]
		test	eax, eax
		js	short loc_6CEC4D68
		mov	ebx, esi
		jmp	short loc_6CEC4CF7
; ---------------------------------------------------------------------------

loc_6CEC4D60:				; CODE XREF: sub_6CEC4CD0+1Fj
					; sub_6CEC4CD0+44j ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC4D68:				; CODE XREF: sub_6CEC4CD0+8Aj
		lea	edi, [ebp+ebx*4+0]
		jmp	short loc_6CEC4CF7
sub_6CEC4CD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC4D70	proc near		; CODE XREF: sub_6CEC5600+279p
					; sub_6CEC5600+57Ep

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		mov	ebp, edx
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ecx+4]
		mov	[esp+3Ch+var_24], eax
		lea	eax, [ecx+8]
		mov	[esp+3Ch+var_28], eax
		mov	ebx, esi
		shr	ebx, 1
		sub	ebx, 1
		js	short loc_6CEC4DBD
		mov	edi, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_20], ecx
		lea	esi, [esi+0]

loc_6CEC4DA0:				; CODE XREF: sub_6CEC4D70+47j
		mov	ecx, [esp+3Ch+var_28]
		mov	edx, ebp
		mov	eax, edi
		mov	[esp+3Ch+var_3C], ebx
		mov	[esp+3Ch+var_38], esi
		call	sub_6CEC4CD0
		sub	ebx, 1
		jns	short loc_6CEC4DA0
		mov	edi, [esp+3Ch+var_20]

loc_6CEC4DBD:				; CODE XREF: sub_6CEC4D70+20j
		sub	esi, 1
		test	esi, esi
		jle	short loc_6CEC4DF6
		lea	ebx, [edi+esi*4+8]

loc_6CEC4DC8:				; CODE XREF: sub_6CEC4D70+84j
		mov	edx, [ebx]
		mov	eax, [edi+8]
		mov	ecx, [esp+3Ch+var_28]
		mov	[edi+8], edx
		mov	edx, ebp
		mov	[ebx], eax
		mov	eax, [esp+3Ch+var_24]
		sub	ebx, 4
		mov	[esp+3Ch+var_38], esi
		sub	esi, 1
		mov	[esp+3Ch+var_3C], 0
		call	sub_6CEC4CD0
		test	esi, esi
		jg	short loc_6CEC4DC8

loc_6CEC4DF6:				; CODE XREF: sub_6CEC4D70+52j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6CEC4D70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC4E00	proc near		; CODE XREF: sub_6CEC4E40:loc_6CEC4E86p

lpSemaphoreAttributes= dword ptr -1Ch
lInitialCount	= dword	ptr -18h
lMaximumCount	= dword	ptr -14h
lpName		= dword	ptr -10h

		sub	esp, 1Ch
		mov	[esp+1Ch+lpName], 0 ; lpName
		mov	ds:dword_6CECB014, 0FFFFFFFFh
		mov	[esp+1Ch+lMaximumCount], 0FFFFh	; lMaximumCount
		mov	[esp+1Ch+lInitialCount], 0 ; lInitialCount
		mov	[esp+1Ch+lpSemaphoreAttributes], 0 ; lpSemaphoreAttributes
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	ds:hHandle, eax
		add	esp, 1Ch
		retn
sub_6CEC4E00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC4E40	proc near		; CODE XREF: __deregister_frame_info_bases+1Bp
					; _Unwind_Find_FDE+Fp ...

dwMilliseconds	= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	ecx, dword_6CEC9030
		test	ecx, ecx
		jz	short loc_6CEC4E56
		cmp	dword_6CEC9004,	0
		jz	short loc_6CEC4E5A

loc_6CEC4E56:				; CODE XREF: sub_6CEC4E40+Bj
					; sub_6CEC4E40+44j ...
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC4E5A:				; CODE XREF: sub_6CEC4E40+14j
		mov	[esp+1Ch+dwMilliseconds], offset dword_6CEC9008
		call	sub_6CEC8040
		test	eax, eax
		push	edx
		jnz	short loc_6CEC4E7B
		jmp	short loc_6CEC4E86
; ---------------------------------------------------------------------------

loc_6CEC4E6D:				; CODE XREF: sub_6CEC4E40+42j
		mov	[esp+1Ch+dwMilliseconds], 0 ; dwMilliseconds
		call	ds:Sleep
		push	eax

loc_6CEC4E7B:				; CODE XREF: sub_6CEC4E40+29j
		cmp	dword_6CEC9004,	0
		jz	short loc_6CEC4E6D
		jmp	short loc_6CEC4E56
; ---------------------------------------------------------------------------

loc_6CEC4E86:				; CODE XREF: sub_6CEC4E40+2Bj
		call	sub_6CEC4E00
		mov	dword_6CEC9004,	1
		jmp	short loc_6CEC4E56
sub_6CEC4E40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC4EA0	proc near		; CODE XREF: sub_6CEC5160+C0p
					; sub_6CEC5290+C2p ...
		sub	esp, 0Ch
		cmp	al, 0FFh
		jz	short loc_6CEC4EF0
		and	eax, 7
		cmp	eax, 2
		jz	short loc_6CEC4EE0
		jle	short loc_6CEC4EC7
		cmp	eax, 3
		jz	short loc_6CEC4ECB
		cmp	eax, 4
		lea	esi, [esi+0]
		jz	short loc_6CEC4ED4

loc_6CEC4EC2:				; CODE XREF: sub_6CEC4EA0+29j
		call	abort
; ---------------------------------------------------------------------------

loc_6CEC4EC7:				; CODE XREF: sub_6CEC4EA0+Fj
		test	eax, eax
		jnz	short loc_6CEC4EC2

loc_6CEC4ECB:				; CODE XREF: sub_6CEC4EA0+14j
		mov	eax, 4
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC4ED4:				; CODE XREF: sub_6CEC4EA0+20j
		mov	eax, 8
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4EE0:				; CODE XREF: sub_6CEC4EA0+Dj
		mov	eax, 2
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4EF0:				; CODE XREF: sub_6CEC4EA0+5j
		xor	eax, eax
		add	esp, 0Ch
		retn
sub_6CEC4EA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC4F00	proc near		; CODE XREF: sub_6CEC5160+7Dp
					; sub_6CEC5290+21p ...
		sub	esp, 0Ch
		cmp	al, 0FFh
		jz	short loc_6CEC4F2B
		and	eax, 70h
		cmp	eax, 20h
		jz	short loc_6CEC4F31
		jle	short loc_6CEC4F27
		cmp	eax, 30h
		jz	short loc_6CEC4F38
		cmp	eax, 50h
		lea	esi, [esi+0]
		jz	short loc_6CEC4F2B
		call	abort
; ---------------------------------------------------------------------------

loc_6CEC4F27:				; CODE XREF: sub_6CEC4F00+Fj
		test	eax, eax
		jnz	short loc_6CEC4F40

loc_6CEC4F2B:				; CODE XREF: sub_6CEC4F00+5j
					; sub_6CEC4F00+20j ...
		xor	eax, eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC4F31:				; CODE XREF: sub_6CEC4F00+Dj
		mov	eax, [edx+4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC4F38:				; CODE XREF: sub_6CEC4F00+14j
		mov	eax, [edx+8]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4F40:				; CODE XREF: sub_6CEC4F00+29j
		cmp	eax, 10h
		jz	short loc_6CEC4F2B
		call	abort
sub_6CEC4F00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC4F50	proc near		; CODE XREF: sub_6CEC50A0+99p
					; sub_6CEC5160+B9p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	eax, ecx
		cmp	bl, 50h
		mov	[esp+2Ch+var_8], edi
		mov	edi, edx
		mov	edx, ebx
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_4], ebp
		jz	loc_6CEC5080
		mov	[esp+2Ch+var_24], ecx
		movzx	ecx, bl
		mov	[esp+2Ch+var_28], ecx
		and	ecx, 0Fh
		cmp	ecx, 0Ch	; switch 13 cases
		jbe	short loc_6CEC4F90

loc_6CEC4F87:				; CODE XREF: sub_6CEC4F50:loc_6CEC4F90j
					; DATA XREF: .rdata:off_6CECA2ACo
		call	abort		; jumptable 6CEC4F90 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4F90:				; CODE XREF: sub_6CEC4F50+35j
		jmp	ds:off_6CECA2AC[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6CEC4F97:				; CODE XREF: sub_6CEC4F50:loc_6CEC4F90j
					; DATA XREF: .rdata:off_6CECA2ACo
		mov	ebx, [eax]	; jumptable 6CEC4F90 cases 0,3,11
		add	eax, 4

loc_6CEC4F9C:				; CODE XREF: sub_6CEC4F50+95j
					; sub_6CEC4F50+C9j ...
		test	ebx, ebx
		xchg	ax, ax
		jz	short loc_6CEC4FC0
		mov	ecx, [esp+2Ch+var_28]
		and	ecx, 70h
		cmp	ecx, 10h
		jz	loc_6CEC5090

loc_6CEC4FB2:				; CODE XREF: sub_6CEC4F50+144j
		add	ebx, edi
		test	dl, dl
		jns	short loc_6CEC4FC0
		mov	ebx, [ebx]
		lea	esi, [esi+0]

loc_6CEC4FC0:				; CODE XREF: sub_6CEC4F50+50j
					; sub_6CEC4F50+66j ...
		mov	edx, [esp+2Ch+arg_0]
		mov	[edx], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC4FE0:				; CODE XREF: sub_6CEC4F50:loc_6CEC4F90j
					; DATA XREF: .rdata:off_6CECA2ACo
		mov	ebx, [eax]	; jumptable 6CEC4F90 cases 4,12
		add	eax, 8
		jmp	short loc_6CEC4F9C
; ---------------------------------------------------------------------------

loc_6CEC4FE7:				; CODE XREF: sub_6CEC4F50:loc_6CEC4F90j
					; DATA XREF: .rdata:off_6CECA2ACo
		xor	ebx, ebx	; jumptable 6CEC4F90 case 9
		xor	ecx, ecx
		mov	esi, ebx
		mov	ebp, edx
		mov	[esp+2Ch+var_20], edi

loc_6CEC4FF3:				; CODE XREF: sub_6CEC4F50+BAj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	edi, bl
		mov	edx, edi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6CEC4FF3
		cmp	ecx, 1Fh
		mov	ebx, esi
		mov	edx, ebp
		mov	esi, edi
		mov	edi, [esp+2Ch+var_20]
		ja	short loc_6CEC4F9C
		and	esi, 40h
		jz	loc_6CEC4F9C
		mov	esi, 0FFFFFFFFh
		shl	esi, cl
		or	ebx, esi
		jmp	loc_6CEC4F9C
; ---------------------------------------------------------------------------

loc_6CEC5032:				; CODE XREF: sub_6CEC4F50:loc_6CEC4F90j
					; DATA XREF: .rdata:off_6CECA2ACo
		mov	ebp, edi	; jumptable 6CEC4F90 case 1
		xor	ebx, ebx
		xor	ecx, ecx
		mov	edi, edx
		lea	esi, [esi+0]

loc_6CEC5040:				; CODE XREF: sub_6CEC4F50+106j
		movzx	edx, byte ptr [eax]
		mov	esi, 7Fh
		add	eax, 1
		and	esi, edx
		shl	esi, cl
		add	ecx, 7
		or	ebx, esi
		test	dl, dl
		js	short loc_6CEC5040
		mov	edx, edi
		mov	edi, ebp
		jmp	loc_6CEC4F9C
; ---------------------------------------------------------------------------

loc_6CEC5061:				; CODE XREF: sub_6CEC4F50:loc_6CEC4F90j
					; DATA XREF: .rdata:off_6CECA2ACo
		movsx	ebx, word ptr [eax] ; jumptable	6CEC4F90 case 10
		add	eax, 2
		jmp	loc_6CEC4F9C
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5070:				; CODE XREF: sub_6CEC4F50:loc_6CEC4F90j
					; DATA XREF: .rdata:off_6CECA2ACo
		movzx	ebx, word ptr [eax] ; jumptable	6CEC4F90 case 2
		add	eax, 2
		jmp	loc_6CEC4F9C
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5080:				; CODE XREF: sub_6CEC4F50+1Ej
		add	eax, 3
		and	eax, 0FFFFFFFCh
		mov	ebx, [eax]
		add	eax, 4
		jmp	loc_6CEC4FC0
; ---------------------------------------------------------------------------

loc_6CEC5090:				; CODE XREF: sub_6CEC4F50+5Cj
		mov	edi, [esp+2Ch+var_24]
		jmp	loc_6CEC4FB2
sub_6CEC4F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC50A0	proc near		; CODE XREF: sub_6CEC5160+69p
					; sub_6CEC5290+89p ...

Str		= dword	ptr -2Ch
var_10		= byte ptr -10h

		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 24h
		cmp	byte ptr [eax+9], 7Ah
		jz	short loc_6CEC50B5

loc_6CEC50AD:				; CODE XREF: sub_6CEC50A0+73j
		add	esp, 24h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC50B5:				; CODE XREF: sub_6CEC50A0+Bj
		lea	esi, [eax+9]
		mov	[esp+2Ch+Str], esi ; Str
		call	strlen
		lea	eax, [ebx+eax+0Ah]

loc_6CEC50C4:				; CODE XREF: sub_6CEC50A0+2Cj
		movzx	edx, byte ptr [eax]
		add	eax, 1
		test	dl, dl
		js	short loc_6CEC50C4
		xchg	ax, ax

loc_6CEC50D0:				; CODE XREF: sub_6CEC50A0+38j
		movzx	edx, byte ptr [eax]
		add	eax, 1
		test	dl, dl
		js	short loc_6CEC50D0
		cmp	byte ptr [ebx+8], 1
		jz	short loc_6CEC5150

loc_6CEC50E0:				; CODE XREF: sub_6CEC50A0+48j
		movzx	edx, byte ptr [eax]
		add	eax, 1
		test	dl, dl
		js	short loc_6CEC50E0

loc_6CEC50EA:				; CODE XREF: sub_6CEC50A0+B3j
		lea	ebx, [esi+1]
		lea	esi, [esi+0]

loc_6CEC50F0:				; CODE XREF: sub_6CEC50A0+58j
		movzx	edx, byte ptr [eax]
		add	eax, 1
		test	dl, dl
		js	short loc_6CEC50F0
		movzx	edx, byte ptr [esi+1]
		lea	esi, [esp+2Ch+var_10]
		cmp	dl, 52h
		jnz	short loc_6CEC5123
		jmp	short loc_6CEC5146
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5110:				; CODE XREF: sub_6CEC50A0+86j
		cmp	dl, 4Ch
		jnz	short loc_6CEC50AD
		add	ebx, 1
		add	eax, 1
		movzx	edx, byte ptr [ebx]
		cmp	dl, 52h
		jz	short loc_6CEC5146

loc_6CEC5123:				; CODE XREF: sub_6CEC50A0+65j
					; sub_6CEC50A0+A4j
		cmp	dl, 50h
		jnz	short loc_6CEC5110
		lea	ecx, [eax+1]
		movzx	eax, byte ptr [eax]
		xor	edx, edx
		add	ebx, 1
		mov	[esp+2Ch+Str], esi
		and	eax, 7Fh
		call	sub_6CEC4F50
		movzx	edx, byte ptr [ebx]
		cmp	dl, 52h
		jnz	short loc_6CEC5123

loc_6CEC5146:				; CODE XREF: sub_6CEC50A0+67j
					; sub_6CEC50A0+81j
		movzx	eax, byte ptr [eax]
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5150:				; CODE XREF: sub_6CEC50A0+3Ej
		add	eax, 1
		jmp	short loc_6CEC50EA
sub_6CEC50A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC5160	proc near		; CODE XREF: sub_6CEC5600+365p
					; sub_6CEC5600+438p

var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 3Ch
		mov	ebp, [edx]
		mov	[esp+4Ch+var_30], 0
		test	ebp, ebp
		jz	loc_6CEC525E
		mov	[esp+4Ch+var_38], 0
		xor	eax, eax
		mov	[esp+4Ch+var_3C], 0
		jmp	short loc_6CEC51B2
; ---------------------------------------------------------------------------

loc_6CEC5191:				; CODE XREF: sub_6CEC5160+E6j
		add	[esp+4Ch+var_30], 1
		cmp	eax, [esi]
		jnb	loc_6CEC524C
		mov	[esi], eax
		mov	eax, edi

loc_6CEC51A2:				; CODE XREF: sub_6CEC5160+57j
		mov	edx, [ebx]
		lea	ebx, [ebx+edx+4]
		mov	edi, [ebx]
		test	edi, edi
		jz	loc_6CEC525E

loc_6CEC51B2:				; CODE XREF: sub_6CEC5160+2Fj
					; sub_6CEC5160+F8j
		mov	edx, [ebx+4]
		test	edx, edx
		jz	short loc_6CEC51A2
		neg	edx
		lea	edi, [ebx+edx+4]
		cmp	eax, edi
		jz	loc_6CEC5270
		mov	eax, edi
		call	sub_6CEC50A0
		mov	edx, esi
		movzx	ebp, al
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_31], al
		mov	eax, ebp
		call	sub_6CEC4F00
		mov	[esp+4Ch+var_38], eax
		movzx	eax, word ptr [esi+10h]
		mov	edx, eax
		and	dx, 7F8h
		cmp	dx, 7F8h
		jz	short loc_6CEC5277
		shr	ax, 3
		movzx	eax, al
		cmp	[esp+4Ch+var_3C], eax
		jz	short loc_6CEC5209
		or	byte ptr [esi+10h], 4

loc_6CEC5209:				; CODE XREF: sub_6CEC5160+A3j
					; sub_6CEC5160+115j ...
		mov	edx, [esp+4Ch+var_38]
		lea	eax, [esp+4Ch+var_20]
		lea	ecx, [ebx+8]
		mov	[esp+4Ch+var_4C], eax
		mov	eax, ebp
		call	sub_6CEC4F50
		mov	eax, ebp
		call	sub_6CEC4EA0
		mov	edx, 0FFFFFFFFh
		cmp	eax, 3
		ja	short loc_6CEC5240
		lea	ecx, ds:0[eax*8]
		mov	edx, 1
		shl	edx, cl
		sub	edx, 1

loc_6CEC5240:				; CODE XREF: sub_6CEC5160+CDj
		mov	eax, [esp+4Ch+var_20]
		test	edx, eax
		jnz	loc_6CEC5191

loc_6CEC524C:				; CODE XREF: sub_6CEC5160+38j
		mov	edx, [ebx]
		mov	eax, edi
		lea	ebx, [ebx+edx+4]
		mov	edi, [ebx]
		test	edi, edi
		jnz	loc_6CEC51B2

loc_6CEC525E:				; CODE XREF: sub_6CEC5160+17j
					; sub_6CEC5160+4Cj
		mov	eax, [esp+4Ch+var_30]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5270:				; CODE XREF: sub_6CEC5160+61j
		movzx	ebp, byte ptr [esp+4Ch+var_3C]
		jmp	short loc_6CEC5209
; ---------------------------------------------------------------------------

loc_6CEC5277:				; CODE XREF: sub_6CEC5160+96j
		movzx	edx, [esp+4Ch+var_31]
		and	ax, 0F807h
		shl	edx, 3
		or	eax, edx
		mov	[esi+10h], ax
		jmp	loc_6CEC5209
sub_6CEC5160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC5290	proc near		; CODE XREF: sub_6CEC5600+13Fp
					; sub_6CEC5600+51Fp

var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		mov	edi, eax
		push	esi
		push	ebx
		mov	ebx, ecx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_30], edx
		movzx	esi, word ptr [eax+10h]
		mov	edx, eax
		shr	si, 3
		and	esi, 0FFh
		mov	eax, esi
		call	sub_6CEC4F00
		mov	ecx, [ebx]
		test	ecx, ecx
		mov	[esp+4Ch+var_34], eax
		jz	loc_6CEC5390
		mov	[esp+4Ch+var_38], 0
		mov	ebp, edi
		jmp	short loc_6CEC52FE
; ---------------------------------------------------------------------------

loc_6CEC52D0:				; CODE XREF: sub_6CEC5290+A4j
		mov	edx, [ebx+8]
		test	edx, edx
		jz	short loc_6CEC52EE

loc_6CEC52D7:				; CODE XREF: sub_6CEC5290+E6j
		mov	edx, [esp+4Ch+var_30]
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_6CEC52EE
		mov	edx, [eax+4]
		mov	[eax+edx*4+8], ebx
		add	edx, 1
		mov	[eax+4], edx

loc_6CEC52EE:				; CODE XREF: sub_6CEC5290+45j
					; sub_6CEC5290+4Fj ...
		mov	eax, [ebx]
		lea	ebx, [ebx+eax+4]
		mov	eax, [ebx]
		test	eax, eax
		jz	loc_6CEC5390

loc_6CEC52FE:				; CODE XREF: sub_6CEC5290+3Ej
					; sub_6CEC5290+F6j
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6CEC52EE
		test	byte ptr [ebp+10h], 4
		jz	short loc_6CEC5332
		neg	eax
		lea	edi, [ebx+eax+4]
		cmp	[esp+4Ch+var_38], edi
		jz	short loc_6CEC5332
		mov	eax, edi
		call	sub_6CEC50A0
		mov	edx, ebp
		mov	esi, eax
		movzx	eax, al
		call	sub_6CEC4F00
		mov	[esp+4Ch+var_38], edi
		mov	[esp+4Ch+var_34], eax

loc_6CEC5332:				; CODE XREF: sub_6CEC5290+79j
					; sub_6CEC5290+85j
		test	esi, esi
		jz	short loc_6CEC52D0
		lea	edx, [esp+4Ch+var_20]
		mov	eax, esi
		mov	[esp+4Ch+var_4C], edx
		mov	edx, [esp+4Ch+var_34]
		movzx	edi, al
		lea	ecx, [ebx+8]
		mov	eax, edi
		call	sub_6CEC4F50
		mov	eax, edi
		call	sub_6CEC4EA0
		mov	edx, 0FFFFFFFFh
		cmp	eax, 3
		ja	short loc_6CEC5372
		lea	ecx, ds:0[eax*8]
		mov	edx, 1
		shl	edx, cl
		sub	edx, 1

loc_6CEC5372:				; CODE XREF: sub_6CEC5290+CFj
		test	[esp+4Ch+var_20], edx
		jnz	loc_6CEC52D7
		mov	eax, [ebx]
		lea	ebx, [ebx+eax+4]
		mov	eax, [ebx]
		test	eax, eax
		jnz	loc_6CEC52FE
		lea	esi, [esi+0]

loc_6CEC5390:				; CODE XREF: sub_6CEC5290+2Ej
					; sub_6CEC5290+68j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6CEC5290	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6CEC53A0:				; DATA XREF: sub_6CEC5600+17Do
		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+30h]
		movzx	eax, word ptr [ebx+10h]
		mov	edx, ebx
		shr	ax, 3
		movzx	eax, al
		call	sub_6CEC4F00
		mov	ecx, [esp+34h]
		lea	edx, [esp+1Ch]
		add	ecx, 8
		mov	esi, eax
		movzx	eax, word ptr [ebx+10h]
		mov	[esp], edx
		mov	edx, esi
		shr	ax, 3
		movzx	eax, al
		call	sub_6CEC4F50
		movzx	eax, word ptr [ebx+10h]
		lea	edx, [esp+18h]
		mov	ecx, [esp+38h]
		mov	[esp], edx
		mov	edx, esi
		shr	ax, 3
		add	ecx, 8
		movzx	eax, al
		call	sub_6CEC4F50
		mov	edx, [esp+18h]
		mov	eax, 1
		cmp	[esp+1Ch], edx
		jbe	short loc_6CEC5412

loc_6CEC540C:				; CODE XREF: .text:6CEC5414j
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC5412:				; CODE XREF: .text:6CEC540Aj
		sbb	eax, eax
		jmp	short loc_6CEC540C
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC5420	proc near		; DATA XREF: sub_6CEC5600:loc_6CEC575Fo

var_3C		= dword	ptr -3Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 3Ch
		mov	[esp+3Ch+var_8], edi
		mov	edi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_0]
		mov	eax, edi
		sub	eax, [edi+4]
		add	eax, 4
		call	sub_6CEC50A0
		mov	edx, ebp
		movzx	ebx, al
		mov	eax, ebx
		call	sub_6CEC4F00
		lea	edx, [esp+3Ch+var_20]
		lea	ecx, [edi+8]
		mov	[esp+3Ch+var_3C], edx
		mov	edx, eax
		mov	eax, ebx
		call	sub_6CEC4F50
		mov	eax, esi
		sub	eax, [esi+4]
		add	eax, 4
		call	sub_6CEC50A0
		mov	edx, ebp
		movzx	ebx, al
		mov	eax, ebx
		call	sub_6CEC4F00
		lea	edx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], edx
		lea	ecx, [esi+8]
		mov	edx, eax
		mov	eax, ebx
		call	sub_6CEC4F50
		mov	edx, [esp+3Ch+var_24]
		mov	eax, 1
		cmp	[esp+3Ch+var_20], edx
		jbe	short loc_6CEC54C0

loc_6CEC54A6:				; CODE XREF: sub_6CEC5420+A2j
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC54C0:				; CODE XREF: sub_6CEC5420+84j
		sbb	eax, eax
		jmp	short loc_6CEC54A6
sub_6CEC5420	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC54D0	proc near		; CODE XREF: sub_6CEC5600+3D1p
					; sub_6CEC5600+54Dp

var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		mov	ebp, eax
		push	edi
		push	esi
		push	ebx
		mov	ebx, edx
		sub	esp, 3Ch
		mov	edx, eax
		mov	[esp+4Ch+var_38], ecx
		movzx	esi, word ptr [eax+10h]
		shr	si, 3
		and	esi, 0FFh
		mov	eax, esi
		call	sub_6CEC4F00
		mov	[esp+4Ch+var_30], eax
		mov	eax, [ebx]
		test	eax, eax
		jz	loc_6CEC55F1
		mov	[esp+4Ch+var_34], 0
		jmp	short loc_6CEC5540
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5510:				; CODE XREF: sub_6CEC54D0+A6j
		mov	eax, [ebx+8]
		mov	[esp+4Ch+var_20], eax
		mov	edx, [ebx+0Ch]
		test	eax, eax
		mov	[esp+4Ch+var_24], edx
		jz	short loc_6CEC5530
		mov	ecx, [esp+4Ch+var_38]
		sub	ecx, eax
		cmp	ecx, edx
		jb	loc_6CEC55E7

loc_6CEC5530:				; CODE XREF: sub_6CEC54D0+50j
					; sub_6CEC54D0+75j ...
		mov	eax, [ebx]
		lea	ebx, [ebx+eax+4]
		mov	edi, [ebx]
		test	edi, edi
		jz	loc_6CEC55F1

loc_6CEC5540:				; CODE XREF: sub_6CEC54D0+3Cj
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6CEC5530
		test	byte ptr [ebp+10h], 4
		jz	short loc_6CEC5574
		neg	eax
		lea	edi, [ebx+eax+4]
		cmp	[esp+4Ch+var_34], edi
		jz	short loc_6CEC5574
		mov	eax, edi
		call	sub_6CEC50A0
		mov	edx, ebp
		mov	esi, eax
		movzx	eax, al
		call	sub_6CEC4F00
		mov	[esp+4Ch+var_34], edi
		mov	[esp+4Ch+var_30], eax

loc_6CEC5574:				; CODE XREF: sub_6CEC54D0+7Bj
					; sub_6CEC54D0+87j
		test	esi, esi
		jz	short loc_6CEC5510
		mov	edx, [esp+4Ch+var_30]
		mov	ecx, esi
		movzx	edi, cl
		lea	eax, [esp+4Ch+var_20]
		lea	ecx, [ebx+8]
		mov	[esp+4Ch+var_4C], eax
		mov	eax, edi
		call	sub_6CEC4F50
		lea	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], edx
		xor	edx, edx
		mov	ecx, eax
		mov	eax, edi
		and	eax, 0Fh
		call	sub_6CEC4F50
		mov	eax, edi
		call	sub_6CEC4EA0
		mov	edx, 0FFFFFFFFh
		cmp	eax, 3
		ja	short loc_6CEC55C9
		lea	ecx, ds:0[eax*8]
		mov	edx, 1
		shl	edx, cl
		sub	edx, 1

loc_6CEC55C9:				; CODE XREF: sub_6CEC54D0+E6j
		mov	eax, [esp+4Ch+var_20]
		test	edx, eax
		jz	loc_6CEC5530
		mov	ecx, [esp+4Ch+var_38]
		mov	edx, [esp+4Ch+var_24]
		sub	ecx, eax
		cmp	ecx, edx
		jnb	loc_6CEC5530

loc_6CEC55E7:				; CODE XREF: sub_6CEC54D0+5Aj
		add	esp, 3Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC55F1:				; CODE XREF: sub_6CEC54D0+2Ej
					; sub_6CEC54D0+6Aj
		xor	ebx, ebx
		add	esp, 3Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6CEC54D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC5600	proc near		; CODE XREF: _Unwind_Find_FDE+5Ep
					; _Unwind_Find_FDE+FAp

Size		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
Memory		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		mov	[esp+5Ch+var_3C], edx
		movzx	eax, byte ptr [eax+10h]
		test	al, 1
		jz	loc_6CEC56D0

loc_6CEC5619:				; CODE XREF: sub_6CEC5600+3BAj
		test	al, 4
		jz	loc_6CEC59E2
		mov	eax, [ebx+0Ch]
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_44], ebx
		mov	[esp+5Ch+var_48], eax
		mov	eax, [eax+4]
		mov	ebp, eax

loc_6CEC5639:				; CODE XREF: sub_6CEC5600+C4j
		cmp	[esp+5Ch+var_4C], ebp
		jb	short loc_6CEC5650
		jmp	loc_6CEC5A27
; ---------------------------------------------------------------------------

loc_6CEC5644:				; CODE XREF: sub_6CEC5600+ADj
		cmp	ebx, [esp+5Ch+var_4C]
		jbe	loc_6CEC5A27
		mov	ebp, ebx

loc_6CEC5650:				; CODE XREF: sub_6CEC5600+3Dj
		mov	ebx, [esp+5Ch+var_4C]
		mov	ecx, [esp+5Ch+var_48]
		lea	ebx, [ebp+ebx+0]
		shr	ebx, 1
		mov	esi, [ecx+ebx*4+8]
		mov	eax, esi
		sub	eax, [esi+4]
		add	eax, 4
		call	sub_6CEC50A0
		mov	edx, [esp+5Ch+var_44]
		movzx	edi, al
		mov	eax, edi
		call	sub_6CEC4F00
		lea	edx, [esp+5Ch+var_24]
		lea	ecx, [esi+8]
		mov	[esp+5Ch+Size],	edx
		mov	edx, eax
		mov	eax, edi
		call	sub_6CEC4F50
		lea	edx, [esp+5Ch+var_20]
		mov	[esp+5Ch+Size],	edx
		xor	edx, edx
		mov	ecx, eax
		mov	eax, edi
		and	eax, 0Fh
		call	sub_6CEC4F50
		mov	eax, [esp+5Ch+var_24]
		cmp	eax, [esp+5Ch+var_3C]
		ja	short loc_6CEC5644
		add	eax, [esp+5Ch+var_20]
		cmp	eax, [esp+5Ch+var_3C]
		ja	loc_6CEC59D8
		add	ebx, 1
		mov	[esp+5Ch+var_4C], ebx
		jmp	loc_6CEC5639
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC56D0:				; CODE XREF: sub_6CEC5600+13j
		mov	ecx, [ebx+10h]
		mov	edx, ecx
		shr	edx, 0Bh
		test	edx, edx
		mov	[esp+5Ch+var_38], edx
		jz	loc_6CEC5941

loc_6CEC56E4:				; CODE XREF: sub_6CEC5600+3A6j
		mov	ecx, [esp+5Ch+var_38]
		lea	esi, ds:8[ecx*4]
		mov	[esp+5Ch+Size],	esi ; Size
		call	malloc
		test	eax, eax
		mov	[esp+5Ch+var_2C], eax
		jz	loc_6CEC59AC
		mov	dword ptr [eax+4], 0
		mov	[esp+5Ch+Size],	esi ; Size
		call	malloc
		test	eax, eax
		mov	[esp+5Ch+var_28], eax
		jz	short loc_6CEC5721
		mov	dword ptr [eax+4], 0

loc_6CEC5721:				; CODE XREF: sub_6CEC5600+118j
		test	byte ptr [ebx+10h], 2
		jz	loc_6CEC5B16
		mov	esi, [ebx+0Ch]
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6CEC574A
		lea	edi, [esp+5Ch+var_2C]

loc_6CEC5738:				; CODE XREF: sub_6CEC5600+148j
		add	esi, 4
		mov	edx, edi
		mov	eax, ebx
		call	sub_6CEC5290
		mov	ecx, [esi]
		test	ecx, ecx
		jnz	short loc_6CEC5738

loc_6CEC574A:				; CODE XREF: sub_6CEC5600+132j
					; sub_6CEC5600+524j
		mov	ebp, [esp+5Ch+var_2C]
		test	ebp, ebp
		jz	short loc_6CEC575F
		mov	eax, [esp+5Ch+var_38]
		cmp	eax, [ebp+4]
		jnz	loc_6CEC5B88

loc_6CEC575F:				; CODE XREF: sub_6CEC5600+150j
		mov	[esp+5Ch+var_4C], offset sub_6CEC5420
		test	byte ptr [ebx+10h], 4
		jnz	short loc_6CEC5785
		mov	[esp+5Ch+var_4C], offset loc_6CEC4CB0
		test	word ptr [ebx+10h], 7F8h
		jz	short loc_6CEC5785
		mov	[esp+5Ch+var_4C], offset loc_6CEC53A0

loc_6CEC5785:				; CODE XREF: sub_6CEC5600+16Bj
					; sub_6CEC5600+17Bj
		mov	edi, [esp+5Ch+var_28]
		test	edi, edi
		jz	loc_6CEC5B76
		mov	edx, [ebp+4]
		test	edx, edx
		mov	[esp+5Ch+var_40], edx
		jz	loc_6CEC5B5D
		xor	eax, eax
		mov	esi, offset dword_6CECB008
		mov	[esp+5Ch+var_48], ebx
		lea	ebx, [eax+1]
		cmp	[esp+5Ch+var_40], ebx
		lea	ecx, [ebp+8]
		mov	[esp+5Ch+var_44], ecx
		mov	[edi+eax*4+8], esi
		jbe	short loc_6CEC5819
		nop

loc_6CEC57C0:				; CODE XREF: sub_6CEC5600+217j
		lea	esi, [ebp+eax*4+8]
		cmp	esi, offset dword_6CECB008
		jnz	short loc_6CEC57ED
		jmp	short loc_6CEC580A
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC57D0:				; CODE XREF: sub_6CEC5600+208j
		mov	eax, esi
		sub	eax, [esp+5Ch+var_44]
		sar	eax, 2
		mov	esi, [edi+eax*4+8]
		mov	dword ptr [edi+eax*4+8], 0
		cmp	esi, offset dword_6CECB008
		jz	short loc_6CEC580A

loc_6CEC57ED:				; CODE XREF: sub_6CEC5600+1CAj
		mov	eax, [esi]
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebp+ebx*4+8]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_48]
		mov	[esp+5Ch+Size],	eax
		call	[esp+5Ch+var_4C]
		test	eax, eax
		js	short loc_6CEC57D0

loc_6CEC580A:				; CODE XREF: sub_6CEC5600+1CCj
					; sub_6CEC5600+1EBj
		mov	eax, ebx
		lea	ebx, [eax+1]
		cmp	[esp+5Ch+var_40], ebx
		mov	[edi+eax*4+8], esi
		ja	short loc_6CEC57C0

loc_6CEC5819:				; CODE XREF: sub_6CEC5600+1BDj
		xor	esi, esi
		xor	edx, edx
		mov	ebx, [esp+5Ch+var_40]
		xor	eax, eax
		jmp	short loc_6CEC5837
; ---------------------------------------------------------------------------

loc_6CEC5825:				; CODE XREF: sub_6CEC5600+23Dj
		mov	ecx, [ebp+eax*4+8]
		add	eax, 1
		mov	[ebp+edx*4+8], ecx
		add	edx, 1
		cmp	ebx, eax
		jbe	short loc_6CEC5851

loc_6CEC5837:				; CODE XREF: sub_6CEC5600+223j
					; sub_6CEC5600+24Fj
		mov	ecx, [edi+eax*4+8]
		test	ecx, ecx
		jnz	short loc_6CEC5825
		mov	ecx, [ebp+eax*4+8]
		add	eax, 1
		mov	[edi+esi*4+8], ecx
		add	esi, 1
		cmp	ebx, eax
		ja	short loc_6CEC5837

loc_6CEC5851:				; CODE XREF: sub_6CEC5600+235j
		mov	ebx, [esp+5Ch+var_48]
		mov	eax, [esp+5Ch+var_2C]
		mov	ecx, [esp+5Ch+var_28]

loc_6CEC585D:				; CODE XREF: sub_6CEC5600+563j
		mov	[ebp+4], edx
		mov	[edi+4], esi
		mov	edx, [ecx+4]
		add	edx, [eax+4]
		cmp	[esp+5Ch+var_38], edx
		jnz	loc_6CEC5B88
		mov	edx, [esp+5Ch+var_4C]
		mov	eax, ebx
		call	sub_6CEC4D70
		mov	edx, [esp+5Ch+var_28]
		mov	ecx, [esp+5Ch+var_2C]
		mov	eax, [edx+4]
		mov	[esp+5Ch+Memory], edx
		mov	[esp+5Ch+var_38], ecx
		test	eax, eax
		jz	loc_6CEC5AF5
		mov	edx, [ecx+4]
		mov	ecx, [esp+5Ch+Memory]
		mov	[esp+5Ch+var_44], ebx
		mov	ebp, edx
		lea	ecx, [ecx+eax*4+4]
		mov	[esp+5Ch+var_34], ecx
		xchg	ax, ax

loc_6CEC58B0:				; CODE XREF: sub_6CEC5600+33Cj
		mov	ecx, [esp+5Ch+var_34]
		lea	edx, [eax-1]
		test	ebp, ebp
		mov	[esp+5Ch+var_40], edx
		mov	ecx, [ecx]
		mov	[esp+5Ch+var_48], ecx
		jz	short loc_6CEC5910
		mov	edx, [esp+5Ch+var_38]
		lea	eax, [ebp+eax+3FFFFFFFh]
		lea	ebx, [edx+ebp*4+4]
		lea	edi, [edx+eax*4+8]
		jmp	short loc_6CEC58F0
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC58E0:				; CODE XREF: sub_6CEC5600+30Ej
		mov	eax, [ebx]
		sub	ebx, 4
		mov	[edi], eax
		sub	edi, 4
		test	esi, esi
		jz	short loc_6CEC5912
		mov	ebp, esi

loc_6CEC58F0:				; CODE XREF: sub_6CEC5600+2D8j
		mov	ecx, [esp+5Ch+var_48]
		lea	esi, [ebp-1]
		mov	[esp+5Ch+var_54], ecx
		mov	eax, [ebx]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_44]
		mov	[esp+5Ch+Size],	eax
		call	[esp+5Ch+var_4C]
		test	eax, eax
		jg	short loc_6CEC58E0

loc_6CEC5910:				; CODE XREF: sub_6CEC5600+2C3j
		mov	esi, ebp

loc_6CEC5912:				; CODE XREF: sub_6CEC5600+2ECj
		mov	eax, [esp+5Ch+var_40]
		mov	edx, [esp+5Ch+var_38]
		mov	ecx, [esp+5Ch+var_48]
		sub	[esp+5Ch+var_34], 4
		lea	eax, [esi+eax]
		mov	[edx+eax*4+8], ecx
		mov	edx, [esp+5Ch+var_40]
		test	edx, edx
		jz	loc_6CEC5ADB
		mov	eax, [esp+5Ch+var_40]
		mov	ebp, esi
		jmp	loc_6CEC58B0
; ---------------------------------------------------------------------------

loc_6CEC5941:				; CODE XREF: sub_6CEC5600+DEj
		test	al, 2
		jz	loc_6CEC5A33
		mov	esi, [ebx+0Ch]
		mov	edx, [esi]
		test	edx, edx
		jz	loc_6CEC5B68
		mov	edi, [esp+5Ch+var_38]
		lea	esi, [esi+0]

loc_6CEC5960:				; CODE XREF: sub_6CEC5600+370j
		mov	eax, ebx
		add	esi, 4
		call	sub_6CEC5160
		mov	edx, [esi]
		add	edi, eax
		test	edx, edx
		jnz	short loc_6CEC5960
		mov	[esp+5Ch+var_38], edi

loc_6CEC5976:				; CODE XREF: sub_6CEC5600+441j
		mov	edx, [esp+5Ch+var_38]
		mov	eax, [ebx+10h]
		and	edx, 1FFFFFh
		mov	ecx, edx
		and	eax, 7FFh
		shl	ecx, 0Bh
		or	eax, ecx
		mov	[ebx+10h], eax
		cmp	[esp+5Ch+var_38], edx
		jz	short loc_6CEC59A0
		and	eax, 7FFh
		mov	[ebx+10h], eax

loc_6CEC59A0:				; CODE XREF: sub_6CEC5600+396j
		mov	esi, [esp+5Ch+var_38]
		test	esi, esi
		jnz	loc_6CEC56E4

loc_6CEC59AC:				; CODE XREF: sub_6CEC5600+FDj
					; sub_6CEC5600+511j ...
		mov	ecx, [esp+5Ch+var_3C]
		cmp	[ebx], ecx
		ja	short loc_6CEC5A27
		movzx	eax, byte ptr [ebx+10h]
		test	al, 1
		jnz	loc_6CEC5619
		test	al, 2
		jnz	loc_6CEC5B29
		mov	edx, [ebx+0Ch]
		mov	eax, ebx
		mov	ecx, [esp+5Ch+var_3C]
		call	sub_6CEC54D0
		mov	esi, eax

loc_6CEC59D8:				; CODE XREF: sub_6CEC5600+B7j
					; sub_6CEC5600+420j ...
		add	esp, 4Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC59E2:				; CODE XREF: sub_6CEC5600+1Bj
		movzx	eax, word ptr [ebx+10h]
		test	ax, 7F8h
		jnz	short loc_6CEC5A46
		mov	ebp, [ebx+0Ch]
		xor	edx, edx
		mov	ebx, [ebp+4]

loc_6CEC59F4:				; CODE XREF: sub_6CEC5600+425j
		cmp	edx, ebx
		jnb	short loc_6CEC5A27
		lea	eax, [ebx+edx]
		jmp	short loc_6CEC5A08
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5A00:				; CODE XREF: sub_6CEC5600+418j
		cmp	edx, eax
		mov	ebx, eax
		jnb	short loc_6CEC5A27
		add	eax, edx

loc_6CEC5A08:				; CODE XREF: sub_6CEC5600+3FBj
		shr	eax, 1
		mov	esi, [ebp+eax*4+8]
		mov	ecx, [esi+8]
		cmp	[esp+5Ch+var_3C], ecx
		mov	edi, [esi+0Ch]
		jb	short loc_6CEC5A00
		add	ecx, edi
		cmp	[esp+5Ch+var_3C], ecx
		jb	short loc_6CEC59D8
		lea	edx, [eax+1]
		jmp	short loc_6CEC59F4
; ---------------------------------------------------------------------------

loc_6CEC5A27:				; CODE XREF: sub_6CEC5600+3Fj
					; sub_6CEC5600+48j ...
		xor	esi, esi
		add	esp, 4Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC5A33:				; CODE XREF: sub_6CEC5600+343j
		mov	edx, [ebx+0Ch]
		mov	eax, ebx
		call	sub_6CEC5160
		mov	[esp+5Ch+var_38], eax
		jmp	loc_6CEC5976
; ---------------------------------------------------------------------------

loc_6CEC5A46:				; CODE XREF: sub_6CEC5600+3EAj
		mov	ecx, [ebx+0Ch]
		shr	ax, 3
		mov	edx, ebx
		movzx	eax, al
		xor	ebp, ebp
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_48], ecx
		call	sub_6CEC4F00
		mov	edx, [esp+5Ch+var_4C]
		and	edx, 0Fh
		mov	[esp+5Ch+var_40], edx
		mov	[esp+5Ch+var_44], eax
		mov	eax, [esp+5Ch+var_48]
		mov	edi, [eax+4]

loc_6CEC5A77:				; CODE XREF: sub_6CEC5600+4D9j
		cmp	ebp, edi
		jb	short loc_6CEC5A86
		jmp	short loc_6CEC5A27
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5A80:				; CODE XREF: sub_6CEC5600+4C6j
		cmp	ebx, ebp
		jbe	short loc_6CEC5A27
		mov	edi, ebx

loc_6CEC5A86:				; CODE XREF: sub_6CEC5600+479j
		mov	ecx, [esp+5Ch+var_48]
		lea	ebx, [edi+ebp]
		shr	ebx, 1
		mov	edx, [esp+5Ch+var_44]
		lea	eax, [esp+5Ch+var_20]
		mov	esi, [ecx+ebx*4+8]
		mov	[esp+5Ch+Size],	eax
		mov	eax, [esp+5Ch+var_4C]
		lea	ecx, [esi+8]
		call	sub_6CEC4F50
		lea	edx, [esp+5Ch+var_24]
		mov	[esp+5Ch+Size],	edx
		xor	edx, edx
		mov	ecx, eax
		mov	eax, [esp+5Ch+var_40]
		call	sub_6CEC4F50
		mov	eax, [esp+5Ch+var_20]
		cmp	eax, [esp+5Ch+var_3C]
		ja	short loc_6CEC5A80
		add	eax, [esp+5Ch+var_24]
		cmp	eax, [esp+5Ch+var_3C]
		ja	loc_6CEC59D8
		lea	ebp, [ebx+1]
		jmp	short loc_6CEC5A77
; ---------------------------------------------------------------------------

loc_6CEC5ADB:				; CODE XREF: sub_6CEC5600+330j
		mov	edx, [esp+5Ch+Memory]
		mov	ecx, [esp+5Ch+var_38]
		mov	ebx, [esp+5Ch+var_44]
		mov	eax, [edx+4]
		add	[ecx+4], eax
		mov	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+Memory], eax

loc_6CEC5AF5:				; CODE XREF: sub_6CEC5600+293j
		mov	edx, [esp+5Ch+Memory]
		mov	[esp+5Ch+Size],	edx ; Memory
		call	free

loc_6CEC5B01:				; CODE XREF: sub_6CEC5600+583j
		mov	eax, [esp+5Ch+var_2C]
		mov	edx, [ebx+0Ch]
		mov	[eax], edx
		mov	[ebx+0Ch], eax
		or	byte ptr [ebx+10h], 1
		jmp	loc_6CEC59AC
; ---------------------------------------------------------------------------

loc_6CEC5B16:				; CODE XREF: sub_6CEC5600+125j
		mov	ecx, [ebx+0Ch]
		lea	edx, [esp+5Ch+var_2C]
		mov	eax, ebx
		call	sub_6CEC5290
		jmp	loc_6CEC574A
; ---------------------------------------------------------------------------

loc_6CEC5B29:				; CODE XREF: sub_6CEC5600+3C2j
		mov	edi, [ebx+0Ch]
		mov	edx, [edi]
		test	edx, edx
		jz	loc_6CEC5A27
		mov	ebp, [esp+5Ch+var_3C]
		jmp	short loc_6CEC5B49
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5B40:				; CODE XREF: sub_6CEC5600+554j
		add	edi, 4
		mov	edx, [edi]
		test	edx, edx
		jz	short loc_6CEC5B56

loc_6CEC5B49:				; CODE XREF: sub_6CEC5600+53Aj
		mov	ecx, ebp
		mov	eax, ebx
		call	sub_6CEC54D0
		test	eax, eax
		jz	short loc_6CEC5B40

loc_6CEC5B56:				; CODE XREF: sub_6CEC5600+547j
		mov	esi, eax
		jmp	loc_6CEC59D8
; ---------------------------------------------------------------------------

loc_6CEC5B5D:				; CODE XREF: sub_6CEC5600+19Aj
		mov	ecx, edi
		mov	eax, ebp
		xor	esi, esi
		jmp	loc_6CEC585D
; ---------------------------------------------------------------------------

loc_6CEC5B68:				; CODE XREF: sub_6CEC5600+350j
		and	ecx, 7FFh
		mov	[ebx+10h], ecx
		jmp	loc_6CEC59AC
; ---------------------------------------------------------------------------

loc_6CEC5B76:				; CODE XREF: sub_6CEC5600+18Bj
		mov	edx, [esp+5Ch+var_4C]
		mov	ecx, ebp
		mov	eax, ebx
		call	sub_6CEC4D70
		jmp	loc_6CEC5B01
; ---------------------------------------------------------------------------

loc_6CEC5B88:				; CODE XREF: sub_6CEC5600+159j
					; sub_6CEC5600+26Dj
		call	abort
sub_6CEC5600	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. __deregister_frame_info_bases

; =============== S U B	R O U T	I N E =======================================


		public __deregister_frame_info_bases
__deregister_frame_info_bases proc near	; CODE XREF: __deregister_frame_info+6j
					; __deregister_frame+14p

hHandle		= dword	ptr -1Ch
dwMilliseconds	= dword	ptr -18h
lpPreviousCount	= dword	ptr -14h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jnz	short loc_6CEC5BA5

loc_6CEC5B9D:				; CODE XREF: __deregister_frame_info_bases+19j
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC5BA5:				; CODE XREF: __deregister_frame_info_bases+Bj
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6CEC5B9D
		call	sub_6CEC4E40
		mov	edx, dword_6CEC9030
		test	edx, edx
		jnz	loc_6CEC5C47

loc_6CEC5BBE:				; CODE XREF: __deregister_frame_info_bases+C8j
					; __deregister_frame_info_bases+E9j ...
		mov	ebx, ds:dword_6CECB00C
		test	ebx, ebx
		jz	short loc_6CEC5BE3
		cmp	[ebx+0Ch], esi
		mov	eax, offset dword_6CECB00C
		jnz	short loc_6CEC5BD9
		jmp	short loc_6CEC5C40
; ---------------------------------------------------------------------------

loc_6CEC5BD4:				; CODE XREF: __deregister_frame_info_bases+51j
		cmp	[ebx+0Ch], esi
		jz	short loc_6CEC5C40

loc_6CEC5BD9:				; CODE XREF: __deregister_frame_info_bases+40j
		lea	eax, [ebx+14h]
		mov	ebx, [ebx+14h]
		test	ebx, ebx
		jnz	short loc_6CEC5BD4

loc_6CEC5BE3:				; CODE XREF: __deregister_frame_info_bases+36j
		mov	ebx, ds:dword_6CECB010
		test	ebx, ebx
		jz	short loc_6CEC5C20
		mov	edx, offset dword_6CECB010
		jmp	short loc_6CEC5C0F
; ---------------------------------------------------------------------------

loc_6CEC5BF4:				; CODE XREF: __deregister_frame_info_bases+83j
		mov	eax, [ebx+0Ch]
		cmp	[eax], esi
		jz	loc_6CEC5CD7

loc_6CEC5BFF:				; CODE XREF: __deregister_frame_info_bases+88j
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	loc_6CEC5CD0
		lea	edx, [ebx+14h]
		mov	ebx, eax

loc_6CEC5C0F:				; CODE XREF: __deregister_frame_info_bases+62j
		test	byte ptr [ebx+10h], 1
		jnz	short loc_6CEC5BF4
		cmp	[ebx+0Ch], esi
		jnz	short loc_6CEC5BFF
		mov	eax, [ebx+14h]
		mov	[edx], eax
		nop

loc_6CEC5C20:				; CODE XREF: __deregister_frame_info_bases+5Bj
					; __deregister_frame_info_bases+B5j ...
		mov	eax, dword_6CEC9030
		test	eax, eax
		jnz	short loc_6CEC5C93

loc_6CEC5C29:				; CODE XREF: __deregister_frame_info_bases+114j
					; __deregister_frame_info_bases+137j
		test	ebx, ebx
		jz	loc_6CEC5CEC
		mov	eax, ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5C40:				; CODE XREF: __deregister_frame_info_bases+42j
					; __deregister_frame_info_bases+47j
		mov	edx, [ebx+14h]
		mov	[eax], edx
		jmp	short loc_6CEC5C20
; ---------------------------------------------------------------------------

loc_6CEC5C47:				; CODE XREF: __deregister_frame_info_bases+28j
		mov	[esp+1Ch+hHandle], offset dword_6CECB014
		call	sub_6CEC8040
		sub	esp, 4
		test	eax, eax
		jz	loc_6CEC5BBE
		mov	eax, ds:hHandle
		mov	[esp+1Ch+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
		mov	[esp+1Ch+hHandle], eax ; hHandle
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	loc_6CEC5BBE
		mov	[esp+1Ch+hHandle], offset dword_6CECB014
		call	sub_6CEC7FC0
		sub	esp, 4
		jmp	loc_6CEC5BBE
; ---------------------------------------------------------------------------

loc_6CEC5C93:				; CODE XREF: __deregister_frame_info_bases+97j
		mov	[esp+1Ch+hHandle], offset dword_6CECB014
		call	sub_6CEC7FC0
		sub	esp, 4
		test	eax, eax
		js	short loc_6CEC5C29
		mov	eax, ds:hHandle
		mov	[esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+1Ch+dwMilliseconds], 1 ; lReleaseCount
		mov	[esp+1Ch+hHandle], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		jmp	loc_6CEC5C29
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5CD0:				; CODE XREF: __deregister_frame_info_bases+74j
		xor	ebx, ebx
		jmp	loc_6CEC5C20
; ---------------------------------------------------------------------------

loc_6CEC5CD7:				; CODE XREF: __deregister_frame_info_bases+69j
		mov	eax, [ebx+14h]
		mov	[edx], eax
		mov	eax, [ebx+0Ch]
		mov	[esp+1Ch+hHandle], eax ; Memory
		call	free
		jmp	loc_6CEC5C20
; ---------------------------------------------------------------------------

loc_6CEC5CEC:				; CODE XREF: __deregister_frame_info_bases+9Bj
		call	abort
__deregister_frame_info_bases endp

; ---------------------------------------------------------------------------
		jmp	short __deregister_frame_info
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. __deregister_frame_info

; =============== S U B	R O U T	I N E =======================================


		public __deregister_frame_info
__deregister_frame_info	proc near	; CODE XREF: .text:6CEC5CF1j
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	__deregister_frame_info_bases
__deregister_frame_info	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. __deregister_frame

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _deregister_frame(void *Memory)
		public __deregister_frame
__deregister_frame proc	near

var_1C		= dword	ptr -1Ch
Memory		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+Memory]
		mov	edx, [eax]
		test	edx, edx
		jnz	short loc_6CEC5D21
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC5D21:				; CODE XREF: __deregister_frame+Bj
		mov	[esp+1Ch+var_1C], eax
		call	__deregister_frame_info_bases
		mov	[esp+1Ch+Memory], eax ;	Memory
		add	esp, 1Ch
		jmp	free
__deregister_frame endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. _Unwind_Find_FDE

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_Find_FDE
_Unwind_Find_FDE proc near

hSemaphore	= dword	ptr -3Ch
lReleaseCount	= dword	ptr -38h
lpPreviousCount	= dword	ptr -34h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		call	sub_6CEC4E40
		mov	ebx, dword_6CEC9030
		test	ebx, ebx
		jnz	loc_6CEC5E90

loc_6CEC5D62:				; CODE XREF: _Unwind_Find_FDE+161j
					; _Unwind_Find_FDE+182j ...
		mov	esi, ds:dword_6CECB010
		test	esi, esi
		jz	short loc_6CEC5D84
		cmp	edi, [esi]
		jb	short loc_6CEC5D7D
		jmp	loc_6CEC5E36
; ---------------------------------------------------------------------------

loc_6CEC5D75:				; CODE XREF: _Unwind_Find_FDE+42j
		cmp	[esi], edi
		jbe	loc_6CEC5E36

loc_6CEC5D7D:				; CODE XREF: _Unwind_Find_FDE+2Ej
		mov	esi, [esi+14h]
		test	esi, esi
		jnz	short loc_6CEC5D75

loc_6CEC5D84:				; CODE XREF: _Unwind_Find_FDE+2Aj
					; _Unwind_Find_FDE+95j	...
		mov	esi, ds:dword_6CECB00C
		test	esi, esi
		jz	loc_6CEC5EEE
		mov	eax, [esi+14h]
		mov	edx, edi
		mov	ds:dword_6CECB00C, eax
		mov	eax, esi
		call	sub_6CEC5600
		mov	edx, offset dword_6CECB010
		mov	ebx, eax
		mov	eax, ds:dword_6CECB010
		test	eax, eax
		jz	short loc_6CEC5DCE
		mov	ecx, [esi]
		cmp	ecx, [eax]
		jbe	short loc_6CEC5DC4
		jmp	short loc_6CEC5DCE
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5DC0:				; CODE XREF: _Unwind_Find_FDE+8Cj
		cmp	[eax], ecx
		jb	short loc_6CEC5DCE

loc_6CEC5DC4:				; CODE XREF: _Unwind_Find_FDE+77j
		lea	edx, [eax+14h]
		mov	eax, [eax+14h]
		test	eax, eax
		jnz	short loc_6CEC5DC0

loc_6CEC5DCE:				; CODE XREF: _Unwind_Find_FDE+71j
					; _Unwind_Find_FDE+79j	...
		test	ebx, ebx
		mov	[esi+14h], eax
		mov	[edx], esi
		jz	short loc_6CEC5D84

loc_6CEC5DD7:				; CODE XREF: _Unwind_Find_FDE+1B0j
		mov	ecx, dword_6CEC9030
		test	ecx, ecx
		jnz	short loc_6CEC5E53

loc_6CEC5DE1:				; CODE XREF: _Unwind_Find_FDE+111j
					; _Unwind_Find_FDE+124j ...
		test	ebx, ebx
		jz	short loc_6CEC5E2C
		mov	eax, [esi+4]
		mov	[ebp+0], eax
		mov	eax, [esi+8]
		mov	[ebp+4], eax
		movzx	eax, word ptr [esi+10h]
		shr	ax, 3
		test	byte ptr [esi+10h], 4
		movzx	eax, al
		jnz	loc_6CEC5EDC

loc_6CEC5E06:				; CODE XREF: _Unwind_Find_FDE+1A9j
		movzx	edi, al
		mov	edx, esi
		mov	eax, edi
		call	sub_6CEC4F00
		lea	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+hSemaphore], edx
		lea	ecx, [ebx+8]
		mov	edx, eax
		mov	eax, edi
		call	sub_6CEC4F50
		mov	eax, [esp+3Ch+var_20]
		mov	[ebp+8], eax

loc_6CEC5E2C:				; CODE XREF: _Unwind_Find_FDE+A3j
		add	esp, 2Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC5E36:				; CODE XREF: _Unwind_Find_FDE+30j
					; _Unwind_Find_FDE+37j
		mov	edx, edi
		mov	eax, esi
		call	sub_6CEC5600
		test	eax, eax
		mov	ebx, eax
		jz	loc_6CEC5D84
		mov	ecx, dword_6CEC9030
		test	ecx, ecx
		jz	short loc_6CEC5DE1

loc_6CEC5E53:				; CODE XREF: _Unwind_Find_FDE+9Fj
		mov	[esp+3Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC7FC0
		sub	esp, 4
		test	eax, eax
		js	loc_6CEC5DE1
		mov	eax, ds:hHandle
		mov	[esp+3Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+3Ch+lReleaseCount], 1 ; lReleaseCount
		mov	[esp+3Ch+hSemaphore], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		jmp	loc_6CEC5DE1
; ---------------------------------------------------------------------------

loc_6CEC5E90:				; CODE XREF: _Unwind_Find_FDE+1Cj
		mov	[esp+3Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC8040
		sub	esp, 4
		test	eax, eax
		jz	loc_6CEC5D62
		mov	eax, ds:hHandle
		mov	[esp+3Ch+lReleaseCount], 0FFFFFFFFh ; dwMilliseconds
		mov	[esp+3Ch+hSemaphore], eax ; hHandle
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	loc_6CEC5D62
		mov	[esp+3Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC7FC0
		sub	esp, 4
		jmp	loc_6CEC5D62
; ---------------------------------------------------------------------------

loc_6CEC5EDC:				; CODE XREF: _Unwind_Find_FDE+C0j
		mov	eax, ebx
		sub	eax, [ebx+4]
		add	eax, 4
		call	sub_6CEC50A0
		jmp	loc_6CEC5E06
; ---------------------------------------------------------------------------

loc_6CEC5EEE:				; CODE XREF: _Unwind_Find_FDE+4Cj
		xor	ebx, ebx
		jmp	loc_6CEC5DD7
_Unwind_Find_FDE endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  85. __register_frame_info_table_bases

; =============== S U B	R O U T	I N E =======================================


		public __register_frame_info_table_bases
__register_frame_info_table_bases proc near ; CODE XREF: __register_frame_info_table+22p

hSemaphore	= dword	ptr -1Ch
lReleaseCount	= dword	ptr -18h
lpPreviousCount	= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	eax, [esp+1Ch+arg_8]
		mov	[ebx+4], eax
		mov	eax, [esp+1Ch+arg_C]
		mov	[ebx+8], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	dword ptr [ebx+10h], 0
		mov	byte ptr [ebx+10h], 2
		or	word ptr [ebx+10h], 7F8h
		mov	[ebx+0Ch], eax
		call	sub_6CEC4E40
		mov	edx, dword_6CEC9030
		test	edx, edx
		jnz	short loc_6CEC5F56
		mov	eax, ds:dword_6CECB00C
		mov	[ebx+14h], eax
		mov	ds:dword_6CECB00C, ebx

loc_6CEC5F51:				; CODE XREF: __register_frame_info_table_bases+7Ej
					; __register_frame_info_table_bases+91j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC5F56:				; CODE XREF: __register_frame_info_table_bases+41j
		mov	[esp+1Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC8040
		sub	esp, 4
		test	eax, eax
		jnz	short loc_6CEC5FC0

loc_6CEC5F69:				; CODE XREF: __register_frame_info_table_bases+DBj
					; __register_frame_info_table_bases+ECj
		mov	eax, ds:dword_6CECB00C
		mov	[ebx+14h], eax
		mov	eax, dword_6CEC9030
		mov	ds:dword_6CECB00C, ebx
		test	eax, eax
		jz	short loc_6CEC5F51
		mov	[esp+1Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC7FC0
		sub	esp, 4
		test	eax, eax
		js	short loc_6CEC5F51
		mov	eax, ds:hHandle
		mov	[esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+1Ch+lReleaseCount], 1 ; lReleaseCount
		mov	[esp+1Ch+hSemaphore], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC5FC0:				; CODE XREF: __register_frame_info_table_bases+67j
		mov	eax, ds:hHandle
		mov	[esp+1Ch+lReleaseCount], 0FFFFFFFFh ; dwMilliseconds
		mov	[esp+1Ch+hSemaphore], eax ; hHandle
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	short loc_6CEC5F69
		mov	[esp+1Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC7FC0
		sub	esp, 4
		jmp	loc_6CEC5F69
__register_frame_info_table_bases endp

; ---------------------------------------------------------------------------
		jmp	short __register_frame_info_table
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  84. __register_frame_info_table

; =============== S U B	R O U T	I N E =======================================


		public __register_frame_info_table
__register_frame_info_table proc near	; CODE XREF: .text:6CEC5FF1j
					; __register_frame_table+1Ap

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	__register_frame_info_table_bases
		add	esp, 1Ch
		retn
__register_frame_info_table endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  86. __register_frame_table

; =============== S U B	R O U T	I N E =======================================


		public __register_frame_table
__register_frame_table proc near

Size		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+Size],	18h ; Size
		call	malloc
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+Size],	eax
		call	__register_frame_info_table
		add	esp, 1Ch
		retn
__register_frame_table endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  83. __register_frame_info_bases

; =============== S U B	R O U T	I N E =======================================


		public __register_frame_info_bases
__register_frame_info_bases proc near	; CODE XREF: __register_frame_info+22p

hSemaphore	= dword	ptr -1Ch
lReleaseCount	= dword	ptr -18h
lpPreviousCount	= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_6CEC6076
		mov	edx, [eax]
		test	edx, edx
		jnz	short loc_6CEC6080

loc_6CEC6076:				; CODE XREF: __register_frame_info_bases+Ej
					; __register_frame_info_bases+8Ej ...
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6080:				; CODE XREF: __register_frame_info_bases+14j
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	edx, [esp+1Ch+arg_8]
		mov	[ebx+4], edx
		mov	edx, [esp+1Ch+arg_C]
		mov	[ebx+0Ch], eax
		mov	dword ptr [ebx+10h], 0
		mov	word ptr [ebx+10h], 7F8h
		mov	[ebx+8], edx
		call	sub_6CEC4E40
		mov	eax, dword_6CEC9030
		test	eax, eax
		jnz	short loc_6CEC60C5
		mov	eax, ds:dword_6CECB00C
		mov	[ebx+14h], eax
		mov	ds:dword_6CECB00C, ebx
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC60C5:				; CODE XREF: __register_frame_info_bases+50j
		mov	[esp+1Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC8040
		sub	esp, 4
		test	eax, eax
		jnz	short loc_6CEC6130

loc_6CEC60D8:				; CODE XREF: __register_frame_info_bases+EBj
					; __register_frame_info_bases+FCj
		mov	ecx, dword_6CEC9030
		mov	eax, ds:dword_6CECB00C
		test	ecx, ecx
		mov	[ebx+14h], eax
		mov	ds:dword_6CECB00C, ebx
		jz	short loc_6CEC6076
		mov	[esp+1Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC7FC0
		sub	esp, 4
		test	eax, eax
		js	loc_6CEC6076
		mov	eax, ds:hHandle
		mov	[esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+1Ch+lReleaseCount], 1 ; lReleaseCount
		mov	[esp+1Ch+hSemaphore], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		jmp	loc_6CEC6076
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6130:				; CODE XREF: __register_frame_info_bases+76j
		mov	eax, ds:hHandle
		mov	[esp+1Ch+lReleaseCount], 0FFFFFFFFh ; dwMilliseconds
		mov	[esp+1Ch+hSemaphore], eax ; hHandle
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	short loc_6CEC60D8
		mov	[esp+1Ch+hSemaphore], offset dword_6CECB014
		call	sub_6CEC7FC0
		sub	esp, 4
		jmp	loc_6CEC60D8
__register_frame_info_bases endp

; ---------------------------------------------------------------------------
		jmp	short __register_frame_info
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  82. __register_frame_info

; =============== S U B	R O U T	I N E =======================================


		public __register_frame_info
__register_frame_info proc near		; CODE XREF: .text:6CEC6161j
					; __register_frame+21p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	__register_frame_info_bases
		add	esp, 1Ch
		retn
__register_frame_info endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  81. __register_frame

; =============== S U B	R O U T	I N E =======================================


		public __register_frame
__register_frame proc near

Size		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_6CEC61C6
		mov	[esp+1Ch+Size],	18h ; Size
		call	malloc
		mov	[esp+1Ch+Size],	ebx
		mov	[esp+1Ch+var_18], eax
		call	__register_frame_info

loc_6CEC61C6:				; CODE XREF: __register_frame+Cj
		add	esp, 18h
		pop	ebx
		retn
__register_frame endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. _Unwind_GetGR

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_GetGR
_Unwind_GetGR	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	eax, [eax]
		mov	eax, [eax+edx*4+8]
		retn
_Unwind_GetGR	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. _Unwind_GetCFA

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_GetCFA
_Unwind_GetCFA	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax]
		xor	eax, eax
		test	edx, edx
		jz	short locret_6CEC61EF
		mov	eax, [edx+28h]

locret_6CEC61EF:			; CODE XREF: _Unwind_GetCFA+Aj
		rep retn
_Unwind_GetCFA	endp

; ---------------------------------------------------------------------------
		jmp	short _Unwind_SetGR
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. _Unwind_SetGR

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_SetGR
_Unwind_SetGR	proc near		; CODE XREF: .text:6CEC61F1j
					; __gcc_personality_sj0+13Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	eax, [eax]
		mov	[eax+edx*4+8], ecx
		retn
_Unwind_SetGR	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. _Unwind_GetIP

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_GetIP
_Unwind_GetIP	proc near		; CODE XREF: __gcc_personality_sj0+DDp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+4]
		add	eax, 1
		retn
_Unwind_GetIP	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. _Unwind_GetIPInfo

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_GetIPInfo
_Unwind_GetIPInfo proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	dword ptr [eax], 0
		mov	eax, [esp+arg_0]
		mov	edx, [eax]
		xor	eax, eax
		test	edx, edx
		jz	short locret_6CEC624C
		mov	eax, [edx+4]
		add	eax, 1

locret_6CEC624C:			; CODE XREF: _Unwind_GetIPInfo+14j
		rep retn
_Unwind_GetIPInfo endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. _Unwind_SetIP

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_SetIP
_Unwind_SetIP	proc near		; CODE XREF: __gcc_personality_sj0+15Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	eax, [eax]
		sub	edx, 1
		mov	[eax+4], edx
		retn
_Unwind_SetIP	endp

; ---------------------------------------------------------------------------
		jmp	short _Unwind_GetLanguageSpecificData
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. _Unwind_GetLanguageSpecificData

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_GetLanguageSpecificData
_Unwind_GetLanguageSpecificData	proc near ; CODE XREF: .text:6CEC6261j
					; __gcc_personality_sj0+37p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+1Ch]
		retn
_Unwind_GetLanguageSpecificData	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. _Unwind_GetRegionStart

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_GetRegionStart
_Unwind_GetRegionStart proc near	; CODE XREF: __gcc_personality_sj0+49p
					; __gcc_personality_sj0+1CDp
		xor	eax, eax
		retn
_Unwind_GetRegionStart endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. _Unwind_FindEnclosingFunction

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_FindEnclosingFunction
_Unwind_FindEnclosingFunction proc near
		xor	eax, eax
		retn
_Unwind_FindEnclosingFunction endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. _Unwind_GetDataRelBase

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_GetDataRelBase
_Unwind_GetDataRelBase proc near	; CODE XREF: __gcc_personality_sj0+90p
		xor	eax, eax
		retn
_Unwind_GetDataRelBase endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. _Unwind_GetTextRelBase

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_GetTextRelBase
_Unwind_GetTextRelBase proc near	; CODE XREF: __gcc_personality_sj0+1C0p
		xor	eax, eax
		retn
_Unwind_GetTextRelBase endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. _Unwind_DeleteException

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_DeleteException
_Unwind_DeleteException	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx+8]
		test	eax, eax
		jz	short loc_6CEC62DB
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], 1
		call	eax

loc_6CEC62DB:				; CODE XREF: _Unwind_DeleteException+Cj
		add	esp, 1Ch
		retn
_Unwind_DeleteException	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC62E0	proc near		; CODE XREF: sub_6CEC6320:loc_6CEC6378p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		call	ds:TlsAlloc
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6CEC6314
		mov	ds:dwTlsIndex, eax
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], eax
		call	sub_6CEC7FE0

loc_6CEC6303:				; CODE XREF: sub_6CEC62E0+3Aj
		test	eax, eax
		setz	al
		movzx	eax, al
		mov	dword_6CEC900C,	eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC6314:				; CODE XREF: sub_6CEC62E0+Cj
		call	ds:GetLastError
		jmp	short loc_6CEC6303
sub_6CEC62E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC6320	proc near		; CODE XREF: sub_6CEC6420:loc_6CEC6525p
					; sub_6CEC6540:loc_6CEC6592p ...

dwMilliseconds	= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	ecx, dword_6CEC9030
		test	ecx, ecx
		jz	short loc_6CEC6340
		cmp	dword_6CEC9010,	0
		jz	short loc_6CEC634E

loc_6CEC6336:				; CODE XREF: sub_6CEC6320+46j
					; sub_6CEC6320+67j
		cmp	dword_6CEC900C,	0
		jns	short loc_6CEC634A
		nop

loc_6CEC6340:				; CODE XREF: sub_6CEC6320+Bj
		mov	dword_6CEC900C,	0

loc_6CEC634A:				; CODE XREF: sub_6CEC6320+1Dj
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC634E:				; CODE XREF: sub_6CEC6320+14j
		mov	[esp+1Ch+dwMilliseconds], offset dword_6CEC9014
		call	sub_6CEC8040
		test	eax, eax
		push	edx
		jz	short loc_6CEC6378

loc_6CEC635F:				; CODE XREF: sub_6CEC6320+56j
		cmp	dword_6CEC9010,	0
		jnz	short loc_6CEC6336
		mov	[esp+1Ch+dwMilliseconds], 0 ; dwMilliseconds
		call	ds:Sleep
		push	eax
		jmp	short loc_6CEC635F
; ---------------------------------------------------------------------------

loc_6CEC6378:				; CODE XREF: sub_6CEC6320+3Dj
		call	sub_6CEC62E0
		mov	dword_6CEC9010,	1
		jmp	short loc_6CEC6336
sub_6CEC6320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC6390	proc near		; CODE XREF: _Unwind_SjLj_RaiseException+CCp
					; _Unwind_SjLj_Resume+40p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h

		push	ebp
		mov	ebp, eax
		push	edi
		mov	edi, edx
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [edx]
		jmp	short loc_6CEC63E0
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC63A0:				; CODE XREF: sub_6CEC6390+6Ej
		test	edx, edx
		jz	short loc_6CEC63D6
		mov	[esp+3Ch+var_28], edi
		mov	eax, esi
		mov	[esp+3Ch+var_2C], ebp
		mov	ecx, [ebp+0]
		or	eax, 2
		mov	ebx, [ebp+4]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], 1
		mov	[esp+3Ch+var_34], ecx
		mov	[esp+3Ch+var_30], ebx
		call	edx
		cmp	eax, 7
		jz	short loc_6CEC6405
		cmp	eax, 8
		jnz	short loc_6CEC6400

loc_6CEC63D6:				; CODE XREF: sub_6CEC6390+12j
		test	esi, esi
		jnz	short loc_6CEC640D
		mov	eax, [edi]
		mov	eax, [eax]
		mov	[edi], eax

loc_6CEC63E0:				; CODE XREF: sub_6CEC6390+Dj
		xor	edx, edx
		test	eax, eax
		mov	ecx, 5
		jz	short loc_6CEC63F0
		mov	edx, [eax+18h]
		xor	cl, cl

loc_6CEC63F0:				; CODE XREF: sub_6CEC6390+59j
		cmp	eax, [ebp+10h]
		setz	al
		movzx	esi, al
		shl	esi, 2
		test	ecx, ecx
		jz	short loc_6CEC63A0

loc_6CEC6400:				; CODE XREF: sub_6CEC6390+44j
		mov	eax, 2

loc_6CEC6405:				; CODE XREF: sub_6CEC6390+3Fj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC640D:				; CODE XREF: sub_6CEC6390+48j
		call	abort
sub_6CEC6390	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC6420	proc near		; CODE XREF: _Unwind_SjLj_Resume_or_Rethrow+54p
					; _Unwind_SjLj_Resume+58p ...

dwTlsIndex	= dword	ptr -4Ch
lpTlsValue	= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 3Ch
		mov	eax, [eax+0Ch]
		mov	edx, [ebx+10h]
		mov	[esp+4Ch+var_20], eax
		mov	eax, [esi]
		mov	[esp+4Ch+var_24], edx
		jmp	short loc_6CEC644C
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6440:				; CODE XREF: sub_6CEC6420+C3j
		mov	ds:dword_6CECB01C, edi

loc_6CEC6446:				; CODE XREF: sub_6CEC6420+E0j
					; sub_6CEC6420+F0j
		mov	eax, [esi]
		mov	eax, [eax]
		mov	[esi], eax

loc_6CEC644C:				; CODE XREF: sub_6CEC6420+1Bj
		test	eax, eax
		jz	loc_6CEC6515
		mov	ebp, [eax+18h]
		xor	edi, edi
		mov	eax, 0Ah

loc_6CEC645E:				; CODE XREF: sub_6CEC6420+100j
		mov	edx, [esp+4Ch+var_24]
		mov	ecx, [ebx+4]
		mov	[esp+4Ch+var_38], esi
		mov	[esp+4Ch+var_3C], ebx
		mov	[esp+4Ch+var_34], edx
		mov	edx, [ebx]
		mov	[esp+4Ch+var_40], ecx
		mov	[esp+4Ch+lpTlsValue], eax
		mov	[esp+4Ch+dwTlsIndex], 1
		mov	[esp+4Ch+var_44], edx
		call	[esp+4Ch+var_20]
		test	eax, eax
		jnz	loc_6CEC6531
		cmp	edi, 5
		jz	loc_6CEC6536
		test	ebp, ebp
		lea	esi, [esi+0]
		jz	short loc_6CEC64D4
		mov	eax, [ebx]
		mov	edx, [ebx+4]
		mov	[esp+4Ch+var_38], esi
		mov	[esp+4Ch+var_3C], ebx
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+lpTlsValue], 0Ah
		mov	[esp+4Ch+dwTlsIndex], 1
		call	ebp
		cmp	eax, 7
		mov	edi, eax
		jz	short loc_6CEC6536
		cmp	eax, 8
		jnz	short loc_6CEC6531

loc_6CEC64D4:				; CODE XREF: sub_6CEC6420+80j
		mov	eax, [esi]
		mov	edi, [eax]
		mov	eax, dword_6CEC900C
		test	eax, eax
		js	short loc_6CEC6525

loc_6CEC64E1:				; CODE XREF: sub_6CEC6420+10Fj
		test	eax, eax
		jz	loc_6CEC6440
		mov	eax, ds:dwTlsIndex
		mov	[esp+4Ch+lpTlsValue], edi ; lpTlsValue
		mov	[esp+4Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jnz	loc_6CEC6446
		call	ds:GetLastError
		lea	esi, [esi+0]
		jmp	loc_6CEC6446
; ---------------------------------------------------------------------------

loc_6CEC6515:				; CODE XREF: sub_6CEC6420+2Ej
		xor	ebp, ebp
		mov	edi, 5
		mov	al, 1Ah
		xchg	ax, ax
		jmp	loc_6CEC645E
; ---------------------------------------------------------------------------

loc_6CEC6525:				; CODE XREF: sub_6CEC6420+BFj
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	short loc_6CEC64E1
; ---------------------------------------------------------------------------

loc_6CEC6531:				; CODE XREF: sub_6CEC6420+6Cj
					; sub_6CEC6420+B2j
		mov	edi, 2

loc_6CEC6536:				; CODE XREF: sub_6CEC6420+75j
					; sub_6CEC6420+ADj
		add	esp, 3Ch
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6CEC6420	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6CEC6540	proc near		; CODE XREF: _Unwind_SjLj_RaiseException+DCp
					; _Unwind_SjLj_Resume_or_Rethrow+A6p ...

dwTlsIndex	= dword	ptr -18h
lpTlsValue	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		mov	ebx, edx
		sub	esp, 10h
		mov	eax, dword_6CEC900C
		mov	esi, [edx]
		test	eax, eax
		js	short loc_6CEC6592

loc_6CEC6555:				; CODE XREF: sub_6CEC6540+5Cj
		test	eax, eax
		jnz	short loc_6CEC6570
		mov	ds:dword_6CECB01C, esi

loc_6CEC655F:				; CODE XREF: sub_6CEC6540+47j
					; sub_6CEC6540+50j
		mov	edx, [ebx]
		lea	eax, [edx+20h]
		mov	ecx, [eax+4]
		mov	ebp, [edx+20h]
		mov	esp, [eax+8]
		jmp	ecx
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6570:				; CODE XREF: sub_6CEC6540+17j
		mov	[esp+18h+lpTlsValue], esi ; lpTlsValue
		mov	eax, ds:dwTlsIndex
		mov	[esp+18h+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jnz	short loc_6CEC655F
		call	ds:GetLastError
		nop
		jmp	short loc_6CEC655F
; ---------------------------------------------------------------------------

loc_6CEC6592:				; CODE XREF: sub_6CEC6540+13j
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	short loc_6CEC6555
sub_6CEC6540	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. _Unwind_Backtrace

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_Backtrace
_Unwind_Backtrace proc near

dwTlsIndex	= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, dword_6CEC900C
		mov	edi, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		test	eax, eax
		js	loc_6CEC6640

loc_6CEC65BC:				; CODE XREF: _Unwind_Backtrace+AAj
		test	eax, eax
		jnz	short loc_6CEC6610
		mov	eax, ds:dword_6CECB01C

loc_6CEC65C5:				; CODE XREF: _Unwind_Backtrace+9Aj
		mov	[esp+3Ch+var_20], eax
		lea	esi, [esp+3Ch+var_20]
		jmp	short loc_6CEC65DF
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC65D0:				; CODE XREF: _Unwind_Backtrace+52j
		cmp	ebx, 5
		jz	short loc_6CEC6600
		mov	eax, [esp+3Ch+var_20]
		mov	eax, [eax]
		mov	[esp+3Ch+var_20], eax

loc_6CEC65DF:				; CODE XREF: _Unwind_Backtrace+2Dj
		cmp	eax, 1
		sbb	ebx, ebx
		mov	[esp+3Ch+var_38], ebp
		and	ebx, 5
		mov	[esp+3Ch+dwTlsIndex], esi
		call	edi
		test	eax, eax
		jz	short loc_6CEC65D0
		mov	ebx, 3
		lea	esi, [esi+0]

loc_6CEC6600:				; CODE XREF: _Unwind_Backtrace+33j
		add	esp, 2Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6610:				; CODE XREF: _Unwind_Backtrace+1Ej
		mov	esi, ds:dwTlsIndex
		call	ds:GetLastError
		mov	[esp+3Ch+dwTlsIndex], esi ; dwTlsIndex
		mov	ebx, eax
		call	ds:TlsGetValue
		sub	esp, 4
		mov	esi, eax
		mov	[esp+3Ch+dwTlsIndex], ebx ; dwErrCode
		call	ds:SetLastError
		mov	eax, esi
		sub	esp, 4
		jmp	short loc_6CEC65C5
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6640:				; CODE XREF: _Unwind_Backtrace+16j
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	loc_6CEC65BC
_Unwind_Backtrace endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. _Unwind_SjLj_Unregister

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_SjLj_Unregister
_Unwind_SjLj_Unregister	proc near

dwTlsIndex	= dword	ptr -1Ch
lpTlsValue	= dword	ptr -18h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [eax]
		mov	eax, dword_6CEC900C
		test	eax, eax
		js	short loc_6CEC6696

loc_6CEC6663:				; CODE XREF: _Unwind_SjLj_Unregister+50j
		test	eax, eax
		jnz	short loc_6CEC6672
		mov	ds:dword_6CECB01C, ebx

loc_6CEC666D:				; CODE XREF: _Unwind_SjLj_Unregister+39j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC6672:				; CODE XREF: _Unwind_SjLj_Unregister+15j
		mov	eax, ds:dwTlsIndex
		mov	[esp+1Ch+lpTlsValue], ebx ; lpTlsValue
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jnz	short loc_6CEC666D
		mov	eax, ds:GetLastError
		add	esp, 18h
		pop	ebx
		jmp	eax
; ---------------------------------------------------------------------------

loc_6CEC6696:				; CODE XREF: _Unwind_SjLj_Unregister+11j
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	short loc_6CEC6663
_Unwind_SjLj_Unregister	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. _Unwind_SjLj_Register

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Unwind_SjLj_Register(LPVOID)
		public _Unwind_SjLj_Register
_Unwind_SjLj_Register proc near

dwTlsIndex	= dword	ptr -2Ch
lpTlsValue	= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, dword_6CEC900C
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_8], edi
		test	eax, eax
		mov	[esp+2Ch+var_4], ebp
		js	loc_6CEC6760

loc_6CEC66D4:				; CODE XREF: _Unwind_SjLj_Register+BAj
		test	eax, eax
		jnz	short loc_6CEC6700
		mov	eax, ds:dword_6CECB01C
		mov	[ebx], eax
		mov	ds:dword_6CECB01C, ebx

loc_6CEC66E5:				; CODE XREF: _Unwind_SjLj_Register+93j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6700:				; CODE XREF: _Unwind_SjLj_Register+26j
		mov	esi, ds:GetLastError
		mov	ebp, ds:dwTlsIndex
		call	esi ; GetLastError
		mov	[esp+2Ch+dwTlsIndex], ebp ; dwTlsIndex
		mov	edi, eax
		call	ds:TlsGetValue
		sub	esp, 4
		mov	ebp, eax
		mov	[esp+2Ch+dwTlsIndex], edi ; dwErrCode
		call	ds:SetLastError
		mov	eax, ds:dwTlsIndex
		mov	[ebx], ebp
		sub	esp, 4
		mov	[esp+2Ch+lpTlsValue], ebx ; lpTlsValue
		mov	[esp+2Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jnz	short loc_6CEC66E5
		mov	edx, esi
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		jmp	edx
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6760:				; CODE XREF: _Unwind_SjLj_Register+1Ej
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	loc_6CEC66D4
_Unwind_SjLj_Register endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. _Unwind_SjLj_RaiseException

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_SjLj_RaiseException
_Unwind_SjLj_RaiseException proc near	; CODE XREF: _Unwind_SjLj_Resume_or_Rethrow+1Dp

dwTlsIndex	= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	eax, dword_6CEC900C
		mov	ebx, [esp+3Ch+arg_0]
		test	eax, eax
		js	loc_6CEC685D

loc_6CEC6787:				; CODE XREF: _Unwind_SjLj_RaiseException+F7j
		test	eax, eax
		jnz	short loc_6CEC67F3
		mov	eax, ds:dword_6CECB01C

loc_6CEC6790:				; CODE XREF: _Unwind_SjLj_RaiseException+ADj
		test	eax, eax
		mov	[esp+3Ch+var_10], eax
		mov	[esp+3Ch+var_14], eax
		jz	short loc_6CEC67E7
		lea	esi, [esp+3Ch+var_14]
		jmp	short loc_6CEC67A6
; ---------------------------------------------------------------------------

loc_6CEC67A2:				; CODE XREF: _Unwind_SjLj_RaiseException+75j
		mov	[esp+3Ch+var_14], eax

loc_6CEC67A6:				; CODE XREF: _Unwind_SjLj_RaiseException+30j
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_6CEC67DD
		mov	[esp+3Ch+var_28], esi
		mov	[esp+3Ch+var_2C], ebx
		mov	edx, [ebx]
		mov	ecx, [ebx+4]
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+dwTlsIndex], 1
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_30], ecx
		call	eax
		cmp	eax, 6
		jz	short loc_6CEC6822
		cmp	eax, 8
		jnz	short loc_6CEC6851

loc_6CEC67DD:				; CODE XREF: _Unwind_SjLj_RaiseException+3Bj
		mov	eax, [esp+3Ch+var_14]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6CEC67A2

loc_6CEC67E7:				; CODE XREF: _Unwind_SjLj_RaiseException+2Aj
		mov	eax, 5

loc_6CEC67EC:				; CODE XREF: _Unwind_SjLj_RaiseException+D4j
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6CEC67F3:				; CODE XREF: _Unwind_SjLj_RaiseException+19j
		mov	edi, ds:dwTlsIndex
		call	ds:GetLastError
		mov	[esp+3Ch+dwTlsIndex], edi ; dwTlsIndex
		mov	esi, eax
		call	ds:TlsGetValue
		sub	esp, 4
		mov	edi, eax
		mov	[esp+3Ch+dwTlsIndex], esi ; dwErrCode
		call	ds:SetLastError
		mov	eax, edi
		sub	esp, 4
		jmp	loc_6CEC6790
; ---------------------------------------------------------------------------

loc_6CEC6822:				; CODE XREF: _Unwind_SjLj_RaiseException+66j
		mov	eax, [esp+3Ch+var_14]
		mov	edx, esi
		mov	dword ptr [ebx+0Ch], 0
		mov	[ebx+10h], eax
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_14], eax
		mov	eax, ebx
		call	sub_6CEC6390
		cmp	eax, 7
		jnz	short loc_6CEC67EC
		lea	eax, [esp+3Ch+var_10]
		mov	edx, esi
		call	sub_6CEC6540

loc_6CEC6851:				; CODE XREF: _Unwind_SjLj_RaiseException+6Bj
		add	esp, 30h
		mov	eax, 3
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6CEC685D:				; CODE XREF: _Unwind_SjLj_RaiseException+11j
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	loc_6CEC6787
_Unwind_SjLj_RaiseException endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. _Unwind_SjLj_Resume_or_Rethrow

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public _Unwind_SjLj_Resume_or_Rethrow
_Unwind_SjLj_Resume_or_Rethrow proc near

dwTlsIndex	= dword	ptr -2Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], esi
		mov	[esp+2Ch+var_4], edi
		mov	esi, [ebx+0Ch]
		test	esi, esi
		jnz	short loc_6CEC68A2
		mov	[esp+2Ch+dwTlsIndex], ebx
		call	_Unwind_SjLj_RaiseException
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC68A2:				; CODE XREF: _Unwind_SjLj_Resume_or_Rethrow+18j
		mov	eax, dword_6CEC900C
		test	eax, eax
		js	short loc_6CEC6900

loc_6CEC68AB:				; CODE XREF: _Unwind_SjLj_Resume_or_Rethrow+9Aj
		test	eax, eax
		jnz	short loc_6CEC68D3
		mov	eax, ds:dword_6CECB01C

loc_6CEC68B4:				; CODE XREF: _Unwind_SjLj_Resume_or_Rethrow+8Dj
		lea	esi, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_10], eax
		mov	edx, esi
		mov	[esp+2Ch+var_14], eax
		mov	eax, ebx
		call	sub_6CEC6420
		cmp	eax, 7
		jz	short loc_6CEC6910
		call	abort
; ---------------------------------------------------------------------------

loc_6CEC68D3:				; CODE XREF: _Unwind_SjLj_Resume_or_Rethrow+3Dj
		mov	edi, ds:dwTlsIndex
		call	ds:GetLastError
		mov	[esp+2Ch+dwTlsIndex], edi ; dwTlsIndex
		mov	esi, eax
		call	ds:TlsGetValue
		sub	esp, 4
		mov	edi, eax
		mov	[esp+2Ch+dwTlsIndex], esi ; dwErrCode
		call	ds:SetLastError
		mov	eax, edi
		sub	esp, 4
		jmp	short loc_6CEC68B4
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6900:				; CODE XREF: _Unwind_SjLj_Resume_or_Rethrow+39j
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	short loc_6CEC68AB
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6910:				; CODE XREF: _Unwind_SjLj_Resume_or_Rethrow+5Cj
		lea	eax, [esp+2Ch+var_10]
		mov	edx, esi
		call	sub_6CEC6540
		nop
		lea	esi, [esi+0]
_Unwind_SjLj_Resume_or_Rethrow endp ; sp-analysis failed

; Exported entry  18. _Unwind_SjLj_Resume

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public _Unwind_SjLj_Resume
_Unwind_SjLj_Resume proc near

dwTlsIndex	= dword	ptr -2Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, dword_6CEC900C
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], esi
		mov	[esp+2Ch+var_4], edi
		test	eax, eax
		js	loc_6CEC69C0

loc_6CEC6940:				; CODE XREF: _Unwind_SjLj_Resume+AAj
		test	eax, eax
		jnz	short loc_6CEC6990
		mov	eax, ds:dword_6CECB01C

loc_6CEC6949:				; CODE XREF: _Unwind_SjLj_Resume+9Aj
		mov	edi, [ebx+0Ch]
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_14], eax
		test	edi, edi
		jnz	short loc_6CEC6970
		lea	esi, [esp+2Ch+var_14]
		mov	eax, ebx
		mov	edx, esi
		call	sub_6CEC6390
		cmp	eax, 7
		jz	short loc_6CEC6982

loc_6CEC696A:				; CODE XREF: _Unwind_SjLj_Resume+60j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6970:				; CODE XREF: _Unwind_SjLj_Resume+36j
		lea	esi, [esp+2Ch+var_14]
		mov	eax, ebx
		mov	edx, esi
		call	sub_6CEC6420
		cmp	eax, 7
		jnz	short loc_6CEC696A

loc_6CEC6982:				; CODE XREF: _Unwind_SjLj_Resume+48j
		lea	eax, [esp+2Ch+var_10]
		mov	edx, esi
		call	sub_6CEC6540
		lea	esi, [esi+0]

loc_6CEC6990:				; CODE XREF: _Unwind_SjLj_Resume+22j
		mov	edi, ds:dwTlsIndex
		call	ds:GetLastError
		mov	[esp+2Ch+dwTlsIndex], edi ; dwTlsIndex
		mov	esi, eax
		call	ds:TlsGetValue
		sub	esp, 4
		mov	edi, eax
		mov	[esp+2Ch+dwTlsIndex], esi ; dwErrCode
		call	ds:SetLastError
		mov	eax, edi
		sub	esp, 4
		jmp	short loc_6CEC6949
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC69C0:				; CODE XREF: _Unwind_SjLj_Resume+1Aj
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	loc_6CEC6940
_Unwind_SjLj_Resume endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. _Unwind_SjLj_ForcedUnwind

; =============== S U B	R O U T	I N E =======================================


		public _Unwind_SjLj_ForcedUnwind
_Unwind_SjLj_ForcedUnwind proc near

dwTlsIndex	= dword	ptr -2Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, dword_6CEC900C
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], esi
		mov	[esp+2Ch+var_4], edi
		test	eax, eax
		js	short loc_6CEC6A60

loc_6CEC69EC:				; CODE XREF: _Unwind_SjLj_ForcedUnwind+9Aj
		test	eax, eax
		jnz	short loc_6CEC6A30
		mov	eax, ds:dword_6CECB01C

loc_6CEC69F5:				; CODE XREF: _Unwind_SjLj_ForcedUnwind+8Aj
		mov	[esp+2Ch+var_10], eax
		lea	esi, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_14], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, esi
		mov	[ebx+0Ch], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[ebx+10h], eax
		mov	eax, ebx
		call	sub_6CEC6420
		cmp	eax, 7
		jz	short loc_6CEC6A6C
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6A30:				; CODE XREF: _Unwind_SjLj_ForcedUnwind+1Ej
		mov	edi, ds:dwTlsIndex
		call	ds:GetLastError
		mov	[esp+2Ch+dwTlsIndex], edi ; dwTlsIndex
		mov	esi, eax
		call	ds:TlsGetValue
		sub	esp, 4
		mov	edi, eax
		mov	[esp+2Ch+dwTlsIndex], esi ; dwErrCode
		call	ds:SetLastError
		mov	eax, edi
		sub	esp, 4
		jmp	short loc_6CEC69F5
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6A60:				; CODE XREF: _Unwind_SjLj_ForcedUnwind+1Aj
		call	sub_6CEC6320
		mov	eax, dword_6CEC900C
		jmp	short loc_6CEC69EC
; ---------------------------------------------------------------------------

loc_6CEC6A6C:				; CODE XREF: _Unwind_SjLj_ForcedUnwind+4Bj
		lea	eax, [esp+2Ch+var_10]
		mov	edx, esi
		call	sub_6CEC6540
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop

locret_6CEC6A80:			; CODE XREF: .text:6CEC6AD3p
					; DATA XREF: .data:off_6CEC901Co
		rep retn
_Unwind_SjLj_ForcedUnwind endp

; ---------------------------------------------------------------------------
		align 10h
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h
		mov	eax, [esp+4]
		mov	off_6CEC901C, eax
		mov	eax, [esp+8]
		mov	off_6CEC9018, eax
		retn
; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		call	off_6CEC901C
		xor	eax, eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		call	off_6CEC9018
		xor	eax, eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  62. __gcc_personality_sj0

; =============== S U B	R O U T	I N E =======================================


		public __gcc_personality_sj0
__gcc_personality_sj0 proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		mov	eax, 3
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		cmp	[esp+2Ch+arg_0], 1
		mov	ebp, [esp+2Ch+arg_14]
		jz	short loc_6CEC6B10

loc_6CEC6B07:				; CODE XREF: __gcc_personality_sj0+169j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6B10:				; CODE XREF: __gcc_personality_sj0+15j
		test	[esp+2Ch+arg_4], 2
		jnz	short loc_6CEC6B24

loc_6CEC6B17:				; CODE XREF: __gcc_personality_sj0+40j
					; __gcc_personality_sj0+E7j ...
		add	esp, 1Ch
		mov	eax, 8
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC6B24:				; CODE XREF: __gcc_personality_sj0+25j
		mov	[esp+2Ch+var_2C], ebp
		call	_Unwind_GetLanguageSpecificData
		test	eax, eax
		mov	esi, eax
		jz	short loc_6CEC6B17
		test	ebp, ebp
		jz	short loc_6CEC6B3E
		mov	[esp+2Ch+var_2C], ebp
		call	_Unwind_GetRegionStart

loc_6CEC6B3E:				; CODE XREF: __gcc_personality_sj0+44j
		movzx	ebx, byte ptr [esi]
		add	esi, 1
		cmp	bl, 0FFh
		jz	short loc_6CEC6BA6
		movzx	edi, bl
		mov	eax, edi
		and	eax, 70h
		cmp	eax, 20h
		jz	loc_6CEC6CAD
		jle	loc_6CEC6C5E
		cmp	eax, 40h
		jz	loc_6CEC6CBA
		cmp	eax, 50h
		lea	esi, [esi+0]
		jz	short loc_6CEC6B85
		cmp	eax, 30h
		jnz	loc_6CEC6C6F	; jumptable 6CEC6B96 default case
		mov	[esp+2Ch+var_2C], ebp
		xchg	ax, ax
		call	_Unwind_GetDataRelBase

loc_6CEC6B85:				; CODE XREF: __gcc_personality_sj0+80j
					; __gcc_personality_sj0+170j ...
		cmp	bl, 50h
		jz	short loc_6CEC6B9D
		and	edi, 0Fh
		cmp	edi, 0Ch	; switch 13 cases
		ja	loc_6CEC6C6F	; jumptable 6CEC6B96 default case
		jmp	ds:off_6CECA2E0[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6CEC6B9D:				; CODE XREF: __gcc_personality_sj0+98j
		add	esi, 3
		and	esi, 0FFFFFFFCh
		add	esi, 4

loc_6CEC6BA6:				; CODE XREF: __gcc_personality_sj0+57j
					; __gcc_personality_sj0+190j ...
		cmp	byte ptr [esi],	0FFh
		lea	ebx, [esi+1]
		jz	short loc_6CEC6BBA
		xchg	ax, ax

loc_6CEC6BB0:				; CODE XREF: __gcc_personality_sj0+C8j
		movzx	eax, byte ptr [ebx]
		add	ebx, 1
		test	al, al
		js	short loc_6CEC6BB0

loc_6CEC6BBA:				; CODE XREF: __gcc_personality_sj0+BCj
		add	ebx, 1
		lea	esi, [esi+0]

loc_6CEC6BC0:				; CODE XREF: __gcc_personality_sj0+D8j
		movzx	eax, byte ptr [ebx]
		add	ebx, 1
		test	al, al
		js	short loc_6CEC6BC0
		mov	[esp+2Ch+var_2C], ebp
		call	_Unwind_GetIP
		lea	edi, [eax-1]
		test	edi, edi
		jle	loc_6CEC6B17
		lea	esi, [esi+0]

loc_6CEC6BE0:				; CODE XREF: __gcc_personality_sj0+11Dj
		xor	esi, esi
		xor	ecx, ecx

loc_6CEC6BE4:				; CODE XREF: __gcc_personality_sj0+108j
		movzx	edx, byte ptr [ebx]
		add	ebx, 1
		mov	eax, edx
		and	eax, 7Fh
		shl	eax, cl
		add	ecx, 7
		or	esi, eax
		test	dl, dl
		js	short loc_6CEC6BE4
		lea	esi, [esi+0]

loc_6CEC6C00:				; CODE XREF: __gcc_personality_sj0+118j
		movzx	eax, byte ptr [ebx]
		add	ebx, 1
		test	al, al
		js	short loc_6CEC6C00
		sub	edi, 1
		jnz	short loc_6CEC6BE0
		add	esi, 1
		jz	loc_6CEC6B17
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebp
		mov	[esp+2Ch+var_24], eax
		call	_Unwind_SetGR
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebp
		call	_Unwind_SetGR
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebp
		call	_Unwind_SetIP
		mov	eax, 7
		jmp	loc_6CEC6B07
; ---------------------------------------------------------------------------

loc_6CEC6C5E:				; CODE XREF: __gcc_personality_sj0+6Aj
		test	eax, eax
		jz	loc_6CEC6B85
		cmp	eax, 10h
		jz	loc_6CEC6B85

loc_6CEC6C6F:				; CODE XREF: __gcc_personality_sj0+85j
					; __gcc_personality_sj0+A0j ...
		nop			; jumptable 6CEC6B96 default case
		call	abort
; ---------------------------------------------------------------------------

loc_6CEC6C75:				; CODE XREF: __gcc_personality_sj0+A6j
					; __gcc_personality_sj0+18Dj
					; DATA XREF: ...
		movzx	eax, byte ptr [esi] ; jumptable	6CEC6B96 case 1
		add	esi, 1
		test	al, al
		js	short loc_6CEC6C75 ; jumptable 6CEC6B96	case 1
		nop
		jmp	loc_6CEC6BA6
; ---------------------------------------------------------------------------

loc_6CEC6C85:				; CODE XREF: __gcc_personality_sj0+A6j
					; __gcc_personality_sj0+19Dj
					; DATA XREF: ...
		movzx	eax, byte ptr [esi] ; jumptable	6CEC6B96 case 9
		add	esi, 1
		test	al, al
		js	short loc_6CEC6C85 ; jumptable 6CEC6B96	case 9
		nop
		jmp	loc_6CEC6BA6
; ---------------------------------------------------------------------------

loc_6CEC6C95:				; CODE XREF: __gcc_personality_sj0+A6j
					; DATA XREF: .rdata:off_6CECA2E0o
		add	esi, 4		; jumptable 6CEC6B96 cases 0,3,11
		jmp	loc_6CEC6BA6
; ---------------------------------------------------------------------------

loc_6CEC6C9D:				; CODE XREF: __gcc_personality_sj0+A6j
					; DATA XREF: .rdata:off_6CECA2E0o
		add	esi, 2		; jumptable 6CEC6B96 cases 2,10
		jmp	loc_6CEC6BA6
; ---------------------------------------------------------------------------

loc_6CEC6CA5:				; CODE XREF: __gcc_personality_sj0+A6j
					; DATA XREF: .rdata:off_6CECA2E0o
		add	esi, 8		; jumptable 6CEC6B96 cases 4,12
		jmp	loc_6CEC6BA6
; ---------------------------------------------------------------------------

loc_6CEC6CAD:				; CODE XREF: __gcc_personality_sj0+64j
		mov	[esp+2Ch+var_2C], ebp
		call	_Unwind_GetTextRelBase
		jmp	loc_6CEC6B85
; ---------------------------------------------------------------------------

loc_6CEC6CBA:				; CODE XREF: __gcc_personality_sj0+73j
		mov	[esp+2Ch+var_2C], ebp
		call	_Unwind_GetRegionStart
		jmp	loc_6CEC6B85
__gcc_personality_sj0 endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  43. __emutls_register_common

; =============== S U B	R O U T	I N E =======================================


		public __emutls_register_common
__emutls_register_common proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	eax, [esp+4+arg_0]
		mov	edx, [esp+4+arg_4]
		mov	ecx, [esp+4+arg_8]
		mov	ebx, [esp+4+arg_C]
		cmp	[eax], edx
		jnb	short loc_6CEC6CEE
		mov	[eax], edx
		mov	dword ptr [eax+0Ch], 0

loc_6CEC6CEE:				; CODE XREF: __emutls_register_common+13j
		cmp	[eax+4], ecx
		jnb	short loc_6CEC6CF6
		mov	[eax+4], ecx

loc_6CEC6CF6:				; CODE XREF: __emutls_register_common+21j
		test	ebx, ebx
		jz	short loc_6CEC6CFE
		cmp	[eax], edx
		jz	short loc_6CEC6D01

loc_6CEC6CFE:				; CODE XREF: __emutls_register_common+28j
		pop	ebx
		nop
		retn
; ---------------------------------------------------------------------------

loc_6CEC6D01:				; CODE XREF: __emutls_register_common+2Cj
		mov	[eax+0Ch], ebx
		pop	ebx
		retn
__emutls_register_common endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC6D10	proc near		; CODE XREF: __emutls_get_address+CAp
					; __emutls_get_address+1B5p

dwTlsIndex	= dword	ptr -1Ch
lpTlsValue	= dword	ptr -18h

		sub	esp, 1Ch
		mov	[esp+1Ch+lpTlsValue], edx ; lpTlsValue
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jz	short loc_6CEC6D30
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6D30:				; CODE XREF: sub_6CEC6D10+15j
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_6CEC6D10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC6D40	proc near		; CODE XREF: __emutls_get_address+96p
					; __emutls_get_address+D3p

Size		= dword	ptr -1Ch
Val		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 14h
		mov	eax, [eax+4]
		cmp	eax, 4
		ja	short loc_6CEC6D90
		mov	eax, [ebx]
		add	eax, 4
		mov	[esp+1Ch+Size],	eax ; Size
		call	malloc
		test	eax, eax
		jz	short loc_6CEC6DD0
		mov	[eax], eax
		lea	esi, [eax+4]
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_6CEC6DB6

loc_6CEC6D6C:				; CODE XREF: sub_6CEC6D40+74j
		mov	eax, [ebx]
		mov	[esp+1Ch+Size],	esi ; Dst
		mov	[esp+1Ch+Val], 0 ; Val
		mov	[esp+1Ch+var_14], eax ;	Size
		call	memset
		mov	eax, esi
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC6D90:				; CODE XREF: sub_6CEC6D40+Dj
		add	eax, [ebx]
		add	eax, 3
		mov	[esp+1Ch+Size],	eax ; Size
		call	malloc
		test	eax, eax
		jz	short loc_6CEC6DD0
		mov	edx, [ebx+4]
		lea	esi, [eax+edx+3]
		neg	edx
		and	esi, edx
		mov	[esi-4], eax
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6CEC6D6C

loc_6CEC6DB6:				; CODE XREF: sub_6CEC6D40+2Aj
		mov	edx, [ebx]
		mov	[esp+1Ch+Size],	esi ; Dst
		mov	[esp+1Ch+Val], eax ; Src
		mov	[esp+1Ch+var_14], edx ;	Size
		call	memcpy
		mov	eax, esi
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC6DD0:				; CODE XREF: sub_6CEC6D40+1Ej
					; sub_6CEC6D40+5Fj
		call	abort
sub_6CEC6D40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC6DE0	proc near		; CODE XREF: __emutls_get_address:loc_6CEC7082p

lpSemaphoreAttributes= dword ptr -1Ch
lInitialCount	= dword	ptr -18h
lMaximumCount	= dword	ptr -14h
lpName		= dword	ptr -10h

		sub	esp, 1Ch
		mov	[esp+1Ch+lpName], 0 ; lpName
		mov	ds:dword_6CECB024, 0FFFFFFFFh
		mov	[esp+1Ch+lMaximumCount], 0FFFFh	; lMaximumCount
		mov	[esp+1Ch+lInitialCount], 0 ; lInitialCount
		mov	[esp+1Ch+lpSemaphoreAttributes], 0 ; lpSemaphoreAttributes
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	ds:hSemaphore, eax
		call	ds:TlsAlloc
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6CEC6E42
		mov	ds:dword_6CECB02C, eax
		mov	[esp+1Ch+lInitialCount], offset	loc_6CEC70B0
		mov	[esp+1Ch+lpSemaphoreAttributes], eax
		call	sub_6CEC7FE0

loc_6CEC6E3A:				; CODE XREF: sub_6CEC6DE0+68j
		test	eax, eax
		jnz	short loc_6CEC6E4A
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC6E42:				; CODE XREF: sub_6CEC6DE0+43j
		call	ds:GetLastError
		jmp	short loc_6CEC6E3A
; ---------------------------------------------------------------------------

loc_6CEC6E4A:				; CODE XREF: sub_6CEC6DE0+5Cj
		lea	esi, [esi+0]
		call	abort
sub_6CEC6DE0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  42. __emutls_get_address

; =============== S U B	R O U T	I N E =======================================


		public __emutls_get_address
__emutls_get_address proc near

dwTlsIndex	= dword	ptr -3Ch
SizeOfElements	= dword	ptr -38h
lpPreviousCount	= dword	ptr -34h
Memory		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	ecx, dword_6CEC9030
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_8], edi
		test	ecx, ecx
		mov	[esp+3Ch+var_4], ebp
		jnz	short loc_6CEC6EA0
		mov	eax, [esi+8]
		test	eax, eax
		jz	loc_6CEC6F31

loc_6CEC6E8C:				; CODE XREF: __emutls_get_address+92j
					; __emutls_get_address+9Fj ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC6EA0:				; CODE XREF: __emutls_get_address+1Fj
		mov	ebx, [esi+8]
		test	ebx, ebx
		jz	loc_6CEC6F40

loc_6CEC6EAB:				; CODE XREF: __emutls_get_address+122j
					; __emutls_get_address+137j ...
		mov	ebp, ds:dword_6CECB02C
		call	ds:GetLastError
		mov	[esp+3Ch+dwTlsIndex], ebp ; dwTlsIndex
		mov	edi, eax
		call	ds:TlsGetValue
		sub	esp, 4
		mov	[esp+3Ch+dwTlsIndex], edi ; dwErrCode
		mov	[esp+3Ch+Memory], eax
		call	ds:SetLastError
		sub	esp, 4
		mov	eax, [esp+3Ch+Memory]
		test	eax, eax
		mov	edi, eax
		jz	short loc_6CEC6F01
		mov	ebp, [eax]
		cmp	ebx, ebp
		ja	loc_6CEC6FC3

loc_6CEC6EE9:				; CODE XREF: __emutls_get_address+CFj
					; __emutls_get_address+1BAj
		sub	ebx, 1
		mov	eax, [edi+ebx*4+4]
		test	eax, eax
		jnz	short loc_6CEC6E8C
		mov	eax, esi
		call	sub_6CEC6D40
		mov	[edi+ebx*4+4], eax
		jmp	short loc_6CEC6E8C
; ---------------------------------------------------------------------------

loc_6CEC6F01:				; CODE XREF: __emutls_get_address+7Dj
		lea	eax, [ebx+21h]
		mov	[esp+3Ch+SizeOfElements], 4 ; SizeOfElements
		lea	ebp, [ebx+20h]
		mov	[esp+3Ch+dwTlsIndex], eax ; NumOfElements
		call	calloc
		test	eax, eax
		mov	edi, eax
		jz	loc_6CEC701F
		mov	[eax], ebp
		mov	edx, eax
		mov	eax, ds:dword_6CECB02C
		call	sub_6CEC6D10
		jmp	short loc_6CEC6EE9
; ---------------------------------------------------------------------------

loc_6CEC6F31:				; CODE XREF: __emutls_get_address+26j
		mov	eax, esi
		call	sub_6CEC6D40
		mov	[esi+8], eax
		jmp	loc_6CEC6E8C
; ---------------------------------------------------------------------------

loc_6CEC6F40:				; CODE XREF: __emutls_get_address+45j
		cmp	dword_6CEC9020,	0
		jz	loc_6CEC7056

loc_6CEC6F4D:				; CODE XREF: __emutls_get_address+240j
		mov	[esp+3Ch+dwTlsIndex], offset dword_6CECB024
		call	sub_6CEC8040
		test	eax, eax
		push	edi
		jnz	loc_6CEC7024

loc_6CEC6F62:				; CODE XREF: __emutls_get_address+1DEj
					; __emutls_get_address+1F1j
		mov	eax, dword_6CEC9030

loc_6CEC6F67:				; CODE XREF: __emutls_get_address+23Aj
		mov	ebx, [esi+8]
		test	ebx, ebx
		jnz	short loc_6CEC6F80
		mov	ebx, ds:dword_6CECB030
		add	ebx, 1
		mov	ds:dword_6CECB030, ebx
		mov	[esi+8], ebx

loc_6CEC6F80:				; CODE XREF: __emutls_get_address+10Cj
		test	eax, eax
		jz	loc_6CEC6EAB
		mov	[esp+3Ch+dwTlsIndex], offset dword_6CECB024
		call	sub_6CEC7FC0
		test	eax, eax
		push	edx
		js	loc_6CEC6EAB
		mov	eax, ds:hSemaphore
		mov	[esp+3Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+3Ch+SizeOfElements], 1 ; lReleaseCount
		mov	[esp+3Ch+dwTlsIndex], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		jmp	loc_6CEC6EAB
; ---------------------------------------------------------------------------

loc_6CEC6FC3:				; CODE XREF: __emutls_get_address+83j
		lea	edx, [ebp+ebp+0]
		cmp	ebx, edx
		jbe	short loc_6CEC6FCE
		lea	edx, [ebx+20h]

loc_6CEC6FCE:				; CODE XREF: __emutls_get_address+169j
		lea	ecx, ds:4[edx*4]
		mov	[esp+3Ch+Memory], edx
		mov	[esp+3Ch+SizeOfElements], ecx ;	NewSize
		mov	[esp+3Ch+dwTlsIndex], eax ; Memory
		call	realloc
		mov	edx, [esp+3Ch+Memory]
		test	eax, eax
		mov	edi, eax
		jz	short loc_6CEC701F
		mov	[eax], edx
		sub	edx, ebp
		shl	edx, 2
		lea	eax, [eax+ebp*4+4]
		mov	[esp+3Ch+lpPreviousCount], edx ; Size
		mov	[esp+3Ch+SizeOfElements], 0 ; Val
		mov	[esp+3Ch+dwTlsIndex], eax ; Dst
		call	memset
		mov	eax, ds:dword_6CECB02C
		mov	edx, edi
		call	sub_6CEC6D10
		jmp	loc_6CEC6EE9
; ---------------------------------------------------------------------------

loc_6CEC701F:				; CODE XREF: __emutls_get_address+BBj
					; __emutls_get_address+18Dj
		call	abort
; ---------------------------------------------------------------------------

loc_6CEC7024:				; CODE XREF: __emutls_get_address+FCj
		mov	eax, ds:hSemaphore
		mov	[esp+3Ch+SizeOfElements], 0FFFFFFFFh ; dwMilliseconds
		mov	[esp+3Ch+dwTlsIndex], eax ; hHandle
		call	ds:WaitForSingleObject
		test	eax, eax
		push	ebx
		push	ebx
		jz	loc_6CEC6F62
		mov	[esp+3Ch+dwTlsIndex], offset dword_6CECB024
		call	sub_6CEC7FC0
		push	ecx
		jmp	loc_6CEC6F62
; ---------------------------------------------------------------------------

loc_6CEC7056:				; CODE XREF: __emutls_get_address+E7j
		mov	[esp+3Ch+dwTlsIndex], offset dword_6CEC9024
		call	sub_6CEC8040
		test	eax, eax
		push	edx
		jz	short loc_6CEC7082
		mov	ebx, ds:Sleep

loc_6CEC706D:				; CODE XREF: __emutls_get_address+220j
		cmp	dword_6CEC9020,	0
		jnz	short loc_6CEC7091
		mov	[esp+3Ch+dwTlsIndex], 0	; dwMilliseconds
		call	ebx ; Sleep
		push	ebp
		jmp	short loc_6CEC706D
; ---------------------------------------------------------------------------

loc_6CEC7082:				; CODE XREF: __emutls_get_address+205j
		call	sub_6CEC6DE0
		mov	dword_6CEC9020,	1

loc_6CEC7091:				; CODE XREF: __emutls_get_address+214j
		xor	eax, eax
		cmp	dword_6CEC9030,	0
		jz	loc_6CEC6F67
		jmp	loc_6CEC6F4D
__emutls_get_address endp

; ---------------------------------------------------------------------------
		align 10h

loc_6CEC70B0:				; DATA XREF: sub_6CEC6DE0+4Ao
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [esp+20h]
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_6CEC70DC
		xor	ebx, ebx

loc_6CEC70C2:				; CODE XREF: .text:6CEC70DAj
		mov	eax, [esi+ebx*4+4]
		test	eax, eax
		jz	short loc_6CEC70D5
		mov	eax, [eax-4]
		mov	[esp], eax
		call	free

loc_6CEC70D5:				; CODE XREF: .text:6CEC70C8j
		add	ebx, 1
		cmp	edi, ebx
		ja	short loc_6CEC70C2

loc_6CEC70DC:				; CODE XREF: .text:6CEC70BEj
		mov	[esp+20h], esi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	free
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6CEC70F0(_onexit_t)
sub_6CEC70F0	proc near		; CODE XREF: sub_6CEC71B0+Ap

Func		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_6CECB3DC
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax
		call	sub_6CEC72B0
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_10], eax
		jz	loc_6CEC7190
		mov	[esp+2Ch+Func],	8
		call	_lock
		mov	eax, ds:dword_6CECB3DC
		mov	[esp+2Ch+Func],	eax
		call	sub_6CEC72B0
		mov	[esp+2Ch+var_10], eax
		mov	eax, ds:dword_6CECB3D8
		mov	[esp+2Ch+Func],	eax
		call	sub_6CEC72B0
		mov	[esp+2Ch+Func],	ebx
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Func],	eax
		call	sub_6CEC72C0
		mov	ds:dword_6CECB3DC, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+Func],	eax
		call	sub_6CEC72C0
		mov	[esp+2Ch+Func],	8
		mov	ds:dword_6CECB3D8, eax
		call	_unlock
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7190:				; CODE XREF: sub_6CEC70F0+1Cj
		mov	[esp+2Ch+Func],	ebx ; Func
		call	ds:_onexit
		add	esp, 28h
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_6CEC70F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6CEC71B0(_onexit_t)
sub_6CEC71B0	proc near		; CODE XREF: sub_6CEC1880-2Fp
					; sub_6CEC80E0+12p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_6CEC70F0
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_6CEC71B0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:6CECE01Co

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_6CEC7200
		cmp	eax, 3
		jz	short loc_6CEC7200
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7200:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_6CEC7900
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_6CEC1040+117p
					; DATA XREF: .rdata:off_6CECA314o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_6CEC9030,	2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_6CEC724B
		mov	dword_6CEC9030,	2

loc_6CEC724B:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_6CEC7261
		cmp	eax, 1
		jz	short loc_6CEC7290

loc_6CEC7255:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6CEC7261:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_6CECE028
		cmp	ebx, offset dword_6CECE028
		jz	short loc_6CEC7255
		xchg	ax, ax

loc_6CEC7270:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_6CEC7278
		call	eax

loc_6CEC7278:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_6CECE028
		jnz	short loc_6CEC7270
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7290:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6CEC7900
		jmp	short loc_6CEC7255
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC72B0	proc near		; CODE XREF: sub_6CEC1040+138p
					; sub_6CEC1040+14Bp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6CEC72B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC72C0	proc near		; CODE XREF: sub_6CEC1000+15p
					; sub_6CEC70F0+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6CEC72C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_6CEC72D0(char	*Format, char ArgList)
sub_6CEC72D0	proc near		; CODE XREF: sub_6CEC7330+131p
					; sub_6CEC7330+141p ...

Str		= dword	ptr -1Ch
Size		= dword	ptr -18h
Count		= dword	ptr -14h
File		= dword	ptr -10h
Format		= dword	ptr  4
ArgList		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+Count], 1Bh ; Count
		lea	ebx, [esp+1Ch+ArgList]
		mov	[esp+1Ch+Size],	1 ; Size
		mov	[esp+1Ch+Str], offset aMingwW64Runtim ;	"Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	fwrite
		mov	eax, [esp+1Ch+Format]
		mov	[esp+1Ch+Count], ebx ; ArgList
		mov	[esp+1Ch+Size],	eax ; Format
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+Str], eax ; File
		call	vfprintf
		call	abort
sub_6CEC72D0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6CEC7330
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6CEC7330(size_t Size)
sub_6CEC7330	proc near		; CODE XREF: .text:6CEC7321j
					; sub_6CEC7480+12Ap ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
Src		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+5Ch+Src], edx
		jnz	short loc_6CEC7350
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7350:				; CODE XREF: sub_6CEC7330+11j
		mov	ecx, ds:dword_6CECB04C
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_6CEC7380
		mov	eax, ds:dword_6CECB048

loc_6CEC7361:				; CODE XREF: sub_6CEC7330+4Ej
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_6CEC7376
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_6CEC73F9

loc_6CEC7376:				; CODE XREF: sub_6CEC7330+36j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_6CEC7361

loc_6CEC7380:				; CODE XREF: sub_6CEC7330+2Aj
		mov	[esp+5Ch+lpAddress], ebx
		call	sub_6CEC7B20
		test	eax, eax
		mov	ebp, eax
		jz	loc_6CEC7466
		lea	edx, [esi+esi*2]
		mov	esi, ds:dword_6CECB048
		shl	edx, 2
		mov	[esp+5Ch+var_44], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	sub_6CEC7C40
		mov	edx, [esp+5Ch+var_44]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	eax, ds:dword_6CECB048
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+5Ch+var_44]
		jz	short loc_6CEC7446
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_6CEC7415

loc_6CEC73F2:				; CODE XREF: sub_6CEC7330+E8j
					; sub_6CEC7330+114j
		add	ds:dword_6CECB04C, 1

loc_6CEC73F9:				; CODE XREF: sub_6CEC7330+40j
		mov	eax, [esp+5Ch+Src]
		mov	[esp+5Ch+dwLength], edi	; Size
		mov	[esp+5Ch+lpAddress], ebx ; Dst
		mov	[esp+5Ch+lpBuffer], eax	; Src
		call	memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC7415:				; CODE XREF: sub_6CEC7330+C0j
		cmp	eax, 40h
		jz	short loc_6CEC73F2
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		add	edx, ds:dword_6CECB048
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpflOldProtect], edx ;	lpflOldProtect
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6CEC73F2
; ---------------------------------------------------------------------------

loc_6CEC7446:				; CODE XREF: sub_6CEC7330+B7j
		mov	eax, ds:dword_6CECB048
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ebp+8]
		mov	[esp+5Ch+lpAddress], offset Format ; "	VirtualQuery failed for	%d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		call	sub_6CEC72D0
; ---------------------------------------------------------------------------

loc_6CEC7466:				; CODE XREF: sub_6CEC7330+5Cj
		mov	[esp+5Ch+lpBuffer], ebx	; ArgList
		mov	[esp+5Ch+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_6CEC72D0
sub_6CEC7330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6CEC7480	proc near		; CODE XREF: sub_6CEC1260+30p
					; sub_6CEC1260:loc_6CEC12E8p

lpAddress	= dword	ptr -58h
lpBuffer	= dword	ptr -54h
dwLength	= dword	ptr -50h
lpflOldProtect	= dword	ptr -4Ch
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_6CECB050
		test	ebx, ebx
		jz	short loc_6CEC74A0

loc_6CEC7493:				; CODE XREF: sub_6CEC7480+64j
					; sub_6CEC7480+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC74A0:				; CODE XREF: sub_6CEC7480+11j
		mov	ds:dword_6CECB050, 1
		call	sub_6CEC7B90
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_6CEC1490
		mov	ds:dword_6CECB04C, 0
		lea	eax, [esp+58h+Buffer.BaseAddress+3]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_6CECB048, eax
		mov	eax, offset dword_6CECA408
		sub	eax, offset dword_6CECA408
		cmp	eax, 7
		jle	short loc_6CEC7493
		cmp	eax, 0Bh
		mov	ebx, offset dword_6CECA408
		jle	short loc_6CEC7512
		mov	ecx, ds:dword_6CECA408
		test	ecx, ecx
		jnz	short loc_6CEC7512
		mov	edx, ds:dword_6CECA40C
		test	edx, edx
		jnz	short loc_6CEC7512
		mov	eax, ds:dword_6CECA410
		test	eax, eax
		jnz	short loc_6CEC7512
		mov	ebx, offset dword_6CECA414

loc_6CEC7512:				; CODE XREF: sub_6CEC7480+6Ej
					; sub_6CEC7480+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_6CEC7580
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_6CEC7580
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_6CEC76E3
		add	ebx, 0Ch
		cmp	ebx, offset dword_6CECA408
		jnb	loc_6CEC7493
		mov	esi, 6CEC0000h

loc_6CEC753F:				; CODE XREF: sub_6CEC7480+217j
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_6CEC763D
		cmp	edx, 20h
		jz	loc_6CEC767A
		cmp	edx, 8
		jz	loc_6CEC765C
		mov	[ebp+var_1C], 0
		mov	[esp+58h+lpBuffer], edx	; ArgList
		mov	[esp+58h+lpAddress], offset aUnknownPseudoR ; "	 Unknown pseudo	relocation bit size %d"...
		call	sub_6CEC72D0
; ---------------------------------------------------------------------------

loc_6CEC7580:				; CODE XREF: sub_6CEC7480+96j
					; sub_6CEC7480+9Dj
		cmp	ebx, offset dword_6CECA408
		jnb	loc_6CEC7493
		mov	esi, 6CEC0000h
		lea	edi, [ebp+flOldProtect]

loc_6CEC7594:				; CODE XREF: sub_6CEC7480+135j
		mov	eax, [ebx+4]
		mov	ecx, 4		; Size
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	sub_6CEC7330
		cmp	ebx, offset dword_6CECA408
		jb	short loc_6CEC7594

loc_6CEC75B7:				; CODE XREF: sub_6CEC7480+21Dj
		mov	ecx, ds:dword_6CECB04C
		test	ecx, ecx
		jle	loc_6CEC7493
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_6CEC75E2
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC75D0:				; CODE XREF: sub_6CEC7480+16Dj
					; sub_6CEC7480+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:dword_6CECB04C
		jge	loc_6CEC7493

loc_6CEC75E2:				; CODE XREF: sub_6CEC7480+14Cj
		mov	eax, ds:dword_6CECB048
		add	eax, ebx
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6CEC75D0
		lea	edx, [ebp+Buffer]
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	eax, [eax+4]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_6CEC76C0
		mov	eax, ds:dword_6CECB048
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	eax, [eax+ebx]
		mov	[esp+58h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6CEC75D0
; ---------------------------------------------------------------------------

loc_6CEC763D:				; CODE XREF: sub_6CEC7480+D1j
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_6CEC76B1
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6CEC764D:				; CODE XREF: sub_6CEC7480+23Ej
		mov	ecx, 2		; Size
		lea	edx, [ebp+var_1C]
		call	sub_6CEC7330
		jmp	short loc_6CEC768E
; ---------------------------------------------------------------------------

loc_6CEC765C:				; CODE XREF: sub_6CEC7480+E3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_6CEC76A2
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6CEC766B:				; CODE XREF: sub_6CEC7480+22Fj
		mov	ecx, 1		; Size
		lea	edx, [ebp+var_1C]
		call	sub_6CEC7330
		jmp	short loc_6CEC768E
; ---------------------------------------------------------------------------

loc_6CEC767A:				; CODE XREF: sub_6CEC7480+DAj
		add	edi, [eax]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4		; Size
		mov	[ebp+var_1C], edi
		call	sub_6CEC7330

loc_6CEC768E:				; CODE XREF: sub_6CEC7480+1DAj
					; sub_6CEC7480+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset dword_6CECA408
		jb	loc_6CEC753F
		jmp	loc_6CEC75B7
; ---------------------------------------------------------------------------

loc_6CEC76A2:				; CODE XREF: sub_6CEC7480+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6CEC766B
; ---------------------------------------------------------------------------

loc_6CEC76B1:				; CODE XREF: sub_6CEC7480+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6CEC764D
; ---------------------------------------------------------------------------

loc_6CEC76C0:				; CODE XREF: sub_6CEC7480+18Fj
		add	ebx, ds:dword_6CECB048
		mov	eax, [ebx+4]
		mov	[esp+58h+dwLength], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+58h+lpAddress], offset Format ; "	VirtualQuery failed for	%d bytes at a"...
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_6CEC72D0
; ---------------------------------------------------------------------------

loc_6CEC76E3:				; CODE XREF: sub_6CEC7480+A5j
		mov	[esp+58h+lpBuffer], eax	; ArgList
		mov	[esp+58h+lpAddress], offset aUnknownPseud_0 ; "	 Unknown pseudo	relocation protocol ve"...
		call	sub_6CEC72D0
sub_6CEC7480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7700	proc near		; CODE XREF: sub_6CEC1260+40p
					; sub_6CEC1260+A6p ...
		mov	eax, 1
		retn	0Ch
sub_6CEC7700	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7710	proc near		; CODE XREF: sub_6CEC1260+F1p
					; sub_6CEC1260+10Bp ...
		mov	eax, 1
		retn	0Ch
sub_6CEC7710	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_6CECB184, edx
		mov	ds:dword_6CECB060, 0C0000409h
		mov	ds:dword_6CECB064, 1
		mov	ds:dword_6CECB178, eax
		mov	ds:dword_6CECB06C, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_6CECB16C, eax
		mov	eax, dword_6CEC9034
		mov	[ebp-10h], eax
		mov	eax, dword_6CEC9038
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_6CECA3E8
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC77B0	proc near		; CODE XREF: DllEntryPoint+34p

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
PerformanceCount= LARGE_INTEGER	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, dword_6CEC9034
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_6CEC77F0
		not	eax
		mov	dword_6CEC9038,	eax

loc_6CEC77D6:				; CODE XREF: sub_6CEC77B0+BDj
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC77F0:				; CODE XREF: sub_6CEC77B0+1Dj
		lea	eax, [esp+4Ch+SystemTimeAsFileTime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	[esp+4Ch+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[esp+4Ch+SystemTimeAsFileTime.dwHighDateTime], 0
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	eax, [esp+4Ch+SystemTimeAsFileTime.dwHighDateTime]
		mov	ebp, [esp+4Ch+SystemTimeAsFileTime.dwLowDateTime]
		mov	[esp+4Ch+var_30], eax
		call	ds:GetCurrentProcessId
		mov	edi, eax
		call	ds:GetCurrentThreadId
		mov	esi, eax
		call	ds:GetTickCount
		mov	ebx, eax
		lea	eax, [esp+4Ch+PerformanceCount]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		sub	esp, 4
		xor	ebp, [esp+4Ch+var_30]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount+4]
		xor	ebp, edi
		xor	ebp, esi
		xor	ebp, ebx
		mov	eax, ebp
		cmp	ebp, 0BB40E64Eh
		not	eax
		jz	short loc_6CEC7872

loc_6CEC7862:				; CODE XREF: sub_6CEC77B0+CBj
		mov	dword_6CEC9034,	ebp
		mov	dword_6CEC9038,	eax
		jmp	loc_6CEC77D6
; ---------------------------------------------------------------------------

loc_6CEC7872:				; CODE XREF: sub_6CEC77B0+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_6CEC7862
sub_6CEC77B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7880	proc near		; CODE XREF: sub_6CEC7900+13p
					; sub_6CEC7900:loc_6CEC7921p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_6CECB3A0
		test	eax, eax
		jnz	short loc_6CEC7898
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6CEC7898:				; CODE XREF: sub_6CEC7880+Ej
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	ebx, ds:dword_6CECB3BC
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_6CEC78E5
		mov	ebp, ds:TlsGetValue
		mov	edi, ds:GetLastError
		xchg	ax, ax

loc_6CEC78C0:				; CODE XREF: sub_6CEC7880+63j
		mov	eax, [ebx]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_6CEC78DE
		test	esi, esi
		jz	short loc_6CEC78DE
		mov	eax, [ebx+4]
		mov	[esp+2Ch+lpCriticalSection], esi
		call	eax

loc_6CEC78DE:				; CODE XREF: sub_6CEC7880+50j
					; sub_6CEC7880+54j
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_6CEC78C0

loc_6CEC78E5:				; CODE XREF: sub_6CEC7880+30j
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6CEC7880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7900	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_6CEC7950
		jb	short loc_6CEC7921
		cmp	eax, 3
		jnz	short loc_6CEC7918
		call	sub_6CEC7880

loc_6CEC7918:				; CODE XREF: sub_6CEC7900+11j
					; sub_6CEC7900+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6CEC7921:				; CODE XREF: sub_6CEC7900+Cj
		call	sub_6CEC7880
		mov	eax, ds:dword_6CECB3A0
		cmp	eax, 1
		jnz	short loc_6CEC7918
		mov	ds:dword_6CECB3A0, 0
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_6CEC7918
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7950:				; CODE XREF: sub_6CEC7900+Aj
		mov	eax, ds:dword_6CECB3A0
		test	eax, eax
		jz	short loc_6CEC7970

loc_6CEC7959:				; CODE XREF: sub_6CEC7900+80j
		mov	ds:dword_6CECB3A0, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7970:				; CODE XREF: sub_6CEC7900+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_6CEC7959
sub_6CEC7900	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7990:				; CODE XREF: .text:6CEC8016j
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_6CECB3A0
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_6CEC79A8
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC79A8:				; CODE XREF: .text:6CEC799Fj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6CECB3BC
		sub	esp, 4
		test	eax, eax
		jz	short loc_6CEC79DF
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_6CEC79D6
		jmp	short loc_6CEC7A16
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC79D0:				; CODE XREF: .text:6CEC79DDj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_6CEC79F6

loc_6CEC79D6:				; CODE XREF: .text:6CEC79C5j
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6CEC79D0

loc_6CEC79DF:				; CODE XREF: .text:6CEC79BFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_6CEC79EF:				; CODE XREF: .text:6CEC7A14j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC79F6:				; CODE XREF: .text:6CEC79D4j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_6CEC79FC:				; CODE XREF: .text:6CEC7A1Fj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_6CEC79EF
; ---------------------------------------------------------------------------

loc_6CEC7A16:				; CODE XREF: .text:6CEC79C7j
		mov	edx, [eax+8]
		mov	ds:dword_6CECB3BC, edx
		jmp	short loc_6CEC79FC
; ---------------------------------------------------------------------------
		jmp	short loc_6CEC7A30
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6CEC7FE0

loc_6CEC7A30:				; CODE XREF: .text:6CEC7A21j
					; sub_6CEC7FE0+1Aj
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_6CECB3A0
		test	eax, eax
		jnz	short loc_6CEC7A42

loc_6CEC7A3D:				; CODE XREF: sub_6CEC7FE0-581j
					; sub_6CEC7FE0-542j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC7A42:				; CODE XREF: sub_6CEC7FE0-5A5j
		mov	[esp+1Ch+SizeOfElements], 0Ch ;	SizeOfElements
		mov	[esp+1Ch+NumOfElements], 1 ; NumOfElements
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_6CEC7A3D
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+NumOfElements], offset	CriticalSection	; lpCriticalSection
		mov	[ebx], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6CECB3BC
		mov	ds:dword_6CECB3BC, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	[esp+1Ch+NumOfElements], offset	CriticalSection	; lpCriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_6CEC7A3D
; END OF FUNCTION CHUNK	FOR sub_6CEC7FE0
; ---------------------------------------------------------------------------
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_6CEC7AB0

loc_6CEC7AAB:				; CODE XREF: .text:6CEC7AB9j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7AB0:				; CODE XREF: .text:6CEC7AA9j
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_6CEC7AAB
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		mov	eax, [esp+0Ch]
		mov	ebx, [esp+10h]
		add	eax, [eax+3Ch]
		movzx	esi, word ptr [eax+6]
		movzx	edx, word ptr [eax+14h]
		test	esi, esi
		jz	short loc_6CEC7B0C
		movzx	edx, dx
		lea	eax, [eax+edx+18h]
		xor	edx, edx
		jmp	short loc_6CEC7AF7
; ---------------------------------------------------------------------------

loc_6CEC7AF4:				; CODE XREF: .text:6CEC7B0Aj
		add	eax, 28h

loc_6CEC7AF7:				; CODE XREF: .text:6CEC7AF2j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_6CEC7B05
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6CEC7B0E

loc_6CEC7B05:				; CODE XREF: .text:6CEC7AFCj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6CEC7AF4

loc_6CEC7B0C:				; CODE XREF: .text:6CEC7AE7j
		xor	eax, eax

loc_6CEC7B0E:				; CODE XREF: .text:6CEC7B03j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6CEC7B20
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7B20	proc near		; CODE XREF: sub_6CEC7330+53p
					; .text:6CEC7B11j

arg_0		= dword	ptr  4

		cmp	word ptr ds:6CEC0000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6CEC7B32

loc_6CEC7B2D:				; CODE XREF: sub_6CEC7B20+27j
					; sub_6CEC7B20+2Fj ...
		xor	eax, eax

loc_6CEC7B2F:				; CODE XREF: sub_6CEC7B20+61j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC7B32:				; CODE XREF: sub_6CEC7B20+Bj
		mov	eax, ds:6CEC003Ch
		cmp	dword ptr [eax+6CEC0000h], 4550h
		lea	edx, [eax+6CEC0000h]
		jnz	short loc_6CEC7B2D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6CEC7B2D
		mov	ebx, [esp+8+arg_0]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 6CEC0000h
		test	esi, esi
		jz	short loc_6CEC7B2D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6CEC7B75
; ---------------------------------------------------------------------------

loc_6CEC7B72:				; CODE XREF: sub_6CEC7B20+68j
		add	eax, 28h

loc_6CEC7B75:				; CODE XREF: sub_6CEC7B20+50j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_6CEC7B83
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6CEC7B2F

loc_6CEC7B83:				; CODE XREF: sub_6CEC7B20+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6CEC7B72
		jmp	short loc_6CEC7B2D
sub_6CEC7B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7B90	proc near		; CODE XREF: sub_6CEC7480+2Ap
		cmp	word ptr ds:6CEC0000h, 5A4Dh
		jz	short loc_6CEC7BA0

loc_6CEC7B9B:				; CODE XREF: sub_6CEC7B90+25j
					; sub_6CEC7B90+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7BA0:				; CODE XREF: sub_6CEC7B90+9j
		mov	eax, ds:6CEC003Ch
		cmp	dword ptr [eax+6CEC0000h], 4550h
		lea	edx, [eax+6CEC0000h]
		jnz	short loc_6CEC7B9B
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6CEC7B9B
		movzx	eax, word ptr [edx+6]
		retn
sub_6CEC7B90	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:6CEC0000h, 5A4Dh
		push	ebx
		mov	edx, [esp+8]
		jz	short loc_6CEC7BE4

loc_6CEC7BE0:				; CODE XREF: .text:6CEC7BF9j
					; .text:6CEC7C01j ...
		xor	eax, eax

loc_6CEC7BE2:				; CODE XREF: .text:6CEC7C2Bj
					; .text:6CEC7C39j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC7BE4:				; CODE XREF: .text:6CEC7BDEj
		mov	eax, ds:6CEC003Ch
		cmp	dword ptr [eax+6CEC0000h], 4550h
		lea	ecx, [eax+6CEC0000h]
		jnz	short loc_6CEC7BE0
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6CEC7BE0
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_6CEC7BE0
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
		xor	ecx, ecx
		jmp	short loc_6CEC7C23
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7C20:				; CODE XREF: .text:6CEC7C35j
		add	eax, 28h

loc_6CEC7C23:				; CODE XREF: .text:6CEC7C18j
		test	byte ptr [eax+27h], 20h
		jz	short loc_6CEC7C30
		test	edx, edx
		jz	short loc_6CEC7BE2
		sub	edx, 1

loc_6CEC7C30:				; CODE XREF: .text:6CEC7C27j
		add	ecx, 1
		cmp	ecx, ebx
		jb	short loc_6CEC7C20
		xor	eax, eax
		jmp	short loc_6CEC7BE2
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7C40	proc near		; CODE XREF: sub_6CEC7330+7Dp
		cmp	word ptr ds:6CEC0000h, 5A4Dh
		jz	short loc_6CEC7C50

loc_6CEC7C4B:				; CODE XREF: sub_6CEC7C40+25j
		xor	eax, eax

locret_6CEC7C4D:			; CODE XREF: sub_6CEC7C40+32j
					; sub_6CEC7C40+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7C50:				; CODE XREF: sub_6CEC7C40+9j
		mov	eax, ds:6CEC003Ch
		cmp	dword ptr [eax+6CEC0000h], 4550h
		lea	edx, [eax+6CEC0000h]
		jnz	short loc_6CEC7C4B
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 6CEC0000h
		jz	short locret_6CEC7C4D
		xor	eax, eax
		jmp	short locret_6CEC7C4D
sub_6CEC7C40	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:6CEC0000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6CEC7C92

loc_6CEC7C8D:				; CODE XREF: .text:6CEC7CA7j
					; .text:6CEC7CAFj ...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6CEC7C92:				; CODE XREF: .text:6CEC7C8Bj
		mov	eax, ds:6CEC003Ch
		cmp	dword ptr [eax+6CEC0000h], 4550h
		lea	edx, [eax+6CEC0000h]
		jnz	short loc_6CEC7C8D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6CEC7C8D
		mov	ebx, [esp+0Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 6CEC0000h
		test	esi, esi
		jz	short loc_6CEC7C8D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6CEC7CD5
; ---------------------------------------------------------------------------

loc_6CEC7CD2:				; CODE XREF: .text:6CEC7CE8j
		add	eax, 28h

loc_6CEC7CD5:				; CODE XREF: .text:6CEC7CD0j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_6CEC7CE3
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6CEC7CF0

loc_6CEC7CE3:				; CODE XREF: .text:6CEC7CDAj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_6CEC7CD2
		jmp	short loc_6CEC7C8D
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7CF0:				; CODE XREF: .text:6CEC7CE1j
		test	eax, eax
		jz	short loc_6CEC7C8D
		mov	eax, [eax+24h]
		pop	ebx
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7D00	proc near		; CODE XREF: .text:6CEC7E28p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:6CEC0000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_6CEC7D30

loc_6CEC7D1D:				; CODE XREF: sub_6CEC7D00+46j
					; sub_6CEC7D00+4Ej ...
		xor	eax, eax

loc_6CEC7D1F:				; CODE XREF: sub_6CEC7D00+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7D30:				; CODE XREF: sub_6CEC7D00+1Bj
		mov	edx, ds:6CEC003Ch
		cmp	dword ptr [edx+6CEC0000h], 4550h
		lea	ecx, [edx+6CEC0000h]
		jnz	short loc_6CEC7D1D
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6CEC7D1D
		mov	esi, [ecx+80h]
		test	esi, esi
		jz	short loc_6CEC7D1D
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_6CEC7D1D
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
		xor	ecx, ecx
		jmp	short loc_6CEC7D74
; ---------------------------------------------------------------------------

loc_6CEC7D71:				; CODE XREF: sub_6CEC7D00+87j
		add	edx, 28h

loc_6CEC7D74:				; CODE XREF: sub_6CEC7D00+6Fj
		mov	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_6CEC7D82
		add	ebx, [edx+8]
		cmp	esi, ebx
		jb	short loc_6CEC7D8B

loc_6CEC7D82:				; CODE XREF: sub_6CEC7D00+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_6CEC7D71
		jmp	short loc_6CEC7D1D
; ---------------------------------------------------------------------------

loc_6CEC7D8B:				; CODE XREF: sub_6CEC7D00+80j
		test	edx, edx
		lea	esi, [esi+0]
		jz	short loc_6CEC7D1D
		add	esi, 6CEC0000h
		jmp	short loc_6CEC7DAA
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7DA0:				; CODE XREF: sub_6CEC7D00+AFj
					; sub_6CEC7D00+B6j
		test	eax, eax
		jle	short loc_6CEC7DC0
		sub	eax, 1
		add	esi, 14h

loc_6CEC7DAA:				; CODE XREF: sub_6CEC7D00+98j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jnz	short loc_6CEC7DA0
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_6CEC7DA0
		jmp	loc_6CEC7D1D
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7DC0:				; CODE XREF: sub_6CEC7D00+A2j
		mov	eax, 6CEC0000h
		add	eax, [esi+0Ch]
		jmp	loc_6CEC7D1F
sub_6CEC7D00	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		xor	edx, edx
		sub	esp, 18h
		mov	eax, ds:dword_6CECB3C4
		test	eax, eax
		jz	short loc_6CEC7E22

loc_6CEC7DDF:				; CODE XREF: .text:6CEC7E6Fj
					; .text:6CEC7E8Aj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6CEC7DE4:				; CODE XREF: .text:6CEC7E53j
					; .text:6CEC7E58j
		movzx	edx, byte ptr [eax+3]
		cmp	dl, 43h
		jz	short loc_6CEC7DF2
		cmp	dl, 63h
		jnz	short loc_6CEC7E20

loc_6CEC7DF2:				; CODE XREF: .text:6CEC7DEBj
		movzx	edx, byte ptr [eax+4]
		cmp	dl, 52h
		jz	short loc_6CEC7E02
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_6CEC7E20

loc_6CEC7E02:				; CODE XREF: .text:6CEC7DF9j
		movzx	edx, byte ptr [eax+5]
		cmp	dl, 54h
		jz	short loc_6CEC7E5E
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_6CEC7E5E
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_6CEC7E5E
		lea	esi, [esi+0]

loc_6CEC7E20:				; CODE XREF: .text:6CEC7DF0j
					; .text:6CEC7E00j ...
		mov	edx, ebx

loc_6CEC7E22:				; CODE XREF: .text:6CEC7DDDj
					; .text:6CEC7E5Cj
		lea	ebx, [edx+1]
		mov	[esp], edx
		call	sub_6CEC7D00
		test	eax, eax
		jz	short loc_6CEC7E75
		movzx	edx, byte ptr [eax]
		cmp	dl, 4Dh
		jz	short loc_6CEC7E3E
		cmp	dl, 6Dh
		jnz	short loc_6CEC7E20

loc_6CEC7E3E:				; CODE XREF: .text:6CEC7E37j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 53h
		jz	short loc_6CEC7E4C
		cmp	dl, 73h
		jnz	short loc_6CEC7E20

loc_6CEC7E4C:				; CODE XREF: .text:6CEC7E45j
		movzx	edx, byte ptr [eax+2]
		cmp	dl, 56h
		jz	short loc_6CEC7DE4
		cmp	dl, 76h
		jz	short loc_6CEC7DE4
		mov	edx, ebx
		jmp	short loc_6CEC7E22
; ---------------------------------------------------------------------------

loc_6CEC7E5E:				; CODE XREF: .text:6CEC7E09j
					; .text:6CEC7E10j ...
		mov	[esp], eax
		call	ds:GetModuleHandleA
		test	eax, eax
		push	ebx
		mov	ds:dword_6CECB3C4, eax
		jnz	loc_6CEC7DDF

loc_6CEC7E75:				; CODE XREF: .text:6CEC7E2Fj
		mov	dword ptr [esp], offset	aMsvcrt_dll ; "msvcrt.dll"
		call	ds:LoadLibraryW
		sub	esp, 4
		mov	ds:dword_6CECB3C4, eax
		jmp	loc_6CEC7DDF
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], esi
		mov	esi, [esp+30h]
		mov	[esp+1Ch], ebx
		mov	[esp+24h], edi
		mov	[esp+28h], ebp
		mov	[esp], esi
		call	strlen
		cmp	eax, 8
		jbe	short loc_6CEC7ED0

loc_6CEC7EB4:				; CODE XREF: .text:6CEC7ED9j
					; .text:6CEC7EF0j ...
		xor	ebx, ebx

loc_6CEC7EB6:				; CODE XREF: .text:6CEC7F2Aj
		mov	eax, ebx
		mov	esi, [esp+20h]
		mov	ebx, [esp+1Ch]
		mov	edi, [esp+24h]
		mov	ebp, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC7ED0:				; CODE XREF: .text:6CEC7EB2j
		cmp	word ptr ds:6CEC0000h, 5A4Dh
		jnz	short loc_6CEC7EB4
		mov	eax, ds:6CEC003Ch
		cmp	dword ptr [eax+6CEC0000h], 4550h
		lea	edx, [eax+6CEC0000h]
		jnz	short loc_6CEC7EB4
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6CEC7EB4
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_6CEC7EB4
		movzx	eax, ax
		xor	edi, edi
		lea	ebx, [edx+eax+18h]
		jmp	short loc_6CEC7F14
; ---------------------------------------------------------------------------

loc_6CEC7F11:				; CODE XREF: .text:6CEC7F31j
		add	ebx, 28h

loc_6CEC7F14:				; CODE XREF: .text:6CEC7F0Fj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], esi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jz	short loc_6CEC7EB6
		add	edi, 1
		cmp	edi, ebp
		jb	short loc_6CEC7F11
		jmp	loc_6CEC7EB4
; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+0Ch]
		mov	edx, [esp+8]
		mov	ecx, [esp+4]
		lock cmpxchg [ecx], edx
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6CEC7F60
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7F60	proc near		; CODE XREF: sub_6CEC1040+53p
					; sub_6CEC1040+C8p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lock cmpxchg [ecx], edx
		retn	0Ch
sub_6CEC7F60	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		lock xchg eax, [edx]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7F90	proc near		; CODE XREF: sub_6CEC1040+1A2p
					; sub_6CEC1040+211p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lock xchg eax, [edx]
		retn	8
sub_6CEC7F90	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6CEC7FC0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7FC0	proc near		; CODE XREF: .text:6CEC48DAp
					; .text:6CEC492Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn	4
sub_6CEC7FC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC7FE0	proc near		; CODE XREF: .text:6CEC4C13j
					; sub_6CEC62E0+1Ep ...

NumOfElements	= dword	ptr -1Ch
SizeOfElements	= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

; FUNCTION CHUNK AT 6CEC7A30 SIZE 00000070 BYTES

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_6CEC8000
		mov	[esp+0Ch+arg_4], eax
		mov	[esp+0Ch+arg_0], edx
		add	esp, 0Ch
		jmp	loc_6CEC7A30
; ---------------------------------------------------------------------------
		align 10h

loc_6CEC8000:				; CODE XREF: sub_6CEC7FE0+Dj
		add	esp, 0Ch
		retn
sub_6CEC7FE0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	loc_6CEC7990
; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6CEC8040
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6CEC8040	proc near		; CODE XREF: .text:6CEC49D4p
					; .text:6CEC4A4Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn	4
sub_6CEC8040	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memset]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6CEC80E0	proc near		; DATA XREF: .text:6CEC8104o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_6CEC1430
		mov	[esp+18h+var_18], offset sub_6CEC1480 ;	_onexit_t
		call	sub_6CEC71B0
		leave
		retn
sub_6CEC80E0	endp

; ---------------------------------------------------------------------------
		align 10h
dword_6CEC8100	dd 0FFFFFFFFh		; DATA XREF: sub_6CEC1880-5Br
					; sub_6CEC1880-4Co ...
		dd offset sub_6CEC80E0
		dd 0
		dd 0FFFFFFFFh
dword_6CEC8110	dd 3Ch dup(0)		; DATA XREF: .data:off_6CEC9000o
		dd 380h	dup(?)
_text		ends

; Section 2. (virtual address 00009000)
; Virtual size			: 00000040 (	 64.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00007600
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 6CEC9000h
off_6CEC9000	dd offset dword_6CEC8110 ; DATA	XREF: sub_6CEC17F0+3r
					; sub_6CEC17F0+13w ...
dword_6CEC9004	dd 0			; DATA XREF: sub_6CEC4E40+Dr
					; sub_6CEC4E40:loc_6CEC4E7Br ...
dword_6CEC9008	dd 0FFFFFFFFh		; DATA XREF: sub_6CEC4E40:loc_6CEC4E5Ao
dword_6CEC900C	dd 0FFFFFFFFh		; DATA XREF: sub_6CEC62E0+2Bw
					; sub_6CEC6320:loc_6CEC6336r ...
dword_6CEC9010	dd 0			; DATA XREF: sub_6CEC6320+Dr
					; sub_6CEC6320:loc_6CEC635Fr ...
dword_6CEC9014	dd 0FFFFFFFFh		; DATA XREF: sub_6CEC6320:loc_6CEC634Eo
off_6CEC9018	dd offset nullsub_1	; DATA XREF: .text:6CEC6AADw
					; .text:6CEC6AE3r
off_6CEC901C	dd offset locret_6CEC6A80 ; DATA XREF: .text:6CEC6AA4w
					; .text:6CEC6AD3r
dword_6CEC9020	dd 0			; DATA XREF: __emutls_get_address:loc_6CEC6F40r
					; __emutls_get_address:loc_6CEC706Dr ...
dword_6CEC9024	dd 0FFFFFFFFh		; DATA XREF: __emutls_get_address:loc_6CEC7056o
dword_6CEC9028	dd 0FFFFFFFFh		; DATA XREF: sub_6CEC1260+1Bw
					; sub_6CEC1260+61w
		dd 0FFFFFFFFh
dword_6CEC9030	dd 2			; DATA XREF: sub_6CEC4E40+3r
					; __deregister_frame_info_bases+20r ...
dword_6CEC9034	dd 0BB40E64Eh		; DATA XREF: .text:6CEC775Fr
					; sub_6CEC77B0+3r ...
dword_6CEC9038	dd 44BF19B1h		; DATA XREF: .text:6CEC7767r
					; sub_6CEC77B0+21w ...
dword_6CEC903C	dd 0			; DATA XREF: sub_6CEC1430+6r
					; sub_6CEC1430+42o
		align 1000h
_data		ends

; Section 3. (virtual address 0000A000)
; Virtual size			: 00000408 (   1032.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00007800
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6CECA000h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: sub_6CEC1430+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_6CEC1430+2Ao
		align 4
		dd 7 dup(0)
		dd 2020100h, 3030303h, 2 dup(4040404h),	4 dup(5050505h)
		dd 8 dup(6060606h), 10h	dup(7070707h), 20h dup(8080808h)
byte_6CECA140	db 0			; DATA XREF: __popcountsi2+Er
					; __popcountsi2+18r ...
		db 2 dup(1), 2
		dd 2 dup(3020201h), 4030302h, 3020201h,	2 dup(4030302h)
		dd 5040403h, 3020201h, 2 dup(4030302h),	5040403h, 4030302h
		dd 2 dup(5040403h), 6050504h, 3020201h,	2 dup(4030302h)
		dd 5040403h, 4030302h, 2 dup(5040403h),	6050504h, 4030302h
		dd 2 dup(5040403h), 6050504h, 5040403h,	2 dup(6050504h)
		dd 7060605h, 3020201h, 2 dup(4030302h),	5040403h, 4030302h
		dd 2 dup(5040403h), 6050504h, 4030302h,	2 dup(5040403h)
		dd 6050504h, 5040403h, 2 dup(6050504h),	7060605h, 4030302h
		dd 2 dup(5040403h), 6050504h, 5040403h,	2 dup(6050504h)
		dd 7060605h, 5040403h, 2 dup(6050504h),	7060605h, 6050504h
		dd 2 dup(7060605h), 8070706h
flt_6CECA240	dd 1.0			; DATA XREF: __powisf2:loc_6CEC1EE0r
flt_6CECA244	dd 1.0			; DATA XREF: __powidf2:loc_6CEC1F30r
flt_6CECA248	dd 1.0			; DATA XREF: __powixf2:loc_6CEC1F80r
flt_6CECA24C	dd 3.4028237e38		; DATA XREF: __mulsc3+215r
flt_6CECA250	dd 3.4028237e38		; DATA XREF: __muldc3+241r
flt_6CECA254	dd 3.4028237e38		; DATA XREF: __mulxc3+221r
flt_6CECA258	dd 3.4028237e38		; DATA XREF: __divsc3+146r
					; __divsc3+397r
flt_6CECA25C	dd -3.4028237e38	; DATA XREF: __divsc3+150r
flt_6CECA260	dd 3.4028237e38		; DATA XREF: __divdc3+146r
					; __divdc3+387r
flt_6CECA264	dd -3.4028237e38	; DATA XREF: __divdc3+150r
flt_6CECA268	dd 3.4028237e38		; DATA XREF: __divxc3+146r
					; __divxc3+393r
flt_6CECA26C	dd -3.4028237e38	; DATA XREF: __divxc3+150r
flt_6CECA270	dd 2.1474836e9		; DATA XREF: __fixunssfsi+7r
flt_6CECA274	dd 2.1474836e9		; DATA XREF: __fixunsdfsi+7r
flt_6CECA278	dd 2.1474836e9		; DATA XREF: __fixunsxfsi+7r
flt_6CECA27C	dd 2.3283064e-10	; DATA XREF: __fixunssfdi+Dr
flt_6CECA280	dd -4.2949673e9		; DATA XREF: __fixunssfdi+45r
flt_6CECA284	dd 2.3283064e-10	; DATA XREF: __fixunsdfdi+Dr
flt_6CECA288	dd -4.2949673e9		; DATA XREF: __fixunsdfdi+45r
flt_6CECA28C	dd 2.3283064e-10	; DATA XREF: __fixunsxfdi+2Cr
flt_6CECA290	dd 1.8446744e19		; DATA XREF: __fixunsxfdi:loc_6CEC3FA7r
flt_6CECA294	dd 4.2949673e9		; DATA XREF: __floatdisf+53r
flt_6CECA298	dd 4.2949673e9		; DATA XREF: __floatdidf+9r
flt_6CECA29C	dd 4.2949673e9		; DATA XREF: __floatdixf+11r
flt_6CECA2A0	dd 4.2949673e9		; DATA XREF: __floatundisf+30r
flt_6CECA2A4	dd 4.2949673e9		; DATA XREF: __floatundidf+19r
flt_6CECA2A8	dd 4.2949673e9		; DATA XREF: __floatundixf+1Dr
off_6CECA2AC	dd offset loc_6CEC4F97	; DATA XREF: sub_6CEC4F50:loc_6CEC4F90r
		dd offset loc_6CEC5032	; jump table for switch	statement
		dd offset loc_6CEC5070
		dd offset loc_6CEC4F97
		dd offset loc_6CEC4FE0
		dd offset loc_6CEC4F87
		dd offset loc_6CEC4F87
		dd offset loc_6CEC4F87
		dd offset loc_6CEC4F87
		dd offset loc_6CEC4FE7
		dd offset loc_6CEC5061
		dd offset loc_6CEC4F97
		dd offset loc_6CEC4FE0
off_6CECA2E0	dd offset loc_6CEC6C95	; DATA XREF: __gcc_personality_sj0+A6r
		dd offset loc_6CEC6C75	; jump table for switch	statement
		dd offset loc_6CEC6C9D
		dd offset loc_6CEC6C95
		dd offset loc_6CEC6CA5
		dd offset loc_6CEC6C6F
		dd offset loc_6CEC6C6F
		dd offset loc_6CEC6C6F
		dd offset loc_6CEC6C6F
		dd offset loc_6CEC6C85
		dd offset loc_6CEC6C9D
		dd offset loc_6CEC6C95
		dd offset loc_6CEC6CA5
off_6CECA314	dd offset TlsCallback_0	; DATA XREF: sub_6CEC1040:loc_6CEC1137r
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_6CEC72D0+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_6CEC7330+13Ao
; char Format[]
Format		db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_6CEC7330+126o
					; sub_6CEC7480+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_6CEC7480+267o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_6CEC7480+F4o
		align 4
off_6CECA3E8	dd offset dword_6CECB060 ; DATA	XREF: .text:6CEC7778o
		dd offset dword_6CECB0C0
aMsvcrt_dll:				; DATA XREF: .text:loc_6CEC7E75o
		unicode	0, <msvcrt.dll>,0
		align 4
dword_6CECA408	dd 0			; DATA XREF: sub_6CEC7480+57o
					; sub_6CEC7480+5Co ...
dword_6CECA40C	dd 0			; DATA XREF: sub_6CEC7480+7Ar
dword_6CECA410	dd 0			; DATA XREF: sub_6CEC7480+84r
dword_6CECA414	dd 7Bh dup(0)		; DATA XREF: sub_6CEC7480+8Do
		align 1000h
_rdata		ends

; Section 4. (virtual address 0000B000)
; Virtual size			: 000003E8 (   1000.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 6CECB000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_6CECB000	dd ?			; DATA XREF: sub_6CEC1040+Dr
					; sub_6CEC1040+22w ...
dword_6CECB004	dd ?			; DATA XREF: sub_6CEC1880+3r
					; sub_6CEC1880:loc_6CEC1891w
dword_6CECB008	dd ?			; DATA XREF: sub_6CEC5600+1A2o
					; sub_6CEC5600+1C4o ...
dword_6CECB00C	dd ?			; DATA XREF: __deregister_frame_info_bases:loc_6CEC5BBEr
					; __deregister_frame_info_bases+3Bo ...
dword_6CECB010	dd ?			; DATA XREF: __deregister_frame_info_bases:loc_6CEC5BE3r
					; __deregister_frame_info_bases+5Do ...
dword_6CECB014	dd ?			; DATA XREF: sub_6CEC4E00+Bw
					; __deregister_frame_info_bases:loc_6CEC5C47o ...
; HANDLE hHandle
hHandle		dd ?			; DATA XREF: sub_6CEC4E00+35w
					; __deregister_frame_info_bases+CEr ...
dword_6CECB01C	dd ?			; DATA XREF: sub_6CEC6420:loc_6CEC6440w
					; sub_6CEC6540+19w ...
; DWORD	dwTlsIndex
dwTlsIndex	dd ?			; DATA XREF: sub_6CEC62E0+Ew
					; sub_6CEC6420+C9r ...
dword_6CECB024	dd ?			; DATA XREF: sub_6CEC6DE0+Bw
					; __emutls_get_address:loc_6CEC6F4Do ...
; HANDLE hSemaphore
hSemaphore	dd ?			; DATA XREF: sub_6CEC6DE0+35w
					; __emutls_get_address+13Dr ...
; DWORD	dword_6CECB02C
dword_6CECB02C	dd ?			; DATA XREF: sub_6CEC6DE0+45w
					; __emutls_get_address:loc_6CEC6EABr ...
dword_6CECB030	dd ?			; DATA XREF: __emutls_get_address+10Er
					; __emutls_get_address+117w
TlsIndex	dd 4 dup(?)		; DATA XREF: .tls:TlsIndex_ptro
dword_6CECB044	dd ?			; DATA XREF: DllEntryPoint+7w
dword_6CECB048	dd ?			; DATA XREF: sub_6CEC7330+2Cr
					; sub_6CEC7330+65r ...
dword_6CECB04C	dd ?			; DATA XREF: sub_6CEC7330:loc_6CEC7350r
					; sub_6CEC7330:loc_6CEC73F2w ...
dword_6CECB050	dd ?			; DATA XREF: sub_6CEC7480+9r
					; sub_6CEC7480:loc_6CEC74A0w
		align 10h
dword_6CECB060	dd ?			; DATA XREF: .text:6CEC7732w
					; .rdata:off_6CECA3E8o
dword_6CECB064	dd ?			; DATA XREF: .text:6CEC773Cw
		dd ?
dword_6CECB06C	dd ?			; DATA XREF: .text:6CEC774Bw
		dd 14h dup(?)
dword_6CECB0C0	dd 2Bh dup(?)		; DATA XREF: .rdata:6CECA3ECo
dword_6CECB16C	dd ?			; DATA XREF: .text:6CEC775Aw
		dd 2 dup(?)
dword_6CECB178	dd ?			; DATA XREF: .text:6CEC7746w
		dd 2 dup(?)
dword_6CECB184	dd ?			; DATA XREF: .text:6CEC772Cw
		dd 86h dup(?)
dword_6CECB3A0	dd ?			; DATA XREF: sub_6CEC7880+7r
					; sub_6CEC7900+26r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_6CEC7880:loc_6CEC7898o
					; sub_6CEC7880:loc_6CEC78E5o ...
dword_6CECB3BC	dd ?			; DATA XREF: sub_6CEC7880+25r
					; .text:6CEC79B5r ...
		dd ?
dword_6CECB3C4	dd ?			; DATA XREF: .text:6CEC7DD6r
					; .text:6CEC7E6Aw ...
		dd 4 dup(?)
dword_6CECB3D8	dd ?			; DATA XREF: sub_6CEC1000+21w
					; sub_6CEC1040+143r ...
dword_6CECB3DC	dd ?			; DATA XREF: sub_6CEC1000+1Cw
					; sub_6CEC1040:loc_6CEC1170r ...
dword_6CECB3E0	dd ?			; DATA XREF: sub_6CEC1040+4Co
					; sub_6CEC1040+C1o ...
dword_6CECB3E4	dd ?			; DATA XREF: sub_6CEC1040+5Fr
					; sub_6CEC1040:loc_6CEC1116r ...
		align 1000h
_bss		ends

;
; Imports from KERNEL32.dll
;
; Section 6. (virtual address 0000D000)
; Virtual size			: 00000588 (   1416.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00008800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: .text:6CEC4B2Dp
					; DATA XREF: .text:6CEC4B2Dr
; HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpName)
		extrn CreateSemaphoreA:dword ; CODE XREF: .text:6CEC4ACBp
					; .text:6CEC4B0Dp ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_6CEC7900+41p
					; DATA XREF: sub_6CEC7900+41r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_6CEC7880+1Fp
					; .text:6CEC79AFp ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:6CEC7788p
					; DATA XREF: .text:6CEC7788r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_6CEC77B0+6Cp
					; DATA XREF: sub_6CEC77B0+6Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: .text:6CEC4978p
					; .text:6CEC49C9p ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: .text:6CEC4B7Bp
					; sub_6CEC62E0:loc_6CEC6314p ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_6CEC1430+16p
					; .text:6CEC7E61p
					; DATA XREF: ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_6CEC1430+35p
					; DATA XREF: sub_6CEC1430+35r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_6CEC77B0+57p
					; DATA XREF: sub_6CEC77B0+57r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_6CEC77B0+7Cp
					; DATA XREF: sub_6CEC77B0+7Cr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_6CEC7900+77p
					; DATA XREF: sub_6CEC7900+77r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_6CEC7880+6Cp
					; .text:6CEC79E6p ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: .text:6CEC7E7Cp
					; DATA XREF: .text:6CEC7E7Cr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_6CEC77B0+8Bp
					; DATA XREF: sub_6CEC77B0+8Br
; BOOL __stdcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG	lpPreviousCount)
		extrn ReleaseSemaphore:dword ; CODE XREF: .text:6CEC48FCp
					; .text:6CEC4951p ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: .text:6CEC4B98p
					; _Unwind_Backtrace+8Fp ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: .text:6CEC776Fp
					; DATA XREF: .text:6CEC776Fr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_6CEC1040+37p
					; sub_6CEC1040+B0p ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:6CEC7799p
					; DATA XREF: .text:6CEC7799r
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: .text:6CEC4BF3p
					; sub_6CEC62E0+3p ...
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; CODE XREF: .text:6CEC4BBAp
					; DATA XREF: .text:6CEC4BBAr
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: .text:6CEC4B8Ap
					; _Unwind_Backtrace+81p ...
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: .text:6CEC4B52p
					; sub_6CEC6420+D5p ...
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:6CEC777Fp
					; DATA XREF: .text:6CEC777Fr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	__enable_execute_stack+46p
					; .text:6CEC17B8p ...
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: __enable_execute_stack+1Ap
					; sub_6CEC7330+A8p ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: .text:6CEC49F3p
					; .text:6CEC4A6Ep ...

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _iob:dword	; DATA XREF: sub_6CEC72D0+4r
					; sub_6CEC72D0+3Cr
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_6CEC70F0+A3p
					; DATA XREF: sub_6CEC70F0+A3r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; void *__cdecl	realloc(void *Memory, size_t NewSize)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


; Section 7. (virtual address 0000E000)
; Virtual size			: 0000002C (	 44.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00008E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 6CECE000h
dword_6CECE000	dd 0			; DATA XREF: sub_6CEC1040+1DDo
dword_6CECE004	dd 0			; DATA XREF: sub_6CEC1040+1D5o
dword_6CECE008	dd 0			; DATA XREF: sub_6CEC1040+1C9o
		dd offset sub_6CEC1000
dword_6CECE010	dd 2 dup(0)		; DATA XREF: sub_6CEC1040+1C1o
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 8
dword_6CECE028	dd 76h dup(0)		; DATA XREF: TlsCallback_0:loc_6CEC7261o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 0000F000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00009000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 6CECF000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end DllEntryPoint
