;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5B67B5E5605678160747255725CE52B2
; Input	CRC32 :	D219D2ED

; File Name   :	C:\compspace\compare\gpg\dlls\original\pango-querymodules.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001418 (   5144.)
; Section size in file		: 00001600 (   5632.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl atexit(void (__cdecl *)())
		public _atexit
_atexit		proc near		; CODE XREF: ___do_global_ctors+31p
					; _register_frame_ctor+12p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:__imp__atexit
		leave
		jmp	eax
_atexit		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _onexit_t __cdecl _onexit(_onexit_t Func)
		public __onexit
__onexit	proc near

Func		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:__imp___onexit
		leave
		jmp	eax
__onexit	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

___mingw_CRTStartup proc near		; CODE XREF: _WinMainCRTStartup+13p
					; _mainCRTStartup+13p

lpTopLevelExceptionFilter= dword ptr -38h
argv		= dword	ptr -34h
envp		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, ds:___dyn_tls_init_callback
		test	eax, eax
		jz	short loc_40104C
		mov	[esp+38h+envp],	0
		mov	[esp+38h+argv],	2
		mov	[esp+38h+lpTopLevelExceptionFilter], 0
		call	eax ; __dyn_tls_init(x,x,x) ; __dyn_tls_init(x,x,x)
		sub	esp, 0Ch

loc_40104C:				; CODE XREF: ___mingw_CRTStartup+Ej
		mov	[esp+38h+lpTopLevelExceptionFilter], offset __gnu_exception_handler@4 ;	lpTopLevelExceptionFilter
		call	_SetUnhandledExceptionFilter@4 ; SetUnhandledExceptionFilter(x)
		sub	esp, 4
		call	___cpu_features_init
		call	_fpreset
		lea	eax, [ebp+var_10]
		mov	[ebp+var_10], 0
		mov	[esp+38h+var_28], eax
		mov	eax, __CRT_glob
		mov	[esp+38h+argv],	offset __argv
		mov	[esp+38h+lpTopLevelExceptionFilter], offset __argc
		mov	[esp+38h+var_2C], eax
		lea	eax, [ebp+var_C]
		mov	[esp+38h+envp],	eax
		call	___getmainargs
		mov	eax, ds:__CRT_fmode
		test	eax, eax
		jnz	short loc_4010F0

loc_4010A0:				; CODE XREF: ___mingw_CRTStartup+112j
		call	___p__fmode
		mov	edx, __fmode
		mov	[eax], edx
		call	__pei386_runtime_relocator
		and	esp, 0FFFFFFF0h
		call	___main
		call	___p__environ
		mov	eax, [eax]
		mov	[esp+38h+envp],	eax ; envp
		mov	eax, ds:__argv
		mov	[esp+38h+argv],	eax ; argv
		mov	eax, ds:__argc
		mov	[esp+38h+lpTopLevelExceptionFilter], eax ; argc
		call	_main
		mov	ebx, eax
		call	__cexit
		mov	[esp+38h+lpTopLevelExceptionFilter], ebx ; uExitCode
		call	_ExitProcess@4	; ExitProcess(x)
; ---------------------------------------------------------------------------
		align 10h

loc_4010F0:				; CODE XREF: ___mingw_CRTStartup+7Ej
		mov	ebx, ds:__imp___iob
		mov	__fmode, eax
		mov	[esp+38h+argv],	eax
		mov	eax, [ebx+10h]
		mov	[esp+38h+lpTopLevelExceptionFilter], eax
		call	__setmode
		mov	eax, ds:__CRT_fmode
		mov	[esp+38h+argv],	eax
		mov	eax, [ebx+30h]
		mov	[esp+38h+lpTopLevelExceptionFilter], eax
		call	__setmode
		mov	eax, ds:__CRT_fmode
		mov	[esp+38h+argv],	eax
		mov	eax, [ebx+50h]
		mov	[esp+38h+lpTopLevelExceptionFilter], eax
		call	__setmode
		jmp	loc_4010A0
___mingw_CRTStartup endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

		public _WinMainCRTStartup
_WinMainCRTStartup proc	near

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_18], 2
		call	ds:__imp____set_app_type
		call	___mingw_CRTStartup
_WinMainCRTStartup endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

		public _mainCRTStartup
_mainCRTStartup	proc near

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_18], 1
		call	ds:__imp____set_app_type
		call	___mingw_CRTStartup
_mainCRTStartup	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; LONG __stdcall _gnu_exception_handler(struct _EXCEPTION_POINTERS *ExceptionInfo)
__gnu_exception_handler@4 proc near	; DATA XREF: ___mingw_CRTStartup:loc_40104Co

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
ExceptionInfo	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+ExceptionInfo]
		mov	eax, [eax]
		mov	eax, [eax]
		cmp	eax, 0C0000091h
		ja	short loc_4011D0
		cmp	eax, 0C000008Dh
		jb	short loc_4011E7

loc_40119C:				; CODE XREF: _gnu_exception_handler(x)+65j
		mov	ebx, 1

loc_4011A1:				; CODE XREF: _gnu_exception_handler(x)+B2j
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 8
		call	_signal
		cmp	eax, 1
		jz	loc_4012BD
		test	eax, eax
		jnz	loc_401270

loc_4011C6:				; CODE XREF: _gnu_exception_handler(x)+63j
					; _gnu_exception_handler(x)+77j ...
		xor	eax, eax

loc_4011C8:				; CODE XREF: _gnu_exception_handler(x)+A7j
					; _gnu_exception_handler(x)+E7j ...
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_4011D0:				; CODE XREF: _gnu_exception_handler(x)+13j
		cmp	eax, 0C0000094h
		jz	short loc_401230
		cmp	eax, 0C0000096h
		jz	short loc_4011F9
		cmp	eax, 0C0000093h
		jnz	short loc_4011C6
		jmp	short loc_40119C
; ---------------------------------------------------------------------------

loc_4011E7:				; CODE XREF: _gnu_exception_handler(x)+1Aj
		cmp	eax, 0C0000005h
		lea	esi, [esi+0]
		jz	short loc_401237
		cmp	eax, 0C000001Dh
		jnz	short loc_4011C6

loc_4011F9:				; CODE XREF: _gnu_exception_handler(x)+5Cj
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 4
		call	_signal
		cmp	eax, 1
		jz	short loc_401285
		test	eax, eax
		jz	short loc_4011C6
		mov	[esp+18h+var_18], 4
		lea	esi, [esi+0]
		call	eax
		mov	eax, 0FFFFFFFFh
		jmp	short loc_4011C8
; ---------------------------------------------------------------------------
		align 10h

loc_401230:				; CODE XREF: _gnu_exception_handler(x)+55j
		xor	ebx, ebx
		jmp	loc_4011A1
; ---------------------------------------------------------------------------

loc_401237:				; CODE XREF: _gnu_exception_handler(x)+70j
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 0Bh
		call	_signal
		cmp	eax, 1
		jz	short loc_4012A1
		test	eax, eax
		jz	loc_4011C6
		mov	[esp+18h+var_18], 0Bh
		nop
		call	eax
		mov	eax, 0FFFFFFFFh
		jmp	loc_4011C8
; ---------------------------------------------------------------------------
		align 10h

loc_401270:				; CODE XREF: _gnu_exception_handler(x)+40j
		mov	[esp+18h+var_18], 8
		call	eax
		mov	eax, 0FFFFFFFFh
		xchg	ax, ax
		jmp	loc_4011C8
; ---------------------------------------------------------------------------

loc_401285:				; CODE XREF: _gnu_exception_handler(x)+90j
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 4
		call	_signal
		or	eax, 0FFFFFFFFh
		jmp	loc_4011C8
; ---------------------------------------------------------------------------

loc_4012A1:				; CODE XREF: _gnu_exception_handler(x)+CEj
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 0Bh
		call	_signal
		or	eax, 0FFFFFFFFh
		jmp	loc_4011C8
; ---------------------------------------------------------------------------

loc_4012BD:				; CODE XREF: _gnu_exception_handler(x)+38j
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 8
		call	_signal
		test	ebx, ebx
		jnz	short loc_4012DF

loc_4012D5:				; CODE XREF: _gnu_exception_handler(x)+165j
		mov	eax, 0FFFFFFFFh
		jmp	loc_4011C8
; ---------------------------------------------------------------------------

loc_4012DF:				; CODE XREF: _gnu_exception_handler(x)+153j
		nop
		call	_fpreset
		jmp	short loc_4012D5
__gnu_exception_handler@4 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ___gcc_register_frame
___gcc_register_frame proc near		; CODE XREF: _register_frame_ctor+6p

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcc_s_dw2-1.dll"
		call	_GetModuleHandleA@4 ; GetModuleHandleA(x)
		push	edx
		test	eax, eax
		jz	short loc_40136C
		mov	[esp+18h+lpProcName], offset ProcName ;	"__register_frame_info"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	_GetProcAddress@8 ; GetProcAddress(x,x)
		sub	esp, 8

loc_40131A:				; CODE XREF: ___gcc_register_frame+81j
		test	eax, eax
		jz	short loc_40132F
		mov	[esp+18h+lpProcName], offset _obj
		mov	[esp+18h+lpModuleName],	offset ___FRAME_END__
		call	eax

loc_40132F:				; CODE XREF: ___gcc_register_frame+2Cj
		mov	ecx, _data
		test	ecx, ecx
		jz	short locret_40136A
		mov	[esp+18h+lpModuleName],	offset aLibgcj11_dll ; "libgcj-11.dll"
		call	_GetModuleHandleA@4 ; GetModuleHandleA(x)
		push	edx
		test	eax, eax
		jz	short loc_401374
		mov	[esp+18h+lpProcName], offset a_jv_registercl ; "_Jv_RegisterClasses"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	_GetProcAddress@8 ; GetProcAddress(x,x)
		sub	esp, 8

loc_40135D:				; CODE XREF: ___gcc_register_frame+89j
		test	eax, eax
		jz	short locret_40136A
		mov	[esp+18h+lpModuleName],	offset _data
		call	eax

locret_40136A:				; CODE XREF: ___gcc_register_frame+47j
					; ___gcc_register_frame+6Fj
		leave
		retn
; ---------------------------------------------------------------------------

loc_40136C:				; CODE XREF: ___gcc_register_frame+15j
		mov	eax, 0
		jmp	short loc_40131A
; ---------------------------------------------------------------------------
		align 4

loc_401374:				; CODE XREF: ___gcc_register_frame+58j
		mov	eax, 0
		jmp	short loc_40135D
___gcc_register_frame endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl __gcc_deregister_frame()
		public ___gcc_deregister_frame
___gcc_deregister_frame	proc near	; DATA XREF: _register_frame_ctor+Bo

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcc_s_dw2-1.dll"
		call	_GetModuleHandleA@4 ; GetModuleHandleA(x)
		push	ecx
		test	eax, eax
		jz	short loc_4013B8
		mov	[esp+18h+lpProcName], offset a__deregister_f ; "__deregister_frame_info"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	_GetProcAddress@8 ; GetProcAddress(x,x)
		sub	esp, 8

loc_4013A6:				; CODE XREF: ___gcc_deregister_frame+41j
		test	eax, eax
		jz	short locret_4013B3
		mov	[esp+18h+lpModuleName],	offset ___FRAME_END__
		call	eax

locret_4013B3:				; CODE XREF: ___gcc_deregister_frame+2Cj
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_4013B8:				; CODE XREF: ___gcc_deregister_frame+15j
		mov	eax, 0
		jmp	short loc_4013A6
___gcc_deregister_frame	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

_show_version	proc near		; DATA XREF: _main+3Eo

Code		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_10], offset a1_29_4 ; "1.29.4"
		mov	[esp+18h+var_14], offset aPango	; "pango"
		mov	[esp+18h+Code],	offset aPangoQuerymodu ; "pango-querymodules (%s) %s\n"
		call	_g_printf
		mov	[esp+18h+var_14], offset a1_6_0	; "1.6.0"
		mov	[esp+18h+Code],	offset aModuleInterfac ; "module interface version: %s\n"
		call	_g_printf
		mov	[esp+18h+Code],	0 ; Code
		call	_exit
_show_version	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_query_module	proc near		; CODE XREF: _main+D4p	_main+1A7p

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_24		= byte ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, eax
		mov	esi, edx
		mov	[esp+78h+var_78], edx
		call	_g_path_is_absolute
		test	eax, eax
		jz	short loc_401484
		mov	[esp+78h+var_78], esi
		call	_g_strdup
		mov	esi, eax

loc_401427:				; CODE XREF: _query_module+96j
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], esi
		call	_g_module_open_utf8
		mov	edi, eax
		test	eax, eax
		jz	loc_401658
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aScript_engine_ ; "script_engine_list"
		mov	[esp+78h+var_78], edi
		call	_g_module_symbol
		test	eax, eax
		jnz	short loc_40149C

loc_40145C:				; CODE XREF: _query_module+B1j
					; _query_module+CCj ...
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], offset aSDoesNotExport ; "%s does not	export Pango module API\n"
		call	_g_printerr

loc_40146C:				; CODE XREF: _query_module+101j
					; _query_module+24Ej
		mov	[esp+78h+var_78], esi
		call	_g_free
		mov	[esp+78h+var_78], edi
		call	_g_module_close

loc_40147C:				; CODE XREF: _query_module+285j
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_401484:				; CODE XREF: _query_module+17j
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	_g_build_filename
		mov	esi, eax
		jmp	short loc_401427
; ---------------------------------------------------------------------------

loc_40149C:				; CODE XREF: _query_module+56j
		lea	eax, [ebp+var_20]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aScript_engin_0 ; "script_engine_init"
		mov	[esp+78h+var_78], edi
		call	_g_module_symbol
		test	eax, eax
		jz	short loc_40145C
		lea	eax, [ebp+var_24]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aScript_engin_1 ; "script_engine_exit"
		mov	[esp+78h+var_78], edi
		call	_g_module_symbol
		test	eax, eax
		jz	short loc_40145C
		lea	eax, [ebp+var_28]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aScript_engin_2 ; "script_engine_create"
		mov	[esp+78h+var_78], edi
		call	_g_module_symbol
		test	eax, eax
		jz	loc_40145C
		lea	eax, [ebp+var_30]
		mov	[esp+78h+var_74], eax
		lea	eax, [ebp+var_2C]
		mov	[esp+78h+var_78], eax
		call	[ebp+var_1C]
		cmp	[ebp+var_30], 0
		jle	loc_40146C
		mov	[ebp+var_3C], 0
		mov	[ebp+var_40], 0
		mov	eax, ds:__IAT_start__
		mov	eax, [eax]
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], esi
		mov	[ebp+var_4C], edi

loc_401529:				; CODE XREF: _query_module+242j
		mov	edx, [ebp+var_44]
		mov	ecx, [ebp+var_48]
		jmp	short loc_401552
; ---------------------------------------------------------------------------
		align 4

loc_401534:				; CODE XREF: _query_module+153j
		cmp	al, 22h
		jz	loc_4016A7
		cmp	al, 5Ch
		jz	loc_4016A7
		movzx	eax, al
		test	byte ptr [ecx+eax*2+1],	1
		jnz	loc_4016A7

loc_401552:				; CODE XREF: _query_module+12Bj
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_401534
		mov	eax, [ebp+var_44]
		mov	[esp+78h+var_78], eax
		call	_g_strdup
		mov	ebx, eax
		mov	edx, offset byte_4040B3

loc_40156B:				; CODE XREF: _query_module+324j
		mov	eax, [ebp+var_3C]
		add	eax, [ebp+var_2C]
		mov	ecx, [eax+8]
		mov	[esp+78h+var_60], ecx
		mov	ecx, [eax+4]
		mov	[esp+78h+var_64], ecx
		mov	eax, [eax]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], edx
		mov	[esp+78h+var_70], ebx
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], offset aSSSSSS ; "%s%s%s %s %s %s"
		call	_g_printf
		mov	[esp+78h+var_78], ebx
		call	_g_free
		mov	edx, [ebp+var_3C]
		add	edx, [ebp+var_2C]
		mov	eax, [edx+10h]
		test	eax, eax
		jle	short loc_40162D
		xor	esi, esi

loc_4015B4:				; CODE XREF: _query_module+227j
		lea	eax, ds:0[esi*8]
		add	eax, [edx+0Ch]
		mov	edi, [eax+4]
		mov	ebx, [eax]
		jmp	short loc_4015ED
; ---------------------------------------------------------------------------
		align 4

loc_4015C8:				; CODE XREF: _query_module+204j
		mov	[esp+78h+var_6C], ebx
		mov	[esp+78h+var_70], offset aEngineReported ; "Engine reported invalid script value %d"...
		mov	[esp+78h+var_74], 10h
		mov	[esp+78h+var_78], offset aPango_0 ; "Pango"
		call	_g_log
		mov	ebx, 0FFFFFFFFh

loc_4015ED:				; CODE XREF: _query_module+1BFj
		mov	eax, ds:_class_12435
		test	eax, eax
		jz	loc_401690

loc_4015FA:				; CODE XREF: _query_module+29Ej
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], eax
		call	_g_enum_get_value
		test	eax, eax
		jz	short loc_4015C8
		mov	[esp+78h+var_70], edi
		mov	eax, [eax+8]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], offset aSS ; " %s:%s"
		call	_g_printf
		inc	esi
		mov	edx, [ebp+var_3C]
		add	edx, [ebp+var_2C]
		cmp	[edx+10h], esi
		jg	short loc_4015B4

loc_40162D:				; CODE XREF: _query_module+1ACj
		mov	[esp+78h+var_78], offset asc_404192 ; "\n"
		call	_g_printf
		inc	[ebp+var_40]
		add	[ebp+var_3C], 14h
		mov	eax, [ebp+var_40]
		cmp	[ebp+var_30], eax
		jg	loc_401529
		mov	esi, [ebp+var_44]
		mov	edi, [ebp+var_4C]
		jmp	loc_40146C
; ---------------------------------------------------------------------------
		align 4

loc_401658:				; CODE XREF: _query_module+37j
		call	_g_module_error
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], offset aCannotLoadModu ; "Cannot load	module %s: %s\n"
		call	_g_printerr
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], offset aSDoesNotExport ; "%s does not	export Pango module API\n"
		call	_g_printerr
		mov	[esp+78h+var_78], esi
		call	_g_free
		jmp	loc_40147C
; ---------------------------------------------------------------------------
		align 10h

loc_401690:				; CODE XREF: _query_module+1F0j
		call	_pango_script_get_type
		mov	[esp+78h+var_78], eax
		call	_g_type_class_ref
		mov	ds:_class_12435, eax
		jmp	loc_4015FA
; ---------------------------------------------------------------------------

loc_4016A7:				; CODE XREF: _query_module+132j
					; _query_module+13Aj ...
		mov	[esp+78h+var_78], 0
		call	_g_string_new
		mov	esi, eax
		mov	ebx, [ebp+var_44]

loc_4016B8:				; CODE XREF: _query_module+2F5j
					; _query_module+30Bj ...
		mov	al, [ebx]
		inc	ebx
		cmp	al, 22h
		jz	short loc_4016E9

loc_4016BF:				; CODE XREF: _query_module+2E3j
		jg	short loc_4016FB
		test	al, al
		jz	short loc_401711
		cmp	al, 0Ah
		jz	short loc_40172D

loc_4016C9:				; CODE XREF: _query_module+2F9j
		mov	ecx, [esi+4]
		lea	edx, [ecx+1]
		cmp	edx, [esi+8]
		jnb	short loc_401742
		mov	edi, [esi]
		mov	[edi+ecx], al
		mov	[esi+4], edx
		mov	eax, [esi]
		mov	byte ptr [eax+edx], 0
		mov	al, [ebx]
		inc	ebx
		cmp	al, 22h
		jnz	short loc_4016BF

loc_4016E9:				; CODE XREF: _query_module+2B9j
		mov	[esp+78h+var_74], offset asc_404146 ; "\\\""
		mov	[esp+78h+var_78], esi
		call	_g_string_append
		jmp	short loc_4016B8
; ---------------------------------------------------------------------------

loc_4016FB:				; CODE XREF: _query_module:loc_4016BFj
		cmp	al, 5Ch
		jnz	short loc_4016C9
		mov	[esp+78h+var_74], offset asc_404149 ; "\\\\"
		mov	[esp+78h+var_78], esi
		call	_g_string_append
		jmp	short loc_4016B8
; ---------------------------------------------------------------------------

loc_401711:				; CODE XREF: _query_module+2BFj
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], esi
		call	_g_string_free
		mov	ebx, eax
		mov	edx, offset asc_4040B1 ; "\""
		jmp	loc_40156B
; ---------------------------------------------------------------------------

loc_40172D:				; CODE XREF: _query_module+2C3j
		mov	[esp+78h+var_74], offset aN ; "\\n"
		mov	[esp+78h+var_78], esi
		call	_g_string_append
		jmp	loc_4016B8
; ---------------------------------------------------------------------------

loc_401742:				; CODE XREF: _query_module+2CEj
		movsx	eax, al
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 0FFFFFFFFh
		mov	[esp+78h+var_78], esi
		call	_g_string_insert_c
		jmp	loc_4016B8
_query_module	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near		; CODE XREF: ___mingw_CRTStartup+B6p

Code		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_14		= dword	ptr -14h
argc		= dword	ptr  8
argv		= dword	ptr  0Ch
envp		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF0h
		push	edi
		push	esi
		push	ebx
		sub	esp, 64h
		call	___main
		mov	[esp+70h+var_14], 0
		lea	edi, [esp+70h+var_4C]
		mov	ecx, 38h
		xor	eax, eax
		rep stosb
		mov	[esp+70h+var_4C], offset aVersion ; "version"
		mov	[esp+70h+var_44], 8
		mov	[esp+70h+var_40], 3
		mov	[esp+70h+var_3C], offset _show_version
		mov	[esp+70h+var_38], offset aShowVersionNum ; "Show version numbers"
		mov	[esp+70h+Code],	offset aModule___ ; "- [MODULE]..."
		call	_g_option_context_new
		mov	ebx, eax
		mov	[esp+70h+var_68], 0
		lea	eax, [esp+70h+var_4C]
		mov	[esp+70h+var_6C], eax
		mov	[esp+70h+Code],	ebx
		call	_g_option_context_add_main_entries
		lea	eax, [esp+70h+var_14]
		mov	[esp+70h+var_64], eax
		lea	eax, [ebp+argv]
		mov	[esp+70h+var_68], eax
		lea	eax, [ebp+argc]
		mov	[esp+70h+var_6C], eax
		mov	[esp+70h+Code],	ebx
		call	_g_option_context_parse
		test	eax, eax
		jz	loc_401981
		mov	[esp+70h+Code],	ebx
		call	_g_option_context_free
		call	_g_type_init
		mov	[esp+70h+Code],	offset aPangoModulesFi ; "# Pango Modules file\n# Automatically	g"...
		call	_g_printf
		cmp	[ebp+argc], 1
		jz	short loc_401854
		call	_g_get_current_dir_utf8
		mov	esi, eax
		cmp	[ebp+argc], 1
		jle	short loc_40183F
		mov	ebx, 1
		nop

loc_40182C:				; CODE XREF: _main+DDj
		mov	eax, [ebp+argv]
		mov	edx, [eax+ebx*4]
		mov	eax, esi
		call	_query_module
		inc	ebx
		cmp	[ebp+argc], ebx
		jg	short loc_40182C

loc_40183F:				; CODE XREF: _main+C4j
		mov	[esp+70h+Code],	esi
		call	_g_free
		xor	eax, eax
		add	esp, 64h
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_401854:				; CODE XREF: _main+B7j
		mov	[esp+70h+Code],	offset aPangoModulespa ; "Pango/ModulesPath"
		call	_pango_config_key_get
		mov	ebx, eax
		test	eax, eax
		jz	loc_401955

loc_40186A:				; CODE XREF: _main+21Cj
		mov	[esp+70h+var_6C], ebx
		mov	[esp+70h+Code],	offset aModulespathS ; "# ModulesPath =	%s\n#\n"
		call	_g_printf
		mov	[esp+70h+Code],	ebx
		call	_pango_split_file_list
		mov	[esp+70h+var_5C], eax
		mov	[esp+70h+Code],	ebx
		call	_g_free
		mov	edx, [esp+70h+var_5C]
		mov	eax, [edx]
		test	eax, eax
		jz	loc_40193F
		add	edx, 4
		mov	[esp+70h+var_54], edx
		mov	ecx, [esp+70h+var_5C]
		mov	[esp+70h+var_58], ecx
		nop

loc_4018AC:				; CODE XREF: _main+1D9j
		mov	[esp+70h+var_68], 0
		mov	[esp+70h+var_6C], 0
		mov	[esp+70h+Code],	eax
		call	_g_dir_open_utf8
		mov	ebx, eax
		test	eax, eax
		jz	short loc_401924
		xchg	ax, ax

loc_4018CC:				; CODE XREF: _main+18Dj _main+19Fj
		mov	[esp+70h+Code],	ebx
		call	_g_dir_read_name_utf8
		mov	edx, eax
		test	eax, eax
		jz	short loc_40191C

loc_4018DA:				; CODE XREF: _main+1B8j
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		xor	eax, eax
		repne scasb
		not	ecx
		lea	eax, [ecx-1]
		cmp	eax, 4
		jle	short loc_4018CC
		lea	esi, [edx+ecx-5]
		mov	edi, offset a_dll ; ".dll"
		mov	ecx, 5
		repe cmpsb
		jnz	short loc_4018CC
		mov	ecx, [esp+70h+var_58]
		mov	eax, [ecx]
		call	_query_module
		mov	[esp+70h+Code],	ebx
		call	_g_dir_read_name_utf8
		mov	edx, eax
		test	eax, eax
		jnz	short loc_4018DA
		xchg	ax, ax

loc_40191C:				; CODE XREF: _main+178j
		mov	[esp+70h+Code],	ebx
		call	_g_dir_close

loc_401924:				; CODE XREF: _main+168j
		mov	eax, [esp+70h+var_54]
		mov	[esp+70h+var_58], eax
		mov	edx, eax
		mov	eax, [eax]
		add	edx, 4
		mov	[esp+70h+var_54], edx
		test	eax, eax
		jnz	loc_4018AC

loc_40193F:				; CODE XREF: _main+136j
		mov	ecx, [esp+70h+var_5C]
		mov	[esp+70h+Code],	ecx
		call	_g_strfreev
		xor	eax, eax
		add	esp, 64h
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_401955:				; CODE XREF: _main+104j
		call	_pango_get_lib_subdirectory
		mov	[esp+70h+var_64], 0
		mov	[esp+70h+var_68], offset aModules ; "modules"
		mov	[esp+70h+var_6C], offset a1_6_0	; "1.6.0"
		mov	[esp+70h+Code],	eax
		call	_g_build_filename
		mov	ebx, eax
		jmp	loc_40186A
; ---------------------------------------------------------------------------

loc_401981:				; CODE XREF: _main+94j
		mov	eax, [esp+70h+var_14]
		test	eax, eax
		jz	short loc_4019A8
		mov	eax, [eax+8]
		mov	[esp+70h+var_6C], eax
		mov	[esp+70h+Code],	offset aParseOptionErr ; "Parse	option error: %s\n"
		call	_g_printerr

loc_40199C:				; CODE XREF: _main+254j
		mov	[esp+70h+Code],	1 ; Code
		call	_exit
; ---------------------------------------------------------------------------

loc_4019A8:				; CODE XREF: _main+227j
		mov	[esp+70h+Code],	offset aParseOptionE_0 ; "Parse	option error\n"
		call	_g_printerr
		jmp	short loc_40199C
_main		endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _pango_script_get_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _pango_config_key_get]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _pango_split_file_list]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _pango_get_lib_subdirectory]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_enum_get_value]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_type_class_ref]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_type_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_module_open_utf8]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_module_symbol]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_module_close]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_module_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_printf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_path_is_absolute]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_strdup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_printerr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_build_filename]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_log]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_string_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_string_append]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_string_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_string_insert_c]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_option_context_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_option_context_add_main_entries]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_option_context_parse]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_option_context_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_get_current_dir_utf8]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_dir_open_utf8]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_dir_read_name_utf8]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _g_dir_close]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _g_strfreev]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ___tlregdtor
___tlregdtor	proc near
		push	ebp
		xor	eax, eax
		mov	ebp, esp
		pop	ebp
		retn
___tlregdtor	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __stdcall __dyn_tls_dtor(x, x, x)
		public ___dyn_tls_dtor@12
___dyn_tls_dtor@12 proc	near		; DATA XREF: .CRT:___xl_do

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jnz	short loc_401AF0

loc_401ACD:				; CODE XREF: __dyn_tls_dtor(x,x,x)+33j
		mov	edx, [ebp+arg_8]
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_10], edx
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	___mingw_TLScallback
		mov	eax, 1
		leave
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_401AF0:				; CODE XREF: __dyn_tls_dtor(x,x,x)+Bj
		cmp	eax, 3
		jz	short loc_401ACD
		mov	eax, 1
		leave
		retn	0Ch
___dyn_tls_dtor@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __stdcall __dyn_tls_init(x, x, x)
		public ___dyn_tls_init@12
___dyn_tls_init@12 proc	near		; CODE XREF: ___mingw_CRTStartup+27p
					; DATA XREF: .rdata:___dyn_tls_init_callbacko ...

lpLibFileName	= dword	ptr -18h
lpProcName	= dword	ptr -14h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	edx, ds:__imp___winmajor
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [edx], 3
		jbe	short loc_401B46
		cmp	ds:__CRT_MT, 2
		jz	short loc_401B28
		mov	ds:__CRT_MT, 2

loc_401B28:				; CODE XREF: __dyn_tls_init(x,x,x)+1Cj
		cmp	eax, 2
		jz	loc_401C36
		cmp	eax, 1
		jz	loc_401BD8

loc_401B3A:				; CODE XREF: __dyn_tls_init(x,x,x)+F2j
					; __dyn_tls_init(x,x,x)+141j
		mov	eax, 1
		mov	ebx, [ebp+var_4]
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401B46:				; CODE XREF: __dyn_tls_init(x,x,x)+13j
		mov	ds:___mingw_usemthread_dll, 1
		mov	[esp+18h+lpLibFileName], offset	LibFileName ; "mingwm10.dll"
		call	_LoadLibraryA@4	; LoadLibraryA(x)
		sub	esp, 4
		test	eax, eax
		mov	ds:___mingw_mthread_hdll, eax
		jz	loc_401C66
		mov	[esp+18h+lpProcName], offset a__mingwthr_rem ; "__mingwthr_remove_key_dtor"
		mov	[esp+18h+lpLibFileName], eax ; hModule
		call	_GetProcAddress@8 ; GetProcAddress(x,x)
		sub	esp, 8
		mov	ds:___mingw_gMTRemoveKeyDtor, eax
		mov	[esp+18h+lpProcName], offset a__mingwthr_key ; "__mingwthr_key_dtor"
		mov	eax, ds:___mingw_mthread_hdll
		mov	[esp+18h+lpLibFileName], eax ; hModule
		call	_GetProcAddress@8 ; GetProcAddress(x,x)
		mov	ds:___mingw_gMTKeyDtor,	eax
		mov	eax, ds:___mingw_mthread_hdll
		sub	esp, 8
		test	eax, eax
		jz	loc_401C66
		mov	ecx, ds:___mingw_gMTRemoveKeyDtor
		test	ecx, ecx
		jz	short loc_401BF7
		mov	edx, ds:___mingw_gMTKeyDtor
		test	edx, edx
		jz	short loc_401BF7
		mov	ds:__CRT_MT, 1
		mov	eax, 1
		mov	ebx, [ebp+var_4]
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401BD8:				; CODE XREF: __dyn_tls_init(x,x,x)+34j
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+lpProcName], 1
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+lpLibFileName], eax
		call	___mingw_TLScallback
		jmp	loc_401B3A
; ---------------------------------------------------------------------------

loc_401BF7:				; CODE XREF: __dyn_tls_init(x,x,x)+B6j
					; __dyn_tls_init(x,x,x)+C0j
		mov	ds:___mingw_gMTKeyDtor,	0
		mov	ds:___mingw_gMTRemoveKeyDtor, 0
		mov	[esp+18h+lpLibFileName], eax ; hLibModule
		call	_FreeLibrary@4	; FreeLibrary(x)
		sub	esp, 4

loc_401C16:				; CODE XREF: __dyn_tls_init(x,x,x)+17Aj
		mov	ds:___mingw_mthread_hdll, 0
		mov	eax, 1
		mov	ds:__CRT_MT, 0
		mov	ebx, [ebp+var_4]
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401C36:				; CODE XREF: __dyn_tls_init(x,x,x)+2Bj
		mov	ebx, offset ___xd_z
		cmp	ebx, offset ___xd_z
		jz	loc_401B3A

loc_401C47:				; CODE XREF: __dyn_tls_init(x,x,x)+158j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_401C4F
		call	eax

loc_401C4F:				; CODE XREF: __dyn_tls_init(x,x,x)+14Bj
		add	ebx, 4
		cmp	ebx, offset ___xd_z
		jnz	short loc_401C47
		mov	eax, 1
		mov	ebx, [ebp+var_4]
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401C66:				; CODE XREF: __dyn_tls_init(x,x,x)+66j
					; __dyn_tls_init(x,x,x)+A8j
		mov	ds:___mingw_gMTKeyDtor,	0
		mov	ds:___mingw_gMTRemoveKeyDtor, 0
		jmp	short loc_401C16
___dyn_tls_init@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ___cpu_features_init
___cpu_features_init proc near		; CODE XREF: ___mingw_CRTStartup+3Bp
		push	ebp
		mov	ebp, esp
		push	ebx
		pushf
		pushf
		pop	eax
		mov	edx, eax
		xor	eax, 200000h
		push	eax
		popf
		pushf
		pop	eax
		popf
		xor	eax, edx
		test	eax, 200000h
		jz	loc_401D43
		xor	eax, eax
		cpuid
		test	eax, eax
		jz	loc_401D43
		mov	eax, 1
		cpuid
		test	dh, 1
		jz	short loc_401CBF
		or	ds:___cpu_features, 1

loc_401CBF:				; CODE XREF: ___cpu_features_init+36j
		test	dx, dx
		jns	short loc_401CCB
		or	ds:___cpu_features, 2

loc_401CCB:				; CODE XREF: ___cpu_features_init+42j
		test	edx, 800000h
		jz	short loc_401CDA
		or	ds:___cpu_features, 4

loc_401CDA:				; CODE XREF: ___cpu_features_init+51j
		test	edx, 1000000h
		jz	short loc_401CE9
		or	ds:___cpu_features, 8

loc_401CE9:				; CODE XREF: ___cpu_features_init+60j
		test	edx, 2000000h
		jz	short loc_401CF8
		or	ds:___cpu_features, 10h

loc_401CF8:				; CODE XREF: ___cpu_features_init+6Fj
		and	edx, 4000000h
		jz	short loc_401D07
		or	ds:___cpu_features, 20h

loc_401D07:				; CODE XREF: ___cpu_features_init+7Ej
		test	cl, 1
		jz	short loc_401D13
		or	ds:___cpu_features, 40h

loc_401D13:				; CODE XREF: ___cpu_features_init+8Aj
		and	ch, 20h
		jnz	short loc_401D46

loc_401D18:				; CODE XREF: ___cpu_features_init+D0j
		mov	eax, 80000000h
		cpuid
		cmp	eax, 80000000h
		jbe	short loc_401D43
		mov	eax, 80000001h
		cpuid
		test	edx, edx
		js	short loc_401D52

loc_401D31:				; CODE XREF: ___cpu_features_init+DCj
		and	edx, 40000000h
		jz	short loc_401D43
		or	ds:___cpu_features, 200h

loc_401D43:				; CODE XREF: ___cpu_features_init+1Aj
					; ___cpu_features_init+26j ...
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401D46:				; CODE XREF: ___cpu_features_init+96j
		or	ds:___cpu_features, 80h
		jmp	short loc_401D18
; ---------------------------------------------------------------------------

loc_401D52:				; CODE XREF: ___cpu_features_init+AFj
		or	ds:___cpu_features, 100h
		jmp	short loc_401D31
___cpu_features_init endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl __report_error(char *Format, char	ArgList)
___report_error	proc near		; CODE XREF: ___write_memory+CDp
					; __pei386_runtime_relocator+CDp ...

Str		= dword	ptr -18h
Size		= dword	ptr -14h
Count		= dword	ptr -10h
File		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Format		= dword	ptr  8
ArgList		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, ds:__imp___iob
		mov	[ebp+var_4], esi
		lea	esi, [ebp+ArgList]
		mov	[esp+18h+Count], 17h ; Count
		mov	[esp+18h+Size],	1 ; Size
		add	ebx, 40h
		mov	[esp+18h+File],	ebx ; File
		mov	[esp+18h+Str], offset aMingwRuntimeFa ;	"Mingw runtime failure:\n"
		call	_fwrite
		mov	eax, [ebp+Format]
		mov	[esp+18h+Count], esi ; ArgList
		mov	[esp+18h+Str], ebx ; File
		mov	[esp+18h+Size],	eax ; Format
		call	_vfprintf
		call	_abort
___report_error	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall __write_memory(size_t Size, void *Src)
___write_memory	proc near		; CODE XREF: __pei386_runtime_relocator+FCp
					; __pei386_runtime_relocator+128p ...

lpAddress	= dword	ptr -48h
lpBuffer	= dword	ptr -44h
dwLength	= dword	ptr -40h
lpflOldProtect	= dword	ptr -3Ch
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h
flOldProtect	= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		test	ecx, ecx
		mov	[ebp+var_C], ebx
		mov	ebx, eax
		mov	[ebp+var_8], esi
		mov	esi, edx
		mov	[ebp+var_4], edi
		mov	edi, ecx
		jnz	short loc_401DD6

loc_401DC9:				; CODE XREF: ___write_memory+8Bj
					; ___write_memory+90j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401DD6:				; CODE XREF: ___write_memory+17j
		lea	eax, [ebp+Buffer]
		mov	[esp+48h+dwLength], 1Ch	; dwLength
		mov	[esp+48h+lpBuffer], eax	; lpBuffer
		mov	[esp+48h+lpAddress], ebx ; lpAddress
		call	_VirtualQuery@12 ; VirtualQuery(x,x,x)
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_401E6A
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jz	short loc_401E25
		cmp	eax, 40h
		jz	short loc_401E25
		lea	eax, [ebp+flOldProtect]
		mov	[esp+48h+lpflOldProtect], eax ;	lpflOldProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+48h+dwLength], 40h	; flNewProtect
		mov	[esp+48h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+48h+lpAddress], eax ; lpAddress
		call	_VirtualProtect@16 ; VirtualProtect(x,x,x,x)
		sub	esp, 10h

loc_401E25:				; CODE XREF: ___write_memory+4Aj
					; ___write_memory+4Fj
		mov	[esp+48h+dwLength], edi	; Size
		mov	[esp+48h+lpBuffer], esi	; Src
		mov	[esp+48h+lpAddress], ebx ; Dst
		call	_memcpy
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jz	short loc_401DC9
		cmp	eax, 40h
		jz	short loc_401DC9
		lea	eax, [ebp+flOldProtect]
		mov	[esp+48h+lpflOldProtect], eax ;	lpflOldProtect
		mov	eax, [ebp+flOldProtect]
		mov	[esp+48h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+48h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+48h+lpAddress], eax ; lpAddress
		call	_VirtualProtect@16 ; VirtualProtect(x,x,x,x)
		sub	esp, 10h
		jmp	loc_401DC9
; ---------------------------------------------------------------------------

loc_401E6A:				; CODE XREF: ___write_memory+42j
		mov	[esp+48h+dwLength], ebx
		mov	[esp+48h+lpBuffer], 1Ch	; ArgList
		mov	[esp+48h+lpAddress], offset Format ; "	VirtualQuery failed for	%d bytes at a"...
		call	___report_error
___write_memory	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public __pei386_runtime_relocator
__pei386_runtime_relocator proc	near	; CODE XREF: ___mingw_CRTStartup+8Dp

Format		= dword	ptr -38h
ArgList		= byte ptr -34h
Src		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, ds:_was_init_31087
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		test	eax, eax
		jz	short loc_401EB5

loc_401EA8:				; CODE XREF: __pei386_runtime_relocator+3Cj
					; __pei386_runtime_relocator+92j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401EB5:				; CODE XREF: __pei386_runtime_relocator+16j
		mov	eax, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
		sub	eax, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
		cmp	eax, 7
		mov	ds:_was_init_31087, 1
		jle	short loc_401EA8
		cmp	eax, 0Bh
		mov	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
		jle	short loc_401F00
		mov	edi, ds:__RUNTIME_PSEUDO_RELOC_LIST_END__
		test	edi, edi
		jnz	short loc_401F00
		mov	esi, ds:dword_404358
		test	esi, esi
		jnz	short loc_401F00
		mov	ecx, ds:dword_40435C
		test	ecx, ecx
		jnz	short loc_401F00
		mov	ebx, offset dword_404360
		nop
		lea	esi, [esi+0]

loc_401F00:				; CODE XREF: __pei386_runtime_relocator+46j
					; __pei386_runtime_relocator+50j ...
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_401F62
		mov	eax, [ebx+4]
		test	eax, eax
		jnz	short loc_401F62
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_402026
		add	ebx, 0Ch
		cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
		jnb	short loc_401EA8
		mov	esi, 400000h

loc_401F29:				; CODE XREF: __pei386_runtime_relocator+16Dj
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	short loc_401FA0
		cmp	edx, 20h
		jz	loc_401FE0
		cmp	edx, 8
		jz	short loc_401FC0
		mov	[ebp+var_1C], 0
		mov	dword ptr [esp+38h+ArgList], edx ; ArgList
		mov	[esp+38h+Format], offset aUnknownPseudoR ; "  Unknown pseudo relocation	bit size %d"...
		call	___report_error
; ---------------------------------------------------------------------------

loc_401F62:				; CODE XREF: __pei386_runtime_relocator+74j
					; __pei386_runtime_relocator+7Bj
		cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
		jnb	loc_401EA8
		mov	esi, 400000h
		lea	edi, [ebp+Src]

loc_401F76:				; CODE XREF: __pei386_runtime_relocator+107j
		mov	eax, [ebx+4]
		mov	ecx, 4		; Size
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+Src], edx
		mov	edx, edi	; Src
		call	___write_memory
		cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
		jb	short loc_401F76
		jmp	loc_401EA8
; ---------------------------------------------------------------------------
		align 10h

loc_401FA0:				; CODE XREF: __pei386_runtime_relocator+ABj
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_402017
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_401FB0:				; CODE XREF: __pei386_runtime_relocator+194j
		mov	ecx, 2		; Size
		lea	edx, [ebp+var_1C] ; Src
		call	___write_memory
		jmp	short loc_401FF4
; ---------------------------------------------------------------------------
		align 10h

loc_401FC0:				; CODE XREF: __pei386_runtime_relocator+B9j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_402008
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_401FCF:				; CODE XREF: __pei386_runtime_relocator+185j
		mov	ecx, 1		; Size
		lea	edx, [ebp+var_1C] ; Src
		call	___write_memory
		jmp	short loc_401FF4
; ---------------------------------------------------------------------------
		align 10h

loc_401FE0:				; CODE XREF: __pei386_runtime_relocator+B0j
		add	edi, [eax]
		lea	edx, [ebp+var_1C] ; Src
		sub	edi, ecx
		mov	ecx, 4		; Size
		mov	[ebp+var_1C], edi
		call	___write_memory

loc_401FF4:				; CODE XREF: __pei386_runtime_relocator+12Dj
					; __pei386_runtime_relocator+14Cj
		add	ebx, 0Ch
		cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
		jb	loc_401F29
		jmp	loc_401EA8
; ---------------------------------------------------------------------------

loc_402008:				; CODE XREF: __pei386_runtime_relocator+135j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_401FCF
; ---------------------------------------------------------------------------

loc_402017:				; CODE XREF: __pei386_runtime_relocator+116j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_401FB0
; ---------------------------------------------------------------------------

loc_402026:				; CODE XREF: __pei386_runtime_relocator+83j
		mov	dword ptr [esp+38h+ArgList], eax ; ArgList
		mov	[esp+38h+Format], offset aUnknownPseud_0 ; "  Unknown pseudo relocation	protocol ve"...
		call	___report_error
__pei386_runtime_relocator endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl __do_global_dtors()
		public ___do_global_dtors
___do_global_dtors proc	near		; DATA XREF: ___do_global_ctors:loc_40209Ao
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, _p_1653
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_402068

loc_402051:				; CODE XREF: ___do_global_dtors+26j
		call	eax
		mov	eax, _p_1653
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	_p_1653, edx
		test	eax, eax
		jnz	short loc_402051

locret_402068:				; CODE XREF: ___do_global_dtors+Fj
		leave
		retn
___do_global_dtors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ___do_global_ctors
___do_global_ctors proc	near		; CODE XREF: ___main+1Dj

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, ds:___CTOR_LIST__
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_4020B0

loc_402083:				; CODE XREF: ___do_global_ctors+54j
		test	ebx, ebx
		jz	short loc_40209A
		lea	esi, ds:402404h[ebx*4]
		xchg	ax, ax

loc_402090:				; CODE XREF: ___do_global_ctors+28j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_402090

loc_40209A:				; CODE XREF: ___do_global_ctors+15j
		mov	[esp+18h+var_18], offset ___do_global_dtors ; void (__cdecl *)()
		call	_atexit
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4020B0:				; CODE XREF: ___do_global_ctors+11j
		xor	ebx, ebx
		jmp	short loc_4020B6
; ---------------------------------------------------------------------------

loc_4020B4:				; CODE XREF: ___do_global_ctors+52j
		mov	ebx, eax

loc_4020B6:				; CODE XREF: ___do_global_ctors+42j
		lea	eax, [ebx+1]
		mov	edx, ds:___CTOR_LIST__[eax*4]
		test	edx, edx
		jnz	short loc_4020B4
		jmp	short loc_402083
___do_global_ctors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ___main
___main		proc near		; CODE XREF: ___mingw_CRTStartup+95p
					; _main+Cp
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	ecx, ds:_initialized
		test	ecx, ecx
		jz	short loc_4020E2
		leave
		retn
; ---------------------------------------------------------------------------

loc_4020E2:				; CODE XREF: ___main+Ej
		mov	ds:_initialized, 1
		leave
		jmp	short ___do_global_ctors
___main		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl fpreset()
		public _fpreset
_fpreset	proc near		; CODE XREF: ___mingw_CRTStartup+40p
					; _gnu_exception_handler(x)+160p
		push	ebp
		mov	ebp, esp
		fninit
		pop	ebp
		retn
_fpreset	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

___mingwthr_run_key_dtors proc near	; CODE XREF: ___mingw_TLScallback+15p
					; ___mingw_TLScallback:loc_4021A1p

lpCriticalSection= dword ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jnz	short loc_402118
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_402118:				; CODE XREF: ___mingwthr_run_key_dtors+Fj
		mov	[esp+18h+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	_EnterCriticalSection@4	; EnterCriticalSection(x)
		mov	ebx, ds:_key_dtor_list
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_40215C

loc_402131:				; CODE XREF: ___mingwthr_run_key_dtors+5Aj
		mov	eax, [ebx]
		mov	[esp+18h+lpCriticalSection], eax ; dwTlsIndex
		call	_TlsGetValue@4	; TlsGetValue(x)
		sub	esp, 4
		mov	esi, eax
		call	_GetLastError@0	; GetLastError()
		test	eax, eax
		jnz	short loc_402155
		test	esi, esi
		jz	short loc_402155
		mov	eax, [ebx+4]
		mov	[esp+18h+lpCriticalSection], esi
		call	eax

loc_402155:				; CODE XREF: ___mingwthr_run_key_dtors+47j
					; ___mingwthr_run_key_dtors+4Bj
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_402131

loc_40215C:				; CODE XREF: ___mingwthr_run_key_dtors+2Fj
		mov	[esp+18h+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	_LeaveCriticalSection@4	; LeaveCriticalSection(x)
		sub	esp, 4
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
___mingwthr_run_key_dtors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ___mingw_TLScallback
___mingw_TLScallback proc near		; CODE XREF: __dyn_tls_dtor(x,x,x)+1Ep
					; __dyn_tls_init(x,x,x)+EDp

lpCriticalSection= dword ptr -18h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		cmp	eax, 1
		jz	short loc_4021D0
		jb	short loc_4021A1
		cmp	eax, 3
		jnz	short loc_40219A
		call	___mingwthr_run_key_dtors

loc_40219A:				; CODE XREF: ___mingw_TLScallback+13j
					; ___mingw_TLScallback+2Ej ...
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------

loc_4021A1:				; CODE XREF: ___mingw_TLScallback+Ej
		call	___mingwthr_run_key_dtors
		mov	eax, ds:___mingwthr_cs_init
		cmp	eax, 1
		jnz	short loc_40219A
		mov	ds:___mingwthr_cs_init,	0
		mov	[esp+18h+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	_DeleteCriticalSection@4 ; DeleteCriticalSection(x)
		sub	esp, 4
		jmp	short loc_40219A
; ---------------------------------------------------------------------------
		align 10h

loc_4021D0:				; CODE XREF: ___mingw_TLScallback+Cj
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jz	short loc_4021F0

loc_4021D9:				; CODE XREF: ___mingw_TLScallback+7Fj
		mov	ds:___mingwthr_cs_init,	1
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4021F0:				; CODE XREF: ___mingw_TLScallback+57j
		mov	[esp+18h+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	_InitializeCriticalSection@4 ; InitializeCriticalSection(x)
		sub	esp, 4
		jmp	short loc_4021D9
___mingw_TLScallback endp

; ---------------------------------------------------------------------------
		jmp	short ____w64_mingwthr_remove_key_dtor
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ____w64_mingwthr_remove_key_dtor
____w64_mingwthr_remove_key_dtor proc near ; CODE XREF:	.text:00402201j

lpCriticalSection= dword ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:___mingwthr_cs_init
		mov	ebx, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_402230
		xor	eax, eax
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402230:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+11j
		mov	[esp+18h+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	_EnterCriticalSection@4	; EnterCriticalSection(x)
		mov	eax, ds:_key_dtor_list
		sub	esp, 4
		test	eax, eax
		jz	short loc_40225F
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_402256
		jmp	short loc_402294
; ---------------------------------------------------------------------------

loc_402250:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+4Dj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_402275

loc_402256:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+3Cj
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_402250

loc_40225F:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+36j
		mov	[esp+18h+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	_LeaveCriticalSection@4	; LeaveCriticalSection(x)
		sub	esp, 4

loc_40226E:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+82j
		xor	eax, eax
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_402275:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+44j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_40227B:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+8Dj
		mov	[esp+18h+lpCriticalSection], eax ; Memory
		call	_free
		mov	[esp+18h+lpCriticalSection], offset ___mingwthr_cs ; lpCriticalSection
		call	_LeaveCriticalSection@4	; LeaveCriticalSection(x)
		sub	esp, 4
		jmp	short loc_40226E
; ---------------------------------------------------------------------------

loc_402294:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+3Ej
		mov	edx, [eax+8]
		mov	ds:_key_dtor_list, edx
		jmp	short loc_40227B
____w64_mingwthr_remove_key_dtor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ____w64_mingwthr_add_key_dtor
____w64_mingwthr_add_key_dtor proc near

NumOfElements	= dword	ptr -18h
SizeOfElements	= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jnz	short loc_4022B5

loc_4022B0:				; CODE XREF: ____w64_mingwthr_add_key_dtor+32j
					; ____w64_mingwthr_add_key_dtor+6Dj
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_4022B5:				; CODE XREF: ____w64_mingwthr_add_key_dtor+Ej
		mov	[esp+18h+SizeOfElements], 0Ch ;	SizeOfElements
		mov	[esp+18h+NumOfElements], 1 ; NumOfElements
		call	_calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_4022B0
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+NumOfElements], offset	___mingwthr_cs ; lpCriticalSection
		mov	[ebx], eax
		mov	eax, [ebp+arg_4]
		mov	[ebx+4], eax
		call	_EnterCriticalSection@4	; EnterCriticalSection(x)
		mov	eax, ds:_key_dtor_list
		mov	ds:_key_dtor_list, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	[esp+18h+NumOfElements], offset	___mingwthr_cs ; lpCriticalSection
		call	_LeaveCriticalSection@4	; LeaveCriticalSection(x)
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_4022B0
____w64_mingwthr_add_key_dtor endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ___getmainargs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ___p__fmode]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ___p__environ]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __cexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __setmode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _signal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SetUnhandledExceptionFilter(x)]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess(x)]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA(x)]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress(x,x)]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION LoadLibraryA(x)]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION FreeLibrary(x)]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION VirtualQuery(x,x,x)]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION VirtualProtect(x,x,x,x)]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION TlsGetValue(x)]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetLastError()]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION DeleteCriticalSection(x)]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION InitializeCriticalSection(x)]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EnterCriticalSection(x)]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION LeaveCriticalSection(x)]
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_register_frame_ctor proc near		; DATA XREF: .text:00402408o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	___gcc_register_frame
		mov	[esp+18h+var_18], offset ___gcc_deregister_frame ; void	(__cdecl *)()
		call	_atexit
		leave
		retn
_register_frame_ctor endp

; ---------------------------------------------------------------------------
		align 4
		public ___CTOR_LIST__
___CTOR_LIST__	dd 0FFFFFFFFh		; DATA XREF: ___do_global_ctors+8r
					; ___do_global_ctors+49r
		dd offset _register_frame_ctor
		align 10h
		public __DTOR_LIST__
__DTOR_LIST__	dd 0FFFFFFFFh
dword_402414	dd 7Bh dup(0)		; DATA XREF: .data:_p_1653o
		dd 280h	dup(?)
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000010 (	 16.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 403000h
		public __CRT_glob
__CRT_glob	dd 0FFFFFFFFh		; DATA XREF: ___mingw_CRTStartup+53r
		public __fmode
; int _fmode
__fmode		dd 4000h		; DATA XREF: ___mingw_CRTStartup+85r
					; ___mingw_CRTStartup+D6w
_p_1653		dd offset dword_402414	; DATA XREF: ___do_global_dtors+6r
					; ___do_global_dtors+13r ...
_data		dd 0			; DATA XREF: ___gcc_register_frame:loc_40132Fr
					; ___gcc_register_frame+71o
		public __data_end__
__data_end__	dd 7Ch dup(0)
		align 1000h
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000354 (	852.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001C00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 404000h
; CHAR ModuleName[]
ModuleName	db 'libgcc_s_dw2-1.dll',0 ; DATA XREF: ___gcc_register_frame+6o
					; ___gcc_deregister_frame+6o
; CHAR ProcName[]
ProcName	db '__register_frame_info',0 ; DATA XREF: ___gcc_register_frame+17o
; CHAR aLibgcj11_dll[]
aLibgcj11_dll	db 'libgcj-11.dll',0    ; DATA XREF: ___gcc_register_frame+49o
; CHAR a_jv_registercl[]
a_jv_registercl	db '_Jv_RegisterClasses',0 ; DATA XREF: ___gcc_register_frame+5Ao
; CHAR a__deregister_f[]
a__deregister_f	db '__deregister_frame_info',0 ; DATA XREF: ___gcc_deregister_frame+17o
		align 4
a1_29_4		db '1.29.4',0           ; DATA XREF: _show_version+6o
aPango		db 'pango',0            ; DATA XREF: _show_version+Eo
aPangoQuerymodu	db 'pango-querymodules (%s) %s',0Ah,0 ; DATA XREF: _show_version+16o
a1_6_0		db '1.6.0',0            ; DATA XREF: _show_version+22o
					; _main+20Ao
aModuleInterfac	db 'module interface version: %s',0Ah,0 ; DATA XREF: _show_version+2Ao
asc_4040B1	db '"',0                ; DATA XREF: _query_module+31Fo
byte_4040B3	db 0			; DATA XREF: _query_module+162o
aCannotLoadModu	db 'Cannot load module %s: %s',0Ah,0 ; DATA XREF: _query_module+261o
		align 10h
aSDoesNotExport	db '%s does not export Pango module API',0Ah,0
					; DATA XREF: _query_module+5Co
					; _query_module+271o
aScript_engine_	db 'script_engine_list',0 ; DATA XREF: _query_module+44o
aScript_engin_0	db 'script_engine_init',0 ; DATA XREF: _query_module+9Fo
aScript_engin_1	db 'script_engine_exit',0 ; DATA XREF: _query_module+BAo
aScript_engin_2	db 'script_engine_create',0 ; DATA XREF: _query_module+D5o
aN		db '\n',0               ; DATA XREF: _query_module:loc_40172Do
asc_404146	db '\"',0               ; DATA XREF: _query_module:loc_4016E9o
asc_404149	db '\\',0               ; DATA XREF: _query_module+2FBo
aSSSSSS		db '%s%s%s %s %s %s',0  ; DATA XREF: _query_module+18Do
aEngineReported	db 'Engine reported invalid script value %d',0Ah,0
					; DATA XREF: _query_module+1C8o
aPango_0	db 'Pango',0            ; DATA XREF: _query_module+1D8o
aSS		db ' %s:%s',0           ; DATA XREF: _query_module+211o
asc_404192	db 0Ah,0		; DATA XREF: _query_module:loc_40162Do
aVersion	db 'version',0          ; DATA XREF: _main+26o
aShowVersionNum	db 'Show version numbers',0 ; DATA XREF: _main+46o
aModule___	db '- [MODULE]...',0    ; DATA XREF: _main+4Eo
aParseOptionErr	db 'Parse option error: %s',0Ah,0 ; DATA XREF: _main+230o
aParseOptionE_0	db 'Parse option error',0Ah,0 ; DATA XREF: _main:loc_4019A8o
		align 4
aPangoModulesFi	db '# Pango Modules file',0Ah ; DATA XREF: _main+A7o
		db '# Automatically generated file, do not edit',0Ah
		db '#',0Ah,0
aPangoModulespa	db 'Pango/ModulesPath',0 ; DATA XREF: _main:loc_401854o
aModules	db 'modules',0          ; DATA XREF: _main+202o
aModulespathS	db '# ModulesPath = %s',0Ah ; DATA XREF: _main+10Eo
		db '#',0Ah,0
a_dll		db '.dll',0             ; DATA XREF: _main+193o
		align 4
; CHAR LibFileName[]
LibFileName	db 'mingwm10.dll',0     ; DATA XREF: __dyn_tls_init(x,x,x)+50o
; CHAR a__mingwthr_rem[]
a__mingwthr_rem	db '__mingwthr_remove_key_dtor',0 ; DATA XREF: __dyn_tls_init(x,x,x)+6Co
; CHAR a__mingwthr_key[]
a__mingwthr_key	db '__mingwthr_key_dtor',0 ; DATA XREF: __dyn_tls_init(x,x,x)+84o
		public ___dyn_tls_init_callback
___dyn_tls_init_callback dd offset ___dyn_tls_init@12 ;	DATA XREF: ___mingw_CRTStartup+7r
					; __dyn_tls_init(x,x,x)
aMingwRuntimeFa	db 'Mingw runtime failure:',0Ah,0 ; DATA XREF: ___report_error+2Co
; char Format[]
Format		db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: ___write_memory+C6o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: __pei386_runtime_relocator+19Ao
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: __pei386_runtime_relocator+C6o
		align 4
		public __RUNTIME_PSEUDO_RELOC_LIST_END__
__RUNTIME_PSEUDO_RELOC_LIST_END__ dd 0	; DATA XREF: __pei386_runtime_relocator:loc_401EB5o
					; __pei386_runtime_relocator+2Ao ...
dword_404358	dd 0			; DATA XREF: __pei386_runtime_relocator+52r
dword_40435C	dd 0			; DATA XREF: __pei386_runtime_relocator+5Cr
dword_404360	dd 28h dup(0)		; DATA XREF: __pei386_runtime_relocator+66o
		align 1000h
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000004 (	  4.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_eh_fram	segment	dword public 'DATA' use32
		assume cs:_eh_fram
		;org 405000h
___FRAME_END__	dd 80h dup(0)		; DATA XREF: ___gcc_register_frame+36o
					; ___gcc_deregister_frame+2Eo
		align 1000h
_eh_fram	ends

; Section 5. (virtual address 00006000)
; Virtual size			: 000000FC (	252.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0400080: Bss Readable Writable
; Alignment	: 8 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 406000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		public __argc
; int _argc
__argc		dd ?			; DATA XREF: ___mingw_CRTStartup+60o
					; ___mingw_CRTStartup+AEr
		public __argv
; char **_argv
__argv		dd ?			; DATA XREF: ___mingw_CRTStartup+58o
					; ___mingw_CRTStartup+A5r
_obj		dd 6 dup(?)		; DATA XREF: ___gcc_register_frame+2Eo
_class_12435	dd ?			; DATA XREF: _query_module:loc_4015EDr
					; _query_module+299w
		align 8
		public __tls_index
__tls_index	dd ?			; DATA XREF: .tls:TlsIndex_ptro
		public _mingw_initltsdrot_force
_mingw_initltsdrot_force dd ?
		public _mingw_initltsdyn_force
_mingw_initltsdyn_force	dd ?
		public _mingw_initltssuo_force
_mingw_initltssuo_force	dd ?
; HMODULE __mingw_mthread_hdll
___mingw_mthread_hdll dd ?		; DATA XREF: __dyn_tls_init(x,x,x)+61w
					; __dyn_tls_init(x,x,x)+8Cr ...
		dd 3 dup(?)
		public __CRT_fmode
__CRT_fmode	dd ?			; DATA XREF: ___mingw_CRTStartup+77r
					; ___mingw_CRTStartup+EAr ...
		public ___cpu_features
___cpu_features	dd ?			; DATA XREF: ___cpu_features_init+38w
					; ___cpu_features_init+44w ...
_was_init_31087	dd ?			; DATA XREF: __pei386_runtime_relocator+6r
					; __pei386_runtime_relocator+32w
		align 10h
_initialized	dd ?			; DATA XREF: ___main+6r
					; ___main:loc_4020E2w
		align 10h
		public __CRT_MT
__CRT_MT	dd ?			; DATA XREF: __dyn_tls_init(x,x,x)+15r
					; __dyn_tls_init(x,x,x)+1Ew ...
		align 8
___mingwthr_cs_init dd ?		; DATA XREF: ___mingwthr_run_key_dtors+8r
					; ___mingw_TLScallback+26r ...
		dd 3 dup(?)
; struct _RTL_CRITICAL_SECTION __mingwthr_cs
___mingwthr_cs	_RTL_CRITICAL_SECTION <?> ; DATA XREF: ___mingwthr_run_key_dtors:loc_402118o
					; ___mingwthr_run_key_dtors:loc_40215Co ...
		dd 2 dup(?)
_key_dtor_list	dd ?			; DATA XREF: ___mingwthr_run_key_dtors+24r
					; ____w64_mingwthr_remove_key_dtor+2Cr	...
		dd 4 dup(?)
		public ___mingw_gMTKeyDtor
___mingw_gMTKeyDtor dd ?		; DATA XREF: __dyn_tls_init(x,x,x)+99w
					; __dyn_tls_init(x,x,x)+B8r ...
		dd 3 dup(?)
		public ___mingw_gMTRemoveKeyDtor
___mingw_gMTRemoveKeyDtor dd ?		; DATA XREF: __dyn_tls_init(x,x,x)+7Fw
					; __dyn_tls_init(x,x,x)+AEr ...
		dd 3 dup(?)
		public ___mingw_usemthread_dll
___mingw_usemthread_dll	dd ?		; DATA XREF: __dyn_tls_init(x,x,x):loc_401B46w
		dd 7 dup(?)
		public __bss_end__
__bss_end__	dd 3C1h	dup(?)
_bss		ends

;
; Imports from libglib-2.0-0.dll
;
; Section 6. (virtual address 00007000)
; Virtual size			: 0000089C (   2204.)
; Section size in file		: 00000A00 (   2560.)
; Offset to raw	data for section: 00002200
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn __IAT_start__:dword ; DATA XREF: _query_module+115r
		extrn __imp__g_build_filename:dword ; DATA XREF: _g_build_filenamer
		extrn __imp__g_dir_close:dword ; DATA XREF: _g_dir_closer
		extrn __imp__g_dir_open_utf8:dword ; DATA XREF:	_g_dir_open_utf8r
		extrn __imp__g_dir_read_name_utf8:dword	; DATA XREF: _g_dir_read_name_utf8r
		extrn __imp__g_free:dword ; DATA XREF: _g_freer
		extrn __imp__g_get_current_dir_utf8:dword
					; DATA XREF: _g_get_current_dir_utf8r
		extrn __imp__g_log:dword ; DATA	XREF: _g_logr
		extrn __imp__g_option_context_add_main_entries:dword
					; DATA XREF: _g_option_context_add_main_entriesr
		extrn __imp__g_option_context_free:dword
					; DATA XREF: _g_option_context_freer
		extrn __imp__g_option_context_new:dword	; DATA XREF: _g_option_context_newr
		extrn __imp__g_option_context_parse:dword
					; DATA XREF: _g_option_context_parser
		extrn __imp__g_path_is_absolute:dword ;	DATA XREF: _g_path_is_absoluter
		extrn __imp__g_printerr:dword ;	DATA XREF: _g_printerrr
		extrn __imp__g_printf:dword ; DATA XREF: _g_printfr
		extrn __imp__g_strdup:dword ; DATA XREF: _g_strdupr
		extrn __imp__g_strfreev:dword ;	DATA XREF: _g_strfreevr
		extrn __imp__g_string_append:dword ; DATA XREF:	_g_string_appendr
		extrn __imp__g_string_free:dword ; DATA	XREF: _g_string_freer
		extrn __imp__g_string_insert_c:dword ; DATA XREF: _g_string_insert_cr
		extrn __imp__g_string_new:dword	; DATA XREF: _g_string_newr
		extrn _idata$5_0:byte:4
;
; Imports from libgmodule-2.0-0.dll
;
		extrn __imp__g_module_close:dword ; DATA XREF: _g_module_closer
		extrn __imp__g_module_error:dword ; DATA XREF: _g_module_errorr
		extrn __imp__g_module_open_utf8:dword ;	DATA XREF: _g_module_open_utf8r
		extrn __imp__g_module_symbol:dword ; DATA XREF:	_g_module_symbolr
		extrn _idata$5_64:byte:4
;
; Imports from libgobject-2.0-0.dll
;
		extrn __imp__g_enum_get_value:dword ; DATA XREF: _g_enum_get_valuer
		extrn __imp__g_type_class_ref:dword ; DATA XREF: _g_type_class_refr
		extrn __imp__g_type_init:dword ; DATA XREF: _g_type_initr
		extrn _idata$5_65:byte:4
;
; Imports from libpango-1.0-0.dll
;
		extrn __imp__pango_config_key_get:dword	; DATA XREF: _pango_config_key_getr
		extrn __imp__pango_get_lib_subdirectory:dword
					; DATA XREF: _pango_get_lib_subdirectoryr
		extrn __imp__pango_script_get_type:dword
					; DATA XREF: _pango_script_get_typer
		extrn __imp__pango_split_file_list:dword
					; DATA XREF: _pango_split_file_listr
		extrn _idata$5_66:byte:4
;
; Imports from KERNEL32.dll
;
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__DeleteCriticalSection@4:dword
					; DATA XREF: DeleteCriticalSection(x)r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__EnterCriticalSection@4:dword
					; DATA XREF: EnterCriticalSection(x)r
; void __stdcall __noreturn ExitProcess(UINT uExitCode)
		extrn __imp__ExitProcess@4:dword ; DATA	XREF: ExitProcess(x)r
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn __imp__FreeLibrary@4:dword ; DATA	XREF: FreeLibrary(x)r
; DWORD	__stdcall GetLastError()
		extrn __imp__GetLastError@0:dword ; DATA XREF: GetLastError()r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp__GetModuleHandleA@4:dword ;	DATA XREF: GetModuleHandleA(x)r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn __imp__GetProcAddress@8:dword ; DATA XREF: GetProcAddress(x,x)r
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__InitializeCriticalSection@4:dword
					; DATA XREF: InitializeCriticalSection(x)r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__LeaveCriticalSection@4:dword
					; DATA XREF: LeaveCriticalSection(x)r
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn __imp__LoadLibraryA@4:dword ; DATA XREF: LoadLibraryA(x)r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn __imp__SetUnhandledExceptionFilter@4:dword
					; DATA XREF: SetUnhandledExceptionFilter(x)r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn __imp__TlsGetValue@4:dword ; DATA	XREF: TlsGetValue(x)r
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn __imp__VirtualProtect@16:dword ; DATA XREF: VirtualProtect(x,x,x,x)r
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn __imp__VirtualQuery@12:dword ; DATA XREF:	VirtualQuery(x,x,x)r

;
; Imports from msvcrt.dll
;
		extrn __imp____getmainargs:dword ; DATA	XREF: ___getmainargsr
		extrn __imp____p__environ:dword	; DATA XREF: ___p__environr
		extrn __imp____p__fmode:dword ;	DATA XREF: ___p__fmoder
		extrn __imp____set_app_type:dword ; CODE XREF: _WinMainCRTStartup+Dp
					; _mainCRTStartup+Dp
					; DATA XREF: ...
		extrn __imp___cexit:dword ; DATA XREF: __cexitr
		extrn __imp___iob:dword	; DATA XREF: ___mingw_CRTStartup:loc_4010F0r
					; ___report_error+9r
; _onexit_t __cdecl __onexit(_onexit_t Func)
		extrn __imp___onexit:dword ; DATA XREF:	__onexit+6r
		extrn __imp___setmode:dword ; DATA XREF: __setmoder
		extrn __imp___winmajor:dword ; DATA XREF: __dyn_tls_init(x,x,x)+7r
; void __cdecl _abort()
		extrn __imp__abort:dword ; DATA	XREF: _abortr
; int __cdecl _atexit(void (__cdecl *)())
		extrn __imp__atexit:dword ; DATA XREF: _atexit+6r
; void *__cdecl	_calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp__calloc:dword ; DATA XREF: _callocr
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:dword	; DATA XREF: _exitr
; void __cdecl _free(void *Memory)
		extrn __imp__free:dword	; DATA XREF: _freer
; size_t __cdecl _fwrite(const void *Str, size_t Size, size_t Count, FILE *File)
		extrn __imp__fwrite:dword ; DATA XREF: _fwriter
; void *__cdecl	_memcpy(void *Dst, const void *Src, size_t Size)
		extrn __imp__memcpy:dword ; DATA XREF: _memcpyr
		extrn __imp__signal:dword ; DATA XREF: _signalr
; int __cdecl _vfprintf(FILE *File, const char *Format,	va_list	ArgList)
		extrn __imp__vfprintf:dword ; DATA XREF: _vfprintfr


; Section 7. (virtual address 00008000)
; Virtual size			: 00000018 (	 24.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 408000h
		public ___crt_xc_start__
___crt_xc_start__ dd 0
		public ___xl_c
___xl_c		dd offset ___dyn_tls_init@12 ; DATA XREF: .tls:TlsCallbacks_ptro
					; __dyn_tls_init(x,x,x)
		public ___xl_d
___xl_d		dd offset ___dyn_tls_dtor@12 ; __dyn_tls_dtor(x,x,x)
		public ___xl_z
___xl_z		dd 0
		public ___crt_xt_end__
___crt_xt_end__	dd 0
___xd_z		dd 7Bh dup(0)		; DATA XREF: __dyn_tls_init(x,x,x):loc_401C36o
					; __dyn_tls_init(x,x,x)+13Bo ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 00009000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 409000h
		public __tls_used
__tls_used	dd offset TlsStart
TlsEnd_ptr	dd offset __tls_end
TlsIndex_ptr	dd offset __tls_index
TlsCallbacks_ptr dd offset ___xl_c
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		public __tls_start
__tls_start	db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:__tls_usedo
		public __tls_end
__tls_end	dd 0			; DATA XREF: .tls:TlsEnd_ptro
		public ___tls_end__
___tls_end__	dd 78h dup(0)
		align 1000h
_tls		ends


		end _mainCRTStartup
