;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7F8E63AC5E627842F59231E559EB2F94
; Input	CRC32 :	A35FF9C2

; File Name   :	C:\compspace\compare\gpg\dlls\original\libkleopatraclientgui.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	6F100000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000AC7C (  44156.)
; Section size in file		: 0000AE00 (  44544.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6F101000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_6F101000	proc near		; DATA XREF: .CRT:6F11700Co

var_1C		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+var_1C], 80h ;	size_t
		call	malloc
		mov	ebx, eax
		mov	[esp+1Ch+var_1C], eax
		call	sub_6F107270
		test	ebx, ebx
		mov	ds:dword_6F1133AC, eax
		mov	ds:dword_6F1133A8, eax
		mov	eax, 1
		jz	short loc_6F101035
		mov	dword ptr [ebx], 0
		xor	al, al

loc_6F101035:				; CODE XREF: sub_6F101000+2Bj
		add	esp, 18h
		pop	ebx
		retn
sub_6F101000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F101040	proc near		; CODE XREF: sub_6F101260+DAp
					; sub_6F101260+128p ...

dwMilliseconds	= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	edx, [esp+1Ch+arg_4]
		test	edx, edx
		jnz	short loc_6F1010C6
		mov	edx, ds:dword_6F113000
		xor	eax, eax
		test	edx, edx
		jle	short loc_6F1010BE
		sub	edx, 1
		mov	ebx, ds:Sleep
		mov	ds:dword_6F113000, edx
		jmp	short loc_6F10107C
; ---------------------------------------------------------------------------
		align 10h

loc_6F101070:				; CODE XREF: sub_6F101040+5Dj
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	ebx ; Sleep
		sub	esp, 4

loc_6F10107C:				; CODE XREF: sub_6F101040+28j
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+dwMilliseconds], offset dword_6F1133B0
		call	sub_6F108490
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6F101070
		mov	eax, ds:dword_6F1133B4
		cmp	eax, 2
		jz	loc_6F101170
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, 1

loc_6F1010BE:				; CODE XREF: sub_6F101040+17j
					; sub_6F101040+8Ej
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6F1010C6:				; CODE XREF: sub_6F101040+Bj
		cmp	edx, 1
		mov	eax, 1
		jnz	short loc_6F1010BE
		mov	eax, large fs:18h
		mov	esi, ds:Sleep
		mov	ebx, [eax+4]
		jmp	short loc_6F1010F5
; ---------------------------------------------------------------------------

loc_6F1010E1:				; CODE XREF: sub_6F101040+D2j
		cmp	eax, ebx
		jz	loc_6F101238
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_6F1010F5:				; CODE XREF: sub_6F101040+9Fj
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+dwMilliseconds], offset dword_6F1133B0
		call	sub_6F108490
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6F1010E1
		xor	ebx, ebx

loc_6F101116:				; CODE XREF: sub_6F101040+1FDj
		mov	eax, ds:dword_6F1133B4
		test	eax, eax
		jz	loc_6F1011F7
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit

loc_6F10112F:				; CODE XREF: sub_6F101040+1F3j
		test	ebx, ebx
		jz	loc_6F101242

loc_6F101137:				; CODE XREF: sub_6F101040+219j
		mov	eax, ds:off_6F1128A0
		test	eax, eax
		jz	short loc_6F10115C
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 2
		mov	[esp+1Ch+var_14], edx
		mov	edx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwMilliseconds], edx
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_6F10115C:				; CODE XREF: sub_6F101040+FEj
		add	ds:dword_6F113000, 1
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6F101170:				; CODE XREF: sub_6F101040+67j
		mov	eax, ds:dword_6F1133AC
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_6F107260
		test	eax, eax
		mov	ebx, eax
		jz	short loc_6F1011C9
		mov	eax, ds:dword_6F1133A8
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_6F107260
		mov	esi, eax

loc_6F101192:				; CODE XREF: sub_6F101040+15Dj
		sub	esi, 4
		cmp	ebx, esi
		ja	short loc_6F1011A8

loc_6F101199:				; CODE XREF: sub_6F101040+166j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6F101192
		sub	esi, 4
		call	eax
		cmp	ebx, esi
		jbe	short loc_6F101199

loc_6F1011A8:				; CODE XREF: sub_6F101040+157j
		mov	[esp+1Ch+dwMilliseconds], ebx ;	void *
		nop
		lea	esi, [esi+0]
		call	free
		mov	ds:dword_6F1133A8, 0
		mov	ds:dword_6F1133AC, 0

loc_6F1011C9:				; CODE XREF: sub_6F101040+141j
		mov	ds:dword_6F1133B4, 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_6F1133B0
		call	sub_6F1084C0
		mov	eax, 1
		sub	esp, 8
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6F1011F7:				; CODE XREF: sub_6F101040+DDj
		mov	ds:dword_6F1133B4, 1
		mov	[esp+1Ch+var_18], offset dword_6F117010
		mov	[esp+1Ch+dwMilliseconds], offset dword_6F117008
		call	_initterm
		mov	[esp+1Ch+var_18], offset dword_6F117004
		mov	[esp+1Ch+dwMilliseconds], offset dword_6F117000
		call	_initterm
		mov	ds:dword_6F1133B4, 2
		jmp	loc_6F10112F
; ---------------------------------------------------------------------------

loc_6F101238:				; CODE XREF: sub_6F101040+A3j
		mov	ebx, 1
		jmp	loc_6F101116
; ---------------------------------------------------------------------------

loc_6F101242:				; CODE XREF: sub_6F101040+F1j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_6F1133B0
		call	sub_6F1084C0
		sub	esp, 8
		jmp	loc_6F101137
sub_6F101040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F101260	proc near		; CODE XREF: DllEntryPoint+1Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		test	edx, edx
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_C], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, ecx
		mov	[esp+2Ch+var_8], edi
		mov	dword_6F10C010,	edx
		jnz	short loc_6F1012E0
		mov	eax, ds:dword_6F113000
		test	eax, eax
		jz	loc_6F1013B7
		call	sub_6F107430

loc_6F101295:				; CODE XREF: sub_6F101260+90j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F107760
		sub	esp, 0Ch
		cmp	esi, 3
		mov	edi, eax
		jz	loc_6F1013A0
		test	esi, esi
		jz	loc_6F1013A0

loc_6F1012BB:				; CODE XREF: sub_6F101260+B2j
					; sub_6F101260+F9j ...
		mov	eax, edi
		mov	ebx, [esp+2Ch+var_10]
		mov	dword_6F10C010,	0FFFFFFFFh
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F1012E0:				; CODE XREF: sub_6F101260+21j
		lea	eax, [edx-1]
		cmp	eax, 1
		jbe	short loc_6F101360

loc_6F1012E8:				; CODE XREF: sub_6F101260+134j
		call	sub_6F107430
		cmp	esi, 1
		jnz	short loc_6F101295
		call	sub_6F107740
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F107760
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	short loc_6F1012BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F107760
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F101040
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F107770
		sub	esp, 0Ch
		jmp	loc_6F1012BB
; ---------------------------------------------------------------------------
		align 10h

loc_6F101360:				; CODE XREF: sub_6F101260+86j
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F107770
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jz	loc_6F1012BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F101040
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	loc_6F1012E8
		jmp	loc_6F1012BB
; ---------------------------------------------------------------------------
		align 10h

loc_6F1013A0:				; CODE XREF: sub_6F101260+4Dj
					; sub_6F101260+55j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F101040
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6F1013C0

loc_6F1013B7:				; CODE XREF: sub_6F101260+2Aj
		xor	edi, edi
		jmp	loc_6F1012BB
; ---------------------------------------------------------------------------
		align 10h

loc_6F1013C0:				; CODE XREF: sub_6F101260+155j
		test	edi, edi
		jz	loc_6F1012BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F107770
		sub	esp, 0Ch
		mov	edi, eax
		jmp	loc_6F1012BB
sub_6F101260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_10		= dword	ptr -10h
hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpReserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+fdwReason]
		mov	ds:dword_6F113014, 0
		cmp	edx, 1
		jz	short loc_6F101420

loc_6F101406:				; CODE XREF: DllEntryPoint+3Dj
		mov	ecx, [esp+1Ch+lpReserved]
		mov	eax, [esp+1Ch+hinstDLL]
		call	sub_6F101260
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6F101420:				; CODE XREF: DllEntryPoint+14j
		mov	[esp+1Ch+var_10], edx
		call	sub_6F107810
		mov	edx, [esp+1Ch+var_10]
		jmp	short loc_6F101406
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F101430	proc near		; CODE XREF: sub_6F108630+6p
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_6F110A68
		test	eax, eax
		jz	short locret_6F10147B
		mov	dword ptr [esp], offset	ModuleName ; "libgcj_s.dll"
		call	ds:GetModuleHandleA
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_6F10146E
		mov	dword ptr [esp+4], offset ProcName ; "_Jv_RegisterClasses"
		mov	[esp], edx	; hModule
		call	ds:GetProcAddress
		sub	esp, 8

loc_6F10146E:				; CODE XREF: sub_6F101430+28j
		test	eax, eax
		jz	short locret_6F10147B
		mov	dword ptr [esp], offset	dword_6F110A68
		call	eax

locret_6F10147B:			; CODE XREF: sub_6F101430+Dj
					; sub_6F101430+40j
		leave
		retn
sub_6F101430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6F101480()
sub_6F101480	proc near		; DATA XREF: sub_6F108630+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_6F101480	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. _ZN15KleopatraClient3Gui20CertificateRequester30setMultipleCertificatesAllowedEb

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester30setMultipleCertificatesAllowedEb
_ZN15KleopatraClient3Gui20CertificateRequester30setMultipleCertificatesAllowedEb proc near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		mov	eax, [esp+4+arg_0]
		movzx	ecx, [esp+4+arg_4]
		mov	edx, [eax+14h]
		movzx	eax, byte ptr [edx+0Ch]
		mov	ebx, eax
		and	ebx, 1
		cmp	bl, cl
		jz	short loc_6F1014B5
		and	ecx, 1
		and	eax, 0FFFFFFFEh
		or	eax, ecx
		mov	[edx+0Ch], al

loc_6F1014B5:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester30setMultipleCertificatesAllowedEb+18j
		pop	ebx
		retn
_ZN15KleopatraClient3Gui20CertificateRequester30setMultipleCertificatesAllowedEb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. _ZNK15KleopatraClient3Gui20CertificateRequester27multipleCertificatesAllowedEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester27multipleCertificatesAllowedEv
_ZNK15KleopatraClient3Gui20CertificateRequester27multipleCertificatesAllowedEv proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		movzx	eax, byte ptr [eax+0Ch]
		and	eax, 1
		retn
_ZNK15KleopatraClient3Gui20CertificateRequester27multipleCertificatesAllowedEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. _ZN15KleopatraClient3Gui20CertificateRequester33setOnlySigningCertificatesAllowedEb

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester33setOnlySigningCertificatesAllowedEb
_ZN15KleopatraClient3Gui20CertificateRequester33setOnlySigningCertificatesAllowedEb proc near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		mov	eax, [esp+4+arg_0]
		movzx	ebx, [esp+4+arg_4]
		mov	edx, [eax+14h]
		movzx	ecx, byte ptr [edx+0Ch]
		mov	eax, ecx
		shr	al, 1
		and	eax, 1
		cmp	al, bl
		jz	short loc_6F1014FB
		and	ebx, 1
		mov	eax, ecx
		add	ebx, ebx
		and	eax, 0FFFFFFFDh
		or	eax, ebx
		mov	[edx+0Ch], al

loc_6F1014FB:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester33setOnlySigningCertificatesAllowedEb+1Aj
		pop	ebx
		retn
_ZN15KleopatraClient3Gui20CertificateRequester33setOnlySigningCertificatesAllowedEb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. _ZNK15KleopatraClient3Gui20CertificateRequester30onlySigningCertificatesAllowedEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester30onlySigningCertificatesAllowedEv
_ZNK15KleopatraClient3Gui20CertificateRequester30onlySigningCertificatesAllowedEv proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 1
		and	eax, 1
		retn
_ZNK15KleopatraClient3Gui20CertificateRequester30onlySigningCertificatesAllowedEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. _ZN15KleopatraClient3Gui20CertificateRequester36setOnlyEncryptionCertificatesAllowedEb

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester36setOnlyEncryptionCertificatesAllowedEb
_ZN15KleopatraClient3Gui20CertificateRequester36setOnlyEncryptionCertificatesAllowedEb proc near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		mov	eax, [esp+4+arg_0]
		movzx	ebx, [esp+4+arg_4]
		mov	edx, [eax+14h]
		movzx	ecx, byte ptr [edx+0Ch]
		mov	eax, ecx
		shr	al, 2
		and	eax, 1
		cmp	al, bl
		jz	short loc_6F10154D
		and	ebx, 1
		mov	eax, ecx
		shl	ebx, 2
		and	eax, 0FFFFFFFBh
		or	eax, ebx
		mov	[edx+0Ch], al

loc_6F10154D:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester36setOnlyEncryptionCertificatesAllowedEb+1Bj
		pop	ebx
		retn
_ZN15KleopatraClient3Gui20CertificateRequester36setOnlyEncryptionCertificatesAllowedEb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. _ZNK15KleopatraClient3Gui20CertificateRequester33onlyEncryptionCertificatesAllowedEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester33onlyEncryptionCertificatesAllowedEv
_ZNK15KleopatraClient3Gui20CertificateRequester33onlyEncryptionCertificatesAllowedEv proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 2
		and	eax, 1
		retn
_ZNK15KleopatraClient3Gui20CertificateRequester33onlyEncryptionCertificatesAllowedEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. _ZN15KleopatraClient3Gui20CertificateRequester33setOnlyOpenPGPCertificatesAllowedEb

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester33setOnlyOpenPGPCertificatesAllowedEb
_ZN15KleopatraClient3Gui20CertificateRequester33setOnlyOpenPGPCertificatesAllowedEb proc near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		mov	eax, [esp+4+arg_0]
		movzx	ebx, [esp+4+arg_4]
		mov	edx, [eax+14h]
		movzx	ecx, byte ptr [edx+0Ch]
		mov	eax, ecx
		shr	al, 3
		and	eax, 1
		cmp	al, bl
		jz	short loc_6F10159D
		and	ebx, 1
		mov	eax, ecx
		shl	ebx, 3
		and	eax, 0FFFFFFF7h
		or	eax, ebx
		mov	[edx+0Ch], al

loc_6F10159D:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester33setOnlyOpenPGPCertificatesAllowedEb+1Bj
		pop	ebx
		retn
_ZN15KleopatraClient3Gui20CertificateRequester33setOnlyOpenPGPCertificatesAllowedEb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. _ZNK15KleopatraClient3Gui20CertificateRequester30onlyOpenPGPCertificatesAllowedEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester30onlyOpenPGPCertificatesAllowedEv
_ZNK15KleopatraClient3Gui20CertificateRequester30onlyOpenPGPCertificatesAllowedEv proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 3
		and	eax, 1
		retn
_ZNK15KleopatraClient3Gui20CertificateRequester30onlyOpenPGPCertificatesAllowedEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. _ZN15KleopatraClient3Gui20CertificateRequester30setOnlyX509CertificatesAllowedEb

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester30setOnlyX509CertificatesAllowedEb
_ZN15KleopatraClient3Gui20CertificateRequester30setOnlyX509CertificatesAllowedEb proc near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		mov	eax, [esp+4+arg_0]
		movzx	edx, [esp+4+arg_4]
		mov	ecx, [eax+14h]
		movzx	ebx, byte ptr [ecx+0Ch]
		mov	eax, ebx
		shr	al, 4
		and	eax, 1
		cmp	al, dl
		jz	short loc_6F1015ED
		and	edx, 1
		mov	eax, ebx
		shl	edx, 4
		and	eax, 0FFFFFFEFh
		or	eax, edx
		mov	[ecx+0Ch], al

loc_6F1015ED:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester30setOnlyX509CertificatesAllowedEb+1Bj
		pop	ebx
		retn
_ZN15KleopatraClient3Gui20CertificateRequester30setOnlyX509CertificatesAllowedEb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. _ZNK15KleopatraClient3Gui20CertificateRequester27onlyX509CertificatesAllowedEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester27onlyX509CertificatesAllowedEv
_ZNK15KleopatraClient3Gui20CertificateRequester27onlyX509CertificatesAllowedEv proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 4
		and	eax, 1
		retn
_ZNK15KleopatraClient3Gui20CertificateRequester27onlyX509CertificatesAllowedEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. _ZN15KleopatraClient3Gui20CertificateRequester24setOnlySecretKeysAllowedEb

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester24setOnlySecretKeysAllowedEb
_ZN15KleopatraClient3Gui20CertificateRequester24setOnlySecretKeysAllowedEb proc	near

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		mov	eax, [esp+4+arg_0]
		movzx	edx, [esp+4+arg_4]
		mov	ecx, [eax+14h]
		movzx	ebx, byte ptr [ecx+0Ch]
		mov	eax, ebx
		shr	al, 5
		and	eax, 1
		cmp	al, dl
		jz	short loc_6F10163D
		and	edx, 1
		mov	eax, ebx
		shl	edx, 5
		and	eax, 0FFFFFFDFh
		or	eax, edx
		mov	[ecx+0Ch], al

loc_6F10163D:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester24setOnlySecretKeysAllowedEb+1Bj
		pop	ebx
		retn
_ZN15KleopatraClient3Gui20CertificateRequester24setOnlySecretKeysAllowedEb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. _ZNK15KleopatraClient3Gui20CertificateRequester21onlySecretKeysAllowedEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester21onlySecretKeysAllowedEv
_ZNK15KleopatraClient3Gui20CertificateRequester21onlySecretKeysAllowedEv proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 5
		and	eax, 1
		retn
_ZNK15KleopatraClient3Gui20CertificateRequester21onlySecretKeysAllowedEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  28. _ZNK15KleopatraClient3Gui20CertificateRequester10metaObjectEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester10metaObjectEv
_ZNK15KleopatraClient3Gui20CertificateRequester10metaObjectEv proc near
					; DATA XREF: .rdata:off_6F112DC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4]
		mov	eax, [eax+18h]
		test	eax, eax
		jz	short loc_6F101670
		rep retn
; ---------------------------------------------------------------------------

loc_6F101670:				; CODE XREF: _ZNK15KleopatraClient3Gui20CertificateRequester10metaObjectEv+Cj
		mov	eax, offset _ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE
		retn
_ZNK15KleopatraClient3Gui20CertificateRequester10metaObjectEv endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F101680	proc near		; DATA XREF: .text:6F10BAF4o
		mov	eax, ds:_ZN7QWidget16staticMetaObjectE
		mov	_ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE, eax
		retn
sub_6F101680	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. _ZN15KleopatraClient3Gui20CertificateRequester27selectedCertificatesChangedERK11QStringList

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester27selectedCertificatesChangedERK11QStringList
_ZN15KleopatraClient3Gui20CertificateRequester27selectedCertificatesChangedERK11QStringList proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+158p
					; _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+2Ej

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_14], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], offset _ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN11QMetaObject8activateEP7QObjectPKS_iPPv
		add	esp, 2Ch
		retn
_ZN15KleopatraClient3Gui20CertificateRequester27selectedCertificatesChangedERK11QStringList endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc
_ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc	proc near
					; DATA XREF: .rdata:6F112DCCo

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		xor	eax, eax
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], ebx
		mov	[esp+1Ch+var_C], esi
		test	edx, edx
		mov	[esp+1Ch+var_8], edi
		jz	short loc_6F10170F
		mov	ecx, 35h
		mov	esi, edx
		mov	edi, offset aKleopatraclien ; "KLEOPATRACLIENT_NAMESPACE::Gui::Certifi"...
		repe cmpsb
		setnbe	al
		setb	cl
		mov	esi, eax
		mov	eax, ebp
		mov	ebx, esi
		cmp	bl, cl
		jnz	short loc_6F101723

loc_6F10170F:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc+1Fj
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6F101723:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc+3Dj
		mov	eax, ds:_ZN7QWidget11qt_metacastEPKc
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	eax
_ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv
_ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+41j

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BB10
		mov	[ebp+var_18], offset sub_6F10194A
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		test	eax, eax
		jz	short loc_6F101786
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F101786:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+37j
		mov	dword ptr [esp], 0Ch ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6F10A720
		mov	[ebp+var_40], eax
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		mov	[ebp+var_38], 2
		call	ds:_ZN15KleopatraClient24SelectCertificateCommandC1EP7QObject
		mov	eax, [ebp+var_40]
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_48], eax
		movzx	eax, byte ptr [edx+0Ch]
		and	eax, 1
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_ZN15KleopatraClient24SelectCertificateCommand30setMultipleCertificatesAllowedEb
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+0Ch]
		shr	al, 1
		and	eax, 1
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN15KleopatraClient24SelectCertificateCommand33setOnlySigningCertificatesAllowedEb
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+0Ch]
		shr	al, 2
		and	eax, 1
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN15KleopatraClient24SelectCertificateCommand36setOnlyEncryptionCertificatesAllowedEb
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+0Ch]
		shr	al, 3
		and	eax, 1
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN15KleopatraClient24SelectCertificateCommand33setOnlyOpenPGPCertificatesAllowedEb
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+0Ch]
		shr	al, 4
		and	eax, 1
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN15KleopatraClient24SelectCertificateCommand30setOnlyX509CertificatesAllowedEb
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+0Ch]
		shr	al, 5
		and	eax, 1
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN15KleopatraClient24SelectCertificateCommand24setOnlySecretKeysAllowedEb
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[esp+4], eax
		mov	edx, [ebp+var_40]
		mov	[esp], edx
		call	ds:_ZN15KleopatraClient24SelectCertificateCommand23setSelectedCertificatesERK11QStringList
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[esp], eax
		call	ds:_ZNK7QWidget6windowEv
		test	eax, eax
		jz	short loc_6F1018AC
		mov	[esp], eax
		call	ds:_ZNK7QWidget14effectiveWinIdEv
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	ds:_ZN15KleopatraClient7Command12setParentWIdEP6HWND__

loc_6F1018AC:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+151j
		mov	edx, [ebp+var_40]
		mov	[ebp+var_44], edx
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], offset a1slotcommandfi ; "1slotCommandFinished()"
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	dword ptr [esp+4], offset a2finished ; "2finished()"
		mov	[esp+8], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_40]
		mov	[ebp+var_48], 0
		cmp	eax, [edx+8]
		jz	short loc_6F101913
		mov	[esp+4], eax
		mov	eax, edx
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN11QMetaObject11changeGuardEPP7QObjectS1_
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+8]
		mov	[ebp+var_44], edx

loc_6F101913:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+1B6j
		mov	edx, [ebp+var_44]
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN15KleopatraClient7Command5startEv
		mov	dword ptr [esp+4], 0
		mov	eax, [ebp+arg_0]
		add	eax, 24h
		mov	[esp], eax
		call	ds:_ZN7QWidget10setEnabledEb
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10194A	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		cmp	dword ptr [ebp-38h], 1
		mov	[ebp-50h], eax
		jz	short loc_6F101988
		cmp	dword ptr [ebp-48h], 0
		mov	[ebp-4Ch], eax
		jz	short loc_6F101976
		mov	edx, [ebp-48h]
		mov	eax, [edx]
		mov	[esp+0], edx
		mov	eax, [eax+10h]
		mov	dword ptr [ebp-38h], 0
		call	eax

loc_6F101976:				; CODE XREF: sub_6F10194A+16j
		mov	eax, [ebp-4Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F101988:				; CODE XREF: sub_6F10194A+Dj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6F10A700
		mov	edx, [ebp-50h]
		mov	[esp+0], edx
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_6F10194A	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. _ZNK15KleopatraClient3Gui20CertificateRequester19selectedCertificateEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester19selectedCertificateEv
_ZNK15KleopatraClient3Gui20CertificateRequester19selectedCertificateEv proc near

var_1C		= dword	ptr -1Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], esi
		mov	esi, [eax+14h]
		mov	edx, [esi+4]
		mov	ecx, [edx+8]
		cmp	[edx+0Ch], ecx
		jz	short loc_6F101A05
		mov	eax, [edx]
		cmp	eax, 1
		jz	short loc_6F1019E9
		lea	eax, [esi+4]
		mov	[esp+1Ch+var_1C], eax
		call	_ZN5QListI7QStringE13detach_helperEv
		mov	edx, [esi+4]
		mov	ecx, [edx+8]

loc_6F1019E9:				; CODE XREF: _ZNK15KleopatraClient3Gui20CertificateRequester19selectedCertificateEv+26j
		mov	edx, [edx+ecx*4+14h]
		mov	[ebx], edx
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_4]
		mov	ebx, [esp+1Ch+var_8]
		add	esp, 1Ch
		retn	4
; ---------------------------------------------------------------------------

loc_6F101A05:				; CODE XREF: _ZNK15KleopatraClient3Gui20CertificateRequester19selectedCertificateEv+1Fj
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[ebx], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_4]
		mov	ebx, [esp+1Ch+var_8]
		add	esp, 1Ch
		retn	4
_ZNK15KleopatraClient3Gui20CertificateRequester19selectedCertificateEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. _ZNK15KleopatraClient3Gui20CertificateRequester20selectedCertificatesEv

; =============== S U B	R O U T	I N E =======================================


		public _ZNK15KleopatraClient3Gui20CertificateRequester20selectedCertificatesEv
_ZNK15KleopatraClient3Gui20CertificateRequester20selectedCertificatesEv	proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+F2p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [eax+14h]
		mov	edx, [eax+4]
		mov	[ebx], edx
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ebx]
		test	byte ptr [eax+10h], 1
		jnz	short loc_6F101A5A
		mov	[esp+1Ch+var_1C], ebx
		call	_ZN5QListI7QStringE13detach_helperEv

loc_6F101A5A:				; CODE XREF: _ZNK15KleopatraClient3Gui20CertificateRequester20selectedCertificatesEv+20j
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn	4
_ZNK15KleopatraClient3Gui20CertificateRequester20selectedCertificatesEv	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  47. _ZThn8_N15KleopatraClient3Gui20CertificateRequesterD1Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZThn8_N15KleopatraClient3Gui20CertificateRequesterD1Ev
_ZThn8_N15KleopatraClient3Gui20CertificateRequesterD1Ev	proc near
					; DATA XREF: .rdata:off_6F112EB0o

arg_0		= dword	ptr  4

		add	[esp+arg_0], 0FFFFFFF8h
		jmp	short _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev
_ZThn8_N15KleopatraClient3Gui20CertificateRequesterD1Ev	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev
_ZN15KleopatraClient3Gui20CertificateRequesterD1Ev proc	near
					; CODE XREF: _ZThn8_N15KleopatraClient3Gui20CertificateRequesterD1Ev+5j
					; DATA XREF: .rdata:6F112DD4o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BB28
		mov	[ebp+var_18], offset sub_6F101B81
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+14h]
		mov	dword ptr [edx], offset	off_6F112DC8
		mov	dword ptr [edx+8], offset off_6F112EB0
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6F101B3F
		add	eax, 38h
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_ZN11QHBoxLayoutD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 2
		add	eax, 24h
		mov	[esp], eax
		call	ds:_ZN11QPushButtonD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 3
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN9QLineEditD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 4
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	ecx, [ebp+var_40]
		mov	edx, [ebp+var_40]
		add	ecx, 4
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6F101B66

loc_6F101B34:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+FFj
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	sub_6F10A700

loc_6F101B3F:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+47j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], 0
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QWidgetD2Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F101B66:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+B2j
		mov	edx, [ebp+var_40]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_38], 5
		mov	[esp+4], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE
		jmp	short loc_6F101B34
_ZN15KleopatraClient3Gui20CertificateRequesterD1Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F101B81	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-44h], edx
		jz	short loc_6F101BB8
		cmp	eax, 2
		jz	short loc_6F101BCE
		cmp	eax, 3
		jz	short loc_6F101BE4
		cmp	eax, 4
		nop
		jz	short loc_6F101BF9
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 24h
		mov	[esp+0], eax
		call	ds:_ZN11QPushButtonD1Ev

loc_6F101BB8:				; CODE XREF: sub_6F101B81+Fj
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 10h
		mov	[esp+0], eax
		call	ds:_ZN9QLineEditD1Ev

loc_6F101BCE:				; CODE XREF: sub_6F101B81+14j
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 8
		mov	[esp+0], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject

loc_6F101BE4:				; CODE XREF: sub_6F101B81+19j
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	_ZN11QStringListD1Ev

loc_6F101BF9:				; CODE XREF: sub_6F101B81+1Fj
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QWidgetD2Ev
		mov	edx, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6F101B81	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE
_ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE proc near

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6F10B4E0
		mov	[ebp+var_30], offset dword_6F10BB48
		mov	[ebp+var_28], offset sub_6F101CF8
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		call	ds:_ZN7QWidgetC2EPS_6QFlagsIN2Qt10WindowTypeEE
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	off_6F112DC8
		mov	dword ptr [eax+8], offset off_6F112EB0
		mov	dword ptr [esp], 48h ; size_t
		mov	[ebp+var_48], 2
		call	sub_6F10A720
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_50], eax
		mov	[ebp+var_54], eax
		mov	[eax], edx
		mov	edx, [ebp+var_50]
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[edx+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_50]
		and	byte ptr [eax+0Ch], 0C0h
		mov	edx, [ebp+var_50]
		mov	dword ptr [eax+8], 0
		mov	eax, [edx]
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		mov	eax, edx
		add	eax, 10h
		mov	[esp], eax
		call	_ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_50]
		mov	[eax+14h], edx
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F101CF8	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE+20o
		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-58h], eax
		jz	short loc_6F101D3D
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 8
		mov	[esp+0], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	_ZN11QStringListD1Ev
		mov	edx, [ebp-50h]
		mov	[esp+0], edx
		call	sub_6F10A700

loc_6F101D3D:				; CODE XREF: sub_6F101CF8+Dj
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QWidgetD2Ev
		mov	edx, [ebp-58h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6F101CF8	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList
_ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList	proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+206p
					; _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+309p ...

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 8Ch
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6F10B4E0
		mov	[ebp+var_40], offset dword_6F10BB50
		mov	[ebp+var_38], offset sub_6F101FB8
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	edx, [edx+14h]
		mov	[ebp+var_64], edx
		mov	eax, [ebx]
		mov	edx, [edx+4]
		mov	ecx, [eax+0Ch]
		mov	edi, [eax+8]
		mov	ebx, [edx+0Ch]
		mov	esi, ecx
		sub	esi, edi
		mov	[ebp+var_74], esi
		mov	esi, ebx
		sub	esi, [edx+8]
		cmp	[ebp+var_74], esi
		jz	loc_6F101EE0

loc_6F101DD4:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+1D4j
		mov	edx, [ebp+arg_4]
		mov	ebx, [ebp+var_64]
		mov	edx, [edx]
		mov	[ebp+var_70], edx
		cmp	[ebx+4], edx
		jz	short loc_6F101E20
		add	ebx, 4
		mov	[ebp+var_7C], ebx
		lock inc dword ptr [edx]
		setnz	al
		mov	esi, [ebp+var_64]
		mov	eax, [esi+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F101F50
		mov	edx, [ebp+var_70]
		mov	eax, [ebp+var_64]
		mov	[eax+4], edx
		test	byte ptr [edx+10h], 1
		jz	loc_6F101F79

loc_6F101E17:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+203j
		mov	ebx, [ebp+arg_0]
		mov	ebx, [ebx+14h]
		mov	[ebp+var_64], ebx

loc_6F101E20:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+72j
					; _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+224j
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	asc_6F1110A2 ; " "
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		lea	edx, [ebp+var_1C]
		mov	[esp+8], edx
		mov	edx, [ebp+var_64]
		mov	[ebp+var_58], 2
		add	edx, 4
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString
		sub	esp, 4
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		mov	eax, [ebp+var_64]
		mov	[ebp+var_58], 1
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN9QLineEdit7setTextERK7QString
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F101FA0

loc_6F101E94:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+243j
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6F101EB4
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_6F101EB4:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+12Fj
		mov	esi, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], esi
		mov	[esp], eax
		call	_ZN15KleopatraClient3Gui20CertificateRequester27selectedCertificatesChangedERK11QStringList

loc_6F101ECD:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+176j
					; _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+188j	...
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F101EE0:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+5Ej
		mov	esi, [ebp+var_64]
		cmp	eax, [esi+4]
		jz	short loc_6F101ECD
		lea	ecx, [eax+ecx*4+14h]
		lea	eax, [eax+edi*4+14h]
		cmp	ecx, eax
		mov	[ebp+var_68], ecx
		mov	[ebp+var_78], eax
		jz	short loc_6F101ECD
		mov	eax, ds:_ZNK7QStringeqERKS_
		lea	edx, [edx+ebx*4+14h]
		mov	[ebp+var_6C], edx
		mov	[ebp+var_60], eax
		jmp	short loc_6F101F18
; ---------------------------------------------------------------------------
		align 10h

loc_6F101F10:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+1C9j
		mov	eax, [ebp+var_68]
		cmp	[ebp+var_78], eax
		jz	short loc_6F101ECD

loc_6F101F18:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+199j
		sub	[ebp+var_68], 4
		sub	[ebp+var_6C], 4
		mov	edx, [ebp+var_6C]
		mov	ebx, [ebp+var_68]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], edx
		mov	[esp], ebx
		call	[ebp+var_60]
		test	al, al
		jnz	short loc_6F101F10
		mov	esi, [ebp+arg_0]
		mov	esi, [esi+14h]
		mov	[ebp+var_64], esi
		jmp	loc_6F101DD4
; ---------------------------------------------------------------------------
		align 10h

loc_6F101F50:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+8Ej
		mov	eax, [esi+4]
		mov	[esp], ebx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE
		mov	edx, [ebp+var_70]
		mov	eax, [ebp+var_64]
		mov	[eax+4], edx
		test	byte ptr [edx+10h], 1
		jnz	loc_6F101E17

loc_6F101F79:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+A1j
		mov	esi, [ebp+var_7C]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], esi
		call	_ZN5QListI7QStringE13detach_helperEv
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		mov	[ebp+var_64], eax
		jmp	loc_6F101E20
; ---------------------------------------------------------------------------
		align 10h

loc_6F101FA0:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+11Ej
		mov	eax, [ebp+var_20]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F101E94
_ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F101FB8	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+26o
		add	ebp, 18h
		mov	edx, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-80h], edx
		jz	short loc_6F101FD9
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev

loc_6F101FD9:				; CODE XREF: sub_6F101FB8+Dj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev
		mov	ebx, [ebp-80h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ebx
		call	_Unwind_SjLj_Resume
sub_6F101FB8	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv
_ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+50j

var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_A		= word ptr -0Ah
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6F10B4E0
		mov	[ebp+var_40], offset dword_6F10BB58
		mov	[ebp+var_38], offset sub_6F1022A0
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZNK15KleopatraClient7Command11wasCanceledEv
		test	al, al
		jnz	loc_6F102192
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+8]
		mov	[esp], eax
		call	ds:_ZNK15KleopatraClient7Command5errorEv
		test	al, al
		jz	loc_6F1021D0
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_18]
		mov	[ebp+var_20], 400h
		mov	[ebp+var_A], 20h
		mov	edx, [ecx+8]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK15KleopatraClient7Command11errorStringEv
		lea	eax, [ebp+var_14]
		mov	[ebp+var_58], 5
		sub	esp, 4
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset aThereWasAnErro ; "There was an error	while connecting to "...
		mov	dword ptr [esp+4], offset _ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE
		mov	[esp], eax
		call	ds:_ZNK11QMetaObject2trEPKcS1_
		sub	esp, 4
		lea	edx, [ebp+var_A]
		mov	[esp+10h], edx
		lea	edx, [ebp+var_18]
		lea	eax, [ebp+var_1C]
		mov	[esp+8], edx
		lea	edx, [ebp+var_14]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_58], 4
		call	ds:_ZNK7QString3argERKS_iRK5QChar
		sub	esp, 4
		lea	eax, [ebp+var_10]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset aKleopatraError ; "Kleopatra Error"
		mov	dword ptr [esp+4], offset _ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE
		mov	[esp], eax
		mov	[ebp+var_58], 3
		call	ds:_ZNK11QMetaObject2trEPKcS1_
		mov	edx, [ebp+arg_0]
		sub	esp, 4
		lea	eax, [ebp+var_20]
		mov	[esp+0Ch], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+8], eax
		lea	eax, [ebp+var_10]
		mov	dword ptr [esp+10h], 0
		mov	[esp+4], eax
		mov	eax, [edx]
		mov	[ebp+var_58], 2
		mov	[esp], eax
		call	ds:_ZN11QMessageBox11informationEP7QWidgetRK7QStringS4_6QFlagsINS_14StandardButtonEES6_
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F102288

loc_6F10215F:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+29Bj
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F102270

loc_6F102170:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+283j
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F102258

loc_6F102181:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+26Bj
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F102240

loc_6F102192:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+4Aj
					; _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+216j ...
		mov	eax, [ebp+arg_0]
		mov	dword ptr [esp+4], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		add	eax, 24h
		mov	[esp], eax
		call	ds:_ZN7QWidget10setEnabledEb
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		test	eax, eax
		jz	short loc_6F1021C2
		mov	edx, [eax]
		mov	[esp], eax
		call	dword ptr [edx+10h]

loc_6F1021C2:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+1B8j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F1021D0:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+61j
		mov	edx, [ebp+arg_0]
		lea	ecx, [ebp+var_24]
		mov	eax, [edx+8]
		mov	[esp], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		call	ds:_ZNK15KleopatraClient24SelectCertificateCommand20selectedCertificatesEv
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_24]
		sub	esp, 4
		mov	[esp+4], eax
		mov	eax, [edx]
		mov	[ebp+var_58], 1
		mov	[esp], eax
		call	_ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_6F102192
		mov	eax, [ebp+var_24]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE
		jmp	loc_6F102192
; ---------------------------------------------------------------------------
		align 10h

loc_6F102240:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+18Cj
		mov	eax, [ebp+var_18]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F102192
; ---------------------------------------------------------------------------

loc_6F102258:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+17Bj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_58], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F102181
; ---------------------------------------------------------------------------

loc_6F102270:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+16Aj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_58], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F102170
; ---------------------------------------------------------------------------

loc_6F102288:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+159j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_58], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F10215F
_ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F1022A0	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+23o
		add	ebp, 8
		mov	eax, [ebp-58h]
		mov	ecx, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-60h], ecx
		jz	short loc_6F1022E6
		cmp	eax, 2
		jz	short loc_6F1022F8
		cmp	eax, 3
		jz	short loc_6F10230A
		cmp	eax, 4
		xchg	ax, ax
		jz	short loc_6F10231C
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN11QStringListD1Ev
		mov	eax, [ebp-60h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F1022E6:				; CODE XREF: sub_6F1022A0+Fj
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev

loc_6F1022F8:				; CODE XREF: sub_6F1022A0+14j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev

loc_6F10230A:				; CODE XREF: sub_6F1022A0+19j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev

loc_6F10231C:				; CODE XREF: sub_6F1022A0+20j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev
		mov	ecx, [ebp-60h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
sub_6F1022A0	endp

; Exported entry   5. _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv

; =============== S U B	R O U T	I N E =======================================


		public _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
_ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+16Cp
					; DATA XREF: .rdata:6F111128o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		cmp	[esp+0Ch+arg_4], 0
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [esp+0Ch+arg_8]
		mov	ecx, [esp+0Ch+arg_C]
		jnz	short loc_6F102373
		cmp	eax, 1
		jz	short loc_6F102377
		cmp	eax, 2
		jz	short loc_6F102386
		test	eax, eax
		jnz	short loc_6F102373
		mov	eax, [ecx+4]
		mov	[esp+0Ch+arg_4], eax
		add	esp, 0Ch
		jmp	_ZN15KleopatraClient3Gui20CertificateRequester27selectedCertificatesChangedERK11QStringList
; ---------------------------------------------------------------------------

loc_6F102373:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+14j
					; _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+22j
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6F102377:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+19j
		mov	eax, [edx+14h]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	_ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv
; ---------------------------------------------------------------------------

loc_6F102386:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv+1Ej
		mov	eax, [edx+14h]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	_ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv
_ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv
_ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv proc near
					; DATA XREF: .rdata:6F112DD0o

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 74h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6F10B4E0
		mov	[ebp+var_30], offset word_6F10BB66
		mov	[ebp+var_28], offset sub_6F102748
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+0Ch], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp], edx
		mov	[esp+4], eax
		call	ds:_ZN7QWidget11qt_metacallEN11QMetaObject4CallEiPPv
		test	eax, eax
		mov	[ebp+var_50], eax
		js	short loc_6F102460
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jz	short loc_6F102473
		cmp	[ebp+arg_4], 1
		jz	loc_6F102516
		cmp	[ebp+arg_4], 2
		jz	loc_6F102530
		cmp	[ebp+arg_4], 3
		xchg	ax, ax
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		cmp	[ebp+arg_4], 4
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		cmp	[ebp+arg_4], 5
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		cmp	[ebp+arg_4], 6
		xchg	ax, ax
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		cmp	[ebp+arg_4], 7
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		cmp	[ebp+arg_4], 8
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		lea	esi, [esi+0]

loc_6F102460:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+5Dj
					; _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+DCj ...
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F102473:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+64j
		cmp	eax, 2
		jle	short loc_6F1024F0

loc_6F102478:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+171j
		sub	[ebp+var_50], 3
		jmp	short loc_6F102460
; ---------------------------------------------------------------------------

loc_6F10247E:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+187j
					; DATA XREF: .rdata:off_6F1110ECo
		mov	edx, [ebp+arg_0] ; jumptable 6F102527 case 6
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], edx
		call	_ZNK15KleopatraClient3Gui20CertificateRequester20selectedCertificatesEv
		mov	eax, [ebp+var_C]
		mov	edx, [ebp+var_54]
		mov	[ebp+var_58], eax
		sub	esp, 4
		cmp	[edx], eax
		jz	short loc_6F1024CF
		lock inc dword ptr [eax]
		setnz	al
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F10272B

loc_6F1024BD:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+3A3j
		mov	edx, [ebp+var_58]
		mov	eax, [ebp+var_54]
		mov	[eax], edx
		test	byte ptr [edx+10h], 1
		jz	loc_6F102717

loc_6F1024CF:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+105j
					; _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+386j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	_ZN11QStringListD1Ev

loc_6F1024E1:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+80j
					; _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+8Aj ...
		sub	[ebp+var_50], 7	; jumptable 6F102527 default case
		jmp	loc_6F102460
; ---------------------------------------------------------------------------
		align 10h

loc_6F1024F0:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+D6j
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+var_50]
		mov	dword ptr [esp+4], 0
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+8], edx
		mov	[esp], eax
		call	_ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
		jmp	loc_6F102478
; ---------------------------------------------------------------------------

loc_6F102516:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+6Aj
		mov	edx, [ebp+arg_C]
		cmp	[ebp+var_50], 6	; switch 7 cases
		mov	edx, [edx]
		mov	[ebp+var_54], edx
		ja	short loc_6F1024E1 ; jumptable 6F102527	default	case
		mov	eax, [ebp+var_50]
		jmp	ds:off_6F1110EC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6F102530:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+74j
		mov	edx, [ebp+arg_C]
		cmp	[ebp+var_50], 6	; switch 7 cases
		mov	eax, [edx]
		ja	short loc_6F1024E1 ; jumptable 6F102527	default	case
		mov	edx, [ebp+var_50]
		jmp	ds:off_6F111108[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F102545:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+187j
					; DATA XREF: .rdata:off_6F1110ECo
		mov	edx, [ebp+arg_0] ; jumptable 6F102527 case 1
		mov	eax, [edx+14h]
		mov	edx, [ebp+var_54]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 1
		and	eax, 1
		mov	[edx], al
		jmp	short loc_6F1024E1 ; jumptable 6F102527	default	case
; ---------------------------------------------------------------------------

loc_6F10255B:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+187j
					; DATA XREF: .rdata:off_6F1110ECo
		mov	edx, [ebp+arg_0] ; jumptable 6F102527 case 0
		mov	eax, [edx+14h]
		mov	edx, [ebp+var_54]
		movzx	eax, byte ptr [eax+0Ch]
		and	eax, 1
		mov	[edx], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F102572:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+187j
					; DATA XREF: .rdata:off_6F1110ECo
		mov	edx, [ebp+arg_0] ; jumptable 6F102527 case 5
		mov	eax, [edx+14h]
		mov	edx, [ebp+var_54]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 5
		and	eax, 1
		mov	[edx], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F10258C:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+187j
					; DATA XREF: .rdata:off_6F1110ECo
		mov	edx, [ebp+arg_0] ; jumptable 6F102527 case 4
		mov	eax, [edx+14h]
		mov	edx, [ebp+var_54]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 4
		and	eax, 1
		mov	[edx], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F1025A6:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+187j
					; DATA XREF: .rdata:off_6F1110ECo
		mov	edx, [ebp+arg_0] ; jumptable 6F102527 case 3
		mov	eax, [edx+14h]
		mov	edx, [ebp+var_54]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 3
		and	eax, 1
		mov	[edx], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F1025C0:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+187j
					; DATA XREF: .rdata:off_6F1110ECo
		mov	edx, [ebp+arg_0] ; jumptable 6F102527 case 2
		mov	eax, [edx+14h]
		mov	edx, [ebp+var_54]
		movzx	eax, byte ptr [eax+0Ch]
		shr	al, 2
		and	eax, 1
		mov	[edx], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F1025DA:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+19Ej
					; DATA XREF: .rdata:off_6F111108o
		movzx	edx, byte ptr [eax] ; jumptable	6F10253E case 5
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		movzx	ebx, byte ptr [ecx+0Ch]
		mov	eax, ebx
		shr	al, 5
		and	eax, 1
		cmp	dl, al
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		and	edx, 1
		mov	eax, ebx
		shl	edx, 5
		and	eax, 0FFFFFFDFh
		or	eax, edx
		mov	[ecx+0Ch], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F10260C:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+19Ej
					; DATA XREF: .rdata:off_6F111108o
		movzx	ebx, byte ptr [eax] ; jumptable	6F10253E case 2
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+14h]
		movzx	ecx, byte ptr [edx+0Ch]
		mov	eax, ecx
		shr	al, 2
		and	eax, 1
		cmp	bl, al
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		and	ebx, 1
		mov	eax, ecx
		shl	ebx, 2
		and	eax, 0FFFFFFFBh
		or	eax, ebx
		mov	[edx+0Ch], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F10263E:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+19Ej
					; DATA XREF: .rdata:off_6F111108o
		movzx	ebx, byte ptr [eax] ; jumptable	6F10253E case 1
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+14h]
		movzx	ecx, byte ptr [edx+0Ch]
		mov	eax, ecx
		shr	al, 1
		and	eax, 1
		cmp	bl, al
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		and	ebx, 1
		mov	eax, ecx
		add	ebx, ebx
		and	eax, 0FFFFFFFDh
		or	eax, ebx
		mov	[edx+0Ch], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F10266E:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+19Ej
					; DATA XREF: .rdata:off_6F111108o
		movzx	ecx, byte ptr [eax] ; jumptable	6F10253E case 0
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+14h]
		movzx	eax, byte ptr [edx+0Ch]
		mov	ebx, eax
		and	ebx, 1
		cmp	cl, bl
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		and	ecx, 1
		and	eax, 0FFFFFFFEh
		or	eax, ecx
		mov	[edx+0Ch], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F102698:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+19Ej
					; DATA XREF: .rdata:off_6F111108o
		mov	edx, [ebp+arg_0] ; jumptable 6F10253E case 6
		mov	[esp+4], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	_ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F1026B3:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+19Ej
					; DATA XREF: .rdata:off_6F111108o
		movzx	edx, byte ptr [eax] ; jumptable	6F10253E case 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		movzx	ebx, byte ptr [ecx+0Ch]
		mov	eax, ebx
		shr	al, 4
		and	eax, 1
		cmp	dl, al
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		and	edx, 1
		mov	eax, ebx
		shl	edx, 4
		and	eax, 0FFFFFFEFh
		or	eax, edx
		mov	[ecx+0Ch], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F1026E5:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+19Ej
					; DATA XREF: .rdata:off_6F111108o
		movzx	ebx, byte ptr [eax] ; jumptable	6F10253E case 3
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+14h]
		movzx	ecx, byte ptr [edx+0Ch]
		mov	eax, ecx
		shr	al, 3
		and	eax, 1
		cmp	bl, al
		jz	loc_6F1024E1	; jumptable 6F102527 default case
		and	ebx, 1
		mov	eax, ecx
		shl	ebx, 3
		and	eax, 0FFFFFFF7h
		or	eax, ebx
		mov	[edx+0Ch], al
		jmp	loc_6F1024E1	; jumptable 6F102527 default case
; ---------------------------------------------------------------------------

loc_6F102717:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+129j
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	_ZN5QListI7QStringE13detach_helperEv
		jmp	loc_6F1024CF
; ---------------------------------------------------------------------------

loc_6F10272B:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+117j
		mov	edx, [ebp+var_54]
		mov	eax, [edx]
		mov	[esp], edx
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE
		jmp	loc_6F1024BD
_ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F102748	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+21o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-5Ch], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	_ZN11QStringListD1Ev
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6F102748	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. _ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString
_ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString proc near

var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6F10B4E0
		mov	[ebp+var_30], offset dword_6F10BB6C
		mov	[ebp+var_28], offset sub_6F102822
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	_ZN5QListI7QStringE6appendERKS0_
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_48], 2
		mov	[esp], eax
		call	_ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6F102815
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE

loc_6F102815:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString+7Aj
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F102822	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString+20o

arg_0		= dword	ptr  4

		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-54h], eax
		jz	short loc_6F10286C
		mov	[ebp-50h], eax
		mov	eax, [ebp-0Ch]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6F10285A
		mov	eax, [ebp-0Ch]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+arg_0], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE

loc_6F10285A:				; CODE XREF: sub_6F102822+1Dj
		mov	eax, [ebp-50h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10286C:				; CODE XREF: sub_6F102822+Dj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0
		call	_ZN11QStringListD1Ev
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6F102822	endp

; Exported entry  19. _ZN15KleopatraClient3Gui20CertificateRequesterC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequesterC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE
_ZN15KleopatraClient3Gui20CertificateRequesterC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE proc near

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6F10B4E0
		mov	[ebp+var_30], offset dword_6F10BB74
		mov	[ebp+var_28], offset sub_6F102968
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp], edx
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		call	ds:_ZN7QWidgetC2EPS_6QFlagsIN2Qt10WindowTypeEE
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	off_6F112DC8
		mov	dword ptr [eax+8], offset off_6F112EB0
		mov	dword ptr [esp], 48h ; size_t
		mov	[ebp+var_48], 2
		call	sub_6F10A720
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_50], eax
		mov	[ebp+var_54], eax
		mov	[eax], edx
		mov	edx, [ebp+var_50]
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[edx+4], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_50]
		and	byte ptr [eax+0Ch], 0C0h
		mov	edx, [ebp+var_50]
		mov	dword ptr [eax+8], 0
		mov	eax, [edx]
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		mov	eax, edx
		add	eax, 10h
		mov	[esp], eax
		call	_ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_50]
		mov	[eax+14h], edx
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
_ZN15KleopatraClient3Gui20CertificateRequesterC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F102968	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE+20o
		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-58h], eax
		jz	short loc_6F1029AD
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 8
		mov	[esp+0], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	_ZN11QStringListD1Ev
		mov	edx, [ebp-50h]
		mov	[esp+0], edx
		call	sub_6F10A700

loc_6F1029AD:				; CODE XREF: sub_6F102968+Dj
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-48h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QWidgetD2Ev
		mov	edx, [ebp-58h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6F102968	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. _ZN15KleopatraClient3Gui20CertificateRequesterD2Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequesterD2Ev
_ZN15KleopatraClient3Gui20CertificateRequesterD2Ev proc	near

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BB7C
		mov	[ebp+var_18], offset sub_6F102AE1
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+14h]
		mov	dword ptr [edx], offset	off_6F112DC8
		mov	dword ptr [edx+8], offset off_6F112EB0
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6F102A9F
		add	eax, 38h
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_ZN11QHBoxLayoutD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 2
		add	eax, 24h
		mov	[esp], eax
		call	ds:_ZN11QPushButtonD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 3
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN9QLineEditD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 4
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	ecx, [ebp+var_40]
		mov	edx, [ebp+var_40]
		add	ecx, 4
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6F102AC6

loc_6F102A94:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD2Ev+FFj
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	sub_6F10A700

loc_6F102A9F:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD2Ev+47j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], 0
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QWidgetD2Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F102AC6:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD2Ev+B2j
		mov	edx, [ebp+var_40]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_38], 5
		mov	[esp+4], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE
		jmp	short loc_6F102A94
_ZN15KleopatraClient3Gui20CertificateRequesterD2Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F102AE1	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD2Ev+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-44h], edx
		jz	short loc_6F102B18
		cmp	eax, 2
		jz	short loc_6F102B2E
		cmp	eax, 3
		jz	short loc_6F102B44
		cmp	eax, 4
		nop
		jz	short loc_6F102B59
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 24h
		mov	[esp+0], eax
		call	ds:_ZN11QPushButtonD1Ev

loc_6F102B18:				; CODE XREF: sub_6F102AE1+Fj
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 10h
		mov	[esp+0], eax
		call	ds:_ZN9QLineEditD1Ev

loc_6F102B2E:				; CODE XREF: sub_6F102AE1+14j
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 8
		mov	[esp+0], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject

loc_6F102B44:				; CODE XREF: sub_6F102AE1+19j
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	_ZN11QStringListD1Ev

loc_6F102B59:				; CODE XREF: sub_6F102AE1+1Fj
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	ds:_ZN7QWidgetD2Ev
		mov	edx, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_6F102AE1	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  46. _ZThn8_N15KleopatraClient3Gui20CertificateRequesterD0Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZThn8_N15KleopatraClient3Gui20CertificateRequesterD0Ev
_ZThn8_N15KleopatraClient3Gui20CertificateRequesterD0Ev	proc near
					; DATA XREF: .rdata:6F112EB4o

arg_0		= dword	ptr  4

		add	[esp+arg_0], 0FFFFFFF8h
		jmp	short _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev
_ZThn8_N15KleopatraClient3Gui20CertificateRequesterD0Ev	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev
_ZN15KleopatraClient3Gui20CertificateRequesterD0Ev proc	near
					; CODE XREF: _ZThn8_N15KleopatraClient3Gui20CertificateRequesterD0Ev+5j
					; DATA XREF: .rdata:6F112DD8o

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset word_6F10BB8A
		mov	[ebp+var_18], offset sub_6F102C9C
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+14h]
		mov	dword ptr [edx], offset	off_6F112DC8
		mov	dword ptr [edx+8], offset off_6F112EB0
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6F102C4F
		add	eax, 38h
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_ZN11QHBoxLayoutD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 2
		add	eax, 24h
		mov	[esp], eax
		call	ds:_ZN11QPushButtonD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 3
		add	eax, 10h
		mov	[esp], eax
		call	ds:_ZN9QLineEditD1Ev
		mov	eax, [ebp+var_40]
		mov	[ebp+var_38], 4
		add	eax, 8
		mov	[esp], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject
		mov	ecx, [ebp+var_40]
		mov	edx, [ebp+var_40]
		add	ecx, 4
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_6F102C81

loc_6F102C44:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev+10Aj
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		call	sub_6F10A700

loc_6F102C4F:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev+47j
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], 0
		mov	[esp], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		call	ds:_ZN7QWidgetD2Ev
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_6F10A700
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F102C81:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev+B2j
		mov	edx, [ebp+var_40]
		mov	eax, [edx+4]
		mov	[esp], ecx
		mov	[ebp+var_38], 5
		mov	[esp+4], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE
		jmp	short loc_6F102C44
_ZN15KleopatraClient3Gui20CertificateRequesterD0Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F102C9C	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	edx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-44h], edx
		jz	short loc_6F102CD2
		cmp	eax, 2
		jz	short loc_6F102CE8
		cmp	eax, 3
		jz	short loc_6F102CFE
		cmp	eax, 4
		jz	short loc_6F102D13
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 24h
		mov	[esp+0], eax
		call	ds:_ZN11QPushButtonD1Ev

loc_6F102CD2:				; CODE XREF: sub_6F102C9C+Fj
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 10h
		mov	[esp+0], eax
		call	ds:_ZN9QLineEditD1Ev

loc_6F102CE8:				; CODE XREF: sub_6F102C9C+14j
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 8
		mov	[esp+0], eax
		call	ds:_ZN11QMetaObject11removeGuardEPP7QObject

loc_6F102CFE:				; CODE XREF: sub_6F102C9C+19j
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	_ZN11QStringListD1Ev

loc_6F102D13:				; CODE XREF: sub_6F102C9C+1Ej
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], edx
		call	ds:_ZN7QWidgetD2Ev
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_6F102C9C	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget5eventEP6QEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget7devTypeEv]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget10setVisibleEb]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget8sizeHintEv]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget15minimumSizeHintEv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget14heightForWidthEi]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget5getDCEv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget9releaseDCEP5HDC__]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget11paintEngineEv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget15mousePressEventEP11QMouseEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget17mouseReleaseEventEP11QMouseEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget21mouseDoubleClickEventEP11QMouseEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget14mouseMoveEventEP11QMouseEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget10wheelEventEP11QWheelEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget13keyPressEventEP9QKeyEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget15keyReleaseEventEP9QKeyEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget12focusInEventEP11QFocusEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget13focusOutEventEP11QFocusEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget10enterEventEP6QEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget10leaveEventEP6QEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget10paintEventEP11QPaintEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget9moveEventEP10QMoveEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget11resizeEventEP12QResizeEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget10closeEventEP11QCloseEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget16contextMenuEventEP17QContextMenuEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget11tabletEventEP12QTabletEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget11actionEventEP12QActionEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget14dragEnterEventEP15QDragEnterEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget13dragMoveEventEP14QDragMoveEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget14dragLeaveEventEP15QDragLeaveEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget9dropEventEP10QDropEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget9showEventEP10QShowEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget9hideEventEP10QHideEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget8winEventEP6tagMSGPl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget11changeEventEP6QEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget6metricEN12QPaintDevice17PaintDeviceMetricE]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget16inputMethodEventEP17QInputMethodEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZNK7QWidget16inputMethodQueryEN2Qt16InputMethodQueryE]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget18focusNextPrevChildEb]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget11styleChangeER6QStyle]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget13enabledChangeEb]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget13paletteChangeERK8QPalette]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget10fontChangeERK5QFont]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget22windowActivationChangeEb]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QWidget14languageChangeEv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZThn8_NK7QWidget7devTypeEv]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZThn8_NK7QWidget11paintEngineEv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZThn8_NK7QWidget5getDCEv]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZThn8_NK7QWidget9releaseDCEP5HDC__]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZThn8_NK7QWidget6metricEN12QPaintDevice17PaintDeviceMetricE]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject11eventFilterEPS_P6QEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject10timerEventEP11QTimerEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject10childEventEP11QChildEvent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject11customEventEP6QEvent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject13connectNotifyEPKc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ZN7QObject16disconnectNotifyEPKc]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F102F00	proc near		; CODE XREF: sub_6F1030A0+3Ap
					; sub_6F103550+1AAp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	edx, 3Ch	; switch 61 cases
		mov	[esp+0Ch+var_4], edi
		mov	edi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], esi
		jbe	short loc_6F102F30

loc_6F102F17:				; CODE XREF: sub_6F102F00:loc_6F102F30j
					; sub_6F102F00+39j ...
		xor	ebx, ebx	; jumptable 6F102F30 default case

loc_6F102F19:				; CODE XREF: sub_6F102F00+54j
					; sub_6F102F00+5Ej
		mov	eax, ebx
		mov	esi, [esp+0Ch+var_8]
		mov	ebx, [esp+0Ch+var_C]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F102F30:				; CODE XREF: sub_6F102F00+15j
		jmp	ds:off_6F111500[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F102F37:				; CODE XREF: sub_6F102F00:loc_6F102F30j
					; DATA XREF: .rdata:off_6F111500o
		test	edi, edi	; jumptable 6F102F30 case 38
		jz	short loc_6F102F17 ; jumptable 6F102F30	default	case

loc_6F102F3B:				; CODE XREF: sub_6F102F00:loc_6F102F30j
					; DATA XREF: .rdata:off_6F111500o
		mov	esi, [eax+14h]	; jumptable 6F102F30 cases 23-28,37,41,42
		cmp	esi, [eax+18h]
		jge	short loc_6F102F17 ; jumptable 6F102F30	default	case

loc_6F102F43:				; CODE XREF: sub_6F102F00+72j
		lea	ebx, [esi+esi*2]
		add	esi, 1
		shl	ebx, 2
		add	ebx, [eax+10h]
		mov	[eax+14h], esi
		test	ebx, ebx
		jz	short loc_6F102F19
		mov	[ebx], edx
		mov	[ebx+4], ecx
		mov	[ebx+8], edi
		jmp	short loc_6F102F19
; ---------------------------------------------------------------------------

loc_6F102F60:				; CODE XREF: sub_6F102F00:loc_6F102F30j
					; DATA XREF: .rdata:off_6F111500o
		test	edi, edi	; jumptable 6F102F30 cases 1-4,11,29,39,46-53,55
		jz	short loc_6F102F17 ; jumptable 6F102F30	default	case

loc_6F102F64:				; CODE XREF: sub_6F102F00:loc_6F102F30j
					; DATA XREF: .rdata:off_6F111500o
		test	ecx, ecx	; jumptable 6F102F30 cases 9,10,12-21,30-34,36,45,54,57-60
		jz	short loc_6F102F17 ; jumptable 6F102F30	default	case
		mov	esi, [eax+14h]
		cmp	esi, [eax+18h]
		xchg	ax, ax
		jge	short loc_6F102F17 ; jumptable 6F102F30	default	case
		jmp	short loc_6F102F43
sub_6F102F00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F102F80	proc near		; CODE XREF: sub_6F103480+6Fp
					; sub_6F103480+B9p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 8
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	esi, [eax+14h]
		cmp	esi, [eax+18h]
		jge	short loc_6F102FA5
		lea	ebx, [esi+esi*2]
		add	esi, 1
		shl	ebx, 2
		add	ebx, [eax+10h]
		mov	[eax+14h], esi
		test	ebx, ebx
		jnz	short loc_6F102FB4

loc_6F102FA5:				; CODE XREF: sub_6F102F80+10j
					; sub_6F102F80+36j ...
		xor	ebx, ebx
		mov	esi, [esp+8+var_4]
		mov	eax, ebx
		mov	ebx, [esp+8+var_8]
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6F102FB4:				; CODE XREF: sub_6F102F80+23j
		test	edx, edx
		jz	short loc_6F102FA5
		test	ecx, ecx
		jz	short loc_6F102FA5
		mov	dword ptr [ebx], 0
		mov	eax, ebx
		mov	[ebx+4], edx
		mov	[ebx+8], ecx
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		add	esp, 8
		retn
sub_6F102F80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F102FE0	proc near		; CODE XREF: sub_6F103040+2Ap
					; sub_6F103040+3Fp ...
		push	edi
		xor	edi, edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	eax, [eax+0Ch]
		movzx	ecx, byte ptr [eax]
		cmp	cl, 6Eh
		jz	short loc_6F103025

loc_6F102FF2:				; CODE XREF: sub_6F102FE0+53j
		lea	eax, [ecx-30h]
		cmp	al, 9
		ja	short loc_6F103035
		mov	edx, [esi+0Ch]
		xor	eax, eax
		xchg	ax, ax

loc_6F103000:				; CODE XREF: sub_6F102FE0+39j
		add	edx, 1
		movsx	ecx, cl
		lea	eax, [eax+eax*4]
		lea	eax, [ecx+eax*2-30h]
		mov	[esi+0Ch], edx
		movzx	ecx, byte ptr [edx]
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		jbe	short loc_6F103000

loc_6F10301B:				; CODE XREF: sub_6F102FE0+57j
		test	edi, edi
		jz	short loc_6F103021
		neg	eax

loc_6F103021:				; CODE XREF: sub_6F102FE0+3Dj
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6F103025:				; CODE XREF: sub_6F102FE0+10j
		lea	edx, [eax+1]
		mov	di, 1
		mov	[esi+0Ch], edx
		movzx	ecx, byte ptr [eax+1]
		jmp	short loc_6F102FF2
; ---------------------------------------------------------------------------

loc_6F103035:				; CODE XREF: sub_6F102FE0+17j
		xor	eax, eax
		jmp	short loc_6F10301B
sub_6F102FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F103040	proc near		; CODE XREF: sub_6F104930+1D7p
					; sub_6F104930+212p ...
		test	edx, edx
		push	ebx
		mov	ebx, eax
		jnz	short loc_6F10305A
		mov	eax, [eax+0Ch]
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jz	short loc_6F103064
		add	eax, 1
		movsx	edx, dl
		mov	[ebx+0Ch], eax

loc_6F10305A:				; CODE XREF: sub_6F103040+5j
		cmp	edx, 68h
		jz	short loc_6F10307D
		cmp	edx, 76h
		jz	short loc_6F103068

loc_6F103064:				; CODE XREF: sub_6F103040+Fj
					; sub_6F103040+35j ...
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F103068:				; CODE XREF: sub_6F103040+22j
		mov	eax, ebx
		call	sub_6F102FE0
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	short loc_6F103064
		add	eax, 1
		mov	[ebx+0Ch], eax

loc_6F10307D:				; CODE XREF: sub_6F103040+1Dj
		mov	eax, ebx
		call	sub_6F102FE0
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	short loc_6F103064
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, 1
		pop	ebx
		retn
sub_6F103040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1030A0	proc near		; CODE XREF: sub_6F103890+5Ap
					; sub_6F103890+31Fp ...

var_10		= dword	ptr -10h

		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4
		mov	eax, [eax+0Ch]
		movzx	eax, byte ptr [eax]
		jmp	short loc_6F1030EE
; ---------------------------------------------------------------------------

loc_6F1030B4:				; CODE XREF: sub_6F1030A0+58j
		test	dl, dl
		jnz	short loc_6F1030FA
		cmp	al, 4Bh
		jnz	short loc_6F103115
		add	dword ptr [ebx+0Ch], 1

loc_6F1030C0:				; CODE XREF: sub_6F1030A0+80j
		cmp	edi, 1
		sbb	edx, edx
		add	dword ptr [ebx+30h], 6
		and	edx, 0FFFFFFFDh
		add	edx, 1Ch

loc_6F1030CF:				; CODE XREF: sub_6F1030A0+71j
					; sub_6F1030A0+91j
		xor	ecx, ecx
		mov	eax, ebx
		mov	[esp+10h+var_10], 0
		call	sub_6F102F00
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6F103113
		lea	esi, [eax+4]
		mov	eax, [ebx+0Ch]
		movzx	eax, byte ptr [eax]

loc_6F1030EE:				; CODE XREF: sub_6F1030A0+12j
		cmp	al, 72h
		setz	dl
		cmp	al, 56h
		setz	cl
		jnz	short loc_6F1030B4

loc_6F1030FA:				; CODE XREF: sub_6F1030A0+16j
		add	dword ptr [ebx+0Ch], 1
		test	dl, dl
		jz	short loc_6F10311E
		cmp	edi, 1
		sbb	edx, edx
		and	edx, 0FFFFFFFDh
		add	edx, 1Ah
		add	dword ptr [ebx+30h], 9
		jmp	short loc_6F1030CF
; ---------------------------------------------------------------------------

loc_6F103113:				; CODE XREF: sub_6F1030A0+43j
		xor	esi, esi

loc_6F103115:				; CODE XREF: sub_6F1030A0+1Aj
		add	esp, 4
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6F10311E:				; CODE XREF: sub_6F1030A0+60j
		test	cl, cl
		jz	short loc_6F1030C0
		cmp	edi, 1
		sbb	edx, edx
		and	edx, 0FFFFFFFDh
		add	edx, 1Bh
		add	dword ptr [ebx+30h], 9
		jmp	short loc_6F1030CF
sub_6F1030A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F103140	proc near		; CODE XREF: sub_6F103550+1CBj
					; sub_6F103890+219p ...
		push	ebx
		mov	ebx, eax
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	54h
		jz	short loc_6F103150

loc_6F10314B:				; CODE XREF: sub_6F103140+27j
					; sub_6F103140+2Fj ...
		xor	eax, eax

loc_6F10314D:				; CODE XREF: sub_6F103140+57j
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F103150:				; CODE XREF: sub_6F103140+9j
		lea	edx, [eax+1]
		xor	ecx, ecx
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+1], 5Fh
		jz	short loc_6F103174
		mov	eax, ebx
		call	sub_6F102FE0
		test	eax, eax
		js	short loc_6F10314B
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	5Fh
		jnz	short loc_6F10314B
		lea	ecx, [eax+1]

loc_6F103174:				; CODE XREF: sub_6F103140+1Cj
		add	edx, 1
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		add	dword ptr [ebx+28h], 1
		cmp	edx, [ebx+18h]
		jge	short loc_6F10314B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	short loc_6F10314D
		mov	dword ptr [eax], 5
		mov	[eax+4], ecx
		pop	ebx
		retn
sub_6F103140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1031B0	proc near		; CODE XREF: sub_6F103890+1DFp
					; sub_6F104620+9Dp ...
		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [eax+0Ch]
		cmp	byte ptr [ebx],	53h
		jz	short loc_6F1031C5

loc_6F1031BC:				; CODE XREF: sub_6F1031B0+50j
					; sub_6F1031B0+74j ...
		xor	edx, edx

loc_6F1031BE:				; CODE XREF: sub_6F1031B0+161j
					; sub_6F1031B0+173j
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F1031C5:				; CODE XREF: sub_6F1031B0+Aj
		lea	ecx, [ebx+1]
		mov	[eax+0Ch], ecx
		movzx	ecx, byte ptr [ebx+1]
		test	cl, cl
		jnz	short loc_6F103226

loc_6F1031D3:				; CODE XREF: sub_6F1031B0+19Aj
		mov	ebx, [eax+8]
		shr	ebx, 3
		and	ebx, 1
		test	edx, edx
		jz	short loc_6F1031F5
		test	ebx, ebx
		jnz	short loc_6F1031F5
		mov	edx, [eax+0Ch]
		xor	ebx, ebx
		movzx	edx, byte ptr [edx]
		sub	edx, 43h
		cmp	dl, 1
		setbe	bl

loc_6F1031F5:				; CODE XREF: sub_6F1031B0+2Ej
					; sub_6F1031B0+32j
		mov	edx, offset dword_6F112404
		cmp	edx, offset aT	; "t"
		jbe	short loc_6F1031BC
		cmp	cl, 74h
		mov	edx, offset aT	; "t"
		jnz	short loc_6F103219
		jmp	loc_6F1032B1
; ---------------------------------------------------------------------------

loc_6F103211:				; CODE XREF: sub_6F1031B0+72j
		cmp	cl, [edx]
		jz	loc_6F1032B1

loc_6F103219:				; CODE XREF: sub_6F1031B0+5Aj
		add	edx, 1Ch
		cmp	edx, offset dword_6F112404
		jnz	short loc_6F103211
		jmp	short loc_6F1031BC
; ---------------------------------------------------------------------------

loc_6F103226:				; CODE XREF: sub_6F1031B0+21j
		add	ebx, 2
		mov	[eax+0Ch], ebx
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		ja	loc_6F103335
		cmp	cl, 5Fh
		jz	short loc_6F1032AD

loc_6F10323D:				; CODE XREF: sub_6F1031B0+194j
		lea	ebx, [ecx-30h]
		xor	edx, edx
		cmp	bl, 9
		ja	short loc_6F103278

loc_6F103247:				; CODE XREF: sub_6F1031B0+C6j
		lea	ebx, [edx+edx*8]
		movsx	ecx, cl
		lea	ebx, [ecx+ebx*4-30h]

loc_6F103251:				; CODE XREF: sub_6F1031B0+DEj
		cmp	edx, ebx
		ja	loc_6F1031BC
		mov	edx, [eax+0Ch]
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_6F10326E
		add	edx, 1
		cmp	cl, 5Fh
		mov	[eax+0Ch], edx
		jz	short loc_6F103290

loc_6F10326E:				; CODE XREF: sub_6F1031B0+B1j
		mov	edx, ebx
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		jbe	short loc_6F103247

loc_6F103278:				; CODE XREF: sub_6F1031B0+95j
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		ja	loc_6F1031BC
		lea	ebx, [edx+edx*8]
		movsx	ecx, cl
		lea	ebx, [ecx+ebx*4-37h]
		jmp	short loc_6F103251
; ---------------------------------------------------------------------------

loc_6F103290:				; CODE XREF: sub_6F1031B0+BCj
		add	ebx, 1

loc_6F103293:				; CODE XREF: sub_6F1031B0+FFj
		cmp	ebx, [eax+20h]
		jnb	loc_6F1031BC
		add	dword ptr [eax+28h], 1
		mov	eax, [eax+1Ch]
		mov	edx, [eax+ebx*4]
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, edx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F1032AD:				; CODE XREF: sub_6F1031B0+8Bj
					; sub_6F1031B0+188j
		xor	ebx, ebx
		jmp	short loc_6F103293
; ---------------------------------------------------------------------------

loc_6F1032B1:				; CODE XREF: sub_6F1031B0+5Cj
					; sub_6F1031B0+63j
		mov	edi, [edx+14h]
		test	edi, edi
		jz	short loc_6F103330
		mov	ecx, [eax+14h]
		xor	esi, esi
		cmp	ecx, [eax+18h]
		mov	ebp, [edx+18h]
		jge	short loc_6F1032E7
		lea	esi, [ecx+ecx*2]
		add	ecx, 1
		shl	esi, 2
		add	esi, [eax+10h]
		mov	[eax+14h], ecx
		test	esi, esi
		jz	short loc_6F1032E7
		mov	[esi+4], edi
		mov	[esi+8], ebp
		mov	ecx, [eax+14h]
		mov	dword ptr [esi], 16h

loc_6F1032E7:				; CODE XREF: sub_6F1031B0+113j
					; sub_6F1031B0+126j
		mov	[eax+2Ch], esi

loc_6F1032EA:				; CODE XREF: sub_6F1031B0+183j
		test	ebx, ebx
		jz	short loc_6F103328
		mov	esi, [edx+0Ch]
		mov	ebx, [edx+10h]

loc_6F1032F4:				; CODE XREF: sub_6F1031B0+17Ej
		add	[eax+30h], ebx
		cmp	ecx, [eax+18h]
		jge	loc_6F1031BC
		lea	edx, [ecx+ecx*2]
		add	ecx, 1
		shl	edx, 2
		add	edx, [eax+10h]
		mov	[eax+14h], ecx
		test	edx, edx
		jz	loc_6F1031BE
		mov	dword ptr [edx], 16h
		mov	[edx+4], esi
		mov	[edx+8], ebx
		jmp	loc_6F1031BE
; ---------------------------------------------------------------------------

loc_6F103328:				; CODE XREF: sub_6F1031B0+13Cj
		mov	esi, [edx+4]
		mov	ebx, [edx+8]
		jmp	short loc_6F1032F4
; ---------------------------------------------------------------------------

loc_6F103330:				; CODE XREF: sub_6F1031B0+106j
		mov	ecx, [eax+14h]
		jmp	short loc_6F1032EA
; ---------------------------------------------------------------------------

loc_6F103335:				; CODE XREF: sub_6F1031B0+82j
		cmp	cl, 5Fh
		jz	loc_6F1032AD
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		jbe	loc_6F10323D
		jmp	loc_6F1031D3
sub_6F1031B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F103350	proc near		; CODE XREF: sub_6F105480+120p
					; sub_6F1058E0+CBp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, edx
		sub	esp, 28h
		mov	ecx, [eax+104h]
		cmp	ecx, 0FFh
		lea	edx, [ecx+1]
		jz	short loc_6F103380

loc_6F103367:				; CODE XREF: sub_6F103350+75j
		mov	[eax+ecx+4], bl
		mov	[eax+104h], edx
		mov	[eax+108h], bl
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F103380:				; CODE XREF: sub_6F103350+15j
		mov	edx, [eax+110h]
		mov	byte ptr [eax+103h], 0
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], edx
		lea	edx, [eax+4]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+10Ch]
		mov	eax, [esp+2Ch+var_10]
		mov	edx, 1
		xor	ecx, ecx
		mov	dword ptr [eax+104h], 0
		add	dword ptr [eax+124h], 1
		jmp	short loc_6F103367
sub_6F103350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1033D0	proc near		; CODE XREF: sub_6F1033D0+17p
					; sub_6F1058E0+FDp
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 4
		test	edx, edx
		jz	short loc_6F1033F7 ; jumptable 6F103402	cases 0,6,22,35,43,56,60

loc_6F1033DD:				; CODE XREF: sub_6F1033D0+25j
		cmp	dword ptr [ebx], 3Ch ; switch 61 cases
		jbe	short loc_6F103400

loc_6F1033E2:				; CODE XREF: sub_6F1033D0+32j
					; DATA XREF: .rdata:off_6F1115F4o
		mov	edx, [ebx+4]	; jumptable 6F103402 default case
		mov	eax, esi
		call	sub_6F1033D0
		test	eax, eax
		jnz	short loc_6F1033F9

loc_6F1033F0:				; CODE XREF: sub_6F1033D0+32j
					; DATA XREF: .rdata:off_6F1115F4o
		mov	ebx, [ebx+8]	; jumptable 6F103402 cases 7,8,44
		test	ebx, ebx
		jnz	short loc_6F1033DD

loc_6F1033F7:				; CODE XREF: sub_6F1033D0+Bj
					; sub_6F1033D0+32j ...
		xor	eax, eax	; jumptable 6F103402 cases 0,6,22,35,43,56,60

loc_6F1033F9:				; CODE XREF: sub_6F1033D0+1Ej
					; sub_6F1033D0+87j ...
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F103400:				; CODE XREF: sub_6F1033D0+10j
		mov	eax, [ebx]
		jmp	ds:off_6F1115F4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6F103410:				; CODE XREF: sub_6F1033D0+32j
					; DATA XREF: .rdata:off_6F1115F4o
		mov	eax, [esi+114h]	; jumptable 6F103402 case 5
		test	eax, eax
		jz	short loc_6F103462
		mov	eax, [eax+4]
		mov	edx, [ebx+4]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6F10343E
		jmp	short loc_6F1033F7 ; jumptable 6F103402	cases 0,6,22,35,43,56,60
; ---------------------------------------------------------------------------
		align 10h

loc_6F103430:				; CODE XREF: sub_6F1033D0+71j
		test	edx, edx
		jle	short loc_6F103445
		mov	eax, [eax+8]
		sub	edx, 1
		test	eax, eax
		jz	short loc_6F1033F7 ; jumptable 6F103402	cases 0,6,22,35,43,56,60

loc_6F10343E:				; CODE XREF: sub_6F1033D0+55j
		cmp	dword ptr [eax], 2Ah
		jz	short loc_6F103430
		jmp	short loc_6F1033F7 ; jumptable 6F103402	cases 0,6,22,35,43,56,60
; ---------------------------------------------------------------------------

loc_6F103445:				; CODE XREF: sub_6F1033D0+62j
		test	eax, eax
		jz	short loc_6F1033F7 ; jumptable 6F103402	cases 0,6,22,35,43,56,60
		test	edx, edx
		nop
		lea	esi, [esi+0]
		jnz	short loc_6F1033F7 ; jumptable 6F103402	cases 0,6,22,35,43,56,60
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6F1033F9
		cmp	dword ptr [eax], 2Ah
		jnz	short loc_6F1033F7 ; jumptable 6F103402	cases 0,6,22,35,43,56,60
		xchg	ax, ax
		jmp	short loc_6F1033F9
; ---------------------------------------------------------------------------

loc_6F103462:				; CODE XREF: sub_6F1033D0+48j
		mov	dword ptr [esi+11Ch], 1
		lea	esi, [esi+0]
		jmp	short loc_6F1033F9
sub_6F1033D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F103480	proc near		; CODE XREF: sub_6F103890+278p
					; sub_6F103890+2E0p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 10h
		mov	[esp+10h+var_10], ebx
		mov	ebx, eax
		mov	[esp+10h+var_C], esi
		mov	[esp+10h+var_8], edi
		mov	[esp+10h+var_4], ebp
		call	sub_6F102FE0
		xor	ecx, ecx
		test	eax, eax
		jle	short loc_6F1034F9
		mov	ebp, [ebx+0Ch]
		mov	esi, [ebx+4]
		sub	esi, ebp
		cmp	eax, esi
		jg	short loc_6F1034F6
		test	byte ptr [ebx+8], 4
		lea	ecx, [ebp+eax+0]
		mov	[ebx+0Ch], ecx
		jz	short loc_6F1034BD
		cmp	byte ptr [ecx],	24h
		jz	short loc_6F103510

loc_6F1034BD:				; CODE XREF: sub_6F103480+36j
					; sub_6F103480+96j
		cmp	eax, 9
		jle	short loc_6F1034E9
		mov	edi, offset a_global_ ;	"_GLOBAL_"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_6F1034E9
		movzx	ecx, byte ptr [ebp+8]
		lea	esi, [ebp+8]
		cmp	cl, 5Fh
		jz	short loc_6F1034E3
		cmp	cl, 2Eh
		jnz	short loc_6F103518

loc_6F1034E3:				; CODE XREF: sub_6F103480+5Cj
					; sub_6F103480+A0j
		cmp	byte ptr [esi+1], 4Eh
		jz	short loc_6F103522

loc_6F1034E9:				; CODE XREF: sub_6F103480+40j
					; sub_6F103480+50j ...
		mov	ecx, eax
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6F102F80
		mov	ecx, eax

loc_6F1034F6:				; CODE XREF: sub_6F103480+29j
					; sub_6F103480+C0j
		mov	[ebx+2Ch], ecx

loc_6F1034F9:				; CODE XREF: sub_6F103480+1Dj
		mov	eax, ecx
		mov	ebx, [esp+10h+var_10]
		mov	esi, [esp+10h+var_C]
		mov	edi, [esp+10h+var_8]
		mov	ebp, [esp+10h+var_4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F103510:				; CODE XREF: sub_6F103480+3Bj
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		jmp	short loc_6F1034BD
; ---------------------------------------------------------------------------

loc_6F103518:				; CODE XREF: sub_6F103480+61j
		cmp	cl, 24h
		jnz	short loc_6F1034E9
		lea	esi, [esi+0]
		jmp	short loc_6F1034E3
; ---------------------------------------------------------------------------

loc_6F103522:				; CODE XREF: sub_6F103480+67j
		mov	edx, [ebx+30h]
		mov	ecx, 15h
		add	edx, 16h
		sub	edx, eax
		mov	eax, ebx
		mov	[ebx+30h], edx
		mov	edx, offset aAnonymousNames ; "(anonymous namespace)"
		call	sub_6F102F80
		mov	ecx, eax
		jmp	short loc_6F1034F6
sub_6F103480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F103550	proc near		; CODE XREF: sub_6F103550+148p
					; sub_6F103550+220p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		cmp	al, 4Ch
		jz	loc_6F1036A7
		cmp	al, 54h
		jz	loc_6F103706
		cmp	al, 73h
		jz	loc_6F103626
		cmp	al, 66h
		jz	short loc_6F1035C1

loc_6F103587:				; CODE XREF: sub_6F103550+75j
		sub	eax, 30h
		cmp	al, 9
		ja	loc_6F10363A
		mov	eax, ebx
		call	sub_6F104230
		test	eax, eax
		mov	esi, eax
		jz	short loc_6F1035AB
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jz	loc_6F103791

loc_6F1035AB:				; CODE XREF: sub_6F103550+4Dj
					; sub_6F103550+C9j ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6F1035C1:				; CODE XREF: sub_6F103550+35j
		cmp	byte ptr [edx+1], 70h
		jnz	short loc_6F103587
		lea	ecx, [edx+2]
		mov	eax, 1
		mov	[ebx+0Ch], ecx
		cmp	byte ptr [edx+2], 5Fh
		jz	short loc_6F1035F6
		mov	eax, ebx
		call	sub_6F102FE0
		test	eax, eax
		js	loc_6F1036A0
		mov	ecx, [ebx+0Ch]
		cmp	byte ptr [ecx],	5Fh
		jnz	loc_6F1036A0
		add	eax, 2

loc_6F1035F6:				; CODE XREF: sub_6F103550+86j
		mov	edx, [ebx+14h]
		add	ecx, 1
		cmp	edx, [ebx+18h]
		mov	[ebx+0Ch], ecx
		jge	loc_6F1036A0
		lea	esi, [edx+edx*2]
		add	edx, 1
		shl	esi, 2
		add	esi, [ebx+10h]
		mov	[ebx+14h], edx
		test	esi, esi
		jz	short loc_6F1035AB
		mov	dword ptr [esi], 6
		mov	[esi+4], eax
		jmp	short loc_6F1035AB
; ---------------------------------------------------------------------------

loc_6F103626:				; CODE XREF: sub_6F103550+2Dj
		movzx	eax, byte ptr [edx+1]
		cmp	al, 72h
		jz	loc_6F103720
		cmp	al, 70h
		jz	loc_6F103768

loc_6F10363A:				; CODE XREF: sub_6F103550+3Cj
		mov	eax, ebx
		call	sub_6F1040B0
		test	eax, eax
		mov	ebp, eax
		jz	short loc_6F1036A0
		mov	eax, [eax]
		cmp	eax, 2Bh
		jz	short loc_6F1036C1
		cmp	eax, 2Ch
		jz	loc_6F103760
		cmp	eax, 2Dh
		jz	short loc_6F103689
		cmp	eax, 2Bh
		nop
		jnz	short loc_6F1036A0
		mov	eax, [ebp+4]

loc_6F103665:				; CODE XREF: sub_6F103550+191j
		mov	edx, [eax+0Ch]
		mov	eax, 2Bh

loc_6F10366D:				; CODE XREF: sub_6F103550+213j
		cmp	edx, 2
		jz	loc_6F103803
		cmp	edx, 3
		jz	loc_6F1037B0
		cmp	edx, 1
		jnz	short loc_6F1036A0
		cmp	eax, 2Dh
		jnz	short loc_6F103696

loc_6F103689:				; CODE XREF: sub_6F103550+10Aj
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		nop
		jz	loc_6F10387C

loc_6F103696:				; CODE XREF: sub_6F103550+137j
		mov	eax, ebx
		call	sub_6F103550
		jmp	short loc_6F1036EE
; ---------------------------------------------------------------------------
		align 10h

loc_6F1036A0:				; CODE XREF: sub_6F103550+91j
					; sub_6F103550+9Dj ...
		xor	esi, esi
		jmp	loc_6F1035AB
; ---------------------------------------------------------------------------

loc_6F1036A7:				; CODE XREF: sub_6F103550+1Dj
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6F1043F0
; ---------------------------------------------------------------------------

loc_6F1036C1:				; CODE XREF: sub_6F103550+FCj
		mov	edx, [ebp+4]
		mov	edi, offset aSt	; "st"
		mov	ecx, 3
		mov	eax, [ebx+30h]
		add	eax, [edx+8]
		sub	eax, 2
		mov	[ebx+30h], eax
		mov	eax, [ebp+4]
		mov	esi, [eax]
		repe cmpsb
		jnz	loc_6F103665
		mov	eax, ebx
		call	sub_6F103890

loc_6F1036EE:				; CODE XREF: sub_6F103550+14Dj
					; sub_6F103550+339j
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, ebp
		mov	edx, 2Eh
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F1035AB
; ---------------------------------------------------------------------------

loc_6F103706:				; CODE XREF: sub_6F103550+25j
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6F103140
; ---------------------------------------------------------------------------

loc_6F103720:				; CODE XREF: sub_6F103550+DCj
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6F103890
		mov	esi, eax
		mov	eax, ebx
		call	sub_6F104230
		mov	edi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jz	loc_6F10385C
		mov	[esp+3Ch+var_3C], edi

loc_6F103747:				; CODE XREF: sub_6F103550+327j
		mov	ecx, esi
		mov	edx, 1
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F1035AB
; ---------------------------------------------------------------------------
		align 10h

loc_6F103760:				; CODE XREF: sub_6F103550+101j
		mov	edx, [ebp+4]
		jmp	loc_6F10366D
; ---------------------------------------------------------------------------

loc_6F103768:				; CODE XREF: sub_6F103550+E4j
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6F103550
		mov	edx, 3Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F1035AB
; ---------------------------------------------------------------------------

loc_6F103791:				; CODE XREF: sub_6F103550+55j
		mov	eax, ebx
		call	sub_6F104520
		mov	ecx, esi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F1035AB
; ---------------------------------------------------------------------------

loc_6F1037B0:				; CODE XREF: sub_6F103550+129j
		mov	eax, ebx
		call	sub_6F103550
		mov	esi, eax
		mov	eax, ebx
		call	sub_6F103550
		mov	edi, eax
		mov	eax, ebx
		call	sub_6F103550
		mov	ecx, edi
		mov	edx, 33h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	ecx, esi
		mov	edx, 32h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	ecx, ebp
		mov	edx, 31h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F1035AB
; ---------------------------------------------------------------------------

loc_6F103803:				; CODE XREF: sub_6F103550+120j
		mov	eax, ebx
		mov	edi, offset aCl	; "cl"
		call	sub_6F103550
		mov	ecx, 3
		mov	[esp+3Ch+var_20], eax
		mov	eax, [ebp+4]
		mov	esi, [eax]
		repe cmpsb
		jnz	short loc_6F103853
		mov	eax, ebx
		call	sub_6F104E90

loc_6F103828:				; CODE XREF: sub_6F103550+30Aj
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 30h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	ecx, ebp
		mov	edx, 2Fh
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F1035AB
; ---------------------------------------------------------------------------

loc_6F103853:				; CODE XREF: sub_6F103550+2CFj
		mov	eax, ebx
		call	sub_6F103550
		jmp	short loc_6F103828
; ---------------------------------------------------------------------------

loc_6F10385C:				; CODE XREF: sub_6F103550+1EEj
		mov	eax, ebx
		call	sub_6F104520
		mov	ecx, edi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	[esp+3Ch+var_3C], eax
		jmp	loc_6F103747
; ---------------------------------------------------------------------------

loc_6F10387C:				; CODE XREF: sub_6F103550+140j
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6F104E90
		jmp	loc_6F1036EE
sub_6F103550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F103890	proc near		; CODE XREF: sub_6F103550+199p
					; sub_6F103550+1D8p ...

var_3C		= dword	ptr -3Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	ecx, [eax+0Ch]
		movzx	eax, byte ptr [ecx]
		cmp	al, 56h
		jz	short loc_6F1038E2
		cmp	al, 72h
		jz	short loc_6F1038E2
		cmp	al, 4Bh
		jz	short loc_6F1038E2
		lea	edx, [eax-30h]
		cmp	dl, 4Ah		; switch 75 cases
		lea	esi, [esi+0]
		jbe	short loc_6F1038D8

loc_6F1038C2:				; CODE XREF: sub_6F103890+4Bj
					; sub_6F103890+63j ...
		xor	eax, eax	; jumptable 6F1038DB default case

loc_6F1038C4:				; CODE XREF: sub_6F103890+96j
					; sub_6F103890+A7j ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6F1038D8:				; CODE XREF: sub_6F103890+30j
		movzx	edx, dl
		jmp	ds:off_6F111710[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F1038E2:				; CODE XREF: sub_6F103890+1Dj
					; sub_6F103890+21j ...
		xor	ecx, ecx
		mov	eax, ebx
		lea	edx, [esp+3Ch+var_20]
		call	sub_6F1030A0
		test	eax, eax
		mov	esi, eax
		jz	short loc_6F1038C2 ; jumptable 6F1038DB	default	case
		mov	eax, ebx
		call	sub_6F103890
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6F1038C2 ; jumptable 6F1038DB	default	case
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_6F1038C2 ; jumptable 6F1038DB	default	case
		lea	esi, [esi+0]

loc_6F103910:				; CODE XREF: sub_6F103890+A5j
					; sub_6F103890+6A8j
		mov	edx, [ebx+20h]
		cmp	edx, [ebx+24h]
		jge	short loc_6F1038C2 ; jumptable 6F1038DB	default	case
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+edx*4], eax
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_6F1038C4
; ---------------------------------------------------------------------------

loc_6F103928:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		mov	eax, ebx	; jumptable 6F1038DB cases 0-9,30,42
		call	sub_6F104620
		mov	[esp+3Ch+var_20], eax

loc_6F103933:				; CODE XREF: sub_6F103890+D6j
					; sub_6F103890+12Bj ...
		test	eax, eax
		jnz	short loc_6F103910
		jmp	short loc_6F1038C4
; ---------------------------------------------------------------------------
		align 10h

loc_6F103940:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		add	ecx, 1		; jumptable 6F1038DB case 19
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6F103890
		mov	edx, 21h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_6F103933
; ---------------------------------------------------------------------------

loc_6F103968:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		lea	eax, [ecx+1]	; jumptable 6F1038DB case 20
		mov	[ebx+0Ch], eax
		movzx	eax, byte ptr [ecx+1]
		test	al, al
		jz	loc_6F1038C2	; jumptable 6F1038DB default case
		sub	eax, 46h
		add	ecx, 2
		cmp	al, 2Eh		; switch 47 cases
		mov	[ebx+0Ch], ecx
		ja	loc_6F1038C2	; jumptable 6F1038DB default case
		movzx	eax, al
		jmp	ds:off_6F11183C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F103995:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		add	ecx, 1		; jumptable 6F1038DB case 23
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6F103890
		mov	edx, 22h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6F103933
; ---------------------------------------------------------------------------

loc_6F1039C0:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		add	ecx, 1		; jumptable 6F1038DB case 31
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6F103890
		mov	edx, 20h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6F103933
; ---------------------------------------------------------------------------
		align 10h

loc_6F1039F0:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		add	ecx, 1		; jumptable 6F1038DB case 32
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6F103890
		mov	edx, 1Eh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6F103933
; ---------------------------------------------------------------------------
		align 10h

loc_6F103A20:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		add	ecx, 1		; jumptable 6F1038DB case 34
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6F103890
		mov	edx, 1Fh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6F103933
; ---------------------------------------------------------------------------
		align 10h

loc_6F103A50:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		movzx	eax, byte ptr [ecx+1] ;	jumptable 6F1038DB case	35
		lea	edx, [eax-30h]
		cmp	dl, 9
		jbe	short loc_6F103A6B
		cmp	al, 5Fh
		jz	short loc_6F103A6B
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_6F103F22

loc_6F103A6B:				; CODE XREF: sub_6F103890+1CAj
					; sub_6F103890+1CEj
		xor	edx, edx
		mov	eax, ebx
		call	sub_6F1031B0
		mov	edx, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		cmp	byte ptr [edx],	49h
		jnz	loc_6F1038C4
		mov	eax, ebx
		call	sub_6F104520
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6F103933
; ---------------------------------------------------------------------------

loc_6F103AA7:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		mov	eax, ebx	; jumptable 6F1038DB case 36
		call	sub_6F103140
		mov	edx, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		cmp	byte ptr [edx],	49h
		jnz	loc_6F103933
		test	eax, eax
		jz	loc_6F1038C4
		mov	edx, [ebx+20h]
		cmp	edx, [ebx+24h]
		jge	loc_6F1038C2	; jumptable 6F1038DB default case
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+edx*4], eax
		mov	eax, ebx
		call	sub_6F104520
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00

loc_6F103AF6:				; CODE XREF: sub_6F103890+29Bj
					; sub_6F103890+330j ...
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6F103933
; ---------------------------------------------------------------------------
		align 10h

loc_6F103B00:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		add	ecx, 1		; jumptable 6F1038DB case 37
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6F103480
		mov	esi, eax
		mov	[esp+3Ch+var_20], eax
		mov	eax, ebx
		call	sub_6F103890
		mov	edx, 1Dh
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		jmp	short loc_6F103AF6
; ---------------------------------------------------------------------------
		align 10h

loc_6F103B30:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		movsx	eax, al		; jumptable 6F1038DB cases 49-58,60-63,67,68,70-74
		lea	eax, [eax+eax*4]
		lea	edx, (off_6F111710+9Ch)[eax*4]
		test	edx, edx
		jz	loc_6F103F5D
		mov	ecx, [ebx+14h]
		cmp	ecx, [ebx+18h]
		jl	loc_6F103EF0
		mov	edx, large ds:4
		xor	eax, eax

loc_6F103B59:				; CODE XREF: sub_6F103890+680j
					; sub_6F103890+6D2j ...
		mov	edx, [edx+4]
		add	[ebx+30h], edx
		add	dword ptr [ebx+0Ch], 1
		jmp	loc_6F1038C4
; ---------------------------------------------------------------------------

loc_6F103B68:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		add	ecx, 1		; jumptable 6F1038DB case 69
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6F103480
		mov	edx, 24h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6F103933
; ---------------------------------------------------------------------------

loc_6F103B93:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		add	ecx, 1		; jumptable 6F1038DB case 29
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		lea	esi, [esp+3Ch+var_24]
		call	sub_6F103890
		mov	ecx, 1
		mov	edx, esi
		mov	edi, eax
		mov	eax, ebx
		call	sub_6F1030A0
		test	eax, eax
		mov	ebp, eax
		jnz	loc_6F103C63

loc_6F103BBE:				; CODE XREF: sub_6F103890+36Fj
					; sub_6F103890+377j ...
		xor	eax, eax
		jmp	loc_6F103AF6
; ---------------------------------------------------------------------------

loc_6F103BC5:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		lea	edx, [ecx+1]	; jumptable 6F1038DB case 17
		xor	esi, esi
		mov	[ebx+0Ch], edx
		movzx	eax, byte ptr [ecx+1]
		cmp	al, 5Fh
		jz	short loc_6F103C09
		sub	eax, 30h
		cmp	al, 9
		ja	loc_6F103F45
		mov	ecx, edx

loc_6F103BE2:				; CODE XREF: sub_6F103890+360j
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		sub	eax, 30h
		cmp	al, 9
		jbe	short loc_6F103BE2
		sub	ecx, edx
		mov	eax, ebx
		call	sub_6F102F80
		test	eax, eax
		mov	esi, eax
		jz	short loc_6F103BBE

loc_6F103C01:				; CODE XREF: sub_6F103890+6C0j
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	5Fh
		jnz	short loc_6F103BBE

loc_6F103C09:				; CODE XREF: sub_6F103890+343j
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6F103890
		mov	ecx, esi
		mov	edx, 26h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		jmp	loc_6F103AF6
; ---------------------------------------------------------------------------
		align 10h

loc_6F103C30:				; CODE XREF: sub_6F103890+4Bj
					; DATA XREF: .rdata:off_6F111710o
		lea	eax, [ecx+1]	; jumptable 6F1038DB case 22
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ecx+1], 59h
		jz	loc_6F103F77

loc_6F103C40:				; CODE XREF: sub_6F103890+6EDj
		mov	edx, 1
		mov	eax, ebx
		call	sub_6F103FC0
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	loc_6F103BBE
		add	edx, 1
		mov	[ebx+0Ch], edx
		jmp	loc_6F103AF6
; ---------------------------------------------------------------------------

loc_6F103C63:				; CODE XREF: sub_6F103890+328j
		mov	eax, ebx
		call	sub_6F103890
		test	eax, eax
		mov	[ebp+0], eax
		jz	loc_6F103BBE
		cmp	ebp, esi
		jz	short loc_6F103C82
		cmp	dword ptr [eax], 25h
		jnz	loc_6F103F82

loc_6F103C82:				; CODE XREF: sub_6F103890+3E7j
					; sub_6F103890+714j
		mov	eax, [esp+3Ch+var_24]
		mov	ecx, edi
		mov	edx, 27h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		jmp	loc_6F103AF6
; ---------------------------------------------------------------------------
		align 10h

loc_6F103CA0:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	edx, [ebx+14h]	; jumptable 6F10398E case 45
		cmp	edx, [ebx+18h]
		jge	loc_6F103F15
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6F103FA9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6F112198
		mov	dword ptr [eax+4], offset off_6F112198

loc_6F103CD5:				; CODE XREF: sub_6F103890+4A6j
					; sub_6F103890+4DDj ...
		mov	edx, [edx+4]
		add	[ebx+30h], edx
		jmp	loc_6F1038C4
; ---------------------------------------------------------------------------

loc_6F103CE0:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	eax, ebx	; jumptable 6F10398E case 42
		call	sub_6F103890
		mov	edx, 3Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		jmp	loc_6F1038C4
; ---------------------------------------------------------------------------

loc_6F103D01:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	edx, [ebx+14h]	; jumptable 6F10398E case 35
		cmp	edx, [ebx+18h]
		jge	loc_6F103F15
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6F103FA9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6F1121AC
		mov	dword ptr [eax+4], offset off_6F1121AC
		jmp	short loc_6F103CD5
; ---------------------------------------------------------------------------

loc_6F103D38:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	edx, [ebx+14h]	; jumptable 6F10398E case 31
		cmp	edx, [ebx+18h]
		jge	loc_6F103F15
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6F103FA9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6F112170
		mov	dword ptr [eax+4], offset off_6F112170
		jmp	loc_6F103CD5
; ---------------------------------------------------------------------------

loc_6F103D72:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	edx, [ebx+14h]	; jumptable 6F10398E case 30
		cmp	edx, [ebx+18h]
		jge	loc_6F103F15
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6F103FA9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6F11215C
		mov	dword ptr [eax+4], offset off_6F11215C
		jmp	loc_6F103CD5
; ---------------------------------------------------------------------------

loc_6F103DAC:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	eax, ebx	; jumptable 6F10398E cases 14,46
		call	sub_6F103550
		mov	edx, 39h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		test	eax, eax
		mov	[esp+3Ch+var_20], eax
		jz	loc_6F1038C4
		mov	ecx, [ebx+0Ch]
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jz	loc_6F1038C2	; jumptable 6F1038DB default case
		add	ecx, 1
		cmp	dl, 45h
		mov	[ebx+0Ch], ecx
		jnz	loc_6F1038C2	; jumptable 6F1038DB default case
		jmp	loc_6F1038C4
; ---------------------------------------------------------------------------

loc_6F103DF6:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	eax, [ebx+14h]	; jumptable 6F10398E case 0
		xor	esi, esi
		cmp	eax, [ebx+18h]
		jge	short loc_6F103E0F
		lea	esi, [eax+eax*2]
		add	eax, 1
		shl	esi, 2
		add	esi, [ebx+10h]
		mov	[ebx+14h], eax

loc_6F103E0F:				; CODE XREF: sub_6F103890+56Ej
		mov	eax, [ebx+0Ch]
		mov	[esp+3Ch+var_20], esi
		mov	dword ptr [esi], 28h
		movzx	eax, byte ptr [eax]
		sub	eax, 30h
		cmp	al, 9
		setbe	al
		movzx	eax, al
		test	ax, ax
		mov	[esi+8], ax
		jnz	loc_6F103F67

loc_6F103E37:				; CODE XREF: sub_6F103890+6E2j
		mov	eax, ebx
		call	sub_6F103890
		mov	[esi+4], eax
		mov	eax, [esp+3Ch+var_20]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6F1038C2	; jumptable 6F1038DB default case
		mov	eax, ebx
		call	sub_6F102FE0
		mov	ecx, [ebx+0Ch]
		xor	edx, edx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	short loc_6F103E70
		add	ecx, 1
		xor	edx, edx
		cmp	al, 73h
		mov	[ebx+0Ch], ecx
		setz	dl

loc_6F103E70:				; CODE XREF: sub_6F103890+5D1j
		mov	eax, [esp+3Ch+var_20]
		mov	[eax+0Ah], dx
		jmp	loc_6F1038C4
; ---------------------------------------------------------------------------

loc_6F103E7D:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	edx, [ebx+14h]	; jumptable 6F10398E case 34
		cmp	edx, [ebx+18h]
		jge	loc_6F103F15
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6F103FA9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6F112184
		mov	dword ptr [eax+4], offset off_6F112184
		jmp	loc_6F103CD5
; ---------------------------------------------------------------------------

loc_6F103EB7:				; CODE XREF: sub_6F103890+FEj
					; DATA XREF: .rdata:off_6F11183Co
		mov	edx, [ebx+14h]	; jumptable 6F10398E case 32
		cmp	edx, [ebx+18h]
		jge	short loc_6F103F15
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6F103FA9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6F112148
		mov	dword ptr [eax+4], offset off_6F112148
		jmp	loc_6F103CD5
; ---------------------------------------------------------------------------
		align 10h

loc_6F103EF0:				; CODE XREF: sub_6F103890+2BBj
		lea	eax, [ecx+ecx*2]
		add	ecx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], ecx
		test	eax, eax
		jz	loc_6F103FB1
		mov	dword ptr [eax], 23h
		mov	[eax+4], edx
		jmp	loc_6F103B59
; ---------------------------------------------------------------------------

loc_6F103F15:				; CODE XREF: sub_6F103890+416j
					; sub_6F103890+477j ...
		mov	edx, large ds:4
		xor	eax, eax
		jmp	loc_6F103CD5
; ---------------------------------------------------------------------------

loc_6F103F22:				; CODE XREF: sub_6F103890+1D5j
		mov	eax, ebx
		call	sub_6F104620
		test	eax, eax
		jz	loc_6F1038C4
		cmp	dword ptr [eax], 16h
		mov	[esp+3Ch+var_20], eax
		jnz	loc_6F103910
		xchg	ax, ax
		jmp	loc_6F1038C4
; ---------------------------------------------------------------------------

loc_6F103F45:				; CODE XREF: sub_6F103890+34Aj
		mov	eax, ebx
		call	sub_6F103550
		test	eax, eax
		mov	esi, eax
		jnz	loc_6F103C01
		xor	eax, eax
		jmp	loc_6F103AF6
; ---------------------------------------------------------------------------

loc_6F103F5D:				; CODE XREF: sub_6F103890+2AFj
		mov	edx, [edx+4]
		xor	eax, eax
		jmp	loc_6F103B59
; ---------------------------------------------------------------------------

loc_6F103F67:				; CODE XREF: sub_6F103890+5A1j
		mov	eax, ebx
		call	sub_6F102FE0
		mov	esi, [esp+3Ch+var_20]
		jmp	loc_6F103E37
; ---------------------------------------------------------------------------

loc_6F103F77:				; CODE XREF: sub_6F103890+3AAj
		add	ecx, 2
		mov	[ebx+0Ch], ecx
		jmp	loc_6F103C40
; ---------------------------------------------------------------------------

loc_6F103F82:				; CODE XREF: sub_6F103890+3ECj
		mov	edx, [esp+3Ch+var_24]
		test	edx, edx
		jz	loc_6F103BBE
		mov	eax, [ebx+20h]
		cmp	eax, [ebx+24h]
		jge	loc_6F103BBE
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+eax*4], edx
		jmp	loc_6F103C82
; ---------------------------------------------------------------------------

loc_6F103FA9:				; CODE XREF: sub_6F103890+42Dj
					; sub_6F103890+48Ej ...
		mov	edx, [eax+4]
		jmp	loc_6F103CD5
; ---------------------------------------------------------------------------

loc_6F103FB1:				; CODE XREF: sub_6F103890+671j
		mov	edx, [eax+4]
		jmp	loc_6F103B59
sub_6F103890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F103FC0	proc near		; CODE XREF: sub_6F103890+3B7p
					; sub_6F104930+71p

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	edx, [eax+0Ch]
		cmp	byte ptr [edx],	4Ah
		jz	loc_6F104070

loc_6F103FD7:				; CODE XREF: sub_6F103FC0+BBj
		mov	[esp+3Ch+var_20], 0
		lea	ebp, [esp+3Ch+var_20]
		xor	edi, edi
		jmp	short loc_6F103FEE
; ---------------------------------------------------------------------------

loc_6F103FE7:				; CODE XREF: sub_6F103FC0+46j
		mov	edx, [ebx+0Ch]
		xor	esi, esi
		mov	edi, eax

loc_6F103FEE:				; CODE XREF: sub_6F103FC0+25j
		movzx	eax, byte ptr [edx]
		cmp	al, 45h
		jz	short loc_6F104031

loc_6F103FF5:				; CODE XREF: sub_6F103FC0+6Fj
		test	al, al
		jz	short loc_6F104031
		mov	eax, ebx
		call	sub_6F103890
		test	eax, eax
		jz	short loc_6F104060
		test	esi, esi
		jnz	short loc_6F103FE7
		mov	ecx, eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6F102F00
		test	eax, eax
		mov	[ebp+0], eax
		jz	short loc_6F104060
		mov	edx, [ebx+0Ch]
		lea	ebp, [eax+8]
		movzx	eax, byte ptr [edx]
		cmp	al, 45h
		jnz	short loc_6F103FF5

loc_6F104031:				; CODE XREF: sub_6F103FC0+33j
					; sub_6F103FC0+37j
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_6F104060
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_6F104080

loc_6F104040:				; CODE XREF: sub_6F103FC0+C6j
					; sub_6F103FC0+CFj ...
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, edi
		mov	eax, ebx
		mov	edx, 25h
		call	sub_6F102F00
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F104060:				; CODE XREF: sub_6F103FC0+42j
					; sub_6F103FC0+62j ...
		add	esp, 2Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F104070:				; CODE XREF: sub_6F103FC0+11j
		add	edx, 1
		mov	esi, 1
		mov	[eax+0Ch], edx
		jmp	loc_6F103FD7
; ---------------------------------------------------------------------------

loc_6F104080:				; CODE XREF: sub_6F103FC0+7Ej
		mov	edx, [eax+4]
		cmp	dword ptr [edx], 23h
		jnz	short loc_6F104040
		mov	edx, [edx+4]
		cmp	dword ptr [edx+10h], 9
		jnz	short loc_6F104040
		mov	eax, [edx+4]
		sub	[ebx+30h], eax
		xor	eax, eax
		mov	[esp+3Ch+var_20], 0
		jmp	short loc_6F104040
sub_6F103FC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1040B0	proc near		; CODE XREF: sub_6F103550+ECp
					; sub_6F104230+55p

var_4C		= dword	ptr -4Ch
var_2D		= byte ptr -2Dh
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_20], eax
		mov	eax, [eax+0Ch]
		movzx	ebp, byte ptr [eax]
		mov	ecx, ebp
		test	cl, cl
		jz	short loc_6F1040F6
		mov	ebx, [esp+4Ch+var_20]
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	ebx, byte ptr [eax+1]
		test	bl, bl
		jz	short loc_6F1040E5
		mov	esi, [esp+4Ch+var_20]
		add	eax, 2
		mov	[esi+0Ch], eax

loc_6F1040E5:				; CODE XREF: sub_6F1040B0+29j
		mov	eax, ebp
		cmp	al, 76h
		jnz	short loc_6F104165
		lea	eax, [ebx-30h]
		cmp	al, 9
		jbe	loc_6F1041A0

loc_6F1040F6:				; CODE XREF: sub_6F1040B0+17j
					; sub_6F1040B0+B8j ...
		mov	esi, 34h
		xor	eax, eax
		mov	edi, ebx
		nop

loc_6F104100:				; CODE XREF: sub_6F1040B0+9Cj
		mov	edx, esi
		sub	edx, eax
		mov	ecx, edx
		shr	ecx, 1Fh
		lea	edx, [ecx+edx]
		sar	edx, 1
		add	edx, eax
		mov	ecx, edx
		shl	ecx, 4
		lea	ebx, off_6F112540[ecx]
		mov	ecx, ds:off_6F112540[ecx]
		mov	[esp+4Ch+var_24], ebx
		movzx	ebx, byte ptr [ecx]
		mov	[esp+4Ch+var_2D], bl
		mov	ebx, ebp
		cmp	bl, [esp+4Ch+var_2D]
		jnz	short loc_6F104158
		movzx	ecx, byte ptr [ecx+1]
		mov	ebx, edi
		cmp	bl, cl
		jz	loc_6F1041F0
		mov	ebx, edi
		cmp	cl, bl
		jle	short loc_6F104160

loc_6F104148:				; CODE XREF: sub_6F1040B0+AEj
		mov	esi, edx

loc_6F10414A:				; CODE XREF: sub_6F1040B0+B3j
		cmp	eax, esi
		jnz	short loc_6F104100

loc_6F10414E:				; CODE XREF: sub_6F1040B0+105j
					; sub_6F1040B0+11Cj ...
		xor	eax, eax

loc_6F104150:				; CODE XREF: sub_6F1040B0+118j
					; sub_6F1040B0+134j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F104158:				; CODE XREF: sub_6F1040B0+82j
		mov	ecx, ebp
		cmp	[esp+4Ch+var_2D], cl
		jg	short loc_6F104148

loc_6F104160:				; CODE XREF: sub_6F1040B0+96j
		lea	eax, [edx+1]
		jmp	short loc_6F10414A
; ---------------------------------------------------------------------------

loc_6F104165:				; CODE XREF: sub_6F1040B0+39j
		cmp	bl, 76h
		jnz	short loc_6F1040F6
		mov	eax, ebp
		cmp	al, 63h
		xchg	ax, ax
		jnz	short loc_6F1040F6
		mov	eax, [esp+4Ch+var_20]
		call	sub_6F103890
		mov	edx, 2Dh
		mov	[esp+4Ch+var_4C], 0
		mov	ecx, eax
		mov	eax, [esp+4Ch+var_20]
		call	sub_6F102F00
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F1041A0:				; CODE XREF: sub_6F1040B0+40j
		mov	eax, [esp+4Ch+var_20]
		call	sub_6F103480
		mov	esi, [esp+4Ch+var_20]
		mov	edx, [esi+14h]
		cmp	edx, [esi+18h]
		mov	ecx, eax
		jge	short loc_6F10414E
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [esi+10h]
		mov	[esi+14h], edx
		test	eax, eax
		jz	short loc_6F104150
		test	ecx, ecx
		jz	loc_6F10414E
		movsx	edx, bl
		sub	edx, 30h
		mov	dword ptr [eax], 2Ch
		mov	[eax+4], edx
		mov	[eax+8], ecx
		jmp	loc_6F104150
; ---------------------------------------------------------------------------
		align 10h

loc_6F1041F0:				; CODE XREF: sub_6F1040B0+8Cj
		mov	esi, [esp+4Ch+var_20]
		mov	edx, [esi+14h]
		cmp	edx, [esi+18h]
		jge	loc_6F10414E
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [esi+10h]
		mov	[esi+14h], edx
		test	eax, eax
		jz	loc_6F104150
		mov	edx, [esp+4Ch+var_24]
		mov	dword ptr [eax], 2Bh
		mov	[eax+4], edx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6F1040B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F104230	proc near		; CODE XREF: sub_6F103550+44p
					; sub_6F103550+1E1p ...
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_6F1042A4
		lea	ecx, [eax-61h]
		cmp	cl, 19h
		jbe	short loc_6F104283
		lea	ecx, [eax-43h]
		cmp	cl, 1
		ja	loc_6F104311
		mov	ecx, [ebx+2Ch]
		test	ecx, ecx
		jz	short loc_6F10426F
		mov	esi, [ecx]
		test	esi, esi
		jnz	short loc_6F1042B0

loc_6F104266:				; CODE XREF: sub_6F104230+83j
		mov	eax, [ecx+8]
		add	[ebx+30h], eax
		movzx	eax, byte ptr [edx]

loc_6F10426F:				; CODE XREF: sub_6F104230+2Ej
		cmp	al, 43h
		jz	short loc_6F1042B9

loc_6F104273:				; CODE XREF: sub_6F104230+87j
		cmp	al, 44h
		jz	loc_6F104340

loc_6F10427B:				; CODE XREF: sub_6F104230+A0j
					; sub_6F104230+B3j ...
		xor	eax, eax

loc_6F10427D:				; CODE XREF: sub_6F104230+5Cj
					; sub_6F104230+61j ...
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F104283:				; CODE XREF: sub_6F104230+1Bj
		mov	eax, ebx
		call	sub_6F1040B0
		test	eax, eax
		jz	short loc_6F10427D
		cmp	dword ptr [eax], 2Bh
		jnz	short loc_6F10427D
		mov	ecx, [eax+4]
		mov	edx, [ebx+30h]
		add	edx, [ecx+8]
		add	edx, 7
		mov	[ebx+30h], edx
		jmp	short loc_6F10427D
; ---------------------------------------------------------------------------

loc_6F1042A4:				; CODE XREF: sub_6F104230+13j
		add	esp, 4
		mov	eax, ebx
		pop	ebx
		pop	esi
		jmp	sub_6F103480
; ---------------------------------------------------------------------------

loc_6F1042B0:				; CODE XREF: sub_6F104230+34j
		cmp	esi, 16h
		jz	short loc_6F104266
		cmp	al, 43h
		jnz	short loc_6F104273

loc_6F1042B9:				; CODE XREF: sub_6F104230+41j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 32h
		nop
		jz	loc_6F1043E0
		cmp	al, 33h
		jz	loc_6F1043D2
		cmp	al, 31h
		jnz	short loc_6F10427B
		mov	esi, 1

loc_6F1042D7:				; CODE XREF: sub_6F104230+1A7j
					; sub_6F104230+1B5j
		add	edx, 2
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		cmp	edx, [ebx+18h]
		jge	short loc_6F10427B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	short loc_6F10427B
		test	ecx, ecx
		jz	loc_6F10427B
		mov	dword ptr [eax], 7
		mov	[eax+4], esi
		mov	[eax+8], ecx
		jmp	loc_6F10427D
; ---------------------------------------------------------------------------

loc_6F104311:				; CODE XREF: sub_6F104230+23j
		cmp	al, 4Ch
		jnz	loc_6F10427B
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6F103480
		test	eax, eax
		mov	esi, eax
		jz	loc_6F10427B
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jz	short loc_6F10439D
		mov	eax, esi
		jmp	loc_6F10427D
; ---------------------------------------------------------------------------
		align 10h

loc_6F104340:				; CODE XREF: sub_6F104230+45j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 31h
		jz	short loc_6F1043C7
		cmp	al, 32h
		jz	short loc_6F1043C0
		cmp	al, 30h
		xchg	ax, ax
		jnz	loc_6F10427B
		mov	esi, 1

loc_6F10435B:				; CODE XREF: sub_6F104230+195j
					; sub_6F104230+1A0j
		add	edx, 2
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		cmp	edx, [ebx+18h]
		jge	loc_6F10427B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6F10427B
		test	ecx, ecx
		jz	loc_6F10427B
		mov	dword ptr [eax], 8
		mov	[eax+4], esi
		mov	[eax+8], ecx
		jmp	loc_6F10427D
; ---------------------------------------------------------------------------

loc_6F10439D:				; CODE XREF: sub_6F104230+106j
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6F102FE0
		test	eax, eax
		js	loc_6F10427B
		mov	eax, esi
		jmp	loc_6F10427D
; ---------------------------------------------------------------------------
		align 10h

loc_6F1043C0:				; CODE XREF: sub_6F104230+11Aj
		mov	esi, 3
		jmp	short loc_6F10435B
; ---------------------------------------------------------------------------

loc_6F1043C7:				; CODE XREF: sub_6F104230+116j
		mov	esi, 2
		lea	esi, [esi+0]
		jmp	short loc_6F10435B
; ---------------------------------------------------------------------------

loc_6F1043D2:				; CODE XREF: sub_6F104230+98j
		mov	esi, 3
		jmp	loc_6F1042D7
; ---------------------------------------------------------------------------
		align 10h

loc_6F1043E0:				; CODE XREF: sub_6F104230+90j
		mov	esi, 2
		jmp	loc_6F1042D7
sub_6F104230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1043F0	proc near		; CODE XREF: sub_6F103550+16Cj
					; sub_6F104520+ADp

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+1Ch+var_8], esi
		mov	[esp+1Ch+var_4], edi
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	4Ch
		jz	short loc_6F104420

loc_6F104409:				; CODE XREF: sub_6F1043F0+5Dj
					; sub_6F1043F0+9Bj ...
		xor	eax, eax
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F104420:				; CODE XREF: sub_6F1043F0+17j
		lea	edi, [eax+1]
		mov	[ebx+0Ch], edi
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 5Fh
		setz	cl
		cmp	dl, 5Ah
		jnz	short loc_6F104465

loc_6F104435:				; CODE XREF: sub_6F1043F0+8Aj
		lea	ecx, [edi+1]
		xor	edx, edx
		mov	[ebx+0Ch], ecx
		mov	eax, ebx
		call	sub_6F104930
		mov	edi, [ebx+0Ch]
		movzx	edx, byte ptr [edi]

loc_6F10444A:				; CODE XREF: sub_6F1043F0+88j
					; sub_6F1043F0+F8j
		cmp	dl, 45h
		jnz	short loc_6F104409
		lea	ecx, [edi+1]
		mov	[ebx+0Ch], ecx
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6F104465:				; CODE XREF: sub_6F1043F0+43j
		test	cl, cl
		jz	short loc_6F104480
		lea	edi, [eax+2]
		mov	[ebx+0Ch], edi
		movzx	edx, byte ptr [eax+2]
		xor	eax, eax
		cmp	dl, 5Ah
		jnz	short loc_6F10444A
		jmp	short loc_6F104435
; ---------------------------------------------------------------------------
		align 10h

loc_6F104480:				; CODE XREF: sub_6F1043F0+77j
		mov	eax, ebx
		call	sub_6F103890
		test	eax, eax
		mov	esi, eax
		jz	loc_6F104409
		cmp	dword ptr [eax], 23h
		jz	short loc_6F1044F0

loc_6F104496:				; CODE XREF: sub_6F1043F0+108j
					; sub_6F1043F0+110j
		mov	edx, [ebx+0Ch]
		mov	edi, 34h
		movzx	eax, byte ptr [edx]
		cmp	al, 6Eh
		jz	short loc_6F104502

loc_6F1044A5:				; CODE XREF: sub_6F1043F0+11Fj
		xor	ecx, ecx
		cmp	al, 45h
		jz	short loc_6F1044CD
		test	al, al
		mov	ecx, edx
		jnz	short loc_6F1044BE
		jmp	loc_6F104409
; ---------------------------------------------------------------------------

loc_6F1044B6:				; CODE XREF: sub_6F1043F0+D9j
		test	al, al
		jz	loc_6F104409

loc_6F1044BE:				; CODE XREF: sub_6F1043F0+BFj
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		cmp	al, 45h
		jnz	short loc_6F1044B6
		sub	ecx, edx

loc_6F1044CD:				; CODE XREF: sub_6F1043F0+B9j
		mov	eax, ebx
		call	sub_6F102F80
		mov	edx, edi
		mov	ecx, esi
		mov	[esp+1Ch+var_1C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	edi, [ebx+0Ch]
		movzx	edx, byte ptr [edi]
		jmp	loc_6F10444A
; ---------------------------------------------------------------------------
		align 10h

loc_6F1044F0:				; CODE XREF: sub_6F1043F0+A4j
		mov	eax, [eax+4]
		mov	ecx, [eax+10h]
		test	ecx, ecx
		jz	short loc_6F104496
		mov	eax, [eax+4]
		sub	[ebx+30h], eax
		jmp	short loc_6F104496
; ---------------------------------------------------------------------------

loc_6F104502:				; CODE XREF: sub_6F1043F0+B3j
		add	edx, 1
		mov	di, 35h
		mov	[ebx+0Ch], edx
		movzx	eax, byte ptr [edx]
		jmp	short loc_6F1044A5
sub_6F1043F0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6F104520
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F104520	proc near		; CODE XREF: sub_6F103550+243p
					; sub_6F103550+30Ep ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 20h
		mov	edi, [eax+2Ch]
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	49h
		jz	short loc_6F104540

loc_6F104533:				; CODE XREF: sub_6F104520+77j
					; sub_6F104520+92j ...
		add	esp, 20h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F104540:				; CODE XREF: sub_6F104520+11j
		lea	ecx, [eax+1]
		mov	[ebx+0Ch], ecx
		cmp	byte ptr [eax+1], 45h
		jnz	short loc_6F104570
		add	eax, 2
		xor	ecx, ecx
		mov	[ebx+0Ch], eax
		mov	edx, 2Ah
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6F102F00
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F104570:				; CODE XREF: sub_6F104520+2Aj
		mov	[esp+2Ch+var_10], 0
		lea	esi, [esp+2Ch+var_10]
		movzx	edx, byte ptr [eax+1]
		jmp	short loc_6F1045C6
; ---------------------------------------------------------------------------

loc_6F104582:				; CODE XREF: sub_6F104520+A9j
		cmp	dl, 58h
		jz	short loc_6F1045E2
		cmp	dl, 49h
		jz	short loc_6F1045D4
		mov	eax, ebx
		xchg	ax, ax
		call	sub_6F103890

loc_6F104595:				; CODE XREF: sub_6F104520+B2j
					; sub_6F104520+C0j ...
		test	eax, eax
		jz	short loc_6F104533
		mov	ecx, eax
		mov	edx, 2Ah
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6F102F00
		test	eax, eax
		mov	[esi], eax
		jz	loc_6F104533
		mov	ecx, [ebx+0Ch]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 45h
		jz	short loc_6F104603
		lea	esi, [eax+8]

loc_6F1045C6:				; CODE XREF: sub_6F104520+60j
		cmp	dl, 4Ch
		jnz	short loc_6F104582
		mov	eax, ebx
		call	sub_6F1043F0
		jmp	short loc_6F104595
; ---------------------------------------------------------------------------

loc_6F1045D4:				; CODE XREF: sub_6F104520+6Aj
		mov	eax, ebx
		call	sub_6F104520
		nop
		lea	esi, [esi+0]
		jmp	short loc_6F104595
; ---------------------------------------------------------------------------

loc_6F1045E2:				; CODE XREF: sub_6F104520+65j
		add	ecx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6F103550
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	loc_6F104533
		add	edx, 1
		mov	[ebx+0Ch], edx
		jmp	short loc_6F104595
; ---------------------------------------------------------------------------

loc_6F104603:				; CODE XREF: sub_6F104520+A1j
		add	ecx, 1
		mov	[ebx+2Ch], edi
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+0Ch], ecx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6F104520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F104620	proc near		; CODE XREF: sub_6F103890+9Ap
					; sub_6F103890+694p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		cmp	al, 4Eh
		jz	loc_6F104730
		jle	short loc_6F104670
		cmp	al, 53h
		jz	short loc_6F1046B3
		cmp	al, 5Ah
		nop
		jnz	short loc_6F104674
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		xor	edx, edx
		call	sub_6F104930
		mov	esi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	45h
		jz	loc_6F104803

loc_6F10465F:				; CODE XREF: sub_6F104620+6Fj
					; sub_6F104620+12Aj ...
		xor	esi, esi

loc_6F104661:				; CODE XREF: sub_6F104620+63j
					; sub_6F104620+67j ...
		add	esp, 2Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F104670:				; CODE XREF: sub_6F104620+17j
		cmp	al, 4Ch
		jz	short loc_6F1046A0

loc_6F104674:				; CODE XREF: sub_6F104620+20j
		mov	eax, ebx
		call	sub_6F104230
		mov	esi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jnz	short loc_6F104661

loc_6F104685:				; CODE XREF: sub_6F104620+B3j
		test	esi, esi
		jz	short loc_6F104661
		mov	eax, [ebx+20h]
		cmp	eax, [ebx+24h]
		jge	short loc_6F10465F
		mov	edx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[edx+eax*4], esi
		jmp	short loc_6F1046D5
; ---------------------------------------------------------------------------
		align 10h

loc_6F1046A0:				; CODE XREF: sub_6F104620+52j
		mov	eax, ebx
		call	sub_6F104230
		add	esp, 2Ch
		pop	ebx
		mov	esi, eax
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F1046B3:				; CODE XREF: sub_6F104620+1Bj
		cmp	byte ptr [edx+1], 74h
		jz	short loc_6F1046F4
		xor	edx, edx
		mov	eax, ebx
		call	sub_6F1031B0
		mov	edx, 1
		mov	esi, eax

loc_6F1046C9:				; CODE XREF: sub_6F104620+10Dj
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jnz	short loc_6F104661
		test	edx, edx
		jz	short loc_6F104685

loc_6F1046D5:				; CODE XREF: sub_6F104620+7Bj
		mov	eax, ebx
		call	sub_6F104520
		mov	ecx, esi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104661
; ---------------------------------------------------------------------------

loc_6F1046F4:				; CODE XREF: sub_6F104620+97j
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6F104230
		mov	ecx, 3
		mov	edx, offset aStd ; "std"
		mov	esi, eax
		mov	eax, ebx
		call	sub_6F102F80
		mov	edx, 1
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		xor	edx, edx
		add	dword ptr [ebx+30h], 3
		mov	esi, eax
		jmp	short loc_6F1046C9
; ---------------------------------------------------------------------------
		align 10h

loc_6F104730:				; CODE XREF: sub_6F104620+11j
		add	edx, 1
		mov	ecx, 1
		mov	[ebx+0Ch], edx
		mov	eax, ebx
		lea	edx, [esp+3Ch+var_20]
		call	sub_6F1030A0
		test	eax, eax
		mov	ebp, eax
		jz	loc_6F10465F
		mov	edx, [ebx+0Ch]
		xor	edi, edi
		movzx	esi, byte ptr [edx]

loc_6F104758:				; CODE XREF: sub_6F104620+238j
					; sub_6F104620+25Fj
		mov	eax, esi
		test	al, al
		jz	loc_6F1047F0
		lea	eax, [esi-61h]
		cmp	al, 19h
		jbe	loc_6F104860
		lea	eax, [esi-30h]
		cmp	al, 9
		jbe	loc_6F104860
		mov	eax, esi
		cmp	al, 44h
		jz	loc_6F104860
		cmp	al, 43h
		jz	loc_6F104860
		cmp	al, 4Ch
		jz	loc_6F104860
		mov	eax, esi
		cmp	al, 53h
		jz	loc_6F104884
		mov	eax, esi
		cmp	al, 49h
		jz	loc_6F104895
		mov	eax, esi
		cmp	al, 54h
		jnz	loc_6F1048AF
		mov	eax, ebx
		call	sub_6F103140

loc_6F1047B7:				; CODE XREF: sub_6F104620+247j
					; sub_6F104620+270j
		test	edi, edi
		jz	short loc_6F1047CC
		mov	edx, 1

loc_6F1047C0:				; CODE XREF: sub_6F104620+28Aj
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, edi
		mov	eax, ebx
		call	sub_6F102F00

loc_6F1047CC:				; CODE XREF: sub_6F104620+199j
		mov	edx, esi
		cmp	dl, 53h
		jz	short loc_6F104850
		mov	edx, [ebx+0Ch]
		mov	esi, 45h
		cmp	byte ptr [edx],	45h
		jz	short loc_6F104856
		test	eax, eax
		jz	short loc_6F1047F0
		mov	ecx, [ebx+20h]
		cmp	ecx, [ebx+24h]
		jl	loc_6F104870

loc_6F1047F0:				; CODE XREF: sub_6F104620+13Cj
					; sub_6F104620+1C2j ...
		xor	esi, esi
		mov	dword ptr [ebp+0], 0
		mov	eax, esi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F104803:				; CODE XREF: sub_6F104620+39j
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+1], 73h
		jnz	loc_6F1048DC
		lea	edx, [eax+2]
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+2], 5Fh
		jz	loc_6F10490D

loc_6F104823:				; CODE XREF: sub_6F104620+2FCj
		mov	ecx, 0Eh
		mov	edx, offset aStringLiteral ; "string literal"
		mov	eax, ebx
		call	sub_6F102F80
		mov	[esp+3Ch+var_3C], eax

loc_6F104837:				; CODE XREF: sub_6F104620+2D0j
		mov	ecx, esi
		mov	edx, 2
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104661
; ---------------------------------------------------------------------------
		align 10h

loc_6F104850:				; CODE XREF: sub_6F104620+1B1j
		mov	edx, [ebx+0Ch]
		movzx	esi, byte ptr [edx]

loc_6F104856:				; CODE XREF: sub_6F104620+1BEj
		mov	edi, eax
		jmp	loc_6F104758
; ---------------------------------------------------------------------------
		align 10h

loc_6F104860:				; CODE XREF: sub_6F104620+147j
					; sub_6F104620+152j ...
		mov	eax, ebx
		call	sub_6F104230
		jmp	loc_6F1047B7
; ---------------------------------------------------------------------------
		align 10h

loc_6F104870:				; CODE XREF: sub_6F104620+1CAj
		mov	esi, [ebx+1Ch]
		mov	edi, eax
		add	dword ptr [ebx+20h], 1
		mov	[esi+ecx*4], eax
		movzx	esi, byte ptr [edx]
		jmp	loc_6F104758
; ---------------------------------------------------------------------------

loc_6F104884:				; CODE XREF: sub_6F104620+176j
		mov	edx, 1
		mov	eax, ebx
		call	sub_6F1031B0
		jmp	loc_6F1047B7
; ---------------------------------------------------------------------------

loc_6F104895:				; CODE XREF: sub_6F104620+180j
		test	edi, edi
		jz	loc_6F1047F0
		mov	eax, ebx
		nop
		call	sub_6F104520
		mov	edx, 4
		jmp	loc_6F1047C0
; ---------------------------------------------------------------------------

loc_6F1048AF:				; CODE XREF: sub_6F104620+18Aj
		mov	eax, esi
		cmp	al, 45h
		jnz	loc_6F1047F0
		test	edi, edi
		mov	[ebp+0], edi
		jz	loc_6F10465F
		cmp	byte ptr [edx],	45h
		jnz	loc_6F10465F
		add	edx, 1
		mov	esi, [esp+3Ch+var_20]
		mov	[ebx+0Ch], edx
		jmp	loc_6F104661
; ---------------------------------------------------------------------------

loc_6F1048DC:				; CODE XREF: sub_6F104620+1EDj
		mov	eax, ebx
		call	sub_6F104620
		mov	edi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jz	short loc_6F1048F5

loc_6F1048ED:				; CODE XREF: sub_6F104620+2E4j
		mov	[esp+3Ch+var_3C], edi
		jmp	loc_6F104837
; ---------------------------------------------------------------------------

loc_6F1048F5:				; CODE XREF: sub_6F104620+2CBj
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6F102FE0
		test	eax, eax
		jns	short loc_6F1048ED
		xor	esi, esi
		jmp	loc_6F104661
; ---------------------------------------------------------------------------

loc_6F10490D:				; CODE XREF: sub_6F104620+1FDj
		add	eax, 3
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6F102FE0
		test	eax, eax
		jns	loc_6F104823
		xor	esi, esi
		jmp	loc_6F104661
sub_6F104620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F104930	proc near		; CODE XREF: sub_6F1043F0+4Fp
					; sub_6F104620+2Cp ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_8], edi
		mov	edi, edx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_4], ebp
		mov	eax, [eax+0Ch]
		movzx	edx, byte ptr [eax]
		cmp	dl, 54h
		jz	loc_6F104A05
		cmp	dl, 47h
		jz	loc_6F104A05
		mov	eax, ebx
		call	sub_6F104620
		test	eax, eax
		mov	esi, eax
		jnz	short loc_6F1049C0

loc_6F10496C:				; CODE XREF: sub_6F104930+92j
					; sub_6F104930+98j
		mov	eax, [ebx+0Ch]
		test	esi, esi
		movzx	eax, byte ptr [eax]
		jz	loc_6F104A21
		test	al, al
		jz	loc_6F104A21
		cmp	al, 45h
		jz	loc_6F104A21
		mov	eax, esi

loc_6F10498C:				; CODE XREF: sub_6F104930+118j
		mov	edx, [eax]
		cmp	edx, 4
		jz	loc_6F104AD0
		jnb	loc_6F104A37

loc_6F10499D:				; CODE XREF: sub_6F104930+10Dj
					; sub_6F104930+120j ...
		xor	edx, edx	; jumptable 6F104AE8 cases 7,8,45

loc_6F10499F:				; CODE XREF: sub_6F104930+1B1j
		mov	eax, ebx
		call	sub_6F103FC0
		mov	ecx, esi
		mov	edx, 3
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	short loc_6F104A21
; ---------------------------------------------------------------------------
		align 10h

loc_6F1049C0:				; CODE XREF: sub_6F104930+3Aj
		test	edi, edi
		jz	short loc_6F10496C
		test	byte ptr [ebx+8], 1
		jnz	short loc_6F10496C
		mov	eax, [esi]
		lea	edx, [eax-1Ah]
		cmp	edx, 2
		ja	short loc_6F1049E1

loc_6F1049D4:				; CODE XREF: sub_6F104930+AFj
		mov	esi, [esi+4]
		mov	eax, [esi]
		lea	edx, [eax-1Ah]
		cmp	edx, 2
		jbe	short loc_6F1049D4

loc_6F1049E1:				; CODE XREF: sub_6F104930+A2j
		cmp	eax, 2
		jnz	short loc_6F104A21
		mov	eax, [esi+8]
		mov	edx, [eax]
		sub	edx, 1Ah
		cmp	edx, 2
		ja	short loc_6F104A00

loc_6F1049F3:				; CODE XREF: sub_6F104930+CEj
		mov	eax, [eax+4]
		mov	edx, [eax]
		sub	edx, 1Ah
		cmp	edx, 2
		jbe	short loc_6F1049F3

loc_6F104A00:				; CODE XREF: sub_6F104930+C1j
		mov	[esi+8], eax
		jmp	short loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104A05:				; CODE XREF: sub_6F104930+20j
					; sub_6F104930+29j
		mov	ecx, [ebx+30h]
		add	ecx, 14h
		mov	[ebx+30h], ecx
		movzx	edx, byte ptr [eax]
		cmp	dl, 54h
		jz	loc_6F104AA2
		cmp	dl, 47h
		jz	short loc_6F104A55

loc_6F104A1F:				; CODE XREF: sub_6F104930+131j
					; sub_6F104930+14Bj ...
		xor	esi, esi	; jumptable 6F104AC9 default case

loc_6F104A21:				; CODE XREF: sub_6F104930+44j
					; sub_6F104930+4Cj ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6F104A37:				; CODE XREF: sub_6F104930+67j
		sub	edx, 1Ah
		cmp	edx, 2
		ja	loc_6F10499D	; jumptable 6F104AE8 cases 7,8,45
		mov	eax, [eax+4]
		test	eax, eax
		jnz	loc_6F10498C
		xchg	ax, ax
		jmp	loc_6F10499D	; jumptable 6F104AE8 cases 7,8,45
; ---------------------------------------------------------------------------

loc_6F104A55:				; CODE XREF: sub_6F104930+EDj
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_6F104A1F ; jumptable 6F104AC9	default	case
		add	eax, 2
		cmp	dl, 52h
		mov	[ebx+0Ch], eax
		jz	loc_6F104CEB
		jg	loc_6F104D0E
		cmp	dl, 41h
		jnz	short loc_6F104A1F ; jumptable 6F104AC9	default	case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6F104930
		mov	edx, 15h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104AA2:				; CODE XREF: sub_6F104930+E4j
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	loc_6F104A1F	; jumptable 6F104AC9 default case
		sub	edx, 43h
		add	eax, 2
		cmp	dl, 33h		; switch 52 cases
		mov	[ebx+0Ch], eax
		ja	loc_6F104A1F	; jumptable 6F104AC9 default case
		movzx	edx, dl
		jmp	ds:off_6F11190C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F104AD0:				; CODE XREF: sub_6F104930+61j
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6F104ADC ; jumptable 6F104AE8	default	case

loc_6F104AD7:				; CODE XREF: sub_6F104930+1C5j
		cmp	dword ptr [eax], 2Dh ; switch 46 cases
		jbe	short loc_6F104AE6

loc_6F104ADC:				; CODE XREF: sub_6F104930+1A5j
					; sub_6F104930+1B8j ...
		mov	edx, 1		; jumptable 6F104AE8 default case
		jmp	loc_6F10499F
; ---------------------------------------------------------------------------

loc_6F104AE6:				; CODE XREF: sub_6F104930+1AAj
		mov	edx, [eax]
		jmp	ds:off_6F1119DC[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6F104AF0:				; CODE XREF: sub_6F104930+1B8j
					; DATA XREF: .rdata:off_6F1119DCo
		mov	eax, [eax+8]	; jumptable 6F104AE8 cases 1,2
		test	eax, eax
		jnz	short loc_6F104AD7
		jmp	short loc_6F104ADC ; jumptable 6F104AE8	default	case
; ---------------------------------------------------------------------------
		align 10h

loc_6F104B00:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		mov	edx, 76h	; jumptable 6F104AC9 case 51
		mov	eax, ebx
		call	sub_6F103040
		test	eax, eax
		xchg	ax, ax
		jz	loc_6F104A1F	; jumptable 6F104AC9 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6F104930
		mov	edx, 10h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104B3B:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		mov	edx, 68h	; jumptable 6F104AC9 case 37
		mov	eax, ebx
		call	sub_6F103040
		test	eax, eax
		jz	loc_6F104A1F	; jumptable 6F104AC9 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6F104930
		mov	edx, 0Fh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104B74:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		xor	edx, edx	; jumptable 6F104AC9 case 32
		mov	eax, ebx
		call	sub_6F103040
		test	eax, eax
		jz	loc_6F104A1F	; jumptable 6F104AC9 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6F103040
		test	eax, eax
		jz	loc_6F104A1F	; jumptable 6F104AC9 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6F104930
		mov	edx, 11h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------
		align 10h

loc_6F104BC0:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		sub	ecx, 5		; jumptable 6F104AC9 case 19
		mov	eax, ebx
		mov	[ebx+30h], ecx
		call	sub_6F103890
		mov	edx, 9
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104BE9:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		sub	ecx, 0Ah	; jumptable 6F104AC9 case 17
		mov	eax, ebx
		mov	[ebx+30h], ecx
		call	sub_6F103890
		mov	edx, 0Ah
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104C12:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		mov	eax, ebx	; jumptable 6F104AC9 case 16
		call	sub_6F103890
		mov	edx, 0Dh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104C35:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		mov	eax, ebx	; jumptable 6F104AC9 case 7
		call	sub_6F103890
		mov	edx, 12h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104C58:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		mov	eax, ebx	; jumptable 6F104AC9 case 6
		call	sub_6F103890
		mov	edx, 0Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104C7B:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		mov	eax, ebx	; jumptable 6F104AC9 case 3
		call	sub_6F103890
		mov	edx, 0Eh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104C9E:				; CODE XREF: sub_6F104930+199j
					; DATA XREF: .rdata:off_6F11190Co
		mov	eax, ebx	; jumptable 6F104AC9 case 0
		call	sub_6F103890
		mov	esi, eax
		mov	eax, ebx
		call	sub_6F102FE0
		test	eax, eax
		js	loc_6F104A1F	; jumptable 6F104AC9 default case
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	loc_6F104A1F	; jumptable 6F104AC9 default case
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6F103890
		mov	edx, 0Bh
		add	dword ptr [ebx+30h], 5
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104CEB:				; CODE XREF: sub_6F104930+13Cj
		mov	eax, ebx
		call	sub_6F104620
		mov	edx, 14h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104D0E:				; CODE XREF: sub_6F104930+142j
		cmp	dl, 56h
		jz	loc_6F104DB5
		cmp	dl, 72h
		jnz	loc_6F104A1F	; jumptable 6F104AC9 default case
		mov	eax, ebx
		call	sub_6F102FE0
		cmp	eax, 1
		jle	loc_6F104A1F	; jumptable 6F104AC9 default case
		mov	esi, [ebx+0Ch]
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jz	loc_6F104A1F	; jumptable 6F104AC9 default case
		add	esi, 1
		cmp	dl, 5Fh
		mov	[ebx+0Ch], esi
		jnz	loc_6F104A1F	; jumptable 6F104AC9 default case
		lea	ebp, [eax-1]
		mov	[esp+3Ch+var_20], 0

loc_6F104D58:				; CODE XREF: sub_6F104930+483j
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	loc_6F104A1F	; jumptable 6F104AC9 default case
		xor	edi, edi
		cmp	al, 24h
		jnz	short loc_6F104D7C
		jmp	short loc_6F104DD8
; ---------------------------------------------------------------------------
		align 10h

loc_6F104D70:				; CODE XREF: sub_6F104930+451j
		movzx	eax, byte ptr [esi+edi]
		test	al, al
		jz	short loc_6F104D83
		cmp	al, 24h
		jz	short loc_6F104D83

loc_6F104D7C:				; CODE XREF: sub_6F104930+437j
		add	edi, 1
		cmp	edi, ebp
		jl	short loc_6F104D70

loc_6F104D83:				; CODE XREF: sub_6F104930+446j
					; sub_6F104930+44Aj
		mov	edx, esi
		mov	ecx, edi
		mov	eax, ebx
		call	sub_6F102F80
		mov	esi, [ebx+0Ch]
		add	esi, edi
		mov	[ebx+0Ch], esi
		test	eax, eax
		jz	loc_6F104A1F	; jumptable 6F104AC9 default case
		sub	ebp, edi

loc_6F104DA0:				; CODE XREF: sub_6F104930+4F8j
		cmp	[esp+3Ch+var_20], 0
		jnz	loc_6F104E49

loc_6F104DAB:				; CODE XREF: sub_6F104930+52Ej
		test	ebp, ebp
		jle	short loc_6F104E2D
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_6F104D58
; ---------------------------------------------------------------------------

loc_6F104DB5:				; CODE XREF: sub_6F104930+3E1j
		mov	eax, ebx
		call	sub_6F104620
		mov	edx, 13h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104DD8:				; CODE XREF: sub_6F104930+439j
		movzx	eax, byte ptr [esi+1]
		cmp	al, 53h
		jz	loc_6F104E7F
		cmp	al, 5Fh
		jz	loc_6F104E75
		cmp	al, 24h
		xchg	ax, ax
		jnz	loc_6F104A1F	; jumptable 6F104AC9 default case
		mov	edx, 24h

loc_6F104DFB:				; CODE XREF: sub_6F104930+54Aj
					; sub_6F104930+554j
		mov	ecx, [ebx+14h]
		cmp	ecx, [ebx+18h]
		jge	short loc_6F104E69
		imul	eax, ecx, 0Ch
		add	ecx, 1
		add	eax, [ebx+10h]
		mov	[ebx+14h], ecx
		test	eax, eax
		jz	short loc_6F104E69
		mov	[eax+4], edx
		mov	esi, [ebx+0Ch]
		sub	ebp, 2
		mov	dword ptr [eax], 38h
		add	esi, 2
		mov	[ebx+0Ch], esi
		jmp	loc_6F104DA0
; ---------------------------------------------------------------------------

loc_6F104E2D:				; CODE XREF: sub_6F104930+47Dj
		mov	ecx, eax
		mov	edx, 36h
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6F102F00
		mov	esi, eax
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104E49:				; CODE XREF: sub_6F104930+475j
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 37h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6F102F00
		test	eax, eax
		jnz	loc_6F104DAB
		jmp	loc_6F104A1F	; jumptable 6F104AC9 default case
; ---------------------------------------------------------------------------

loc_6F104E69:				; CODE XREF: sub_6F104930+4D1j
					; sub_6F104930+4E1j
		add	dword ptr [ebx+0Ch], 2
		xor	esi, esi
		nop
		jmp	loc_6F104A21
; ---------------------------------------------------------------------------

loc_6F104E75:				; CODE XREF: sub_6F104930+4B6j
		mov	edx, 2Eh
		jmp	loc_6F104DFB
; ---------------------------------------------------------------------------

loc_6F104E7F:				; CODE XREF: sub_6F104930+4AEj
		mov	edx, 2Fh
		jmp	loc_6F104DFB
sub_6F104930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F104E90	proc near		; CODE XREF: sub_6F103550+2D3p
					; sub_6F103550+334p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 24h
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_10], 0
		cmp	byte ptr [eax],	45h
		jnz	short loc_6F104EC8
		add	eax, 1
		xor	ecx, ecx
		mov	[ebx+0Ch], eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6F102F00
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F104EC8:				; CODE XREF: sub_6F104E90+15j
		lea	esi, [esp+2Ch+var_10]
		jmp	short loc_6F104ED3
; ---------------------------------------------------------------------------
		align 10h

loc_6F104ED0:				; CODE XREF: sub_6F104E90+6Fj
		lea	esi, [eax+8]

loc_6F104ED3:				; CODE XREF: sub_6F104E90+3Cj
		mov	eax, ebx
		call	sub_6F103550
		test	eax, eax
		jz	short loc_6F104F11
		mov	ecx, eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6F102F00
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6F104F11
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	short loc_6F104ED0
		add	edx, 1
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+0Ch], edx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F104F11:				; CODE XREF: sub_6F104E90+4Cj
					; sub_6F104E90+67j
		add	esp, 24h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
sub_6F104E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F104F20(void	*, size_t, int)
sub_6F104F20	proc near		; DATA XREF: sub_6F106AC0+37o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], edi
		mov	edi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebx
		mov	eax, [esi+4]
		mov	ebx, [esi+8]
		lea	eax, [edi+eax+1]
		cmp	eax, ebx
		ja	short loc_6F104F97

loc_6F104F45:				; CODE XREF: sub_6F104F20+ADj
		mov	ebx, [esi+0Ch]
		test	ebx, ebx
		jz	short loc_6F104F60

loc_6F104F4C:				; CODE XREF: sub_6F104F20+7Cj
					; sub_6F104F20+D7j
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F104F60:				; CODE XREF: sub_6F104F20+2Aj
		mov	eax, [esi]
		mov	edx, [esp+1Ch+arg_0]
		add	eax, [esi+4]
		mov	[esp+1Ch+var_14], edi ;	size_t
		mov	[esp+1Ch+var_18], edx ;	void *
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	memcpy
		mov	edx, [esi]
		mov	eax, [esi+4]
		add	edx, edi
		mov	byte ptr [edx+eax], 0
		add	[esi+4], edi
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6F104F97:				; CODE XREF: sub_6F104F20+23j
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_6F104F4C
		test	ebx, ebx
		jnz	short loc_6F104FB0
		cmp	eax, 2
		mov	bl, 2
		jbe	short loc_6F104FB6
		lea	esi, [esi+0]

loc_6F104FB0:				; CODE XREF: sub_6F104F20+80j
					; sub_6F104F20+94j
		add	ebx, ebx
		cmp	eax, ebx
		ja	short loc_6F104FB0

loc_6F104FB6:				; CODE XREF: sub_6F104F20+87j
		mov	[esp+1Ch+var_18], ebx ;	size_t
		mov	eax, [esi]
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	realloc
		test	eax, eax
		jz	short loc_6F104FD2
		mov	[esi], eax
		mov	[esi+8], ebx
		jmp	loc_6F104F45
; ---------------------------------------------------------------------------

loc_6F104FD2:				; CODE XREF: sub_6F104F20+A6j
		mov	eax, [esi]
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	free
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+0Ch], 1
		jmp	loc_6F104F4C
sub_6F104F20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F105000	proc near		; CODE XREF: sub_6F1058E0+BDp
					; sub_6F1058E0+7F4p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		test	ecx, ecx
		jz	loc_6F1050A0
		lea	edx, [ebx+4]
		mov	eax, [eax+104h]
		xor	edi, edi
		mov	[esp+3Ch+var_20], edx
		jmp	short loc_6F10503D
; ---------------------------------------------------------------------------

loc_6F105024:				; CODE XREF: sub_6F105000+49j
					; sub_6F105000+9Cj
		add	edi, 1
		cmp	ecx, edi
		mov	[ebx+eax+4], dl
		mov	[ebx+104h], ebp
		mov	[ebx+108h], dl
		jbe	short loc_6F1050A0
		mov	eax, ebp

loc_6F10503D:				; CODE XREF: sub_6F105000+22j
		cmp	eax, 0FFh
		movzx	edx, byte ptr [esi+edi]
		lea	ebp, [eax+1]
		jnz	short loc_6F105024
		mov	eax, [ebx+110h]
		mov	ebp, 1
		mov	[esp+3Ch+var_24], dl
		mov	[esp+3Ch+var_28], ecx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+3Ch+var_34], eax
		mov	eax, [ebx+104h]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ebx+10Ch]
		xor	eax, eax
		mov	ecx, [esp+3Ch+var_28]
		mov	dword ptr [ebx+104h], 0
		movzx	edx, [esp+3Ch+var_24]
		add	dword ptr [ebx+124h], 1
		jmp	short loc_6F105024
; ---------------------------------------------------------------------------
		align 10h

loc_6F1050A0:				; CODE XREF: sub_6F105000+Dj
					; sub_6F105000+39j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6F105000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1050B0	proc near		; CODE XREF: sub_6F105480+E2p
					; sub_6F1058E0+76p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	[esp+3Ch+var_3C], edx ;	char *
		call	strlen
		test	eax, eax
		jz	loc_6F105160
		lea	ecx, [ebx+4]
		mov	edx, [ebx+104h]
		xor	edi, edi
		mov	[esp+3Ch+var_20], ecx
		jmp	short loc_6F1050F9
; ---------------------------------------------------------------------------
		align 10h

loc_6F1050E0:				; CODE XREF: sub_6F1050B0+56j
					; sub_6F1050B0+A9j
		add	edi, 1
		cmp	eax, edi
		mov	[ebx+edx+4], cl
		mov	[ebx+104h], ebp
		mov	[ebx+108h], cl
		jbe	short loc_6F105160
		mov	edx, ebp

loc_6F1050F9:				; CODE XREF: sub_6F1050B0+2Aj
		cmp	edx, 0FFh
		movzx	ecx, byte ptr [esi+edi]
		lea	ebp, [edx+1]
		jnz	short loc_6F1050E0
		mov	edx, [ebx+110h]
		mov	ebp, 1
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_24], cl
		mov	byte ptr [ebx+103h], 0
		mov	[esp+3Ch+var_34], edx
		mov	edx, [ebx+104h]
		mov	[esp+3Ch+var_38], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [ebx+10Ch]
		xor	edx, edx
		movzx	ecx, [esp+3Ch+var_24]
		mov	dword ptr [ebx+104h], 0
		mov	eax, [esp+3Ch+var_28]
		add	dword ptr [ebx+124h], 1
		jmp	short loc_6F1050E0
; ---------------------------------------------------------------------------
		align 10h

loc_6F105160:				; CODE XREF: sub_6F1050B0+15j
					; sub_6F1050B0+45j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6F1050B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F105170	proc near		; CODE XREF: sub_6F105480+A3p
					; sub_6F1058E0+6DBp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	edx, ecx
		sub	esp, 20h
		test	ecx, ecx
		mov	ebx, eax
		jz	short loc_6F1051AB
		mov	edi, [ecx+8]
		mov	eax, ecx
		test	edi, edi
		jnz	short loc_6F10519B
		jmp	loc_6F105230
; ---------------------------------------------------------------------------
		align 10h

loc_6F105190:				; CODE XREF: sub_6F105170+30j
		mov	ecx, [eax+8]
		test	ecx, ecx
		jz	loc_6F105230

loc_6F10519B:				; CODE XREF: sub_6F105170+17j
		mov	eax, [eax]
		test	eax, eax
		nop
		jnz	short loc_6F105190
		xor	ecx, ecx
		mov	eax, ebx
		call	sub_6F105480

loc_6F1051AB:				; CODE XREF: sub_6F105170+Ej
		mov	eax, [ebx+104h]

loc_6F1051B1:				; CODE XREF: sub_6F105170+142j
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6F1052FE

loc_6F1051BF:				; CODE XREF: sub_6F105170+1CDj
		mov	byte ptr [ebx+eax+4], 20h
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 20h

loc_6F1051D1:				; CODE XREF: sub_6F105170+26Fj
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6F105386

loc_6F1051E0:				; CODE XREF: sub_6F105170+255j
		mov	byte ptr [ebx+edx+4], 5Bh
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 5Bh
		mov	edx, [esi+4]
		test	edx, edx
		jz	short loc_6F105206
		mov	eax, ebx
		call	sub_6F1058E0
		mov	eax, [ebx+104h]

loc_6F105206:				; CODE XREF: sub_6F105170+87j
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6F105342

loc_6F105214:				; CODE XREF: sub_6F105170+211j
		mov	byte ptr [ebx+eax+4], 5Dh
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 5Dh
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F105230:				; CODE XREF: sub_6F105170+19j
					; sub_6F105170+25j
		mov	eax, [eax+4]
		cmp	dword ptr [eax], 26h
		jz	loc_6F1053D0
		mov	ecx, [ebx+104h]
		lea	edi, [ebx+4]
		cmp	ecx, 0FFh
		jz	loc_6F1053E4
		lea	eax, [ecx+1]
		cmp	eax, 0FFh
		mov	byte ptr [ebx+ecx+4], 20h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 20h
		jz	short loc_6F1052B7

loc_6F10526D:				; CODE XREF: sub_6F105170+2BFj
		lea	ecx, [eax+1]

loc_6F105270:				; CODE XREF: sub_6F105170+189j
		mov	byte ptr [ebx+eax+4], 28h
		mov	eax, ebx
		mov	[ebx+104h], ecx
		xor	ecx, ecx
		mov	byte ptr [ebx+108h], 28h
		call	sub_6F105480
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6F105434

loc_6F1052A0:				; CODE XREF: sub_6F105170+2FEj
		mov	byte ptr [ebx+edx+4], 29h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 29h
		jmp	loc_6F1051B1
; ---------------------------------------------------------------------------

loc_6F1052B7:				; CODE XREF: sub_6F105170+FBj
		mov	eax, [ebx+110h]
		mov	[esp+2Ch+var_10], edx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_2C], edi
		call	dword ptr [ebx+10Ch]
		mov	ecx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F105270
; ---------------------------------------------------------------------------

loc_6F1052FE:				; CODE XREF: sub_6F105170+49j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F1051BF
; ---------------------------------------------------------------------------

loc_6F105342:				; CODE XREF: sub_6F105170+9Ej
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F105214
; ---------------------------------------------------------------------------

loc_6F105386:				; CODE XREF: sub_6F105170+6Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F1051E0
; ---------------------------------------------------------------------------
		align 10h

loc_6F1053D0:				; CODE XREF: sub_6F105170+C6j
		xor	ecx, ecx
		mov	eax, ebx
		call	sub_6F105480
		mov	edx, [ebx+104h]
		jmp	loc_6F1051D1
; ---------------------------------------------------------------------------

loc_6F1053E4:				; CODE XREF: sub_6F105170+DBj
		mov	eax, [ebx+110h]
		mov	[esp+2Ch+var_10], edx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_2C], edi
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		mov	byte ptr [ebx+4], 20h
		mov	dword ptr [ebx+104h], 1
		mov	byte ptr [ebx+108h], 20h
		jmp	loc_6F10526D
; ---------------------------------------------------------------------------

loc_6F105434:				; CODE XREF: sub_6F105170+12Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_2C], edi
		mov	[esp+2Ch+var_24], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F1052A0
sub_6F105170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F105480	proc near		; CODE XREF: sub_6F105170+36p
					; sub_6F105170+116p ...
		push	ebp
		mov	ebp, ecx
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 0Ch
		test	edx, edx
		jnz	short loc_6F1054D1
		jmp	short loc_6F105500
; ---------------------------------------------------------------------------

loc_6F105493:				; CODE XREF: sub_6F105480+64j
		mov	edx, [ebx+4]

loc_6F105496:				; CODE XREF: sub_6F105480+71j
		mov	eax, [ebx+0Ch]
		mov	edi, [esi+114h]
		mov	dword ptr [ebx+8], 1
		mov	[esi+114h], eax
		mov	eax, [edx]
		cmp	eax, 25h
		jz	short loc_6F105508
		cmp	eax, 26h
		jz	short loc_6F10551F
		cmp	eax, 2
		jz	short loc_6F105536
		mov	eax, esi
		nop
		call	sub_6F106C20
		mov	[esi+114h], edi

loc_6F1054CB:				; CODE XREF: sub_6F105480+60j
		mov	ebx, [ebx]
		test	ebx, ebx
		jz	short loc_6F105500

loc_6F1054D1:				; CODE XREF: sub_6F105480+Fj
					; sub_6F105480+77j
		mov	edx, [esi+11Ch]
		test	edx, edx
		jnz	short loc_6F105500
		mov	eax, [ebx+8]
		test	eax, eax
		jnz	short loc_6F1054CB
		test	ebp, ebp
		jnz	short loc_6F105493
		mov	edx, [ebx+4]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	short loc_6F105496
		mov	ebx, [ebx]
		test	ebx, ebx
		jnz	short loc_6F1054D1
		lea	esi, [esi+0]

loc_6F105500:				; CODE XREF: sub_6F105480+11j
					; sub_6F105480+4Fj ...
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F105508:				; CODE XREF: sub_6F105480+31j
		mov	ecx, [ebx]
		mov	eax, esi
		call	sub_6F1055B0
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F10551F:				; CODE XREF: sub_6F105480+36j
		mov	ecx, [ebx]
		mov	eax, esi
		call	sub_6F105170
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F105536:				; CODE XREF: sub_6F105480+3Bj
		mov	ebp, [esi+118h]
		mov	eax, esi
		mov	dword ptr [esi+118h], 0
		mov	edx, [edx+4]
		call	sub_6F1058E0
		test	byte ptr [esi],	4
		mov	[esi+118h], ebp
		jnz	short loc_6F105599
		mov	edx, offset byte_6F111A94
		mov	eax, esi
		call	sub_6F1050B0

loc_6F105567:				; CODE XREF: sub_6F105480+125j
		mov	eax, [ebx+4]
		mov	edx, [eax+8]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	short loc_6F105584

loc_6F105577:				; CODE XREF: sub_6F105480+102j
		mov	edx, [edx+4]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		jbe	short loc_6F105577

loc_6F105584:				; CODE XREF: sub_6F105480+F5j
		mov	eax, esi
		call	sub_6F1058E0
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F105599:				; CODE XREF: sub_6F105480+D9j
		mov	edx, 2Eh
		mov	eax, esi
		call	sub_6F103350
		jmp	short loc_6F105567
sub_6F105480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1055B0	proc near		; CODE XREF: sub_6F105480+8Cp
					; sub_6F1058E0+A49p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, ecx
		push	ebx
		mov	ebx, eax
		sub	esp, 1Ch
		test	ecx, ecx
		jz	loc_6F105844
		mov	eax, ecx
		mov	ecx, [ecx+8]
		mov	edx, 1
		test	ecx, ecx
		jnz	loc_6F105844

loc_6F1055D7:				; CODE XREF: sub_6F1055B0+DDj
		mov	ecx, [eax+4]
		mov	ecx, [ecx]
		sub	ecx, 17h
		cmp	ecx, 10h
		ja	loc_6F105682
		mov	ebp, edx
		shl	ebp, cl
		test	ebp, 10C47h
		mov	ecx, ebp
		jz	loc_6F105725
		movzx	eax, byte ptr [ebx+108h]

loc_6F105601:				; CODE XREF: sub_6F1055B0+18Ej
		cmp	al, 20h
		jz	loc_6F105744
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6F105896

loc_6F10561E:				; CODE XREF: sub_6F1055B0+323j
		cmp	eax, 0FFh
		mov	byte ptr [ebx+edx+4], 20h
		lea	edx, [eax+1]
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 20h
		jnz	loc_6F105758

loc_6F10563E:				; CODE XREF: sub_6F1055B0+1A2j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F105758
; ---------------------------------------------------------------------------

loc_6F105682:				; CODE XREF: sub_6F1055B0+32j
					; sub_6F1055B0+17Bj
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6F105693
		mov	ebp, [eax+8]
		test	ebp, ebp
		jz	loc_6F1055D7

loc_6F105693:				; CODE XREF: sub_6F1055B0+D6j
					; sub_6F1055B0+29Fj
		mov	ebp, [ebx+118h]
		xor	ecx, ecx
		mov	edx, esi
		mov	eax, ebx
		mov	dword ptr [ebx+118h], 0
		call	sub_6F105480
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6F1057BA

loc_6F1056C3:				; CODE XREF: sub_6F1055B0+204j
					; sub_6F1055B0+249j
		mov	byte ptr [ebx+edx+4], 28h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 28h
		mov	edx, [edi+8]
		test	edx, edx
		jz	short loc_6F1056E9
		mov	eax, ebx
		call	sub_6F1058E0
		mov	eax, [ebx+104h]

loc_6F1056E9:				; CODE XREF: sub_6F1055B0+12Aj
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6F105800

loc_6F1056F7:				; CODE XREF: sub_6F1055B0+28Fj
		mov	byte ptr [ebx+eax+4], 29h
		mov	ecx, 1
		mov	eax, ebx
		mov	[ebx+104h], edx
		mov	edx, esi
		mov	byte ptr [ebx+108h], 29h
		call	sub_6F105480
		mov	[ebx+118h], ebp
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F105725:				; CODE XREF: sub_6F1055B0+44j
		and	ecx, 380h
		jz	loc_6F105682

loc_6F105731:				; CODE XREF: sub_6F1055B0+299j
		movzx	eax, byte ptr [ebx+108h]
		cmp	al, 28h
		jz	short loc_6F105744
		cmp	al, 2Ah
		jnz	loc_6F105601

loc_6F105744:				; CODE XREF: sub_6F1055B0+53j
					; sub_6F1055B0+18Aj
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6F10563E

loc_6F105758:				; CODE XREF: sub_6F1055B0+88j
					; sub_6F1055B0+CDj
		mov	byte ptr [ebx+eax+4], 28h
		mov	ebp, [ebx+118h]
		xor	ecx, ecx
		mov	[ebx+104h], edx
		mov	eax, ebx
		mov	edx, esi
		mov	byte ptr [ebx+108h], 28h
		mov	dword ptr [ebx+118h], 0
		call	sub_6F105480
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6F105854

loc_6F105799:				; CODE XREF: sub_6F1055B0+2E1j
		cmp	edx, 0FFh
		mov	byte ptr [ebx+eax+4], 29h
		lea	eax, [edx+1]
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 29h
		jnz	loc_6F1056C3

loc_6F1057BA:				; CODE XREF: sub_6F1055B0+10Dj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F1056C3
; ---------------------------------------------------------------------------
		align 10h

loc_6F105800:				; CODE XREF: sub_6F1055B0+141j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F1056F7
; ---------------------------------------------------------------------------

loc_6F105844:				; CODE XREF: sub_6F1055B0+Fj
					; sub_6F1055B0+21j
		mov	ecx, [edi+4]
		test	ecx, ecx
		jnz	loc_6F105731
		jmp	loc_6F105693
; ---------------------------------------------------------------------------

loc_6F105854:				; CODE XREF: sub_6F1055B0+1E3j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F105799
; ---------------------------------------------------------------------------

loc_6F105896:				; CODE XREF: sub_6F1055B0+68j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F10561E
sub_6F1055B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1058E0	proc near		; CODE XREF: sub_6F105170+8Bp
					; sub_6F105480+CBp ...

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_64		= byte ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 9Ch
		test	edx, edx
		mov	[esp+9Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+9Ch+var_4], ebp
		mov	ebp, edx
		mov	[esp+9Ch+var_C], esi
		mov	[esp+9Ch+var_8], edi
		jz	short loc_6F10591B ; jumptable 6F105948	default	case
		mov	eax, [eax+11Ch]
		test	eax, eax
		jnz	short loc_6F105925 ; jumptable 6F1065B9	default	case
		mov	eax, [edx]
		cmp	eax, 3Ch	; switch 61 cases
		jbe	short loc_6F105948

loc_6F10591B:				; CODE XREF: sub_6F1058E0+28j
					; sub_6F1058E0:loc_6F105948j ...
		mov	dword ptr [ebx+11Ch], 1	; jumptable 6F105948 default case

loc_6F105925:				; CODE XREF: sub_6F1058E0+32j
					; sub_6F1058E0+85j ...
		mov	ebx, [esp+9Ch+var_10] ;	jumptable 6F1065B9 default case
		mov	esi, [esp+9Ch+var_C]
		mov	edi, [esp+9Ch+var_8]
		mov	ebp, [esp+9Ch+var_4]
		add	esp, 9Ch
		retn
; ---------------------------------------------------------------------------

loc_6F105948:				; CODE XREF: sub_6F1058E0+39j
		jmp	ds:off_6F111C48[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F10594F:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aVtableFor ; jumptable 6F105948 case 9

loc_6F105954:				; CODE XREF: sub_6F1058E0+D7j
					; sub_6F1058E0+DEj ...
		mov	eax, ebx
		call	sub_6F1050B0

loc_6F10595B:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; sub_6F1058E0+786j
					; DATA XREF: ...
		mov	edx, [ebp+4]	; jumptable 6F105948 case 36
		mov	eax, ebx
		call	sub_6F1058E0
		jmp	short loc_6F105925 ; jumptable 6F1065B9	default	case
; ---------------------------------------------------------------------------

loc_6F105967:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aConstructionVt ; jumptable	6F105948 case 11
		mov	eax, ebx
		call	sub_6F1050B0
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, offset aIn	; "-in-"

loc_6F105982:				; CODE XREF: sub_6F1058E0+803j
		mov	eax, ebx
		call	sub_6F1050B0

loc_6F105989:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; sub_6F1058E0+D0j ...
		mov	edx, [ebp+8]	; jumptable 6F105948 case 7
		mov	eax, ebx
		call	sub_6F1058E0
		jmp	short loc_6F105925 ; jumptable 6F1065B9	default	case
; ---------------------------------------------------------------------------

loc_6F105995:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; sub_6F1058E0+181j
					; DATA XREF: ...
		mov	ecx, [ebp+8]	; jumptable 6F105948 case 22
		mov	eax, ebx
		mov	edx, [ebp+4]
		call	sub_6F105000
		jmp	short loc_6F105925 ; jumptable 6F1065B9	default	case
; ---------------------------------------------------------------------------

loc_6F1059A4:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, 7Eh	; jumptable 6F105948 case 8
		mov	eax, ebx
		call	sub_6F103350
		jmp	short loc_6F105989 ; jumptable 6F105948	case 7
; ---------------------------------------------------------------------------

loc_6F1059B2:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aVttFor ; jumptable	6F105948 case 10
		jmp	short loc_6F105954
; ---------------------------------------------------------------------------

loc_6F1059B9:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aTypeinfoFor ; jumptable 6F105948 case 12
		jmp	short loc_6F105954
; ---------------------------------------------------------------------------

loc_6F1059C0:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aTypeinfoNameFo ; jumptable	6F105948 case 13
		jmp	short loc_6F105954
; ---------------------------------------------------------------------------

loc_6F1059C7:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aTypeinfoFnFor ; jumptable 6F105948	case 14
		jmp	short loc_6F105954
; ---------------------------------------------------------------------------

loc_6F1059CE:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aNonVirtualThun ; jumptable	6F105948 case 15
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F1059D8:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, [edx+4]	; jumptable 6F105948 case 60
		mov	eax, ebx
		call	sub_6F1033D0
		test	eax, eax
		jz	loc_6F10675F
		cmp	dword ptr [eax], 2Ah
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		mov	edx, [eax+4]
		xor	esi, esi
		test	edx, edx
		jnz	short loc_6F105A14
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105A01:				; CODE XREF: sub_6F1058E0+13Cj
		cmp	dword ptr [eax], 2Ah
		jnz	short loc_6F105A1E
		mov	edi, [eax+4]
		test	edi, edi
		nop
		lea	esi, [esi+0]
		jz	short loc_6F105A1E
		mov	esi, edx

loc_6F105A14:				; CODE XREF: sub_6F1058E0+11Aj
		mov	eax, [eax+8]
		lea	edx, [esi+1]
		test	eax, eax
		jnz	short loc_6F105A01

loc_6F105A1E:				; CODE XREF: sub_6F1058E0+124j
					; sub_6F1058E0+130j
		mov	[esp+9Ch+var_7C], edx
		xor	edi, edi
		mov	ebp, [ebp+4]
		jmp	short loc_6F105A3D
; ---------------------------------------------------------------------------
		align 10h

loc_6F105A30:				; CODE XREF: sub_6F1058E0+16Ej
					; sub_6F1058E0+17Cj
		add	edi, 1
		cmp	[esp+9Ch+var_7C], edi
		jle	loc_6F105925	; jumptable 6F1065B9 default case

loc_6F105A3D:				; CODE XREF: sub_6F1058E0+147j
		mov	[ebx+120h], edi
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6F1058E0
		cmp	esi, edi
		jle	short loc_6F105A30
		mov	edx, offset asc_6F111BB0 ; ", "
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	short loc_6F105A30
; ---------------------------------------------------------------------------

loc_6F105A5E:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		test	byte ptr [ebx],	4 ; jumptable 6F105948 case 0
		jz	loc_6F105995	; jumptable 6F105948 case 22
		mov	eax, [edx+4]
		mov	edi, [edx+8]
		add	edi, eax
		cmp	eax, edi
		jb	short loc_6F105A9B
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105A78:				; CODE XREF: sub_6F1058E0+1C2j
		movzx	edx, byte ptr [eax]
		lea	esi, [eax+1]
		cmp	dl, 5Fh
		jz	loc_6F1063AC

loc_6F105A87:				; CODE XREF: sub_6F1058E0+1CAj
					; sub_6F1058E0+AD3j ...
		movsx	edx, dl
		mov	eax, ebx
		call	sub_6F103350

loc_6F105A91:				; CODE XREF: sub_6F1058E0+ECBj
		cmp	esi, edi
		jnb	loc_6F105925	; jumptable 6F1065B9 default case
		mov	eax, esi

loc_6F105A9B:				; CODE XREF: sub_6F1058E0+191j
		mov	edx, edi
		sub	edx, eax
		cmp	edx, 3
		jg	short loc_6F105A78
		lea	esi, [eax+1]
		movzx	edx, byte ptr [eax]
		jmp	short loc_6F105A87
; ---------------------------------------------------------------------------

loc_6F105AAC:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, [edx+4]	; jumptable 6F105948 cases 1,2
		mov	eax, ebx
		call	sub_6F1058E0
		test	byte ptr [ebx],	4
		jnz	loc_6F106422
		mov	edx, offset byte_6F111A94
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105989	; jumptable 6F105948 case 7
; ---------------------------------------------------------------------------

loc_6F105AD0:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	eax, [ebx+118h]	; jumptable 6F105948 case 3
		mov	dword ptr [ebx+118h], 0
		mov	[esp+9Ch+var_74], eax
		mov	esi, [edx+4]
		test	esi, esi
		jz	loc_6F10591B	; jumptable 6F105948 default case
		lea	edx, [esp+9Ch+var_64]
		mov	ecx, [ebx+114h]
		mov	[esp+9Ch+var_7C], edx
		mov	[ebx+118h], edx
		mov	edx, [esi]
		mov	dword ptr [esp+9Ch+var_64], 0
		mov	[esp+9Ch+var_60], esi
		mov	[esp+9Ch+var_5C], 0
		lea	eax, [edx-1Ah]
		cmp	eax, 2
		mov	[esp+9Ch+var_78], ecx
		mov	[esp+9Ch+var_58], ecx
		ja	loc_6F1067B0
		lea	eax, [esp+9Ch+var_54]
		mov	edi, 1

loc_6F105B36:				; CODE XREF: sub_6F1058E0+297j
		mov	esi, [esi+4]
		test	esi, esi
		jz	loc_6F10591B	; jumptable 6F105948 default case
		cmp	edi, 4
		jz	loc_6F10591B	; jumptable 6F105948 default case
		mov	edx, [ebx+118h]
		add	edi, 1
		mov	[eax+4], esi
		mov	dword ptr [eax+8], 0
		mov	[eax], edx
		mov	edx, [esp+9Ch+var_78]
		mov	[ebx+118h], eax
		mov	[eax+0Ch], edx
		mov	edx, [esi]
		add	eax, 10h
		lea	ecx, [edx-1Ah]
		cmp	ecx, 2
		jbe	short loc_6F105B36

loc_6F105B79:				; CODE XREF: sub_6F1058E0+ED5j
		cmp	edx, 4
		jz	loc_6F106735
		cmp	edx, 2
		jnz	loc_6F105C3E
		mov	edx, [esi+8]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	loc_6F105C3E
		cmp	edi, 3
		ja	loc_6F10591B	; jumptable 6F105948 default case
		mov	ecx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	eax, [eax+ecx-10h]
		mov	[esp+9Ch+var_80], eax
		mov	eax, edi
		shl	eax, 4
		lea	ecx, [eax+ecx-10h]
		mov	eax, edi
		mov	[esp+9Ch+var_70], ecx
		mov	ecx, [esp+9Ch+var_7C]
		shl	eax, 4
		add	ecx, eax
		mov	[esp+9Ch+var_78], ecx
		mov	ecx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_70], esi
		mov	esi, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_78], ebp
		mov	eax, ecx
		jmp	short loc_6F105BF8
; ---------------------------------------------------------------------------

loc_6F105BE6:				; CODE XREF: sub_6F1058E0+354j
		add	eax, 10h
		add	ecx, 10h
		add	esi, 10h
		cmp	edi, 3
		ja	loc_6F10591B	; jumptable 6F105948 default case

loc_6F105BF8:				; CODE XREF: sub_6F1058E0+304j
		mov	ebp, [eax+4]
		add	edi, 1
		mov	[eax+10h], ecx
		mov	[eax+4], edx
		mov	[eax+14h], ebp
		mov	ebp, [eax+8]
		mov	dword ptr [eax+8], 0
		mov	[eax+18h], ebp
		mov	ebp, [eax+0Ch]
		mov	[eax+1Ch], ebp
		mov	ebp, [ebx+114h]
		mov	[ebx+118h], esi
		mov	[eax+0Ch], ebp
		mov	edx, [edx+4]
		mov	ebp, [edx]
		sub	ebp, 1Ah
		cmp	ebp, 2
		jbe	short loc_6F105BE6
		mov	esi, [esp+9Ch+var_70]
		mov	ebp, [esp+9Ch+var_78]

loc_6F105C3E:				; CODE XREF: sub_6F1058E0+2A5j
					; sub_6F1058E0+2B6j ...
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6F1058E0
		cmp	dword ptr [esi], 4
		jz	loc_6F106750

loc_6F105C51:				; CODE XREF: sub_6F1058E0+E7Aj
		test	edi, edi
		jz	loc_6F106626
		mov	edx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	esi, [edx+eax-8]
		jmp	short loc_6F105C73
; ---------------------------------------------------------------------------

loc_6F105C68:				; CODE XREF: sub_6F1058E0+39Aj
					; sub_6F1058E0+3B2j
		sub	esi, 10h
		test	edi, edi
		jz	loc_6F106626

loc_6F105C73:				; CODE XREF: sub_6F1058E0+386j
		mov	ebp, [esi]
		sub	edi, 1
		test	ebp, ebp
		jnz	short loc_6F105C68
		mov	eax, ebx
		mov	edx, 20h
		call	sub_6F103350
		mov	edx, [esi-4]
		mov	eax, ebx
		call	sub_6F106C20
		jmp	short loc_6F105C68
; ---------------------------------------------------------------------------

loc_6F105C94:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aJavaClassFor ; jumptable 6F105948 case 18
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F105C9E:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aGuardVariableF ; jumptable	6F105948 case 19
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F105CA8:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		cmp	word ptr [edx+0Ah], 0 ;	jumptable 6F105948 case	40
		jnz	loc_6F106459

loc_6F105CB3:				; CODE XREF: sub_6F1058E0+B85j
		mov	edx, [ebp+4]
		cmp	dword ptr [edx+4], offset off_6F111FE0
		jz	short loc_6F105CD2
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6F103350

loc_6F105CD2:				; CODE XREF: sub_6F1058E0+3DDj
		cmp	word ptr [ebp+8], 0
		jz	loc_6F106448
		mov	edx, offset a_accum ; "_Accum"
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105CEE:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, [edx+4]	; jumptable 6F105948 cases 41,42
		test	edx, edx
		jz	short loc_6F105CFC
		mov	eax, ebx
		call	sub_6F1058E0

loc_6F105CFC:				; CODE XREF: sub_6F1058E0+413j
		mov	eax, [ebp+8]
		test	eax, eax
		jz	loc_6F105925	; jumptable 6F1065B9 default case
		mov	eax, [ebx+104h]
		cmp	eax, 0FDh
		ja	loc_6F1064E0

loc_6F105D18:				; CODE XREF: sub_6F1058E0+C30j
		mov	edx, offset asc_6F111BB0 ; ", "
		mov	eax, ebx
		call	sub_6F1050B0
		mov	edx, [ebp+8]
		mov	eax, ebx
		mov	esi, [ebx+124h]
		mov	edi, [ebx+104h]
		call	sub_6F1058E0
		cmp	[ebx+124h], esi
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		mov	eax, [ebx+104h]
		cmp	eax, edi
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		sub	eax, 2
		mov	[ebx+104h], eax
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105D62:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edi, [ebx+118h]	; jumptable 6F105948 cases 26-34

loc_6F105D68:				; CODE XREF: sub_6F1058E0+754j
					; sub_6F1058E0+764j ...
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	dword ptr [esp+9Ch+var_64], edi
		mov	[esp+9Ch+var_60], ebp
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_58], eax
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	esi, [esp+9Ch+var_5C]
		test	esi, esi
		jnz	short loc_6F105DA7
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6F106C20

loc_6F105DA7:				; CODE XREF: sub_6F1058E0+4BCj
					; sub_6F1058E0+71Fj ...
		mov	eax, dword ptr [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105DB6:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	eax, ebx	; jumptable 6F105948 case 45
		mov	edx, offset aOperator ;	"operator "
		call	sub_6F1050B0
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6F106D10
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105DD0:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, [edx+4]	; jumptable 6F105948 case 46
		cmp	dword ptr [edx], 2Dh
		jz	loc_6F10647C
		mov	eax, ebx
		xchg	ax, ax
		call	sub_6F106EB0

loc_6F105DE5:				; CODE XREF: sub_6F1058E0+BBEj
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6F106F90
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105DF4:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	eax, [edx+8]	; jumptable 6F105948 case 47
		cmp	dword ptr [eax], 30h
		jnz	loc_6F10591B	; jumptable 6F105948 default case
		mov	edx, [edx+4]
		cmp	dword ptr [edx], 2Bh
		jz	loc_6F106692

loc_6F105E0C:				; CODE XREF: sub_6F1058E0+DB9j
					; sub_6F1058E0+DC5j ...
		mov	edx, [eax+4]
		mov	eax, ebx
		mov	edi, offset aIx	; "ix"
		call	sub_6F106F90
		mov	edx, [ebp+4]
		mov	ecx, 3
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp+9Ch+var_7C], eax
		mov	esi, eax
		repe cmpsb
		jz	loc_6F106668
		mov	esi, [esp+9Ch+var_7C]
		mov	edi, offset aCl	; "cl"
		mov	ecx, 3
		repe cmpsb
		jnz	loc_6F10671B

loc_6F105E4C:				; CODE XREF: sub_6F1058E0+E45j
		mov	eax, [ebp+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6F106F90

loc_6F105E59:				; CODE XREF: sub_6F1058E0+DADj
		mov	eax, [ebp+4]
		cmp	dword ptr [eax], 2Bh
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		mov	eax, [eax+4]
		cmp	dword ptr [eax+8], 1
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		mov	eax, [eax+4]
		cmp	byte ptr [eax],	3Eh
		jnz	loc_6F105925	; jumptable 6F1065B9 default case

loc_6F105E7E:				; CODE XREF: sub_6F1058E0+AAEj
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105E8F:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		movsx	edx, byte ptr [edx+4] ;	jumptable 6F105948 case	56
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105E9F:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	esi, [ebx+118h]	; jumptable 6F105948 case 38
		lea	ecx, [esp+9Ch+var_64]
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_7C], ecx
		mov	[ebx+118h], ecx
		mov	[esp+9Ch+var_78], esi
		mov	[esp+9Ch+var_58], eax
		mov	eax, [esp+9Ch+var_78]
		mov	dword ptr [esp+9Ch+var_64], esi
		mov	esi, ecx
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], 0
		test	eax, eax
		jz	loc_6F10672A
		mov	edx, [esp+9Ch+var_78]
		mov	eax, [edx+4]
		mov	eax, [eax]
		sub	eax, 17h
		cmp	eax, 2
		ja	loc_6F10672A
		mov	eax, edx
		mov	edi, 1
		mov	[esp+9Ch+var_74], ebp
		jmp	short loc_6F105F0E
; ---------------------------------------------------------------------------

loc_6F105F01:				; CODE XREF: sub_6F1058E0+67Dj
		mov	edx, [eax+4]
		mov	edx, [edx]
		sub	edx, 17h
		cmp	edx, 2
		ja	short loc_6F105F5F

loc_6F105F0E:				; CODE XREF: sub_6F1058E0+61Fj
		mov	ebp, [eax+8]
		test	ebp, ebp
		jnz	short loc_6F105F59
		cmp	edi, 3
		ja	loc_6F10591B	; jumptable 6F105948 default case
		mov	ebp, [eax]
		mov	edx, edi
		add	edi, 1
		shl	edx, 4
		lea	ecx, [esp+edx+9Ch+var_64]
		mov	dword ptr [esp+edx+9Ch+var_64],	ebp
		mov	ebp, [eax+4]
		mov	[ecx+4], ebp
		mov	ebp, [eax+8]
		mov	[ecx+8], ebp
		mov	ebp, [eax+0Ch]
		mov	[ecx+0Ch], ebp
		mov	dword ptr [esp+edx+9Ch+var_64],	esi
		mov	esi, [esp+9Ch+var_7C]
		mov	dword ptr [eax+8], 1
		add	esi, edx
		mov	[ebx+118h], esi

loc_6F105F59:				; CODE XREF: sub_6F1058E0+633j
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6F105F01

loc_6F105F5F:				; CODE XREF: sub_6F1058E0+62Cj
		mov	ebp, [esp+9Ch+var_74]

loc_6F105F63:				; CODE XREF: sub_6F1058E0+E50j
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	ecx, [esp+9Ch+var_78]
		mov	[ebx+118h], ecx
		mov	ecx, [esp+9Ch+var_5C]
		test	ecx, ecx
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		cmp	edi, 1
		jz	short loc_6F105FB3
		mov	edx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	esi, [edx+eax-0Ch]

loc_6F105F95:				; CODE XREF: sub_6F1058E0+6C7j
		mov	edx, [esi]
		sub	edi, 1
		mov	eax, ebx
		sub	esi, 10h
		call	sub_6F106C20
		cmp	edi, 1
		ja	short loc_6F105F95
		mov	ecx, [ebx+118h]
		mov	[esp+9Ch+var_78], ecx

loc_6F105FB3:				; CODE XREF: sub_6F1058E0+6A6j
		mov	ecx, [esp+9Ch+var_78]
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6F105170
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F105FC5:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	eax, [ebx+118h]	; jumptable 6F105948 case 39
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], 0
		mov	dword ptr [esp+9Ch+var_64], eax
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_58], eax
		mov	edx, [edx+8]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, [esp+9Ch+var_5C]
		test	edx, edx
		jnz	loc_6F105DA7
		mov	eax, ebx
		mov	edx, 20h
		call	sub_6F103350
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, offset asc_6F111B98 ; "::*"
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105DA7
; ---------------------------------------------------------------------------

loc_6F10602C:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edi, [ebx+118h]	; jumptable 6F105948 cases 23-25
		test	edi, edi
		jz	loc_6F105D68
		mov	edx, edi
		jmp	short loc_6F10604A
; ---------------------------------------------------------------------------
		align 10h

loc_6F106040:				; CODE XREF: sub_6F1058E0+76Fj
					; sub_6F1058E0+784j
		mov	edx, [edx]
		test	edx, edx
		jz	loc_6F105D68

loc_6F10604A:				; CODE XREF: sub_6F1058E0+75Cj
		mov	ecx, [edx+8]
		test	ecx, ecx
		jnz	short loc_6F106040
		mov	ecx, [edx+4]
		mov	ecx, [ecx]
		lea	esi, [ecx-17h]
		cmp	esi, 2
		ja	loc_6F105D68
		cmp	eax, ecx
		jnz	short loc_6F106040
		jmp	loc_6F10595B	; jumptable 6F105948 case 36
; ---------------------------------------------------------------------------

loc_6F10606B:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aParm ; jumptable 6F105948 case 6
		mov	eax, ebx
		call	sub_6F1050B0
		mov	eax, [ebp+4]
		lea	esi, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_98], offset aLd ; "%ld"
		mov	[esp+9Ch+var_9C], esi ;	char *
		mov	[esp+9Ch+var_94], eax
		call	sprintf
		mov	edx, esi
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F1060A0:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aOperator_0	; jumptable 6F105948 case 43
		mov	eax, ebx
		call	sub_6F1050B0
		mov	eax, [ebp+4]
		mov	edx, [eax+4]
		movzx	ecx, byte ptr [edx]
		sub	ecx, 61h
		cmp	cl, 19h
		ja	short loc_6F1060CF
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6F103350
		mov	eax, [ebp+4]
		mov	edx, [eax+4]

loc_6F1060CF:				; CODE XREF: sub_6F1058E0+7DBj
		mov	ecx, [eax+8]
		mov	eax, ebx
		call	sub_6F105000
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F1060DE:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aOperator ;	jumptable 6F105948 case	44
		jmp	loc_6F105982
; ---------------------------------------------------------------------------

loc_6F1060E8:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aReferenceTempo ; jumptable	6F105948 case 20
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F1060F2:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aHiddenAliasFor ; jumptable	6F105948 case 21
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F1060FC:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aGlobalDestruct ; jumptable	6F105948 case 59
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F106106:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, [edx+4]	; jumptable 6F105948 cases 52,53
		xor	esi, esi
		cmp	dword ptr [edx], 23h
		jnz	short loc_6F10612D
		mov	edx, [edx+4]
		mov	esi, [edx+10h]
		cmp	esi, 1
		jb	short loc_6F10612D
		cmp	esi, 6
		jbe	loc_6F106590
		cmp	esi, 7
		jz	loc_6F106545

loc_6F10612D:				; CODE XREF: sub_6F1058E0+82Ej
					; sub_6F1058E0+839j ...
		mov	edx, 28h
		mov	eax, ebx
		call	sub_6F103350
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6F103350
		cmp	dword ptr [ebp+0], 35h
		jz	loc_6F106657

loc_6F106159:				; CODE XREF: sub_6F1058E0+D83j
		cmp	esi, 8
		jnz	loc_6F105989	; jumptable 6F105948 case 7
		mov	eax, ebx
		mov	edx, 5Bh
		call	sub_6F103350
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, 5Dh
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F106189:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	eax, [ebx+118h]	; jumptable 6F105948 case 4
		test	byte ptr [ebx],	4
		mov	dword ptr [ebx+118h], 0
		mov	[esp+9Ch+var_7C], eax
		mov	edx, [edx+4]
		jz	short loc_6F1061B5
		mov	esi, [edx]
		test	esi, esi
		jnz	short loc_6F1061B5
		cmp	dword ptr [edx+8], 6
		jz	loc_6F1066C9

loc_6F1061B5:				; CODE XREF: sub_6F1058E0+8C3j
					; sub_6F1058E0+8C9j ...
		mov	eax, ebx
		call	sub_6F1058E0
		cmp	byte ptr [ebx+108h], 3Ch
		jz	loc_6F106646

loc_6F1061C9:				; CODE XREF: sub_6F1058E0+D72j
		mov	edx, 3Ch
		mov	eax, ebx
		call	sub_6F103350
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6F1058E0
		cmp	byte ptr [ebx+108h], 3Eh
		jz	loc_6F106635

loc_6F1061EC:				; CODE XREF: sub_6F1058E0+D61j
		mov	edx, 3Eh
		mov	eax, ebx
		call	sub_6F103350

loc_6F1061F8:				; CODE XREF: sub_6F1058E0+E14j
		mov	edx, [esp+9Ch+var_7C]
		mov	[ebx+118h], edx
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F106207:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	esi, [ebx+114h]	; jumptable 6F105948 case 5
		test	esi, esi
		jz	loc_6F106617
		mov	eax, [esi+4]
		mov	edx, [edx+4]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6F10623D
		jmp	loc_6F10591B	; jumptable 6F105948 default case
; ---------------------------------------------------------------------------

loc_6F106227:				; CODE XREF: sub_6F1058E0+960j
		test	edx, edx
		jle	loc_6F1064A3
		mov	eax, [eax+8]
		sub	edx, 1
		test	eax, eax
		jz	loc_6F10591B	; jumptable 6F105948 default case

loc_6F10623D:				; CODE XREF: sub_6F1058E0+940j
		cmp	dword ptr [eax], 2Ah
		jz	short loc_6F106227
		jmp	loc_6F10591B	; jumptable 6F105948 default case
; ---------------------------------------------------------------------------

loc_6F106247:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	eax, [edx+8]	; jumptable 6F105948 case 49
		cmp	dword ptr [eax], 32h
		lea	esi, [esi+0]
		jnz	loc_6F10591B	; jumptable 6F105948 default case
		mov	edx, [eax+8]
		cmp	dword ptr [edx], 33h
		jnz	loc_6F10591B	; jumptable 6F105948 default case
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6F106F90
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F106EB0
		mov	eax, [ebp+8]
		mov	eax, [eax+8]
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6F106F90
		mov	eax, ebx
		mov	edx, offset asc_6F111BC9 ; " : "
		call	sub_6F1050B0
		mov	eax, [ebp+8]
		mov	eax, [eax+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6F106F90
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F1062A7:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		test	byte ptr [ebx],	20h ; jumptable	6F105948 case 37
		jnz	loc_6F10646A

loc_6F1062B0:				; CODE XREF: sub_6F1058E0+B97j
		mov	ecx, [ebp+4]
		test	ecx, ecx
		jz	short loc_6F106316
		mov	eax, [ebx+118h]
		mov	[esp+9Ch+var_60], ebp
		mov	[esp+9Ch+var_5C], 0
		mov	dword ptr [esp+9Ch+var_64], eax
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_58], eax
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, [esp+9Ch+var_5C]
		mov	eax, dword ptr [esp+9Ch+var_64]
		test	edx, edx
		mov	[ebx+118h], eax
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		test	byte ptr [ebx],	20h
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6F103350

loc_6F106316:				; CODE XREF: sub_6F1058E0+9D5j
		test	byte ptr [ebx],	20h
		jnz	loc_6F105925	; jumptable 6F1065B9 default case
		mov	ecx, [ebx+118h]
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6F1055B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F106333:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aGlobalConstruc ; jumptable	6F105948 case 58
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F10633D:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aVirtualThunkTo ; jumptable	6F105948 case 16
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F106347:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aCovariantRetur ; jumptable	6F105948 case 17
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F106351:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		test	byte ptr [ebx],	4 ; jumptable 6F105948 case 35
		jnz	loc_6F106433
		mov	eax, [edx+4]
		mov	ecx, [eax+4]
		mov	edx, [eax]
		mov	eax, ebx
		call	sub_6F105000
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F10636E:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, offset aJavaResource ; jumptable 6F105948 case 54
		jmp	loc_6F105954
; ---------------------------------------------------------------------------

loc_6F106378:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	eax, ebx	; jumptable 6F105948 case 57
		mov	edx, offset aDecltype ;	"decltype ("
		call	sub_6F1050B0
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F1058E0
		jmp	loc_6F105E7E
; ---------------------------------------------------------------------------

loc_6F106393:				; CODE XREF: sub_6F1058E0:loc_6F105948j
					; DATA XREF: .rdata:off_6F111C48o
		mov	edx, [edx+4]	; jumptable 6F105948 case 55
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6F1058E0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F1063AC:				; CODE XREF: sub_6F1058E0+1A1j
		cmp	byte ptr [eax+1], 5Fh
		lea	esi, [eax+1]
		jnz	loc_6F105A87
		cmp	byte ptr [eax+2], 55h
		lea	esi, [esi+0]
		jnz	loc_6F105A87
		lea	ebp, [eax+3]
		cmp	edi, ebp
		jbe	loc_6F105A87
		xor	ecx, ecx
		mov	[esp+9Ch+var_7C], esi
		mov	esi, ecx
		jmp	short loc_6F1063F2
; ---------------------------------------------------------------------------

loc_6F1063DB:				; CODE XREF: sub_6F1058E0+B1Cj
		movsx	eax, al
		sub	eax, 30h

loc_6F1063E1:				; CODE XREF: sub_6F1058E0+B2Cj
					; sub_6F1058E0+B40j
		add	ebp, 1
		cmp	edi, ebp
		jbe	loc_6F1066C0
		shl	esi, 4
		lea	esi, [eax+esi]

loc_6F1063F2:				; CODE XREF: sub_6F1058E0+AF9j
		movzx	eax, byte ptr [ebp+0]
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_6F1063DB
		lea	ecx, [eax-41h]
		cmp	cl, 5
		ja	short loc_6F10640E
		movsx	eax, al
		sub	eax, 37h
		jmp	short loc_6F1063E1
; ---------------------------------------------------------------------------

loc_6F10640E:				; CODE XREF: sub_6F1058E0+B24j
		lea	ecx, [eax-61h]
		cmp	cl, 5
		ja	loc_6F10677A
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_6F1063E1
; ---------------------------------------------------------------------------

loc_6F106422:				; CODE XREF: sub_6F1058E0+1D9j
		mov	edx, 2Eh
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F105989	; jumptable 6F105948 case 7
; ---------------------------------------------------------------------------

loc_6F106433:				; CODE XREF: sub_6F1058E0+A74j
		mov	eax, [edx+4]
		mov	ecx, [eax+0Ch]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6F105000
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F106448:				; CODE XREF: sub_6F1058E0+3F7j
		mov	edx, offset a_fract ; "_Fract"
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F106459:				; CODE XREF: sub_6F1058E0+3CDj
		mov	edx, offset a_sat ; "_Sat "
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105CB3
; ---------------------------------------------------------------------------

loc_6F10646A:				; CODE XREF: sub_6F1058E0+9CAj
		mov	ecx, [ebx+118h]
		mov	eax, ebx
		call	sub_6F1055B0
		jmp	loc_6F1062B0
; ---------------------------------------------------------------------------

loc_6F10647C:				; CODE XREF: sub_6F1058E0+4F6j
		mov	eax, ebx
		mov	edx, 28h
		call	sub_6F103350
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F106D10
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F105DE5
; ---------------------------------------------------------------------------

loc_6F1064A3:				; CODE XREF: sub_6F1058E0+949j
		test	eax, eax
		jz	loc_6F10591B	; jumptable 6F105948 default case
		test	edx, edx
		lea	esi, [esi+0]
		jnz	loc_6F10591B	; jumptable 6F105948 default case
		mov	edx, [eax+4]
		test	edx, edx
		jz	loc_6F10591B	; jumptable 6F105948 default case
		cmp	dword ptr [edx], 2Ah
		jz	short loc_6F106515

loc_6F1064C6:				; CODE XREF: sub_6F1058E0+E30j
		mov	eax, [esi]
		mov	[ebx+114h], eax
		mov	eax, ebx
		call	sub_6F1058E0
		mov	[ebx+114h], esi
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F1064E0:				; CODE XREF: sub_6F1058E0+432j
		mov	edx, [ebx+110h]
		mov	byte ptr [ebx+eax+4], 0
		mov	[esp+9Ch+var_98], eax
		lea	eax, [ebx+4]
		mov	[esp+9Ch+var_9C], eax
		mov	[esp+9Ch+var_94], edx
		call	dword ptr [ebx+10Ch]
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F105D18
; ---------------------------------------------------------------------------

loc_6F106515:				; CODE XREF: sub_6F1058E0+BE4j
		mov	eax, [ebx+120h]
		test	eax, eax
		jg	short loc_6F106536
		jmp	loc_6F1066F9
; ---------------------------------------------------------------------------

loc_6F106524:				; CODE XREF: sub_6F1058E0+C5Ej
		cmp	dword ptr [edx], 2Ah
		jnz	loc_6F10591B	; jumptable 6F105948 default case
		test	eax, eax
		nop
		jle	loc_6F1066F9

loc_6F106536:				; CODE XREF: sub_6F1058E0+C3Dj
		mov	edx, [edx+8]
		sub	eax, 1
		test	edx, edx
		jnz	short loc_6F106524
		jmp	loc_6F10591B	; jumptable 6F105948 default case
; ---------------------------------------------------------------------------

loc_6F106545:				; CODE XREF: sub_6F1058E0+847j
		mov	edx, [ebp+8]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	loc_6F10612D
		cmp	dword ptr [edx+8], 1
		jnz	loc_6F10612D
		cmp	eax, 34h
		jnz	loc_6F10612D
		mov	eax, [edx+4]
		movzx	eax, byte ptr [eax]
		cmp	al, 30h
		jz	loc_6F1067CE
		cmp	al, 31h
		jnz	loc_6F10612D
		mov	edx, offset aTrue ; "true"
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6F106590:				; CODE XREF: sub_6F1058E0+83Ej
		mov	edx, [ebp+8]
		mov	edi, [edx]
		test	edi, edi
		jnz	loc_6F10612D
		cmp	eax, 35h
		jz	loc_6F1067BA

loc_6F1065A6:				; CODE XREF: sub_6F1058E0+EE9j
		mov	eax, ebx
		sub	esi, 2
		call	sub_6F1058E0
		cmp	esi, 4		; switch 5 cases
		ja	loc_6F105925	; jumptable 6F1065B9 default case
		jmp	ds:off_6F111D3C[esi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F1065C0:				; CODE XREF: sub_6F1058E0+CD9j
					; DATA XREF: .rdata:off_6F111D3Co
		mov	edx, offset aLl	; jumptable 6F1065B9 case 3
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F1065D1:				; CODE XREF: sub_6F1058E0+CD9j
					; DATA XREF: .rdata:off_6F111D3Co
		mov	edx, offset aUl	; jumptable 6F1065B9 case 2
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F1065E2:				; CODE XREF: sub_6F1058E0+CD9j
					; DATA XREF: .rdata:off_6F111D3Co
		mov	edx, 6Ch	; jumptable 6F1065B9 case 1
		mov	eax, ebx
		call	sub_6F103350
		xchg	ax, ax
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F1065F5:				; CODE XREF: sub_6F1058E0+CD9j
					; DATA XREF: .rdata:off_6F111D3Co
		mov	edx, 75h	; jumptable 6F1065B9 case 0
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F106606:				; CODE XREF: sub_6F1058E0+CD9j
					; DATA XREF: .rdata:off_6F111D3Co
		mov	edx, offset aUll ; jumptable 6F1065B9 case 4
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F106617:				; CODE XREF: sub_6F1058E0+92Fj
		mov	dword ptr [ebx+11Ch], 1
		jmp	loc_6F10591B	; jumptable 6F105948 default case
; ---------------------------------------------------------------------------

loc_6F106626:				; CODE XREF: sub_6F1058E0+373j
					; sub_6F1058E0+38Dj
		mov	ecx, [esp+9Ch+var_74]
		mov	[ebx+118h], ecx
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F106635:				; CODE XREF: sub_6F1058E0+906j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F1061EC
; ---------------------------------------------------------------------------

loc_6F106646:				; CODE XREF: sub_6F1058E0+8E3j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F1061C9
; ---------------------------------------------------------------------------

loc_6F106657:				; CODE XREF: sub_6F1058E0+873j
		mov	edx, 2Dh
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F106159
; ---------------------------------------------------------------------------

loc_6F106668:				; CODE XREF: sub_6F1058E0+550j
		mov	eax, ebx
		mov	edx, 5Bh
		call	sub_6F103350
		mov	eax, [ebp+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, 5Dh
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F105E59
; ---------------------------------------------------------------------------

loc_6F106692:				; CODE XREF: sub_6F1058E0+526j
		mov	edx, [edx+4]
		cmp	dword ptr [edx+8], 1
		jnz	loc_6F105E0C
		mov	edx, [edx+4]
		cmp	byte ptr [edx],	3Eh
		jnz	loc_6F105E0C
		mov	eax, ebx
		mov	edx, 28h
		call	sub_6F103350
		mov	eax, [ebp+8]
		jmp	loc_6F105E0C
; ---------------------------------------------------------------------------
		align 10h

loc_6F1066C0:				; CODE XREF: sub_6F1058E0+B06j
		mov	esi, [esp+9Ch+var_7C]
		jmp	loc_6F105A87
; ---------------------------------------------------------------------------

loc_6F1066C9:				; CODE XREF: sub_6F1058E0+8CFj
		mov	esi, [edx+4]
		mov	edi, offset aJarray ; "JArray"
		mov	ecx, 6
		repe cmpsb
		jnz	loc_6F1061B5
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	edx, offset asc_6F111A9E ; "[]"
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F1061F8
; ---------------------------------------------------------------------------

loc_6F1066F9:				; CODE XREF: sub_6F1058E0+C3Fj
					; sub_6F1058E0+C50j
		test	edx, edx
		jz	loc_6F10591B	; jumptable 6F105948 default case
		test	eax, eax
		jnz	loc_6F10591B	; jumptable 6F105948 default case
		mov	edx, [edx+4]
		test	edx, edx
		xchg	ax, ax
		jnz	loc_6F1064C6
		jmp	loc_6F10591B	; jumptable 6F105948 default case
; ---------------------------------------------------------------------------

loc_6F10671B:				; CODE XREF: sub_6F1058E0+566j
		mov	eax, ebx
		lea	esi, [esi+0]
		call	sub_6F106EB0
		jmp	loc_6F105E4C
; ---------------------------------------------------------------------------

loc_6F10672A:				; CODE XREF: sub_6F1058E0+5F9j
					; sub_6F1058E0+60Ej
		mov	edi, 1
		nop
		jmp	loc_6F105F63
; ---------------------------------------------------------------------------

loc_6F106735:				; CODE XREF: sub_6F1058E0+29Cj
		mov	ecx, [esp+9Ch+var_78]
		lea	eax, [esp+9Ch+var_24]
		mov	[ebx+114h], eax
		mov	[esp+9Ch+var_20], esi
		mov	[esp+9Ch+var_24], ecx
		jmp	loc_6F105C3E
; ---------------------------------------------------------------------------

loc_6F106750:				; CODE XREF: sub_6F1058E0+36Bj
		mov	eax, [esp+9Ch+var_24]
		mov	[ebx+114h], eax
		jmp	loc_6F105C51
; ---------------------------------------------------------------------------

loc_6F10675F:				; CODE XREF: sub_6F1058E0+104j
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6F106F90
		mov	edx, offset a___ ; "..."
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
; ---------------------------------------------------------------------------

loc_6F10677A:				; CODE XREF: sub_6F1058E0+B34j
		cmp	ebp, edi
		mov	ecx, esi
		mov	esi, [esp+9Ch+var_7C]
		jnb	loc_6F105A87
		cmp	ecx, 0FFh
		xchg	ax, ax
		ja	loc_6F105A87
		cmp	al, 5Fh
		jnz	loc_6F105A87
		movsx	edx, cl
		mov	eax, ebx
		call	sub_6F103350
		lea	esi, [ebp+1]
		jmp	loc_6F105A91
; ---------------------------------------------------------------------------

loc_6F1067B0:				; CODE XREF: sub_6F1058E0+247j
		mov	edi, 1
		jmp	loc_6F105B79
; ---------------------------------------------------------------------------

loc_6F1067BA:				; CODE XREF: sub_6F1058E0+CC0j
		mov	edx, 2Dh
		mov	eax, ebx
		call	sub_6F103350
		mov	edx, [ebp+8]
		jmp	loc_6F1065A6
; ---------------------------------------------------------------------------

loc_6F1067CE:				; CODE XREF: sub_6F1058E0+C8Dj
		mov	edx, offset aFalse ; "false"
		mov	eax, ebx
		call	sub_6F1050B0
		jmp	loc_6F105925	; jumptable 6F1065B9 default case
sub_6F1058E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F1067E0	proc near		; CODE XREF: .text:6F106AA8p
					; sub_6F106AC0+64p

var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_174		= dword	ptr -174h
var_170		= byte ptr -170h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 18Ch
		mov	[ebp+var_17C], edx
		mov	[ebp+var_180], ecx
		cmp	byte ptr [eax],	5Fh
		jz	loc_6F1069B0

loc_6F106803:				; CODE XREF: sub_6F1067E0+1D9j
		mov	edi, offset a_global_ ;	"_GLOBAL_"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_6F106840
		movzx	eax, byte ptr [ebx+8]
		cmp	al, 5Fh
		jz	short loc_6F106823
		cmp	al, 2Eh
		jnz	loc_6F1069A0

loc_6F106823:				; CODE XREF: sub_6F1067E0+39j
					; sub_6F1067E0+1C8j
		movzx	eax, byte ptr [ebx+9]
		cmp	al, 49h
		setz	dl
		jz	short loc_6F106832
		cmp	al, 44h
		jnz	short loc_6F106840

loc_6F106832:				; CODE XREF: sub_6F1067E0+4Cj
		cmp	byte ptr [ebx+0Ah], 5Fh
		jz	loc_6F106A66
		lea	esi, [esi+0]

loc_6F106840:				; CODE XREF: sub_6F1067E0+31j
					; sub_6F1067E0+50j ...
		xor	esi, esi
		xor	eax, eax
		test	byte ptr [ebp+var_17C],	10h
		jz	loc_6F106992

loc_6F106851:				; CODE XREF: sub_6F1067E0+1E0j
					; sub_6F1067E0+291j
		mov	[esp], ebx	; char *
		mov	edi, esp
		call	strlen
		mov	[ebp+var_4C], ebx
		mov	[ebp+var_40], ebx
		mov	[ebp+var_38], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_24], 0
		lea	edx, [ebx+eax]
		mov	[ebp+var_48], edx
		mov	edx, [ebp+var_17C]
		lea	ecx, ds:0[eax*4]
		mov	[ebp+var_28], eax
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_44], edx
		lea	edx, [eax+eax]
		mov	[ebp+var_34], edx
		lea	edx, [ecx+edx]
		lea	eax, ds:1Eh[edx*4]
		and	eax, 0FFFFFFF0h
		call	sub_6F108430
		lea	edx, [esp+1Bh]
		lea	eax, [ecx+1Eh]
		and	edx, 0FFFFFFF0h
		and	eax, 0FFFFFFF0h
		call	sub_6F108430
		lea	eax, [esp+1Bh]
		and	eax, 0FFFFFFF0h
		cmp	esi, 1
		mov	[ebp+var_3C], edx
		mov	[ebp+var_30], eax
		jz	loc_6F106A25
		jnb	loc_6F1069C5

loc_6F1068E3:				; CODE XREF: sub_6F1067E0+1E8j
		lea	eax, [ebp+var_4C]
		call	sub_6F103890
		mov	edx, eax

loc_6F1068ED:				; CODE XREF: sub_6F1067E0+240j
					; sub_6F1067E0+24Cj ...
		test	byte ptr [ebp+var_17C],	1
		jz	short loc_6F106902
		mov	eax, [ebp+var_40]
		cmp	byte ptr [eax],	0
		jnz	loc_6F106A31

loc_6F106902:				; CODE XREF: sub_6F1067E0+114j
		test	edx, edx
		jz	loc_6F106A31
		mov	eax, [ebp+var_17C]
		mov	[ebp+var_70], 0
		mov	[ebp+var_6C], 0
		mov	[ebp+var_60], 0
		mov	[ebp+var_174], eax
		mov	eax, [ebp+var_180]
		mov	[ebp+var_5C], 0
		mov	[ebp+var_50], 0
		mov	[ebp+var_58], 0
		mov	[ebp+var_68], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_64], eax
		lea	eax, [ebp+var_174]
		call	sub_6F1058E0
		mov	eax, [ebp+var_70]
		mov	[ebp+eax+var_170], 0
		mov	eax, [ebp+var_64]
		mov	[esp+8], eax
		mov	eax, [ebp+var_70]
		mov	[esp+4], eax
		lea	eax, [ebp+var_170]
		mov	[esp], eax
		call	[ebp+var_68]
		xor	eax, eax
		add	[ebp+var_50], 1
		cmp	[ebp+var_58], 0
		mov	[ebp+var_70], 0
		mov	esp, edi
		setz	al

loc_6F106992:				; CODE XREF: sub_6F1067E0+6Bj
					; sub_6F1067E0+255j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F1069A0:				; CODE XREF: sub_6F1067E0+3Dj
		cmp	al, 24h
		jnz	loc_6F106840
		jmp	loc_6F106823
; ---------------------------------------------------------------------------
		align 10h

loc_6F1069B0:				; CODE XREF: sub_6F1067E0+1Dj
		cmp	byte ptr [eax+1], 5Ah
		mov	esi, 1
		jnz	loc_6F106803
		nop
		jmp	loc_6F106851
; ---------------------------------------------------------------------------

loc_6F1069C5:				; CODE XREF: sub_6F1067E0+FDj
		cmp	esi, 3
		ja	loc_6F1068E3
		add	ebx, 0Bh
		mov	[ebp+var_40], ebx
		mov	[esp], ebx	; char *
		call	strlen
		mov	edx, ebx
		mov	ecx, eax
		lea	eax, [ebp+var_4C]
		call	sub_6F102F80
		xor	edx, edx
		cmp	esi, 2
		setnz	dl
		add	edx, 3Ah
		mov	dword ptr [esp], 0
		mov	ecx, eax
		lea	eax, [ebp+var_4C]
		call	sub_6F102F00
		mov	ebx, [ebp+var_40]
		mov	[esp], ebx	; char *
		mov	[ebp+var_184], eax
		call	strlen
		mov	edx, [ebp+var_184]
		add	ebx, eax
		mov	[ebp+var_40], ebx
		jmp	loc_6F1068ED
; ---------------------------------------------------------------------------

loc_6F106A25:				; CODE XREF: sub_6F1067E0+F7j
		cmp	byte ptr [ebx],	5Fh
		jz	short loc_6F106A40

loc_6F106A2A:				; CODE XREF: sub_6F1067E0+26Aj
		xor	edx, edx
		jmp	loc_6F1068ED
; ---------------------------------------------------------------------------

loc_6F106A31:				; CODE XREF: sub_6F1067E0+11Cj
					; sub_6F1067E0+124j
		xor	eax, eax
		mov	esp, edi
		jmp	loc_6F106992
; ---------------------------------------------------------------------------
		align 10h

loc_6F106A40:				; CODE XREF: sub_6F1067E0+248j
		lea	eax, [ebx+1]
		mov	[ebp+var_40], eax
		cmp	byte ptr [ebx+1], 5Ah
		jnz	short loc_6F106A2A
		mov	edx, 1
		add	ebx, 2
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_40], ebx
		call	sub_6F104930
		mov	edx, eax
		jmp	loc_6F1068ED
; ---------------------------------------------------------------------------

loc_6F106A66:				; CODE XREF: sub_6F1067E0+56j
		mov	esi, edx
		shl	esi, 1Fh
		sar	esi, 1Fh
		add	esi, 3
		jmp	loc_6F106851
sub_6F1067E0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	ecx, [esp+24h]
		mov	eax, [esp+20h]
		test	ecx, ecx
		jnz	short loc_6F106A98

loc_6F106A8F:				; CODE XREF: .text:6F106A9Aj
		mov	eax, 0FFFFFFFDh

loc_6F106A94:				; CODE XREF: .text:6F106AB5j
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6F106A98:				; CODE XREF: .text:6F106A8Dj
		test	eax, eax
		jz	short loc_6F106A8F
		mov	edx, [esp+28h]
		mov	[esp], edx
		mov	edx, 11h
		call	sub_6F1067E0
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		jmp	short loc_6F106A94
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F106AC0(int,	char *,	int, int)
sub_6F106AC0	proc near		; CODE XREF: sub_6F109590+B5p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_10], ebx
		mov	ebx, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_8], edi
		mov	edi, [esp+4Ch+arg_C]
		test	eax, eax
		mov	[esp+4Ch+var_4], ebp
		jz	loc_6F106BBA
		test	ebx, ebx
		jz	loc_6F106BB2

loc_6F106AF3:				; CODE XREF: sub_6F106AC0+F4j
		lea	edx, [esp+4Ch+var_2C]
		mov	ecx, offset sub_6F104F20
		mov	[esp+4Ch+var_4C], edx
		mov	edx, 11h
		mov	[esp+4Ch+var_2C], 0
		mov	[esp+4Ch+var_28], 0
		mov	[esp+4Ch+var_24], 0
		mov	[esp+4Ch+var_20], 0
		call	sub_6F1067E0
		test	eax, eax
		jz	loc_6F106BC2
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_30], 1
		test	edx, edx
		jz	short loc_6F106BA8

loc_6F106B41:				; CODE XREF: sub_6F106AC0+F0j
		mov	ebp, [esp+4Ch+var_2C]
		test	ebp, ebp
		jz	loc_6F106BD6
		test	esi, esi
		jz	loc_6F106C00
		mov	[esp+4Ch+var_4C], ebp ;	char *
		call	strlen
		cmp	eax, [ebx]
		nop
		jb	short loc_6F106B90
		mov	[esp+4Ch+var_4C], esi ;	void *
		call	free

loc_6F106B6A:				; CODE XREF: sub_6F106AC0+142j
		mov	eax, [esp+4Ch+var_30]
		mov	[ebx], eax

loc_6F106B70:				; CODE XREF: sub_6F106AC0+E6j
					; sub_6F106AC0+148j
		test	edi, edi
		jz	short loc_6F106B7A
		mov	dword ptr [edi], 0

loc_6F106B7A:				; CODE XREF: sub_6F106AC0+B2j
					; sub_6F106AC0+100j ...
		mov	eax, ebp
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6F106B90:				; CODE XREF: sub_6F106AC0+A0j
		mov	[esp+4Ch+var_48], ebp ;	char *
		mov	[esp+4Ch+var_4C], esi ;	char *
		call	strcpy
		mov	[esp+4Ch+var_4C], ebp ;	void *
		mov	ebp, esi
		call	free
		jmp	short loc_6F106B70
; ---------------------------------------------------------------------------

loc_6F106BA8:				; CODE XREF: sub_6F106AC0+7Fj
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_30], eax
		jmp	short loc_6F106B41
; ---------------------------------------------------------------------------

loc_6F106BB2:				; CODE XREF: sub_6F106AC0+2Dj
		test	esi, esi
		jz	loc_6F106AF3

loc_6F106BBA:				; CODE XREF: sub_6F106AC0+25j
		test	edi, edi
		jnz	short loc_6F106BF0

loc_6F106BBE:				; CODE XREF: sub_6F106AC0+118j
		xor	ebp, ebp
		jmp	short loc_6F106B7A
; ---------------------------------------------------------------------------

loc_6F106BC2:				; CODE XREF: sub_6F106AC0+6Bj
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax ;	void *
		call	free
		mov	[esp+4Ch+var_30], 0

loc_6F106BD6:				; CODE XREF: sub_6F106AC0+87j
		test	edi, edi
		jz	short loc_6F106BBE
		cmp	[esp+4Ch+var_30], 1
		jz	short loc_6F106C0D
		mov	dword ptr [edi], 0FFFFFFFEh
		xor	ebp, ebp
		jmp	short loc_6F106B7A
; ---------------------------------------------------------------------------
		align 10h

loc_6F106BF0:				; CODE XREF: sub_6F106AC0+FCj
		mov	dword ptr [edi], 0FFFFFFFDh
		xor	ebp, ebp
		jmp	loc_6F106B7A
; ---------------------------------------------------------------------------
		align 10h

loc_6F106C00:				; CODE XREF: sub_6F106AC0+8Fj
		test	ebx, ebx
		jnz	loc_6F106B6A
		jmp	loc_6F106B70
; ---------------------------------------------------------------------------

loc_6F106C0D:				; CODE XREF: sub_6F106AC0+11Fj
		mov	dword ptr [edi], 0FFFFFFFFh
		xor	ebp, ebp
		jmp	loc_6F106B7A
sub_6F106AC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F106C20	proc near		; CODE XREF: sub_6F105480+40p
					; sub_6F1058E0+3ADp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], ebx
		mov	ebx, edx
		mov	[esp+0Ch+var_4], esi
		mov	esi, eax
		mov	eax, [edx]
		sub	eax, 3
		cmp	eax, 24h	; switch 37 cases
		jbe	short loc_6F106C50

loc_6F106C39:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, ebx	; jumptable 6F106C50 default case

loc_6F106C3B:				; CODE XREF: sub_6F106C20+3Aj
					; sub_6F106C20+76j
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6F1058E0
; ---------------------------------------------------------------------------
		align 10h

loc_6F106C50:				; CODE XREF: sub_6F106C20+17j
		jmp	ds:off_6F111D84[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F106C57:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, [edx+4]	; jumptable 6F106C50 case 0
		jmp	short loc_6F106C3B
; ---------------------------------------------------------------------------
		align 10h

loc_6F106C60:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, offset aRestrict ;	jumptable 6F106C50 cases 20,23

loc_6F106C65:				; CODE XREF: sub_6F106C20+5Cj
					; sub_6F106C20+65j ...
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6F1050B0
; ---------------------------------------------------------------------------

loc_6F106C77:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, offset aVolatile ;	jumptable 6F106C50 cases 21,24
		jmp	short loc_6F106C65
; ---------------------------------------------------------------------------
		align 10h

loc_6F106C80:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, offset aConst ; jumptable 6F106C50	cases 22,25
		jmp	short loc_6F106C65
; ---------------------------------------------------------------------------

loc_6F106C87:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, 20h	; jumptable 6F106C50 case 26
		mov	eax, esi
		call	sub_6F103350
		mov	edx, [ebx+8]
		jmp	short loc_6F106C3B
; ---------------------------------------------------------------------------

loc_6F106C98:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		test	byte ptr [esi],	4 ; jumptable 6F106C50 case 27
		mov	edx, 2Ah
		jz	short loc_6F106CB5
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F106CB0:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, 26h	; jumptable 6F106C50 case 28

loc_6F106CB5:				; CODE XREF: sub_6F106C20+80j
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6F103350
; ---------------------------------------------------------------------------

loc_6F106CC7:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, offset asc_6F111D6B ; jumptable 6F106C50 case 29
		jmp	short loc_6F106C65
; ---------------------------------------------------------------------------
		align 10h

loc_6F106CD0:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, offset aComplex ; jumptable 6F106C50 case 30
		jmp	short loc_6F106C65
; ---------------------------------------------------------------------------

loc_6F106CD7:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		mov	edx, offset aImaginary ; jumptable 6F106C50 case 31
		jmp	short loc_6F106C65
; ---------------------------------------------------------------------------
		align 10h

loc_6F106CE0:				; CODE XREF: sub_6F106C20:loc_6F106C50j
					; DATA XREF: .rdata:off_6F111D84o
		cmp	byte ptr [esi+108h], 28h ; jumptable 6F106C50 case 36
		jz	short loc_6F106CF5
		mov	edx, 20h
		mov	eax, esi
		call	sub_6F103350

loc_6F106CF5:				; CODE XREF: sub_6F106C20+C7j
		mov	edx, [ebx+4]
		mov	eax, esi
		call	sub_6F1058E0
		mov	edx, offset asc_6F111B98 ; "::*"
		jmp	loc_6F106C65
sub_6F106C20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F106D10	proc near		; CODE XREF: sub_6F1058E0+4E6p
					; sub_6F1058E0+BADp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_8], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], edi
		mov	edx, [edx+4]
		cmp	dword ptr [edx], 4
		jz	short loc_6F106D40
		call	sub_6F1058E0
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6F106D40:				; CODE XREF: sub_6F106D10+19j
		mov	edi, [eax+118h]
		mov	dword ptr [eax+118h], 0
		mov	eax, [eax+114h]
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[ebx+114h], eax
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_10], eax
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6F1058E0
		mov	eax, [esp+2Ch+var_14]
		cmp	byte ptr [ebx+108h], 3Ch
		mov	[ebx+114h], eax
		jz	loc_6F106E84

loc_6F106D8C:				; CODE XREF: sub_6F106D10+180j
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6F106E00

loc_6F106D9C:				; CODE XREF: sub_6F106D10+12Dj
		mov	byte ptr [ebx+eax+4], 3Ch
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 3Ch
		mov	eax, [esi+4]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6F1058E0
		cmp	byte ptr [ebx+108h], 3Eh
		jz	loc_6F106E95

loc_6F106DC8:				; CODE XREF: sub_6F106D10+191j
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6F106E42

loc_6F106DD8:				; CODE XREF: sub_6F106D10+16Fj
		mov	byte ptr [ebx+eax+4], 3Eh
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 3Eh
		mov	[ebx+118h], edi
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6F106E00:				; CODE XREF: sub_6F106D10+8Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F106D9C
; ---------------------------------------------------------------------------

loc_6F106E42:				; CODE XREF: sub_6F106D10+C6j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F106DD8
; ---------------------------------------------------------------------------

loc_6F106E84:				; CODE XREF: sub_6F106D10+76j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F106D8C
; ---------------------------------------------------------------------------

loc_6F106E95:				; CODE XREF: sub_6F106D10+B2j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6F103350
		jmp	loc_6F106DC8
sub_6F106D10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F106EB0	proc near		; CODE XREF: sub_6F1058E0+500p
					; sub_6F1058E0+991p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		cmp	dword ptr [edx], 2Bh
		jz	short loc_6F106EE0
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6F1058E0
; ---------------------------------------------------------------------------

loc_6F106EE0:				; CODE XREF: sub_6F106EB0+16j
		mov	edx, [edx+4]
		mov	edi, [edx+8]
		mov	ebp, [edx+4]
		test	edi, edi
		jz	loc_6F106F78
		lea	ecx, [eax+4]
		mov	edx, [eax+104h]
		xor	ebx, ebx
		mov	[esp+3Ch+var_20], ecx
		mov	esi, eax
		jmp	short loc_6F106F1D
; ---------------------------------------------------------------------------

loc_6F106F04:				; CODE XREF: sub_6F106EB0+7Bj
					; sub_6F106EB0+C6j
		add	ebx, 1
		cmp	edi, ebx
		mov	[esi+edx+4], al
		mov	[esi+104h], ecx
		mov	[esi+108h], al
		jbe	short loc_6F106F78
		mov	edx, ecx

loc_6F106F1D:				; CODE XREF: sub_6F106EB0+52j
		cmp	edx, 0FFh
		movzx	eax, byte ptr [ebp+ebx+0]
		lea	ecx, [edx+1]
		jnz	short loc_6F106F04
		mov	edx, [esi+110h]
		mov	byte ptr [esi+103h], 0
		mov	[esp+3Ch+var_24], al
		mov	[esp+3Ch+var_34], edx
		mov	edx, [esi+104h]
		mov	[esp+3Ch+var_38], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [esi+10Ch]
		mov	ecx, 1
		xor	edx, edx
		mov	dword ptr [esi+104h], 0
		movzx	eax, [esp+3Ch+var_24]
		add	dword ptr [esi+124h], 1
		jmp	short loc_6F106F04
; ---------------------------------------------------------------------------

loc_6F106F78:				; CODE XREF: sub_6F106EB0+3Bj
					; sub_6F106EB0+69j
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
sub_6F106EB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F106F90	proc near		; CODE XREF: sub_6F1058E0+50Ap
					; sub_6F1058E0+536p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, eax
		sub	esp, 28h
		mov	eax, [edx]
		cmp	eax, 6
		jz	short loc_6F106FA1
		test	eax, eax
		jnz	short loc_6F106FB0

loc_6F106FA1:				; CODE XREF: sub_6F106F90+Bj
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	sub_6F1058E0
; ---------------------------------------------------------------------------
		align 10h

loc_6F106FB0:				; CODE XREF: sub_6F106F90+Fj
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	ecx, [eax+1]
		jz	short loc_6F107000

loc_6F106FC0:				; CODE XREF: sub_6F106F90+B5j
		mov	byte ptr [ebx+eax+4], 28h
		mov	eax, ebx
		mov	[ebx+104h], ecx
		mov	byte ptr [ebx+108h], 28h
		call	sub_6F1058E0
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6F107050

loc_6F106FE9:				; CODE XREF: sub_6F106F90+FDj
		mov	byte ptr [ebx+eax+4], 29h
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 29h
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F107000:				; CODE XREF: sub_6F106F90+2Ej
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	ecx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F106FC0
; ---------------------------------------------------------------------------
		align 10h

loc_6F107050:				; CODE XREF: sub_6F106F90+57j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6F106FE9
sub_6F106F90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F1070A0(_onexit_t)
sub_6F1070A0	proc near		; CODE XREF: sub_6F107160+Ap

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_6F1133AC
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6F107260
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_10], eax
		jz	loc_6F107140
		mov	[esp+2Ch+var_2C], 8
		call	_lock
		mov	eax, ds:dword_6F1133AC
		mov	[esp+2Ch+var_2C], eax
		call	sub_6F107260
		mov	[esp+2Ch+var_10], eax
		mov	eax, ds:dword_6F1133A8
		mov	[esp+2Ch+var_2C], eax
		call	sub_6F107260
		mov	[esp+2Ch+var_2C], ebx
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6F107270
		mov	ds:dword_6F1133AC, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6F107270
		mov	[esp+2Ch+var_2C], 8
		mov	ds:dword_6F1133A8, eax
		call	_unlock
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107140:				; CODE XREF: sub_6F1070A0+1Cj
		mov	[esp+2Ch+var_2C], ebx ;	_onexit_t
		call	ds:_onexit
		add	esp, 28h
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_6F1070A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F107160(_onexit_t)
sub_6F107160	proc near		; CODE XREF: sub_6F107740-2Fp
					; sub_6F108630+12p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_6F1070A0
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_6F107160	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:6F11701Co

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_6F1071B0
		cmp	eax, 3
		jz	short loc_6F1071B0
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6F1071B0:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_6F107960
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_6F101040+117p
					; DATA XREF: .rdata:off_6F1128A0o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_6F10C01C,	2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_6F1071FB
		mov	dword_6F10C01C,	2

loc_6F1071FB:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_6F107211
		cmp	eax, 1
		jz	short loc_6F107240

loc_6F107205:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6F107211:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_6F117028
		cmp	ebx, offset dword_6F117028
		jz	short loc_6F107205
		xchg	ax, ax

loc_6F107220:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_6F107228
		call	eax

loc_6F107228:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_6F117028
		jnz	short loc_6F107220
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6F107240:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6F107960
		jmp	short loc_6F107205
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107260	proc near		; CODE XREF: sub_6F101040+138p
					; sub_6F101040+14Bp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6F107260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107270	proc near		; CODE XREF: sub_6F101000+15p
					; sub_6F1070A0+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6F107270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_6F107280(char	*, char)
sub_6F107280	proc near		; CODE XREF: sub_6F1072E0+131p
					; sub_6F1072E0+141p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+var_14], 1Bh ;	size_t
		lea	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], 1 ; size_t
		mov	[esp+1Ch+var_1C], offset aMingwW64Runtim ; "Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+var_10], eax ;	FILE *
		call	fwrite
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], ebx ;	va_list
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+var_1C], eax ;	FILE *
		call	vfprintf
		call	abort
sub_6F107280	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6F1072E0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_6F1072E0(size_t)
sub_6F1072E0	proc near		; CODE XREF: .text:6F1072D1j
					; sub_6F107430+12Ap ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+5Ch+var_40], edx
		jnz	short loc_6F107300
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107300:				; CODE XREF: sub_6F1072E0+11j
		mov	ecx, ds:dword_6F11301C
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_6F107330
		mov	eax, ds:dword_6F113018

loc_6F107311:				; CODE XREF: sub_6F1072E0+4Ej
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_6F107326
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_6F1073A9

loc_6F107326:				; CODE XREF: sub_6F1072E0+36j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_6F107311

loc_6F107330:				; CODE XREF: sub_6F1072E0+2Aj
		mov	[esp+5Ch+lpAddress], ebx
		call	sub_6F107B80
		test	eax, eax
		mov	ebp, eax
		jz	loc_6F107416
		lea	edx, [esi+esi*2]
		mov	esi, ds:dword_6F113018
		shl	edx, 2
		mov	[esp+5Ch+var_44], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	sub_6F107CA0
		mov	edx, [esp+5Ch+var_44]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	eax, ds:dword_6F113018
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+5Ch+var_44]
		jz	short loc_6F1073F6
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_6F1073C5

loc_6F1073A2:				; CODE XREF: sub_6F1072E0+E8j
					; sub_6F1072E0+114j
		add	ds:dword_6F11301C, 1

loc_6F1073A9:				; CODE XREF: sub_6F1072E0+40j
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+dwLength], edi	; size_t
		mov	[esp+5Ch+lpAddress], ebx ; void	*
		mov	[esp+5Ch+lpBuffer], eax	; void *
		call	memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F1073C5:				; CODE XREF: sub_6F1072E0+C0j
		cmp	eax, 40h
		jz	short loc_6F1073A2
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		add	edx, ds:dword_6F113018
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpflOldProtect], edx ;	lpflOldProtect
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6F1073A2
; ---------------------------------------------------------------------------

loc_6F1073F6:				; CODE XREF: sub_6F1072E0+B7j
		mov	eax, ds:dword_6F113018
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ebp+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; char
		call	sub_6F107280
; ---------------------------------------------------------------------------

loc_6F107416:				; CODE XREF: sub_6F1072E0+5Cj
		mov	[esp+5Ch+lpBuffer], ebx	; char
		mov	[esp+5Ch+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_6F107280
sub_6F1072E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F107430	proc near		; CODE XREF: sub_6F101260+30p
					; sub_6F101260:loc_6F1012E8p

Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_6F113020
		test	ebx, ebx
		jz	short loc_6F107450

loc_6F107443:				; CODE XREF: sub_6F107430+64j
					; sub_6F107430+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107450:				; CODE XREF: sub_6F107430+11j
		mov	ds:dword_6F113020, 1
		call	sub_6F107BF0
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_6F108430
		mov	ds:dword_6F11301C, 0
		lea	eax, [esp+1Fh]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_6F113018, eax
		mov	eax, offset dword_6F112F80
		sub	eax, offset dword_6F112F80
		cmp	eax, 7
		jle	short loc_6F107443
		cmp	eax, 0Bh
		mov	ebx, offset dword_6F112F80
		jle	short loc_6F1074C2
		mov	ecx, ds:dword_6F112F80
		test	ecx, ecx
		jnz	short loc_6F1074C2
		mov	edx, ds:dword_6F112F84
		test	edx, edx
		jnz	short loc_6F1074C2
		mov	eax, ds:dword_6F112F88
		test	eax, eax
		jnz	short loc_6F1074C2
		mov	ebx, offset dword_6F112F8C

loc_6F1074C2:				; CODE XREF: sub_6F107430+6Ej
					; sub_6F107430+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_6F107530
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_6F107530
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_6F107693
		add	ebx, 0Ch
		cmp	ebx, offset dword_6F112F80
		jnb	loc_6F107443
		mov	esi, 6F100000h

loc_6F1074EF:				; CODE XREF: sub_6F107430+217j
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_6F1075ED
		cmp	edx, 20h
		jz	loc_6F10762A
		cmp	edx, 8
		jz	loc_6F10760C
		mov	[ebp+var_1C], 0
		mov	[esp+4], edx	; char
		mov	dword ptr [esp], offset	aUnknownPseudoR	; "  Unknown pseudo relocation bit size	%d"...
		call	sub_6F107280
; ---------------------------------------------------------------------------

loc_6F107530:				; CODE XREF: sub_6F107430+96j
					; sub_6F107430+9Dj
		cmp	ebx, offset dword_6F112F80
		jnb	loc_6F107443
		mov	esi, 6F100000h
		lea	edi, [ebp+flOldProtect]

loc_6F107544:				; CODE XREF: sub_6F107430+135j
		mov	eax, [ebx+4]
		mov	ecx, 4		; size_t
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	sub_6F1072E0
		cmp	ebx, offset dword_6F112F80
		jb	short loc_6F107544

loc_6F107567:				; CODE XREF: sub_6F107430+21Dj
		mov	ecx, ds:dword_6F11301C
		test	ecx, ecx
		jle	loc_6F107443
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_6F107592
; ---------------------------------------------------------------------------
		align 10h

loc_6F107580:				; CODE XREF: sub_6F107430+16Dj
					; sub_6F107430+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:dword_6F11301C
		jge	loc_6F107443

loc_6F107592:				; CODE XREF: sub_6F107430+14Cj
		mov	eax, ds:dword_6F113018
		add	eax, ebx
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6F107580
		lea	edx, [ebp+Buffer]
		mov	dword ptr [esp+8], 1Ch ; dwLength
		mov	[esp+4], edx	; lpBuffer
		mov	eax, [eax+4]
		mov	[esp], eax	; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_6F107670
		mov	eax, ds:dword_6F113018
		mov	[esp+0Ch], edi	; lpflOldProtect
		mov	eax, [eax+ebx]
		mov	[esp+8], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+4], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp], eax	; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6F107580
; ---------------------------------------------------------------------------

loc_6F1075ED:				; CODE XREF: sub_6F107430+D1j
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_6F107661
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6F1075FD:				; CODE XREF: sub_6F107430+23Ej
		mov	ecx, 2		; size_t
		lea	edx, [ebp+var_1C]
		call	sub_6F1072E0
		jmp	short loc_6F10763E
; ---------------------------------------------------------------------------

loc_6F10760C:				; CODE XREF: sub_6F107430+E3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_6F107652
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6F10761B:				; CODE XREF: sub_6F107430+22Fj
		mov	ecx, 1		; size_t
		lea	edx, [ebp+var_1C]
		call	sub_6F1072E0
		jmp	short loc_6F10763E
; ---------------------------------------------------------------------------

loc_6F10762A:				; CODE XREF: sub_6F107430+DAj
		add	edi, [eax]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4		; size_t
		mov	[ebp+var_1C], edi
		call	sub_6F1072E0

loc_6F10763E:				; CODE XREF: sub_6F107430+1DAj
					; sub_6F107430+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset dword_6F112F80
		jb	loc_6F1074EF
		jmp	loc_6F107567
; ---------------------------------------------------------------------------

loc_6F107652:				; CODE XREF: sub_6F107430+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6F10761B
; ---------------------------------------------------------------------------

loc_6F107661:				; CODE XREF: sub_6F107430+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6F1075FD
; ---------------------------------------------------------------------------

loc_6F107670:				; CODE XREF: sub_6F107430+18Fj
		add	ebx, ds:dword_6F113018
		mov	eax, [ebx+4]
		mov	[esp+8], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	dword ptr [esp], offset	aVirtualqueryFa	; "  VirtualQuery failed for %d	bytes at a"...
		mov	[esp+4], eax	; char
		call	sub_6F107280
; ---------------------------------------------------------------------------

loc_6F107693:				; CODE XREF: sub_6F107430+A5j
		mov	[esp+4], eax	; char
		mov	dword ptr [esp], offset	aUnknownPseud_0	; "  Unknown pseudo relocation protocol	ve"...
		call	sub_6F107280
sub_6F107430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F1076B0()
sub_6F1076B0	proc near		; DATA XREF: sub_6F107740:loc_6F10770Ao
		sub	esp, 0Ch
		mov	eax, off_6F10C018
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6F1076D7
		xchg	ax, ax

loc_6F1076C0:				; CODE XREF: sub_6F1076B0+25j
		call	eax
		mov	eax, off_6F10C018
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_6F10C018, edx
		test	eax, eax
		jnz	short loc_6F1076C0

loc_6F1076D7:				; CODE XREF: sub_6F1076B0+Cj
		add	esp, 0Ch
		retn
sub_6F1076B0	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6F107740

loc_6F1076E0:				; CODE XREF: sub_6F107740+1Ej
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:dword_6F10BAF0
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_6F107720

loc_6F1076F0:				; CODE XREF: sub_6F107740-Cj
		test	ebx, ebx
		jz	short loc_6F10770A
		lea	esi, dword_6F10BAF0[ebx*4]
		nop
		lea	esi, [esi+0]

loc_6F107700:				; CODE XREF: sub_6F107740-38j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_6F107700

loc_6F10770A:				; CODE XREF: sub_6F107740-4Ej
		mov	[esp+1Ch+var_1C], offset sub_6F1076B0 ;	_onexit_t
		call	sub_6F107160
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_6F107740
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6F107740

loc_6F107720:				; CODE XREF: sub_6F107740-52j
		xor	ebx, ebx
		jmp	short loc_6F107726
; ---------------------------------------------------------------------------

loc_6F107724:				; CODE XREF: sub_6F107740-Ej
		mov	ebx, eax

loc_6F107726:				; CODE XREF: sub_6F107740-1Ej
		lea	eax, [ebx+1]
		mov	edx, ds:dword_6F10BAF0[eax*4]
		test	edx, edx
		jnz	short loc_6F107724
		jmp	short loc_6F1076F0
; END OF FUNCTION CHUNK	FOR sub_6F107740
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107740	proc near		; CODE XREF: sub_6F101260+92p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 6F1076E0 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 6F107720 SIZE 00000016 BYTES

		sub	esp, 0Ch
		mov	ecx, ds:dword_6F113024
		test	ecx, ecx
		jz	short loc_6F107751
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6F107751:				; CODE XREF: sub_6F107740+Bj
		mov	ds:dword_6F113024, 1
		add	esp, 0Ch
		jmp	short loc_6F1076E0
sub_6F107740	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6F107760	proc near		; CODE XREF: sub_6F101260+40p
					; sub_6F101260+A6p ...
		mov	eax, 1
		retn	0Ch
sub_6F107760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107770	proc near		; CODE XREF: sub_6F101260+F1p
					; sub_6F101260+10Bp ...
		mov	eax, 1
		retn	0Ch
sub_6F107770	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_6F113164, edx
		mov	ds:dword_6F113040, 0C0000409h
		mov	ds:dword_6F113044, 1
		mov	ds:dword_6F113158, eax
		mov	ds:dword_6F11304C, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_6F11314C, eax
		mov	eax, dword_6F110A60
		mov	[ebp-10h], eax
		mov	eax, dword_6F110A64
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_6F112974
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107810	proc near		; CODE XREF: DllEntryPoint+34p

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
PerformanceCount= LARGE_INTEGER	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, dword_6F110A60
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_6F107850
		not	eax
		mov	dword_6F110A64,	eax

loc_6F107836:				; CODE XREF: sub_6F107810+BDj
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107850:				; CODE XREF: sub_6F107810+1Dj
		lea	eax, [esp+4Ch+SystemTimeAsFileTime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	[esp+4Ch+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[esp+4Ch+SystemTimeAsFileTime.dwHighDateTime], 0
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	eax, [esp+4Ch+SystemTimeAsFileTime.dwHighDateTime]
		mov	ebp, [esp+4Ch+SystemTimeAsFileTime.dwLowDateTime]
		mov	[esp+4Ch+var_30], eax
		call	ds:GetCurrentProcessId
		mov	edi, eax
		call	ds:GetCurrentThreadId
		mov	esi, eax
		call	ds:GetTickCount
		mov	ebx, eax
		lea	eax, [esp+4Ch+PerformanceCount]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		sub	esp, 4
		xor	ebp, [esp+4Ch+var_30]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount+4]
		xor	ebp, edi
		xor	ebp, esi
		xor	ebp, ebx
		mov	eax, ebp
		cmp	ebp, 0BB40E64Eh
		not	eax
		jz	short loc_6F1078D2

loc_6F1078C2:				; CODE XREF: sub_6F107810+CBj
		mov	dword_6F110A60,	ebp
		mov	dword_6F110A64,	eax
		jmp	loc_6F107836
; ---------------------------------------------------------------------------

loc_6F1078D2:				; CODE XREF: sub_6F107810+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_6F1078C2
sub_6F107810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1078E0	proc near		; CODE XREF: sub_6F107960+13p
					; sub_6F107960:loc_6F107981p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_6F113380
		test	eax, eax
		jnz	short loc_6F1078F8
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F1078F8:				; CODE XREF: sub_6F1078E0+Ej
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	ebx, ds:dword_6F11339C
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_6F107945
		mov	ebp, ds:TlsGetValue
		mov	edi, ds:GetLastError
		xchg	ax, ax

loc_6F107920:				; CODE XREF: sub_6F1078E0+63j
		mov	eax, [ebx]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_6F10793E
		test	esi, esi
		jz	short loc_6F10793E
		mov	eax, [ebx+4]
		mov	[esp+2Ch+lpCriticalSection], esi
		call	eax

loc_6F10793E:				; CODE XREF: sub_6F1078E0+50j
					; sub_6F1078E0+54j
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_6F107920

loc_6F107945:				; CODE XREF: sub_6F1078E0+30j
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6F1078E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107960	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_6F1079B0
		jb	short loc_6F107981
		cmp	eax, 3
		jnz	short loc_6F107978
		call	sub_6F1078E0

loc_6F107978:				; CODE XREF: sub_6F107960+11j
					; sub_6F107960+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6F107981:				; CODE XREF: sub_6F107960+Cj
		call	sub_6F1078E0
		mov	eax, ds:dword_6F113380
		cmp	eax, 1
		jnz	short loc_6F107978
		mov	ds:dword_6F113380, 0
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_6F107978
; ---------------------------------------------------------------------------
		align 10h

loc_6F1079B0:				; CODE XREF: sub_6F107960+Aj
		mov	eax, ds:dword_6F113380
		test	eax, eax
		jz	short loc_6F1079D0

loc_6F1079B9:				; CODE XREF: sub_6F107960+80j
		mov	ds:dword_6F113380, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F1079D0:				; CODE XREF: sub_6F107960+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_6F1079B9
sub_6F107960	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6F1079F0:				; CODE XREF: .text:6F108506j
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_6F113380
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_6F107A08
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F107A08:				; CODE XREF: .text:6F1079FFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6F11339C
		sub	esp, 4
		test	eax, eax
		jz	short loc_6F107A3F
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_6F107A36
		jmp	short loc_6F107A76
; ---------------------------------------------------------------------------
		align 10h

loc_6F107A30:				; CODE XREF: .text:6F107A3Dj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_6F107A56

loc_6F107A36:				; CODE XREF: .text:6F107A25j
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6F107A30

loc_6F107A3F:				; CODE XREF: .text:6F107A1Fj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_6F107A4F:				; CODE XREF: .text:6F107A74j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F107A56:				; CODE XREF: .text:6F107A34j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_6F107A5C:				; CODE XREF: .text:6F107A7Fj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_6F107A4F
; ---------------------------------------------------------------------------

loc_6F107A76:				; CODE XREF: .text:6F107A27j
		mov	edx, [eax+8]
		mov	ds:dword_6F11339C, edx
		jmp	short loc_6F107A5C
; ---------------------------------------------------------------------------
		jmp	short loc_6F107A90
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6F1084D0

loc_6F107A90:				; CODE XREF: .text:6F107A81j
					; sub_6F1084D0+1Aj
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_6F113380
		test	eax, eax
		jnz	short loc_6F107AA2

loc_6F107A9D:				; CODE XREF: sub_6F1084D0-A11j
					; sub_6F1084D0-9D2j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F107AA2:				; CODE XREF: sub_6F1084D0-A35j
		mov	[esp+1Ch+var_18], 0Ch ;	size_t
		mov	[esp+1Ch+var_1C], 1 ; size_t
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_6F107A9D
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], offset CriticalSection ; lpCriticalSection
		mov	[ebx], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6F11339C
		mov	ds:dword_6F11339C, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	[esp+1Ch+var_1C], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_6F107A9D
; END OF FUNCTION CHUNK	FOR sub_6F1084D0
; ---------------------------------------------------------------------------
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_6F107B10

loc_6F107B0B:				; CODE XREF: .text:6F107B19j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107B10:				; CODE XREF: .text:6F107B09j
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_6F107B0B
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		mov	eax, [esp+0Ch]
		mov	ebx, [esp+10h]
		add	eax, [eax+3Ch]
		movzx	esi, word ptr [eax+6]
		movzx	edx, word ptr [eax+14h]
		test	esi, esi
		jz	short loc_6F107B6C
		movzx	edx, dx
		lea	eax, [eax+edx+18h]
		xor	edx, edx
		jmp	short loc_6F107B57
; ---------------------------------------------------------------------------

loc_6F107B54:				; CODE XREF: .text:6F107B6Aj
		add	eax, 28h

loc_6F107B57:				; CODE XREF: .text:6F107B52j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_6F107B65
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6F107B6E

loc_6F107B65:				; CODE XREF: .text:6F107B5Cj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6F107B54

loc_6F107B6C:				; CODE XREF: .text:6F107B47j
		xor	eax, eax

loc_6F107B6E:				; CODE XREF: .text:6F107B63j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6F107B80
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107B80	proc near		; CODE XREF: sub_6F1072E0+53p
					; .text:6F107B71j

arg_0		= dword	ptr  4

		cmp	word ptr ds:6F100000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6F107B92

loc_6F107B8D:				; CODE XREF: sub_6F107B80+27j
					; sub_6F107B80+2Fj ...
		xor	eax, eax

loc_6F107B8F:				; CODE XREF: sub_6F107B80+61j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F107B92:				; CODE XREF: sub_6F107B80+Bj
		mov	eax, ds:6F10003Ch
		cmp	dword ptr [eax+6F100000h], 4550h
		lea	edx, [eax+6F100000h]
		jnz	short loc_6F107B8D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6F107B8D
		mov	ebx, [esp+8+arg_0]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 6F100000h
		test	esi, esi
		jz	short loc_6F107B8D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6F107BD5
; ---------------------------------------------------------------------------

loc_6F107BD2:				; CODE XREF: sub_6F107B80+68j
		add	eax, 28h

loc_6F107BD5:				; CODE XREF: sub_6F107B80+50j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_6F107BE3
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6F107B8F

loc_6F107BE3:				; CODE XREF: sub_6F107B80+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6F107BD2
		jmp	short loc_6F107B8D
sub_6F107B80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107BF0	proc near		; CODE XREF: sub_6F107430+2Ap
		cmp	word ptr ds:6F100000h, 5A4Dh
		jz	short loc_6F107C00

loc_6F107BFB:				; CODE XREF: sub_6F107BF0+25j
					; sub_6F107BF0+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107C00:				; CODE XREF: sub_6F107BF0+9j
		mov	eax, ds:6F10003Ch
		cmp	dword ptr [eax+6F100000h], 4550h
		lea	edx, [eax+6F100000h]
		jnz	short loc_6F107BFB
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6F107BFB
		movzx	eax, word ptr [edx+6]
		retn
sub_6F107BF0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:6F100000h, 5A4Dh
		push	ebx
		mov	edx, [esp+8]
		jz	short loc_6F107C44

loc_6F107C40:				; CODE XREF: .text:6F107C59j
					; .text:6F107C61j ...
		xor	eax, eax

loc_6F107C42:				; CODE XREF: .text:6F107C8Bj
					; .text:6F107C99j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F107C44:				; CODE XREF: .text:6F107C3Ej
		mov	eax, ds:6F10003Ch
		cmp	dword ptr [eax+6F100000h], 4550h
		lea	ecx, [eax+6F100000h]
		jnz	short loc_6F107C40
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6F107C40
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_6F107C40
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
		xor	ecx, ecx
		jmp	short loc_6F107C83
; ---------------------------------------------------------------------------
		align 10h

loc_6F107C80:				; CODE XREF: .text:6F107C95j
		add	eax, 28h

loc_6F107C83:				; CODE XREF: .text:6F107C78j
		test	byte ptr [eax+27h], 20h
		jz	short loc_6F107C90
		test	edx, edx
		jz	short loc_6F107C42
		sub	edx, 1

loc_6F107C90:				; CODE XREF: .text:6F107C87j
		add	ecx, 1
		cmp	ecx, ebx
		jb	short loc_6F107C80
		xor	eax, eax
		jmp	short loc_6F107C42
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107CA0	proc near		; CODE XREF: sub_6F1072E0+7Dp
		cmp	word ptr ds:6F100000h, 5A4Dh
		jz	short loc_6F107CB0

loc_6F107CAB:				; CODE XREF: sub_6F107CA0+25j
		xor	eax, eax

locret_6F107CAD:			; CODE XREF: sub_6F107CA0+32j
					; sub_6F107CA0+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107CB0:				; CODE XREF: sub_6F107CA0+9j
		mov	eax, ds:6F10003Ch
		cmp	dword ptr [eax+6F100000h], 4550h
		lea	edx, [eax+6F100000h]
		jnz	short loc_6F107CAB
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 6F100000h
		jz	short locret_6F107CAD
		xor	eax, eax
		jmp	short locret_6F107CAD
sub_6F107CA0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:6F100000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6F107CF2

loc_6F107CED:				; CODE XREF: .text:6F107D07j
					; .text:6F107D0Fj ...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F107CF2:				; CODE XREF: .text:6F107CEBj
		mov	eax, ds:6F10003Ch
		cmp	dword ptr [eax+6F100000h], 4550h
		lea	edx, [eax+6F100000h]
		jnz	short loc_6F107CED
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6F107CED
		mov	ebx, [esp+0Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 6F100000h
		test	esi, esi
		jz	short loc_6F107CED
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6F107D35
; ---------------------------------------------------------------------------

loc_6F107D32:				; CODE XREF: .text:6F107D48j
		add	eax, 28h

loc_6F107D35:				; CODE XREF: .text:6F107D30j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_6F107D43
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6F107D50

loc_6F107D43:				; CODE XREF: .text:6F107D3Aj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_6F107D32
		jmp	short loc_6F107CED
; ---------------------------------------------------------------------------
		align 10h

loc_6F107D50:				; CODE XREF: .text:6F107D41j
		test	eax, eax
		jz	short loc_6F107CED
		mov	eax, [eax+24h]
		pop	ebx
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F107D60	proc near		; CODE XREF: .text:6F107E88p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:6F100000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_6F107D90

loc_6F107D7D:				; CODE XREF: sub_6F107D60+46j
					; sub_6F107D60+4Ej ...
		xor	eax, eax

loc_6F107D7F:				; CODE XREF: sub_6F107D60+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107D90:				; CODE XREF: sub_6F107D60+1Bj
		mov	edx, ds:6F10003Ch
		cmp	dword ptr [edx+6F100000h], 4550h
		lea	ecx, [edx+6F100000h]
		jnz	short loc_6F107D7D
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6F107D7D
		mov	esi, [ecx+80h]
		test	esi, esi
		jz	short loc_6F107D7D
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_6F107D7D
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
		xor	ecx, ecx
		jmp	short loc_6F107DD4
; ---------------------------------------------------------------------------

loc_6F107DD1:				; CODE XREF: sub_6F107D60+87j
		add	edx, 28h

loc_6F107DD4:				; CODE XREF: sub_6F107D60+6Fj
		mov	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_6F107DE2
		add	ebx, [edx+8]
		cmp	esi, ebx
		jb	short loc_6F107DEB

loc_6F107DE2:				; CODE XREF: sub_6F107D60+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_6F107DD1
		jmp	short loc_6F107D7D
; ---------------------------------------------------------------------------

loc_6F107DEB:				; CODE XREF: sub_6F107D60+80j
		test	edx, edx
		lea	esi, [esi+0]
		jz	short loc_6F107D7D
		add	esi, 6F100000h
		jmp	short loc_6F107E0A
; ---------------------------------------------------------------------------
		align 10h

loc_6F107E00:				; CODE XREF: sub_6F107D60+AFj
					; sub_6F107D60+B6j
		test	eax, eax
		jle	short loc_6F107E20
		sub	eax, 1
		add	esi, 14h

loc_6F107E0A:				; CODE XREF: sub_6F107D60+98j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jnz	short loc_6F107E00
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_6F107E00
		jmp	loc_6F107D7D
; ---------------------------------------------------------------------------
		align 10h

loc_6F107E20:				; CODE XREF: sub_6F107D60+A2j
		mov	eax, 6F100000h
		add	eax, [esi+0Ch]
		jmp	loc_6F107D7F
sub_6F107D60	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		xor	edx, edx
		sub	esp, 18h
		mov	eax, ds:dword_6F1133A4
		test	eax, eax
		jz	short loc_6F107E82

loc_6F107E3F:				; CODE XREF: .text:6F107ECFj
					; .text:6F107EEAj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F107E44:				; CODE XREF: .text:6F107EB3j
					; .text:6F107EB8j
		movzx	edx, byte ptr [eax+3]
		cmp	dl, 43h
		jz	short loc_6F107E52
		cmp	dl, 63h
		jnz	short loc_6F107E80

loc_6F107E52:				; CODE XREF: .text:6F107E4Bj
		movzx	edx, byte ptr [eax+4]
		cmp	dl, 52h
		jz	short loc_6F107E62
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_6F107E80

loc_6F107E62:				; CODE XREF: .text:6F107E59j
		movzx	edx, byte ptr [eax+5]
		cmp	dl, 54h
		jz	short loc_6F107EBE
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_6F107EBE
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_6F107EBE
		lea	esi, [esi+0]

loc_6F107E80:				; CODE XREF: .text:6F107E50j
					; .text:6F107E60j ...
		mov	edx, ebx

loc_6F107E82:				; CODE XREF: .text:6F107E3Dj
					; .text:6F107EBCj
		lea	ebx, [edx+1]
		mov	[esp], edx
		call	sub_6F107D60
		test	eax, eax
		jz	short loc_6F107ED5
		movzx	edx, byte ptr [eax]
		cmp	dl, 4Dh
		jz	short loc_6F107E9E
		cmp	dl, 6Dh
		jnz	short loc_6F107E80

loc_6F107E9E:				; CODE XREF: .text:6F107E97j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 53h
		jz	short loc_6F107EAC
		cmp	dl, 73h
		jnz	short loc_6F107E80

loc_6F107EAC:				; CODE XREF: .text:6F107EA5j
		movzx	edx, byte ptr [eax+2]
		cmp	dl, 56h
		jz	short loc_6F107E44
		cmp	dl, 76h
		jz	short loc_6F107E44
		mov	edx, ebx
		jmp	short loc_6F107E82
; ---------------------------------------------------------------------------

loc_6F107EBE:				; CODE XREF: .text:6F107E69j
					; .text:6F107E70j ...
		mov	[esp], eax
		call	ds:GetModuleHandleA
		test	eax, eax
		push	ebx
		mov	ds:dword_6F1133A4, eax
		jnz	loc_6F107E3F

loc_6F107ED5:				; CODE XREF: .text:6F107E8Fj
		mov	dword ptr [esp], offset	aMsvcrt_dll ; "msvcrt.dll"
		call	ds:LoadLibraryW
		sub	esp, 4
		mov	ds:dword_6F1133A4, eax
		jmp	loc_6F107E3F
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], esi
		mov	esi, [esp+30h]
		mov	[esp+1Ch], ebx
		mov	[esp+24h], edi
		mov	[esp+28h], ebp
		mov	[esp], esi
		call	strlen
		cmp	eax, 8
		jbe	short loc_6F107F30

loc_6F107F14:				; CODE XREF: .text:6F107F39j
					; .text:6F107F50j ...
		xor	ebx, ebx

loc_6F107F16:				; CODE XREF: .text:6F107F8Aj
		mov	eax, ebx
		mov	esi, [esp+20h]
		mov	ebx, [esp+1Ch]
		mov	edi, [esp+24h]
		mov	ebp, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F107F30:				; CODE XREF: .text:6F107F12j
		cmp	word ptr ds:6F100000h, 5A4Dh
		jnz	short loc_6F107F14
		mov	eax, ds:6F10003Ch
		cmp	dword ptr [eax+6F100000h], 4550h
		lea	edx, [eax+6F100000h]
		jnz	short loc_6F107F14
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6F107F14
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_6F107F14
		movzx	eax, ax
		xor	edi, edi
		lea	ebx, [edx+eax+18h]
		jmp	short loc_6F107F74
; ---------------------------------------------------------------------------

loc_6F107F71:				; CODE XREF: .text:6F107F91j
		add	ebx, 28h

loc_6F107F74:				; CODE XREF: .text:6F107F6Fj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], esi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jz	short loc_6F107F16
		add	edi, 1
		cmp	edi, ebp
		jb	short loc_6F107F71
		jmp	loc_6F107F14
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Resume]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Register]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Unregister]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetTextRelBase]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetDataRelBase]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetRegionStart]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetLanguageSpecificData]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetIPInfo]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SetGR]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SetIP]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_DeleteException]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Resume_or_Rethrow]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_RaiseException]
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		xor	ecx, ecx
		lock cmpxchg [edx], ecx
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	eax, [ebx+4]
		sub	eax, 1
		test	eax, eax
		mov	[ebx+4], eax
		jz	short loc_6F108050

loc_6F108045:				; CODE XREF: .text:6F108064j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F108050:				; CODE XREF: .text:6F108043j
		mov	dword ptr [ebx+8], 0
		mov	[esp], ebx
		call	sub_6F108530
		sub	esp, 4
		test	eax, eax
		js	short loc_6F108045
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 1
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		add	esp, 18h
		movzx	eax, al
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1080A0	proc near		; CODE XREF: sub_6F109430+48p
					; sub_6F10A720+1C1p ...

hSemaphore	= dword	ptr -1Ch
lReleaseCount	= dword	ptr -18h
lpPreviousCount	= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+hSemaphore], ebx
		call	sub_6F108530
		mov	edx, eax
		sub	esp, 4
		xor	eax, eax
		test	edx, edx
		js	short loc_6F1080E2
		mov	[esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+1Ch+lReleaseCount], 1 ; lReleaseCount
		mov	eax, [ebx+4]
		mov	[esp+1Ch+hSemaphore], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		movzx	eax, al

loc_6F1080E2:				; CODE XREF: sub_6F1080A0+19j
		add	esp, 18h
		pop	ebx
		retn
sub_6F1080A0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 8
		mov	ebx, [esp+10h]
		call	ds:GetCurrentThreadId
		xor	edx, edx
		mov	ecx, eax
		mov	eax, 0FFFFFFFFh
		lock cmpxchg [ebx], edx
		test	eax, eax
		js	short loc_6F108124
		cmp	ecx, [ebx+8]
		mov	eax, 1
		jnz	short loc_6F10811F
		add	dword ptr [ebx+4], 1
		xor	al, al

loc_6F10811F:				; CODE XREF: .text:6F108117j
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F108124:				; CODE XREF: .text:6F10810Dj
		mov	dword ptr [ebx+4], 1
		xor	eax, eax
		mov	[ebx+8], ecx
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+20h]
		call	ds:GetCurrentThreadId
		mov	[esp], ebx
		mov	esi, eax
		call	sub_6F108570
		sub	esp, 4
		test	eax, eax
		jz	short loc_6F108180
		cmp	esi, [ebx+8]
		jz	short loc_6F1081A6
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jnz	short loc_6F108190

loc_6F108180:				; CODE XREF: .text:6F10815Ej
		mov	dword ptr [ebx+4], 1
		mov	[ebx+8], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F108190:				; CODE XREF: .text:6F10817Ej
		mov	[esp], ebx
		call	sub_6F108530
		mov	eax, 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F1081A6:				; CODE XREF: .text:6F108163j
		mov	[esp], ebx
		call	sub_6F108530
		xor	eax, eax
		add	dword ptr [ebx+4], 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1081C0	proc near		; CODE XREF: sub_6F10A720+15Fp
					; sub_6F10A9B0+CEp ...

hHandle		= dword	ptr -1Ch
dwMilliseconds	= dword	ptr -18h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+hHandle], ebx
		call	sub_6F108570
		sub	esp, 4
		test	eax, eax
		jnz	short loc_6F1081E0

loc_6F1081D7:				; CODE XREF: sub_6F1081C0+39j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F1081E0:				; CODE XREF: sub_6F1081C0+15j
		mov	[esp+1Ch+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
		mov	eax, [ebx+4]
		mov	[esp+1Ch+hHandle], eax ; hHandle
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	short loc_6F1081D7
		mov	[esp+1Ch+hHandle], ebx
		call	sub_6F108530
		mov	eax, 1
		sub	esp, 4
		add	esp, 18h
		pop	ebx
		retn
sub_6F1081C0	endp

; ---------------------------------------------------------------------------
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0FFFFh
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+0Ch], eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108260	proc near		; CODE XREF: sub_6F108650+13p

lpSemaphoreAttributes= dword ptr -1Ch
lInitialCount	= dword	ptr -18h
lMaximumCount	= dword	ptr -14h
lpName		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	[esp+1Ch+lpName], 0 ; lpName
		mov	[esp+1Ch+lMaximumCount], 0FFFFh	; lMaximumCount
		mov	[esp+1Ch+lInitialCount], 0 ; lInitialCount
		mov	[esp+1Ch+lpSemaphoreAttributes], 0 ; lpSemaphoreAttributes
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+4], eax
		add	esp, 18h
		pop	ebx
		retn
sub_6F108260	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	eax, [eax+4]
		mov	[esp], eax
		call	ds:CloseHandle
		sub	esp, 4
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F1082C0(DWORD, LPVOID)
sub_6F1082C0	proc near		; CODE XREF: sub_6F10B260+8Ap

dwTlsIndex	= dword	ptr -1Ch
lpTlsValue	= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+lpTlsValue], eax ; lpTlsValue
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jz	short loc_6F1082E5
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6F1082E5:				; CODE XREF: sub_6F1082C0+1Dj
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_6F1082C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F1082F0(DWORD)
sub_6F1082F0	proc near		; CODE XREF: sub_6F10B260+5Fp
					; sub_6F10B340+5Fp

dwTlsIndex	= dword	ptr -1Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	[esp+1Ch+var_4], esi
		call	ds:GetLastError
		mov	ebx, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsGetValue
		sub	esp, 4
		mov	esi, eax
		mov	[esp+1Ch+dwTlsIndex], ebx ; dwErrCode
		call	ds:SetLastError
		mov	eax, esi
		sub	esp, 4
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
sub_6F1082F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F108330(DWORD)
sub_6F108330	proc near		; CODE XREF: sub_6F10BAC0+14p

dwTlsIndex	= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsFree
		sub	esp, 4
		test	eax, eax
		jz	short loc_6F108350
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F108350:				; CODE XREF: sub_6F108330+15j
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_6F108330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108360	proc near		; CODE XREF: sub_6F108670+22p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], ebx
		mov	ebx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_4], esi
		mov	esi, [esp+0Ch+arg_0]
		call	ds:TlsAlloc
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6F108398
		mov	[esi], eax
		mov	esi, [esp+0Ch+var_4]
		mov	[esp+0Ch+arg_4], ebx
		mov	ebx, [esp+0Ch+var_8]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	sub_6F1084D0
; ---------------------------------------------------------------------------

loc_6F108398:				; CODE XREF: sub_6F108360+1Cj
		mov	eax, ds:GetLastError
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	eax
sub_6F108360	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+24h]
		mov	ebx, [esp+20h]
		test	esi, esi
		jz	short loc_6F1083D3
		test	ebx, ebx
		jz	short loc_6F1083D3
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_6F1083E0

loc_6F1083CB:				; CODE XREF: .text:6F1083F6j
					; .text:6F108412j
		xor	eax, eax

loc_6F1083CD:				; CODE XREF: .text:6F108420j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6F1083D3:				; CODE XREF: .text:6F1083BFj
					; .text:6F1083C3j
		add	esp, 14h
		mov	eax, 16h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F1083E0:				; CODE XREF: .text:6F1083C9j
		lea	eax, [ebx+4]
		mov	[esp], eax
		call	sub_6F108570
		sub	esp, 4
		test	eax, eax
		jz	short loc_6F108414
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_6F1083CB
		mov	esi, ds:Sleep
		xchg	ax, ax

loc_6F108400:				; CODE XREF: .text:6F108410j
		mov	dword ptr [esp], 0
		call	esi ; Sleep
		mov	eax, [ebx]
		sub	esp, 4
		test	eax, eax
		jz	short loc_6F108400
		jmp	short loc_6F1083CB
; ---------------------------------------------------------------------------

loc_6F108414:				; CODE XREF: .text:6F1083F0j
		call	esi
		xor	eax, eax
		mov	dword ptr [ebx], 1
		xchg	ax, ax
		jmp	short loc_6F1083CD
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108430	proc near		; CODE XREF: sub_6F1067E0+D0p
					; sub_6F1067E0+E2p ...

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_6F108451

loc_6F10843C:				; CODE XREF: sub_6F108430+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_6F10843C

loc_6F108451:				; CODE XREF: sub_6F108430+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
sub_6F108430	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _write]
		align 10h
		mov	eax, [esp+0Ch]
		mov	edx, [esp+8]
		mov	ecx, [esp+4]
		lock cmpxchg [ecx], edx
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6F108490
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108490	proc near		; CODE XREF: sub_6F101040+53p
					; sub_6F101040+C8p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lock cmpxchg [ecx], edx
		retn	0Ch
sub_6F108490	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		lock xchg eax, [edx]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1084C0	proc near		; CODE XREF: sub_6F101040+1A2p
					; sub_6F101040+211p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lock xchg eax, [edx]
		retn	8
sub_6F1084C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1084D0	proc near		; CODE XREF: sub_6F108360+33j

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

; FUNCTION CHUNK AT 6F107A90 SIZE 00000070 BYTES

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_6F1084F0
		mov	[esp+0Ch+arg_4], eax
		mov	[esp+0Ch+arg_0], edx
		add	esp, 0Ch
		jmp	loc_6F107A90
; ---------------------------------------------------------------------------
		align 10h

loc_6F1084F0:				; CODE XREF: sub_6F1084D0+Dj
		add	esp, 0Ch
		retn
sub_6F1084D0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	loc_6F1079F0
; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6F108530
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108530	proc near		; CODE XREF: .text:6F10805Ap
					; sub_6F1080A0+Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn	4
sub_6F108530	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6F108570
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108570	proc near		; CODE XREF: .text:6F108154p
					; sub_6F1081C0+Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn	4
sub_6F108570	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fputs]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F108630	proc near		; DATA XREF: .text:6F10BB00o
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_6F101430
		mov	dword ptr [esp], offset	sub_6F101480 ; _onexit_t
		call	sub_6F107160
		leave
		retn
sub_6F108630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108650	proc near		; DATA XREF: .text:6F10BAFCo

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, dword_6F10C01C
		test	eax, eax
		jz	short loc_6F108668
		mov	[esp+1Ch+var_1C], offset dword_6F110A50
		call	sub_6F108260

loc_6F108668:				; CODE XREF: sub_6F108650+Aj
		add	esp, 1Ch
		retn
sub_6F108650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108670	proc near		; DATA XREF: .text:6F10BAF8o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		mov	eax, dword_6F10C01C
		mov	byte_6F110A44, 0
		test	eax, eax
		jz	short loc_6F1086A0
		mov	[esp+1Ch+var_18], offset sub_6F1086B0
		mov	[esp+1Ch+var_1C], offset dword_6F110A40
		call	sub_6F108360
		test	eax, eax
		setz	byte_6F110A44

loc_6F1086A0:				; CODE XREF: sub_6F108670+11j
		mov	[esp+1Ch+var_1C], offset sub_6F10BAC0 ;	_onexit_t
		call	sub_6F107160
		add	esp, 1Ch
		retn
sub_6F108670	endp


; =============== S U B	R O U T	I N E =======================================


sub_6F1086B0	proc near		; DATA XREF: sub_6F108670+13o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jz	short loc_6F1086E5
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6F1086D7

loc_6F1086C3:				; CODE XREF: sub_6F1086B0+25j
		mov	ebx, [eax+10h]
		add	eax, 30h
		mov	[esp+1Ch+var_1C], eax
		call	_Unwind_DeleteException
		test	ebx, ebx
		mov	eax, ebx
		jnz	short loc_6F1086C3

loc_6F1086D7:				; CODE XREF: sub_6F1086B0+11j
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	free
; ---------------------------------------------------------------------------

loc_6F1086E5:				; CODE XREF: sub_6F1086B0+Bj
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6F1086B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1086F0	proc near		; CODE XREF: sub_6F108890+3Bp
					; sub_6F10B4E0+423p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, eax
		sub	esp, 28h
		movzx	ecx, byte ptr [eax+14h]
		cmp	cl, 0FFh
		movzx	eax, cl
		jz	short loc_6F108756
		mov	ecx, eax
		and	ecx, 7
		cmp	ecx, 2
		jz	short loc_6F108750
		jle	short loc_6F108720
		cmp	ecx, 3
		jz	short loc_6F108724
		cmp	ecx, 4
		jz	short loc_6F108746

loc_6F108718:				; CODE XREF: sub_6F1086F0+32j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6F108720:				; CODE XREF: sub_6F1086F0+1Cj
		test	ecx, ecx
		jnz	short loc_6F108718

loc_6F108724:				; CODE XREF: sub_6F1086F0+21j
		shl	edx, 2
		neg	edx

loc_6F108729:				; CODE XREF: sub_6F1086F0+5Bj
					; sub_6F1086F0+64j ...
		mov	ecx, [ebx+0Ch]
		add	ecx, edx
		mov	edx, [ebx+8]
		lea	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6F1089D0
		mov	eax, [esp+2Ch+var_10]
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6F108746:				; CODE XREF: sub_6F1086F0+26j
		shl	edx, 3
		neg	edx
		jmp	short loc_6F108729
; ---------------------------------------------------------------------------
		align 10h

loc_6F108750:				; CODE XREF: sub_6F1086F0+1Aj
		add	edx, edx
		neg	edx
		jmp	short loc_6F108729
; ---------------------------------------------------------------------------

loc_6F108756:				; CODE XREF: sub_6F1086F0+10j
		xor	edx, edx
		jmp	short loc_6F108729
sub_6F1086F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108760	proc near		; CODE XREF: sub_6F108890+46p
					; sub_6F10B4E0+43Fp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	eax, [ecx]
		mov	[esp+2Ch+var_8], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], edi
		mov	edi, ecx
		mov	[esp+2Ch+var_10], eax
		mov	eax, [edx]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+8]
		test	al, al
		jz	short loc_6F108791
		mov	eax, [esp+2Ch+var_10]
		mov	eax, [eax]
		mov	[esp+2Ch+var_10], eax

loc_6F108791:				; CODE XREF: sub_6F108760+25j
		mov	eax, [ebx]
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [eax+10h]
		mov	edx, eax
		xor	eax, eax
		test	dl, dl
		jz	short loc_6F1087C0
		mov	eax, [esp+2Ch+var_10]
		mov	[edi], eax
		mov	eax, 1

loc_6F1087C0:				; CODE XREF: sub_6F108760+53j
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_6F108760	endp


; =============== S U B	R O U T	I N E =======================================


sub_6F1087D0	proc near		; CODE XREF: sub_6F10ADBD+69p
					; sub_6F10B4E0+E3p ...

var_2C		= dword	ptr -2Ch

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, eax
		push	ebx
		xor	eax, eax
		sub	esp, 1Ch
		test	esi, esi
		mov	ebx, ecx
		jz	short loc_6F1087EB
		mov	[esp+2Ch+var_2C], esi
		call	_Unwind_GetRegionStart

loc_6F1087EB:				; CODE XREF: sub_6F1087D0+11j
		mov	[ebx], eax
		movzx	edx, byte ptr [edi]
		add	edi, 1
		cmp	dl, 0FFh
		jz	short loc_6F108877
		movzx	ebp, dl
		mov	edx, esi
		mov	eax, ebp
		call	sub_6F108910
		lea	edx, [ebx+4]
		mov	ecx, edi
		mov	[esp+2Ch+var_2C], edx
		mov	edx, eax
		mov	eax, ebp
		call	sub_6F1089D0
		mov	edi, eax
		movzx	eax, byte ptr [edi]
		add	edi, 1
		cmp	al, 0FFh
		mov	[ebx+14h], al
		jz	short loc_6F108887

loc_6F108824:				; CODE XREF: sub_6F1087D0+B5j
		xor	esi, esi
		xor	ecx, ecx

loc_6F108828:				; CODE XREF: sub_6F1087D0+6Cj
		movzx	eax, byte ptr [edi]
		add	edi, 1
		mov	edx, eax
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	al, al
		js	short loc_6F108828
		lea	esi, [edi+esi]
		mov	[ebx+0Ch], esi

loc_6F108844:				; CODE XREF: sub_6F1087D0+BEj
		movzx	eax, byte ptr [edi]
		xor	ecx, ecx
		mov	[ebx+15h], al
		lea	eax, [edi+1]
		xor	edi, edi

loc_6F108851:				; CODE XREF: sub_6F1087D0+97j
		movzx	esi, byte ptr [eax]
		add	eax, 1
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		mov	edx, esi
		test	dl, dl
		js	short loc_6F108851
		lea	edi, [eax+edi]
		mov	[ebx+10h], edi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F108877:				; CODE XREF: sub_6F1087D0+26j
		mov	[ebx+4], eax
		movzx	eax, byte ptr [edi]
		add	edi, 1
		cmp	al, 0FFh
		mov	[ebx+14h], al
		jnz	short loc_6F108824

loc_6F108887:				; CODE XREF: sub_6F1087D0+52j
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_6F108844
sub_6F1087D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6F108890	proc near		; CODE XREF: sub_6F10ADBD+80p
					; sub_6F10ADBD+ADp ...

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, edx
		push	edi
		xor	edx, edx
		push	esi
		mov	edi, eax
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_20], ecx
		xor	ecx, ecx
		not	ebx
		add	ebx, [eax+0Ch]
		lea	esi, [esi+0]

loc_6F1088B0:				; CODE XREF: sub_6F108890+53j
					; sub_6F108890+58j
		movzx	esi, byte ptr [ebx]
		add	ebx, 1
		mov	eax, esi
		and	eax, 7Fh
		shl	eax, cl
		or	edx, eax
		mov	eax, esi
		test	al, al
		js	short loc_6F1088E5
		test	edx, edx
		jz	short loc_6F1088F0
		mov	eax, edi
		call	sub_6F1086F0
		lea	ecx, [esp+2Ch+var_20]
		mov	edx, ebp
		call	sub_6F108760
		test	al, al
		jnz	short loc_6F108900
		xor	edx, edx
		xor	ecx, ecx
		jmp	short loc_6F1088B0
; ---------------------------------------------------------------------------

loc_6F1088E5:				; CODE XREF: sub_6F108890+33j
		add	ecx, 7
		jmp	short loc_6F1088B0
; ---------------------------------------------------------------------------
		align 10h

loc_6F1088F0:				; CODE XREF: sub_6F108890+37j
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F108900:				; CODE XREF: sub_6F108890+4Dj
		add	esp, 1Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6F108890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108910	proc near		; CODE XREF: sub_6F1087D0+2Fp
					; sub_6F10B4E0+F5p ...

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	al, 0FFh
		jz	short loc_6F108944
		and	eax, 70h
		cmp	eax, 20h
		jz	short loc_6F108970
		jle	short loc_6F108940
		cmp	eax, 40h
		jz	short loc_6F108957
		cmp	eax, 50h
		lea	esi, [esi+0]
		jz	short loc_6F108944
		cmp	eax, 30h
		jz	short loc_6F108980

loc_6F108937:				; CODE XREF: sub_6F108910+43j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6F108940:				; CODE XREF: sub_6F108910+Fj
		test	eax, eax
		jnz	short loc_6F108950

loc_6F108944:				; CODE XREF: sub_6F108910+5j
					; sub_6F108910+20j ...
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F108950:				; CODE XREF: sub_6F108910+32j
		cmp	eax, 10h
		jnz	short loc_6F108937
		jmp	short loc_6F108944
; ---------------------------------------------------------------------------

loc_6F108957:				; CODE XREF: sub_6F108910+14j
		mov	[esp+1Ch+var_1C], edx
		lea	esi, [esi+0]
		call	_Unwind_GetRegionStart
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F108970:				; CODE XREF: sub_6F108910+Dj
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_GetTextRelBase
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F108980:				; CODE XREF: sub_6F108910+25j
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_GetDataRelBase
		add	esp, 1Ch
		retn
sub_6F108910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108990	proc near		; DATA XREF: sub_6F10B480+37o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		cmp	[esp+1Ch+arg_0], 1
		lea	edx, [eax-40h]
		ja	short loc_6F1089C1
		mov	edx, [edx+14h]
		lea	ebx, [eax+20h]
		test	edx, edx
		jz	short loc_6F1089B4
		lea	ebx, [eax+20h]
		mov	[esp+1Ch+var_1C], ebx
		call	edx

loc_6F1089B4:				; CODE XREF: sub_6F108990+1Aj
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_6F10B0E0
; ---------------------------------------------------------------------------

loc_6F1089C1:				; CODE XREF: sub_6F108990+10j
		mov	eax, [edx+1Ch]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6F108B20
sub_6F108990	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1089D0	proc near		; CODE XREF: sub_6F1086F0+48p
					; sub_6F1087D0+40p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	eax, ecx
		cmp	bl, 50h
		mov	[esp+2Ch+var_8], edi
		mov	edi, edx
		mov	edx, ebx
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_4], ebp
		jz	loc_6F108B00
		mov	[esp+2Ch+var_24], ecx
		movzx	ecx, bl
		mov	[esp+2Ch+var_28], ecx
		and	ecx, 0Fh
		cmp	ecx, 0Ch	; switch 13 cases
		jbe	short loc_6F108A10

loc_6F108A07:				; CODE XREF: sub_6F1089D0:loc_6F108A10j
					; DATA XREF: .rdata:off_6F1113A0o
		call	abort		; jumptable 6F108A10 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6F108A10:				; CODE XREF: sub_6F1089D0+35j
		jmp	ds:off_6F1113A0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6F108A17:				; CODE XREF: sub_6F1089D0:loc_6F108A10j
					; DATA XREF: .rdata:off_6F1113A0o
		mov	ebx, [eax]	; jumptable 6F108A10 cases 0,3,11
		add	eax, 4

loc_6F108A1C:				; CODE XREF: sub_6F1089D0+95j
					; sub_6F1089D0+C9j ...
		test	ebx, ebx
		xchg	ax, ax
		jz	short loc_6F108A40
		mov	ecx, [esp+2Ch+var_28]
		and	ecx, 70h
		cmp	ecx, 10h
		jz	loc_6F108B10

loc_6F108A32:				; CODE XREF: sub_6F1089D0+144j
		add	ebx, edi
		test	dl, dl
		jns	short loc_6F108A40
		mov	ebx, [ebx]
		lea	esi, [esi+0]

loc_6F108A40:				; CODE XREF: sub_6F1089D0+50j
					; sub_6F1089D0+66j ...
		mov	edx, [esp+2Ch+arg_0]
		mov	[edx], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F108A60:				; CODE XREF: sub_6F1089D0:loc_6F108A10j
					; DATA XREF: .rdata:off_6F1113A0o
		mov	ebx, [eax]	; jumptable 6F108A10 cases 4,12
		add	eax, 8
		jmp	short loc_6F108A1C
; ---------------------------------------------------------------------------

loc_6F108A67:				; CODE XREF: sub_6F1089D0:loc_6F108A10j
					; DATA XREF: .rdata:off_6F1113A0o
		xor	ebx, ebx	; jumptable 6F108A10 case 9
		xor	ecx, ecx
		mov	esi, ebx
		mov	ebp, edx
		mov	[esp+2Ch+var_20], edi

loc_6F108A73:				; CODE XREF: sub_6F1089D0+BAj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	edi, bl
		mov	edx, edi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6F108A73
		cmp	ecx, 1Fh
		mov	ebx, esi
		mov	edx, ebp
		mov	esi, edi
		mov	edi, [esp+2Ch+var_20]
		ja	short loc_6F108A1C
		and	esi, 40h
		jz	loc_6F108A1C
		mov	esi, 0FFFFFFFFh
		shl	esi, cl
		or	ebx, esi
		jmp	loc_6F108A1C
; ---------------------------------------------------------------------------

loc_6F108AB2:				; CODE XREF: sub_6F1089D0:loc_6F108A10j
					; DATA XREF: .rdata:off_6F1113A0o
		mov	ebp, edi	; jumptable 6F108A10 case 1
		xor	ebx, ebx
		xor	ecx, ecx
		mov	edi, edx
		lea	esi, [esi+0]

loc_6F108AC0:				; CODE XREF: sub_6F1089D0+106j
		movzx	edx, byte ptr [eax]
		mov	esi, 7Fh
		add	eax, 1
		and	esi, edx
		shl	esi, cl
		add	ecx, 7
		or	ebx, esi
		test	dl, dl
		js	short loc_6F108AC0
		mov	edx, edi
		mov	edi, ebp
		jmp	loc_6F108A1C
; ---------------------------------------------------------------------------

loc_6F108AE1:				; CODE XREF: sub_6F1089D0:loc_6F108A10j
					; DATA XREF: .rdata:off_6F1113A0o
		movsx	ebx, word ptr [eax] ; jumptable	6F108A10 case 10
		add	eax, 2
		jmp	loc_6F108A1C
; ---------------------------------------------------------------------------
		align 10h

loc_6F108AF0:				; CODE XREF: sub_6F1089D0:loc_6F108A10j
					; DATA XREF: .rdata:off_6F1113A0o
		movzx	ebx, word ptr [eax] ; jumptable	6F108A10 case 2
		add	eax, 2
		jmp	loc_6F108A1C
; ---------------------------------------------------------------------------
		align 10h

loc_6F108B00:				; CODE XREF: sub_6F1089D0+1Ej
		add	eax, 3
		and	eax, 0FFFFFFFCh
		mov	ebx, [eax]
		add	eax, 4
		jmp	loc_6F108A40
; ---------------------------------------------------------------------------

loc_6F108B10:				; CODE XREF: sub_6F1089D0+5Cj
		mov	edi, [esp+2Ch+var_24]
		jmp	loc_6F108A32
sub_6F1089D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6F108B20	proc near		; CODE XREF: sub_6F108990+37p
					; sub_6F10A6F0+Bp ...

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BBDC
		mov	[ebp+var_18], offset sub_6F108B5E
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	[ebp+var_38], 2
		call	[ebp+arg_0]
		call	abort
sub_6F108B20	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F108B5E	proc near		; DATA XREF: sub_6F108B20+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		cmp	dword ptr [ebp-38h], 1
		mov	[ebp-40h], eax
		jz	short loc_6F108B8B
		mov	dword ptr [ebp-38h], 0
		call	sub_6F10AEE0
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F108B8B:				; CODE XREF: sub_6F108B5E+Dj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6F10AC10
		mov	dword ptr [ebp-38h], 1
		call	abort
sub_6F108B5E	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F108BB0	proc near		; CODE XREF: sub_6F10A690+Bp
					; sub_6F10AD50+68p

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		call	[esp+0Ch+arg_0]
		call	sub_6F10A6F0
sub_6F108BB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108BC0	proc near		; DATA XREF: .rdata:6F112CD4o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112CD0
		add	esp, 0Ch
		jmp	sub_6F10A700
sub_6F108BC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108BE0	proc near		; DATA XREF: .rdata:off_6F112CD0o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6F112CD0
		retn
sub_6F108BE0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6F112CD0
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108C00	proc near		; DATA XREF: .rdata:6F112CECo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6F112CE8
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F10A680
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6F10A700
sub_6F108C00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108C30	proc near		; DATA XREF: .rdata:off_6F112CE8o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112CE8
		add	esp, 0Ch
		jmp	sub_6F10A680
sub_6F108C30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108C50	proc near		; CODE XREF: sub_6F108CB0+11p
					; sub_6F108CE0+10j ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112CE8
		add	esp, 0Ch
		jmp	sub_6F10A680
sub_6F108C50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108C70	proc near		; DATA XREF: .rdata:6F112D2Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112D28
		add	esp, 0Ch
		jmp	sub_6F10A700
sub_6F108C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108C90	proc near		; DATA XREF: .rdata:off_6F112D28o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6F112D28
		retn
sub_6F108C90	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6F112D28
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108CB0	proc near		; DATA XREF: .rdata:6F112D4Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6F112D48
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F108C50
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6F10A700
sub_6F108CB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108CE0	proc near		; DATA XREF: .rdata:off_6F112D48o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112D48
		add	esp, 0Ch
		jmp	sub_6F108C50
sub_6F108CE0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_6F112D48
		add	esp, 0Ch
		jmp	sub_6F108C50
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108D20	proc near		; DATA XREF: .rdata:6F112D8Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6F112D88
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F108C50
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6F10A700
sub_6F108D20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F108D50	proc near		; DATA XREF: .rdata:off_6F112D88o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112D88
		add	esp, 0Ch
		jmp	sub_6F108C50
sub_6F108D50	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_6F112D88
		add	esp, 0Ch
		jmp	sub_6F108C50
; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. _ZN11QStringListD1Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN11QStringListD1Ev
_ZN11QStringListD1Ev proc near		; CODE XREF: sub_6F101B81+73p
					; sub_6F101CF8+35p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jnz	short loc_6F108DB1
		mov	eax, [edx]
		mov	[esp+1Ch+var_1C], edx
		mov	[esp+1Ch+var_18], eax
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE

loc_6F108DB1:				; CODE XREF: _ZN11QStringListD1Ev+11j
		add	esp, 1Ch
		retn
_ZN11QStringListD1Ev endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  18. _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_
_ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_ proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE+BDp
					; _ZN15KleopatraClient3Gui20CertificateRequesterC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE+BDp

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6F10B4E0
		mov	[ebp+var_40], offset word_6F10BB36
		mov	[ebp+var_38], offset sub_6F109090
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZN9QLineEditC1EP7QWidget
		lea	eax, [ebp+var_C]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset aChange___ ; "Change..."
		mov	dword ptr [esp+4], offset _ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE
		mov	[esp], eax
		mov	[ebp+var_58], 7
		call	ds:_ZNK11QMetaObject2trEPKcS1_
		mov	eax, [ebp+arg_4]
		sub	esp, 4
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_58], 6
		mov	[esp+8], eax
		lea	eax, [ebp+var_C]
		add	edx, 14h
		mov	[ebp+var_6C], edx
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN11QPushButtonC1ERK7QStringP7QWidget
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F109030

loc_6F108E72:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+283j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_58], 5
		add	edx, 28h
		mov	[ebp+var_68], edx
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN11QHBoxLayoutC1EP7QWidget
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aLineedit ; "lineEdit"
		mov	[ebp+var_58], 4
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_10]
		mov	[esp+4], eax
		mov	[ebp+var_58], 3
		mov	[esp], edx
		call	ds:_ZN7QObject13setObjectNameERK7QString
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F109078

loc_6F108EDC:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+2CBj
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aButton	; "button"
		mov	[ebp+var_58], 4
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_58], 2
		add	eax, 14h
		mov	[ebp+var_64], eax
		mov	edx, [ebp+var_64]
		lea	eax, [ebp+var_14]
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN7QObject13setObjectNameERK7QString
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F109060

loc_6F108F2F:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+2B3j
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aHlay ;	"hlay"
		mov	[ebp+var_58], 4
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_58], 1
		add	eax, 28h
		mov	[esp], eax
		call	ds:_ZN7QObject13setObjectNameERK7QString
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_6F109048

loc_6F108F7C:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+29Bj
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_1C], 0
		mov	dword ptr [esp+8], 1
		add	eax, 28h
		mov	[ebp+var_60], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+var_60]
		mov	[esp+4], edx
		mov	[ebp+var_58], 4
		mov	[esp], eax
		call	ds:_ZN10QBoxLayout9addWidgetEP7QWidgeti6QFlagsIN2Qt13AlignmentFlagEE
		lea	eax, [ebp+var_20]
		mov	edx, [ebp+var_60]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_20], 0
		mov	dword ptr [esp+8], 0
		mov	[esp], edx
		add	eax, 14h
		mov	[esp+4], eax
		call	ds:_ZN10QBoxLayout9addWidgetEP7QWidgeti6QFlagsIN2Qt13AlignmentFlagEE
		mov	eax, [ebp+arg_0]
		mov	dword ptr [esp+4], 1
		mov	[esp], eax
		call	ds:_ZN9QLineEdit11setReadOnlyEb
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_64]
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], offset a1slotbuttoncli ; "1slotButtonClicked()"
		mov	[esp+8], edx
		mov	dword ptr [esp+4], offset a2clicked ; "2clicked()"
		mov	[esp], eax
		call	ds:_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F109030:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+ACj
		mov	eax, [ebp+var_C]
		mov	[ebp+var_58], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F108E72
; ---------------------------------------------------------------------------

loc_6F109048:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+1B6j
		mov	eax, [ebp+var_18]
		mov	[ebp+var_58], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F108F7C
; ---------------------------------------------------------------------------

loc_6F109060:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+169j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_58], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F108F2F
; ---------------------------------------------------------------------------

loc_6F109078:				; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+116j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_58], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_6F108EDC
_ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_ endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F109090	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+23o
		add	ebp, 8
		mov	eax, [ebp-58h]
		mov	edx, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-70h], edx
		jz	loc_6F109133
		cmp	eax, 2
		jz	short loc_6F10911F
		cmp	eax, 3
		jz	short loc_6F1090D4
		cmp	eax, 4
		jz	short loc_6F1090E7
		cmp	eax, 5
		jz	loc_6F109147
		cmp	eax, 6
		jz	short loc_6F1090FA
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev

loc_6F1090D4:				; CODE XREF: sub_6F109090+1Dj
					; sub_6F109090+A1j ...
		mov	edx, [ebp-68h]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], edx
		call	ds:_ZN11QHBoxLayoutD1Ev

loc_6F1090E7:				; CODE XREF: sub_6F109090+22j
		mov	eax, [ebp-6Ch]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], eax
		call	ds:_ZN11QPushButtonD1Ev

loc_6F1090FA:				; CODE XREF: sub_6F109090+30j
					; sub_6F109090+C9j
		mov	edx, [ebp+8]
		mov	dword ptr [ebp-58h], 0
		mov	[esp+0], edx
		call	ds:_ZN9QLineEditD1Ev
		mov	eax, [ebp-70h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10911F:				; CODE XREF: sub_6F109090+18j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev
		jmp	short loc_6F1090D4
; ---------------------------------------------------------------------------

loc_6F109133:				; CODE XREF: sub_6F109090+Fj
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev
		jmp	short loc_6F1090D4
; ---------------------------------------------------------------------------

loc_6F109147:				; CODE XREF: sub_6F109090+27j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 0
		call	_ZN7QStringD1Ev
		jmp	short loc_6F1090FA
sub_6F109090	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. _ZN5QListI7QStringE13detach_helperEv

; =============== S U B	R O U T	I N E =======================================


		public _ZN5QListI7QStringE13detach_helperEv
_ZN5QListI7QStringE13detach_helperEv proc near
					; CODE XREF: _ZNK15KleopatraClient3Gui20CertificateRequester19selectedCertificateEv+2Ep
					; _ZNK15KleopatraClient3Gui20CertificateRequester20selectedCertificatesEv+25p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [ebx]
		mov	eax, [esi+4]
		mov	edi, [esi+8]
		mov	[esp+3Ch+var_3C], ebx
		mov	[esp+3Ch+var_38], eax
		call	ds:_ZN9QListData6detachEi
		mov	[esp+3Ch+var_20], eax
		mov	edx, [ebx]
		mov	ecx, [edx+0Ch]
		lea	ebp, [edx+ecx*4+14h]
		mov	ecx, [edx+8]
		lea	edx, [edx+ecx*4+14h]
		cmp	ebp, edx
		jz	short loc_6F1091B8
		lea	esi, [esi+edi*4+14h]
		jmp	short loc_6F1091A3
; ---------------------------------------------------------------------------
		align 10h

loc_6F1091A0:				; CODE XREF: _ZN5QListI7QStringE13detach_helperEv+56j
		add	esi, 4

loc_6F1091A3:				; CODE XREF: _ZN5QListI7QStringE13detach_helperEv+3Cj
		test	edx, edx
		jz	short loc_6F1091B1
		mov	ecx, [esi]
		mov	[edx], ecx
		lock inc dword ptr [ecx]
		setnz	al

loc_6F1091B1:				; CODE XREF: _ZN5QListI7QStringE13detach_helperEv+45j
		add	edx, 4
		cmp	ebp, edx
		jnz	short loc_6F1091A0

loc_6F1091B8:				; CODE XREF: _ZN5QListI7QStringE13detach_helperEv+36j
		mov	eax, [esp+3Ch+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6F1091D2
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE

loc_6F1091D2:				; CODE XREF: _ZN5QListI7QStringE13detach_helperEv+64j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_ZN5QListI7QStringE13detach_helperEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. _ZN5QListI7QStringE4freeEPN9QListData4DataE

; =============== S U B	R O U T	I N E =======================================


		public _ZN5QListI7QStringE4freeEPN9QListData4DataE
_ZN5QListI7QStringE4freeEPN9QListData4DataE proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+FAp
					; _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+1F1p	...

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_4]
		mov	edx, [edi+0Ch]
		lea	eax, [edi+14h]
		lea	ebx, [eax+edx*4]
		mov	edx, [edi+8]
		lea	esi, [eax+edx*4]
		cmp	ebx, esi
		jz	short loc_6F10921E
		mov	ebp, ds:_ZN7QString4freeEPNS_4DataE

loc_6F109204:				; CODE XREF: _ZN5QListI7QStringE4freeEPN9QListData4DataE+3Cj
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6F10921A
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN7QString4freeEPNS_4DataE

loc_6F10921A:				; CODE XREF: _ZN5QListI7QStringE4freeEPN9QListData4DataE+31j
		cmp	esi, ebx
		jnz	short loc_6F109204

loc_6F10921E:				; CODE XREF: _ZN5QListI7QStringE4freeEPN9QListData4DataE+1Cj
		mov	eax, ds:_Z5qFreePv
		mov	[esp+2Ch+arg_0], edi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
_ZN5QListI7QStringE4freeEPN9QListData4DataE endp

; Exported entry  26. _ZN5QListI7QStringE6appendERKS0_

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ZN5QListI7QStringE6appendERKS0_
_ZN5QListI7QStringE6appendERKS0_ proc near
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString+51p

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 6Ch
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6F10B4E0
		mov	[ebp+var_40], offset dword_6F10BB18
		mov	[ebp+var_38], offset sub_6F1093B0
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_6F109370
		mov	[ebp+var_20], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_20]
		mov	[ebp+var_64], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	ebx, [ebp+var_20]
		lea	edi, ds:0[ebx*4]
		mov	[ebp+var_60], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	esi, [ecx+8]
		lea	eax, [ecx+esi*4+14h]
		lea	edx, [eax+edi]
		cmp	eax, edx
		jz	short loc_6F1092FA
		mov	ebx, [ebp+var_64]
		mov	edi, edx
		jmp	short loc_6F1092D3
; ---------------------------------------------------------------------------
		align 10h

loc_6F1092D0:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+B6j
		add	ebx, 4

loc_6F1092D3:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+9Cj
		test	eax, eax
		jz	short loc_6F1092E1
		mov	ecx, [ebx]
		mov	[eax], ecx
		lock inc dword ptr [ecx]
		setnz	dl

loc_6F1092E1:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+A5j
		add	eax, 4
		cmp	edi, eax
		jnz	short loc_6F1092D0
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+var_20]
		mov	ecx, [eax]
		lea	edi, ds:0[ebx*4]
		mov	esi, [ecx+8]

loc_6F1092FA:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+95j
		mov	eax, [ecx+0Ch]
		lea	edx, [ecx+esi*4+14h]
		lea	edx, [edx+ebx*4+4]
		lea	eax, [ecx+eax*4+14h]
		cmp	eax, edx
		jz	short loc_6F10932A
		add	edi, [ebp+var_64]
		jmp	short loc_6F109315
; ---------------------------------------------------------------------------

loc_6F109312:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+F8j
		add	edi, 4

loc_6F109315:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+E0j
		test	edx, edx
		jz	short loc_6F109323
		mov	ecx, [edi]
		mov	[edx], ecx
		lock inc dword ptr [ecx]
		setnz	bl

loc_6F109323:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+E7j
		add	edx, 4
		cmp	eax, edx
		jnz	short loc_6F109312

loc_6F10932A:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+DBj
		mov	edx, [ebp+var_60]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jz	short loc_6F109398

loc_6F109337:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+17Ej
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+14h]
		mov	edx, [ebp+var_20]
		lea	edx, [eax+edx*4]
		test	edx, edx
		jz	short loc_6F10935A
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl

loc_6F10935A:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+11Bj
					; _ZN5QListI7QStringE6appendERKS0_+166j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F109370:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+3Cj
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	[ebp+var_1C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_58], 2
		mov	[esp], ecx
		call	ds:_ZN9QListData6appendEv
		mov	edx, [ebp+var_1C]
		mov	[eax], edx
		jmp	short loc_6F10935A
; ---------------------------------------------------------------------------

loc_6F109398:				; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+105j
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], ecx
		call	_ZN5QListI7QStringE4freeEPN9QListData4DataE
		jmp	short loc_6F109337
_ZN5QListI7QStringE6appendERKS0_ endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F1093B0	proc near		; DATA XREF: _ZN5QListI7QStringE6appendERKS0_+23o
		add	ebp, 18h
		mov	ecx, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-68h], ecx
		jz	short loc_6F1093DD
		mov	dword ptr [ebp-58h], 0
		call	sub_6F10AEE0
		mov	eax, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F1093DD:				; CODE XREF: sub_6F1093B0+Dj
		mov	eax, [ebp-68h]
		mov	[esp+0], eax
		call	sub_6F10AC10
		lea	edx, [ebp-1Ch]
		mov	[esp+0], edx
		mov	dword ptr [ebp-58h], 1
		call	_ZN7QStringD1Ev
		call	sub_6F10B420
sub_6F1093B0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. _ZN7QStringD1Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN7QStringD1Ev
_ZN7QStringD1Ev	proc near		; CODE XREF: sub_6F101FB8+1Cp
					; sub_6F101FB8+2Ep ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_6F109417
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6F109417:				; CODE XREF: _ZN7QStringD1Ev+11j
		mov	eax, [edx]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, ds:_ZN7QString4freeEPNS_4DataE
		add	esp, 0Ch
		jmp	eax
_ZN7QStringD1Ev	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F109430	proc near		; CODE XREF: sub_6F10A720+26Ep
					; sub_6F10AB81+40p

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BC0C
		mov	[ebp+var_18], offset sub_6F1094B8
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, dword_6F10C01C
		mov	eax, [ebp+arg_0]
		test	edx, edx
		mov	eax, [eax]
		jz	short loc_6F109481
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6F1080A0
		test	eax, eax
		jnz	short loc_6F10948E

loc_6F109481:				; CODE XREF: sub_6F109430+3Cj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F10948E:				; CODE XREF: sub_6F109430+4Fj
		mov	dword ptr [esp], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112F00
		mov	dword ptr [esp+8], offset sub_6F109570
		mov	dword ptr [esp+4], offset off_6F112A2C
		mov	[esp], eax
		call	sub_6F10B480
sub_6F109430	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F1094B8	proc near		; DATA XREF: sub_6F109430+20o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6F1094D3
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F1094D3:				; CODE XREF: sub_6F1094B8+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6F10AD50
sub_6F1094B8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1094F0	proc near		; DATA XREF: .rdata:6F112EECo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6F112EE8
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F10A640
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6F10A700
sub_6F1094F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109520	proc near		; DATA XREF: sub_6F10A720+20Ao
					; sub_6F10A9B0+1B9o ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112EE8
		add	esp, 0Ch
		jmp	sub_6F10A640
sub_6F109520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109540	proc near		; DATA XREF: .rdata:6F112F04o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6F112F00
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F10A640
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6F10A700
sub_6F109540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109570	proc near		; DATA XREF: sub_6F109430+70o
					; sub_6F10A720+1E0o ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112F00
		add	esp, 0Ch
		jmp	sub_6F10A640
sub_6F109570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6F109590	proc near		; DATA XREF: .data:off_6F110A48o

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_6F10B4E0
		mov	[ebp+var_30], offset dword_6F10BC64
		mov	[ebp+var_28], offset sub_6F10973D
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6F110A58, 0
		jz	short loc_6F109600
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 1Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCalle	; "terminate called recursively\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6F109600:				; CODE XREF: sub_6F109590+36j
		mov	byte_6F110A58, 1
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6F10AEB0
		test	eax, eax
		jz	loc_6F1096F5
		mov	eax, [eax+4]
		mov	[ebp+var_C], 0FFFFFFFFh
		mov	dword ptr [esp+8], 0 ; int
		mov	dword ptr [esp+4], 0 ; char *
		mov	[ebp+var_50], eax
		lea	eax, [ebp+var_C]
		mov	[esp+0Ch], eax	; int
		mov	eax, [ebp+var_50]
		mov	[esp], eax	; int
		call	sub_6F106AC0
		mov	dword ptr [esp+8], 30h ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCal_0	; "terminate called after throwing an inst"...
		mov	[ebp+var_54], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		call	fwrite
		mov	edx, [ebp+var_C]
		test	edx, edx
		jnz	short loc_6F1096D5
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+4], eax	; FILE *
		mov	eax, [ebp+var_54]
		mov	[esp], eax	; char *
		call	fputs

loc_6F109693:				; CODE XREF: sub_6F109590+163j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 2 ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	asc_6F1114C1 ; "'\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite
		mov	eax, [ebp+var_C]
		test	eax, eax
		jz	short loc_6F109730

loc_6F1096C9:				; CODE XREF: sub_6F109590+1ABj
		mov	[ebp+var_48], 2
		call	sub_6F10B420
; ---------------------------------------------------------------------------

loc_6F1096D5:				; CODE XREF: sub_6F109590+EAj
		mov	eax, ds:_iob
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 40h
		mov	[esp+4], eax	; FILE *
		mov	eax, [ebp+var_50]
		mov	[esp], eax	; char *
		call	fputs
		jmp	short loc_6F109693
; ---------------------------------------------------------------------------

loc_6F1096F5:				; CODE XREF: sub_6F109590+85j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 2Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCal_1	; "terminate called without an active exce"...
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite

loc_6F109724:				; CODE XREF: sub_6F10973D+4Cj
		mov	[ebp+var_48], 0FFFFFFFFh
		call	abort
; ---------------------------------------------------------------------------

loc_6F109730:				; CODE XREF: sub_6F109590+137j
		mov	eax, [ebp+var_54]
		mov	[esp], eax	; void *
		call	free
		jmp	short loc_6F1096C9
sub_6F109590	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_6F10973D(size_t, size_t, FILE	*)
sub_6F10973D	proc near		; DATA XREF: sub_6F109590+1Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-58h], eax
		mov	eax, [ebp-40h]
		jz	short loc_6F10976D
		mov	dword ptr [ebp-48h], 0
		call	sub_6F10AEE0
		mov	eax, [ebp-58h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10976D:				; CODE XREF: sub_6F10973D+10j
		cmp	eax, 2
		jz	short loc_6F10978B
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_6F10AC10

loc_6F10977D:				; CODE XREF: sub_6F10973D+C4j
		mov	dword ptr [ebp-48h], 0
		call	sub_6F10AEE0
		jmp	short loc_6F109724
; ---------------------------------------------------------------------------

loc_6F10978B:				; CODE XREF: sub_6F10973D+33j
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_6F10AC10
		mov	edx, [eax]
		mov	[esp+0], eax
		mov	eax, [edx+8]
		mov	dword ptr [ebp-48h], 1
		call	eax
		mov	[ebp-5Ch], eax
		mov	eax, ds:_iob
		mov	[esp+arg_4], 0Bh ; size_t
		mov	[esp+arg_0], 1	; size_t
		mov	dword ptr [esp+0], offset aWhat	; "  what():  "
		add	eax, 40h
		mov	[esp+arg_8], eax ; FILE	*
		call	fwrite
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+arg_0], eax ; FILE	*
		mov	eax, [ebp-5Ch]
		mov	[esp+0], eax	; char *
		call	fputs
		mov	eax, ds:_iob
		mov	dword ptr [esp+0], 0Ah ; int
		add	eax, 40h
		mov	[esp+arg_0], eax ; FILE	*
		call	fputc
		jmp	loc_6F10977D
sub_6F10973D	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109810	proc near		; DATA XREF: .rdata:6F112CF8o
					; .rdata:6F112D58o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	sub_6F10A530
		mov	edx, eax
		mov	eax, 1
		test	dl, dl
		jnz	short loc_6F109851
		xor	eax, eax
		cmp	edi, 3
		jbe	short loc_6F109865

loc_6F109851:				; CODE XREF: sub_6F109810+38j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6F109865:				; CODE XREF: sub_6F109810+3Fj
		mov	eax, [ebx]
		mov	[esp+2Ch+arg_8], ebp
		mov	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_4], esi
		mov	ebp, [esp+2Ch+var_4]
		mov	[esp+2Ch+arg_0], ebx
		mov	esi, [esp+2Ch+var_C]
		mov	eax, [eax+14h]
		mov	ebx, [esp+2Ch+var_10]
		add	esp, 2Ch
		jmp	eax
sub_6F109810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109890	proc near		; CODE XREF: sub_6F1099F0+32p
					; sub_6F109C40+26p
					; DATA XREF: ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6F10A530
		mov	edx, eax
		xor	eax, eax
		test	dl, dl
		jz	short loc_6F1098CD
		mov	eax, [esp+1Ch+arg_8]
		mov	dword ptr [ebx+0Ch], 8
		mov	dword ptr [ebx+4], 6
		mov	[ebx], eax
		mov	eax, 1

loc_6F1098CD:				; CODE XREF: sub_6F109890+22j
		add	esp, 18h
		pop	ebx
		retn
sub_6F109890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1098E0	proc near		; DATA XREF: .rdata:6F112CFCo
					; .rdata:6F112D5Co ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		lea	ecx, [esp+2Ch+var_1C]
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_1C], 0
		mov	[esp+2Ch+var_18], 0
		mov	edx, [eax]
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, [ebx]
		mov	[esp+2Ch+var_14], 10h
		mov	[esp+2Ch+var_10], 0
		mov	[esp+2Ch+var_2C], eax
		mov	[esp+2Ch+var_24], ecx
		mov	ecx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], ecx
		call	dword ptr [edx+18h]
		mov	edx, [esp+2Ch+var_18]
		xor	eax, eax
		and	edx, 6
		cmp	edx, 6
		jnz	short loc_6F109943
		mov	eax, [esp+2Ch+var_1C]
		mov	[ebx], eax
		mov	eax, 1

loc_6F109943:				; CODE XREF: sub_6F1098E0+56j
		add	esp, 28h
		pop	ebx
		retn
sub_6F1098E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109950	proc near		; DATA XREF: .rdata:6F112D04o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_10]
		cmp	ebx, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_1C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		jz	short loc_6F1099B0

loc_6F109979:				; CODE XREF: sub_6F109950+72j
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	sub_6F10A530
		test	al, al
		jz	short loc_6F109999
		mov	[edi], ebx
		mov	[edi+4], ebp
		mov	dword ptr [edi+0Ch], 1

loc_6F109999:				; CODE XREF: sub_6F109950+3Bj
					; sub_6F109950+77j
		xor	eax, eax
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F1099B0:				; CODE XREF: sub_6F109950+27j
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	sub_6F10A530
		test	al, al
		jz	short loc_6F109979
		mov	[edi+8], ebp
		jmp	short loc_6F109999
sub_6F109950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1099D0	proc near		; DATA XREF: .rdata:6F112D08o

arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		cmp	eax, [esp+arg_8]
		setz	al
		movzx	eax, al
		lea	eax, [eax+eax*4+1]
		retn
sub_6F1099D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F1099F0	proc near		; DATA XREF: .rdata:6F112D60o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_2C], ebp
		call	sub_6F109890
		test	al, al
		jz	short loc_6F109A44
		mov	eax, 1
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6F109A44:				; CODE XREF: sub_6F1099F0+39j
		mov	eax, [ebp+8]
		mov	ebp, [esp+2Ch+var_4]
		mov	edx, [eax]
		mov	[esp+2Ch+arg_C], edi
		mov	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_8], esi
		mov	esi, [esp+2Ch+var_C]
		mov	[esp+2Ch+arg_4], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+arg_0], eax
		mov	eax, [edx+18h]
		add	esp, 2Ch
		jmp	eax
sub_6F1099F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109A80	proc near		; DATA XREF: .rdata:6F112D64o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 3Ch
		mov	ecx, [esp+3Ch+arg_14]
		mov	edx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_8], edi
		mov	eax, [esp+3Ch+arg_8]
		mov	edi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_20], ecx
		mov	ecx, [esp+3Ch+arg_18]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_1C]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_3C], edi
		call	sub_6F10A530
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_2C]
		test	al, al
		jz	short loc_6F109B10
		mov	eax, [esp+3Ch+var_24]
		test	ebp, ebp
		mov	[ebx], esi
		mov	[ebx+4], eax
		js	short loc_6F109B60
		add	esi, ebp
		xor	eax, eax
		cmp	ecx, esi
		setz	al
		lea	eax, [eax+eax*4+1]
		mov	[ebx+0Ch], eax

loc_6F109AF8:				; CODE XREF: sub_6F109A80+E3j
					; sub_6F109A80+ECj ...
		xor	eax, eax
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F109B10:				; CODE XREF: sub_6F109A80+59j
		cmp	esi, ecx
		jz	short loc_6F109B70

loc_6F109B14:				; CODE XREF: sub_6F109A80+112j
		mov	edi, [edi+8]
		mov	eax, [edi]
		mov	[esp+3Ch+arg_18], ecx
		mov	ecx, [esp+3Ch+var_20]
		mov	[esp+3Ch+arg_C], edx
		mov	edx, [esp+3Ch+var_24]
		mov	[esp+3Ch+arg_1C], ebx
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_10], esi
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_4], ebp
		mov	ebp, [esp+3Ch+var_4]
		mov	[esp+3Ch+arg_0], edi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_14], ecx
		mov	[esp+3Ch+arg_8], edx
		mov	eax, [eax+1Ch]
		add	esp, 3Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6F109B60:				; CODE XREF: sub_6F109A80+66j
		cmp	ebp, 0FFFFFFFEh
		jnz	short loc_6F109AF8
		mov	dword ptr [ebx+0Ch], 1
		jmp	short loc_6F109AF8
; ---------------------------------------------------------------------------
		align 10h

loc_6F109B70:				; CODE XREF: sub_6F109A80+92j
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_3C], edi
		mov	[esp+3Ch+var_38], eax
		call	sub_6F10A530
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_2C]
		test	al, al
		jz	short loc_6F109B14
		mov	edx, [esp+3Ch+var_24]
		mov	[ebx+8], edx
		jmp	loc_6F109AF8
sub_6F109A80	endp


; =============== S U B	R O U T	I N E =======================================


sub_6F109BA0	proc near		; DATA XREF: .rdata:6F112D68o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_8], edi
		mov	edx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], ebp
		mov	edi, [esp+3Ch+arg_C]
		mov	ebp, [esp+3Ch+arg_0]
		cmp	esi, ebx
		jz	short loc_6F109C00

loc_6F109BCB:				; CODE XREF: sub_6F109BA0+76j
		mov	eax, [ebp+8]
		mov	ebp, [esp+3Ch+var_4]
		mov	ecx, [eax]
		mov	[esp+3Ch+arg_10], esi
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_C], edi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_8], ebx
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_4], edx
		mov	[esp+3Ch+arg_0], eax
		mov	eax, [ecx+20h]
		add	esp, 3Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6F109C00:				; CODE XREF: sub_6F109BA0+29j
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebp
		call	sub_6F10A530
		mov	edx, [esp+3Ch+var_20]
		test	al, al
		jz	short loc_6F109BCB
		mov	eax, 6
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
sub_6F109BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109C40	proc near		; DATA XREF: .rdata:6F112DA0o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_36		= byte ptr -36h
var_35		= byte ptr -35h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [esp+4Ch+arg_8]
		mov	ebp, [esp+4Ch+arg_C]
		mov	eax, [esp+4Ch+arg_4]
		mov	edx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_40], ebp
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edx
		call	sub_6F109890
		test	al, al
		jnz	loc_6F109DC4
		mov	ecx, [ebp+8]
		mov	[esp+4Ch+var_34], ecx
		and	ecx, 10h
		jnz	loc_6F109E20

loc_6F109C83:				; CODE XREF: sub_6F109C40+1EBj
		mov	edx, [esp+4Ch+arg_0]
		movzx	ecx, byte ptr [esp+4Ch+var_34]
		mov	esi, [edx+0Ch]
		and	ecx, 1
		mov	[esp+4Ch+var_2D], cl
		lea	ebx, [edx+esi*8+8]
		jmp	short loc_6F109CE1
; ---------------------------------------------------------------------------
		align 10h

loc_6F109CA0:				; CODE XREF: sub_6F109C40+132j
					; sub_6F109C40+140j ...
		mov	eax, [esp+4Ch+var_28]
		cmp	eax, 3
		jle	short loc_6F109CB7
		cmp	[esp+4Ch+var_35], 0
		jnz	short loc_6F109CB7
		and	eax, 0FFFFFFFDh
		mov	[esp+4Ch+var_28], eax

loc_6F109CB7:				; CODE XREF: sub_6F109C40+67j
					; sub_6F109C40+6Ej
		mov	edx, [ebp+0Ch]
		test	edx, edx
		jz	loc_6F109D91
		mov	eax, [ebp+0]
		cmp	eax, [esp+4Ch+var_2C]
		jnz	loc_6F109E40
		test	eax, eax
		jz	loc_6F109DD1

loc_6F109CD7:				; CODE XREF: sub_6F109C40+1ADj
		mov	eax, [esp+4Ch+var_28]
		or	[ebp+4], eax

loc_6F109CDE:				; CODE XREF: sub_6F109C40+E3j
					; sub_6F109C40+127j ...
		sub	ebx, 8

loc_6F109CE1:				; CODE XREF: sub_6F109C40+5Aj
		test	esi, esi
		jz	loc_6F109E30
		mov	eax, [esp+4Ch+var_34]
		sub	esi, 1
		mov	[esp+4Ch+var_2C], 0
		mov	[esp+4Ch+var_28], 0
		mov	[esp+4Ch+var_20], 0
		mov	[esp+4Ch+var_24], eax
		mov	eax, [ebx+4]
		mov	edx, eax
		shr	edx, 1
		mov	ecx, edx
		and	ecx, 1
		mov	[esp+4Ch+var_35], cl
		jnz	short loc_6F109D25
		cmp	[esp+4Ch+var_2D], 0
		jz	short loc_6F109CDE

loc_6F109D25:				; CODE XREF: sub_6F109C40+DCj
		mov	edx, eax
		and	edx, 1
		mov	[esp+4Ch+var_36], dl
		xor	edx, edx
		test	edi, edi
		jz	short loc_6F109D45
		sar	eax, 8
		cmp	[esp+4Ch+var_36], 0
		jz	short loc_6F109D42
		add	eax, [edi]
		mov	eax, [eax]

loc_6F109D42:				; CODE XREF: sub_6F109C40+FCj
		lea	edx, [edi+eax]

loc_6F109D45:				; CODE XREF: sub_6F109C40+F2j
		mov	eax, [ebx]
		mov	ecx, [eax]
		lea	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_44], edx
		mov	edx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_48], edx
		mov	eax, [ebx]
		mov	[esp+4Ch+var_4C], eax
		call	dword ptr [ecx+18h]
		test	al, al
		jz	loc_6F109CDE
		cmp	[esp+4Ch+var_20], 8
		jnz	loc_6F109CA0
		cmp	[esp+4Ch+var_36], 0
		lea	esi, [esi+0]
		jz	loc_6F109CA0
		mov	eax, [ebx]
		mov	[esp+4Ch+var_20], eax
		jmp	loc_6F109CA0
; ---------------------------------------------------------------------------

loc_6F109D91:				; CODE XREF: sub_6F109C40+7Cj
		mov	eax, [esp+4Ch+var_2C]
		mov	[ebp+0], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[ebp+4], eax
		mov	edx, [esp+4Ch+var_24]
		cmp	eax, 3
		mov	[ebp+8], edx
		mov	edx, [esp+4Ch+var_20]
		mov	[ebp+0Ch], edx
		jle	short loc_6F109DC4
		test	al, 2
		jz	short loc_6F109E07
		mov	edx, [esp+4Ch+arg_0]
		test	byte ptr [edx+8], 1
		jnz	loc_6F109CDE

loc_6F109DC4:				; CODE XREF: sub_6F109C40+2Dj
					; sub_6F109C40+170j ...
		add	esp, 3Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F109DD1:				; CODE XREF: sub_6F109C40+91j
		mov	eax, [esp+4Ch+var_20]
		cmp	eax, 8
		jz	short loc_6F109DF3
		cmp	edx, 8
		jz	short loc_6F109DF3
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	sub_6F10A530
		test	al, al
		jnz	loc_6F109CD7

loc_6F109DF3:				; CODE XREF: sub_6F109C40+198j
					; sub_6F109C40+19Dj
		mov	dword ptr [ebp+4], 2
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F109E07:				; CODE XREF: sub_6F109C40+174j
		test	al, 1
		jz	short loc_6F109DC4
		mov	ecx, [esp+4Ch+arg_0]
		test	byte ptr [ecx+8], 2
		jnz	loc_6F109CDE
		jmp	short loc_6F109DC4
; ---------------------------------------------------------------------------
		align 10h

loc_6F109E20:				; CODE XREF: sub_6F109C40+3Dj
		mov	eax, [esp+4Ch+arg_0]
		mov	eax, [eax+8]
		mov	[esp+4Ch+var_34], eax
		jmp	loc_6F109C83
; ---------------------------------------------------------------------------

loc_6F109E30:				; CODE XREF: sub_6F109C40+A3j
		mov	eax, [ebp+4]
		test	eax, eax
		setnz	al
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F109E40:				; CODE XREF: sub_6F109C40+89j
		mov	dword ptr [ebp+0], 0
		mov	eax, 1
		mov	dword ptr [ebp+4], 2
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6F109C40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F109E60	proc near		; DATA XREF: .rdata:6F112DA4o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_45		= byte ptr -45h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [esp+7Ch+arg_1C]
		test	byte ptr [ebx+10h], 10h
		jz	short loc_6F109E81
		mov	edx, [esp+7Ch+arg_0]
		mov	eax, [edx+8]
		mov	[ebx+10h], eax

loc_6F109E81:				; CODE XREF: sub_6F109E60+12j
		mov	ecx, [esp+7Ch+arg_18]
		cmp	[esp+7Ch+arg_10], ecx
		jz	loc_6F10A2A1

loc_6F109E95:				; CODE XREF: sub_6F109E60+45Dj
		mov	eax, [esp+7Ch+arg_C]
		mov	edx, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edx
		call	sub_6F10A530
		test	al, al
		jnz	loc_6F10A135
		mov	esi, [esp+7Ch+arg_0]
		mov	eax, [esp+7Ch+arg_8]
		mov	ebp, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_45], 0
		mov	esi, [esi+0Ch]
		or	eax, 1
		mov	[esp+7Ch+var_40], eax
		mov	[esp+7Ch+var_50], esi
		lea	edi, [ebp+esi*8+8]
		jmp	loc_6F109F7A
; ---------------------------------------------------------------------------

loc_6F109EE8:				; CODE XREF: sub_6F109E60+202j
		mov	ebp, [ebx]
		test	ebp, ebp
		mov	[esp+7Ch+var_4C], ebp
		jz	loc_6F10A260

loc_6F109EF6:				; CODE XREF: sub_6F109E60+210j
		mov	ebp, [esp+7Ch+var_30]
		cmp	[esp+7Ch+var_4C], ebp
		jz	loc_6F10A233
		test	ebp, ebp
		jz	loc_6F10A240

loc_6F109F0C:				; CODE XREF: sub_6F109E60+3E2j
		cmp	ecx, 3
		mov	edx, [ebx+0Ch]
		jle	loc_6F10A090

loc_6F109F18:				; CODE XREF: sub_6F109E60+228j
		and	ecx, 1
		jnz	loc_6F10A1C1

loc_6F109F21:				; CODE XREF: sub_6F109E60+365j
		test	edx, edx
		jnz	short loc_6F109F27
		mov	dl, 1

loc_6F109F27:				; CODE XREF: sub_6F109E60+C3j
		test	esi, esi
		mov	ebp, esi
		mov	ecx, edx
		jnz	short loc_6F109F3B
		mov	bp, 1
		mov	[esp+7Ch+var_44], 1

loc_6F109F3B:				; CODE XREF: sub_6F109E60+CDj
					; sub_6F109E60+23Ej ...
		mov	eax, ecx
		xor	eax, ebp
		cmp	eax, 3
		jle	loc_6F10A110

loc_6F109F48:				; CODE XREF: sub_6F109E60+2A7j
		cmp	ebp, 3
		jg	loc_6F10A1A6
		mov	ebp, ecx

loc_6F109F53:				; CODE XREF: sub_6F109E60+35Cj
		test	ebp, 2
		mov	[ebx+0Ch], edx
		jnz	loc_6F10A18E
		and	ebp, 1
		jz	loc_6F10A18E
		mov	edx, [ebx+8]

loc_6F109F6E:				; CODE XREF: sub_6F109E60+21Cj
					; sub_6F109E60+2D0j ...
		cmp	edx, 4
		jz	loc_6F10A297

loc_6F109F77:				; CODE XREF: sub_6F109E60+33Bj
					; sub_6F109E60+417j
		sub	edi, 8

loc_6F109F7A:				; CODE XREF: sub_6F109E60+83j
		mov	edx, [esp+7Ch+var_50]
		test	edx, edx
		jz	loc_6F10A297
		mov	eax, [edi+4]
		mov	esi, [ebx+10h]
		sub	[esp+7Ch+var_50], 1
		mov	edx, [esp+7Ch+arg_8]
		mov	ecx, eax
		sar	ecx, 8
		test	al, 1
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_2C], 0
		mov	[esp+7Ch+var_28], 0
		mov	[esp+7Ch+var_24], 0
		mov	[esp+7Ch+var_20], esi
		jz	short loc_6F109FD5
		mov	ebp, [esp+7Ch+arg_10]
		mov	edx, [esp+7Ch+var_40]
		add	ecx, [ebp+0]
		mov	ecx, [ecx]

loc_6F109FD5:				; CODE XREF: sub_6F109E60+163j
		test	al, 2
		jnz	short loc_6F109FEA
		cmp	[esp+7Ch+arg_4], 0FFFFFFFEh
		jz	loc_6F10A198

loc_6F109FE7:				; CODE XREF: sub_6F109E60+341j
		and	edx, 0FFFFFFFDh

loc_6F109FEA:				; CODE XREF: sub_6F109E60+177j
		mov	eax, [edi]
		lea	ebp, [esp+7Ch+var_30]
		add	ecx, [esp+7Ch+arg_10]
		mov	esi, [eax]
		mov	[esp+7Ch+var_60], ebp
		mov	ebp, [esp+7Ch+arg_18]
		mov	[esp+7Ch+var_6C], ecx
		mov	ecx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_7C], eax
		mov	[esp+7Ch+var_64], ebp
		mov	ebp, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_70], ecx
		mov	[esp+7Ch+var_68], ebp
		mov	ebp, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_78], ebp
		call	dword ptr [esi+1Ch]
		mov	esi, [esp+7Ch+var_24]
		mov	ecx, [esp+7Ch+var_28]
		or	ecx, [ebx+8]
		cmp	esi, 2
		mov	edx, ecx
		mov	[ebx+8], ecx
		mov	[esp+7Ch+var_44], esi
		jz	loc_6F10A2E2
		cmp	esi, 6
		jz	loc_6F10A2E2
		cmp	[esp+7Ch+var_45], 0
		jz	loc_6F109EE8
		mov	ebp, [ebx]
		test	ebp, ebp
		mov	[esp+7Ch+var_4C], ebp
		jnz	loc_6F109EF6
		mov	ebp, [esp+7Ch+var_30]
		test	ebp, ebp
		jz	loc_6F109F6E
		cmp	ecx, 3
		mov	edx, [ebx+0Ch]
		jg	loc_6F109F18
		xchg	ax, ax

loc_6F10A090:				; CODE XREF: sub_6F109E60+B2j
		test	edx, edx
		mov	ecx, edx
		mov	ebp, esi
		jle	loc_6F10A1D7

loc_6F10A09C:				; CODE XREF: sub_6F109E60+371j
					; sub_6F109E60+3BEj ...
		test	esi, esi
		jg	loc_6F109F3B
		cmp	ecx, 3
		jle	short loc_6F10A0BF
		test	cl, 1
		lea	esi, [esi+0]
		jz	short loc_6F10A0F3
		mov	esi, [esp+7Ch+arg_0]
		test	byte ptr [esi+8], 2
		jz	short loc_6F10A0F3

loc_6F10A0BF:				; CODE XREF: sub_6F109E60+247j
		mov	ebp, [esp+7Ch+arg_4]
		mov	esi, [esp+7Ch+var_30]
		test	ebp, ebp
		js	loc_6F10A350
		add	esi, [esp+7Ch+arg_4]
		mov	ebp, 6
		cmp	[esp+7Ch+arg_18], esi
		mov	[esp+7Ch+var_44], 6
		jz	loc_6F109F3B

loc_6F10A0F3:				; CODE XREF: sub_6F109E60+250j
					; sub_6F109E60+25Dj ...
		mov	ebp, 1
		mov	eax, ecx
		xor	eax, ebp
		cmp	eax, 3
		mov	[esp+7Ch+var_44], 1
		jg	loc_6F109F48
		lea	esi, [esi+0]

loc_6F10A110:				; CODE XREF: sub_6F109E60+E2j
		and	ebp, ecx
		cmp	ebp, 3
		jg	loc_6F10A3B5
		mov	dword ptr [ebx], 0
		mov	edx, [ebx+8]
		mov	dword ptr [ebx+0Ch], 1
		mov	[esp+7Ch+var_45], 1
		jmp	loc_6F109F6E
; ---------------------------------------------------------------------------

loc_6F10A135:				; CODE XREF: sub_6F109E60+51j
		mov	edx, [esp+7Ch+arg_10]
		mov	[ebx], edx
		mov	ecx, [esp+7Ch+arg_8]
		mov	[ebx+4], ecx
		mov	eax, [esp+7Ch+arg_4]
		test	eax, eax
		js	short loc_6F10A180
		mov	eax, [esp+7Ch+arg_4]
		add	eax, edx
		cmp	[esp+7Ch+arg_18], eax
		setz	al
		movzx	eax, al
		lea	eax, [eax+eax*4+1]
		mov	[ebx+0Ch], eax
		xor	eax, eax

loc_6F10A172:				; CODE XREF: sub_6F109E60+428j
					; sub_6F109E60+43Cj ...
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10A180:				; CODE XREF: sub_6F109E60+2F1j
		cmp	[esp+7Ch+arg_4], 0FFFFFFFEh
		jz	loc_6F10A2D4

loc_6F10A18E:				; CODE XREF: sub_6F109E60+FCj
					; sub_6F109E60+105j
		add	esp, 6Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F10A198:				; CODE XREF: sub_6F109E60+181j
		and	esi, 3
		jz	loc_6F109F77
		jmp	loc_6F109FE7
; ---------------------------------------------------------------------------

loc_6F10A1A6:				; CODE XREF: sub_6F109E60+EBj
		mov	eax, [esp+7Ch+var_30]
		mov	edx, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_45], 0
		mov	[ebx], eax
		mov	eax, [esp+7Ch+var_2C]
		mov	[ebx+4], eax
		jmp	loc_6F109F53
; ---------------------------------------------------------------------------

loc_6F10A1C1:				; CODE XREF: sub_6F109E60+BBj
		test	byte ptr [ebx+10h], 2
		jz	loc_6F109F21
		test	edx, edx
		mov	ecx, edx
		mov	ebp, esi
		jg	loc_6F10A09C

loc_6F10A1D7:				; CODE XREF: sub_6F109E60+236j
		cmp	esi, 3
		mov	ebp, esi
		jle	short loc_6F10A1F3
		test	esi, 1
		jz	short loc_6F10A250
		mov	eax, [esp+7Ch+arg_0]
		test	byte ptr [eax+8], 2
		jz	short loc_6F10A250

loc_6F10A1F3:				; CODE XREF: sub_6F109E60+37Cj
		mov	eax, [esp+7Ch+arg_4]
		test	eax, eax
		js	loc_6F10A2F7
		mov	eax, [esp+7Ch+var_4C]
		mov	ecx, 6
		mov	edx, 6
		add	eax, [esp+7Ch+arg_4]
		cmp	[esp+7Ch+arg_18], eax
		jz	loc_6F10A09C

loc_6F10A224:				; CODE XREF: sub_6F109E60+49Fj
		mov	ecx, 1
		mov	edx, 1
		jmp	loc_6F10A09C
; ---------------------------------------------------------------------------

loc_6F10A233:				; CODE XREF: sub_6F109E60+9Ej
		mov	eax, [esp+7Ch+var_2C]
		or	[ebx+4], eax
		jmp	loc_6F109F6E
; ---------------------------------------------------------------------------
		align 10h

loc_6F10A240:				; CODE XREF: sub_6F109E60+A6j
		test	al, al
		jnz	loc_6F109F0C
		jmp	loc_6F109F6E
; ---------------------------------------------------------------------------
		align 10h

loc_6F10A250:				; CODE XREF: sub_6F109E60+384j
					; sub_6F109E60+391j
		mov	ecx, 1
		mov	edx, 1
		jmp	loc_6F109F3B
; ---------------------------------------------------------------------------
		align 10h

loc_6F10A260:				; CODE XREF: sub_6F109E60+90j
		mov	esi, [esp+7Ch+var_30]
		mov	ebp, [esp+7Ch+var_2C]
		test	esi, esi
		mov	[ebx], esi
		mov	[ebx+4], ebp
		jz	short loc_6F10A28E
		test	ecx, ecx
		mov	[esp+7Ch+var_45], al
		jz	loc_6F109F77
		mov	ecx, [esp+7Ch+arg_0]
		test	byte ptr [ecx+8], 1
		jz	loc_6F10A172

loc_6F10A28E:				; CODE XREF: sub_6F109E60+40Fj
		mov	[esp+7Ch+var_45], al
		jmp	loc_6F109F6E
; ---------------------------------------------------------------------------

loc_6F10A297:				; CODE XREF: sub_6F109E60+111j
					; sub_6F109E60+120j
		movzx	eax, [esp+7Ch+var_45]
		jmp	loc_6F10A172
; ---------------------------------------------------------------------------

loc_6F10A2A1:				; CODE XREF: sub_6F109E60+2Fj
		mov	esi, [esp+7Ch+arg_14]
		mov	ebp, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6F10A530
		test	al, al
		jz	loc_6F109E95
		mov	eax, [esp+7Ch+arg_8]
		mov	[ebx+8], eax
		xor	eax, eax
		jmp	loc_6F10A172
; ---------------------------------------------------------------------------

loc_6F10A2D4:				; CODE XREF: sub_6F109E60+328j
		mov	dword ptr [ebx+0Ch], 1
		xor	eax, eax
		jmp	loc_6F10A172
; ---------------------------------------------------------------------------

loc_6F10A2E2:				; CODE XREF: sub_6F109E60+1EEj
					; sub_6F109E60+1F7j
		mov	edx, [esp+7Ch+var_30]
		mov	[ebx+0Ch], esi
		mov	[ebx], edx
		mov	edx, [esp+7Ch+var_2C]
		mov	[ebx+4], edx
		jmp	loc_6F10A172
; ---------------------------------------------------------------------------

loc_6F10A2F7:				; CODE XREF: sub_6F109E60+39Cj
		cmp	[esp+7Ch+arg_4], 0FFFFFFFEh
		jz	loc_6F10A224
		mov	edx, [esp+7Ch+arg_C]
		mov	ecx, [esp+7Ch+arg_18]
		mov	eax, [edx]
		mov	edx, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_6C], ecx
		mov	ecx, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_70], edx
		mov	edx, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_74], ecx
		mov	ecx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], ecx
		call	dword ptr [eax+20h]
		mov	edx, eax
		mov	ecx, eax
		jmp	loc_6F10A09C
; ---------------------------------------------------------------------------
		align 10h

loc_6F10A350:				; CODE XREF: sub_6F109E60+26Cj
		cmp	[esp+7Ch+arg_4], 0FFFFFFFEh
		jz	loc_6F10A0F3
		mov	ebp, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_58], edx
		mov	[esp+7Ch+var_54], ecx
		mov	eax, [ebp+0]
		mov	ebp, [esp+7Ch+arg_18]
		mov	[esp+7Ch+var_74], esi
		mov	esi, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_6C], ebp
		mov	ebp, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_70], ebp
		mov	ebp, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_7C], ebp
		call	dword ptr [eax+20h]
		mov	edx, [esp+7Ch+var_58]
		mov	ecx, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_44], eax
		mov	ebp, eax
		jmp	loc_6F109F3B
; ---------------------------------------------------------------------------

loc_6F10A3B5:				; CODE XREF: sub_6F109E60+2B5j
		mov	dword ptr [ebx], 0
		mov	eax, 1
		mov	dword ptr [ebx+0Ch], 2
		jmp	loc_6F10A172
sub_6F109E60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A3D0	proc near		; DATA XREF: .rdata:6F112DA8o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_30		= dword	ptr -30h
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [esp+5Ch+arg_8]
		cmp	edi, [esp+5Ch+arg_10]
		mov	ebx, [esp+5Ch+arg_0]
		mov	ebp, [esp+5Ch+arg_4]
		jz	loc_6F10A479

loc_6F10A3ED:				; CODE XREF: sub_6F10A3D0+C4j
		mov	esi, [ebx+0Ch]
		mov	[esp+5Ch+var_30], edi
		lea	ebx, [ebx+esi*8+0Ch]
		jmp	short loc_6F10A456
; ---------------------------------------------------------------------------
		align 10h

loc_6F10A400:				; CODE XREF: sub_6F10A3D0+88j
		mov	edx, [ebx]
		sub	esi, 1
		test	dl, 2
		jz	short loc_6F10A453
		mov	eax, edx
		mov	ecx, edx
		sar	eax, 8
		and	ecx, 1
		mov	[esp+5Ch+var_1D], cl
		jz	short loc_6F10A427
		cmp	ebp, 0FFFFFFFDh
		jz	short loc_6F10A453
		mov	edi, [esp+5Ch+var_30]
		add	eax, [edi]
		mov	eax, [eax]

loc_6F10A427:				; CODE XREF: sub_6F10A3D0+48j
		mov	edx, [ebx-4]
		mov	edi, [esp+5Ch+arg_10]
		add	eax, [esp+5Ch+var_30]
		mov	ecx, [edx]
		mov	[esp+5Ch+var_4C], edi
		mov	edi, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], ebp
		mov	[esp+5Ch+var_5C], edx
		mov	[esp+5Ch+var_50], edi
		call	dword ptr [ecx+20h]
		cmp	eax, 3
		jg	short loc_6F10A467

loc_6F10A453:				; CODE XREF: sub_6F10A3D0+38j
					; sub_6F10A3D0+4Dj
		sub	ebx, 8

loc_6F10A456:				; CODE XREF: sub_6F10A3D0+28j
		test	esi, esi
		jnz	short loc_6F10A400
		mov	eax, 1

loc_6F10A45F:				; CODE XREF: sub_6F10A3D0+9Cj
					; sub_6F10A3D0+C2j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F10A467:				; CODE XREF: sub_6F10A3D0+81j
		cmp	[esp+5Ch+var_1D], 0
		jz	short loc_6F10A45F
		add	esp, 4Ch
		or	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6F10A479:				; CODE XREF: sub_6F10A3D0+17j
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_5C], ebx
		mov	[esp+5Ch+var_58], eax
		call	sub_6F10A530
		mov	edx, eax
		mov	eax, 6
		test	dl, dl
		jnz	short loc_6F10A45F
		jmp	loc_6F10A3ED
sub_6F10A3D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A4A0	proc near		; DATA XREF: .rdata:6F112EF0o
		mov	eax, offset a__gnu_cxx__con ; "__gnu_cxx::__concurrence_lock_error"
		retn
sub_6F10A4A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A4B0	proc near		; DATA XREF: .rdata:6F112F08o
		mov	eax, offset a__gnu_cxx__c_0 ; "__gnu_cxx::__concurrence_unlock_error"
		retn
sub_6F10A4B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A4C0	proc near		; DATA XREF: .rdata:6F112F20o
		mov	eax, offset aStdBad_excepti ; "std::bad_exception"
		retn
sub_6F10A4C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A4D0	proc near		; DATA XREF: .rdata:6F112F38o
		mov	eax, offset aStdBad_alloc ; "std::bad_alloc"
		retn
sub_6F10A4D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A4E0	proc near		; DATA XREF: .rdata:6F112F50o
		mov	eax, offset aStdException ; "std::exception"
		retn
sub_6F10A4E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A4F0	proc near		; DATA XREF: .rdata:6F112F78o
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	sub_6F10A530
sub_6F10A4F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A500	proc near		; DATA XREF: .rdata:6F112F7Co
		xor	eax, eax
		retn
sub_6F10A500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A510	proc near		; DATA XREF: .rdata:6F112CF0o
					; .rdata:6F112D50o ...
		xor	eax, eax
		retn
sub_6F10A510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A520	proc near		; DATA XREF: .rdata:6F112CF4o
					; .rdata:6F112D54o ...
		xor	eax, eax
		retn
sub_6F10A520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A530	proc near		; CODE XREF: sub_6F109810+2Ap
					; sub_6F109890+17p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, 1
		mov	edx, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_4]
		cmp	ecx, edx
		jz	short loc_6F10A55B
		mov	eax, [ecx+4]
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, [edx+4]
		mov	[esp+1Ch+var_1C], eax ;	char *
		call	strcmp
		test	eax, eax
		setz	al

loc_6F10A55B:				; CODE XREF: sub_6F10A530+12j
		add	esp, 1Ch
		retn
sub_6F10A530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A560	proc near		; DATA XREF: .rdata:6F112F1Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112F48
		add	esp, 0Ch
		jmp	sub_6F10A700
sub_6F10A560	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A580	proc near		; DATA XREF: sub_6F10ADBD+C8o
					; .rdata:off_6F112F18o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6F112F48
		retn
sub_6F10A580	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6F112F48
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A5A0	proc near		; DATA XREF: .rdata:6F112F34o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6F112F30
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F10A640
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6F10A700
sub_6F10A5A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A5D0	proc near		; DATA XREF: sub_6F10A720+86o
					; .rdata:off_6F112F30o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112F30
		add	esp, 0Ch
		jmp	sub_6F10A640
sub_6F10A5D0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_6F112F30
		add	esp, 0Ch
		jmp	sub_6F10A640
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A610	proc near		; DATA XREF: .rdata:6F112F4Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112F48
		add	esp, 0Ch
		jmp	sub_6F10A700
sub_6F10A610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A630	proc near		; DATA XREF: .rdata:off_6F112F48o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6F112F48
		retn
sub_6F10A630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A640	proc near		; CODE XREF: sub_6F1094F0+11p
					; sub_6F109520+10j ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6F112F48
		retn
sub_6F10A640	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A650	proc near		; DATA XREF: .rdata:6F112F6Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6F112F68
		add	esp, 0Ch
		jmp	sub_6F10A700
sub_6F10A650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A670	proc near		; DATA XREF: .rdata:off_6F112F68o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6F112F68
		retn
sub_6F10A670	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10A680	proc near		; CODE XREF: sub_6F108C00+11p
					; sub_6F108C30+10j ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6F112F68
		retn
sub_6F10A680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10A690	proc near		; CODE XREF: sub_6F10B4E0+58Ep

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, off_6F110A4C
		mov	[esp+1Ch+var_1C], eax
		call	sub_6F108BB0
sub_6F10A690	endp

; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, off_6F110A48
		mov	off_6F110A48, edx
		retn
; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, off_6F110A4C
		mov	off_6F110A4C, edx
		retn
; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, dword_6F110A5C
		mov	dword_6F110A5C,	edx
		retn
; ---------------------------------------------------------------------------
		sub	esp, 0Ch
		call	sub_6F10B260
		mov	eax, [eax+4]
		test	eax, eax
		setnz	al
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10A6F0	proc near		; CODE XREF: sub_6F108BB0+7p
					; sub_6F10A720+25Cp ...

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, off_6F110A48
		mov	[esp+1Ch+var_1C], eax
		call	sub_6F108B20
sub_6F10A6F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6F10A700	proc near		; CODE XREF: sub_6F10194A+44p
					; _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+BAp ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_6F10A713
		add	esp, 0Ch
		jmp	free
; ---------------------------------------------------------------------------

loc_6F10A713:				; CODE XREF: sub_6F10A700+9j
		add	esp, 0Ch
		retn
sub_6F10A700	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6F10A720(size_t)
sub_6F10A720	proc near		; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+54p
					; _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE+76p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BBC8
		mov	[ebp+var_18], offset loc_6F10A7C5
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_6F10A772
		mov	[ebp+arg_0], 1
		jmp	short loc_6F10A772
; ---------------------------------------------------------------------------
		align 10h

loc_6F10A760:				; CODE XREF: sub_6F10A720+62j
		mov	eax, dword_6F110A5C
		test	eax, eax
		jz	short loc_6F10A794
		mov	[ebp+var_38], 1
		call	eax ; dword_6F110A5C

loc_6F10A772:				; CODE XREF: sub_6F10A720+34j
					; sub_6F10A720+3Dj
		mov	eax, [ebp+arg_0]
		mov	[esp], eax	; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6F10A760
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F10A794:				; CODE XREF: sub_6F10A720+47j
		mov	dword ptr [esp], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112F30
		mov	dword ptr [esp+8], offset sub_6F10A5D0
		mov	dword ptr [esp+4], offset off_6F112A44
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6F10B480
; ---------------------------------------------------------------------------

loc_6F10A7C5:				; DATA XREF: sub_6F10A720+20o
		add	ebp, 8
		cmp	[ebp+var_30], 0FFFFFFFFh
		mov	eax, [ebp+var_34]
		jz	short loc_6F10A7E0
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10A7E0:				; CODE XREF: sub_6F10A720+AFj
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_6F10AD50
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	edi
		sub	esp, 64h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6F10B4E0
		mov	[ebp+var_30], offset dword_6F10BC50
		mov	[ebp+var_28], offset loc_6F10A942
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 50h ; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	short loc_6F10A860

loc_6F10A833:				; CODE XREF: sub_6F10A720+1B1j
					; sub_6F10A720+1C8j
		call	sub_6F10B260
		mov	edi, [ebp+var_50]
		mov	ecx, 14h
		add	dword ptr [eax+4], 1
		xor	eax, eax
		rep stosd
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		add	esp, 64h
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10A860:				; CODE XREF: sub_6F10A720+111j
		mov	ecx, dword_6F10C01C
		mov	[ebp+var_C], offset dword_6F110A50
		test	ecx, ecx
		jz	short loc_6F10A88C
		mov	dword ptr [esp], offset	dword_6F110A50
		mov	[ebp+var_48], 3
		call	sub_6F1081C0
		test	eax, eax
		jnz	loc_6F10A918

loc_6F10A88C:				; CODE XREF: sub_6F10A720+14Fj
		mov	edx, dword_6F10C02C
		xor	ecx, ecx
		mov	eax, edx
		jmp	short loc_6F10A8A6
; ---------------------------------------------------------------------------

loc_6F10A898:				; CODE XREF: sub_6F10A720+188j
		add	ecx, 1
		cmp	ecx, 20h
		jz	loc_6F10A975
		shr	eax, 1

loc_6F10A8A6:				; CODE XREF: sub_6F10A720+176j
		test	al, 1
		jnz	short loc_6F10A898
		mov	eax, 1
		shl	eax, cl
		or	eax, edx
		mov	edx, dword_6F10C01C
		mov	dword_6F10C02C,	eax
		lea	eax, [ecx+ecx*4]
		shl	eax, 4
		add	eax, offset dword_6F110040
		test	edx, edx
		mov	[ebp+var_50], eax
		mov	eax, [ebp+var_C]
		jz	loc_6F10A833
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	sub_6F1080A0
		test	eax, eax
		jz	loc_6F10A833
		mov	dword ptr [esp], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112F00
		mov	dword ptr [esp+8], offset sub_6F109570
		mov	dword ptr [esp+4], offset off_6F112A2C
		mov	[esp], eax
		call	sub_6F10B480
; ---------------------------------------------------------------------------

loc_6F10A918:				; CODE XREF: sub_6F10A720+166j
		mov	dword ptr [esp], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112EE8
		mov	dword ptr [esp+8], offset sub_6F109520
		mov	dword ptr [esp+4], offset off_6F112A20
		mov	[esp], eax
		call	sub_6F10B480
; ---------------------------------------------------------------------------

loc_6F10A942:				; DATA XREF: sub_6F10A720+F1o
		add	ebp, 8
		mov	edx, [ebp+var_44]
		mov	eax, [ebp+var_48]
		mov	[ebp+var_54], edx
		mov	edx, [ebp+var_40]
		cmp	eax, 1
		mov	[ebp+var_58], edx
		jz	short loc_6F10A981
		cmp	eax, 2
		jz	short loc_6F10A993
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6F10A999

loc_6F10A963:				; CODE XREF: sub_6F10A720+277j
		mov	eax, [ebp+var_54]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10A975:				; CODE XREF: sub_6F10A720+17Ej
		mov	[ebp+var_48], 2
		call	sub_6F10A6F0
; ---------------------------------------------------------------------------

loc_6F10A981:				; CODE XREF: sub_6F10A720+237j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6F109430

loc_6F10A993:				; CODE XREF: sub_6F10A720+23Cj
		cmp	[ebp+var_58], 0FFFFFFFFh
		jnz	short loc_6F10A963

loc_6F10A999:				; CODE XREF: sub_6F10A720+241j
		mov	edx, [ebp+var_54]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	sub_6F10AD50
sub_6F10A720	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F10A9B0	proc near		; CODE XREF: sub_6F109430+65p
					; sub_6F10A720+7Bp ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	edi
		sub	esp, 74h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6F10B4E0
		mov	[ebp+var_30], offset dword_6F10BC3C
		mov	[ebp+var_28], offset sub_6F10AB81
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		add	eax, 60h
		mov	[ebp+var_54], eax
		mov	[esp], eax	; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	short loc_6F10AA60

loc_6F10A9F8:				; CODE XREF: sub_6F10A9B0+135j
					; sub_6F10A9B0+14Cj
		call	sub_6F10B260
		mov	edi, [ebp+var_50]
		mov	edx, 60h
		add	dword ptr [eax+4], 1
		test	edi, 1
		jnz	loc_6F10AB30
		test	edi, 2
		jnz	loc_6F10AB47

loc_6F10AA21:				; CODE XREF: sub_6F10A9B0+191j
					; sub_6F10A9B0+1A2j
		mov	ecx, edx
		xor	eax, eax
		shr	ecx, 2
		test	dl, 2
		rep stosd
		jz	short loc_6F10AA37
		mov	word ptr [edi],	0
		add	edi, 2

loc_6F10AA37:				; CODE XREF: sub_6F10A9B0+7Dj
		and	edx, 1
		jz	short loc_6F10AA3F
		mov	byte ptr [edi],	0

loc_6F10AA3F:				; CODE XREF: sub_6F10A9B0+8Aj
		mov	eax, [ebp+var_50]
		add	eax, 60h
		mov	[ebp+var_58], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_58]
		add	esp, 74h
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AA60:				; CODE XREF: sub_6F10A9B0+46j
		mov	eax, dword_6F10C01C
		mov	[ebp+var_C], offset dword_6F110A50
		test	eax, eax
		jz	short loc_6F10AA8B
		mov	dword ptr [esp], offset	dword_6F110A50
		mov	[ebp+var_48], 3
		call	sub_6F1081C0
		test	eax, eax
		jnz	loc_6F10AB57

loc_6F10AA8B:				; CODE XREF: sub_6F10A9B0+BEj
		mov	eax, dword_6F10C028
		xor	ecx, ecx
		cmp	[ebp+var_54], 200h
		mov	edx, eax
		jbe	short loc_6F10AABA

loc_6F10AA9D:				; CODE XREF: sub_6F10A9B0+106j
		mov	[ebp+var_48], 2
		call	sub_6F10A6F0
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AAB0:				; CODE XREF: sub_6F10A9B0+10Dj
		add	ecx, 1
		cmp	ecx, 20h
		jz	short loc_6F10AA9D
		shr	edx, 1

loc_6F10AABA:				; CODE XREF: sub_6F10A9B0+EBj
		test	dl, 1
		jnz	short loc_6F10AAB0
		mov	edi, dword_6F10C01C
		mov	edx, 1
		shl	edx, cl
		shl	ecx, 9
		or	edx, eax
		mov	eax, [ebp+var_C]
		add	ecx, offset dword_6F10C040
		test	edi, edi
		mov	dword_6F10C028,	edx
		mov	[ebp+var_50], ecx
		jz	loc_6F10A9F8
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	sub_6F1080A0
		test	eax, eax
		jz	loc_6F10A9F8
		mov	dword ptr [esp], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112F00
		mov	dword ptr [esp+8], offset sub_6F109570
		mov	dword ptr [esp+4], offset off_6F112A2C
		mov	[esp], eax
		call	sub_6F10B480
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AB30:				; CODE XREF: sub_6F10A9B0+5Fj
		mov	byte ptr [edi],	0
		mov	edi, [ebp+var_50]
		mov	dl, 5Fh
		add	edi, 1
		test	edi, 2
		jz	loc_6F10AA21

loc_6F10AB47:				; CODE XREF: sub_6F10A9B0+6Bj
		mov	word ptr [edi],	0
		sub	edx, 2
		add	edi, 2
		jmp	loc_6F10AA21
; ---------------------------------------------------------------------------

loc_6F10AB57:				; CODE XREF: sub_6F10A9B0+D5j
		mov	dword ptr [esp], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112EE8
		mov	dword ptr [esp+8], offset sub_6F109520
		mov	dword ptr [esp+4], offset off_6F112A20
		mov	[esp], eax
		call	sub_6F10B480
sub_6F10A9B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10AB81	proc near		; DATA XREF: sub_6F10A9B0+21o
		add	ebp, 8
		mov	edx, [ebp-44h]
		mov	eax, [ebp-48h]
		mov	[ebp-5Ch], edx
		mov	edx, [ebp-40h]
		cmp	eax, 1
		mov	[ebp-60h], edx
		jz	short loc_6F10ABB4
		cmp	eax, 2
		jz	short loc_6F10ABC6
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6F10ABDE
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10ABB4:				; CODE XREF: sub_6F10AB81+15j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	sub_6F109430

loc_6F10ABC6:				; CODE XREF: sub_6F10AB81+1Aj
		cmp	dword ptr [ebp-60h], 0FFFFFFFFh
		jz	short loc_6F10ABF0
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10ABDE:				; CODE XREF: sub_6F10AB81+1Fj
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	sub_6F10AD50
; ---------------------------------------------------------------------------

loc_6F10ABF0:				; CODE XREF: sub_6F10AB81+49j
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	sub_6F10AD50
sub_6F10AB81	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F10AC10	proc near		; CODE XREF: sub_6F108B5E+33p
					; sub_6F1093B0+33p ...

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		lea	eax, [ebp+var_8]
		sub	esp, 50h
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BBB8
		mov	[ebp+var_18], offset sub_6F10ACC7
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		call	sub_6F10B260
		mov	edx, [ebp+arg_0]
		sub	edx, 30h
		mov	ecx, [edx+30h]
		mov	ebx, [edx+34h]
		mov	esi, [eax]
		add	ecx, 0BCD4D500h
		adc	ebx, 0B8B1AABCh
		cmp	ebx, 0
		ja	short loc_6F10AC6A
		cmp	ecx, 1
		jbe	short loc_6F10AC90

loc_6F10AC6A:				; CODE XREF: sub_6F10AC10+53j
		test	esi, esi
		jnz	short loc_6F10ACBB
		mov	[eax], edx
		mov	[ebp+var_40], 0

loc_6F10AC77:				; CODE XREF: sub_6F10AC10+A0j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		add	esp, 50h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AC90:				; CODE XREF: sub_6F10AC10+58j
		mov	ecx, [edx+14h]
		test	ecx, ecx
		lea	ebx, [ecx+1]
		js	short loc_6F10ACB2

loc_6F10AC9A:				; CODE XREF: sub_6F10AC10+A9j
		mov	[edx+14h], ebx
		sub	dword ptr [eax+4], 1
		cmp	esi, edx
		jz	short loc_6F10ACAA
		mov	[edx+10h], esi
		mov	[eax], edx

loc_6F10ACAA:				; CODE XREF: sub_6F10AC10+93j
		mov	edx, [edx+28h]
		mov	[ebp+var_40], edx
		jmp	short loc_6F10AC77
; ---------------------------------------------------------------------------

loc_6F10ACB2:				; CODE XREF: sub_6F10AC10+88j
		mov	ebx, 1
		sub	ebx, ecx
		jmp	short loc_6F10AC9A
; ---------------------------------------------------------------------------

loc_6F10ACBB:				; CODE XREF: sub_6F10AC10+5Cj
		mov	[ebp+var_38], 1
		call	sub_6F10A6F0
sub_6F10AC10	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10ACC7	proc near		; DATA XREF: sub_6F10AC10+22o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6F10ACE2
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10ACE2:				; CODE XREF: sub_6F10ACC7+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6F10AD50
sub_6F10ACC7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10AD00	proc near		; CODE XREF: sub_6F10B4E0+236p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6F10AD40
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F10AC10
		mov	eax, [ebx]
		mov	edx, [ebx+4]
		add	eax, 0BCD4D500h
		adc	edx, 0B8B1AABCh
		cmp	edx, 0
		ja	short loc_6F10AD40
		cmp	eax, 1
		ja	short loc_6F10AD40
		mov	eax, [ebx-24h]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6F108B20
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AD40:				; CODE XREF: sub_6F10AD00+Aj
					; sub_6F10AD00+27j ...
		call	sub_6F10A6F0
sub_6F10AD00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6F10AD50	proc near		; CODE XREF: sub_6F1094B8+25p
					; sub_6F10A720+CAp ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_18		= dword	ptr -18h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6F10B4E0
		mov	[ebp+var_40], offset dword_6F10BB98
		mov	[ebp+var_38], offset sub_6F10ADBD
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	sub_6F10AC10
		mov	eax, [ebp+arg_0]
		sub	eax, 30h
		mov	edx, [eax+18h]
		mov	ecx, [eax+20h]
		mov	[ebp+var_60], edx
		mov	edx, [eax+24h]
		mov	[ebp+var_68], ecx
		mov	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	[ebp+var_58], 2
		mov	[ebp+var_18], edx
		mov	[ebp+var_64], ecx
		mov	[esp], eax
		call	sub_6F108BB0
sub_6F10AD50	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10ADBD	proc near		; DATA XREF: sub_6F10AD50+23o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		add	ebp, 8
		mov	eax, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-70h], eax
		jz	short loc_6F10ADF6
		mov	dword ptr [ebp-58h], 0
		call	sub_6F10AEE0
		mov	dword ptr [ebp-58h], 0
		call	sub_6F10AEE0
		mov	edx, [ebp-70h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10ADF6:				; CODE XREF: sub_6F10ADBD+Dj
		mov	eax, [ebp-70h]
		mov	[esp+0], eax
		call	sub_6F10AC10
		call	sub_6F10B340
		mov	eax, [eax]
		test	byte ptr [eax+30h], 1
		lea	edx, [eax+30h]
		jz	short loc_6F10AE4B
		mov	edx, [edx-30h]
		mov	[ebp-6Ch], edx

loc_6F10AE17:				; CODE XREF: sub_6F10ADBD+94j
		mov	edx, [ebp-68h]
		lea	ecx, [ebp-20h]
		xor	eax, eax
		mov	dword ptr [ebp-58h], 1
		call	sub_6F1087D0
		mov	ecx, [ebp-6Ch]
		lea	eax, [ebp-20h]
		mov	edx, [ecx-50h]
		mov	ecx, [ebp-60h]
		mov	[esp+0], ecx
		mov	ecx, [ebp-6Ch]
		call	sub_6F108890
		test	al, al
		jz	short loc_6F10AE53
		call	sub_6F10B420
; ---------------------------------------------------------------------------

loc_6F10AE4B:				; CODE XREF: sub_6F10ADBD+52j
		add	eax, 50h
		mov	[ebp-6Ch], eax
		jmp	short loc_6F10AE17
; ---------------------------------------------------------------------------

loc_6F10AE53:				; CODE XREF: sub_6F10ADBD+87j
		mov	edx, [ebp-60h]
		lea	eax, [ebp-20h]
		xor	ecx, ecx
		mov	dword ptr [ebp-58h], 1
		mov	[esp+0], edx
		mov	edx, offset off_6F112A38
		call	sub_6F108890
		test	al, al
		jz	short loc_6F10AE9D
		mov	dword ptr [esp+0], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112F18
		mov	[esp+arg_4], offset sub_6F10A580
		mov	[esp+arg_0], offset off_6F112A38
		mov	[esp+0], eax
		call	sub_6F10B480
; ---------------------------------------------------------------------------

loc_6F10AE9D:				; CODE XREF: sub_6F10ADBD+B4j
		mov	ecx, [ebp-64h]
		mov	dword ptr [ebp-58h], 1
		mov	[esp+0], ecx
		call	sub_6F108B20
sub_6F10ADBD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10AEB0	proc near		; CODE XREF: sub_6F109590+7Ep
		sub	esp, 0Ch
		call	sub_6F10B260
		mov	edx, [eax]
		xor	eax, eax
		test	edx, edx
		jz	short loc_6F10AEC8
		test	byte ptr [edx+30h], 1
		jnz	short loc_6F10AED0

loc_6F10AEC6:				; CODE XREF: sub_6F10AEB0+25j
		mov	eax, [edx]

loc_6F10AEC8:				; CODE XREF: sub_6F10AEB0+Ej
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AED0:				; CODE XREF: sub_6F10AEB0+14j
		mov	edx, [edx]
		sub	edx, 50h
		jmp	short loc_6F10AEC6
sub_6F10AEB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6F10AEE0	proc near		; CODE XREF: sub_6F108B5E+16p
					; sub_6F1093B0+16p ...

var_5C		= dword	ptr -5Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		push	ebx
		sub	esp, 18h
		call	sub_6F10B340
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6F10AF17
		mov	ecx, [edx+30h]
		mov	ebx, [edx+34h]
		add	ecx, 0BCD4D500h
		adc	ebx, 0B8B1AABCh
		cmp	ebx, 0
		jbe	short loc_6F10AF20

loc_6F10AF06:				; CODE XREF: sub_6F10AEE0+43j
		mov	dword ptr [eax], 0
		add	edx, 30h
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_DeleteException

loc_6F10AF17:				; CODE XREF: sub_6F10AEE0+Dj
					; sub_6F10AEE0+80j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AF20:				; CODE XREF: sub_6F10AEE0+24j
		cmp	ecx, 1
		ja	short loc_6F10AF06
		mov	ecx, [edx+14h]
		test	ecx, ecx
		js	short loc_6F10AF41
		sub	ecx, 1
		nop
		jz	short loc_6F10AF50
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_6F10AF62

loc_6F10AF37:				; CODE XREF: sub_6F10AEE0+64j
					; sub_6F10AEE0+6Bj
		mov	[edx+14h], ecx
		add	esp, 18h
		pop	ebx
		xchg	ax, ax
		retn
; ---------------------------------------------------------------------------

loc_6F10AF41:				; CODE XREF: sub_6F10AEE0+4Aj
		add	ecx, 1
		jnz	short loc_6F10AF37
		mov	ebx, [edx+10h]
		mov	[eax], ebx
		jmp	short loc_6F10AF37
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AF50:				; CODE XREF: sub_6F10AEE0+50j
		mov	ecx, [edx+10h]
		add	edx, 30h
		mov	[eax], ecx
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_DeleteException
		jmp	short loc_6F10AF17
; ---------------------------------------------------------------------------

loc_6F10AF62:				; CODE XREF: sub_6F10AEE0+55j
		call	sub_6F10A6F0
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	dword ptr [ebp-24h], offset sub_6F10B4E0
		mov	dword ptr [ebp-20h], offset dword_6F10BC1C
		mov	dword ptr [ebp-18h], offset loc_6F10B0A9
		mov	[ebp-14h], esp
		mov	[esp+5Ch+var_5C], eax
		call	_Unwind_SjLj_Register
		cmp	dword ptr [ebp+8], offset dword_6F110040
		jb	short loc_6F10AFB1
		cmp	dword ptr [ebp+8], offset dword_6F110A40
		jb	short loc_6F10AFD0

loc_6F10AFB1:				; CODE XREF: sub_6F10AEE0+C6j
		mov	eax, [ebp+8]
		mov	[esp+20h+var_20], eax ;	void *
		call	free

loc_6F10AFBC:				; CODE XREF: sub_6F10AEE0+13Ej
					; sub_6F10AEE0+155j
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10AFD0:				; CODE XREF: sub_6F10AEE0+CFj
		mov	eax, [ebp+8]
		mov	ecx, 0CCCCCCCDh
		sub	eax, offset dword_6F110040
		mul	ecx
		mov	eax, dword_6F10C01C
		shr	edx, 6
		test	eax, eax
		mov	[ebp-40h], edx
		jz	short loc_6F10B061
		mov	[esp+20h+var_20], offset dword_6F110A50
		mov	dword ptr [ebp-38h], 2
		call	sub_6F1081C0
		test	eax, eax
		jnz	short loc_6F10B07F
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		mov	ecx, dword_6F10C01C
		and	dword_6F10C02C,	eax
		test	ecx, ecx
		jz	short loc_6F10AFBC
		mov	[esp+20h+var_20], offset dword_6F110A50
		mov	dword ptr [ebp-38h], 1
		call	sub_6F1080A0
		test	eax, eax
		jz	short loc_6F10AFBC
		mov	[esp+20h+var_20], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112F00
		mov	[esp+20h+var_18], offset sub_6F109570
		mov	[esp+20h+var_1C], offset off_6F112A2C
		mov	[esp+20h+var_20], eax
		call	sub_6F10B480
; ---------------------------------------------------------------------------

loc_6F10B061:				; CODE XREF: sub_6F10AEE0+10Cj
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		and	dword_6F10C02C,	eax
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F10B07F:				; CODE XREF: sub_6F10AEE0+123j
		mov	[esp+20h+var_20], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112EE8
		mov	[esp+20h+var_18], offset sub_6F109520
		mov	[esp+20h+var_1C], offset off_6F112A20
		mov	[esp+20h+var_20], eax
		call	sub_6F10B480
; ---------------------------------------------------------------------------

loc_6F10B0A9:				; DATA XREF: sub_6F10AEE0+ADo
		add	ebp, 8
		mov	edx, [ebp-30h]
		mov	eax, [ebp-34h]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6F10B0C6
		mov	[esp+1Ch+var_1C], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10B0C6:				; CODE XREF: sub_6F10AEE0+1D5j
		mov	[esp+1Ch+var_1C], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6F10AD50
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B0E0:				; CODE XREF: sub_6F108990+2Cj
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	dword ptr [ebp-24h], offset sub_6F10B4E0
		mov	dword ptr [ebp-20h], offset dword_6F10BC2C
		mov	dword ptr [ebp-18h], offset sub_6F10B218
		mov	[ebp-14h], esp
		mov	[esp+5Ch+var_5C], eax
		call	_Unwind_SjLj_Register
		cmp	dword ptr [ebp+8], offset dword_6F10C040
		jb	short loc_6F10B121
		cmp	dword ptr [ebp+8], offset dword_6F110040
		jb	short loc_6F10B140

loc_6F10B121:				; CODE XREF: sub_6F10AEE0+236j
		mov	eax, [ebp+8]
		sub	eax, 60h
		mov	[esp+20h+var_20], eax ;	void *
		call	free

loc_6F10B12F:				; CODE XREF: sub_6F10AEE0+2A9j
					; sub_6F10AEE0+2C0j
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B140:				; CODE XREF: sub_6F10AEE0+23Fj
		mov	ecx, [ebp+8]
		sub	ecx, offset dword_6F10C040
		shr	ecx, 9
		mov	[ebp-40h], ecx
		mov	ecx, dword_6F10C01C
		test	ecx, ecx
		jz	short loc_6F10B1D0
		mov	[esp+20h+var_20], offset dword_6F110A50
		mov	dword ptr [ebp-38h], 2
		call	sub_6F1081C0
		test	eax, eax
		jnz	short loc_6F10B1EE
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		mov	edx, dword_6F10C01C
		rol	eax, cl
		and	dword_6F10C028,	eax
		test	edx, edx
		jz	short loc_6F10B12F
		mov	[esp+20h+var_20], offset dword_6F110A50
		mov	dword ptr [ebp-38h], 1
		call	sub_6F1080A0
		test	eax, eax
		jz	short loc_6F10B12F
		mov	[esp+20h+var_20], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112F00
		mov	[esp+20h+var_18], offset sub_6F109570
		mov	[esp+20h+var_1C], offset off_6F112A2C
		mov	[esp+20h+var_20], eax
		call	sub_6F10B480
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B1D0:				; CODE XREF: sub_6F10AEE0+277j
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		and	dword_6F10C028,	eax
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6F10B1EE:				; CODE XREF: sub_6F10AEE0+28Ej
		mov	[esp+20h+var_20], 4
		call	sub_6F10A9B0
		mov	dword ptr [eax], offset	off_6F112EE8
		mov	[esp+20h+var_18], offset sub_6F109520
		mov	[esp+20h+var_1C], offset off_6F112A20
		mov	[esp+20h+var_20], eax
		call	sub_6F10B480
sub_6F10AEE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10B218	proc near		; DATA XREF: sub_6F10AEE0+21Do
		add	ebp, 8
		mov	edx, [ebp-30h]
		mov	eax, [ebp-34h]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6F10B235
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10B235:				; CODE XREF: sub_6F10B218+Cj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6F10AD50
sub_6F10B218	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	eax, [eax-8]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F10B260	proc near		; CODE XREF: .text:6F10A6D3p
					; sub_6F10A720:loc_6F10A833p ...

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BBFC
		mov	[ebp+var_18], offset sub_6F10B315
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6F110A44, 0
		mov	[ebp+var_44], offset dword_6F10C020
		jnz	short loc_6F10B2B0

loc_6F10B29F:				; CODE XREF: sub_6F10B260+69j
					; sub_6F10B260+B3j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_44]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B2B0:				; CODE XREF: sub_6F10B260+3Dj
		mov	eax, dword_6F110A40
		mov	[ebp+var_38], 1
		mov	[esp], eax	; DWORD
		call	sub_6F1082F0
		test	eax, eax
		mov	[ebp+var_44], eax
		jnz	short loc_6F10B29F
		mov	dword ptr [esp], 8 ; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6F10B2F3
		mov	[esp+4], eax	; LPVOID
		mov	eax, dword_6F110A40
		mov	[esp], eax	; DWORD
		call	sub_6F1082C0
		test	eax, eax
		jz	short loc_6F10B300

loc_6F10B2F3:				; CODE XREF: sub_6F10B260+7Cj
		mov	[ebp+var_38], 1
		call	sub_6F10A6F0
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B300:				; CODE XREF: sub_6F10B260+91j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_44], eax
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		jmp	short loc_6F10B29F
sub_6F10B260	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10B315	proc near		; DATA XREF: sub_6F10B260+1Do
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6F10B330
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10B330:				; CODE XREF: sub_6F10B315+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6F10AD50
sub_6F10B315	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F10B340	proc near		; CODE XREF: sub_6F10ADBD+44p
					; sub_6F10AEE0+4p

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6F10B4E0
		mov	[ebp+var_20], offset dword_6F10BBEC
		mov	[ebp+var_18], offset sub_6F10B3B7
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6F110A44, 0
		mov	[ebp+var_40], offset dword_6F10C020
		jnz	short loc_6F10B390
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B390:				; CODE XREF: sub_6F10B340+3Dj
		mov	eax, dword_6F110A40
		mov	[esp], eax	; DWORD
		mov	[ebp+var_38], 1
		call	sub_6F1082F0
		mov	[ebp+var_40], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6F10B340	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10B3B7	proc near		; DATA XREF: sub_6F10B340+1Do
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6F10B3D2
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10B3D2:				; CODE XREF: sub_6F10B3B7+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6F10AD50
sub_6F10B3B7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10B3F0	proc near		; DATA XREF: .rdata:6F112CD8o
					; .rdata:6F112D30o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_14], 1Bh ;	unsigned int
		mov	[esp+1Ch+var_18], offset aPureVirtualMet ; "pure virtual method	called\n"
		mov	[esp+1Ch+var_1C], 2 ; int
		call	_write
		call	sub_6F10A6F0
sub_6F10B3F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10B420	proc near		; CODE XREF: sub_6F1093B0+4Ap
					; sub_6F109590+140p ...

var_1C		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		call	sub_6F10B260
		mov	ebx, [eax]
		add	dword ptr [eax+4], 1
		test	ebx, ebx
		jz	short loc_6F10B463
		mov	edx, [ebx+30h]
		mov	ecx, [ebx+34h]
		add	edx, 0BCD4D500h
		adc	ecx, 0B8B1AABCh
		cmp	ecx, 0
		jbe	short loc_6F10B468

loc_6F10B44A:				; CODE XREF: sub_6F10B420+4Bj
		mov	dword ptr [eax], 0

loc_6F10B450:				; CODE XREF: sub_6F10B420+50j
		add	ebx, 30h
		mov	[esp+1Ch+var_1C], ebx
		call	_Unwind_SjLj_Resume_or_Rethrow
; ---------------------------------------------------------------------------
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F10AC10

loc_6F10B463:				; CODE XREF: sub_6F10B420+11j
		call	sub_6F10A6F0
; ---------------------------------------------------------------------------

loc_6F10B468:				; CODE XREF: sub_6F10B420+28j
		cmp	edx, 1
		ja	short loc_6F10B44A
		neg	dword ptr [ebx+14h]
		jmp	short loc_6F10B450
sub_6F10B420	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10B480	proc near		; CODE XREF: sub_6F109430+83p
					; sub_6F10A720+A0p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		lea	eax, [ebx-60h]
		mov	[eax+10h], edx
		mov	edx, [esp+1Ch+arg_8]
		mov	dword ptr [ebx-60h], 1
		sub	ebx, 20h
		mov	dword ptr [eax+40h], 432B2B00h
		mov	dword ptr [eax+44h], 474E5543h
		mov	[eax+14h], edx
		mov	edx, off_6F110A4C
		mov	dword ptr [eax+48h], offset sub_6F108990
		mov	[eax+18h], edx
		mov	edx, off_6F110A48
		mov	[eax+1Ch], edx
		mov	[esp+1Ch+var_1C], ebx
		call	_Unwind_SjLj_RaiseException
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6F10AC10
		call	sub_6F10A6F0
sub_6F10B480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6F10B4E0	proc near		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+Fo
					; _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+12o ...

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_AD		= byte ptr -0ADh
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_99		= byte ptr -99h
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= byte ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_54], offset sub_6F10B4E0
		mov	[ebp+var_50], offset dword_6F10BBA8
		mov	[ebp+var_98], eax
		lea	eax, [ebp+var_6C]
		mov	[ebp+var_94], edx
		lea	edx, [ebp+var_18]
		mov	[ebp+var_4C], edx
		mov	[ebp+var_48], offset sub_6F10BA73
		mov	[ebp+var_44], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	[ebp+arg_0], 1
		mov	[ebp+var_78], 3
		jz	short loc_6F10B550

loc_6F10B534:				; CODE XREF: sub_6F10B4E0+1C4j
					; sub_6F10B4E0+257j ...
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_78]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B550:				; CODE XREF: sub_6F10B4E0+52j
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+var_94]
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		sub	eax, 30h
		mov	[ebp+var_A4], eax
		mov	eax, [ebp+var_98]
		mov	[ebp+var_99], 1
		add	eax, 0BCD4D500h
		adc	edx, 0B8B1AABCh
		cmp	edx, 0
		jbe	loc_6F10B6B0
		cmp	[ebp+arg_4], 6
		jz	loc_6F10B6CA

loc_6F10B59B:				; CODE XREF: sub_6F10B4E0+1E4j
					; sub_6F10B4E0+1F1j
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_GetLanguageSpecificData
		test	eax, eax
		mov	[ebp+var_A0], eax
		jz	loc_6F10B7FE
		mov	edx, eax
		mov	eax, [ebp+arg_14]
		lea	ecx, [ebp+var_38]
		call	sub_6F1087D0
		mov	edx, [ebp+arg_14]
		mov	[ebp+var_B4], eax
		movzx	eax, [ebp+var_24]
		call	sub_6F108910
		mov	edx, [ebp+arg_14]
		mov	[esp], edx
		mov	[ebp+var_30], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		call	_Unwind_GetIPInfo
		cmp	[ebp+var_20], 1
		sbb	eax, 0
		cmp	eax, 0
		mov	[ebp+var_74], eax
		jl	loc_6F10B7FE
		jnz	loc_6F10B772
		mov	[ebp+var_7C], 0
		mov	eax, 1
		mov	[ebp+var_AC], 0
		mov	[ebp+var_80], 0

loc_6F10B625:				; CODE XREF: sub_6F10B4E0+44Dj
					; sub_6F10B4E0+537j
		test	byte ptr [ebp+arg_4], 1
		jnz	loc_6F10B720

loc_6F10B62F:				; CODE XREF: sub_6F10B4E0+32Fj
		test	byte ptr [ebp+arg_4], 8
		jz	loc_6F10B985

loc_6F10B639:				; CODE XREF: sub_6F10B4E0+4ACj
		cmp	eax, 1
		jz	loc_6F10BA5B
		mov	edx, [ebp+var_7C]
		test	edx, edx
		js	loc_6F10BA67

loc_6F10B64D:				; CODE XREF: sub_6F10B4E0+4C0j
					; sub_6F10B4E0+4F3j
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+arg_14]
		mov	dword ptr [esp+4], 0
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp], edx
		call	_Unwind_SetGR
		mov	eax, [ebp+var_7C]
		mov	edx, [ebp+arg_14]
		mov	dword ptr [esp+4], 1
		mov	[esp+8], eax
		mov	[esp], edx
		call	_Unwind_SetGR
		mov	eax, [ebp+var_AC]
		mov	edx, [ebp+arg_14]
		mov	[esp+4], eax
		mov	[esp], edx
		call	_Unwind_SetIP
		mov	[ebp+var_78], 7
		jmp	loc_6F10B534
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B6B0:				; CODE XREF: sub_6F10B4E0+ABj
		cmp	eax, 2
		sbb	eax, eax
		not	eax
		and	eax, 1
		cmp	[ebp+arg_4], 6
		mov	[ebp+var_99], al
		jnz	loc_6F10B59B

loc_6F10B6CA:				; CODE XREF: sub_6F10B4E0+B5j
		cmp	[ebp+var_99], 0
		jnz	loc_6F10B59B
		mov	edx, [ebp+var_A4]
		mov	eax, [ebp+var_A4]
		mov	edx, [edx+18h]
		mov	eax, [eax+20h]
		mov	[ebp+var_7C], edx
		mov	edx, [ebp+var_A4]
		mov	[ebp+var_A0], eax
		mov	edx, [edx+24h]
		test	edx, edx
		mov	[ebp+var_AC], edx
		jnz	loc_6F10B80A

loc_6F10B709:				; CODE XREF: sub_6F10B4E0+4B5j
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6F10AD00
; ---------------------------------------------------------------------------
		align 10h

loc_6F10B720:				; CODE XREF: sub_6F10B4E0+149j
		cmp	eax, 2
		jz	loc_6F10B7FE
		cmp	[ebp+var_99], 0
		mov	[ebp+var_78], 6
		jnz	loc_6F10B534
		mov	eax, [ebp+var_A4]
		mov	edx, [ebp+var_7C]
		mov	[eax+18h], edx
		mov	edx, [ebp+var_80]
		mov	[eax+1Ch], edx
		mov	edx, [ebp+var_A0]
		mov	[eax+20h], edx
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_A4]
		mov	[edx+28h], eax
		mov	eax, [ebp+var_AC]
		mov	[edx+24h], eax
		jmp	loc_6F10B534
; ---------------------------------------------------------------------------

loc_6F10B772:				; CODE XREF: sub_6F10B4E0+122j
		mov	eax, [ebp+var_B4]
		xor	edi, edi
		lea	esi, [esi+0]

loc_6F10B780:				; CODE XREF: sub_6F10B4E0+2EAj
		mov	[ebp+var_84], edi
		mov	ecx, edi
		mov	esi, edi
		lea	esi, [esi+0]

loc_6F10B790:				; CODE XREF: sub_6F10B4E0+2C4j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	edx, ebx
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6F10B790
		mov	[ebp+var_84], esi
		mov	ecx, edi
		mov	esi, edi

loc_6F10B7B0:				; CODE XREF: sub_6F10B4E0+2E4j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	edx, ebx
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6F10B7B0
		sub	[ebp+var_74], 1
		jnz	short loc_6F10B780
		mov	ebx, esi
		mov	esi, [ebp+var_84]
		mov	[ebp+var_80], 0
		add	esi, 1
		test	ebx, ebx
		mov	[ebp+var_AC], esi
		jz	short loc_6F10B7F4
		sub	ebx, 1
		mov	eax, [ebp+var_28]
		mov	[ebp+var_80], ebx
		add	[ebp+var_80], eax

loc_6F10B7F4:				; CODE XREF: sub_6F10B4E0+306j
		mov	edx, [ebp+var_AC]
		test	edx, edx
		jnz	short loc_6F10B814

loc_6F10B7FE:				; CODE XREF: sub_6F10B4E0+D5j
					; sub_6F10B4E0+11Cj ...
		mov	[ebp+var_78], 8
		jmp	loc_6F10B534
; ---------------------------------------------------------------------------

loc_6F10B80A:				; CODE XREF: sub_6F10B4E0+223j
		mov	eax, 3
		jmp	loc_6F10B62F
; ---------------------------------------------------------------------------

loc_6F10B814:				; CODE XREF: sub_6F10B4E0+31Cj
		mov	eax, [ebp+var_80]
		test	eax, eax
		jz	loc_6F10BA0B
		mov	edx, [ebp+arg_4]
		and	edx, 8
		mov	[ebp+var_B8], edx
		jz	loc_6F10BA20
		mov	[ebp+var_A8], offset off_6F1129E0

loc_6F10B83B:				; CODE XREF: sub_6F10B4E0+551j
					; sub_6F10B4E0+56Ej
		mov	[ebp+var_AD], 0

loc_6F10B842:				; CODE XREF: sub_6F10B4E0+410j
		mov	eax, [ebp+var_80]
		xor	edi, edi
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_6F10B850:				; CODE XREF: sub_6F10B4E0+387j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	esi, bl
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		test	bl, bl
		js	short loc_6F10B850
		cmp	ecx, 1Fh
		mov	[ebp+var_8C], eax
		ja	short loc_6F10B882
		and	esi, 40h
		jz	short loc_6F10B882
		mov	edx, 0FFFFFFFFh
		shl	edx, cl
		or	edi, edx

loc_6F10B882:				; CODE XREF: sub_6F10B4E0+392j
					; sub_6F10B4E0+397j
		mov	[ebp+var_7C], edi
		xor	ecx, ecx
		mov	[ebp+var_88], edi
		xor	edi, edi
		mov	[ebp+var_70], 0

loc_6F10B896:				; CODE XREF: sub_6F10B4E0+3CDj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	esi, bl
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		test	bl, bl
		js	short loc_6F10B896
		cmp	ecx, 1Fh
		mov	[ebp+var_70], edi
		mov	edi, [ebp+var_88]
		ja	short loc_6F10B8CC
		and	esi, 40h
		jz	short loc_6F10B8CC
		mov	eax, 0FFFFFFFFh
		shl	eax, cl
		or	[ebp+var_70], eax

loc_6F10B8CC:				; CODE XREF: sub_6F10B4E0+3DBj
					; sub_6F10B4E0+3E0j
		cmp	[ebp+var_7C], 0
		jnz	short loc_6F10B8F5
		mov	[ebp+var_AD], 1

loc_6F10B8D9:				; CODE XREF: sub_6F10B4E0+434j
					; sub_6F10B4E0+446j ...
		mov	ecx, [ebp+var_70]
		test	ecx, ecx
		jz	loc_6F10B9FE
		mov	edx, [ebp+var_8C]
		add	edx, [ebp+var_70]
		mov	[ebp+var_80], edx
		jmp	loc_6F10B842
; ---------------------------------------------------------------------------

loc_6F10B8F5:				; CODE XREF: sub_6F10B4E0+3F0j
		jle	short loc_6F10B932
		mov	edx, edi
		lea	eax, [ebp+var_38]
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6F1086F0
		test	eax, eax
		jz	short loc_6F10B928
		mov	edi, [ebp+var_A8]
		test	edi, edi
		jz	short loc_6F10B8D9
		mov	edx, [ebp+var_A8]
		lea	ecx, [ebp+var_1C]
		call	sub_6F108760
		test	al, al
		jz	short loc_6F10B8D9

loc_6F10B928:				; CODE XREF: sub_6F10B4E0+42Aj
					; sub_6F10B4E0+4A3j
		mov	eax, 3
		jmp	loc_6F10B625
; ---------------------------------------------------------------------------

loc_6F10B932:				; CODE XREF: sub_6F10B4E0:loc_6F10B8F5j
		mov	esi, [ebp+var_A8]
		test	esi, esi
		jz	short loc_6F10B953
		mov	ebx, [ebp+var_B8]
		test	ebx, ebx
		jnz	short loc_6F10B953
		cmp	[ebp+var_99], 0
		jz	loc_6F10B9D8

loc_6F10B953:				; CODE XREF: sub_6F10B4E0+45Aj
					; sub_6F10B4E0+464j
		not	edi
		xor	ebx, ebx
		add	edi, [ebp+var_2C]
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_6F10B960:				; CODE XREF: sub_6F10B4E0+494j
		movzx	edx, byte ptr [edi]
		add	edi, 1
		mov	eax, edx
		and	eax, 7Fh
		shl	eax, cl
		add	ecx, 7
		or	ebx, eax
		test	dl, dl
		js	short loc_6F10B960
		test	ebx, ebx
		setz	al

loc_6F10B97B:				; CODE XREF: sub_6F10B4E0+519j
		test	al, al
		jz	loc_6F10B8D9
		jmp	short loc_6F10B928
; ---------------------------------------------------------------------------

loc_6F10B985:				; CODE XREF: sub_6F10B4E0+153j
		cmp	[ebp+var_99], 0
		jnz	loc_6F10B639
		cmp	eax, 1
		jz	loc_6F10B709
		mov	eax, [ebp+var_7C]
		test	eax, eax
		jns	loc_6F10B64D
		mov	edx, [ebp+var_A0]
		lea	ecx, [ebp+var_38]
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6F1087D0
		mov	edx, [ebp+arg_14]
		movzx	eax, [ebp+var_24]
		call	sub_6F108910
		mov	edx, [ebp+var_A4]
		mov	[edx+24h], eax
		jmp	loc_6F10B64D
; ---------------------------------------------------------------------------

loc_6F10B9D8:				; CODE XREF: sub_6F10B4E0+46Dj
		mov	eax, [ebp+var_7C]
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		lea	eax, [ebp+var_38]
		call	sub_6F108890
		xor	eax, 1
		jmp	loc_6F10B97B
; ---------------------------------------------------------------------------

loc_6F10B9FE:				; CODE XREF: sub_6F10B4E0+3FEj
		cmp	[ebp+var_AD], 0
		jz	loc_6F10B7FE

loc_6F10BA0B:				; CODE XREF: sub_6F10B4E0+339j
		mov	[ebp+var_7C], 0
		mov	eax, 2
		jmp	loc_6F10B625
; ---------------------------------------------------------------------------
		align 10h

loc_6F10BA20:				; CODE XREF: sub_6F10B4E0+34Bj
		cmp	[ebp+var_99], 0
		mov	[ebp+var_A8], offset off_6F1129F4
		jnz	loc_6F10B83B
		mov	eax, [ebp+arg_10]
		test	byte ptr [eax],	1
		jz	short loc_6F10BA53
		mov	eax, [eax-30h]

loc_6F10BA42:				; CODE XREF: sub_6F10B4E0+579j
		mov	[ebp+var_1C], eax
		mov	eax, [eax-50h]
		mov	[ebp+var_A8], eax
		jmp	loc_6F10B83B
; ---------------------------------------------------------------------------

loc_6F10BA53:				; CODE XREF: sub_6F10B4E0+55Dj
		mov	eax, [ebp+arg_10]
		add	eax, 20h
		jmp	short loc_6F10BA42
; ---------------------------------------------------------------------------

loc_6F10BA5B:				; CODE XREF: sub_6F10B4E0+15Cj
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6F10A6F0
; ---------------------------------------------------------------------------

loc_6F10BA67:				; CODE XREF: sub_6F10B4E0+167j
		mov	[ebp+var_68], 2
		call	sub_6F10A690
sub_6F10B4E0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6F10BA73	proc near		; DATA XREF: sub_6F10B4E0+35o
		add	ebp, 18h
		mov	eax, [ebp-64h]
		cmp	dword ptr [ebp-68h], 1
		mov	[ebp-0BCh], eax
		jz	short loc_6F10BAA6
		mov	dword ptr [ebp-68h], 0
		call	sub_6F10AEE0
		mov	edx, [ebp-0BCh]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6F10BAA6:				; CODE XREF: sub_6F10BA73+10j
		mov	edx, [ebp-0BCh]
		mov	[esp+0], edx
		call	sub_6F10AC10
		mov	dword ptr [ebp-68h], 1
		call	sub_6F10A6F0
sub_6F10BA73	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6F10BAC0()
sub_6F10BAC0	proc near		; DATA XREF: sub_6F108670:loc_6F1086A0o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	byte_6F110A44, 0
		jz	short loc_6F10BAD9
		mov	eax, dword_6F110A40
		mov	[esp+1Ch+var_1C], eax ;	DWORD
		call	sub_6F108330

loc_6F10BAD9:				; CODE XREF: sub_6F10BAC0+Aj
		mov	byte_6F110A44, 0
		add	esp, 1Ch
		retn
sub_6F10BAC0	endp

; ---------------------------------------------------------------------------
		align 10h
dword_6F10BAF0	dd 0FFFFFFFFh		; DATA XREF: sub_6F107740-5Br
					; sub_6F107740-4Co ...
		dd offset sub_6F101680
		dd offset sub_6F108670
		dd offset sub_6F108650
		dd offset sub_6F108630
		align 8
		dd 0FFFFFFFFh
dword_6F10BB0C	dd 0			; DATA XREF: .data:off_6F10C018o
dword_6F10BB10	dd 401FFFFh, 10000h	; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+16o
dword_6F10BB18	dd 10D00FFh, 1000004h, 101h, 0
					; DATA XREF: _ZN5QListI7QStringE6appendERKS0_+1Co
dword_6F10BB28	dd 0A01FFFFh, 10000h, 30002h
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+19o
		db 4, 0
word_6F10BB36	dw 0FFFFh		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+1Co
		dd 0E01h, 20001h, 40003h, 60005h
dword_6F10BB48	dd 401FFFFh, 10000h	; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE+19o
dword_6F10BB50	dd 401FFFFh, 10000h	; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+1Fo
dword_6F10BB58	dd 0A01FFFFh, 10000h, 30002h
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+1Co
		db 4, 0
word_6F10BB66	dw 0FFFFh		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+1Ao
		dd 201h
dword_6F10BB6C	dd 401FFFFh, 10000h	; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString+19o
dword_6F10BB74	dd 401FFFFh, 10000h	; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE+19o
dword_6F10BB7C	dd 0A01FFFFh, 10000h, 30002h
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD2Ev+19o
		db 4, 0
word_6F10BB8A	dw 0FFFFh		; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev+19o
		dd 0A01h, 20001h, 40003h
dword_6F10BB98	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6F10AD50+1Co
dword_6F10BBA8	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6F10B4E0+19o
dword_6F10BBB8	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6F10AC10+1Bo
dword_6F10BBC8	dd 10D00FFh, 7F010002h,	0 ; DATA XREF: sub_6F10A720+19o
		dd offset off_6F112A44
		dd 1
dword_6F10BBDC	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6F108B20+16o
dword_6F10BBEC	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6F10B340+16o
dword_6F10BBFC	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6F10B260+16o
dword_6F10BC0C	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6F109430+19o
dword_6F10BC1C	dd 10900FFh, 1010004h, 7F01h, 0	; DATA XREF: sub_6F10AEE0+A6o
dword_6F10BC2C	dd 10900FFh, 1010004h, 7F01h, 0	; DATA XREF: sub_6F10AEE0+216o
dword_6F10BC3C	dd 10D00FFh, 1010006h, 7F010203h, 7D0000h, 0 ; DATA XREF: sub_6F10A9B0+1Ao
dword_6F10BC50	dd 10D00FFh, 1010006h, 7F010203h, 7D0000h, 0 ; DATA XREF: sub_6F10A720+EAo
dword_6F10BC64	dd 11500FFh, 1000004h, 2000103h, 7Dh ; DATA XREF: sub_6F109590+16o
		dd offset off_6F112A50
		align 200h
		dd 80h dup(?)
_text		ends

; Section 2. (virtual address 0000C000)
; Virtual size			: 00004A6C (  19052.)
; Section size in file		: 00004C00 (  19456.)
; Offset to raw	data for section: 0000B200
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; Exported entry   4. _ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 6F10C000h
		public _ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE
_ZN15KleopatraClient3Gui20CertificateRequester16staticMetaObjectE dd 0
					; DATA XREF: _ZNK15KleopatraClient3Gui20CertificateRequester10metaObjectEv:loc_6F101670o
					; sub_6F101680+5w ...
		dd offset aKleopatraclien ; "KLEOPATRACLIENT_NAMESPACE::Gui::Certifi"...
		dd offset dword_6F1112C0
		dd offset _ZN15KleopatraClient3Gui20CertificateRequester25staticMetaObjectExtraDataE
dword_6F10C010	dd 0FFFFFFFFh		; DATA XREF: sub_6F101260+1Bw
					; sub_6F101260+61w
		dd 0FFFFFFFFh
off_6F10C018	dd offset dword_6F10BB0C ; DATA	XREF: sub_6F1076B0+3r
					; sub_6F1076B0+12r ...
dword_6F10C01C	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w ...
dword_6F10C020	dd 2 dup(0)		; DATA XREF: sub_6F10B260+36o
					; sub_6F10B340+36o
dword_6F10C028	dd 0			; DATA XREF: sub_6F10A9B0:loc_6F10AA8Br
					; sub_6F10A9B0+12Cw ...
dword_6F10C02C	dd 0			; DATA XREF: sub_6F10A720:loc_6F10A88Cr
					; sub_6F10A720+199w ...
		align 20h
dword_6F10C040	dd 1000h dup(0)		; DATA XREF: sub_6F10A9B0+124o
					; sub_6F10AEE0+22Fo ...
dword_6F110040	dd 280h	dup(0)		; DATA XREF: sub_6F10A720+1A4o
					; sub_6F10AEE0+BFo ...
; DWORD	dword_6F110A40
dword_6F110A40	dd 0			; DATA XREF: sub_6F108670+1Bo
					; sub_6F10AEE0+C8o ...
byte_6F110A44	db 0			; DATA XREF: sub_6F108670+8w
					; sub_6F108670+29w ...
		align 4
off_6F110A48	dd offset sub_6F109590	; DATA XREF: .text:6F10A6A4r
					; .text:6F10A6A9w ...
off_6F110A4C	dd offset sub_6F10A6F0	; DATA XREF: sub_6F10A690+3r
					; .text:6F10A6B4r ...
dword_6F110A50	dd 2 dup(0)		; DATA XREF: sub_6F108650+Co
					; sub_6F10A720+146o ...
byte_6F110A58	db 0			; DATA XREF: sub_6F109590+2Fr
					; sub_6F109590:loc_6F109600w
		align 4
dword_6F110A5C	dd 0			; DATA XREF: .text:6F10A6C4r
					; .text:6F10A6C9w ...
dword_6F110A60	dd 0BB40E64Eh		; DATA XREF: .text:6F1077BFr
					; sub_6F107810+3r ...
dword_6F110A64	dd 44BF19B1h		; DATA XREF: .text:6F1077C7r
					; sub_6F107810+21w ...
dword_6F110A68	dd 0			; DATA XREF: sub_6F101430+6r
					; sub_6F101430+42o
		align 800h
_data		ends

; Section 3. (virtual address 00011000)
; Virtual size			: 00001F80 (   8064.)
; Section size in file		: 00002000 (   8192.)
; Offset to raw	data for section: 0000FE00
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6F111000h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: sub_6F101430+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_6F101430+2Ao
		align 20h
a1slotcommandfi	db '1slotCommandFinished()',0
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+17Ao
a2finished	db '2finished()',0      ; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+187o
aChange___	db 'Change...',0        ; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+57o
aLineedit	db 'lineEdit',0         ; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+DAo
aButton		db 'button',0           ; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+124o
aHlay		db 'hlay',0             ; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+177o
a1slotbuttoncli	db '1slotButtonClicked()',0
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+243o
a2clicked	db '2clicked()',0       ; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+24Fo
asc_6F1110A2	db ' ',0                ; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+B8o
aThereWasAnErro	db 'There was an error while connecting to Kleopatra: %1',0
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+9Fo
aKleopatraError	db 'Kleopatra Error',0  ; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+F9o
		align 4
off_6F1110EC	dd offset loc_6F10255B	; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+187r
		dd offset loc_6F102545	; jump table for switch	statement
		dd offset loc_6F1025C0
		dd offset loc_6F1025A6
		dd offset loc_6F10258C
		dd offset loc_6F102572
		dd offset loc_6F10247E
off_6F111108	dd offset loc_6F10266E	; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+19Er
		dd offset loc_6F10263E	; jump table for switch	statement
		dd offset loc_6F10260C
		dd offset loc_6F1026E5
		dd offset loc_6F1026B3
		dd offset loc_6F1025DA
		dd offset loc_6F102698
; Exported entry   9. _ZN15KleopatraClient3Gui20CertificateRequester25staticMetaObjectExtraDataE
		public _ZN15KleopatraClient3Gui20CertificateRequester25staticMetaObjectExtraDataE
_ZN15KleopatraClient3Gui20CertificateRequester25staticMetaObjectExtraDataE dd 0
					; DATA XREF: .data:6F10C00Co
		dd offset _ZN15KleopatraClient3Gui20CertificateRequester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv
		align 20h
aKleopatraclien	db 'KLEOPATRACLIENT_NAMESPACE::Gui::CertificateRequester',0
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc+28o
					; .data:6F10C004o
		align 2
aCerts		db 'certs',0
aSelectedcertif	db 'selectedCertificatesChanged(QStringList)',0
aSlotbuttonclic	db 'slotButtonClicked()',0
aSlotcommandfin	db 'slotCommandFinished()',0
aBool		db 'bool',0
aMultiplecertif	db 'multipleCertificatesAllowed',0
aOnlysigningcer	db 'onlySigningCertificatesAllowed',0
aOnlyencryption	db 'onlyEncryptionCertificatesAllowed',0
aOnlyopenpgpcer	db 'onlyOpenPGPCertificatesAllowed',0
aOnlyx509certif	db 'onlyX509CertificatesAllowed',0
aOnlysecretkeys	db 'onlySecretKeysAllowed',0
aQstringlist	db 'QStringList',0
aSelectedcert_0	db 'selectedCertificates',0
		align 20h
dword_6F1112C0	dd 6, 3	dup(0)		; DATA XREF: .data:6F10C008o
		dd 3, 0Eh, 7, 1Dh, 5 dup(0)
		dd 1, 3Ch, 36h,	2 dup(35h), 5, 65h, 3 dup(35h),	8, 79h
		dd 3 dup(35h), 8, 94h, 8Fh, 1095103h, 0B0h, 8Fh, 1095103h
		dd 0CFh, 8Fh, 1095103h,	0F1h, 8Fh, 1095103h, 110h, 8Fh
		dd 1095103h, 12Ch, 8Fh,	1095103h, 14Eh,	142h, 0B095103h
		dd 6 dup(0)
off_6F1113A0	dd offset loc_6F108A17	; DATA XREF: sub_6F1089D0:loc_6F108A10r
		dd offset loc_6F108AB2	; jump table for switch	statement
		dd offset loc_6F108AF0
		dd offset loc_6F108A17
		dd offset loc_6F108A60
		dd offset loc_6F108A07
		dd offset loc_6F108A07
		dd offset loc_6F108A07
		dd offset loc_6F108A07
		dd offset loc_6F108A67
		dd offset loc_6F108AE1
		dd offset loc_6F108A17
		dd offset loc_6F108A60
aStdException	db 'std::exception',0   ; DATA XREF: sub_6F10A4E0o
aStdBad_excepti	db 'std::bad_exception',0 ; DATA XREF: sub_6F10A4C0o
		align 4
a__gnu_cxx__con	db '__gnu_cxx::__concurrence_lock_error',0 ; DATA XREF: sub_6F10A4A0o
; a__gnu_cxx(char)
a__gnu_cxx__c_0	db '__gnu_cxx::__concurrence_unlock_error',0 ; DATA XREF: sub_6F10A4B0o
		align 4
aStdBad_alloc	db 'std::bad_alloc',0   ; DATA XREF: sub_6F10A4D0o
		align 4
aPureVirtualMet	db 'pure virtual method called',0Ah,0 ; DATA XREF: sub_6F10B3F0+Bo
aTerminateCalle	db 'terminate called recursively',0Ah,0 ; DATA XREF: sub_6F109590+4Do
		align 10h
aTerminateCal_0	db 'terminate called after throwing an instance of ',27h,0
					; DATA XREF: sub_6F109590+CAo
asc_6F1114C1	db 27h,0Ah,0		; DATA XREF: sub_6F109590+118o
aWhat		db '  what():  ',0      ; DATA XREF: sub_6F10973D+82o
aTerminateCal_1	db 'terminate called without an active exception',0Ah,0
					; DATA XREF: sub_6F109590+17Ao
		align 10h
off_6F111500	dd offset loc_6F102F17,	offset loc_6F102F60, offset loc_6F102F60
					; DATA XREF: sub_6F102F00:loc_6F102F30r
		dd offset loc_6F102F60,	offset loc_6F102F60, offset loc_6F102F17 ; jump	table for switch statement
		dd offset loc_6F102F17,	offset loc_6F102F17, offset loc_6F102F17
		dd offset loc_6F102F64,	offset loc_6F102F64, offset loc_6F102F60
		dd offset loc_6F102F64,	offset loc_6F102F64, offset loc_6F102F64
		dd offset loc_6F102F64,	offset loc_6F102F64, offset loc_6F102F64
		dd offset loc_6F102F64,	offset loc_6F102F64, offset loc_6F102F64
		dd offset loc_6F102F64,	offset loc_6F102F17, offset loc_6F102F3B
		dd offset loc_6F102F3B,	offset loc_6F102F3B, offset loc_6F102F3B
		dd offset loc_6F102F3B,	offset loc_6F102F3B, offset loc_6F102F60
		dd offset loc_6F102F64,	offset loc_6F102F64, offset loc_6F102F64
		dd offset loc_6F102F64,	offset loc_6F102F64, offset loc_6F102F17
		dd offset loc_6F102F64,	offset loc_6F102F3B, offset loc_6F102F37
		dd offset loc_6F102F60,	offset loc_6F102F17, offset loc_6F102F3B
		dd offset loc_6F102F3B,	offset loc_6F102F17, offset loc_6F102F17
		dd offset loc_6F102F64,	offset loc_6F102F60, offset loc_6F102F60
		dd offset loc_6F102F60,	offset loc_6F102F60, offset loc_6F102F60
		dd offset loc_6F102F60,	offset loc_6F102F60, offset loc_6F102F60
		dd offset loc_6F102F64,	offset loc_6F102F60, offset loc_6F102F17
		dd offset loc_6F102F64,	offset loc_6F102F64, offset loc_6F102F64
		dd offset loc_6F102F64
off_6F1115F4	dd offset loc_6F1033F7,	offset loc_6F1033E2, offset loc_6F1033E2
					; DATA XREF: sub_6F1033D0+32r
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F103410 ; jump	table for switch statement
		dd offset loc_6F1033F7,	offset loc_6F1033F0, offset loc_6F1033F0
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033F7, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033F7
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033F7, offset loc_6F1033F0
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033F7
		dd offset loc_6F1033E2,	offset loc_6F1033E2, offset loc_6F1033E2
		dd offset loc_6F1033F7
a_global_	db '_GLOBAL_',0         ; DATA XREF: sub_6F103480+42o
					; sub_6F1067E0:loc_6F106803o
aAnonymousNames	db '(anonymous namespace)',0 ; DATA XREF: sub_6F103480+B4o
aSt		db 'st',0               ; DATA XREF: sub_6F103550+174o
					; .rdata:6F112840o
aCl		db 'cl',0               ; DATA XREF: sub_6F103550+2B5o
					; sub_6F1058E0+55Ao ...
		align 10h
off_6F111710	dd offset loc_6F103928,	offset loc_6F103928, offset loc_6F103928
					; DATA XREF: sub_6F103890+4Br
		dd offset loc_6F103928,	offset loc_6F103928, offset loc_6F103928 ; jump	table for switch statement
		dd offset loc_6F103928,	offset loc_6F103928, offset loc_6F103928
		dd offset loc_6F103928,	offset loc_6F1038C2, offset loc_6F1038C2
		dd offset loc_6F1038C2,	offset loc_6F1038C2, offset loc_6F1038C2
		dd offset loc_6F1038C2,	offset loc_6F1038C2, offset loc_6F103BC5
		dd offset loc_6F1038C2,	offset loc_6F103940, offset loc_6F103968
		dd offset loc_6F1038C2,	offset loc_6F103C30, offset loc_6F103995
		dd offset loc_6F1038C2,	offset loc_6F1038C2, offset loc_6F1038C2
		dd offset loc_6F1038C2,	offset loc_6F1038C2, offset loc_6F103B93
		dd offset loc_6F103928,	offset loc_6F1039C0, offset loc_6F1039F0
		dd offset loc_6F1038C2,	offset loc_6F103A20, offset loc_6F103A50
		dd offset loc_6F103AA7,	offset loc_6F103B00, offset loc_6F1038C2
		dd offset loc_6F1038C2,	offset loc_6F1038C2, offset loc_6F1038C2
		dd offset loc_6F103928,	offset loc_6F1038C2, offset loc_6F1038C2
		dd offset loc_6F1038C2,	offset loc_6F1038C2, offset loc_6F1038C2
		dd offset loc_6F1038C2,	offset loc_6F103B30, offset loc_6F103B30
		dd offset loc_6F103B30,	offset loc_6F103B30, offset loc_6F103B30
		dd offset loc_6F103B30,	offset loc_6F103B30, offset loc_6F103B30
		dd offset loc_6F103B30,	offset loc_6F103B30, offset loc_6F1038C2
		dd offset loc_6F103B30,	offset loc_6F103B30, offset loc_6F103B30
		dd offset loc_6F103B30,	offset loc_6F1038C2, offset loc_6F1038C2
		dd offset loc_6F1038C2,	offset loc_6F103B30, offset loc_6F103B30
		dd offset loc_6F103B68,	offset loc_6F103B30, offset loc_6F103B30
		dd offset loc_6F103B30,	offset loc_6F103B30, offset loc_6F103B30
off_6F11183C	dd offset loc_6F103DF6	; DATA XREF: sub_6F103890+FEr
		dd offset loc_6F1038C2	; jump table for switch	statement
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F103DAC
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F103D72
		dd offset loc_6F103D38
		dd offset loc_6F103EB7
		dd offset loc_6F1038C2
		dd offset loc_6F103E7D
		dd offset loc_6F103D01
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F103CE0
		dd offset loc_6F1038C2
		dd offset loc_6F1038C2
		dd offset loc_6F103CA0
		dd offset loc_6F103DAC
aStringLiteral	db 'string literal',0   ; DATA XREF: sub_6F104620+208o
aStd		db 'std',0              ; DATA XREF: sub_6F104620+E6o
					; .rdata:6F112344o ...
		align 4
off_6F11190C	dd offset loc_6F104C9E,	offset loc_6F104A1F, offset loc_6F104A1F
					; DATA XREF: sub_6F104930+199r
		dd offset loc_6F104C7B,	offset loc_6F104A1F, offset loc_6F104A1F ; jump	table for switch statement
		dd offset loc_6F104C58,	offset loc_6F104C35, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104C12, offset loc_6F104BE9
		dd offset loc_6F104A1F,	offset loc_6F104BC0, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104B74
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104B3B, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104A1F,	offset loc_6F104A1F, offset loc_6F104A1F
		dd offset loc_6F104B00
off_6F1119DC	dd offset loc_6F104ADC	; DATA XREF: sub_6F104930+1B8r
		dd offset loc_6F104AF0	; jump table for switch	statement
		dd offset loc_6F104AF0
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F10499D
		dd offset loc_6F10499D
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F104ADC
		dd offset loc_6F10499D
byte_6F111A94	db 2 dup(3Ah), 0	; DATA XREF: sub_6F105480+DBo
					; sub_6F1058E0+1DFo
aJarray		db 'JArray',0           ; DATA XREF: sub_6F1058E0+DECo
asc_6F111A9E	db '[]',0               ; DATA XREF: sub_6F1058E0+E08o
					; .rdata:6F112674o
aVtableFor	db 'vtable for ',0      ; DATA XREF: sub_6F1058E0:loc_6F10594Fo
aVttFor		db 'VTT for ',0         ; DATA XREF: sub_6F1058E0:loc_6F1059B2o
aConstructionVt	db 'construction vtable for ',0 ; DATA XREF: sub_6F1058E0:loc_6F105967o
aIn		db '-in-',0             ; DATA XREF: sub_6F1058E0+9Do
aTypeinfoFor	db 'typeinfo for ',0    ; DATA XREF: sub_6F1058E0:loc_6F1059B9o
aTypeinfoNameFo	db 'typeinfo name for ',0 ; DATA XREF: sub_6F1058E0:loc_6F1059C0o
aTypeinfoFnFor	db 'typeinfo fn for ',0 ; DATA XREF: sub_6F1058E0:loc_6F1059C7o
aNonVirtualThun	db 'non-virtual thunk to ',0 ; DATA XREF: sub_6F1058E0:loc_6F1059CEo
aVirtualThunkTo	db 'virtual thunk to ',0 ; DATA XREF: sub_6F1058E0:loc_6F10633Do
aCovariantRetur	db 'covariant return thunk to ',0 ; DATA XREF: sub_6F1058E0:loc_6F106347o
aJavaClassFor	db 'java Class for ',0  ; DATA XREF: sub_6F1058E0:loc_6F105C94o
aGuardVariableF	db 'guard variable for ',0 ; DATA XREF: sub_6F1058E0:loc_6F105C9Eo
aReferenceTempo	db 'reference temporary for ',0 ; DATA XREF: sub_6F1058E0:loc_6F1060E8o
aHiddenAliasFor	db 'hidden alias for ',0 ; DATA XREF: sub_6F1058E0:loc_6F1060F2o
asc_6F111B98	db '::*',0              ; DATA XREF: sub_6F1058E0+73Bo
					; sub_6F106C20+DFo
a_sat		db '_Sat ',0            ; DATA XREF: sub_6F1058E0:loc_6F106459o
a_accum		db '_Accum',0           ; DATA XREF: sub_6F1058E0+3FDo
a_fract		db '_Fract',0           ; DATA XREF: sub_6F1058E0:loc_6F106448o
asc_6F111BB0	db ', ',0               ; DATA XREF: sub_6F1058E0+170o
					; sub_6F1058E0:loc_6F105D18o
aOperator_0	db 'operator',0         ; DATA XREF: sub_6F1058E0:loc_6F1060A0o
aOperator	db 'operator ',0        ; DATA XREF: sub_6F1058E0+4D8o
					; sub_6F1058E0:loc_6F1060DEo
aIx		db 'ix',0               ; DATA XREF: sub_6F1058E0+531o
					; .rdata:6F112670o
asc_6F111BC9	db ' : ',0              ; DATA XREF: sub_6F1058E0+9A8o
aUl		db 'ul',0               ; DATA XREF: sub_6F1058E0:loc_6F1065D1o
aLl		db 'll',0               ; DATA XREF: sub_6F1058E0:loc_6F1065C0o
aUll		db 'ull',0              ; DATA XREF: sub_6F1058E0:loc_6F106606o
aFalse		db 'false',0            ; DATA XREF: sub_6F1058E0:loc_6F1067CEo
aTrue		db 'true',0             ; DATA XREF: sub_6F1058E0+C9Bo
aJavaResource	db 'java resource ',0   ; DATA XREF: sub_6F1058E0:loc_6F10636Eo
aDecltype	db 'decltype (',0       ; DATA XREF: sub_6F1058E0+A9Ao
a___		db '...',0              ; DATA XREF: sub_6F1058E0+E89o
					; .rdata:6F112134o ...
aParm		db 'parm#',0            ; DATA XREF: sub_6F1058E0:loc_6F10606Bo
; char aLd[]
aLd		db '%ld',0              ; DATA XREF: sub_6F1058E0+79Eo
aGlobalConstruc	db 'global constructors keyed to ',0 ; DATA XREF: sub_6F1058E0:loc_6F106333o
aGlobalDestruct	db 'global destructors keyed to ',0 ; DATA XREF: sub_6F1058E0:loc_6F1060FCo
		align 4
off_6F111C48	dd offset loc_6F105A5E,	offset loc_6F105AAC, offset loc_6F105AAC
					; DATA XREF: sub_6F1058E0:loc_6F105948r
		dd offset loc_6F105AD0,	offset loc_6F106189, offset loc_6F106207 ; jump	table for switch statement
		dd offset loc_6F10606B,	offset loc_6F105989, offset loc_6F1059A4
		dd offset loc_6F10594F,	offset loc_6F1059B2, offset loc_6F105967
		dd offset loc_6F1059B9,	offset loc_6F1059C0, offset loc_6F1059C7
		dd offset loc_6F1059CE,	offset loc_6F10633D, offset loc_6F106347
		dd offset loc_6F105C94,	offset loc_6F105C9E, offset loc_6F1060E8
		dd offset loc_6F1060F2,	offset loc_6F105995, offset loc_6F10602C
		dd offset loc_6F10602C,	offset loc_6F10602C, offset loc_6F105D62
		dd offset loc_6F105D62,	offset loc_6F105D62, offset loc_6F105D62
		dd offset loc_6F105D62,	offset loc_6F105D62, offset loc_6F105D62
		dd offset loc_6F105D62,	offset loc_6F105D62, offset loc_6F106351
		dd offset loc_6F10595B,	offset loc_6F1062A7, offset loc_6F105E9F
		dd offset loc_6F105FC5,	offset loc_6F105CA8, offset loc_6F105CEE
		dd offset loc_6F105CEE,	offset loc_6F1060A0, offset loc_6F1060DE
		dd offset loc_6F105DB6,	offset loc_6F105DD0, offset loc_6F105DF4
		dd offset loc_6F10591B,	offset loc_6F106247, offset loc_6F10591B
		dd offset loc_6F10591B,	offset loc_6F106106, offset loc_6F106106
		dd offset loc_6F10636E,	offset loc_6F106393, offset loc_6F105E8F
		dd offset loc_6F106378,	offset loc_6F106333, offset loc_6F1060FC
		dd offset loc_6F1059D8
off_6F111D3C	dd offset loc_6F1065F5	; DATA XREF: sub_6F1058E0+CD9r
		dd offset loc_6F1065E2	; jump table for switch	statement
		dd offset loc_6F1065D1
		dd offset loc_6F1065C0
		dd offset loc_6F106606
aRestrict	db ' restrict',0        ; DATA XREF: sub_6F106C20:loc_6F106C60o
aVolatile	db ' volatile',0        ; DATA XREF: sub_6F106C20:loc_6F106C77o
aConst		db ' const',0           ; DATA XREF: sub_6F106C20:loc_6F106C80o
asc_6F111D6B	db '&&',0               ; DATA XREF: sub_6F106C20:loc_6F106CC7o
					; .rdata:6F112564o
aComplex	db 'complex ',0         ; DATA XREF: sub_6F106C20:loc_6F106CD0o
aImaginary	db 'imaginary ',0       ; DATA XREF: sub_6F106C20:loc_6F106CD7o
		align 4
off_6F111D84	dd offset loc_6F106C57	; DATA XREF: sub_6F106C20:loc_6F106C50r
		dd offset loc_6F106C39	; jump table for switch	statement
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C60
		dd offset loc_6F106C77
		dd offset loc_6F106C80
		dd offset loc_6F106C60
		dd offset loc_6F106C77
		dd offset loc_6F106C80
		dd offset loc_6F106C87
		dd offset loc_6F106C98
		dd offset loc_6F106CB0
		dd offset loc_6F106CC7
		dd offset loc_6F106CD0
		dd offset loc_6F106CD7
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106C39
		dd offset loc_6F106CE0
aSignedChar	db 'signed char',0      ; DATA XREF: .rdata:6F111F40o
					; .rdata:6F111F48o
aBool_0		db 'bool',0             ; DATA XREF: .rdata:6F111F54o
aBoolean	db 'boolean',0          ; DATA XREF: .rdata:6F111F5Co
aChar		db 'char',0             ; DATA XREF: .rdata:6F111F68o
					; .rdata:6F112100o
aByte		db 'byte',0             ; DATA XREF: .rdata:6F111F70o
aDouble		db 'double',0           ; DATA XREF: .rdata:6F111F7Co
					; .rdata:6F111F84o
aLongDouble	db 'long double',0      ; DATA XREF: .rdata:6F111F90o
					; .rdata:6F111F98o
aFloat		db 'float',0            ; DATA XREF: .rdata:6F111FA4o
					; .rdata:6F111FACo
a__float128	db '__float128',0       ; DATA XREF: .rdata:6F111FB8o
					; .rdata:6F111FC0o
aUnsignedChar	db 'unsigned char',0    ; DATA XREF: .rdata:6F111FCCo
					; .rdata:6F111FD4o
aInt		db 'int',0              ; DATA XREF: .rdata:off_6F111FE0o
					; .rdata:6F111FE8o
aUnsignedInt	db 'unsigned int',0     ; DATA XREF: .rdata:6F111FF4o
aUnsigned	db 'unsigned',0         ; DATA XREF: .rdata:6F111FFCo
aLong		db 'long',0             ; DATA XREF: .rdata:6F11201Co
					; .rdata:6F112024o ...
aUnsignedLong	db 'unsigned long',0    ; DATA XREF: .rdata:6F112030o
					; .rdata:6F112038o
a__int128	db '__int128',0         ; DATA XREF: .rdata:6F112044o
					; .rdata:6F11204Co
aUnsigned__int1	db 'unsigned __int128',0 ; DATA XREF: .rdata:6F112058o
					; .rdata:6F112060o
aShort		db 'short',0            ; DATA XREF: .rdata:6F1120A8o
					; .rdata:6F1120B0o
aUnsignedShort	db 'unsigned short',0   ; DATA XREF: .rdata:6F1120BCo
					; .rdata:6F1120C4o
aVoid		db 'void',0             ; DATA XREF: .rdata:6F1120E4o
					; .rdata:6F1120ECo
aWchar_t	db 'wchar_t',0          ; DATA XREF: .rdata:6F1120F8o
aLongLong	db 'long long',0        ; DATA XREF: .rdata:6F11210Co
aUnsignedLongLo	db 'unsigned long long',0 ; DATA XREF: .rdata:6F112120o
					; .rdata:6F112128o
aDecimal32	db 'decimal32',0        ; DATA XREF: .rdata:off_6F112148o
					; .rdata:6F112150o
aDecimal64	db 'decimal64',0        ; DATA XREF: .rdata:off_6F11215Co
					; .rdata:6F112164o
aDecimal128	db 'decimal128',0       ; DATA XREF: .rdata:off_6F112170o
					; .rdata:6F112178o
aHalf		db 'half',0             ; DATA XREF: .rdata:off_6F112184o
					; .rdata:6F11218Co
aChar16_t	db 'char16_t',0         ; DATA XREF: .rdata:off_6F112198o
					; .rdata:6F1121A0o
aChar32_t	db 'char32_t',0         ; DATA XREF: .rdata:off_6F1121ACo
					; .rdata:6F1121B4o
		align 20h
		dd offset aSignedChar	; "signed char"
		dd 0Bh
		dd offset aSignedChar	; "signed char"
		dd 0Bh,	0
		dd offset aBool_0	; "bool"
		dd 4
		dd offset aBoolean	; "boolean"
		dd 2 dup(7)
		dd offset aChar		; "char"
		dd 4
		dd offset aByte		; "byte"
		dd 4, 0
		dd offset aDouble	; "double"
		dd 6
		dd offset aDouble	; "double"
		dd 6, 8
		dd offset aLongDouble	; "long	double"
		dd 0Bh
		dd offset aLongDouble	; "long	double"
		dd 0Bh,	8
		dd offset aFloat	; "float"
		dd 5
		dd offset aFloat	; "float"
		dd 5, 8
		dd offset a__float128	; "__float128"
		dd 0Ah
		dd offset a__float128	; "__float128"
		dd 0Ah,	8
		dd offset aUnsignedChar	; "unsigned char"
		dd 0Dh
		dd offset aUnsignedChar	; "unsigned char"
		dd 0Dh,	0
off_6F111FE0	dd offset aInt		; DATA XREF: sub_6F1058E0+3D6o
					; "int"
		dd 3
		dd offset aInt		; "int"
		dd 3, 1
		dd offset aUnsignedInt	; "unsigned int"
		dd 0Ch
		dd offset aUnsigned	; "unsigned"
		dd 8, 2, 5 dup(0)
		dd offset aLong		; "long"
		dd 4
		dd offset aLong		; "long"
		dd 4, 3
		dd offset aUnsignedLong	; "unsigned long"
		dd 0Dh
		dd offset aUnsignedLong	; "unsigned long"
		dd 0Dh,	4
		dd offset a__int128	; "__int128"
		dd 8
		dd offset a__int128	; "__int128"
		dd 8, 0
		dd offset aUnsigned__int1 ; "unsigned __int128"
		dd 11h
		dd offset aUnsigned__int1 ; "unsigned __int128"
		dd 11h,	10h dup(0)
		dd offset aShort	; "short"
		dd 5
		dd offset aShort	; "short"
		dd 5, 0
		dd offset aUnsignedShort ; "unsigned short"
		dd 0Eh
		dd offset aUnsignedShort ; "unsigned short"
		dd 0Eh,	6 dup(0)
		dd offset aVoid		; "void"
		dd 4
		dd offset aVoid		; "void"
		dd 4, 9
		dd offset aWchar_t	; "wchar_t"
		dd 7
		dd offset aChar		; "char"
		dd 4, 0
		dd offset aLongLong	; "long	long"
		dd 9
		dd offset aLong		; "long"
		dd 4, 5
		dd offset aUnsignedLongLo ; "unsigned long long"
		dd 12h
		dd offset aUnsignedLongLo ; "unsigned long long"
		dd 12h,	6
		dd offset a___		; "..."
		dd 3
		dd offset a___		; "..."
		dd 3, 0
off_6F112148	dd offset aDecimal32	; DATA XREF: sub_6F103890+64Co
					; sub_6F103890+651o
					; "decimal32"
		dd 9
		dd offset aDecimal32	; "decimal32"
		dd 9, 0
off_6F11215C	dd offset aDecimal64	; DATA XREF: sub_6F103890+50Bo
					; sub_6F103890+510o
					; "decimal64"
		dd 9
		dd offset aDecimal64	; "decimal64"
		dd 9, 0
off_6F112170	dd offset aDecimal128	; DATA XREF: sub_6F103890+4D1o
					; sub_6F103890+4D6o
					; "decimal128"
		dd 0Ah
		dd offset aDecimal128	; "decimal128"
		dd 0Ah,	0
off_6F112184	dd offset aHalf		; DATA XREF: sub_6F103890+616o
					; sub_6F103890+61Bo
					; "half"
		dd 4
		dd offset aHalf		; "half"
		dd 4, 8
off_6F112198	dd offset aChar16_t	; DATA XREF: sub_6F103890+439o
					; sub_6F103890+43Eo
					; "char16_t"
		dd 8
		dd offset aChar16_t	; "char16_t"
		dd 8, 0
off_6F1121AC	dd offset aChar32_t	; DATA XREF: sub_6F103890+49Ao
					; sub_6F103890+49Fo
					; "char32_t"
		dd 8
		dd offset aChar32_t	; "char32_t"
		dd 8, 0
aStdAllocator	db 'std::allocator',0   ; DATA XREF: .rdata:6F112360o
					; .rdata:6F112368o
aAllocator	db 'allocator',0        ; DATA XREF: .rdata:6F112370o
aStdBasic_strin	db 'std::basic_string',0 ; DATA XREF: .rdata:6F11237Co
					; .rdata:6F112384o
aBasic_string	db 'basic_string',0     ; DATA XREF: .rdata:6F11238Co
					; .rdata:6F1123A8o
aStdString	db 'std::string',0      ; DATA XREF: .rdata:6F112398o
aStdBasic_str_0	db 'std::basic_string<char, std::char_traits<char>, std::allocator<ch'
					; DATA XREF: .rdata:6F1123A0o
		db 'ar> >',0
aStdIstream	db 'std::istream',0     ; DATA XREF: .rdata:6F1123B4o
aStdBasic_istre	db 'std::basic_istream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6F1123BCo
aBasic_istream	db 'basic_istream',0    ; DATA XREF: .rdata:6F1123C4o
aStdOstream	db 'std::ostream',0     ; DATA XREF: .rdata:6F1123D0o
		align 4
aStdBasic_ostre	db 'std::basic_ostream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6F1123D8o
aBasic_ostream	db 'basic_ostream',0    ; DATA XREF: .rdata:6F1123E0o
aStdIostream	db 'std::iostream',0    ; DATA XREF: .rdata:6F1123ECo
		align 4
aStdBasic_iostr	db 'std::basic_iostream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6F1123F4o
aBasic_iostream	db 'basic_iostream',0   ; DATA XREF: .rdata:6F1123FCo
		align 10h
aT		db 't',0                ; DATA XREF: sub_6F1031B0+4Ao
					; sub_6F1031B0+55o
		align 4
		dd offset aStd		; "std"
		dd 3
		dd offset aStd		; "std"
		dd 3, 2	dup(0)
		dd 61h
		dd offset aStdAllocator	; "std::allocator"
		dd 0Eh
		dd offset aStdAllocator	; "std::allocator"
		dd 0Eh
		dd offset aAllocator	; "allocator"
		dd 9, 62h
		dd offset aStdBasic_strin ; "std::basic_string"
		dd 11h
		dd offset aStdBasic_strin ; "std::basic_string"
		dd 11h
		dd offset aBasic_string	; "basic_string"
		dd 0Ch,	73h
		dd offset aStdString	; "std::string"
		dd 0Bh
		dd offset aStdBasic_str_0 ; "std::basic_string<char, std::char_trait"...
		dd 46h
		dd offset aBasic_string	; "basic_string"
		dd 0Ch,	69h
		dd offset aStdIstream	; "std::istream"
		dd 0Ch
		dd offset aStdBasic_istre ; "std::basic_istream<char, std::char_trai"...
		dd 31h
		dd offset aBasic_istream ; "basic_istream"
		dd 0Dh,	6Fh
		dd offset aStdOstream	; "std::ostream"
		dd 0Ch
		dd offset aStdBasic_ostre ; "std::basic_ostream<char, std::char_trai"...
		dd 31h
		dd offset aBasic_ostream ; "basic_ostream"
		dd 0Dh,	64h
		dd offset aStdIostream	; "std::iostream"
		dd 0Dh
		dd offset aStdBasic_iostr ; "std::basic_iostream<char, std::char_tra"...
		dd 32h
		dd offset aBasic_iostream ; "basic_iostream"
		dd 0Eh
dword_6F112404	dd 26004E61h, 5361003Dh, 61003D00h, 64610061h, 61002600h
					; DATA XREF: sub_6F1031B0:loc_6F1031F5o
					; sub_6F1031B0+6Co ...
		dd 2928006Eh, 6D6300h, 6F63002Ch, 64007E00h, 3D2F0056h
		dd 616400h, 656C6564h, 5D5B6574h, 656400h, 6C64002Ah, 6C656400h
		dd 657465h, 2E007464h, 766400h,	4F65002Fh, 3D5E00h, 5E006F65h
		dd 716500h, 67003D3Dh, 3D3E0065h, 746700h, 536C003Eh, 3D3C3C00h
		dd 656C00h, 6C003D3Ch, 3C3C0073h, 746C00h, 496D003Ch, 3D2D00h
		dd 2A004C6Dh, 696D003Dh, 6D002D00h, 6D6D006Ch, 2D2D00h
		dd 6E00616Eh, 5D5B7765h, 656E00h, 6E003D21h, 746E0067h
		dd 6E002100h, 656E0077h, 526F0077h, 3D7C00h, 7C006F6Fh
		dd 726F007Ch, 70007C00h, 3D2B004Ch, 6C7000h, 6D70002Bh
		dd 2A3E2D00h, 707000h, 70002B2Bh, 74700073h, 3E2D00h, 3F007571h
		dd 4D7200h, 72003D25h, 3E3E0053h, 6D72003Dh, 72002500h
		dd 3E3E0073h, 7A697300h, 20666F65h, 7A7300h, 61007461h
		dd 6E67696Ch, 20666Fh, 7A61h, 6	dup(0)
off_6F112540	dd offset dword_6F112404 ; DATA	XREF: sub_6F1040B0+65o
					; sub_6F1040B0+6Br
		dd offset dword_6F112404+3
		dd 2 dup(2)
		dd offset dword_6F112404+6
		dd offset dword_6F112404+9
		dd 1, 2
		dd offset dword_6F112404+0Bh
		dd offset asc_6F111D6B	; "&&"
		dd 2 dup(2)
		dd offset dword_6F112404+0Eh
		dd offset dword_6F112404+11h
		dd 2 dup(1)
		dd offset dword_6F112404+13h
		dd offset dword_6F112404+11h
		dd 1, 2
		dd offset aCl		; "cl"
		dd offset dword_6F112404+16h
		dd 2 dup(2)
		dd offset dword_6F112404+19h
		dd offset dword_6F112404+1Ch
		dd 1, 2
		dd offset dword_6F112404+1Eh
		dd offset dword_6F112404+21h
		dd 2 dup(1)
		dd offset dword_6F112404+23h
		dd offset dword_6F112404+26h
		dd 2 dup(2)
		dd offset dword_6F112404+29h
		dd offset dword_6F112404+2Ch
		dd 8, 1
		dd offset dword_6F112404+35h
		dd offset dword_6F112404+38h
		dd 2 dup(1)
		dd offset dword_6F112404+3Ah
		dd offset dword_6F112404+3Dh
		dd 6, 1
		dd offset dword_6F112404+44h
		dd offset dword_6F112404+47h
		dd 1, 2
		dd offset dword_6F112404+49h
		dd offset dword_6F112404+4Ch
		dd 1, 2
		dd offset dword_6F112404+4Eh
		dd offset dword_6F112404+51h
		dd 2 dup(2)
		dd offset dword_6F112404+54h
		dd offset dword_6F112404+57h
		dd 1, 2
		dd offset dword_6F112404+59h
		dd offset dword_6F112404+5Ch
		dd 2 dup(2)
		dd offset dword_6F112404+5Fh
		dd offset dword_6F112404+62h
		dd 2 dup(2)
		dd offset dword_6F112404+65h
		dd offset dword_6F112404+68h
		dd 1, 2
		dd offset aIx		; "ix"
		dd offset asc_6F111A9E	; "[]"
		dd 2 dup(2)
		dd offset dword_6F112404+6Ah
		dd offset dword_6F112404+6Dh
		dd 3, 2
		dd offset dword_6F112404+71h
		dd offset dword_6F112404+74h
		dd 2 dup(2)
		dd offset dword_6F112404+77h
		dd offset dword_6F112404+7Ah
		dd 2 dup(2)
		dd offset dword_6F112404+7Dh
		dd offset dword_6F112404+80h
		dd 1, 2
		dd offset dword_6F112404+82h
		dd offset dword_6F112404+85h
		dd 2 dup(2)
		dd offset dword_6F112404+88h
		dd offset dword_6F112404+8Bh
		dd 2 dup(2)
		dd offset dword_6F112404+8Eh
		dd offset dword_6F112404+91h
		dd 1, 2
		dd offset dword_6F112404+93h
		dd offset dword_6F112404+38h
		dd 1, 2
		dd offset dword_6F112404+96h
		dd offset dword_6F112404+99h
		dd 2, 1
		dd offset dword_6F112404+9Ch
		dd offset dword_6F112404+9Fh
		dd 5, 1
		dd offset dword_6F112404+0A5h
		dd offset dword_6F112404+0A8h
		dd 2 dup(2)
		dd offset dword_6F112404+0ABh
		dd offset dword_6F112404+91h
		dd 2 dup(1)
		dd offset dword_6F112404+0AEh
		dd offset dword_6F112404+0B1h
		dd 2 dup(1)
		dd offset dword_6F112404+0B3h
		dd offset dword_6F112404+0B6h
		dd 3, 1
		dd offset dword_6F112404+0BAh
		dd offset dword_6F112404+0BDh
		dd 2 dup(2)
		dd offset dword_6F112404+0C0h
		dd offset dword_6F112404+0C3h
		dd 2 dup(2)
		dd offset dword_6F112404+0C6h
		dd offset dword_6F112404+0C9h
		dd 1, 2
		dd offset dword_6F112404+0CBh
		dd offset dword_6F112404+0CEh
		dd 2 dup(2)
		dd offset dword_6F112404+0D1h
		dd offset dword_6F112404+0D4h
		dd 1, 2
		dd offset dword_6F112404+0D6h
		dd offset dword_6F112404+0D9h
		dd 3, 2
		dd offset dword_6F112404+0DDh
		dd offset dword_6F112404+0E0h
		dd 2, 1
		dd offset dword_6F112404+0E3h
		dd offset dword_6F112404+0D4h
		dd 2 dup(1)
		dd offset dword_6F112404+0E6h
		dd offset dword_6F112404+0E9h
		dd 2 dup(2)
		dd offset dword_6F112404+0ECh
		dd offset dword_6F112404+0EFh
		dd 1, 3
		dd offset dword_6F112404+0F1h
		dd offset dword_6F112404+0F4h
		dd 2 dup(2)
		dd offset dword_6F112404+0F7h
		dd offset dword_6F112404+0FAh
		dd 3, 2
		dd offset dword_6F112404+0FEh
		dd offset dword_6F112404+101h
		dd 1, 2
		dd offset dword_6F112404+103h
		dd offset dword_6F112404+106h
		dd 2 dup(2)
		dd offset aSt		; "st"
		dd offset dword_6F112404+109h
		dd 7, 1
		dd offset dword_6F112404+111h
		dd offset dword_6F112404+109h
		dd 7, 1
		dd offset dword_6F112404+114h
		dd offset dword_6F112404+117h
		dd 8, 1
		dd offset dword_6F112404+120h
		dd offset dword_6F112404+117h
		dd 8, 1, 8 dup(0)
off_6F1128A0	dd offset TlsCallback_0	; DATA XREF: sub_6F101040:loc_6F101137r
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_6F107280+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_6F1072E0+13Ao
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_6F1072E0+126o
					; sub_6F107430+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_6F107430+267o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_6F107430+F4o
		align 4
off_6F112974	dd offset dword_6F113040 ; DATA	XREF: .text:6F1077D8o
		dd offset dword_6F1130A0
aMsvcrt_dll:				; DATA XREF: .text:loc_6F107ED5o
		unicode	0, <msvcrt.dll>,0
		align 8
; Exported entry  37. _ZTI12QPaintDevice
		public _ZTI12QPaintDevice
_ZTI12QPaintDevice dd offset off_6F112CE8 ; DATA XREF: .rdata:6F1129D8o
		dd offset _ZTS12QPaintDevice ; "12QPaintDevice"
; Exported entry  38. _ZTI7QObject
		public _ZTI7QObject
_ZTI7QObject	dd offset off_6F112CE8	; DATA XREF: .rdata:6F1129D0o
		dd offset _ZTS7QObject	; "7QObject"
		align 20h
; Exported entry  39. _ZTI7QWidget
		public _ZTI7QWidget
_ZTI7QWidget	dd offset off_6F112D88	; DATA XREF: .rdata:6F112A1Co
		dd offset _ZTS7QWidget	; "7QWidget"
		dd 0
		dd 2
		dd offset _ZTI7QObject
		dd 2
		dd offset _ZTI12QPaintDevice
		dd 802h
off_6F1129E0	dd offset off_6F112CE8	; DATA XREF: sub_6F10B4E0+351o
					; .rdata:6F112CCCo
		dd offset aN10__cxxabiv11 ; "N10__cxxabiv115__forced_unwindE"
off_6F1129E8	dd offset off_6F112D48	; DATA XREF: .rdata:6F112A04o
					; .rdata:6F112A10o ...
		dd offset aN10__cxxabiv_0 ; "N10__cxxabiv117__class_type_infoE"
		dd offset off_6F112A58
off_6F1129F4	dd offset off_6F112CE8	; DATA XREF: sub_6F10B4E0+547o
					; .rdata:6F112D24o
		dd offset aN10__cxxabiv_1 ; "N10__cxxabiv119__foreign_exceptionE"
off_6F1129FC	dd offset off_6F112D48	; DATA XREF: .rdata:6F112D44o
		dd offset aN10__cxxabiv12 ; "N10__cxxabiv120__si_class_type_infoE"
		dd offset off_6F1129E8
off_6F112A08	dd offset off_6F112D48	; DATA XREF: .rdata:6F112D84o
		dd offset aN10__cxxabiv_2 ; "N10__cxxabiv121__vmi_class_type_infoE"
		dd offset off_6F1129E8
; Exported entry  40. _ZTIN15KleopatraClient3Gui20CertificateRequesterE
		public _ZTIN15KleopatraClient3Gui20CertificateRequesterE
_ZTIN15KleopatraClient3Gui20CertificateRequesterE dd offset off_6F112D48
					; DATA XREF: .rdata:6F112DC4o
					; .rdata:6F112EACo
		dd offset _ZTSN15KleopatraClient3Gui20CertificateRequesterE ; "N15KleopatraClient3Gui20CertificateRequ"...
		dd offset _ZTI7QWidget
off_6F112A20	dd offset off_6F112D48	; DATA XREF: sub_6F10A720+212o
					; sub_6F10A9B0+1C1o ...
		dd offset aN9__gnu_cxx24_ ; "N9__gnu_cxx24__concurrence_lock_errorE"
		dd offset off_6F112A50
off_6F112A2C	dd offset off_6F112D48	; DATA XREF: sub_6F109430+78o
					; sub_6F10A720+1E8o ...
		dd offset aN9__gnu_cxx26_ ; "N9__gnu_cxx26__concurrence_unlock_error"...
		dd offset off_6F112A50
off_6F112A38	dd offset off_6F112D48	; DATA XREF: sub_6F10ADBD+A8o
					; sub_6F10ADBD+D0o ...
		dd offset aSt13bad_except ; "St13bad_exception"
		dd offset off_6F112A50
off_6F112A44	dd offset off_6F112D48	; DATA XREF: sub_6F10A720+8Eo
					; .text:6F10BBD4o ...
		dd offset aSt9bad_alloc	; "St9bad_alloc"
		dd offset off_6F112A50
off_6F112A50	dd offset off_6F112CE8	; DATA XREF: .text:6F10BC74o
					; .rdata:6F112A28o ...
		dd offset aSt9exception	; "St9exception"
off_6F112A58	dd offset off_6F112CE8	; DATA XREF: .rdata:6F1129F0o
					; .rdata:6F112F64o
		dd offset aSt9type_info	; "St9type_info"
; Exported entry  41. _ZTS12QPaintDevice
		public _ZTS12QPaintDevice
_ZTS12QPaintDevice db '12QPaintDevice',0 ; DATA XREF: .rdata:6F11299Co
		align 10h
; Exported entry  42. _ZTS7QObject
		public _ZTS7QObject
_ZTS7QObject	db '7QObject',0         ; DATA XREF: .rdata:6F1129A4o
		align 4
; Exported entry  43. _ZTS7QWidget
		public _ZTS7QWidget
_ZTS7QWidget	db '7QWidget',0         ; DATA XREF: .rdata:6F1129C4o
		align 20h
aN10__cxxabiv11	db 'N10__cxxabiv115__forced_unwindE',0 ; DATA XREF: .rdata:6F1129E4o
aN10__cxxabiv_0	db 'N10__cxxabiv117__class_type_infoE',0 ; DATA XREF: .rdata:6F1129ECo
		align 20h
aN10__cxxabiv_1	db 'N10__cxxabiv119__foreign_exceptionE',0 ; DATA XREF: .rdata:6F1129F8o
		align 20h
aN10__cxxabiv12	db 'N10__cxxabiv120__si_class_type_infoE',0 ; DATA XREF: .rdata:6F112A00o
		align 20h
aN10__cxxabiv_2	db 'N10__cxxabiv121__vmi_class_type_infoE',0 ; DATA XREF: .rdata:6F112A0Co
		align 20h
; Exported entry  44. _ZTSN15KleopatraClient3Gui20CertificateRequesterE
		public _ZTSN15KleopatraClient3Gui20CertificateRequesterE
_ZTSN15KleopatraClient3Gui20CertificateRequesterE db 'N15KleopatraClient3Gui20CertificateRequesterE',0
					; DATA XREF: .rdata:6F112A18o
		align 20h
aN9__gnu_cxx24_	db 'N9__gnu_cxx24__concurrence_lock_errorE',0 ; DATA XREF: .rdata:6F112A24o
		align 20h
aN9__gnu_cxx26_	db 'N9__gnu_cxx26__concurrence_unlock_errorE',0
					; DATA XREF: .rdata:6F112A30o
		align 20h
aSt13bad_except	db 'St13bad_exception',0 ; DATA XREF: .rdata:6F112A3Co
		align 4
aSt9bad_alloc	db 'St9bad_alloc',0     ; DATA XREF: .rdata:6F112A48o
		align 4
aSt9exception	db 'St9exception',0     ; DATA XREF: .rdata:6F112A54o
		align 4
aSt9type_info	db 'St9type_info',0     ; DATA XREF: .rdata:6F112A5Co
		align 4
		dd 2 dup(0)
		dd offset off_6F1129E0
off_6F112CD0	dd offset sub_6F108BE0	; DATA XREF: sub_6F108BC0+7o
					; sub_6F108BE0+4o ...
		dd offset sub_6F108BC0
		dd offset sub_6F10B3F0
		dd 2 dup(0)
		dd offset off_6F1129E8
off_6F112CE8	dd offset sub_6F108C30	; DATA XREF: sub_6F108C00+8o
					; sub_6F108C30+7o ...
		dd offset sub_6F108C00
		dd offset sub_6F10A510
		dd offset sub_6F10A520
		dd offset sub_6F109810
		dd offset sub_6F1098E0
		dd offset sub_6F109890
		dd offset sub_6F109950
		dd offset sub_6F1099D0
		dd 6 dup(0)
		dd offset off_6F1129F4
off_6F112D28	dd offset sub_6F108C90	; DATA XREF: sub_6F108C70+7o
					; sub_6F108C90+4o ...
		dd offset sub_6F108C70
		dd offset sub_6F10B3F0
		dd 4 dup(0)
		dd offset off_6F1129FC
off_6F112D48	dd offset sub_6F108CE0	; DATA XREF: sub_6F108CB0+8o
					; sub_6F108CE0+7o ...
		dd offset sub_6F108CB0
		dd offset sub_6F10A510
		dd offset sub_6F10A520
		dd offset sub_6F109810
		dd offset sub_6F1098E0
		dd offset sub_6F1099F0
		dd offset sub_6F109A80
		dd offset sub_6F109BA0
		dd 6 dup(0)
		dd offset off_6F112A08
off_6F112D88	dd offset sub_6F108D50	; DATA XREF: sub_6F108D20+8o
					; sub_6F108D50+7o ...
		dd offset sub_6F108D20
		dd offset sub_6F10A510
		dd offset sub_6F10A520
		dd offset sub_6F109810
		dd offset sub_6F1098E0
		dd offset sub_6F109C40
		dd offset sub_6F109E60
		dd offset sub_6F10A3D0
		align 20h
; Exported entry  45. _ZTVN15KleopatraClient3Gui20CertificateRequesterE
		public _ZTVN15KleopatraClient3Gui20CertificateRequesterE
_ZTVN15KleopatraClient3Gui20CertificateRequesterE dd 0
		dd offset _ZTIN15KleopatraClient3Gui20CertificateRequesterE
off_6F112DC8	dd offset _ZNK15KleopatraClient3Gui20CertificateRequester10metaObjectEv
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+35o
					; _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE+5Bo ...
		dd offset _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc
		dd offset _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv
		dd offset _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev
		dd offset _ZN15KleopatraClient3Gui20CertificateRequesterD0Ev
		dd offset _ZN7QWidget5eventEP6QEvent
		dd offset _ZN7QObject11eventFilterEPS_P6QEvent
		dd offset _ZN7QObject10timerEventEP11QTimerEvent
		dd offset _ZN7QObject10childEventEP11QChildEvent
		dd offset _ZN7QObject11customEventEP6QEvent
		dd offset _ZN7QObject13connectNotifyEPKc
		dd offset _ZN7QObject16disconnectNotifyEPKc
		dd offset _ZNK7QWidget7devTypeEv
		dd offset _ZN7QWidget10setVisibleEb
		dd offset _ZNK7QWidget8sizeHintEv
		dd offset _ZNK7QWidget15minimumSizeHintEv
		dd offset _ZNK7QWidget14heightForWidthEi
		dd offset _ZNK7QWidget5getDCEv
		dd offset _ZNK7QWidget9releaseDCEP5HDC__
		dd offset _ZNK7QWidget11paintEngineEv
		dd offset _ZN7QWidget15mousePressEventEP11QMouseEvent
		dd offset _ZN7QWidget17mouseReleaseEventEP11QMouseEvent
		dd offset _ZN7QWidget21mouseDoubleClickEventEP11QMouseEvent
		dd offset _ZN7QWidget14mouseMoveEventEP11QMouseEvent
		dd offset _ZN7QWidget10wheelEventEP11QWheelEvent
		dd offset _ZN7QWidget13keyPressEventEP9QKeyEvent
		dd offset _ZN7QWidget15keyReleaseEventEP9QKeyEvent
		dd offset _ZN7QWidget12focusInEventEP11QFocusEvent
		dd offset _ZN7QWidget13focusOutEventEP11QFocusEvent
		dd offset _ZN7QWidget10enterEventEP6QEvent
		dd offset _ZN7QWidget10leaveEventEP6QEvent
		dd offset _ZN7QWidget10paintEventEP11QPaintEvent
		dd offset _ZN7QWidget9moveEventEP10QMoveEvent
		dd offset _ZN7QWidget11resizeEventEP12QResizeEvent
		dd offset _ZN7QWidget10closeEventEP11QCloseEvent
		dd offset _ZN7QWidget16contextMenuEventEP17QContextMenuEvent
		dd offset _ZN7QWidget11tabletEventEP12QTabletEvent
		dd offset _ZN7QWidget11actionEventEP12QActionEvent
		dd offset _ZN7QWidget14dragEnterEventEP15QDragEnterEvent
		dd offset _ZN7QWidget13dragMoveEventEP14QDragMoveEvent
		dd offset _ZN7QWidget14dragLeaveEventEP15QDragLeaveEvent
		dd offset _ZN7QWidget9dropEventEP10QDropEvent
		dd offset _ZN7QWidget9showEventEP10QShowEvent
		dd offset _ZN7QWidget9hideEventEP10QHideEvent
		dd offset _ZN7QWidget8winEventEP6tagMSGPl
		dd offset _ZN7QWidget11changeEventEP6QEvent
		dd offset _ZNK7QWidget6metricEN12QPaintDevice17PaintDeviceMetricE
		dd offset _ZN7QWidget16inputMethodEventEP17QInputMethodEvent
		dd offset _ZNK7QWidget16inputMethodQueryEN2Qt16InputMethodQueryE
		dd offset _ZN7QWidget18focusNextPrevChildEb
		dd offset _ZN7QWidget11styleChangeER6QStyle
		dd offset _ZN7QWidget13enabledChangeEb
		dd offset _ZN7QWidget13paletteChangeERK8QPalette
		dd offset _ZN7QWidget10fontChangeERK5QFont
		dd offset _ZN7QWidget22windowActivationChangeEb
		dd offset _ZN7QWidget14languageChangeEv
		dd 0FFFFFFF8h
		dd offset _ZTIN15KleopatraClient3Gui20CertificateRequesterE
off_6F112EB0	dd offset _ZThn8_N15KleopatraClient3Gui20CertificateRequesterD1Ev
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+3Bo
					; _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE+61o ...
		dd offset _ZThn8_N15KleopatraClient3Gui20CertificateRequesterD0Ev
		dd offset _ZThn8_NK7QWidget7devTypeEv
		dd offset _ZThn8_NK7QWidget11paintEngineEv
		dd offset _ZThn8_NK7QWidget5getDCEv
		dd offset _ZThn8_NK7QWidget9releaseDCEP5HDC__
		dd offset _ZThn8_NK7QWidget6metricEN12QPaintDevice17PaintDeviceMetricE
		dd 6 dup(0)
		dd offset off_6F112A20
off_6F112EE8	dd offset sub_6F109520	; DATA XREF: sub_6F1094F0+8o
					; sub_6F109520+7o ...
		dd offset sub_6F1094F0
		dd offset sub_6F10A4A0
		dd 2 dup(0)
		dd offset off_6F112A2C
off_6F112F00	dd offset sub_6F109570	; DATA XREF: sub_6F109430+6Ao
					; sub_6F109540+8o ...
		dd offset sub_6F109540
		dd offset sub_6F10A4B0
		dd 2 dup(0)
		dd offset off_6F112A38
off_6F112F18	dd offset sub_6F10A580	; DATA XREF: sub_6F10ADBD+C2o
		dd offset sub_6F10A560
		dd offset sub_6F10A4C0
		dd 2 dup(0)
		dd offset off_6F112A44
off_6F112F30	dd offset sub_6F10A5D0	; DATA XREF: sub_6F10A5A0+8o
					; sub_6F10A5D0+7o ...
		dd offset sub_6F10A5A0
		dd offset sub_6F10A4D0
		dd 2 dup(0)
		dd offset off_6F112A50
off_6F112F48	dd offset sub_6F10A630	; DATA XREF: sub_6F10A560+7o
					; sub_6F10A580+4o ...
		dd offset sub_6F10A610
		dd offset sub_6F10A4E0
		dd 4 dup(0)
		dd offset off_6F112A58
off_6F112F68	dd offset sub_6F10A670	; DATA XREF: sub_6F10A650+7o
					; sub_6F10A670+4o ...
		dd offset sub_6F10A650
		dd offset sub_6F10A510
		dd offset sub_6F10A520
		dd offset sub_6F10A4F0
		dd offset sub_6F10A500
dword_6F112F80	dd 0			; DATA XREF: sub_6F107430+57o
					; sub_6F107430+5Co ...
dword_6F112F84	dd 0			; DATA XREF: sub_6F107430+7Ar
dword_6F112F88	dd 0			; DATA XREF: sub_6F107430+84r
dword_6F112F8C	dd 1Dh dup(0)		; DATA XREF: sub_6F107430+8Do
_rdata		ends

; Section 4. (virtual address 00013000)
; Virtual size			: 000003C8 (	968.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 6F113000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_6F113000	dd ?			; DATA XREF: sub_6F101040+Dr
					; sub_6F101040+22w ...
TlsIndex	dd 4 dup(?)		; DATA XREF: .tls:TlsIndex_ptro
dword_6F113014	dd ?			; DATA XREF: DllEntryPoint+7w
dword_6F113018	dd ?			; DATA XREF: sub_6F1072E0+2Cr
					; sub_6F1072E0+65r ...
dword_6F11301C	dd ?			; DATA XREF: sub_6F1072E0:loc_6F107300r
					; sub_6F1072E0:loc_6F1073A2w ...
dword_6F113020	dd ?			; DATA XREF: sub_6F107430+9r
					; sub_6F107430:loc_6F107450w
dword_6F113024	dd ?			; DATA XREF: sub_6F107740+3r
					; sub_6F107740:loc_6F107751w
		align 20h
dword_6F113040	dd ?			; DATA XREF: .text:6F107792w
					; .rdata:off_6F112974o
dword_6F113044	dd ?			; DATA XREF: .text:6F10779Cw
		dd ?
dword_6F11304C	dd ?			; DATA XREF: .text:6F1077ABw
		dd 14h dup(?)
dword_6F1130A0	dd 2Bh dup(?)		; DATA XREF: .rdata:6F112978o
dword_6F11314C	dd ?			; DATA XREF: .text:6F1077BAw
		dd 2 dup(?)
dword_6F113158	dd ?			; DATA XREF: .text:6F1077A6w
		dd 2 dup(?)
dword_6F113164	dd ?			; DATA XREF: .text:6F10778Cw
		dd 86h dup(?)
dword_6F113380	dd ?			; DATA XREF: sub_6F1078E0+7r
					; sub_6F107960+26r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_6F1078E0:loc_6F1078F8o
					; sub_6F1078E0:loc_6F107945o ...
dword_6F11339C	dd ?			; DATA XREF: sub_6F1078E0+25r
					; .text:6F107A15r ...
		dd ?
dword_6F1133A4	dd ?			; DATA XREF: .text:6F107E36r
					; .text:6F107ECAw ...
dword_6F1133A8	dd ?			; DATA XREF: sub_6F101000+21w
					; sub_6F101040+143r ...
dword_6F1133AC	dd ?			; DATA XREF: sub_6F101000+1Cw
					; sub_6F101040:loc_6F101170r ...
dword_6F1133B0	dd ?			; DATA XREF: sub_6F101040+4Co
					; sub_6F101040+C1o ...
dword_6F1133B4	dd ?			; DATA XREF: sub_6F101040+5Fr
					; sub_6F101040:loc_6F101116r ...
		align 1000h
_bss		ends

;
; Imports from libkleopatraclientcore.dll
;
; Section 6. (virtual address 00015000)
; Virtual size			: 00001FE4 (   8164.)
; Section size in file		: 00002000 (   8192.)
; Offset to raw	data for section: 00012C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn _ZN15KleopatraClient24SelectCertificateCommandC1EP7QObject:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+6Ep
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+6Er
		extrn _ZN15KleopatraClient24SelectCertificateCommand30setMultipleCertificatesAllowedEb:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+95p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+95r
		extrn _ZN15KleopatraClient24SelectCertificateCommand33setOnlySigningCertificatesAllowedEb:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+B1p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+B1r
		extrn _ZN15KleopatraClient24SelectCertificateCommand36setOnlyEncryptionCertificatesAllowedEb:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+CEp
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+CEr
		extrn _ZN15KleopatraClient24SelectCertificateCommand33setOnlyOpenPGPCertificatesAllowedEb:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+EBp
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+EBr
		extrn _ZN15KleopatraClient24SelectCertificateCommand30setOnlyX509CertificatesAllowedEb:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+108p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+108r
		extrn _ZN15KleopatraClient24SelectCertificateCommand24setOnlySecretKeysAllowedEb:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+125p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+125r
		extrn _ZN15KleopatraClient24SelectCertificateCommand23setSelectedCertificatesERK11QStringList:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+13Bp
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+13Br
		extrn _ZN15KleopatraClient7Command12setParentWIdEP6HWND__:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+166p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+166r
		extrn _ZN15KleopatraClient7Command5startEv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+1E0p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+1E0r
		extrn _ZNK15KleopatraClient7Command11wasCanceledEv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+42p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+42r
		extrn _ZNK15KleopatraClient7Command5errorEv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+59p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+59r
		extrn _ZNK15KleopatraClient7Command11errorStringEv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+84p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+84r
		extrn _ZNK15KleopatraClient24SelectCertificateCommand20selectedCertificatesEv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+1E7p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+1E7r

;
; Imports from QtCore4.dll
;
		extrn _ZN11QMetaObject8activateEP7QObjectPKS_iPPv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester27selectedCertificatesChangedERK11QStringList+32p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester27selectedCertificatesChangedERK11QStringList+32r
		extrn _ZN7QString4freeEPNS_4DataE:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+13Ep
					; _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+23Dp	...
		extrn _ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+1A0p
					; _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+25Ap
					; DATA XREF: ...
		extrn _ZN11QMetaObject11changeGuardEPP7QObjectS1_:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+1C4p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+1C4r
		extrn _Z5qFreePv:dword	; DATA XREF: _ZN5QListI7QStringE4freeEPN9QListData4DataE:loc_6F10921Er
		extrn _ZN9QListData6detachEi:dword
					; CODE XREF: _ZN5QListI7QStringE13detach_helperEv+1Ap
					; DATA XREF: _ZN5QListI7QStringE13detach_helperEv+1Ar
		extrn _ZN7QString11shared_nullE:dword
					; DATA XREF: _ZNK15KleopatraClient3Gui20CertificateRequester19selectedCertificateEv:loc_6F101A05r
		extrn _ZN9QListData11detach_growEPii:dword
					; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+71p
					; DATA XREF: _ZN5QListI7QStringE6appendERKS0_+71r
		extrn _ZN9QListData6appendEv:dword
					; CODE XREF: _ZN5QListI7QStringE6appendERKS0_+15Bp
					; DATA XREF: _ZN5QListI7QStringE6appendERKS0_+15Br
		extrn _ZN11QMetaObject11removeGuardEPP7QObject:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+98p
					; sub_6F101B81+5Dp ...
		extrn _ZNK11QMetaObject2trEPKcS1_:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+B2p
					; _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+113p ...
		extrn _ZN7QString17fromLatin1_helperEPKci:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+C6p
					; _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+E8p	...
		extrn _ZN7QObject13setObjectNameERK7QString:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+105p
					; _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+158p ...
		extrn _ZN9QListData11shared_nullE:dword
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE+89r
					; _ZN15KleopatraClient3Gui20CertificateRequester22setSelectedCertificateERK7QString+2Fr ...
		extrn _ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+EDp
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+EDr
		extrn _ZNK7QStringeqERKS_:dword
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+18Ar
		extrn _ZNK7QString3argERKS_iRK5QChar:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+E5p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+E5r
		extrn __imp__ZN7QObject11eventFilterEPS_P6QEvent:dword
					; DATA XREF: _ZN7QObject11eventFilterEPS_P6QEventr
		extrn __imp__ZN7QObject10timerEventEP11QTimerEvent:dword
					; DATA XREF: _ZN7QObject10timerEventEP11QTimerEventr
		extrn __imp__ZN7QObject10childEventEP11QChildEvent:dword
					; DATA XREF: _ZN7QObject10childEventEP11QChildEventr
		extrn __imp__ZN7QObject11customEventEP6QEvent:dword
					; DATA XREF: _ZN7QObject11customEventEP6QEventr
		extrn __imp__ZN7QObject13connectNotifyEPKc:dword
					; DATA XREF: _ZN7QObject13connectNotifyEPKcr
		extrn __imp__ZN7QObject16disconnectNotifyEPKc:dword
					; DATA XREF: _ZN7QObject16disconnectNotifyEPKcr

;
; Imports from QtGui4.dll
;
		extrn _ZN7QWidget16staticMetaObjectE:dword ; DATA XREF:	sub_6F101680r
		extrn _ZN7QWidget11qt_metacastEPKc:dword
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacastEPKc:loc_6F101723r
		extrn _ZNK7QWidget6windowEv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+149p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+149r
		extrn _ZNK7QWidget14effectiveWinIdEv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+156p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+156r
		extrn _ZN7QWidget10setEnabledEb:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private17slotButtonClickedEv+1F7p
					; _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+1AAp
					; DATA XREF: ...
		extrn _ZN11QHBoxLayoutD1Ev:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+56p
					; _ZN15KleopatraClient3Gui20CertificateRequesterD2Ev+56p ...
		extrn _ZN11QPushButtonD1Ev:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+6Cp
					; sub_6F101B81+31p ...
		extrn _ZN9QLineEditD1Ev:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+82p
					; sub_6F101B81+47p ...
		extrn _ZN7QWidgetD2Ev:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterD1Ev+D3p
					; sub_6F101B81+85p ...
		extrn _ZN9QLineEditC1EP7QWidget:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+46p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+46r
		extrn _ZN11QPushButtonC1ERK7QStringP7QWidget:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+9Bp
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+9Br
		extrn _ZN11QHBoxLayoutC1EP7QWidget:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+CCp
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+CCr
		extrn _ZN10QBoxLayout9addWidgetEP7QWidgeti6QFlagsIN2Qt13AlignmentFlagEE:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+1EFp
					; _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+21Bp
					; DATA XREF: ...
		extrn _ZN9QLineEdit11setReadOnlyEb:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+22Fp
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private2UiC1EPS1_+22Fr
		extrn _ZN7QWidgetC2EPS_6QFlagsIN2Qt10WindowTypeEE:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequesterC2EP7QWidget6QFlagsIN2Qt10WindowTypeEE+52p
					; _ZN15KleopatraClient3Gui20CertificateRequesterC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE+52p
					; DATA XREF: ...
		extrn _ZN9QLineEdit7setTextERK7QString:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+10Dp
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester23setSelectedCertificatesERK11QStringList+10Dr
		extrn _ZN11QMessageBox11informationEP7QWidgetRK7QStringS4_6QFlagsINS_14StandardButtonEES6_:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+148p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester7Private19slotCommandFinishedEv+148r
		extrn _ZN7QWidget11qt_metacallEN11QMetaObject4CallEiPPv:dword
					; CODE XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+52p
					; DATA XREF: _ZN15KleopatraClient3Gui20CertificateRequester11qt_metacallEN11QMetaObject4CallEiPPv+52r
		extrn __imp__ZN7QWidget5eventEP6QEvent:dword
					; DATA XREF: _ZN7QWidget5eventEP6QEventr
		extrn __imp__ZNK7QWidget7devTypeEv:dword
					; DATA XREF: _ZNK7QWidget7devTypeEvr
		extrn __imp__ZN7QWidget10setVisibleEb:dword
					; DATA XREF: _ZN7QWidget10setVisibleEbr
		extrn __imp__ZNK7QWidget8sizeHintEv:dword
					; DATA XREF: _ZNK7QWidget8sizeHintEvr
		extrn __imp__ZNK7QWidget15minimumSizeHintEv:dword
					; DATA XREF: _ZNK7QWidget15minimumSizeHintEvr
		extrn __imp__ZNK7QWidget14heightForWidthEi:dword
					; DATA XREF: _ZNK7QWidget14heightForWidthEir
		extrn __imp__ZNK7QWidget5getDCEv:dword ; DATA XREF: _ZNK7QWidget5getDCEvr
		extrn __imp__ZNK7QWidget9releaseDCEP5HDC__:dword
					; DATA XREF: _ZNK7QWidget9releaseDCEP5HDC__r
		extrn __imp__ZNK7QWidget11paintEngineEv:dword
					; DATA XREF: _ZNK7QWidget11paintEngineEvr
		extrn __imp__ZN7QWidget15mousePressEventEP11QMouseEvent:dword
					; DATA XREF: _ZN7QWidget15mousePressEventEP11QMouseEventr
		extrn __imp__ZN7QWidget17mouseReleaseEventEP11QMouseEvent:dword
					; DATA XREF: _ZN7QWidget17mouseReleaseEventEP11QMouseEventr
		extrn __imp__ZN7QWidget21mouseDoubleClickEventEP11QMouseEvent:dword
					; DATA XREF: _ZN7QWidget21mouseDoubleClickEventEP11QMouseEventr
		extrn __imp__ZN7QWidget14mouseMoveEventEP11QMouseEvent:dword
					; DATA XREF: _ZN7QWidget14mouseMoveEventEP11QMouseEventr
		extrn __imp__ZN7QWidget10wheelEventEP11QWheelEvent:dword
					; DATA XREF: _ZN7QWidget10wheelEventEP11QWheelEventr
		extrn __imp__ZN7QWidget13keyPressEventEP9QKeyEvent:dword
					; DATA XREF: _ZN7QWidget13keyPressEventEP9QKeyEventr
		extrn __imp__ZN7QWidget15keyReleaseEventEP9QKeyEvent:dword
					; DATA XREF: _ZN7QWidget15keyReleaseEventEP9QKeyEventr
		extrn __imp__ZN7QWidget12focusInEventEP11QFocusEvent:dword
					; DATA XREF: _ZN7QWidget12focusInEventEP11QFocusEventr
		extrn __imp__ZN7QWidget13focusOutEventEP11QFocusEvent:dword
					; DATA XREF: _ZN7QWidget13focusOutEventEP11QFocusEventr
		extrn __imp__ZN7QWidget10enterEventEP6QEvent:dword
					; DATA XREF: _ZN7QWidget10enterEventEP6QEventr
		extrn __imp__ZN7QWidget10leaveEventEP6QEvent:dword
					; DATA XREF: _ZN7QWidget10leaveEventEP6QEventr
		extrn __imp__ZN7QWidget10paintEventEP11QPaintEvent:dword
					; DATA XREF: _ZN7QWidget10paintEventEP11QPaintEventr
		extrn __imp__ZN7QWidget9moveEventEP10QMoveEvent:dword
					; DATA XREF: _ZN7QWidget9moveEventEP10QMoveEventr
		extrn __imp__ZN7QWidget11resizeEventEP12QResizeEvent:dword
					; DATA XREF: _ZN7QWidget11resizeEventEP12QResizeEventr
		extrn __imp__ZN7QWidget10closeEventEP11QCloseEvent:dword
					; DATA XREF: _ZN7QWidget10closeEventEP11QCloseEventr
		extrn __imp__ZN7QWidget16contextMenuEventEP17QContextMenuEvent:dword
					; DATA XREF: _ZN7QWidget16contextMenuEventEP17QContextMenuEventr
		extrn __imp__ZN7QWidget11tabletEventEP12QTabletEvent:dword
					; DATA XREF: _ZN7QWidget11tabletEventEP12QTabletEventr
		extrn __imp__ZN7QWidget11actionEventEP12QActionEvent:dword
					; DATA XREF: _ZN7QWidget11actionEventEP12QActionEventr
		extrn __imp__ZN7QWidget14dragEnterEventEP15QDragEnterEvent:dword
					; DATA XREF: _ZN7QWidget14dragEnterEventEP15QDragEnterEventr
		extrn __imp__ZN7QWidget13dragMoveEventEP14QDragMoveEvent:dword
					; DATA XREF: _ZN7QWidget13dragMoveEventEP14QDragMoveEventr
		extrn __imp__ZN7QWidget14dragLeaveEventEP15QDragLeaveEvent:dword
					; DATA XREF: _ZN7QWidget14dragLeaveEventEP15QDragLeaveEventr
		extrn __imp__ZN7QWidget9dropEventEP10QDropEvent:dword
					; DATA XREF: _ZN7QWidget9dropEventEP10QDropEventr
		extrn __imp__ZN7QWidget9showEventEP10QShowEvent:dword
					; DATA XREF: _ZN7QWidget9showEventEP10QShowEventr
		extrn __imp__ZN7QWidget9hideEventEP10QHideEvent:dword
					; DATA XREF: _ZN7QWidget9hideEventEP10QHideEventr
		extrn __imp__ZN7QWidget8winEventEP6tagMSGPl:dword
					; DATA XREF: _ZN7QWidget8winEventEP6tagMSGPlr
		extrn __imp__ZN7QWidget11changeEventEP6QEvent:dword
					; DATA XREF: _ZN7QWidget11changeEventEP6QEventr
		extrn __imp__ZNK7QWidget6metricEN12QPaintDevice17PaintDeviceMetricE:dword
					; DATA XREF: _ZNK7QWidget6metricEN12QPaintDevice17PaintDeviceMetricEr
		extrn __imp__ZN7QWidget16inputMethodEventEP17QInputMethodEvent:dword
					; DATA XREF: _ZN7QWidget16inputMethodEventEP17QInputMethodEventr
		extrn __imp__ZNK7QWidget16inputMethodQueryEN2Qt16InputMethodQueryE:dword
					; DATA XREF: _ZNK7QWidget16inputMethodQueryEN2Qt16InputMethodQueryEr
		extrn __imp__ZN7QWidget18focusNextPrevChildEb:dword
					; DATA XREF: _ZN7QWidget18focusNextPrevChildEbr
		extrn __imp__ZN7QWidget11styleChangeER6QStyle:dword
					; DATA XREF: _ZN7QWidget11styleChangeER6QStyler
		extrn __imp__ZN7QWidget13enabledChangeEb:dword
					; DATA XREF: _ZN7QWidget13enabledChangeEbr
		extrn __imp__ZN7QWidget13paletteChangeERK8QPalette:dword
					; DATA XREF: _ZN7QWidget13paletteChangeERK8QPaletter
		extrn __imp__ZN7QWidget10fontChangeERK5QFont:dword
					; DATA XREF: _ZN7QWidget10fontChangeERK5QFontr
		extrn __imp__ZN7QWidget22windowActivationChangeEb:dword
					; DATA XREF: _ZN7QWidget22windowActivationChangeEbr
		extrn __imp__ZN7QWidget14languageChangeEv:dword
					; DATA XREF: _ZN7QWidget14languageChangeEvr
		extrn __imp__ZThn8_NK7QWidget7devTypeEv:dword
					; DATA XREF: _ZThn8_NK7QWidget7devTypeEvr
		extrn __imp__ZThn8_NK7QWidget11paintEngineEv:dword
					; DATA XREF: _ZThn8_NK7QWidget11paintEngineEvr
		extrn __imp__ZThn8_NK7QWidget5getDCEv:dword
					; DATA XREF: _ZThn8_NK7QWidget5getDCEvr
		extrn __imp__ZThn8_NK7QWidget9releaseDCEP5HDC__:dword
					; DATA XREF: _ZThn8_NK7QWidget9releaseDCEP5HDC__r
		extrn __imp__ZThn8_NK7QWidget6metricEN12QPaintDevice17PaintDeviceMetricE:dword
					; DATA XREF: _ZThn8_NK7QWidget6metricEN12QPaintDevice17PaintDeviceMetricEr

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: .text:6F1082ADp
					; DATA XREF: .text:6F1082ADr
; HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpName)
		extrn CreateSemaphoreA:dword ; CODE XREF: .text:6F10824Bp
					; sub_6F108260+2Dp
					; DATA XREF: ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_6F107960+41p
					; DATA XREF: sub_6F107960+41r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_6F1078E0+1Fp
					; .text:6F107A0Fp ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:6F1077E8p
					; DATA XREF: .text:6F1077E8r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_6F107810+6Cp
					; DATA XREF: sub_6F107810+6Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_6F107810+74p
					; .text:6F1080F8p ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_6F1078E0+4Cp
					; sub_6F1082F0+Bp
					; DATA XREF: ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_6F101430+16p
					; .text:6F107EC1p
					; DATA XREF: ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_6F101430+35p
					; DATA XREF: sub_6F101430+35r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_6F107810+57p
					; DATA XREF: sub_6F107810+57r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_6F107810+7Cp
					; DATA XREF: sub_6F107810+7Cr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_6F107960+77p
					; DATA XREF: sub_6F107960+77r
; PVOID	__stdcall InterlockedCompareExchange(PVOID *Destination, PVOID Exchange, PVOID Comperand)
		extrn InterlockedCompareExchange:dword
; LONG __stdcall InterlockedExchange(LPLONG Target, LONG Value)
		extrn InterlockedExchange:dword
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_6F1078E0+6Cp
					; .text:6F107A46p ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: .text:6F107EDCp
					; DATA XREF: .text:6F107EDCr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_6F107810+8Bp
					; DATA XREF: sub_6F107810+8Br
; BOOL __stdcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG	lpPreviousCount)
		extrn ReleaseSemaphore:dword ; CODE XREF: .text:6F10807Cp
					; sub_6F1080A0+31p
					; DATA XREF: ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_6F1082F0+28p
					; DATA XREF: sub_6F1082F0+28r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: .text:6F1077CFp
					; DATA XREF: .text:6F1077CFr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_6F101040+37p
					; sub_6F101040+B0p ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:6F1077F9p
					; DATA XREF: .text:6F1077F9r
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: sub_6F108360+13p
					; DATA XREF: sub_6F108360+13r
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; CODE XREF: sub_6F108330+Ap
					; DATA XREF: sub_6F108330+Ar
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_6F1078E0+45p
					; sub_6F1082F0+1Ap
					; DATA XREF: ...
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: sub_6F1082C0+12p
					; DATA XREF: sub_6F1082C0+12r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:6F1077DFp
					; DATA XREF: .text:6F1077DFr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, DWORD	dwSize,	DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_6F1072E0+10Bp
					; sub_6F107430+1B2p
					; DATA XREF: ...
; DWORD	__stdcall VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, DWORD dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_6F1072E0+A8p
					; sub_6F107430+184p
					; DATA XREF: ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: .text:6F108173p
					; sub_6F1081C0+2Ep
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
; int __cdecl _write(int, const	void *,	unsigned int)
		extrn __imp__write:dword ; DATA	XREF: _writer

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
; FILE iob[]
		extrn _iob:dword	; DATA XREF: sub_6F107280+4r
					; sub_6F107280+3Cr ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_6F1070A0+A3p
					; DATA XREF: sub_6F1070A0+A3r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void __cdecl __noreturn abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t, size_t)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; int __cdecl fputc(int, FILE *)
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; int __cdecl fputs(const char *, FILE *)
		extrn __imp_fputs:dword	; DATA XREF: fputsr
; void __cdecl free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *, size_t, size_t, FILE *)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	realloc(void *,	size_t)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
; int sprintf(char *, const char *, ...)
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
; int __cdecl strcmp(const char	*, const char *)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; char *__cdecl	strcpy(char *, const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl strlen(const char *)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *, const char *, size_t)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; int __cdecl vfprintf(FILE *, const char *, va_list)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr

;
; Imports from libgcc_s_sjlj-1.dll
;
		extrn __imp__Unwind_SjLj_Resume:dword ;	DATA XREF: _Unwind_SjLj_Resumer
		extrn __imp__Unwind_SjLj_Register:dword	; DATA XREF: _Unwind_SjLj_Registerr
		extrn __imp__Unwind_SjLj_Unregister:dword
					; DATA XREF: _Unwind_SjLj_Unregisterr
		extrn __imp__Unwind_GetTextRelBase:dword
					; DATA XREF: _Unwind_GetTextRelBaser
		extrn __imp__Unwind_GetDataRelBase:dword
					; DATA XREF: _Unwind_GetDataRelBaser
		extrn __imp__Unwind_GetRegionStart:dword
					; DATA XREF: _Unwind_GetRegionStartr
		extrn __imp__Unwind_GetLanguageSpecificData:dword
					; DATA XREF: _Unwind_GetLanguageSpecificDatar
		extrn __imp__Unwind_GetIPInfo:dword ; DATA XREF: _Unwind_GetIPInfor
		extrn __imp__Unwind_SetGR:dword	; DATA XREF: _Unwind_SetGRr
		extrn __imp__Unwind_SetIP:dword	; DATA XREF: _Unwind_SetIPr
		extrn __imp__Unwind_DeleteException:dword
					; DATA XREF: _Unwind_DeleteExceptionr
		extrn __imp__Unwind_SjLj_Resume_or_Rethrow:dword
					; DATA XREF: _Unwind_SjLj_Resume_or_Rethrowr
		extrn __imp__Unwind_SjLj_RaiseException:dword
					; DATA XREF: _Unwind_SjLj_RaiseExceptionr


; Section 7. (virtual address 00017000)
; Virtual size			: 0000002C (	 44.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00014C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 6F117000h
dword_6F117000	dd 0			; DATA XREF: sub_6F101040+1DDo
dword_6F117004	dd 0			; DATA XREF: sub_6F101040+1D5o
dword_6F117008	dd 0			; DATA XREF: sub_6F101040+1C9o
		dd offset sub_6F101000
dword_6F117010	dd 2 dup(0)		; DATA XREF: sub_6F101040+1C1o
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 8
dword_6F117028	dd 76h dup(0)		; DATA XREF: TlsCallback_0:loc_6F107211o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 00018000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00014E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 6F118000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end DllEntryPoint
