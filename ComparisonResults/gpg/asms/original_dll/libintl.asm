;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	10A5056BFA1F0FAB51861EDE414050CA
; Input	CRC32 :	8AD9C70B

; File Name   :	C:\compspace\compare\gpg\dlls\original\libintl.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	68D80000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000E024 (  57380.)
; Section size in file		: 0000E200 (  57856.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 68D81000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_68D81000	proc near		; DATA XREF: .CRT:68D9900Co

Size		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+Size],	80h ; Size
		call	malloc
		mov	ebx, eax
		mov	[esp+1Ch+Size],	eax
		call	sub_68D8DF50
		test	ebx, ebx
		mov	ds:dword_68D96534, eax
		mov	ds:dword_68D96530, eax
		mov	eax, 1
		jz	short loc_68D81035
		mov	dword ptr [ebx], 0
		xor	al, al

loc_68D81035:				; CODE XREF: sub_68D81000+2Bj
		add	esp, 18h
		pop	ebx
		retn
sub_68D81000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D81040	proc near		; CODE XREF: sub_68D81260+DAp
					; sub_68D81260+128p ...

dwMilliseconds	= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	edx, [esp+1Ch+arg_4]
		test	edx, edx
		jnz	short loc_68D810C6
		mov	edx, ds:dword_68D96000
		xor	eax, eax
		test	edx, edx
		jle	short loc_68D810BE
		sub	edx, 1
		mov	ebx, ds:Sleep
		mov	ds:dword_68D96000, edx
		jmp	short loc_68D8107C
; ---------------------------------------------------------------------------
		align 10h

loc_68D81070:				; CODE XREF: sub_68D81040+5Dj
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	ebx ; Sleep
		sub	esp, 4

loc_68D8107C:				; CODE XREF: sub_68D81040+28j
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+dwMilliseconds], offset dword_68D96538
		call	sub_68D8ED00
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_68D81070
		mov	eax, ds:dword_68D9653C
		cmp	eax, 2
		jz	loc_68D81170
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, 1

loc_68D810BE:				; CODE XREF: sub_68D81040+17j
					; sub_68D81040+8Ej
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_68D810C6:				; CODE XREF: sub_68D81040+Bj
		cmp	edx, 1
		mov	eax, 1
		jnz	short loc_68D810BE
		mov	eax, large fs:18h
		mov	esi, ds:Sleep
		mov	ebx, [eax+4]
		jmp	short loc_68D810F5
; ---------------------------------------------------------------------------

loc_68D810E1:				; CODE XREF: sub_68D81040+D2j
		cmp	eax, ebx
		jz	loc_68D81238
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_68D810F5:				; CODE XREF: sub_68D81040+9Fj
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+dwMilliseconds], offset dword_68D96538
		call	sub_68D8ED00
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_68D810E1
		xor	ebx, ebx

loc_68D81116:				; CODE XREF: sub_68D81040+1FDj
		mov	eax, ds:dword_68D9653C
		test	eax, eax
		jz	loc_68D811F7
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit

loc_68D8112F:				; CODE XREF: sub_68D81040+1F3j
		test	ebx, ebx
		jz	loc_68D81242

loc_68D81137:				; CODE XREF: sub_68D81040+219j
		mov	eax, ds:off_68D95EA0
		test	eax, eax
		jz	short loc_68D8115C
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 2
		mov	[esp+1Ch+var_14], edx
		mov	edx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwMilliseconds], edx
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_68D8115C:				; CODE XREF: sub_68D81040+FEj
		add	ds:dword_68D96000, 1
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_68D81170:				; CODE XREF: sub_68D81040+67j
		mov	eax, ds:dword_68D96534
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_68D8DF40
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68D811C9
		mov	eax, ds:dword_68D96530
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_68D8DF40
		mov	esi, eax

loc_68D81192:				; CODE XREF: sub_68D81040+15Dj
		sub	esi, 4
		cmp	ebx, esi
		ja	short loc_68D811A8

loc_68D81199:				; CODE XREF: sub_68D81040+166j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_68D81192
		sub	esi, 4
		call	eax
		cmp	ebx, esi
		jbe	short loc_68D81199

loc_68D811A8:				; CODE XREF: sub_68D81040+157j
		mov	[esp+1Ch+dwMilliseconds], ebx ;	Memory
		nop
		lea	esi, [esi+0]
		call	free
		mov	ds:dword_68D96530, 0
		mov	ds:dword_68D96534, 0

loc_68D811C9:				; CODE XREF: sub_68D81040+141j
		mov	ds:dword_68D9653C, 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_68D96538
		call	sub_68D8ED30
		mov	eax, 1
		sub	esp, 8
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_68D811F7:				; CODE XREF: sub_68D81040+DDj
		mov	ds:dword_68D9653C, 1
		mov	[esp+1Ch+var_18], offset dword_68D99010
		mov	[esp+1Ch+dwMilliseconds], offset dword_68D99008
		call	_initterm
		mov	[esp+1Ch+var_18], offset dword_68D99004
		mov	[esp+1Ch+dwMilliseconds], offset dword_68D99000
		call	_initterm
		mov	ds:dword_68D9653C, 2
		jmp	loc_68D8112F
; ---------------------------------------------------------------------------

loc_68D81238:				; CODE XREF: sub_68D81040+A3j
		mov	ebx, 1
		jmp	loc_68D81116
; ---------------------------------------------------------------------------

loc_68D81242:				; CODE XREF: sub_68D81040+F1j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_68D96538
		call	sub_68D8ED30
		sub	esp, 8
		jmp	loc_68D81137
sub_68D81040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D81260	proc near		; CODE XREF: DllEntryPoint+1Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		test	edx, edx
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_C], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, ecx
		mov	[esp+2Ch+var_8], edi
		mov	dword_68D90200,	edx
		jnz	short loc_68D812E0
		mov	eax, ds:dword_68D96000
		test	eax, eax
		jz	loc_68D813B7
		call	sub_68D8E110

loc_68D81295:				; CODE XREF: sub_68D81260+90j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D8E440
		sub	esp, 0Ch
		cmp	esi, 3
		mov	edi, eax
		jz	loc_68D813A0
		test	esi, esi
		jz	loc_68D813A0

loc_68D812BB:				; CODE XREF: sub_68D81260+B2j
					; sub_68D81260+F9j ...
		mov	eax, edi
		mov	ebx, [esp+2Ch+var_10]
		mov	dword_68D90200,	0FFFFFFFFh
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D812E0:				; CODE XREF: sub_68D81260+21j
		lea	eax, [edx-1]
		cmp	eax, 1
		jbe	short loc_68D81360

loc_68D812E8:				; CODE XREF: sub_68D81260+134j
		call	sub_68D8E110
		cmp	esi, 1
		jnz	short loc_68D81295
		call	sub_68D8E420
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D8E440
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	short loc_68D812BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D8E440
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D81040
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D8E450
		sub	esp, 0Ch
		jmp	loc_68D812BB
; ---------------------------------------------------------------------------
		align 10h

loc_68D81360:				; CODE XREF: sub_68D81260+86j
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D8E450
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jz	loc_68D812BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D81040
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	loc_68D812E8
		jmp	loc_68D812BB
; ---------------------------------------------------------------------------
		align 10h

loc_68D813A0:				; CODE XREF: sub_68D81260+4Dj
					; sub_68D81260+55j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D81040
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_68D813C0

loc_68D813B7:				; CODE XREF: sub_68D81260+2Aj
		xor	edi, edi
		jmp	loc_68D812BB
; ---------------------------------------------------------------------------
		align 10h

loc_68D813C0:				; CODE XREF: sub_68D81260+155j
		test	edi, edi
		jz	loc_68D812BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_68D8E450
		sub	esp, 0Ch
		mov	edi, eax
		jmp	loc_68D812BB
sub_68D81260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_10		= dword	ptr -10h
hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpReserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+fdwReason]
		mov	ds:dword_68D96194, 0
		cmp	edx, 1
		jz	short loc_68D81420

loc_68D81406:				; CODE XREF: DllEntryPoint+3Dj
		mov	ecx, [esp+1Ch+lpReserved]
		mov	eax, [esp+1Ch+hinstDLL]
		call	sub_68D81260
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_68D81420:				; CODE XREF: DllEntryPoint+14j
		mov	[esp+1Ch+var_10], edx
		call	sub_68D8E4F0
		mov	edx, [esp+1Ch+var_10]
		jmp	short loc_68D81406
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68D81430	proc near		; CODE XREF: sub_68D8EFF0+6p

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_68D90218
		test	eax, eax
		jz	short locret_68D8147B
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcj_s.dll"
		call	ds:GetModuleHandleA
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_68D8146E
		mov	[esp+18h+lpProcName], offset ProcName ;	"_Jv_RegisterClasses"
		mov	[esp+18h+lpModuleName],	edx ; hModule
		call	ds:GetProcAddress
		sub	esp, 8

loc_68D8146E:				; CODE XREF: sub_68D81430+28j
		test	eax, eax
		jz	short locret_68D8147B
		mov	[esp+18h+lpModuleName],	offset dword_68D90218
		call	eax

locret_68D8147B:			; CODE XREF: sub_68D81430+Dj
					; sub_68D81430+40j
		leave
		retn
sub_68D81430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_68D81480()
sub_68D81480	proc near		; DATA XREF: sub_68D8EFF0+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_68D81480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D81490	proc near		; CODE XREF: libintl_bind_textdomain_codeset+Dp
					; libintl_bindtextdomain+Dp

Str1		= dword	ptr -3Ch
Str2		= dword	ptr -38h
Size		= dword	ptr -34h
Src		= dword	ptr -28h
Memory		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		mov	ebp, ecx
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		test	eax, eax
		jz	short loc_68D814A6
		cmp	byte ptr [eax],	0
		jnz	short loc_68D814C3

loc_68D814A6:				; CODE XREF: sub_68D81490+Fj
					; sub_68D81490+197j ...
		test	esi, esi
		jz	short loc_68D814B0
		mov	dword ptr [esi], 0

loc_68D814B0:				; CODE XREF: sub_68D81490+18j
					; sub_68D81490+26Cj ...
		test	ebp, ebp
		jz	short loc_68D814BB
		mov	dword ptr [ebp+0], 0

loc_68D814BB:				; CODE XREF: sub_68D81490+22j
					; sub_68D81490+152j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D814C3:				; CODE XREF: sub_68D81490+14j
		mov	edi, ds:libintl_nl_domain_bindings
		test	edi, edi
		jnz	short loc_68D814E6
		jmp	loc_68D815F7
; ---------------------------------------------------------------------------

loc_68D814D2:				; CODE XREF: sub_68D81490+68j
		jl	loc_68D815F7
		mov	edi, [edi]
		test	edi, edi
		lea	esi, [esi+0]
		jz	loc_68D815F7

loc_68D814E6:				; CODE XREF: sub_68D81490+3Bj
		lea	eax, [edi+0Ch]
		mov	[esp+3Ch+Str2],	eax ; Str2
		mov	[esp+3Ch+Str1],	ebx ; Str1
		call	strcmp
		cmp	eax, 0
		jnz	short loc_68D814D2
		test	edi, edi
		jz	loc_68D815F7
		xor	ebx, ebx
		test	esi, esi
		jz	loc_68D8158E
		mov	edx, [esi]
		test	edx, edx
		jz	loc_68D8171B
		mov	ecx, [edi+4]
		xor	ebx, ebx
		mov	[esp+3Ch+Str1],	edx ; Str1
		mov	[esp+3Ch+Src], edx
		mov	[esp+3Ch+Str2],	ecx ; Str2
		mov	[esp+3Ch+Memory], ecx
		call	strcmp
		mov	ecx, [esp+3Ch+Memory]
		mov	edx, [esp+3Ch+Src]
		mov	[esp+3Ch+var_20], eax
		mov	eax, ecx
		mov	ecx, [esp+3Ch+var_20]
		test	ecx, ecx
		jz	short loc_68D8158C
		mov	[esp+3Ch+Str1],	edx ; Str1
		mov	[esp+3Ch+Str2],	offset libintl_nl_default_dirname ; Str2
		call	strcmp
		mov	edx, [esp+3Ch+Src]
		mov	ecx, [esp+3Ch+Memory]
		mov	ebx, eax
		mov	eax, offset libintl_nl_default_dirname
		test	ebx, ebx
		jnz	loc_68D81725

loc_68D8156C:				; CODE XREF: sub_68D81490+2AAj
		cmp	ecx, offset libintl_nl_default_dirname
		jz	short loc_68D81584
		mov	[esp+3Ch+Memory], eax
		mov	[esp+3Ch+Str1],	ecx ; Memory
		call	free
		mov	eax, [esp+3Ch+Memory]

loc_68D81584:				; CODE XREF: sub_68D81490+E2j
		mov	[edi+4], eax
		mov	ebx, 1

loc_68D8158C:				; CODE XREF: sub_68D81490+B3j
					; sub_68D81490+2A1j
		mov	[esi], eax

loc_68D8158E:				; CODE XREF: sub_68D81490+76j
					; sub_68D81490+290j
		test	ebp, ebp
		jz	short loc_68D815E0
		mov	edx, [ebp+0]
		test	edx, edx
		jz	loc_68D81710
		mov	esi, [edi+8]
		test	esi, esi
		jz	short loc_68D815BC
		mov	[esp+3Ch+Str1],	edx ; Str1
		mov	[esp+3Ch+Str2],	esi ; Str2
		mov	[esp+3Ch+Src], edx
		call	strcmp
		mov	edx, [esp+3Ch+Src]
		test	eax, eax
		jz	short loc_68D815DD

loc_68D815BC:				; CODE XREF: sub_68D81490+112j
		mov	[esp+3Ch+Str1],	edx ; Src
		call	_strdup
		test	eax, eax
		mov	esi, eax
		jz	short loc_68D815DD
		mov	eax, [edi+8]
		mov	ebx, 1
		mov	[esp+3Ch+Str1],	eax ; Memory
		call	free
		mov	[edi+8], esi

loc_68D815DD:				; CODE XREF: sub_68D81490+12Aj
					; sub_68D81490+138j
		mov	[ebp+0], esi

loc_68D815E0:				; CODE XREF: sub_68D81490+100j
					; sub_68D81490+286j
		test	ebx, ebx
		jz	loc_68D814BB

loc_68D815E8:				; CODE XREF: sub_68D81490+256j
					; sub_68D81490+2B7j
		add	ds:_nl_msg_cat_cntr, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D815F7:				; CODE XREF: sub_68D81490+3Dj
					; sub_68D81490:loc_68D814D2j ...
		test	esi, esi
		jz	loc_68D816EB
		mov	edx, [esi]
		test	edx, edx
		jz	loc_68D816EB

loc_68D81609:				; CODE XREF: sub_68D81490+264j
		mov	[esp+3Ch+Str1],	ebx ; Str
		call	strlen
		lea	edx, [eax+1]
		add	eax, 0Dh
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+Str1],	eax ; Size
		call	malloc
		test	eax, eax
		mov	edi, eax
		jz	loc_68D814A6
		mov	edx, [esp+3Ch+var_20]
		lea	eax, [eax+0Ch]
		mov	[esp+3Ch+Str2],	ebx ; Src
		mov	[esp+3Ch+Str1],	eax ; Dst
		mov	[esp+3Ch+Size],	edx ; Size
		call	memcpy
		test	esi, esi
		jz	loc_68D8175F
		mov	edx, [esi]
		mov	ecx, offset libintl_nl_default_dirname
		test	edx, edx
		jz	short loc_68D81678
		mov	[esp+3Ch+Str2],	ecx ; Str2
		mov	[esp+3Ch+Str1],	edx ; Str1
		mov	[esp+3Ch+Src], edx
		call	strcmp
		mov	ecx, offset libintl_nl_default_dirname
		mov	edx, [esp+3Ch+Src]
		test	eax, eax
		jnz	loc_68D8174C

loc_68D81678:				; CODE XREF: sub_68D81490+1C5j
					; sub_68D81490+2CAj
		mov	[esi], ecx
		mov	[edi+4], ecx

loc_68D8167D:				; CODE XREF: sub_68D81490+2D6j
		test	ebp, ebp
		jz	loc_68D8176B
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_68D8169C
		mov	[esp+3Ch+Str1],	eax ; Src
		call	_strdup
		test	eax, eax
		jz	loc_68D81777

loc_68D8169C:				; CODE XREF: sub_68D81490+1FAj
		mov	[ebp+0], eax
		mov	[edi+8], eax

loc_68D816A2:				; CODE XREF: sub_68D81490+2E2j
		mov	ebp, ds:libintl_nl_domain_bindings
		test	ebp, ebp
		jz	loc_68D8173F
		lea	eax, [ebp+0Ch]
		mov	[esp+3Ch+Str2],	eax ; Str2
		mov	[esp+3Ch+Str1],	ebx ; Str1
		call	strcmp
		test	eax, eax
		jns	short loc_68D816DA
		jmp	short loc_68D8173F
; ---------------------------------------------------------------------------

loc_68D816C5:				; CODE XREF: sub_68D81490+24Fj
		lea	eax, [esi+0Ch]
		mov	[esp+3Ch+Str2],	eax ; Str2
		mov	[esp+3Ch+Str1],	ebx ; Str1
		call	strcmp
		test	eax, eax
		jle	short loc_68D816E1
		mov	ebp, esi

loc_68D816DA:				; CODE XREF: sub_68D81490+231j
		mov	esi, [ebp+0]
		test	esi, esi
		jnz	short loc_68D816C5

loc_68D816E1:				; CODE XREF: sub_68D81490+246j
		mov	[edi], esi
		mov	[ebp+0], edi
		jmp	loc_68D815E8
; ---------------------------------------------------------------------------

loc_68D816EB:				; CODE XREF: sub_68D81490+169j
					; sub_68D81490+173j
		test	ebp, ebp
		jz	short loc_68D816FA
		mov	eax, [ebp+0]
		test	eax, eax
		jnz	loc_68D81609

loc_68D816FA:				; CODE XREF: sub_68D81490+25Dj
		test	esi, esi
		jz	loc_68D814B0
		mov	dword ptr [esi], offset	libintl_nl_default_dirname
		jmp	loc_68D814B0
; ---------------------------------------------------------------------------
		align 10h

loc_68D81710:				; CODE XREF: sub_68D81490+107j
		mov	eax, [edi+8]
		mov	[ebp+0], eax
		jmp	loc_68D815E0
; ---------------------------------------------------------------------------

loc_68D8171B:				; CODE XREF: sub_68D81490+80j
		mov	eax, [edi+4]
		mov	[esi], eax
		jmp	loc_68D8158E
; ---------------------------------------------------------------------------

loc_68D81725:				; CODE XREF: sub_68D81490+D6j
		mov	[esp+3Ch+Str1],	edx ; Src
		xor	ebx, ebx
		call	_strdup
		test	eax, eax
		jz	loc_68D8158C
		mov	ecx, [edi+4]
		jmp	loc_68D8156C
; ---------------------------------------------------------------------------

loc_68D8173F:				; CODE XREF: sub_68D81490+21Aj
					; sub_68D81490+233j
		mov	[edi], ebp
		mov	ds:libintl_nl_domain_bindings, edi
		jmp	loc_68D815E8
; ---------------------------------------------------------------------------

loc_68D8174C:				; CODE XREF: sub_68D81490+1E2j
		mov	[esp+3Ch+Str1],	edx ; Src
		call	_strdup
		test	eax, eax
		jz	short loc_68D81789
		mov	ecx, eax
		jmp	loc_68D81678
; ---------------------------------------------------------------------------

loc_68D8175F:				; CODE XREF: sub_68D81490+1B6j
		mov	dword ptr [edi+4], offset libintl_nl_default_dirname
		jmp	loc_68D8167D
; ---------------------------------------------------------------------------

loc_68D8176B:				; CODE XREF: sub_68D81490+1EFj
		mov	dword ptr [edi+8], 0
		jmp	loc_68D816A2
; ---------------------------------------------------------------------------

loc_68D81777:				; CODE XREF: sub_68D81490+206j
		mov	eax, [edi+4]
		cmp	eax, offset libintl_nl_default_dirname
		jz	short loc_68D81789
		mov	[esp+3Ch+Str1],	eax ; Memory
		call	free

loc_68D81789:				; CODE XREF: sub_68D81490+2C6j
					; sub_68D81490+2EFj
		mov	[esp+3Ch+Str1],	edi ; Memory
		call	free
		jmp	loc_68D814A6
sub_68D81490	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. libintl_bind_textdomain_codeset

; =============== S U B	R O U T	I N E =======================================


		public libintl_bind_textdomain_codeset
libintl_bind_textdomain_codeset	proc near ; CODE XREF: bind_textdomain_codeset+6j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		xor	edx, edx
		mov	eax, [esp+0Ch+arg_0]
		lea	ecx, [esp+0Ch+arg_4]
		call	sub_68D81490
		mov	eax, [esp+0Ch+arg_4]
		add	esp, 0Ch
		retn
libintl_bind_textdomain_codeset	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. libintl_bindtextdomain

; =============== S U B	R O U T	I N E =======================================


		public libintl_bindtextdomain
libintl_bindtextdomain proc near	; CODE XREF: bindtextdomain+6j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		xor	ecx, ecx
		mov	eax, [esp+0Ch+arg_0]
		lea	edx, [esp+0Ch+arg_4]
		call	sub_68D81490
		mov	eax, [esp+0Ch+arg_4]
		add	esp, 0Ch
		retn
libintl_bindtextdomain endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. libintl_dcgettext

; =============== S U B	R O U T	I N E =======================================


		public libintl_dcgettext
libintl_dcgettext proc near		; CODE XREF: libintl_dgettext+1Ap
					; libintl_gettext+1Ap ...

Str		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_1C], 0 ; int
		mov	[esp+2Ch+var_20], 0 ; int
		mov	[esp+2Ch+var_24], 0 ; char *
		mov	[esp+2Ch+var_18], eax ;	int
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax ;	char *
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Str], eax ; Str
		call	libintl_dcigettext
		add	esp, 2Ch
		retn
libintl_dcgettext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. libintl_dgettext

; =============== S U B	R O U T	I N E =======================================


		public libintl_dgettext
libintl_dgettext proc near		; CODE XREF: dgettext+6j

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], 6C1h
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	libintl_dcgettext
		add	esp, 1Ch
		retn
libintl_dgettext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. libintl_gettext

; =============== S U B	R O U T	I N E =======================================


		public libintl_gettext
libintl_gettext	proc near		; CODE XREF: gettext+6j

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], 6C1h
		mov	[esp+1Ch+var_1C], 0
		mov	[esp+1Ch+var_18], eax
		call	libintl_dcgettext
		add	esp, 1Ch
		retn
libintl_gettext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. _nl_find_domain

; =============== S U B	R O U T	I N E =======================================


; int __cdecl nl_find_domain(char *, void *Memory, char	*, int)
		public _nl_find_domain
_nl_find_domain	proc near		; CODE XREF: libintl_dcigettext+226p

Str		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Memory		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 7Ch
		mov	[esp+7Ch+var_C], esi
		mov	esi, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_10], ebx
		mov	[esp+7Ch+var_8], edi
		mov	edi, [esp+7Ch+Memory]
		mov	[esp+7Ch+var_4], ebp
		mov	ebp, [esp+7Ch+arg_8]
		mov	[esp+7Ch+Str], esi ; Str
		call	strlen
		mov	[esp+7Ch+var_54], 0 ; int
		mov	[esp+7Ch+var_58], ebp ;	char *
		mov	[esp+7Ch+var_5C], 0 ; char *
		mov	[esp+7Ch+var_60], 0 ; char *
		mov	[esp+7Ch+var_64], 0 ; char *
		add	eax, 1
		mov	[esp+7Ch+var_68], 0 ; char *
		mov	[esp+7Ch+var_6C], edi ;	char *
		mov	[esp+7Ch+var_70], 0 ; int
		mov	[esp+7Ch+var_74], eax ;	size_t
		mov	[esp+7Ch+var_78], esi ;	char *
		mov	[esp+7Ch+Str], offset dword_68D96004 ; int
		call	_nl_make_l10nflist
		test	eax, eax
		mov	ebx, eax
		jz	loc_68D81985
		mov	esi, [eax+4]
		test	esi, esi
		jle	short loc_68D81970

loc_68D81910:				; CODE XREF: _nl_find_domain+103j
		mov	ecx, [ebx+8]
		test	ecx, ecx
		jz	short loc_68D81930

loc_68D81917:				; CODE XREF: _nl_find_domain+B5j
					; _nl_find_domain+C5j ...
		mov	eax, ebx
		mov	esi, [esp+7Ch+var_C]
		mov	ebx, [esp+7Ch+var_10]
		mov	edi, [esp+7Ch+var_8]
		mov	ebp, [esp+7Ch+var_4]
		add	esp, 7Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D81930:				; CODE XREF: _nl_find_domain+95j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_68D81917
		mov	esi, ebx
		jmp	short loc_68D81951
; ---------------------------------------------------------------------------
		align 10h

loc_68D81940:				; CODE XREF: _nl_find_domain+D6j
					; _nl_find_domain+EEj
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_68D81917
		mov	eax, [esi+14h]
		add	esi, 4
		test	eax, eax
		jz	short loc_68D81917

loc_68D81951:				; CODE XREF: _nl_find_domain+B9j
		mov	edx, [eax+4]
		test	edx, edx
		jg	short loc_68D81940
		mov	edx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+Str], eax
		mov	[esp+7Ch+var_78], edx
		call	_nl_load_domain
		mov	eax, [esi+10h]
		jmp	short loc_68D81940
; ---------------------------------------------------------------------------

loc_68D81970:				; CODE XREF: _nl_find_domain+8Ej
		mov	eax, [esp+7Ch+arg_C]
		mov	[esp+7Ch+Str], ebx
		mov	[esp+7Ch+var_78], eax
		call	_nl_load_domain
		jmp	short loc_68D81910
; ---------------------------------------------------------------------------

loc_68D81985:				; CODE XREF: _nl_find_domain+83j
		mov	[esp+7Ch+Str], edi
		call	_nl_expand_alias
		test	eax, eax
		mov	[esp+7Ch+var_44], eax
		jz	short loc_68D819A7
		mov	[esp+7Ch+Str], eax ; Src
		call	_strdup
		test	eax, eax
		mov	edi, eax
		jz	loc_68D81917

loc_68D819A7:				; CODE XREF: _nl_find_domain+113j
		lea	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_68], eax ;	int
		lea	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_6C], eax ;	int
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_70], eax ;	int
		lea	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_74], eax ;	int
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_78], eax ;	int
		mov	[esp+7Ch+Str], edi ; Str
		call	_nl_explode_name
		cmp	eax, 0FFFFFFFFh
		mov	[esp+7Ch+var_40], eax
		jz	loc_68D81917
		mov	[esp+7Ch+Str], esi ; Str
		call	strlen
		mov	edx, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_54], 1 ; int
		mov	[esp+7Ch+var_58], ebp ;	char *
		mov	[esp+7Ch+var_78], esi ;	char *
		mov	[esp+7Ch+var_5C], edx ;	char *
		mov	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+Str], offset dword_68D96004 ; int
		add	eax, 1
		mov	[esp+7Ch+var_74], eax ;	size_t
		mov	[esp+7Ch+var_60], edx ;	char *
		mov	edx, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_64], edx ;	char *
		mov	edx, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_68], edx ;	char *
		mov	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_6C], edx ;	char *
		mov	edx, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_70], edx ;	int
		call	_nl_make_l10nflist
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68D81A63
		mov	ebp, [eax+4]
		test	ebp, ebp
		jle	short loc_68D81AC0

loc_68D81A4C:				; CODE XREF: _nl_find_domain+253j
		mov	esi, [ebx+8]
		test	esi, esi
		jz	short loc_68D81A7F

loc_68D81A53:				; CODE XREF: _nl_find_domain+204j
					; _nl_find_domain+215j	...
		mov	eax, [esp+7Ch+var_44]
		test	eax, eax
		jz	short loc_68D81A63
		mov	[esp+7Ch+Str], edi ; Memory
		call	free

loc_68D81A63:				; CODE XREF: _nl_find_domain+1C3j
					; _nl_find_domain+1D9j
		test	byte ptr [esp+7Ch+var_40], 1
		jz	loc_68D81917
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+Str], eax ; Memory
		call	free
		jmp	loc_68D81917
; ---------------------------------------------------------------------------

loc_68D81A7F:				; CODE XREF: _nl_find_domain+1D1j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_68D81A53
		mov	esi, ebx
		jmp	short loc_68D81AA1
; ---------------------------------------------------------------------------
		align 10h

loc_68D81A90:				; CODE XREF: _nl_find_domain+226j
					; _nl_find_domain+23Ej
		mov	edx, [eax+8]
		test	edx, edx
		jnz	short loc_68D81A53
		mov	eax, [esi+14h]
		add	esi, 4
		test	eax, eax
		jz	short loc_68D81A53

loc_68D81AA1:				; CODE XREF: _nl_find_domain+208j
		mov	ecx, [eax+4]
		test	ecx, ecx
		jg	short loc_68D81A90
		mov	edx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+Str], eax
		mov	[esp+7Ch+var_78], edx
		call	_nl_load_domain
		mov	eax, [esi+10h]
		jmp	short loc_68D81A90
; ---------------------------------------------------------------------------

loc_68D81AC0:				; CODE XREF: _nl_find_domain+1CAj
		mov	eax, [esp+7Ch+arg_C]
		mov	[esp+7Ch+Str], ebx
		mov	[esp+7Ch+var_78], eax
		call	_nl_load_domain
		jmp	loc_68D81A4C
_nl_find_domain	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. libintl_hash_string

; =============== S U B	R O U T	I N E =======================================


		public libintl_hash_string
libintl_hash_string proc near		; CODE XREF: _nl_load_domain+EA9p
					; _nl_find_msg+4Ep

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	eax, eax

loc_68D81AE6:				; CODE XREF: libintl_hash_string+20j
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short locret_68D81B10

loc_68D81AED:				; CODE XREF: libintl_hash_string+2Ej
		shl	eax, 4
		movzx	ecx, cl
		add	eax, ecx
		add	edx, 1
		mov	ecx, eax
		and	ecx, 0F0000000h
		jz	short loc_68D81AE6
		xor	eax, ecx
		shr	ecx, 18h
		xor	eax, ecx
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jnz	short loc_68D81AED

locret_68D81B10:			; CODE XREF: libintl_hash_string+Bj
		rep retn
libintl_hash_string endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. _nl_load_domain

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _nl_load_domain
_nl_load_domain	proc near		; CODE XREF: _nl_find_domain+E6p
					; _nl_find_domain+FEp ...

Size		= dword	ptr -0F8h
Src		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_D5		= byte ptr -0D5h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
Dst		= dword	ptr -80h
Memory		= dword	ptr -7Ch
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0F8h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	edx, [ebx+4]
		test	edx, edx
		jnz	loc_68D81BCE
		mov	eax, [ebx]
		mov	dword ptr [ebx+4], 0FFFFFFFFh
		mov	dword ptr [ebx+8], 0
		test	eax, eax
		jz	short loc_68D81BC7
		mov	[esp+0F8h+Src],	8000h
		mov	[esp+0F8h+Size], eax
		call	_open
		cmp	eax, 0FFFFFFFFh
		mov	esi, eax
		jz	short loc_68D81BC7
		lea	eax, [ebp+var_6C]
		mov	[esp+0F8h+Src],	eax
		mov	[esp+0F8h+Size], esi
		call	ds:_fstat
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68D81BE0
		mov	edx, [ebp+var_6C]
		test	eax, eax
		mov	edi, [ebp+var_58]
		mov	[ebp+var_48], edx
		mov	edx, [ebp+var_68]
		mov	[ebp+var_34], edi
		mov	[ebp+var_44], edx
		mov	edx, [ebp+var_64]
		mov	[ebp+var_40], edx
		mov	edx, [ebp+var_60]
		mov	[ebp+var_3C], edx
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_38], edx
		mov	edx, [ebp+var_54]
		mov	[ebp+var_30], edx
		mov	edx, [ebp+var_50]
		mov	[ebp+var_2C], edx
		mov	edx, [ebp+var_4C]
		mov	[ebp+var_28], edx
		jnz	short loc_68D81BBF
		cmp	edi, 2Fh
		ja	short loc_68D81BF0

loc_68D81BBF:				; CODE XREF: _nl_load_domain+98j
					; _nl_load_domain+CEj ...
		mov	[esp+0F8h+Size], esi
		call	_close

loc_68D81BC7:				; CODE XREF: _nl_load_domain+32j
					; _nl_load_domain+49j ...
		mov	dword ptr [ebx+4], 1

loc_68D81BCE:				; CODE XREF: _nl_load_domain+1Aj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D81BE0:				; CODE XREF: _nl_load_domain+5Ej
		lea	edx, [ebp+var_48]
		mov	ecx, 9
		xor	eax, eax
		mov	edi, edx
		rep stosd
		jmp	short loc_68D81BBF
; ---------------------------------------------------------------------------

loc_68D81BF0:				; CODE XREF: _nl_load_domain+9Dj
		mov	[esp+0F8h+Size], edi ; Size
		call	malloc
		test	eax, eax
		mov	[ebp+Memory], eax
		jz	short loc_68D81BBF
		mov	[ebp+Dst], ebx
		mov	ebx, eax
		mov	[ebp+var_88], edi

loc_68D81C0A:				; CODE XREF: _nl_load_domain+104j
		mov	[esp+0F8h+var_F0], edi
		mov	[esp+0F8h+Src],	ebx
		mov	[esp+0F8h+Size], esi
		call	_read
		test	eax, eax
		jle	short loc_68D81C57
		add	ebx, eax
		sub	edi, eax

loc_68D81C22:				; CODE XREF: _nl_load_domain+149j
		test	edi, edi
		jnz	short loc_68D81C0A
		mov	edi, [ebp+var_88]
		mov	ebx, [ebp+Dst]
		mov	[esp+0F8h+Size], esi
		call	_close
		mov	edx, [ebp+Memory]
		mov	eax, [edx]
		cmp	eax, 0DE120495h
		jz	short loc_68D81C75
		cmp	eax, 950412DEh
		jz	short loc_68D81C75
		mov	[esp+0F8h+Size], edx ; Memory
		call	free
		jmp	loc_68D81BC7
; ---------------------------------------------------------------------------

loc_68D81C57:				; CODE XREF: _nl_load_domain+FCj
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_68D81C6B
		lea	esi, [esi+0]
		call	ds:_errno
		cmp	dword ptr [eax], 4
		jz	short loc_68D81C22

loc_68D81C6B:				; CODE XREF: _nl_load_domain+13Aj
		mov	ebx, [ebp+Dst]
		xchg	ax, ax
		jmp	loc_68D81BBF
; ---------------------------------------------------------------------------

loc_68D81C75:				; CODE XREF: _nl_load_domain+121j
					; _nl_load_domain+128j
		mov	[esp+0F8h+Size], 48h ; Size
		lea	esi, [esi+0]
		call	malloc
		test	eax, eax
		mov	esi, eax
		jz	loc_68D81BC7
		mov	ecx, [ebp+Memory]
		mov	dword ptr [eax+4], 0
		mov	[eax+8], edi
		mov	[ebx+8], eax
		cmp	dword ptr [ecx], 950412DEh
		mov	[eax], ecx
		mov	dword ptr [eax+10h], 0
		setnz	cl
		movzx	ecx, cl
		test	ecx, ecx
		mov	[eax+0Ch], ecx
		jz	loc_68D820A6
		mov	eax, [ebp+Memory]
		mov	edi, [eax+4]
		mov	eax, edi
		mov	edx, edi
		shl	edx, 18h
		shr	eax, 18h
		or	eax, edx
		mov	edx, edi
		and	edx, 0FF00h
		shl	edx, 8
		shr	edi, 8
		or	eax, edx
		and	edi, 0FF00h
		or	eax, edi

loc_68D81CE9:				; CODE XREF: _nl_load_domain+58Cj
		mov	edi, eax
		xor	edx, edx
		sar	edi, 10h
		cmp	edi, 1
		jbe	short loc_68D81D1C

loc_68D81CF5:				; CODE XREF: _nl_load_domain+71Aj
					; _nl_load_domain+73Fj
		mov	[esp+0F8h+Size], edx ; Memory
		call	free
		mov	edx, [ebp+Memory]
		mov	[esp+0F8h+Size], edx ; Memory
		call	free
		mov	[esp+0F8h+Size], esi ; Memory
		call	free
		mov	dword ptr [ebx+8], 0
		jmp	loc_68D81BC7
; ---------------------------------------------------------------------------

loc_68D81D1C:				; CODE XREF: _nl_load_domain+1D3j
		test	ecx, ecx
		xchg	ax, ax
		jz	loc_68D821FF
		mov	edi, [ebp+Memory]
		mov	edi, [edi+8]
		mov	edx, edi
		mov	[ebp+var_D0], edi
		shr	edx, 18h
		shl	edi, 18h
		or	edx, edi
		mov	edi, [ebp+var_D0]
		and	edi, 0FF00h
		shl	edi, 8
		or	edx, edi
		mov	edi, [ebp+var_D0]
		shr	edi, 8
		and	edi, 0FF00h
		or	edx, edi
		mov	[esi+14h], edx
		mov	edx, [ebp+Memory]
		mov	edx, [edx+0Ch]
		mov	[ebp+var_CC], edx
		mov	edi, [ebp+var_CC]
		shr	edx, 18h
		shl	edi, 18h
		or	edx, edi
		mov	edi, [ebp+var_CC]
		and	edi, 0FF00h
		shl	edi, 8
		or	edx, edi
		mov	edi, [ebp+var_CC]
		shr	edi, 8
		and	edi, 0FF00h
		or	edx, edi
		mov	edi, [ebp+Memory]
		add	edx, [ebp+Memory]
		mov	edi, [edi+10h]
		mov	[esi+18h], edx
		mov	edx, edi
		mov	[ebp+var_C8], edi
		shr	edx, 18h
		shl	edi, 18h
		or	edx, edi
		mov	edi, [ebp+var_C8]
		and	edi, 0FF00h
		shl	edi, 8
		or	edx, edi
		mov	edi, [ebp+var_C8]
		shr	edi, 8
		and	edi, 0FF00h
		or	edx, edi
		add	edx, [ebp+Memory]
		mov	[esi+1Ch], edx
		mov	edx, [ebp+Memory]
		mov	edx, [edx+14h]
		mov	[ebp+var_C4], edx
		mov	edi, [ebp+var_C4]
		shr	edx, 18h
		shl	edi, 18h
		or	edx, edi
		mov	edi, [ebp+var_C4]
		and	edi, 0FF00h
		shl	edi, 8
		or	edx, edi
		mov	edi, [ebp+var_C4]
		shr	edi, 8
		and	edi, 0FF00h
		or	edx, edi

loc_68D81E1D:				; CODE XREF: _nl_load_domain+6FBj
		xor	edi, edi
		cmp	edx, 2
		mov	[esi+2Ch], edx
		jbe	short loc_68D81E6A
		test	ecx, ecx
		jz	loc_68D82220
		mov	edx, [ebp+Memory]
		mov	edx, [edx+18h]
		mov	edi, edx
		mov	[ebp+var_C0], edx
		shr	edi, 18h
		shl	edx, 18h
		or	edi, edx
		mov	edx, [ebp+var_C0]
		and	edx, 0FF00h
		shl	edx, 8
		or	edi, edx
		mov	edx, [ebp+var_C0]
		shr	edx, 8
		and	edx, 0FF00h
		or	edi, edx

loc_68D81E67:				; CODE XREF: _nl_load_domain+706j
		add	edi, [ebp+Memory]

loc_68D81E6A:				; CODE XREF: _nl_load_domain+305j
		test	ax, ax
		mov	[esi+30h], edi
		mov	[esi+34h], ecx
		jz	loc_68D82042
		test	edi, edi
		jz	loc_68D8225C
		test	ecx, ecx
		jz	loc_68D8223F
		mov	edi, [ebp+Memory]
		mov	eax, [edi+24h]
		mov	edx, eax
		shr	edx, 18h
		mov	[ebp+var_88], edx
		mov	edx, eax
		shl	edx, 18h
		or	[ebp+var_88], edx
		mov	edx, eax
		and	edx, 0FF00h
		shl	edx, 8
		shr	eax, 8
		or	[ebp+var_88], edx
		and	eax, 0FF00h
		or	[ebp+var_88], eax

loc_68D81EC4:				; CODE XREF: _nl_load_domain+72Bj
		cmp	[ebp+var_88], 0
		jz	loc_68D82042
		test	ecx, ecx
		jz	loc_68D824E1
		mov	edx, [ebp+Memory]
		mov	edi, [ebp+Memory]
		mov	eax, [edx+1Ch]
		mov	ecx, eax
		mov	edx, eax
		shl	edx, 18h
		shr	ecx, 18h
		or	ecx, edx
		mov	edx, eax
		and	edx, 0FF00h
		shl	edx, 8
		or	ecx, edx
		mov	edx, [edi+20h]
		shr	eax, 8
		and	eax, 0FF00h
		or	ecx, eax
		mov	[ebp+Dst], ecx
		mov	eax, edx
		mov	ecx, edx
		shl	ecx, 18h
		shr	eax, 18h
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	edx, 8
		or	eax, ecx
		and	edx, 0FF00h
		or	eax, edx

loc_68D81F2F:				; CODE XREF: _nl_load_domain+9D0j
		mov	ecx, [ebp+Dst]
		add	eax, [ebp+Memory]
		mov	[ebp+var_84], eax
		lea	eax, ds:1Eh[ecx*4]
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		lea	edi, [esp+0F8h+var_D5]
		and	edi, 0FFFFFFF0h
		test	ecx, ecx
		mov	[ebp+var_A4], edi
		jz	loc_68D824F5
		mov	edx, [esi+0Ch]
		xor	edi, edi
		mov	[ebp+var_90], ebx
		mov	[ebp+var_94], esi
		mov	[ebp+var_8C], edx
		jmp	loc_68D82022
; ---------------------------------------------------------------------------

loc_68D81F7B:				; CODE XREF: _nl_load_domain+50Aj
		mov	ecx, [ebp+var_84]
		mov	esi, [ebp+var_84]
		mov	eax, [ecx+edi*8+4]
		mov	ebx, [esi+edi*8]
		mov	ecx, eax
		mov	edx, eax
		shl	edx, 18h
		shr	ecx, 18h
		or	ecx, edx
		mov	edx, eax
		and	edx, 0FF00h
		shl	edx, 8
		shr	eax, 8
		or	ecx, edx
		and	eax, 0FF00h
		mov	edx, ebx
		or	ecx, eax
		mov	eax, ebx
		shl	edx, 18h
		shr	eax, 18h
		or	eax, edx
		mov	edx, ebx
		and	edx, 0FF00h
		shl	edx, 8
		shr	ebx, 8
		or	eax, edx
		add	ecx, [ebp+Memory]
		and	ebx, 0FF00h
		or	eax, ebx

loc_68D81FD8:				; CODE XREF: _nl_load_domain+520j
		test	eax, eax
		jz	loc_68D8222B
		cmp	byte ptr [ecx+eax-1], 0
		jnz	loc_68D8222B
		movzx	eax, byte ptr [ecx]
		cmp	al, 50h
		jz	loc_68D82105
		cmp	al, 49h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+1], 0
		mov	eax, offset word_68D9104E
		jnz	loc_68D820FC

loc_68D8200D:				; CODE XREF: _nl_load_domain+5E0j
					; _nl_load_domain+68Dj	...
		mov	esi, [ebp+var_A4]
		mov	[esi+edi*4], eax
		add	edi, 1
		cmp	edi, [ebp+Dst]
		jnb	loc_68D82264

loc_68D82022:				; CODE XREF: _nl_load_domain+456j
		mov	eax, [ebp+var_8C]
		test	eax, eax
		jnz	loc_68D81F7B
		mov	eax, [ebp+var_84]
		mov	ecx, [ebp+Memory]
		add	ecx, [eax+edi*8+4]
		mov	eax, [eax+edi*8]
		jmp	short loc_68D81FD8
; ---------------------------------------------------------------------------

loc_68D82042:				; CODE XREF: _nl_load_domain+353j
					; _nl_load_domain+3ABj	...
		mov	dword ptr [esi+20h], 0
		mov	dword ptr [esi+24h], 0
		mov	dword ptr [esi+28h], 0

loc_68D82057:				; CODE XREF: _nl_load_domain+F3Dj
		lea	eax, [ebp+var_1C]
		mov	dword ptr [esi+38h], 0
		mov	dword ptr [esi+3Ch], 0
		mov	[esp+0F8h+var_E8], eax ; int
		mov	eax, [ebp+arg_4]
		mov	[esp+0F8h+var_EC], 0 ; int
		mov	[esp+0F8h+var_F0], offset word_68D9104E	; Str1
		mov	[esp+0F8h+Size], ebx ; int
		mov	[esp+0F8h+Src],	eax ; int
		call	_nl_find_msg
		lea	edx, [esi+44h]
		add	esi, 40h
		mov	[esp+0F8h+var_F0], edx ; int
		mov	[esp+0F8h+Src],	esi ; int
		mov	[esp+0F8h+Size], eax ; char *
		call	libintl_gettext_extract_plural
		jmp	loc_68D81BC7
; ---------------------------------------------------------------------------

loc_68D820A6:				; CODE XREF: _nl_load_domain+199j
		mov	edx, [ebp+Memory]
		mov	eax, [edx+4]
		jmp	loc_68D81CE9
; ---------------------------------------------------------------------------

loc_68D820B1:				; CODE XREF: _nl_load_domain+648j
		cmp	byte ptr [ecx+5], 45h
		jnz	short loc_68D820FC
		cmp	byte ptr [ecx+6], 41h
		jnz	short loc_68D820FC
		cmp	byte ptr [ecx+7], 53h
		jnz	short loc_68D820FC
		cmp	byte ptr [ecx+8], 54h
		jnz	short loc_68D820FC
		movzx	eax, byte ptr [ecx+9]
		cmp	al, 38h
		nop
		jz	loc_68D82B7B
		cmp	al, 31h
		jz	loc_68D82BBE
		cmp	al, 33h
		jz	loc_68D82BA7
		cmp	al, 36h
		jnz	short loc_68D820FC
		cmp	byte ptr [ecx+0Ah], 34h
		xchg	ax, ax
		jnz	short loc_68D820FC
		cmp	byte ptr [ecx+0Bh], 0
		jz	loc_68D82B50

loc_68D820FC:				; CODE XREF: _nl_load_domain+4D8j
					; _nl_load_domain+4E7j	...
		xor	eax, eax
		xchg	ax, ax
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82105:				; CODE XREF: _nl_load_domain+4D0j
		cmp	byte ptr [ecx+1], 52h
		jnz	short loc_68D820FC
		cmp	byte ptr [ecx+2], 49h
		nop
		jnz	short loc_68D820FC
		movzx	edx, byte ptr [ecx+3]
		cmp	dl, 64h
		setz	bl
		cmp	dl, 69h
		setz	al
		mov	esi, eax
		jz	short loc_68D82142
		test	bl, bl
		jnz	short loc_68D82142
		cmp	dl, 6Fh
		jz	short loc_68D82142
		cmp	dl, 75h
		jz	short loc_68D82142
		cmp	dl, 78h
		jz	short loc_68D82142
		cmp	dl, 58h
		lea	esi, [esi+0]
		jnz	short loc_68D820FC

loc_68D82142:				; CODE XREF: _nl_load_domain+604j
					; _nl_load_domain+608j	...
		movzx	eax, byte ptr [ecx+4]
		cmp	al, 38h
		jz	loc_68D82C67
		cmp	al, 31h
		jz	loc_68D82C47
		cmp	al, 33h
		jz	loc_68D82C27
		cmp	al, 36h
		jz	loc_68D82C0A
		cmp	al, 4Ch
		jz	loc_68D820B1
		cmp	al, 46h
		jz	loc_68D82AFB
		cmp	al, 4Dh
		jz	loc_68D82A87
		cmp	al, 50h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+5], 54h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+6], 52h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+7], 0
		xchg	ax, ax
		jnz	loc_68D820FC

loc_68D821A6:				; CODE XREF: _nl_load_domain+10B0j
					; _nl_load_domain+10D0j ...
		test	bl, bl
		mov	eax, offset aDiouxx ; "diouxX"
		jnz	loc_68D8200D
		mov	ebx, esi
		mov	eax, (offset aDiouxx+2)	; "iouxX"
		test	bl, bl
		jnz	loc_68D8200D

loc_68D821C2:				; CODE XREF: _nl_load_domain+107Cj
		cmp	dl, 6Fh
		mov	eax, (offset aDiouxx+4)	; "ouxX"
		jz	loc_68D8200D
		cmp	dl, 75h
		mov	eax, (offset aDiouxx+6)	; "uxX"
		jz	loc_68D8200D
		cmp	dl, 78h
		mov	eax, (offset aDiouxx+8)	; "xX"
		jz	loc_68D8200D
		cmp	dl, 58h
		jnz	loc_68D82A82
		mov	eax, (offset aDiouxx+0Ah) ; "X"
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D821FF:				; CODE XREF: _nl_load_domain+200j
		mov	edi, [ebp+Memory]
		mov	edx, [edi+8]
		mov	[esi+14h], edx
		mov	edx, [edi+0Ch]
		add	edx, edi
		mov	[esi+18h], edx
		mov	edx, [edi+10h]
		add	edx, edi
		mov	[esi+1Ch], edx
		mov	edx, [edi+14h]
		jmp	loc_68D81E1D
; ---------------------------------------------------------------------------

loc_68D82220:				; CODE XREF: _nl_load_domain+309j
		mov	edx, [ebp+Memory]
		mov	edi, [edx+18h]
		jmp	loc_68D81E67
; ---------------------------------------------------------------------------

loc_68D8222B:				; CODE XREF: _nl_load_domain+4BAj
					; _nl_load_domain+4C5j
		mov	esi, [ebp+var_94]
		mov	ebx, [ebp+var_90]
		mov	edx, [esi+10h]
		jmp	loc_68D81CF5
; ---------------------------------------------------------------------------

loc_68D8223F:				; CODE XREF: _nl_load_domain+363j
		mov	edi, [ebp+Memory]
		mov	edi, [edi+24h]
		mov	[ebp+var_88], edi
		jmp	loc_68D81EC4
; ---------------------------------------------------------------------------

loc_68D82250:				; CODE XREF: _nl_load_domain+891j
					; _nl_load_domain+8FAj
		mov	ebx, [ebp+var_9C]
		mov	esi, [ebp+var_A0]

loc_68D8225C:				; CODE XREF: _nl_load_domain+35Bj
					; _nl_load_domain+A1Bj
		mov	edx, [esi+10h]
		jmp	loc_68D81CF5
; ---------------------------------------------------------------------------

loc_68D82264:				; CODE XREF: _nl_load_domain+4FCj
		mov	ebx, [ebp+var_90]
		mov	esi, [ebp+var_94]

loc_68D82270:				; CODE XREF: _nl_load_domain+9DEj
		cmp	[ebp+var_8C], 0
		jz	loc_68D82A6B
		mov	edi, [ebp+Memory]
		mov	edx, [edi+28h]
		mov	eax, edx
		mov	ecx, edx
		shl	ecx, 18h
		shr	eax, 18h
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	edx, 8
		or	eax, ecx
		and	edx, 0FF00h
		or	eax, edx
		mov	edx, [edi+2Ch]
		add	eax, edi
		mov	[ebp+var_94], eax
		mov	ecx, edx
		mov	eax, edx
		shl	ecx, 18h
		shr	eax, 18h
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	edx, 8
		or	eax, ecx
		and	edx, 0FF00h
		or	eax, edx

loc_68D822D6:				; CODE XREF: _nl_load_domain+F5Dj
		add	eax, [ebp+Memory]
		mov	[ebp+var_84], 0
		mov	[ebp+var_90], 0
		mov	[ebp+var_A8], eax
		mov	eax, [esi+2Ch]
		mov	[ebp+var_9C], ebx
		mov	[ebp+var_A0], esi
		shl	eax, 2
		mov	[ebp+var_98], eax

loc_68D8230B:				; CODE XREF: _nl_load_domain+8F2j
		mov	ebx, [ebp+var_88]
		cmp	[ebp+var_84], ebx
		jnb	loc_68D82503
		xor	ebx, ebx

loc_68D8231F:				; CODE XREF: _nl_load_domain+8CCj
		cmp	[ebp+var_8C], 0
		jz	loc_68D8249A
		test	ebx, ebx
		jnz	loc_68D824BC
		mov	ecx, [ebp+var_84]
		mov	esi, [ebp+var_94]
		mov	eax, [esi+ecx*4]

loc_68D82343:				; CODE XREF: _nl_load_domain+9ABj
		mov	edx, eax
		mov	ecx, eax
		shl	ecx, 18h
		shr	edx, 18h
		or	edx, ecx
		mov	ecx, eax
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	eax, 8
		or	edx, ecx
		and	eax, 0FF00h
		or	edx, eax
		add	edx, [ebp+Memory]
		mov	ecx, [edx+8]
		mov	eax, ecx
		mov	esi, ecx
		shl	esi, 18h
		shr	eax, 18h
		or	eax, esi
		mov	esi, ecx
		and	esi, 0FF00h
		shl	esi, 8
		shr	ecx, 8
		or	eax, esi
		and	ecx, 0FF00h
		or	eax, ecx
		cmp	eax, 0FFFFFFFFh
		setnz	al

loc_68D82396:				; CODE XREF: _nl_load_domain+997j
		xor	esi, esi
		test	al, al
		jz	short loc_68D823E2
		add	edx, 4
		cmp	[ebp+var_8C], 0
		jnz	loc_68D82441
		jmp	short loc_68D823D8
; ---------------------------------------------------------------------------

loc_68D823AE:				; CODE XREF: _nl_load_domain+8C0j
		cmp	[ebp+Dst], eax
		jbe	loc_68D82250
		mov	ecx, [ebp+var_A4]
		mov	edi, [ecx+eax*4]
		test	edi, edi
		jz	loc_68D82A62
		or	ecx, 0FFFFFFFFh
		xor	eax, eax
		repne scasb
		add	edx, 8
		not	ecx
		lea	esi, [esi+ecx-1]

loc_68D823D8:				; CODE XREF: _nl_load_domain+88Cj
		mov	eax, [edx+4]
		add	esi, [edx]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_68D823AE

loc_68D823E2:				; CODE XREF: _nl_load_domain+87Aj
					; _nl_load_domain+975j
		mov	[ebp+ebx*4+var_24], esi
		add	ebx, 1
		cmp	ebx, 2
		jnz	loc_68D8231F
		mov	edx, [ebp+var_20]
		add	[ebp+var_98], edx
		mov	ecx, [ebp+var_24]
		add	[ebp+var_90], 1
		add	[ebp+var_98], ecx

loc_68D8240B:				; CODE XREF: _nl_load_domain+F46j
		add	[ebp+var_84], 1
		jmp	loc_68D8230B
; ---------------------------------------------------------------------------

loc_68D82417:				; CODE XREF: _nl_load_domain+973j
		cmp	eax, [ebp+Dst]
		jnb	loc_68D82250
		mov	ecx, [ebp+var_A4]
		mov	edi, [ecx+eax*4]
		test	edi, edi
		jz	loc_68D82A62
		or	ecx, 0FFFFFFFFh
		xor	eax, eax
		repne scasb
		add	edx, 8
		not	ecx
		lea	esi, [esi+ecx-1]

loc_68D82441:				; CODE XREF: _nl_load_domain+886j
		mov	ecx, [edx]
		mov	eax, ecx
		mov	edi, ecx
		shl	edi, 18h
		shr	eax, 18h
		or	eax, edi
		mov	edi, ecx
		and	edi, 0FF00h
		shl	edi, 8
		shr	ecx, 8
		or	eax, edi
		and	ecx, 0FF00h
		or	eax, ecx
		mov	ecx, [edx+4]
		add	esi, eax
		mov	edi, ecx
		mov	eax, ecx
		shl	edi, 18h
		shr	eax, 18h
		or	eax, edi
		mov	edi, ecx
		and	edi, 0FF00h
		shl	edi, 8
		shr	ecx, 8
		or	eax, edi
		and	ecx, 0FF00h
		or	eax, ecx
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_68D82417
		jmp	loc_68D823E2
; ---------------------------------------------------------------------------

loc_68D8249A:				; CODE XREF: _nl_load_domain+806j
		test	ebx, ebx
		jnz	short loc_68D824D0
		mov	ecx, [ebp+var_84]
		mov	esi, [ebp+var_94]
		mov	edx, [esi+ecx*4]

loc_68D824AD:				; CODE XREF: _nl_load_domain+9BFj
		add	edx, [ebp+Memory]
		cmp	dword ptr [edx+8], 0FFFFFFFFh
		setnz	al
		jmp	loc_68D82396
; ---------------------------------------------------------------------------

loc_68D824BC:				; CODE XREF: _nl_load_domain+80Ej
		mov	edi, [ebp+var_84]
		mov	edx, [ebp+var_A8]
		mov	eax, [edx+edi*4]
		jmp	loc_68D82343
; ---------------------------------------------------------------------------

loc_68D824D0:				; CODE XREF: _nl_load_domain+97Cj
		mov	edi, [ebp+var_84]
		mov	eax, [ebp+var_A8]
		mov	edx, [eax+edi*4]
		jmp	short loc_68D824AD
; ---------------------------------------------------------------------------

loc_68D824E1:				; CODE XREF: _nl_load_domain+3B3j
		mov	eax, [ebp+Memory]
		mov	edx, [ebp+Memory]
		mov	eax, [eax+1Ch]
		mov	[ebp+Dst], eax
		mov	eax, [edx+20h]
		jmp	loc_68D81F2F
; ---------------------------------------------------------------------------

loc_68D824F5:				; CODE XREF: _nl_load_domain+439j
		mov	eax, [esi+0Ch]
		mov	[ebp+var_8C], eax
		jmp	loc_68D82270
; ---------------------------------------------------------------------------

loc_68D82503:				; CODE XREF: _nl_load_domain+7F7j
		cmp	[ebp+var_90], 0
		mov	ebx, [ebp+var_9C]
		mov	esi, [ebp+var_A0]
		jz	loc_68D82042
		mov	eax, [ebp+var_90]
		shl	eax, 4
		add	eax, [ebp+var_98]
		mov	[esp+0F8h+Size], eax ; Size
		call	malloc
		test	eax, eax
		mov	[ebp+var_8C], eax
		jz	loc_68D8225C
		mov	eax, [ebp+var_90]
		mov	edi, [ebp+var_8C]
		mov	[ebp+var_BC], ebx
		mov	[ebp+var_9C], 0
		shl	eax, 3
		mov	[esi+10h], edi
		add	edi, eax
		add	eax, edi
		mov	[ebp+var_A0], eax
		mov	eax, [esi+2Ch]
		mov	edx, [ebp+var_A0]
		mov	[ebp+var_B4], edi
		mov	[ebp+var_B0], esi
		lea	eax, [edx+eax*4]
		xor	edx, edx
		mov	[ebp+Dst], eax
		mov	ebx, edx

loc_68D8258C:				; CODE XREF: _nl_load_domain+CAEj
		cmp	ebx, [ebp+var_88]
		jnb	loc_68D8292E
		mov	esi, [ebp+var_B0]
		xor	ecx, ecx
		mov	edx, [esi+0Ch]

loc_68D825A3:				; CODE XREF: _nl_load_domain+B4Cj
		test	edx, edx
		jz	loc_68D8290E
		test	ecx, ecx
		jnz	loc_68D828F5
		mov	esi, [ebp+var_94]
		mov	eax, [esi+ebx*4]

loc_68D825BC:				; CODE XREF: _nl_load_domain+DDEj
		mov	esi, eax
		mov	edi, eax
		shl	edi, 18h
		shr	esi, 18h
		or	esi, edi
		mov	edi, eax
		and	edi, 0FF00h
		shl	edi, 8
		shr	eax, 8
		or	esi, edi
		and	eax, 0FF00h
		or	esi, eax
		add	esi, [ebp+Memory]
		mov	eax, [esi+8]
		mov	edi, [esi+8]
		shr	eax, 18h
		shl	edi, 18h
		or	eax, edi
		mov	edi, [esi+8]
		and	edi, 0FF00h
		shl	edi, 8
		or	eax, edi
		mov	edi, [esi+8]
		shr	edi, 8
		and	edi, 0FF00h
		or	eax, edi
		cmp	eax, 0FFFFFFFFh
		setnz	al

loc_68D82612:				; CODE XREF: _nl_load_domain+E09j
		test	al, al
		jz	short loc_68D82666
		add	esi, 4

loc_68D82619:				; CODE XREF: _nl_load_domain+B3Fj
		test	edx, edx
		jz	short loc_68D82661
		mov	eax, [esi+4]
		mov	edi, [esi+4]
		shr	eax, 18h
		shl	edi, 18h
		or	eax, edi
		mov	edi, [esi+4]
		and	edi, 0FF00h
		shl	edi, 8
		or	eax, edi
		mov	edi, [esi+4]
		shr	edi, 8
		and	edi, 0FF00h
		or	eax, edi

loc_68D82647:				; CODE XREF: _nl_load_domain+B44j
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68D82666
		mov	edi, [ebp+var_A4]
		cmp	dword ptr [edi+eax*4], 0
		jz	loc_68D827CB
		add	esi, 8
		jmp	short loc_68D82619
; ---------------------------------------------------------------------------

loc_68D82661:				; CODE XREF: _nl_load_domain+AFBj
		mov	eax, [esi+4]
		jmp	short loc_68D82647
; ---------------------------------------------------------------------------

loc_68D82666:				; CODE XREF: _nl_load_domain+AF4j
					; _nl_load_domain+B2Aj
		add	ecx, 1
		cmp	ecx, 2
		jnz	loc_68D825A3
		mov	eax, [ebp+var_9C]
		mov	esi, ebx
		mov	[ebp+var_84], 0
		shl	eax, 3
		mov	[ebp+var_B8], eax

loc_68D8268D:				; CODE XREF: _nl_load_domain+C8Fj
		test	edx, edx
		jz	loc_68D828D9
		cmp	[ebp+var_84], 0
		jnz	loc_68D827B4
		mov	ecx, [ebp+var_94]
		mov	eax, [ecx+esi*4]

loc_68D826AB:				; CODE XREF: _nl_load_domain+C9Dj
		mov	ebx, eax
		mov	ecx, eax
		shl	ecx, 18h
		shr	ebx, 18h
		or	ebx, ecx
		mov	ecx, eax
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	eax, 8
		or	ebx, ecx
		and	eax, 0FF00h
		or	ebx, eax
		add	ebx, [ebp+Memory]
		mov	ecx, [ebx]
		mov	eax, ecx
		mov	edi, ecx
		shl	edi, 18h
		shr	eax, 18h
		or	eax, edi
		mov	edi, ecx
		and	edi, 0FF00h
		shl	edi, 8
		shr	ecx, 8
		or	eax, edi
		and	ecx, 0FF00h
		or	eax, ecx

loc_68D826F7:				; CODE XREF: _nl_load_domain+DD0j
		add	eax, [ebp+Memory]
		cmp	[ebp+var_84], 0
		mov	[ebp+var_AC], eax
		mov	eax, [ebp+var_8C]
		jz	short loc_68D82715
		mov	eax, [ebp+var_B4]

loc_68D82715:				; CODE XREF: _nl_load_domain+BEDj
		add	eax, [ebp+var_B8]
		test	edx, edx
		mov	[ebp+var_98], eax
		jz	loc_68D82887
		mov	edi, [ebx+8]
		mov	eax, edi
		mov	ecx, edi
		shl	ecx, 18h
		shr	eax, 18h
		or	eax, ecx
		mov	ecx, edi
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	edi, 8
		or	eax, ecx
		and	edi, 0FF00h
		or	eax, edi
		cmp	eax, 0FFFFFFFFh
		setz	al

loc_68D82756:				; CODE XREF: _nl_load_domain+D6Ej
		test	al, al
		jz	short loc_68D827D8
		test	edx, edx
		jz	short loc_68D827D3
		mov	edx, [ebx+4]
		mov	eax, edx
		mov	ecx, edx
		shl	ecx, 18h
		shr	eax, 18h
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	edx, 8
		or	eax, ecx
		and	edx, 0FF00h
		or	eax, edx

loc_68D82785:				; CODE XREF: _nl_load_domain+CB6j
		mov	edx, [ebp+var_98]
		mov	ecx, [ebp+var_AC]
		mov	[edx], eax
		mov	[edx+4], ecx

loc_68D82796:				; CODE XREF: _nl_load_domain+D81j
		add	[ebp+var_84], 1
		cmp	[ebp+var_84], 2
		jz	short loc_68D827C2
		mov	ebx, [ebp+var_B0]
		mov	edx, [ebx+0Ch]
		jmp	loc_68D8268D
; ---------------------------------------------------------------------------

loc_68D827B4:				; CODE XREF: _nl_load_domain+B7Cj
		mov	ebx, [ebp+var_A8]
		mov	eax, [ebx+esi*4]
		jmp	loc_68D826AB
; ---------------------------------------------------------------------------

loc_68D827C2:				; CODE XREF: _nl_load_domain+C84j
		add	[ebp+var_9C], 1
		mov	ebx, esi

loc_68D827CB:				; CODE XREF: _nl_load_domain+B36j
		add	ebx, 1
		jmp	loc_68D8258C
; ---------------------------------------------------------------------------

loc_68D827D3:				; CODE XREF: _nl_load_domain+C3Cj
		mov	eax, [ebx+4]
		jmp	short loc_68D82785
; ---------------------------------------------------------------------------

loc_68D827D8:				; CODE XREF: _nl_load_domain+C38j
		mov	eax, [ebp+Dst]
		add	ebx, 4
		mov	edi, [ebp+var_98]
		mov	[edi+4], eax
		jmp	loc_68D82870
; ---------------------------------------------------------------------------

loc_68D827EC:				; CODE XREF: _nl_load_domain+D5Aj
		mov	eax, [ebx]
		mov	edi, eax
		mov	edx, eax
		shl	edx, 18h
		shr	edi, 18h
		or	edi, edx
		mov	edx, eax
		and	edx, 0FF00h
		shl	edx, 8
		shr	eax, 8
		or	edi, edx
		and	eax, 0FF00h
		or	edi, eax
		mov	eax, [ebx+4]
		mov	edx, eax
		mov	ecx, eax
		shl	ecx, 18h
		shr	edx, 18h
		or	edx, ecx
		mov	ecx, eax
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	eax, 8
		or	edx, ecx
		and	eax, 0FF00h
		or	edx, eax

loc_68D82837:				; CODE XREF: _nl_load_domain+D65j
		test	edi, edi
		jnz	short loc_68D828A6

loc_68D8283B:				; CODE XREF: _nl_load_domain+DB4j
		cmp	edx, 0FFFFFFFFh
		jz	short loc_68D82893
		mov	ecx, [ebp+var_A4]
		xor	eax, eax
		add	ebx, 8
		mov	edx, [ecx+edx*4]
		or	ecx, 0FFFFFFFFh
		mov	edi, edx
		repne scasb
		mov	[esp+0F8h+Src],	edx ; Src
		mov	edx, [ebp+Dst]
		mov	[esp+0F8h+Size], edx ; Dst
		not	ecx
		lea	edi, [ecx-1]
		mov	[esp+0F8h+var_F0], edi ; Size
		call	memcpy
		add	[ebp+Dst], edi

loc_68D82870:				; CODE XREF: _nl_load_domain+CC7j
		mov	edx, [ebp+var_B0]
		cmp	dword ptr [edx+0Ch], 0
		jnz	loc_68D827EC
		mov	edi, [ebx]
		mov	edx, [ebx+4]
		jmp	short loc_68D82837
; ---------------------------------------------------------------------------

loc_68D82887:				; CODE XREF: _nl_load_domain+C03j
		cmp	dword ptr [ebx+8], 0FFFFFFFFh
		setz	al
		jmp	loc_68D82756
; ---------------------------------------------------------------------------

loc_68D82893:				; CODE XREF: _nl_load_domain+D1Ej
		mov	ecx, [ebp+var_98]
		mov	eax, [ebp+Dst]
		sub	eax, [ecx+4]
		mov	[ecx], eax
		jmp	loc_68D82796
; ---------------------------------------------------------------------------

loc_68D828A6:				; CODE XREF: _nl_load_domain+D19j
		mov	ecx, [ebp+var_AC]
		mov	eax, [ebp+Dst]
		mov	[ebp+var_D4], edx
		mov	[esp+0F8h+var_F0], edi ; Size
		mov	[esp+0F8h+Src],	ecx ; Src
		mov	[esp+0F8h+Size], eax ; Dst
		call	memcpy
		mov	edx, [ebp+var_D4]
		add	[ebp+Dst], edi
		add	[ebp+var_AC], edi
		jmp	loc_68D8283B
; ---------------------------------------------------------------------------

loc_68D828D9:				; CODE XREF: _nl_load_domain+B6Fj
		cmp	[ebp+var_84], 0
		jnz	short loc_68D82903
		mov	edi, [ebp+var_94]
		mov	ebx, [edi+esi*4]

loc_68D828EB:				; CODE XREF: _nl_load_domain+DECj
		add	ebx, [ebp+Memory]
		mov	eax, [ebx]
		jmp	loc_68D826F7
; ---------------------------------------------------------------------------

loc_68D828F5:				; CODE XREF: _nl_load_domain+A8Dj
		mov	edi, [ebp+var_A8]
		mov	eax, [edi+ebx*4]
		jmp	loc_68D825BC
; ---------------------------------------------------------------------------

loc_68D82903:				; CODE XREF: _nl_load_domain+DC0j
		mov	eax, [ebp+var_A8]
		mov	ebx, [eax+esi*4]
		jmp	short loc_68D828EB
; ---------------------------------------------------------------------------

loc_68D8290E:				; CODE XREF: _nl_load_domain+A85j
		test	ecx, ecx
		jnz	loc_68D82999
		mov	eax, [ebp+var_94]
		mov	esi, [eax+ebx*4]

loc_68D8291F:				; CODE XREF: _nl_load_domain+E82j
		add	esi, [ebp+Memory]
		cmp	dword ptr [esi+8], 0FFFFFFFFh
		setnz	al
		jmp	loc_68D82612
; ---------------------------------------------------------------------------

loc_68D8292E:				; CODE XREF: _nl_load_domain+A72j
		mov	edi, [ebp+var_90]
		cmp	[ebp+var_9C], edi
		mov	ebx, [ebp+var_BC]
		mov	esi, [ebp+var_B0]
		jnz	loc_68D82A82
		xor	edx, edx
		xor	edi, edi
		mov	[ebp+Dst], ebx

loc_68D82953:				; CODE XREF: _nl_load_domain+E77j
		cmp	edi, [esi+2Ch]
		jnb	short loc_68D829AF
		cmp	dword ptr [esi+34h], 0
		jz	short loc_68D829A7
		mov	eax, [esi+30h]
		mov	ecx, [eax+edx]
		mov	eax, ecx
		mov	ebx, ecx
		shl	ebx, 18h
		shr	eax, 18h
		or	eax, ebx
		mov	ebx, ecx
		and	ebx, 0FF00h
		shl	ebx, 8
		shr	ecx, 8
		or	eax, ebx
		and	ecx, 0FF00h
		or	eax, ecx

loc_68D82988:				; CODE XREF: _nl_load_domain+E8Dj
		mov	ecx, [ebp+var_A0]
		add	edi, 1
		mov	[ecx+edx], eax
		add	edx, 4
		jmp	short loc_68D82953
; ---------------------------------------------------------------------------

loc_68D82999:				; CODE XREF: _nl_load_domain+DF0j
		mov	edi, [ebp+var_A8]
		mov	esi, [edi+ebx*4]
		jmp	loc_68D8291F
; ---------------------------------------------------------------------------

loc_68D829A7:				; CODE XREF: _nl_load_domain+E3Cj
		mov	eax, [esi+30h]
		mov	eax, [eax+edx]
		jmp	short loc_68D82988
; ---------------------------------------------------------------------------

loc_68D829AF:				; CODE XREF: _nl_load_domain+E36j
		mov	ebx, [ebp+Dst]
		xor	edi, edi

loc_68D829B4:				; CODE XREF: _nl_load_domain+F10j
		cmp	edi, [ebp+var_9C]
		jnb	short loc_68D82A32
		mov	edx, [ebp+var_8C]
		mov	eax, [edx+edi*8+4]
		mov	[esp+0F8h+Size], eax
		call	libintl_hash_string
		xor	edx, edx
		mov	[ebp+Dst], eax
		div	dword ptr [esi+2Ch]
		mov	eax, [esi+2Ch]
		sub	eax, 2
		mov	[ebp+Memory], eax
		mov	eax, [ebp+Dst]
		mov	ecx, edx
		xor	edx, edx
		div	[ebp+Memory]
		mov	eax, edx
		mov	edx, [esi+2Ch]
		add	eax, 1
		mov	[ebp+var_84], eax
		sub	edx, eax
		mov	[ebp+Dst], edx
		mov	edx, eax
		sub	edx, [esi+2Ch]
		mov	[ebp+Memory], edx

loc_68D82A04:				; CODE XREF: _nl_load_domain+EFAj
					; _nl_load_domain+F02j
		mov	eax, [ebp+var_A0]
		lea	edx, [eax+ecx*4]
		cmp	dword ptr [edx], 0
		jz	short loc_68D82A24
		cmp	ecx, [ebp+Dst]
		jb	short loc_68D82A1C
		add	ecx, [ebp+Memory]
		jmp	short loc_68D82A04
; ---------------------------------------------------------------------------

loc_68D82A1C:				; CODE XREF: _nl_load_domain+EF5j
		add	ecx, [ebp+var_84]
		jmp	short loc_68D82A04
; ---------------------------------------------------------------------------

loc_68D82A24:				; CODE XREF: _nl_load_domain+EF0j
		mov	eax, [esi+14h]
		lea	eax, [edi+eax+1]
		add	edi, 1
		mov	[edx], eax
		jmp	short loc_68D829B4
; ---------------------------------------------------------------------------

loc_68D82A32:				; CODE XREF: _nl_load_domain+E9Aj
		mov	edx, [ebp+var_90]
		mov	ecx, [ebp+var_8C]
		mov	edi, [ebp+var_B4]
		mov	eax, [ebp+var_A0]
		mov	[esi+20h], edx
		mov	[esi+24h], ecx
		mov	[esi+28h], edi
		mov	[esi+30h], eax
		mov	dword ptr [esi+34h], 0
		jmp	loc_68D82057
; ---------------------------------------------------------------------------

loc_68D82A62:				; CODE XREF: _nl_load_domain+8A2j
					; _nl_load_domain+90Bj
		mov	[ebp+ebx*4+var_24], esi
		jmp	loc_68D8240B
; ---------------------------------------------------------------------------

loc_68D82A6B:				; CODE XREF: _nl_load_domain+757j
		mov	eax, [ebp+Memory]
		mov	edx, [ebp+Memory]
		add	eax, [eax+28h]
		mov	[ebp+var_94], eax
		mov	eax, [edx+2Ch]
		jmp	loc_68D822D6
; ---------------------------------------------------------------------------

loc_68D82A82:				; CODE XREF: _nl_load_domain+6CFj
					; _nl_load_domain+E26j	...
		call	abort
; ---------------------------------------------------------------------------

loc_68D82A87:				; CODE XREF: _nl_load_domain+658j
		cmp	byte ptr [ecx+5], 41h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+6], 58h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+7], 0
		nop
		jnz	loc_68D820FC
		test	bl, bl
		mov	eax, offset aI64d ; "I64d"
		jnz	loc_68D8200D
		mov	ecx, esi
		mov	eax, offset aI64i ; "I64i"
		test	cl, cl
		jnz	loc_68D8200D

loc_68D82AC2:				; CODE XREF: _nl_load_domain+1046j
		cmp	dl, 6Fh
		mov	eax, offset aI64o ; "I64o"
		jz	loc_68D8200D
		cmp	dl, 75h
		mov	eax, offset aI64u ; "I64u"
		jz	loc_68D8200D
		cmp	dl, 78h
		mov	eax, offset aI64x ; "I64x"
		jz	loc_68D8200D
		cmp	dl, 58h
		jnz	short loc_68D82A82
		mov	eax, offset aI64x_0 ; "I64X"
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82AFB:				; CODE XREF: _nl_load_domain+650j
		cmp	byte ptr [ecx+5], 41h
		nop
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+6], 53h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+7], 54h
		jnz	loc_68D820FC
		movzx	eax, byte ptr [ecx+8]
		cmp	al, 38h
		jz	loc_68D82BFD
		cmp	al, 31h
		jz	loc_68D82BDD
		cmp	al, 33h
		jz	short loc_68D82B71
		cmp	al, 36h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+9], 34h
		xchg	ax, ax
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+0Ah], 0
		jnz	loc_68D820FC

loc_68D82B50:				; CODE XREF: _nl_load_domain+5D6j
					; _nl_load_domain+10FAj
		test	bl, bl
		mov	eax, offset aI64d ; "I64d"
		jnz	loc_68D8200D
		mov	ebx, esi
		mov	eax, offset aI64i ; "I64i"
		test	bl, bl
		jz	loc_68D82AC2
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82B71:				; CODE XREF: _nl_load_domain+1010j
		cmp	byte ptr [ecx+9], 32h
		jnz	loc_68D820FC

loc_68D82B7B:				; CODE XREF: _nl_load_domain+5B0j
		cmp	byte ptr [ecx+0Ah], 0
		nop
		jnz	loc_68D820FC

loc_68D82B86:				; CODE XREF: _nl_load_domain+1095j
					; _nl_load_domain+10E1j ...
		test	bl, bl
		mov	eax, offset aDiouxx ; "diouxX"
		jnz	loc_68D8200D
		mov	ecx, esi
		mov	eax, (offset aDiouxx+2)	; "iouxX"
		test	cl, cl
		jz	loc_68D821C2
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82BA7:				; CODE XREF: _nl_load_domain+5C0j
		cmp	byte ptr [ecx+0Ah], 32h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+0Bh], 0
		jz	short loc_68D82B86
		xor	eax, eax
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82BBE:				; CODE XREF: _nl_load_domain+5B8j
		cmp	byte ptr [ecx+0Ah], 36h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+0Bh], 0
		lea	esi, [esi+0]
		jz	loc_68D821A6
		xor	eax, eax
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82BDD:				; CODE XREF: _nl_load_domain+1008j
		cmp	byte ptr [ecx+9], 36h
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+0Ah], 0
		nop
		lea	esi, [esi+0]
		jz	loc_68D821A6
		xor	eax, eax
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82BFD:				; CODE XREF: _nl_load_domain+1000j
		cmp	byte ptr [ecx+9], 0
		jz	short loc_68D82B86
		xor	eax, eax
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82C0A:				; CODE XREF: _nl_load_domain+640j
		cmp	byte ptr [ecx+5], 34h
		xchg	ax, ax
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+6], 0
		jz	loc_68D82B50
		xor	eax, eax
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82C27:				; CODE XREF: _nl_load_domain+638j
		cmp	byte ptr [ecx+5], 32h
		nop
		lea	esi, [esi+0]
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+6], 0
		jz	loc_68D82B86
		xor	eax, eax
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82C47:				; CODE XREF: _nl_load_domain+630j
		cmp	byte ptr [ecx+5], 36h
		nop
		lea	esi, [esi+0]
		jnz	loc_68D820FC
		cmp	byte ptr [ecx+6], 0
		jz	loc_68D821A6
		xor	eax, eax
		jmp	loc_68D8200D
; ---------------------------------------------------------------------------

loc_68D82C67:				; CODE XREF: _nl_load_domain+628j
		cmp	byte ptr [ecx+5], 0
		nop
		lea	esi, [esi+0]
		jz	loc_68D82B86
		xor	eax, eax
		jmp	loc_68D8200D
_nl_load_domain	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68D82C80	proc near		; CODE XREF: _nl_expand_alias+9Cp

Dst		= dword	ptr -1E8h
Src		= dword	ptr -1E4h
Size		= dword	ptr -1E0h
PtFuncCompare	= dword	ptr -1DCh
var_1D0		= dword	ptr -1D0h
var_1C9		= byte ptr -1C9h
var_1C8		= dword	ptr -1C8h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
File		= dword	ptr -1B0h
Str		= dword	ptr -1ACh
Buf		= byte ptr -1A8h

		push	ebp
		mov	ecx, eax
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		lea	eax, [edx+2Ch]
		sub	esp, 1DCh
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		lea	ebx, [esp+1E8h+var_1C9]
		and	ebx, 0FFFFFFF0h
		lea	esi, [ebx+esi]
		mov	[esp+1E8h+Size], edx ; Size
		mov	[esp+1E8h+Src],	ecx ; Src
		mov	[esp+1E8h+Dst],	ebx ; Dst
		call	memcpy
		mov	dword ptr [esi], 636F6C2Fh
		mov	dword ptr [esi+4], 2E656C61h
		mov	dword ptr [esi+8], 61696C61h
		mov	word ptr [esi+0Ch], 73h
		mov	[esp+1E8h+Dst],	ebx ; Filename
		xor	ebx, ebx
		mov	[esp+1E8h+Src],	offset Mode ; "r"
		call	fopen
		mov	[ebp+var_1C4], 0
		test	eax, eax
		mov	[ebp+File], eax
		jz	loc_68D83104
		mov	edi, ds:isspace
		nop

loc_68D82D00:				; CODE XREF: sub_68D82C80+328j
					; sub_68D82C80+350j ...
		mov	ecx, [ebp+File]
		mov	[esp+1E8h+Dst],	ecx ; File
		call	feof
		test	eax, eax
		jnz	loc_68D830C6
		mov	eax, [ebp+File]
		lea	edx, [ebp+Buf]
		mov	[esp+1E8h+Src],	190h ; MaxCount
		mov	[esp+1E8h+Dst],	edx ; Buf
		mov	[esp+1E8h+Size], eax ; File
		call	fgets
		test	eax, eax
		jz	loc_68D830C6
		lea	ecx, [ebp+Buf]
		mov	[esp+1E8h+Src],	0Ah ; Val
		lea	ebx, [ebp+Buf]
		mov	[esp+1E8h+Dst],	ecx ; Str
		call	strchr
		mov	[ebp+var_1B4], eax
		jmp	short loc_68D82D65
; ---------------------------------------------------------------------------

loc_68D82D62:				; CODE XREF: sub_68D82C80+F4j
		add	ebx, 1

loc_68D82D65:				; CODE XREF: sub_68D82C80+E0j
		movzx	esi, byte ptr [ebx]
		mov	edx, esi
		movzx	eax, dl
		mov	[esp+1E8h+Dst],	eax ; C
		call	edi ; isspace
		test	eax, eax
		jnz	short loc_68D82D62
		mov	ecx, esi
		cmp	cl, 23h
		jz	loc_68D82FA0
		test	cl, cl
		jz	loc_68D82FA0
		movzx	eax, byte ptr [ebx+1]
		lea	esi, [ebx+1]
		test	al, al
		jnz	short loc_68D82DAE
		jmp	loc_68D82FF5
; ---------------------------------------------------------------------------
		align 10h

loc_68D82DA0:				; CODE XREF: sub_68D82C80+138j
		add	esi, 1
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	loc_68D82FF5

loc_68D82DAE:				; CODE XREF: sub_68D82C80+112j
		movzx	eax, al
		mov	[esp+1E8h+Dst],	eax ; C
		call	edi ; isspace
		test	eax, eax
		jz	short loc_68D82DA0
		mov	byte ptr [esi],	0
		add	esi, 1
		movzx	eax, byte ptr [esi]
		mov	[ebp+Str], ebx
		mov	ebx, eax
		jmp	short loc_68D82DD6
; ---------------------------------------------------------------------------
		align 10h

loc_68D82DD0:				; CODE XREF: sub_68D82C80+160j
		add	esi, 1
		movzx	ebx, byte ptr [esi]

loc_68D82DD6:				; CODE XREF: sub_68D82C80+14Bj
					; sub_68D82C80+37Fj
		movzx	eax, bl
		mov	[esp+1E8h+Dst],	eax ; C
		call	edi ; isspace
		test	eax, eax
		jnz	short loc_68D82DD0
		mov	eax, ebx
		mov	ebx, [ebp+Str]
		test	al, al
		jz	loc_68D82FA0
		movzx	edx, byte ptr [esi+1]
		lea	ecx, [esi+1]
		test	dl, dl
		jz	short loc_68D82E4A
		mov	[ebp+Str], esi
		mov	esi, ecx
		mov	[ebp+var_1B8], ebx
		mov	ebx, edx
		jmp	short loc_68D82E1E
; ---------------------------------------------------------------------------
		align 10h

loc_68D82E10:				; CODE XREF: sub_68D82C80+1A8j
		add	esi, 1
		movzx	ebx, byte ptr [esi]
		test	bl, bl
		jz	loc_68D830B5

loc_68D82E1E:				; CODE XREF: sub_68D82C80+18Dj
		movzx	eax, bl
		mov	[esp+1E8h+Dst],	eax ; C
		call	edi ; isspace
		test	eax, eax
		jz	short loc_68D82E10
		mov	edx, ebx
		mov	ecx, esi
		mov	ebx, [ebp+var_1B8]
		cmp	dl, 0Ah
		mov	esi, [ebp+Str]
		jnz	loc_68D8310E
		mov	byte ptr [ecx],	0
		mov	byte ptr [ecx+1], 0Ah

loc_68D82E4A:				; CODE XREF: sub_68D82C80+17Bj
					; sub_68D82C80+441j ...
		mov	eax, ds:dword_68D96020
		cmp	ds:NumOfElements, eax
		jb	short loc_68D82E9D
		test	eax, eax
		mov	edx, 320h
		mov	ecx, 64h
		jz	short loc_68D82E6D
		mov	edx, eax
		lea	ecx, [eax+eax]
		shl	edx, 4

loc_68D82E6D:				; CODE XREF: sub_68D82C80+1E3j
		mov	eax, ds:Base
		mov	[ebp+var_1D0], ecx
		mov	[esp+1E8h+Src],	edx ; NewSize
		mov	[esp+1E8h+Dst],	eax ; Memory
		call	realloc
		mov	ecx, [ebp+var_1D0]
		test	eax, eax
		jz	loc_68D830C6
		mov	ds:Base, eax
		mov	ds:dword_68D96020, ecx

loc_68D82E9D:				; CODE XREF: sub_68D82C80+1D5j
		mov	[esp+1E8h+Dst],	ebx ; Str
		call	strlen
		mov	[esp+1E8h+Dst],	esi ; Str
		add	eax, 1
		mov	[ebp+var_1B8], eax
		call	strlen
		mov	ecx, ds:dword_68D96014
		mov	[ebp+var_1C0], ecx
		add	eax, 1
		mov	[ebp+Str], eax
		mov	eax, ds:dword_68D96010
		mov	edx, [ebp+Str]
		add	edx, [ebp+var_1B8]
		lea	ecx, [edx+eax]
		mov	[ebp+var_1BC], ecx
		mov	ecx, [ebp+var_1C0]
		cmp	[ebp+var_1BC], ecx
		ja	loc_68D83004
		mov	edx, ds:dword_68D9600C
		mov	ecx, ds:NumOfElements
		mov	[ebp+var_1BC], edx
		mov	edx, ds:Base
		mov	[ebp+var_1C0], ecx

loc_68D82F15:				; CODE XREF: sub_68D82C80+430j
		mov	ecx, [ebp+var_1B8]
		add	eax, [ebp+var_1BC]
		mov	[esp+1E8h+Src],	ebx ; Src
		mov	[ebp+var_1D0], edx
		mov	[esp+1E8h+Size], ecx ; Size
		mov	[esp+1E8h+Dst],	eax ; Dst
		call	memcpy
		mov	edx, [ebp+var_1D0]
		mov	ecx, [ebp+var_1C0]
		mov	ebx, ds:NumOfElements
		mov	[edx+ecx*8], eax
		mov	eax, [ebp+var_1B8]
		shl	ebx, 3
		add	eax, ds:dword_68D96010
		mov	edx, [ebp+Str]
		add	ebx, ds:Base
		mov	ds:dword_68D96010, eax
		add	eax, ds:dword_68D9600C
		mov	[esp+1E8h+Size], edx ; Size
		mov	[esp+1E8h+Src],	esi ; Src
		mov	[esp+1E8h+Dst],	eax ; Dst
		call	memcpy
		mov	ecx, [ebp+Str]
		add	ds:dword_68D96010, ecx
		add	ds:NumOfElements, 1
		add	[ebp+var_1C4], 1
		mov	[ebx+4], eax
		nop

loc_68D82FA0:				; CODE XREF: sub_68D82C80+FBj
					; sub_68D82C80+103j ...
		mov	eax, [ebp+var_1B4]
		test	eax, eax
		jnz	loc_68D82D00
		mov	ebx, [ebp+File]

loc_68D82FB4:				; CODE XREF: sub_68D82C80+36Ej
		lea	eax, [ebp+Buf]
		mov	[esp+1E8h+Size], ebx ; File
		mov	[esp+1E8h+Src],	190h ; MaxCount
		mov	[esp+1E8h+Dst],	eax ; Buf
		call	fgets
		test	eax, eax
		jz	loc_68D82D00
		lea	edx, [ebp+Buf]
		mov	[esp+1E8h+Src],	0Ah ; Val
		mov	[esp+1E8h+Dst],	edx ; Str
		call	strchr
		test	eax, eax
		jz	short loc_68D82FB4
		jmp	loc_68D82D00
; ---------------------------------------------------------------------------

loc_68D82FF5:				; CODE XREF: sub_68D82C80+114j
					; sub_68D82C80+128j
		xor	eax, eax
		mov	[ebp+Str], ebx
		mov	ebx, eax
		jmp	loc_68D82DD6
; ---------------------------------------------------------------------------

loc_68D83004:				; CODE XREF: sub_68D82C80+271j
		cmp	edx, 400h
		jnb	short loc_68D83011
		mov	edx, 400h

loc_68D83011:				; CODE XREF: sub_68D82C80+38Aj
		mov	eax, ds:dword_68D9600C
		add	edx, [ebp+var_1C0]
		mov	[esp+1E8h+Dst],	eax ; Memory
		mov	[ebp+var_1C8], edx
		mov	[esp+1E8h+Src],	edx ; NewSize
		call	realloc
		test	eax, eax
		mov	[ebp+var_1BC], eax
		jz	loc_68D830C6
		mov	eax, ds:dword_68D9600C
		cmp	eax, [ebp+var_1BC]
		jz	loc_68D8311E
		mov	edx, ds:NumOfElements
		test	edx, edx
		mov	[ebp+var_1C0], edx
		jz	loc_68D83134
		mov	ecx, [ebp+var_1BC]
		mov	[ebp-1CCh], esi
		mov	edx, ds:Base
		mov	esi, [ebp+var_1C0]
		sub	ecx, eax
		xor	eax, eax
		lea	esi, [esi+0]

loc_68D83080:				; CODE XREF: sub_68D82C80+40Cj
		add	[edx+eax*8], ecx
		add	[edx+eax*8+4], ecx
		add	eax, 1
		cmp	esi, eax
		ja	short loc_68D83080
		mov	esi, [ebp-1CCh]

loc_68D83094:				; CODE XREF: sub_68D82C80+4AFj
					; sub_68D82C80+4BAj
		mov	eax, [ebp+var_1C8]
		mov	ecx, [ebp+var_1BC]
		mov	ds:dword_68D96014, eax
		mov	eax, ds:dword_68D96010
		mov	ds:dword_68D9600C, ecx
		jmp	loc_68D82F15
; ---------------------------------------------------------------------------

loc_68D830B5:				; CODE XREF: sub_68D82C80+198j
		mov	esi, [ebp+Str]
		mov	ebx, [ebp+var_1B8]
		jmp	loc_68D82E4A
; ---------------------------------------------------------------------------

loc_68D830C6:				; CODE XREF: sub_68D82C80+90j
					; sub_68D82C80+B8j ...
		mov	ebx, [ebp+var_1C4]
		mov	eax, [ebp+File]
		mov	[esp+1E8h+Dst],	eax ; File
		call	fclose
		test	ebx, ebx
		jz	short loc_68D83104
		mov	eax, ds:NumOfElements
		mov	[esp+1E8h+PtFuncCompare], offset PtFuncCompare ; PtFuncCompare
		mov	[esp+1E8h+Size], 8 ; SizeOfElements
		mov	[esp+1E8h+Src],	eax ; NumOfElements
		mov	eax, ds:Base
		mov	[esp+1E8h+Dst],	eax ; Base
		call	qsort

loc_68D83104:				; CODE XREF: sub_68D82C80+73j
					; sub_68D82C80+45Cj
		lea	esp, [ebp-0Ch]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8310E:				; CODE XREF: sub_68D82C80+1BDj
		test	dl, dl
		jz	loc_68D82E4A
		mov	byte ptr [ecx],	0
		jmp	loc_68D82E4A
; ---------------------------------------------------------------------------

loc_68D8311E:				; CODE XREF: sub_68D82C80+3C7j
		mov	eax, ds:NumOfElements
		mov	edx, ds:Base
		mov	[ebp+var_1C0], eax
		jmp	loc_68D83094
; ---------------------------------------------------------------------------

loc_68D83134:				; CODE XREF: sub_68D82C80+3DBj
		mov	edx, ds:Base
		jmp	loc_68D83094
sub_68D82C80	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. _nl_expand_alias

; =============== S U B	R O U T	I N E =======================================


		public _nl_expand_alias
_nl_expand_alias proc near		; CODE XREF: _nl_find_domain+108p

Key		= dword	ptr -4Ch
Base		= dword	ptr -48h
NumOfElements	= dword	ptr -44h
SizeOfElements	= dword	ptr -40h
PtFuncCompare	= dword	ptr -3Ch
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edx, ds:dword_68D96008
		mov	esi, [esp+4Ch+arg_0]
		test	edx, edx
		jz	loc_68D83239

loc_68D83159:				; CODE XREF: _nl_expand_alias+103j
		lea	ebx, [esp+4Ch+var_24]

loc_68D8315D:				; CODE XREF: _nl_expand_alias+A3j
		mov	eax, ds:NumOfElements
		mov	[esp+4Ch+var_24], esi
		test	eax, eax
		jnz	loc_68D83207

loc_68D8316E:				; CODE XREF: _nl_expand_alias+EEj
		mov	eax, ds:dword_68D96008
		movzx	ecx, byte ptr [eax]
		test	cl, cl
		jz	short loc_68D831F5

loc_68D8317A:				; CODE XREF: _nl_expand_alias+B3j
		mov	edx, eax
		lea	esi, [esi+0]

loc_68D83180:				; CODE XREF: _nl_expand_alias+90j
		cmp	cl, 3Bh
		mov	edi, eax
		jz	short loc_68D83192
		jmp	short loc_68D831A2
; ---------------------------------------------------------------------------
		align 10h

loc_68D83190:				; CODE XREF: _nl_expand_alias+5Cj
		mov	eax, edx

loc_68D83192:				; CODE XREF: _nl_expand_alias+45j
		movzx	ecx, byte ptr [eax+1]
		lea	edx, [eax+1]
		cmp	cl, 3Bh
		jz	short loc_68D83190
		mov	edi, edx
		mov	eax, edx

loc_68D831A2:				; CODE XREF: _nl_expand_alias+47j
		test	cl, cl
		mov	ebp, edi
		jnz	short loc_68D831B6
		jmp	short loc_68D831C6
; ---------------------------------------------------------------------------
		align 10h

loc_68D831B0:				; CODE XREF: _nl_expand_alias+80j
		test	cl, cl
		jz	short loc_68D831C2
		mov	edi, edx

loc_68D831B6:				; CODE XREF: _nl_expand_alias+66j
		movzx	ecx, byte ptr [edi+1]
		lea	edx, [edi+1]
		cmp	cl, 3Bh
		jnz	short loc_68D831B0

loc_68D831C2:				; CODE XREF: _nl_expand_alias+72j
		mov	ebp, edx
		mov	edi, edx

loc_68D831C6:				; CODE XREF: _nl_expand_alias+68j
		cmp	eax, edi
		jb	short loc_68D831D2
		test	cl, cl
		jz	short loc_68D831FF
		mov	eax, ebp
		jmp	short loc_68D83180
; ---------------------------------------------------------------------------

loc_68D831D2:				; CODE XREF: _nl_expand_alias+88j
		mov	ds:dword_68D96008, edx
		mov	edx, edi
		sub	edx, eax
		call	sub_68D82C80
		test	eax, eax
		jnz	loc_68D8315D
		mov	eax, ds:dword_68D96008
		movzx	ecx, byte ptr [eax]
		test	cl, cl
		jnz	short loc_68D8317A

loc_68D831F5:				; CODE XREF: _nl_expand_alias+38j
					; _nl_expand_alias+C5j
		xor	eax, eax

loc_68D831F7:				; CODE XREF: _nl_expand_alias+F7j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D831FF:				; CODE XREF: _nl_expand_alias+8Cj
		mov	ds:dword_68D96008, edx
		jmp	short loc_68D831F5
; ---------------------------------------------------------------------------

loc_68D83207:				; CODE XREF: _nl_expand_alias+28j
		mov	[esp+4Ch+NumOfElements], eax ; NumOfElements
		mov	eax, ds:Base
		mov	[esp+4Ch+PtFuncCompare], offset	PtFuncCompare ;	PtFuncCompare
		mov	[esp+4Ch+SizeOfElements], 8 ; SizeOfElements
		mov	[esp+4Ch+Key], ebx ; Key
		mov	[esp+4Ch+Base],	eax ; Base
		call	bsearch
		test	eax, eax
		jz	loc_68D8316E
		mov	eax, [eax+4]
		jmp	short loc_68D831F7
; ---------------------------------------------------------------------------

loc_68D83239:				; CODE XREF: _nl_expand_alias+13j
		mov	ds:dword_68D96008, offset word_68D91052
		jmp	loc_68D83159
_nl_expand_alias endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PtFuncCompare(const void *, const	void *)
PtFuncCompare	proc near		; DATA XREF: sub_68D82C80+463o
					; _nl_expand_alias+D0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+0Ch+arg_4], eax
		mov	eax, [esp+0Ch+arg_0]
		mov	eax, [eax]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, ds:_stricmp
		add	esp, 0Ch
		jmp	eax
PtFuncCompare	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. libintl_textdomain

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_textdomain(char *Str1)
		public libintl_textdomain
libintl_textdomain proc	near		; CODE XREF: .text:68D8B216j

Memory		= dword	ptr -1Ch
Str2		= dword	ptr -18h
Str1		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+Str1]
		test	ebx, ebx
		jz	loc_68D83318
		cmp	byte ptr [ebx],	0
		mov	esi, libintl_nl_current_default_domain
		jnz	short loc_68D832D0

loc_68D8329C:				; CODE XREF: libintl_textdomain+62j
		mov	libintl_nl_current_default_domain, offset libintl_nl_default_default_domain ; "messages"
		mov	ebx, offset libintl_nl_default_default_domain ;	"messages"

loc_68D832AB:				; CODE XREF: libintl_textdomain+96j
		add	ds:_nl_msg_cat_cntr, 1
		cmp	esi, ebx
		jz	short loc_68D83326
		cmp	esi, offset libintl_nl_default_default_domain ;	"messages"
		jz	short loc_68D832C6
		mov	[esp+1Ch+Memory], esi ;	Memory
		call	free

loc_68D832C6:				; CODE XREF: libintl_textdomain+3Cj
					; libintl_textdomain+81j ...
		mov	eax, ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D832D0:				; CODE XREF: libintl_textdomain+1Aj
		mov	[esp+1Ch+Str2],	offset libintl_nl_default_default_domain ; "messages"
		mov	[esp+1Ch+Memory], ebx ;	Str1
		call	strcmp
		test	eax, eax
		jz	short loc_68D8329C
		mov	[esp+1Ch+Str2],	esi ; Str2
		mov	[esp+1Ch+Memory], ebx ;	Str1
		call	strcmp
		test	eax, eax
		jnz	short loc_68D83303
		test	esi, esi
		jz	short loc_68D83326
		add	ds:_nl_msg_cat_cntr, 1
		mov	ebx, esi
		jmp	short loc_68D832C6
; ---------------------------------------------------------------------------

loc_68D83303:				; CODE XREF: libintl_textdomain+72j
		mov	[esp+1Ch+Memory], ebx ;	Src
		call	_strdup
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68D832C6
		mov	libintl_nl_current_default_domain, eax
		jmp	short loc_68D832AB
; ---------------------------------------------------------------------------

loc_68D83318:				; CODE XREF: libintl_textdomain+Bj
		mov	ebx, libintl_nl_current_default_domain
		add	esp, 14h
		mov	eax, ebx
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68D83326:				; CODE XREF: libintl_textdomain+34j
					; libintl_textdomain+76j
		mov	ebx, esi
		jmp	short loc_68D832C6
libintl_textdomain endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. _nl_normalize_codeset

; =============== S U B	R O U T	I N E =======================================


		public _nl_normalize_codeset
_nl_normalize_codeset proc near		; CODE XREF: _nl_explode_name+10Ep

C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, 4
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edx, [esp+3Ch+arg_4]
		test	edx, edx
		jz	loc_68D83428
		xor	ebx, ebx
		mov	esi, 1
		xor	bp, bp

loc_68D83352:				; CODE XREF: _nl_normalize_codeset+51j
		mov	eax, [esp+3Ch+arg_0]
		movzx	edi, byte ptr [eax+ebx]
		mov	[esp+3Ch+C], edi ; C
		call	ds:isalnum
		test	eax, eax
		jz	short loc_68D8337A
		mov	[esp+3Ch+C], edi ; C
		add	ebp, 1
		call	ds:isalpha
		cmp	eax, 1
		sbb	eax, eax
		and	esi, eax

loc_68D8337A:				; CODE XREF: _nl_normalize_codeset+35j
		add	ebx, 1
		cmp	[esp+3Ch+arg_4], ebx
		ja	short loc_68D83352
		test	esi, esi
		jnz	loc_68D83425
		add	ebp, 1

loc_68D8338E:				; CODE XREF: _nl_normalize_codeset+FDj
		mov	[esp+3Ch+C], ebp ; Size
		call	malloc
		test	eax, eax
		mov	[esp+3Ch+var_20], eax
		jz	short loc_68D83405
		test	esi, esi
		mov	edx, offset aIso ; "iso"
		mov	edi, eax
		jnz	short loc_68D83412

loc_68D833A9:				; CODE XREF: _nl_normalize_codeset+F3j
		mov	eax, [esp+3Ch+arg_4]
		test	eax, eax
		jz	short loc_68D833FE
		xor	ebx, ebx
		jmp	short loc_68D833CC
; ---------------------------------------------------------------------------

loc_68D833B5:				; CODE XREF: _nl_normalize_codeset+B4j
		mov	[esp+3Ch+C], esi ; C
		call	ds:tolower
		mov	[edi], al
		add	edi, 1

loc_68D833C3:				; CODE XREF: _nl_normalize_codeset+BCj
		add	ebx, 1
		cmp	[esp+3Ch+arg_4], ebx
		jbe	short loc_68D833FE

loc_68D833CC:				; CODE XREF: _nl_normalize_codeset+83j
					; _nl_normalize_codeset+CCj
		mov	eax, [esp+3Ch+arg_0]
		movzx	ebp, byte ptr [eax+ebx]
		mov	eax, ebp
		movzx	esi, al
		mov	[esp+3Ch+C], esi ; C
		call	ds:isalpha
		test	eax, eax
		jnz	short loc_68D833B5
		sub	esi, 30h
		cmp	esi, 9
		ja	short loc_68D833C3
		mov	eax, ebp
		add	ebx, 1
		mov	[edi], al
		add	edi, 1
		cmp	[esp+3Ch+arg_4], ebx
		ja	short loc_68D833CC

loc_68D833FE:				; CODE XREF: _nl_normalize_codeset+7Fj
					; _nl_normalize_codeset+9Aj
		mov	byte ptr [edi],	0
		mov	eax, [esp+3Ch+var_20]

loc_68D83405:				; CODE XREF: _nl_normalize_codeset+6Cj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D83410:				; CODE XREF: _nl_normalize_codeset+EFj
		mov	eax, ebx

loc_68D83412:				; CODE XREF: _nl_normalize_codeset+77j
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		lea	ebx, [eax+1]
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D83410
		mov	edi, eax
		jmp	short loc_68D833A9
; ---------------------------------------------------------------------------

loc_68D83425:				; CODE XREF: _nl_normalize_codeset+55j
		add	ebp, 4

loc_68D83428:				; CODE XREF: _nl_normalize_codeset+12j
		mov	esi, 1
		jmp	loc_68D8338E
_nl_normalize_codeset endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D83440(int,	char *,	char *,	char *,	char *,	char *,	char *)
sub_68D83440	proc near		; CODE XREF: sub_68D83440+363p
					; sub_68D83440+4C8p ...

Str		= dword	ptr -6Ch
Str2		= dword	ptr -68h
Size		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
Src		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	[esp+6Ch+Src], edx
		mov	edx, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_38], eax
		mov	[esp+6Ch+var_34], ecx
		movzx	eax, byte ptr [edx]
		cmp	al, 5Ch
		jnz	loc_68D837BB

loc_68D83462:				; CODE XREF: sub_68D83440+37Dj
					; sub_68D83440+39Dj
		mov	[esp+6Ch+var_34], 0

loc_68D8346A:				; CODE XREF: sub_68D83440+397j
					; sub_68D83440+429j
		mov	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+Str], eax ; Str
		call	strlen
		mov	edx, [esp+6Ch+arg_0]
		and	edx, 4
		mov	[esp+6Ch+var_30], edx
		mov	ebx, eax
		jnz	loc_68D83850
		xor	esi, esi

loc_68D8348B:				; CODE XREF: sub_68D83440+41Fj
		mov	eax, [esp+6Ch+arg_0]
		and	eax, 2
		mov	[esp+6Ch+var_2C], eax
		jnz	loc_68D83837
		xor	edi, edi

loc_68D8349E:				; CODE XREF: sub_68D83440+406j
		mov	ecx, [esp+6Ch+arg_0]
		and	ecx, 1
		mov	[esp+6Ch+var_24], ecx
		jnz	loc_68D83820
		xor	ebp, ebp

loc_68D834B1:				; CODE XREF: sub_68D83440+3F2j
		mov	edx, [esp+6Ch+arg_0]
		and	edx, 8
		mov	[esp+6Ch+var_20], edx
		jnz	loc_68D83800
		mov	[esp+6Ch+var_3C], 0

loc_68D834CA:				; CODE XREF: sub_68D83440+3D6j
		mov	eax, [esp+6Ch+arg_18]
		mov	[esp+6Ch+Str], eax ; Str
		call	strlen
		mov	ecx, [esp+6Ch+var_34]
		lea	edx, [ecx+ebx+2]
		add	edx, esi
		xor	esi, esi
		add	edx, edi
		add	edx, ebp
		add	edx, [esp+6Ch+var_3C]
		lea	eax, [edx+eax]
		mov	[esp+6Ch+Str], eax ; Size
		call	malloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_68D837F4
		mov	esi, [esp+6Ch+var_34]
		mov	edx, eax
		test	esi, esi
		jnz	loc_68D83932

loc_68D83510:				; CODE XREF: sub_68D83440+543j
		mov	ecx, [esp+6Ch+arg_4]
		jmp	short loc_68D83518
; ---------------------------------------------------------------------------

loc_68D83516:				; CODE XREF: sub_68D83440+E5j
		mov	edx, esi

loc_68D83518:				; CODE XREF: sub_68D83440+D4j
		movzx	eax, byte ptr [ecx]
		add	ecx, 1
		lea	esi, [edx+1]
		test	al, al
		mov	[edx], al
		jnz	short loc_68D83516
		mov	ecx, [esp+6Ch+var_30]
		mov	eax, esi
		test	ecx, ecx
		jz	short loc_68D83555
		mov	byte ptr [edx],	5Fh
		mov	edx, [esp+6Ch+arg_8]
		jmp	short loc_68D83542
; ---------------------------------------------------------------------------
		align 10h

loc_68D83540:				; CODE XREF: sub_68D83440+10Fj
		mov	eax, esi

loc_68D83542:				; CODE XREF: sub_68D83440+F8j
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		lea	esi, [eax+1]
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D83540
		mov	edx, eax
		mov	eax, esi

loc_68D83555:				; CODE XREF: sub_68D83440+EFj
		mov	ebp, [esp+6Ch+var_2C]
		mov	ecx, eax
		test	ebp, ebp
		jz	short loc_68D8357D
		mov	byte ptr [edx],	2Eh
		mov	edx, [esp+6Ch+arg_C]
		jmp	short loc_68D8356A
; ---------------------------------------------------------------------------

loc_68D83568:				; CODE XREF: sub_68D83440+137j
		mov	eax, esi

loc_68D8356A:				; CODE XREF: sub_68D83440+126j
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		lea	esi, [eax+1]
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D83568
		mov	ecx, esi
		mov	edx, eax

loc_68D8357D:				; CODE XREF: sub_68D83440+11Dj
		mov	edi, [esp+6Ch+var_24]
		mov	eax, ecx
		test	edi, edi
		jz	short loc_68D835A8
		mov	byte ptr [edx],	2Eh
		mov	edx, [esp+6Ch+arg_10]
		jmp	short loc_68D83595
; ---------------------------------------------------------------------------

loc_68D83593:				; CODE XREF: sub_68D83440+162j
		mov	ecx, esi

loc_68D83595:				; CODE XREF: sub_68D83440+151j
		movzx	eax, byte ptr [edx]
		add	edx, 1
		lea	esi, [ecx+1]
		test	al, al
		mov	[ecx], al
		jnz	short loc_68D83593
		mov	eax, esi
		mov	edx, ecx

loc_68D835A8:				; CODE XREF: sub_68D83440+145j
		mov	esi, [esp+6Ch+var_20]
		mov	ecx, eax
		test	esi, esi
		jz	short loc_68D835D5
		mov	byte ptr [edx],	40h
		mov	edx, [esp+6Ch+arg_14]
		jmp	short loc_68D835C2
; ---------------------------------------------------------------------------
		align 10h

loc_68D835C0:				; CODE XREF: sub_68D83440+18Fj
		mov	eax, esi

loc_68D835C2:				; CODE XREF: sub_68D83440+17Cj
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		lea	esi, [eax+1]
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D835C0
		mov	ecx, esi
		mov	edx, eax

loc_68D835D5:				; CODE XREF: sub_68D83440+170j
		mov	byte ptr [edx],	2Fh
		mov	esi, [esp+6Ch+arg_18]
		xor	eax, eax

loc_68D835E1:				; CODE XREF: sub_68D83440+1ADj
		movzx	edx, byte ptr [esi+eax]
		mov	[ecx+eax], dl
		add	eax, 1
		test	dl, dl
		jnz	short loc_68D835E1
		mov	ecx, [esp+6Ch+var_38]
		mov	esi, [ecx]
		test	esi, esi
		jz	loc_68D839B7
		mov	edi, ecx
		nop

loc_68D83600:				; CODE XREF: sub_68D83440+1E5j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_68D83620
		mov	[esp+6Ch+Str2],	ebx ; Str2
		mov	[esp+6Ch+Str], eax ; Str1
		call	strcmp
		cmp	eax, 0
		jz	loc_68D83920
		jl	short loc_68D83627
		lea	edi, [esi+0Ch]

loc_68D83620:				; CODE XREF: sub_68D83440+1C4j
		mov	esi, [esi+0Ch]
		test	esi, esi
		jnz	short loc_68D83600

loc_68D83627:				; CODE XREF: sub_68D83440+1DBj
					; sub_68D83440+579j
		mov	ecx, [esp+6Ch+var_34]
		xor	esi, esi
		mov	[esp+6Ch+var_2C], 1
		test	ecx, ecx
		jnz	loc_68D83875

loc_68D8363D:				; CODE XREF: sub_68D83440+478j
		mov	eax, [esp+6Ch+arg_0]
		mov	edx, [esp+6Ch+arg_0]
		and	eax, 0FFFFAAAAh
		sar	eax, 1
		and	edx, 5555h
		lea	edx, [eax+edx]
		mov	eax, edx
		and	edx, 3333h
		and	eax, 0FFFFCCCCh
		sar	eax, 2
		add	eax, edx
		mov	edx, eax
		sar	edx, 4
		lea	eax, [edx+eax]
		and	eax, 0F0Fh
		mov	ecx, eax
		sar	ecx, 8
		add	ecx, eax
		mov	eax, [esp+6Ch+var_2C]
		shl	eax, cl
		lea	eax, [esi+eax+5]
		shl	eax, 2
		mov	[esp+6Ch+Str], eax ; Size
		call	malloc
		test	eax, eax
		mov	esi, eax
		mov	[esp+6Ch+var_30], eax
		jz	loc_68D83920
		cmp	[esp+6Ch+var_2C], 1
		mov	[eax], ebx
		jbe	loc_68D83988
		mov	ecx, eax
		mov	dword ptr [eax+4], 1
		mov	dword ptr [eax+8], 0
		mov	eax, [edi]
		mov	[ecx+0Ch], eax
		mov	[edi], ecx
		mov	edi, [esp+6Ch+arg_0]

loc_68D836C6:				; CODE XREF: sub_68D83440+572j
		xor	eax, eax
		test	edi, edi
		js	loc_68D837E8
		mov	eax, [esp+6Ch+arg_0]
		mov	edx, [esp+6Ch+Src]
		add	edx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_24], esi
		not	eax
		mov	[esp+6Ch+var_40], eax
		xor	eax, eax
		mov	[esp+6Ch+var_3C], edx
		mov	ebp, eax
		jmp	short loc_68D836F9
; ---------------------------------------------------------------------------

loc_68D836F0:				; CODE XREF: sub_68D83440+2BDj
					; sub_68D83440+2C7j ...
		sub	edi, 1
		js	loc_68D837E2

loc_68D836F9:				; CODE XREF: sub_68D83440+2AEj
		test	[esp+6Ch+var_40], edi
		jnz	short loc_68D836F0
		mov	eax, edi
		and	eax, 3
		cmp	eax, 3
		jz	short loc_68D836F0
		cmp	[esp+6Ch+var_2C], 1
		jbe	loc_68D838C0
		mov	eax, [esp+6Ch+var_34]
		xor	ebx, ebx
		mov	ecx, [esp+6Ch+var_30]
		test	eax, eax
		lea	esi, [ecx+ebp*4+10h]
		jz	short loc_68D836F0
		test	ebx, ebx
		jz	loc_68D837B5
		xchg	ax, ax

loc_68D83730:				; CODE XREF: sub_68D83440+36Fj
		cmp	ebx, [esp+6Ch+var_3C]
		jnb	short loc_68D836F0
		mov	[esp+6Ch+Str], ebx ; Str
		mov	[esp+6Ch+Str2],	0 ; Val
		call	strchr
		lea	ebx, [eax+1]
		cmp	[esp+6Ch+var_3C], ebx
		jbe	short loc_68D836F0

loc_68D8374F:				; CODE XREF: sub_68D83440+379j
		test	ebx, ebx
		jz	short loc_68D836F0
		mov	[esp+6Ch+Str], ebx ; Str
		add	ebp, 1
		call	strlen
		mov	edx, [esp+6Ch+arg_14]
		mov	[esp+6Ch+Str], edi ; int
		mov	[esp+6Ch+var_58], edx ;	char *
		mov	edx, [esp+6Ch+arg_C]
		lea	ecx, [eax+1]
		mov	eax, [esp+6Ch+arg_18]
		mov	[esp+6Ch+var_60], edx ;	char *
		mov	edx, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_54], eax ;	char *
		mov	eax, [esp+6Ch+arg_10]
		mov	[esp+6Ch+Str2],	edx ; char *
		mov	edx, ebx
		mov	[esp+6Ch+var_5C], eax ;	char *
		mov	eax, [esp+6Ch+arg_8]
		mov	[esp+6Ch+Size],	eax ; char *
		mov	eax, [esp+6Ch+var_38]
		call	sub_68D83440
		mov	[esi], eax
		add	esi, 4
		test	ebx, ebx
		jnz	loc_68D83730

loc_68D837B5:				; CODE XREF: sub_68D83440+2E8j
		mov	ebx, [esp+6Ch+Src]
		jmp	short loc_68D8374F
; ---------------------------------------------------------------------------

loc_68D837BB:				; CODE XREF: sub_68D83440+1Cj
		cmp	al, 2Fh
		jz	loc_68D83462
		lea	edx, [eax-61h]
		cmp	dl, 19h
		ja	loc_68D83864

loc_68D837CF:				; CODE XREF: sub_68D83440+430j
		mov	ecx, [esp+6Ch+arg_4]
		cmp	byte ptr [ecx+1], 3Ah
		jnz	loc_68D8346A
		jmp	loc_68D83462
; ---------------------------------------------------------------------------

loc_68D837E2:				; CODE XREF: sub_68D83440+2B3j
		mov	esi, [esp+6Ch+var_24]
		mov	eax, ebp

loc_68D837E8:				; CODE XREF: sub_68D83440+28Aj
		mov	edx, [esp+6Ch+var_30]
		mov	dword ptr [edx+eax*4+10h], 0

loc_68D837F4:				; CODE XREF: sub_68D83440+BCj
		add	esp, 5Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D83800:				; CODE XREF: sub_68D83440+7Cj
		mov	ecx, [esp+6Ch+arg_14]
		mov	[esp+6Ch+Str], ecx ; Str
		call	strlen
		add	eax, 1
		mov	[esp+6Ch+var_3C], eax
		jmp	loc_68D834CA
; ---------------------------------------------------------------------------
		align 10h

loc_68D83820:				; CODE XREF: sub_68D83440+69j
		mov	eax, [esp+6Ch+arg_10]
		mov	[esp+6Ch+Str], eax ; Str
		call	strlen
		lea	ebp, [eax+1]
		jmp	loc_68D834B1
; ---------------------------------------------------------------------------

loc_68D83837:				; CODE XREF: sub_68D83440+56j
		mov	edx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+Str], edx ; Str
		call	strlen
		lea	edi, [eax+1]
		jmp	loc_68D8349E
; ---------------------------------------------------------------------------
		align 10h

loc_68D83850:				; CODE XREF: sub_68D83440+43j
		mov	ecx, [esp+6Ch+arg_8]
		mov	[esp+6Ch+Str], ecx ; Str
		call	strlen
		lea	esi, [eax+1]
		jmp	loc_68D8348B
; ---------------------------------------------------------------------------

loc_68D83864:				; CODE XREF: sub_68D83440+389j
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_68D8346A
		nop
		jmp	loc_68D837CF
; ---------------------------------------------------------------------------

loc_68D83875:				; CODE XREF: sub_68D83440+1F7j
		mov	ebp, [esp+6Ch+var_34]
		mov	esi, [esp+6Ch+Src]
		mov	[esp+6Ch+var_3C], ebx
		xor	ebx, ebx
		mov	[esp+6Ch+var_2C], 0
		nop
		lea	esi, [esi+0]

loc_68D83890:				; CODE XREF: sub_68D83440+463j
		mov	[esp+6Ch+Str], esi ; Str
		add	ebx, 1
		call	strlen
		lea	esi, [esi+eax+1]
		not	eax
		add	ebp, eax
		jnz	short loc_68D83890
		mov	[esp+6Ch+var_2C], ebx
		mov	ebx, [esp+6Ch+var_3C]
		cmp	[esp+6Ch+var_2C], 1
		setnbe	al
		movzx	esi, al
		jmp	loc_68D8363D
; ---------------------------------------------------------------------------
		align 10h

loc_68D838C0:				; CODE XREF: sub_68D83440+2CEj
		mov	ecx, [esp+6Ch+arg_18]
		mov	eax, [esp+6Ch+arg_14]
		mov	edx, [esp+6Ch+arg_10]
		mov	[esp+6Ch+Str], edi ; int
		mov	[esp+6Ch+var_54], ecx ;	char *
		mov	ecx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_58], eax ;	char *
		mov	eax, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_5C], edx ;	char *
		mov	edx, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_60], ecx ;	char *
		mov	ecx, [esp+6Ch+var_34]
		mov	[esp+6Ch+Size],	eax ; char *
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+Str2],	edx ; char *
		mov	edx, [esp+6Ch+Src]
		call	sub_68D83440
		mov	ecx, [esp+6Ch+var_30]
		mov	[ecx+ebp*4+10h], eax
		add	ebp, 1
		jmp	loc_68D836F0
; ---------------------------------------------------------------------------
		align 10h

loc_68D83920:				; CODE XREF: sub_68D83440+1D5j
					; sub_68D83440+258j
		mov	[esp+6Ch+Str], ebx ; Memory
		call	free
		add	esp, 5Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D83932:				; CODE XREF: sub_68D83440+CAj
		mov	edx, [esp+6Ch+Src]
		mov	edi, ebx
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+Str], ebx ; Dst
		mov	[esp+6Ch+Str2],	edx ; Src
		mov	[esp+6Ch+Size],	eax ; Size
		call	memcpy
		mov	esi, [esp+6Ch+var_34]
		mov	[esp+6Ch+Str], edi ; Str
		call	strlen
		mov	edx, eax
		not	edx
		add	esi, edx
		jz	short loc_68D83978

loc_68D83960:				; CODE XREF: sub_68D83440+536j
		add	edi, eax
		mov	byte ptr [edi],	3Bh
		add	edi, 1
		mov	[esp+6Ch+Str], edi ; Str
		call	strlen
		mov	edx, eax
		not	edx
		add	esi, edx
		jnz	short loc_68D83960

loc_68D83978:				; CODE XREF: sub_68D83440+51Ej
		mov	edx, [esp+6Ch+var_34]
		lea	edx, [ebx+edx]
		mov	byte ptr [edx-1], 2Fh
		jmp	loc_68D83510
; ---------------------------------------------------------------------------

loc_68D83988:				; CODE XREF: sub_68D83440+265j
		mov	edx, eax
		mov	eax, [esp+6Ch+arg_0]
		mov	dword ptr [edx+8], 0
		and	eax, 3
		cmp	eax, 3
		setz	al
		movzx	eax, al
		mov	[edx+4], eax
		mov	eax, [edi]
		mov	[edx+0Ch], eax
		mov	[edi], edx
		mov	edi, [esp+6Ch+arg_0]
		sub	edi, 1
		jmp	loc_68D836C6
; ---------------------------------------------------------------------------

loc_68D839B7:				; CODE XREF: sub_68D83440+1B7j
		mov	edi, ecx
		jmp	loc_68D83627
sub_68D83440	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. _nl_make_l10nflist

; =============== S U B	R O U T	I N E =======================================


; int __cdecl nl_make_l10nflist(int, char *, size_t, int, char *, char *, char *, char *, char *, char *, int)
		public _nl_make_l10nflist
_nl_make_l10nflist proc	near		; CODE XREF: _nl_find_domain+7Ap
					; _nl_find_domain+1BAp

Str		= dword	ptr -5Ch
Str2		= dword	ptr -58h
Size		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edx, [esp+5Ch+arg_10]
		movzx	eax, byte ptr [edx]
		cmp	al, 5Ch
		jz	short loc_68D839DA
		cmp	al, 2Fh
		jnz	loc_68D83D34

loc_68D839DA:				; CODE XREF: _nl_make_l10nflist+10j
					; _nl_make_l10nflist+390j ...
		mov	[esp+5Ch+arg_8], 0

loc_68D839E2:				; CODE XREF: _nl_make_l10nflist+388j
					; _nl_make_l10nflist+465j ...
		mov	eax, [esp+5Ch+arg_10]
		mov	[esp+5Ch+Str], eax ; Str
		call	strlen
		mov	edx, [esp+5Ch+arg_C]
		and	edx, 4
		mov	[esp+5Ch+var_20], edx
		mov	ebx, eax
		jnz	loc_68D83DC4
		xor	esi, esi

loc_68D83A03:				; CODE XREF: _nl_make_l10nflist+413j
		mov	eax, [esp+5Ch+arg_C]
		and	eax, 2
		mov	[esp+5Ch+var_24], eax
		jnz	loc_68D83DB0
		xor	edi, edi

loc_68D83A16:				; CODE XREF: _nl_make_l10nflist+3FFj
		mov	ecx, [esp+5Ch+arg_C]
		and	ecx, 1
		mov	[esp+5Ch+var_28], ecx
		jnz	loc_68D83D71
		mov	edx, [esp+5Ch+arg_C]
		xor	ebp, ebp
		and	edx, 8
		mov	[esp+5Ch+var_2C], edx
		jnz	loc_68D83D91

loc_68D83A3A:				; CODE XREF: _nl_make_l10nflist+3CBj
		mov	[esp+5Ch+var_30], 0

loc_68D83A42:				; CODE XREF: _nl_make_l10nflist+3E7j
		mov	eax, [esp+5Ch+arg_24]
		mov	[esp+5Ch+Str], eax ; Str
		call	strlen
		mov	ecx, [esp+5Ch+arg_8]
		lea	edx, [ecx+ebx+2]
		add	edx, esi
		xor	esi, esi
		add	edx, edi
		add	edx, ebp
		add	edx, [esp+5Ch+var_30]
		lea	eax, [edx+eax]
		mov	[esp+5Ch+Str], eax ; Size
		call	malloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_68D83D67
		mov	esi, [esp+5Ch+arg_8]
		mov	edx, eax
		test	esi, esi
		jnz	loc_68D83EC3

loc_68D83A88:				; CODE XREF: _nl_make_l10nflist+554j
		mov	ecx, [esp+5Ch+arg_10]
		jmp	short loc_68D83A92
; ---------------------------------------------------------------------------
		align 10h

loc_68D83A90:				; CODE XREF: _nl_make_l10nflist+DFj
		mov	edx, esi

loc_68D83A92:				; CODE XREF: _nl_make_l10nflist+CCj
		movzx	eax, byte ptr [ecx]
		add	ecx, 1
		lea	esi, [edx+1]
		test	al, al
		mov	[edx], al
		jnz	short loc_68D83A90
		mov	ecx, [esp+5Ch+var_20]
		mov	eax, esi
		test	ecx, ecx
		jz	short loc_68D83AC9
		mov	byte ptr [edx],	5Fh
		mov	edx, [esp+5Ch+arg_14]
		jmp	short loc_68D83AB6
; ---------------------------------------------------------------------------

loc_68D83AB4:				; CODE XREF: _nl_make_l10nflist+103j
		mov	eax, esi

loc_68D83AB6:				; CODE XREF: _nl_make_l10nflist+F2j
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		lea	esi, [eax+1]
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D83AB4
		mov	edx, eax
		mov	eax, esi

loc_68D83AC9:				; CODE XREF: _nl_make_l10nflist+E9j
		mov	ebp, [esp+5Ch+var_24]
		mov	ecx, eax
		test	ebp, ebp
		jz	short loc_68D83AF5
		mov	byte ptr [edx],	2Eh
		mov	edx, [esp+5Ch+arg_18]
		jmp	short loc_68D83AE2
; ---------------------------------------------------------------------------
		align 10h

loc_68D83AE0:				; CODE XREF: _nl_make_l10nflist+12Fj
		mov	eax, esi

loc_68D83AE2:				; CODE XREF: _nl_make_l10nflist+11Aj
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		lea	esi, [eax+1]
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D83AE0
		mov	ecx, esi
		mov	edx, eax

loc_68D83AF5:				; CODE XREF: _nl_make_l10nflist+111j
		mov	edi, [esp+5Ch+var_28]
		mov	eax, ecx
		test	edi, edi
		jz	short loc_68D83B1D
		mov	byte ptr [edx],	2Eh
		mov	edx, [esp+5Ch+arg_1C]
		jmp	short loc_68D83B0A
; ---------------------------------------------------------------------------

loc_68D83B08:				; CODE XREF: _nl_make_l10nflist+157j
		mov	ecx, esi

loc_68D83B0A:				; CODE XREF: _nl_make_l10nflist+146j
		movzx	eax, byte ptr [edx]
		add	edx, 1
		lea	esi, [ecx+1]
		test	al, al
		mov	[ecx], al
		jnz	short loc_68D83B08
		mov	eax, esi
		mov	edx, ecx

loc_68D83B1D:				; CODE XREF: _nl_make_l10nflist+13Dj
		mov	esi, [esp+5Ch+var_2C]
		mov	ecx, eax
		test	esi, esi
		jz	short loc_68D83B48
		mov	byte ptr [edx],	40h
		mov	edx, [esp+5Ch+arg_20]
		jmp	short loc_68D83B35
; ---------------------------------------------------------------------------

loc_68D83B33:				; CODE XREF: _nl_make_l10nflist+182j
		mov	eax, esi

loc_68D83B35:				; CODE XREF: _nl_make_l10nflist+171j
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		lea	esi, [eax+1]
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D83B33
		mov	ecx, esi
		mov	edx, eax

loc_68D83B48:				; CODE XREF: _nl_make_l10nflist+165j
		mov	byte ptr [edx],	2Fh
		mov	esi, [esp+5Ch+arg_24]
		xor	eax, eax

loc_68D83B54:				; CODE XREF: _nl_make_l10nflist+1A0j
		movzx	edx, byte ptr [esi+eax]
		mov	[ecx+eax], dl
		add	eax, 1
		test	dl, dl
		jnz	short loc_68D83B54
		mov	ecx, [esp+5Ch+arg_0]
		mov	esi, [ecx]
		mov	edi, ecx
		test	esi, esi
		jz	short loc_68D83B9B
		xchg	ax, ax

loc_68D83B70:				; CODE XREF: _nl_make_l10nflist+1D9j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_68D83B94
		mov	[esp+5Ch+Str2],	ebx ; Str2
		mov	[esp+5Ch+Str], eax ; Str1
		call	strcmp
		cmp	eax, 0
		jz	loc_68D83EB1
		jl	loc_68D83EA0
		lea	edi, [esi+0Ch]

loc_68D83B94:				; CODE XREF: _nl_make_l10nflist+1B4j
		mov	esi, [esi+0Ch]
		test	esi, esi
		jnz	short loc_68D83B70

loc_68D83B9B:				; CODE XREF: _nl_make_l10nflist+1ACj
		mov	ecx, [esp+5Ch+arg_28]
		test	ecx, ecx
		jz	loc_68D83EB1

loc_68D83BAA:				; CODE XREF: _nl_make_l10nflist+4EBj
		mov	edx, [esp+5Ch+arg_8]
		xor	esi, esi
		mov	[esp+5Ch+var_28], 1
		test	edx, edx
		jnz	loc_68D83DD8

loc_68D83BC0:				; CODE XREF: _nl_make_l10nflist+458j
		mov	eax, [esp+5Ch+arg_C]
		mov	edx, [esp+5Ch+arg_C]
		and	eax, 0FFFFAAAAh
		sar	eax, 1
		and	edx, 5555h
		lea	edx, [eax+edx]
		mov	eax, edx
		and	edx, 3333h
		and	eax, 0FFFFCCCCh
		sar	eax, 2
		add	eax, edx
		mov	edx, eax
		sar	edx, 4
		lea	eax, [edx+eax]
		and	eax, 0F0Fh
		mov	ecx, eax
		sar	ecx, 8
		add	ecx, eax
		mov	eax, [esp+5Ch+var_28]
		shl	eax, cl
		lea	eax, [esi+eax+5]
		shl	eax, 2
		mov	[esp+5Ch+Str], eax ; Size
		call	malloc
		test	eax, eax
		mov	esi, eax
		mov	[esp+5Ch+var_2C], eax
		jz	loc_68D83EB1
		cmp	[esp+5Ch+var_28], 1
		mov	[eax], ebx
		jbe	loc_68D83F20
		mov	ecx, eax
		mov	dword ptr [eax+4], 1
		mov	dword ptr [eax+8], 0
		mov	eax, [edi]
		mov	[ecx+0Ch], eax
		mov	[edi], ecx
		mov	edi, [esp+5Ch+arg_C]
		mov	ecx, edi

loc_68D83C4B:				; CODE XREF: _nl_make_l10nflist+58Ej
		not	ecx
		xor	eax, eax
		test	edi, edi
		mov	[esp+5Ch+var_34], ecx
		js	loc_68D83D5B
		mov	edx, [esp+5Ch+arg_4]
		mov	ebp, eax
		add	edx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_24], esi
		mov	[esp+5Ch+var_30], edx
		jmp	short loc_68D83C79
; ---------------------------------------------------------------------------
		align 10h

loc_68D83C70:				; CODE XREF: _nl_make_l10nflist+2BDj
					; _nl_make_l10nflist+2C7j ...
		sub	edi, 1
		js	loc_68D83D55

loc_68D83C79:				; CODE XREF: _nl_make_l10nflist+2ADj
		test	[esp+5Ch+var_34], edi
		jnz	short loc_68D83C70
		mov	eax, edi
		and	eax, 3
		cmp	eax, 3
		jz	short loc_68D83C70
		cmp	[esp+5Ch+var_28], 1
		jbe	loc_68D83E40
		mov	eax, [esp+5Ch+arg_8]
		xor	ebx, ebx
		mov	ecx, [esp+5Ch+var_2C]
		test	eax, eax
		lea	esi, [ecx+ebp*4+10h]
		jz	short loc_68D83C70
		test	ebx, ebx
		jz	loc_68D83D2E
		xchg	ax, ax

loc_68D83CB0:				; CODE XREF: _nl_make_l10nflist+36Cj
		cmp	ebx, [esp+5Ch+var_30]
		jnb	short loc_68D83C70
		mov	[esp+5Ch+Str], ebx ; Str
		mov	[esp+5Ch+Str2],	0 ; Val
		call	strchr
		lea	ebx, [eax+1]
		cmp	[esp+5Ch+var_30], ebx
		jbe	short loc_68D83C70

loc_68D83CCF:				; CODE XREF: _nl_make_l10nflist+372j
		test	ebx, ebx
		jz	short loc_68D83C70
		mov	[esp+5Ch+Str], ebx ; Str
		add	ebp, 1
		call	strlen
		mov	edx, [esp+5Ch+arg_20]
		mov	[esp+5Ch+Str], edi ; int
		mov	[esp+5Ch+var_48], edx ;	char *
		mov	edx, [esp+5Ch+arg_18]
		lea	ecx, [eax+1]
		mov	eax, [esp+5Ch+arg_24]
		mov	[esp+5Ch+var_50], edx ;	char *
		mov	edx, [esp+5Ch+arg_10]
		mov	[esp+5Ch+var_44], eax ;	char *
		mov	eax, [esp+5Ch+arg_1C]
		mov	[esp+5Ch+Str2],	edx ; char *
		mov	edx, ebx
		mov	[esp+5Ch+var_4C], eax ;	char *
		mov	eax, [esp+5Ch+arg_14]
		mov	[esp+5Ch+Size],	eax ; char *
		mov	eax, [esp+5Ch+arg_0]
		call	sub_68D83440
		mov	[esi], eax
		add	esi, 4
		test	ebx, ebx
		jnz	short loc_68D83CB0

loc_68D83D2E:				; CODE XREF: _nl_make_l10nflist+2E8j
		mov	ebx, [esp+5Ch+arg_4]
		jmp	short loc_68D83CCF
; ---------------------------------------------------------------------------

loc_68D83D34:				; CODE XREF: _nl_make_l10nflist+14j
		lea	edx, [eax-61h]
		cmp	dl, 19h
		ja	loc_68D83E20
		mov	ecx, [esp+5Ch+arg_10]
		cmp	byte ptr [ecx+1], 3Ah
		jnz	loc_68D839E2
		xchg	ax, ax
		jmp	loc_68D839DA
; ---------------------------------------------------------------------------

loc_68D83D55:				; CODE XREF: _nl_make_l10nflist+2B3j
		mov	esi, [esp+5Ch+var_24]
		mov	eax, ebp

loc_68D83D5B:				; CODE XREF: _nl_make_l10nflist+295j
		mov	edx, [esp+5Ch+var_2C]
		mov	dword ptr [edx+eax*4+10h], 0

loc_68D83D67:				; CODE XREF: _nl_make_l10nflist+B4j
		add	esp, 4Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D83D71:				; CODE XREF: _nl_make_l10nflist+61j
		mov	eax, [esp+5Ch+arg_1C]
		mov	[esp+5Ch+Str], eax ; Str
		call	strlen
		mov	edx, [esp+5Ch+arg_C]
		and	edx, 8
		mov	[esp+5Ch+var_2C], edx
		lea	ebp, [eax+1]
		jz	loc_68D83A3A

loc_68D83D91:				; CODE XREF: _nl_make_l10nflist+74j
		mov	ecx, [esp+5Ch+arg_20]
		mov	[esp+5Ch+Str], ecx ; Str
		call	strlen
		add	eax, 1
		mov	[esp+5Ch+var_30], eax
		jmp	loc_68D83A42
; ---------------------------------------------------------------------------
		align 10h

loc_68D83DB0:				; CODE XREF: _nl_make_l10nflist+4Ej
		mov	edx, [esp+5Ch+arg_18]
		mov	[esp+5Ch+Str], edx ; Str
		call	strlen
		lea	edi, [eax+1]
		jmp	loc_68D83A16
; ---------------------------------------------------------------------------

loc_68D83DC4:				; CODE XREF: _nl_make_l10nflist+3Bj
		mov	ecx, [esp+5Ch+arg_14]
		mov	[esp+5Ch+Str], ecx ; Str
		call	strlen
		lea	esi, [eax+1]
		jmp	loc_68D83A03
; ---------------------------------------------------------------------------

loc_68D83DD8:				; CODE XREF: _nl_make_l10nflist+1FAj
		mov	ebp, [esp+5Ch+arg_8]
		mov	esi, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_30], ebx
		xor	ebx, ebx
		mov	[esp+5Ch+var_28], 0
		xchg	ax, ax

loc_68D83DF0:				; CODE XREF: _nl_make_l10nflist+443j
		mov	[esp+5Ch+Str], esi ; Str
		add	ebx, 1
		call	strlen
		lea	esi, [esi+eax+1]
		not	eax
		add	ebp, eax
		jnz	short loc_68D83DF0
		mov	[esp+5Ch+var_28], ebx
		mov	ebx, [esp+5Ch+var_30]
		cmp	[esp+5Ch+var_28], 1
		setnbe	al
		movzx	esi, al
		jmp	loc_68D83BC0
; ---------------------------------------------------------------------------
		align 10h

loc_68D83E20:				; CODE XREF: _nl_make_l10nflist+37Aj
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_68D839E2
		mov	ecx, [esp+5Ch+arg_10]
		cmp	byte ptr [ecx+1], 3Ah
		jnz	loc_68D839E2
		jmp	loc_68D839DA
; ---------------------------------------------------------------------------
		align 10h

loc_68D83E40:				; CODE XREF: _nl_make_l10nflist+2CEj
		mov	ecx, [esp+5Ch+arg_24]
		mov	eax, [esp+5Ch+arg_20]
		mov	edx, [esp+5Ch+arg_1C]
		mov	[esp+5Ch+Str], edi ; int
		mov	[esp+5Ch+var_44], ecx ;	char *
		mov	ecx, [esp+5Ch+arg_18]
		mov	[esp+5Ch+var_48], eax ;	char *
		mov	eax, [esp+5Ch+arg_14]
		mov	[esp+5Ch+var_4C], edx ;	char *
		mov	edx, [esp+5Ch+arg_10]
		mov	[esp+5Ch+var_50], ecx ;	char *
		mov	ecx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+Size],	eax ; char *
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+Str2],	edx ; char *
		mov	edx, [esp+5Ch+arg_4]
		call	sub_68D83440
		mov	ecx, [esp+5Ch+var_2C]
		mov	[ecx+ebp*4+10h], eax
		add	ebp, 1
		jmp	loc_68D83C70
; ---------------------------------------------------------------------------
		align 10h

loc_68D83EA0:				; CODE XREF: _nl_make_l10nflist+1CBj
		mov	ecx, [esp+5Ch+arg_28]
		xor	esi, esi
		test	ecx, ecx
		jnz	loc_68D83BAA

loc_68D83EB1:				; CODE XREF: _nl_make_l10nflist+1C5j
					; _nl_make_l10nflist+1E4j ...
		mov	[esp+5Ch+Str], ebx ; Memory
		call	free
		add	esp, 4Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D83EC3:				; CODE XREF: _nl_make_l10nflist+C2j
		mov	edx, [esp+5Ch+arg_4]
		mov	edi, ebx
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+Str], ebx ; Dst
		mov	[esp+5Ch+Str2],	edx ; Src
		mov	[esp+5Ch+Size],	eax ; Size
		call	memcpy
		mov	esi, [esp+5Ch+arg_8]
		mov	[esp+5Ch+Str], edi ; Str
		call	strlen
		mov	edx, eax
		not	edx
		add	esi, edx
		jz	short loc_68D83F09

loc_68D83EF1:				; CODE XREF: _nl_make_l10nflist+547j
		add	edi, eax
		mov	byte ptr [edi],	3Bh
		add	edi, 1
		mov	[esp+5Ch+Str], edi ; Str
		call	strlen
		mov	edx, eax
		not	edx
		add	esi, edx
		jnz	short loc_68D83EF1

loc_68D83F09:				; CODE XREF: _nl_make_l10nflist+52Fj
		mov	edx, [esp+5Ch+arg_8]
		lea	edx, [ebx+edx]
		mov	byte ptr [edx-1], 2Fh
		jmp	loc_68D83A88
; ---------------------------------------------------------------------------
		align 10h

loc_68D83F20:				; CODE XREF: _nl_make_l10nflist+268j
		mov	edx, eax
		mov	eax, [esp+5Ch+arg_C]
		mov	dword ptr [edx+8], 0
		and	eax, 3
		cmp	eax, 3
		setz	al
		movzx	eax, al
		mov	[edx+4], eax
		mov	eax, [edi]
		mov	ecx, [esp+5Ch+arg_C]
		mov	[edx+0Ch], eax
		mov	[edi], edx
		mov	edi, [esp+5Ch+arg_C]
		sub	edi, 1
		jmp	loc_68D83C4B
_nl_make_l10nflist endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. _nl_explode_name

; =============== S U B	R O U T	I N E =======================================


; int __cdecl nl_explode_name(char *Str, int, int, int,	int, int)
		public _nl_explode_name
_nl_explode_name proc near		; CODE XREF: _nl_find_domain+152p

Str1		= dword	ptr -3Ch
Str2		= dword	ptr -38h
Memory		= dword	ptr -20h
Str		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_8]
		mov	ecx, [esp+3Ch+Str]
		mov	ebp, [esp+3Ch+arg_C]
		mov	edi, [esp+3Ch+arg_10]
		mov	dword ptr [eax], 0
		mov	edx, [esp+3Ch+arg_14]
		mov	eax, [esp+3Ch+arg_4]
		mov	dword ptr [ebp+0], 0
		mov	dword ptr [edi], 0
		mov	dword ptr [edx], 0
		mov	[eax], ecx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	loc_68D84108
		cmp	al, 5Fh
		jz	loc_68D84108
		cmp	al, 40h
		jz	loc_68D84108
		cmp	al, 2Eh
		jz	loc_68D84108
		mov	ebx, ecx
		nop
		jmp	short loc_68D83FD2
; ---------------------------------------------------------------------------

loc_68D83FC2:				; CODE XREF: _nl_explode_name+7Aj
		test	al, al
		jz	short loc_68D83FDC
		cmp	al, 40h
		jz	short loc_68D83FDC
		cmp	al, 2Eh
		lea	esi, [esi+0]
		jz	short loc_68D83FDC

loc_68D83FD2:				; CODE XREF: _nl_explode_name+60j
		add	ebx, 1
		movzx	eax, byte ptr [ebx]
		cmp	al, 5Fh
		jnz	short loc_68D83FC2

loc_68D83FDC:				; CODE XREF: _nl_explode_name+64j
					; _nl_explode_name+68j	...
		cmp	ecx, ebx
		mov	edx, eax
		jz	loc_68D84108
		xor	ecx, ecx
		cmp	al, 5Fh
		mov	esi, 2
		jz	loc_68D840D0

loc_68D83FF5:				; CODE XREF: _nl_explode_name+1CEj
		cmp	dl, 2Eh
		jz	short loc_68D84030
		mov	esi, ecx

loc_68D83FFC:				; CODE XREF: _nl_explode_name+E9j
					; _nl_explode_name+147j ...
		cmp	dl, 40h
		jz	loc_68D840B0

loc_68D84005:				; CODE XREF: _nl_explode_name+101j
					; _nl_explode_name+160j ...
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_68D84014
		cmp	byte ptr [eax],	0
		jnz	short loc_68D84014
		and	esi, 0FFFFFFFBh

loc_68D84014:				; CODE XREF: _nl_explode_name+AAj
					; _nl_explode_name+AFj
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_68D84022
		cmp	byte ptr [eax],	0
		jnz	short loc_68D84022
		and	esi, 0FFFFFFFDh

loc_68D84022:				; CODE XREF: _nl_explode_name+B8j
					; _nl_explode_name+BDj	...
		add	esp, 2Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D84030:				; CODE XREF: _nl_explode_name+98j
		lea	eax, [ebx+1]
		mov	byte ptr [ebx],	0
		mov	[edi], eax
		movzx	edx, byte ptr [ebx+1]
		test	dl, dl
		jz	short loc_68D84047
		cmp	dl, 40h
		mov	ebx, eax
		jnz	short loc_68D84054

loc_68D84047:				; CODE XREF: _nl_explode_name+DEj
		mov	ebx, eax
		jmp	short loc_68D83FFC
; ---------------------------------------------------------------------------
		align 10h

loc_68D84050:				; CODE XREF: _nl_explode_name+FDj
		test	dl, dl
		jz	short loc_68D8405F

loc_68D84054:				; CODE XREF: _nl_explode_name+E5j
		add	ebx, 1
		movzx	edx, byte ptr [ebx]
		cmp	dl, 40h
		jnz	short loc_68D84050

loc_68D8405F:				; CODE XREF: _nl_explode_name+F2j
		cmp	ebx, eax
		jz	short loc_68D84005
		mov	edx, ebx
		sub	edx, eax
		mov	[esp+3Ch+Str2],	edx
		mov	[esp+3Ch+Str1],	eax
		call	_nl_normalize_codeset
		mov	edx, eax
		mov	eax, [esp+3Ch+arg_14]
		test	edx, edx
		mov	[eax], edx
		jz	loc_68D84143
		mov	eax, [edi]
		mov	[esp+3Ch+Str2],	edx ; Str2
		mov	[esp+3Ch+Memory], edx
		mov	[esp+3Ch+Str1],	eax ; Str1
		call	strcmp
		mov	edx, [esp+3Ch+Memory]
		test	eax, eax
		jz	loc_68D84133
		or	esi, 1
		movzx	edx, byte ptr [ebx]
		jmp	loc_68D83FFC
; ---------------------------------------------------------------------------
		align 10h

loc_68D840B0:				; CODE XREF: _nl_explode_name+9Fj
		mov	byte ptr [ebx],	0
		mov	edx, [esp+3Ch+arg_8]
		lea	eax, [ebx+1]
		mov	[edx], eax
		cmp	byte ptr [ebx+1], 0
		jz	loc_68D84005
		or	esi, 8
		jmp	loc_68D84005
; ---------------------------------------------------------------------------
		align 10h

loc_68D840D0:				; CODE XREF: _nl_explode_name+8Fj
		mov	byte ptr [ebx],	0
		add	ebx, 1
		mov	[ebp+0], ebx
		movzx	eax, byte ptr [ebx]
		test	al, al
		mov	edx, eax
		jz	short loc_68D84124
		cmp	al, 2Eh
		jnz	short loc_68D840F8
		jmp	short loc_68D84124
; ---------------------------------------------------------------------------

loc_68D840E8:				; CODE XREF: _nl_explode_name+19Aj
		add	ebx, 1
		movzx	eax, byte ptr [ebx]
		cmp	al, 2Eh
		mov	edx, eax
		jz	short loc_68D84124
		test	al, al
		jz	short loc_68D84124

loc_68D840F8:				; CODE XREF: _nl_explode_name+184j
		cmp	al, 40h
		jnz	short loc_68D840E8
		mov	edx, eax
		mov	esi, 4
		jmp	loc_68D83FFC
; ---------------------------------------------------------------------------

loc_68D84108:				; CODE XREF: _nl_explode_name+3Fj
					; _nl_explode_name+47j	...
		mov	[esp+3Ch+Str2],	0 ; Val
		xor	esi, esi
		mov	[esp+3Ch+Str1],	ecx ; Str
		call	strchr
		mov	ebx, eax
		movzx	edx, byte ptr [eax]
		jmp	loc_68D83FFC
; ---------------------------------------------------------------------------

loc_68D84124:				; CODE XREF: _nl_explode_name+180j
					; _nl_explode_name+186j ...
		mov	esi, 6
		mov	ecx, 4
		jmp	loc_68D83FF5
; ---------------------------------------------------------------------------

loc_68D84133:				; CODE XREF: _nl_explode_name+13Bj
		mov	[esp+3Ch+Str1],	edx ; Memory
		call	free
		movzx	edx, byte ptr [ebx]
		jmp	loc_68D83FFC
; ---------------------------------------------------------------------------

loc_68D84143:				; CODE XREF: _nl_explode_name+11Dj
		or	esi, 0FFFFFFFFh
		jmp	loc_68D84022
_nl_explode_name endp

; ---------------------------------------------------------------------------
		align 10h

loc_68D84150:				; DATA XREF: libintl_dcigettext+2F5o
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+24h]
		mov	esi, [esp+20h]
		mov	edx, [ebx+0Ch]
		test	edx, edx
		jz	short loc_68D841A6
		lea	edx, [ebx+18h]

loc_68D84167:				; CODE XREF: .text:68D841A9j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_68D841A1
		lea	eax, [esi+18h]

loc_68D84171:				; CODE XREF: .text:68D841A4j
		mov	[esp+4], edx
		mov	[esp], eax
		call	strcmp
		test	eax, eax
		jnz	short loc_68D8419B
		mov	eax, [ebx]
		mov	[esp+4], eax
		mov	eax, [esi]
		mov	[esp], eax
		call	strcmp
		test	eax, eax
		jnz	short loc_68D8419B
		mov	eax, [esi+4]
		sub	eax, [ebx+4]

loc_68D8419B:				; CODE XREF: .text:68D8417Fj
					; .text:68D84193j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68D841A1:				; CODE XREF: .text:68D8416Cj
		mov	eax, [esi+18h]
		jmp	short loc_68D84171
; ---------------------------------------------------------------------------

loc_68D841A6:				; CODE XREF: .text:68D84162j
		mov	edx, [ebx+18h]
		jmp	short loc_68D84167
; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. _nl_find_msg

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl nl_find_msg(int, int, char *Str1,	int, int)
		public _nl_find_msg
_nl_find_msg	proc near		; CODE XREF: _nl_load_domain+566p
					; _nl_find_msg+669p ...

Str		= dword	ptr -78h
Str2		= dword	ptr -74h
Size		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_55		= byte ptr -55h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
Memory		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
Src		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str1		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+4]
		test	edx, edx
		jle	loc_68D845C4

loc_68D841C7:				; CODE XREF: _nl_find_msg+423j
		mov	ecx, [ebp+arg_0]
		mov	ebx, [ecx+8]
		test	ebx, ebx
		jz	loc_68D84342
		mov	eax, [ebx+14h]
		xor	edx, edx
		mov	[ebp+var_34], eax
		mov	edi, eax
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	loc_68D84498
		mov	edx, [ebp+Str1]
		mov	[esp+78h+Str], edx ; Str
		call	strlen
		mov	ecx, [ebp+Str1]
		mov	[ebp+var_3C], eax
		mov	[esp+78h+Str], ecx
		call	libintl_hash_string
		mov	edi, [ebx+2Ch]
		xor	edx, edx
		mov	ecx, eax
		div	edi
		lea	eax, [edi-2]
		mov	[ebp+var_2C], eax
		mov	eax, ecx
		mov	esi, edx
		xor	edx, edx
		div	[ebp+var_2C]
		mov	eax, edi
		mov	ecx, edx
		add	ecx, 1
		mov	[ebp+var_48], ecx
		mov	edx, [ebp+var_48]
		mov	ecx, [ebx+34h]
		sub	eax, [ebp+var_48]
		sub	edx, edi
		mov	[ebp+var_30], ecx
		mov	[ebp+var_44], eax
		mov	[ebp+Memory], edx
		lea	esi, [esi+0]

loc_68D84240:				; CODE XREF: _nl_find_msg+2C3j
		mov	edi, [ebp+var_30]
		test	edi, edi
		jz	loc_68D84334

loc_68D8424B:				; CODE XREF: _nl_find_msg+17Ej
		mov	eax, [ebx+30h]
		mov	eax, [eax+esi*4]
		mov	edi, eax
		mov	edx, eax
		shl	edx, 18h
		shr	edi, 18h
		or	edi, edx
		mov	edx, eax
		and	edx, 0FF00h
		shl	edx, 8
		shr	eax, 8
		or	edi, edx
		and	eax, 0FF00h
		or	edi, eax
		test	edi, edi
		jz	loc_68D84342

loc_68D8427C:				; CODE XREF: _nl_find_msg+18Cj
		sub	edi, 1
		cmp	[ebp+var_34], edi
		jbe	loc_68D84354
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		mov	[ebp+Src], ecx
		jz	loc_68D84478
		lea	edx, ds:0[edi*8]
		add	edx, [ebx+18h]
		mov	eax, [edx]
		mov	ecx, [edx]
		shr	eax, 18h
		shl	ecx, 18h
		or	eax, ecx
		mov	ecx, [edx]
		and	ecx, 0FF00h
		shl	ecx, 8
		or	eax, ecx
		mov	ecx, [edx]
		shr	ecx, 8
		and	ecx, 0FF00h
		or	eax, ecx

loc_68D842C6:				; CODE XREF: _nl_find_msg+2D4j
		cmp	eax, [ebp+var_3C]
		jb	short loc_68D8431D
		mov	ecx, [ebp+Src]
		mov	eax, [ebx]
		test	ecx, ecx
		mov	[ebp+var_2C], eax
		jz	loc_68D84490
		mov	edx, [edx+4]
		mov	eax, edx
		mov	ecx, edx
		shl	ecx, 18h
		shr	eax, 18h
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	edx, 8
		or	eax, ecx
		and	edx, 0FF00h
		or	eax, edx

loc_68D84302:				; CODE XREF: _nl_find_msg+2E3j
		add	eax, [ebp+var_2C]
		mov	[esp+78h+Str2],	eax ; Str2
		mov	edx, [ebp+Str1]
		mov	[esp+78h+Str], edx ; Str1
		call	strcmp
		test	eax, eax
		setz	al
		test	al, al
		jnz	short loc_68D84381

loc_68D8431D:				; CODE XREF: _nl_find_msg+119j
					; _nl_find_msg+1B4j ...
		cmp	esi, [ebp+var_44]
		jb	loc_68D84470
		mov	edi, [ebp+var_30]
		add	esi, [ebp+Memory]
		test	edi, edi
		jnz	loc_68D8424B

loc_68D84334:				; CODE XREF: _nl_find_msg+95j
		mov	eax, [ebx+30h]
		mov	edi, [eax+esi*4]
		test	edi, edi
		jnz	loc_68D8427C

loc_68D84342:				; CODE XREF: _nl_find_msg+1Fj
					; _nl_find_msg+C6j ...
		mov	[ebp+var_2C], 0

loc_68D84349:				; CODE XREF: _nl_find_msg+595j
					; _nl_find_msg+5DFj ...
		mov	eax, [ebp+var_2C]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D84354:				; CODE XREF: _nl_find_msg+D2j
		mov	eax, edi
		mov	ecx, [ebp+var_3C]
		sub	eax, [ebp+var_34]
		shl	eax, 3
		add	eax, [ebx+24h]
		cmp	ecx, [eax]
		jnb	short loc_68D8431D
		mov	eax, [eax+4]
		mov	[esp+78h+Str2],	eax ; Str2
		mov	eax, [ebp+Str1]
		mov	[esp+78h+Str], eax ; Str1
		call	strcmp
		test	eax, eax
		setz	al
		test	al, al
		jz	short loc_68D8431D

loc_68D84381:				; CODE XREF: _nl_find_msg+16Bj
		mov	[ebp+var_44], edi

loc_68D84384:				; CODE XREF: _nl_find_msg+4B4j
		mov	ecx, [ebp+var_34]
		cmp	[ebp+var_44], ecx
		jb	loc_68D84552
		mov	eax, [ebp+var_44]
		sub	eax, [ebp+var_34]
		shl	eax, 3
		add	eax, [ebx+28h]
		mov	edx, [eax+4]
		mov	eax, [eax]
		mov	[ebp+var_2C], edx
		mov	[ebp+var_30], eax

loc_68D843A7:				; CODE XREF: _nl_find_msg+40Fj
					; _nl_find_msg+43Fj
		mov	edi, [ebp+arg_C]
		test	edi, edi
		jz	loc_68D8445C
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jz	loc_68D845F4
		mov	ecx, [ebp+arg_4]
		mov	ecx, [ecx+8]
		test	ecx, ecx
		mov	[ebp+Src], ecx
		jz	loc_68D845F4

loc_68D843CE:				; CODE XREF: _nl_find_msg+45Cj
					; _nl_find_msg+46Aj
		mov	edx, [ebx+3Ch]
		test	edx, edx
		mov	[ebp+var_3C], edx
		jz	loc_68D84794
		mov	ecx, [ebx+38h]
		lea	eax, [edx+edx*2]
		mov	edi, edx
		mov	[ebp+var_50], ebx
		lea	eax, [ecx+eax*4-0Ch]
		mov	[ebp+Memory], ecx
		mov	esi, eax
		mov	[ebp+var_48], eax
		jmp	short loc_68D84400
; ---------------------------------------------------------------------------

loc_68D843F5:				; CODE XREF: _nl_find_msg+266j
		sub	esi, 0Ch
		test	edi, edi
		jz	loc_68D84620

loc_68D84400:				; CODE XREF: _nl_find_msg+243j
		mov	eax, [esi]
		sub	edi, 1
		mov	edx, [ebp+Src]
		mov	[esp+78h+Str], eax ; Str1
		mov	[esp+78h+Str2],	edx ; Str2
		call	strcmp
		test	eax, eax
		jnz	short loc_68D843F5
		test	esi, esi
		mov	ebx, [ebp+var_50]
		mov	[ebp+var_40], esi
		jz	loc_68D84623

loc_68D84426:				; CODE XREF: _nl_find_msg+4A9j
					; _nl_find_msg+6EAj
		mov	edx, [ebp+var_40]
		cmp	dword ptr [edx+4], 0FFFFFFFFh
		jz	short loc_68D8445C
		mov	eax, [edx+8]
		test	eax, eax
		jz	loc_68D84923
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D8473E
		mov	ebx, [ebp+var_44]
		mov	eax, [eax+ebx*4]
		test	eax, eax
		jz	loc_68D84669

loc_68D84451:				; CODE XREF: _nl_find_msg+734j
		lea	edx, [eax+4]
		mov	eax, [eax]
		mov	[ebp+var_2C], edx
		mov	[ebp+var_30], eax

loc_68D8445C:				; CODE XREF: _nl_find_msg+1FCj
					; _nl_find_msg+27Dj
		mov	eax, [ebp+arg_10]
		mov	ecx, [ebp+var_30]
		mov	[eax], ecx
		mov	eax, [ebp+var_2C]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D84470:				; CODE XREF: _nl_find_msg+170j
		add	esi, [ebp+var_48]
		jmp	loc_68D84240
; ---------------------------------------------------------------------------

loc_68D84478:				; CODE XREF: _nl_find_msg+E0j
		lea	edx, ds:0[edi*8]
		add	edx, [ebx+18h]
		mov	eax, [edx]
		jmp	loc_68D842C6
; ---------------------------------------------------------------------------
		align 10h

loc_68D84490:				; CODE XREF: _nl_find_msg+125j
		mov	eax, [edx+4]
		jmp	loc_68D84302
; ---------------------------------------------------------------------------

loc_68D84498:				; CODE XREF: _nl_find_msg+34j
		mov	esi, edx
		mov	[ebp+var_3C], ebx

loc_68D8449D:				; CODE XREF: _nl_find_msg+349j
		cmp	esi, edi
		jnb	loc_68D84342
		mov	edx, [ebp+var_3C]
		mov	ebx, [ebp+var_3C]
		mov	ecx, [ebp+var_3C]
		mov	edx, [edx]
		mov	ecx, [ecx+18h]
		mov	[ebp+var_30], edx
		mov	edx, [ebx+0Ch]
		mov	[ebp+var_2C], ecx
		test	edx, edx
		jnz	short loc_68D8450A
		jmp	short loc_68D844CC
; ---------------------------------------------------------------------------

loc_68D844C2:				; CODE XREF: _nl_find_msg+33Cj
		cmp	ebx, esi
		mov	edi, ebx
		jbe	loc_68D84342

loc_68D844CC:				; CODE XREF: _nl_find_msg+310j
		mov	edx, [ebp+var_2C]
		lea	ebx, [edi+esi]
		mov	eax, [ebp+var_30]
		shr	ebx, 1
		add	eax, [edx+ebx*8+4]
		mov	[esp+78h+Str2],	eax ; Str2
		mov	ecx, [ebp+Str1]
		mov	[esp+78h+Str], ecx ; Str1
		call	strcmp
		test	eax, eax
		js	short loc_68D844C2

loc_68D844EE:				; CODE XREF: _nl_find_msg+3A0j
		test	eax, eax
		jz	loc_68D8465E
		lea	esi, [ebx+1]
		jmp	short loc_68D8449D
; ---------------------------------------------------------------------------
		align 10h

loc_68D84500:				; CODE XREF: _nl_find_msg+39Ej
		cmp	ebx, esi
		mov	edi, ebx
		jbe	loc_68D84342

loc_68D8450A:				; CODE XREF: _nl_find_msg+30Ej
		mov	eax, [ebp+var_2C]
		lea	ebx, [edi+esi]
		shr	ebx, 1
		mov	edx, [eax+ebx*8+4]
		mov	eax, edx
		mov	ecx, edx
		shl	ecx, 18h
		shr	eax, 18h
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	edx, 8
		or	eax, ecx
		and	edx, 0FF00h
		or	eax, edx
		add	eax, [ebp+var_30]
		mov	[esp+78h+Str2],	eax ; Str2
		mov	edx, [ebp+Str1]
		mov	[esp+78h+Str], edx ; Str1
		call	strcmp
		test	eax, eax
		js	short loc_68D84500
		jmp	short loc_68D844EE
; ---------------------------------------------------------------------------

loc_68D84552:				; CODE XREF: _nl_find_msg+1DAj
		mov	eax, [ebx+0Ch]
		mov	ecx, [ebx]
		test	eax, eax
		jz	short loc_68D845D8
		mov	edx, [ebp+var_44]
		shl	edx, 3
		add	edx, [ebx+1Ch]
		mov	edi, [edx+4]
		mov	edx, [edx]
		mov	eax, edi
		mov	esi, edi
		shl	esi, 18h
		shr	eax, 18h
		or	eax, esi
		mov	esi, edi
		and	esi, 0FF00h
		shl	esi, 8
		or	eax, esi
		mov	esi, edi
		shr	esi, 8
		and	esi, 0FF00h
		or	eax, esi
		lea	eax, [ecx+eax]
		mov	ecx, edx
		mov	[ebp+var_2C], eax
		mov	eax, edx
		shl	ecx, 18h
		shr	eax, 18h
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 0FF00h
		shl	ecx, 8
		shr	edx, 8
		or	eax, ecx
		and	edx, 0FF00h
		or	eax, edx
		add	eax, 1
		mov	[ebp+var_30], eax
		jmp	loc_68D843A7
; ---------------------------------------------------------------------------

loc_68D845C4:				; CODE XREF: _nl_find_msg+11j
		mov	edx, [ebp+arg_4]
		mov	[esp+78h+Str], eax
		mov	[esp+78h+Str2],	edx
		call	_nl_load_domain
		jmp	loc_68D841C7
; ---------------------------------------------------------------------------

loc_68D845D8:				; CODE XREF: _nl_find_msg+3A9j
		mov	eax, [ebp+var_44]
		shl	eax, 3
		add	eax, [ebx+1Ch]
		add	ecx, [eax+4]
		mov	eax, [eax]
		mov	[ebp+var_2C], ecx
		add	eax, 1
		mov	[ebp+var_30], eax
		jmp	loc_68D843A7
; ---------------------------------------------------------------------------

loc_68D845F4:				; CODE XREF: _nl_find_msg+207j
					; _nl_find_msg+218j
		mov	ecx, ds:dword_68D9602C
		test	ecx, ecx
		jz	loc_68D8474A

loc_68D84602:				; CODE XREF: _nl_find_msg+5BFj
		mov	eax, ds:dword_68D96030
		test	eax, eax
		mov	[ebp+Src], eax
		jnz	loc_68D843CE
		call	locale_charset
		mov	[ebp+Src], eax
		jmp	loc_68D843CE
; ---------------------------------------------------------------------------
		align 10h

loc_68D84620:				; CODE XREF: _nl_find_msg+24Aj
		mov	ebx, [ebp+var_50]

loc_68D84623:				; CODE XREF: _nl_find_msg+270j
		mov	edi, [ebp+var_48]
		mov	esi, [ebp+var_3C]
		mov	[ebp+var_48], ebx
		jmp	short loc_68D8463B
; ---------------------------------------------------------------------------
		align 10h

loc_68D84630:				; CODE XREF: _nl_find_msg+4A1j
		sub	edi, 0Ch
		test	esi, esi
		jz	loc_68D8489F

loc_68D8463B:				; CODE XREF: _nl_find_msg+47Cj
		mov	eax, [edi]
		sub	esi, 1
		mov	ecx, [ebp+Src]
		mov	[esp+78h+Str], eax ; Str1
		mov	[esp+78h+Str2],	ecx ; Str2
		call	strcmp
		test	eax, eax
		jnz	short loc_68D84630
		mov	[ebp+var_40], edi
		mov	ebx, [ebp+var_48]
		jmp	loc_68D84426
; ---------------------------------------------------------------------------

loc_68D8465E:				; CODE XREF: _nl_find_msg+340j
		mov	[ebp+var_44], ebx
		mov	ebx, [ebp+var_3C]
		jmp	loc_68D84384
; ---------------------------------------------------------------------------

loc_68D84669:				; CODE XREF: _nl_find_msg+29Bj
					; _nl_find_msg+791j
		mov	edx, ds:dword_68D96028
		xor	esi, esi
		xor	ebx, ebx
		lea	edi, [ebp+var_28]
		add	edx, 4
		jmp	short loc_68D846B4
; ---------------------------------------------------------------------------
		align 10h

loc_68D84680:				; CODE XREF: _nl_find_msg+51Bj
		test	ebx, ebx
		jz	loc_68D8471E

loc_68D84688:				; CODE XREF: _nl_find_msg+568j
		add	ebx, 1
		imul	eax, ebx, 0FF0h
		mov	ds:dword_68D96024, eax
		mov	[esp+78h+Str2],	eax ; NewSize
		mov	[esp+78h+Str], esi ; Memory
		call	realloc

loc_68D846A2:				; CODE XREF: _nl_find_msg+589j
		test	eax, eax
		jz	loc_68D84774
		mov	ds:dword_68D96028, eax
		lea	edx, [eax+4]
		mov	esi, eax

loc_68D846B4:				; CODE XREF: _nl_find_msg+4C9j
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_30]
		mov	[ebp+var_24], edx
		mov	[ebp+var_1C], eax
		mov	eax, ds:dword_68D96024
		mov	[ebp+var_20], ecx
		cmp	eax, 3
		jbe	short loc_68D84680
		sub	eax, 4
		mov	[ebp+var_28], eax
		lea	edx, [ebp+var_20]
		lea	eax, [ebp+var_24]
		lea	ecx, [ebp+var_1C]
		mov	[esp+78h+var_68], edi
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+Size],	edx
		mov	[esp+78h+Str2],	ecx
		mov	edx, [ebp+var_40]
		mov	eax, [edx+4]
		mov	[esp+78h+Str], eax
		call	sub_68D8C0F0
		cmp	eax, 0FFFFFFFFh
		jnz	loc_68D848A7
		call	ds:_errno
		cmp	dword ptr [eax], 7
		lea	esi, [esi+0]
		jnz	loc_68D84342
		test	ebx, ebx
		jnz	loc_68D84688

loc_68D8471E:				; CODE XREF: _nl_find_msg+4D2j
		mov	ds:dword_68D96024, 0FF0h
		mov	ebx, 1
		mov	[esp+78h+Str], 0FF0h ; Size
		call	malloc
		jmp	loc_68D846A2
; ---------------------------------------------------------------------------

loc_68D8473E:				; CODE XREF: _nl_find_msg+28Dj
					; _nl_find_msg+610j ...
		mov	[ebp+var_2C], 0FFFFFFFFh
		jmp	loc_68D84349
; ---------------------------------------------------------------------------

loc_68D8474A:				; CODE XREF: _nl_find_msg+44Cj
		mov	[esp+78h+Str], offset VarName ;	"OUTPUT_CHARSET"
		call	getenv
		test	eax, eax
		mov	esi, eax
		jz	short loc_68D84765
		cmp	byte ptr [eax],	0
		jnz	loc_68D848E9

loc_68D84765:				; CODE XREF: _nl_find_msg+5AAj
					; _nl_find_msg+76Ej
		mov	ds:dword_68D9602C, 1
		jmp	loc_68D84602
; ---------------------------------------------------------------------------

loc_68D84774:				; CODE XREF: _nl_find_msg+4F4j
		mov	ds:dword_68D96028, 0
		mov	ds:dword_68D96024, 0
		mov	[ebp+var_2C], 0FFFFFFFFh
		jmp	loc_68D84349
; ---------------------------------------------------------------------------

loc_68D84794:				; CODE XREF: _nl_find_msg+226j
		mov	eax, [ebx+38h]
		mov	[ebp+Memory], eax

loc_68D8479A:				; CODE XREF: _nl_find_msg+6F2j
		cmp	[ebp+Memory], 0
		jz	loc_68D8495A
		mov	eax, [ebp+var_3C]
		add	eax, 1
		imul	eax, 0Ch
		mov	[esp+78h+Str2],	eax ; NewSize
		mov	edx, [ebp+Memory]
		mov	[esp+78h+Str], edx ; Memory
		call	realloc
		mov	esi, eax

loc_68D847BE:				; CODE XREF: _nl_find_msg+7BDj
		test	esi, esi
		jz	loc_68D8473E
		mov	ecx, [ebp+Src]
		mov	[ebx+38h], esi
		mov	[esp+78h+Str], ecx ; Src
		call	_strdup
		test	eax, eax
		mov	[ebp+Src], eax
		jz	loc_68D8473E
		imul	eax, [ebp+var_3C], 0Ch
		mov	edx, [ebp+Src]
		lea	eax, [esi+eax]
		mov	[ebp+var_40], eax
		mov	[eax], edx
		mov	dword ptr [eax+4], 0FFFFFFFFh
		lea	eax, [ebp+var_20]
		mov	[esp+78h+var_68], eax ;	int
		mov	[esp+78h+var_6C], 0 ; int
		mov	[esp+78h+Size],	offset byte_68D91067 ; Str1
		mov	ecx, [ebp+arg_4]
		mov	[esp+78h+Str2],	ecx ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+Str], eax ; int
		call	_nl_find_msg
		test	eax, eax
		jz	short loc_68D8488C
		mov	[esp+78h+Str2],	offset SubStr ;	"charset="
		mov	[esp+78h+Str], eax ; Str
		call	strstr
		test	eax, eax
		jz	short loc_68D8488C
		lea	edx, [eax+8]
		mov	[esp+78h+Str2],	offset Control ; " \t\n"
		mov	[esp+78h+Str], edx ; Str
		mov	[ebp+var_54], edx
		call	strcspn
		mov	edi, eax
		lea	eax, [eax+1Fh]
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		mov	[esp+78h+Size],	edi ; Size
		mov	edx, [ebp+var_54]
		lea	esi, [esp+78h+var_55]
		and	esi, 0FFFFFFF0h
		mov	[esp+78h+Str], esi ; Dst
		mov	[esp+78h+Str2],	edx ; Src
		call	memcpy
		mov	byte ptr [esi+edi], 0
		mov	[esp+78h+Str2],	esi
		mov	edx, [ebp+Src]
		mov	[esp+78h+Str], edx
		call	sub_68D8DA50
		mov	ecx, [ebp+var_40]
		mov	[ecx+4], eax

loc_68D8488C:				; CODE XREF: _nl_find_msg+670j
					; _nl_find_msg+684j
		mov	eax, [ebp+var_40]
		add	dword ptr [ebx+3Ch], 1
		mov	dword ptr [eax+8], 0
		jmp	loc_68D84426
; ---------------------------------------------------------------------------

loc_68D8489F:				; CODE XREF: _nl_find_msg+485j
		mov	ebx, [ebp+var_48]
		jmp	loc_68D8479A
; ---------------------------------------------------------------------------

loc_68D848A7:				; CODE XREF: _nl_find_msg+54Dj
		mov	ecx, [ebp+var_24]
		mov	eax, ds:dword_68D96028
		mov	ebx, [ebp+var_40]
		mov	edx, ecx
		sub	edx, eax
		sub	edx, 4
		mov	[eax], edx
		mov	edx, [ebx+8]
		mov	ebx, [ebp+var_44]
		mov	[edx+ebx*4], eax
		mov	edx, eax
		sub	edx, ecx
		add	edx, ds:dword_68D96024
		mov	ebx, edx
		and	edx, 0FFFFFFFCh
		and	ebx, 3
		add	ecx, ebx
		mov	ds:dword_68D96028, ecx
		mov	ds:dword_68D96024, edx
		jmp	loc_68D84451
; ---------------------------------------------------------------------------

loc_68D848E9:				; CODE XREF: _nl_find_msg+5AFj
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		mov	[esp+78h+Str], ecx ; Size
		mov	[ebp+var_54], ecx
		call	malloc
		mov	ecx, [ebp+var_54]
		test	eax, eax
		mov	edi, eax
		jz	short loc_68D84918
		mov	[esp+78h+Size],	ecx ; Size
		mov	[esp+78h+Str2],	esi ; Src
		mov	[esp+78h+Str], eax ; Dst
		call	memcpy

loc_68D84918:				; CODE XREF: _nl_find_msg+756j
		mov	ds:dword_68D96030, edi
		jmp	loc_68D84765
; ---------------------------------------------------------------------------

loc_68D84923:				; CODE XREF: _nl_find_msg+284j
		mov	[esp+78h+Str2],	4 ; SizeOfElements
		mov	eax, [ebp+var_34]
		add	eax, [ebx+20h]
		mov	[esp+78h+Str], eax ; NumOfElements
		call	calloc
		mov	ecx, [ebp+var_40]
		test	eax, eax
		mov	[ecx+8], eax
		jnz	loc_68D84669
		mov	dword ptr [ecx+8], 0FFFFFFFFh
		mov	[ebp+var_2C], 0FFFFFFFFh
		jmp	loc_68D84349
; ---------------------------------------------------------------------------

loc_68D8495A:				; CODE XREF: _nl_find_msg+5EEj
		mov	eax, [ebp+var_3C]
		add	eax, 1
		imul	eax, 0Ch
		mov	[esp+78h+Str], eax ; Size
		call	malloc
		mov	esi, eax
		jmp	loc_68D847BE
_nl_find_msg	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D84980	proc near		; CODE XREF: sub_68D84980+55p
					; sub_68D84980+72p ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_C], esi
		mov	esi, edx
		mov	[esp+2Ch+var_8], edi
		mov	[esp+2Ch+var_4], ebp
		mov	eax, [ebx]
		cmp	eax, 1
		jz	short loc_68D84A1D

loc_68D8499E:				; CODE XREF: sub_68D84980+9Bj
		jle	loc_68D84A40
		cmp	eax, 2
		jz	short loc_68D849D0
		cmp	eax, 3
		lea	esi, [esi+0]
		jz	short loc_68D84A01

loc_68D849B2:				; CODE XREF: sub_68D84980+6Bj
					; sub_68D84980+C2j ...
		xor	esi, esi	; jumptable 68D84A82 default case

loc_68D849B4:				; CODE XREF: sub_68D84980+7Fj
					; sub_68D84980+AFj ...
		mov	eax, esi
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D849D0:				; CODE XREF: sub_68D84980+27j
		mov	eax, [ebx+8]
		mov	edx, esi
		call	sub_68D84980
		mov	edi, eax
		mov	eax, [ebx+4]
		cmp	eax, 0Fh
		jz	short loc_68D84A31
		cmp	eax, 0Eh
		jnz	short loc_68D84A67
		test	edi, edi
		jz	short loc_68D849B2 ; jumptable 68D84A82	default	case

loc_68D849ED:				; CODE XREF: sub_68D84980+B3j
		mov	eax, [ebx+0Ch]
		mov	edx, esi
		call	sub_68D84980
		test	eax, eax
		setnz	al
		movzx	esi, al
		jmp	short loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84A01:				; CODE XREF: sub_68D84980+30j
		mov	eax, [ebx+8]
		mov	edx, esi
		call	sub_68D84980
		cmp	eax, 1
		sbb	eax, eax
		not	eax
		mov	ebx, [ebx+eax*4+10h]
		mov	eax, [ebx]
		cmp	eax, 1
		jnz	short loc_68D8499E

loc_68D84A1D:				; CODE XREF: sub_68D84980+1Cj
		mov	eax, [ebx+8]
		mov	edx, esi
		call	sub_68D84980
		test	eax, eax
		setz	al
		movzx	esi, al
		jmp	short loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84A31:				; CODE XREF: sub_68D84980+62j
		test	edi, edi
		jz	short loc_68D849ED
		mov	esi, 1
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------
		align 10h

loc_68D84A40:				; CODE XREF: sub_68D84980:loc_68D8499Ej
		test	eax, eax
		jnz	loc_68D849B2	; jumptable 68D84A82 default case
		mov	eax, [ebx+4]
		test	eax, eax
		lea	esi, [esi+0]
		jz	loc_68D849B4
		cmp	eax, 1
		jnz	loc_68D849B2	; jumptable 68D84A82 default case
		mov	esi, [ebx+8]
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84A67:				; CODE XREF: sub_68D84980+67j
		mov	eax, [ebx+0Ch]
		mov	edx, esi
		call	sub_68D84980
		mov	ebp, eax
		mov	eax, [ebx+4]
		sub	eax, 3		; switch 11 cases
		cmp	eax, 0Ah
		ja	loc_68D849B2	; jumptable 68D84A82 default case
		jmp	ds:off_68D91078[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D84A89:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		cmp	edi, ebp	; jumptable 68D84A82 case 12
		setz	al
		movzx	esi, al
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84A96:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		cmp	edi, ebp	; jumptable 68D84A82 case 11
		setnb	al
		movzx	esi, al
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84AA3:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		cmp	edi, ebp	; jumptable 68D84A82 case 10
		setbe	al
		movzx	esi, al
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84AB0:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		cmp	edi, ebp	; jumptable 68D84A82 case 9
		setnbe	al
		movzx	esi, al
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84ABD:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		cmp	edi, ebp	; jumptable 68D84A82 case 8
		setb	al
		movzx	esi, al
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84ACA:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		mov	esi, edi	; jumptable 68D84A82 case 7
		sub	esi, ebp
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84AD3:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		lea	esi, [ebp+edi+0] ; jumptable 68D84A82 case 6
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84ADC:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		test	ebp, ebp	; jumptable 68D84A82 case 5
		xchg	ax, ax
		jnz	short loc_68D84AEE
		mov	[esp+2Ch+var_2C], 8
		call	raise

loc_68D84AEE:				; CODE XREF: sub_68D84980+160j
		mov	eax, edi
		xor	edx, edx
		div	ebp
		mov	esi, edx
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84AFB:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		test	ebp, ebp	; jumptable 68D84A82 case 4
		jnz	short loc_68D84B0B
		mov	[esp+2Ch+var_2C], 8
		call	raise

loc_68D84B0B:				; CODE XREF: sub_68D84980+17Dj
		mov	eax, edi
		xor	edx, edx
		div	ebp
		mov	esi, eax
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84B18:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		mov	esi, ebp	; jumptable 68D84A82 case 3
		imul	esi, edi
		jmp	loc_68D849B4
; ---------------------------------------------------------------------------

loc_68D84B22:				; CODE XREF: sub_68D84980+102j
					; DATA XREF: .rdata:off_68D91078o
		cmp	edi, ebp	; jumptable 68D84A82 case 13
		setnz	al
		movzx	esi, al
		jmp	loc_68D849B4
sub_68D84980	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. libintl_dcigettext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl libintl_dcigettext(char *Str, char *, char *, int, int, int)
		public libintl_dcigettext
libintl_dcigettext proc	near		; CODE XREF: libintl_dcgettext+32p
					; libintl_dcngettext+32p

Str1		= dword	ptr -78h
Str2		= dword	ptr -74h
Size		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jz	loc_68D84E65
		mov	eax, ds:_errno
		mov	[ebp+var_2C], eax
		call	eax ; _errno
		mov	eax, [eax]
		mov	[ebp+var_54], eax
		mov	eax, [ebp+Str]
		test	eax, eax
		jz	loc_68D85174

loc_68D84B60:				; CODE XREF: libintl_dcigettext+64Dj
		mov	edi, ds:dword_68D96038
		test	edi, edi
		jz	loc_68D84E6D

loc_68D84B6E:				; CODE XREF: libintl_dcigettext+347j
		mov	ecx, ds:libintl_nl_domain_bindings
		test	ecx, ecx
		mov	[ebp+var_38], ecx
		jz	loc_68D850CD
		mov	ebx, ecx
		mov	esi, [ebp+Str]
		jmp	short loc_68D84B96
; ---------------------------------------------------------------------------

loc_68D84B86:				; CODE XREF: libintl_dcigettext+78j
		jl	loc_68D850B7
		mov	ebx, [ebx]
		test	ebx, ebx
		jz	loc_68D850CA

loc_68D84B96:				; CODE XREF: libintl_dcigettext+54j
		lea	eax, [ebx+0Ch]
		mov	[esp+78h+Str2],	eax ; Str2
		mov	[esp+78h+Str1],	esi ; Str1
		call	strcmp
		cmp	eax, 0
		jnz	short loc_68D84B86
		test	ebx, ebx
		mov	[ebp+var_38], ebx
		jz	loc_68D850CD
		mov	eax, [ebx+4]
		mov	[ebp+var_40], eax
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jz	short loc_68D84BD0
		cmp	al, 2Fh
		jnz	loc_68D84E7C
		lea	esi, [esi+0]

loc_68D84BD0:				; CODE XREF: libintl_dcigettext+90j
					; libintl_dcigettext+362j ...
		cmp	[ebp+arg_14], 3
		mov	edx, offset aLc_monetary ; "LC_MONETARY"
		jz	short loc_68D84BF7
		jg	loc_68D85081
		cmp	[ebp+arg_14], 1
		mov	edx, offset aLc_collate	; "LC_COLLATE"
		jz	short loc_68D84BF7
		mov	edx, offset aLc_ctype ;	"LC_CTYPE"
		jle	loc_68D851C2

loc_68D84BF7:				; CODE XREF: libintl_dcigettext+A9j
					; libintl_dcigettext+BAj ...
		mov	[esp+78h+Str2],	edx ; char *
		mov	ecx, [ebp+arg_14]
		mov	[esp+78h+Str1],	ecx ; int
		mov	[ebp+var_58], edx
		call	_nl_locale_name_posix
		mov	edx, [ebp+var_58]
		mov	[ebp+var_3C], 0
		test	eax, eax
		mov	[ebp+var_34], eax
		jz	loc_68D851AB

loc_68D84C1E:				; CODE XREF: libintl_dcigettext+68Dj
		mov	esi, [ebp+var_34]
		mov	ecx, 2
		mov	edi, offset aC_0 ; "C"
		repe cmpsb
		jnz	loc_68D850E0

loc_68D84C33:				; CODE XREF: libintl_dcigettext+5D6j
					; libintl_dcigettext+5F1j
		mov	ebx, [ebp+var_34]

loc_68D84C36:				; CODE XREF: libintl_dcigettext+5CBj
					; libintl_dcigettext+5EBj
		mov	eax, [ebp+Str]
		mov	[esp+78h+Str1],	eax ; Str
		mov	[ebp+var_58], edx
		call	strlen
		mov	edx, [ebp+var_58]
		mov	[ebp+var_4C], eax
		mov	[esp+78h+Str1],	edx ; Str
		call	strlen
		mov	ecx, [ebp+var_4C]
		lea	eax, [ecx+eax+23h]
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		mov	edx, [ebp+var_58]
		lea	eax, [esp+78h+var_58+3]
		and	eax, 0FFFFFFF0h
		mov	[ebp+var_3C], eax
		jmp	short loc_68D84C72
; ---------------------------------------------------------------------------

loc_68D84C70:				; CODE XREF: libintl_dcigettext+14Fj
		mov	eax, esi

loc_68D84C72:				; CODE XREF: libintl_dcigettext+13Ej
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		lea	esi, [eax+1]
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D84C70
		mov	edx, offset byte_68D910A4
		jmp	short loc_68D84C8D
; ---------------------------------------------------------------------------

loc_68D84C88:				; CODE XREF: libintl_dcigettext+167j
		mov	eax, esi
		add	esi, 1

loc_68D84C8D:				; CODE XREF: libintl_dcigettext+156j
		movzx	ecx, byte ptr [edx]
		add	edx, 1
		test	cl, cl
		mov	[eax], cl
		jnz	short loc_68D84C88
		mov	edx, [ebp+var_4C]
		mov	[esp+78h+Size],	edx ; Size
		mov	ecx, [ebp+Str]
		mov	[esp+78h+Str1],	eax ; Dst
		mov	[esp+78h+Str2],	ecx ; Src
		call	memcpy
		mov	edx, [ebp+var_4C]
		lea	edx, [eax+edx]
		mov	eax, offset a_mo ; ".mo"
		lea	esi, [esi+0]

loc_68D84CC0:				; CODE XREF: libintl_dcigettext+19Dj
		movzx	ecx, byte ptr [eax]
		add	eax, 1
		mov	[edx], cl
		add	edx, 1
		test	cl, cl
		jnz	short loc_68D84CC0
		mov	[esp+78h+Str1],	ebx ; Str
		call	strlen
		add	eax, 1Fh
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		lea	eax, [esp+78h+var_58+3]
		and	eax, 0FFFFFFF0h
		mov	[ebp+var_34], eax
		add	eax, 1
		mov	[ebp+var_48], eax

loc_68D84CF2:				; CODE XREF: libintl_dcigettext+22Fj
					; libintl_dcigettext+269j ...
		movzx	eax, byte ptr [ebx]
		cmp	al, 3Ah
		jz	loc_68D84FC0
		test	al, al
		mov	edx, [ebp+var_34]
		jnz	loc_68D84F3A
		mov	byte ptr [edx],	43h
		mov	edx, [ebp+var_48]
		mov	byte ptr [edx],	0

loc_68D84D11:				; CODE XREF: libintl_dcigettext+423j
					; libintl_dcigettext+472j ...
		mov	esi, [ebp+var_34]
		mov	ecx, 2
		mov	edi, offset aC_0 ; "C"
		repe cmpsb
		jz	loc_68D85030
		mov	esi, [ebp+var_34]
		mov	edi, offset aPosix ; "POSIX"
		mov	ecx, 6
		repe cmpsb
		jz	loc_68D85030
		mov	eax, [ebp+var_38]
		mov	[esp+78h+var_6C], eax ;	int
		mov	edx, [ebp+var_3C]
		mov	[esp+78h+Size],	edx ; char *
		mov	ecx, [ebp+var_34]
		mov	[esp+78h+Str2],	ecx ; Memory
		mov	eax, [ebp+var_40]
		mov	[esp+78h+Str1],	eax ; char *
		call	_nl_find_domain
		test	eax, eax
		mov	edi, eax
		jz	short loc_68D84CF2
		lea	edx, [ebp+var_1C]
		mov	[esp+78h+var_68], edx ;	int
		mov	[esp+78h+var_6C], 1 ; int
		mov	ecx, [ebp+arg_4]
		mov	[esp+78h+Size],	ecx ; Str1
		mov	eax, [ebp+var_38]
		mov	[esp+78h+Str1],	edi ; int
		mov	[esp+78h+Str2],	eax ; int
		call	_nl_find_msg
		test	eax, eax
		jz	loc_68D84FC8
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D85030

loc_68D84D97:				; CODE XREF: libintl_dcigettext+4F8j
		test	eax, eax
		jz	loc_68D84CF2
		mov	esi, eax
		mov	eax, [ebp+arg_4]
		mov	[esp+78h+Str1],	eax ; Str
		call	strlen
		mov	edx, [ebp+var_4C]
		add	eax, 1
		mov	[ebp+var_34], eax
		lea	eax, [eax+edx+19h]
		mov	[esp+78h+Str1],	eax ; Size
		call	malloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_68D84E4D
		mov	ecx, [ebp+var_34]
		lea	eax, [eax+18h]
		mov	[esp+78h+Size],	ecx ; Size
		mov	edx, [ebp+arg_4]
		mov	[esp+78h+Str1],	eax ; Dst
		mov	[esp+78h+Str2],	edx ; Src
		call	memcpy
		mov	edx, [ebp+var_34]
		lea	edx, [eax+edx]
		mov	eax, [ebp+var_4C]
		add	eax, 1
		mov	[esp+78h+Size],	eax ; Size
		mov	ecx, [ebp+Str]
		mov	[esp+78h+Str1],	edx ; Dst
		mov	[esp+78h+Str2],	ecx ; Src
		mov	[ebp+var_58], edx
		call	memcpy
		mov	eax, [ebp+arg_14]
		mov	edx, [ebp+var_58]
		mov	[ebx+0Ch], edi
		mov	[ebx+10h], esi
		mov	[ebx+4], eax
		mov	eax, ds:_nl_msg_cat_cntr
		mov	[ebx], edx
		mov	[ebx+8], eax
		mov	eax, [ebp+var_1C]
		mov	[ebx+14h], eax
		mov	[esp+78h+Size],	offset loc_68D84150
		mov	[esp+78h+Str2],	offset dword_68D96034
		mov	[esp+78h+Str1],	ebx
		call	sub_68D8ED40
		test	eax, eax
		jz	short loc_68D84E45
		cmp	[eax], ebx
		jz	short loc_68D84E4D

loc_68D84E45:				; CODE XREF: libintl_dcigettext+30Fj
		mov	[esp+78h+Str1],	ebx ; Memory
		call	free

loc_68D84E4D:				; CODE XREF: libintl_dcigettext+295j
					; libintl_dcigettext+313j
		lea	esi, [esi+0]
		call	[ebp+var_2C]
		mov	edx, [ebp+var_54]
		mov	[eax], edx
		mov	ebx, [ebp+arg_C]
		test	ebx, ebx
		jnz	loc_68D85126
		mov	eax, esi

loc_68D84E65:				; CODE XREF: libintl_dcigettext+10j
					; libintl_dcigettext+538j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D84E6D:				; CODE XREF: libintl_dcigettext+38j
		mov	ds:dword_68D96038, 0FFFFFFFFh
		jmp	loc_68D84B6E
; ---------------------------------------------------------------------------

loc_68D84E7C:				; CODE XREF: libintl_dcigettext+94j
		lea	edx, [eax-61h]
		cmp	dl, 19h
		jbe	short loc_68D84E8B
		sub	eax, 41h
		cmp	al, 19h
		ja	short loc_68D84E98

loc_68D84E8B:				; CODE XREF: libintl_dcigettext+352j
		mov	ecx, [ebp+var_40]
		cmp	byte ptr [ecx+1], 3Ah
		jz	loc_68D84BD0

loc_68D84E98:				; CODE XREF: libintl_dcigettext+359j
		mov	eax, [ebp+var_40]
		mov	ebx, 106h
		mov	[esp+78h+Str1],	eax ; Str
		call	strlen
		mov	edx, [ebp+var_2C]
		mov	[ebp+var_30], edx
		lea	edi, [eax+1]
		jmp	short loc_68D84EC7
; ---------------------------------------------------------------------------

loc_68D84EB3:				; CODE XREF: libintl_dcigettext+3C1j
		call	[ebp+var_30]
		cmp	dword ptr [eax], 22h
		jnz	loc_68D85030
		mov	eax, ebx
		shr	eax, 1
		lea	ebx, [ebx+eax+20h]

loc_68D84EC7:				; CODE XREF: libintl_dcigettext+381j
		lea	eax, [ebx+edi+1Eh]
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		call	[ebp+var_2C]
		lea	esi, [esp+78h+var_58+3]
		and	esi, 0FFFFFFF0h
		mov	dword ptr [eax], 0
		mov	[esp+78h+Str2],	ebx
		mov	[esp+78h+Str1],	esi
		call	_getcwd
		test	eax, eax
		jz	short loc_68D84EB3
		mov	[esp+78h+Str2],	0 ; Val
		mov	[esp+78h+Str1],	esi ; Str
		call	strchr
		mov	edx, offset byte_68D910A4

loc_68D84F08:				; CODE XREF: libintl_dcigettext+3E7j
		movzx	ecx, byte ptr [edx]
		mov	ebx, eax
		add	edx, 1
		mov	[eax], cl
		add	eax, 1
		test	cl, cl
		jnz	short loc_68D84F08
		mov	ecx, [ebp+var_40]
		xor	eax, eax
		xchg	ax, ax

loc_68D84F20:				; CODE XREF: libintl_dcigettext+3FCj
		movzx	edx, byte ptr [ecx+eax]
		mov	[ebx+eax], dl
		add	eax, 1
		test	dl, dl
		jnz	short loc_68D84F20
		mov	[ebp+var_40], esi
		jmp	loc_68D84BD0
; ---------------------------------------------------------------------------

loc_68D84F36:				; CODE XREF: libintl_dcigettext+417j
		test	al, al
		jz	short loc_68D84F49

loc_68D84F3A:				; CODE XREF: libintl_dcigettext+1D2j
		add	ebx, 1
		mov	[edx], al
		movzx	eax, byte ptr [ebx]
		add	edx, 1
		cmp	al, 3Ah
		jnz	short loc_68D84F36

loc_68D84F49:				; CODE XREF: libintl_dcigettext+408j
		mov	byte ptr [edx],	0
		cmp	ds:dword_68D96038, 1
		jnz	loc_68D84D11
		mov	[esp+78h+Str2],	2Fh ; Val
		mov	ecx, [ebp+var_34]
		mov	[esp+78h+Str1],	ecx ; Str
		call	strchr
		test	eax, eax
		jnz	loc_68D84CF2
		mov	[esp+78h+Str2],	5Ch ; Val
		mov	eax, [ebp+var_34]
		mov	[esp+78h+Str1],	eax ; Str
		call	strchr
		test	eax, eax
		jnz	loc_68D84CF2
		mov	edx, [ebp+var_34]
		movzx	eax, byte ptr [edx]
		lea	edx, [eax-61h]
		cmp	dl, 19h
		jbe	short loc_68D84FA8
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_68D84D11

loc_68D84FA8:				; CODE XREF: libintl_dcigettext+46Bj
		mov	ecx, [ebp+var_48]
		cmp	byte ptr [ecx],	3Ah
		jnz	loc_68D84D11
		jmp	loc_68D84CF2
; ---------------------------------------------------------------------------
		align 10h

loc_68D84FC0:				; CODE XREF: libintl_dcigettext+1C7j
		add	ebx, 1
		jmp	loc_68D84CF2
; ---------------------------------------------------------------------------

loc_68D84FC8:				; CODE XREF: libintl_dcigettext+258j
		mov	eax, [edi+10h]
		test	eax, eax
		lea	esi, [esi+0]
		jz	loc_68D84CF2
		mov	[ebp+var_50], ebx
		xor	esi, esi
		mov	ebx, [ebp+var_38]
		mov	[ebp+var_44], edi
		mov	edi, [ebp+arg_4]
		jmp	short loc_68D84FF8
; ---------------------------------------------------------------------------

loc_68D84FE6:				; CODE XREF: libintl_dcigettext+4E9j
		mov	ecx, [ebp+var_44]
		add	esi, 1
		mov	eax, [ecx+esi*4+10h]
		test	eax, eax
		jz	loc_68D85079

loc_68D84FF8:				; CODE XREF: libintl_dcigettext+4B4j
		lea	edx, [ebp+var_1C]
		mov	[esp+78h+var_68], edx ;	int
		mov	[esp+78h+var_6C], 1 ; int
		mov	[esp+78h+Size],	edi ; Str1
		mov	[esp+78h+Str2],	ebx ; int
		mov	[esp+78h+Str1],	eax ; int
		call	_nl_find_msg
		test	eax, eax
		jz	short loc_68D84FE6
		mov	edi, [ebp+var_44]
		cmp	eax, 0FFFFFFFFh
		mov	ebx, [ebp+var_50]
		mov	edi, [edi+esi*4+10h]
		jnz	loc_68D84D97
		xchg	ax, ax

loc_68D85030:				; CODE XREF: libintl_dcigettext+1F0j
					; libintl_dcigettext+205j ...
		cmp	ds:dword_68D96038, 1
		jz	short loc_68D85052
		mov	[esp+78h+Str1],	offset aGettext_log_un ; "GETTEXT_LOG_UNTRANSLATED"
		call	getenv
		test	eax, eax
		jz	short loc_68D85052
		cmp	byte ptr [eax],	0
		jnz	loc_68D85182

loc_68D85052:				; CODE XREF: libintl_dcigettext+507j
					; libintl_dcigettext+517j ...
		call	[ebp+var_2C]
		mov	edx, [ebp+var_54]
		mov	[eax], edx
		mov	ecx, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_68D8506E
		cmp	[ebp+arg_10], 1
		mov	eax, [ebp+arg_8]
		jnz	loc_68D84E65

loc_68D8506E:				; CODE XREF: libintl_dcigettext+52Fj
		mov	eax, [ebp+arg_4]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D85079:				; CODE XREF: libintl_dcigettext+4C2j
		mov	ebx, [ebp+var_50]
		jmp	loc_68D84CF2
; ---------------------------------------------------------------------------

loc_68D85081:				; CODE XREF: libintl_dcigettext+ABj
		cmp	[ebp+arg_14], 5
		mov	edx, offset aLc_time ; "LC_TIME"
		jz	loc_68D84BF7
		mov	edx, offset aLc_numeric	; "LC_NUMERIC"
		jl	loc_68D84BF7
		cmp	[ebp+arg_14], 6C1h
		mov	edx, offset aLc_messages ; "LC_MESSAGES"
		jz	loc_68D84BF7

loc_68D850AD:				; CODE XREF: libintl_dcigettext+6A1j
		mov	edx, offset aLc_xxx ; "LC_XXX"
		jmp	loc_68D84BF7
; ---------------------------------------------------------------------------

loc_68D850B7:				; CODE XREF: libintl_dcigettext:loc_68D84B86j
		mov	[ebp+var_38], 0
		mov	[ebp+var_40], offset libintl_nl_default_dirname
		jmp	loc_68D84BD0
; ---------------------------------------------------------------------------

loc_68D850CA:				; CODE XREF: libintl_dcigettext+60j
		mov	[ebp+var_38], ebx

loc_68D850CD:				; CODE XREF: libintl_dcigettext+49j
					; libintl_dcigettext+7Fj
		mov	[ebp+var_40], offset libintl_nl_default_dirname
		jmp	loc_68D84BD0
; ---------------------------------------------------------------------------
		align 10h

loc_68D850E0:				; CODE XREF: libintl_dcigettext+FDj
		mov	[esp+78h+Str1],	offset aLanguage ; "LANGUAGE"
		mov	[ebp+var_58], edx
		call	getenv
		mov	edx, [ebp+var_58]
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68D85101
		cmp	byte ptr [eax],	0
		jnz	loc_68D84C36

loc_68D85101:				; CODE XREF: libintl_dcigettext+5C6j
		mov	esi, [ebp+var_3C]
		test	esi, esi
		jz	loc_68D84C33
		mov	[ebp+var_58], edx
		call	_nl_language_preferences_default
		mov	edx, [ebp+var_58]
		test	eax, eax
		mov	ebx, eax
		jnz	loc_68D84C36
		jmp	loc_68D84C33
; ---------------------------------------------------------------------------

loc_68D85126:				; CODE XREF: libintl_dcigettext+32Dj
		mov	ebx, [edi+8]
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+arg_10]
		mov	eax, [ebx+40h]
		mov	[ebp+var_34], ecx
		call	sub_68D84980
		cmp	eax, [ebx+44h]
		mov	ebx, [ebp+var_34]
		mov	edi, eax
		sbb	eax, eax
		and	edi, eax
		mov	eax, esi
		lea	ebx, [esi+ebx]

loc_68D8514B:				; CODE XREF: libintl_dcigettext+63Bj
		test	edi, edi
		jz	loc_68D84E65
		mov	[esp+78h+Str2],	0 ; Val
		sub	edi, 1
		mov	[esp+78h+Str1],	eax ; Str
		call	strchr
		add	eax, 1
		cmp	eax, ebx
		jb	short loc_68D8514B
		mov	eax, esi
		jmp	loc_68D84E65
; ---------------------------------------------------------------------------

loc_68D85174:				; CODE XREF: libintl_dcigettext+2Aj
		mov	edx, libintl_nl_current_default_domain
		mov	[ebp+Str], edx
		jmp	loc_68D84B60
; ---------------------------------------------------------------------------

loc_68D85182:				; CODE XREF: libintl_dcigettext+51Cj
		mov	edx, [ebp+arg_C]
		mov	[esp+78h+var_68], edx ;	int
		mov	ecx, [ebp+arg_8]
		mov	[esp+78h+var_6C], ecx ;	char *
		mov	edx, [ebp+arg_4]
		mov	[esp+78h+Size],	edx ; char *
		mov	ecx, [ebp+Str]
		mov	[esp+78h+Str1],	eax ; Str
		mov	[esp+78h+Str2],	ecx ; FILE *
		call	_nl_log_untranslated
		jmp	loc_68D85052
; ---------------------------------------------------------------------------

loc_68D851AB:				; CODE XREF: libintl_dcigettext+E8j
		call	_nl_locale_name_default
		mov	edx, [ebp+var_58]
		mov	[ebp+var_3C], 1
		mov	[ebp+var_34], eax
		jmp	loc_68D84C1E
; ---------------------------------------------------------------------------

loc_68D851C2:				; CODE XREF: libintl_dcigettext+C1j
		cmp	[ebp+arg_14], 0
		mov	edx, offset aLc_all ; "LC_ALL"
		jz	loc_68D84BF7
		jmp	loc_68D850AD
libintl_dcigettext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  28. libintl_dcngettext

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_dcngettext(char *, char *, char *, int, int)
		public libintl_dcngettext
libintl_dcngettext proc	near		; CODE XREF: libintl_dngettext+2Ap
					; libintl_ngettext+2Ap	...

Str		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_20], 1 ; int
		mov	[esp+2Ch+var_18], eax ;	int
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_1C], eax ;	int
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax ;	char *
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax ;	char *
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Str], eax ; Str
		call	libintl_dcigettext
		add	esp, 2Ch
		retn
libintl_dcngettext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. libintl_dngettext

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_dngettext(char *,	char *,	char *,	int)
		public libintl_dngettext
libintl_dngettext proc near		; CODE XREF: dngettext+6j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_1C], 6C1h ; int
		mov	[esp+2Ch+var_20], eax ;	int
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax ;	char *
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax ;	char *
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax ;	char *
		call	libintl_dcngettext
		add	esp, 2Ch
		retn
libintl_dngettext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. libintl_ngettext

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_ngettext(char *, char *, int)
		public libintl_ngettext
libintl_ngettext proc near		; CODE XREF: .text:68D8B246j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_1C], 6C1h ; int
		mov	[esp+2Ch+var_2C], 0 ; char *
		mov	[esp+2Ch+var_20], eax ;	int
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax ;	char *
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], eax ;	char *
		call	libintl_dcngettext
		add	esp, 2Ch
		retn
libintl_ngettext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. libintl_gettext_extract_plural

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_gettext_extract_plural(char *, int, int)
		public libintl_gettext_extract_plural
libintl_gettext_extract_plural proc near ; CODE	XREF: _nl_load_domain+57Cp

Str		= dword	ptr -4Ch
SubStr		= dword	ptr -48h
Radix		= dword	ptr -44h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
EndPtr		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_8]
		test	ebx, ebx
		jz	loc_68D85360
		mov	[esp+4Ch+SubStr], offset aPlural ; "plural="
		mov	[esp+4Ch+Str], ebx ; Str
		call	strstr
		mov	[esp+4Ch+SubStr], offset aNplurals ; "nplurals="
		mov	[esp+4Ch+Str], ebx ; Str
		mov	[esp+4Ch+var_30], eax
		call	strstr
		test	eax, eax
		jz	loc_68D85360
		mov	edx, [esp+4Ch+var_30]
		test	edx, edx
		jz	short loc_68D85360
		movzx	ebx, byte ptr [eax+9]
		lea	esi, [eax+9]
		test	bl, bl
		jz	short loc_68D85360
		mov	edi, ds:isspace
		jmp	short loc_68D8530A
; ---------------------------------------------------------------------------
		align 10h

loc_68D85300:				; CODE XREF: libintl_gettext_extract_plural+74j
		add	esi, 1
		movzx	ebx, byte ptr [esi]
		test	bl, bl
		jz	short loc_68D85360

loc_68D8530A:				; CODE XREF: libintl_gettext_extract_plural+5Cj
		movzx	eax, bl
		mov	[esp+4Ch+Str], eax ; C
		call	edi ; isspace
		test	eax, eax
		jnz	short loc_68D85300
		sub	ebx, 30h
		cmp	bl, 9
		ja	short loc_68D85360
		lea	eax, [esp+4Ch+EndPtr]
		mov	[esp+4Ch+Radix], 0Ah ; Radix
		mov	[esp+4Ch+SubStr], eax ;	EndPtr
		mov	[esp+4Ch+Str], esi ; Str
		call	strtoul
		cmp	esi, [esp+4Ch+EndPtr]
		jz	short loc_68D85360
		mov	[ebp+0], eax
		mov	eax, [esp+4Ch+var_30]
		add	eax, 7
		mov	[esp+4Ch+var_28], eax
		lea	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+Str], eax
		call	libintl_gettextparse
		test	eax, eax
		jz	short loc_68D85379
		lea	esi, [esi+0]

loc_68D85360:				; CODE XREF: libintl_gettext_extract_plural+11j
					; libintl_gettext_extract_plural+3Dj ...
		mov	eax, [esp+4Ch+arg_4]
		mov	dword ptr [ebp+0], 2
		mov	dword ptr [eax], offset	libintl_gettext_germanic_plural

loc_68D85371:				; CODE XREF: libintl_gettext_extract_plural+E3j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D85379:				; CODE XREF: libintl_gettext_extract_plural+B8j
		mov	eax, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+arg_4]
		mov	[edx], eax
		jmp	short loc_68D85371
libintl_gettext_extract_plural endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  47. locale_charset

; =============== S U B	R O U T	I N E =======================================


		public locale_charset
locale_charset	proc near		; CODE XREF: _nl_find_msg+462p

Dest		= dword	ptr -1Ch
Format		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	esi
		push	ebx
		sub	esp, 14h
		call	ds:GetACP
		mov	[esp+1Ch+Format], offset Format	; "CP%u"
		mov	[esp+1Ch+Dest],	offset Str1 ; Dest
		mov	[esp+1Ch+var_14], eax
		call	sprintf
		mov	ebx, ds:Str
		test	ebx, ebx
		jnz	short loc_68D853D8
		jmp	short loc_68D85427
; ---------------------------------------------------------------------------
		align 10h

loc_68D853C0:				; CODE XREF: locale_charset+69j
					; locale_charset+70j
		mov	[esp+1Ch+Dest],	ebx ; Str
		call	strlen
		lea	ebx, [ebx+eax+1]
		mov	[esp+1Ch+Dest],	ebx ; Str
		call	strlen
		lea	ebx, [ebx+eax+1]

loc_68D853D8:				; CODE XREF: locale_charset+2Bj
					; locale_charset+A6j
		movzx	esi, byte ptr [ebx]
		mov	eax, esi
		test	al, al
		jz	short loc_68D85420
		mov	[esp+1Ch+Format], ebx ;	Str2
		mov	[esp+1Ch+Dest],	offset Str1 ; Str1
		call	strcmp
		test	eax, eax
		jz	short loc_68D85402
		mov	eax, esi
		cmp	al, 2Ah
		jnz	short loc_68D853C0
		cmp	byte ptr [ebx+1], 0
		nop
		jnz	short loc_68D853C0

loc_68D85402:				; CODE XREF: locale_charset+63j
		mov	[esp+1Ch+Dest],	ebx ; Str
		call	strlen
		lea	eax, [ebx+eax+1]

loc_68D8540E:				; CODE XREF: locale_charset+95j
		cmp	byte ptr [eax],	0
		jnz	short loc_68D85418
		mov	eax, offset aAscii ; "ASCII"

loc_68D85418:				; CODE XREF: locale_charset+81j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D85420:				; CODE XREF: locale_charset+4Fj
		mov	eax, offset Str1
		jmp	short loc_68D8540E
; ---------------------------------------------------------------------------

loc_68D85427:				; CODE XREF: locale_charset+2Dj
		mov	ds:Str,	offset aCp936 ;	"CP936"
		mov	ebx, offset aCp936 ; "CP936"
		jmp	short loc_68D853D8
locale_charset	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall EnumFunc(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam)
EnumFunc	proc near		; DATA XREF: _nl_language_preferences_default+12Co

var_1C		= dword	ptr -1Ch
hModule		= dword	ptr  4
lpType		= dword	ptr  8
lpName		= dword	ptr  0Ch
wLanguage	= word ptr  10h
lParam		= dword	ptr  14h

		sub	esp, 1Ch
		movzx	eax, [esp+1Ch+wLanguage]
		mov	[esp+1Ch+var_1C], eax
		call	sub_68D858F0
		mov	edx, [esp+1Ch+lParam]
		mov	[edx], eax
		xor	eax, eax
		add	esp, 1Ch
		retn	14h
EnumFunc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. _nl_language_preferences_default

; =============== S U B	R O U T	I N E =======================================


		public _nl_language_preferences_default
_nl_language_preferences_default proc near ; CODE XREF:	libintl_dcigettext+5DFp

VarName		= dword	ptr -8Ch
lpProcName	= dword	ptr -88h
ulOptions	= dword	ptr -84h
samDesired	= dword	ptr -80h
phkResult	= dword	ptr -7Ch
lpcbData	= dword	ptr -78h
var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
Memory		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3E		= word ptr -3Eh
Data		= byte ptr -35h
var_2D		= byte ptr -2Dh
lParam		= dword	ptr -2Ch
cbData		= dword	ptr -28h
Type		= dword	ptr -24h
hKey		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 8Ch
		mov	edx, ds:dword_68D96050
		mov	[esp+8Ch+var_10], ebx
		mov	[esp+8Ch+var_C], esi
		mov	[esp+8Ch+var_8], edi
		test	edx, edx
		mov	[esp+8Ch+var_4], ebp
		jz	short loc_68D854B1

loc_68D85489:				; CODE XREF: _nl_language_preferences_default+5Fj
		mov	ebx, ds:dword_68D96054

loc_68D8548F:				; CODE XREF: _nl_language_preferences_default+D0j
		mov	eax, ebx
		mov	esi, [esp+8Ch+var_C]
		mov	ebx, [esp+8Ch+var_10]
		mov	edi, [esp+8Ch+var_8]
		mov	ebp, [esp+8Ch+var_4]
		add	esp, 8Ch
		retn
; ---------------------------------------------------------------------------

loc_68D854B1:				; CODE XREF: _nl_language_preferences_default+27j
		mov	[esp+8Ch+VarName], offset aGettext_mui ; "GETTEXT_MUI"
		call	getenv
		test	eax, eax
		jz	short loc_68D85489
		mov	[esp+8Ch+VarName], offset aKernel32 ; "kernel32"
		xor	edi, edi
		call	ds:GetModuleHandleA
		sub	esp, 4
		test	eax, eax
		mov	esi, eax
		jz	short loc_68D85540
		mov	ebp, ds:GetProcAddress
		mov	[esp+8Ch+lpProcName], offset aGetuserpreferr ; "GetUserPreferredUILanguages"
		mov	[esp+8Ch+VarName], eax ; hModule
		call	ebp ; GetProcAddress
		sub	esp, 8
		test	eax, eax
		mov	ebx, eax
		jnz	loc_68D85680

loc_68D854F9:				; CODE XREF: _nl_language_preferences_default+24Ej
					; _nl_language_preferences_default+260j ...
		mov	[esp+8Ch+lpProcName], offset aGetuserdefault ; "GetUserDefaultUILanguage"
		mov	[esp+8Ch+VarName], esi ; hModule
		call	ebp ; GetProcAddress
		sub	esp, 8
		test	eax, eax
		jz	short loc_68D85535
		call	eax
		movzx	eax, ax
		mov	[esp+8Ch+VarName], eax
		call	sub_68D858F0
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68D85535

loc_68D85520:				; CODE XREF: _nl_language_preferences_default+11Aj
					; _nl_language_preferences_default+154j ...
		mov	ds:dword_68D96054, ebx
		mov	ds:dword_68D96050, 1
		jmp	loc_68D8548F
; ---------------------------------------------------------------------------

loc_68D85535:				; CODE XREF: _nl_language_preferences_default+ABj
					; _nl_language_preferences_default+BEj
		mov	edi, 1
		lea	esi, [esi+0]

loc_68D85540:				; CODE XREF: _nl_language_preferences_default+77j
		lea	eax, [esp+8Ch+hKey]
		mov	[esp+8Ch+phkResult], eax ; phkResult
		mov	[esp+8Ch+samDesired], 1	; samDesired
		mov	[esp+8Ch+ulOptions], 0 ; ulOptions
		mov	[esp+8Ch+lpProcName], offset SubKey ; "Control Panel\\Desktop\\ResourceLocale"
		mov	[esp+8Ch+VarName], 80000001h ; hKey
		call	ds:RegOpenKeyExA
		sub	esp, 14h
		test	eax, eax
		jz	short loc_68D855B9

loc_68D85574:				; CODE XREF: _nl_language_preferences_default+1ABj
					; _nl_language_preferences_default+1B6j ...
		xor	ebx, ebx

loc_68D85576:				; CODE XREF: _nl_language_preferences_default+213j
		mov	eax, edi
		test	al, al
		jz	short loc_68D85520
		lea	eax, [esp+8Ch+lParam]
		mov	[esp+8Ch+lParam], 0
		mov	[esp+8Ch+phkResult], eax ; lParam
		mov	[esp+8Ch+samDesired], offset EnumFunc ;	lpEnumFunc
		mov	[esp+8Ch+ulOptions], 1 ; lpName
		mov	[esp+8Ch+lpProcName], 10h ; lpType
		mov	[esp+8Ch+VarName], esi ; hModule
		call	ds:EnumResourceLanguagesA
		sub	esp, 14h
		mov	ebx, [esp+8Ch+lParam]
		jmp	loc_68D85520
; ---------------------------------------------------------------------------

loc_68D855B9:				; CODE XREF: _nl_language_preferences_default+112j
		lea	eax, [esp+8Ch+cbData]
		mov	[esp+8Ch+lpcbData], eax	; lpcbData
		lea	eax, [esp+8Ch+Type]
		mov	[esp+8Ch+samDesired], eax ; lpType
		mov	eax, [esp+8Ch+hKey]
		lea	ebx, [esp+8Ch+Data]
		mov	[esp+8Ch+cbData], 9
		mov	[esp+8Ch+phkResult], ebx ; lpData
		mov	[esp+8Ch+ulOptions], 0 ; lpReserved
		mov	[esp+8Ch+lpProcName], 0	; lpValueName
		mov	[esp+8Ch+VarName], eax ; hKey
		call	ds:RegQueryValueExA
		sub	esp, 18h
		mov	ebp, eax
		mov	eax, [esp+8Ch+hKey]
		mov	[esp+8Ch+VarName], eax ; hKey
		call	ds:RegCloseKey
		test	ebp, ebp
		push	eax
		jnz	loc_68D85574
		cmp	[esp+8Ch+Type],	1
		jnz	loc_68D85574
		mov	eax, [esp+8Ch+cbData]
		cmp	eax, 9
		ja	loc_68D85574
		jnz	loc_68D85807
		cmp	[esp+8Ch+var_2D], 0
		jnz	loc_68D85574

loc_68D8563A:				; CODE XREF: _nl_language_preferences_default+3ACj
		lea	eax, [esp+8Ch+lParam]
		mov	[esp+8Ch+ulOptions], 10h ; Radix
		mov	[esp+8Ch+lpProcName], eax ; EndPtr
		mov	[esp+8Ch+VarName], ebx ; Str
		call	strtoul
		mov	edx, [esp+8Ch+lParam]
		cmp	edx, ebx
		jbe	loc_68D85574
		cmp	byte ptr [edx],	0
		jnz	loc_68D85574
		mov	[esp+8Ch+VarName], eax
		call	sub_68D867E0
		test	eax, eax
		mov	ebx, eax
		jz	loc_68D85576
		jmp	loc_68D85520
; ---------------------------------------------------------------------------
		align 10h

loc_68D85680:				; CODE XREF: _nl_language_preferences_default+93j
		lea	eax, [esp+8Ch+Type]
		lea	edi, [esp+8Ch+cbData]
		mov	[esp+8Ch+Type],	0
		mov	[esp+8Ch+samDesired], eax
		mov	[esp+8Ch+ulOptions], 0
		mov	[esp+8Ch+lpProcName], edi
		mov	[esp+8Ch+VarName], 8
		call	ebx
		sub	esp, 10h
		test	eax, eax
		jnz	loc_68D854F9
		call	ds:GetLastError
		cmp	eax, 80000005h
		nop
		jnz	loc_68D854F9
		mov	eax, [esp+8Ch+Type]
		test	eax, eax
		jz	loc_68D854F9
		add	eax, eax
		mov	[esp+8Ch+VarName], eax ; Size
		call	malloc
		test	eax, eax
		mov	[esp+8Ch+Memory], eax
		jz	loc_68D854F9
		lea	edx, [esp+8Ch+Type]
		mov	[esp+8Ch+samDesired], edx
		mov	[esp+8Ch+ulOptions], eax
		mov	[esp+8Ch+lpProcName], edi
		mov	[esp+8Ch+VarName], 8
		call	ebx
		sub	esp, 10h
		test	eax, eax
		jz	loc_68D857F6
		imul	eax, [esp+8Ch+cbData], 0Ah
		mov	edx, [esp+8Ch+Type]
		lea	eax, [edx+eax+1]
		mov	[esp+8Ch+VarName], eax ; Size
		call	malloc
		test	eax, eax
		mov	ebx, eax
		mov	[esp+8Ch+var_48], eax
		jz	loc_68D857F6
		mov	ecx, [esp+8Ch+Memory]
		mov	edx, esi
		mov	esi, ebx
		mov	[esp+8Ch+var_44], 0
		mov	[esp+8Ch+var_50], ecx

loc_68D85743:				; CODE XREF: _nl_language_preferences_default+367j
		mov	ecx, [esp+8Ch+var_44]
		cmp	ecx, [esp+8Ch+cbData]
		jnb	short loc_68D857CC
		cmp	[esp+8Ch+var_44], 0
		mov	ebx, eax
		jz	short loc_68D8575C
		mov	byte ptr [eax],	3Ah
		lea	ebx, [eax+1]

loc_68D8575C:				; CODE XREF: _nl_language_preferences_default+2F4j
		mov	ecx, ebx
		mov	[esp+8Ch+var_60], ebx
		jmp	short loc_68D85782
; ---------------------------------------------------------------------------

loc_68D85764:				; CODE XREF: _nl_language_preferences_default+331j
		movzx	edi, byte ptr [esp+8Ch+var_3E]
		cmp	di, [esp+8Ch+var_3E]
		jnz	short loc_68D857CC
		cmp	di, 3Ah
		jz	short loc_68D857CC
		mov	ebx, edi
		mov	[ecx], bl
		add	ecx, 1
		add	[esp+8Ch+var_50], 2

loc_68D85782:				; CODE XREF: _nl_language_preferences_default+302j
		mov	ebx, [esp+8Ch+var_50]
		movzx	ebx, word ptr [ebx]
		test	bx, bx
		mov	[esp+8Ch+var_3E], bx
		jnz	short loc_68D85764
		cmp	eax, ecx
		mov	ebx, [esp+8Ch+var_60]
		jz	short loc_68D857CC
		mov	byte ptr [ecx],	0
		mov	edi, ebx
		mov	[esp+8Ch+var_54], edx
		mov	[esp+8Ch+VarName], ebx
		call	sub_68D85820
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		repne scasb
		mov	edx, [esp+8Ch+var_54]
		add	[esp+8Ch+var_50], 2
		add	[esp+8Ch+var_44], 1
		not	ecx
		lea	eax, [ebx+ecx-1]
		jmp	loc_68D85743
; ---------------------------------------------------------------------------

loc_68D857CC:				; CODE XREF: _nl_language_preferences_default+2EBj
					; _nl_language_preferences_default+30Ej ...
		mov	byte ptr [eax],	0
		mov	ebx, esi
		mov	esi, edx
		cmp	[esp+8Ch+var_48], eax
		jnb	short loc_68D857EA
		mov	eax, [esp+8Ch+Memory]
		mov	[esp+8Ch+VarName], eax ; Memory
		call	free
		jmp	loc_68D85520
; ---------------------------------------------------------------------------

loc_68D857EA:				; CODE XREF: _nl_language_preferences_default+377j
		mov	edx, [esp+8Ch+var_48]
		mov	[esp+8Ch+VarName], edx ; Memory
		call	free

loc_68D857F6:				; CODE XREF: _nl_language_preferences_default+2A6j
					; _nl_language_preferences_default+2C9j
		mov	ecx, [esp+8Ch+Memory]
		mov	[esp+8Ch+VarName], ecx ; Memory
		call	free
		jmp	loc_68D854F9
; ---------------------------------------------------------------------------

loc_68D85807:				; CODE XREF: _nl_language_preferences_default+1C9j
		mov	[esp+eax+8Ch+Data], 0
		jmp	loc_68D8563A
_nl_language_preferences_default endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D85820	proc near		; CODE XREF: _nl_language_preferences_default+347p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_68D8583A
		jmp	short locret_68D85871
; ---------------------------------------------------------------------------
		align 10h

loc_68D85830:				; CODE XREF: sub_68D85820+20j
		add	eax, 1
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jz	short locret_68D85871

loc_68D8583A:				; CODE XREF: sub_68D85820+9j
		cmp	dl, 2Dh
		lea	esi, [esi+0]
		jnz	short loc_68D85830
		mov	byte ptr [eax],	5Fh
		lea	edx, [eax+1]
		movzx	eax, byte ptr [eax+1]
		test	al, al
		jnz	short loc_68D8585C
		jmp	short locret_68D85871
; ---------------------------------------------------------------------------

loc_68D85852:				; CODE XREF: sub_68D85820+4Bj
		add	edx, 1
		movzx	eax, byte ptr [edx]
		test	al, al
		jz	short locret_68D85873

loc_68D8585C:				; CODE XREF: sub_68D85820+2Ej
		lea	ecx, [eax-61h]
		cmp	cl, 19h
		ja	short loc_68D85869
		sub	eax, 20h
		mov	[edx], al

loc_68D85869:				; CODE XREF: sub_68D85820+42j
		cmp	al, 2Dh
		jnz	short loc_68D85852
		mov	byte ptr [edx],	0
		retn
; ---------------------------------------------------------------------------

locret_68D85871:			; CODE XREF: sub_68D85820+Bj
					; sub_68D85820+18j ...
		rep retn
; ---------------------------------------------------------------------------

locret_68D85873:			; CODE XREF: sub_68D85820+3Aj
		rep retn
sub_68D85820	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. _nl_locale_name_thread_unsafe

; =============== S U B	R O U T	I N E =======================================


		public _nl_locale_name_thread_unsafe
_nl_locale_name_thread_unsafe proc near
		xor	eax, eax
		retn
_nl_locale_name_thread_unsafe endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. gl_locale_name_thread

; =============== S U B	R O U T	I N E =======================================


		public gl_locale_name_thread
gl_locale_name_thread proc near
		xor	eax, eax
		retn
gl_locale_name_thread endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. _nl_locale_name_environ

; =============== S U B	R O U T	I N E =======================================


; int __cdecl nl_locale_name_environ(int, char *)
		public _nl_locale_name_environ
_nl_locale_name_environ	proc near	; CODE XREF: libintl_setlocale+67p
					; libintl_setlocale+13Ap ...

VarName		= dword	ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+VarName], offset aLc_all_0 ; "LC_ALL"
		call	getenv
		test	eax, eax
		jz	short loc_68D858B8
		cmp	byte ptr [eax],	0
		jnz	short loc_68D858CD

loc_68D858B8:				; CODE XREF: _nl_locale_name_environ+11j
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+VarName], eax ; VarName
		call	getenv
		test	eax, eax
		jz	short loc_68D858D1
		cmp	byte ptr [eax],	0
		jz	short loc_68D858D1

loc_68D858CD:				; CODE XREF: _nl_locale_name_environ+16j
					; _nl_locale_name_environ+3Fj ...
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_68D858D1:				; CODE XREF: _nl_locale_name_environ+26j
					; _nl_locale_name_environ+2Bj
		mov	[esp+1Ch+VarName], offset aLang	; "LANG"
		call	getenv
		test	eax, eax
		jz	short loc_68D858CD
		cmp	byte ptr [eax],	1
		sbb	edx, edx
		not	edx
		and	eax, edx
		jmp	short loc_68D858CD
_nl_locale_name_environ	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D858F0	proc near		; CODE XREF: EnumFunc+Bp
					; _nl_language_preferences_default+B5p	...

VarName		= dword	ptr -1Ch
LCType		= dword	ptr -18h
lpLCData	= dword	ptr -14h
cchData		= dword	ptr -10h
arg_0		= word ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		movzx	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+VarName], offset aGettext_mui_0 ; "GETTEXT_MUI"
		call	getenv
		movzx	esi, bx
		test	eax, eax
		jz	short loc_68D85935
		mov	[esp+1Ch+cchData], 0FFh	; cchData
		mov	[esp+1Ch+lpLCData], offset LCData ; lpLCData
		mov	[esp+1Ch+LCType], 5Ch ;	LCType
		mov	[esp+1Ch+VarName], esi ; Locale
		call	ds:GetLocaleInfoA
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_68D85957

loc_68D85935:				; CODE XREF: sub_68D858F0+1Bj
		and	esi, 3FFh
		shr	bx, 0Ah
		cmp	esi, 91h	; switch 146 cases
		jbe	short loc_68D85950

loc_68D85947:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		mov	eax, offset aC	; jumptable 68D85950 default case
		jmp	short loc_68D85987
; ---------------------------------------------------------------------------
		align 10h

loc_68D85950:				; CODE XREF: sub_68D858F0+55j
		jmp	ds:off_68D917BC[esi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D85957:				; CODE XREF: sub_68D858F0+43j
		movzx	edx, ds:LCData
		test	dl, dl
		jz	short loc_68D85982
		cmp	dl, 2Dh
		mov	eax, offset LCData
		jnz	short loc_68D85975
		jmp	short loc_68D85990
; ---------------------------------------------------------------------------
		align 10h

loc_68D85970:				; CODE XREF: sub_68D858F0+90j
		cmp	dl, 2Dh
		jz	short loc_68D85990

loc_68D85975:				; CODE XREF: sub_68D858F0+7Aj
		add	eax, 1
		movzx	edx, byte ptr [eax]
		test	dl, dl
		lea	esi, [esi+0]
		jnz	short loc_68D85970

loc_68D85982:				; CODE XREF: sub_68D858F0+70j
					; sub_68D858F0+AEj ...
		mov	eax, offset LCData

loc_68D85987:				; CODE XREF: sub_68D858F0+5Cj
					; sub_68D858F0+D3j ...
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D85990:				; CODE XREF: sub_68D858F0+7Cj
					; sub_68D858F0+83j
		mov	byte ptr [eax],	5Fh
		lea	edx, [eax+1]
		movzx	eax, byte ptr [eax+1]
		test	al, al
		jnz	short loc_68D859AA
		jmp	short loc_68D85982
; ---------------------------------------------------------------------------

loc_68D859A0:				; CODE XREF: sub_68D858F0+C9j
		add	edx, 1
		movzx	eax, byte ptr [edx]
		test	al, al
		jz	short loc_68D85982

loc_68D859AA:				; CODE XREF: sub_68D858F0+ACj
		lea	ecx, [eax-61h]
		cmp	cl, 19h
		ja	short loc_68D859B7
		sub	eax, 20h
		mov	[edx], al

loc_68D859B7:				; CODE XREF: sub_68D858F0+C0j
		cmp	al, 2Dh
		jnz	short loc_68D859A0
		mov	byte ptr [edx],	0
		mov	eax, offset LCData
		jmp	short loc_68D85987
; ---------------------------------------------------------------------------

loc_68D859C5:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 1
		mov	eax, offset aAr	; "ar"
		cmp	bx, 0Fh
		ja	short loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91A80[ebx*4]
		jmp	short loc_68D85987
; ---------------------------------------------------------------------------

loc_68D859DF:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 2
		mov	eax, offset aBg_bg ; "bg_BG"
		jz	short loc_68D85987
		mov	eax, offset aBg	; "bg"
		jmp	short loc_68D85987
; ---------------------------------------------------------------------------

loc_68D859F1:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 3
		mov	eax, offset aCa_es ; "ca_ES"
		jz	short loc_68D85987
		mov	eax, offset aCa	; "ca"
		jmp	short loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85A03:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1Fh		; jumptable 68D85950 case 4
		mov	eax, offset aZh	; "zh"
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91BC0[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85A21:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 5
		mov	eax, offset aCs_cz ; "cs_CZ"
		jz	loc_68D85987
		mov	eax, offset aCs	; "cs"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85A3A:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 6
		mov	eax, offset aDa_dk ; "da_DK"
		jz	loc_68D85987
		mov	eax, offset aDa	; "da"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85A53:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 7
		mov	eax, offset aDe	; "de"
		cmp	bx, 4
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91F0C[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85A74:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 8
		mov	eax, offset aEl_gr ; "el_GR"
		jz	loc_68D85987
		mov	eax, offset aEl	; "el"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85A8D:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 9
		mov	eax, offset aEn	; "en"
		cmp	bx, 11h
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91E00[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85AAE:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 10
		mov	eax, offset aEs	; "es"
		cmp	bx, 14h
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92400[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85ACF:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 11
		mov	eax, offset aFi_fi ; "fi_FI"
		jz	loc_68D85987
		mov	eax, offset aFi	; "fi"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85AE8:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 12
		mov	eax, offset aFr	; "fr"
		cmp	bx, 0Eh
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91EA0[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85B09:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 13
		mov	eax, offset aHe_il ; "he_IL"
		jz	loc_68D85987
		mov	eax, offset aHe	; "he"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85B22:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 14
		mov	eax, offset aHu_hu ; "hu_HU"
		jz	loc_68D85987
		mov	eax, offset aHu	; "hu"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85B3B:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 15
		mov	eax, offset aIs_is ; "is_IS"
		jz	loc_68D85987
		mov	eax, offset aIs	; "is"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85B54:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 16
		mov	eax, offset aIt	; "it"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91FC8[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85B75:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 17
		mov	eax, offset aJa_jp ; "ja_JP"
		jz	loc_68D85987
		mov	eax, offset aJa	; "ja"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85B8E:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 18
		mov	eax, offset aKo_kr ; "ko_KR"
		jz	loc_68D85987
		mov	eax, offset aKo	; "ko"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85BA7:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 19
		mov	eax, offset aNl	; "nl"
		cmp	bx, 2
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91D74[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85BC8:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 20
		mov	eax, offset aNo	; "no"
		cmp	bx, 1Eh
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D920E0[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85BE9:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 21
		mov	eax, offset aPl_pl ; "pl_PL"
		jz	loc_68D85987
		mov	eax, offset aPl	; "pl"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85C02:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 22
		mov	eax, offset aPt	; "pt"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92168[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85C23:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 23
		mov	eax, offset aRm_ch ; "rm_CH"
		jz	loc_68D85987
		mov	eax, offset aRm	; "rm"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85C3C:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 24
		mov	eax, offset aRo	; "ro"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D921B0[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85C5D:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 25
		mov	eax, offset aRu	; "ru"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D921C4[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85C7E:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1Fh		; jumptable 68D85950 case 26
		mov	eax, offset aHr	; "hr"
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91CE0[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85C9C:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 27
		mov	eax, offset aSk_sk ; "sk_SK"
		jz	loc_68D85987
		mov	eax, offset aSk	; "sk"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85CB5:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 28
		mov	eax, offset aSq_al ; "sq_AL"
		jz	loc_68D85987
		mov	eax, offset aSq	; "sq"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85CCE:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 29
		mov	eax, offset aSv	; "sv"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92460[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85CEF:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 30
		mov	eax, offset aTh_th ; "th_TH"
		jz	loc_68D85987
		mov	eax, offset aTh	; "th"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85D08:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 31
		mov	eax, offset aTr_tr ; "tr_TR"
		jz	loc_68D85987
		mov	eax, offset aTr	; "tr"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85D21:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 32
		mov	eax, offset aUr	; "ur"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D9254C[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85D42:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 33
		mov	eax, offset aId_id ; "id_ID"
		jz	loc_68D85987
		mov	eax, offset aId	; "id"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85D5B:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 34
		mov	eax, offset aUk_ua ; "uk_UA"
		jz	loc_68D85987
		mov	eax, offset aUk	; "uk"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85D74:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 35
		mov	eax, offset aBe_by ; "be_BY"
		jz	loc_68D85987
		mov	eax, offset aBe	; "be"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85D8D:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 36
		mov	eax, offset aSl_si ; "sl_SI"
		jz	loc_68D85987
		mov	eax, offset aSl	; "sl"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85DA6:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 37
		mov	eax, offset aEt_ee ; "et_EE"
		jz	loc_68D85987
		mov	eax, offset aEt	; "et"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85DBF:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 38
		mov	eax, offset aLv_lv ; "lv_LV"
		jz	loc_68D85987
		mov	eax, offset aLv	; "lv"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85DD8:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 39
		mov	eax, offset aLt_lt ; "lt_LT"
		jz	loc_68D85987
		mov	eax, offset aLt	; "lt"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85DF1:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 40
		mov	eax, offset aTg_tj ; "tg_TJ"
		jz	loc_68D85987
		mov	eax, offset aTg	; "tg"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85E0A:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 41
		mov	eax, offset aFa_ir ; "fa_IR"
		jz	loc_68D85987
		mov	eax, offset aFa	; "fa"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85E23:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 42
		mov	eax, offset aVi_vn ; "vi_VN"
		jz	loc_68D85987
		mov	eax, offset aVi	; "vi"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85E3C:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 43
		mov	eax, offset aHy_am ; "hy_AM"
		jz	loc_68D85987
		mov	eax, offset aHy	; "hy"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85E55:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 44
		mov	eax, offset aAz	; "az"
		cmp	bx, 1Dh
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91B00[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85E76:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 45
		mov	eax, offset aEu_es ; "eu_ES"
		jz	loc_68D85987
		mov	eax, offset aEu	; "eu"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85E8F:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1Fh		; jumptable 68D85950 case 46
		mov	eax, offset aWen ; "wen"
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D922E0[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85EAD:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 47
		mov	eax, offset aMk_mk ; "mk_MK"
		jz	loc_68D85987
		mov	eax, offset aMk	; "mk"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85EC6:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 48
		mov	eax, offset aBnt_tz ; "bnt_TZ"
		jz	loc_68D85987
		mov	eax, offset aBnt ; "bnt"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85EDF:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 49
		mov	eax, offset aTs_za ; "ts_ZA"
		jz	loc_68D85987
		mov	eax, offset aTs	; "ts"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85EF8:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 50
		mov	eax, offset aTn_za ; "tn_ZA"
		jz	loc_68D85987
		mov	eax, offset aTn	; "tn"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85F11:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 51
		mov	eax, offset aVe_za ; "ve_ZA"
		jz	loc_68D85987
		mov	eax, offset aVe	; "ve"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85F2A:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 52
		mov	eax, offset aXh_za ; "xh_ZA"
		jz	loc_68D85987
		mov	eax, offset aXh	; "xh"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85F43:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 53
		mov	eax, offset aZu_za ; "zu_ZA"
		jz	loc_68D85987
		mov	eax, offset aZu	; "zu"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85F5C:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 54
		mov	eax, offset aAf_za ; "af_ZA"
		jz	loc_68D85987
		mov	eax, offset aAf	; "af"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85F75:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 55
		mov	eax, offset aKa_ge ; "ka_GE"
		jz	loc_68D85987
		mov	eax, offset aKa	; "ka"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85F8E:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 56
		mov	eax, offset aFo_fo ; "fo_FO"
		jz	loc_68D85987
		mov	eax, offset aFo	; "fo"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85FA7:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 57
		mov	eax, offset aHi_in ; "hi_IN"
		jz	loc_68D85987
		mov	eax, offset aHi	; "hi"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85FC0:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 58
		mov	eax, offset aMt_mt ; "mt_MT"
		jz	loc_68D85987
		mov	eax, offset aMt	; "mt"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85FD9:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1Fh		; jumptable 68D85950 case 59
		mov	eax, offset aSe	; "se"
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92220[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D85FF7:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 60
		mov	eax, offset aGa	; "ga"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91EE4[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86018:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 61
		mov	eax, offset aYi_il ; "yi_IL"
		jz	loc_68D85987
		mov	eax, offset aYi	; "yi"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86031:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 62
		mov	eax, offset aMs	; "ms"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91FF0[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86052:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 63
		mov	eax, offset aKk_kz ; "kk_KZ"
		jz	loc_68D85987
		mov	eax, offset aKk	; "kk"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8606B:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 64
		mov	eax, offset aKy_kg ; "ky_KG"
		jz	loc_68D85987
		mov	eax, offset aKy	; "ky"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86084:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 65
		mov	eax, offset aSw_ke ; "sw_KE"
		jz	loc_68D85987
		mov	eax, offset aSw	; "sw"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8609D:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 66
		mov	eax, offset aTk_tm ; "tk_TM"
		jz	loc_68D85987
		mov	eax, offset aTk	; "tk"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D860B6:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 67
		mov	eax, offset aUz	; "uz"
		cmp	bx, 1Eh
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92580[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D860D7:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 68
		mov	eax, offset aTt_ru ; "tt_RU"
		jz	loc_68D85987
		mov	eax, offset aTt	; "tt"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D860F0:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 69
		mov	eax, offset aBn	; "bn"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91B84[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86111:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 70
		mov	eax, offset aPa	; "pa"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D9217C[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86132:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 71
		mov	eax, offset aGu_in ; "gu_IN"
		jz	loc_68D85987
		mov	eax, offset aGu	; "gu"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8614B:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 72
		mov	eax, offset aOr_in ; "or_IN"
		jz	loc_68D85987
		mov	eax, offset aOr	; "or"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86164:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 73
		mov	eax, offset aTa_in ; "ta_IN"
		jz	loc_68D85987
		mov	eax, offset aTa	; "ta"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8617D:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 74
		mov	eax, offset aTe_in ; "te_IN"
		jz	loc_68D85987
		mov	eax, offset aTe	; "te"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86196:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 75
		mov	eax, offset aKn_in ; "kn_IN"
		jz	loc_68D85987
		mov	eax, offset aKn	; "kn"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D861AF:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 76
		mov	eax, offset aMl_in ; "ml_IN"
		jz	loc_68D85987
		mov	eax, offset aMl	; "ml"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D861C8:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 77
		mov	eax, offset aAs_in ; "as_IN"
		jz	loc_68D85987
		mov	eax, offset aAs	; "as"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D861E1:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 78
		mov	eax, offset aMr_in ; "mr_IN"
		jz	loc_68D85987
		mov	eax, offset aMr	; "mr"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D861FA:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 79
		mov	eax, offset aSa_in ; "sa_IN"
		jz	loc_68D85987
		mov	eax, offset aSa	; "sa"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86213:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 80
		mov	eax, offset aMn	; "mn"
		cmp	bx, 1Eh
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92020[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86234:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 81
		mov	eax, offset aBo	; "bo"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92524[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86255:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 82
		mov	eax, offset aCy_gb ; "cy_GB"
		jz	loc_68D85987
		mov	eax, offset aCy	; "cy"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8626E:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 83
		mov	eax, offset aKm_kh ; "km_KH"
		jz	loc_68D85987
		mov	eax, offset aKm	; "km"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86287:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 84
		mov	eax, offset aLo_la ; "lo_LA"
		jz	loc_68D85987
		mov	eax, offset aLo	; "lo"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D862A0:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 85
		mov	eax, offset aMy_mm ; "my_MM"
		jz	loc_68D85987
		mov	eax, offset aMy	; "my"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D862B9:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 86
		mov	eax, offset aGl_es ; "gl_ES"
		jz	loc_68D85987
		mov	eax, offset aGl	; "gl"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D862D2:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 87
		mov	eax, offset aKok_in ; "kok_IN"
		jz	loc_68D85987
		mov	eax, offset aKok ; "kok"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D862EB:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 88
		mov	eax, offset aMni_in ; "mni_IN"
		jz	loc_68D85987
		mov	eax, offset aMni ; "mni"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86304:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 89
		mov	eax, offset aSd	; "sd"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D922AC[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86325:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 90
		mov	eax, offset aSyr_sy ; "syr_SY"
		jz	loc_68D85987
		mov	eax, offset aSyr ; "syr"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8633E:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 91
		mov	eax, offset aSi_lk ; "si_LK"
		jz	loc_68D85987
		mov	eax, offset aSi	; "si"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86357:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 92
		mov	eax, offset aChr_us ; "chr_US"
		jz	loc_68D85987
		mov	eax, offset aChr ; "chr"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86370:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 93
		mov	eax, offset aIu	; "iu"
		cmp	bx, 1Eh
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91F40[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86391:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 94
		mov	eax, offset aAm_et ; "am_ET"
		jz	loc_68D85987
		mov	eax, offset aAm	; "am"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D863AA:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 95
		mov	eax, offset aBer ; "ber"
		cmp	bx, 1Eh
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D924A0[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D863CB:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 96
		mov	eax, offset aKs	; "ks"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D91FDC[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D863EC:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 97
		mov	eax, offset aNe	; "ne"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D920A8[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8640D:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 98
		mov	eax, offset aFy_nl ; "fy_NL"
		jz	loc_68D85987
		mov	eax, offset aFy	; "fy"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86426:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 99
		mov	eax, offset aPs_af ; "ps_AF"
		jz	loc_68D85987
		mov	eax, offset aPs	; "ps"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8643F:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 100
		mov	eax, offset aTl_ph ; "tl_PH"
		jz	loc_68D85987
		mov	eax, offset aTl	; "tl"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86458:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 101
		mov	eax, offset aDv_mv ; "dv_MV"
		jz	loc_68D85987
		mov	eax, offset aDv	; "dv"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86471:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 102
		mov	eax, offset aBin_ng ; "bin_NG"
		jz	loc_68D85987
		mov	eax, offset aBin ; "bin"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8648A:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 103
		mov	eax, offset aFf_ng ; "ff_NG"
		jz	loc_68D85987
		mov	eax, offset aFf	; "ff"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D864A3:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 104
		mov	eax, offset aHa_ng ; "ha_NG"
		jz	loc_68D85987
		mov	eax, offset aHa	; "ha"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D864BC:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 105
		mov	eax, offset aNic_ng ; "nic_NG"
		jz	loc_68D85987
		mov	eax, offset aNic ; "nic"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D864D5:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 106
		mov	eax, offset aYo_ng ; "yo_NG"
		jz	loc_68D85987
		mov	eax, offset aYo	; "yo"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D864EE:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 107
		mov	eax, offset aQu	; "qu"
		cmp	bx, 2
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92198[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8650F:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 108
		mov	eax, offset aNso_za ; "nso_ZA"
		jz	loc_68D85987
		mov	eax, offset aNso ; "nso"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86528:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 109
		mov	eax, offset aBa_ru ; "ba_RU"
		jz	loc_68D85987
		mov	eax, offset aBa	; "ba"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86541:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 110
		mov	eax, offset aLb_lu ; "lb_LU"
		jz	loc_68D85987
		mov	eax, offset aLb	; "lb"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8655A:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 111
		mov	eax, offset aKl_gl ; "kl_GL"
		jz	loc_68D85987
		mov	eax, offset aKl	; "kl"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86573:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 112
		mov	eax, offset aIg_ng ; "ig_NG"
		jz	loc_68D85987
		mov	eax, offset aIg	; "ig"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8658C:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 113
		mov	eax, offset aKr_ng ; "kr_NG"
		jz	loc_68D85987
		mov	eax, offset aKr	; "kr"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D865A5:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 114
		mov	eax, offset aOm_et ; "om_ET"
		jz	loc_68D85987
		mov	eax, offset aOm	; "om"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D865BE:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		sub	ebx, 1		; jumptable 68D85950 case 115
		mov	eax, offset aTi	; "ti"
		cmp	bx, 1
		ja	loc_68D85987
		movzx	ebx, bx
		mov	eax, ds:off_68D92538[ebx*4]
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D865DF:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 116
		mov	eax, offset aGn_py ; "gn_PY"
		jz	loc_68D85987
		mov	eax, offset aGn	; "gn"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D865F8:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 117
		mov	eax, offset aCpe_us ; "cpe_US"
		jz	loc_68D85987
		mov	eax, offset aCpe ; "cpe"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86611:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 118
		mov	eax, offset aLa_va ; "la_VA"
		jz	loc_68D85987
		mov	eax, offset aLa	; "la"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8662A:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 119
		mov	eax, offset aSo_so ; "so_SO"
		jz	loc_68D85987
		mov	eax, offset aSo	; "so"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86643:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 120
		mov	eax, offset aIi_cn ; "ii_CN"
		jz	loc_68D85987
		mov	eax, offset aIi	; "ii"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8665C:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 121
		mov	eax, offset aPap_an ; "pap_AN"
		jz	loc_68D85987
		mov	eax, offset aPap ; "pap"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86675:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 122
		mov	eax, offset aArn_cl ; "arn_CL"
		jz	loc_68D85987
		mov	eax, offset aArn ; "arn"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8668E:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 124
		mov	eax, offset aMoh_ca ; "moh_CA"
		jz	loc_68D85987
		mov	eax, offset aMoh ; "moh"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D866A7:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 126
		mov	eax, offset aBr_fr ; "br_FR"
		jz	loc_68D85987
		mov	eax, offset aBr	; "br"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D866C0:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 128
		mov	eax, offset aUg_cn ; "ug_CN"
		jz	loc_68D85987
		mov	eax, offset aUg	; "ug"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D866D9:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 129
		mov	eax, offset aMi_nz ; "mi_NZ"
		jz	loc_68D85987
		mov	eax, offset aMi	; "mi"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D866F2:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 130
		mov	eax, offset aOc_fr ; "oc_FR"
		jz	loc_68D85987
		mov	eax, offset aOc	; "oc"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8670B:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 131
		mov	eax, offset aCo_fr ; "co_FR"
		jz	loc_68D85987
		mov	eax, offset aCo	; "co"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86724:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 132
		mov	eax, offset aGsw_fr ; "gsw_FR"
		jz	loc_68D85987
		mov	eax, offset aGsw ; "gsw"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8673D:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 133
		mov	eax, offset aSah_ru ; "sah_RU"
		jz	loc_68D85987
		mov	eax, offset aSah ; "sah"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86756:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 134
		mov	eax, offset aQut_gt ; "qut_GT"
		jz	loc_68D85987
		mov	eax, offset aQut ; "qut"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D8676F:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 135
		mov	eax, offset aRw_rw ; "rw_RW"
		jz	loc_68D85987
		mov	eax, offset aRw	; "rw"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D86788:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 136
		mov	eax, offset aWo_sn ; "wo_SN"
		jz	loc_68D85987
		mov	eax, offset aWo	; "wo"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D867A1:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 140
		mov	eax, offset aPrs_af ; "prs_AF"
		jz	loc_68D85987
		mov	eax, offset aPrs ; "prs"
		jmp	loc_68D85987
; ---------------------------------------------------------------------------

loc_68D867BA:				; CODE XREF: sub_68D858F0:loc_68D85950j
					; DATA XREF: .rdata:off_68D917BCo
		cmp	bx, 1		; jumptable 68D85950 case 145
		mov	eax, offset aGd_gb ; "gd_GB"
		jz	loc_68D85987
		mov	eax, offset aGd	; "gd"
		jmp	loc_68D85987
sub_68D858F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D867E0	proc near		; CODE XREF: _nl_language_preferences_default+20Ap

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		movzx	eax, word ptr [esp+0Ch+arg_0]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	sub_68D858F0
sub_68D867E0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. _nl_locale_name_default

; =============== S U B	R O U T	I N E =======================================


		public _nl_locale_name_default
_nl_locale_name_default	proc near	; CODE XREF: libintl_dcigettext:loc_68D851ABp
					; libintl_setlocale:loc_68D8AFA2p ...

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		call	ds:GetThreadLocale
		movzx	eax, ax
		mov	[esp+1Ch+var_1C], eax
		call	sub_68D858F0
		add	esp, 1Ch
		retn
_nl_locale_name_default	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. _nl_locale_name_posix

; =============== S U B	R O U T	I N E =======================================


; int __cdecl nl_locale_name_posix(int,	char *)
		public _nl_locale_name_posix
_nl_locale_name_posix proc near		; CODE XREF: libintl_dcigettext+D4p

VarName		= dword	ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+VarName], offset aLc_all_0 ; "LC_ALL"
		call	getenv
		test	eax, eax
		jz	short loc_68D86838
		cmp	byte ptr [eax],	0
		jnz	short loc_68D8684D

loc_68D86838:				; CODE XREF: _nl_locale_name_posix+11j
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+VarName], eax ; VarName
		call	getenv
		test	eax, eax
		jz	short loc_68D86851
		cmp	byte ptr [eax],	0
		jz	short loc_68D86851

loc_68D8684D:				; CODE XREF: _nl_locale_name_posix+16j
					; _nl_locale_name_posix+3Fj ...
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_68D86851:				; CODE XREF: _nl_locale_name_posix+26j
					; _nl_locale_name_posix+2Bj
		mov	[esp+1Ch+VarName], offset aLang	; "LANG"
		call	getenv
		test	eax, eax
		jz	short loc_68D8684D
		cmp	byte ptr [eax],	1
		sbb	edx, edx
		not	edx
		and	eax, edx
		jmp	short loc_68D8684D
_nl_locale_name_posix endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. _nl_locale_name

; =============== S U B	R O U T	I N E =======================================


; int __cdecl nl_locale_name(int, char *)
		public _nl_locale_name
_nl_locale_name	proc near

VarName		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+VarName], offset aLc_all_0 ; "LC_ALL"
		call	getenv
		test	eax, eax
		jz	short loc_68D8688D
		cmp	byte ptr [eax],	0
		jnz	short loc_68D8689E

loc_68D8688D:				; CODE XREF: _nl_locale_name+16j
		mov	[esp+1Ch+VarName], ebx ; VarName
		call	getenv
		test	eax, eax
		jz	short loc_68D868A3
		cmp	byte ptr [eax],	0
		jz	short loc_68D868A3

loc_68D8689E:				; CODE XREF: _nl_locale_name+1Bj
					; _nl_locale_name+63j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68D868A3:				; CODE XREF: _nl_locale_name+27j
					; _nl_locale_name+2Cj
		mov	[esp+1Ch+VarName], offset aLang	; "LANG"
		call	getenv
		test	eax, eax
		jnz	short loc_68D868D0

loc_68D868B3:				; CODE XREF: _nl_locale_name+65j
		call	ds:GetThreadLocale
		movzx	eax, ax
		mov	[esp+1Ch+arg_0], eax
		add	esp, 18h
		pop	ebx
		jmp	sub_68D858F0
; ---------------------------------------------------------------------------
		align 10h

loc_68D868D0:				; CODE XREF: _nl_locale_name+41j
		cmp	byte ptr [eax],	0
		jnz	short loc_68D8689E
		jmp	short loc_68D868B3
_nl_locale_name	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D868E0	proc near		; CODE XREF: _nl_log_untranslated+FAp
					; _nl_log_untranslated+13Bp ...

Str		= dword	ptr -1Ch
File		= dword	ptr -18h
Count		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 10h
		mov	[esp+1Ch+File],	eax ; File
		mov	[esp+1Ch+Str], 22h ; Ch
		call	putc
		cmp	esi, edi
		jnz	short loc_68D8691C
		jmp	loc_68D86987
; ---------------------------------------------------------------------------

loc_68D86905:				; CODE XREF: sub_68D868E0+49j
		cmp	al, 22h
		jz	short loc_68D8692B

loc_68D86909:				; CODE XREF: sub_68D868E0+5Fj
		movsx	eax, al
		mov	[esp+1Ch+File],	ebx ; File
		mov	[esp+1Ch+Str], eax ; Ch
		call	putc
		cmp	edi, esi
		jz	short loc_68D86987

loc_68D8691C:				; CODE XREF: sub_68D868E0+1Ej
					; sub_68D868E0+A5j
		add	esi, 1
		movzx	eax, byte ptr [esi-1]
		cmp	al, 0Ah
		jz	short loc_68D86941
		cmp	al, 5Ch
		jnz	short loc_68D86905

loc_68D8692B:				; CODE XREF: sub_68D868E0+27j
		mov	[esp+1Ch+File],	ebx ; File
		mov	[esp+1Ch+Str], 5Ch ; Ch
		call	putc
		movzx	eax, byte ptr [esi-1]
		jmp	short loc_68D86909
; ---------------------------------------------------------------------------

loc_68D86941:				; CODE XREF: sub_68D868E0+45j
		mov	[esp+1Ch+var_10], ebx ;	File
		mov	[esp+1Ch+Count], 3 ; Count
		mov	[esp+1Ch+File],	1 ; Size
		mov	[esp+1Ch+Str], offset dword_68D92600 ; Str
		call	fwrite
		cmp	edi, esi
		jz	short loc_68D86997
		mov	[esp+1Ch+var_10], ebx ;	File
		mov	[esp+1Ch+Count], 2 ; Count
		mov	[esp+1Ch+File],	1 ; Size
		mov	[esp+1Ch+Str], offset byte_68D92604 ; Str
		call	fwrite
		jmp	short loc_68D8691C
; ---------------------------------------------------------------------------

loc_68D86987:				; CODE XREF: sub_68D868E0+20j
					; sub_68D868E0+3Aj
		mov	[esp+1Ch+File],	ebx ; File
		mov	[esp+1Ch+Str], 22h ; Ch
		call	putc

loc_68D86997:				; CODE XREF: sub_68D868E0+83j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_68D868E0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. _nl_log_untranslated

; =============== S U B	R O U T	I N E =======================================


; int __cdecl nl_log_untranslated(char *Str, FILE *, char *, char *, int)
		public _nl_log_untranslated
_nl_log_untranslated proc near		; CODE XREF: libintl_dcigettext+671p

Str1		= dword	ptr -3Ch
Str2		= dword	ptr -38h
Count		= dword	ptr -34h
File		= dword	ptr -30h
Source		= dword	ptr -24h
var_20		= dword	ptr -20h
Str		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, ds:Memory
		mov	eax, [esp+3Ch+Str]
		mov	edx, [esp+3Ch+arg_10]
		mov	edi, [esp+3Ch+arg_4]
		test	ebx, ebx
		mov	esi, [esp+3Ch+arg_8]
		mov	[esp+3Ch+Source], eax
		mov	ebp, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_20], edx
		jz	short loc_68D86A18
		mov	[esp+3Ch+Str2],	ebx ; Str2
		mov	[esp+3Ch+Str1],	eax ; Str1
		call	strcmp
		test	eax, eax
		jz	loc_68D86B90
		mov	eax, ds:File
		test	eax, eax
		jz	short loc_68D86A02
		mov	[esp+3Ch+Str1],	eax ; File
		call	fclose
		mov	ebx, ds:Memory
		mov	ds:File, 0

loc_68D86A02:				; CODE XREF: _nl_log_untranslated+48j
		mov	[esp+3Ch+Str1],	ebx ; Memory
		call	free
		mov	eax, [esp+3Ch+Source]
		mov	ds:Memory, 0

loc_68D86A18:				; CODE XREF: _nl_log_untranslated+2Bj
		mov	[esp+3Ch+Str1],	eax ; Str
		call	strlen
		add	eax, 1
		mov	[esp+3Ch+Str1],	eax ; Size
		call	malloc
		test	eax, eax
		mov	ds:Memory, eax
		jz	loc_68D86BC2
		mov	edx, [esp+3Ch+Source]
		mov	[esp+3Ch+Str1],	eax ; Dest
		mov	[esp+3Ch+Str2],	edx ; Source
		call	strcpy
		mov	eax, [esp+3Ch+Source]
		mov	[esp+3Ch+Str2],	offset aA ; "a"
		mov	[esp+3Ch+Str1],	eax ; Filename
		call	fopen
		test	eax, eax
		mov	ebx, eax
		mov	ds:File, eax
		jz	loc_68D86BC2

loc_68D86A6B:				; CODE XREF: _nl_log_untranslated+1F6j
		mov	[esp+3Ch+File],	ebx ; File
		mov	[esp+3Ch+Count], 7 ; Count
		mov	[esp+3Ch+Str2],	1 ; Size
		mov	[esp+3Ch+Str1],	offset aDomain ; "domain "
		call	fwrite
		mov	[esp+3Ch+Str1],	edi ; Str
		call	strlen
		mov	edx, edi
		lea	ecx, [edi+eax]
		mov	eax, ebx
		call	sub_68D868E0
		mov	[esp+3Ch+Str2],	4 ; Val
		mov	[esp+3Ch+Str1],	esi ; Str
		call	strchr
		test	eax, eax
		mov	edi, eax
		jz	short loc_68D86AE3
		mov	[esp+3Ch+File],	ebx ; File
		mov	[esp+3Ch+Count], 9 ; Count
		mov	[esp+3Ch+Str2],	1 ; Size
		mov	[esp+3Ch+Str1],	offset aMsgctxt	; "\nmsgctxt "
		call	fwrite
		mov	edx, esi
		mov	ecx, edi
		mov	eax, ebx
		call	sub_68D868E0
		lea	esi, [edi+1]

loc_68D86AE3:				; CODE XREF: _nl_log_untranslated+113j
		mov	[esp+3Ch+File],	ebx ; File
		mov	[esp+3Ch+Count], 7 ; Count
		mov	[esp+3Ch+Str2],	1 ; Size
		mov	[esp+3Ch+Str1],	offset aMsgid ;	"\nmsgid "
		call	fwrite
		mov	[esp+3Ch+Str1],	esi ; Str
		call	strlen
		mov	edx, esi
		lea	ecx, [esi+eax]
		mov	eax, ebx
		call	sub_68D868E0
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	loc_68D86BA0
		mov	[esp+3Ch+File],	ebx ; File
		mov	[esp+3Ch+Count], 0Eh ; Count
		mov	[esp+3Ch+Str2],	1 ; Size
		mov	[esp+3Ch+Str1],	offset aMsgid_plural ; "\nmsgid_plural "
		call	fwrite
		mov	[esp+3Ch+Str1],	ebp ; Str
		call	strlen
		mov	edx, ebp
		lea	ecx, [ebp+eax+0]
		mov	eax, ebx
		call	sub_68D868E0
		mov	[esp+3Ch+File],	ebx ; File
		mov	[esp+3Ch+Count], 0Eh ; Count
		mov	[esp+3Ch+Str2],	1 ; Size
		mov	[esp+3Ch+Str1],	offset aMsgstr0	; "\nmsgstr[0] \"\"\n"
		call	fwrite

loc_68D86B78:				; CODE XREF: _nl_log_untranslated+220j
		mov	[esp+3Ch+arg_4], ebx ; File
		mov	[esp+3Ch+Str], 0Ah ; Ch
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	putc
; ---------------------------------------------------------------------------

loc_68D86B90:				; CODE XREF: _nl_log_untranslated+3Bj
		mov	ebx, ds:File
		jmp	loc_68D86A6B
; ---------------------------------------------------------------------------
		align 10h

loc_68D86BA0:				; CODE XREF: _nl_log_untranslated+17Dj
		mov	[esp+3Ch+File],	ebx ; File
		mov	[esp+3Ch+Count], 0Bh ; Count
		mov	[esp+3Ch+Str2],	1 ; Size
		mov	[esp+3Ch+Str1],	offset aMsgstr ; "\nmsgstr \"\"\n"
		call	fwrite
		jmp	short loc_68D86B78
; ---------------------------------------------------------------------------

loc_68D86BC2:				; CODE XREF: _nl_log_untranslated+92j
					; _nl_log_untranslated+C5j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_nl_log_untranslated endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_68D86BD0(int,	int, void *, int)
sub_68D86BD0	proc near		; CODE XREF: sub_68D88710+4Ap
					; .text:68D8886Ap ...

Size		= dword	ptr -0D8h
Src		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= byte ptr -0CCh
var_C4		= qword	ptr -0C4h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_A5		= byte ptr -0A5h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
Dst		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
Memory		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
NewSize		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	[esp+0D8h+Size], 2Ch ; Size
		call	malloc
		test	eax, eax
		mov	[ebp+Memory], eax
		jz	loc_68D873A1
		mov	ebx, [ebp+arg_8]
		mov	edi, 1
		mov	[ebp+var_34], 0
		mov	[ebp+var_40], 0
		mov	[ebp+var_50], 0
		mov	dword ptr [ebp+var_48],	0
		mov	[ebp+var_44], 0
		mov	[ebp+var_54], 1
		mov	[ebp+NewSize], 0
		mov	[ebp+var_30], 0
		jmp	short loc_68D86C37
; ---------------------------------------------------------------------------

loc_68D86C35:				; CODE XREF: sub_68D86BD0+78j
		mov	ebx, eax

loc_68D86C37:				; CODE XREF: sub_68D86BD0+63j
					; sub_68D86BD0+A7Fj
		movzx	edx, byte ptr [ebx]
		test	dl, dl
		jz	loc_68D86E90
		cmp	dl, 25h
		lea	eax, [ebx+1]
		jnz	short loc_68D86C35
		imul	esi, [ebp+var_50], 2Ch
		add	esi, [ebp+Memory]
		mov	[esi], ebx
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0FFFFFFFFh
		mov	dword ptr [esi+18h], 0
		mov	dword ptr [esi+1Ch], 0
		mov	dword ptr [esi+20h], 0FFFFFFFFh
		mov	dword ptr [esi+28h], 0FFFFFFFFh
		movzx	edx, byte ptr [ebx+1]
		lea	ecx, [edx-30h]
		cmp	cl, 9
		ja	short loc_68D86CB9
		mov	ecx, eax
		mov	[ebp+var_38], eax
		lea	esi, [esi+0]

loc_68D86CA0:				; CODE XREF: sub_68D86BD0+DBj
		add	ecx, 1
		movzx	ebx, byte ptr [ecx]
		lea	eax, [ebx-30h]
		cmp	al, 9
		jbe	short loc_68D86CA0
		cmp	bl, 24h
		mov	eax, [ebp+var_38]
		jz	loc_68D87A7B

loc_68D86CB9:				; CODE XREF: sub_68D86BD0+C5j
		mov	[ebp+var_38], 0FFFFFFFFh
		jmp	short loc_68D86CE3
; ---------------------------------------------------------------------------

loc_68D86CC2:				; CODE XREF: sub_68D86BD0+11Cj
		cmp	dl, 2Dh
		jz	short loc_68D86CF4
		cmp	dl, 2Bh
		jz	short loc_68D86D00
		cmp	dl, 20h
		nop
		jz	short loc_68D86D06
		cmp	dl, 23h
		jz	short loc_68D86D10
		cmp	dl, 30h
		jnz	short loc_68D86D16
		or	dword ptr [esi+8], 20h

loc_68D86CE0:				; CODE XREF: sub_68D86BD0+122j
					; sub_68D86BD0+128j ...
		movzx	edx, byte ptr [eax]

loc_68D86CE3:				; CODE XREF: sub_68D86BD0+F0j
					; sub_68D86BD0+EFBj
		add	eax, 1
		cmp	dl, 27h
		lea	ebx, [eax-1]
		jnz	short loc_68D86CC2
		or	dword ptr [esi+8], 1
		jmp	short loc_68D86CE0
; ---------------------------------------------------------------------------

loc_68D86CF4:				; CODE XREF: sub_68D86BD0+F5j
		or	dword ptr [esi+8], 2
		jmp	short loc_68D86CE0
; ---------------------------------------------------------------------------
		align 10h

loc_68D86D00:				; CODE XREF: sub_68D86BD0+FAj
		or	dword ptr [esi+8], 4
		jmp	short loc_68D86CE0
; ---------------------------------------------------------------------------

loc_68D86D06:				; CODE XREF: sub_68D86BD0+100j
		or	dword ptr [esi+8], 8
		jmp	short loc_68D86CE0
; ---------------------------------------------------------------------------
		align 10h

loc_68D86D10:				; CODE XREF: sub_68D86BD0+105j
		or	dword ptr [esi+8], 10h
		jmp	short loc_68D86CE0
; ---------------------------------------------------------------------------

loc_68D86D16:				; CODE XREF: sub_68D86BD0+10Aj
		cmp	dl, 2Ah
		jz	loc_68D87320
		lea	eax, [edx-30h]
		cmp	al, 9
		ja	loc_68D86E3D
		mov	[esi+0Ch], ebx
		movzx	eax, byte ptr [ebx]
		sub	eax, 30h
		cmp	al, 9
		ja	loc_68D880A4
		mov	ecx, ebx
		lea	esi, [esi+0]

loc_68D86D40:				; CODE XREF: sub_68D86BD0+17Bj
		add	ecx, 1
		movzx	eax, byte ptr [ecx]
		sub	eax, 30h
		cmp	al, 9
		jbe	short loc_68D86D40
		mov	eax, ecx
		sub	eax, ebx
		cmp	[ebp+var_44], eax
		mov	[ebp+var_58], eax
		mov	[esi+10h], ecx
		jnb	loc_68D86E38
		movzx	edx, byte ptr [ecx]
		mov	ebx, [ebp+var_40]
		mov	eax, [ebp+NewSize]
		cmp	dl, 2Eh
		mov	[ebp+var_60], ebx
		mov	[ebp+var_3C], eax
		jnz	loc_68D86E5A

loc_68D86D78:				; CODE XREF: sub_68D86BD0+284j
		cmp	byte ptr [ecx+1], 2Ah
		lea	ebx, [ecx+1]
		jz	loc_68D87BF4
		mov	[esi+18h], ecx
		movzx	eax, byte ptr [ecx+1]
		sub	eax, 30h
		cmp	al, 9
		ja	short loc_68D86DA0

loc_68D86D93:				; CODE XREF: sub_68D86BD0+1CEj
		add	ebx, 1
		movzx	eax, byte ptr [ebx]
		sub	eax, 30h
		cmp	al, 9
		jbe	short loc_68D86D93

loc_68D86DA0:				; CODE XREF: sub_68D86BD0+1C1j
		mov	edx, dword ptr [ebp+var_48]
		mov	eax, ebx
		sub	eax, ecx
		mov	[esi+1Ch], ebx
		mov	[ebp+var_44], eax
		cmp	eax, edx
		jbe	loc_68D87AFC
		mov	ecx, [ebp+var_3C]
		movzx	edx, byte ptr [ebx]
		mov	[ebp+NewSize], ecx

loc_68D86DBE:				; CODE XREF: sub_68D86BD0+298j
					; sub_68D86BD0+F3Bj ...
		xor	eax, eax
		jmp	short loc_68D86E23
; ---------------------------------------------------------------------------

loc_68D86DC2:				; CODE XREF: sub_68D86BD0+256j
		cmp	dl, 4Ch
		jz	loc_68D86E70
		cmp	dl, 6Ch
		jz	loc_68D86E80
		cmp	dl, 6Ah
		jz	loc_68D86E88
		cmp	dl, 5Ah
		jz	loc_68D86E78
		cmp	dl, 7Ah
		jz	loc_68D86E78
		cmp	dl, 74h
		jz	loc_68D86E78
		cmp	dl, 49h
		nop
		lea	esi, [esi+0]
		jnz	loc_68D872DF
		cmp	byte ptr [ebx+1], 36h
		jnz	loc_68D872EB	; jumptable 68D87420 default case
		cmp	byte ptr [ebx+2], 34h
		jnz	loc_68D872EB	; jumptable 68D87420 default case
		add	eax, 10h
		add	ebx, 3

loc_68D86E20:				; CODE XREF: sub_68D86BD0+266j
					; sub_68D86BD0+2A6j ...
		movzx	edx, byte ptr [ebx]

loc_68D86E23:				; CODE XREF: sub_68D86BD0+1F0j
		cmp	dl, 68h
		jnz	short loc_68D86DC2
		mov	ecx, eax
		mov	edx, edi
		and	ecx, 1
		add	ebx, 1
		shl	edx, cl
		or	eax, edx
		jmp	short loc_68D86E20
; ---------------------------------------------------------------------------

loc_68D86E38:				; CODE XREF: sub_68D86BD0+18Aj
		mov	ebx, ecx

loc_68D86E3A:				; CODE XREF: sub_68D86BD0+14D7j
		movzx	edx, byte ptr [ebx]

loc_68D86E3D:				; CODE XREF: sub_68D86BD0+154j
		mov	ecx, [ebp+var_40]
		mov	eax, [ebp+var_44]
		mov	[ebp+var_60], ecx
		mov	ecx, [ebp+NewSize]
		mov	[ebp+var_58], eax
		mov	[ebp+var_3C], ecx
		mov	ecx, ebx

loc_68D86E51:				; CODE XREF: sub_68D86BD0+920j
					; sub_68D86BD0+E85j
		cmp	dl, 2Eh
		jz	loc_68D86D78

loc_68D86E5A:				; CODE XREF: sub_68D86BD0+1A2j
		mov	ebx, dword ptr [ebp+var_48]
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_44], ebx
		mov	ebx, ecx
		mov	[ebp+NewSize], eax
		jmp	loc_68D86DBE
; ---------------------------------------------------------------------------
		align 10h

loc_68D86E70:				; CODE XREF: sub_68D86BD0+1F5j
		or	eax, 4
		add	ebx, 1
		jmp	short loc_68D86E20
; ---------------------------------------------------------------------------

loc_68D86E78:				; CODE XREF: sub_68D86BD0+210j
					; sub_68D86BD0+219j ...
		add	ebx, 1
		jmp	short loc_68D86E20
; ---------------------------------------------------------------------------
		align 10h

loc_68D86E80:				; CODE XREF: sub_68D86BD0+1FEj
		add	eax, 8
		add	ebx, 1
		jmp	short loc_68D86E20
; ---------------------------------------------------------------------------

loc_68D86E88:				; CODE XREF: sub_68D86BD0+207j
		add	eax, 10h
		add	ebx, 1
		jmp	short loc_68D86E20
; ---------------------------------------------------------------------------

loc_68D86E90:				; CODE XREF: sub_68D86BD0+6Cj
		mov	esi, [ebp+var_34]
		xor	edx, edx
		imul	eax, [ebp+var_50], 2Ch
		mov	ecx, [ebp+Memory]
		test	esi, esi
		mov	[eax+ecx], ebx
		mov	eax, [ebp+var_40]
		jz	short loc_68D86F17
		mov	edi, [ebp+var_34]
		mov	esi, [ebp+arg_C]
		lea	esi, [esi+0]

loc_68D86EB0:				; CODE XREF: sub_68D86BD0+332j
		cmp	dword ptr [eax], 11h ; switch 18 cases
		jbe	short loc_68D86EE5

loc_68D86EB5:				; CODE XREF: sub_68D86BD0+317j
					; DATA XREF: .rdata:off_68D92658o
		mov	eax, [ebp+Memory] ; jumptable 68D86EE7 default case
		mov	[esp+0D8h+Size], eax ; Memory
		call	free
		mov	ecx, [ebp+var_40]
		test	ecx, ecx
		jz	short loc_68D86ED2
		mov	edx, [ebp+var_40]
		mov	[esp+0D8h+Size], edx ; Memory
		call	free

loc_68D86ED2:				; CODE XREF: sub_68D86BD0+2F5j
		call	ds:_errno
		xor	ebx, ebx
		mov	dword ptr [eax], 16h
		jmp	loc_68D87316
; ---------------------------------------------------------------------------

loc_68D86EE5:				; CODE XREF: sub_68D86BD0+2E3j
		mov	ecx, [eax]
		jmp	ds:off_68D92658[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D86EEE:				; CODE XREF: sub_68D86BD0+317j
					; DATA XREF: .rdata:off_68D92658o
		lea	ecx, [esi+4]	; jumptable 68D86EE7 cases 5-8,11,13-17
		mov	esi, [esi]
		mov	[eax+8], esi

loc_68D86EF6:				; CODE XREF: sub_68D86BD0+70Aj
					; sub_68D86BD0+85Fj ...
		add	edx, 1
		add	eax, 18h
		cmp	edx, edi
		jnb	short loc_68D86F17

loc_68D86F00:				; CODE XREF: sub_68D86BD0+345j
		mov	esi, ecx
		jmp	short loc_68D86EB0
; ---------------------------------------------------------------------------

loc_68D86F04:				; CODE XREF: sub_68D86BD0+317j
					; DATA XREF: .rdata:off_68D92658o
		lea	ecx, [esi+4]	; jumptable 68D86EE7 cases 3,4
		mov	esi, [esi]
		add	edx, 1
		mov	[eax+8], si
		add	eax, 18h
		cmp	edx, edi
		jb	short loc_68D86F00

loc_68D86F17:				; CODE XREF: sub_68D86BD0+2D4j
					; sub_68D86BD0+32Ej
		mov	eax, [ebp+var_44]
		add	eax, 7
		sbb	edx, edx
		or	eax, edx
		add	eax, dword ptr [ebp+var_48]
		jb	loc_68D87731
		mov	edx, eax
		add	edx, 6
		jb	loc_68D886E5
		cmp	edx, 0F9Fh
		ja	loc_68D88046
		add	eax, 24h
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		lea	edi, [esp+0D8h+var_A5]
		and	edi, 0FFFFFFF0h
		mov	[ebp+var_38], edi
		mov	[ebp+var_68], 0

loc_68D86F5D:				; CODE XREF: sub_68D86BD0+1495j
		mov	edx, [ebp+arg_0]
		xor	ebx, ebx
		mov	[ebp+NewSize], 0
		test	edx, edx
		jz	short loc_68D86F78
		mov	ebx, [ebp+arg_4]
		mov	ebx, [ebx]
		mov	[ebp+NewSize], ebx
		mov	ebx, [ebp+arg_0]

loc_68D86F78:				; CODE XREF: sub_68D86BD0+39Bj
		mov	eax, [ebp+var_38]
		xor	esi, esi
		mov	edi, [ebp+Memory]
		mov	ecx, [ebp+var_38]
		mov	edx, [ebp+arg_8]
		add	eax, 1
		mov	[ebp+var_34], edi
		mov	[ebp+Dst], eax
		mov	eax, [ebp+var_34]
		add	ecx, 2
		mov	[ebp+var_6C], 0
		mov	edi, edx
		mov	[ebp+var_94], ecx

loc_68D86FA4:				; CODE XREF: sub_68D86BD0+E68j
		mov	ecx, [eax]
		cmp	ecx, edi
		jz	loc_68D87052
		sub	ecx, edi
		mov	edx, ecx
		add	edx, esi
		sbb	eax, eax
		or	edx, eax
		cmp	[ebp+NewSize], edx
		jnb	short loc_68D87031
		cmp	[ebp+NewSize], 0
		jnz	loc_68D87998
		mov	[ebp+NewSize], 0Ch

loc_68D86FCE:				; CODE XREF: sub_68D86BD0+DD1j
		cmp	[ebp+NewSize], edx
		jnb	short loc_68D86FD6
		mov	[ebp+NewSize], edx

loc_68D86FD6:				; CODE XREF: sub_68D86BD0+401j
		cmp	[ebp+NewSize], 0FFFFFFFFh
		jz	loc_68D881F8
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_3C]
		test	ebx, ebx
		jz	short loc_68D86FF5
		cmp	byte ptr [ebp+var_3C], 0
		jz	loc_68D87766

loc_68D86FF5:				; CODE XREF: sub_68D86BD0+419j
		mov	eax, [ebp+NewSize]
		mov	[ebp+var_9C], edx
		mov	[ebp+var_98], ecx
		mov	[esp+0D8h+Size], eax ; Size
		call	malloc
		mov	edx, [ebp+var_9C]
		mov	ecx, [ebp+var_98]
		mov	[ebp+var_30], eax

loc_68D8701B:				; CODE XREF: sub_68D86BD0+BC0j
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	loc_68D881F8
		test	esi, esi
		jnz	loc_68D87BB7

loc_68D8702E:				; CODE XREF: sub_68D86BD0+FEBj
		mov	ebx, [ebp+var_30]

loc_68D87031:				; CODE XREF: sub_68D86BD0+3EBj
					; sub_68D86BD0+101Fj
		lea	esi, [ebx+esi]
		mov	[esp+0D8h+Size], esi ; Dst
		mov	[ebp+var_9C], edx
		mov	[esp+0D8h+var_D0], ecx ; Size
		mov	[esp+0D8h+Src],	edi ; Src
		call	memcpy
		mov	edx, [ebp+var_9C]
		mov	esi, edx

loc_68D87052:				; CODE XREF: sub_68D86BD0+3D8j
		mov	edi, [ebp+var_50]
		cmp	[ebp+var_6C], edi
		jz	loc_68D88250
		mov	eax, [ebp+var_34]
		movzx	edx, byte ptr [eax+24h]
		cmp	dl, 25h
		jz	loc_68D879A6
		mov	eax, [eax+28h]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D8785F	; jumptable 68D87867 default case
		cmp	dl, 6Eh
		jz	loc_68D87AD0
		mov	ecx, [ebp+var_40]
		lea	eax, [eax+eax*2]
		mov	edx, [ebp+var_34]
		mov	edi, [ebp+var_34]
		mov	[ebp+var_60], 0
		mov	eax, [ecx+eax*8]
		mov	ecx, [edx+10h]
		mov	edi, [edi+8]
		mov	[ebp+var_54], eax
		mov	eax, [edx+0Ch]
		mov	[ebp+var_3C], ecx
		mov	[ebp+var_30], edi
		cmp	eax, ecx
		jz	short loc_68D870DB
		mov	edx, [edx+14h]
		cmp	edx, 0FFFFFFFFh
		jz	loc_68D8800F
		lea	eax, [edx+edx*2]
		mov	edx, [ebp+var_40]
		lea	eax, [edx+eax*8]
		cmp	dword ptr [eax], 5
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		mov	eax, [eax+8]
		test	eax, eax
		mov	[ebp+var_60], eax
		js	loc_68D8806A

loc_68D870DB:				; CODE XREF: sub_68D86BD0+4DDj
					; sub_68D86BD0+1471j ...
		mov	edi, [ebp+var_34]
		mov	eax, [edi+1Ch]
		mov	ecx, [edi+18h]
		mov	[ebp+var_3C], eax
		cmp	ecx, eax
		jz	loc_68D87F8C
		mov	eax, [edi+20h]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D87FBF
		mov	edx, [ebp+var_40]
		lea	eax, [eax+eax*2]
		lea	eax, [edx+eax*8]
		cmp	dword ptr [eax], 5
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		mov	eax, [eax+8]
		mov	[ebp+var_74], 1
		test	eax, eax
		mov	[ebp+var_44], eax
		js	loc_68D87F8C

loc_68D87122:				; CODE XREF: sub_68D86BD0+13CAj
					; sub_68D86BD0+1403j ...
		mov	ecx, [ebp+var_38]
		mov	byte ptr [ecx],	25h
		mov	edi, [ebp+Dst]
		test	byte ptr [ebp+var_30], 1
		jz	short loc_68D8713A
		mov	byte ptr [edi],	27h
		mov	edi, [ebp+var_94]

loc_68D8713A:				; CODE XREF: sub_68D86BD0+55Fj
		test	byte ptr [ebp+var_30], 2
		jz	short loc_68D87146
		mov	byte ptr [edi],	2Dh
		add	edi, 1

loc_68D87146:				; CODE XREF: sub_68D86BD0+56Ej
		test	byte ptr [ebp+var_30], 4
		jz	short loc_68D87152
		mov	byte ptr [edi],	2Bh
		add	edi, 1

loc_68D87152:				; CODE XREF: sub_68D86BD0+57Aj
		test	byte ptr [ebp+var_30], 8
		jz	short loc_68D8715E
		mov	byte ptr [edi],	20h
		add	edi, 1

loc_68D8715E:				; CODE XREF: sub_68D86BD0+586j
		test	byte ptr [ebp+var_30], 10h
		jz	short loc_68D8716A
		mov	byte ptr [edi],	23h
		add	edi, 1

loc_68D8716A:				; CODE XREF: sub_68D86BD0+592j
		test	byte ptr [ebp+var_30], 20h
		jz	short loc_68D87176
		mov	byte ptr [edi],	30h
		add	edi, 1

loc_68D87176:				; CODE XREF: sub_68D86BD0+59Ej
		mov	edx, [ebp+var_34]
		mov	eax, [edx+0Ch]
		mov	edx, [edx+10h]
		cmp	eax, edx
		jz	short loc_68D871A3
		sub	edx, eax
		mov	[esp+0D8h+var_D0], edx ; Size
		mov	[esp+0D8h+Size], edi ; Dst
		mov	[ebp+var_9C], edx
		mov	[esp+0D8h+Src],	eax ; Src
		call	memcpy
		mov	edx, [ebp+var_9C]
		add	edi, edx

loc_68D871A3:				; CODE XREF: sub_68D86BD0+5B1j
		mov	edx, [ebp+var_34]
		mov	eax, [edx+18h]
		mov	edx, [edx+1Ch]
		cmp	eax, edx
		jz	short loc_68D871D0
		sub	edx, eax
		mov	[esp+0D8h+var_D0], edx ; Size
		mov	[esp+0D8h+Size], edi ; Dst
		mov	[ebp+var_9C], edx
		mov	[esp+0D8h+Src],	eax ; Src
		call	memcpy
		mov	edx, [ebp+var_9C]
		add	edi, edx

loc_68D871D0:				; CODE XREF: sub_68D86BD0+5DEj
		cmp	[ebp+var_54], 7
		jb	short loc_68D871EC
		cmp	[ebp+var_54], 8
		jbe	loc_68D87D5A
		cmp	[ebp+var_54], 0Ah
		jnz	short loc_68D871EC
		mov	byte ptr [edi],	4Ch
		add	edi, 1

loc_68D871EC:				; CODE XREF: sub_68D86BD0+604j
					; sub_68D86BD0+614j ...
		mov	edx, [ebp+var_34]
		lea	ecx, [edi+1]
		movzx	eax, byte ptr [edx+24h]
		mov	[edi], al
		mov	[ebp+var_8C], ecx
		mov	byte ptr [edi+1], 0
		mov	eax, [edx+14h]
		mov	edx, 1
		mov	[ebp+var_3C], 0
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68D8723A
		mov	edi, [ebp+var_40]
		lea	eax, [eax+eax*2]
		lea	eax, [edi+eax*8]
		cmp	dword ptr [eax], 5
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		mov	eax, [eax+8]
		mov	edx, 2
		mov	[ebp+var_3C], 1
		mov	[ebp+var_24], eax

loc_68D8723A:				; CODE XREF: sub_68D86BD0+644j
		mov	ecx, [ebp+var_34]
		mov	eax, [ecx+20h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68D87264
		mov	edi, [ebp+var_40]
		lea	eax, [eax+eax*2]
		lea	eax, [edi+eax*8]
		cmp	dword ptr [eax], 5
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		mov	eax, [eax+8]
		mov	ecx, [ebp+var_3C]
		mov	[ebp+var_3C], edx
		mov	[ebp+ecx*4+var_24], eax

loc_68D87264:				; CODE XREF: sub_68D86BD0+673j
		mov	edi, esi
		add	edi, 2
		sbb	eax, eax
		or	eax, edi
		cmp	[ebp+NewSize], eax
		mov	[ebp+var_64], edi
		jnb	loc_68D877E5
		mov	eax, [ebp+NewSize]
		test	eax, eax
		jnz	loc_68D87D70
		mov	[ebp+NewSize], 0Ch

loc_68D8728B:				; CODE XREF: sub_68D86BD0+11ACj
		cmp	[ebp+var_64], esi
		sbb	eax, eax
		or	eax, [ebp+var_64]
		cmp	[ebp+NewSize], eax
		jnb	loc_68D8779B
		cmp	esi, [ebp+var_64]
		jbe	loc_68D87795
		mov	eax, ds:_errno
		mov	[ebp+var_58], eax

loc_68D872AD:				; CODE XREF: sub_68D86BD0+D6Bj
					; sub_68D86BD0+D8Cj ...
		test	ebx, ebx
		jnz	loc_68D88206

loc_68D872B5:				; CODE XREF: sub_68D86BD0+1639j
					; sub_68D86BD0+1647j
		cmp	[ebp+var_68], 0
		jz	loc_68D8773A
		mov	edx, [ebp+var_68]
		mov	[esp+0D8h+Size], edx ; Memory
		call	free
		jmp	loc_68D8773A
; ---------------------------------------------------------------------------
		align 10h

loc_68D872D0:				; CODE XREF: sub_68D86BD0+317j
					; DATA XREF: .rdata:off_68D92658o
		lea	ecx, [esi+4]	; jumptable 68D86EE7 cases 1,2
		mov	esi, [esi]
		mov	ebx, esi
		mov	[eax+8], bl
		jmp	loc_68D86EF6
; ---------------------------------------------------------------------------

loc_68D872DF:				; CODE XREF: sub_68D86BD0+230j
		lea	ecx, [edx-25h]
		cmp	cl, 53h		; switch 84 cases
		jbe	loc_68D8741D

loc_68D872EB:				; CODE XREF: sub_68D86BD0+23Aj
					; sub_68D86BD0+244j ...
		mov	ebx, [ebp+var_40] ; jumptable 68D87420 default case
		test	ebx, ebx
		jz	short loc_68D872FD
		mov	ebx, [ebp+var_40]
		mov	[esp+0D8h+Size], ebx ; Memory
		call	free

loc_68D872FD:				; CODE XREF: sub_68D86BD0+720j
		mov	edi, [ebp+Memory]
		xor	ebx, ebx
		mov	[esp+0D8h+Size], edi ; Memory
		call	free
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_68D87316:				; CODE XREF: sub_68D86BD0+310j
					; sub_68D86BD0+7DFj ...
		lea	esp, [ebp-0Ch]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D87320:				; CODE XREF: sub_68D86BD0+149j
		mov	edx, [ebp+var_44]
		mov	ecx, eax
		mov	[esi+0Ch], ebx
		mov	[esi+10h], eax
		test	edx, edx
		jnz	short loc_68D87336
		mov	[ebp+var_44], 1

loc_68D87336:				; CODE XREF: sub_68D86BD0+75Dj
		movzx	edx, byte ptr [eax]
		mov	byte ptr [ebp+var_3C], dl
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_68D873B4

loc_68D87344:				; CODE XREF: sub_68D86BD0+7F5j
		mov	eax, [esi+14h]

loc_68D87347:				; CODE XREF: sub_68D86BD0+848j
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D87D3D
		mov	ebx, [ebp+NewSize]
		mov	edx, eax
		mov	[ebp+NewSize], eax
		mov	[ebp+var_3C], ebx

loc_68D8735B:				; CODE XREF: sub_68D86BD0+1185j
		cmp	[ebp+var_30], edx
		ja	loc_68D8749E
		mov	eax, [ebp+var_30]
		sar	[ebp+var_30], 1Fh
		add	eax, eax
		or	[ebp+var_30], eax
		cmp	[ebp+var_30], edx
		ja	loc_68D8745D
		add	edx, 1
		mov	[ebp+var_30], edx
		jnb	loc_68D8745D

loc_68D87385:				; CODE XREF: sub_68D86BD0+894j
					; sub_68D86BD0+8C5j ...
		cmp	[ebp+var_40], 0
		jz	short loc_68D87396
		mov	edx, [ebp+var_40]
		mov	[esp+0D8h+Size], edx ; Memory
		call	free

loc_68D87396:				; CODE XREF: sub_68D86BD0+7B9j
		mov	ecx, [ebp+Memory]
		mov	[esp+0D8h+Size], ecx ; Memory
		call	free

loc_68D873A1:				; CODE XREF: sub_68D86BD0+1Dj
		call	ds:_errno
		xor	ebx, ebx
		mov	dword ptr [eax], 0Ch
		jmp	loc_68D87316
; ---------------------------------------------------------------------------

loc_68D873B4:				; CODE XREF: sub_68D86BD0+772j
					; sub_68D86BD0+7F0j
		add	eax, 1
		movzx	edx, byte ptr [eax]
		lea	ebx, [edx-30h]
		cmp	bl, 9
		jbe	short loc_68D873B4
		cmp	dl, 24h
		jnz	loc_68D87344
		movzx	edx, byte ptr [ebp+var_3C]
		xor	eax, eax

loc_68D873D1:				; CODE XREF: sub_68D86BD0+82Cj
		movsx	edx, dl
		cmp	eax, 19999999h
		lea	ebx, [edx-30h]
		mov	edx, 0FFFFFFFFh
		ja	short loc_68D873E8
		lea	edx, [eax+eax*4]
		add	edx, edx

loc_68D873E8:				; CODE XREF: sub_68D86BD0+811j
		mov	eax, edx
		add	eax, ebx
		sbb	edx, edx
		add	ecx, 1
		or	eax, edx
		movzx	edx, byte ptr [ecx]
		lea	ebx, [edx-30h]
		cmp	bl, 9
		jbe	short loc_68D873D1
		test	eax, eax
		jz	loc_68D872EB	; jumptable 68D87420 default case
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D872EB	; jumptable 68D87420 default case
		sub	eax, 1
		add	ecx, 1
		mov	[esi+14h], eax
		jmp	loc_68D87347
; ---------------------------------------------------------------------------

loc_68D8741D:				; CODE XREF: sub_68D86BD0+715j
		movzx	ecx, cl
		jmp	ds:off_68D926A0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D87427:				; CODE XREF: sub_68D86BD0+317j
					; DATA XREF: .rdata:off_68D92658o
		fld	qword ptr [esi]	; jumptable 68D86EE7 case 9
		lea	ecx, [esi+8]
		fstp	qword ptr [eax+8]
		jmp	loc_68D86EF6
; ---------------------------------------------------------------------------

loc_68D87434:				; CODE XREF: sub_68D86BD0+317j
					; DATA XREF: .rdata:off_68D92658o
		fld	tbyte ptr [esi]	; jumptable 68D86EE7 case 10
		lea	ecx, [esi+0Ch]
		fstp	tbyte ptr [eax+8]
		jmp	loc_68D86EF6
; ---------------------------------------------------------------------------

loc_68D87441:				; CODE XREF: sub_68D86BD0+317j
					; DATA XREF: .rdata:off_68D92658o
		lea	ecx, [esi+4]	; jumptable 68D86EE7 case 12
		mov	esi, [esi]
		test	esi, esi
		mov	[eax+8], esi
		jnz	loc_68D86EF6
		mov	dword ptr [eax+8], offset aNull	; "(NULL)"
		jmp	loc_68D86EF6
; ---------------------------------------------------------------------------

loc_68D8745D:				; CODE XREF: sub_68D86BD0+7A3j
					; sub_68D86BD0+7AFj
		cmp	[ebp+var_30], 0AAAAAAAh
		ja	loc_68D87385
		imul	eax, [ebp+var_30], 18h
		cmp	[ebp+var_40], 0
		jz	loc_68D880F6
		mov	ebx, [ebp+var_40]
		mov	[ebp+var_98], ecx
		mov	[esp+0D8h+Src],	eax ; NewSize
		mov	[esp+0D8h+Size], ebx ; Memory
		call	realloc
		mov	ecx, [ebp+var_98]

loc_68D87493:				; CODE XREF: sub_68D86BD0+153Aj
		test	eax, eax
		jz	loc_68D87385
		mov	[ebp+var_40], eax

loc_68D8749E:				; CODE XREF: sub_68D86BD0+78Ej
		mov	eax, [ebp+NewSize]
		cmp	[ebp+var_34], eax
		ja	short loc_68D874C8
		mov	edx, [ebp+var_34]
		mov	ebx, [ebp+var_40]
		lea	eax, [edx+edx*2]
		lea	eax, [ebx+eax*8]
		mov	ebx, [ebp+NewSize]

loc_68D874B5:				; CODE XREF: sub_68D86BD0+8F3j
		add	edx, 1
		mov	dword ptr [eax], 0
		add	eax, 18h
		cmp	edx, ebx
		jbe	short loc_68D874B5
		mov	[ebp+var_34], edx

loc_68D874C8:				; CODE XREF: sub_68D86BD0+8D4j
		mov	edx, [ebp+NewSize]
		mov	ebx, [ebp+var_40]
		lea	eax, [edx+edx*2]
		lea	eax, [ebx+eax*8]
		mov	edx, [eax]
		test	edx, edx
		jnz	loc_68D87A3D
		mov	dword ptr [eax], 5
		mov	eax, [ebp+var_44]
		movzx	edx, byte ptr [ecx]
		mov	[ebp+var_60], ebx
		mov	[ebp+var_58], eax
		jmp	loc_68D86E51
; ---------------------------------------------------------------------------

loc_68D874F5:				; CODE XREF: sub_68D86BD0+850j
					; DATA XREF: .rdata:off_68D926A0o
		cmp	eax, 7		; jumptable 68D87420 case 62
		jg	loc_68D872EB	; jumptable 68D87420 default case
		mov	[ebp+var_5C], 0Bh

loc_68D87505:				; CODE XREF: sub_68D86BD0+A92j
					; sub_68D86BD0+AA0j ...
		mov	ecx, [ebp+var_38]
		cmp	ecx, 0FFFFFFFFh
		mov	[esi+28h], ecx
		jnz	short loc_68D8752A
		mov	eax, [ebp+NewSize]
		cmp	eax, 0FFFFFFFFh
		mov	[esi+28h], eax
		jz	loc_68D872EB	; jumptable 68D87420 default case
		mov	ecx, eax
		add	ecx, 1
		mov	[ebp+var_38], eax
		mov	[ebp+NewSize], ecx

loc_68D8752A:				; CODE XREF: sub_68D86BD0+93Ej
		mov	eax, [ebp+var_38]
		cmp	[ebp+var_30], eax
		ja	short loc_68D87593
		mov	ecx, eax
		mov	eax, [ebp+var_30]
		sar	[ebp+var_30], 1Fh
		add	eax, eax
		or	[ebp+var_30], eax
		cmp	[ebp+var_30], ecx
		ja	short loc_68D87551
		add	ecx, 1
		mov	[ebp+var_30], ecx
		jb	loc_68D87385

loc_68D87551:				; CODE XREF: sub_68D86BD0+973j
		cmp	[ebp+var_30], 0AAAAAAAh
		ja	loc_68D87385
		imul	eax, [ebp+var_30], 18h
		cmp	[ebp+var_40], 0
		jz	loc_68D880AC
		mov	[esp+0D8h+Src],	eax ; NewSize
		mov	eax, [ebp+var_40]
		mov	byte ptr [ebp+var_9C], dl
		mov	[esp+0D8h+Size], eax ; Memory
		call	realloc
		movzx	edx, byte ptr [ebp+var_9C]

loc_68D87588:				; CODE XREF: sub_68D86BD0+14F1j
		test	eax, eax
		jz	loc_68D87385
		mov	[ebp+var_40], eax

loc_68D87593:				; CODE XREF: sub_68D86BD0+960j
		mov	ecx, [ebp+var_38]
		cmp	[ebp+var_34], ecx
		ja	short loc_68D875D4
		mov	eax, [ebp+var_34]
		mov	ecx, [ebp+var_40]
		mov	[ebp+var_3C], ebx
		mov	ebx, [ebp+var_34]
		mov	dword ptr [ebp+var_48],	esi
		mov	esi, [ebp+var_38]
		lea	eax, [eax+eax*2]
		lea	ecx, [ecx+eax*8]
		mov	eax, ecx
		mov	ecx, [ebp+var_5C]

loc_68D875B8:				; CODE XREF: sub_68D86BD0+9F6j
		add	ebx, 1
		mov	dword ptr [eax], 0
		add	eax, 18h
		cmp	ebx, esi
		jbe	short loc_68D875B8
		mov	[ebp+var_34], ebx
		mov	esi, dword ptr [ebp+var_48]
		mov	ebx, [ebp+var_3C]
		mov	[ebp+var_5C], ecx

loc_68D875D4:				; CODE XREF: sub_68D86BD0+9C9j
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+var_40]
		lea	eax, [eax+eax*2]
		lea	ecx, [ecx+eax*8]
		mov	eax, [ecx]
		mov	[ebp+var_3C], ecx
		test	eax, eax
		mov	[ebp+var_38], eax
		jnz	loc_68D87723
		mov	eax, [ebp+var_5C]
		mov	[ecx], eax

loc_68D875F5:				; CODE XREF: sub_68D86BD0+850j
					; sub_68D86BD0+B56j
					; DATA XREF: ...
		mov	[esi+24h], dl	; jumptable 68D87420 case 0
		mov	edx, [ebp+var_54]
		add	ebx, 1
		add	[ebp+var_50], 1
		cmp	[ebp+var_50], edx
		mov	[esi+4], ebx
		mov	eax, [ebp+Memory]
		jb	short loc_68D87640
		test	edx, edx
		js	loc_68D87385
		shl	[ebp+var_54], 1
		cmp	[ebp+var_54], 5D1745Dh
		ja	loc_68D87385
		imul	eax, [ebp+var_54], 2Ch
		mov	ecx, [ebp+Memory]
		mov	[esp+0D8h+Src],	eax ; NewSize
		mov	[esp+0D8h+Size], ecx ; Memory
		call	realloc
		test	eax, eax
		jz	loc_68D87385

loc_68D87640:				; CODE XREF: sub_68D86BD0+A3Bj
		mov	[ebp+Memory], eax
		mov	edx, [ebp+var_58]
		mov	eax, [ebp+var_44]
		mov	[ebp+var_44], edx
		mov	dword ptr [ebp+var_48],	eax
		jmp	loc_68D86C37
; ---------------------------------------------------------------------------

loc_68D87654:				; CODE XREF: sub_68D86BD0+850j
					; DATA XREF: .rdata:off_68D926A0o
		cmp	eax, 0Fh	; jumptable 68D87420 cases 28,32-34,60,64-66
		jg	short loc_68D87668
		test	al, 4
		mov	[ebp+var_5C], 9
		jz	loc_68D87505

loc_68D87668:				; CODE XREF: sub_68D86BD0+A87j
		mov	[ebp+var_5C], 0Ah
		nop
		jmp	loc_68D87505
; ---------------------------------------------------------------------------

loc_68D87675:				; CODE XREF: sub_68D86BD0+850j
					; DATA XREF: .rdata:off_68D926A0o
		cmp	eax, 7		; jumptable 68D87420 cases 51,74,80,83
		mov	[ebp+var_5C], 8
		jg	loc_68D87505
		test	al, 2
		mov	[ebp+var_5C], 2
		jnz	loc_68D87505
		and	eax, 1
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 2
		add	eax, 4
		mov	[ebp+var_5C], eax
		jmp	loc_68D87505
; ---------------------------------------------------------------------------

loc_68D876AA:				; CODE XREF: sub_68D86BD0+850j
					; DATA XREF: .rdata:off_68D926A0o
		cmp	eax, 7		; jumptable 68D87420 case 78
		jg	loc_68D872EB	; jumptable 68D87420 default case
		mov	[ebp+var_5C], 0Ch
		jmp	loc_68D87505
; ---------------------------------------------------------------------------

loc_68D876BF:				; CODE XREF: sub_68D86BD0+850j
					; DATA XREF: .rdata:off_68D926A0o
		cmp	eax, 7		; jumptable 68D87420 case 73
		mov	[ebp+var_5C], 11h
		jg	loc_68D87505
		test	al, 2
		mov	[ebp+var_5C], 0Eh
		jnz	loc_68D87505
		and	eax, 1
		neg	eax
		add	eax, 10h
		mov	[ebp+var_5C], eax
		jmp	loc_68D87505
; ---------------------------------------------------------------------------

loc_68D876EE:				; CODE XREF: sub_68D86BD0+850j
					; DATA XREF: .rdata:off_68D926A0o
		cmp	eax, 7		; jumptable 68D87420 cases 63,68
		mov	[ebp+var_5C], 7
		jg	loc_68D87505
		test	al, 2
		mov	[ebp+var_5C], 1
		jnz	loc_68D87505
		and	eax, 1
		cmp	eax, 1
		sbb	ecx, ecx
		and	ecx, 2
		add	ecx, 3
		mov	[ebp+var_5C], ecx
		jmp	loc_68D87505
; ---------------------------------------------------------------------------

loc_68D87723:				; CODE XREF: sub_68D86BD0+A1Aj
		cmp	[ebp+var_5C], eax
		jz	loc_68D875F5	; jumptable 68D87420 case 0
		jmp	loc_68D872EB	; jumptable 68D87420 default case
; ---------------------------------------------------------------------------

loc_68D87731:				; CODE XREF: sub_68D86BD0+354j
		mov	ecx, ds:_errno
		mov	[ebp+var_58], ecx

loc_68D8773A:				; CODE XREF: sub_68D86BD0+6E9j
					; sub_68D86BD0+6FAj ...
		mov	ecx, [ebp+Memory]
		mov	[esp+0D8h+Size], ecx ; Memory
		call	free
		cmp	[ebp+var_40], 0
		jz	short loc_68D87756
		mov	ebx, [ebp+var_40]
		mov	[esp+0D8h+Size], ebx ; Memory
		call	free

loc_68D87756:				; CODE XREF: sub_68D86BD0+B79j
		call	[ebp+var_58]
		xor	ebx, ebx
		mov	dword ptr [eax], 0Ch
		jmp	loc_68D87316
; ---------------------------------------------------------------------------

loc_68D87766:				; CODE XREF: sub_68D86BD0+41Fj
		mov	eax, [ebp+NewSize]
		mov	[ebp+var_9C], edx
		mov	[ebp+var_98], ecx
		mov	[esp+0D8h+Size], ebx ; Memory
		mov	[esp+0D8h+Src],	eax ; NewSize
		call	realloc
		mov	ecx, [ebp+var_98]
		mov	edx, [ebp+var_9C]
		mov	[ebp+var_30], eax
		jmp	loc_68D8701B
; ---------------------------------------------------------------------------

loc_68D87795:				; CODE XREF: sub_68D86BD0+6CFj
		mov	edx, [ebp+var_64]
		mov	[ebp+NewSize], edx

loc_68D8779B:				; CODE XREF: sub_68D86BD0+6C6j
		cmp	[ebp+NewSize], 0FFFFFFFFh
		jz	loc_68D886F3
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_30]
		test	ebx, ebx
		jnz	loc_68D87F9F

loc_68D877B4:				; CODE XREF: sub_68D86BD0+13D3j
		mov	edi, [ebp+NewSize]
		mov	[esp+0D8h+Size], edi ; Size
		call	malloc
		mov	edi, eax

loc_68D877C1:				; CODE XREF: sub_68D86BD0+13EAj
		test	edi, edi
		jz	loc_68D881F8
		test	esi, esi
		jz	short loc_68D877E3
		cmp	byte ptr [ebp+var_30], 0
		jz	short loc_68D877E3
		mov	[esp+0D8h+var_D0], esi ; Size
		mov	[esp+0D8h+Src],	ebx ; Src
		mov	[esp+0D8h+Size], edi ; Dst
		call	memcpy

loc_68D877E3:				; CODE XREF: sub_68D86BD0+BFBj
					; sub_68D86BD0+C01j
		mov	ebx, edi

loc_68D877E5:				; CODE XREF: sub_68D86BD0+6A3j
		mov	byte ptr [ebx+esi], 0
		mov	ecx, [ebp+var_24]
		mov	eax, [ebp+var_44]
		mov	edx, [ebp+var_44]
		mov	edi, [ebp+var_20]
		mov	dword ptr [ebp+var_48],	ecx
		mov	ecx, [ebp+var_44]
		add	eax, eax
		add	edx, 1
		mov	[ebp+var_5C], edi
		mov	edi, [ebp+var_44]
		add	ecx, 2
		mov	[ebp+var_70], eax
		add	eax, 1
		mov	[ebp+var_84], edx
		mov	edx, [ebp+var_60]
		mov	[ebp+var_80], ecx
		mov	ecx, [ebp+NewSize]
		add	edi, 0Ch
		mov	[ebp+var_88], eax
		mov	eax, ds:_errno
		mov	[ebp+var_7C], edi
		add	edx, 1
		sub	ecx, esi
		mov	[ebp+var_58], eax
		mov	[ebp+var_90], edx
		mov	[ebp+var_1C], 0FFFFFFFFh
		mov	[ebp+var_30], ecx
		js	loc_68D8798C

loc_68D8784D:				; CODE XREF: sub_68D86BD0+DB6j
					; sub_68D86BD0+DC3j
		call	ds:_errno
		cmp	[ebp+var_54], 0Dh ; switch 14 cases
		mov	dword ptr [eax], 0
		jbe	short loc_68D87864

loc_68D8785F:				; CODE XREF: sub_68D86BD0+4A4j
					; sub_68D86BD0+4F7j ...
		call	abort		; jumptable 68D87867 default case
; ---------------------------------------------------------------------------

loc_68D87864:				; CODE XREF: sub_68D86BD0+C8Dj
		mov	edi, [ebp+var_54]
		jmp	ds:off_68D927F0[edi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D8786E:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	ecx, [ebp+var_34] ; jumptable 68D87867 cases 5-8,13
		mov	edi, [ebp+var_40]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		mov	eax, [eax+edi+8]
		jz	loc_68D87B87

loc_68D87886:				; CODE XREF: sub_68D86BD0+1329j
					; sub_68D86BD0+1347j
		cmp	[ebp+var_3C], 2
		jz	loc_68D87B37
		mov	ecx, [ebp+var_38]
		lea	edx, [ebp+var_1C]
		mov	edi, [ebp+var_30]
		mov	dword ptr [esp+0D8h+var_CC], eax ; char
		lea	eax, [ebx+esi]
		mov	dword ptr [esp+0D8h+var_CC+4], edx
		mov	[esp+0D8h+var_D0], ecx ; char *
		mov	[esp+0D8h+Src],	edi ; size_t
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0

loc_68D878B4:				; CODE XREF: sub_68D86BD0+F99j
					; sub_68D86BD0+FE2j ...
		mov	ecx, [ebp+var_1C]
		test	ecx, ecx
		js	loc_68D87A5A
		cmp	[ebp+var_30], ecx
		mov	edi, ecx
		jbe	short loc_68D878CF
		lea	edx, [ebx+ecx]
		cmp	byte ptr [edx+esi], 0
		jnz	short loc_68D8785F ; jumptable 68D87867	default	case

loc_68D878CF:				; CODE XREF: sub_68D86BD0+CF4j
		cmp	eax, ecx
		jle	short loc_68D878D8
		mov	[ebp+var_1C], eax

loc_68D878D6:				; CODE XREF: sub_68D86BD0+18C4j
		mov	edi, eax

loc_68D878D8:				; CODE XREF: sub_68D86BD0+D01j
					; sub_68D86BD0+EA6j
		lea	eax, [edi+1]
		cmp	[ebp+var_30], eax
		ja	loc_68D8850A
		cmp	[ebp+var_30], 7FFFFFFFh
		jz	loc_68D88511
		mov	eax, [ebp+NewSize]
		mov	edx, [ebp+NewSize]
		add	eax, eax
		sar	edx, 1Fh
		or	eax, edx
		mov	edx, [ebp+var_64]
		lea	edx, [edi+edx]
		mov	edi, 0FFFFFFFFh
		cmp	esi, edx
		ja	short loc_68D87915
		cmp	eax, edx
		mov	edi, eax
		jnb	short loc_68D87915
		mov	edi, edx

loc_68D87915:				; CODE XREF: sub_68D86BD0+D3Bj
					; sub_68D86BD0+D41j ...
		cmp	[ebp+NewSize], edi
		jnb	short loc_68D87972
		cmp	[ebp+NewSize], 0
		mov	eax, 0Ch
		jz	short loc_68D87930
		jl	loc_68D87B2D
		mov	eax, [ebp+NewSize]
		add	eax, eax

loc_68D87930:				; CODE XREF: sub_68D86BD0+D53j
		cmp	eax, edi
		jnb	loc_68D87B30

loc_68D87938:				; CODE XREF: sub_68D86BD0+F62j
		cmp	edi, 0FFFFFFFFh
		jz	loc_68D872AD
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+NewSize]
		test	ebx, ebx
		jnz	loc_68D87B10

loc_68D87950:				; CODE XREF: sub_68D86BD0+F44j
		mov	[esp+0D8h+Size], edi ; Size
		call	malloc
		mov	edx, eax

loc_68D8795A:				; CODE XREF: sub_68D86BD0+F58j
		test	edx, edx
		jz	loc_68D872AD
		cmp	byte ptr [ebp+NewSize],	0
		jnz	loc_68D87D81

loc_68D8796C:				; CODE XREF: sub_68D86BD0+11B3j
		mov	ebx, edx
		xchg	ax, ax
		jmp	short loc_68D87975
; ---------------------------------------------------------------------------

loc_68D87972:				; CODE XREF: sub_68D86BD0+D48j
		mov	edi, [ebp+NewSize]

loc_68D87975:				; CODE XREF: sub_68D86BD0+DA0j
					; sub_68D86BD0+119Bj ...
		mov	ecx, edi
		sub	ecx, esi
		mov	[ebp+NewSize], edi
		mov	[ebp+var_1C], 0FFFFFFFFh
		mov	[ebp+var_30], ecx
		jns	loc_68D8784D

loc_68D8798C:				; CODE XREF: sub_68D86BD0+C77j
		mov	[ebp+var_30], 7FFFFFFFh
		jmp	loc_68D8784D
; ---------------------------------------------------------------------------

loc_68D87998:				; CODE XREF: sub_68D86BD0+3F1j
		jl	loc_68D881F8
		shl	[ebp+NewSize], 1
		jmp	loc_68D86FCE
; ---------------------------------------------------------------------------

loc_68D879A6:				; CODE XREF: sub_68D86BD0+498j
		cmp	dword ptr [eax+28h], 0FFFFFFFFh
		lea	esi, [esi+0]
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		mov	edx, esi
		add	edx, 1
		sbb	eax, eax
		or	edx, eax
		cmp	[ebp+NewSize], edx
		mov	[ebp+var_30], edx
		jnb	short loc_68D87A21
		cmp	[ebp+NewSize], 0
		jnz	loc_68D88078
		mov	[ebp+NewSize], 0Ch

loc_68D879D8:				; CODE XREF: sub_68D86BD0+14B1j
		mov	ecx, [ebp+var_30]
		cmp	[ebp+NewSize], ecx
		jnb	short loc_68D879E3
		mov	[ebp+NewSize], ecx

loc_68D879E3:				; CODE XREF: sub_68D86BD0+E0Ej
		cmp	[ebp+NewSize], 0FFFFFFFFh
		jz	loc_68D88701
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_3C]
		test	ebx, ebx
		jz	short loc_68D87A02
		cmp	byte ptr [ebp+var_3C], 0
		jz	loc_68D880E0

loc_68D87A02:				; CODE XREF: sub_68D86BD0+E26j
		mov	eax, [ebp+NewSize]
		mov	[esp+0D8h+Size], eax ; Size
		call	malloc
		mov	edi, eax

loc_68D87A0F:				; CODE XREF: sub_68D86BD0+1521j
		test	edi, edi
		jz	loc_68D886F3
		test	esi, esi
		jnz	loc_68D87F6B

loc_68D87A1F:				; CODE XREF: sub_68D86BD0+139Fj
		mov	ebx, edi

loc_68D87A21:				; CODE XREF: sub_68D86BD0+DF5j
					; sub_68D86BD0+13B7j
		mov	byte ptr [ebx+esi], 25h
		mov	esi, [ebp+var_30]

loc_68D87A28:				; CODE XREF: sub_68D86BD0+F27j
					; sub_68D86BD0+11E2j ...
		mov	eax, [ebp+var_34]
		add	[ebp+var_6C], 1
		mov	edi, [eax+4]
		add	eax, 2Ch
		mov	[ebp+var_34], eax
		jmp	loc_68D86FA4
; ---------------------------------------------------------------------------

loc_68D87A3D:				; CODE XREF: sub_68D86BD0+908j
		cmp	edx, 5
		jnz	loc_68D872EB	; jumptable 68D87420 default case
		mov	ebx, [ebp+var_40]
		mov	eax, [ebp+var_44]
		movzx	edx, byte ptr [ecx]
		mov	[ebp+var_60], ebx
		mov	[ebp+var_58], eax
		jmp	loc_68D86E51
; ---------------------------------------------------------------------------

loc_68D87A5A:				; CODE XREF: sub_68D86BD0+CE9j
		mov	ecx, [ebp+var_8C]
		cmp	byte ptr [ecx],	0
		jnz	loc_68D87D65
		test	eax, eax
		js	loc_68D8810F
		mov	[ebp+var_1C], eax
		mov	edi, eax
		jmp	loc_68D878D8
; ---------------------------------------------------------------------------

loc_68D87A7B:				; CODE XREF: sub_68D86BD0+E3j
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_68D87A80:				; CODE XREF: sub_68D86BD0+EDCj
		movsx	edx, dl
		cmp	ecx, 19999999h
		lea	ebx, [edx-30h]
		mov	edx, 0FFFFFFFFh
		ja	short loc_68D87A98
		lea	edx, [ecx+ecx*4]
		add	edx, edx

loc_68D87A98:				; CODE XREF: sub_68D86BD0+EC1j
		mov	ecx, edx
		add	ecx, ebx
		sbb	edx, edx
		add	eax, 1
		or	ecx, edx
		movzx	edx, byte ptr [eax]
		lea	ebx, [edx-30h]
		cmp	bl, 9
		jbe	short loc_68D87A80
		test	ecx, ecx
		jz	loc_68D872EB	; jumptable 68D87420 default case
		cmp	ecx, 0FFFFFFFFh
		jz	loc_68D872EB	; jumptable 68D87420 default case
		sub	ecx, 1
		add	eax, 1
		mov	[ebp+var_38], ecx
		movzx	edx, byte ptr [eax]
		jmp	loc_68D86CE3
; ---------------------------------------------------------------------------

loc_68D87AD0:				; CODE XREF: sub_68D86BD0+4ADj
		imul	eax, 18h
		add	eax, [ebp+var_40]
		mov	edx, [eax]
		cmp	edx, 0Fh
		jz	loc_68D87DAC
		ja	loc_68D880C6
		cmp	edx, 0Eh
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		mov	eax, [eax+8]
		mov	edx, esi
		mov	[eax], dl
		jmp	loc_68D87A28
; ---------------------------------------------------------------------------

loc_68D87AFC:				; CODE XREF: sub_68D86BD0+1DFj
		mov	eax, dword ptr [ebp+var_48]
		mov	ecx, [ebp+var_3C]
		movzx	edx, byte ptr [ebx]
		mov	[ebp+var_44], eax
		mov	[ebp+NewSize], ecx
		jmp	loc_68D86DBE
; ---------------------------------------------------------------------------

loc_68D87B10:				; CODE XREF: sub_68D86BD0+D7Aj
		cmp	byte ptr [ebp+NewSize],	0
		jnz	loc_68D87950
		mov	[esp+0D8h+Src],	edi ; NewSize
		mov	[esp+0D8h+Size], ebx ; Memory
		call	realloc
		mov	edx, eax
		jmp	loc_68D8795A
; ---------------------------------------------------------------------------

loc_68D87B2D:				; CODE XREF: sub_68D86BD0+D55j
		or	eax, 0FFFFFFFFh

loc_68D87B30:				; CODE XREF: sub_68D86BD0+D62j
		mov	edi, eax
		jmp	loc_68D87938
; ---------------------------------------------------------------------------

loc_68D87B37:				; CODE XREF: sub_68D86BD0+CBAj
					; sub_68D86BD0+12E7j
		mov	ecx, [ebp+var_5C]
		lea	edx, [ebp+var_1C]
		mov	edi, dword ptr [ebp+var_48]
		mov	dword ptr [esp+0D8h+var_C4+4], edx
		mov	dword ptr [esp+0D8h+var_C4], eax
		mov	dword ptr [esp+0D8h+var_CC+4], ecx
		mov	dword ptr [esp+0D8h+var_CC], edi ; char

loc_68D87B50:				; CODE XREF: sub_68D86BD0+127Bj
		mov	eax, [ebp+var_38]
		mov	edx, [ebp+var_30]
		mov	[esp+0D8h+var_D0], eax ; char *
		lea	eax, [ebx+esi]
		mov	[esp+0D8h+Src],	edx ; size_t
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D87B6E:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	edi, [ebp+var_34] ; jumptable 68D87867 case 2
		mov	edx, [ebp+var_40]
		imul	eax, [edi+28h],	18h
		cmp	[ebp+var_3C], 1
		movzx	eax, byte ptr [eax+edx+8]
		jnz	loc_68D87EB3

loc_68D87B87:				; CODE XREF: sub_68D86BD0+CB0j
					; sub_68D86BD0+12DDj ...
		mov	dword ptr [esp+0D8h+var_CC+4], eax
		mov	eax, [ebp+var_30]
		lea	edx, [ebp+var_1C]
		mov	ecx, dword ptr [ebp+var_48]
		mov	edi, [ebp+var_38]
		mov	dword ptr [esp+0D8h+var_C4], edx
		mov	[esp+0D8h+Src],	eax ; size_t
		lea	eax, [ebx+esi]
		mov	dword ptr [esp+0D8h+var_CC], ecx ; char
		mov	[esp+0D8h+var_D0], edi ; char *
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D87BB7:				; CODE XREF: sub_68D86BD0+458j
		cmp	byte ptr [ebp+var_3C], 0
		jz	loc_68D8702E
		mov	[esp+0D8h+Src],	ebx ; Src
		mov	ebx, [ebp+var_30]
		mov	[ebp+var_9C], edx
		mov	[ebp+var_98], ecx
		mov	[esp+0D8h+var_D0], esi ; Size
		mov	[esp+0D8h+Size], ebx ; Dst
		call	memcpy
		mov	ebx, [ebp+var_30]
		mov	ecx, [ebp+var_98]
		mov	edx, [ebp+var_9C]
		jmp	loc_68D87031
; ---------------------------------------------------------------------------

loc_68D87BF4:				; CODE XREF: sub_68D86BD0+1AFj
		cmp	dword ptr [ebp+var_48],	1
		lea	ebx, [ecx+2]
		mov	[esi+18h], ecx
		mov	[esi+1Ch], ebx
		jbe	loc_68D881D2

loc_68D87C07:				; CODE XREF: sub_68D86BD0+1609j
		movzx	edx, byte ptr [ebx]
		mov	eax, ebx
		mov	byte ptr [ebp+NewSize],	dl
		sub	edx, 30h
		cmp	dl, 9
		jbe	loc_68D87CD6

loc_68D87C1B:				; CODE XREF: sub_68D86BD0+1117j
		mov	edx, [esi+20h]

loc_68D87C1E:				; CODE XREF: sub_68D86BD0+1168j
		cmp	edx, 0FFFFFFFFh
		jz	loc_68D881DE
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_3C], edx
		mov	[ebp+NewSize], eax

loc_68D87C30:				; CODE XREF: sub_68D86BD0+1623j
		mov	ecx, [ebp+var_3C]
		cmp	[ebp+var_30], ecx
		ja	short loc_68D87C8C
		mov	eax, [ebp+var_30]
		sar	[ebp+var_30], 1Fh
		add	eax, eax
		or	[ebp+var_30], eax
		mov	eax, ecx
		cmp	[ebp+var_30], ecx
		ja	short loc_68D87C57
		add	eax, 1
		mov	[ebp+var_30], eax
		jb	loc_68D8821C

loc_68D87C57:				; CODE XREF: sub_68D86BD0+1079j
		cmp	[ebp+var_30], 0AAAAAAAh
		ja	loc_68D8821C
		imul	eax, [ebp+var_30], 18h
		cmp	[ebp+var_40], 0
		jz	loc_68D885E6
		mov	edx, [ebp+var_40]
		mov	[esp+0D8h+Src],	eax ; NewSize
		mov	[esp+0D8h+Size], edx ; Memory
		call	realloc

loc_68D87C81:				; CODE XREF: sub_68D86BD0+1A1Ej
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	loc_68D8821C

loc_68D87C8C:				; CODE XREF: sub_68D86BD0+1066j
		mov	ecx, [ebp+var_3C]
		cmp	[ebp+var_34], ecx
		ja	short loc_68D87CB1
		imul	eax, [ebp+var_34], 18h
		mov	edx, [ebp+var_34]
		add	eax, [ebp+var_40]

loc_68D87C9E:				; CODE XREF: sub_68D86BD0+10DCj
		add	edx, 1
		mov	dword ptr [eax], 0
		add	eax, 18h
		cmp	edx, ecx
		jbe	short loc_68D87C9E
		mov	[ebp+var_34], edx

loc_68D87CB1:				; CODE XREF: sub_68D86BD0+10C2j
		imul	eax, [ebp+var_3C], 18h
		add	eax, [ebp+var_40]
		mov	edx, [eax]
		test	edx, edx
		jnz	loc_68D88086
		mov	dword ptr [eax], 5
		mov	eax, dword ptr [ebp+var_48]
		movzx	edx, byte ptr [ebx]
		mov	[ebp+var_44], eax
		jmp	loc_68D86DBE
; ---------------------------------------------------------------------------

loc_68D87CD6:				; CODE XREF: sub_68D86BD0+1045j
					; sub_68D86BD0+1112j
		add	eax, 1
		movzx	edx, byte ptr [eax]
		lea	ecx, [edx-30h]
		cmp	cl, 9
		jbe	short loc_68D87CD6
		cmp	dl, 24h
		jnz	loc_68D87C1B
		xor	edx, edx

loc_68D87CEF:				; CODE XREF: sub_68D86BD0+114Cj
		movsx	ecx, byte ptr [ebp+NewSize]
		or	eax, 0FFFFFFFFh
		sub	ecx, 30h
		cmp	edx, 19999999h
		ja	short loc_68D87D04
		imul	eax, edx, 0Ah

loc_68D87D04:				; CODE XREF: sub_68D86BD0+112Fj
		mov	edx, eax
		add	edx, ecx
		sbb	eax, eax
		add	ebx, 1
		movzx	ecx, byte ptr [ebx]
		or	edx, eax
		mov	eax, ecx
		sub	eax, 30h
		cmp	al, 9
		mov	byte ptr [ebp+NewSize],	cl
		jbe	short loc_68D87CEF
		test	edx, edx
		jz	loc_68D872EB	; jumptable 68D87420 default case
		cmp	edx, 0FFFFFFFFh
		jz	loc_68D872EB	; jumptable 68D87420 default case
		sub	edx, 1
		add	ebx, 1
		mov	[esi+20h], edx
		jmp	loc_68D87C1E
; ---------------------------------------------------------------------------

loc_68D87D3D:				; CODE XREF: sub_68D86BD0+77Aj
		mov	eax, [ebp+NewSize]
		cmp	eax, 0FFFFFFFFh
		mov	[esi+14h], eax
		jz	loc_68D872EB	; jumptable 68D87420 default case
		add	eax, 1
		mov	edx, [ebp+NewSize]
		mov	[ebp+var_3C], eax
		jmp	loc_68D8735B
; ---------------------------------------------------------------------------

loc_68D87D5A:				; CODE XREF: sub_68D86BD0+60Aj
		mov	byte ptr [edi],	6Ch
		add	edi, 1
		jmp	loc_68D871EC
; ---------------------------------------------------------------------------

loc_68D87D65:				; CODE XREF: sub_68D86BD0+E93j
		mov	byte ptr [ecx],	0
		mov	edi, [ebp+NewSize]
		jmp	loc_68D87975
; ---------------------------------------------------------------------------

loc_68D87D70:				; CODE XREF: sub_68D86BD0+6AEj
		mov	eax, [ebp+NewSize]
		sar	[ebp+NewSize], 1Fh
		add	eax, eax
		or	[ebp+NewSize], eax
		jmp	loc_68D8728B
; ---------------------------------------------------------------------------

loc_68D87D81:				; CODE XREF: sub_68D86BD0+D96j
		test	esi, esi
		jz	loc_68D8796C
		mov	[esp+0D8h+Src],	ebx ; Src
		mov	[esp+0D8h+Size], edx ; Dst
		mov	[ebp+var_9C], edx
		mov	[esp+0D8h+var_D0], esi ; Size
		call	memcpy
		mov	edx, [ebp+var_9C]
		mov	ebx, edx
		jmp	loc_68D87975
; ---------------------------------------------------------------------------

loc_68D87DAC:				; CODE XREF: sub_68D86BD0+F0Bj
		mov	eax, [eax+8]
		mov	[eax], si
		jmp	loc_68D87A28
; ---------------------------------------------------------------------------

loc_68D87DB7:				; CODE XREF: sub_68D86BD0+850j
					; DATA XREF: .rdata:off_68D926A0o
		mov	[ebp+var_5C], 0Dh ; jumptable 68D87420 case 75
		jmp	loc_68D87505
; ---------------------------------------------------------------------------

loc_68D87DC3:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	ecx, [ebp+var_34] ; jumptable 68D87867 case 9
		mov	edi, [ebp+var_40]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		fld	qword ptr [eax+edi+8]
		jz	loc_68D88593
		cmp	[ebp+var_3C], 2
		jz	loc_68D8855C
		mov	edx, [ebp+var_38]
		lea	eax, [ebp+var_1C]
		mov	ecx, [ebp+var_30]
		fstp	qword ptr [esp+0D8h+var_CC] ; char
		mov	dword ptr [esp+0D8h+var_C4], eax
		lea	eax, [ebx+esi]
		mov	[esp+0D8h+Size], eax ; char *
		mov	[esp+0D8h+var_D0], edx ; char *
		mov	[esp+0D8h+Src],	ecx ; size_t
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D87E0E:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	edx, [ebp+var_34] ; jumptable 68D87867 case 10
		mov	edi, [ebp+var_40]
		imul	eax, [edx+28h],	18h
		cmp	[ebp+var_3C], 1
		mov	ecx, [eax+edi+10h]
		mov	edx, [eax+edi+0Ch]
		mov	eax, [eax+edi+8]
		jz	loc_68D88457
		cmp	[ebp+var_3C], 2
		jz	loc_68D88418
		lea	edi, [ebp+var_1C]
		mov	dword ptr [esp+0D8h+var_C4+4], edi
		mov	dword ptr [esp+0D8h+var_CC], eax
		mov	dword ptr [esp+0D8h+var_CC+4], edx
		mov	dword ptr [esp+0D8h+var_C4], ecx
		jmp	loc_68D87B50
; ---------------------------------------------------------------------------

loc_68D87E50:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	edx, [ebp+var_34] ; jumptable 68D87867 case 11
		mov	ecx, [ebp+var_40]
		imul	eax, [edx+28h],	18h
		cmp	[ebp+var_3C], 1
		mov	eax, [eax+ecx+8]
		jz	loc_68D87F3B

loc_68D87E68:				; CODE XREF: sub_68D86BD0+1365j
		cmp	[ebp+var_3C], 2
		jz	loc_68D8819B
		mov	dword ptr [esp+0D8h+var_CC], eax ; char
		mov	eax, [ebp+var_38]
		lea	edi, [ebp+var_1C]
		mov	edx, [ebp+var_30]
		mov	dword ptr [esp+0D8h+var_CC+4], edi
		mov	[esp+0D8h+var_D0], eax ; char *
		lea	eax, [ebx+esi]
		mov	[esp+0D8h+Src],	edx ; size_t
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D87E9B:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	edi, [ebp+var_34] ; jumptable 68D87867 case 12
		mov	edx, [ebp+var_40]
		imul	eax, [edi+28h],	18h
		cmp	[ebp+var_3C], 1
		mov	eax, [eax+edx+8]
		jz	loc_68D87B87

loc_68D87EB3:				; CODE XREF: sub_68D86BD0+FB1j
		cmp	[ebp+var_3C], 2
		jz	loc_68D87B37
		mov	dword ptr [esp+0D8h+var_CC], eax ; char
		mov	eax, [ebp+var_30]
		lea	ecx, [ebp+var_1C]
		mov	edi, [ebp+var_38]
		mov	dword ptr [esp+0D8h+var_CC+4], ecx
		mov	[esp+0D8h+Src],	eax ; size_t
		lea	eax, [ebx+esi]
		mov	[esp+0D8h+var_D0], edi ; char *
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D87EE6:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	ecx, [ebp+var_34] ; jumptable 68D87867 case 4
		mov	edi, [ebp+var_40]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		movzx	eax, word ptr [eax+edi+8]
		jnz	loc_68D87886
		jmp	loc_68D87B87
; ---------------------------------------------------------------------------

loc_68D87F04:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	ecx, [ebp+var_34] ; jumptable 68D87867 case 3
		mov	edi, [ebp+var_40]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		movsx	eax, word ptr [eax+edi+8]
		jnz	loc_68D87886
		jmp	loc_68D87B87
; ---------------------------------------------------------------------------

loc_68D87F22:				; CODE XREF: sub_68D86BD0+C97j
					; DATA XREF: .rdata:off_68D927F0o
		mov	edx, [ebp+var_34] ; jumptable 68D87867 case 1
		mov	ecx, [ebp+var_40]
		imul	eax, [edx+28h],	18h
		cmp	[ebp+var_3C], 1
		movsx	eax, byte ptr [eax+ecx+8]
		jnz	loc_68D87E68

loc_68D87F3B:				; CODE XREF: sub_68D86BD0+1292j
		mov	dword ptr [esp+0D8h+var_CC+4], eax
		mov	eax, [ebp+var_38]
		lea	ecx, [ebp+var_1C]
		mov	edi, dword ptr [ebp+var_48]
		mov	edx, [ebp+var_30]
		mov	dword ptr [esp+0D8h+var_C4], ecx
		mov	[esp+0D8h+var_D0], eax ; char *
		lea	eax, [ebx+esi]
		mov	dword ptr [esp+0D8h+var_CC], edi ; char
		mov	[esp+0D8h+Src],	edx ; size_t
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D87F6B:				; CODE XREF: sub_68D86BD0+E49j
		cmp	byte ptr [ebp+var_3C], 0
		jz	loc_68D87A1F
		mov	[esp+0D8h+Src],	ebx ; Src
		mov	ebx, edi
		mov	[esp+0D8h+var_D0], esi ; Size
		mov	[esp+0D8h+Size], edi ; Dst
		call	memcpy
		jmp	loc_68D87A21
; ---------------------------------------------------------------------------

loc_68D87F8C:				; CODE XREF: sub_68D86BD0+519j
					; sub_68D86BD0+54Cj
		mov	[ebp+var_44], 6
		mov	[ebp+var_74], 0
		jmp	loc_68D87122
; ---------------------------------------------------------------------------

loc_68D87F9F:				; CODE XREF: sub_68D86BD0+BDEj
		cmp	byte ptr [ebp+var_30], 0
		jnz	loc_68D877B4
		mov	eax, [ebp+NewSize]
		mov	[esp+0D8h+Size], ebx ; Memory
		mov	[esp+0D8h+Src],	eax ; NewSize
		call	realloc
		mov	edi, eax
		jmp	loc_68D877C1
; ---------------------------------------------------------------------------

loc_68D87FBF:				; CODE XREF: sub_68D86BD0+525j
		add	ecx, 1
		cmp	[ebp+var_3C], ecx
		mov	[ebp+var_44], 0
		mov	[ebp+var_74], 1
		jz	loc_68D87122
		xor	eax, eax

loc_68D87FDB:				; CODE XREF: sub_68D86BD0+142Ej
		lea	edx, [eax+eax*4]
		movsx	edi, byte ptr [ecx]
		add	ecx, 1
		add	edx, edx
		cmp	eax, 1999999Ah
		sbb	eax, eax
		not	eax
		or	edx, eax
		lea	edi, [edx+edi-30h]
		cmp	edi, edx
		sbb	eax, eax
		or	eax, edi
		cmp	ecx, [ebp+var_3C]
		jnz	short loc_68D87FDB
		mov	[ebp+var_44], eax
		mov	[ebp+var_74], 1
		jmp	loc_68D87122
; ---------------------------------------------------------------------------

loc_68D8800F:				; CODE XREF: sub_68D86BD0+4E5j
		mov	[ebp+var_60], 0
		xor	edx, edx

loc_68D88018:				; CODE XREF: sub_68D86BD0+146Cj
		lea	ecx, [edx+edx*4]
		movsx	edi, byte ptr [eax]
		add	eax, 1
		add	ecx, ecx
		cmp	edx, 1999999Ah
		sbb	edx, edx
		not	edx
		or	ecx, edx
		lea	edi, [ecx+edi-30h]
		cmp	edi, ecx
		sbb	edx, edx
		or	edx, edi
		cmp	[ebp+var_3C], eax
		jnz	short loc_68D88018
		mov	[ebp+var_60], edx
		jmp	loc_68D870DB
; ---------------------------------------------------------------------------

loc_68D88046:				; CODE XREF: sub_68D86BD0+36Bj
		cmp	edx, 0FFFFFFFFh
		jz	loc_68D885D9
		mov	[esp+0D8h+Size], edx ; Size
		call	malloc
		test	eax, eax
		mov	[ebp+var_38], eax
		jz	loc_68D886D7
		mov	[ebp+var_68], eax
		jmp	loc_68D86F5D
; ---------------------------------------------------------------------------

loc_68D8806A:				; CODE XREF: sub_68D86BD0+505j
		neg	eax
		or	[ebp+var_30], 2
		mov	[ebp+var_60], eax
		jmp	loc_68D870DB
; ---------------------------------------------------------------------------

loc_68D88078:				; CODE XREF: sub_68D86BD0+DFBj
		jl	loc_68D88701
		shl	[ebp+NewSize], 1
		jmp	loc_68D879D8
; ---------------------------------------------------------------------------

loc_68D88086:				; CODE XREF: sub_68D86BD0+10ECj
		cmp	edx, 5
		lea	esi, [esi+0]
		jnz	loc_68D872EB	; jumptable 68D87420 default case
		mov	ecx, dword ptr [ebp+var_48]
		movzx	edx, byte ptr [ebx]
		mov	[ebp+var_44], ecx
		jmp	loc_68D86DBE
; ---------------------------------------------------------------------------

loc_68D880A4:				; CODE XREF: sub_68D86BD0+165j
		mov	[esi+10h], ebx
		jmp	loc_68D86E3A
; ---------------------------------------------------------------------------

loc_68D880AC:				; CODE XREF: sub_68D86BD0+996j
		mov	byte ptr [ebp+var_9C], dl
		mov	[esp+0D8h+Size], eax ; Size
		call	malloc
		movzx	edx, byte ptr [ebp+var_9C]
		jmp	loc_68D87588
; ---------------------------------------------------------------------------

loc_68D880C6:				; CODE XREF: sub_68D86BD0+F11j
		cmp	edx, 10h
		jz	short loc_68D880D6
		cmp	edx, 11h
		xchg	ax, ax
		jnz	loc_68D8785F	; jumptable 68D87867 default case

loc_68D880D6:				; CODE XREF: sub_68D86BD0+14F9j
		mov	eax, [eax+8]
		mov	[eax], esi
		jmp	loc_68D87A28
; ---------------------------------------------------------------------------

loc_68D880E0:				; CODE XREF: sub_68D86BD0+E2Cj
		mov	edx, [ebp+NewSize]
		mov	[esp+0D8h+Size], ebx ; Memory
		mov	[esp+0D8h+Src],	edx ; NewSize
		call	realloc
		mov	edi, eax
		jmp	loc_68D87A0F
; ---------------------------------------------------------------------------

loc_68D880F6:				; CODE XREF: sub_68D86BD0+8A2j
		mov	[ebp+var_98], ecx
		mov	[esp+0D8h+Size], eax ; Size
		call	malloc
		mov	ecx, [ebp+var_98]
		jmp	loc_68D87493
; ---------------------------------------------------------------------------

loc_68D8810F:				; CODE XREF: sub_68D86BD0+E9Bj
		mov	edi, [ebp+var_34]
		movzx	eax, byte ptr [edi+24h]
		mov	edx, [edi+28h]
		cmp	al, 65h
		jz	loc_68D88227
		jg	loc_68D88387
		cmp	al, 47h
		jz	loc_68D88227
		nop
		jg	loc_68D88349
		cmp	al, 45h
		jz	loc_68D88227
		xchg	ax, ax
		jle	loc_68D8831D

loc_68D88146:				; CODE XREF: sub_68D86BD0+17D0j
		xor	eax, eax
		cmp	[ebp+var_54], 0Ah
		setz	al
		sub	eax, 1
		and	eax, 0FFFFDBE0h
		add	eax, 2693h
		add	eax, [ebp+var_44]
		jnb	loc_68D88236

loc_68D88165:				; CODE XREF: sub_68D86BD0+1660j
					; sub_68D86BD0+1774j ...
		xor	edx, edx
		or	eax, 0FFFFFFFFh

loc_68D8816A:				; CODE XREF: sub_68D86BD0+166Cj
					; sub_68D86BD0+167Bj
		cmp	edx, eax
		sbb	eax, eax
		or	edx, eax
		cmp	[ebp+var_30], edx
		jnb	loc_68D8848F
		add	edx, esi
		sbb	eax, eax
		or	edx, eax
		cmp	[ebp+NewSize], 0
		js	short loc_68D88193
		mov	eax, [ebp+NewSize]
		add	eax, eax
		add	eax, 0Ch
		jnb	loc_68D8830C

loc_68D88193:				; CODE XREF: sub_68D86BD0+15B3j
		or	edi, 0FFFFFFFFh
		jmp	loc_68D87915
; ---------------------------------------------------------------------------

loc_68D8819B:				; CODE XREF: sub_68D86BD0+129Cj
		mov	edi, [ebp+var_5C]
		lea	ecx, [ebp+var_1C]
		mov	dword ptr [esp+0D8h+var_C4+4], ecx
		mov	dword ptr [esp+0D8h+var_C4], eax
		mov	dword ptr [esp+0D8h+var_CC+4], edi

loc_68D881AD:				; CODE XREF: sub_68D86BD0+19CEj
		mov	eax, dword ptr [ebp+var_48]
		mov	edx, [ebp+var_38]
		mov	ecx, [ebp+var_30]
		mov	dword ptr [esp+0D8h+var_CC], eax ; char
		lea	eax, [ebx+esi]
		mov	[esp+0D8h+var_D0], edx ; char *
		mov	[esp+0D8h+Src],	ecx ; size_t
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D881D2:				; CODE XREF: sub_68D86BD0+1031j
		mov	dword ptr [ebp+var_48],	2
		jmp	loc_68D87C07
; ---------------------------------------------------------------------------

loc_68D881DE:				; CODE XREF: sub_68D86BD0+1051j
		mov	edx, [ebp+var_3C]
		cmp	edx, 0FFFFFFFFh
		mov	[esi+20h], edx
		jz	loc_68D872EB	; jumptable 68D87420 default case
		add	edx, 1
		mov	[ebp+NewSize], edx
		jmp	loc_68D87C30
; ---------------------------------------------------------------------------

loc_68D881F8:				; CODE XREF: sub_68D86BD0+40Aj
					; sub_68D86BD0+450j ...
		mov	edx, ds:_errno
		mov	[ebp+var_58], edx
		jmp	loc_68D872AD
; ---------------------------------------------------------------------------

loc_68D88206:				; CODE XREF: sub_68D86BD0+6DFj
		cmp	ebx, [ebp+arg_0]
		jz	loc_68D872B5
		mov	[esp+0D8h+Size], ebx ; Memory
		call	free
		jmp	loc_68D872B5
; ---------------------------------------------------------------------------

loc_68D8821C:				; CODE XREF: sub_68D86BD0+1081j
					; sub_68D86BD0+108Ej ...
		mov	eax, [ebp+var_60]
		mov	[ebp+var_40], eax
		jmp	loc_68D87385
; ---------------------------------------------------------------------------

loc_68D88227:				; CODE XREF: sub_68D86BD0+154Bj
					; sub_68D86BD0+1559j ...
		mov	eax, [ebp+var_7C]
		cmp	eax, 0Bh
		lea	esi, [esi+0]
		jbe	loc_68D88165

loc_68D88236:				; CODE XREF: sub_68D86BD0+158Fj
					; sub_68D86BD0+176Ej ...
		cmp	[ebp+var_60], eax
		lea	edx, [eax+1]
		jbe	loc_68D8816A
		mov	edx, [ebp+var_90]
		mov	eax, [ebp+var_60]
		jmp	loc_68D8816A
; ---------------------------------------------------------------------------

loc_68D88250:				; CODE XREF: sub_68D86BD0+488j
		mov	edi, esi
		add	edi, 1
		sbb	eax, eax
		or	eax, edi
		cmp	[ebp+NewSize], eax
		jnb	short loc_68D882C3
		cmp	[ebp+NewSize], 0
		jnz	loc_68D8864D
		mov	[ebp+NewSize], 0Ch

loc_68D8826F:				; CODE XREF: sub_68D86BD0+1A89j
		cmp	edi, esi
		sbb	eax, eax
		or	eax, edi
		cmp	[ebp+NewSize], eax
		jnb	short loc_68D88285
		cmp	edi, esi
		mov	[ebp+NewSize], edi
		jb	loc_68D881F8

loc_68D88285:				; CODE XREF: sub_68D86BD0+16A8j
		cmp	[ebp+NewSize], 0FFFFFFFFh
		jz	loc_68D886F3
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_34]
		test	ebx, ebx
		jz	short loc_68D882A4
		cmp	byte ptr [ebp+var_34], 0
		jz	loc_68D8865E

loc_68D882A4:				; CODE XREF: sub_68D86BD0+16C8j
		mov	eax, [ebp+NewSize]
		mov	[esp+0D8h+Size], eax ; Size
		call	malloc
		mov	edx, eax

loc_68D882B1:				; CODE XREF: sub_68D86BD0+1A9Fj
		test	edx, edx
		jz	loc_68D886F3
		test	esi, esi
		jnz	loc_68D88622

loc_68D882C1:				; CODE XREF: sub_68D86BD0+1A56j
					; sub_68D86BD0+1A78j
		mov	ebx, edx

loc_68D882C3:				; CODE XREF: sub_68D86BD0+168Cj
		mov	byte ptr [ebx+esi], 0
		cmp	ebx, [ebp+arg_0]
		jz	short loc_68D882D5
		cmp	[ebp+NewSize], edi
		ja	loc_68D88607

loc_68D882D5:				; CODE XREF: sub_68D86BD0+16FAj
					; sub_68D86BD0+1A45j ...
		cmp	[ebp+var_68], 0
		jz	short loc_68D882E6
		mov	edi, [ebp+var_68]
		mov	[esp+0D8h+Size], edi ; Memory
		call	free

loc_68D882E6:				; CODE XREF: sub_68D86BD0+1709j
		mov	eax, [ebp+Memory]
		mov	[esp+0D8h+Size], eax ; Memory
		call	free
		cmp	[ebp+var_40], 0
		jz	short loc_68D88302
		mov	edx, [ebp+var_40]
		mov	[esp+0D8h+Size], edx ; Memory
		call	free

loc_68D88302:				; CODE XREF: sub_68D86BD0+1725j
		mov	ecx, [ebp+arg_4]
		mov	[ecx], esi
		jmp	loc_68D87316
; ---------------------------------------------------------------------------

loc_68D8830C:				; CODE XREF: sub_68D86BD0+15BDj
		cmp	edx, eax
		mov	edi, edx
		jnb	loc_68D87915
		mov	edi, eax
		jmp	loc_68D87915
; ---------------------------------------------------------------------------

loc_68D8831D:				; CODE XREF: sub_68D86BD0+1570j
		cmp	al, 41h
		nop
		jnz	loc_68D8785F	; jumptable 68D87867 default case

loc_68D88326:				; CODE XREF: sub_68D86BD0+1780j
		xor	eax, eax
		cmp	[ebp+var_54], 0Ah
		setz	al
		lea	eax, [eax+eax+0Dh]
		cmp	eax, [ebp+var_44]
		jnb	short loc_68D8833B
		mov	eax, [ebp+var_44]

loc_68D8833B:				; CODE XREF: sub_68D86BD0+1766j
		add	eax, 0Ch
		jnb	loc_68D88236
		jmp	loc_68D88165
; ---------------------------------------------------------------------------

loc_68D88349:				; CODE XREF: sub_68D86BD0+1560j
		cmp	al, 61h
		nop
		lea	esi, [esi+0]
		jz	short loc_68D88326
		jg	loc_68D883DD
		cmp	al, 58h
		lea	esi, [esi+0]
		jnz	loc_68D8785F	; jumptable 68D87867 default case

loc_68D88366:				; CODE XREF: sub_68D86BD0+19E3j
		cmp	[ebp+var_44], 9
		mov	eax, 0Bh
		nop
		jbe	loc_68D88236
		mov	eax, [ebp+var_80]
		cmp	[ebp+var_44], eax
		jbe	loc_68D88236
		jmp	loc_68D88165
; ---------------------------------------------------------------------------

loc_68D88387:				; CODE XREF: sub_68D86BD0+1551j
		cmp	al, 6Fh
		jz	loc_68D886AA
		nop
		jg	short loc_68D883F2
		cmp	al, 67h
		jz	loc_68D88227
		lea	esi, [esi+0]
		jl	loc_68D88146
		cmp	al, 69h
		jnz	loc_68D8785F	; jumptable 68D87867 default case

loc_68D883AE:				; CODE XREF: sub_68D86BD0+1820j
					; sub_68D86BD0+19D5j
		cmp	[ebp+var_44], 0Ah
		mov	eax, 15h
		jbe	loc_68D88236
		mov	eax, [ebp+var_70]
		cmp	[ebp+var_44], eax
		ja	loc_68D88165
		mov	eax, [ebp+var_88]
		cmp	[ebp+var_70], eax
		jbe	loc_68D88236
		jmp	loc_68D88165
; ---------------------------------------------------------------------------

loc_68D883DD:				; CODE XREF: sub_68D86BD0+1782j
		cmp	al, 63h
		nop
		jz	loc_68D886CD
		cmp	al, 64h
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		xchg	ax, ax
		jmp	short loc_68D883AE
; ---------------------------------------------------------------------------

loc_68D883F2:				; CODE XREF: sub_68D86BD0+17C0j
		cmp	al, 73h
		jz	loc_68D885B8
		lea	esi, [esi+0]
		jg	loc_68D885A3
		cmp	al, 70h
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		mov	eax, 0Bh
		jmp	loc_68D88236
; ---------------------------------------------------------------------------

loc_68D88418:				; CODE XREF: sub_68D86BD0+1262j
		lea	edi, [ebp+var_1C]
		mov	dword ptr [esp+0D8h+var_C4], eax
		mov	eax, [ebp+var_5C]
		mov	[esp+0D8h+var_B8], edi
		mov	edi, [ebp+var_30]
		mov	dword ptr [esp+0D8h+var_C4+4], edx
		mov	edx, dword ptr [ebp+var_48]
		mov	[esp+0D8h+var_BC], ecx
		mov	ecx, [ebp+var_38]
		mov	dword ptr [esp+0D8h+var_CC+4], eax
		lea	eax, [ebx+esi]
		mov	[esp+0D8h+Src],	edi ; size_t
		mov	dword ptr [esp+0D8h+var_CC], edx ; char
		mov	[esp+0D8h+var_D0], ecx ; char *
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D88457:				; CODE XREF: sub_68D86BD0+1258j
		mov	dword ptr [esp+0D8h+var_CC+4], eax
		mov	eax, dword ptr [ebp+var_48]
		lea	edi, [ebp+var_1C]
		mov	dword ptr [esp+0D8h+var_C4], edx
		mov	edx, [ebp+var_38]
		mov	dword ptr [esp+0D8h+var_C4+4], ecx
		mov	ecx, [ebp+var_30]
		mov	[esp+0D8h+var_BC], edi
		mov	dword ptr [esp+0D8h+var_CC], eax ; char
		lea	eax, [ebx+esi]
		mov	[esp+0D8h+var_D0], edx ; char *
		mov	[esp+0D8h+Src],	ecx ; size_t
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D8848F:				; CODE XREF: sub_68D86BD0+15A3j
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jns	loc_68D878D6
		lea	esi, [esi+0]
		call	ds:_errno
		test	ebx, ebx
		mov	esi, [eax]
		jnz	loc_68D8868A

loc_68D884B0:				; CODE XREF: sub_68D86BD0+1AC0j
					; sub_68D86BD0+1AD5j
		cmp	[ebp+var_68], 0
		jz	short loc_68D884C1
		mov	ebx, [ebp+var_68]
		mov	[esp+0D8h+Size], ebx ; Memory
		call	free

loc_68D884C1:				; CODE XREF: sub_68D86BD0+18E4j
		mov	edi, [ebp+Memory]
		mov	[esp+0D8h+Size], edi ; Memory
		call	free
		cmp	[ebp+var_40], 0
		jz	short loc_68D884DD
		mov	eax, [ebp+var_40]
		mov	[esp+0D8h+Size], eax ; Memory
		call	free

loc_68D884DD:				; CODE XREF: sub_68D86BD0+1900j
		call	ds:_errno
		test	esi, esi
		jnz	short loc_68D88501
		mov	ecx, [ebp+var_34]
		movzx	edx, byte ptr [ecx+24h]
		cmp	dl, 73h
		jz	short loc_68D884FC
		cmp	dl, 63h
		mov	si, 16h
		jnz	short loc_68D88501

loc_68D884FC:				; CODE XREF: sub_68D86BD0+1921j
		mov	esi, 2Ah

loc_68D88501:				; CODE XREF: sub_68D86BD0+1915j
					; sub_68D86BD0+192Aj
		mov	[eax], esi
		xor	ebx, ebx
		jmp	loc_68D87316
; ---------------------------------------------------------------------------

loc_68D8850A:				; CODE XREF: sub_68D86BD0+D0Ej
		add	esi, edi
		jmp	loc_68D87A28
; ---------------------------------------------------------------------------

loc_68D88511:				; CODE XREF: sub_68D86BD0+D1Bj
		test	ebx, ebx
		jnz	loc_68D88674

loc_68D88519:				; CODE XREF: sub_68D86BD0+1AA7j
					; sub_68D86BD0+1AB5j
		cmp	[ebp+var_68], 0
		lea	esi, [esi+0]
		jz	short loc_68D8852D
		mov	ebx, [ebp+var_68]
		mov	[esp+0D8h+Size], ebx ; Memory
		call	free

loc_68D8852D:				; CODE XREF: sub_68D86BD0+1950j
		mov	edi, [ebp+Memory]
		mov	[esp+0D8h+Size], edi ; Memory
		call	free
		cmp	[ebp+var_40], 0
		jz	short loc_68D88549
		mov	eax, [ebp+var_40]
		mov	[esp+0D8h+Size], eax ; Memory
		call	free

loc_68D88549:				; CODE XREF: sub_68D86BD0+196Cj
		call	ds:_errno
		xor	ebx, ebx
		mov	dword ptr [eax], 7
		jmp	loc_68D87316
; ---------------------------------------------------------------------------

loc_68D8855C:				; CODE XREF: sub_68D86BD0+120Fj
		lea	edi, [ebp+var_1C]
		mov	eax, [ebp+var_5C]
		mov	[esp+0D8h+var_BC], edi
		mov	edx, dword ptr [ebp+var_48]
		fstp	[esp+0D8h+var_C4]
		mov	ecx, [ebp+var_38]
		mov	edi, [ebp+var_30]
		mov	dword ptr [esp+0D8h+var_CC+4], eax
		lea	eax, [ebx+esi]
		mov	dword ptr [esp+0D8h+var_CC], edx ; char
		mov	[esp+0D8h+var_D0], ecx ; char *
		mov	[esp+0D8h+Src],	edi ; size_t
		mov	[esp+0D8h+Size], eax ; char *
		call	sub_68D8EDC0
		jmp	loc_68D878B4
; ---------------------------------------------------------------------------

loc_68D88593:				; CODE XREF: sub_68D86BD0+1205j
		lea	edi, [ebp+var_1C]
		mov	dword ptr [esp+0D8h+var_C4+4], edi
		fstp	qword ptr [esp+0D8h+var_CC+4]
		jmp	loc_68D881AD
; ---------------------------------------------------------------------------

loc_68D885A3:				; CODE XREF: sub_68D86BD0+1830j
		cmp	al, 75h
		jz	loc_68D883AE
		cmp	al, 78h
		jnz	loc_68D8785F	; jumptable 68D87867 default case
		jmp	loc_68D88366
; ---------------------------------------------------------------------------

loc_68D885B8:				; CODE XREF: sub_68D86BD0+1824j
		imul	eax, edx, 18h
		mov	edx, [ebp+var_40]
		cmp	[ebp+var_74], 0
		mov	edi, [eax+edx+8]
		jnz	short loc_68D885F3
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		repne scasb
		not	ecx
		lea	eax, [ecx-1]
		jmp	loc_68D88236
; ---------------------------------------------------------------------------

loc_68D885D9:				; CODE XREF: sub_68D86BD0+1479j
		mov	eax, ds:_errno
		mov	[ebp+var_58], eax
		jmp	loc_68D8773A
; ---------------------------------------------------------------------------

loc_68D885E6:				; CODE XREF: sub_68D86BD0+109Cj
		mov	[esp+0D8h+Size], eax ; Size
		call	malloc
		jmp	loc_68D87C81
; ---------------------------------------------------------------------------

loc_68D885F3:				; CODE XREF: sub_68D86BD0+19F6j
		mov	ecx, [ebp+var_44]
		mov	[esp+0D8h+Size], edi
		mov	[esp+0D8h+Src],	ecx
		call	sub_68D8EDF0
		jmp	loc_68D88236
; ---------------------------------------------------------------------------

loc_68D88607:				; CODE XREF: sub_68D86BD0+16FFj
		mov	[esp+0D8h+Src],	edi ; NewSize
		mov	[esp+0D8h+Size], ebx ; Memory
		call	realloc
		test	eax, eax
		jz	loc_68D882D5
		mov	ebx, eax
		jmp	loc_68D882D5
; ---------------------------------------------------------------------------

loc_68D88622:				; CODE XREF: sub_68D86BD0+16EBj
		cmp	byte ptr [ebp+var_34], 0
		jz	loc_68D882C1
		mov	[esp+0D8h+Size], edx ; Dst
		mov	[ebp+var_9C], edx
		mov	[esp+0D8h+var_D0], esi ; Size
		mov	[esp+0D8h+Src],	ebx ; Src
		call	memcpy
		mov	edx, [ebp+var_9C]
		jmp	loc_68D882C1
; ---------------------------------------------------------------------------

loc_68D8864D:				; CODE XREF: sub_68D86BD0+1692j
		mov	eax, [ebp+NewSize]
		sar	[ebp+NewSize], 1Fh
		add	eax, eax
		or	[ebp+NewSize], eax
		jmp	loc_68D8826F
; ---------------------------------------------------------------------------

loc_68D8865E:				; CODE XREF: sub_68D86BD0+16CEj
		mov	edx, [ebp+NewSize]
		mov	[esp+0D8h+Size], ebx ; Memory
		mov	[esp+0D8h+Src],	edx ; NewSize
		call	realloc
		mov	edx, eax
		jmp	loc_68D882B1
; ---------------------------------------------------------------------------

loc_68D88674:				; CODE XREF: sub_68D86BD0+1943j
		cmp	ebx, [ebp+arg_0]
		jz	loc_68D88519
		mov	[esp+0D8h+Size], ebx ; Memory
		call	free
		jmp	loc_68D88519
; ---------------------------------------------------------------------------

loc_68D8868A:				; CODE XREF: sub_68D86BD0+18DAj
		cmp	ebx, [ebp+arg_0]
		lea	esi, [esi+0]
		jz	loc_68D884B0
		mov	[esp+0D8h+Size], ebx ; Memory
		lea	esi, [esi+0]
		call	free
		jmp	loc_68D884B0
; ---------------------------------------------------------------------------

loc_68D886AA:				; CODE XREF: sub_68D86BD0+17B9j
		cmp	[ebp+var_44], 0Bh
		mov	eax, 0Ch
		jbe	loc_68D88236
		mov	eax, [ebp+var_84]
		cmp	[ebp+var_44], eax
		jbe	loc_68D88236
		jmp	loc_68D88165
; ---------------------------------------------------------------------------

loc_68D886CD:				; CODE XREF: sub_68D86BD0+1810j
		mov	eax, 1
		jmp	loc_68D88236
; ---------------------------------------------------------------------------

loc_68D886D7:				; CODE XREF: sub_68D86BD0+148Cj
		mov	edx, ds:_errno
		mov	[ebp+var_58], edx
		jmp	loc_68D8773A
; ---------------------------------------------------------------------------

loc_68D886E5:				; CODE XREF: sub_68D86BD0+35Fj
		mov	ebx, ds:_errno
		mov	[ebp+var_58], ebx
		jmp	loc_68D8773A
; ---------------------------------------------------------------------------

loc_68D886F3:				; CODE XREF: sub_68D86BD0+BCFj
					; sub_68D86BD0+E41j ...
		mov	ecx, ds:_errno
		mov	[ebp+var_58], ecx
		jmp	loc_68D872AD
; ---------------------------------------------------------------------------

loc_68D88701:				; CODE XREF: sub_68D86BD0+E17j
					; sub_68D86BD0:loc_68D88078j
		mov	edi, ds:_errno
		mov	[ebp+var_58], edi
		jmp	loc_68D872AD
sub_68D86BD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D88710(void	*Dst, size_t MaxCount, char *Format, va_list)
sub_68D88710	proc near		; CODE XREF: .text:68D88812p

Str		= dword	ptr -2Ch
Val		= dword	ptr -28h
Size		= dword	ptr -24h
ArgList		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Dst		= dword	ptr  4
MaxCount	= dword	ptr  8
Format		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+Format]
		mov	[esp+2Ch+Val], 24h ; Val
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+Dst]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_C]
		mov	[esp+2Ch+Str], esi ; Str
		mov	[esp+2Ch+var_8], edi
		call	strchr
		test	eax, eax
		jz	short loc_68D887B1
		lea	eax, [esp+2Ch+MaxCount]
		mov	edi, [esp+2Ch+MaxCount]
		mov	[esp+2Ch+Size],	esi ; void *
		mov	[esp+2Ch+ArgList], ebp ; int
		mov	[esp+2Ch+Val], eax ; int
		mov	[esp+2Ch+Str], ebx ; int
		call	sub_68D86BD0
		cmp	ebx, eax
		mov	esi, eax
		jz	short loc_68D88771
		test	edi, edi
		jnz	short loc_68D88790

loc_68D88769:				; CODE XREF: sub_68D88710+9Fj
		mov	[esp+2Ch+Str], esi ; Memory
		call	free

loc_68D88771:				; CODE XREF: sub_68D88710+53j
		mov	eax, [esp+2Ch+MaxCount]
		test	eax, eax
		js	short loc_68D887CC

loc_68D88779:				; CODE XREF: sub_68D88710+BAj
					; sub_68D88710+D0j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D88790:				; CODE XREF: sub_68D88710+57j
		mov	ebp, [esp+2Ch+MaxCount]
		cmp	edi, ebp
		ja	short loc_68D8879B
		lea	ebp, [edi-1]

loc_68D8879B:				; CODE XREF: sub_68D88710+86j
		mov	[esp+2Ch+Size],	ebp ; Size
		mov	[esp+2Ch+Val], esi ; Src
		mov	[esp+2Ch+Str], ebx ; Dst
		call	memcpy
		mov	byte ptr [ebx+ebp], 0
		jmp	short loc_68D88769
; ---------------------------------------------------------------------------

loc_68D887B1:				; CODE XREF: sub_68D88710+31j
		mov	eax, [esp+2Ch+MaxCount]
		mov	[esp+2Ch+ArgList], ebp ; ArgList
		mov	[esp+2Ch+Size],	esi ; Format
		mov	[esp+2Ch+Str], ebx ; DstBuf
		mov	[esp+2Ch+Val], eax ; MaxCount
		call	ds:__imp__vsnprintf
		jmp	short loc_68D88779
; ---------------------------------------------------------------------------

loc_68D887CC:				; CODE XREF: sub_68D88710+67j
		call	ds:_errno
		mov	dword ptr [eax], 7
		mov	eax, 0FFFFFFFFh
		lea	esi, [esi+0]
		jmp	short loc_68D88779
sub_68D88710	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		lea	eax, [esp+2Ch]
		mov	[esp+0Ch], eax
		mov	eax, [esp+28h]
		mov	[esp+8], eax
		mov	eax, [esp+24h]
		mov	[esp+4], eax
		mov	eax, [esp+20h]
		mov	[esp], eax
		call	sub_68D88710
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], ebx
		mov	ebx, [esp+34h]
		mov	dword ptr [esp+4], 24h
		mov	[esp+24h], esi
		mov	esi, [esp+30h]
		mov	[esp+28h], edi
		mov	edi, [esp+38h]
		mov	[esp], ebx
		call	strchr
		test	eax, eax
		jz	short loc_68D88890
		lea	eax, [esp+1Ch]
		mov	dword ptr [esp+1Ch], 3FFFFFFFh
		mov	[esp+0Ch], edi
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	[esp], esi
		call	sub_68D86BD0
		cmp	esi, eax
		jnz	short loc_68D888B0
		mov	eax, [esp+1Ch]
		test	eax, eax
		js	short loc_68D888BF

loc_68D8887B:				; CODE XREF: .text:68D888BDj
					; .text:68D888D0j
		mov	ebx, [esp+20h]
		mov	esi, [esp+24h]
		mov	edi, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D88890:				; CODE XREF: .text:68D8884Dj
		mov	[esp+8], edi
		mov	[esp+4], ebx
		mov	[esp], esi
		call	vsprintf
		mov	ebx, [esp+20h]
		mov	esi, [esp+24h]
		mov	edi, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68D888B0:				; CODE XREF: .text:68D88871j
		mov	[esp], eax
		call	free
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D8887B
; ---------------------------------------------------------------------------

loc_68D888BF:				; CODE XREF: .text:68D88879j
		call	ds:_errno
		mov	dword ptr [eax], 7
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D8887B
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D888E0(FILE	*, char	*Format, va_list ArgList)
sub_68D888E0	proc near		; CODE XREF: .text:68D889CEp
					; libintl_fprintf+1Ap ...

Str		= dword	ptr -2Ch
Val		= dword	ptr -28h
Count		= dword	ptr -24h
File		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Format		= dword	ptr  8
ArgList		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+Format]
		mov	[esp+2Ch+Val], 24h ; Val
		mov	[esp+2Ch+var_8], esi
		mov	esi, [esp+2Ch+ArgList]
		mov	[esp+2Ch+var_4], edi
		mov	edi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Str], ebx ; Str
		call	strchr
		test	eax, eax
		jz	loc_68D88990
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Count], ebx ; void *
		mov	[esp+2Ch+File],	esi ; int
		mov	[esp+2Ch+Val], eax ; int
		mov	[esp+2Ch+Str], 0 ; int
		call	sub_68D86BD0
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68D88961
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+File],	edi ; File
		mov	[esp+2Ch+Val], 1 ; Size
		mov	[esp+2Ch+Str], ebx ; Str
		mov	[esp+2Ch+Count], eax ; Count
		call	fwrite
		mov	[esp+2Ch+Str], ebx ; Memory
		mov	esi, eax
		call	free
		cmp	esi, [esp+2Ch+var_10]
		jz	short loc_68D88976

loc_68D88961:				; CODE XREF: sub_68D888E0+53j
		mov	eax, 0FFFFFFFFh

loc_68D88966:				; CODE XREF: sub_68D888E0+9Aj
					; sub_68D888E0+ADj
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68D88976:				; CODE XREF: sub_68D888E0+7Fj
		test	esi, esi
		mov	eax, esi
		jns	short loc_68D88966
		call	ds:_errno
		mov	dword ptr [eax], 7
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D88966
; ---------------------------------------------------------------------------
		align 10h

loc_68D88990:				; CODE XREF: sub_68D888E0+2Dj
		mov	[esp+2Ch+Count], esi ; ArgList
		mov	[esp+2Ch+Val], ebx ; Format
		mov	[esp+2Ch+Str], edi ; File
		call	vfprintf
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_68D888E0	endp

; ---------------------------------------------------------------------------
		sub	esp, 1Ch
		mov	eax, [esp+24h]
		mov	[esp+8], eax
		mov	eax, [esp+20h]
		mov	[esp+4], eax
		mov	eax, ds:_iob
		add	eax, 20h
		mov	[esp], eax
		call	sub_68D888E0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. libintl_fprintf

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_fprintf(FILE *, char *, char)
		public libintl_fprintf
libintl_fprintf	proc near

var_1C		= dword	ptr -1Ch
Format		= dword	ptr -18h
ArgList		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		sub	esp, 1Ch
		lea	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+ArgList], eax ; ArgList
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+Format], eax ;	Format
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	FILE *
		call	sub_68D888E0
		add	esp, 1Ch
		retn
libintl_fprintf	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		lea	eax, [esp+24h]
		mov	[esp+8], eax
		mov	eax, [esp+20h]
		mov	[esp+4], eax
		mov	eax, ds:_iob
		add	eax, 20h
		mov	[esp], eax
		call	sub_68D888E0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  44. libintl_sprintf

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_sprintf(char *Dest, char *Format,	char)
		public libintl_sprintf
libintl_sprintf	proc near

Str		= dword	ptr -2Ch
Val		= dword	ptr -28h
Args		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Dest		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= byte ptr  0Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+Format]
		mov	[esp+2Ch+Val], 24h ; Val
		mov	[esp+2Ch+var_8], esi
		mov	esi, [esp+2Ch+Dest]
		mov	[esp+2Ch+var_4], edi
		lea	edi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+Str], ebx ; Str
		call	strchr
		test	eax, eax
		jz	short loc_68D88AB0
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_10], 3FFFFFFFh
		mov	[esp+2Ch+var_20], edi ;	int
		mov	[esp+2Ch+Args],	ebx ; void *
		mov	[esp+2Ch+Val], eax ; int
		mov	[esp+2Ch+Str], esi ; int
		call	sub_68D86BD0
		cmp	esi, eax
		jnz	short loc_68D88AD0
		mov	eax, [esp+2Ch+var_10]
		test	eax, eax
		js	short loc_68D88ADF

loc_68D88A9B:				; CODE XREF: libintl_sprintf+9Dj
					; libintl_sprintf+B0j
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D88AB0:				; CODE XREF: libintl_sprintf+2Dj
		mov	[esp+2Ch+Args],	edi ; Args
		mov	[esp+2Ch+Val], ebx ; Format
		mov	[esp+2Ch+Str], esi ; Dest
		call	vsprintf
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68D88AD0:				; CODE XREF: libintl_sprintf+51j
		mov	[esp+2Ch+Str], eax ; Memory
		call	free
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D88A9B
; ---------------------------------------------------------------------------

loc_68D88ADF:				; CODE XREF: libintl_sprintf+59j
		call	ds:_errno
		mov	dword ptr [eax], 7
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D88A9B
libintl_sprintf	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68D88B00	proc near		; CODE XREF: sub_68D8A6C0+4Ap
					; sub_68D8A7F0+41p

Size		= dword	ptr -0E8h
Src		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_B5		= byte ptr -0B5h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
Dst		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
Memory		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0DCh
		mov	[esp+0E8h+Size], 2Ch ; Size
		call	malloc
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	loc_68D89368
		mov	ebx, [ebp+arg_8]
		mov	edx, 1
		mov	[ebp+var_34], 0
		mov	[ebp+Memory], 0
		mov	[ebp+var_54], 0
		mov	[ebp+var_44], 0
		mov	[ebp+var_48], 0
		mov	[ebp+var_58], 1
		mov	[ebp+var_2C], 0
		mov	[ebp+var_38], 0
		jmp	short loc_68D88B67
; ---------------------------------------------------------------------------

loc_68D88B65:				; CODE XREF: sub_68D88B00+7Aj
		mov	ebx, eax

loc_68D88B67:				; CODE XREF: sub_68D88B00+63j
					; sub_68D88B00+B49j
		movzx	ecx, word ptr [ebx]
		test	cx, cx
		jz	loc_68D88E29
		cmp	cx, 25h
		lea	eax, [ebx+2]
		jnz	short loc_68D88B65
		movzx	esi, word ptr [ebx+2]
		imul	edi, [ebp+var_54], 2Ch
		add	edi, [ebp+var_50]
		lea	ecx, [esi-30h]
		cmp	cx, 9
		mov	[edi], ebx
		mov	dword ptr [edi+8], 0
		mov	dword ptr [edi+0Ch], 0
		mov	dword ptr [edi+10h], 0
		mov	dword ptr [edi+14h], 0FFFFFFFFh
		mov	dword ptr [edi+18h], 0
		mov	dword ptr [edi+1Ch], 0
		mov	dword ptr [edi+20h], 0FFFFFFFFh
		mov	dword ptr [edi+28h], 0FFFFFFFFh
		ja	short loc_68D88BED
		mov	ecx, eax
		mov	word ptr [ebp+var_30], si

loc_68D88BD0:				; CODE XREF: sub_68D88B00+DDj
		add	ecx, 2
		movzx	ebx, word ptr [ecx]
		lea	esi, [ebx-30h]
		cmp	si, 9
		jbe	short loc_68D88BD0
		cmp	bx, 24h
		movzx	esi, word ptr [ebp+var_30]
		jz	loc_68D8999D

loc_68D88BED:				; CODE XREF: sub_68D88B00+C8j
		mov	[ebp+var_30], 0FFFFFFFFh
		jmp	short loc_68D88C23
; ---------------------------------------------------------------------------

loc_68D88BF6:				; CODE XREF: sub_68D88B00+12Dj
		cmp	si, 2Dh
		jz	short loc_68D88C35
		cmp	si, 2Bh
		jz	short loc_68D88C40
		cmp	si, 20h
		jz	short loc_68D88C46
		cmp	si, 23h
		lea	esi, [esi+0]
		jz	short loc_68D88C50
		cmp	si, 30h
		jnz	short loc_68D88C56
		or	dword ptr [edi+8], 20h
		lea	esi, [esi+0]

loc_68D88C20:				; CODE XREF: sub_68D88B00+133j
					; sub_68D88B00+139j ...
		movzx	esi, word ptr [eax]

loc_68D88C23:				; CODE XREF: sub_68D88B00+F4j
					; sub_68D88B00+EECj
		add	eax, 2
		cmp	si, 27h
		lea	ebx, [eax-2]
		jnz	short loc_68D88BF6
		or	dword ptr [edi+8], 1
		jmp	short loc_68D88C20
; ---------------------------------------------------------------------------

loc_68D88C35:				; CODE XREF: sub_68D88B00+FAj
		or	dword ptr [edi+8], 2
		jmp	short loc_68D88C20
; ---------------------------------------------------------------------------
		align 10h

loc_68D88C40:				; CODE XREF: sub_68D88B00+100j
		or	dword ptr [edi+8], 4
		jmp	short loc_68D88C20
; ---------------------------------------------------------------------------

loc_68D88C46:				; CODE XREF: sub_68D88B00+106j
		or	dword ptr [edi+8], 8
		jmp	short loc_68D88C20
; ---------------------------------------------------------------------------
		align 10h

loc_68D88C50:				; CODE XREF: sub_68D88B00+110j
		or	dword ptr [edi+8], 10h
		jmp	short loc_68D88C20
; ---------------------------------------------------------------------------

loc_68D88C56:				; CODE XREF: sub_68D88B00+116j
		cmp	si, 2Ah
		jz	loc_68D892E5
		lea	eax, [esi-30h]
		cmp	ax, 9
		jbe	loc_68D88D40
		mov	eax, [ebp+Memory]
		mov	[ebp+var_60], eax

loc_68D88C73:				; CODE XREF: sub_68D88B00+8FEj
		mov	ecx, ebx
		mov	eax, [ebp+var_2C]
		mov	ebx, [ebp+var_48]
		mov	[ebp+var_3C], eax
		mov	[ebp+var_4C], ebx

loc_68D88C81:				; CODE XREF: sub_68D88B00+9DEj
		cmp	si, 2Eh
		jz	loc_68D88D8F

loc_68D88C8B:				; CODE XREF: sub_68D88B00+289j
		mov	ebx, ecx
		mov	eax, [ebp+var_3C]
		mov	ecx, [ebp+var_44]
		mov	[ebp+var_2C], eax
		mov	[ebp+var_48], ecx

loc_68D88C99:				; CODE XREF: sub_68D88B00+2D9j
					; sub_68D88B00+2E2j ...
		xor	eax, eax
		jmp	short loc_68D88D03
; ---------------------------------------------------------------------------
		align 10h

loc_68D88CA0:				; CODE XREF: sub_68D88B00+207j
		cmp	si, 4Ch
		jz	short loc_68D88D20
		cmp	si, 6Ch
		jz	loc_68D88D30
		cmp	si, 6Ah
		jz	loc_68D88D38
		cmp	si, 5Ah
		xchg	ax, ax
		jz	short loc_68D88D28
		cmp	si, 7Ah
		jz	short loc_68D88D28
		cmp	si, 74h
		lea	esi, [esi+0]
		jz	short loc_68D88D28
		cmp	si, 49h
		jnz	loc_68D88DE7
		cmp	word ptr [ebx+2], 36h
		jnz	loc_68D88DF4	; jumptable 68D893EF default case
		cmp	word ptr [ebx+4], 34h
		lea	esi, [esi+0]
		jnz	loc_68D88DF4	; jumptable 68D893EF default case
		add	eax, 10h
		add	ebx, 6
		lea	esi, [esi+0]

loc_68D88D00:				; CODE XREF: sub_68D88B00+217j
					; sub_68D88B00+226j ...
		movzx	esi, word ptr [ebx]

loc_68D88D03:				; CODE XREF: sub_68D88B00+19Bj
		cmp	si, 68h
		jnz	short loc_68D88CA0
		mov	ecx, eax
		mov	esi, edx
		and	ecx, 1
		add	ebx, 2
		shl	esi, cl
		or	eax, esi
		jmp	short loc_68D88D00
; ---------------------------------------------------------------------------
		align 10h

loc_68D88D20:				; CODE XREF: sub_68D88B00+1A4j
		or	eax, 4
		add	ebx, 2
		jmp	short loc_68D88D00
; ---------------------------------------------------------------------------

loc_68D88D28:				; CODE XREF: sub_68D88B00+1C0j
					; sub_68D88B00+1C6j ...
		add	ebx, 2
		jmp	short loc_68D88D00
; ---------------------------------------------------------------------------
		align 10h

loc_68D88D30:				; CODE XREF: sub_68D88B00+1AAj
		add	eax, 8
		add	ebx, 2
		jmp	short loc_68D88D00
; ---------------------------------------------------------------------------

loc_68D88D38:				; CODE XREF: sub_68D88B00+1B4j
		add	eax, 10h
		add	ebx, 2
		jmp	short loc_68D88D00
; ---------------------------------------------------------------------------

loc_68D88D40:				; CODE XREF: sub_68D88B00+167j
		movzx	esi, word ptr [ebx]
		mov	[edi+0Ch], ebx
		lea	eax, [esi-30h]
		cmp	ax, 9
		ja	loc_68D8A13E
		mov	ecx, ebx

loc_68D88D55:				; CODE XREF: sub_68D88B00+262j
		add	ecx, 2
		movzx	esi, word ptr [ecx]
		lea	eax, [esi-30h]
		cmp	ax, 9
		jbe	short loc_68D88D55
		mov	eax, ecx
		sub	eax, ebx
		sar	eax, 1
		cmp	[ebp+var_48], eax
		mov	[ebp+var_4C], eax
		mov	[edi+10h], ecx
		jnb	loc_68D893F6
		mov	ebx, [ebp+Memory]
		cmp	si, 2Eh
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_60], ebx
		mov	[ebp+var_3C], eax
		jnz	loc_68D88C8B

loc_68D88D8F:				; CODE XREF: sub_68D88B00+185j
		cmp	word ptr [ecx+2], 2Ah
		lea	ebx, [ecx+2]
		jz	loc_68D89C4F
		movzx	eax, word ptr [ecx+2]
		mov	[edi+18h], ecx
		lea	esi, [eax-30h]
		cmp	si, 9
		ja	short loc_68D88DBF
		lea	esi, [esi+0]

loc_68D88DB0:				; CODE XREF: sub_68D88B00+2BDj
		add	ebx, 2
		movzx	eax, word ptr [ebx]
		lea	esi, [eax-30h]
		cmp	si, 9
		jbe	short loc_68D88DB0

loc_68D88DBF:				; CODE XREF: sub_68D88B00+2ABj
		mov	esi, ebx
		sub	esi, ecx
		mov	ecx, [ebp+var_3C]
		sar	esi, 1
		mov	[ebp+var_48], esi
		mov	esi, eax
		mov	[edi+1Ch], ebx
		mov	[ebp+var_2C], ecx
		mov	ecx, [ebp+var_44]
		cmp	[ebp+var_48], ecx
		ja	loc_68D88C99
		mov	[ebp+var_48], ecx
		jmp	loc_68D88C99
; ---------------------------------------------------------------------------

loc_68D88DE7:				; CODE XREF: sub_68D88B00+1D6j
		lea	ecx, [esi-25h]
		cmp	cx, 53h		; switch 84 cases
		jbe	loc_68D893EC

loc_68D88DF4:				; CODE XREF: sub_68D88B00+1E1j
					; sub_68D88B00+1F0j ...
		mov	ebx, [ebp+Memory] ; jumptable 68D893EF default case
		test	ebx, ebx
		jz	short loc_68D88E06
		mov	ecx, [ebp+Memory]
		mov	[esp+0E8h+Size], ecx ; Memory
		call	free

loc_68D88E06:				; CODE XREF: sub_68D88B00+2F9j
		mov	ebx, [ebp+var_50]
		mov	[esp+0E8h+Size], ebx ; Memory
		xor	ebx, ebx
		call	free
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_68D88E1F:				; CODE XREF: sub_68D88B00+375j
					; sub_68D88B00+876j ...
		lea	esp, [ebp-0Ch]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D88E29:				; CODE XREF: sub_68D88B00+6Dj
		imul	eax, [ebp+var_54], 2Ch
		mov	edx, [ebp+var_50]
		mov	esi, [ebp+var_34]
		mov	[eax+edx], ebx
		xor	edx, edx
		mov	eax, [ebp+Memory]
		test	esi, esi
		jz	short loc_68D88EA9
		mov	edi, [ebp+var_34]
		mov	esi, [ebp+arg_C]

loc_68D88E45:				; CODE XREF: sub_68D88B00+394j
		cmp	dword ptr [eax], 11h ; switch 18 cases
		jbe	short loc_68D88E77

loc_68D88E4A:				; CODE XREF: sub_68D88B00+379j
					; DATA XREF: .rdata:off_68D92828o
		mov	eax, [ebp+var_50] ; jumptable 68D88E79 default case
		mov	[esp+0E8h+Size], eax ; Memory
		call	free
		mov	ecx, [ebp+Memory]
		test	ecx, ecx
		jz	short loc_68D88E67
		mov	edx, [ebp+Memory]
		mov	[esp+0E8h+Size], edx ; Memory
		call	free

loc_68D88E67:				; CODE XREF: sub_68D88B00+35Aj
		call	ds:_errno
		xor	ebx, ebx
		mov	dword ptr [eax], 16h
		jmp	short loc_68D88E1F
; ---------------------------------------------------------------------------

loc_68D88E77:				; CODE XREF: sub_68D88B00+348j
		mov	ecx, [eax]
		jmp	ds:off_68D92828[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D88E80:				; CODE XREF: sub_68D88B00+379j
					; DATA XREF: .rdata:off_68D92828o
		lea	ecx, [esi+4]	; jumptable 68D88E79 cases 5-8,11,13-17
		mov	esi, [esi]
		mov	[eax+8], esi

loc_68D88E88:				; CODE XREF: sub_68D88B00+7E0j
					; sub_68D88B00+90Bj ...
		add	edx, 1
		add	eax, 18h
		cmp	edx, edi
		jnb	short loc_68D88EA9

loc_68D88E92:				; CODE XREF: sub_68D88B00+3A7j
		mov	esi, ecx
		jmp	short loc_68D88E45
; ---------------------------------------------------------------------------

loc_68D88E96:				; CODE XREF: sub_68D88B00+379j
					; DATA XREF: .rdata:off_68D92828o
		lea	ecx, [esi+4]	; jumptable 68D88E79 cases 3,4
		mov	esi, [esi]
		add	edx, 1
		mov	[eax+8], si
		add	eax, 18h
		cmp	edx, edi
		jb	short loc_68D88E92

loc_68D88EA9:				; CODE XREF: sub_68D88B00+33Dj
					; sub_68D88B00+390j
		mov	eax, [ebp+var_48]
		add	eax, 7
		sbb	edx, edx
		or	eax, edx
		add	eax, [ebp+var_44]
		jb	loc_68D89730
		add	eax, 6
		jb	loc_68D8A662
		cmp	eax, 7CFh
		ja	loc_68D8A022
		lea	eax, [eax+eax+1Eh]
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		lea	esi, [esp+0E8h+var_B5]
		and	esi, 0FFFFFFF0h
		mov	[ebp+var_38], esi
		mov	[ebp+var_6C], 0

loc_68D88EED:				; CODE XREF: sub_68D88B00+154Cj
		mov	edx, [ebp+arg_0]
		xor	esi, esi
		xor	ebx, ebx
		test	edx, edx
		jz	short loc_68D88F00
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		mov	esi, [eax]

loc_68D88F00:				; CODE XREF: sub_68D88B00+3F6j
		mov	edx, [ebp+var_50]
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+arg_8]
		mov	[ebp+var_2C], 0
		mov	[ebp+var_34], edx
		mov	edx, [ebp+var_38]
		add	eax, 2
		mov	[ebp+Dst], eax
		mov	eax, [ebp+var_34]
		mov	[ebp+var_70], 0
		add	edx, 4
		mov	[ebp+var_94], edx

loc_68D88F2F:				; CODE XREF: sub_68D88B00+12F4j
		mov	edx, [eax]
		cmp	edx, ecx
		jz	loc_68D88FEA
		mov	edi, [ebp+var_2C]
		sub	edx, ecx
		sar	edx, 1
		add	edi, edx
		sbb	eax, eax
		or	edi, eax
		cmp	esi, edi
		jnb	loc_68D89990
		cmp	esi, 0
		jnz	loc_68D898E3
		mov	si, 0Ch

loc_68D88F5B:				; CODE XREF: sub_68D88B00+DF0j
		cmp	esi, edi
		mov	eax, esi
		jnb	short loc_68D88F65
		mov	eax, edi
		mov	esi, edi

loc_68D88F65:				; CODE XREF: sub_68D88B00+45Fj
		test	eax, eax
		js	loc_68D89F8A
		lea	eax, [esi+esi]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D8A43B
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_3C]
		test	ebx, ebx
		jz	short loc_68D88F8E
		cmp	byte ptr [ebp+var_3C], 0
		jz	loc_68D89765

loc_68D88F8E:				; CODE XREF: sub_68D88B00+482j
		mov	[ebp+var_9C], edx
		mov	[ebp+var_98], ecx
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		mov	edx, [ebp+var_9C]
		mov	ecx, [ebp+var_98]
		mov	[ebp+var_30], eax

loc_68D88FB1:				; CODE XREF: sub_68D88B00+C8Cj
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	loc_68D89FB5
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jnz	loc_68D89C07

loc_68D88FC7:				; CODE XREF: sub_68D88B00+110Bj
		mov	eax, [ebp+var_2C]
		mov	ebx, [ebp+var_30]
		add	eax, eax
		mov	[ebp+var_2C], eax

loc_68D88FD2:				; CODE XREF: sub_68D88B00+E98j
					; sub_68D88B00+114Aj
		lea	eax, [ebx+eax]
		add	edx, edx
		mov	[esp+0E8h+var_E0], edx ; Size
		mov	[esp+0E8h+Src],	ecx ; Src
		mov	[esp+0E8h+Size], eax ; Dst
		call	memcpy
		mov	[ebp+var_2C], edi

loc_68D88FEA:				; CODE XREF: sub_68D88B00+433j
		mov	eax, [ebp+var_54]
		cmp	[ebp+var_70], eax
		jz	loc_68D8A407
		mov	ecx, [ebp+var_34]
		movzx	edx, word ptr [ecx+24h]
		cmp	dx, 25h
		jz	loc_68D898F5
		mov	eax, [ecx+28h]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D892D1	; jumptable 68D89794 default case
		cmp	dx, 6Eh
		jz	loc_68D89BD9
		mov	edx, [ebp+Memory]
		lea	eax, [eax+eax*2]
		mov	ecx, [ebp+var_34]
		mov	[ebp+var_60], 0
		mov	eax, [edx+eax*8]
		mov	ecx, [ecx+8]
		mov	[ebp+var_58], eax
		mov	eax, [ebp+var_34]
		mov	[ebp+var_30], ecx
		mov	ecx, [ebp+var_34]
		mov	eax, [eax+0Ch]
		mov	ecx, [ecx+10h]
		mov	[ebp+var_44], eax
		mov	edx, eax
		cmp	eax, ecx
		mov	[ebp+var_4C], ecx
		jz	short loc_68D89080
		mov	ecx, [ebp+var_34]
		mov	eax, [ecx+14h]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D8A051
		mov	edx, [ebp+Memory]
		lea	eax, [eax+eax*2]
		lea	eax, [edx+eax*8]
		cmp	dword ptr [eax], 5
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		mov	eax, [eax+8]
		test	eax, eax
		mov	[ebp+var_60], eax
		js	loc_68D8A087

loc_68D89080:				; CODE XREF: sub_68D88B00+54Fj
					; sub_68D88B00+1582j ...
		mov	ecx, [ebp+var_34]
		mov	eax, [ebp+var_34]
		mov	ecx, [ecx+18h]
		mov	eax, [eax+1Ch]
		mov	[ebp+var_5C], ecx
		cmp	ecx, eax
		mov	[ebp+var_3C], eax
		jz	loc_68D89F75
		mov	edx, [ebp+var_34]
		mov	eax, [edx+20h]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D89FDD
		mov	ecx, [ebp+Memory]
		lea	eax, [eax+eax*2]
		lea	eax, [ecx+eax*8]
		cmp	dword ptr [eax], 5
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		mov	eax, [eax+8]
		test	eax, eax
		mov	[ebp+var_48], eax
		js	loc_68D89F75

loc_68D890C9:				; CODE XREF: sub_68D88B00+147Cj
					; sub_68D88B00+14EDj ...
		mov	eax, [ebp+var_38]
		test	byte ptr [ebp+var_30], 1
		mov	edi, [ebp+Dst]
		mov	word ptr [eax],	25h
		jz	short loc_68D890E5
		mov	word ptr [edi],	27h
		mov	edi, [ebp+var_94]

loc_68D890E5:				; CODE XREF: sub_68D88B00+5D8j
		test	byte ptr [ebp+var_30], 2
		jz	short loc_68D890F3
		mov	word ptr [edi],	2Dh
		add	edi, 2

loc_68D890F3:				; CODE XREF: sub_68D88B00+5E9j
		test	byte ptr [ebp+var_30], 4
		jz	short loc_68D89101
		mov	word ptr [edi],	2Bh
		add	edi, 2

loc_68D89101:				; CODE XREF: sub_68D88B00+5F7j
		test	byte ptr [ebp+var_30], 8
		jz	short loc_68D8910F
		mov	word ptr [edi],	20h
		add	edi, 2

loc_68D8910F:				; CODE XREF: sub_68D88B00+605j
		test	byte ptr [ebp+var_30], 10h
		jz	short loc_68D8911D
		mov	word ptr [edi],	23h
		add	edi, 2

loc_68D8911D:				; CODE XREF: sub_68D88B00+613j
		test	byte ptr [ebp+var_30], 20h
		jz	short loc_68D8912B
		mov	word ptr [edi],	30h
		add	edi, 2

loc_68D8912B:				; CODE XREF: sub_68D88B00+621j
		mov	edx, [ebp+var_4C]
		cmp	[ebp+var_44], edx
		jz	short loc_68D8916C
		sub	edx, [ebp+var_44]
		mov	ecx, [ebp+var_44]
		mov	[esp+0E8h+Size], edi ; Dst
		and	edx, 0FFFFFFFEh
		mov	[esp+0E8h+var_E0], edx ; Size
		mov	[ebp+var_9C], edx
		mov	[esp+0E8h+Src],	ecx ; Src
		call	memcpy
		mov	edx, [ebp+var_9C]
		mov	eax, [ebp+var_34]
		add	edi, edx
		mov	edx, [ebp+var_34]
		mov	eax, [eax+18h]
		mov	edx, [edx+1Ch]
		mov	[ebp+var_5C], eax
		mov	[ebp+var_3C], edx

loc_68D8916C:				; CODE XREF: sub_68D88B00+631j
		mov	ecx, [ebp+var_3C]
		cmp	[ebp+var_5C], ecx
		jz	short loc_68D8919D
		mov	edx, ecx
		mov	eax, [ebp+var_5C]
		sub	edx, [ebp+var_5C]
		mov	[esp+0E8h+Size], edi ; Dst
		and	edx, 0FFFFFFFEh
		mov	[esp+0E8h+var_E0], edx ; Size
		mov	[ebp+var_9C], edx
		mov	[esp+0E8h+Src],	eax ; Src
		call	memcpy
		mov	edx, [ebp+var_9C]
		add	edi, edx

loc_68D8919D:				; CODE XREF: sub_68D88B00+672j
		cmp	[ebp+var_58], 7
		jb	short loc_68D891BB
		cmp	[ebp+var_58], 8
		jbe	loc_68D89DC7
		cmp	[ebp+var_58], 0Ah
		jnz	short loc_68D891BB
		mov	word ptr [edi],	4Ch
		add	edi, 2

loc_68D891BB:				; CODE XREF: sub_68D88B00+6A1j
					; sub_68D88B00+6B1j ...
		mov	edx, [ebp+var_34]
		lea	ecx, [edi+2]
		mov	[ebp+var_8C], ecx
		mov	[ebp+var_3C], 0
		movzx	eax, word ptr [edx+24h]
		mov	word ptr [edi+2], 0
		mov	[edi], ax
		mov	eax, [edx+14h]
		mov	edx, 1
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68D8920C
		mov	edx, [ebp+Memory]
		lea	eax, [eax+eax*2]
		lea	eax, [edx+eax*8]
		cmp	dword ptr [eax], 5
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		mov	eax, [eax+8]
		mov	edx, 2
		mov	[ebp+var_3C], 1
		mov	[ebp+var_24], eax

loc_68D8920C:				; CODE XREF: sub_68D88B00+6E6j
		mov	ecx, [ebp+var_34]
		mov	eax, [ecx+20h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68D89236
		mov	ecx, [ebp+Memory]
		lea	eax, [eax+eax*2]
		lea	eax, [ecx+eax*8]
		cmp	dword ptr [eax], 5
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		mov	eax, [eax+8]
		mov	ecx, [ebp+var_3C]
		mov	[ebp+var_3C], edx
		mov	[ebp+ecx*4+var_24], eax

loc_68D89236:				; CODE XREF: sub_68D88B00+715j
		mov	eax, [ebp+var_2C]
		add	eax, 2
		mov	[ebp+var_68], eax
		sbb	eax, eax
		or	eax, [ebp+var_68]
		cmp	esi, eax
		jb	loc_68D89B30
		mov	edx, [ebp+var_2C]
		add	edx, edx

loc_68D89251:				; CODE XREF: sub_68D88B00+10A0j
					; sub_68D88B00+1639j
		mov	ecx, [ebp+var_20]
		mov	edi, edx
		mov	eax, [ebp+var_24]
		mov	[ebp+var_30], esi
		mov	word ptr [ebx+edx], 0
		mov	[ebp+var_5C], ecx
		mov	ecx, [ebp+var_48]
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_48]
		mov	[ebp+var_1C], 0FFFFFFFFh
		add	ecx, 1
		mov	[ebp+var_84], ecx
		mov	ecx, [ebp+var_48]
		add	eax, eax
		mov	[ebp+var_74], eax
		add	eax, 1
		mov	[ebp+var_88], eax
		mov	eax, [ebp+var_48]
		add	ecx, 0Ch
		mov	[ebp+var_7C], ecx
		mov	ecx, [ebp+var_60]
		add	eax, 2
		mov	[ebp+var_80], eax
		mov	eax, ds:_errno
		add	ecx, 1
		sub	esi, [ebp+var_2C]
		mov	[ebp+var_4C], eax
		mov	[ebp+var_90], ecx
		js	loc_68D898C9

loc_68D892BB:				; CODE XREF: sub_68D88B00+DC3j
					; sub_68D88B00+DCEj
		call	ds:_errno
		cmp	[ebp+var_58], 0Dh ; switch 14 cases
		mov	dword ptr [eax], 0
		jbe	loc_68D89791

loc_68D892D1:				; CODE XREF: sub_68D88B00+50Dj
					; sub_68D88B00+56Cj ...
		call	abort		; jumptable 68D89794 default case
; ---------------------------------------------------------------------------

loc_68D892D6:				; CODE XREF: sub_68D88B00+379j
					; DATA XREF: .rdata:off_68D92828o
		lea	ecx, [esi+4]	; jumptable 68D88E79 cases 1,2
		mov	esi, [esi]
		mov	ebx, esi
		mov	[eax+8], bl
		jmp	loc_68D88E88
; ---------------------------------------------------------------------------

loc_68D892E5:				; CODE XREF: sub_68D88B00+15Aj
		mov	[edi+0Ch], ebx
		mov	ebx, [ebp+var_48]
		mov	ecx, eax
		mov	[edi+10h], eax
		test	ebx, ebx
		jnz	short loc_68D892FB
		mov	[ebp+var_48], 1

loc_68D892FB:				; CODE XREF: sub_68D88B00+7F2j
		movzx	ebx, word ptr [eax]
		mov	word ptr [ebp+var_3C], bx
		sub	ebx, 30h
		cmp	bx, 9
		jbe	short loc_68D89380

loc_68D8930B:				; CODE XREF: sub_68D88B00+893j
		mov	eax, [edi+14h]

loc_68D8930E:				; CODE XREF: sub_68D88B00+8E7j
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D89DAA
		mov	esi, [ebp+var_2C]
		mov	ebx, eax
		mov	[ebp+var_2C], eax
		mov	[ebp+var_3C], esi

loc_68D89322:				; CODE XREF: sub_68D88B00+12C2j
		cmp	[ebp+var_38], ebx
		ja	loc_68D89486
		mov	eax, [ebp+var_38]
		sar	[ebp+var_38], 1Fh
		add	eax, eax
		or	[ebp+var_38], eax
		cmp	[ebp+var_38], ebx
		ja	loc_68D89439
		add	ebx, 1
		mov	[ebp+var_38], ebx
		jnb	loc_68D89439

loc_68D8934C:				; CODE XREF: sub_68D88B00+940j
					; sub_68D88B00+97Dj ...
		cmp	[ebp+Memory], 0
		jz	short loc_68D8935D
		mov	eax, [ebp+Memory]
		mov	[esp+0E8h+Size], eax ; Memory
		call	free

loc_68D8935D:				; CODE XREF: sub_68D88B00+850j
		mov	edx, [ebp+var_50]
		mov	[esp+0E8h+Size], edx ; Memory
		call	free

loc_68D89368:				; CODE XREF: sub_68D88B00+1Dj
		call	ds:_errno
		xor	ebx, ebx
		mov	dword ptr [eax], 0Ch
		jmp	loc_68D88E1F
; ---------------------------------------------------------------------------
		align 10h

loc_68D89380:				; CODE XREF: sub_68D88B00+809j
					; sub_68D88B00+88Dj
		add	eax, 2
		movzx	ebx, word ptr [eax]
		lea	esi, [ebx-30h]
		cmp	si, 9
		jbe	short loc_68D89380
		cmp	bx, 24h
		jnz	loc_68D8930B
		movzx	ebx, word ptr [ebp+var_3C]
		xor	eax, eax

loc_68D8939F:				; CODE XREF: sub_68D88B00+8CBj
		movzx	ebx, bx
		cmp	eax, 19999999h
		lea	esi, [ebx-30h]
		mov	ebx, 0FFFFFFFFh
		ja	short loc_68D893B6
		lea	ebx, [eax+eax*4]
		add	ebx, ebx

loc_68D893B6:				; CODE XREF: sub_68D88B00+8AFj
		mov	eax, ebx
		add	eax, esi
		sbb	ebx, ebx
		add	ecx, 2
		or	eax, ebx
		movzx	ebx, word ptr [ecx]
		lea	esi, [ebx-30h]
		cmp	si, 9
		jbe	short loc_68D8939F
		test	eax, eax
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		sub	eax, 1
		add	ecx, 2
		mov	[edi+14h], eax
		jmp	loc_68D8930E
; ---------------------------------------------------------------------------

loc_68D893EC:				; CODE XREF: sub_68D88B00+2EEj
		movzx	ecx, cx
		jmp	ds:off_68D92870[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D893F6:				; CODE XREF: sub_68D88B00+273j
		mov	ebx, ecx

loc_68D893F8:				; CODE XREF: sub_68D88B00+1641j
		mov	ecx, [ebp+Memory]
		mov	[ebp+var_60], ecx
		jmp	loc_68D88C73
; ---------------------------------------------------------------------------

loc_68D89403:				; CODE XREF: sub_68D88B00+379j
					; DATA XREF: .rdata:off_68D92828o
		fld	tbyte ptr [esi]	; jumptable 68D88E79 case 10
		lea	ecx, [esi+0Ch]
		fstp	tbyte ptr [eax+8]
		jmp	loc_68D88E88
; ---------------------------------------------------------------------------

loc_68D89410:				; CODE XREF: sub_68D88B00+379j
					; DATA XREF: .rdata:off_68D92828o
		lea	ecx, [esi+4]	; jumptable 68D88E79 case 12
		mov	esi, [esi]
		test	esi, esi
		mov	[eax+8], esi
		jnz	loc_68D88E88
		mov	dword ptr [eax+8], offset aNull	; "(NULL)"
		jmp	loc_68D88E88
; ---------------------------------------------------------------------------

loc_68D8942C:				; CODE XREF: sub_68D88B00+379j
					; DATA XREF: .rdata:off_68D92828o
		fld	qword ptr [esi]	; jumptable 68D88E79 case 9
		lea	ecx, [esi+8]
		fstp	qword ptr [eax+8]
		jmp	loc_68D88E88
; ---------------------------------------------------------------------------

loc_68D89439:				; CODE XREF: sub_68D88B00+83Aj
					; sub_68D88B00+846j
		cmp	[ebp+var_38], 0AAAAAAAh
		ja	loc_68D8934C
		imul	eax, [ebp+var_38], 18h
		cmp	[ebp+Memory], 0
		jz	loc_68D8A16C
		mov	esi, [ebp+Memory]
		mov	[ebp+var_9C], edx
		mov	[ebp+var_98], ecx
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	[esp+0E8h+Size], esi ; Memory
		call	realloc
		mov	edx, [ebp+var_9C]
		mov	ecx, [ebp+var_98]

loc_68D8947B:				; CODE XREF: sub_68D88B00+168Cj
		test	eax, eax
		jz	loc_68D8934C
		mov	[ebp+Memory], eax

loc_68D89486:				; CODE XREF: sub_68D88B00+825j
		mov	eax, [ebp+var_2C]
		cmp	[ebp+var_34], eax
		ja	short loc_68D894B3
		mov	ebx, [ebp+var_34]
		mov	esi, [ebp+Memory]
		lea	eax, [ebx+ebx*2]
		lea	eax, [esi+eax*8]
		mov	esi, [ebp+var_2C]
		lea	esi, [esi+0]

loc_68D894A0:				; CODE XREF: sub_68D88B00+9AEj
		add	ebx, 1
		mov	dword ptr [eax], 0
		add	eax, 18h
		cmp	ebx, esi
		jbe	short loc_68D894A0
		mov	[ebp+var_34], ebx

loc_68D894B3:				; CODE XREF: sub_68D88B00+98Cj
		mov	ebx, [ebp+var_2C]
		mov	esi, [ebp+Memory]
		lea	eax, [ebx+ebx*2]
		lea	eax, [esi+eax*8]
		mov	ebx, [eax]
		test	ebx, ebx
		jnz	loc_68D89980
		mov	dword ptr [eax], 5

loc_68D894CF:				; CODE XREF: sub_68D88B00+E83j
		mov	eax, [ebp+Memory]
		mov	ebx, [ebp+var_48]
		movzx	esi, word ptr [ecx]
		mov	[ebp+var_60], eax
		mov	[ebp+var_4C], ebx
		jmp	loc_68D88C81
; ---------------------------------------------------------------------------

loc_68D894E3:				; CODE XREF: sub_68D88B00+8EFj
					; DATA XREF: .rdata:off_68D92870o
		cmp	eax, 7		; jumptable 68D893EF case 62
		jg	loc_68D88DF4	; jumptable 68D893EF default case
		mov	[ebp+var_60], 0Bh

loc_68D894F3:				; CODE XREF: sub_68D88B00+B5Cj
					; sub_68D88B00+B69j ...
		mov	eax, [ebp+var_30]
		cmp	eax, 0FFFFFFFFh
		mov	[edi+28h], eax
		jnz	short loc_68D89518
		mov	ecx, [ebp+var_2C]
		cmp	ecx, 0FFFFFFFFh
		mov	[edi+28h], ecx
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		mov	eax, ecx
		add	eax, 1
		mov	[ebp+var_30], ecx
		mov	[ebp+var_2C], eax

loc_68D89518:				; CODE XREF: sub_68D88B00+9FCj
		mov	ecx, [ebp+var_30]
		cmp	[ebp+var_38], ecx
		ja	short loc_68D89581
		mov	eax, [ebp+var_38]
		sar	[ebp+var_38], 1Fh
		add	eax, eax
		or	[ebp+var_38], eax
		cmp	[ebp+var_38], ecx
		ja	short loc_68D8953D
		add	ecx, 1
		mov	[ebp+var_38], ecx
		jb	loc_68D8934C

loc_68D8953D:				; CODE XREF: sub_68D88B00+A2Fj
		cmp	[ebp+var_38], 0AAAAAAAh
		ja	loc_68D8934C
		imul	eax, [ebp+var_38], 18h
		cmp	[ebp+Memory], 0
		jz	loc_68D8A0DE
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	eax, [ebp+Memory]
		mov	[ebp+var_9C], edx
		mov	[esp+0E8h+Size], eax ; Memory
		call	realloc
		mov	edx, [ebp+var_9C]

loc_68D89573:				; CODE XREF: sub_68D88B00+15F2j
		test	eax, eax
		jz	loc_68D8934C
		mov	ecx, [ebp+var_30]
		mov	[ebp+Memory], eax

loc_68D89581:				; CODE XREF: sub_68D88B00+A1Ej
		cmp	[ebp+var_34], ecx
		ja	short loc_68D895C1
		mov	eax, [ebp+var_34]
		mov	ecx, [ebp+Memory]
		mov	word ptr [ebp+var_3C], si
		mov	esi, [ebp+var_30]
		mov	[ebp+var_44], ebx
		mov	ebx, [ebp+var_34]
		lea	eax, [eax+eax*2]
		lea	ecx, [ecx+eax*8]
		mov	eax, ecx
		mov	ecx, [ebp+var_60]

loc_68D895A4:				; CODE XREF: sub_68D88B00+AB2j
		add	ebx, 1
		mov	dword ptr [eax], 0
		add	eax, 18h
		cmp	ebx, esi
		jbe	short loc_68D895A4
		mov	[ebp+var_34], ebx
		movzx	esi, word ptr [ebp+var_3C]
		mov	ebx, [ebp+var_44]
		mov	[ebp+var_60], ecx

loc_68D895C1:				; CODE XREF: sub_68D88B00+A84j
		mov	eax, [ebp+var_30]
		mov	ecx, [ebp+Memory]
		lea	eax, [eax+eax*2]
		lea	ecx, [ecx+eax*8]
		mov	eax, [ecx]
		mov	[ebp+var_3C], ecx
		test	eax, eax
		mov	[ebp+var_30], eax
		jnz	loc_68D8971C
		mov	eax, [ebp+var_60]
		mov	[ecx], eax

loc_68D895E2:				; CODE XREF: sub_68D88B00+8EFj
					; sub_68D88B00+C1Fj
					; DATA XREF: ...
		mov	[edi+24h], si	; jumptable 68D893EF case 0
		mov	esi, [ebp+var_58]
		add	ebx, 2
		add	[ebp+var_54], 1
		cmp	[ebp+var_54], esi
		mov	[edi+4], ebx
		mov	eax, [ebp+var_50]
		jb	short loc_68D8963A
		test	esi, esi
		js	loc_68D8934C
		shl	[ebp+var_58], 1
		cmp	[ebp+var_58], 5D1745Dh
		ja	loc_68D8934C
		imul	eax, [ebp+var_58], 2Ch
		mov	[ebp+var_9C], edx
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	eax, [ebp+var_50]
		mov	[esp+0E8h+Size], eax ; Memory
		call	realloc
		mov	edx, [ebp+var_9C]
		test	eax, eax
		jz	loc_68D8934C

loc_68D8963A:				; CODE XREF: sub_68D88B00+AF9j
		mov	ecx, [ebp+var_48]
		mov	esi, [ebp+var_4C]
		mov	[ebp+var_50], eax
		mov	[ebp+var_44], ecx
		mov	[ebp+var_48], esi
		jmp	loc_68D88B67
; ---------------------------------------------------------------------------

loc_68D8964E:				; CODE XREF: sub_68D88B00+8EFj
					; DATA XREF: .rdata:off_68D92870o
		cmp	eax, 0Fh	; jumptable 68D893EF cases 28,32-34,60,64-66
		jg	short loc_68D89662
		test	al, 4
		mov	[ebp+var_60], 9
		jz	loc_68D894F3

loc_68D89662:				; CODE XREF: sub_68D88B00+B51j
		mov	[ebp+var_60], 0Ah
		jmp	loc_68D894F3
; ---------------------------------------------------------------------------

loc_68D8966E:				; CODE XREF: sub_68D88B00+8EFj
					; DATA XREF: .rdata:off_68D92870o
		cmp	eax, 7		; jumptable 68D893EF cases 51,74,80,83
		mov	[ebp+var_60], 8
		jg	loc_68D894F3
		test	al, 2
		mov	[ebp+var_60], 2
		jnz	loc_68D894F3
		and	eax, 1
		cmp	eax, 1
		sbb	ecx, ecx
		and	ecx, 2
		add	ecx, 4
		mov	[ebp+var_60], ecx
		jmp	loc_68D894F3
; ---------------------------------------------------------------------------

loc_68D896A3:				; CODE XREF: sub_68D88B00+8EFj
					; DATA XREF: .rdata:off_68D92870o
		cmp	eax, 7		; jumptable 68D893EF case 78
		jg	loc_68D88DF4	; jumptable 68D893EF default case
		mov	[ebp+var_60], 0Ch
		jmp	loc_68D894F3
; ---------------------------------------------------------------------------

loc_68D896B8:				; CODE XREF: sub_68D88B00+8EFj
					; DATA XREF: .rdata:off_68D92870o
		cmp	eax, 7		; jumptable 68D893EF case 73
		mov	[ebp+var_60], 11h
		jg	loc_68D894F3
		test	al, 2
		mov	[ebp+var_60], 0Eh
		jnz	loc_68D894F3
		and	eax, 1
		neg	eax
		add	eax, 10h
		mov	[ebp+var_60], eax
		jmp	loc_68D894F3
; ---------------------------------------------------------------------------

loc_68D896E7:				; CODE XREF: sub_68D88B00+8EFj
					; DATA XREF: .rdata:off_68D92870o
		cmp	eax, 7		; jumptable 68D893EF cases 63,68
		mov	[ebp+var_60], 7
		jg	loc_68D894F3
		test	al, 2
		mov	[ebp+var_60], 1
		jnz	loc_68D894F3
		and	eax, 1
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 2
		add	eax, 3
		mov	[ebp+var_60], eax
		jmp	loc_68D894F3
; ---------------------------------------------------------------------------

loc_68D8971C:				; CODE XREF: sub_68D88B00+AD7j
		cmp	[ebp+var_60], eax
		jz	loc_68D895E2	; jumptable 68D893EF case 0
		jmp	loc_68D88DF4	; jumptable 68D893EF default case
; ---------------------------------------------------------------------------
		align 10h

loc_68D89730:				; CODE XREF: sub_68D88B00+3B6j
					; sub_68D88B00+1543j
		mov	ecx, ds:_errno
		mov	[ebp+var_4C], ecx

loc_68D89739:				; CODE XREF: sub_68D88B00+149Fj
					; sub_68D88B00+14B0j ...
		mov	ecx, [ebp+var_50]
		mov	[esp+0E8h+Size], ecx ; Memory
		call	free
		cmp	[ebp+Memory], 0
		jz	short loc_68D89755
		mov	ebx, [ebp+Memory]
		mov	[esp+0E8h+Size], ebx ; Memory
		call	free

loc_68D89755:				; CODE XREF: sub_68D88B00+C48j
		call	[ebp+var_4C]
		xor	ebx, ebx
		mov	dword ptr [eax], 0Ch
		jmp	loc_68D88E1F
; ---------------------------------------------------------------------------

loc_68D89765:				; CODE XREF: sub_68D88B00+488j
		mov	[ebp+var_9C], edx
		mov	[ebp+var_98], ecx
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	[esp+0E8h+Size], ebx ; Memory
		call	realloc
		mov	ecx, [ebp+var_98]
		mov	edx, [ebp+var_9C]
		mov	[ebp+var_30], eax
		jmp	loc_68D88FB1
; ---------------------------------------------------------------------------

loc_68D89791:				; CODE XREF: sub_68D88B00+7CBj
		mov	eax, [ebp+var_58]
		jmp	ds:off_68D929C0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D8979B:				; CODE XREF: sub_68D88B00+C94j
					; DATA XREF: .rdata:off_68D929C0o
		mov	ecx, [ebp+var_34] ; jumptable 68D89794 cases 5-8,12,13
		mov	edx, [ebp+Memory]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		mov	eax, [eax+edx+8]
		jz	loc_68D89A0A

loc_68D897B3:				; CODE XREF: sub_68D88B00+F04j
					; sub_68D88B00+1413j ...
		cmp	[ebp+var_3C], 2
		jz	loc_68D89BA5
		mov	dword ptr [esp+0E8h+var_DC], eax ; char
		mov	eax, [ebp+var_38]
		lea	ecx, [ebp+var_1C]
		mov	dword ptr [esp+0E8h+var_DC+4], ecx
		mov	[esp+0E8h+Src],	esi ; size_t
		mov	[esp+0E8h+var_E0], eax ; wchar_t *
		lea	eax, [ebx+edi]
		mov	[esp+0E8h+Size], eax ; wchar_t *
		call	sub_68D8EE30

loc_68D897DE:				; CODE XREF: sub_68D88B00+10D4j
					; sub_68D88B00+13FBj ...
		mov	ecx, [ebp+var_1C]
		test	ecx, ecx
		js	loc_68D89A3D

loc_68D897E9:				; CODE XREF: sub_68D88B00+F37j
		cmp	esi, ecx
		mov	[ebp+var_64], ecx
		jbe	short loc_68D89800
		mov	edx, [ebp+var_2C]
		add	edx, ecx
		cmp	word ptr [ebx+edx*2], 0
		jnz	loc_68D892D1	; jumptable 68D89794 default case

loc_68D89800:				; CODE XREF: sub_68D88B00+CEEj
		cmp	eax, ecx
		jle	short loc_68D8980A

loc_68D89804:				; CODE XREF: sub_68D88B00+F4Fj
		mov	[ebp+var_1C], eax
		mov	[ebp+var_64], eax

loc_68D8980A:				; CODE XREF: sub_68D88B00+D02j
		mov	eax, [ebp+var_64]
		add	eax, 1
		cmp	esi, eax
		ja	loc_68D8A49B
		cmp	esi, 7FFFFFFFh
		jz	loc_68D8A4ED
		mov	eax, [ebp+var_30]
		mov	esi, 0FFFFFFFFh
		mov	edx, [ebp+var_30]
		add	eax, eax
		sar	edx, 1Fh
		or	eax, edx
		mov	edx, [ebp+var_64]
		add	edx, [ebp+var_68]
		cmp	[ebp+var_2C], edx
		ja	short loc_68D89849
		cmp	eax, edx
		mov	esi, eax
		jnb	short loc_68D89849
		mov	esi, edx

loc_68D89849:				; CODE XREF: sub_68D88B00+D3Fj
					; sub_68D88B00+D45j
		cmp	[ebp+var_30], esi
		jnb	short loc_68D898B3
		cmp	[ebp+var_30], 0
		mov	eax, 0Ch
		jz	short loc_68D89864
		jl	loc_68D89F66
		mov	eax, [ebp+var_30]
		add	eax, eax

loc_68D89864:				; CODE XREF: sub_68D88B00+D57j
		cmp	eax, esi
		mov	edx, esi
		jnb	loc_68D89F81

loc_68D8986E:				; CODE XREF: sub_68D88B00+1470j
					; sub_68D88B00+1485j ...
		test	edx, edx
		js	loc_68D89F93
		lea	eax, [esi+esi]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D89F93
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_30]
		test	ebx, ebx
		jz	short loc_68D89893
		cmp	byte ptr [ebp+var_30], 0
		jz	short loc_68D898D3

loc_68D89893:				; CODE XREF: sub_68D88B00+D8Bj
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		mov	edx, eax

loc_68D8989D:				; CODE XREF: sub_68D88B00+DE1j
		test	edx, edx
		jz	loc_68D89F93
		cmp	byte ptr [ebp+var_30], 0
		jnz	loc_68D89E13

loc_68D898AF:				; CODE XREF: sub_68D88B00+1317j
		mov	ebx, edx
		jmp	short loc_68D898B6
; ---------------------------------------------------------------------------

loc_68D898B3:				; CODE XREF: sub_68D88B00+D4Cj
					; sub_68D88B00+1864j
		mov	esi, [ebp+var_30]

loc_68D898B6:				; CODE XREF: sub_68D88B00+DB1j
					; sub_68D88B00+1301j ...
		mov	[ebp+var_30], esi
		sub	esi, [ebp+var_2C]
		mov	[ebp+var_1C], 0FFFFFFFFh
		jns	loc_68D892BB

loc_68D898C9:				; CODE XREF: sub_68D88B00+7B5j
		mov	esi, 7FFFFFFFh
		jmp	loc_68D892BB
; ---------------------------------------------------------------------------

loc_68D898D3:				; CODE XREF: sub_68D88B00+D91j
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	[esp+0E8h+Size], ebx ; Memory
		call	realloc
		mov	edx, eax
		jmp	short loc_68D8989D
; ---------------------------------------------------------------------------

loc_68D898E3:				; CODE XREF: sub_68D88B00+451j
		jl	loc_68D89F8A
		add	esi, esi
		nop
		lea	esi, [esi+0]
		jmp	loc_68D88F5B
; ---------------------------------------------------------------------------

loc_68D898F5:				; CODE XREF: sub_68D88B00+501j
		cmp	dword ptr [ecx+28h], 0FFFFFFFFh
		lea	esi, [esi+0]
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		mov	edi, [ebp+var_2C]
		add	edi, 1
		sbb	eax, eax
		or	edi, eax
		cmp	esi, edi
		jnb	loc_68D89DD4
		cmp	esi, 0
		jnz	loc_68D8A0F7
		mov	si, 0Ch

loc_68D89925:				; CODE XREF: sub_68D88B00+1600j
		cmp	esi, edi
		mov	eax, esi
		jnb	short loc_68D8992F
		mov	eax, edi
		mov	esi, edi

loc_68D8992F:				; CODE XREF: sub_68D88B00+E29j
		test	eax, eax
		js	loc_68D89FB5
		lea	eax, [esi+esi]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D8A63C
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_30]
		test	ebx, ebx
		jz	short loc_68D89958
		cmp	byte ptr [ebp+var_30], 0
		jz	loc_68D8A0CB

loc_68D89958:				; CODE XREF: sub_68D88B00+E4Cj
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		mov	edx, eax

loc_68D89962:				; CODE XREF: sub_68D88B00+15D9j
		test	edx, edx
		jz	loc_68D89F8A
		cmp	[ebp+var_2C], 0
		jnz	loc_68D8A19E

loc_68D89974:				; CODE XREF: sub_68D88B00+16A2j
		mov	ecx, [ebp+var_2C]
		mov	ebx, edx
		add	ecx, ecx
		jmp	loc_68D89DD9
; ---------------------------------------------------------------------------

loc_68D89980:				; CODE XREF: sub_68D88B00+9C3j
		cmp	ebx, 5
		jz	loc_68D894CF
		jmp	loc_68D88DF4	; jumptable 68D893EF default case
; ---------------------------------------------------------------------------
		align 10h

loc_68D89990:				; CODE XREF: sub_68D88B00+448j
		mov	eax, [ebp+var_2C]
		add	eax, eax
		mov	[ebp+var_2C], eax
		jmp	loc_68D88FD2
; ---------------------------------------------------------------------------

loc_68D8999D:				; CODE XREF: sub_68D88B00+E7j
		xor	ecx, ecx
		nop

loc_68D899A0:				; CODE XREF: sub_68D88B00+ECDj
		movzx	esi, si
		mov	ebx, 0FFFFFFFFh
		sub	esi, 30h
		cmp	ecx, 19999999h
		ja	short loc_68D899B8
		lea	ebx, [ecx+ecx*4]
		add	ebx, ebx

loc_68D899B8:				; CODE XREF: sub_68D88B00+EB1j
		mov	ecx, ebx
		add	ecx, esi
		sbb	ebx, ebx
		add	eax, 2
		movzx	esi, word ptr [eax]
		or	ecx, ebx
		lea	ebx, [esi-30h]
		cmp	bx, 9
		jbe	short loc_68D899A0
		test	ecx, ecx
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		cmp	ecx, 0FFFFFFFFh
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		sub	ecx, 1
		add	eax, 2
		mov	[ebp+var_30], ecx
		movzx	esi, word ptr [eax]
		jmp	loc_68D88C23
; ---------------------------------------------------------------------------

loc_68D899F1:				; CODE XREF: sub_68D88B00+C94j
					; DATA XREF: .rdata:off_68D929C0o
		mov	ecx, [ebp+var_34] ; jumptable 68D89794 case 4
		mov	edx, [ebp+Memory]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		movzx	eax, word ptr [eax+edx+8]
		jnz	loc_68D897B3

loc_68D89A0A:				; CODE XREF: sub_68D88B00+CADj
					; sub_68D88B00+13CAj ...
		mov	ecx, [ebp+var_44]
		lea	edx, [ebp+var_1C]
		mov	dword ptr [esp+0E8h+var_DC+8], edx
		mov	dword ptr [esp+0E8h+var_DC+4], eax
		mov	dword ptr [esp+0E8h+var_DC], ecx ; char

loc_68D89A1C:				; CODE XREF: sub_68D88B00+1379j
		mov	eax, [ebp+var_38]
		mov	[esp+0E8h+Src],	esi ; size_t
		mov	[esp+0E8h+var_E0], eax ; wchar_t *
		lea	eax, [ebx+edi]
		mov	[esp+0E8h+Size], eax ; wchar_t *
		call	sub_68D8EE30
		mov	ecx, [ebp+var_1C]
		test	ecx, ecx
		jns	loc_68D897E9

loc_68D89A3D:				; CODE XREF: sub_68D88B00+CE3j
		mov	ecx, [ebp+var_8C]
		cmp	word ptr [ecx],	0
		jnz	loc_68D89DF9
		test	eax, eax
		jns	loc_68D89804
		mov	edx, [ebp+var_34]
		movzx	eax, word ptr [edx+24h]
		cmp	ax, 65h
		jz	loc_68D8A1F5
		ja	loc_68D8A25F
		cmp	ax, 47h
		jz	loc_68D8A1F5
		ja	loc_68D8A226
		cmp	ax, 45h
		jz	loc_68D8A1F5
		jbe	loc_68D8A315

loc_68D89A8C:				; CODE XREF: sub_68D88B00+1780j
		xor	eax, eax
		cmp	[ebp+var_58], 0Ah
		setz	al
		sub	eax, 1
		and	eax, 0FFFFDBE0h
		add	eax, 2693h
		add	eax, [ebp+var_48]
		jnb	loc_68D8A201

loc_68D89AAB:				; CODE XREF: sub_68D88B00+16FBj
					; sub_68D88B00+175Aj ...
		xor	edx, edx
		or	eax, 0FFFFFFFFh

loc_68D89AB0:				; CODE XREF: sub_68D88B00+1707j
					; sub_68D88B00+1716j
		cmp	edx, eax
		sbb	eax, eax
		or	edx, eax
		cmp	esi, edx
		jb	loc_68D8A342
		call	ds:_errno
		test	ebx, ebx
		mov	esi, [eax]
		jnz	loc_68D8A68D

loc_68D89ACE:				; CODE XREF: sub_68D88B00+1B90j
					; sub_68D88B00+1BA0j
		cmp	[ebp+var_6C], 0
		jz	short loc_68D89ADF
		mov	ebx, [ebp+var_6C]
		mov	[esp+0E8h+Size], ebx ; Memory
		call	free

loc_68D89ADF:				; CODE XREF: sub_68D88B00+FD2j
		mov	eax, [ebp+var_50]
		mov	[esp+0E8h+Size], eax ; Memory
		call	free
		cmp	[ebp+Memory], 0
		jz	short loc_68D89AFB
		mov	edx, [ebp+Memory]
		mov	[esp+0E8h+Size], edx ; Memory
		call	free

loc_68D89AFB:				; CODE XREF: sub_68D88B00+FEEj
		call	ds:_errno
		test	esi, esi
		jnz	short loc_68D89B21
		mov	ecx, [ebp+var_34]
		movzx	edx, word ptr [ecx+24h]
		cmp	dx, 73h
		jz	short loc_68D89B1C
		cmp	dx, 63h
		mov	si, 16h
		jnz	short loc_68D89B21

loc_68D89B1C:				; CODE XREF: sub_68D88B00+1010j
		mov	esi, 2Ah

loc_68D89B21:				; CODE XREF: sub_68D88B00+1003j
					; sub_68D88B00+101Aj
		mov	[eax], esi
		xor	ebx, ebx
		jmp	loc_68D88E1F
; ---------------------------------------------------------------------------
		align 10h

loc_68D89B30:				; CODE XREF: sub_68D88B00+746j
		test	esi, esi
		jnz	loc_68D89E06
		mov	si, 0Ch

loc_68D89B3C:				; CODE XREF: sub_68D88B00+130Ej
		mov	edx, [ebp+var_2C]
		cmp	[ebp+var_68], edx
		sbb	eax, eax
		or	eax, [ebp+var_68]
		cmp	esi, eax
		jnb	short loc_68D89B59
		mov	ecx, [ebp+var_68]
		cmp	edx, ecx
		ja	loc_68D89FB5
		mov	esi, [ebp+var_68]

loc_68D89B59:				; CODE XREF: sub_68D88B00+1049j
		test	esi, esi
		js	loc_68D8A63C
		lea	eax, [esi+esi]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D89F8A
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_30]
		test	ebx, ebx
		jnz	loc_68D89FC0

loc_68D89B7C:				; CODE XREF: sub_68D88B00+14C4j
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		mov	edi, eax

loc_68D89B86:				; CODE XREF: sub_68D88B00+14D8j
		test	edi, edi
		jz	loc_68D8A43B
		mov	ecx, [ebp+var_2C]
		test	ecx, ecx
		jnz	loc_68D8A105

loc_68D89B99:				; CODE XREF: sub_68D88B00+1610j
		mov	edx, [ebp+var_2C]
		mov	ebx, edi
		add	edx, edx
		jmp	loc_68D89251
; ---------------------------------------------------------------------------

loc_68D89BA5:				; CODE XREF: sub_68D88B00+CB7j
					; sub_68D88B00+13D4j
		mov	dword ptr [esp+0E8h+var_DC+8], eax
		mov	ecx, [ebp+var_5C]
		lea	edx, [ebp+var_1C]
		mov	eax, [ebp+var_44]
		mov	[esp+0E8h+var_D0], edx
		mov	dword ptr [esp+0E8h+var_DC+4], ecx
		mov	dword ptr [esp+0E8h+var_DC], eax ; char

loc_68D89BBE:				; CODE XREF: sub_68D88B00+13B3j
		mov	edx, [ebp+var_38]
		lea	eax, [ebx+edi]
		mov	[esp+0E8h+Src],	esi ; size_t
		mov	[esp+0E8h+Size], eax ; wchar_t *
		mov	[esp+0E8h+var_E0], edx ; wchar_t *
		call	sub_68D8EE30
		jmp	loc_68D897DE
; ---------------------------------------------------------------------------

loc_68D89BD9:				; CODE XREF: sub_68D88B00+517j
		imul	eax, 18h
		add	eax, [ebp+Memory]
		mov	edx, [eax]
		cmp	edx, 0Fh
		jz	loc_68D89E40
		ja	loc_68D8A095
		cmp	edx, 0Eh
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		mov	eax, [eax+8]
		movzx	edx, byte ptr [ebp+var_2C]
		mov	[eax], dl
		jmp	loc_68D89DE2
; ---------------------------------------------------------------------------

loc_68D89C07:				; CODE XREF: sub_68D88B00+4C1j
		cmp	byte ptr [ebp+var_3C], 0
		jz	loc_68D88FC7
		mov	eax, [ebp+var_2C]
		mov	[esp+0E8h+Src],	ebx ; Src
		mov	ebx, [ebp+var_30]
		mov	[ebp+var_9C], edx
		mov	[ebp+var_98], ecx
		add	eax, eax
		mov	[esp+0E8h+Size], ebx ; Dst
		mov	[ebp+var_2C], eax
		mov	[esp+0E8h+var_E0], eax ; Size
		call	memcpy
		mov	ebx, [ebp+var_30]
		mov	ecx, [ebp+var_98]
		mov	edx, [ebp+var_9C]
		mov	eax, [ebp+var_2C]
		jmp	loc_68D88FD2
; ---------------------------------------------------------------------------

loc_68D89C4F:				; CODE XREF: sub_68D88B00+297j
		cmp	[ebp+var_44], 1
		lea	ebx, [ecx+4]
		mov	[edi+18h], ecx
		mov	[edi+1Ch], ebx
		jbe	loc_68D8A160

loc_68D89C62:				; CODE XREF: sub_68D88B00+1667j
		movzx	ecx, word ptr [ebx]
		mov	eax, ebx
		mov	word ptr [ebp+var_2C], cx
		sub	ecx, 30h
		cmp	cx, 9
		jbe	loc_68D89D41

loc_68D89C78:				; CODE XREF: sub_68D88B00+1254j
		mov	ecx, [edi+20h]

loc_68D89C7B:				; CODE XREF: sub_68D88B00+12A5j
		cmp	ecx, 0FFFFFFFFh
		jz	loc_68D8A146
		mov	esi, [ebp+var_3C]
		mov	[ebp+var_3C], ecx
		mov	[ebp+var_2C], esi

loc_68D89C8D:				; CODE XREF: sub_68D88B00+165Bj
		mov	ecx, [ebp+var_3C]
		cmp	[ebp+var_38], ecx
		ja	short loc_68D89CF5
		mov	eax, [ebp+var_38]
		mov	esi, ecx
		sar	[ebp+var_38], 1Fh
		add	eax, eax
		or	[ebp+var_38], eax
		cmp	[ebp+var_38], ecx
		ja	short loc_68D89CB4
		add	esi, 1
		mov	[ebp+var_38], esi
		jb	loc_68D8A21B

loc_68D89CB4:				; CODE XREF: sub_68D88B00+11A6j
		cmp	[ebp+var_38], 0AAAAAAAh
		ja	loc_68D8A21B
		imul	eax, [ebp+var_38], 18h
		cmp	[ebp+Memory], 0
		jz	loc_68D8A649
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	eax, [ebp+Memory]
		mov	[ebp+var_9C], edx
		mov	[esp+0E8h+Size], eax ; Memory
		call	realloc
		mov	edx, [ebp+var_9C]

loc_68D89CEA:				; CODE XREF: sub_68D88B00+1B5Dj
		test	eax, eax
		mov	[ebp+Memory], eax
		jz	loc_68D8A21B

loc_68D89CF5:				; CODE XREF: sub_68D88B00+1193j
		mov	ecx, [ebp+var_3C]
		cmp	[ebp+var_34], ecx
		ja	short loc_68D89D1C
		imul	eax, [ebp+var_34], 18h
		mov	esi, ecx
		mov	ecx, [ebp+var_34]
		add	eax, [ebp+Memory]

loc_68D89D09:				; CODE XREF: sub_68D88B00+1217j
		add	ecx, 1
		mov	dword ptr [eax], 0
		add	eax, 18h
		cmp	ecx, esi
		jbe	short loc_68D89D09
		mov	[ebp+var_34], ecx

loc_68D89D1C:				; CODE XREF: sub_68D88B00+11FBj
		imul	eax, [ebp+var_3C], 18h
		add	eax, [ebp+Memory]
		mov	ecx, [eax]
		test	ecx, ecx
		jnz	loc_68D8A0B4
		mov	dword ptr [eax], 5
		mov	eax, [ebp+var_44]
		movzx	esi, word ptr [ebx]
		mov	[ebp+var_48], eax
		jmp	loc_68D88C99
; ---------------------------------------------------------------------------

loc_68D89D41:				; CODE XREF: sub_68D88B00+1172j
					; sub_68D88B00+124Ej
		add	eax, 2
		movzx	ecx, word ptr [eax]
		lea	esi, [ecx-30h]
		cmp	si, 9
		jbe	short loc_68D89D41
		cmp	cx, 24h
		jnz	loc_68D89C78
		movzx	eax, word ptr [ebp+var_2C]
		xor	ecx, ecx

loc_68D89D60:				; CODE XREF: sub_68D88B00+1289j
		movzx	eax, ax
		lea	esi, [eax-30h]
		or	eax, 0FFFFFFFFh
		cmp	ecx, 19999999h
		ja	short loc_68D89D74
		imul	eax, ecx, 0Ah

loc_68D89D74:				; CODE XREF: sub_68D88B00+126Fj
		mov	ecx, eax
		add	ecx, esi
		sbb	eax, eax
		add	ebx, 2
		or	ecx, eax
		movzx	eax, word ptr [ebx]
		lea	esi, [eax-30h]
		cmp	si, 9
		jbe	short loc_68D89D60
		test	ecx, ecx
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		cmp	ecx, 0FFFFFFFFh
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		sub	ecx, 1
		add	ebx, 2
		mov	[edi+20h], ecx
		jmp	loc_68D89C7B
; ---------------------------------------------------------------------------

loc_68D89DAA:				; CODE XREF: sub_68D88B00+811j
		mov	eax, [ebp+var_2C]
		cmp	eax, 0FFFFFFFFh
		mov	[edi+14h], eax
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		add	eax, 1
		mov	ebx, [ebp+var_2C]
		mov	[ebp+var_3C], eax
		jmp	loc_68D89322
; ---------------------------------------------------------------------------

loc_68D89DC7:				; CODE XREF: sub_68D88B00+6A7j
		mov	word ptr [edi],	6Ch
		add	edi, 2
		jmp	loc_68D891BB
; ---------------------------------------------------------------------------

loc_68D89DD4:				; CODE XREF: sub_68D88B00+E12j
		mov	ecx, [ebp+var_2C]
		add	ecx, ecx

loc_68D89DD9:				; CODE XREF: sub_68D88B00+E7Bj
					; sub_68D88B00+16D7j
		mov	word ptr [ebx+ecx], 25h
		mov	[ebp+var_2C], edi

loc_68D89DE2:				; CODE XREF: sub_68D88B00+1102j
					; sub_68D88B00+134Aj ...
		mov	edx, [ebp+var_34]
		add	[ebp+var_70], 1
		mov	ecx, [edx+4]
		add	edx, 2Ch
		mov	[ebp+var_34], edx
		mov	eax, edx
		jmp	loc_68D88F2F
; ---------------------------------------------------------------------------

loc_68D89DF9:				; CODE XREF: sub_68D88B00+F47j
		mov	word ptr [ecx],	0
		mov	esi, [ebp+var_30]
		jmp	loc_68D898B6
; ---------------------------------------------------------------------------

loc_68D89E06:				; CODE XREF: sub_68D88B00+1032j
		lea	eax, [esi+esi]
		sar	esi, 1Fh
		or	esi, eax
		jmp	loc_68D89B3C
; ---------------------------------------------------------------------------

loc_68D89E13:				; CODE XREF: sub_68D88B00+DA9j
		cmp	[ebp+var_2C], 0
		jz	loc_68D898AF
		mov	[esp+0E8h+Src],	ebx ; Src
		mov	[esp+0E8h+Size], edx ; Dst
		mov	[ebp+var_9C], edx
		mov	[esp+0E8h+var_E0], edi ; Size
		call	memcpy
		mov	edx, [ebp+var_9C]
		mov	ebx, edx
		jmp	loc_68D898B6
; ---------------------------------------------------------------------------

loc_68D89E40:				; CODE XREF: sub_68D88B00+10E4j
		mov	eax, [eax+8]
		movzx	ecx, word ptr [ebp+var_2C]
		mov	[eax], cx
		jmp	short loc_68D89DE2
; ---------------------------------------------------------------------------

loc_68D89E4C:				; CODE XREF: sub_68D88B00+C94j
					; DATA XREF: .rdata:off_68D929C0o
		mov	ecx, [ebp+var_34] ; jumptable 68D89794 case 9
		mov	edx, [ebp+Memory]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		fld	qword ptr [eax+edx+8]
		jz	loc_68D8A4C0
		cmp	[ebp+var_3C], 2
		jz	loc_68D8A4A9
		lea	ecx, [ebp+var_1C]
		mov	dword ptr [esp+0E8h+var_DC+8], ecx
		fstp	qword ptr [esp+0E8h+var_DC]
		jmp	loc_68D89A1C
; ---------------------------------------------------------------------------

loc_68D89E7E:				; CODE XREF: sub_68D88B00+C94j
					; DATA XREF: .rdata:off_68D929C0o
		mov	eax, [ebp+var_34] ; jumptable 68D89794 case 10
		mov	edx, [ebp+Memory]
		imul	ecx, [eax+28h],	18h
		cmp	[ebp+var_3C], 1
		fld	tbyte ptr [ecx+edx+8]
		fld	st
		fstp	tbyte ptr [ebp-0B8h]
		jz	loc_68D8A3D2
		cmp	[ebp+var_3C], 2
		jz	loc_68D8A396
		lea	eax, [ebp+var_1C]
		mov	[esp+0E8h+var_D0], eax
		fstp	tbyte ptr [esp+0E8h+var_DC]
		jmp	loc_68D89BBE
; ---------------------------------------------------------------------------

loc_68D89EB8:				; CODE XREF: sub_68D88B00+C94j
					; DATA XREF: .rdata:off_68D929C0o
		mov	edx, [ebp+var_34] ; jumptable 68D89794 case 11
		mov	ecx, [ebp+Memory]
		imul	eax, [edx+28h],	18h
		cmp	[ebp+var_3C], 1
		mov	eax, [eax+ecx+8]
		jz	loc_68D89A0A

loc_68D89ED0:				; CODE XREF: sub_68D88B00+144Fj
		cmp	[ebp+var_3C], 2
		jz	loc_68D89BA5
		mov	ecx, [ebp+var_38]
		lea	edx, [ebp+var_1C]
		mov	dword ptr [esp+0E8h+var_DC], eax ; char
		lea	eax, [ebx+edi]
		mov	dword ptr [esp+0E8h+var_DC+4], edx
		mov	[esp+0E8h+Src],	esi ; size_t
		mov	[esp+0E8h+var_E0], ecx ; wchar_t *
		mov	[esp+0E8h+Size], eax ; wchar_t *
		call	sub_68D8EE30
		jmp	loc_68D897DE
; ---------------------------------------------------------------------------

loc_68D89F00:				; CODE XREF: sub_68D88B00+C94j
					; DATA XREF: .rdata:off_68D929C0o
		mov	ecx, [ebp+var_34] ; jumptable 68D89794 case 3
		mov	edx, [ebp+Memory]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		movsx	eax, word ptr [eax+edx+8]
		jnz	loc_68D897B3
		jmp	loc_68D89A0A
; ---------------------------------------------------------------------------

loc_68D89F1E:				; CODE XREF: sub_68D88B00+C94j
					; DATA XREF: .rdata:off_68D929C0o
		mov	ecx, [ebp+var_34] ; jumptable 68D89794 case 2
		mov	edx, [ebp+Memory]
		imul	eax, [ecx+28h],	18h
		cmp	[ebp+var_3C], 1
		movzx	eax, byte ptr [eax+edx+8]
		jnz	loc_68D897B3
		jmp	loc_68D89A0A
; ---------------------------------------------------------------------------

loc_68D89F3C:				; CODE XREF: sub_68D88B00+C94j
					; DATA XREF: .rdata:off_68D929C0o
		mov	edx, [ebp+var_34] ; jumptable 68D89794 case 1
		mov	ecx, [ebp+Memory]
		imul	eax, [edx+28h],	18h
		cmp	[ebp+var_3C], 1
		movsx	eax, byte ptr [eax+ecx+8]
		jnz	loc_68D89ED0
		jmp	loc_68D89A0A
; ---------------------------------------------------------------------------

loc_68D89F5A:				; CODE XREF: sub_68D88B00+8EFj
					; DATA XREF: .rdata:off_68D92870o
		mov	[ebp+var_60], 0Dh ; jumptable 68D893EF case 75
		jmp	loc_68D894F3
; ---------------------------------------------------------------------------

loc_68D89F66:				; CODE XREF: sub_68D88B00+D59j
					; sub_68D88B00+1875j
		or	edx, 0FFFFFFFFh
		or	eax, 0FFFFFFFFh

loc_68D89F6C:				; CODE XREF: sub_68D88B00+1884j
		mov	esi, eax
		xchg	ax, ax
		jmp	loc_68D8986E
; ---------------------------------------------------------------------------

loc_68D89F75:				; CODE XREF: sub_68D88B00+594j
					; sub_68D88B00+5C3j
		mov	[ebp+var_48], 6
		jmp	loc_68D890C9
; ---------------------------------------------------------------------------

loc_68D89F81:				; CODE XREF: sub_68D88B00+D68j
		mov	edx, eax
		mov	esi, eax
		jmp	loc_68D8986E
; ---------------------------------------------------------------------------

loc_68D89F8A:				; CODE XREF: sub_68D88B00+467j
					; sub_68D88B00:loc_68D898E3j ...
		mov	edx, ds:_errno
		mov	[ebp+var_4C], edx

loc_68D89F93:				; CODE XREF: sub_68D88B00+D70j
					; sub_68D88B00+D7Cj ...
		test	ebx, ebx
		jnz	loc_68D8A1DC

loc_68D89F9B:				; CODE XREF: sub_68D88B00+16DFj
					; sub_68D88B00+16F0j
		cmp	[ebp+var_6C], 0
		jz	loc_68D89739
		mov	edx, [ebp+var_6C]
		mov	[esp+0E8h+Size], edx ; Memory
		call	free
		jmp	loc_68D89739
; ---------------------------------------------------------------------------

loc_68D89FB5:				; CODE XREF: sub_68D88B00+4B6j
					; sub_68D88B00+E31j ...
		mov	esi, ds:_errno
		mov	[ebp+var_4C], esi
		jmp	short loc_68D89F93
; ---------------------------------------------------------------------------

loc_68D89FC0:				; CODE XREF: sub_68D88B00+1076j
		cmp	byte ptr [ebp+var_30], 0
		jnz	loc_68D89B7C
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	[esp+0E8h+Size], ebx ; Memory
		call	realloc
		mov	edi, eax
		jmp	loc_68D89B86
; ---------------------------------------------------------------------------

loc_68D89FDD:				; CODE XREF: sub_68D88B00+5A3j
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_48], 0
		add	edx, 2
		cmp	[ebp+var_3C], edx
		jz	loc_68D890C9
		xor	eax, eax

loc_68D89FF5:				; CODE XREF: sub_68D88B00+1518j
		lea	ecx, [eax+eax*4]
		movzx	edi, word ptr [edx]
		add	edx, 2
		add	ecx, ecx
		cmp	eax, 1999999Ah
		sbb	eax, eax
		not	eax
		or	ecx, eax
		lea	edi, [ecx+edi-30h]
		cmp	edi, ecx
		sbb	eax, eax
		or	eax, edi
		cmp	[ebp+var_3C], edx
		jnz	short loc_68D89FF5
		mov	[ebp+var_48], eax
		jmp	loc_68D890C9
; ---------------------------------------------------------------------------

loc_68D8A022:				; CODE XREF: sub_68D88B00+3CAj
		test	eax, eax
		js	loc_68D8A6B3
		add	eax, eax
		cmp	eax, 0FFFFFFFFh
		nop
		jz	loc_68D8A6A5
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		test	eax, eax
		mov	[ebp+var_38], eax
		jz	loc_68D89730
		mov	[ebp+var_6C], eax
		jmp	loc_68D88EED
; ---------------------------------------------------------------------------

loc_68D8A051:				; CODE XREF: sub_68D88B00+55Aj
		mov	[ebp+var_60], 0
		xor	eax, eax

loc_68D8A05A:				; CODE XREF: sub_68D88B00+157Dj
		lea	ecx, [eax+eax*4]
		movzx	edi, word ptr [edx]
		add	edx, 2
		add	ecx, ecx
		cmp	eax, 1999999Ah
		sbb	eax, eax
		not	eax
		or	ecx, eax
		lea	edi, [ecx+edi-30h]
		cmp	edi, ecx
		sbb	eax, eax
		or	eax, edi
		cmp	[ebp+var_4C], edx
		jnz	short loc_68D8A05A
		mov	[ebp+var_60], eax
		jmp	loc_68D89080
; ---------------------------------------------------------------------------

loc_68D8A087:				; CODE XREF: sub_68D88B00+57Aj
		neg	eax
		or	[ebp+var_30], 2
		mov	[ebp+var_60], eax
		jmp	loc_68D89080
; ---------------------------------------------------------------------------

loc_68D8A095:				; CODE XREF: sub_68D88B00+10EAj
		cmp	edx, 10h
		jz	loc_68D8A191
		cmp	edx, 11h
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		mov	eax, [eax+8]
		mov	ecx, [ebp+var_2C]
		mov	[eax], ecx
		jmp	loc_68D89DE2
; ---------------------------------------------------------------------------

loc_68D8A0B4:				; CODE XREF: sub_68D88B00+1227j
		cmp	ecx, 5
		jnz	loc_68D88DF4	; jumptable 68D893EF default case
		mov	ecx, [ebp+var_44]
		movzx	esi, word ptr [ebx]
		mov	[ebp+var_48], ecx
		jmp	loc_68D88C99
; ---------------------------------------------------------------------------

loc_68D8A0CB:				; CODE XREF: sub_68D88B00+E52j
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	[esp+0E8h+Size], ebx ; Memory
		call	realloc
		mov	edx, eax
		jmp	loc_68D89962
; ---------------------------------------------------------------------------

loc_68D8A0DE:				; CODE XREF: sub_68D88B00+A52j
		mov	[ebp+var_9C], edx
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		mov	edx, [ebp+var_9C]
		jmp	loc_68D89573
; ---------------------------------------------------------------------------

loc_68D8A0F7:				; CODE XREF: sub_68D88B00+E1Bj
		jl	loc_68D89FB5
		add	esi, esi
		nop
		jmp	loc_68D89925
; ---------------------------------------------------------------------------

loc_68D8A105:				; CODE XREF: sub_68D88B00+1093j
		cmp	byte ptr [ebp+var_30], 0
		lea	esi, [esi+0]
		jz	loc_68D89B99
		mov	edx, [ebp+var_2C]
		mov	[esp+0E8h+Src],	ebx ; Src
		mov	ebx, edi
		mov	[esp+0E8h+Size], edi ; Dst
		add	edx, edx
		mov	[esp+0E8h+var_E0], edx ; Size
		mov	[ebp+var_9C], edx
		call	memcpy
		mov	edx, [ebp+var_9C]
		jmp	loc_68D89251
; ---------------------------------------------------------------------------

loc_68D8A13E:				; CODE XREF: sub_68D88B00+24Dj
		mov	[edi+10h], ebx
		jmp	loc_68D893F8
; ---------------------------------------------------------------------------

loc_68D8A146:				; CODE XREF: sub_68D88B00+117Ej
		mov	eax, [ebp+var_3C]
		cmp	eax, 0FFFFFFFFh
		mov	[edi+20h], eax
		jz	loc_68D88DF4	; jumptable 68D893EF default case
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	loc_68D89C8D
; ---------------------------------------------------------------------------

loc_68D8A160:				; CODE XREF: sub_68D88B00+115Cj
		mov	[ebp+var_44], 2
		jmp	loc_68D89C62
; ---------------------------------------------------------------------------

loc_68D8A16C:				; CODE XREF: sub_68D88B00+94Ej
		mov	[ebp+var_9C], edx
		mov	[ebp+var_98], ecx
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		mov	ecx, [ebp+var_98]
		mov	edx, [ebp+var_9C]
		jmp	loc_68D8947B
; ---------------------------------------------------------------------------

loc_68D8A191:				; CODE XREF: sub_68D88B00+1598j
		mov	eax, [eax+8]
		mov	edx, [ebp+var_2C]
		mov	[eax], edx
		jmp	loc_68D89DE2
; ---------------------------------------------------------------------------

loc_68D8A19E:				; CODE XREF: sub_68D88B00+E6Ej
		cmp	byte ptr [ebp+var_30], 0
		jz	loc_68D89974
		mov	ecx, [ebp+var_2C]
		mov	[esp+0E8h+Src],	ebx ; Src
		mov	[esp+0E8h+Size], edx ; Dst
		mov	[ebp+var_9C], edx
		add	ecx, ecx
		mov	[esp+0E8h+var_E0], ecx ; Size
		mov	[ebp+var_98], ecx
		call	memcpy
		mov	edx, [ebp+var_9C]
		mov	ecx, [ebp+var_98]
		mov	ebx, edx
		jmp	loc_68D89DD9
; ---------------------------------------------------------------------------

loc_68D8A1DC:				; CODE XREF: sub_68D88B00+1495j
		cmp	ebx, [ebp+arg_0]
		jz	loc_68D89F9B
		mov	[esp+0E8h+Size], ebx ; Memory
		call	free
		lea	esi, [esi+0]
		jmp	loc_68D89F9B
; ---------------------------------------------------------------------------

loc_68D8A1F5:				; CODE XREF: sub_68D88B00+F60j
					; sub_68D88B00+F70j ...
		mov	eax, [ebp+var_7C]
		cmp	eax, 0Bh
		jbe	loc_68D89AAB

loc_68D8A201:				; CODE XREF: sub_68D88B00+FA5j
					; sub_68D88B00+1750j ...
		cmp	[ebp+var_60], eax
		lea	edx, [eax+1]
		jbe	loc_68D89AB0
		mov	edx, [ebp+var_90]
		mov	eax, [ebp+var_60]
		jmp	loc_68D89AB0
; ---------------------------------------------------------------------------

loc_68D8A21B:				; CODE XREF: sub_68D88B00+11AEj
					; sub_68D88B00+11BBj ...
		mov	esi, [ebp+var_60]
		mov	[ebp+Memory], esi
		jmp	loc_68D8934C
; ---------------------------------------------------------------------------

loc_68D8A226:				; CODE XREF: sub_68D88B00+F76j
		cmp	ax, 61h
		jz	loc_68D8A31F
		ja	loc_68D8A2C5
		cmp	ax, 58h
		lea	esi, [esi+0]
		jnz	loc_68D892D1	; jumptable 68D89794 default case

loc_68D8A246:				; CODE XREF: sub_68D88B00+1A50j
		cmp	[ebp+var_48], 9
		mov	eax, 0Bh
		nop
		jbe	short loc_68D8A201
		mov	eax, [ebp+var_80]
		cmp	[ebp+var_48], eax
		jbe	short loc_68D8A201
		jmp	loc_68D89AAB
; ---------------------------------------------------------------------------

loc_68D8A25F:				; CODE XREF: sub_68D88B00+F66j
		cmp	ax, 6Fh
		jz	loc_68D8A59E
		lea	esi, [esi+0]
		ja	short loc_68D8A2E2
		cmp	ax, 67h
		jz	loc_68D8A1F5
		lea	esi, [esi+0]
		jb	loc_68D89A8C
		cmp	ax, 69h
		lea	esi, [esi+0]
		jnz	loc_68D892D1	; jumptable 68D89794 default case

loc_68D8A296:				; CODE XREF: sub_68D88B00+17E0j
					; sub_68D88B00+1A40j
		cmp	[ebp+var_48], 0Ah
		mov	eax, 15h
		nop
		jbe	loc_68D8A201
		mov	ecx, [ebp+var_74]
		cmp	[ebp+var_48], ecx
		ja	loc_68D89AAB
		mov	eax, [ebp+var_88]
		cmp	ecx, eax
		jbe	loc_68D8A201
		jmp	loc_68D89AAB
; ---------------------------------------------------------------------------

loc_68D8A2C5:				; CODE XREF: sub_68D88B00+1730j
		cmp	ax, 63h
		jz	loc_68D8A5DE
		cmp	ax, 64h
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		lea	esi, [esi+0]
		jmp	short loc_68D8A296
; ---------------------------------------------------------------------------

loc_68D8A2E2:				; CODE XREF: sub_68D88B00+1770j
		cmp	ax, 73h
		jz	loc_68D892D1	; jumptable 68D89794 default case
		lea	esi, [esi+0]
		ja	loc_68D8A53C
		cmp	ax, 70h
		lea	esi, [esi+0]
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		mov	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jmp	loc_68D8A201
; ---------------------------------------------------------------------------

loc_68D8A315:				; CODE XREF: sub_68D88B00+F86j
		cmp	ax, 41h
		jnz	loc_68D892D1	; jumptable 68D89794 default case

loc_68D8A31F:				; CODE XREF: sub_68D88B00+172Aj
		xor	eax, eax
		cmp	[ebp+var_58], 0Ah
		setz	al
		lea	eax, [eax+eax+0Dh]
		cmp	eax, [ebp+var_48]
		jnb	short loc_68D8A334
		mov	eax, [ebp+var_48]

loc_68D8A334:				; CODE XREF: sub_68D88B00+182Fj
		add	eax, 0Ch
		jnb	loc_68D8A201
		jmp	loc_68D89AAB
; ---------------------------------------------------------------------------

loc_68D8A342:				; CODE XREF: sub_68D88B00+FB8j
		add	edx, [ebp+var_2C]
		sbb	eax, eax
		or	edx, eax
		cmp	[ebp+var_30], 0
		js	short loc_68D8A391
		mov	eax, [ebp+var_30]
		add	eax, eax
		add	eax, 0Ch
		jb	short loc_68D8A391
		cmp	edx, eax
		mov	esi, edx
		jnb	short loc_68D8A361
		mov	esi, eax

loc_68D8A361:				; CODE XREF: sub_68D88B00+185Dj
					; sub_68D88B00+1894j
		cmp	[ebp+var_30], esi
		jnb	loc_68D898B3
		cmp	[ebp+var_30], 0
		mov	eax, 0Ch
		jz	short loc_68D8A380
		jl	loc_68D89F66
		mov	eax, [ebp+var_30]
		add	eax, eax

loc_68D8A380:				; CODE XREF: sub_68D88B00+1873j
		cmp	eax, esi
		mov	edx, eax
		jnb	loc_68D89F6C
		mov	edx, esi
		jmp	loc_68D8986E
; ---------------------------------------------------------------------------

loc_68D8A391:				; CODE XREF: sub_68D88B00+184Dj
					; sub_68D88B00+1857j
		or	esi, 0FFFFFFFFh
		jmp	short loc_68D8A361
; ---------------------------------------------------------------------------

loc_68D8A396:				; CODE XREF: sub_68D88B00+13A2j
		fstp	st
		lea	ecx, [ebp+var_1C]
		mov	eax, [ebp+var_5C]
		mov	[esp+0E8h+var_C8], ecx
		mov	edx, [ebp+var_44]
		mov	ecx, [ebp+var_38]
		fld	tbyte ptr [ebp-0B8h]
		mov	dword ptr [esp+0E8h+var_DC+4], eax
		lea	eax, [ebx+edi]
		fstp	tbyte ptr [esp+0E8h+var_DC+8]
		mov	dword ptr [esp+0E8h+var_DC], edx ; char
		mov	[esp+0E8h+var_E0], ecx ; wchar_t *
		mov	[esp+0E8h+Src],	esi ; size_t
		mov	[esp+0E8h+Size], eax ; wchar_t *
		call	sub_68D8EE30
		jmp	loc_68D897DE
; ---------------------------------------------------------------------------

loc_68D8A3D2:				; CODE XREF: sub_68D88B00+1398j
		fstp	st
		fld	tbyte ptr [ebp-0B8h]
		lea	ecx, [ebp+var_1C]
		fstp	tbyte ptr [esp+0E8h+var_DC+4]
		mov	[esp+0E8h+var_CC], ecx

loc_68D8A3E5:				; CODE XREF: sub_68D88B00+19BBj
		mov	eax, [ebp+var_44]
		mov	edx, [ebp+var_38]
		mov	[esp+0E8h+Src],	esi ; size_t
		mov	dword ptr [esp+0E8h+var_DC], eax ; char
		lea	eax, [ebx+edi]
		mov	[esp+0E8h+var_E0], edx ; wchar_t *
		mov	[esp+0E8h+Size], eax ; wchar_t *
		call	sub_68D8EE30
		jmp	loc_68D897DE
; ---------------------------------------------------------------------------

loc_68D8A407:				; CODE XREF: sub_68D88B00+4F0j
		mov	edi, [ebp+var_2C]
		add	edi, 1
		sbb	eax, eax
		or	eax, edi
		cmp	esi, eax
		jnb	short loc_68D8A449
		test	esi, esi
		jnz	loc_68D8A5C1
		mov	si, 0Ch

loc_68D8A421:				; CODE XREF: sub_68D88B00+1AC9j
		cmp	edi, [ebp+var_2C]
		sbb	eax, eax
		or	eax, edi
		cmp	esi, eax
		jnb	loc_68D8A555
		cmp	edi, [ebp+var_2C]
		mov	esi, edi
		jnb	loc_68D8A555

loc_68D8A43B:				; CODE XREF: sub_68D88B00+473j
					; sub_68D88B00+1088j
		mov	ecx, ds:_errno
		mov	[ebp+var_4C], ecx
		jmp	loc_68D89F93
; ---------------------------------------------------------------------------

loc_68D8A449:				; CODE XREF: sub_68D88B00+1913j
		mov	ecx, [ebp+var_2C]
		add	ecx, ecx

loc_68D8A44E:				; CODE XREF: sub_68D88B00+1A99j
					; sub_68D88B00+1B21j
		cmp	ebx, [ebp+arg_0]
		mov	word ptr [ebx+ecx], 0
		jz	short loc_68D8A461
		cmp	esi, edi
		ja	loc_68D8A670

loc_68D8A461:				; CODE XREF: sub_68D88B00+1957j
					; sub_68D88B00+1B80j ...
		cmp	[ebp+var_6C], 0
		jz	short loc_68D8A472
		mov	ecx, [ebp+var_6C]
		mov	[esp+0E8h+Size], ecx ; Memory
		call	free

loc_68D8A472:				; CODE XREF: sub_68D88B00+1965j
		mov	esi, [ebp+var_50]
		mov	[esp+0E8h+Size], esi ; Memory
		call	free
		cmp	[ebp+Memory], 0
		jz	short loc_68D8A48E
		mov	eax, [ebp+Memory]
		mov	[esp+0E8h+Size], eax ; Memory
		call	free

loc_68D8A48E:				; CODE XREF: sub_68D88B00+1981j
		mov	edx, [ebp+var_2C]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], edx
		jmp	loc_68D88E1F
; ---------------------------------------------------------------------------

loc_68D8A49B:				; CODE XREF: sub_68D88B00+D12j
		mov	eax, [ebp+var_64]
		mov	esi, [ebp+var_30]
		add	[ebp+var_2C], eax
		jmp	loc_68D89DE2
; ---------------------------------------------------------------------------

loc_68D8A4A9:				; CODE XREF: sub_68D88B00+1368j
		mov	ecx, [ebp+var_5C]
		lea	edx, [ebp+var_1C]
		mov	[esp+0E8h+var_CC], edx
		fstp	qword ptr [esp+0E8h+var_DC+8]
		mov	dword ptr [esp+0E8h+var_DC+4], ecx
		jmp	loc_68D8A3E5
; ---------------------------------------------------------------------------

loc_68D8A4C0:				; CODE XREF: sub_68D88B00+135Ej
		mov	eax, [ebp+var_38]
		lea	edx, [ebp+var_1C]
		mov	ecx, [ebp+var_44]
		fstp	qword ptr [esp+0E8h+var_DC+4]
		mov	[esp+0E8h+var_D0], edx
		mov	[esp+0E8h+Src],	esi ; size_t
		mov	[esp+0E8h+var_E0], eax ; wchar_t *
		lea	eax, [ebx+edi]
		mov	dword ptr [esp+0E8h+var_DC], ecx ; char
		mov	[esp+0E8h+Size], eax ; wchar_t *
		call	sub_68D8EE30
		jmp	loc_68D897DE
; ---------------------------------------------------------------------------

loc_68D8A4ED:				; CODE XREF: sub_68D88B00+D1Ej
		test	ebx, ebx
		jnz	loc_68D8A626

loc_68D8A4F5:				; CODE XREF: sub_68D88B00+1B29j
					; sub_68D88B00+1B37j
		cmp	[ebp+var_6C], 0
		lea	esi, [esi+0]
		jz	short loc_68D8A50D
		mov	ebx, [ebp+var_6C]
		mov	[esp+0E8h+Size], ebx ; Memory
		call	free

loc_68D8A50D:				; CODE XREF: sub_68D88B00+1A00j
		mov	esi, [ebp+var_50]
		mov	[esp+0E8h+Size], esi ; Memory
		call	free
		cmp	[ebp+Memory], 0
		jz	short loc_68D8A529
		mov	eax, [ebp+Memory]
		mov	[esp+0E8h+Size], eax ; Memory
		call	free

loc_68D8A529:				; CODE XREF: sub_68D88B00+1A1Cj
		call	ds:_errno
		xor	ebx, ebx
		mov	dword ptr [eax], 7
		jmp	loc_68D88E1F
; ---------------------------------------------------------------------------

loc_68D8A53C:				; CODE XREF: sub_68D88B00+17F0j
		cmp	ax, 75h
		jz	loc_68D8A296
		cmp	ax, 78h
		jnz	loc_68D892D1	; jumptable 68D89794 default case
		jmp	loc_68D8A246
; ---------------------------------------------------------------------------

loc_68D8A555:				; CODE XREF: sub_68D88B00+192Aj
					; sub_68D88B00+1935j
		test	esi, esi
		js	loc_68D89FB5
		lea	eax, [esi+esi]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D8A63C
		cmp	ebx, [ebp+arg_0]
		setz	byte ptr [ebp+var_34]
		test	ebx, ebx
		jz	short loc_68D8A57A
		cmp	byte ptr [ebp+var_34], 0
		jz	short loc_68D8A5CE

loc_68D8A57A:				; CODE XREF: sub_68D88B00+1A72j
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		mov	edx, eax

loc_68D8A584:				; CODE XREF: sub_68D88B00+1ADCj
		test	edx, edx
		jz	loc_68D89F8A
		cmp	[ebp+var_2C], 0
		jnz	short loc_68D8A5E8

loc_68D8A592:				; CODE XREF: sub_68D88B00+1AF0j
		mov	ecx, [ebp+var_2C]
		mov	ebx, edx
		add	ecx, ecx
		jmp	loc_68D8A44E
; ---------------------------------------------------------------------------

loc_68D8A59E:				; CODE XREF: sub_68D88B00+1763j
		cmp	[ebp+var_48], 0Bh
		mov	eax, 0Ch
		jbe	loc_68D8A201
		mov	eax, [ebp+var_84]
		cmp	[ebp+var_48], eax
		jbe	loc_68D8A201
		jmp	loc_68D89AAB
; ---------------------------------------------------------------------------

loc_68D8A5C1:				; CODE XREF: sub_68D88B00+1917j
		lea	eax, [esi+esi]
		sar	esi, 1Fh
		or	esi, eax
		jmp	loc_68D8A421
; ---------------------------------------------------------------------------

loc_68D8A5CE:				; CODE XREF: sub_68D88B00+1A78j
		mov	[esp+0E8h+Src],	eax ; NewSize
		mov	[esp+0E8h+Size], ebx ; Memory
		call	realloc
		mov	edx, eax
		jmp	short loc_68D8A584
; ---------------------------------------------------------------------------

loc_68D8A5DE:				; CODE XREF: sub_68D88B00+17C9j
		mov	eax, 1
		jmp	loc_68D8A201
; ---------------------------------------------------------------------------

loc_68D8A5E8:				; CODE XREF: sub_68D88B00+1A90j
		cmp	byte ptr [ebp+var_34], 0
		lea	esi, [esi+0]
		jz	short loc_68D8A592
		mov	ecx, [ebp+var_2C]
		mov	[esp+0E8h+Src],	ebx ; Src
		mov	[esp+0E8h+Size], edx ; Dst
		mov	[ebp+var_9C], edx
		add	ecx, ecx
		mov	[esp+0E8h+var_E0], ecx ; Size
		mov	[ebp+var_98], ecx
		call	memcpy
		mov	edx, [ebp+var_9C]
		mov	ecx, [ebp+var_98]
		mov	ebx, edx
		jmp	loc_68D8A44E
; ---------------------------------------------------------------------------

loc_68D8A626:				; CODE XREF: sub_68D88B00+19EFj
		cmp	ebx, [ebp+arg_0]
		jz	loc_68D8A4F5
		mov	[esp+0E8h+Size], ebx ; Memory
		call	free
		jmp	loc_68D8A4F5
; ---------------------------------------------------------------------------

loc_68D8A63C:				; CODE XREF: sub_68D88B00+E3Dj
					; sub_68D88B00+105Bj ...
		mov	eax, ds:_errno
		mov	[ebp+var_4C], eax
		jmp	loc_68D89F93
; ---------------------------------------------------------------------------

loc_68D8A649:				; CODE XREF: sub_68D88B00+11C9j
		mov	[ebp+var_9C], edx
		mov	[esp+0E8h+Size], eax ; Size
		call	malloc
		mov	edx, [ebp+var_9C]
		jmp	loc_68D89CEA
; ---------------------------------------------------------------------------

loc_68D8A662:				; CODE XREF: sub_68D88B00+3BFj
		mov	ebx, ds:_errno
		mov	[ebp+var_4C], ebx
		jmp	loc_68D89739
; ---------------------------------------------------------------------------

loc_68D8A670:				; CODE XREF: sub_68D88B00+195Bj
		add	edi, edi
		mov	[esp+0E8h+Src],	edi ; NewSize
		mov	[esp+0E8h+Size], ebx ; Memory
		call	realloc
		test	eax, eax
		jz	loc_68D8A461
		mov	ebx, eax
		jmp	loc_68D8A461
; ---------------------------------------------------------------------------

loc_68D8A68D:				; CODE XREF: sub_68D88B00+FC8j
		cmp	ebx, [ebp+arg_0]
		jz	loc_68D89ACE
		mov	[esp+0E8h+Size], ebx ; Memory
		call	free
		xchg	ax, ax
		jmp	loc_68D89ACE
; ---------------------------------------------------------------------------

loc_68D8A6A5:				; CODE XREF: sub_68D88B00+1530j
		mov	edx, ds:_errno
		mov	[ebp+var_4C], edx
		jmp	loc_68D89739
; ---------------------------------------------------------------------------

loc_68D8A6B3:				; CODE XREF: sub_68D88B00+1524j
		mov	eax, ds:_errno
		mov	[ebp+var_4C], eax
		jmp	loc_68D89739
sub_68D88B00	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8A6C0(void	*Dst, size_t Count, wchar_t *Format, va_list)
sub_68D8A6C0	proc near		; CODE XREF: .text:68D8A7E2p

Str		= dword	ptr -2Ch
var_28		= word ptr -28h
Size		= dword	ptr -24h
Args		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Dst		= dword	ptr  4
Count		= dword	ptr  8
Format		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+Format]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+Dst]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	dword ptr [esp+2Ch+var_28], 24h	; Ch
		mov	[esp+2Ch+Str], esi ; Str
		call	wcschr
		test	eax, eax
		jz	short loc_68D8A770
		lea	eax, [esp+2Ch+Count]
		mov	ebp, [esp+2Ch+Count]
		mov	[esp+2Ch+Size],	esi
		mov	[esp+2Ch+Args],	edi
		mov	dword ptr [esp+2Ch+var_28], eax
		mov	[esp+2Ch+Str], ebx
		call	sub_68D88B00
		cmp	ebx, eax
		mov	esi, eax
		jnz	short loc_68D8A735
		mov	eax, [esp+2Ch+Count]

loc_68D8A719:				; CODE XREF: sub_68D8A6C0+ABj
		test	eax, eax
		js	loc_68D8A7A5

loc_68D8A721:				; CODE XREF: sub_68D8A6C0+C9j
					; sub_68D8A6C0+E0j ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8A735:				; CODE XREF: sub_68D8A6C0+53j
		test	ebp, ebp
		jz	short loc_68D8A790
		mov	edi, [esp+2Ch+Count]
		cmp	ebp, edi
		ja	short loc_68D8A744
		lea	edi, [ebp-1]

loc_68D8A744:				; CODE XREF: sub_68D8A6C0+7Fj
		lea	eax, [edi+edi]
		mov	[esp+2Ch+Size],	eax ; Size
		mov	dword ptr [esp+2Ch+var_28], esi	; Src
		mov	[esp+2Ch+Str], ebx ; Dst
		call	memcpy
		mov	word ptr [ebx+edi*2], 0
		mov	[esp+2Ch+Str], esi ; Memory
		call	free
		mov	eax, [esp+2Ch+Count]
		cmp	ebp, eax
		ja	short loc_68D8A719
		jmp	short loc_68D8A7B1
; ---------------------------------------------------------------------------
		align 10h

loc_68D8A770:				; CODE XREF: sub_68D8A6C0+31j
		mov	eax, [esp+2Ch+Count]
		mov	[esp+2Ch+Args],	edi ; Args
		mov	[esp+2Ch+Size],	esi ; Format
		mov	[esp+2Ch+Str], ebx ; Dest
		mov	dword ptr [esp+2Ch+var_28], eax	; Count
		call	ds:__imp__vsnwprintf
		jmp	short loc_68D8A721
; ---------------------------------------------------------------------------
		align 10h

loc_68D8A790:				; CODE XREF: sub_68D8A6C0+77j
		mov	[esp+2Ch+Str], eax ; Memory
		call	free
		mov	eax, 0FFFFFFFFh
		lea	esi, [esi+0]
		jmp	loc_68D8A721
; ---------------------------------------------------------------------------

loc_68D8A7A5:				; CODE XREF: sub_68D8A6C0+5Bj
		call	ds:_errno
		mov	dword ptr [eax], 7

loc_68D8A7B1:				; CODE XREF: sub_68D8A6C0+ADj
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8A721
sub_68D8A6C0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		lea	eax, [esp+2Ch]
		mov	[esp+0Ch], eax
		mov	eax, [esp+28h]
		mov	[esp+8], eax
		mov	eax, [esp+24h]
		mov	[esp+4], eax
		mov	eax, [esp+20h]
		mov	[esp], eax
		call	sub_68D8A6C0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8A7F0(FILE	*File, wchar_t *Format,	va_list)
sub_68D8A7F0	proc near		; CODE XREF: .text:68D8A8DEp
					; .text:68D8A90Ap ...

Str		= dword	ptr -2Ch
var_28		= word ptr -28h
ArgList		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
File		= dword	ptr  4
Format		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+Format]
		mov	edi, [esp+2Ch+File]
		mov	esi, [esp+2Ch+arg_8]
		mov	dword ptr [esp+2Ch+var_28], 24h	; Ch
		mov	[esp+2Ch+Str], ebx ; Str
		call	wcschr
		test	eax, eax
		jz	loc_68D8A8A0
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+ArgList], ebx
		mov	dword ptr [esp+2Ch+var_28], eax
		mov	[esp+2Ch+Str], 0
		call	sub_68D88B00
		test	eax, eax
		mov	esi, eax
		jz	short loc_68D8A875
		mov	eax, [esp+2Ch+var_10]
		xor	ebx, ebx
		test	eax, eax
		jnz	short loc_68D8A851
		jmp	short loc_68D8A867
; ---------------------------------------------------------------------------

loc_68D8A848:				; CODE XREF: sub_68D8A7F0+75j
		add	ebx, 1
		cmp	[esp+2Ch+var_10], ebx
		jbe	short loc_68D8A867

loc_68D8A851:				; CODE XREF: sub_68D8A7F0+54j
		mov	dword ptr [esp+2Ch+var_28], edi	; File
		movzx	eax, word ptr [esi+ebx*2]
		mov	[esp+2Ch+Str], eax ; Ch
		call	fputwc
		cmp	ax, 0FFFFh
		jnz	short loc_68D8A848

loc_68D8A867:				; CODE XREF: sub_68D8A7F0+56j
					; sub_68D8A7F0+5Fj
		mov	[esp+2Ch+Str], esi ; Memory
		call	free
		cmp	ebx, [esp+2Ch+var_10]
		jz	short loc_68D8A881

loc_68D8A875:				; CODE XREF: sub_68D8A7F0+4Aj
		mov	eax, 0FFFFFFFFh

loc_68D8A87A:				; CODE XREF: sub_68D8A7F0+95j
					; sub_68D8A7F0+A8j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68D8A881:				; CODE XREF: sub_68D8A7F0+83j
		test	ebx, ebx
		mov	eax, ebx
		jns	short loc_68D8A87A
		call	ds:_errno
		mov	dword ptr [eax], 7
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D8A87A
; ---------------------------------------------------------------------------
		align 10h

loc_68D8A8A0:				; CODE XREF: sub_68D8A7F0+24j
		mov	[esp+2Ch+ArgList], esi ; ArgList
		mov	dword ptr [esp+2Ch+var_28], ebx	; Format
		mov	[esp+2Ch+Str], edi ; File
		call	vfwprintf
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_68D8A7F0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+24h]
		mov	[esp+8], eax
		mov	eax, [esp+20h]
		mov	[esp+4], eax
		mov	eax, ds:_iob
		add	eax, 20h
		mov	[esp], eax
		call	sub_68D8A7F0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		lea	eax, [esp+28h]
		mov	[esp+8], eax
		mov	eax, [esp+24h]
		mov	[esp+4], eax
		mov	eax, [esp+20h]
		mov	[esp], eax
		call	sub_68D8A7F0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		lea	eax, [esp+24h]
		mov	[esp+8], eax
		mov	eax, [esp+20h]
		mov	[esp+4], eax
		mov	eax, ds:_iob
		add	eax, 20h
		mov	[esp], eax
		call	sub_68D8A7F0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8A950	proc near		; CODE XREF: sub_68D8AA60+12Dp
					; sub_68D8AA60+231p ...

Str1		= dword	ptr -3Ch
Str2		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		xor	ebp, ebp
		push	edi
		mov	edi, edx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		test	edx, edx
		mov	[esp+3Ch+var_2C], ecx
		jnz	short loc_68D8A978
		jmp	loc_68D8AA50
; ---------------------------------------------------------------------------
		align 10h

loc_68D8A970:				; CODE XREF: sub_68D8A950+43j
		jz	short loc_68D8A9B1
		mov	edi, esi
		cmp	edi, ebp
		jbe	short loc_68D8A9A0

loc_68D8A978:				; CODE XREF: sub_68D8A950+13j
					; sub_68D8A950+4Aj
		mov	eax, [esp+3Ch+var_2C]
		lea	esi, [edi+ebp]
		shr	esi, 1
		mov	[esp+3Ch+Str2],	eax ; Str2
		mov	eax, [ebx+esi*8]
		mov	[esp+3Ch+Str1],	eax ; Str1
		call	strcmp
		cmp	eax, 0
		jge	short loc_68D8A970
		lea	ebp, [esi+1]
		cmp	edi, ebp
		ja	short loc_68D8A978
		lea	esi, [esi+0]

loc_68D8A9A0:				; CODE XREF: sub_68D8A950+26j
					; sub_68D8A950+B4j ...
		mov	eax, [esp+3Ch+arg_0]
		mov	[eax], ebp
		mov	[eax+4], edi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8A9B1:				; CODE XREF: sub_68D8A950:loc_68D8A970j
		cmp	esi, ebp
		mov	eax, esi
		lea	edx, [ebx+esi*8-8]
		jbe	short loc_68D8A9FE
		mov	[esp+3Ch+var_28], esi
		mov	esi, edx
		mov	[esp+3Ch+var_20], ebx
		mov	ebx, ebp
		mov	ebp, eax
		mov	[esp+3Ch+var_24], edi
		jmp	short loc_68D8A9D9
; ---------------------------------------------------------------------------
		align 10h

loc_68D8A9D0:				; CODE XREF: sub_68D8A950+A0j
		sub	esi, 8
		cmp	edi, ebx
		jbe	short loc_68D8AA40
		mov	ebp, edi

loc_68D8A9D9:				; CODE XREF: sub_68D8A950+7Dj
		mov	eax, [esi]
		lea	edi, [ebp-1]
		mov	edx, [esp+3Ch+var_2C]
		mov	[esp+3Ch+Str1],	eax ; Str1
		mov	[esp+3Ch+Str2],	edx ; Str2
		call	strcmp
		test	eax, eax
		jns	short loc_68D8A9D0
		mov	esi, [esp+3Ch+var_28]
		mov	edi, [esp+3Ch+var_24]
		mov	ebx, [esp+3Ch+var_20]

loc_68D8A9FE:				; CODE XREF: sub_68D8A950+69j
					; sub_68D8A950+FEj
		cmp	edi, esi
		lea	ebx, [ebx+esi*8+8]
		jbe	short loc_68D8A9A0
		mov	[esp+3Ch+var_28], ebp
		mov	ebp, [esp+3Ch+var_2C]
		xchg	ax, ax

loc_68D8AA10:				; CODE XREF: sub_68D8A950+DAj
		add	esi, 1
		cmp	esi, edi
		jnb	short loc_68D8AA37
		mov	eax, [ebx]
		add	ebx, 8
		mov	[esp+3Ch+Str2],	ebp ; Str2
		mov	[esp+3Ch+Str1],	eax ; Str1
		call	strcmp
		test	eax, eax
		jle	short loc_68D8AA10
		mov	ebp, [esp+3Ch+var_28]
		mov	edi, esi
		jmp	loc_68D8A9A0
; ---------------------------------------------------------------------------

loc_68D8AA37:				; CODE XREF: sub_68D8A950+C5j
		mov	ebp, [esp+3Ch+var_28]
		jmp	loc_68D8A9A0
; ---------------------------------------------------------------------------

loc_68D8AA40:				; CODE XREF: sub_68D8A950+85j
		mov	ebp, ebx
		mov	esi, [esp+3Ch+var_28]
		mov	edi, [esp+3Ch+var_24]
		mov	ebx, [esp+3Ch+var_20]
		jmp	short loc_68D8A9FE
; ---------------------------------------------------------------------------

loc_68D8AA50:				; CODE XREF: sub_68D8A950+15j
		mov	ebp, edx
		jmp	loc_68D8A9A0
sub_68D8A950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8AA60	proc near		; CODE XREF: libintl_setlocale+8Fj
					; libintl_setlocale+14Dp ...

Str		= dword	ptr -1ACh
Str2		= dword	ptr -1A8h
Size		= dword	ptr -1A4h
Src		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
Str1		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= byte ptr -16Ch
var_EC		= byte ptr -0ECh
Dst		= byte ptr -0ACh
var_6C		= byte ptr -6Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 1ACh
		mov	[esp+1ACh+var_10], ebx
		mov	[esp+1ACh+var_C], esi
		mov	esi, eax
		mov	[esp+1ACh+var_8], edi
		mov	edi, edx
		mov	[esp+1ACh+var_4], ebp
		mov	[esp+1ACh+Str2], edx
		mov	[esp+1ACh+Str],	eax
		call	setlocale
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68D8AAC0

loc_68D8AA98:				; CODE XREF: sub_68D8AA60+6Bj
					; sub_68D8AA60+18Ej ...
		mov	eax, ebx

loc_68D8AA9A:				; CODE XREF: sub_68D8AA60+10Fj
					; sub_68D8AA60+161j ...
		mov	ebx, [esp+1ACh+var_10]
		mov	esi, [esp+1ACh+var_C]
		mov	edi, [esp+1ACh+var_8]
		mov	ebp, [esp+1ACh+var_4]
		add	esp, 1ACh
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8AAC0:				; CODE XREF: sub_68D8AA60+36j
		mov	[esp+1ACh+Str],	edi ; Str
		call	strlen
		cmp	eax, 3Fh
		ja	short loc_68D8AA98
		movzx	eax, byte ptr [edi]
		test	al, al
		setnz	dl
		cmp	al, 2Eh
		mov	ebp, edx
		jz	loc_68D8AE2D
		test	dl, dl
		jz	loc_68D8AE2D
		lea	ecx, [esp+1ACh+var_6C]
		mov	ebp, ebx
		mov	[esp+1ACh+var_180], edi
		mov	edx, edi
		mov	[esp+1ACh+Str1], ecx
		jmp	short loc_68D8AB04
; ---------------------------------------------------------------------------
		align 10h

loc_68D8AB00:				; CODE XREF: sub_68D8AA60+B6j
		test	bl, bl
		jz	short loc_68D8AB18

loc_68D8AB04:				; CODE XREF: sub_68D8AA60+9Aj
		add	edx, 1
		mov	[ecx], al
		movzx	eax, byte ptr [edx]
		add	ecx, 1
		test	al, al
		setnz	bl
		cmp	al, 2Eh
		jnz	short loc_68D8AB00

loc_68D8AB18:				; CODE XREF: sub_68D8AA60+A2j
		mov	byte ptr [esp+1ACh+var_184], bl
		mov	ebx, ebp
		movzx	ebp, byte ptr [esp+1ACh+var_184]
		mov	[esp+1ACh+var_180], edx

loc_68D8AB27:				; CODE XREF: sub_68D8AA60+3DEj
		cmp	al, 2Eh
		jz	loc_68D8AE02

loc_68D8AB2F:				; CODE XREF: sub_68D8AA60+3C8j
		test	al, al
		jz	short loc_68D8AB46

loc_68D8AB33:				; CODE XREF: sub_68D8AA60+3A6j
		mov	edx, [esp+1ACh+var_180]

loc_68D8AB37:				; CODE XREF: sub_68D8AA60+E4j
		add	edx, 1
		mov	[ecx], al
		movzx	eax, byte ptr [edx]
		add	ecx, 1
		test	al, al
		jnz	short loc_68D8AB37

loc_68D8AB46:				; CODE XREF: sub_68D8AA60+D1j
					; sub_68D8AA60+3B4j
		mov	byte ptr [ecx],	0
		mov	ecx, [esp+1ACh+Str1]
		mov	[esp+1ACh+Str2], edi ; Str2
		mov	[esp+1ACh+Str],	ecx ; Str1
		call	strcmp
		test	eax, eax
		jz	short loc_68D8AB75
		mov	eax, [esp+1ACh+Str1]
		mov	[esp+1ACh+Str],	esi
		mov	[esp+1ACh+Str2], eax
		call	setlocale
		test	eax, eax
		jnz	loc_68D8AA9A

loc_68D8AB75:				; CODE XREF: sub_68D8AA60+FBj
		mov	ecx, [esp+1ACh+Str1]
		lea	edx, [esp+1ACh+var_24]
		mov	eax, offset off_68D93240
		mov	[esp+1ACh+Str],	edx
		mov	edx, 0A4h
		call	sub_68D8A950
		mov	edi, [esp+1ACh+var_24]
		cmp	edi, [esp+1ACh+var_20]
		jnb	short loc_68D8ABD6
		lea	ebp, off_68D93244[edi*8]
		lea	esi, [esi+0]

loc_68D8ABB0:				; CODE XREF: sub_68D8AA60+174j
		mov	eax, [ebp+0]
		mov	[esp+1ACh+Str],	esi
		mov	[esp+1ACh+Str2], eax
		call	setlocale
		test	eax, eax
		jnz	loc_68D8AA9A
		add	edi, 1
		add	ebp, 8
		cmp	[esp+1ACh+var_20], edi
		ja	short loc_68D8ABB0

loc_68D8ABD6:				; CODE XREF: sub_68D8AA60+140j
		mov	ecx, [esp+1ACh+Str1]
		mov	[esp+1ACh+Str2], 5Fh ; Val
		mov	[esp+1ACh+Str],	ecx ; Str
		call	strchr
		test	eax, eax
		mov	ebp, eax
		jz	loc_68D8AA98
		lea	edx, [eax+1]
		mov	[esp+1ACh+Str],	edx ; Str
		mov	[esp+1ACh+Str2], 40h ; Val
		mov	[esp+1ACh+Src],	edx
		call	strchr
		mov	edx, [esp+1ACh+Src]
		test	eax, eax
		mov	edi, eax
		jz	loc_68D8AE43

loc_68D8AC19:				; CODE XREF: sub_68D8AA60+3F2j
		mov	eax, [esp+1ACh+Str1]
		mov	ecx, ebp
		sub	ecx, [esp+1ACh+Str1]
		lea	ebp, [esp+1ACh+Dst]
		mov	[esp+1ACh+Src],	edx
		mov	[esp+1ACh+Size], ecx ; Size
		mov	[esp+1ACh+var_18C], ecx
		mov	[esp+1ACh+Str2], eax ; Src
		mov	[esp+1ACh+Str],	ebp ; Dst
		call	memcpy
		mov	ecx, [esp+1ACh+var_18C]
		mov	[esp+1ACh+Str2], edi ; Source
		lea	ecx, [ebp+ecx+0]
		mov	[esp+1ACh+Str],	ecx ; Dest
		call	strcpy
		mov	edx, [esp+1ACh+Src]
		sub	edi, edx
		mov	[esp+1ACh+Str2], edx ; Src
		lea	edx, [esp+1ACh+var_EC]
		mov	[esp+1ACh+Str],	edx ; Dst
		mov	[esp+1ACh+Size], edi ; Size
		call	memcpy
		lea	ecx, [esp+1ACh+var_24]
		mov	eax, offset off_68D93240
		mov	[esp+edi+1ACh+var_EC], 0
		mov	edx, 0A4h
		mov	[esp+1ACh+Str],	ecx
		mov	ecx, ebp
		call	sub_68D8A950
		mov	eax, [esp+1ACh+var_24]
		cmp	eax, [esp+1ACh+var_20]
		jnb	loc_68D8AA98
		lea	eax, [esp+1ACh+var_2C]
		mov	edx, 8Fh
		mov	[esp+1ACh+Str],	eax
		lea	ecx, [esp+1ACh+var_EC]
		mov	eax, offset off_68D93E80
		call	sub_68D8A950
		mov	eax, [esp+1ACh+var_2C]
		mov	edx, [esp+1ACh+var_28]
		mov	[esp+1ACh+Str1], eax
		cmp	eax, edx
		jnb	loc_68D8AE57
		mov	ecx, [esp+1ACh+var_24]
		mov	eax, [esp+1ACh+var_20]
		mov	[esp+1ACh+var_178], ecx
		cmp	ecx, eax
		jnb	loc_68D8AA98
		lea	ecx, off_68D93244[ecx*8]
		mov	[esp+1ACh+var_174], ecx
		lea	ebp, [esp+1ACh+var_16C]
		mov	[esp+1ACh+var_170], ebx
		mov	[esp+1ACh+var_17C], esi

loc_68D8AD15:				; CODE XREF: sub_68D8AA60+39Dj
		cmp	edx, [esp+1ACh+Str1]
		jbe	loc_68D8ADD7
		mov	eax, [esp+1ACh+var_174]
		mov	edx, [esp+1ACh+Str1]
		mov	eax, [eax]
		lea	edx, off_68D93E84[edx*8]
		mov	[esp+1ACh+var_184], edx
		mov	[esp+1ACh+var_180], eax

loc_68D8AD38:				; CODE XREF: sub_68D8AA60+36Aj
		mov	ecx, [esp+1ACh+var_180]
		mov	[esp+1ACh+Str],	ecx ; Str
		call	strlen
		mov	ebx, eax
		mov	eax, [esp+1ACh+var_184]
		mov	esi, [eax]
		mov	[esp+1ACh+Str],	esi ; Str
		call	strlen
		lea	edx, [ebx+1]
		lea	edi, [eax+1]
		lea	eax, [edx+edi]
		cmp	eax, 80h
		ja	loc_68D8AEA0
		mov	ecx, [esp+1ACh+var_180]
		mov	[esp+1ACh+Src],	edx
		mov	[esp+1ACh+Size], ebx ; Size
		mov	[esp+1ACh+Str],	ebp ; Dst
		mov	[esp+1ACh+Str2], ecx ; Src
		call	memcpy
		mov	[esp+ebx+1ACh+var_16C],	5Fh
		mov	edx, [esp+1ACh+Src]
		mov	[esp+1ACh+Size], edi ; Size
		mov	[esp+1ACh+Str2], esi ; Src
		lea	edx, [ebp+edx+0]
		mov	[esp+1ACh+Str],	edx ; Dst
		call	memcpy
		mov	eax, [esp+1ACh+var_17C]
		mov	[esp+1ACh+Str2], ebp
		mov	[esp+1ACh+Str],	eax
		call	setlocale
		test	eax, eax
		jnz	loc_68D8AA9A
		add	[esp+1ACh+Str1], 1
		mov	edx, [esp+1ACh+Str1]
		add	[esp+1ACh+var_184], 8
		cmp	[esp+1ACh+var_28], edx
		ja	loc_68D8AD38
		mov	eax, [esp+1ACh+var_20]

loc_68D8ADD7:				; CODE XREF: sub_68D8AA60+2B9j
		add	[esp+1ACh+var_178], 1
		add	[esp+1ACh+var_174], 8
		cmp	[esp+1ACh+var_178], eax
		jnb	loc_68D8AEA5
		mov	ecx, [esp+1ACh+var_2C]
		mov	edx, [esp+1ACh+var_28]
		mov	[esp+1ACh+Str1], ecx
		jmp	loc_68D8AD15
; ---------------------------------------------------------------------------

loc_68D8AE02:				; CODE XREF: sub_68D8AA60+C9j
		mov	edx, ebp
		test	dl, dl
		jz	loc_68D8AB33
		mov	edx, [esp+1ACh+var_180]
		jmp	short loc_68D8AE1A
; ---------------------------------------------------------------------------

loc_68D8AE12:				; CODE XREF: sub_68D8AA60+3C2j
		test	al, al
		jz	loc_68D8AB46

loc_68D8AE1A:				; CODE XREF: sub_68D8AA60+3B0j
		add	edx, 1
		movzx	eax, byte ptr [edx]
		cmp	al, 40h
		jnz	short loc_68D8AE12
		mov	[esp+1ACh+var_180], edx
		jmp	loc_68D8AB2F
; ---------------------------------------------------------------------------

loc_68D8AE2D:				; CODE XREF: sub_68D8AA60+79j
					; sub_68D8AA60+81j
		lea	edx, [esp+1ACh+var_6C]
		mov	[esp+1ACh+var_180], edi
		mov	ecx, edx
		mov	[esp+1ACh+Str1], edx
		jmp	loc_68D8AB27
; ---------------------------------------------------------------------------

loc_68D8AE43:				; CODE XREF: sub_68D8AA60+1B3j
		mov	edi, edx
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		repne scasb
		not	ecx
		lea	edi, [edx+ecx-1]
		jmp	loc_68D8AC19
; ---------------------------------------------------------------------------

loc_68D8AE57:				; CODE XREF: sub_68D8AA60+27Ej
		mov	eax, [esp+1ACh+var_20]

loc_68D8AE5E:				; CODE XREF: sub_68D8AA60+44Dj
		mov	edi, [esp+1ACh+var_24]
		cmp	edi, eax
		jnb	loc_68D8AA98
		lea	ebx, off_68D93244[edi*8]
		jmp	short loc_68D8AE89
; ---------------------------------------------------------------------------

loc_68D8AE76:				; CODE XREF: sub_68D8AA60+439j
		add	edi, 1
		add	ebx, 8
		cmp	[esp+1ACh+var_20], edi
		jbe	loc_68D8AA9A

loc_68D8AE89:				; CODE XREF: sub_68D8AA60+414j
		mov	eax, [ebx]
		mov	[esp+1ACh+Str],	esi
		mov	[esp+1ACh+Str2], eax
		call	setlocale
		test	eax, eax
		jz	short loc_68D8AE76
		jmp	loc_68D8AA9A
; ---------------------------------------------------------------------------

loc_68D8AEA0:				; CODE XREF: sub_68D8AA60+302j
		call	abort
; ---------------------------------------------------------------------------

loc_68D8AEA5:				; CODE XREF: sub_68D8AA60+385j
		mov	ebx, [esp+1ACh+var_170]
		mov	esi, [esp+1ACh+var_17C]
		jmp	short loc_68D8AE5E
sub_68D8AA60	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  43. libintl_setlocale

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_setlocale(int, char *)
		public libintl_setlocale
libintl_setlocale proc near

Dest		= dword	ptr -1Ch
Source		= dword	ptr -18h
Count		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_8], esi
		mov	[esp+1Ch+var_4], edi
		test	edx, edx
		jz	short loc_68D8AF26
		cmp	byte ptr [edx],	0
		jnz	short loc_68D8AF26
		test	ebx, ebx
		jz	loc_68D8AFB0
		cmp	ebx, 3
		mov	eax, offset aLc_monetary_0 ; "LC_MONETARY"
		jz	short loc_68D8AF10
		jle	loc_68D8AF80
		cmp	ebx, 5
		mov	eax, offset aLc_time_0 ; "LC_TIME"
		jz	short loc_68D8AF10
		mov	eax, offset aLc_numeric_0 ; "LC_NUMERIC"
		jl	short loc_68D8AF10
		cmp	ebx, 6C1h
		mov	eax, offset aLc_messages_0 ; "LC_MESSAGES"
		jnz	loc_68D8AF98
		lea	esi, [esi+0]

loc_68D8AF10:				; CODE XREF: libintl_setlocale+30j
					; libintl_setlocale+40j ...
		mov	[esp+1Ch+Source], eax ;	char *
		mov	[esp+1Ch+Dest],	ebx ; int
		call	_nl_locale_name_environ
		test	eax, eax
		mov	edx, eax
		jz	loc_68D8AFA2

loc_68D8AF26:				; CODE XREF: libintl_setlocale+19j
					; libintl_setlocale+1Ej ...
		cmp	ebx, 6C1h
		jz	short loc_68D8AF44
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	sub_68D8AA60
; ---------------------------------------------------------------------------

loc_68D8AF44:				; CODE XREF: libintl_setlocale+7Cj
		test	edx, edx
		mov	eax, offset Dest ; "C"
		jz	short loc_68D8AF6D
		mov	byte_68D9005F, 0
		mov	[esp+1Ch+Count], 3Fh ; Count
		mov	[esp+1Ch+Source], edx ;	Source
		mov	[esp+1Ch+Dest],	eax ; Dest
		call	strncpy
		mov	eax, offset Dest ; "C"

loc_68D8AF6D:				; CODE XREF: libintl_setlocale+9Bj
					; libintl_setlocale+11Aj ...
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8AF80:				; CODE XREF: libintl_setlocale+32j
		cmp	ebx, 1
		mov	eax, offset aLc_collate_0 ; "LC_COLLATE"
		jz	short loc_68D8AF10
		cmp	ebx, 2
		mov	eax, offset aLc_ctype_0	; "LC_CTYPE"
		jz	loc_68D8AF10

loc_68D8AF98:				; CODE XREF: libintl_setlocale+54j
		mov	eax, offset aLc_xxx_0 ;	"LC_XXX"
		jmp	loc_68D8AF10
; ---------------------------------------------------------------------------

loc_68D8AFA2:				; CODE XREF: libintl_setlocale+70j
		call	_nl_locale_name_default
		mov	edx, eax
		jmp	loc_68D8AF26
; ---------------------------------------------------------------------------
		align 10h

loc_68D8AFB0:				; CODE XREF: libintl_setlocale+22j
		mov	[esp+1Ch+Source], 0
		mov	[esp+1Ch+Dest],	0
		call	setlocale
		test	eax, eax
		jnz	short loc_68D8AFCC

loc_68D8AFC8:				; CODE XREF: libintl_setlocale+129j
		xor	eax, eax
		jmp	short loc_68D8AF6D
; ---------------------------------------------------------------------------

loc_68D8AFCC:				; CODE XREF: libintl_setlocale+116j
		mov	[esp+1Ch+Dest],	eax ; Src
		nop
		call	_strdup
		test	eax, eax
		mov	esi, eax
		jz	short loc_68D8AFC8
		mov	[esp+1Ch+Source], offset aLc_ctype_0 ; "LC_CTYPE"
		mov	[esp+1Ch+Dest],	2 ; int
		call	_nl_locale_name_environ
		test	eax, eax
		mov	ebx, eax
		jz	loc_68D8B1C5

loc_68D8AFF9:				; CODE XREF: libintl_setlocale+320j
		xor	eax, eax
		mov	edx, ebx
		call	sub_68D8AA60
		test	eax, eax
		jz	loc_68D8B15B
		mov	[esp+1Ch+Source], offset aLc_numeric_0 ; "LC_NUMERIC"
		mov	[esp+1Ch+Dest],	4 ; int
		call	_nl_locale_name_environ
		test	eax, eax
		mov	edi, eax
		jnz	short loc_68D8B02B
		call	_nl_locale_name_default
		mov	edi, eax

loc_68D8B02B:				; CODE XREF: libintl_setlocale+172j
		mov	[esp+1Ch+Source], ebx ;	Str2
		mov	[esp+1Ch+Dest],	edi ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_68D8B147

loc_68D8B03F:				; CODE XREF: libintl_setlocale+2A5j
		mov	[esp+1Ch+Source], offset aLc_time_0 ; "LC_TIME"
		mov	[esp+1Ch+Dest],	5 ; int
		call	_nl_locale_name_environ
		test	eax, eax
		mov	edi, eax
		jnz	short loc_68D8B060
		call	_nl_locale_name_default
		mov	edi, eax

loc_68D8B060:				; CODE XREF: libintl_setlocale+1A7j
		mov	[esp+1Ch+Source], ebx ;	Str2
		mov	[esp+1Ch+Dest],	edi ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_68D8B195

loc_68D8B074:				; CODE XREF: libintl_setlocale+2F7j
		mov	[esp+1Ch+Source], offset aLc_collate_0 ; "LC_COLLATE"
		mov	[esp+1Ch+Dest],	1 ; int
		call	_nl_locale_name_environ
		test	eax, eax
		mov	edi, eax
		jnz	short loc_68D8B095
		call	_nl_locale_name_default
		mov	edi, eax

loc_68D8B095:				; CODE XREF: libintl_setlocale+1DCj
		mov	[esp+1Ch+Source], ebx ;	Str2
		mov	[esp+1Ch+Dest],	edi ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_68D8B1AF

loc_68D8B0A9:				; CODE XREF: libintl_setlocale+30Dj
		mov	[esp+1Ch+Source], offset aLc_monetary_0	; "LC_MONETARY"
		mov	[esp+1Ch+Dest],	3 ; int
		call	_nl_locale_name_environ
		test	eax, eax
		mov	edi, eax
		jz	loc_68D8B1D5

loc_68D8B0C7:				; CODE XREF: libintl_setlocale+330j
		mov	[esp+1Ch+Source], ebx ;	Str2
		mov	[esp+1Ch+Dest],	edi ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_68D8B17F

loc_68D8B0DB:				; CODE XREF: libintl_setlocale+2DDj
		mov	[esp+1Ch+Source], offset aLc_messages_0	; "LC_MESSAGES"
		mov	[esp+1Ch+Dest],	6C1h ; int
		call	_nl_locale_name_environ
		test	eax, eax
		jnz	short loc_68D8B0F8
		call	_nl_locale_name_default

loc_68D8B0F8:				; CODE XREF: libintl_setlocale+241j
		test	eax, eax
		jz	short loc_68D8B11B
		mov	byte_68D9005F, 0
		mov	[esp+1Ch+Count], 3Fh ; Count
		mov	[esp+1Ch+Source], eax ;	Source
		mov	[esp+1Ch+Dest],	offset Dest ; "C"
		call	strncpy

loc_68D8B11B:				; CODE XREF: libintl_setlocale+24Aj
		mov	[esp+1Ch+Dest],	esi ; Memory
		call	free
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_4], 0
		mov	esi, [esp+1Ch+var_8]
		mov	[esp+1Ch+arg_0], 0
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		jmp	setlocale
; ---------------------------------------------------------------------------

loc_68D8B147:				; CODE XREF: libintl_setlocale+189j
		mov	edx, edi
		mov	eax, 4
		call	sub_68D8AA60
		test	eax, eax
		jnz	loc_68D8B03F

loc_68D8B15B:				; CODE XREF: libintl_setlocale+154j
					; libintl_setlocale+2E3j ...
		cmp	byte ptr [esi],	0
		jz	short loc_68D8B170
		mov	[esp+1Ch+Source], esi
		mov	[esp+1Ch+Dest],	0
		call	setlocale

loc_68D8B170:				; CODE XREF: libintl_setlocale+2AEj
		mov	[esp+1Ch+Dest],	esi ; Memory
		call	free
		xor	eax, eax
		jmp	loc_68D8AF6D
; ---------------------------------------------------------------------------

loc_68D8B17F:				; CODE XREF: libintl_setlocale+225j
		mov	edx, edi
		mov	eax, 3
		call	sub_68D8AA60
		test	eax, eax
		jnz	loc_68D8B0DB
		jmp	short loc_68D8B15B
; ---------------------------------------------------------------------------

loc_68D8B195:				; CODE XREF: libintl_setlocale+1BEj
		mov	edx, edi
		mov	eax, 5
		lea	esi, [esi+0]
		call	sub_68D8AA60
		test	eax, eax
		jnz	loc_68D8B074
		jmp	short loc_68D8B15B
; ---------------------------------------------------------------------------

loc_68D8B1AF:				; CODE XREF: libintl_setlocale+1F3j
		mov	edx, edi
		mov	eax, 1
		call	sub_68D8AA60
		test	eax, eax
		jnz	loc_68D8B0A9
		jmp	short loc_68D8B15B
; ---------------------------------------------------------------------------

loc_68D8B1C5:				; CODE XREF: libintl_setlocale+143j
		call	_nl_locale_name_default
		mov	ebx, eax
		lea	esi, [esi+0]
		jmp	loc_68D8AFF9
; ---------------------------------------------------------------------------

loc_68D8B1D5:				; CODE XREF: libintl_setlocale+211j
		call	_nl_locale_name_default
		mov	edi, eax
		lea	esi, [esi+0]
		jmp	loc_68D8B0C7
libintl_setlocale endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. bind_textdomain_codeset

; =============== S U B	R O U T	I N E =======================================


		public bind_textdomain_codeset
bind_textdomain_codeset	proc near
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_bind_textdomain_codeset
bind_textdomain_codeset	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. bindtextdomain

; =============== S U B	R O U T	I N E =======================================


		public bindtextdomain
bindtextdomain	proc near
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_bindtextdomain
bindtextdomain	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_textdomain
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. dcngettext

; =============== S U B	R O U T	I N E =======================================


		public dcngettext
dcngettext	proc near
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_dcngettext
dcngettext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. dngettext

; =============== S U B	R O U T	I N E =======================================


		public dngettext
dngettext	proc near
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_dngettext
dngettext	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_ngettext
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  18. dcgettext

; =============== S U B	R O U T	I N E =======================================


		public dcgettext
dcgettext	proc near
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_dcgettext
dcgettext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. dgettext

; =============== S U B	R O U T	I N E =======================================


		public dgettext
dgettext	proc near
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_dgettext
dgettext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. gettext

; =============== S U B	R O U T	I N E =======================================


		public gettext
gettext		proc near
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	libintl_gettext
gettext		endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. libintl_gettext_free_exp

; =============== S U B	R O U T	I N E =======================================


; int __cdecl libintl_gettext_free_exp(void *Memory)
		public libintl_gettext_free_exp
libintl_gettext_free_exp proc near	; CODE XREF: libintl_gettext_free_exp+C6p
					; libintl_gettext_free_exp+D1p	...

var_1C		= dword	ptr -1Ch
Memory		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+Memory]
		test	ebx, ebx
		jz	loc_68D8B4E0
		mov	eax, [ebx]
		cmp	eax, 2
		jz	short loc_68D8B2DE
		cmp	eax, 3
		jz	short loc_68D8B2B2
		cmp	eax, 1
		jz	short loc_68D8B30A

loc_68D8B2A3:				; CODE XREF: libintl_gettext_free_exp+8Fj
		mov	[esp+1Ch+Memory], ebx ;	Memory
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	free
; ---------------------------------------------------------------------------

loc_68D8B2B2:				; CODE XREF: libintl_gettext_free_exp+1Cj
		mov	esi, [ebx+10h]
		test	esi, esi
		jz	short loc_68D8B2DE
		mov	eax, [esi]
		cmp	eax, 2
		jz	loc_68D8B48E
		cmp	eax, 3
		jz	loc_68D8B483
		cmp	eax, 1
		jz	loc_68D8B499

loc_68D8B2D6:				; CODE XREF: libintl_gettext_free_exp+224j
		mov	[esp+1Ch+var_1C], esi ;	Memory
		call	free

loc_68D8B2DE:				; CODE XREF: libintl_gettext_free_exp+17j
					; libintl_gettext_free_exp+37j
		mov	esi, [ebx+0Ch]
		test	esi, esi
		jz	short loc_68D8B30A
		mov	eax, [esi]
		cmp	eax, 2
		jz	loc_68D8B3FB
		cmp	eax, 3
		jz	loc_68D8B3F0
		cmp	eax, 1
		jz	loc_68D8B406

loc_68D8B302:				; CODE XREF: libintl_gettext_free_exp+18Bj
		mov	[esp+1Ch+var_1C], esi ;	Memory
		call	free

loc_68D8B30A:				; CODE XREF: libintl_gettext_free_exp+21j
					; libintl_gettext_free_exp+63j	...
		mov	esi, [ebx+8]
		test	esi, esi
		jz	short loc_68D8B2A3
		mov	eax, [esi]
		cmp	eax, 2
		jz	short loc_68D8B369
		cmp	eax, 3
		jz	loc_68D8B4B0
		cmp	eax, 1
		jz	short loc_68D8B395

loc_68D8B326:				; CODE XREF: libintl_gettext_free_exp+11Aj
					; libintl_gettext_free_exp+135j ...
		mov	[esp+1Ch+var_1C], esi ;	Memory
		call	free
		mov	[esp+1Ch+Memory], ebx ;	Memory
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	free
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B340:				; CODE XREF: libintl_gettext_free_exp+249j
		mov	eax, [edi+10h]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B34B:				; CODE XREF: libintl_gettext_free_exp+240j
		mov	eax, [edi+0Ch]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B356:				; CODE XREF: libintl_gettext_free_exp+258j
		mov	eax, [edi+8]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B361:				; CODE XREF: libintl_gettext_free_exp+252j
		mov	[esp+1Ch+var_1C], edi ;	Memory
		call	free

loc_68D8B369:				; CODE XREF: libintl_gettext_free_exp+96j
					; libintl_gettext_free_exp+235j
		mov	edi, [esi+0Ch]
		test	edi, edi
		jz	short loc_68D8B395
		mov	eax, [edi]
		cmp	eax, 2
		jz	loc_68D8B442
		cmp	eax, 3
		jz	loc_68D8B437
		cmp	eax, 1
		jz	loc_68D8B44D

loc_68D8B38D:				; CODE XREF: libintl_gettext_free_exp+1D8j
		mov	[esp+1Ch+var_1C], edi ;	Memory
		call	free

loc_68D8B395:				; CODE XREF: libintl_gettext_free_exp+A4j
					; libintl_gettext_free_exp+EEj
		mov	edi, [esi+8]
		test	edi, edi
		jz	short loc_68D8B326
		mov	eax, [edi]
		cmp	eax, 2
		jz	short loc_68D8B3CB
		cmp	eax, 3
		jz	short loc_68D8B3C0
		cmp	eax, 1
		jz	short loc_68D8B3D6
		mov	[esp+1Ch+var_1C], edi ;	Memory
		call	free
		jmp	loc_68D8B326
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B3C0:				; CODE XREF: libintl_gettext_free_exp+126j
		mov	eax, [edi+10h]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B3CB:				; CODE XREF: libintl_gettext_free_exp+121j
		mov	eax, [edi+0Ch]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B3D6:				; CODE XREF: libintl_gettext_free_exp+12Bj
		mov	eax, [edi+8]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp
		mov	[esp+1Ch+var_1C], edi ;	Memory
		call	free
		jmp	loc_68D8B326
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B3F0:				; CODE XREF: libintl_gettext_free_exp+73j
		mov	eax, [esi+10h]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B3FB:				; CODE XREF: libintl_gettext_free_exp+6Aj
		mov	eax, [esi+0Ch]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B406:				; CODE XREF: libintl_gettext_free_exp+7Cj
		mov	edi, [esi+8]
		test	edi, edi
		jz	loc_68D8B302
		mov	eax, [edi]
		cmp	eax, 2
		jz	short loc_68D8B46B
		cmp	eax, 3
		jz	short loc_68D8B460
		cmp	eax, 1
		jz	short loc_68D8B476

loc_68D8B422:				; CODE XREF: libintl_gettext_free_exp+201j
		mov	[esp+1Ch+var_1C], edi ;	Memory
		call	free
		mov	[esp+1Ch+var_1C], esi ;	Memory
		call	free
		jmp	loc_68D8B30A
; ---------------------------------------------------------------------------

loc_68D8B437:				; CODE XREF: libintl_gettext_free_exp+FEj
		mov	eax, [edi+10h]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B442:				; CODE XREF: libintl_gettext_free_exp+F5j
		mov	eax, [edi+0Ch]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B44D:				; CODE XREF: libintl_gettext_free_exp+107j
		mov	eax, [edi+8]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp
		jmp	loc_68D8B38D
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B460:				; CODE XREF: libintl_gettext_free_exp+19Bj
		mov	eax, [edi+10h]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B46B:				; CODE XREF: libintl_gettext_free_exp+196j
		mov	eax, [edi+0Ch]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B476:				; CODE XREF: libintl_gettext_free_exp+1A0j
		mov	eax, [edi+8]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp
		jmp	short loc_68D8B422
; ---------------------------------------------------------------------------

loc_68D8B483:				; CODE XREF: libintl_gettext_free_exp+47j
		mov	eax, [esi+10h]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B48E:				; CODE XREF: libintl_gettext_free_exp+3Ej
		mov	eax, [esi+0Ch]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp

loc_68D8B499:				; CODE XREF: libintl_gettext_free_exp+50j
		mov	eax, [esi+8]
		mov	[esp+1Ch+var_1C], eax ;	Memory
		call	libintl_gettext_free_exp
		jmp	loc_68D8B2D6
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B4B0:				; CODE XREF: libintl_gettext_free_exp+9Bj
		mov	edi, [esi+10h]
		test	edi, edi
		jz	loc_68D8B369
		mov	eax, [edi]
		cmp	eax, 2
		jz	loc_68D8B34B
		cmp	eax, 3
		jz	loc_68D8B340
		cmp	eax, 1
		jnz	loc_68D8B361
		jmp	loc_68D8B356
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B4E0:				; CODE XREF: libintl_gettext_free_exp+Cj
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
libintl_gettext_free_exp endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8B4F0	proc near		; CODE XREF: libintl_gettextparse+2F6p
					; libintl_gettextparse+3BCp ...

Size		= dword	ptr -3Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		sub	esi, 1
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_24], ecx
		js	short loc_68D8B52E
		mov	edi, [ecx+esi*4]
		lea	ebp, [eax-2]
		test	edi, edi
		jz	short loc_68D8B581
		lea	edx, [ecx+ebp*4]
		mov	eax, esi
		jmp	short loc_68D8B529
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B520:				; CODE XREF: sub_68D8B4F0+3Cj
		mov	ecx, [edx]
		sub	edx, 4
		test	ecx, ecx
		jz	short loc_68D8B581

loc_68D8B529:				; CODE XREF: sub_68D8B4F0+27j
		sub	eax, 1
		jns	short loc_68D8B520

loc_68D8B52E:				; CODE XREF: sub_68D8B4F0+16j
		mov	[esp+3Ch+Size],	14h ; Size
		call	malloc
		test	eax, eax
		jz	short loc_68D8B573
		mov	edx, [esp+3Ch+var_20]
		test	esi, esi
		mov	[eax], ebx
		mov	[eax+4], edx
		js	short loc_68D8B56B
		mov	edi, [esp+3Ch+var_24]
		shl	esi, 2
		xor	edx, edx
		lea	ecx, [eax+esi+8]
		add	edi, esi

loc_68D8B55A:				; CODE XREF: sub_68D8B4F0+79j
		mov	esi, [edi]
		add	edx, 1
		sub	edi, 4
		mov	[ecx], esi
		sub	ecx, 4
		cmp	edx, ebx
		jnz	short loc_68D8B55A

loc_68D8B56B:				; CODE XREF: sub_68D8B4F0+59j
					; sub_68D8B4F0+85j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8B573:				; CODE XREF: sub_68D8B4F0+4Cj
		test	esi, esi
		js	short loc_68D8B56B
		mov	eax, [esp+3Ch+var_24]
		lea	ebp, [ebx-2]
		mov	edi, [eax+esi*4]

loc_68D8B581:				; CODE XREF: sub_68D8B4F0+20j
					; sub_68D8B4F0+37j
		mov	edx, [esp+3Ch+var_24]
		lea	ebx, [edx+ebp*4]
		jmp	short loc_68D8B5AF
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B590:				; CODE XREF: sub_68D8B4F0+C8j
		cmp	eax, 3
		jz	short loc_68D8B5D2
		cmp	eax, 1
		jz	short loc_68D8B5C5

loc_68D8B59A:				; CODE XREF: sub_68D8B4F0+E0j
		mov	[esp+3Ch+Size],	edi ; Memory
		lea	esi, [esi+0]
		call	free

loc_68D8B5A5:				; CODE XREF: sub_68D8B4F0+C1j
		sub	esi, 1
		js	short loc_68D8B5E2
		mov	edi, [ebx]
		sub	ebx, 4

loc_68D8B5AF:				; CODE XREF: sub_68D8B4F0+98j
		test	edi, edi
		jz	short loc_68D8B5A5
		mov	eax, [edi]
		cmp	eax, 2
		jnz	short loc_68D8B590

loc_68D8B5BA:				; CODE XREF: sub_68D8B4F0+F0j
		mov	eax, [edi+0Ch]
		mov	[esp+3Ch+Size],	eax ; Memory
		call	libintl_gettext_free_exp

loc_68D8B5C5:				; CODE XREF: sub_68D8B4F0+A8j
		mov	eax, [edi+8]
		mov	[esp+3Ch+Size],	eax ; Memory
		call	libintl_gettext_free_exp
		jmp	short loc_68D8B59A
; ---------------------------------------------------------------------------

loc_68D8B5D2:				; CODE XREF: sub_68D8B4F0+A3j
		mov	eax, [edi+10h]
		mov	[esp+3Ch+Size],	eax ; Memory
		call	libintl_gettext_free_exp
		lea	esi, [esi+0]
		jmp	short loc_68D8B5BA
; ---------------------------------------------------------------------------

loc_68D8B5E2:				; CODE XREF: sub_68D8B4F0+B8j
		add	esp, 2Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68D8B4F0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. libintl_gettextparse

; =============== S U B	R O U T	I N E =======================================


		public libintl_gettextparse
libintl_gettextparse proc near		; CODE XREF: libintl_gettext_extract_plural+B1p

Size		= dword	ptr -51Ch
Src		= dword	ptr -518h
var_514		= dword	ptr -514h
var_508		= dword	ptr -508h
var_504		= dword	ptr -504h
var_500		= dword	ptr -500h
var_4FC		= dword	ptr -4FCh
var_4F8		= dword	ptr -4F8h
Dst		= dword	ptr -4F4h
var_4F0		= dword	ptr -4F0h
var_4EC		= dword	ptr -4ECh
var_4E8		= dword	ptr -4E8h
var_4E4		= dword	ptr -4E4h
var_4E0		= dword	ptr -4E0h
var_4D8		= byte ptr -4D8h
Memory		= byte ptr -1B8h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		xor	edx, edx
		push	edi
		push	esi
		push	ebx
		sub	esp, 50Ch
		lea	eax, [esp+51Ch+Memory]
		lea	esi, [esp+51Ch+var_4D8]
		mov	ebx, eax
		mov	[esp+51Ch+var_4F0], 0C8h
		mov	ebp, eax
		mov	[esp+51Ch+var_4F8], esi
		mov	[esp+51Ch+var_500], eax
		mov	[esp+51Ch+var_4E4], 0
		mov	[esp+51Ch+var_4EC], 0FFFFFFFEh
		mov	[esp+51Ch+var_4E8], 0C7h

loc_68D8B633:				; CODE XREF: libintl_gettextparse+215j
		mov	ecx, [esp+51Ch+var_4E8]
		mov	edi, ebp
		mov	[ebx], dx
		lea	eax, [ebp+ecx*2+0]
		mov	ecx, [esp+51Ch+var_4F8]
		cmp	ebx, eax
		mov	[esp+51Ch+Dst],	ecx
		jb	loc_68D8B722
		cmp	[esp+51Ch+var_4F0], 270Fh
		ja	loc_68D8BAFF
		shl	[esp+51Ch+var_4F0], 1
		cmp	[esp+51Ch+var_4F0], 2710h
		jbe	short loc_68D8B674
		mov	[esp+51Ch+var_4F0], 2710h

loc_68D8B674:				; CODE XREF: libintl_gettextparse+7Aj
		mov	eax, [esp+51Ch+var_4F0]
		mov	[esp+51Ch+var_4FC], edx
		add	eax, eax
		mov	[esp+51Ch+Dst],	eax
		add	eax, [esp+51Ch+var_4F0]
		lea	eax, [eax+eax+3]
		mov	[esp+51Ch+Size], eax ; Size
		call	malloc
		test	eax, eax
		mov	esi, eax
		jz	loc_68D8BAFF
		sub	ebx, ebp
		mov	edi, eax
		sar	ebx, 1
		add	ebx, 1
		lea	eax, [ebx+ebx]
		mov	[esp+51Ch+var_514], eax	; Size
		mov	[esp+51Ch+Src],	ebp ; Src
		mov	[esp+51Ch+Size], esi ; Dst
		call	memcpy
		mov	eax, [esp+51Ch+Dst]
		mov	ecx, [esp+51Ch+var_4F8]
		add	eax, 3
		and	eax, 0FFFFFFFCh
		lea	eax, [esi+eax]
		mov	[esp+51Ch+Dst],	eax
		lea	eax, ds:0[ebx*4]
		mov	[esp+51Ch+var_514], eax	; Size
		mov	eax, [esp+51Ch+Dst]
		mov	[esp+51Ch+Src],	ecx ; Src
		mov	[esp+51Ch+Size], eax ; Dst
		call	memcpy
		mov	edx, [esp+51Ch+var_4FC]
		cmp	ebp, [esp+51Ch+var_500]
		jz	short loc_68D8B6FE
		mov	[esp+51Ch+Size], ebp ; Memory
		call	free
		mov	edx, [esp+51Ch+var_4FC]

loc_68D8B6FE:				; CODE XREF: libintl_gettextparse+100j
		mov	ecx, [esp+51Ch+var_4F0]
		lea	eax, [ebx-1]
		lea	ebx, [esi+eax*2]
		sub	ecx, 1
		mov	[esp+51Ch+var_4E8], ecx
		lea	ecx, [esi+ecx*2]
		cmp	ebx, ecx
		jnb	loc_68D8B986
		mov	ebp, [esp+51Ch+Dst]
		lea	esi, [ebp+eax*4+0]

loc_68D8B722:				; CODE XREF: libintl_gettextparse+5Aj
		cmp	edx, 9
		jz	loc_68D8BD26
		movsx	eax, byte ptr ds:(off_68D94338+1F4h)[edx]
		cmp	eax, 0FFFFFFF6h
		jz	short loc_68D8B783
		cmp	[esp+51Ch+var_4EC], 0FFFFFFFEh
		jz	loc_68D8B8F0

loc_68D8B742:				; CODE XREF: libintl_gettextparse+50Aj
		mov	ecx, [esp+51Ch+var_4EC]
		test	ecx, ecx
		jle	loc_68D8BA9B
		cmp	[esp+51Ch+var_4EC], 106h
		mov	ecx, 2
		ja	short loc_68D8B768
		mov	ebp, [esp+51Ch+var_4EC]
		movzx	ecx, byte ptr ss:(off_68D94338+228h)[ebp]

loc_68D8B768:				; CODE XREF: libintl_gettextparse+16Bj
					; libintl_gettextparse+357j ...
		lea	ebp, [ecx+eax]
		cmp	ebp, 36h
		mov	[esp+51Ch+var_4F8], ebp
		ja	short loc_68D8B783
		movsx	ebp, byte ptr ss:(off_68D94338+348h)[ebp]
		cmp	ebp, ecx
		jz	loc_68D8B810

loc_68D8B783:				; CODE XREF: libintl_gettextparse+145j
					; libintl_gettextparse+182j
		movzx	edx, byte ptr ds:(off_68D94338+3BFh)[edx]
		movzx	ebp, dl
		test	ebp, ebp
		jz	loc_68D8B823
		movzx	eax, byte ptr ss:(off_68D94338+3DAh)[ebp]
		mov	[esp+51Ch+var_4F8], eax
		mov	eax, 1
		sub	eax, [esp+51Ch+var_4F8]
		cmp	dl, 0Dh		; switch 14 cases
		mov	eax, [esi+eax*4]
		jbe	loc_68D8B8A0

loc_68D8B7B5:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; libintl_gettextparse+2FBj ...
		mov	edx, [esp+51Ch+var_4F8]	; jumptable 68D8B8A0 default case
		mov	ecx, [esp+51Ch+var_4F8]
		shl	edx, 2
		sub	esi, edx
		add	ecx, ecx
		mov	edx, esi
		sub	ebx, ecx
		mov	[edx+4], eax
		movzx	eax, byte ptr ss:(off_68D94338+3E8h)[ebp]
		lea	esi, [esi+4]
		movzx	ebp, word ptr [ebx]
		sub	eax, 10h
		movsx	edx, byte ptr ds:(off_68D94338+3F6h)[eax]
		movsx	ecx, bp
		lea	edx, [ecx+edx]
		cmp	edx, 36h
		jbe	loc_68D8B8A7

loc_68D8B7F1:				; CODE XREF: libintl_gettextparse+2C2j
		movsx	edx, byte ptr ds:(off_68D94338+3F9h)[eax]

loc_68D8B7F8:				; CODE XREF: libintl_gettextparse+286j
					; libintl_gettextparse+2CFj ...
		mov	ecx, [esp+51Ch+Dst]
		add	ebx, 2
		mov	ebp, edi
		mov	[esp+51Ch+var_4F8], ecx
		jmp	loc_68D8B633
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B810:				; CODE XREF: libintl_gettextparse+18Dj
		mov	ecx, [esp+51Ch+var_4F8]
		movzx	edx, byte ptr ds:(off_68D94338+388h)[ecx]
		test	edx, edx
		jnz	loc_68D8B960

loc_68D8B823:				; CODE XREF: libintl_gettextparse+19Fj
		cmp	[esp+51Ch+var_4E4], 3
		jnz	short loc_68D8B844
		jmp	loc_68D8B94C
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B830:				; CODE XREF: libintl_gettextparse+257j
					; libintl_gettextparse+25Fj ...
		cmp	ebx, edi
		jz	short loc_68D8B878
		sub	ebx, 2
		sub	esi, 4
		movsx	eax, word ptr [ebx]
		movsx	eax, byte ptr ds:(off_68D94338+1F4h)[eax]

loc_68D8B844:				; CODE XREF: libintl_gettextparse+238j
					; libintl_gettextparse+36Bj ...
		cmp	eax, 0FFFFFFF6h
		jz	short loc_68D8B830
		add	eax, 1
		cmp	eax, 36h
		ja	short loc_68D8B830
		cmp	byte ptr ds:(off_68D94338+348h)[eax], 1
		jnz	short loc_68D8B830
		movzx	edx, byte ptr ds:(off_68D94338+388h)[eax]
		test	edx, edx
		jz	short loc_68D8B830
		mov	ebp, [esp+51Ch+var_4E0]
		add	esi, 4
		mov	[esp+51Ch+var_4E4], 3
		mov	[esi], ebp
		jmp	short loc_68D8B7F8
; ---------------------------------------------------------------------------

loc_68D8B878:				; CODE XREF: libintl_gettextparse+242j
		mov	eax, edi
		mov	esi, 1

loc_68D8B87F:				; CODE XREF: libintl_gettextparse+52Fj
					; libintl_gettextparse+799j
		cmp	eax, [esp+51Ch+var_500]
		jz	short loc_68D8B88D
		mov	[esp+51Ch+Size], edi ; Memory
		call	free

loc_68D8B88D:				; CODE XREF: libintl_gettextparse+293j
		add	esp, 50Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8B8A0:				; CODE XREF: libintl_gettextparse+1BFj
		jmp	ds:off_68D94300[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D8B8A7:				; CODE XREF: libintl_gettextparse+1FBj
		movsx	cx, byte ptr ds:(off_68D94338+348h)[edx]
		cmp	bp, cx
		jnz	loc_68D8B7F1
		movzx	edx, byte ptr ds:(off_68D94338+388h)[edx]
		jmp	loc_68D8B7F8
; ---------------------------------------------------------------------------

loc_68D8B8C4:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		mov	eax, [esi]	; jumptable 68D8B8A0 cases 6-9
		mov	ecx, [esi-8]
		mov	edx, [esi-4]
		mov	[esp+51Ch+var_24], eax
		mov	eax, 2
		mov	[esp+51Ch+var_28], ecx
		lea	ecx, [esp+51Ch+var_28]
		call	sub_68D8B4F0
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8B8F0:				; CODE XREF: libintl_gettextparse+14Cj
		mov	ecx, [esp+51Ch+arg_0]
		mov	ecx, [ecx]
		mov	[esp+51Ch+var_504], ecx
		movzx	ebp, byte ptr [ecx]
		mov	ecx, ebp
		test	cl, cl
		jz	short loc_68D8B92F
		cmp	cl, 20h
		jnz	loc_68D8BD2F

loc_68D8B90F:				; CODE XREF: libintl_gettextparse+742j
		mov	ecx, [esp+51Ch+var_504]
		mov	ebp, eax
		jmp	short loc_68D8B91F
; ---------------------------------------------------------------------------

loc_68D8B917:				; CODE XREF: libintl_gettextparse+337j
		cmp	al, 9
		jnz	loc_68D8BAAA

loc_68D8B91F:				; CODE XREF: libintl_gettextparse+325j
					; libintl_gettextparse+4C0j
		add	ecx, 1
		movzx	eax, byte ptr [ecx]
		test	al, al
		jnz	short loc_68D8B917
		mov	[esp+51Ch+var_504], ecx
		mov	eax, ebp

loc_68D8B92F:				; CODE XREF: libintl_gettextparse+314j
		mov	ecx, [esp+51Ch+var_504]
		mov	ebp, [esp+51Ch+arg_0]
		mov	[esp+51Ch+var_4EC], 0
		mov	[ebp+0], ecx
		xor	ecx, ecx
		jmp	loc_68D8B768
; ---------------------------------------------------------------------------

loc_68D8B94C:				; CODE XREF: libintl_gettextparse+23Aj
		cmp	[esp+51Ch+var_4EC], 0
		jle	short loc_68D8B980
		mov	[esp+51Ch+var_4EC], 0FFFFFFFEh
		jmp	loc_68D8B844
; ---------------------------------------------------------------------------

loc_68D8B960:				; CODE XREF: libintl_gettextparse+22Dj
		mov	ebp, [esp+51Ch+var_4E0]
		cmp	[esp+51Ch+var_4E4], 1
		adc	[esp+51Ch+var_4E4], 0FFFFFFFFh
		add	esi, 4
		mov	[esi], ebp
		mov	[esp+51Ch+var_4EC], 0FFFFFFFEh
		jmp	loc_68D8B7F8
; ---------------------------------------------------------------------------

loc_68D8B980:				; CODE XREF: libintl_gettextparse+361j
		jnz	loc_68D8B844

loc_68D8B986:				; CODE XREF: libintl_gettextparse+124j
		xor	eax, eax
		mov	esi, 1
		jmp	loc_68D8BB08
; ---------------------------------------------------------------------------

loc_68D8B992:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		mov	eax, [esi]	; jumptable 68D8B8A0 case 10
		lea	ecx, [esp+51Ch+var_28]
		mov	edx, 2
		mov	[esp+51Ch+var_28], eax
		mov	eax, 1
		call	sub_68D8B4F0
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8B9B6:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		mov	eax, [esi]	; jumptable 68D8B8A0 case 5
		lea	ecx, [esp+51Ch+var_28]
		mov	edx, [esi-8]
		mov	[esp+51Ch+var_24], eax
		mov	eax, 2
		mov	[esp+51Ch+var_28], edx
		mov	edx, 0Eh
		call	sub_68D8B4F0
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8B9E4:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		mov	eax, [esi]	; jumptable 68D8B8A0 case 4
		lea	ecx, [esp+51Ch+var_28]
		mov	edx, [esi-8]
		mov	[esp+51Ch+var_24], eax
		mov	eax, 2
		mov	[esp+51Ch+var_28], edx
		mov	edx, 0Fh
		call	sub_68D8B4F0
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8BA12:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		mov	edx, [esi]	; jumptable 68D8B8A0 case 3
		mov	eax, [esi-8]
		mov	ecx, [esi-10h]
		mov	[esp+51Ch+var_20], edx
		mov	edx, 10h
		mov	[esp+51Ch+var_24], eax
		mov	eax, 3
		mov	[esp+51Ch+var_28], ecx
		lea	ecx, [esp+51Ch+var_28]
		call	sub_68D8B4F0
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8BA4A:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		mov	edx, [esi]	; jumptable 68D8B8A0 case 2
		test	edx, edx
		jz	loc_68D8BD75
		mov	ecx, [esp+51Ch+arg_0]
		mov	[ecx+4], edx
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8BA63:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		xor	ecx, ecx	; jumptable 68D8B8A0 case 12
		xor	eax, eax
		mov	edx, 1
		call	sub_68D8B4F0
		test	eax, eax
		jz	loc_68D8B7B5	; jumptable 68D8B8A0 default case
		mov	edx, [esi]
		mov	[eax+8], edx
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8BA83:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		mov	eax, [esi-4]	; jumptable 68D8B8A0 case 13
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8BA8B:				; CODE XREF: libintl_gettextparse:loc_68D8B8A0j
					; DATA XREF: .rdata:off_68D94300o
		xor	ecx, ecx	; jumptable 68D8B8A0 case 11
		xor	edx, edx
		xor	eax, eax
		call	sub_68D8B4F0
		jmp	loc_68D8B7B5	; jumptable 68D8B8A0 default case
; ---------------------------------------------------------------------------

loc_68D8BA9B:				; CODE XREF: libintl_gettextparse+158j
		xor	ecx, ecx
		mov	[esp+51Ch+var_4EC], 0
		jmp	loc_68D8B768
; ---------------------------------------------------------------------------

loc_68D8BAAA:				; CODE XREF: libintl_gettextparse+329j
		cmp	al, 20h
		lea	esi, [esi+0]
		jz	loc_68D8B91F
		mov	[esp+51Ch+var_504], ecx
		mov	ecx, ebp
		mov	ebp, eax
		mov	eax, ecx

loc_68D8BAC0:				; CODE XREF: libintl_gettextparse+748j
		mov	ecx, ebp
		movsx	ecx, cl
		mov	[esp+51Ch+var_4EC], ecx
		mov	ecx, [esp+51Ch+var_504]
		add	ecx, 1
		mov	[esp+51Ch+var_4F8], ecx
		mov	ecx, ebp
		cmp	cl, 7Ch
		jbe	short loc_68D8BB24

loc_68D8BADB:				; CODE XREF: libintl_gettextparse+53Aj
					; libintl_gettextparse+559j ...
		mov	ecx, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A cases 1-9,11-32,34-36,39,44,46,64-109,111-123
		mov	[esp+51Ch+var_4EC], 100h
		mov	[esp+51Ch+var_504], ecx
		nop
		lea	esi, [esi+0]

loc_68D8BAF0:				; CODE XREF: libintl_gettextparse+54Bj
					; libintl_gettextparse+564j ...
		mov	ebp, [esp+51Ch+arg_0]
		mov	[ebp+0], ecx
		jmp	loc_68D8B742
; ---------------------------------------------------------------------------

loc_68D8BAFF:				; CODE XREF: libintl_gettextparse+68j
					; libintl_gettextparse+A6j
		mov	edi, ebp
		xor	eax, eax
		mov	esi, 2

loc_68D8BB08:				; CODE XREF: libintl_gettextparse+39Dj
					; libintl_gettextparse+73Aj ...
		add	ebx, eax
		cmp	edi, ebx
		jz	loc_68D8BD87
		lea	eax, [ebx-2]
		sub	eax, edi
		not	eax
		and	eax, 0FFFFFFFEh
		lea	eax, [ebx+eax]
		jmp	loc_68D8B87F
; ---------------------------------------------------------------------------

loc_68D8BB24:				; CODE XREF: libintl_gettextparse+4E9j
		and	ebp, 0FFh	; switch 256 cases
		jmp	ds:off_68D94338[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68D8BB31:				; CODE XREF: libintl_gettextparse+53Aj
					; libintl_gettextparse+587j
					; DATA XREF: ...
		mov	ebp, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A cases 40,41,58,63,110
		mov	[esp+51Ch+var_504], ebp
		mov	ecx, ebp
		jmp	short loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BB3D:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ebp, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A cases 38,124
		movsx	ecx, byte ptr [ebp+0]
		cmp	[esp+51Ch+var_4EC], ecx
		jnz	short loc_68D8BADB ; jumptable 68D8BB2A	cases 1-9,11-32,34-36,39,44,46,64-109,111-123
		add	ebp, 1
		mov	[esp+51Ch+var_504], ebp
		mov	ecx, ebp
		jmp	short loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BB56:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ecx, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 37
		mov	[esp+51Ch+var_4E0], 5
		mov	[esp+51Ch+var_4EC], 105h
		mov	[esp+51Ch+var_504], ecx
		jmp	short loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BB70:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ecx, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 33
		cmp	byte ptr [ecx],	3Dh
		jnz	short loc_68D8BB31 ; jumptable 68D8BB2A	cases 40,41,58,63,110
		add	ecx, 1
		mov	[esp+51Ch+var_504], ecx
		mov	[esp+51Ch+var_4E0], 0Dh
		mov	[esp+51Ch+var_4EC], 102h
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BB95:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	[esp+51Ch+var_4EC], 0 ;	jumptable 68D8BB2A cases 0,10,59
		mov	ecx, [esp+51Ch+var_504]
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BBA6:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ecx, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 62
		cmp	byte ptr [ecx],	3Dh
		jz	loc_68D8BD3D
		mov	ebp, [esp+51Ch+var_4F8]
		mov	[esp+51Ch+var_4E0], 9
		mov	[esp+51Ch+var_4EC], 103h
		mov	[esp+51Ch+var_504], ebp
		mov	ecx, ebp
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BBD2:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ebp, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 61
		cmp	byte ptr [ebp+0], 3Dh
		jnz	loc_68D8BADB	; jumptable 68D8BB2A cases 1-9,11-32,34-36,39,44,46,64-109,111-123
		add	ebp, 1
		mov	[esp+51Ch+var_504], ebp
		mov	ecx, ebp
		mov	[esp+51Ch+var_4E0], 0Ch
		mov	[esp+51Ch+var_4EC], 102h
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BBFE:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ecx, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 60
		cmp	byte ptr [ecx],	3Dh
		jz	loc_68D8BD59
		mov	ebp, [esp+51Ch+var_4F8]
		mov	[esp+51Ch+var_4E0], 8
		mov	[esp+51Ch+var_4EC], 103h
		mov	[esp+51Ch+var_504], ebp
		mov	ecx, ebp
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BC2A:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ebp, [esp+51Ch+var_4EC]	; jumptable 68D8BB2A cases 48-57
		mov	ecx, [esp+51Ch+var_4F8]
		sub	ebp, 30h
		mov	[esp+51Ch+var_508], ebp
		movzx	ecx, byte ptr [ecx]
		lea	ebp, [ecx-30h]
		mov	byte ptr [esp+51Ch+var_504], cl
		mov	ecx, ebp
		cmp	cl, 9
		ja	short loc_68D8BC91
		mov	[esp+51Ch+var_4EC], edi
		mov	ecx, [esp+51Ch+var_508]
		mov	edi, edx
		mov	[esp+51Ch+var_4E0], esi
		mov	edx, eax
		mov	esi, [esp+51Ch+var_4F8]
		movzx	eax, byte ptr [esp+51Ch+var_504]
		mov	ebp, edx

loc_68D8BC65:				; CODE XREF: libintl_gettextparse+68Bj
		lea	edx, [ecx+ecx*4]
		movsx	eax, al
		add	esi, 1
		lea	ecx, [eax+edx*2-30h]
		movzx	eax, byte ptr [esi]
		lea	edx, [eax-30h]
		cmp	dl, 9
		jbe	short loc_68D8BC65
		mov	[esp+51Ch+var_4F8], esi
		mov	edx, edi
		mov	esi, [esp+51Ch+var_4E0]
		mov	edi, [esp+51Ch+var_4EC]
		mov	eax, ebp
		mov	[esp+51Ch+var_508], ecx

loc_68D8BC91:				; CODE XREF: libintl_gettextparse+658j
		mov	ebp, [esp+51Ch+var_508]
		mov	ecx, [esp+51Ch+var_4F8]
		mov	[esp+51Ch+var_4EC], 106h
		mov	[esp+51Ch+var_4E0], ebp
		mov	[esp+51Ch+var_504], ecx
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BCAE:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ebp, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 47
		mov	[esp+51Ch+var_4E0], 4
		mov	[esp+51Ch+var_4EC], 105h
		mov	[esp+51Ch+var_504], ebp
		mov	ecx, ebp
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BCCD:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ecx, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 45
		mov	[esp+51Ch+var_4E0], 7
		mov	[esp+51Ch+var_4EC], 104h
		mov	[esp+51Ch+var_504], ecx
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BCEA:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ebp, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 43
		mov	[esp+51Ch+var_4E0], 6
		mov	[esp+51Ch+var_4EC], 104h
		mov	[esp+51Ch+var_504], ebp
		mov	ecx, ebp
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BD09:				; CODE XREF: libintl_gettextparse+53Aj
					; DATA XREF: .rdata:off_68D94338o
		mov	ecx, [esp+51Ch+var_4F8]	; jumptable 68D8BB2A case 42
		mov	[esp+51Ch+var_4E0], 3
		mov	[esp+51Ch+var_4EC], 105h
		mov	[esp+51Ch+var_504], ecx
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BD26:				; CODE XREF: libintl_gettextparse+135j
		xor	eax, eax
		xor	esi, esi
		jmp	loc_68D8BB08
; ---------------------------------------------------------------------------

loc_68D8BD2F:				; CODE XREF: libintl_gettextparse+319j
		cmp	cl, 9
		jz	loc_68D8B90F
		jmp	loc_68D8BAC0
; ---------------------------------------------------------------------------

loc_68D8BD3D:				; CODE XREF: libintl_gettextparse+5BDj
		add	ecx, 1
		mov	[esp+51Ch+var_504], ecx
		mov	[esp+51Ch+var_4E0], 0Bh
		mov	[esp+51Ch+var_4EC], 103h
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BD59:				; CODE XREF: libintl_gettextparse+615j
		add	ecx, 1
		mov	[esp+51Ch+var_504], ecx
		mov	[esp+51Ch+var_4E0], 0Ah
		mov	[esp+51Ch+var_4EC], 103h
		jmp	loc_68D8BAF0
; ---------------------------------------------------------------------------

loc_68D8BD75:				; CODE XREF: libintl_gettextparse+45Ej
		mov	eax, [esp+51Ch+var_4F8]
		mov	esi, 1
		add	eax, eax
		neg	eax
		jmp	loc_68D8BB08
; ---------------------------------------------------------------------------

loc_68D8BD87:				; CODE XREF: libintl_gettextparse+51Cj
		mov	eax, edi
		jmp	loc_68D8B87F
libintl_gettextparse endp

; ---------------------------------------------------------------------------
		align 10h

loc_68D8BD90:				; DATA XREF: sub_68D8DA50+2A9o
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8BDA0	proc near		; DATA XREF: sub_68D8DA50+2B0o

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_40		= word ptr -40h
var_3E		= word ptr -3Eh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	edi, [esp+8Ch+arg_4]
		mov	ebx, [esp+8Ch+arg_0]
		mov	esi, [esp+8Ch+arg_8]
		test	edi, edi
		jz	loc_68D8C03E
		mov	edx, [edi]
		test	edx, edx
		jz	loc_68D8C03E
		mov	eax, [esi]
		lea	edx, [ebx+10h]
		mov	[esp+8Ch+var_5C], edx
		lea	edx, [ebx+30h]
		mov	[esp+8Ch+var_50], edx
		xchg	ax, ax

loc_68D8BDE0:				; CODE XREF: sub_68D8BDA0+1CAj
		test	eax, eax
		jz	short loc_68D8BE49

loc_68D8BDE4:				; CODE XREF: sub_68D8BDA0+A7j
		mov	eax, [ebx+28h]
		mov	edx, [ebx+48h]
		mov	[esp+8Ch+var_20], 10h
		mov	[esp+8Ch+var_58], eax
		lea	eax, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_54], edx
		lea	edx, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], edx
		mov	eax, [esi]
		mov	[esp+8Ch+var_84], eax
		mov	eax, [edi]
		mov	[esp+8Ch+var_88], eax
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_8C], eax
		call	dword ptr [ebx+18h]
		cmp	eax, 0FFFFFFFFh
		mov	[esp+8Ch+var_64], eax
		jz	loc_68D8C02F
		mov	eax, [esp+8Ch+var_20]
		test	eax, eax
		mov	[esp+8Ch+var_60], eax
		jnz	short loc_68D8BE51
		mov	edx, [esp+8Ch+var_64]
		mov	eax, [esi]
		add	[edi], edx
		sub	eax, edx
		test	eax, eax
		mov	[esi], eax
		jnz	short loc_68D8BDE4

loc_68D8BE49:				; CODE XREF: sub_68D8BDA0+42j
					; sub_68D8BDA0+32Ej
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8BE51:				; CODE XREF: sub_68D8BDA0+97j
		mov	edx, [ebx+2Ch]
		test	edx, edx
		jz	short loc_68D8BEAA
		movzx	eax, [esp+8Ch+var_40]
		lea	ecx, [eax+2800h]
		movzx	ebp, ax
		cmp	cx, 3FFh
		ja	short loc_68D8BE87
		movzx	ecx, [esp+8Ch+var_3E]
		and	eax, 3FFh
		shl	eax, 0Ah
		and	ecx, 3FFh
		lea	ebp, [ecx+eax+10000h]

loc_68D8BE87:				; CODE XREF: sub_68D8BDA0+CBj
		mov	ecx, [edx]
		test	ecx, ecx
		jz	short loc_68D8BEAA
		lea	eax, [edx+0Ch]

loc_68D8BE90:				; CODE XREF: sub_68D8BDA0+108j
		test	byte ptr [edx+8], 1
		jz	short loc_68D8BE9F
		cmp	[edx+4], ebp
		jz	loc_68D8BF95

loc_68D8BE9F:				; CODE XREF: sub_68D8BDA0+F4j
		mov	ecx, [eax]
		mov	edx, eax
		add	eax, 0Ch
		test	ecx, ecx
		jnz	short loc_68D8BE90

loc_68D8BEAA:				; CODE XREF: sub_68D8BDA0+B6j
					; sub_68D8BDA0+EBj ...
		mov	ecx, [ebx+4Ch]
		test	ecx, ecx
		jz	short loc_68D8BF0D
		movzx	eax, [esp+8Ch+var_40]
		lea	edx, [eax+2800h]
		movzx	ebp, ax
		cmp	dx, 3FFh
		ja	short loc_68D8BEE0
		movzx	edx, [esp+8Ch+var_3E]
		and	eax, 3FFh
		shl	eax, 0Ah
		and	edx, 3FFh
		lea	ebp, [edx+eax+10000h]

loc_68D8BEE0:				; CODE XREF: sub_68D8BDA0+124j
		mov	edx, [ecx]
		lea	eax, [ecx+0Ch]
		test	edx, edx
		jz	loc_68D8C0A8
		lea	esi, [esi+0]

loc_68D8BEF0:				; CODE XREF: sub_68D8BDA0+163j
		test	byte ptr [ecx+8], 2
		jz	short loc_68D8BEFA
		cmp	edx, ebp
		jz	short loc_68D8BF70

loc_68D8BEFA:				; CODE XREF: sub_68D8BDA0+154j
		mov	edx, [eax]
		mov	ecx, eax
		add	eax, 0Ch
		test	edx, edx
		jnz	short loc_68D8BEF0
		mov	edx, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_60], edx

loc_68D8BF0D:				; CODE XREF: sub_68D8BDA0+10Fj
					; sub_68D8BDA0+1F0j ...
		mov	edx, [esp+8Ch+arg_10]
		mov	eax, [edx]
		mov	edx, [esp+8Ch+arg_C]
		mov	[esp+8Ch+var_7C], eax
		mov	eax, [edx]
		lea	edx, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_88], edx
		mov	[esp+8Ch+var_80], eax
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_84], eax
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_8C], eax
		call	dword ptr [ebx+3Ch]
		cmp	eax, 0FFFFFFFFh
		jz	loc_68D8C0B5
		mov	edx, [esp+8Ch+var_64]
		add	[edi], edx
		mov	edx, [esp+8Ch+arg_C]
		add	[edx], eax
		mov	edx, [esp+8Ch+var_64]
		sub	[esi], edx
		mov	edx, [esp+8Ch+arg_10]
		sub	[edx], eax
		mov	eax, [esi]
		jmp	loc_68D8BDE0
; ---------------------------------------------------------------------------
		align 10h

loc_68D8BF70:				; CODE XREF: sub_68D8BDA0+158j
		mov	edx, [ecx+4]
		cmp	edx, 0FFFFh
		ja	short loc_68D8BFB7
		mov	[esp+8Ch+var_40], dx
		mov	[esp+8Ch+var_20], 1
		mov	[esp+8Ch+var_60], 1
		jmp	loc_68D8BF0D
; ---------------------------------------------------------------------------

loc_68D8BF95:				; CODE XREF: sub_68D8BDA0+F9j
		cmp	ecx, 0FFFFh
		ja	short loc_68D8BFF3
		mov	[esp+8Ch+var_40], cx
		mov	[esp+8Ch+var_20], 1
		mov	[esp+8Ch+var_60], 1
		jmp	loc_68D8BEAA
; ---------------------------------------------------------------------------

loc_68D8BFB7:				; CODE XREF: sub_68D8BDA0+1D9j
		sub	edx, 10000h
		mov	eax, edx
		and	dx, 3FFh
		shr	eax, 0Ah
		or	dx, 0DC00h
		and	ax, 3FFh
		or	ax, 0D800h
		mov	[esp+8Ch+var_40], ax
		mov	[esp+8Ch+var_3E], dx
		mov	[esp+8Ch+var_20], 2
		mov	[esp+8Ch+var_60], 2
		jmp	loc_68D8BF0D
; ---------------------------------------------------------------------------

loc_68D8BFF3:				; CODE XREF: sub_68D8BDA0+1FBj
		sub	ecx, 10000h
		mov	eax, ecx
		and	cx, 3FFh
		shr	eax, 0Ah
		or	cx, 0DC00h
		and	ax, 3FFh
		or	ax, 0D800h
		mov	[esp+8Ch+var_40], ax
		mov	[esp+8Ch+var_3E], cx
		mov	[esp+8Ch+var_20], 2
		mov	[esp+8Ch+var_60], 2
		jmp	loc_68D8BEAA
; ---------------------------------------------------------------------------

loc_68D8C02F:				; CODE XREF: sub_68D8BDA0+87j
		mov	edx, [esp+8Ch+var_58]
		mov	[ebx+28h], edx
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8C03E:				; CODE XREF: sub_68D8BDA0+1Ej
					; sub_68D8BDA0+28j
		mov	eax, [esp+8Ch+arg_C]
		test	eax, eax
		jz	short loc_68D8C090
		mov	edi, [esp+8Ch+arg_C]
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_68D8C090
		mov	edx, [ebx+44h]
		test	edx, edx
		jz	short loc_68D8C090
		mov	edi, [esp+8Ch+arg_10]
		mov	esi, [ebx+48h]
		mov	ecx, [edi]
		mov	[esp+8Ch+var_88], eax
		lea	eax, [ebx+30h]
		mov	[esp+8Ch+var_8C], eax
		mov	[esp+8Ch+var_84], ecx
		call	edx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68D8C0CB
		mov	edx, [esp+8Ch+arg_C]
		mov	edi, [esp+8Ch+arg_10]
		add	[edx], eax
		sub	[edi], eax

loc_68D8C090:				; CODE XREF: sub_68D8BDA0+2A7j
					; sub_68D8BDA0+2B4j ...
		mov	dword ptr [ebx+28h], 0
		xor	eax, eax
		mov	dword ptr [ebx+48h], 0
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8C0A8:				; CODE XREF: sub_68D8BDA0+147j
		mov	eax, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_60], eax
		jmp	loc_68D8BF0D
; ---------------------------------------------------------------------------

loc_68D8C0B5:				; CODE XREF: sub_68D8BDA0+1A4j
		mov	edi, [esp+8Ch+var_54]
		mov	edx, [esp+8Ch+var_58]
		mov	[ebx+48h], edi
		mov	[ebx+28h], edx
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8C0CB:				; CODE XREF: sub_68D8BDA0+2DCj
		mov	[ebx+48h], esi
		jmp	loc_68D8BE49
sub_68D8BDA0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_68D8C0E0:				; DATA XREF: sub_68D8D040+4A0o
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8C0F0	proc near		; CODE XREF: _nl_find_msg+545p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], esi
		mov	[esp+2Ch+var_4], edi
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+8]
		mov	esi, eax
		call	ds:_errno
		mov	edi, eax
		call	dword ptr [ebx+0Ch]
		mov	eax, [eax]
		mov	[edi], eax
		mov	eax, esi
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_68D8C0F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8C150	proc near		; DATA XREF: sub_68D8D040+269o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_4], edi
		mov	edx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_C], ebx
		mov	edi, [esp+0Ch+arg_8]
		mov	[esp+0Ch+var_8], esi
		cmp	dword ptr [eax], 0D698h
		jnz	short loc_68D8C1C0
		movzx	ecx, byte ptr [edx]
		mov	eax, 1
		test	cl, cl
		js	short loc_68D8C190

loc_68D8C17E:				; CODE XREF: sub_68D8C150+6Aj
					; sub_68D8C150+81j ...
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C190:				; CODE XREF: sub_68D8C150+2Cj
		add	ecx, 7Fh
		cmp	cl, 7Dh
		setbe	al
		ja	short loc_68D8C1C0
		cmp	edi, 1
		jg	short loc_68D8C1D3

loc_68D8C1A0:				; CODE XREF: sub_68D8C150+97j
		test	al, al
		jz	short loc_68D8C1C0
		cmp	edi, 3
		jle	short loc_68D8C1C0
		movzx	edx, byte ptr [edx+1]
		cmp	dl, 2Fh
		jbe	short loc_68D8C1C0
		cmp	dl, 39h
		mov	eax, 4
		jbe	short loc_68D8C17E
		lea	esi, [esi+0]

loc_68D8C1C0:				; CODE XREF: sub_68D8C150+20j
					; sub_68D8C150+49j ...
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D8C17E
; ---------------------------------------------------------------------------

loc_68D8C1D3:				; CODE XREF: sub_68D8C150+4Ej
		movzx	ecx, byte ptr [edx+1]
		lea	esi, [ecx-80h]
		mov	ebx, esi
		cmp	bl, 7Eh
		jbe	short loc_68D8C1E9
		sub	ecx, 40h
		cmp	cl, 3Eh
		ja	short loc_68D8C1A0

loc_68D8C1E9:				; CODE XREF: sub_68D8C150+8Fj
		mov	eax, 2
		jmp	short loc_68D8C17E
sub_68D8C150	endp


; =============== S U B	R O U T	I N E =======================================


sub_68D8C1F0	proc near		; DATA XREF: sub_68D8D040+3A7o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	eax, 1
		sub	esp, 8
		mov	ecx, [esp+0Ch+arg_4]
		mov	ebx, [esp+0Ch+arg_8]
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		js	short loc_68D8C210

loc_68D8C208:				; CODE XREF: sub_68D8C1F0+6Fj
					; sub_68D8C1F0+82j ...
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C210:				; CODE XREF: sub_68D8C1F0+16j
		cmp	dl, 8Eh
		jz	short loc_68D8C274
		cmp	dl, 8Fh
		jz	short loc_68D8C240
		cmp	ebx, 1
		lea	esi, [esi+0]
		jle	short loc_68D8C286
		add	edx, 5Fh
		cmp	dl, 5Dh
		ja	short loc_68D8C261
		movzx	eax, byte ptr [ecx+1]
		add	eax, 5Fh
		cmp	al, 5Dh
		ja	short loc_68D8C261

loc_68D8C235:				; CODE XREF: sub_68D8C1F0+92j
		mov	eax, 2
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C240:				; CODE XREF: sub_68D8C1F0+28j
		cmp	ebx, 2
		jle	short loc_68D8C286
		movzx	eax, byte ptr [ecx+1]
		add	eax, 5Fh
		cmp	al, 5Dh
		ja	short loc_68D8C261
		movzx	edx, byte ptr [ecx+2]
		mov	eax, 3
		add	edx, 5Fh
		cmp	dl, 5Dh
		jbe	short loc_68D8C208

loc_68D8C261:				; CODE XREF: sub_68D8C1F0+38j
					; sub_68D8C1F0+43j ...
		call	ds:_errno
		mov	dword ptr [eax], 2Ah
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D8C208
; ---------------------------------------------------------------------------

loc_68D8C274:				; CODE XREF: sub_68D8C1F0+23j
		cmp	ebx, 1
		jle	short loc_68D8C286
		movzx	eax, byte ptr [ecx+1]
		add	eax, 5Fh
		cmp	al, 3Eh
		jbe	short loc_68D8C235
		jmp	short loc_68D8C261
; ---------------------------------------------------------------------------

loc_68D8C286:				; CODE XREF: sub_68D8C1F0+30j
					; sub_68D8C1F0+53j ...
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8C208
sub_68D8C1F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8C2A0	proc near		; DATA XREF: sub_68D8D040+399o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_8], esi
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_4], edi
		mov	esi, [esp+3Ch+arg_0]
		mov	edi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_C], ebx
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_3C], esi
		mov	[esp+3Ch+var_38], edi
		call	dword ptr [esi+10h]
		cmp	eax, 0FFFFFFFFh
		mov	ebx, eax
		jz	short loc_68D8C30F
		mov	[esp+3Ch+var_10], eax
		mov	eax, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_28], eax
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_2C], eax
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_30], eax
		mov	eax, [esi]
		add	esi, 18h
		mov	[esp+3Ch+var_3C], esi
		mov	[esp+3Ch+var_38], eax
		call	ds:dword_68D96170
		sub	esp, 18h
		test	eax, eax
		jnz	short loc_68D8C321
		cmp	ebx, [esp+3Ch+var_10]
		jnz	short loc_68D8C321

loc_68D8C30F:				; CODE XREF: sub_68D8C2A0+2Ej
					; sub_68D8C2A0+92j
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_8]
		mov	ebx, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8C321:				; CODE XREF: sub_68D8C2A0+67j
					; sub_68D8C2A0+6Dj
		call	ds:_errno
		mov	ebx, 0FFFFFFFFh
		mov	dword ptr [eax], 2Ah
		jmp	short loc_68D8C30F
sub_68D8C2A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8C340	proc near		; DATA XREF: sub_68D8D040+2A5o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		movzx	edx, byte ptr [eax]
		mov	eax, 1
		test	dl, dl
		js	short loc_68D8C360

loc_68D8C353:				; CODE XREF: sub_68D8C340+33j
					; sub_68D8C340+45j ...
		cmp	eax, [esp+0Ch+arg_8]
		jg	short loc_68D8C3D7

loc_68D8C359:				; CODE XREF: sub_68D8C340+8Aj
					; sub_68D8C340+A8j
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C360:				; CODE XREF: sub_68D8C340+11j
		movzx	edx, dl
		mov	al, 2
		mov	ecx, edx
		and	ecx, 0E0h
		cmp	ecx, 0C0h
		jz	short loc_68D8C353
		mov	ecx, edx
		mov	al, 3
		and	ecx, 0F0h
		cmp	ecx, 0E0h
		jz	short loc_68D8C353
		mov	ecx, edx
		mov	al, 4
		and	ecx, 0F8h
		cmp	ecx, 0F0h
		jz	short loc_68D8C353
		mov	ecx, edx
		mov	al, 5
		and	ecx, 0FCh
		cmp	ecx, 0F8h
		jz	short loc_68D8C353
		and	edx, 0FEh
		cmp	edx, 0FCh
		jz	short loc_68D8C3D0
		call	ds:_errno
		mov	dword ptr [eax], 2Ah
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D8C359
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C3D0:				; CODE XREF: sub_68D8C340+77j
		mov	al, 6
		jmp	loc_68D8C353
; ---------------------------------------------------------------------------

loc_68D8C3D7:				; CODE XREF: sub_68D8C340+17j
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8C359
sub_68D8C340	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8C3F0	proc near		; DATA XREF: sub_68D8D040+3BDo

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_10], ebx
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], edi
		mov	edi, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_4], ebp
		mov	ebp, [esp+1Ch+arg_10]
		mov	[esp+1Ch+var_C], esi
		mov	esi, [edx+18h]
		mov	ecx, [edx]
		test	esi, 2
		jz	short loc_68D8C423
		xor	ecx, 1

loc_68D8C423:				; CODE XREF: sub_68D8C3F0+2Ej
		cmp	[esp+1Ch+arg_8], 3
		jle	loc_68D8C553
		cmp	ecx, 2EE0h
		jz	loc_68D8C4F3
		cmp	ecx, 2EE1h
		jz	loc_68D8C530

loc_68D8C446:				; CODE XREF: sub_68D8C3F0+121j
					; sub_68D8C3F0+15Ej
		test	byte ptr [edx+4], 1
		jnz	short loc_68D8C4B3

loc_68D8C44C:				; CODE XREF: sub_68D8C3F0+C9j
					; sub_68D8C3F0+DFj
		lea	edx, [eax-0D800h]
		cmp	edx, 7FFh
		jbe	loc_68D8C570
		cmp	eax, 10FFFFh
		ja	loc_68D8C570
		cmp	eax, 0FFFFh
		jbe	short loc_68D8C4E2
		sub	eax, 10000h
		mov	edx, eax
		and	ax, 3FFh
		shr	edx, 0Ah
		or	ax, 0DC00h
		and	dx, 3FFh
		or	dx, 0D800h
		mov	[edi+2], ax
		mov	eax, 4
		mov	[edi], dx
		mov	dword ptr [ebp+0], 2

loc_68D8C49F:				; CODE XREF: sub_68D8C3F0+F0j
					; sub_68D8C3F0+101j ...
		mov	ebx, [esp+1Ch+var_10]
		mov	esi, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_8]
		mov	ebp, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8C4B3:				; CODE XREF: sub_68D8C3F0+5Aj
		test	esi, 1
		jnz	short loc_68D8C44C
		mov	ecx, esi
		or	ecx, 1
		cmp	eax, 0FFFE0000h
		mov	[edx+18h], ecx
		jz	short loc_68D8C516
		cmp	eax, 0FEFFh
		jnz	loc_68D8C44C
		mov	dword ptr [ebp+0], 0
		mov	ax, 4
		jmp	short loc_68D8C49F
; ---------------------------------------------------------------------------

loc_68D8C4E2:				; CODE XREF: sub_68D8C3F0+7Ej
		mov	[edi], ax
		mov	eax, 4
		mov	dword ptr [ebp+0], 1
		jmp	short loc_68D8C49F
; ---------------------------------------------------------------------------

loc_68D8C4F3:				; CODE XREF: sub_68D8C3F0+44j
		movzx	eax, byte ptr [ebx+3]
		movzx	ecx, byte ptr [ebx+2]
		shl	eax, 18h
		shl	ecx, 10h
		or	eax, ecx
		movzx	ecx, byte ptr [ebx]
		or	eax, ecx
		movzx	ecx, byte ptr [ebx+1]
		shl	ecx, 8
		or	eax, ecx
		jmp	loc_68D8C446
; ---------------------------------------------------------------------------

loc_68D8C516:				; CODE XREF: sub_68D8C3F0+D8j
		or	esi, 3
		mov	eax, 4
		mov	[edx+18h], esi
		mov	dword ptr [ebp+0], 0
		jmp	loc_68D8C49F
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C530:				; CODE XREF: sub_68D8C3F0+50j
		movzx	ecx, byte ptr [ebx]
		movzx	eax, byte ptr [ebx+3]
		shl	ecx, 18h
		or	eax, ecx
		movzx	ecx, byte ptr [ebx+1]
		shl	ecx, 10h
		or	eax, ecx
		movzx	ecx, byte ptr [ebx+2]
		shl	ecx, 8
		or	eax, ecx
		jmp	loc_68D8C446
; ---------------------------------------------------------------------------

loc_68D8C553:				; CODE XREF: sub_68D8C3F0+38j
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8C49F
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C570:				; CODE XREF: sub_68D8C3F0+68j
					; sub_68D8C3F0+73j
		call	ds:_errno
		mov	dword ptr [eax], 2Ah
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8C49F
sub_68D8C3F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8C590	proc near		; DATA XREF: sub_68D8D040+132o

var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_4], ebp
		mov	ecx, [eax+18h]
		mov	edx, [eax]
		test	cl, 2
		jz	short loc_68D8C5C0
		xor	edx, 1

loc_68D8C5C0:				; CODE XREF: sub_68D8C590+2Bj
		cmp	[esp+2Ch+arg_8], 1
		jle	loc_68D8C730
		cmp	edx, 4B0h
		jz	short loc_68D8C651
		cmp	edx, 4B1h
		jz	loc_68D8C6B0

loc_68D8C5DF:				; CODE XREF: sub_68D8C590+D7j
					; sub_68D8C590+136j
		test	byte ptr [eax+4], 1
		jnz	short loc_68D8C623

loc_68D8C5E5:				; CODE XREF: sub_68D8C590+96j
		movzx	ebp, word ptr [ebx]

loc_68D8C5E8:				; CODE XREF: sub_68D8C590+B2j
		lea	eax, [ebp+2400h]
		cmp	ax, 3FFh
		jbe	loc_68D8C716
		add	bp, 2800h
		cmp	bp, 3FFh
		jbe	short loc_68D8C670
		mov	dword ptr [edi], 1
		mov	eax, 2

loc_68D8C60F:				; CODE XREF: sub_68D8C590+BFj
					; sub_68D8C590+114j ...
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8C623:				; CODE XREF: sub_68D8C590+53j
		test	cl, 1
		jnz	short loc_68D8C5E5
		mov	ebp, ecx
		or	ebp, 1
		mov	[eax+18h], ebp
		movzx	ebp, word ptr [ebx]
		cmp	bp, 0FFFEh
		jz	loc_68D8C6D0
		cmp	bp, 0FEFFh
		jnz	short loc_68D8C5E8
		mov	dword ptr [edi], 0
		mov	eax, 2
		jmp	short loc_68D8C60F
; ---------------------------------------------------------------------------

loc_68D8C651:				; CODE XREF: sub_68D8C590+41j
		movzx	ebp, byte ptr [esi+1]
		shl	ebp, 8
		mov	[esp+2Ch+var_20], ebp
		movzx	ebp, byte ptr [esi]
		or	bp, word ptr [esp+2Ch+var_20]
		mov	[ebx], bp
		jmp	loc_68D8C5DF
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C670:				; CODE XREF: sub_68D8C590+72j
		cmp	[esp+2Ch+arg_8], 3
		jle	loc_68D8C730
		cmp	edx, 4B0h
		jz	short loc_68D8C6E6
		cmp	edx, 4B1h
		jz	short loc_68D8C700
		movzx	eax, word ptr [ebx+2]

loc_68D8C68F:				; CODE XREF: sub_68D8C590+167j
					; sub_68D8C590+181j
		add	ax, 2400h
		cmp	ax, 3FFh
		ja	short loc_68D8C716
		mov	dword ptr [edi], 2
		mov	eax, 4
		jmp	loc_68D8C60F
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C6B0:				; CODE XREF: sub_68D8C590+49j
		movzx	ebp, byte ptr [esi]
		shl	ebp, 8
		mov	[esp+2Ch+var_20], ebp
		movzx	ebp, byte ptr [esi+1]
		or	bp, word ptr [esp+2Ch+var_20]
		mov	[ebx], bp
		jmp	loc_68D8C5DF
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C6D0:				; CODE XREF: sub_68D8C590+A7j
		or	ecx, 3
		mov	[eax+18h], ecx
		mov	eax, 2
		mov	dword ptr [edi], 0
		jmp	loc_68D8C60F
; ---------------------------------------------------------------------------

loc_68D8C6E6:				; CODE XREF: sub_68D8C590+F1j
		movzx	edx, byte ptr [esi+3]
		movzx	eax, byte ptr [esi+2]
		shl	edx, 8
		or	eax, edx
		mov	[ebx+2], ax
		jmp	short loc_68D8C68F
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C700:				; CODE XREF: sub_68D8C590+F9j
		movzx	edx, byte ptr [esi+2]
		movzx	eax, byte ptr [esi+3]
		shl	edx, 8
		or	eax, edx
		mov	[ebx+2], ax
		jmp	loc_68D8C68F
; ---------------------------------------------------------------------------

loc_68D8C716:				; CODE XREF: sub_68D8C590+62j
					; sub_68D8C590+107j
		call	ds:_errno
		mov	dword ptr [eax], 2Ah
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8C60F
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C730:				; CODE XREF: sub_68D8C590+35j
					; sub_68D8C590+E5j
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8C60F
sub_68D8C590	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	[esp+10h], ebx
		mov	ebx, [esp+20h]
		mov	[esp+14h], esi
		mov	[esp+18h], edi
		mov	eax, [ebx]
		mov	[esp], eax
		call	dword ptr [ebx+4]
		mov	esi, eax
		call	dword ptr [ebx+0Ch]
		mov	edi, [eax]
		mov	eax, [ebx+50h]
		test	eax, eax
		jz	short loc_68D8C785
		mov	[esp], eax
		call	ds:FreeLibrary
		sub	esp, 4

loc_68D8C785:				; CODE XREF: .text:68D8C777j
		mov	[esp], ebx
		call	free
		call	ds:_errno
		mov	[eax], edi
		mov	eax, esi
		mov	ebx, [esp+10h]
		mov	esi, [esp+14h]
		mov	edi, [esp+18h]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8C7B0	proc near		; CODE XREF: sub_68D8D040+370p
					; sub_68D8D040:loc_68D8D3C8p

lpLibFileName	= dword	ptr -1Ch
lpProcName	= dword	ptr -18h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 1Ch
		mov	ecx, ds:dword_68D9616C
		mov	eax, 1
		mov	[esp+1Ch+var_8], ebx
		mov	[esp+1Ch+var_4], esi
		test	ecx, ecx
		jz	short loc_68D8C7D6

loc_68D8C7CA:				; CODE XREF: sub_68D8C7B0+3Cj
					; sub_68D8C7B0+C7j
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8C7D6:				; CODE XREF: sub_68D8C7B0+18j
		mov	[esp+1Ch+lpLibFileName], offset	LibFileName ; "mlang.dll"
		call	ds:LoadLibraryA
		mov	ebx, eax
		sub	esp, 4
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68D8C7CA
		mov	esi, ds:GetProcAddress
		mov	[esp+1Ch+lpProcName], offset aConvertinetstr ; "ConvertINetString"
		mov	[esp+1Ch+lpLibFileName], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		mov	ds:dword_68D9616C, eax
		mov	[esp+1Ch+lpProcName], offset aConvertinetmul ; "ConvertINetMultiByteToUnicode"
		mov	[esp+1Ch+lpLibFileName], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		mov	ds:dword_68D96170, eax
		mov	[esp+1Ch+lpProcName], offset aConvertinetuni ; "ConvertINetUnicodeToMultiByte"
		mov	[esp+1Ch+lpLibFileName], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		mov	ds:dword_68D96174, eax
		mov	[esp+1Ch+lpProcName], offset aIsconvertinets ; "IsConvertINetStringAvailable"
		mov	[esp+1Ch+lpLibFileName], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		mov	ds:dword_68D96178, eax
		mov	[esp+1Ch+lpProcName], offset aLcidtorfc1766a ; "LcidToRfc1766A"
		mov	[esp+1Ch+lpLibFileName], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		mov	ds:dword_68D9617C, eax
		mov	[esp+1Ch+lpProcName], offset aRfc1766tolcida ; "Rfc1766ToLcidA"
		mov	[esp+1Ch+lpLibFileName], ebx ; hModule
		call	esi ; GetProcAddress
		mov	ds:dword_68D96180, eax
		sub	esp, 8
		mov	eax, 1
		jmp	loc_68D8C7CA
sub_68D8C7B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8C880(int,	int, int, void *, int)
sub_68D8C880	proc near		; DATA XREF: sub_68D8D040+3A0o

Dst		= dword	ptr -4Ch
Src		= dword	ptr -48h
Size		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= byte ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 4Ch
		lea	eax, [esp+4Ch+var_10]
		mov	[esp+4Ch+var_38], eax
		lea	eax, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_C], ebx
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_40], eax
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_8], esi
		lea	esi, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_4], edi
		mov	edi, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_10], 10h
		mov	[esp+4Ch+var_3C], esi
		mov	[esp+4Ch+Size],	eax
		mov	eax, [ebx]
		mov	[esp+4Ch+Src], eax
		lea	eax, [ebx+18h]
		mov	[esp+4Ch+Dst], eax
		call	ds:dword_68D96174
		sub	esp, 18h
		test	eax, eax
		jnz	short loc_68D8C924
		cmp	edi, [esp+4Ch+arg_8]
		jnz	short loc_68D8C924
		mov	eax, [esp+4Ch+var_10]
		cmp	eax, [esp+4Ch+arg_10]
		jg	short loc_68D8C945
		mov	[esp+4Ch+Size],	eax
		mov	[esp+4Ch+Src], esi
		mov	[esp+4Ch+Dst], ebx
		call	dword ptr [ebx+10h]
		cmp	eax, [esp+4Ch+var_10]
		jnz	short loc_68D8C924
		mov	[esp+4Ch+Size],	eax ; Size
		mov	eax, [esp+4Ch+arg_C]
		mov	[esp+4Ch+Src], esi ; Src
		mov	[esp+4Ch+Dst], eax ; Dst
		call	memcpy
		mov	eax, [esp+4Ch+var_10]

loc_68D8C914:				; CODE XREF: sub_68D8C880+D6j
		mov	ebx, [esp+4Ch+var_C]
		mov	esi, [esp+4Ch+var_8]
		mov	edi, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8C924:				; CODE XREF: sub_68D8C880+56j
					; sub_68D8C880+5Cj ...
		call	ds:_errno
		mov	dword ptr [eax], 2Ah
		mov	eax, 0FFFFFFFFh
		mov	ebx, [esp+4Ch+var_C]
		mov	esi, [esp+4Ch+var_8]
		mov	edi, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8C945:				; CODE XREF: sub_68D8C880+66j
		call	ds:_errno
		mov	dword ptr [eax], 7
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D8C914
sub_68D8C880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8C960	proc near		; DATA XREF: sub_68D8D040+468o

Dst		= dword	ptr -2Ch
Src		= dword	ptr -28h
Size		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], ebx
		xor	ebx, ebx
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_4], ebp
		mov	eax, [edx+18h]
		test	eax, eax
		jz	short loc_68D8C9A9
		test	al, al
		movzx	eax, ah
		setnz	cl
		test	eax, eax
		mov	esi, ecx
		movzx	ecx, cl
		jnz	short loc_68D8C9C0

loc_68D8C995:				; CODE XREF: sub_68D8C960+66j
		cmp	ecx, [esp+2Ch+arg_8]
		jg	short loc_68D8CA00
		mov	ecx, esi
		xor	ebp, ebp
		xor	ebx, ebx
		test	cl, cl
		jnz	short loc_68D8C9C8
		test	eax, eax
		jnz	short loc_68D8C9D9

loc_68D8C9A9:				; CODE XREF: sub_68D8C960+22j
					; sub_68D8C960+77j ...
		mov	eax, ebx
		mov	esi, [esp+2Ch+var_C]
		mov	ebx, [esp+2Ch+var_10]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8C9C0:				; CODE XREF: sub_68D8C960+33j
		add	ecx, Size
		jmp	short loc_68D8C995
; ---------------------------------------------------------------------------

loc_68D8C9C8:				; CODE XREF: sub_68D8C960+43j
		mov	byte ptr [edi],	0Fh
		movzx	eax, byte ptr [edx+19h]
		mov	bp, 1
		mov	bl, 1
		test	eax, eax
		jz	short loc_68D8C9A9

loc_68D8C9D9:				; CODE XREF: sub_68D8C960+47j
		mov	eax, Size
		add	edi, ebp
		mov	[esp+2Ch+Dst], edi ; Dst
		mov	[esp+2Ch+Size],	eax ; Size
		mov	eax, Str2
		mov	[esp+2Ch+Src], eax ; Src
		call	memcpy
		add	ebx, Size
		jmp	short loc_68D8C9A9
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CA00:				; CODE XREF: sub_68D8C960+39j
		call	ds:_errno
		mov	ebx, 0FFFFFFFFh
		mov	dword ptr [eax], 7
		jmp	short loc_68D8C9A9
sub_68D8C960	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8CA20	proc near		; CODE XREF: sub_68D8CA20+109p
					; DATA XREF: sub_68D8D040+3C4o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], esi
		mov	edx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_C], ebx
		mov	esi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_4], edi
		mov	ecx, [esp+2Ch+arg_10]
		test	byte ptr [eax+4], 1
		jz	short loc_68D8CA51
		mov	ebx, [eax+18h]
		test	bl, 1
		jz	loc_68D8CAE3

loc_68D8CA51:				; CODE XREF: sub_68D8CA20+23j
		cmp	ecx, 3
		jle	loc_68D8CB80
		movzx	ecx, word ptr [esi]
		lea	edi, [ecx+2800h]
		movzx	ebx, cx
		cmp	di, 3FFh
		jbe	short loc_68D8CA98
		mov	ecx, [eax]
		cmp	ecx, 2EE0h
		jz	short loc_68D8CABC

loc_68D8CA77:				; CODE XREF: sub_68D8CA20+9Aj
		cmp	ecx, 2EE1h
		mov	eax, 4
		jz	loc_68D8CB51

loc_68D8CA88:				; CODE XREF: sub_68D8CA20+171j
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8CA98:				; CODE XREF: sub_68D8CA20+4Bj
		movzx	ebx, word ptr [esi+2]
		and	ecx, 3FFh
		shl	ecx, 0Ah
		and	ebx, 3FFh
		lea	ebx, [ecx+ebx+10000h]
		mov	ecx, [eax]
		cmp	ecx, 2EE0h
		jnz	short loc_68D8CA77

loc_68D8CABC:				; CODE XREF: sub_68D8CA20+55j
		mov	[edx], bl
		movzx	eax, bh
		shr	ebx, 10h
		mov	[edx+1], al
		mov	eax, 4
		mov	[edx+2], bl
		mov	byte ptr [edx+3], 0
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8CAE3:				; CODE XREF: sub_68D8CA20+2Bj
		or	ebx, 1
		cmp	ecx, 3
		mov	[eax+18h], ebx
		jle	loc_68D8CB80
		mov	ebx, [eax]
		cmp	ebx, 2EE0h
		jz	loc_68D8CB96
		cmp	ebx, 2EE1h
		jz	loc_68D8CBA3

loc_68D8CB0C:				; CODE XREF: sub_68D8CA20+17Ej
					; sub_68D8CA20+18Bj
		add	edx, 4
		sub	ecx, 4
		mov	[esp+2Ch+var_20], edx
		mov	edx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_1C], ecx
		mov	[esp+2Ch+var_2C], eax
		mov	[esp+2Ch+var_24], edx
		call	sub_68D8CA20
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		mov	edx, eax
		cmp	edx, 0FFFFFFFFh
		setnz	dl
		add	esp, 2Ch
		movzx	edx, dl
		lea	eax, [eax+4]
		sub	edx, 1
		or	eax, edx
		retn
; ---------------------------------------------------------------------------

loc_68D8CB51:				; CODE XREF: sub_68D8CA20+62j
		mov	eax, ebx
		shr	eax, 10h
		mov	[edx+1], al
		movzx	eax, bh
		mov	[edx+2], al
		mov	eax, 4
		mov	byte ptr [edx],	0
		mov	[edx+3], bl
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CB80:				; CODE XREF: sub_68D8CA20+34j
					; sub_68D8CA20+CCj
		call	ds:_errno
		mov	dword ptr [eax], 7
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8CA88
; ---------------------------------------------------------------------------

loc_68D8CB96:				; CODE XREF: sub_68D8CA20+DAj
		mov	ebx, ds:dword_68D947D3
		mov	[edx], ebx
		jmp	loc_68D8CB0C
; ---------------------------------------------------------------------------

loc_68D8CBA3:				; CODE XREF: sub_68D8CA20+E6j
		mov	ebx, ds:dword_68D947D8
		mov	[edx], ebx
		jmp	loc_68D8CB0C
sub_68D8CA20	endp


; =============== S U B	R O U T	I N E =======================================


sub_68D8CBB0	proc near		; CODE XREF: sub_68D8CBB0+E4p
					; DATA XREF: sub_68D8D040+139o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_C], ebx
		mov	ecx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_8], esi
		mov	ebx, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_4], edi
		mov	esi, [esp+2Ch+arg_C]
		test	byte ptr [edx+4], 1
		jz	short loc_68D8CBDC
		mov	eax, [edx+18h]
		test	al, 1
		jz	short loc_68D8CC50

loc_68D8CBDC:				; CODE XREF: sub_68D8CBB0+23j
		cmp	ebx, 1
		jle	loc_68D8CD40
		mov	eax, [edx]
		cmp	eax, 4B0h
		jz	loc_68D8CCC0
		cmp	eax, 4B1h
		jz	loc_68D8CCD4

loc_68D8CBFD:				; CODE XREF: sub_68D8CBB0+11Fj
					; sub_68D8CBB0+133j
		movzx	edi, word ptr [ecx]
		mov	eax, 2
		add	di, 2800h
		cmp	di, 3FFh
		ja	short loc_68D8CC39
		cmp	ebx, 3
		jle	loc_68D8CD40
		mov	edx, [edx]
		cmp	edx, 4B0h
		jz	loc_68D8CD10
		cmp	edx, 4B1h
		mov	eax, 4
		jz	loc_68D8CCE8

loc_68D8CC39:				; CODE XREF: sub_68D8CBB0+5Fj
					; sub_68D8CBB0+1A1j
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CC50:				; CODE XREF: sub_68D8CBB0+2Aj
		or	eax, 1
		cmp	ebx, 1
		mov	[edx+18h], eax
		jle	loc_68D8CD40
		mov	eax, [edx]
		cmp	eax, 4B0h
		jz	loc_68D8CD33
		cmp	eax, 4B1h
		jz	loc_68D8CD56

loc_68D8CC77:				; CODE XREF: sub_68D8CBB0+188j
					; sub_68D8CBB0+1ABj
		mov	eax, [esp+2Ch+arg_8]
		sub	ebx, 2
		add	esi, 2
		mov	[esp+2Ch+var_1C], ebx
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_2C], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ecx
		call	sub_68D8CBB0
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		mov	edx, eax
		cmp	edx, 0FFFFFFFFh
		setnz	dl
		add	esp, 2Ch
		movzx	edx, dl
		lea	eax, [eax+2]
		sub	edx, 1
		or	eax, edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CCC0:				; CODE XREF: sub_68D8CBB0+3Cj
		movzx	eax, word ptr [ecx]
		mov	[esi], al
		movzx	eax, word ptr [ecx]
		shr	ax, 8
		mov	[esi+1], al
		jmp	loc_68D8CBFD
; ---------------------------------------------------------------------------

loc_68D8CCD4:				; CODE XREF: sub_68D8CBB0+47j
		movzx	eax, word ptr [ecx]
		shr	ax, 8
		mov	[esi], al
		movzx	eax, word ptr [ecx]
		mov	[esi+1], al
		jmp	loc_68D8CBFD
; ---------------------------------------------------------------------------

loc_68D8CCE8:				; CODE XREF: sub_68D8CBB0+83j
		movzx	eax, byte ptr [ecx+3]
		mov	[esi+2], al
		movzx	eax, word ptr [ecx+2]
		mov	[esi+3], al
		mov	eax, 4
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CD10:				; CODE XREF: sub_68D8CBB0+72j
		movzx	eax, word ptr [ecx+2]
		mov	[esi+2], al
		movzx	eax, byte ptr [ecx+3]
		mov	[esi+3], al
		mov	eax, 4
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8CD33:				; CODE XREF: sub_68D8CBB0+B6j
		mov	word ptr [esi],	0FEFFh
		jmp	loc_68D8CC77
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CD40:				; CODE XREF: sub_68D8CBB0+2Fj
					; sub_68D8CBB0+64j ...
		call	ds:_errno
		mov	dword ptr [eax], 7
		mov	eax, 0FFFFFFFFh
		jmp	loc_68D8CC39
; ---------------------------------------------------------------------------

loc_68D8CD56:				; CODE XREF: sub_68D8CBB0+C1j
		mov	word ptr [esi],	0FFFEh
		jmp	loc_68D8CC77
sub_68D8CBB0	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8CD60(int,	void *,	size_t MaxCount, int, int)
sub_68D8CD60	proc near		; DATA XREF: sub_68D8D040+45Ao

Dst		= dword	ptr -6Ch
Src		= dword	ptr -68h
Size		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
Str1		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= byte ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
MaxCount	= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edi, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_24], 0
		mov	ecx, [esp+6Ch+MaxCount]
		movzx	edx, byte ptr [edi]
		cmp	dl, 1Bh
		jz	loc_68D8CEC0
		cmp	dl, 0Eh
		jz	loc_68D8CFA6
		cmp	dl, 0Fh
		jz	loc_68D8CF64
		mov	ebx, [esp+6Ch+arg_0]
		cmp	dl, 1Fh
		mov	eax, [ebx+18h]
		ja	loc_68D8CF45
		mov	eax, offset Str2
		mov	[esp+6Ch+var_44], 0
		mov	[esp+6Ch+var_40], 0

loc_68D8CDBA:				; CODE XREF: sub_68D8CD60+1FFj
		mov	ebx, [eax+8]
		cmp	ecx, ebx
		jl	loc_68D8CFD4
		test	ebx, ebx
		jle	short loc_68D8CDE6
		xor	ecx, ecx
		test	dl, dl
		jns	short loc_68D8CDDF
		nop
		jmp	loc_68D8CEA0
; ---------------------------------------------------------------------------

loc_68D8CDD5:				; CODE XREF: sub_68D8CD60+84j
		cmp	byte ptr [edi+ecx], 0
		js	loc_68D8CEA0

loc_68D8CDDF:				; CODE XREF: sub_68D8CD60+6Dj
		add	ecx, 1
		cmp	ebx, ecx
		jg	short loc_68D8CDD5

loc_68D8CDE6:				; CODE XREF: sub_68D8CD60+67j
		mov	esi, [eax+4]
		lea	ebp, [esp+6Ch+var_34]
		mov	eax, [eax]
		mov	[esp+6Ch+Dst], ebp ; Dst
		mov	[esp+6Ch+Size],	esi ; Size
		mov	[esp+6Ch+Src], eax ; Src
		call	memcpy
		cmp	[esp+6Ch+var_44], 1
		jz	loc_68D8CFEA

loc_68D8CE0A:				; CODE XREF: sub_68D8CD60+2D6j
		lea	eax, [ebp+esi+0]
		mov	[esp+6Ch+Size],	ebx ; Size
		mov	[esp+6Ch+Src], edi ; Src
		mov	[esp+6Ch+Dst], eax ; Dst
		call	memcpy
		mov	edx, [esp+6Ch+arg_0]
		mov	eax, [edx]

loc_68D8CE24:				; CODE XREF: sub_68D8CD60+2B5j
		mov	edx, [esp+6Ch+arg_10]
		add	esi, ebx
		mov	[esp+6Ch+Src], eax
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_20], esi
		mov	[esp+6Ch+Size],	ebp
		mov	[esp+6Ch+var_58], edx
		mov	edx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+Dst], eax
		mov	[esp+6Ch+var_5C], edx
		lea	edx, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_60], edx
		call	ds:dword_68D96170
		sub	esp, 18h
		test	eax, eax
		jnz	short loc_68D8CEA0
		cmp	esi, [esp+6Ch+var_20]
		jnz	short loc_68D8CEA0
		mov	edx, [esp+6Ch+arg_C]
		movzx	eax, byte ptr [edi]
		cmp	[edx], ax
		jz	loc_68D8CF90
		mov	eax, [esp+6Ch+arg_0]
		mov	edx, [eax+18h]

loc_68D8CE7E:				; CODE XREF: sub_68D8CD60+241j
		mov	eax, [esp+6Ch+var_40]
		mov	esi, ebx
		shl	eax, 8
		or	eax, [esp+6Ch+var_44]
		cmp	edx, eax
		jz	short loc_68D8CEB1
		mov	edx, [esp+6Ch+arg_0]
		mov	[edx+18h], eax
		add	esp, 5Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8CEA0:				; CODE XREF: sub_68D8CD60+70j
					; sub_68D8CD60+79j ...
		call	ds:_errno
		mov	esi, 0FFFFFFFFh
		mov	dword ptr [eax], 2Ah

loc_68D8CEB1:				; CODE XREF: sub_68D8CD60+12Dj
					; sub_68D8CD60+1E0j ...
		add	esp, 5Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CEC0:				; CODE XREF: sub_68D8CD60+1Dj
		mov	eax, Str2
		test	eax, eax
		jz	short loc_68D8CEA0
		mov	[esp+6Ch+Str1],	edi
		mov	ebx, offset off_68D90190
		mov	ebp, offset Str2
		mov	edi, ecx
		jmp	short loc_68D8CF07
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CEE0:				; CODE XREF: sub_68D8CD60+1ACj
		mov	[esp+6Ch+Src], eax ; Str2
		mov	eax, [esp+6Ch+Str1]
		mov	[esp+6Ch+Size],	edi ; MaxCount
		mov	[esp+6Ch+Dst], eax ; Str1
		call	strncmp
		test	eax, eax
		jz	loc_68D8CFD4

loc_68D8CEFC:				; CODE XREF: sub_68D8CD60+1C4j
		mov	eax, [ebx]
		mov	ebp, ebx
		add	ebx, 10h
		test	eax, eax
		jz	short loc_68D8CEA0

loc_68D8CF07:				; CODE XREF: sub_68D8CD60+179j
		mov	esi, [ebp+4]
		cmp	esi, edi
		jg	short loc_68D8CEE0
		mov	edx, [esp+6Ch+Str1]
		mov	[esp+6Ch+Size],	esi ; MaxCount
		mov	[esp+6Ch+Src], eax ; Str2
		mov	[esp+6Ch+Dst], edx ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_68D8CEFC
		mov	eax, [ebp+0Ch]
		mov	ebx, [esp+6Ch+arg_0]
		shl	eax, 8
		mov	[ebx+18h], eax
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 0
		jmp	loc_68D8CEB1
; ---------------------------------------------------------------------------

loc_68D8CF45:				; CODE XREF: sub_68D8CD60+3Fj
		movzx	ebx, ah
		and	eax, 0FFh
		mov	[esp+6Ch+var_44], eax
		mov	eax, ebx
		shl	eax, 4
		mov	[esp+6Ch+var_40], ebx
		add	eax, offset Str2
		jmp	loc_68D8CDBA
; ---------------------------------------------------------------------------

loc_68D8CF64:				; CODE XREF: sub_68D8CD60+2Fj
		mov	eax, [esp+6Ch+arg_0]
		mov	esi, 1
		mov	edx, [esp+6Ch+arg_10]
		and	dword ptr [eax+18h], 0FF00h
		mov	eax, esi
		mov	dword ptr [edx], 0
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8CF90:				; CODE XREF: sub_68D8CD60+111j
		mov	eax, [esp+6Ch+arg_0]
		mov	esi, [eax+18h]
		test	esi, esi
		jnz	loc_68D8CEA0
		xor	edx, edx
		jmp	loc_68D8CE7E
; ---------------------------------------------------------------------------

loc_68D8CFA6:				; CODE XREF: sub_68D8CD60+26j
		mov	edx, [esp+6Ch+arg_0]
		mov	esi, 1
		mov	ebx, [esp+6Ch+arg_10]
		mov	eax, [edx+18h]
		mov	dword ptr [ebx], 0
		and	eax, 0FF00h
		or	eax, 1
		mov	[edx+18h], eax
		add	esp, 5Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8CFD4:				; CODE XREF: sub_68D8CD60+5Fj
					; sub_68D8CD60+196j
		call	ds:_errno
		mov	esi, 0FFFFFFFFh
		mov	dword ptr [eax], 16h
		jmp	loc_68D8CEB1
; ---------------------------------------------------------------------------

loc_68D8CFEA:				; CODE XREF: sub_68D8CD60+A4j
		mov	byte ptr [ebp+esi+0], 0Eh
		add	esi, 1
		lea	eax, [ebp+esi+0]
		mov	[esp+6Ch+Size],	ebx ; Size
		mov	[esp+6Ch+Src], edi ; Src
		mov	[esp+6Ch+Dst], eax ; Dst
		call	memcpy
		mov	edx, [esp+6Ch+arg_0]
		mov	eax, [edx]
		lea	edx, [eax-0C42Ch]
		cmp	edx, 2
		ja	loc_68D8CE24
		mov	esi, dword_68D901A4
		mov	eax, Src
		mov	[esp+6Ch+Dst], ebp ; Dst
		mov	[esp+6Ch+Size],	esi ; Size
		mov	[esp+6Ch+Src], eax ; Src
		call	memcpy
		jmp	loc_68D8CE0A
sub_68D8CD60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8D040	proc near		; CODE XREF: sub_68D8DA50+151p
					; sub_68D8DA50+294p

Str		= dword	ptr -5Ch
Src		= dword	ptr -58h
Size		= dword	ptr -54h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
CPInfo		= _cpinfo ptr -30h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		mov	[esp+5Ch+Str], eax ; Str
		mov	[esp+5Ch+var_48], edx
		call	strlen
		mov	esi, eax
		lea	eax, [eax+1]
		mov	[esp+5Ch+Str], eax ; Size
		call	malloc
		mov	ebp, eax
		xor	eax, eax
		test	ebp, ebp
		jz	loc_68D8D1D5
		mov	[esp+5Ch+Size],	esi ; Size
		mov	[esp+5Ch+Src], ebx ; Src
		mov	[esp+5Ch+Str], ebp ; Dst
		call	memcpy
		mov	byte ptr [ebp+esi+0], 0
		mov	[esp+5Ch+var_40], 0
		mov	[esp+5Ch+var_44], 1

loc_68D8D093:				; CODE XREF: sub_68D8D040+A3j
		mov	[esp+5Ch+Str], ebp ; Str
		call	strlen
		lea	ebx, [ebp+eax+0]
		nop

loc_68D8D0A0:				; CODE XREF: sub_68D8D040+6Aj
					; sub_68D8D040+7Aj
		sub	ebx, 1
		cmp	ebx, ebp
		jb	short loc_68D8D105
		cmp	byte ptr [ebx],	2Fh
		jnz	short loc_68D8D0A0
		mov	esi, ebx
		mov	edi, offset asc_68D947F6 ; "//"
		mov	ecx, 2
		repe cmpsb
		jnz	short loc_68D8D0A0
		test	ebx, ebx
		jz	short loc_68D8D105
		lea	esi, [ebx+2]
		mov	[esp+5Ch+Src], offset aNocompat	; "nocompat"
		mov	[esp+5Ch+Str], esi ; Str1
		call	ds:_stricmp
		test	eax, eax
		jnz	short loc_68D8D0E5
		mov	[esp+5Ch+var_44], 0

loc_68D8D0E0:				; CODE XREF: sub_68D8D040+C3j
					; sub_68D8D040+1B0j ...
		mov	byte ptr [ebx],	0
		jmp	short loc_68D8D093
; ---------------------------------------------------------------------------

loc_68D8D0E5:				; CODE XREF: sub_68D8D040+96j
		mov	[esp+5Ch+Src], offset aTranslit	; "translit"
		mov	[esp+5Ch+Str], esi ; Str1
		call	ds:_stricmp
		test	eax, eax
		jnz	loc_68D8D1DD
		or	[esp+5Ch+var_40], 2
		jmp	short loc_68D8D0E0
; ---------------------------------------------------------------------------

loc_68D8D105:				; CODE XREF: sub_68D8D040+65j
					; sub_68D8D040+7Ej
		mov	eax, [esp+5Ch+var_48]
		mov	edx, [esp+5Ch+var_40]
		mov	dword ptr [eax+18h], 0
		mov	[eax+4], edx
		mov	dword ptr [eax+10h], 0
		mov	dword ptr [eax+14h], 0
		mov	dword ptr [eax+1Ch], 0
		cmp	byte ptr [ebp+0], 0
		jz	loc_68D8D200
		mov	edi, offset aChar ; "char"
		mov	ecx, 5
		mov	esi, ebp
		repe cmpsb
		jz	loc_68D8D200
		mov	edi, offset aWchar_t ; "wchar_t"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	loc_68D8D2F1
		mov	edx, [esp+5Ch+var_48]
		mov	dword ptr [edx], 4B0h

loc_68D8D168:				; CODE XREF: sub_68D8D040+1D5j
		mov	eax, [esp+5Ch+var_48]
		mov	ebx, ds:_stricmp
		mov	dword ptr [eax+8], offset sub_68D8C590
		mov	dword ptr [eax+0Ch], offset sub_68D8CBB0
		mov	[esp+5Ch+Src], offset aUtf16 ; "UTF-16"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _stricmp
		test	eax, eax
		jnz	loc_68D8D367

loc_68D8D195:				; CODE XREF: sub_68D8D040+336j
					; sub_68D8D040+34Bj ...
		mov	edx, [esp+5Ch+var_48]
		or	dword ptr [edx+4], 1

loc_68D8D19D:				; CODE XREF: sub_68D8D040+270j
					; sub_68D8D040+2ACj ...
		mov	edi, [esp+5Ch+var_44]
		test	edi, edi
		jz	short loc_68D8D1C8
		mov	edx, [esp+5Ch+var_48]
		mov	eax, [edx]
		cmp	eax, 0C42Eh
		jle	loc_68D8D34C
		cmp	eax, 0CADCh
		jnz	short loc_68D8D1C8

loc_68D8D1BD:				; CODE XREF: sub_68D8D040+430j
		mov	eax, [esp+5Ch+var_48]
		mov	dword ptr [eax+1Ch], offset dword_68D90080

loc_68D8D1C8:				; CODE XREF: sub_68D8D040+163j
					; sub_68D8D040+17Bj ...
		mov	[esp+5Ch+Str], ebp ; Memory
		call	free
		mov	eax, 1

loc_68D8D1D5:				; CODE XREF: sub_68D8D040+28j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8D1DD:				; CODE XREF: sub_68D8D040+B8j
		mov	[esp+5Ch+Src], offset aIgnore ;	"ignore"
		mov	[esp+5Ch+Str], esi ; Str1
		call	ds:_stricmp
		test	eax, eax
		jnz	loc_68D8D0E0
		or	[esp+5Ch+var_40], 4
		jmp	loc_68D8D0E0
; ---------------------------------------------------------------------------

loc_68D8D200:				; CODE XREF: sub_68D8D040+F0j
					; sub_68D8D040+104j
		call	ds:GetACP

loc_68D8D206:				; CODE XREF: sub_68D8D040+307j
					; sub_68D8D040+487j ...
		mov	edx, [esp+5Ch+var_48]
		mov	[edx], eax
		lea	edx, [eax-4B0h]
		cmp	edx, 1
		jbe	loc_68D8D168
		lea	edx, [eax-2EE0h]
		cmp	edx, 1
		jbe	loc_68D8D3F3
		cmp	eax, 0FDE9h
		jz	loc_68D8D2D3
		lea	edx, [eax-0C42Ch]
		cmp	edx, 2
		jbe	loc_68D8D3AB

loc_68D8D244:				; CODE XREF: sub_68D8D040+383j
		cmp	eax, 0CADCh
		jz	loc_68D8D3C8

loc_68D8D24F:				; CODE XREF: sub_68D8D040+47Aj
					; sub_68D8D040+4DEj
		mov	[esp+5Ch+Str], eax ; CodePage
		call	ds:IsValidCodePage
		sub	esp, 4
		test	eax, eax
		jz	short loc_68D8D2B5
		mov	edx, [esp+5Ch+var_48]
		lea	eax, [esp+5Ch+CPInfo]
		mov	[esp+5Ch+Src], eax ; lpCPInfo
		mov	eax, [edx]
		mov	[esp+5Ch+Str], eax ; CodePage
		call	ds:GetCPInfo
		sub	esp, 8
		test	eax, eax
		jz	short loc_68D8D2B5
		mov	eax, [esp+5Ch+var_48]
		mov	dword ptr [eax+8], offset sub_68D8D960
		mov	dword ptr [eax+0Ch], offset loc_68D8D7D0
		mov	eax, [esp+5Ch+CPInfo.MaxCharSize]
		cmp	eax, 1
		jz	loc_68D8D4DC
		cmp	eax, 2
		jz	loc_68D8D4CC
		mov	edx, [esp+5Ch+var_48]
		mov	dword ptr [edx+10h], offset sub_68D8C150
		jmp	loc_68D8D19D
; ---------------------------------------------------------------------------

loc_68D8D2B5:				; CODE XREF: sub_68D8D040+21Dj
					; sub_68D8D040+23Bj
		mov	[esp+5Ch+Str], ebp ; Memory
		call	free
		call	ds:_errno
		mov	dword ptr [eax], 16h
		add	esp, 4Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8D2D3:				; CODE XREF: sub_68D8D040+1EFj
		mov	eax, [esp+5Ch+var_48]
		mov	dword ptr [eax+8], offset sub_68D8D960
		mov	dword ptr [eax+0Ch], offset loc_68D8D7D0
		mov	dword ptr [eax+10h], offset sub_68D8C340
		jmp	loc_68D8D19D
; ---------------------------------------------------------------------------

loc_68D8D2F1:				; CODE XREF: sub_68D8D040+118j
		mov	ebx, ds:_strnicmp
		mov	[esp+5Ch+Size],	2 ; MaxCount
		mov	[esp+5Ch+Src], offset aCp ; "cp"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _strnicmp
		test	eax, eax
		jz	short loc_68D8D33C
		movzx	eax, byte ptr [ebp+0]
		sub	eax, 30h
		cmp	al, 9
		jbe	loc_68D8D4BF
		mov	[esp+5Ch+Size],	2 ; MaxCount
		mov	[esp+5Ch+Src], offset aXx ; "xx"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _strnicmp
		test	eax, eax
		jnz	loc_68D8D4EC

loc_68D8D33C:				; CODE XREF: sub_68D8D040+2CEj
		lea	eax, [ebp+2]
		mov	[esp+5Ch+Str], eax ; Str
		call	atoi
		jmp	loc_68D8D206
; ---------------------------------------------------------------------------

loc_68D8D34C:				; CODE XREF: sub_68D8D040+170j
		cmp	eax, 0C42Ch
		jl	loc_68D8D465
		mov	edx, [esp+5Ch+var_48]
		mov	dword ptr [edx+1Ch], offset dword_68D90080
		jmp	loc_68D8D1C8
; ---------------------------------------------------------------------------

loc_68D8D367:				; CODE XREF: sub_68D8D040+14Fj
		mov	[esp+5Ch+Src], offset aUtf16_0 ; "UTF16"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _stricmp
		test	eax, eax
		jz	loc_68D8D195
		mov	[esp+5Ch+Src], offset aUcs2 ; "UCS-2"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _stricmp
		test	eax, eax
		jz	loc_68D8D195
		mov	[esp+5Ch+Src], offset aUcs2_0 ;	"UCS2"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _stricmp
		test	eax, eax
		jnz	loc_68D8D19D
		jmp	loc_68D8D195
; ---------------------------------------------------------------------------

loc_68D8D3AB:				; CODE XREF: sub_68D8D040+1FEj
		nop
		lea	esi, [esi+0]
		call	sub_68D8C7B0
		test	eax, eax
		jnz	loc_68D8D496
		mov	edx, [esp+5Ch+var_48]
		mov	eax, [edx]
		jmp	loc_68D8D244
; ---------------------------------------------------------------------------

loc_68D8D3C8:				; CODE XREF: sub_68D8D040+209j
		call	sub_68D8C7B0
		test	eax, eax
		jz	loc_68D8D4B4
		mov	eax, [esp+5Ch+var_48]
		mov	dword ptr [eax+8], offset sub_68D8C2A0
		mov	dword ptr [eax+0Ch], offset sub_68D8C880
		mov	dword ptr [eax+10h], offset sub_68D8C1F0
		jmp	loc_68D8D19D
; ---------------------------------------------------------------------------

loc_68D8D3F3:				; CODE XREF: sub_68D8D040+1E4j
		mov	eax, [esp+5Ch+var_48]
		mov	ebx, ds:_stricmp
		mov	dword ptr [eax+8], offset sub_68D8C3F0
		mov	dword ptr [eax+0Ch], offset sub_68D8CA20
		mov	[esp+5Ch+Src], offset aUtf32 ; "UTF-32"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _stricmp
		test	eax, eax
		jz	loc_68D8D195
		mov	[esp+5Ch+Src], offset aUtf32_0 ; "UTF32"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _stricmp
		test	eax, eax
		jz	loc_68D8D195
		mov	[esp+5Ch+Src], offset aUcs4 ; "UCS-4"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _stricmp
		test	eax, eax
		jz	loc_68D8D195
		mov	[esp+5Ch+Src], offset aUcs4_0 ;	"UCS4"
		mov	[esp+5Ch+Str], ebp ; Str1
		call	ebx ; _stricmp
		test	eax, eax
		jnz	loc_68D8D19D
		nop
		jmp	loc_68D8D195
; ---------------------------------------------------------------------------

loc_68D8D465:				; CODE XREF: sub_68D8D040+311j
		cmp	eax, 3A4h
		lea	esi, [esi+0]
		jz	loc_68D8D1BD
		cmp	eax, 51C4h
		nop
		lea	esi, [esi+0]
		jnz	loc_68D8D1C8
		mov	edx, [esp+5Ch+var_48]
		mov	dword ptr [edx+1Ch], offset dword_68D90100
		jmp	loc_68D8D1C8
; ---------------------------------------------------------------------------

loc_68D8D496:				; CODE XREF: sub_68D8D040+377j
		mov	eax, [esp+5Ch+var_48]
		mov	dword ptr [eax+8], offset sub_68D8CD60
		mov	dword ptr [eax+0Ch], offset sub_68D8D580
		mov	dword ptr [eax+14h], offset sub_68D8C960
		jmp	loc_68D8D19D
; ---------------------------------------------------------------------------

loc_68D8D4B4:				; CODE XREF: sub_68D8D040+38Fj
		mov	edx, [esp+5Ch+var_48]
		mov	eax, [edx]
		jmp	loc_68D8D24F
; ---------------------------------------------------------------------------

loc_68D8D4BF:				; CODE XREF: sub_68D8D040+2D9j
		mov	[esp+5Ch+Str], ebp ; Str
		call	atoi
		jmp	loc_68D8D206
; ---------------------------------------------------------------------------

loc_68D8D4CC:				; CODE XREF: sub_68D8D040+25Fj
		mov	eax, [esp+5Ch+var_48]
		mov	dword ptr [eax+10h], offset sub_68D8D530
		jmp	loc_68D8D19D
; ---------------------------------------------------------------------------

loc_68D8D4DC:				; CODE XREF: sub_68D8D040+256j
		mov	edx, [esp+5Ch+var_48]
		mov	dword ptr [edx+10h], offset loc_68D8C0E0
		jmp	loc_68D8D19D
; ---------------------------------------------------------------------------

loc_68D8D4EC:				; CODE XREF: sub_68D8D040+2F6j
		xor	ebx, ebx
		mov	esi, ds:_stricmp
		jmp	short loc_68D8D506
; ---------------------------------------------------------------------------

loc_68D8D4F6:				; CODE XREF: sub_68D8D040+4CFj
		mov	[esp+5Ch+Src], eax ; Str2
		mov	[esp+5Ch+Str], ebp ; Str1
		call	esi ; _stricmp
		test	eax, eax
		jz	short loc_68D8D523
		add	ebx, 1

loc_68D8D506:				; CODE XREF: sub_68D8D040+4B4j
		mov	eax, ds:off_68D95404[ebx*8]
		test	eax, eax
		jnz	short loc_68D8D4F6
		mov	eax, [esp+5Ch+var_48]
		mov	dword ptr [eax], 0FFFFFFFFh
		or	eax, 0FFFFFFFFh
		jmp	loc_68D8D24F
; ---------------------------------------------------------------------------

loc_68D8D523:				; CODE XREF: sub_68D8D040+4C1j
		mov	eax, ds:dword_68D95400[ebx*8]
		jmp	loc_68D8D206
sub_68D8D040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8D530	proc near		; DATA XREF: sub_68D8D040+490o

CodePage	= dword	ptr -1Ch
TestChar	= byte ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		movzx	eax, byte ptr [eax]
		mov	dword ptr [esp+1Ch+TestChar], eax ; TestChar
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax]
		mov	[esp+1Ch+CodePage], eax	; CodePage
		call	ds:IsDBCSLeadByteEx
		sub	esp, 8
		cmp	eax, 1
		sbb	eax, eax
		add	eax, 2
		cmp	eax, [esp+1Ch+arg_8]
		jg	short loc_68D8D562

loc_68D8D55E:				; CODE XREF: sub_68D8D530+43j
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8D562:				; CODE XREF: sub_68D8D530+2Cj
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68D8D55E
sub_68D8D530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8D580(int,	int, int, void *Dst, int)
sub_68D8D580	proc near		; DATA XREF: sub_68D8D040+461o

Str1		= dword	ptr -6Ch
Str2		= dword	ptr -68h
MaxCount	= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_40		= dword	ptr -40h
Src		= byte ptr -34h
var_33		= byte ptr -33h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Dst		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edx, [esp+6Ch+arg_4]
		lea	eax, [esp+6Ch+var_20]
		mov	esi, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_58], eax
		lea	eax, [esp+6Ch+Src]
		mov	ebx, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_5C], eax
		lea	eax, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_20], 10h
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+MaxCount], edx
		mov	eax, [esi]
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+Str2],	eax
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+Str1],	eax
		call	ds:dword_68D96174
		sub	esp, 18h
		test	eax, eax
		jnz	loc_68D8D776
		cmp	ebx, [esp+6Ch+arg_8]
		jnz	loc_68D8D776
		mov	eax, [esp+6Ch+var_20]
		mov	edx, [esp+6Ch+arg_10]
		mov	[esp+6Ch+var_40], eax
		cmp	eax, edx
		jg	loc_68D8D7B7
		cmp	[esp+6Ch+var_40], 1
		jz	loc_68D8D6F0
		mov	esi, off_68D90190
		test	esi, esi
		jz	loc_68D8D776
		mov	ebx, offset Src
		mov	ebp, offset off_68D90190
		jmp	short loc_68D8D632
; ---------------------------------------------------------------------------

loc_68D8D623:				; CODE XREF: sub_68D8D580+CBj
		mov	esi, [ebx]
		mov	ebp, ebx
		add	ebx, 10h
		test	esi, esi
		jz	loc_68D8D776

loc_68D8D632:				; CODE XREF: sub_68D8D580+A1j
		mov	edi, [ebp+4]
		lea	eax, [esp+6Ch+Src]
		mov	[esp+6Ch+Str2],	esi ; Str2
		mov	[esp+6Ch+Str1],	eax ; Str1
		mov	[esp+6Ch+MaxCount], edi	; MaxCount
		call	strncmp
		test	eax, eax
		jnz	short loc_68D8D623
		test	esi, esi
		mov	eax, [ebp+0Ch]
		jz	loc_68D8D776
		mov	edx, eax
		xor	ebp, ebp
		shl	edx, 4
		add	edx, offset Str2
		cmp	[esp+edi+6Ch+Src], 0Eh
		jz	loc_68D8D706

loc_68D8D670:				; CODE XREF: sub_68D8D580+180j
					; sub_68D8D580+18Dj
		test	eax, eax
		mov	ebx, [edx+8]
		jnz	short loc_68D8D685
		mov	edx, [esp+6Ch+arg_4]
		cmp	word ptr [edx],	7Fh
		ja	loc_68D8D776

loc_68D8D685:				; CODE XREF: sub_68D8D580+F5j
		lea	edx, [edi+ebx]
		cmp	[esp+6Ch+var_40], edx
		jl	loc_68D8D776
		mov	esi, [esp+6Ch+arg_0]
		mov	ecx, [esi+18h]
		mov	esi, eax
		shl	esi, 8
		or	esi, ebp
		cmp	ecx, esi
		jz	short loc_68D8D712
		test	eax, eax
		jz	loc_68D8D730

loc_68D8D6AC:				; CODE XREF: sub_68D8D580+1F1j
		cmp	cl, 1
		jz	loc_68D8D791
		mov	ebx, edx

loc_68D8D6B7:				; CODE XREF: sub_68D8D580+194j
					; sub_68D8D580+1ADj ...
		cmp	[esp+6Ch+arg_10], ebx
		jl	loc_68D8D7B7
		mov	eax, [esp+6Ch+Dst]
		lea	edx, [esp+6Ch+Src]
		mov	[esp+6Ch+MaxCount], ebx	; Size
		mov	[esp+6Ch+Str2],	edx ; Src
		mov	[esp+6Ch+Str1],	eax ; Dst
		call	memcpy
		mov	eax, [esp+6Ch+arg_0]
		mov	[eax+18h], esi

loc_68D8D6E3:				; CODE XREF: sub_68D8D580+248j
		add	esp, 5Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8D6F0:				; CODE XREF: sub_68D8D580+83j
		xor	edi, edi
		xor	eax, eax
		xor	ebp, ebp
		mov	edx, offset Str2
		cmp	[esp+edi+6Ch+Src], 0Eh
		jnz	loc_68D8D670

loc_68D8D706:				; CODE XREF: sub_68D8D580+EAj
		add	edi, 1
		mov	bp, 1
		jmp	loc_68D8D670
; ---------------------------------------------------------------------------

loc_68D8D712:				; CODE XREF: sub_68D8D580+122j
		test	edi, edi
		jz	short loc_68D8D6B7
		lea	eax, [esp+6Ch+Src]
		lea	edi, [eax+edi]
		mov	[esp+6Ch+MaxCount], ebx	; Size
		mov	[esp+6Ch+Str2],	edi ; Src
		mov	[esp+6Ch+Str1],	eax ; Dst
		call	memmove
		jmp	short loc_68D8D6B7
; ---------------------------------------------------------------------------
		align 10h

loc_68D8D730:				; CODE XREF: sub_68D8D580+126j
		mov	edi, Size
		lea	edx, [esp+6Ch+Src]
		mov	eax, edx
		mov	[esp+6Ch+Str2],	edx ; Src
		mov	[esp+6Ch+MaxCount], ebx	; Size
		add	eax, edi
		mov	[esp+6Ch+Str1],	eax ; Dst
		call	memmove
		mov	eax, Str2
		mov	[esp+6Ch+MaxCount], edi	; Size
		mov	[esp+6Ch+Str2],	eax ; Src
		lea	eax, [esp+6Ch+Src]
		mov	[esp+6Ch+Str1],	eax ; Dst
		call	memcpy
		mov	edx, [esp+6Ch+arg_0]
		mov	ecx, [edx+18h]
		lea	edx, [edi+ebx]
		jmp	loc_68D8D6AC
; ---------------------------------------------------------------------------

loc_68D8D776:				; CODE XREF: sub_68D8D580+57j
					; sub_68D8D580+61j ...
		call	ds:_errno
		mov	ebx, 0FFFFFFFFh
		mov	dword ptr [eax], 2Ah
		add	esp, 5Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8D791:				; CODE XREF: sub_68D8D580+12Fj
		lea	eax, [esp+6Ch+Src]
		mov	[esp+6Ch+Str2],	eax ; Src
		lea	eax, [esp+6Ch+var_33]
		mov	[esp+6Ch+MaxCount], edx	; Size
		lea	ebx, [ebx+edi+1]
		mov	[esp+6Ch+Str1],	eax ; Dst
		call	memmove
		mov	[esp+6Ch+Src], 0Fh
		jmp	loc_68D8D6B7
; ---------------------------------------------------------------------------

loc_68D8D7B7:				; CODE XREF: sub_68D8D580+78j
					; sub_68D8D580+13Ej
		call	ds:_errno
		mov	ebx, 0FFFFFFFFh
		mov	dword ptr [eax], 7
		jmp	loc_68D8D6E3
sub_68D8D580	endp

; ---------------------------------------------------------------------------
		align 10h

loc_68D8D7D0:				; DATA XREF: sub_68D8D040+248o
					; sub_68D8D040+29Eo
		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	edx, [esp+50h]
		mov	esi, [esp+40h]
		mov	edi, [esp+4Ch]
		mov	dword ptr [esp+2Ch], 0
		test	edx, edx
		jz	loc_68D8D940
		mov	eax, [esi]
		lea	ecx, [eax-0FDE8h]
		cmp	ecx, 1
		ja	short loc_68D8D872

loc_68D8D7FF:				; CODE XREF: .text:68D8D877j
					; .text:68D8D87Ej ...
		xor	ebx, ebx
		xor	ecx, ecx

loc_68D8D803:				; CODE XREF: .text:68D8D8FBj
					; .text:68D8D907j
		mov	[esp+14h], edx
		mov	edx, [esp+48h]
		mov	[esp+4], ebx
		mov	[esp+1Ch], ecx
		mov	dword ptr [esp+18h], 0
		mov	[esp+0Ch], edx
		mov	edx, [esp+44h]
		mov	[esp+10h], edi
		mov	[esp], eax
		mov	[esp+8], edx
		call	ds:WideCharToMultiByte
		sub	esp, 20h
		test	eax, eax
		mov	ebx, eax
		jz	loc_68D8D910
		mov	eax, [esp+2Ch]
		test	eax, eax
		jz	short loc_68D8D853
		test	byte ptr [esi+4], 2
		jz	loc_68D8D91B

loc_68D8D853:				; CODE XREF: .text:68D8D847j
		mov	[esp+8], ebx
		mov	[esp+4], edi
		mov	[esp], esi
		call	dword ptr [esi+10h]
		cmp	ebx, eax
		jnz	loc_68D8D91B

loc_68D8D869:				; CODE XREF: .text:68D8D951j
		add	esp, 30h
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68D8D872:				; CODE XREF: .text:68D8D7FDj
		cmp	eax, 0C42Ch
		jz	short loc_68D8D7FF
		cmp	eax, 0C42Eh
		jz	loc_68D8D7FF
		cmp	eax, 0C42Dh
		jz	loc_68D8D7FF
		cmp	eax, 0C433h
		jz	loc_68D8D7FF
		cmp	eax, 0C431h
		nop
		jz	loc_68D8D7FF
		cmp	eax, 0CEC8h
		nop
		lea	esi, [esi+0]
		jz	loc_68D8D7FF
		cmp	eax, 0C435h
		nop
		lea	esi, [esi+0]
		jz	loc_68D8D7FF
		cmp	eax, 0D698h
		nop
		lea	esi, [esi+0]
		jz	loc_68D8D7FF
		lea	ecx, [eax-0DEAAh]
		cmp	ecx, 9
		jbe	loc_68D8D7FF
		cmp	eax, 2Ah
		jz	loc_68D8D7FF
		test	byte ptr [esi+4], 2
		mov	ebx, 400h
		lea	ecx, [esp+2Ch]
		jz	loc_68D8D803
		xor	ebx, ebx
		lea	ecx, [esp+2Ch]
		jmp	loc_68D8D803
; ---------------------------------------------------------------------------
		align 10h

loc_68D8D910:				; CODE XREF: .text:68D8D83Bj
		call	ds:GetLastError
		cmp	eax, 7Ah
		jz	short loc_68D8D940

loc_68D8D91B:				; CODE XREF: .text:68D8D84Dj
					; .text:68D8D863j
		nop
		lea	esi, [esi+0]
		call	ds:_errno
		mov	ebx, 0FFFFFFFFh
		mov	dword ptr [eax], 2Ah
		add	esp, 30h
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8D940:				; CODE XREF: .text:68D8D7ECj
					; .text:68D8D919j
		call	ds:_errno
		mov	ebx, 0FFFFFFFFh
		mov	dword ptr [eax], 7
		jmp	loc_68D8D869
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8D960(int,	LPCSTR,	int, LPWSTR, int)
sub_68D8D960	proc near		; DATA XREF: sub_68D8D040+241o
					; sub_68D8D040+297o

CodePage	= dword	ptr -3Ch
dwFlags		= dword	ptr -38h
lpMultiByteStr	= dword	ptr -34h
cbMultiByte	= dword	ptr -30h
lpWideCharStr	= dword	ptr -2Ch
cchWideChar	= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_C], esi
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_8], edi
		mov	esi, [esp+3Ch+arg_0]
		mov	edi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_10]
		mov	[esp+3Ch+lpMultiByteStr], eax
		mov	[esp+3Ch+dwFlags], edi
		mov	[esp+3Ch+CodePage], esi
		call	dword ptr [esi+10h]
		cmp	eax, 0FFFFFFFFh
		mov	ebx, eax
		jz	short loc_68D8D9D5
		mov	eax, [esi]
		mov	ecx, [ebp+0]
		lea	edx, [eax-0C42Ch]
		cmp	edx, 2
		ja	short loc_68D8D9F0

loc_68D8D9A8:				; CODE XREF: sub_68D8D960+95j
					; sub_68D8D960+9Cj ...
		xor	edx, edx

loc_68D8D9AA:				; CODE XREF: sub_68D8D960+CDj
		mov	[esp+3Ch+cchWideChar], ecx ; cchWideChar
		mov	ecx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+cbMultiByte], ebx ; cbMultiByte
		mov	[esp+3Ch+lpMultiByteStr], edi ;	lpMultiByteStr
		mov	[esp+3Ch+dwFlags], edx ; dwFlags
		mov	[esp+3Ch+lpWideCharStr], ecx ; lpWideCharStr
		mov	[esp+3Ch+CodePage], eax	; CodePage
		call	ds:MultiByteToWideChar
		sub	esp, 18h
		test	eax, eax
		mov	[ebp+0], eax
		jz	short loc_68D8DA38

loc_68D8D9D5:				; CODE XREF: sub_68D8D960+36j
					; sub_68D8D960+E9j
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8D9F0:				; CODE XREF: sub_68D8D960+46j
		cmp	eax, 0C431h
		jz	short loc_68D8D9A8
		cmp	eax, 0C435h
		jz	short loc_68D8D9A8
		cmp	eax, 0C433h
		jz	short loc_68D8D9A8
		cmp	eax, 0D698h
		jz	short loc_68D8D9A8
		cmp	eax, 0CEC8h
		jz	short loc_68D8D9A8
		lea	edx, [eax-0DEAAh]
		cmp	edx, 9
		jbe	short loc_68D8D9A8
		cmp	eax, 0FDE8h
		jz	short loc_68D8D9A8
		cmp	eax, 2Ah
		mov	edx, 8
		jnz	loc_68D8D9AA
		jmp	loc_68D8D9A8
; ---------------------------------------------------------------------------

loc_68D8DA38:				; CODE XREF: sub_68D8D960+73j
		call	ds:_errno
		mov	ebx, 0FFFFFFFFh
		mov	dword ptr [eax], 2Ah
		jmp	short loc_68D8D9D5
sub_68D8D960	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8DA50	proc near		; CODE XREF: _nl_find_msg+6D1p

NumOfElements	= dword	ptr -3Ch
SizeOfElements	= dword	ptr -38h
Size		= dword	ptr -34h
var_28		= dword	ptr -28h
Memory		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	[esp+3Ch+SizeOfElements], 54h ;	SizeOfElements
		mov	[esp+3Ch+NumOfElements], 1 ; NumOfElements
		call	calloc
		mov	[esp+3Ch+Memory], eax
		mov	edi, [esp+3Ch+Memory]
		mov	eax, 0FFFFFFFFh
		test	edi, edi
		jz	loc_68D8DBBF
		mov	eax, ds:_errno
		mov	[esp+3Ch+var_28], eax
		call	eax ; _errno
		mov	dword ptr [eax], 0
		mov	[esp+3Ch+NumOfElements], offset	aWiniconv_libic	; "WINICONV_LIBICONV_DLL"
		call	getenv
		test	eax, eax
		mov	ebx, eax
		jz	loc_68D8DD21

loc_68D8DAA7:				; CODE XREF: sub_68D8DA50+2D6j
		movzx	eax, byte ptr [ebx]

loc_68D8DAAA:				; CODE XREF: sub_68D8DA50+277j
					; sub_68D8DA50+284j
		test	al, al
		jz	loc_68D8DB8C
		mov	[esp+3Ch+SizeOfElements], 2Ch ;	Val
		mov	[esp+3Ch+NumOfElements], ebx ; Str
		call	strchr
		cmp	ebx, eax
		mov	esi, eax
		jz	loc_68D8DCC0
		test	eax, eax
		jz	loc_68D8DD11

loc_68D8DAD4:				; CODE XREF: sub_68D8DA50+2CCj
		mov	ebp, esi
		sub	ebp, ebx
		lea	eax, [ebp+1]
		mov	[esp+3Ch+NumOfElements], eax ; Size
		call	malloc
		test	eax, eax
		mov	edi, eax
		jz	loc_68D8DB8C
		mov	[esp+3Ch+SizeOfElements], ebx ;	Src
		mov	[esp+3Ch+Size],	ebp ; Size
		mov	[esp+3Ch+NumOfElements], eax ; Dst
		call	memcpy
		mov	byte ptr [edi+ebp], 0
		mov	[esp+3Ch+NumOfElements], edi ; lpLibFileName
		call	ds:LoadLibraryA
		sub	esp, 4
		mov	ebx, eax
		mov	[esp+3Ch+NumOfElements], edi ; Memory
		call	free
		test	ebx, ebx
		jz	loc_68D8DCC0
		cmp	ebx, ds:hLibModule
		jz	loc_68D8DCAA
		mov	eax, [ebx+3Ch]
		mov	eax, [ebx+eax+80h]
		test	eax, eax
		jz	short loc_68D8DB80
		lea	eax, [ebx+eax]
		mov	[esp+3Ch+var_20], eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_68D8DB80
		mov	ebp, offset a_errno ; "_errno"

loc_68D8DB4B:				; CODE XREF: sub_68D8DA50+12Dj
		lea	eax, [ebx+eax]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_68D8DB70

loc_68D8DB54:				; CODE XREF: sub_68D8DA50+11Ej
		test	ecx, ecx
		js	short loc_68D8DB67
		lea	esi, [ebx+ecx+2]
		mov	edi, ebp
		mov	ecx, 7
		repe cmpsb
		jz	short loc_68D8DBC7

loc_68D8DB67:				; CODE XREF: sub_68D8DA50+106j
		add	eax, 4
		mov	ecx, [eax]
		test	ecx, ecx
		jnz	short loc_68D8DB54

loc_68D8DB70:				; CODE XREF: sub_68D8DA50+102j
		add	[esp+3Ch+var_20], 14h
		mov	edx, [esp+3Ch+var_20]
		mov	eax, [edx]
		test	eax, eax
		jnz	short loc_68D8DB4B
		nop

loc_68D8DB80:				; CODE XREF: sub_68D8DA50+E7j
					; sub_68D8DA50+F4j ...
		mov	[esp+3Ch+NumOfElements], ebx ; hLibModule
		call	ds:FreeLibrary
		sub	esp, 4

loc_68D8DB8C:				; CODE XREF: sub_68D8DA50+5Cj
					; sub_68D8DA50+97j
		call	[esp+3Ch+var_28]
		mov	edx, [esp+3Ch+Memory]
		add	edx, 10h
		mov	dword ptr [eax], 0
		mov	eax, [esp+3Ch+arg_4]
		call	sub_68D8D040
		test	eax, eax
		jnz	loc_68D8DCD9

loc_68D8DBAE:				; CODE XREF: sub_68D8DA50+29Bj
		mov	ecx, [esp+3Ch+Memory]
		mov	[esp+3Ch+NumOfElements], ecx ; Memory
		call	free
		mov	eax, 0FFFFFFFFh

loc_68D8DBBF:				; CODE XREF: sub_68D8DA50+2Aj
					; sub_68D8DA50+2BCj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8DBC7:				; CODE XREF: sub_68D8DA50+115j
		mov	ecx, [esp+3Ch+var_20]
		mov	eax, ebx
		add	eax, [ecx+0Ch]
		mov	[esp+3Ch+NumOfElements], eax ; lpModuleName
		call	ds:GetModuleHandleA
		sub	esp, 4
		test	eax, eax
		mov	ebp, eax
		jz	short loc_68D8DB80
		mov	esi, ds:GetProcAddress
		mov	[esp+3Ch+SizeOfElements], offset aLibiconv_open	; "libiconv_open"
		mov	[esp+3Ch+NumOfElements], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		test	eax, eax
		mov	edi, eax
		jz	loc_68D8DD63

loc_68D8DC02:				; CODE XREF: sub_68D8DA50+325j
		mov	[esp+3Ch+SizeOfElements], offset aLibiconv_close ; "libiconv_close"
		mov	[esp+3Ch+NumOfElements], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		test	eax, eax
		mov	ecx, [esp+3Ch+Memory]
		mov	[ecx+4], eax
		jz	loc_68D8DD2B

loc_68D8DC21:				; CODE XREF: sub_68D8DA50+2F2j
		mov	[esp+3Ch+SizeOfElements], offset aLibiconv ; "libiconv"
		mov	[esp+3Ch+NumOfElements], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		test	eax, eax
		mov	ecx, [esp+3Ch+Memory]
		mov	[ecx+8], eax
		jz	loc_68D8DD47

loc_68D8DC40:				; CODE XREF: sub_68D8DA50+30Ej
		mov	[esp+3Ch+SizeOfElements], offset a_errno ; "_errno"
		mov	[esp+3Ch+NumOfElements], ebp ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		test	edi, edi
		mov	ecx, [esp+3Ch+Memory]
		mov	[ecx+0Ch], eax
		jz	loc_68D8DB80
		mov	esi, [ecx+4]
		test	esi, esi
		jz	loc_68D8DB80
		mov	edx, [ecx+8]
		test	edx, edx
		jz	loc_68D8DB80
		test	eax, eax
		jz	loc_68D8DB80
		mov	eax, [esp+3Ch+arg_4]
		mov	edx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+SizeOfElements], eax
		mov	[esp+3Ch+NumOfElements], edx
		call	edi
		mov	ecx, [esp+3Ch+Memory]
		cmp	eax, 0FFFFFFFFh
		mov	[ecx], eax
		jz	loc_68D8DB80
		mov	[ecx+50h], ebx
		mov	eax, ecx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8DCAA:				; CODE XREF: sub_68D8DA50+D5j
		mov	edx, ds:hLibModule
		mov	[esp+3Ch+NumOfElements], edx ; hLibModule
		call	ds:FreeLibrary
		sub	esp, 4
		lea	esi, [esi+0]

loc_68D8DCC0:				; CODE XREF: sub_68D8DA50+76j
					; sub_68D8DA50+C9j
		movzx	eax, byte ptr [esi]
		mov	ebx, esi
		cmp	al, 2Ch
		jnz	loc_68D8DAAA
		lea	ebx, [esi+1]
		movzx	eax, byte ptr [esi+1]
		jmp	loc_68D8DAAA
; ---------------------------------------------------------------------------

loc_68D8DCD9:				; CODE XREF: sub_68D8DA50+158j
		mov	edx, [esp+3Ch+Memory]
		mov	eax, [esp+3Ch+arg_0]
		add	edx, 30h
		call	sub_68D8D040
		test	eax, eax
		jz	loc_68D8DBAE
		mov	eax, [esp+3Ch+Memory]
		mov	edx, [esp+3Ch+var_28]
		mov	dword ptr [eax+4], offset loc_68D8BD90
		mov	dword ptr [eax+8], offset sub_68D8BDA0
		mov	[eax+0Ch], edx
		mov	[eax], eax
		jmp	loc_68D8DBBF
; ---------------------------------------------------------------------------

loc_68D8DD11:				; CODE XREF: sub_68D8DA50+7Ej
		mov	[esp+3Ch+NumOfElements], ebx ; Str
		call	strlen
		lea	esi, [ebx+eax]
		jmp	loc_68D8DAD4
; ---------------------------------------------------------------------------

loc_68D8DD21:				; CODE XREF: sub_68D8DA50+51j
		mov	ebx, offset byte_68D94852
		jmp	loc_68D8DAA7
; ---------------------------------------------------------------------------

loc_68D8DD2B:				; CODE XREF: sub_68D8DA50+1CBj
		mov	[esp+3Ch+SizeOfElements], offset aIconv_close ;	"iconv_close"
		mov	[esp+3Ch+NumOfElements], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		mov	edx, [esp+3Ch+Memory]
		mov	[edx+4], eax
		jmp	loc_68D8DC21
; ---------------------------------------------------------------------------

loc_68D8DD47:				; CODE XREF: sub_68D8DA50+1EAj
		mov	[esp+3Ch+SizeOfElements], offset aIconv	; "iconv"
		mov	[esp+3Ch+NumOfElements], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		mov	edx, [esp+3Ch+Memory]
		mov	[edx+8], eax
		jmp	loc_68D8DC40
; ---------------------------------------------------------------------------

loc_68D8DD63:				; CODE XREF: sub_68D8DA50+1ACj
		mov	[esp+3Ch+SizeOfElements], offset aIconv_open ; "iconv_open"
		mov	[esp+3Ch+NumOfElements], ebx ; hModule
		call	esi ; GetProcAddress
		sub	esp, 8
		mov	edi, eax
		jmp	loc_68D8DC02
sub_68D8DA50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8DD80(_onexit_t)
sub_68D8DD80	proc near		; CODE XREF: sub_68D8DE40+Ap

Func		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_68D96534
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax
		call	sub_68D8DF40
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_10], eax
		jz	loc_68D8DE20
		mov	[esp+2Ch+Func],	8
		call	_lock
		mov	eax, ds:dword_68D96534
		mov	[esp+2Ch+Func],	eax
		call	sub_68D8DF40
		mov	[esp+2Ch+var_10], eax
		mov	eax, ds:dword_68D96530
		mov	[esp+2Ch+Func],	eax
		call	sub_68D8DF40
		mov	[esp+2Ch+Func],	ebx
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Func],	eax
		call	sub_68D8DF50
		mov	ds:dword_68D96534, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+Func],	eax
		call	sub_68D8DF50
		mov	[esp+2Ch+Func],	8
		mov	ds:dword_68D96530, eax
		call	_unlock
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8DE20:				; CODE XREF: sub_68D8DD80+1Cj
		mov	[esp+2Ch+Func],	ebx ; Func
		call	ds:_onexit
		add	esp, 28h
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_68D8DD80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8DE40(_onexit_t)
sub_68D8DE40	proc near		; CODE XREF: sub_68D8E420-2Fp
					; sub_68D8EFF0+12p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_68D8DD80
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_68D8DE40	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:68D9901Co

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_68D8DE90
		cmp	eax, 3
		jz	short loc_68D8DE90
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_68D8DE90:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_68D8E640
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_68D81040+117p
					; DATA XREF: .rdata:off_68D95EA0o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_68D9020C,	2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_68D8DEDB
		mov	dword_68D9020C,	2

loc_68D8DEDB:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_68D8DEF1
		cmp	eax, 1
		jz	short loc_68D8DF20

loc_68D8DEE5:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_68D8DEF1:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_68D99028
		cmp	ebx, offset dword_68D99028
		jz	short loc_68D8DEE5
		xchg	ax, ax

loc_68D8DF00:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_68D8DF08
		call	eax

loc_68D8DF08:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_68D99028
		jnz	short loc_68D8DF00
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_68D8DF20:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_68D8E640
		jmp	short loc_68D8DEE5
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8DF40	proc near		; CODE XREF: sub_68D81040+138p
					; sub_68D81040+14Bp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_68D8DF40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8DF50	proc near		; CODE XREF: sub_68D81000+15p
					; sub_68D8DD80+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_68D8DF50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_68D8DF60(char	*Format, char ArgList)
sub_68D8DF60	proc near		; CODE XREF: sub_68D8DFC0+131p
					; sub_68D8DFC0+141p ...

Str		= dword	ptr -1Ch
Size		= dword	ptr -18h
Count		= dword	ptr -14h
File		= dword	ptr -10h
Format		= dword	ptr  4
ArgList		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+Count], 1Bh ; Count
		lea	ebx, [esp+1Ch+ArgList]
		mov	[esp+1Ch+Size],	1 ; Size
		mov	[esp+1Ch+Str], offset aMingwW64Runtim ;	"Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	fwrite
		mov	eax, [esp+1Ch+Format]
		mov	[esp+1Ch+Count], ebx ; ArgList
		mov	[esp+1Ch+Size],	eax ; Format
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+Str], eax ; File
		call	vfprintf
		call	abort
sub_68D8DF60	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68D8DFC0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_68D8DFC0(size_t Size)
sub_68D8DFC0	proc near		; CODE XREF: .text:68D8DFB1j
					; sub_68D8E110+12Ap ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
Src		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+5Ch+Src], edx
		jnz	short loc_68D8DFE0
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8DFE0:				; CODE XREF: sub_68D8DFC0+11j
		mov	ecx, ds:dword_68D9619C
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_68D8E010
		mov	eax, ds:dword_68D96198

loc_68D8DFF1:				; CODE XREF: sub_68D8DFC0+4Ej
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_68D8E006
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_68D8E089

loc_68D8E006:				; CODE XREF: sub_68D8DFC0+36j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_68D8DFF1

loc_68D8E010:				; CODE XREF: sub_68D8DFC0+2Aj
		mov	[esp+5Ch+lpAddress], ebx
		call	sub_68D8E860
		test	eax, eax
		mov	ebp, eax
		jz	loc_68D8E0F6
		lea	edx, [esi+esi*2]
		mov	esi, ds:dword_68D96198
		shl	edx, 2
		mov	[esp+5Ch+var_44], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	sub_68D8E980
		mov	edx, [esp+5Ch+var_44]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	eax, ds:dword_68D96198
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+5Ch+var_44]
		jz	short loc_68D8E0D6
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_68D8E0A5

loc_68D8E082:				; CODE XREF: sub_68D8DFC0+E8j
					; sub_68D8DFC0+114j
		add	ds:dword_68D9619C, 1

loc_68D8E089:				; CODE XREF: sub_68D8DFC0+40j
		mov	eax, [esp+5Ch+Src]
		mov	[esp+5Ch+dwLength], edi	; Size
		mov	[esp+5Ch+lpAddress], ebx ; Dst
		mov	[esp+5Ch+lpBuffer], eax	; Src
		call	memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8E0A5:				; CODE XREF: sub_68D8DFC0+C0j
		cmp	eax, 40h
		jz	short loc_68D8E082
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		add	edx, ds:dword_68D96198
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpflOldProtect], edx ;	lpflOldProtect
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_68D8E082
; ---------------------------------------------------------------------------

loc_68D8E0D6:				; CODE XREF: sub_68D8DFC0+B7j
		mov	eax, ds:dword_68D96198
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ebp+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		call	sub_68D8DF60
; ---------------------------------------------------------------------------

loc_68D8E0F6:				; CODE XREF: sub_68D8DFC0+5Cj
		mov	[esp+5Ch+lpBuffer], ebx	; ArgList
		mov	[esp+5Ch+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_68D8DF60
sub_68D8DFC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68D8E110	proc near		; CODE XREF: sub_68D81260+30p
					; sub_68D81260:loc_68D812E8p

lpAddress	= dword	ptr -58h
lpBuffer	= dword	ptr -54h
dwLength	= dword	ptr -50h
lpflOldProtect	= dword	ptr -4Ch
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_68D961A0
		test	ebx, ebx
		jz	short loc_68D8E130

loc_68D8E123:				; CODE XREF: sub_68D8E110+64j
					; sub_68D8E110+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E130:				; CODE XREF: sub_68D8E110+11j
		mov	ds:dword_68D961A0, 1
		call	sub_68D8E8D0
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_68D8EC80
		mov	ds:dword_68D9619C, 0
		lea	eax, [esp+58h+Buffer.BaseAddress+3]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_68D96198, eax
		mov	eax, offset dword_68D95F94
		sub	eax, offset dword_68D95F94
		cmp	eax, 7
		jle	short loc_68D8E123
		cmp	eax, 0Bh
		mov	ebx, offset dword_68D95F94
		jle	short loc_68D8E1A2
		mov	ecx, ds:dword_68D95F94
		test	ecx, ecx
		jnz	short loc_68D8E1A2
		mov	edx, ds:dword_68D95F98
		test	edx, edx
		jnz	short loc_68D8E1A2
		mov	eax, ds:dword_68D95F9C
		test	eax, eax
		jnz	short loc_68D8E1A2
		mov	ebx, offset dword_68D95FA0

loc_68D8E1A2:				; CODE XREF: sub_68D8E110+6Ej
					; sub_68D8E110+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_68D8E210
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_68D8E210
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_68D8E373
		add	ebx, 0Ch
		cmp	ebx, offset dword_68D95F94
		jnb	loc_68D8E123
		mov	esi, 68D80000h

loc_68D8E1CF:				; CODE XREF: sub_68D8E110+217j
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_68D8E2CD
		cmp	edx, 20h
		jz	loc_68D8E30A
		cmp	edx, 8
		jz	loc_68D8E2EC
		mov	[ebp+var_1C], 0
		mov	[esp+58h+lpBuffer], edx	; ArgList
		mov	[esp+58h+lpAddress], offset aUnknownPseudoR ; "	 Unknown pseudo	relocation bit size %d"...
		call	sub_68D8DF60
; ---------------------------------------------------------------------------

loc_68D8E210:				; CODE XREF: sub_68D8E110+96j
					; sub_68D8E110+9Dj
		cmp	ebx, offset dword_68D95F94
		jnb	loc_68D8E123
		mov	esi, 68D80000h
		lea	edi, [ebp+flOldProtect]

loc_68D8E224:				; CODE XREF: sub_68D8E110+135j
		mov	eax, [ebx+4]
		mov	ecx, 4		; Size
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	sub_68D8DFC0
		cmp	ebx, offset dword_68D95F94
		jb	short loc_68D8E224

loc_68D8E247:				; CODE XREF: sub_68D8E110+21Dj
		mov	ecx, ds:dword_68D9619C
		test	ecx, ecx
		jle	loc_68D8E123
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_68D8E272
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E260:				; CODE XREF: sub_68D8E110+16Dj
					; sub_68D8E110+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:dword_68D9619C
		jge	loc_68D8E123

loc_68D8E272:				; CODE XREF: sub_68D8E110+14Cj
		mov	eax, ds:dword_68D96198
		add	eax, ebx
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_68D8E260
		lea	edx, [ebp+Buffer]
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	eax, [eax+4]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_68D8E350
		mov	eax, ds:dword_68D96198
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	eax, [eax+ebx]
		mov	[esp+58h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_68D8E260
; ---------------------------------------------------------------------------

loc_68D8E2CD:				; CODE XREF: sub_68D8E110+D1j
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_68D8E341
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_68D8E2DD:				; CODE XREF: sub_68D8E110+23Ej
		mov	ecx, 2		; Size
		lea	edx, [ebp+var_1C]
		call	sub_68D8DFC0
		jmp	short loc_68D8E31E
; ---------------------------------------------------------------------------

loc_68D8E2EC:				; CODE XREF: sub_68D8E110+E3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_68D8E332
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_68D8E2FB:				; CODE XREF: sub_68D8E110+22Fj
		mov	ecx, 1		; Size
		lea	edx, [ebp+var_1C]
		call	sub_68D8DFC0
		jmp	short loc_68D8E31E
; ---------------------------------------------------------------------------

loc_68D8E30A:				; CODE XREF: sub_68D8E110+DAj
		add	edi, [eax]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4		; Size
		mov	[ebp+var_1C], edi
		call	sub_68D8DFC0

loc_68D8E31E:				; CODE XREF: sub_68D8E110+1DAj
					; sub_68D8E110+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset dword_68D95F94
		jb	loc_68D8E1CF
		jmp	loc_68D8E247
; ---------------------------------------------------------------------------

loc_68D8E332:				; CODE XREF: sub_68D8E110+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_68D8E2FB
; ---------------------------------------------------------------------------

loc_68D8E341:				; CODE XREF: sub_68D8E110+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_68D8E2DD
; ---------------------------------------------------------------------------

loc_68D8E350:				; CODE XREF: sub_68D8E110+18Fj
		add	ebx, ds:dword_68D96198
		mov	eax, [ebx+4]
		mov	[esp+58h+dwLength], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_68D8DF60
; ---------------------------------------------------------------------------

loc_68D8E373:				; CODE XREF: sub_68D8E110+A5j
		mov	[esp+58h+lpBuffer], eax	; ArgList
		mov	[esp+58h+lpAddress], offset aUnknownPseud_0 ; "	 Unknown pseudo	relocation protocol ve"...
		call	sub_68D8DF60
sub_68D8E110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8E390()
sub_68D8E390	proc near		; DATA XREF: sub_68D8E420:loc_68D8E3EAo
		sub	esp, 0Ch
		mov	eax, off_68D90208
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_68D8E3B7
		xchg	ax, ax

loc_68D8E3A0:				; CODE XREF: sub_68D8E390+25j
		call	eax
		mov	eax, off_68D90208
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_68D90208, edx
		test	eax, eax
		jnz	short loc_68D8E3A0

loc_68D8E3B7:				; CODE XREF: sub_68D8E390+Cj
		add	esp, 0Ch
		retn
sub_68D8E390	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_68D8E420

loc_68D8E3C0:				; CODE XREF: sub_68D8E420+1Ej
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:dword_68D8F010
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_68D8E400

loc_68D8E3D0:				; CODE XREF: sub_68D8E420-Cj
		test	ebx, ebx
		jz	short loc_68D8E3EA
		lea	esi, dword_68D8F010[ebx*4]
		nop
		lea	esi, [esi+0]

loc_68D8E3E0:				; CODE XREF: sub_68D8E420-38j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_68D8E3E0

loc_68D8E3EA:				; CODE XREF: sub_68D8E420-4Ej
		mov	[esp+1Ch+var_1C], offset sub_68D8E390 ;	_onexit_t
		call	sub_68D8DE40
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_68D8E420
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_68D8E420

loc_68D8E400:				; CODE XREF: sub_68D8E420-52j
		xor	ebx, ebx
		jmp	short loc_68D8E406
; ---------------------------------------------------------------------------

loc_68D8E404:				; CODE XREF: sub_68D8E420-Ej
		mov	ebx, eax

loc_68D8E406:				; CODE XREF: sub_68D8E420-1Ej
		lea	eax, [ebx+1]
		mov	edx, ds:dword_68D8F010[eax*4]
		test	edx, edx
		jnz	short loc_68D8E404
		jmp	short loc_68D8E3D0
; END OF FUNCTION CHUNK	FOR sub_68D8E420
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8E420	proc near		; CODE XREF: sub_68D81260+92p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 68D8E3C0 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 68D8E400 SIZE 00000016 BYTES

		sub	esp, 0Ch
		mov	ecx, ds:dword_68D961A4
		test	ecx, ecx
		jz	short loc_68D8E431
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8E431:				; CODE XREF: sub_68D8E420+Bj
		mov	ds:dword_68D961A4, 1
		add	esp, 0Ch
		jmp	short loc_68D8E3C0
sub_68D8E420	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_68D8E440	proc near		; CODE XREF: sub_68D81260+40p
					; sub_68D81260+A6p ...
		mov	eax, 1
		retn	0Ch
sub_68D8E440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8E450	proc near		; CODE XREF: sub_68D81260+F1p
					; sub_68D81260+10Bp ...
		mov	eax, 1
		retn	0Ch
sub_68D8E450	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_68D962E4, edx
		mov	ds:dword_68D961C0, 0C0000409h
		mov	ds:dword_68D961C4, 1
		mov	ds:dword_68D962D8, eax
		mov	ds:dword_68D961CC, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_68D962CC, eax
		mov	eax, dword_68D90210
		mov	[ebp-10h], eax
		mov	eax, dword_68D90214
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_68D95F74
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8E4F0	proc near		; CODE XREF: DllEntryPoint+34p

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
PerformanceCount= LARGE_INTEGER	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, dword_68D90210
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_68D8E530
		not	eax
		mov	dword_68D90214,	eax

loc_68D8E516:				; CODE XREF: sub_68D8E4F0+BDj
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E530:				; CODE XREF: sub_68D8E4F0+1Dj
		lea	eax, [esp+4Ch+SystemTimeAsFileTime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	[esp+4Ch+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[esp+4Ch+SystemTimeAsFileTime.dwHighDateTime], 0
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	eax, [esp+4Ch+SystemTimeAsFileTime.dwHighDateTime]
		mov	ebp, [esp+4Ch+SystemTimeAsFileTime.dwLowDateTime]
		mov	[esp+4Ch+var_30], eax
		call	ds:GetCurrentProcessId
		mov	edi, eax
		call	ds:GetCurrentThreadId
		mov	esi, eax
		call	ds:GetTickCount
		mov	ebx, eax
		lea	eax, [esp+4Ch+PerformanceCount]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		sub	esp, 4
		xor	ebp, [esp+4Ch+var_30]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount+4]
		xor	ebp, edi
		xor	ebp, esi
		xor	ebp, ebx
		mov	eax, ebp
		cmp	ebp, 0BB40E64Eh
		not	eax
		jz	short loc_68D8E5B2

loc_68D8E5A2:				; CODE XREF: sub_68D8E4F0+CBj
		mov	dword_68D90210,	ebp
		mov	dword_68D90214,	eax
		jmp	loc_68D8E516
; ---------------------------------------------------------------------------

loc_68D8E5B2:				; CODE XREF: sub_68D8E4F0+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_68D8E5A2
sub_68D8E4F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8E5C0	proc near		; CODE XREF: sub_68D8E640+13p
					; sub_68D8E640:loc_68D8E661p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_68D96500
		test	eax, eax
		jnz	short loc_68D8E5D8
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68D8E5D8:				; CODE XREF: sub_68D8E5C0+Ej
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	ebx, ds:dword_68D9651C
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_68D8E625
		mov	ebp, ds:TlsGetValue
		mov	edi, ds:GetLastError
		xchg	ax, ax

loc_68D8E600:				; CODE XREF: sub_68D8E5C0+63j
		mov	eax, [ebx]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_68D8E61E
		test	esi, esi
		jz	short loc_68D8E61E
		mov	eax, [ebx+4]
		mov	[esp+2Ch+lpCriticalSection], esi
		call	eax

loc_68D8E61E:				; CODE XREF: sub_68D8E5C0+50j
					; sub_68D8E5C0+54j
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_68D8E600

loc_68D8E625:				; CODE XREF: sub_68D8E5C0+30j
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68D8E5C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8E640	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_68D8E690
		jb	short loc_68D8E661
		cmp	eax, 3
		jnz	short loc_68D8E658
		call	sub_68D8E5C0

loc_68D8E658:				; CODE XREF: sub_68D8E640+11j
					; sub_68D8E640+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_68D8E661:				; CODE XREF: sub_68D8E640+Cj
		call	sub_68D8E5C0
		mov	eax, ds:dword_68D96500
		cmp	eax, 1
		jnz	short loc_68D8E658
		mov	ds:dword_68D96500, 0
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_68D8E658
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E690:				; CODE XREF: sub_68D8E640+Aj
		mov	eax, ds:dword_68D96500
		test	eax, eax
		jz	short loc_68D8E6B0

loc_68D8E699:				; CODE XREF: sub_68D8E640+80j
		mov	ds:dword_68D96500, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E6B0:				; CODE XREF: sub_68D8E640+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_68D8E699
sub_68D8E640	endp

; ---------------------------------------------------------------------------
		align 10h

loc_68D8E6D0:				; CODE XREF: .text:68D8EE96j
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_68D96500
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_68D8E6E8
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68D8E6E8:				; CODE XREF: .text:68D8E6DFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_68D9651C
		sub	esp, 4
		test	eax, eax
		jz	short loc_68D8E71F
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_68D8E716
		jmp	short loc_68D8E756
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E710:				; CODE XREF: .text:68D8E71Dj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_68D8E736

loc_68D8E716:				; CODE XREF: .text:68D8E705j
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_68D8E710

loc_68D8E71F:				; CODE XREF: .text:68D8E6FFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_68D8E72F:				; CODE XREF: .text:68D8E754j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68D8E736:				; CODE XREF: .text:68D8E714j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_68D8E73C:				; CODE XREF: .text:68D8E75Fj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_68D8E72F
; ---------------------------------------------------------------------------

loc_68D8E756:				; CODE XREF: .text:68D8E707j
		mov	edx, [eax+8]
		mov	ds:dword_68D9651C, edx
		jmp	short loc_68D8E73C
; ---------------------------------------------------------------------------
		jmp	short loc_68D8E770
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E770:				; CODE XREF: .text:68D8E761j
					; .text:68D8EE7Aj
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_68D96500
		test	eax, eax
		jnz	short loc_68D8E782

loc_68D8E77D:				; CODE XREF: .text:68D8E79Fj
					; .text:68D8E7DEj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68D8E782:				; CODE XREF: .text:68D8E77Bj
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_68D8E77D
		mov	eax, [esp+20h]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [esp+24h]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_68D9651C
		mov	ds:dword_68D9651C, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_68D8E77D
; ---------------------------------------------------------------------------
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_68D8E7F0

loc_68D8E7EB:				; CODE XREF: .text:68D8E7F9j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E7F0:				; CODE XREF: .text:68D8E7E9j
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_68D8E7EB
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		mov	eax, [esp+0Ch]
		mov	ebx, [esp+10h]
		add	eax, [eax+3Ch]
		movzx	esi, word ptr [eax+6]
		movzx	edx, word ptr [eax+14h]
		test	esi, esi
		jz	short loc_68D8E84C
		movzx	edx, dx
		lea	eax, [eax+edx+18h]
		xor	edx, edx
		jmp	short loc_68D8E837
; ---------------------------------------------------------------------------

loc_68D8E834:				; CODE XREF: .text:68D8E84Aj
		add	eax, 28h

loc_68D8E837:				; CODE XREF: .text:68D8E832j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_68D8E845
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_68D8E84E

loc_68D8E845:				; CODE XREF: .text:68D8E83Cj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_68D8E834

loc_68D8E84C:				; CODE XREF: .text:68D8E827j
		xor	eax, eax

loc_68D8E84E:				; CODE XREF: .text:68D8E843j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_68D8E860
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8E860	proc near		; CODE XREF: sub_68D8DFC0+53p
					; .text:68D8E851j

arg_0		= dword	ptr  4

		cmp	word ptr ds:68D80000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_68D8E872

loc_68D8E86D:				; CODE XREF: sub_68D8E860+27j
					; sub_68D8E860+2Fj ...
		xor	eax, eax

loc_68D8E86F:				; CODE XREF: sub_68D8E860+61j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68D8E872:				; CODE XREF: sub_68D8E860+Bj
		mov	eax, ds:68D8003Ch
		cmp	dword ptr [eax+68D80000h], 4550h
		lea	edx, [eax+68D80000h]
		jnz	short loc_68D8E86D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_68D8E86D
		mov	ebx, [esp+8+arg_0]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 68D80000h
		test	esi, esi
		jz	short loc_68D8E86D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_68D8E8B5
; ---------------------------------------------------------------------------

loc_68D8E8B2:				; CODE XREF: sub_68D8E860+68j
		add	eax, 28h

loc_68D8E8B5:				; CODE XREF: sub_68D8E860+50j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_68D8E8C3
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_68D8E86F

loc_68D8E8C3:				; CODE XREF: sub_68D8E860+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_68D8E8B2
		jmp	short loc_68D8E86D
sub_68D8E860	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8E8D0	proc near		; CODE XREF: sub_68D8E110+2Ap
		cmp	word ptr ds:68D80000h, 5A4Dh
		jz	short loc_68D8E8E0

loc_68D8E8DB:				; CODE XREF: sub_68D8E8D0+25j
					; sub_68D8E8D0+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E8E0:				; CODE XREF: sub_68D8E8D0+9j
		mov	eax, ds:68D8003Ch
		cmp	dword ptr [eax+68D80000h], 4550h
		lea	edx, [eax+68D80000h]
		jnz	short loc_68D8E8DB
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_68D8E8DB
		movzx	eax, word ptr [edx+6]
		retn
sub_68D8E8D0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:68D80000h, 5A4Dh
		push	ebx
		mov	edx, [esp+8]
		jz	short loc_68D8E924

loc_68D8E920:				; CODE XREF: .text:68D8E939j
					; .text:68D8E941j ...
		xor	eax, eax

loc_68D8E922:				; CODE XREF: .text:68D8E96Bj
					; .text:68D8E979j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68D8E924:				; CODE XREF: .text:68D8E91Ej
		mov	eax, ds:68D8003Ch
		cmp	dword ptr [eax+68D80000h], 4550h
		lea	ecx, [eax+68D80000h]
		jnz	short loc_68D8E920
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_68D8E920
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_68D8E920
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
		xor	ecx, ecx
		jmp	short loc_68D8E963
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E960:				; CODE XREF: .text:68D8E975j
		add	eax, 28h

loc_68D8E963:				; CODE XREF: .text:68D8E958j
		test	byte ptr [eax+27h], 20h
		jz	short loc_68D8E970
		test	edx, edx
		jz	short loc_68D8E922
		sub	edx, 1

loc_68D8E970:				; CODE XREF: .text:68D8E967j
		add	ecx, 1
		cmp	ecx, ebx
		jb	short loc_68D8E960
		xor	eax, eax
		jmp	short loc_68D8E922
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8E980	proc near		; CODE XREF: sub_68D8DFC0+7Dp
		cmp	word ptr ds:68D80000h, 5A4Dh
		jz	short loc_68D8E990

loc_68D8E98B:				; CODE XREF: sub_68D8E980+25j
		xor	eax, eax

locret_68D8E98D:			; CODE XREF: sub_68D8E980+32j
					; sub_68D8E980+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8E990:				; CODE XREF: sub_68D8E980+9j
		mov	eax, ds:68D8003Ch
		cmp	dword ptr [eax+68D80000h], 4550h
		lea	edx, [eax+68D80000h]
		jnz	short loc_68D8E98B
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 68D80000h
		jz	short locret_68D8E98D
		xor	eax, eax
		jmp	short locret_68D8E98D
sub_68D8E980	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:68D80000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_68D8E9D2

loc_68D8E9CD:				; CODE XREF: .text:68D8E9E7j
					; .text:68D8E9EFj ...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_68D8E9D2:				; CODE XREF: .text:68D8E9CBj
		mov	eax, ds:68D8003Ch
		cmp	dword ptr [eax+68D80000h], 4550h
		lea	edx, [eax+68D80000h]
		jnz	short loc_68D8E9CD
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_68D8E9CD
		mov	ebx, [esp+0Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 68D80000h
		test	esi, esi
		jz	short loc_68D8E9CD
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_68D8EA15
; ---------------------------------------------------------------------------

loc_68D8EA12:				; CODE XREF: .text:68D8EA28j
		add	eax, 28h

loc_68D8EA15:				; CODE XREF: .text:68D8EA10j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_68D8EA23
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_68D8EA30

loc_68D8EA23:				; CODE XREF: .text:68D8EA1Aj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_68D8EA12
		jmp	short loc_68D8E9CD
; ---------------------------------------------------------------------------
		align 10h

loc_68D8EA30:				; CODE XREF: .text:68D8EA21j
		test	eax, eax
		jz	short loc_68D8E9CD
		mov	eax, [eax+24h]
		pop	ebx
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8EA40	proc near		; CODE XREF: .text:68D8EB68p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:68D80000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_68D8EA70

loc_68D8EA5D:				; CODE XREF: sub_68D8EA40+46j
					; sub_68D8EA40+4Ej ...
		xor	eax, eax

loc_68D8EA5F:				; CODE XREF: sub_68D8EA40+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8EA70:				; CODE XREF: sub_68D8EA40+1Bj
		mov	edx, ds:68D8003Ch
		cmp	dword ptr [edx+68D80000h], 4550h
		lea	ecx, [edx+68D80000h]
		jnz	short loc_68D8EA5D
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_68D8EA5D
		mov	esi, [ecx+80h]
		test	esi, esi
		jz	short loc_68D8EA5D
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_68D8EA5D
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
		xor	ecx, ecx
		jmp	short loc_68D8EAB4
; ---------------------------------------------------------------------------

loc_68D8EAB1:				; CODE XREF: sub_68D8EA40+87j
		add	edx, 28h

loc_68D8EAB4:				; CODE XREF: sub_68D8EA40+6Fj
		mov	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_68D8EAC2
		add	ebx, [edx+8]
		cmp	esi, ebx
		jb	short loc_68D8EACB

loc_68D8EAC2:				; CODE XREF: sub_68D8EA40+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_68D8EAB1
		jmp	short loc_68D8EA5D
; ---------------------------------------------------------------------------

loc_68D8EACB:				; CODE XREF: sub_68D8EA40+80j
		test	edx, edx
		lea	esi, [esi+0]
		jz	short loc_68D8EA5D
		add	esi, 68D80000h
		jmp	short loc_68D8EAEA
; ---------------------------------------------------------------------------
		align 10h

loc_68D8EAE0:				; CODE XREF: sub_68D8EA40+AFj
					; sub_68D8EA40+B6j
		test	eax, eax
		jle	short loc_68D8EB00
		sub	eax, 1
		add	esi, 14h

loc_68D8EAEA:				; CODE XREF: sub_68D8EA40+98j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jnz	short loc_68D8EAE0
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_68D8EAE0
		jmp	loc_68D8EA5D
; ---------------------------------------------------------------------------
		align 10h

loc_68D8EB00:				; CODE XREF: sub_68D8EA40+A2j
		mov	eax, 68D80000h
		add	eax, [esi+0Ch]
		jmp	loc_68D8EA5F
sub_68D8EA40	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		xor	edx, edx
		sub	esp, 18h
		mov	eax, ds:dword_68D96524
		test	eax, eax
		jz	short loc_68D8EB62

loc_68D8EB1F:				; CODE XREF: .text:68D8EBAFj
					; .text:68D8EBCAj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68D8EB24:				; CODE XREF: .text:68D8EB93j
					; .text:68D8EB98j
		movzx	edx, byte ptr [eax+3]
		cmp	dl, 43h
		jz	short loc_68D8EB32
		cmp	dl, 63h
		jnz	short loc_68D8EB60

loc_68D8EB32:				; CODE XREF: .text:68D8EB2Bj
		movzx	edx, byte ptr [eax+4]
		cmp	dl, 52h
		jz	short loc_68D8EB42
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_68D8EB60

loc_68D8EB42:				; CODE XREF: .text:68D8EB39j
		movzx	edx, byte ptr [eax+5]
		cmp	dl, 54h
		jz	short loc_68D8EB9E
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_68D8EB9E
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_68D8EB9E
		lea	esi, [esi+0]

loc_68D8EB60:				; CODE XREF: .text:68D8EB30j
					; .text:68D8EB40j ...
		mov	edx, ebx

loc_68D8EB62:				; CODE XREF: .text:68D8EB1Dj
					; .text:68D8EB9Cj
		lea	ebx, [edx+1]
		mov	[esp], edx
		call	sub_68D8EA40
		test	eax, eax
		jz	short loc_68D8EBB5
		movzx	edx, byte ptr [eax]
		cmp	dl, 4Dh
		jz	short loc_68D8EB7E
		cmp	dl, 6Dh
		jnz	short loc_68D8EB60

loc_68D8EB7E:				; CODE XREF: .text:68D8EB77j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 53h
		jz	short loc_68D8EB8C
		cmp	dl, 73h
		jnz	short loc_68D8EB60

loc_68D8EB8C:				; CODE XREF: .text:68D8EB85j
		movzx	edx, byte ptr [eax+2]
		cmp	dl, 56h
		jz	short loc_68D8EB24
		cmp	dl, 76h
		jz	short loc_68D8EB24
		mov	edx, ebx
		jmp	short loc_68D8EB62
; ---------------------------------------------------------------------------

loc_68D8EB9E:				; CODE XREF: .text:68D8EB49j
					; .text:68D8EB50j ...
		mov	[esp], eax
		call	ds:GetModuleHandleA
		test	eax, eax
		push	ebx
		mov	ds:dword_68D96524, eax
		jnz	loc_68D8EB1F

loc_68D8EBB5:				; CODE XREF: .text:68D8EB6Fj
		mov	dword ptr [esp], offset	aMsvcrt_dll ; "msvcrt.dll"
		call	ds:LoadLibraryW
		sub	esp, 4
		mov	ds:dword_68D96524, eax
		jmp	loc_68D8EB1F
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], esi
		mov	esi, [esp+30h]
		mov	[esp+1Ch], ebx
		mov	[esp+24h], edi
		mov	[esp+28h], ebp
		mov	[esp], esi
		call	strlen
		cmp	eax, 8
		jbe	short loc_68D8EC10

loc_68D8EBF4:				; CODE XREF: .text:68D8EC19j
					; .text:68D8EC30j ...
		xor	ebx, ebx

loc_68D8EBF6:				; CODE XREF: .text:68D8EC6Aj
		mov	eax, ebx
		mov	esi, [esp+20h]
		mov	ebx, [esp+1Ch]
		mov	edi, [esp+24h]
		mov	ebp, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68D8EC10:				; CODE XREF: .text:68D8EBF2j
		cmp	word ptr ds:68D80000h, 5A4Dh
		jnz	short loc_68D8EBF4
		mov	eax, ds:68D8003Ch
		cmp	dword ptr [eax+68D80000h], 4550h
		lea	edx, [eax+68D80000h]
		jnz	short loc_68D8EBF4
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_68D8EBF4
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_68D8EBF4
		movzx	eax, ax
		xor	edi, edi
		lea	ebx, [edx+eax+18h]
		jmp	short loc_68D8EC54
; ---------------------------------------------------------------------------

loc_68D8EC51:				; CODE XREF: .text:68D8EC71j
		add	ebx, 28h

loc_68D8EC54:				; CODE XREF: .text:68D8EC4Fj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], esi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jz	short loc_68D8EBF6
		add	edi, 1
		cmp	edi, ebp
		jb	short loc_68D8EC51
		jmp	loc_68D8EBF4
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8EC80	proc near		; CODE XREF: _nl_load_domain+425p
					; sub_68D82C80+16p ...

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_68D8ECA1

loc_68D8EC8C:				; CODE XREF: sub_68D8EC80+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_68D8EC8C

loc_68D8ECA1:				; CODE XREF: sub_68D8EC80+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
sub_68D8EC80	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _strdup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _open]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _close]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _getcwd]
		align 10h
		mov	eax, [esp+0Ch]
		mov	edx, [esp+8]
		mov	ecx, [esp+4]
		lock cmpxchg [ecx], edx
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_68D8ED00
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8ED00	proc near		; CODE XREF: sub_68D81040+53p
					; sub_68D81040+C8p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lock cmpxchg [ecx], edx
		retn	0Ch
sub_68D8ED00	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		lock xchg eax, [edx]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8ED30	proc near		; CODE XREF: sub_68D81040+1A2p
					; sub_68D81040+211p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lock xchg eax, [edx]
		retn	8
sub_68D8ED30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8ED40	proc near		; CODE XREF: libintl_dcigettext+308p

Size		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		xor	eax, eax
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_4]
		mov	esi, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+arg_8]
		test	ebx, ebx
		jz	short loc_68D8ED9F

loc_68D8ED58:				; CODE XREF: sub_68D8ED40+6Bj
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_68D8ED7D

loc_68D8ED5E:				; CODE XREF: sub_68D8ED40+3Bj
		mov	eax, [eax]
		mov	[esp+1Ch+Size],	esi
		mov	[esp+1Ch+var_18], eax
		call	edi
		cmp	eax, 0
		jz	short loc_68D8EDB0
		xchg	ax, ax
		jl	short loc_68D8EDA6
		mov	ebx, [ebx]
		add	ebx, 8
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_68D8ED5E

loc_68D8ED7D:				; CODE XREF: sub_68D8ED40+1Cj
		mov	[esp+1Ch+Size],	0Ch ; Size
		call	malloc
		test	eax, eax
		jz	short loc_68D8ED9F
		mov	[ebx], eax
		mov	[eax], esi
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+4], 0

loc_68D8ED9F:				; CODE XREF: sub_68D8ED40+16j
					; sub_68D8ED40+4Bj
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_68D8EDA6:				; CODE XREF: sub_68D8ED40+30j
		mov	ebx, [ebx]
		add	ebx, 4
		jmp	short loc_68D8ED58
; ---------------------------------------------------------------------------
		align 10h

loc_68D8EDB0:				; CODE XREF: sub_68D8ED40+2Cj
		mov	eax, [ebx]
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_68D8ED40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8EDC0(char	*, size_t, char	*, char)
sub_68D8EDC0	proc near		; CODE XREF: sub_68D86BD0+CDFp
					; sub_68D86BD0+F94p ...

DstBuf		= dword	ptr -1Ch
MaxCount	= dword	ptr -18h
Format		= dword	ptr -14h
ArgList		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		sub	esp, 1Ch
		lea	eax, [esp+1Ch+arg_C]
		mov	[esp+1Ch+ArgList], eax ; ArgList
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+Format], eax ;	Format
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+MaxCount], eax	; MaxCount
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+DstBuf], eax ;	DstBuf
		call	_vsnprintf
		add	esp, 1Ch
		retn
sub_68D8EDC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_68D8EDF0	proc near		; CODE XREF: sub_68D86BD0+1A2Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ecx, [esp+4+arg_4]
		mov	ebx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_68D8EE21
		cmp	byte ptr [ebx],	0
		jz	short loc_68D8EE21
		mov	eax, 1
		jmp	short loc_68D8EE1B
; ---------------------------------------------------------------------------
		align 10h

loc_68D8EE10:				; CODE XREF: sub_68D8EDF0+2Dj
		cmp	byte ptr [ebx+eax], 0
		lea	edx, [eax+1]
		jz	short loc_68D8EE1F
		mov	eax, edx

loc_68D8EE1B:				; CODE XREF: sub_68D8EDF0+17j
		cmp	ecx, eax
		ja	short loc_68D8EE10

loc_68D8EE1F:				; CODE XREF: sub_68D8EDF0+27j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_68D8EE21:				; CODE XREF: sub_68D8EDF0+Bj
					; sub_68D8EDF0+10j
		xor	eax, eax
		pop	ebx
		retn
sub_68D8EDF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_68D8EE30(wchar_t *, size_t, wchar_t *, char)
sub_68D8EE30	proc near		; CODE XREF: sub_68D88B00+CD9p
					; sub_68D88B00+F2Dp ...

Dest		= dword	ptr -1Ch
Count		= dword	ptr -18h
Format		= dword	ptr -14h
Args		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		sub	esp, 1Ch
		lea	eax, [esp+1Ch+arg_C]
		mov	[esp+1Ch+Args],	eax ; Args
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+Format], eax ;	Format
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+Count], eax ; Count
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+Dest],	eax ; Dest
		call	_vsnwprintf
		add	esp, 1Ch
		retn
sub_68D8EE30	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+14h]
		mov	edx, [esp+10h]
		test	eax, eax
		jz	short loc_68D8EE80
		mov	[esp+14h], eax
		mov	[esp+10h], edx
		add	esp, 0Ch
		jmp	loc_68D8E770
; ---------------------------------------------------------------------------
		align 10h

loc_68D8EE80:				; CODE XREF: .text:68D8EE6Dj
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	loc_68D8E6D0
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fopen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION feof]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fgets]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strchr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fclose]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION qsort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION bsearch]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strstr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcspn]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION raise]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getenv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strtoul]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _vsnprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _vsnwprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vsprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcschr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fputwc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfwprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION setlocale]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION atoi]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memmove]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68D8EFF0	proc near		; DATA XREF: .text:68D8F014o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_68D81430
		mov	[esp+18h+var_18], offset sub_68D81480 ;	_onexit_t
		call	sub_68D8DE40
		leave
		retn
sub_68D8EFF0	endp

; ---------------------------------------------------------------------------
		align 10h
dword_68D8F010	dd 0FFFFFFFFh		; DATA XREF: sub_68D8E420-5Br
					; sub_68D8E420-4Co ...
		dd offset sub_68D8EFF0
		dd 0
		dd 0FFFFFFFFh
dword_68D8F020	dd 78h dup(0)		; DATA XREF: .data:off_68D90208o
		dd 380h	dup(?)
_text		ends

; Section 2. (virtual address 00010000)
; Virtual size			: 0000021C (	540.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 0000E600
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; Exported entry  39. libintl_nl_current_default_domain
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 68D90000h
		public libintl_nl_current_default_domain
; char *libintl_nl_current_default_domain
libintl_nl_current_default_domain dd offset libintl_nl_default_default_domain
					; DATA XREF: libintl_textdomain+14r
					; libintl_textdomain:loc_68D8329Cw ...
					; "messages"
; Exported entry  35. libintl_gettext_germanic_plural
		public libintl_gettext_germanic_plural
libintl_gettext_germanic_plural	dd 2, 0Dh ; DATA XREF: libintl_gettext_extract_plural+CBo
		dd offset dword_68D91140
		dd offset dword_68D91154
		align 10h
; char Dest[2]
Dest		db 'C',0                ; DATA XREF: libintl_setlocale+96o
					; libintl_setlocale+B8o ...
		align 4
		dd 0Eh dup(0)
		db 3 dup(0)
byte_68D9005F	db 0			; DATA XREF: libintl_setlocale+9Dw
					; libintl_setlocale+24Cw
; Exported entry  46. libintl_version
		public libintl_version
libintl_version	dd 1200h, 7 dup(0)
dword_68D90080	dd 0A5h, 5Ch, 2, 203Eh,	7Eh, 2,	2014h, 2015h, 2, 301Ch
					; DATA XREF: sub_68D8D040+181o
					; sub_68D8D040+31Bo
		dd 0FF5Eh, 2, 2016h, 2225h, 2, 2212h, 0FF0Dh, 2, 0A2h
		dd 0FFE0h, 2, 0A3h, 0FFE1h, 2, 0ACh, 0FFE2h, 2,	5 dup(0)
dword_68D90100	dd 0A5h, 5Ch, 2, 203Eh,	7Eh, 2,	2014h, 2015h, 2, 0FF5Eh
					; DATA XREF: sub_68D8D040+44Ao
		dd 301Ch, 3, 2225h, 2016h, 3, 0FF0Dh, 2212h, 3,	0FFE0h
		dd 0A2h, 3, 0FFE1h, 0A3h, 3, 0FFE2h, 0ACh, 3, 5	dup(0)
; char *Str2
Str2		dd offset dword_68D95E70 ; DATA	XREF: sub_68D8C960+87r
					; sub_68D8CD60+45o ...
; size_t Size
Size		dd 3			; DATA XREF: sub_68D8C960:loc_68D8C9C0r
					; sub_68D8C960:loc_68D8C9D9r ...
		dd 1, 0
; char *off_68D90190
off_68D90190	dd offset dword_68D95E74 ; DATA	XREF: sub_68D8CD60+16Do
					; sub_68D8D580+89r ...
		dd 3, 2	dup(1)
; void *Src
Src		dd offset dword_68D95E78 ; DATA	XREF: sub_68D8CD60+2C1r
					; sub_68D8D580+97o
; size_t dword_68D901A4
dword_68D901A4	dd 3			; DATA XREF: sub_68D8CD60+2BBr
		dd 1, 2
		dd offset dword_68D95E7C
		dd 3, 2, 4
		dd offset dword_68D95E80
		dd 3, 2, 4
		dd offset aD		; "\x1B$(D"
		dd 4, 2, 5, 8 dup(0)
dword_68D90200	dd 0FFFFFFFFh		; DATA XREF: sub_68D81260+1Bw
					; sub_68D81260+61w
		dd 0FFFFFFFFh
off_68D90208	dd offset dword_68D8F020 ; DATA	XREF: sub_68D8E390+3r
					; sub_68D8E390+12r ...
dword_68D9020C	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w
dword_68D90210	dd 0BB40E64Eh		; DATA XREF: .text:68D8E49Fr
					; sub_68D8E4F0+3r ...
dword_68D90214	dd 44BF19B1h		; DATA XREF: .text:68D8E4A7r
					; sub_68D8E4F0+21w ...
dword_68D90218	dd 0			; DATA XREF: sub_68D81430+6r
					; sub_68D81430+42o
		align 1000h
_data		ends

; Section 3. (virtual address 00011000)
; Virtual size			: 00004F94 (  20372.)
; Section size in file		: 00005000 (  20480.)
; Offset to raw	data for section: 0000EA00
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 68D91000h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: sub_68D81430+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_68D81430+2Ao
		align 4
aDiouxx:				; DATA XREF: _nl_load_domain+688o
					; _nl_load_domain+1068o ...
		unicode	0, <diouxX>
aI64d		db 'I64d',0             ; DATA XREF: _nl_load_domain+F88o
					; _nl_load_domain+1032o
aI64i		db 'I64i',0             ; DATA XREF: _nl_load_domain+F95o
					; _nl_load_domain+103Fo
aI64o		db 'I64o',0             ; DATA XREF: _nl_load_domain+FA5o
aI64u		db 'I64u',0             ; DATA XREF: _nl_load_domain+FB3o
aI64x		db 'I64x',0             ; DATA XREF: _nl_load_domain+FC1o
aI64x_0		db 'I64X',0             ; DATA XREF: _nl_load_domain+FD1o
; char word_68D9104E[]
word_68D9104E	dw 0			; DATA XREF: _nl_load_domain+4E2o
					; _nl_load_domain+557o
; char Mode[]
Mode		db 'r',0                ; DATA XREF: sub_68D82C80+54o
word_68D91052	dw 0			; DATA XREF: _nl_expand_alias:loc_68D83239o
aIso		db 'iso',0              ; DATA XREF: _nl_normalize_codeset+70o
; char VarName[]
VarName		db 'OUTPUT_CHARSET',0   ; DATA XREF: _nl_find_msg:loc_68D8474Ao
; char byte_68D91067
byte_68D91067	db 0			; DATA XREF: _nl_find_msg+654o
; char SubStr[]
SubStr		db 'charset=',0         ; DATA XREF: _nl_find_msg+672o
; char Control[]
Control		db ' ',9,0Ah,0          ; DATA XREF: _nl_find_msg+689o
		align 4
off_68D91078	dd offset loc_68D84B18	; DATA XREF: sub_68D84980+102r
		dd offset loc_68D84AFB	; jump table for switch	statement
		dd offset loc_68D84ADC
		dd offset loc_68D84AD3
		dd offset loc_68D84ACA
		dd offset loc_68D84ABD
		dd offset loc_68D84AB0
		dd offset loc_68D84AA3
		dd offset loc_68D84A96
		dd offset loc_68D84A89
		dd offset loc_68D84B22
byte_68D910A4	db 2Fh,	0		; DATA XREF: libintl_dcigettext+151o
					; libintl_dcigettext+3D3o
aLc_ctype	db 'LC_CTYPE',0         ; DATA XREF: libintl_dcigettext+BCo
aLc_collate	db 'LC_COLLATE',0       ; DATA XREF: libintl_dcigettext+B5o
; char aLc_monetary[]
aLc_monetary	db 'LC_MONETARY',0      ; DATA XREF: libintl_dcigettext+A4o
aLc_numeric	db 'LC_NUMERIC',0       ; DATA XREF: libintl_dcigettext+560o
aLc_time	db 'LC_TIME',0          ; DATA XREF: libintl_dcigettext+555o
aLc_messages	db 'LC_MESSAGES',0      ; DATA XREF: libintl_dcigettext+572o
aLc_all		db 'LC_ALL',0           ; DATA XREF: libintl_dcigettext+696o
aLc_xxx		db 'LC_XXX',0           ; DATA XREF: libintl_dcigettext:loc_68D850ADo
aC_0		db 'C',0                ; DATA XREF: libintl_dcigettext+F6o
					; libintl_dcigettext+1E9o
; char aLanguage[]
aLanguage	db 'LANGUAGE',0         ; DATA XREF: libintl_dcigettext:loc_68D850E0o
a_mo		db '.mo',0              ; DATA XREF: libintl_dcigettext+185o
aPosix		db 'POSIX',0            ; DATA XREF: libintl_dcigettext+1F9o
; char aGettext_log_un[]
aGettext_log_un	db 'GETTEXT_LOG_UNTRANSLATED',0 ; DATA XREF: libintl_dcigettext+509o
; Exported entry  40. libintl_nl_default_default_domain
		public libintl_nl_default_default_domain
; char libintl_nl_default_default_domain[]
libintl_nl_default_default_domain db 'messages',0
					; DATA XREF: libintl_textdomain:loc_68D8329Co
					; libintl_textdomain+26o ...
; Exported entry  41. libintl_nl_default_dirname
		public libintl_nl_default_dirname
; char libintl_nl_default_dirname[2]
libintl_nl_default_dirname db 2	dup(0)	; DATA XREF: sub_68D81490+B8o
					; sub_68D81490+CFo ...
; char aPlural[]
aPlural		db 'plural=',0          ; DATA XREF: libintl_gettext_extract_plural+17o
; char aNplurals[]
aNplurals	db 'nplurals=',0        ; DATA XREF: libintl_gettext_extract_plural+27o
		align 10h
dword_68D91140	dd 5 dup(0)		; DATA XREF: .data:68D9000Co
dword_68D91154	dd 0			; DATA XREF: .data:68D90010o
		dd 2 dup(1), 2 dup(0)
; char Format[]
Format		db 'CP%u',0             ; DATA XREF: locale_charset+Bo
		align 10h
aCp936		db 'CP936',0            ; DATA XREF: locale_charset:loc_68D85427o
					; locale_charset+A1o
aGbk		db 'GBK',0
aCp1361		db 'CP1361',0
aJohab		db 'JOHAB',0
aCp20127	db 'CP20127',0
aAscii_0	db 'ASCII',0
aCp20866	db 'CP20866',0
aKoi8R		db 'KOI8-R',0
aCp20936	db 'CP20936',0
aGb2312		db 'GB2312',0
aCp21866	db 'CP21866',0
aKoi8Ru		db 'KOI8-RU',0
aCp28591	db 'CP28591',0
aIso88591	db 'ISO-8859-1',0
aCp28592	db 'CP28592',0
aIso88592	db 'ISO-8859-2',0
aCp28593	db 'CP28593',0
aIso88593	db 'ISO-8859-3',0
aCp28594	db 'CP28594',0
aIso88594	db 'ISO-8859-4',0
aCp28595	db 'CP28595',0
aIso88595	db 'ISO-8859-5',0
aCp28596	db 'CP28596',0
aIso88596	db 'ISO-8859-6',0
aCp28597	db 'CP28597',0
aIso88597	db 'ISO-8859-7',0
aCp28598	db 'CP28598',0
aIso88598	db 'ISO-8859-8',0
aCp28599	db 'CP28599',0
aIso88599	db 'ISO-8859-9',0
aCp28605	db 'CP28605',0
aIso885915	db 'ISO-8859-15',0
aCp38598	db 'CP38598',0
aIso88598_0	db 'ISO-8859-8',0
aCp51932	db 'CP51932',0
aEucJp		db 'EUC-JP',0
aCp51936	db 'CP51936',0
aGb2312_0	db 'GB2312',0
aCp51949	db 'CP51949',0
aEucKr		db 'EUC-KR',0
aCp51950	db 'CP51950',0
aEucTw		db 'EUC-TW',0
aCp54936	db 'CP54936',0
aGb18030	db 'GB18030',0
aCp65001_0	db 'CP65001',0
aUtf8		db 'UTF-8',0
		align 10h
aAscii		db 'ASCII',0            ; DATA XREF: locale_charset+83o
		align 4
; char aGettext_mui[]
aGettext_mui	db 'GETTEXT_MUI',0      ; DATA XREF: _nl_language_preferences_default:loc_68D854B1o
; CHAR aKernel32[]
aKernel32	db 'kernel32',0         ; DATA XREF: _nl_language_preferences_default+61o
; CHAR aGetuserpreferr[]
aGetuserpreferr	db 'GetUserPreferredUILanguages',0
					; DATA XREF: _nl_language_preferences_default+7Fo
		align 4
; CHAR SubKey[]
SubKey		db 'Control Panel\Desktop\ResourceLocale',0
					; DATA XREF: _nl_language_preferences_default+F8o
; CHAR aGetuserdefault[]
aGetuserdefault	db 'GetUserDefaultUILanguage',0
					; DATA XREF: _nl_language_preferences_default:loc_68D854F9o
		align 20h
; char aLc_all_0[]
aLc_all_0	db 'LC_ALL',0           ; DATA XREF: _nl_locale_name_environ+3o
					; _nl_locale_name_posix+3o ...
; char aLang[]
aLang		db 'LANG',0             ; DATA XREF: _nl_locale_name_environ:loc_68D858D1o
					; _nl_locale_name_posix:loc_68D86851o ...
; char aGettext_mui_0[]
aGettext_mui_0	db 'GETTEXT_MUI',0      ; DATA XREF: sub_68D858F0+Ao
aC		db 'C',0                ; DATA XREF: sub_68D858F0:loc_68D85947o
aAf		db 'af',0               ; DATA XREF: sub_68D858F0+67Bo
aAf_za		db 'af_ZA',0            ; DATA XREF: sub_68D858F0+670o
aSq		db 'sq',0               ; DATA XREF: sub_68D858F0+3D4o
aSq_al		db 'sq_AL',0            ; DATA XREF: sub_68D858F0+3C9o
aGsw		db 'gsw',0              ; DATA XREF: sub_68D858F0+E43o
aGsw_fr		db 'gsw_FR',0           ; DATA XREF: sub_68D858F0+E38o
aAm		db 'am',0               ; DATA XREF: sub_68D858F0+AB0o
aAm_et		db 'am_ET',0            ; DATA XREF: sub_68D858F0+AA5o
aAr		db 'ar',0               ; DATA XREF: sub_68D858F0+D8o
aHy		db 'hy',0               ; DATA XREF: sub_68D858F0+55Bo
aHy_am		db 'hy_AM',0            ; DATA XREF: sub_68D858F0+550o
aAs		db 'as',0               ; DATA XREF: sub_68D858F0+8E7o
aAs_in		db 'as_IN',0            ; DATA XREF: sub_68D858F0+8DCo
aAz		db 'az',0               ; DATA XREF: sub_68D858F0+568o
					; .rdata:68D91B08o ...
aBa		db 'ba',0               ; DATA XREF: sub_68D858F0+C47o
aBa_ru		db 'ba_RU',0            ; DATA XREF: sub_68D858F0+C3Co
aEu		db 'eu',0               ; DATA XREF: sub_68D858F0+595o
aEu_es		db 'eu_ES',0            ; DATA XREF: sub_68D858F0+58Ao
aBe		db 'be',0               ; DATA XREF: sub_68D858F0+493o
aBe_by		db 'be_BY',0            ; DATA XREF: sub_68D858F0+488o
aBn		db 'bn',0               ; DATA XREF: sub_68D858F0+803o
aBr		db 'br',0               ; DATA XREF: sub_68D858F0+DC6o
aBr_fr		db 'br_FR',0            ; DATA XREF: sub_68D858F0+DBBo
aBg		db 'bg',0               ; DATA XREF: sub_68D858F0+FAo
aBg_bg		db 'bg_BG',0            ; DATA XREF: sub_68D858F0+F3o
aMy		db 'my',0               ; DATA XREF: sub_68D858F0+9BFo
aMy_mm		db 'my_MM',0            ; DATA XREF: sub_68D858F0+9B4o
aKm		db 'km',0               ; DATA XREF: sub_68D858F0+98Do
aKm_kh		db 'km_KH',0            ; DATA XREF: sub_68D858F0+982o
aCa		db 'ca',0               ; DATA XREF: sub_68D858F0+10Co
aCa_es		db 'ca_ES',0            ; DATA XREF: sub_68D858F0+105o
aChr		db 'chr',0              ; DATA XREF: sub_68D858F0+A76o
aChr_us		db 'chr_US',0           ; DATA XREF: sub_68D858F0+A6Bo
aZh		db 'zh',0               ; DATA XREF: sub_68D858F0+117o
					; .rdata:68D91BD8o ...
aCo		db 'co',0               ; DATA XREF: sub_68D858F0+E2Ao
aCo_fr		db 'co_FR',0            ; DATA XREF: sub_68D858F0+E1Fo
aHr		db 'hr',0               ; DATA XREF: sub_68D858F0+392o
					; .rdata:off_68D91CE0o	...
aCs		db 'cs',0               ; DATA XREF: sub_68D858F0+140o
aCs_cz		db 'cs_CZ',0            ; DATA XREF: sub_68D858F0+135o
aDa		db 'da',0               ; DATA XREF: sub_68D858F0+159o
aDa_dk		db 'da_DK',0            ; DATA XREF: sub_68D858F0+14Eo
aPrs		db 'prs',0              ; DATA XREF: sub_68D858F0+EC0o
aPrs_af		db 'prs_AF',0           ; DATA XREF: sub_68D858F0+EB5o
aDv		db 'dv',0               ; DATA XREF: sub_68D858F0+B77o
aDv_mv		db 'dv_MV',0            ; DATA XREF: sub_68D858F0+B6Co
aNl		db 'nl',0               ; DATA XREF: sub_68D858F0+2BAo
aBin		db 'bin',0              ; DATA XREF: sub_68D858F0+B90o
aBin_ng		db 'bin_NG',0           ; DATA XREF: sub_68D858F0+B85o
aEn		db 'en',0               ; DATA XREF: sub_68D858F0+1A0o
aEt		db 'et',0               ; DATA XREF: sub_68D858F0+4C5o
aEt_ee		db 'et_EE',0            ; DATA XREF: sub_68D858F0+4BAo
aFo		db 'fo',0               ; DATA XREF: sub_68D858F0+6ADo
aFo_fo		db 'fo_FO',0            ; DATA XREF: sub_68D858F0+6A2o
aFa		db 'fa',0               ; DATA XREF: sub_68D858F0+529o
aFa_ir		db 'fa_IR',0            ; DATA XREF: sub_68D858F0+51Eo
aFi		db 'fi',0               ; DATA XREF: sub_68D858F0+1EEo
aFi_fi		db 'fi_FI',0            ; DATA XREF: sub_68D858F0+1E3o
aFr		db 'fr',0               ; DATA XREF: sub_68D858F0+1FBo
					; .rdata:68D91EB8o
aFy		db 'fy',0               ; DATA XREF: sub_68D858F0+B2Co
aFy_nl		db 'fy_NL',0            ; DATA XREF: sub_68D858F0+B21o
aFf		db 'ff',0               ; DATA XREF: sub_68D858F0+BA9o
aFf_ng		db 'ff_NG',0            ; DATA XREF: sub_68D858F0+B9Eo
aGa		db 'ga',0               ; DATA XREF: sub_68D858F0+70Ao
aGl		db 'gl',0               ; DATA XREF: sub_68D858F0+9D8o
aGl_es		db 'gl_ES',0            ; DATA XREF: sub_68D858F0+9CDo
aKa		db 'ka',0               ; DATA XREF: sub_68D858F0+694o
aKa_ge		db 'ka_GE',0            ; DATA XREF: sub_68D858F0+689o
aDe		db 'de',0               ; DATA XREF: sub_68D858F0+166o
aEl		db 'el',0               ; DATA XREF: sub_68D858F0+193o
aEl_gr		db 'el_GR',0            ; DATA XREF: sub_68D858F0+188o
aKl		db 'kl',0               ; DATA XREF: sub_68D858F0+C79o
aKl_gl		db 'kl_GL',0            ; DATA XREF: sub_68D858F0+C6Eo
aGn		db 'gn',0               ; DATA XREF: sub_68D858F0+CFEo
aGn_py		db 'gn_PY',0            ; DATA XREF: sub_68D858F0+CF3o
aGu		db 'gu',0               ; DATA XREF: sub_68D858F0+851o
aGu_in		db 'gu_IN',0            ; DATA XREF: sub_68D858F0+846o
aHa_ng		db 'ha_NG',0            ; DATA XREF: sub_68D858F0+BB7o
aHa		db 'ha',0               ; DATA XREF: sub_68D858F0+BC2o
aCpe		db 'cpe',0              ; DATA XREF: sub_68D858F0+D17o
aCpe_us		db 'cpe_US',0           ; DATA XREF: sub_68D858F0+D0Co
aHe		db 'he',0               ; DATA XREF: sub_68D858F0+228o
aHe_il		db 'he_IL',0            ; DATA XREF: sub_68D858F0+21Do
aHi		db 'hi',0               ; DATA XREF: sub_68D858F0+6C6o
aHi_in		db 'hi_IN',0            ; DATA XREF: sub_68D858F0+6BBo
aHu		db 'hu',0               ; DATA XREF: sub_68D858F0+241o
aHu_hu		db 'hu_HU',0            ; DATA XREF: sub_68D858F0+236o
aNic		db 'nic',0              ; DATA XREF: sub_68D858F0+BDBo
aNic_ng		db 'nic_NG',0           ; DATA XREF: sub_68D858F0+BD0o
aIs		db 'is',0               ; DATA XREF: sub_68D858F0+25Ao
aIs_is		db 'is_IS',0            ; DATA XREF: sub_68D858F0+24Fo
aIg		db 'ig',0               ; DATA XREF: sub_68D858F0+C92o
aIg_ng		db 'ig_NG',0            ; DATA XREF: sub_68D858F0+C87o
aId		db 'id',0               ; DATA XREF: sub_68D858F0+461o
aId_id		db 'id_ID',0            ; DATA XREF: sub_68D858F0+456o
aIu		db 'iu',0               ; DATA XREF: sub_68D858F0+A83o
					; .rdata:68D91F48o ...
aIt		db 'it',0               ; DATA XREF: sub_68D858F0+267o
aJa		db 'ja',0               ; DATA XREF: sub_68D858F0+294o
aJa_jp		db 'ja_JP',0            ; DATA XREF: sub_68D858F0+289o
aKn		db 'kn',0               ; DATA XREF: sub_68D858F0+8B5o
aKn_in		db 'kn_IN',0            ; DATA XREF: sub_68D858F0+8AAo
aKr		db 'kr',0               ; DATA XREF: sub_68D858F0+CABo
aKr_ng		db 'kr_NG',0            ; DATA XREF: sub_68D858F0+CA0o
aKs		db 'ks',0               ; DATA XREF: sub_68D858F0+ADEo
aKk		db 'kk',0               ; DATA XREF: sub_68D858F0+771o
aKk_kz		db 'kk_KZ',0            ; DATA XREF: sub_68D858F0+766o
aQut		db 'qut',0              ; DATA XREF: sub_68D858F0+E75o
aQut_gt		db 'qut_GT',0           ; DATA XREF: sub_68D858F0+E6Ao
aRw		db 'rw',0               ; DATA XREF: sub_68D858F0+E8Eo
aRw_rw		db 'rw_RW',0            ; DATA XREF: sub_68D858F0+E83o
aKok		db 'kok',0              ; DATA XREF: sub_68D858F0+9F1o
aKok_in		db 'kok_IN',0           ; DATA XREF: sub_68D858F0+9E6o
aKo		db 'ko',0               ; DATA XREF: sub_68D858F0+2ADo
aKo_kr		db 'ko_KR',0            ; DATA XREF: sub_68D858F0+2A2o
aKy		db 'ky',0               ; DATA XREF: sub_68D858F0+78Ao
aKy_kg		db 'ky_KG',0            ; DATA XREF: sub_68D858F0+77Fo
aLo		db 'lo',0               ; DATA XREF: sub_68D858F0+9A6o
aLo_la		db 'lo_LA',0            ; DATA XREF: sub_68D858F0+99Bo
aLa		db 'la',0               ; DATA XREF: sub_68D858F0+D30o
aLa_va		db 'la_VA',0            ; DATA XREF: sub_68D858F0+D25o
aLv		db 'lv',0               ; DATA XREF: sub_68D858F0+4DEo
aLv_lv		db 'lv_LV',0            ; DATA XREF: sub_68D858F0+4D3o
aLt		db 'lt',0               ; DATA XREF: sub_68D858F0+4F7o
aLt_lt		db 'lt_LT',0            ; DATA XREF: sub_68D858F0+4ECo
aLb		db 'lb',0               ; DATA XREF: sub_68D858F0+C60o
aLb_lu		db 'lb_LU',0            ; DATA XREF: sub_68D858F0+C55o
aMk		db 'mk',0               ; DATA XREF: sub_68D858F0+5CCo
aMk_mk		db 'mk_MK',0            ; DATA XREF: sub_68D858F0+5C1o
aMs		db 'ms',0               ; DATA XREF: sub_68D858F0+744o
aMl		db 'ml',0               ; DATA XREF: sub_68D858F0+8CEo
aMl_in		db 'ml_IN',0            ; DATA XREF: sub_68D858F0+8C3o
aMt		db 'mt',0               ; DATA XREF: sub_68D858F0+6DFo
aMt_mt		db 'mt_MT',0            ; DATA XREF: sub_68D858F0+6D4o
aMni		db 'mni',0              ; DATA XREF: sub_68D858F0+A0Ao
aMni_in		db 'mni_IN',0           ; DATA XREF: sub_68D858F0+9FFo
aMi		db 'mi',0               ; DATA XREF: sub_68D858F0+DF8o
aMi_nz		db 'mi_NZ',0            ; DATA XREF: sub_68D858F0+DEDo
aArn		db 'arn',0              ; DATA XREF: sub_68D858F0+D94o
aArn_cl		db 'arn_CL',0           ; DATA XREF: sub_68D858F0+D89o
aMr		db 'mr',0               ; DATA XREF: sub_68D858F0+900o
aMr_in		db 'mr_IN',0            ; DATA XREF: sub_68D858F0+8F5o
aMoh		db 'moh',0              ; DATA XREF: sub_68D858F0+DADo
aMoh_ca		db 'moh_CA',0           ; DATA XREF: sub_68D858F0+DA2o
aMn		db 'mn',0               ; DATA XREF: sub_68D858F0+926o
					; .rdata:68D92028o ...
aNe		db 'ne',0               ; DATA XREF: sub_68D858F0+AFFo
aNo		db 'no',0               ; DATA XREF: sub_68D858F0+2DBo
					; .rdata:68D920E8o ...
aOc		db 'oc',0               ; DATA XREF: sub_68D858F0+E11o
aOc_fr		db 'oc_FR',0            ; DATA XREF: sub_68D858F0+E06o
aOr		db 'or',0               ; DATA XREF: sub_68D858F0+86Ao
aOr_in		db 'or_IN',0            ; DATA XREF: sub_68D858F0+85Fo
aOm		db 'om',0               ; DATA XREF: sub_68D858F0+CC4o
aOm_et		db 'om_ET',0            ; DATA XREF: sub_68D858F0+CB9o
aPap		db 'pap',0              ; DATA XREF: sub_68D858F0+D7Bo
aPap_an		db 'pap_AN',0           ; DATA XREF: sub_68D858F0+D70o
aPs		db 'ps',0               ; DATA XREF: sub_68D858F0+B45o
aPs_af		db 'ps_AF',0            ; DATA XREF: sub_68D858F0+B3Ao
aPl		db 'pl',0               ; DATA XREF: sub_68D858F0+308o
aPl_pl		db 'pl_PL',0            ; DATA XREF: sub_68D858F0+2FDo
aPt		db 'pt',0               ; DATA XREF: sub_68D858F0+315o
aPa		db 'pa',0               ; DATA XREF: sub_68D858F0+824o
aQu		db 'qu',0               ; DATA XREF: sub_68D858F0+C01o
aRo		db 'ro',0               ; DATA XREF: sub_68D858F0+34Fo
aRm		db 'rm',0               ; DATA XREF: sub_68D858F0+342o
aRm_ch		db 'rm_CH',0            ; DATA XREF: sub_68D858F0+337o
aRu		db 'ru',0               ; DATA XREF: sub_68D858F0+370o
aSe		db 'se',0               ; DATA XREF: sub_68D858F0+6EDo
					; .rdata:off_68D92220o	...
aSa		db 'sa',0               ; DATA XREF: sub_68D858F0+919o
aSa_in		db 'sa_IN',0            ; DATA XREF: sub_68D858F0+90Eo
aGd		db 'gd',0               ; DATA XREF: sub_68D858F0+ED9o
aGd_gb		db 'gd_GB',0            ; DATA XREF: sub_68D858F0+ECEo
					; .rdata:off_68D91EE4o
aSd		db 'sd',0               ; DATA XREF: sub_68D858F0+A17o
aSi		db 'si',0               ; DATA XREF: sub_68D858F0+A5Do
aSi_lk		db 'si_LK',0            ; DATA XREF: sub_68D858F0+A52o
aSk		db 'sk',0               ; DATA XREF: sub_68D858F0+3BBo
aSk_sk		db 'sk_SK',0            ; DATA XREF: sub_68D858F0+3B0o
aSl		db 'sl',0               ; DATA XREF: sub_68D858F0+4ACo
aSl_si		db 'sl_SI',0            ; DATA XREF: sub_68D858F0+4A1o
aSo		db 'so',0               ; DATA XREF: sub_68D858F0+D49o
aSo_so		db 'so_SO',0            ; DATA XREF: sub_68D858F0+D3Eo
aWen		db 'wen',0              ; DATA XREF: sub_68D858F0+5A3o
					; .rdata:68D922ECo ...
aNso		db 'nso',0              ; DATA XREF: sub_68D858F0+C2Eo
aNso_za		db 'nso_ZA',0           ; DATA XREF: sub_68D858F0+C23o
aEs		db 'es',0               ; DATA XREF: sub_68D858F0+1C1o
aBnt		db 'bnt',0              ; DATA XREF: sub_68D858F0+5E5o
aBnt_tz		db 'bnt_TZ',0           ; DATA XREF: sub_68D858F0+5DAo
aSw		db 'sw',0               ; DATA XREF: sub_68D858F0+7A3o
aSw_ke		db 'sw_KE',0            ; DATA XREF: sub_68D858F0+798o
aSv		db 'sv',0               ; DATA XREF: sub_68D858F0+3E1o
aSyr		db 'syr',0              ; DATA XREF: sub_68D858F0+A44o
aSyr_sy		db 'syr_SY',0           ; DATA XREF: sub_68D858F0+A39o
aTl		db 'tl',0               ; DATA XREF: sub_68D858F0+B5Eo
aTl_ph		db 'tl_PH',0            ; DATA XREF: sub_68D858F0+B53o
aTg_tj		db 'tg_TJ',0            ; DATA XREF: sub_68D858F0+505o
aTg		db 'tg',0               ; DATA XREF: sub_68D858F0+510o
aBer		db 'ber',0              ; DATA XREF: sub_68D858F0+ABDo
					; .rdata:68D924A8o ...
aTa		db 'ta',0               ; DATA XREF: sub_68D858F0+883o
aTa_in		db 'ta_IN',0            ; DATA XREF: sub_68D858F0+878o
aTt		db 'tt',0               ; DATA XREF: sub_68D858F0+7F6o
aTt_ru		db 'tt_RU',0            ; DATA XREF: sub_68D858F0+7EBo
aTe		db 'te',0               ; DATA XREF: sub_68D858F0+89Co
aTe_in		db 'te_IN',0            ; DATA XREF: sub_68D858F0+891o
aTh		db 'th',0               ; DATA XREF: sub_68D858F0+40Eo
aTh_th		db 'th_TH',0            ; DATA XREF: sub_68D858F0+403o
aBo		db 'bo',0               ; DATA XREF: sub_68D858F0+947o
					; .rdata:off_68D92524o
aTi		db 'ti',0               ; DATA XREF: sub_68D858F0+CD1o
aTs		db 'ts',0               ; DATA XREF: sub_68D858F0+5FEo
aTs_za		db 'ts_ZA',0            ; DATA XREF: sub_68D858F0+5F3o
aTn		db 'tn',0               ; DATA XREF: sub_68D858F0+617o
aTn_za		db 'tn_ZA',0            ; DATA XREF: sub_68D858F0+60Co
aTr		db 'tr',0               ; DATA XREF: sub_68D858F0+427o
aTr_tr		db 'tr_TR',0            ; DATA XREF: sub_68D858F0+41Co
aTk		db 'tk',0               ; DATA XREF: sub_68D858F0+7BCo
aTk_tm		db 'tk_TM',0            ; DATA XREF: sub_68D858F0+7B1o
aUg		db 'ug',0               ; DATA XREF: sub_68D858F0+DDFo
aUg_cn		db 'ug_CN',0            ; DATA XREF: sub_68D858F0+DD4o
aUk		db 'uk',0               ; DATA XREF: sub_68D858F0+47Ao
aUk_ua		db 'uk_UA',0            ; DATA XREF: sub_68D858F0+46Fo
aUr		db 'ur',0               ; DATA XREF: sub_68D858F0+434o
aUz		db 'uz',0               ; DATA XREF: sub_68D858F0+7C9o
					; .rdata:68D92588o ...
aVe		db 've',0               ; DATA XREF: sub_68D858F0+630o
aVe_za		db 've_ZA',0            ; DATA XREF: sub_68D858F0+625o
aVi		db 'vi',0               ; DATA XREF: sub_68D858F0+542o
aVi_vn		db 'vi_VN',0            ; DATA XREF: sub_68D858F0+537o
aCy		db 'cy',0               ; DATA XREF: sub_68D858F0+974o
aCy_gb		db 'cy_GB',0            ; DATA XREF: sub_68D858F0+969o
aWo		db 'wo',0               ; DATA XREF: sub_68D858F0+EA7o
aWo_sn		db 'wo_SN',0            ; DATA XREF: sub_68D858F0+E9Co
aXh		db 'xh',0               ; DATA XREF: sub_68D858F0+649o
aXh_za		db 'xh_ZA',0            ; DATA XREF: sub_68D858F0+63Eo
aSah		db 'sah',0              ; DATA XREF: sub_68D858F0+E5Co
aSah_ru		db 'sah_RU',0           ; DATA XREF: sub_68D858F0+E51o
aIi		db 'ii',0               ; DATA XREF: sub_68D858F0+D62o
aIi_cn		db 'ii_CN',0            ; DATA XREF: sub_68D858F0+D57o
aYi		db 'yi',0               ; DATA XREF: sub_68D858F0+737o
aYi_il		db 'yi_IL',0            ; DATA XREF: sub_68D858F0+72Co
aYo		db 'yo',0               ; DATA XREF: sub_68D858F0+BF4o
aYo_ng		db 'yo_NG',0            ; DATA XREF: sub_68D858F0+BE9o
aZu		db 'zu',0               ; DATA XREF: sub_68D858F0+662o
aZu_za		db 'zu_ZA',0            ; DATA XREF: sub_68D858F0+657o
		align 4
off_68D917BC	dd offset loc_68D85947,	offset loc_68D859C5, offset loc_68D859DF
					; DATA XREF: sub_68D858F0:loc_68D85950r
		dd offset loc_68D859F1,	offset loc_68D85A03, offset loc_68D85A21 ; jump	table for switch statement
		dd offset loc_68D85A3A,	offset loc_68D85A53, offset loc_68D85A74
		dd offset loc_68D85A8D,	offset loc_68D85AAE, offset loc_68D85ACF
		dd offset loc_68D85AE8,	offset loc_68D85B09, offset loc_68D85B22
		dd offset loc_68D85B3B,	offset loc_68D85B54, offset loc_68D85B75
		dd offset loc_68D85B8E,	offset loc_68D85BA7, offset loc_68D85BC8
		dd offset loc_68D85BE9,	offset loc_68D85C02, offset loc_68D85C23
		dd offset loc_68D85C3C,	offset loc_68D85C5D, offset loc_68D85C7E
		dd offset loc_68D85C9C,	offset loc_68D85CB5, offset loc_68D85CCE
		dd offset loc_68D85CEF,	offset loc_68D85D08, offset loc_68D85D21
		dd offset loc_68D85D42,	offset loc_68D85D5B, offset loc_68D85D74
		dd offset loc_68D85D8D,	offset loc_68D85DA6, offset loc_68D85DBF
		dd offset loc_68D85DD8,	offset loc_68D85DF1, offset loc_68D85E0A
		dd offset loc_68D85E23,	offset loc_68D85E3C, offset loc_68D85E55
		dd offset loc_68D85E76,	offset loc_68D85E8F, offset loc_68D85EAD
		dd offset loc_68D85EC6,	offset loc_68D85EDF, offset loc_68D85EF8
		dd offset loc_68D85F11,	offset loc_68D85F2A, offset loc_68D85F43
		dd offset loc_68D85F5C,	offset loc_68D85F75, offset loc_68D85F8E
		dd offset loc_68D85FA7,	offset loc_68D85FC0, offset loc_68D85FD9
		dd offset loc_68D85FF7,	offset loc_68D86018, offset loc_68D86031
		dd offset loc_68D86052,	offset loc_68D8606B, offset loc_68D86084
		dd offset loc_68D8609D,	offset loc_68D860B6, offset loc_68D860D7
		dd offset loc_68D860F0,	offset loc_68D86111, offset loc_68D86132
		dd offset loc_68D8614B,	offset loc_68D86164, offset loc_68D8617D
		dd offset loc_68D86196,	offset loc_68D861AF, offset loc_68D861C8
		dd offset loc_68D861E1,	offset loc_68D861FA, offset loc_68D86213
		dd offset loc_68D86234,	offset loc_68D86255, offset loc_68D8626E
		dd offset loc_68D86287,	offset loc_68D862A0, offset loc_68D862B9
		dd offset loc_68D862D2,	offset loc_68D862EB, offset loc_68D86304
		dd offset loc_68D86325,	offset loc_68D8633E, offset loc_68D86357
		dd offset loc_68D86370,	offset loc_68D86391, offset loc_68D863AA
		dd offset loc_68D863CB,	offset loc_68D863EC, offset loc_68D8640D
		dd offset loc_68D86426,	offset loc_68D8643F, offset loc_68D86458
		dd offset loc_68D86471,	offset loc_68D8648A, offset loc_68D864A3
		dd offset loc_68D864BC,	offset loc_68D864D5, offset loc_68D864EE
		dd offset loc_68D8650F,	offset loc_68D86528, offset loc_68D86541
		dd offset loc_68D8655A,	offset loc_68D86573, offset loc_68D8658C
		dd offset loc_68D865A5,	offset loc_68D865BE, offset loc_68D865DF
		dd offset loc_68D865F8,	offset loc_68D86611, offset loc_68D8662A
		dd offset loc_68D86643,	offset loc_68D8665C, offset loc_68D86675
		dd offset loc_68D85947,	offset loc_68D8668E, offset loc_68D85947
		dd offset loc_68D866A7,	offset loc_68D85947, offset loc_68D866C0
		dd offset loc_68D866D9,	offset loc_68D866F2, offset loc_68D8670B
		dd offset loc_68D86724,	offset loc_68D8673D, offset loc_68D86756
		dd offset loc_68D8676F,	offset loc_68D86788, offset loc_68D85947
		dd offset loc_68D85947,	offset loc_68D85947, offset loc_68D867A1
		dd offset loc_68D85947,	offset loc_68D85947, offset loc_68D85947
		dd offset loc_68D85947,	offset loc_68D867BA
aAr_sa		db 'ar_SA',0            ; DATA XREF: .rdata:off_68D91A80o
aAr_iq		db 'ar_IQ',0            ; DATA XREF: .rdata:68D91A84o
aAr_eg		db 'ar_EG',0            ; DATA XREF: .rdata:68D91A88o
aAr_ly		db 'ar_LY',0            ; DATA XREF: .rdata:68D91A8Co
aAr_dz		db 'ar_DZ',0            ; DATA XREF: .rdata:68D91A90o
aAr_ma		db 'ar_MA',0            ; DATA XREF: .rdata:68D91A94o
aAr_tn		db 'ar_TN',0            ; DATA XREF: .rdata:68D91A98o
aAr_om		db 'ar_OM',0            ; DATA XREF: .rdata:68D91A9Co
aAr_ye		db 'ar_YE',0            ; DATA XREF: .rdata:68D91AA0o
aAr_sy		db 'ar_SY',0            ; DATA XREF: .rdata:68D91AA4o
aAr_jo		db 'ar_JO',0            ; DATA XREF: .rdata:68D91AA8o
aAr_lb		db 'ar_LB',0            ; DATA XREF: .rdata:68D91AACo
aAr_kw		db 'ar_KW',0            ; DATA XREF: .rdata:68D91AB0o
aAr_ae		db 'ar_AE',0            ; DATA XREF: .rdata:68D91AB4o
aAr_bh		db 'ar_BH',0            ; DATA XREF: .rdata:68D91AB8o
aAr_qa		db 'ar_QA',0            ; DATA XREF: .rdata:68D91ABCo
		align 20h
off_68D91A80	dd offset aAr_sa	; DATA XREF: sub_68D858F0+E6r
					; "ar_SA"
		dd offset aAr_iq	; "ar_IQ"
		dd offset aAr_eg	; "ar_EG"
		dd offset aAr_ly	; "ar_LY"
		dd offset aAr_dz	; "ar_DZ"
		dd offset aAr_ma	; "ar_MA"
		dd offset aAr_tn	; "ar_TN"
		dd offset aAr_om	; "ar_OM"
		dd offset aAr_ye	; "ar_YE"
		dd offset aAr_sy	; "ar_SY"
		dd offset aAr_jo	; "ar_JO"
		dd offset aAr_lb	; "ar_LB"
		dd offset aAr_kw	; "ar_KW"
		dd offset aAr_ae	; "ar_AE"
		dd offset aAr_bh	; "ar_BH"
		dd offset aAr_qa	; "ar_QA"
aAz_az@latin	db 'az_AZ@latin',0      ; DATA XREF: .rdata:off_68D91B00o
aAz_az@cyrillic	db 'az_AZ@cyrillic',0   ; DATA XREF: .rdata:68D91B04o
aAz@cyrillic	db 'az@cyrillic',0      ; DATA XREF: .rdata:68D91B70o
aAz@latin	db 'az@latin',0         ; DATA XREF: .rdata:68D91B74o
		align 20h
off_68D91B00	dd offset aAz_az@latin	; DATA XREF: sub_68D858F0+57Ar
					; "az_AZ@latin"
		dd offset aAz_az@cyrillic ; "az_AZ@cyrillic"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz		; "az"
		dd offset aAz@cyrillic	; "az@cyrillic"
		dd offset aAz@latin	; "az@latin"
aBn_in		db 'bn_IN',0            ; DATA XREF: .rdata:off_68D91B84o
aBn_bd		db 'bn_BD',0            ; DATA XREF: .rdata:68D91B88o
off_68D91B84	dd offset aBn_in	; DATA XREF: sub_68D858F0+815r
					; "bn_IN"
		dd offset aBn_bd	; "bn_BD"
aZh_cn		db 'zh_CN',0            ; DATA XREF: .rdata:off_68D91BC0o
					; .rdata:68D91BC8o
aZh_tw		db 'zh_TW',0            ; DATA XREF: .rdata:68D91BC4o
					; .rdata:68D91C3Co
aZh_hk		db 'zh_HK',0            ; DATA XREF: .rdata:68D91BCCo
aZh_sg		db 'zh_SG',0            ; DATA XREF: .rdata:68D91BD0o
aZh_mo		db 'zh_MO',0            ; DATA XREF: .rdata:68D91BD4o
		align 20h
off_68D91BC0	dd offset aZh_cn	; DATA XREF: sub_68D858F0+125r
					; "zh_CN"
		dd offset aZh_tw	; "zh_TW"
		dd offset aZh_cn	; "zh_CN"
		dd offset aZh_hk	; "zh_HK"
		dd offset aZh_sg	; "zh_SG"
		dd offset aZh_mo	; "zh_MO"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh		; "zh"
		dd offset aZh_tw	; "zh_TW"
aHr_hr		db 'hr_HR',0            ; DATA XREF: .rdata:68D91CE4o
aSr_cs		db 'sr_CS',0            ; DATA XREF: .rdata:68D91CE8o
aSr_cs@cyrillic	db 'sr_CS@cyrillic',0   ; DATA XREF: .rdata:68D91CECo
aHr_ba		db 'hr_BA',0            ; DATA XREF: .rdata:68D91CF0o
aBs_ba		db 'bs_BA',0            ; DATA XREF: .rdata:68D91CF4o
aSr_ba		db 'sr_BA',0            ; DATA XREF: .rdata:68D91CF8o
aSr_ba@cyrillic	db 'sr_BA@cyrillic',0   ; DATA XREF: .rdata:68D91CFCo
aBs_ba@cyrillic	db 'bs_BA@cyrillic',0   ; DATA XREF: .rdata:68D91D00o
aSr_rs		db 'sr_RS',0            ; DATA XREF: .rdata:68D91D04o
aSr_rs@cyrillic	db 'sr_RS@cyrillic',0   ; DATA XREF: .rdata:68D91D08o
aSr_me		db 'sr_ME',0            ; DATA XREF: .rdata:68D91D0Co
aSr_me@cyrillic	db 'sr_ME@cyrillic',0   ; DATA XREF: .rdata:68D91D10o
aBs@cyrillic	db 'bs@cyrillic',0      ; DATA XREF: .rdata:68D91D44o
aBs		db 'bs',0               ; DATA XREF: .rdata:68D91D48o
					; .rdata:68D91D58o
aSr@cyrillic	db 'sr@cyrillic',0      ; DATA XREF: .rdata:68D91D4Co
aSr		db 'sr',0               ; DATA XREF: .rdata:68D91D50o
					; .rdata:68D91D5Co
		align 10h
off_68D91CE0	dd offset aHr		; DATA XREF: sub_68D858F0+3A0r
					; "hr"
		dd offset aHr_hr	; "hr_HR"
		dd offset aSr_cs	; "sr_CS"
		dd offset aSr_cs@cyrillic ; "sr_CS@cyrillic"
		dd offset aHr_ba	; "hr_BA"
		dd offset aBs_ba	; "bs_BA"
		dd offset aSr_ba	; "sr_BA"
		dd offset aSr_ba@cyrillic ; "sr_BA@cyrillic"
		dd offset aBs_ba@cyrillic ; "bs_BA@cyrillic"
		dd offset aSr_rs	; "sr_RS"
		dd offset aSr_rs@cyrillic ; "sr_RS@cyrillic"
		dd offset aSr_me	; "sr_ME"
		dd offset aSr_me@cyrillic ; "sr_ME@cyrillic"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aHr		; "hr"
		dd offset aBs@cyrillic	; "bs@cyrillic"
		dd offset aBs		; "bs"
		dd offset aSr@cyrillic	; "sr@cyrillic"
		dd offset aSr		; "sr"
		dd offset aHr		; "hr"
		dd offset aBs		; "bs"
		dd offset aSr		; "sr"
aNl_nl		db 'nl_NL',0            ; DATA XREF: .rdata:off_68D91D74o
aNl_be		db 'nl_BE',0            ; DATA XREF: .rdata:68D91D78o
aNl_sr		db 'nl_SR',0            ; DATA XREF: .rdata:68D91D7Co
		align 4
off_68D91D74	dd offset aNl_nl	; DATA XREF: sub_68D858F0+2CCr
					; "nl_NL"
		dd offset aNl_be	; "nl_BE"
		dd offset aNl_sr	; "nl_SR"
aEn_us		db 'en_US',0            ; DATA XREF: .rdata:off_68D91E00o
aEn_gb		db 'en_GB',0            ; DATA XREF: .rdata:68D91E04o
aEn_au		db 'en_AU',0            ; DATA XREF: .rdata:68D91E08o
aEn_ca		db 'en_CA',0            ; DATA XREF: .rdata:68D91E0Co
aEn_nz		db 'en_NZ',0            ; DATA XREF: .rdata:68D91E10o
aEn_ie		db 'en_IE',0            ; DATA XREF: .rdata:68D91E14o
aEn_za		db 'en_ZA',0            ; DATA XREF: .rdata:68D91E18o
aEn_jm		db 'en_JM',0            ; DATA XREF: .rdata:68D91E1Co
aEn_gd		db 'en_GD',0            ; DATA XREF: .rdata:68D91E20o
aEn_bz		db 'en_BZ',0            ; DATA XREF: .rdata:68D91E24o
aEn_tt		db 'en_TT',0            ; DATA XREF: .rdata:68D91E28o
aEn_zw		db 'en_ZW',0            ; DATA XREF: .rdata:68D91E2Co
aEn_ph		db 'en_PH',0            ; DATA XREF: .rdata:68D91E30o
aEn_id		db 'en_ID',0            ; DATA XREF: .rdata:68D91E34o
aEn_hk		db 'en_HK',0            ; DATA XREF: .rdata:68D91E38o
aEn_in		db 'en_IN',0            ; DATA XREF: .rdata:68D91E3Co
aEn_my		db 'en_MY',0            ; DATA XREF: .rdata:68D91E40o
aEn_sg		db 'en_SG',0            ; DATA XREF: .rdata:68D91E44o
		align 20h
off_68D91E00	dd offset aEn_us	; DATA XREF: sub_68D858F0+1B2r
					; "en_US"
		dd offset aEn_gb	; "en_GB"
		dd offset aEn_au	; "en_AU"
		dd offset aEn_ca	; "en_CA"
		dd offset aEn_nz	; "en_NZ"
		dd offset aEn_ie	; "en_IE"
		dd offset aEn_za	; "en_ZA"
		dd offset aEn_jm	; "en_JM"
		dd offset aEn_gd	; "en_GD"
		dd offset aEn_bz	; "en_BZ"
		dd offset aEn_tt	; "en_TT"
		dd offset aEn_zw	; "en_ZW"
		dd offset aEn_ph	; "en_PH"
		dd offset aEn_id	; "en_ID"
		dd offset aEn_hk	; "en_HK"
		dd offset aEn_in	; "en_IN"
		dd offset aEn_my	; "en_MY"
		dd offset aEn_sg	; "en_SG"
aFr_fr		db 'fr_FR',0            ; DATA XREF: .rdata:off_68D91EA0o
aFr_be		db 'fr_BE',0            ; DATA XREF: .rdata:68D91EA4o
aFr_ca		db 'fr_CA',0            ; DATA XREF: .rdata:68D91EA8o
aFr_ch		db 'fr_CH',0            ; DATA XREF: .rdata:68D91EACo
aFr_lu		db 'fr_LU',0            ; DATA XREF: .rdata:68D91EB0o
aFr_mc		db 'fr_MC',0            ; DATA XREF: .rdata:68D91EB4o
aFr_re		db 'fr_RE',0            ; DATA XREF: .rdata:68D91EBCo
aFr_cg		db 'fr_CG',0            ; DATA XREF: .rdata:68D91EC0o
aFr_sn		db 'fr_SN',0            ; DATA XREF: .rdata:68D91EC4o
aFr_cm		db 'fr_CM',0            ; DATA XREF: .rdata:68D91EC8o
aFr_ci		db 'fr_CI',0            ; DATA XREF: .rdata:68D91ECCo
aFr_ml		db 'fr_ML',0            ; DATA XREF: .rdata:68D91ED0o
aFr_ma		db 'fr_MA',0            ; DATA XREF: .rdata:68D91ED4o
aFr_ht		db 'fr_HT',0            ; DATA XREF: .rdata:68D91ED8o
		align 10h
off_68D91EA0	dd offset aFr_fr	; DATA XREF: sub_68D858F0+20Dr
					; "fr_FR"
		dd offset aFr_be	; "fr_BE"
		dd offset aFr_ca	; "fr_CA"
		dd offset aFr_ch	; "fr_CH"
		dd offset aFr_lu	; "fr_LU"
		dd offset aFr_mc	; "fr_MC"
		dd offset aFr		; "fr"
		dd offset aFr_re	; "fr_RE"
		dd offset aFr_cg	; "fr_CG"
		dd offset aFr_sn	; "fr_SN"
		dd offset aFr_cm	; "fr_CM"
		dd offset aFr_ci	; "fr_CI"
		dd offset aFr_ml	; "fr_ML"
		dd offset aFr_ma	; "fr_MA"
		dd offset aFr_ht	; "fr_HT"
aGa_ie		db 'ga_IE',0            ; DATA XREF: .rdata:68D91EE8o
		align 4
off_68D91EE4	dd offset aGd_gb	; DATA XREF: sub_68D858F0+71Cr
					; "gd_GB"
		dd offset aGa_ie	; "ga_IE"
aDe_de		db 'de_DE',0            ; DATA XREF: .rdata:off_68D91F0Co
aDe_ch		db 'de_CH',0            ; DATA XREF: .rdata:68D91F10o
aDe_at		db 'de_AT',0            ; DATA XREF: .rdata:68D91F14o
aDe_lu		db 'de_LU',0            ; DATA XREF: .rdata:68D91F18o
aDe_li		db 'de_LI',0            ; DATA XREF: .rdata:68D91F1Co
		align 4
off_68D91F0C	dd offset aDe_de	; DATA XREF: sub_68D858F0+178r
					; "de_DE"
		dd offset aDe_ch	; "de_CH"
		dd offset aDe_at	; "de_AT"
		dd offset aDe_lu	; "de_LU"
		dd offset aDe_li	; "de_LI"
aIu_ca		db 'iu_CA',0            ; DATA XREF: .rdata:off_68D91F40o
aIu_ca@latin	db 'iu_CA@latin',0      ; DATA XREF: .rdata:68D91F44o
aIu@latin	db 'iu@latin',0         ; DATA XREF: .rdata:68D91FB8o
		align 10h
off_68D91F40	dd offset aIu_ca	; DATA XREF: sub_68D858F0+A95r
					; "iu_CA"
		dd offset aIu_ca@latin	; "iu_CA@latin"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu		; "iu"
		dd offset aIu@latin	; "iu@latin"
aIt_it		db 'it_IT',0            ; DATA XREF: .rdata:off_68D91FC8o
aIt_ch		db 'it_CH',0            ; DATA XREF: .rdata:68D91FCCo
off_68D91FC8	dd offset aIt_it	; DATA XREF: sub_68D858F0+279r
					; "it_IT"
		dd offset aIt_ch	; "it_CH"
aKs_pk		db 'ks_PK',0            ; DATA XREF: .rdata:off_68D91FDCo
aKs_in		db 'ks_IN',0            ; DATA XREF: .rdata:68D91FE0o
off_68D91FDC	dd offset aKs_pk	; DATA XREF: sub_68D858F0+AF0r
					; "ks_PK"
		dd offset aKs_in	; "ks_IN"
aMs_my		db 'ms_MY',0            ; DATA XREF: .rdata:off_68D91FF0o
aMs_bn		db 'ms_BN',0            ; DATA XREF: .rdata:68D91FF4o
off_68D91FF0	dd offset aMs_my	; DATA XREF: sub_68D858F0+756r
					; "ms_MY"
		dd offset aMs_bn	; "ms_BN"
aMn_mn		db 'mn_MN',0            ; DATA XREF: .rdata:off_68D92020o
					; .rdata:68D92094o
aMn_cn		db 'mn_CN',0            ; DATA XREF: .rdata:68D92024o
					; .rdata:68D92098o
		align 20h
off_68D92020	dd offset aMn_mn	; DATA XREF: sub_68D858F0+938r
					; "mn_MN"
		dd offset aMn_cn	; "mn_CN"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn		; "mn"
		dd offset aMn_mn	; "mn_MN"
		dd offset aMn_cn	; "mn_CN"
aNe_np		db 'ne_NP',0            ; DATA XREF: .rdata:off_68D920A8o
aNe_in		db 'ne_IN',0            ; DATA XREF: .rdata:68D920ACo
off_68D920A8	dd offset aNe_np	; DATA XREF: sub_68D858F0+B11r
					; "ne_NP"
		dd offset aNe_in	; "ne_IN"
aNb_no		db 'nb_NO',0            ; DATA XREF: .rdata:off_68D920E0o
aNn_no		db 'nn_NO',0            ; DATA XREF: .rdata:68D920E4o
aNn		db 'nn',0               ; DATA XREF: .rdata:68D92154o
aNb		db 'nb',0               ; DATA XREF: .rdata:68D92158o
		align 20h
off_68D920E0	dd offset aNb_no	; DATA XREF: sub_68D858F0+2EDr
					; "nb_NO"
		dd offset aNn_no	; "nn_NO"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNo		; "no"
		dd offset aNn		; "nn"
		dd offset aNb		; "nb"
aPt_br		db 'pt_BR',0            ; DATA XREF: .rdata:off_68D92168o
aPt_pt		db 'pt_PT',0            ; DATA XREF: .rdata:68D9216Co
off_68D92168	dd offset aPt_br	; DATA XREF: sub_68D858F0+327r
					; "pt_BR"
		dd offset aPt_pt	; "pt_PT"
aPa_in		db 'pa_IN',0            ; DATA XREF: .rdata:off_68D9217Co
aPa_pk		db 'pa_PK',0            ; DATA XREF: .rdata:68D92180o
off_68D9217C	dd offset aPa_in	; DATA XREF: sub_68D858F0+836r
					; "pa_IN"
		dd offset aPa_pk	; "pa_PK"
aQu_bo		db 'qu_BO',0            ; DATA XREF: .rdata:off_68D92198o
aQu_ec		db 'qu_EC',0            ; DATA XREF: .rdata:68D9219Co
aQu_pe		db 'qu_PE',0            ; DATA XREF: .rdata:68D921A0o
		align 4
off_68D92198	dd offset aQu_bo	; DATA XREF: sub_68D858F0+C13r
					; "qu_BO"
		dd offset aQu_ec	; "qu_EC"
		dd offset aQu_pe	; "qu_PE"
aRo_ro		db 'ro_RO',0            ; DATA XREF: .rdata:off_68D921B0o
aRo_md		db 'ro_MD',0            ; DATA XREF: .rdata:68D921B4o
off_68D921B0	dd offset aRo_ro	; DATA XREF: sub_68D858F0+361r
					; "ro_RO"
		dd offset aRo_md	; "ro_MD"
aRu_ru		db 'ru_RU',0            ; DATA XREF: .rdata:off_68D921C4o
aRu_md		db 'ru_MD',0            ; DATA XREF: .rdata:68D921C8o
off_68D921C4	dd offset aRu_ru	; DATA XREF: sub_68D858F0+382r
					; "ru_RU"
		dd offset aRu_md	; "ru_MD"
aSe_no		db 'se_NO',0            ; DATA XREF: .rdata:68D92224o
aSe_se		db 'se_SE',0            ; DATA XREF: .rdata:68D92228o
aSe_fi		db 'se_FI',0            ; DATA XREF: .rdata:68D9222Co
aSmj_no		db 'smj_NO',0           ; DATA XREF: .rdata:68D92230o
aSmj_se		db 'smj_SE',0           ; DATA XREF: .rdata:68D92234o
aSma_no		db 'sma_NO',0           ; DATA XREF: .rdata:68D92238o
aSma_se		db 'sma_SE',0           ; DATA XREF: .rdata:68D9223Co
aSms_fi		db 'sms_FI',0           ; DATA XREF: .rdata:68D92240o
aSmn_fi		db 'smn_FI',0           ; DATA XREF: .rdata:68D92244o
aSmn		db 'smn',0              ; DATA XREF: .rdata:68D92290o
aSms		db 'sms',0              ; DATA XREF: .rdata:68D92294o
aSma		db 'sma',0              ; DATA XREF: .rdata:68D92298o
aSmj		db 'smj',0              ; DATA XREF: .rdata:68D9229Co
		align 10h
off_68D92220	dd offset aSe		; DATA XREF: sub_68D858F0+6FBr
					; "se"
		dd offset aSe_no	; "se_NO"
		dd offset aSe_se	; "se_SE"
		dd offset aSe_fi	; "se_FI"
		dd offset aSmj_no	; "smj_NO"
		dd offset aSmj_se	; "smj_SE"
		dd offset aSma_no	; "sma_NO"
		dd offset aSma_se	; "sma_SE"
		dd offset aSms_fi	; "sms_FI"
		dd offset aSmn_fi	; "smn_FI"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSe		; "se"
		dd offset aSmn		; "smn"
		dd offset aSms		; "sms"
		dd offset aSma		; "sma"
		dd offset aSmj		; "smj"
aSd_in		db 'sd_IN',0            ; DATA XREF: .rdata:off_68D922ACo
aSd_pk		db 'sd_PK',0            ; DATA XREF: .rdata:68D922B0o
off_68D922AC	dd offset aSd_in	; DATA XREF: sub_68D858F0+A29r
					; "sd_IN"
		dd offset aSd_pk	; "sd_PK"
dword_68D922B4	dd 627368h, 5F627368h, 64004544h, 445F6273h, 73640045h
					; DATA XREF: .rdata:off_68D922E0o
					; .rdata:68D922E4o ...
		dd 62h,	5 dup(0)
off_68D922E0	dd offset dword_68D922B4 ; DATA	XREF: sub_68D858F0+5B1r
		dd offset dword_68D922B4+4
		dd offset dword_68D922B4+0Bh
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset aWen		; "wen"
		dd offset dword_68D922B4+12h
aEs_es		db 'es_ES',0            ; DATA XREF: .rdata:off_68D92400o
aEs_mx		db 'es_MX',0            ; DATA XREF: .rdata:68D92404o
aEs_es@modern	db 'es_ES@modern',0     ; DATA XREF: .rdata:68D92408o
aEs_gt		db 'es_GT',0            ; DATA XREF: .rdata:68D9240Co
aEs_cr		db 'es_CR',0            ; DATA XREF: .rdata:68D92410o
aEs_pa		db 'es_PA',0            ; DATA XREF: .rdata:68D92414o
aEs_do		db 'es_DO',0            ; DATA XREF: .rdata:68D92418o
aEs_ve		db 'es_VE',0            ; DATA XREF: .rdata:68D9241Co
aEs_co		db 'es_CO',0            ; DATA XREF: .rdata:68D92420o
aEs_pe		db 'es_PE',0            ; DATA XREF: .rdata:68D92424o
aEs_ar		db 'es_AR',0            ; DATA XREF: .rdata:68D92428o
aEs_ec		db 'es_EC',0            ; DATA XREF: .rdata:68D9242Co
aEs_cl		db 'es_CL',0            ; DATA XREF: .rdata:68D92430o
aEs_uy		db 'es_UY',0            ; DATA XREF: .rdata:68D92434o
aEs_py		db 'es_PY',0            ; DATA XREF: .rdata:68D92438o
aEs_bo		db 'es_BO',0            ; DATA XREF: .rdata:68D9243Co
aEs_sv		db 'es_SV',0            ; DATA XREF: .rdata:68D92440o
aEs_hn		db 'es_HN',0            ; DATA XREF: .rdata:68D92444o
aEs_ni		db 'es_NI',0            ; DATA XREF: .rdata:68D92448o
aEs_pr		db 'es_PR',0            ; DATA XREF: .rdata:68D9244Co
aEs_us		db 'es_US',0            ; DATA XREF: .rdata:68D92450o
		align 20h
off_68D92400	dd offset aEs_es	; DATA XREF: sub_68D858F0+1D3r
					; "es_ES"
		dd offset aEs_mx	; "es_MX"
		dd offset aEs_es@modern	; "es_ES@modern"
		dd offset aEs_gt	; "es_GT"
		dd offset aEs_cr	; "es_CR"
		dd offset aEs_pa	; "es_PA"
		dd offset aEs_do	; "es_DO"
		dd offset aEs_ve	; "es_VE"
		dd offset aEs_co	; "es_CO"
		dd offset aEs_pe	; "es_PE"
		dd offset aEs_ar	; "es_AR"
		dd offset aEs_ec	; "es_EC"
		dd offset aEs_cl	; "es_CL"
		dd offset aEs_uy	; "es_UY"
		dd offset aEs_py	; "es_PY"
		dd offset aEs_bo	; "es_BO"
		dd offset aEs_sv	; "es_SV"
		dd offset aEs_hn	; "es_HN"
		dd offset aEs_ni	; "es_NI"
		dd offset aEs_pr	; "es_PR"
		dd offset aEs_us	; "es_US"
aSv_se		db 'sv_SE',0            ; DATA XREF: .rdata:off_68D92460o
aSv_fi		db 'sv_FI',0            ; DATA XREF: .rdata:68D92464o
off_68D92460	dd offset aSv_se	; DATA XREF: sub_68D858F0+3F3r
					; "sv_SE"
		dd offset aSv_fi	; "sv_FI"
aBer_ma@arabic	db 'ber_MA@arabic',0    ; DATA XREF: .rdata:off_68D924A0o
aBer_dz@latin	db 'ber_DZ@latin',0     ; DATA XREF: .rdata:68D924A4o
aBer@latin	db 'ber@latin',0        ; DATA XREF: .rdata:68D92518o
		align 20h
off_68D924A0	dd offset aBer_ma@arabic ; DATA	XREF: sub_68D858F0+ACFr
					; "ber_MA@arabic"
		dd offset aBer_dz@latin	; "ber_DZ@latin"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer		; "ber"
		dd offset aBer@latin	; "ber@latin"
aBo_bt		db 'bo_BT',0            ; DATA XREF: .rdata:68D92528o
		align 4
off_68D92524	dd offset aBo		; DATA XREF: sub_68D858F0+959r
					; "bo"
		dd offset aBo_bt	; "bo_BT"
aTi_et		db 'ti_ET',0            ; DATA XREF: .rdata:off_68D92538o
aTi_er		db 'ti_ER',0            ; DATA XREF: .rdata:68D9253Co
off_68D92538	dd offset aTi_et	; DATA XREF: sub_68D858F0+CE3r
					; "ti_ET"
		dd offset aTi_er	; "ti_ER"
aUr_pk		db 'ur_PK',0            ; DATA XREF: .rdata:off_68D9254Co
aUr_in		db 'ur_IN',0            ; DATA XREF: .rdata:68D92550o
off_68D9254C	dd offset aUr_pk	; DATA XREF: sub_68D858F0+446r
					; "ur_PK"
		dd offset aUr_in	; "ur_IN"
aUz_uz		db 'uz_UZ',0            ; DATA XREF: .rdata:off_68D92580o
aUz_uz@cyrillic	db 'uz_UZ@cyrillic',0   ; DATA XREF: .rdata:68D92584o
aUz@cyrillic	db 'uz@cyrillic',0      ; DATA XREF: .rdata:68D925F4o
		align 10h
off_68D92580	dd offset aUz_uz	; DATA XREF: sub_68D858F0+7DBr
					; "uz_UZ"
		dd offset aUz_uz@cyrillic ; "uz_UZ@cyrillic"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz		; "uz"
		dd offset aUz@cyrillic	; "uz@cyrillic"
		dd offset aUz		; "uz"
		align 10h
dword_68D92600	dd 226E5Ch		; DATA XREF: sub_68D868E0+75o
byte_68D92604	db 0Ah,	22h, 0		; DATA XREF: sub_68D868E0+99o
; char aA[2]
aA		db 'a',0                ; DATA XREF: _nl_log_untranslated+ACo
aDomain		db 'domain ',0          ; DATA XREF: _nl_log_untranslated+DFo
aMsgctxt	db 0Ah			; DATA XREF: _nl_log_untranslated+129o
		db 'msgctxt ',0
aMsgid		db 0Ah			; DATA XREF: _nl_log_untranslated+157o
		db 'msgid ',0
aMsgid_plural	db 0Ah			; DATA XREF: _nl_log_untranslated+197o
		db 'msgid_plural ',0
aMsgstr0	db 0Ah			; DATA XREF: _nl_log_untranslated+1CCo
		db 'msgstr[0] ""',0Ah,0
aMsgstr		db 0Ah			; DATA XREF: _nl_log_untranslated+214o
		db 'msgstr ""',0Ah,0
		align 10h
aNull		db '(NULL)',0           ; DATA XREF: sub_68D86BD0+881o
					; sub_68D88B00+920o
		align 4
off_68D92658	dd offset loc_68D86EB5	; DATA XREF: sub_68D86BD0+317r
		dd offset loc_68D872D0	; jump table for switch	statement
		dd offset loc_68D872D0
		dd offset loc_68D86F04
		dd offset loc_68D86F04
		dd offset loc_68D86EEE
		dd offset loc_68D86EEE
		dd offset loc_68D86EEE
		dd offset loc_68D86EEE
		dd offset loc_68D87427
		dd offset loc_68D87434
		dd offset loc_68D86EEE
		dd offset loc_68D87441
		dd offset loc_68D86EEE
		dd offset loc_68D86EEE
		dd offset loc_68D86EEE
		dd offset loc_68D86EEE
		dd offset loc_68D86EEE
off_68D926A0	dd offset loc_68D875F5,	offset loc_68D872EB, offset loc_68D872EB
					; DATA XREF: sub_68D86BD0+850r
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB ; jump	table for switch statement
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D87654, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D87654
		dd offset loc_68D87654,	offset loc_68D87654, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D87675,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D87654,	offset loc_68D872EB, offset loc_68D874F5
		dd offset loc_68D876EE,	offset loc_68D87654, offset loc_68D87654
		dd offset loc_68D87654,	offset loc_68D872EB, offset loc_68D876EE
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D872EB,	offset loc_68D876BF, offset loc_68D87675
		dd offset loc_68D87DB7,	offset loc_68D872EB, offset loc_68D872EB
		dd offset loc_68D876AA,	offset loc_68D872EB, offset loc_68D87675
		dd offset loc_68D872EB,	offset loc_68D872EB, offset loc_68D87675
off_68D927F0	dd offset loc_68D8785F	; DATA XREF: sub_68D86BD0+C97r
		dd offset loc_68D87F22	; jump table for switch	statement
		dd offset loc_68D87B6E
		dd offset loc_68D87F04
		dd offset loc_68D87EE6
		dd offset loc_68D8786E
		dd offset loc_68D8786E
		dd offset loc_68D8786E
		dd offset loc_68D8786E
		dd offset loc_68D87DC3
		dd offset loc_68D87E0E
		dd offset loc_68D87E50
		dd offset loc_68D87E9B
		dd offset loc_68D8786E
off_68D92828	dd offset loc_68D88E4A	; DATA XREF: sub_68D88B00+379r
		dd offset loc_68D892D6	; jump table for switch	statement
		dd offset loc_68D892D6
		dd offset loc_68D88E96
		dd offset loc_68D88E96
		dd offset loc_68D88E80
		dd offset loc_68D88E80
		dd offset loc_68D88E80
		dd offset loc_68D88E80
		dd offset loc_68D8942C
		dd offset loc_68D89403
		dd offset loc_68D88E80
		dd offset loc_68D89410
		dd offset loc_68D88E80
		dd offset loc_68D88E80
		dd offset loc_68D88E80
		dd offset loc_68D88E80
		dd offset loc_68D88E80
off_68D92870	dd offset loc_68D895E2,	offset loc_68D88DF4, offset loc_68D88DF4
					; DATA XREF: sub_68D88B00+8EFr
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4 ; jump	table for switch statement
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D8964E, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D8964E
		dd offset loc_68D8964E,	offset loc_68D8964E, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D8966E,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D8964E,	offset loc_68D88DF4, offset loc_68D894E3
		dd offset loc_68D896E7,	offset loc_68D8964E, offset loc_68D8964E
		dd offset loc_68D8964E,	offset loc_68D88DF4, offset loc_68D896E7
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D88DF4,	offset loc_68D896B8, offset loc_68D8966E
		dd offset loc_68D89F5A,	offset loc_68D88DF4, offset loc_68D88DF4
		dd offset loc_68D896A3,	offset loc_68D88DF4, offset loc_68D8966E
		dd offset loc_68D88DF4,	offset loc_68D88DF4, offset loc_68D8966E
off_68D929C0	dd offset loc_68D892D1	; DATA XREF: sub_68D88B00+C94r
		dd offset loc_68D89F3C	; jump table for switch	statement
		dd offset loc_68D89F1E
		dd offset loc_68D89F00
		dd offset loc_68D899F1
		dd offset loc_68D8979B
		dd offset loc_68D8979B
		dd offset loc_68D8979B
		dd offset loc_68D8979B
		dd offset loc_68D89E4C
		dd offset loc_68D89E7E
		dd offset loc_68D89EB8
		dd offset loc_68D8979B
		dd offset loc_68D8979B
		align 10h
; char aLc_ctype_0[]
aLc_ctype_0	db 'LC_CTYPE',0         ; DATA XREF: libintl_setlocale+DDo
					; libintl_setlocale+12Bo
; char aLc_collate_0[]
aLc_collate_0	db 'LC_COLLATE',0       ; DATA XREF: libintl_setlocale+D3o
					; libintl_setlocale:loc_68D8B074o
aLc_xxx_0	db 'LC_XXX',0           ; DATA XREF: libintl_setlocale:loc_68D8AF98o
; char aLc_messages_0[]
aLc_messages_0	db 'LC_MESSAGES',0      ; DATA XREF: libintl_setlocale+4Fo
					; libintl_setlocale:loc_68D8B0DBo
; char aLc_time_0[]
aLc_time_0	db 'LC_TIME',0          ; DATA XREF: libintl_setlocale+3Bo
					; libintl_setlocale:loc_68D8B03Fo
; char aLc_numeric_0[]
aLc_numeric_0	db 'LC_NUMERIC',0       ; DATA XREF: libintl_setlocale+42o
					; libintl_setlocale+15Ao
; char aLc_monetary_0[]
aLc_monetary_0	db 'LC_MONETARY',0      ; DATA XREF: libintl_setlocale+2Bo
					; libintl_setlocale:loc_68D8B0A9o
aAf_0		db 'af',0               ; DATA XREF: .rdata:off_68D93240o
aAfrikaans	db 'Afrikaans',0        ; DATA XREF: .rdata:off_68D93244o
aAm_0		db 'am',0               ; DATA XREF: .rdata:68D93248o
aAmharic	db 'Amharic',0          ; DATA XREF: .rdata:68D9324Co
aAr_0		db 'ar',0               ; DATA XREF: .rdata:68D93250o
aArabic		db 'Arabic',0           ; DATA XREF: .rdata:68D93254o
aArn_0		db 'arn',0              ; DATA XREF: .rdata:68D93258o
aMapudungun	db 'Mapudungun',0       ; DATA XREF: .rdata:68D9325Co
aAs_0		db 'as',0               ; DATA XREF: .rdata:68D93260o
aAssamese	db 'Assamese',0         ; DATA XREF: .rdata:68D93264o
aAz@cyrillic_0	db 'az@cyrillic',0      ; DATA XREF: .rdata:68D93268o
aAzeriCyrillic	db 'Azeri (Cyrillic)',0 ; DATA XREF: .rdata:68D9326Co
aAz@latin_0	db 'az@latin',0         ; DATA XREF: .rdata:68D93270o
aAzeriLatin	db 'Azeri (Latin)',0    ; DATA XREF: .rdata:68D93274o
aBa_0		db 'ba',0               ; DATA XREF: .rdata:68D93278o
aBashkir	db 'Bashkir',0          ; DATA XREF: .rdata:68D9327Co
aBe_0		db 'be',0               ; DATA XREF: .rdata:68D93280o
aBelarusian	db 'Belarusian',0       ; DATA XREF: .rdata:68D93284o
aBer_0		db 'ber',0              ; DATA XREF: .rdata:68D93288o
aTamazight	db 'Tamazight',0        ; DATA XREF: .rdata:68D9328Co
aBer@arabic	db 'ber@arabic',0       ; DATA XREF: .rdata:68D93290o
aTamazightArabi	db 'Tamazight (Arabic)',0 ; DATA XREF: .rdata:68D93294o
aBer@latin_0	db 'ber@latin',0        ; DATA XREF: .rdata:68D93298o
aTamazightLatin	db 'Tamazight (Latin)',0 ; DATA XREF: .rdata:68D9329Co
aBg_0		db 'bg',0               ; DATA XREF: .rdata:68D932A0o
aBulgarian	db 'Bulgarian',0        ; DATA XREF: .rdata:68D932A4o
aBin_0		db 'bin',0              ; DATA XREF: .rdata:68D932A8o
aEdo		db 'Edo',0              ; DATA XREF: .rdata:68D932ACo
aBn_0		db 'bn',0               ; DATA XREF: .rdata:68D932B0o
aBengali	db 'Bengali',0          ; DATA XREF: .rdata:68D932B4o
aBn_bd_0	db 'bn_BD',0            ; DATA XREF: .rdata:68D932B8o
aBengaliBanglad	db 'Bengali (Bangladesh)',0 ; DATA XREF: .rdata:68D932BCo
aBn_in_0	db 'bn_IN',0            ; DATA XREF: .rdata:68D932C0o
aBengaliIndia	db 'Bengali (India)',0  ; DATA XREF: .rdata:68D932C4o
aBnt_0		db 'bnt',0              ; DATA XREF: .rdata:68D932C8o
aSutu		db 'Sutu',0             ; DATA XREF: .rdata:68D932CCo
aBo_0		db 'bo',0               ; DATA XREF: .rdata:68D932D0o
aTibetan	db 'Tibetan',0          ; DATA XREF: .rdata:68D932D4o
aBr_0		db 'br',0               ; DATA XREF: .rdata:68D932D8o
aBreton		db 'Breton',0           ; DATA XREF: .rdata:68D932DCo
aBs_0		db 'bs',0               ; DATA XREF: .rdata:68D932E0o
aBsb		db 'BSB',0              ; DATA XREF: .rdata:68D932E4o
aBs@cyrillic_0	db 'bs@cyrillic',0      ; DATA XREF: .rdata:68D932E8o
aBsc		db 'BSC',0              ; DATA XREF: .rdata:68D932ECo
aCa_0		db 'ca',0               ; DATA XREF: .rdata:68D932F0o
aCatalan	db 'Catalan',0          ; DATA XREF: .rdata:68D932F4o
aChr_0		db 'chr',0              ; DATA XREF: .rdata:68D932F8o
aCherokee	db 'Cherokee',0         ; DATA XREF: .rdata:68D932FCo
aCo_0		db 'co',0               ; DATA XREF: .rdata:68D93300o
aCorsican	db 'Corsican',0         ; DATA XREF: .rdata:68D93304o
aCpe_0		db 'cpe',0              ; DATA XREF: .rdata:68D93308o
aHawaiian	db 'Hawaiian',0         ; DATA XREF: .rdata:68D9330Co
aCs_0		db 'cs',0               ; DATA XREF: .rdata:68D93310o
aCzech		db 'Czech',0            ; DATA XREF: .rdata:68D93314o
aCy_0		db 'cy',0               ; DATA XREF: .rdata:68D93318o
aWelsh		db 'Welsh',0            ; DATA XREF: .rdata:68D9331Co
aDa_0		db 'da',0               ; DATA XREF: .rdata:68D93320o
aDanish		db 'Danish',0           ; DATA XREF: .rdata:68D93324o
aDe_0		db 'de',0               ; DATA XREF: .rdata:68D93328o
aGerman		db 'German',0           ; DATA XREF: .rdata:68D9332Co
aDsb		db 'dsb',0              ; DATA XREF: .rdata:68D93330o
aLowerSorbian	db 'Lower Sorbian',0    ; DATA XREF: .rdata:68D93334o
aDv_0		db 'dv',0               ; DATA XREF: .rdata:68D93338o
aDivehi		db 'Divehi',0           ; DATA XREF: .rdata:68D9333Co
aEl_0		db 'el',0               ; DATA XREF: .rdata:68D93340o
aGreek		db 'Greek',0            ; DATA XREF: .rdata:68D93344o
aEn_0		db 'en',0               ; DATA XREF: .rdata:68D93348o
aEnglish	db 'English',0          ; DATA XREF: .rdata:68D9334Co
aEs_0		db 'es',0               ; DATA XREF: .rdata:68D93350o
aSpanish	db 'Spanish',0          ; DATA XREF: .rdata:68D93354o
aEt_0		db 'et',0               ; DATA XREF: .rdata:68D93358o
aEstonian	db 'Estonian',0         ; DATA XREF: .rdata:68D9335Co
aEu_0		db 'eu',0               ; DATA XREF: .rdata:68D93360o
aBasque		db 'Basque',0           ; DATA XREF: .rdata:68D93364o
aFa_0		db 'fa',0               ; DATA XREF: .rdata:68D93368o
aFarsi		db 'Farsi',0            ; DATA XREF: .rdata:68D9336Co
aFf_0		db 'ff',0               ; DATA XREF: .rdata:68D93370o
aFulfulde	db 'Fulfulde',0         ; DATA XREF: .rdata:68D93374o
aFi_0		db 'fi',0               ; DATA XREF: .rdata:68D93378o
aFinnish	db 'Finnish',0          ; DATA XREF: .rdata:68D9337Co
aFo_0		db 'fo',0               ; DATA XREF: .rdata:68D93380o
aFaroese	db 'Faroese',0          ; DATA XREF: .rdata:68D93384o
aFr_0		db 'fr',0               ; DATA XREF: .rdata:68D93388o
aFrench		db 'French',0           ; DATA XREF: .rdata:68D9338Co
aFy_0		db 'fy',0               ; DATA XREF: .rdata:68D93390o
aFrisian	db 'Frisian',0          ; DATA XREF: .rdata:68D93394o
aGa_0		db 'ga',0               ; DATA XREF: .rdata:68D93398o
aIre		db 'IRE',0              ; DATA XREF: .rdata:68D9339Co
aGd_0		db 'gd',0               ; DATA XREF: .rdata:68D933A0o
					; .rdata:68D933A8o
aGaelicScotland	db 'Gaelic (Scotland)',0 ; DATA XREF: .rdata:68D933A4o
aScottishGaelic	db 'Scottish Gaelic',0  ; DATA XREF: .rdata:68D933ACo
aGl_0		db 'gl',0               ; DATA XREF: .rdata:68D933B0o
aGalician	db 'Galician',0         ; DATA XREF: .rdata:68D933B4o
aGn_0		db 'gn',0               ; DATA XREF: .rdata:68D933B8o
aGuarani	db 'Guarani',0          ; DATA XREF: .rdata:68D933BCo
aGsw_0		db 'gsw',0              ; DATA XREF: .rdata:68D933C0o
aAlsatian	db 'Alsatian',0         ; DATA XREF: .rdata:68D933C4o
aGu_0		db 'gu',0               ; DATA XREF: .rdata:68D933C8o
aGujarati	db 'Gujarati',0         ; DATA XREF: .rdata:68D933CCo
aHa_0		db 'ha',0               ; DATA XREF: .rdata:68D933D0o
aHausa		db 'Hausa',0            ; DATA XREF: .rdata:68D933D4o
aHe_0		db 'he',0               ; DATA XREF: .rdata:68D933D8o
aHebrew		db 'Hebrew',0           ; DATA XREF: .rdata:68D933DCo
aHi_0		db 'hi',0               ; DATA XREF: .rdata:68D933E0o
aHindi		db 'Hindi',0            ; DATA XREF: .rdata:68D933E4o
aHr_0		db 'hr',0               ; DATA XREF: .rdata:68D933E8o
aCroatian	db 'Croatian',0         ; DATA XREF: .rdata:68D933ECo
aHsb		db 'hsb',0              ; DATA XREF: .rdata:68D933F0o
aUpperSorbian	db 'Upper Sorbian',0    ; DATA XREF: .rdata:68D933F4o
aHu_0		db 'hu',0               ; DATA XREF: .rdata:68D933F8o
aHungarian	db 'Hungarian',0        ; DATA XREF: .rdata:68D933FCo
aHy_0		db 'hy',0               ; DATA XREF: .rdata:68D93400o
aArmenian	db 'Armenian',0         ; DATA XREF: .rdata:68D93404o
aId_0		db 'id',0               ; DATA XREF: .rdata:68D93408o
aIndonesian	db 'Indonesian',0       ; DATA XREF: .rdata:68D9340Co
aIg_0		db 'ig',0               ; DATA XREF: .rdata:68D93410o
aIgbo		db 'Igbo',0             ; DATA XREF: .rdata:68D93414o
aIi_0		db 'ii',0               ; DATA XREF: .rdata:68D93418o
aYi_0		db 'Yi',0               ; DATA XREF: .rdata:68D9341Co
aIs_0		db 'is',0               ; DATA XREF: .rdata:68D93420o
aIcelandic	db 'Icelandic',0        ; DATA XREF: .rdata:68D93424o
aIt_0		db 'it',0               ; DATA XREF: .rdata:68D93428o
aItalian	db 'Italian',0          ; DATA XREF: .rdata:68D9342Co
aIu_0		db 'iu',0               ; DATA XREF: .rdata:68D93430o
aIuk		db 'IUK',0              ; DATA XREF: .rdata:68D93434o
aJa_0		db 'ja',0               ; DATA XREF: .rdata:68D93438o
aJapanese	db 'Japanese',0         ; DATA XREF: .rdata:68D9343Co
aKa_0		db 'ka',0               ; DATA XREF: .rdata:68D93440o
aGeorgian	db 'Georgian',0         ; DATA XREF: .rdata:68D93444o
aKk_0		db 'kk',0               ; DATA XREF: .rdata:68D93448o
aKazakh		db 'Kazakh',0           ; DATA XREF: .rdata:68D9344Co
aKl_0		db 'kl',0               ; DATA XREF: .rdata:68D93450o
aGreenlandic	db 'Greenlandic',0      ; DATA XREF: .rdata:68D93454o
aKm_0		db 'km',0               ; DATA XREF: .rdata:68D93458o
					; .rdata:68D93460o
aCambodian	db 'Cambodian',0        ; DATA XREF: .rdata:68D9345Co
aKhmer		db 'Khmer',0            ; DATA XREF: .rdata:68D93464o
aKn_0		db 'kn',0               ; DATA XREF: .rdata:68D93468o
aKannada	db 'Kannada',0          ; DATA XREF: .rdata:68D9346Co
aKo_0		db 'ko',0               ; DATA XREF: .rdata:68D93470o
aKorean		db 'Korean',0           ; DATA XREF: .rdata:68D93474o
aKok_0		db 'kok',0              ; DATA XREF: .rdata:68D93478o
aKonkani	db 'Konkani',0          ; DATA XREF: .rdata:68D9347Co
aKr_0		db 'kr',0               ; DATA XREF: .rdata:68D93480o
aKanuri		db 'Kanuri',0           ; DATA XREF: .rdata:68D93484o
aKs_0		db 'ks',0               ; DATA XREF: .rdata:68D93488o
aKashmiri	db 'Kashmiri',0         ; DATA XREF: .rdata:68D9348Co
aKs_in_0	db 'ks_IN',0            ; DATA XREF: .rdata:68D93490o
aKashmiri_india	db 'Kashmiri_India',0   ; DATA XREF: .rdata:68D93494o
aKs_pk_0	db 'ks_PK',0            ; DATA XREF: .rdata:68D93498o
aKashmiriArabic	db 'Kashmiri (Arabic)_Pakistan',0 ; DATA XREF: .rdata:68D9349Co
aKy_0		db 'ky',0               ; DATA XREF: .rdata:68D934A0o
aKyrgyz		db 'Kyrgyz',0           ; DATA XREF: .rdata:68D934A4o
aLa_0		db 'la',0               ; DATA XREF: .rdata:68D934A8o
aLatin		db 'Latin',0            ; DATA XREF: .rdata:68D934ACo
aLb_0		db 'lb',0               ; DATA XREF: .rdata:68D934B0o
aLuxembourgish	db 'Luxembourgish',0    ; DATA XREF: .rdata:68D934B4o
aLo_0		db 'lo',0               ; DATA XREF: .rdata:68D934B8o
aLao		db 'Lao',0              ; DATA XREF: .rdata:68D934BCo
aLt_0		db 'lt',0               ; DATA XREF: .rdata:68D934C0o
aLithuanian	db 'Lithuanian',0       ; DATA XREF: .rdata:68D934C4o
aLv_0		db 'lv',0               ; DATA XREF: .rdata:68D934C8o
aLatvian	db 'Latvian',0          ; DATA XREF: .rdata:68D934CCo
aMi_0		db 'mi',0               ; DATA XREF: .rdata:68D934D0o
aMaori		db 'Maori',0            ; DATA XREF: .rdata:68D934D4o
aMk_0		db 'mk',0               ; DATA XREF: .rdata:68D934D8o
					; .rdata:68D934E0o
aFyroMacedonian	db 'FYRO Macedonian',0  ; DATA XREF: .rdata:68D934DCo
aMacedonian	db 'Macedonian',0       ; DATA XREF: .rdata:68D934E4o
aMl_0		db 'ml',0               ; DATA XREF: .rdata:68D934E8o
aMalayalam	db 'Malayalam',0        ; DATA XREF: .rdata:68D934ECo
aMn_0		db 'mn',0               ; DATA XREF: .rdata:68D934F0o
aMongolian	db 'Mongolian',0        ; DATA XREF: .rdata:68D934F4o
aMni_0		db 'mni',0              ; DATA XREF: .rdata:68D934F8o
aManipuri	db 'Manipuri',0         ; DATA XREF: .rdata:68D934FCo
aMoh_0		db 'moh',0              ; DATA XREF: .rdata:68D93500o
aMohawk		db 'Mohawk',0           ; DATA XREF: .rdata:68D93504o
aMr_0		db 'mr',0               ; DATA XREF: .rdata:68D93508o
aMarathi	db 'Marathi',0          ; DATA XREF: .rdata:68D9350Co
aMs_0		db 'ms',0               ; DATA XREF: .rdata:68D93510o
aMalay		db 'Malay',0            ; DATA XREF: .rdata:68D93514o
aMt_0		db 'mt',0               ; DATA XREF: .rdata:68D93518o
aMaltese	db 'Maltese',0          ; DATA XREF: .rdata:68D9351Co
aMy_0		db 'my',0               ; DATA XREF: .rdata:68D93520o
aBurmese	db 'Burmese',0          ; DATA XREF: .rdata:68D93524o
aNb_0		db 'nb',0               ; DATA XREF: .rdata:68D93528o
aNor		db 'NOR',0              ; DATA XREF: .rdata:68D9352Co
aNe_0		db 'ne',0               ; DATA XREF: .rdata:68D93530o
aNepali		db 'Nepali',0           ; DATA XREF: .rdata:68D93534o
aNic_0		db 'nic',0              ; DATA XREF: .rdata:68D93538o
aIbibio		db 'Ibibio',0           ; DATA XREF: .rdata:68D9353Co
aNl_0		db 'nl',0               ; DATA XREF: .rdata:68D93540o
aDutch		db 'Dutch',0            ; DATA XREF: .rdata:68D93544o
aNn_0		db 'nn',0               ; DATA XREF: .rdata:68D93548o
aNon		db 'NON',0              ; DATA XREF: .rdata:68D9354Co
aNo_0		db 'no',0               ; DATA XREF: .rdata:68D93550o
aNorwegian	db 'Norwegian',0        ; DATA XREF: .rdata:68D93554o
aNso_0		db 'nso',0              ; DATA XREF: .rdata:68D93558o
					; .rdata:68D93560o
aNorthernSotho	db 'Northern Sotho',0   ; DATA XREF: .rdata:68D9355Co
aSepedi		db 'Sepedi',0           ; DATA XREF: .rdata:68D93564o
aOc_0		db 'oc',0               ; DATA XREF: .rdata:68D93568o
aOccitan	db 'Occitan',0          ; DATA XREF: .rdata:68D9356Co
aOm_0		db 'om',0               ; DATA XREF: .rdata:68D93570o
aOromo		db 'Oromo',0            ; DATA XREF: .rdata:68D93574o
aOr_0		db 'or',0               ; DATA XREF: .rdata:68D93578o
aOriya		db 'Oriya',0            ; DATA XREF: .rdata:68D9357Co
aPa_0		db 'pa',0               ; DATA XREF: .rdata:68D93580o
aPunjabi	db 'Punjabi',0          ; DATA XREF: .rdata:68D93584o
aPap_0		db 'pap',0              ; DATA XREF: .rdata:68D93588o
aPapiamentu	db 'Papiamentu',0       ; DATA XREF: .rdata:68D9358Co
aPl_0		db 'pl',0               ; DATA XREF: .rdata:68D93590o
aPolish		db 'Polish',0           ; DATA XREF: .rdata:68D93594o
aPrs_0		db 'prs',0              ; DATA XREF: .rdata:68D93598o
aDari		db 'Dari',0             ; DATA XREF: .rdata:68D9359Co
aPs_0		db 'ps',0               ; DATA XREF: .rdata:68D935A0o
aPashto		db 'Pashto',0           ; DATA XREF: .rdata:68D935A4o
aPt_0		db 'pt',0               ; DATA XREF: .rdata:68D935A8o
aPortuguese	db 'Portuguese',0       ; DATA XREF: .rdata:68D935ACo
aQu_0		db 'qu',0               ; DATA XREF: .rdata:68D935B0o
aQuechua	db 'Quechua',0          ; DATA XREF: .rdata:68D935B4o
aQut_0		db 'qut',0              ; DATA XREF: .rdata:68D935B8o
aKIche		db 'K',27h,'iche',27h,0 ; DATA XREF: .rdata:68D935BCo
aRm_0		db 'rm',0               ; DATA XREF: .rdata:68D935C0o
aRomansh	db 'Romansh',0          ; DATA XREF: .rdata:68D935C4o
aRo_0		db 'ro',0               ; DATA XREF: .rdata:68D935C8o
aRomanian	db 'Romanian',0         ; DATA XREF: .rdata:68D935CCo
aRu_0		db 'ru',0               ; DATA XREF: .rdata:68D935D0o
aRussian	db 'Russian',0          ; DATA XREF: .rdata:68D935D4o
aRw_0		db 'rw',0               ; DATA XREF: .rdata:68D935D8o
aKinyarwanda	db 'Kinyarwanda',0      ; DATA XREF: .rdata:68D935DCo
aSa_0		db 'sa',0               ; DATA XREF: .rdata:68D935E0o
aSanskrit	db 'Sanskrit',0         ; DATA XREF: .rdata:68D935E4o
aSah_0		db 'sah',0              ; DATA XREF: .rdata:68D935E8o
aYakut		db 'Yakut',0            ; DATA XREF: .rdata:68D935ECo
aSd_0		db 'sd',0               ; DATA XREF: .rdata:68D935F0o
aSindhi		db 'Sindhi',0           ; DATA XREF: .rdata:68D935F4o
aSe_0		db 'se',0               ; DATA XREF: .rdata:68D935F8o
					; .rdata:68D93600o
aSamiNorthern	db 'Sami (Northern)',0  ; DATA XREF: .rdata:68D935FCo
aNorthernSami	db 'Northern Sami',0    ; DATA XREF: .rdata:68D93604o
aSi_0		db 'si',0               ; DATA XREF: .rdata:68D93608o
aSinhalese	db 'Sinhalese',0        ; DATA XREF: .rdata:68D9360Co
aSk_0		db 'sk',0               ; DATA XREF: .rdata:68D93610o
aSlovak		db 'Slovak',0           ; DATA XREF: .rdata:68D93614o
					; .rdata:68D94244o
aSl_0		db 'sl',0               ; DATA XREF: .rdata:68D93618o
aSlovenian	db 'Slovenian',0        ; DATA XREF: .rdata:68D9361Co
aSma_0		db 'sma',0              ; DATA XREF: .rdata:68D93620o
					; .rdata:68D93628o
aSamiSouthern	db 'Sami (Southern)',0  ; DATA XREF: .rdata:68D93624o
aSouthernSami	db 'Southern Sami',0    ; DATA XREF: .rdata:68D9362Co
aSmj_0		db 'smj',0              ; DATA XREF: .rdata:68D93630o
					; .rdata:68D93638o
aSamiLule	db 'Sami (Lule)',0      ; DATA XREF: .rdata:68D93634o
aLuleSami	db 'Lule Sami',0        ; DATA XREF: .rdata:68D9363Co
aSmn_0		db 'smn',0              ; DATA XREF: .rdata:68D93640o
					; .rdata:68D93648o
aSamiInari	db 'Sami (Inari)',0     ; DATA XREF: .rdata:68D93644o
aInariSami	db 'Inari Sami',0       ; DATA XREF: .rdata:68D9364Co
aSms_0		db 'sms',0              ; DATA XREF: .rdata:68D93650o
					; .rdata:68D93658o
aSamiSkolt	db 'Sami (Skolt)',0     ; DATA XREF: .rdata:68D93654o
aSkoltSami	db 'Skolt Sami',0       ; DATA XREF: .rdata:68D9365Co
aSo_0		db 'so',0               ; DATA XREF: .rdata:68D93660o
aSomali		db 'Somali',0           ; DATA XREF: .rdata:68D93664o
aSq_0		db 'sq',0               ; DATA XREF: .rdata:68D93668o
aAlbanian	db 'Albanian',0         ; DATA XREF: .rdata:68D9366Co
aSr_0		db 'sr',0               ; DATA XREF: .rdata:68D93670o
aSerbianLatin	db 'Serbian (Latin)',0  ; DATA XREF: .rdata:68D93674o
aSr@cyrillic_0	db 'sr@cyrillic',0      ; DATA XREF: .rdata:68D93678o
aSrb		db 'SRB',0              ; DATA XREF: .rdata:68D9367Co
aSw_0		db 'sw',0               ; DATA XREF: .rdata:68D93680o
aSwahili	db 'Swahili',0          ; DATA XREF: .rdata:68D93684o
aSyr_0		db 'syr',0              ; DATA XREF: .rdata:68D93688o
aSyriac		db 'Syriac',0           ; DATA XREF: .rdata:68D9368Co
aTa_0		db 'ta',0               ; DATA XREF: .rdata:68D93690o
aTamil		db 'Tamil',0            ; DATA XREF: .rdata:68D93694o
aTe_0		db 'te',0               ; DATA XREF: .rdata:68D93698o
aTelugu		db 'Telugu',0           ; DATA XREF: .rdata:68D9369Co
aTg_0		db 'tg',0               ; DATA XREF: .rdata:68D936A0o
aTajik		db 'Tajik',0            ; DATA XREF: .rdata:68D936A4o
aTh_0		db 'th',0               ; DATA XREF: .rdata:68D936A8o
aThai		db 'Thai',0             ; DATA XREF: .rdata:68D936ACo
aTi_0		db 'ti',0               ; DATA XREF: .rdata:68D936B0o
aTigrinya	db 'Tigrinya',0         ; DATA XREF: .rdata:68D936B4o
aTk_0		db 'tk',0               ; DATA XREF: .rdata:68D936B8o
aTurkmen	db 'Turkmen',0          ; DATA XREF: .rdata:68D936BCo
aTl_0		db 'tl',0               ; DATA XREF: .rdata:68D936C0o
aFilipino	db 'Filipino',0         ; DATA XREF: .rdata:68D936C4o
aTn_0		db 'tn',0               ; DATA XREF: .rdata:68D936C8o
aTswana		db 'Tswana',0           ; DATA XREF: .rdata:68D936CCo
aTr_0		db 'tr',0               ; DATA XREF: .rdata:68D936D0o
aTurkish	db 'Turkish',0          ; DATA XREF: .rdata:68D936D4o
aTs_0		db 'ts',0               ; DATA XREF: .rdata:68D936D8o
aTsonga		db 'Tsonga',0           ; DATA XREF: .rdata:68D936DCo
aTt_0		db 'tt',0               ; DATA XREF: .rdata:68D936E0o
aTatar		db 'Tatar',0            ; DATA XREF: .rdata:68D936E4o
aUg_0		db 'ug',0               ; DATA XREF: .rdata:68D936E8o
aUighur		db 'Uighur',0           ; DATA XREF: .rdata:68D936ECo
aUk_0		db 'uk',0               ; DATA XREF: .rdata:68D936F0o
aUkrainian	db 'Ukrainian',0        ; DATA XREF: .rdata:68D936F4o
aUr_0		db 'ur',0               ; DATA XREF: .rdata:68D936F8o
aUrdu		db 'Urdu',0             ; DATA XREF: .rdata:68D936FCo
aUz_0		db 'uz',0               ; DATA XREF: .rdata:68D93700o
					; .rdata:68D93708o
aUzbek		db 'Uzbek',0            ; DATA XREF: .rdata:68D93704o
aUzbekLatin	db 'Uzbek (Latin)',0    ; DATA XREF: .rdata:68D9370Co
aUz@cyrillic_0	db 'uz@cyrillic',0      ; DATA XREF: .rdata:68D93710o
aUzbekCyrillic	db 'Uzbek (Cyrillic)',0 ; DATA XREF: .rdata:68D93714o
aVe_0		db 've',0               ; DATA XREF: .rdata:68D93718o
aVenda		db 'Venda',0            ; DATA XREF: .rdata:68D9371Co
aVi_0		db 'vi',0               ; DATA XREF: .rdata:68D93720o
aVietnamese	db 'Vietnamese',0       ; DATA XREF: .rdata:68D93724o
aWen_0		db 'wen',0              ; DATA XREF: .rdata:68D93728o
aSorbian	db 'Sorbian',0          ; DATA XREF: .rdata:68D9372Co
aWo_0		db 'wo',0               ; DATA XREF: .rdata:68D93730o
aWolof		db 'Wolof',0            ; DATA XREF: .rdata:68D93734o
aXh_0		db 'xh',0               ; DATA XREF: .rdata:68D93738o
aXhosa		db 'Xhosa',0            ; DATA XREF: .rdata:68D9373Co
aYi_1		db 'yi',0               ; DATA XREF: .rdata:68D93740o
aYiddish	db 'Yiddish',0          ; DATA XREF: .rdata:68D93744o
aYo_0		db 'yo',0               ; DATA XREF: .rdata:68D93748o
aYoruba		db 'Yoruba',0           ; DATA XREF: .rdata:68D9374Co
aZh_0		db 'zh',0               ; DATA XREF: .rdata:68D93750o
aChinese	db 'Chinese',0          ; DATA XREF: .rdata:68D93754o
aZu_0		db 'zu',0               ; DATA XREF: .rdata:68D93758o
aZulu		db 'Zulu',0             ; DATA XREF: .rdata:68D9375Co
		align 20h
off_68D93240	dd offset aAf_0		; DATA XREF: sub_68D8AA60+120o
					; sub_68D8AA60+21Ao
					; "af"
off_68D93244	dd offset aAfrikaans	; DATA XREF: sub_68D8AA60+142o
					; sub_68D8AA60+29Eo ...
					; "Afrikaans"
		dd offset aAm_0		; "am"
		dd offset aAmharic	; "Amharic"
		dd offset aAr_0		; "ar"
		dd offset aArabic	; "Arabic"
		dd offset aArn_0	; "arn"
		dd offset aMapudungun	; "Mapudungun"
		dd offset aAs_0		; "as"
		dd offset aAssamese	; "Assamese"
		dd offset aAz@cyrillic_0 ; "az@cyrillic"
		dd offset aAzeriCyrillic ; "Azeri (Cyrillic)"
		dd offset aAz@latin_0	; "az@latin"
		dd offset aAzeriLatin	; "Azeri (Latin)"
		dd offset aBa_0		; "ba"
		dd offset aBashkir	; "Bashkir"
		dd offset aBe_0		; "be"
		dd offset aBelarusian	; "Belarusian"
		dd offset aBer_0	; "ber"
		dd offset aTamazight	; "Tamazight"
		dd offset aBer@arabic	; "ber@arabic"
		dd offset aTamazightArabi ; "Tamazight (Arabic)"
		dd offset aBer@latin_0	; "ber@latin"
		dd offset aTamazightLatin ; "Tamazight (Latin)"
		dd offset aBg_0		; "bg"
		dd offset aBulgarian	; "Bulgarian"
		dd offset aBin_0	; "bin"
		dd offset aEdo		; "Edo"
		dd offset aBn_0		; "bn"
		dd offset aBengali	; "Bengali"
		dd offset aBn_bd_0	; "bn_BD"
		dd offset aBengaliBanglad ; "Bengali (Bangladesh)"
		dd offset aBn_in_0	; "bn_IN"
		dd offset aBengaliIndia	; "Bengali (India)"
		dd offset aBnt_0	; "bnt"
		dd offset aSutu		; "Sutu"
		dd offset aBo_0		; "bo"
		dd offset aTibetan	; "Tibetan"
		dd offset aBr_0		; "br"
		dd offset aBreton	; "Breton"
		dd offset aBs_0		; "bs"
		dd offset aBsb		; "BSB"
		dd offset aBs@cyrillic_0 ; "bs@cyrillic"
		dd offset aBsc		; "BSC"
		dd offset aCa_0		; "ca"
		dd offset aCatalan	; "Catalan"
		dd offset aChr_0	; "chr"
		dd offset aCherokee	; "Cherokee"
		dd offset aCo_0		; "co"
		dd offset aCorsican	; "Corsican"
		dd offset aCpe_0	; "cpe"
		dd offset aHawaiian	; "Hawaiian"
		dd offset aCs_0		; "cs"
		dd offset aCzech	; "Czech"
		dd offset aCy_0		; "cy"
		dd offset aWelsh	; "Welsh"
		dd offset aDa_0		; "da"
		dd offset aDanish	; "Danish"
		dd offset aDe_0		; "de"
		dd offset aGerman	; "German"
		dd offset aDsb		; "dsb"
		dd offset aLowerSorbian	; "Lower Sorbian"
		dd offset aDv_0		; "dv"
		dd offset aDivehi	; "Divehi"
		dd offset aEl_0		; "el"
		dd offset aGreek	; "Greek"
		dd offset aEn_0		; "en"
		dd offset aEnglish	; "English"
		dd offset aEs_0		; "es"
		dd offset aSpanish	; "Spanish"
		dd offset aEt_0		; "et"
		dd offset aEstonian	; "Estonian"
		dd offset aEu_0		; "eu"
		dd offset aBasque	; "Basque"
		dd offset aFa_0		; "fa"
		dd offset aFarsi	; "Farsi"
		dd offset aFf_0		; "ff"
		dd offset aFulfulde	; "Fulfulde"
		dd offset aFi_0		; "fi"
		dd offset aFinnish	; "Finnish"
		dd offset aFo_0		; "fo"
		dd offset aFaroese	; "Faroese"
		dd offset aFr_0		; "fr"
		dd offset aFrench	; "French"
		dd offset aFy_0		; "fy"
		dd offset aFrisian	; "Frisian"
		dd offset aGa_0		; "ga"
		dd offset aIre		; "IRE"
		dd offset aGd_0		; "gd"
		dd offset aGaelicScotland ; "Gaelic (Scotland)"
		dd offset aGd_0		; "gd"
		dd offset aScottishGaelic ; "Scottish Gaelic"
		dd offset aGl_0		; "gl"
		dd offset aGalician	; "Galician"
		dd offset aGn_0		; "gn"
		dd offset aGuarani	; "Guarani"
		dd offset aGsw_0	; "gsw"
		dd offset aAlsatian	; "Alsatian"
		dd offset aGu_0		; "gu"
		dd offset aGujarati	; "Gujarati"
		dd offset aHa_0		; "ha"
		dd offset aHausa	; "Hausa"
		dd offset aHe_0		; "he"
		dd offset aHebrew	; "Hebrew"
		dd offset aHi_0		; "hi"
		dd offset aHindi	; "Hindi"
		dd offset aHr_0		; "hr"
		dd offset aCroatian	; "Croatian"
		dd offset aHsb		; "hsb"
		dd offset aUpperSorbian	; "Upper Sorbian"
		dd offset aHu_0		; "hu"
		dd offset aHungarian	; "Hungarian"
		dd offset aHy_0		; "hy"
		dd offset aArmenian	; "Armenian"
		dd offset aId_0		; "id"
		dd offset aIndonesian	; "Indonesian"
		dd offset aIg_0		; "ig"
		dd offset aIgbo		; "Igbo"
		dd offset aIi_0		; "ii"
		dd offset aYi_0		; "Yi"
		dd offset aIs_0		; "is"
		dd offset aIcelandic	; "Icelandic"
		dd offset aIt_0		; "it"
		dd offset aItalian	; "Italian"
		dd offset aIu_0		; "iu"
		dd offset aIuk		; "IUK"
		dd offset aJa_0		; "ja"
		dd offset aJapanese	; "Japanese"
		dd offset aKa_0		; "ka"
		dd offset aGeorgian	; "Georgian"
		dd offset aKk_0		; "kk"
		dd offset aKazakh	; "Kazakh"
		dd offset aKl_0		; "kl"
		dd offset aGreenlandic	; "Greenlandic"
		dd offset aKm_0		; "km"
		dd offset aCambodian	; "Cambodian"
		dd offset aKm_0		; "km"
		dd offset aKhmer	; "Khmer"
		dd offset aKn_0		; "kn"
		dd offset aKannada	; "Kannada"
		dd offset aKo_0		; "ko"
		dd offset aKorean	; "Korean"
		dd offset aKok_0	; "kok"
		dd offset aKonkani	; "Konkani"
		dd offset aKr_0		; "kr"
		dd offset aKanuri	; "Kanuri"
		dd offset aKs_0		; "ks"
		dd offset aKashmiri	; "Kashmiri"
		dd offset aKs_in_0	; "ks_IN"
		dd offset aKashmiri_india ; "Kashmiri_India"
		dd offset aKs_pk_0	; "ks_PK"
		dd offset aKashmiriArabic ; "Kashmiri (Arabic)_Pakistan"
		dd offset aKy_0		; "ky"
		dd offset aKyrgyz	; "Kyrgyz"
		dd offset aLa_0		; "la"
		dd offset aLatin	; "Latin"
		dd offset aLb_0		; "lb"
		dd offset aLuxembourgish ; "Luxembourgish"
		dd offset aLo_0		; "lo"
		dd offset aLao		; "Lao"
		dd offset aLt_0		; "lt"
		dd offset aLithuanian	; "Lithuanian"
		dd offset aLv_0		; "lv"
		dd offset aLatvian	; "Latvian"
		dd offset aMi_0		; "mi"
		dd offset aMaori	; "Maori"
		dd offset aMk_0		; "mk"
		dd offset aFyroMacedonian ; "FYRO Macedonian"
		dd offset aMk_0		; "mk"
		dd offset aMacedonian	; "Macedonian"
		dd offset aMl_0		; "ml"
		dd offset aMalayalam	; "Malayalam"
		dd offset aMn_0		; "mn"
		dd offset aMongolian	; "Mongolian"
		dd offset aMni_0	; "mni"
		dd offset aManipuri	; "Manipuri"
		dd offset aMoh_0	; "moh"
		dd offset aMohawk	; "Mohawk"
		dd offset aMr_0		; "mr"
		dd offset aMarathi	; "Marathi"
		dd offset aMs_0		; "ms"
		dd offset aMalay	; "Malay"
		dd offset aMt_0		; "mt"
		dd offset aMaltese	; "Maltese"
		dd offset aMy_0		; "my"
		dd offset aBurmese	; "Burmese"
		dd offset aNb_0		; "nb"
		dd offset aNor		; "NOR"
		dd offset aNe_0		; "ne"
		dd offset aNepali	; "Nepali"
		dd offset aNic_0	; "nic"
		dd offset aIbibio	; "Ibibio"
		dd offset aNl_0		; "nl"
		dd offset aDutch	; "Dutch"
		dd offset aNn_0		; "nn"
		dd offset aNon		; "NON"
		dd offset aNo_0		; "no"
		dd offset aNorwegian	; "Norwegian"
		dd offset aNso_0	; "nso"
		dd offset aNorthernSotho ; "Northern Sotho"
		dd offset aNso_0	; "nso"
		dd offset aSepedi	; "Sepedi"
		dd offset aOc_0		; "oc"
		dd offset aOccitan	; "Occitan"
		dd offset aOm_0		; "om"
		dd offset aOromo	; "Oromo"
		dd offset aOr_0		; "or"
		dd offset aOriya	; "Oriya"
		dd offset aPa_0		; "pa"
		dd offset aPunjabi	; "Punjabi"
		dd offset aPap_0	; "pap"
		dd offset aPapiamentu	; "Papiamentu"
		dd offset aPl_0		; "pl"
		dd offset aPolish	; "Polish"
		dd offset aPrs_0	; "prs"
		dd offset aDari		; "Dari"
		dd offset aPs_0		; "ps"
		dd offset aPashto	; "Pashto"
		dd offset aPt_0		; "pt"
		dd offset aPortuguese	; "Portuguese"
		dd offset aQu_0		; "qu"
		dd offset aQuechua	; "Quechua"
		dd offset aQut_0	; "qut"
		dd offset aKIche	; "K'iche'"
		dd offset aRm_0		; "rm"
		dd offset aRomansh	; "Romansh"
		dd offset aRo_0		; "ro"
		dd offset aRomanian	; "Romanian"
		dd offset aRu_0		; "ru"
		dd offset aRussian	; "Russian"
		dd offset aRw_0		; "rw"
		dd offset aKinyarwanda	; "Kinyarwanda"
		dd offset aSa_0		; "sa"
		dd offset aSanskrit	; "Sanskrit"
		dd offset aSah_0	; "sah"
		dd offset aYakut	; "Yakut"
		dd offset aSd_0		; "sd"
		dd offset aSindhi	; "Sindhi"
		dd offset aSe_0		; "se"
		dd offset aSamiNorthern	; "Sami	(Northern)"
		dd offset aSe_0		; "se"
		dd offset aNorthernSami	; "Northern Sami"
		dd offset aSi_0		; "si"
		dd offset aSinhalese	; "Sinhalese"
		dd offset aSk_0		; "sk"
		dd offset aSlovak	; "Slovak"
		dd offset aSl_0		; "sl"
		dd offset aSlovenian	; "Slovenian"
		dd offset aSma_0	; "sma"
		dd offset aSamiSouthern	; "Sami	(Southern)"
		dd offset aSma_0	; "sma"
		dd offset aSouthernSami	; "Southern Sami"
		dd offset aSmj_0	; "smj"
		dd offset aSamiLule	; "Sami	(Lule)"
		dd offset aSmj_0	; "smj"
		dd offset aLuleSami	; "Lule	Sami"
		dd offset aSmn_0	; "smn"
		dd offset aSamiInari	; "Sami	(Inari)"
		dd offset aSmn_0	; "smn"
		dd offset aInariSami	; "Inari Sami"
		dd offset aSms_0	; "sms"
		dd offset aSamiSkolt	; "Sami	(Skolt)"
		dd offset aSms_0	; "sms"
		dd offset aSkoltSami	; "Skolt Sami"
		dd offset aSo_0		; "so"
		dd offset aSomali	; "Somali"
		dd offset aSq_0		; "sq"
		dd offset aAlbanian	; "Albanian"
		dd offset aSr_0		; "sr"
		dd offset aSerbianLatin	; "Serbian (Latin)"
		dd offset aSr@cyrillic_0 ; "sr@cyrillic"
		dd offset aSrb		; "SRB"
		dd offset aSw_0		; "sw"
		dd offset aSwahili	; "Swahili"
		dd offset aSyr_0	; "syr"
		dd offset aSyriac	; "Syriac"
		dd offset aTa_0		; "ta"
		dd offset aTamil	; "Tamil"
		dd offset aTe_0		; "te"
		dd offset aTelugu	; "Telugu"
		dd offset aTg_0		; "tg"
		dd offset aTajik	; "Tajik"
		dd offset aTh_0		; "th"
		dd offset aThai		; "Thai"
		dd offset aTi_0		; "ti"
		dd offset aTigrinya	; "Tigrinya"
		dd offset aTk_0		; "tk"
		dd offset aTurkmen	; "Turkmen"
		dd offset aTl_0		; "tl"
		dd offset aFilipino	; "Filipino"
		dd offset aTn_0		; "tn"
		dd offset aTswana	; "Tswana"
		dd offset aTr_0		; "tr"
		dd offset aTurkish	; "Turkish"
		dd offset aTs_0		; "ts"
		dd offset aTsonga	; "Tsonga"
		dd offset aTt_0		; "tt"
		dd offset aTatar	; "Tatar"
		dd offset aUg_0		; "ug"
		dd offset aUighur	; "Uighur"
		dd offset aUk_0		; "uk"
		dd offset aUkrainian	; "Ukrainian"
		dd offset aUr_0		; "ur"
		dd offset aUrdu		; "Urdu"
		dd offset aUz_0		; "uz"
		dd offset aUzbek	; "Uzbek"
		dd offset aUz_0		; "uz"
		dd offset aUzbekLatin	; "Uzbek (Latin)"
		dd offset aUz@cyrillic_0 ; "uz@cyrillic"
		dd offset aUzbekCyrillic ; "Uzbek (Cyrillic)"
		dd offset aVe_0		; "ve"
		dd offset aVenda	; "Venda"
		dd offset aVi_0		; "vi"
		dd offset aVietnamese	; "Vietnamese"
		dd offset aWen_0	; "wen"
		dd offset aSorbian	; "Sorbian"
		dd offset aWo_0		; "wo"
		dd offset aWolof	; "Wolof"
		dd offset aXh_0		; "xh"
		dd offset aXhosa	; "Xhosa"
		dd offset aYi_1		; "yi"
		dd offset aYiddish	; "Yiddish"
		dd offset aYo_0		; "yo"
		dd offset aYoruba	; "Yoruba"
		dd offset aZh_0		; "zh"
		dd offset aChinese	; "Chinese"
		dd offset aZu_0		; "zu"
		dd offset aZulu		; "Zulu"
byte_68D93760	db 41h,	45h, 0		; DATA XREF: .rdata:off_68D93E80o
aU_a_e_		db 'U.A.E.',0           ; DATA XREF: .rdata:off_68D93E84o
aAf_1		db 'AF',0               ; DATA XREF: .rdata:68D93E88o
aAfghanistan	db 'Afghanistan',0      ; DATA XREF: .rdata:68D93E8Co
aAl		db 'AL',0               ; DATA XREF: .rdata:68D93E90o
aAlbania	db 'Albania',0          ; DATA XREF: .rdata:68D93E94o
aAm_1		db 'AM',0               ; DATA XREF: .rdata:68D93E98o
aArmenia	db 'Armenia',0          ; DATA XREF: .rdata:68D93E9Co
aAn		db 'AN',0               ; DATA XREF: .rdata:68D93EA0o
aNetherlandsAnt	db 'Netherlands Antilles',0 ; DATA XREF: .rdata:68D93EA4o
aAr_1		db 'AR',0               ; DATA XREF: .rdata:68D93EA8o
aArgentina	db 'Argentina',0        ; DATA XREF: .rdata:68D93EACo
aAt		db 'AT',0               ; DATA XREF: .rdata:68D93EB0o
aAustria	db 'Austria',0          ; DATA XREF: .rdata:68D93EB4o
aAu		db 'AU',0               ; DATA XREF: .rdata:68D93EB8o
aAustralia	db 'Australia',0        ; DATA XREF: .rdata:68D93EBCo
aAz_0		db 'AZ',0               ; DATA XREF: .rdata:68D93EC0o
aAzerbaijan	db 'Azerbaijan',0       ; DATA XREF: .rdata:68D93EC4o
aBa_1		db 'BA',0               ; DATA XREF: .rdata:68D93EC8o
aBosniaAndHerze	db 'Bosnia and Herzegovina',0 ; DATA XREF: .rdata:68D93ECCo
aBd		db 'BD',0               ; DATA XREF: .rdata:68D93ED0o
aBangladesh	db 'Bangladesh',0       ; DATA XREF: .rdata:68D93ED4o
aBe_1		db 'BE',0               ; DATA XREF: .rdata:68D93ED8o
aBelgium	db 'Belgium',0          ; DATA XREF: .rdata:68D93EDCo
aBg_1		db 'BG',0               ; DATA XREF: .rdata:68D93EE0o
aBulgaria	db 'Bulgaria',0         ; DATA XREF: .rdata:68D93EE4o
aBh		db 'BH',0               ; DATA XREF: .rdata:68D93EE8o
aBahrain	db 'Bahrain',0          ; DATA XREF: .rdata:68D93EECo
aBn_1		db 'BN',0               ; DATA XREF: .rdata:68D93EF0o
aBruneiDarussal	db 'Brunei Darussalam',0 ; DATA XREF: .rdata:68D93EF4o
aBo_1		db 'BO',0               ; DATA XREF: .rdata:68D93EF8o
aBolivia	db 'Bolivia',0          ; DATA XREF: .rdata:68D93EFCo
aBr_1		db 'BR',0               ; DATA XREF: .rdata:68D93F00o
aBrazil		db 'Brazil',0           ; DATA XREF: .rdata:68D93F04o
aBt		db 'BT',0               ; DATA XREF: .rdata:68D93F08o
aBhutan		db 'Bhutan',0           ; DATA XREF: .rdata:68D93F0Co
aBy		db 'BY',0               ; DATA XREF: .rdata:68D93F10o
aBelarus	db 'Belarus',0          ; DATA XREF: .rdata:68D93F14o
aBz		db 'BZ',0               ; DATA XREF: .rdata:68D93F18o
aBelize		db 'Belize',0           ; DATA XREF: .rdata:68D93F1Co
aCa_1		db 'CA',0               ; DATA XREF: .rdata:68D93F20o
aCanada		db 'Canada',0           ; DATA XREF: .rdata:68D93F24o
aCg		db 'CG',0               ; DATA XREF: .rdata:68D93F28o
aCongo		db 'Congo',0            ; DATA XREF: .rdata:68D93F2Co
aCh		db 'CH',0               ; DATA XREF: .rdata:68D93F30o
aSwitzerland	db 'Switzerland',0      ; DATA XREF: .rdata:68D93F34o
aCi		db 'CI',0               ; DATA XREF: .rdata:68D93F38o
aCoteDIvoire	db 'Cote d',27h,'Ivoire',0 ; DATA XREF: .rdata:68D93F3Co
aCl		db 'CL',0               ; DATA XREF: .rdata:68D93F40o
aChile		db 'Chile',0            ; DATA XREF: .rdata:68D93F44o
aCm		db 'CM',0               ; DATA XREF: .rdata:68D93F48o
aCameroon	db 'Cameroon',0         ; DATA XREF: .rdata:68D93F4Co
aCn		db 'CN',0               ; DATA XREF: .rdata:68D93F50o
aPeopleSRepubli	db 'People',27h,'s Republic of China',0 ; DATA XREF: .rdata:68D93F54o
aCo_1		db 'CO',0               ; DATA XREF: .rdata:68D93F58o
aColombia	db 'Colombia',0         ; DATA XREF: .rdata:68D93F5Co
aCr		db 'CR',0               ; DATA XREF: .rdata:68D93F60o
aCostaRica	db 'Costa Rica',0       ; DATA XREF: .rdata:68D93F64o
aCs_1		db 'CS',0               ; DATA XREF: .rdata:68D93F68o
aSerbiaAndMonte	db 'Serbia and Montenegro',0 ; DATA XREF: .rdata:68D93F6Co
aCz		db 'CZ',0               ; DATA XREF: .rdata:68D93F70o
aCzechRepublic	db 'Czech Republic',0   ; DATA XREF: .rdata:68D93F74o
aDe_1		db 'DE',0               ; DATA XREF: .rdata:68D93F78o
aGermany	db 'Germany',0          ; DATA XREF: .rdata:68D93F7Co
aDk		db 'DK',0               ; DATA XREF: .rdata:68D93F80o
aDenmark	db 'Denmark',0          ; DATA XREF: .rdata:68D93F84o
aDo		db 'DO',0               ; DATA XREF: .rdata:68D93F88o
aDominicanRepub	db 'Dominican Republic',0 ; DATA XREF: .rdata:68D93F8Co
aDz		db 'DZ',0               ; DATA XREF: .rdata:68D93F90o
aAlgeria	db 'Algeria',0          ; DATA XREF: .rdata:68D93F94o
aEc		db 'EC',0               ; DATA XREF: .rdata:68D93F98o
aEcuador	db 'Ecuador',0          ; DATA XREF: .rdata:68D93F9Co
aEe		db 'EE',0               ; DATA XREF: .rdata:68D93FA0o
aEstonia	db 'Estonia',0          ; DATA XREF: .rdata:68D93FA4o
aEg		db 'EG',0               ; DATA XREF: .rdata:68D93FA8o
aEgypt		db 'Egypt',0            ; DATA XREF: .rdata:68D93FACo
aEr		db 'ER',0               ; DATA XREF: .rdata:68D93FB0o
aEritrea	db 'Eritrea',0          ; DATA XREF: .rdata:68D93FB4o
aEs_1		db 'ES',0               ; DATA XREF: .rdata:68D93FB8o
aSpain		db 'Spain',0            ; DATA XREF: .rdata:68D93FBCo
aEt_1		db 'ET',0               ; DATA XREF: .rdata:68D93FC0o
aEthiopia	db 'Ethiopia',0         ; DATA XREF: .rdata:68D93FC4o
aFi_1		db 'FI',0               ; DATA XREF: .rdata:68D93FC8o
aFinland	db 'Finland',0          ; DATA XREF: .rdata:68D93FCCo
aFo_1		db 'FO',0               ; DATA XREF: .rdata:68D93FD0o
aFaroeIslands	db 'Faroe Islands',0    ; DATA XREF: .rdata:68D93FD4o
aFr_1		db 'FR',0               ; DATA XREF: .rdata:68D93FD8o
aFrance		db 'France',0           ; DATA XREF: .rdata:68D93FDCo
aGb		db 'GB',0               ; DATA XREF: .rdata:68D93FE0o
aUnitedKingdom	db 'United Kingdom',0   ; DATA XREF: .rdata:68D93FE4o
aGd_1		db 'GD',0               ; DATA XREF: .rdata:68D93FE8o
aCaribbean	db 'Caribbean',0        ; DATA XREF: .rdata:68D93FECo
aGe		db 'GE',0               ; DATA XREF: .rdata:68D93FF0o
aGeorgia	db 'Georgia',0          ; DATA XREF: .rdata:68D93FF4o
aGl_1		db 'GL',0               ; DATA XREF: .rdata:68D93FF8o
aGreenland	db 'Greenland',0        ; DATA XREF: .rdata:68D93FFCo
aGr		db 'GR',0               ; DATA XREF: .rdata:68D94000o
aGreece		db 'Greece',0           ; DATA XREF: .rdata:68D94004o
aGt		db 'GT',0               ; DATA XREF: .rdata:68D94008o
aGuatemala	db 'Guatemala',0        ; DATA XREF: .rdata:68D9400Co
aHk		db 'HK',0               ; DATA XREF: .rdata:68D94010o
					; .rdata:68D94018o
aHongKong	db 'Hong Kong',0        ; DATA XREF: .rdata:68D94014o
aHongKongS_a_r_	db 'Hong Kong S.A.R.',0 ; DATA XREF: .rdata:68D9401Co
aHn		db 'HN',0               ; DATA XREF: .rdata:68D94020o
aHonduras	db 'Honduras',0         ; DATA XREF: .rdata:68D94024o
aHr_1		db 'HR',0               ; DATA XREF: .rdata:68D94028o
aCroatia	db 'Croatia',0          ; DATA XREF: .rdata:68D9402Co
aHt		db 'HT',0               ; DATA XREF: .rdata:68D94030o
aHaiti		db 'Haiti',0            ; DATA XREF: .rdata:68D94034o
aHu_1		db 'HU',0               ; DATA XREF: .rdata:68D94038o
aHungary	db 'Hungary',0          ; DATA XREF: .rdata:68D9403Co
aId_1		db 'ID',0               ; DATA XREF: .rdata:68D94040o
aIndonesia	db 'Indonesia',0        ; DATA XREF: .rdata:68D94044o
aIe		db 'IE',0               ; DATA XREF: .rdata:68D94048o
aIreland	db 'Ireland',0          ; DATA XREF: .rdata:68D9404Co
aIl		db 'IL',0               ; DATA XREF: .rdata:68D94050o
aIsrael		db 'Israel',0           ; DATA XREF: .rdata:68D94054o
aIn		db 'IN',0               ; DATA XREF: .rdata:68D94058o
aIndia		db 'India',0            ; DATA XREF: .rdata:68D9405Co
aIq		db 'IQ',0               ; DATA XREF: .rdata:68D94060o
aIraq		db 'Iraq',0             ; DATA XREF: .rdata:68D94064o
aIr		db 'IR',0               ; DATA XREF: .rdata:68D94068o
aIran		db 'Iran',0             ; DATA XREF: .rdata:68D9406Co
aIs_1		db 'IS',0               ; DATA XREF: .rdata:68D94070o
aIceland	db 'Iceland',0          ; DATA XREF: .rdata:68D94074o
aIt_1		db 'IT',0               ; DATA XREF: .rdata:68D94078o
aItaly		db 'Italy',0            ; DATA XREF: .rdata:68D9407Co
aJm		db 'JM',0               ; DATA XREF: .rdata:68D94080o
aJamaica	db 'Jamaica',0          ; DATA XREF: .rdata:68D94084o
aJo		db 'JO',0               ; DATA XREF: .rdata:68D94088o
aJordan		db 'Jordan',0           ; DATA XREF: .rdata:68D9408Co
aJp		db 'JP',0               ; DATA XREF: .rdata:68D94090o
aJapan		db 'Japan',0            ; DATA XREF: .rdata:68D94094o
aKe		db 'KE',0               ; DATA XREF: .rdata:68D94098o
aKenya		db 'Kenya',0            ; DATA XREF: .rdata:68D9409Co
aKg		db 'KG',0               ; DATA XREF: .rdata:68D940A0o
aKyrgyzstan	db 'Kyrgyzstan',0       ; DATA XREF: .rdata:68D940A4o
aKh		db 'KH',0               ; DATA XREF: .rdata:68D940A8o
aCambodia	db 'Cambodia',0         ; DATA XREF: .rdata:68D940ACo
aKr_1		db 'KR',0               ; DATA XREF: .rdata:68D940B0o
aSouthKorea	db 'South Korea',0      ; DATA XREF: .rdata:68D940B4o
aKw		db 'KW',0               ; DATA XREF: .rdata:68D940B8o
aKuwait		db 'Kuwait',0           ; DATA XREF: .rdata:68D940BCo
aKz		db 'KZ',0               ; DATA XREF: .rdata:68D940C0o
aKazakhstan	db 'Kazakhstan',0       ; DATA XREF: .rdata:68D940C4o
aLa_1		db 'LA',0               ; DATA XREF: .rdata:68D940C8o
aLaos		db 'Laos',0             ; DATA XREF: .rdata:68D940CCo
aLb_1		db 'LB',0               ; DATA XREF: .rdata:68D940D0o
aLebanon	db 'Lebanon',0          ; DATA XREF: .rdata:68D940D4o
aLi		db 'LI',0               ; DATA XREF: .rdata:68D940D8o
aLiechtenstein	db 'Liechtenstein',0    ; DATA XREF: .rdata:68D940DCo
aLk		db 'LK',0               ; DATA XREF: .rdata:68D940E0o
aSriLanka	db 'Sri Lanka',0        ; DATA XREF: .rdata:68D940E4o
aLt_1		db 'LT',0               ; DATA XREF: .rdata:68D940E8o
aLithuania	db 'Lithuania',0        ; DATA XREF: .rdata:68D940ECo
aLu		db 'LU',0               ; DATA XREF: .rdata:68D940F0o
aLuxembourg	db 'Luxembourg',0       ; DATA XREF: .rdata:68D940F4o
aLv_1		db 'LV',0               ; DATA XREF: .rdata:68D940F8o
aLatvia		db 'Latvia',0           ; DATA XREF: .rdata:68D940FCo
aLy		db 'LY',0               ; DATA XREF: .rdata:68D94100o
aLibya		db 'Libya',0            ; DATA XREF: .rdata:68D94104o
aMa		db 'MA',0               ; DATA XREF: .rdata:68D94108o
aMorocco	db 'Morocco',0          ; DATA XREF: .rdata:68D9410Co
aMc		db 'MC',0               ; DATA XREF: .rdata:68D94110o
aPrincipalityOf	db 'Principality of Monaco',0 ; DATA XREF: .rdata:68D94114o
aMd		db 'MD',0               ; DATA XREF: .rdata:68D94118o
					; .rdata:68D94120o
aMoldava	db 'Moldava',0          ; DATA XREF: .rdata:68D9411Co
aMoldova	db 'Moldova',0          ; DATA XREF: .rdata:68D94124o
aMe		db 'ME',0               ; DATA XREF: .rdata:68D94128o
aMontenegro	db 'Montenegro',0       ; DATA XREF: .rdata:68D9412Co
aMk_1		db 'MK',0               ; DATA XREF: .rdata:68D94130o
		align 4
aFormerYugoslav	db 'Former Yugoslav Republic of Macedonia',0 ; DATA XREF: .rdata:68D94134o
aMl_1		db 'ML',0               ; DATA XREF: .rdata:68D94138o
aMali		db 'Mali',0             ; DATA XREF: .rdata:68D9413Co
aMm		db 'MM',0               ; DATA XREF: .rdata:68D94140o
aMyanmar	db 'Myanmar',0          ; DATA XREF: .rdata:68D94144o
aMn_1		db 'MN',0               ; DATA XREF: .rdata:68D94148o
aMongolia	db 'Mongolia',0         ; DATA XREF: .rdata:68D9414Co
aMo		db 'MO',0               ; DATA XREF: .rdata:68D94150o
aMacauS_a_r_	db 'Macau S.A.R.',0     ; DATA XREF: .rdata:68D94154o
aMt_1		db 'MT',0               ; DATA XREF: .rdata:68D94158o
aMalta		db 'Malta',0            ; DATA XREF: .rdata:68D9415Co
aMv		db 'MV',0               ; DATA XREF: .rdata:68D94160o
aMaldives	db 'Maldives',0         ; DATA XREF: .rdata:68D94164o
aMx		db 'MX',0               ; DATA XREF: .rdata:68D94168o
aMexico		db 'Mexico',0           ; DATA XREF: .rdata:68D9416Co
aMy_1		db 'MY',0               ; DATA XREF: .rdata:68D94170o
aMalaysia	db 'Malaysia',0         ; DATA XREF: .rdata:68D94174o
aNg		db 'NG',0               ; DATA XREF: .rdata:68D94178o
aNigeria	db 'Nigeria',0          ; DATA XREF: .rdata:68D9417Co
aNi		db 'NI',0               ; DATA XREF: .rdata:68D94180o
aNicaragua	db 'Nicaragua',0        ; DATA XREF: .rdata:68D94184o
aNl_1		db 'NL',0               ; DATA XREF: .rdata:68D94188o
aNetherlands	db 'Netherlands',0      ; DATA XREF: .rdata:68D9418Co
aNo_1		db 'NO',0               ; DATA XREF: .rdata:68D94190o
aNorway		db 'Norway',0           ; DATA XREF: .rdata:68D94194o
aNp		db 'NP',0               ; DATA XREF: .rdata:68D94198o
aNepal		db 'Nepal',0            ; DATA XREF: .rdata:68D9419Co
aNz		db 'NZ',0               ; DATA XREF: .rdata:68D941A0o
aNewZealand	db 'New Zealand',0      ; DATA XREF: .rdata:68D941A4o
aOm_1		db 'OM',0               ; DATA XREF: .rdata:68D941A8o
aOman		db 'Oman',0             ; DATA XREF: .rdata:68D941ACo
aPa_1		db 'PA',0               ; DATA XREF: .rdata:68D941B0o
aPanama		db 'Panama',0           ; DATA XREF: .rdata:68D941B4o
aPe		db 'PE',0               ; DATA XREF: .rdata:68D941B8o
aPeru		db 'Peru',0             ; DATA XREF: .rdata:68D941BCo
aPh		db 'PH',0               ; DATA XREF: .rdata:68D941C0o
aPhilippines	db 'Philippines',0      ; DATA XREF: .rdata:68D941C4o
aPk		db 'PK',0               ; DATA XREF: .rdata:68D941C8o
aIslamicRepubli	db 'Islamic Republic of Pakistan',0 ; DATA XREF: .rdata:68D941CCo
aPl_1		db 'PL',0               ; DATA XREF: .rdata:68D941D0o
aPoland		db 'Poland',0           ; DATA XREF: .rdata:68D941D4o
aPr		db 'PR',0               ; DATA XREF: .rdata:68D941D8o
aPuertoRico	db 'Puerto Rico',0      ; DATA XREF: .rdata:68D941DCo
aPt_1		db 'PT',0               ; DATA XREF: .rdata:68D941E0o
aPortugal	db 'Portugal',0         ; DATA XREF: .rdata:68D941E4o
aPy		db 'PY',0               ; DATA XREF: .rdata:68D941E8o
aParaguay	db 'Paraguay',0         ; DATA XREF: .rdata:68D941ECo
aQa		db 'QA',0               ; DATA XREF: .rdata:68D941F0o
aQatar		db 'Qatar',0            ; DATA XREF: .rdata:68D941F4o
aRe		db 'RE',0               ; DATA XREF: .rdata:68D941F8o
aReunion	db 'Reunion',0          ; DATA XREF: .rdata:68D941FCo
aRo_1		db 'RO',0               ; DATA XREF: .rdata:68D94200o
aRomania	db 'Romania',0          ; DATA XREF: .rdata:68D94204o
aRs		db 'RS',0               ; DATA XREF: .rdata:68D94208o
aSerbia		db 'Serbia',0           ; DATA XREF: .rdata:68D9420Co
aRu_1		db 'RU',0               ; DATA XREF: .rdata:68D94210o
aRussia		db 'Russia',0           ; DATA XREF: .rdata:68D94214o
aRw_1		db 'RW',0               ; DATA XREF: .rdata:68D94218o
aRwanda		db 'Rwanda',0           ; DATA XREF: .rdata:68D9421Co
aSa_1		db 'SA',0               ; DATA XREF: .rdata:68D94220o
aSaudiArabia	db 'Saudi Arabia',0     ; DATA XREF: .rdata:68D94224o
aSe_1		db 'SE',0               ; DATA XREF: .rdata:68D94228o
aSweden		db 'Sweden',0           ; DATA XREF: .rdata:68D9422Co
aSg		db 'SG',0               ; DATA XREF: .rdata:68D94230o
aSingapore	db 'Singapore',0        ; DATA XREF: .rdata:68D94234o
aSi_1		db 'SI',0               ; DATA XREF: .rdata:68D94238o
aSlovenia	db 'Slovenia',0         ; DATA XREF: .rdata:68D9423Co
aSk_1		db 'SK',0               ; DATA XREF: .rdata:68D94240o
aSn		db 'SN',0               ; DATA XREF: .rdata:68D94248o
aSenegal	db 'Senegal',0          ; DATA XREF: .rdata:68D9424Co
aSo_1		db 'SO',0               ; DATA XREF: .rdata:68D94250o
aSomalia	db 'Somalia',0          ; DATA XREF: .rdata:68D94254o
aSr_1		db 'SR',0               ; DATA XREF: .rdata:68D94258o
aSuriname	db 'Suriname',0         ; DATA XREF: .rdata:68D9425Co
aSv_0		db 'SV',0               ; DATA XREF: .rdata:68D94260o
aElSalvador	db 'El Salvador',0      ; DATA XREF: .rdata:68D94264o
aSy		db 'SY',0               ; DATA XREF: .rdata:68D94268o
aSyria		db 'Syria',0            ; DATA XREF: .rdata:68D9426Co
aTh_1		db 'TH',0               ; DATA XREF: .rdata:68D94270o
aThailand	db 'Thailand',0         ; DATA XREF: .rdata:68D94274o
aTj		db 'TJ',0               ; DATA XREF: .rdata:68D94278o
aTajikistan	db 'Tajikistan',0       ; DATA XREF: .rdata:68D9427Co
aTm		db 'TM',0               ; DATA XREF: .rdata:68D94280o
aTurkmenistan	db 'Turkmenistan',0     ; DATA XREF: .rdata:68D94284o
aTn_1		db 'TN',0               ; DATA XREF: .rdata:68D94288o
aTunisia	db 'Tunisia',0          ; DATA XREF: .rdata:68D9428Co
aTr_1		db 'TR',0               ; DATA XREF: .rdata:68D94290o
aTurkey		db 'Turkey',0           ; DATA XREF: .rdata:68D94294o
aTt_1		db 'TT',0               ; DATA XREF: .rdata:68D94298o
aTrinidadAndTob	db 'Trinidad and Tobago',0 ; DATA XREF: .rdata:68D9429Co
aTw		db 'TW',0               ; DATA XREF: .rdata:68D942A0o
aTaiwan		db 'Taiwan',0           ; DATA XREF: .rdata:68D942A4o
aTz		db 'TZ',0               ; DATA XREF: .rdata:68D942A8o
aTanzania	db 'Tanzania',0         ; DATA XREF: .rdata:68D942ACo
aUa		db 'UA',0               ; DATA XREF: .rdata:68D942B0o
aUkraine	db 'Ukraine',0          ; DATA XREF: .rdata:68D942B4o
aUs		db 'US',0               ; DATA XREF: .rdata:68D942B8o
aUnitedStates	db 'United States',0    ; DATA XREF: .rdata:68D942BCo
aUy		db 'UY',0               ; DATA XREF: .rdata:68D942C0o
aUruguay	db 'Uruguay',0          ; DATA XREF: .rdata:68D942C4o
aVa		db 'VA',0               ; DATA XREF: .rdata:68D942C8o
aVatican	db 'Vatican',0          ; DATA XREF: .rdata:68D942CCo
aVe_1		db 'VE',0               ; DATA XREF: .rdata:68D942D0o
aVenezuela	db 'Venezuela',0        ; DATA XREF: .rdata:68D942D4o
aVn		db 'VN',0               ; DATA XREF: .rdata:68D942D8o
aVietNam	db 'Viet Nam',0         ; DATA XREF: .rdata:68D942DCo
aYe		db 'YE',0               ; DATA XREF: .rdata:68D942E0o
aYemen		db 'Yemen',0            ; DATA XREF: .rdata:68D942E4o
aZa		db 'ZA',0               ; DATA XREF: .rdata:68D942E8o
aSouthAfrica	db 'South Africa',0     ; DATA XREF: .rdata:68D942ECo
aZw		db 'ZW',0               ; DATA XREF: .rdata:68D942F0o
aZimbabwe	db 'Zimbabwe',0         ; DATA XREF: .rdata:68D942F4o
		align 10h
off_68D93E80	dd offset byte_68D93760	; DATA XREF: sub_68D8AA60+260o
off_68D93E84	dd offset aU_a_e_	; DATA XREF: sub_68D8AA60+2C9o
					; "U.A.E."
		dd offset aAf_1		; "AF"
		dd offset aAfghanistan	; "Afghanistan"
		dd offset aAl		; "AL"
		dd offset aAlbania	; "Albania"
		dd offset aAm_1		; "AM"
		dd offset aArmenia	; "Armenia"
		dd offset aAn		; "AN"
		dd offset aNetherlandsAnt ; "Netherlands Antilles"
		dd offset aAr_1		; "AR"
		dd offset aArgentina	; "Argentina"
		dd offset aAt		; "AT"
		dd offset aAustria	; "Austria"
		dd offset aAu		; "AU"
		dd offset aAustralia	; "Australia"
		dd offset aAz_0		; "AZ"
		dd offset aAzerbaijan	; "Azerbaijan"
		dd offset aBa_1		; "BA"
		dd offset aBosniaAndHerze ; "Bosnia and	Herzegovina"
		dd offset aBd		; "BD"
		dd offset aBangladesh	; "Bangladesh"
		dd offset aBe_1		; "BE"
		dd offset aBelgium	; "Belgium"
		dd offset aBg_1		; "BG"
		dd offset aBulgaria	; "Bulgaria"
		dd offset aBh		; "BH"
		dd offset aBahrain	; "Bahrain"
		dd offset aBn_1		; "BN"
		dd offset aBruneiDarussal ; "Brunei Darussalam"
		dd offset aBo_1		; "BO"
		dd offset aBolivia	; "Bolivia"
		dd offset aBr_1		; "BR"
		dd offset aBrazil	; "Brazil"
		dd offset aBt		; "BT"
		dd offset aBhutan	; "Bhutan"
		dd offset aBy		; "BY"
		dd offset aBelarus	; "Belarus"
		dd offset aBz		; "BZ"
		dd offset aBelize	; "Belize"
		dd offset aCa_1		; "CA"
		dd offset aCanada	; "Canada"
		dd offset aCg		; "CG"
		dd offset aCongo	; "Congo"
		dd offset aCh		; "CH"
		dd offset aSwitzerland	; "Switzerland"
		dd offset aCi		; "CI"
		dd offset aCoteDIvoire	; "Cote	d'Ivoire"
		dd offset aCl		; "CL"
		dd offset aChile	; "Chile"
		dd offset aCm		; "CM"
		dd offset aCameroon	; "Cameroon"
		dd offset aCn		; "CN"
		dd offset aPeopleSRepubli ; "People's Republic of China"
		dd offset aCo_1		; "CO"
		dd offset aColombia	; "Colombia"
		dd offset aCr		; "CR"
		dd offset aCostaRica	; "Costa Rica"
		dd offset aCs_1		; "CS"
		dd offset aSerbiaAndMonte ; "Serbia and	Montenegro"
		dd offset aCz		; "CZ"
		dd offset aCzechRepublic ; "Czech Republic"
		dd offset aDe_1		; "DE"
		dd offset aGermany	; "Germany"
		dd offset aDk		; "DK"
		dd offset aDenmark	; "Denmark"
		dd offset aDo		; "DO"
		dd offset aDominicanRepub ; "Dominican Republic"
		dd offset aDz		; "DZ"
		dd offset aAlgeria	; "Algeria"
		dd offset aEc		; "EC"
		dd offset aEcuador	; "Ecuador"
		dd offset aEe		; "EE"
		dd offset aEstonia	; "Estonia"
		dd offset aEg		; "EG"
		dd offset aEgypt	; "Egypt"
		dd offset aEr		; "ER"
		dd offset aEritrea	; "Eritrea"
		dd offset aEs_1		; "ES"
		dd offset aSpain	; "Spain"
		dd offset aEt_1		; "ET"
		dd offset aEthiopia	; "Ethiopia"
		dd offset aFi_1		; "FI"
		dd offset aFinland	; "Finland"
		dd offset aFo_1		; "FO"
		dd offset aFaroeIslands	; "Faroe Islands"
		dd offset aFr_1		; "FR"
		dd offset aFrance	; "France"
		dd offset aGb		; "GB"
		dd offset aUnitedKingdom ; "United Kingdom"
		dd offset aGd_1		; "GD"
		dd offset aCaribbean	; "Caribbean"
		dd offset aGe		; "GE"
		dd offset aGeorgia	; "Georgia"
		dd offset aGl_1		; "GL"
		dd offset aGreenland	; "Greenland"
		dd offset aGr		; "GR"
		dd offset aGreece	; "Greece"
		dd offset aGt		; "GT"
		dd offset aGuatemala	; "Guatemala"
		dd offset aHk		; "HK"
		dd offset aHongKong	; "Hong	Kong"
		dd offset aHk		; "HK"
		dd offset aHongKongS_a_r_ ; "Hong Kong S.A.R."
		dd offset aHn		; "HN"
		dd offset aHonduras	; "Honduras"
		dd offset aHr_1		; "HR"
		dd offset aCroatia	; "Croatia"
		dd offset aHt		; "HT"
		dd offset aHaiti	; "Haiti"
		dd offset aHu_1		; "HU"
		dd offset aHungary	; "Hungary"
		dd offset aId_1		; "ID"
		dd offset aIndonesia	; "Indonesia"
		dd offset aIe		; "IE"
		dd offset aIreland	; "Ireland"
		dd offset aIl		; "IL"
		dd offset aIsrael	; "Israel"
		dd offset aIn		; "IN"
		dd offset aIndia	; "India"
		dd offset aIq		; "IQ"
		dd offset aIraq		; "Iraq"
		dd offset aIr		; "IR"
		dd offset aIran		; "Iran"
		dd offset aIs_1		; "IS"
		dd offset aIceland	; "Iceland"
		dd offset aIt_1		; "IT"
		dd offset aItaly	; "Italy"
		dd offset aJm		; "JM"
		dd offset aJamaica	; "Jamaica"
		dd offset aJo		; "JO"
		dd offset aJordan	; "Jordan"
		dd offset aJp		; "JP"
		dd offset aJapan	; "Japan"
		dd offset aKe		; "KE"
		dd offset aKenya	; "Kenya"
		dd offset aKg		; "KG"
		dd offset aKyrgyzstan	; "Kyrgyzstan"
		dd offset aKh		; "KH"
		dd offset aCambodia	; "Cambodia"
		dd offset aKr_1		; "KR"
		dd offset aSouthKorea	; "South Korea"
		dd offset aKw		; "KW"
		dd offset aKuwait	; "Kuwait"
		dd offset aKz		; "KZ"
		dd offset aKazakhstan	; "Kazakhstan"
		dd offset aLa_1		; "LA"
		dd offset aLaos		; "Laos"
		dd offset aLb_1		; "LB"
		dd offset aLebanon	; "Lebanon"
		dd offset aLi		; "LI"
		dd offset aLiechtenstein ; "Liechtenstein"
		dd offset aLk		; "LK"
		dd offset aSriLanka	; "Sri Lanka"
		dd offset aLt_1		; "LT"
		dd offset aLithuania	; "Lithuania"
		dd offset aLu		; "LU"
		dd offset aLuxembourg	; "Luxembourg"
		dd offset aLv_1		; "LV"
		dd offset aLatvia	; "Latvia"
		dd offset aLy		; "LY"
		dd offset aLibya	; "Libya"
		dd offset aMa		; "MA"
		dd offset aMorocco	; "Morocco"
		dd offset aMc		; "MC"
		dd offset aPrincipalityOf ; "Principality of Monaco"
		dd offset aMd		; "MD"
		dd offset aMoldava	; "Moldava"
		dd offset aMd		; "MD"
		dd offset aMoldova	; "Moldova"
		dd offset aMe		; "ME"
		dd offset aMontenegro	; "Montenegro"
		dd offset aMk_1		; "MK"
		dd offset aFormerYugoslav ; "Former Yugoslav Republic of Macedonia"
		dd offset aMl_1		; "ML"
		dd offset aMali		; "Mali"
		dd offset aMm		; "MM"
		dd offset aMyanmar	; "Myanmar"
		dd offset aMn_1		; "MN"
		dd offset aMongolia	; "Mongolia"
		dd offset aMo		; "MO"
		dd offset aMacauS_a_r_	; "Macau S.A.R."
		dd offset aMt_1		; "MT"
		dd offset aMalta	; "Malta"
		dd offset aMv		; "MV"
		dd offset aMaldives	; "Maldives"
		dd offset aMx		; "MX"
		dd offset aMexico	; "Mexico"
		dd offset aMy_1		; "MY"
		dd offset aMalaysia	; "Malaysia"
		dd offset aNg		; "NG"
		dd offset aNigeria	; "Nigeria"
		dd offset aNi		; "NI"
		dd offset aNicaragua	; "Nicaragua"
		dd offset aNl_1		; "NL"
		dd offset aNetherlands	; "Netherlands"
		dd offset aNo_1		; "NO"
		dd offset aNorway	; "Norway"
		dd offset aNp		; "NP"
		dd offset aNepal	; "Nepal"
		dd offset aNz		; "NZ"
		dd offset aNewZealand	; "New Zealand"
		dd offset aOm_1		; "OM"
		dd offset aOman		; "Oman"
		dd offset aPa_1		; "PA"
		dd offset aPanama	; "Panama"
		dd offset aPe		; "PE"
		dd offset aPeru		; "Peru"
		dd offset aPh		; "PH"
		dd offset aPhilippines	; "Philippines"
		dd offset aPk		; "PK"
		dd offset aIslamicRepubli ; "Islamic Republic of Pakistan"
		dd offset aPl_1		; "PL"
		dd offset aPoland	; "Poland"
		dd offset aPr		; "PR"
		dd offset aPuertoRico	; "Puerto Rico"
		dd offset aPt_1		; "PT"
		dd offset aPortugal	; "Portugal"
		dd offset aPy		; "PY"
		dd offset aParaguay	; "Paraguay"
		dd offset aQa		; "QA"
		dd offset aQatar	; "Qatar"
		dd offset aRe		; "RE"
		dd offset aReunion	; "Reunion"
		dd offset aRo_1		; "RO"
		dd offset aRomania	; "Romania"
		dd offset aRs		; "RS"
		dd offset aSerbia	; "Serbia"
		dd offset aRu_1		; "RU"
		dd offset aRussia	; "Russia"
		dd offset aRw_1		; "RW"
		dd offset aRwanda	; "Rwanda"
		dd offset aSa_1		; "SA"
		dd offset aSaudiArabia	; "Saudi Arabia"
		dd offset aSe_1		; "SE"
		dd offset aSweden	; "Sweden"
		dd offset aSg		; "SG"
		dd offset aSingapore	; "Singapore"
		dd offset aSi_1		; "SI"
		dd offset aSlovenia	; "Slovenia"
		dd offset aSk_1		; "SK"
		dd offset aSlovak	; "Slovak"
		dd offset aSn		; "SN"
		dd offset aSenegal	; "Senegal"
		dd offset aSo_1		; "SO"
		dd offset aSomalia	; "Somalia"
		dd offset aSr_1		; "SR"
		dd offset aSuriname	; "Suriname"
		dd offset aSv_0		; "SV"
		dd offset aElSalvador	; "El Salvador"
		dd offset aSy		; "SY"
		dd offset aSyria	; "Syria"
		dd offset aTh_1		; "TH"
		dd offset aThailand	; "Thailand"
		dd offset aTj		; "TJ"
		dd offset aTajikistan	; "Tajikistan"
		dd offset aTm		; "TM"
		dd offset aTurkmenistan	; "Turkmenistan"
		dd offset aTn_1		; "TN"
		dd offset aTunisia	; "Tunisia"
		dd offset aTr_1		; "TR"
		dd offset aTurkey	; "Turkey"
		dd offset aTt_1		; "TT"
		dd offset aTrinidadAndTob ; "Trinidad and Tobago"
		dd offset aTw		; "TW"
		dd offset aTaiwan	; "Taiwan"
		dd offset aTz		; "TZ"
		dd offset aTanzania	; "Tanzania"
		dd offset aUa		; "UA"
		dd offset aUkraine	; "Ukraine"
		dd offset aUs		; "US"
		dd offset aUnitedStates	; "United States"
		dd offset aUy		; "UY"
		dd offset aUruguay	; "Uruguay"
		dd offset aVa		; "VA"
		dd offset aVatican	; "Vatican"
		dd offset aVe_1		; "VE"
		dd offset aVenezuela	; "Venezuela"
		dd offset aVn		; "VN"
		dd offset aVietNam	; "Viet	Nam"
		dd offset aYe		; "YE"
		dd offset aYemen	; "Yemen"
		dd offset aZa		; "ZA"
		dd offset aSouthAfrica	; "South Africa"
		dd offset aZw		; "ZW"
		dd offset aZimbabwe	; "Zimbabwe"
		align 10h
off_68D94300	dd offset loc_68D8B7B5	; DATA XREF: libintl_gettextparse:loc_68D8B8A0r
		dd offset loc_68D8B7B5	; jump table for switch	statement
		dd offset loc_68D8BA4A
		dd offset loc_68D8BA12
		dd offset loc_68D8B9E4
		dd offset loc_68D8B9B6
		dd offset loc_68D8B8C4
		dd offset loc_68D8B8C4
		dd offset loc_68D8B8C4
		dd offset loc_68D8B8C4
		dd offset loc_68D8B992
		dd offset loc_68D8BA8B
		dd offset loc_68D8BA63
		dd offset loc_68D8BA83
off_68D94338	dd offset loc_68D8BB95,	offset loc_68D8BADB, offset loc_68D8BADB
					; DATA XREF: libintl_gettextparse+53Ar
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB ; jump	table for switch statement
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BB95, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BB70,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BB56, offset loc_68D8BB3D
		dd offset loc_68D8BADB,	offset loc_68D8BB31, offset loc_68D8BB31
		dd offset loc_68D8BD09,	offset loc_68D8BCEA, offset loc_68D8BADB
		dd offset loc_68D8BCCD,	offset loc_68D8BADB, offset loc_68D8BCAE
		dd offset loc_68D8BC2A,	offset loc_68D8BC2A, offset loc_68D8BC2A
		dd offset loc_68D8BC2A,	offset loc_68D8BC2A, offset loc_68D8BC2A
		dd offset loc_68D8BC2A,	offset loc_68D8BC2A, offset loc_68D8BC2A
		dd offset loc_68D8BC2A,	offset loc_68D8BB31, offset loc_68D8BB95
		dd offset loc_68D8BBFE,	offset loc_68D8BBD2, offset loc_68D8BBA6
		dd offset loc_68D8BB31,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BB31
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BADB, offset loc_68D8BADB
		dd offset loc_68D8BADB,	offset loc_68D8BB3D, (offset dword_68D8F200-71E1FA09h)
		dd (offset dword_68D8F200-72B4E909h), (offset dword_68D8F200-70E0FBF3h)
		dd (offset dword_68D8F200-70E0FA09h), 291AF6F7h, 0EFE122Dh
		dd 24F7F6h, 0, 0, 0, 0,	0, 0, 2020200h,	2020202h, 2020202h
		dd 2020202h, 2020202h, 2020202h, 2020202h, 2020202h, 2020A02h
		dd 2050202h, 2020F0Eh, 2020202h, 2020202h, 2020202h, 20C0202h
		dd 3020202h, 2020202h, 2020202h, 2020202h, 2020202h, 2020202h
		dd 2020202h, 2020202h, 2020202h, 2020202h, 2020202h, 2020202h
		dd 20D0202h, 2020202h, 2020202h, 2020202h, 2020204h, 2020202h
		dd 2020202h, 2020202h, 2020202h, 2020202h, 2020202h, 2020202h
		dd 2020202h, 2020202h, 2020202h, 2020202h, 2020202h, 2020202h
		dd 2020202h, 2020202h, 2020202h, 2020202h, 2020202h, 2020202h
		dd 2020202h, 2020202h, 2020202h, 2020202h, 2020202h, 2020202h
		dd 2020202h, 2020202h, 2020202h, 2020202h, 2020202h, 2020202h
		dd 2020202h, 7060201h, 0B0908h,	0, 0, 0, 0, 0, 0, 40B0A01h
		dd 9080E0Dh, 0C0B0A00h,	100F0E0Dh, 6050403h, 9090807h
		dd 9080719h, 504030Fh, 9080706h, 30CFFFFh, 7060504h, 6050908h
		dd 6090807h, 90807h, 0,	0, 8020107h, 100F0403h,	14131209h
		dd 18171615h, 0D0C0B0Ah, 10100F0Eh, 100F0E1Ah, 0C0B0A11h
		dd 100F0E0Dh, 0A190000h, 0E0D0C0Bh, 0D0C100Fh, 0D100F0Eh
		dd 100F0Eh, 0B0C00h, 0A0200h, 1, 0, 504000Dh, 9080706h
		dd 2000300h, 3030501h, 3030303h, 3010102h, 12111000h, 12121212h
		dd 12121212h, (offset dword_68D8F200-71E2DFEEh), 605FFFFh
		dd 0
		align 10h
; CHAR LibFileName[]
LibFileName	db 'mlang.dll',0        ; DATA XREF: sub_68D8C7B0:loc_68D8C7D6o
; CHAR aConvertinetstr[]
aConvertinetstr	db 'ConvertINetString',0 ; DATA XREF: sub_68D8C7B0+44o
; CHAR aConvertinetmul[]
aConvertinetmul	db 'ConvertINetMultiByteToUnicode',0 ; DATA XREF: sub_68D8C7B0+59o
; CHAR aConvertinetuni[]
aConvertinetuni	db 'ConvertINetUnicodeToMultiByte',0 ; DATA XREF: sub_68D8C7B0+6Eo
; CHAR aIsconvertinets[]
aIsconvertinets	db 'IsConvertINetStringAvailable',0 ; DATA XREF: sub_68D8C7B0+83o
; CHAR aLcidtorfc1766a[]
aLcidtorfc1766a	db 'LcidToRfc1766A',0   ; DATA XREF: sub_68D8C7B0+98o
; CHAR aRfc1766tolcida[]
aRfc1766tolcida	db 'Rfc1766ToLcidA',0   ; DATA XREF: sub_68D8C7B0+ADo
dword_68D947D3	dd 0FEFFh		; DATA XREF: sub_68D8CA20:loc_68D8CB96r
		align 4
dword_68D947D8	dd 0FFFE0000h		; DATA XREF: sub_68D8CA20:loc_68D8CBA3r
		db 0
; char aNocompat[]
aNocompat	db 'nocompat',0         ; DATA XREF: sub_68D8D040+83o
; char aTranslit[]
aTranslit	db 'translit',0         ; DATA XREF: sub_68D8D040:loc_68D8D0E5o
; char aIgnore[]
aIgnore		db 'ignore',0           ; DATA XREF: sub_68D8D040:loc_68D8D1DDo
asc_68D947F6	db '//',0               ; DATA XREF: sub_68D8D040+6Eo
aChar		db 'char',0             ; DATA XREF: sub_68D8D040+F6o
aWchar_t	db 'wchar_t',0          ; DATA XREF: sub_68D8D040+10Ao
; char aCp[]
aCp		db 'cp',0               ; DATA XREF: sub_68D8D040+2BFo
; char aXx[]
aXx		db 'xx',0               ; DATA XREF: sub_68D8D040+2E7o
; char aUtf16[]
aUtf16		db 'UTF-16',0           ; DATA XREF: sub_68D8D040+140o
					; .rdata:68D954CCo
; char aUtf16_0[]
aUtf16_0	db 'UTF16',0            ; DATA XREF: sub_68D8D040:loc_68D8D367o
					; .rdata:68D954C4o
; char aUcs2[]
aUcs2		db 'UCS-2',0            ; DATA XREF: sub_68D8D040+33Co
					; .rdata:68D954DCo
; char aUcs2_0[]
aUcs2_0		db 'UCS2',0             ; DATA XREF: sub_68D8D040+351o
					; .rdata:68D954D4o
; char aUtf32[]
aUtf32		db 'UTF-32',0           ; DATA XREF: sub_68D8D040+3CBo
					; .rdata:68D954ECo
; char aUtf32_0[]
aUtf32_0	db 'UTF32',0            ; DATA XREF: sub_68D8D040+3E0o
					; .rdata:68D954E4o
; char aUcs4[]
aUcs4		db 'UCS-4',0            ; DATA XREF: sub_68D8D040+3F5o
					; .rdata:68D954F4o
; char aUcs4_0[]
aUcs4_0		db 'UCS4',0             ; DATA XREF: sub_68D8D040+40Ao
					; .rdata:68D954FCo
; char aWiniconv_libic[]
aWiniconv_libic	db 'WINICONV_LIBICONV_DLL',0 ; DATA XREF: sub_68D8DA50+41o
byte_68D94852	db 0			; DATA XREF: sub_68D8DA50:loc_68D8DD21o
; CHAR a_errno[]
a_errno		db '_errno',0           ; DATA XREF: sub_68D8DA50+F6o
					; sub_68D8DA50:loc_68D8DC40o
; CHAR aLibiconv_open[]
aLibiconv_open	db 'libiconv_open',0    ; DATA XREF: sub_68D8DA50+198o
; CHAR aIconv_open[]
aIconv_open	db 'iconv_open',0       ; DATA XREF: sub_68D8DA50:loc_68D8DD63o
; CHAR aLibiconv_close[]
aLibiconv_close	db 'libiconv_close',0   ; DATA XREF: sub_68D8DA50:loc_68D8DC02o
; CHAR aIconv_close[]
aIconv_close	db 'iconv_close',0      ; DATA XREF: sub_68D8DA50:loc_68D8DD2Bo
; CHAR aLibiconv[]
aLibiconv	db 'libiconv',0         ; DATA XREF: sub_68D8DA50:loc_68D8DC21o
; CHAR aIconv[]
aIconv		db 'iconv',0            ; DATA XREF: sub_68D8DA50:loc_68D8DD47o
aCp65001	db 'CP65001',0          ; DATA XREF: .rdata:off_68D95404o
aUtf8_0		db 'UTF8',0             ; DATA XREF: .rdata:68D9540Co
aUtf8_1		db 'UTF-8',0            ; DATA XREF: .rdata:68D95414o
aCp1200		db 'CP1200',0           ; DATA XREF: .rdata:68D9541Co
aUtf16le	db 'UTF16LE',0          ; DATA XREF: .rdata:68D95424o
aUtf16le_0	db 'UTF-16LE',0         ; DATA XREF: .rdata:68D9542Co
aUcs2le		db 'UCS2LE',0           ; DATA XREF: .rdata:68D95434o
aUcs2le_0	db 'UCS-2LE',0          ; DATA XREF: .rdata:68D9543Co
aCp1201		db 'CP1201',0           ; DATA XREF: .rdata:68D95444o
aUtf16be	db 'UTF16BE',0          ; DATA XREF: .rdata:68D9544Co
aUtf16be_0	db 'UTF-16BE',0         ; DATA XREF: .rdata:68D95454o
aUcs2be		db 'UCS2BE',0           ; DATA XREF: .rdata:68D9545Co
aUcs2be_0	db 'UCS-2BE',0          ; DATA XREF: .rdata:68D95464o
aUnicodefffe	db 'unicodeFFFE',0      ; DATA XREF: .rdata:68D9546Co
aCp12000	db 'CP12000',0          ; DATA XREF: .rdata:68D95474o
aUtf32le	db 'UTF32LE',0          ; DATA XREF: .rdata:68D9547Co
aUtf32le_0	db 'UTF-32LE',0         ; DATA XREF: .rdata:68D95484o
aUcs4le		db 'UCS4LE',0           ; DATA XREF: .rdata:68D9548Co
aUcs4le_0	db 'UCS-4LE',0          ; DATA XREF: .rdata:68D95494o
aCp12001	db 'CP12001',0          ; DATA XREF: .rdata:68D9549Co
aUtf32be	db 'UTF32BE',0          ; DATA XREF: .rdata:68D954A4o
aUtf32be_0	db 'UTF-32BE',0         ; DATA XREF: .rdata:68D954ACo
aUcs4be		db 'UCS4BE',0           ; DATA XREF: .rdata:68D954B4o
aUcs4be_0	db 'UCS-4BE',0          ; DATA XREF: .rdata:68D954BCo
aAnsi_x3_41968	db 'ANSI_X3.4-1968',0   ; DATA XREF: .rdata:68D95504o
aAnsi_x3_41986	db 'ANSI_X3.4-1986',0   ; DATA XREF: .rdata:68D9550Co
aAscii_1	db 'ASCII',0            ; DATA XREF: .rdata:68D95514o
aCp367		db 'CP367',0            ; DATA XREF: .rdata:68D9551Co
aIbm367		db 'IBM367',0           ; DATA XREF: .rdata:68D95524o
aIsoIr6		db 'ISO-IR-6',0         ; DATA XREF: .rdata:68D9552Co
aIso646Us	db 'ISO646-US',0        ; DATA XREF: .rdata:68D95534o
aIso_646_irv199	db 'ISO_646.IRV:1991',0 ; DATA XREF: .rdata:68D9553Co
aUs_0		db 'US',0               ; DATA XREF: .rdata:68D95544o
aUsAscii	db 'US-ASCII',0         ; DATA XREF: .rdata:68D9554Co
aCsascii	db 'CSASCII',0          ; DATA XREF: .rdata:68D95554o
aCp819		db 'CP819',0            ; DATA XREF: .rdata:68D9555Co
aIbm819		db 'IBM819',0           ; DATA XREF: .rdata:68D95564o
aIso88591_0	db 'ISO-8859-1',0       ; DATA XREF: .rdata:68D9556Co
aIsoIr100	db 'ISO-IR-100',0       ; DATA XREF: .rdata:68D95574o
aIso88591_1	db 'ISO8859-1',0        ; DATA XREF: .rdata:68D9557Co
aIso_88591	db 'ISO_8859-1',0       ; DATA XREF: .rdata:68D95584o
aIso_885911987	db 'ISO_8859-1:1987',0  ; DATA XREF: .rdata:68D9558Co
aL1		db 'L1',0               ; DATA XREF: .rdata:68D95594o
aLatin1		db 'LATIN1',0           ; DATA XREF: .rdata:68D9559Co
aCsisolatin1	db 'CSISOLATIN1',0      ; DATA XREF: .rdata:68D955A4o
aCp1250		db 'CP1250',0           ; DATA XREF: .rdata:68D955ACo
aMsEe		db 'MS-EE',0            ; DATA XREF: .rdata:68D955B4o
aWindows1250	db 'WINDOWS-1250',0     ; DATA XREF: .rdata:68D955BCo
aCp1251		db 'CP1251',0           ; DATA XREF: .rdata:68D955C4o
aMsCyrl		db 'MS-CYRL',0          ; DATA XREF: .rdata:68D955CCo
aWindows1251	db 'WINDOWS-1251',0     ; DATA XREF: .rdata:68D955D4o
aCp1252		db 'CP1252',0           ; DATA XREF: .rdata:68D955DCo
aMsAnsi		db 'MS-ANSI',0          ; DATA XREF: .rdata:68D955E4o
aWindows1252	db 'WINDOWS-1252',0     ; DATA XREF: .rdata:68D955ECo
aCp1253		db 'CP1253',0           ; DATA XREF: .rdata:68D955F4o
aMsGreek	db 'MS-GREEK',0         ; DATA XREF: .rdata:68D955FCo
aWindows1253	db 'WINDOWS-1253',0     ; DATA XREF: .rdata:68D95604o
aCp1254		db 'CP1254',0           ; DATA XREF: .rdata:68D9560Co
aMsTurk		db 'MS-TURK',0          ; DATA XREF: .rdata:68D95614o
aWindows1254	db 'WINDOWS-1254',0     ; DATA XREF: .rdata:68D9561Co
aCp1255		db 'CP1255',0           ; DATA XREF: .rdata:68D95624o
aMsHebr		db 'MS-HEBR',0          ; DATA XREF: .rdata:68D9562Co
aWindows1255	db 'WINDOWS-1255',0     ; DATA XREF: .rdata:68D95634o
aCp1256		db 'CP1256',0           ; DATA XREF: .rdata:68D9563Co
aMsArab		db 'MS-ARAB',0          ; DATA XREF: .rdata:68D95644o
aWindows1256	db 'WINDOWS-1256',0     ; DATA XREF: .rdata:68D9564Co
aCp1257		db 'CP1257',0           ; DATA XREF: .rdata:68D95654o
aWinbaltrim	db 'WINBALTRIM',0       ; DATA XREF: .rdata:68D9565Co
aWindows1257	db 'WINDOWS-1257',0     ; DATA XREF: .rdata:68D95664o
aCp1258		db 'CP1258',0           ; DATA XREF: .rdata:68D9566Co
aWindows1258	db 'WINDOWS-1258',0     ; DATA XREF: .rdata:68D95674o
a850		db '850',0              ; DATA XREF: .rdata:68D9567Co
aCp850		db 'CP850',0            ; DATA XREF: .rdata:68D95684o
aIbm850		db 'IBM850',0           ; DATA XREF: .rdata:68D9568Co
aCspc850multili	db 'CSPC850MULTILINGUAL',0 ; DATA XREF: .rdata:68D95694o
a862		db '862',0              ; DATA XREF: .rdata:68D9569Co
aCp862		db 'CP862',0            ; DATA XREF: .rdata:68D956A4o
aIbm862		db 'IBM862',0           ; DATA XREF: .rdata:68D956ACo
aCspc862latinhe	db 'CSPC862LATINHEBREW',0 ; DATA XREF: .rdata:68D956B4o
a866		db '866',0              ; DATA XREF: .rdata:68D956BCo
aCp866		db 'CP866',0            ; DATA XREF: .rdata:68D956C4o
aIbm866		db 'IBM866',0           ; DATA XREF: .rdata:68D956CCo
aCsibm866	db 'CSIBM866',0         ; DATA XREF: .rdata:68D956D4o
aCp154		db 'CP154',0            ; DATA XREF: .rdata:68D956DCo
aCyrillicAsian	db 'CYRILLIC-ASIAN',0   ; DATA XREF: .rdata:68D956E4o
aPt154		db 'PT154',0            ; DATA XREF: .rdata:68D956ECo
aPtcp154	db 'PTCP154',0          ; DATA XREF: .rdata:68D956F4o
aCsptcp154	db 'CSPTCP154',0        ; DATA XREF: .rdata:68D956FCo
aCp1133		db 'CP1133',0           ; DATA XREF: .rdata:68D95704o
aIbmCp1133	db 'IBM-CP1133',0       ; DATA XREF: .rdata:68D9570Co
aCp874		db 'CP874',0            ; DATA XREF: .rdata:68D95714o
aWindows874	db 'WINDOWS-874',0      ; DATA XREF: .rdata:68D9571Co
aCp51932_0	db 'CP51932',0          ; DATA XREF: .rdata:68D95724o
aMs51932	db 'MS51932',0          ; DATA XREF: .rdata:68D9572Co
aWindows51932	db 'WINDOWS-51932',0    ; DATA XREF: .rdata:68D95734o
aEucJp_0	db 'EUC-JP',0           ; DATA XREF: .rdata:68D9573Co
					; .rdata:68D95CD4o
aCp932		db 'CP932',0            ; DATA XREF: .rdata:68D95744o
aMs932		db 'MS932',0            ; DATA XREF: .rdata:68D9574Co
aShifft_jis	db 'SHIFFT_JIS',0       ; DATA XREF: .rdata:68D95754o
aShifft_jisMs	db 'SHIFFT_JIS-MS',0    ; DATA XREF: .rdata:68D9575Co
aSjis		db 'SJIS',0             ; DATA XREF: .rdata:68D95764o
aSjisMs		db 'SJIS-MS',0          ; DATA XREF: .rdata:68D9576Co
aSjisOpen	db 'SJIS-OPEN',0        ; DATA XREF: .rdata:68D95774o
aSjisWin	db 'SJIS-WIN',0         ; DATA XREF: .rdata:68D9577Co
aWindows31j	db 'WINDOWS-31J',0      ; DATA XREF: .rdata:68D95784o
aWindows932	db 'WINDOWS-932',0      ; DATA XREF: .rdata:68D9578Co
aCswindows31j	db 'CSWINDOWS31J',0     ; DATA XREF: .rdata:68D95794o
aCp50221	db 'CP50221',0          ; DATA XREF: .rdata:68D9579Co
aIso2022Jp	db 'ISO-2022-JP',0      ; DATA XREF: .rdata:68D957A4o
aIso2022JpMs	db 'ISO-2022-JP-MS',0   ; DATA XREF: .rdata:68D957ACo
aIso2022Jp_0	db 'ISO2022-JP',0       ; DATA XREF: .rdata:68D957B4o
aIso2022JpMs_0	db 'ISO2022-JP-MS',0    ; DATA XREF: .rdata:68D957BCo
aMs50221	db 'MS50221',0          ; DATA XREF: .rdata:68D957C4o
aWindows50221	db 'WINDOWS-50221',0    ; DATA XREF: .rdata:68D957CCo
aCp936_0	db 'CP936',0            ; DATA XREF: .rdata:68D957D4o
aGbk_0		db 'GBK',0              ; DATA XREF: .rdata:68D957DCo
aMs936		db 'MS936',0            ; DATA XREF: .rdata:68D957E4o
aWindows936	db 'WINDOWS-936',0      ; DATA XREF: .rdata:68D957ECo
aCp950		db 'CP950',0            ; DATA XREF: .rdata:68D957F4o
aBig5		db 'BIG5',0             ; DATA XREF: .rdata:68D957FCo
aBig5hkscs	db 'BIG5HKSCS',0        ; DATA XREF: .rdata:68D95804o
aBig5Hkscs	db 'BIG5-HKSCS',0       ; DATA XREF: .rdata:68D9580Co
aCp949		db 'CP949',0            ; DATA XREF: .rdata:68D95814o
aUhc		db 'UHC',0              ; DATA XREF: .rdata:68D9581Co
aEucKr_0	db 'EUC-KR',0           ; DATA XREF: .rdata:68D95824o
aCp1361_0	db 'CP1361',0           ; DATA XREF: .rdata:68D9582Co
aJohab_0	db 'JOHAB',0            ; DATA XREF: .rdata:68D95834o
a437		db '437',0              ; DATA XREF: .rdata:68D9583Co
aCp437		db 'CP437',0            ; DATA XREF: .rdata:68D95844o
aIbm437		db 'IBM437',0           ; DATA XREF: .rdata:68D9584Co
					; .rdata:68D959C4o
aCspc8codepage4	db 'CSPC8CODEPAGE437',0 ; DATA XREF: .rdata:68D95854o
aCp737		db 'CP737',0            ; DATA XREF: .rdata:68D9585Co
aCp775		db 'CP775',0            ; DATA XREF: .rdata:68D95864o
aIbm775		db 'IBM775',0           ; DATA XREF: .rdata:68D9586Co
aCspc775baltic	db 'CSPC775BALTIC',0    ; DATA XREF: .rdata:68D95874o
a852		db '852',0              ; DATA XREF: .rdata:68D9587Co
aCp852		db 'CP852',0            ; DATA XREF: .rdata:68D95884o
aIbm852		db 'IBM852',0           ; DATA XREF: .rdata:68D9588Co
aCspcp852	db 'CSPCP852',0         ; DATA XREF: .rdata:68D95894o
aCp853		db 'CP853',0            ; DATA XREF: .rdata:68D9589Co
a855		db '855',0              ; DATA XREF: .rdata:68D958A4o
aCp855		db 'CP855',0            ; DATA XREF: .rdata:68D958ACo
aIbm855		db 'IBM855',0           ; DATA XREF: .rdata:68D958B4o
					; .rdata:68D95A04o
aCsibm855	db 'CSIBM855',0         ; DATA XREF: .rdata:68D958BCo
a857		db '857',0              ; DATA XREF: .rdata:68D958C4o
aCp857		db 'CP857',0            ; DATA XREF: .rdata:68D958CCo
aIbm857		db 'IBM857',0           ; DATA XREF: .rdata:68D958D4o
aCsibm857	db 'CSIBM857',0         ; DATA XREF: .rdata:68D958DCo
aCp858		db 'CP858',0            ; DATA XREF: .rdata:68D958E4o
a860		db '860',0              ; DATA XREF: .rdata:68D958ECo
aCp860		db 'CP860',0            ; DATA XREF: .rdata:68D958F4o
aIbm860		db 'IBM860',0           ; DATA XREF: .rdata:68D958FCo
					; .rdata:68D95A1Co
aCsibm860	db 'CSIBM860',0         ; DATA XREF: .rdata:68D95904o
a861		db '861',0              ; DATA XREF: .rdata:68D9590Co
aCpIs		db 'CP-IS',0            ; DATA XREF: .rdata:68D95914o
aCp861		db 'CP861',0            ; DATA XREF: .rdata:68D9591Co
aIbm861		db 'IBM861',0           ; DATA XREF: .rdata:68D95924o
aCsibm861	db 'CSIBM861',0         ; DATA XREF: .rdata:68D9592Co
a863		db '863',0              ; DATA XREF: .rdata:68D95934o
aCp863		db 'CP863',0            ; DATA XREF: .rdata:68D9593Co
aIbm863		db 'IBM863',0           ; DATA XREF: .rdata:68D95944o
					; .rdata:68D95A34o
aCsibm863	db 'CSIBM863',0         ; DATA XREF: .rdata:68D9594Co
aCp864		db 'CP864',0            ; DATA XREF: .rdata:68D95954o
aIbm864		db 'IBM864',0           ; DATA XREF: .rdata:68D9595Co
					; .rdata:68D95A3Co
aCsibm864	db 'CSIBM864',0         ; DATA XREF: .rdata:68D95964o
a865		db '865',0              ; DATA XREF: .rdata:68D9596Co
aCp865		db 'CP865',0            ; DATA XREF: .rdata:68D95974o
aIbm865		db 'IBM865',0           ; DATA XREF: .rdata:68D9597Co
					; .rdata:68D95A44o
aCsibm865	db 'CSIBM865',0         ; DATA XREF: .rdata:68D95984o
a869		db '869',0              ; DATA XREF: .rdata:68D9598Co
aCpGr		db 'CP-GR',0            ; DATA XREF: .rdata:68D95994o
aCp869		db 'CP869',0            ; DATA XREF: .rdata:68D9599Co
aIbm869		db 'IBM869',0           ; DATA XREF: .rdata:68D959A4o
aCsibm869	db 'CSIBM869',0         ; DATA XREF: .rdata:68D959ACo
aCp1125		db 'CP1125',0           ; DATA XREF: .rdata:68D959B4o
aIbm037		db 'IBM037',0           ; DATA XREF: .rdata:68D959BCo
aIbm500		db 'IBM500',0           ; DATA XREF: .rdata:68D959CCo
aAsmo708	db 'ASMO-708',0         ; DATA XREF: .rdata:68D959D4o
aDos720		db 'DOS-720',0          ; DATA XREF: .rdata:68D959DCo
aIbm737		db 'ibm737',0           ; DATA XREF: .rdata:68D959E4o
aIbm775_0	db 'ibm775',0           ; DATA XREF: .rdata:68D959ECo
aIbm850_0	db 'ibm850',0           ; DATA XREF: .rdata:68D959F4o
aIbm852_0	db 'ibm852',0           ; DATA XREF: .rdata:68D959FCo
aIbm857_0	db 'ibm857',0           ; DATA XREF: .rdata:68D95A0Co
aIbm00858	db 'IBM00858',0         ; DATA XREF: .rdata:68D95A14o
aIbm861_0	db 'ibm861',0           ; DATA XREF: .rdata:68D95A24o
aDos862		db 'DOS-862',0          ; DATA XREF: .rdata:68D95A2Co
aCp866_0	db 'cp866',0            ; DATA XREF: .rdata:68D95A4Co
aIbm869_0	db 'ibm869',0           ; DATA XREF: .rdata:68D95A54o
aIbm870		db 'IBM870',0           ; DATA XREF: .rdata:68D95A5Co
aWindows874_0	db 'windows-874',0      ; DATA XREF: .rdata:68D95A64o
aCp875		db 'cp875',0            ; DATA XREF: .rdata:68D95A6Co
aShift_jis	db 'shift_jis',0        ; DATA XREF: .rdata:68D95A74o
aShiftJis	db 'shift-jis',0        ; DATA XREF: .rdata:68D95A7Co
aGb2312_1	db 'gb2312',0           ; DATA XREF: .rdata:68D95A84o
aKs_c_56011987	db 'ks_c_5601-1987',0   ; DATA XREF: .rdata:68D95A8Co
aBig5_0		db 'big5',0             ; DATA XREF: .rdata:68D95A94o
aBig5hkscs_0	db 'big5hkscs',0        ; DATA XREF: .rdata:68D95A9Co
aBig5Hkscs_0	db 'big5-hkscs',0       ; DATA XREF: .rdata:68D95AA4o
aIbm1026	db 'IBM1026',0          ; DATA XREF: .rdata:68D95AACo
aIbm01047	db 'IBM01047',0         ; DATA XREF: .rdata:68D95AB4o
aIbm01140	db 'IBM01140',0         ; DATA XREF: .rdata:68D95ABCo
aIbm01141	db 'IBM01141',0         ; DATA XREF: .rdata:68D95AC4o
aIbm01142	db 'IBM01142',0         ; DATA XREF: .rdata:68D95ACCo
aIbm01143	db 'IBM01143',0         ; DATA XREF: .rdata:68D95AD4o
aIbm01144	db 'IBM01144',0         ; DATA XREF: .rdata:68D95ADCo
aIbm01145	db 'IBM01145',0         ; DATA XREF: .rdata:68D95AE4o
aIbm01146	db 'IBM01146',0         ; DATA XREF: .rdata:68D95AECo
aIbm01147	db 'IBM01147',0         ; DATA XREF: .rdata:68D95AF4o
aIbm01148	db 'IBM01148',0         ; DATA XREF: .rdata:68D95AFCo
aIbm01149	db 'IBM01149',0         ; DATA XREF: .rdata:68D95B04o
aWindows1250_0	db 'windows-1250',0     ; DATA XREF: .rdata:68D95B0Co
aWindows1251_0	db 'windows-1251',0     ; DATA XREF: .rdata:68D95B14o
aWindows1252_0	db 'windows-1252',0     ; DATA XREF: .rdata:68D95B1Co
aWindows1253_0	db 'windows-1253',0     ; DATA XREF: .rdata:68D95B24o
aWindows1254_0	db 'windows-1254',0     ; DATA XREF: .rdata:68D95B2Co
aWindows1255_0	db 'windows-1255',0     ; DATA XREF: .rdata:68D95B34o
aWindows1256_0	db 'windows-1256',0     ; DATA XREF: .rdata:68D95B3Co
aWindows1257_0	db 'windows-1257',0     ; DATA XREF: .rdata:68D95B44o
aWindows1258_0	db 'windows-1258',0     ; DATA XREF: .rdata:68D95B4Co
aJohab_1	db 'Johab',0            ; DATA XREF: .rdata:68D95B54o
aMacintosh	db 'macintosh',0        ; DATA XREF: .rdata:68D95B5Co
aXMacJapanese	db 'x-mac-japanese',0   ; DATA XREF: .rdata:68D95B64o
aXMacChinesetra	db 'x-mac-chinesetrad',0 ; DATA XREF: .rdata:68D95B6Co
aXMacKorean	db 'x-mac-korean',0     ; DATA XREF: .rdata:68D95B74o
aXMacArabic	db 'x-mac-arabic',0     ; DATA XREF: .rdata:68D95B7Co
aXMacHebrew	db 'x-mac-hebrew',0     ; DATA XREF: .rdata:68D95B84o
aXMacGreek	db 'x-mac-greek',0      ; DATA XREF: .rdata:68D95B8Co
aXMacCyrillic	db 'x-mac-cyrillic',0   ; DATA XREF: .rdata:68D95B94o
aXMacChinesesim	db 'x-mac-chinesesimp',0 ; DATA XREF: .rdata:68D95B9Co
aXMacRomanian	db 'x-mac-romanian',0   ; DATA XREF: .rdata:68D95BA4o
aXMacUkrainian	db 'x-mac-ukrainian',0  ; DATA XREF: .rdata:68D95BACo
aXMacThai	db 'x-mac-thai',0       ; DATA XREF: .rdata:68D95BB4o
aXMacCe		db 'x-mac-ce',0         ; DATA XREF: .rdata:68D95BBCo
aXMacIcelandic	db 'x-mac-icelandic',0  ; DATA XREF: .rdata:68D95BC4o
aXMacTurkish	db 'x-mac-turkish',0    ; DATA XREF: .rdata:68D95BCCo
aXMacCroatian	db 'x-mac-croatian',0   ; DATA XREF: .rdata:68D95BD4o
aXChinese_cns	db 'x-Chinese_CNS',0    ; DATA XREF: .rdata:68D95BDCo
aXCp20001	db 'x-cp20001',0        ; DATA XREF: .rdata:68D95BE4o
aX_chineseEten	db 'x_Chinese-Eten',0   ; DATA XREF: .rdata:68D95BECo
aXCp20003	db 'x-cp20003',0        ; DATA XREF: .rdata:68D95BF4o
aXCp20004	db 'x-cp20004',0        ; DATA XREF: .rdata:68D95BFCo
aXCp20005	db 'x-cp20005',0        ; DATA XREF: .rdata:68D95C04o
aXIa5		db 'x-IA5',0            ; DATA XREF: .rdata:68D95C0Co
aXIa5German	db 'x-IA5-German',0     ; DATA XREF: .rdata:68D95C14o
aXIa5Swedish	db 'x-IA5-Swedish',0    ; DATA XREF: .rdata:68D95C1Co
aXIa5Norwegian	db 'x-IA5-Norwegian',0  ; DATA XREF: .rdata:68D95C24o
aUsAscii_0	db 'us-ascii',0         ; DATA XREF: .rdata:68D95C2Co
aXCp20261	db 'x-cp20261',0        ; DATA XREF: .rdata:68D95C34o
aXCp20269	db 'x-cp20269',0        ; DATA XREF: .rdata:68D95C3Co
aIbm273		db 'IBM273',0           ; DATA XREF: .rdata:68D95C44o
aIbm277		db 'IBM277',0           ; DATA XREF: .rdata:68D95C4Co
aIbm278		db 'IBM278',0           ; DATA XREF: .rdata:68D95C54o
aIbm280		db 'IBM280',0           ; DATA XREF: .rdata:68D95C5Co
aIbm284		db 'IBM284',0           ; DATA XREF: .rdata:68D95C64o
aIbm285		db 'IBM285',0           ; DATA XREF: .rdata:68D95C6Co
aIbm290		db 'IBM290',0           ; DATA XREF: .rdata:68D95C74o
aIbm297		db 'IBM297',0           ; DATA XREF: .rdata:68D95C7Co
aIbm420		db 'IBM420',0           ; DATA XREF: .rdata:68D95C84o
aIbm423		db 'IBM423',0           ; DATA XREF: .rdata:68D95C8Co
aIbm424		db 'IBM424',0           ; DATA XREF: .rdata:68D95C94o
aXEbcdicKoreane	db 'x-EBCDIC-KoreanExtended',0 ; DATA XREF: .rdata:68D95C9Co
aIbmThai	db 'IBM-Thai',0         ; DATA XREF: .rdata:68D95CA4o
aKoi8R_0	db 'koi8-r',0           ; DATA XREF: .rdata:68D95CACo
aIbm871		db 'IBM871',0           ; DATA XREF: .rdata:68D95CB4o
aIbm880		db 'IBM880',0           ; DATA XREF: .rdata:68D95CBCo
aIbm905		db 'IBM905',0           ; DATA XREF: .rdata:68D95CC4o
aIbm00924	db 'IBM00924',0         ; DATA XREF: .rdata:68D95CCCo
aXCp20936	db 'x-cp20936',0        ; DATA XREF: .rdata:68D95CDCo
aXCp20949	db 'x-cp20949',0        ; DATA XREF: .rdata:68D95CE4o
aCp1025		db 'cp1025',0           ; DATA XREF: .rdata:68D95CECo
aKoi8U		db 'koi8-u',0           ; DATA XREF: .rdata:68D95CF4o
aIso88591_2	db 'iso-8859-1',0       ; DATA XREF: .rdata:68D95CFCo
aIso88591_3	db 'iso8859-1',0        ; DATA XREF: .rdata:68D95D04o
aIso88592_0	db 'iso-8859-2',0       ; DATA XREF: .rdata:68D95D0Co
aIso88592_1	db 'iso8859-2',0        ; DATA XREF: .rdata:68D95D14o
aIso88593_0	db 'iso-8859-3',0       ; DATA XREF: .rdata:68D95D1Co
aIso88593_1	db 'iso8859-3',0        ; DATA XREF: .rdata:68D95D24o
aIso88594_0	db 'iso-8859-4',0       ; DATA XREF: .rdata:68D95D2Co
aIso88594_1	db 'iso8859-4',0        ; DATA XREF: .rdata:68D95D34o
aIso88595_0	db 'iso-8859-5',0       ; DATA XREF: .rdata:68D95D3Co
aIso88595_1	db 'iso8859-5',0        ; DATA XREF: .rdata:68D95D44o
aIso88596_0	db 'iso-8859-6',0       ; DATA XREF: .rdata:68D95D4Co
aIso88596_1	db 'iso8859-6',0        ; DATA XREF: .rdata:68D95D54o
aIso88597_0	db 'iso-8859-7',0       ; DATA XREF: .rdata:68D95D5Co
aIso88597_1	db 'iso8859-7',0        ; DATA XREF: .rdata:68D95D64o
aIso88598_1	db 'iso-8859-8',0       ; DATA XREF: .rdata:68D95D6Co
aIso88598_2	db 'iso8859-8',0        ; DATA XREF: .rdata:68D95D74o
aIso88599_0	db 'iso-8859-9',0       ; DATA XREF: .rdata:68D95D7Co
aIso88599_1	db 'iso8859-9',0        ; DATA XREF: .rdata:68D95D84o
aIso885913	db 'iso-8859-13',0      ; DATA XREF: .rdata:68D95D8Co
aIso885913_0	db 'iso8859-13',0       ; DATA XREF: .rdata:68D95D94o
aIso885915_0	db 'iso-8859-15',0      ; DATA XREF: .rdata:68D95D9Co
aIso885915_1	db 'iso8859-15',0       ; DATA XREF: .rdata:68D95DA4o
aXEuropa	db 'x-Europa',0         ; DATA XREF: .rdata:68D95DACo
aIso88598I	db 'iso-8859-8-i',0     ; DATA XREF: .rdata:68D95DB4o
aIso88598I_0	db 'iso8859-8-i',0      ; DATA XREF: .rdata:68D95DBCo
aIso2022Jp_1	db 'iso-2022-jp',0      ; DATA XREF: .rdata:68D95DC4o
					; .rdata:68D95DD4o
aCsiso2022jp	db 'csISO2022JP',0      ; DATA XREF: .rdata:68D95DCCo
aIso2022Kr	db 'iso-2022-kr',0      ; DATA XREF: .rdata:68D95DDCo
aIso2022Kr_0	db 'iso2022-kr',0       ; DATA XREF: .rdata:68D95DE4o
aXCp50227	db 'x-cp50227',0        ; DATA XREF: .rdata:68D95DECo
aEucJp_1	db 'euc-jp',0           ; DATA XREF: .rdata:68D95DF4o
aEucCn		db 'EUC-CN',0           ; DATA XREF: .rdata:68D95DFCo
aEucKr_1	db 'euc-kr',0           ; DATA XREF: .rdata:68D95E04o
aHzGb2312	db 'hz-gb-2312',0       ; DATA XREF: .rdata:68D95E0Co
aGb18030_0	db 'GB18030',0          ; DATA XREF: .rdata:68D95E14o
aXIsciiDe	db 'x-iscii-de',0       ; DATA XREF: .rdata:68D95E1Co
aXIsciiBe	db 'x-iscii-be',0       ; DATA XREF: .rdata:68D95E24o
aXIsciiTa	db 'x-iscii-ta',0       ; DATA XREF: .rdata:68D95E2Co
aXIsciiTe	db 'x-iscii-te',0       ; DATA XREF: .rdata:68D95E34o
aXIsciiAs	db 'x-iscii-as',0       ; DATA XREF: .rdata:68D95E3Co
aXIsciiOr	db 'x-iscii-or',0       ; DATA XREF: .rdata:68D95E44o
aXIsciiKa	db 'x-iscii-ka',0       ; DATA XREF: .rdata:68D95E4Co
aXIsciiMa	db 'x-iscii-ma',0       ; DATA XREF: .rdata:68D95E54o
aXIsciiGu	db 'x-iscii-gu',0       ; DATA XREF: .rdata:68D95E5Co
aXIsciiPa	db 'x-iscii-pa',0       ; DATA XREF: .rdata:68D95E64o
		align 10h
dword_68D95400	dd 0FDE9h		; DATA XREF: sub_68D8D040:loc_68D8D523r
; char *off_68D95404
off_68D95404	dd offset aCp65001	; DATA XREF: sub_68D8D040:loc_68D8D506r
					; "CP65001"
		dd 0FDE9h
		dd offset aUtf8_0	; "UTF8"
		dd 0FDE9h
		dd offset aUtf8_1	; "UTF-8"
		dd 4B0h
		dd offset aCp1200	; "CP1200"
		dd 4B0h
		dd offset aUtf16le	; "UTF16LE"
		dd 4B0h
		dd offset aUtf16le_0	; "UTF-16LE"
		dd 4B0h
		dd offset aUcs2le	; "UCS2LE"
		dd 4B0h
		dd offset aUcs2le_0	; "UCS-2LE"
		dd 4B1h
		dd offset aCp1201	; "CP1201"
		dd 4B1h
		dd offset aUtf16be	; "UTF16BE"
		dd 4B1h
		dd offset aUtf16be_0	; "UTF-16BE"
		dd 4B1h
		dd offset aUcs2be	; "UCS2BE"
		dd 4B1h
		dd offset aUcs2be_0	; "UCS-2BE"
		dd 4B1h
		dd offset aUnicodefffe	; "unicodeFFFE"
		dd 2EE0h
		dd offset aCp12000	; "CP12000"
		dd 2EE0h
		dd offset aUtf32le	; "UTF32LE"
		dd 2EE0h
		dd offset aUtf32le_0	; "UTF-32LE"
		dd 2EE0h
		dd offset aUcs4le	; "UCS4LE"
		dd 2EE0h
		dd offset aUcs4le_0	; "UCS-4LE"
		dd 2EE1h
		dd offset aCp12001	; "CP12001"
		dd 2EE1h
		dd offset aUtf32be	; "UTF32BE"
		dd 2EE1h
		dd offset aUtf32be_0	; "UTF-32BE"
		dd 2EE1h
		dd offset aUcs4be	; "UCS4BE"
		dd 2EE1h
		dd offset aUcs4be_0	; "UCS-4BE"
		dd 4B1h
		dd offset aUtf16_0	; "UTF16"
		dd 4B1h
		dd offset aUtf16	; "UTF-16"
		dd 4B1h
		dd offset aUcs2_0	; "UCS2"
		dd 4B1h
		dd offset aUcs2		; "UCS-2"
		dd 2EE1h
		dd offset aUtf32_0	; "UTF32"
		dd 2EE1h
		dd offset aUtf32	; "UTF-32"
		dd 2EE1h
		dd offset aUcs4		; "UCS-4"
		dd 2EE1h
		dd offset aUcs4_0	; "UCS4"
		dd 4E9Fh
		dd offset aAnsi_x3_41968 ; "ANSI_X3.4-1968"
		dd 4E9Fh
		dd offset aAnsi_x3_41986 ; "ANSI_X3.4-1986"
		dd 4E9Fh
		dd offset aAscii_1	; "ASCII"
		dd 4E9Fh
		dd offset aCp367	; "CP367"
		dd 4E9Fh
		dd offset aIbm367	; "IBM367"
		dd 4E9Fh
		dd offset aIsoIr6	; "ISO-IR-6"
		dd 4E9Fh
		dd offset aIso646Us	; "ISO646-US"
		dd 4E9Fh
		dd offset aIso_646_irv199 ; "ISO_646.IRV:1991"
		dd 4E9Fh
		dd offset aUs_0		; "US"
		dd 4E9Fh
		dd offset aUsAscii	; "US-ASCII"
		dd 4E9Fh
		dd offset aCsascii	; "CSASCII"
		dd 4E4h
		dd offset aCp819	; "CP819"
		dd 4E4h
		dd offset aIbm819	; "IBM819"
		dd 6FAFh
		dd offset aIso88591_0	; "ISO-8859-1"
		dd 6FAFh
		dd offset aIsoIr100	; "ISO-IR-100"
		dd 6FAFh
		dd offset aIso88591_1	; "ISO8859-1"
		dd 6FAFh
		dd offset aIso_88591	; "ISO_8859-1"
		dd 6FAFh
		dd offset aIso_885911987 ; "ISO_8859-1:1987"
		dd 6FAFh
		dd offset aL1		; "L1"
		dd 6FAFh
		dd offset aLatin1	; "LATIN1"
		dd 6FAFh
		dd offset aCsisolatin1	; "CSISOLATIN1"
		dd 4E2h
		dd offset aCp1250	; "CP1250"
		dd 4E2h
		dd offset aMsEe		; "MS-EE"
		dd 4E2h
		dd offset aWindows1250	; "WINDOWS-1250"
		dd 4E3h
		dd offset aCp1251	; "CP1251"
		dd 4E3h
		dd offset aMsCyrl	; "MS-CYRL"
		dd 4E3h
		dd offset aWindows1251	; "WINDOWS-1251"
		dd 4E4h
		dd offset aCp1252	; "CP1252"
		dd 4E4h
		dd offset aMsAnsi	; "MS-ANSI"
		dd 4E4h
		dd offset aWindows1252	; "WINDOWS-1252"
		dd 4E5h
		dd offset aCp1253	; "CP1253"
		dd 4E5h
		dd offset aMsGreek	; "MS-GREEK"
		dd 4E5h
		dd offset aWindows1253	; "WINDOWS-1253"
		dd 4E6h
		dd offset aCp1254	; "CP1254"
		dd 4E6h
		dd offset aMsTurk	; "MS-TURK"
		dd 4E6h
		dd offset aWindows1254	; "WINDOWS-1254"
		dd 4E7h
		dd offset aCp1255	; "CP1255"
		dd 4E7h
		dd offset aMsHebr	; "MS-HEBR"
		dd 4E7h
		dd offset aWindows1255	; "WINDOWS-1255"
		dd 4E8h
		dd offset aCp1256	; "CP1256"
		dd 4E8h
		dd offset aMsArab	; "MS-ARAB"
		dd 4E8h
		dd offset aWindows1256	; "WINDOWS-1256"
		dd 4E9h
		dd offset aCp1257	; "CP1257"
		dd 4E9h
		dd offset aWinbaltrim	; "WINBALTRIM"
		dd 4E9h
		dd offset aWindows1257	; "WINDOWS-1257"
		dd 4EAh
		dd offset aCp1258	; "CP1258"
		dd 4EAh
		dd offset aWindows1258	; "WINDOWS-1258"
		dd 352h
		dd offset a850		; "850"
		dd 352h
		dd offset aCp850	; "CP850"
		dd 352h
		dd offset aIbm850	; "IBM850"
		dd 352h
		dd offset aCspc850multili ; "CSPC850MULTILINGUAL"
		dd 35Eh
		dd offset a862		; "862"
		dd 35Eh
		dd offset aCp862	; "CP862"
		dd 35Eh
		dd offset aIbm862	; "IBM862"
		dd 35Eh
		dd offset aCspc862latinhe ; "CSPC862LATINHEBREW"
		dd 362h
		dd offset a866		; "866"
		dd 362h
		dd offset aCp866	; "CP866"
		dd 362h
		dd offset aIbm866	; "IBM866"
		dd 362h
		dd offset aCsibm866	; "CSIBM866"
		dd 9Ah
		dd offset aCp154	; "CP154"
		dd 9Ah
		dd offset aCyrillicAsian ; "CYRILLIC-ASIAN"
		dd 9Ah
		dd offset aPt154	; "PT154"
		dd 9Ah
		dd offset aPtcp154	; "PTCP154"
		dd 9Ah
		dd offset aCsptcp154	; "CSPTCP154"
		dd 46Dh
		dd offset aCp1133	; "CP1133"
		dd 46Dh
		dd offset aIbmCp1133	; "IBM-CP1133"
		dd 36Ah
		dd offset aCp874	; "CP874"
		dd 36Ah
		dd offset aWindows874	; "WINDOWS-874"
		dd 0CADCh
		dd offset aCp51932_0	; "CP51932"
		dd 0CADCh
		dd offset aMs51932	; "MS51932"
		dd 0CADCh
		dd offset aWindows51932	; "WINDOWS-51932"
		dd 0CADCh
		dd offset aEucJp_0	; "EUC-JP"
		dd 3A4h
		dd offset aCp932	; "CP932"
		dd 3A4h
		dd offset aMs932	; "MS932"
		dd 3A4h
		dd offset aShifft_jis	; "SHIFFT_JIS"
		dd 3A4h
		dd offset aShifft_jisMs	; "SHIFFT_JIS-MS"
		dd 3A4h
		dd offset aSjis		; "SJIS"
		dd 3A4h
		dd offset aSjisMs	; "SJIS-MS"
		dd 3A4h
		dd offset aSjisOpen	; "SJIS-OPEN"
		dd 3A4h
		dd offset aSjisWin	; "SJIS-WIN"
		dd 3A4h
		dd offset aWindows31j	; "WINDOWS-31J"
		dd 3A4h
		dd offset aWindows932	; "WINDOWS-932"
		dd 3A4h
		dd offset aCswindows31j	; "CSWINDOWS31J"
		dd 0C42Dh
		dd offset aCp50221	; "CP50221"
		dd 0C42Dh
		dd offset aIso2022Jp	; "ISO-2022-JP"
		dd 0C42Dh
		dd offset aIso2022JpMs	; "ISO-2022-JP-MS"
		dd 0C42Dh
		dd offset aIso2022Jp_0	; "ISO2022-JP"
		dd 0C42Dh
		dd offset aIso2022JpMs_0 ; "ISO2022-JP-MS"
		dd 0C42Dh
		dd offset aMs50221	; "MS50221"
		dd 0C42Dh
		dd offset aWindows50221	; "WINDOWS-50221"
		dd 3A8h
		dd offset aCp936_0	; "CP936"
		dd 3A8h
		dd offset aGbk_0	; "GBK"
		dd 3A8h
		dd offset aMs936	; "MS936"
		dd 3A8h
		dd offset aWindows936	; "WINDOWS-936"
		dd 3B6h
		dd offset aCp950	; "CP950"
		dd 3B6h
		dd offset aBig5		; "BIG5"
		dd 3B6h
		dd offset aBig5hkscs	; "BIG5HKSCS"
		dd 3B6h
		dd offset aBig5Hkscs	; "BIG5-HKSCS"
		dd 3B5h
		dd offset aCp949	; "CP949"
		dd 3B5h
		dd offset aUhc		; "UHC"
		dd 3B5h
		dd offset aEucKr_0	; "EUC-KR"
		dd 551h
		dd offset aCp1361_0	; "CP1361"
		dd 551h
		dd offset aJohab_0	; "JOHAB"
		dd 1B5h
		dd offset a437		; "437"
		dd 1B5h
		dd offset aCp437	; "CP437"
		dd 1B5h
		dd offset aIbm437	; "IBM437"
		dd 1B5h
		dd offset aCspc8codepage4 ; "CSPC8CODEPAGE437"
		dd 2E1h
		dd offset aCp737	; "CP737"
		dd 307h
		dd offset aCp775	; "CP775"
		dd 307h
		dd offset aIbm775	; "IBM775"
		dd 307h
		dd offset aCspc775baltic ; "CSPC775BALTIC"
		dd 354h
		dd offset a852		; "852"
		dd 354h
		dd offset aCp852	; "CP852"
		dd 354h
		dd offset aIbm852	; "IBM852"
		dd 354h
		dd offset aCspcp852	; "CSPCP852"
		dd 355h
		dd offset aCp853	; "CP853"
		dd 357h
		dd offset a855		; "855"
		dd 357h
		dd offset aCp855	; "CP855"
		dd 357h
		dd offset aIbm855	; "IBM855"
		dd 357h
		dd offset aCsibm855	; "CSIBM855"
		dd 359h
		dd offset a857		; "857"
		dd 359h
		dd offset aCp857	; "CP857"
		dd 359h
		dd offset aIbm857	; "IBM857"
		dd 359h
		dd offset aCsibm857	; "CSIBM857"
		dd 35Ah
		dd offset aCp858	; "CP858"
		dd 35Ch
		dd offset a860		; "860"
		dd 35Ch
		dd offset aCp860	; "CP860"
		dd 35Ch
		dd offset aIbm860	; "IBM860"
		dd 35Ch
		dd offset aCsibm860	; "CSIBM860"
		dd 35Dh
		dd offset a861		; "861"
		dd 35Dh
		dd offset aCpIs		; "CP-IS"
		dd 35Dh
		dd offset aCp861	; "CP861"
		dd 35Dh
		dd offset aIbm861	; "IBM861"
		dd 35Dh
		dd offset aCsibm861	; "CSIBM861"
		dd 35Fh
		dd offset a863		; "863"
		dd 35Fh
		dd offset aCp863	; "CP863"
		dd 35Fh
		dd offset aIbm863	; "IBM863"
		dd 35Fh
		dd offset aCsibm863	; "CSIBM863"
		dd 360h
		dd offset aCp864	; "CP864"
		dd 360h
		dd offset aIbm864	; "IBM864"
		dd 360h
		dd offset aCsibm864	; "CSIBM864"
		dd 361h
		dd offset a865		; "865"
		dd 361h
		dd offset aCp865	; "CP865"
		dd 361h
		dd offset aIbm865	; "IBM865"
		dd 361h
		dd offset aCsibm865	; "CSIBM865"
		dd 365h
		dd offset a869		; "869"
		dd 365h
		dd offset aCpGr		; "CP-GR"
		dd 365h
		dd offset aCp869	; "CP869"
		dd 365h
		dd offset aIbm869	; "IBM869"
		dd 365h
		dd offset aCsibm869	; "CSIBM869"
		dd 465h
		dd offset aCp1125	; "CP1125"
		dd 25h
		dd offset aIbm037	; "IBM037"
		dd 1B5h
		dd offset aIbm437	; "IBM437"
		dd 1F4h
		dd offset aIbm500	; "IBM500"
		dd 2C4h
		dd offset aAsmo708	; "ASMO-708"
		dd 2D0h
		dd offset aDos720	; "DOS-720"
		dd 2E1h
		dd offset aIbm737	; "ibm737"
		dd 307h
		dd offset aIbm775_0	; "ibm775"
		dd 352h
		dd offset aIbm850_0	; "ibm850"
		dd 354h
		dd offset aIbm852_0	; "ibm852"
		dd 357h
		dd offset aIbm855	; "IBM855"
		dd 359h
		dd offset aIbm857_0	; "ibm857"
		dd 35Ah
		dd offset aIbm00858	; "IBM00858"
		dd 35Ch
		dd offset aIbm860	; "IBM860"
		dd 35Dh
		dd offset aIbm861_0	; "ibm861"
		dd 35Eh
		dd offset aDos862	; "DOS-862"
		dd 35Fh
		dd offset aIbm863	; "IBM863"
		dd 360h
		dd offset aIbm864	; "IBM864"
		dd 361h
		dd offset aIbm865	; "IBM865"
		dd 362h
		dd offset aCp866_0	; "cp866"
		dd 365h
		dd offset aIbm869_0	; "ibm869"
		dd 366h
		dd offset aIbm870	; "IBM870"
		dd 36Ah
		dd offset aWindows874_0	; "windows-874"
		dd 36Bh
		dd offset aCp875	; "cp875"
		dd 3A4h
		dd offset aShift_jis	; "shift_jis"
		dd 3A4h
		dd offset aShiftJis	; "shift-jis"
		dd 3A8h
		dd offset aGb2312_1	; "gb2312"
		dd 3B5h
		dd offset aKs_c_56011987 ; "ks_c_5601-1987"
		dd 3B6h
		dd offset aBig5_0	; "big5"
		dd 3B6h
		dd offset aBig5hkscs_0	; "big5hkscs"
		dd 3B6h
		dd offset aBig5Hkscs_0	; "big5-hkscs"
		dd 402h
		dd offset aIbm1026	; "IBM1026"
		dd 417h
		dd offset aIbm01047	; "IBM01047"
		dd 474h
		dd offset aIbm01140	; "IBM01140"
		dd 475h
		dd offset aIbm01141	; "IBM01141"
		dd 476h
		dd offset aIbm01142	; "IBM01142"
		dd 477h
		dd offset aIbm01143	; "IBM01143"
		dd 478h
		dd offset aIbm01144	; "IBM01144"
		dd 479h
		dd offset aIbm01145	; "IBM01145"
		dd 47Ah
		dd offset aIbm01146	; "IBM01146"
		dd 47Bh
		dd offset aIbm01147	; "IBM01147"
		dd 47Ch
		dd offset aIbm01148	; "IBM01148"
		dd 47Dh
		dd offset aIbm01149	; "IBM01149"
		dd 4E2h
		dd offset aWindows1250_0 ; "windows-1250"
		dd 4E3h
		dd offset aWindows1251_0 ; "windows-1251"
		dd 4E4h
		dd offset aWindows1252_0 ; "windows-1252"
		dd 4E5h
		dd offset aWindows1253_0 ; "windows-1253"
		dd 4E6h
		dd offset aWindows1254_0 ; "windows-1254"
		dd 4E7h
		dd offset aWindows1255_0 ; "windows-1255"
		dd 4E8h
		dd offset aWindows1256_0 ; "windows-1256"
		dd 4E9h
		dd offset aWindows1257_0 ; "windows-1257"
		dd 4EAh
		dd offset aWindows1258_0 ; "windows-1258"
		dd 551h
		dd offset aJohab_1	; "Johab"
		dd 2710h
		dd offset aMacintosh	; "macintosh"
		dd 2711h
		dd offset aXMacJapanese	; "x-mac-japanese"
		dd 2712h
		dd offset aXMacChinesetra ; "x-mac-chinesetrad"
		dd 2713h
		dd offset aXMacKorean	; "x-mac-korean"
		dd 2714h
		dd offset aXMacArabic	; "x-mac-arabic"
		dd 2715h
		dd offset aXMacHebrew	; "x-mac-hebrew"
		dd 2716h
		dd offset aXMacGreek	; "x-mac-greek"
		dd 2717h
		dd offset aXMacCyrillic	; "x-mac-cyrillic"
		dd 2718h
		dd offset aXMacChinesesim ; "x-mac-chinesesimp"
		dd 271Ah
		dd offset aXMacRomanian	; "x-mac-romanian"
		dd 2721h
		dd offset aXMacUkrainian ; "x-mac-ukrainian"
		dd 2725h
		dd offset aXMacThai	; "x-mac-thai"
		dd 272Dh
		dd offset aXMacCe	; "x-mac-ce"
		dd 275Fh
		dd offset aXMacIcelandic ; "x-mac-icelandic"
		dd 2761h
		dd offset aXMacTurkish	; "x-mac-turkish"
		dd 2762h
		dd offset aXMacCroatian	; "x-mac-croatian"
		dd 4E20h
		dd offset aXChinese_cns	; "x-Chinese_CNS"
		dd 4E21h
		dd offset aXCp20001	; "x-cp20001"
		dd 4E22h
		dd offset aX_chineseEten ; "x_Chinese-Eten"
		dd 4E23h
		dd offset aXCp20003	; "x-cp20003"
		dd 4E24h
		dd offset aXCp20004	; "x-cp20004"
		dd 4E25h
		dd offset aXCp20005	; "x-cp20005"
		dd 4E89h
		dd offset aXIa5		; "x-IA5"
		dd 4E8Ah
		dd offset aXIa5German	; "x-IA5-German"
		dd 4E8Bh
		dd offset aXIa5Swedish	; "x-IA5-Swedish"
		dd 4E8Ch
		dd offset aXIa5Norwegian ; "x-IA5-Norwegian"
		dd 4E9Fh
		dd offset aUsAscii_0	; "us-ascii"
		dd 4F25h
		dd offset aXCp20261	; "x-cp20261"
		dd 4F2Dh
		dd offset aXCp20269	; "x-cp20269"
		dd 4F31h
		dd offset aIbm273	; "IBM273"
		dd 4F35h
		dd offset aIbm277	; "IBM277"
		dd 4F36h
		dd offset aIbm278	; "IBM278"
		dd 4F38h
		dd offset aIbm280	; "IBM280"
		dd 4F3Ch
		dd offset aIbm284	; "IBM284"
		dd 4F3Dh
		dd offset aIbm285	; "IBM285"
		dd 4F42h
		dd offset aIbm290	; "IBM290"
		dd 4F49h
		dd offset aIbm297	; "IBM297"
		dd 4FC4h
		dd offset aIbm420	; "IBM420"
		dd 4FC7h
		dd offset aIbm423	; "IBM423"
		dd 4FC8h
		dd offset aIbm424	; "IBM424"
		dd 5161h
		dd offset aXEbcdicKoreane ; "x-EBCDIC-KoreanExtended"
		dd 5166h
		dd offset aIbmThai	; "IBM-Thai"
		dd 5182h
		dd offset aKoi8R_0	; "koi8-r"
		dd 5187h
		dd offset aIbm871	; "IBM871"
		dd 5190h
		dd offset aIbm880	; "IBM880"
		dd 51A9h
		dd offset aIbm905	; "IBM905"
		dd 51BCh
		dd offset aIbm00924	; "IBM00924"
		dd 51C4h
		dd offset aEucJp_0	; "EUC-JP"
		dd 51C8h
		dd offset aXCp20936	; "x-cp20936"
		dd 51D5h
		dd offset aXCp20949	; "x-cp20949"
		dd 5221h
		dd offset aCp1025	; "cp1025"
		dd 556Ah
		dd offset aKoi8U	; "koi8-u"
		dd 6FAFh
		dd offset aIso88591_2	; "iso-8859-1"
		dd 6FAFh
		dd offset aIso88591_3	; "iso8859-1"
		dd 6FB0h
		dd offset aIso88592_0	; "iso-8859-2"
		dd 6FB0h
		dd offset aIso88592_1	; "iso8859-2"
		dd 6FB1h
		dd offset aIso88593_0	; "iso-8859-3"
		dd 6FB1h
		dd offset aIso88593_1	; "iso8859-3"
		dd 6FB2h
		dd offset aIso88594_0	; "iso-8859-4"
		dd 6FB2h
		dd offset aIso88594_1	; "iso8859-4"
		dd 6FB3h
		dd offset aIso88595_0	; "iso-8859-5"
		dd 6FB3h
		dd offset aIso88595_1	; "iso8859-5"
		dd 6FB4h
		dd offset aIso88596_0	; "iso-8859-6"
		dd 6FB4h
		dd offset aIso88596_1	; "iso8859-6"
		dd 6FB5h
		dd offset aIso88597_0	; "iso-8859-7"
		dd 6FB5h
		dd offset aIso88597_1	; "iso8859-7"
		dd 6FB6h
		dd offset aIso88598_1	; "iso-8859-8"
		dd 6FB6h
		dd offset aIso88598_2	; "iso8859-8"
		dd 6FB7h
		dd offset aIso88599_0	; "iso-8859-9"
		dd 6FB7h
		dd offset aIso88599_1	; "iso8859-9"
		dd 6FBBh
		dd offset aIso885913	; "iso-8859-13"
		dd 6FBBh
		dd offset aIso885913_0	; "iso8859-13"
		dd 6FBDh
		dd offset aIso885915_0	; "iso-8859-15"
		dd 6FBDh
		dd offset aIso885915_1	; "iso8859-15"
		dd 7149h
		dd offset aXEuropa	; "x-Europa"
		dd 96C6h
		dd offset aIso88598I	; "iso-8859-8-i"
		dd 96C6h
		dd offset aIso88598I_0	; "iso8859-8-i"
		dd 0C42Ch
		dd offset aIso2022Jp_1	; "iso-2022-jp"
		dd 0C42Dh
		dd offset aCsiso2022jp	; "csISO2022JP"
		dd 0C42Eh
		dd offset aIso2022Jp_1	; "iso-2022-jp"
		dd 0C431h
		dd offset aIso2022Kr	; "iso-2022-kr"
		dd 0C431h
		dd offset aIso2022Kr_0	; "iso2022-kr"
		dd 0C433h
		dd offset aXCp50227	; "x-cp50227"
		dd 0CADCh
		dd offset aEucJp_1	; "euc-jp"
		dd 0CAE0h
		dd offset aEucCn	; "EUC-CN"
		dd 0CAEDh
		dd offset aEucKr_1	; "euc-kr"
		dd 0CEC8h
		dd offset aHzGb2312	; "hz-gb-2312"
		dd 0D698h
		dd offset aGb18030_0	; "GB18030"
		dd 0DEAAh
		dd offset aXIsciiDe	; "x-iscii-de"
		dd 0DEABh
		dd offset aXIsciiBe	; "x-iscii-be"
		dd 0DEACh
		dd offset aXIsciiTa	; "x-iscii-ta"
		dd 0DEADh
		dd offset aXIsciiTe	; "x-iscii-te"
		dd 0DEAEh
		dd offset aXIsciiAs	; "x-iscii-as"
		dd 0DEAFh
		dd offset aXIsciiOr	; "x-iscii-or"
		dd 0DEB0h
		dd offset aXIsciiKa	; "x-iscii-ka"
		dd 0DEB1h
		dd offset aXIsciiMa	; "x-iscii-ma"
		dd 0DEB2h
		dd offset aXIsciiGu	; "x-iscii-gu"
		dd 0DEB3h
		dd offset aXIsciiPa	; "x-iscii-pa"
		align 10h
dword_68D95E70	dd 42281Bh		; DATA XREF: .data:Str2o
dword_68D95E74	dd 4A281Bh		; DATA XREF: .data:off_68D90190o
dword_68D95E78	dd 49281Bh		; DATA XREF: .data:Srco
dword_68D95E7C	dd 40241Bh		; DATA XREF: .data:68D901B0o
dword_68D95E80	dd 42241Bh		; DATA XREF: .data:68D901C0o
aD		db 1Bh,'$(D',0          ; DATA XREF: .data:68D901D0o
		align 20h
off_68D95EA0	dd offset TlsCallback_0	; DATA XREF: sub_68D81040:loc_68D81137r
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_68D8DF60+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_68D8DFC0+13Ao
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_68D8DFC0+126o
					; sub_68D8E110+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_68D8E110+267o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_68D8E110+F4o
		align 4
off_68D95F74	dd offset dword_68D961C0 ; DATA	XREF: .text:68D8E4B8o
		dd offset dword_68D96220
aMsvcrt_dll:				; DATA XREF: .text:loc_68D8EBB5o
		unicode	0, <msvcrt.dll>,0
		align 4
dword_68D95F94	dd 0			; DATA XREF: sub_68D8E110+57o
					; sub_68D8E110+5Co ...
dword_68D95F98	dd 0			; DATA XREF: sub_68D8E110+7Ar
dword_68D95F9C	dd 0			; DATA XREF: sub_68D8E110+84r
dword_68D95FA0	dd 18h dup(0)		; DATA XREF: sub_68D8E110+8Do
_rdata		ends

; Section 4. (virtual address 00016000)
; Virtual size			: 00000550 (   1360.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 68D96000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_68D96000	dd ?			; DATA XREF: sub_68D81040+Dr
					; sub_68D81040+22w ...
dword_68D96004	dd ?			; DATA XREF: _nl_find_domain+73o
					; _nl_find_domain+188o
dword_68D96008	dd ?			; DATA XREF: _nl_expand_alias+7r
					; _nl_expand_alias:loc_68D8316Er ...
; void *dword_68D9600C
dword_68D9600C	dd ?			; DATA XREF: sub_68D82C80+277r
					; sub_68D82C80+2ECr ...
dword_68D96010	dd ?			; DATA XREF: sub_68D82C80+24Br
					; sub_68D82C80+2D5r ...
dword_68D96014	dd ?			; DATA XREF: sub_68D82C80+236r
					; sub_68D82C80+420w
; void *Base
Base		dd ?			; DATA XREF: sub_68D82C80:loc_68D82E6Dr
					; sub_68D82C80+212w ...
; size_t NumOfElements
NumOfElements	dd ?			; DATA XREF: sub_68D82C80+1CFr
					; sub_68D82C80+27Dr ...
dword_68D96020	dd ?			; DATA XREF: sub_68D82C80:loc_68D82E4Ar
					; sub_68D82C80+217w
dword_68D96024	dd ?			; DATA XREF: _nl_find_msg+4E1w
					; _nl_find_msg+510r ...
dword_68D96028	dd ?			; DATA XREF: _nl_find_msg:loc_68D84669r
					; _nl_find_msg+4FAw ...
dword_68D9602C	dd ?			; DATA XREF: _nl_find_msg:loc_68D845F4r
					; _nl_find_msg:loc_68D84765w
dword_68D96030	dd ?			; DATA XREF: _nl_find_msg:loc_68D84602r
					; _nl_find_msg:loc_68D84918w
dword_68D96034	dd ?			; DATA XREF: libintl_dcigettext+2FDo
dword_68D96038	dd ?			; DATA XREF: libintl_dcigettext:loc_68D84B60r
					; libintl_dcigettext:loc_68D84E6Dw ...
; char Str1[16]
Str1		db 10h dup(?)		; DATA XREF: locale_charset+13o
					; locale_charset+55o ...
; char *Str
Str		dd ?			; DATA XREF: locale_charset+23r
					; locale_charset:loc_68D85427w
dword_68D96050	dd ?			; DATA XREF: _nl_language_preferences_default+6r
					; _nl_language_preferences_default+C6w
dword_68D96054	dd ?			; DATA XREF: _nl_language_preferences_default:loc_68D85489r
					; _nl_language_preferences_default:loc_68D85520w
		align 10h
; CHAR LCData
LCData		db ?			; DATA XREF: sub_68D858F0+25o
					; sub_68D858F0:loc_68D85957r ...
		align 4
		dd 3Fh dup(?)
; char *Memory
Memory		dd ?			; DATA XREF: _nl_log_untranslated+7r
					; _nl_log_untranslated+52r ...
; FILE *File
File		dd ?			; DATA XREF: _nl_log_untranslated+41r
					; _nl_log_untranslated+58w ...
; HMODULE hLibModule
hLibModule	dd ?			; DATA XREF: sub_68D8DA50+CFr
					; sub_68D8DA50:loc_68D8DCAAr
dword_68D9616C	dd ?			; DATA XREF: sub_68D8C7B0+3r
					; sub_68D8C7B0+54w
dword_68D96170	dd ?			; DATA XREF: sub_68D8C2A0+5Cr
					; sub_68D8C7B0+69w ...
dword_68D96174	dd ?			; DATA XREF: sub_68D8C7B0+7Ew
					; sub_68D8C880+4Br ...
dword_68D96178	dd ?			; DATA XREF: sub_68D8C7B0+93w
dword_68D9617C	dd ?			; DATA XREF: sub_68D8C7B0+A8w
dword_68D96180	dd ?			; DATA XREF: sub_68D8C7B0+BAw
TlsIndex	dd 4 dup(?)		; DATA XREF: .tls:TlsIndex_ptro
dword_68D96194	dd ?			; DATA XREF: DllEntryPoint+7w
dword_68D96198	dd ?			; DATA XREF: sub_68D8DFC0+2Cr
					; sub_68D8DFC0+65r ...
dword_68D9619C	dd ?			; DATA XREF: sub_68D8DFC0:loc_68D8DFE0r
					; sub_68D8DFC0:loc_68D8E082w ...
dword_68D961A0	dd ?			; DATA XREF: sub_68D8E110+9r
					; sub_68D8E110:loc_68D8E130w
dword_68D961A4	dd ?			; DATA XREF: sub_68D8E420+3r
					; sub_68D8E420:loc_68D8E431w
		align 20h
dword_68D961C0	dd ?			; DATA XREF: .text:68D8E472w
					; .rdata:off_68D95F74o
dword_68D961C4	dd ?			; DATA XREF: .text:68D8E47Cw
		dd ?
dword_68D961CC	dd ?			; DATA XREF: .text:68D8E48Bw
		dd 14h dup(?)
dword_68D96220	dd 2Bh dup(?)		; DATA XREF: .rdata:68D95F78o
dword_68D962CC	dd ?			; DATA XREF: .text:68D8E49Aw
		dd 2 dup(?)
dword_68D962D8	dd ?			; DATA XREF: .text:68D8E486w
		dd 2 dup(?)
dword_68D962E4	dd ?			; DATA XREF: .text:68D8E46Cw
		dd 86h dup(?)
dword_68D96500	dd ?			; DATA XREF: sub_68D8E5C0+7r
					; sub_68D8E640+26r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_68D8E5C0:loc_68D8E5D8o
					; sub_68D8E5C0:loc_68D8E625o ...
dword_68D9651C	dd ?			; DATA XREF: sub_68D8E5C0+25r
					; .text:68D8E6F5r ...
		dd ?
dword_68D96524	dd ?			; DATA XREF: .text:68D8EB16r
					; .text:68D8EBAAw ...
; Exported entry  14. _nl_msg_cat_cntr
		public _nl_msg_cat_cntr
_nl_msg_cat_cntr dd ?			; DATA XREF: sub_68D81490:loc_68D815E8w
					; libintl_textdomain:loc_68D832ABw ...
; Exported entry  42. libintl_nl_domain_bindings
		public libintl_nl_domain_bindings
libintl_nl_domain_bindings dd ?		; DATA XREF: sub_68D81490:loc_68D814C3r
					; sub_68D81490:loc_68D816A2r ...
dword_68D96530	dd ?			; DATA XREF: sub_68D81000+21w
					; sub_68D81040+143r ...
dword_68D96534	dd ?			; DATA XREF: sub_68D81000+1Cw
					; sub_68D81040:loc_68D81170r ...
dword_68D96538	dd ?			; DATA XREF: sub_68D81040+4Co
					; sub_68D81040+C1o ...
dword_68D9653C	dd ?			; DATA XREF: sub_68D81040+5Fr
					; sub_68D81040:loc_68D81116r ...
		align 1000h
_bss		ends

;
; Imports from ADVAPI32.DLL
;
; Section 6. (virtual address 00018000)
; Virtual size			: 00000A2C (   2604.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00014000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
; LSTATUS __stdcall RegCloseKey(HKEY hKey)
		extrn RegCloseKey:dword	; CODE XREF: _nl_language_preferences_default+1A2p
					; DATA XREF: _nl_language_preferences_default+1A2r
; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY	phkResult)
		extrn RegOpenKeyExA:dword ; CODE XREF: _nl_language_preferences_default+107p
					; DATA XREF: _nl_language_preferences_default+107r
; LSTATUS __stdcall RegQueryValueExA(HKEY hKey,	LPCSTR lpValueName, LPDWORD lpReserved,	LPDWORD	lpType,	LPBYTE lpData, LPDWORD lpcbData)
		extrn RegQueryValueExA:dword
					; CODE XREF: _nl_language_preferences_default+190p
					; DATA XREF: _nl_language_preferences_default+190r

;
; Imports from KERNEL32.dll
;
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_68D8E640+41p
					; DATA XREF: sub_68D8E640+41r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_68D8E5C0+1Fp
					; .text:68D8E6EFp ...
; BOOL __stdcall EnumResourceLanguagesA(HMODULE	hModule, LPCSTR	lpType,	LPCSTR lpName, ENUMRESLANGPROCA	lpEnumFunc, LONG_PTR lParam)
		extrn EnumResourceLanguagesA:dword
					; CODE XREF: _nl_language_preferences_default+147p
					; DATA XREF: _nl_language_preferences_default+147r
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; CODE XREF: .text:68D8C77Cp
					; sub_68D8DA50+133p ...
; UINT __stdcall GetACP()
		extrn GetACP:dword	; CODE XREF: locale_charset+5p
					; sub_68D8D040:loc_68D8D200p
					; DATA XREF: ...
; BOOL __stdcall GetCPInfo(UINT	CodePage, LPCPINFO lpCPInfo)
		extrn GetCPInfo:dword	; CODE XREF: sub_68D8D040+230p
					; DATA XREF: sub_68D8D040+230r
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:68D8E4C8p
					; DATA XREF: .text:68D8E4C8r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_68D8E4F0+6Cp
					; DATA XREF: sub_68D8E4F0+6Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_68D8E4F0+74p
					; DATA XREF: sub_68D8E4F0+74r
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: _nl_language_preferences_default+254p
					; .text:loc_68D8D910p ...
; int __stdcall	GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData)
		extrn GetLocaleInfoA:dword ; CODE XREF:	sub_68D858F0+38p
					; DATA XREF: sub_68D858F0+38r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_68D81430+16p
					; _nl_language_preferences_default+6Ap	...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_68D81430+35p
					; _nl_language_preferences_default+8Ap	...
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_68D8E4F0+57p
					; DATA XREF: sub_68D8E4F0+57r
; LCID __stdcall GetThreadLocale()
		extrn GetThreadLocale:dword ; CODE XREF: _nl_locale_name_default+3p
					; _nl_locale_name:loc_68D868B3p
					; DATA XREF: ...
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_68D8E4F0+7Cp
					; DATA XREF: sub_68D8E4F0+7Cr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_68D8E640+77p
					; DATA XREF: sub_68D8E640+77r
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination,	LONG Exchange, LONG Comperand)
		extrn InterlockedCompareExchange:dword
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword
; BOOL __stdcall IsDBCSLeadByteEx(UINT CodePage, BYTE TestChar)
		extrn IsDBCSLeadByteEx:dword ; CODE XREF: sub_68D8D530+17p
					; DATA XREF: sub_68D8D530+17r
; BOOL __stdcall IsValidCodePage(UINT CodePage)
		extrn IsValidCodePage:dword ; CODE XREF: sub_68D8D040+212p
					; DATA XREF: sub_68D8D040+212r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_68D8E5C0+6Cp
					; .text:68D8E726p ...
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn LoadLibraryA:dword ; CODE	XREF: sub_68D8C7B0+2Dp
					; sub_68D8DA50+B4p
					; DATA XREF: ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: .text:68D8EBBCp
					; DATA XREF: .text:68D8EBBCr
; int __stdcall	MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr,	int cchWideChar)
		extrn MultiByteToWideChar:dword	; CODE XREF: sub_68D8D960+65p
					; DATA XREF: sub_68D8D960+65r
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_68D8E4F0+8Bp
					; DATA XREF: sub_68D8E4F0+8Br
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: .text:68D8E4AFp
					; DATA XREF: .text:68D8E4AFr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_68D81040+37p
					; sub_68D81040+B0p
					; DATA XREF: ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:68D8E4D9p
					; DATA XREF: .text:68D8E4D9r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_68D8E5C0+45p
					; DATA XREF: sub_68D8E5C0+32r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:68D8E4BFp
					; DATA XREF: .text:68D8E4BFr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_68D8DFC0+10Bp
					; sub_68D8E110+1B2p
					; DATA XREF: ...
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_68D8DFC0+A8p
					; sub_68D8E110+184p
					; DATA XREF: ...
; int __stdcall	WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR	lpMultiByteStr,	int cbMultiByte, LPCSTR	lpDefaultChar, LPBOOL lpUsedDefaultChar)
		extrn WideCharToMultiByte:dword	; CODE XREF: .text:68D8D82Ep
					; DATA XREF: .text:68D8D82Er

;
; Imports from msvcrt.dll
;
		extrn __imp__close:dword ; DATA	XREF: _closer
		extrn __imp__getcwd:dword ; DATA XREF: _getcwdr
		extrn __imp__open:dword	; DATA XREF: _openr
		extrn __imp__read:dword	; DATA XREF: _readr
; char *__cdecl	_strdup(const char *Src)
		extrn __imp__strdup:dword ; DATA XREF: _strdupr

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; int *__cdecl errno()
		extrn _errno:dword	; CODE XREF: _nl_load_domain+140p
					; _nl_find_msg+553p ...
		extrn _fstat:dword	; CODE XREF: _nl_load_domain+55p
					; DATA XREF: _nl_load_domain+55r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _iob:dword	; DATA XREF: .text:68D889C3r
					; .text:68D88A23r ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_68D8DD80+A3p
					; DATA XREF: sub_68D8DD80+A3r
; int __cdecl stricmp(const char *Str1,	const char *Str2)
		extrn _stricmp:dword	; CODE XREF: sub_68D8D040+8Ep
					; sub_68D8D040+B0p ...
; int __cdecl strnicmp(const char *Str1, const char *Str, size_t MaxCount)
		extrn _strnicmp:dword	; CODE XREF: sub_68D8D040+2CAp
					; sub_68D8D040+2F2p
					; DATA XREF: ...
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; int __cdecl _vsnprintf(char *DstBuf, size_t MaxCount,	const char *Format, va_list ArgList)
		extrn __imp__vsnprintf:dword ; CODE XREF: sub_68D88710+B4p
					; DATA XREF: sub_68D88710+B4r ...
; int __cdecl _vsnwprintf(wchar_t *Dest, size_t	Count, const wchar_t *Format, va_list Args)
		extrn __imp__vsnwprintf:dword ;	CODE XREF: sub_68D8A6C0+C3p
					; DATA XREF: sub_68D8A6C0+C3r ...
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl atoi(const char *Str)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; void *__cdecl	bsearch(const void *Key, const void *Base, size_t NumOfElements, size_t	SizeOfElements,	int (__cdecl *PtFuncCompare)(const void	*, const void *))
		extrn __imp_bsearch:dword ; DATA XREF: bsearchr
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; int __cdecl fclose(FILE *File)
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
; int __cdecl feof(FILE	*File)
		extrn __imp_feof:dword	; DATA XREF: feofr
; char *__cdecl	fgets(char *Buf, int MaxCount, FILE *File)
		extrn __imp_fgets:dword	; DATA XREF: fgetsr
; FILE *__cdecl	fopen(const char *Filename, const char *Mode)
		extrn __imp_fopen:dword	; DATA XREF: fopenr
; wint_t __cdecl fputwc(wchar_t	Ch, FILE *File)
		extrn __imp_fputwc:dword ; DATA	XREF: fputwcr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; char *__cdecl	getenv(const char *VarName)
		extrn __imp_getenv:dword ; DATA	XREF: getenvr
; int __cdecl isalnum(int C)
		extrn isalnum:dword	; CODE XREF: _nl_normalize_codeset+2Dp
					; DATA XREF: _nl_normalize_codeset+2Dr
; int __cdecl isalpha(int C)
		extrn isalpha:dword	; CODE XREF: _nl_normalize_codeset+3Dp
					; _nl_normalize_codeset+ACp
					; DATA XREF: ...
; int __cdecl isspace(int C)
		extrn isspace:dword	; CODE XREF: sub_68D82C80+F0p
					; sub_68D82C80+134p ...
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp_memmove:dword ; DATA XREF: memmover
; int __cdecl putc(int Ch, FILE	*File)
		extrn __imp_putc:dword	; DATA XREF: putcr
; void __cdecl qsort(void *Base, size_t	NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *))
		extrn __imp_qsort:dword	; DATA XREF: qsortr
		extrn __imp_raise:dword	; DATA XREF: raiser
; void *__cdecl	realloc(void *Memory, size_t NewSize)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
		extrn __imp_setlocale:dword ; DATA XREF: setlocaler
; int sprintf(char *Dest, const	char *Format, ...)
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn __imp_strchr:dword ; DATA	XREF: strchrr
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl strcspn(const char *Str, const	char *Control)
		extrn __imp_strcspn:dword ; DATA XREF: strcspnr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; char *__cdecl	strncpy(char *Dest, const char *Source,	size_t Count)
		extrn __imp_strncpy:dword ; DATA XREF: strncpyr
; char *__cdecl	strstr(const char *Str,	const char *SubStr)
		extrn __imp_strstr:dword ; DATA	XREF: strstrr
; unsigned __int32 __cdecl strtoul(const char *Str, char **EndPtr, int Radix)
		extrn __imp_strtoul:dword ; DATA XREF: strtoulr
; int __cdecl tolower(int C)
		extrn tolower:dword	; CODE XREF: _nl_normalize_codeset+88p
					; DATA XREF: _nl_normalize_codeset+88r
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr
; int __cdecl vfwprintf(FILE *File, const wchar_t *Format, va_list ArgList)
		extrn __imp_vfwprintf:dword ; DATA XREF: vfwprintfr
; int __cdecl vsprintf(char *Dest, const char *Format, va_list Args)
		extrn __imp_vsprintf:dword ; DATA XREF:	vsprintfr
; wchar_t *__cdecl wcschr(const	wchar_t	*Str, wchar_t Ch)
		extrn __imp_wcschr:dword ; DATA	XREF: wcschrr


; Section 7. (virtual address 00019000)
; Virtual size			: 0000002C (	 44.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00014C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 68D99000h
dword_68D99000	dd 0			; DATA XREF: sub_68D81040+1DDo
dword_68D99004	dd 0			; DATA XREF: sub_68D81040+1D5o
dword_68D99008	dd 0			; DATA XREF: sub_68D81040+1C9o
		dd offset sub_68D81000
dword_68D99010	dd 2 dup(0)		; DATA XREF: sub_68D81040+1C1o
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 8
dword_68D99028	dd 76h dup(0)		; DATA XREF: TlsCallback_0:loc_68D8DEF1o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 0001A000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00014E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 68D9A000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end DllEntryPoint
