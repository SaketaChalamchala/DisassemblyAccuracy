;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A72655E2BE855722C7CBB4C0DDAF62B3
; Input	CRC32 :	5D7FE06E

; File Name   :	C:\compspace\compare\gpg\dlls\original\libqgpgme.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	6B400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00008AAC (  35500.)
; Section size in file		: 00008C00 (  35840.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6B401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_6B401000	proc near		; DATA XREF: .CRT:6B41400Co

var_1C		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+var_1C], 80h ;	size_t
		call	malloc
		mov	ebx, eax
		mov	[esp+1Ch+var_1C], eax
		call	sub_6B4061C0
		test	ebx, ebx
		mov	ds:dword_6B4113AC, eax
		mov	ds:dword_6B4113A8, eax
		mov	eax, 1
		jz	short loc_6B401035
		mov	dword ptr [ebx], 0
		xor	al, al

loc_6B401035:				; CODE XREF: sub_6B401000+2Bj
		add	esp, 18h
		pop	ebx
		retn
sub_6B401000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B401040	proc near		; CODE XREF: sub_6B401260+DAp
					; sub_6B401260+128p ...

dwMilliseconds	= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	edx, [esp+1Ch+arg_4]
		test	edx, edx
		jnz	short loc_6B4010C6
		mov	edx, ds:dword_6B411000
		xor	eax, eax
		test	edx, edx
		jle	short loc_6B4010BE
		sub	edx, 1
		mov	ebx, ds:Sleep
		mov	ds:dword_6B411000, edx
		jmp	short loc_6B40107C
; ---------------------------------------------------------------------------
		align 10h

loc_6B401070:				; CODE XREF: sub_6B401040+5Dj
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	ebx ; Sleep
		sub	esp, 4

loc_6B40107C:				; CODE XREF: sub_6B401040+28j
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+dwMilliseconds], offset dword_6B4113B0
		call	sub_6B4073E0
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B401070
		mov	eax, ds:dword_6B4113B4
		cmp	eax, 2
		jz	loc_6B401170
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, 1

loc_6B4010BE:				; CODE XREF: sub_6B401040+17j
					; sub_6B401040+8Ej
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6B4010C6:				; CODE XREF: sub_6B401040+Bj
		cmp	edx, 1
		mov	eax, 1
		jnz	short loc_6B4010BE
		mov	eax, large fs:18h
		mov	esi, ds:Sleep
		mov	ebx, [eax+4]
		jmp	short loc_6B4010F5
; ---------------------------------------------------------------------------

loc_6B4010E1:				; CODE XREF: sub_6B401040+D2j
		cmp	eax, ebx
		jz	loc_6B401238
		mov	[esp+1Ch+dwMilliseconds], 3E8h ; dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_6B4010F5:				; CODE XREF: sub_6B401040+9Fj
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+dwMilliseconds], offset dword_6B4113B0
		call	sub_6B4073E0
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B4010E1
		xor	ebx, ebx

loc_6B401116:				; CODE XREF: sub_6B401040+1FDj
		mov	eax, ds:dword_6B4113B4
		test	eax, eax
		jz	loc_6B4011F7
		mov	[esp+1Ch+dwMilliseconds], 1Fh
		call	_amsg_exit

loc_6B40112F:				; CODE XREF: sub_6B401040+1F3j
		test	ebx, ebx
		jz	loc_6B401242

loc_6B401137:				; CODE XREF: sub_6B401040+219j
		mov	eax, ds:off_6B410520
		test	eax, eax
		jz	short loc_6B40115C
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 2
		mov	[esp+1Ch+var_14], edx
		mov	edx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwMilliseconds], edx
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_6B40115C:				; CODE XREF: sub_6B401040+FEj
		add	ds:dword_6B411000, 1
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6B401170:				; CODE XREF: sub_6B401040+67j
		mov	eax, ds:dword_6B4113AC
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_6B4061B0
		test	eax, eax
		mov	ebx, eax
		jz	short loc_6B4011C9
		mov	eax, ds:dword_6B4113A8
		mov	[esp+1Ch+dwMilliseconds], eax
		call	sub_6B4061B0
		mov	esi, eax

loc_6B401192:				; CODE XREF: sub_6B401040+15Dj
		sub	esi, 4
		cmp	ebx, esi
		ja	short loc_6B4011A8

loc_6B401199:				; CODE XREF: sub_6B401040+166j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B401192
		sub	esi, 4
		call	eax
		cmp	ebx, esi
		jbe	short loc_6B401199

loc_6B4011A8:				; CODE XREF: sub_6B401040+157j
		mov	[esp+1Ch+dwMilliseconds], ebx ;	void *
		nop
		lea	esi, [esi+0]
		call	free
		mov	ds:dword_6B4113A8, 0
		mov	ds:dword_6B4113AC, 0

loc_6B4011C9:				; CODE XREF: sub_6B401040+141j
		mov	ds:dword_6B4113B4, 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_6B4113B0
		call	sub_6B407410
		mov	eax, 1
		sub	esp, 8
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6B4011F7:				; CODE XREF: sub_6B401040+DDj
		mov	ds:dword_6B4113B4, 1
		mov	[esp+1Ch+var_18], offset dword_6B414010
		mov	[esp+1Ch+dwMilliseconds], offset dword_6B414008
		call	_initterm
		mov	[esp+1Ch+var_18], offset dword_6B414004
		mov	[esp+1Ch+dwMilliseconds], offset dword_6B414000
		call	_initterm
		mov	ds:dword_6B4113B4, 2
		jmp	loc_6B40112F
; ---------------------------------------------------------------------------

loc_6B401238:				; CODE XREF: sub_6B401040+A3j
		mov	ebx, 1
		jmp	loc_6B401116
; ---------------------------------------------------------------------------

loc_6B401242:				; CODE XREF: sub_6B401040+F1j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+dwMilliseconds], offset dword_6B4113B0
		call	sub_6B407410
		sub	esp, 8
		jmp	loc_6B401137
sub_6B401040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B401260	proc near		; CODE XREF: DllEntryPoint+1Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		test	edx, edx
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_C], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, ecx
		mov	[esp+2Ch+var_8], edi
		mov	dword_6B40A000,	edx
		jnz	short loc_6B4012E0
		mov	eax, ds:dword_6B411000
		test	eax, eax
		jz	loc_6B4013B7
		call	sub_6B406380

loc_6B401295:				; CODE XREF: sub_6B401260+90j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B4066B0
		sub	esp, 0Ch
		cmp	esi, 3
		mov	edi, eax
		jz	loc_6B4013A0
		test	esi, esi
		jz	loc_6B4013A0

loc_6B4012BB:				; CODE XREF: sub_6B401260+B2j
					; sub_6B401260+F9j ...
		mov	eax, edi
		mov	ebx, [esp+2Ch+var_10]
		mov	dword_6B40A000,	0FFFFFFFFh
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4012E0:				; CODE XREF: sub_6B401260+21j
		lea	eax, [edx-1]
		cmp	eax, 1
		jbe	short loc_6B401360

loc_6B4012E8:				; CODE XREF: sub_6B401260+134j
		call	sub_6B406380
		cmp	esi, 1
		jnz	short loc_6B401295
		call	sub_6B406690
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B4066B0
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	short loc_6B4012BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B4066B0
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B401040
		sub	esp, 0Ch
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B4066C0
		sub	esp, 0Ch
		jmp	loc_6B4012BB
; ---------------------------------------------------------------------------
		align 10h

loc_6B401360:				; CODE XREF: sub_6B401260+86j
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B4066C0
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jz	loc_6B4012BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B401040
		sub	esp, 0Ch
		test	eax, eax
		mov	edi, eax
		jnz	loc_6B4012E8
		jmp	loc_6B4012BB
; ---------------------------------------------------------------------------
		align 10h

loc_6B4013A0:				; CODE XREF: sub_6B401260+4Dj
					; sub_6B401260+55j
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B401040
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B4013C0

loc_6B4013B7:				; CODE XREF: sub_6B401260+2Aj
		xor	edi, edi
		jmp	loc_6B4012BB
; ---------------------------------------------------------------------------
		align 10h

loc_6B4013C0:				; CODE XREF: sub_6B401260+155j
		test	edi, edi
		jz	loc_6B4012BB
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B4066C0
		sub	esp, 0Ch
		mov	edi, eax
		jmp	loc_6B4012BB
sub_6B401260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_10		= dword	ptr -10h
hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpReserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+fdwReason]
		mov	ds:dword_6B411014, 0
		cmp	edx, 1
		jz	short loc_6B401420

loc_6B401406:				; CODE XREF: DllEntryPoint+3Dj
		mov	ecx, [esp+1Ch+lpReserved]
		mov	eax, [esp+1Ch+hinstDLL]
		call	sub_6B401260
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6B401420:				; CODE XREF: DllEntryPoint+14j
		mov	[esp+1Ch+var_10], edx
		call	sub_6B406760
		mov	edx, [esp+1Ch+var_10]
		jmp	short loc_6B401406
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B401430	proc near		; CODE XREF: sub_6B407590+6p
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_6B40EA44
		test	eax, eax
		jz	short locret_6B40147B
		mov	dword ptr [esp], offset	ModuleName ; "libgcj_s.dll"
		call	ds:GetModuleHandleA
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_6B40146E
		mov	dword ptr [esp+4], offset ProcName ; "_Jv_RegisterClasses"
		mov	[esp], edx	; hModule
		call	ds:GetProcAddress
		sub	esp, 8

loc_6B40146E:				; CODE XREF: sub_6B401430+28j
		test	eax, eax
		jz	short locret_6B40147B
		mov	dword ptr [esp], offset	dword_6B40EA44
		call	eax

locret_6B40147B:			; CODE XREF: sub_6B401430+Dj
					; sub_6B401430+40j
		leave
		retn
sub_6B401430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6B401480()
sub_6B401480	proc near		; DATA XREF: sub_6B407590+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_6B401480	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. _ZN6QGpgME22QByteArrayDataProviderC2Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProviderC2Ev
_ZN6QGpgME22QByteArrayDataProviderC2Ev proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, ds:_ZN10QByteArray11shared_nullE
		mov	dword ptr [edx], offset	off_6B410A28
		mov	[edx+4], eax
		lock inc dword ptr [eax]
		setnz	cl
		mov	dword ptr [edx+8], 0
		retn
_ZN6QGpgME22QByteArrayDataProviderC2Ev endp

; Exported entry  17. _ZN6QGpgME22QByteArrayDataProviderC1Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProviderC1Ev
_ZN6QGpgME22QByteArrayDataProviderC1Ev proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, ds:_ZN10QByteArray11shared_nullE
		mov	dword ptr [edx], offset	off_6B410A28
		mov	[edx+4], eax
		lock inc dword ptr [eax]
		setnz	cl
		mov	dword ptr [edx+8], 0
		retn
_ZN6QGpgME22QByteArrayDataProviderC1Ev endp

; Exported entry  18. _ZN6QGpgME22QByteArrayDataProviderC2ERK10QByteArray

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProviderC2ERK10QByteArray
_ZN6QGpgME22QByteArrayDataProviderC2ERK10QByteArray proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		mov	eax, [eax]
		mov	dword ptr [edx], offset	off_6B410A28
		mov	[edx+4], eax
		lock inc dword ptr [eax]
		setnz	cl
		mov	dword ptr [edx+8], 0
		retn
_ZN6QGpgME22QByteArrayDataProviderC2ERK10QByteArray endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. _ZN6QGpgME22QByteArrayDataProviderC1ERK10QByteArray

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProviderC1ERK10QByteArray
_ZN6QGpgME22QByteArrayDataProviderC1ERK10QByteArray proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		mov	eax, [eax]
		mov	dword ptr [edx], offset	off_6B410A28
		mov	[edx+4], eax
		lock inc dword ptr [eax]
		setnz	cl
		mov	dword ptr [edx+8], 0
		retn
_ZN6QGpgME22QByteArrayDataProviderC1ERK10QByteArray endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. _ZN6QGpgME21QIODeviceDataProviderD2Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProviderD2Ev
_ZN6QGpgME21QIODeviceDataProviderD2Ev proc near

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], ebx
		mov	[esp+1Ch+var_4], edi
		mov	ebx, [esi+8]
		mov	dword ptr [esi], offset	off_6B4109E8
		test	ebx, ebx
		jz	short loc_6B401561
		mov	edi, 0FFFFFFFFh
		mov	eax, edi
		lock xadd [ebx+4], eax
		cmp	eax, 1
		jz	short loc_6B401580

loc_6B401561:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProviderD2Ev+1Ej
					; _ZN6QGpgME21QIODeviceDataProviderD2Ev+60j ...
		mov	eax, ds:_ZTVN5GpgME12DataProviderE
		add	eax, 8
		mov	[esi], eax
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B401580:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProviderD2Ev+2Fj
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], ebx
		call	dword ptr [eax+8]
		lock xadd [ebx+8], edi
		cmp	edi, 1
		jnz	short loc_6B401561
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], ebx
		call	dword ptr [eax+0Ch]
		jmp	short loc_6B401561
_ZN6QGpgME21QIODeviceDataProviderD2Ev endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. _ZN6QGpgME21QIODeviceDataProvider7releaseEv

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProvider7releaseEv
_ZN6QGpgME21QIODeviceDataProvider7releaseEv proc near ;	DATA XREF: .rdata:6B410A00o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	eax, [eax+4]
		mov	edx, [eax]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, [edx+38h]
		add	esp, 0Ch
		jmp	eax
_ZN6QGpgME21QIODeviceDataProvider7releaseEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. _ZN6QGpgME21QIODeviceDataProvider4seekEli

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProvider4seekEli
_ZN6QGpgME21QIODeviceDataProvider4seekEli proc near ; DATA XREF: .rdata:6B4109FCo

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_8], edi
		mov	edi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], ebp
		mov	eax, [ebx+4]
		mov	edx, [eax]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+30h]
		test	al, al
		jnz	loc_6B401695
		mov	eax, [ebx+4]
		mov	edx, [eax]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+3Ch]
		cmp	esi, 1
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_20], edx
		jz	short loc_6B401684
		cmp	esi, 2
		jz	short loc_6B401653
		test	esi, esi
		jnz	short loc_6B401670
		mov	ecx, edi
		mov	edx, edi
		sar	ecx, 1Fh

loc_6B40161A:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4seekEli+ABj
					; _ZN6QGpgME21QIODeviceDataProvider4seekEli+D3j
		mov	eax, [ebx+4]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	ebx, [eax]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_34], ecx
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ebx+44h]
		mov	edx, [esp+3Ch+var_28]
		test	al, al
		jz	short loc_6B401670

loc_6B40163D:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4seekEli+C2j
					; _ZN6QGpgME21QIODeviceDataProvider4seekEli+E7j
		mov	eax, edx
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6B401653:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4seekEli+4Dj
		mov	eax, [ebx+4]
		mov	ebp, edi
		sar	ebp, 1Fh
		mov	edx, [eax]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [edx+40h]
		mov	ecx, edx
		mov	edx, eax
		add	edx, edi
		adc	ecx, ebp
		jmp	short loc_6B40161A
; ---------------------------------------------------------------------------
		align 10h

loc_6B401670:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4seekEli+51j
					; _ZN6QGpgME21QIODeviceDataProvider4seekEli+7Bj
		mov	[esp+3Ch+var_3C], 8030h
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t
		mov	edx, 0FFFFFFFFh
		jmp	short loc_6B40163D
; ---------------------------------------------------------------------------

loc_6B401684:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4seekEli+48j
		mov	ecx, edi
		mov	edx, edi
		sar	ecx, 1Fh
		add	edx, [esp+3Ch+var_24]
		adc	ecx, [esp+3Ch+var_20]
		jmp	short loc_6B40161A
; ---------------------------------------------------------------------------

loc_6B401695:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4seekEli+2Cj
		mov	[esp+3Ch+var_3C], 807Eh
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t
		mov	edx, 0FFFFFFFFh
		jmp	short loc_6B40163D
_ZN6QGpgME21QIODeviceDataProvider4seekEli endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. _ZN6QGpgME22QByteArrayDataProvider4seekEli

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProvider4seekEli
_ZN6QGpgME22QByteArrayDataProvider4seekEli proc	near ; DATA XREF: .rdata:6B410A3Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	edx, [esp+1Ch+arg_8]
		mov	ecx, [esp+1Ch+arg_0]
		mov	eax, [esp+1Ch+arg_4]
		cmp	edx, 1
		mov	ebx, [ecx+8]
		jz	short loc_6B401700
		cmp	edx, 2
		jz	short loc_6B4016F7
		test	edx, edx
		jnz	short loc_6B4016E0

loc_6B4016D1:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4seekEli+4Dj
					; _ZN6QGpgME22QByteArrayDataProvider4seekEli+52j
		mov	[ecx+8], eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4016E0:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4seekEli+1Fj
		mov	[esp+1Ch+var_1C], 8030h
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t
		mov	eax, 0FFFFFFFFh
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B4016F7:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4seekEli+1Bj
		mov	edx, [ecx+4]
		add	eax, [edx+8]
		jmp	short loc_6B4016D1
; ---------------------------------------------------------------------------
		align 10h

loc_6B401700:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4seekEli+16j
		add	eax, ebx
		jmp	short loc_6B4016D1
_ZN6QGpgME22QByteArrayDataProvider4seekEli endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. _ZN6QGpgME21QIODeviceDataProvider5writeEPKvj

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProvider5writeEPKvj
_ZN6QGpgME21QIODeviceDataProvider5writeEPKvj proc near ; DATA XREF: .rdata:6B4109F8o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		xor	eax, eax
		mov	edx, [esp+1Ch+arg_8]
		mov	ecx, [esp+1Ch+arg_4]
		test	edx, edx
		jz	short loc_6B401745
		test	ecx, ecx
		jz	short loc_6B401749
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_18], ecx
		mov	eax, [eax+4]
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN9QIODevice5writeEPKcx

loc_6B401745:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider5writeEPKvj+Fj
					; _ZN6QGpgME21QIODeviceDataProvider5writeEPKvj+4Bj
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6B401749:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider5writeEPKvj+13j
		mov	[esp+1Ch+var_1C], 8030h
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6B401745
_ZN6QGpgME21QIODeviceDataProvider5writeEPKvj endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. _ZN6QGpgME21QIODeviceDataProvider4readEPvj

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProvider4readEPvj
_ZN6QGpgME21QIODeviceDataProvider4readEPvj proc	near ; DATA XREF: .rdata:6B4109F4o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], ebx
		xor	ebx, ebx
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_4]
		test	edi, edi
		jz	loc_6B401834
		test	ebp, ebp
		jz	loc_6B40189B
		test	byte ptr [esi+0Ch], 2
		lea	ebx, [esi+4]
		jz	loc_6B401850
		xchg	ax, ax

loc_6B4017A0:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+66j
		mov	eax, [ebx]
		mov	edx, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [edx+50h]
		or	edx, eax
		jnz	loc_6B401850
		mov	eax, [ebx]
		mov	edx, [eax]
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [edx+5Ch]
		test	al, al
		jnz	short loc_6B4017A0
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, ds:_ZN8QProcess16staticMetaObjectE
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		mov	ebx, eax
		jz	loc_6B401897
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZNK8QProcess5errorEv
		cmp	eax, 5
		jz	short loc_6B401874

loc_6B4017F5:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+120j
					; _ZN6QGpgME21QIODeviceDataProvider4readEPvj+131j
		mov	[esp+2Ch+var_2C], 8031h
		mov	ebx, 0FFFFFFFFh
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t

loc_6B401807:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+112j
		call	ds:_ZN5GpgME5Error14hasSystemErrorEv
		test	al, al
		jnz	short loc_6B40182A
		movzx	eax, byte ptr [esi+0Ch]
		test	al, 1
		jnz	short loc_6B40181D
		xor	ebx, ebx
		jmp	short loc_6B40182E
; ---------------------------------------------------------------------------

loc_6B40181D:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+B7j
		mov	[esp+2Ch+var_2C], 8031h
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t

loc_6B40182A:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+AFj
		movzx	eax, byte ptr [esi+0Ch]

loc_6B40182E:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+BBj
		or	eax, 1
		mov	[esi+0Ch], al

loc_6B401834:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+23j
					; _ZN6QGpgME21QIODeviceDataProvider4readEPvj+110j ...
		mov	eax, ebx
		mov	esi, [esp+2Ch+var_C]
		mov	ebx, [esp+2Ch+var_10]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B401850:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+38j
					; _ZN6QGpgME21QIODeviceDataProvider4readEPvj+4Cj
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_28], ebp
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN9QIODevice4readEPcx
		test	edx, edx
		mov	ebx, eax
		jns	short loc_6B401834
		jmp	short loc_6B401807
; ---------------------------------------------------------------------------

loc_6B401874:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+93j
		mov	[esp+2Ch+var_2C], ebx
		call	ds:_ZNK8QProcess10exitStatusEv
		test	eax, eax
		nop
		jnz	loc_6B4017F5
		mov	[esp+2Ch+var_2C], ebx
		call	ds:_ZNK8QProcess8exitCodeEv
		test	eax, eax
		jnz	loc_6B4017F5

loc_6B401897:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+81j
		xor	ebx, ebx
		jmp	short loc_6B401834
; ---------------------------------------------------------------------------

loc_6B40189B:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+2Bj
		mov	[esp+2Ch+var_2C], 8030h
		mov	ebx, 0FFFFFFFFh
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t
		jmp	short loc_6B401834
_ZN6QGpgME21QIODeviceDataProvider4readEPvj endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. _ZN6QGpgME21QIODeviceDataProviderC1ERKN5boost10shared_ptrI9QIODeviceEE

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProviderC1ERKN5boost10shared_ptrI9QIODeviceEE
_ZN6QGpgME21QIODeviceDataProviderC1ERKN5boost10shared_ptrI9QIODeviceEE proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	edx, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		mov	dword ptr [ebx], offset	off_6B4109E8
		mov	[ebx+4], eax
		mov	eax, [edx+4]
		test	eax, eax
		mov	[ebx+8], eax
		jz	short loc_6B4018D5
		lock inc dword ptr [eax+4]

loc_6B4018D5:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProviderC1ERKN5boost10shared_ptrI9QIODeviceEE+1Fj
		and	byte ptr [ebx+0Ch], 0FEh
		mov	eax, [edx]
		mov	[esp+1Ch+var_18], eax
		mov	eax, ds:_ZN8QProcess16staticMetaObjectE
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		movzx	eax, byte ptr [ebx+0Ch]
		setnz	dl
		add	edx, edx
		and	eax, 0FFFFFFFDh
		or	eax, edx
		mov	[ebx+0Ch], al
		add	esp, 18h
		pop	ebx
		retn
_ZN6QGpgME21QIODeviceDataProviderC1ERKN5boost10shared_ptrI9QIODeviceEE endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. _ZN6QGpgME21QIODeviceDataProviderC2ERKN5boost10shared_ptrI9QIODeviceEE

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProviderC2ERKN5boost10shared_ptrI9QIODeviceEE
_ZN6QGpgME21QIODeviceDataProviderC2ERKN5boost10shared_ptrI9QIODeviceEE proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	edx, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		mov	dword ptr [ebx], offset	off_6B4109E8
		mov	[ebx+4], eax
		mov	eax, [edx+4]
		test	eax, eax
		mov	[ebx+8], eax
		jz	short loc_6B401935
		lock inc dword ptr [eax+4]

loc_6B401935:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProviderC2ERKN5boost10shared_ptrI9QIODeviceEE+1Fj
		and	byte ptr [ebx+0Ch], 0FEh
		mov	eax, [edx]
		mov	[esp+1Ch+var_18], eax
		mov	eax, ds:_ZN8QProcess16staticMetaObjectE
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		movzx	eax, byte ptr [ebx+0Ch]
		setnz	dl
		add	edx, edx
		and	eax, 0FFFFFFFDh
		or	eax, edx
		mov	[ebx+0Ch], al
		add	esp, 18h
		pop	ebx
		retn
_ZN6QGpgME21QIODeviceDataProviderC2ERKN5boost10shared_ptrI9QIODeviceEE endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE

; =============== S U B	R O U T	I N E =======================================


		public _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE
_ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE proc near
					; DATA XREF: .rdata:6B4109F0o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_4], edi
		mov	edi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, 1
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [edi+4]
		mov	[esp+1Ch+var_18], eax
		mov	eax, ds:_ZN8QProcess16staticMetaObjectE
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZNK11QMetaObject4castEP7QObject
		test	eax, eax
		jz	short loc_6B4019B3
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZNK8QProcess11readChannelEv
		test	eax, eax
		setz	bl

loc_6B4019B3:				; CODE XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+33j
		cmp	esi, 1
		jz	short loc_6B4019F2
		jle	short loc_6B401A10
		cmp	esi, 2
		lea	esi, [esi+0]
		jz	short loc_6B4019E0
		cmp	esi, 3
		mov	ebx, 1
		jz	short loc_6B4019CE

loc_6B4019CC:				; CODE XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+A2j
					; _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+B4j
		xor	ebx, ebx

loc_6B4019CE:				; CODE XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+5Aj
					; _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+80j	...
		mov	eax, ebx
		mov	esi, [esp+1Ch+var_8]
		mov	ebx, [esp+1Ch+var_C]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6B4019E0:				; CODE XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+50j
		mov	eax, [edi+4]
		mov	edx, [eax]
		mov	[esp+1Ch+var_1C], eax
		call	dword ptr [edx+30h]
		mov	ebx, eax
		xor	ebx, 1
		jmp	short loc_6B4019CE
; ---------------------------------------------------------------------------

loc_6B4019F2:				; CODE XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+46j
		mov	eax, [edi+4]
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		mov	[esp+1Ch+arg_0], eax
		mov	eax, ds:_ZNK9QIODevice10isWritableEv
		add	esp, 1Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6B401A10:				; CODE XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+48j
		test	esi, esi
		jnz	short loc_6B4019CC
		mov	eax, [edi+4]
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZNK9QIODevice10isReadableEv
		test	al, al
		jnz	short loc_6B4019CE
		jmp	short loc_6B4019CC
_ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. _ZN6QGpgME22QByteArrayDataProvider7releaseEv

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProvider7releaseEv
_ZN6QGpgME22QByteArrayDataProvider7releaseEv proc near ; DATA XREF: .rdata:6B410A40o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, ds:_ZN10QByteArray11shared_nullE
		mov	[esp+2Ch+var_10], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		add	eax, 4
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN10QByteArrayaSERKS_
		mov	eax, [esp+2Ch+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6B401A75
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_Z5qFreePv

loc_6B401A75:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider7releaseEv+36j
		add	esp, 2Ch
		retn
_ZN6QGpgME22QByteArrayDataProvider7releaseEv endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. _ZN6QGpgME22QByteArrayDataProviderD0Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProviderD0Ev
_ZN6QGpgME22QByteArrayDataProviderD0Ev proc near ; DATA	XREF: .rdata:6B410A2Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6B410A28
		mov	eax, [ebx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6B401AA7
		mov	eax, [ebx+4]
		mov	[esp+1Ch+var_1C], eax
		call	ds:_Z5qFreePv

loc_6B401AA7:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProviderD0Ev+19j
		mov	eax, ds:_ZTVN5GpgME12DataProviderE
		add	eax, 8
		mov	[ebx], eax
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_6B4086A0
_ZN6QGpgME22QByteArrayDataProviderD0Ev endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. _ZN6QGpgME22QByteArrayDataProviderD1Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProviderD1Ev
_ZN6QGpgME22QByteArrayDataProviderD1Ev proc near ; DATA	XREF: .rdata:off_6B410A28o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6B410A28
		mov	eax, [ebx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6B401AE7
		mov	eax, [ebx+4]
		mov	[esp+1Ch+var_1C], eax
		call	ds:_Z5qFreePv

loc_6B401AE7:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProviderD1Ev+19j
		mov	eax, ds:_ZTVN5GpgME12DataProviderE
		add	eax, 8
		mov	[ebx], eax
		add	esp, 18h
		pop	ebx
		retn
_ZN6QGpgME22QByteArrayDataProviderD1Ev endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. _ZN6QGpgME22QByteArrayDataProviderD2Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME22QByteArrayDataProviderD2Ev
_ZN6QGpgME22QByteArrayDataProviderD2Ev proc near

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6B410A28
		mov	eax, [ebx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_6B401B27
		mov	eax, [ebx+4]
		mov	[esp+1Ch+var_1C], eax
		call	ds:_Z5qFreePv

loc_6B401B27:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProviderD2Ev+19j
		mov	eax, ds:_ZTVN5GpgME12DataProviderE
		add	eax, 8
		mov	[ebx], eax
		add	esp, 18h
		pop	ebx
		retn
_ZN6QGpgME22QByteArrayDataProviderD2Ev endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ZN6QGpgME22QByteArrayDataProvider5writeEPKvj(int,	void *,	size_t)
		public _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj
_ZN6QGpgME22QByteArrayDataProvider5writeEPKvj proc near	; DATA XREF: .rdata:6B410A38o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 3Ch
		xor	eax, eax
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_8], edi
		mov	edi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], ebp
		test	esi, esi
		jz	short loc_6B401BB5
		test	edi, edi
		jz	loc_6B401C7B
		mov	eax, [ebx+4]
		mov	ecx, [ebx+8]
		mov	ebp, [eax+8]
		cmp	ecx, ebp
		mov	edx, ebp
		jge	short loc_6B401BD0

loc_6B401B7C:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+BCj
		mov	ecx, [eax]
		cmp	ecx, 1
		jz	loc_6B401C16

loc_6B401B87:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+DCj
		lea	eax, [ebx+4]
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_38], edx
		call	ds:_ZN10QByteArray7reallocEi
		mov	eax, [ebx+4]

loc_6B401B9A:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+E2j
		mov	eax, [eax+0Ch]
		add	eax, [ebx+8]
		mov	[esp+3Ch+var_34], esi ;	size_t
		mov	[esp+3Ch+var_38], edi ;	void *
		mov	[esp+3Ch+var_3C], eax ;	void *
		call	memcpy
		mov	eax, esi
		add	[ebx+8], esi

loc_6B401BB5:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+23j
					; _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+D4j ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B401BD0:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+3Aj
		lea	ecx, [esi+ecx]
		lea	eax, [ebx+4]
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_28], ecx
		call	ds:_ZN10QByteArray6resizeEi
		mov	eax, [ebx+4]
		mov	ecx, [esp+3Ch+var_28]
		mov	edx, [eax+8]
		cmp	ecx, edx
		jz	short loc_6B401C27

loc_6B401BF9:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+12Dj
		cmp	[ebx+8], edx
		jl	loc_6B401B7C
		mov	[esp+3Ch+var_3C], 8031h
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6B401BB5
; ---------------------------------------------------------------------------

loc_6B401C16:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+41j
		lea	ecx, [eax+10h]
		cmp	[eax+0Ch], ecx
		jnz	loc_6B401B87
		jmp	loc_6B401B9A
; ---------------------------------------------------------------------------

loc_6B401C27:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+B7j
		mov	ecx, edx
		sub	ecx, ebp
		mov	[esp+3Ch+var_20], ecx
		mov	ecx, [eax]
		cmp	ecx, 1
		jz	short loc_6B401C6F

loc_6B401C36:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+137j
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	ds:_ZN10QByteArray7reallocEi
		mov	eax, [ebx+4]
		mov	ecx, [eax+0Ch]

loc_6B401C4D:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+139j
		mov	eax, [esp+3Ch+var_20]
		add	ecx, ebp
		mov	[esp+3Ch+var_38], 0 ; int
		mov	[esp+3Ch+var_3C], ecx ;	void *
		mov	[esp+3Ch+var_34], eax ;	size_t
		call	memset
		mov	eax, [ebx+4]
		mov	edx, [eax+8]
		jmp	short loc_6B401BF9
; ---------------------------------------------------------------------------

loc_6B401C6F:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+F4j
		mov	ecx, [eax+0Ch]
		add	eax, 10h
		cmp	ecx, eax
		jnz	short loc_6B401C36
		jmp	short loc_6B401C4D
; ---------------------------------------------------------------------------

loc_6B401C7B:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+27j
		mov	[esp+3Ch+var_3C], 8030h
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t
		mov	eax, 0FFFFFFFFh
		lea	esi, [esi+0]
		jmp	loc_6B401BB5
_ZN6QGpgME22QByteArrayDataProvider5writeEPKvj endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. _ZN6QGpgME22QByteArrayDataProvider4readEPvj

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ZN6QGpgME22QByteArrayDataProvider4readEPvj(int, void *, size_t)
		public _ZN6QGpgME22QByteArrayDataProvider4readEPvj
_ZN6QGpgME22QByteArrayDataProvider4readEPvj proc near ;	DATA XREF: .rdata:6B410A34o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_4], ebp
		test	esi, esi
		jz	short loc_6B401D17
		test	edi, edi
		jz	short loc_6B401D45
		mov	ecx, [ebx+4]
		mov	eax, [ebx+8]
		mov	edx, [ecx+8]
		cmp	eax, edx
		jge	short loc_6B401D17
		mov	ebp, edx
		sub	ebp, eax
		cmp	esi, ebp
		ja	short loc_6B401D30
		mov	ebp, [ecx]
		cmp	ebp, 1
		jz	short loc_6B401D39

loc_6B401CE3:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4readEPvj+97j
					; _ZN6QGpgME22QByteArrayDataProvider4readEPvj+A1j
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN10QByteArray7reallocEi
		mov	edx, [ebx+4]
		mov	eax, [ebx+8]
		mov	ebp, [edx+0Ch]

loc_6B401CFC:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4readEPvj+A3j
		lea	eax, [ebp+eax+0]
		mov	[esp+2Ch+var_24], esi ;	size_t
		mov	[esp+2Ch+var_28], eax ;	void *
		mov	[esp+2Ch+var_2C], edi ;	void *
		call	memcpy
		mov	eax, esi
		add	[ebx+8], esi
		jmp	short loc_6B401D19
; ---------------------------------------------------------------------------

loc_6B401D17:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4readEPvj+21j
					; _ZN6QGpgME22QByteArrayDataProvider4readEPvj+32j
		xor	eax, eax

loc_6B401D19:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4readEPvj+75j
					; _ZN6QGpgME22QByteArrayDataProvider4readEPvj+B7j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B401D30:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4readEPvj+3Aj
		mov	esi, ebp
		mov	ebp, [ecx]
		cmp	ebp, 1
		jnz	short loc_6B401CE3

loc_6B401D39:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4readEPvj+41j
		mov	ebp, [ecx+0Ch]
		add	ecx, 10h
		cmp	ebp, ecx
		jnz	short loc_6B401CE3
		jmp	short loc_6B401CFC
; ---------------------------------------------------------------------------

loc_6B401D45:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider4readEPvj+25j
		mov	[esp+2Ch+var_2C], 8030h
		call	ds:_ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6B401D19
_ZN6QGpgME22QByteArrayDataProvider4readEPvj endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. _ZN6QGpgME21QIODeviceDataProviderD0Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProviderD0Ev
_ZN6QGpgME21QIODeviceDataProviderD0Ev proc near	; DATA XREF: .rdata:6B4109ECo

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], ebx
		mov	[esp+1Ch+var_4], edi
		mov	ebx, [esi+8]
		mov	dword ptr [esi], offset	off_6B4109E8
		test	ebx, ebx
		jz	short loc_6B401D91
		mov	edi, 0FFFFFFFFh
		mov	eax, edi
		lock xadd [ebx+4], eax
		cmp	eax, 1
		jz	short loc_6B401DB3

loc_6B401D91:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProviderD0Ev+1Ej
					; _ZN6QGpgME21QIODeviceDataProviderD0Ev+63j ...
		mov	eax, ds:_ZTVN5GpgME12DataProviderE
		add	eax, 8
		mov	[esi], eax
		mov	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+arg_0], esi
		mov	edi, [esp+1Ch+var_4]
		mov	esi, [esp+1Ch+var_8]
		add	esp, 1Ch
		jmp	loc_6B4086A0
; ---------------------------------------------------------------------------

loc_6B401DB3:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProviderD0Ev+2Fj
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], ebx
		call	dword ptr [eax+8]
		lock xadd [ebx+8], edi
		cmp	edi, 1
		jnz	short loc_6B401D91
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], ebx
		call	dword ptr [eax+0Ch]
		lea	esi, [esi+0]
		jmp	short loc_6B401D91
_ZN6QGpgME21QIODeviceDataProviderD0Ev endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. _ZN6QGpgME21QIODeviceDataProviderD1Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN6QGpgME21QIODeviceDataProviderD1Ev
_ZN6QGpgME21QIODeviceDataProviderD1Ev proc near	; DATA XREF: .rdata:off_6B4109E8o

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], ebx
		mov	[esp+1Ch+var_4], edi
		mov	ebx, [esi+8]
		mov	dword ptr [esi], offset	off_6B4109E8
		test	ebx, ebx
		jz	short loc_6B401E11
		mov	edi, 0FFFFFFFFh
		mov	eax, edi
		lock xadd [ebx+4], eax
		cmp	eax, 1
		jz	short loc_6B401E30

loc_6B401E11:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProviderD1Ev+1Ej
					; _ZN6QGpgME21QIODeviceDataProviderD1Ev+60j ...
		mov	eax, ds:_ZTVN5GpgME12DataProviderE
		add	eax, 8
		mov	[esi], eax
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B401E30:				; CODE XREF: _ZN6QGpgME21QIODeviceDataProviderD1Ev+2Fj
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], ebx
		call	dword ptr [eax+8]
		lock xadd [ebx+8], edi
		cmp	edi, 1
		jnz	short loc_6B401E11
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], ebx
		call	dword ptr [eax+0Ch]
		jmp	short loc_6B401E11
_ZN6QGpgME21QIODeviceDataProviderD1Ev endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B401E50	proc near		; CODE XREF: sub_6B401FF0+3Ap
					; sub_6B4024A0+1AAp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	edx, 3Ch	; switch 61 cases
		mov	[esp+0Ch+var_4], edi
		mov	edi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], esi
		jbe	short loc_6B401E80

loc_6B401E67:				; CODE XREF: sub_6B401E50:loc_6B401E80j
					; sub_6B401E50+39j ...
		xor	ebx, ebx	; jumptable 6B401E80 default case

loc_6B401E69:				; CODE XREF: sub_6B401E50+54j
					; sub_6B401E50+5Ej
		mov	eax, ebx
		mov	esi, [esp+0Ch+var_8]
		mov	ebx, [esp+0Ch+var_C]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B401E80:				; CODE XREF: sub_6B401E50+15j
		jmp	ds:off_6B40F180[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6B401E87:				; CODE XREF: sub_6B401E50:loc_6B401E80j
					; DATA XREF: .rdata:off_6B40F180o
		test	edi, edi	; jumptable 6B401E80 case 38
		jz	short loc_6B401E67 ; jumptable 6B401E80	default	case

loc_6B401E8B:				; CODE XREF: sub_6B401E50:loc_6B401E80j
					; DATA XREF: .rdata:off_6B40F180o
		mov	esi, [eax+14h]	; jumptable 6B401E80 cases 23-28,37,41,42
		cmp	esi, [eax+18h]
		jge	short loc_6B401E67 ; jumptable 6B401E80	default	case

loc_6B401E93:				; CODE XREF: sub_6B401E50+72j
		lea	ebx, [esi+esi*2]
		add	esi, 1
		shl	ebx, 2
		add	ebx, [eax+10h]
		mov	[eax+14h], esi
		test	ebx, ebx
		jz	short loc_6B401E69
		mov	[ebx], edx
		mov	[ebx+4], ecx
		mov	[ebx+8], edi
		jmp	short loc_6B401E69
; ---------------------------------------------------------------------------

loc_6B401EB0:				; CODE XREF: sub_6B401E50:loc_6B401E80j
					; DATA XREF: .rdata:off_6B40F180o
		test	edi, edi	; jumptable 6B401E80 cases 1-4,11,29,39,46-53,55
		jz	short loc_6B401E67 ; jumptable 6B401E80	default	case

loc_6B401EB4:				; CODE XREF: sub_6B401E50:loc_6B401E80j
					; DATA XREF: .rdata:off_6B40F180o
		test	ecx, ecx	; jumptable 6B401E80 cases 9,10,12-21,30-34,36,45,54,57-60
		jz	short loc_6B401E67 ; jumptable 6B401E80	default	case
		mov	esi, [eax+14h]
		cmp	esi, [eax+18h]
		xchg	ax, ax
		jge	short loc_6B401E67 ; jumptable 6B401E80	default	case
		jmp	short loc_6B401E93
sub_6B401E50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B401ED0	proc near		; CODE XREF: sub_6B4023D0+6Fp
					; sub_6B4023D0+B9p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 8
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	esi, [eax+14h]
		cmp	esi, [eax+18h]
		jge	short loc_6B401EF5
		lea	ebx, [esi+esi*2]
		add	esi, 1
		shl	ebx, 2
		add	ebx, [eax+10h]
		mov	[eax+14h], esi
		test	ebx, ebx
		jnz	short loc_6B401F04

loc_6B401EF5:				; CODE XREF: sub_6B401ED0+10j
					; sub_6B401ED0+36j ...
		xor	ebx, ebx
		mov	esi, [esp+8+var_4]
		mov	eax, ebx
		mov	ebx, [esp+8+var_8]
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_6B401F04:				; CODE XREF: sub_6B401ED0+23j
		test	edx, edx
		jz	short loc_6B401EF5
		test	ecx, ecx
		jz	short loc_6B401EF5
		mov	dword ptr [ebx], 0
		mov	eax, ebx
		mov	[ebx+4], edx
		mov	[ebx+8], ecx
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		add	esp, 8
		retn
sub_6B401ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B401F30	proc near		; CODE XREF: sub_6B401F90+2Ap
					; sub_6B401F90+3Fp ...
		push	edi
		xor	edi, edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	eax, [eax+0Ch]
		movzx	ecx, byte ptr [eax]
		cmp	cl, 6Eh
		jz	short loc_6B401F75

loc_6B401F42:				; CODE XREF: sub_6B401F30+53j
		lea	eax, [ecx-30h]
		cmp	al, 9
		ja	short loc_6B401F85
		mov	edx, [esi+0Ch]
		xor	eax, eax
		xchg	ax, ax

loc_6B401F50:				; CODE XREF: sub_6B401F30+39j
		add	edx, 1
		movsx	ecx, cl
		lea	eax, [eax+eax*4]
		lea	eax, [ecx+eax*2-30h]
		mov	[esi+0Ch], edx
		movzx	ecx, byte ptr [edx]
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		jbe	short loc_6B401F50

loc_6B401F6B:				; CODE XREF: sub_6B401F30+57j
		test	edi, edi
		jz	short loc_6B401F71
		neg	eax

loc_6B401F71:				; CODE XREF: sub_6B401F30+3Dj
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6B401F75:				; CODE XREF: sub_6B401F30+10j
		lea	edx, [eax+1]
		mov	di, 1
		mov	[esi+0Ch], edx
		movzx	ecx, byte ptr [eax+1]
		jmp	short loc_6B401F42
; ---------------------------------------------------------------------------

loc_6B401F85:				; CODE XREF: sub_6B401F30+17j
		xor	eax, eax
		jmp	short loc_6B401F6B
sub_6B401F30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B401F90	proc near		; CODE XREF: sub_6B403880+1D7p
					; sub_6B403880+212p ...
		test	edx, edx
		push	ebx
		mov	ebx, eax
		jnz	short loc_6B401FAA
		mov	eax, [eax+0Ch]
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jz	short loc_6B401FB4
		add	eax, 1
		movsx	edx, dl
		mov	[ebx+0Ch], eax

loc_6B401FAA:				; CODE XREF: sub_6B401F90+5j
		cmp	edx, 68h
		jz	short loc_6B401FCD
		cmp	edx, 76h
		jz	short loc_6B401FB8

loc_6B401FB4:				; CODE XREF: sub_6B401F90+Fj
					; sub_6B401F90+35j ...
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B401FB8:				; CODE XREF: sub_6B401F90+22j
		mov	eax, ebx
		call	sub_6B401F30
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	short loc_6B401FB4
		add	eax, 1
		mov	[ebx+0Ch], eax

loc_6B401FCD:				; CODE XREF: sub_6B401F90+1Dj
		mov	eax, ebx
		call	sub_6B401F30
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	short loc_6B401FB4
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, 1
		pop	ebx
		retn
sub_6B401F90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B401FF0	proc near		; CODE XREF: sub_6B4027E0+5Ap
					; sub_6B4027E0+31Fp ...

var_10		= dword	ptr -10h

		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4
		mov	eax, [eax+0Ch]
		movzx	eax, byte ptr [eax]
		jmp	short loc_6B40203E
; ---------------------------------------------------------------------------

loc_6B402004:				; CODE XREF: sub_6B401FF0+58j
		test	dl, dl
		jnz	short loc_6B40204A
		cmp	al, 4Bh
		jnz	short loc_6B402065
		add	dword ptr [ebx+0Ch], 1

loc_6B402010:				; CODE XREF: sub_6B401FF0+80j
		cmp	edi, 1
		sbb	edx, edx
		add	dword ptr [ebx+30h], 6
		and	edx, 0FFFFFFFDh
		add	edx, 1Ch

loc_6B40201F:				; CODE XREF: sub_6B401FF0+71j
					; sub_6B401FF0+91j
		xor	ecx, ecx
		mov	eax, ebx
		mov	[esp+10h+var_10], 0
		call	sub_6B401E50
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6B402063
		lea	esi, [eax+4]
		mov	eax, [ebx+0Ch]
		movzx	eax, byte ptr [eax]

loc_6B40203E:				; CODE XREF: sub_6B401FF0+12j
		cmp	al, 72h
		setz	dl
		cmp	al, 56h
		setz	cl
		jnz	short loc_6B402004

loc_6B40204A:				; CODE XREF: sub_6B401FF0+16j
		add	dword ptr [ebx+0Ch], 1
		test	dl, dl
		jz	short loc_6B40206E
		cmp	edi, 1
		sbb	edx, edx
		and	edx, 0FFFFFFFDh
		add	edx, 1Ah
		add	dword ptr [ebx+30h], 9
		jmp	short loc_6B40201F
; ---------------------------------------------------------------------------

loc_6B402063:				; CODE XREF: sub_6B401FF0+43j
		xor	esi, esi

loc_6B402065:				; CODE XREF: sub_6B401FF0+1Aj
		add	esp, 4
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6B40206E:				; CODE XREF: sub_6B401FF0+60j
		test	cl, cl
		jz	short loc_6B402010
		cmp	edi, 1
		sbb	edx, edx
		and	edx, 0FFFFFFFDh
		add	edx, 1Bh
		add	dword ptr [ebx+30h], 9
		jmp	short loc_6B40201F
sub_6B401FF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B402090	proc near		; CODE XREF: sub_6B4024A0+1CBj
					; sub_6B4027E0+219p ...
		push	ebx
		mov	ebx, eax
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	54h
		jz	short loc_6B4020A0

loc_6B40209B:				; CODE XREF: sub_6B402090+27j
					; sub_6B402090+2Fj ...
		xor	eax, eax

loc_6B40209D:				; CODE XREF: sub_6B402090+57j
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4020A0:				; CODE XREF: sub_6B402090+9j
		lea	edx, [eax+1]
		xor	ecx, ecx
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+1], 5Fh
		jz	short loc_6B4020C4
		mov	eax, ebx
		call	sub_6B401F30
		test	eax, eax
		js	short loc_6B40209B
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	5Fh
		jnz	short loc_6B40209B
		lea	ecx, [eax+1]

loc_6B4020C4:				; CODE XREF: sub_6B402090+1Cj
		add	edx, 1
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		add	dword ptr [ebx+28h], 1
		cmp	edx, [ebx+18h]
		jge	short loc_6B40209B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	short loc_6B40209D
		mov	dword ptr [eax], 5
		mov	[eax+4], ecx
		pop	ebx
		retn
sub_6B402090	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B402100	proc near		; CODE XREF: sub_6B4027E0+1DFp
					; sub_6B403570+9Dp ...
		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [eax+0Ch]
		cmp	byte ptr [ebx],	53h
		jz	short loc_6B402115

loc_6B40210C:				; CODE XREF: sub_6B402100+50j
					; sub_6B402100+74j ...
		xor	edx, edx

loc_6B40210E:				; CODE XREF: sub_6B402100+161j
					; sub_6B402100+173j
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B402115:				; CODE XREF: sub_6B402100+Aj
		lea	ecx, [ebx+1]
		mov	[eax+0Ch], ecx
		movzx	ecx, byte ptr [ebx+1]
		test	cl, cl
		jnz	short loc_6B402176

loc_6B402123:				; CODE XREF: sub_6B402100+19Aj
		mov	ebx, [eax+8]
		shr	ebx, 3
		and	ebx, 1
		test	edx, edx
		jz	short loc_6B402145
		test	ebx, ebx
		jnz	short loc_6B402145
		mov	edx, [eax+0Ch]
		xor	ebx, ebx
		movzx	edx, byte ptr [edx]
		sub	edx, 43h
		cmp	dl, 1
		setbe	bl

loc_6B402145:				; CODE XREF: sub_6B402100+2Ej
					; sub_6B402100+32j
		mov	edx, offset dword_6B410084
		cmp	edx, offset aT	; "t"
		jbe	short loc_6B40210C
		cmp	cl, 74h
		mov	edx, offset aT	; "t"
		jnz	short loc_6B402169
		jmp	loc_6B402201
; ---------------------------------------------------------------------------

loc_6B402161:				; CODE XREF: sub_6B402100+72j
		cmp	cl, [edx]
		jz	loc_6B402201

loc_6B402169:				; CODE XREF: sub_6B402100+5Aj
		add	edx, 1Ch
		cmp	edx, offset dword_6B410084
		jnz	short loc_6B402161
		jmp	short loc_6B40210C
; ---------------------------------------------------------------------------

loc_6B402176:				; CODE XREF: sub_6B402100+21j
		add	ebx, 2
		mov	[eax+0Ch], ebx
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		ja	loc_6B402285
		cmp	cl, 5Fh
		jz	short loc_6B4021FD

loc_6B40218D:				; CODE XREF: sub_6B402100+194j
		lea	ebx, [ecx-30h]
		xor	edx, edx
		cmp	bl, 9
		ja	short loc_6B4021C8

loc_6B402197:				; CODE XREF: sub_6B402100+C6j
		lea	ebx, [edx+edx*8]
		movsx	ecx, cl
		lea	ebx, [ecx+ebx*4-30h]

loc_6B4021A1:				; CODE XREF: sub_6B402100+DEj
		cmp	edx, ebx
		ja	loc_6B40210C
		mov	edx, [eax+0Ch]
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_6B4021BE
		add	edx, 1
		cmp	cl, 5Fh
		mov	[eax+0Ch], edx
		jz	short loc_6B4021E0

loc_6B4021BE:				; CODE XREF: sub_6B402100+B1j
		mov	edx, ebx
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		jbe	short loc_6B402197

loc_6B4021C8:				; CODE XREF: sub_6B402100+95j
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		ja	loc_6B40210C
		lea	ebx, [edx+edx*8]
		movsx	ecx, cl
		lea	ebx, [ecx+ebx*4-37h]
		jmp	short loc_6B4021A1
; ---------------------------------------------------------------------------

loc_6B4021E0:				; CODE XREF: sub_6B402100+BCj
		add	ebx, 1

loc_6B4021E3:				; CODE XREF: sub_6B402100+FFj
		cmp	ebx, [eax+20h]
		jnb	loc_6B40210C
		add	dword ptr [eax+28h], 1
		mov	eax, [eax+1Ch]
		mov	edx, [eax+ebx*4]
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, edx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B4021FD:				; CODE XREF: sub_6B402100+8Bj
					; sub_6B402100+188j
		xor	ebx, ebx
		jmp	short loc_6B4021E3
; ---------------------------------------------------------------------------

loc_6B402201:				; CODE XREF: sub_6B402100+5Cj
					; sub_6B402100+63j
		mov	edi, [edx+14h]
		test	edi, edi
		jz	short loc_6B402280
		mov	ecx, [eax+14h]
		xor	esi, esi
		cmp	ecx, [eax+18h]
		mov	ebp, [edx+18h]
		jge	short loc_6B402237
		lea	esi, [ecx+ecx*2]
		add	ecx, 1
		shl	esi, 2
		add	esi, [eax+10h]
		mov	[eax+14h], ecx
		test	esi, esi
		jz	short loc_6B402237
		mov	[esi+4], edi
		mov	[esi+8], ebp
		mov	ecx, [eax+14h]
		mov	dword ptr [esi], 16h

loc_6B402237:				; CODE XREF: sub_6B402100+113j
					; sub_6B402100+126j
		mov	[eax+2Ch], esi

loc_6B40223A:				; CODE XREF: sub_6B402100+183j
		test	ebx, ebx
		jz	short loc_6B402278
		mov	esi, [edx+0Ch]
		mov	ebx, [edx+10h]

loc_6B402244:				; CODE XREF: sub_6B402100+17Ej
		add	[eax+30h], ebx
		cmp	ecx, [eax+18h]
		jge	loc_6B40210C
		lea	edx, [ecx+ecx*2]
		add	ecx, 1
		shl	edx, 2
		add	edx, [eax+10h]
		mov	[eax+14h], ecx
		test	edx, edx
		jz	loc_6B40210E
		mov	dword ptr [edx], 16h
		mov	[edx+4], esi
		mov	[edx+8], ebx
		jmp	loc_6B40210E
; ---------------------------------------------------------------------------

loc_6B402278:				; CODE XREF: sub_6B402100+13Cj
		mov	esi, [edx+4]
		mov	ebx, [edx+8]
		jmp	short loc_6B402244
; ---------------------------------------------------------------------------

loc_6B402280:				; CODE XREF: sub_6B402100+106j
		mov	ecx, [eax+14h]
		jmp	short loc_6B40223A
; ---------------------------------------------------------------------------

loc_6B402285:				; CODE XREF: sub_6B402100+82j
		cmp	cl, 5Fh
		jz	loc_6B4021FD
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		jbe	loc_6B40218D
		jmp	loc_6B402123
sub_6B402100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4022A0	proc near		; CODE XREF: sub_6B4043D0+120p
					; sub_6B404830+CBp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, edx
		sub	esp, 28h
		mov	ecx, [eax+104h]
		cmp	ecx, 0FFh
		lea	edx, [ecx+1]
		jz	short loc_6B4022D0

loc_6B4022B7:				; CODE XREF: sub_6B4022A0+75j
		mov	[eax+ecx+4], bl
		mov	[eax+104h], edx
		mov	[eax+108h], bl
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4022D0:				; CODE XREF: sub_6B4022A0+15j
		mov	edx, [eax+110h]
		mov	byte ptr [eax+103h], 0
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], edx
		lea	edx, [eax+4]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+10Ch]
		mov	eax, [esp+2Ch+var_10]
		mov	edx, 1
		xor	ecx, ecx
		mov	dword ptr [eax+104h], 0
		add	dword ptr [eax+124h], 1
		jmp	short loc_6B4022B7
sub_6B4022A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B402320	proc near		; CODE XREF: sub_6B402320+17p
					; sub_6B404830+FDp
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 4
		test	edx, edx
		jz	short loc_6B402347 ; jumptable 6B402352	cases 0,6,22,35,43,56,60

loc_6B40232D:				; CODE XREF: sub_6B402320+25j
		cmp	dword ptr [ebx], 3Ch ; switch 61 cases
		jbe	short loc_6B402350

loc_6B402332:				; CODE XREF: sub_6B402320+32j
					; DATA XREF: .rdata:off_6B40F274o
		mov	edx, [ebx+4]	; jumptable 6B402352 default case
		mov	eax, esi
		call	sub_6B402320
		test	eax, eax
		jnz	short loc_6B402349

loc_6B402340:				; CODE XREF: sub_6B402320+32j
					; DATA XREF: .rdata:off_6B40F274o
		mov	ebx, [ebx+8]	; jumptable 6B402352 cases 7,8,44
		test	ebx, ebx
		jnz	short loc_6B40232D

loc_6B402347:				; CODE XREF: sub_6B402320+Bj
					; sub_6B402320+32j ...
		xor	eax, eax	; jumptable 6B402352 cases 0,6,22,35,43,56,60

loc_6B402349:				; CODE XREF: sub_6B402320+1Ej
					; sub_6B402320+87j ...
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B402350:				; CODE XREF: sub_6B402320+10j
		mov	eax, [ebx]
		jmp	ds:off_6B40F274[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6B402360:				; CODE XREF: sub_6B402320+32j
					; DATA XREF: .rdata:off_6B40F274o
		mov	eax, [esi+114h]	; jumptable 6B402352 case 5
		test	eax, eax
		jz	short loc_6B4023B2
		mov	eax, [eax+4]
		mov	edx, [ebx+4]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6B40238E
		jmp	short loc_6B402347 ; jumptable 6B402352	cases 0,6,22,35,43,56,60
; ---------------------------------------------------------------------------
		align 10h

loc_6B402380:				; CODE XREF: sub_6B402320+71j
		test	edx, edx
		jle	short loc_6B402395
		mov	eax, [eax+8]
		sub	edx, 1
		test	eax, eax
		jz	short loc_6B402347 ; jumptable 6B402352	cases 0,6,22,35,43,56,60

loc_6B40238E:				; CODE XREF: sub_6B402320+55j
		cmp	dword ptr [eax], 2Ah
		jz	short loc_6B402380
		jmp	short loc_6B402347 ; jumptable 6B402352	cases 0,6,22,35,43,56,60
; ---------------------------------------------------------------------------

loc_6B402395:				; CODE XREF: sub_6B402320+62j
		test	eax, eax
		jz	short loc_6B402347 ; jumptable 6B402352	cases 0,6,22,35,43,56,60
		test	edx, edx
		nop
		lea	esi, [esi+0]
		jnz	short loc_6B402347 ; jumptable 6B402352	cases 0,6,22,35,43,56,60
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6B402349
		cmp	dword ptr [eax], 2Ah
		jnz	short loc_6B402347 ; jumptable 6B402352	cases 0,6,22,35,43,56,60
		xchg	ax, ax
		jmp	short loc_6B402349
; ---------------------------------------------------------------------------

loc_6B4023B2:				; CODE XREF: sub_6B402320+48j
		mov	dword ptr [esi+11Ch], 1
		lea	esi, [esi+0]
		jmp	short loc_6B402349
sub_6B402320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4023D0	proc near		; CODE XREF: sub_6B4027E0+278p
					; sub_6B4027E0+2E0p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 10h
		mov	[esp+10h+var_10], ebx
		mov	ebx, eax
		mov	[esp+10h+var_C], esi
		mov	[esp+10h+var_8], edi
		mov	[esp+10h+var_4], ebp
		call	sub_6B401F30
		xor	ecx, ecx
		test	eax, eax
		jle	short loc_6B402449
		mov	ebp, [ebx+0Ch]
		mov	esi, [ebx+4]
		sub	esi, ebp
		cmp	eax, esi
		jg	short loc_6B402446
		test	byte ptr [ebx+8], 4
		lea	ecx, [ebp+eax+0]
		mov	[ebx+0Ch], ecx
		jz	short loc_6B40240D
		cmp	byte ptr [ecx],	24h
		jz	short loc_6B402460

loc_6B40240D:				; CODE XREF: sub_6B4023D0+36j
					; sub_6B4023D0+96j
		cmp	eax, 9
		jle	short loc_6B402439
		mov	edi, offset a_global_ ;	"_GLOBAL_"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_6B402439
		movzx	ecx, byte ptr [ebp+8]
		lea	esi, [ebp+8]
		cmp	cl, 5Fh
		jz	short loc_6B402433
		cmp	cl, 2Eh
		jnz	short loc_6B402468

loc_6B402433:				; CODE XREF: sub_6B4023D0+5Cj
					; sub_6B4023D0+A0j
		cmp	byte ptr [esi+1], 4Eh
		jz	short loc_6B402472

loc_6B402439:				; CODE XREF: sub_6B4023D0+40j
					; sub_6B4023D0+50j ...
		mov	ecx, eax
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6B401ED0
		mov	ecx, eax

loc_6B402446:				; CODE XREF: sub_6B4023D0+29j
					; sub_6B4023D0+C0j
		mov	[ebx+2Ch], ecx

loc_6B402449:				; CODE XREF: sub_6B4023D0+1Dj
		mov	eax, ecx
		mov	ebx, [esp+10h+var_10]
		mov	esi, [esp+10h+var_C]
		mov	edi, [esp+10h+var_8]
		mov	ebp, [esp+10h+var_4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B402460:				; CODE XREF: sub_6B4023D0+3Bj
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		jmp	short loc_6B40240D
; ---------------------------------------------------------------------------

loc_6B402468:				; CODE XREF: sub_6B4023D0+61j
		cmp	cl, 24h
		jnz	short loc_6B402439
		lea	esi, [esi+0]
		jmp	short loc_6B402433
; ---------------------------------------------------------------------------

loc_6B402472:				; CODE XREF: sub_6B4023D0+67j
		mov	edx, [ebx+30h]
		mov	ecx, 15h
		add	edx, 16h
		sub	edx, eax
		mov	eax, ebx
		mov	[ebx+30h], edx
		mov	edx, offset aAnonymousNames ; "(anonymous namespace)"
		call	sub_6B401ED0
		mov	ecx, eax
		jmp	short loc_6B402446
sub_6B4023D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4024A0	proc near		; CODE XREF: sub_6B4024A0+148p
					; sub_6B4024A0+220p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		cmp	al, 4Ch
		jz	loc_6B4025F7
		cmp	al, 54h
		jz	loc_6B402656
		cmp	al, 73h
		jz	loc_6B402576
		cmp	al, 66h
		jz	short loc_6B402511

loc_6B4024D7:				; CODE XREF: sub_6B4024A0+75j
		sub	eax, 30h
		cmp	al, 9
		ja	loc_6B40258A
		mov	eax, ebx
		call	sub_6B403180
		test	eax, eax
		mov	esi, eax
		jz	short loc_6B4024FB
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jz	loc_6B4026E1

loc_6B4024FB:				; CODE XREF: sub_6B4024A0+4Dj
					; sub_6B4024A0+C9j ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6B402511:				; CODE XREF: sub_6B4024A0+35j
		cmp	byte ptr [edx+1], 70h
		jnz	short loc_6B4024D7
		lea	ecx, [edx+2]
		mov	eax, 1
		mov	[ebx+0Ch], ecx
		cmp	byte ptr [edx+2], 5Fh
		jz	short loc_6B402546
		mov	eax, ebx
		call	sub_6B401F30
		test	eax, eax
		js	loc_6B4025F0
		mov	ecx, [ebx+0Ch]
		cmp	byte ptr [ecx],	5Fh
		jnz	loc_6B4025F0
		add	eax, 2

loc_6B402546:				; CODE XREF: sub_6B4024A0+86j
		mov	edx, [ebx+14h]
		add	ecx, 1
		cmp	edx, [ebx+18h]
		mov	[ebx+0Ch], ecx
		jge	loc_6B4025F0
		lea	esi, [edx+edx*2]
		add	edx, 1
		shl	esi, 2
		add	esi, [ebx+10h]
		mov	[ebx+14h], edx
		test	esi, esi
		jz	short loc_6B4024FB
		mov	dword ptr [esi], 6
		mov	[esi+4], eax
		jmp	short loc_6B4024FB
; ---------------------------------------------------------------------------

loc_6B402576:				; CODE XREF: sub_6B4024A0+2Dj
		movzx	eax, byte ptr [edx+1]
		cmp	al, 72h
		jz	loc_6B402670
		cmp	al, 70h
		jz	loc_6B4026B8

loc_6B40258A:				; CODE XREF: sub_6B4024A0+3Cj
		mov	eax, ebx
		call	sub_6B403000
		test	eax, eax
		mov	ebp, eax
		jz	short loc_6B4025F0
		mov	eax, [eax]
		cmp	eax, 2Bh
		jz	short loc_6B402611
		cmp	eax, 2Ch
		jz	loc_6B4026B0
		cmp	eax, 2Dh
		jz	short loc_6B4025D9
		cmp	eax, 2Bh
		nop
		jnz	short loc_6B4025F0
		mov	eax, [ebp+4]

loc_6B4025B5:				; CODE XREF: sub_6B4024A0+191j
		mov	edx, [eax+0Ch]
		mov	eax, 2Bh

loc_6B4025BD:				; CODE XREF: sub_6B4024A0+213j
		cmp	edx, 2
		jz	loc_6B402753
		cmp	edx, 3
		jz	loc_6B402700
		cmp	edx, 1
		jnz	short loc_6B4025F0
		cmp	eax, 2Dh
		jnz	short loc_6B4025E6

loc_6B4025D9:				; CODE XREF: sub_6B4024A0+10Aj
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		nop
		jz	loc_6B4027CC

loc_6B4025E6:				; CODE XREF: sub_6B4024A0+137j
		mov	eax, ebx
		call	sub_6B4024A0
		jmp	short loc_6B40263E
; ---------------------------------------------------------------------------
		align 10h

loc_6B4025F0:				; CODE XREF: sub_6B4024A0+91j
					; sub_6B4024A0+9Dj ...
		xor	esi, esi
		jmp	loc_6B4024FB
; ---------------------------------------------------------------------------

loc_6B4025F7:				; CODE XREF: sub_6B4024A0+1Dj
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6B403340
; ---------------------------------------------------------------------------

loc_6B402611:				; CODE XREF: sub_6B4024A0+FCj
		mov	edx, [ebp+4]
		mov	edi, offset aSt	; "st"
		mov	ecx, 3
		mov	eax, [ebx+30h]
		add	eax, [edx+8]
		sub	eax, 2
		mov	[ebx+30h], eax
		mov	eax, [ebp+4]
		mov	esi, [eax]
		repe cmpsb
		jnz	loc_6B4025B5
		mov	eax, ebx
		call	sub_6B4027E0

loc_6B40263E:				; CODE XREF: sub_6B4024A0+14Dj
					; sub_6B4024A0+339j
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, ebp
		mov	edx, 2Eh
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B4024FB
; ---------------------------------------------------------------------------

loc_6B402656:				; CODE XREF: sub_6B4024A0+25j
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6B402090
; ---------------------------------------------------------------------------

loc_6B402670:				; CODE XREF: sub_6B4024A0+DCj
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6B4027E0
		mov	esi, eax
		mov	eax, ebx
		call	sub_6B403180
		mov	edi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jz	loc_6B4027AC
		mov	[esp+3Ch+var_3C], edi

loc_6B402697:				; CODE XREF: sub_6B4024A0+327j
		mov	ecx, esi
		mov	edx, 1
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B4024FB
; ---------------------------------------------------------------------------
		align 10h

loc_6B4026B0:				; CODE XREF: sub_6B4024A0+101j
		mov	edx, [ebp+4]
		jmp	loc_6B4025BD
; ---------------------------------------------------------------------------

loc_6B4026B8:				; CODE XREF: sub_6B4024A0+E4j
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6B4024A0
		mov	edx, 3Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B4024FB
; ---------------------------------------------------------------------------

loc_6B4026E1:				; CODE XREF: sub_6B4024A0+55j
		mov	eax, ebx
		call	sub_6B403470
		mov	ecx, esi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B4024FB
; ---------------------------------------------------------------------------

loc_6B402700:				; CODE XREF: sub_6B4024A0+129j
		mov	eax, ebx
		call	sub_6B4024A0
		mov	esi, eax
		mov	eax, ebx
		call	sub_6B4024A0
		mov	edi, eax
		mov	eax, ebx
		call	sub_6B4024A0
		mov	ecx, edi
		mov	edx, 33h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	ecx, esi
		mov	edx, 32h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	ecx, ebp
		mov	edx, 31h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B4024FB
; ---------------------------------------------------------------------------

loc_6B402753:				; CODE XREF: sub_6B4024A0+120j
		mov	eax, ebx
		mov	edi, offset aCl	; "cl"
		call	sub_6B4024A0
		mov	ecx, 3
		mov	[esp+3Ch+var_20], eax
		mov	eax, [ebp+4]
		mov	esi, [eax]
		repe cmpsb
		jnz	short loc_6B4027A3
		mov	eax, ebx
		call	sub_6B403DE0

loc_6B402778:				; CODE XREF: sub_6B4024A0+30Aj
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 30h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	ecx, ebp
		mov	edx, 2Fh
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B4024FB
; ---------------------------------------------------------------------------

loc_6B4027A3:				; CODE XREF: sub_6B4024A0+2CFj
		mov	eax, ebx
		call	sub_6B4024A0
		jmp	short loc_6B402778
; ---------------------------------------------------------------------------

loc_6B4027AC:				; CODE XREF: sub_6B4024A0+1EEj
		mov	eax, ebx
		call	sub_6B403470
		mov	ecx, edi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	[esp+3Ch+var_3C], eax
		jmp	loc_6B402697
; ---------------------------------------------------------------------------

loc_6B4027CC:				; CODE XREF: sub_6B4024A0+140j
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6B403DE0
		jmp	loc_6B40263E
sub_6B4024A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4027E0	proc near		; CODE XREF: sub_6B4024A0+199p
					; sub_6B4024A0+1D8p ...

var_3C		= dword	ptr -3Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	ecx, [eax+0Ch]
		movzx	eax, byte ptr [ecx]
		cmp	al, 56h
		jz	short loc_6B402832
		cmp	al, 72h
		jz	short loc_6B402832
		cmp	al, 4Bh
		jz	short loc_6B402832
		lea	edx, [eax-30h]
		cmp	dl, 4Ah		; switch 75 cases
		lea	esi, [esi+0]
		jbe	short loc_6B402828

loc_6B402812:				; CODE XREF: sub_6B4027E0+4Bj
					; sub_6B4027E0+63j ...
		xor	eax, eax	; jumptable 6B40282B default case

loc_6B402814:				; CODE XREF: sub_6B4027E0+96j
					; sub_6B4027E0+A7j ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6B402828:				; CODE XREF: sub_6B4027E0+30j
		movzx	edx, dl
		jmp	ds:off_6B40F390[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6B402832:				; CODE XREF: sub_6B4027E0+1Dj
					; sub_6B4027E0+21j ...
		xor	ecx, ecx
		mov	eax, ebx
		lea	edx, [esp+3Ch+var_20]
		call	sub_6B401FF0
		test	eax, eax
		mov	esi, eax
		jz	short loc_6B402812 ; jumptable 6B40282B	default	case
		mov	eax, ebx
		call	sub_6B4027E0
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6B402812 ; jumptable 6B40282B	default	case
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_6B402812 ; jumptable 6B40282B	default	case
		lea	esi, [esi+0]

loc_6B402860:				; CODE XREF: sub_6B4027E0+A5j
					; sub_6B4027E0+6A8j
		mov	edx, [ebx+20h]
		cmp	edx, [ebx+24h]
		jge	short loc_6B402812 ; jumptable 6B40282B	default	case
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+edx*4], eax
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_6B402814
; ---------------------------------------------------------------------------

loc_6B402878:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		mov	eax, ebx	; jumptable 6B40282B cases 0-9,30,42
		call	sub_6B403570
		mov	[esp+3Ch+var_20], eax

loc_6B402883:				; CODE XREF: sub_6B4027E0+D6j
					; sub_6B4027E0+12Bj ...
		test	eax, eax
		jnz	short loc_6B402860
		jmp	short loc_6B402814
; ---------------------------------------------------------------------------
		align 10h

loc_6B402890:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		add	ecx, 1		; jumptable 6B40282B case 19
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6B4027E0
		mov	edx, 21h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_6B402883
; ---------------------------------------------------------------------------

loc_6B4028B8:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		lea	eax, [ecx+1]	; jumptable 6B40282B case 20
		mov	[ebx+0Ch], eax
		movzx	eax, byte ptr [ecx+1]
		test	al, al
		jz	loc_6B402812	; jumptable 6B40282B default case
		sub	eax, 46h
		add	ecx, 2
		cmp	al, 2Eh		; switch 47 cases
		mov	[ebx+0Ch], ecx
		ja	loc_6B402812	; jumptable 6B40282B default case
		movzx	eax, al
		jmp	ds:off_6B40F4BC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6B4028E5:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		add	ecx, 1		; jumptable 6B40282B case 23
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6B4027E0
		mov	edx, 22h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6B402883
; ---------------------------------------------------------------------------

loc_6B402910:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		add	ecx, 1		; jumptable 6B40282B case 31
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6B4027E0
		mov	edx, 20h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6B402883
; ---------------------------------------------------------------------------
		align 10h

loc_6B402940:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		add	ecx, 1		; jumptable 6B40282B case 32
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6B4027E0
		mov	edx, 1Eh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6B402883
; ---------------------------------------------------------------------------
		align 10h

loc_6B402970:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		add	ecx, 1		; jumptable 6B40282B case 34
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6B4027E0
		mov	edx, 1Fh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6B402883
; ---------------------------------------------------------------------------
		align 10h

loc_6B4029A0:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		movzx	eax, byte ptr [ecx+1] ;	jumptable 6B40282B case	35
		lea	edx, [eax-30h]
		cmp	dl, 9
		jbe	short loc_6B4029BB
		cmp	al, 5Fh
		jz	short loc_6B4029BB
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_6B402E72

loc_6B4029BB:				; CODE XREF: sub_6B4027E0+1CAj
					; sub_6B4027E0+1CEj
		xor	edx, edx
		mov	eax, ebx
		call	sub_6B402100
		mov	edx, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		cmp	byte ptr [edx],	49h
		jnz	loc_6B402814
		mov	eax, ebx
		call	sub_6B403470
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6B402883
; ---------------------------------------------------------------------------

loc_6B4029F7:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		mov	eax, ebx	; jumptable 6B40282B case 36
		call	sub_6B402090
		mov	edx, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		cmp	byte ptr [edx],	49h
		jnz	loc_6B402883
		test	eax, eax
		jz	loc_6B402814
		mov	edx, [ebx+20h]
		cmp	edx, [ebx+24h]
		jge	loc_6B402812	; jumptable 6B40282B default case
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+edx*4], eax
		mov	eax, ebx
		call	sub_6B403470
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50

loc_6B402A46:				; CODE XREF: sub_6B4027E0+29Bj
					; sub_6B4027E0+330j ...
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6B402883
; ---------------------------------------------------------------------------
		align 10h

loc_6B402A50:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		add	ecx, 1		; jumptable 6B40282B case 37
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6B4023D0
		mov	esi, eax
		mov	[esp+3Ch+var_20], eax
		mov	eax, ebx
		call	sub_6B4027E0
		mov	edx, 1Dh
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		jmp	short loc_6B402A46
; ---------------------------------------------------------------------------
		align 10h

loc_6B402A80:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		movsx	eax, al		; jumptable 6B40282B cases 49-58,60-63,67,68,70-74
		lea	eax, [eax+eax*4]
		lea	edx, (off_6B40F390+9Ch)[eax*4]
		test	edx, edx
		jz	loc_6B402EAD
		mov	ecx, [ebx+14h]
		cmp	ecx, [ebx+18h]
		jl	loc_6B402E40
		mov	edx, large ds:4
		xor	eax, eax

loc_6B402AA9:				; CODE XREF: sub_6B4027E0+680j
					; sub_6B4027E0+6D2j ...
		mov	edx, [edx+4]
		add	[ebx+30h], edx
		add	dword ptr [ebx+0Ch], 1
		jmp	loc_6B402814
; ---------------------------------------------------------------------------

loc_6B402AB8:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		add	ecx, 1		; jumptable 6B40282B case 69
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6B4023D0
		mov	edx, 24h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	[esp+3Ch+var_20], eax
		jmp	loc_6B402883
; ---------------------------------------------------------------------------

loc_6B402AE3:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		add	ecx, 1		; jumptable 6B40282B case 29
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		lea	esi, [esp+3Ch+var_24]
		call	sub_6B4027E0
		mov	ecx, 1
		mov	edx, esi
		mov	edi, eax
		mov	eax, ebx
		call	sub_6B401FF0
		test	eax, eax
		mov	ebp, eax
		jnz	loc_6B402BB3

loc_6B402B0E:				; CODE XREF: sub_6B4027E0+36Fj
					; sub_6B4027E0+377j ...
		xor	eax, eax
		jmp	loc_6B402A46
; ---------------------------------------------------------------------------

loc_6B402B15:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		lea	edx, [ecx+1]	; jumptable 6B40282B case 17
		xor	esi, esi
		mov	[ebx+0Ch], edx
		movzx	eax, byte ptr [ecx+1]
		cmp	al, 5Fh
		jz	short loc_6B402B59
		sub	eax, 30h
		cmp	al, 9
		ja	loc_6B402E95
		mov	ecx, edx

loc_6B402B32:				; CODE XREF: sub_6B4027E0+360j
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		sub	eax, 30h
		cmp	al, 9
		jbe	short loc_6B402B32
		sub	ecx, edx
		mov	eax, ebx
		call	sub_6B401ED0
		test	eax, eax
		mov	esi, eax
		jz	short loc_6B402B0E

loc_6B402B51:				; CODE XREF: sub_6B4027E0+6C0j
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	5Fh
		jnz	short loc_6B402B0E

loc_6B402B59:				; CODE XREF: sub_6B4027E0+343j
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6B4027E0
		mov	ecx, esi
		mov	edx, 26h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		jmp	loc_6B402A46
; ---------------------------------------------------------------------------
		align 10h

loc_6B402B80:				; CODE XREF: sub_6B4027E0+4Bj
					; DATA XREF: .rdata:off_6B40F390o
		lea	eax, [ecx+1]	; jumptable 6B40282B case 22
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ecx+1], 59h
		jz	loc_6B402EC7

loc_6B402B90:				; CODE XREF: sub_6B4027E0+6EDj
		mov	edx, 1
		mov	eax, ebx
		call	sub_6B402F10
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	loc_6B402B0E
		add	edx, 1
		mov	[ebx+0Ch], edx
		jmp	loc_6B402A46
; ---------------------------------------------------------------------------

loc_6B402BB3:				; CODE XREF: sub_6B4027E0+328j
		mov	eax, ebx
		call	sub_6B4027E0
		test	eax, eax
		mov	[ebp+0], eax
		jz	loc_6B402B0E
		cmp	ebp, esi
		jz	short loc_6B402BD2
		cmp	dword ptr [eax], 25h
		jnz	loc_6B402ED2

loc_6B402BD2:				; CODE XREF: sub_6B4027E0+3E7j
					; sub_6B4027E0+714j
		mov	eax, [esp+3Ch+var_24]
		mov	ecx, edi
		mov	edx, 27h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		jmp	loc_6B402A46
; ---------------------------------------------------------------------------
		align 10h

loc_6B402BF0:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	edx, [ebx+14h]	; jumptable 6B4028DE case 45
		cmp	edx, [ebx+18h]
		jge	loc_6B402E65
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6B402EF9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6B40FE18
		mov	dword ptr [eax+4], offset off_6B40FE18

loc_6B402C25:				; CODE XREF: sub_6B4027E0+4A6j
					; sub_6B4027E0+4DDj ...
		mov	edx, [edx+4]
		add	[ebx+30h], edx
		jmp	loc_6B402814
; ---------------------------------------------------------------------------

loc_6B402C30:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	eax, ebx	; jumptable 6B4028DE case 42
		call	sub_6B4027E0
		mov	edx, 3Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		jmp	loc_6B402814
; ---------------------------------------------------------------------------

loc_6B402C51:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	edx, [ebx+14h]	; jumptable 6B4028DE case 35
		cmp	edx, [ebx+18h]
		jge	loc_6B402E65
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6B402EF9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6B40FE2C
		mov	dword ptr [eax+4], offset off_6B40FE2C
		jmp	short loc_6B402C25
; ---------------------------------------------------------------------------

loc_6B402C88:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	edx, [ebx+14h]	; jumptable 6B4028DE case 31
		cmp	edx, [ebx+18h]
		jge	loc_6B402E65
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6B402EF9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6B40FDF0
		mov	dword ptr [eax+4], offset off_6B40FDF0
		jmp	loc_6B402C25
; ---------------------------------------------------------------------------

loc_6B402CC2:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	edx, [ebx+14h]	; jumptable 6B4028DE case 30
		cmp	edx, [ebx+18h]
		jge	loc_6B402E65
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6B402EF9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6B40FDDC
		mov	dword ptr [eax+4], offset off_6B40FDDC
		jmp	loc_6B402C25
; ---------------------------------------------------------------------------

loc_6B402CFC:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	eax, ebx	; jumptable 6B4028DE cases 14,46
		call	sub_6B4024A0
		mov	edx, 39h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		test	eax, eax
		mov	[esp+3Ch+var_20], eax
		jz	loc_6B402814
		mov	ecx, [ebx+0Ch]
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jz	loc_6B402812	; jumptable 6B40282B default case
		add	ecx, 1
		cmp	dl, 45h
		mov	[ebx+0Ch], ecx
		jnz	loc_6B402812	; jumptable 6B40282B default case
		jmp	loc_6B402814
; ---------------------------------------------------------------------------

loc_6B402D46:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	eax, [ebx+14h]	; jumptable 6B4028DE case 0
		xor	esi, esi
		cmp	eax, [ebx+18h]
		jge	short loc_6B402D5F
		lea	esi, [eax+eax*2]
		add	eax, 1
		shl	esi, 2
		add	esi, [ebx+10h]
		mov	[ebx+14h], eax

loc_6B402D5F:				; CODE XREF: sub_6B4027E0+56Ej
		mov	eax, [ebx+0Ch]
		mov	[esp+3Ch+var_20], esi
		mov	dword ptr [esi], 28h
		movzx	eax, byte ptr [eax]
		sub	eax, 30h
		cmp	al, 9
		setbe	al
		movzx	eax, al
		test	ax, ax
		mov	[esi+8], ax
		jnz	loc_6B402EB7

loc_6B402D87:				; CODE XREF: sub_6B4027E0+6E2j
		mov	eax, ebx
		call	sub_6B4027E0
		mov	[esi+4], eax
		mov	eax, [esp+3Ch+var_20]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6B402812	; jumptable 6B40282B default case
		mov	eax, ebx
		call	sub_6B401F30
		mov	ecx, [ebx+0Ch]
		xor	edx, edx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	short loc_6B402DC0
		add	ecx, 1
		xor	edx, edx
		cmp	al, 73h
		mov	[ebx+0Ch], ecx
		setz	dl

loc_6B402DC0:				; CODE XREF: sub_6B4027E0+5D1j
		mov	eax, [esp+3Ch+var_20]
		mov	[eax+0Ah], dx
		jmp	loc_6B402814
; ---------------------------------------------------------------------------

loc_6B402DCD:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	edx, [ebx+14h]	; jumptable 6B4028DE case 34
		cmp	edx, [ebx+18h]
		jge	loc_6B402E65
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6B402EF9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6B40FE04
		mov	dword ptr [eax+4], offset off_6B40FE04
		jmp	loc_6B402C25
; ---------------------------------------------------------------------------

loc_6B402E07:				; CODE XREF: sub_6B4027E0+FEj
					; DATA XREF: .rdata:off_6B40F4BCo
		mov	edx, [ebx+14h]	; jumptable 6B4028DE case 32
		cmp	edx, [ebx+18h]
		jge	short loc_6B402E65
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6B402EF9
		mov	dword ptr [eax], 23h
		mov	edx, offset off_6B40FDC8
		mov	dword ptr [eax+4], offset off_6B40FDC8
		jmp	loc_6B402C25
; ---------------------------------------------------------------------------
		align 10h

loc_6B402E40:				; CODE XREF: sub_6B4027E0+2BBj
		lea	eax, [ecx+ecx*2]
		add	ecx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], ecx
		test	eax, eax
		jz	loc_6B402F01
		mov	dword ptr [eax], 23h
		mov	[eax+4], edx
		jmp	loc_6B402AA9
; ---------------------------------------------------------------------------

loc_6B402E65:				; CODE XREF: sub_6B4027E0+416j
					; sub_6B4027E0+477j ...
		mov	edx, large ds:4
		xor	eax, eax
		jmp	loc_6B402C25
; ---------------------------------------------------------------------------

loc_6B402E72:				; CODE XREF: sub_6B4027E0+1D5j
		mov	eax, ebx
		call	sub_6B403570
		test	eax, eax
		jz	loc_6B402814
		cmp	dword ptr [eax], 16h
		mov	[esp+3Ch+var_20], eax
		jnz	loc_6B402860
		xchg	ax, ax
		jmp	loc_6B402814
; ---------------------------------------------------------------------------

loc_6B402E95:				; CODE XREF: sub_6B4027E0+34Aj
		mov	eax, ebx
		call	sub_6B4024A0
		test	eax, eax
		mov	esi, eax
		jnz	loc_6B402B51
		xor	eax, eax
		jmp	loc_6B402A46
; ---------------------------------------------------------------------------

loc_6B402EAD:				; CODE XREF: sub_6B4027E0+2AFj
		mov	edx, [edx+4]
		xor	eax, eax
		jmp	loc_6B402AA9
; ---------------------------------------------------------------------------

loc_6B402EB7:				; CODE XREF: sub_6B4027E0+5A1j
		mov	eax, ebx
		call	sub_6B401F30
		mov	esi, [esp+3Ch+var_20]
		jmp	loc_6B402D87
; ---------------------------------------------------------------------------

loc_6B402EC7:				; CODE XREF: sub_6B4027E0+3AAj
		add	ecx, 2
		mov	[ebx+0Ch], ecx
		jmp	loc_6B402B90
; ---------------------------------------------------------------------------

loc_6B402ED2:				; CODE XREF: sub_6B4027E0+3ECj
		mov	edx, [esp+3Ch+var_24]
		test	edx, edx
		jz	loc_6B402B0E
		mov	eax, [ebx+20h]
		cmp	eax, [ebx+24h]
		jge	loc_6B402B0E
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+eax*4], edx
		jmp	loc_6B402BD2
; ---------------------------------------------------------------------------

loc_6B402EF9:				; CODE XREF: sub_6B4027E0+42Dj
					; sub_6B4027E0+48Ej ...
		mov	edx, [eax+4]
		jmp	loc_6B402C25
; ---------------------------------------------------------------------------

loc_6B402F01:				; CODE XREF: sub_6B4027E0+671j
		mov	edx, [eax+4]
		jmp	loc_6B402AA9
sub_6B4027E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B402F10	proc near		; CODE XREF: sub_6B4027E0+3B7p
					; sub_6B403880+71p

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	edx, [eax+0Ch]
		cmp	byte ptr [edx],	4Ah
		jz	loc_6B402FC0

loc_6B402F27:				; CODE XREF: sub_6B402F10+BBj
		mov	[esp+3Ch+var_20], 0
		lea	ebp, [esp+3Ch+var_20]
		xor	edi, edi
		jmp	short loc_6B402F3E
; ---------------------------------------------------------------------------

loc_6B402F37:				; CODE XREF: sub_6B402F10+46j
		mov	edx, [ebx+0Ch]
		xor	esi, esi
		mov	edi, eax

loc_6B402F3E:				; CODE XREF: sub_6B402F10+25j
		movzx	eax, byte ptr [edx]
		cmp	al, 45h
		jz	short loc_6B402F81

loc_6B402F45:				; CODE XREF: sub_6B402F10+6Fj
		test	al, al
		jz	short loc_6B402F81
		mov	eax, ebx
		call	sub_6B4027E0
		test	eax, eax
		jz	short loc_6B402FB0
		test	esi, esi
		jnz	short loc_6B402F37
		mov	ecx, eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6B401E50
		test	eax, eax
		mov	[ebp+0], eax
		jz	short loc_6B402FB0
		mov	edx, [ebx+0Ch]
		lea	ebp, [eax+8]
		movzx	eax, byte ptr [edx]
		cmp	al, 45h
		jnz	short loc_6B402F45

loc_6B402F81:				; CODE XREF: sub_6B402F10+33j
					; sub_6B402F10+37j
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_6B402FB0
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_6B402FD0

loc_6B402F90:				; CODE XREF: sub_6B402F10+C6j
					; sub_6B402F10+CFj ...
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, edi
		mov	eax, ebx
		mov	edx, 25h
		call	sub_6B401E50
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B402FB0:				; CODE XREF: sub_6B402F10+42j
					; sub_6B402F10+62j ...
		add	esp, 2Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B402FC0:				; CODE XREF: sub_6B402F10+11j
		add	edx, 1
		mov	esi, 1
		mov	[eax+0Ch], edx
		jmp	loc_6B402F27
; ---------------------------------------------------------------------------

loc_6B402FD0:				; CODE XREF: sub_6B402F10+7Ej
		mov	edx, [eax+4]
		cmp	dword ptr [edx], 23h
		jnz	short loc_6B402F90
		mov	edx, [edx+4]
		cmp	dword ptr [edx+10h], 9
		jnz	short loc_6B402F90
		mov	eax, [edx+4]
		sub	[ebx+30h], eax
		xor	eax, eax
		mov	[esp+3Ch+var_20], 0
		jmp	short loc_6B402F90
sub_6B402F10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B403000	proc near		; CODE XREF: sub_6B4024A0+ECp
					; sub_6B403180+55p

var_4C		= dword	ptr -4Ch
var_2D		= byte ptr -2Dh
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_20], eax
		mov	eax, [eax+0Ch]
		movzx	ebp, byte ptr [eax]
		mov	ecx, ebp
		test	cl, cl
		jz	short loc_6B403046
		mov	ebx, [esp+4Ch+var_20]
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	ebx, byte ptr [eax+1]
		test	bl, bl
		jz	short loc_6B403035
		mov	esi, [esp+4Ch+var_20]
		add	eax, 2
		mov	[esi+0Ch], eax

loc_6B403035:				; CODE XREF: sub_6B403000+29j
		mov	eax, ebp
		cmp	al, 76h
		jnz	short loc_6B4030B5
		lea	eax, [ebx-30h]
		cmp	al, 9
		jbe	loc_6B4030F0

loc_6B403046:				; CODE XREF: sub_6B403000+17j
					; sub_6B403000+B8j ...
		mov	esi, 34h
		xor	eax, eax
		mov	edi, ebx
		nop

loc_6B403050:				; CODE XREF: sub_6B403000+9Cj
		mov	edx, esi
		sub	edx, eax
		mov	ecx, edx
		shr	ecx, 1Fh
		lea	edx, [ecx+edx]
		sar	edx, 1
		add	edx, eax
		mov	ecx, edx
		shl	ecx, 4
		lea	ebx, off_6B4101C0[ecx]
		mov	ecx, ds:off_6B4101C0[ecx]
		mov	[esp+4Ch+var_24], ebx
		movzx	ebx, byte ptr [ecx]
		mov	[esp+4Ch+var_2D], bl
		mov	ebx, ebp
		cmp	bl, [esp+4Ch+var_2D]
		jnz	short loc_6B4030A8
		movzx	ecx, byte ptr [ecx+1]
		mov	ebx, edi
		cmp	bl, cl
		jz	loc_6B403140
		mov	ebx, edi
		cmp	cl, bl
		jle	short loc_6B4030B0

loc_6B403098:				; CODE XREF: sub_6B403000+AEj
		mov	esi, edx

loc_6B40309A:				; CODE XREF: sub_6B403000+B3j
		cmp	eax, esi
		jnz	short loc_6B403050

loc_6B40309E:				; CODE XREF: sub_6B403000+105j
					; sub_6B403000+11Cj ...
		xor	eax, eax

loc_6B4030A0:				; CODE XREF: sub_6B403000+118j
					; sub_6B403000+134j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B4030A8:				; CODE XREF: sub_6B403000+82j
		mov	ecx, ebp
		cmp	[esp+4Ch+var_2D], cl
		jg	short loc_6B403098

loc_6B4030B0:				; CODE XREF: sub_6B403000+96j
		lea	eax, [edx+1]
		jmp	short loc_6B40309A
; ---------------------------------------------------------------------------

loc_6B4030B5:				; CODE XREF: sub_6B403000+39j
		cmp	bl, 76h
		jnz	short loc_6B403046
		mov	eax, ebp
		cmp	al, 63h
		xchg	ax, ax
		jnz	short loc_6B403046
		mov	eax, [esp+4Ch+var_20]
		call	sub_6B4027E0
		mov	edx, 2Dh
		mov	[esp+4Ch+var_4C], 0
		mov	ecx, eax
		mov	eax, [esp+4Ch+var_20]
		call	sub_6B401E50
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4030F0:				; CODE XREF: sub_6B403000+40j
		mov	eax, [esp+4Ch+var_20]
		call	sub_6B4023D0
		mov	esi, [esp+4Ch+var_20]
		mov	edx, [esi+14h]
		cmp	edx, [esi+18h]
		mov	ecx, eax
		jge	short loc_6B40309E
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [esi+10h]
		mov	[esi+14h], edx
		test	eax, eax
		jz	short loc_6B4030A0
		test	ecx, ecx
		jz	loc_6B40309E
		movsx	edx, bl
		sub	edx, 30h
		mov	dword ptr [eax], 2Ch
		mov	[eax+4], edx
		mov	[eax+8], ecx
		jmp	loc_6B4030A0
; ---------------------------------------------------------------------------
		align 10h

loc_6B403140:				; CODE XREF: sub_6B403000+8Cj
		mov	esi, [esp+4Ch+var_20]
		mov	edx, [esi+14h]
		cmp	edx, [esi+18h]
		jge	loc_6B40309E
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [esi+10h]
		mov	[esi+14h], edx
		test	eax, eax
		jz	loc_6B4030A0
		mov	edx, [esp+4Ch+var_24]
		mov	dword ptr [eax], 2Bh
		mov	[eax+4], edx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6B403000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B403180	proc near		; CODE XREF: sub_6B4024A0+44p
					; sub_6B4024A0+1E1p ...
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_6B4031F4
		lea	ecx, [eax-61h]
		cmp	cl, 19h
		jbe	short loc_6B4031D3
		lea	ecx, [eax-43h]
		cmp	cl, 1
		ja	loc_6B403261
		mov	ecx, [ebx+2Ch]
		test	ecx, ecx
		jz	short loc_6B4031BF
		mov	esi, [ecx]
		test	esi, esi
		jnz	short loc_6B403200

loc_6B4031B6:				; CODE XREF: sub_6B403180+83j
		mov	eax, [ecx+8]
		add	[ebx+30h], eax
		movzx	eax, byte ptr [edx]

loc_6B4031BF:				; CODE XREF: sub_6B403180+2Ej
		cmp	al, 43h
		jz	short loc_6B403209

loc_6B4031C3:				; CODE XREF: sub_6B403180+87j
		cmp	al, 44h
		jz	loc_6B403290

loc_6B4031CB:				; CODE XREF: sub_6B403180+A0j
					; sub_6B403180+B3j ...
		xor	eax, eax

loc_6B4031CD:				; CODE XREF: sub_6B403180+5Cj
					; sub_6B403180+61j ...
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B4031D3:				; CODE XREF: sub_6B403180+1Bj
		mov	eax, ebx
		call	sub_6B403000
		test	eax, eax
		jz	short loc_6B4031CD
		cmp	dword ptr [eax], 2Bh
		jnz	short loc_6B4031CD
		mov	ecx, [eax+4]
		mov	edx, [ebx+30h]
		add	edx, [ecx+8]
		add	edx, 7
		mov	[ebx+30h], edx
		jmp	short loc_6B4031CD
; ---------------------------------------------------------------------------

loc_6B4031F4:				; CODE XREF: sub_6B403180+13j
		add	esp, 4
		mov	eax, ebx
		pop	ebx
		pop	esi
		jmp	sub_6B4023D0
; ---------------------------------------------------------------------------

loc_6B403200:				; CODE XREF: sub_6B403180+34j
		cmp	esi, 16h
		jz	short loc_6B4031B6
		cmp	al, 43h
		jnz	short loc_6B4031C3

loc_6B403209:				; CODE XREF: sub_6B403180+41j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 32h
		nop
		jz	loc_6B403330
		cmp	al, 33h
		jz	loc_6B403322
		cmp	al, 31h
		jnz	short loc_6B4031CB
		mov	esi, 1

loc_6B403227:				; CODE XREF: sub_6B403180+1A7j
					; sub_6B403180+1B5j
		add	edx, 2
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		cmp	edx, [ebx+18h]
		jge	short loc_6B4031CB
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	short loc_6B4031CB
		test	ecx, ecx
		jz	loc_6B4031CB
		mov	dword ptr [eax], 7
		mov	[eax+4], esi
		mov	[eax+8], ecx
		jmp	loc_6B4031CD
; ---------------------------------------------------------------------------

loc_6B403261:				; CODE XREF: sub_6B403180+23j
		cmp	al, 4Ch
		jnz	loc_6B4031CB
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6B4023D0
		test	eax, eax
		mov	esi, eax
		jz	loc_6B4031CB
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jz	short loc_6B4032ED
		mov	eax, esi
		jmp	loc_6B4031CD
; ---------------------------------------------------------------------------
		align 10h

loc_6B403290:				; CODE XREF: sub_6B403180+45j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 31h
		jz	short loc_6B403317
		cmp	al, 32h
		jz	short loc_6B403310
		cmp	al, 30h
		xchg	ax, ax
		jnz	loc_6B4031CB
		mov	esi, 1

loc_6B4032AB:				; CODE XREF: sub_6B403180+195j
					; sub_6B403180+1A0j
		add	edx, 2
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		cmp	edx, [ebx+18h]
		jge	loc_6B4031CB
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_6B4031CB
		test	ecx, ecx
		jz	loc_6B4031CB
		mov	dword ptr [eax], 8
		mov	[eax+4], esi
		mov	[eax+8], ecx
		jmp	loc_6B4031CD
; ---------------------------------------------------------------------------

loc_6B4032ED:				; CODE XREF: sub_6B403180+106j
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6B401F30
		test	eax, eax
		js	loc_6B4031CB
		mov	eax, esi
		jmp	loc_6B4031CD
; ---------------------------------------------------------------------------
		align 10h

loc_6B403310:				; CODE XREF: sub_6B403180+11Aj
		mov	esi, 3
		jmp	short loc_6B4032AB
; ---------------------------------------------------------------------------

loc_6B403317:				; CODE XREF: sub_6B403180+116j
		mov	esi, 2
		lea	esi, [esi+0]
		jmp	short loc_6B4032AB
; ---------------------------------------------------------------------------

loc_6B403322:				; CODE XREF: sub_6B403180+98j
		mov	esi, 3
		jmp	loc_6B403227
; ---------------------------------------------------------------------------
		align 10h

loc_6B403330:				; CODE XREF: sub_6B403180+90j
		mov	esi, 2
		jmp	loc_6B403227
sub_6B403180	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B403340	proc near		; CODE XREF: sub_6B4024A0+16Cj
					; sub_6B403470+ADp

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+1Ch+var_8], esi
		mov	[esp+1Ch+var_4], edi
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	4Ch
		jz	short loc_6B403370

loc_6B403359:				; CODE XREF: sub_6B403340+5Dj
					; sub_6B403340+9Bj ...
		xor	eax, eax
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B403370:				; CODE XREF: sub_6B403340+17j
		lea	edi, [eax+1]
		mov	[ebx+0Ch], edi
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 5Fh
		setz	cl
		cmp	dl, 5Ah
		jnz	short loc_6B4033B5

loc_6B403385:				; CODE XREF: sub_6B403340+8Aj
		lea	ecx, [edi+1]
		xor	edx, edx
		mov	[ebx+0Ch], ecx
		mov	eax, ebx
		call	sub_6B403880
		mov	edi, [ebx+0Ch]
		movzx	edx, byte ptr [edi]

loc_6B40339A:				; CODE XREF: sub_6B403340+88j
					; sub_6B403340+F8j
		cmp	dl, 45h
		jnz	short loc_6B403359
		lea	ecx, [edi+1]
		mov	[ebx+0Ch], ecx
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6B4033B5:				; CODE XREF: sub_6B403340+43j
		test	cl, cl
		jz	short loc_6B4033D0
		lea	edi, [eax+2]
		mov	[ebx+0Ch], edi
		movzx	edx, byte ptr [eax+2]
		xor	eax, eax
		cmp	dl, 5Ah
		jnz	short loc_6B40339A
		jmp	short loc_6B403385
; ---------------------------------------------------------------------------
		align 10h

loc_6B4033D0:				; CODE XREF: sub_6B403340+77j
		mov	eax, ebx
		call	sub_6B4027E0
		test	eax, eax
		mov	esi, eax
		jz	loc_6B403359
		cmp	dword ptr [eax], 23h
		jz	short loc_6B403440

loc_6B4033E6:				; CODE XREF: sub_6B403340+108j
					; sub_6B403340+110j
		mov	edx, [ebx+0Ch]
		mov	edi, 34h
		movzx	eax, byte ptr [edx]
		cmp	al, 6Eh
		jz	short loc_6B403452

loc_6B4033F5:				; CODE XREF: sub_6B403340+11Fj
		xor	ecx, ecx
		cmp	al, 45h
		jz	short loc_6B40341D
		test	al, al
		mov	ecx, edx
		jnz	short loc_6B40340E
		jmp	loc_6B403359
; ---------------------------------------------------------------------------

loc_6B403406:				; CODE XREF: sub_6B403340+D9j
		test	al, al
		jz	loc_6B403359

loc_6B40340E:				; CODE XREF: sub_6B403340+BFj
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		cmp	al, 45h
		jnz	short loc_6B403406
		sub	ecx, edx

loc_6B40341D:				; CODE XREF: sub_6B403340+B9j
		mov	eax, ebx
		call	sub_6B401ED0
		mov	edx, edi
		mov	ecx, esi
		mov	[esp+1Ch+var_1C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	edi, [ebx+0Ch]
		movzx	edx, byte ptr [edi]
		jmp	loc_6B40339A
; ---------------------------------------------------------------------------
		align 10h

loc_6B403440:				; CODE XREF: sub_6B403340+A4j
		mov	eax, [eax+4]
		mov	ecx, [eax+10h]
		test	ecx, ecx
		jz	short loc_6B4033E6
		mov	eax, [eax+4]
		sub	[ebx+30h], eax
		jmp	short loc_6B4033E6
; ---------------------------------------------------------------------------

loc_6B403452:				; CODE XREF: sub_6B403340+B3j
		add	edx, 1
		mov	di, 35h
		mov	[ebx+0Ch], edx
		movzx	eax, byte ptr [edx]
		jmp	short loc_6B4033F5
sub_6B403340	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6B403470
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B403470	proc near		; CODE XREF: sub_6B4024A0+243p
					; sub_6B4024A0+30Ep ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 20h
		mov	edi, [eax+2Ch]
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	49h
		jz	short loc_6B403490

loc_6B403483:				; CODE XREF: sub_6B403470+77j
					; sub_6B403470+92j ...
		add	esp, 20h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B403490:				; CODE XREF: sub_6B403470+11j
		lea	ecx, [eax+1]
		mov	[ebx+0Ch], ecx
		cmp	byte ptr [eax+1], 45h
		jnz	short loc_6B4034C0
		add	eax, 2
		xor	ecx, ecx
		mov	[ebx+0Ch], eax
		mov	edx, 2Ah
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6B401E50
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4034C0:				; CODE XREF: sub_6B403470+2Aj
		mov	[esp+2Ch+var_10], 0
		lea	esi, [esp+2Ch+var_10]
		movzx	edx, byte ptr [eax+1]
		jmp	short loc_6B403516
; ---------------------------------------------------------------------------

loc_6B4034D2:				; CODE XREF: sub_6B403470+A9j
		cmp	dl, 58h
		jz	short loc_6B403532
		cmp	dl, 49h
		jz	short loc_6B403524
		mov	eax, ebx
		xchg	ax, ax
		call	sub_6B4027E0

loc_6B4034E5:				; CODE XREF: sub_6B403470+B2j
					; sub_6B403470+C0j ...
		test	eax, eax
		jz	short loc_6B403483
		mov	ecx, eax
		mov	edx, 2Ah
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6B401E50
		test	eax, eax
		mov	[esi], eax
		jz	loc_6B403483
		mov	ecx, [ebx+0Ch]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 45h
		jz	short loc_6B403553
		lea	esi, [eax+8]

loc_6B403516:				; CODE XREF: sub_6B403470+60j
		cmp	dl, 4Ch
		jnz	short loc_6B4034D2
		mov	eax, ebx
		call	sub_6B403340
		jmp	short loc_6B4034E5
; ---------------------------------------------------------------------------

loc_6B403524:				; CODE XREF: sub_6B403470+6Aj
		mov	eax, ebx
		call	sub_6B403470
		nop
		lea	esi, [esi+0]
		jmp	short loc_6B4034E5
; ---------------------------------------------------------------------------

loc_6B403532:				; CODE XREF: sub_6B403470+65j
		add	ecx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_6B4024A0
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	loc_6B403483
		add	edx, 1
		mov	[ebx+0Ch], edx
		jmp	short loc_6B4034E5
; ---------------------------------------------------------------------------

loc_6B403553:				; CODE XREF: sub_6B403470+A1j
		add	ecx, 1
		mov	[ebx+2Ch], edi
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+0Ch], ecx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6B403470	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B403570	proc near		; CODE XREF: sub_6B4027E0+9Ap
					; sub_6B4027E0+694p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		cmp	al, 4Eh
		jz	loc_6B403680
		jle	short loc_6B4035C0
		cmp	al, 53h
		jz	short loc_6B403603
		cmp	al, 5Ah
		nop
		jnz	short loc_6B4035C4
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		xor	edx, edx
		call	sub_6B403880
		mov	esi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	45h
		jz	loc_6B403753

loc_6B4035AF:				; CODE XREF: sub_6B403570+6Fj
					; sub_6B403570+12Aj ...
		xor	esi, esi

loc_6B4035B1:				; CODE XREF: sub_6B403570+63j
					; sub_6B403570+67j ...
		add	esp, 2Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4035C0:				; CODE XREF: sub_6B403570+17j
		cmp	al, 4Ch
		jz	short loc_6B4035F0

loc_6B4035C4:				; CODE XREF: sub_6B403570+20j
		mov	eax, ebx
		call	sub_6B403180
		mov	esi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jnz	short loc_6B4035B1

loc_6B4035D5:				; CODE XREF: sub_6B403570+B3j
		test	esi, esi
		jz	short loc_6B4035B1
		mov	eax, [ebx+20h]
		cmp	eax, [ebx+24h]
		jge	short loc_6B4035AF
		mov	edx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[edx+eax*4], esi
		jmp	short loc_6B403625
; ---------------------------------------------------------------------------
		align 10h

loc_6B4035F0:				; CODE XREF: sub_6B403570+52j
		mov	eax, ebx
		call	sub_6B403180
		add	esp, 2Ch
		pop	ebx
		mov	esi, eax
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B403603:				; CODE XREF: sub_6B403570+1Bj
		cmp	byte ptr [edx+1], 74h
		jz	short loc_6B403644
		xor	edx, edx
		mov	eax, ebx
		call	sub_6B402100
		mov	edx, 1
		mov	esi, eax

loc_6B403619:				; CODE XREF: sub_6B403570+10Dj
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jnz	short loc_6B4035B1
		test	edx, edx
		jz	short loc_6B4035D5

loc_6B403625:				; CODE XREF: sub_6B403570+7Bj
		mov	eax, ebx
		call	sub_6B403470
		mov	ecx, esi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B4035B1
; ---------------------------------------------------------------------------

loc_6B403644:				; CODE XREF: sub_6B403570+97j
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_6B403180
		mov	ecx, 3
		mov	edx, offset aStd ; "std"
		mov	esi, eax
		mov	eax, ebx
		call	sub_6B401ED0
		mov	edx, 1
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		xor	edx, edx
		add	dword ptr [ebx+30h], 3
		mov	esi, eax
		jmp	short loc_6B403619
; ---------------------------------------------------------------------------
		align 10h

loc_6B403680:				; CODE XREF: sub_6B403570+11j
		add	edx, 1
		mov	ecx, 1
		mov	[ebx+0Ch], edx
		mov	eax, ebx
		lea	edx, [esp+3Ch+var_20]
		call	sub_6B401FF0
		test	eax, eax
		mov	ebp, eax
		jz	loc_6B4035AF
		mov	edx, [ebx+0Ch]
		xor	edi, edi
		movzx	esi, byte ptr [edx]

loc_6B4036A8:				; CODE XREF: sub_6B403570+238j
					; sub_6B403570+25Fj
		mov	eax, esi
		test	al, al
		jz	loc_6B403740
		lea	eax, [esi-61h]
		cmp	al, 19h
		jbe	loc_6B4037B0
		lea	eax, [esi-30h]
		cmp	al, 9
		jbe	loc_6B4037B0
		mov	eax, esi
		cmp	al, 44h
		jz	loc_6B4037B0
		cmp	al, 43h
		jz	loc_6B4037B0
		cmp	al, 4Ch
		jz	loc_6B4037B0
		mov	eax, esi
		cmp	al, 53h
		jz	loc_6B4037D4
		mov	eax, esi
		cmp	al, 49h
		jz	loc_6B4037E5
		mov	eax, esi
		cmp	al, 54h
		jnz	loc_6B4037FF
		mov	eax, ebx
		call	sub_6B402090

loc_6B403707:				; CODE XREF: sub_6B403570+247j
					; sub_6B403570+270j
		test	edi, edi
		jz	short loc_6B40371C
		mov	edx, 1

loc_6B403710:				; CODE XREF: sub_6B403570+28Aj
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, edi
		mov	eax, ebx
		call	sub_6B401E50

loc_6B40371C:				; CODE XREF: sub_6B403570+199j
		mov	edx, esi
		cmp	dl, 53h
		jz	short loc_6B4037A0
		mov	edx, [ebx+0Ch]
		mov	esi, 45h
		cmp	byte ptr [edx],	45h
		jz	short loc_6B4037A6
		test	eax, eax
		jz	short loc_6B403740
		mov	ecx, [ebx+20h]
		cmp	ecx, [ebx+24h]
		jl	loc_6B4037C0

loc_6B403740:				; CODE XREF: sub_6B403570+13Cj
					; sub_6B403570+1C2j ...
		xor	esi, esi
		mov	dword ptr [ebp+0], 0
		mov	eax, esi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B403753:				; CODE XREF: sub_6B403570+39j
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+1], 73h
		jnz	loc_6B40382C
		lea	edx, [eax+2]
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+2], 5Fh
		jz	loc_6B40385D

loc_6B403773:				; CODE XREF: sub_6B403570+2FCj
		mov	ecx, 0Eh
		mov	edx, offset aStringLiteral ; "string literal"
		mov	eax, ebx
		call	sub_6B401ED0
		mov	[esp+3Ch+var_3C], eax

loc_6B403787:				; CODE XREF: sub_6B403570+2D0j
		mov	ecx, esi
		mov	edx, 2
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B4035B1
; ---------------------------------------------------------------------------
		align 10h

loc_6B4037A0:				; CODE XREF: sub_6B403570+1B1j
		mov	edx, [ebx+0Ch]
		movzx	esi, byte ptr [edx]

loc_6B4037A6:				; CODE XREF: sub_6B403570+1BEj
		mov	edi, eax
		jmp	loc_6B4036A8
; ---------------------------------------------------------------------------
		align 10h

loc_6B4037B0:				; CODE XREF: sub_6B403570+147j
					; sub_6B403570+152j ...
		mov	eax, ebx
		call	sub_6B403180
		jmp	loc_6B403707
; ---------------------------------------------------------------------------
		align 10h

loc_6B4037C0:				; CODE XREF: sub_6B403570+1CAj
		mov	esi, [ebx+1Ch]
		mov	edi, eax
		add	dword ptr [ebx+20h], 1
		mov	[esi+ecx*4], eax
		movzx	esi, byte ptr [edx]
		jmp	loc_6B4036A8
; ---------------------------------------------------------------------------

loc_6B4037D4:				; CODE XREF: sub_6B403570+176j
		mov	edx, 1
		mov	eax, ebx
		call	sub_6B402100
		jmp	loc_6B403707
; ---------------------------------------------------------------------------

loc_6B4037E5:				; CODE XREF: sub_6B403570+180j
		test	edi, edi
		jz	loc_6B403740
		mov	eax, ebx
		nop
		call	sub_6B403470
		mov	edx, 4
		jmp	loc_6B403710
; ---------------------------------------------------------------------------

loc_6B4037FF:				; CODE XREF: sub_6B403570+18Aj
		mov	eax, esi
		cmp	al, 45h
		jnz	loc_6B403740
		test	edi, edi
		mov	[ebp+0], edi
		jz	loc_6B4035AF
		cmp	byte ptr [edx],	45h
		jnz	loc_6B4035AF
		add	edx, 1
		mov	esi, [esp+3Ch+var_20]
		mov	[ebx+0Ch], edx
		jmp	loc_6B4035B1
; ---------------------------------------------------------------------------

loc_6B40382C:				; CODE XREF: sub_6B403570+1EDj
		mov	eax, ebx
		call	sub_6B403570
		mov	edi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jz	short loc_6B403845

loc_6B40383D:				; CODE XREF: sub_6B403570+2E4j
		mov	[esp+3Ch+var_3C], edi
		jmp	loc_6B403787
; ---------------------------------------------------------------------------

loc_6B403845:				; CODE XREF: sub_6B403570+2CBj
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6B401F30
		test	eax, eax
		jns	short loc_6B40383D
		xor	esi, esi
		jmp	loc_6B4035B1
; ---------------------------------------------------------------------------

loc_6B40385D:				; CODE XREF: sub_6B403570+1FDj
		add	eax, 3
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6B401F30
		test	eax, eax
		jns	loc_6B403773
		xor	esi, esi
		jmp	loc_6B4035B1
sub_6B403570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B403880	proc near		; CODE XREF: sub_6B403340+4Fp
					; sub_6B403570+2Cp ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_8], edi
		mov	edi, edx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_4], ebp
		mov	eax, [eax+0Ch]
		movzx	edx, byte ptr [eax]
		cmp	dl, 54h
		jz	loc_6B403955
		cmp	dl, 47h
		jz	loc_6B403955
		mov	eax, ebx
		call	sub_6B403570
		test	eax, eax
		mov	esi, eax
		jnz	short loc_6B403910

loc_6B4038BC:				; CODE XREF: sub_6B403880+92j
					; sub_6B403880+98j
		mov	eax, [ebx+0Ch]
		test	esi, esi
		movzx	eax, byte ptr [eax]
		jz	loc_6B403971
		test	al, al
		jz	loc_6B403971
		cmp	al, 45h
		jz	loc_6B403971
		mov	eax, esi

loc_6B4038DC:				; CODE XREF: sub_6B403880+118j
		mov	edx, [eax]
		cmp	edx, 4
		jz	loc_6B403A20
		jnb	loc_6B403987

loc_6B4038ED:				; CODE XREF: sub_6B403880+10Dj
					; sub_6B403880+120j ...
		xor	edx, edx	; jumptable 6B403A38 cases 7,8,45

loc_6B4038EF:				; CODE XREF: sub_6B403880+1B1j
		mov	eax, ebx
		call	sub_6B402F10
		mov	ecx, esi
		mov	edx, 3
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	short loc_6B403971
; ---------------------------------------------------------------------------
		align 10h

loc_6B403910:				; CODE XREF: sub_6B403880+3Aj
		test	edi, edi
		jz	short loc_6B4038BC
		test	byte ptr [ebx+8], 1
		jnz	short loc_6B4038BC
		mov	eax, [esi]
		lea	edx, [eax-1Ah]
		cmp	edx, 2
		ja	short loc_6B403931

loc_6B403924:				; CODE XREF: sub_6B403880+AFj
		mov	esi, [esi+4]
		mov	eax, [esi]
		lea	edx, [eax-1Ah]
		cmp	edx, 2
		jbe	short loc_6B403924

loc_6B403931:				; CODE XREF: sub_6B403880+A2j
		cmp	eax, 2
		jnz	short loc_6B403971
		mov	eax, [esi+8]
		mov	edx, [eax]
		sub	edx, 1Ah
		cmp	edx, 2
		ja	short loc_6B403950

loc_6B403943:				; CODE XREF: sub_6B403880+CEj
		mov	eax, [eax+4]
		mov	edx, [eax]
		sub	edx, 1Ah
		cmp	edx, 2
		jbe	short loc_6B403943

loc_6B403950:				; CODE XREF: sub_6B403880+C1j
		mov	[esi+8], eax
		jmp	short loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403955:				; CODE XREF: sub_6B403880+20j
					; sub_6B403880+29j
		mov	ecx, [ebx+30h]
		add	ecx, 14h
		mov	[ebx+30h], ecx
		movzx	edx, byte ptr [eax]
		cmp	dl, 54h
		jz	loc_6B4039F2
		cmp	dl, 47h
		jz	short loc_6B4039A5

loc_6B40396F:				; CODE XREF: sub_6B403880+131j
					; sub_6B403880+14Bj ...
		xor	esi, esi	; jumptable 6B403A19 default case

loc_6B403971:				; CODE XREF: sub_6B403880+44j
					; sub_6B403880+4Cj ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_6B403987:				; CODE XREF: sub_6B403880+67j
		sub	edx, 1Ah
		cmp	edx, 2
		ja	loc_6B4038ED	; jumptable 6B403A38 cases 7,8,45
		mov	eax, [eax+4]
		test	eax, eax
		jnz	loc_6B4038DC
		xchg	ax, ax
		jmp	loc_6B4038ED	; jumptable 6B403A38 cases 7,8,45
; ---------------------------------------------------------------------------

loc_6B4039A5:				; CODE XREF: sub_6B403880+EDj
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_6B40396F ; jumptable 6B403A19	default	case
		add	eax, 2
		cmp	dl, 52h
		mov	[ebx+0Ch], eax
		jz	loc_6B403C3B
		jg	loc_6B403C5E
		cmp	dl, 41h
		jnz	short loc_6B40396F ; jumptable 6B403A19	default	case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6B403880
		mov	edx, 15h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B4039F2:				; CODE XREF: sub_6B403880+E4j
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	loc_6B40396F	; jumptable 6B403A19 default case
		sub	edx, 43h
		add	eax, 2
		cmp	dl, 33h		; switch 52 cases
		mov	[ebx+0Ch], eax
		ja	loc_6B40396F	; jumptable 6B403A19 default case
		movzx	edx, dl
		jmp	ds:off_6B40F58C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6B403A20:				; CODE XREF: sub_6B403880+61j
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6B403A2C ; jumptable 6B403A38	default	case

loc_6B403A27:				; CODE XREF: sub_6B403880+1C5j
		cmp	dword ptr [eax], 2Dh ; switch 46 cases
		jbe	short loc_6B403A36

loc_6B403A2C:				; CODE XREF: sub_6B403880+1A5j
					; sub_6B403880+1B8j ...
		mov	edx, 1		; jumptable 6B403A38 default case
		jmp	loc_6B4038EF
; ---------------------------------------------------------------------------

loc_6B403A36:				; CODE XREF: sub_6B403880+1AAj
		mov	edx, [eax]
		jmp	ds:off_6B40F65C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6B403A40:				; CODE XREF: sub_6B403880+1B8j
					; DATA XREF: .rdata:off_6B40F65Co
		mov	eax, [eax+8]	; jumptable 6B403A38 cases 1,2
		test	eax, eax
		jnz	short loc_6B403A27
		jmp	short loc_6B403A2C ; jumptable 6B403A38	default	case
; ---------------------------------------------------------------------------
		align 10h

loc_6B403A50:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		mov	edx, 76h	; jumptable 6B403A19 case 51
		mov	eax, ebx
		call	sub_6B401F90
		test	eax, eax
		xchg	ax, ax
		jz	loc_6B40396F	; jumptable 6B403A19 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6B403880
		mov	edx, 10h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403A8B:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		mov	edx, 68h	; jumptable 6B403A19 case 37
		mov	eax, ebx
		call	sub_6B401F90
		test	eax, eax
		jz	loc_6B40396F	; jumptable 6B403A19 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6B403880
		mov	edx, 0Fh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403AC4:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		xor	edx, edx	; jumptable 6B403A19 case 32
		mov	eax, ebx
		call	sub_6B401F90
		test	eax, eax
		jz	loc_6B40396F	; jumptable 6B403A19 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6B401F90
		test	eax, eax
		jz	loc_6B40396F	; jumptable 6B403A19 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_6B403880
		mov	edx, 11h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------
		align 10h

loc_6B403B10:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		sub	ecx, 5		; jumptable 6B403A19 case 19
		mov	eax, ebx
		mov	[ebx+30h], ecx
		call	sub_6B4027E0
		mov	edx, 9
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403B39:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		sub	ecx, 0Ah	; jumptable 6B403A19 case 17
		mov	eax, ebx
		mov	[ebx+30h], ecx
		call	sub_6B4027E0
		mov	edx, 0Ah
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403B62:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		mov	eax, ebx	; jumptable 6B403A19 case 16
		call	sub_6B4027E0
		mov	edx, 0Dh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403B85:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		mov	eax, ebx	; jumptable 6B403A19 case 7
		call	sub_6B4027E0
		mov	edx, 12h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403BA8:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		mov	eax, ebx	; jumptable 6B403A19 case 6
		call	sub_6B4027E0
		mov	edx, 0Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403BCB:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		mov	eax, ebx	; jumptable 6B403A19 case 3
		call	sub_6B4027E0
		mov	edx, 0Eh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403BEE:				; CODE XREF: sub_6B403880+199j
					; DATA XREF: .rdata:off_6B40F58Co
		mov	eax, ebx	; jumptable 6B403A19 case 0
		call	sub_6B4027E0
		mov	esi, eax
		mov	eax, ebx
		call	sub_6B401F30
		test	eax, eax
		js	loc_6B40396F	; jumptable 6B403A19 default case
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	loc_6B40396F	; jumptable 6B403A19 default case
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_6B4027E0
		mov	edx, 0Bh
		add	dword ptr [ebx+30h], 5
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403C3B:				; CODE XREF: sub_6B403880+13Cj
		mov	eax, ebx
		call	sub_6B403570
		mov	edx, 14h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403C5E:				; CODE XREF: sub_6B403880+142j
		cmp	dl, 56h
		jz	loc_6B403D05
		cmp	dl, 72h
		jnz	loc_6B40396F	; jumptable 6B403A19 default case
		mov	eax, ebx
		call	sub_6B401F30
		cmp	eax, 1
		jle	loc_6B40396F	; jumptable 6B403A19 default case
		mov	esi, [ebx+0Ch]
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jz	loc_6B40396F	; jumptable 6B403A19 default case
		add	esi, 1
		cmp	dl, 5Fh
		mov	[ebx+0Ch], esi
		jnz	loc_6B40396F	; jumptable 6B403A19 default case
		lea	ebp, [eax-1]
		mov	[esp+3Ch+var_20], 0

loc_6B403CA8:				; CODE XREF: sub_6B403880+483j
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	loc_6B40396F	; jumptable 6B403A19 default case
		xor	edi, edi
		cmp	al, 24h
		jnz	short loc_6B403CCC
		jmp	short loc_6B403D28
; ---------------------------------------------------------------------------
		align 10h

loc_6B403CC0:				; CODE XREF: sub_6B403880+451j
		movzx	eax, byte ptr [esi+edi]
		test	al, al
		jz	short loc_6B403CD3
		cmp	al, 24h
		jz	short loc_6B403CD3

loc_6B403CCC:				; CODE XREF: sub_6B403880+437j
		add	edi, 1
		cmp	edi, ebp
		jl	short loc_6B403CC0

loc_6B403CD3:				; CODE XREF: sub_6B403880+446j
					; sub_6B403880+44Aj
		mov	edx, esi
		mov	ecx, edi
		mov	eax, ebx
		call	sub_6B401ED0
		mov	esi, [ebx+0Ch]
		add	esi, edi
		mov	[ebx+0Ch], esi
		test	eax, eax
		jz	loc_6B40396F	; jumptable 6B403A19 default case
		sub	ebp, edi

loc_6B403CF0:				; CODE XREF: sub_6B403880+4F8j
		cmp	[esp+3Ch+var_20], 0
		jnz	loc_6B403D99

loc_6B403CFB:				; CODE XREF: sub_6B403880+52Ej
		test	ebp, ebp
		jle	short loc_6B403D7D
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_6B403CA8
; ---------------------------------------------------------------------------

loc_6B403D05:				; CODE XREF: sub_6B403880+3E1j
		mov	eax, ebx
		call	sub_6B403570
		mov	edx, 13h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403D28:				; CODE XREF: sub_6B403880+439j
		movzx	eax, byte ptr [esi+1]
		cmp	al, 53h
		jz	loc_6B403DCF
		cmp	al, 5Fh
		jz	loc_6B403DC5
		cmp	al, 24h
		xchg	ax, ax
		jnz	loc_6B40396F	; jumptable 6B403A19 default case
		mov	edx, 24h

loc_6B403D4B:				; CODE XREF: sub_6B403880+54Aj
					; sub_6B403880+554j
		mov	ecx, [ebx+14h]
		cmp	ecx, [ebx+18h]
		jge	short loc_6B403DB9
		imul	eax, ecx, 0Ch
		add	ecx, 1
		add	eax, [ebx+10h]
		mov	[ebx+14h], ecx
		test	eax, eax
		jz	short loc_6B403DB9
		mov	[eax+4], edx
		mov	esi, [ebx+0Ch]
		sub	ebp, 2
		mov	dword ptr [eax], 38h
		add	esi, 2
		mov	[ebx+0Ch], esi
		jmp	loc_6B403CF0
; ---------------------------------------------------------------------------

loc_6B403D7D:				; CODE XREF: sub_6B403880+47Dj
		mov	ecx, eax
		mov	edx, 36h
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6B401E50
		mov	esi, eax
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403D99:				; CODE XREF: sub_6B403880+475j
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 37h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_6B401E50
		test	eax, eax
		jnz	loc_6B403CFB
		jmp	loc_6B40396F	; jumptable 6B403A19 default case
; ---------------------------------------------------------------------------

loc_6B403DB9:				; CODE XREF: sub_6B403880+4D1j
					; sub_6B403880+4E1j
		add	dword ptr [ebx+0Ch], 2
		xor	esi, esi
		nop
		jmp	loc_6B403971
; ---------------------------------------------------------------------------

loc_6B403DC5:				; CODE XREF: sub_6B403880+4B6j
		mov	edx, 2Eh
		jmp	loc_6B403D4B
; ---------------------------------------------------------------------------

loc_6B403DCF:				; CODE XREF: sub_6B403880+4AEj
		mov	edx, 2Fh
		jmp	loc_6B403D4B
sub_6B403880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B403DE0	proc near		; CODE XREF: sub_6B4024A0+2D3p
					; sub_6B4024A0+334p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 24h
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_10], 0
		cmp	byte ptr [eax],	45h
		jnz	short loc_6B403E18
		add	eax, 1
		xor	ecx, ecx
		mov	[ebx+0Ch], eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6B401E50
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B403E18:				; CODE XREF: sub_6B403DE0+15j
		lea	esi, [esp+2Ch+var_10]
		jmp	short loc_6B403E23
; ---------------------------------------------------------------------------
		align 10h

loc_6B403E20:				; CODE XREF: sub_6B403DE0+6Fj
		lea	esi, [eax+8]

loc_6B403E23:				; CODE XREF: sub_6B403DE0+3Cj
		mov	eax, ebx
		call	sub_6B4024A0
		test	eax, eax
		jz	short loc_6B403E61
		mov	ecx, eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_6B401E50
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6B403E61
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	short loc_6B403E20
		add	edx, 1
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+0Ch], edx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B403E61:				; CODE XREF: sub_6B403DE0+4Cj
					; sub_6B403DE0+67j
		add	esp, 24h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
sub_6B403DE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B403E70(void	*, size_t, int)
sub_6B403E70	proc near		; DATA XREF: sub_6B405A10+37o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], edi
		mov	edi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebx
		mov	eax, [esi+4]
		mov	ebx, [esi+8]
		lea	eax, [edi+eax+1]
		cmp	eax, ebx
		ja	short loc_6B403EE7

loc_6B403E95:				; CODE XREF: sub_6B403E70+ADj
		mov	ebx, [esi+0Ch]
		test	ebx, ebx
		jz	short loc_6B403EB0

loc_6B403E9C:				; CODE XREF: sub_6B403E70+7Cj
					; sub_6B403E70+D7j
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B403EB0:				; CODE XREF: sub_6B403E70+2Aj
		mov	eax, [esi]
		mov	edx, [esp+1Ch+arg_0]
		add	eax, [esi+4]
		mov	[esp+1Ch+var_14], edi ;	size_t
		mov	[esp+1Ch+var_18], edx ;	void *
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	memcpy
		mov	edx, [esi]
		mov	eax, [esi+4]
		add	edx, edi
		mov	byte ptr [edx+eax], 0
		add	[esi+4], edi
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6B403EE7:				; CODE XREF: sub_6B403E70+23j
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_6B403E9C
		test	ebx, ebx
		jnz	short loc_6B403F00
		cmp	eax, 2
		mov	bl, 2
		jbe	short loc_6B403F06
		lea	esi, [esi+0]

loc_6B403F00:				; CODE XREF: sub_6B403E70+80j
					; sub_6B403E70+94j
		add	ebx, ebx
		cmp	eax, ebx
		ja	short loc_6B403F00

loc_6B403F06:				; CODE XREF: sub_6B403E70+87j
		mov	[esp+1Ch+var_18], ebx ;	size_t
		mov	eax, [esi]
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	realloc
		test	eax, eax
		jz	short loc_6B403F22
		mov	[esi], eax
		mov	[esi+8], ebx
		jmp	loc_6B403E95
; ---------------------------------------------------------------------------

loc_6B403F22:				; CODE XREF: sub_6B403E70+A6j
		mov	eax, [esi]
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	free
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+0Ch], 1
		jmp	loc_6B403E9C
sub_6B403E70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B403F50	proc near		; CODE XREF: sub_6B404830+BDp
					; sub_6B404830+7F4p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		test	ecx, ecx
		jz	loc_6B403FF0
		lea	edx, [ebx+4]
		mov	eax, [eax+104h]
		xor	edi, edi
		mov	[esp+3Ch+var_20], edx
		jmp	short loc_6B403F8D
; ---------------------------------------------------------------------------

loc_6B403F74:				; CODE XREF: sub_6B403F50+49j
					; sub_6B403F50+9Cj
		add	edi, 1
		cmp	ecx, edi
		mov	[ebx+eax+4], dl
		mov	[ebx+104h], ebp
		mov	[ebx+108h], dl
		jbe	short loc_6B403FF0
		mov	eax, ebp

loc_6B403F8D:				; CODE XREF: sub_6B403F50+22j
		cmp	eax, 0FFh
		movzx	edx, byte ptr [esi+edi]
		lea	ebp, [eax+1]
		jnz	short loc_6B403F74
		mov	eax, [ebx+110h]
		mov	ebp, 1
		mov	[esp+3Ch+var_24], dl
		mov	[esp+3Ch+var_28], ecx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+3Ch+var_34], eax
		mov	eax, [ebx+104h]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ebx+10Ch]
		xor	eax, eax
		mov	ecx, [esp+3Ch+var_28]
		mov	dword ptr [ebx+104h], 0
		movzx	edx, [esp+3Ch+var_24]
		add	dword ptr [ebx+124h], 1
		jmp	short loc_6B403F74
; ---------------------------------------------------------------------------
		align 10h

loc_6B403FF0:				; CODE XREF: sub_6B403F50+Dj
					; sub_6B403F50+39j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6B403F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B404000	proc near		; CODE XREF: sub_6B4043D0+E2p
					; sub_6B404830+76p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	[esp+3Ch+var_3C], edx ;	char *
		call	strlen
		test	eax, eax
		jz	loc_6B4040B0
		lea	ecx, [ebx+4]
		mov	edx, [ebx+104h]
		xor	edi, edi
		mov	[esp+3Ch+var_20], ecx
		jmp	short loc_6B404049
; ---------------------------------------------------------------------------
		align 10h

loc_6B404030:				; CODE XREF: sub_6B404000+56j
					; sub_6B404000+A9j
		add	edi, 1
		cmp	eax, edi
		mov	[ebx+edx+4], cl
		mov	[ebx+104h], ebp
		mov	[ebx+108h], cl
		jbe	short loc_6B4040B0
		mov	edx, ebp

loc_6B404049:				; CODE XREF: sub_6B404000+2Aj
		cmp	edx, 0FFh
		movzx	ecx, byte ptr [esi+edi]
		lea	ebp, [edx+1]
		jnz	short loc_6B404030
		mov	edx, [ebx+110h]
		mov	ebp, 1
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_24], cl
		mov	byte ptr [ebx+103h], 0
		mov	[esp+3Ch+var_34], edx
		mov	edx, [ebx+104h]
		mov	[esp+3Ch+var_38], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [ebx+10Ch]
		xor	edx, edx
		movzx	ecx, [esp+3Ch+var_24]
		mov	dword ptr [ebx+104h], 0
		mov	eax, [esp+3Ch+var_28]
		add	dword ptr [ebx+124h], 1
		jmp	short loc_6B404030
; ---------------------------------------------------------------------------
		align 10h

loc_6B4040B0:				; CODE XREF: sub_6B404000+15j
					; sub_6B404000+45j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6B404000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4040C0	proc near		; CODE XREF: sub_6B4043D0+A3p
					; sub_6B404830+6DBp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	edx, ecx
		sub	esp, 20h
		test	ecx, ecx
		mov	ebx, eax
		jz	short loc_6B4040FB
		mov	edi, [ecx+8]
		mov	eax, ecx
		test	edi, edi
		jnz	short loc_6B4040EB
		jmp	loc_6B404180
; ---------------------------------------------------------------------------
		align 10h

loc_6B4040E0:				; CODE XREF: sub_6B4040C0+30j
		mov	ecx, [eax+8]
		test	ecx, ecx
		jz	loc_6B404180

loc_6B4040EB:				; CODE XREF: sub_6B4040C0+17j
		mov	eax, [eax]
		test	eax, eax
		nop
		jnz	short loc_6B4040E0
		xor	ecx, ecx
		mov	eax, ebx
		call	sub_6B4043D0

loc_6B4040FB:				; CODE XREF: sub_6B4040C0+Ej
		mov	eax, [ebx+104h]

loc_6B404101:				; CODE XREF: sub_6B4040C0+142j
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6B40424E

loc_6B40410F:				; CODE XREF: sub_6B4040C0+1CDj
		mov	byte ptr [ebx+eax+4], 20h
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 20h

loc_6B404121:				; CODE XREF: sub_6B4040C0+26Fj
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6B4042D6

loc_6B404130:				; CODE XREF: sub_6B4040C0+255j
		mov	byte ptr [ebx+edx+4], 5Bh
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 5Bh
		mov	edx, [esi+4]
		test	edx, edx
		jz	short loc_6B404156
		mov	eax, ebx
		call	sub_6B404830
		mov	eax, [ebx+104h]

loc_6B404156:				; CODE XREF: sub_6B4040C0+87j
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6B404292

loc_6B404164:				; CODE XREF: sub_6B4040C0+211j
		mov	byte ptr [ebx+eax+4], 5Dh
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 5Dh
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B404180:				; CODE XREF: sub_6B4040C0+19j
					; sub_6B4040C0+25j
		mov	eax, [eax+4]
		cmp	dword ptr [eax], 26h
		jz	loc_6B404320
		mov	ecx, [ebx+104h]
		lea	edi, [ebx+4]
		cmp	ecx, 0FFh
		jz	loc_6B404334
		lea	eax, [ecx+1]
		cmp	eax, 0FFh
		mov	byte ptr [ebx+ecx+4], 20h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 20h
		jz	short loc_6B404207

loc_6B4041BD:				; CODE XREF: sub_6B4040C0+2BFj
		lea	ecx, [eax+1]

loc_6B4041C0:				; CODE XREF: sub_6B4040C0+189j
		mov	byte ptr [ebx+eax+4], 28h
		mov	eax, ebx
		mov	[ebx+104h], ecx
		xor	ecx, ecx
		mov	byte ptr [ebx+108h], 28h
		call	sub_6B4043D0
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6B404384

loc_6B4041F0:				; CODE XREF: sub_6B4040C0+2FEj
		mov	byte ptr [ebx+edx+4], 29h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 29h
		jmp	loc_6B404101
; ---------------------------------------------------------------------------

loc_6B404207:				; CODE XREF: sub_6B4040C0+FBj
		mov	eax, [ebx+110h]
		mov	[esp+2Ch+var_10], edx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_2C], edi
		call	dword ptr [ebx+10Ch]
		mov	ecx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B4041C0
; ---------------------------------------------------------------------------

loc_6B40424E:				; CODE XREF: sub_6B4040C0+49j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B40410F
; ---------------------------------------------------------------------------

loc_6B404292:				; CODE XREF: sub_6B4040C0+9Ej
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B404164
; ---------------------------------------------------------------------------

loc_6B4042D6:				; CODE XREF: sub_6B4040C0+6Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B404130
; ---------------------------------------------------------------------------
		align 10h

loc_6B404320:				; CODE XREF: sub_6B4040C0+C6j
		xor	ecx, ecx
		mov	eax, ebx
		call	sub_6B4043D0
		mov	edx, [ebx+104h]
		jmp	loc_6B404121
; ---------------------------------------------------------------------------

loc_6B404334:				; CODE XREF: sub_6B4040C0+DBj
		mov	eax, [ebx+110h]
		mov	[esp+2Ch+var_10], edx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_2C], edi
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		mov	byte ptr [ebx+4], 20h
		mov	dword ptr [ebx+104h], 1
		mov	byte ptr [ebx+108h], 20h
		jmp	loc_6B4041BD
; ---------------------------------------------------------------------------

loc_6B404384:				; CODE XREF: sub_6B4040C0+12Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_2C], edi
		mov	[esp+2Ch+var_24], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B4041F0
sub_6B4040C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4043D0	proc near		; CODE XREF: sub_6B4040C0+36p
					; sub_6B4040C0+116p ...
		push	ebp
		mov	ebp, ecx
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 0Ch
		test	edx, edx
		jnz	short loc_6B404421
		jmp	short loc_6B404450
; ---------------------------------------------------------------------------

loc_6B4043E3:				; CODE XREF: sub_6B4043D0+64j
		mov	edx, [ebx+4]

loc_6B4043E6:				; CODE XREF: sub_6B4043D0+71j
		mov	eax, [ebx+0Ch]
		mov	edi, [esi+114h]
		mov	dword ptr [ebx+8], 1
		mov	[esi+114h], eax
		mov	eax, [edx]
		cmp	eax, 25h
		jz	short loc_6B404458
		cmp	eax, 26h
		jz	short loc_6B40446F
		cmp	eax, 2
		jz	short loc_6B404486
		mov	eax, esi
		nop
		call	sub_6B405B70
		mov	[esi+114h], edi

loc_6B40441B:				; CODE XREF: sub_6B4043D0+60j
		mov	ebx, [ebx]
		test	ebx, ebx
		jz	short loc_6B404450

loc_6B404421:				; CODE XREF: sub_6B4043D0+Fj
					; sub_6B4043D0+77j
		mov	edx, [esi+11Ch]
		test	edx, edx
		jnz	short loc_6B404450
		mov	eax, [ebx+8]
		test	eax, eax
		jnz	short loc_6B40441B
		test	ebp, ebp
		jnz	short loc_6B4043E3
		mov	edx, [ebx+4]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	short loc_6B4043E6
		mov	ebx, [ebx]
		test	ebx, ebx
		jnz	short loc_6B404421
		lea	esi, [esi+0]

loc_6B404450:				; CODE XREF: sub_6B4043D0+11j
					; sub_6B4043D0+4Fj ...
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B404458:				; CODE XREF: sub_6B4043D0+31j
		mov	ecx, [ebx]
		mov	eax, esi
		call	sub_6B404500
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B40446F:				; CODE XREF: sub_6B4043D0+36j
		mov	ecx, [ebx]
		mov	eax, esi
		call	sub_6B4040C0
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B404486:				; CODE XREF: sub_6B4043D0+3Bj
		mov	ebp, [esi+118h]
		mov	eax, esi
		mov	dword ptr [esi+118h], 0
		mov	edx, [edx+4]
		call	sub_6B404830
		test	byte ptr [esi],	4
		mov	[esi+118h], ebp
		jnz	short loc_6B4044E9
		mov	edx, offset byte_6B40F714
		mov	eax, esi
		call	sub_6B404000

loc_6B4044B7:				; CODE XREF: sub_6B4043D0+125j
		mov	eax, [ebx+4]
		mov	edx, [eax+8]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	short loc_6B4044D4

loc_6B4044C7:				; CODE XREF: sub_6B4043D0+102j
		mov	edx, [edx+4]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		jbe	short loc_6B4044C7

loc_6B4044D4:				; CODE XREF: sub_6B4043D0+F5j
		mov	eax, esi
		call	sub_6B404830
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B4044E9:				; CODE XREF: sub_6B4043D0+D9j
		mov	edx, 2Eh
		mov	eax, esi
		call	sub_6B4022A0
		jmp	short loc_6B4044B7
sub_6B4043D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B404500	proc near		; CODE XREF: sub_6B4043D0+8Cp
					; sub_6B404830+A49p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, ecx
		push	ebx
		mov	ebx, eax
		sub	esp, 1Ch
		test	ecx, ecx
		jz	loc_6B404794
		mov	eax, ecx
		mov	ecx, [ecx+8]
		mov	edx, 1
		test	ecx, ecx
		jnz	loc_6B404794

loc_6B404527:				; CODE XREF: sub_6B404500+DDj
		mov	ecx, [eax+4]
		mov	ecx, [ecx]
		sub	ecx, 17h
		cmp	ecx, 10h
		ja	loc_6B4045D2
		mov	ebp, edx
		shl	ebp, cl
		test	ebp, 10C47h
		mov	ecx, ebp
		jz	loc_6B404675
		movzx	eax, byte ptr [ebx+108h]

loc_6B404551:				; CODE XREF: sub_6B404500+18Ej
		cmp	al, 20h
		jz	loc_6B404694
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6B4047E6

loc_6B40456E:				; CODE XREF: sub_6B404500+323j
		cmp	eax, 0FFh
		mov	byte ptr [ebx+edx+4], 20h
		lea	edx, [eax+1]
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 20h
		jnz	loc_6B4046A8

loc_6B40458E:				; CODE XREF: sub_6B404500+1A2j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B4046A8
; ---------------------------------------------------------------------------

loc_6B4045D2:				; CODE XREF: sub_6B404500+32j
					; sub_6B404500+17Bj
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6B4045E3
		mov	ebp, [eax+8]
		test	ebp, ebp
		jz	loc_6B404527

loc_6B4045E3:				; CODE XREF: sub_6B404500+D6j
					; sub_6B404500+29Fj
		mov	ebp, [ebx+118h]
		xor	ecx, ecx
		mov	edx, esi
		mov	eax, ebx
		mov	dword ptr [ebx+118h], 0
		call	sub_6B4043D0
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_6B40470A

loc_6B404613:				; CODE XREF: sub_6B404500+204j
					; sub_6B404500+249j
		mov	byte ptr [ebx+edx+4], 28h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 28h
		mov	edx, [edi+8]
		test	edx, edx
		jz	short loc_6B404639
		mov	eax, ebx
		call	sub_6B404830
		mov	eax, [ebx+104h]

loc_6B404639:				; CODE XREF: sub_6B404500+12Aj
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6B404750

loc_6B404647:				; CODE XREF: sub_6B404500+28Fj
		mov	byte ptr [ebx+eax+4], 29h
		mov	ecx, 1
		mov	eax, ebx
		mov	[ebx+104h], edx
		mov	edx, esi
		mov	byte ptr [ebx+108h], 29h
		call	sub_6B4043D0
		mov	[ebx+118h], ebp
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B404675:				; CODE XREF: sub_6B404500+44j
		and	ecx, 380h
		jz	loc_6B4045D2

loc_6B404681:				; CODE XREF: sub_6B404500+299j
		movzx	eax, byte ptr [ebx+108h]
		cmp	al, 28h
		jz	short loc_6B404694
		cmp	al, 2Ah
		jnz	loc_6B404551

loc_6B404694:				; CODE XREF: sub_6B404500+53j
					; sub_6B404500+18Aj
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6B40458E

loc_6B4046A8:				; CODE XREF: sub_6B404500+88j
					; sub_6B404500+CDj
		mov	byte ptr [ebx+eax+4], 28h
		mov	ebp, [ebx+118h]
		xor	ecx, ecx
		mov	[ebx+104h], edx
		mov	eax, ebx
		mov	edx, esi
		mov	byte ptr [ebx+108h], 28h
		mov	dword ptr [ebx+118h], 0
		call	sub_6B4043D0
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_6B4047A4

loc_6B4046E9:				; CODE XREF: sub_6B404500+2E1j
		cmp	edx, 0FFh
		mov	byte ptr [ebx+eax+4], 29h
		lea	eax, [edx+1]
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 29h
		jnz	loc_6B404613

loc_6B40470A:				; CODE XREF: sub_6B404500+10Dj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B404613
; ---------------------------------------------------------------------------
		align 10h

loc_6B404750:				; CODE XREF: sub_6B404500+141j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B404647
; ---------------------------------------------------------------------------

loc_6B404794:				; CODE XREF: sub_6B404500+Fj
					; sub_6B404500+21j
		mov	ecx, [edi+4]
		test	ecx, ecx
		jnz	loc_6B404681
		jmp	loc_6B4045E3
; ---------------------------------------------------------------------------

loc_6B4047A4:				; CODE XREF: sub_6B404500+1E3j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B4046E9
; ---------------------------------------------------------------------------

loc_6B4047E6:				; CODE XREF: sub_6B404500+68j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B40456E
sub_6B404500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B404830	proc near		; CODE XREF: sub_6B4040C0+8Bp
					; sub_6B4043D0+CBp ...

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_64		= byte ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 9Ch
		test	edx, edx
		mov	[esp+9Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+9Ch+var_4], ebp
		mov	ebp, edx
		mov	[esp+9Ch+var_C], esi
		mov	[esp+9Ch+var_8], edi
		jz	short loc_6B40486B ; jumptable 6B404898	default	case
		mov	eax, [eax+11Ch]
		test	eax, eax
		jnz	short loc_6B404875 ; jumptable 6B405509	default	case
		mov	eax, [edx]
		cmp	eax, 3Ch	; switch 61 cases
		jbe	short loc_6B404898

loc_6B40486B:				; CODE XREF: sub_6B404830+28j
					; sub_6B404830:loc_6B404898j ...
		mov	dword ptr [ebx+11Ch], 1	; jumptable 6B404898 default case

loc_6B404875:				; CODE XREF: sub_6B404830+32j
					; sub_6B404830+85j ...
		mov	ebx, [esp+9Ch+var_10] ;	jumptable 6B405509 default case
		mov	esi, [esp+9Ch+var_C]
		mov	edi, [esp+9Ch+var_8]
		mov	ebp, [esp+9Ch+var_4]
		add	esp, 9Ch
		retn
; ---------------------------------------------------------------------------

loc_6B404898:				; CODE XREF: sub_6B404830+39j
		jmp	ds:off_6B40F8C8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6B40489F:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aVtableFor ; jumptable 6B404898 case 9

loc_6B4048A4:				; CODE XREF: sub_6B404830+D7j
					; sub_6B404830+DEj ...
		mov	eax, ebx
		call	sub_6B404000

loc_6B4048AB:				; CODE XREF: sub_6B404830:loc_6B404898j
					; sub_6B404830+786j
					; DATA XREF: ...
		mov	edx, [ebp+4]	; jumptable 6B404898 case 36
		mov	eax, ebx
		call	sub_6B404830
		jmp	short loc_6B404875 ; jumptable 6B405509	default	case
; ---------------------------------------------------------------------------

loc_6B4048B7:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aConstructionVt ; jumptable	6B404898 case 11
		mov	eax, ebx
		call	sub_6B404000
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, offset aIn	; "-in-"

loc_6B4048D2:				; CODE XREF: sub_6B404830+803j
		mov	eax, ebx
		call	sub_6B404000

loc_6B4048D9:				; CODE XREF: sub_6B404830:loc_6B404898j
					; sub_6B404830+D0j ...
		mov	edx, [ebp+8]	; jumptable 6B404898 case 7
		mov	eax, ebx
		call	sub_6B404830
		jmp	short loc_6B404875 ; jumptable 6B405509	default	case
; ---------------------------------------------------------------------------

loc_6B4048E5:				; CODE XREF: sub_6B404830:loc_6B404898j
					; sub_6B404830+181j
					; DATA XREF: ...
		mov	ecx, [ebp+8]	; jumptable 6B404898 case 22
		mov	eax, ebx
		mov	edx, [ebp+4]
		call	sub_6B403F50
		jmp	short loc_6B404875 ; jumptable 6B405509	default	case
; ---------------------------------------------------------------------------

loc_6B4048F4:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, 7Eh	; jumptable 6B404898 case 8
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	short loc_6B4048D9 ; jumptable 6B404898	case 7
; ---------------------------------------------------------------------------

loc_6B404902:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aVttFor ; jumptable	6B404898 case 10
		jmp	short loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B404909:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aTypeinfoFor ; jumptable 6B404898 case 12
		jmp	short loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B404910:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aTypeinfoNameFo ; jumptable	6B404898 case 13
		jmp	short loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B404917:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aTypeinfoFnFor ; jumptable 6B404898	case 14
		jmp	short loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B40491E:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aNonVirtualThun ; jumptable	6B404898 case 15
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B404928:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, [edx+4]	; jumptable 6B404898 case 60
		mov	eax, ebx
		call	sub_6B402320
		test	eax, eax
		jz	loc_6B4056AF
		cmp	dword ptr [eax], 2Ah
		jnz	loc_6B404875	; jumptable 6B405509 default case
		mov	edx, [eax+4]
		xor	esi, esi
		test	edx, edx
		jnz	short loc_6B404964
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404951:				; CODE XREF: sub_6B404830+13Cj
		cmp	dword ptr [eax], 2Ah
		jnz	short loc_6B40496E
		mov	edi, [eax+4]
		test	edi, edi
		nop
		lea	esi, [esi+0]
		jz	short loc_6B40496E
		mov	esi, edx

loc_6B404964:				; CODE XREF: sub_6B404830+11Aj
		mov	eax, [eax+8]
		lea	edx, [esi+1]
		test	eax, eax
		jnz	short loc_6B404951

loc_6B40496E:				; CODE XREF: sub_6B404830+124j
					; sub_6B404830+130j
		mov	[esp+9Ch+var_7C], edx
		xor	edi, edi
		mov	ebp, [ebp+4]
		jmp	short loc_6B40498D
; ---------------------------------------------------------------------------
		align 10h

loc_6B404980:				; CODE XREF: sub_6B404830+16Ej
					; sub_6B404830+17Cj
		add	edi, 1
		cmp	[esp+9Ch+var_7C], edi
		jle	loc_6B404875	; jumptable 6B405509 default case

loc_6B40498D:				; CODE XREF: sub_6B404830+147j
		mov	[ebx+120h], edi
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6B404830
		cmp	esi, edi
		jle	short loc_6B404980
		mov	edx, offset asc_6B40F830 ; ", "
		mov	eax, ebx
		call	sub_6B404000
		jmp	short loc_6B404980
; ---------------------------------------------------------------------------

loc_6B4049AE:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		test	byte ptr [ebx],	4 ; jumptable 6B404898 case 0
		jz	loc_6B4048E5	; jumptable 6B404898 case 22
		mov	eax, [edx+4]
		mov	edi, [edx+8]
		add	edi, eax
		cmp	eax, edi
		jb	short loc_6B4049EB
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B4049C8:				; CODE XREF: sub_6B404830+1C2j
		movzx	edx, byte ptr [eax]
		lea	esi, [eax+1]
		cmp	dl, 5Fh
		jz	loc_6B4052FC

loc_6B4049D7:				; CODE XREF: sub_6B404830+1CAj
					; sub_6B404830+AD3j ...
		movsx	edx, dl
		mov	eax, ebx
		call	sub_6B4022A0

loc_6B4049E1:				; CODE XREF: sub_6B404830+ECBj
		cmp	esi, edi
		jnb	loc_6B404875	; jumptable 6B405509 default case
		mov	eax, esi

loc_6B4049EB:				; CODE XREF: sub_6B404830+191j
		mov	edx, edi
		sub	edx, eax
		cmp	edx, 3
		jg	short loc_6B4049C8
		lea	esi, [eax+1]
		movzx	edx, byte ptr [eax]
		jmp	short loc_6B4049D7
; ---------------------------------------------------------------------------

loc_6B4049FC:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, [edx+4]	; jumptable 6B404898 cases 1,2
		mov	eax, ebx
		call	sub_6B404830
		test	byte ptr [ebx],	4
		jnz	loc_6B405372
		mov	edx, offset byte_6B40F714
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B4048D9	; jumptable 6B404898 case 7
; ---------------------------------------------------------------------------

loc_6B404A20:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	eax, [ebx+118h]	; jumptable 6B404898 case 3
		mov	dword ptr [ebx+118h], 0
		mov	[esp+9Ch+var_74], eax
		mov	esi, [edx+4]
		test	esi, esi
		jz	loc_6B40486B	; jumptable 6B404898 default case
		lea	edx, [esp+9Ch+var_64]
		mov	ecx, [ebx+114h]
		mov	[esp+9Ch+var_7C], edx
		mov	[ebx+118h], edx
		mov	edx, [esi]
		mov	dword ptr [esp+9Ch+var_64], 0
		mov	[esp+9Ch+var_60], esi
		mov	[esp+9Ch+var_5C], 0
		lea	eax, [edx-1Ah]
		cmp	eax, 2
		mov	[esp+9Ch+var_78], ecx
		mov	[esp+9Ch+var_58], ecx
		ja	loc_6B405700
		lea	eax, [esp+9Ch+var_54]
		mov	edi, 1

loc_6B404A86:				; CODE XREF: sub_6B404830+297j
		mov	esi, [esi+4]
		test	esi, esi
		jz	loc_6B40486B	; jumptable 6B404898 default case
		cmp	edi, 4
		jz	loc_6B40486B	; jumptable 6B404898 default case
		mov	edx, [ebx+118h]
		add	edi, 1
		mov	[eax+4], esi
		mov	dword ptr [eax+8], 0
		mov	[eax], edx
		mov	edx, [esp+9Ch+var_78]
		mov	[ebx+118h], eax
		mov	[eax+0Ch], edx
		mov	edx, [esi]
		add	eax, 10h
		lea	ecx, [edx-1Ah]
		cmp	ecx, 2
		jbe	short loc_6B404A86

loc_6B404AC9:				; CODE XREF: sub_6B404830+ED5j
		cmp	edx, 4
		jz	loc_6B405685
		cmp	edx, 2
		jnz	loc_6B404B8E
		mov	edx, [esi+8]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	loc_6B404B8E
		cmp	edi, 3
		ja	loc_6B40486B	; jumptable 6B404898 default case
		mov	ecx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	eax, [eax+ecx-10h]
		mov	[esp+9Ch+var_80], eax
		mov	eax, edi
		shl	eax, 4
		lea	ecx, [eax+ecx-10h]
		mov	eax, edi
		mov	[esp+9Ch+var_70], ecx
		mov	ecx, [esp+9Ch+var_7C]
		shl	eax, 4
		add	ecx, eax
		mov	[esp+9Ch+var_78], ecx
		mov	ecx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_70], esi
		mov	esi, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_78], ebp
		mov	eax, ecx
		jmp	short loc_6B404B48
; ---------------------------------------------------------------------------

loc_6B404B36:				; CODE XREF: sub_6B404830+354j
		add	eax, 10h
		add	ecx, 10h
		add	esi, 10h
		cmp	edi, 3
		ja	loc_6B40486B	; jumptable 6B404898 default case

loc_6B404B48:				; CODE XREF: sub_6B404830+304j
		mov	ebp, [eax+4]
		add	edi, 1
		mov	[eax+10h], ecx
		mov	[eax+4], edx
		mov	[eax+14h], ebp
		mov	ebp, [eax+8]
		mov	dword ptr [eax+8], 0
		mov	[eax+18h], ebp
		mov	ebp, [eax+0Ch]
		mov	[eax+1Ch], ebp
		mov	ebp, [ebx+114h]
		mov	[ebx+118h], esi
		mov	[eax+0Ch], ebp
		mov	edx, [edx+4]
		mov	ebp, [edx]
		sub	ebp, 1Ah
		cmp	ebp, 2
		jbe	short loc_6B404B36
		mov	esi, [esp+9Ch+var_70]
		mov	ebp, [esp+9Ch+var_78]

loc_6B404B8E:				; CODE XREF: sub_6B404830+2A5j
					; sub_6B404830+2B6j ...
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6B404830
		cmp	dword ptr [esi], 4
		jz	loc_6B4056A0

loc_6B404BA1:				; CODE XREF: sub_6B404830+E7Aj
		test	edi, edi
		jz	loc_6B405576
		mov	edx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	esi, [edx+eax-8]
		jmp	short loc_6B404BC3
; ---------------------------------------------------------------------------

loc_6B404BB8:				; CODE XREF: sub_6B404830+39Aj
					; sub_6B404830+3B2j
		sub	esi, 10h
		test	edi, edi
		jz	loc_6B405576

loc_6B404BC3:				; CODE XREF: sub_6B404830+386j
		mov	ebp, [esi]
		sub	edi, 1
		test	ebp, ebp
		jnz	short loc_6B404BB8
		mov	eax, ebx
		mov	edx, 20h
		call	sub_6B4022A0
		mov	edx, [esi-4]
		mov	eax, ebx
		call	sub_6B405B70
		jmp	short loc_6B404BB8
; ---------------------------------------------------------------------------

loc_6B404BE4:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aJavaClassFor ; jumptable 6B404898 case 18
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B404BEE:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aGuardVariableF ; jumptable	6B404898 case 19
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B404BF8:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		cmp	word ptr [edx+0Ah], 0 ;	jumptable 6B404898 case	40
		jnz	loc_6B4053A9

loc_6B404C03:				; CODE XREF: sub_6B404830+B85j
		mov	edx, [ebp+4]
		cmp	dword ptr [edx+4], offset off_6B40FC60
		jz	short loc_6B404C22
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6B4022A0

loc_6B404C22:				; CODE XREF: sub_6B404830+3DDj
		cmp	word ptr [ebp+8], 0
		jz	loc_6B405398
		mov	edx, offset a_accum ; "_Accum"
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404C3E:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, [edx+4]	; jumptable 6B404898 cases 41,42
		test	edx, edx
		jz	short loc_6B404C4C
		mov	eax, ebx
		call	sub_6B404830

loc_6B404C4C:				; CODE XREF: sub_6B404830+413j
		mov	eax, [ebp+8]
		test	eax, eax
		jz	loc_6B404875	; jumptable 6B405509 default case
		mov	eax, [ebx+104h]
		cmp	eax, 0FDh
		ja	loc_6B405430

loc_6B404C68:				; CODE XREF: sub_6B404830+C30j
		mov	edx, offset asc_6B40F830 ; ", "
		mov	eax, ebx
		call	sub_6B404000
		mov	edx, [ebp+8]
		mov	eax, ebx
		mov	esi, [ebx+124h]
		mov	edi, [ebx+104h]
		call	sub_6B404830
		cmp	[ebx+124h], esi
		jnz	loc_6B404875	; jumptable 6B405509 default case
		mov	eax, [ebx+104h]
		cmp	eax, edi
		jnz	loc_6B404875	; jumptable 6B405509 default case
		sub	eax, 2
		mov	[ebx+104h], eax
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404CB2:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edi, [ebx+118h]	; jumptable 6B404898 cases 26-34

loc_6B404CB8:				; CODE XREF: sub_6B404830+754j
					; sub_6B404830+764j ...
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	dword ptr [esp+9Ch+var_64], edi
		mov	[esp+9Ch+var_60], ebp
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_58], eax
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B404830
		mov	esi, [esp+9Ch+var_5C]
		test	esi, esi
		jnz	short loc_6B404CF7
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6B405B70

loc_6B404CF7:				; CODE XREF: sub_6B404830+4BCj
					; sub_6B404830+71Fj ...
		mov	eax, dword ptr [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404D06:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	eax, ebx	; jumptable 6B404898 case 45
		mov	edx, offset aOperator ;	"operator "
		call	sub_6B404000
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6B405C60
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404D20:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, [edx+4]	; jumptable 6B404898 case 46
		cmp	dword ptr [edx], 2Dh
		jz	loc_6B4053CC
		mov	eax, ebx
		xchg	ax, ax
		call	sub_6B405E00

loc_6B404D35:				; CODE XREF: sub_6B404830+BBEj
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6B405EE0
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404D44:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	eax, [edx+8]	; jumptable 6B404898 case 47
		cmp	dword ptr [eax], 30h
		jnz	loc_6B40486B	; jumptable 6B404898 default case
		mov	edx, [edx+4]
		cmp	dword ptr [edx], 2Bh
		jz	loc_6B4055E2

loc_6B404D5C:				; CODE XREF: sub_6B404830+DB9j
					; sub_6B404830+DC5j ...
		mov	edx, [eax+4]
		mov	eax, ebx
		mov	edi, offset aIx	; "ix"
		call	sub_6B405EE0
		mov	edx, [ebp+4]
		mov	ecx, 3
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp+9Ch+var_7C], eax
		mov	esi, eax
		repe cmpsb
		jz	loc_6B4055B8
		mov	esi, [esp+9Ch+var_7C]
		mov	edi, offset aCl	; "cl"
		mov	ecx, 3
		repe cmpsb
		jnz	loc_6B40566B

loc_6B404D9C:				; CODE XREF: sub_6B404830+E45j
		mov	eax, [ebp+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6B405EE0

loc_6B404DA9:				; CODE XREF: sub_6B404830+DADj
		mov	eax, [ebp+4]
		cmp	dword ptr [eax], 2Bh
		jnz	loc_6B404875	; jumptable 6B405509 default case
		mov	eax, [eax+4]
		cmp	dword ptr [eax+8], 1
		jnz	loc_6B404875	; jumptable 6B405509 default case
		mov	eax, [eax+4]
		cmp	byte ptr [eax],	3Eh
		jnz	loc_6B404875	; jumptable 6B405509 default case

loc_6B404DCE:				; CODE XREF: sub_6B404830+AAEj
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404DDF:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		movsx	edx, byte ptr [edx+4] ;	jumptable 6B404898 case	56
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404DEF:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	esi, [ebx+118h]	; jumptable 6B404898 case 38
		lea	ecx, [esp+9Ch+var_64]
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_7C], ecx
		mov	[ebx+118h], ecx
		mov	[esp+9Ch+var_78], esi
		mov	[esp+9Ch+var_58], eax
		mov	eax, [esp+9Ch+var_78]
		mov	dword ptr [esp+9Ch+var_64], esi
		mov	esi, ecx
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], 0
		test	eax, eax
		jz	loc_6B40567A
		mov	edx, [esp+9Ch+var_78]
		mov	eax, [edx+4]
		mov	eax, [eax]
		sub	eax, 17h
		cmp	eax, 2
		ja	loc_6B40567A
		mov	eax, edx
		mov	edi, 1
		mov	[esp+9Ch+var_74], ebp
		jmp	short loc_6B404E5E
; ---------------------------------------------------------------------------

loc_6B404E51:				; CODE XREF: sub_6B404830+67Dj
		mov	edx, [eax+4]
		mov	edx, [edx]
		sub	edx, 17h
		cmp	edx, 2
		ja	short loc_6B404EAF

loc_6B404E5E:				; CODE XREF: sub_6B404830+61Fj
		mov	ebp, [eax+8]
		test	ebp, ebp
		jnz	short loc_6B404EA9
		cmp	edi, 3
		ja	loc_6B40486B	; jumptable 6B404898 default case
		mov	ebp, [eax]
		mov	edx, edi
		add	edi, 1
		shl	edx, 4
		lea	ecx, [esp+edx+9Ch+var_64]
		mov	dword ptr [esp+edx+9Ch+var_64],	ebp
		mov	ebp, [eax+4]
		mov	[ecx+4], ebp
		mov	ebp, [eax+8]
		mov	[ecx+8], ebp
		mov	ebp, [eax+0Ch]
		mov	[ecx+0Ch], ebp
		mov	dword ptr [esp+edx+9Ch+var_64],	esi
		mov	esi, [esp+9Ch+var_7C]
		mov	dword ptr [eax+8], 1
		add	esi, edx
		mov	[ebx+118h], esi

loc_6B404EA9:				; CODE XREF: sub_6B404830+633j
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6B404E51

loc_6B404EAF:				; CODE XREF: sub_6B404830+62Cj
		mov	ebp, [esp+9Ch+var_74]

loc_6B404EB3:				; CODE XREF: sub_6B404830+E50j
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6B404830
		mov	ecx, [esp+9Ch+var_78]
		mov	[ebx+118h], ecx
		mov	ecx, [esp+9Ch+var_5C]
		test	ecx, ecx
		jnz	loc_6B404875	; jumptable 6B405509 default case
		cmp	edi, 1
		jz	short loc_6B404F03
		mov	edx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	esi, [edx+eax-0Ch]

loc_6B404EE5:				; CODE XREF: sub_6B404830+6C7j
		mov	edx, [esi]
		sub	edi, 1
		mov	eax, ebx
		sub	esi, 10h
		call	sub_6B405B70
		cmp	edi, 1
		ja	short loc_6B404EE5
		mov	ecx, [ebx+118h]
		mov	[esp+9Ch+var_78], ecx

loc_6B404F03:				; CODE XREF: sub_6B404830+6A6j
		mov	ecx, [esp+9Ch+var_78]
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6B4040C0
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404F15:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	eax, [ebx+118h]	; jumptable 6B404898 case 39
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], 0
		mov	dword ptr [esp+9Ch+var_64], eax
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_58], eax
		mov	edx, [edx+8]
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, [esp+9Ch+var_5C]
		test	edx, edx
		jnz	loc_6B404CF7
		mov	eax, ebx
		mov	edx, 20h
		call	sub_6B4022A0
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, offset asc_6B40F818 ; "::*"
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404CF7
; ---------------------------------------------------------------------------

loc_6B404F7C:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edi, [ebx+118h]	; jumptable 6B404898 cases 23-25
		test	edi, edi
		jz	loc_6B404CB8
		mov	edx, edi
		jmp	short loc_6B404F9A
; ---------------------------------------------------------------------------
		align 10h

loc_6B404F90:				; CODE XREF: sub_6B404830+76Fj
					; sub_6B404830+784j
		mov	edx, [edx]
		test	edx, edx
		jz	loc_6B404CB8

loc_6B404F9A:				; CODE XREF: sub_6B404830+75Cj
		mov	ecx, [edx+8]
		test	ecx, ecx
		jnz	short loc_6B404F90
		mov	ecx, [edx+4]
		mov	ecx, [ecx]
		lea	esi, [ecx-17h]
		cmp	esi, 2
		ja	loc_6B404CB8
		cmp	eax, ecx
		jnz	short loc_6B404F90
		jmp	loc_6B4048AB	; jumptable 6B404898 case 36
; ---------------------------------------------------------------------------

loc_6B404FBB:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aParm ; jumptable 6B404898 case 6
		mov	eax, ebx
		call	sub_6B404000
		mov	eax, [ebp+4]
		lea	esi, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_98], offset aLd ; "%ld"
		mov	[esp+9Ch+var_9C], esi ;	char *
		mov	[esp+9Ch+var_94], eax
		call	sprintf
		mov	edx, esi
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B404FF0:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aOperator_0	; jumptable 6B404898 case 43
		mov	eax, ebx
		call	sub_6B404000
		mov	eax, [ebp+4]
		mov	edx, [eax+4]
		movzx	ecx, byte ptr [edx]
		sub	ecx, 61h
		cmp	cl, 19h
		ja	short loc_6B40501F
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6B4022A0
		mov	eax, [ebp+4]
		mov	edx, [eax+4]

loc_6B40501F:				; CODE XREF: sub_6B404830+7DBj
		mov	ecx, [eax+8]
		mov	eax, ebx
		call	sub_6B403F50
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B40502E:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aOperator ;	jumptable 6B404898 case	44
		jmp	loc_6B4048D2
; ---------------------------------------------------------------------------

loc_6B405038:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aReferenceTempo ; jumptable	6B404898 case 20
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B405042:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aHiddenAliasFor ; jumptable	6B404898 case 21
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B40504C:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aGlobalDestruct ; jumptable	6B404898 case 59
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B405056:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, [edx+4]	; jumptable 6B404898 cases 52,53
		xor	esi, esi
		cmp	dword ptr [edx], 23h
		jnz	short loc_6B40507D
		mov	edx, [edx+4]
		mov	esi, [edx+10h]
		cmp	esi, 1
		jb	short loc_6B40507D
		cmp	esi, 6
		jbe	loc_6B4054E0
		cmp	esi, 7
		jz	loc_6B405495

loc_6B40507D:				; CODE XREF: sub_6B404830+82Ej
					; sub_6B404830+839j ...
		mov	edx, 28h
		mov	eax, ebx
		call	sub_6B4022A0
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6B4022A0
		cmp	dword ptr [ebp+0], 35h
		jz	loc_6B4055A7

loc_6B4050A9:				; CODE XREF: sub_6B404830+D83j
		cmp	esi, 8
		jnz	loc_6B4048D9	; jumptable 6B404898 case 7
		mov	eax, ebx
		mov	edx, 5Bh
		call	sub_6B4022A0
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, 5Dh
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B4050D9:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	eax, [ebx+118h]	; jumptable 6B404898 case 4
		test	byte ptr [ebx],	4
		mov	dword ptr [ebx+118h], 0
		mov	[esp+9Ch+var_7C], eax
		mov	edx, [edx+4]
		jz	short loc_6B405105
		mov	esi, [edx]
		test	esi, esi
		jnz	short loc_6B405105
		cmp	dword ptr [edx+8], 6
		jz	loc_6B405619

loc_6B405105:				; CODE XREF: sub_6B404830+8C3j
					; sub_6B404830+8C9j ...
		mov	eax, ebx
		call	sub_6B404830
		cmp	byte ptr [ebx+108h], 3Ch
		jz	loc_6B405596

loc_6B405119:				; CODE XREF: sub_6B404830+D72j
		mov	edx, 3Ch
		mov	eax, ebx
		call	sub_6B4022A0
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6B404830
		cmp	byte ptr [ebx+108h], 3Eh
		jz	loc_6B405585

loc_6B40513C:				; CODE XREF: sub_6B404830+D61j
		mov	edx, 3Eh
		mov	eax, ebx
		call	sub_6B4022A0

loc_6B405148:				; CODE XREF: sub_6B404830+E14j
		mov	edx, [esp+9Ch+var_7C]
		mov	[ebx+118h], edx
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405157:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	esi, [ebx+114h]	; jumptable 6B404898 case 5
		test	esi, esi
		jz	loc_6B405567
		mov	eax, [esi+4]
		mov	edx, [edx+4]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6B40518D
		jmp	loc_6B40486B	; jumptable 6B404898 default case
; ---------------------------------------------------------------------------

loc_6B405177:				; CODE XREF: sub_6B404830+960j
		test	edx, edx
		jle	loc_6B4053F3
		mov	eax, [eax+8]
		sub	edx, 1
		test	eax, eax
		jz	loc_6B40486B	; jumptable 6B404898 default case

loc_6B40518D:				; CODE XREF: sub_6B404830+940j
		cmp	dword ptr [eax], 2Ah
		jz	short loc_6B405177
		jmp	loc_6B40486B	; jumptable 6B404898 default case
; ---------------------------------------------------------------------------

loc_6B405197:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	eax, [edx+8]	; jumptable 6B404898 case 49
		cmp	dword ptr [eax], 32h
		lea	esi, [esi+0]
		jnz	loc_6B40486B	; jumptable 6B404898 default case
		mov	edx, [eax+8]
		cmp	dword ptr [edx], 33h
		jnz	loc_6B40486B	; jumptable 6B404898 default case
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6B405EE0
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B405E00
		mov	eax, [ebp+8]
		mov	eax, [eax+8]
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6B405EE0
		mov	eax, ebx
		mov	edx, offset asc_6B40F849 ; " : "
		call	sub_6B404000
		mov	eax, [ebp+8]
		mov	eax, [eax+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6B405EE0
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B4051F7:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		test	byte ptr [ebx],	20h ; jumptable	6B404898 case 37
		jnz	loc_6B4053BA

loc_6B405200:				; CODE XREF: sub_6B404830+B97j
		mov	ecx, [ebp+4]
		test	ecx, ecx
		jz	short loc_6B405266
		mov	eax, [ebx+118h]
		mov	[esp+9Ch+var_60], ebp
		mov	[esp+9Ch+var_5C], 0
		mov	dword ptr [esp+9Ch+var_64], eax
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_58], eax
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, [esp+9Ch+var_5C]
		mov	eax, dword ptr [esp+9Ch+var_64]
		test	edx, edx
		mov	[ebx+118h], eax
		jnz	loc_6B404875	; jumptable 6B405509 default case
		test	byte ptr [ebx],	20h
		jnz	loc_6B404875	; jumptable 6B405509 default case
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6B4022A0

loc_6B405266:				; CODE XREF: sub_6B404830+9D5j
		test	byte ptr [ebx],	20h
		jnz	loc_6B404875	; jumptable 6B405509 default case
		mov	ecx, [ebx+118h]
		mov	edx, ebp
		mov	eax, ebx
		call	sub_6B404500
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405283:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aGlobalConstruc ; jumptable	6B404898 case 58
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B40528D:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aVirtualThunkTo ; jumptable	6B404898 case 16
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B405297:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aCovariantRetur ; jumptable	6B404898 case 17
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B4052A1:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		test	byte ptr [ebx],	4 ; jumptable 6B404898 case 35
		jnz	loc_6B405383
		mov	eax, [edx+4]
		mov	ecx, [eax+4]
		mov	edx, [eax]
		mov	eax, ebx
		call	sub_6B403F50
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B4052BE:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, offset aJavaResource ; jumptable 6B404898 case 54
		jmp	loc_6B4048A4
; ---------------------------------------------------------------------------

loc_6B4052C8:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	eax, ebx	; jumptable 6B404898 case 57
		mov	edx, offset aDecltype ;	"decltype ("
		call	sub_6B404000
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B404830
		jmp	loc_6B404DCE
; ---------------------------------------------------------------------------

loc_6B4052E3:				; CODE XREF: sub_6B404830:loc_6B404898j
					; DATA XREF: .rdata:off_6B40F8C8o
		mov	edx, [edx+4]	; jumptable 6B404898 case 55
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6B404830
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B4052FC:				; CODE XREF: sub_6B404830+1A1j
		cmp	byte ptr [eax+1], 5Fh
		lea	esi, [eax+1]
		jnz	loc_6B4049D7
		cmp	byte ptr [eax+2], 55h
		lea	esi, [esi+0]
		jnz	loc_6B4049D7
		lea	ebp, [eax+3]
		cmp	edi, ebp
		jbe	loc_6B4049D7
		xor	ecx, ecx
		mov	[esp+9Ch+var_7C], esi
		mov	esi, ecx
		jmp	short loc_6B405342
; ---------------------------------------------------------------------------

loc_6B40532B:				; CODE XREF: sub_6B404830+B1Cj
		movsx	eax, al
		sub	eax, 30h

loc_6B405331:				; CODE XREF: sub_6B404830+B2Cj
					; sub_6B404830+B40j
		add	ebp, 1
		cmp	edi, ebp
		jbe	loc_6B405610
		shl	esi, 4
		lea	esi, [eax+esi]

loc_6B405342:				; CODE XREF: sub_6B404830+AF9j
		movzx	eax, byte ptr [ebp+0]
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_6B40532B
		lea	ecx, [eax-41h]
		cmp	cl, 5
		ja	short loc_6B40535E
		movsx	eax, al
		sub	eax, 37h
		jmp	short loc_6B405331
; ---------------------------------------------------------------------------

loc_6B40535E:				; CODE XREF: sub_6B404830+B24j
		lea	ecx, [eax-61h]
		cmp	cl, 5
		ja	loc_6B4056CA
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_6B405331
; ---------------------------------------------------------------------------

loc_6B405372:				; CODE XREF: sub_6B404830+1D9j
		mov	edx, 2Eh
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B4048D9	; jumptable 6B404898 case 7
; ---------------------------------------------------------------------------

loc_6B405383:				; CODE XREF: sub_6B404830+A74j
		mov	eax, [edx+4]
		mov	ecx, [eax+0Ch]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6B403F50
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405398:				; CODE XREF: sub_6B404830+3F7j
		mov	edx, offset a_fract ; "_Fract"
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B4053A9:				; CODE XREF: sub_6B404830+3CDj
		mov	edx, offset a_sat ; "_Sat "
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404C03
; ---------------------------------------------------------------------------

loc_6B4053BA:				; CODE XREF: sub_6B404830+9CAj
		mov	ecx, [ebx+118h]
		mov	eax, ebx
		call	sub_6B404500
		jmp	loc_6B405200
; ---------------------------------------------------------------------------

loc_6B4053CC:				; CODE XREF: sub_6B404830+4F6j
		mov	eax, ebx
		mov	edx, 28h
		call	sub_6B4022A0
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B405C60
		mov	edx, 29h
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B404D35
; ---------------------------------------------------------------------------

loc_6B4053F3:				; CODE XREF: sub_6B404830+949j
		test	eax, eax
		jz	loc_6B40486B	; jumptable 6B404898 default case
		test	edx, edx
		lea	esi, [esi+0]
		jnz	loc_6B40486B	; jumptable 6B404898 default case
		mov	edx, [eax+4]
		test	edx, edx
		jz	loc_6B40486B	; jumptable 6B404898 default case
		cmp	dword ptr [edx], 2Ah
		jz	short loc_6B405465

loc_6B405416:				; CODE XREF: sub_6B404830+E30j
		mov	eax, [esi]
		mov	[ebx+114h], eax
		mov	eax, ebx
		call	sub_6B404830
		mov	[ebx+114h], esi
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405430:				; CODE XREF: sub_6B404830+432j
		mov	edx, [ebx+110h]
		mov	byte ptr [ebx+eax+4], 0
		mov	[esp+9Ch+var_98], eax
		lea	eax, [ebx+4]
		mov	[esp+9Ch+var_9C], eax
		mov	[esp+9Ch+var_94], edx
		call	dword ptr [ebx+10Ch]
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B404C68
; ---------------------------------------------------------------------------

loc_6B405465:				; CODE XREF: sub_6B404830+BE4j
		mov	eax, [ebx+120h]
		test	eax, eax
		jg	short loc_6B405486
		jmp	loc_6B405649
; ---------------------------------------------------------------------------

loc_6B405474:				; CODE XREF: sub_6B404830+C5Ej
		cmp	dword ptr [edx], 2Ah
		jnz	loc_6B40486B	; jumptable 6B404898 default case
		test	eax, eax
		nop
		jle	loc_6B405649

loc_6B405486:				; CODE XREF: sub_6B404830+C3Dj
		mov	edx, [edx+8]
		sub	eax, 1
		test	edx, edx
		jnz	short loc_6B405474
		jmp	loc_6B40486B	; jumptable 6B404898 default case
; ---------------------------------------------------------------------------

loc_6B405495:				; CODE XREF: sub_6B404830+847j
		mov	edx, [ebp+8]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	loc_6B40507D
		cmp	dword ptr [edx+8], 1
		jnz	loc_6B40507D
		cmp	eax, 34h
		jnz	loc_6B40507D
		mov	eax, [edx+4]
		movzx	eax, byte ptr [eax]
		cmp	al, 30h
		jz	loc_6B40571E
		cmp	al, 31h
		jnz	loc_6B40507D
		mov	edx, offset aTrue ; "true"
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6B4054E0:				; CODE XREF: sub_6B404830+83Ej
		mov	edx, [ebp+8]
		mov	edi, [edx]
		test	edi, edi
		jnz	loc_6B40507D
		cmp	eax, 35h
		jz	loc_6B40570A

loc_6B4054F6:				; CODE XREF: sub_6B404830+EE9j
		mov	eax, ebx
		sub	esi, 2
		call	sub_6B404830
		cmp	esi, 4		; switch 5 cases
		ja	loc_6B404875	; jumptable 6B405509 default case
		jmp	ds:off_6B40F9BC[esi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6B405510:				; CODE XREF: sub_6B404830+CD9j
					; DATA XREF: .rdata:off_6B40F9BCo
		mov	edx, offset aLl	; jumptable 6B405509 case 3
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405521:				; CODE XREF: sub_6B404830+CD9j
					; DATA XREF: .rdata:off_6B40F9BCo
		mov	edx, offset aUl	; jumptable 6B405509 case 2
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405532:				; CODE XREF: sub_6B404830+CD9j
					; DATA XREF: .rdata:off_6B40F9BCo
		mov	edx, 6Ch	; jumptable 6B405509 case 1
		mov	eax, ebx
		call	sub_6B4022A0
		xchg	ax, ax
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405545:				; CODE XREF: sub_6B404830+CD9j
					; DATA XREF: .rdata:off_6B40F9BCo
		mov	edx, 75h	; jumptable 6B405509 case 0
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405556:				; CODE XREF: sub_6B404830+CD9j
					; DATA XREF: .rdata:off_6B40F9BCo
		mov	edx, offset aUll ; jumptable 6B405509 case 4
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405567:				; CODE XREF: sub_6B404830+92Fj
		mov	dword ptr [ebx+11Ch], 1
		jmp	loc_6B40486B	; jumptable 6B404898 default case
; ---------------------------------------------------------------------------

loc_6B405576:				; CODE XREF: sub_6B404830+373j
					; sub_6B404830+38Dj
		mov	ecx, [esp+9Ch+var_74]
		mov	[ebx+118h], ecx
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B405585:				; CODE XREF: sub_6B404830+906j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B40513C
; ---------------------------------------------------------------------------

loc_6B405596:				; CODE XREF: sub_6B404830+8E3j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B405119
; ---------------------------------------------------------------------------

loc_6B4055A7:				; CODE XREF: sub_6B404830+873j
		mov	edx, 2Dh
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B4050A9
; ---------------------------------------------------------------------------

loc_6B4055B8:				; CODE XREF: sub_6B404830+550j
		mov	eax, ebx
		mov	edx, 5Bh
		call	sub_6B4022A0
		mov	eax, [ebp+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, 5Dh
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B404DA9
; ---------------------------------------------------------------------------

loc_6B4055E2:				; CODE XREF: sub_6B404830+526j
		mov	edx, [edx+4]
		cmp	dword ptr [edx+8], 1
		jnz	loc_6B404D5C
		mov	edx, [edx+4]
		cmp	byte ptr [edx],	3Eh
		jnz	loc_6B404D5C
		mov	eax, ebx
		mov	edx, 28h
		call	sub_6B4022A0
		mov	eax, [ebp+8]
		jmp	loc_6B404D5C
; ---------------------------------------------------------------------------
		align 10h

loc_6B405610:				; CODE XREF: sub_6B404830+B06j
		mov	esi, [esp+9Ch+var_7C]
		jmp	loc_6B4049D7
; ---------------------------------------------------------------------------

loc_6B405619:				; CODE XREF: sub_6B404830+8CFj
		mov	esi, [edx+4]
		mov	edi, offset aJarray ; "JArray"
		mov	ecx, 6
		repe cmpsb
		jnz	loc_6B405105
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_6B404830
		mov	edx, offset asc_6B40F71E ; "[]"
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B405148
; ---------------------------------------------------------------------------

loc_6B405649:				; CODE XREF: sub_6B404830+C3Fj
					; sub_6B404830+C50j
		test	edx, edx
		jz	loc_6B40486B	; jumptable 6B404898 default case
		test	eax, eax
		jnz	loc_6B40486B	; jumptable 6B404898 default case
		mov	edx, [edx+4]
		test	edx, edx
		xchg	ax, ax
		jnz	loc_6B405416
		jmp	loc_6B40486B	; jumptable 6B404898 default case
; ---------------------------------------------------------------------------

loc_6B40566B:				; CODE XREF: sub_6B404830+566j
		mov	eax, ebx
		lea	esi, [esi+0]
		call	sub_6B405E00
		jmp	loc_6B404D9C
; ---------------------------------------------------------------------------

loc_6B40567A:				; CODE XREF: sub_6B404830+5F9j
					; sub_6B404830+60Ej
		mov	edi, 1
		nop
		jmp	loc_6B404EB3
; ---------------------------------------------------------------------------

loc_6B405685:				; CODE XREF: sub_6B404830+29Cj
		mov	ecx, [esp+9Ch+var_78]
		lea	eax, [esp+9Ch+var_24]
		mov	[ebx+114h], eax
		mov	[esp+9Ch+var_20], esi
		mov	[esp+9Ch+var_24], ecx
		jmp	loc_6B404B8E
; ---------------------------------------------------------------------------

loc_6B4056A0:				; CODE XREF: sub_6B404830+36Bj
		mov	eax, [esp+9Ch+var_24]
		mov	[ebx+114h], eax
		jmp	loc_6B404BA1
; ---------------------------------------------------------------------------

loc_6B4056AF:				; CODE XREF: sub_6B404830+104j
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_6B405EE0
		mov	edx, offset a___ ; "..."
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
; ---------------------------------------------------------------------------

loc_6B4056CA:				; CODE XREF: sub_6B404830+B34j
		cmp	ebp, edi
		mov	ecx, esi
		mov	esi, [esp+9Ch+var_7C]
		jnb	loc_6B4049D7
		cmp	ecx, 0FFh
		xchg	ax, ax
		ja	loc_6B4049D7
		cmp	al, 5Fh
		jnz	loc_6B4049D7
		movsx	edx, cl
		mov	eax, ebx
		call	sub_6B4022A0
		lea	esi, [ebp+1]
		jmp	loc_6B4049E1
; ---------------------------------------------------------------------------

loc_6B405700:				; CODE XREF: sub_6B404830+247j
		mov	edi, 1
		jmp	loc_6B404AC9
; ---------------------------------------------------------------------------

loc_6B40570A:				; CODE XREF: sub_6B404830+CC0j
		mov	edx, 2Dh
		mov	eax, ebx
		call	sub_6B4022A0
		mov	edx, [ebp+8]
		jmp	loc_6B4054F6
; ---------------------------------------------------------------------------

loc_6B40571E:				; CODE XREF: sub_6B404830+C8Dj
		mov	edx, offset aFalse ; "false"
		mov	eax, ebx
		call	sub_6B404000
		jmp	loc_6B404875	; jumptable 6B405509 default case
sub_6B404830	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B405730	proc near		; CODE XREF: .text:6B4059F8p
					; sub_6B405A10+64p

var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_174		= dword	ptr -174h
var_170		= byte ptr -170h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 18Ch
		mov	[ebp+var_17C], edx
		mov	[ebp+var_180], ecx
		cmp	byte ptr [eax],	5Fh
		jz	loc_6B405900

loc_6B405753:				; CODE XREF: sub_6B405730+1D9j
		mov	edi, offset a_global_ ;	"_GLOBAL_"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_6B405790
		movzx	eax, byte ptr [ebx+8]
		cmp	al, 5Fh
		jz	short loc_6B405773
		cmp	al, 2Eh
		jnz	loc_6B4058F0

loc_6B405773:				; CODE XREF: sub_6B405730+39j
					; sub_6B405730+1C8j
		movzx	eax, byte ptr [ebx+9]
		cmp	al, 49h
		setz	dl
		jz	short loc_6B405782
		cmp	al, 44h
		jnz	short loc_6B405790

loc_6B405782:				; CODE XREF: sub_6B405730+4Cj
		cmp	byte ptr [ebx+0Ah], 5Fh
		jz	loc_6B4059B6
		lea	esi, [esi+0]

loc_6B405790:				; CODE XREF: sub_6B405730+31j
					; sub_6B405730+50j ...
		xor	esi, esi
		xor	eax, eax
		test	byte ptr [ebp+var_17C],	10h
		jz	loc_6B4058E2

loc_6B4057A1:				; CODE XREF: sub_6B405730+1E0j
					; sub_6B405730+291j
		mov	[esp], ebx	; char *
		mov	edi, esp
		call	strlen
		mov	[ebp+var_4C], ebx
		mov	[ebp+var_40], ebx
		mov	[ebp+var_38], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_24], 0
		lea	edx, [ebx+eax]
		mov	[ebp+var_48], edx
		mov	edx, [ebp+var_17C]
		lea	ecx, ds:0[eax*4]
		mov	[ebp+var_28], eax
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_44], edx
		lea	edx, [eax+eax]
		mov	[ebp+var_34], edx
		lea	edx, [ecx+edx]
		lea	eax, ds:1Eh[edx*4]
		and	eax, 0FFFFFFF0h
		call	sub_6B407380
		lea	edx, [esp+1Bh]
		lea	eax, [ecx+1Eh]
		and	edx, 0FFFFFFF0h
		and	eax, 0FFFFFFF0h
		call	sub_6B407380
		lea	eax, [esp+1Bh]
		and	eax, 0FFFFFFF0h
		cmp	esi, 1
		mov	[ebp+var_3C], edx
		mov	[ebp+var_30], eax
		jz	loc_6B405975
		jnb	loc_6B405915

loc_6B405833:				; CODE XREF: sub_6B405730+1E8j
		lea	eax, [ebp+var_4C]
		call	sub_6B4027E0
		mov	edx, eax

loc_6B40583D:				; CODE XREF: sub_6B405730+240j
					; sub_6B405730+24Cj ...
		test	byte ptr [ebp+var_17C],	1
		jz	short loc_6B405852
		mov	eax, [ebp+var_40]
		cmp	byte ptr [eax],	0
		jnz	loc_6B405981

loc_6B405852:				; CODE XREF: sub_6B405730+114j
		test	edx, edx
		jz	loc_6B405981
		mov	eax, [ebp+var_17C]
		mov	[ebp+var_70], 0
		mov	[ebp+var_6C], 0
		mov	[ebp+var_60], 0
		mov	[ebp+var_174], eax
		mov	eax, [ebp+var_180]
		mov	[ebp+var_5C], 0
		mov	[ebp+var_50], 0
		mov	[ebp+var_58], 0
		mov	[ebp+var_68], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_64], eax
		lea	eax, [ebp+var_174]
		call	sub_6B404830
		mov	eax, [ebp+var_70]
		mov	[ebp+eax+var_170], 0
		mov	eax, [ebp+var_64]
		mov	[esp+8], eax
		mov	eax, [ebp+var_70]
		mov	[esp+4], eax
		lea	eax, [ebp+var_170]
		mov	[esp], eax
		call	[ebp+var_68]
		xor	eax, eax
		add	[ebp+var_50], 1
		cmp	[ebp+var_58], 0
		mov	[ebp+var_70], 0
		mov	esp, edi
		setz	al

loc_6B4058E2:				; CODE XREF: sub_6B405730+6Bj
					; sub_6B405730+255j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4058F0:				; CODE XREF: sub_6B405730+3Dj
		cmp	al, 24h
		jnz	loc_6B405790
		jmp	loc_6B405773
; ---------------------------------------------------------------------------
		align 10h

loc_6B405900:				; CODE XREF: sub_6B405730+1Dj
		cmp	byte ptr [eax+1], 5Ah
		mov	esi, 1
		jnz	loc_6B405753
		nop
		jmp	loc_6B4057A1
; ---------------------------------------------------------------------------

loc_6B405915:				; CODE XREF: sub_6B405730+FDj
		cmp	esi, 3
		ja	loc_6B405833
		add	ebx, 0Bh
		mov	[ebp+var_40], ebx
		mov	[esp], ebx	; char *
		call	strlen
		mov	edx, ebx
		mov	ecx, eax
		lea	eax, [ebp+var_4C]
		call	sub_6B401ED0
		xor	edx, edx
		cmp	esi, 2
		setnz	dl
		add	edx, 3Ah
		mov	dword ptr [esp], 0
		mov	ecx, eax
		lea	eax, [ebp+var_4C]
		call	sub_6B401E50
		mov	ebx, [ebp+var_40]
		mov	[esp], ebx	; char *
		mov	[ebp+var_184], eax
		call	strlen
		mov	edx, [ebp+var_184]
		add	ebx, eax
		mov	[ebp+var_40], ebx
		jmp	loc_6B40583D
; ---------------------------------------------------------------------------

loc_6B405975:				; CODE XREF: sub_6B405730+F7j
		cmp	byte ptr [ebx],	5Fh
		jz	short loc_6B405990

loc_6B40597A:				; CODE XREF: sub_6B405730+26Aj
		xor	edx, edx
		jmp	loc_6B40583D
; ---------------------------------------------------------------------------

loc_6B405981:				; CODE XREF: sub_6B405730+11Cj
					; sub_6B405730+124j
		xor	eax, eax
		mov	esp, edi
		jmp	loc_6B4058E2
; ---------------------------------------------------------------------------
		align 10h

loc_6B405990:				; CODE XREF: sub_6B405730+248j
		lea	eax, [ebx+1]
		mov	[ebp+var_40], eax
		cmp	byte ptr [ebx+1], 5Ah
		jnz	short loc_6B40597A
		mov	edx, 1
		add	ebx, 2
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_40], ebx
		call	sub_6B403880
		mov	edx, eax
		jmp	loc_6B40583D
; ---------------------------------------------------------------------------

loc_6B4059B6:				; CODE XREF: sub_6B405730+56j
		mov	esi, edx
		shl	esi, 1Fh
		sar	esi, 1Fh
		add	esi, 3
		jmp	loc_6B4057A1
sub_6B405730	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	ecx, [esp+24h]
		mov	eax, [esp+20h]
		test	ecx, ecx
		jnz	short loc_6B4059E8

loc_6B4059DF:				; CODE XREF: .text:6B4059EAj
		mov	eax, 0FFFFFFFDh

loc_6B4059E4:				; CODE XREF: .text:6B405A05j
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6B4059E8:				; CODE XREF: .text:6B4059DDj
		test	eax, eax
		jz	short loc_6B4059DF
		mov	edx, [esp+28h]
		mov	[esp], edx
		mov	edx, 11h
		call	sub_6B405730
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		jmp	short loc_6B4059E4
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B405A10(int,	char *,	int, int)
sub_6B405A10	proc near		; CODE XREF: sub_6B407E10+B5p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_10], ebx
		mov	ebx, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_8], edi
		mov	edi, [esp+4Ch+arg_C]
		test	eax, eax
		mov	[esp+4Ch+var_4], ebp
		jz	loc_6B405B0A
		test	ebx, ebx
		jz	loc_6B405B02

loc_6B405A43:				; CODE XREF: sub_6B405A10+F4j
		lea	edx, [esp+4Ch+var_2C]
		mov	ecx, offset sub_6B403E70
		mov	[esp+4Ch+var_4C], edx
		mov	edx, 11h
		mov	[esp+4Ch+var_2C], 0
		mov	[esp+4Ch+var_28], 0
		mov	[esp+4Ch+var_24], 0
		mov	[esp+4Ch+var_20], 0
		call	sub_6B405730
		test	eax, eax
		jz	loc_6B405B12
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_30], 1
		test	edx, edx
		jz	short loc_6B405AF8

loc_6B405A91:				; CODE XREF: sub_6B405A10+F0j
		mov	ebp, [esp+4Ch+var_2C]
		test	ebp, ebp
		jz	loc_6B405B26
		test	esi, esi
		jz	loc_6B405B50
		mov	[esp+4Ch+var_4C], ebp ;	char *
		call	strlen
		cmp	eax, [ebx]
		nop
		jb	short loc_6B405AE0
		mov	[esp+4Ch+var_4C], esi ;	void *
		call	free

loc_6B405ABA:				; CODE XREF: sub_6B405A10+142j
		mov	eax, [esp+4Ch+var_30]
		mov	[ebx], eax

loc_6B405AC0:				; CODE XREF: sub_6B405A10+E6j
					; sub_6B405A10+148j
		test	edi, edi
		jz	short loc_6B405ACA
		mov	dword ptr [edi], 0

loc_6B405ACA:				; CODE XREF: sub_6B405A10+B2j
					; sub_6B405A10+100j ...
		mov	eax, ebp
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_6B405AE0:				; CODE XREF: sub_6B405A10+A0j
		mov	[esp+4Ch+var_48], ebp ;	char *
		mov	[esp+4Ch+var_4C], esi ;	char *
		call	strcpy
		mov	[esp+4Ch+var_4C], ebp ;	void *
		mov	ebp, esi
		call	free
		jmp	short loc_6B405AC0
; ---------------------------------------------------------------------------

loc_6B405AF8:				; CODE XREF: sub_6B405A10+7Fj
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_30], eax
		jmp	short loc_6B405A91
; ---------------------------------------------------------------------------

loc_6B405B02:				; CODE XREF: sub_6B405A10+2Dj
		test	esi, esi
		jz	loc_6B405A43

loc_6B405B0A:				; CODE XREF: sub_6B405A10+25j
		test	edi, edi
		jnz	short loc_6B405B40

loc_6B405B0E:				; CODE XREF: sub_6B405A10+118j
		xor	ebp, ebp
		jmp	short loc_6B405ACA
; ---------------------------------------------------------------------------

loc_6B405B12:				; CODE XREF: sub_6B405A10+6Bj
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax ;	void *
		call	free
		mov	[esp+4Ch+var_30], 0

loc_6B405B26:				; CODE XREF: sub_6B405A10+87j
		test	edi, edi
		jz	short loc_6B405B0E
		cmp	[esp+4Ch+var_30], 1
		jz	short loc_6B405B5D
		mov	dword ptr [edi], 0FFFFFFFEh
		xor	ebp, ebp
		jmp	short loc_6B405ACA
; ---------------------------------------------------------------------------
		align 10h

loc_6B405B40:				; CODE XREF: sub_6B405A10+FCj
		mov	dword ptr [edi], 0FFFFFFFDh
		xor	ebp, ebp
		jmp	loc_6B405ACA
; ---------------------------------------------------------------------------
		align 10h

loc_6B405B50:				; CODE XREF: sub_6B405A10+8Fj
		test	ebx, ebx
		jnz	loc_6B405ABA
		jmp	loc_6B405AC0
; ---------------------------------------------------------------------------

loc_6B405B5D:				; CODE XREF: sub_6B405A10+11Fj
		mov	dword ptr [edi], 0FFFFFFFFh
		xor	ebp, ebp
		jmp	loc_6B405ACA
sub_6B405A10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B405B70	proc near		; CODE XREF: sub_6B4043D0+40p
					; sub_6B404830+3ADp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], ebx
		mov	ebx, edx
		mov	[esp+0Ch+var_4], esi
		mov	esi, eax
		mov	eax, [edx]
		sub	eax, 3
		cmp	eax, 24h	; switch 37 cases
		jbe	short loc_6B405BA0

loc_6B405B89:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, ebx	; jumptable 6B405BA0 default case

loc_6B405B8B:				; CODE XREF: sub_6B405B70+3Aj
					; sub_6B405B70+76j
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6B404830
; ---------------------------------------------------------------------------
		align 10h

loc_6B405BA0:				; CODE XREF: sub_6B405B70+17j
		jmp	ds:off_6B40FA04[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6B405BA7:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, [edx+4]	; jumptable 6B405BA0 case 0
		jmp	short loc_6B405B8B
; ---------------------------------------------------------------------------
		align 10h

loc_6B405BB0:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, offset aRestrict ;	jumptable 6B405BA0 cases 20,23

loc_6B405BB5:				; CODE XREF: sub_6B405B70+5Cj
					; sub_6B405B70+65j ...
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6B404000
; ---------------------------------------------------------------------------

loc_6B405BC7:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, offset aVolatile ;	jumptable 6B405BA0 cases 21,24
		jmp	short loc_6B405BB5
; ---------------------------------------------------------------------------
		align 10h

loc_6B405BD0:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, offset aConst ; jumptable 6B405BA0	cases 22,25
		jmp	short loc_6B405BB5
; ---------------------------------------------------------------------------

loc_6B405BD7:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, 20h	; jumptable 6B405BA0 case 26
		mov	eax, esi
		call	sub_6B4022A0
		mov	edx, [ebx+8]
		jmp	short loc_6B405B8B
; ---------------------------------------------------------------------------

loc_6B405BE8:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		test	byte ptr [esi],	4 ; jumptable 6B405BA0 case 27
		mov	edx, 2Ah
		jz	short loc_6B405C05
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B405C00:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, 26h	; jumptable 6B405BA0 case 28

loc_6B405C05:				; CODE XREF: sub_6B405B70+80j
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_6B4022A0
; ---------------------------------------------------------------------------

loc_6B405C17:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, offset asc_6B40F9EB ; jumptable 6B405BA0 case 29
		jmp	short loc_6B405BB5
; ---------------------------------------------------------------------------
		align 10h

loc_6B405C20:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, offset aComplex ; jumptable 6B405BA0 case 30
		jmp	short loc_6B405BB5
; ---------------------------------------------------------------------------

loc_6B405C27:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		mov	edx, offset aImaginary ; jumptable 6B405BA0 case 31
		jmp	short loc_6B405BB5
; ---------------------------------------------------------------------------
		align 10h

loc_6B405C30:				; CODE XREF: sub_6B405B70:loc_6B405BA0j
					; DATA XREF: .rdata:off_6B40FA04o
		cmp	byte ptr [esi+108h], 28h ; jumptable 6B405BA0 case 36
		jz	short loc_6B405C45
		mov	edx, 20h
		mov	eax, esi
		call	sub_6B4022A0

loc_6B405C45:				; CODE XREF: sub_6B405B70+C7j
		mov	edx, [ebx+4]
		mov	eax, esi
		call	sub_6B404830
		mov	edx, offset asc_6B40F818 ; "::*"
		jmp	loc_6B405BB5
sub_6B405B70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B405C60	proc near		; CODE XREF: sub_6B404830+4E6p
					; sub_6B404830+BADp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_8], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], edi
		mov	edx, [edx+4]
		cmp	dword ptr [edx], 4
		jz	short loc_6B405C90
		call	sub_6B404830
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6B405C90:				; CODE XREF: sub_6B405C60+19j
		mov	edi, [eax+118h]
		mov	dword ptr [eax+118h], 0
		mov	eax, [eax+114h]
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[ebx+114h], eax
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_10], eax
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_6B404830
		mov	eax, [esp+2Ch+var_14]
		cmp	byte ptr [ebx+108h], 3Ch
		mov	[ebx+114h], eax
		jz	loc_6B405DD4

loc_6B405CDC:				; CODE XREF: sub_6B405C60+180j
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6B405D50

loc_6B405CEC:				; CODE XREF: sub_6B405C60+12Dj
		mov	byte ptr [ebx+eax+4], 3Ch
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 3Ch
		mov	eax, [esi+4]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_6B404830
		cmp	byte ptr [ebx+108h], 3Eh
		jz	loc_6B405DE5

loc_6B405D18:				; CODE XREF: sub_6B405C60+191j
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6B405D92

loc_6B405D28:				; CODE XREF: sub_6B405C60+16Fj
		mov	byte ptr [ebx+eax+4], 3Eh
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 3Eh
		mov	[ebx+118h], edi
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6B405D50:				; CODE XREF: sub_6B405C60+8Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B405CEC
; ---------------------------------------------------------------------------

loc_6B405D92:				; CODE XREF: sub_6B405C60+C6j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B405D28
; ---------------------------------------------------------------------------

loc_6B405DD4:				; CODE XREF: sub_6B405C60+76j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B405CDC
; ---------------------------------------------------------------------------

loc_6B405DE5:				; CODE XREF: sub_6B405C60+B2j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_6B4022A0
		jmp	loc_6B405D18
sub_6B405C60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B405E00	proc near		; CODE XREF: sub_6B404830+500p
					; sub_6B404830+991p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		cmp	dword ptr [edx], 2Bh
		jz	short loc_6B405E30
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_6B404830
; ---------------------------------------------------------------------------

loc_6B405E30:				; CODE XREF: sub_6B405E00+16j
		mov	edx, [edx+4]
		mov	edi, [edx+8]
		mov	ebp, [edx+4]
		test	edi, edi
		jz	loc_6B405EC8
		lea	ecx, [eax+4]
		mov	edx, [eax+104h]
		xor	ebx, ebx
		mov	[esp+3Ch+var_20], ecx
		mov	esi, eax
		jmp	short loc_6B405E6D
; ---------------------------------------------------------------------------

loc_6B405E54:				; CODE XREF: sub_6B405E00+7Bj
					; sub_6B405E00+C6j
		add	ebx, 1
		cmp	edi, ebx
		mov	[esi+edx+4], al
		mov	[esi+104h], ecx
		mov	[esi+108h], al
		jbe	short loc_6B405EC8
		mov	edx, ecx

loc_6B405E6D:				; CODE XREF: sub_6B405E00+52j
		cmp	edx, 0FFh
		movzx	eax, byte ptr [ebp+ebx+0]
		lea	ecx, [edx+1]
		jnz	short loc_6B405E54
		mov	edx, [esi+110h]
		mov	byte ptr [esi+103h], 0
		mov	[esp+3Ch+var_24], al
		mov	[esp+3Ch+var_34], edx
		mov	edx, [esi+104h]
		mov	[esp+3Ch+var_38], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [esi+10Ch]
		mov	ecx, 1
		xor	edx, edx
		mov	dword ptr [esi+104h], 0
		movzx	eax, [esp+3Ch+var_24]
		add	dword ptr [esi+124h], 1
		jmp	short loc_6B405E54
; ---------------------------------------------------------------------------

loc_6B405EC8:				; CODE XREF: sub_6B405E00+3Bj
					; sub_6B405E00+69j
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
sub_6B405E00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B405EE0	proc near		; CODE XREF: sub_6B404830+50Ap
					; sub_6B404830+536p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, eax
		sub	esp, 28h
		mov	eax, [edx]
		cmp	eax, 6
		jz	short loc_6B405EF1
		test	eax, eax
		jnz	short loc_6B405F00

loc_6B405EF1:				; CODE XREF: sub_6B405EE0+Bj
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	sub_6B404830
; ---------------------------------------------------------------------------
		align 10h

loc_6B405F00:				; CODE XREF: sub_6B405EE0+Fj
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	ecx, [eax+1]
		jz	short loc_6B405F50

loc_6B405F10:				; CODE XREF: sub_6B405EE0+B5j
		mov	byte ptr [ebx+eax+4], 28h
		mov	eax, ebx
		mov	[ebx+104h], ecx
		mov	byte ptr [ebx+108h], 28h
		call	sub_6B404830
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_6B405FA0

loc_6B405F39:				; CODE XREF: sub_6B405EE0+FDj
		mov	byte ptr [ebx+eax+4], 29h
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 29h
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B405F50:				; CODE XREF: sub_6B405EE0+2Ej
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	ecx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B405F10
; ---------------------------------------------------------------------------
		align 10h

loc_6B405FA0:				; CODE XREF: sub_6B405EE0+57j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_6B405F39
sub_6B405EE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B405FF0(_onexit_t)
sub_6B405FF0	proc near		; CODE XREF: sub_6B4060B0+Ap

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_6B4113AC
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6B4061B0
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_10], eax
		jz	loc_6B406090
		mov	[esp+2Ch+var_2C], 8
		call	_lock
		mov	eax, ds:dword_6B4113AC
		mov	[esp+2Ch+var_2C], eax
		call	sub_6B4061B0
		mov	[esp+2Ch+var_10], eax
		mov	eax, ds:dword_6B4113A8
		mov	[esp+2Ch+var_2C], eax
		call	sub_6B4061B0
		mov	[esp+2Ch+var_2C], ebx
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6B4061C0
		mov	ds:dword_6B4113AC, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6B4061C0
		mov	[esp+2Ch+var_2C], 8
		mov	ds:dword_6B4113A8, eax
		call	_unlock
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406090:				; CODE XREF: sub_6B405FF0+1Cj
		mov	[esp+2Ch+var_2C], ebx ;	_onexit_t
		call	ds:_onexit
		add	esp, 28h
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_6B405FF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B4060B0(_onexit_t)
sub_6B4060B0	proc near		; CODE XREF: sub_6B406690-2Fp
					; sub_6B407590+12p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_6B405FF0
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_6B4060B0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:6B41401Co

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_6B406100
		cmp	eax, 3
		jz	short loc_6B406100
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6B406100:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_6B4068B0
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_6B401040+117p
					; DATA XREF: .rdata:off_6B410520o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_6B40A00C,	2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_6B40614B
		mov	dword_6B40A00C,	2

loc_6B40614B:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_6B406161
		cmp	eax, 1
		jz	short loc_6B406190

loc_6B406155:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6B406161:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_6B414028
		cmp	ebx, offset dword_6B414028
		jz	short loc_6B406155
		xchg	ax, ax

loc_6B406170:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_6B406178
		call	eax

loc_6B406178:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_6B414028
		jnz	short loc_6B406170
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6B406190:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6B4068B0
		jmp	short loc_6B406155
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4061B0	proc near		; CODE XREF: sub_6B401040+138p
					; sub_6B401040+14Bp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6B4061B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4061C0	proc near		; CODE XREF: sub_6B401000+15p
					; sub_6B405FF0+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6B4061C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_6B4061D0(char	*, char)
sub_6B4061D0	proc near		; CODE XREF: sub_6B406230+131p
					; sub_6B406230+141p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+var_14], 1Bh ;	size_t
		lea	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], 1 ; size_t
		mov	[esp+1Ch+var_1C], offset aMingwW64Runtim ; "Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+var_10], eax ;	FILE *
		call	fwrite
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], ebx ;	va_list
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+var_1C], eax ;	FILE *
		call	vfprintf
		call	abort
sub_6B4061D0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6B406230
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_6B406230(size_t)
sub_6B406230	proc near		; CODE XREF: .text:6B406221j
					; sub_6B406380+12Ap ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+5Ch+var_40], edx
		jnz	short loc_6B406250
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406250:				; CODE XREF: sub_6B406230+11j
		mov	ecx, ds:dword_6B41101C
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_6B406280
		mov	eax, ds:dword_6B411018

loc_6B406261:				; CODE XREF: sub_6B406230+4Ej
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_6B406276
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_6B4062F9

loc_6B406276:				; CODE XREF: sub_6B406230+36j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_6B406261

loc_6B406280:				; CODE XREF: sub_6B406230+2Aj
		mov	[esp+5Ch+lpAddress], ebx
		call	sub_6B406AD0
		test	eax, eax
		mov	ebp, eax
		jz	loc_6B406366
		lea	edx, [esi+esi*2]
		mov	esi, ds:dword_6B411018
		shl	edx, 2
		mov	[esp+5Ch+var_44], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	sub_6B406BF0
		mov	edx, [esp+5Ch+var_44]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	eax, ds:dword_6B411018
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+5Ch+var_44]
		jz	short loc_6B406346
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_6B406315

loc_6B4062F2:				; CODE XREF: sub_6B406230+E8j
					; sub_6B406230+114j
		add	ds:dword_6B41101C, 1

loc_6B4062F9:				; CODE XREF: sub_6B406230+40j
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+dwLength], edi	; size_t
		mov	[esp+5Ch+lpAddress], ebx ; void	*
		mov	[esp+5Ch+lpBuffer], eax	; void *
		call	memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B406315:				; CODE XREF: sub_6B406230+C0j
		cmp	eax, 40h
		jz	short loc_6B4062F2
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		add	edx, ds:dword_6B411018
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpflOldProtect], edx ;	lpflOldProtect
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6B4062F2
; ---------------------------------------------------------------------------

loc_6B406346:				; CODE XREF: sub_6B406230+B7j
		mov	eax, ds:dword_6B411018
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ebp+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; char
		call	sub_6B4061D0
; ---------------------------------------------------------------------------

loc_6B406366:				; CODE XREF: sub_6B406230+5Cj
		mov	[esp+5Ch+lpBuffer], ebx	; char
		mov	[esp+5Ch+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_6B4061D0
sub_6B406230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B406380	proc near		; CODE XREF: sub_6B401260+30p
					; sub_6B401260:loc_6B4012E8p

Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_6B411020
		test	ebx, ebx
		jz	short loc_6B4063A0

loc_6B406393:				; CODE XREF: sub_6B406380+64j
					; sub_6B406380+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4063A0:				; CODE XREF: sub_6B406380+11j
		mov	ds:dword_6B411020, 1
		call	sub_6B406B40
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_6B407380
		mov	ds:dword_6B41101C, 0
		lea	eax, [esp+1Fh]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_6B411018, eax
		mov	eax, offset dword_6B410AE0
		sub	eax, offset dword_6B410AE0
		cmp	eax, 7
		jle	short loc_6B406393
		cmp	eax, 0Bh
		mov	ebx, offset dword_6B410AE0
		jle	short loc_6B406412
		mov	ecx, ds:dword_6B410AE0
		test	ecx, ecx
		jnz	short loc_6B406412
		mov	edx, ds:dword_6B410AE4
		test	edx, edx
		jnz	short loc_6B406412
		mov	eax, ds:dword_6B410AE8
		test	eax, eax
		jnz	short loc_6B406412
		mov	ebx, offset dword_6B410AEC

loc_6B406412:				; CODE XREF: sub_6B406380+6Ej
					; sub_6B406380+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_6B406480
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_6B406480
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_6B4065E3
		add	ebx, 0Ch
		cmp	ebx, offset dword_6B410AE0
		jnb	loc_6B406393
		mov	esi, 6B400000h

loc_6B40643F:				; CODE XREF: sub_6B406380+217j
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_6B40653D
		cmp	edx, 20h
		jz	loc_6B40657A
		cmp	edx, 8
		jz	loc_6B40655C
		mov	[ebp+var_1C], 0
		mov	[esp+4], edx	; char
		mov	dword ptr [esp], offset	aUnknownPseudoR	; "  Unknown pseudo relocation bit size	%d"...
		call	sub_6B4061D0
; ---------------------------------------------------------------------------

loc_6B406480:				; CODE XREF: sub_6B406380+96j
					; sub_6B406380+9Dj
		cmp	ebx, offset dword_6B410AE0
		jnb	loc_6B406393
		mov	esi, 6B400000h
		lea	edi, [ebp+flOldProtect]

loc_6B406494:				; CODE XREF: sub_6B406380+135j
		mov	eax, [ebx+4]
		mov	ecx, 4		; size_t
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	sub_6B406230
		cmp	ebx, offset dword_6B410AE0
		jb	short loc_6B406494

loc_6B4064B7:				; CODE XREF: sub_6B406380+21Dj
		mov	ecx, ds:dword_6B41101C
		test	ecx, ecx
		jle	loc_6B406393
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_6B4064E2
; ---------------------------------------------------------------------------
		align 10h

loc_6B4064D0:				; CODE XREF: sub_6B406380+16Dj
					; sub_6B406380+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:dword_6B41101C
		jge	loc_6B406393

loc_6B4064E2:				; CODE XREF: sub_6B406380+14Cj
		mov	eax, ds:dword_6B411018
		add	eax, ebx
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6B4064D0
		lea	edx, [ebp+Buffer]
		mov	dword ptr [esp+8], 1Ch ; dwLength
		mov	[esp+4], edx	; lpBuffer
		mov	eax, [eax+4]
		mov	[esp], eax	; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_6B4065C0
		mov	eax, ds:dword_6B411018
		mov	[esp+0Ch], edi	; lpflOldProtect
		mov	eax, [eax+ebx]
		mov	[esp+8], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+4], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp], eax	; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6B4064D0
; ---------------------------------------------------------------------------

loc_6B40653D:				; CODE XREF: sub_6B406380+D1j
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_6B4065B1
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6B40654D:				; CODE XREF: sub_6B406380+23Ej
		mov	ecx, 2		; size_t
		lea	edx, [ebp+var_1C]
		call	sub_6B406230
		jmp	short loc_6B40658E
; ---------------------------------------------------------------------------

loc_6B40655C:				; CODE XREF: sub_6B406380+E3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_6B4065A2
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_6B40656B:				; CODE XREF: sub_6B406380+22Fj
		mov	ecx, 1		; size_t
		lea	edx, [ebp+var_1C]
		call	sub_6B406230
		jmp	short loc_6B40658E
; ---------------------------------------------------------------------------

loc_6B40657A:				; CODE XREF: sub_6B406380+DAj
		add	edi, [eax]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4		; size_t
		mov	[ebp+var_1C], edi
		call	sub_6B406230

loc_6B40658E:				; CODE XREF: sub_6B406380+1DAj
					; sub_6B406380+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset dword_6B410AE0
		jb	loc_6B40643F
		jmp	loc_6B4064B7
; ---------------------------------------------------------------------------

loc_6B4065A2:				; CODE XREF: sub_6B406380+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6B40656B
; ---------------------------------------------------------------------------

loc_6B4065B1:				; CODE XREF: sub_6B406380+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_6B40654D
; ---------------------------------------------------------------------------

loc_6B4065C0:				; CODE XREF: sub_6B406380+18Fj
		add	ebx, ds:dword_6B411018
		mov	eax, [ebx+4]
		mov	[esp+8], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	dword ptr [esp], offset	aVirtualqueryFa	; "  VirtualQuery failed for %d	bytes at a"...
		mov	[esp+4], eax	; char
		call	sub_6B4061D0
; ---------------------------------------------------------------------------

loc_6B4065E3:				; CODE XREF: sub_6B406380+A5j
		mov	[esp+4], eax	; char
		mov	dword ptr [esp], offset	aUnknownPseud_0	; "  Unknown pseudo relocation protocol	ve"...
		call	sub_6B4061D0
sub_6B406380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B406600()
sub_6B406600	proc near		; DATA XREF: sub_6B406690:loc_6B40665Ao
		sub	esp, 0Ch
		mov	eax, off_6B40A008
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6B406627
		xchg	ax, ax

loc_6B406610:				; CODE XREF: sub_6B406600+25j
		call	eax
		mov	eax, off_6B40A008
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_6B40A008, edx
		test	eax, eax
		jnz	short loc_6B406610

loc_6B406627:				; CODE XREF: sub_6B406600+Cj
		add	esp, 0Ch
		retn
sub_6B406600	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6B406690

loc_6B406630:				; CODE XREF: sub_6B406690+1Ej
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:dword_6B4099C0
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_6B406670

loc_6B406640:				; CODE XREF: sub_6B406690-Cj
		test	ebx, ebx
		jz	short loc_6B40665A
		lea	esi, dword_6B4099C0[ebx*4]
		nop
		lea	esi, [esi+0]

loc_6B406650:				; CODE XREF: sub_6B406690-38j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_6B406650

loc_6B40665A:				; CODE XREF: sub_6B406690-4Ej
		mov	[esp+1Ch+var_1C], offset sub_6B406600 ;	_onexit_t
		call	sub_6B4060B0
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_6B406690
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6B406690

loc_6B406670:				; CODE XREF: sub_6B406690-52j
		xor	ebx, ebx
		jmp	short loc_6B406676
; ---------------------------------------------------------------------------

loc_6B406674:				; CODE XREF: sub_6B406690-Ej
		mov	ebx, eax

loc_6B406676:				; CODE XREF: sub_6B406690-1Ej
		lea	eax, [ebx+1]
		mov	edx, ds:dword_6B4099C0[eax*4]
		test	edx, edx
		jnz	short loc_6B406674
		jmp	short loc_6B406640
; END OF FUNCTION CHUNK	FOR sub_6B406690
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B406690	proc near		; CODE XREF: sub_6B401260+92p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 6B406630 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 6B406670 SIZE 00000016 BYTES

		sub	esp, 0Ch
		mov	ecx, ds:dword_6B411024
		test	ecx, ecx
		jz	short loc_6B4066A1
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_6B4066A1:				; CODE XREF: sub_6B406690+Bj
		mov	ds:dword_6B411024, 1
		add	esp, 0Ch
		jmp	short loc_6B406630
sub_6B406690	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6B4066B0	proc near		; CODE XREF: sub_6B401260+40p
					; sub_6B401260+A6p ...
		mov	eax, 1
		retn	0Ch
sub_6B4066B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4066C0	proc near		; CODE XREF: sub_6B401260+F1p
					; sub_6B401260+10Bp ...
		mov	eax, 1
		retn	0Ch
sub_6B4066C0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_6B411164, edx
		mov	ds:dword_6B411040, 0C0000409h
		mov	ds:dword_6B411044, 1
		mov	ds:dword_6B411158, eax
		mov	ds:dword_6B41104C, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_6B41114C, eax
		mov	eax, dword_6B40EA3C
		mov	[ebp-10h], eax
		mov	eax, dword_6B40EA40
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_6B4105F4
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B406760	proc near		; CODE XREF: DllEntryPoint+34p

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
PerformanceCount= LARGE_INTEGER	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, dword_6B40EA3C
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_6B4067A0
		not	eax
		mov	dword_6B40EA40,	eax

loc_6B406786:				; CODE XREF: sub_6B406760+BDj
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4067A0:				; CODE XREF: sub_6B406760+1Dj
		lea	eax, [esp+4Ch+SystemTimeAsFileTime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	[esp+4Ch+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[esp+4Ch+SystemTimeAsFileTime.dwHighDateTime], 0
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	eax, [esp+4Ch+SystemTimeAsFileTime.dwHighDateTime]
		mov	ebp, [esp+4Ch+SystemTimeAsFileTime.dwLowDateTime]
		mov	[esp+4Ch+var_30], eax
		call	ds:GetCurrentProcessId
		mov	edi, eax
		call	ds:GetCurrentThreadId
		mov	esi, eax
		call	ds:GetTickCount
		mov	ebx, eax
		lea	eax, [esp+4Ch+PerformanceCount]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		sub	esp, 4
		xor	ebp, [esp+4Ch+var_30]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount+4]
		xor	ebp, edi
		xor	ebp, esi
		xor	ebp, ebx
		mov	eax, ebp
		cmp	ebp, 0BB40E64Eh
		not	eax
		jz	short loc_6B406822

loc_6B406812:				; CODE XREF: sub_6B406760+CBj
		mov	dword_6B40EA3C,	ebp
		mov	dword_6B40EA40,	eax
		jmp	loc_6B406786
; ---------------------------------------------------------------------------

loc_6B406822:				; CODE XREF: sub_6B406760+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_6B406812
sub_6B406760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B406830	proc near		; CODE XREF: sub_6B4068B0+13p
					; sub_6B4068B0:loc_6B4068D1p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_6B411380
		test	eax, eax
		jnz	short loc_6B406848
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B406848:				; CODE XREF: sub_6B406830+Ej
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	ebx, ds:dword_6B41139C
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_6B406895
		mov	ebp, ds:TlsGetValue
		mov	edi, ds:GetLastError
		xchg	ax, ax

loc_6B406870:				; CODE XREF: sub_6B406830+63j
		mov	eax, [ebx]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_6B40688E
		test	esi, esi
		jz	short loc_6B40688E
		mov	eax, [ebx+4]
		mov	[esp+2Ch+lpCriticalSection], esi
		call	eax

loc_6B40688E:				; CODE XREF: sub_6B406830+50j
					; sub_6B406830+54j
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_6B406870

loc_6B406895:				; CODE XREF: sub_6B406830+30j
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6B406830	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4068B0	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_6B406900
		jb	short loc_6B4068D1
		cmp	eax, 3
		jnz	short loc_6B4068C8
		call	sub_6B406830

loc_6B4068C8:				; CODE XREF: sub_6B4068B0+11j
					; sub_6B4068B0+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6B4068D1:				; CODE XREF: sub_6B4068B0+Cj
		call	sub_6B406830
		mov	eax, ds:dword_6B411380
		cmp	eax, 1
		jnz	short loc_6B4068C8
		mov	ds:dword_6B411380, 0
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_6B4068C8
; ---------------------------------------------------------------------------
		align 10h

loc_6B406900:				; CODE XREF: sub_6B4068B0+Aj
		mov	eax, ds:dword_6B411380
		test	eax, eax
		jz	short loc_6B406920

loc_6B406909:				; CODE XREF: sub_6B4068B0+80j
		mov	ds:dword_6B411380, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406920:				; CODE XREF: sub_6B4068B0+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_6B406909
sub_6B4068B0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6B406940:				; CODE XREF: .text:6B407456j
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_6B411380
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_6B406958
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B406958:				; CODE XREF: .text:6B40694Fj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6B41139C
		sub	esp, 4
		test	eax, eax
		jz	short loc_6B40698F
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_6B406986
		jmp	short loc_6B4069C6
; ---------------------------------------------------------------------------
		align 10h

loc_6B406980:				; CODE XREF: .text:6B40698Dj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_6B4069A6

loc_6B406986:				; CODE XREF: .text:6B406975j
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_6B406980

loc_6B40698F:				; CODE XREF: .text:6B40696Fj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_6B40699F:				; CODE XREF: .text:6B4069C4j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B4069A6:				; CODE XREF: .text:6B406984j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_6B4069AC:				; CODE XREF: .text:6B4069CFj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_6B40699F
; ---------------------------------------------------------------------------

loc_6B4069C6:				; CODE XREF: .text:6B406977j
		mov	edx, [eax+8]
		mov	ds:dword_6B41139C, edx
		jmp	short loc_6B4069AC
; ---------------------------------------------------------------------------
		jmp	short loc_6B4069E0
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6B407420

loc_6B4069E0:				; CODE XREF: .text:6B4069D1j
					; sub_6B407420+1Aj
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_6B411380
		test	eax, eax
		jnz	short loc_6B4069F2

loc_6B4069ED:				; CODE XREF: sub_6B407420-A11j
					; sub_6B407420-9D2j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B4069F2:				; CODE XREF: sub_6B407420-A35j
		mov	[esp+1Ch+var_18], 0Ch ;	size_t
		mov	[esp+1Ch+var_1C], 1 ; size_t
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_6B4069ED
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], offset CriticalSection ; lpCriticalSection
		mov	[ebx], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6B41139C
		mov	ds:dword_6B41139C, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	[esp+1Ch+var_1C], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_6B4069ED
; END OF FUNCTION CHUNK	FOR sub_6B407420
; ---------------------------------------------------------------------------
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_6B406A60

loc_6B406A5B:				; CODE XREF: .text:6B406A69j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406A60:				; CODE XREF: .text:6B406A59j
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_6B406A5B
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		mov	eax, [esp+0Ch]
		mov	ebx, [esp+10h]
		add	eax, [eax+3Ch]
		movzx	esi, word ptr [eax+6]
		movzx	edx, word ptr [eax+14h]
		test	esi, esi
		jz	short loc_6B406ABC
		movzx	edx, dx
		lea	eax, [eax+edx+18h]
		xor	edx, edx
		jmp	short loc_6B406AA7
; ---------------------------------------------------------------------------

loc_6B406AA4:				; CODE XREF: .text:6B406ABAj
		add	eax, 28h

loc_6B406AA7:				; CODE XREF: .text:6B406AA2j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_6B406AB5
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6B406ABE

loc_6B406AB5:				; CODE XREF: .text:6B406AACj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6B406AA4

loc_6B406ABC:				; CODE XREF: .text:6B406A97j
		xor	eax, eax

loc_6B406ABE:				; CODE XREF: .text:6B406AB3j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6B406AD0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B406AD0	proc near		; CODE XREF: sub_6B406230+53p
					; .text:6B406AC1j

arg_0		= dword	ptr  4

		cmp	word ptr ds:6B400000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6B406AE2

loc_6B406ADD:				; CODE XREF: sub_6B406AD0+27j
					; sub_6B406AD0+2Fj ...
		xor	eax, eax

loc_6B406ADF:				; CODE XREF: sub_6B406AD0+61j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B406AE2:				; CODE XREF: sub_6B406AD0+Bj
		mov	eax, ds:6B40003Ch
		cmp	dword ptr [eax+6B400000h], 4550h
		lea	edx, [eax+6B400000h]
		jnz	short loc_6B406ADD
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6B406ADD
		mov	ebx, [esp+8+arg_0]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 6B400000h
		test	esi, esi
		jz	short loc_6B406ADD
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6B406B25
; ---------------------------------------------------------------------------

loc_6B406B22:				; CODE XREF: sub_6B406AD0+68j
		add	eax, 28h

loc_6B406B25:				; CODE XREF: sub_6B406AD0+50j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_6B406B33
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6B406ADF

loc_6B406B33:				; CODE XREF: sub_6B406AD0+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_6B406B22
		jmp	short loc_6B406ADD
sub_6B406AD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B406B40	proc near		; CODE XREF: sub_6B406380+2Ap
		cmp	word ptr ds:6B400000h, 5A4Dh
		jz	short loc_6B406B50

loc_6B406B4B:				; CODE XREF: sub_6B406B40+25j
					; sub_6B406B40+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406B50:				; CODE XREF: sub_6B406B40+9j
		mov	eax, ds:6B40003Ch
		cmp	dword ptr [eax+6B400000h], 4550h
		lea	edx, [eax+6B400000h]
		jnz	short loc_6B406B4B
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6B406B4B
		movzx	eax, word ptr [edx+6]
		retn
sub_6B406B40	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:6B400000h, 5A4Dh
		push	ebx
		mov	edx, [esp+8]
		jz	short loc_6B406B94

loc_6B406B90:				; CODE XREF: .text:6B406BA9j
					; .text:6B406BB1j ...
		xor	eax, eax

loc_6B406B92:				; CODE XREF: .text:6B406BDBj
					; .text:6B406BE9j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B406B94:				; CODE XREF: .text:6B406B8Ej
		mov	eax, ds:6B40003Ch
		cmp	dword ptr [eax+6B400000h], 4550h
		lea	ecx, [eax+6B400000h]
		jnz	short loc_6B406B90
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6B406B90
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_6B406B90
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
		xor	ecx, ecx
		jmp	short loc_6B406BD3
; ---------------------------------------------------------------------------
		align 10h

loc_6B406BD0:				; CODE XREF: .text:6B406BE5j
		add	eax, 28h

loc_6B406BD3:				; CODE XREF: .text:6B406BC8j
		test	byte ptr [eax+27h], 20h
		jz	short loc_6B406BE0
		test	edx, edx
		jz	short loc_6B406B92
		sub	edx, 1

loc_6B406BE0:				; CODE XREF: .text:6B406BD7j
		add	ecx, 1
		cmp	ecx, ebx
		jb	short loc_6B406BD0
		xor	eax, eax
		jmp	short loc_6B406B92
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B406BF0	proc near		; CODE XREF: sub_6B406230+7Dp
		cmp	word ptr ds:6B400000h, 5A4Dh
		jz	short loc_6B406C00

loc_6B406BFB:				; CODE XREF: sub_6B406BF0+25j
		xor	eax, eax

locret_6B406BFD:			; CODE XREF: sub_6B406BF0+32j
					; sub_6B406BF0+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406C00:				; CODE XREF: sub_6B406BF0+9j
		mov	eax, ds:6B40003Ch
		cmp	dword ptr [eax+6B400000h], 4550h
		lea	edx, [eax+6B400000h]
		jnz	short loc_6B406BFB
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 6B400000h
		jz	short locret_6B406BFD
		xor	eax, eax
		jmp	short locret_6B406BFD
sub_6B406BF0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:6B400000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_6B406C42

loc_6B406C3D:				; CODE XREF: .text:6B406C57j
					; .text:6B406C5Fj ...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B406C42:				; CODE XREF: .text:6B406C3Bj
		mov	eax, ds:6B40003Ch
		cmp	dword ptr [eax+6B400000h], 4550h
		lea	edx, [eax+6B400000h]
		jnz	short loc_6B406C3D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6B406C3D
		mov	ebx, [esp+0Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 6B400000h
		test	esi, esi
		jz	short loc_6B406C3D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_6B406C85
; ---------------------------------------------------------------------------

loc_6B406C82:				; CODE XREF: .text:6B406C98j
		add	eax, 28h

loc_6B406C85:				; CODE XREF: .text:6B406C80j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_6B406C93
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6B406CA0

loc_6B406C93:				; CODE XREF: .text:6B406C8Aj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_6B406C82
		jmp	short loc_6B406C3D
; ---------------------------------------------------------------------------
		align 10h

loc_6B406CA0:				; CODE XREF: .text:6B406C91j
		test	eax, eax
		jz	short loc_6B406C3D
		mov	eax, [eax+24h]
		pop	ebx
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B406CB0	proc near		; CODE XREF: .text:6B406DD8p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:6B400000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_6B406CE0

loc_6B406CCD:				; CODE XREF: sub_6B406CB0+46j
					; sub_6B406CB0+4Ej ...
		xor	eax, eax

loc_6B406CCF:				; CODE XREF: sub_6B406CB0+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406CE0:				; CODE XREF: sub_6B406CB0+1Bj
		mov	edx, ds:6B40003Ch
		cmp	dword ptr [edx+6B400000h], 4550h
		lea	ecx, [edx+6B400000h]
		jnz	short loc_6B406CCD
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_6B406CCD
		mov	esi, [ecx+80h]
		test	esi, esi
		jz	short loc_6B406CCD
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_6B406CCD
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
		xor	ecx, ecx
		jmp	short loc_6B406D24
; ---------------------------------------------------------------------------

loc_6B406D21:				; CODE XREF: sub_6B406CB0+87j
		add	edx, 28h

loc_6B406D24:				; CODE XREF: sub_6B406CB0+6Fj
		mov	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_6B406D32
		add	ebx, [edx+8]
		cmp	esi, ebx
		jb	short loc_6B406D3B

loc_6B406D32:				; CODE XREF: sub_6B406CB0+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_6B406D21
		jmp	short loc_6B406CCD
; ---------------------------------------------------------------------------

loc_6B406D3B:				; CODE XREF: sub_6B406CB0+80j
		test	edx, edx
		lea	esi, [esi+0]
		jz	short loc_6B406CCD
		add	esi, 6B400000h
		jmp	short loc_6B406D5A
; ---------------------------------------------------------------------------
		align 10h

loc_6B406D50:				; CODE XREF: sub_6B406CB0+AFj
					; sub_6B406CB0+B6j
		test	eax, eax
		jle	short loc_6B406D70
		sub	eax, 1
		add	esi, 14h

loc_6B406D5A:				; CODE XREF: sub_6B406CB0+98j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jnz	short loc_6B406D50
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_6B406D50
		jmp	loc_6B406CCD
; ---------------------------------------------------------------------------
		align 10h

loc_6B406D70:				; CODE XREF: sub_6B406CB0+A2j
		mov	eax, 6B400000h
		add	eax, [esi+0Ch]
		jmp	loc_6B406CCF
sub_6B406CB0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		xor	edx, edx
		sub	esp, 18h
		mov	eax, ds:dword_6B4113A4
		test	eax, eax
		jz	short loc_6B406DD2

loc_6B406D8F:				; CODE XREF: .text:6B406E1Fj
					; .text:6B406E3Aj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B406D94:				; CODE XREF: .text:6B406E03j
					; .text:6B406E08j
		movzx	edx, byte ptr [eax+3]
		cmp	dl, 43h
		jz	short loc_6B406DA2
		cmp	dl, 63h
		jnz	short loc_6B406DD0

loc_6B406DA2:				; CODE XREF: .text:6B406D9Bj
		movzx	edx, byte ptr [eax+4]
		cmp	dl, 52h
		jz	short loc_6B406DB2
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_6B406DD0

loc_6B406DB2:				; CODE XREF: .text:6B406DA9j
		movzx	edx, byte ptr [eax+5]
		cmp	dl, 54h
		jz	short loc_6B406E0E
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_6B406E0E
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_6B406E0E
		lea	esi, [esi+0]

loc_6B406DD0:				; CODE XREF: .text:6B406DA0j
					; .text:6B406DB0j ...
		mov	edx, ebx

loc_6B406DD2:				; CODE XREF: .text:6B406D8Dj
					; .text:6B406E0Cj
		lea	ebx, [edx+1]
		mov	[esp], edx
		call	sub_6B406CB0
		test	eax, eax
		jz	short loc_6B406E25
		movzx	edx, byte ptr [eax]
		cmp	dl, 4Dh
		jz	short loc_6B406DEE
		cmp	dl, 6Dh
		jnz	short loc_6B406DD0

loc_6B406DEE:				; CODE XREF: .text:6B406DE7j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 53h
		jz	short loc_6B406DFC
		cmp	dl, 73h
		jnz	short loc_6B406DD0

loc_6B406DFC:				; CODE XREF: .text:6B406DF5j
		movzx	edx, byte ptr [eax+2]
		cmp	dl, 56h
		jz	short loc_6B406D94
		cmp	dl, 76h
		jz	short loc_6B406D94
		mov	edx, ebx
		jmp	short loc_6B406DD2
; ---------------------------------------------------------------------------

loc_6B406E0E:				; CODE XREF: .text:6B406DB9j
					; .text:6B406DC0j ...
		mov	[esp], eax
		call	ds:GetModuleHandleA
		test	eax, eax
		push	ebx
		mov	ds:dword_6B4113A4, eax
		jnz	loc_6B406D8F

loc_6B406E25:				; CODE XREF: .text:6B406DDFj
		mov	dword ptr [esp], offset	aMsvcrt_dll ; "msvcrt.dll"
		call	ds:LoadLibraryW
		sub	esp, 4
		mov	ds:dword_6B4113A4, eax
		jmp	loc_6B406D8F
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], esi
		mov	esi, [esp+30h]
		mov	[esp+1Ch], ebx
		mov	[esp+24h], edi
		mov	[esp+28h], ebp
		mov	[esp], esi
		call	strlen
		cmp	eax, 8
		jbe	short loc_6B406E80

loc_6B406E64:				; CODE XREF: .text:6B406E89j
					; .text:6B406EA0j ...
		xor	ebx, ebx

loc_6B406E66:				; CODE XREF: .text:6B406EDAj
		mov	eax, ebx
		mov	esi, [esp+20h]
		mov	ebx, [esp+1Ch]
		mov	edi, [esp+24h]
		mov	ebp, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406E80:				; CODE XREF: .text:6B406E62j
		cmp	word ptr ds:6B400000h, 5A4Dh
		jnz	short loc_6B406E64
		mov	eax, ds:6B40003Ch
		cmp	dword ptr [eax+6B400000h], 4550h
		lea	edx, [eax+6B400000h]
		jnz	short loc_6B406E64
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_6B406E64
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_6B406E64
		movzx	eax, ax
		xor	edi, edi
		lea	ebx, [edx+eax+18h]
		jmp	short loc_6B406EC4
; ---------------------------------------------------------------------------

loc_6B406EC1:				; CODE XREF: .text:6B406EE1j
		add	ebx, 28h

loc_6B406EC4:				; CODE XREF: .text:6B406EBFj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], esi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jz	short loc_6B406E66
		add	edi, 1
		cmp	edi, ebp
		jb	short loc_6B406EC1
		jmp	loc_6B406E64
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Resume]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Register]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Unregister]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetTextRelBase]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetDataRelBase]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetRegionStart]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetLanguageSpecificData]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetIPInfo]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SetGR]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SetIP]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_DeleteException]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Resume_or_Rethrow]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_RaiseException]
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		xor	ecx, ecx
		lock cmpxchg [edx], ecx
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	eax, [ebx+4]
		sub	eax, 1
		test	eax, eax
		mov	[ebx+4], eax
		jz	short loc_6B406FA0

loc_6B406F95:				; CODE XREF: .text:6B406FB4j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B406FA0:				; CODE XREF: .text:6B406F93j
		mov	dword ptr [ebx+8], 0
		mov	[esp], ebx
		call	sub_6B407480
		sub	esp, 4
		test	eax, eax
		js	short loc_6B406F95
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 1
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		add	esp, 18h
		movzx	eax, al
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B406FF0	proc near		; CODE XREF: sub_6B407CB0+48p
					; .text:6B4087B1p ...

hSemaphore	= dword	ptr -1Ch
lReleaseCount	= dword	ptr -18h
lpPreviousCount	= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+hSemaphore], ebx
		call	sub_6B407480
		mov	edx, eax
		sub	esp, 4
		xor	eax, eax
		test	edx, edx
		js	short loc_6B407032
		mov	[esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+1Ch+lReleaseCount], 1 ; lReleaseCount
		mov	eax, [ebx+4]
		mov	[esp+1Ch+hSemaphore], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		movzx	eax, al

loc_6B407032:				; CODE XREF: sub_6B406FF0+19j
		add	esp, 18h
		pop	ebx
		retn
sub_6B406FF0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 8
		mov	ebx, [esp+10h]
		call	ds:GetCurrentThreadId
		xor	edx, edx
		mov	ecx, eax
		mov	eax, 0FFFFFFFFh
		lock cmpxchg [ebx], edx
		test	eax, eax
		js	short loc_6B407074
		cmp	ecx, [ebx+8]
		mov	eax, 1
		jnz	short loc_6B40706F
		add	dword ptr [ebx+4], 1
		xor	al, al

loc_6B40706F:				; CODE XREF: .text:6B407067j
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B407074:				; CODE XREF: .text:6B40705Dj
		mov	dword ptr [ebx+4], 1
		xor	eax, eax
		mov	[ebx+8], ecx
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+20h]
		call	ds:GetCurrentThreadId
		mov	[esp], ebx
		mov	esi, eax
		call	sub_6B4074C0
		sub	esp, 4
		test	eax, eax
		jz	short loc_6B4070D0
		cmp	esi, [ebx+8]
		jz	short loc_6B4070F6
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jnz	short loc_6B4070E0

loc_6B4070D0:				; CODE XREF: .text:6B4070AEj
		mov	dword ptr [ebx+4], 1
		mov	[ebx+8], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B4070E0:				; CODE XREF: .text:6B4070CEj
		mov	[esp], ebx
		call	sub_6B407480
		mov	eax, 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B4070F6:				; CODE XREF: .text:6B4070B3j
		mov	[esp], ebx
		call	sub_6B407480
		xor	eax, eax
		add	dword ptr [ebx+4], 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407110	proc near		; CODE XREF: .text:6B40874Fp
					; sub_6B408880+CEp ...

hHandle		= dword	ptr -1Ch
dwMilliseconds	= dword	ptr -18h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+hHandle], ebx
		call	sub_6B4074C0
		sub	esp, 4
		test	eax, eax
		jnz	short loc_6B407130

loc_6B407127:				; CODE XREF: sub_6B407110+39j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B407130:				; CODE XREF: sub_6B407110+15j
		mov	[esp+1Ch+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
		mov	eax, [ebx+4]
		mov	[esp+1Ch+hHandle], eax ; hHandle
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	short loc_6B407127
		mov	[esp+1Ch+hHandle], ebx
		call	sub_6B407480
		mov	eax, 1
		sub	esp, 4
		add	esp, 18h
		pop	ebx
		retn
sub_6B407110	endp

; ---------------------------------------------------------------------------
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0FFFFh
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+0Ch], eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4071B0	proc near		; CODE XREF: sub_6B4075B0+13p

lpSemaphoreAttributes= dword ptr -1Ch
lInitialCount	= dword	ptr -18h
lMaximumCount	= dword	ptr -14h
lpName		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	[esp+1Ch+lpName], 0 ; lpName
		mov	[esp+1Ch+lMaximumCount], 0FFFFh	; lMaximumCount
		mov	[esp+1Ch+lInitialCount], 0 ; lInitialCount
		mov	[esp+1Ch+lpSemaphoreAttributes], 0 ; lpSemaphoreAttributes
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+4], eax
		add	esp, 18h
		pop	ebx
		retn
sub_6B4071B0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	eax, [eax+4]
		mov	[esp], eax
		call	ds:CloseHandle
		sub	esp, 4
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B407210(DWORD, LPVOID)
sub_6B407210	proc near		; CODE XREF: sub_6B409130+8Ap

dwTlsIndex	= dword	ptr -1Ch
lpTlsValue	= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+lpTlsValue], eax ; lpTlsValue
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jz	short loc_6B407235
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_6B407235:				; CODE XREF: sub_6B407210+1Dj
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_6B407210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B407240(DWORD)
sub_6B407240	proc near		; CODE XREF: sub_6B409130+5Fp
					; sub_6B409210+5Fp

dwTlsIndex	= dword	ptr -1Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	[esp+1Ch+var_4], esi
		call	ds:GetLastError
		mov	ebx, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsGetValue
		sub	esp, 4
		mov	esi, eax
		mov	[esp+1Ch+dwTlsIndex], ebx ; dwErrCode
		call	ds:SetLastError
		mov	eax, esi
		sub	esp, 4
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
sub_6B407240	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B407280(DWORD)
sub_6B407280	proc near		; CODE XREF: sub_6B409990+14p

dwTlsIndex	= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsFree
		sub	esp, 4
		test	eax, eax
		jz	short loc_6B4072A0
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4072A0:				; CODE XREF: sub_6B407280+15j
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_6B407280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4072B0	proc near		; CODE XREF: sub_6B4075D0+22p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], ebx
		mov	ebx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_4], esi
		mov	esi, [esp+0Ch+arg_0]
		call	ds:TlsAlloc
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6B4072E8
		mov	[esi], eax
		mov	esi, [esp+0Ch+var_4]
		mov	[esp+0Ch+arg_4], ebx
		mov	ebx, [esp+0Ch+var_8]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	sub_6B407420
; ---------------------------------------------------------------------------

loc_6B4072E8:				; CODE XREF: sub_6B4072B0+1Cj
		mov	eax, ds:GetLastError
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	eax
sub_6B4072B0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+24h]
		mov	ebx, [esp+20h]
		test	esi, esi
		jz	short loc_6B407323
		test	ebx, ebx
		jz	short loc_6B407323
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_6B407330

loc_6B40731B:				; CODE XREF: .text:6B407346j
					; .text:6B407362j
		xor	eax, eax

loc_6B40731D:				; CODE XREF: .text:6B407370j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B407323:				; CODE XREF: .text:6B40730Fj
					; .text:6B407313j
		add	esp, 14h
		mov	eax, 16h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B407330:				; CODE XREF: .text:6B407319j
		lea	eax, [ebx+4]
		mov	[esp], eax
		call	sub_6B4074C0
		sub	esp, 4
		test	eax, eax
		jz	short loc_6B407364
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_6B40731B
		mov	esi, ds:Sleep
		xchg	ax, ax

loc_6B407350:				; CODE XREF: .text:6B407360j
		mov	dword ptr [esp], 0
		call	esi ; Sleep
		mov	eax, [ebx]
		sub	esp, 4
		test	eax, eax
		jz	short loc_6B407350
		jmp	short loc_6B40731B
; ---------------------------------------------------------------------------

loc_6B407364:				; CODE XREF: .text:6B407340j
		call	esi
		xor	eax, eax
		mov	dword ptr [ebx], 1
		xchg	ax, ax
		jmp	short loc_6B40731D
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407380	proc near		; CODE XREF: sub_6B405730+D0p
					; sub_6B405730+E2p ...

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_6B4073A1

loc_6B40738C:				; CODE XREF: sub_6B407380+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_6B40738C

loc_6B4073A1:				; CODE XREF: sub_6B407380+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
sub_6B407380	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _write]
		align 10h
		mov	eax, [esp+0Ch]
		mov	edx, [esp+8]
		mov	ecx, [esp+4]
		lock cmpxchg [ecx], edx
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6B4073E0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4073E0	proc near		; CODE XREF: sub_6B401040+53p
					; sub_6B401040+C8p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lock cmpxchg [ecx], edx
		retn	0Ch
sub_6B4073E0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		lock xchg eax, [edx]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407410	proc near		; CODE XREF: sub_6B401040+1A2p
					; sub_6B401040+211p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lock xchg eax, [edx]
		retn	8
sub_6B407410	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407420	proc near		; CODE XREF: sub_6B4072B0+33j

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

; FUNCTION CHUNK AT 6B4069E0 SIZE 00000070 BYTES

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_6B407440
		mov	[esp+0Ch+arg_4], eax
		mov	[esp+0Ch+arg_0], edx
		add	esp, 0Ch
		jmp	loc_6B4069E0
; ---------------------------------------------------------------------------
		align 10h

loc_6B407440:				; CODE XREF: sub_6B407420+Dj
		add	esp, 0Ch
		retn
sub_6B407420	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	loc_6B406940
; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6B407480
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407480	proc near		; CODE XREF: .text:6B406FAAp
					; sub_6B406FF0+Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn	4
sub_6B407480	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6B4074C0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4074C0	proc near		; CODE XREF: .text:6B4070A4p
					; sub_6B407110+Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn	4
sub_6B4074C0	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memset]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fputs]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION realloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B407590	proc near		; DATA XREF: .text:6B4099CCo
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_6B401430
		mov	dword ptr [esp], offset	sub_6B401480 ; _onexit_t
		call	sub_6B4060B0
		leave
		retn
sub_6B407590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4075B0	proc near		; DATA XREF: .text:6B4099C8o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, dword_6B40A00C
		test	eax, eax
		jz	short loc_6B4075C8
		mov	[esp+1Ch+var_1C], offset dword_6B40EA30
		call	sub_6B4071B0

loc_6B4075C8:				; CODE XREF: sub_6B4075B0+Aj
		add	esp, 1Ch
		retn
sub_6B4075B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4075D0	proc near		; DATA XREF: .text:6B4099C4o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		mov	eax, dword_6B40A00C
		mov	byte_6B40EA24, 0
		test	eax, eax
		jz	short loc_6B407600
		mov	[esp+1Ch+var_18], offset sub_6B407610
		mov	[esp+1Ch+var_1C], offset dword_6B40EA20
		call	sub_6B4072B0
		test	eax, eax
		setz	byte_6B40EA24

loc_6B407600:				; CODE XREF: sub_6B4075D0+11j
		mov	[esp+1Ch+var_1C], offset sub_6B409990 ;	_onexit_t
		call	sub_6B4060B0
		add	esp, 1Ch
		retn
sub_6B4075D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B407610	proc near		; DATA XREF: sub_6B4075D0+13o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jz	short loc_6B407645
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B407637

loc_6B407623:				; CODE XREF: sub_6B407610+25j
		mov	ebx, [eax+10h]
		add	eax, 30h
		mov	[esp+1Ch+var_1C], eax
		call	_Unwind_DeleteException
		test	ebx, ebx
		mov	eax, ebx
		jnz	short loc_6B407623

loc_6B407637:				; CODE XREF: sub_6B407610+11j
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	free
; ---------------------------------------------------------------------------

loc_6B407645:				; CODE XREF: sub_6B407610+Bj
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6B407610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407650	proc near		; CODE XREF: sub_6B4077F0+3Bp
					; sub_6B4093B0+423p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, eax
		sub	esp, 28h
		movzx	ecx, byte ptr [eax+14h]
		cmp	cl, 0FFh
		movzx	eax, cl
		jz	short loc_6B4076B6
		mov	ecx, eax
		and	ecx, 7
		cmp	ecx, 2
		jz	short loc_6B4076B0
		jle	short loc_6B407680
		cmp	ecx, 3
		jz	short loc_6B407684
		cmp	ecx, 4
		jz	short loc_6B4076A6

loc_6B407678:				; CODE XREF: sub_6B407650+32j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6B407680:				; CODE XREF: sub_6B407650+1Cj
		test	ecx, ecx
		jnz	short loc_6B407678

loc_6B407684:				; CODE XREF: sub_6B407650+21j
		shl	edx, 2
		neg	edx

loc_6B407689:				; CODE XREF: sub_6B407650+5Bj
					; sub_6B407650+64j ...
		mov	ecx, [ebx+0Ch]
		add	ecx, edx
		mov	edx, [ebx+8]
		lea	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6B407930
		mov	eax, [esp+2Ch+var_10]
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B4076A6:				; CODE XREF: sub_6B407650+26j
		shl	edx, 3
		neg	edx
		jmp	short loc_6B407689
; ---------------------------------------------------------------------------
		align 10h

loc_6B4076B0:				; CODE XREF: sub_6B407650+1Aj
		add	edx, edx
		neg	edx
		jmp	short loc_6B407689
; ---------------------------------------------------------------------------

loc_6B4076B6:				; CODE XREF: sub_6B407650+10j
		xor	edx, edx
		jmp	short loc_6B407689
sub_6B407650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4076C0	proc near		; CODE XREF: sub_6B4077F0+46p
					; sub_6B4093B0+43Fp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	eax, [ecx]
		mov	[esp+2Ch+var_8], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], edi
		mov	edi, ecx
		mov	[esp+2Ch+var_10], eax
		mov	eax, [edx]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+8]
		test	al, al
		jz	short loc_6B4076F1
		mov	eax, [esp+2Ch+var_10]
		mov	eax, [eax]
		mov	[esp+2Ch+var_10], eax

loc_6B4076F1:				; CODE XREF: sub_6B4076C0+25j
		mov	eax, [ebx]
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [eax+10h]
		mov	edx, eax
		xor	eax, eax
		test	dl, dl
		jz	short loc_6B407720
		mov	eax, [esp+2Ch+var_10]
		mov	[edi], eax
		mov	eax, 1

loc_6B407720:				; CODE XREF: sub_6B4076C0+53j
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_6B4076C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B407730	proc near		; CODE XREF: sub_6B408C8D+69p
					; sub_6B4093B0+E3p ...

var_2C		= dword	ptr -2Ch

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, eax
		push	ebx
		xor	eax, eax
		sub	esp, 1Ch
		test	esi, esi
		mov	ebx, ecx
		jz	short loc_6B40774B
		mov	[esp+2Ch+var_2C], esi
		call	_Unwind_GetRegionStart

loc_6B40774B:				; CODE XREF: sub_6B407730+11j
		mov	[ebx], eax
		movzx	edx, byte ptr [edi]
		add	edi, 1
		cmp	dl, 0FFh
		jz	short loc_6B4077D7
		movzx	ebp, dl
		mov	edx, esi
		mov	eax, ebp
		call	sub_6B407870
		lea	edx, [ebx+4]
		mov	ecx, edi
		mov	[esp+2Ch+var_2C], edx
		mov	edx, eax
		mov	eax, ebp
		call	sub_6B407930
		mov	edi, eax
		movzx	eax, byte ptr [edi]
		add	edi, 1
		cmp	al, 0FFh
		mov	[ebx+14h], al
		jz	short loc_6B4077E7

loc_6B407784:				; CODE XREF: sub_6B407730+B5j
		xor	esi, esi
		xor	ecx, ecx

loc_6B407788:				; CODE XREF: sub_6B407730+6Cj
		movzx	eax, byte ptr [edi]
		add	edi, 1
		mov	edx, eax
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	al, al
		js	short loc_6B407788
		lea	esi, [edi+esi]
		mov	[ebx+0Ch], esi

loc_6B4077A4:				; CODE XREF: sub_6B407730+BEj
		movzx	eax, byte ptr [edi]
		xor	ecx, ecx
		mov	[ebx+15h], al
		lea	eax, [edi+1]
		xor	edi, edi

loc_6B4077B1:				; CODE XREF: sub_6B407730+97j
		movzx	esi, byte ptr [eax]
		add	eax, 1
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		mov	edx, esi
		test	dl, dl
		js	short loc_6B4077B1
		lea	edi, [eax+edi]
		mov	[ebx+10h], edi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B4077D7:				; CODE XREF: sub_6B407730+26j
		mov	[ebx+4], eax
		movzx	eax, byte ptr [edi]
		add	edi, 1
		cmp	al, 0FFh
		mov	[ebx+14h], al
		jnz	short loc_6B407784

loc_6B4077E7:				; CODE XREF: sub_6B407730+52j
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_6B4077A4
sub_6B407730	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B4077F0	proc near		; CODE XREF: sub_6B408C8D+80p
					; sub_6B408C8D+ADp ...

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, edx
		push	edi
		xor	edx, edx
		push	esi
		mov	edi, eax
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_20], ecx
		xor	ecx, ecx
		not	ebx
		add	ebx, [eax+0Ch]
		lea	esi, [esi+0]

loc_6B407810:				; CODE XREF: sub_6B4077F0+53j
					; sub_6B4077F0+58j
		movzx	esi, byte ptr [ebx]
		add	ebx, 1
		mov	eax, esi
		and	eax, 7Fh
		shl	eax, cl
		or	edx, eax
		mov	eax, esi
		test	al, al
		js	short loc_6B407845
		test	edx, edx
		jz	short loc_6B407850
		mov	eax, edi
		call	sub_6B407650
		lea	ecx, [esp+2Ch+var_20]
		mov	edx, ebp
		call	sub_6B4076C0
		test	al, al
		jnz	short loc_6B407860
		xor	edx, edx
		xor	ecx, ecx
		jmp	short loc_6B407810
; ---------------------------------------------------------------------------

loc_6B407845:				; CODE XREF: sub_6B4077F0+33j
		add	ecx, 7
		jmp	short loc_6B407810
; ---------------------------------------------------------------------------
		align 10h

loc_6B407850:				; CODE XREF: sub_6B4077F0+37j
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B407860:				; CODE XREF: sub_6B4077F0+4Dj
		add	esp, 1Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6B4077F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407870	proc near		; CODE XREF: sub_6B407730+2Fp
					; sub_6B4093B0+F5p ...

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	al, 0FFh
		jz	short loc_6B4078A4
		and	eax, 70h
		cmp	eax, 20h
		jz	short loc_6B4078D0
		jle	short loc_6B4078A0
		cmp	eax, 40h
		jz	short loc_6B4078B7
		cmp	eax, 50h
		lea	esi, [esi+0]
		jz	short loc_6B4078A4
		cmp	eax, 30h
		jz	short loc_6B4078E0

loc_6B407897:				; CODE XREF: sub_6B407870+43j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6B4078A0:				; CODE XREF: sub_6B407870+Fj
		test	eax, eax
		jnz	short loc_6B4078B0

loc_6B4078A4:				; CODE XREF: sub_6B407870+5j
					; sub_6B407870+20j ...
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4078B0:				; CODE XREF: sub_6B407870+32j
		cmp	eax, 10h
		jnz	short loc_6B407897
		jmp	short loc_6B4078A4
; ---------------------------------------------------------------------------

loc_6B4078B7:				; CODE XREF: sub_6B407870+14j
		mov	[esp+1Ch+var_1C], edx
		lea	esi, [esi+0]
		call	_Unwind_GetRegionStart
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4078D0:				; CODE XREF: sub_6B407870+Dj
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_GetTextRelBase
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4078E0:				; CODE XREF: sub_6B407870+25j
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_GetDataRelBase
		add	esp, 1Ch
		retn
sub_6B407870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4078F0	proc near		; DATA XREF: sub_6B409350+37o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		cmp	[esp+1Ch+arg_0], 1
		lea	edx, [eax-40h]
		ja	short loc_6B407921
		mov	edx, [edx+14h]
		lea	ebx, [eax+20h]
		test	edx, edx
		jz	short loc_6B407914
		lea	ebx, [eax+20h]
		mov	[esp+1Ch+var_1C], ebx
		call	edx

loc_6B407914:				; CODE XREF: sub_6B4078F0+1Aj
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_6B408FB0
; ---------------------------------------------------------------------------

loc_6B407921:				; CODE XREF: sub_6B4078F0+10j
		mov	eax, [edx+1Ch]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6B407A80
sub_6B4078F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407930	proc near		; CODE XREF: sub_6B407650+48p
					; sub_6B407730+40p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	eax, ecx
		cmp	bl, 50h
		mov	[esp+2Ch+var_8], edi
		mov	edi, edx
		mov	edx, ebx
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_4], ebp
		jz	loc_6B407A60
		mov	[esp+2Ch+var_24], ecx
		movzx	ecx, bl
		mov	[esp+2Ch+var_28], ecx
		and	ecx, 0Fh
		cmp	ecx, 0Ch	; switch 13 cases
		jbe	short loc_6B407970

loc_6B407967:				; CODE XREF: sub_6B407930:loc_6B407970j
					; DATA XREF: .rdata:off_6B40F040o
		call	abort		; jumptable 6B407970 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6B407970:				; CODE XREF: sub_6B407930+35j
		jmp	ds:off_6B40F040[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6B407977:				; CODE XREF: sub_6B407930:loc_6B407970j
					; DATA XREF: .rdata:off_6B40F040o
		mov	ebx, [eax]	; jumptable 6B407970 cases 0,3,11
		add	eax, 4

loc_6B40797C:				; CODE XREF: sub_6B407930+95j
					; sub_6B407930+C9j ...
		test	ebx, ebx
		xchg	ax, ax
		jz	short loc_6B4079A0
		mov	ecx, [esp+2Ch+var_28]
		and	ecx, 70h
		cmp	ecx, 10h
		jz	loc_6B407A70

loc_6B407992:				; CODE XREF: sub_6B407930+144j
		add	ebx, edi
		test	dl, dl
		jns	short loc_6B4079A0
		mov	ebx, [ebx]
		lea	esi, [esi+0]

loc_6B4079A0:				; CODE XREF: sub_6B407930+50j
					; sub_6B407930+66j ...
		mov	edx, [esp+2Ch+arg_0]
		mov	[edx], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B4079C0:				; CODE XREF: sub_6B407930:loc_6B407970j
					; DATA XREF: .rdata:off_6B40F040o
		mov	ebx, [eax]	; jumptable 6B407970 cases 4,12
		add	eax, 8
		jmp	short loc_6B40797C
; ---------------------------------------------------------------------------

loc_6B4079C7:				; CODE XREF: sub_6B407930:loc_6B407970j
					; DATA XREF: .rdata:off_6B40F040o
		xor	ebx, ebx	; jumptable 6B407970 case 9
		xor	ecx, ecx
		mov	esi, ebx
		mov	ebp, edx
		mov	[esp+2Ch+var_20], edi

loc_6B4079D3:				; CODE XREF: sub_6B407930+BAj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	edi, bl
		mov	edx, edi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6B4079D3
		cmp	ecx, 1Fh
		mov	ebx, esi
		mov	edx, ebp
		mov	esi, edi
		mov	edi, [esp+2Ch+var_20]
		ja	short loc_6B40797C
		and	esi, 40h
		jz	loc_6B40797C
		mov	esi, 0FFFFFFFFh
		shl	esi, cl
		or	ebx, esi
		jmp	loc_6B40797C
; ---------------------------------------------------------------------------

loc_6B407A12:				; CODE XREF: sub_6B407930:loc_6B407970j
					; DATA XREF: .rdata:off_6B40F040o
		mov	ebp, edi	; jumptable 6B407970 case 1
		xor	ebx, ebx
		xor	ecx, ecx
		mov	edi, edx
		lea	esi, [esi+0]

loc_6B407A20:				; CODE XREF: sub_6B407930+106j
		movzx	edx, byte ptr [eax]
		mov	esi, 7Fh
		add	eax, 1
		and	esi, edx
		shl	esi, cl
		add	ecx, 7
		or	ebx, esi
		test	dl, dl
		js	short loc_6B407A20
		mov	edx, edi
		mov	edi, ebp
		jmp	loc_6B40797C
; ---------------------------------------------------------------------------

loc_6B407A41:				; CODE XREF: sub_6B407930:loc_6B407970j
					; DATA XREF: .rdata:off_6B40F040o
		movsx	ebx, word ptr [eax] ; jumptable	6B407970 case 10
		add	eax, 2
		jmp	loc_6B40797C
; ---------------------------------------------------------------------------
		align 10h

loc_6B407A50:				; CODE XREF: sub_6B407930:loc_6B407970j
					; DATA XREF: .rdata:off_6B40F040o
		movzx	ebx, word ptr [eax] ; jumptable	6B407970 case 2
		add	eax, 2
		jmp	loc_6B40797C
; ---------------------------------------------------------------------------
		align 10h

loc_6B407A60:				; CODE XREF: sub_6B407930+1Ej
		add	eax, 3
		and	eax, 0FFFFFFFCh
		mov	ebx, [eax]
		add	eax, 4
		jmp	loc_6B4079A0
; ---------------------------------------------------------------------------

loc_6B407A70:				; CODE XREF: sub_6B407930+5Cj
		mov	edi, [esp+2Ch+var_24]
		jmp	loc_6B407992
sub_6B407930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B407A80	proc near		; CODE XREF: sub_6B4078F0+37p
					; sub_6B408690+Bp ...

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6B4093B0
		mov	[ebp+var_20], offset dword_6B4099DC
		mov	[ebp+var_18], offset sub_6B407ABE
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	[ebp+var_38], 2
		call	[ebp+arg_0]
		call	abort
sub_6B407A80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407ABE	proc near		; DATA XREF: sub_6B407A80+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		cmp	dword ptr [ebp-38h], 1
		mov	[ebp-40h], eax
		jz	short loc_6B407AEB
		mov	dword ptr [ebp-38h], 0
		call	sub_6B408DB0
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B407AEB:				; CODE XREF: sub_6B407ABE+Dj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_6B408AE0
		mov	dword ptr [ebp-38h], 1
		call	abort
sub_6B407ABE	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407B10	proc near		; CODE XREF: sub_6B408640+Bp
					; sub_6B408C20+68p

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		call	[esp+0Ch+arg_0]
		call	sub_6B408690
sub_6B407B10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407B20	proc near		; DATA XREF: .rdata:6B4108E4o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B4108E0
		add	esp, 0Ch
		jmp	loc_6B4086A0
sub_6B407B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407B40	proc near		; DATA XREF: .rdata:off_6B4108E0o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B4108E0
		retn
sub_6B407B40	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6B4108E0
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407B60	proc near		; DATA XREF: .rdata:6B41090Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6B410908
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6B408630
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_6B4086A0
sub_6B407B60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407B90	proc near		; DATA XREF: .rdata:off_6B410908o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410908
		add	esp, 0Ch
		jmp	sub_6B408630
sub_6B407B90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407BB0	proc near		; CODE XREF: sub_6B407C10+11p
					; sub_6B407C40+10j ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410908
		add	esp, 0Ch
		jmp	sub_6B408630
sub_6B407BB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407BD0	proc near		; DATA XREF: .rdata:6B41094Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410948
		add	esp, 0Ch
		jmp	loc_6B4086A0
sub_6B407BD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407BF0	proc near		; DATA XREF: .rdata:off_6B410948o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B410948
		retn
sub_6B407BF0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6B410948
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407C10	proc near		; DATA XREF: .rdata:6B41096Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6B410968
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6B407BB0
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_6B4086A0
sub_6B407C10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407C40	proc near		; DATA XREF: .rdata:off_6B410968o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410968
		add	esp, 0Ch
		jmp	sub_6B407BB0
sub_6B407C40	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_6B410968
		add	esp, 0Ch
		jmp	sub_6B407BB0
; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. _ZN5GpgME12DataProviderD0Ev

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public _ZN5GpgME12DataProviderD0Ev
_ZN5GpgME12DataProviderD0Ev proc near	; DATA XREF: .rdata:6B4109ACo

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	edx, ds:_ZTVN5GpgME12DataProviderE
		mov	eax, [esp+0Ch+arg_0]
		add	edx, 8
		mov	[eax], edx
		add	esp, 0Ch
		jmp	loc_6B4086A0
_ZN5GpgME12DataProviderD0Ev endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. _ZN5GpgME12DataProviderD1Ev

; =============== S U B	R O U T	I N E =======================================


		public _ZN5GpgME12DataProviderD1Ev
_ZN5GpgME12DataProviderD1Ev proc near	; DATA XREF: .rdata:6B4109A8o

arg_0		= dword	ptr  4

		mov	edx, ds:_ZTVN5GpgME12DataProviderE
		mov	eax, [esp+arg_0]
		add	edx, 8
		mov	[eax], edx
		retn
_ZN5GpgME12DataProviderD1Ev endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B407CB0	proc near		; CODE XREF: .text:6B40885Ep
					; sub_6B408A51+40p

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6B4093B0
		mov	[ebp+var_20], offset dword_6B409A54
		mov	[ebp+var_18], offset sub_6B407D38
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, dword_6B40A00C
		mov	eax, [ebp+arg_0]
		test	edx, edx
		mov	eax, [eax]
		jz	short loc_6B407D01
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_6B406FF0
		test	eax, eax
		jnz	short loc_6B407D0E

loc_6B407D01:				; CODE XREF: sub_6B407CB0+3Cj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B407D0E:				; CODE XREF: sub_6B407CB0+4Fj
		mov	dword ptr [esp], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A80
		mov	dword ptr [esp+8], offset sub_6B407DF0
		mov	dword ptr [esp+4], offset off_6B410668
		mov	[esp], eax
		call	sub_6B409350
sub_6B407CB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407D38	proc near		; DATA XREF: sub_6B407CB0+20o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6B407D53
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B407D53:				; CODE XREF: sub_6B407D38+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6B408C20
sub_6B407D38	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407D70	proc near		; DATA XREF: .rdata:6B410A6Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6B410A68
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6B4085F0
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_6B4086A0
sub_6B407D70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407DA0	proc near		; DATA XREF: .text:6B4087FAo
					; sub_6B408880+1B9o ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410A68
		add	esp, 0Ch
		jmp	sub_6B4085F0
sub_6B407DA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B407DC0	proc near		; DATA XREF: .rdata:6B410A84o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_6B410A80
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6B4085F0
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_6B4086A0
sub_6B407DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B407DF0	proc near		; DATA XREF: sub_6B407CB0+70o
					; .text:6B4087D0o ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410A80
		add	esp, 0Ch
		jmp	sub_6B4085F0
sub_6B407DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B407E10	proc near		; DATA XREF: .data:off_6B40EA28o

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_6B4093B0
		mov	[ebp+var_30], offset dword_6B409A1C
		mov	[ebp+var_28], offset sub_6B407FBD
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6B40EA38, 0
		jz	short loc_6B407E80
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 1Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCalle	; "terminate called recursively\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_6B407E80:				; CODE XREF: sub_6B407E10+36j
		mov	byte_6B40EA38, 1
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_6B408D80
		test	eax, eax
		jz	loc_6B407F75
		mov	eax, [eax+4]
		mov	[ebp+var_C], 0FFFFFFFFh
		mov	dword ptr [esp+8], 0 ; int
		mov	dword ptr [esp+4], 0 ; char *
		mov	[ebp+var_50], eax
		lea	eax, [ebp+var_C]
		mov	[esp+0Ch], eax	; int
		mov	eax, [ebp+var_50]
		mov	[esp], eax	; int
		call	sub_6B405A10
		mov	dword ptr [esp+8], 30h ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCal_0	; "terminate called after throwing an inst"...
		mov	[ebp+var_54], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		call	fwrite
		mov	edx, [ebp+var_C]
		test	edx, edx
		jnz	short loc_6B407F55
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+4], eax	; FILE *
		mov	eax, [ebp+var_54]
		mov	[esp], eax	; char *
		call	fputs

loc_6B407F13:				; CODE XREF: sub_6B407E10+163j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 2 ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	asc_6B40F0C5 ; "'\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite
		mov	eax, [ebp+var_C]
		test	eax, eax
		jz	short loc_6B407FB0

loc_6B407F49:				; CODE XREF: sub_6B407E10+1ABj
		mov	[ebp+var_48], 2
		call	sub_6B4092F0
; ---------------------------------------------------------------------------

loc_6B407F55:				; CODE XREF: sub_6B407E10+EAj
		mov	eax, ds:_iob
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 40h
		mov	[esp+4], eax	; FILE *
		mov	eax, [ebp+var_50]
		mov	[esp], eax	; char *
		call	fputs
		jmp	short loc_6B407F13
; ---------------------------------------------------------------------------

loc_6B407F75:				; CODE XREF: sub_6B407E10+85j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 2Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCal_1	; "terminate called without an active exce"...
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite

loc_6B407FA4:				; CODE XREF: sub_6B407FBD+4Cj
		mov	[ebp+var_48], 0FFFFFFFFh
		call	abort
; ---------------------------------------------------------------------------

loc_6B407FB0:				; CODE XREF: sub_6B407E10+137j
		mov	eax, [ebp+var_54]
		mov	[esp], eax	; void *
		call	free
		jmp	short loc_6B407F49
sub_6B407E10	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_6B407FBD(size_t, size_t, FILE	*)
sub_6B407FBD	proc near		; DATA XREF: sub_6B407E10+1Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-58h], eax
		mov	eax, [ebp-40h]
		jz	short loc_6B407FED
		mov	dword ptr [ebp-48h], 0
		call	sub_6B408DB0
		mov	eax, [ebp-58h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B407FED:				; CODE XREF: sub_6B407FBD+10j
		cmp	eax, 2
		jz	short loc_6B40800B
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_6B408AE0

loc_6B407FFD:				; CODE XREF: sub_6B407FBD+C4j
		mov	dword ptr [ebp-48h], 0
		call	sub_6B408DB0
		jmp	short loc_6B407FA4
; ---------------------------------------------------------------------------

loc_6B40800B:				; CODE XREF: sub_6B407FBD+33j
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_6B408AE0
		mov	edx, [eax]
		mov	[esp+0], eax
		mov	eax, [edx+8]
		mov	dword ptr [ebp-48h], 1
		call	eax
		mov	[ebp-5Ch], eax
		mov	eax, ds:_iob
		mov	[esp+arg_4], 0Bh ; size_t
		mov	[esp+arg_0], 1	; size_t
		mov	dword ptr [esp+0], offset aWhat	; "  what():  "
		add	eax, 40h
		mov	[esp+arg_8], eax ; FILE	*
		call	fwrite
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+arg_0], eax ; FILE	*
		mov	eax, [ebp-5Ch]
		mov	[esp+0], eax	; char *
		call	fputs
		mov	eax, ds:_iob
		mov	dword ptr [esp+0], 0Ah ; int
		add	eax, 40h
		mov	[esp+arg_0], eax ; FILE	*
		call	fputc
		jmp	loc_6B407FFD
sub_6B407FBD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408090	proc near		; DATA XREF: .rdata:6B410918o
					; .rdata:6B410978o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	sub_6B408550
		mov	edx, eax
		mov	eax, 1
		test	dl, dl
		jnz	short loc_6B4080D1
		xor	eax, eax
		cmp	edi, 3
		jbe	short loc_6B4080E5

loc_6B4080D1:				; CODE XREF: sub_6B408090+38j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6B4080E5:				; CODE XREF: sub_6B408090+3Fj
		mov	eax, [ebx]
		mov	[esp+2Ch+arg_8], ebp
		mov	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_4], esi
		mov	ebp, [esp+2Ch+var_4]
		mov	[esp+2Ch+arg_0], ebx
		mov	esi, [esp+2Ch+var_C]
		mov	eax, [eax+14h]
		mov	ebx, [esp+2Ch+var_10]
		add	esp, 2Ch
		jmp	eax
sub_6B408090	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408110	proc near		; CODE XREF: sub_6B408270+32p
					; DATA XREF: .rdata:6B410920o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6B408550
		mov	edx, eax
		xor	eax, eax
		test	dl, dl
		jz	short loc_6B40814D
		mov	eax, [esp+1Ch+arg_8]
		mov	dword ptr [ebx+0Ch], 8
		mov	dword ptr [ebx+4], 6
		mov	[ebx], eax
		mov	eax, 1

loc_6B40814D:				; CODE XREF: sub_6B408110+22j
		add	esp, 18h
		pop	ebx
		retn
sub_6B408110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408160	proc near		; DATA XREF: .rdata:6B41091Co
					; .rdata:6B41097Co

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		lea	ecx, [esp+2Ch+var_1C]
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_1C], 0
		mov	[esp+2Ch+var_18], 0
		mov	edx, [eax]
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, [ebx]
		mov	[esp+2Ch+var_14], 10h
		mov	[esp+2Ch+var_10], 0
		mov	[esp+2Ch+var_2C], eax
		mov	[esp+2Ch+var_24], ecx
		mov	ecx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], ecx
		call	dword ptr [edx+18h]
		mov	edx, [esp+2Ch+var_18]
		xor	eax, eax
		and	edx, 6
		cmp	edx, 6
		jnz	short loc_6B4081C3
		mov	eax, [esp+2Ch+var_1C]
		mov	[ebx], eax
		mov	eax, 1

loc_6B4081C3:				; CODE XREF: sub_6B408160+56j
		add	esp, 28h
		pop	ebx
		retn
sub_6B408160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4081D0	proc near		; DATA XREF: .rdata:6B410924o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_10]
		cmp	ebx, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_1C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		jz	short loc_6B408230

loc_6B4081F9:				; CODE XREF: sub_6B4081D0+72j
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	sub_6B408550
		test	al, al
		jz	short loc_6B408219
		mov	[edi], ebx
		mov	[edi+4], ebp
		mov	dword ptr [edi+0Ch], 1

loc_6B408219:				; CODE XREF: sub_6B4081D0+3Bj
					; sub_6B4081D0+77j
		xor	eax, eax
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B408230:				; CODE XREF: sub_6B4081D0+27j
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	sub_6B408550
		test	al, al
		jz	short loc_6B4081F9
		mov	[edi+8], ebp
		jmp	short loc_6B408219
sub_6B4081D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408250	proc near		; DATA XREF: .rdata:6B410928o

arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		cmp	eax, [esp+arg_8]
		setz	al
		movzx	eax, al
		lea	eax, [eax+eax*4+1]
		retn
sub_6B408250	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408270	proc near		; DATA XREF: .rdata:6B410980o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_2C], ebp
		call	sub_6B408110
		test	al, al
		jz	short loc_6B4082C4
		mov	eax, 1
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6B4082C4:				; CODE XREF: sub_6B408270+39j
		mov	eax, [ebp+8]
		mov	ebp, [esp+2Ch+var_4]
		mov	edx, [eax]
		mov	[esp+2Ch+arg_C], edi
		mov	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_8], esi
		mov	esi, [esp+2Ch+var_C]
		mov	[esp+2Ch+arg_4], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+arg_0], eax
		mov	eax, [edx+18h]
		add	esp, 2Ch
		jmp	eax
sub_6B408270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408300	proc near		; DATA XREF: .rdata:6B410984o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 3Ch
		mov	ecx, [esp+3Ch+arg_14]
		mov	edx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_8], edi
		mov	eax, [esp+3Ch+arg_8]
		mov	edi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_20], ecx
		mov	ecx, [esp+3Ch+arg_18]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_1C]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_3C], edi
		call	sub_6B408550
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_2C]
		test	al, al
		jz	short loc_6B408390
		mov	eax, [esp+3Ch+var_24]
		test	ebp, ebp
		mov	[ebx], esi
		mov	[ebx+4], eax
		js	short loc_6B4083E0
		add	esi, ebp
		xor	eax, eax
		cmp	ecx, esi
		setz	al
		lea	eax, [eax+eax*4+1]
		mov	[ebx+0Ch], eax

loc_6B408378:				; CODE XREF: sub_6B408300+E3j
					; sub_6B408300+ECj ...
		xor	eax, eax
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B408390:				; CODE XREF: sub_6B408300+59j
		cmp	esi, ecx
		jz	short loc_6B4083F0

loc_6B408394:				; CODE XREF: sub_6B408300+112j
		mov	edi, [edi+8]
		mov	eax, [edi]
		mov	[esp+3Ch+arg_18], ecx
		mov	ecx, [esp+3Ch+var_20]
		mov	[esp+3Ch+arg_C], edx
		mov	edx, [esp+3Ch+var_24]
		mov	[esp+3Ch+arg_1C], ebx
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_10], esi
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_4], ebp
		mov	ebp, [esp+3Ch+var_4]
		mov	[esp+3Ch+arg_0], edi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_14], ecx
		mov	[esp+3Ch+arg_8], edx
		mov	eax, [eax+1Ch]
		add	esp, 3Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6B4083E0:				; CODE XREF: sub_6B408300+66j
		cmp	ebp, 0FFFFFFFEh
		jnz	short loc_6B408378
		mov	dword ptr [ebx+0Ch], 1
		jmp	short loc_6B408378
; ---------------------------------------------------------------------------
		align 10h

loc_6B4083F0:				; CODE XREF: sub_6B408300+92j
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_3C], edi
		mov	[esp+3Ch+var_38], eax
		call	sub_6B408550
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_2C]
		test	al, al
		jz	short loc_6B408394
		mov	edx, [esp+3Ch+var_24]
		mov	[ebx+8], edx
		jmp	loc_6B408378
sub_6B408300	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B408420	proc near		; DATA XREF: .rdata:6B410988o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_8], edi
		mov	edx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], ebp
		mov	edi, [esp+3Ch+arg_C]
		mov	ebp, [esp+3Ch+arg_0]
		cmp	esi, ebx
		jz	short loc_6B408480

loc_6B40844B:				; CODE XREF: sub_6B408420+76j
		mov	eax, [ebp+8]
		mov	ebp, [esp+3Ch+var_4]
		mov	ecx, [eax]
		mov	[esp+3Ch+arg_10], esi
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_C], edi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_8], ebx
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_4], edx
		mov	[esp+3Ch+arg_0], eax
		mov	eax, [ecx+20h]
		add	esp, 3Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6B408480:				; CODE XREF: sub_6B408420+29j
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebp
		call	sub_6B408550
		mov	edx, [esp+3Ch+var_20]
		test	al, al
		jz	short loc_6B40844B
		mov	eax, 6
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
sub_6B408420	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. _ZNK6QGpgME22QByteArrayDataProvider11isSupportedEN5GpgME12DataProvider9OperationE

; =============== S U B	R O U T	I N E =======================================


		public _ZNK6QGpgME22QByteArrayDataProvider11isSupportedEN5GpgME12DataProvider9OperationE
_ZNK6QGpgME22QByteArrayDataProvider11isSupportedEN5GpgME12DataProvider9OperationE proc near
					; DATA XREF: .rdata:6B410A30o
		mov	eax, 1
		retn
_ZNK6QGpgME22QByteArrayDataProvider11isSupportedEN5GpgME12DataProvider9OperationE endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4084D0	proc near		; DATA XREF: .rdata:6B410A70o
		mov	eax, offset a__gnu_cxx__con ; "__gnu_cxx::__concurrence_lock_error"
		retn
sub_6B4084D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4084E0	proc near		; DATA XREF: .rdata:6B410A88o
		mov	eax, offset a__gnu_cxx__c_0 ; "__gnu_cxx::__concurrence_unlock_error"
		retn
sub_6B4084E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4084F0	proc near		; DATA XREF: .rdata:6B410AA0o
		mov	eax, offset aStdBad_excepti ; "std::bad_exception"
		retn
sub_6B4084F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408500	proc near		; DATA XREF: .rdata:6B410AB8o
		mov	eax, offset aStdException ; "std::exception"
		retn
sub_6B408500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408510	proc near		; DATA XREF: .rdata:6B410AD8o
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	sub_6B408550
sub_6B408510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408520	proc near		; DATA XREF: .rdata:6B410ADCo
		xor	eax, eax
		retn
sub_6B408520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408530	proc near		; DATA XREF: .rdata:6B410910o
					; .rdata:6B410970o ...
		xor	eax, eax
		retn
sub_6B408530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408540	proc near		; DATA XREF: .rdata:6B410914o
					; .rdata:6B410974o ...
		xor	eax, eax
		retn
sub_6B408540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408550	proc near		; CODE XREF: sub_6B408090+2Ap
					; sub_6B408110+17p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, 1
		mov	edx, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_4]
		cmp	ecx, edx
		jz	short loc_6B40857B
		mov	eax, [ecx+4]
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, [edx+4]
		mov	[esp+1Ch+var_1C], eax ;	char *
		call	strcmp
		test	eax, eax
		setz	al

loc_6B40857B:				; CODE XREF: sub_6B408550+12j
		add	esp, 1Ch
		retn
sub_6B408550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B408580	proc near		; DATA XREF: .rdata:6B410A9Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410AB0
		add	esp, 0Ch
		jmp	loc_6B4086A0
sub_6B408580	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4085A0	proc near		; DATA XREF: sub_6B408C8D+C8o
					; .rdata:off_6B410A98o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B410AB0
		retn
sub_6B4085A0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_6B410AB0
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B4085C0	proc near		; DATA XREF: .rdata:6B410AB4o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410AB0
		add	esp, 0Ch
		jmp	loc_6B4086A0
sub_6B4085C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4085E0	proc near		; DATA XREF: .rdata:off_6B410AB0o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B410AB0
		retn
sub_6B4085E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B4085F0	proc near		; CODE XREF: sub_6B407D70+11p
					; sub_6B407DA0+10j ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B410AB0
		retn
sub_6B4085F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B408600	proc near		; DATA XREF: .rdata:6B410ACCo

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_6B410AC8
		add	esp, 0Ch
		jmp	loc_6B4086A0
sub_6B408600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408620	proc near		; DATA XREF: .rdata:off_6B410AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B410AC8
		retn
sub_6B408620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408630	proc near		; CODE XREF: sub_6B407B60+11p
					; sub_6B407B90+10j ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B410AC8
		retn
sub_6B408630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B408640	proc near		; CODE XREF: sub_6B4093B0+58Ep

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, off_6B40EA2C
		mov	[esp+1Ch+var_1C], eax
		call	sub_6B407B10
sub_6B408640	endp

; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, off_6B40EA28
		mov	off_6B40EA28, edx
		retn
; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, off_6B40EA2C
		mov	off_6B40EA2C, edx
		retn
; ---------------------------------------------------------------------------
		sub	esp, 0Ch
		call	sub_6B409130
		mov	eax, [eax+4]
		test	eax, eax
		setnz	al
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B408690	proc near		; CODE XREF: sub_6B407B10+7p
					; .text:6B40884Cp ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		mov	eax, off_6B40EA28
		mov	[esp+1Ch+var_1C], eax
		call	sub_6B407A80
; ---------------------------------------------------------------------------

loc_6B4086A0:				; CODE XREF: _ZN6QGpgME22QByteArrayDataProviderD0Ev+39j
					; _ZN6QGpgME21QIODeviceDataProviderD0Ev+4Ej ...
		sub	esp, 0Ch
		mov	eax, [esp+28h+var_18]
		test	eax, eax
		jz	short loc_6B4086B3
		add	esp, 0Ch
		jmp	free
; ---------------------------------------------------------------------------

loc_6B4086B3:				; CODE XREF: sub_6B408690+19j
		add	esp, 0Ch
		retn
sub_6B408690	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		lea	eax, [ebp-8]
		push	edi
		sub	esp, 64h
		mov	[ebp-2Ch], eax
		lea	eax, [ebp-4Ch]
		mov	[esp], eax
		mov	dword ptr [ebp-34h], offset sub_6B4093B0
		mov	dword ptr [ebp-30h], offset dword_6B409A98
		mov	dword ptr [ebp-28h], offset loc_6B408812
		mov	[ebp-24h], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 50h
		call	malloc
		test	eax, eax
		mov	[ebp-50h], eax
		jz	short loc_6B408730

loc_6B408703:				; CODE XREF: .text:6B4087A1j
					; .text:6B4087B8j
		call	sub_6B409130
		mov	edi, [ebp-50h]
		mov	ecx, 14h
		add	dword ptr [eax+4], 1
		xor	eax, eax
		rep stosd
		lea	eax, [ebp-4Ch]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp-50h]
		add	esp, 64h
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B408730:				; CODE XREF: .text:6B408701j
		mov	ecx, dword_6B40A00C
		mov	dword ptr [ebp-0Ch], offset dword_6B40EA30
		test	ecx, ecx
		jz	short loc_6B40875C
		mov	dword ptr [esp], offset	dword_6B40EA30
		mov	dword ptr [ebp-48h], 3
		call	sub_6B407110
		test	eax, eax
		jnz	loc_6B4087E8

loc_6B40875C:				; CODE XREF: .text:6B40873Fj
		mov	edx, dword_6B40A01C
		xor	ecx, ecx
		mov	eax, edx
		jmp	short loc_6B408776
; ---------------------------------------------------------------------------

loc_6B408768:				; CODE XREF: .text:6B408778j
		add	ecx, 1
		cmp	ecx, 20h
		jz	loc_6B408845
		shr	eax, 1

loc_6B408776:				; CODE XREF: .text:6B408766j
		test	al, 1
		jnz	short loc_6B408768
		mov	eax, 1
		shl	eax, cl
		or	eax, edx
		mov	edx, dword_6B40A00C
		mov	dword_6B40A01C,	eax
		lea	eax, [ecx+ecx*4]
		shl	eax, 4
		add	eax, offset dword_6B40E020
		test	edx, edx
		mov	[ebp-50h], eax
		mov	eax, [ebp-0Ch]
		jz	loc_6B408703
		mov	[esp], eax
		mov	dword ptr [ebp-48h], 1
		call	sub_6B406FF0
		test	eax, eax
		jz	loc_6B408703
		mov	dword ptr [esp], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A80
		mov	dword ptr [esp+8], offset sub_6B407DF0
		mov	dword ptr [esp+4], offset off_6B410668
		mov	[esp], eax
		call	sub_6B409350
; ---------------------------------------------------------------------------

loc_6B4087E8:				; CODE XREF: .text:6B408756j
		mov	dword ptr [esp], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A68
		mov	dword ptr [esp+8], offset sub_6B407DA0
		mov	dword ptr [esp+4], offset off_6B41065C
		mov	[esp], eax
		call	sub_6B409350
; ---------------------------------------------------------------------------

loc_6B408812:				; DATA XREF: .text:6B4086E1o
		add	ebp, 8
		mov	edx, [ebp-44h]
		mov	eax, [ebp-48h]
		mov	[ebp-54h], edx
		mov	edx, [ebp-40h]
		cmp	eax, 1
		mov	[ebp-58h], edx
		jz	short loc_6B408851
		cmp	eax, 2
		jz	short loc_6B408863
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6B408869

loc_6B408833:				; CODE XREF: .text:6B408867j
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B408845:				; CODE XREF: .text:6B40876Ej
		mov	dword ptr [ebp-48h], 2
		call	sub_6B408690
; ---------------------------------------------------------------------------

loc_6B408851:				; CODE XREF: .text:6B408827j
		lea	eax, [ebp-0Ch]
		mov	[esp], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	sub_6B407CB0

loc_6B408863:				; CODE XREF: .text:6B40882Cj
		cmp	dword ptr [ebp-58h], 0FFFFFFFFh
		jnz	short loc_6B408833

loc_6B408869:				; CODE XREF: .text:6B408831j
		mov	edx, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp], edx
		call	sub_6B408C20
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B408880	proc near		; CODE XREF: sub_6B407CB0+65p
					; .text:6B4087C5p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	edi
		sub	esp, 74h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_6B4093B0
		mov	[ebp+var_30], offset dword_6B409A84
		mov	[ebp+var_28], offset sub_6B408A51
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		add	eax, 60h
		mov	[ebp+var_54], eax
		mov	[esp], eax	; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	short loc_6B408930

loc_6B4088C8:				; CODE XREF: sub_6B408880+135j
					; sub_6B408880+14Cj
		call	sub_6B409130
		mov	edi, [ebp+var_50]
		mov	edx, 60h
		add	dword ptr [eax+4], 1
		test	edi, 1
		jnz	loc_6B408A00
		test	edi, 2
		jnz	loc_6B408A17

loc_6B4088F1:				; CODE XREF: sub_6B408880+191j
					; sub_6B408880+1A2j
		mov	ecx, edx
		xor	eax, eax
		shr	ecx, 2
		test	dl, 2
		rep stosd
		jz	short loc_6B408907
		mov	word ptr [edi],	0
		add	edi, 2

loc_6B408907:				; CODE XREF: sub_6B408880+7Dj
		and	edx, 1
		jz	short loc_6B40890F
		mov	byte ptr [edi],	0

loc_6B40890F:				; CODE XREF: sub_6B408880+8Aj
		mov	eax, [ebp+var_50]
		add	eax, 60h
		mov	[ebp+var_58], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_58]
		add	esp, 74h
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B408930:				; CODE XREF: sub_6B408880+46j
		mov	eax, dword_6B40A00C
		mov	[ebp+var_C], offset dword_6B40EA30
		test	eax, eax
		jz	short loc_6B40895B
		mov	dword ptr [esp], offset	dword_6B40EA30
		mov	[ebp+var_48], 3
		call	sub_6B407110
		test	eax, eax
		jnz	loc_6B408A27

loc_6B40895B:				; CODE XREF: sub_6B408880+BEj
		mov	eax, dword_6B40A018
		xor	ecx, ecx
		cmp	[ebp+var_54], 200h
		mov	edx, eax
		jbe	short loc_6B40898A

loc_6B40896D:				; CODE XREF: sub_6B408880+106j
		mov	[ebp+var_48], 2
		call	sub_6B408690
; ---------------------------------------------------------------------------
		align 10h

loc_6B408980:				; CODE XREF: sub_6B408880+10Dj
		add	ecx, 1
		cmp	ecx, 20h
		jz	short loc_6B40896D
		shr	edx, 1

loc_6B40898A:				; CODE XREF: sub_6B408880+EBj
		test	dl, 1
		jnz	short loc_6B408980
		mov	edi, dword_6B40A00C
		mov	edx, 1
		shl	edx, cl
		shl	ecx, 9
		or	edx, eax
		mov	eax, [ebp+var_C]
		add	ecx, offset dword_6B40A020
		test	edi, edi
		mov	dword_6B40A018,	edx
		mov	[ebp+var_50], ecx
		jz	loc_6B4088C8
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	sub_6B406FF0
		test	eax, eax
		jz	loc_6B4088C8
		mov	dword ptr [esp], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A80
		mov	dword ptr [esp+8], offset sub_6B407DF0
		mov	dword ptr [esp+4], offset off_6B410668
		mov	[esp], eax
		call	sub_6B409350
; ---------------------------------------------------------------------------
		align 10h

loc_6B408A00:				; CODE XREF: sub_6B408880+5Fj
		mov	byte ptr [edi],	0
		mov	edi, [ebp+var_50]
		mov	dl, 5Fh
		add	edi, 1
		test	edi, 2
		jz	loc_6B4088F1

loc_6B408A17:				; CODE XREF: sub_6B408880+6Bj
		mov	word ptr [edi],	0
		sub	edx, 2
		add	edi, 2
		jmp	loc_6B4088F1
; ---------------------------------------------------------------------------

loc_6B408A27:				; CODE XREF: sub_6B408880+D5j
		mov	dword ptr [esp], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A68
		mov	dword ptr [esp+8], offset sub_6B407DA0
		mov	dword ptr [esp+4], offset off_6B41065C
		mov	[esp], eax
		call	sub_6B409350
sub_6B408880	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B408A51	proc near		; DATA XREF: sub_6B408880+21o
		add	ebp, 8
		mov	edx, [ebp-44h]
		mov	eax, [ebp-48h]
		mov	[ebp-5Ch], edx
		mov	edx, [ebp-40h]
		cmp	eax, 1
		mov	[ebp-60h], edx
		jz	short loc_6B408A84
		cmp	eax, 2
		jz	short loc_6B408A96
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6B408AAE
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B408A84:				; CODE XREF: sub_6B408A51+15j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	sub_6B407CB0

loc_6B408A96:				; CODE XREF: sub_6B408A51+1Aj
		cmp	dword ptr [ebp-60h], 0FFFFFFFFh
		jz	short loc_6B408AC0
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B408AAE:				; CODE XREF: sub_6B408A51+1Fj
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	sub_6B408C20
; ---------------------------------------------------------------------------

loc_6B408AC0:				; CODE XREF: sub_6B408A51+49j
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	sub_6B408C20
sub_6B408A51	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B408AE0	proc near		; CODE XREF: sub_6B407ABE+33p
					; sub_6B407FBD+3Bp ...

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		lea	eax, [ebp+var_8]
		sub	esp, 50h
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_6B4093B0
		mov	[ebp+var_20], offset dword_6B409A0C
		mov	[ebp+var_18], offset sub_6B408B97
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		call	sub_6B409130
		mov	edx, [ebp+arg_0]
		sub	edx, 30h
		mov	ecx, [edx+30h]
		mov	ebx, [edx+34h]
		mov	esi, [eax]
		add	ecx, 0BCD4D500h
		adc	ebx, 0B8B1AABCh
		cmp	ebx, 0
		ja	short loc_6B408B3A
		cmp	ecx, 1
		jbe	short loc_6B408B60

loc_6B408B3A:				; CODE XREF: sub_6B408AE0+53j
		test	esi, esi
		jnz	short loc_6B408B8B
		mov	[eax], edx
		mov	[ebp+var_40], 0

loc_6B408B47:				; CODE XREF: sub_6B408AE0+A0j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		add	esp, 50h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B408B60:				; CODE XREF: sub_6B408AE0+58j
		mov	ecx, [edx+14h]
		test	ecx, ecx
		lea	ebx, [ecx+1]
		js	short loc_6B408B82

loc_6B408B6A:				; CODE XREF: sub_6B408AE0+A9j
		mov	[edx+14h], ebx
		sub	dword ptr [eax+4], 1
		cmp	esi, edx
		jz	short loc_6B408B7A
		mov	[edx+10h], esi
		mov	[eax], edx

loc_6B408B7A:				; CODE XREF: sub_6B408AE0+93j
		mov	edx, [edx+28h]
		mov	[ebp+var_40], edx
		jmp	short loc_6B408B47
; ---------------------------------------------------------------------------

loc_6B408B82:				; CODE XREF: sub_6B408AE0+88j
		mov	ebx, 1
		sub	ebx, ecx
		jmp	short loc_6B408B6A
; ---------------------------------------------------------------------------

loc_6B408B8B:				; CODE XREF: sub_6B408AE0+5Cj
		mov	[ebp+var_38], 1
		call	sub_6B408690
sub_6B408AE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B408B97	proc near		; DATA XREF: sub_6B408AE0+22o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6B408BB2
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B408BB2:				; CODE XREF: sub_6B408B97+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6B408C20
sub_6B408B97	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B408BD0	proc near		; CODE XREF: sub_6B4093B0+236p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6B408C10
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6B408AE0
		mov	eax, [ebx]
		mov	edx, [ebx+4]
		add	eax, 0BCD4D500h
		adc	edx, 0B8B1AABCh
		cmp	edx, 0
		ja	short loc_6B408C10
		cmp	eax, 1
		ja	short loc_6B408C10
		mov	eax, [ebx-24h]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6B407A80
; ---------------------------------------------------------------------------
		align 10h

loc_6B408C10:				; CODE XREF: sub_6B408BD0+Aj
					; sub_6B408BD0+27j ...
		call	sub_6B408690
sub_6B408BD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B408C20	proc near		; CODE XREF: sub_6B407D38+25p
					; .text:6B408876p ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_18		= dword	ptr -18h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_6B4093B0
		mov	[ebp+var_40], offset dword_6B4099EC
		mov	[ebp+var_38], offset sub_6B408C8D
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	sub_6B408AE0
		mov	eax, [ebp+arg_0]
		sub	eax, 30h
		mov	edx, [eax+18h]
		mov	ecx, [eax+20h]
		mov	[ebp+var_60], edx
		mov	edx, [eax+24h]
		mov	[ebp+var_68], ecx
		mov	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	[ebp+var_58], 2
		mov	[ebp+var_18], edx
		mov	[ebp+var_64], ecx
		mov	[esp], eax
		call	sub_6B407B10
sub_6B408C20	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B408C8D	proc near		; DATA XREF: sub_6B408C20+23o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		add	ebp, 8
		mov	eax, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-70h], eax
		jz	short loc_6B408CC6
		mov	dword ptr [ebp-58h], 0
		call	sub_6B408DB0
		mov	dword ptr [ebp-58h], 0
		call	sub_6B408DB0
		mov	edx, [ebp-70h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B408CC6:				; CODE XREF: sub_6B408C8D+Dj
		mov	eax, [ebp-70h]
		mov	[esp+0], eax
		call	sub_6B408AE0
		call	sub_6B409210
		mov	eax, [eax]
		test	byte ptr [eax+30h], 1
		lea	edx, [eax+30h]
		jz	short loc_6B408D1B
		mov	edx, [edx-30h]
		mov	[ebp-6Ch], edx

loc_6B408CE7:				; CODE XREF: sub_6B408C8D+94j
		mov	edx, [ebp-68h]
		lea	ecx, [ebp-20h]
		xor	eax, eax
		mov	dword ptr [ebp-58h], 1
		call	sub_6B407730
		mov	ecx, [ebp-6Ch]
		lea	eax, [ebp-20h]
		mov	edx, [ecx-50h]
		mov	ecx, [ebp-60h]
		mov	[esp+0], ecx
		mov	ecx, [ebp-6Ch]
		call	sub_6B4077F0
		test	al, al
		jz	short loc_6B408D23
		call	sub_6B4092F0
; ---------------------------------------------------------------------------

loc_6B408D1B:				; CODE XREF: sub_6B408C8D+52j
		add	eax, 50h
		mov	[ebp-6Ch], eax
		jmp	short loc_6B408CE7
; ---------------------------------------------------------------------------

loc_6B408D23:				; CODE XREF: sub_6B408C8D+87j
		mov	edx, [ebp-60h]
		lea	eax, [ebp-20h]
		xor	ecx, ecx
		mov	dword ptr [ebp-58h], 1
		mov	[esp+0], edx
		mov	edx, offset off_6B410674
		call	sub_6B4077F0
		test	al, al
		jz	short loc_6B408D6D
		mov	dword ptr [esp+0], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A98
		mov	[esp+arg_4], offset sub_6B4085A0
		mov	[esp+arg_0], offset off_6B410674
		mov	[esp+0], eax
		call	sub_6B409350
; ---------------------------------------------------------------------------

loc_6B408D6D:				; CODE XREF: sub_6B408C8D+B4j
		mov	ecx, [ebp-64h]
		mov	dword ptr [ebp-58h], 1
		mov	[esp+0], ecx
		call	sub_6B407A80
sub_6B408C8D	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408D80	proc near		; CODE XREF: sub_6B407E10+7Ep
		sub	esp, 0Ch
		call	sub_6B409130
		mov	edx, [eax]
		xor	eax, eax
		test	edx, edx
		jz	short loc_6B408D98
		test	byte ptr [edx+30h], 1
		jnz	short loc_6B408DA0

loc_6B408D96:				; CODE XREF: sub_6B408D80+25j
		mov	eax, [edx]

loc_6B408D98:				; CODE XREF: sub_6B408D80+Ej
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B408DA0:				; CODE XREF: sub_6B408D80+14j
		mov	edx, [edx]
		sub	edx, 50h
		jmp	short loc_6B408D96
sub_6B408D80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B408DB0	proc near		; CODE XREF: sub_6B407ABE+16p
					; sub_6B407FBD+19p ...

var_5C		= dword	ptr -5Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		push	ebx
		sub	esp, 18h
		call	sub_6B409210
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6B408DE7
		mov	ecx, [edx+30h]
		mov	ebx, [edx+34h]
		add	ecx, 0BCD4D500h
		adc	ebx, 0B8B1AABCh
		cmp	ebx, 0
		jbe	short loc_6B408DF0

loc_6B408DD6:				; CODE XREF: sub_6B408DB0+43j
		mov	dword ptr [eax], 0
		add	edx, 30h
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_DeleteException

loc_6B408DE7:				; CODE XREF: sub_6B408DB0+Dj
					; sub_6B408DB0+80j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B408DF0:				; CODE XREF: sub_6B408DB0+24j
		cmp	ecx, 1
		ja	short loc_6B408DD6
		mov	ecx, [edx+14h]
		test	ecx, ecx
		js	short loc_6B408E11
		sub	ecx, 1
		nop
		jz	short loc_6B408E20
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_6B408E32

loc_6B408E07:				; CODE XREF: sub_6B408DB0+64j
					; sub_6B408DB0+6Bj
		mov	[edx+14h], ecx
		add	esp, 18h
		pop	ebx
		xchg	ax, ax
		retn
; ---------------------------------------------------------------------------

loc_6B408E11:				; CODE XREF: sub_6B408DB0+4Aj
		add	ecx, 1
		jnz	short loc_6B408E07
		mov	ebx, [edx+10h]
		mov	[eax], ebx
		jmp	short loc_6B408E07
; ---------------------------------------------------------------------------
		align 10h

loc_6B408E20:				; CODE XREF: sub_6B408DB0+50j
		mov	ecx, [edx+10h]
		add	edx, 30h
		mov	[eax], ecx
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_DeleteException
		jmp	short loc_6B408DE7
; ---------------------------------------------------------------------------

loc_6B408E32:				; CODE XREF: sub_6B408DB0+55j
		call	sub_6B408690
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	dword ptr [ebp-24h], offset sub_6B4093B0
		mov	dword ptr [ebp-20h], offset dword_6B409A64
		mov	dword ptr [ebp-18h], offset loc_6B408F79
		mov	[ebp-14h], esp
		mov	[esp+5Ch+var_5C], eax
		call	_Unwind_SjLj_Register
		cmp	dword ptr [ebp+8], offset dword_6B40E020
		jb	short loc_6B408E81
		cmp	dword ptr [ebp+8], offset dword_6B40EA20
		jb	short loc_6B408EA0

loc_6B408E81:				; CODE XREF: sub_6B408DB0+C6j
		mov	eax, [ebp+8]
		mov	[esp+20h+var_20], eax ;	void *
		call	free

loc_6B408E8C:				; CODE XREF: sub_6B408DB0+13Ej
					; sub_6B408DB0+155j
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B408EA0:				; CODE XREF: sub_6B408DB0+CFj
		mov	eax, [ebp+8]
		mov	ecx, 0CCCCCCCDh
		sub	eax, offset dword_6B40E020
		mul	ecx
		mov	eax, dword_6B40A00C
		shr	edx, 6
		test	eax, eax
		mov	[ebp-40h], edx
		jz	short loc_6B408F31
		mov	[esp+20h+var_20], offset dword_6B40EA30
		mov	dword ptr [ebp-38h], 2
		call	sub_6B407110
		test	eax, eax
		jnz	short loc_6B408F4F
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		mov	ecx, dword_6B40A00C
		and	dword_6B40A01C,	eax
		test	ecx, ecx
		jz	short loc_6B408E8C
		mov	[esp+20h+var_20], offset dword_6B40EA30
		mov	dword ptr [ebp-38h], 1
		call	sub_6B406FF0
		test	eax, eax
		jz	short loc_6B408E8C
		mov	[esp+20h+var_20], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A80
		mov	[esp+20h+var_18], offset sub_6B407DF0
		mov	[esp+20h+var_1C], offset off_6B410668
		mov	[esp+20h+var_20], eax
		call	sub_6B409350
; ---------------------------------------------------------------------------

loc_6B408F31:				; CODE XREF: sub_6B408DB0+10Cj
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		and	dword_6B40A01C,	eax
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B408F4F:				; CODE XREF: sub_6B408DB0+123j
		mov	[esp+20h+var_20], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A68
		mov	[esp+20h+var_18], offset sub_6B407DA0
		mov	[esp+20h+var_1C], offset off_6B41065C
		mov	[esp+20h+var_20], eax
		call	sub_6B409350
; ---------------------------------------------------------------------------

loc_6B408F79:				; DATA XREF: sub_6B408DB0+ADo
		add	ebp, 8
		mov	edx, [ebp-30h]
		mov	eax, [ebp-34h]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6B408F96
		mov	[esp+1Ch+var_1C], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B408F96:				; CODE XREF: sub_6B408DB0+1D5j
		mov	[esp+1Ch+var_1C], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6B408C20
; ---------------------------------------------------------------------------
		align 10h

loc_6B408FB0:				; CODE XREF: sub_6B4078F0+2Cj
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	dword ptr [ebp-24h], offset sub_6B4093B0
		mov	dword ptr [ebp-20h], offset dword_6B409A74
		mov	dword ptr [ebp-18h], offset sub_6B4090E8
		mov	[ebp-14h], esp
		mov	[esp+5Ch+var_5C], eax
		call	_Unwind_SjLj_Register
		cmp	dword ptr [ebp+8], offset dword_6B40A020
		jb	short loc_6B408FF1
		cmp	dword ptr [ebp+8], offset dword_6B40E020
		jb	short loc_6B409010

loc_6B408FF1:				; CODE XREF: sub_6B408DB0+236j
		mov	eax, [ebp+8]
		sub	eax, 60h
		mov	[esp+20h+var_20], eax ;	void *
		call	free

loc_6B408FFF:				; CODE XREF: sub_6B408DB0+2A9j
					; sub_6B408DB0+2C0j
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B409010:				; CODE XREF: sub_6B408DB0+23Fj
		mov	ecx, [ebp+8]
		sub	ecx, offset dword_6B40A020
		shr	ecx, 9
		mov	[ebp-40h], ecx
		mov	ecx, dword_6B40A00C
		test	ecx, ecx
		jz	short loc_6B4090A0
		mov	[esp+20h+var_20], offset dword_6B40EA30
		mov	dword ptr [ebp-38h], 2
		call	sub_6B407110
		test	eax, eax
		jnz	short loc_6B4090BE
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		mov	edx, dword_6B40A00C
		rol	eax, cl
		and	dword_6B40A018,	eax
		test	edx, edx
		jz	short loc_6B408FFF
		mov	[esp+20h+var_20], offset dword_6B40EA30
		mov	dword ptr [ebp-38h], 1
		call	sub_6B406FF0
		test	eax, eax
		jz	short loc_6B408FFF
		mov	[esp+20h+var_20], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A80
		mov	[esp+20h+var_18], offset sub_6B407DF0
		mov	[esp+20h+var_1C], offset off_6B410668
		mov	[esp+20h+var_20], eax
		call	sub_6B409350
; ---------------------------------------------------------------------------
		align 10h

loc_6B4090A0:				; CODE XREF: sub_6B408DB0+277j
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		and	dword_6B40A018,	eax
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B4090BE:				; CODE XREF: sub_6B408DB0+28Ej
		mov	[esp+20h+var_20], 4
		call	sub_6B408880
		mov	dword ptr [eax], offset	off_6B410A68
		mov	[esp+20h+var_18], offset sub_6B407DA0
		mov	[esp+20h+var_1C], offset off_6B41065C
		mov	[esp+20h+var_20], eax
		call	sub_6B409350
sub_6B408DB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B4090E8	proc near		; DATA XREF: sub_6B408DB0+21Do
		add	ebp, 8
		mov	edx, [ebp-30h]
		mov	eax, [ebp-34h]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6B409105
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B409105:				; CODE XREF: sub_6B4090E8+Cj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6B408C20
sub_6B4090E8	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	eax, [eax-8]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B409130	proc near		; CODE XREF: .text:6B408673p
					; .text:loc_6B408703p ...

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6B4093B0
		mov	[ebp+var_20], offset dword_6B409A44
		mov	[ebp+var_18], offset sub_6B4091E5
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6B40EA24, 0
		mov	[ebp+var_44], offset dword_6B40A010
		jnz	short loc_6B409180

loc_6B40916F:				; CODE XREF: sub_6B409130+69j
					; sub_6B409130+B3j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_44]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B409180:				; CODE XREF: sub_6B409130+3Dj
		mov	eax, dword_6B40EA20
		mov	[ebp+var_38], 1
		mov	[esp], eax	; DWORD
		call	sub_6B407240
		test	eax, eax
		mov	[ebp+var_44], eax
		jnz	short loc_6B40916F
		mov	dword ptr [esp], 8 ; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_6B4091C3
		mov	[esp+4], eax	; LPVOID
		mov	eax, dword_6B40EA20
		mov	[esp], eax	; DWORD
		call	sub_6B407210
		test	eax, eax
		jz	short loc_6B4091D0

loc_6B4091C3:				; CODE XREF: sub_6B409130+7Cj
		mov	[ebp+var_38], 1
		call	sub_6B408690
; ---------------------------------------------------------------------------
		align 10h

loc_6B4091D0:				; CODE XREF: sub_6B409130+91j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_44], eax
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		jmp	short loc_6B40916F
sub_6B409130	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B4091E5	proc near		; DATA XREF: sub_6B409130+1Do
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6B409200
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B409200:				; CODE XREF: sub_6B4091E5+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6B408C20
sub_6B4091E5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B409210	proc near		; CODE XREF: sub_6B408C8D+44p
					; sub_6B408DB0+4p

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_6B4093B0
		mov	[ebp+var_20], offset dword_6B409A34
		mov	[ebp+var_18], offset sub_6B409287
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_6B40EA24, 0
		mov	[ebp+var_40], offset dword_6B40A010
		jnz	short loc_6B409260
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B409260:				; CODE XREF: sub_6B409210+3Dj
		mov	eax, dword_6B40EA20
		mov	[esp], eax	; DWORD
		mov	[ebp+var_38], 1
		call	sub_6B407240
		mov	[ebp+var_40], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_6B409210	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B409287	proc near		; DATA XREF: sub_6B409210+1Do
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_6B4092A2
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B4092A2:				; CODE XREF: sub_6B409287+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_6B408C20
sub_6B409287	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B4092C0	proc near		; DATA XREF: .rdata:6B4108E8o
					; .rdata:6B410950o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_14], 1Bh ;	unsigned int
		mov	[esp+1Ch+var_18], offset aPureVirtualMet ; "pure virtual method	called\n"
		mov	[esp+1Ch+var_1C], 2 ; int
		call	_write
		call	sub_6B408690
sub_6B4092C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B4092F0	proc near		; CODE XREF: sub_6B407E10+140p
					; sub_6B408C8D+89p

var_1C		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		call	sub_6B409130
		mov	ebx, [eax]
		add	dword ptr [eax+4], 1
		test	ebx, ebx
		jz	short loc_6B409333
		mov	edx, [ebx+30h]
		mov	ecx, [ebx+34h]
		add	edx, 0BCD4D500h
		adc	ecx, 0B8B1AABCh
		cmp	ecx, 0
		jbe	short loc_6B409338

loc_6B40931A:				; CODE XREF: sub_6B4092F0+4Bj
		mov	dword ptr [eax], 0

loc_6B409320:				; CODE XREF: sub_6B4092F0+50j
		add	ebx, 30h
		mov	[esp+1Ch+var_1C], ebx
		call	_Unwind_SjLj_Resume_or_Rethrow
; ---------------------------------------------------------------------------
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6B408AE0

loc_6B409333:				; CODE XREF: sub_6B4092F0+11j
		call	sub_6B408690
; ---------------------------------------------------------------------------

loc_6B409338:				; CODE XREF: sub_6B4092F0+28j
		cmp	edx, 1
		ja	short loc_6B40931A
		neg	dword ptr [ebx+14h]
		jmp	short loc_6B409320
sub_6B4092F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B409350	proc near		; CODE XREF: sub_6B407CB0+83p
					; .text:6B4087E3p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		lea	eax, [ebx-60h]
		mov	[eax+10h], edx
		mov	edx, [esp+1Ch+arg_8]
		mov	dword ptr [ebx-60h], 1
		sub	ebx, 20h
		mov	dword ptr [eax+40h], 432B2B00h
		mov	dword ptr [eax+44h], 474E5543h
		mov	[eax+14h], edx
		mov	edx, off_6B40EA2C
		mov	dword ptr [eax+48h], offset sub_6B4078F0
		mov	[eax+18h], edx
		mov	edx, off_6B40EA28
		mov	[eax+1Ch], edx
		mov	[esp+1Ch+var_1C], ebx
		call	_Unwind_SjLj_RaiseException
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6B408AE0
		call	sub_6B408690
sub_6B409350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B4093B0	proc near		; DATA XREF: sub_6B407A80+Fo
					; sub_6B407CB0+12o ...

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_AD		= byte ptr -0ADh
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_99		= byte ptr -99h
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= byte ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_54], offset sub_6B4093B0
		mov	[ebp+var_50], offset dword_6B4099FC
		mov	[ebp+var_98], eax
		lea	eax, [ebp+var_6C]
		mov	[ebp+var_94], edx
		lea	edx, [ebp+var_18]
		mov	[ebp+var_4C], edx
		mov	[ebp+var_48], offset sub_6B409943
		mov	[ebp+var_44], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	[ebp+arg_0], 1
		mov	[ebp+var_78], 3
		jz	short loc_6B409420

loc_6B409404:				; CODE XREF: sub_6B4093B0+1C4j
					; sub_6B4093B0+257j ...
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_78]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6B409420:				; CODE XREF: sub_6B4093B0+52j
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+var_94]
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		sub	eax, 30h
		mov	[ebp+var_A4], eax
		mov	eax, [ebp+var_98]
		mov	[ebp+var_99], 1
		add	eax, 0BCD4D500h
		adc	edx, 0B8B1AABCh
		cmp	edx, 0
		jbe	loc_6B409580
		cmp	[ebp+arg_4], 6
		jz	loc_6B40959A

loc_6B40946B:				; CODE XREF: sub_6B4093B0+1E4j
					; sub_6B4093B0+1F1j
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_GetLanguageSpecificData
		test	eax, eax
		mov	[ebp+var_A0], eax
		jz	loc_6B4096CE
		mov	edx, eax
		mov	eax, [ebp+arg_14]
		lea	ecx, [ebp+var_38]
		call	sub_6B407730
		mov	edx, [ebp+arg_14]
		mov	[ebp+var_B4], eax
		movzx	eax, [ebp+var_24]
		call	sub_6B407870
		mov	edx, [ebp+arg_14]
		mov	[esp], edx
		mov	[ebp+var_30], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		call	_Unwind_GetIPInfo
		cmp	[ebp+var_20], 1
		sbb	eax, 0
		cmp	eax, 0
		mov	[ebp+var_74], eax
		jl	loc_6B4096CE
		jnz	loc_6B409642
		mov	[ebp+var_7C], 0
		mov	eax, 1
		mov	[ebp+var_AC], 0
		mov	[ebp+var_80], 0

loc_6B4094F5:				; CODE XREF: sub_6B4093B0+44Dj
					; sub_6B4093B0+537j
		test	byte ptr [ebp+arg_4], 1
		jnz	loc_6B4095F0

loc_6B4094FF:				; CODE XREF: sub_6B4093B0+32Fj
		test	byte ptr [ebp+arg_4], 8
		jz	loc_6B409855

loc_6B409509:				; CODE XREF: sub_6B4093B0+4ACj
		cmp	eax, 1
		jz	loc_6B40992B
		mov	edx, [ebp+var_7C]
		test	edx, edx
		js	loc_6B409937

loc_6B40951D:				; CODE XREF: sub_6B4093B0+4C0j
					; sub_6B4093B0+4F3j
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+arg_14]
		mov	dword ptr [esp+4], 0
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp], edx
		call	_Unwind_SetGR
		mov	eax, [ebp+var_7C]
		mov	edx, [ebp+arg_14]
		mov	dword ptr [esp+4], 1
		mov	[esp+8], eax
		mov	[esp], edx
		call	_Unwind_SetGR
		mov	eax, [ebp+var_AC]
		mov	edx, [ebp+arg_14]
		mov	[esp+4], eax
		mov	[esp], edx
		call	_Unwind_SetIP
		mov	[ebp+var_78], 7
		jmp	loc_6B409404
; ---------------------------------------------------------------------------
		align 10h

loc_6B409580:				; CODE XREF: sub_6B4093B0+ABj
		cmp	eax, 2
		sbb	eax, eax
		not	eax
		and	eax, 1
		cmp	[ebp+arg_4], 6
		mov	[ebp+var_99], al
		jnz	loc_6B40946B

loc_6B40959A:				; CODE XREF: sub_6B4093B0+B5j
		cmp	[ebp+var_99], 0
		jnz	loc_6B40946B
		mov	edx, [ebp+var_A4]
		mov	eax, [ebp+var_A4]
		mov	edx, [edx+18h]
		mov	eax, [eax+20h]
		mov	[ebp+var_7C], edx
		mov	edx, [ebp+var_A4]
		mov	[ebp+var_A0], eax
		mov	edx, [edx+24h]
		test	edx, edx
		mov	[ebp+var_AC], edx
		jnz	loc_6B4096DA

loc_6B4095D9:				; CODE XREF: sub_6B4093B0+4B5j
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_6B408BD0
; ---------------------------------------------------------------------------
		align 10h

loc_6B4095F0:				; CODE XREF: sub_6B4093B0+149j
		cmp	eax, 2
		jz	loc_6B4096CE
		cmp	[ebp+var_99], 0
		mov	[ebp+var_78], 6
		jnz	loc_6B409404
		mov	eax, [ebp+var_A4]
		mov	edx, [ebp+var_7C]
		mov	[eax+18h], edx
		mov	edx, [ebp+var_80]
		mov	[eax+1Ch], edx
		mov	edx, [ebp+var_A0]
		mov	[eax+20h], edx
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_A4]
		mov	[edx+28h], eax
		mov	eax, [ebp+var_AC]
		mov	[edx+24h], eax
		jmp	loc_6B409404
; ---------------------------------------------------------------------------

loc_6B409642:				; CODE XREF: sub_6B4093B0+122j
		mov	eax, [ebp+var_B4]
		xor	edi, edi
		lea	esi, [esi+0]

loc_6B409650:				; CODE XREF: sub_6B4093B0+2EAj
		mov	[ebp+var_84], edi
		mov	ecx, edi
		mov	esi, edi
		lea	esi, [esi+0]

loc_6B409660:				; CODE XREF: sub_6B4093B0+2C4j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	edx, ebx
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6B409660
		mov	[ebp+var_84], esi
		mov	ecx, edi
		mov	esi, edi

loc_6B409680:				; CODE XREF: sub_6B4093B0+2E4j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	edx, ebx
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_6B409680
		sub	[ebp+var_74], 1
		jnz	short loc_6B409650
		mov	ebx, esi
		mov	esi, [ebp+var_84]
		mov	[ebp+var_80], 0
		add	esi, 1
		test	ebx, ebx
		mov	[ebp+var_AC], esi
		jz	short loc_6B4096C4
		sub	ebx, 1
		mov	eax, [ebp+var_28]
		mov	[ebp+var_80], ebx
		add	[ebp+var_80], eax

loc_6B4096C4:				; CODE XREF: sub_6B4093B0+306j
		mov	edx, [ebp+var_AC]
		test	edx, edx
		jnz	short loc_6B4096E4

loc_6B4096CE:				; CODE XREF: sub_6B4093B0+D5j
					; sub_6B4093B0+11Cj ...
		mov	[ebp+var_78], 8
		jmp	loc_6B409404
; ---------------------------------------------------------------------------

loc_6B4096DA:				; CODE XREF: sub_6B4093B0+223j
		mov	eax, 3
		jmp	loc_6B4094FF
; ---------------------------------------------------------------------------

loc_6B4096E4:				; CODE XREF: sub_6B4093B0+31Cj
		mov	eax, [ebp+var_80]
		test	eax, eax
		jz	loc_6B4098DB
		mov	edx, [ebp+arg_4]
		and	edx, 8
		mov	[ebp+var_B8], edx
		jz	loc_6B4098F0
		mov	[ebp+var_A8], offset off_6B410614

loc_6B40970B:				; CODE XREF: sub_6B4093B0+551j
					; sub_6B4093B0+56Ej
		mov	[ebp+var_AD], 0

loc_6B409712:				; CODE XREF: sub_6B4093B0+410j
		mov	eax, [ebp+var_80]
		xor	edi, edi
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_6B409720:				; CODE XREF: sub_6B4093B0+387j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	esi, bl
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		test	bl, bl
		js	short loc_6B409720
		cmp	ecx, 1Fh
		mov	[ebp+var_8C], eax
		ja	short loc_6B409752
		and	esi, 40h
		jz	short loc_6B409752
		mov	edx, 0FFFFFFFFh
		shl	edx, cl
		or	edi, edx

loc_6B409752:				; CODE XREF: sub_6B4093B0+392j
					; sub_6B4093B0+397j
		mov	[ebp+var_7C], edi
		xor	ecx, ecx
		mov	[ebp+var_88], edi
		xor	edi, edi
		mov	[ebp+var_70], 0

loc_6B409766:				; CODE XREF: sub_6B4093B0+3CDj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	esi, bl
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		test	bl, bl
		js	short loc_6B409766
		cmp	ecx, 1Fh
		mov	[ebp+var_70], edi
		mov	edi, [ebp+var_88]
		ja	short loc_6B40979C
		and	esi, 40h
		jz	short loc_6B40979C
		mov	eax, 0FFFFFFFFh
		shl	eax, cl
		or	[ebp+var_70], eax

loc_6B40979C:				; CODE XREF: sub_6B4093B0+3DBj
					; sub_6B4093B0+3E0j
		cmp	[ebp+var_7C], 0
		jnz	short loc_6B4097C5
		mov	[ebp+var_AD], 1

loc_6B4097A9:				; CODE XREF: sub_6B4093B0+434j
					; sub_6B4093B0+446j ...
		mov	ecx, [ebp+var_70]
		test	ecx, ecx
		jz	loc_6B4098CE
		mov	edx, [ebp+var_8C]
		add	edx, [ebp+var_70]
		mov	[ebp+var_80], edx
		jmp	loc_6B409712
; ---------------------------------------------------------------------------

loc_6B4097C5:				; CODE XREF: sub_6B4093B0+3F0j
		jle	short loc_6B409802
		mov	edx, edi
		lea	eax, [ebp+var_38]
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6B407650
		test	eax, eax
		jz	short loc_6B4097F8
		mov	edi, [ebp+var_A8]
		test	edi, edi
		jz	short loc_6B4097A9
		mov	edx, [ebp+var_A8]
		lea	ecx, [ebp+var_1C]
		call	sub_6B4076C0
		test	al, al
		jz	short loc_6B4097A9

loc_6B4097F8:				; CODE XREF: sub_6B4093B0+42Aj
					; sub_6B4093B0+4A3j
		mov	eax, 3
		jmp	loc_6B4094F5
; ---------------------------------------------------------------------------

loc_6B409802:				; CODE XREF: sub_6B4093B0:loc_6B4097C5j
		mov	esi, [ebp+var_A8]
		test	esi, esi
		jz	short loc_6B409823
		mov	ebx, [ebp+var_B8]
		test	ebx, ebx
		jnz	short loc_6B409823
		cmp	[ebp+var_99], 0
		jz	loc_6B4098A8

loc_6B409823:				; CODE XREF: sub_6B4093B0+45Aj
					; sub_6B4093B0+464j
		not	edi
		xor	ebx, ebx
		add	edi, [ebp+var_2C]
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_6B409830:				; CODE XREF: sub_6B4093B0+494j
		movzx	edx, byte ptr [edi]
		add	edi, 1
		mov	eax, edx
		and	eax, 7Fh
		shl	eax, cl
		add	ecx, 7
		or	ebx, eax
		test	dl, dl
		js	short loc_6B409830
		test	ebx, ebx
		setz	al

loc_6B40984B:				; CODE XREF: sub_6B4093B0+519j
		test	al, al
		jz	loc_6B4097A9
		jmp	short loc_6B4097F8
; ---------------------------------------------------------------------------

loc_6B409855:				; CODE XREF: sub_6B4093B0+153j
		cmp	[ebp+var_99], 0
		jnz	loc_6B409509
		cmp	eax, 1
		jz	loc_6B4095D9
		mov	eax, [ebp+var_7C]
		test	eax, eax
		jns	loc_6B40951D
		mov	edx, [ebp+var_A0]
		lea	ecx, [ebp+var_38]
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6B407730
		mov	edx, [ebp+arg_14]
		movzx	eax, [ebp+var_24]
		call	sub_6B407870
		mov	edx, [ebp+var_A4]
		mov	[edx+24h], eax
		jmp	loc_6B40951D
; ---------------------------------------------------------------------------

loc_6B4098A8:				; CODE XREF: sub_6B4093B0+46Dj
		mov	eax, [ebp+var_7C]
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		lea	eax, [ebp+var_38]
		call	sub_6B4077F0
		xor	eax, 1
		jmp	loc_6B40984B
; ---------------------------------------------------------------------------

loc_6B4098CE:				; CODE XREF: sub_6B4093B0+3FEj
		cmp	[ebp+var_AD], 0
		jz	loc_6B4096CE

loc_6B4098DB:				; CODE XREF: sub_6B4093B0+339j
		mov	[ebp+var_7C], 0
		mov	eax, 2
		jmp	loc_6B4094F5
; ---------------------------------------------------------------------------
		align 10h

loc_6B4098F0:				; CODE XREF: sub_6B4093B0+34Bj
		cmp	[ebp+var_99], 0
		mov	[ebp+var_A8], offset off_6B410628
		jnz	loc_6B40970B
		mov	eax, [ebp+arg_10]
		test	byte ptr [eax],	1
		jz	short loc_6B409923
		mov	eax, [eax-30h]

loc_6B409912:				; CODE XREF: sub_6B4093B0+579j
		mov	[ebp+var_1C], eax
		mov	eax, [eax-50h]
		mov	[ebp+var_A8], eax
		jmp	loc_6B40970B
; ---------------------------------------------------------------------------

loc_6B409923:				; CODE XREF: sub_6B4093B0+55Dj
		mov	eax, [ebp+arg_10]
		add	eax, 20h
		jmp	short loc_6B409912
; ---------------------------------------------------------------------------

loc_6B40992B:				; CODE XREF: sub_6B4093B0+15Cj
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_6B408690
; ---------------------------------------------------------------------------

loc_6B409937:				; CODE XREF: sub_6B4093B0+167j
		mov	[ebp+var_68], 2
		call	sub_6B408640
sub_6B4093B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B409943	proc near		; DATA XREF: sub_6B4093B0+35o
		add	ebp, 18h
		mov	eax, [ebp-64h]
		cmp	dword ptr [ebp-68h], 1
		mov	[ebp-0BCh], eax
		jz	short loc_6B409976
		mov	dword ptr [ebp-68h], 0
		call	sub_6B408DB0
		mov	edx, [ebp-0BCh]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_6B409976:				; CODE XREF: sub_6B409943+10j
		mov	edx, [ebp-0BCh]
		mov	[esp+0], edx
		call	sub_6B408AE0
		mov	dword ptr [ebp-68h], 1
		call	sub_6B408690
sub_6B409943	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B409990()
sub_6B409990	proc near		; DATA XREF: sub_6B4075D0:loc_6B407600o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	byte_6B40EA24, 0
		jz	short loc_6B4099A9
		mov	eax, dword_6B40EA20
		mov	[esp+1Ch+var_1C], eax ;	DWORD
		call	sub_6B407280

loc_6B4099A9:				; CODE XREF: sub_6B409990+Aj
		mov	byte_6B40EA24, 0
		add	esp, 1Ch
		retn
sub_6B409990	endp

; ---------------------------------------------------------------------------
		align 10h
dword_6B4099C0	dd 0FFFFFFFFh		; DATA XREF: sub_6B406690-5Br
					; sub_6B406690-4Co ...
		dd offset sub_6B4075D0
		dd offset sub_6B4075B0
		dd offset sub_6B407590
		dd 0
		dd 0FFFFFFFFh
dword_6B4099D8	dd 0			; DATA XREF: .data:off_6B40A008o
dword_6B4099DC	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6B407A80+16o
dword_6B4099EC	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6B408C20+1Co
dword_6B4099FC	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_6B4093B0+19o
dword_6B409A0C	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6B408AE0+1Bo
dword_6B409A1C	dd 11500FFh, 1000004h, 2000103h, 7Dh ; DATA XREF: sub_6B407E10+16o
		dd offset off_6B410680
		dd 0
dword_6B409A34	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6B409210+16o
dword_6B409A44	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6B409130+16o
dword_6B409A54	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_6B407CB0+19o
dword_6B409A64	dd 10900FFh, 1010004h, 7F01h, 0	; DATA XREF: sub_6B408DB0+A6o
dword_6B409A74	dd 10900FFh, 1010004h, 7F01h, 0	; DATA XREF: sub_6B408DB0+216o
dword_6B409A84	dd 10D00FFh, 1010006h, 7F010203h, 7D0000h, 0 ; DATA XREF: sub_6B408880+1Ao
dword_6B409A98	dd 10D00FFh, 1010006h, 7F010203h, 7D0000h, 56h dup(0)
					; DATA XREF: .text:6B4086DAo
		dd 100h	dup(?)
_text		ends

; Section 2. (virtual address 0000A000)
; Virtual size			: 00004A48 (  19016.)
; Section size in file		: 00004C00 (  19456.)
; Offset to raw	data for section: 00009000
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 6B40A000h
dword_6B40A000	dd 0FFFFFFFFh		; DATA XREF: sub_6B401260+1Bw
					; sub_6B401260+61w
		dd 0FFFFFFFFh
off_6B40A008	dd offset dword_6B4099D8 ; DATA	XREF: sub_6B406600+3r
					; sub_6B406600+12r ...
dword_6B40A00C	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w ...
dword_6B40A010	dd 2 dup(0)		; DATA XREF: sub_6B409130+36o
					; sub_6B409210+36o
dword_6B40A018	dd 0			; DATA XREF: sub_6B408880:loc_6B40895Br
					; sub_6B408880+12Cw ...
dword_6B40A01C	dd 0			; DATA XREF: .text:loc_6B40875Cr
					; .text:6B408789w ...
dword_6B40A020	dd 1000h dup(0)		; DATA XREF: sub_6B408880+124o
					; sub_6B408DB0+22Fo ...
dword_6B40E020	dd 280h	dup(0)		; DATA XREF: .text:6B408794o
					; sub_6B408DB0+BFo ...
; DWORD	dword_6B40EA20
dword_6B40EA20	dd 0			; DATA XREF: sub_6B4075D0+1Bo
					; sub_6B408DB0+C8o ...
byte_6B40EA24	db 0			; DATA XREF: sub_6B4075D0+8w
					; sub_6B4075D0+29w ...
		align 4
off_6B40EA28	dd offset sub_6B407E10	; DATA XREF: .text:6B408654r
					; .text:6B408659w ...
off_6B40EA2C	dd offset sub_6B408690	; DATA XREF: sub_6B408640+3r
					; .text:6B408664r ...
dword_6B40EA30	dd 2 dup(0)		; DATA XREF: sub_6B4075B0+Co
					; .text:6B408736o ...
byte_6B40EA38	db 0			; DATA XREF: sub_6B407E10+2Fr
					; sub_6B407E10:loc_6B407E80w
		align 4
dword_6B40EA3C	dd 0BB40E64Eh		; DATA XREF: .text:6B40670Fr
					; sub_6B406760+3r ...
dword_6B40EA40	dd 44BF19B1h		; DATA XREF: .text:6B406717r
					; sub_6B406760+21w ...
dword_6B40EA44	dd 0			; DATA XREF: sub_6B401430+6r
					; sub_6B401430+42o
		align 800h
_data		ends

; Section 3. (virtual address 0000F000)
; Virtual size			: 00001AE0 (   6880.)
; Section size in file		: 00001C00 (   7168.)
; Offset to raw	data for section: 0000DC00
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6B40F000h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: sub_6B401430+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_6B401430+2Ao
		align 4
aPureVirtualMet	db 'pure virtual method called',0Ah,0 ; DATA XREF: sub_6B4092C0+Bo
off_6B40F040	dd offset loc_6B407977	; DATA XREF: sub_6B407930:loc_6B407970r
		dd offset loc_6B407A12	; jump table for switch	statement
		dd offset loc_6B407A50
		dd offset loc_6B407977
		dd offset loc_6B4079C0
		dd offset loc_6B407967
		dd offset loc_6B407967
		dd offset loc_6B407967
		dd offset loc_6B407967
		dd offset loc_6B4079C7
		dd offset loc_6B407A41
		dd offset loc_6B407977
		dd offset loc_6B4079C0
aTerminateCalle	db 'terminate called recursively',0Ah,0 ; DATA XREF: sub_6B407E10+4Do
		align 4
aTerminateCal_0	db 'terminate called after throwing an instance of ',27h,0
					; DATA XREF: sub_6B407E10+CAo
asc_6B40F0C5	db 27h,0Ah,0		; DATA XREF: sub_6B407E10+118o
aWhat		db '  what():  ',0      ; DATA XREF: sub_6B407FBD+82o
aTerminateCal_1	db 'terminate called without an active exception',0Ah,0
					; DATA XREF: sub_6B407E10+17Ao
		align 4
aStdException	db 'std::exception',0   ; DATA XREF: sub_6B408500o
aStdBad_excepti	db 'std::bad_exception',0 ; DATA XREF: sub_6B4084F0o
		align 4
a__gnu_cxx__con	db '__gnu_cxx::__concurrence_lock_error',0 ; DATA XREF: sub_6B4084D0o
; a__gnu_cxx(char)
a__gnu_cxx__c_0	db '__gnu_cxx::__concurrence_unlock_error',0 ; DATA XREF: sub_6B4084E0o
		align 10h
off_6B40F180	dd offset loc_6B401E67,	offset loc_6B401EB0, offset loc_6B401EB0
					; DATA XREF: sub_6B401E50:loc_6B401E80r
		dd offset loc_6B401EB0,	offset loc_6B401EB0, offset loc_6B401E67 ; jump	table for switch statement
		dd offset loc_6B401E67,	offset loc_6B401E67, offset loc_6B401E67
		dd offset loc_6B401EB4,	offset loc_6B401EB4, offset loc_6B401EB0
		dd offset loc_6B401EB4,	offset loc_6B401EB4, offset loc_6B401EB4
		dd offset loc_6B401EB4,	offset loc_6B401EB4, offset loc_6B401EB4
		dd offset loc_6B401EB4,	offset loc_6B401EB4, offset loc_6B401EB4
		dd offset loc_6B401EB4,	offset loc_6B401E67, offset loc_6B401E8B
		dd offset loc_6B401E8B,	offset loc_6B401E8B, offset loc_6B401E8B
		dd offset loc_6B401E8B,	offset loc_6B401E8B, offset loc_6B401EB0
		dd offset loc_6B401EB4,	offset loc_6B401EB4, offset loc_6B401EB4
		dd offset loc_6B401EB4,	offset loc_6B401EB4, offset loc_6B401E67
		dd offset loc_6B401EB4,	offset loc_6B401E8B, offset loc_6B401E87
		dd offset loc_6B401EB0,	offset loc_6B401E67, offset loc_6B401E8B
		dd offset loc_6B401E8B,	offset loc_6B401E67, offset loc_6B401E67
		dd offset loc_6B401EB4,	offset loc_6B401EB0, offset loc_6B401EB0
		dd offset loc_6B401EB0,	offset loc_6B401EB0, offset loc_6B401EB0
		dd offset loc_6B401EB0,	offset loc_6B401EB0, offset loc_6B401EB0
		dd offset loc_6B401EB4,	offset loc_6B401EB0, offset loc_6B401E67
		dd offset loc_6B401EB4,	offset loc_6B401EB4, offset loc_6B401EB4
		dd offset loc_6B401EB4
off_6B40F274	dd offset loc_6B402347,	offset loc_6B402332, offset loc_6B402332
					; DATA XREF: sub_6B402320+32r
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402360 ; jump	table for switch statement
		dd offset loc_6B402347,	offset loc_6B402340, offset loc_6B402340
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402347, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402347
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402347, offset loc_6B402340
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402347
		dd offset loc_6B402332,	offset loc_6B402332, offset loc_6B402332
		dd offset loc_6B402347
a_global_	db '_GLOBAL_',0         ; DATA XREF: sub_6B4023D0+42o
					; sub_6B405730:loc_6B405753o
aAnonymousNames	db '(anonymous namespace)',0 ; DATA XREF: sub_6B4023D0+B4o
aSt		db 'st',0               ; DATA XREF: sub_6B4024A0+174o
					; .rdata:6B4104C0o
aCl		db 'cl',0               ; DATA XREF: sub_6B4024A0+2B5o
					; sub_6B404830+55Ao ...
		align 10h
off_6B40F390	dd offset loc_6B402878,	offset loc_6B402878, offset loc_6B402878
					; DATA XREF: sub_6B4027E0+4Br
		dd offset loc_6B402878,	offset loc_6B402878, offset loc_6B402878 ; jump	table for switch statement
		dd offset loc_6B402878,	offset loc_6B402878, offset loc_6B402878
		dd offset loc_6B402878,	offset loc_6B402812, offset loc_6B402812
		dd offset loc_6B402812,	offset loc_6B402812, offset loc_6B402812
		dd offset loc_6B402812,	offset loc_6B402812, offset loc_6B402B15
		dd offset loc_6B402812,	offset loc_6B402890, offset loc_6B4028B8
		dd offset loc_6B402812,	offset loc_6B402B80, offset loc_6B4028E5
		dd offset loc_6B402812,	offset loc_6B402812, offset loc_6B402812
		dd offset loc_6B402812,	offset loc_6B402812, offset loc_6B402AE3
		dd offset loc_6B402878,	offset loc_6B402910, offset loc_6B402940
		dd offset loc_6B402812,	offset loc_6B402970, offset loc_6B4029A0
		dd offset loc_6B4029F7,	offset loc_6B402A50, offset loc_6B402812
		dd offset loc_6B402812,	offset loc_6B402812, offset loc_6B402812
		dd offset loc_6B402878,	offset loc_6B402812, offset loc_6B402812
		dd offset loc_6B402812,	offset loc_6B402812, offset loc_6B402812
		dd offset loc_6B402812,	offset loc_6B402A80, offset loc_6B402A80
		dd offset loc_6B402A80,	offset loc_6B402A80, offset loc_6B402A80
		dd offset loc_6B402A80,	offset loc_6B402A80, offset loc_6B402A80
		dd offset loc_6B402A80,	offset loc_6B402A80, offset loc_6B402812
		dd offset loc_6B402A80,	offset loc_6B402A80, offset loc_6B402A80
		dd offset loc_6B402A80,	offset loc_6B402812, offset loc_6B402812
		dd offset loc_6B402812,	offset loc_6B402A80, offset loc_6B402A80
		dd offset loc_6B402AB8,	offset loc_6B402A80, offset loc_6B402A80
		dd offset loc_6B402A80,	offset loc_6B402A80, offset loc_6B402A80
off_6B40F4BC	dd offset loc_6B402D46	; DATA XREF: sub_6B4027E0+FEr
		dd offset loc_6B402812	; jump table for switch	statement
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402CFC
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402CC2
		dd offset loc_6B402C88
		dd offset loc_6B402E07
		dd offset loc_6B402812
		dd offset loc_6B402DCD
		dd offset loc_6B402C51
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402C30
		dd offset loc_6B402812
		dd offset loc_6B402812
		dd offset loc_6B402BF0
		dd offset loc_6B402CFC
aStringLiteral	db 'string literal',0   ; DATA XREF: sub_6B403570+208o
aStd		db 'std',0              ; DATA XREF: sub_6B403570+E6o
					; .rdata:6B40FFC4o ...
		align 4
off_6B40F58C	dd offset loc_6B403BEE,	offset loc_6B40396F, offset loc_6B40396F
					; DATA XREF: sub_6B403880+199r
		dd offset loc_6B403BCB,	offset loc_6B40396F, offset loc_6B40396F ; jump	table for switch statement
		dd offset loc_6B403BA8,	offset loc_6B403B85, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B403B62, offset loc_6B403B39
		dd offset loc_6B40396F,	offset loc_6B403B10, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B403AC4
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B403A8B, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B40396F,	offset loc_6B40396F, offset loc_6B40396F
		dd offset loc_6B403A50
off_6B40F65C	dd offset loc_6B403A2C	; DATA XREF: sub_6B403880+1B8r
		dd offset loc_6B403A40	; jump table for switch	statement
		dd offset loc_6B403A40
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B4038ED
		dd offset loc_6B4038ED
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B403A2C
		dd offset loc_6B4038ED
byte_6B40F714	db 2 dup(3Ah), 0	; DATA XREF: sub_6B4043D0+DBo
					; sub_6B404830+1DFo
aJarray		db 'JArray',0           ; DATA XREF: sub_6B404830+DECo
asc_6B40F71E	db '[]',0               ; DATA XREF: sub_6B404830+E08o
					; .rdata:6B4102F4o
aVtableFor	db 'vtable for ',0      ; DATA XREF: sub_6B404830:loc_6B40489Fo
aVttFor		db 'VTT for ',0         ; DATA XREF: sub_6B404830:loc_6B404902o
aConstructionVt	db 'construction vtable for ',0 ; DATA XREF: sub_6B404830:loc_6B4048B7o
aIn		db '-in-',0             ; DATA XREF: sub_6B404830+9Do
aTypeinfoFor	db 'typeinfo for ',0    ; DATA XREF: sub_6B404830:loc_6B404909o
aTypeinfoNameFo	db 'typeinfo name for ',0 ; DATA XREF: sub_6B404830:loc_6B404910o
aTypeinfoFnFor	db 'typeinfo fn for ',0 ; DATA XREF: sub_6B404830:loc_6B404917o
aNonVirtualThun	db 'non-virtual thunk to ',0 ; DATA XREF: sub_6B404830:loc_6B40491Eo
aVirtualThunkTo	db 'virtual thunk to ',0 ; DATA XREF: sub_6B404830:loc_6B40528Do
aCovariantRetur	db 'covariant return thunk to ',0 ; DATA XREF: sub_6B404830:loc_6B405297o
aJavaClassFor	db 'java Class for ',0  ; DATA XREF: sub_6B404830:loc_6B404BE4o
aGuardVariableF	db 'guard variable for ',0 ; DATA XREF: sub_6B404830:loc_6B404BEEo
aReferenceTempo	db 'reference temporary for ',0 ; DATA XREF: sub_6B404830:loc_6B405038o
aHiddenAliasFor	db 'hidden alias for ',0 ; DATA XREF: sub_6B404830:loc_6B405042o
asc_6B40F818	db '::*',0              ; DATA XREF: sub_6B404830+73Bo
					; sub_6B405B70+DFo
a_sat		db '_Sat ',0            ; DATA XREF: sub_6B404830:loc_6B4053A9o
a_accum		db '_Accum',0           ; DATA XREF: sub_6B404830+3FDo
a_fract		db '_Fract',0           ; DATA XREF: sub_6B404830:loc_6B405398o
asc_6B40F830	db ', ',0               ; DATA XREF: sub_6B404830+170o
					; sub_6B404830:loc_6B404C68o
aOperator_0	db 'operator',0         ; DATA XREF: sub_6B404830:loc_6B404FF0o
aOperator	db 'operator ',0        ; DATA XREF: sub_6B404830+4D8o
					; sub_6B404830:loc_6B40502Eo
aIx		db 'ix',0               ; DATA XREF: sub_6B404830+531o
					; .rdata:6B4102F0o
asc_6B40F849	db ' : ',0              ; DATA XREF: sub_6B404830+9A8o
aUl		db 'ul',0               ; DATA XREF: sub_6B404830:loc_6B405521o
aLl		db 'll',0               ; DATA XREF: sub_6B404830:loc_6B405510o
aUll		db 'ull',0              ; DATA XREF: sub_6B404830:loc_6B405556o
aFalse		db 'false',0            ; DATA XREF: sub_6B404830:loc_6B40571Eo
aTrue		db 'true',0             ; DATA XREF: sub_6B404830+C9Bo
aJavaResource	db 'java resource ',0   ; DATA XREF: sub_6B404830:loc_6B4052BEo
aDecltype	db 'decltype (',0       ; DATA XREF: sub_6B404830+A9Ao
a___		db '...',0              ; DATA XREF: sub_6B404830+E89o
					; .rdata:6B40FDB4o ...
aParm		db 'parm#',0            ; DATA XREF: sub_6B404830:loc_6B404FBBo
; char aLd[]
aLd		db '%ld',0              ; DATA XREF: sub_6B404830+79Eo
aGlobalConstruc	db 'global constructors keyed to ',0 ; DATA XREF: sub_6B404830:loc_6B405283o
aGlobalDestruct	db 'global destructors keyed to ',0 ; DATA XREF: sub_6B404830:loc_6B40504Co
		align 4
off_6B40F8C8	dd offset loc_6B4049AE,	offset loc_6B4049FC, offset loc_6B4049FC
					; DATA XREF: sub_6B404830:loc_6B404898r
		dd offset loc_6B404A20,	offset loc_6B4050D9, offset loc_6B405157 ; jump	table for switch statement
		dd offset loc_6B404FBB,	offset loc_6B4048D9, offset loc_6B4048F4
		dd offset loc_6B40489F,	offset loc_6B404902, offset loc_6B4048B7
		dd offset loc_6B404909,	offset loc_6B404910, offset loc_6B404917
		dd offset loc_6B40491E,	offset loc_6B40528D, offset loc_6B405297
		dd offset loc_6B404BE4,	offset loc_6B404BEE, offset loc_6B405038
		dd offset loc_6B405042,	offset loc_6B4048E5, offset loc_6B404F7C
		dd offset loc_6B404F7C,	offset loc_6B404F7C, offset loc_6B404CB2
		dd offset loc_6B404CB2,	offset loc_6B404CB2, offset loc_6B404CB2
		dd offset loc_6B404CB2,	offset loc_6B404CB2, offset loc_6B404CB2
		dd offset loc_6B404CB2,	offset loc_6B404CB2, offset loc_6B4052A1
		dd offset loc_6B4048AB,	offset loc_6B4051F7, offset loc_6B404DEF
		dd offset loc_6B404F15,	offset loc_6B404BF8, offset loc_6B404C3E
		dd offset loc_6B404C3E,	offset loc_6B404FF0, offset loc_6B40502E
		dd offset loc_6B404D06,	offset loc_6B404D20, offset loc_6B404D44
		dd offset loc_6B40486B,	offset loc_6B405197, offset loc_6B40486B
		dd offset loc_6B40486B,	offset loc_6B405056, offset loc_6B405056
		dd offset loc_6B4052BE,	offset loc_6B4052E3, offset loc_6B404DDF
		dd offset loc_6B4052C8,	offset loc_6B405283, offset loc_6B40504C
		dd offset loc_6B404928
off_6B40F9BC	dd offset loc_6B405545	; DATA XREF: sub_6B404830+CD9r
		dd offset loc_6B405532	; jump table for switch	statement
		dd offset loc_6B405521
		dd offset loc_6B405510
		dd offset loc_6B405556
aRestrict	db ' restrict',0        ; DATA XREF: sub_6B405B70:loc_6B405BB0o
aVolatile	db ' volatile',0        ; DATA XREF: sub_6B405B70:loc_6B405BC7o
aConst		db ' const',0           ; DATA XREF: sub_6B405B70:loc_6B405BD0o
asc_6B40F9EB	db '&&',0               ; DATA XREF: sub_6B405B70:loc_6B405C17o
					; .rdata:6B4101E4o
aComplex	db 'complex ',0         ; DATA XREF: sub_6B405B70:loc_6B405C20o
aImaginary	db 'imaginary ',0       ; DATA XREF: sub_6B405B70:loc_6B405C27o
		align 4
off_6B40FA04	dd offset loc_6B405BA7	; DATA XREF: sub_6B405B70:loc_6B405BA0r
		dd offset loc_6B405B89	; jump table for switch	statement
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405BB0
		dd offset loc_6B405BC7
		dd offset loc_6B405BD0
		dd offset loc_6B405BB0
		dd offset loc_6B405BC7
		dd offset loc_6B405BD0
		dd offset loc_6B405BD7
		dd offset loc_6B405BE8
		dd offset loc_6B405C00
		dd offset loc_6B405C17
		dd offset loc_6B405C20
		dd offset loc_6B405C27
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405B89
		dd offset loc_6B405C30
aSignedChar	db 'signed char',0      ; DATA XREF: .rdata:6B40FBC0o
					; .rdata:6B40FBC8o
aBool		db 'bool',0             ; DATA XREF: .rdata:6B40FBD4o
aBoolean	db 'boolean',0          ; DATA XREF: .rdata:6B40FBDCo
aChar		db 'char',0             ; DATA XREF: .rdata:6B40FBE8o
					; .rdata:6B40FD80o
aByte		db 'byte',0             ; DATA XREF: .rdata:6B40FBF0o
aDouble		db 'double',0           ; DATA XREF: .rdata:6B40FBFCo
					; .rdata:6B40FC04o
aLongDouble	db 'long double',0      ; DATA XREF: .rdata:6B40FC10o
					; .rdata:6B40FC18o
aFloat		db 'float',0            ; DATA XREF: .rdata:6B40FC24o
					; .rdata:6B40FC2Co
a__float128	db '__float128',0       ; DATA XREF: .rdata:6B40FC38o
					; .rdata:6B40FC40o
aUnsignedChar	db 'unsigned char',0    ; DATA XREF: .rdata:6B40FC4Co
					; .rdata:6B40FC54o
aInt		db 'int',0              ; DATA XREF: .rdata:off_6B40FC60o
					; .rdata:6B40FC68o
aUnsignedInt	db 'unsigned int',0     ; DATA XREF: .rdata:6B40FC74o
aUnsigned	db 'unsigned',0         ; DATA XREF: .rdata:6B40FC7Co
aLong		db 'long',0             ; DATA XREF: .rdata:6B40FC9Co
					; .rdata:6B40FCA4o ...
aUnsignedLong	db 'unsigned long',0    ; DATA XREF: .rdata:6B40FCB0o
					; .rdata:6B40FCB8o
a__int128	db '__int128',0         ; DATA XREF: .rdata:6B40FCC4o
					; .rdata:6B40FCCCo
aUnsigned__int1	db 'unsigned __int128',0 ; DATA XREF: .rdata:6B40FCD8o
					; .rdata:6B40FCE0o
aShort		db 'short',0            ; DATA XREF: .rdata:6B40FD28o
					; .rdata:6B40FD30o
aUnsignedShort	db 'unsigned short',0   ; DATA XREF: .rdata:6B40FD3Co
					; .rdata:6B40FD44o
aVoid		db 'void',0             ; DATA XREF: .rdata:6B40FD64o
					; .rdata:6B40FD6Co
aWchar_t	db 'wchar_t',0          ; DATA XREF: .rdata:6B40FD78o
aLongLong	db 'long long',0        ; DATA XREF: .rdata:6B40FD8Co
aUnsignedLongLo	db 'unsigned long long',0 ; DATA XREF: .rdata:6B40FDA0o
					; .rdata:6B40FDA8o
aDecimal32	db 'decimal32',0        ; DATA XREF: .rdata:off_6B40FDC8o
					; .rdata:6B40FDD0o
aDecimal64	db 'decimal64',0        ; DATA XREF: .rdata:off_6B40FDDCo
					; .rdata:6B40FDE4o
aDecimal128	db 'decimal128',0       ; DATA XREF: .rdata:off_6B40FDF0o
					; .rdata:6B40FDF8o
aHalf		db 'half',0             ; DATA XREF: .rdata:off_6B40FE04o
					; .rdata:6B40FE0Co
aChar16_t	db 'char16_t',0         ; DATA XREF: .rdata:off_6B40FE18o
					; .rdata:6B40FE20o
aChar32_t	db 'char32_t',0         ; DATA XREF: .rdata:off_6B40FE2Co
					; .rdata:6B40FE34o
		align 20h
		dd offset aSignedChar	; "signed char"
		dd 0Bh
		dd offset aSignedChar	; "signed char"
		dd 0Bh,	0
		dd offset aBool		; "bool"
		dd 4
		dd offset aBoolean	; "boolean"
		dd 2 dup(7)
		dd offset aChar		; "char"
		dd 4
		dd offset aByte		; "byte"
		dd 4, 0
		dd offset aDouble	; "double"
		dd 6
		dd offset aDouble	; "double"
		dd 6, 8
		dd offset aLongDouble	; "long	double"
		dd 0Bh
		dd offset aLongDouble	; "long	double"
		dd 0Bh,	8
		dd offset aFloat	; "float"
		dd 5
		dd offset aFloat	; "float"
		dd 5, 8
		dd offset a__float128	; "__float128"
		dd 0Ah
		dd offset a__float128	; "__float128"
		dd 0Ah,	8
		dd offset aUnsignedChar	; "unsigned char"
		dd 0Dh
		dd offset aUnsignedChar	; "unsigned char"
		dd 0Dh,	0
off_6B40FC60	dd offset aInt		; DATA XREF: sub_6B404830+3D6o
					; "int"
		dd 3
		dd offset aInt		; "int"
		dd 3, 1
		dd offset aUnsignedInt	; "unsigned int"
		dd 0Ch
		dd offset aUnsigned	; "unsigned"
		dd 8, 2, 5 dup(0)
		dd offset aLong		; "long"
		dd 4
		dd offset aLong		; "long"
		dd 4, 3
		dd offset aUnsignedLong	; "unsigned long"
		dd 0Dh
		dd offset aUnsignedLong	; "unsigned long"
		dd 0Dh,	4
		dd offset a__int128	; "__int128"
		dd 8
		dd offset a__int128	; "__int128"
		dd 8, 0
		dd offset aUnsigned__int1 ; "unsigned __int128"
		dd 11h
		dd offset aUnsigned__int1 ; "unsigned __int128"
		dd 11h,	10h dup(0)
		dd offset aShort	; "short"
		dd 5
		dd offset aShort	; "short"
		dd 5, 0
		dd offset aUnsignedShort ; "unsigned short"
		dd 0Eh
		dd offset aUnsignedShort ; "unsigned short"
		dd 0Eh,	6 dup(0)
		dd offset aVoid		; "void"
		dd 4
		dd offset aVoid		; "void"
		dd 4, 9
		dd offset aWchar_t	; "wchar_t"
		dd 7
		dd offset aChar		; "char"
		dd 4, 0
		dd offset aLongLong	; "long	long"
		dd 9
		dd offset aLong		; "long"
		dd 4, 5
		dd offset aUnsignedLongLo ; "unsigned long long"
		dd 12h
		dd offset aUnsignedLongLo ; "unsigned long long"
		dd 12h,	6
		dd offset a___		; "..."
		dd 3
		dd offset a___		; "..."
		dd 3, 0
off_6B40FDC8	dd offset aDecimal32	; DATA XREF: sub_6B4027E0+64Co
					; sub_6B4027E0+651o
					; "decimal32"
		dd 9
		dd offset aDecimal32	; "decimal32"
		dd 9, 0
off_6B40FDDC	dd offset aDecimal64	; DATA XREF: sub_6B4027E0+50Bo
					; sub_6B4027E0+510o
					; "decimal64"
		dd 9
		dd offset aDecimal64	; "decimal64"
		dd 9, 0
off_6B40FDF0	dd offset aDecimal128	; DATA XREF: sub_6B4027E0+4D1o
					; sub_6B4027E0+4D6o
					; "decimal128"
		dd 0Ah
		dd offset aDecimal128	; "decimal128"
		dd 0Ah,	0
off_6B40FE04	dd offset aHalf		; DATA XREF: sub_6B4027E0+616o
					; sub_6B4027E0+61Bo
					; "half"
		dd 4
		dd offset aHalf		; "half"
		dd 4, 8
off_6B40FE18	dd offset aChar16_t	; DATA XREF: sub_6B4027E0+439o
					; sub_6B4027E0+43Eo
					; "char16_t"
		dd 8
		dd offset aChar16_t	; "char16_t"
		dd 8, 0
off_6B40FE2C	dd offset aChar32_t	; DATA XREF: sub_6B4027E0+49Ao
					; sub_6B4027E0+49Fo
					; "char32_t"
		dd 8
		dd offset aChar32_t	; "char32_t"
		dd 8, 0
aStdAllocator	db 'std::allocator',0   ; DATA XREF: .rdata:6B40FFE0o
					; .rdata:6B40FFE8o
aAllocator	db 'allocator',0        ; DATA XREF: .rdata:6B40FFF0o
aStdBasic_strin	db 'std::basic_string',0 ; DATA XREF: .rdata:6B40FFFCo
					; .rdata:6B410004o
aBasic_string	db 'basic_string',0     ; DATA XREF: .rdata:6B41000Co
					; .rdata:6B410028o
aStdString	db 'std::string',0      ; DATA XREF: .rdata:6B410018o
aStdBasic_str_0	db 'std::basic_string<char, std::char_traits<char>, std::allocator<ch'
					; DATA XREF: .rdata:6B410020o
		db 'ar> >',0
aStdIstream	db 'std::istream',0     ; DATA XREF: .rdata:6B410034o
aStdBasic_istre	db 'std::basic_istream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6B41003Co
aBasic_istream	db 'basic_istream',0    ; DATA XREF: .rdata:6B410044o
aStdOstream	db 'std::ostream',0     ; DATA XREF: .rdata:6B410050o
		align 4
aStdBasic_ostre	db 'std::basic_ostream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6B410058o
aBasic_ostream	db 'basic_ostream',0    ; DATA XREF: .rdata:6B410060o
aStdIostream	db 'std::iostream',0    ; DATA XREF: .rdata:6B41006Co
		align 4
aStdBasic_iostr	db 'std::basic_iostream<char, std::char_traits<char> >',0
					; DATA XREF: .rdata:6B410074o
aBasic_iostream	db 'basic_iostream',0   ; DATA XREF: .rdata:6B41007Co
		align 10h
aT		db 't',0                ; DATA XREF: sub_6B402100+4Ao
					; sub_6B402100+55o
		align 4
		dd offset aStd		; "std"
		dd 3
		dd offset aStd		; "std"
		dd 3, 2	dup(0)
		dd 61h
		dd offset aStdAllocator	; "std::allocator"
		dd 0Eh
		dd offset aStdAllocator	; "std::allocator"
		dd 0Eh
		dd offset aAllocator	; "allocator"
		dd 9, 62h
		dd offset aStdBasic_strin ; "std::basic_string"
		dd 11h
		dd offset aStdBasic_strin ; "std::basic_string"
		dd 11h
		dd offset aBasic_string	; "basic_string"
		dd 0Ch,	73h
		dd offset aStdString	; "std::string"
		dd 0Bh
		dd offset aStdBasic_str_0 ; "std::basic_string<char, std::char_trait"...
		dd 46h
		dd offset aBasic_string	; "basic_string"
		dd 0Ch,	69h
		dd offset aStdIstream	; "std::istream"
		dd 0Ch
		dd offset aStdBasic_istre ; "std::basic_istream<char, std::char_trai"...
		dd 31h
		dd offset aBasic_istream ; "basic_istream"
		dd 0Dh,	6Fh
		dd offset aStdOstream	; "std::ostream"
		dd 0Ch
		dd offset aStdBasic_ostre ; "std::basic_ostream<char, std::char_trai"...
		dd 31h
		dd offset aBasic_ostream ; "basic_ostream"
		dd 0Dh,	64h
		dd offset aStdIostream	; "std::iostream"
		dd 0Dh
		dd offset aStdBasic_iostr ; "std::basic_iostream<char, std::char_tra"...
		dd 32h
		dd offset aBasic_iostream ; "basic_iostream"
		dd 0Eh
dword_6B410084	dd 26004E61h, 5361003Dh, 61003D00h, 64610061h, 61002600h
					; DATA XREF: sub_6B402100:loc_6B402145o
					; sub_6B402100+6Co ...
		dd 2928006Eh, 6D6300h, 6F63002Ch, 64007E00h, 3D2F0056h
		dd 616400h, 656C6564h, 5D5B6574h, 656400h, 6C64002Ah, 6C656400h
		dd 657465h, 2E007464h, 766400h,	4F65002Fh, 3D5E00h, 5E006F65h
		dd 716500h, 67003D3Dh, 3D3E0065h, 746700h, 536C003Eh, 3D3C3C00h
		dd 656C00h, 6C003D3Ch, 3C3C0073h, 746C00h, 496D003Ch, 3D2D00h
		dd 2A004C6Dh, 696D003Dh, 6D002D00h, 6D6D006Ch, 2D2D00h
		dd 6E00616Eh, 5D5B7765h, 656E00h, 6E003D21h, 746E0067h
		dd 6E002100h, 656E0077h, 526F0077h, 3D7C00h, 7C006F6Fh
		dd 726F007Ch, 70007C00h, 3D2B004Ch, 6C7000h, 6D70002Bh
		dd 2A3E2D00h, 707000h, 70002B2Bh, 74700073h, 3E2D00h, 3F007571h
		dd 4D7200h, 72003D25h, 3E3E0053h, 6D72003Dh, 72002500h
		dd 3E3E0073h, 7A697300h, 20666F65h, 7A7300h, 61007461h
		dd 6E67696Ch, 20666Fh, 7A61h, 6	dup(0)
off_6B4101C0	dd offset dword_6B410084 ; DATA	XREF: sub_6B403000+65o
					; sub_6B403000+6Br
		dd offset dword_6B410084+3
		dd 2 dup(2)
		dd offset dword_6B410084+6
		dd offset dword_6B410084+9
		dd 1, 2
		dd offset dword_6B410084+0Bh
		dd offset asc_6B40F9EB	; "&&"
		dd 2 dup(2)
		dd offset dword_6B410084+0Eh
		dd offset dword_6B410084+11h
		dd 2 dup(1)
		dd offset dword_6B410084+13h
		dd offset dword_6B410084+11h
		dd 1, 2
		dd offset aCl		; "cl"
		dd offset dword_6B410084+16h
		dd 2 dup(2)
		dd offset dword_6B410084+19h
		dd offset dword_6B410084+1Ch
		dd 1, 2
		dd offset dword_6B410084+1Eh
		dd offset dword_6B410084+21h
		dd 2 dup(1)
		dd offset dword_6B410084+23h
		dd offset dword_6B410084+26h
		dd 2 dup(2)
		dd offset dword_6B410084+29h
		dd offset dword_6B410084+2Ch
		dd 8, 1
		dd offset dword_6B410084+35h
		dd offset dword_6B410084+38h
		dd 2 dup(1)
		dd offset dword_6B410084+3Ah
		dd offset dword_6B410084+3Dh
		dd 6, 1
		dd offset dword_6B410084+44h
		dd offset dword_6B410084+47h
		dd 1, 2
		dd offset dword_6B410084+49h
		dd offset dword_6B410084+4Ch
		dd 1, 2
		dd offset dword_6B410084+4Eh
		dd offset dword_6B410084+51h
		dd 2 dup(2)
		dd offset dword_6B410084+54h
		dd offset dword_6B410084+57h
		dd 1, 2
		dd offset dword_6B410084+59h
		dd offset dword_6B410084+5Ch
		dd 2 dup(2)
		dd offset dword_6B410084+5Fh
		dd offset dword_6B410084+62h
		dd 2 dup(2)
		dd offset dword_6B410084+65h
		dd offset dword_6B410084+68h
		dd 1, 2
		dd offset aIx		; "ix"
		dd offset asc_6B40F71E	; "[]"
		dd 2 dup(2)
		dd offset dword_6B410084+6Ah
		dd offset dword_6B410084+6Dh
		dd 3, 2
		dd offset dword_6B410084+71h
		dd offset dword_6B410084+74h
		dd 2 dup(2)
		dd offset dword_6B410084+77h
		dd offset dword_6B410084+7Ah
		dd 2 dup(2)
		dd offset dword_6B410084+7Dh
		dd offset dword_6B410084+80h
		dd 1, 2
		dd offset dword_6B410084+82h
		dd offset dword_6B410084+85h
		dd 2 dup(2)
		dd offset dword_6B410084+88h
		dd offset dword_6B410084+8Bh
		dd 2 dup(2)
		dd offset dword_6B410084+8Eh
		dd offset dword_6B410084+91h
		dd 1, 2
		dd offset dword_6B410084+93h
		dd offset dword_6B410084+38h
		dd 1, 2
		dd offset dword_6B410084+96h
		dd offset dword_6B410084+99h
		dd 2, 1
		dd offset dword_6B410084+9Ch
		dd offset dword_6B410084+9Fh
		dd 5, 1
		dd offset dword_6B410084+0A5h
		dd offset dword_6B410084+0A8h
		dd 2 dup(2)
		dd offset dword_6B410084+0ABh
		dd offset dword_6B410084+91h
		dd 2 dup(1)
		dd offset dword_6B410084+0AEh
		dd offset dword_6B410084+0B1h
		dd 2 dup(1)
		dd offset dword_6B410084+0B3h
		dd offset dword_6B410084+0B6h
		dd 3, 1
		dd offset dword_6B410084+0BAh
		dd offset dword_6B410084+0BDh
		dd 2 dup(2)
		dd offset dword_6B410084+0C0h
		dd offset dword_6B410084+0C3h
		dd 2 dup(2)
		dd offset dword_6B410084+0C6h
		dd offset dword_6B410084+0C9h
		dd 1, 2
		dd offset dword_6B410084+0CBh
		dd offset dword_6B410084+0CEh
		dd 2 dup(2)
		dd offset dword_6B410084+0D1h
		dd offset dword_6B410084+0D4h
		dd 1, 2
		dd offset dword_6B410084+0D6h
		dd offset dword_6B410084+0D9h
		dd 3, 2
		dd offset dword_6B410084+0DDh
		dd offset dword_6B410084+0E0h
		dd 2, 1
		dd offset dword_6B410084+0E3h
		dd offset dword_6B410084+0D4h
		dd 2 dup(1)
		dd offset dword_6B410084+0E6h
		dd offset dword_6B410084+0E9h
		dd 2 dup(2)
		dd offset dword_6B410084+0ECh
		dd offset dword_6B410084+0EFh
		dd 1, 3
		dd offset dword_6B410084+0F1h
		dd offset dword_6B410084+0F4h
		dd 2 dup(2)
		dd offset dword_6B410084+0F7h
		dd offset dword_6B410084+0FAh
		dd 3, 2
		dd offset dword_6B410084+0FEh
		dd offset dword_6B410084+101h
		dd 1, 2
		dd offset dword_6B410084+103h
		dd offset dword_6B410084+106h
		dd 2 dup(2)
		dd offset aSt		; "st"
		dd offset dword_6B410084+109h
		dd 7, 1
		dd offset dword_6B410084+111h
		dd offset dword_6B410084+109h
		dd 7, 1
		dd offset dword_6B410084+114h
		dd offset dword_6B410084+117h
		dd 8, 1
		dd offset dword_6B410084+120h
		dd offset dword_6B410084+117h
		dd 8, 1, 8 dup(0)
off_6B410520	dd offset TlsCallback_0	; DATA XREF: sub_6B401040:loc_6B401137r
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_6B4061D0+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_6B406230+13Ao
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_6B406230+126o
					; sub_6B406380+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_6B406380+267o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_6B406380+F4o
		align 4
off_6B4105F4	dd offset dword_6B411040 ; DATA	XREF: .text:6B406728o
		dd offset dword_6B4110A0
aMsvcrt_dll:				; DATA XREF: .text:loc_6B406E25o
		unicode	0, <msvcrt.dll>,0
		align 4
off_6B410614	dd offset off_6B410908	; DATA XREF: sub_6B4093B0+351o
					; .rdata:6B4108DCo
		dd offset aN10__cxxabiv11 ; "N10__cxxabiv115__forced_unwindE"
off_6B41061C	dd offset off_6B410968	; DATA XREF: .rdata:6B410638o
					; .rdata:6B410904o
		dd offset aN10__cxxabiv_0 ; "N10__cxxabiv117__class_type_infoE"
		dd offset off_6B410688
off_6B410628	dd offset off_6B410908	; DATA XREF: sub_6B4093B0+547o
					; .rdata:6B410944o
		dd offset aN10__cxxabiv_1 ; "N10__cxxabiv119__foreign_exceptionE"
off_6B410630	dd offset off_6B410968	; DATA XREF: .rdata:6B410964o
		dd offset aN10__cxxabiv12 ; "N10__cxxabiv120__si_class_type_infoE"
		dd offset off_6B41061C
; Exported entry  25. _ZTIN5GpgME12DataProviderE
		public _ZTIN5GpgME12DataProviderE
_ZTIN5GpgME12DataProviderE dd offset off_6B410908 ; DATA XREF: .rdata:6B41064Co
					; .rdata:6B410658o ...
		dd offset _ZTSN5GpgME12DataProviderE ; "N5GpgME12DataProviderE"
; Exported entry  26. _ZTIN6QGpgME21QIODeviceDataProviderE
		public _ZTIN6QGpgME21QIODeviceDataProviderE
_ZTIN6QGpgME21QIODeviceDataProviderE dd	offset off_6B410968 ; DATA XREF: .rdata:6B4109E4o
		dd offset _ZTSN6QGpgME21QIODeviceDataProviderE ; "N6QGpgME21QIODeviceDataProviderE"
		dd offset _ZTIN5GpgME12DataProviderE
; Exported entry  27. _ZTIN6QGpgME22QByteArrayDataProviderE
		public _ZTIN6QGpgME22QByteArrayDataProviderE
_ZTIN6QGpgME22QByteArrayDataProviderE dd offset	off_6B410968 ; DATA XREF: .rdata:6B410A24o
		dd offset _ZTSN6QGpgME22QByteArrayDataProviderE	; "N6QGpgME22QByteArrayDataProviderE"
		dd offset _ZTIN5GpgME12DataProviderE
off_6B41065C	dd offset off_6B410968	; DATA XREF: .text:6B408802o
					; sub_6B408880+1C1o ...
		dd offset aN9__gnu_cxx24_ ; "N9__gnu_cxx24__concurrence_lock_errorE"
		dd offset off_6B410680
off_6B410668	dd offset off_6B410968	; DATA XREF: sub_6B407CB0+78o
					; .text:6B4087D8o ...
		dd offset aN9__gnu_cxx26_ ; "N9__gnu_cxx26__concurrence_unlock_error"...
		dd offset off_6B410680
off_6B410674	dd offset off_6B410968	; DATA XREF: sub_6B408C8D+A8o
					; sub_6B408C8D+D0o ...
		dd offset aSt13bad_except ; "St13bad_exception"
		dd offset off_6B410680
off_6B410680	dd offset off_6B410908	; DATA XREF: .text:6B409A2Co
					; .rdata:6B410664o ...
		dd offset aSt9exception	; "St9exception"
off_6B410688	dd offset off_6B410908	; DATA XREF: .rdata:6B410624o
					; .rdata:6B410AC4o
		dd offset aSt9type_info	; "St9type_info"
		align 20h
aN10__cxxabiv11	db 'N10__cxxabiv115__forced_unwindE',0 ; DATA XREF: .rdata:6B410618o
aN10__cxxabiv_0	db 'N10__cxxabiv117__class_type_infoE',0 ; DATA XREF: .rdata:6B410620o
		align 20h
aN10__cxxabiv_1	db 'N10__cxxabiv119__foreign_exceptionE',0 ; DATA XREF: .rdata:6B41062Co
		align 20h
aN10__cxxabiv12	db 'N10__cxxabiv120__si_class_type_infoE',0 ; DATA XREF: .rdata:6B410634o
		align 20h
; Exported entry  28. _ZTSN5GpgME12DataProviderE
		public _ZTSN5GpgME12DataProviderE
_ZTSN5GpgME12DataProviderE db 'N5GpgME12DataProviderE',0 ; DATA XREF: .rdata:6B410640o
		align 10h
; Exported entry  29. _ZTSN6QGpgME21QIODeviceDataProviderE
		public _ZTSN6QGpgME21QIODeviceDataProviderE
_ZTSN6QGpgME21QIODeviceDataProviderE db	'N6QGpgME21QIODeviceDataProviderE',0
					; DATA XREF: .rdata:6B410648o
		align 20h
; Exported entry  30. _ZTSN6QGpgME22QByteArrayDataProviderE
		public _ZTSN6QGpgME22QByteArrayDataProviderE
_ZTSN6QGpgME22QByteArrayDataProviderE db 'N6QGpgME22QByteArrayDataProviderE',0
					; DATA XREF: .rdata:6B410654o
		align 20h
aN9__gnu_cxx24_	db 'N9__gnu_cxx24__concurrence_lock_errorE',0 ; DATA XREF: .rdata:6B410660o
		align 20h
aN9__gnu_cxx26_	db 'N9__gnu_cxx26__concurrence_unlock_errorE',0
					; DATA XREF: .rdata:6B41066Co
		align 20h
aSt13bad_except	db 'St13bad_exception',0 ; DATA XREF: .rdata:6B410678o
		align 4
aSt9exception	db 'St9exception',0     ; DATA XREF: .rdata:6B410684o
		align 4
aSt9type_info	db 'St9type_info',0     ; DATA XREF: .rdata:6B41068Co
		align 4
		dd 2 dup(0)
		dd offset off_6B410614
off_6B4108E0	dd offset sub_6B407B40	; DATA XREF: sub_6B407B20+7o
					; sub_6B407B40+4o ...
		dd offset sub_6B407B20
		dd offset sub_6B4092C0
		dd 6 dup(0)
		dd offset off_6B41061C
off_6B410908	dd offset sub_6B407B90	; DATA XREF: sub_6B407B60+8o
					; sub_6B407B90+7o ...
		dd offset sub_6B407B60
		dd offset sub_6B408530
		dd offset sub_6B408540
		dd offset sub_6B408090
		dd offset sub_6B408160
		dd offset sub_6B408110
		dd offset sub_6B4081D0
		dd offset sub_6B408250
		dd 6 dup(0)
		dd offset off_6B410628
off_6B410948	dd offset sub_6B407BF0	; DATA XREF: sub_6B407BD0+7o
					; sub_6B407BF0+4o ...
		dd offset sub_6B407BD0
		dd offset sub_6B4092C0
		dd 4 dup(0)
		dd offset off_6B410630
off_6B410968	dd offset sub_6B407C40	; DATA XREF: sub_6B407C10+8o
					; sub_6B407C40+7o ...
		dd offset sub_6B407C10
		dd offset sub_6B408530
		dd offset sub_6B408540
		dd offset sub_6B408090
		dd offset sub_6B408160
		dd offset sub_6B408270
		dd offset sub_6B408300
		dd offset sub_6B408420
		dd 6 dup(0)
		dd offset _ZTIN5GpgME12DataProviderE
		dd offset _ZN5GpgME12DataProviderD1Ev
		dd offset _ZN5GpgME12DataProviderD0Ev
		dd offset sub_6B4092C0
		dd offset sub_6B4092C0
		dd offset sub_6B4092C0
		dd offset sub_6B4092C0
		dd offset sub_6B4092C0
		align 20h
; Exported entry  31. _ZTVN6QGpgME21QIODeviceDataProviderE
		public _ZTVN6QGpgME21QIODeviceDataProviderE
_ZTVN6QGpgME21QIODeviceDataProviderE dd	0
		dd offset _ZTIN6QGpgME21QIODeviceDataProviderE
off_6B4109E8	dd offset _ZN6QGpgME21QIODeviceDataProviderD1Ev
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProviderD2Ev+16o
					; _ZN6QGpgME21QIODeviceDataProviderC1ERKN5boost10shared_ptrI9QIODeviceEE+Eo ...
		dd offset _ZN6QGpgME21QIODeviceDataProviderD0Ev
		dd offset _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE
		dd offset _ZN6QGpgME21QIODeviceDataProvider4readEPvj
		dd offset _ZN6QGpgME21QIODeviceDataProvider5writeEPKvj
		dd offset _ZN6QGpgME21QIODeviceDataProvider4seekEli
		dd offset _ZN6QGpgME21QIODeviceDataProvider7releaseEv
		align 20h
; Exported entry  32. _ZTVN6QGpgME22QByteArrayDataProviderE
		public _ZTVN6QGpgME22QByteArrayDataProviderE
_ZTVN6QGpgME22QByteArrayDataProviderE dd 0
		dd offset _ZTIN6QGpgME22QByteArrayDataProviderE
off_6B410A28	dd offset _ZN6QGpgME22QByteArrayDataProviderD1Ev
					; DATA XREF: _ZN6QGpgME22QByteArrayDataProviderC2Ev+9o
					; _ZN6QGpgME22QByteArrayDataProviderC1Ev+9o ...
		dd offset _ZN6QGpgME22QByteArrayDataProviderD0Ev
		dd offset _ZNK6QGpgME22QByteArrayDataProvider11isSupportedEN5GpgME12DataProvider9OperationE
		dd offset _ZN6QGpgME22QByteArrayDataProvider4readEPvj
		dd offset _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj
		dd offset _ZN6QGpgME22QByteArrayDataProvider4seekEli
		dd offset _ZN6QGpgME22QByteArrayDataProvider7releaseEv
		dd 8 dup(0)
		dd offset off_6B41065C
off_6B410A68	dd offset sub_6B407DA0	; DATA XREF: sub_6B407D70+8o
					; sub_6B407DA0+7o ...
		dd offset sub_6B407D70
		dd offset sub_6B4084D0
		dd 2 dup(0)
		dd offset off_6B410668
off_6B410A80	dd offset sub_6B407DF0	; DATA XREF: sub_6B407CB0+6Ao
					; sub_6B407DC0+8o ...
		dd offset sub_6B407DC0
		dd offset sub_6B4084E0
		dd 2 dup(0)
		dd offset off_6B410674
off_6B410A98	dd offset sub_6B4085A0	; DATA XREF: sub_6B408C8D+C2o
		dd offset sub_6B408580
		dd offset sub_6B4084F0
		dd 2 dup(0)
		dd offset off_6B410680
off_6B410AB0	dd offset sub_6B4085E0	; DATA XREF: sub_6B408580+7o
					; sub_6B4085A0+4o ...
		dd offset sub_6B4085C0
		dd offset sub_6B408500
		dd 2 dup(0)
		dd offset off_6B410688
off_6B410AC8	dd offset sub_6B408620	; DATA XREF: sub_6B408600+7o
					; sub_6B408620+4o ...
		dd offset sub_6B408600
		dd offset sub_6B408530
		dd offset sub_6B408540
		dd offset sub_6B408510
		dd offset sub_6B408520
dword_6B410AE0	dd 0			; DATA XREF: sub_6B406380+57o
					; sub_6B406380+5Co ...
dword_6B410AE4	dd 0			; DATA XREF: sub_6B406380+7Ar
dword_6B410AE8	dd 0			; DATA XREF: sub_6B406380+84r
dword_6B410AEC	dd 45h dup(0)		; DATA XREF: sub_6B406380+8Do
		align 800h
_rdata		ends

; Section 4. (virtual address 00011000)
; Virtual size			: 000003C8 (	968.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 6B411000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_6B411000	dd ?			; DATA XREF: sub_6B401040+Dr
					; sub_6B401040+22w ...
TlsIndex	dd 4 dup(?)		; DATA XREF: .tls:TlsIndex_ptro
dword_6B411014	dd ?			; DATA XREF: DllEntryPoint+7w
dword_6B411018	dd ?			; DATA XREF: sub_6B406230+2Cr
					; sub_6B406230+65r ...
dword_6B41101C	dd ?			; DATA XREF: sub_6B406230:loc_6B406250r
					; sub_6B406230:loc_6B4062F2w ...
dword_6B411020	dd ?			; DATA XREF: sub_6B406380+9r
					; sub_6B406380:loc_6B4063A0w
dword_6B411024	dd ?			; DATA XREF: sub_6B406690+3r
					; sub_6B406690:loc_6B4066A1w
		align 20h
dword_6B411040	dd ?			; DATA XREF: .text:6B4066E2w
					; .rdata:off_6B4105F4o
dword_6B411044	dd ?			; DATA XREF: .text:6B4066ECw
		dd ?
dword_6B41104C	dd ?			; DATA XREF: .text:6B4066FBw
		dd 14h dup(?)
dword_6B4110A0	dd 2Bh dup(?)		; DATA XREF: .rdata:6B4105F8o
dword_6B41114C	dd ?			; DATA XREF: .text:6B40670Aw
		dd 2 dup(?)
dword_6B411158	dd ?			; DATA XREF: .text:6B4066F6w
		dd 2 dup(?)
dword_6B411164	dd ?			; DATA XREF: .text:6B4066DCw
		dd 86h dup(?)
dword_6B411380	dd ?			; DATA XREF: sub_6B406830+7r
					; sub_6B4068B0+26r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_6B406830:loc_6B406848o
					; sub_6B406830:loc_6B406895o ...
dword_6B41139C	dd ?			; DATA XREF: sub_6B406830+25r
					; .text:6B406965r ...
		dd ?
dword_6B4113A4	dd ?			; DATA XREF: .text:6B406D86r
					; .text:6B406E1Aw ...
dword_6B4113A8	dd ?			; DATA XREF: sub_6B401000+21w
					; sub_6B401040+143r ...
dword_6B4113AC	dd ?			; DATA XREF: sub_6B401000+1Cw
					; sub_6B401040:loc_6B401170r ...
dword_6B4113B0	dd ?			; DATA XREF: sub_6B401040+4Co
					; sub_6B401040+C1o ...
dword_6B4113B4	dd ?			; DATA XREF: sub_6B401040+5Fr
					; sub_6B401040:loc_6B401116r ...
		align 1000h
_bss		ends

;
; Imports from libgpgme++.dll
;
; Section 6. (virtual address 00013000)
; Virtual size			: 00000BFC (   3068.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00010000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn _ZTVN5GpgME12DataProviderE:dword
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProviderD2Ev:loc_6B401561r
					; _ZN6QGpgME22QByteArrayDataProviderD0Ev:loc_6B401AA7r	...
		extrn _ZN5GpgME5Error14setSystemErrorE14gpg_err_code_t:dword
					; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4seekEli+B7p
					; _ZN6QGpgME21QIODeviceDataProvider4seekEli+DCp ...
		extrn _ZN5GpgME5Error14hasSystemErrorEv:dword
					; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj:loc_6B401807p
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj:loc_6B401807r

;
; Imports from QtCore4.dll
;
		extrn _ZN10QByteArray11shared_nullE:dword
					; DATA XREF: _ZN6QGpgME22QByteArrayDataProviderC2Ev+4r
					; _ZN6QGpgME22QByteArrayDataProviderC1Ev+4r ...
		extrn _ZN9QIODevice5writeEPKcx:dword
					; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider5writeEPKvj+2Fp
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProvider5writeEPKvj+2Fr
		extrn _ZN8QProcess16staticMetaObjectE:dword
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+6Fr
					; _ZN6QGpgME21QIODeviceDataProviderC1ERKN5boost10shared_ptrI9QIODeviceEE+2Fr ...
		extrn _ZNK11QMetaObject4castEP7QObject:dword
					; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+77p
					; _ZN6QGpgME21QIODeviceDataProviderC1ERKN5boost10shared_ptrI9QIODeviceEE+37p ...
		extrn _ZNK8QProcess5errorEv:dword
					; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+8Ap
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+8Ar
		extrn _ZN9QIODevice4readEPcx:dword
					; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+106p
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+106r
		extrn _ZNK8QProcess10exitStatusEv:dword
					; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+117p
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+117r
		extrn _ZNK8QProcess8exitCodeEv:dword
					; CODE XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+129p
					; DATA XREF: _ZN6QGpgME21QIODeviceDataProvider4readEPvj+129r
		extrn _ZNK8QProcess11readChannelEv:dword
					; CODE XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+38p
					; DATA XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+38r
		extrn _ZNK9QIODevice10isWritableEv:dword
					; DATA XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+95r
		extrn _ZNK9QIODevice10isReadableEv:dword
					; CODE XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+AAp
					; DATA XREF: _ZNK6QGpgME21QIODeviceDataProvider11isSupportedEN5GpgME12DataProvider9OperationE+AAr
		extrn _ZN10QByteArrayaSERKS_:dword
					; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider7releaseEv+24p
					; DATA XREF: _ZN6QGpgME22QByteArrayDataProvider7releaseEv+24r
		extrn _Z5qFreePv:dword	; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider7releaseEv+3Fp
					; _ZN6QGpgME22QByteArrayDataProviderD0Ev+21p ...
		extrn _ZN10QByteArray7reallocEi:dword
					; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+51p
					; _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+101p ...
		extrn _ZN10QByteArray6resizeEi:dword
					; CODE XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+A5p
					; DATA XREF: _ZN6QGpgME22QByteArrayDataProvider5writeEPKvj+A5r

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: .text:6B4071FDp
					; DATA XREF: .text:6B4071FDr
; HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpName)
		extrn CreateSemaphoreA:dword ; CODE XREF: .text:6B40719Bp
					; sub_6B4071B0+2Dp
					; DATA XREF: ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_6B4068B0+41p
					; DATA XREF: sub_6B4068B0+41r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_6B406830+1Fp
					; .text:6B40695Fp ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:6B406738p
					; DATA XREF: .text:6B406738r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_6B406760+6Cp
					; DATA XREF: sub_6B406760+6Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_6B406760+74p
					; .text:6B407048p ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_6B406830+4Cp
					; sub_6B407240+Bp
					; DATA XREF: ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_6B401430+16p
					; .text:6B406E11p
					; DATA XREF: ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_6B401430+35p
					; DATA XREF: sub_6B401430+35r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_6B406760+57p
					; DATA XREF: sub_6B406760+57r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_6B406760+7Cp
					; DATA XREF: sub_6B406760+7Cr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_6B4068B0+77p
					; DATA XREF: sub_6B4068B0+77r
; PVOID	__stdcall InterlockedCompareExchange(PVOID *Destination, PVOID Exchange, PVOID Comperand)
		extrn InterlockedCompareExchange:dword
; LONG __stdcall InterlockedExchange(LPLONG Target, LONG Value)
		extrn InterlockedExchange:dword
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_6B406830+6Cp
					; .text:6B406996p ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: .text:6B406E2Cp
					; DATA XREF: .text:6B406E2Cr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_6B406760+8Bp
					; DATA XREF: sub_6B406760+8Br
; BOOL __stdcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG	lpPreviousCount)
		extrn ReleaseSemaphore:dword ; CODE XREF: .text:6B406FCCp
					; sub_6B406FF0+31p
					; DATA XREF: ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_6B407240+28p
					; DATA XREF: sub_6B407240+28r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: .text:6B40671Fp
					; DATA XREF: .text:6B40671Fr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_6B401040+37p
					; sub_6B401040+B0p ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:6B406749p
					; DATA XREF: .text:6B406749r
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: sub_6B4072B0+13p
					; DATA XREF: sub_6B4072B0+13r
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; CODE XREF: sub_6B407280+Ap
					; DATA XREF: sub_6B407280+Ar
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_6B406830+45p
					; sub_6B407240+1Ap
					; DATA XREF: ...
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: sub_6B407210+12p
					; DATA XREF: sub_6B407210+12r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:6B40672Fp
					; DATA XREF: .text:6B40672Fr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, DWORD	dwSize,	DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_6B406230+10Bp
					; sub_6B406380+1B2p
					; DATA XREF: ...
; DWORD	__stdcall VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, DWORD dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_6B406230+A8p
					; sub_6B406380+184p
					; DATA XREF: ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: .text:6B4070C3p
					; sub_6B407110+2Ep
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
; int __cdecl _write(int, const	void *,	unsigned int)
		extrn __imp__write:dword ; DATA	XREF: _writer

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
; FILE iob[]
		extrn _iob:dword	; DATA XREF: sub_6B4061D0+4r
					; sub_6B4061D0+3Cr ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_6B405FF0+A3p
					; DATA XREF: sub_6B405FF0+A3r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void __cdecl __noreturn abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t, size_t)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; int __cdecl fputc(int, FILE *)
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; int __cdecl fputs(const char *, FILE *)
		extrn __imp_fputs:dword	; DATA XREF: fputsr
; void __cdecl free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *, size_t, size_t, FILE *)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memset(void *, int, size_t)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; void *__cdecl	realloc(void *,	size_t)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
; int sprintf(char *, const char *, ...)
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
; int __cdecl strcmp(const char	*, const char *)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; char *__cdecl	strcpy(char *, const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl strlen(const char *)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *, const char *, size_t)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; int __cdecl vfprintf(FILE *, const char *, va_list)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr

;
; Imports from libgcc_s_sjlj-1.dll
;
		extrn __imp__Unwind_SjLj_Resume:dword ;	DATA XREF: _Unwind_SjLj_Resumer
		extrn __imp__Unwind_SjLj_Register:dword	; DATA XREF: _Unwind_SjLj_Registerr
		extrn __imp__Unwind_SjLj_Unregister:dword
					; DATA XREF: _Unwind_SjLj_Unregisterr
		extrn __imp__Unwind_GetTextRelBase:dword
					; DATA XREF: _Unwind_GetTextRelBaser
		extrn __imp__Unwind_GetDataRelBase:dword
					; DATA XREF: _Unwind_GetDataRelBaser
		extrn __imp__Unwind_GetRegionStart:dword
					; DATA XREF: _Unwind_GetRegionStartr
		extrn __imp__Unwind_GetLanguageSpecificData:dword
					; DATA XREF: _Unwind_GetLanguageSpecificDatar
		extrn __imp__Unwind_GetIPInfo:dword ; DATA XREF: _Unwind_GetIPInfor
		extrn __imp__Unwind_SetGR:dword	; DATA XREF: _Unwind_SetGRr
		extrn __imp__Unwind_SetIP:dword	; DATA XREF: _Unwind_SetIPr
		extrn __imp__Unwind_DeleteException:dword
					; DATA XREF: _Unwind_DeleteExceptionr
		extrn __imp__Unwind_SjLj_Resume_or_Rethrow:dword
					; DATA XREF: _Unwind_SjLj_Resume_or_Rethrowr
		extrn __imp__Unwind_SjLj_RaiseException:dword
					; DATA XREF: _Unwind_SjLj_RaiseExceptionr


; Section 7. (virtual address 00014000)
; Virtual size			: 0000002C (	 44.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00010C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 6B414000h
dword_6B414000	dd 0			; DATA XREF: sub_6B401040+1DDo
dword_6B414004	dd 0			; DATA XREF: sub_6B401040+1D5o
dword_6B414008	dd 0			; DATA XREF: sub_6B401040+1C9o
		dd offset sub_6B401000
dword_6B414010	dd 2 dup(0)		; DATA XREF: sub_6B401040+1C1o
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 8
dword_6B414028	dd 76h dup(0)		; DATA XREF: TlsCallback_0:loc_6B406161o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 00015000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00010E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 6B415000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end DllEntryPoint
