;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	025EF806679577DBBFAC563D0871FC57
; Input	CRC32 :	4B60C141

; File Name   :	C:\compspace\compare\gpg\dlls\original\dbus-launch.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001AB4 (   6836.)
; Section size in file		: 00001C00 (   7168.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401010	proc near		; DATA XREF: .CRT:00407004o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	eax, ds:dword_405028
		mov	[esp+2Ch+var_1C], offset dword_405024
		mov	[esp+2Ch+var_24], offset dword_405018
		mov	[esp+2Ch+var_28], offset dword_405014
		mov	ds:dword_405024, eax
		mov	eax, dword_403000
		mov	[esp+2Ch+var_2C], offset dword_405010
		mov	[esp+2Ch+var_20], eax
		call	__getmainargs
		mov	ds:dword_40501C, eax
		add	esp, 2Ch
		retn
sub_401010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401060	proc near		; DATA XREF: .CRT:00407010o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ds:dword_405030, 1
		mov	ds:dword_405034, 1
		mov	ds:dword_405038, 1
		mov	ds:dword_40503C, 1
		jz	short loc_401102

loc_401096:				; CODE XREF: sub_401060+B7j
					; sub_401060+CBj ...
		xor	eax, eax

loc_401098:				; CODE XREF: sub_401060+EAj
					; sub_401060+126j
		mov	ecx, ds:dword_405040
		mov	ds:dword_405020, eax
		test	ecx, ecx
		jz	short loc_4010F4
		mov	[esp+1Ch+var_1C], 2
		call	__set_app_type

loc_4010B3:				; CODE XREF: sub_401060+A0j
		mov	[esp+1Ch+var_1C], 0FFFFFFFFh
		call	sub_401A70
		mov	edx, ds:dword_405044
		mov	ds:dword_4053D4, eax
		mov	ds:dword_4053D8, eax
		mov	eax, ds:_fmode
		mov	[eax], edx
		call	sub_401BC0
		mov	edx, ds:dword_405000
		test	edx, edx
		jz	short loc_4010EE
		mov	eax, ds:dword_405048
		test	eax, eax
		jz	short loc_401150

loc_4010EE:				; CODE XREF: sub_401060+83j
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_4010F4:				; CODE XREF: sub_401060+45j
		mov	[esp+1Ch+var_1C], 1
		call	__set_app_type
		jmp	short loc_4010B3
; ---------------------------------------------------------------------------

loc_401102:				; CODE XREF: sub_401060+34j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	loc_401096
		movzx	eax, word ptr [edx+18h]
		cmp	ax, 10Bh
		jz	short loc_401170
		cmp	ax, 20Bh
		jnz	loc_401096
		add	edx, 18h
		cmp	dword ptr [edx+6Ch], 0Eh
		jbe	loc_401096
		xor	eax, eax
		cmp	dword ptr [edx+0E0h], 0
		setnz	al
		jmp	loc_401098
; ---------------------------------------------------------------------------
		align 10h

loc_401150:				; CODE XREF: sub_401060+8Cj
		mov	[esp+1Ch+var_1C], offset sub_401B60
		call	ds:__setusermatherr
		xor	eax, eax
		mov	ds:dword_405048, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401170:				; CODE XREF: sub_401060+C5j
		cmp	dword ptr [edx+74h], 0Eh
		jbe	loc_401096
		xor	eax, eax
		cmp	dword ptr [edx+0E8h], 0
		setnz	al
		jmp	loc_401098
sub_401060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401190	proc near		; CODE XREF: start+15j	.text:00401515j

dwMilliseconds	= dword	ptr -0B8h
lpProcName	= dword	ptr -0B4h
Size		= dword	ptr -0B0h
var_9D		= byte ptr -9Dh
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
StartupInfo	= _STARTUPINFOA	ptr -5Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		mov	ecx, 11h
		push	edi
		push	esi
		push	ebx
		lea	edx, [ebp+StartupInfo]
		sub	esp, 0ACh
		mov	edi, edx
		rep stosd
		lea	eax, [esp+0B8h+var_9D]
		and	eax, 0FFFFFFF0h
		mov	dword ptr [eax], 0CCCCCCCCh
		mov	dword ptr [eax+4], 0CCCCCCCCh
		mov	dword ptr [eax+8], 0CCCCCCCCh
		mov	dword ptr [eax+0Ch], 0CCCCCCCCh
		mov	dword ptr [eax+10h], 0CCCCCCCCh
		mov	dword ptr [eax+14h], 0CCCCCCCCh
		mov	dword ptr [eax+18h], 0CCCCCCCCh
		mov	dword ptr [eax+1Ch], 0CCCCCCCCh
		and	esp, 0FFFFFFF0h
		mov	ebx, ds:dword_405040
		test	ebx, ebx
		jnz	loc_4014A2

loc_4011F9:				; CODE XREF: sub_401190+320j
		mov	eax, large fs:18h
		mov	esi, ds:Sleep
		mov	ebx, [eax+4]
		jmp	short loc_401224
; ---------------------------------------------------------------------------
		align 10h

loc_401210:				; CODE XREF: sub_401190+B1j
		cmp	eax, ebx
		jz	loc_401431
		mov	[esp+0B8h+dwMilliseconds], 3E8h	; dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_401224:				; CODE XREF: sub_401190+78j
		mov	[esp+0B8h+Size], 0
		mov	[esp+0B8h+lpProcName], ebx
		mov	[esp+0B8h+dwMilliseconds], offset dword_4053DC
		call	sub_402940
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_401210
		mov	eax, ds:dword_4053E0
		xor	ebx, ebx
		cmp	eax, 1
		jz	loc_401444

loc_401253:				; CODE XREF: sub_401190+2AEj
		mov	eax, ds:dword_4053E0
		test	eax, eax
		jz	loc_4014B5
		mov	ds:dword_405004, 1

loc_40126A:				; CODE XREF: sub_401190+343j
		mov	eax, ds:dword_4053E0
		cmp	eax, 1
		jz	loc_401460

loc_401278:				; CODE XREF: sub_401190+2C8j
		test	ebx, ebx
		jz	loc_401486

loc_401280:				; CODE XREF: sub_401190+2F0j
					; sub_401190+30Dj
		mov	eax, ds:off_404104
		test	eax, eax
		jz	short loc_4012A5
		mov	[esp+0B8h+Size], 0
		mov	[esp+0B8h+lpProcName], 2
		mov	[esp+0B8h+dwMilliseconds], 0
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_4012A5:				; CODE XREF: sub_401190+F7j
		call	sub_401D80
		mov	[esp+0B8h+dwMilliseconds], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	ds:dword_405008, eax
		call	sub_402330
		mov	[esp+0B8h+lpProcName], offset ProcName ; "_set_invalid_parameter_handler"
		mov	[esp+0B8h+dwMilliseconds], eax ; hModule
		call	ds:GetProcAddress
		sub	esp, 8
		test	eax, eax
		jz	short loc_4012E5
		mov	[esp+0B8h+dwMilliseconds], offset nullsub_1
		call	eax

loc_4012E5:				; CODE XREF: sub_401190+14Aj
		call	sub_402600
		mov	ecx, ds:dword_405040
		test	ecx, ecx
		jz	short loc_401354
		mov	eax, ds:_acmdln
		xor	ecx, ecx
		mov	eax, [eax]
		jmp	short loc_401310
; ---------------------------------------------------------------------------
		align 10h

loc_401300:				; CODE XREF: sub_401190+186j
		test	dl, dl
		setnz	dl
		test	cl, cl
		jz	short loc_40132D
		test	dl, dl
		jz	short loc_40132D

loc_40130D:				; CODE XREF: sub_401190+18Bj
					; sub_401190+190j
		add	eax, 1

loc_401310:				; CODE XREF: sub_401190+16Dj
		movzx	edx, byte ptr [eax]
		cmp	dl, 20h
		jle	short loc_401300
		cmp	dl, 22h
		jnz	short loc_40130D
		xor	ecx, 1
		jmp	short loc_40130D
; ---------------------------------------------------------------------------

loc_401322:				; CODE XREF: sub_401190+19Fj
		add	eax, 1
		movzx	edx, byte ptr [eax]
		cmp	dl, 20h
		jg	short loc_401331

loc_40132D:				; CODE XREF: sub_401190+177j
					; sub_401190+17Bj
		test	dl, dl
		jnz	short loc_401322

loc_401331:				; CODE XREF: sub_401190+19Bj
		test	byte ptr [ebp+StartupInfo.dwFlags], 1
		mov	ds:dword_4053C8, eax
		mov	eax, 0Ah
		mov	ds:dword_4053D0, 400000h
		jnz	loc_401428

loc_40134F:				; CODE XREF: sub_401190+29Cj
		mov	ds:dword_4053CC, eax

loc_401354:				; CODE XREF: sub_401190+162j
		mov	eax, ds:dword_405010
		xor	ebx, ebx
		mov	[ebp+var_6C], eax
		lea	eax, ds:4[eax*4]
		mov	[esp+0B8h+dwMilliseconds], eax ; Size
		call	malloc
		mov	edx, [ebp+var_6C]
		mov	edi, ds:dword_405014
		mov	[ebp+var_70], eax
		xor	eax, eax
		test	edx, edx
		jle	short loc_4013BD
		nop

loc_401380:				; CODE XREF: sub_401190+225j
		mov	eax, [edi+ebx*4]
		mov	[esp+0B8h+dwMilliseconds], eax ; Str
		call	strlen
		lea	esi, [eax+1]
		mov	[esp+0B8h+dwMilliseconds], esi ; Size
		call	malloc
		mov	edx, [ebp+var_70]
		mov	[edx+ebx*4], eax
		mov	edx, [edi+ebx*4]
		add	ebx, 1
		mov	[esp+0B8h+Size], esi ; Size
		mov	[esp+0B8h+dwMilliseconds], eax ; Dst
		mov	[esp+0B8h+lpProcName], edx ; Src
		call	memcpy
		cmp	[ebp+var_6C], ebx
		jg	short loc_401380
		mov	eax, [ebp+var_6C]
		shl	eax, 2

loc_4013BD:				; CODE XREF: sub_401190+1EDj
		mov	edx, [ebp+var_70]
		mov	ds:dword_405014, edx
		mov	dword ptr [edx+eax], 0
		mov	eax, ds:__initenv
		mov	edx, ds:dword_405018
		mov	[eax], edx
		mov	eax, ds:dword_405018
		mov	[esp+0B8h+Size], eax
		mov	eax, ds:dword_405014
		mov	[esp+0B8h+lpProcName], eax
		mov	eax, ds:dword_405010
		mov	[esp+0B8h+dwMilliseconds], eax
		call	sub_401700
		mov	esi, ds:dword_405020
		test	esi, esi
		mov	ds:dword_40500C, eax
		jz	loc_4014D8
		mov	ebx, ds:dword_405004
		test	ebx, ebx
		jnz	short loc_401420
		call	_cexit
		mov	eax, ds:dword_40500C

loc_401420:				; CODE XREF: sub_401190+284j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401428:				; CODE XREF: sub_401190+1B9j
		movzx	eax, [ebp+StartupInfo.wShowWindow]
		jmp	loc_40134F
; ---------------------------------------------------------------------------

loc_401431:				; CODE XREF: sub_401190+82j
		mov	eax, ds:dword_4053E0
		mov	ebx, 1
		cmp	eax, 1
		jnz	loc_401253

loc_401444:				; CODE XREF: sub_401190+BDj
		mov	[esp+0B8h+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, ds:dword_4053E0
		cmp	eax, 1
		jnz	loc_401278
		xchg	ax, ax

loc_401460:				; CODE XREF: sub_401190+E2j
		mov	[esp+0B8h+lpProcName], offset dword_407008
		mov	[esp+0B8h+dwMilliseconds], offset dword_407000
		call	_initterm
		test	ebx, ebx
		mov	ds:dword_4053E0, 2
		jnz	loc_401280

loc_401486:				; CODE XREF: sub_401190+EAj
		mov	[esp+0B8h+lpProcName], 0
		mov	[esp+0B8h+dwMilliseconds], offset dword_4053DC
		call	sub_402970
		sub	esp, 8
		jmp	loc_401280
; ---------------------------------------------------------------------------

loc_4014A2:				; CODE XREF: sub_401190+63j
		mov	[esp+0B8h+dwMilliseconds], edx ; lpStartupInfo
		call	ds:GetStartupInfoA
		sub	esp, 4
		xchg	ax, ax
		jmp	loc_4011F9
; ---------------------------------------------------------------------------

loc_4014B5:				; CODE XREF: sub_401190+CAj
		mov	ds:dword_4053E0, 1
		mov	[esp+0B8h+lpProcName], offset dword_407018
		mov	[esp+0B8h+dwMilliseconds], offset dword_40700C
		call	_initterm
		jmp	loc_40126A
; ---------------------------------------------------------------------------

loc_4014D8:				; CODE XREF: sub_401190+276j
		mov	[esp+0B8h+dwMilliseconds], eax ; Code
		call	exit
sub_401190	endp


; =============== S U B	R O U T	I N E =======================================


		public start
start		proc near
		sub	esp, 0Ch
		mov	ds:dword_405040, 0
		call	sub_402530
		add	esp, 0Ch
		jmp	sub_401190
start		endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	ds:dword_405040, 1
		call	sub_402530
		add	esp, 0Ch
		jmp	sub_401190
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *ExceptionInfo)
TopLevelExceptionFilter	proc near	; DATA XREF: sub_401190+11Ao

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
ExceptionInfo	= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+ExceptionInfo]
		mov	eax, [ebx]
		mov	eax, [eax]
		cmp	eax, 0C0000091h
		ja	short loc_401577
		cmp	eax, 0C000008Dh
		jb	short loc_4015A3

loc_40153B:				; CODE XREF: TopLevelExceptionFilter+6Aj
		mov	esi, 1

loc_401540:				; CODE XREF: TopLevelExceptionFilter+C6j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], 8
		call	signal
		cmp	eax, 1
		jz	loc_401663
		test	eax, eax
		jz	short loc_40158C
		mov	[esp+1Ch+var_1C], 8
		call	eax
		mov	eax, 0FFFFFFFFh

loc_40156F:				; CODE XREF: TopLevelExceptionFilter+76j
					; TopLevelExceptionFilter+120j	...
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_401577:				; CODE XREF: TopLevelExceptionFilter+12j
		cmp	eax, 0C0000094h
		jz	short loc_4015E4
		cmp	eax, 0C0000096h
		jz	short loc_4015B1
		cmp	eax, 0C0000093h
		jz	short loc_40153B

loc_40158C:				; CODE XREF: TopLevelExceptionFilter+3Fj
					; TopLevelExceptionFilter+8Fj ...
		mov	edx, ds:dword_405008
		xor	eax, eax
		test	edx, edx
		jz	short loc_40156F
		mov	[esp+1Ch+ExceptionInfo], ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	edx
; ---------------------------------------------------------------------------

loc_4015A3:				; CODE XREF: TopLevelExceptionFilter+19j
		cmp	eax, 0C0000005h
		jz	short loc_4015F0
		cmp	eax, 0C000001Dh
		jnz	short loc_40158C

loc_4015B1:				; CODE XREF: TopLevelExceptionFilter+63j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], 4
		call	signal
		cmp	eax, 1
		jz	short loc_401627
		test	eax, eax
		jz	short loc_40158C
		mov	[esp+1Ch+var_1C], 4
		call	eax
		add	esp, 14h
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_4015E4:				; CODE XREF: TopLevelExceptionFilter+5Cj
		xor	esi, esi
		jmp	loc_401540
; ---------------------------------------------------------------------------
		align 10h

loc_4015F0:				; CODE XREF: TopLevelExceptionFilter+88j
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], 0Bh
		call	signal
		cmp	eax, 1
		jz	short loc_401645
		test	eax, eax
		jz	loc_40158C
		mov	[esp+1Ch+var_1C], 0Bh
		call	eax
		add	esp, 14h
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_401627:				; CODE XREF: TopLevelExceptionFilter+A8j
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], 4
		call	signal
		mov	eax, 0FFFFFFFFh
		jmp	loc_40156F
; ---------------------------------------------------------------------------

loc_401645:				; CODE XREF: TopLevelExceptionFilter+E7j
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], 0Bh
		call	signal
		mov	eax, 0FFFFFFFFh
		jmp	loc_40156F
; ---------------------------------------------------------------------------

loc_401663:				; CODE XREF: TopLevelExceptionFilter+37j
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], 8
		call	signal
		test	esi, esi
		mov	eax, 0FFFFFFFFh
		jz	loc_40156F
		call	sub_402600
		mov	eax, 0FFFFFFFFh
		xchg	ax, ax
		jmp	loc_40156F
TopLevelExceptionFilter	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4016A0	proc near		; CODE XREF: sub_402A80+6p

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_403020
		test	eax, eax
		jz	short locret_4016EB
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcj_s.dll"
		call	ds:GetModuleHandleA
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_4016DE
		mov	[esp+18h+lpProcName], offset a_jv_registercl ; "_Jv_RegisterClasses"
		mov	[esp+18h+lpModuleName],	edx ; hModule
		call	ds:GetProcAddress
		sub	esp, 8

loc_4016DE:				; CODE XREF: sub_4016A0+28j
		test	eax, eax
		jz	short locret_4016EB
		mov	[esp+18h+lpModuleName],	offset dword_403020
		call	eax

locret_4016EB:				; CODE XREF: sub_4016A0+Dj
					; sub_4016A0+40j
		leave
		retn
sub_4016A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4016F0()
sub_4016F0	proc near		; DATA XREF: sub_402A80+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4016F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401700	proc near		; CODE XREF: sub_401190+264p

VarName		= dword	ptr -8C4h
lpFilename	= dword	ptr -8C0h
nSize		= dword	ptr -8BCh
lpThreadAttributes= dword ptr -8B8h
bInheritHandles	= dword	ptr -8B4h
dwCreationFlags	= dword	ptr -8B0h
lpEnvironment	= dword	ptr -8ACh
lpCurrentDirectory= dword ptr -8A8h
lpStartupInfo	= dword	ptr -8A4h
lpProcessInformation= dword ptr	-8A0h
Dest		= word ptr -890h
Filename	= word ptr -47Eh
StartupInfo	= _STARTUPINFOW	ptr -6Ch
ProcessInformation= _PROCESS_INFORMATION ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
var_s0		= dword	ptr  0
arg_0		= byte ptr  0Ch

		lea	ecx, [esp-8+arg_0]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		sub	esp, 8C8h
		mov	[esp+8C4h+var_C], ecx
		mov	[esp+8C4h+var_4], esi
		xor	esi, esi
		mov	[esp+8C4h+var_8], ebx
		mov	[esp+8C4h+var_s0], edi
		call	sub_4026A0
		mov	[esp+8C4h+VarName], offset VarName ; "DBUS_VERBOSE"
		call	getenv
		test	eax, eax
		jz	short loc_40174F
		cmp	byte ptr [eax],	0
		setnz	al
		movzx	esi, al

loc_40174F:				; CODE XREF: sub_401700+44j
		lea	ebx, [ebp+Filename]
		mov	[esp+8C4h+nSize], 209h ; nSize
		mov	[esp+8C4h+lpFilename], ebx ; lpFilename
		mov	[esp+8C4h+VarName], 0 ;	hModule
		call	ds:GetModuleFileNameW
		sub	esp, 0Ch
		mov	[esp+8C4h+lpFilename], 5Ch ; Ch
		mov	[esp+8C4h+VarName], ebx	; Str
		call	wcsrchr
		test	eax, eax
		jz	loc_401900
		mov	word ptr [eax+2], 0
		mov	[esp+8C4h+lpFilename], offset Source ; "dbus-daemon.exe"
		mov	[esp+8C4h+VarName], ebx	; Dest
		call	wcscat
		lea	eax, [ebp+Dest]
		mov	[ebp+Dest], 0
		mov	[esp+8C4h+lpFilename], ebx ; Source
		mov	[esp+8C4h+VarName], eax	; Dest
		call	wcscpy
		lea	eax, [ebp+Dest]
		mov	[esp+8C4h+lpFilename], offset aSession ; " --session"
		mov	[esp+8C4h+VarName], eax	; Dest
		call	wcscat
		test	esi, esi
		jnz	loc_4018A0
		lea	edx, [ebp+StartupInfo]
		mov	ecx, 11h
		mov	edi, edx
		mov	eax, esi
		rep stosd
		mov	[ebp+ProcessInformation.hProcess], 0
		mov	[ebp+ProcessInformation.hThread], 0
		mov	[ebp+ProcessInformation.dwProcessId], 0
		mov	[ebp+ProcessInformation.dwThreadId], 0
		mov	[ebp+StartupInfo.cb], 44h
		mov	cl, 28h

loc_40180B:				; CODE XREF: sub_401700+1F5j
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+8C4h+lpProcessInformation], eax ; lpProcessInformation
		lea	eax, [ebp+Dest]
		mov	[esp+8C4h+lpStartupInfo], edx ;	lpStartupInfo
		mov	[esp+8C4h+lpCurrentDirectory], 0 ; lpCurrentDirectory
		mov	[esp+8C4h+lpEnvironment], 0 ; lpEnvironment
		mov	[esp+8C4h+dwCreationFlags], ecx	; dwCreationFlags
		mov	[esp+8C4h+bInheritHandles], 1 ;	bInheritHandles
		mov	[esp+8C4h+lpThreadAttributes], 0 ; lpThreadAttributes
		mov	[esp+8C4h+nSize], 0 ; lpProcessAttributes
		mov	[esp+8C4h+lpFilename], eax ; lpCommandLine
		mov	[esp+8C4h+VarName], ebx	; lpApplicationName
		call	ds:CreateProcessW
		sub	esp, 28h
		test	eax, eax
		jnz	loc_401940
		test	esi, esi
		mov	al, 4
		jz	short loc_40188D
		call	ds:GetLastError
		mov	[esp+8C4h+lpFilename], offset Format ; "Could not start	dbus-daemon. error=%d\n"
		mov	[esp+8C4h+nSize], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+8C4h+VarName], eax	; File
		call	fprintf
		mov	eax, 4

loc_40188D:				; CODE XREF: sub_401700+164j
					; sub_401700+207j ...
		mov	ecx, [ebp+var_10]
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		lea	esp, [ecx-4]
		retn
; ---------------------------------------------------------------------------

loc_4018A0:				; CODE XREF: sub_401700+D2j
		lea	eax, [ebp+Dest]
		mov	[esp+8C4h+nSize], eax
		mov	eax, ds:_iob
		mov	[esp+8C4h+lpFilename], offset aLs ; "%ls\n"
		add	eax, 40h
		mov	[esp+8C4h+VarName], eax	; File
		call	fprintf
		lea	edx, [ebp+StartupInfo]
		mov	ecx, 11h
		xor	eax, eax
		mov	edi, edx
		rep stosd
		mov	[ebp+ProcessInformation.hProcess], 0
		mov	[ebp+ProcessInformation.hThread], 0
		mov	[ebp+ProcessInformation.dwProcessId], 0
		mov	[ebp+ProcessInformation.dwThreadId], 0
		mov	[ebp+StartupInfo.cb], 44h
		mov	cl, 30h
		jmp	loc_40180B
; ---------------------------------------------------------------------------
		align 10h

loc_401900:				; CODE XREF: sub_401700+83j
		test	esi, esi
		mov	eax, 1
		jz	short loc_40188D
		mov	eax, ds:_iob
		mov	[esp+8C4h+nSize], 48h ;	Count
		mov	[esp+8C4h+lpFilename], 1 ; Size
		mov	[esp+8C4h+VarName], offset aErrorCouldNotE ; "error: could not extract path from curr"...
		add	eax, 40h
		mov	[esp+8C4h+lpThreadAttributes], eax ; File
		call	fwrite
		mov	eax, 1
		jmp	loc_40188D
; ---------------------------------------------------------------------------
		align 10h

loc_401940:				; CODE XREF: sub_401700+15Aj
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	ebx, ds:CloseHandle
		mov	[esp+8C4h+VarName], eax	; hObject
		call	ebx ; CloseHandle
		mov	eax, [ebp+ProcessInformation.hThread]
		sub	esp, 4
		mov	[esp+8C4h+VarName], eax	; hObject
		call	ebx ; CloseHandle
		xor	eax, eax
		sub	esp, 4
		jmp	loc_40188D
sub_401700	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:00407024o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_4019A0
		cmp	eax, 3
		jz	short loc_4019A0
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_4019A0:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_402740
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_401190+110p
					; DATA XREF: .rdata:off_404104o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_403014, 2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_4019EB
		mov	dword_403014, 2

loc_4019EB:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_401A01
		cmp	eax, 1
		jz	short loc_401A30

loc_4019F5:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401A01:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_407030
		cmp	ebx, offset dword_407030
		jz	short loc_4019F5
		xchg	ax, ax

loc_401A10:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_401A18
		call	eax

loc_401A18:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_407030
		jnz	short loc_401A10
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_401A30:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_402740
		jmp	short loc_4019F5
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401A50	proc near		; DATA XREF: .CRT:00407014o
		sub	esp, 0Ch
		mov	eax, ds:__lconv_init
		add	esp, 0Ch
		jmp	eax
sub_401A50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401A60	proc near		; CODE XREF: sub_401A80+10p
					; sub_401A80+36p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_401A60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401A70	proc near		; CODE XREF: sub_401060+5Ap
					; sub_401A80+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_401A70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_401A80(_onexit_t)
sub_401A80	proc near		; CODE XREF: sub_401B40+Ap

Func		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_4053D8
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax
		call	sub_401A60
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_10], eax
		jz	loc_401B20
		mov	[esp+2Ch+Func],	8
		call	_lock
		mov	eax, ds:dword_4053D8
		mov	[esp+2Ch+Func],	eax
		call	sub_401A60
		mov	[esp+2Ch+var_10], eax
		mov	eax, ds:dword_4053D4
		mov	[esp+2Ch+Func],	eax
		call	sub_401A60
		mov	[esp+2Ch+Func],	ebx
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Func],	eax
		call	sub_401A70
		mov	ds:dword_4053D8, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+Func],	eax
		call	sub_401A70
		mov	[esp+2Ch+Func],	8
		mov	ds:dword_4053D4, eax
		call	_unlock
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401B20:				; CODE XREF: sub_401A80+1Cj
		mov	[esp+2Ch+Func],	ebx ; Func
		call	ds:_onexit
		add	esp, 28h
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_401A80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_401B40(_onexit_t)
sub_401B40	proc near		; CODE XREF: sub_4026A0-2Fp
					; sub_402A80+12p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_401A80
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_401B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401B60	proc near		; DATA XREF: sub_401060:loc_401150o

File		= dword	ptr -3Ch
Format		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= qword	ptr -2Ch
var_24		= qword	ptr -24h
var_1C		= qword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	edx, offset aUnknownError ; "Unknown error"
		mov	eax, [esp+3Ch+arg_0]
		mov	ecx, [eax]
		sub	ecx, 1
		cmp	ecx, 5
		ja	short loc_401B7D
		mov	edx, ds:off_404224[ecx*4]

loc_401B7D:				; CODE XREF: sub_401B60+14j
		fld	qword ptr [eax+18h]
		fstp	[esp+3Ch+var_1C]
		fld	qword ptr [eax+10h]
		fstp	[esp+3Ch+var_24]
		fld	qword ptr [eax+8]
		fstp	[esp+3Ch+var_2C]
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+Format], offset a_matherrSInSGG ; "_matherr():	%s in %s(%g, %g)  (retval=%"...
		mov	[esp+3Ch+var_30], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+3Ch+File],	eax ; File
		call	fprintf
		xor	eax, eax
		add	esp, 3Ch
		retn
sub_401B60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401BC0	proc near		; CODE XREF: sub_401060+76p
		xor	eax, eax
		retn
sub_401BC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_401BD0(char *Format, char ArgList)
sub_401BD0	proc near		; CODE XREF: sub_401C30+131p
					; sub_401C30+141p ...

Str		= dword	ptr -1Ch
Size		= dword	ptr -18h
Count		= dword	ptr -14h
File		= dword	ptr -10h
Format		= dword	ptr  4
ArgList		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+Count], 1Bh ; Count
		lea	ebx, [esp+1Ch+ArgList]
		mov	[esp+1Ch+Size],	1 ; Size
		mov	[esp+1Ch+Str], offset aMingwW64Runtim ;	"Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	fwrite
		mov	eax, [esp+1Ch+Format]
		mov	[esp+1Ch+Count], ebx ; ArgList
		mov	[esp+1Ch+Size],	eax ; Format
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+Str], eax ; File
		call	vfprintf
		call	abort
sub_401BD0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_401C30
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_401C30(size_t Size)
sub_401C30	proc near		; CODE XREF: .text:00401C21j
					; sub_401D80+12Ap ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
Src		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+5Ch+Src], edx
		jnz	short loc_401C50
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401C50:				; CODE XREF: sub_401C30+11j
		mov	ecx, ds:dword_405050
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_401C80
		mov	eax, ds:dword_40504C

loc_401C61:				; CODE XREF: sub_401C30+4Ej
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_401C76
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_401CF9

loc_401C76:				; CODE XREF: sub_401C30+36j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_401C61

loc_401C80:				; CODE XREF: sub_401C30+2Aj
		mov	[esp+5Ch+lpAddress], ebx
		call	sub_402080
		test	eax, eax
		mov	ebp, eax
		jz	loc_401D66
		lea	edx, [esi+esi*2]
		mov	esi, ds:dword_40504C
		shl	edx, 2
		mov	[esp+5Ch+var_44], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	sub_4021A0
		mov	edx, [esp+5Ch+var_44]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	eax, ds:dword_40504C
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+5Ch+var_44]
		jz	short loc_401D46
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_401D15

loc_401CF2:				; CODE XREF: sub_401C30+E8j
					; sub_401C30+114j
		add	ds:dword_405050, 1

loc_401CF9:				; CODE XREF: sub_401C30+40j
		mov	eax, [esp+5Ch+Src]
		mov	[esp+5Ch+dwLength], edi	; Size
		mov	[esp+5Ch+lpAddress], ebx ; Dst
		mov	[esp+5Ch+lpBuffer], eax	; Src
		call	memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401D15:				; CODE XREF: sub_401C30+C0j
		cmp	eax, 40h
		jz	short loc_401CF2
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		add	edx, ds:dword_40504C
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpflOldProtect], edx ;	lpflOldProtect
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_401CF2
; ---------------------------------------------------------------------------

loc_401D46:				; CODE XREF: sub_401C30+B7j
		mov	eax, ds:dword_40504C
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ebp+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		call	sub_401BD0
; ---------------------------------------------------------------------------

loc_401D66:				; CODE XREF: sub_401C30+5Cj
		mov	[esp+5Ch+lpBuffer], ebx	; ArgList
		mov	[esp+5Ch+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_401BD0
sub_401C30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401D80	proc near		; CODE XREF: sub_401190:loc_4012A5p

lpAddress	= dword	ptr -58h
lpBuffer	= dword	ptr -54h
dwLength	= dword	ptr -50h
lpflOldProtect	= dword	ptr -4Ch
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_405054
		test	ebx, ebx
		jz	short loc_401DA0

loc_401D93:				; CODE XREF: sub_401D80+64j
					; sub_401D80+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401DA0:				; CODE XREF: sub_401D80+11j
		mov	ds:dword_405054, 1
		call	sub_4020F0
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_4028E0
		mov	ds:dword_405050, 0
		lea	eax, [esp+58h+Buffer.BaseAddress+3]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_40504C, eax
		mov	eax, offset dword_40432C
		sub	eax, offset dword_40432C
		cmp	eax, 7
		jle	short loc_401D93
		cmp	eax, 0Bh
		mov	ebx, offset dword_40432C
		jle	short loc_401E12
		mov	ecx, ds:dword_40432C
		test	ecx, ecx
		jnz	short loc_401E12
		mov	edx, ds:dword_404330
		test	edx, edx
		jnz	short loc_401E12
		mov	eax, ds:dword_404334
		test	eax, eax
		jnz	short loc_401E12
		mov	ebx, offset dword_404338

loc_401E12:				; CODE XREF: sub_401D80+6Ej
					; sub_401D80+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_401E80
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_401E80
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_401FE3
		add	ebx, 0Ch
		cmp	ebx, offset dword_40432C
		jnb	loc_401D93
		mov	esi, 400000h

loc_401E3F:				; CODE XREF: sub_401D80+217j
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_401F3D
		cmp	edx, 20h
		jz	loc_401F7A
		cmp	edx, 8
		jz	loc_401F5C
		mov	[ebp+var_1C], 0
		mov	[esp+58h+lpBuffer], edx	; ArgList
		mov	[esp+58h+lpAddress], offset aUnknownPseudoR ; "	 Unknown pseudo	relocation bit size %d"...
		call	sub_401BD0
; ---------------------------------------------------------------------------

loc_401E80:				; CODE XREF: sub_401D80+96j
					; sub_401D80+9Dj
		cmp	ebx, offset dword_40432C
		jnb	loc_401D93
		mov	esi, 400000h
		lea	edi, [ebp+flOldProtect]

loc_401E94:				; CODE XREF: sub_401D80+135j
		mov	eax, [ebx+4]
		mov	ecx, 4		; Size
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	sub_401C30
		cmp	ebx, offset dword_40432C
		jb	short loc_401E94

loc_401EB7:				; CODE XREF: sub_401D80+21Dj
		mov	ecx, ds:dword_405050
		test	ecx, ecx
		jle	loc_401D93
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_401EE2
; ---------------------------------------------------------------------------
		align 10h

loc_401ED0:				; CODE XREF: sub_401D80+16Dj
					; sub_401D80+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:dword_405050
		jge	loc_401D93

loc_401EE2:				; CODE XREF: sub_401D80+14Cj
		mov	eax, ds:dword_40504C
		add	eax, ebx
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_401ED0
		lea	edx, [ebp+Buffer]
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	eax, [eax+4]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_401FC0
		mov	eax, ds:dword_40504C
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	eax, [eax+ebx]
		mov	[esp+58h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_401ED0
; ---------------------------------------------------------------------------

loc_401F3D:				; CODE XREF: sub_401D80+D1j
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_401FB1
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_401F4D:				; CODE XREF: sub_401D80+23Ej
		mov	ecx, 2		; Size
		lea	edx, [ebp+var_1C]
		call	sub_401C30
		jmp	short loc_401F8E
; ---------------------------------------------------------------------------

loc_401F5C:				; CODE XREF: sub_401D80+E3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_401FA2
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_401F6B:				; CODE XREF: sub_401D80+22Fj
		mov	ecx, 1		; Size
		lea	edx, [ebp+var_1C]
		call	sub_401C30
		jmp	short loc_401F8E
; ---------------------------------------------------------------------------

loc_401F7A:				; CODE XREF: sub_401D80+DAj
		add	edi, [eax]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4		; Size
		mov	[ebp+var_1C], edi
		call	sub_401C30

loc_401F8E:				; CODE XREF: sub_401D80+1DAj
					; sub_401D80+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset dword_40432C
		jb	loc_401E3F
		jmp	loc_401EB7
; ---------------------------------------------------------------------------

loc_401FA2:				; CODE XREF: sub_401D80+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_401F6B
; ---------------------------------------------------------------------------

loc_401FB1:				; CODE XREF: sub_401D80+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_401F4D
; ---------------------------------------------------------------------------

loc_401FC0:				; CODE XREF: sub_401D80+18Fj
		add	ebx, ds:dword_40504C
		mov	eax, [ebx+4]
		mov	[esp+58h+dwLength], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_401BD0
; ---------------------------------------------------------------------------

loc_401FE3:				; CODE XREF: sub_401D80+A5j
		mov	[esp+58h+lpBuffer], eax	; ArgList
		mov	[esp+58h+lpAddress], offset aUnknownPseud_0 ; "	 Unknown pseudo	relocation protocol ve"...
		call	sub_401BD0
sub_401D80	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_402010

loc_40200B:				; CODE XREF: .text:00402019j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402010:				; CODE XREF: .text:00402009j
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_40200B
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		mov	eax, [esp+0Ch]
		mov	ebx, [esp+10h]
		add	eax, [eax+3Ch]
		movzx	esi, word ptr [eax+6]
		movzx	edx, word ptr [eax+14h]
		test	esi, esi
		jz	short loc_40206C
		movzx	edx, dx
		lea	eax, [eax+edx+18h]
		xor	edx, edx
		jmp	short loc_402057
; ---------------------------------------------------------------------------

loc_402054:				; CODE XREF: .text:0040206Aj
		add	eax, 28h

loc_402057:				; CODE XREF: .text:00402052j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_402065
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_40206E

loc_402065:				; CODE XREF: .text:0040205Cj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_402054

loc_40206C:				; CODE XREF: .text:00402047j
		xor	eax, eax

loc_40206E:				; CODE XREF: .text:00402063j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_402080
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402080	proc near		; CODE XREF: sub_401C30+53p
					; .text:00402071j

arg_0		= dword	ptr  4

		cmp	word ptr ds:400000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_402092

loc_40208D:				; CODE XREF: sub_402080+27j
					; sub_402080+2Fj ...
		xor	eax, eax

loc_40208F:				; CODE XREF: sub_402080+61j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_402092:				; CODE XREF: sub_402080+Bj
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_40208D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_40208D
		mov	ebx, [esp+8+arg_0]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 400000h
		test	esi, esi
		jz	short loc_40208D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_4020D5
; ---------------------------------------------------------------------------

loc_4020D2:				; CODE XREF: sub_402080+68j
		add	eax, 28h

loc_4020D5:				; CODE XREF: sub_402080+50j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_4020E3
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_40208F

loc_4020E3:				; CODE XREF: sub_402080+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_4020D2
		jmp	short loc_40208D
sub_402080	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4020F0	proc near		; CODE XREF: sub_401D80+2Ap
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_402100

loc_4020FB:				; CODE XREF: sub_4020F0+25j
					; sub_4020F0+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402100:				; CODE XREF: sub_4020F0+9j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_4020FB
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_4020FB
		movzx	eax, word ptr [edx+6]
		retn
sub_4020F0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:400000h, 5A4Dh
		push	ebx
		mov	edx, [esp+8]
		jz	short loc_402144

loc_402140:				; CODE XREF: .text:00402159j
					; .text:00402161j ...
		xor	eax, eax

loc_402142:				; CODE XREF: .text:0040218Bj
					; .text:00402199j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_402144:				; CODE XREF: .text:0040213Ej
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	ecx, [eax+400000h]
		jnz	short loc_402140
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_402140
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_402140
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
		xor	ecx, ecx
		jmp	short loc_402183
; ---------------------------------------------------------------------------
		align 10h

loc_402180:				; CODE XREF: .text:00402195j
		add	eax, 28h

loc_402183:				; CODE XREF: .text:00402178j
		test	byte ptr [eax+27h], 20h
		jz	short loc_402190
		test	edx, edx
		jz	short loc_402142
		sub	edx, 1

loc_402190:				; CODE XREF: .text:00402187j
		add	ecx, 1
		cmp	ecx, ebx
		jb	short loc_402180
		xor	eax, eax
		jmp	short loc_402142
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4021A0	proc near		; CODE XREF: sub_401C30+7Dp
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_4021B0

loc_4021AB:				; CODE XREF: sub_4021A0+25j
		xor	eax, eax

locret_4021AD:				; CODE XREF: sub_4021A0+32j
					; sub_4021A0+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_4021B0:				; CODE XREF: sub_4021A0+9j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_4021AB
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 400000h
		jz	short locret_4021AD
		xor	eax, eax
		jmp	short locret_4021AD
sub_4021A0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:400000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_4021F2

loc_4021ED:				; CODE XREF: .text:00402207j
					; .text:0040220Fj ...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4021F2:				; CODE XREF: .text:004021EBj
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_4021ED
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_4021ED
		mov	ebx, [esp+0Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 400000h
		test	esi, esi
		jz	short loc_4021ED
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_402235
; ---------------------------------------------------------------------------

loc_402232:				; CODE XREF: .text:00402248j
		add	eax, 28h

loc_402235:				; CODE XREF: .text:00402230j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_402243
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_402250

loc_402243:				; CODE XREF: .text:0040223Aj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_402232
		jmp	short loc_4021ED
; ---------------------------------------------------------------------------
		align 10h

loc_402250:				; CODE XREF: .text:00402241j
		test	eax, eax
		jz	short loc_4021ED
		mov	eax, [eax+24h]
		pop	ebx
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402260	proc near		; CODE XREF: sub_402330+58p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:400000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_402290

loc_40227D:				; CODE XREF: sub_402260+46j
					; sub_402260+4Ej ...
		xor	eax, eax

loc_40227F:				; CODE XREF: sub_402260+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402290:				; CODE XREF: sub_402260+1Bj
		mov	edx, ds:40003Ch
		cmp	dword ptr [edx+400000h], 4550h
		lea	ecx, [edx+400000h]
		jnz	short loc_40227D
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_40227D
		mov	esi, [ecx+80h]
		test	esi, esi
		jz	short loc_40227D
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_40227D
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
		xor	ecx, ecx
		jmp	short loc_4022D4
; ---------------------------------------------------------------------------

loc_4022D1:				; CODE XREF: sub_402260+87j
		add	edx, 28h

loc_4022D4:				; CODE XREF: sub_402260+6Fj
		mov	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_4022E2
		add	ebx, [edx+8]
		cmp	esi, ebx
		jb	short loc_4022EB

loc_4022E2:				; CODE XREF: sub_402260+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_4022D1
		jmp	short loc_40227D
; ---------------------------------------------------------------------------

loc_4022EB:				; CODE XREF: sub_402260+80j
		test	edx, edx
		lea	esi, [esi+0]
		jz	short loc_40227D
		add	esi, 400000h
		jmp	short loc_40230A
; ---------------------------------------------------------------------------
		align 10h

loc_402300:				; CODE XREF: sub_402260+AFj
					; sub_402260+B6j
		test	eax, eax
		jle	short loc_402320
		sub	eax, 1
		add	esi, 14h

loc_40230A:				; CODE XREF: sub_402260+98j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jnz	short loc_402300
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_402300
		jmp	loc_40227D
; ---------------------------------------------------------------------------
		align 10h

loc_402320:				; CODE XREF: sub_402260+A2j
		mov	eax, 400000h
		add	eax, [esi+0Ch]
		jmp	loc_40227F
sub_402260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402330	proc near		; CODE XREF: sub_401190+12Fp

lpModuleName	= dword	ptr -1Ch

		push	ebx
		xor	edx, edx
		sub	esp, 18h
		mov	eax, ds:dword_405058
		test	eax, eax
		jz	short loc_402382

loc_40233F:				; CODE XREF: sub_402330+9Fj
					; sub_402330+BAj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_402344:				; CODE XREF: sub_402330+83j
					; sub_402330+88j
		movzx	edx, byte ptr [eax+3]
		cmp	dl, 43h
		jz	short loc_402352
		cmp	dl, 63h
		jnz	short loc_402380

loc_402352:				; CODE XREF: sub_402330+1Bj
		movzx	edx, byte ptr [eax+4]
		cmp	dl, 52h
		jz	short loc_402362
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_402380

loc_402362:				; CODE XREF: sub_402330+29j
		movzx	edx, byte ptr [eax+5]
		cmp	dl, 54h
		jz	short loc_4023BE
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_4023BE
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_4023BE
		lea	esi, [esi+0]

loc_402380:				; CODE XREF: sub_402330+20j
					; sub_402330+30j ...
		mov	edx, ebx

loc_402382:				; CODE XREF: sub_402330+Dj
					; sub_402330+8Cj
		lea	ebx, [edx+1]
		mov	[esp+1Ch+lpModuleName],	edx
		call	sub_402260
		test	eax, eax
		jz	short loc_4023D5
		movzx	edx, byte ptr [eax]
		cmp	dl, 4Dh
		jz	short loc_40239E
		cmp	dl, 6Dh
		jnz	short loc_402380

loc_40239E:				; CODE XREF: sub_402330+67j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 53h
		jz	short loc_4023AC
		cmp	dl, 73h
		jnz	short loc_402380

loc_4023AC:				; CODE XREF: sub_402330+75j
		movzx	edx, byte ptr [eax+2]
		cmp	dl, 56h
		jz	short loc_402344
		cmp	dl, 76h
		jz	short loc_402344
		mov	edx, ebx
		jmp	short loc_402382
; ---------------------------------------------------------------------------

loc_4023BE:				; CODE XREF: sub_402330+39j
					; sub_402330+40j ...
		mov	[esp+1Ch+lpModuleName],	eax ; lpModuleName
		call	ds:GetModuleHandleA
		test	eax, eax
		push	ebx
		mov	ds:dword_405058, eax
		jnz	loc_40233F

loc_4023D5:				; CODE XREF: sub_402330+5Fj
		mov	[esp+1Ch+lpModuleName],	offset LibFileName ; "msvcrt.dll"
		call	ds:LoadLibraryW
		sub	esp, 4
		mov	ds:dword_405058, eax
		jmp	loc_40233F
sub_402330	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], esi
		mov	esi, [esp+30h]
		mov	[esp+1Ch], ebx
		mov	[esp+24h], edi
		mov	[esp+28h], ebp
		mov	[esp], esi
		call	strlen
		cmp	eax, 8
		jbe	short loc_402430

loc_402414:				; CODE XREF: .text:00402439j
					; .text:00402450j ...
		xor	ebx, ebx

loc_402416:				; CODE XREF: .text:0040248Aj
		mov	eax, ebx
		mov	esi, [esp+20h]
		mov	ebx, [esp+1Ch]
		mov	edi, [esp+24h]
		mov	ebp, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402430:				; CODE XREF: .text:00402412j
		cmp	word ptr ds:400000h, 5A4Dh
		jnz	short loc_402414
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_402414
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_402414
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_402414
		movzx	eax, ax
		xor	edi, edi
		lea	ebx, [edx+eax+18h]
		jmp	short loc_402474
; ---------------------------------------------------------------------------

loc_402471:				; CODE XREF: .text:00402491j
		add	ebx, 28h

loc_402474:				; CODE XREF: .text:0040246Fj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], esi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jz	short loc_402416
		add	edi, 1
		cmp	edi, ebp
		jb	short loc_402471
		jmp	loc_402414
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_405184, edx
		mov	ds:dword_405060, 0C0000409h
		mov	ds:dword_405064, 1
		mov	ds:dword_405178, eax
		mov	ds:dword_40506C, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_40516C, eax
		mov	eax, dword_403018
		mov	[ebp-10h], eax
		mov	eax, dword_40301C
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_404324
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402530	proc near		; CODE XREF: start+Dp .text:0040150Dp

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
PerformanceCount= LARGE_INTEGER	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, dword_403018
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_402570
		not	eax
		mov	dword_40301C, eax

loc_402556:				; CODE XREF: sub_402530+BDj
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402570:				; CODE XREF: sub_402530+1Dj
		lea	eax, [esp+4Ch+SystemTimeAsFileTime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	[esp+4Ch+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[esp+4Ch+SystemTimeAsFileTime.dwHighDateTime], 0
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	eax, [esp+4Ch+SystemTimeAsFileTime.dwHighDateTime]
		mov	ebp, [esp+4Ch+SystemTimeAsFileTime.dwLowDateTime]
		mov	[esp+4Ch+var_30], eax
		call	ds:GetCurrentProcessId
		mov	edi, eax
		call	ds:GetCurrentThreadId
		mov	esi, eax
		call	ds:GetTickCount
		mov	ebx, eax
		lea	eax, [esp+4Ch+PerformanceCount]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		sub	esp, 4
		xor	ebp, [esp+4Ch+var_30]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount+4]
		xor	ebp, edi
		xor	ebp, esi
		xor	ebp, ebx
		mov	eax, ebp
		cmp	ebp, 0BB40E64Eh
		not	eax
		jz	short loc_4025F2

loc_4025E2:				; CODE XREF: sub_402530+CBj
		mov	dword_403018, ebp
		mov	dword_40301C, eax
		jmp	loc_402556
; ---------------------------------------------------------------------------

loc_4025F2:				; CODE XREF: sub_402530+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_4025E2
sub_402530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402600	proc near		; CODE XREF: sub_401190:loc_4012E5p
					; TopLevelExceptionFilter+164p
		fninit
		retn
sub_402600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_402610()
sub_402610	proc near		; DATA XREF: sub_4026A0:loc_40266Ao
		sub	esp, 0Ch
		mov	eax, off_403010
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_402637
		xchg	ax, ax

loc_402620:				; CODE XREF: sub_402610+25j
		call	eax
		mov	eax, off_403010
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_403010, edx
		test	eax, eax
		jnz	short loc_402620

loc_402637:				; CODE XREF: sub_402610+Cj
		add	esp, 0Ch
		retn
sub_402610	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_4026A0

loc_402640:				; CODE XREF: sub_4026A0+1Ej
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:dword_402AA0
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_402680

loc_402650:				; CODE XREF: sub_4026A0-Cj
		test	ebx, ebx
		jz	short loc_40266A
		lea	esi, ds:402AA0h[ebx*4]
		nop
		lea	esi, [esi+0]

loc_402660:				; CODE XREF: sub_4026A0-38j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_402660

loc_40266A:				; CODE XREF: sub_4026A0-4Ej
		mov	[esp+1Ch+var_1C], offset sub_402610 ; _onexit_t
		call	sub_401B40
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_4026A0
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_4026A0

loc_402680:				; CODE XREF: sub_4026A0-52j
		xor	ebx, ebx
		jmp	short loc_402686
; ---------------------------------------------------------------------------

loc_402684:				; CODE XREF: sub_4026A0-Ej
		mov	ebx, eax

loc_402686:				; CODE XREF: sub_4026A0-1Ej
		lea	eax, [ebx+1]
		mov	edx, ds:dword_402AA0[eax*4]
		test	edx, edx
		jnz	short loc_402684
		jmp	short loc_402650
; END OF FUNCTION CHUNK	FOR sub_4026A0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4026A0	proc near		; CODE XREF: sub_401700+31p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 00402640 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 00402680 SIZE 00000016 BYTES

		sub	esp, 0Ch
		mov	ecx, ds:dword_4053A0
		test	ecx, ecx
		jz	short loc_4026B1
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_4026B1:				; CODE XREF: sub_4026A0+Bj
		mov	ds:dword_4053A0, 1
		add	esp, 0Ch
		jmp	short loc_402640
sub_4026A0	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_4026C0	proc near		; CODE XREF: sub_402740+13p
					; sub_402740:loc_402761p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_4053A4
		test	eax, eax
		jnz	short loc_4026D8
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4026D8:				; CODE XREF: sub_4026C0+Ej
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	ebx, ds:dword_4053C0
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_402725
		mov	ebp, ds:TlsGetValue
		mov	edi, ds:GetLastError
		xchg	ax, ax

loc_402700:				; CODE XREF: sub_4026C0+63j
		mov	eax, [ebx]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_40271E
		test	esi, esi
		jz	short loc_40271E
		mov	eax, [ebx+4]
		mov	[esp+2Ch+lpCriticalSection], esi
		call	eax

loc_40271E:				; CODE XREF: sub_4026C0+50j
					; sub_4026C0+54j
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_402700

loc_402725:				; CODE XREF: sub_4026C0+30j
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4026C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402740	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_402790
		jb	short loc_402761
		cmp	eax, 3
		jnz	short loc_402758
		call	sub_4026C0

loc_402758:				; CODE XREF: sub_402740+11j
					; sub_402740+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_402761:				; CODE XREF: sub_402740+Cj
		call	sub_4026C0
		mov	eax, ds:dword_4053A4
		cmp	eax, 1
		jnz	short loc_402758
		mov	ds:dword_4053A4, 0
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_402758
; ---------------------------------------------------------------------------
		align 10h

loc_402790:				; CODE XREF: sub_402740+Aj
		mov	eax, ds:dword_4053A4
		test	eax, eax
		jz	short loc_4027B0

loc_402799:				; CODE XREF: sub_402740+80j
		mov	ds:dword_4053A4, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4027B0:				; CODE XREF: sub_402740+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_402799
sub_402740	endp

; ---------------------------------------------------------------------------
		align 10h

loc_4027D0:				; CODE XREF: .text:004029B6j
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_4053A4
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_4027E8
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_4027E8:				; CODE XREF: .text:004027DFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_4053C0
		sub	esp, 4
		test	eax, eax
		jz	short loc_40281F
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_402816
		jmp	short loc_402856
; ---------------------------------------------------------------------------
		align 10h

loc_402810:				; CODE XREF: .text:0040281Dj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_402836

loc_402816:				; CODE XREF: .text:00402805j
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_402810

loc_40281F:				; CODE XREF: .text:004027FFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_40282F:				; CODE XREF: .text:00402854j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_402836:				; CODE XREF: .text:00402814j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_40283C:				; CODE XREF: .text:0040285Fj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_40282F
; ---------------------------------------------------------------------------

loc_402856:				; CODE XREF: .text:00402807j
		mov	edx, [eax+8]
		mov	ds:dword_4053C0, edx
		jmp	short loc_40283C
; ---------------------------------------------------------------------------
		jmp	short loc_402870
; ---------------------------------------------------------------------------
		align 10h

loc_402870:				; CODE XREF: .text:00402861j
					; .text:0040299Aj
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_4053A4
		test	eax, eax
		jnz	short loc_402882

loc_40287D:				; CODE XREF: .text:0040289Fj
					; .text:004028DEj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_402882:				; CODE XREF: .text:0040287Bj
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_40287D
		mov	eax, [esp+20h]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [esp+24h]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_4053C0
		mov	ds:dword_4053C0, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_40287D

; =============== S U B	R O U T	I N E =======================================


sub_4028E0	proc near		; CODE XREF: sub_401D80+3Cp

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_402901

loc_4028EC:				; CODE XREF: sub_4028E0+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_4028EC

loc_402901:				; CODE XREF: sub_4028E0+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
sub_4028E0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+0Ch]
		mov	edx, [esp+8]
		mov	ecx, [esp+4]
		lock cmpxchg [ecx], edx
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_402940
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402940	proc near		; CODE XREF: sub_401190+A7p
					; .text:00402931j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lock cmpxchg [ecx], edx
		retn	0Ch
sub_402940	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		lock xchg eax, [edx]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402970	proc near		; CODE XREF: sub_401190+305p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lock xchg eax, [edx]
		retn	8
sub_402970	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+14h]
		mov	edx, [esp+10h]
		test	eax, eax
		jz	short loc_4029A0
		mov	[esp+14h], eax
		mov	[esp+10h], edx
		add	esp, 0Ch
		jmp	loc_402870
; ---------------------------------------------------------------------------
		align 10h

loc_4029A0:				; CODE XREF: .text:0040298Dj
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	loc_4027D0
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getmainargs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __set_app_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _cexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getenv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wcsrchr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcscpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wcscat]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402A80	proc near		; DATA XREF: .text:00402AA4o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_4016A0
		mov	[esp+18h+var_18], offset sub_4016F0 ; _onexit_t
		call	sub_401B40
		leave
		retn
sub_402A80	endp

; ---------------------------------------------------------------------------
		align 10h
dword_402AA0	dd 0FFFFFFFFh		; DATA XREF: sub_4026A0-5Br
					; sub_4026A0-17r
		dd offset sub_402A80
		dd 0
		dd 0FFFFFFFFh
dword_402AB0	dd 54h dup(0)		; DATA XREF: .data:off_403010o
		dd 100h	dup(?)
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000024 (	 36.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 0FFFFFFFFh		; DATA XREF: sub_401010+25r
		dd 0FFh, 2 dup(0FFFFFFFFh)
off_403010	dd offset dword_402AB0	; DATA XREF: sub_402610+3r
					; sub_402610+12r ...
dword_403014	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w
dword_403018	dd 0BB40E64Eh		; DATA XREF: .text:004024DFr
					; sub_402530+3r ...
dword_40301C	dd 44BF19B1h		; DATA XREF: .text:004024E7r
					; sub_402530+21w ...
dword_403020	dd 0			; DATA XREF: sub_4016A0+6r
					; sub_4016A0+42o
		align 1000h
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 0000032C (	812.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00002200
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 404000h
; CHAR ProcName[]
ProcName	db '_set_invalid_parameter_handler',0 ; DATA XREF: sub_401190+134o
		align 10h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: sub_4016A0+Fo
; CHAR a_jv_registercl[]
a_jv_registercl	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_4016A0+2Ao
		align 4
; char VarName[]
VarName		db 'DBUS_VERBOSE',0     ; DATA XREF: sub_401700+36o
		align 4
; wchar_t Source
Source:					; DATA XREF: sub_401700+8Fo
		unicode	0, <dbus-daemon.exe>,0
; wchar_t aSession
aSession:				; DATA XREF: sub_401700+C0o
		unicode	0, < --session>,0
		align 4
aErrorCouldNotE	db 'error: could not extract path from current applications module fi'
					; DATA XREF: sub_401700+21Eo
		db 'lename',0Ah,0
; char aLs[]
aLs		db '%ls',0Ah,0          ; DATA XREF: sub_401700+1AFo
		align 4
; char Format[]
Format		db 'Could not start dbus-daemon. error=%d',0Ah,0
					; DATA XREF: sub_401700+16Co
		align 4
off_404104	dd offset TlsCallback_0	; DATA XREF: sub_401190:loc_401280r
aUnknownError	db 'Unknown error',0    ; DATA XREF: sub_401B60+3o
		align 4
; char a_matherrSInSGG[]
a_matherrSInSGG	db '_matherr(): %s in %s(%g, %g)  (retval=%g)',0Ah,0
					; DATA XREF: sub_401B60+39o
		align 4
aArgumentDomain	db 'Argument domain error (DOMAIN)',0 ; DATA XREF: .rdata:off_404224o
aArgumentSingul	db 'Argument singularity (SIGN)',0 ; DATA XREF: .rdata:00404228o
		align 10h
aOverflowRangeE	db 'Overflow range error (OVERFLOW)',0 ; DATA XREF: .rdata:0040422Co
aTheResultIsToo	db 'The result is too small to be represented (UNDERFLOW)',0
					; DATA XREF: .rdata:00404230o
		align 4
aTotalLossOfSig	db 'Total loss of significance (TLOSS)',0 ; DATA XREF: .rdata:00404234o
		align 4
aPartialLossOfS	db 'Partial loss of significance (PLOSS)',0 ; DATA XREF: .rdata:00404238o
		align 4
off_404224	dd offset aArgumentDomain ; DATA XREF: sub_401B60+16r
					; "Argument domain error (DOMAIN)"
		dd offset aArgumentSingul ; "Argument singularity (SIGN)"
		dd offset aOverflowRangeE ; "Overflow range error (OVERFLOW)"
		dd offset aTheResultIsToo ; "The result	is too small to	be represent"...
		dd offset aTotalLossOfSig ; "Total loss	of significance	(TLOSS)"
		dd offset aPartialLossOfS ; "Partial loss of significance (PLOSS)"
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_401BD0+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_401C30+13Ao
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_401C30+126o
					; sub_401D80+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_401D80+267o
		align 10h
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_401D80+F4o
		align 4
; const	WCHAR LibFileName
LibFileName:				; DATA XREF: sub_402330:loc_4023D5o
		unicode	0, <msvcrt.dll>,0
		align 4
off_404324	dd offset dword_405060	; DATA XREF: .text:004024F8o
		dd offset dword_4050C0
dword_40432C	dd 0			; DATA XREF: sub_401D80+57o
					; sub_401D80+5Co ...
dword_404330	dd 0			; DATA XREF: sub_401D80+7Ar
dword_404334	dd 0			; DATA XREF: sub_401D80+84r
dword_404338	dd 32h dup(0)		; DATA XREF: sub_401D80+8Do
		align 1000h
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 000003F4 (   1012.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 405000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_405000	dd ?			; DATA XREF: sub_401060+7Br
dword_405004	dd ?			; DATA XREF: sub_401190+D0w
					; sub_401190+27Cr
dword_405008	dd ?			; DATA XREF: sub_401190+12Aw
					; TopLevelExceptionFilter:loc_40158Cr
dword_40500C	dd ?			; DATA XREF: sub_401190+271w
					; sub_401190+28Br
dword_405010	dd ?			; DATA XREF: sub_401010+2Ao
					; sub_401190:loc_401354r ...
dword_405014	dd ?			; DATA XREF: sub_401010+18o
					; sub_401190+1E0r ...
dword_405018	dd ?			; DATA XREF: sub_401010+10o
					; sub_401190+242r ...
dword_40501C	dd ?			; DATA XREF: sub_401010+3Aw
dword_405020	dd ?			; DATA XREF: sub_401060+3Ew
					; sub_401190+269r
dword_405024	dd ?			; DATA XREF: sub_401010+8o
					; sub_401010+20w
dword_405028	dd ?			; DATA XREF: sub_401010+3r
TlsIndex	dd ?			; DATA XREF: .tls:TlsIndex_ptro
dword_405030	dd ?			; DATA XREF: sub_401060+Cw
dword_405034	dd ?			; DATA XREF: sub_401060+16w
dword_405038	dd ?			; DATA XREF: sub_401060+20w
dword_40503C	dd ?			; DATA XREF: sub_401060+2Aw
dword_405040	dd ?			; DATA XREF: sub_401060:loc_401098r
					; sub_401190+5Br ...
dword_405044	dd ?			; DATA XREF: sub_401060+5Fr
dword_405048	dd ?			; DATA XREF: sub_401060+85r
					; sub_401060+FFw
dword_40504C	dd ?			; DATA XREF: sub_401C30+2Cr
					; sub_401C30+65r ...
dword_405050	dd ?			; DATA XREF: sub_401C30:loc_401C50r
					; sub_401C30:loc_401CF2w ...
dword_405054	dd ?			; DATA XREF: sub_401D80+9r
					; sub_401D80:loc_401DA0w
dword_405058	dd ?			; DATA XREF: sub_402330+6r
					; sub_402330+9Aw ...
		align 10h
dword_405060	dd ?			; DATA XREF: .text:004024B2w
					; .rdata:off_404324o
dword_405064	dd ?			; DATA XREF: .text:004024BCw
		dd ?
dword_40506C	dd ?			; DATA XREF: .text:004024CBw
		dd 14h dup(?)
dword_4050C0	dd 2Bh dup(?)		; DATA XREF: .rdata:00404328o
dword_40516C	dd ?			; DATA XREF: .text:004024DAw
		dd 2 dup(?)
dword_405178	dd ?			; DATA XREF: .text:004024C6w
		dd 2 dup(?)
dword_405184	dd ?			; DATA XREF: .text:004024ACw
		dd 86h dup(?)
dword_4053A0	dd ?			; DATA XREF: sub_4026A0+3r
					; sub_4026A0:loc_4026B1w
dword_4053A4	dd ?			; DATA XREF: sub_4026C0+7r
					; sub_402740+26r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_4026C0:loc_4026D8o
					; sub_4026C0:loc_402725o ...
dword_4053C0	dd ?			; DATA XREF: sub_4026C0+25r
					; .text:004027F5r ...
		align 8
dword_4053C8	dd ?			; DATA XREF: sub_401190+1A5w
dword_4053CC	dd ?			; DATA XREF: sub_401190:loc_40134Fw
dword_4053D0	dd ?			; DATA XREF: sub_401190+1AFw
dword_4053D4	dd ?			; DATA XREF: sub_401060+65w
					; sub_401A80+3Fr ...
dword_4053D8	dd ?			; DATA XREF: sub_401060+6Aw
					; sub_401A80+4r ...
dword_4053DC	dd ?			; DATA XREF: sub_401190+A0o
					; sub_401190+2FEo
dword_4053E0	dd ?			; DATA XREF: sub_401190+B3r
					; sub_401190:loc_401253r ...
		align 1000h
_bss		ends

;
; Imports from KERNEL32.dll
;
; Section 5. (virtual address 00006000)
; Virtual size			: 000006A8 (   1704.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00002600
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: sub_401700+24Cp
					; sub_401700+257p
					; DATA XREF: ...
; BOOL __stdcall CreateProcessW(LPCWSTR	lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
		extrn CreateProcessW:dword ; CODE XREF:	sub_401700+14Fp
					; DATA XREF: sub_401700+14Fr
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_402740+41p
					; DATA XREF: sub_402740+41r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_4026C0+1Fp
					; .text:004027EFp ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:00402508p
					; DATA XREF: .text:00402508r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_402530+6Cp
					; DATA XREF: sub_402530+6Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_402530+74p
					; DATA XREF: sub_402530+74r
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_401700+166p
					; sub_4026C0+4Cp
					; DATA XREF: ...
; DWORD	__stdcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
		extrn GetModuleFileNameW:dword ; CODE XREF: sub_401700+68p
					; DATA XREF: sub_401700+68r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_4016A0+16p
					; sub_402330+91p
					; DATA XREF: ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_401190+13Fp
					; sub_4016A0+35p
					; DATA XREF: ...
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
		extrn GetStartupInfoA:dword ; CODE XREF: sub_401190+315p
					; DATA XREF: sub_401190+315r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_402530+57p
					; DATA XREF: sub_402530+57r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_402530+7Cp
					; DATA XREF: sub_402530+7Cr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_402740+77p
					; DATA XREF: sub_402740+77r
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination,	LONG Exchange, LONG Comperand)
		extrn InterlockedCompareExchange:dword
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_4026C0+6Cp
					; .text:00402826p ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: sub_402330+ACp
					; DATA XREF: sub_402330+ACr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_402530+8Bp
					; DATA XREF: sub_402530+8Br
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_401190+121p
					; .text:004024EFp
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_401190+8Fp
					; DATA XREF: sub_401190+6Fr
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:00402519p
					; DATA XREF: .text:00402519r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_4026C0+45p
					; DATA XREF: sub_4026C0+32r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:004024FFp
					; DATA XREF: .text:004024FFr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_401C30+10Bp
					; sub_401D80+1B2p
					; DATA XREF: ...
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_401C30+A8p
					; sub_401D80+184p
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp___getmainargs:dword	; DATA XREF: __getmainargsr
		extrn __initenv:dword	; DATA XREF: sub_401190+23Dr
		extrn __lconv_init:dword ; DATA	XREF: sub_401A50+3r
		extrn __imp___set_app_type:dword ; DATA	XREF: __set_app_typer
		extrn __setusermatherr:dword ; CODE XREF: sub_401060+F7p
					; DATA XREF: sub_401060+F7r
		extrn _acmdln:dword	; DATA XREF: sub_401190+164r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp__cexit:dword ; DATA	XREF: _cexitr
; int fmode
		extrn _fmode:dword	; DATA XREF: sub_401060+6Fr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _iob:dword	; DATA XREF: sub_401700+178r
					; sub_401700+1AAr ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_401A80+A3p
					; DATA XREF: sub_401A80+A3r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; void __cdecl __noreturn exit(int Code)
		extrn __imp_exit:dword	; DATA XREF: exitr
; int fprintf(FILE *File, const	char *Format, ...)
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; char *__cdecl	getenv(const char *VarName)
		extrn __imp_getenv:dword ; DATA	XREF: getenvr
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
		extrn __imp_signal:dword ; DATA	XREF: signalr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr
; wchar_t *__cdecl wcscat(wchar_t *Dest, const wchar_t *Source)
		extrn __imp_wcscat:dword ; DATA	XREF: wcscatr
; wchar_t *__cdecl wcscpy(wchar_t *Dest, const wchar_t *Source)
		extrn __imp_wcscpy:dword ; DATA	XREF: wcscpyr
; wchar_t *__cdecl wcsrchr(const wchar_t *Str, wchar_t Ch)
		extrn __imp_wcsrchr:dword ; DATA XREF: wcsrchrr


; Section 6. (virtual address 00007000)
; Virtual size			: 00000034 (	 52.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 407000h
dword_407000	dd 0			; DATA XREF: sub_401190+2D8o
		dd offset sub_401010
dword_407008	dd 0			; DATA XREF: sub_401190:loc_401460o
dword_40700C	dd 0			; DATA XREF: sub_401190+337o
		dd offset sub_401060
		dd offset sub_401A50
dword_407018	dd 2 dup(0)		; DATA XREF: sub_401190+32Fo
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 10h
dword_407030	dd 74h dup(0)		; DATA XREF: TlsCallback_0:loc_401A01o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 7. (virtual address 00008000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00003000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 408000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end start
