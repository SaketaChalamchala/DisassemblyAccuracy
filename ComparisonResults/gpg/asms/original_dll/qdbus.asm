;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C9582E2A6E986F76B9FB7C4BB73F843B
; Input	CRC32 :	2BE97C31

; File Name   :	C:\compspace\compare\gpg\dlls\original\qdbus.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 0001392C (  80172.)
; Section size in file		: 00013A00 (  80384.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401010	proc near		; DATA XREF: .CRT:00421004o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	eax, ds:dword_41D030
		mov	[esp+2Ch+var_1C], offset dword_41D024
		mov	[esp+2Ch+var_24], offset dword_41D018
		mov	[esp+2Ch+var_28], offset dword_41D014
		mov	ds:dword_41D024, eax
		mov	eax, dword_415000
		mov	[esp+2Ch+var_2C], offset dword_41D010
		mov	[esp+2Ch+var_20], eax
		call	__getmainargs
		mov	ds:dword_41D01C, eax
		add	esp, 2Ch
		retn
sub_401010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401060	proc near		; DATA XREF: .CRT:00421010o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ds:dword_41D038, 1
		mov	ds:dword_41D03C, 1
		mov	ds:dword_41D040, 1
		mov	ds:dword_41D044, 1
		jz	short loc_401102

loc_401096:				; CODE XREF: sub_401060+B7j
					; sub_401060+CBj ...
		xor	eax, eax

loc_401098:				; CODE XREF: sub_401060+EAj
					; sub_401060+126j
		mov	ecx, ds:dword_41D048
		mov	ds:dword_41D020, eax
		test	ecx, ecx
		jz	short loc_4010F4
		mov	[esp+1Ch+var_1C], 2
		call	__set_app_type

loc_4010B3:				; CODE XREF: sub_401060+A0j
		mov	[esp+1Ch+var_1C], 0FFFFFFFFh
		call	sub_40EF50
		mov	edx, ds:dword_41D04C
		mov	ds:dword_41D3F4, eax
		mov	ds:dword_41D3F8, eax
		mov	eax, ds:_fmode
		mov	[eax], edx
		call	sub_40F0A0
		mov	edx, ds:dword_41D000
		test	edx, edx
		jz	short loc_4010EE
		mov	eax, ds:dword_41D050
		test	eax, eax
		jz	short loc_401150

loc_4010EE:				; CODE XREF: sub_401060+83j
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_4010F4:				; CODE XREF: sub_401060+45j
		mov	[esp+1Ch+var_1C], 1
		call	__set_app_type
		jmp	short loc_4010B3
; ---------------------------------------------------------------------------

loc_401102:				; CODE XREF: sub_401060+34j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	loc_401096
		movzx	eax, word ptr [edx+18h]
		cmp	ax, 10Bh
		jz	short loc_401170
		cmp	ax, 20Bh
		jnz	loc_401096
		add	edx, 18h
		cmp	dword ptr [edx+6Ch], 0Eh
		jbe	loc_401096
		xor	eax, eax
		cmp	dword ptr [edx+0E0h], 0
		setnz	al
		jmp	loc_401098
; ---------------------------------------------------------------------------
		align 10h

loc_401150:				; CODE XREF: sub_401060+8Cj
		mov	[esp+1Ch+var_1C], offset sub_40F040
		call	ds:__setusermatherr
		xor	eax, eax
		mov	ds:dword_41D050, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401170:				; CODE XREF: sub_401060+C5j
		cmp	dword ptr [edx+74h], 0Eh
		jbe	loc_401096
		xor	eax, eax
		cmp	dword ptr [edx+0E8h], 0
		setnz	al
		jmp	loc_401098
sub_401060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401190	proc near		; CODE XREF: start+15j	.text:00401515j

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
StartupInfo	= _STARTUPINFOA	ptr -5Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		mov	ecx, 11h
		push	edi
		push	esi
		push	ebx
		lea	edx, [ebp+StartupInfo]
		sub	esp, 0ACh
		mov	edi, edx
		rep stosd
		lea	eax, [esp+1Bh]
		and	eax, 0FFFFFFF0h
		mov	dword ptr [eax], 0CCCCCCCCh
		mov	dword ptr [eax+4], 0CCCCCCCCh
		mov	dword ptr [eax+8], 0CCCCCCCCh
		mov	dword ptr [eax+0Ch], 0CCCCCCCCh
		mov	dword ptr [eax+10h], 0CCCCCCCCh
		mov	dword ptr [eax+14h], 0CCCCCCCCh
		mov	dword ptr [eax+18h], 0CCCCCCCCh
		mov	dword ptr [eax+1Ch], 0CCCCCCCCh
		and	esp, 0FFFFFFF0h
		mov	ebx, ds:dword_41D048
		test	ebx, ebx
		jnz	loc_4014A2

loc_4011F9:				; CODE XREF: sub_401190+320j
		mov	eax, large fs:18h
		mov	esi, ds:Sleep
		mov	ebx, [eax+4]
		jmp	short loc_401224
; ---------------------------------------------------------------------------
		align 10h

loc_401210:				; CODE XREF: sub_401190+B1j
		cmp	eax, ebx
		jz	loc_401431
		mov	dword ptr [esp], 3E8h ;	dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_401224:				; CODE XREF: sub_401190+78j
		mov	dword ptr [esp+8], 0
		mov	[esp+4], ebx
		mov	dword ptr [esp], offset	dword_41D3FC
		call	sub_4102B0
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_401210
		mov	eax, ds:dword_41D400
		xor	ebx, ebx
		cmp	eax, 1
		jz	loc_401444

loc_401253:				; CODE XREF: sub_401190+2AEj
		mov	eax, ds:dword_41D400
		test	eax, eax
		jz	loc_4014B5
		mov	ds:dword_41D004, 1

loc_40126A:				; CODE XREF: sub_401190+343j
		mov	eax, ds:dword_41D400
		cmp	eax, 1
		jz	loc_401460

loc_401278:				; CODE XREF: sub_401190+2C8j
		test	ebx, ebx
		jz	loc_401486

loc_401280:				; CODE XREF: sub_401190+2F0j
					; sub_401190+30Dj
		mov	eax, ds:off_41BCE0
		test	eax, eax
		jz	short loc_4012A5
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 2
		mov	dword ptr [esp], 0
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_4012A5:				; CODE XREF: sub_401190+F7j
		call	sub_40F260
		mov	dword ptr [esp], offset	TopLevelExceptionFilter	; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	ds:dword_41D008, eax
		call	sub_40F810
		mov	dword ptr [esp+4], offset ProcName ; "_set_invalid_parameter_handler"
		mov	[esp], eax	; hModule
		call	ds:GetProcAddress
		sub	esp, 8
		test	eax, eax
		jz	short loc_4012E5
		mov	dword ptr [esp], offset	nullsub_1
		call	eax

loc_4012E5:				; CODE XREF: sub_401190+14Aj
		call	sub_40FAE0
		mov	ecx, ds:dword_41D048
		test	ecx, ecx
		jz	short loc_401354
		mov	eax, ds:_acmdln
		xor	ecx, ecx
		mov	eax, [eax]
		jmp	short loc_401310
; ---------------------------------------------------------------------------
		align 10h

loc_401300:				; CODE XREF: sub_401190+186j
		test	dl, dl
		setnz	dl
		test	cl, cl
		jz	short loc_40132D
		test	dl, dl
		jz	short loc_40132D

loc_40130D:				; CODE XREF: sub_401190+18Bj
					; sub_401190+190j
		add	eax, 1

loc_401310:				; CODE XREF: sub_401190+16Dj
		movzx	edx, byte ptr [eax]
		cmp	dl, 20h
		jle	short loc_401300
		cmp	dl, 22h
		jnz	short loc_40130D
		xor	ecx, 1
		jmp	short loc_40130D
; ---------------------------------------------------------------------------

loc_401322:				; CODE XREF: sub_401190+19Fj
		add	eax, 1
		movzx	edx, byte ptr [eax]
		cmp	dl, 20h
		jg	short loc_401331

loc_40132D:				; CODE XREF: sub_401190+177j
					; sub_401190+17Bj
		test	dl, dl
		jnz	short loc_401322

loc_401331:				; CODE XREF: sub_401190+19Bj
		test	byte ptr [ebp+StartupInfo.dwFlags], 1
		mov	ds:dword_41D3E8, eax
		mov	eax, 0Ah
		mov	ds:dword_41D3F0, 400000h
		jnz	loc_401428

loc_40134F:				; CODE XREF: sub_401190+29Cj
		mov	ds:dword_41D3EC, eax

loc_401354:				; CODE XREF: sub_401190+162j
		mov	eax, ds:dword_41D010
		xor	ebx, ebx
		mov	[ebp+var_6C], eax
		lea	eax, ds:4[eax*4]
		mov	[esp], eax	; size_t
		call	malloc
		mov	edx, [ebp+var_6C]
		mov	edi, ds:dword_41D014
		mov	[ebp+var_70], eax
		xor	eax, eax
		test	edx, edx
		jle	short loc_4013BD
		nop

loc_401380:				; CODE XREF: sub_401190+225j
		mov	eax, [edi+ebx*4]
		mov	[esp], eax	; char *
		call	strlen
		lea	esi, [eax+1]
		mov	[esp], esi	; size_t
		call	malloc
		mov	edx, [ebp+var_70]
		mov	[edx+ebx*4], eax
		mov	edx, [edi+ebx*4]
		add	ebx, 1
		mov	[esp+8], esi	; size_t
		mov	[esp], eax	; void *
		mov	[esp+4], edx	; void *
		call	memcpy
		cmp	[ebp+var_6C], ebx
		jg	short loc_401380
		mov	eax, [ebp+var_6C]
		shl	eax, 2

loc_4013BD:				; CODE XREF: sub_401190+1EDj
		mov	edx, [ebp+var_70]
		mov	ds:dword_41D014, edx
		mov	dword ptr [edx+eax], 0
		mov	eax, ds:__initenv
		mov	edx, ds:dword_41D018
		mov	[eax], edx
		mov	eax, ds:dword_41D018
		mov	[esp+8], eax
		mov	eax, ds:dword_41D014
		mov	[esp+4], eax
		mov	eax, ds:dword_41D010
		mov	[esp], eax
		call	sub_408C80
		mov	esi, ds:dword_41D020
		test	esi, esi
		mov	ds:dword_41D00C, eax
		jz	loc_4014D8
		mov	ebx, ds:dword_41D004
		test	ebx, ebx
		jnz	short loc_401420
		call	_cexit
		mov	eax, ds:dword_41D00C

loc_401420:				; CODE XREF: sub_401190+284j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401428:				; CODE XREF: sub_401190+1B9j
		movzx	eax, [ebp+StartupInfo.wShowWindow]
		jmp	loc_40134F
; ---------------------------------------------------------------------------

loc_401431:				; CODE XREF: sub_401190+82j
		mov	eax, ds:dword_41D400
		mov	ebx, 1
		cmp	eax, 1
		jnz	loc_401253

loc_401444:				; CODE XREF: sub_401190+BDj
		mov	dword ptr [esp], 1Fh
		call	_amsg_exit
		mov	eax, ds:dword_41D400
		cmp	eax, 1
		jnz	loc_401278
		xchg	ax, ax

loc_401460:				; CODE XREF: sub_401190+E2j
		mov	dword ptr [esp+4], offset dword_421008
		mov	dword ptr [esp], offset	dword_421000
		call	_initterm
		test	ebx, ebx
		mov	ds:dword_41D400, 2
		jnz	loc_401280

loc_401486:				; CODE XREF: sub_401190+EAj
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], offset	dword_41D3FC
		call	sub_4102E0
		sub	esp, 8
		jmp	loc_401280
; ---------------------------------------------------------------------------

loc_4014A2:				; CODE XREF: sub_401190+63j
		mov	[esp], edx	; lpStartupInfo
		call	ds:GetStartupInfoA
		sub	esp, 4
		xchg	ax, ax
		jmp	loc_4011F9
; ---------------------------------------------------------------------------

loc_4014B5:				; CODE XREF: sub_401190+CAj
		mov	ds:dword_41D400, 1
		mov	dword ptr [esp+4], offset dword_421018
		mov	dword ptr [esp], offset	dword_42100C
		call	_initterm
		jmp	loc_40126A
; ---------------------------------------------------------------------------

loc_4014D8:				; CODE XREF: sub_401190+276j
		mov	[esp], eax	; int
		call	exit
sub_401190	endp


; =============== S U B	R O U T	I N E =======================================


		public start
start		proc near
		sub	esp, 0Ch
		mov	ds:dword_41D048, 0
		call	sub_40FA10
		add	esp, 0Ch
		jmp	sub_401190
start		endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	ds:dword_41D048, 1
		call	sub_40FA10
		add	esp, 0Ch
		jmp	sub_401190
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *ExceptionInfo)
TopLevelExceptionFilter	proc near	; DATA XREF: sub_401190+11Ao

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
ExceptionInfo	= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+ExceptionInfo]
		mov	eax, [ebx]
		mov	eax, [eax]
		cmp	eax, 0C0000091h
		ja	short loc_401577
		cmp	eax, 0C000008Dh
		jb	short loc_4015A3

loc_40153B:				; CODE XREF: TopLevelExceptionFilter+6Aj
		mov	esi, 1

loc_401540:				; CODE XREF: TopLevelExceptionFilter+C6j
		mov	[esp+1Ch+var_18], 0 ; void (__cdecl *)(int)
		mov	[esp+1Ch+var_1C], 8 ; int
		call	signal
		cmp	eax, 1
		jz	loc_401663
		test	eax, eax
		jz	short loc_40158C
		mov	[esp+1Ch+var_1C], 8
		call	eax
		mov	eax, 0FFFFFFFFh

loc_40156F:				; CODE XREF: TopLevelExceptionFilter+76j
					; TopLevelExceptionFilter+120j	...
		add	esp, 14h
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_401577:				; CODE XREF: TopLevelExceptionFilter+12j
		cmp	eax, 0C0000094h
		jz	short loc_4015E4
		cmp	eax, 0C0000096h
		jz	short loc_4015B1
		cmp	eax, 0C0000093h
		jz	short loc_40153B

loc_40158C:				; CODE XREF: TopLevelExceptionFilter+3Fj
					; TopLevelExceptionFilter+8Fj ...
		mov	edx, ds:dword_41D008
		xor	eax, eax
		test	edx, edx
		jz	short loc_40156F
		mov	[esp+1Ch+ExceptionInfo], ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	edx
; ---------------------------------------------------------------------------

loc_4015A3:				; CODE XREF: TopLevelExceptionFilter+19j
		cmp	eax, 0C0000005h
		jz	short loc_4015F0
		cmp	eax, 0C000001Dh
		jnz	short loc_40158C

loc_4015B1:				; CODE XREF: TopLevelExceptionFilter+63j
		mov	[esp+1Ch+var_18], 0 ; void (__cdecl *)(int)
		mov	[esp+1Ch+var_1C], 4 ; int
		call	signal
		cmp	eax, 1
		jz	short loc_401627
		test	eax, eax
		jz	short loc_40158C
		mov	[esp+1Ch+var_1C], 4
		call	eax
		add	esp, 14h
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_4015E4:				; CODE XREF: TopLevelExceptionFilter+5Cj
		xor	esi, esi
		jmp	loc_401540
; ---------------------------------------------------------------------------
		align 10h

loc_4015F0:				; CODE XREF: TopLevelExceptionFilter+88j
		mov	[esp+1Ch+var_18], 0 ; void (__cdecl *)(int)
		mov	[esp+1Ch+var_1C], 0Bh ;	int
		call	signal
		cmp	eax, 1
		jz	short loc_401645
		test	eax, eax
		jz	loc_40158C
		mov	[esp+1Ch+var_1C], 0Bh
		call	eax
		add	esp, 14h
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_401627:				; CODE XREF: TopLevelExceptionFilter+A8j
		mov	[esp+1Ch+var_18], 1 ; void (__cdecl *)(int)
		mov	[esp+1Ch+var_1C], 4 ; int
		call	signal
		mov	eax, 0FFFFFFFFh
		jmp	loc_40156F
; ---------------------------------------------------------------------------

loc_401645:				; CODE XREF: TopLevelExceptionFilter+E7j
		mov	[esp+1Ch+var_18], 1 ; void (__cdecl *)(int)
		mov	[esp+1Ch+var_1C], 0Bh ;	int
		call	signal
		mov	eax, 0FFFFFFFFh
		jmp	loc_40156F
; ---------------------------------------------------------------------------

loc_401663:				; CODE XREF: TopLevelExceptionFilter+37j
		mov	[esp+1Ch+var_18], 1 ; void (__cdecl *)(int)
		mov	[esp+1Ch+var_1C], 8 ; int
		call	signal
		test	esi, esi
		mov	eax, 0FFFFFFFFh
		jz	loc_40156F
		call	sub_40FAE0
		mov	eax, 0FFFFFFFFh
		xchg	ax, ax
		jmp	loc_40156F
TopLevelExceptionFilter	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4016A0	proc near		; CODE XREF: sub_410490+6p
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_419A78
		test	eax, eax
		jz	short locret_4016EB
		mov	dword ptr [esp], offset	ModuleName ; "libgcj_s.dll"
		call	ds:GetModuleHandleA
		mov	edx, eax
		sub	esp, 4
		test	edx, edx
		mov	eax, 0
		jz	short loc_4016DE
		mov	dword ptr [esp+4], offset a_jv_registercl ; "_Jv_RegisterClasses"
		mov	[esp], edx	; hModule
		call	ds:GetProcAddress
		sub	esp, 8

loc_4016DE:				; CODE XREF: sub_4016A0+28j
		test	eax, eax
		jz	short locret_4016EB
		mov	dword ptr [esp], offset	dword_419A78
		call	eax

locret_4016EB:				; CODE XREF: sub_4016A0+Dj
					; sub_4016A0+40j
		leave
		retn
sub_4016A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4016F0()
sub_4016F0	proc near		; DATA XREF: sub_410490+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4016F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_401700()
sub_401700	proc near		; DATA XREF: sub_401720:loc_4017A9o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	[esp+1Ch+var_1C], offset dword_41D028
		call	ds:_ZN15QDBusConnectionD1Ev
		add	esp, 1Ch
		retn
sub_401700	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401720	proc near		; DATA XREF: .text:00414534o

var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_413F20
		mov	[ebp+var_30], offset dword_4145FC
		mov	[ebp+var_28], offset sub_4017C2
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	dword_41A044
		mov	[ebp+var_48], 0FFFFFFFFh
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		mov	dword ptr [esp], offset	dword_41D028
		mov	[ebp+var_48], 1
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		mov	[esp+4], eax
		call	ds:_ZN15QDBusConnectionC1ERK7QString
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_4017A9
		mov	eax, [ebp+var_C]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_4017A9:				; CODE XREF: sub_401720+74j
		mov	dword ptr [esp], offset	sub_401700 ; _onexit_t
		call	sub_40F020
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_401720	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4017C2	proc near		; DATA XREF: sub_401720+20o
		add	ebp, 8
		mov	eax, [ebp-44h]
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-50h], eax
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		call	sub_4126A0
		mov	eax, [ebp-50h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_4017C2	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4017F0	proc near		; CODE XREF: sub_4051A0+67Ap

var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= byte ptr -0BCh
var_B8		= dword	ptr -0B8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_80		= byte ptr -80h
var_6C		= byte ptr -6Ch
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 138h
		mov	[ebp+var_100], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_9C], eax
		lea	eax, [ebp+var_BC]
		mov	[ebp+var_104], edx
		mov	[ebp+var_E4], ecx
		mov	[esp], eax
		mov	[ebp+var_A4], offset sub_413F20
		mov	[ebp+var_A0], offset dword_414608
		mov	[ebp+var_98], offset sub_402217
		mov	[ebp+var_94], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+var_E4]
		mov	ecx, [ebp+var_104]
		mov	eax, [ebp+var_100]
		mov	dword ptr [esp+14h], 0
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_54]
		mov	[esp+8], ecx
		mov	dword ptr [esp+10h], offset dword_41D028
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_B8], 0FFFFFFFFh
		call	ds:_ZN14QDBusInterfaceC1ERK7QStringS2_S2_RK15QDBusConnectionP7QObject
		lea	ecx, [ebp+var_54]
		mov	[esp], ecx
		mov	[ebp+var_B8], 13h
		call	ds:_ZNK22QDBusAbstractInterface7isValidEv
		test	al, al
		jnz	loc_401AFB
		lea	eax, [ebp+var_6C]
		lea	edx, [ebp+var_54]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZNK22QDBusAbstractInterface9lastErrorEv
		lea	edx, [ebp+var_6C]
		push	eax
		lea	eax, [ebp+var_2C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 12h
		call	ds:_ZNK10QDBusError7messageEv
		lea	eax, [ebp+var_30]
		push	ecx
		lea	edx, [ebp+var_2C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 11h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_30]
		push	edx
		lea	edx, [ebp+var_6C]
		mov	eax, [eax+0Ch]
		mov	[esp+4], edx
		mov	[ebp+var_B8], 10h
		mov	[ebp+var_114], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	ds:_ZNK10QDBusError4nameEv
		lea	edx, [ebp+var_24]
		push	eax
		lea	eax, [ebp+var_28]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 0Fh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_28]
		mov	edx, [ebp+var_100]
		push	ecx
		mov	eax, [eax+0Ch]
		mov	[ebp+var_110], eax
		mov	eax, [edx]
		mov	[ebp+var_1C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_20]
		lea	edx, [ebp+var_1C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 0Dh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_104]
		push	edx
		mov	eax, [eax+0Ch]
		mov	[ebp+var_10C], eax
		mov	eax, [ecx]
		mov	[ebp+var_14], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_18]
		lea	edx, [ebp+var_14]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 0Bh
		call	ds:_ZNK7QString11toLocal8BitEv
		push	eax
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+var_E4]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_108], eax
		mov	eax, [edx]
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_10]
		lea	edx, [ebp+var_C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 9
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_110]
		push	ecx
		mov	ecx, [ebp+var_114]
		mov	edx, [ebp+var_10C]
		mov	[esp+14h], eax
		mov	eax, [ebp+var_10]
		mov	[esp+18h], ecx
		mov	ecx, [ebp+var_108]
		mov	[esp+10h], edx
		mov	[esp+0Ch], ecx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aInterfaceSNotA ; "Interface '%s' not available in object "...
		mov	[ebp+var_B8], 8
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4021FC

loc_401A56:				; CODE XREF: sub_4017F0+A22j
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4021E1

loc_401A67:				; CODE XREF: sub_4017F0+A07j
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4021C6

loc_401A78:				; CODE XREF: sub_4017F0+9ECj
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4021AB

loc_401A89:				; CODE XREF: sub_4017F0+9D1j
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402190

loc_401A9A:				; CODE XREF: sub_4017F0+9B6j
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402175

loc_401AAB:				; CODE XREF: sub_4017F0+99Bj
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40215A

loc_401ABC:				; CODE XREF: sub_4017F0+980j
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40213F

loc_401ACD:				; CODE XREF: sub_4017F0+965j
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402124

loc_401ADE:				; CODE XREF: sub_4017F0+94Aj
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402109

loc_401AEF:				; CODE XREF: sub_4017F0+92Fj
		mov	dword ptr [esp], 1 ; int
		call	exit
; ---------------------------------------------------------------------------

loc_401AFB:				; CODE XREF: sub_4017F0+B2j
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_B8], 13h
		call	ds:_ZNK14QDBusInterface10metaObjectEv
		mov	[ebp+var_D0], eax
		mov	[esp], eax
		call	ds:_ZNK11QMetaObject14propertyOffsetEv
		mov	[ebp+var_D8], eax
		mov	edx, ds:_ZNK13QMetaProperty10isReadableEv
		mov	eax, ds:_ZNK11QMetaObject13propertyCountEv
		mov	[ebp+var_FC], edx
		mov	[ebp+var_C4], eax
		jmp	loc_401C14
; ---------------------------------------------------------------------------

loc_401B42:				; CODE XREF: sub_4017F0+4AAj
		mov	dword ptr [esp], offset	aRead ;	"read"
		mov	[ebp+var_B8], 13h
		call	printf

loc_401B58:				; CODE XREF: sub_4017F0+4C6j
					; sub_4017F0+52Bj
		lea	edx, [ebp+var_80]
		mov	[esp], edx
		mov	[ebp+var_B8], 13h
		call	ds:_ZNK13QMetaProperty4nameEv
		mov	ecx, [ebp+var_E4]
		mov	[ebp+var_F8], eax
		mov	eax, [ecx]
		mov	[ebp+var_34], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_38]
		lea	edx, [ebp+var_34]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 7
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_38]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	[ebp+var_B8], 6
		mov	[ebp+var_F0], eax
		lea	eax, [ebp+var_80]
		mov	[esp], eax
		call	ds:_ZNK13QMetaProperty8typeNameEv
		mov	edx, [ebp+var_F8]
		mov	ecx, [ebp+var_F0]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aSS_S ;	" %s %s.%s\n"
		mov	[esp+0Ch], edx
		mov	[esp+8], ecx
		call	printf
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_401CE0

loc_401BFC:				; CODE XREF: sub_4017F0+506j
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_401CC0

loc_401C0D:				; CODE XREF: sub_4017F0+4E6j
		add	[ebp+var_D8], 1

loc_401C14:				; CODE XREF: sub_4017F0+34Dj
		mov	eax, [ebp+var_D0]
		mov	[ebp+var_B8], 13h
		mov	[esp], eax
		call	[ebp+var_C4]
		cmp	[ebp+var_D8], eax
		jge	loc_401D20
		mov	ecx, [ebp+var_D8]
		lea	edx, [ebp+var_80]
		mov	eax, [ebp+var_D0]
		mov	[esp], edx
		mov	[ebp+var_B8], 13h
		mov	[esp+8], ecx
		mov	[esp+4], eax
		call	ds:_ZNK11QMetaObject8propertyEi
		sub	esp, 4
		mov	dword ptr [esp], offset	aProperty ; "property "
		call	printf
		lea	ecx, [ebp+var_80]
		mov	[esp], ecx
		call	ds:_ZNK13QMetaProperty10isReadableEv
		test	al, al
		jnz	short loc_401CFB

loc_401C82:				; CODE XREF: sub_4017F0+519j
		lea	edx, [ebp+var_80]
		mov	[esp], edx
		mov	[ebp+var_B8], 13h
		call	[ebp+var_FC]
		test	al, al
		jnz	loc_401B42
		mov	dword ptr [esp], offset	aWrite ; "write"
		mov	[ebp+var_B8], 13h
		call	printf
		jmp	loc_401B58
; ---------------------------------------------------------------------------
		align 10h

loc_401CC0:				; CODE XREF: sub_4017F0+417j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_B8], 13h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_401C0D
; ---------------------------------------------------------------------------
		align 10h

loc_401CE0:				; CODE XREF: sub_4017F0+406j
		mov	eax, [ebp+var_38]
		mov	[ebp+var_B8], 7
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_401BFC
; ---------------------------------------------------------------------------

loc_401CFB:				; CODE XREF: sub_4017F0+490j
		lea	eax, [ebp+var_80]
		mov	[esp], eax
		call	ds:_ZNK13QMetaProperty10isWritableEv
		test	al, al
		jz	loc_401C82
		mov	dword ptr [esp], offset	aReadwrite ; "readwrite"
		call	printf
		jmp	loc_401B58
; ---------------------------------------------------------------------------

loc_401D20:				; CODE XREF: sub_4017F0+443j
		mov	edx, [ebp+var_D0]
		mov	[esp], edx
		call	ds:_ZNK11QMetaObject12methodOffsetEv
		mov	ecx, ds:_ZNK11QMetaObject11methodCountEv
		mov	[ebp+var_D4], eax
		mov	[ebp+var_C0], ecx

loc_401D41:				; CODE XREF: sub_4017F0+898j
		mov	ecx, [ebp+var_D0]
		mov	[ebp+var_B8], 13h
		mov	[esp], ecx
		call	[ebp+var_C0]
		cmp	[ebp+var_D4], eax
		jge	loc_4020E3
		mov	eax, [ebp+var_D4]
		mov	edx, [ebp+var_D0]
		mov	[ebp+var_B8], 13h
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZNK11QMetaObject6methodEi
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_5C], eax
		mov	[ebp+var_58], edx
		mov	[esp], ecx
		call	ds:_ZNK11QMetaMethod9signatureEv
		mov	[esp+4], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	ds:_ZN10QByteArrayC1EPKc
		lea	edx, [ebp+var_3C]
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 28h
		mov	[esp], edx
		mov	[ebp+var_B8], 5
		call	ds:_ZNK10QByteArray7indexOfEci
		lea	ecx, [ebp+var_3C]
		mov	[esp+4], eax
		mov	[esp], ecx
		call	ds:_ZN10QByteArray8truncateEi
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+var_E4]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_EC], eax
		mov	eax, [edx]
		mov	[ebp+var_40], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_44]
		lea	edx, [ebp+var_40]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 4
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_44]
		sub	esp, 4
		lea	ecx, [ebp+var_5C]
		mov	eax, [eax+0Ch]
		mov	[esp], ecx
		mov	[ebp+var_B8], 3
		mov	[ebp+var_E8], eax
		call	ds:_ZNK11QMetaMethod8typeNameEv
		mov	[ebp+var_E0], offset aVoid ; "void"
		cmp	byte ptr [eax],	0
		jz	short loc_401E6B
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_B8], 3
		call	ds:_ZNK11QMetaMethod8typeNameEv
		mov	[ebp+var_E0], eax

loc_401E6B:				; CODE XREF: sub_4017F0+65Dj
		lea	edx, [ebp+var_5C]
		mov	[esp], edx
		mov	[ebp+var_B8], 3
		call	ds:_ZNK11QMetaMethod3tagEv
		mov	[ebp+var_DC], offset asc_41A0B1	; " "
		cmp	byte ptr [eax],	0
		jnz	short loc_401E9A
		mov	[ebp+var_DC], offset dword_41A044

loc_401E9A:				; CODE XREF: sub_4017F0+69Ej
		lea	ecx, [ebp+var_5C]
		mov	[esp], ecx
		mov	[ebp+var_B8], 3
		call	ds:_ZNK11QMetaMethod3tagEv
		mov	[ebp+var_F4], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	ds:_ZNK11QMetaMethod10methodTypeEv
		cmp	eax, 1
		mov	edx, offset aSignal ; "signal"
		jz	short loc_401ED1
		mov	edx, offset aMethod ; "method"

loc_401ED1:				; CODE XREF: sub_4017F0+6DAj
		mov	ecx, [ebp+var_EC]
		mov	eax, [ebp+var_E8]
		mov	[esp+4], edx
		mov	dword ptr [esp], offset	aSSSSS_S ; "%s %s%s%s %s.%s("
		mov	[esp+18h], ecx
		mov	ecx, [ebp+var_E0]
		mov	[esp+14h], eax
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_B8], 3
		mov	[esp+10h], ecx
		mov	ecx, [ebp+var_F4]
		mov	[esp+0Ch], eax
		mov	[esp+8], ecx
		call	printf
		mov	eax, [ebp+var_44]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4020C8

loc_401F2E:				; CODE XREF: sub_4017F0+8EEj
		mov	eax, [ebp+var_40]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402090

loc_401F3F:				; CODE XREF: sub_4017F0+8B6j
		lea	eax, [ebp+var_48]
		lea	edx, [ebp+var_5C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_B8], 5
		call	ds:_ZNK11QMetaMethod14parameterTypesEv
		sub	esp, 4
		lea	eax, [ebp+var_4C]
		lea	ecx, [ebp+var_5C]
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_B8], 2
		call	ds:_ZNK11QMetaMethod14parameterNamesEv
		mov	edx, [ebp+var_48]
		sub	esp, 4
		mov	ecx, [edx+8]
		mov	eax, [edx+0Ch]
		sub	eax, ecx
		test	eax, eax
		jle	loc_402034
		mov	eax, [edx+ecx*4+14h]
		mov	[ebp+var_C8], 0
		mov	[ebp+var_CC], 0
		mov	edx, [eax+0Ch]
		mov	eax, offset dword_41A044
		jmp	short loc_401FEA
; ---------------------------------------------------------------------------

loc_401FB4:				; CODE XREF: sub_4017F0+82Dj
					; sub_4017F0+842j
		mov	eax, [ebp+var_48]
		add	[ebp+var_C8], 1
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		sub	ecx, edx
		cmp	[ebp+var_C8], ecx
		jge	short loc_402034
		mov	ecx, [ebp+var_C8]
		lea	edx, [edx+ecx+4]
		mov	eax, [eax+edx*4+4]
		mov	[ebp+var_CC], ecx
		mov	edx, [eax+0Ch]
		mov	eax, offset asc_41A0DD ; ", "

loc_401FEA:				; CODE XREF: sub_4017F0+7C2j
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aSS ; "%s%s"
		mov	[ebp+var_B8], 1
		call	printf
		mov	eax, [ebp+var_4C]
		mov	edx, [ebp+var_CC]
		add	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_401FB4
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp], offset	aS ; " %s"
		mov	[esp+4], eax
		call	printf
		jmp	short loc_401FB4
; ---------------------------------------------------------------------------

loc_402034:				; CODE XREF: sub_4017F0+79Cj
					; sub_4017F0+7DCj
		mov	dword ptr [esp], offset	asc_41A0DB ; ")"
		mov	[ebp+var_B8], 1
		call	puts
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_B8], 2
		call	sub_411890
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_B8], 5
		call	sub_411890
		mov	eax, [ebp+var_3C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_4020B0

loc_402081:				; CODE XREF: sub_4017F0+8D6j
		add	[ebp+var_D4], 1
		jmp	loc_401D41
; ---------------------------------------------------------------------------
		align 10h

loc_402090:				; CODE XREF: sub_4017F0+749j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_B8], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_401F3F
; ---------------------------------------------------------------------------
		align 10h

loc_4020B0:				; CODE XREF: sub_4017F0+88Fj
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_B8], 13h
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	short loc_402081
; ---------------------------------------------------------------------------

loc_4020C8:				; CODE XREF: sub_4017F0+738j
		mov	eax, [ebp+var_44]
		mov	[ebp+var_B8], 4
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_401F2E
; ---------------------------------------------------------------------------

loc_4020E3:				; CODE XREF: sub_4017F0+570j
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_B8], 0FFFFFFFFh
		call	ds:_ZN14QDBusInterfaceD1Ev
		lea	eax, [ebp+var_BC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_402109:				; CODE XREF: sub_4017F0+2F9j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_B8], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_401AEF
; ---------------------------------------------------------------------------

loc_402124:				; CODE XREF: sub_4017F0+2E8j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_B8], 11h
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_401ADE
; ---------------------------------------------------------------------------

loc_40213F:				; CODE XREF: sub_4017F0+2D7j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_B8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_401ACD
; ---------------------------------------------------------------------------

loc_40215A:				; CODE XREF: sub_4017F0+2C6j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_B8], 0Fh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_401ABC
; ---------------------------------------------------------------------------

loc_402175:				; CODE XREF: sub_4017F0+2B5j
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_B8], 0Eh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_401AAB
; ---------------------------------------------------------------------------

loc_402190:				; CODE XREF: sub_4017F0+2A4j
		mov	eax, [ebp+var_20]
		mov	[ebp+var_B8], 0Dh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_401A9A
; ---------------------------------------------------------------------------

loc_4021AB:				; CODE XREF: sub_4017F0+293j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_B8], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_401A89
; ---------------------------------------------------------------------------

loc_4021C6:				; CODE XREF: sub_4017F0+282j
		mov	eax, [ebp+var_18]
		mov	[ebp+var_B8], 0Bh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_401A78
; ---------------------------------------------------------------------------

loc_4021E1:				; CODE XREF: sub_4017F0+271j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_B8], 0Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_401A67
; ---------------------------------------------------------------------------

loc_4021FC:				; CODE XREF: sub_4017F0+260j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_B8], 9
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_401A56
sub_4017F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_402217	proc near		; DATA XREF: sub_4017F0+41o
		add	ebp, 8
		mov	eax, [ebp-0B8h]
		mov	edx, [ebp-0B4h]
		cmp	eax, 1
		mov	[ebp-118h], edx
		jz	loc_4022F7
		cmp	eax, 2
		jz	loc_40246A
		cmp	eax, 3
		jz	loc_40247F
		cmp	eax, 4
		jz	loc_40230C
		cmp	eax, 5
		jz	loc_40243B
		cmp	eax, 6
		lea	esi, [esi+0]
		jz	loc_402450
		cmp	eax, 7
		jz	loc_40234F
		cmp	eax, 8
		jz	loc_402364
		cmp	eax, 9
		nop
		lea	esi, [esi+0]
		jz	loc_402379
		cmp	eax, 0Ah
		jz	loc_40238E
		cmp	eax, 0Bh
		jz	loc_4023A3
		cmp	eax, 0Ch
		nop
		lea	esi, [esi+0]
		jz	loc_4023B8
		cmp	eax, 0Dh
		jz	loc_4023CD
		cmp	eax, 0Eh
		jz	loc_4023E2
		cmp	eax, 0Fh
		nop
		lea	esi, [esi+0]
		jz	loc_4023F7
		cmp	eax, 10h
		jz	loc_40240C
		cmp	eax, 11h
		jz	loc_402421
		cmp	eax, 12h
		nop
		lea	esi, [esi+0]
		jz	short loc_402321
		lea	eax, [ebp-4Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_411890

loc_4022F7:				; CODE XREF: sub_402217+18j
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_411890

loc_40230C:				; CODE XREF: sub_402217+33j
					; sub_402217+27Dj
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410CE0

loc_402321:				; CODE XREF: sub_402217+C9j
					; sub_402217+21Fj ...
		lea	eax, [ebp-54h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	ds:_ZN14QDBusInterfaceD1Ev
		mov	eax, [ebp-118h]
		mov	dword ptr [ebp-0B8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_40234F:				; CODE XREF: sub_402217+52j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410CE0

loc_402364:				; CODE XREF: sub_402217+5Bj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_4126A0

loc_402379:				; CODE XREF: sub_402217+69j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410CE0

loc_40238E:				; CODE XREF: sub_402217+72j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_4126A0

loc_4023A3:				; CODE XREF: sub_402217+7Bj
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410CE0

loc_4023B8:				; CODE XREF: sub_402217+89j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_4126A0

loc_4023CD:				; CODE XREF: sub_402217+92j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410CE0

loc_4023E2:				; CODE XREF: sub_402217+9Bj
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_4126A0

loc_4023F7:				; CODE XREF: sub_402217+A9j
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410CE0

loc_40240C:				; CODE XREF: sub_402217+B2j
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_4126A0

loc_402421:				; CODE XREF: sub_402217+BBj
		lea	eax, [ebp-6Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410D10
		jmp	loc_402321
; ---------------------------------------------------------------------------

loc_40243B:				; CODE XREF: sub_402217+3Cj
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410CE0

loc_402450:				; CODE XREF: sub_402217+49j
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_4126A0
		jmp	loc_402321
; ---------------------------------------------------------------------------

loc_40246A:				; CODE XREF: sub_402217+21j
		lea	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_410CE0

loc_40247F:				; CODE XREF: sub_402217+2Aj
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0B8h], 0
		call	sub_4126A0
		jmp	loc_40230C
sub_402217	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4024A0	proc near		; CODE XREF: sub_4024A0+3EAp
					; sub_4024A0+638p ...

var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B2		= byte ptr -1B2h
var_1B1		= byte ptr -1B1h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= byte ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_128		= dword	ptr -128h
var_F8		= dword	ptr -0F8h
var_F0		= dword	ptr -0F0h
var_E8		= dword	ptr -0E8h
var_E0		= dword	ptr -0E0h
var_D8		= dword	ptr -0D8h
var_D0		= dword	ptr -0D0h
var_C8		= byte ptr -0C8h
var_B8		= byte ptr -0B8h
var_A8		= byte ptr -0A8h
var_98		= dword	ptr -98h
var_90		= dword	ptr -90h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_30		= byte ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 1D8h
		mov	[ebp+var_194], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_13C], eax
		lea	eax, [ebp+var_15C]
		mov	[ebp+var_144], offset sub_413F20
		mov	[ebp+var_140], offset dword_414634
		mov	[ebp+var_138], offset loc_4034E6
		mov	[ebp+var_134], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	ds:byte_41D02C,	0
		jz	loc_402584
		mov	edx, [ebp+var_194]
		lea	ecx, [ebp+var_C]
		mov	[esp], ecx
		mov	[esp+4], edx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN9QDBusUtil16argumentToStringERK8QVariant
		lea	eax, [ebp+var_10]
		lea	edx, [ebp+var_C]
		sub	esp, 4
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 24h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_10]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	[esp], eax	; char *
		mov	[ebp+var_158], 23h
		call	puts
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4028FE

loc_402563:				; CODE XREF: sub_4024A0+474j
		mov	eax, [ebp+var_C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4028D8

loc_402574:				; CODE XREF: sub_4024A0+433j
					; sub_4024A0+5B4j ...
		lea	eax, [ebp+var_15C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_402584:				; CODE XREF: sub_4024A0+51j
		mov	eax, [ebp+var_194]
		mov	edx, ds:_ZNK8QVariant8userTypeEv
		mov	[esp], eax
		mov	[ebp+var_16C], edx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	edx ; _ZNK8QVariant8userTypeEv
		cmp	eax, 0Bh
		jz	loc_402919
		mov	eax, [ebp+var_194]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	[ebp+var_16C]
		cmp	eax, 9
		jz	loc_402BFB
		mov	edx, [ebp+var_194]
		mov	[esp], edx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	[ebp+var_16C]
		cmp	eax, 8
		jz	loc_402A7B
		mov	eax, [ebp+var_194]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	[ebp+var_16C]
		mov	[ebp+var_1BC], eax
		mov	eax, dword_419A58
		test	eax, eax
		jnz	short loc_40263C
		mov	dword ptr [esp+8], offset sub_410610
		mov	dword ptr [esp+4], offset sub_410510
		mov	dword ptr [esp], offset	aQdbusvariant ;	"QDBusVariant"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A58, eax

loc_40263C:				; CODE XREF: sub_4024A0+178j
		mov	eax, dword_419A58
		cmp	[ebp+var_1BC], eax
		jz	loc_402DA1
		mov	ecx, [ebp+var_194]
		mov	[esp], ecx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZNK8QVariant8userTypeEv
		mov	[ebp+var_1B8], eax
		mov	eax, dword_419A5C
		test	eax, eax
		jz	loc_40301C

loc_402679:				; CODE XREF: sub_4024A0+B9Ej
		mov	eax, dword_419A5C
		cmp	[ebp+var_1B8], eax
		jnz	loc_402CFA
		mov	eax, dword_419A5C
		test	eax, eax
		jnz	short loc_4026BF
		mov	dword ptr [esp+8], offset sub_4106F0
		mov	dword ptr [esp+4], offset sub_410540
		mov	dword ptr [esp], offset	aQdbusargument ; "QDBusArgument"
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A5C, eax

loc_4026BF:				; CODE XREF: sub_4024A0+1F1j
		mov	eax, dword_419A5C
		mov	edx, [ebp+var_194]
		mov	[ebp+var_1AC], eax
		mov	[esp], edx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	[ebp+var_1AC], eax
		jz	loc_4034A4
		cmp	[ebp+var_1AC], 0FFh
		jle	loc_402E9F

loc_4026FF:				; CODE XREF: sub_4024A0+FFFj
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentC1Ev

loc_402715:				; CODE XREF: sub_4024A0+A7Ej
					; sub_4024A0+1023j
		lea	eax, [ebp+var_34]
		lea	edx, [ebp+var_30]
		mov	[ebp+var_38], offset aAv ; "av"
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 16h
		call	ds:_ZNK13QDBusArgument16currentSignatureEv
		push	eax
		lea	eax, [ebp+var_38]
		mov	[esp+4], eax
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		mov	[ebp+var_158], 15h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_1B2], al
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		mov	[ebp+var_158], 16h
		call	sub_4126A0
		cmp	[ebp+var_1B2], 0
		jz	loc_403043
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_3C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_158], 9
		call	ds:_ZNK13QDBusArgument10beginArrayEv
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	sub_411DA0
		mov	ecx, ds:_ZNK13QDBusArgument5atEndEv
		mov	[ebp+var_178], ecx
		jmp	short loc_402830
; ---------------------------------------------------------------------------
		align 10h

loc_4027C0:				; CODE XREF: sub_4024A0+3A8j
		mov	eax, [ebp+var_E0]
		lea	edx, [ebp+var_30]
		mov	[ebp+var_E8], 0
		and	eax, 0C0000000h
		mov	[ebp+var_E0], eax
		lea	eax, [ebp+var_E8]
		mov	byte ptr [ebp+var_E0+3], 80h
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_158], 8
		call	ds:_ZrsRK13QDBusArgumentR8QVariant
		lea	ecx, [ebp+var_E8]
		lea	eax, [ebp+var_3C]
		mov	[esp+4], ecx
		mov	[esp], eax
		call	sub_411EA0
		lea	edx, [ebp+var_E8]
		mov	[esp], edx
		mov	[ebp+var_158], 9
		call	ds:_ZN8QVariantD1Ev

loc_402830:				; CODE XREF: sub_4024A0+31Aj
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_158], 9
		call	[ebp+var_178]
		test	al, al
		jz	loc_4027C0
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgument8endArrayEv
		lea	eax, [ebp+var_3C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		mov	[ebp+var_158], 14h
		call	ds:_ZN8QVariantC1ERK5QListIS_E
		lea	eax, [ebp+var_B8]
		mov	[ebp+var_158], 13h
		call	sub_4024A0
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		mov	[ebp+var_158], 14h
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_158], 16h
		call	sub_412440

loc_4028BD:				; CODE XREF: sub_4024A0+F59j
					; sub_4024A0+FE4j
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentD1Ev
		jmp	loc_402574
; ---------------------------------------------------------------------------

loc_4028D8:				; CODE XREF: sub_4024A0+CEj
		mov	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN7QString4freeEPNS_4DataE
		lea	eax, [ebp+var_15C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_4028FE:				; CODE XREF: sub_4024A0+BDj
		mov	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_158], 24h
		call	ds:_Z5qFreePv
		jmp	loc_402563
; ---------------------------------------------------------------------------

loc_402919:				; CODE XREF: sub_4024A0+108j
		mov	ecx, [ebp+var_194]
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[esp+4], ecx
		call	ds:_ZNK8QVariant12toStringListEv
		mov	eax, [ebp+var_14]
		mov	[ebp+var_74], eax
		sub	esp, 4
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_74]
		test	byte ptr [eax+10h], 1
		jz	loc_402E85

loc_40294B:				; CODE XREF: sub_4024A0+9FAj
		mov	eax, [ebp+var_74]
		mov	[ebp+var_70], 0
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_6C], edx
		mov	edx, [eax+0Ch]
		lea	eax, [eax+edx*4+14h]
		mov	[ebp+var_68], eax
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402D80

loc_40297A:				; CODE XREF: sub_4024A0+8FCj
		mov	edx, [ebp+var_70]
		test	edx, edx
		jnz	loc_402A49
		mov	edx, [ebp+var_6C]
		cmp	edx, [ebp+var_68]
		jz	loc_402A49
		mov	ecx, ds:_ZNK7QString11toLocal8BitEv
		mov	[ebp+var_170], ecx
		jmp	short loc_4029A9
; ---------------------------------------------------------------------------
		align 10h

loc_4029A0:				; CODE XREF: sub_4024A0+5A3j
		cmp	edx, [ebp+var_68]
		jz	loc_402A49

loc_4029A9:				; CODE XREF: sub_4024A0+4FDj
		mov	eax, [edx]
		mov	[ebp+var_60], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_60]
		mov	[ebp+var_18], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_18]
		lea	edx, [ebp+var_1C]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_158], 1Fh
		call	[ebp+var_170]
		mov	eax, [ebp+var_1C]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	[esp], eax	; char *
		mov	[ebp+var_158], 1Eh
		call	puts
		mov	eax, [ebp+var_1C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402BC0

loc_402A09:				; CODE XREF: sub_4024A0+736j
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402BA0

loc_402A1A:				; CODE XREF: sub_4024A0+716j
		sub	[ebp+var_70], 1
		mov	eax, [ebp+var_60]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402B82

loc_402A2F:				; CODE XREF: sub_4024A0+6F8j
		mov	eax, [ebp+var_70]
		mov	edx, [ebp+var_6C]
		add	eax, 1
		add	edx, 4
		test	eax, eax
		mov	[ebp+var_70], eax
		mov	[ebp+var_6C], edx
		jz	loc_4029A0

loc_402A49:				; CODE XREF: sub_4024A0+4DFj
					; sub_4024A0+4EBj ...
		mov	eax, [ebp+var_74]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_402574
		mov	eax, [ebp+var_74]
		mov	[esp+4], eax
		lea	eax, [ebp+var_74]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	sub_411940
		jmp	loc_402574
; ---------------------------------------------------------------------------

loc_402A7B:				; CODE XREF: sub_4024A0+14Cj
		mov	ecx, [ebp+var_194]
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[esp+4], ecx
		call	ds:_ZNK8QVariant5toMapEv
		push	edx
		mov	eax, [ebp+var_24]
		mov	edx, [eax+4]
		cmp	eax, edx
		mov	[ebp+var_18C], edx
		jz	loc_402CE0
		mov	ecx, ds:_ZNK7QString11toLocal8BitEv
		mov	[ebp+var_174], ecx
		jmp	short loc_402AF5
; ---------------------------------------------------------------------------

loc_402AB4:				; CODE XREF: sub_4024A0+6C1j
					; sub_4024A0+6DDj
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_402BE0

loc_402AC5:				; CODE XREF: sub_4024A0+756j
		mov	eax, [ebp+var_190]
		mov	[ebp+var_158], 1Bh
		add	eax, 8
		call	sub_4024A0
		mov	edx, [ebp+var_18C]
		mov	edx, [edx+4]
		cmp	edx, [ebp+var_24]
		mov	[ebp+var_18C], edx
		jz	loc_402CE0

loc_402AF5:				; CODE XREF: sub_4024A0+612j
		mov	eax, [ebp+var_18C]
		mov	edx, [ebp+var_18C]
		sub	eax, 1Ch
		mov	[ebp+var_190], eax
		mov	eax, [edx-1Ch]
		mov	[ebp+var_28], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	ecx, [ebp+var_28]
		lea	eax, [ebp+var_2C]
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_158], 1Ah
		call	[ebp+var_174]
		mov	eax, [ebp+var_2C]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp], offset	aS_0 ; "%s: "
		mov	[esp+4], eax
		mov	[ebp+var_158], 19h
		call	printf
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_402AB4
		mov	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_158], 1Ah
		call	ds:_Z5qFreePv
		jmp	loc_402AB4
; ---------------------------------------------------------------------------

loc_402B82:				; CODE XREF: sub_4024A0+589j
		mov	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_158], 21h
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_402A2F
; ---------------------------------------------------------------------------
		align 10h

loc_402BA0:				; CODE XREF: sub_4024A0+574j
		mov	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_158], 20h
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_402A1A
; ---------------------------------------------------------------------------
		align 10h

loc_402BC0:				; CODE XREF: sub_4024A0+563j
		mov	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_158], 1Fh
		call	ds:_Z5qFreePv
		jmp	loc_402A09
; ---------------------------------------------------------------------------
		align 10h

loc_402BE0:				; CODE XREF: sub_4024A0+61Fj
		mov	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_158], 1Bh
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_402AC5
; ---------------------------------------------------------------------------

loc_402BFB:				; CODE XREF: sub_4024A0+12Aj
		mov	edx, [ebp+var_194]
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK8QVariant6toListEv
		push	eax
		mov	eax, [ebp+var_20]
		mov	[ebp+var_84], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_84]
		test	byte ptr [eax+10h], 1
		jnz	short loc_402C4C
		mov	eax, [eax+4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_84]
		mov	[esp], eax
		mov	[ebp+var_158], 1Dh
		call	sub_411B60

loc_402C4C:				; CODE XREF: sub_4024A0+78Bj
		mov	eax, [ebp+var_84]
		mov	[ebp+var_80], 0
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_7C], edx
		mov	edx, [eax+0Ch]
		lea	eax, [eax+edx*4+14h]
		mov	[ebp+var_78], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_158], 1Ch
		call	sub_412440
		cmp	[ebp+var_80], 0
		jnz	short loc_402C90
		mov	eax, [ebp+var_7C]
		cmp	eax, [ebp+var_78]
		jnz	short loc_402CBD

loc_402C90:				; CODE XREF: sub_4024A0+7E6j
					; sub_4024A0+81Bj ...
		lea	eax, [ebp+var_84]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	sub_412440
		lea	eax, [ebp+var_15C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_402CB8:				; CODE XREF: sub_4024A0+83Ej
		cmp	eax, [ebp+var_78]
		jz	short loc_402C90

loc_402CBD:				; CODE XREF: sub_4024A0+7EEj
		mov	[ebp+var_158], 1Ch
		mov	eax, [eax]
		call	sub_4024A0
		mov	eax, [ebp+var_7C]
		mov	ecx, [ebp+var_80]
		add	eax, 4
		test	ecx, ecx
		mov	[ebp+var_7C], eax
		jnz	short loc_402C90
		jmp	short loc_402CB8
; ---------------------------------------------------------------------------

loc_402CE0:				; CODE XREF: sub_4024A0+600j
					; sub_4024A0+64Fj
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	sub_411800
		jmp	loc_402574
; ---------------------------------------------------------------------------

loc_402CFA:				; CODE XREF: sub_4024A0+1E4j
		mov	eax, [ebp+var_194]
		lea	edx, [ebp+var_54]
		mov	[esp], edx
		mov	[esp+4], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZNK8QVariant8toStringEv
		lea	eax, [ebp+var_58]
		push	ecx
		lea	ecx, [ebp+var_54]
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_158], 0Dh
		call	ds:_ZNK7QString11toLocal8BitEv
		push	edx
		mov	eax, [ebp+var_58]
		mov	eax, [eax+0Ch]
		mov	[esp], eax	; char *
		mov	[ebp+var_158], 0Ch
		call	puts
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_158], 0Dh
		call	sub_410CE0
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	sub_4126A0
		jmp	loc_402574
; ---------------------------------------------------------------------------

loc_402D80:				; CODE XREF: sub_4024A0+4D4j
		mov	eax, [ebp+var_14]
		mov	[esp+4], eax
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_158], 21h
		call	sub_411940
		jmp	loc_40297A
; ---------------------------------------------------------------------------

loc_402DA1:				; CODE XREF: sub_4024A0+1A7j
		mov	eax, dword_419A58
		test	eax, eax
		jz	loc_402F23

loc_402DAE:				; CODE XREF: sub_4024A0+AAFj
		mov	edx, dword_419A58
		mov	ecx, [ebp+var_194]
		mov	[ebp+var_1B0], edx
		mov	[esp], ecx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	eax, [ebp+var_1B0]
		jz	loc_402FF5
		cmp	[ebp+var_1B0], 0FFh
		jle	loc_402F54

loc_402DEF:				; CODE XREF: sub_4024A0+1041j
		and	[ebp+var_90], 0C0000000h
		movzx	eax, byte ptr [ebp+var_90+3]
		mov	[ebp+var_98], 0
		and	eax, 0FFFFFFBFh
		or	eax, 0FFFFFF80h
		mov	byte ptr [ebp+var_90+3], al

loc_402E16:				; CODE XREF: sub_4024A0+B50j
					; sub_4024A0+B77j
		lea	eax, [ebp+var_98]
		mov	[esp+4], eax
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_158], 18h
		call	ds:_ZN8QVariantC1ERKS_
		lea	eax, [ebp+var_A8]
		mov	[ebp+var_158], 17h
		call	sub_4024A0
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_158], 18h
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN8QVariantD2Ev
		jmp	loc_402574
; ---------------------------------------------------------------------------

loc_402E85:				; CODE XREF: sub_4024A0+4A5j
		lea	eax, [ebp+var_74]
		mov	[esp], eax
		mov	[ebp+var_158], 22h
		call	sub_4118C0
		jmp	loc_40294B
; ---------------------------------------------------------------------------

loc_402E9F:				; CODE XREF: sub_4024A0+259j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentC1Ev
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_5C]
		mov	eax, [eax]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edx
		mov	ecx, [ebp+var_1AC]
		mov	[esp+4], ecx
		mov	edx, [ebp+var_194]
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_158], 0Ah
		call	eax
		test	al, al
		jz	loc_403489
		lea	eax, [ebp+var_5C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentC1ERKS_
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentD1Ev
		jmp	loc_402715
; ---------------------------------------------------------------------------

loc_402F23:				; CODE XREF: sub_4024A0+908j
		mov	dword ptr [esp+8], offset sub_410610
		mov	dword ptr [esp+4], offset sub_410510
		mov	dword ptr [esp], offset	aQdbusvariant ;	"QDBusVariant"
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A58, eax
		jmp	loc_402DAE
; ---------------------------------------------------------------------------

loc_402F54:				; CODE XREF: sub_4024A0+949j
		and	[ebp+var_D0], 0C0000000h
		movzx	eax, byte ptr [ebp+var_D0+3]
		lea	edx, [ebp+var_D8]
		mov	[ebp+var_D8], 0
		and	eax, 0FFFFFFBFh
		or	eax, 0FFFFFF80h
		mov	byte ptr [ebp+var_D0+3], al
		mov	eax, ds:_ZN8QVariant7handlerE
		mov	eax, [eax]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edx
		mov	edx, [ebp+var_1B0]
		mov	[esp+4], edx
		mov	ecx, [ebp+var_194]
		mov	[esp], ecx
		mov	eax, [eax+18h]
		mov	[ebp+var_158], 0Bh
		call	eax
		test	al, al
		jz	loc_4034C8
		lea	eax, [ebp+var_D8]
		mov	[esp+4], eax
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		call	ds:_ZN8QVariantC2ERKS_
		lea	eax, [ebp+var_D8]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN8QVariantD2Ev
		jmp	loc_402E16
; ---------------------------------------------------------------------------

loc_402FF5:				; CODE XREF: sub_4024A0+939j
		mov	eax, [ebp+var_194]
		mov	[esp], eax
		call	ds:_ZNK8QVariant9constDataEv
		mov	[esp+4], eax
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		call	ds:_ZN8QVariantC2ERKS_
		jmp	loc_402E16
; ---------------------------------------------------------------------------

loc_40301C:				; CODE XREF: sub_4024A0+1D3j
		mov	dword ptr [esp+8], offset sub_4106F0
		mov	dword ptr [esp+4], offset sub_410540
		mov	dword ptr [esp], offset	aQdbusargument ; "QDBusArgument"
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A5C, eax
		jmp	loc_402679
; ---------------------------------------------------------------------------

loc_403043:				; CODE XREF: sub_4024A0+2D9j
		lea	eax, [ebp+var_40]
		lea	edx, [ebp+var_30]
		mov	[ebp+var_44], offset aASv ; "a{sv}"
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 16h
		call	ds:_ZNK13QDBusArgument16currentSignatureEv
		lea	eax, [ebp+var_44]
		push	ecx
		mov	[esp+4], eax
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_158], 12h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_1B1], al
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_158], 16h
		call	sub_4126A0
		cmp	[ebp+var_1B1], 0
		jz	loc_4033FE
		mov	edx, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_160], edx
		mov	[ebp+var_48], edx
		lock inc dword ptr [edx+34h]
		setnz	al
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_158], 7
		call	ds:_ZNK13QDBusArgument8beginMapEv
		mov	ecx, [ebp+var_160]
		mov	[ebp+var_64], ecx
		lock inc dword ptr [ecx+34h]
		setnz	al
		mov	eax, [ebp+var_64]
		cmp	[ebp+var_48], eax
		mov	[ebp+var_1A8], eax
		jz	short loc_403123
		lock inc dword ptr [eax+34h]
		setnz	al
		mov	eax, [ebp+var_48]
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jz	loc_4037DD

loc_403110:				; CODE XREF: sub_4024A0+1359j
		mov	edx, [ebp+var_1A8]
		mov	[ebp+var_48], edx
		test	byte ptr [edx+44h], 2
		jz	loc_4037C3

loc_403123:				; CODE XREF: sub_4024A0+C55j
					; sub_4024A0+1338j
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_158], 7
		call	sub_411800
		mov	ecx, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_164], ecx
		mov	[ebp+var_168], ecx

loc_40314A:				; CODE XREF: sub_4024A0+EC9j
					; sub_4024A0+EE5j
		lea	edx, [ebp+var_30]
		mov	[esp], edx
		mov	[ebp+var_158], 7
		call	ds:_ZNK13QDBusArgument5atEndEv
		test	al, al
		jnz	loc_40338A
		mov	eax, [ebp+var_164]
		mov	edx, [ebp+var_168]
		mov	[ebp+var_60], eax
		lock inc dword ptr [edx]
		setnz	al
		mov	eax, [ebp+var_F0]
		lea	ecx, [ebp+var_30]
		mov	[ebp+var_F8], 0
		and	eax, 0C0000000h
		mov	[ebp+var_F0], eax
		mov	byte ptr [ebp+var_F0+3], 80h
		mov	[esp], ecx
		mov	[ebp+var_158], 5
		call	ds:_ZNK13QDBusArgument13beginMapEntryEv
		lea	eax, [ebp+var_60]
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgumentrsER7QString
		lea	edx, [ebp+var_F8]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZrsRK13QDBusArgumentR8QVariant
		mov	eax, [ebp+var_48]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_4031F1
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		call	sub_411530

loc_4031F1:				; CODE XREF: sub_4024A0+D44j
		mov	edx, [ebp+var_48]
		mov	ecx, [edx+38h]
		test	ecx, ecx
		mov	[ebp+var_180], ecx
		js	loc_4032B2
		shl	ecx, 2
		mov	[ebp+var_188], ecx
		mov	[ebp+var_184], edx

loc_403214:				; CODE XREF: sub_4024A0+DC4j
					; sub_4024A0+DEEj
		mov	eax, [ebp+var_180]
		mov	ecx, [ebp+var_184]
		mov	eax, [ecx+eax*4+4]
		cmp	edx, eax
		mov	[ebp+var_17C], eax
		jz	short loc_403266
		lea	edx, [ebp+var_60]
		sub	eax, 1Ch
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 5
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		mov	edx, [ebp+var_17C]
		jz	short loc_403266
		mov	ecx, [ebp+var_17C]
		mov	edx, [ebp+var_48]
		mov	[ebp+var_184], ecx
		jmp	short loc_403214
; ---------------------------------------------------------------------------

loc_403266:				; CODE XREF: sub_4024A0+D8Cj
					; sub_4024A0+DB3j
		mov	ecx, [ebp+var_188]
		mov	eax, [ebp+var_184]
		mov	[ebp+ecx+var_128], eax
		sub	ecx, 4
		sub	[ebp+var_180], 1
		mov	[ebp+var_188], ecx
		js	short loc_403290
		mov	edx, [ebp+var_48]
		jmp	short loc_403214
; ---------------------------------------------------------------------------

loc_403290:				; CODE XREF: sub_4024A0+DE9j
		cmp	[ebp+var_48], edx
		jz	short loc_4032B2
		sub	edx, 1Ch
		lea	eax, [ebp+var_60]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 5
		call	ds:_ZNK7QStringltERKS_

loc_4032B2:				; CODE XREF: sub_4024A0+D5Fj
					; sub_4024A0+DF3j
		mov	eax, [ebp+var_48]
		lea	edx, [ebp+var_128]
		mov	[ebp+var_1A0], eax
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 5
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_198], eax
		sub	eax, 1Ch
		test	eax, eax
		mov	[ebp+var_1A4], eax
		jz	short loc_40330D
		mov	edx, [ebp+var_60]
		mov	ecx, [ebp+var_198]
		mov	[ecx-1Ch], edx
		lock inc dword ptr [edx]
		setnz	cl

loc_40330D:				; CODE XREF: sub_4024A0+E59j
		add	eax, 8
		jz	short loc_40332F
		lea	edx, [ebp+var_F8]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 3
		call	ds:_ZN8QVariantC1ERKS_

loc_40332F:				; CODE XREF: sub_4024A0+E70j
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		mov	[ebp+var_158], 5
		call	ds:_ZNK13QDBusArgument11endMapEntryEv
		lea	eax, [ebp+var_F8]
		mov	[esp], eax
		mov	[ebp+var_158], 6
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_60]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_40314A
		mov	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_158], 7
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40314A
; ---------------------------------------------------------------------------

loc_40338A:				; CODE XREF: sub_4024A0+CC2j
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	ds:_ZNK13QDBusArgument6endMapEv
		lea	eax, [ebp+var_48]
		mov	[esp+4], eax
		lea	eax, [ebp+var_C8]
		mov	[esp], eax
		mov	[ebp+var_158], 11h
		call	ds:_ZN8QVariantC1ERK4QMapI7QStringS_E
		lea	eax, [ebp+var_C8]
		mov	[ebp+var_158], 10h
		call	sub_4024A0
		lea	eax, [ebp+var_C8]
		mov	[esp], eax
		mov	[ebp+var_158], 11h
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_158], 16h
		call	sub_411800
		jmp	loc_4028BD
; ---------------------------------------------------------------------------

loc_4033FE:				; CODE XREF: sub_4024A0+C07j
		lea	eax, [ebp+var_4C]
		lea	edx, [ebp+var_30]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 16h
		call	ds:_ZNK13QDBusArgument16currentSignatureEv
		lea	eax, [ebp+var_50]
		push	edx
		lea	edx, [ebp+var_4C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_158], 0Fh
		call	ds:_ZNK7QString11toLocal8BitEv
		push	eax
		mov	eax, [ebp+var_50]
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp], offset	aQdbusIDonTKnow	; "qdbus: I don't know how to display an a"...
		mov	[esp+4], eax
		mov	[ebp+var_158], 0Eh
		call	printf
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_158], 0Fh
		call	sub_410CE0
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_158], 16h
		call	sub_4126A0
		jmp	loc_4028BD
; ---------------------------------------------------------------------------

loc_403489:				; CODE XREF: sub_4024A0+A4Fj
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN13QDBusArgumentD1Ev
		jmp	loc_4026FF
; ---------------------------------------------------------------------------

loc_4034A4:				; CODE XREF: sub_4024A0+249j
		mov	ecx, [ebp+var_194]
		mov	[esp], ecx
		call	ds:_ZNK8QVariant9constDataEv
		mov	[esp+4], eax
		lea	eax, [ebp+var_30]
		mov	[esp], eax
		call	ds:_ZN13QDBusArgumentC1ERKS_
		jmp	loc_402715
; ---------------------------------------------------------------------------

loc_4034C8:				; CODE XREF: sub_4024A0+B18j
		lea	eax, [ebp+var_D8]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	ds:_ZN8QVariantD2Ev
		jmp	loc_402DEF
; ---------------------------------------------------------------------------

loc_4034E6:				; DATA XREF: sub_4024A0+32o
		add	ebp, 8
		mov	eax, [ebp+var_158]
		mov	ecx, [ebp+var_154]
		cmp	eax, 1
		mov	[ebp+var_19C], ecx
		jz	loc_40372A
		cmp	eax, 2
		jz	loc_4036FF
		cmp	eax, 3
		jz	loc_4036E8
		cmp	eax, 4
		jz	loc_403677
		cmp	eax, 5
		jz	loc_403690
		cmp	eax, 6
		nop
		lea	esi, [esi+0]
		jz	loc_4036A5
		cmp	eax, 7
		jz	loc_40392E
		cmp	eax, 8
		jz	loc_403914
		cmp	eax, 9
		nop
		lea	esi, [esi+0]
		jz	loc_403A80
		cmp	eax, 0Ah
		jz	loc_403A4F
		cmp	eax, 0Bh
		jz	loc_403A0D
		cmp	eax, 0Ch
		nop
		lea	esi, [esi+0]
		jz	loc_403A22
		cmp	eax, 0Dh
		jz	loc_403981
		cmp	eax, 0Eh
		jz	loc_403996
		cmp	eax, 0Fh
		nop
		lea	esi, [esi+0]
		jz	loc_403963
		cmp	eax, 10h
		jz	loc_4036A5
		cmp	eax, 11h
		jz	loc_403949
		cmp	eax, 12h
		nop
		lea	esi, [esi+0]
		jz	loc_4038FB
		cmp	eax, 13h
		jz	loc_403914
		cmp	eax, 14h
		jz	loc_4038E1
		cmp	eax, 15h
		nop
		lea	esi, [esi+0]
		jz	loc_4036BA
		cmp	eax, 16h
		jz	loc_403897
		cmp	eax, 17h
		jz	loc_4038B0
		cmp	eax, 18h
		nop
		lea	esi, [esi+0]
		jz	loc_403A88
		cmp	eax, 19h
		jz	loc_403A9D
		cmp	eax, 1Ah
		jz	loc_403AB2
		cmp	eax, 1Bh
		nop
		lea	esi, [esi+0]
		jz	loc_4039DD
		cmp	eax, 1Ch
		jz	loc_4039B0
		cmp	eax, 1Dh
		jz	loc_40382B
		cmp	eax, 1Eh
		nop
		lea	esi, [esi+0]
		jz	loc_403840
		cmp	eax, 1Fh
		jz	loc_403855
		cmp	eax, 20h
		jz	loc_40386A
		cmp	eax, 21h
		nop
		lea	esi, [esi+0]
		jz	loc_4037FE
		cmp	eax, 22h
		jz	loc_403781
		cmp	eax, 23h
		jz	loc_403796
		mov	[ebp+var_158], 0
		call	sub_413920

loc_403677:				; CODE XREF: sub_4024A0+1079j
		lea	eax, [ebp+var_F8]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	ds:_ZN8QVariantD1Ev

loc_403690:				; CODE XREF: sub_4024A0+1082j
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0

loc_4036A5:				; CODE XREF: sub_4024A0+1090j
					; sub_4024A0+10F9j ...
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_411800

loc_4036BA:				; CODE XREF: sub_4024A0+1130j
					; sub_4024A0+1456j ...
		lea	eax, [ebp+var_30]

loc_4036BD:				; CODE XREF: sub_4024A0+15E3j
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	ds:_ZN13QDBusArgumentD1Ev
		mov	ecx, [ebp+var_19C]
		mov	[esp], ecx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4036E8:				; CODE XREF: sub_4024A0+1070j
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_411800
		jmp	short loc_4036A5
; ---------------------------------------------------------------------------

loc_4036FF:				; CODE XREF: sub_4024A0+1067j
		mov	eax, [ebp+var_19C]
		mov	[esp], eax
		call	sub_413650
		mov	edx, [ebp+var_1A4]
		mov	[esp], edx
		mov	[ebp+var_158], 2
		call	sub_4126A0
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_40372A:				; CODE XREF: sub_4024A0+105Ej
		mov	[ebp+var_158], 0
		call	sub_413920
		mov	ecx, [ebp+var_19C]
		mov	[esp], ecx
		call	sub_413650
		mov	eax, [ebp+var_198]
		mov	dword ptr [esp+8], 1Ch
		mov	[esp+0Ch], eax
		lea	eax, [ebp+var_128]
		mov	[esp+4], eax
		mov	edx, [ebp+var_1A0]
		mov	[esp], edx
		mov	[ebp+var_158], 1
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_403781:				; CODE XREF: sub_4024A0+11B9j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_410CE0

loc_403796:				; CODE XREF: sub_4024A0+11C2j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0
		mov	ecx, [ebp+var_19C]
		mov	[esp], ecx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4037C3:				; CODE XREF: sub_4024A0+C7Dj
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_158], 4
		call	sub_411530
		jmp	loc_403123
; ---------------------------------------------------------------------------

loc_4037DD:				; CODE XREF: sub_4024A0+C6Aj
		mov	eax, [ebp+var_48]
		mov	[esp+4], eax
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_158], 4
		call	sub_411790
		jmp	loc_403110
; ---------------------------------------------------------------------------

loc_4037FE:				; CODE XREF: sub_4024A0+11B0j
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_411210
		mov	eax, [ebp+var_19C]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_40382B:				; CODE XREF: sub_4024A0+1182j
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_410CE0

loc_403840:				; CODE XREF: sub_4024A0+1190j
		lea	eax, [ebp+var_18]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0

loc_403855:				; CODE XREF: sub_4024A0+1199j
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0

loc_40386A:				; CODE XREF: sub_4024A0+11A2j
		lea	eax, [ebp+var_74]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_411210
		mov	ecx, [ebp+var_19C]
		mov	[esp], ecx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_403897:				; CODE XREF: sub_4024A0+1139j
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	ds:_ZN8QVariantD1Ev

loc_4038B0:				; CODE XREF: sub_4024A0+1142j
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	ds:_ZN8QVariantD2Ev
		mov	edx, [ebp+var_19C]
		mov	[esp], edx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4038E1:				; CODE XREF: sub_4024A0+1122j
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0
		jmp	loc_4036BA
; ---------------------------------------------------------------------------

loc_4038FB:				; CODE XREF: sub_4024A0+1110j
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	ds:_ZN8QVariantD1Ev

loc_403914:				; CODE XREF: sub_4024A0+10A2j
					; sub_4024A0+1119j ...
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_412440
		jmp	loc_4036BA
; ---------------------------------------------------------------------------

loc_40392E:				; CODE XREF: sub_4024A0+1099j
		lea	eax, [ebp+var_E8]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_403914
; ---------------------------------------------------------------------------

loc_403949:				; CODE XREF: sub_4024A0+1102j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0
		jmp	loc_4036BA
; ---------------------------------------------------------------------------

loc_403963:				; CODE XREF: sub_4024A0+10F0j
		lea	eax, [ebp+var_C8]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_4036A5
; ---------------------------------------------------------------------------

loc_403981:				; CODE XREF: sub_4024A0+10D9j
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_410CE0

loc_403996:				; CODE XREF: sub_4024A0+10E2j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0
		jmp	loc_4036BA
; ---------------------------------------------------------------------------

loc_4039B0:				; CODE XREF: sub_4024A0+1179j
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_412440
		mov	ecx, [ebp+var_19C]
		mov	[esp], ecx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4039DD:				; CODE XREF: sub_4024A0+1170j
		lea	eax, [ebp+var_84]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_412440
		mov	eax, [ebp+var_19C]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_403A0D:				; CODE XREF: sub_4024A0+10C2j
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_410CE0

loc_403A22:				; CODE XREF: sub_4024A0+10D0j
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0
		mov	eax, [ebp+var_19C]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_403A4F:				; CODE XREF: sub_4024A0+10B9j
		lea	eax, [ebp+var_D8]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	ds:_ZN8QVariantD2Ev
		mov	eax, [ebp+var_19C]
		mov	[esp], eax
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_403A80:				; CODE XREF: sub_4024A0+10B0j
		lea	eax, [ebp+var_5C]
		jmp	loc_4036BD
; ---------------------------------------------------------------------------

loc_403A88:				; CODE XREF: sub_4024A0+1150j
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_410CE0

loc_403A9D:				; CODE XREF: sub_4024A0+1159j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_4126A0

loc_403AB2:				; CODE XREF: sub_4024A0+1162j
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_158], 0
		call	sub_411800
		mov	ecx, [ebp+var_19C]
		mov	[esp], ecx
		mov	[ebp+var_158], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_4024A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403AE0	proc near		; CODE XREF: sub_408C80+153Ap

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_85		= byte ptr -85h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_78		= dword	ptr -78h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0A8h
		mov	[ebp+var_90], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_5C], eax
		lea	eax, [ebp+var_7C]
		mov	[ebp+var_8C], edx
		mov	[esp], eax
		mov	[ebp+var_64], offset sub_413F20
		mov	[ebp+var_60], offset dword_414698
		mov	[ebp+var_58], offset sub_403DFE
		mov	[ebp+var_54], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+var_8C]
		lea	eax, [ebp+var_C]
		mov	dword ptr [esp+0Ch], 1
		mov	dword ptr [esp+8], 1
		mov	[esp], eax
		mov	[esp+4], edx
		mov	[ebp+var_78], 0FFFFFFFFh
		call	ds:_ZN7QRegExpC1ERK7QStringN2Qt15CaseSensitivityENS_13PatternSyntaxE
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[ebp+var_78], 8
		call	ds:_ZNK7QRegExp7isValidEv
		test	al, al
		mov	[ebp+var_85], 0
		jz	loc_403C8D
		mov	edx, [ebp+var_90]
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_78], 8
		mov	[esp+4], edx
		call	ds:_ZNK24QDBusConnectionInterface22registeredServiceNamesEv
		mov	eax, [ebp+var_2C]
		sub	esp, 4
		mov	[ebp+var_10], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		test	byte ptr [eax+10h], 1
		jz	loc_403DC8

loc_403BA6:				; CODE XREF: sub_403AE0+2FAj
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_403DAA

loc_403BB7:				; CODE XREF: sub_403AE0+2E3j
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_403D92

loc_403BC8:				; CODE XREF: sub_403AE0+2C5j
		mov	eax, [ebp+var_38]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_403D7A

loc_403BD9:				; CODE XREF: sub_403AE0+2ADj
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 6
		call	ds:_ZN9QtPrivate16QStringList_sortEP11QStringList
		mov	eax, [ebp+var_10]
		mov	[ebp+var_28], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_28]
		test	byte ptr [eax+10h], 1
		jz	loc_403D6A

loc_403C05:				; CODE XREF: sub_403AE0+295j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_24], 0
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ecx*4+14h]
		cmp	edx, eax
		mov	[ebp+var_20], edx
		mov	[ebp+var_1C], eax
		jz	short loc_403C64
		mov	eax, ds:_ZNK7QRegExp10exactMatchERK7QString
		mov	[ebp+var_80], eax
		jmp	short loc_403C36
; ---------------------------------------------------------------------------

loc_403C31:				; CODE XREF: sub_403AE0+182j
		cmp	edx, [ebp+var_1C]
		jz	short loc_403C64

loc_403C36:				; CODE XREF: sub_403AE0+14Fj
		mov	[ebp+var_84], edx
		mov	[esp+4], edx
		lea	edx, [ebp+var_C]
		mov	[esp], edx
		mov	[ebp+var_78], 5
		call	[ebp+var_80]
		test	al, al
		jnz	short loc_403CB4

loc_403C54:				; CODE XREF: sub_403AE0+22Fj
					; sub_403AE0+248j
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		add	edx, 4
		test	eax, eax
		mov	[ebp+var_20], edx
		jz	short loc_403C31

loc_403C64:				; CODE XREF: sub_403AE0+145j
					; sub_403AE0+154j
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_403DE0

loc_403C75:				; CODE XREF: sub_403AE0+319j
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		mov	[ebp+var_85], 1
		jz	loc_403D45

loc_403C8D:				; CODE XREF: sub_403AE0+87j
					; sub_403AE0+285j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_78], 0FFFFFFFFh
		call	ds:_ZN7QRegExpD1Ev
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		movzx	eax, [ebp+var_85]
		leave
		retn
; ---------------------------------------------------------------------------

loc_403CB4:				; CODE XREF: sub_403AE0+172j
		mov	edx, [ebp+var_84]
		mov	eax, [edx]
		mov	[ebp+var_14], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_14]
		lea	edx, [ebp+var_18]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_78], 4
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_18]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	[ebp+var_78], 3
		mov	[esp], eax	; char *
		call	puts
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_403D30

loc_403D04:				; CODE XREF: sub_403AE0+263j
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_403C54
		mov	eax, [ebp+var_14]
		mov	[ebp+var_78], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_403C54
; ---------------------------------------------------------------------------
		align 10h

loc_403D30:				; CODE XREF: sub_403AE0+222j
		mov	eax, [ebp+var_18]
		mov	[ebp+var_78], 4
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	short loc_403D04
; ---------------------------------------------------------------------------

loc_403D45:				; CODE XREF: sub_403AE0+1A7j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_78], 8
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	sub_411940
		mov	[ebp+var_85], 1
		jmp	loc_403C8D
; ---------------------------------------------------------------------------

loc_403D6A:				; CODE XREF: sub_403AE0+11Fj
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	sub_4118C0
		jmp	loc_403C05
; ---------------------------------------------------------------------------

loc_403D7A:				; CODE XREF: sub_403AE0+F3j
		mov	eax, [ebp+var_38]
		mov	[ebp+var_78], 6
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_403BD9
; ---------------------------------------------------------------------------

loc_403D92:				; CODE XREF: sub_403AE0+E2j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_78], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_403BC8
; ---------------------------------------------------------------------------

loc_403DAA:				; CODE XREF: sub_403AE0+D1j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_78], 2
		mov	[esp+4], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_403BB7
; ---------------------------------------------------------------------------

loc_403DC8:				; CODE XREF: sub_403AE0+C0j
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_78], 7
		call	sub_4118C0
		jmp	loc_403BA6
; ---------------------------------------------------------------------------
		align 10h

loc_403DE0:				; CODE XREF: sub_403AE0+18Fj
		mov	eax, [ebp+var_28]
		mov	[ebp+var_78], 6
		mov	[esp+4], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_403C75
sub_403AE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_403DFE	proc near		; DATA XREF: sub_403AE0+2Fo
		add	ebp, 8
		mov	eax, [ebp-78h]
		mov	edx, [ebp-74h]
		cmp	eax, 1
		mov	[ebp-94h], edx
		jz	loc_403EE2
		cmp	eax, 2
		jz	loc_403EA7
		cmp	eax, 3
		jz	loc_403EB9
		cmp	eax, 4
		nop
		lea	esi, [esi+0]
		jz	loc_403ECB
		cmp	eax, 5
		jz	short loc_403E59
		cmp	eax, 6
		xchg	ax, ax
		jz	short loc_403E93
		cmp	eax, 7
		jz	short loc_403E6B
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_4126A0

loc_403E59:				; CODE XREF: sub_403DFE+3Bj
					; sub_403DFE+DFj ...
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_411210

loc_403E6B:				; CODE XREF: sub_403DFE+47j
					; sub_403DFE+A7j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	ds:_ZN7QRegExpD1Ev
		mov	eax, [ebp-94h]
		mov	dword ptr [ebp-78h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_403E93:				; CODE XREF: sub_403DFE+42j
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_410DD0
		jmp	short loc_403E6B
; ---------------------------------------------------------------------------

loc_403EA7:				; CODE XREF: sub_403DFE+1Bj
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_410CE0

loc_403EB9:				; CODE XREF: sub_403DFE+24j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_4126A0

loc_403ECB:				; CODE XREF: sub_403DFE+32j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_411210
		jmp	loc_403E59
; ---------------------------------------------------------------------------

loc_403EE2:				; CODE XREF: sub_403DFE+12j
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-78h], 0
		call	sub_410D10
		jmp	loc_403E59
sub_403DFE	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403F00	proc near		; CODE XREF: sub_403F00+620p
					; sub_408C80+D8Cp

var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_FD		= byte ptr -0FDh
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= byte ptr -0ECh
var_E8		= dword	ptr -0E8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_9C		= dword	ptr -9Ch
var_98		= byte ptr -98h
var_88		= byte ptr -88h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 138h
		mov	[ebp+var_108], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_CC], eax
		lea	eax, [ebp+var_EC]
		mov	[ebp+var_104], edx
		mov	[esp], eax
		mov	[ebp+var_D4], offset sub_413F20
		mov	[ebp+var_D0], offset dword_4146AC
		mov	[ebp+var_C8], offset sub_404C03
		mov	[ebp+var_C4], esp
		call	_Unwind_SjLj_Register
		mov	edx, ds:_ZN7QString17fromLatin1_helperEPKci
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aIntrospect ; "Introspect"
		mov	[ebp+var_E8], 0FFFFFFFFh
		mov	[ebp+var_F8], edx
		call	edx ; _ZN7QString17fromLatin1_helperEPKci
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aOrg_freedeskto	; "org.freedesktop.DBus.Introspectable"
		mov	[ebp+var_E8], 29h
		mov	[ebp+var_18], eax
		call	[ebp+var_F8]
		mov	edx, [ebp+var_104]
		mov	[ebp+var_14], eax
		mov	eax, [edx]
		mov	edx, [eax+8]
		test	edx, edx
		jz	loc_4048C9
		mov	[ebp+var_10], eax
		lock inc dword ptr [eax]
		setnz	dl

loc_403FB8:				; CODE XREF: sub_403F00+9EBj
		lea	edx, [ebp+var_18]
		mov	[esp+10h], edx
		lea	edx, [ebp+var_14]
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_10]
		mov	[esp+8], edx
		mov	edx, [ebp+var_108]
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_E8], 27h
		mov	[esp+4], edx
		call	ds:_ZN12QDBusMessage16createMethodCallERK7QStringS2_S2_S2_
		sub	esp, 4
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404890

loc_404001:				; CODE XREF: sub_403F00+9A6j
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404870

loc_404012:				; CODE XREF: sub_403F00+986j
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404852

loc_404023:				; CODE XREF: sub_403F00+968j
		lea	eax, [ebp+var_1C]
		lea	edx, [ebp+var_C]
		mov	dword ptr [esp+10h], 0FFFFFFFFh
		mov	dword ptr [esp+0Ch], 1
		mov	[esp+8], edx
		mov	dword ptr [esp+4], offset dword_41D028
		mov	[esp], eax
		mov	[ebp+var_E8], 24h
		call	ds:_ZNK15QDBusConnection4callERK12QDBusMessageN5QDBus8CallModeEi
		sub	esp, 4
		lea	eax, [ebp+var_AC]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		mov	[ebp+var_E8], 23h
		call	ds:_ZN10QDBusErrorC1EPK9DBusError
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_F4], edx
		mov	[ebp+var_9C], edx
		mov	[ebp+var_F0], edx
		lock inc dword ptr [edx]
		setnz	al
		lea	eax, [ebp+var_98]
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Ah
		mov	[esp], eax
		mov	[ebp+var_E8], 8
		call	ds:_ZN8QVariantC1EiPKv
		lea	eax, [ebp+var_98]
		mov	[esp+8], eax
		lea	eax, [ebp+var_AC]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_E8], 7
		call	ds:_Z14qDBusReplyFillRK12QDBusMessageR10QDBusErrorR8QVariant
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	eax, 0Ah
		jz	loc_4048F0
		mov	eax, [ebp+var_F4]
		mov	[ebp+var_74], eax
		lock inc dword ptr [eax]
		setnz	al
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_74]
		mov	eax, [eax]
		mov	[esp+8], edx
		lea	edx, [ebp+var_98]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+4], 0Ah
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_E8], 5
		call	eax
		test	al, al
		jnz	loc_4045D1
		mov	eax, [ebp+var_74]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404B5E

loc_404163:				; CODE XREF: sub_403F00+C74j
		mov	eax, [ebp+var_F4]
		mov	[ebp+var_78], eax
		lock inc dword ptr [eax]
		setnz	al

loc_404172:				; CODE XREF: sub_403F00+6E8j
					; sub_403F00+704j ...
		lea	eax, [ebp+var_78]
		mov	[esp+4], eax
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		mov	[ebp+var_E8], 6
		call	ds:_ZN7QStringaSERKS_
		mov	eax, [ebp+var_78]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404837

loc_4041A3:				; CODE XREF: sub_403F00+94Dj
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_E8], 8
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_E8], 22h
		call	ds:_ZN12QDBusMessageD1Ev
		mov	edx, [ebp+var_104]
		mov	eax, [edx]
		mov	ecx, [eax+8]
		test	ecx, ecx
		jnz	loc_4047D0
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		call	ds:_ZNK10QDBusError7isValidEv
		test	al, al
		jnz	loc_40490F
		mov	dword ptr [esp], offset	asc_41A190 ; "/"
		call	puts

loc_404208:				; CODE XREF: sub_403F00+8EBj
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_E8], 22h
		call	ds:_ZN12QDomDocumentC1Ev
		mov	eax, [ebp+var_9C]
		mov	[ebp+var_3C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	[esp], eax
		mov	[ebp+var_E8], 19h
		call	ds:_ZN12QDomDocument10setContentERK7QStringPS0_PiS4_
		mov	eax, [ebp+var_3C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404A7B

loc_404273:				; CODE XREF: sub_403F00+B91j
		lea	eax, [ebp+var_40]
		lea	edx, [ebp+var_38]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 1Ah
		call	ds:_ZNK12QDomDocument15documentElementEv
		mov	edx, [ebp+var_F4]
		sub	esp, 4
		mov	[ebp+var_48], edx
		lock inc dword ptr [edx]
		setnz	al
		lea	edx, [ebp+var_48]
		lea	eax, [ebp+var_44]
		mov	[esp+8], edx
		lea	edx, [ebp+var_40]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 17h
		call	ds:_ZNK8QDomNode17firstChildElementERK7QString
		sub	esp, 4
		mov	eax, [ebp+var_48]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404A60

loc_4042DA:				; CODE XREF: sub_403F00+B76j
		mov	edx, ds:_ZNK8QDomNode6isNullEv
		mov	[ebp+var_FC], edx

loc_4042E6:				; CODE XREF: sub_403F00+6B0j
					; sub_403F00+6CCj
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_E8], 16h
		call	[ebp+var_FC]
		test	al, al
		jnz	loc_404725
		lea	eax, [ebp+var_44]
		lea	edx, [ebp+var_4C]
		mov	[ebp+var_50], offset aNode ; "node"
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_E8], 16h
		call	ds:_ZNK11QDomElement7tagNameEv
		sub	esp, 4
		lea	eax, [ebp+var_50]
		lea	edx, [ebp+var_4C]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_E8], 15h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_FD], al
		mov	eax, [ebp+var_4C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404610

loc_40435F:				; CODE XREF: sub_403F00+726j
		cmp	[ebp+var_FD], 0
		jz	loc_404536
		mov	eax, [ebp+var_F4]
		mov	edx, [ebp+var_F0]
		mov	[ebp+var_5C], eax
		lock inc dword ptr [edx]
		setnz	al
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aName ;	"name"
		mov	[ebp+var_E8], 14h
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		lea	edx, [ebp+var_5C]
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_58]
		mov	[ebp+var_58], eax
		lea	eax, [ebp+var_60]
		mov	[esp+8], edx
		lea	edx, [ebp+var_44]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 13h
		call	ds:_ZNK11QDomElement9attributeERK7QStringS2_
		mov	edx, [ebp+var_104]
		sub	esp, 4
		mov	eax, [edx]
		mov	[ebp+var_54], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_54]
		mov	edx, [eax]
		cmp	edx, 1
		jz	loc_404710
		mov	edx, [eax+8]

loc_4043F3:				; CODE XREF: sub_403F00+820j
		add	edx, 1
		mov	[esp], edx
		mov	[ebp+var_E8], 0Ah
		call	ds:_ZN7QString4growEi
		mov	[esp+4], eax
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		call	ds:_ZN7QString7reallocEi
		mov	eax, [ebp+var_54]
		mov	edx, [eax+8]

loc_40441F:				; CODE XREF: sub_403F00+816j
		mov	ecx, [eax+0Ch]
		mov	word ptr [ecx+edx*2], 2Fh
		add	edx, 1
		mov	[eax+8], edx
		mov	eax, [ebp+var_54]
		mov	ecx, [eax+8]
		mov	edx, [eax+0Ch]
		mov	[ebp+var_74], eax
		mov	word ptr [edx+ecx*2], 0
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_60]
		mov	[esp+4], eax
		lea	eax, [ebp+var_74]
		mov	[esp], eax
		mov	[ebp+var_E8], 9
		call	ds:_ZN7QString6appendERKS_
		mov	eax, [ebp+var_54]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4046F0

loc_404474:				; CODE XREF: sub_403F00+806j
		mov	eax, [ebp+var_60]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4046D0

loc_404485:				; CODE XREF: sub_403F00+7E6j
		mov	eax, [ebp+var_58]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4046B0

loc_404496:				; CODE XREF: sub_403F00+7C6j
		mov	eax, [ebp+var_5C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404690

loc_4044A7:				; CODE XREF: sub_403F00+7A6j
		mov	eax, [ebp+var_74]
		mov	[ebp+var_64], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_68]
		lea	edx, [ebp+var_64]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 0Eh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_68]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	[ebp+var_E8], 0Dh
		mov	[esp], eax	; char *
		call	puts
		mov	eax, [ebp+var_68]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404670

loc_4044FC:				; CODE XREF: sub_403F00+786j
		mov	eax, [ebp+var_64]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404650

loc_40450D:				; CODE XREF: sub_403F00+766j
		mov	eax, [ebp+var_108]
		lea	edx, [ebp+var_74]
		mov	[ebp+var_E8], 0Fh
		call	sub_403F00
		mov	eax, [ebp+var_74]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404630

loc_404536:				; CODE XREF: sub_403F00+466j
					; sub_403F00+746j
		mov	eax, [ebp+var_F4]
		mov	edx, [ebp+var_F0]
		mov	[ebp+var_6C], eax
		lock inc dword ptr [edx]
		setnz	al
		lea	edx, [ebp+var_6C]
		lea	eax, [ebp+var_70]
		mov	[esp+8], edx
		lea	edx, [ebp+var_44]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 0Ch
		call	ds:_ZNK8QDomNode18nextSiblingElementERK7QString
		sub	esp, 4
		lea	eax, [ebp+var_70]
		mov	[esp+4], eax
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Bh
		call	ds:_ZN11QDomElementaSERKS_
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_E8], 0Ch
		call	ds:_ZN8QDomNodeD2Ev
		mov	eax, [ebp+var_6C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_4042E6
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_E8], 16h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4042E6
; ---------------------------------------------------------------------------

loc_4045D1:				; CODE XREF: sub_403F00+24Cj
		mov	eax, [ebp+var_74]
		mov	[ebp+var_78], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_74]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_404172
		mov	eax, [ebp+var_74]
		mov	[ebp+var_E8], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404172
; ---------------------------------------------------------------------------
		align 10h

loc_404610:				; CODE XREF: sub_403F00+459j
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_E8], 16h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40435F
; ---------------------------------------------------------------------------
		align 10h

loc_404630:				; CODE XREF: sub_403F00+630j
		mov	eax, [ebp+var_74]
		mov	[ebp+var_E8], 16h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404536
; ---------------------------------------------------------------------------
		align 10h

loc_404650:				; CODE XREF: sub_403F00+607j
		mov	eax, [ebp+var_64]
		mov	[ebp+var_E8], 0Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40450D
; ---------------------------------------------------------------------------
		align 10h

loc_404670:				; CODE XREF: sub_403F00+5F6j
		mov	eax, [ebp+var_68]
		mov	[ebp+var_E8], 0Eh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_4044FC
; ---------------------------------------------------------------------------
		align 10h

loc_404690:				; CODE XREF: sub_403F00+5A1j
		mov	eax, [ebp+var_5C]
		mov	[ebp+var_E8], 0Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4044A7
; ---------------------------------------------------------------------------
		align 10h

loc_4046B0:				; CODE XREF: sub_403F00+590j
		mov	eax, [ebp+var_58]
		mov	[ebp+var_E8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404496
; ---------------------------------------------------------------------------
		align 10h

loc_4046D0:				; CODE XREF: sub_403F00+57Fj
		mov	eax, [ebp+var_60]
		mov	[ebp+var_E8], 11h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404485
; ---------------------------------------------------------------------------
		align 10h

loc_4046F0:				; CODE XREF: sub_403F00+56Ej
		mov	eax, [ebp+var_54]
		mov	[ebp+var_E8], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404474
; ---------------------------------------------------------------------------
		align 10h

loc_404710:				; CODE XREF: sub_403F00+4EAj
		mov	edx, [eax+8]
		cmp	edx, [eax+4]
		jl	loc_40441F
		lea	esi, [esi+0]
		jmp	loc_4043F3
; ---------------------------------------------------------------------------

loc_404725:				; CODE XREF: sub_403F00+3FEj
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_E8], 18h
		call	ds:_ZN8QDomNodeD2Ev
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_E8], 1Ah
		call	ds:_ZN8QDomNodeD2Ev
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_E8], 22h
		call	ds:_ZN12QDomDocumentD1Ev
		mov	eax, [ebp+var_9C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404AB4

loc_40477B:				; CODE XREF: sub_403F00+BCDj
		mov	eax, [ebp+var_A4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404A96

loc_40478F:				; CODE XREF: sub_403F00+913j
					; sub_403F00+932j ...
		mov	eax, [ebp+var_A8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4048AB

loc_4047A3:				; CODE XREF: sub_403F00+9C4j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_E8], 0FFFFFFFFh
		call	ds:_ZN12QDBusMessageD1Ev
		lea	eax, [ebp+var_EC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4047D0:				; CODE XREF: sub_403F00+2DFj
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		mov	[ebp+var_E8], 22h
		call	ds:_ZNK10QDBusError7isValidEv
		test	al, al
		jz	loc_404208
		mov	eax, [ebp+var_9C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404BE5

loc_404805:				; CODE XREF: sub_403F00+CFEj
		mov	eax, [ebp+var_A4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_40478F
		mov	eax, [ebp+var_A4]
		mov	[ebp+var_E8], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40478F
; ---------------------------------------------------------------------------

loc_404837:				; CODE XREF: sub_403F00+29Dj
		mov	eax, [ebp+var_78]
		mov	[ebp+var_E8], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4041A3
; ---------------------------------------------------------------------------

loc_404852:				; CODE XREF: sub_403F00+11Dj
		mov	eax, [ebp+var_18]
		mov	[ebp+var_E8], 24h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404023
; ---------------------------------------------------------------------------
		align 10h

loc_404870:				; CODE XREF: sub_403F00+10Cj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_E8], 25h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404012
; ---------------------------------------------------------------------------
		align 10h

loc_404890:				; CODE XREF: sub_403F00+FBj
		mov	eax, [ebp+var_10]
		mov	[ebp+var_E8], 26h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404001
; ---------------------------------------------------------------------------

loc_4048AB:				; CODE XREF: sub_403F00+89Dj
		mov	eax, [ebp+var_A8]
		mov	[ebp+var_E8], 24h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4047A3
; ---------------------------------------------------------------------------

loc_4048C9:				; CODE XREF: sub_403F00+A9j
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	asc_41A190 ; "/"
		mov	[ebp+var_E8], 28h
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		mov	[ebp+var_10], eax
		jmp	loc_403FB8
; ---------------------------------------------------------------------------

loc_4048F0:				; CODE XREF: sub_403F00+1FFj
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		call	ds:_ZNK8QVariant9constDataEv
		mov	eax, [eax]
		mov	[ebp+var_78], eax
		lock inc dword ptr [eax]
		setnz	dl
		jmp	loc_404172
; ---------------------------------------------------------------------------

loc_40490F:				; CODE XREF: sub_403F00+2F6j
		lea	eax, [ebp+var_AC]
		mov	[esp+4], eax
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_E8], 22h
		call	ds:_ZN10QDBusErrorC1ERKS_
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_E8], 21h
		call	ds:_ZNK10QDBusError4typeEv
		cmp	eax, 4
		jz	loc_404AD2
		lea	eax, [ebp+var_30]
		lea	edx, [ebp+var_88]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 21h
		call	ds:_ZNK10QDBusError7messageEv
		sub	esp, 4
		lea	eax, [ebp+var_34]
		lea	edx, [ebp+var_30]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 1Eh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_34]
		sub	esp, 4
		lea	edx, [ebp+var_88]
		mov	eax, [eax+0Ch]
		mov	[esp+4], edx
		mov	[ebp+var_E8], 1Dh
		mov	[ebp+var_10C], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	ds:_ZNK10QDBusError4nameEv
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		lea	edx, [ebp+var_28]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 1Ch
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_10C]
		sub	esp, 4
		mov	[esp+8], eax
		mov	eax, [ebp+var_2C]
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp], offset	aErrorSS ; "Error: %s\n%s\n"
		mov	[ebp+var_E8], 1Bh
		mov	[esp+4], eax
		call	printf
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404BCA

loc_404A21:				; CODE XREF: sub_403F00+CE0j
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404BAF

loc_404A32:				; CODE XREF: sub_403F00+CC5j
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404B94

loc_404A43:				; CODE XREF: sub_403F00+CAAj
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_404B79

loc_404A54:				; CODE XREF: sub_403F00+C59j
					; sub_403F00+C8Fj
		mov	dword ptr [esp], 2 ; int
		call	exit
; ---------------------------------------------------------------------------

loc_404A60:				; CODE XREF: sub_403F00+3D4j
		mov	eax, [ebp+var_48]
		mov	[ebp+var_E8], 16h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4042DA
; ---------------------------------------------------------------------------

loc_404A7B:				; CODE XREF: sub_403F00+36Dj
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_E8], 1Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404273
; ---------------------------------------------------------------------------

loc_404A96:				; CODE XREF: sub_403F00+889j
		mov	eax, [ebp+var_A4]
		mov	[ebp+var_E8], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40478F
; ---------------------------------------------------------------------------

loc_404AB4:				; CODE XREF: sub_403F00+875j
		mov	eax, [ebp+var_9C]
		mov	[ebp+var_E8], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40477B
; ---------------------------------------------------------------------------

loc_404AD2:				; CODE XREF: sub_403F00+A4Ej
		mov	edx, [ebp+var_108]
		mov	eax, [edx]
		mov	[ebp+var_20], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_24]
		lea	edx, [ebp+var_20]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_E8], 20h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_24]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aServiceSDoesNo ; "Service '%s' does not exist.\n"
		mov	[ebp+var_E8], 1Fh
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_E8], 20h
		call	sub_410CE0
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_E8], 21h
		call	sub_4126A0
		jmp	loc_404A54
; ---------------------------------------------------------------------------

loc_404B5E:				; CODE XREF: sub_403F00+25Dj
		mov	eax, [ebp+var_74]
		mov	[ebp+var_E8], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404163
; ---------------------------------------------------------------------------

loc_404B79:				; CODE XREF: sub_403F00+B4Ej
		mov	eax, [ebp+var_30]
		mov	[ebp+var_E8], 21h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404A54
; ---------------------------------------------------------------------------

loc_404B94:				; CODE XREF: sub_403F00+B3Dj
		mov	eax, [ebp+var_34]
		mov	[ebp+var_E8], 1Eh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_404A43
; ---------------------------------------------------------------------------

loc_404BAF:				; CODE XREF: sub_403F00+B2Cj
		mov	eax, [ebp+var_28]
		mov	[ebp+var_E8], 1Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404A32
; ---------------------------------------------------------------------------

loc_404BCA:				; CODE XREF: sub_403F00+B1Bj
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_E8], 1Ch
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_404A21
; ---------------------------------------------------------------------------

loc_404BE5:				; CODE XREF: sub_403F00+8FFj
		mov	eax, [ebp+var_9C]
		mov	[ebp+var_E8], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_404805
sub_403F00	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_404C03	proc near		; DATA XREF: sub_403F00+3Bo
		add	ebp, 8
		mov	eax, [ebp-0E8h]
		mov	edx, [ebp-0E4h]
		cmp	eax, 1
		mov	[ebp-110h], edx
		jz	loc_404EFC
		cmp	eax, 2
		jz	loc_404DB6
		cmp	eax, 3
		jz	loc_404EFC
		cmp	eax, 4
		jz	loc_404DFC
		cmp	eax, 5
		nop
		jz	loc_405185
		cmp	eax, 6
		jz	loc_404E11
		cmp	eax, 7
		jz	loc_404E2A
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_405156
		cmp	eax, 9
		jz	loc_40516B
		cmp	eax, 0Ah
		jz	loc_405126
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_40513C
		cmp	eax, 0Ch
		jz	loc_4050E2
		cmp	eax, 0Dh
		jz	loc_4050F7
		cmp	eax, 0Eh
		nop
		lea	esi, [esi+0]
		jz	loc_40510C
		cmp	eax, 0Fh
		jz	loc_40502E
		cmp	eax, 10h
		jz	loc_4050CB
		cmp	eax, 11h
		nop
		lea	esi, [esi+0]
		jz	loc_405087
		cmp	eax, 12h
		jz	loc_4050B1
		cmp	eax, 13h
		jz	loc_405043
		cmp	eax, 14h
		nop
		lea	esi, [esi+0]
		jz	loc_405070
		cmp	eax, 15h
		jz	loc_405058
		cmp	eax, 16h
		jz	loc_405001
		cmp	eax, 17h
		nop
		lea	esi, [esi+0]
		jz	loc_405016
		cmp	eax, 18h
		jz	loc_404FD1
		cmp	eax, 19h
		jz	loc_404FE6
		cmp	eax, 1Ah
		nop
		lea	esi, [esi+0]
		jz	loc_404F78
		cmp	eax, 1Bh
		jz	loc_404F8D
		cmp	eax, 1Ch
		jz	loc_404FA2
		cmp	eax, 1Dh
		nop
		lea	esi, [esi+0]
		jz	loc_404FB7
		cmp	eax, 1Eh
		jz	loc_404F19
		cmp	eax, 1Fh
		jz	loc_404F2E
		cmp	eax, 20h
		nop
		lea	esi, [esi+0]
		jz	loc_404F43
		cmp	eax, 21h
		jz	loc_404F5B
		cmp	eax, 22h
		jz	loc_404E5A
		cmp	eax, 23h
		nop
		lea	esi, [esi+0]
		jz	short loc_404DCE
		cmp	eax, 24h
		jz	loc_404EE4
		cmp	eax, 25h
		xchg	ax, ax
		jz	loc_404E75
		cmp	eax, 26h
		jz	loc_404ECD
		cmp	eax, 27h
		jz	loc_404E8B
		cmp	eax, 28h
		nop
		lea	esi, [esi+0]
		jz	loc_404EA0

loc_404DB6:				; CODE XREF: sub_404C03+21j
		lea	eax, [ebp-0A8h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_404DCE:				; CODE XREF: sub_404C03+17Dj
					; sub_404C03+26Dj ...
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN12QDBusMessageD1Ev
		mov	eax, [ebp-110h]
		mov	dword ptr [ebp-0E8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_404DFC:				; CODE XREF: sub_404C03+33j
		lea	eax, [ebp-74h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_404E11:				; CODE XREF: sub_404C03+46j
					; sub_404C03+597j
		lea	eax, [ebp-98h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_404E2A:				; CODE XREF: sub_404C03+4Fj
		lea	eax, [ebp-9Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		lea	eax, [ebp-0ACh]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_410D10

loc_404E5A:				; CODE XREF: sub_404C03+16Fj
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN12QDBusMessageD1Ev
		jmp	loc_404DCE
; ---------------------------------------------------------------------------

loc_404E75:				; CODE XREF: sub_404C03+18Dj
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN12QDBusMessageD1Ev

loc_404E8B:				; CODE XREF: sub_404C03+19Fj
					; sub_404C03+2DFj
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_404EA0:				; CODE XREF: sub_404C03+1ADj
					; sub_404C03+2F7j
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		mov	eax, [ebp-110h]
		mov	dword ptr [ebp-0E8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_404ECD:				; CODE XREF: sub_404C03+196j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	short loc_404E8B
; ---------------------------------------------------------------------------

loc_404EE4:				; CODE XREF: sub_404C03+182j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN12QDBusMessageD1Ev
		jmp	short loc_404EA0
; ---------------------------------------------------------------------------

loc_404EFC:				; CODE XREF: sub_404C03+18j
					; sub_404C03+2Aj
		lea	eax, [ebp-0ACh]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_410D10
		jmp	loc_404DCE
; ---------------------------------------------------------------------------

loc_404F19:				; CODE XREF: sub_404C03+146j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_410CE0

loc_404F2E:				; CODE XREF: sub_404C03+14Fj
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_404F43:				; CODE XREF: sub_404C03+15Dj
					; sub_404C03+3C9j
		lea	eax, [ebp-88h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_410D10

loc_404F5B:				; CODE XREF: sub_404C03+166j
					; sub_404C03+3F9j
		lea	eax, [ebp-0ACh]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_410EF0
		jmp	loc_404DCE
; ---------------------------------------------------------------------------

loc_404F78:				; CODE XREF: sub_404C03+11Dj
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_410CE0

loc_404F8D:				; CODE XREF: sub_404C03+126j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_404FA2:				; CODE XREF: sub_404C03+12Fj
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_410CE0

loc_404FB7:				; CODE XREF: sub_404C03+13Dj
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	loc_404F43
; ---------------------------------------------------------------------------

loc_404FD1:				; CODE XREF: sub_404C03+106j
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_404FE6:				; CODE XREF: sub_404C03+10Fj
					; sub_404C03+429j
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN12QDomDocumentD1Ev
		jmp	loc_404F5B
; ---------------------------------------------------------------------------

loc_405001:				; CODE XREF: sub_404C03+EFj
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_405016:				; CODE XREF: sub_404C03+FDj
					; sub_404C03+46Bj
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QDomNodeD2Ev
		jmp	short loc_404FE6
; ---------------------------------------------------------------------------

loc_40502E:				; CODE XREF: sub_404C03+A6j
		lea	eax, [ebp-74h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_405043:				; CODE XREF: sub_404C03+CFj
					; sub_404C03+4C3j
		lea	eax, [ebp-5Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_405058:				; CODE XREF: sub_404C03+E6j
					; sub_404C03+482j ...
		lea	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QDomNodeD2Ev
		jmp	short loc_405016
; ---------------------------------------------------------------------------

loc_405070:				; CODE XREF: sub_404C03+DDj
		lea	eax, [ebp-4Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	short loc_405058
; ---------------------------------------------------------------------------

loc_405087:				; CODE XREF: sub_404C03+BDj
		lea	eax, [ebp-74h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_40509C:				; CODE XREF: sub_404C03+57Dj
		lea	eax, [ebp-60h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_4050B1:				; CODE XREF: sub_404C03+C6j
					; sub_404C03+4DDj
		lea	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	loc_405043
; ---------------------------------------------------------------------------

loc_4050CB:				; CODE XREF: sub_404C03+AFj
		lea	eax, [ebp-74h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	short loc_4050B1
; ---------------------------------------------------------------------------

loc_4050E2:				; CODE XREF: sub_404C03+86j
		lea	eax, [ebp-68h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_410CE0

loc_4050F7:				; CODE XREF: sub_404C03+8Fj
		lea	eax, [ebp-64h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_40510C:				; CODE XREF: sub_404C03+9Dj
		lea	eax, [ebp-74h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	loc_405058
; ---------------------------------------------------------------------------

loc_405126:				; CODE XREF: sub_404C03+6Fj
		lea	eax, [ebp-70h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	ds:_ZN8QDomNodeD2Ev

loc_40513C:				; CODE XREF: sub_404C03+7Dj
		lea	eax, [ebp-6Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	loc_405058
; ---------------------------------------------------------------------------

loc_405156:				; CODE XREF: sub_404C03+5Dj
		lea	eax, [ebp-74h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0

loc_40516B:				; CODE XREF: sub_404C03+66j
		lea	eax, [ebp-54h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	loc_40509C
; ---------------------------------------------------------------------------

loc_405185:				; CODE XREF: sub_404C03+3Dj
		lea	eax, [ebp-78h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0E8h], 0
		call	sub_4126A0
		jmp	loc_404E11
sub_404C03	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4051A0	proc near		; CODE XREF: sub_408C80+1AB5p

var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_ED		= byte ptr -0EDh
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_D8		= dword	ptr -0D8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_A4		= byte ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_80		= byte ptr -80h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= byte ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 128h
		mov	[ebp+var_F4], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_BC], eax
		lea	eax, [ebp+var_DC]
		mov	[ebp+var_F8], edx
		mov	[esp], eax
		mov	[ebp+var_C4], offset sub_413F20
		mov	[ebp+var_C0], offset word_414702
		mov	[ebp+var_B8], offset sub_405D32
		mov	[ebp+var_B4], esp
		call	_Unwind_SjLj_Register
		mov	edx, ds:_ZN7QString17fromLatin1_helperEPKci
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aIntrospect ; "Introspect"
		mov	[ebp+var_D8], 0FFFFFFFFh
		mov	[ebp+var_E8], edx
		call	edx ; _ZN7QString17fromLatin1_helperEPKci
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aOrg_freedeskto	; "org.freedesktop.DBus.Introspectable"
		mov	[ebp+var_D8], 23h
		mov	[ebp+var_18], eax
		call	[ebp+var_E8]
		mov	edx, [ebp+var_F8]
		mov	[ebp+var_14], eax
		mov	eax, [edx]
		mov	ecx, [eax+8]
		test	ecx, ecx
		jz	loc_405B20
		mov	[ebp+var_10], eax
		lock inc dword ptr [eax]
		setnz	dl

loc_405258:				; CODE XREF: sub_4051A0+9A2j
		lea	edx, [ebp+var_18]
		mov	[esp+10h], edx
		lea	edx, [ebp+var_14]
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_10]
		mov	[esp+8], edx
		mov	edx, [ebp+var_F4]
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_D8], 21h
		mov	[esp+4], edx
		call	ds:_ZN12QDBusMessage16createMethodCallERK7QStringS2_S2_S2_
		sub	esp, 4
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405B00

loc_4052A1:				; CODE XREF: sub_4051A0+976j
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405AE0

loc_4052B2:				; CODE XREF: sub_4051A0+956j
		mov	eax, [ebp+var_18]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405AC0

loc_4052C3:				; CODE XREF: sub_4051A0+936j
		lea	eax, [ebp+var_1C]
		lea	edx, [ebp+var_C]
		mov	dword ptr [esp+10h], 0FFFFFFFFh
		mov	dword ptr [esp+0Ch], 1
		mov	[esp+8], edx
		mov	dword ptr [esp+4], offset dword_41D028
		mov	[esp], eax
		mov	[ebp+var_D8], 1Eh
		call	ds:_ZNK15QDBusConnection4callERK12QDBusMessageN5QDBus8CallModeEi
		sub	esp, 4
		lea	eax, [ebp+var_A4]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		mov	[ebp+var_D8], 1Dh
		call	ds:_ZN10QDBusErrorC1EPK9DBusError
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_E4], edx
		mov	[ebp+var_94], edx
		mov	[ebp+var_E0], edx
		lock inc dword ptr [edx]
		setnz	al
		lea	eax, [ebp+var_90]
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Ah
		mov	[esp], eax
		mov	[ebp+var_D8], 6
		call	ds:_ZN8QVariantC1EiPKv
		lea	eax, [ebp+var_90]
		mov	[esp+8], eax
		lea	eax, [ebp+var_A4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_D8], 5
		call	ds:_Z14qDBusReplyFillRK12QDBusMessageR10QDBusErrorR8QVariant
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		call	ds:_ZNK8QVariant8userTypeEv
		cmp	eax, 0Ah
		jz	loc_405B47
		mov	eax, [ebp+var_E4]
		mov	[ebp+var_6C], eax
		lock inc dword ptr [eax]
		setnz	al
		mov	eax, ds:_ZN8QVariant7handlerE
		lea	edx, [ebp+var_6C]
		mov	eax, [eax]
		mov	[esp+8], edx
		lea	edx, [ebp+var_90]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+4], 0Ah
		mov	[esp], edx
		mov	eax, [eax+18h]
		mov	[ebp+var_D8], 3
		call	eax
		test	al, al
		jnz	loc_4055C4
		mov	eax, [ebp+var_6C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405C90

loc_405403:				; CODE XREF: sub_4051A0+B06j
		mov	eax, [ebp+var_E4]
		mov	[ebp+var_70], eax
		lock inc dword ptr [eax]
		setnz	al

loc_405412:				; CODE XREF: sub_4051A0+43Bj
					; sub_4051A0+457j ...
		lea	eax, [ebp+var_70]
		mov	[esp+4], eax
		lea	eax, [ebp+var_94]
		mov	[esp], eax
		mov	[ebp+var_D8], 4
		call	ds:_ZN7QStringaSERKS_
		mov	eax, [ebp+var_70]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405AA4

loc_405443:				; CODE XREF: sub_4051A0+91Aj
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_D8], 6
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_D8], 1Ch
		call	ds:_ZN12QDBusMessageD1Ev
		lea	eax, [ebp+var_A4]
		mov	[esp], eax
		call	ds:_ZNK10QDBusError7isValidEv
		test	al, al
		jz	loc_405600
		lea	eax, [ebp+var_A4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_80]
		mov	[esp], eax
		call	ds:_ZN10QDBusErrorC1ERKS_
		lea	eax, [ebp+var_80]
		mov	[esp], eax
		mov	[ebp+var_D8], 1Bh
		call	ds:_ZNK10QDBusError4typeEv
		cmp	eax, 4
		jz	loc_405BF6
		lea	eax, [ebp+var_30]
		lea	edx, [ebp+var_80]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 1Bh
		call	ds:_ZNK10QDBusError7messageEv
		sub	esp, 4
		lea	eax, [ebp+var_34]
		lea	edx, [ebp+var_30]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 18h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_34]
		sub	esp, 4
		lea	edx, [ebp+var_80]
		mov	eax, [eax+0Ch]
		mov	[esp+4], edx
		mov	[ebp+var_D8], 17h
		mov	[ebp+var_FC], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		call	ds:_ZNK10QDBusError4nameEv
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		lea	edx, [ebp+var_28]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 16h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_FC]
		sub	esp, 4
		mov	[esp+8], eax
		mov	eax, [ebp+var_2C]
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp], offset	aErrorSS ; "Error: %s\n%s\n"
		mov	[ebp+var_D8], 15h
		mov	[esp+4], eax
		call	printf
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405CFC

loc_405585:				; CODE XREF: sub_4051A0+B72j
		mov	eax, [ebp+var_28]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405CE1

loc_405596:				; CODE XREF: sub_4051A0+B57j
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405CC6

loc_4055A7:				; CODE XREF: sub_4051A0+B3Cj
		mov	eax, [ebp+var_30]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405CAB

loc_4055B8:				; CODE XREF: sub_4051A0+ACFj
					; sub_4051A0+AEBj ...
		mov	dword ptr [esp], 2 ; int
		call	exit
; ---------------------------------------------------------------------------

loc_4055C4:				; CODE XREF: sub_4051A0+24Cj
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_70], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_6C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_405412
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_D8], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405412
; ---------------------------------------------------------------------------
		align 10h

loc_405600:				; CODE XREF: sub_4051A0+2E3j
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_D8], 1Ch
		call	ds:_ZN12QDomDocumentC1Ev
		mov	eax, [ebp+var_94]
		mov	[ebp+var_3C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_3C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	[esp], eax
		mov	[ebp+var_D8], 13h
		call	ds:_ZN12QDomDocument10setContentERK7QStringPS0_PiS4_
		mov	eax, [ebp+var_3C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405BDB

loc_40566B:				; CODE XREF: sub_4051A0+A51j
		lea	eax, [ebp+var_40]
		lea	edx, [ebp+var_38]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 14h
		call	ds:_ZNK12QDomDocument15documentElementEv
		mov	edx, [ebp+var_E4]
		sub	esp, 4
		mov	[ebp+var_48], edx
		lock inc dword ptr [edx]
		setnz	al
		lea	edx, [ebp+var_48]
		lea	eax, [ebp+var_44]
		mov	[esp+8], edx
		lea	edx, [ebp+var_40]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 11h
		call	ds:_ZNK8QDomNode17firstChildElementERK7QString
		sub	esp, 4
		mov	eax, [ebp+var_48]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405BC0

loc_4056D2:				; CODE XREF: sub_4051A0+A36j
		mov	edx, ds:_ZNK8QDomNode6isNullEv
		mov	[ebp+var_EC], edx
		xchg	ax, ax

loc_4056E0:				; CODE XREF: sub_4051A0+70Aj
					; sub_4051A0+726j
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_D8], 10h
		call	[ebp+var_EC]
		test	al, al
		jnz	loc_405A00
		lea	eax, [ebp+var_44]
		lea	edx, [ebp+var_4C]
		mov	[ebp+var_50], offset aInterface	; "interface"
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_D8], 10h
		call	ds:_ZNK11QDomElement7tagNameEv
		sub	esp, 4
		lea	eax, [ebp+var_50]
		lea	edx, [ebp+var_4C]
		mov	[esp+4], eax
		mov	[esp], edx
		mov	[ebp+var_D8], 0Fh
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_ED], al
		mov	eax, [ebp+var_4C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4058D0

loc_405759:				; CODE XREF: sub_4051A0+746j
		cmp	[ebp+var_ED], 0
		jz	loc_405830
		mov	eax, [ebp+var_E4]
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_58], eax
		lock inc dword ptr [edx]
		setnz	al
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aName ;	"name"
		mov	[ebp+var_D8], 0Eh
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		lea	edx, [ebp+var_58]
		mov	[esp+0Ch], edx
		lea	edx, [ebp+var_54]
		mov	[ebp+var_54], eax
		lea	eax, [ebp+var_6C]
		mov	[esp+8], edx
		lea	edx, [ebp+var_44]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 0Dh
		call	ds:_ZNK11QDomElement9attributeERK7QStringS2_
		sub	esp, 4
		mov	eax, [ebp+var_54]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4059C0

loc_4057DC:				; CODE XREF: sub_4051A0+836j
		mov	eax, [ebp+var_58]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4059A0

loc_4057ED:				; CODE XREF: sub_4051A0+816j
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_D8], 0Bh
		call	ds:_ZN9QDBusUtil20isValidInterfaceNameERK7QString
		test	al, al
		jz	loc_4058F0
		mov	edx, [ebp+var_F8]
		lea	ecx, [ebp+var_6C]
		mov	eax, [ebp+var_F4]
		call	sub_4017F0

loc_40581F:				; CODE XREF: sub_4051A0+7B9j
					; sub_4051A0+7D5j
		mov	eax, [ebp+var_6C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405980

loc_405830:				; CODE XREF: sub_4051A0+5C0j
					; sub_4051A0+7F6j
		mov	eax, [ebp+var_E4]
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_64], eax
		lock inc dword ptr [edx]
		setnz	al
		lea	edx, [ebp+var_64]
		lea	eax, [ebp+var_68]
		mov	[esp+8], edx
		lea	edx, [ebp+var_44]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 8
		call	ds:_ZNK8QDomNode18nextSiblingElementERK7QString
		sub	esp, 4
		lea	eax, [ebp+var_68]
		mov	[esp+4], eax
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_D8], 7
		call	ds:_ZN11QDomElementaSERKS_
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_D8], 8
		call	ds:_ZN8QDomNodeD2Ev
		mov	eax, [ebp+var_64]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_4056E0
		mov	eax, [ebp+var_64]
		mov	[ebp+var_D8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4056E0
; ---------------------------------------------------------------------------
		align 10h

loc_4058D0:				; CODE XREF: sub_4051A0+5B3j
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_D8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405759
; ---------------------------------------------------------------------------
		align 10h

loc_4058F0:				; CODE XREF: sub_4051A0+665j
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_5C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_60]
		lea	edx, [ebp+var_5C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 0Ah
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_60]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp], offset	aInvalidDBusInt	; "Invalid D-BUS interface name	'%s' found"...
		mov	[ebp+var_D8], 9
		mov	[esp+4], eax
		call	ds:_Z8qWarningPKcz
		mov	eax, [ebp+var_60]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4059E0

loc_40594E:				; CODE XREF: sub_4051A0+856j
		mov	eax, [ebp+var_5C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_40581F
		mov	eax, [ebp+var_5C]
		mov	[ebp+var_D8], 0Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40581F
; ---------------------------------------------------------------------------
		align 10h

loc_405980:				; CODE XREF: sub_4051A0+68Aj
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_D8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405830
; ---------------------------------------------------------------------------
		align 10h

loc_4059A0:				; CODE XREF: sub_4051A0+647j
		mov	eax, [ebp+var_58]
		mov	[ebp+var_D8], 0Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4057ED
; ---------------------------------------------------------------------------
		align 10h

loc_4059C0:				; CODE XREF: sub_4051A0+636j
		mov	eax, [ebp+var_54]
		mov	[ebp+var_D8], 0Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4057DC
; ---------------------------------------------------------------------------
		align 10h

loc_4059E0:				; CODE XREF: sub_4051A0+7A8j
		mov	eax, [ebp+var_60]
		mov	[ebp+var_D8], 0Ah
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_40594E
; ---------------------------------------------------------------------------
		align 10h

loc_405A00:				; CODE XREF: sub_4051A0+558j
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_D8], 12h
		call	ds:_ZN8QDomNodeD2Ev
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_D8], 14h
		call	ds:_ZN8QDomNodeD2Ev
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_D8], 1Ch
		call	ds:_ZN12QDomDocumentD1Ev
		mov	eax, [ebp+var_94]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405BA2

loc_405A56:				; CODE XREF: sub_4051A0+A1Bj
		mov	eax, [ebp+var_9C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405B84

loc_405A6A:				; CODE XREF: sub_4051A0+9FDj
		mov	eax, [ebp+var_A0]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405B66

loc_405A7E:				; CODE XREF: sub_4051A0+9DFj
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_D8], 0FFFFFFFFh
		call	ds:_ZN12QDBusMessageD1Ev
		lea	eax, [ebp+var_DC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_405AA4:				; CODE XREF: sub_4051A0+29Dj
		mov	eax, [ebp+var_70]
		mov	[ebp+var_D8], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405443
; ---------------------------------------------------------------------------
		align 10h

loc_405AC0:				; CODE XREF: sub_4051A0+11Dj
		mov	eax, [ebp+var_18]
		mov	[ebp+var_D8], 1Eh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4052C3
; ---------------------------------------------------------------------------
		align 10h

loc_405AE0:				; CODE XREF: sub_4051A0+10Cj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_D8], 1Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4052B2
; ---------------------------------------------------------------------------
		align 10h

loc_405B00:				; CODE XREF: sub_4051A0+FBj
		mov	eax, [ebp+var_10]
		mov	[ebp+var_D8], 20h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4052A1
; ---------------------------------------------------------------------------
		align 10h

loc_405B20:				; CODE XREF: sub_4051A0+A9j
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	asc_41A190 ; "/"
		mov	[ebp+var_D8], 22h
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		mov	[ebp+var_10], eax
		jmp	loc_405258
; ---------------------------------------------------------------------------

loc_405B47:				; CODE XREF: sub_4051A0+1FFj
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		call	ds:_ZNK8QVariant9constDataEv
		mov	eax, [eax]
		mov	[ebp+var_70], eax
		lock inc dword ptr [eax]
		setnz	dl
		jmp	loc_405412
; ---------------------------------------------------------------------------

loc_405B66:				; CODE XREF: sub_4051A0+8D8j
		mov	eax, [ebp+var_A0]
		mov	[ebp+var_D8], 1Eh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405A7E
; ---------------------------------------------------------------------------

loc_405B84:				; CODE XREF: sub_4051A0+8C4j
		mov	eax, [ebp+var_9C]
		mov	[ebp+var_D8], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405A6A
; ---------------------------------------------------------------------------

loc_405BA2:				; CODE XREF: sub_4051A0+8B0j
		mov	eax, [ebp+var_94]
		mov	[ebp+var_D8], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405A56
; ---------------------------------------------------------------------------

loc_405BC0:				; CODE XREF: sub_4051A0+52Cj
		mov	eax, [ebp+var_48]
		mov	[ebp+var_D8], 10h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4056D2
; ---------------------------------------------------------------------------

loc_405BDB:				; CODE XREF: sub_4051A0+4C5j
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_D8], 14h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40566B
; ---------------------------------------------------------------------------

loc_405BF6:				; CODE XREF: sub_4051A0+318j
		mov	edx, [ebp+var_F4]
		mov	eax, [edx]
		mov	[ebp+var_20], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_24]
		lea	edx, [ebp+var_20]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_D8], 1Ah
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_24]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aServiceSDoesNo ; "Service '%s' does not exist.\n"
		mov	[ebp+var_D8], 19h
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_405D17

loc_405C64:				; CODE XREF: sub_4051A0+B8Dj
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_4055B8
		mov	eax, [ebp+var_20]
		mov	[ebp+var_D8], 1Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4055B8
; ---------------------------------------------------------------------------

loc_405C90:				; CODE XREF: sub_4051A0+25Dj
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_D8], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405403
; ---------------------------------------------------------------------------

loc_405CAB:				; CODE XREF: sub_4051A0+412j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_D8], 1Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4055B8
; ---------------------------------------------------------------------------

loc_405CC6:				; CODE XREF: sub_4051A0+401j
		mov	eax, [ebp+var_34]
		mov	[ebp+var_D8], 18h
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_4055A7
; ---------------------------------------------------------------------------

loc_405CE1:				; CODE XREF: sub_4051A0+3F0j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_D8], 17h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_405596
; ---------------------------------------------------------------------------

loc_405CFC:				; CODE XREF: sub_4051A0+3DFj
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_D8], 16h
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_405585
; ---------------------------------------------------------------------------

loc_405D17:				; CODE XREF: sub_4051A0+ABEj
		mov	eax, [ebp+var_24]
		mov	[ebp+var_D8], 1Ah
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_405C64
sub_4051A0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_405D32	proc near		; DATA XREF: sub_4051A0+3Bo
		add	ebp, 8
		mov	eax, [ebp-0D8h]
		mov	edx, [ebp-0D4h]
		cmp	eax, 1
		mov	[ebp-100h], edx
		jz	loc_406175
		cmp	eax, 2
		jz	loc_405EEC
		cmp	eax, 3
		jz	loc_40615B
		cmp	eax, 4
		jz	loc_405F01
		cmp	eax, 5
		xchg	ax, ax
		jz	loc_405F1A
		cmp	eax, 6
		jz	loc_40612B
		cmp	eax, 7
		jz	loc_406141
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_4060E7
		cmp	eax, 9
		jz	loc_4060FC
		cmp	eax, 0Ah
		jz	loc_406111
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_406077
		cmp	eax, 0Ch
		jz	loc_4060D0
		cmp	eax, 0Dh
		jz	loc_40608C
		cmp	eax, 0Eh
		nop
		lea	esi, [esi+0]
		jz	loc_4060B9
		cmp	eax, 0Fh
		jz	loc_4060A1
		cmp	eax, 10h
		jz	loc_40604A
		cmp	eax, 11h
		nop
		lea	esi, [esi+0]
		jz	loc_40605F
		cmp	eax, 12h
		jz	loc_40601A
		cmp	eax, 13h
		jz	loc_40602F
		cmp	eax, 14h
		nop
		lea	esi, [esi+0]
		jz	loc_405FC1
		cmp	eax, 15h
		jz	loc_405FD6
		cmp	eax, 16h
		jz	loc_405FEB
		cmp	eax, 17h
		nop
		lea	esi, [esi+0]
		jz	loc_406000
		cmp	eax, 18h
		jz	loc_405F65
		cmp	eax, 19h
		jz	loc_405F7A
		cmp	eax, 1Ah
		nop
		lea	esi, [esi+0]
		jz	loc_405F8F
		cmp	eax, 1Bh
		jz	loc_405FA4
		cmp	eax, 1Ch
		jz	loc_405F4A
		cmp	eax, 1Dh
		nop
		lea	esi, [esi+0]
		jz	short loc_405EBE
		cmp	eax, 1Eh
		jz	loc_406192
		cmp	eax, 1Fh
		xchg	ax, ax
		jz	loc_4061D5
		cmp	eax, 20h
		jz	loc_406202
		cmp	eax, 21h
		jz	loc_4061EB
		cmp	eax, 22h
		nop
		lea	esi, [esi+0]
		jz	loc_4061A8
		lea	eax, [ebp-0A0h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_405EBE:				; CODE XREF: sub_405D32+13Ej
					; sub_405D32+22Ej ...
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN12QDBusMessageD1Ev
		mov	eax, [ebp-100h]
		mov	dword ptr [ebp-0D8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_405EEC:				; CODE XREF: sub_405D32+21j
		lea	eax, [ebp-6Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_405F01:				; CODE XREF: sub_405D32+33j
					; sub_405D32+43Ej
		lea	eax, [ebp-90h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QVariantD1Ev

loc_405F1A:				; CODE XREF: sub_405D32+3Ej
		lea	eax, [ebp-94h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		lea	eax, [ebp-0A4h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_410D10

loc_405F4A:				; CODE XREF: sub_405D32+130j
		lea	eax, [ebp-1Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN12QDBusMessageD1Ev
		jmp	loc_405EBE
; ---------------------------------------------------------------------------

loc_405F65:				; CODE XREF: sub_405D32+107j
		lea	eax, [ebp-24h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_410CE0

loc_405F7A:				; CODE XREF: sub_405D32+110j
		lea	eax, [ebp-20h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_405F8F:				; CODE XREF: sub_405D32+11Ej
					; sub_405D32+2E3j
		lea	eax, [ebp-80h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_410D10

loc_405FA4:				; CODE XREF: sub_405D32+127j
					; sub_405D32+313j
		lea	eax, [ebp-0A4h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_410EF0
		jmp	loc_405EBE
; ---------------------------------------------------------------------------

loc_405FC1:				; CODE XREF: sub_405D32+DEj
		lea	eax, [ebp-2Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_410CE0

loc_405FD6:				; CODE XREF: sub_405D32+E7j
		lea	eax, [ebp-28h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_405FEB:				; CODE XREF: sub_405D32+F0j
		lea	eax, [ebp-34h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_410CE0

loc_406000:				; CODE XREF: sub_405D32+FEj
		lea	eax, [ebp-30h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		jmp	loc_405F8F
; ---------------------------------------------------------------------------

loc_40601A:				; CODE XREF: sub_405D32+C7j
		lea	eax, [ebp-3Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_40602F:				; CODE XREF: sub_405D32+D0j
					; sub_405D32+343j
		lea	eax, [ebp-38h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN12QDomDocumentD1Ev
		jmp	loc_405FA4
; ---------------------------------------------------------------------------

loc_40604A:				; CODE XREF: sub_405D32+B0j
		lea	eax, [ebp-48h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_40605F:				; CODE XREF: sub_405D32+BEj
					; sub_405D32+385j
		lea	eax, [ebp-40h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QDomNodeD2Ev
		jmp	short loc_40602F
; ---------------------------------------------------------------------------

loc_406077:				; CODE XREF: sub_405D32+7Ej
		lea	eax, [ebp-6Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_40608C:				; CODE XREF: sub_405D32+90j
					; sub_405D32+3B3j
		lea	eax, [ebp-58h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_4060A1:				; CODE XREF: sub_405D32+A7j
					; sub_405D32+39Cj ...
		lea	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QDomNodeD2Ev
		jmp	short loc_40605F
; ---------------------------------------------------------------------------

loc_4060B9:				; CODE XREF: sub_405D32+9Ej
		lea	eax, [ebp-4Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		jmp	short loc_4060A1
; ---------------------------------------------------------------------------

loc_4060D0:				; CODE XREF: sub_405D32+87j
		lea	eax, [ebp-54h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		jmp	short loc_40608C
; ---------------------------------------------------------------------------

loc_4060E7:				; CODE XREF: sub_405D32+5Ej
		lea	eax, [ebp-60h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_410CE0

loc_4060FC:				; CODE XREF: sub_405D32+67j
		lea	eax, [ebp-5Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0

loc_406111:				; CODE XREF: sub_405D32+70j
		lea	eax, [ebp-6Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		jmp	loc_4060A1
; ---------------------------------------------------------------------------

loc_40612B:				; CODE XREF: sub_405D32+47j
		lea	eax, [ebp-68h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN8QDomNodeD2Ev

loc_406141:				; CODE XREF: sub_405D32+50j
		lea	eax, [ebp-64h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		jmp	loc_4060A1
; ---------------------------------------------------------------------------

loc_40615B:				; CODE XREF: sub_405D32+2Aj
		lea	eax, [ebp-70h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		jmp	loc_405F01
; ---------------------------------------------------------------------------

loc_406175:				; CODE XREF: sub_405D32+18j
		lea	eax, [ebp-0A4h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_410D10
		jmp	loc_405EBE
; ---------------------------------------------------------------------------

loc_406192:				; CODE XREF: sub_405D32+143j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN12QDBusMessageD1Ev

loc_4061A8:				; CODE XREF: sub_405D32+16Ej
					; sub_405D32+4CEj
		lea	eax, [ebp-18h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		mov	eax, [ebp-100h]
		mov	dword ptr [ebp-0D8h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4061D5:				; CODE XREF: sub_405D32+14Ej
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	ds:_ZN12QDBusMessageD1Ev

loc_4061EB:				; CODE XREF: sub_405D32+160j
					; sub_405D32+4E5j
		lea	eax, [ebp-14h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		jmp	short loc_4061A8
; ---------------------------------------------------------------------------

loc_406202:				; CODE XREF: sub_405D32+157j
		lea	eax, [ebp-10h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-0D8h], 0
		call	sub_4126A0
		jmp	short loc_4061EB
sub_405D32	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_406220	proc near		; CODE XREF: sub_406220+1DA8p
					; sub_406220+2584p ...

var_28C		= dword	ptr -28Ch
var_284		= dword	ptr -284h
var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= dword	ptr -268h
var_262		= byte ptr -262h
var_261		= byte ptr -261h
var_260		= dword	ptr -260h
var_25C		= dword	ptr -25Ch
var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_221		= byte ptr -221h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= dword	ptr -204h
var_200		= dword	ptr -200h
var_1FC		= dword	ptr -1FCh
var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= byte ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1A0		= byte ptr -1A0h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= byte ptr -180h
var_170		= byte ptr -170h
var_160		= byte ptr -160h
var_150		= byte ptr -150h
var_140		= byte ptr -140h
var_130		= byte ptr -130h
var_120		= byte ptr -120h
var_110		= byte ptr -110h
var_100		= dword	ptr -100h
var_F8		= dword	ptr -0F8h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= byte ptr -0E8h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= byte ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= byte ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2ACh
		mov	[ebp+var_254], eax
		movzx	eax, [ebp+arg_8]
		mov	[ebp+var_258], edx
		lea	edx, [ebp+var_18]
		mov	[ebp+var_25C], ecx
		mov	[ebp+var_1BC], edx
		mov	[ebp+var_261], al
		lea	eax, [ebp+var_1DC]
		mov	[esp], eax
		mov	[ebp+var_1C4], offset sub_413F20
		mov	[ebp+var_1C0], offset dword_41474C
		mov	[ebp+var_1B8], offset loc_408037
		mov	[ebp+var_1B4], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+var_258]
		mov	ebx, [ebp+var_25C]
		mov	edx, [ebp+var_254]
		mov	dword ptr [esp+14h], 0
		mov	[esp+8], eax
		lea	eax, [ebp+var_E8]
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+10h], offset dword_41D028
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 0FFFFFFFFh
		call	ds:_ZN14QDBusInterfaceC1ERK7QStringS2_S2_RK15QDBusConnectionP7QObject
		mov	ebx, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_1E8], ebx
		mov	[ebp+var_20], ebx
		mov	[ebp+var_1EC], ebx
		lock inc dword ptr [ebx]
		setnz	al
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx]
		mov	[ebp+var_24], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_24]
		test	byte ptr [eax+10h], 1
		jz	loc_40778B

loc_406300:				; CODE XREF: sub_406220+1580j
		mov	eax, [ebp+var_1E8]
		mov	[ebp+var_28], eax
		lock inc dword ptr [eax]
		setnz	al
		mov	eax, [ebp+var_24]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jz	loc_406BB7
		lea	eax, [ebp+var_E8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Bh
		call	ds:_ZNK14QDBusInterface10metaObjectEv
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_20C], eax
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[esp+4], ebx
		call	ds:_ZNK7QString8toLatin1Ev
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	dword ptr [esp+4], 28h
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	ds:_ZN10QByteArray6appendEc
		mov	eax, [ebp+var_20C]
		mov	[esp], eax
		call	ds:_ZNK11QMetaObject12methodOffsetEv
		mov	edx, ds:_ZNK11QMetaObject11methodCountEv
		mov	[ebp+var_30], eax
		mov	[ebp+var_1F8], edx
		jmp	short loc_406395
; ---------------------------------------------------------------------------

loc_406391:				; CODE XREF: sub_406220+21Fj
					; sub_406220+23Bj
		add	[ebp+var_30], 1

loc_406395:				; CODE XREF: sub_406220+16Fj
		mov	eax, [ebp+var_20C]
		mov	[ebp+var_1D8], 3Ah
		mov	[esp], eax
		call	[ebp+var_1F8]
		mov	edx, [ebp+var_30]
		cmp	eax, edx
		jle	loc_406460
		mov	ebx, [ebp+var_20C]
		mov	[esp+4], edx
		mov	[ebp+var_1D8], 3Ah
		mov	[esp], ebx
		call	ds:_ZNK11QMetaObject6methodEi
		mov	[ebp+var_F0], eax
		lea	eax, [ebp+var_F0]
		mov	[ebp+var_EC], edx
		mov	[esp], eax
		call	ds:_ZNK11QMetaMethod9signatureEv
		lea	edx, [ebp+var_34]
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN10QByteArrayC1EPKc
		lea	eax, [ebp+var_2C]
		lea	ebx, [ebp+var_34]
		mov	[esp+4], eax
		mov	[esp], ebx
		mov	[ebp+var_1D8], 39h
		call	ds:_ZNK10QByteArray10startsWithERKS_
		test	al, al
		jz	short loc_406434
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	sub_4124F0

loc_406434:				; CODE XREF: sub_406220+200j
		mov	eax, [ebp+var_34]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_406391
		mov	eax, [ebp+var_34]
		mov	[ebp+var_1D8], 3Ah
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_406391
; ---------------------------------------------------------------------------

loc_406460:				; CODE XREF: sub_406220+193j
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_1E0], edx
		mov	[ebp+var_1E4], edx

loc_406472:				; CODE XREF: sub_406220+97Cj
		mov	ebx, [ebp+arg_4]
		mov	ebx, [ebx]
		cmp	[ebp+var_24], ebx
		mov	[ebp+var_24C], ebx
		jz	short loc_4064AC
		lock inc dword ptr [ebx]
		setnz	al
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_407844

loc_406499:				; CODE XREF: sub_406220+1640j
		mov	eax, [ebp+var_24C]
		mov	[ebp+var_24], eax
		test	byte ptr [eax+10h], 1
		jz	loc_40782A

loc_4064AC:				; CODE XREF: sub_406220+260j
					; sub_406220+161Fj
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	sub_411DA0
		mov	eax, [ebp+var_20]
		mov	edx, [eax+8]
		cmp	[eax+0Ch], edx
		jz	loc_407D0B
		mov	ebx, [eax]
		mov	ecx, eax
		cmp	ebx, 1
		jz	short loc_4064FD
		mov	eax, [eax+4]
		mov	[ebp+var_1D8], 3Ah
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	sub_412470
		mov	eax, [ebp+var_20]
		mov	edx, [eax+8]
		mov	ecx, eax

loc_4064FD:				; CODE XREF: sub_406220+2B7j
		mov	ebx, [eax+edx*4+14h]
		mov	[ebp+var_260], ebx
		mov	ebx, [ecx]
		cmp	ebx, 1
		jz	short loc_406530
		mov	eax, [ecx+4]
		mov	[ebp+var_1D8], 3Ah
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		call	sub_412470
		mov	eax, [ebp+var_20]
		mov	edx, [eax+8]

loc_406530:				; CODE XREF: sub_406220+2ECj
		lea	eax, [eax+edx*4+14h]
		mov	[esp+4], eax
		lea	eax, [ebp+var_20]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	ds:_ZN9QListData5eraseEPPv
		mov	eax, [ebp+var_260]
		mov	edx, [ebp+var_20C]
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZNK11QMetaObject6methodEi
		mov	[ebp+var_F0], eax
		lea	eax, [ebp+var_64]
		mov	[ebp+var_EC], edx
		lea	edx, [ebp+var_F0]
		mov	[esp+4], edx
		mov	[esp], eax
		call	ds:_ZNK11QMetaMethod14parameterTypesEv
		mov	eax, [ebp+var_64]
		sub	esp, 4
		mov	ecx, [eax+8]
		mov	edx, [eax+0Ch]
		sub	edx, ecx
		test	edx, edx
		jle	loc_40670F
		mov	[ebp+var_204], 0
		jmp	short loc_4065CE
; ---------------------------------------------------------------------------
		align 10h

loc_4065B0:				; CODE XREF: sub_406220+3D9j
		mov	eax, [ebp+var_64]
		add	[ebp+var_204], 1
		mov	ecx, [eax+8]
		mov	edx, [eax+0Ch]
		sub	edx, ecx
		cmp	[ebp+var_204], edx
		jge	loc_40670F

loc_4065CE:				; CODE XREF: sub_406220+389j
		mov	ebx, [ebp+var_204]
		mov	dword ptr [esp+4], 26h
		mov	[ebp+var_1D8], 2Dh
		lea	edx, [ecx+ebx+4]
		lea	eax, [eax+edx*4+4]
		mov	[esp], eax
		call	ds:_ZNK10QByteArray8endsWithEc
		test	al, al
		jz	short loc_4065B0
		nop
		lea	esi, [esi+0]

loc_406600:				; CODE XREF: sub_406220+4B2j
		mov	eax, [ebp+var_64]
		mov	ebx, [eax+0Ch]
		mov	ecx, [eax+8]
		mov	edx, ebx
		sub	edx, ecx
		cmp	edx, [ebp+var_204]
		jle	loc_40670F
		mov	edx, [eax]
		cmp	edx, 1
		jz	short loc_40669C
		lea	ecx, [eax+ecx*4+14h]
		mov	eax, [eax+4]
		mov	[ebp+var_218], ecx
		mov	[ebp+var_1D8], 2Dh
		mov	[esp+4], eax
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		call	ds:_ZN9QListData6detachEi
		mov	esi, eax
		mov	eax, [ebp+var_64]
		mov	edx, [eax+0Ch]
		lea	ebx, [eax+edx*4+14h]
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+14h]
		cmp	ebx, edx
		jz	short loc_40668C
		mov	[ebp+var_28C], ebx
		mov	ecx, [ebp+var_218]
		jmp	short loc_406673
; ---------------------------------------------------------------------------
		align 10h

loc_406670:				; CODE XREF: sub_406220+46Aj
		add	ecx, 4

loc_406673:				; CODE XREF: sub_406220+44Aj
		test	edx, edx
		jz	short loc_406681
		mov	eax, [ecx]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	bl

loc_406681:				; CODE XREF: sub_406220+455j
		add	edx, 4
		cmp	[ebp+var_28C], edx
		jnz	short loc_406670

loc_40668C:				; CODE XREF: sub_406220+43Cj
		lock dec dword ptr [esi]
		setnz	al
		test	al, al
		jz	short loc_4066F4

loc_406696:				; CODE XREF: sub_406220+4EDj
		mov	eax, [ebp+var_64]
		mov	ebx, [eax+0Ch]

loc_40669C:				; CODE XREF: sub_406220+3FEj
		lea	eax, [eax+ebx*4+10h]
		mov	[ebp+var_208], eax
		mov	eax, [eax]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_4066D7

loc_4066B2:				; CODE XREF: sub_406220+4D2j
		mov	eax, [ebp+var_208]
		lea	edx, [ebp+var_64]
		mov	[esp], edx
		mov	[ebp+var_1D8], 2Dh
		mov	[esp+4], eax
		call	ds:_ZN9QListData5eraseEPPv
		jmp	loc_406600
; ---------------------------------------------------------------------------

loc_4066D7:				; CODE XREF: sub_406220+490j
		mov	ebx, [ebp+var_208]
		mov	eax, [ebx]
		mov	[ebp+var_1D8], 2Dh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	short loc_4066B2
; ---------------------------------------------------------------------------

loc_4066F4:				; CODE XREF: sub_406220+474j
		lea	eax, [ebp+var_64]
		mov	[esp+4], esi
		mov	[esp], eax
		mov	[ebp+var_1D8], 2Dh
		call	sub_411830
		jmp	short loc_406696
; ---------------------------------------------------------------------------

loc_40670F:				; CODE XREF: sub_406220+379j
					; sub_406220+3A8j ...
		mov	ebx, [ebp+var_24]
		mov	edi, [ebx+0Ch]
		mov	ebx, [ebx+8]
		cmp	edi, ebx
		jz	loc_406B57
		test	edx, edx
		jle	loc_406B59
		mov	ebx, ds:_ZN8QVariant10nameToTypeEPKc
		mov	[ebp+var_210], 0
		mov	[ebp+var_1F4], ebx
		jmp	loc_406805
; ---------------------------------------------------------------------------

loc_406743:				; CODE XREF: sub_406220+7A6j
		cmp	[ebp+var_200], 0FFh
		jg	loc_4069CC
		mov	ebx, [ebp+var_200]
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 29h
		mov	[esp+4], ebx
		call	ds:_ZN8QVariant7convertENS_4TypeE
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		call	ds:_ZNK8QVariant4typeEv
		test	eax, eax
		jz	loc_407A10

loc_40678D:				; CODE XREF: sub_406220+913j
					; sub_406220+932j ...
		lea	eax, [ebp+var_100]
		mov	[esp+4], eax
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_1D8], 29h
		call	sub_411EA0
		mov	eax, [ebp+var_70]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_406C88

loc_4067BD:				; CODE XREF: sub_406220+A7Ej
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 2Dh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_24]
		mov	ebx, [eax+0Ch]
		mov	esi, [eax+8]
		cmp	ebx, esi
		jz	loc_407090
		mov	eax, [ebp+var_64]
		add	[ebp+var_210], 1
		mov	ecx, [eax+8]
		mov	edx, [eax+0Ch]
		sub	edx, ecx
		cmp	[ebp+var_210], edx
		jge	loc_406CA3

loc_406805:				; CODE XREF: sub_406220+51Ej
		mov	ebx, [ebp+var_210]
		lea	edx, [ecx+ebx+4]
		mov	eax, [eax+edx*4+4]
		mov	[ebp+var_228], ebx
		mov	eax, [eax+0Ch]
		mov	[ebp+var_1D8], 2Dh
		mov	[esp], eax
		call	[ebp+var_1F4]
		cmp	eax, 7Fh
		mov	[ebp+var_200], eax
		jz	loc_4072F3
		mov	ecx, [ebp+var_200]
		test	ecx, ecx
		jz	loc_40732D

loc_40684C:				; CODE XREF: sub_406220+1107j
		mov	eax, [ebp+var_F8]
		mov	[ebp+var_100], 0
		mov	edx, [ebp+var_1E4]
		and	eax, 0C0000000h
		mov	[ebp+var_F8], eax
		mov	eax, [ebp+var_1E0]
		mov	byte ptr [ebp+var_F8+3], 80h
		mov	[ebp+var_70], eax
		lock inc dword ptr [edx]
		setnz	al
		cmp	[ebp+var_200], 0Bh
		jz	loc_406CB0
		cmp	[ebp+var_200], 9
		jz	loc_406CB0

loc_40689D:				; CODE XREF: sub_406220+ABDj
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_4068BC
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 29h
		call	sub_4118C0

loc_4068BC:				; CODE XREF: sub_406220+685j
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_7C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_4068EE
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 1
		call	sub_4118C0

loc_4068EE:				; CODE XREF: sub_406220+6B7j
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+10h]
		lea	ebx, [edx+4]
		mov	[ebp+var_21C], ebx
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	loc_4071DC

loc_406912:				; CODE XREF: sub_406220+FD2j
		mov	eax, [ebp+var_21C]
		mov	[ebp+var_1D8], 1
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	ds:_ZN9QListData5eraseEPPv
		lea	eax, [ebp+var_7C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_1D8], 26h
		call	ds:_ZN7QStringaSERKS_
		mov	[esp+4], eax
		lea	eax, [ebp+var_120]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERK7QString
		lea	eax, [ebp+var_120]
		mov	[esp+4], eax
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 25h
		call	ds:_ZN8QVariantaSERKS_
		lea	eax, [ebp+var_120]
		mov	[esp], eax
		mov	[ebp+var_1D8], 26h
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_7C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4071C1

loc_4069AF:				; CODE XREF: sub_406220+D96j
					; sub_406220+FB7j
		cmp	[ebp+var_200], 86h
		jz	loc_406FE8

loc_4069BF:				; CODE XREF: sub_406220+DC2j
		cmp	[ebp+var_200], 8
		jnz	loc_406743

loc_4069CC:				; CODE XREF: sub_406220+52Dj
		mov	eax, dword_419A58
		test	eax, eax
		jz	loc_4071F7
		mov	eax, dword_419A58
		cmp	[ebp+var_200], eax
		jz	loc_407234

loc_4069EA:				; CODE XREF: sub_406220+100Ej
		mov	eax, dword_419A64
		test	eax, eax
		jz	loc_407580
		mov	eax, dword_419A64
		cmp	[ebp+var_200], eax
		jz	loc_4075BD

loc_406A08:				; CODE XREF: sub_406220+1397j
		mov	eax, dword_419A60
		test	eax, eax
		jz	loc_4076F5
		mov	eax, dword_419A60
		cmp	[ebp+var_200], eax
		jnz	loc_407732

loc_406A26:				; CODE XREF: sub_406220+150Cj
		mov	eax, [ebp+var_70]
		mov	[ebp+var_94], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_94]
		mov	[esp], eax
		mov	[ebp+var_1D8], 8
		call	ds:_ZN14QDBusSignature5checkEv
		mov	edx, [ebp+var_94]
		mov	[ebp+var_214], edx
		lock inc dword ptr [edx]
		setnz	al
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jz	loc_407495
		mov	ebx, [ebp+var_214]
		cmp	[ebp+var_1E0], ebx
		jz	loc_4074BA

loc_406A80:				; CODE XREF: sub_406220+1294j
		mov	eax, dword_419A60
		test	eax, eax
		jnz	short loc_406AB5
		mov	dword ptr [esp+8], offset sub_4107D0
		mov	dword ptr [esp+4], offset sub_410570
		mov	dword ptr [esp], offset	aQdbussignature	; "QDBusSignature"
		mov	[ebp+var_1D8], 1Bh
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A60, eax

loc_406AB5:				; CODE XREF: sub_406220+867j
		mov	eax, dword_419A60
		lea	edx, [ebp+var_94]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edx
		mov	[ebp+var_1D8], 1Bh
		mov	[esp+4], eax
		lea	eax, [ebp+var_170]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1EiPKvj
		lea	eax, [ebp+var_170]
		mov	[esp+4], eax
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 18h
		call	ds:_ZN8QVariantaSERKS_
		lea	eax, [ebp+var_170]
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Bh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_94]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_40678D
		mov	eax, [ebp+var_94]
		mov	[ebp+var_1D8], 29h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40678D
; ---------------------------------------------------------------------------

loc_406B57:				; CODE XREF: sub_406220+4FAj
		mov	ebx, edi

loc_406B59:				; CODE XREF: sub_406220+502j
					; sub_406220+A87j ...
		mov	ecx, [ebp+var_28]
		mov	eax, [ecx+0Ch]
		sub	eax, [ecx+8]
		cmp	eax, edx
		jz	loc_407AF7

loc_406B6A:				; CODE XREF: sub_406220+18E0j
		mov	eax, [ebp+var_20]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jz	loc_40868D
		mov	[ebp+var_262], 0

loc_406B80:				; CODE XREF: sub_406220+18E6j
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	sub_411890
		cmp	[ebp+var_262], 0
		jz	loc_406472
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Bh
		call	sub_410CE0

loc_406BB7:				; CODE XREF: sub_406220+F8j
		lea	eax, [ebp+var_28]
		mov	[esp+10h], eax
		mov	eax, [ebp+arg_0]
		lea	edx, [ebp+var_A0]
		mov	dword ptr [esp+8], 1
		mov	[esp], edx
		mov	[ebp+var_1D8], 3Bh
		mov	[esp+0Ch], eax
		lea	eax, [ebp+var_E8]
		mov	[esp+4], eax
		call	ds:_ZN22QDBusAbstractInterface20callWithArgumentListEN5QDBus8CallModeERK7QStringRK5QListI8QVariantE
		lea	eax, [ebp+var_A0]
		push	ebx
		mov	[esp], eax
		mov	[ebp+var_1D8], 17h
		call	ds:_ZNK12QDBusMessage4typeEv
		cmp	eax, 3
		jz	loc_407B0B
		lea	eax, [ebp+var_A0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 17h
		call	ds:_ZNK12QDBusMessage4typeEv
		cmp	eax, 2
		jz	loc_407865
		lea	eax, [ebp+var_A0]
		mov	[esp], eax
		call	ds:_ZNK12QDBusMessage4typeEv
		mov	[esp+8], eax
		mov	eax, ds:_iob
		mov	dword ptr [esp+4], offset aInvalidReplyTy ; "Invalid reply type	%d\n"
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		mov	[ebp+var_250], 1

loc_406C6A:				; CODE XREF: sub_406220+17B5j
					; sub_406220+1AADj
		lea	eax, [ebp+var_A0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Bh
		call	ds:_ZN12QDBusMessageD1Ev
		jmp	loc_4073FA
; ---------------------------------------------------------------------------

loc_406C88:				; CODE XREF: sub_406220+597j
		mov	eax, [ebp+var_70]
		mov	[ebp+var_1D8], 2Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4067BD
; ---------------------------------------------------------------------------

loc_406CA3:				; CODE XREF: sub_406220+5DFj
		mov	edi, ebx
		mov	ebx, esi
		jmp	loc_406B59
; ---------------------------------------------------------------------------
		align 10h

loc_406CB0:				; CODE XREF: sub_406220+66Aj
					; sub_406220+677j
		mov	eax, [ebp+var_24]
		lea	edx, [ebp+var_74]
		mov	[esp+4], edx
		mov	[ebp+var_74], offset asc_41A2A7	; "("
		mov	edx, [eax+8]
		mov	[ebp+var_1D8], 29h
		lea	eax, [eax+edx*4+14h]
		mov	[esp], eax
		call	ds:_ZNK7QStringeqERK13QLatin1String
		test	al, al
		jz	loc_40689D
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_406CF8
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	sub_4118C0

loc_406CF8:				; CODE XREF: sub_406220+ACBj
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_E0], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_406D2D
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 4
		call	sub_4118C0

loc_406D2D:				; CODE XREF: sub_406220+AF6j
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+10h]
		lea	ebx, [edx+4]
		mov	[ebp+var_220], ebx
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	loc_4070A0

loc_406D51:				; CODE XREF: sub_406220+E96j
		mov	eax, [ebp+var_220]
		mov	[ebp+var_1D8], 4
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	ds:_ZN9QListData5eraseEPPv
		mov	eax, [ebp+var_E0]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4070BB

loc_406D85:				; CODE XREF: sub_406220+EB4j
		mov	edx, [ebp+var_1E8]
		mov	ebx, [ebp+var_1EC]
		mov	[ebp+var_78], edx
		lock inc dword ptr [ebx]
		setnz	al
		lea	esi, [esi+0]

loc_406DA0:				; CODE XREF: sub_406220+C8Aj
		mov	eax, [ebp+var_24]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jz	loc_406ED8

loc_406DAF:				; CODE XREF: sub_406220+CB2j
		lea	ebx, [ebp+var_DC]
		mov	[esp+4], ebx
		mov	edx, [eax+8]
		mov	[ebp+var_DC], offset asc_41A0DB	; ")"
		mov	[ebp+var_1D8], 7
		lea	eax, [eax+edx*4+14h]
		mov	[esp], eax
		call	ds:_ZNK7QStringeqERK13QLatin1String
		test	al, al
		jnz	loc_406ED8
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_406E04
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 7
		call	sub_4118C0

loc_406E04:				; CODE XREF: sub_406220+BCDj
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_D8], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_406E39
		lea	edx, [ebp+var_24]
		mov	[esp], edx
		mov	[ebp+var_1D8], 3
		call	sub_4118C0

loc_406E39:				; CODE XREF: sub_406220+C02j
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+10h]
		lea	ebx, [edx+4]
		mov	[ebp+var_1FC], ebx
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	loc_407073

loc_406E5D:				; CODE XREF: sub_406220+E69j
		mov	eax, [ebp+var_1FC]
		lea	edx, [ebp+var_24]
		mov	[esp], edx
		mov	[ebp+var_1D8], 3
		mov	[esp+4], eax
		call	ds:_ZN9QListData5eraseEPPv
		lea	eax, [ebp+var_D8]
		mov	[esp+4], eax
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		mov	[ebp+var_1D8], 6
		call	sub_411990
		mov	eax, [ebp+var_D8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_406DA0
		mov	eax, [ebp+var_D8]
		mov	[ebp+var_1D8], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_24]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jnz	loc_406DAF

loc_406ED8:				; CODE XREF: sub_406220+B89j
					; sub_406220+BBFj
		mov	edx, [ebp+var_24]
		mov	[ebp+var_D4], offset asc_41A0DB	; ")"
		mov	ecx, [edx+8]
		mov	eax, [edx+0Ch]
		sub	eax, ecx
		test	eax, eax
		jle	loc_407478
		mov	eax, [edx+ecx*4+14h]
		mov	[ebp+var_D0], eax
		lock inc dword ptr [eax]
		setnz	dl

loc_406F05:				; CODE XREF: sub_406220+1270j
		lea	eax, [ebp+var_D4]
		mov	[esp+4], eax
		lea	eax, [ebp+var_D0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 5
		call	ds:_ZNK7QStringeqERK13QLatin1String
		mov	[ebp+var_221], al
		mov	eax, [ebp+var_D0]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4071A3

loc_406F42:				; CODE XREF: sub_406220+F9Cj
		cmp	[ebp+var_221], 0
		jnz	loc_4070D9

loc_406F4F:				; CODE XREF: sub_406220+F5Fj
					; sub_406220+F7Ej
		lea	eax, [ebp+var_78]
		mov	[esp+4], eax
		lea	eax, [ebp+var_110]
		mov	[esp], eax
		mov	[ebp+var_1D8], 28h
		call	ds:_ZN8QVariantC1ERK11QStringList
		lea	eax, [ebp+var_110]
		mov	[esp+4], eax
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 27h
		call	ds:_ZN8QVariantaSERKS_
		lea	eax, [ebp+var_110]
		mov	[esp], eax
		mov	[ebp+var_1D8], 28h
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_78]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_4069AF
		mov	eax, [ebp+var_78]
		mov	[ebp+var_1D8], 29h
		mov	[esp+4], eax
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		call	sub_411940
		cmp	[ebp+var_200], 86h
		jnz	loc_4069BF

loc_406FE8:				; CODE XREF: sub_406220+799j
		lea	eax, [ebp+var_100]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		mov	[ebp+var_1D8], 29h
		call	ds:_ZNK8QVariant6toUIntEPb
		mov	[ebp+var_19], al
		lea	eax, [ebp+var_19]
		mov	[esp+8], eax
		lea	eax, [ebp+var_130]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+4], 86h
		mov	[esp], eax
		call	ds:_ZN8QVariantC1EiPKvj
		lea	eax, [ebp+var_130]
		mov	[esp+4], eax
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 24h
		call	ds:_ZN8QVariantaSERKS_
		lea	eax, [ebp+var_130]
		mov	[esp], eax
		mov	[ebp+var_1D8], 29h
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_40678D
; ---------------------------------------------------------------------------

loc_407073:				; CODE XREF: sub_406220+C37j
		mov	eax, [edx+4]
		mov	[ebp+var_1D8], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_406E5D
; ---------------------------------------------------------------------------
		align 10h

loc_407090:				; CODE XREF: sub_406220+5C1j
		mov	eax, [ebp+var_64]
		mov	edi, ebx
		mov	edx, [eax+0Ch]
		sub	edx, [eax+8]
		jmp	loc_406B59
; ---------------------------------------------------------------------------

loc_4070A0:				; CODE XREF: sub_406220+B2Bj
		mov	eax, [edx+4]
		mov	[ebp+var_1D8], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_406D51
; ---------------------------------------------------------------------------

loc_4070BB:				; CODE XREF: sub_406220+B5Fj
		mov	eax, [ebp+var_E0]
		mov	[ebp+var_1D8], 29h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_406D85
; ---------------------------------------------------------------------------

loc_4070D9:				; CODE XREF: sub_406220+D29j
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_4070F8
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 7
		call	sub_4118C0

loc_4070F8:				; CODE XREF: sub_406220+EC1j
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_CC], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_40712D
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 2
		call	sub_4118C0

loc_40712D:				; CODE XREF: sub_406220+EF6j
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+10h]
		lea	ebx, [edx+4]
		mov	[ebp+var_248], ebx
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	loc_407770

loc_407151:				; CODE XREF: sub_406220+1566j
		mov	eax, [ebp+var_248]
		mov	[ebp+var_1D8], 2
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	ds:_ZN9QListData5eraseEPPv
		mov	eax, [ebp+var_CC]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_406F4F
		mov	eax, [ebp+var_CC]
		mov	[ebp+var_1D8], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_406F4F
; ---------------------------------------------------------------------------

loc_4071A3:				; CODE XREF: sub_406220+D1Cj
		mov	eax, [ebp+var_D0]
		mov	[ebp+var_1D8], 7
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_406F42
; ---------------------------------------------------------------------------

loc_4071C1:				; CODE XREF: sub_406220+789j
		mov	eax, [ebp+var_7C]
		mov	[ebp+var_1D8], 29h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4069AF
; ---------------------------------------------------------------------------

loc_4071DC:				; CODE XREF: sub_406220+6ECj
		mov	eax, [edx+4]
		mov	[ebp+var_1D8], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_406912
; ---------------------------------------------------------------------------

loc_4071F7:				; CODE XREF: sub_406220+7B3j
		mov	dword ptr [esp+8], offset sub_410610
		mov	dword ptr [esp+4], offset sub_410510
		mov	dword ptr [esp], offset	aQdbusvariant ;	"QDBusVariant"
		mov	[ebp+var_1D8], 29h
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A58, eax
		mov	eax, dword_419A58
		cmp	[ebp+var_200], eax
		jnz	loc_4069EA

loc_407234:				; CODE XREF: sub_406220+7C4j
		lea	eax, [ebp+var_100]
		mov	[esp+4], eax
		lea	eax, [ebp+var_140]
		mov	[esp], eax
		mov	[ebp+var_1D8], 29h
		call	ds:_ZN8QVariantC2ERKS_
		mov	eax, dword_419A58
		test	eax, eax
		jz	loc_4077A5

loc_407264:				; CODE XREF: sub_406220+15B1j
		mov	edx, dword_419A58
		lea	eax, [ebp+var_140]
		mov	[esp+8], eax
		lea	eax, [ebp+var_150]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp], eax
		mov	[esp+4], edx
		mov	[ebp+var_1D8], 21h
		call	ds:_ZN8QVariantC1EiPKvj
		lea	eax, [ebp+var_150]
		mov	[esp+4], eax
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 20h
		call	ds:_ZN8QVariantaSERKS_
		lea	eax, [ebp+var_150]
		mov	[esp], eax
		mov	[ebp+var_1D8], 21h
		call	ds:_ZN8QVariantD1Ev
		lea	eax, [ebp+var_140]
		mov	[esp], eax
		mov	[ebp+var_1D8], 29h
		call	ds:_ZN8QVariantD2Ev
		jmp	loc_40678D
; ---------------------------------------------------------------------------

loc_4072F3:				; CODE XREF: sub_406220+618j
		mov	eax, [ebp+var_64]
		mov	edx, [ebp+var_228]
		add	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_1D8], 2Dh
		mov	[esp], eax
		call	ds:_ZN9QMetaType4typeEPKc
		mov	[ebp+var_200], eax
		mov	ecx, [ebp+var_200]
		test	ecx, ecx
		jnz	loc_40684C

loc_40732D:				; CODE XREF: sub_406220+626j
		mov	eax, [ebp+var_64]
		mov	edx, [ebp+var_228]
		add	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	edx, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_270], eax
		mov	eax, [edx]
		mov	[ebp+var_68], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_6C]
		lea	edx, [ebp+var_68]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 2Ch
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	ebx, [ebp+var_270]
		mov	eax, [ebp+var_6C]
		push	edx
		mov	[esp+0Ch], ebx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aCannotCallMeth ; "Cannot call method	'%s' because type '%"...
		mov	[ebp+var_1D8], 2Bh
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		mov	eax, [ebp+var_6C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4079F5

loc_4073B9:				; CODE XREF: sub_406220+17EBj
		mov	eax, [ebp+var_68]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4079DA

loc_4073CA:				; CODE XREF: sub_406220+17D0j
					; sub_406220+18BAj ...
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	sub_411890

loc_4073DF:				; CODE XREF: sub_406220+1CE3j
		mov	[ebp+var_250], 1

loc_4073E9:				; CODE XREF: sub_406220+1AFCj
					; sub_406220+25E5j
		mov	eax, [ebp+var_2C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40780F

loc_4073FA:				; CODE XREF: sub_406220+A63j
					; sub_406220+1605j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ch
		call	sub_412440
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4077EE

loc_407420:				; CODE XREF: sub_406220+15EAj
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_407443
		mov	eax, [ebp+var_20]
		mov	[ebp+var_1D8], 3Eh
		mov	[esp], eax
		call	ds:_Z5qFreePv

loc_407443:				; CODE XREF: sub_406220+120Bj
		lea	eax, [ebp+var_E8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0FFFFFFFFh
		call	ds:_ZN14QDBusInterfaceD1Ev
		lea	eax, [ebp+var_1DC]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_250]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_407478:				; CODE XREF: sub_406220+CCFj
		mov	eax, [ebp+var_1E0]
		mov	edx, [ebp+var_1E4]
		mov	[ebp+var_D0], eax
		lock inc dword ptr [edx]
		setnz	al
		jmp	loc_406F05
; ---------------------------------------------------------------------------

loc_407495:				; CODE XREF: sub_406220+848j
		mov	[esp], edx
		mov	[ebp+var_1D8], 1Bh
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	ebx, [ebp+var_214]
		cmp	[ebp+var_1E0], ebx
		jnz	loc_406A80

loc_4074BA:				; CODE XREF: sub_406220+85Aj
		mov	eax, [ebp+var_70]
		mov	[ebp+var_98], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_9C]
		lea	edx, [ebp+var_98]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Ah
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_9C]
		push	esi
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aCannotPassArgu ; "Cannot pass argument '%s' because it is"...
		mov	[ebp+var_1D8], 19h
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Ah
		call	sub_410CE0
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Bh
		call	sub_4126A0
		mov	eax, [ebp+var_94]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_407AB4
		mov	eax, [ebp+var_94]
		mov	[ebp+var_1D8], 29h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_407AB4
; ---------------------------------------------------------------------------
		align 10h

loc_407580:				; CODE XREF: sub_406220+7D1j
		mov	dword ptr [esp+8], offset sub_410820
		mov	dword ptr [esp+4], offset sub_4105C0
		mov	dword ptr [esp], offset	aQdbusobjectpat	; "QDBusObjectPath"
		mov	[ebp+var_1D8], 29h
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A64, eax
		mov	eax, dword_419A64
		cmp	[ebp+var_200], eax
		jnz	loc_406A08

loc_4075BD:				; CODE XREF: sub_406220+7E2j
		mov	eax, [ebp+var_70]
		mov	[ebp+var_88], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_1D8], 9
		call	ds:_ZN15QDBusObjectPath5checkEv
		mov	eax, [ebp+var_88]
		mov	[ebp+var_244], eax
		lock inc dword ptr [eax]
		setnz	al
		mov	edx, [ebp+var_244]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jz	loc_4077D6

loc_40760B:				; CODE XREF: sub_406220+15C9j
		mov	ebx, [ebp+var_244]
		cmp	[ebp+var_1E0], ebx
		jz	loc_40848B
		mov	eax, dword_419A64
		test	eax, eax
		jnz	short loc_407652
		mov	dword ptr [esp+8], offset sub_410820
		mov	dword ptr [esp+4], offset sub_4105C0
		mov	dword ptr [esp], offset	aQdbusobjectpat	; "QDBusObjectPath"
		mov	[ebp+var_1D8], 1Fh
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A64, eax

loc_407652:				; CODE XREF: sub_406220+1404j
		mov	edx, dword_419A64
		lea	eax, [ebp+var_88]
		mov	[esp+8], eax
		lea	eax, [ebp+var_160]
		mov	dword ptr [esp+0Ch], 0
		mov	[esp], eax
		mov	[esp+4], edx
		mov	[ebp+var_1D8], 1Fh
		call	ds:_ZN8QVariantC1EiPKvj
		lea	eax, [ebp+var_160]
		mov	[esp+4], eax
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Ch
		call	ds:_ZN8QVariantaSERKS_
		lea	eax, [ebp+var_160]
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Fh
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp+var_88]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_40678D
		mov	eax, [ebp+var_88]
		mov	[ebp+var_1D8], 29h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40678D
; ---------------------------------------------------------------------------

loc_4076F5:				; CODE XREF: sub_406220+7EFj
		mov	dword ptr [esp+8], offset sub_4107D0
		mov	dword ptr [esp+4], offset sub_410570
		mov	dword ptr [esp], offset	aQdbussignature	; "QDBusSignature"
		mov	[ebp+var_1D8], 29h
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A60, eax
		mov	eax, dword_419A60
		cmp	[ebp+var_200], eax
		jz	loc_406A26

loc_407732:				; CODE XREF: sub_406220+800j
		mov	eax, [ebp+var_64]
		mov	edx, [ebp+var_228]
		add	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aSorryCanTPassA ; "Sorry, can't pass arg of type '%s'.\n"
		mov	[ebp+var_1D8], 29h
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		jmp	loc_407AB4
; ---------------------------------------------------------------------------

loc_407770:				; CODE XREF: sub_406220+F2Bj
		mov	eax, [edx+4]
		mov	[ebp+var_1D8], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_407151
; ---------------------------------------------------------------------------

loc_40778B:				; CODE XREF: sub_406220+DAj
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Dh
		call	sub_4118C0
		jmp	loc_406300
; ---------------------------------------------------------------------------

loc_4077A5:				; CODE XREF: sub_406220+103Ej
		mov	dword ptr [esp+8], offset sub_410610
		mov	dword ptr [esp+4], offset sub_410510
		mov	dword ptr [esp], offset	aQdbusvariant ;	"QDBusVariant"
		mov	[ebp+var_1D8], 21h
		call	ds:_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE
		mov	dword_419A58, eax
		jmp	loc_407264
; ---------------------------------------------------------------------------

loc_4077D6:				; CODE XREF: sub_406220+13E5j
		mov	[esp], edx
		mov	[ebp+var_1D8], 1Fh
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40760B
; ---------------------------------------------------------------------------

loc_4077EE:				; CODE XREF: sub_406220+11FAj
		mov	eax, [ebp+var_24]
		mov	[ebp+var_1D8], 3Dh
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_407420
; ---------------------------------------------------------------------------

loc_40780F:				; CODE XREF: sub_406220+11D4j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_1D8], 3Bh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_4073FA
; ---------------------------------------------------------------------------

loc_40782A:				; CODE XREF: sub_406220+286j
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	sub_4118C0
		jmp	loc_4064AC
; ---------------------------------------------------------------------------

loc_407844:				; CODE XREF: sub_406220+273j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_1D8], 3Ah
		mov	[esp+4], eax
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_406499
; ---------------------------------------------------------------------------

loc_407865:				; CODE XREF: sub_406220+A0Fj
		lea	eax, [ebp+var_C8]
		lea	edx, [ebp+var_A0]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 17h
		call	ds:_ZNK12QDBusMessage9argumentsEv
		mov	eax, [ebp+var_C8]
		push	ebx
		mov	[ebp+var_190], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_190]
		test	byte ptr [eax+10h], 1
		jnz	short loc_4078C6
		mov	eax, [eax+4]
		mov	[ebp+var_1D8], 0Ch
		mov	[esp+4], eax
		lea	eax, [ebp+var_190]
		mov	[esp], eax
		call	sub_411B60

loc_4078C6:				; CODE XREF: sub_406220+1685j
		mov	eax, [ebp+var_190]
		mov	[ebp+var_18C], 0
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_188], edx
		mov	edx, [eax+0Ch]
		mov	[ebp+var_1D8], 0Bh
		lea	eax, [eax+edx*4+14h]
		mov	[ebp+var_184], eax
		lea	eax, [ebp+var_C8]
		mov	[esp], eax
		call	sub_412440
		cmp	[ebp+var_18C], 0
		jnz	loc_4079B3
		mov	eax, [ebp+var_188]
		cmp	eax, [ebp+var_184]
		jz	loc_4079B3
		mov	edx, ds:_ZN8QVariantC1ERKS_
		mov	[ebp+var_1F0], edx
		jmp	short loc_40793D
; ---------------------------------------------------------------------------

loc_407935:				; CODE XREF: sub_406220+1791j
		cmp	eax, [ebp+var_184]
		jz	short loc_4079B3

loc_40793D:				; CODE XREF: sub_406220+1713j
		mov	eax, [eax]
		lea	ebx, [ebp+var_1A0]
		mov	[esp], ebx
		mov	[ebp+var_1D8], 0Bh
		mov	[esp+4], eax
		call	[ebp+var_1F0]
		lea	eax, [ebp+var_1A0]
		mov	[ebp+var_1D8], 0Ah
		call	sub_4024A0
		lea	eax, [ebp+var_1A0]
		sub	[ebp+var_18C], 1
		mov	[esp], eax
		mov	[ebp+var_1D8], 0Bh
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp+var_18C]
		mov	eax, [ebp+var_188]
		add	edx, 1
		add	eax, 4
		test	edx, edx
		mov	[ebp+var_18C], edx
		mov	[ebp+var_188], eax
		jz	short loc_407935

loc_4079B3:				; CODE XREF: sub_406220+16EFj
					; sub_406220+1701j ...
		lea	eax, [ebp+var_190]
		mov	[esp], eax
		mov	[ebp+var_1D8], 17h
		call	sub_412440
		mov	[ebp+var_250], 0
		jmp	loc_406C6A
; ---------------------------------------------------------------------------

loc_4079DA:				; CODE XREF: sub_406220+11A4j
		mov	eax, [ebp+var_68]
		mov	[ebp+var_1D8], 2Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4073CA
; ---------------------------------------------------------------------------

loc_4079F5:				; CODE XREF: sub_406220+1193j
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_1D8], 2Ch
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_4073B9
; ---------------------------------------------------------------------------

loc_407A10:				; CODE XREF: sub_406220+567j
		mov	eax, [ebp+var_64]
		mov	edx, [ebp+var_228]
		add	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_26C], eax
		mov	eax, [ebp+var_70]
		mov	[ebp+var_80], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_84]
		lea	edx, [ebp+var_80]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 23h
		call	ds:_ZNK7QString11toLocal8BitEv
		push	eax
		mov	eax, [ebp+var_26C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+var_84]
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aCouldNotConver ; "Could not convert '%s' to type '%s'.\n"
		mov	[ebp+var_1D8], 22h
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		mov	eax, [ebp+var_84]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_407CED

loc_407AA3:				; CODE XREF: sub_406220+1AE6j
		mov	eax, [ebp+var_80]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_407CD2

loc_407AB4:				; CODE XREF: sub_406220+133Aj
					; sub_406220+1359j ...
		mov	eax, [ebp+var_70]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_407ADF

loc_407AC1:				; CODE XREF: sub_406220+18D5j
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 2Dh
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_4073CA
; ---------------------------------------------------------------------------

loc_407ADF:				; CODE XREF: sub_406220+189Fj
		mov	eax, [ebp+var_70]
		mov	[ebp+var_1D8], 2Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_407AC1
; ---------------------------------------------------------------------------

loc_407AF7:				; CODE XREF: sub_406220+944j
		cmp	ebx, edi
		mov	[ebp+var_262], 1
		jnz	loc_406B6A
		jmp	loc_406B80
; ---------------------------------------------------------------------------

loc_407B0B:				; CODE XREF: sub_406220+9EDj
		lea	eax, [ebp+var_A0]
		mov	[esp+4], eax
		lea	eax, [ebp+var_180]
		mov	[esp], eax
		call	ds:_ZN10QDBusErrorC1ERK12QDBusMessage
		cmp	[ebp+var_261], 0
		mov	[ebp+var_250], 1
		jz	loc_407CB5
		lea	eax, [ebp+var_180]
		mov	[esp], eax
		mov	[ebp+var_1D8], 16h
		call	ds:_ZNK10QDBusError4typeEv
		cmp	eax, 10h
		jz	loc_407F08

loc_407B5D:				; CODE XREF: sub_406220+2347j
		lea	eax, [ebp+var_180]
		mov	[esp], eax
		mov	[ebp+var_1D8], 16h
		call	ds:_ZNK10QDBusError4typeEv
		cmp	eax, 4
		jz	loc_40880A
		lea	eax, [ebp+var_C0]
		lea	edx, [ebp+var_180]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 16h
		call	ds:_ZNK10QDBusError7messageEv
		lea	eax, [ebp+var_C4]
		push	edx
		lea	edx, [ebp+var_C0]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 10h
		call	ds:_ZNK7QString11toLocal8BitEv
		push	eax
		mov	eax, [ebp+var_C4]
		lea	edx, [ebp+var_180]
		mov	eax, [eax+0Ch]
		mov	[esp+4], edx
		mov	[ebp+var_1D8], 0Fh
		mov	[ebp+var_268], eax
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		call	ds:_ZNK10QDBusError4nameEv
		lea	eax, [ebp+var_BC]
		push	edi
		lea	edx, [ebp+var_B8]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 0Eh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	ebx, [ebp+var_268]
		mov	eax, [ebp+var_BC]
		push	esi
		mov	[esp+8], ebx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp], offset	aErrorSS ; "Error: %s\n%s\n"
		mov	[ebp+var_1D8], 0Dh
		mov	[esp+4], eax
		call	printf
		lea	eax, [ebp+var_BC]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0Eh
		call	sub_410CE0
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0Fh
		call	sub_4126A0
		lea	eax, [ebp+var_C4]
		mov	[esp], eax
		mov	[ebp+var_1D8], 10h
		call	sub_410CE0
		lea	eax, [ebp+var_C0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 16h
		call	sub_4126A0

loc_407CAB:				; CODE XREF: sub_406220+2681j
		mov	[ebp+var_250], 2

loc_407CB5:				; CODE XREF: sub_406220+1915j
					; sub_406220+1E12j
		lea	eax, [ebp+var_180]
		mov	[esp], eax
		mov	[ebp+var_1D8], 17h
		call	sub_410D10
		jmp	loc_406C6A
; ---------------------------------------------------------------------------

loc_407CD2:				; CODE XREF: sub_406220+188Ej
		mov	eax, [ebp+var_80]
		mov	[ebp+var_1D8], 29h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_407AB4
; ---------------------------------------------------------------------------

loc_407CED:				; CODE XREF: sub_406220+187Dj
		mov	eax, [ebp+var_84]
		mov	[ebp+var_1D8], 23h
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_407AA3
; ---------------------------------------------------------------------------

loc_407D0B:				; CODE XREF: sub_406220+2AAj
		cmp	[ebp+var_261], 0
		mov	[ebp+var_250], 1
		jz	loc_4073E9
		mov	edx, [ebp+var_24]
		mov	eax, [edx+0Ch]
		sub	eax, [edx+8]
		cmp	eax, 1
		jz	loc_4086C4

loc_407D34:				; CODE XREF: sub_406220+269Bj
		mov	edx, [ebp+var_254]
		mov	eax, [edx]
		mov	[ebp+var_5C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_60]
		lea	edx, [ebp+var_5C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 35h
		call	ds:_ZNK7QString11toLocal8BitEv
		push	eax
		mov	eax, [ebp+var_60]
		mov	ebx, [ebp+var_258]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_27C], eax
		mov	eax, [ebx]
		mov	[ebp+var_54], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_58]
		lea	edx, [ebp+var_54]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 33h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_58]
		mov	edx, [ebp+arg_0]
		push	edi
		mov	eax, [eax+0Ch]
		mov	[ebp+var_278], eax
		mov	eax, [edx]
		mov	[ebp+var_4C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_50]
		lea	edx, [ebp+var_4C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 31h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_50]
		mov	ebx, [ebp+var_25C]
		push	esi
		mov	eax, [eax+0Ch]
		mov	[ebp+var_274], eax
		mov	eax, [ebx]
		mov	[ebp+var_44], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_48]
		lea	edx, [ebp+var_44]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 2Fh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_27C]
		push	ebx
		mov	edx, [ebp+var_278]
		mov	ebx, [ebp+var_274]
		mov	[esp+14h], eax
		mov	eax, [ebp+var_48]
		mov	[esp+10h], edx
		mov	[esp+0Ch], ebx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aCannotFindS_SI ; "Cannot find '%s.%s' in object %s at %s\"...
		mov	[ebp+var_1D8], 2Eh
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_1D8], 2Fh
		call	sub_410CE0
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_1D8], 30h
		call	sub_4126A0
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_1D8], 31h
		call	sub_410CE0
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 32h
		call	sub_4126A0
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_1D8], 33h
		call	sub_410CE0
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_1D8], 34h
		call	sub_4126A0
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_1D8], 35h
		call	sub_410CE0
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	sub_4126A0
		jmp	loc_4073DF
; ---------------------------------------------------------------------------

loc_407F08:				; CODE XREF: sub_406220+1937j
		mov	edx, [ebp+var_1E8]
		mov	[ebp+var_A4], edx
		lock inc dword ptr [edx]
		setnz	al
		mov	ebx, [ebp+var_25C]
		lea	eax, [ebp+var_A4]
		mov	[esp], eax
		mov	[ebp+var_1D8], 15h
		mov	[esp+4], ebx
		call	sub_411990
		mov	eax, [ebp+arg_0]
		mov	[esp+4], eax
		lea	eax, [ebp+var_A4]
		mov	[esp], eax
		call	sub_411990
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aGet ; "Get"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_AC], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aOrg_freedesk_0	; "org.freedesktop.DBus.Properties"
		mov	[ebp+var_1D8], 14h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_A8], eax
		lea	eax, [ebp+var_A4]
		mov	edx, [ebp+var_258]
		mov	[esp+4], eax
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		mov	eax, [ebp+var_254]
		lea	ecx, [ebp+var_A8]
		mov	dword ptr [esp+8], 0
		mov	[ebp+var_1D8], 13h
		call	sub_406220
		mov	[ebp+var_280], eax
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 14h
		call	sub_4126A0
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		mov	[ebp+var_1D8], 15h
		call	sub_4126A0
		cmp	[ebp+var_280], 0
		jnz	loc_40854F
		lea	eax, [ebp+var_A4]
		mov	[esp], eax
		mov	[ebp+var_1D8], 16h
		call	sub_411210
		mov	[ebp+var_250], 0
		jmp	loc_407CB5
; ---------------------------------------------------------------------------

loc_408037:				; DATA XREF: sub_406220+4Eo
		add	ebp, 18h
		mov	eax, [ebp+var_1D8]
		mov	edx, [ebp+var_1D4]
		cmp	eax, 1
		mov	[ebp+var_240], edx
		jz	loc_408653
		cmp	eax, 2
		jz	loc_408670
		cmp	eax, 3
		jz	loc_408636
		cmp	eax, 4
		jz	loc_408619
		cmp	eax, 5
		jz	loc_408670
		cmp	eax, 6
		lea	esi, [esi+0]
		jz	loc_408413
		cmp	eax, 7
		jz	loc_408C32
		cmp	eax, 8
		jz	loc_408BEC
		cmp	eax, 9
		nop
		lea	esi, [esi+0]
		jz	loc_408A87
		cmp	eax, 0Ah
		jz	loc_408AA0
		cmp	eax, 0Bh
		jz	loc_408BCF
		cmp	eax, 0Ch
		nop
		lea	esi, [esi+0]
		jz	loc_408B6A
		cmp	eax, 0Dh
		jz	loc_408B82
		cmp	eax, 0Eh
		jz	loc_408B9A
		cmp	eax, 0Fh
		nop
		lea	esi, [esi+0]
		jz	loc_408BB2
		cmp	eax, 10h
		jz	loc_408AD6
		cmp	eax, 11h
		jz	loc_408AEE
		cmp	eax, 12h
		nop
		lea	esi, [esi+0]
		jz	loc_408B20
		cmp	eax, 13h
		jz	loc_408B38
		cmp	eax, 14h
		jz	loc_408B50
		cmp	eax, 15h
		nop
		lea	esi, [esi+0]
		jz	loc_408B06
		cmp	eax, 16h
		jz	loc_408AB8
		cmp	eax, 17h
		jz	loc_408A6C
		cmp	eax, 18h
		nop
		lea	esi, [esi+0]
		jz	loc_4089F6
		cmp	eax, 19h
		jz	loc_408A0E
		cmp	eax, 1Ah
		jz	loc_408A26
		cmp	eax, 1Bh
		nop
		lea	esi, [esi+0]
		jz	loc_4089DB
		cmp	eax, 1Ch
		jz	loc_408965
		cmp	eax, 1Dh
		jz	loc_40897D
		cmp	eax, 1Eh
		nop
		lea	esi, [esi+0]
		jz	loc_408995
		cmp	eax, 1Fh
		jz	loc_40892E
		cmp	eax, 20h
		jz	loc_408947
		cmp	eax, 21h
		nop
		lea	esi, [esi+0]
		jz	loc_4088FC
		cmp	eax, 22h
		jz	loc_408914
		cmp	eax, 23h
		jz	loc_4088DE
		cmp	eax, 24h
		nop
		lea	esi, [esi+0]
		jz	loc_4088C0
		cmp	eax, 25h
		jz	loc_4082C8
		cmp	eax, 26h
		jz	loc_4083FA
		cmp	eax, 27h
		nop
		lea	esi, [esi+0]
		jz	loc_408413
		cmp	eax, 28h
		jz	loc_4082DD
		cmp	eax, 29h
		jz	loc_4082F2
		cmp	eax, 2Ah
		nop
		lea	esi, [esi+0]
		jz	loc_4083CB
		cmp	eax, 2Bh
		jz	loc_4083E0
		cmp	eax, 2Ch
		jz	loc_40830B
		cmp	eax, 2Dh
		nop
		lea	esi, [esi+0]
		jz	loc_40856C
		cmp	eax, 2Eh
		jz	loc_408581
		cmp	eax, 2Fh
		jz	loc_408596
		cmp	eax, 30h
		nop
		lea	esi, [esi+0]
		jz	loc_4085AB
		cmp	eax, 31h
		jz	loc_4085C0
		cmp	eax, 32h
		jz	loc_4085D5
		cmp	eax, 33h
		nop
		lea	esi, [esi+0]
		jz	loc_4085EA
		cmp	eax, 34h
		jz	loc_4085FF
		cmp	eax, 35h
		jz	loc_408447
		cmp	eax, 36h
		nop
		lea	esi, [esi+0]
		jz	loc_40845C
		cmp	eax, 37h
		jz	loc_408471
		cmp	eax, 38h
		jz	loc_40842D
		cmp	eax, 39h
		nop
		lea	esi, [esi+0]
		jz	short loc_408320
		cmp	eax, 3Ah
		jz	loc_408335
		cmp	eax, 3Bh
		xchg	ax, ax
		jz	loc_40834A
		cmp	eax, 3Ch
		jz	loc_40835F
		cmp	eax, 3Dh
		jz	loc_40839A

loc_4082C8:				; CODE XREF: sub_406220+1FA9j
					; sub_406220+26B9j
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_4082DD:				; CODE XREF: sub_406220+1FC9j
					; sub_406220+2208j ...
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_4082F2:				; CODE XREF: sub_406220+1FD2j
		lea	eax, [ebp+var_100]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD1Ev

loc_40830B:				; CODE XREF: sub_406220+1FF2j
					; sub_406220+21D5j
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_411890

loc_408320:				; CODE XREF: sub_406220+2080j
					; sub_406220+2222j ...
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_408335:				; CODE XREF: sub_406220+2085j
					; sub_406220+28B1j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_412440

loc_40834A:				; CODE XREF: sub_406220+2090j
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_411210

loc_40835F:				; CODE XREF: sub_406220+2099j
		mov	eax, [ebp+var_240]
		mov	[ebp+var_234], eax
		mov	eax, [ebp+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_40838E
		mov	eax, [ebp+var_20]
		mov	[ebp+var_1D8], 0
		mov	[esp], eax
		call	ds:_Z5qFreePv

loc_40838E:				; CODE XREF: sub_406220+2156j
		mov	edx, [ebp+var_234]
		mov	[ebp+var_240], edx

loc_40839A:				; CODE XREF: sub_406220+20A2j
		lea	eax, [ebp+var_E8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN14QDBusInterfaceD1Ev
		mov	ebx, [ebp+var_240]
		mov	[ebp+var_1D8], 0FFFFFFFFh
		mov	[esp], ebx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4083CB:				; CODE XREF: sub_406220+1FE0j
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_4083E0:				; CODE XREF: sub_406220+1FE9j
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0
		jmp	loc_40830B
; ---------------------------------------------------------------------------

loc_4083FA:				; CODE XREF: sub_406220+1FB2j
		lea	eax, [ebp+var_110]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD1Ev

loc_408413:				; CODE XREF: sub_406220+1E60j
					; sub_406220+1FC0j ...
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_411210
		jmp	loc_4082DD
; ---------------------------------------------------------------------------

loc_40842D:				; CODE XREF: sub_406220+2072j
		lea	eax, [ebp+var_34]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0
		jmp	loc_408320
; ---------------------------------------------------------------------------

loc_408447:				; CODE XREF: sub_406220+2052j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_40845C:				; CODE XREF: sub_406220+2060j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_408471:				; CODE XREF: sub_406220+2069j
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_411210
		jmp	loc_408320
; ---------------------------------------------------------------------------

loc_40848B:				; CODE XREF: sub_406220+13F7j
		mov	eax, [ebp+var_70]
		mov	[ebp+var_8C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_90]
		lea	edx, [ebp+var_8C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Eh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_90]
		push	edi
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aCannotPassAr_0 ; "Cannot pass argument '%s' because it is"...
		mov	[ebp+var_1D8], 1Dh
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Eh
		call	sub_410CE0
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 1Fh
		call	sub_4126A0
		mov	eax, [ebp+var_88]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_407AB4
		mov	eax, [ebp+var_88]
		mov	[ebp+var_1D8], 29h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_407AB4
; ---------------------------------------------------------------------------

loc_40854F:				; CODE XREF: sub_406220+1DEAj
		lea	eax, [ebp+var_A4]
		mov	[esp], eax
		mov	[ebp+var_1D8], 16h
		call	sub_411210
		jmp	loc_407B5D
; ---------------------------------------------------------------------------

loc_40856C:				; CODE XREF: sub_406220+2000j
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_408581:				; CODE XREF: sub_406220+2009j
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_408596:				; CODE XREF: sub_406220+2012j
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_4085AB:				; CODE XREF: sub_406220+2020j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_4085C0:				; CODE XREF: sub_406220+2029j
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_4085D5:				; CODE XREF: sub_406220+2032j
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_4085EA:				; CODE XREF: sub_406220+2040j
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_4085FF:				; CODE XREF: sub_406220+2049j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0
		jmp	loc_408320
; ---------------------------------------------------------------------------

loc_408619:				; CODE XREF: sub_406220+1E4Aj
		lea	eax, [ebp+var_D0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0
		jmp	loc_408413
; ---------------------------------------------------------------------------

loc_408636:				; CODE XREF: sub_406220+1E41j
		lea	eax, [ebp+var_E0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0
		jmp	loc_4082DD
; ---------------------------------------------------------------------------

loc_408653:				; CODE XREF: sub_406220+1E2Fj
		lea	eax, [ebp+var_CC]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0
		jmp	loc_408413
; ---------------------------------------------------------------------------

loc_408670:				; CODE XREF: sub_406220+1E38j
					; sub_406220+1E53j
		lea	eax, [ebp+var_D8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0
		jmp	loc_408413
; ---------------------------------------------------------------------------

loc_40868D:				; CODE XREF: sub_406220+953j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 1Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aInvalidNumberO	; "Invalid number of parameters\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_1D8], 2Dh
		call	fwrite
		jmp	loc_4073CA
; ---------------------------------------------------------------------------

loc_4086C4:				; CODE XREF: sub_406220+1B0Ej
		mov	edx, [ebp+var_1E8]
		mov	[ebp+var_38], edx
		lock inc dword ptr [edx]
		setnz	al
		mov	ebx, [ebp+var_25C]
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_1D8], 38h
		mov	[esp+4], ebx
		call	sub_411990
		mov	eax, [ebp+arg_0]
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		call	sub_411990
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_408719
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		call	sub_4118C0

loc_408719:				; CODE XREF: sub_406220+24ECj
		mov	eax, [ebp+var_24]
		mov	edx, [eax+8]
		mov	[ebp+var_1D8], 38h
		lea	eax, [eax+edx*4+14h]
		mov	[esp+4], eax
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		call	sub_411990
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aSet ; "Set"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_40], eax
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aOrg_freedesk_0	; "org.freedesktop.DBus.Properties"
		mov	[ebp+var_1D8], 37h
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_38]
		mov	edx, [ebp+var_258]
		mov	[esp+4], eax
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	eax, [ebp+var_254]
		lea	ecx, [ebp+var_3C]
		mov	dword ptr [esp+8], 0
		mov	[ebp+var_1D8], 36h
		call	sub_406220
		mov	[ebp+var_284], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 37h
		call	sub_4126A0
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_1D8], 38h
		call	sub_4126A0
		cmp	[ebp+var_284], 0
		jnz	loc_4088A6
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	sub_411210
		mov	[ebp+var_250], 0
		jmp	loc_4073E9
; ---------------------------------------------------------------------------

loc_40880A:				; CODE XREF: sub_406220+1959j
		mov	edx, [ebp+var_254]
		mov	eax, [edx]
		mov	[ebp+var_B0], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_B4]
		lea	edx, [ebp+var_B0]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_1D8], 12h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_B4]
		push	ecx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aServiceSDoesNo ; "Service '%s' does not exist.\n"
		mov	[ebp+var_1D8], 11h
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_B4]
		mov	[esp], eax
		mov	[ebp+var_1D8], 12h
		call	sub_410CE0
		lea	eax, [ebp+var_B0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 16h
		call	sub_4126A0
		jmp	loc_407CAB
; ---------------------------------------------------------------------------

loc_4088A6:				; CODE XREF: sub_406220+25C0j
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_1D8], 3Ah
		call	sub_411210
		jmp	loc_407D34
; ---------------------------------------------------------------------------

loc_4088C0:				; CODE XREF: sub_406220+1FA0j
		lea	eax, [ebp+var_120]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_4082C8
; ---------------------------------------------------------------------------

loc_4088DE:				; CODE XREF: sub_406220+1F92j
		lea	eax, [ebp+var_130]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	loc_4082DD
; ---------------------------------------------------------------------------

loc_4088FC:				; CODE XREF: sub_406220+1F80j
		lea	eax, [ebp+var_84]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_408914:				; CODE XREF: sub_406220+1F89j
		lea	eax, [ebp+var_80]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0
		jmp	loc_4082DD
; ---------------------------------------------------------------------------

loc_40892E:				; CODE XREF: sub_406220+1F69j
		lea	eax, [ebp+var_150]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD1Ev

loc_408947:				; CODE XREF: sub_406220+1F72j
		lea	eax, [ebp+var_140]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD2Ev
		jmp	loc_4082DD
; ---------------------------------------------------------------------------

loc_408965:				; CODE XREF: sub_406220+1F49j
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_40897D:				; CODE XREF: sub_406220+1F52j
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_408995:				; CODE XREF: sub_406220+1F60j
					; sub_406220+27D4j
		mov	eax, [ebp+var_240]
		mov	[ebp+var_23C], eax
		mov	eax, [ebp+var_88]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_4089CA
		mov	eax, [ebp+var_88]
		mov	[ebp+var_1D8], 0
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_4089CA:				; CODE XREF: sub_406220+278Fj
		mov	edx, [ebp+var_23C]
		mov	[ebp+var_240], edx
		jmp	loc_4082DD
; ---------------------------------------------------------------------------

loc_4089DB:				; CODE XREF: sub_406220+1F40j
		lea	eax, [ebp+var_160]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_408995
; ---------------------------------------------------------------------------

loc_4089F6:				; CODE XREF: sub_406220+1F20j
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_408A0E:				; CODE XREF: sub_406220+1F29j
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_408A26:				; CODE XREF: sub_406220+1F32j
					; sub_406220+2865j
		mov	eax, [ebp+var_240]
		mov	[ebp+var_238], eax
		mov	eax, [ebp+var_94]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_408A5B
		mov	eax, [ebp+var_94]
		mov	[ebp+var_1D8], 0
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_408A5B:				; CODE XREF: sub_406220+2820j
		mov	edx, [ebp+var_238]
		mov	[ebp+var_240], edx
		jmp	loc_4082DD
; ---------------------------------------------------------------------------

loc_408A6C:				; CODE XREF: sub_406220+1F12j
		lea	eax, [ebp+var_170]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD1Ev
		jmp	short loc_408A26
; ---------------------------------------------------------------------------

loc_408A87:				; CODE XREF: sub_406220+1E80j
		lea	eax, [ebp+var_1A0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN8QVariantD1Ev

loc_408AA0:				; CODE XREF: sub_406220+1E89j
		lea	eax, [ebp+var_190]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_412440

loc_408AB8:				; CODE XREF: sub_406220+1F09j
					; sub_406220+28FEj ...
		lea	eax, [ebp+var_A0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	ds:_ZN12QDBusMessageD1Ev
		jmp	loc_408335
; ---------------------------------------------------------------------------

loc_408AD6:				; CODE XREF: sub_406220+1EC9j
		lea	eax, [ebp+var_B4]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_408AEE:				; CODE XREF: sub_406220+1ED2j
		lea	eax, [ebp+var_B0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_408B06:				; CODE XREF: sub_406220+1F00j
					; sub_406220+2948j ...
		lea	eax, [ebp+var_180]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410D10
		jmp	short loc_408AB8
; ---------------------------------------------------------------------------

loc_408B20:				; CODE XREF: sub_406220+1EE0j
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_408B38:				; CODE XREF: sub_406220+1EE9j
		lea	eax, [ebp+var_AC]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_408B50:				; CODE XREF: sub_406220+1EF2j
		lea	eax, [ebp+var_A4]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_411210
		jmp	short loc_408B06
; ---------------------------------------------------------------------------

loc_408B6A:				; CODE XREF: sub_406220+1EA0j
		lea	eax, [ebp+var_BC]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_408B82:				; CODE XREF: sub_406220+1EA9j
		lea	eax, [ebp+var_B8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0

loc_408B9A:				; CODE XREF: sub_406220+1EB2j
		lea	eax, [ebp+var_C4]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_410CE0

loc_408BB2:				; CODE XREF: sub_406220+1EC0j
		lea	eax, [ebp+var_C0]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_4126A0
		jmp	loc_408B06
; ---------------------------------------------------------------------------

loc_408BCF:				; CODE XREF: sub_406220+1E92j
		lea	eax, [ebp+var_C8]
		mov	[esp], eax
		mov	[ebp+var_1D8], 0
		call	sub_412440
		jmp	loc_408AB8
; ---------------------------------------------------------------------------

loc_408BEC:				; CODE XREF: sub_406220+1E72j
		mov	edx, [ebp+var_240]
		mov	eax, [ebp+var_88]
		mov	[ebp+var_230], edx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_408C21
		mov	eax, [ebp+var_88]
		mov	[ebp+var_1D8], 0
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_408C21:				; CODE XREF: sub_406220+29E6j
		mov	ebx, [ebp+var_230]
		mov	[ebp+var_240], ebx
		jmp	loc_4082DD
; ---------------------------------------------------------------------------

loc_408C32:				; CODE XREF: sub_406220+1E69j
		mov	ebx, [ebp+var_240]
		mov	eax, [ebp+var_94]
		mov	[ebp+var_22C], ebx
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_408C67
		mov	eax, [ebp+var_94]
		mov	[ebp+var_1D8], 0
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_408C67:				; CODE XREF: sub_406220+2A2Cj
		mov	eax, [ebp+var_22C]
		mov	[ebp+var_240], eax
		jmp	loc_4082DD
sub_406220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_408C80	proc near		; CODE XREF: sub_401190+264p

var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_18D		= byte ptr -18Dh
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= byte ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_138		= dword	ptr -138h
var_108		= byte ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_F8		= dword	ptr -0F8h
var_F4		= byte ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= byte ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C0		= byte ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B0		= byte ptr -0B0h
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_A		= word ptr -0Ah
var_8		= byte ptr -8

		lea	ecx, [esp+4]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 1E0h
		mov	eax, [ecx+4]
		lea	edx, [ebp+var_8]
		mov	[ebp+var_1BC], ecx
		mov	[ebp+var_14C], edx
		mov	[ebp+var_1D8], eax
		lea	eax, [ebp+var_16C]
		mov	[esp], eax
		mov	[ebp+var_154], offset sub_413F20
		mov	[ebp+var_150], offset dword_4147CC
		mov	[ebp+var_148], offset loc_40A352
		mov	[ebp+var_144], esp
		call	_Unwind_SjLj_Register
		call	sub_40FB80
		mov	eax, ds:qt_dbus_metaobject_skip_annotations
		mov	ecx, [ebp+var_1D8]
		mov	byte ptr [eax],	1
		mov	eax, [ebp+var_1BC]
		mov	dword ptr [esp+0Ch], 1040806h
		mov	[esp+8], ecx
		mov	[ebp+var_168], 0FFFFFFFFh
		mov	[esp+4], eax
		lea	eax, [ebp+var_B0]
		mov	[esp], eax
		call	ds:_ZN16QCoreApplicationC1ERiPPci
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 37h
		call	ds:_ZN16QCoreApplication9argumentsEv
		mov	eax, [ebp+var_10]
		sub	esp, 4
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_408D59
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 36h
		call	sub_4118C0

loc_408D59:				; CODE XREF: sub_408C80+C2j
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_14], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_408D8B
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 1Bh
		call	sub_4118C0

loc_408D8B:				; CODE XREF: sub_408C80+F4j
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	edx, [eax+4]
		mov	[ebp+var_1D0], edx
		mov	edx, [eax+4]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jz	loc_409933

loc_408DAF:				; CODE XREF: sub_408C80+CC9j
		mov	ecx, [ebp+var_1D0]
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 1Bh
		mov	[esp+4], ecx
		call	ds:_ZN9QListData5eraseEPPv
		mov	eax, [ebp+var_14]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_409918

loc_408DE0:				; CODE XREF: sub_408C80+CAEj
		mov	[ebp+var_18D], 0

loc_408DE7:				; CODE XREF: sub_408C80+2CCj
		mov	eax, [ebp+var_10]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jz	loc_408F7A

loc_408DF6:				; CODE XREF: sub_408C80+2F4j
		lea	ecx, [ebp+var_A]
		mov	dword ptr [esp+8], 1
		mov	[esp+4], ecx
		mov	edx, [eax+8]
		mov	[ebp+var_A], 2Dh
		mov	[ebp+var_168], 36h
		lea	eax, [eax+edx*4+14h]
		mov	[esp], eax
		call	ds:_ZNK7QString10startsWithERK5QCharN2Qt15CaseSensitivityE
		test	al, al
		jz	loc_408F7A
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_408E4C
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 36h
		call	sub_4118C0

loc_408E4C:				; CODE XREF: sub_408C80+1B5j
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_90], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_408E81
		lea	edx, [ebp+var_10]
		mov	[esp], edx
		mov	[ebp+var_168], 1Ah
		call	sub_4118C0

loc_408E81:				; CODE XREF: sub_408C80+1EAj
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+10h]
		lea	ecx, [edx+4]
		mov	[ebp+var_18C], ecx
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	loc_409360

loc_408EA5:				; CODE XREF: sub_408C80+6F6j
		mov	eax, [ebp+var_18C]
		lea	edx, [ebp+var_10]
		mov	[esp], edx
		mov	[ebp+var_168], 1Ah
		mov	[esp+4], eax
		call	ds:_ZN9QListData5eraseEPPv
		lea	eax, [ebp+var_18]
		mov	[esp+4], eax
		lea	eax, [ebp+var_90]
		mov	[ebp+var_18], offset aSystem ; "--system"
		mov	[esp], eax
		mov	[ebp+var_168], 35h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		test	al, al
		jz	loc_4091D0
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		call	ds:_ZN15QDBusConnection9systemBusEv
		sub	esp, 4
		lea	eax, [ebp+var_1C]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	dword_41D028
		mov	[ebp+var_168], 34h
		call	ds:_ZN15QDBusConnectionaSERKS_
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_168], 35h
		call	ds:_ZN15QDBusConnectionD1Ev

loc_408F37:				; CODE XREF: sub_408C80+6D5j
		mov	[ebp+var_18D], 1

loc_408F3E:				; CODE XREF: sub_408C80+588j
					; sub_408C80+6B9j ...
		mov	eax, [ebp+var_90]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_408DE7
		mov	eax, [ebp+var_90]
		mov	[ebp+var_168], 36h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	eax, [ebp+var_10]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jnz	loc_408DF6

loc_408F7A:				; CODE XREF: sub_408C80+170j
					; sub_408C80+1A7j
		cmp	[ebp+var_18D], 0
		jnz	short loc_408FD0
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_168], 36h
		call	ds:_ZN15QDBusConnection10sessionBusEv
		lea	eax, [ebp+var_38]
		push	ecx
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	dword_41D028
		mov	[ebp+var_168], 30h
		call	ds:_ZN15QDBusConnectionaSERKS_
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_168], 36h
		call	ds:_ZN15QDBusConnectionD1Ev
		xchg	ax, ax

loc_408FD0:				; CODE XREF: sub_408C80+301j
		mov	dword ptr [esp], offset	dword_41D028
		mov	[ebp+var_168], 36h
		call	ds:_ZNK15QDBusConnection11isConnectedEv
		test	al, al
		jnz	loc_40944A
		lea	eax, [ebp+var_D0]
		mov	dword ptr [esp+4], offset dword_41D028
		mov	[esp], eax
		call	ds:_ZNK15QDBusConnection9lastErrorEv
		lea	eax, [ebp+var_44]
		push	edx
		lea	edx, [ebp+var_D0]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 2Fh
		call	ds:_ZNK10QDBusError7messageEv
		lea	edx, [ebp+var_44]
		push	eax
		lea	eax, [ebp+var_48]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 2Eh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_48]
		push	ebx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset dword_41D028
		mov	[ebp+var_168], 2Dh
		mov	[ebp+var_1D4], eax
		lea	eax, [ebp+var_C0]
		mov	[esp], eax
		call	ds:_ZNK15QDBusConnection9lastErrorEv
		lea	eax, [ebp+var_3C]
		push	ecx
		lea	edx, [ebp+var_C0]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 2Ch
		call	ds:_ZNK10QDBusError4nameEv
		lea	eax, [ebp+var_40]
		push	edx
		lea	edx, [ebp+var_3C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 2Bh
		call	ds:_ZNK7QString11toLocal8BitEv
		push	eax
		mov	eax, [ebp+var_1D4]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+var_40]
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aCouldNotConnec ; "Could not connect to D-Bus	server:	%s: "...
		mov	[ebp+var_168], 2Ah
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		mov	eax, [ebp+var_40]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4098FD

loc_4090FA:				; CODE XREF: sub_408C80+C93j
		mov	eax, [ebp+var_3C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4098E2

loc_40910B:				; CODE XREF: sub_408C80+C78j
		mov	eax, [ebp+var_B8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4098C4

loc_40911F:				; CODE XREF: sub_408C80+C5Dj
		mov	eax, [ebp+var_BC]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4098A6

loc_409133:				; CODE XREF: sub_408C80+C3Fj
		mov	eax, [ebp+var_48]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40988B

loc_409144:				; CODE XREF: sub_408C80+C21j
		mov	eax, [ebp+var_44]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_409848

loc_409155:				; CODE XREF: sub_408C80+BDEj
		mov	eax, [ebp+var_C8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40982A

loc_409169:				; CODE XREF: sub_408C80+BC3j
		mov	eax, [ebp+var_CC]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		mov	[ebp+var_1AC], 1
		jz	loc_409863

loc_409187:				; CODE XREF: sub_408C80+7C5j
					; sub_408C80+C06j
		mov	eax, [ebp+var_10]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_409809

loc_409198:				; CODE XREF: sub_408C80+BA5j
		lea	eax, [ebp+var_B0]
		mov	[esp], eax
		mov	[ebp+var_168], 0FFFFFFFFh
		call	ds:_ZN16QCoreApplicationD1Ev
		lea	eax, [ebp+var_16C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_1AC]
		lea	esp, [ebp-8]
		pop	ecx
		pop	ebx
		pop	ebp
		lea	esp, [ecx-4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4091D0:				; CODE XREF: sub_408C80+26Ej
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		lea	eax, [ebp+var_90]
		mov	[ebp+var_20], offset aAddress ;	"--address"
		mov	[esp], eax
		mov	[ebp+var_168], 35h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		test	al, al
		jz	loc_40937B
		mov	eax, [ebp+var_10]
		mov	edx, [eax+0Ch]
		cmp	edx, [eax+8]
		jz	loc_408F3E
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	aBus ; "bus"
		call	ds:_ZN7QString16fromAscii_helperEPKci
		mov	[ebp+var_28], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_409245
		lea	ecx, [ebp+var_10]
		mov	[esp], ecx
		mov	[ebp+var_168], 33h
		call	sub_4118C0

loc_409245:				; CODE XREF: sub_408C80+5AEj
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_24], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_409277
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 19h
		call	sub_4118C0

loc_409277:				; CODE XREF: sub_408C80+5E0j
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		lea	edx, [eax+edx*4+10h]
		lea	ecx, [edx+4]
		mov	[ebp+var_19C], ecx
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	loc_4093B2

loc_40929B:				; CODE XREF: sub_408C80+748j
		mov	eax, [ebp+var_19C]
		lea	edx, [ebp+var_10]
		mov	[esp], edx
		mov	[ebp+var_168], 19h
		mov	[esp+4], eax
		call	ds:_ZN9QListData5eraseEPPv
		lea	edx, [ebp+var_28]
		lea	eax, [ebp+var_2C]
		mov	[esp+8], edx
		lea	edx, [ebp+var_24]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 32h
		call	ds:_ZN15QDBusConnection12connectToBusERK7QStringS2_
		sub	esp, 4
		lea	eax, [ebp+var_2C]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	dword_41D028
		mov	[ebp+var_168], 31h
		call	ds:_ZN15QDBusConnectionaSERKS_
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_168], 32h
		call	ds:_ZN15QDBusConnectionD1Ev
		mov	eax, [ebp+var_24]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_4093CD

loc_409327:				; CODE XREF: sub_408C80+763j
		mov	edx, [ebp+var_28]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		mov	[ebp+var_18D], 1
		jnz	loc_408F3E
		mov	eax, [ebp+var_28]
		mov	[ebp+var_168], 35h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_408F37
; ---------------------------------------------------------------------------
		align 10h

loc_409360:				; CODE XREF: sub_408C80+21Fj
		mov	eax, [edx+4]
		mov	[ebp+var_168], 1Ah
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_408EA5
; ---------------------------------------------------------------------------

loc_40937B:				; CODE XREF: sub_408C80+579j
		lea	eax, [ebp+var_30]
		mov	[esp+4], eax
		lea	eax, [ebp+var_90]
		mov	[ebp+var_30], offset aLiteral ;	"--literal"
		mov	[esp], eax
		mov	[ebp+var_168], 35h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		test	al, al
		jz	short loc_4093E8
		mov	ds:byte_41D02C,	1
		jmp	loc_408F3E
; ---------------------------------------------------------------------------

loc_4093B2:				; CODE XREF: sub_408C80+615j
		mov	eax, [edx+4]
		mov	[ebp+var_168], 19h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40929B
; ---------------------------------------------------------------------------

loc_4093CD:				; CODE XREF: sub_408C80+6A1j
		mov	eax, [ebp+var_24]
		mov	[ebp+var_168], 33h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409327
; ---------------------------------------------------------------------------

loc_4093E8:				; CODE XREF: sub_408C80+724j
		lea	eax, [ebp+var_34]
		mov	[esp+4], eax
		lea	eax, [ebp+var_90]
		mov	[ebp+var_34], offset aHelp ; "--help"
		mov	[esp], eax
		mov	[ebp+var_168], 35h
		call	ds:_ZNK7QStringeqERK13QLatin1String
		test	al, al
		jz	loc_408F3E
		mov	dword ptr [esp], offset	aUsageQdbusSyst	; "Usage: qdbus	[--system | --address ADDR"...
		call	puts
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_168], 36h
		call	sub_4126A0

loc_40943B:				; CODE XREF: sub_408C80+1AD4j
		mov	[ebp+var_1AC], 0
		jmp	loc_409187
; ---------------------------------------------------------------------------

loc_40944A:				; CODE XREF: sub_408C80+369j
		mov	dword ptr [esp], offset	dword_41D028
		mov	[ebp+var_168], 36h
		call	ds:_ZNK15QDBusConnection9interfaceEv
		mov	[ebp+var_1A8], eax
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		cmp	[eax+0Ch], edx
		jz	loc_409A32
		mov	ecx, [eax]
		cmp	ecx, 1
		jz	short loc_409498
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 36h
		call	sub_4118C0
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]

loc_409498:				; CODE XREF: sub_408C80+7FBj
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_4C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_4094C4
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 3
		call	sub_4118C0

loc_4094C4:				; CODE XREF: sub_408C80+82Dj
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	ecx, [eax+4]
		mov	[ebp+var_1C8], ecx
		mov	edx, [eax+4]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jz	loc_40A337

loc_4094E8:				; CODE XREF: sub_408C80+16CDj
		mov	eax, [ebp+var_1C8]
		mov	[ebp+var_168], 3
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	ds:_ZN9QListData5eraseEPPv
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_168], 29h
		call	ds:_ZN9QDBusUtil14isValidBusNameERK7QString
		test	al, al
		jz	loc_40A17F
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		cmp	[eax+0Ch], edx
		jz	loc_4099EE
		mov	ecx, [eax]
		cmp	ecx, 1
		jz	short loc_409557
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 29h
		call	sub_4118C0
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]

loc_409557:				; CODE XREF: sub_408C80+8BAj
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_5C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_409583
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 2
		call	sub_4118C0

loc_409583:				; CODE XREF: sub_408C80+8ECj
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	edx, [eax+4]
		mov	[ebp+var_1C4], edx
		mov	edx, [eax+4]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jz	loc_4099D3

loc_4095A7:				; CODE XREF: sub_408C80+D69j
		mov	ecx, [ebp+var_1C4]
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 2
		mov	[esp+4], ecx
		call	ds:_ZN9QListData5eraseEPPv
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_168], 25h
		call	ds:_ZN9QDBusUtil17isValidObjectPathERK7QString
		test	al, al
		jz	loc_40994E
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		cmp	[eax+0Ch], edx
		jz	loc_40A725
		mov	ecx, [eax]
		cmp	ecx, 1
		jz	short loc_409616
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 25h
		call	sub_4118C0
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]

loc_409616:				; CODE XREF: sub_408C80+979j
		mov	eax, [eax+edx*4+14h]
		mov	[ebp+var_68], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_409642
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 1
		call	sub_4118C0

loc_409642:				; CODE XREF: sub_408C80+9ABj
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	edx, [eax+4]
		mov	[ebp+var_1C0], edx
		mov	edx, [eax+4]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jz	loc_40A961

loc_409666:				; CODE XREF: sub_408C80+1CF7j
		mov	ecx, [ebp+var_1C0]
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 1
		mov	[esp+4], ecx
		call	ds:_ZN9QListData5eraseEPPv
		mov	ecx, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_178], ecx
		mov	[ebp+var_6C], ecx
		lock inc dword ptr [ecx]
		setnz	al
		lea	eax, [ebp+var_68]
		mov	dword ptr [esp+0Ch], 1
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	word ptr [esp+4], 2Eh
		mov	[esp], eax
		mov	[ebp+var_168], 22h
		call	ds:_ZNK7QString11lastIndexOfE5QChariN2Qt15CaseSensitivityE
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_1B4], eax
		jz	loc_40A8F0
		mov	edx, [ebp+var_1B4]
		lea	eax, [ebp+var_70]
		mov	dword ptr [esp+0Ch], 0FFFFFFFFh
		mov	[esp], eax
		mov	[ebp+var_168], 22h
		add	edx, 1
		mov	[esp+8], edx
		lea	edx, [ebp+var_68]
		mov	[esp+4], edx
		call	ds:_ZNK7QString3midEii
		lea	eax, [ebp+var_70]
		push	ebx
		mov	[esp+4], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_168], 21h
		call	ds:_ZN7QStringaSERKS_
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_168], 22h
		call	sub_4126A0
		mov	ecx, [ebp+var_1B4]
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[esp+4], ecx
		call	ds:_ZN7QString8truncateEi

loc_409752:				; CODE XREF: sub_408C80+1CDCj
		mov	eax, [ebp+var_68]

loc_409755:				; CODE XREF: sub_408C80+1C8Cj
		cmp	dword ptr [eax+8], 0
		jnz	loc_40A84D

loc_40975F:				; CODE XREF: sub_408C80+1BE5j
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_168], 22h
		call	ds:_ZN9QDBusUtil17isValidMemberNameERK7QString
		test	al, al
		jnz	loc_40A818
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_7C], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_80]
		lea	edx, [ebp+var_7C]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 1Eh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_80]
		push	edx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aMethodNameSIsN ; "Method name '%s' is not a valid member "...
		mov	[ebp+var_168], 1Dh
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_80]
		mov	[esp], eax
		mov	[ebp+var_168], 1Eh
		call	sub_410CE0
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_168], 22h
		call	sub_4126A0

loc_4097FD:				; CODE XREF: sub_408C80+D4Ej
					; sub_408C80+15C7j ...
		mov	dword ptr [esp], 1 ; int
		call	exit
; ---------------------------------------------------------------------------

loc_409809:				; CODE XREF: sub_408C80+512j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_168], 37h
		mov	[esp+4], eax
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_409198
; ---------------------------------------------------------------------------

loc_40982A:				; CODE XREF: sub_408C80+4E3j
		mov	eax, [ebp+var_C8]
		mov	[ebp+var_168], 17h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409169
; ---------------------------------------------------------------------------

loc_409848:				; CODE XREF: sub_408C80+4CFj
		mov	eax, [ebp+var_44]
		mov	[ebp+var_168], 2Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409155
; ---------------------------------------------------------------------------

loc_409863:				; CODE XREF: sub_408C80+501j
		mov	eax, [ebp+var_CC]
		mov	[ebp+var_168], 36h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	[ebp+var_1AC], 1
		jmp	loc_409187
; ---------------------------------------------------------------------------

loc_40988B:				; CODE XREF: sub_408C80+4BEj
		mov	eax, [ebp+var_48]
		mov	[ebp+var_168], 2Eh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_409144
; ---------------------------------------------------------------------------

loc_4098A6:				; CODE XREF: sub_408C80+4ADj
		mov	eax, [ebp+var_BC]
		mov	[ebp+var_168], 2Dh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409133
; ---------------------------------------------------------------------------

loc_4098C4:				; CODE XREF: sub_408C80+499j
		mov	eax, [ebp+var_B8]
		mov	[ebp+var_168], 18h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40911F
; ---------------------------------------------------------------------------

loc_4098E2:				; CODE XREF: sub_408C80+485j
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_168], 2Ch
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_40910B
; ---------------------------------------------------------------------------

loc_4098FD:				; CODE XREF: sub_408C80+474j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_168], 2Bh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_4090FA
; ---------------------------------------------------------------------------

loc_409918:				; CODE XREF: sub_408C80+15Aj
		mov	eax, [ebp+var_14]
		mov	[ebp+var_168], 36h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_408DE0
; ---------------------------------------------------------------------------

loc_409933:				; CODE XREF: sub_408C80+129j
		mov	eax, [eax+4]
		mov	[ebp+var_168], 1Bh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_408DAF
; ---------------------------------------------------------------------------

loc_40994E:				; CODE XREF: sub_408C80+95Fj
		mov	eax, [ebp+var_5C]
		mov	[ebp+var_60], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_64]
		lea	edx, [ebp+var_60]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 24h
		call	ds:_ZNK7QString11toLocal8BitEv
		push	eax
		mov	eax, [ebp+var_64]
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aPathSIsNotAVal ; "Path '%s' is not a valid path name.\n"
		mov	[ebp+var_168], 23h
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_168], 24h
		call	sub_410CE0
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_168], 25h
		call	sub_4126A0
		jmp	loc_4097FD
; ---------------------------------------------------------------------------

loc_4099D3:				; CODE XREF: sub_408C80+921j
		mov	eax, [eax+4]
		mov	[ebp+var_168], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4095A7
; ---------------------------------------------------------------------------

loc_4099EE:				; CODE XREF: sub_408C80+8AFj
		mov	eax, ds:_ZN7QString11shared_nullE
		mov	[ebp+var_58], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	edx, [ebp+var_58]
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_168], 26h
		call	sub_403F00
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_168], 29h
		call	sub_4126A0

loc_409A26:				; CODE XREF: sub_408C80+14D2j
					; sub_408C80+14FAj ...
		mov	dword ptr [esp], 0 ; int
		call	exit
; ---------------------------------------------------------------------------

loc_409A32:				; CODE XREF: sub_408C80+7F0j
		mov	edx, [ebp+var_1A8]
		lea	eax, [ebp+var_108]
		mov	[esp], eax
		mov	[esp+4], edx
		call	ds:_ZNK24QDBusConnectionInterface22registeredServiceNamesEv
		mov	eax, [ebp+var_F8]
		push	ebx
		mov	[ebp+var_88], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_88]
		test	byte ptr [eax+10h], 1
		jz	loc_40A291

loc_409A6E:				; CODE XREF: sub_408C80+1629j
		mov	eax, [ebp+var_F8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A26A

loc_409A82:				; CODE XREF: sub_408C80+160Cj
		mov	eax, [ebp+var_100]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A24C

loc_409A96:				; CODE XREF: sub_408C80+15E5j
		mov	eax, [ebp+var_104]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A2CB

loc_409AAA:				; CODE XREF: sub_408C80+1664j
		mov	eax, ds:_ZN8QMapData11shared_nullE
		mov	[ebp+var_8C], eax
		lock inc dword ptr [eax+34h]
		setnz	dl
		mov	eax, [ebp+var_88]
		mov	[ebp+var_E0], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_E0]
		test	byte ptr [eax+10h], 1
		jz	loc_40A2AE

loc_409ADE:				; CODE XREF: sub_408C80+1646j
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_DC], 0
		mov	eax, [edx+8]
		mov	ecx, [edx+0Ch]
		lea	eax, [edx+eax*4+14h]
		lea	edx, [edx+ecx*4+14h]
		cmp	eax, edx
		mov	[ebp+var_D8], eax
		mov	[ebp+var_D4], edx
		jz	loc_409E14
		mov	ecx, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_174], ecx
		mov	[ebp+var_170], ecx

loc_409B22:				; CODE XREF: sub_408C80+118Ej
		mov	eax, [eax]
		mov	[ebp+var_90], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_90]
		mov	[esp+8], eax
		mov	eax, [ebp+var_1A8]
		lea	edx, [ebp+var_F4]
		mov	[esp], edx
		mov	[ebp+var_168], 12h
		mov	[esp+4], eax
		call	ds:_ZNK24QDBusConnectionInterface12serviceOwnerERK7QString
		mov	eax, [ebp+var_E4]
		sub	esp, 4
		mov	[ebp+var_94], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_94]
		mov	ecx, [eax+8]
		test	ecx, ecx
		jz	loc_40A0C0

loc_409B83:				; CODE XREF: sub_408C80+1463j
		mov	eax, [ebp+var_8C]
		mov	eax, [eax+34h]
		cmp	eax, 1
		jz	short loc_409BA9
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		mov	[ebp+var_168], 10h
		call	sub_411240

loc_409BA9:				; CODE XREF: sub_408C80+F0Fj
		mov	eax, [ebp+var_8C]
		mov	edx, [eax+38h]
		mov	[ebp+var_184], eax
		test	edx, edx
		mov	[ebp+var_180], edx
		js	loc_409C90
		shl	edx, 2
		mov	[ebp+var_188], edx
		nop

loc_409BD0:				; CODE XREF: sub_408C80+FA2j
					; sub_408C80+FCFj
		mov	ecx, [ebp+var_180]
		mov	edx, [ebp+var_184]
		mov	ecx, [edx+ecx*4+4]
		cmp	ecx, eax
		mov	[ebp+var_17C], ecx
		jz	short loc_409C24
		lea	eax, [ebp+var_94]
		mov	[esp+4], eax
		mov	eax, ecx
		sub	eax, 8
		mov	[esp], eax
		mov	[ebp+var_168], 10h
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	short loc_409C24
		mov	edx, [ebp+var_17C]
		mov	eax, [ebp+var_8C]
		mov	[ebp+var_184], edx
		jmp	short loc_409BD0
; ---------------------------------------------------------------------------

loc_409C24:				; CODE XREF: sub_408C80+F68j
					; sub_408C80+F8Ej
		mov	edx, [ebp+var_188]
		mov	ecx, [ebp+var_184]
		mov	[ebp+edx+var_138], ecx
		sub	edx, 4
		sub	[ebp+var_180], 1
		mov	[ebp+var_188], edx
		js	short loc_409C54
		mov	eax, [ebp+var_8C]
		jmp	loc_409BD0
; ---------------------------------------------------------------------------

loc_409C54:				; CODE XREF: sub_408C80+FC7j
		mov	ecx, [ebp+var_17C]
		cmp	[ebp+var_8C], ecx
		jz	short loc_409C90
		sub	ecx, 8
		lea	eax, [ebp+var_94]
		mov	[ebp+var_198], ecx
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_168], 10h
		call	ds:_ZNK7QStringltERKS_
		test	al, al
		jz	loc_40A0A9

loc_409C90:				; CODE XREF: sub_408C80+F40j
					; sub_408C80+FE0j ...
		mov	ecx, [ebp+var_174]
		mov	edx, [ebp+var_170]
		mov	[ebp+var_9C], ecx
		lock inc dword ptr [edx]
		setnz	al
		mov	ecx, [ebp+var_8C]
		lea	eax, [ebp+var_138]
		mov	dword ptr [esp+0Ch], 4
		mov	dword ptr [esp+8], 8
		mov	[esp+4], eax
		mov	[ebp+var_1B8], ecx
		mov	[esp], ecx
		mov	[ebp+var_168], 0Bh
		call	ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_1B0], eax
		sub	eax, 8
		test	eax, eax
		mov	[ebp+var_198], eax
		mov	[ebp+var_1CC], eax
		jz	short loc_409D0F
		mov	eax, [ebp+var_94]
		mov	edx, [ebp+var_1B0]
		mov	[edx-8], eax
		lock inc dword ptr [eax]
		setnz	dl

loc_409D0F:				; CODE XREF: sub_408C80+1078j
		mov	edx, [ebp+var_198]
		add	edx, 4
		jz	short loc_409D42
		mov	eax, [ebp+var_9C]
		mov	ecx, [ebp+var_198]
		mov	[ecx+4], eax
		lock inc dword ptr [eax]
		setnz	cl
		mov	ecx, [ebp+var_198]
		mov	eax, [ecx+4]
		test	byte ptr [eax+10h], 1
		jz	loc_40A10F

loc_409D42:				; CODE XREF: sub_408C80+1098j
					; sub_408C80+14A1j
		mov	eax, [ebp+var_9C]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A0E8

loc_409D56:				; CODE XREF: sub_408C80+1435j
					; sub_408C80+148Aj
		lea	eax, [ebp+var_90]
		mov	[esp+4], eax
		mov	eax, [ebp+var_198]
		mov	[ebp+var_168], 10h
		add	eax, 4
		mov	[esp], eax
		call	sub_411990
		mov	eax, [ebp+var_94]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A08B

loc_409D8F:				; CODE XREF: sub_408C80+1424j
		mov	eax, [ebp+var_E4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A06D

loc_409DA3:				; CODE XREF: sub_408C80+1406j
		mov	eax, [ebp+var_EC]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A04F

loc_409DB7:				; CODE XREF: sub_408C80+13E8j
		mov	eax, [ebp+var_F0]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A031

loc_409DCB:				; CODE XREF: sub_408C80+13CAj
		sub	[ebp+var_DC], 1
		mov	eax, [ebp+var_90]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A013

loc_409DE6:				; CODE XREF: sub_408C80+13ACj
		mov	edx, [ebp+var_DC]
		mov	eax, [ebp+var_D8]
		add	edx, 1
		add	eax, 4
		test	edx, edx
		mov	[ebp+var_DC], edx
		mov	[ebp+var_D8], eax
		jnz	short loc_409E14
		cmp	eax, [ebp+var_D4]
		jnz	loc_409B22

loc_409E14:				; CODE XREF: sub_408C80+E8Aj
					; sub_408C80+1186j
		mov	eax, [ebp+var_E0]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_40A2E9

loc_409E28:				; CODE XREF: sub_408C80+168Bj
		mov	eax, [ebp+var_8C]
		mov	ecx, [eax+4]
		cmp	eax, ecx
		mov	[ebp+var_194], ecx
		jnz	loc_409F50
		jmp	loc_40A126
; ---------------------------------------------------------------------------

loc_409E44:				; CODE XREF: sub_408C80+12EFj
					; sub_408C80+130Dj
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_168], 0Fh
		call	ds:_ZN9QtPrivate16QStringList_sortEP11QStringList
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	dword ptr [esp], offset	asc_41A71B ; "\n "
		call	ds:_ZN7QString17fromLatin1_helperEPKci
		mov	[ebp+var_A0], eax
		lea	edx, [ebp+var_A0]
		lea	ecx, [ebp+var_98]
		lea	eax, [ebp+var_A4]
		mov	[esp+8], edx
		mov	[esp+4], ecx
		mov	[esp], eax
		mov	[ebp+var_168], 0Eh
		call	ds:_ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString
		sub	esp, 4
		lea	eax, [ebp+var_A8]
		lea	edx, [ebp+var_A4]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 0Dh
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_A8]
		sub	esp, 4
		mov	eax, [eax+0Ch]
		mov	[ebp+var_168], 0Ch
		mov	[esp], eax	; char *
		call	puts
		mov	eax, [ebp+var_A8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_409FF5

loc_409EFD:				; CODE XREF: sub_408C80+138Ej
		mov	eax, [ebp+var_A4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_409FD7

loc_409F11:				; CODE XREF: sub_408C80+1370j
		mov	eax, [ebp+var_A0]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	loc_409FB9

loc_409F25:				; CODE XREF: sub_408C80+1352j
		mov	eax, [ebp+var_98]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_409F92

loc_409F35:				; CODE XREF: sub_408C80+1334j
		mov	eax, [ebp+var_194]
		mov	eax, [eax+4]
		cmp	eax, [ebp+var_8C]
		mov	[ebp+var_194], eax
		jz	loc_40A126

loc_409F50:				; CODE XREF: sub_408C80+11B9j
		mov	edx, [ebp+var_194]
		mov	eax, [edx-4]
		mov	[ebp+var_98], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	eax, [ebp+var_98]
		test	byte ptr [eax+10h], 1
		jnz	loc_409E44
		lea	ecx, [ebp+var_98]
		mov	[esp], ecx
		mov	[ebp+var_168], 14h
		call	sub_4118C0
		jmp	loc_409E44
; ---------------------------------------------------------------------------

loc_409F92:				; CODE XREF: sub_408C80+12B3j
		mov	eax, [ebp+var_98]
		lea	ecx, [ebp+var_98]
		mov	[esp], ecx
		mov	[ebp+var_168], 14h
		mov	[esp+4], eax
		call	sub_411940
		jmp	loc_409F35
; ---------------------------------------------------------------------------

loc_409FB9:				; CODE XREF: sub_408C80+129Fj
		mov	eax, [ebp+var_A0]
		mov	[ebp+var_168], 0Fh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409F25
; ---------------------------------------------------------------------------

loc_409FD7:				; CODE XREF: sub_408C80+128Bj
		mov	eax, [ebp+var_A4]
		mov	[ebp+var_168], 0Eh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409F11
; ---------------------------------------------------------------------------

loc_409FF5:				; CODE XREF: sub_408C80+1277j
		mov	eax, [ebp+var_A8]
		mov	[ebp+var_168], 0Dh
		mov	[esp], eax
		call	ds:_Z5qFreePv
		jmp	loc_409EFD
; ---------------------------------------------------------------------------

loc_40A013:				; CODE XREF: sub_408C80+1160j
		mov	eax, [ebp+var_90]
		mov	[ebp+var_168], 13h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409DE6
; ---------------------------------------------------------------------------

loc_40A031:				; CODE XREF: sub_408C80+1145j
		mov	eax, [ebp+var_F0]
		mov	[ebp+var_168], 12h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409DCB
; ---------------------------------------------------------------------------

loc_40A04F:				; CODE XREF: sub_408C80+1131j
		mov	eax, [ebp+var_EC]
		mov	[ebp+var_168], 4
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409DB7
; ---------------------------------------------------------------------------

loc_40A06D:				; CODE XREF: sub_408C80+111Dj
		mov	eax, [ebp+var_E4]
		mov	[ebp+var_168], 5
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409DA3
; ---------------------------------------------------------------------------

loc_40A08B:				; CODE XREF: sub_408C80+1109j
		mov	eax, [ebp+var_94]
		mov	[ebp+var_168], 11h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409D8F
; ---------------------------------------------------------------------------

loc_40A0A9:				; CODE XREF: sub_408C80+100Aj
		mov	edx, [ebp+var_17C]
		cmp	edx, [ebp+var_8C]
		jnz	loc_409D56
		jmp	loc_409C90
; ---------------------------------------------------------------------------

loc_40A0C0:				; CODE XREF: sub_408C80+EFDj
		lea	eax, [ebp+var_90]
		lea	ecx, [ebp+var_94]
		mov	[esp+4], eax
		mov	[esp], ecx
		mov	[ebp+var_168], 10h
		call	ds:_ZN7QStringaSERKS_
		jmp	loc_409B83
; ---------------------------------------------------------------------------

loc_40A0E8:				; CODE XREF: sub_408C80+10D0j
		mov	eax, [ebp+var_9C]
		mov	[ebp+var_168], 10h
		mov	[esp+4], eax
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_409D56
; ---------------------------------------------------------------------------

loc_40A10F:				; CODE XREF: sub_408C80+10BCj
		mov	[esp], edx
		mov	[ebp+var_168], 8
		call	sub_4118C0
		jmp	loc_409D42
; ---------------------------------------------------------------------------

loc_40A126:				; CODE XREF: sub_408C80+11BFj
					; sub_408C80+12CAj
		cmp	[ebp+var_194], 0
		jz	short loc_40A144
		mov	edx, [ebp+var_194]
		lock dec dword ptr [edx+34h]
		setnz	al
		test	al, al
		jz	loc_40A310

loc_40A144:				; CODE XREF: sub_408C80+14ADj
					; sub_408C80+16B2j
		mov	eax, [ebp+var_88]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	loc_409A26
		mov	eax, [ebp+var_88]
		mov	[ebp+var_168], 36h
		mov	[esp+4], eax
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_409A26
; ---------------------------------------------------------------------------

loc_40A17F:				; CODE XREF: sub_408C80+8A0j
		lea	eax, [ebp+var_4C]
		mov	dword ptr [esp+0Ch], 1
		mov	dword ptr [esp+8], 0
		mov	word ptr [esp+4], 2Ah
		mov	[esp], eax
		call	ds:_ZNK7QString7indexOfE5QChariN2Qt15CaseSensitivityE
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40A1C7
		mov	eax, [ebp+var_1A8]
		lea	edx, [ebp+var_4C]
		mov	[ebp+var_168], 29h
		call	sub_403AE0
		test	al, al
		jnz	loc_40A73F

loc_40A1C7:				; CODE XREF: sub_408C80+1525j
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_50], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_54]
		lea	edx, [ebp+var_50]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 28h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_54]
		push	edx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aServiceSIsNotA ; "Service '%s' is not a valid name.\n"
		mov	[ebp+var_168], 27h
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_168], 28h
		call	sub_410CE0
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_168], 29h
		call	sub_4126A0
		jmp	loc_4097FD
; ---------------------------------------------------------------------------

loc_40A24C:				; CODE XREF: sub_408C80+E10j
		mov	eax, [ebp+var_100]
		mov	[ebp+var_168], 9
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409A96
; ---------------------------------------------------------------------------

loc_40A26A:				; CODE XREF: sub_408C80+DFCj
		mov	eax, [ebp+var_F8]
		mov	[ebp+var_168], 0Ah
		mov	[esp+4], eax
		lea	eax, [ebp+var_F8]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_409A82
; ---------------------------------------------------------------------------

loc_40A291:				; CODE XREF: sub_408C80+DE8j
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_168], 16h
		call	sub_4118C0
		jmp	loc_409A6E
; ---------------------------------------------------------------------------

loc_40A2AE:				; CODE XREF: sub_408C80+E58j
		lea	eax, [ebp+var_E0]
		mov	[esp], eax
		mov	[ebp+var_168], 14h
		call	sub_4118C0
		jmp	loc_409ADE
; ---------------------------------------------------------------------------

loc_40A2CB:				; CODE XREF: sub_408C80+E24j
		mov	eax, [ebp+var_104]
		mov	[ebp+var_168], 15h
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409AAA
; ---------------------------------------------------------------------------

loc_40A2E9:				; CODE XREF: sub_408C80+11A2j
		mov	eax, [ebp+var_E0]
		mov	[ebp+var_168], 14h
		mov	[esp+4], eax
		lea	eax, [ebp+var_E0]
		mov	[esp], eax
		call	sub_411940
		jmp	loc_409E28
; ---------------------------------------------------------------------------

loc_40A310:				; CODE XREF: sub_408C80+14BEj
		mov	eax, [ebp+var_8C]
		mov	[ebp+var_168], 15h
		mov	[esp+4], eax
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		call	sub_4114B0
		jmp	loc_40A144
; ---------------------------------------------------------------------------

loc_40A337:				; CODE XREF: sub_408C80+862j
		mov	eax, [eax+4]
		mov	[ebp+var_168], 3
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_4094E8
; ---------------------------------------------------------------------------

loc_40A352:				; DATA XREF: sub_408C80+4Ao
		add	ebp, 8
		mov	eax, [ebp+var_168]
		mov	edx, [ebp+var_164]
		cmp	eax, 1
		mov	[ebp+var_1A4], edx
		jz	loc_40A5AC
		cmp	eax, 2
		jz	loc_40A5C1
		cmp	eax, 3
		jz	loc_40AC6B
		cmp	eax, 4
		jz	loc_40AC88
		cmp	eax, 5
		xchg	ax, ax
		jz	loc_40A999
		cmp	eax, 6
		jz	loc_40AC14
		cmp	eax, 7
		jz	loc_40ABE9
		cmp	eax, 8
		nop
		lea	esi, [esi+0]
		jz	loc_40ABCC
		cmp	eax, 9
		jz	loc_40ABAF
		cmp	eax, 0Ah
		jz	loc_40A9A8
		cmp	eax, 0Bh
		nop
		lea	esi, [esi+0]
		jz	loc_40AB4A
		cmp	eax, 0Ch
		jz	loc_40AB62
		cmp	eax, 0Dh
		jz	loc_40AB7A
		cmp	eax, 0Eh
		nop
		lea	esi, [esi+0]
		jz	loc_40AB92
		cmp	eax, 0Fh
		jz	loc_40A9C0
		cmp	eax, 10h
		jz	loc_40A9D8
		cmp	eax, 11h
		nop
		lea	esi, [esi+0]
		jz	loc_40A9F0
		cmp	eax, 12h
		jz	loc_40AA08
		cmp	eax, 13h
		jz	loc_40AA20
		cmp	eax, 14h
		nop
		lea	esi, [esi+0]
		jz	loc_40AA6F
		cmp	eax, 15h
		jz	loc_40A97C
		cmp	eax, 16h
		jz	loc_40A6ED
		cmp	eax, 17h
		nop
		lea	esi, [esi+0]
		jz	loc_40A68E
		cmp	eax, 18h
		jz	loc_40A662
		cmp	eax, 19h
		jz	loc_40A632
		cmp	eax, 1Ah
		nop
		lea	esi, [esi+0]
		jz	loc_40AB30
		cmp	eax, 1Bh
		jz	loc_40AA8C
		cmp	eax, 1Ch
		jz	loc_40AB01
		cmp	eax, 1Dh
		nop
		lea	esi, [esi+0]
		jz	loc_40AB16
		cmp	eax, 1Eh
		jz	loc_40AAD5
		cmp	eax, 1Fh
		jz	loc_40AAEA
		cmp	eax, 20h
		nop
		lea	esi, [esi+0]
		jz	loc_40AABE
		cmp	eax, 21h
		jz	loc_40AAA4
		cmp	eax, 22h
		jz	loc_40A7E9
		cmp	eax, 23h
		nop
		lea	esi, [esi+0]
		jz	loc_40A7FE
		cmp	eax, 24h
		jz	loc_40A5AC
		cmp	eax, 25h
		jz	loc_40A7CF
		cmp	eax, 26h
		nop
		lea	esi, [esi+0]
		jz	loc_40A7A0
		cmp	eax, 27h
		jz	loc_40A7B5
		cmp	eax, 28h
		jz	loc_40A5C1
		cmp	eax, 29h
		nop
		lea	esi, [esi+0]
		jz	loc_40A759
		cmp	eax, 2Ah
		jz	loc_40A76E
		cmp	eax, 2Bh
		jz	loc_40A783
		cmp	eax, 2Ch
		nop
		lea	esi, [esi+0]
		jz	loc_40A6A6
		cmp	eax, 2Dh
		jz	loc_40A6BB
		cmp	eax, 2Eh
		jz	loc_40A6D0
		cmp	eax, 2Fh
		nop
		lea	esi, [esi+0]
		jz	loc_40A70A
		cmp	eax, 30h
		jz	loc_40A64C
		cmp	eax, 31h
		jz	loc_40A662
		cmp	eax, 32h
		nop
		lea	esi, [esi+0]
		jz	loc_40A677
		cmp	eax, 33h
		jz	loc_40A61C
		cmp	eax, 34h
		jz	loc_40A632
		cmp	eax, 35h
		nop
		lea	esi, [esi+0]
		jz	short loc_40A5D6
		cmp	eax, 36h
		jz	short loc_40A5EB

loc_40A597:				; CODE XREF: sub_408C80+1E39j
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40A5AC:				; CODE XREF: sub_408C80+16EAj
					; sub_408C80+1859j ...
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40A5C1:				; CODE XREF: sub_408C80+16F3j
					; sub_408C80+1882j ...
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40A5D6:				; CODE XREF: sub_408C80+1910j
					; sub_408C80+19CAj ...
		lea	eax, [ebp+var_10]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_411210

loc_40A5EB:				; CODE XREF: sub_408C80+1915j
		lea	eax, [ebp+var_B0]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	ds:_ZN16QCoreApplicationD1Ev
		mov	eax, [ebp+var_1A4]
		mov	[ebp+var_168], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_40A61C:				; CODE XREF: sub_408C80+18F9j
		lea	eax, [ebp+var_1C]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_40A632:				; CODE XREF: sub_408C80+17E2j
					; sub_408C80+1902j ...
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	short loc_40A5D6
; ---------------------------------------------------------------------------

loc_40A64C:				; CODE XREF: sub_408C80+18D9j
		lea	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	ds:_ZN15QDBusConnectionD1Ev

loc_40A662:				; CODE XREF: sub_408C80+17D9j
					; sub_408C80+18E2j
		lea	eax, [ebp+var_24]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40A677:				; CODE XREF: sub_408C80+18F0j
		lea	eax, [ebp+var_28]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	short loc_40A632
; ---------------------------------------------------------------------------

loc_40A68E:				; CODE XREF: sub_408C80+17D0j
		lea	eax, [ebp+var_BC]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40A6A6:				; CODE XREF: sub_408C80+18B0j
					; sub_408C80+1B1Bj
		lea	eax, [ebp+var_48]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410CE0

loc_40A6BB:				; CODE XREF: sub_408C80+18B9j
		lea	eax, [ebp+var_44]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40A6D0:				; CODE XREF: sub_408C80+18C2j
		lea	eax, [ebp+var_D0]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410D10
		jmp	loc_40A5D6
; ---------------------------------------------------------------------------

loc_40A6ED:				; CODE XREF: sub_408C80+17C2j
		lea	eax, [ebp+var_CC]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40A5D6
; ---------------------------------------------------------------------------

loc_40A70A:				; CODE XREF: sub_408C80+18D0j
		lea	eax, [ebp+var_38]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	ds:_ZN15QDBusConnectionD1Ev
		jmp	loc_40A5D6
; ---------------------------------------------------------------------------

loc_40A725:				; CODE XREF: sub_408C80+96Ej
		lea	edx, [ebp+var_5C]
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_168], 25h
		call	sub_4051A0
		jmp	loc_409A26
; ---------------------------------------------------------------------------

loc_40A73F:				; CODE XREF: sub_408C80+1541j
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_168], 36h
		call	sub_4126A0
		jmp	loc_40943B
; ---------------------------------------------------------------------------

loc_40A759:				; CODE XREF: sub_408C80+1890j
		lea	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410CE0

loc_40A76E:				; CODE XREF: sub_408C80+1899j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40A783:				; CODE XREF: sub_408C80+18A2j
		lea	eax, [ebp+var_C0]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410D10
		jmp	loc_40A6A6
; ---------------------------------------------------------------------------

loc_40A7A0:				; CODE XREF: sub_408C80+1870j
		lea	eax, [ebp+var_54]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410CE0

loc_40A7B5:				; CODE XREF: sub_408C80+1879j
		lea	eax, [ebp+var_50]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40A5C1
; ---------------------------------------------------------------------------

loc_40A7CF:				; CODE XREF: sub_408C80+1862j
		lea	eax, [ebp+var_58]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40A5C1
; ---------------------------------------------------------------------------

loc_40A7E9:				; CODE XREF: sub_408C80+1842j
		lea	eax, [ebp+var_64]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410CE0

loc_40A7FE:				; CODE XREF: sub_408C80+1850j
		lea	eax, [ebp+var_60]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40A5AC
; ---------------------------------------------------------------------------

loc_40A818:				; CODE XREF: sub_408C80+AF7j
		lea	ebx, [ebp+var_10]
		mov	[esp+4], ebx
		lea	ecx, [ebp+var_68]
		lea	ebx, [ebp+var_6C]
		lea	edx, [ebp+var_5C]
		lea	eax, [ebp+var_4C]
		mov	dword ptr [esp+8], 1
		mov	[esp], ebx
		mov	[ebp+var_168], 22h
		call	sub_406220
		mov	[esp], eax	; int
		call	exit
; ---------------------------------------------------------------------------

loc_40A84D:				; CODE XREF: sub_408C80+AD9j
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_168], 22h
		call	ds:_ZN9QDBusUtil20isValidInterfaceNameERK7QString
		test	al, al
		jnz	loc_40975F
		mov	eax, [ebp+var_68]
		mov	[ebp+var_74], eax
		lock inc dword ptr [eax]
		setnz	dl
		lea	eax, [ebp+var_78]
		lea	edx, [ebp+var_74]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[ebp+var_168], 20h
		call	ds:_ZNK7QString11toLocal8BitEv
		mov	eax, [ebp+var_78]
		push	ecx
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+4], offset aInterfaceSIsNo ; "Interface '%s' is not a valid interface"...
		mov	[ebp+var_168], 1Fh
		mov	[esp+8], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	fprintf
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		mov	[ebp+var_168], 20h
		call	sub_410CE0
		lea	eax, [ebp+var_74]
		mov	[esp], eax
		mov	[ebp+var_168], 22h
		call	sub_4126A0
		jmp	loc_4097FD
; ---------------------------------------------------------------------------

loc_40A8F0:				; CODE XREF: sub_408C80+A51j
		lea	eax, [ebp+var_68]
		mov	[esp+4], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	ds:_ZN7QStringaSERKS_
		mov	eax, [ebp+var_68]
		cmp	[ebp+var_178], eax
		jz	loc_409755
		mov	eax, [ebp+var_178]
		mov	[ebp+var_84], eax
		lock inc dword ptr [eax]
		setnz	al
		lea	eax, [ebp+var_84]
		mov	[esp+4], eax
		lea	eax, [ebp+var_68]
		mov	[esp], eax
		mov	[ebp+var_168], 1Ch
		call	ds:_ZN7QStringaSERKS_
		lea	eax, [ebp+var_84]
		mov	[esp], eax
		mov	[ebp+var_168], 22h
		call	sub_4126A0
		jmp	loc_409752
; ---------------------------------------------------------------------------

loc_40A961:				; CODE XREF: sub_408C80+9E0j
		mov	eax, [eax+4]
		mov	[ebp+var_168], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	loc_409666
; ---------------------------------------------------------------------------

loc_40A97C:				; CODE XREF: sub_408C80+17B9j
		lea	eax, [ebp+var_108]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410DD0
		jmp	loc_40A5D6
; ---------------------------------------------------------------------------

loc_40A999:				; CODE XREF: sub_408C80+1710j
		mov	[ebp+var_168], 0
		call	sub_413920

loc_40A9A8:				; CODE XREF: sub_408C80+1742j
		lea	eax, [ebp+var_9C]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_411210

loc_40A9C0:				; CODE XREF: sub_408C80+1779j
		lea	eax, [ebp+var_94]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40A9D8:				; CODE XREF: sub_408C80+1782j
		lea	eax, [ebp+var_F4]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410EF0

loc_40A9F0:				; CODE XREF: sub_408C80+1790j
					; sub_408C80+2003j ...
		lea	eax, [ebp+var_90]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40AA08:				; CODE XREF: sub_408C80+1799j
		lea	eax, [ebp+var_E0]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_411210

loc_40AA20:				; CODE XREF: sub_408C80+17A2j
					; sub_408C80+1F2Aj
		mov	eax, [ebp+var_8C]
		mov	edx, [ebp+var_1A4]
		test	eax, eax
		mov	[ebp+var_1A0], edx
		jz	short loc_40AA63
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_40AA63
		mov	eax, [ebp+var_8C]
		mov	[ebp+var_168], 0
		mov	[esp+4], eax
		lea	eax, [ebp+var_8C]
		mov	[esp], eax
		call	sub_4114B0

loc_40AA63:				; CODE XREF: sub_408C80+1DB4j
					; sub_408C80+1DBFj
		mov	ecx, [ebp+var_1A0]
		mov	[ebp+var_1A4], ecx

loc_40AA6F:				; CODE XREF: sub_408C80+17B0j
					; sub_408C80+1F47j ...
		lea	eax, [ebp+var_88]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_411210
		jmp	loc_40A5D6
; ---------------------------------------------------------------------------

loc_40AA8C:				; CODE XREF: sub_408C80+17F9j
		lea	eax, [ebp+var_84]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40AAA4:				; CODE XREF: sub_408C80+1839j
					; sub_408C80+1E53j ...
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40A597
; ---------------------------------------------------------------------------

loc_40AABE:				; CODE XREF: sub_408C80+1830j
		lea	eax, [ebp+var_70]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	short loc_40AAA4
; ---------------------------------------------------------------------------

loc_40AAD5:				; CODE XREF: sub_408C80+1819j
		lea	eax, [ebp+var_78]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410CE0

loc_40AAEA:				; CODE XREF: sub_408C80+1822j
		lea	eax, [ebp+var_74]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	short loc_40AAA4
; ---------------------------------------------------------------------------

loc_40AB01:				; CODE XREF: sub_408C80+1802j
		lea	eax, [ebp+var_80]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410CE0

loc_40AB16:				; CODE XREF: sub_408C80+1810j
		lea	eax, [ebp+var_7C]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40AAA4
; ---------------------------------------------------------------------------

loc_40AB30:				; CODE XREF: sub_408C80+17F0j
		lea	eax, [ebp+var_14]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40A5D6
; ---------------------------------------------------------------------------

loc_40AB4A:				; CODE XREF: sub_408C80+1750j
		lea	eax, [ebp+var_A8]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410CE0

loc_40AB62:				; CODE XREF: sub_408C80+1759j
		lea	eax, [ebp+var_A4]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40AB7A:				; CODE XREF: sub_408C80+1762j
		lea	eax, [ebp+var_A0]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0

loc_40AB92:				; CODE XREF: sub_408C80+1770j
		lea	eax, [ebp+var_98]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_411210
		jmp	loc_40AA20
; ---------------------------------------------------------------------------

loc_40ABAF:				; CODE XREF: sub_408C80+1739j
		lea	eax, [ebp+var_108]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410D10
		jmp	loc_40AA6F
; ---------------------------------------------------------------------------

loc_40ABCC:				; CODE XREF: sub_408C80+1730j
		lea	eax, [ebp+var_104]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40AA6F
; ---------------------------------------------------------------------------

loc_40ABE9:				; CODE XREF: sub_408C80+1722j
		mov	eax, [ebp+var_1A4]
		mov	[esp], eax
		call	sub_413650
		mov	edx, [ebp+var_1CC]
		mov	[ebp+var_168], 7
		mov	[esp], edx
		call	sub_4126A0
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_40AC14:				; CODE XREF: sub_408C80+1719j
		mov	[ebp+var_168], 0
		call	sub_413920
		mov	ecx, [ebp+var_1A4]
		mov	[esp], ecx
		call	sub_413650
		mov	eax, [ebp+var_1B0]
		mov	edx, [ebp+var_1B8]
		mov	dword ptr [esp+8], 8
		mov	[ebp+var_168], 6
		mov	[esp+0Ch], eax
		lea	eax, [ebp+var_138]
		mov	[esp+4], eax
		mov	[esp], edx
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_40AC6B:				; CODE XREF: sub_408C80+16FCj
		lea	eax, [ebp+var_F0]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_4126A0
		jmp	loc_40A9F0
; ---------------------------------------------------------------------------

loc_40AC88:				; CODE XREF: sub_408C80+1705j
		lea	eax, [ebp+var_F4]
		mov	[esp], eax
		mov	[ebp+var_168], 0
		call	sub_410D10
		jmp	loc_40A9F0
sub_408C80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40ACB0	proc near		; CODE XREF: sub_40AE50+3Ap
					; sub_40B300+1AAp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	edx, 3Ch	; switch 61 cases
		mov	[esp+0Ch+var_4], edi
		mov	edi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], esi
		jbe	short loc_40ACE0

loc_40ACC7:				; CODE XREF: sub_40ACB0:loc_40ACE0j
					; sub_40ACB0+39j ...
		xor	ebx, ebx	; jumptable 0040ACE0 default case

loc_40ACC9:				; CODE XREF: sub_40ACB0+54j
					; sub_40ACB0+5Ej
		mov	eax, ebx
		mov	esi, [esp+0Ch+var_8]
		mov	ebx, [esp+0Ch+var_C]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40ACE0:				; CODE XREF: sub_40ACB0+15j
		jmp	ds:off_41A940[edx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_40ACE7:				; CODE XREF: sub_40ACB0:loc_40ACE0j
					; DATA XREF: .rdata:off_41A940o
		test	edi, edi	; jumptable 0040ACE0 case 38
		jz	short loc_40ACC7 ; jumptable 0040ACE0 default case

loc_40ACEB:				; CODE XREF: sub_40ACB0:loc_40ACE0j
					; DATA XREF: .rdata:off_41A940o
		mov	esi, [eax+14h]	; jumptable 0040ACE0 cases 23-28,37,41,42
		cmp	esi, [eax+18h]
		jge	short loc_40ACC7 ; jumptable 0040ACE0 default case

loc_40ACF3:				; CODE XREF: sub_40ACB0+72j
		lea	ebx, [esi+esi*2]
		add	esi, 1
		shl	ebx, 2
		add	ebx, [eax+10h]
		mov	[eax+14h], esi
		test	ebx, ebx
		jz	short loc_40ACC9
		mov	[ebx], edx
		mov	[ebx+4], ecx
		mov	[ebx+8], edi
		jmp	short loc_40ACC9
; ---------------------------------------------------------------------------

loc_40AD10:				; CODE XREF: sub_40ACB0:loc_40ACE0j
					; DATA XREF: .rdata:off_41A940o
		test	edi, edi	; jumptable 0040ACE0 cases 1-4,11,29,39,46-53,55
		jz	short loc_40ACC7 ; jumptable 0040ACE0 default case

loc_40AD14:				; CODE XREF: sub_40ACB0:loc_40ACE0j
					; DATA XREF: .rdata:off_41A940o
		test	ecx, ecx	; jumptable 0040ACE0 cases 9,10,12-21,30-34,36,45,54,57-60
		jz	short loc_40ACC7 ; jumptable 0040ACE0 default case
		mov	esi, [eax+14h]
		cmp	esi, [eax+18h]
		xchg	ax, ax
		jge	short loc_40ACC7 ; jumptable 0040ACE0 default case
		jmp	short loc_40ACF3
sub_40ACB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40AD30	proc near		; CODE XREF: sub_40B230+6Fp
					; sub_40B230+B9p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 8
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	esi, [eax+14h]
		cmp	esi, [eax+18h]
		jge	short loc_40AD55
		lea	ebx, [esi+esi*2]
		add	esi, 1
		shl	ebx, 2
		add	ebx, [eax+10h]
		mov	[eax+14h], esi
		test	ebx, ebx
		jnz	short loc_40AD64

loc_40AD55:				; CODE XREF: sub_40AD30+10j
					; sub_40AD30+36j ...
		xor	ebx, ebx
		mov	esi, [esp+8+var_4]
		mov	eax, ebx
		mov	ebx, [esp+8+var_8]
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_40AD64:				; CODE XREF: sub_40AD30+23j
		test	edx, edx
		jz	short loc_40AD55
		test	ecx, ecx
		jz	short loc_40AD55
		mov	dword ptr [ebx], 0
		mov	eax, ebx
		mov	[ebx+4], edx
		mov	[ebx+8], ecx
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		add	esp, 8
		retn
sub_40AD30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40AD90	proc near		; CODE XREF: sub_40ADF0+2Ap
					; sub_40ADF0+3Fp ...
		push	edi
		xor	edi, edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	eax, [eax+0Ch]
		movzx	ecx, byte ptr [eax]
		cmp	cl, 6Eh
		jz	short loc_40ADD5

loc_40ADA2:				; CODE XREF: sub_40AD90+53j
		lea	eax, [ecx-30h]
		cmp	al, 9
		ja	short loc_40ADE5
		mov	edx, [esi+0Ch]
		xor	eax, eax
		xchg	ax, ax

loc_40ADB0:				; CODE XREF: sub_40AD90+39j
		add	edx, 1
		movsx	ecx, cl
		lea	eax, [eax+eax*4]
		lea	eax, [ecx+eax*2-30h]
		mov	[esi+0Ch], edx
		movzx	ecx, byte ptr [edx]
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		jbe	short loc_40ADB0

loc_40ADCB:				; CODE XREF: sub_40AD90+57j
		test	edi, edi
		jz	short loc_40ADD1
		neg	eax

loc_40ADD1:				; CODE XREF: sub_40AD90+3Dj
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_40ADD5:				; CODE XREF: sub_40AD90+10j
		lea	edx, [eax+1]
		mov	di, 1
		mov	[esi+0Ch], edx
		movzx	ecx, byte ptr [eax+1]
		jmp	short loc_40ADA2
; ---------------------------------------------------------------------------

loc_40ADE5:				; CODE XREF: sub_40AD90+17j
		xor	eax, eax
		jmp	short loc_40ADCB
sub_40AD90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40ADF0	proc near		; CODE XREF: sub_40C6E0+1D7p
					; sub_40C6E0+212p ...
		test	edx, edx
		push	ebx
		mov	ebx, eax
		jnz	short loc_40AE0A
		mov	eax, [eax+0Ch]
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jz	short loc_40AE14
		add	eax, 1
		movsx	edx, dl
		mov	[ebx+0Ch], eax

loc_40AE0A:				; CODE XREF: sub_40ADF0+5j
		cmp	edx, 68h
		jz	short loc_40AE2D
		cmp	edx, 76h
		jz	short loc_40AE18

loc_40AE14:				; CODE XREF: sub_40ADF0+Fj
					; sub_40ADF0+35j ...
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40AE18:				; CODE XREF: sub_40ADF0+22j
		mov	eax, ebx
		call	sub_40AD90
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	short loc_40AE14
		add	eax, 1
		mov	[ebx+0Ch], eax

loc_40AE2D:				; CODE XREF: sub_40ADF0+1Dj
		mov	eax, ebx
		call	sub_40AD90
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	short loc_40AE14
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, 1
		pop	ebx
		retn
sub_40ADF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40AE50	proc near		; CODE XREF: sub_40B640+5Ap
					; sub_40B640+31Fp ...

var_10		= dword	ptr -10h

		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 4
		mov	eax, [eax+0Ch]
		movzx	eax, byte ptr [eax]
		jmp	short loc_40AE9E
; ---------------------------------------------------------------------------

loc_40AE64:				; CODE XREF: sub_40AE50+58j
		test	dl, dl
		jnz	short loc_40AEAA
		cmp	al, 4Bh
		jnz	short loc_40AEC5
		add	dword ptr [ebx+0Ch], 1

loc_40AE70:				; CODE XREF: sub_40AE50+80j
		cmp	edi, 1
		sbb	edx, edx
		add	dword ptr [ebx+30h], 6
		and	edx, 0FFFFFFFDh
		add	edx, 1Ch

loc_40AE7F:				; CODE XREF: sub_40AE50+71j
					; sub_40AE50+91j
		xor	ecx, ecx
		mov	eax, ebx
		mov	[esp+10h+var_10], 0
		call	sub_40ACB0
		test	eax, eax
		mov	[esi], eax
		jz	short loc_40AEC3
		lea	esi, [eax+4]
		mov	eax, [ebx+0Ch]
		movzx	eax, byte ptr [eax]

loc_40AE9E:				; CODE XREF: sub_40AE50+12j
		cmp	al, 72h
		setz	dl
		cmp	al, 56h
		setz	cl
		jnz	short loc_40AE64

loc_40AEAA:				; CODE XREF: sub_40AE50+16j
		add	dword ptr [ebx+0Ch], 1
		test	dl, dl
		jz	short loc_40AECE
		cmp	edi, 1
		sbb	edx, edx
		and	edx, 0FFFFFFFDh
		add	edx, 1Ah
		add	dword ptr [ebx+30h], 9
		jmp	short loc_40AE7F
; ---------------------------------------------------------------------------

loc_40AEC3:				; CODE XREF: sub_40AE50+43j
		xor	esi, esi

loc_40AEC5:				; CODE XREF: sub_40AE50+1Aj
		add	esp, 4
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_40AECE:				; CODE XREF: sub_40AE50+60j
		test	cl, cl
		jz	short loc_40AE70
		cmp	edi, 1
		sbb	edx, edx
		and	edx, 0FFFFFFFDh
		add	edx, 1Bh
		add	dword ptr [ebx+30h], 9
		jmp	short loc_40AE7F
sub_40AE50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40AEF0	proc near		; CODE XREF: sub_40B300+1CBj
					; sub_40B640+219p ...
		push	ebx
		mov	ebx, eax
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	54h
		jz	short loc_40AF00

loc_40AEFB:				; CODE XREF: sub_40AEF0+27j
					; sub_40AEF0+2Fj ...
		xor	eax, eax

loc_40AEFD:				; CODE XREF: sub_40AEF0+57j
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40AF00:				; CODE XREF: sub_40AEF0+9j
		lea	edx, [eax+1]
		xor	ecx, ecx
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+1], 5Fh
		jz	short loc_40AF24
		mov	eax, ebx
		call	sub_40AD90
		test	eax, eax
		js	short loc_40AEFB
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	5Fh
		jnz	short loc_40AEFB
		lea	ecx, [eax+1]

loc_40AF24:				; CODE XREF: sub_40AEF0+1Cj
		add	edx, 1
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		add	dword ptr [ebx+28h], 1
		cmp	edx, [ebx+18h]
		jge	short loc_40AEFB
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	short loc_40AEFD
		mov	dword ptr [eax], 5
		mov	[eax+4], ecx
		pop	ebx
		retn
sub_40AEF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40AF60	proc near		; CODE XREF: sub_40B640+1DFp
					; sub_40C3D0+9Dp ...
		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [eax+0Ch]
		cmp	byte ptr [ebx],	53h
		jz	short loc_40AF75

loc_40AF6C:				; CODE XREF: sub_40AF60+50j
					; sub_40AF60+74j ...
		xor	edx, edx

loc_40AF6E:				; CODE XREF: sub_40AF60+161j
					; sub_40AF60+173j
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40AF75:				; CODE XREF: sub_40AF60+Aj
		lea	ecx, [ebx+1]
		mov	[eax+0Ch], ecx
		movzx	ecx, byte ptr [ebx+1]
		test	cl, cl
		jnz	short loc_40AFD6

loc_40AF83:				; CODE XREF: sub_40AF60+19Aj
		mov	ebx, [eax+8]
		shr	ebx, 3
		and	ebx, 1
		test	edx, edx
		jz	short loc_40AFA5
		test	ebx, ebx
		jnz	short loc_40AFA5
		mov	edx, [eax+0Ch]
		xor	ebx, ebx
		movzx	edx, byte ptr [edx]
		sub	edx, 43h
		cmp	dl, 1
		setbe	bl

loc_40AFA5:				; CODE XREF: sub_40AF60+2Ej
					; sub_40AF60+32j
		mov	edx, offset dword_41B844
		cmp	edx, offset aT	; "t"
		jbe	short loc_40AF6C
		cmp	cl, 74h
		mov	edx, offset aT	; "t"
		jnz	short loc_40AFC9
		jmp	loc_40B061
; ---------------------------------------------------------------------------

loc_40AFC1:				; CODE XREF: sub_40AF60+72j
		cmp	cl, [edx]
		jz	loc_40B061

loc_40AFC9:				; CODE XREF: sub_40AF60+5Aj
		add	edx, 1Ch
		cmp	edx, offset dword_41B844
		jnz	short loc_40AFC1
		jmp	short loc_40AF6C
; ---------------------------------------------------------------------------

loc_40AFD6:				; CODE XREF: sub_40AF60+21j
		add	ebx, 2
		mov	[eax+0Ch], ebx
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		ja	loc_40B0E5
		cmp	cl, 5Fh
		jz	short loc_40B05D

loc_40AFED:				; CODE XREF: sub_40AF60+194j
		lea	ebx, [ecx-30h]
		xor	edx, edx
		cmp	bl, 9
		ja	short loc_40B028

loc_40AFF7:				; CODE XREF: sub_40AF60+C6j
		lea	ebx, [edx+edx*8]
		movsx	ecx, cl
		lea	ebx, [ecx+ebx*4-30h]

loc_40B001:				; CODE XREF: sub_40AF60+DEj
		cmp	edx, ebx
		ja	loc_40AF6C
		mov	edx, [eax+0Ch]
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		jz	short loc_40B01E
		add	edx, 1
		cmp	cl, 5Fh
		mov	[eax+0Ch], edx
		jz	short loc_40B040

loc_40B01E:				; CODE XREF: sub_40AF60+B1j
		mov	edx, ebx
		lea	ebx, [ecx-30h]
		cmp	bl, 9
		jbe	short loc_40AFF7

loc_40B028:				; CODE XREF: sub_40AF60+95j
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		ja	loc_40AF6C
		lea	ebx, [edx+edx*8]
		movsx	ecx, cl
		lea	ebx, [ecx+ebx*4-37h]
		jmp	short loc_40B001
; ---------------------------------------------------------------------------

loc_40B040:				; CODE XREF: sub_40AF60+BCj
		add	ebx, 1

loc_40B043:				; CODE XREF: sub_40AF60+FFj
		cmp	ebx, [eax+20h]
		jnb	loc_40AF6C
		add	dword ptr [eax+28h], 1
		mov	eax, [eax+1Ch]
		mov	edx, [eax+ebx*4]
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, edx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40B05D:				; CODE XREF: sub_40AF60+8Bj
					; sub_40AF60+188j
		xor	ebx, ebx
		jmp	short loc_40B043
; ---------------------------------------------------------------------------

loc_40B061:				; CODE XREF: sub_40AF60+5Cj
					; sub_40AF60+63j
		mov	edi, [edx+14h]
		test	edi, edi
		jz	short loc_40B0E0
		mov	ecx, [eax+14h]
		xor	esi, esi
		cmp	ecx, [eax+18h]
		mov	ebp, [edx+18h]
		jge	short loc_40B097
		lea	esi, [ecx+ecx*2]
		add	ecx, 1
		shl	esi, 2
		add	esi, [eax+10h]
		mov	[eax+14h], ecx
		test	esi, esi
		jz	short loc_40B097
		mov	[esi+4], edi
		mov	[esi+8], ebp
		mov	ecx, [eax+14h]
		mov	dword ptr [esi], 16h

loc_40B097:				; CODE XREF: sub_40AF60+113j
					; sub_40AF60+126j
		mov	[eax+2Ch], esi

loc_40B09A:				; CODE XREF: sub_40AF60+183j
		test	ebx, ebx
		jz	short loc_40B0D8
		mov	esi, [edx+0Ch]
		mov	ebx, [edx+10h]

loc_40B0A4:				; CODE XREF: sub_40AF60+17Ej
		add	[eax+30h], ebx
		cmp	ecx, [eax+18h]
		jge	loc_40AF6C
		lea	edx, [ecx+ecx*2]
		add	ecx, 1
		shl	edx, 2
		add	edx, [eax+10h]
		mov	[eax+14h], ecx
		test	edx, edx
		jz	loc_40AF6E
		mov	dword ptr [edx], 16h
		mov	[edx+4], esi
		mov	[edx+8], ebx
		jmp	loc_40AF6E
; ---------------------------------------------------------------------------

loc_40B0D8:				; CODE XREF: sub_40AF60+13Cj
		mov	esi, [edx+4]
		mov	ebx, [edx+8]
		jmp	short loc_40B0A4
; ---------------------------------------------------------------------------

loc_40B0E0:				; CODE XREF: sub_40AF60+106j
		mov	ecx, [eax+14h]
		jmp	short loc_40B09A
; ---------------------------------------------------------------------------

loc_40B0E5:				; CODE XREF: sub_40AF60+82j
		cmp	cl, 5Fh
		jz	loc_40B05D
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		jbe	loc_40AFED
		jmp	loc_40AF83
sub_40AF60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40B100	proc near		; CODE XREF: sub_40D230+120p
					; sub_40D690+CBp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, edx
		sub	esp, 28h
		mov	ecx, [eax+104h]
		cmp	ecx, 0FFh
		lea	edx, [ecx+1]
		jz	short loc_40B130

loc_40B117:				; CODE XREF: sub_40B100+75j
		mov	[eax+ecx+4], bl
		mov	[eax+104h], edx
		mov	[eax+108h], bl
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40B130:				; CODE XREF: sub_40B100+15j
		mov	edx, [eax+110h]
		mov	byte ptr [eax+103h], 0
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], edx
		lea	edx, [eax+4]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+10Ch]
		mov	eax, [esp+2Ch+var_10]
		mov	edx, 1
		xor	ecx, ecx
		mov	dword ptr [eax+104h], 0
		add	dword ptr [eax+124h], 1
		jmp	short loc_40B117
sub_40B100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40B180	proc near		; CODE XREF: sub_40B180+17p
					; sub_40D690+FDp
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 4
		test	edx, edx
		jz	short loc_40B1A7 ; jumptable 0040B1B2 cases 0,6,22,35,43,56,60

loc_40B18D:				; CODE XREF: sub_40B180+25j
		cmp	dword ptr [ebx], 3Ch ; switch 61 cases
		jbe	short loc_40B1B0

loc_40B192:				; CODE XREF: sub_40B180+32j
					; DATA XREF: .rdata:off_41AA34o
		mov	edx, [ebx+4]	; jumptable 0040B1B2 default case
		mov	eax, esi
		call	sub_40B180
		test	eax, eax
		jnz	short loc_40B1A9

loc_40B1A0:				; CODE XREF: sub_40B180+32j
					; DATA XREF: .rdata:off_41AA34o
		mov	ebx, [ebx+8]	; jumptable 0040B1B2 cases 7,8,44
		test	ebx, ebx
		jnz	short loc_40B18D

loc_40B1A7:				; CODE XREF: sub_40B180+Bj
					; sub_40B180+32j ...
		xor	eax, eax	; jumptable 0040B1B2 cases 0,6,22,35,43,56,60

loc_40B1A9:				; CODE XREF: sub_40B180+1Ej
					; sub_40B180+87j ...
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40B1B0:				; CODE XREF: sub_40B180+10j
		mov	eax, [ebx]
		jmp	ds:off_41AA34[eax*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_40B1C0:				; CODE XREF: sub_40B180+32j
					; DATA XREF: .rdata:off_41AA34o
		mov	eax, [esi+114h]	; jumptable 0040B1B2 case 5
		test	eax, eax
		jz	short loc_40B212
		mov	eax, [eax+4]
		mov	edx, [ebx+4]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_40B1EE
		jmp	short loc_40B1A7 ; jumptable 0040B1B2 cases 0,6,22,35,43,56,60
; ---------------------------------------------------------------------------
		align 10h

loc_40B1E0:				; CODE XREF: sub_40B180+71j
		test	edx, edx
		jle	short loc_40B1F5
		mov	eax, [eax+8]
		sub	edx, 1
		test	eax, eax
		jz	short loc_40B1A7 ; jumptable 0040B1B2 cases 0,6,22,35,43,56,60

loc_40B1EE:				; CODE XREF: sub_40B180+55j
		cmp	dword ptr [eax], 2Ah
		jz	short loc_40B1E0
		jmp	short loc_40B1A7 ; jumptable 0040B1B2 cases 0,6,22,35,43,56,60
; ---------------------------------------------------------------------------

loc_40B1F5:				; CODE XREF: sub_40B180+62j
		test	eax, eax
		jz	short loc_40B1A7 ; jumptable 0040B1B2 cases 0,6,22,35,43,56,60
		test	edx, edx
		nop
		lea	esi, [esi+0]
		jnz	short loc_40B1A7 ; jumptable 0040B1B2 cases 0,6,22,35,43,56,60
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_40B1A9
		cmp	dword ptr [eax], 2Ah
		jnz	short loc_40B1A7 ; jumptable 0040B1B2 cases 0,6,22,35,43,56,60
		xchg	ax, ax
		jmp	short loc_40B1A9
; ---------------------------------------------------------------------------

loc_40B212:				; CODE XREF: sub_40B180+48j
		mov	dword ptr [esi+11Ch], 1
		lea	esi, [esi+0]
		jmp	short loc_40B1A9
sub_40B180	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40B230	proc near		; CODE XREF: sub_40B640+278p
					; sub_40B640+2E0p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 10h
		mov	[esp+10h+var_10], ebx
		mov	ebx, eax
		mov	[esp+10h+var_C], esi
		mov	[esp+10h+var_8], edi
		mov	[esp+10h+var_4], ebp
		call	sub_40AD90
		xor	ecx, ecx
		test	eax, eax
		jle	short loc_40B2A9
		mov	ebp, [ebx+0Ch]
		mov	esi, [ebx+4]
		sub	esi, ebp
		cmp	eax, esi
		jg	short loc_40B2A6
		test	byte ptr [ebx+8], 4
		lea	ecx, [ebp+eax+0]
		mov	[ebx+0Ch], ecx
		jz	short loc_40B26D
		cmp	byte ptr [ecx],	24h
		jz	short loc_40B2C0

loc_40B26D:				; CODE XREF: sub_40B230+36j
					; sub_40B230+96j
		cmp	eax, 9
		jle	short loc_40B299
		mov	edi, offset a_global_ ;	"_GLOBAL_"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_40B299
		movzx	ecx, byte ptr [ebp+8]
		lea	esi, [ebp+8]
		cmp	cl, 5Fh
		jz	short loc_40B293
		cmp	cl, 2Eh
		jnz	short loc_40B2C8

loc_40B293:				; CODE XREF: sub_40B230+5Cj
					; sub_40B230+A0j
		cmp	byte ptr [esi+1], 4Eh
		jz	short loc_40B2D2

loc_40B299:				; CODE XREF: sub_40B230+40j
					; sub_40B230+50j ...
		mov	ecx, eax
		mov	edx, ebp
		mov	eax, ebx
		call	sub_40AD30
		mov	ecx, eax

loc_40B2A6:				; CODE XREF: sub_40B230+29j
					; sub_40B230+C0j
		mov	[ebx+2Ch], ecx

loc_40B2A9:				; CODE XREF: sub_40B230+1Dj
		mov	eax, ecx
		mov	ebx, [esp+10h+var_10]
		mov	esi, [esp+10h+var_C]
		mov	edi, [esp+10h+var_8]
		mov	ebp, [esp+10h+var_4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40B2C0:				; CODE XREF: sub_40B230+3Bj
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		jmp	short loc_40B26D
; ---------------------------------------------------------------------------

loc_40B2C8:				; CODE XREF: sub_40B230+61j
		cmp	cl, 24h
		jnz	short loc_40B299
		lea	esi, [esi+0]
		jmp	short loc_40B293
; ---------------------------------------------------------------------------

loc_40B2D2:				; CODE XREF: sub_40B230+67j
		mov	edx, [ebx+30h]
		mov	ecx, 15h
		add	edx, 16h
		sub	edx, eax
		mov	eax, ebx
		mov	[ebx+30h], edx
		mov	edx, offset aAnonymousNames ; "(anonymous namespace)"
		call	sub_40AD30
		mov	ecx, eax
		jmp	short loc_40B2A6
sub_40B230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40B300	proc near		; CODE XREF: sub_40B300+148p
					; sub_40B300+220p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		cmp	al, 4Ch
		jz	loc_40B457
		cmp	al, 54h
		jz	loc_40B4B6
		cmp	al, 73h
		jz	loc_40B3D6
		cmp	al, 66h
		jz	short loc_40B371

loc_40B337:				; CODE XREF: sub_40B300+75j
		sub	eax, 30h
		cmp	al, 9
		ja	loc_40B3EA
		mov	eax, ebx
		call	sub_40BFE0
		test	eax, eax
		mov	esi, eax
		jz	short loc_40B35B
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jz	loc_40B541

loc_40B35B:				; CODE XREF: sub_40B300+4Dj
					; sub_40B300+C9j ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_40B371:				; CODE XREF: sub_40B300+35j
		cmp	byte ptr [edx+1], 70h
		jnz	short loc_40B337
		lea	ecx, [edx+2]
		mov	eax, 1
		mov	[ebx+0Ch], ecx
		cmp	byte ptr [edx+2], 5Fh
		jz	short loc_40B3A6
		mov	eax, ebx
		call	sub_40AD90
		test	eax, eax
		js	loc_40B450
		mov	ecx, [ebx+0Ch]
		cmp	byte ptr [ecx],	5Fh
		jnz	loc_40B450
		add	eax, 2

loc_40B3A6:				; CODE XREF: sub_40B300+86j
		mov	edx, [ebx+14h]
		add	ecx, 1
		cmp	edx, [ebx+18h]
		mov	[ebx+0Ch], ecx
		jge	loc_40B450
		lea	esi, [edx+edx*2]
		add	edx, 1
		shl	esi, 2
		add	esi, [ebx+10h]
		mov	[ebx+14h], edx
		test	esi, esi
		jz	short loc_40B35B
		mov	dword ptr [esi], 6
		mov	[esi+4], eax
		jmp	short loc_40B35B
; ---------------------------------------------------------------------------

loc_40B3D6:				; CODE XREF: sub_40B300+2Dj
		movzx	eax, byte ptr [edx+1]
		cmp	al, 72h
		jz	loc_40B4D0
		cmp	al, 70h
		jz	loc_40B518

loc_40B3EA:				; CODE XREF: sub_40B300+3Cj
		mov	eax, ebx
		call	sub_40BE60
		test	eax, eax
		mov	ebp, eax
		jz	short loc_40B450
		mov	eax, [eax]
		cmp	eax, 2Bh
		jz	short loc_40B471
		cmp	eax, 2Ch
		jz	loc_40B510
		cmp	eax, 2Dh
		jz	short loc_40B439
		cmp	eax, 2Bh
		nop
		jnz	short loc_40B450
		mov	eax, [ebp+4]

loc_40B415:				; CODE XREF: sub_40B300+191j
		mov	edx, [eax+0Ch]
		mov	eax, 2Bh

loc_40B41D:				; CODE XREF: sub_40B300+213j
		cmp	edx, 2
		jz	loc_40B5B3
		cmp	edx, 3
		jz	loc_40B560
		cmp	edx, 1
		jnz	short loc_40B450
		cmp	eax, 2Dh
		jnz	short loc_40B446

loc_40B439:				; CODE XREF: sub_40B300+10Aj
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		nop
		jz	loc_40B62C

loc_40B446:				; CODE XREF: sub_40B300+137j
		mov	eax, ebx
		call	sub_40B300
		jmp	short loc_40B49E
; ---------------------------------------------------------------------------
		align 10h

loc_40B450:				; CODE XREF: sub_40B300+91j
					; sub_40B300+9Dj ...
		xor	esi, esi
		jmp	loc_40B35B
; ---------------------------------------------------------------------------

loc_40B457:				; CODE XREF: sub_40B300+1Dj
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_40C1A0
; ---------------------------------------------------------------------------

loc_40B471:				; CODE XREF: sub_40B300+FCj
		mov	edx, [ebp+4]
		mov	edi, offset aSt	; "st"
		mov	ecx, 3
		mov	eax, [ebx+30h]
		add	eax, [edx+8]
		sub	eax, 2
		mov	[ebx+30h], eax
		mov	eax, [ebp+4]
		mov	esi, [eax]
		repe cmpsb
		jnz	loc_40B415
		mov	eax, ebx
		call	sub_40B640

loc_40B49E:				; CODE XREF: sub_40B300+14Dj
					; sub_40B300+339j
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, ebp
		mov	edx, 2Eh
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40B35B
; ---------------------------------------------------------------------------

loc_40B4B6:				; CODE XREF: sub_40B300+25j
		mov	eax, ebx
		mov	esi, [esp+3Ch+var_C]
		mov	ebx, [esp+3Ch+var_10]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_40AEF0
; ---------------------------------------------------------------------------

loc_40B4D0:				; CODE XREF: sub_40B300+DCj
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_40B640
		mov	esi, eax
		mov	eax, ebx
		call	sub_40BFE0
		mov	edi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jz	loc_40B60C
		mov	[esp+3Ch+var_3C], edi

loc_40B4F7:				; CODE XREF: sub_40B300+327j
		mov	ecx, esi
		mov	edx, 1
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40B35B
; ---------------------------------------------------------------------------
		align 10h

loc_40B510:				; CODE XREF: sub_40B300+101j
		mov	edx, [ebp+4]
		jmp	loc_40B41D
; ---------------------------------------------------------------------------

loc_40B518:				; CODE XREF: sub_40B300+E4j
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_40B300
		mov	edx, 3Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40B35B
; ---------------------------------------------------------------------------

loc_40B541:				; CODE XREF: sub_40B300+55j
		mov	eax, ebx
		call	sub_40C2D0
		mov	ecx, esi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40B35B
; ---------------------------------------------------------------------------

loc_40B560:				; CODE XREF: sub_40B300+129j
		mov	eax, ebx
		call	sub_40B300
		mov	esi, eax
		mov	eax, ebx
		call	sub_40B300
		mov	edi, eax
		mov	eax, ebx
		call	sub_40B300
		mov	ecx, edi
		mov	edx, 33h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	ecx, esi
		mov	edx, 32h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	ecx, ebp
		mov	edx, 31h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40B35B
; ---------------------------------------------------------------------------

loc_40B5B3:				; CODE XREF: sub_40B300+120j
		mov	eax, ebx
		mov	edi, offset aCl	; "cl"
		call	sub_40B300
		mov	ecx, 3
		mov	[esp+3Ch+var_20], eax
		mov	eax, [ebp+4]
		mov	esi, [eax]
		repe cmpsb
		jnz	short loc_40B603
		mov	eax, ebx
		call	sub_40CC40

loc_40B5D8:				; CODE XREF: sub_40B300+30Aj
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 30h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	ecx, ebp
		mov	edx, 2Fh
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40B35B
; ---------------------------------------------------------------------------

loc_40B603:				; CODE XREF: sub_40B300+2CFj
		mov	eax, ebx
		call	sub_40B300
		jmp	short loc_40B5D8
; ---------------------------------------------------------------------------

loc_40B60C:				; CODE XREF: sub_40B300+1EEj
		mov	eax, ebx
		call	sub_40C2D0
		mov	ecx, edi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	[esp+3Ch+var_3C], eax
		jmp	loc_40B4F7
; ---------------------------------------------------------------------------

loc_40B62C:				; CODE XREF: sub_40B300+140j
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_40CC40
		jmp	loc_40B49E
sub_40B300	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40B640	proc near		; CODE XREF: sub_40B300+199p
					; sub_40B300+1D8p ...

var_3C		= dword	ptr -3Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		mov	ecx, [eax+0Ch]
		movzx	eax, byte ptr [ecx]
		cmp	al, 56h
		jz	short loc_40B692
		cmp	al, 72h
		jz	short loc_40B692
		cmp	al, 4Bh
		jz	short loc_40B692
		lea	edx, [eax-30h]
		cmp	dl, 4Ah		; switch 75 cases
		lea	esi, [esi+0]
		jbe	short loc_40B688

loc_40B672:				; CODE XREF: sub_40B640+4Bj
					; sub_40B640+63j ...
		xor	eax, eax	; jumptable 0040B68B default case

loc_40B674:				; CODE XREF: sub_40B640+96j
					; sub_40B640+A7j ...
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_40B688:				; CODE XREF: sub_40B640+30j
		movzx	edx, dl
		jmp	ds:off_41AB50[edx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_40B692:				; CODE XREF: sub_40B640+1Dj
					; sub_40B640+21j ...
		xor	ecx, ecx
		mov	eax, ebx
		lea	edx, [esp+3Ch+var_20]
		call	sub_40AE50
		test	eax, eax
		mov	esi, eax
		jz	short loc_40B672 ; jumptable 0040B68B default case
		mov	eax, ebx
		call	sub_40B640
		test	eax, eax
		mov	[esi], eax
		jz	short loc_40B672 ; jumptable 0040B68B default case
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_40B672 ; jumptable 0040B68B default case
		lea	esi, [esi+0]

loc_40B6C0:				; CODE XREF: sub_40B640+A5j
					; sub_40B640+6A8j
		mov	edx, [ebx+20h]
		cmp	edx, [ebx+24h]
		jge	short loc_40B672 ; jumptable 0040B68B default case
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+edx*4], eax
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_40B674
; ---------------------------------------------------------------------------

loc_40B6D8:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		mov	eax, ebx	; jumptable 0040B68B cases 0-9,30,42
		call	sub_40C3D0
		mov	[esp+3Ch+var_20], eax

loc_40B6E3:				; CODE XREF: sub_40B640+D6j
					; sub_40B640+12Bj ...
		test	eax, eax
		jnz	short loc_40B6C0
		jmp	short loc_40B674
; ---------------------------------------------------------------------------
		align 10h

loc_40B6F0:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		add	ecx, 1		; jumptable 0040B68B case 19
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_40B640
		mov	edx, 21h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_40B6E3
; ---------------------------------------------------------------------------

loc_40B718:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		lea	eax, [ecx+1]	; jumptable 0040B68B case 20
		mov	[ebx+0Ch], eax
		movzx	eax, byte ptr [ecx+1]
		test	al, al
		jz	loc_40B672	; jumptable 0040B68B default case
		sub	eax, 46h
		add	ecx, 2
		cmp	al, 2Eh		; switch 47 cases
		mov	[ebx+0Ch], ecx
		ja	loc_40B672	; jumptable 0040B68B default case
		movzx	eax, al
		jmp	ds:off_41AC7C[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_40B745:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		add	ecx, 1		; jumptable 0040B68B case 23
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_40B640
		mov	edx, 22h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_40B6E3
; ---------------------------------------------------------------------------

loc_40B770:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		add	ecx, 1		; jumptable 0040B68B case 31
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_40B640
		mov	edx, 20h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_40B6E3
; ---------------------------------------------------------------------------
		align 10h

loc_40B7A0:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		add	ecx, 1		; jumptable 0040B68B case 32
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_40B640
		mov	edx, 1Eh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_40B6E3
; ---------------------------------------------------------------------------
		align 10h

loc_40B7D0:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		add	ecx, 1		; jumptable 0040B68B case 34
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_40B640
		mov	edx, 1Fh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_40B6E3
; ---------------------------------------------------------------------------
		align 10h

loc_40B800:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		movzx	eax, byte ptr [ecx+1] ;	jumptable 0040B68B case	35
		lea	edx, [eax-30h]
		cmp	dl, 9
		jbe	short loc_40B81B
		cmp	al, 5Fh
		jz	short loc_40B81B
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_40BCD2

loc_40B81B:				; CODE XREF: sub_40B640+1CAj
					; sub_40B640+1CEj
		xor	edx, edx
		mov	eax, ebx
		call	sub_40AF60
		mov	edx, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		cmp	byte ptr [edx],	49h
		jnz	loc_40B674
		mov	eax, ebx
		call	sub_40C2D0
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_40B6E3
; ---------------------------------------------------------------------------

loc_40B857:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		mov	eax, ebx	; jumptable 0040B68B case 36
		call	sub_40AEF0
		mov	edx, [ebx+0Ch]
		mov	[esp+3Ch+var_20], eax
		cmp	byte ptr [edx],	49h
		jnz	loc_40B6E3
		test	eax, eax
		jz	loc_40B674
		mov	edx, [ebx+20h]
		cmp	edx, [ebx+24h]
		jge	loc_40B672	; jumptable 0040B68B default case
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+edx*4], eax
		mov	eax, ebx
		call	sub_40C2D0
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0

loc_40B8A6:				; CODE XREF: sub_40B640+29Bj
					; sub_40B640+330j ...
		mov	[esp+3Ch+var_20], eax
		jmp	loc_40B6E3
; ---------------------------------------------------------------------------
		align 10h

loc_40B8B0:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		add	ecx, 1		; jumptable 0040B68B case 37
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_40B230
		mov	esi, eax
		mov	[esp+3Ch+var_20], eax
		mov	eax, ebx
		call	sub_40B640
		mov	edx, 1Dh
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		jmp	short loc_40B8A6
; ---------------------------------------------------------------------------
		align 10h

loc_40B8E0:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		movsx	eax, al		; jumptable 0040B68B cases 49-58,60-63,67,68,70-74
		lea	eax, [eax+eax*4]
		lea	edx, ds:41ABECh[eax*4]
		test	edx, edx
		jz	loc_40BD0D
		mov	ecx, [ebx+14h]
		cmp	ecx, [ebx+18h]
		jl	loc_40BCA0
		mov	edx, large ds:4
		xor	eax, eax

loc_40B909:				; CODE XREF: sub_40B640+680j
					; sub_40B640+6D2j ...
		mov	edx, [edx+4]
		add	[ebx+30h], edx
		add	dword ptr [ebx+0Ch], 1
		jmp	loc_40B674
; ---------------------------------------------------------------------------

loc_40B918:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		add	ecx, 1		; jumptable 0040B68B case 69
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_40B230
		mov	edx, 24h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	[esp+3Ch+var_20], eax
		jmp	loc_40B6E3
; ---------------------------------------------------------------------------

loc_40B943:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		add	ecx, 1		; jumptable 0040B68B case 29
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		lea	esi, [esp+3Ch+var_24]
		call	sub_40B640
		mov	ecx, 1
		mov	edx, esi
		mov	edi, eax
		mov	eax, ebx
		call	sub_40AE50
		test	eax, eax
		mov	ebp, eax
		jnz	loc_40BA13

loc_40B96E:				; CODE XREF: sub_40B640+36Fj
					; sub_40B640+377j ...
		xor	eax, eax
		jmp	loc_40B8A6
; ---------------------------------------------------------------------------

loc_40B975:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		lea	edx, [ecx+1]	; jumptable 0040B68B case 17
		xor	esi, esi
		mov	[ebx+0Ch], edx
		movzx	eax, byte ptr [ecx+1]
		cmp	al, 5Fh
		jz	short loc_40B9B9
		sub	eax, 30h
		cmp	al, 9
		ja	loc_40BCF5
		mov	ecx, edx

loc_40B992:				; CODE XREF: sub_40B640+360j
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		sub	eax, 30h
		cmp	al, 9
		jbe	short loc_40B992
		sub	ecx, edx
		mov	eax, ebx
		call	sub_40AD30
		test	eax, eax
		mov	esi, eax
		jz	short loc_40B96E

loc_40B9B1:				; CODE XREF: sub_40B640+6C0j
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	5Fh
		jnz	short loc_40B96E

loc_40B9B9:				; CODE XREF: sub_40B640+343j
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_40B640
		mov	ecx, esi
		mov	edx, 26h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		jmp	loc_40B8A6
; ---------------------------------------------------------------------------
		align 10h

loc_40B9E0:				; CODE XREF: sub_40B640+4Bj
					; DATA XREF: .rdata:off_41AB50o
		lea	eax, [ecx+1]	; jumptable 0040B68B case 22
		mov	[ebx+0Ch], eax
		cmp	byte ptr [ecx+1], 59h
		jz	loc_40BD27

loc_40B9F0:				; CODE XREF: sub_40B640+6EDj
		mov	edx, 1
		mov	eax, ebx
		call	sub_40BD70
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	loc_40B96E
		add	edx, 1
		mov	[ebx+0Ch], edx
		jmp	loc_40B8A6
; ---------------------------------------------------------------------------

loc_40BA13:				; CODE XREF: sub_40B640+328j
		mov	eax, ebx
		call	sub_40B640
		test	eax, eax
		mov	[ebp+0], eax
		jz	loc_40B96E
		cmp	ebp, esi
		jz	short loc_40BA32
		cmp	dword ptr [eax], 25h
		jnz	loc_40BD32

loc_40BA32:				; CODE XREF: sub_40B640+3E7j
					; sub_40B640+714j
		mov	eax, [esp+3Ch+var_24]
		mov	ecx, edi
		mov	edx, 27h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		jmp	loc_40B8A6
; ---------------------------------------------------------------------------
		align 10h

loc_40BA50:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	edx, [ebx+14h]	; jumptable 0040B73E case 45
		cmp	edx, [ebx+18h]
		jge	loc_40BCC5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_40BD59
		mov	dword ptr [eax], 23h
		mov	edx, offset off_41B5D8
		mov	dword ptr [eax+4], offset off_41B5D8

loc_40BA85:				; CODE XREF: sub_40B640+4A6j
					; sub_40B640+4DDj ...
		mov	edx, [edx+4]
		add	[ebx+30h], edx
		jmp	loc_40B674
; ---------------------------------------------------------------------------

loc_40BA90:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	eax, ebx	; jumptable 0040B73E case 42
		call	sub_40B640
		mov	edx, 3Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		jmp	loc_40B674
; ---------------------------------------------------------------------------

loc_40BAB1:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	edx, [ebx+14h]	; jumptable 0040B73E case 35
		cmp	edx, [ebx+18h]
		jge	loc_40BCC5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_40BD59
		mov	dword ptr [eax], 23h
		mov	edx, offset off_41B5EC
		mov	dword ptr [eax+4], offset off_41B5EC
		jmp	short loc_40BA85
; ---------------------------------------------------------------------------

loc_40BAE8:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	edx, [ebx+14h]	; jumptable 0040B73E case 31
		cmp	edx, [ebx+18h]
		jge	loc_40BCC5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_40BD59
		mov	dword ptr [eax], 23h
		mov	edx, offset off_41B5B0
		mov	dword ptr [eax+4], offset off_41B5B0
		jmp	loc_40BA85
; ---------------------------------------------------------------------------

loc_40BB22:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	edx, [ebx+14h]	; jumptable 0040B73E case 30
		cmp	edx, [ebx+18h]
		jge	loc_40BCC5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_40BD59
		mov	dword ptr [eax], 23h
		mov	edx, offset off_41B59C
		mov	dword ptr [eax+4], offset off_41B59C
		jmp	loc_40BA85
; ---------------------------------------------------------------------------

loc_40BB5C:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	eax, ebx	; jumptable 0040B73E cases 14,46
		call	sub_40B300
		mov	edx, 39h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		test	eax, eax
		mov	[esp+3Ch+var_20], eax
		jz	loc_40B674
		mov	ecx, [ebx+0Ch]
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jz	loc_40B672	; jumptable 0040B68B default case
		add	ecx, 1
		cmp	dl, 45h
		mov	[ebx+0Ch], ecx
		jnz	loc_40B672	; jumptable 0040B68B default case
		jmp	loc_40B674
; ---------------------------------------------------------------------------

loc_40BBA6:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	eax, [ebx+14h]	; jumptable 0040B73E case 0
		xor	esi, esi
		cmp	eax, [ebx+18h]
		jge	short loc_40BBBF
		lea	esi, [eax+eax*2]
		add	eax, 1
		shl	esi, 2
		add	esi, [ebx+10h]
		mov	[ebx+14h], eax

loc_40BBBF:				; CODE XREF: sub_40B640+56Ej
		mov	eax, [ebx+0Ch]
		mov	[esp+3Ch+var_20], esi
		mov	dword ptr [esi], 28h
		movzx	eax, byte ptr [eax]
		sub	eax, 30h
		cmp	al, 9
		setbe	al
		movzx	eax, al
		test	ax, ax
		mov	[esi+8], ax
		jnz	loc_40BD17

loc_40BBE7:				; CODE XREF: sub_40B640+6E2j
		mov	eax, ebx
		call	sub_40B640
		mov	[esi+4], eax
		mov	eax, [esp+3Ch+var_20]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_40B672	; jumptable 0040B68B default case
		mov	eax, ebx
		call	sub_40AD90
		mov	ecx, [ebx+0Ch]
		xor	edx, edx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	short loc_40BC20
		add	ecx, 1
		xor	edx, edx
		cmp	al, 73h
		mov	[ebx+0Ch], ecx
		setz	dl

loc_40BC20:				; CODE XREF: sub_40B640+5D1j
		mov	eax, [esp+3Ch+var_20]
		mov	[eax+0Ah], dx
		jmp	loc_40B674
; ---------------------------------------------------------------------------

loc_40BC2D:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	edx, [ebx+14h]	; jumptable 0040B73E case 34
		cmp	edx, [ebx+18h]
		jge	loc_40BCC5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_40BD59
		mov	dword ptr [eax], 23h
		mov	edx, offset off_41B5C4
		mov	dword ptr [eax+4], offset off_41B5C4
		jmp	loc_40BA85
; ---------------------------------------------------------------------------

loc_40BC67:				; CODE XREF: sub_40B640+FEj
					; DATA XREF: .rdata:off_41AC7Co
		mov	edx, [ebx+14h]	; jumptable 0040B73E case 32
		cmp	edx, [ebx+18h]
		jge	short loc_40BCC5
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_40BD59
		mov	dword ptr [eax], 23h
		mov	edx, offset off_41B588
		mov	dword ptr [eax+4], offset off_41B588
		jmp	loc_40BA85
; ---------------------------------------------------------------------------
		align 10h

loc_40BCA0:				; CODE XREF: sub_40B640+2BBj
		lea	eax, [ecx+ecx*2]
		add	ecx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], ecx
		test	eax, eax
		jz	loc_40BD61
		mov	dword ptr [eax], 23h
		mov	[eax+4], edx
		jmp	loc_40B909
; ---------------------------------------------------------------------------

loc_40BCC5:				; CODE XREF: sub_40B640+416j
					; sub_40B640+477j ...
		mov	edx, large ds:4
		xor	eax, eax
		jmp	loc_40BA85
; ---------------------------------------------------------------------------

loc_40BCD2:				; CODE XREF: sub_40B640+1D5j
		mov	eax, ebx
		call	sub_40C3D0
		test	eax, eax
		jz	loc_40B674
		cmp	dword ptr [eax], 16h
		mov	[esp+3Ch+var_20], eax
		jnz	loc_40B6C0
		xchg	ax, ax
		jmp	loc_40B674
; ---------------------------------------------------------------------------

loc_40BCF5:				; CODE XREF: sub_40B640+34Aj
		mov	eax, ebx
		call	sub_40B300
		test	eax, eax
		mov	esi, eax
		jnz	loc_40B9B1
		xor	eax, eax
		jmp	loc_40B8A6
; ---------------------------------------------------------------------------

loc_40BD0D:				; CODE XREF: sub_40B640+2AFj
		mov	edx, [edx+4]
		xor	eax, eax
		jmp	loc_40B909
; ---------------------------------------------------------------------------

loc_40BD17:				; CODE XREF: sub_40B640+5A1j
		mov	eax, ebx
		call	sub_40AD90
		mov	esi, [esp+3Ch+var_20]
		jmp	loc_40BBE7
; ---------------------------------------------------------------------------

loc_40BD27:				; CODE XREF: sub_40B640+3AAj
		add	ecx, 2
		mov	[ebx+0Ch], ecx
		jmp	loc_40B9F0
; ---------------------------------------------------------------------------

loc_40BD32:				; CODE XREF: sub_40B640+3ECj
		mov	edx, [esp+3Ch+var_24]
		test	edx, edx
		jz	loc_40B96E
		mov	eax, [ebx+20h]
		cmp	eax, [ebx+24h]
		jge	loc_40B96E
		mov	ecx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[ecx+eax*4], edx
		jmp	loc_40BA32
; ---------------------------------------------------------------------------

loc_40BD59:				; CODE XREF: sub_40B640+42Dj
					; sub_40B640+48Ej ...
		mov	edx, [eax+4]
		jmp	loc_40BA85
; ---------------------------------------------------------------------------

loc_40BD61:				; CODE XREF: sub_40B640+671j
		mov	edx, [eax+4]
		jmp	loc_40B909
sub_40B640	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40BD70	proc near		; CODE XREF: sub_40B640+3B7p
					; sub_40C6E0+71p

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	edx, [eax+0Ch]
		cmp	byte ptr [edx],	4Ah
		jz	loc_40BE20

loc_40BD87:				; CODE XREF: sub_40BD70+BBj
		mov	[esp+3Ch+var_20], 0
		lea	ebp, [esp+3Ch+var_20]
		xor	edi, edi
		jmp	short loc_40BD9E
; ---------------------------------------------------------------------------

loc_40BD97:				; CODE XREF: sub_40BD70+46j
		mov	edx, [ebx+0Ch]
		xor	esi, esi
		mov	edi, eax

loc_40BD9E:				; CODE XREF: sub_40BD70+25j
		movzx	eax, byte ptr [edx]
		cmp	al, 45h
		jz	short loc_40BDE1

loc_40BDA5:				; CODE XREF: sub_40BD70+6Fj
		test	al, al
		jz	short loc_40BDE1
		mov	eax, ebx
		call	sub_40B640
		test	eax, eax
		jz	short loc_40BE10
		test	esi, esi
		jnz	short loc_40BD97
		mov	ecx, eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_40ACB0
		test	eax, eax
		mov	[ebp+0], eax
		jz	short loc_40BE10
		mov	edx, [ebx+0Ch]
		lea	ebp, [eax+8]
		movzx	eax, byte ptr [edx]
		cmp	al, 45h
		jnz	short loc_40BDA5

loc_40BDE1:				; CODE XREF: sub_40BD70+33j
					; sub_40BD70+37j
		mov	eax, [esp+3Ch+var_20]
		test	eax, eax
		jz	short loc_40BE10
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_40BE30

loc_40BDF0:				; CODE XREF: sub_40BD70+C6j
					; sub_40BD70+CFj ...
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, edi
		mov	eax, ebx
		mov	edx, 25h
		call	sub_40ACB0
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40BE10:				; CODE XREF: sub_40BD70+42j
					; sub_40BD70+62j ...
		add	esp, 2Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40BE20:				; CODE XREF: sub_40BD70+11j
		add	edx, 1
		mov	esi, 1
		mov	[eax+0Ch], edx
		jmp	loc_40BD87
; ---------------------------------------------------------------------------

loc_40BE30:				; CODE XREF: sub_40BD70+7Ej
		mov	edx, [eax+4]
		cmp	dword ptr [edx], 23h
		jnz	short loc_40BDF0
		mov	edx, [edx+4]
		cmp	dword ptr [edx+10h], 9
		jnz	short loc_40BDF0
		mov	eax, [edx+4]
		sub	[ebx+30h], eax
		xor	eax, eax
		mov	[esp+3Ch+var_20], 0
		jmp	short loc_40BDF0
sub_40BD70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40BE60	proc near		; CODE XREF: sub_40B300+ECp
					; sub_40BFE0+55p

var_4C		= dword	ptr -4Ch
var_2D		= byte ptr -2Dh
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_20], eax
		mov	eax, [eax+0Ch]
		movzx	ebp, byte ptr [eax]
		mov	ecx, ebp
		test	cl, cl
		jz	short loc_40BEA6
		mov	ebx, [esp+4Ch+var_20]
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	ebx, byte ptr [eax+1]
		test	bl, bl
		jz	short loc_40BE95
		mov	esi, [esp+4Ch+var_20]
		add	eax, 2
		mov	[esi+0Ch], eax

loc_40BE95:				; CODE XREF: sub_40BE60+29j
		mov	eax, ebp
		cmp	al, 76h
		jnz	short loc_40BF15
		lea	eax, [ebx-30h]
		cmp	al, 9
		jbe	loc_40BF50

loc_40BEA6:				; CODE XREF: sub_40BE60+17j
					; sub_40BE60+B8j ...
		mov	esi, 34h
		xor	eax, eax
		mov	edi, ebx
		nop

loc_40BEB0:				; CODE XREF: sub_40BE60+9Cj
		mov	edx, esi
		sub	edx, eax
		mov	ecx, edx
		shr	ecx, 1Fh
		lea	edx, [ecx+edx]
		sar	edx, 1
		add	edx, eax
		mov	ecx, edx
		shl	ecx, 4
		lea	ebx, off_41B980[ecx]
		mov	ecx, ds:off_41B980[ecx]
		mov	[esp+4Ch+var_24], ebx
		movzx	ebx, byte ptr [ecx]
		mov	[esp+4Ch+var_2D], bl
		mov	ebx, ebp
		cmp	bl, [esp+4Ch+var_2D]
		jnz	short loc_40BF08
		movzx	ecx, byte ptr [ecx+1]
		mov	ebx, edi
		cmp	bl, cl
		jz	loc_40BFA0
		mov	ebx, edi
		cmp	cl, bl
		jle	short loc_40BF10

loc_40BEF8:				; CODE XREF: sub_40BE60+AEj
		mov	esi, edx

loc_40BEFA:				; CODE XREF: sub_40BE60+B3j
		cmp	eax, esi
		jnz	short loc_40BEB0

loc_40BEFE:				; CODE XREF: sub_40BE60+105j
					; sub_40BE60+11Cj ...
		xor	eax, eax

loc_40BF00:				; CODE XREF: sub_40BE60+118j
					; sub_40BE60+134j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40BF08:				; CODE XREF: sub_40BE60+82j
		mov	ecx, ebp
		cmp	[esp+4Ch+var_2D], cl
		jg	short loc_40BEF8

loc_40BF10:				; CODE XREF: sub_40BE60+96j
		lea	eax, [edx+1]
		jmp	short loc_40BEFA
; ---------------------------------------------------------------------------

loc_40BF15:				; CODE XREF: sub_40BE60+39j
		cmp	bl, 76h
		jnz	short loc_40BEA6
		mov	eax, ebp
		cmp	al, 63h
		xchg	ax, ax
		jnz	short loc_40BEA6
		mov	eax, [esp+4Ch+var_20]
		call	sub_40B640
		mov	edx, 2Dh
		mov	[esp+4Ch+var_4C], 0
		mov	ecx, eax
		mov	eax, [esp+4Ch+var_20]
		call	sub_40ACB0
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40BF50:				; CODE XREF: sub_40BE60+40j
		mov	eax, [esp+4Ch+var_20]
		call	sub_40B230
		mov	esi, [esp+4Ch+var_20]
		mov	edx, [esi+14h]
		cmp	edx, [esi+18h]
		mov	ecx, eax
		jge	short loc_40BEFE
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [esi+10h]
		mov	[esi+14h], edx
		test	eax, eax
		jz	short loc_40BF00
		test	ecx, ecx
		jz	loc_40BEFE
		movsx	edx, bl
		sub	edx, 30h
		mov	dword ptr [eax], 2Ch
		mov	[eax+4], edx
		mov	[eax+8], ecx
		jmp	loc_40BF00
; ---------------------------------------------------------------------------
		align 10h

loc_40BFA0:				; CODE XREF: sub_40BE60+8Cj
		mov	esi, [esp+4Ch+var_20]
		mov	edx, [esi+14h]
		cmp	edx, [esi+18h]
		jge	loc_40BEFE
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [esi+10h]
		mov	[esi+14h], edx
		test	eax, eax
		jz	loc_40BF00
		mov	edx, [esp+4Ch+var_24]
		mov	dword ptr [eax], 2Bh
		mov	[eax+4], edx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_40BE60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40BFE0	proc near		; CODE XREF: sub_40B300+44p
					; sub_40B300+1E1p ...
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_40C054
		lea	ecx, [eax-61h]
		cmp	cl, 19h
		jbe	short loc_40C033
		lea	ecx, [eax-43h]
		cmp	cl, 1
		ja	loc_40C0C1
		mov	ecx, [ebx+2Ch]
		test	ecx, ecx
		jz	short loc_40C01F
		mov	esi, [ecx]
		test	esi, esi
		jnz	short loc_40C060

loc_40C016:				; CODE XREF: sub_40BFE0+83j
		mov	eax, [ecx+8]
		add	[ebx+30h], eax
		movzx	eax, byte ptr [edx]

loc_40C01F:				; CODE XREF: sub_40BFE0+2Ej
		cmp	al, 43h
		jz	short loc_40C069

loc_40C023:				; CODE XREF: sub_40BFE0+87j
		cmp	al, 44h
		jz	loc_40C0F0

loc_40C02B:				; CODE XREF: sub_40BFE0+A0j
					; sub_40BFE0+B3j ...
		xor	eax, eax

loc_40C02D:				; CODE XREF: sub_40BFE0+5Cj
					; sub_40BFE0+61j ...
		add	esp, 4
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40C033:				; CODE XREF: sub_40BFE0+1Bj
		mov	eax, ebx
		call	sub_40BE60
		test	eax, eax
		jz	short loc_40C02D
		cmp	dword ptr [eax], 2Bh
		jnz	short loc_40C02D
		mov	ecx, [eax+4]
		mov	edx, [ebx+30h]
		add	edx, [ecx+8]
		add	edx, 7
		mov	[ebx+30h], edx
		jmp	short loc_40C02D
; ---------------------------------------------------------------------------

loc_40C054:				; CODE XREF: sub_40BFE0+13j
		add	esp, 4
		mov	eax, ebx
		pop	ebx
		pop	esi
		jmp	sub_40B230
; ---------------------------------------------------------------------------

loc_40C060:				; CODE XREF: sub_40BFE0+34j
		cmp	esi, 16h
		jz	short loc_40C016
		cmp	al, 43h
		jnz	short loc_40C023

loc_40C069:				; CODE XREF: sub_40BFE0+41j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 32h
		nop
		jz	loc_40C190
		cmp	al, 33h
		jz	loc_40C182
		cmp	al, 31h
		jnz	short loc_40C02B
		mov	esi, 1

loc_40C087:				; CODE XREF: sub_40BFE0+1A7j
					; sub_40BFE0+1B5j
		add	edx, 2
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		cmp	edx, [ebx+18h]
		jge	short loc_40C02B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	short loc_40C02B
		test	ecx, ecx
		jz	loc_40C02B
		mov	dword ptr [eax], 7
		mov	[eax+4], esi
		mov	[eax+8], ecx
		jmp	loc_40C02D
; ---------------------------------------------------------------------------

loc_40C0C1:				; CODE XREF: sub_40BFE0+23j
		cmp	al, 4Ch
		jnz	loc_40C02B
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_40B230
		test	eax, eax
		mov	esi, eax
		jz	loc_40C02B
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jz	short loc_40C14D
		mov	eax, esi
		jmp	loc_40C02D
; ---------------------------------------------------------------------------
		align 10h

loc_40C0F0:				; CODE XREF: sub_40BFE0+45j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 31h
		jz	short loc_40C177
		cmp	al, 32h
		jz	short loc_40C170
		cmp	al, 30h
		xchg	ax, ax
		jnz	loc_40C02B
		mov	esi, 1

loc_40C10B:				; CODE XREF: sub_40BFE0+195j
					; sub_40BFE0+1A0j
		add	edx, 2
		mov	[ebx+0Ch], edx
		mov	edx, [ebx+14h]
		cmp	edx, [ebx+18h]
		jge	loc_40C02B
		lea	eax, [edx+edx*2]
		add	edx, 1
		shl	eax, 2
		add	eax, [ebx+10h]
		mov	[ebx+14h], edx
		test	eax, eax
		jz	loc_40C02B
		test	ecx, ecx
		jz	loc_40C02B
		mov	dword ptr [eax], 8
		mov	[eax+4], esi
		mov	[eax+8], ecx
		jmp	loc_40C02D
; ---------------------------------------------------------------------------

loc_40C14D:				; CODE XREF: sub_40BFE0+106j
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_40AD90
		test	eax, eax
		js	loc_40C02B
		mov	eax, esi
		jmp	loc_40C02D
; ---------------------------------------------------------------------------
		align 10h

loc_40C170:				; CODE XREF: sub_40BFE0+11Aj
		mov	esi, 3
		jmp	short loc_40C10B
; ---------------------------------------------------------------------------

loc_40C177:				; CODE XREF: sub_40BFE0+116j
		mov	esi, 2
		lea	esi, [esi+0]
		jmp	short loc_40C10B
; ---------------------------------------------------------------------------

loc_40C182:				; CODE XREF: sub_40BFE0+98j
		mov	esi, 3
		jmp	loc_40C087
; ---------------------------------------------------------------------------
		align 10h

loc_40C190:				; CODE XREF: sub_40BFE0+90j
		mov	esi, 2
		jmp	loc_40C087
sub_40BFE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40C1A0	proc near		; CODE XREF: sub_40B300+16Cj
					; sub_40C2D0+ADp

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+1Ch+var_8], esi
		mov	[esp+1Ch+var_4], edi
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	4Ch
		jz	short loc_40C1D0

loc_40C1B9:				; CODE XREF: sub_40C1A0+5Dj
					; sub_40C1A0+9Bj ...
		xor	eax, eax
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40C1D0:				; CODE XREF: sub_40C1A0+17j
		lea	edi, [eax+1]
		mov	[ebx+0Ch], edi
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 5Fh
		setz	cl
		cmp	dl, 5Ah
		jnz	short loc_40C215

loc_40C1E5:				; CODE XREF: sub_40C1A0+8Aj
		lea	ecx, [edi+1]
		xor	edx, edx
		mov	[ebx+0Ch], ecx
		mov	eax, ebx
		call	sub_40C6E0
		mov	edi, [ebx+0Ch]
		movzx	edx, byte ptr [edi]

loc_40C1FA:				; CODE XREF: sub_40C1A0+88j
					; sub_40C1A0+F8j
		cmp	dl, 45h
		jnz	short loc_40C1B9
		lea	ecx, [edi+1]
		mov	[ebx+0Ch], ecx
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_40C215:				; CODE XREF: sub_40C1A0+43j
		test	cl, cl
		jz	short loc_40C230
		lea	edi, [eax+2]
		mov	[ebx+0Ch], edi
		movzx	edx, byte ptr [eax+2]
		xor	eax, eax
		cmp	dl, 5Ah
		jnz	short loc_40C1FA
		jmp	short loc_40C1E5
; ---------------------------------------------------------------------------
		align 10h

loc_40C230:				; CODE XREF: sub_40C1A0+77j
		mov	eax, ebx
		call	sub_40B640
		test	eax, eax
		mov	esi, eax
		jz	loc_40C1B9
		cmp	dword ptr [eax], 23h
		jz	short loc_40C2A0

loc_40C246:				; CODE XREF: sub_40C1A0+108j
					; sub_40C1A0+110j
		mov	edx, [ebx+0Ch]
		mov	edi, 34h
		movzx	eax, byte ptr [edx]
		cmp	al, 6Eh
		jz	short loc_40C2B2

loc_40C255:				; CODE XREF: sub_40C1A0+11Fj
		xor	ecx, ecx
		cmp	al, 45h
		jz	short loc_40C27D
		test	al, al
		mov	ecx, edx
		jnz	short loc_40C26E
		jmp	loc_40C1B9
; ---------------------------------------------------------------------------

loc_40C266:				; CODE XREF: sub_40C1A0+D9j
		test	al, al
		jz	loc_40C1B9

loc_40C26E:				; CODE XREF: sub_40C1A0+BFj
		add	ecx, 1
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		cmp	al, 45h
		jnz	short loc_40C266
		sub	ecx, edx

loc_40C27D:				; CODE XREF: sub_40C1A0+B9j
		mov	eax, ebx
		call	sub_40AD30
		mov	edx, edi
		mov	ecx, esi
		mov	[esp+1Ch+var_1C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	edi, [ebx+0Ch]
		movzx	edx, byte ptr [edi]
		jmp	loc_40C1FA
; ---------------------------------------------------------------------------
		align 10h

loc_40C2A0:				; CODE XREF: sub_40C1A0+A4j
		mov	eax, [eax+4]
		mov	ecx, [eax+10h]
		test	ecx, ecx
		jz	short loc_40C246
		mov	eax, [eax+4]
		sub	[ebx+30h], eax
		jmp	short loc_40C246
; ---------------------------------------------------------------------------

loc_40C2B2:				; CODE XREF: sub_40C1A0+B3j
		add	edx, 1
		mov	di, 35h
		mov	[ebx+0Ch], edx
		movzx	eax, byte ptr [edx]
		jmp	short loc_40C255
sub_40C1A0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_40C2D0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40C2D0	proc near		; CODE XREF: sub_40B300+243p
					; sub_40B300+30Ep ...

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 20h
		mov	edi, [eax+2Ch]
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	49h
		jz	short loc_40C2F0

loc_40C2E3:				; CODE XREF: sub_40C2D0+77j
					; sub_40C2D0+92j ...
		add	esp, 20h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40C2F0:				; CODE XREF: sub_40C2D0+11j
		lea	ecx, [eax+1]
		mov	[ebx+0Ch], ecx
		cmp	byte ptr [eax+1], 45h
		jnz	short loc_40C320
		add	eax, 2
		xor	ecx, ecx
		mov	[ebx+0Ch], eax
		mov	edx, 2Ah
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_40ACB0
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40C320:				; CODE XREF: sub_40C2D0+2Aj
		mov	[esp+2Ch+var_10], 0
		lea	esi, [esp+2Ch+var_10]
		movzx	edx, byte ptr [eax+1]
		jmp	short loc_40C376
; ---------------------------------------------------------------------------

loc_40C332:				; CODE XREF: sub_40C2D0+A9j
		cmp	dl, 58h
		jz	short loc_40C392
		cmp	dl, 49h
		jz	short loc_40C384
		mov	eax, ebx
		xchg	ax, ax
		call	sub_40B640

loc_40C345:				; CODE XREF: sub_40C2D0+B2j
					; sub_40C2D0+C0j ...
		test	eax, eax
		jz	short loc_40C2E3
		mov	ecx, eax
		mov	edx, 2Ah
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_40ACB0
		test	eax, eax
		mov	[esi], eax
		jz	loc_40C2E3
		mov	ecx, [ebx+0Ch]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 45h
		jz	short loc_40C3B3
		lea	esi, [eax+8]

loc_40C376:				; CODE XREF: sub_40C2D0+60j
		cmp	dl, 4Ch
		jnz	short loc_40C332
		mov	eax, ebx
		call	sub_40C1A0
		jmp	short loc_40C345
; ---------------------------------------------------------------------------

loc_40C384:				; CODE XREF: sub_40C2D0+6Aj
		mov	eax, ebx
		call	sub_40C2D0
		nop
		lea	esi, [esi+0]
		jmp	short loc_40C345
; ---------------------------------------------------------------------------

loc_40C392:				; CODE XREF: sub_40C2D0+65j
		add	ecx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], ecx
		call	sub_40B300
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	loc_40C2E3
		add	edx, 1
		mov	[ebx+0Ch], edx
		jmp	short loc_40C345
; ---------------------------------------------------------------------------

loc_40C3B3:				; CODE XREF: sub_40C2D0+A1j
		add	ecx, 1
		mov	[ebx+2Ch], edi
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+0Ch], ecx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_40C2D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40C3D0	proc near		; CODE XREF: sub_40B640+9Ap
					; sub_40B640+694p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	edx, [eax+0Ch]
		movzx	eax, byte ptr [edx]
		cmp	al, 4Eh
		jz	loc_40C4E0
		jle	short loc_40C420
		cmp	al, 53h
		jz	short loc_40C463
		cmp	al, 5Ah
		nop
		jnz	short loc_40C424
		add	edx, 1
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		xor	edx, edx
		call	sub_40C6E0
		mov	esi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	45h
		jz	loc_40C5B3

loc_40C40F:				; CODE XREF: sub_40C3D0+6Fj
					; sub_40C3D0+12Aj ...
		xor	esi, esi

loc_40C411:				; CODE XREF: sub_40C3D0+63j
					; sub_40C3D0+67j ...
		add	esp, 2Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40C420:				; CODE XREF: sub_40C3D0+17j
		cmp	al, 4Ch
		jz	short loc_40C450

loc_40C424:				; CODE XREF: sub_40C3D0+20j
		mov	eax, ebx
		call	sub_40BFE0
		mov	esi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jnz	short loc_40C411

loc_40C435:				; CODE XREF: sub_40C3D0+B3j
		test	esi, esi
		jz	short loc_40C411
		mov	eax, [ebx+20h]
		cmp	eax, [ebx+24h]
		jge	short loc_40C40F
		mov	edx, [ebx+1Ch]
		add	dword ptr [ebx+20h], 1
		mov	[edx+eax*4], esi
		jmp	short loc_40C485
; ---------------------------------------------------------------------------
		align 10h

loc_40C450:				; CODE XREF: sub_40C3D0+52j
		mov	eax, ebx
		call	sub_40BFE0
		add	esp, 2Ch
		pop	ebx
		mov	esi, eax
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40C463:				; CODE XREF: sub_40C3D0+1Bj
		cmp	byte ptr [edx+1], 74h
		jz	short loc_40C4A4
		xor	edx, edx
		mov	eax, ebx
		call	sub_40AF60
		mov	edx, 1
		mov	esi, eax

loc_40C479:				; CODE XREF: sub_40C3D0+10Dj
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	49h
		jnz	short loc_40C411
		test	edx, edx
		jz	short loc_40C435

loc_40C485:				; CODE XREF: sub_40C3D0+7Bj
		mov	eax, ebx
		call	sub_40C2D0
		mov	ecx, esi
		mov	edx, 4
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C411
; ---------------------------------------------------------------------------

loc_40C4A4:				; CODE XREF: sub_40C3D0+97j
		add	edx, 2
		mov	eax, ebx
		mov	[ebx+0Ch], edx
		call	sub_40BFE0
		mov	ecx, 3
		mov	edx, offset aStd ; "std"
		mov	esi, eax
		mov	eax, ebx
		call	sub_40AD30
		mov	edx, 1
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		xor	edx, edx
		add	dword ptr [ebx+30h], 3
		mov	esi, eax
		jmp	short loc_40C479
; ---------------------------------------------------------------------------
		align 10h

loc_40C4E0:				; CODE XREF: sub_40C3D0+11j
		add	edx, 1
		mov	ecx, 1
		mov	[ebx+0Ch], edx
		mov	eax, ebx
		lea	edx, [esp+3Ch+var_20]
		call	sub_40AE50
		test	eax, eax
		mov	ebp, eax
		jz	loc_40C40F
		mov	edx, [ebx+0Ch]
		xor	edi, edi
		movzx	esi, byte ptr [edx]

loc_40C508:				; CODE XREF: sub_40C3D0+238j
					; sub_40C3D0+25Fj
		mov	eax, esi
		test	al, al
		jz	loc_40C5A0
		lea	eax, [esi-61h]
		cmp	al, 19h
		jbe	loc_40C610
		lea	eax, [esi-30h]
		cmp	al, 9
		jbe	loc_40C610
		mov	eax, esi
		cmp	al, 44h
		jz	loc_40C610
		cmp	al, 43h
		jz	loc_40C610
		cmp	al, 4Ch
		jz	loc_40C610
		mov	eax, esi
		cmp	al, 53h
		jz	loc_40C634
		mov	eax, esi
		cmp	al, 49h
		jz	loc_40C645
		mov	eax, esi
		cmp	al, 54h
		jnz	loc_40C65F
		mov	eax, ebx
		call	sub_40AEF0

loc_40C567:				; CODE XREF: sub_40C3D0+247j
					; sub_40C3D0+270j
		test	edi, edi
		jz	short loc_40C57C
		mov	edx, 1

loc_40C570:				; CODE XREF: sub_40C3D0+28Aj
		mov	[esp+3Ch+var_3C], eax
		mov	ecx, edi
		mov	eax, ebx
		call	sub_40ACB0

loc_40C57C:				; CODE XREF: sub_40C3D0+199j
		mov	edx, esi
		cmp	dl, 53h
		jz	short loc_40C600
		mov	edx, [ebx+0Ch]
		mov	esi, 45h
		cmp	byte ptr [edx],	45h
		jz	short loc_40C606
		test	eax, eax
		jz	short loc_40C5A0
		mov	ecx, [ebx+20h]
		cmp	ecx, [ebx+24h]
		jl	loc_40C620

loc_40C5A0:				; CODE XREF: sub_40C3D0+13Cj
					; sub_40C3D0+1C2j ...
		xor	esi, esi
		mov	dword ptr [ebp+0], 0
		mov	eax, esi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40C5B3:				; CODE XREF: sub_40C3D0+39j
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+1], 73h
		jnz	loc_40C68C
		lea	edx, [eax+2]
		mov	[ebx+0Ch], edx
		cmp	byte ptr [eax+2], 5Fh
		jz	loc_40C6BD

loc_40C5D3:				; CODE XREF: sub_40C3D0+2FCj
		mov	ecx, 0Eh
		mov	edx, offset aStringLiteral ; "string literal"
		mov	eax, ebx
		call	sub_40AD30
		mov	[esp+3Ch+var_3C], eax

loc_40C5E7:				; CODE XREF: sub_40C3D0+2D0j
		mov	ecx, esi
		mov	edx, 2
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C411
; ---------------------------------------------------------------------------
		align 10h

loc_40C600:				; CODE XREF: sub_40C3D0+1B1j
		mov	edx, [ebx+0Ch]
		movzx	esi, byte ptr [edx]

loc_40C606:				; CODE XREF: sub_40C3D0+1BEj
		mov	edi, eax
		jmp	loc_40C508
; ---------------------------------------------------------------------------
		align 10h

loc_40C610:				; CODE XREF: sub_40C3D0+147j
					; sub_40C3D0+152j ...
		mov	eax, ebx
		call	sub_40BFE0
		jmp	loc_40C567
; ---------------------------------------------------------------------------
		align 10h

loc_40C620:				; CODE XREF: sub_40C3D0+1CAj
		mov	esi, [ebx+1Ch]
		mov	edi, eax
		add	dword ptr [ebx+20h], 1
		mov	[esi+ecx*4], eax
		movzx	esi, byte ptr [edx]
		jmp	loc_40C508
; ---------------------------------------------------------------------------

loc_40C634:				; CODE XREF: sub_40C3D0+176j
		mov	edx, 1
		mov	eax, ebx
		call	sub_40AF60
		jmp	loc_40C567
; ---------------------------------------------------------------------------

loc_40C645:				; CODE XREF: sub_40C3D0+180j
		test	edi, edi
		jz	loc_40C5A0
		mov	eax, ebx
		nop
		call	sub_40C2D0
		mov	edx, 4
		jmp	loc_40C570
; ---------------------------------------------------------------------------

loc_40C65F:				; CODE XREF: sub_40C3D0+18Aj
		mov	eax, esi
		cmp	al, 45h
		jnz	loc_40C5A0
		test	edi, edi
		mov	[ebp+0], edi
		jz	loc_40C40F
		cmp	byte ptr [edx],	45h
		jnz	loc_40C40F
		add	edx, 1
		mov	esi, [esp+3Ch+var_20]
		mov	[ebx+0Ch], edx
		jmp	loc_40C411
; ---------------------------------------------------------------------------

loc_40C68C:				; CODE XREF: sub_40C3D0+1EDj
		mov	eax, ebx
		call	sub_40C3D0
		mov	edi, eax
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jz	short loc_40C6A5

loc_40C69D:				; CODE XREF: sub_40C3D0+2E4j
		mov	[esp+3Ch+var_3C], edi
		jmp	loc_40C5E7
; ---------------------------------------------------------------------------

loc_40C6A5:				; CODE XREF: sub_40C3D0+2CBj
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_40AD90
		test	eax, eax
		jns	short loc_40C69D
		xor	esi, esi
		jmp	loc_40C411
; ---------------------------------------------------------------------------

loc_40C6BD:				; CODE XREF: sub_40C3D0+1FDj
		add	eax, 3
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_40AD90
		test	eax, eax
		jns	loc_40C5D3
		xor	esi, esi
		jmp	loc_40C411
sub_40C3D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40C6E0	proc near		; CODE XREF: sub_40C1A0+4Fp
					; sub_40C3D0+2Cp ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+3Ch+var_8], edi
		mov	edi, edx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_4], ebp
		mov	eax, [eax+0Ch]
		movzx	edx, byte ptr [eax]
		cmp	dl, 54h
		jz	loc_40C7B5
		cmp	dl, 47h
		jz	loc_40C7B5
		mov	eax, ebx
		call	sub_40C3D0
		test	eax, eax
		mov	esi, eax
		jnz	short loc_40C770

loc_40C71C:				; CODE XREF: sub_40C6E0+92j
					; sub_40C6E0+98j
		mov	eax, [ebx+0Ch]
		test	esi, esi
		movzx	eax, byte ptr [eax]
		jz	loc_40C7D1
		test	al, al
		jz	loc_40C7D1
		cmp	al, 45h
		jz	loc_40C7D1
		mov	eax, esi

loc_40C73C:				; CODE XREF: sub_40C6E0+118j
		mov	edx, [eax]
		cmp	edx, 4
		jz	loc_40C880
		jnb	loc_40C7E7

loc_40C74D:				; CODE XREF: sub_40C6E0+10Dj
					; sub_40C6E0+120j ...
		xor	edx, edx	; jumptable 0040C898 cases 7,8,45

loc_40C74F:				; CODE XREF: sub_40C6E0+1B1j
		mov	eax, ebx
		call	sub_40BD70
		mov	ecx, esi
		mov	edx, 3
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	short loc_40C7D1
; ---------------------------------------------------------------------------
		align 10h

loc_40C770:				; CODE XREF: sub_40C6E0+3Aj
		test	edi, edi
		jz	short loc_40C71C
		test	byte ptr [ebx+8], 1
		jnz	short loc_40C71C
		mov	eax, [esi]
		lea	edx, [eax-1Ah]
		cmp	edx, 2
		ja	short loc_40C791

loc_40C784:				; CODE XREF: sub_40C6E0+AFj
		mov	esi, [esi+4]
		mov	eax, [esi]
		lea	edx, [eax-1Ah]
		cmp	edx, 2
		jbe	short loc_40C784

loc_40C791:				; CODE XREF: sub_40C6E0+A2j
		cmp	eax, 2
		jnz	short loc_40C7D1
		mov	eax, [esi+8]
		mov	edx, [eax]
		sub	edx, 1Ah
		cmp	edx, 2
		ja	short loc_40C7B0

loc_40C7A3:				; CODE XREF: sub_40C6E0+CEj
		mov	eax, [eax+4]
		mov	edx, [eax]
		sub	edx, 1Ah
		cmp	edx, 2
		jbe	short loc_40C7A3

loc_40C7B0:				; CODE XREF: sub_40C6E0+C1j
		mov	[esi+8], eax
		jmp	short loc_40C7D1
; ---------------------------------------------------------------------------

loc_40C7B5:				; CODE XREF: sub_40C6E0+20j
					; sub_40C6E0+29j
		mov	ecx, [ebx+30h]
		add	ecx, 14h
		mov	[ebx+30h], ecx
		movzx	edx, byte ptr [eax]
		cmp	dl, 54h
		jz	loc_40C852
		cmp	dl, 47h
		jz	short loc_40C805

loc_40C7CF:				; CODE XREF: sub_40C6E0+131j
					; sub_40C6E0+14Bj ...
		xor	esi, esi	; jumptable 0040C879 default case

loc_40C7D1:				; CODE XREF: sub_40C6E0+44j
					; sub_40C6E0+4Cj ...
		mov	eax, esi
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_40C7E7:				; CODE XREF: sub_40C6E0+67j
		sub	edx, 1Ah
		cmp	edx, 2
		ja	loc_40C74D	; jumptable 0040C898 cases 7,8,45
		mov	eax, [eax+4]
		test	eax, eax
		jnz	loc_40C73C
		xchg	ax, ax
		jmp	loc_40C74D	; jumptable 0040C898 cases 7,8,45
; ---------------------------------------------------------------------------

loc_40C805:				; CODE XREF: sub_40C6E0+EDj
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	short loc_40C7CF ; jumptable 0040C879 default case
		add	eax, 2
		cmp	dl, 52h
		mov	[ebx+0Ch], eax
		jz	loc_40CA9B
		jg	loc_40CABE
		cmp	dl, 41h
		jnz	short loc_40C7CF ; jumptable 0040C879 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_40C6E0
		mov	edx, 15h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40C852:				; CODE XREF: sub_40C6E0+E4j
		lea	edx, [eax+1]
		mov	[ebx+0Ch], edx
		movzx	edx, byte ptr [eax+1]
		test	dl, dl
		jz	loc_40C7CF	; jumptable 0040C879 default case
		sub	edx, 43h
		add	eax, 2
		cmp	dl, 33h		; switch 52 cases
		mov	[ebx+0Ch], eax
		ja	loc_40C7CF	; jumptable 0040C879 default case
		movzx	edx, dl
		jmp	ds:off_41AD4C[edx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_40C880:				; CODE XREF: sub_40C6E0+61j
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_40C88C ; jumptable 0040C898 default case

loc_40C887:				; CODE XREF: sub_40C6E0+1C5j
		cmp	dword ptr [eax], 2Dh ; switch 46 cases
		jbe	short loc_40C896

loc_40C88C:				; CODE XREF: sub_40C6E0+1A5j
					; sub_40C6E0+1B8j ...
		mov	edx, 1		; jumptable 0040C898 default case
		jmp	loc_40C74F
; ---------------------------------------------------------------------------

loc_40C896:				; CODE XREF: sub_40C6E0+1AAj
		mov	edx, [eax]
		jmp	ds:off_41AE1C[edx*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_40C8A0:				; CODE XREF: sub_40C6E0+1B8j
					; DATA XREF: .rdata:off_41AE1Co
		mov	eax, [eax+8]	; jumptable 0040C898 cases 1,2
		test	eax, eax
		jnz	short loc_40C887
		jmp	short loc_40C88C ; jumptable 0040C898 default case
; ---------------------------------------------------------------------------
		align 10h

loc_40C8B0:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		mov	edx, 76h	; jumptable 0040C879 case 51
		mov	eax, ebx
		call	sub_40ADF0
		test	eax, eax
		xchg	ax, ax
		jz	loc_40C7CF	; jumptable 0040C879 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_40C6E0
		mov	edx, 10h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40C8EB:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		mov	edx, 68h	; jumptable 0040C879 case 37
		mov	eax, ebx
		call	sub_40ADF0
		test	eax, eax
		jz	loc_40C7CF	; jumptable 0040C879 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_40C6E0
		mov	edx, 0Fh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40C924:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		xor	edx, edx	; jumptable 0040C879 case 32
		mov	eax, ebx
		call	sub_40ADF0
		test	eax, eax
		jz	loc_40C7CF	; jumptable 0040C879 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_40ADF0
		test	eax, eax
		jz	loc_40C7CF	; jumptable 0040C879 default case
		xor	edx, edx
		mov	eax, ebx
		call	sub_40C6E0
		mov	edx, 11h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------
		align 10h

loc_40C970:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		sub	ecx, 5		; jumptable 0040C879 case 19
		mov	eax, ebx
		mov	[ebx+30h], ecx
		call	sub_40B640
		mov	edx, 9
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40C999:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		sub	ecx, 0Ah	; jumptable 0040C879 case 17
		mov	eax, ebx
		mov	[ebx+30h], ecx
		call	sub_40B640
		mov	edx, 0Ah
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40C9C2:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		mov	eax, ebx	; jumptable 0040C879 case 16
		call	sub_40B640
		mov	edx, 0Dh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40C9E5:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		mov	eax, ebx	; jumptable 0040C879 case 7
		call	sub_40B640
		mov	edx, 12h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40CA08:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		mov	eax, ebx	; jumptable 0040C879 case 6
		call	sub_40B640
		mov	edx, 0Ch
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40CA2B:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		mov	eax, ebx	; jumptable 0040C879 case 3
		call	sub_40B640
		mov	edx, 0Eh
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40CA4E:				; CODE XREF: sub_40C6E0+199j
					; DATA XREF: .rdata:off_41AD4Co
		mov	eax, ebx	; jumptable 0040C879 case 0
		call	sub_40B640
		mov	esi, eax
		mov	eax, ebx
		call	sub_40AD90
		test	eax, eax
		js	loc_40C7CF	; jumptable 0040C879 default case
		mov	eax, [ebx+0Ch]
		cmp	byte ptr [eax],	5Fh
		jnz	loc_40C7CF	; jumptable 0040C879 default case
		add	eax, 1
		mov	[ebx+0Ch], eax
		mov	eax, ebx
		call	sub_40B640
		mov	edx, 0Bh
		add	dword ptr [ebx+30h], 5
		mov	[esp+3Ch+var_3C], esi
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40CA9B:				; CODE XREF: sub_40C6E0+13Cj
		mov	eax, ebx
		call	sub_40C3D0
		mov	edx, 14h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40CABE:				; CODE XREF: sub_40C6E0+142j
		cmp	dl, 56h
		jz	loc_40CB65
		cmp	dl, 72h
		jnz	loc_40C7CF	; jumptable 0040C879 default case
		mov	eax, ebx
		call	sub_40AD90
		cmp	eax, 1
		jle	loc_40C7CF	; jumptable 0040C879 default case
		mov	esi, [ebx+0Ch]
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jz	loc_40C7CF	; jumptable 0040C879 default case
		add	esi, 1
		cmp	dl, 5Fh
		mov	[ebx+0Ch], esi
		jnz	loc_40C7CF	; jumptable 0040C879 default case
		lea	ebp, [eax-1]
		mov	[esp+3Ch+var_20], 0

loc_40CB08:				; CODE XREF: sub_40C6E0+483j
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	loc_40C7CF	; jumptable 0040C879 default case
		xor	edi, edi
		cmp	al, 24h
		jnz	short loc_40CB2C
		jmp	short loc_40CB88
; ---------------------------------------------------------------------------
		align 10h

loc_40CB20:				; CODE XREF: sub_40C6E0+451j
		movzx	eax, byte ptr [esi+edi]
		test	al, al
		jz	short loc_40CB33
		cmp	al, 24h
		jz	short loc_40CB33

loc_40CB2C:				; CODE XREF: sub_40C6E0+437j
		add	edi, 1
		cmp	edi, ebp
		jl	short loc_40CB20

loc_40CB33:				; CODE XREF: sub_40C6E0+446j
					; sub_40C6E0+44Aj
		mov	edx, esi
		mov	ecx, edi
		mov	eax, ebx
		call	sub_40AD30
		mov	esi, [ebx+0Ch]
		add	esi, edi
		mov	[ebx+0Ch], esi
		test	eax, eax
		jz	loc_40C7CF	; jumptable 0040C879 default case
		sub	ebp, edi

loc_40CB50:				; CODE XREF: sub_40C6E0+4F8j
		cmp	[esp+3Ch+var_20], 0
		jnz	loc_40CBF9

loc_40CB5B:				; CODE XREF: sub_40C6E0+52Ej
		test	ebp, ebp
		jle	short loc_40CBDD
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_40CB08
; ---------------------------------------------------------------------------

loc_40CB65:				; CODE XREF: sub_40C6E0+3E1j
		mov	eax, ebx
		call	sub_40C3D0
		mov	edx, 13h
		mov	[esp+3Ch+var_3C], 0
		mov	ecx, eax
		mov	eax, ebx
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40CB88:				; CODE XREF: sub_40C6E0+439j
		movzx	eax, byte ptr [esi+1]
		cmp	al, 53h
		jz	loc_40CC2F
		cmp	al, 5Fh
		jz	loc_40CC25
		cmp	al, 24h
		xchg	ax, ax
		jnz	loc_40C7CF	; jumptable 0040C879 default case
		mov	edx, 24h

loc_40CBAB:				; CODE XREF: sub_40C6E0+54Aj
					; sub_40C6E0+554j
		mov	ecx, [ebx+14h]
		cmp	ecx, [ebx+18h]
		jge	short loc_40CC19
		imul	eax, ecx, 0Ch
		add	ecx, 1
		add	eax, [ebx+10h]
		mov	[ebx+14h], ecx
		test	eax, eax
		jz	short loc_40CC19
		mov	[eax+4], edx
		mov	esi, [ebx+0Ch]
		sub	ebp, 2
		mov	dword ptr [eax], 38h
		add	esi, 2
		mov	[ebx+0Ch], esi
		jmp	loc_40CB50
; ---------------------------------------------------------------------------

loc_40CBDD:				; CODE XREF: sub_40C6E0+47Dj
		mov	ecx, eax
		mov	edx, 36h
		mov	eax, ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_40ACB0
		mov	esi, eax
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40CBF9:				; CODE XREF: sub_40C6E0+475j
		mov	ecx, [esp+3Ch+var_20]
		mov	edx, 37h
		mov	[esp+3Ch+var_3C], eax
		mov	eax, ebx
		call	sub_40ACB0
		test	eax, eax
		jnz	loc_40CB5B
		jmp	loc_40C7CF	; jumptable 0040C879 default case
; ---------------------------------------------------------------------------

loc_40CC19:				; CODE XREF: sub_40C6E0+4D1j
					; sub_40C6E0+4E1j
		add	dword ptr [ebx+0Ch], 2
		xor	esi, esi
		nop
		jmp	loc_40C7D1
; ---------------------------------------------------------------------------

loc_40CC25:				; CODE XREF: sub_40C6E0+4B6j
		mov	edx, 2Eh
		jmp	loc_40CBAB
; ---------------------------------------------------------------------------

loc_40CC2F:				; CODE XREF: sub_40C6E0+4AEj
		mov	edx, 2Fh
		jmp	loc_40CBAB
sub_40C6E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40CC40	proc near		; CODE XREF: sub_40B300+2D3p
					; sub_40B300+334p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 24h
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_10], 0
		cmp	byte ptr [eax],	45h
		jnz	short loc_40CC78
		add	eax, 1
		xor	ecx, ecx
		mov	[ebx+0Ch], eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_40ACB0
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40CC78:				; CODE XREF: sub_40CC40+15j
		lea	esi, [esp+2Ch+var_10]
		jmp	short loc_40CC83
; ---------------------------------------------------------------------------
		align 10h

loc_40CC80:				; CODE XREF: sub_40CC40+6Fj
		lea	esi, [eax+8]

loc_40CC83:				; CODE XREF: sub_40CC40+3Cj
		mov	eax, ebx
		call	sub_40B300
		test	eax, eax
		jz	short loc_40CCC1
		mov	ecx, eax
		mov	edx, 29h
		mov	eax, ebx
		mov	[esp+2Ch+var_2C], 0
		call	sub_40ACB0
		test	eax, eax
		mov	[esi], eax
		jz	short loc_40CCC1
		mov	edx, [ebx+0Ch]
		cmp	byte ptr [edx],	45h
		jnz	short loc_40CC80
		add	edx, 1
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+0Ch], edx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40CCC1:				; CODE XREF: sub_40CC40+4Cj
					; sub_40CC40+67j
		add	esp, 24h
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
sub_40CC40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_40CCD0(void *, size_t, int)
sub_40CCD0	proc near		; DATA XREF: sub_40E870+37o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_4], edi
		mov	edi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebx
		mov	eax, [esi+4]
		mov	ebx, [esi+8]
		lea	eax, [edi+eax+1]
		cmp	eax, ebx
		ja	short loc_40CD47

loc_40CCF5:				; CODE XREF: sub_40CCD0+ADj
		mov	ebx, [esi+0Ch]
		test	ebx, ebx
		jz	short loc_40CD10

loc_40CCFC:				; CODE XREF: sub_40CCD0+7Cj
					; sub_40CCD0+D7j
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40CD10:				; CODE XREF: sub_40CCD0+2Aj
		mov	eax, [esi]
		mov	edx, [esp+1Ch+arg_0]
		add	eax, [esi+4]
		mov	[esp+1Ch+var_14], edi ;	size_t
		mov	[esp+1Ch+var_18], edx ;	void *
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	memcpy
		mov	edx, [esi]
		mov	eax, [esi+4]
		add	edx, edi
		mov	byte ptr [edx+eax], 0
		add	[esi+4], edi
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_40CD47:				; CODE XREF: sub_40CCD0+23j
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_40CCFC
		test	ebx, ebx
		jnz	short loc_40CD60
		cmp	eax, 2
		mov	bl, 2
		jbe	short loc_40CD66
		lea	esi, [esi+0]

loc_40CD60:				; CODE XREF: sub_40CCD0+80j
					; sub_40CCD0+94j
		add	ebx, ebx
		cmp	eax, ebx
		ja	short loc_40CD60

loc_40CD66:				; CODE XREF: sub_40CCD0+87j
		mov	[esp+1Ch+var_18], ebx ;	size_t
		mov	eax, [esi]
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	realloc
		test	eax, eax
		jz	short loc_40CD82
		mov	[esi], eax
		mov	[esi+8], ebx
		jmp	loc_40CCF5
; ---------------------------------------------------------------------------

loc_40CD82:				; CODE XREF: sub_40CCD0+A6j
		mov	eax, [esi]
		mov	[esp+1Ch+var_1C], eax ;	void *
		call	free
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+0Ch], 1
		jmp	loc_40CCFC
sub_40CCD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40CDB0	proc near		; CODE XREF: sub_40D690+BDp
					; sub_40D690+7F4p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		test	ecx, ecx
		jz	loc_40CE50
		lea	edx, [ebx+4]
		mov	eax, [eax+104h]
		xor	edi, edi
		mov	[esp+3Ch+var_20], edx
		jmp	short loc_40CDED
; ---------------------------------------------------------------------------

loc_40CDD4:				; CODE XREF: sub_40CDB0+49j
					; sub_40CDB0+9Cj
		add	edi, 1
		cmp	ecx, edi
		mov	[ebx+eax+4], dl
		mov	[ebx+104h], ebp
		mov	[ebx+108h], dl
		jbe	short loc_40CE50
		mov	eax, ebp

loc_40CDED:				; CODE XREF: sub_40CDB0+22j
		cmp	eax, 0FFh
		movzx	edx, byte ptr [esi+edi]
		lea	ebp, [eax+1]
		jnz	short loc_40CDD4
		mov	eax, [ebx+110h]
		mov	ebp, 1
		mov	[esp+3Ch+var_24], dl
		mov	[esp+3Ch+var_28], ecx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+3Ch+var_34], eax
		mov	eax, [ebx+104h]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	dword ptr [ebx+10Ch]
		xor	eax, eax
		mov	ecx, [esp+3Ch+var_28]
		mov	dword ptr [ebx+104h], 0
		movzx	edx, [esp+3Ch+var_24]
		add	dword ptr [ebx+124h], 1
		jmp	short loc_40CDD4
; ---------------------------------------------------------------------------
		align 10h

loc_40CE50:				; CODE XREF: sub_40CDB0+Dj
					; sub_40CDB0+39j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_40CDB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40CE60	proc near		; CODE XREF: sub_40D230+E2p
					; sub_40D690+76p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 2Ch
		mov	[esp+3Ch+var_3C], edx ;	char *
		call	strlen
		test	eax, eax
		jz	loc_40CF10
		lea	ecx, [ebx+4]
		mov	edx, [ebx+104h]
		xor	edi, edi
		mov	[esp+3Ch+var_20], ecx
		jmp	short loc_40CEA9
; ---------------------------------------------------------------------------
		align 10h

loc_40CE90:				; CODE XREF: sub_40CE60+56j
					; sub_40CE60+A9j
		add	edi, 1
		cmp	eax, edi
		mov	[ebx+edx+4], cl
		mov	[ebx+104h], ebp
		mov	[ebx+108h], cl
		jbe	short loc_40CF10
		mov	edx, ebp

loc_40CEA9:				; CODE XREF: sub_40CE60+2Aj
		cmp	edx, 0FFh
		movzx	ecx, byte ptr [esi+edi]
		lea	ebp, [edx+1]
		jnz	short loc_40CE90
		mov	edx, [ebx+110h]
		mov	ebp, 1
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_24], cl
		mov	byte ptr [ebx+103h], 0
		mov	[esp+3Ch+var_34], edx
		mov	edx, [ebx+104h]
		mov	[esp+3Ch+var_38], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [ebx+10Ch]
		xor	edx, edx
		movzx	ecx, [esp+3Ch+var_24]
		mov	dword ptr [ebx+104h], 0
		mov	eax, [esp+3Ch+var_28]
		add	dword ptr [ebx+124h], 1
		jmp	short loc_40CE90
; ---------------------------------------------------------------------------
		align 10h

loc_40CF10:				; CODE XREF: sub_40CE60+15j
					; sub_40CE60+45j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_40CE60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40CF20	proc near		; CODE XREF: sub_40D230+A3p
					; sub_40D690+6DBp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		mov	edx, ecx
		sub	esp, 20h
		test	ecx, ecx
		mov	ebx, eax
		jz	short loc_40CF5B
		mov	edi, [ecx+8]
		mov	eax, ecx
		test	edi, edi
		jnz	short loc_40CF4B
		jmp	loc_40CFE0
; ---------------------------------------------------------------------------
		align 10h

loc_40CF40:				; CODE XREF: sub_40CF20+30j
		mov	ecx, [eax+8]
		test	ecx, ecx
		jz	loc_40CFE0

loc_40CF4B:				; CODE XREF: sub_40CF20+17j
		mov	eax, [eax]
		test	eax, eax
		nop
		jnz	short loc_40CF40
		xor	ecx, ecx
		mov	eax, ebx
		call	sub_40D230

loc_40CF5B:				; CODE XREF: sub_40CF20+Ej
		mov	eax, [ebx+104h]

loc_40CF61:				; CODE XREF: sub_40CF20+142j
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_40D0AE

loc_40CF6F:				; CODE XREF: sub_40CF20+1CDj
		mov	byte ptr [ebx+eax+4], 20h
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 20h

loc_40CF81:				; CODE XREF: sub_40CF20+26Fj
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_40D136

loc_40CF90:				; CODE XREF: sub_40CF20+255j
		mov	byte ptr [ebx+edx+4], 5Bh
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 5Bh
		mov	edx, [esi+4]
		test	edx, edx
		jz	short loc_40CFB6
		mov	eax, ebx
		call	sub_40D690
		mov	eax, [ebx+104h]

loc_40CFB6:				; CODE XREF: sub_40CF20+87j
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_40D0F2

loc_40CFC4:				; CODE XREF: sub_40CF20+211j
		mov	byte ptr [ebx+eax+4], 5Dh
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 5Dh
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40CFE0:				; CODE XREF: sub_40CF20+19j
					; sub_40CF20+25j
		mov	eax, [eax+4]
		cmp	dword ptr [eax], 26h
		jz	loc_40D180
		mov	ecx, [ebx+104h]
		lea	edi, [ebx+4]
		cmp	ecx, 0FFh
		jz	loc_40D194
		lea	eax, [ecx+1]
		cmp	eax, 0FFh
		mov	byte ptr [ebx+ecx+4], 20h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 20h
		jz	short loc_40D067

loc_40D01D:				; CODE XREF: sub_40CF20+2BFj
		lea	ecx, [eax+1]

loc_40D020:				; CODE XREF: sub_40CF20+189j
		mov	byte ptr [ebx+eax+4], 28h
		mov	eax, ebx
		mov	[ebx+104h], ecx
		xor	ecx, ecx
		mov	byte ptr [ebx+108h], 28h
		call	sub_40D230
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_40D1E4

loc_40D050:				; CODE XREF: sub_40CF20+2FEj
		mov	byte ptr [ebx+edx+4], 29h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 29h
		jmp	loc_40CF61
; ---------------------------------------------------------------------------

loc_40D067:				; CODE XREF: sub_40CF20+FBj
		mov	eax, [ebx+110h]
		mov	[esp+2Ch+var_10], edx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_2C], edi
		call	dword ptr [ebx+10Ch]
		mov	ecx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		jmp	loc_40D020
; ---------------------------------------------------------------------------

loc_40D0AE:				; CODE XREF: sub_40CF20+49j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40CF6F
; ---------------------------------------------------------------------------

loc_40D0F2:				; CODE XREF: sub_40CF20+9Ej
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40CFC4
; ---------------------------------------------------------------------------

loc_40D136:				; CODE XREF: sub_40CF20+6Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40CF90
; ---------------------------------------------------------------------------
		align 10h

loc_40D180:				; CODE XREF: sub_40CF20+C6j
		xor	ecx, ecx
		mov	eax, ebx
		call	sub_40D230
		mov	edx, [ebx+104h]
		jmp	loc_40CF81
; ---------------------------------------------------------------------------

loc_40D194:				; CODE XREF: sub_40CF20+DBj
		mov	eax, [ebx+110h]
		mov	[esp+2Ch+var_10], edx
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_2C], edi
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		mov	byte ptr [ebx+4], 20h
		mov	dword ptr [ebx+104h], 1
		mov	byte ptr [ebx+108h], 20h
		jmp	loc_40D01D
; ---------------------------------------------------------------------------

loc_40D1E4:				; CODE XREF: sub_40CF20+12Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_2C], edi
		mov	[esp+2Ch+var_24], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40D050
sub_40CF20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D230	proc near		; CODE XREF: sub_40CF20+36p
					; sub_40CF20+116p ...
		push	ebp
		mov	ebp, ecx
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 0Ch
		test	edx, edx
		jnz	short loc_40D281
		jmp	short loc_40D2B0
; ---------------------------------------------------------------------------

loc_40D243:				; CODE XREF: sub_40D230+64j
		mov	edx, [ebx+4]

loc_40D246:				; CODE XREF: sub_40D230+71j
		mov	eax, [ebx+0Ch]
		mov	edi, [esi+114h]
		mov	dword ptr [ebx+8], 1
		mov	[esi+114h], eax
		mov	eax, [edx]
		cmp	eax, 25h
		jz	short loc_40D2B8
		cmp	eax, 26h
		jz	short loc_40D2CF
		cmp	eax, 2
		jz	short loc_40D2E6
		mov	eax, esi
		nop
		call	sub_40E9D0
		mov	[esi+114h], edi

loc_40D27B:				; CODE XREF: sub_40D230+60j
		mov	ebx, [ebx]
		test	ebx, ebx
		jz	short loc_40D2B0

loc_40D281:				; CODE XREF: sub_40D230+Fj
					; sub_40D230+77j
		mov	edx, [esi+11Ch]
		test	edx, edx
		jnz	short loc_40D2B0
		mov	eax, [ebx+8]
		test	eax, eax
		jnz	short loc_40D27B
		test	ebp, ebp
		jnz	short loc_40D243
		mov	edx, [ebx+4]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	short loc_40D246
		mov	ebx, [ebx]
		test	ebx, ebx
		jnz	short loc_40D281
		lea	esi, [esi+0]

loc_40D2B0:				; CODE XREF: sub_40D230+11j
					; sub_40D230+4Fj ...
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40D2B8:				; CODE XREF: sub_40D230+31j
		mov	ecx, [ebx]
		mov	eax, esi
		call	sub_40D360
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40D2CF:				; CODE XREF: sub_40D230+36j
		mov	ecx, [ebx]
		mov	eax, esi
		call	sub_40CF20
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40D2E6:				; CODE XREF: sub_40D230+3Bj
		mov	ebp, [esi+118h]
		mov	eax, esi
		mov	dword ptr [esi+118h], 0
		mov	edx, [edx+4]
		call	sub_40D690
		test	byte ptr [esi],	4
		mov	[esi+118h], ebp
		jnz	short loc_40D349
		mov	edx, offset byte_41AED4
		mov	eax, esi
		call	sub_40CE60

loc_40D317:				; CODE XREF: sub_40D230+125j
		mov	eax, [ebx+4]
		mov	edx, [eax+8]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	short loc_40D334

loc_40D327:				; CODE XREF: sub_40D230+102j
		mov	edx, [edx+4]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		jbe	short loc_40D327

loc_40D334:				; CODE XREF: sub_40D230+F5j
		mov	eax, esi
		call	sub_40D690
		mov	[esi+114h], edi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40D349:				; CODE XREF: sub_40D230+D9j
		mov	edx, 2Eh
		mov	eax, esi
		call	sub_40B100
		jmp	short loc_40D317
sub_40D230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D360	proc near		; CODE XREF: sub_40D230+8Cp
					; sub_40D690+A49p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, ecx
		push	ebx
		mov	ebx, eax
		sub	esp, 1Ch
		test	ecx, ecx
		jz	loc_40D5F4
		mov	eax, ecx
		mov	ecx, [ecx+8]
		mov	edx, 1
		test	ecx, ecx
		jnz	loc_40D5F4

loc_40D387:				; CODE XREF: sub_40D360+DDj
		mov	ecx, [eax+4]
		mov	ecx, [ecx]
		sub	ecx, 17h
		cmp	ecx, 10h
		ja	loc_40D432
		mov	ebp, edx
		shl	ebp, cl
		test	ebp, 10C47h
		mov	ecx, ebp
		jz	loc_40D4D5
		movzx	eax, byte ptr [ebx+108h]

loc_40D3B1:				; CODE XREF: sub_40D360+18Ej
		cmp	al, 20h
		jz	loc_40D4F4
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_40D646

loc_40D3CE:				; CODE XREF: sub_40D360+323j
		cmp	eax, 0FFh
		mov	byte ptr [ebx+edx+4], 20h
		lea	edx, [eax+1]
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 20h
		jnz	loc_40D508

loc_40D3EE:				; CODE XREF: sub_40D360+1A2j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40D508
; ---------------------------------------------------------------------------

loc_40D432:				; CODE XREF: sub_40D360+32j
					; sub_40D360+17Bj
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_40D443
		mov	ebp, [eax+8]
		test	ebp, ebp
		jz	loc_40D387

loc_40D443:				; CODE XREF: sub_40D360+D6j
					; sub_40D360+29Fj
		mov	ebp, [ebx+118h]
		xor	ecx, ecx
		mov	edx, esi
		mov	eax, ebx
		mov	dword ptr [ebx+118h], 0
		call	sub_40D230
		mov	edx, [ebx+104h]
		cmp	edx, 0FFh
		lea	eax, [edx+1]
		jz	loc_40D56A

loc_40D473:				; CODE XREF: sub_40D360+204j
					; sub_40D360+249j
		mov	byte ptr [ebx+edx+4], 28h
		mov	[ebx+104h], eax
		mov	byte ptr [ebx+108h], 28h
		mov	edx, [edi+8]
		test	edx, edx
		jz	short loc_40D499
		mov	eax, ebx
		call	sub_40D690
		mov	eax, [ebx+104h]

loc_40D499:				; CODE XREF: sub_40D360+12Aj
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_40D5B0

loc_40D4A7:				; CODE XREF: sub_40D360+28Fj
		mov	byte ptr [ebx+eax+4], 29h
		mov	ecx, 1
		mov	eax, ebx
		mov	[ebx+104h], edx
		mov	edx, esi
		mov	byte ptr [ebx+108h], 29h
		call	sub_40D230
		mov	[ebx+118h], ebp
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40D4D5:				; CODE XREF: sub_40D360+44j
		and	ecx, 380h
		jz	loc_40D432

loc_40D4E1:				; CODE XREF: sub_40D360+299j
		movzx	eax, byte ptr [ebx+108h]
		cmp	al, 28h
		jz	short loc_40D4F4
		cmp	al, 2Ah
		jnz	loc_40D3B1

loc_40D4F4:				; CODE XREF: sub_40D360+53j
					; sub_40D360+18Aj
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_40D3EE

loc_40D508:				; CODE XREF: sub_40D360+88j
					; sub_40D360+CDj
		mov	byte ptr [ebx+eax+4], 28h
		mov	ebp, [ebx+118h]
		xor	ecx, ecx
		mov	[ebx+104h], edx
		mov	eax, ebx
		mov	edx, esi
		mov	byte ptr [ebx+108h], 28h
		mov	dword ptr [ebx+118h], 0
		call	sub_40D230
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	loc_40D604

loc_40D549:				; CODE XREF: sub_40D360+2E1j
		cmp	edx, 0FFh
		mov	byte ptr [ebx+eax+4], 29h
		lea	eax, [edx+1]
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 29h
		jnz	loc_40D473

loc_40D56A:				; CODE XREF: sub_40D360+10Dj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40D473
; ---------------------------------------------------------------------------
		align 10h

loc_40D5B0:				; CODE XREF: sub_40D360+141j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_24], eax
		mov	eax, [ebx+104h]
		mov	[esp+2Ch+var_28], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40D4A7
; ---------------------------------------------------------------------------

loc_40D5F4:				; CODE XREF: sub_40D360+Fj
					; sub_40D360+21j
		mov	ecx, [edi+4]
		test	ecx, ecx
		jnz	loc_40D4E1
		jmp	loc_40D443
; ---------------------------------------------------------------------------

loc_40D604:				; CODE XREF: sub_40D360+1E3j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40D549
; ---------------------------------------------------------------------------

loc_40D646:				; CODE XREF: sub_40D360+68j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	eax, 1
		xor	edx, edx
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40D3CE
sub_40D360	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D690	proc near		; CODE XREF: sub_40CF20+8Bp
					; sub_40D230+CBp ...

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_64		= byte ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 9Ch
		test	edx, edx
		mov	[esp+9Ch+var_10], ebx
		mov	ebx, eax
		mov	[esp+9Ch+var_4], ebp
		mov	ebp, edx
		mov	[esp+9Ch+var_C], esi
		mov	[esp+9Ch+var_8], edi
		jz	short loc_40D6CB ; jumptable 0040D6F8 default case
		mov	eax, [eax+11Ch]
		test	eax, eax
		jnz	short loc_40D6D5 ; jumptable 0040E369 default case
		mov	eax, [edx]
		cmp	eax, 3Ch	; switch 61 cases
		jbe	short loc_40D6F8

loc_40D6CB:				; CODE XREF: sub_40D690+28j
					; sub_40D690:loc_40D6F8j ...
		mov	dword ptr [ebx+11Ch], 1	; jumptable 0040D6F8 default case

loc_40D6D5:				; CODE XREF: sub_40D690+32j
					; sub_40D690+85j ...
		mov	ebx, [esp+9Ch+var_10] ;	jumptable 0040E369 default case
		mov	esi, [esp+9Ch+var_C]
		mov	edi, [esp+9Ch+var_8]
		mov	ebp, [esp+9Ch+var_4]
		add	esp, 9Ch
		retn
; ---------------------------------------------------------------------------

loc_40D6F8:				; CODE XREF: sub_40D690+39j
		jmp	ds:off_41B088[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_40D6FF:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aVtableFor ; jumptable 0040D6F8 case 9

loc_40D704:				; CODE XREF: sub_40D690+D7j
					; sub_40D690+DEj ...
		mov	eax, ebx
		call	sub_40CE60

loc_40D70B:				; CODE XREF: sub_40D690:loc_40D6F8j
					; sub_40D690+786j
					; DATA XREF: ...
		mov	edx, [ebp+4]	; jumptable 0040D6F8 case 36
		mov	eax, ebx
		call	sub_40D690
		jmp	short loc_40D6D5 ; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40D717:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aConstructionVt ; jumptable	0040D6F8 case 11
		mov	eax, ebx
		call	sub_40CE60
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40D690
		mov	edx, offset aIn	; "-in-"

loc_40D732:				; CODE XREF: sub_40D690+803j
		mov	eax, ebx
		call	sub_40CE60

loc_40D739:				; CODE XREF: sub_40D690:loc_40D6F8j
					; sub_40D690+D0j ...
		mov	edx, [ebp+8]	; jumptable 0040D6F8 case 7
		mov	eax, ebx
		call	sub_40D690
		jmp	short loc_40D6D5 ; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40D745:				; CODE XREF: sub_40D690:loc_40D6F8j
					; sub_40D690+181j
					; DATA XREF: ...
		mov	ecx, [ebp+8]	; jumptable 0040D6F8 case 22
		mov	eax, ebx
		mov	edx, [ebp+4]
		call	sub_40CDB0
		jmp	short loc_40D6D5 ; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40D754:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, 7Eh	; jumptable 0040D6F8 case 8
		mov	eax, ebx
		call	sub_40B100
		jmp	short loc_40D739 ; jumptable 0040D6F8 case 7
; ---------------------------------------------------------------------------

loc_40D762:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aVttFor ; jumptable	0040D6F8 case 10
		jmp	short loc_40D704
; ---------------------------------------------------------------------------

loc_40D769:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aTypeinfoFor ; jumptable 0040D6F8 case 12
		jmp	short loc_40D704
; ---------------------------------------------------------------------------

loc_40D770:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aTypeinfoNameFo ; jumptable	0040D6F8 case 13
		jmp	short loc_40D704
; ---------------------------------------------------------------------------

loc_40D777:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aTypeinfoFnFor ; jumptable 0040D6F8	case 14
		jmp	short loc_40D704
; ---------------------------------------------------------------------------

loc_40D77E:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aNonVirtualThun ; jumptable	0040D6F8 case 15
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40D788:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, [edx+4]	; jumptable 0040D6F8 case 60
		mov	eax, ebx
		call	sub_40B180
		test	eax, eax
		jz	loc_40E50F
		cmp	dword ptr [eax], 2Ah
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		mov	edx, [eax+4]
		xor	esi, esi
		test	edx, edx
		jnz	short loc_40D7C4
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40D7B1:				; CODE XREF: sub_40D690+13Cj
		cmp	dword ptr [eax], 2Ah
		jnz	short loc_40D7CE
		mov	edi, [eax+4]
		test	edi, edi
		nop
		lea	esi, [esi+0]
		jz	short loc_40D7CE
		mov	esi, edx

loc_40D7C4:				; CODE XREF: sub_40D690+11Aj
		mov	eax, [eax+8]
		lea	edx, [esi+1]
		test	eax, eax
		jnz	short loc_40D7B1

loc_40D7CE:				; CODE XREF: sub_40D690+124j
					; sub_40D690+130j
		mov	[esp+9Ch+var_7C], edx
		xor	edi, edi
		mov	ebp, [ebp+4]
		jmp	short loc_40D7ED
; ---------------------------------------------------------------------------
		align 10h

loc_40D7E0:				; CODE XREF: sub_40D690+16Ej
					; sub_40D690+17Cj
		add	edi, 1
		cmp	[esp+9Ch+var_7C], edi
		jle	loc_40D6D5	; jumptable 0040E369 default case

loc_40D7ED:				; CODE XREF: sub_40D690+147j
		mov	[ebx+120h], edi
		mov	edx, ebp
		mov	eax, ebx
		call	sub_40D690
		cmp	esi, edi
		jle	short loc_40D7E0
		mov	edx, offset asc_41AFF0 ; ", "
		mov	eax, ebx
		call	sub_40CE60
		jmp	short loc_40D7E0
; ---------------------------------------------------------------------------

loc_40D80E:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		test	byte ptr [ebx],	4 ; jumptable 0040D6F8 case 0
		jz	loc_40D745	; jumptable 0040D6F8 case 22
		mov	eax, [edx+4]
		mov	edi, [edx+8]
		add	edi, eax
		cmp	eax, edi
		jb	short loc_40D84B
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40D828:				; CODE XREF: sub_40D690+1C2j
		movzx	edx, byte ptr [eax]
		lea	esi, [eax+1]
		cmp	dl, 5Fh
		jz	loc_40E15C

loc_40D837:				; CODE XREF: sub_40D690+1CAj
					; sub_40D690+AD3j ...
		movsx	edx, dl
		mov	eax, ebx
		call	sub_40B100

loc_40D841:				; CODE XREF: sub_40D690+ECBj
		cmp	esi, edi
		jnb	loc_40D6D5	; jumptable 0040E369 default case
		mov	eax, esi

loc_40D84B:				; CODE XREF: sub_40D690+191j
		mov	edx, edi
		sub	edx, eax
		cmp	edx, 3
		jg	short loc_40D828
		lea	esi, [eax+1]
		movzx	edx, byte ptr [eax]
		jmp	short loc_40D837
; ---------------------------------------------------------------------------

loc_40D85C:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, [edx+4]	; jumptable 0040D6F8 cases 1,2
		mov	eax, ebx
		call	sub_40D690
		test	byte ptr [ebx],	4
		jnz	loc_40E1D2
		mov	edx, offset byte_41AED4
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D739	; jumptable 0040D6F8 case 7
; ---------------------------------------------------------------------------

loc_40D880:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	eax, [ebx+118h]	; jumptable 0040D6F8 case 3
		mov	dword ptr [ebx+118h], 0
		mov	[esp+9Ch+var_74], eax
		mov	esi, [edx+4]
		test	esi, esi
		jz	loc_40D6CB	; jumptable 0040D6F8 default case
		lea	edx, [esp+9Ch+var_64]
		mov	ecx, [ebx+114h]
		mov	[esp+9Ch+var_7C], edx
		mov	[ebx+118h], edx
		mov	edx, [esi]
		mov	dword ptr [esp+9Ch+var_64], 0
		mov	[esp+9Ch+var_60], esi
		mov	[esp+9Ch+var_5C], 0
		lea	eax, [edx-1Ah]
		cmp	eax, 2
		mov	[esp+9Ch+var_78], ecx
		mov	[esp+9Ch+var_58], ecx
		ja	loc_40E560
		lea	eax, [esp+9Ch+var_54]
		mov	edi, 1

loc_40D8E6:				; CODE XREF: sub_40D690+297j
		mov	esi, [esi+4]
		test	esi, esi
		jz	loc_40D6CB	; jumptable 0040D6F8 default case
		cmp	edi, 4
		jz	loc_40D6CB	; jumptable 0040D6F8 default case
		mov	edx, [ebx+118h]
		add	edi, 1
		mov	[eax+4], esi
		mov	dword ptr [eax+8], 0
		mov	[eax], edx
		mov	edx, [esp+9Ch+var_78]
		mov	[ebx+118h], eax
		mov	[eax+0Ch], edx
		mov	edx, [esi]
		add	eax, 10h
		lea	ecx, [edx-1Ah]
		cmp	ecx, 2
		jbe	short loc_40D8E6

loc_40D929:				; CODE XREF: sub_40D690+ED5j
		cmp	edx, 4
		jz	loc_40E4E5
		cmp	edx, 2
		jnz	loc_40D9EE
		mov	edx, [esi+8]
		mov	eax, [edx]
		sub	eax, 1Ah
		cmp	eax, 2
		ja	loc_40D9EE
		cmp	edi, 3
		ja	loc_40D6CB	; jumptable 0040D6F8 default case
		mov	ecx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	eax, [eax+ecx-10h]
		mov	[esp+9Ch+var_80], eax
		mov	eax, edi
		shl	eax, 4
		lea	ecx, [eax+ecx-10h]
		mov	eax, edi
		mov	[esp+9Ch+var_70], ecx
		mov	ecx, [esp+9Ch+var_7C]
		shl	eax, 4
		add	ecx, eax
		mov	[esp+9Ch+var_78], ecx
		mov	ecx, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_70], esi
		mov	esi, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_78], ebp
		mov	eax, ecx
		jmp	short loc_40D9A8
; ---------------------------------------------------------------------------

loc_40D996:				; CODE XREF: sub_40D690+354j
		add	eax, 10h
		add	ecx, 10h
		add	esi, 10h
		cmp	edi, 3
		ja	loc_40D6CB	; jumptable 0040D6F8 default case

loc_40D9A8:				; CODE XREF: sub_40D690+304j
		mov	ebp, [eax+4]
		add	edi, 1
		mov	[eax+10h], ecx
		mov	[eax+4], edx
		mov	[eax+14h], ebp
		mov	ebp, [eax+8]
		mov	dword ptr [eax+8], 0
		mov	[eax+18h], ebp
		mov	ebp, [eax+0Ch]
		mov	[eax+1Ch], ebp
		mov	ebp, [ebx+114h]
		mov	[ebx+118h], esi
		mov	[eax+0Ch], ebp
		mov	edx, [edx+4]
		mov	ebp, [edx]
		sub	ebp, 1Ah
		cmp	ebp, 2
		jbe	short loc_40D996
		mov	esi, [esp+9Ch+var_70]
		mov	ebp, [esp+9Ch+var_78]

loc_40D9EE:				; CODE XREF: sub_40D690+2A5j
					; sub_40D690+2B6j ...
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_40D690
		cmp	dword ptr [esi], 4
		jz	loc_40E500

loc_40DA01:				; CODE XREF: sub_40D690+E7Aj
		test	edi, edi
		jz	loc_40E3D6
		mov	edx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	esi, [edx+eax-8]
		jmp	short loc_40DA23
; ---------------------------------------------------------------------------

loc_40DA18:				; CODE XREF: sub_40D690+39Aj
					; sub_40D690+3B2j
		sub	esi, 10h
		test	edi, edi
		jz	loc_40E3D6

loc_40DA23:				; CODE XREF: sub_40D690+386j
		mov	ebp, [esi]
		sub	edi, 1
		test	ebp, ebp
		jnz	short loc_40DA18
		mov	eax, ebx
		mov	edx, 20h
		call	sub_40B100
		mov	edx, [esi-4]
		mov	eax, ebx
		call	sub_40E9D0
		jmp	short loc_40DA18
; ---------------------------------------------------------------------------

loc_40DA44:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aJavaClassFor ; jumptable 0040D6F8 case 18
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40DA4E:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aGuardVariableF ; jumptable	0040D6F8 case 19
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40DA58:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		cmp	word ptr [edx+0Ah], 0 ;	jumptable 0040D6F8 case	40
		jnz	loc_40E209

loc_40DA63:				; CODE XREF: sub_40D690+B85j
		mov	edx, [ebp+4]
		cmp	dword ptr [edx+4], offset off_41B420
		jz	short loc_40DA82
		mov	eax, ebx
		call	sub_40D690
		mov	edx, 20h
		mov	eax, ebx
		call	sub_40B100

loc_40DA82:				; CODE XREF: sub_40D690+3DDj
		cmp	word ptr [ebp+8], 0
		jz	loc_40E1F8
		mov	edx, offset a_accum ; "_Accum"
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DA9E:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, [edx+4]	; jumptable 0040D6F8 cases 41,42
		test	edx, edx
		jz	short loc_40DAAC
		mov	eax, ebx
		call	sub_40D690

loc_40DAAC:				; CODE XREF: sub_40D690+413j
		mov	eax, [ebp+8]
		test	eax, eax
		jz	loc_40D6D5	; jumptable 0040E369 default case
		mov	eax, [ebx+104h]
		cmp	eax, 0FDh
		ja	loc_40E290

loc_40DAC8:				; CODE XREF: sub_40D690+C30j
		mov	edx, offset asc_41AFF0 ; ", "
		mov	eax, ebx
		call	sub_40CE60
		mov	edx, [ebp+8]
		mov	eax, ebx
		mov	esi, [ebx+124h]
		mov	edi, [ebx+104h]
		call	sub_40D690
		cmp	[ebx+124h], esi
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		mov	eax, [ebx+104h]
		cmp	eax, edi
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		sub	eax, 2
		mov	[ebx+104h], eax
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DB12:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edi, [ebx+118h]	; jumptable 0040D6F8 cases 26-34

loc_40DB18:				; CODE XREF: sub_40D690+754j
					; sub_40D690+764j ...
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	dword ptr [esp+9Ch+var_64], edi
		mov	[esp+9Ch+var_60], ebp
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_58], eax
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40D690
		mov	esi, [esp+9Ch+var_5C]
		test	esi, esi
		jnz	short loc_40DB57
		mov	edx, ebp
		mov	eax, ebx
		call	sub_40E9D0

loc_40DB57:				; CODE XREF: sub_40D690+4BCj
					; sub_40D690+71Fj ...
		mov	eax, dword ptr [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DB66:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	eax, ebx	; jumptable 0040D6F8 case 45
		mov	edx, offset aOperator ;	"operator "
		call	sub_40CE60
		mov	edx, ebp
		mov	eax, ebx
		call	sub_40EAC0
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DB80:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, [edx+4]	; jumptable 0040D6F8 case 46
		cmp	dword ptr [edx], 2Dh
		jz	loc_40E22C
		mov	eax, ebx
		xchg	ax, ax
		call	sub_40EC60

loc_40DB95:				; CODE XREF: sub_40D690+BBEj
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_40ED40
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DBA4:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	eax, [edx+8]	; jumptable 0040D6F8 case 47
		cmp	dword ptr [eax], 30h
		jnz	loc_40D6CB	; jumptable 0040D6F8 default case
		mov	edx, [edx+4]
		cmp	dword ptr [edx], 2Bh
		jz	loc_40E442

loc_40DBBC:				; CODE XREF: sub_40D690+DB9j
					; sub_40D690+DC5j ...
		mov	edx, [eax+4]
		mov	eax, ebx
		mov	edi, offset aIx	; "ix"
		call	sub_40ED40
		mov	edx, [ebp+4]
		mov	ecx, 3
		mov	eax, [edx+4]
		mov	eax, [eax]
		mov	[esp+9Ch+var_7C], eax
		mov	esi, eax
		repe cmpsb
		jz	loc_40E418
		mov	esi, [esp+9Ch+var_7C]
		mov	edi, offset aCl	; "cl"
		mov	ecx, 3
		repe cmpsb
		jnz	loc_40E4CB

loc_40DBFC:				; CODE XREF: sub_40D690+E45j
		mov	eax, [ebp+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_40ED40

loc_40DC09:				; CODE XREF: sub_40D690+DADj
		mov	eax, [ebp+4]
		cmp	dword ptr [eax], 2Bh
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		mov	eax, [eax+4]
		cmp	dword ptr [eax+8], 1
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		mov	eax, [eax+4]
		cmp	byte ptr [eax],	3Eh
		jnz	loc_40D6D5	; jumptable 0040E369 default case

loc_40DC2E:				; CODE XREF: sub_40D690+AAEj
		mov	edx, 29h
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DC3F:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		movsx	edx, byte ptr [edx+4] ;	jumptable 0040D6F8 case	56
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DC4F:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	esi, [ebx+118h]	; jumptable 0040D6F8 case 38
		lea	ecx, [esp+9Ch+var_64]
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_7C], ecx
		mov	[ebx+118h], ecx
		mov	[esp+9Ch+var_78], esi
		mov	[esp+9Ch+var_58], eax
		mov	eax, [esp+9Ch+var_78]
		mov	dword ptr [esp+9Ch+var_64], esi
		mov	esi, ecx
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], 0
		test	eax, eax
		jz	loc_40E4DA
		mov	edx, [esp+9Ch+var_78]
		mov	eax, [edx+4]
		mov	eax, [eax]
		sub	eax, 17h
		cmp	eax, 2
		ja	loc_40E4DA
		mov	eax, edx
		mov	edi, 1
		mov	[esp+9Ch+var_74], ebp
		jmp	short loc_40DCBE
; ---------------------------------------------------------------------------

loc_40DCB1:				; CODE XREF: sub_40D690+67Dj
		mov	edx, [eax+4]
		mov	edx, [edx]
		sub	edx, 17h
		cmp	edx, 2
		ja	short loc_40DD0F

loc_40DCBE:				; CODE XREF: sub_40D690+61Fj
		mov	ebp, [eax+8]
		test	ebp, ebp
		jnz	short loc_40DD09
		cmp	edi, 3
		ja	loc_40D6CB	; jumptable 0040D6F8 default case
		mov	ebp, [eax]
		mov	edx, edi
		add	edi, 1
		shl	edx, 4
		lea	ecx, [esp+edx+9Ch+var_64]
		mov	dword ptr [esp+edx+9Ch+var_64],	ebp
		mov	ebp, [eax+4]
		mov	[ecx+4], ebp
		mov	ebp, [eax+8]
		mov	[ecx+8], ebp
		mov	ebp, [eax+0Ch]
		mov	[ecx+0Ch], ebp
		mov	dword ptr [esp+edx+9Ch+var_64],	esi
		mov	esi, [esp+9Ch+var_7C]
		mov	dword ptr [eax+8], 1
		add	esi, edx
		mov	[ebx+118h], esi

loc_40DD09:				; CODE XREF: sub_40D690+633j
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_40DCB1

loc_40DD0F:				; CODE XREF: sub_40D690+62Cj
		mov	ebp, [esp+9Ch+var_74]

loc_40DD13:				; CODE XREF: sub_40D690+E50j
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_40D690
		mov	ecx, [esp+9Ch+var_78]
		mov	[ebx+118h], ecx
		mov	ecx, [esp+9Ch+var_5C]
		test	ecx, ecx
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		cmp	edi, 1
		jz	short loc_40DD63
		mov	edx, [esp+9Ch+var_7C]
		mov	eax, edi
		shl	eax, 4
		lea	esi, [edx+eax-0Ch]

loc_40DD45:				; CODE XREF: sub_40D690+6C7j
		mov	edx, [esi]
		sub	edi, 1
		mov	eax, ebx
		sub	esi, 10h
		call	sub_40E9D0
		cmp	edi, 1
		ja	short loc_40DD45
		mov	ecx, [ebx+118h]
		mov	[esp+9Ch+var_78], ecx

loc_40DD63:				; CODE XREF: sub_40D690+6A6j
		mov	ecx, [esp+9Ch+var_78]
		mov	edx, ebp
		mov	eax, ebx
		call	sub_40CF20
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DD75:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	eax, [ebx+118h]	; jumptable 0040D6F8 case 39
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], 0
		mov	dword ptr [esp+9Ch+var_64], eax
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_58], eax
		mov	edx, [edx+8]
		mov	eax, ebx
		call	sub_40D690
		mov	edx, [esp+9Ch+var_5C]
		test	edx, edx
		jnz	loc_40DB57
		mov	eax, ebx
		mov	edx, 20h
		call	sub_40B100
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40D690
		mov	edx, offset asc_41AFD8 ; "::*"
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40DB57
; ---------------------------------------------------------------------------

loc_40DDDC:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edi, [ebx+118h]	; jumptable 0040D6F8 cases 23-25
		test	edi, edi
		jz	loc_40DB18
		mov	edx, edi
		jmp	short loc_40DDFA
; ---------------------------------------------------------------------------
		align 10h

loc_40DDF0:				; CODE XREF: sub_40D690+76Fj
					; sub_40D690+784j
		mov	edx, [edx]
		test	edx, edx
		jz	loc_40DB18

loc_40DDFA:				; CODE XREF: sub_40D690+75Cj
		mov	ecx, [edx+8]
		test	ecx, ecx
		jnz	short loc_40DDF0
		mov	ecx, [edx+4]
		mov	ecx, [ecx]
		lea	esi, [ecx-17h]
		cmp	esi, 2
		ja	loc_40DB18
		cmp	eax, ecx
		jnz	short loc_40DDF0
		jmp	loc_40D70B	; jumptable 0040D6F8 case 36
; ---------------------------------------------------------------------------

loc_40DE1B:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aParm ; jumptable 0040D6F8 case 6
		mov	eax, ebx
		call	sub_40CE60
		mov	eax, [ebp+4]
		lea	esi, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_98], offset aLd ; "%ld"
		mov	[esp+9Ch+var_9C], esi ;	char *
		mov	[esp+9Ch+var_94], eax
		call	sprintf
		mov	edx, esi
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DE50:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aOperator_0	; jumptable 0040D6F8 case 43
		mov	eax, ebx
		call	sub_40CE60
		mov	eax, [ebp+4]
		mov	edx, [eax+4]
		movzx	ecx, byte ptr [edx]
		sub	ecx, 61h
		cmp	cl, 19h
		ja	short loc_40DE7F
		mov	edx, 20h
		mov	eax, ebx
		call	sub_40B100
		mov	eax, [ebp+4]
		mov	edx, [eax+4]

loc_40DE7F:				; CODE XREF: sub_40D690+7DBj
		mov	ecx, [eax+8]
		mov	eax, ebx
		call	sub_40CDB0
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DE8E:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aOperator ;	jumptable 0040D6F8 case	44
		jmp	loc_40D732
; ---------------------------------------------------------------------------

loc_40DE98:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aReferenceTempo ; jumptable	0040D6F8 case 20
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40DEA2:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aHiddenAliasFor ; jumptable	0040D6F8 case 21
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40DEAC:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aGlobalDestruct ; jumptable	0040D6F8 case 59
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40DEB6:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, [edx+4]	; jumptable 0040D6F8 cases 52,53
		xor	esi, esi
		cmp	dword ptr [edx], 23h
		jnz	short loc_40DEDD
		mov	edx, [edx+4]
		mov	esi, [edx+10h]
		cmp	esi, 1
		jb	short loc_40DEDD
		cmp	esi, 6
		jbe	loc_40E340
		cmp	esi, 7
		jz	loc_40E2F5

loc_40DEDD:				; CODE XREF: sub_40D690+82Ej
					; sub_40D690+839j ...
		mov	edx, 28h
		mov	eax, ebx
		call	sub_40B100
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40D690
		mov	edx, 29h
		mov	eax, ebx
		call	sub_40B100
		cmp	dword ptr [ebp+0], 35h
		jz	loc_40E407

loc_40DF09:				; CODE XREF: sub_40D690+D83j
		cmp	esi, 8
		jnz	loc_40D739	; jumptable 0040D6F8 case 7
		mov	eax, ebx
		mov	edx, 5Bh
		call	sub_40B100
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_40D690
		mov	edx, 5Dh
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DF39:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	eax, [ebx+118h]	; jumptable 0040D6F8 case 4
		test	byte ptr [ebx],	4
		mov	dword ptr [ebx+118h], 0
		mov	[esp+9Ch+var_7C], eax
		mov	edx, [edx+4]
		jz	short loc_40DF65
		mov	esi, [edx]
		test	esi, esi
		jnz	short loc_40DF65
		cmp	dword ptr [edx+8], 6
		jz	loc_40E479

loc_40DF65:				; CODE XREF: sub_40D690+8C3j
					; sub_40D690+8C9j ...
		mov	eax, ebx
		call	sub_40D690
		cmp	byte ptr [ebx+108h], 3Ch
		jz	loc_40E3F6

loc_40DF79:				; CODE XREF: sub_40D690+D72j
		mov	edx, 3Ch
		mov	eax, ebx
		call	sub_40B100
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_40D690
		cmp	byte ptr [ebx+108h], 3Eh
		jz	loc_40E3E5

loc_40DF9C:				; CODE XREF: sub_40D690+D61j
		mov	edx, 3Eh
		mov	eax, ebx
		call	sub_40B100

loc_40DFA8:				; CODE XREF: sub_40D690+E14j
		mov	edx, [esp+9Ch+var_7C]
		mov	[ebx+118h], edx
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40DFB7:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	esi, [ebx+114h]	; jumptable 0040D6F8 case 5
		test	esi, esi
		jz	loc_40E3C7
		mov	eax, [esi+4]
		mov	edx, [edx+4]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_40DFED
		jmp	loc_40D6CB	; jumptable 0040D6F8 default case
; ---------------------------------------------------------------------------

loc_40DFD7:				; CODE XREF: sub_40D690+960j
		test	edx, edx
		jle	loc_40E253
		mov	eax, [eax+8]
		sub	edx, 1
		test	eax, eax
		jz	loc_40D6CB	; jumptable 0040D6F8 default case

loc_40DFED:				; CODE XREF: sub_40D690+940j
		cmp	dword ptr [eax], 2Ah
		jz	short loc_40DFD7
		jmp	loc_40D6CB	; jumptable 0040D6F8 default case
; ---------------------------------------------------------------------------

loc_40DFF7:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	eax, [edx+8]	; jumptable 0040D6F8 case 49
		cmp	dword ptr [eax], 32h
		lea	esi, [esi+0]
		jnz	loc_40D6CB	; jumptable 0040D6F8 default case
		mov	edx, [eax+8]
		cmp	dword ptr [edx], 33h
		jnz	loc_40D6CB	; jumptable 0040D6F8 default case
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_40ED40
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40EC60
		mov	eax, [ebp+8]
		mov	eax, [eax+8]
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_40ED40
		mov	eax, ebx
		mov	edx, offset asc_41B009 ; " : "
		call	sub_40CE60
		mov	eax, [ebp+8]
		mov	eax, [eax+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_40ED40
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E057:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		test	byte ptr [ebx],	20h ; jumptable	0040D6F8 case 37
		jnz	loc_40E21A

loc_40E060:				; CODE XREF: sub_40D690+B97j
		mov	ecx, [ebp+4]
		test	ecx, ecx
		jz	short loc_40E0C6
		mov	eax, [ebx+118h]
		mov	[esp+9Ch+var_60], ebp
		mov	[esp+9Ch+var_5C], 0
		mov	dword ptr [esp+9Ch+var_64], eax
		lea	eax, [esp+9Ch+var_64]
		mov	[ebx+118h], eax
		mov	eax, [ebx+114h]
		mov	[esp+9Ch+var_58], eax
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40D690
		mov	edx, [esp+9Ch+var_5C]
		mov	eax, dword ptr [esp+9Ch+var_64]
		test	edx, edx
		mov	[ebx+118h], eax
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		test	byte ptr [ebx],	20h
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		mov	edx, 20h
		mov	eax, ebx
		call	sub_40B100

loc_40E0C6:				; CODE XREF: sub_40D690+9D5j
		test	byte ptr [ebx],	20h
		jnz	loc_40D6D5	; jumptable 0040E369 default case
		mov	ecx, [ebx+118h]
		mov	edx, ebp
		mov	eax, ebx
		call	sub_40D360
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E0E3:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aGlobalConstruc ; jumptable	0040D6F8 case 58
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40E0ED:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aVirtualThunkTo ; jumptable	0040D6F8 case 16
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40E0F7:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aCovariantRetur ; jumptable	0040D6F8 case 17
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40E101:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		test	byte ptr [ebx],	4 ; jumptable 0040D6F8 case 35
		jnz	loc_40E1E3
		mov	eax, [edx+4]
		mov	ecx, [eax+4]
		mov	edx, [eax]
		mov	eax, ebx
		call	sub_40CDB0
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E11E:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, offset aJavaResource ; jumptable 0040D6F8 case 54
		jmp	loc_40D704
; ---------------------------------------------------------------------------

loc_40E128:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	eax, ebx	; jumptable 0040D6F8 case 57
		mov	edx, offset aDecltype ;	"decltype ("
		call	sub_40CE60
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40D690
		jmp	loc_40DC2E
; ---------------------------------------------------------------------------

loc_40E143:				; CODE XREF: sub_40D690:loc_40D6F8j
					; DATA XREF: .rdata:off_41B088o
		mov	edx, [edx+4]	; jumptable 0040D6F8 case 55
		mov	eax, ebx
		call	sub_40D690
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_40D690
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E15C:				; CODE XREF: sub_40D690+1A1j
		cmp	byte ptr [eax+1], 5Fh
		lea	esi, [eax+1]
		jnz	loc_40D837
		cmp	byte ptr [eax+2], 55h
		lea	esi, [esi+0]
		jnz	loc_40D837
		lea	ebp, [eax+3]
		cmp	edi, ebp
		jbe	loc_40D837
		xor	ecx, ecx
		mov	[esp+9Ch+var_7C], esi
		mov	esi, ecx
		jmp	short loc_40E1A2
; ---------------------------------------------------------------------------

loc_40E18B:				; CODE XREF: sub_40D690+B1Cj
		movsx	eax, al
		sub	eax, 30h

loc_40E191:				; CODE XREF: sub_40D690+B2Cj
					; sub_40D690+B40j
		add	ebp, 1
		cmp	edi, ebp
		jbe	loc_40E470
		shl	esi, 4
		lea	esi, [eax+esi]

loc_40E1A2:				; CODE XREF: sub_40D690+AF9j
		movzx	eax, byte ptr [ebp+0]
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_40E18B
		lea	ecx, [eax-41h]
		cmp	cl, 5
		ja	short loc_40E1BE
		movsx	eax, al
		sub	eax, 37h
		jmp	short loc_40E191
; ---------------------------------------------------------------------------

loc_40E1BE:				; CODE XREF: sub_40D690+B24j
		lea	ecx, [eax-61h]
		cmp	cl, 5
		ja	loc_40E52A
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_40E191
; ---------------------------------------------------------------------------

loc_40E1D2:				; CODE XREF: sub_40D690+1D9j
		mov	edx, 2Eh
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40D739	; jumptable 0040D6F8 case 7
; ---------------------------------------------------------------------------

loc_40E1E3:				; CODE XREF: sub_40D690+A74j
		mov	eax, [edx+4]
		mov	ecx, [eax+0Ch]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_40CDB0
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E1F8:				; CODE XREF: sub_40D690+3F7j
		mov	edx, offset a_fract ; "_Fract"
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E209:				; CODE XREF: sub_40D690+3CDj
		mov	edx, offset a_sat ; "_Sat "
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40DA63
; ---------------------------------------------------------------------------

loc_40E21A:				; CODE XREF: sub_40D690+9CAj
		mov	ecx, [ebx+118h]
		mov	eax, ebx
		call	sub_40D360
		jmp	loc_40E060
; ---------------------------------------------------------------------------

loc_40E22C:				; CODE XREF: sub_40D690+4F6j
		mov	eax, ebx
		mov	edx, 28h
		call	sub_40B100
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40EAC0
		mov	edx, 29h
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40DB95
; ---------------------------------------------------------------------------

loc_40E253:				; CODE XREF: sub_40D690+949j
		test	eax, eax
		jz	loc_40D6CB	; jumptable 0040D6F8 default case
		test	edx, edx
		lea	esi, [esi+0]
		jnz	loc_40D6CB	; jumptable 0040D6F8 default case
		mov	edx, [eax+4]
		test	edx, edx
		jz	loc_40D6CB	; jumptable 0040D6F8 default case
		cmp	dword ptr [edx], 2Ah
		jz	short loc_40E2C5

loc_40E276:				; CODE XREF: sub_40D690+E30j
		mov	eax, [esi]
		mov	[ebx+114h], eax
		mov	eax, ebx
		call	sub_40D690
		mov	[ebx+114h], esi
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E290:				; CODE XREF: sub_40D690+432j
		mov	edx, [ebx+110h]
		mov	byte ptr [ebx+eax+4], 0
		mov	[esp+9Ch+var_98], eax
		lea	eax, [ebx+4]
		mov	[esp+9Ch+var_9C], eax
		mov	[esp+9Ch+var_94], edx
		call	dword ptr [ebx+10Ch]
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40DAC8
; ---------------------------------------------------------------------------

loc_40E2C5:				; CODE XREF: sub_40D690+BE4j
		mov	eax, [ebx+120h]
		test	eax, eax
		jg	short loc_40E2E6
		jmp	loc_40E4A9
; ---------------------------------------------------------------------------

loc_40E2D4:				; CODE XREF: sub_40D690+C5Ej
		cmp	dword ptr [edx], 2Ah
		jnz	loc_40D6CB	; jumptable 0040D6F8 default case
		test	eax, eax
		nop
		jle	loc_40E4A9

loc_40E2E6:				; CODE XREF: sub_40D690+C3Dj
		mov	edx, [edx+8]
		sub	eax, 1
		test	edx, edx
		jnz	short loc_40E2D4
		jmp	loc_40D6CB	; jumptable 0040D6F8 default case
; ---------------------------------------------------------------------------

loc_40E2F5:				; CODE XREF: sub_40D690+847j
		mov	edx, [ebp+8]
		mov	ecx, [edx]
		test	ecx, ecx
		jnz	loc_40DEDD
		cmp	dword ptr [edx+8], 1
		jnz	loc_40DEDD
		cmp	eax, 34h
		jnz	loc_40DEDD
		mov	eax, [edx+4]
		movzx	eax, byte ptr [eax]
		cmp	al, 30h
		jz	loc_40E57E
		cmp	al, 31h
		jnz	loc_40DEDD
		mov	edx, offset aTrue ; "true"
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------
		align 10h

loc_40E340:				; CODE XREF: sub_40D690+83Ej
		mov	edx, [ebp+8]
		mov	edi, [edx]
		test	edi, edi
		jnz	loc_40DEDD
		cmp	eax, 35h
		jz	loc_40E56A

loc_40E356:				; CODE XREF: sub_40D690+EE9j
		mov	eax, ebx
		sub	esi, 2
		call	sub_40D690
		cmp	esi, 4		; switch 5 cases
		ja	loc_40D6D5	; jumptable 0040E369 default case
		jmp	ds:off_41B17C[esi*4] ; switch jump
; ---------------------------------------------------------------------------

loc_40E370:				; CODE XREF: sub_40D690+CD9j
					; DATA XREF: .rdata:off_41B17Co
		mov	edx, offset aLl	; jumptable 0040E369 case 3
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E381:				; CODE XREF: sub_40D690+CD9j
					; DATA XREF: .rdata:off_41B17Co
		mov	edx, offset aUl	; jumptable 0040E369 case 2
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E392:				; CODE XREF: sub_40D690+CD9j
					; DATA XREF: .rdata:off_41B17Co
		mov	edx, 6Ch	; jumptable 0040E369 case 1
		mov	eax, ebx
		call	sub_40B100
		xchg	ax, ax
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E3A5:				; CODE XREF: sub_40D690+CD9j
					; DATA XREF: .rdata:off_41B17Co
		mov	edx, 75h	; jumptable 0040E369 case 0
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E3B6:				; CODE XREF: sub_40D690+CD9j
					; DATA XREF: .rdata:off_41B17Co
		mov	edx, offset aUll ; jumptable 0040E369 case 4
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E3C7:				; CODE XREF: sub_40D690+92Fj
		mov	dword ptr [ebx+11Ch], 1
		jmp	loc_40D6CB	; jumptable 0040D6F8 default case
; ---------------------------------------------------------------------------

loc_40E3D6:				; CODE XREF: sub_40D690+373j
					; sub_40D690+38Dj
		mov	ecx, [esp+9Ch+var_74]
		mov	[ebx+118h], ecx
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E3E5:				; CODE XREF: sub_40D690+906j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40DF9C
; ---------------------------------------------------------------------------

loc_40E3F6:				; CODE XREF: sub_40D690+8E3j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40DF79
; ---------------------------------------------------------------------------

loc_40E407:				; CODE XREF: sub_40D690+873j
		mov	edx, 2Dh
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40DF09
; ---------------------------------------------------------------------------

loc_40E418:				; CODE XREF: sub_40D690+550j
		mov	eax, ebx
		mov	edx, 5Bh
		call	sub_40B100
		mov	eax, [ebp+8]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_40D690
		mov	edx, 5Dh
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40DC09
; ---------------------------------------------------------------------------

loc_40E442:				; CODE XREF: sub_40D690+526j
		mov	edx, [edx+4]
		cmp	dword ptr [edx+8], 1
		jnz	loc_40DBBC
		mov	edx, [edx+4]
		cmp	byte ptr [edx],	3Eh
		jnz	loc_40DBBC
		mov	eax, ebx
		mov	edx, 28h
		call	sub_40B100
		mov	eax, [ebp+8]
		jmp	loc_40DBBC
; ---------------------------------------------------------------------------
		align 10h

loc_40E470:				; CODE XREF: sub_40D690+B06j
		mov	esi, [esp+9Ch+var_7C]
		jmp	loc_40D837
; ---------------------------------------------------------------------------

loc_40E479:				; CODE XREF: sub_40D690+8CFj
		mov	esi, [edx+4]
		mov	edi, offset aJarray ; "JArray"
		mov	ecx, 6
		repe cmpsb
		jnz	loc_40DF65
		mov	edx, [ebp+8]
		mov	eax, ebx
		call	sub_40D690
		mov	edx, offset asc_41AEDE ; "[]"
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40DFA8
; ---------------------------------------------------------------------------

loc_40E4A9:				; CODE XREF: sub_40D690+C3Fj
					; sub_40D690+C50j
		test	edx, edx
		jz	loc_40D6CB	; jumptable 0040D6F8 default case
		test	eax, eax
		jnz	loc_40D6CB	; jumptable 0040D6F8 default case
		mov	edx, [edx+4]
		test	edx, edx
		xchg	ax, ax
		jnz	loc_40E276
		jmp	loc_40D6CB	; jumptable 0040D6F8 default case
; ---------------------------------------------------------------------------

loc_40E4CB:				; CODE XREF: sub_40D690+566j
		mov	eax, ebx
		lea	esi, [esi+0]
		call	sub_40EC60
		jmp	loc_40DBFC
; ---------------------------------------------------------------------------

loc_40E4DA:				; CODE XREF: sub_40D690+5F9j
					; sub_40D690+60Ej
		mov	edi, 1
		nop
		jmp	loc_40DD13
; ---------------------------------------------------------------------------

loc_40E4E5:				; CODE XREF: sub_40D690+29Cj
		mov	ecx, [esp+9Ch+var_78]
		lea	eax, [esp+9Ch+var_24]
		mov	[ebx+114h], eax
		mov	[esp+9Ch+var_20], esi
		mov	[esp+9Ch+var_24], ecx
		jmp	loc_40D9EE
; ---------------------------------------------------------------------------

loc_40E500:				; CODE XREF: sub_40D690+36Bj
		mov	eax, [esp+9Ch+var_24]
		mov	[ebx+114h], eax
		jmp	loc_40DA01
; ---------------------------------------------------------------------------

loc_40E50F:				; CODE XREF: sub_40D690+104j
		mov	edx, [ebp+4]
		mov	eax, ebx
		call	sub_40ED40
		mov	edx, offset a___ ; "..."
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
; ---------------------------------------------------------------------------

loc_40E52A:				; CODE XREF: sub_40D690+B34j
		cmp	ebp, edi
		mov	ecx, esi
		mov	esi, [esp+9Ch+var_7C]
		jnb	loc_40D837
		cmp	ecx, 0FFh
		xchg	ax, ax
		ja	loc_40D837
		cmp	al, 5Fh
		jnz	loc_40D837
		movsx	edx, cl
		mov	eax, ebx
		call	sub_40B100
		lea	esi, [ebp+1]
		jmp	loc_40D841
; ---------------------------------------------------------------------------

loc_40E560:				; CODE XREF: sub_40D690+247j
		mov	edi, 1
		jmp	loc_40D929
; ---------------------------------------------------------------------------

loc_40E56A:				; CODE XREF: sub_40D690+CC0j
		mov	edx, 2Dh
		mov	eax, ebx
		call	sub_40B100
		mov	edx, [ebp+8]
		jmp	loc_40E356
; ---------------------------------------------------------------------------

loc_40E57E:				; CODE XREF: sub_40D690+C8Dj
		mov	edx, offset aFalse ; "false"
		mov	eax, ebx
		call	sub_40CE60
		jmp	loc_40D6D5	; jumptable 0040E369 default case
sub_40D690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40E590	proc near		; CODE XREF: .text:0040E858p
					; sub_40E870+64p

var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_174		= dword	ptr -174h
var_170		= byte ptr -170h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 18Ch
		mov	[ebp+var_17C], edx
		mov	[ebp+var_180], ecx
		cmp	byte ptr [eax],	5Fh
		jz	loc_40E760

loc_40E5B3:				; CODE XREF: sub_40E590+1D9j
		mov	edi, offset a_global_ ;	"_GLOBAL_"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_40E5F0
		movzx	eax, byte ptr [ebx+8]
		cmp	al, 5Fh
		jz	short loc_40E5D3
		cmp	al, 2Eh
		jnz	loc_40E750

loc_40E5D3:				; CODE XREF: sub_40E590+39j
					; sub_40E590+1C8j
		movzx	eax, byte ptr [ebx+9]
		cmp	al, 49h
		setz	dl
		jz	short loc_40E5E2
		cmp	al, 44h
		jnz	short loc_40E5F0

loc_40E5E2:				; CODE XREF: sub_40E590+4Cj
		cmp	byte ptr [ebx+0Ah], 5Fh
		jz	loc_40E816
		lea	esi, [esi+0]

loc_40E5F0:				; CODE XREF: sub_40E590+31j
					; sub_40E590+50j ...
		xor	esi, esi
		xor	eax, eax
		test	byte ptr [ebp+var_17C],	10h
		jz	loc_40E742

loc_40E601:				; CODE XREF: sub_40E590+1E0j
					; sub_40E590+291j
		mov	[esp], ebx	; char *
		mov	edi, esp
		call	strlen
		mov	[ebp+var_4C], ebx
		mov	[ebp+var_40], ebx
		mov	[ebp+var_38], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_24], 0
		lea	edx, [ebx+eax]
		mov	[ebp+var_48], edx
		mov	edx, [ebp+var_17C]
		lea	ecx, ds:0[eax*4]
		mov	[ebp+var_28], eax
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_44], edx
		lea	edx, [eax+eax]
		mov	[ebp+var_34], edx
		lea	edx, [ecx+edx]
		lea	eax, ds:1Eh[edx*4]
		and	eax, 0FFFFFFF0h
		call	sub_410250
		lea	edx, [esp+1Bh]
		lea	eax, [ecx+1Eh]
		and	edx, 0FFFFFFF0h
		and	eax, 0FFFFFFF0h
		call	sub_410250
		lea	eax, [esp+1Bh]
		and	eax, 0FFFFFFF0h
		cmp	esi, 1
		mov	[ebp+var_3C], edx
		mov	[ebp+var_30], eax
		jz	loc_40E7D5
		jnb	loc_40E775

loc_40E693:				; CODE XREF: sub_40E590+1E8j
		lea	eax, [ebp+var_4C]
		call	sub_40B640
		mov	edx, eax

loc_40E69D:				; CODE XREF: sub_40E590+240j
					; sub_40E590+24Cj ...
		test	byte ptr [ebp+var_17C],	1
		jz	short loc_40E6B2
		mov	eax, [ebp+var_40]
		cmp	byte ptr [eax],	0
		jnz	loc_40E7E1

loc_40E6B2:				; CODE XREF: sub_40E590+114j
		test	edx, edx
		jz	loc_40E7E1
		mov	eax, [ebp+var_17C]
		mov	[ebp+var_70], 0
		mov	[ebp+var_6C], 0
		mov	[ebp+var_60], 0
		mov	[ebp+var_174], eax
		mov	eax, [ebp+var_180]
		mov	[ebp+var_5C], 0
		mov	[ebp+var_50], 0
		mov	[ebp+var_58], 0
		mov	[ebp+var_68], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_64], eax
		lea	eax, [ebp+var_174]
		call	sub_40D690
		mov	eax, [ebp+var_70]
		mov	[ebp+eax+var_170], 0
		mov	eax, [ebp+var_64]
		mov	[esp+8], eax
		mov	eax, [ebp+var_70]
		mov	[esp+4], eax
		lea	eax, [ebp+var_170]
		mov	[esp], eax
		call	[ebp+var_68]
		xor	eax, eax
		add	[ebp+var_50], 1
		cmp	[ebp+var_58], 0
		mov	[ebp+var_70], 0
		mov	esp, edi
		setz	al

loc_40E742:				; CODE XREF: sub_40E590+6Bj
					; sub_40E590+255j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E750:				; CODE XREF: sub_40E590+3Dj
		cmp	al, 24h
		jnz	loc_40E5F0
		jmp	loc_40E5D3
; ---------------------------------------------------------------------------
		align 10h

loc_40E760:				; CODE XREF: sub_40E590+1Dj
		cmp	byte ptr [eax+1], 5Ah
		mov	esi, 1
		jnz	loc_40E5B3
		nop
		jmp	loc_40E601
; ---------------------------------------------------------------------------

loc_40E775:				; CODE XREF: sub_40E590+FDj
		cmp	esi, 3
		ja	loc_40E693
		add	ebx, 0Bh
		mov	[ebp+var_40], ebx
		mov	[esp], ebx	; char *
		call	strlen
		mov	edx, ebx
		mov	ecx, eax
		lea	eax, [ebp+var_4C]
		call	sub_40AD30
		xor	edx, edx
		cmp	esi, 2
		setnz	dl
		add	edx, 3Ah
		mov	dword ptr [esp], 0
		mov	ecx, eax
		lea	eax, [ebp+var_4C]
		call	sub_40ACB0
		mov	ebx, [ebp+var_40]
		mov	[esp], ebx	; char *
		mov	[ebp+var_184], eax
		call	strlen
		mov	edx, [ebp+var_184]
		add	ebx, eax
		mov	[ebp+var_40], ebx
		jmp	loc_40E69D
; ---------------------------------------------------------------------------

loc_40E7D5:				; CODE XREF: sub_40E590+F7j
		cmp	byte ptr [ebx],	5Fh
		jz	short loc_40E7F0

loc_40E7DA:				; CODE XREF: sub_40E590+26Aj
		xor	edx, edx
		jmp	loc_40E69D
; ---------------------------------------------------------------------------

loc_40E7E1:				; CODE XREF: sub_40E590+11Cj
					; sub_40E590+124j
		xor	eax, eax
		mov	esp, edi
		jmp	loc_40E742
; ---------------------------------------------------------------------------
		align 10h

loc_40E7F0:				; CODE XREF: sub_40E590+248j
		lea	eax, [ebx+1]
		mov	[ebp+var_40], eax
		cmp	byte ptr [ebx+1], 5Ah
		jnz	short loc_40E7DA
		mov	edx, 1
		add	ebx, 2
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_40], ebx
		call	sub_40C6E0
		mov	edx, eax
		jmp	loc_40E69D
; ---------------------------------------------------------------------------

loc_40E816:				; CODE XREF: sub_40E590+56j
		mov	esi, edx
		shl	esi, 1Fh
		sar	esi, 1Fh
		add	esi, 3
		jmp	loc_40E601
sub_40E590	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	ecx, [esp+24h]
		mov	eax, [esp+20h]
		test	ecx, ecx
		jnz	short loc_40E848

loc_40E83F:				; CODE XREF: .text:0040E84Aj
		mov	eax, 0FFFFFFFDh

loc_40E844:				; CODE XREF: .text:0040E865j
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_40E848:				; CODE XREF: .text:0040E83Dj
		test	eax, eax
		jz	short loc_40E83F
		mov	edx, [esp+28h]
		mov	[esp], edx
		mov	edx, 11h
		call	sub_40E590
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		jmp	short loc_40E844
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_40E870(int, char *, int, int)
sub_40E870	proc near		; CODE XREF: sub_412830+B5p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_10], ebx
		mov	ebx, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_C], esi
		mov	esi, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_8], edi
		mov	edi, [esp+4Ch+arg_C]
		test	eax, eax
		mov	[esp+4Ch+var_4], ebp
		jz	loc_40E96A
		test	ebx, ebx
		jz	loc_40E962

loc_40E8A3:				; CODE XREF: sub_40E870+F4j
		lea	edx, [esp+4Ch+var_2C]
		mov	ecx, offset sub_40CCD0
		mov	[esp+4Ch+var_4C], edx
		mov	edx, 11h
		mov	[esp+4Ch+var_2C], 0
		mov	[esp+4Ch+var_28], 0
		mov	[esp+4Ch+var_24], 0
		mov	[esp+4Ch+var_20], 0
		call	sub_40E590
		test	eax, eax
		jz	loc_40E972
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_30], 1
		test	edx, edx
		jz	short loc_40E958

loc_40E8F1:				; CODE XREF: sub_40E870+F0j
		mov	ebp, [esp+4Ch+var_2C]
		test	ebp, ebp
		jz	loc_40E986
		test	esi, esi
		jz	loc_40E9B0
		mov	[esp+4Ch+var_4C], ebp ;	char *
		call	strlen
		cmp	eax, [ebx]
		nop
		jb	short loc_40E940
		mov	[esp+4Ch+var_4C], esi ;	void *
		call	free

loc_40E91A:				; CODE XREF: sub_40E870+142j
		mov	eax, [esp+4Ch+var_30]
		mov	[ebx], eax

loc_40E920:				; CODE XREF: sub_40E870+E6j
					; sub_40E870+148j
		test	edi, edi
		jz	short loc_40E92A
		mov	dword ptr [edi], 0

loc_40E92A:				; CODE XREF: sub_40E870+B2j
					; sub_40E870+100j ...
		mov	eax, ebp
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_40E940:				; CODE XREF: sub_40E870+A0j
		mov	[esp+4Ch+var_48], ebp ;	char *
		mov	[esp+4Ch+var_4C], esi ;	char *
		call	strcpy
		mov	[esp+4Ch+var_4C], ebp ;	void *
		mov	ebp, esi
		call	free
		jmp	short loc_40E920
; ---------------------------------------------------------------------------

loc_40E958:				; CODE XREF: sub_40E870+7Fj
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_30], eax
		jmp	short loc_40E8F1
; ---------------------------------------------------------------------------

loc_40E962:				; CODE XREF: sub_40E870+2Dj
		test	esi, esi
		jz	loc_40E8A3

loc_40E96A:				; CODE XREF: sub_40E870+25j
		test	edi, edi
		jnz	short loc_40E9A0

loc_40E96E:				; CODE XREF: sub_40E870+118j
		xor	ebp, ebp
		jmp	short loc_40E92A
; ---------------------------------------------------------------------------

loc_40E972:				; CODE XREF: sub_40E870+6Bj
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax ;	void *
		call	free
		mov	[esp+4Ch+var_30], 0

loc_40E986:				; CODE XREF: sub_40E870+87j
		test	edi, edi
		jz	short loc_40E96E
		cmp	[esp+4Ch+var_30], 1
		jz	short loc_40E9BD
		mov	dword ptr [edi], 0FFFFFFFEh
		xor	ebp, ebp
		jmp	short loc_40E92A
; ---------------------------------------------------------------------------
		align 10h

loc_40E9A0:				; CODE XREF: sub_40E870+FCj
		mov	dword ptr [edi], 0FFFFFFFDh
		xor	ebp, ebp
		jmp	loc_40E92A
; ---------------------------------------------------------------------------
		align 10h

loc_40E9B0:				; CODE XREF: sub_40E870+8Fj
		test	ebx, ebx
		jnz	loc_40E91A
		jmp	loc_40E920
; ---------------------------------------------------------------------------

loc_40E9BD:				; CODE XREF: sub_40E870+11Fj
		mov	dword ptr [edi], 0FFFFFFFFh
		xor	ebp, ebp
		jmp	loc_40E92A
sub_40E870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E9D0	proc near		; CODE XREF: sub_40D230+40p
					; sub_40D690+3ADp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], ebx
		mov	ebx, edx
		mov	[esp+0Ch+var_4], esi
		mov	esi, eax
		mov	eax, [edx]
		sub	eax, 3
		cmp	eax, 24h	; switch 37 cases
		jbe	short loc_40EA00

loc_40E9E9:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, ebx	; jumptable 0040EA00 default case

loc_40E9EB:				; CODE XREF: sub_40E9D0+3Aj
					; sub_40E9D0+76j
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_40D690
; ---------------------------------------------------------------------------
		align 10h

loc_40EA00:				; CODE XREF: sub_40E9D0+17j
		jmp	ds:off_41B1C4[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_40EA07:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, [edx+4]	; jumptable 0040EA00 case 0
		jmp	short loc_40E9EB
; ---------------------------------------------------------------------------
		align 10h

loc_40EA10:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, offset aRestrict ;	jumptable 0040EA00 cases 20,23

loc_40EA15:				; CODE XREF: sub_40E9D0+5Cj
					; sub_40E9D0+65j ...
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_40CE60
; ---------------------------------------------------------------------------

loc_40EA27:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, offset aVolatile ;	jumptable 0040EA00 cases 21,24
		jmp	short loc_40EA15
; ---------------------------------------------------------------------------
		align 10h

loc_40EA30:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, offset aConst ; jumptable 0040EA00	cases 22,25
		jmp	short loc_40EA15
; ---------------------------------------------------------------------------

loc_40EA37:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, 20h	; jumptable 0040EA00 case 26
		mov	eax, esi
		call	sub_40B100
		mov	edx, [ebx+8]
		jmp	short loc_40E9EB
; ---------------------------------------------------------------------------

loc_40EA48:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		test	byte ptr [esi],	4 ; jumptable 0040EA00 case 27
		mov	edx, 2Ah
		jz	short loc_40EA65
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40EA60:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, 26h	; jumptable 0040EA00 case 28

loc_40EA65:				; CODE XREF: sub_40E9D0+80j
		mov	eax, esi
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	sub_40B100
; ---------------------------------------------------------------------------

loc_40EA77:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, offset asc_41B1AB ; jumptable 0040EA00 case 29
		jmp	short loc_40EA15
; ---------------------------------------------------------------------------
		align 10h

loc_40EA80:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, offset aComplex ; jumptable 0040EA00 case 30
		jmp	short loc_40EA15
; ---------------------------------------------------------------------------

loc_40EA87:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		mov	edx, offset aImaginary ; jumptable 0040EA00 case 31
		jmp	short loc_40EA15
; ---------------------------------------------------------------------------
		align 10h

loc_40EA90:				; CODE XREF: sub_40E9D0:loc_40EA00j
					; DATA XREF: .rdata:off_41B1C4o
		cmp	byte ptr [esi+108h], 28h ; jumptable 0040EA00 case 36
		jz	short loc_40EAA5
		mov	edx, 20h
		mov	eax, esi
		call	sub_40B100

loc_40EAA5:				; CODE XREF: sub_40E9D0+C7j
		mov	edx, [ebx+4]
		mov	eax, esi
		call	sub_40D690
		mov	edx, offset asc_41AFD8 ; "::*"
		jmp	loc_40EA15
sub_40E9D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40EAC0	proc near		; CODE XREF: sub_40D690+4E6p
					; sub_40D690+BADp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	[esp+2Ch+var_8], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], edi
		mov	edx, [edx+4]
		cmp	dword ptr [edx], 4
		jz	short loc_40EAF0
		call	sub_40D690
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_40EAF0:				; CODE XREF: sub_40EAC0+19j
		mov	edi, [eax+118h]
		mov	dword ptr [eax+118h], 0
		mov	eax, [eax+114h]
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[ebx+114h], eax
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_10], eax
		mov	edx, [eax+4]
		mov	eax, ebx
		call	sub_40D690
		mov	eax, [esp+2Ch+var_14]
		cmp	byte ptr [ebx+108h], 3Ch
		mov	[ebx+114h], eax
		jz	loc_40EC34

loc_40EB3C:				; CODE XREF: sub_40EAC0+180j
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_40EBB0

loc_40EB4C:				; CODE XREF: sub_40EAC0+12Dj
		mov	byte ptr [ebx+eax+4], 3Ch
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 3Ch
		mov	eax, [esi+4]
		mov	edx, [eax+8]
		mov	eax, ebx
		call	sub_40D690
		cmp	byte ptr [ebx+108h], 3Eh
		jz	loc_40EC45

loc_40EB78:				; CODE XREF: sub_40EAC0+191j
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_40EBF2

loc_40EB88:				; CODE XREF: sub_40EAC0+16Fj
		mov	byte ptr [ebx+eax+4], 3Eh
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 3Eh
		mov	[ebx+118h], edi
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_40EBB0:				; CODE XREF: sub_40EAC0+8Aj
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40EB4C
; ---------------------------------------------------------------------------

loc_40EBF2:				; CODE XREF: sub_40EAC0+C6j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40EB88
; ---------------------------------------------------------------------------

loc_40EC34:				; CODE XREF: sub_40EAC0+76j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40EB3C
; ---------------------------------------------------------------------------

loc_40EC45:				; CODE XREF: sub_40EAC0+B2j
		mov	edx, 20h
		mov	eax, ebx
		call	sub_40B100
		jmp	loc_40EB78
sub_40EAC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40EC60	proc near		; CODE XREF: sub_40D690+500p
					; sub_40D690+991p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	[esp+3Ch+var_C], esi
		mov	[esp+3Ch+var_8], edi
		mov	[esp+3Ch+var_4], ebp
		cmp	dword ptr [edx], 2Bh
		jz	short loc_40EC90
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		jmp	sub_40D690
; ---------------------------------------------------------------------------

loc_40EC90:				; CODE XREF: sub_40EC60+16j
		mov	edx, [edx+4]
		mov	edi, [edx+8]
		mov	ebp, [edx+4]
		test	edi, edi
		jz	loc_40ED28
		lea	ecx, [eax+4]
		mov	edx, [eax+104h]
		xor	ebx, ebx
		mov	[esp+3Ch+var_20], ecx
		mov	esi, eax
		jmp	short loc_40ECCD
; ---------------------------------------------------------------------------

loc_40ECB4:				; CODE XREF: sub_40EC60+7Bj
					; sub_40EC60+C6j
		add	ebx, 1
		cmp	edi, ebx
		mov	[esi+edx+4], al
		mov	[esi+104h], ecx
		mov	[esi+108h], al
		jbe	short loc_40ED28
		mov	edx, ecx

loc_40ECCD:				; CODE XREF: sub_40EC60+52j
		cmp	edx, 0FFh
		movzx	eax, byte ptr [ebp+ebx+0]
		lea	ecx, [edx+1]
		jnz	short loc_40ECB4
		mov	edx, [esi+110h]
		mov	byte ptr [esi+103h], 0
		mov	[esp+3Ch+var_24], al
		mov	[esp+3Ch+var_34], edx
		mov	edx, [esi+104h]
		mov	[esp+3Ch+var_38], edx
		mov	edx, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], edx
		call	dword ptr [esi+10Ch]
		mov	ecx, 1
		xor	edx, edx
		mov	dword ptr [esi+104h], 0
		movzx	eax, [esp+3Ch+var_24]
		add	dword ptr [esi+124h], 1
		jmp	short loc_40ECB4
; ---------------------------------------------------------------------------

loc_40ED28:				; CODE XREF: sub_40EC60+3Bj
					; sub_40EC60+69j
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
sub_40EC60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40ED40	proc near		; CODE XREF: sub_40D690+50Ap
					; sub_40D690+536p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, eax
		sub	esp, 28h
		mov	eax, [edx]
		cmp	eax, 6
		jz	short loc_40ED51
		test	eax, eax
		jnz	short loc_40ED60

loc_40ED51:				; CODE XREF: sub_40ED40+Bj
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	sub_40D690
; ---------------------------------------------------------------------------
		align 10h

loc_40ED60:				; CODE XREF: sub_40ED40+Fj
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	ecx, [eax+1]
		jz	short loc_40EDB0

loc_40ED70:				; CODE XREF: sub_40ED40+B5j
		mov	byte ptr [ebx+eax+4], 28h
		mov	eax, ebx
		mov	[ebx+104h], ecx
		mov	byte ptr [ebx+108h], 28h
		call	sub_40D690
		mov	eax, [ebx+104h]
		cmp	eax, 0FFh
		lea	edx, [eax+1]
		jz	short loc_40EE00

loc_40ED99:				; CODE XREF: sub_40ED40+FDj
		mov	byte ptr [ebx+eax+4], 29h
		mov	[ebx+104h], edx
		mov	byte ptr [ebx+108h], 29h
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40EDB0:				; CODE XREF: sub_40ED40+2Ej
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	ecx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		mov	edx, [esp+2Ch+var_10]
		add	dword ptr [ebx+124h], 1
		jmp	loc_40ED70
; ---------------------------------------------------------------------------
		align 10h

loc_40EE00:				; CODE XREF: sub_40ED40+57j
		mov	eax, [ebx+110h]
		mov	byte ptr [ebx+103h], 0
		mov	[esp+2Ch+var_28], 0FFh
		mov	[esp+2Ch+var_24], eax
		lea	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], eax
		call	dword ptr [ebx+10Ch]
		mov	edx, 1
		xor	eax, eax
		mov	dword ptr [ebx+104h], 0
		add	dword ptr [ebx+124h], 1
		jmp	loc_40ED99
sub_40ED40	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:00421024o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_40EE80
		cmp	eax, 3
		jz	short loc_40EE80
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_40EE80:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_40FC20
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_401190+110p
					; DATA XREF: .rdata:off_41BCE0o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_415014, 2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_40EECB
		mov	dword_415014, 2

loc_40EECB:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_40EEE1
		cmp	eax, 1
		jz	short loc_40EF10

loc_40EED5:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_40EEE1:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_421030
		cmp	ebx, offset dword_421030
		jz	short loc_40EED5
		xchg	ax, ax

loc_40EEF0:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_40EEF8
		call	eax

loc_40EEF8:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_421030
		jnz	short loc_40EEF0
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_40EF10:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_40FC20
		jmp	short loc_40EED5
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40EF30	proc near		; DATA XREF: .CRT:00421014o
		sub	esp, 0Ch
		mov	eax, ds:__lconv_init
		add	esp, 0Ch
		jmp	eax
sub_40EF30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40EF40	proc near		; CODE XREF: sub_40EF60+10p
					; sub_40EF60+36p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_40EF40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40EF50	proc near		; CODE XREF: sub_401060+5Ap
					; sub_40EF60+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_40EF50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_40EF60(_onexit_t)
sub_40EF60	proc near		; CODE XREF: sub_40F020+Ap

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_41D3F8
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	sub_40EF40
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_10], eax
		jz	loc_40F000
		mov	[esp+2Ch+var_2C], 8
		call	_lock
		mov	eax, ds:dword_41D3F8
		mov	[esp+2Ch+var_2C], eax
		call	sub_40EF40
		mov	[esp+2Ch+var_10], eax
		mov	eax, ds:dword_41D3F4
		mov	[esp+2Ch+var_2C], eax
		call	sub_40EF40
		mov	[esp+2Ch+var_2C], ebx
		mov	[esp+2Ch+var_14], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	sub_40EF50
		mov	ds:dword_41D3F8, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_2C], eax
		call	sub_40EF50
		mov	[esp+2Ch+var_2C], 8
		mov	ds:dword_41D3F4, eax
		call	_unlock
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40F000:				; CODE XREF: sub_40EF60+1Cj
		mov	[esp+2Ch+var_2C], ebx ;	_onexit_t
		call	ds:_onexit
		add	esp, 28h
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_40EF60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_40F020(_onexit_t)
sub_40F020	proc near		; CODE XREF: sub_401720+90p
					; sub_40FB80-2Fp ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_40EF60
		cmp	eax, 1
		sbb	eax, eax
		add	esp, 1Ch
		retn
sub_40F020	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40F040	proc near		; DATA XREF: sub_401060:loc_401150o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= qword	ptr -2Ch
var_24		= qword	ptr -24h
var_1C		= qword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	edx, offset aUnknownError ; "Unknown error"
		mov	eax, [esp+3Ch+arg_0]
		mov	ecx, [eax]
		sub	ecx, 1
		cmp	ecx, 5
		ja	short loc_40F05D
		mov	edx, ds:off_41BE00[ecx*4]

loc_40F05D:				; CODE XREF: sub_40F040+14j
		fld	qword ptr [eax+18h]
		fstp	[esp+3Ch+var_1C]
		fld	qword ptr [eax+10h]
		fstp	[esp+3Ch+var_24]
		fld	qword ptr [eax+8]
		fstp	[esp+3Ch+var_2C]
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], offset a_matherrSInSGG ; "_matherr():	%s in %s(%g, %g)  (retval=%"...
		mov	[esp+3Ch+var_30], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+3Ch+var_3C], eax ;	FILE *
		call	fprintf
		xor	eax, eax
		add	esp, 3Ch
		retn
sub_40F040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40F0A0	proc near		; CODE XREF: sub_401060+76p
		xor	eax, eax
		retn
sub_40F0A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_40F0B0(char *, char)
sub_40F0B0	proc near		; CODE XREF: sub_40F110+131p
					; sub_40F110+141p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+var_14], 1Bh ;	size_t
		lea	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], 1 ; size_t
		mov	[esp+1Ch+var_1C], offset aMingwW64Runtim ; "Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+var_10], eax ;	FILE *
		call	fwrite
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], ebx ;	va_list
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+var_1C], eax ;	FILE *
		call	vfprintf
		call	abort
sub_40F0B0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_40F110
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_40F110(size_t)
sub_40F110	proc near		; CODE XREF: .text:0040F101j
					; sub_40F260+12Ap ...

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h

		push	ebp
		push	edi
		mov	edi, ecx
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 4Ch
		test	ecx, ecx
		mov	[esp+5Ch+var_40], edx
		jnz	short loc_40F130
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40F130:				; CODE XREF: sub_40F110+11j
		mov	ecx, ds:dword_41D058
		xor	esi, esi
		test	ecx, ecx
		jle	short loc_40F160
		mov	eax, ds:dword_41D054

loc_40F141:				; CODE XREF: sub_40F110+4Ej
		mov	edx, [eax+4]
		cmp	edx, ebx
		ja	short loc_40F156
		mov	ebp, [eax+8]
		add	edx, [ebp+8]
		cmp	ebx, edx
		jb	loc_40F1D9

loc_40F156:				; CODE XREF: sub_40F110+36j
		add	esi, 1
		add	eax, 0Ch
		cmp	esi, ecx
		jl	short loc_40F141

loc_40F160:				; CODE XREF: sub_40F110+2Aj
		mov	[esp+5Ch+lpAddress], ebx
		call	sub_40F560
		test	eax, eax
		mov	ebp, eax
		jz	loc_40F246
		lea	edx, [esi+esi*2]
		mov	esi, ds:dword_41D054
		shl	edx, 2
		mov	[esp+5Ch+var_44], edx
		add	esi, edx
		mov	[esi+8], eax
		mov	dword ptr [esi], 0
		call	sub_40F680
		mov	edx, [esp+5Ch+var_44]
		add	eax, [ebp+0Ch]
		mov	[esi+4], eax
		lea	eax, [esp+5Ch+Buffer]
		mov	[esp+5Ch+lpBuffer], eax	; lpBuffer
		mov	eax, ds:dword_41D054
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, [esp+5Ch+var_44]
		jz	short loc_40F226
		mov	eax, [esp+5Ch+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_40F1F5

loc_40F1D2:				; CODE XREF: sub_40F110+E8j
					; sub_40F110+114j
		add	ds:dword_41D058, 1

loc_40F1D9:				; CODE XREF: sub_40F110+40j
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+dwLength], edi	; size_t
		mov	[esp+5Ch+lpAddress], ebx ; void	*
		mov	[esp+5Ch+lpBuffer], eax	; void *
		call	memcpy
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40F1F5:				; CODE XREF: sub_40F110+C0j
		cmp	eax, 40h
		jz	short loc_40F1D2
		mov	eax, [esp+5Ch+Buffer.RegionSize]
		add	edx, ds:dword_41D054
		mov	[esp+5Ch+dwLength], 40h	; flNewProtect
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [esp+5Ch+Buffer.BaseAddress]
		mov	[esp+5Ch+lpflOldProtect], edx ;	lpflOldProtect
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_40F1D2
; ---------------------------------------------------------------------------

loc_40F226:				; CODE XREF: sub_40F110+B7j
		mov	eax, ds:dword_41D054
		mov	eax, [eax+edx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ebp+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; char
		call	sub_40F0B0
; ---------------------------------------------------------------------------

loc_40F246:				; CODE XREF: sub_40F110+5Cj
		mov	[esp+5Ch+lpBuffer], ebx	; char
		mov	[esp+5Ch+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_40F0B0
sub_40F110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40F260	proc near		; CODE XREF: sub_401190:loc_4012A5p

Buffer		= _MEMORY_BASIC_INFORMATION ptr	-3Ch
flOldProtect	= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_41D05C
		test	ebx, ebx
		jz	short loc_40F280

loc_40F273:				; CODE XREF: sub_40F260+64j
					; sub_40F260+B4j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40F280:				; CODE XREF: sub_40F260+11j
		mov	ds:dword_41D05C, 1
		call	sub_40F5D0
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_410250
		mov	ds:dword_41D058, 0
		lea	eax, [esp+1Fh]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_41D054, eax
		mov	eax, offset dword_41C280
		sub	eax, offset dword_41C280
		cmp	eax, 7
		jle	short loc_40F273
		cmp	eax, 0Bh
		mov	ebx, offset dword_41C280
		jle	short loc_40F2F2
		mov	ecx, ds:dword_41C280
		test	ecx, ecx
		jnz	short loc_40F2F2
		mov	edx, ds:dword_41C284
		test	edx, edx
		jnz	short loc_40F2F2
		mov	eax, ds:dword_41C288
		test	eax, eax
		jnz	short loc_40F2F2
		mov	ebx, offset dword_41C28C

loc_40F2F2:				; CODE XREF: sub_40F260+6Ej
					; sub_40F260+78j ...
		mov	edi, [ebx]
		test	edi, edi
		jnz	short loc_40F360
		mov	esi, [ebx+4]
		test	esi, esi
		jnz	short loc_40F360
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_40F4C3
		add	ebx, 0Ch
		cmp	ebx, offset dword_41C280
		jnb	loc_40F273
		mov	esi, 400000h

loc_40F31F:				; CODE XREF: sub_40F260+217j
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	loc_40F41D
		cmp	edx, 20h
		jz	loc_40F45A
		cmp	edx, 8
		jz	loc_40F43C
		mov	[ebp+var_1C], 0
		mov	[esp+4], edx	; char
		mov	dword ptr [esp], offset	aUnknownPseudoR	; "  Unknown pseudo relocation bit size	%d"...
		call	sub_40F0B0
; ---------------------------------------------------------------------------

loc_40F360:				; CODE XREF: sub_40F260+96j
					; sub_40F260+9Dj
		cmp	ebx, offset dword_41C280
		jnb	loc_40F273
		mov	esi, 400000h
		lea	edi, [ebp+flOldProtect]

loc_40F374:				; CODE XREF: sub_40F260+135j
		mov	eax, [ebx+4]
		mov	ecx, 4		; size_t
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+flOldProtect], edx
		mov	edx, edi
		call	sub_40F110
		cmp	ebx, offset dword_41C280
		jb	short loc_40F374

loc_40F397:				; CODE XREF: sub_40F260+21Dj
		mov	ecx, ds:dword_41D058
		test	ecx, ecx
		jle	loc_40F273
		xor	ebx, ebx
		xor	esi, esi
		lea	edi, [ebp+flOldProtect]
		jmp	short loc_40F3C2
; ---------------------------------------------------------------------------
		align 10h

loc_40F3B0:				; CODE XREF: sub_40F260+16Dj
					; sub_40F260+1BBj
		add	esi, 1
		add	ebx, 0Ch
		cmp	esi, ds:dword_41D058
		jge	loc_40F273

loc_40F3C2:				; CODE XREF: sub_40F260+14Cj
		mov	eax, ds:dword_41D054
		add	eax, ebx
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_40F3B0
		lea	edx, [ebp+Buffer]
		mov	dword ptr [esp+8], 1Ch ; dwLength
		mov	[esp+4], edx	; lpBuffer
		mov	eax, [eax+4]
		mov	[esp], eax	; lpAddress
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_40F4A0
		mov	eax, ds:dword_41D054
		mov	[esp+0Ch], edi	; lpflOldProtect
		mov	eax, [eax+ebx]
		mov	[esp+8], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+4], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp], eax	; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_40F3B0
; ---------------------------------------------------------------------------

loc_40F41D:				; CODE XREF: sub_40F260+D1j
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_40F491
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_40F42D:				; CODE XREF: sub_40F260+23Ej
		mov	ecx, 2		; size_t
		lea	edx, [ebp+var_1C]
		call	sub_40F110
		jmp	short loc_40F46E
; ---------------------------------------------------------------------------

loc_40F43C:				; CODE XREF: sub_40F260+E3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_40F482
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_40F44B:				; CODE XREF: sub_40F260+22Fj
		mov	ecx, 1		; size_t
		lea	edx, [ebp+var_1C]
		call	sub_40F110
		jmp	short loc_40F46E
; ---------------------------------------------------------------------------

loc_40F45A:				; CODE XREF: sub_40F260+DAj
		add	edi, [eax]
		lea	edx, [ebp+var_1C]
		sub	edi, ecx
		mov	ecx, 4		; size_t
		mov	[ebp+var_1C], edi
		call	sub_40F110

loc_40F46E:				; CODE XREF: sub_40F260+1DAj
					; sub_40F260+1F8j
		add	ebx, 0Ch
		cmp	ebx, offset dword_41C280
		jb	loc_40F31F
		jmp	loc_40F397
; ---------------------------------------------------------------------------

loc_40F482:				; CODE XREF: sub_40F260+1E1j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_40F44B
; ---------------------------------------------------------------------------

loc_40F491:				; CODE XREF: sub_40F260+1C3j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_40F42D
; ---------------------------------------------------------------------------

loc_40F4A0:				; CODE XREF: sub_40F260+18Fj
		add	ebx, ds:dword_41D054
		mov	eax, [ebx+4]
		mov	[esp+8], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	dword ptr [esp], offset	aVirtualqueryFa	; "  VirtualQuery failed for %d	bytes at a"...
		mov	[esp+4], eax	; char
		call	sub_40F0B0
; ---------------------------------------------------------------------------

loc_40F4C3:				; CODE XREF: sub_40F260+A5j
		mov	[esp+4], eax	; char
		mov	dword ptr [esp], offset	aUnknownPseud_0	; "  Unknown pseudo relocation protocol	ve"...
		call	sub_40F0B0
sub_40F260	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_40F4F0

loc_40F4EB:				; CODE XREF: .text:0040F4F9j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40F4F0:				; CODE XREF: .text:0040F4E9j
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_40F4EB
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		mov	eax, [esp+0Ch]
		mov	ebx, [esp+10h]
		add	eax, [eax+3Ch]
		movzx	esi, word ptr [eax+6]
		movzx	edx, word ptr [eax+14h]
		test	esi, esi
		jz	short loc_40F54C
		movzx	edx, dx
		lea	eax, [eax+edx+18h]
		xor	edx, edx
		jmp	short loc_40F537
; ---------------------------------------------------------------------------

loc_40F534:				; CODE XREF: .text:0040F54Aj
		add	eax, 28h

loc_40F537:				; CODE XREF: .text:0040F532j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_40F545
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_40F54E

loc_40F545:				; CODE XREF: .text:0040F53Cj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_40F534

loc_40F54C:				; CODE XREF: .text:0040F527j
		xor	eax, eax

loc_40F54E:				; CODE XREF: .text:0040F543j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_40F560
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40F560	proc near		; CODE XREF: sub_40F110+53p
					; .text:0040F551j

arg_0		= dword	ptr  4

		cmp	word ptr ds:400000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_40F572

loc_40F56D:				; CODE XREF: sub_40F560+27j
					; sub_40F560+2Fj ...
		xor	eax, eax

loc_40F56F:				; CODE XREF: sub_40F560+61j
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40F572:				; CODE XREF: sub_40F560+Bj
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_40F56D
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_40F56D
		mov	ebx, [esp+8+arg_0]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 400000h
		test	esi, esi
		jz	short loc_40F56D
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_40F5B5
; ---------------------------------------------------------------------------

loc_40F5B2:				; CODE XREF: sub_40F560+68j
		add	eax, 28h

loc_40F5B5:				; CODE XREF: sub_40F560+50j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_40F5C3
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_40F56F

loc_40F5C3:				; CODE XREF: sub_40F560+5Aj
		add	edx, 1
		cmp	edx, esi
		jb	short loc_40F5B2
		jmp	short loc_40F56D
sub_40F560	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40F5D0	proc near		; CODE XREF: sub_40F260+2Ap
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_40F5E0

loc_40F5DB:				; CODE XREF: sub_40F5D0+25j
					; sub_40F5D0+2Dj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40F5E0:				; CODE XREF: sub_40F5D0+9j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_40F5DB
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_40F5DB
		movzx	eax, word ptr [edx+6]
		retn
sub_40F5D0	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:400000h, 5A4Dh
		push	ebx
		mov	edx, [esp+8]
		jz	short loc_40F624

loc_40F620:				; CODE XREF: .text:0040F639j
					; .text:0040F641j ...
		xor	eax, eax

loc_40F622:				; CODE XREF: .text:0040F66Bj
					; .text:0040F679j
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40F624:				; CODE XREF: .text:0040F61Ej
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	ecx, [eax+400000h]
		jnz	short loc_40F620
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_40F620
		movzx	ebx, word ptr [ecx+6]
		movzx	eax, word ptr [ecx+14h]
		test	ebx, ebx
		jz	short loc_40F620
		movzx	eax, ax
		lea	eax, [ecx+eax+18h]
		xor	ecx, ecx
		jmp	short loc_40F663
; ---------------------------------------------------------------------------
		align 10h

loc_40F660:				; CODE XREF: .text:0040F675j
		add	eax, 28h

loc_40F663:				; CODE XREF: .text:0040F658j
		test	byte ptr [eax+27h], 20h
		jz	short loc_40F670
		test	edx, edx
		jz	short loc_40F622
		sub	edx, 1

loc_40F670:				; CODE XREF: .text:0040F667j
		add	ecx, 1
		cmp	ecx, ebx
		jb	short loc_40F660
		xor	eax, eax
		jmp	short loc_40F622
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40F680	proc near		; CODE XREF: sub_40F110+7Dp
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_40F690

loc_40F68B:				; CODE XREF: sub_40F680+25j
		xor	eax, eax

locret_40F68D:				; CODE XREF: sub_40F680+32j
					; sub_40F680+36j
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_40F690:				; CODE XREF: sub_40F680+9j
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_40F68B
		cmp	word ptr [edx+18h], 10Bh
		mov	eax, 400000h
		jz	short locret_40F68D
		xor	eax, eax
		jmp	short locret_40F68D
sub_40F680	endp

; ---------------------------------------------------------------------------
		align 10h
		cmp	word ptr ds:400000h, 5A4Dh
		push	esi
		push	ebx
		jz	short loc_40F6D2

loc_40F6CD:				; CODE XREF: .text:0040F6E7j
					; .text:0040F6EFj ...
		xor	eax, eax
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40F6D2:				; CODE XREF: .text:0040F6CBj
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_40F6CD
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_40F6CD
		mov	ebx, [esp+0Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		sub	ebx, 400000h
		test	esi, esi
		jz	short loc_40F6CD
		movzx	eax, ax
		lea	eax, [edx+eax+18h]
		xor	edx, edx
		jmp	short loc_40F715
; ---------------------------------------------------------------------------

loc_40F712:				; CODE XREF: .text:0040F728j
		add	eax, 28h

loc_40F715:				; CODE XREF: .text:0040F710j
		mov	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jb	short loc_40F723
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_40F730

loc_40F723:				; CODE XREF: .text:0040F71Aj
		add	edx, 1
		cmp	esi, edx
		ja	short loc_40F712
		jmp	short loc_40F6CD
; ---------------------------------------------------------------------------
		align 10h

loc_40F730:				; CODE XREF: .text:0040F721j
		test	eax, eax
		jz	short loc_40F6CD
		mov	eax, [eax+24h]
		pop	ebx
		pop	esi
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40F740	proc near		; CODE XREF: sub_40F810+58p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		cmp	word ptr ds:400000h, 5A4Dh
		mov	[esp+0Ch+var_C], ebx
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		jz	short loc_40F770

loc_40F75D:				; CODE XREF: sub_40F740+46j
					; sub_40F740+4Ej ...
		xor	eax, eax

loc_40F75F:				; CODE XREF: sub_40F740+C8j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40F770:				; CODE XREF: sub_40F740+1Bj
		mov	edx, ds:40003Ch
		cmp	dword ptr [edx+400000h], 4550h
		lea	ecx, [edx+400000h]
		jnz	short loc_40F75D
		cmp	word ptr [ecx+18h], 10Bh
		jnz	short loc_40F75D
		mov	esi, [ecx+80h]
		test	esi, esi
		jz	short loc_40F75D
		movzx	edi, word ptr [ecx+6]
		movzx	edx, word ptr [ecx+14h]
		test	edi, edi
		jz	short loc_40F75D
		movzx	edx, dx
		lea	edx, [ecx+edx+18h]
		xor	ecx, ecx
		jmp	short loc_40F7B4
; ---------------------------------------------------------------------------

loc_40F7B1:				; CODE XREF: sub_40F740+87j
		add	edx, 28h

loc_40F7B4:				; CODE XREF: sub_40F740+6Fj
		mov	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_40F7C2
		add	ebx, [edx+8]
		cmp	esi, ebx
		jb	short loc_40F7CB

loc_40F7C2:				; CODE XREF: sub_40F740+79j
		add	ecx, 1
		cmp	edi, ecx
		ja	short loc_40F7B1
		jmp	short loc_40F75D
; ---------------------------------------------------------------------------

loc_40F7CB:				; CODE XREF: sub_40F740+80j
		test	edx, edx
		lea	esi, [esi+0]
		jz	short loc_40F75D
		add	esi, 400000h
		jmp	short loc_40F7EA
; ---------------------------------------------------------------------------
		align 10h

loc_40F7E0:				; CODE XREF: sub_40F740+AFj
					; sub_40F740+B6j
		test	eax, eax
		jle	short loc_40F800
		sub	eax, 1
		add	esi, 14h

loc_40F7EA:				; CODE XREF: sub_40F740+98j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jnz	short loc_40F7E0
		mov	edx, [esi+0Ch]
		test	edx, edx
		jnz	short loc_40F7E0
		jmp	loc_40F75D
; ---------------------------------------------------------------------------
		align 10h

loc_40F800:				; CODE XREF: sub_40F740+A2j
		mov	eax, 400000h
		add	eax, [esi+0Ch]
		jmp	loc_40F75F
sub_40F740	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40F810	proc near		; CODE XREF: sub_401190+12Fp

lpModuleName	= dword	ptr -1Ch

		push	ebx
		xor	edx, edx
		sub	esp, 18h
		mov	eax, ds:dword_41D060
		test	eax, eax
		jz	short loc_40F862

loc_40F81F:				; CODE XREF: sub_40F810+9Fj
					; sub_40F810+BAj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40F824:				; CODE XREF: sub_40F810+83j
					; sub_40F810+88j
		movzx	edx, byte ptr [eax+3]
		cmp	dl, 43h
		jz	short loc_40F832
		cmp	dl, 63h
		jnz	short loc_40F860

loc_40F832:				; CODE XREF: sub_40F810+1Bj
		movzx	edx, byte ptr [eax+4]
		cmp	dl, 52h
		jz	short loc_40F842
		cmp	dl, 72h
		xchg	ax, ax
		jnz	short loc_40F860

loc_40F842:				; CODE XREF: sub_40F810+29j
		movzx	edx, byte ptr [eax+5]
		cmp	dl, 54h
		jz	short loc_40F89E
		cmp	dl, 74h
		xchg	ax, ax
		jz	short loc_40F89E
		sub	edx, 30h
		cmp	dl, 9
		jbe	short loc_40F89E
		lea	esi, [esi+0]

loc_40F860:				; CODE XREF: sub_40F810+20j
					; sub_40F810+30j ...
		mov	edx, ebx

loc_40F862:				; CODE XREF: sub_40F810+Dj
					; sub_40F810+8Cj
		lea	ebx, [edx+1]
		mov	[esp+1Ch+lpModuleName],	edx
		call	sub_40F740
		test	eax, eax
		jz	short loc_40F8B5
		movzx	edx, byte ptr [eax]
		cmp	dl, 4Dh
		jz	short loc_40F87E
		cmp	dl, 6Dh
		jnz	short loc_40F860

loc_40F87E:				; CODE XREF: sub_40F810+67j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, 53h
		jz	short loc_40F88C
		cmp	dl, 73h
		jnz	short loc_40F860

loc_40F88C:				; CODE XREF: sub_40F810+75j
		movzx	edx, byte ptr [eax+2]
		cmp	dl, 56h
		jz	short loc_40F824
		cmp	dl, 76h
		jz	short loc_40F824
		mov	edx, ebx
		jmp	short loc_40F862
; ---------------------------------------------------------------------------

loc_40F89E:				; CODE XREF: sub_40F810+39j
					; sub_40F810+40j ...
		mov	[esp+1Ch+lpModuleName],	eax ; lpModuleName
		call	ds:GetModuleHandleA
		test	eax, eax
		push	ebx
		mov	ds:dword_41D060, eax
		jnz	loc_40F81F

loc_40F8B5:				; CODE XREF: sub_40F810+5Fj
		mov	[esp+1Ch+lpModuleName],	offset LibFileName ; "msvcrt.dll"
		call	ds:LoadLibraryW
		sub	esp, 4
		mov	ds:dword_41D060, eax
		jmp	loc_40F81F
sub_40F810	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	[esp+20h], esi
		mov	esi, [esp+30h]
		mov	[esp+1Ch], ebx
		mov	[esp+24h], edi
		mov	[esp+28h], ebp
		mov	[esp], esi
		call	strlen
		cmp	eax, 8
		jbe	short loc_40F910

loc_40F8F4:				; CODE XREF: .text:0040F919j
					; .text:0040F930j ...
		xor	ebx, ebx

loc_40F8F6:				; CODE XREF: .text:0040F96Aj
		mov	eax, ebx
		mov	esi, [esp+20h]
		mov	ebx, [esp+1Ch]
		mov	edi, [esp+24h]
		mov	ebp, [esp+28h]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40F910:				; CODE XREF: .text:0040F8F2j
		cmp	word ptr ds:400000h, 5A4Dh
		jnz	short loc_40F8F4
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		lea	edx, [eax+400000h]
		jnz	short loc_40F8F4
		cmp	word ptr [edx+18h], 10Bh
		jnz	short loc_40F8F4
		movzx	ebp, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	ebp, ebp
		jz	short loc_40F8F4
		movzx	eax, ax
		xor	edi, edi
		lea	ebx, [edx+eax+18h]
		jmp	short loc_40F954
; ---------------------------------------------------------------------------

loc_40F951:				; CODE XREF: .text:0040F971j
		add	ebx, 28h

loc_40F954:				; CODE XREF: .text:0040F94Fj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], esi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jz	short loc_40F8F6
		add	edi, 1
		cmp	edi, ebp
		jb	short loc_40F951
		jmp	loc_40F8F4
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_41D1A4, edx
		mov	ds:dword_41D080, 0C0000409h
		mov	ds:dword_41D084, 1
		mov	ds:dword_41D198, eax
		mov	ds:dword_41D08C, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_41D18C, eax
		mov	eax, dword_419A70
		mov	[ebp-10h], eax
		mov	eax, dword_419A74
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_41BF00
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40FA10	proc near		; CODE XREF: start+Dp .text:0040150Dp

lpSystemTimeAsFileTime=	dword ptr -4Ch
var_30		= dword	ptr -30h
PerformanceCount= LARGE_INTEGER	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 4Ch
		mov	eax, dword_419A70
		mov	[esp+4Ch+var_10], ebx
		mov	[esp+4Ch+var_C], esi
		mov	[esp+4Ch+var_8], edi
		cmp	eax, 0BB40E64Eh
		mov	[esp+4Ch+var_4], ebp
		jz	short loc_40FA50
		not	eax
		mov	dword_419A74, eax

loc_40FA36:				; CODE XREF: sub_40FA10+BDj
		mov	ebx, [esp+4Ch+var_10]
		mov	esi, [esp+4Ch+var_C]
		mov	edi, [esp+4Ch+var_8]
		mov	ebp, [esp+4Ch+var_4]
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40FA50:				; CODE XREF: sub_40FA10+1Dj
		lea	eax, [esp+4Ch+SystemTimeAsFileTime]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		mov	[esp+4Ch+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[esp+4Ch+SystemTimeAsFileTime.dwHighDateTime], 0
		call	ds:GetSystemTimeAsFileTime
		sub	esp, 4
		mov	eax, [esp+4Ch+SystemTimeAsFileTime.dwHighDateTime]
		mov	ebp, [esp+4Ch+SystemTimeAsFileTime.dwLowDateTime]
		mov	[esp+4Ch+var_30], eax
		call	ds:GetCurrentProcessId
		mov	edi, eax
		call	ds:GetCurrentThreadId
		mov	esi, eax
		call	ds:GetTickCount
		mov	ebx, eax
		lea	eax, [esp+4Ch+PerformanceCount]
		mov	[esp+4Ch+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		sub	esp, 4
		xor	ebp, [esp+4Ch+var_30]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount]
		xor	ebp, dword ptr [esp+4Ch+PerformanceCount+4]
		xor	ebp, edi
		xor	ebp, esi
		xor	ebp, ebx
		mov	eax, ebp
		cmp	ebp, 0BB40E64Eh
		not	eax
		jz	short loc_40FAD2

loc_40FAC2:				; CODE XREF: sub_40FA10+CBj
		mov	dword_419A70, ebp
		mov	dword_419A74, eax
		jmp	loc_40FA36
; ---------------------------------------------------------------------------

loc_40FAD2:				; CODE XREF: sub_40FA10+B0j
		mov	eax, 44BF19B0h
		mov	bp, 0E64Fh
		jmp	short loc_40FAC2
sub_40FA10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40FAE0	proc near		; CODE XREF: sub_401190:loc_4012E5p
					; TopLevelExceptionFilter+164p
		fninit
		retn
sub_40FAE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_40FAF0()
sub_40FAF0	proc near		; DATA XREF: sub_40FB80:loc_40FB4Ao
		sub	esp, 0Ch
		mov	eax, off_415010
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_40FB17
		xchg	ax, ax

loc_40FB00:				; CODE XREF: sub_40FAF0+25j
		call	eax
		mov	eax, off_415010
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_415010, edx
		test	eax, eax
		jnz	short loc_40FB00

loc_40FB17:				; CODE XREF: sub_40FAF0+Cj
		add	esp, 0Ch
		retn
sub_40FAF0	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_40FB80

loc_40FB20:				; CODE XREF: sub_40FB80+1Ej
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, ds:dword_414530
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_40FB60

loc_40FB30:				; CODE XREF: sub_40FB80-Cj
		test	ebx, ebx
		jz	short loc_40FB4A
		lea	esi, ds:414530h[ebx*4]
		nop
		lea	esi, [esi+0]

loc_40FB40:				; CODE XREF: sub_40FB80-38j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_40FB40

loc_40FB4A:				; CODE XREF: sub_40FB80-4Ej
		mov	[esp+1Ch+var_1C], offset sub_40FAF0 ; _onexit_t
		call	sub_40F020
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_40FB80
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_40FB80

loc_40FB60:				; CODE XREF: sub_40FB80-52j
		xor	ebx, ebx
		jmp	short loc_40FB66
; ---------------------------------------------------------------------------

loc_40FB64:				; CODE XREF: sub_40FB80-Ej
		mov	ebx, eax

loc_40FB66:				; CODE XREF: sub_40FB80-1Ej
		lea	eax, [ebx+1]
		mov	edx, ds:dword_414530[eax*4]
		test	edx, edx
		jnz	short loc_40FB64
		jmp	short loc_40FB30
; END OF FUNCTION CHUNK	FOR sub_40FB80
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40FB80	proc near		; CODE XREF: sub_408C80+5Fp

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 0040FB20 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 0040FB60 SIZE 00000016 BYTES

		sub	esp, 0Ch
		mov	ecx, ds:dword_41D3C0
		test	ecx, ecx
		jz	short loc_40FB91
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_40FB91:				; CODE XREF: sub_40FB80+Bj
		mov	ds:dword_41D3C0, 1
		add	esp, 0Ch
		jmp	short loc_40FB20
sub_40FB80	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_40FBA0	proc near		; CODE XREF: sub_40FC20+13p
					; sub_40FC20:loc_40FC41p

lpCriticalSection= dword ptr -2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_41D3C4
		test	eax, eax
		jnz	short loc_40FBB8
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40FBB8:				; CODE XREF: sub_40FBA0+Ej
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	ebx, ds:dword_41D3E0
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_40FC05
		mov	ebp, ds:TlsGetValue
		mov	edi, ds:GetLastError
		xchg	ax, ax

loc_40FBE0:				; CODE XREF: sub_40FBA0+63j
		mov	eax, [ebx]
		mov	[esp+2Ch+lpCriticalSection], eax ; dwTlsIndex
		call	ebp ; TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_40FBFE
		test	esi, esi
		jz	short loc_40FBFE
		mov	eax, [ebx+4]
		mov	[esp+2Ch+lpCriticalSection], esi
		call	eax

loc_40FBFE:				; CODE XREF: sub_40FBA0+50j
					; sub_40FBA0+54j
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_40FBE0

loc_40FC05:				; CODE XREF: sub_40FBA0+30j
		mov	[esp+2Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_40FBA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40FC20	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -1Ch
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		cmp	eax, 1
		jz	short loc_40FC70
		jb	short loc_40FC41
		cmp	eax, 3
		jnz	short loc_40FC38
		call	sub_40FBA0

loc_40FC38:				; CODE XREF: sub_40FC20+11j
					; sub_40FC20+2Ej ...
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_40FC41:				; CODE XREF: sub_40FC20+Cj
		call	sub_40FBA0
		mov	eax, ds:dword_41D3C4
		cmp	eax, 1
		jnz	short loc_40FC38
		mov	ds:dword_41D3C4, 0
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_40FC38
; ---------------------------------------------------------------------------
		align 10h

loc_40FC70:				; CODE XREF: sub_40FC20+Aj
		mov	eax, ds:dword_41D3C4
		test	eax, eax
		jz	short loc_40FC90

loc_40FC79:				; CODE XREF: sub_40FC20+80j
		mov	ds:dword_41D3C4, 1
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40FC90:				; CODE XREF: sub_40FC20+57j
		mov	[esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_40FC79
sub_40FC20	endp

; ---------------------------------------------------------------------------
		align 10h

loc_40FCB0:				; CODE XREF: .text:00410326j
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_41D3C4
		mov	ebx, [esp+20h]
		test	eax, eax
		jnz	short loc_40FCC8
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40FCC8:				; CODE XREF: .text:0040FCBFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_41D3E0
		sub	esp, 4
		test	eax, eax
		jz	short loc_40FCFF
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_40FCF6
		jmp	short loc_40FD36
; ---------------------------------------------------------------------------
		align 10h

loc_40FCF0:				; CODE XREF: .text:0040FCFDj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_40FD16

loc_40FCF6:				; CODE XREF: .text:0040FCE5j
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_40FCF0

loc_40FCFF:				; CODE XREF: .text:0040FCDFj
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_40FD0F:				; CODE XREF: .text:0040FD34j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40FD16:				; CODE XREF: .text:0040FCF4j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_40FD1C:				; CODE XREF: .text:0040FD3Fj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_40FD0F
; ---------------------------------------------------------------------------

loc_40FD36:				; CODE XREF: .text:0040FCE7j
		mov	edx, [eax+8]
		mov	ds:dword_41D3E0, edx
		jmp	short loc_40FD1C
; ---------------------------------------------------------------------------
		jmp	short loc_40FD50
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_4102F0

loc_40FD50:				; CODE XREF: .text:0040FD41j
					; sub_4102F0+1Aj
		push	ebx
		sub	esp, 18h
		mov	eax, ds:dword_41D3C4
		test	eax, eax
		jnz	short loc_40FD62

loc_40FD5D:				; CODE XREF: sub_4102F0-571j
					; sub_4102F0-532j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40FD62:				; CODE XREF: sub_4102F0-595j
		mov	[esp+1Ch+var_18], 0Ch ;	size_t
		mov	[esp+1Ch+var_1C], 1 ; size_t
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_40FD5D
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], offset CriticalSection ; lpCriticalSection
		mov	[ebx], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_41D3E0
		mov	ds:dword_41D3E0, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	[esp+1Ch+var_1C], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_40FD5D
; END OF FUNCTION CHUNK	FOR sub_4102F0
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Resume]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Register]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Unregister]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetTextRelBase]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetDataRelBase]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetRegionStart]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetLanguageSpecificData]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_GetIPInfo]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SetGR]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SetIP]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_DeleteException]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_Resume_or_Rethrow]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Unwind_SjLj_RaiseException]
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		xor	ecx, ecx
		lock cmpxchg [edx], ecx
		not	eax
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	eax, [ebx+4]
		sub	eax, 1
		test	eax, eax
		mov	[ebx+4], eax
		jz	short loc_40FE70

loc_40FE65:				; CODE XREF: .text:0040FE84j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40FE70:				; CODE XREF: .text:0040FE63j
		mov	dword ptr [ebx+8], 0
		mov	[esp], ebx
		call	sub_410350
		sub	esp, 4
		test	eax, eax
		js	short loc_40FE65
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 1
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		add	esp, 18h
		movzx	eax, al
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40FEC0	proc near		; CODE XREF: sub_4126D0+48p
					; sub_413160+1C1p ...

hSemaphore	= dword	ptr -1Ch
lReleaseCount	= dword	ptr -18h
lpPreviousCount	= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+hSemaphore], ebx
		call	sub_410350
		mov	edx, eax
		sub	esp, 4
		xor	eax, eax
		test	edx, edx
		js	short loc_40FF02
		mov	[esp+1Ch+lpPreviousCount], 0 ; lpPreviousCount
		mov	[esp+1Ch+lReleaseCount], 1 ; lReleaseCount
		mov	eax, [ebx+4]
		mov	[esp+1Ch+hSemaphore], eax ; hSemaphore
		call	ds:ReleaseSemaphore
		sub	esp, 0Ch
		test	eax, eax
		setz	al
		movzx	eax, al

loc_40FF02:				; CODE XREF: sub_40FEC0+19j
		add	esp, 18h
		pop	ebx
		retn
sub_40FEC0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 8
		mov	ebx, [esp+10h]
		call	ds:GetCurrentThreadId
		xor	edx, edx
		mov	ecx, eax
		mov	eax, 0FFFFFFFFh
		lock cmpxchg [ebx], edx
		test	eax, eax
		js	short loc_40FF44
		cmp	ecx, [ebx+8]
		mov	eax, 1
		jnz	short loc_40FF3F
		add	dword ptr [ebx+4], 1
		xor	al, al

loc_40FF3F:				; CODE XREF: .text:0040FF37j
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40FF44:				; CODE XREF: .text:0040FF2Dj
		mov	dword ptr [ebx+4], 1
		xor	eax, eax
		mov	[ebx+8], ecx
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+20h]
		call	ds:GetCurrentThreadId
		mov	[esp], ebx
		mov	esi, eax
		call	sub_410390
		sub	esp, 4
		test	eax, eax
		jz	short loc_40FFA0
		cmp	esi, [ebx+8]
		jz	short loc_40FFC6
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	eax, [ebx+0Ch]
		mov	[esp], eax
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jnz	short loc_40FFB0

loc_40FFA0:				; CODE XREF: .text:0040FF7Ej
		mov	dword ptr [ebx+4], 1
		mov	[ebx+8], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40FFB0:				; CODE XREF: .text:0040FF9Ej
		mov	[esp], ebx
		call	sub_410350
		mov	eax, 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40FFC6:				; CODE XREF: .text:0040FF83j
		mov	[esp], ebx
		call	sub_410350
		xor	eax, eax
		add	dword ptr [ebx+4], 1
		sub	esp, 4
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40FFE0	proc near		; CODE XREF: sub_413160+15Fp
					; sub_4133F0+CEp ...

hHandle		= dword	ptr -1Ch
dwMilliseconds	= dword	ptr -18h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+hHandle], ebx
		call	sub_410390
		sub	esp, 4
		test	eax, eax
		jnz	short loc_410000

loc_40FFF7:				; CODE XREF: sub_40FFE0+39j
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410000:				; CODE XREF: sub_40FFE0+15j
		mov	[esp+1Ch+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
		mov	eax, [ebx+4]
		mov	[esp+1Ch+hHandle], eax ; hHandle
		call	ds:WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	short loc_40FFF7
		mov	[esp+1Ch+hHandle], ebx
		call	sub_410350
		mov	eax, 1
		sub	esp, 4
		add	esp, 18h
		pop	ebx
		retn
sub_40FFE0	endp

; ---------------------------------------------------------------------------
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0FFFFh
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+0Ch], eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410080	proc near		; CODE XREF: sub_4104B0+13p

lpSemaphoreAttributes= dword ptr -1Ch
lInitialCount	= dword	ptr -18h
lMaximumCount	= dword	ptr -14h
lpName		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	[esp+1Ch+lpName], 0 ; lpName
		mov	[esp+1Ch+lMaximumCount], 0FFFFh	; lMaximumCount
		mov	[esp+1Ch+lInitialCount], 0 ; lInitialCount
		mov	[esp+1Ch+lpSemaphoreAttributes], 0 ; lpSemaphoreAttributes
		call	ds:CreateSemaphoreA
		sub	esp, 10h
		mov	[ebx+4], eax
		add	esp, 18h
		pop	ebx
		retn
sub_410080	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	eax, [eax+4]
		mov	[esp], eax
		call	ds:CloseHandle
		sub	esp, 4
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_4100E0(DWORD,	LPVOID)
sub_4100E0	proc near		; CODE XREF: sub_413CA0+8Ap

dwTlsIndex	= dword	ptr -1Ch
lpTlsValue	= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+lpTlsValue], eax ; lpTlsValue
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsSetValue
		sub	esp, 8
		test	eax, eax
		jz	short loc_410105
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_410105:				; CODE XREF: sub_4100E0+1Dj
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_4100E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_410110(DWORD)
sub_410110	proc near		; CODE XREF: sub_413CA0+5Fp
					; sub_413D80+5Fp

dwTlsIndex	= dword	ptr -1Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], ebx
		mov	[esp+1Ch+var_4], esi
		call	ds:GetLastError
		mov	ebx, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsGetValue
		sub	esp, 4
		mov	esi, eax
		mov	[esp+1Ch+dwTlsIndex], ebx ; dwErrCode
		call	ds:SetLastError
		mov	eax, esi
		sub	esp, 4
		mov	ebx, [esp+1Ch+var_8]
		mov	esi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
sub_410110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_410150(DWORD)
sub_410150	proc near		; CODE XREF: sub_414500+14p

dwTlsIndex	= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+dwTlsIndex], eax ; dwTlsIndex
		call	ds:TlsFree
		sub	esp, 4
		test	eax, eax
		jz	short loc_410170
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410170:				; CODE XREF: sub_410150+15j
		mov	eax, ds:GetLastError
		add	esp, 1Ch
		jmp	eax
sub_410150	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410180	proc near		; CODE XREF: sub_4104D0+22p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], ebx
		mov	ebx, [esp+0Ch+arg_4]
		mov	[esp+0Ch+var_4], esi
		mov	esi, [esp+0Ch+arg_0]
		call	ds:TlsAlloc
		cmp	eax, 0FFFFFFFFh
		jz	short loc_4101B8
		mov	[esi], eax
		mov	esi, [esp+0Ch+var_4]
		mov	[esp+0Ch+arg_4], ebx
		mov	ebx, [esp+0Ch+var_8]
		mov	[esp+0Ch+arg_0], eax
		add	esp, 0Ch
		jmp	sub_4102F0
; ---------------------------------------------------------------------------

loc_4101B8:				; CODE XREF: sub_410180+1Cj
		mov	eax, ds:GetLastError
		mov	ebx, [esp+0Ch+var_8]
		mov	esi, [esp+0Ch+var_4]
		add	esp, 0Ch
		jmp	eax
sub_410180	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+24h]
		mov	ebx, [esp+20h]
		test	esi, esi
		jz	short loc_4101F3
		test	ebx, ebx
		jz	short loc_4101F3
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_410200

loc_4101EB:				; CODE XREF: .text:00410216j
					; .text:00410232j
		xor	eax, eax

loc_4101ED:				; CODE XREF: .text:00410240j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4101F3:				; CODE XREF: .text:004101DFj
					; .text:004101E3j
		add	esp, 14h
		mov	eax, 16h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410200:				; CODE XREF: .text:004101E9j
		lea	eax, [ebx+4]
		mov	[esp], eax
		call	sub_410390
		sub	esp, 4
		test	eax, eax
		jz	short loc_410234
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_4101EB
		mov	esi, ds:Sleep
		xchg	ax, ax

loc_410220:				; CODE XREF: .text:00410230j
		mov	dword ptr [esp], 0
		call	esi ; Sleep
		mov	eax, [ebx]
		sub	esp, 4
		test	eax, eax
		jz	short loc_410220
		jmp	short loc_4101EB
; ---------------------------------------------------------------------------

loc_410234:				; CODE XREF: .text:00410210j
		call	esi
		xor	eax, eax
		mov	dword ptr [ebx], 1
		xchg	ax, ax
		jmp	short loc_4101ED
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410250	proc near		; CODE XREF: sub_40E590+D0p
					; sub_40E590+E2p ...

arg_0		= byte ptr  4

		push	ecx
		lea	ecx, [esp+4+arg_0]
		cmp	eax, 1000h
		jb	short loc_410271

loc_41025C:				; CODE XREF: sub_410250+1Fj
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_41025C

loc_410271:				; CODE XREF: sub_410250+Aj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		push	eax
		retn
sub_410250	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _write]
		align 10h
		mov	eax, [esp+0Ch]
		mov	edx, [esp+8]
		mov	ecx, [esp+4]
		lock cmpxchg [ecx], edx
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_4102B0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4102B0	proc near		; CODE XREF: sub_401190+A7p
					; .text:004102A1j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		lock cmpxchg [ecx], edx
		retn	0Ch
sub_4102B0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		lock xchg eax, [edx]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4102E0	proc near		; CODE XREF: sub_401190+305p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_0]
		lock xchg eax, [edx]
		retn	8
sub_4102E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4102F0	proc near		; CODE XREF: sub_410180+33j

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

; FUNCTION CHUNK AT 0040FD50 SIZE 00000070 BYTES

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_410310
		mov	[esp+0Ch+arg_4], eax
		mov	[esp+0Ch+arg_0], edx
		add	esp, 0Ch
		jmp	loc_40FD50
; ---------------------------------------------------------------------------
		align 10h

loc_410310:				; CODE XREF: sub_4102F0+Dj
		add	esp, 0Ch
		retn
sub_4102F0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	loc_40FCB0
; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_410350
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410350	proc near		; CODE XREF: .text:0040FE7Ap
					; sub_40FEC0+Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 0FFFFFFFFh
		lock xadd [edx], eax
		sub	eax, 1
		retn	4
sub_410350	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+4]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_410390
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410390	proc near		; CODE XREF: .text:0040FF74p
					; sub_40FFE0+Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, 1
		lock xadd [edx], eax
		add	eax, 1
		retn	4
sub_410390	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getmainargs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __set_app_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _cexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fputs]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION realloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_410490	proc near		; DATA XREF: .text:00414540o
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_4016A0
		mov	dword ptr [esp], offset	sub_4016F0 ; _onexit_t
		call	sub_40F020
		leave
		retn
sub_410490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4104B0	proc near		; DATA XREF: .text:0041453Co

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, dword_415014
		test	eax, eax
		jz	short loc_4104C8
		mov	[esp+1Ch+var_1C], offset dword_419A50
		call	sub_410080

loc_4104C8:				; CODE XREF: sub_4104B0+Aj
		add	esp, 1Ch
		retn
sub_4104B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4104D0	proc near		; DATA XREF: .text:00414538o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		mov	eax, dword_415014
		mov	byte_419A44, 0
		test	eax, eax
		jz	short loc_410500
		mov	[esp+1Ch+var_18], offset sub_410870
		mov	[esp+1Ch+var_1C], offset dword_419A40
		call	sub_410180
		test	eax, eax
		setz	byte_419A44

loc_410500:				; CODE XREF: sub_4104D0+11j
		mov	[esp+1Ch+var_1C], offset sub_414500 ; _onexit_t
		call	sub_40F020
		add	esp, 1Ch
		retn
sub_4104D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_410510	proc near		; DATA XREF: sub_4024A0+182o
					; sub_4024A0+A8Bo ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_410532
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN8QVariantD2Ev
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
; ---------------------------------------------------------------------------

loc_410532:				; CODE XREF: sub_410510+Aj
		add	esp, 18h
		pop	ebx
		retn
sub_410510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410540	proc near		; DATA XREF: sub_4024A0+1FBo
					; sub_4024A0+B84o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_410562
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_ZN13QDBusArgumentD1Ev
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
; ---------------------------------------------------------------------------

loc_410562:				; CODE XREF: sub_410540+Aj
		add	esp, 18h
		pop	ebx
		retn
sub_410540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410570	proc near		; DATA XREF: sub_406220+871o
					; sub_406220+14DDo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_4105B0
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_410595
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
; ---------------------------------------------------------------------------

loc_410595:				; CODE XREF: sub_410570+16j
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
; ---------------------------------------------------------------------------
		align 10h

loc_4105B0:				; CODE XREF: sub_410570+Aj
		add	esp, 18h
		pop	ebx
		retn
sub_410570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4105C0	proc near		; DATA XREF: sub_406220+1368o
					; sub_406220+140Eo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_410600
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_4105E5
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
; ---------------------------------------------------------------------------

loc_4105E5:				; CODE XREF: sub_4105C0+16j
		mov	eax, [ebx]
		mov	[esp+1Ch+var_1C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
; ---------------------------------------------------------------------------
		align 10h

loc_410600:				; CODE XREF: sub_4105C0+Aj
		add	esp, 18h
		pop	ebx
		retn
sub_4105C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_410610	proc near		; DATA XREF: sub_4024A0+17Ao
					; sub_4024A0:loc_402F23o ...

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_414550
		mov	[ebp+var_18], offset sub_4106C3
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_410686
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_413160
		mov	[ebp+var_40], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+4], eax
		mov	edx, [ebp+var_40]
		mov	[esp], edx
		mov	[ebp+var_38], 1
		call	ds:_ZN8QVariantC2ERKS_
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_410686:				; CODE XREF: sub_410610+34j
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_413160
		mov	[ebp+var_40], eax
		mov	edx, eax
		mov	eax, [eax+8]
		mov	dword ptr [edx], 0
		and	eax, 0C0000000h
		mov	[edx+8], eax
		lea	eax, [ebp+var_3C]
		mov	byte ptr [edx+0Bh], 80h
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_410610	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4106C3	proc near		; DATA XREF: sub_410610+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	edx, [ebp-40h]
		mov	[ebp-44h], eax
		mov	[esp+0], edx
		call	sub_413140
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_4106C3	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4106F0	proc near		; DATA XREF: sub_4024A0+1F3o
					; sub_4024A0:loc_40301Co

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset word_414556
		mov	[ebp+var_18], offset sub_41079C
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jz	short loc_410766
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_413160
		mov	[ebp+var_40], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+4], eax
		mov	eax, [ebp+var_40]
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	ds:_ZN13QDBusArgumentC1ERKS_
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_410766:				; CODE XREF: sub_4106F0+34j
		mov	dword ptr [esp], 4 ; size_t
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_413160
		mov	[ebp+var_40], eax
		mov	[esp], eax
		mov	[ebp+var_38], 2
		call	ds:_ZN13QDBusArgumentC1Ev
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_4106F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_41079C	proc near		; DATA XREF: sub_4106F0+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	[ebp-44h], eax
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_413140
		mov	eax, [ebp-44h]
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
sub_41079C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4107D0	proc near		; DATA XREF: sub_406220+869o
					; sub_406220:loc_4076F5o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_4107F7
		mov	[esp+1Ch+var_1C], 4 ; size_t
		call	sub_413160
		mov	edx, [ebx]
		mov	[eax], edx
		lock inc dword ptr [edx]
		setnz	cl
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_4107F7:				; CODE XREF: sub_4107D0+Aj
		mov	[esp+1Ch+var_1C], 4 ; size_t
		call	sub_413160
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	[eax], edx
		lock inc dword ptr [edx]
		setnz	cl
		add	esp, 18h
		pop	ebx
		retn
sub_4107D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410820	proc near		; DATA XREF: sub_406220:loc_407580o
					; sub_406220+1406o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_410847
		mov	[esp+1Ch+var_1C], 4 ; size_t
		call	sub_413160
		mov	edx, [ebx]
		mov	[eax], edx
		lock inc dword ptr [edx]
		setnz	cl
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_410847:				; CODE XREF: sub_410820+Aj
		mov	[esp+1Ch+var_1C], 4 ; size_t
		call	sub_413160
		mov	edx, ds:_ZN7QString11shared_nullE
		mov	[eax], edx
		lock inc dword ptr [edx]
		setnz	cl
		add	esp, 18h
		pop	ebx
		retn
sub_410820	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410870	proc near		; DATA XREF: sub_4104D0+13o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jz	short loc_4108A5
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_410897

loc_410883:				; CODE XREF: sub_410870+25j
		mov	ebx, [eax+10h]
		add	eax, 30h
		mov	[esp+1Ch+var_1C], eax
		call	_Unwind_DeleteException
		test	ebx, ebx
		mov	eax, ebx
		jnz	short loc_410883

loc_410897:				; CODE XREF: sub_410870+11j
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	free
; ---------------------------------------------------------------------------

loc_4108A5:				; CODE XREF: sub_410870+Bj
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_410870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4108B0	proc near		; CODE XREF: sub_410A50+3Bp
					; sub_413F20+423p

var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h

		push	ebx
		mov	ebx, eax
		sub	esp, 28h
		movzx	ecx, byte ptr [eax+14h]
		cmp	cl, 0FFh
		movzx	eax, cl
		jz	short loc_410916
		mov	ecx, eax
		and	ecx, 7
		cmp	ecx, 2
		jz	short loc_410910
		jle	short loc_4108E0
		cmp	ecx, 3
		jz	short loc_4108E4
		cmp	ecx, 4
		jz	short loc_410906

loc_4108D8:				; CODE XREF: sub_4108B0+32j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_4108E0:				; CODE XREF: sub_4108B0+1Cj
		test	ecx, ecx
		jnz	short loc_4108D8

loc_4108E4:				; CODE XREF: sub_4108B0+21j
		shl	edx, 2
		neg	edx

loc_4108E9:				; CODE XREF: sub_4108B0+5Bj
					; sub_4108B0+64j ...
		mov	ecx, [ebx+0Ch]
		add	ecx, edx
		mov	edx, [ebx+8]
		lea	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], ebx
		call	sub_410B90
		mov	eax, [esp+2Ch+var_10]
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_410906:				; CODE XREF: sub_4108B0+26j
		shl	edx, 3
		neg	edx
		jmp	short loc_4108E9
; ---------------------------------------------------------------------------
		align 10h

loc_410910:				; CODE XREF: sub_4108B0+1Aj
		add	edx, edx
		neg	edx
		jmp	short loc_4108E9
; ---------------------------------------------------------------------------

loc_410916:				; CODE XREF: sub_4108B0+10j
		xor	edx, edx
		jmp	short loc_4108E9
sub_4108B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410920	proc near		; CODE XREF: sub_410A50+46p
					; sub_413F20+43Fp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_C], ebx
		mov	ebx, eax
		mov	eax, [ecx]
		mov	[esp+2Ch+var_8], esi
		mov	esi, edx
		mov	[esp+2Ch+var_4], edi
		mov	edi, ecx
		mov	[esp+2Ch+var_10], eax
		mov	eax, [edx]
		mov	[esp+2Ch+var_2C], edx
		call	dword ptr [eax+8]
		test	al, al
		jz	short loc_410951
		mov	eax, [esp+2Ch+var_10]
		mov	eax, [eax]
		mov	[esp+2Ch+var_10], eax

loc_410951:				; CODE XREF: sub_410920+25j
		mov	eax, [ebx]
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	dword ptr [eax+10h]
		mov	edx, eax
		xor	eax, eax
		test	dl, dl
		jz	short loc_410980
		mov	eax, [esp+2Ch+var_10]
		mov	[edi], eax
		mov	eax, 1

loc_410980:				; CODE XREF: sub_410920+53j
		mov	ebx, [esp+2Ch+var_C]
		mov	esi, [esp+2Ch+var_8]
		mov	edi, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
sub_410920	endp


; =============== S U B	R O U T	I N E =======================================


sub_410990	proc near		; CODE XREF: sub_4137FD+69p
					; sub_413F20+E3p ...

var_2C		= dword	ptr -2Ch

		push	ebp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, eax
		push	ebx
		xor	eax, eax
		sub	esp, 1Ch
		test	esi, esi
		mov	ebx, ecx
		jz	short loc_4109AB
		mov	[esp+2Ch+var_2C], esi
		call	_Unwind_GetRegionStart

loc_4109AB:				; CODE XREF: sub_410990+11j
		mov	[ebx], eax
		movzx	edx, byte ptr [edi]
		add	edi, 1
		cmp	dl, 0FFh
		jz	short loc_410A37
		movzx	ebp, dl
		mov	edx, esi
		mov	eax, ebp
		call	sub_410AD0
		lea	edx, [ebx+4]
		mov	ecx, edi
		mov	[esp+2Ch+var_2C], edx
		mov	edx, eax
		mov	eax, ebp
		call	sub_410B90
		mov	edi, eax
		movzx	eax, byte ptr [edi]
		add	edi, 1
		cmp	al, 0FFh
		mov	[ebx+14h], al
		jz	short loc_410A47

loc_4109E4:				; CODE XREF: sub_410990+B5j
		xor	esi, esi
		xor	ecx, ecx

loc_4109E8:				; CODE XREF: sub_410990+6Cj
		movzx	eax, byte ptr [edi]
		add	edi, 1
		mov	edx, eax
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	al, al
		js	short loc_4109E8
		lea	esi, [edi+esi]
		mov	[ebx+0Ch], esi

loc_410A04:				; CODE XREF: sub_410990+BEj
		movzx	eax, byte ptr [edi]
		xor	ecx, ecx
		mov	[ebx+15h], al
		lea	eax, [edi+1]
		xor	edi, edi

loc_410A11:				; CODE XREF: sub_410990+97j
		movzx	esi, byte ptr [eax]
		add	eax, 1
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		mov	edx, esi
		test	dl, dl
		js	short loc_410A11
		lea	edi, [eax+edi]
		mov	[ebx+10h], edi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_410A37:				; CODE XREF: sub_410990+26j
		mov	[ebx+4], eax
		movzx	eax, byte ptr [edi]
		add	edi, 1
		cmp	al, 0FFh
		mov	[ebx+14h], al
		jnz	short loc_4109E4

loc_410A47:				; CODE XREF: sub_410990+52j
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_410A04
sub_410990	endp


; =============== S U B	R O U T	I N E =======================================


sub_410A50	proc near		; CODE XREF: sub_4137FD+80p
					; sub_4137FD+ADp ...

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, edx
		push	edi
		xor	edx, edx
		push	esi
		mov	edi, eax
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_20], ecx
		xor	ecx, ecx
		not	ebx
		add	ebx, [eax+0Ch]
		lea	esi, [esi+0]

loc_410A70:				; CODE XREF: sub_410A50+53j
					; sub_410A50+58j
		movzx	esi, byte ptr [ebx]
		add	ebx, 1
		mov	eax, esi
		and	eax, 7Fh
		shl	eax, cl
		or	edx, eax
		mov	eax, esi
		test	al, al
		js	short loc_410AA5
		test	edx, edx
		jz	short loc_410AB0
		mov	eax, edi
		call	sub_4108B0
		lea	ecx, [esp+2Ch+var_20]
		mov	edx, ebp
		call	sub_410920
		test	al, al
		jnz	short loc_410AC0
		xor	edx, edx
		xor	ecx, ecx
		jmp	short loc_410A70
; ---------------------------------------------------------------------------

loc_410AA5:				; CODE XREF: sub_410A50+33j
		add	ecx, 7
		jmp	short loc_410A70
; ---------------------------------------------------------------------------
		align 10h

loc_410AB0:				; CODE XREF: sub_410A50+37j
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410AC0:				; CODE XREF: sub_410A50+4Dj
		add	esp, 1Ch
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_410A50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410AD0	proc near		; CODE XREF: sub_410990+2Fp
					; sub_413F20+F5p ...

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	al, 0FFh
		jz	short loc_410B04
		and	eax, 70h
		cmp	eax, 20h
		jz	short loc_410B30
		jle	short loc_410B00
		cmp	eax, 40h
		jz	short loc_410B17
		cmp	eax, 50h
		lea	esi, [esi+0]
		jz	short loc_410B04
		cmp	eax, 30h
		jz	short loc_410B40

loc_410AF7:				; CODE XREF: sub_410AD0+43j
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_410B00:				; CODE XREF: sub_410AD0+Fj
		test	eax, eax
		jnz	short loc_410B10

loc_410B04:				; CODE XREF: sub_410AD0+5j
					; sub_410AD0+20j ...
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410B10:				; CODE XREF: sub_410AD0+32j
		cmp	eax, 10h
		jnz	short loc_410AF7
		jmp	short loc_410B04
; ---------------------------------------------------------------------------

loc_410B17:				; CODE XREF: sub_410AD0+14j
		mov	[esp+1Ch+var_1C], edx
		lea	esi, [esi+0]
		call	_Unwind_GetRegionStart
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410B30:				; CODE XREF: sub_410AD0+Dj
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_GetTextRelBase
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410B40:				; CODE XREF: sub_410AD0+25j
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_GetDataRelBase
		add	esp, 1Ch
		retn
sub_410AD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410B50	proc near		; DATA XREF: sub_413EC0+37o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		cmp	[esp+1Ch+arg_0], 1
		lea	edx, [eax-40h]
		ja	short loc_410B81
		mov	edx, [edx+14h]
		lea	ebx, [eax+20h]
		test	edx, edx
		jz	short loc_410B74
		lea	ebx, [eax+20h]
		mov	[esp+1Ch+var_1C], ebx
		call	edx

loc_410B74:				; CODE XREF: sub_410B50+1Aj
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	loc_413B20
; ---------------------------------------------------------------------------

loc_410B81:				; CODE XREF: sub_410B50+10j
		mov	eax, [edx+1Ch]
		mov	[esp+1Ch+var_1C], eax
		call	sub_411010
sub_410B50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410B90	proc near		; CODE XREF: sub_4108B0+48p
					; sub_410990+40p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, eax
		mov	eax, ecx
		cmp	bl, 50h
		mov	[esp+2Ch+var_8], edi
		mov	edi, edx
		mov	edx, ebx
		mov	[esp+2Ch+var_C], esi
		mov	[esp+2Ch+var_4], ebp
		jz	loc_410CC0
		mov	[esp+2Ch+var_24], ecx
		movzx	ecx, bl
		mov	[esp+2Ch+var_28], ecx
		and	ecx, 0Fh
		cmp	ecx, 0Ch	; switch 13 cases
		jbe	short loc_410BD0

loc_410BC7:				; CODE XREF: sub_410B90:loc_410BD0j
					; DATA XREF: .rdata:off_41A7CCo
		call	abort		; jumptable 00410BD0 default case
; ---------------------------------------------------------------------------
		align 10h

loc_410BD0:				; CODE XREF: sub_410B90+35j
		jmp	ds:off_41A7CC[ecx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_410BD7:				; CODE XREF: sub_410B90:loc_410BD0j
					; DATA XREF: .rdata:off_41A7CCo
		mov	ebx, [eax]	; jumptable 00410BD0 cases 0,3,11
		add	eax, 4

loc_410BDC:				; CODE XREF: sub_410B90+95j
					; sub_410B90+C9j ...
		test	ebx, ebx
		xchg	ax, ax
		jz	short loc_410C00
		mov	ecx, [esp+2Ch+var_28]
		and	ecx, 70h
		cmp	ecx, 10h
		jz	loc_410CD0

loc_410BF2:				; CODE XREF: sub_410B90+144j
		add	ebx, edi
		test	dl, dl
		jns	short loc_410C00
		mov	ebx, [ebx]
		lea	esi, [esi+0]

loc_410C00:				; CODE XREF: sub_410B90+50j
					; sub_410B90+66j ...
		mov	edx, [esp+2Ch+arg_0]
		mov	[edx], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_410C20:				; CODE XREF: sub_410B90:loc_410BD0j
					; DATA XREF: .rdata:off_41A7CCo
		mov	ebx, [eax]	; jumptable 00410BD0 cases 4,12
		add	eax, 8
		jmp	short loc_410BDC
; ---------------------------------------------------------------------------

loc_410C27:				; CODE XREF: sub_410B90:loc_410BD0j
					; DATA XREF: .rdata:off_41A7CCo
		xor	ebx, ebx	; jumptable 00410BD0 case 9
		xor	ecx, ecx
		mov	esi, ebx
		mov	ebp, edx
		mov	[esp+2Ch+var_20], edi

loc_410C33:				; CODE XREF: sub_410B90+BAj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	edi, bl
		mov	edx, edi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_410C33
		cmp	ecx, 1Fh
		mov	ebx, esi
		mov	edx, ebp
		mov	esi, edi
		mov	edi, [esp+2Ch+var_20]
		ja	short loc_410BDC
		and	esi, 40h
		jz	loc_410BDC
		mov	esi, 0FFFFFFFFh
		shl	esi, cl
		or	ebx, esi
		jmp	loc_410BDC
; ---------------------------------------------------------------------------

loc_410C72:				; CODE XREF: sub_410B90:loc_410BD0j
					; DATA XREF: .rdata:off_41A7CCo
		mov	ebp, edi	; jumptable 00410BD0 case 1
		xor	ebx, ebx
		xor	ecx, ecx
		mov	edi, edx
		lea	esi, [esi+0]

loc_410C80:				; CODE XREF: sub_410B90+106j
		movzx	edx, byte ptr [eax]
		mov	esi, 7Fh
		add	eax, 1
		and	esi, edx
		shl	esi, cl
		add	ecx, 7
		or	ebx, esi
		test	dl, dl
		js	short loc_410C80
		mov	edx, edi
		mov	edi, ebp
		jmp	loc_410BDC
; ---------------------------------------------------------------------------

loc_410CA1:				; CODE XREF: sub_410B90:loc_410BD0j
					; DATA XREF: .rdata:off_41A7CCo
		movsx	ebx, word ptr [eax] ; jumptable	00410BD0 case 10
		add	eax, 2
		jmp	loc_410BDC
; ---------------------------------------------------------------------------
		align 10h

loc_410CB0:				; CODE XREF: sub_410B90:loc_410BD0j
					; DATA XREF: .rdata:off_41A7CCo
		movzx	ebx, word ptr [eax] ; jumptable	00410BD0 case 2
		add	eax, 2
		jmp	loc_410BDC
; ---------------------------------------------------------------------------
		align 10h

loc_410CC0:				; CODE XREF: sub_410B90+1Ej
		add	eax, 3
		and	eax, 0FFFFFFFCh
		mov	ebx, [eax]
		add	eax, 4
		jmp	loc_410C00
; ---------------------------------------------------------------------------

loc_410CD0:				; CODE XREF: sub_410B90+5Cj
		mov	edi, [esp+2Ch+var_24]
		jmp	loc_410BF2
sub_410B90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_410CE0	proc near		; CODE XREF: sub_402217+105p
					; sub_402217+148p ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_410CF7
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_410CF7:				; CODE XREF: sub_410CE0+11j
		mov	eax, [edx]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, ds:_Z5qFreePv
		add	esp, 0Ch
		jmp	eax
sub_410CE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_410D10	proc near		; CODE XREF: sub_402217+21Ap
					; sub_403DFE+F1p ...

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset word_414602
		mov	[ebp+var_18], offset sub_410D9A
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_410D82

loc_410D4F:				; CODE XREF: sub_410D10+88j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_410D75
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_410D75:				; CODE XREF: sub_410D10+4Dj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_410D82:				; CODE XREF: sub_410D10+3Dj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_410D4F
sub_410D10	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_410D9A	proc near		; DATA XREF: sub_410D10+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		mov	dword ptr [ebp-38h], 0
		mov	[ebp-40h], eax
		mov	eax, [ebp+8]
		add	eax, 4
		mov	[esp+0], eax
		call	sub_4126A0
		mov	edx, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_410D9A	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_410DD0	proc near		; CODE XREF: sub_403DFE+A2p
					; sub_408C80+1D0Fp

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_414688
		mov	[ebp+var_18], offset sub_410E8B
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		add	ecx, 10h
		mov	eax, [edx+10h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_410E70

loc_410E15:				; CODE XREF: sub_410DD0+B9j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_410E58

loc_410E25:				; CODE XREF: sub_410DD0+9Ej
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_410E4B
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_410E4B:				; CODE XREF: sub_410DD0+63j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_410E58:				; CODE XREF: sub_410DD0+53j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_410E25
; ---------------------------------------------------------------------------

loc_410E70:				; CODE XREF: sub_410DD0+43j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		mov	[esp], ecx
		mov	[ebp+var_38], 2
		mov	[esp+4], eax
		call	sub_411940
		jmp	short loc_410E15
sub_410DD0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_410E8B	proc near		; DATA XREF: sub_410DD0+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		cmp	dword ptr [ebp-38h], 1
		mov	[ebp-40h], eax
		jz	short loc_410EC1
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_4126A0
		mov	edx, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_410EC1:				; CODE XREF: sub_410E8B+Dj
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	sub_410D10
		mov	edx, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_410E8B	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_410EF0	proc near		; CODE XREF: sub_404C03+36Bp
					; sub_405D32+285p ...

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_414690
		mov	[ebp+var_18], offset sub_410FA8
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_410F90

loc_410F2F:				; CODE XREF: sub_410EF0+B6j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_410F72

loc_410F3F:				; CODE XREF: sub_410EF0+98j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_410F65
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_410F65:				; CODE XREF: sub_410EF0+5Dj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_410F72:				; CODE XREF: sub_410EF0+4Dj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_38], 1
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_410F3F
; ---------------------------------------------------------------------------
		align 10h

loc_410F90:				; CODE XREF: sub_410EF0+3Dj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		mov	[ebp+var_38], 2
		mov	[esp], eax
		call	ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_410F2F
sub_410EF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_410FA8	proc near		; DATA XREF: sub_410EF0+20o
		add	ebp, 8
		mov	eax, [ebp-34h]
		cmp	dword ptr [ebp-38h], 1
		mov	[ebp-40h], eax
		jz	short loc_410FDE
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		add	eax, 4
		mov	[esp+0], eax
		call	sub_4126A0
		mov	edx, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_410FDE:				; CODE XREF: sub_410FA8+Dj
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-38h], 0
		mov	[esp+0], eax
		call	sub_410D10
		mov	edx, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
sub_410FA8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_411010	proc near		; CODE XREF: sub_410B50+37p
					; sub_413130+Bp ...

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_41488C
		mov	[ebp+var_18], offset sub_41104E
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		mov	[ebp+var_38], 2
		call	[ebp+arg_0]
		call	abort
sub_411010	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_41104E	proc near		; DATA XREF: sub_411010+1Do
		add	ebp, 8
		mov	eax, [ebp-34h]
		cmp	dword ptr [ebp-38h], 1
		mov	[ebp-40h], eax
		jz	short loc_41107B
		mov	dword ptr [ebp-38h], 0
		call	sub_413920
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_41107B:				; CODE XREF: sub_41104E+Dj
		mov	eax, [ebp-40h]
		mov	[esp+0], eax
		call	sub_413650
		mov	dword ptr [ebp-38h], 1
		call	abort
sub_41104E	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4110A0	proc near		; CODE XREF: sub_4130D0+Bp
					; sub_413790+68p

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		call	[esp+0Ch+arg_0]
		call	sub_413130
sub_4110A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4110B0	proc near		; DATA XREF: .rdata:0041C134o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C130
		add	esp, 0Ch
		jmp	sub_413140
sub_4110B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4110D0	proc near		; DATA XREF: .rdata:off_41C130o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_41C130
		retn
sub_4110D0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_41C130
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4110F0	proc near		; DATA XREF: .rdata:0041C14Co

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_41C148
		mov	[esp+1Ch+var_1C], ebx
		call	sub_4130C0
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
sub_4110F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411120	proc near		; DATA XREF: .rdata:off_41C148o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C148
		add	esp, 0Ch
		jmp	sub_4130C0
sub_411120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411140	proc near		; CODE XREF: sub_4111A0+11p
					; sub_4111D0+10j ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C148
		add	esp, 0Ch
		jmp	sub_4130C0
sub_411140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411160	proc near		; DATA XREF: .rdata:0041C18Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C188
		add	esp, 0Ch
		jmp	sub_413140
sub_411160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411180	proc near		; DATA XREF: .rdata:off_41C188o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_41C188
		retn
sub_411180	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_41C188
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4111A0	proc near		; DATA XREF: .rdata:0041C1ACo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_41C1A8
		mov	[esp+1Ch+var_1C], ebx
		call	sub_411140
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
sub_4111A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4111D0	proc near		; DATA XREF: .rdata:off_41C1A8o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C1A8
		add	esp, 0Ch
		jmp	sub_411140
sub_4111D0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_41C1A8
		add	esp, 0Ch
		jmp	sub_411140
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411210	proc near		; CODE XREF: sub_4024A0+136Ep
					; sub_4024A0+13DAp ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jnz	short loc_411231
		mov	eax, [edx]
		mov	[esp+1Ch+var_1C], edx
		mov	[esp+1Ch+var_18], eax
		call	sub_411940

loc_411231:				; CODE XREF: sub_411210+11j
		add	esp, 1Ch
		retn
sub_411210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_411240	proc near		; CODE XREF: sub_408C80+F24p

var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	ebx
		sub	esp, 94h
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_413F20
		mov	[ebp+var_50], offset dword_4145CC
		mov	[ebp+var_48], offset sub_4113B6
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 4
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN8QMapData10createDataEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_80], eax
		mov	eax, [edx]
		mov	ecx, [eax+3Ch]
		test	ecx, ecx
		jz	loc_411377
		mov	ecx, [ebp+var_80]
		or	byte ptr [ecx+44h], 1
		mov	eax, [edx]
		mov	ebx, [eax+4]
		mov	[ebp+var_38], ecx
		cmp	eax, ebx
		mov	[ebp+var_74], ebx
		jz	loc_41136B
		mov	eax, ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_70], eax
		jmp	short loc_4112D4
; ---------------------------------------------------------------------------
		align 10h

loc_4112C0:				; CODE XREF: sub_411240+EAj
					; sub_411240+102j
		mov	ecx, [ebp+var_74]
		mov	ebx, [ebp+arg_0]
		mov	ecx, [ecx+4]
		mov	[ebp+var_74], ecx
		cmp	[ebx], ecx
		jz	loc_41136B

loc_4112D4:				; CODE XREF: sub_411240+7Cj
					; sub_411240+125j
		mov	edx, [ebp+var_74]
		lea	ecx, [ebp+var_38]
		mov	ebx, [ebp+var_80]
		mov	dword ptr [esp+0Ch], 4
		mov	dword ptr [esp+8], 8
		sub	edx, 8
		mov	[ebp+var_7C], edx
		mov	[esp+4], ecx
		mov	[esp], ebx
		mov	[ebp+var_68], 5
		call	[ebp+var_70]
		mov	[ebp+var_78], eax
		sub	eax, 8
		test	eax, eax
		mov	[ebp+var_84], eax
		jz	short loc_411325
		mov	ecx, [ebp+var_7C]
		mov	ebx, [ebp+var_78]
		mov	edx, [ecx]
		mov	[ebx-8], edx
		lock inc dword ptr [edx]
		setnz	cl

loc_411325:				; CODE XREF: sub_411240+D2j
		mov	edx, eax
		add	edx, 4
		jz	short loc_4112C0
		mov	ebx, [ebp+var_7C]
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		lock inc dword ptr [ecx]
		setnz	bl
		mov	eax, [eax+4]
		test	byte ptr [eax+10h], 1
		jnz	loc_4112C0
		mov	[esp], edx
		mov	[ebp+var_68], 3
		call	sub_4118C0
		mov	ecx, [ebp+var_74]
		mov	ebx, [ebp+arg_0]
		mov	ecx, [ecx+4]
		mov	[ebp+var_74], ecx
		cmp	[ebx], ecx
		jnz	loc_4112D4

loc_41136B:				; CODE XREF: sub_411240+6Ej
					; sub_411240+8Ej
		mov	eax, [ebp+var_80]
		and	byte ptr [eax+44h], 0FEh
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]

loc_411377:				; CODE XREF: sub_411240+54j
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_41139A
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		mov	[esp], ecx
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_4114B0

loc_41139A:				; CODE XREF: sub_411240+140j
		mov	eax, [ebp+var_80]
		mov	ebx, [ebp+arg_0]
		mov	[ebx], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 94h
		pop	ebx
		pop	ebp
		retn
sub_411240	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4113B6	proc near		; DATA XREF: sub_411240+24o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-68h]
		mov	edx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-88h], edx
		jz	loc_411463
		cmp	eax, 2
		jz	short loc_41143B
		cmp	eax, 3
		jz	short loc_41141A
		cmp	eax, 4
		nop
		lea	esi, [esi+0]
		jz	short loc_4113EE
		mov	dword ptr [ebp-68h], 0
		call	sub_413920

loc_4113EE:				; CODE XREF: sub_4113B6+2Aj
		mov	eax, [ebp-88h]
		mov	[esp+0], eax
		call	sub_413650
		mov	edx, [ebp-80h]
		mov	ecx, [ebp+8]
		mov	dword ptr [ebp-68h], 4
		mov	[esp+arg_0], edx
		mov	[esp+0], ecx
		call	sub_4114B0
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_41141A:				; CODE XREF: sub_4113B6+20j
		mov	dword ptr [ebp-68h], 0
		call	sub_413920
		mov	ebx, [ebp-88h]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], ebx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_41143B:				; CODE XREF: sub_4113B6+1Bj
		mov	eax, [ebp-88h]
		mov	[esp+0], eax
		call	sub_413650
		mov	edx, [ebp-84h]
		mov	dword ptr [ebp-68h], 2
		mov	[esp+0], edx
		call	sub_4126A0
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_411463:				; CODE XREF: sub_4113B6+12j
		mov	dword ptr [ebp-68h], 0
		call	sub_413920
		mov	ecx, [ebp-88h]
		mov	[esp+0], ecx
		call	sub_413650
		lea	eax, [ebp-38h]
		mov	ebx, [ebp-78h]
		mov	[esp+arg_0], eax
		mov	eax, [ebp-80h]
		mov	[esp+arg_4], 8
		mov	dword ptr [ebp-68h], 1
		mov	[esp+arg_8], ebx
		mov	[esp+0], eax
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_413E60
sub_4113B6	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4114B0	proc near		; CODE XREF: sub_408C80+16ADp
					; sub_408C80+1DDEp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, [edi+4]
		cmp	edi, eax
		jz	short loc_411512
		mov	ebp, ds:_ZN7QString4freeEPNS_4DataE
		jmp	short loc_4114D2
; ---------------------------------------------------------------------------
		align 10h

loc_4114D0:				; CODE XREF: sub_4114B0+5Ej
		mov	eax, esi

loc_4114D2:				; CODE XREF: sub_4114B0+18j
		mov	esi, [eax+4]
		lea	ebx, [eax-8]
		mov	edx, [eax-8]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_4114ED
		mov	eax, [eax-8]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN7QString4freeEPNS_4DataE

loc_4114ED:				; CODE XREF: sub_4114B0+33j
		lea	ecx, [ebx+4]
		mov	eax, [ebx+4]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_41150C
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_2C], ecx
		mov	[esp+2Ch+var_28], eax
		call	sub_411940

loc_41150C:				; CODE XREF: sub_4114B0+4Bj
		cmp	edi, esi
		jnz	short loc_4114D0
		mov	eax, edi

loc_411512:				; CODE XREF: sub_4114B0+10j
		mov	[esp+2Ch+arg_0], eax
		mov	eax, ds:_ZN8QMapData16continueFreeDataEi
		mov	[esp+2Ch+arg_4], 8
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_4114B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_411530	proc near		; CODE XREF: sub_4024A0+D4Cp
					; sub_4024A0+1333p

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0A8h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		mov	[ebp+var_54], offset sub_413F20
		mov	[ebp+var_50], offset dword_4145E4
		mov	[ebp+var_48], offset sub_411689
		mov	[ebp+var_44], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 8
		mov	[ebp+var_68], 0FFFFFFFFh
		call	ds:_ZN8QMapData10createDataEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_84], eax
		mov	eax, [edx]
		mov	ecx, [eax+3Ch]
		test	ecx, ecx
		jz	loc_41164E
		mov	ecx, [ebp+var_84]
		or	byte ptr [ecx+44h], 1
		mov	eax, [edx]
		mov	edx, [eax+4]
		mov	[ebp+var_38], ecx
		cmp	eax, edx
		mov	[ebp+var_74], edx
		jz	loc_41163F
		mov	ecx, ds:_ZN8QMapData11node_createEPPNS_4NodeEii
		mov	[ebp+var_70], ecx

loc_4115B2:				; CODE XREF: sub_411530+109j
		mov	eax, [ebp+var_74]
		lea	ecx, [ebp+var_38]
		mov	edx, [ebp+var_74]
		mov	dword ptr [esp+0Ch], 8
		mov	dword ptr [esp+8], 1Ch
		sub	eax, 1Ch
		mov	[ebp+var_7C], eax
		mov	eax, [ebp+var_84]
		sub	edx, 14h
		mov	[ebp+var_80], edx
		mov	[esp+4], ecx
		mov	[ebp+var_68], 5
		mov	[esp], eax
		call	[ebp+var_70]
		mov	[ebp+var_78], eax
		sub	eax, 1Ch
		test	eax, eax
		mov	[ebp+var_88], eax
		jz	short loc_41160F
		mov	ecx, [ebp+var_7C]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_78]
		mov	[ecx-1Ch], edx
		lock inc dword ptr [edx]
		setnz	cl

loc_41160F:				; CODE XREF: sub_411530+CCj
		add	eax, 8
		jz	short loc_41162B
		mov	edx, [ebp+var_80]
		mov	[esp], eax
		mov	[ebp+var_68], 3
		mov	[esp+4], edx
		call	ds:_ZN8QVariantC1ERKS_

loc_41162B:				; CODE XREF: sub_411530+E2j
		mov	ecx, [ebp+var_74]
		mov	eax, [ebp+arg_0]
		mov	ecx, [ecx+4]
		mov	[ebp+var_74], ecx
		cmp	[eax], ecx
		jnz	loc_4115B2

loc_41163F:				; CODE XREF: sub_411530+73j
		mov	ecx, [ebp+var_84]
		and	byte ptr [ecx+44h], 0FEh
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]

loc_41164E:				; CODE XREF: sub_411530+56j
		lock dec dword ptr [eax+34h]
		setnz	dl
		test	dl, dl
		jnz	short loc_411671
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		mov	[esp], ecx
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp+4], eax
		call	sub_411790

loc_411671:				; CODE XREF: sub_411530+127j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_84]
		mov	[eax], edx
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_411530	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_411689	proc near		; DATA XREF: sub_411530+23o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-68h]
		mov	edx, [ebp-64h]
		cmp	eax, 1
		mov	[ebp-8Ch], edx
		jz	loc_411736
		cmp	eax, 2
		jz	short loc_41170E
		cmp	eax, 3
		jz	short loc_4116ED
		cmp	eax, 4
		xchg	ax, ax
		jz	short loc_4116BE
		mov	dword ptr [ebp-68h], 0
		call	sub_413920

loc_4116BE:				; CODE XREF: sub_411689+27j
		mov	edx, [ebp-8Ch]
		mov	[esp+0], edx
		call	sub_413650
		mov	ecx, [ebp-84h]
		mov	eax, [ebp+8]
		mov	dword ptr [ebp-68h], 4
		mov	[esp+arg_0], ecx
		mov	[esp+0], eax
		call	sub_411790
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_4116ED:				; CODE XREF: sub_411689+20j
		mov	dword ptr [ebp-68h], 0
		call	sub_413920
		mov	edx, [ebp-8Ch]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_41170E:				; CODE XREF: sub_411689+1Bj
		mov	ecx, [ebp-8Ch]
		mov	[esp+0], ecx
		call	sub_413650
		mov	eax, [ebp-88h]
		mov	dword ptr [ebp-68h], 2
		mov	[esp+0], eax
		call	sub_4126A0
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_411736:				; CODE XREF: sub_411689+12j
		mov	dword ptr [ebp-68h], 0
		call	sub_413920
		mov	edx, [ebp-8Ch]
		mov	[esp+0], edx
		call	sub_413650
		lea	eax, [ebp-38h]
		mov	ecx, [ebp-78h]
		mov	[esp+arg_0], eax
		mov	eax, [ebp-84h]
		mov	[esp+arg_4], 1Ch
		mov	dword ptr [ebp-68h], 1
		mov	[esp+arg_8], ecx
		mov	[esp+0], eax
		call	ds:_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_
		call	sub_413E60
sub_411689	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411790	proc near		; CODE XREF: sub_4024A0+1354p
					; sub_411530+13Cp ...

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_4]
		mov	eax, [edi+4]
		cmp	edi, eax
		jz	short loc_4117DF
		mov	ebp, ds:_ZN8QVariantD1Ev
		jmp	short loc_4117B2
; ---------------------------------------------------------------------------
		align 10h

loc_4117B0:				; CODE XREF: sub_411790+4Bj
		mov	eax, ebx

loc_4117B2:				; CODE XREF: sub_411790+18j
		mov	ebx, [eax+4]
		lea	esi, [eax-1Ch]
		mov	edx, [eax-1Ch]
		lock dec dword ptr [edx]
		setnz	cl
		test	cl, cl
		jnz	short loc_4117D1
		mov	eax, [eax-1Ch]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ZN7QString4freeEPNS_4DataE

loc_4117D1:				; CODE XREF: sub_411790+33j
		lea	eax, [esi+8]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN8QVariantD1Ev
		cmp	edi, ebx
		jnz	short loc_4117B0
		mov	eax, edi

loc_4117DF:				; CODE XREF: sub_411790+10j
		mov	[esp+2Ch+arg_0], eax
		mov	eax, ds:_ZN8QMapData16continueFreeDataEi
		mov	[esp+2Ch+arg_4], 1Ch
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_411790	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411800	proc near		; CODE XREF: sub_4024A0+850p
					; sub_4024A0+C93p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_411826
		lock dec dword ptr [eax+34h]
		setnz	cl
		test	cl, cl
		jnz	short loc_411826
		mov	eax, [edx]
		mov	[esp+1Ch+var_1C], edx
		mov	[esp+1Ch+var_18], eax
		call	sub_411790

loc_411826:				; CODE XREF: sub_411800+Bj
					; sub_411800+16j
		add	esp, 1Ch
		retn
sub_411800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411830	proc near		; CODE XREF: sub_406220+4E8p
					; sub_411890+1Cp

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebp, [esp+2Ch+arg_4]
		mov	edx, [ebp+0Ch]
		lea	eax, [ebp+14h]
		lea	ebx, [eax+edx*4]
		mov	edx, [ebp+8]
		lea	esi, [eax+edx*4]
		cmp	ebx, esi
		jz	short loc_41187D
		mov	edi, ds:_Z5qFreePv

loc_411854:				; CODE XREF: sub_411830+3Cj
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_41186A
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	edi ; _Z5qFreePv

loc_41186A:				; CODE XREF: sub_411830+31j
		cmp	esi, ebx
		jnz	short loc_411854

loc_41186E:				; CODE XREF: sub_411830+53j
		mov	[esp+2Ch+arg_0], ebp
		mov	eax, edi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_41187D:				; CODE XREF: sub_411830+1Cj
		mov	edi, ds:_Z5qFreePv
		jmp	short loc_41186E
sub_411830	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411890	proc near		; CODE XREF: sub_4017F0+86Ap
					; sub_4017F0+87Fp ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jnz	short loc_4118B1
		mov	eax, [edx]
		mov	[esp+1Ch+var_1C], edx
		mov	[esp+1Ch+var_18], eax
		call	sub_411830

loc_4118B1:				; CODE XREF: sub_411890+11j
		add	esp, 1Ch
		retn
sub_411890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4118C0	proc near		; CODE XREF: sub_4024A0+9F5p
					; sub_403AE0+290p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [ebx]
		mov	eax, [esi+4]
		mov	edi, [esi+8]
		mov	[esp+3Ch+var_3C], ebx
		mov	[esp+3Ch+var_38], eax
		call	ds:_ZN9QListData6detachEi
		mov	[esp+3Ch+var_20], eax
		mov	edx, [ebx]
		mov	ecx, [edx+0Ch]
		lea	ebp, [edx+ecx*4+14h]
		mov	ecx, [edx+8]
		lea	edx, [edx+ecx*4+14h]
		cmp	ebp, edx
		jz	short loc_411918
		lea	esi, [esi+edi*4+14h]
		jmp	short loc_411903
; ---------------------------------------------------------------------------
		align 10h

loc_411900:				; CODE XREF: sub_4118C0+56j
		add	esi, 4

loc_411903:				; CODE XREF: sub_4118C0+3Cj
		test	edx, edx
		jz	short loc_411911
		mov	ecx, [esi]
		mov	[edx], ecx
		lock inc dword ptr [ecx]
		setnz	al

loc_411911:				; CODE XREF: sub_4118C0+45j
		add	edx, 4
		cmp	ebp, edx
		jnz	short loc_411900

loc_411918:				; CODE XREF: sub_4118C0+36j
		mov	eax, [esp+3Ch+var_20]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_411932
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_411940

loc_411932:				; CODE XREF: sub_4118C0+64j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4118C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_411940	proc near		; CODE XREF: sub_4024A0+5D1p
					; sub_4024A0+8F7p ...

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_4]
		mov	edx, [edi+0Ch]
		lea	eax, [edi+14h]
		lea	ebx, [eax+edx*4]
		mov	edx, [edi+8]
		lea	esi, [eax+edx*4]
		cmp	ebx, esi
		jz	short loc_41197E
		mov	ebp, ds:_ZN7QString4freeEPNS_4DataE

loc_411964:				; CODE XREF: sub_411940+3Cj
		sub	ebx, 4
		mov	eax, [ebx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jnz	short loc_41197A
		mov	eax, [ebx]
		mov	[esp+2Ch+var_2C], eax
		call	ebp ; _ZN7QString4freeEPNS_4DataE

loc_41197A:				; CODE XREF: sub_411940+31j
		cmp	esi, ebx
		jnz	short loc_411964

loc_41197E:				; CODE XREF: sub_411940+1Cj
		mov	eax, ds:_Z5qFreePv
		mov	[esp+2Ch+arg_0], edi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_411940	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_411990	proc near		; CODE XREF: sub_406220+C77p
					; sub_406220+1D17p ...

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 6Ch
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_413F20
		mov	[ebp+var_40], offset dword_4145BC
		mov	[ebp+var_38], offset sub_411B10
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_411AD0
		mov	[ebp+var_20], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_20]
		mov	[ebp+var_64], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	ebx, [ebp+var_20]
		lea	edi, ds:0[ebx*4]
		mov	[ebp+var_60], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	esi, [ecx+8]
		lea	eax, [ecx+esi*4+14h]
		lea	edx, [eax+edi]
		cmp	eax, edx
		jz	short loc_411A5A
		mov	ebx, [ebp+var_64]
		mov	edi, edx
		jmp	short loc_411A33
; ---------------------------------------------------------------------------
		align 10h

loc_411A30:				; CODE XREF: sub_411990+B6j
		add	ebx, 4

loc_411A33:				; CODE XREF: sub_411990+9Cj
		test	eax, eax
		jz	short loc_411A41
		mov	ecx, [ebx]
		mov	[eax], ecx
		lock inc dword ptr [ecx]
		setnz	dl

loc_411A41:				; CODE XREF: sub_411990+A5j
		add	eax, 4
		cmp	edi, eax
		jnz	short loc_411A30
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+var_20]
		mov	ecx, [eax]
		lea	edi, ds:0[ebx*4]
		mov	esi, [ecx+8]

loc_411A5A:				; CODE XREF: sub_411990+95j
		mov	eax, [ecx+0Ch]
		lea	edx, [ecx+esi*4+14h]
		lea	edx, [edx+ebx*4+4]
		lea	eax, [ecx+eax*4+14h]
		cmp	eax, edx
		jz	short loc_411A8A
		add	edi, [ebp+var_64]
		jmp	short loc_411A75
; ---------------------------------------------------------------------------

loc_411A72:				; CODE XREF: sub_411990+F8j
		add	edi, 4

loc_411A75:				; CODE XREF: sub_411990+E0j
		test	edx, edx
		jz	short loc_411A83
		mov	ecx, [edi]
		mov	[edx], ecx
		lock inc dword ptr [ecx]
		setnz	bl

loc_411A83:				; CODE XREF: sub_411990+E7j
		add	edx, 4
		cmp	eax, edx
		jnz	short loc_411A72

loc_411A8A:				; CODE XREF: sub_411990+DBj
		mov	edx, [ebp+var_60]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jz	short loc_411AF8

loc_411A97:				; CODE XREF: sub_411990+17Ej
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+14h]
		mov	edx, [ebp+var_20]
		lea	edx, [eax+edx*4]
		test	edx, edx
		jz	short loc_411ABA
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx]
		mov	[edx], eax
		lock inc dword ptr [eax]
		setnz	dl

loc_411ABA:				; CODE XREF: sub_411990+11Bj
					; sub_411990+166j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_411AD0:				; CODE XREF: sub_411990+3Cj
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	[ebp+var_1C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_58], 2
		mov	[esp], ecx
		call	ds:_ZN9QListData6appendEv
		mov	edx, [ebp+var_1C]
		mov	[eax], edx
		jmp	short loc_411ABA
; ---------------------------------------------------------------------------

loc_411AF8:				; CODE XREF: sub_411990+105j
		mov	ecx, [ebp+arg_0]
		mov	[esp+4], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], ecx
		call	sub_411940
		jmp	short loc_411A97
sub_411990	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_411B10	proc near		; DATA XREF: sub_411990+23o
		add	ebp, 18h
		mov	ecx, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-68h], ecx
		jz	short loc_411B3D
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	eax, [ebp-68h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_411B3D:				; CODE XREF: sub_411B10+Dj
		mov	eax, [ebp-68h]
		mov	[esp+0], eax
		call	sub_413650
		lea	edx, [ebp-1Ch]
		mov	[esp+0], edx
		mov	dword ptr [ebp-58h], 1
		call	sub_4126A0
		call	sub_413E60
sub_411B10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_411B60	proc near		; CODE XREF: sub_4024A0+7A7p
					; sub_406220+16A1p ...

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_41459C
		mov	[ebp+var_18], offset sub_411C73
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [edx]
		mov	ecx, [edx+8]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_5C], edx
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[ebp+var_60], ecx
		mov	[esp], eax
		call	ds:_ZN9QListData6detachEi
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_54], eax
		mov	eax, [edx]
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		mov	[ebp+var_50], edx
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+10h]
		lea	ecx, [eax+4]
		cmp	[ebp+var_50], ecx
		mov	[ebp+var_58], ecx
		jz	short loc_411C43
		mov	ecx, [ebp+var_5C]
		add	eax, 8
		mov	edx, [ebp+var_60]
		mov	[ebp+var_44], eax
		lea	edx, [ecx+edx*4+14h]
		mov	ecx, [ebp+var_58]
		mov	[ebp+var_4C], edx
		mov	[ebp+var_40], ecx
		jmp	short loc_411BFA
; ---------------------------------------------------------------------------

loc_411BF6:				; CODE XREF: sub_411B60+E1j
		add	[ebp+var_4C], 4

loc_411BFA:				; CODE XREF: sub_411B60+94j
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_38], 3
		call	sub_413160
		mov	edx, [ebp+var_4C]
		mov	[ebp+var_48], eax
		mov	ecx, [ebp+var_48]
		mov	eax, [edx]
		mov	[esp], ecx
		mov	[ebp+var_38], 2
		mov	[esp+4], eax
		call	ds:_ZN8QVariantC1ERKS_
		mov	eax, [ebp+var_44]
		mov	edx, [ebp+var_40]
		mov	ecx, [ebp+var_48]
		add	[ebp+var_44], 4
		cmp	[ebp+var_50], eax
		mov	[ebp+var_40], eax
		mov	[edx], ecx
		jnz	short loc_411BF6

loc_411C43:				; CODE XREF: sub_411B60+79j
		mov	ecx, [ebp+var_54]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jnz	short loc_411C66
		mov	eax, [ebp+arg_0]
		mov	[esp+4], ecx
		mov	[ebp+var_38], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_411D40

loc_411C66:				; CODE XREF: sub_411B60+EEj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
sub_411B60	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_411C73	proc near		; DATA XREF: sub_411B60+20o
		add	ebp, 8
		mov	eax, [ebp-38h]
		mov	ecx, [ebp-34h]
		cmp	eax, 1
		mov	[ebp-68h], ecx
		jz	short loc_411CCB
		cmp	eax, 2
		jz	short loc_411CD6
		cmp	eax, 3
		jz	loc_411D16
		mov	dword ptr [ebp-38h], 0
		call	sub_413920
		mov	eax, [ebp-68h]
		mov	[esp+0], eax
		call	sub_413650
		mov	edx, [ebp+8]
		mov	eax, [edx]
		mov	dword ptr [ebp-38h], 4
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-54h]
		mov	ecx, [ebp+8]
		mov	[ecx], eax
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_411CCB:				; CODE XREF: sub_411C73+Fj
		mov	eax, [ebp-48h]
		mov	[esp+0], eax
		call	sub_413140

loc_411CD6:				; CODE XREF: sub_411C73+14j
		mov	edx, [ebp-68h]
		mov	[esp+0], edx
		call	sub_413650

loc_411CE1:				; CODE XREF: sub_411C73+84j
					; sub_411C73+A1j
		mov	edx, [ebp-40h]
		cmp	[ebp-58h], edx
		jz	short loc_411D34
		sub	dword ptr [ebp-40h], 4
		mov	ecx, [ebp-40h]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-64h], ecx
		jz	short loc_411CE1
		mov	[esp+0], ecx
		mov	dword ptr [ebp-38h], 1
		call	ds:_ZN8QVariantD1Ev
		mov	eax, [ebp-64h]
		mov	[esp+0], eax
		call	sub_413140
		jmp	short loc_411CE1
; ---------------------------------------------------------------------------

loc_411D16:				; CODE XREF: sub_411C73+19j
		mov	dword ptr [ebp-38h], 0
		call	sub_413920
		mov	edx, [ebp-68h]
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_411D34:				; CODE XREF: sub_411C73+74j
		mov	dword ptr [ebp-38h], 1
		call	sub_413E60
sub_411C73	endp


; =============== S U B	R O U T	I N E =======================================


sub_411D40	proc near		; CODE XREF: sub_411B60+101p
					; sub_411DA0+C3p ...

var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_20], eax
		mov	ecx, [esp+3Ch+var_20]
		add	eax, 14h
		mov	edx, [ecx+0Ch]
		lea	ebx, [eax+edx*4]
		mov	edx, [ecx+8]
		lea	edi, [eax+edx*4]
		cmp	ebx, edi
		jz	short loc_411D8A
		mov	ebp, ds:_ZN8QVariantD1Ev
		lea	esi, [esi+0]

loc_411D70:				; CODE XREF: sub_411D40+48j
		sub	ebx, 4
		mov	esi, [ebx]
		test	esi, esi
		jz	short loc_411D86
		mov	[esp+3Ch+var_3C], esi
		call	ebp ; _ZN8QVariantD1Ev
		mov	[esp+3Ch+var_3C], esi
		call	sub_413140

loc_411D86:				; CODE XREF: sub_411D40+37j
		cmp	edi, ebx
		jnz	short loc_411D70

loc_411D8A:				; CODE XREF: sub_411D40+24j
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+arg_0], eax
		mov	eax, ds:_Z5qFreePv
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
sub_411D40	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_411DA0	proc near		; CODE XREF: sub_4024A0+309p
					; sub_406220+29Cp

var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_413F20
		mov	[ebp+var_30], offset dword_4145B4
		mov	[ebp+var_28], offset sub_411E6A
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, ds:_ZN9QListData11shared_nullE
		mov	[ebp+var_C], eax
		lock inc dword ptr [eax]
		setnz	dl
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_50], edx
		cmp	[eax], edx
		jz	short loc_411E0D
		lock inc dword ptr [edx]
		setnz	al
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	dl
		test	dl, dl
		jz	short loc_411E50

loc_411DFF:				; CODE XREF: sub_411DA0+C8j
		mov	edx, [ebp+var_50]
		mov	eax, [ebp+arg_0]
		mov	[eax], edx
		test	byte ptr [edx+10h], 1
		jz	short loc_411E30

loc_411E0D:				; CODE XREF: sub_411DA0+48j
					; sub_411DA0+A9j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_412440
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_411E30:				; CODE XREF: sub_411DA0+6Bj
		mov	eax, [edx+4]
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_411B60
		jmp	short loc_411E0D
; ---------------------------------------------------------------------------
		align 10h

loc_411E50:				; CODE XREF: sub_411DA0+5Dj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[esp], edx
		mov	[ebp+var_48], 1
		mov	[esp+4], eax
		call	sub_411D40
		jmp	short loc_411DFF
sub_411DA0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_411E6A	proc near		; DATA XREF: sub_411DA0+20o
		add	ebp, 8
		mov	edx, [ebp-44h]
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	[ebp-54h], edx
		mov	dword ptr [ebp-48h], 0
		call	sub_412440
		mov	eax, [ebp-54h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
sub_411E6A	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_411EA0	proc near		; CODE XREF: sub_4024A0+372p
					; sub_406220+587p

var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 0CCh
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_413F20
		mov	[ebp+var_40], offset dword_414570
		mov	[ebp+var_38], offset sub_412153
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_4120F7
		mov	[ebp+var_1C], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_98], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_88], eax
		mov	eax, [edi]
		mov	ebx, [eax+8]
		lea	edx, [eax+ebx*4+10h]
		lea	ecx, [edx+4]
		mov	[ebp+var_90], ecx
		mov	ecx, [ebp+var_1C]
		mov	edi, [ebp+var_90]
		lea	esi, ds:0[ecx*4]
		add	edi, esi
		cmp	[ebp+var_90], edi
		mov	[ebp+var_84], edi
		jz	loc_411FDD
		add	edx, 8
		mov	eax, [ebp+var_90]
		mov	[ebp+var_7C], edx
		mov	edx, [ebp+var_98]
		mov	[ebp+var_60], eax
		mov	[ebp+var_74], edx
		jmp	short loc_411F7A
; ---------------------------------------------------------------------------

loc_411F76:				; CODE XREF: sub_411EA0+129j
		add	[ebp+var_74], 4

loc_411F7A:				; CODE XREF: sub_411EA0+D4j
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 8
		call	sub_413160
		mov	ecx, [ebp+var_74]
		mov	[ebp+var_70], eax
		mov	edi, [ebp+var_70]
		mov	eax, [ecx]
		mov	[esp], edi
		mov	[ebp+var_58], 7
		mov	[esp+4], eax
		call	ds:_ZN8QVariantC1ERKS_
		mov	edi, [ebp+var_7C]
		mov	edx, [ebp+var_60]
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_60], edi
		mov	eax, [ebp+var_60]
		add	edi, 4
		cmp	[ebp+var_84], eax
		mov	[edx], ecx
		mov	[ebp+var_7C], edi
		jnz	short loc_411F76
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx]
		lea	esi, ds:0[ecx*4]
		mov	ebx, [eax+8]

loc_411FDD:				; CODE XREF: sub_411EA0+B6j
		mov	edx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		lea	eax, [eax+ebx*4+14h]
		lea	eax, [eax+ecx*4+4]
		cmp	edx, eax
		mov	[ebp+var_80], edx
		mov	[ebp+var_8C], eax
		jz	short loc_412060
		mov	ecx, [ebp+var_8C]
		add	eax, 4
		add	esi, [ebp+var_98]
		mov	[ebp+var_68], eax
		mov	[ebp+var_78], esi
		mov	[ebp+var_64], ecx
		jmp	short loc_412017
; ---------------------------------------------------------------------------

loc_412013:				; CODE XREF: sub_411EA0+1BEj
		add	[ebp+var_78], 4

loc_412017:				; CODE XREF: sub_411EA0+171j
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 5
		call	sub_413160
		mov	edi, [ebp+var_78]
		mov	[ebp+var_6C], eax
		mov	eax, [edi]
		mov	[ebp+var_58], 4
		mov	[esp+4], eax
		mov	eax, [ebp+var_6C]
		mov	[esp], eax
		call	ds:_ZN8QVariantC1ERKS_
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+var_64]
		mov	edi, [ebp+var_6C]
		add	[ebp+var_68], 4
		cmp	[ebp+var_80], eax
		mov	[ebp+var_64], eax
		mov	[ecx], edi
		jnz	short loc_412013

loc_412060:				; CODE XREF: sub_411EA0+157j
		mov	ecx, [ebp+var_88]
		lock dec dword ptr [ecx]
		setnz	al
		test	al, al
		jz	short loc_4120DC

loc_412070:				; CODE XREF: sub_411EA0+252j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, [eax+8]
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 0Eh
		lea	edx, [eax+edx*4+14h]
		mov	eax, [ebp+var_1C]
		lea	eax, [edx+eax*4]
		mov	[ebp+var_9C], eax
		call	sub_413160
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_94], eax
		mov	[esp], eax
		mov	[ebp+var_58], 2
		mov	[esp+4], ecx
		call	ds:_ZN8QVariantC1ERKS_
		mov	edx, [ebp+var_94]
		mov	eax, [ebp+var_9C]
		mov	[eax], edx

loc_4120C6:				; CODE XREF: sub_411EA0+2AEj
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4120DC:				; CODE XREF: sub_411EA0+1CEj
		mov	edi, [ebp+arg_0]
		mov	[esp+4], ecx
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edi
		call	sub_411D40
		jmp	loc_412070
; ---------------------------------------------------------------------------

loc_4120F7:				; CODE XREF: sub_411EA0+3Fj
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[esp], edx
		call	ds:_ZN9QListData6appendEv
		mov	dword ptr [esp], 10h ; size_t
		mov	[ebp+var_58], 0Ch
		mov	[ebp+var_A4], eax
		call	sub_413160
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_A0], eax
		mov	[esp], eax
		mov	[ebp+var_58], 1
		mov	[esp+4], ecx
		call	ds:_ZN8QVariantC1ERKS_
		mov	ecx, [ebp+var_A0]
		mov	edx, [ebp+var_A4]
		mov	[edx], ecx
		jmp	loc_4120C6
sub_411EA0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_412153	proc near		; DATA XREF: sub_411EA0+26o
		add	ebp, 18h
		mov	eax, [ebp-58h]
		mov	edi, [ebp-54h]
		cmp	eax, 1
		mov	[ebp-0A8h], edi
		jz	loc_41231C
		cmp	eax, 2
		jz	loc_412297
		cmp	eax, 3
		jz	loc_412390
		cmp	eax, 4
		jz	loc_41239B
		cmp	eax, 5
		jz	loc_4123F3
		cmp	eax, 6
		jz	loc_412242
		cmp	eax, 7
		nop
		lea	esi, [esi+0]
		jz	loc_41224D
		cmp	eax, 8
		jz	short loc_412221
		cmp	eax, 9
		xchg	ax, ax
		jz	short loc_412221
		cmp	eax, 0Ah
		jz	short loc_412200
		cmp	eax, 0Bh
		jz	short loc_4121DD
		cmp	eax, 0Ch
		nop
		jz	loc_41236F
		cmp	eax, 0Dh
		jz	loc_41232A
		mov	eax, [ebp-0A0h]
		mov	[esp+0], eax
		call	sub_413140

loc_4121DD:				; CODE XREF: sub_412153+67j
		mov	edi, [ebp-0A8h]
		mov	[esp+0], edi
		call	sub_413650
		mov	edx, [ebp+8]
		mov	eax, [edx]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Bh
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_412200:				; CODE XREF: sub_412153+62j
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	ecx, [ebp-0A8h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], ecx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_412221:				; CODE XREF: sub_412153+56j
					; sub_412153+5Dj
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	edx, [ebp-0A8h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_412242:				; CODE XREF: sub_412153+3Fj
		mov	eax, [ebp-70h]
		mov	[esp+0], eax
		call	sub_413140

loc_41224D:				; CODE XREF: sub_412153+4Dj
		mov	ecx, [ebp-0A8h]
		mov	[esp+0], ecx
		call	sub_413650

loc_41225B:				; CODE XREF: sub_412153+128j
					; sub_412153+142j
		mov	eax, [ebp-60h]
		cmp	[ebp-90h], eax
		jz	loc_412432
		sub	dword ptr [ebp-60h], 4
		mov	edi, [ebp-60h]
		mov	edi, [edi]
		test	edi, edi
		mov	[ebp-0B8h], edi
		jz	short loc_41225B
		mov	[esp+0], edi
		mov	dword ptr [ebp-58h], 6
		call	ds:_ZN8QVariantD1Ev
		mov	[esp+0], edi
		call	sub_413140
		jmp	short loc_41225B
; ---------------------------------------------------------------------------

loc_412297:				; CODE XREF: sub_412153+1Bj
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	edx, [ebp-0A8h]
		mov	[esp+0], edx
		call	sub_413650
		mov	ecx, [ebp+8]
		mov	edx, [ecx]
		mov	eax, [edx+8]
		lea	eax, [edx+eax*4+14h]
		mov	[ebp-0BCh], eax
		mov	eax, [ebp-1Ch]
		mov	edi, [ebp-0BCh]
		lea	eax, [edi+eax*4]
		mov	[ebp-0ACh], eax

loc_4122D5:				; CODE XREF: sub_412153+1A7j
					; sub_412153+1C7j
		mov	ecx, [ebp-0ACh]
		cmp	[ebp-0BCh], ecx
		jz	short loc_41234D
		sub	dword ptr [ebp-0ACh], 4
		mov	eax, [ebp-0ACh]
		mov	eax, [eax]
		test	eax, eax
		mov	[ebp-0B0h], eax
		jz	short loc_4122D5
		mov	[esp+0], eax
		mov	dword ptr [ebp-58h], 9
		call	ds:_ZN8QVariantD1Ev
		mov	edx, [ebp-0B0h]
		mov	[esp+0], edx
		call	sub_413140
		jmp	short loc_4122D5
; ---------------------------------------------------------------------------

loc_41231C:				; CODE XREF: sub_412153+12j
		mov	edi, [ebp-94h]
		mov	[esp+0], edi
		call	sub_413140

loc_41232A:				; CODE XREF: sub_412153+76j
		mov	ecx, [ebp-0A8h]
		mov	[esp+0], ecx
		call	sub_413650
		mov	edi, [ebp+8]
		mov	eax, [edi]
		sub	dword ptr [eax+0Ch], 1
		mov	dword ptr [ebp-58h], 0Dh
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_41234D:				; CODE XREF: sub_412153+18Ej
		mov	edi, [ebp+8]
		mov	eax, [edi]
		mov	dword ptr [ebp-58h], 9
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-88h]
		mov	[edi], eax
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_41236F:				; CODE XREF: sub_412153+6Dj
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	eax, [ebp-0A8h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_412390:				; CODE XREF: sub_412153+24j
		mov	edx, [ebp-6Ch]
		mov	[esp+0], edx
		call	sub_413140

loc_41239B:				; CODE XREF: sub_412153+2Dj
		mov	edx, [ebp-0A8h]
		mov	[esp+0], edx
		call	sub_413650

loc_4123A9:				; CODE XREF: sub_412153+272j
					; sub_412153+292j
		mov	eax, [ebp-64h]
		cmp	[ebp-8Ch], eax
		jz	short loc_4123E7
		sub	dword ptr [ebp-64h], 4
		mov	ecx, [ebp-64h]
		mov	ecx, [ecx]
		test	ecx, ecx
		mov	[ebp-0B4h], ecx
		jz	short loc_4123A9
		mov	[esp+0], ecx
		mov	dword ptr [ebp-58h], 3
		call	ds:_ZN8QVariantD1Ev
		mov	edi, [ebp-0B4h]
		mov	[esp+0], edi
		call	sub_413140
		jmp	short loc_4123A9
; ---------------------------------------------------------------------------

loc_4123E7:				; CODE XREF: sub_412153+25Fj
		mov	dword ptr [ebp-58h], 3
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_4123F3:				; CODE XREF: sub_412153+36j
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	edx, [ebp-0A8h]
		mov	[esp+0], edx
		call	sub_413650
		mov	ecx, [ebp+8]
		mov	eax, [ecx]
		mov	dword ptr [ebp-58h], 0Ah
		mov	[esp+0], eax
		call	ds:_Z5qFreePv
		mov	eax, [ebp-88h]
		mov	edi, [ebp+8]
		mov	[edi], eax
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_412432:				; CODE XREF: sub_412153+111j
		mov	dword ptr [ebp-58h], 6
		call	sub_413E60
sub_412153	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412440	proc near		; CODE XREF: sub_4024A0+418p
					; sub_4024A0+7DDp ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jnz	short loc_412461
		mov	eax, [edx]
		mov	[esp+1Ch+var_1C], edx
		mov	[esp+1Ch+var_18], eax
		call	sub_411D40

loc_412461:				; CODE XREF: sub_412440+11j
		add	esp, 1Ch
		retn
sub_412440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412470	proc near		; CODE XREF: sub_406220+2D0p
					; sub_406220+305p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_8], esi
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], ebx
		mov	[esp+1Ch+var_4], edi
		mov	eax, [esi]
		mov	edx, [eax+8]
		mov	[esp+1Ch+var_1C], esi
		lea	edi, [eax+edx*4+14h]
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], eax
		call	ds:_ZN9QListData6detachEi
		mov	ebx, eax
		mov	eax, [esi]
		mov	edx, [eax+8]
		mov	ecx, [eax+0Ch]
		lea	edx, [eax+edx*4+14h]
		cmp	edi, edx
		jz	short loc_4124CD
		lea	eax, [eax+ecx*4+14h]
		sub	eax, edx
		cmp	eax, 3
		jle	short loc_4124CD
		and	eax, 0FFFFFFFCh
		mov	[esp+1Ch+var_14], eax ;	size_t
		mov	[esp+1Ch+var_18], edi ;	void *
		mov	[esp+1Ch+var_1C], edx ;	void *
		call	memcpy

loc_4124CD:				; CODE XREF: sub_412470+3Dj
					; sub_412470+48j
		lock dec dword ptr [ebx]
		setnz	al
		test	al, al
		jnz	short loc_4124E0
		mov	[esp+1Ch+var_1C], ebx
		call	ds:_Z5qFreePv

loc_4124E0:				; CODE XREF: sub_412470+65j
		mov	ebx, [esp+1Ch+var_C]
		mov	esi, [esp+1Ch+var_8]
		mov	edi, [esp+1Ch+var_4]
		add	esp, 1Ch
		retn
sub_412470	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4124F0	proc near		; CODE XREF: sub_406220+20Fp

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		lea	eax, [ebp+var_18]
		sub	esp, 7Ch
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_413F20
		mov	[ebp+var_40], offset dword_414560
		mov	[ebp+var_38], offset sub_412656
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	eax, [eax]
		cmp	eax, 1
		jz	loc_412631
		mov	[ebp+var_1C], 7FFFFFFFh
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		mov	[esp], ecx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_58], 0FFFFFFFFh
		lea	edx, [eax+edx*4+14h]
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_64], edx
		mov	[esp+4], eax
		call	ds:_ZN9QListData11detach_growEPii
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_60], eax
		mov	eax, [edx]
		mov	edx, [ebp+var_1C]
		mov	ecx, [eax+8]
		lea	ebx, ds:0[edx*4]
		lea	esi, [eax+ecx*4+14h]
		cmp	[ebp+var_64], esi
		jz	short loc_41258A
		cmp	ebx, 3
		jg	short loc_412607

loc_41258A:				; CODE XREF: sub_4124F0+93j
					; sub_4124F0+13Cj
		add	ebx, [ebp+var_64]
		lea	ecx, [eax+ecx*4+14h]
		mov	esi, [eax+0Ch]
		lea	edx, [ecx+edx*4+4]
		cmp	ebx, edx
		jz	short loc_4125A7
		lea	eax, [eax+esi*4+14h]
		sub	eax, edx
		cmp	eax, 3
		jg	short loc_4125F2

loc_4125A7:				; CODE XREF: sub_4124F0+AAj
					; sub_4124F0+115j
		mov	edx, [ebp+var_60]
		lock dec dword ptr [edx]
		setnz	al
		test	al, al
		jz	short loc_4125E0

loc_4125B4:				; CODE XREF: sub_4124F0+100j
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		mov	edx, [eax+8]
		lea	eax, [eax+edx*4+14h]
		mov	edx, [ebp+arg_4]
		mov	ecx, [edx]
		mov	edx, [ebp+var_1C]
		mov	[eax+edx*4], ecx

loc_4125CB:				; CODE XREF: sub_4124F0+161j
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4125E0:				; CODE XREF: sub_4124F0+C2j
		mov	[esp], edx
		mov	[ebp+var_58], 0FFFFFFFFh
		call	ds:_Z5qFreePv
		jmp	short loc_4125B4
; ---------------------------------------------------------------------------

loc_4125F2:				; CODE XREF: sub_4124F0+B5j
		and	eax, 0FFFFFFFCh
		mov	[esp+8], eax	; size_t
		mov	[esp+4], ebx	; void *
		mov	[esp], edx	; void *
		call	memcpy
		jmp	short loc_4125A7
; ---------------------------------------------------------------------------

loc_412607:				; CODE XREF: sub_4124F0+98j
		mov	ecx, [ebp+var_64]
		mov	[esp+8], ebx	; size_t
		mov	[esp], esi	; void *
		mov	[esp+4], ecx	; void *
		call	memcpy
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_1C]
		mov	eax, [ecx]
		lea	ebx, ds:0[edx*4]
		mov	ecx, [eax+8]
		jmp	loc_41258A
; ---------------------------------------------------------------------------

loc_412631:				; CODE XREF: sub_4124F0+3Cj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	ecx, [ecx]
		mov	[esp], eax
		mov	[ebp+var_58], 2
		mov	[ebp+var_68], ecx
		call	ds:_ZN9QListData6appendEv
		mov	edx, [ebp+var_68]
		mov	[eax], edx
		jmp	loc_4125CB
sub_4124F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_412656	proc near		; DATA XREF: sub_4124F0+23o
		add	ebp, 18h
		mov	eax, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-6Ch], eax
		jz	short loc_412683
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	edx, [ebp-6Ch]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_412683:				; CODE XREF: sub_412656+Dj
		mov	ecx, [ebp-6Ch]
		mov	[esp+0], ecx
		call	sub_413650
		mov	dword ptr [ebp-58h], 1
		call	sub_413E60
sub_412656	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4126A0	proc near		; CODE XREF: sub_4017C2+16p
					; sub_402217+15Dp ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [edx]
		lock dec dword ptr [eax]
		setnz	cl
		test	cl, cl
		jz	short loc_4126B7
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_4126B7:				; CODE XREF: sub_4126A0+11j
		mov	eax, [edx]
		mov	[esp+0Ch+arg_0], eax
		mov	eax, ds:_ZN7QString4freeEPNS_4DataE
		add	esp, 0Ch
		jmp	eax
sub_4126A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4126D0	proc near		; CODE XREF: sub_413160+26Ep
					; sub_4135C1+40p

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_4148BC
		mov	[ebp+var_18], offset sub_412758
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	edx, dword_415014
		mov	eax, [ebp+arg_0]
		test	edx, edx
		mov	eax, [eax]
		jz	short loc_412721
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_40FEC0
		test	eax, eax
		jnz	short loc_41272E

loc_412721:				; CODE XREF: sub_4126D0+3Cj
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_41272E:				; CODE XREF: sub_4126D0+4Fj
		mov	dword ptr [esp], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C200
		mov	dword ptr [esp+8], offset sub_412810
		mov	dword ptr [esp+4], offset off_41BF40
		mov	[esp], eax
		call	sub_413EC0
sub_4126D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_412758	proc near		; DATA XREF: sub_4126D0+20o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_412773
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_412773:				; CODE XREF: sub_412758+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_413790
sub_412758	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412790	proc near		; DATA XREF: .rdata:0041C1ECo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_41C1E8
		mov	[esp+1Ch+var_1C], ebx
		call	sub_413080
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
sub_412790	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4127C0	proc near		; DATA XREF: sub_413160+20Ao
					; sub_4133F0+1B9o ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C1E8
		add	esp, 0Ch
		jmp	sub_413080
sub_4127C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4127E0	proc near		; DATA XREF: .rdata:0041C204o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_41C200
		mov	[esp+1Ch+var_1C], ebx
		call	sub_413080
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
sub_4127E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412810	proc near		; DATA XREF: sub_4126D0+70o
					; sub_413160+1E0o ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C200
		add	esp, 0Ch
		jmp	sub_413080
sub_412810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_412830	proc near		; DATA XREF: .data:off_419A48o

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[ebp+var_34], offset sub_413F20
		mov	[ebp+var_30], offset dword_414914
		mov	[ebp+var_28], offset sub_4129DD
		mov	[ebp+var_24], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_419A68, 0
		jz	short loc_4128A0
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 1Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCalle	; "terminate called recursively\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite
		call	abort
; ---------------------------------------------------------------------------
		align 10h

loc_4128A0:				; CODE XREF: sub_412830+36j
		mov	byte_419A68, 1
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_4138F0
		test	eax, eax
		jz	loc_412995
		mov	eax, [eax+4]
		mov	[ebp+var_C], 0FFFFFFFFh
		mov	dword ptr [esp+8], 0 ; int
		mov	dword ptr [esp+4], 0 ; char *
		mov	[ebp+var_50], eax
		lea	eax, [ebp+var_C]
		mov	[esp+0Ch], eax	; int
		mov	eax, [ebp+var_50]
		mov	[esp], eax	; int
		call	sub_40E870
		mov	dword ptr [esp+8], 30h ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCal_0	; "terminate called after throwing an inst"...
		mov	[ebp+var_54], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		call	fwrite
		mov	edx, [ebp+var_C]
		test	edx, edx
		jnz	short loc_412975
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+4], eax	; FILE *
		mov	eax, [ebp+var_54]
		mov	[esp], eax	; char *
		call	fputs

loc_412933:				; CODE XREF: sub_412830+163j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 2 ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	asc_41A8ED ; "'\n"
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite
		mov	eax, [ebp+var_C]
		test	eax, eax
		jz	short loc_4129D0

loc_412969:				; CODE XREF: sub_412830+1ABj
		mov	[ebp+var_48], 2
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_412975:				; CODE XREF: sub_412830+EAj
		mov	eax, ds:_iob
		mov	[ebp+var_48], 0FFFFFFFFh
		add	eax, 40h
		mov	[esp+4], eax	; FILE *
		mov	eax, [ebp+var_50]
		mov	[esp], eax	; char *
		call	fputs
		jmp	short loc_412933
; ---------------------------------------------------------------------------

loc_412995:				; CODE XREF: sub_412830+85j
		mov	eax, ds:_iob
		mov	dword ptr [esp+8], 2Dh ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTerminateCal_1	; "terminate called without an active exce"...
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	[ebp+var_48], 0FFFFFFFFh
		call	fwrite

loc_4129C4:				; CODE XREF: sub_4129DD+4Cj
		mov	[ebp+var_48], 0FFFFFFFFh
		call	abort
; ---------------------------------------------------------------------------

loc_4129D0:				; CODE XREF: sub_412830+137j
		mov	eax, [ebp+var_54]
		mov	[esp], eax	; void *
		call	free
		jmp	short loc_412969
sub_412830	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_4129DD(size_t, size_t, FILE *)
sub_4129DD	proc near		; DATA XREF: sub_412830+1Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		add	ebp, 8
		mov	eax, [ebp-44h]
		cmp	dword ptr [ebp-48h], 1
		mov	[ebp-58h], eax
		mov	eax, [ebp-40h]
		jz	short loc_412A0D
		mov	dword ptr [ebp-48h], 0
		call	sub_413920
		mov	eax, [ebp-58h]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_412A0D:				; CODE XREF: sub_4129DD+10j
		cmp	eax, 2
		jz	short loc_412A2B
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_413650

loc_412A1D:				; CODE XREF: sub_4129DD+C4j
		mov	dword ptr [ebp-48h], 0
		call	sub_413920
		jmp	short loc_4129C4
; ---------------------------------------------------------------------------

loc_412A2B:				; CODE XREF: sub_4129DD+33j
		mov	eax, [ebp-58h]
		mov	[esp+0], eax
		call	sub_413650
		mov	edx, [eax]
		mov	[esp+0], eax
		mov	eax, [edx+8]
		mov	dword ptr [ebp-48h], 1
		call	eax
		mov	[ebp-5Ch], eax
		mov	eax, ds:_iob
		mov	[esp+arg_4], 0Bh ; size_t
		mov	[esp+arg_0], 1	; size_t
		mov	dword ptr [esp+0], offset aWhat	; "  what():  "
		add	eax, 40h
		mov	[esp+arg_8], eax ; FILE	*
		call	fwrite
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+arg_0], eax ; FILE	*
		mov	eax, [ebp-5Ch]
		mov	[esp+0], eax	; char *
		call	fputs
		mov	eax, ds:_iob
		mov	dword ptr [esp+0], 0Ah ; int
		add	eax, 40h
		mov	[esp+arg_0], eax ; FILE	*
		call	fputc
		jmp	loc_412A1D
sub_4129DD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412AB0	proc near		; DATA XREF: .rdata:0041C158o
					; .rdata:0041C1B8o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	sub_412F70
		mov	edx, eax
		mov	eax, 1
		test	dl, dl
		jnz	short loc_412AF1
		xor	eax, eax
		cmp	edi, 3
		jbe	short loc_412B05

loc_412AF1:				; CODE XREF: sub_412AB0+38j
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_412B05:				; CODE XREF: sub_412AB0+3Fj
		mov	eax, [ebx]
		mov	[esp+2Ch+arg_8], ebp
		mov	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_4], esi
		mov	ebp, [esp+2Ch+var_4]
		mov	[esp+2Ch+arg_0], ebx
		mov	esi, [esp+2Ch+var_C]
		mov	eax, [eax+14h]
		mov	ebx, [esp+2Ch+var_10]
		add	esp, 2Ch
		jmp	eax
sub_412AB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412B30	proc near		; CODE XREF: sub_412C90+32p
					; DATA XREF: .rdata:0041C160o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_412F70
		mov	edx, eax
		xor	eax, eax
		test	dl, dl
		jz	short loc_412B6D
		mov	eax, [esp+1Ch+arg_8]
		mov	dword ptr [ebx+0Ch], 8
		mov	dword ptr [ebx+4], 6
		mov	[ebx], eax
		mov	eax, 1

loc_412B6D:				; CODE XREF: sub_412B30+22j
		add	esp, 18h
		pop	ebx
		retn
sub_412B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412B80	proc near		; DATA XREF: .rdata:0041C15Co
					; .rdata:0041C1BCo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		lea	ecx, [esp+2Ch+var_1C]
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_1C], 0
		mov	[esp+2Ch+var_18], 0
		mov	edx, [eax]
		mov	[esp+2Ch+var_20], ecx
		mov	ecx, [ebx]
		mov	[esp+2Ch+var_14], 10h
		mov	[esp+2Ch+var_10], 0
		mov	[esp+2Ch+var_2C], eax
		mov	[esp+2Ch+var_24], ecx
		mov	ecx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], ecx
		call	dword ptr [edx+18h]
		mov	edx, [esp+2Ch+var_18]
		xor	eax, eax
		and	edx, 6
		cmp	edx, 6
		jnz	short loc_412BE3
		mov	eax, [esp+2Ch+var_1C]
		mov	[ebx], eax
		mov	eax, 1

loc_412BE3:				; CODE XREF: sub_412B80+56j
		add	esp, 28h
		pop	ebx
		retn
sub_412B80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412BF0	proc near		; DATA XREF: .rdata:0041C164o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_10]
		cmp	ebx, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_1C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_8]
		jz	short loc_412C50

loc_412C19:				; CODE XREF: sub_412BF0+72j
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	sub_412F70
		test	al, al
		jz	short loc_412C39
		mov	[edi], ebx
		mov	[edi+4], ebp
		mov	dword ptr [edi+0Ch], 1

loc_412C39:				; CODE XREF: sub_412BF0+3Bj
					; sub_412BF0+77j
		xor	eax, eax
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_412C50:				; CODE XREF: sub_412BF0+27j
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_2C], esi
		mov	[esp+2Ch+var_28], eax
		call	sub_412F70
		test	al, al
		jz	short loc_412C19
		mov	[edi+8], ebp
		jmp	short loc_412C39
sub_412BF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412C70	proc near		; DATA XREF: .rdata:0041C168o

arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		cmp	eax, [esp+arg_8]
		setz	al
		movzx	eax, al
		lea	eax, [eax+eax*4+1]
		retn
sub_412C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412C90	proc near		; DATA XREF: .rdata:0041C1C0o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], ebx
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_C], esi
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_8], edi
		mov	edi, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_4], ebp
		mov	ebp, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_2C], ebp
		call	sub_412B30
		test	al, al
		jz	short loc_412CE4
		mov	eax, 1
		mov	ebx, [esp+2Ch+var_10]
		mov	esi, [esp+2Ch+var_C]
		mov	edi, [esp+2Ch+var_8]
		mov	ebp, [esp+2Ch+var_4]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_412CE4:				; CODE XREF: sub_412C90+39j
		mov	eax, [ebp+8]
		mov	ebp, [esp+2Ch+var_4]
		mov	edx, [eax]
		mov	[esp+2Ch+arg_C], edi
		mov	edi, [esp+2Ch+var_8]
		mov	[esp+2Ch+arg_8], esi
		mov	esi, [esp+2Ch+var_C]
		mov	[esp+2Ch+arg_4], ebx
		mov	ebx, [esp+2Ch+var_10]
		mov	[esp+2Ch+arg_0], eax
		mov	eax, [edx+18h]
		add	esp, 2Ch
		jmp	eax
sub_412C90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412D20	proc near		; DATA XREF: .rdata:0041C1C4o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 3Ch
		mov	ecx, [esp+3Ch+arg_14]
		mov	edx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_8], edi
		mov	eax, [esp+3Ch+arg_8]
		mov	edi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_20], ecx
		mov	ecx, [esp+3Ch+arg_18]
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_1C]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_4], ebp
		mov	ebp, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_3C], edi
		call	sub_412F70
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_2C]
		test	al, al
		jz	short loc_412DB0
		mov	eax, [esp+3Ch+var_24]
		test	ebp, ebp
		mov	[ebx], esi
		mov	[ebx+4], eax
		js	short loc_412E00
		add	esi, ebp
		xor	eax, eax
		cmp	ecx, esi
		setz	al
		lea	eax, [eax+eax*4+1]
		mov	[ebx+0Ch], eax

loc_412D98:				; CODE XREF: sub_412D20+E3j
					; sub_412D20+ECj ...
		xor	eax, eax
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_412DB0:				; CODE XREF: sub_412D20+59j
		cmp	esi, ecx
		jz	short loc_412E10

loc_412DB4:				; CODE XREF: sub_412D20+112j
		mov	edi, [edi+8]
		mov	eax, [edi]
		mov	[esp+3Ch+arg_18], ecx
		mov	ecx, [esp+3Ch+var_20]
		mov	[esp+3Ch+arg_C], edx
		mov	edx, [esp+3Ch+var_24]
		mov	[esp+3Ch+arg_1C], ebx
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_10], esi
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_4], ebp
		mov	ebp, [esp+3Ch+var_4]
		mov	[esp+3Ch+arg_0], edi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_14], ecx
		mov	[esp+3Ch+arg_8], edx
		mov	eax, [eax+1Ch]
		add	esp, 3Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_412E00:				; CODE XREF: sub_412D20+66j
		cmp	ebp, 0FFFFFFFEh
		jnz	short loc_412D98
		mov	dword ptr [ebx+0Ch], 1
		jmp	short loc_412D98
; ---------------------------------------------------------------------------
		align 10h

loc_412E10:				; CODE XREF: sub_412D20+92j
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+var_3C], edi
		mov	[esp+3Ch+var_38], eax
		call	sub_412F70
		mov	edx, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_2C]
		test	al, al
		jz	short loc_412DB4
		mov	edx, [esp+3Ch+var_24]
		mov	[ebx+8], edx
		jmp	loc_412D98
sub_412D20	endp


; =============== S U B	R O U T	I N E =======================================


sub_412E40	proc near		; DATA XREF: .rdata:0041C1C8o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_10], ebx
		mov	ebx, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_C], esi
		mov	esi, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_8], edi
		mov	edx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_4], ebp
		mov	edi, [esp+3Ch+arg_C]
		mov	ebp, [esp+3Ch+arg_0]
		cmp	esi, ebx
		jz	short loc_412EA0

loc_412E6B:				; CODE XREF: sub_412E40+76j
		mov	eax, [ebp+8]
		mov	ebp, [esp+3Ch+var_4]
		mov	ecx, [eax]
		mov	[esp+3Ch+arg_10], esi
		mov	esi, [esp+3Ch+var_C]
		mov	[esp+3Ch+arg_C], edi
		mov	edi, [esp+3Ch+var_8]
		mov	[esp+3Ch+arg_8], ebx
		mov	ebx, [esp+3Ch+var_10]
		mov	[esp+3Ch+arg_4], edx
		mov	[esp+3Ch+arg_0], eax
		mov	eax, [ecx+20h]
		add	esp, 3Ch
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_412EA0:				; CODE XREF: sub_412E40+29j
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebp
		call	sub_412F70
		mov	edx, [esp+3Ch+var_20]
		test	al, al
		jz	short loc_412E6B
		mov	eax, 6
		mov	ebx, [esp+3Ch+var_10]
		mov	esi, [esp+3Ch+var_C]
		mov	edi, [esp+3Ch+var_8]
		mov	ebp, [esp+3Ch+var_4]
		add	esp, 3Ch
		retn
sub_412E40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412EE0	proc near		; DATA XREF: .rdata:0041C1F0o
		mov	eax, offset a__gnu_cxx__con ; "__gnu_cxx::__concurrence_lock_error"
		retn
sub_412EE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412EF0	proc near		; DATA XREF: .rdata:0041C208o
		mov	eax, offset a__gnu_cxx__c_0 ; "__gnu_cxx::__concurrence_unlock_error"
		retn
sub_412EF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412F00	proc near		; DATA XREF: .rdata:0041C220o
		mov	eax, offset aStdBad_excepti ; "std::bad_exception"
		retn
sub_412F00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412F10	proc near		; DATA XREF: .rdata:0041C238o
		mov	eax, offset aStdBad_alloc ; "std::bad_alloc"
		retn
sub_412F10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412F20	proc near		; DATA XREF: .rdata:0041C250o
		mov	eax, offset aStdException ; "std::exception"
		retn
sub_412F20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412F30	proc near		; DATA XREF: .rdata:0041C278o
		sub	esp, 0Ch
		add	esp, 0Ch
		jmp	sub_412F70
sub_412F30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412F40	proc near		; DATA XREF: .rdata:0041C27Co
		xor	eax, eax
		retn
sub_412F40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412F50	proc near		; DATA XREF: .rdata:0041C150o
					; .rdata:0041C1B0o ...
		xor	eax, eax
		retn
sub_412F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412F60	proc near		; DATA XREF: .rdata:0041C154o
					; .rdata:0041C1B4o ...
		xor	eax, eax
		retn
sub_412F60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412F70	proc near		; CODE XREF: sub_412AB0+2Ap
					; sub_412B30+17p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, 1
		mov	edx, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_4]
		cmp	ecx, edx
		jz	short loc_412F9B
		mov	eax, [ecx+4]
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, [edx+4]
		mov	[esp+1Ch+var_1C], eax ;	char *
		call	strcmp
		test	eax, eax
		setz	al

loc_412F9B:				; CODE XREF: sub_412F70+12j
		add	esp, 1Ch
		retn
sub_412F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412FA0	proc near		; DATA XREF: .rdata:0041C21Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C248
		add	esp, 0Ch
		jmp	sub_413140
sub_412FA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412FC0	proc near		; DATA XREF: sub_4137FD+C8o
					; .rdata:off_41C218o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_41C248
		retn
sub_412FC0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	dword ptr [eax], offset	off_41C248
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_412FE0	proc near		; DATA XREF: .rdata:0041C234o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx], offset	off_41C230
		mov	[esp+1Ch+var_1C], ebx
		call	sub_413080
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_413140
sub_412FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_413010	proc near		; DATA XREF: sub_413160+86o
					; .rdata:off_41C230o

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C230
		add	esp, 0Ch
		jmp	sub_413080
sub_413010	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	eax, [esp+10h]
		mov	dword ptr [eax], offset	off_41C230
		add	esp, 0Ch
		jmp	sub_413080
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_413050	proc near		; DATA XREF: .rdata:0041C24Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C248
		add	esp, 0Ch
		jmp	sub_413140
sub_413050	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_413070	proc near		; DATA XREF: .rdata:off_41C248o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_41C248
		retn
sub_413070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_413080	proc near		; CODE XREF: sub_412790+11p
					; sub_4127C0+10j ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_41C248
		retn
sub_413080	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_413090	proc near		; DATA XREF: .rdata:0041C26Co

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		mov	dword ptr [eax], offset	off_41C268
		add	esp, 0Ch
		jmp	sub_413140
sub_413090	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4130B0	proc near		; DATA XREF: .rdata:off_41C268o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_41C268
		retn
sub_4130B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4130C0	proc near		; CODE XREF: sub_4110F0+11p
					; sub_411120+10j ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	off_41C268
		retn
sub_4130C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4130D0	proc near		; CODE XREF: sub_413F20+58Ep

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, off_419A4C
		mov	[esp+1Ch+var_1C], eax
		call	sub_4110A0
sub_4130D0	endp

; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, off_419A48
		mov	off_419A48, edx
		retn
; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, off_419A4C
		mov	off_419A4C, edx
		retn
; ---------------------------------------------------------------------------
		mov	edx, [esp+4]
		mov	eax, dword_419A6C
		mov	dword_419A6C, edx
		retn
; ---------------------------------------------------------------------------
		sub	esp, 0Ch
		call	sub_413CA0
		mov	eax, [eax+4]
		test	eax, eax
		setnz	al
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413130	proc near		; CODE XREF: sub_4110A0+7p
					; sub_413160+25Cp ...

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		mov	eax, off_419A48
		mov	[esp+1Ch+var_1C], eax
		call	sub_411010
sub_413130	endp


; =============== S U B	R O U T	I N E =======================================


sub_413140	proc near		; CODE XREF: sub_410510+1Dj
					; sub_410540+1Dj ...

arg_0		= dword	ptr  4

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_413153
		add	esp, 0Ch
		jmp	free
; ---------------------------------------------------------------------------

loc_413153:				; CODE XREF: sub_413140+9j
		add	esp, 0Ch
		retn
sub_413140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_413160(size_t)
sub_413160	proc near		; CODE XREF: sub_410610+44p
					; sub_410610+84p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_414868
		mov	[ebp+var_18], offset loc_413205
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_4131B2
		mov	[ebp+arg_0], 1
		jmp	short loc_4131B2
; ---------------------------------------------------------------------------
		align 10h

loc_4131A0:				; CODE XREF: sub_413160+62j
		mov	eax, dword_419A6C
		test	eax, eax
		jz	short loc_4131D4
		mov	[ebp+var_38], 1
		call	eax ; dword_419A6C

loc_4131B2:				; CODE XREF: sub_413160+34j
					; sub_413160+3Dj
		mov	eax, [ebp+arg_0]
		mov	[esp], eax	; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_4131A0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------

loc_4131D4:				; CODE XREF: sub_413160+47j
		mov	dword ptr [esp], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C230
		mov	dword ptr [esp+8], offset sub_413010
		mov	dword ptr [esp+4], offset off_41BF58
		mov	[esp], eax
		mov	[ebp+var_38], 1
		call	sub_413EC0
; ---------------------------------------------------------------------------

loc_413205:				; DATA XREF: sub_413160+20o
		add	ebp, 8
		cmp	[ebp+var_30], 0FFFFFFFFh
		mov	eax, [ebp+var_34]
		jz	short loc_413220
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_413220:				; CODE XREF: sub_413160+AFj
		mov	[esp], eax
		mov	[ebp+var_38], 0FFFFFFFFh
		call	sub_413790
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	edi
		sub	esp, 64h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_413F20
		mov	[ebp+var_30], offset dword_414900
		mov	[ebp+var_28], offset loc_413382
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	dword ptr [esp], 50h ; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	short loc_4132A0

loc_413273:				; CODE XREF: sub_413160+1B1j
					; sub_413160+1C8j
		call	sub_413CA0
		mov	edi, [ebp+var_50]
		mov	ecx, 14h
		add	dword ptr [eax+4], 1
		xor	eax, eax
		rep stosd
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_50]
		add	esp, 64h
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4132A0:				; CODE XREF: sub_413160+111j
		mov	ecx, dword_415014
		mov	[ebp+var_C], offset dword_419A50
		test	ecx, ecx
		jz	short loc_4132CC
		mov	dword ptr [esp], offset	dword_419A50
		mov	[ebp+var_48], 3
		call	sub_40FFE0
		test	eax, eax
		jnz	loc_413358

loc_4132CC:				; CODE XREF: sub_413160+14Fj
		mov	edx, dword_415024
		xor	ecx, ecx
		mov	eax, edx
		jmp	short loc_4132E6
; ---------------------------------------------------------------------------

loc_4132D8:				; CODE XREF: sub_413160+188j
		add	ecx, 1
		cmp	ecx, 20h
		jz	loc_4133B5
		shr	eax, 1

loc_4132E6:				; CODE XREF: sub_413160+176j
		test	al, 1
		jnz	short loc_4132D8
		mov	eax, 1
		shl	eax, cl
		or	eax, edx
		mov	edx, dword_415014
		mov	dword_415024, eax
		lea	eax, [ecx+ecx*4]
		shl	eax, 4
		add	eax, offset dword_419040
		test	edx, edx
		mov	[ebp+var_50], eax
		mov	eax, [ebp+var_C]
		jz	loc_413273
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	sub_40FEC0
		test	eax, eax
		jz	loc_413273
		mov	dword ptr [esp], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C200
		mov	dword ptr [esp+8], offset sub_412810
		mov	dword ptr [esp+4], offset off_41BF40
		mov	[esp], eax
		call	sub_413EC0
; ---------------------------------------------------------------------------

loc_413358:				; CODE XREF: sub_413160+166j
		mov	dword ptr [esp], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C1E8
		mov	dword ptr [esp+8], offset sub_4127C0
		mov	dword ptr [esp+4], offset off_41BF34
		mov	[esp], eax
		call	sub_413EC0
; ---------------------------------------------------------------------------

loc_413382:				; DATA XREF: sub_413160+F1o
		add	ebp, 8
		mov	edx, [ebp+var_44]
		mov	eax, [ebp+var_48]
		mov	[ebp+var_54], edx
		mov	edx, [ebp+var_40]
		cmp	eax, 1
		mov	[ebp+var_58], edx
		jz	short loc_4133C1
		cmp	eax, 2
		jz	short loc_4133D3
		cmp	edx, 0FFFFFFFFh
		jz	short loc_4133D9

loc_4133A3:				; CODE XREF: sub_413160+277j
		mov	eax, [ebp+var_54]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4133B5:				; CODE XREF: sub_413160+17Ej
		mov	[ebp+var_48], 2
		call	sub_413130
; ---------------------------------------------------------------------------

loc_4133C1:				; CODE XREF: sub_413160+237j
		lea	eax, [ebp+var_C]
		mov	[esp], eax
		mov	[ebp+var_48], 0FFFFFFFFh
		call	sub_4126D0

loc_4133D3:				; CODE XREF: sub_413160+23Cj
		cmp	[ebp+var_58], 0FFFFFFFFh
		jnz	short loc_4133A3

loc_4133D9:				; CODE XREF: sub_413160+241j
		mov	edx, [ebp+var_54]
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[esp], edx
		call	sub_413790
sub_413160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4133F0	proc near		; CODE XREF: sub_4126D0+65p
					; sub_413160+7Bp ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+var_8]
		push	edi
		sub	esp, 74h
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		mov	[ebp+var_34], offset sub_413F20
		mov	[ebp+var_30], offset dword_4148EC
		mov	[ebp+var_28], offset sub_4135C1
		mov	[ebp+var_24], esp
		call	_Unwind_SjLj_Register
		mov	eax, [ebp+arg_0]
		add	eax, 60h
		mov	[ebp+var_54], eax
		mov	[esp], eax	; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_50], eax
		jz	short loc_4134A0

loc_413438:				; CODE XREF: sub_4133F0+135j
					; sub_4133F0+14Cj
		call	sub_413CA0
		mov	edi, [ebp+var_50]
		mov	edx, 60h
		add	dword ptr [eax+4], 1
		test	edi, 1
		jnz	loc_413570
		test	edi, 2
		jnz	loc_413587

loc_413461:				; CODE XREF: sub_4133F0+191j
					; sub_4133F0+1A2j
		mov	ecx, edx
		xor	eax, eax
		shr	ecx, 2
		test	dl, 2
		rep stosd
		jz	short loc_413477
		mov	word ptr [edi],	0
		add	edi, 2

loc_413477:				; CODE XREF: sub_4133F0+7Dj
		and	edx, 1
		jz	short loc_41347F
		mov	byte ptr [edi],	0

loc_41347F:				; CODE XREF: sub_4133F0+8Aj
		mov	eax, [ebp+var_50]
		add	eax, 60h
		mov	[ebp+var_58], eax
		lea	eax, [ebp+var_4C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_58]
		add	esp, 74h
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4134A0:				; CODE XREF: sub_4133F0+46j
		mov	eax, dword_415014
		mov	[ebp+var_C], offset dword_419A50
		test	eax, eax
		jz	short loc_4134CB
		mov	dword ptr [esp], offset	dword_419A50
		mov	[ebp+var_48], 3
		call	sub_40FFE0
		test	eax, eax
		jnz	loc_413597

loc_4134CB:				; CODE XREF: sub_4133F0+BEj
		mov	eax, dword_415020
		xor	ecx, ecx
		cmp	[ebp+var_54], 200h
		mov	edx, eax
		jbe	short loc_4134FA

loc_4134DD:				; CODE XREF: sub_4133F0+106j
		mov	[ebp+var_48], 2
		call	sub_413130
; ---------------------------------------------------------------------------
		align 10h

loc_4134F0:				; CODE XREF: sub_4133F0+10Dj
		add	ecx, 1
		cmp	ecx, 20h
		jz	short loc_4134DD
		shr	edx, 1

loc_4134FA:				; CODE XREF: sub_4133F0+EBj
		test	dl, 1
		jnz	short loc_4134F0
		mov	edi, dword_415014
		mov	edx, 1
		shl	edx, cl
		shl	ecx, 9
		or	edx, eax
		mov	eax, [ebp+var_C]
		add	ecx, offset dword_415040
		test	edi, edi
		mov	dword_415020, edx
		mov	[ebp+var_50], ecx
		jz	loc_413438
		mov	[esp], eax
		mov	[ebp+var_48], 1
		call	sub_40FEC0
		test	eax, eax
		jz	loc_413438
		mov	dword ptr [esp], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C200
		mov	dword ptr [esp+8], offset sub_412810
		mov	dword ptr [esp+4], offset off_41BF40
		mov	[esp], eax
		call	sub_413EC0
; ---------------------------------------------------------------------------
		align 10h

loc_413570:				; CODE XREF: sub_4133F0+5Fj
		mov	byte ptr [edi],	0
		mov	edi, [ebp+var_50]
		mov	dl, 5Fh
		add	edi, 1
		test	edi, 2
		jz	loc_413461

loc_413587:				; CODE XREF: sub_4133F0+6Bj
		mov	word ptr [edi],	0
		sub	edx, 2
		add	edi, 2
		jmp	loc_413461
; ---------------------------------------------------------------------------

loc_413597:				; CODE XREF: sub_4133F0+D5j
		mov	dword ptr [esp], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C1E8
		mov	dword ptr [esp+8], offset sub_4127C0
		mov	dword ptr [esp+4], offset off_41BF34
		mov	[esp], eax
		call	sub_413EC0
sub_4133F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4135C1	proc near		; DATA XREF: sub_4133F0+21o
		add	ebp, 8
		mov	edx, [ebp-44h]
		mov	eax, [ebp-48h]
		mov	[ebp-5Ch], edx
		mov	edx, [ebp-40h]
		cmp	eax, 1
		mov	[ebp-60h], edx
		jz	short loc_4135F4
		cmp	eax, 2
		jz	short loc_413606
		cmp	edx, 0FFFFFFFFh
		jz	short loc_41361E
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4135F4:				; CODE XREF: sub_4135C1+15j
		lea	eax, [ebp-0Ch]
		mov	[esp+0], eax
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		call	sub_4126D0

loc_413606:				; CODE XREF: sub_4135C1+1Aj
		cmp	dword ptr [ebp-60h], 0FFFFFFFFh
		jz	short loc_413630
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_41361E:				; CODE XREF: sub_4135C1+1Fj
		mov	edx, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	sub_413790
; ---------------------------------------------------------------------------

loc_413630:				; CODE XREF: sub_4135C1+49j
		mov	eax, [ebp-5Ch]
		mov	dword ptr [ebp-48h], 0FFFFFFFFh
		mov	[esp+0], eax
		call	sub_413790
sub_4135C1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_413650	proc near		; CODE XREF: sub_4024A0+1268p
					; sub_4024A0+12A2p ...

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		lea	eax, [ebp+var_8]
		sub	esp, 50h
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_41487C
		mov	[ebp+var_18], offset sub_413707
		mov	[ebp+var_14], esp
		call	_Unwind_SjLj_Register
		call	sub_413CA0
		mov	edx, [ebp+arg_0]
		sub	edx, 30h
		mov	ecx, [edx+30h]
		mov	ebx, [edx+34h]
		mov	esi, [eax]
		add	ecx, 0BCD4D500h
		adc	ebx, 0B8B1AABCh
		cmp	ebx, 0
		ja	short loc_4136AA
		cmp	ecx, 1
		jbe	short loc_4136D0

loc_4136AA:				; CODE XREF: sub_413650+53j
		test	esi, esi
		jnz	short loc_4136FB
		mov	[eax], edx
		mov	[ebp+var_40], 0

loc_4136B7:				; CODE XREF: sub_413650+A0j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		add	esp, 50h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4136D0:				; CODE XREF: sub_413650+58j
		mov	ecx, [edx+14h]
		test	ecx, ecx
		lea	ebx, [ecx+1]
		js	short loc_4136F2

loc_4136DA:				; CODE XREF: sub_413650+A9j
		mov	[edx+14h], ebx
		sub	dword ptr [eax+4], 1
		cmp	esi, edx
		jz	short loc_4136EA
		mov	[edx+10h], esi
		mov	[eax], edx

loc_4136EA:				; CODE XREF: sub_413650+93j
		mov	edx, [edx+28h]
		mov	[ebp+var_40], edx
		jmp	short loc_4136B7
; ---------------------------------------------------------------------------

loc_4136F2:				; CODE XREF: sub_413650+88j
		mov	ebx, 1
		sub	ebx, ecx
		jmp	short loc_4136DA
; ---------------------------------------------------------------------------

loc_4136FB:				; CODE XREF: sub_413650+5Cj
		mov	[ebp+var_38], 1
		call	sub_413130
sub_413650	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413707	proc near		; DATA XREF: sub_413650+22o
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_413722
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_413722:				; CODE XREF: sub_413707+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_413790
sub_413707	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413740	proc near		; CODE XREF: sub_413F20+236p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_413780
		mov	[esp+1Ch+var_1C], ebx
		call	sub_413650
		mov	eax, [ebx]
		mov	edx, [ebx+4]
		add	eax, 0BCD4D500h
		adc	edx, 0B8B1AABCh
		cmp	edx, 0
		ja	short loc_413780
		cmp	eax, 1
		ja	short loc_413780
		mov	eax, [ebx-24h]
		mov	[esp+1Ch+var_1C], eax
		call	sub_411010
; ---------------------------------------------------------------------------
		align 10h

loc_413780:				; CODE XREF: sub_413740+Aj
					; sub_413740+27j ...
		call	sub_413130
sub_413740	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_413790	proc near		; CODE XREF: sub_412758+25p
					; sub_413160+CAp ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_18		= dword	ptr -18h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_5C]
		mov	[esp], eax
		mov	[ebp+var_44], offset sub_413F20
		mov	[ebp+var_40], offset dword_414848
		mov	[ebp+var_38], offset sub_4137FD
		mov	[ebp+var_34], esp
		call	_Unwind_SjLj_Register
		mov	edx, [ebp+arg_0]
		mov	[esp], edx
		call	sub_413650
		mov	eax, [ebp+arg_0]
		sub	eax, 30h
		mov	edx, [eax+18h]
		mov	ecx, [eax+20h]
		mov	[ebp+var_60], edx
		mov	edx, [eax+24h]
		mov	[ebp+var_68], ecx
		mov	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	[ebp+var_58], 2
		mov	[ebp+var_18], edx
		mov	[ebp+var_64], ecx
		mov	[esp], eax
		call	sub_4110A0
sub_413790	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4137FD	proc near		; DATA XREF: sub_413790+23o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		add	ebp, 8
		mov	eax, [ebp-54h]
		cmp	dword ptr [ebp-58h], 1
		mov	[ebp-70h], eax
		jz	short loc_413836
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	dword ptr [ebp-58h], 0
		call	sub_413920
		mov	edx, [ebp-70h]
		mov	dword ptr [ebp-58h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_413836:				; CODE XREF: sub_4137FD+Dj
		mov	eax, [ebp-70h]
		mov	[esp+0], eax
		call	sub_413650
		call	sub_413D80
		mov	eax, [eax]
		test	byte ptr [eax+30h], 1
		lea	edx, [eax+30h]
		jz	short loc_41388B
		mov	edx, [edx-30h]
		mov	[ebp-6Ch], edx

loc_413857:				; CODE XREF: sub_4137FD+94j
		mov	edx, [ebp-68h]
		lea	ecx, [ebp-20h]
		xor	eax, eax
		mov	dword ptr [ebp-58h], 1
		call	sub_410990
		mov	ecx, [ebp-6Ch]
		lea	eax, [ebp-20h]
		mov	edx, [ecx-50h]
		mov	ecx, [ebp-60h]
		mov	[esp+0], ecx
		mov	ecx, [ebp-6Ch]
		call	sub_410A50
		test	al, al
		jz	short loc_413893
		call	sub_413E60
; ---------------------------------------------------------------------------

loc_41388B:				; CODE XREF: sub_4137FD+52j
		add	eax, 50h
		mov	[ebp-6Ch], eax
		jmp	short loc_413857
; ---------------------------------------------------------------------------

loc_413893:				; CODE XREF: sub_4137FD+87j
		mov	edx, [ebp-60h]
		lea	eax, [ebp-20h]
		xor	ecx, ecx
		mov	dword ptr [ebp-58h], 1
		mov	[esp+0], edx
		mov	edx, offset off_41BF4C
		call	sub_410A50
		test	al, al
		jz	short loc_4138DD
		mov	dword ptr [esp+0], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C218
		mov	[esp+arg_4], offset sub_412FC0
		mov	[esp+arg_0], offset off_41BF4C
		mov	[esp+0], eax
		call	sub_413EC0
; ---------------------------------------------------------------------------

loc_4138DD:				; CODE XREF: sub_4137FD+B4j
		mov	ecx, [ebp-64h]
		mov	dword ptr [ebp-58h], 1
		mov	[esp+0], ecx
		call	sub_411010
sub_4137FD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4138F0	proc near		; CODE XREF: sub_412830+7Ep
		sub	esp, 0Ch
		call	sub_413CA0
		mov	edx, [eax]
		xor	eax, eax
		test	edx, edx
		jz	short loc_413908
		test	byte ptr [edx+30h], 1
		jnz	short loc_413910

loc_413906:				; CODE XREF: sub_4138F0+25j
		mov	eax, [edx]

loc_413908:				; CODE XREF: sub_4138F0+Ej
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413910:				; CODE XREF: sub_4138F0+14j
		mov	edx, [edx]
		sub	edx, 50h
		jmp	short loc_413906
sub_4138F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_413920	proc near		; CODE XREF: sub_4024A0+11D2p
					; sub_4024A0+1294p ...

var_5C		= dword	ptr -5Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		push	ebx
		sub	esp, 18h
		call	sub_413D80
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_413957
		mov	ecx, [edx+30h]
		mov	ebx, [edx+34h]
		add	ecx, 0BCD4D500h
		adc	ebx, 0B8B1AABCh
		cmp	ebx, 0
		jbe	short loc_413960

loc_413946:				; CODE XREF: sub_413920+43j
		mov	dword ptr [eax], 0
		add	edx, 30h
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_DeleteException

loc_413957:				; CODE XREF: sub_413920+Dj
					; sub_413920+80j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413960:				; CODE XREF: sub_413920+24j
		cmp	ecx, 1
		ja	short loc_413946
		mov	ecx, [edx+14h]
		test	ecx, ecx
		js	short loc_413981
		sub	ecx, 1
		nop
		jz	short loc_413990
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_4139A2

loc_413977:				; CODE XREF: sub_413920+64j
					; sub_413920+6Bj
		mov	[edx+14h], ecx
		add	esp, 18h
		pop	ebx
		xchg	ax, ax
		retn
; ---------------------------------------------------------------------------

loc_413981:				; CODE XREF: sub_413920+4Aj
		add	ecx, 1
		jnz	short loc_413977
		mov	ebx, [edx+10h]
		mov	[eax], ebx
		jmp	short loc_413977
; ---------------------------------------------------------------------------
		align 10h

loc_413990:				; CODE XREF: sub_413920+50j
		mov	ecx, [edx+10h]
		add	edx, 30h
		mov	[eax], ecx
		mov	[esp+1Ch+var_1C], edx
		call	_Unwind_DeleteException
		jmp	short loc_413957
; ---------------------------------------------------------------------------

loc_4139A2:				; CODE XREF: sub_413920+55j
		call	sub_413130
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	dword ptr [ebp-24h], offset sub_413F20
		mov	dword ptr [ebp-20h], offset dword_4148CC
		mov	dword ptr [ebp-18h], offset loc_413AE9
		mov	[ebp-14h], esp
		mov	[esp+5Ch+var_5C], eax
		call	_Unwind_SjLj_Register
		cmp	dword ptr [ebp+8], offset dword_419040
		jb	short loc_4139F1
		cmp	dword ptr [ebp+8], offset dword_419A40
		jb	short loc_413A10

loc_4139F1:				; CODE XREF: sub_413920+C6j
		mov	eax, [ebp+8]
		mov	[esp+20h+var_20], eax ;	void *
		call	free

loc_4139FC:				; CODE XREF: sub_413920+13Ej
					; sub_413920+155j
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413A10:				; CODE XREF: sub_413920+CFj
		mov	eax, [ebp+8]
		mov	ecx, 0CCCCCCCDh
		sub	eax, offset dword_419040
		mul	ecx
		mov	eax, dword_415014
		shr	edx, 6
		test	eax, eax
		mov	[ebp-40h], edx
		jz	short loc_413AA1
		mov	[esp+20h+var_20], offset dword_419A50
		mov	dword ptr [ebp-38h], 2
		call	sub_40FFE0
		test	eax, eax
		jnz	short loc_413ABF
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		mov	ecx, dword_415014
		and	dword_415024, eax
		test	ecx, ecx
		jz	short loc_4139FC
		mov	[esp+20h+var_20], offset dword_419A50
		mov	dword ptr [ebp-38h], 1
		call	sub_40FEC0
		test	eax, eax
		jz	short loc_4139FC
		mov	[esp+20h+var_20], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C200
		mov	[esp+20h+var_18], offset sub_412810
		mov	[esp+20h+var_1C], offset off_41BF40
		mov	[esp+20h+var_20], eax
		call	sub_413EC0
; ---------------------------------------------------------------------------

loc_413AA1:				; CODE XREF: sub_413920+10Cj
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		and	dword_415024, eax
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_413ABF:				; CODE XREF: sub_413920+123j
		mov	[esp+20h+var_20], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C1E8
		mov	[esp+20h+var_18], offset sub_4127C0
		mov	[esp+20h+var_1C], offset off_41BF34
		mov	[esp+20h+var_20], eax
		call	sub_413EC0
; ---------------------------------------------------------------------------

loc_413AE9:				; DATA XREF: sub_413920+ADo
		add	ebp, 8
		mov	edx, [ebp-30h]
		mov	eax, [ebp-34h]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_413B06
		mov	[esp+1Ch+var_1C], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_413B06:				; CODE XREF: sub_413920+1D5j
		mov	[esp+1Ch+var_1C], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_413790
; ---------------------------------------------------------------------------
		align 10h

loc_413B20:				; CODE XREF: sub_410B50+2Cj
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp-8]
		mov	[ebp-1Ch], eax
		lea	eax, [ebp-3Ch]
		mov	dword ptr [ebp-24h], offset sub_413F20
		mov	dword ptr [ebp-20h], offset dword_4148DC
		mov	dword ptr [ebp-18h], offset sub_413C58
		mov	[ebp-14h], esp
		mov	[esp+5Ch+var_5C], eax
		call	_Unwind_SjLj_Register
		cmp	dword ptr [ebp+8], offset dword_415040
		jb	short loc_413B61
		cmp	dword ptr [ebp+8], offset dword_419040
		jb	short loc_413B80

loc_413B61:				; CODE XREF: sub_413920+236j
		mov	eax, [ebp+8]
		sub	eax, 60h
		mov	[esp+20h+var_20], eax ;	void *
		call	free

loc_413B6F:				; CODE XREF: sub_413920+2A9j
					; sub_413920+2C0j
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413B80:				; CODE XREF: sub_413920+23Fj
		mov	ecx, [ebp+8]
		sub	ecx, offset dword_415040
		shr	ecx, 9
		mov	[ebp-40h], ecx
		mov	ecx, dword_415014
		test	ecx, ecx
		jz	short loc_413C10
		mov	[esp+20h+var_20], offset dword_419A50
		mov	dword ptr [ebp-38h], 2
		call	sub_40FFE0
		test	eax, eax
		jnz	short loc_413C2E
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		mov	edx, dword_415014
		rol	eax, cl
		and	dword_415020, eax
		test	edx, edx
		jz	short loc_413B6F
		mov	[esp+20h+var_20], offset dword_419A50
		mov	dword ptr [ebp-38h], 1
		call	sub_40FEC0
		test	eax, eax
		jz	short loc_413B6F
		mov	[esp+20h+var_20], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C200
		mov	[esp+20h+var_18], offset sub_412810
		mov	[esp+20h+var_1C], offset off_41BF40
		mov	[esp+20h+var_20], eax
		call	sub_413EC0
; ---------------------------------------------------------------------------
		align 10h

loc_413C10:				; CODE XREF: sub_413920+277j
		movzx	ecx, byte ptr [ebp-40h]
		mov	eax, 0FFFFFFFEh
		rol	eax, cl
		and	dword_415020, eax
		lea	eax, [ebp-3Ch]
		mov	[esp+20h+var_20], eax
		call	_Unwind_SjLj_Unregister
		leave
		retn
; ---------------------------------------------------------------------------

loc_413C2E:				; CODE XREF: sub_413920+28Ej
		mov	[esp+20h+var_20], 4
		call	sub_4133F0
		mov	dword ptr [eax], offset	off_41C1E8
		mov	[esp+20h+var_18], offset sub_4127C0
		mov	[esp+20h+var_1C], offset off_41BF34
		mov	[esp+20h+var_20], eax
		call	sub_413EC0
sub_413920	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413C58	proc near		; DATA XREF: sub_413920+21Do
		add	ebp, 8
		mov	edx, [ebp-30h]
		mov	eax, [ebp-34h]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_413C75
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_413C75:				; CODE XREF: sub_413C58+Cj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_413790
sub_413C58	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	eax, [eax-8]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_413CA0	proc near		; CODE XREF: .text:00413113p
					; sub_413160:loc_413273p ...

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_4148AC
		mov	[ebp+var_18], offset sub_413D55
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_419A44, 0
		mov	[ebp+var_44], offset dword_415018
		jnz	short loc_413CF0

loc_413CDF:				; CODE XREF: sub_413CA0+69j
					; sub_413CA0+B3j
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_44]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413CF0:				; CODE XREF: sub_413CA0+3Dj
		mov	eax, dword_419A40
		mov	[ebp+var_38], 1
		mov	[esp], eax	; DWORD
		call	sub_410110
		test	eax, eax
		mov	[ebp+var_44], eax
		jnz	short loc_413CDF
		mov	dword ptr [esp], 8 ; size_t
		call	malloc
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_413D33
		mov	[esp+4], eax	; LPVOID
		mov	eax, dword_419A40
		mov	[esp], eax	; DWORD
		call	sub_4100E0
		test	eax, eax
		jz	short loc_413D40

loc_413D33:				; CODE XREF: sub_413CA0+7Cj
		mov	[ebp+var_38], 1
		call	sub_413130
; ---------------------------------------------------------------------------
		align 10h

loc_413D40:				; CODE XREF: sub_413CA0+91j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_44], eax
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		jmp	short loc_413CDF
sub_413CA0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413D55	proc near		; DATA XREF: sub_413CA0+1Do
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_413D70
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_413D70:				; CODE XREF: sub_413D55+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_413790
sub_413D55	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_413D80	proc near		; CODE XREF: sub_4137FD+44p
					; sub_413920+4p

var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= byte ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_3C]
		mov	[ebp+var_24], offset sub_413F20
		mov	[ebp+var_20], offset dword_41489C
		mov	[ebp+var_18], offset sub_413DF7
		mov	[ebp+var_14], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	byte_419A44, 0
		mov	[ebp+var_40], offset dword_415018
		jnz	short loc_413DD0
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413DD0:				; CODE XREF: sub_413D80+3Dj
		mov	eax, dword_419A40
		mov	[esp], eax	; DWORD
		mov	[ebp+var_38], 1
		call	sub_410110
		mov	[ebp+var_40], eax
		lea	eax, [ebp+var_3C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_40]
		leave
		retn
sub_413D80	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413DF7	proc near		; DATA XREF: sub_413D80+1Do
		add	ebp, 8
		cmp	dword ptr [ebp-30h], 0FFFFFFFFh
		mov	eax, [ebp-34h]
		jz	short loc_413E12
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_413E12:				; CODE XREF: sub_413DF7+Aj
		mov	[esp+0], eax
		mov	dword ptr [ebp-38h], 0FFFFFFFFh
		call	sub_413790
sub_413DF7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413E30	proc near		; DATA XREF: .rdata:0041C138o
					; .rdata:0041C190o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_14], 1Bh ;	unsigned int
		mov	[esp+1Ch+var_18], offset aPureVirtualMet ; "pure virtual method	called\n"
		mov	[esp+1Ch+var_1C], 2 ; int
		call	_write
		call	sub_413130
sub_413E30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413E60	proc near		; CODE XREF: sub_4024A0+1285p
					; sub_4024A0+12DCp ...

var_1C		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		call	sub_413CA0
		mov	ebx, [eax]
		add	dword ptr [eax+4], 1
		test	ebx, ebx
		jz	short loc_413EA3
		mov	edx, [ebx+30h]
		mov	ecx, [ebx+34h]
		add	edx, 0BCD4D500h
		adc	ecx, 0B8B1AABCh
		cmp	ecx, 0
		jbe	short loc_413EA8

loc_413E8A:				; CODE XREF: sub_413E60+4Bj
		mov	dword ptr [eax], 0

loc_413E90:				; CODE XREF: sub_413E60+50j
		add	ebx, 30h
		mov	[esp+1Ch+var_1C], ebx
		call	_Unwind_SjLj_Resume_or_Rethrow
; ---------------------------------------------------------------------------
		mov	[esp+1Ch+var_1C], ebx
		call	sub_413650

loc_413EA3:				; CODE XREF: sub_413E60+11j
		call	sub_413130
; ---------------------------------------------------------------------------

loc_413EA8:				; CODE XREF: sub_413E60+28j
		cmp	edx, 1
		ja	short loc_413E8A
		neg	dword ptr [ebx+14h]
		jmp	short loc_413E90
sub_413E60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_413EC0	proc near		; CODE XREF: sub_4126D0+83p
					; sub_413160+A0p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		lea	eax, [ebx-60h]
		mov	[eax+10h], edx
		mov	edx, [esp+1Ch+arg_8]
		mov	dword ptr [ebx-60h], 1
		sub	ebx, 20h
		mov	dword ptr [eax+40h], 432B2B00h
		mov	dword ptr [eax+44h], 474E5543h
		mov	[eax+14h], edx
		mov	edx, off_419A4C
		mov	dword ptr [eax+48h], offset sub_410B50
		mov	[eax+18h], edx
		mov	edx, off_419A48
		mov	[eax+1Ch], edx
		mov	[esp+1Ch+var_1C], ebx
		call	_Unwind_SjLj_RaiseException
		mov	[esp+1Ch+var_1C], ebx
		call	sub_413650
		call	sub_413130
sub_413EC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_413F20	proc near		; DATA XREF: sub_401720+12o
					; sub_4017F0+2Do ...

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_AD		= byte ptr -0ADh
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_99		= byte ptr -99h
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_68		= dword	ptr -68h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= byte ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_54], offset sub_413F20
		mov	[ebp+var_50], offset dword_414858
		mov	[ebp+var_98], eax
		lea	eax, [ebp+var_6C]
		mov	[ebp+var_94], edx
		lea	edx, [ebp+var_18]
		mov	[ebp+var_4C], edx
		mov	[ebp+var_48], offset sub_4144B3
		mov	[ebp+var_44], esp
		mov	[esp], eax
		call	_Unwind_SjLj_Register
		cmp	[ebp+arg_0], 1
		mov	[ebp+var_78], 3
		jz	short loc_413F90

loc_413F74:				; CODE XREF: sub_413F20+1C4j
					; sub_413F20+257j ...
		lea	eax, [ebp+var_6C]
		mov	[esp], eax
		call	_Unwind_SjLj_Unregister
		mov	eax, [ebp+var_78]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413F90:				; CODE XREF: sub_413F20+52j
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+var_94]
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		sub	eax, 30h
		mov	[ebp+var_A4], eax
		mov	eax, [ebp+var_98]
		mov	[ebp+var_99], 1
		add	eax, 0BCD4D500h
		adc	edx, 0B8B1AABCh
		cmp	edx, 0
		jbe	loc_4140F0
		cmp	[ebp+arg_4], 6
		jz	loc_41410A

loc_413FDB:				; CODE XREF: sub_413F20+1E4j
					; sub_413F20+1F1j
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	_Unwind_GetLanguageSpecificData
		test	eax, eax
		mov	[ebp+var_A0], eax
		jz	loc_41423E
		mov	edx, eax
		mov	eax, [ebp+arg_14]
		lea	ecx, [ebp+var_38]
		call	sub_410990
		mov	edx, [ebp+arg_14]
		mov	[ebp+var_B4], eax
		movzx	eax, [ebp+var_24]
		call	sub_410AD0
		mov	edx, [ebp+arg_14]
		mov	[esp], edx
		mov	[ebp+var_30], eax
		lea	eax, [ebp+var_20]
		mov	[esp+4], eax
		call	_Unwind_GetIPInfo
		cmp	[ebp+var_20], 1
		sbb	eax, 0
		cmp	eax, 0
		mov	[ebp+var_74], eax
		jl	loc_41423E
		jnz	loc_4141B2
		mov	[ebp+var_7C], 0
		mov	eax, 1
		mov	[ebp+var_AC], 0
		mov	[ebp+var_80], 0

loc_414065:				; CODE XREF: sub_413F20+44Dj
					; sub_413F20+537j
		test	byte ptr [ebp+arg_4], 1
		jnz	loc_414160

loc_41406F:				; CODE XREF: sub_413F20+32Fj
		test	byte ptr [ebp+arg_4], 8
		jz	loc_4143C5

loc_414079:				; CODE XREF: sub_413F20+4ACj
		cmp	eax, 1
		jz	loc_41449B
		mov	edx, [ebp+var_7C]
		test	edx, edx
		js	loc_4144A7

loc_41408D:				; CODE XREF: sub_413F20+4C0j
					; sub_413F20+4F3j
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+arg_14]
		mov	dword ptr [esp+4], 0
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	[esp], edx
		call	_Unwind_SetGR
		mov	eax, [ebp+var_7C]
		mov	edx, [ebp+arg_14]
		mov	dword ptr [esp+4], 1
		mov	[esp+8], eax
		mov	[esp], edx
		call	_Unwind_SetGR
		mov	eax, [ebp+var_AC]
		mov	edx, [ebp+arg_14]
		mov	[esp+4], eax
		mov	[esp], edx
		call	_Unwind_SetIP
		mov	[ebp+var_78], 7
		jmp	loc_413F74
; ---------------------------------------------------------------------------
		align 10h

loc_4140F0:				; CODE XREF: sub_413F20+ABj
		cmp	eax, 2
		sbb	eax, eax
		not	eax
		and	eax, 1
		cmp	[ebp+arg_4], 6
		mov	[ebp+var_99], al
		jnz	loc_413FDB

loc_41410A:				; CODE XREF: sub_413F20+B5j
		cmp	[ebp+var_99], 0
		jnz	loc_413FDB
		mov	edx, [ebp+var_A4]
		mov	eax, [ebp+var_A4]
		mov	edx, [edx+18h]
		mov	eax, [eax+20h]
		mov	[ebp+var_7C], edx
		mov	edx, [ebp+var_A4]
		mov	[ebp+var_A0], eax
		mov	edx, [edx+24h]
		test	edx, edx
		mov	[ebp+var_AC], edx
		jnz	loc_41424A

loc_414149:				; CODE XREF: sub_413F20+4B5j
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		call	sub_413740
; ---------------------------------------------------------------------------
		align 10h

loc_414160:				; CODE XREF: sub_413F20+149j
		cmp	eax, 2
		jz	loc_41423E
		cmp	[ebp+var_99], 0
		mov	[ebp+var_78], 6
		jnz	loc_413F74
		mov	eax, [ebp+var_A4]
		mov	edx, [ebp+var_7C]
		mov	[eax+18h], edx
		mov	edx, [ebp+var_80]
		mov	[eax+1Ch], edx
		mov	edx, [ebp+var_A0]
		mov	[eax+20h], edx
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_A4]
		mov	[edx+28h], eax
		mov	eax, [ebp+var_AC]
		mov	[edx+24h], eax
		jmp	loc_413F74
; ---------------------------------------------------------------------------

loc_4141B2:				; CODE XREF: sub_413F20+122j
		mov	eax, [ebp+var_B4]
		xor	edi, edi
		lea	esi, [esi+0]

loc_4141C0:				; CODE XREF: sub_413F20+2EAj
		mov	[ebp+var_84], edi
		mov	ecx, edi
		mov	esi, edi
		lea	esi, [esi+0]

loc_4141D0:				; CODE XREF: sub_413F20+2C4j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	edx, ebx
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_4141D0
		mov	[ebp+var_84], esi
		mov	ecx, edi
		mov	esi, edi

loc_4141F0:				; CODE XREF: sub_413F20+2E4j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		mov	edx, ebx
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	esi, edx
		test	bl, bl
		js	short loc_4141F0
		sub	[ebp+var_74], 1
		jnz	short loc_4141C0
		mov	ebx, esi
		mov	esi, [ebp+var_84]
		mov	[ebp+var_80], 0
		add	esi, 1
		test	ebx, ebx
		mov	[ebp+var_AC], esi
		jz	short loc_414234
		sub	ebx, 1
		mov	eax, [ebp+var_28]
		mov	[ebp+var_80], ebx
		add	[ebp+var_80], eax

loc_414234:				; CODE XREF: sub_413F20+306j
		mov	edx, [ebp+var_AC]
		test	edx, edx
		jnz	short loc_414254

loc_41423E:				; CODE XREF: sub_413F20+D5j
					; sub_413F20+11Cj ...
		mov	[ebp+var_78], 8
		jmp	loc_413F74
; ---------------------------------------------------------------------------

loc_41424A:				; CODE XREF: sub_413F20+223j
		mov	eax, 3
		jmp	loc_41406F
; ---------------------------------------------------------------------------

loc_414254:				; CODE XREF: sub_413F20+31Cj
		mov	eax, [ebp+var_80]
		test	eax, eax
		jz	loc_41444B
		mov	edx, [ebp+arg_4]
		and	edx, 8
		mov	[ebp+var_B8], edx
		jz	loc_414460
		mov	[ebp+var_A8], offset off_41BF0C

loc_41427B:				; CODE XREF: sub_413F20+551j
					; sub_413F20+56Ej
		mov	[ebp+var_AD], 0

loc_414282:				; CODE XREF: sub_413F20+410j
		mov	eax, [ebp+var_80]
		xor	edi, edi
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_414290:				; CODE XREF: sub_413F20+387j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	esi, bl
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		test	bl, bl
		js	short loc_414290
		cmp	ecx, 1Fh
		mov	[ebp+var_8C], eax
		ja	short loc_4142C2
		and	esi, 40h
		jz	short loc_4142C2
		mov	edx, 0FFFFFFFFh
		shl	edx, cl
		or	edi, edx

loc_4142C2:				; CODE XREF: sub_413F20+392j
					; sub_413F20+397j
		mov	[ebp+var_7C], edi
		xor	ecx, ecx
		mov	[ebp+var_88], edi
		xor	edi, edi
		mov	[ebp+var_70], 0

loc_4142D6:				; CODE XREF: sub_413F20+3CDj
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		movzx	esi, bl
		mov	edx, esi
		and	edx, 7Fh
		shl	edx, cl
		add	ecx, 7
		or	edi, edx
		test	bl, bl
		js	short loc_4142D6
		cmp	ecx, 1Fh
		mov	[ebp+var_70], edi
		mov	edi, [ebp+var_88]
		ja	short loc_41430C
		and	esi, 40h
		jz	short loc_41430C
		mov	eax, 0FFFFFFFFh
		shl	eax, cl
		or	[ebp+var_70], eax

loc_41430C:				; CODE XREF: sub_413F20+3DBj
					; sub_413F20+3E0j
		cmp	[ebp+var_7C], 0
		jnz	short loc_414335
		mov	[ebp+var_AD], 1

loc_414319:				; CODE XREF: sub_413F20+434j
					; sub_413F20+446j ...
		mov	ecx, [ebp+var_70]
		test	ecx, ecx
		jz	loc_41443E
		mov	edx, [ebp+var_8C]
		add	edx, [ebp+var_70]
		mov	[ebp+var_80], edx
		jmp	loc_414282
; ---------------------------------------------------------------------------

loc_414335:				; CODE XREF: sub_413F20+3F0j
		jle	short loc_414372
		mov	edx, edi
		lea	eax, [ebp+var_38]
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_4108B0
		test	eax, eax
		jz	short loc_414368
		mov	edi, [ebp+var_A8]
		test	edi, edi
		jz	short loc_414319
		mov	edx, [ebp+var_A8]
		lea	ecx, [ebp+var_1C]
		call	sub_410920
		test	al, al
		jz	short loc_414319

loc_414368:				; CODE XREF: sub_413F20+42Aj
					; sub_413F20+4A3j
		mov	eax, 3
		jmp	loc_414065
; ---------------------------------------------------------------------------

loc_414372:				; CODE XREF: sub_413F20:loc_414335j
		mov	esi, [ebp+var_A8]
		test	esi, esi
		jz	short loc_414393
		mov	ebx, [ebp+var_B8]
		test	ebx, ebx
		jnz	short loc_414393
		cmp	[ebp+var_99], 0
		jz	loc_414418

loc_414393:				; CODE XREF: sub_413F20+45Aj
					; sub_413F20+464j
		not	edi
		xor	ebx, ebx
		add	edi, [ebp+var_2C]
		xor	ecx, ecx
		lea	esi, [esi+0]

loc_4143A0:				; CODE XREF: sub_413F20+494j
		movzx	edx, byte ptr [edi]
		add	edi, 1
		mov	eax, edx
		and	eax, 7Fh
		shl	eax, cl
		add	ecx, 7
		or	ebx, eax
		test	dl, dl
		js	short loc_4143A0
		test	ebx, ebx
		setz	al

loc_4143BB:				; CODE XREF: sub_413F20+519j
		test	al, al
		jz	loc_414319
		jmp	short loc_414368
; ---------------------------------------------------------------------------

loc_4143C5:				; CODE XREF: sub_413F20+153j
		cmp	[ebp+var_99], 0
		jnz	loc_414079
		cmp	eax, 1
		jz	loc_414149
		mov	eax, [ebp+var_7C]
		test	eax, eax
		jns	loc_41408D
		mov	edx, [ebp+var_A0]
		lea	ecx, [ebp+var_38]
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_410990
		mov	edx, [ebp+arg_14]
		movzx	eax, [ebp+var_24]
		call	sub_410AD0
		mov	edx, [ebp+var_A4]
		mov	[edx+24h], eax
		jmp	loc_41408D
; ---------------------------------------------------------------------------

loc_414418:				; CODE XREF: sub_413F20+46Dj
		mov	eax, [ebp+var_7C]
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[esp], eax
		lea	eax, [ebp+var_38]
		call	sub_410A50
		xor	eax, 1
		jmp	loc_4143BB
; ---------------------------------------------------------------------------

loc_41443E:				; CODE XREF: sub_413F20+3FEj
		cmp	[ebp+var_AD], 0
		jz	loc_41423E

loc_41444B:				; CODE XREF: sub_413F20+339j
		mov	[ebp+var_7C], 0
		mov	eax, 2
		jmp	loc_414065
; ---------------------------------------------------------------------------
		align 10h

loc_414460:				; CODE XREF: sub_413F20+34Bj
		cmp	[ebp+var_99], 0
		mov	[ebp+var_A8], offset off_41BF20
		jnz	loc_41427B
		mov	eax, [ebp+arg_10]
		test	byte ptr [eax],	1
		jz	short loc_414493
		mov	eax, [eax-30h]

loc_414482:				; CODE XREF: sub_413F20+579j
		mov	[ebp+var_1C], eax
		mov	eax, [eax-50h]
		mov	[ebp+var_A8], eax
		jmp	loc_41427B
; ---------------------------------------------------------------------------

loc_414493:				; CODE XREF: sub_413F20+55Dj
		mov	eax, [ebp+arg_10]
		add	eax, 20h
		jmp	short loc_414482
; ---------------------------------------------------------------------------

loc_41449B:				; CODE XREF: sub_413F20+15Cj
		mov	[ebp+var_68], 0FFFFFFFFh
		call	sub_413130
; ---------------------------------------------------------------------------

loc_4144A7:				; CODE XREF: sub_413F20+167j
		mov	[ebp+var_68], 2
		call	sub_4130D0
sub_413F20	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4144B3	proc near		; DATA XREF: sub_413F20+35o
		add	ebp, 18h
		mov	eax, [ebp-64h]
		cmp	dword ptr [ebp-68h], 1
		mov	[ebp-0BCh], eax
		jz	short loc_4144E6
		mov	dword ptr [ebp-68h], 0
		call	sub_413920
		mov	edx, [ebp-0BCh]
		mov	dword ptr [ebp-68h], 0FFFFFFFFh
		mov	[esp+0], edx
		call	_Unwind_SjLj_Resume
; ---------------------------------------------------------------------------

loc_4144E6:				; CODE XREF: sub_4144B3+10j
		mov	edx, [ebp-0BCh]
		mov	[esp+0], edx
		call	sub_413650
		mov	dword ptr [ebp-68h], 1
		call	sub_413130
sub_4144B3	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_414500()
sub_414500	proc near		; DATA XREF: sub_4104D0:loc_410500o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		cmp	byte_419A44, 0
		jz	short loc_414519
		mov	eax, dword_419A40
		mov	[esp+1Ch+var_1C], eax ;	DWORD
		call	sub_410150

loc_414519:				; CODE XREF: sub_414500+Aj
		mov	byte_419A44, 0
		add	esp, 1Ch
		retn
sub_414500	endp

; ---------------------------------------------------------------------------
		align 10h
dword_414530	dd 0FFFFFFFFh		; DATA XREF: sub_40FB80-5Br
					; sub_40FB80-17r
		dd offset sub_401720
		dd offset sub_4104D0
		dd offset sub_4104B0
		dd offset sub_410490
		align 8
		dd 0FFFFFFFFh
dword_41454C	dd 0			; DATA XREF: .data:off_415010o
dword_414550	dd 201FFFFh		; DATA XREF: sub_410610+16o
		db 2 dup(0)
word_414556	dw 0FFFFh		; DATA XREF: sub_4106F0+16o
		dd 401h, 1
dword_414560	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_4124F0+1Co
dword_414570	dd 12900FFh, 103001Ch, 3030203h, 5010403h, 7030603h, 9000801h
					; DATA XREF: sub_411EA0+1Fo
		dd 0B000A00h, 0D000C01h, 101h, 7Dh, 0
dword_41459C	dd 11500FFh, 1030008h, 3010203h, 100h, 7Dh, 0 ;	DATA XREF: sub_411B60+19o
dword_4145B4	dd 201FFFFh, 0		; DATA XREF: sub_411DA0+19o
dword_4145BC	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_411990+1Co
dword_4145CC	dd 11500FFh, 103000Ah, 3030203h, 1010400h, 7D0000h, 0
					; DATA XREF: sub_411240+1Do
dword_4145E4	dd 11500FFh, 103000Ah, 3030203h, 1010400h, 7D0000h, 0
					; DATA XREF: sub_411530+1Co
dword_4145FC	dd 201FFFFh		; DATA XREF: sub_401720+19o
		db 2 dup(0)
word_414602	dw 0FFFFh		; DATA XREF: sub_410D10+19o
		dd 201h
dword_414608	dd 2601FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: sub_4017F0+37o
		dd 0D000Ch, 0F000Eh, 110010h, 12h
dword_414634	dd 15100FFh, 1000048h, 3010201h, 5000400h, 7000600h, 9000800h
					; DATA XREF: sub_4024A0+28o
		dd 0B000A00h, 0D000C00h, 0F000E00h, 11001000h, 13001200h
		dd 15001400h, 17001600h, 19001800h, 1B001A00h, 1D001C00h
		dd 1F001E00h, 21002000h, 23002200h, 100h, 0
dword_414688	dd 401FFFFh, 10000h	; DATA XREF: sub_410DD0+19o
dword_414690	dd 401FFFFh, 10000h	; DATA XREF: sub_410EF0+19o
dword_414698	dd 1001FFFFh, 10000h, 30002h, 50004h, 70006h ; DATA XREF: sub_403AE0+28o
dword_4146AC	dd 5201FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: sub_403F00+31o
		dd 0D000Ch, 0F000Eh, 110010h, 130012h, 150014h,	170016h
		dd 190018h, 1B001Ah, 1D001Ch, 1F001Eh, 210020h,	230022h
		dd 250024h, 270026h
		db 28h,	0
word_414702	dw 0FFFFh		; DATA XREF: sub_4051A0+31o
		dd 4601h, 20001h, 40003h, 60005h, 80007h, 0A0009h, 0C000Bh
		dd 0E000Dh, 10000Fh, 120011h, 140013h, 160015h,	180017h
		dd 1A0019h, 1C001Bh, 1E001Dh, 20001Fh, 220021h
dword_41474C	dd 7C01FFFFh, 10000h, 30002h, 50004h, 70006h, 90008h, 0B000Ah
					; DATA XREF: sub_406220+44o
		dd 0D000Ch, 0F000Eh, 110010h, 130012h, 150014h,	170016h
		dd 190018h, 1B001Ah, 1D001Ch, 1F001Eh, 210020h,	230022h
		dd 250024h, 270026h, 290028h, 2B002Ah, 2D002Ch,	2F002Eh
		dd 310030h, 330032h, 350034h, 370036h, 390038h,	3B003Ah
		dd 3D003Ch
dword_4147CC	dd 17900FFh, 100006Eh, 3000200h, 5000400h, 7010600h, 9000801h
					; DATA XREF: sub_408C80+40o
		dd 0B000A00h, 0D000C00h, 0F000E00h, 11001000h, 13001200h
		dd 15001400h, 17001600h, 19001800h, 1B001A00h, 1D001C00h
		dd 1F001E00h, 21002000h, 23002200h, 25002400h, 27002600h
		dd 29002800h, 2B002A00h, 2D002C00h, 2F002E00h, 31003000h
		dd 33003200h, 35003400h, 1003600h, 2 dup(0)
dword_414848	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_413790+1Co
dword_414858	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_413F20+19o
dword_414868	dd 10D00FFh, 7F010002h,	0 ; DATA XREF: sub_413160+19o
		dd offset off_41BF58
		dd 1
dword_41487C	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_413650+1Bo
dword_41488C	dd 10D00FFh, 1000004h, 101h, 0 ; DATA XREF: sub_411010+16o
dword_41489C	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_413D80+16o
dword_4148AC	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_413CA0+16o
dword_4148BC	dd 10900FFh, 7F010002h,	2 dup(0) ; DATA	XREF: sub_4126D0+19o
dword_4148CC	dd 10900FFh, 1010004h, 7F01h, 0	; DATA XREF: sub_413920+A6o
dword_4148DC	dd 10900FFh, 1010004h, 7F01h, 0	; DATA XREF: sub_413920+216o
dword_4148EC	dd 10D00FFh, 1010006h, 7F010203h, 7D0000h, 0 ; DATA XREF: sub_4133F0+1Ao
dword_414900	dd 10D00FFh, 1010006h, 7F010203h, 7D0000h, 0 ; DATA XREF: sub_413160+EAo
dword_414914	dd 11500FFh, 1000004h, 2000103h, 7Dh, 41BF64h, 36h dup(0)
					; DATA XREF: sub_412830+16o
		dd 180h	dup(?)
_text		ends

; Section 2. (virtual address 00015000)
; Virtual size			: 00004A7C (  19068.)
; Section size in file		: 00004C00 (  19456.)
; Offset to raw	data for section: 00013E00
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 415000h
dword_415000	dd 0FFFFFFFFh		; DATA XREF: sub_401010+25r
		dd 0FFh, 2 dup(0FFFFFFFFh)
off_415010	dd offset dword_41454C	; DATA XREF: sub_40FAF0+3r
					; sub_40FAF0+12r ...
dword_415014	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w ...
dword_415018	dd 2 dup(0)		; DATA XREF: sub_413CA0+36o
					; sub_413D80+36o
dword_415020	dd 0			; DATA XREF: sub_4133F0:loc_4134CBr
					; sub_4133F0+12Cw ...
dword_415024	dd 0			; DATA XREF: sub_413160:loc_4132CCr
					; sub_413160+199w ...
		align 20h
dword_415040	dd 1000h dup(0)		; DATA XREF: sub_4133F0+124o
					; sub_413920+22Fo ...
dword_419040	dd 280h	dup(0)		; DATA XREF: sub_413160+1A4o
					; sub_413920+BFo ...
; DWORD	dword_419A40
dword_419A40	dd 0			; DATA XREF: sub_4104D0+1Bo
					; sub_413920+C8o ...
byte_419A44	db 0			; DATA XREF: sub_4104D0+8w
					; sub_4104D0+29w ...
		align 4
off_419A48	dd offset sub_412830	; DATA XREF: .text:004130E4r
					; .text:004130E9w ...
off_419A4C	dd offset sub_413130	; DATA XREF: sub_4130D0+3r
					; .text:004130F4r ...
dword_419A50	dd 2 dup(0)		; DATA XREF: sub_4104B0+Co
					; sub_413160+146o ...
dword_419A58	dd 0			; DATA XREF: sub_4024A0+171r
					; sub_4024A0+197w ...
dword_419A5C	dd 0			; DATA XREF: sub_4024A0+1CCr
					; sub_4024A0:loc_402679r ...
dword_419A60	dd 0			; DATA XREF: sub_406220:loc_406A08r
					; sub_406220+7F5r ...
dword_419A64	dd 0			; DATA XREF: sub_406220:loc_4069EAr
					; sub_406220+7D7r ...
byte_419A68	db 0			; DATA XREF: sub_412830+2Fr
					; sub_412830:loc_4128A0w
		align 4
dword_419A6C	dd 0			; DATA XREF: .text:00413104r
					; .text:00413109w ...
dword_419A70	dd 0BB40E64Eh		; DATA XREF: .text:0040F9BFr
					; sub_40FA10+3r ...
dword_419A74	dd 44BF19B1h		; DATA XREF: .text:0040F9C7r
					; sub_40FA10+21w ...
dword_419A78	dd 0			; DATA XREF: sub_4016A0+6r
					; sub_4016A0+42o
		align 800h
_data		ends

; Section 3. (virtual address 0001A000)
; Virtual size			: 00002280 (   8832.)
; Section size in file		: 00002400 (   9216.)
; Offset to raw	data for section: 00018A00
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 41A000h
; CHAR ProcName[]
ProcName	db '_set_invalid_parameter_handler',0 ; DATA XREF: sub_401190+134o
		align 10h
; CHAR ModuleName[]
ModuleName	db 'libgcj_s.dll',0     ; DATA XREF: sub_4016A0+Fo
; CHAR a_jv_registercl[]
a_jv_registercl	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_4016A0+2Ao
		align 4
dword_41A044	dd 0			; DATA XREF: sub_401720+37o
					; sub_4017F0+6A0o ...
; char aInterfaceSNotA[]
aInterfaceSNotA	db 'Interface ',27h,'%s',27h,' not available in object %s at %s:',0Ah
					; DATA XREF: sub_4017F0+22Fo
		db '%s (%s)',0Ah,0
; char aProperty[]
aProperty	db 'property ',0        ; DATA XREF: sub_4017F0+476o
; char aReadwrite[]
aReadwrite	db 'readwrite',0        ; DATA XREF: sub_4017F0+51Fo
; char aRead[]
aRead		db 'read',0             ; DATA XREF: sub_4017F0:loc_401B42o
; char aWrite[]
aWrite		db 'write',0            ; DATA XREF: sub_4017F0+4B0o
; char aSS_S[]
aSS_S		db ' %s %s.%s',0Ah,0    ; DATA XREF: sub_4017F0+3E7o
aVoid		db 'void',0             ; DATA XREF: sub_4017F0+650o
asc_41A0B1	db ' ',0                ; DATA XREF: sub_4017F0+691o
aMethod		db 'method',0           ; DATA XREF: sub_4017F0+6DCo
aSignal		db 'signal',0           ; DATA XREF: sub_4017F0+6D5o
; char aSSSSS_S[]
aSSSSS_S	db '%s %s%s%s %s.%s(',0 ; DATA XREF: sub_4017F0+6F1o
; char aSS[]
aSS		db '%s%s',0             ; DATA XREF: sub_4017F0+802o
; char aS[]
aS		db ' %s',0              ; DATA XREF: sub_4017F0+832o
; char asc_41A0DB[]
asc_41A0DB	db ')',0                ; DATA XREF: sub_4017F0:loc_402034o
					; sub_406220+B9Co ...
asc_41A0DD	db ', ',0               ; DATA XREF: sub_4017F0+7F5o
; char aS_0[]
aS_0		db '%s: ',0             ; DATA XREF: sub_4024A0+69Co
aQdbusvariant	db 'QDBusVariant',0     ; DATA XREF: sub_4024A0+18Ao
					; sub_4024A0+A93o ...
aQdbusargument	db 'QDBusArgument',0    ; DATA XREF: sub_4024A0+203o
					; sub_4024A0+B8Co
aAv		db 'av',0               ; DATA XREF: sub_4024A0+27Bo
aASv		db 'a{sv}',0            ; DATA XREF: sub_4024A0+BA9o
		align 4
; char aQdbusIDonTKnow[]
aQdbusIDonTKnow	db 'qdbus: I don',27h,'t know how to display an argument of type ',27h,'%s',27h
					; DATA XREF: sub_4024A0+FA0o
		db ', run with --literal.',0Ah,0
aIntrospect	db 'Introspect',0       ; DATA XREF: sub_403F00+5Eo
					; sub_4051A0+5Eo
		align 4
aOrg_freedeskto	db 'org.freedesktop.DBus.Introspectable',0 ; DATA XREF: sub_403F00+7Fo
					; sub_4051A0+7Fo
; char asc_41A190[]
asc_41A190	db '/',0                ; DATA XREF: sub_403F00+2FCo
					; sub_403F00+9D1o ...
; char aServiceSDoesNo[]
aServiceSDoesNo	db 'Service ',27h,'%s',27h,' does not exist.',0Ah,0
					; DATA XREF: sub_403F00+C09o
					; sub_4051A0+A8Do ...
; char aErrorSS[]
aErrorSS	db 'Error: %s',0Ah      ; DATA XREF: sub_403F00+AF6o
					; sub_4051A0+3BAo ...
		db '%s',0Ah,0
aNode		db 'node',0             ; DATA XREF: sub_403F00+40Ao
aName		db 'name',0             ; DATA XREF: sub_403F00+489o
					; sub_4051A0+5E3o
aInterface	db 'interface',0        ; DATA XREF: sub_4051A0+564o
		align 4
aInvalidDBusInt	db 'Invalid D-BUS interface name ',27h,'%s',27h,' found while parsing intro'
					; DATA XREF: sub_4051A0+782o
		db 'spection',0
aSet		db 'Set',0              ; DATA XREF: sub_406220+2524o
aOrg_freedesk_0	db 'org.freedesktop.DBus.Properties',0 ; DATA XREF: sub_406220+1D54o
					; sub_406220+253Co
; char aCannotFindS_SI[]
aCannotFindS_SI	db 'Cannot find ',27h,'%s.%s',27h,' in object %s at %s',0Ah,0
					; DATA XREF: sub_406220+1C15o
; char aCannotCallMeth[]
aCannotCallMeth	db 'Cannot call method ',27h,'%s',27h,' because type ',27h,'%s',27h,' is unknown '
					; DATA XREF: sub_406220+1162o
		db 'to this tool',0Ah,0
asc_41A2A7	db '(',0                ; DATA XREF: sub_406220+A9Ao
		align 4
; char aCouldNotConver[]
aCouldNotConver	db 'Could not convert ',27h,'%s',27h,' to type ',27h,'%s',27h,'.',0Ah,0
					; DATA XREF: sub_406220+1849o
aQdbusobjectpat	db 'QDBusObjectPath',0  ; DATA XREF: sub_406220+1370o
					; sub_406220+1416o
		align 4
; char aCannotPassAr_0[]
aCannotPassAr_0	db 'Cannot pass argument ',27h,'%s',27h,' because it is not a valid object '
					; DATA XREF: sub_406220+22A7o
		db 'path.',0Ah,0
aQdbussignature	db 'QDBusSignature',0   ; DATA XREF: sub_406220+879o
					; sub_406220+14E5o
		align 4
; char aCannotPassArgu[]
aCannotPassArgu	db 'Cannot pass argument ',27h,'%s',27h,' because it is not a valid signatu'
					; DATA XREF: sub_406220+12D6o
		db 're.',0Ah,0
; char aSorryCanTPassA[]
aSorryCanTPassA	db 'Sorry, can',27h,'t pass arg of type ',27h,'%s',27h,'.',0Ah,0
					; DATA XREF: sub_406220+1525o
aInvalidNumberO	db 'Invalid number of parameters',0Ah,0 ; DATA XREF: sub_406220+2482o
aGet		db 'Get',0              ; DATA XREF: sub_406220+1D39o
; char aInvalidReplyTy[]
aInvalidReplyTy	db 'Invalid reply type %d',0Ah,0 ; DATA XREF: sub_406220+A2Do
aSystem		db '--system',0         ; DATA XREF: sub_408C80+252o
aAddress	db '--address',0        ; DATA XREF: sub_408C80+55Do
aBus		db 'bus',0              ; DATA XREF: sub_408C80+596o
aLiteral	db '--literal',0        ; DATA XREF: sub_408C80+708o
aHelp		db '--help',0           ; DATA XREF: sub_408C80+775o
		align 10h
; char aUsageQdbusSyst[]
aUsageQdbusSyst	db 'Usage: qdbus [--system | --address ADDRESS] [--literal] [servicen'
					; DATA XREF: sub_408C80+797o
		db 'ame] [path] [method] [args]',0Ah
		db 0Ah
		db '  servicename       the service to connect to (e.g., org.freedesk'
		db 'top.DBus)',0Ah
		db '  path              the path to the object (e.g., /)',0Ah
		db '  method            the method to call, with or without the inter'
		db 'face',0Ah
		db '  args              arguments to pass to the call',0Ah
		db 'With 0 arguments, qdbus will list the services available on the b'
		db 'us',0Ah
		db 'With just the servicename, qdbus will list the object paths avail'
		db 'able on the service',0Ah
		db 'With service name and object path, qdbus will list the methods, s'
		db 'ignals and properties available on the object',0Ah
		db 0Ah
		db 'Options:',0Ah
		db '  --system          connect to the system bus',0Ah
		db '  --address ADDRESS connect to the given bus',0Ah
		db '  --literal         print replies literally',0
		align 10h
; char aCouldNotConnec[]
aCouldNotConnec	db 'Could not connect to D-Bus server: %s: %s',0Ah,0
					; DATA XREF: sub_408C80+443o
asc_41A71B	db 0Ah			; DATA XREF: sub_408C80+11E5o
		db ' ',0
		align 10h
; char aServiceSIsNotA[]
aServiceSIsNotA	db 'Service ',27h,'%s',27h,' is not a valid name.',0Ah,0
					; DATA XREF: sub_408C80+1577o
		align 4
; char aPathSIsNotAVal[]
aPathSIsNotAVal	db 'Path ',27h,'%s',27h,' is not a valid path name.',0Ah,0
					; DATA XREF: sub_408C80+CFEo
		align 4
; char aInterfaceSIsNo[]
aInterfaceSIsNo	db 'Interface ',27h,'%s',27h,' is not a valid interface name.',0Ah,0
					; DATA XREF: sub_408C80+1C1Bo
		align 4
; char aMethodNameSIsN[]
aMethodNameSIsN	db 'Method name ',27h,'%s',27h,' is not a valid member name.',0Ah,0
					; DATA XREF: sub_408C80+B2Do
		align 4
off_41A7CC	dd offset loc_410BD7	; DATA XREF: sub_410B90:loc_410BD0r
		dd offset loc_410C72	; jump table for switch	statement
		dd offset loc_410CB0
		dd offset loc_410BD7
		dd offset loc_410C20
		dd offset loc_410BC7
		dd offset loc_410BC7
		dd offset loc_410BC7
		dd offset loc_410BC7
		dd offset loc_410C27
		dd offset loc_410CA1
		dd offset loc_410BD7
		dd offset loc_410C20
aStdException	db 'std::exception',0   ; DATA XREF: sub_412F20o
aStdBad_excepti	db 'std::bad_exception',0 ; DATA XREF: sub_412F00o
		align 4
a__gnu_cxx__con	db '__gnu_cxx::__concurrence_lock_error',0 ; DATA XREF: sub_412EE0o
; a__gnu_cxx(char)
a__gnu_cxx__c_0	db '__gnu_cxx::__concurrence_unlock_error',0 ; DATA XREF: sub_412EF0o
		align 10h
aStdBad_alloc	db 'std::bad_alloc',0   ; DATA XREF: sub_412F10o
		align 10h
aPureVirtualMet	db 'pure virtual method called',0Ah,0 ; DATA XREF: sub_413E30+Bo
aTerminateCalle	db 'terminate called recursively',0Ah,0 ; DATA XREF: sub_412830+4Do
		align 4
aTerminateCal_0	db 'terminate called after throwing an instance of ',27h,0
					; DATA XREF: sub_412830+CAo
asc_41A8ED	db 27h,0Ah,0		; DATA XREF: sub_412830+118o
aWhat		db '  what():  ',0      ; DATA XREF: sub_4129DD+82o
aTerminateCal_1	db 'terminate called without an active exception',0Ah,0
					; DATA XREF: sub_412830+17Ao
		align 20h
off_41A940	dd offset loc_40ACC7, offset loc_40AD10, offset	loc_40AD10
					; DATA XREF: sub_40ACB0:loc_40ACE0r
		dd offset loc_40AD10, offset loc_40AD10, offset	loc_40ACC7 ; jump table	for switch statement
		dd offset loc_40ACC7, offset loc_40ACC7, offset	loc_40ACC7
		dd offset loc_40AD14, offset loc_40AD14, offset	loc_40AD10
		dd offset loc_40AD14, offset loc_40AD14, offset	loc_40AD14
		dd offset loc_40AD14, offset loc_40AD14, offset	loc_40AD14
		dd offset loc_40AD14, offset loc_40AD14, offset	loc_40AD14
		dd offset loc_40AD14, offset loc_40ACC7, offset	loc_40ACEB
		dd offset loc_40ACEB, offset loc_40ACEB, offset	loc_40ACEB
		dd offset loc_40ACEB, offset loc_40ACEB, offset	loc_40AD10
		dd offset loc_40AD14, offset loc_40AD14, offset	loc_40AD14
		dd offset loc_40AD14, offset loc_40AD14, offset	loc_40ACC7
		dd offset loc_40AD14, offset loc_40ACEB, offset	loc_40ACE7
		dd offset loc_40AD10, offset loc_40ACC7, offset	loc_40ACEB
		dd offset loc_40ACEB, offset loc_40ACC7, offset	loc_40ACC7
		dd offset loc_40AD14, offset loc_40AD10, offset	loc_40AD10
		dd offset loc_40AD10, offset loc_40AD10, offset	loc_40AD10
		dd offset loc_40AD10, offset loc_40AD10, offset	loc_40AD10
		dd offset loc_40AD14, offset loc_40AD10, offset	loc_40ACC7
		dd offset loc_40AD14, offset loc_40AD14, offset	loc_40AD14
		dd offset loc_40AD14
off_41AA34	dd offset loc_40B1A7, offset loc_40B192, offset	loc_40B192
					; DATA XREF: sub_40B180+32r
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B1C0 ; jump table	for switch statement
		dd offset loc_40B1A7, offset loc_40B1A0, offset	loc_40B1A0
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B1A7, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B1A7
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B1A7, offset	loc_40B1A0
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B1A7
		dd offset loc_40B192, offset loc_40B192, offset	loc_40B192
		dd offset loc_40B1A7
a_global_	db '_GLOBAL_',0         ; DATA XREF: sub_40B230+42o
					; sub_40E590:loc_40E5B3o
aAnonymousNames	db '(anonymous namespace)',0 ; DATA XREF: sub_40B230+B4o
aSt		db 'st',0               ; DATA XREF: sub_40B300+174o
aCl		db 'cl',0               ; DATA XREF: sub_40B300+2B5o
					; sub_40D690+55Ao
		align 10h
off_41AB50	dd offset loc_40B6D8, offset loc_40B6D8, offset	loc_40B6D8
					; DATA XREF: sub_40B640+4Br
		dd offset loc_40B6D8, offset loc_40B6D8, offset	loc_40B6D8 ; jump table	for switch statement
		dd offset loc_40B6D8, offset loc_40B6D8, offset	loc_40B6D8
		dd offset loc_40B6D8, offset loc_40B672, offset	loc_40B672
		dd offset loc_40B672, offset loc_40B672, offset	loc_40B672
		dd offset loc_40B672, offset loc_40B672, offset	loc_40B975
		dd offset loc_40B672, offset loc_40B6F0, offset	loc_40B718
		dd offset loc_40B672, offset loc_40B9E0, offset	loc_40B745
		dd offset loc_40B672, offset loc_40B672, offset	loc_40B672
		dd offset loc_40B672, offset loc_40B672, offset	loc_40B943
		dd offset loc_40B6D8, offset loc_40B770, offset	loc_40B7A0
		dd offset loc_40B672, offset loc_40B7D0, offset	loc_40B800
		dd offset loc_40B857, offset loc_40B8B0, offset	loc_40B672
		dd offset loc_40B672, offset loc_40B672, offset	loc_40B672
		dd offset loc_40B6D8, offset loc_40B672, offset	loc_40B672
		dd offset loc_40B672, offset loc_40B672, offset	loc_40B672
		dd offset loc_40B672, offset loc_40B8E0, offset	loc_40B8E0
		dd offset loc_40B8E0, offset loc_40B8E0, offset	loc_40B8E0
		dd offset loc_40B8E0, offset loc_40B8E0, offset	loc_40B8E0
		dd offset loc_40B8E0, offset loc_40B8E0, offset	loc_40B672
		dd offset loc_40B8E0, offset loc_40B8E0, offset	loc_40B8E0
		dd offset loc_40B8E0, offset loc_40B672, offset	loc_40B672
		dd offset loc_40B672, offset loc_40B8E0, offset	loc_40B8E0
		dd offset loc_40B918, offset loc_40B8E0, offset	loc_40B8E0
		dd offset loc_40B8E0, offset loc_40B8E0, offset	loc_40B8E0
off_41AC7C	dd offset loc_40BBA6	; DATA XREF: sub_40B640+FEr
		dd offset loc_40B672	; jump table for switch	statement
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40BB5C
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40BB22
		dd offset loc_40BAE8
		dd offset loc_40BC67
		dd offset loc_40B672
		dd offset loc_40BC2D
		dd offset loc_40BAB1
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40BA90
		dd offset loc_40B672
		dd offset loc_40B672
		dd offset loc_40BA50
		dd offset loc_40BB5C
aStringLiteral	db 'string literal',0   ; DATA XREF: sub_40C3D0+208o
aStd		db 'std',0              ; DATA XREF: sub_40C3D0+E6o
					; .rdata:0041B784o
		align 4
off_41AD4C	dd offset loc_40CA4E, offset loc_40C7CF, offset	loc_40C7CF
					; DATA XREF: sub_40C6E0+199r
		dd offset loc_40CA2B, offset loc_40C7CF, offset	loc_40C7CF ; jump table	for switch statement
		dd offset loc_40CA08, offset loc_40C9E5, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C9C2, offset	loc_40C999
		dd offset loc_40C7CF, offset loc_40C970, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C924
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C8EB, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C7CF, offset loc_40C7CF, offset	loc_40C7CF
		dd offset loc_40C8B0
off_41AE1C	dd offset loc_40C88C	; DATA XREF: sub_40C6E0+1B8r
		dd offset loc_40C8A0	; jump table for switch	statement
		dd offset loc_40C8A0
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C74D
		dd offset loc_40C74D
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C88C
		dd offset loc_40C74D
byte_41AED4	db 2 dup(3Ah), 0	; DATA XREF: sub_40D230+DBo
					; sub_40D690+1DFo
aJarray		db 'JArray',0           ; DATA XREF: sub_40D690+DECo
asc_41AEDE	db '[]',0               ; DATA XREF: sub_40D690+E08o
aVtableFor	db 'vtable for ',0      ; DATA XREF: sub_40D690:loc_40D6FFo
aVttFor		db 'VTT for ',0         ; DATA XREF: sub_40D690:loc_40D762o
aConstructionVt	db 'construction vtable for ',0 ; DATA XREF: sub_40D690:loc_40D717o
aIn		db '-in-',0             ; DATA XREF: sub_40D690+9Do
aTypeinfoFor	db 'typeinfo for ',0    ; DATA XREF: sub_40D690:loc_40D769o
aTypeinfoNameFo	db 'typeinfo name for ',0 ; DATA XREF: sub_40D690:loc_40D770o
aTypeinfoFnFor	db 'typeinfo fn for ',0 ; DATA XREF: sub_40D690:loc_40D777o
aNonVirtualThun	db 'non-virtual thunk to ',0 ; DATA XREF: sub_40D690:loc_40D77Eo
aVirtualThunkTo	db 'virtual thunk to ',0 ; DATA XREF: sub_40D690:loc_40E0EDo
aCovariantRetur	db 'covariant return thunk to ',0 ; DATA XREF: sub_40D690:loc_40E0F7o
aJavaClassFor	db 'java Class for ',0  ; DATA XREF: sub_40D690:loc_40DA44o
aGuardVariableF	db 'guard variable for ',0 ; DATA XREF: sub_40D690:loc_40DA4Eo
aReferenceTempo	db 'reference temporary for ',0 ; DATA XREF: sub_40D690:loc_40DE98o
aHiddenAliasFor	db 'hidden alias for ',0 ; DATA XREF: sub_40D690:loc_40DEA2o
asc_41AFD8	db '::*',0              ; DATA XREF: sub_40D690+73Bo
					; sub_40E9D0+DFo
a_sat		db '_Sat ',0            ; DATA XREF: sub_40D690:loc_40E209o
a_accum		db '_Accum',0           ; DATA XREF: sub_40D690+3FDo
a_fract		db '_Fract',0           ; DATA XREF: sub_40D690:loc_40E1F8o
asc_41AFF0	db ', ',0               ; DATA XREF: sub_40D690+170o
					; sub_40D690:loc_40DAC8o
aOperator_0	db 'operator',0         ; DATA XREF: sub_40D690:loc_40DE50o
aOperator	db 'operator ',0        ; DATA XREF: sub_40D690+4D8o
					; sub_40D690:loc_40DE8Eo
aIx		db 'ix',0               ; DATA XREF: sub_40D690+531o
asc_41B009	db ' : ',0              ; DATA XREF: sub_40D690+9A8o
aUl		db 'ul',0               ; DATA XREF: sub_40D690:loc_40E381o
aLl		db 'll',0               ; DATA XREF: sub_40D690:loc_40E370o
aUll		db 'ull',0              ; DATA XREF: sub_40D690:loc_40E3B6o
aFalse		db 'false',0            ; DATA XREF: sub_40D690:loc_40E57Eo
aTrue		db 'true',0             ; DATA XREF: sub_40D690+C9Bo
aJavaResource	db 'java resource ',0   ; DATA XREF: sub_40D690:loc_40E11Eo
aDecltype	db 'decltype (',0       ; DATA XREF: sub_40D690+A9Ao
a___		db '...',0              ; DATA XREF: sub_40D690+E89o
aParm		db 'parm#',0            ; DATA XREF: sub_40D690:loc_40DE1Bo
; char aLd[]
aLd		db '%ld',0              ; DATA XREF: sub_40D690+79Eo
aGlobalConstruc	db 'global constructors keyed to ',0 ; DATA XREF: sub_40D690:loc_40E0E3o
aGlobalDestruct	db 'global destructors keyed to ',0 ; DATA XREF: sub_40D690:loc_40DEACo
		align 4
off_41B088	dd offset loc_40D80E, offset loc_40D85C, offset	loc_40D85C
					; DATA XREF: sub_40D690:loc_40D6F8r
		dd offset loc_40D880, offset loc_40DF39, offset	loc_40DFB7 ; jump table	for switch statement
		dd offset loc_40DE1B, offset loc_40D739, offset	loc_40D754
		dd offset loc_40D6FF, offset loc_40D762, offset	loc_40D717
		dd offset loc_40D769, offset loc_40D770, offset	loc_40D777
		dd offset loc_40D77E, offset loc_40E0ED, offset	loc_40E0F7
		dd offset loc_40DA44, offset loc_40DA4E, offset	loc_40DE98
		dd offset loc_40DEA2, offset loc_40D745, offset	loc_40DDDC
		dd offset loc_40DDDC, offset loc_40DDDC, offset	loc_40DB12
		dd offset loc_40DB12, offset loc_40DB12, offset	loc_40DB12
		dd offset loc_40DB12, offset loc_40DB12, offset	loc_40DB12
		dd offset loc_40DB12, offset loc_40DB12, offset	loc_40E101
		dd offset loc_40D70B, offset loc_40E057, offset	loc_40DC4F
		dd offset loc_40DD75, offset loc_40DA58, offset	loc_40DA9E
		dd offset loc_40DA9E, offset loc_40DE50, offset	loc_40DE8E
		dd offset loc_40DB66, offset loc_40DB80, offset	loc_40DBA4
		dd offset loc_40D6CB, offset loc_40DFF7, offset	loc_40D6CB
		dd offset loc_40D6CB, offset loc_40DEB6, offset	loc_40DEB6
		dd offset loc_40E11E, offset loc_40E143, offset	loc_40DC3F
		dd offset loc_40E128, offset loc_40E0E3, offset	loc_40DEAC
		dd offset loc_40D788
off_41B17C	dd offset loc_40E3A5	; DATA XREF: sub_40D690+CD9r
		dd offset loc_40E392	; jump table for switch	statement
		dd offset loc_40E381
		dd offset loc_40E370
		dd offset loc_40E3B6
aRestrict	db ' restrict',0        ; DATA XREF: sub_40E9D0:loc_40EA10o
aVolatile	db ' volatile',0        ; DATA XREF: sub_40E9D0:loc_40EA27o
aConst		db ' const',0           ; DATA XREF: sub_40E9D0:loc_40EA30o
asc_41B1AB	db '&&',0               ; DATA XREF: sub_40E9D0:loc_40EA77o
aComplex	db 'complex ',0         ; DATA XREF: sub_40E9D0:loc_40EA80o
aImaginary	db 'imaginary ',0       ; DATA XREF: sub_40E9D0:loc_40EA87o
		align 4
off_41B1C4	dd offset loc_40EA07	; DATA XREF: sub_40E9D0:loc_40EA00r
		dd offset loc_40E9E9	; jump table for switch	statement
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40EA10
		dd offset loc_40EA27
		dd offset loc_40EA30
		dd offset loc_40EA10
		dd offset loc_40EA27
		dd offset loc_40EA30
		dd offset loc_40EA37
		dd offset loc_40EA48
		dd offset loc_40EA60
		dd offset loc_40EA77
		dd offset loc_40EA80
		dd offset loc_40EA87
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40E9E9
		dd offset loc_40EA90
aSignedChar	db 'signed char',0      ; DATA XREF: .rdata:0041B380o
aBool		db 'bool',0             ; DATA XREF: .rdata:0041B394o
aBoolean	db 'boolean',0
aChar		db 'char',0
aByte		db 'byte',0
aDouble		db 'double',0           ; DATA XREF: .rdata:0041B3BCo
aLongDouble	db 'long double',0
aFloat		db 'float',0
a__float128	db '__float128',0
aUnsignedChar	db 'unsigned char',0
aInt		db 'int',0              ; DATA XREF: .rdata:off_41B420o
aUnsignedInt	db 'unsigned int',0
aUnsigned	db 'unsigned',0
aLong		db 'long',0             ; DATA XREF: .rdata:0041B45Co
aUnsignedLong	db 'unsigned long',0
a__int128	db '__int128',0
aUnsigned__int1	db 'unsigned __int128',0 ; DATA XREF: .rdata:0041B498o
aShort		db 'short',0            ; DATA XREF: .rdata:0041B4E8o
aUnsignedShort	db 'unsigned short',0   ; DATA XREF: .rdata:0041B4FCo
aVoid_0		db 'void',0             ; DATA XREF: .rdata:0041B524o
aWchar_t	db 'wchar_t',0
aLongLong	db 'long long',0        ; DATA XREF: .rdata:0041B54Co
aUnsignedLongLo	db 'unsigned long long',0
aDecimal32	db 'decimal32',0        ; DATA XREF: .rdata:off_41B588o
aDecimal64	db 'decimal64',0        ; DATA XREF: .rdata:off_41B59Co
aDecimal128	db 'decimal128',0       ; DATA XREF: .rdata:off_41B5B0o
aHalf		db 'half',0             ; DATA XREF: .rdata:off_41B5C4o
aChar16_t	db 'char16_t',0         ; DATA XREF: .rdata:off_41B5D8o
aChar32_t	db 'char32_t',0         ; DATA XREF: .rdata:off_41B5ECo
		align 20h
		dd offset aSignedChar	; "signed char"
		dd 0Bh,	41B258h, 0Bh, 0
		dd offset aBool		; "bool"
		dd 4, 41B269h, 2 dup(7), 41B271h, 4, 41B276h, 4, 0
		dd offset aDouble	; "double"
		dd 6, 41B27Bh, 6, 8, 41B282h, 0Bh, 41B282h, 0Bh, 8, 41B28Eh
		dd 5, 41B28Eh, 5, 8, 41B294h, 0Ah, 41B294h, 0Ah, 8, 41B29Fh
		dd 0Dh,	41B29Fh, 0Dh, 0
off_41B420	dd offset aInt		; DATA XREF: sub_40D690+3D6o
					; "int"
		dd 3, 41B2ADh, 3, 1, 41B2B1h, 0Ch, 41B2BEh, 8, 2, 5 dup(0)
		dd offset aLong		; "long"
		dd 4, 41B2C7h, 4, 3, 41B2CCh, 0Dh, 41B2CCh, 0Dh, 4, 41B2DAh
		dd 8, 41B2DAh, 8, 0
		dd offset aUnsigned__int1 ; "unsigned __int128"
		dd 11h,	41B2E3h, 11h, 10h dup(0)
		dd offset aShort	; "short"
		dd 5, 41B2F5h, 5, 0
		dd offset aUnsignedShort ; "unsigned short"
		dd 0Eh,	41B2FBh, 0Eh, 6	dup(0)
		dd offset aVoid_0	; "void"
		dd 4, 41B30Ah, 4, 9, 41B30Fh, 7, 41B271h, 4, 0
		dd offset aLongLong	; "long	long"
		dd 9, 41B2C7h, 4, 5, 41B321h, 12h, 41B321h, 12h, 6, 41B03Ch
		dd 3, 41B03Ch, 3, 0
off_41B588	dd offset aDecimal32	; DATA XREF: sub_40B640+64Co
					; sub_40B640+651o
					; "decimal32"
		dd 9, 41B334h, 9, 0
off_41B59C	dd offset aDecimal64	; DATA XREF: sub_40B640+50Bo
					; sub_40B640+510o
					; "decimal64"
		dd 9, 41B33Eh, 9, 0
off_41B5B0	dd offset aDecimal128	; DATA XREF: sub_40B640+4D1o
					; sub_40B640+4D6o
					; "decimal128"
		dd 0Ah,	41B348h, 0Ah, 0
off_41B5C4	dd offset aHalf		; DATA XREF: sub_40B640+616o
					; sub_40B640+61Bo
					; "half"
		dd 4, 41B353h, 4, 8
off_41B5D8	dd offset aChar16_t	; DATA XREF: sub_40B640+439o
					; sub_40B640+43Eo
					; "char16_t"
		dd 8, 41B358h, 8, 0
off_41B5EC	dd offset aChar32_t	; DATA XREF: sub_40B640+49Ao
					; sub_40B640+49Fo
					; "char32_t"
		dd 8, 41B361h, 8, 0
aStdAllocator	db 'std::allocator',0
aAllocator	db 'allocator',0
aStdBasic_strin	db 'std::basic_string',0
aBasic_string	db 'basic_string',0
aStdString	db 'std::string',0
aStdBasic_str_0	db 'std::basic_string<char, std::char_traits<char>, std::allocator<ch'
		db 'ar> >',0
aStdIstream	db 'std::istream',0
aStdBasic_istre	db 'std::basic_istream<char, std::char_traits<char> >',0
aBasic_istream	db 'basic_istream',0
aStdOstream	db 'std::ostream',0
		align 4
aStdBasic_ostre	db 'std::basic_ostream<char, std::char_traits<char> >',0
aBasic_ostream	db 'basic_ostream',0
aStdIostream	db 'std::iostream',0
		align 4
aStdBasic_iostr	db 'std::basic_iostream<char, std::char_traits<char> >',0
aBasic_iostream	db 'basic_iostream',0
		align 10h
aT		db 't',0                ; DATA XREF: sub_40AF60+4Ao
					; sub_40AF60+55o
		align 4
		dd offset aStd		; "std"
		dd 3, 41AD47h, 3, 2 dup(0)
		dd 61h,	41B600h, 0Eh, 41B600h, 0Eh, 41B60Fh, 9,	62h, 41B619h
		dd 11h,	41B619h, 11h, 41B62Bh, 0Ch, 73h, 41B638h, 0Bh
		dd 41B644h, 46h, 41B62Bh, 0Ch, 69h, 41B68Bh, 0Ch, 41B698h
		dd 31h,	41B6CAh, 0Dh, 6Fh, 41B6D8h, 0Ch, 41B6E8h, 31h
		dd 41B71Ah, 0Dh, 64h, 41B728h, 0Dh, 41B738h, 32h, 41B76Bh
		dd 0Eh
dword_41B844	dd 26004E61h, 5361003Dh, 61003D00h, 64610061h, 61002600h
					; DATA XREF: sub_40AF60:loc_40AFA5o
					; sub_40AF60+6Co ...
		dd 2928006Eh, 6D6300h, 6F63002Ch, 64007E00h, 3D2F0056h
		dd 616400h, 656C6564h, 5D5B6574h, 656400h, 6C64002Ah, 6C656400h
		dd 657465h, 2E007464h, 766400h,	4F65002Fh, 3D5E00h, 5E006F65h
		dd 716500h, 67003D3Dh, 3D3E0065h, 746700h, 536C003Eh, 3D3C3C00h
		dd 656C00h, 6C003D3Ch, 3C3C0073h, 746C00h, 496D003Ch, 3D2D00h
		dd 2A004C6Dh, 696D003Dh, 6D002D00h, 6D6D006Ch, 2D2D00h
		dd 6E00616Eh, 5D5B7765h, 656E00h, 6E003D21h, 746E0067h
		dd 6E002100h, 656E0077h, 526F0077h, 3D7C00h, 7C006F6Fh
		dd 726F007Ch, 70007C00h, 3D2B004Ch, 6C7000h, 6D70002Bh
		dd 2A3E2D00h, 707000h, 70002B2Bh, 74700073h, 3E2D00h, 3F007571h
		dd 4D7200h, 72003D25h, 3E3E0053h, 6D72003Dh, 72002500h
		dd 3E3E0073h, 7A697300h, 20666F65h, 7A7300h, 61007461h
		dd 6E67696Ch, 20666Fh, 7A61h, 6	dup(0)
off_41B980	dd offset dword_41B844	; DATA XREF: sub_40BE60+65o
					; sub_40BE60+6Br
		dd offset dword_41B844+3
		dd 2 dup(2), 41B84Ah, 41B84Dh, 1, 2, 41B84Fh, 41B1ABh
		dd 2 dup(2), 41B852h, 41B855h, 2 dup(1), 41B857h, 41B855h
		dd 1, 2, 41AB4Ah, 41B85Ah, 2 dup(2), 41B85Dh, 41B860h
		dd 1, 2, 41B862h, 41B865h, 2 dup(1), 41B867h, 41B86Ah
		dd 2 dup(2), 41B86Dh, 41B870h, 8, 1, 41B879h, 41B87Ch
		dd 2 dup(1), 41B87Eh, 41B881h, 6, 1, 41B888h, 41B88Bh
		dd 1, 2, 41B88Dh, 41B890h, 1, 2, 41B892h, 41B895h, 2 dup(2)
		dd 41B898h, 41B89Bh, 1,	2, 41B89Dh, 41B8A0h, 2 dup(2)
		dd 41B8A3h, 41B8A6h, 2 dup(2), 41B8A9h,	41B8ACh, 1, 2
		dd 41B006h, 41AEDEh, 2 dup(2), 41B8AEh,	41B8B1h, 3, 2
		dd 41B8B5h, 41B8B8h, 2 dup(2), 41B8BBh,	41B8BEh, 2 dup(2)
		dd 41B8C1h, 41B8C4h, 1,	2, 41B8C6h, 41B8C9h, 2 dup(2)
		dd 41B8CCh, 41B8CFh, 2 dup(2), 41B8D2h,	41B8D5h, 1, 2
		dd 41B8D7h, 41B87Ch, 1,	2, 41B8DAh, 41B8DDh, 2,	1, 41B8E0h
		dd 41B8E3h, 5, 1, 41B8E9h, 41B8ECh, 2 dup(2), 41B8EFh
		dd 41B8D5h, 2 dup(1), 41B8F2h, 41B8F5h,	2 dup(1), 41B8F7h
		dd 41B8FAh, 3, 1, 41B8FEh, 41B901h, 2 dup(2), 41B904h
		dd 41B907h, 2 dup(2), 41B90Ah, 41B90Dh,	1, 2, 41B90Fh
		dd 41B912h, 2 dup(2), 41B915h, 41B918h,	1, 2, 41B91Ah
		dd 41B91Dh, 3, 2, 41B921h, 41B924h, 2, 1, 41B927h, 41B918h
		dd 2 dup(1), 41B92Ah, 41B92Dh, 2 dup(2), 41B930h, 41B933h
		dd 1, 3, 41B935h, 41B938h, 2 dup(2), 41B93Bh, 41B93Eh
		dd 3, 2, 41B942h, 41B945h, 1, 2, 41B947h, 41B94Ah, 2 dup(2)
		dd 41AB47h, 41B94Dh, 7,	1, 41B955h, 41B94Dh, 7,	1, 41B958h
		dd 41B95Bh, 8, 1, 41B964h, 41B95Bh, 8, 1, 8 dup(0)
off_41BCE0	dd offset TlsCallback_0	; DATA XREF: sub_401190:loc_401280r
aUnknownError	db 'Unknown error',0    ; DATA XREF: sub_40F040+3o
		align 4
; char a_matherrSInSGG[]
a_matherrSInSGG	db '_matherr(): %s in %s(%g, %g)  (retval=%g)',0Ah,0
					; DATA XREF: sub_40F040+39o
		align 10h
aArgumentDomain	db 'Argument domain error (DOMAIN)',0 ; DATA XREF: .rdata:off_41BE00o
aArgumentSingul	db 'Argument singularity (SIGN)',0 ; DATA XREF: .rdata:0041BE04o
		align 4
aOverflowRangeE	db 'Overflow range error (OVERFLOW)',0 ; DATA XREF: .rdata:0041BE08o
aTheResultIsToo	db 'The result is too small to be represented (UNDERFLOW)',0
					; DATA XREF: .rdata:0041BE0Co
		align 4
aTotalLossOfSig	db 'Total loss of significance (TLOSS)',0 ; DATA XREF: .rdata:0041BE10o
		align 4
aPartialLossOfS	db 'Partial loss of significance (PLOSS)',0 ; DATA XREF: .rdata:0041BE14o
		align 10h
off_41BE00	dd offset aArgumentDomain ; DATA XREF: sub_40F040+16r
					; "Argument domain error (DOMAIN)"
		dd offset aArgumentSingul ; "Argument singularity (SIGN)"
		dd offset aOverflowRangeE ; "Overflow range error (OVERFLOW)"
		dd offset aTheResultIsToo ; "The result	is too small to	be represent"...
		dd offset aTotalLossOfSig ; "Total loss	of significance	(TLOSS)"
		dd offset aPartialLossOfS ; "Partial loss of significance (PLOSS)"
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_40F0B0+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_40F110+13Ao
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_40F110+126o
					; sub_40F260+253o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_40F260+267o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_40F260+F4o
		align 4
; const	WCHAR LibFileName
LibFileName:				; DATA XREF: sub_40F810:loc_40F8B5o
		unicode	0, <msvcrt.dll>,0
		align 10h
off_41BF00	dd offset dword_41D080	; DATA XREF: .text:0040F9D8o
		dd offset dword_41D0E0
		dd 0
off_41BF0C	dd offset off_41C148	; DATA XREF: sub_413F20+351o
					; .rdata:0041C12Co
		dd offset aN10__cxxabiv11 ; "N10__cxxabiv115__forced_unwindE"
off_41BF14	dd offset off_41C1A8	; DATA XREF: .rdata:0041BF30o
					; .rdata:0041C144o
		dd offset aN10__cxxabiv_0 ; "N10__cxxabiv117__class_type_infoE"
		dd offset off_41BF6C
off_41BF20	dd offset off_41C148	; DATA XREF: sub_413F20+547o
					; .rdata:0041C184o
		dd offset aN10__cxxabiv_1 ; "N10__cxxabiv119__foreign_exceptionE"
off_41BF28	dd offset off_41C1A8	; DATA XREF: .rdata:0041C1A4o
		dd offset aN10__cxxabiv12 ; "N10__cxxabiv120__si_class_type_infoE"
		dd offset off_41BF14
off_41BF34	dd offset off_41C1A8	; DATA XREF: sub_413160+212o
					; sub_4133F0+1C1o ...
		dd offset aN9__gnu_cxx24_ ; "N9__gnu_cxx24__concurrence_lock_errorE"
		dd offset off_41BF64
off_41BF40	dd offset off_41C1A8	; DATA XREF: sub_4126D0+78o
					; sub_413160+1E8o ...
		dd offset aN9__gnu_cxx26_ ; "N9__gnu_cxx26__concurrence_unlock_error"...
		dd offset off_41BF64
off_41BF4C	dd offset off_41C1A8	; DATA XREF: sub_4137FD+A8o
					; sub_4137FD+D0o ...
		dd offset aSt13bad_except ; "St13bad_exception"
		dd offset off_41BF64
off_41BF58	dd offset off_41C1A8	; DATA XREF: sub_413160+8Eo
					; .text:00414874o ...
		dd offset aSt9bad_alloc	; "St9bad_alloc"
		dd offset off_41BF64
off_41BF64	dd offset off_41C148	; DATA XREF: .rdata:0041BF3Co
					; .rdata:0041BF48o ...
		dd offset aSt9exception	; "St9exception"
off_41BF6C	dd offset off_41C148	; DATA XREF: .rdata:0041BF1Co
					; .rdata:0041C264o
		dd offset aSt9type_info	; "St9type_info"
		align 10h
aN10__cxxabiv11	db 'N10__cxxabiv115__forced_unwindE',0 ; DATA XREF: .rdata:0041BF10o
aN10__cxxabiv_0	db 'N10__cxxabiv117__class_type_infoE',0 ; DATA XREF: .rdata:0041BF18o
		align 20h
aN10__cxxabiv_1	db 'N10__cxxabiv119__foreign_exceptionE',0 ; DATA XREF: .rdata:0041BF24o
		align 20h
aN10__cxxabiv12	db 'N10__cxxabiv120__si_class_type_infoE',0 ; DATA XREF: .rdata:0041BF2Co
		align 20h
aN9__gnu_cxx24_	db 'N9__gnu_cxx24__concurrence_lock_errorE',0 ; DATA XREF: .rdata:0041BF38o
		align 20h
aN9__gnu_cxx26_	db 'N9__gnu_cxx26__concurrence_unlock_errorE',0
					; DATA XREF: .rdata:0041BF44o
		align 20h
aSt13bad_except	db 'St13bad_exception',0 ; DATA XREF: .rdata:0041BF50o
		align 4
aSt9bad_alloc	db 'St9bad_alloc',0     ; DATA XREF: .rdata:0041BF5Co
		align 4
aSt9exception	db 'St9exception',0     ; DATA XREF: .rdata:0041BF68o
		align 4
aSt9type_info	db 'St9type_info',0     ; DATA XREF: .rdata:0041BF70o
		align 4
		dd 2 dup(0)
		dd offset off_41BF0C
off_41C130	dd offset sub_4110D0	; DATA XREF: sub_4110B0+7o
					; sub_4110D0+4o ...
		dd offset sub_4110B0
		dd offset sub_413E30
		dd 2 dup(0)
		dd offset off_41BF14
off_41C148	dd offset sub_411120	; DATA XREF: sub_4110F0+8o
					; sub_411120+7o ...
		dd offset sub_4110F0
		dd offset sub_412F50
		dd offset sub_412F60
		dd offset sub_412AB0
		dd offset sub_412B80
		dd offset sub_412B30
		dd offset sub_412BF0
		dd offset sub_412C70
		dd 6 dup(0)
		dd offset off_41BF20
off_41C188	dd offset sub_411180	; DATA XREF: sub_411160+7o
					; sub_411180+4o ...
		dd offset sub_411160
		dd offset sub_413E30
		dd 4 dup(0)
		dd offset off_41BF28
off_41C1A8	dd offset sub_4111D0	; DATA XREF: sub_4111A0+8o
					; sub_4111D0+7o ...
		dd offset sub_4111A0
		dd offset sub_412F50
		dd offset sub_412F60
		dd offset sub_412AB0
		dd offset sub_412B80
		dd offset sub_412C90
		dd offset sub_412D20
		dd offset sub_412E40
		dd 6 dup(0)
		dd offset off_41BF34
off_41C1E8	dd offset sub_4127C0	; DATA XREF: sub_412790+8o
					; sub_4127C0+7o ...
		dd offset sub_412790
		dd offset sub_412EE0
		dd 2 dup(0)
		dd offset off_41BF40
off_41C200	dd offset sub_412810	; DATA XREF: sub_4126D0+6Ao
					; sub_4127E0+8o ...
		dd offset sub_4127E0
		dd offset sub_412EF0
		dd 2 dup(0)
		dd offset off_41BF4C
off_41C218	dd offset sub_412FC0	; DATA XREF: sub_4137FD+C2o
		dd offset sub_412FA0
		dd offset sub_412F00
		dd 2 dup(0)
		dd offset off_41BF58
off_41C230	dd offset sub_413010	; DATA XREF: sub_412FE0+8o
					; sub_413010+7o ...
		dd offset sub_412FE0
		dd offset sub_412F10
		dd 2 dup(0)
		dd offset off_41BF64
off_41C248	dd offset sub_413070	; DATA XREF: sub_412FA0+7o
					; sub_412FC0+4o ...
		dd offset sub_413050
		dd offset sub_412F20
		dd 4 dup(0)
		dd offset off_41BF6C
off_41C268	dd offset sub_4130B0	; DATA XREF: sub_413090+7o
					; sub_4130B0+4o ...
		dd offset sub_413090
		dd offset sub_412F50
		dd offset sub_412F60
		dd offset sub_412F30
		dd offset sub_412F40
dword_41C280	dd 0			; DATA XREF: sub_40F260+57o
					; sub_40F260+5Co ...
dword_41C284	dd 0			; DATA XREF: sub_40F260+7Ar
dword_41C288	dd 0			; DATA XREF: sub_40F260+84r
dword_41C28C	dd 5Dh dup(0)		; DATA XREF: sub_40F260+8Do
		align 1000h
_rdata		ends

; Section 4. (virtual address 0001D000)
; Virtual size			: 00000414 (   1044.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 41D000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_41D000	dd ?			; DATA XREF: sub_401060+7Br
dword_41D004	dd ?			; DATA XREF: sub_401190+D0w
					; sub_401190+27Cr
dword_41D008	dd ?			; DATA XREF: sub_401190+12Aw
					; TopLevelExceptionFilter:loc_40158Cr
dword_41D00C	dd ?			; DATA XREF: sub_401190+271w
					; sub_401190+28Br
dword_41D010	dd ?			; DATA XREF: sub_401010+2Ao
					; sub_401190:loc_401354r ...
dword_41D014	dd ?			; DATA XREF: sub_401010+18o
					; sub_401190+1E0r ...
dword_41D018	dd ?			; DATA XREF: sub_401010+10o
					; sub_401190+242r ...
dword_41D01C	dd ?			; DATA XREF: sub_401010+3Aw
dword_41D020	dd ?			; DATA XREF: sub_401060+3Ew
					; sub_401190+269r
dword_41D024	dd ?			; DATA XREF: sub_401010+8o
					; sub_401010+20w
dword_41D028	dd ?			; DATA XREF: sub_401700+3o
					; sub_401720+4Bo ...
byte_41D02C	db ?			; DATA XREF: sub_4024A0+4Ar
					; sub_408C80+726w
		align 10h
dword_41D030	dd ?			; DATA XREF: sub_401010+3r
TlsIndex	dd ?			; DATA XREF: .tls:TlsIndex_ptro
dword_41D038	dd ?			; DATA XREF: sub_401060+Cw
dword_41D03C	dd ?			; DATA XREF: sub_401060+16w
dword_41D040	dd ?			; DATA XREF: sub_401060+20w
dword_41D044	dd ?			; DATA XREF: sub_401060+2Aw
dword_41D048	dd ?			; DATA XREF: sub_401060:loc_401098r
					; sub_401190+5Br ...
dword_41D04C	dd ?			; DATA XREF: sub_401060+5Fr
dword_41D050	dd ?			; DATA XREF: sub_401060+85r
					; sub_401060+FFw
dword_41D054	dd ?			; DATA XREF: sub_40F110+2Cr
					; sub_40F110+65r ...
dword_41D058	dd ?			; DATA XREF: sub_40F110:loc_40F130r
					; sub_40F110:loc_40F1D2w ...
dword_41D05C	dd ?			; DATA XREF: sub_40F260+9r
					; sub_40F260:loc_40F280w
dword_41D060	dd ?			; DATA XREF: sub_40F810+6r
					; sub_40F810+9Aw ...
		align 20h
dword_41D080	dd ?			; DATA XREF: .text:0040F992w
					; .rdata:off_41BF00o
dword_41D084	dd ?			; DATA XREF: .text:0040F99Cw
		dd ?
dword_41D08C	dd ?			; DATA XREF: .text:0040F9ABw
		dd 14h dup(?)
dword_41D0E0	dd 2Bh dup(?)		; DATA XREF: .rdata:0041BF04o
dword_41D18C	dd ?			; DATA XREF: .text:0040F9BAw
		dd 2 dup(?)
dword_41D198	dd ?			; DATA XREF: .text:0040F9A6w
		dd 2 dup(?)
dword_41D1A4	dd ?			; DATA XREF: .text:0040F98Cw
		dd 86h dup(?)
dword_41D3C0	dd ?			; DATA XREF: sub_40FB80+3r
					; sub_40FB80:loc_40FB91w
dword_41D3C4	dd ?			; DATA XREF: sub_40FBA0+7r
					; sub_40FC20+26r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_40FBA0:loc_40FBB8o
					; sub_40FBA0:loc_40FC05o ...
dword_41D3E0	dd ?			; DATA XREF: sub_40FBA0+25r
					; .text:0040FCD5r ...
		align 8
dword_41D3E8	dd ?			; DATA XREF: sub_401190+1A5w
dword_41D3EC	dd ?			; DATA XREF: sub_401190:loc_40134Fw
dword_41D3F0	dd ?			; DATA XREF: sub_401190+1AFw
dword_41D3F4	dd ?			; DATA XREF: sub_401060+65w
					; sub_40EF60+3Fr ...
dword_41D3F8	dd ?			; DATA XREF: sub_401060+6Aw
					; sub_40EF60+4r ...
dword_41D3FC	dd ?			; DATA XREF: sub_401190+A0o
					; sub_401190+2FEo
dword_41D400	dd ?			; DATA XREF: sub_401190+B3r
					; sub_401190:loc_401253r ...
		align 1000h
_bss		ends

;
; Imports from QtCore4.dll
;
; Section 5. (virtual address 0001E000)
; Virtual size			: 00002558 (   9560.)
; Section size in file		: 00002600 (   9728.)
; Offset to raw	data for section: 0001AE00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn _ZN7QString4freeEPNS_4DataE:dword	; CODE XREF: sub_401720+83p
					; sub_4017F0+4E0p ...
		extrn _Z5qFreePv:dword	; CODE XREF: sub_4017F0+500p
					; sub_4017F0+8D0p ...
		extrn _ZN7QString11shared_nullE:dword ;	DATA XREF: sub_4024A0+C98r
					; sub_403F00+17Cr ...
		extrn _ZN8QVariantC2ERKS_:dword	; CODE XREF: sub_4024A0+B31p
					; sub_4024A0+B71p ...
		extrn _ZN8QVariantD2Ev:dword ; CODE XREF: sub_4024A0+9DAp
					; sub_4024A0+B4Ap ...
		extrn _ZN8QVariantD1Ev:dword ; CODE XREF: sub_4024A0+38Ap
					; sub_4024A0+402p ...
		extrn _ZN9QListData6detachEi:dword ; CODE XREF:	sub_406220+421p
					; sub_4118C0+1Ap ...
		extrn _ZN9QListData11detach_growEPii:dword ; CODE XREF:	sub_411990+71p
					; sub_411EA0+77p ...
		extrn _ZN9QListData6appendEv:dword ; CODE XREF:	sub_411990+15Bp
					; sub_411EA0+264p ...
		extrn _ZN8QVariantC1ERKS_:dword	; CODE XREF: sub_4024A0+993p
					; sub_4024A0+E89p ...
		extrn _ZN9QListData11shared_nullE:dword	; DATA XREF: sub_4024A0+2DFr
					; sub_406220+AAr ...
		extrn _ZN8QMapData16continueFreeDataEi:dword ; DATA XREF: sub_4114B0+66r
					; sub_411790+53r
		extrn _ZN8QMapData10createDataEi:dword ; CODE XREF: sub_411240+41p
					; sub_411530+40p
					; DATA XREF: ...
		extrn _ZN8QMapData11node_createEPPNS_4NodeEii:dword
					; CODE XREF: sub_4024A0+E42p
					; sub_408C80+105Bp
					; DATA XREF: ...
		extrn _ZN8QMapData11node_deleteEPPNS_4NodeEiS1_:dword
					; CODE XREF: sub_4024A0+12D6p
					; sub_408C80+1FE0p ...
		extrn _ZN7QString17fromLatin1_helperEPKci:dword	; CODE XREF: sub_401720+45p
					; sub_403F00+75p ...
		extrn _ZNK7QString11toLocal8BitEv:dword	; CODE XREF: sub_4017F0+101p
					; sub_4017F0+149p ...
		extrn _ZNK11QMetaObject14propertyOffsetEv:dword	; CODE XREF: sub_4017F0+32Ap
					; DATA XREF: sub_4017F0+32Ar
		extrn _ZNK13QMetaProperty10isReadableEv:dword ;	CODE XREF: sub_4017F0+488p
					; DATA XREF: sub_4017F0+336r ...
		extrn _ZNK11QMetaObject13propertyCountEv:dword ; DATA XREF: sub_4017F0+33Cr
		extrn _ZNK13QMetaProperty4nameEv:dword ; CODE XREF: sub_4017F0+378p
					; DATA XREF: sub_4017F0+378r
		extrn _ZNK13QMetaProperty8typeNameEv:dword ; CODE XREF:	sub_4017F0+3D1p
					; DATA XREF: sub_4017F0+3D1r
		extrn _ZNK11QMetaObject8propertyEi:dword ; CODE	XREF: sub_4017F0+46Dp
					; DATA XREF: sub_4017F0+46Dr
		extrn _ZNK13QMetaProperty10isWritableEv:dword ;	CODE XREF: sub_4017F0+511p
					; DATA XREF: sub_4017F0+511r
		extrn _ZNK11QMetaObject12methodOffsetEv:dword ;	CODE XREF: sub_4017F0+539p
					; sub_406220+15Ap
					; DATA XREF: ...
		extrn _ZNK11QMetaObject11methodCountEv:dword ; DATA XREF: sub_4017F0+53Fr
					; sub_406220+160r
		extrn _ZNK11QMetaObject6methodEi:dword ; CODE XREF: sub_4017F0+593p
					; sub_406220+1B0p ...
		extrn _ZNK11QMetaMethod9signatureEv:dword ; CODE XREF: sub_4017F0+5A5p
					; sub_406220+1CBp
					; DATA XREF: ...
		extrn _ZN10QByteArrayC1EPKc:dword ; CODE XREF: sub_4017F0+5B5p
					; sub_406220+1DBp
					; DATA XREF: ...
		extrn _ZNK10QByteArray7indexOfEci:dword	; CODE XREF: sub_4017F0+5DBp
					; DATA XREF: sub_4017F0+5DBr
		extrn _ZN10QByteArray8truncateEi:dword ; CODE XREF: sub_4017F0+5EBp
					; DATA XREF: sub_4017F0+5EBr
		extrn _ZNK11QMetaMethod8typeNameEv:dword ; CODE	XREF: sub_4017F0+64Ap
					; sub_4017F0+66Fp
					; DATA XREF: ...
		extrn _ZNK11QMetaMethod3tagEv:dword ; CODE XREF: sub_4017F0+68Bp
					; sub_4017F0+6BAp
					; DATA XREF: ...
		extrn _ZNK11QMetaMethod10methodTypeEv:dword ; CODE XREF: sub_4017F0+6CCp
					; DATA XREF: sub_4017F0+6CCr
		extrn _ZNK11QMetaMethod14parameterTypesEv:dword	; CODE XREF: sub_4017F0+766p
					; sub_406220+363p
					; DATA XREF: ...
		extrn _ZNK11QMetaMethod14parameterNamesEv:dword	; CODE XREF: sub_4017F0+786p
					; DATA XREF: sub_4017F0+786r
		extrn _ZNK8QVariant8userTypeEv:dword ; CODE XREF: sub_4024A0+103p
					; sub_4024A0+1C0p ...
		extrn _ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE:dword
					; CODE XREF: sub_4024A0+191p
					; sub_4024A0+214p ...
		extrn _ZNK7QStringeqERK13QLatin1String:dword ; CODE XREF: sub_4024A0+2B1p
					; sub_4024A0+BDFp ...
		extrn _ZN8QVariantC1ERK5QListIS_E:dword	; CODE XREF: sub_4024A0+3D4p
					; DATA XREF: sub_4024A0+3D4r
		extrn _ZNK8QVariant12toStringListEv:dword ; CODE XREF: sub_4024A0+489p
					; DATA XREF: sub_4024A0+489r
		extrn _ZNK8QVariant5toMapEv:dword ; CODE XREF: sub_4024A0+5EBp
					; DATA XREF: sub_4024A0+5EBr
		extrn _ZNK8QVariant6toListEv:dword ; CODE XREF:	sub_4024A0+76Bp
					; DATA XREF: sub_4024A0+76Br
		extrn _ZNK8QVariant8toStringEv:dword ; CODE XREF: sub_4024A0+874p
					; DATA XREF: sub_4024A0+874r
		extrn _ZN8QVariant7handlerE:dword ; DATA XREF: sub_4024A0+A15r
					; sub_4024A0+AE1r ...
		extrn _ZNK8QVariant9constDataEv:dword ;	CODE XREF: sub_4024A0+B5Ep
					; sub_4024A0+100Dp ...
		extrn _ZN8QMapData11shared_nullE:dword ; DATA XREF: sub_4024A0+C0Dr
					; sub_408C80:loc_409AAAr
		extrn _ZNK7QStringltERKS_:dword	; CODE XREF: sub_4024A0+DA5p
					; sub_4024A0+E0Cp ...
		extrn _ZN8QVariantC1ERK4QMapI7QStringS_E:dword ; CODE XREF: sub_4024A0+F10p
					; DATA XREF: sub_4024A0+F10r
		extrn _ZN7QRegExpC1ERK7QStringN2Qt15CaseSensitivityENS_13PatternSyntaxE:dword
					; CODE XREF: sub_403AE0+65p
					; DATA XREF: sub_403AE0+65r
		extrn _ZNK7QRegExp7isValidEv:dword ; CODE XREF:	sub_403AE0+78p
					; DATA XREF: sub_403AE0+78r
		extrn _ZN9QtPrivate16QStringList_sortEP11QStringList:dword
					; CODE XREF: sub_403AE0+106p
					; sub_408C80+11D7p
					; DATA XREF: ...
		extrn _ZNK7QRegExp10exactMatchERK7QString:dword	; DATA XREF: sub_403AE0+147r
		extrn _ZN7QRegExpD1Ev:dword ; CODE XREF: sub_403AE0+1BAp
					; sub_403DFE+7Ap
					; DATA XREF: ...
		extrn _ZN8QVariantC1EiPKv:dword	; CODE XREF: sub_403F00+1BDp
					; sub_4051A0+1BDp
					; DATA XREF: ...
		extrn _ZN7QStringaSERKS_:dword ; CODE XREF: sub_403F00+28Cp
					; sub_4051A0+28Cp ...
		extrn _ZN7QString4growEi:dword ; CODE XREF: sub_403F00+503p
					; DATA XREF: sub_403F00+503r
		extrn _ZN7QString7reallocEi:dword ; CODE XREF: sub_403F00+513p
					; DATA XREF: sub_403F00+513r
		extrn _ZN7QString6appendERKS_:dword ; CODE XREF: sub_403F00+55Dp
					; DATA XREF: sub_403F00+55Dr
		extrn _Z8qWarningPKcz:dword ; CODE XREF: sub_4051A0+797p
					; DATA XREF: sub_4051A0+797r
		extrn _ZNK7QString8toLatin1Ev:dword ; CODE XREF: sub_406220+12Ap
					; DATA XREF: sub_406220+12Ar
		extrn _ZN10QByteArray6appendEc:dword ; CODE XREF: sub_406220+14Bp
					; DATA XREF: sub_406220+14Br
		extrn _ZNK10QByteArray10startsWithERKS_:dword ;	CODE XREF: sub_406220+1F8p
					; DATA XREF: sub_406220+1F8r
		extrn _ZN9QListData5eraseEPPv:dword ; CODE XREF: sub_406220+328p
					; sub_406220+4ACp ...
		extrn _ZNK10QByteArray8endsWithEc:dword	; CODE XREF: sub_406220+3D1p
					; DATA XREF: sub_406220+3D1r
		extrn _ZN8QVariant10nameToTypeEPKc:dword ; DATA	XREF: sub_406220+508r
		extrn _ZN8QVariant7convertENS_4TypeE:dword ; CODE XREF:	sub_406220+550p
					; DATA XREF: sub_406220+550r
		extrn _ZNK8QVariant4typeEv:dword ; CODE	XREF: sub_406220+55Fp
					; DATA XREF: sub_406220+55Fr
		extrn _ZN8QVariantC1ERK7QString:dword ;	CODE XREF: sub_406220+73Cp
					; DATA XREF: sub_406220+73Cr
		extrn _ZN8QVariantaSERKS_:dword	; CODE XREF: sub_406220+75Fp
					; sub_406220+8E6p ...
		extrn _ZN8QVariantC1EiPKvj:dword ; CODE	XREF: sub_406220+8C3p
					; sub_406220+E0Cp ...
		extrn _ZN8QVariantC1ERK11QStringList:dword ; CODE XREF:	sub_406220+D49p
					; DATA XREF: sub_406220+D49r
		extrn _ZNK8QVariant6toUIntEPb:dword ; CODE XREF: sub_406220+DE3p
					; DATA XREF: sub_406220+DE3r
		extrn _ZN9QMetaType4typeEPKc:dword ; CODE XREF:	sub_406220+10F3p
					; DATA XREF: sub_406220+10F3r
		extrn _ZN7QString16fromAscii_helperEPKci:dword ; CODE XREF: sub_406220+1D40p
					; sub_406220+1D65p ...
		extrn _ZN16QCoreApplicationC1ERiPPci:dword ; CODE XREF:	sub_408C80+9Bp
					; DATA XREF: sub_408C80+9Br
		extrn _ZN16QCoreApplication9argumentsEv:dword ;	CODE XREF: sub_408C80+B1p
					; DATA XREF: sub_408C80+B1r
		extrn _ZNK7QString10startsWithERK5QCharN2Qt15CaseSensitivityE:dword
					; CODE XREF: sub_408C80+19Fp
					; DATA XREF: sub_408C80+19Fr
		extrn _ZN16QCoreApplicationD1Ev:dword ;	CODE XREF: sub_408C80+52Bp
					; sub_408C80+197Ep
					; DATA XREF: ...
		extrn _ZNK7QString11lastIndexOfE5QChariN2Qt15CaseSensitivityE:dword
					; CODE XREF: sub_408C80+A42p
					; DATA XREF: sub_408C80+A42r
		extrn _ZNK7QString3midEii:dword	; CODE XREF: sub_408C80+A83p
					; DATA XREF: sub_408C80+A83r
		extrn _ZN7QString8truncateEi:dword ; CODE XREF:	sub_408C80+ACCp
					; DATA XREF: sub_408C80+ACCr
		extrn _ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString:dword
					; CODE XREF: sub_408C80+121Fp
					; DATA XREF: sub_408C80+121Fr
		extrn _ZNK7QString7indexOfE5QChariN2Qt15CaseSensitivityE:dword
					; CODE XREF: sub_408C80+151Cp
					; DATA XREF: sub_408C80+151Cr

;
; Imports from QtDBus4.dll
;
		extrn _ZN15QDBusConnectionD1Ev:dword ; CODE XREF: sub_401700+Ap
					; sub_408C80+2B1p ...
		extrn _ZN13QDBusArgumentD1Ev:dword ; CODE XREF:	sub_4024A0+42Dp
					; sub_4024A0+A78p ...
		extrn _ZN13QDBusArgumentC1ERKS_:dword ;	CODE XREF: sub_4024A0+A62p
					; sub_4024A0+101Dp ...
		extrn _ZN13QDBusArgumentC1Ev:dword ; CODE XREF:	sub_4024A0+26Fp
					; sub_4024A0+A0Fp ...
		extrn _ZN15QDBusConnectionC1ERK7QString:dword ;	CODE XREF: sub_401720+63p
					; DATA XREF: sub_401720+63r
		extrn _ZN14QDBusInterfaceC1ERK7QStringS2_S2_RK15QDBusConnectionP7QObject:dword
					; CODE XREF: sub_4017F0+94p
					; sub_406220+A4p
					; DATA XREF: ...
		extrn _ZNK22QDBusAbstractInterface7isValidEv:dword
					; CODE XREF: sub_4017F0+AAp
					; DATA XREF: sub_4017F0+AAr
		extrn _ZNK22QDBusAbstractInterface9lastErrorEv:dword
					; CODE XREF: sub_4017F0+C5p
					; DATA XREF: sub_4017F0+C5r
		extrn _ZNK10QDBusError7messageEv:dword ; CODE XREF: sub_4017F0+E3p
					; sub_403F00+A6Ep ...
		extrn _ZNK10QDBusError4nameEv:dword ; CODE XREF: sub_4017F0+12Bp
					; sub_403F00+ABDp ...
		extrn _ZNK14QDBusInterface10metaObjectEv:dword ; CODE XREF: sub_4017F0+31Bp
					; sub_406220+111p
					; DATA XREF: ...
		extrn _ZN14QDBusInterfaceD1Ev:dword ; CODE XREF: sub_4017F0+903p
					; sub_402217+11Ap ...
		extrn _ZN9QDBusUtil16argumentToStringERK8QVariant:dword
					; CODE XREF: sub_4024A0+71p
					; DATA XREF: sub_4024A0+71r
		extrn _ZNK13QDBusArgument16currentSignatureEv:dword
					; CODE XREF: sub_4024A0+293p
					; sub_4024A0+BC1p ...
		extrn _ZNK13QDBusArgument10beginArrayEv:dword ;	CODE XREF: sub_4024A0+2FDp
					; DATA XREF: sub_4024A0+2FDr
		extrn _ZNK13QDBusArgument5atEndEv:dword	; CODE XREF: sub_4024A0+CBAp
					; DATA XREF: sub_4024A0+30Er ...
		extrn _ZrsRK13QDBusArgumentR8QVariant:dword ; CODE XREF: sub_4024A0+35Cp
					; sub_4024A0+D35p
					; DATA XREF: ...
		extrn _ZNK13QDBusArgument8endArrayEv:dword ; CODE XREF:	sub_4024A0+3B4p
					; DATA XREF: sub_4024A0+3B4r
		extrn _ZNK13QDBusArgument8beginMapEv:dword ; CODE XREF:	sub_4024A0+C33p
					; DATA XREF: sub_4024A0+C33r
		extrn _ZNK13QDBusArgument13beginMapEntryEv:dword
					; CODE XREF: sub_4024A0+D0Fp
					; DATA XREF: sub_4024A0+D0Fr
		extrn _ZNK13QDBusArgumentrsER7QString:dword ; CODE XREF: sub_4024A0+D22p
					; DATA XREF: sub_4024A0+D22r
		extrn _ZNK13QDBusArgument11endMapEntryEv:dword ; CODE XREF: sub_4024A0+E9Fp
					; DATA XREF: sub_4024A0+E9Fr
		extrn _ZNK13QDBusArgument6endMapEv:dword ; CODE	XREF: sub_4024A0+EF0p
					; DATA XREF: sub_4024A0+EF0r
		extrn _ZNK24QDBusConnectionInterface22registeredServiceNamesEv:dword
					; CODE XREF: sub_403AE0+A4p
					; sub_408C80+DC5p
					; DATA XREF: ...
		extrn _ZN12QDBusMessage16createMethodCallERK7QStringS2_S2_S2_:dword
					; CODE XREF: sub_403F00+E7p
					; sub_4051A0+E7p
					; DATA XREF: ...
		extrn _ZNK15QDBusConnection4callERK12QDBusMessageN5QDBus8CallModeEi:dword
					; CODE XREF: sub_403F00+152p
					; sub_4051A0+152p
					; DATA XREF: ...
		extrn _ZN10QDBusErrorC1EPK9DBusError:dword ; CODE XREF:	sub_403F00+176p
					; sub_4051A0+176p
					; DATA XREF: ...
		extrn _Z14qDBusReplyFillRK12QDBusMessageR10QDBusErrorR8QVariant:dword
					; CODE XREF: sub_403F00+1E7p
					; sub_4051A0+1E7p
					; DATA XREF: ...
		extrn _ZN12QDBusMessageD1Ev:dword ; CODE XREF: sub_403F00+2CCp
					; sub_403F00+8B3p ...
		extrn _ZNK10QDBusError7isValidEv:dword ; CODE XREF: sub_403F00+2EEp
					; sub_403F00+8E3p ...
		extrn _ZN10QDBusErrorC1ERKS_:dword ; CODE XREF:	sub_403F00+A2Cp
					; sub_4051A0+2F9p
					; DATA XREF: ...
		extrn _ZNK10QDBusError4typeEv:dword ; CODE XREF: sub_403F00+A45p
					; sub_4051A0+30Fp ...
		extrn _ZN9QDBusUtil20isValidInterfaceNameERK7QString:dword
					; CODE XREF: sub_4051A0+65Dp
					; sub_408C80+1BDDp
					; DATA XREF: ...
		extrn _ZN14QDBusSignature5checkEv:dword	; CODE XREF: sub_406220+828p
					; DATA XREF: sub_406220+828r
		extrn _ZN22QDBusAbstractInterface20callWithArgumentListEN5QDBus8CallModeERK7QStringRK5QListI8QVariantE:dword
					; CODE XREF: sub_406220+9CAp
					; DATA XREF: sub_406220+9CAr
		extrn _ZNK12QDBusMessage4typeEv:dword ;	CODE XREF: sub_406220+9E4p
					; sub_406220+A06p ...
		extrn _ZN15QDBusObjectPath5checkEv:dword ; CODE	XREF: sub_406220+13BFp
					; DATA XREF: sub_406220+13BFr
		extrn _ZNK12QDBusMessage9argumentsEv:dword ; CODE XREF:	sub_406220+1662p
					; DATA XREF: sub_406220+1662r
		extrn _ZN10QDBusErrorC1ERK12QDBusMessage:dword ; CODE XREF: sub_406220+18FEp
					; DATA XREF: sub_406220+18FEr
		extrn qt_dbus_metaobject_skip_annotations:dword	; DATA XREF: sub_408C80+64r
		extrn _ZN15QDBusConnection9systemBusEv:dword ; CODE XREF: sub_408C80+27Ap
					; DATA XREF: sub_408C80+27Ar
		extrn _ZN15QDBusConnectionaSERKS_:dword	; CODE XREF: sub_408C80+29Bp
					; sub_408C80+332p ...
		extrn _ZN15QDBusConnection10sessionBusEv:dword ; CODE XREF: sub_408C80+313p
					; DATA XREF: sub_408C80+313r
		extrn _ZNK15QDBusConnection11isConnectedEv:dword
					; CODE XREF: sub_408C80+361p
					; DATA XREF: sub_408C80+361r
		extrn _ZNK15QDBusConnection9lastErrorEv:dword ;	CODE XREF: sub_408C80+380p
					; sub_408C80+3EDp
					; DATA XREF: ...
		extrn _ZN15QDBusConnection12connectToBusERK7QStringS2_:dword
					; CODE XREF: sub_408C80+659p
					; DATA XREF: sub_408C80+659r
		extrn _ZNK15QDBusConnection9interfaceEv:dword ;	CODE XREF: sub_408C80+7DBp
					; DATA XREF: sub_408C80+7DBr
		extrn _ZN9QDBusUtil14isValidBusNameERK7QString:dword
					; CODE XREF: sub_408C80+898p
					; DATA XREF: sub_408C80+898r
		extrn _ZN9QDBusUtil17isValidObjectPathERK7QString:dword
					; CODE XREF: sub_408C80+957p
					; DATA XREF: sub_408C80+957r
		extrn _ZN9QDBusUtil17isValidMemberNameERK7QString:dword
					; CODE XREF: sub_408C80+AEFp
					; DATA XREF: sub_408C80+AEFr
		extrn _ZNK24QDBusConnectionInterface12serviceOwnerERK7QString:dword
					; CODE XREF: sub_408C80+ED7p
					; DATA XREF: sub_408C80+ED7r

;
; Imports from QtXml4.dll
;
		extrn _ZN12QDomDocumentC1Ev:dword ; CODE XREF: sub_403F00+318p
					; sub_4051A0+470p
					; DATA XREF: ...
		extrn _ZN12QDomDocument10setContentERK7QStringPS0_PiS4_:dword
					; CODE XREF: sub_403F00+35Cp
					; sub_4051A0+4B4p
					; DATA XREF: ...
		extrn _ZNK12QDomDocument15documentElementEv:dword
					; CODE XREF: sub_403F00+38Ap
					; sub_4051A0+4E2p
					; DATA XREF: ...
		extrn _ZNK8QDomNode17firstChildElementERK7QString:dword
					; CODE XREF: sub_403F00+3C0p
					; sub_4051A0+518p
					; DATA XREF: ...
		extrn _ZNK8QDomNode6isNullEv:dword ; DATA XREF:	sub_403F00:loc_4042DAr
					; sub_4051A0:loc_4056D2r
		extrn _ZNK11QDomElement7tagNameEv:dword	; CODE XREF: sub_403F00+422p
					; sub_4051A0+57Cp
					; DATA XREF: ...
		extrn _ZNK11QDomElement9attributeERK7QStringS2_:dword
					; CODE XREF: sub_403F00+4C8p
					; sub_4051A0+622p
					; DATA XREF: ...
		extrn _ZNK8QDomNode18nextSiblingElementERK7QString:dword
					; CODE XREF: sub_403F00+669p
					; sub_4051A0+6C3p
					; DATA XREF: ...
		extrn _ZN11QDomElementaSERKS_:dword ; CODE XREF: sub_403F00+689p
					; sub_4051A0+6E3p
					; DATA XREF: ...
		extrn _ZN8QDomNodeD2Ev:dword ; CODE XREF: sub_403F00+69Fp
					; sub_403F00+835p ...
		extrn _ZN12QDomDocumentD1Ev:dword ; CODE XREF: sub_403F00+861p
					; sub_404C03+3F3p ...

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: .text:004100CDp
					; DATA XREF: .text:004100CDr
; HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpName)
		extrn CreateSemaphoreA:dword ; CODE XREF: .text:0041006Bp
					; sub_410080+2Dp
					; DATA XREF: ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_40FC20+41p
					; DATA XREF: sub_40FC20+41r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_40FBA0+1Fp
					; .text:0040FCCFp ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:0040F9E8p
					; DATA XREF: .text:0040F9E8r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_40FA10+6Cp
					; DATA XREF: sub_40FA10+6Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_40FA10+74p
					; .text:0040FF18p ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_40FBA0+4Cp
					; sub_410110+Bp
					; DATA XREF: ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_4016A0+16p
					; sub_40F810+91p
					; DATA XREF: ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_401190+13Fp
					; sub_4016A0+35p
					; DATA XREF: ...
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
		extrn GetStartupInfoA:dword ; CODE XREF: sub_401190+315p
					; DATA XREF: sub_401190+315r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_40FA10+57p
					; DATA XREF: sub_40FA10+57r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_40FA10+7Cp
					; DATA XREF: sub_40FA10+7Cr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_40FC20+77p
					; DATA XREF: sub_40FC20+77r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_40FBA0+6Cp
					; .text:0040FD06p ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: sub_40F810+ACp
					; DATA XREF: sub_40F810+ACr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_40FA10+8Bp
					; DATA XREF: sub_40FA10+8Br
; BOOL __stdcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG	lpPreviousCount)
		extrn ReleaseSemaphore:dword ; CODE XREF: .text:0040FE9Cp
					; sub_40FEC0+31p
					; DATA XREF: ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_410110+28p
					; DATA XREF: sub_410110+28r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_401190+121p
					; .text:0040F9CFp
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_401190+8Fp
					; .text:00410227p
					; DATA XREF: ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:0040F9F9p
					; DATA XREF: .text:0040F9F9r
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: sub_410180+13p
					; DATA XREF: sub_410180+13r
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; CODE XREF: sub_410150+Ap
					; DATA XREF: sub_410150+Ar
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_40FBA0+45p
					; sub_410110+1Ap
					; DATA XREF: ...
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: sub_4100E0+12p
					; DATA XREF: sub_4100E0+12r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:0040F9DFp
					; DATA XREF: .text:0040F9DFr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, DWORD	dwSize,	DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_40F110+10Bp
					; sub_40F260+1B2p
					; DATA XREF: ...
; DWORD	__stdcall VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, DWORD dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_40F110+A8p
					; sub_40F260+184p
					; DATA XREF: ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: .text:0040FF93p
					; sub_40FFE0+2Ep
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
; int __cdecl _write(int, const	void *,	unsigned int)
		extrn __imp__write:dword ; DATA	XREF: _writer

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp___getmainargs:dword	; DATA XREF: __getmainargsr
		extrn __initenv:dword	; DATA XREF: sub_401190+23Dr
		extrn __lconv_init:dword ; DATA	XREF: sub_40EF30+3r
		extrn __imp___set_app_type:dword ; DATA	XREF: __set_app_typer
		extrn __setusermatherr:dword ; CODE XREF: sub_401060+F7p
					; DATA XREF: sub_401060+F7r
		extrn _acmdln:dword	; DATA XREF: sub_401190+164r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; void __cdecl _cexit()
		extrn __imp__cexit:dword ; DATA	XREF: _cexitr
; int fmode
		extrn _fmode:dword	; DATA XREF: sub_401060+6Fr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
; FILE iob[]
		extrn _iob:dword	; DATA XREF: sub_4017F0+245r
					; sub_403F00+C1Fr ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_40EF60+A3p
					; DATA XREF: sub_40EF60+A3r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void __cdecl __noreturn abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t, size_t)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; void __cdecl __noreturn exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
; int fprintf(FILE *, const char *, ...)
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; int __cdecl fputc(int, FILE *)
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; int __cdecl fputs(const char *, FILE *)
		extrn __imp_fputs:dword	; DATA XREF: fputsr
; void __cdecl free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *, size_t, size_t, FILE *)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; int printf(const char	*, ...)
		extrn __imp_printf:dword ; DATA	XREF: printfr
; int __cdecl puts(const char *)
		extrn __imp_puts:dword	; DATA XREF: putsr
; void *__cdecl	realloc(void *,	size_t)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
; void (__cdecl	*__cdecl signal(int, void (__cdecl *)(int)))(int)
		extrn __imp_signal:dword ; DATA	XREF: signalr
; int sprintf(char *, const char *, ...)
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
; int __cdecl strcmp(const char	*, const char *)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; char *__cdecl	strcpy(char *, const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl strlen(const char *)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *, const char *, size_t)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; int __cdecl vfprintf(FILE *, const char *, va_list)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr

;
; Imports from libgcc_s_sjlj-1.dll
;
		extrn __imp__Unwind_SjLj_Resume:dword ;	DATA XREF: _Unwind_SjLj_Resumer
		extrn __imp__Unwind_SjLj_Register:dword	; DATA XREF: _Unwind_SjLj_Registerr
		extrn __imp__Unwind_SjLj_Unregister:dword
					; DATA XREF: _Unwind_SjLj_Unregisterr
		extrn __imp__Unwind_GetTextRelBase:dword
					; DATA XREF: _Unwind_GetTextRelBaser
		extrn __imp__Unwind_GetDataRelBase:dword
					; DATA XREF: _Unwind_GetDataRelBaser
		extrn __imp__Unwind_GetRegionStart:dword
					; DATA XREF: _Unwind_GetRegionStartr
		extrn __imp__Unwind_GetLanguageSpecificData:dword
					; DATA XREF: _Unwind_GetLanguageSpecificDatar
		extrn __imp__Unwind_GetIPInfo:dword ; DATA XREF: _Unwind_GetIPInfor
		extrn __imp__Unwind_SetGR:dword	; DATA XREF: _Unwind_SetGRr
		extrn __imp__Unwind_SetIP:dword	; DATA XREF: _Unwind_SetIPr
		extrn __imp__Unwind_DeleteException:dword
					; DATA XREF: _Unwind_DeleteExceptionr
		extrn __imp__Unwind_SjLj_Resume_or_Rethrow:dword
					; DATA XREF: _Unwind_SjLj_Resume_or_Rethrowr
		extrn __imp__Unwind_SjLj_RaiseException:dword
					; DATA XREF: _Unwind_SjLj_RaiseExceptionr


; Section 6. (virtual address 00021000)
; Virtual size			: 00000034 (	 52.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 0001D400
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 421000h
dword_421000	dd 0			; DATA XREF: sub_401190+2D8o
		dd offset sub_401010
dword_421008	dd 0			; DATA XREF: sub_401190:loc_401460o
dword_42100C	dd 0			; DATA XREF: sub_401190+337o
		dd offset sub_401060
		dd offset sub_40EF30
dword_421018	dd 2 dup(0)		; DATA XREF: sub_401190+32Fo
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 10h
dword_421030	dd 74h dup(0)		; DATA XREF: TlsCallback_0:loc_40EEE1o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 7. (virtual address 00022000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 0001D600
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 422000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end start
