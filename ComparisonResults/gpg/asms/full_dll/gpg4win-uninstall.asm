;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0DEFCF0DE7358E5DFF583A52B49A0684
; Input	CRC32 :	94CDCB64

; File Name   :	C:\compspace\compare\gpg\dlls\full\gpg4win-uninstall.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000930C (  37644.)
; Section size in file		: 00009400 (  37888.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_401000(HWND, UINT Msg, WPARAM wParam, LPARAM lParam)
sub_401000	proc near		; DATA XREF: sub_4065F8+25Eo

hWnd		= dword	ptr -0A8h
lpPaint		= dword	ptr -0A4h
hbr		= dword	ptr -0A0h
lprc		= dword	ptr -9Ch
format		= dword	ptr -98h
h		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
Paint		= tagPAINTSTRUCT ptr -74h
Rect		= tagRECT ptr -34h
plbrush		= LOGBRUSH ptr -24h
arg_0		= dword	ptr  8
Msg		= dword	ptr  0Ch
wParam		= dword	ptr  10h
lParam		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 9Ch
		mov	edx, [ebp+Msg]
		mov	eax, [ebp+lParam]
		cmp	edx, 0Fh
		jz	short loc_401032
		cmp	edx, 46h
		jnz	loc_4011F8
		mov	ecx, ds:hwnd
		or	dword ptr [eax+18h], 10h
		mov	[eax+4], ecx
		jmp	loc_4011F8
; ---------------------------------------------------------------------------

loc_401032:				; CODE XREF: sub_401000+15j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Paint]
		mov	esi, ds:dword_428B48
		mov	[esp+0A8h+lpPaint], eax	; lpPaint
		mov	[esp+0A8h+hWnd], ecx ; hWnd
		call	ds:BeginPaint
		mov	ecx, [ebp+arg_0]
		mov	[ebp+plbrush.lbStyle], 0
		push	ebx
		push	ebx
		mov	ebx, eax
		lea	eax, [ebp+Rect]
		mov	[esp+0A8h+hWnd], ecx ; hWnd
		mov	[esp+0A8h+lpPaint], eax	; lpRect
		call	ds:GetClientRect
		mov	ecx, [ebp+Rect.bottom]
		mov	[ebp+Rect.bottom], 0
		mov	[ebp+var_7C], ecx
		push	edi
		push	edi
		jmp	loc_401120
; ---------------------------------------------------------------------------

loc_40107D:				; CODE XREF: sub_401000+126j
		mov	ecx, [ebp+var_7C]
		sub	ecx, edi
		mov	[ebp+var_80], ecx
		mov	ecx, [esi+54h]
		movzx	edx, ch
		mov	ecx, [esi+50h]
		imul	edx, edi
		movzx	eax, ch
		imul	eax, [ebp+var_80]
		add	eax, edx
		cdq
		idiv	[ebp+var_7C]
		movzx	edx, byte ptr [esi+54h]
		imul	edx, edi
		movzx	ecx, al
		movzx	eax, byte ptr [esi+50h]
		imul	eax, [ebp+var_80]
		shl	ecx, 8
		add	eax, edx
		cdq
		idiv	[ebp+var_7C]
		mov	edx, [esi+50h]
		sar	edx, 10h
		movzx	edx, dl
		imul	edx, [ebp+var_80]
		movzx	eax, al
		or	ecx, eax
		mov	eax, [esi+54h]
		sar	eax, 10h
		movzx	eax, al
		imul	eax, edi
		add	eax, edx
		cdq
		idiv	[ebp+var_7C]
		movzx	eax, al
		shl	eax, 10h
		or	ecx, eax
		lea	eax, [ebp+plbrush]
		mov	[ebp+plbrush.lbColor], ecx
		mov	[esp+0A8h+hWnd], eax ; plbrush
		call	ds:CreateBrushIndirect
		add	[ebp+Rect.bottom], 4
		push	edx
		mov	edi, eax
		mov	[esp+0A8h+hbr],	eax ; hbr
		lea	eax, [ebp+Rect]
		mov	[esp+0A8h+lpPaint], eax	; lprc
		mov	[esp+0A8h+hWnd], ebx ; hDC
		call	ds:FillRect
		sub	esp, 0Ch
		mov	[esp+0A8h+hWnd], edi ; ho
		call	ds:DeleteObject
		add	[ebp+Rect.top],	4
		push	ecx

loc_401120:				; CODE XREF: sub_401000+78j
		mov	edi, [ebp+Rect.top]
		cmp	edi, [ebp+var_7C]
		jl	loc_40107D
		cmp	dword ptr [esi+58h], 0FFFFFFFFh
		jz	loc_4011DF
		mov	eax, [esi+34h]
		mov	[esp+0A8h+hWnd], eax ; lplf
		call	ds:CreateFontIndirectA
		test	eax, eax
		push	edi
		mov	edi, eax
		jz	loc_4011DF
		mov	[esp+0A8h+hWnd], ebx ; hdc
		mov	[ebp+Rect.left], 10h
		mov	[ebp+Rect.top],	8
		mov	[esp+0A8h+lpPaint], 1 ;	mode
		call	ds:SetBkMode
		push	edx
		push	edx
		mov	eax, [esi+58h]
		mov	[esp+0A8h+hWnd], ebx ; hdc
		mov	[esp+0A8h+lpPaint], eax	; color
		call	ds:SetTextColor
		mov	esi, ds:SelectObject
		push	ecx
		push	ecx
		mov	[esp+0A8h+hWnd], ebx ; hdc
		mov	[esp+0A8h+lpPaint], edi	; h
		call	esi ; SelectObject
		push	edx
		push	edx
		mov	edx, eax
		lea	eax, [ebp+Rect]
		mov	[esp+0A8h+hWnd], ebx ; hdc
		mov	[ebp+h], edx
		mov	[esp+0A8h+format], 820h	; format
		mov	[esp+0A8h+lprc], eax ; lprc
		mov	[esp+0A8h+hbr],	0FFFFFFFFh ; cchText
		mov	[esp+0A8h+lpPaint], offset chText ; lpchText
		call	ds:DrawTextA
		mov	edx, [ebp+h]
		sub	esp, 14h
		mov	[esp+0A8h+lpPaint], edx	; h
		mov	[esp+0A8h+hWnd], ebx ; hdc
		call	esi ; SelectObject
		push	ecx
		push	ecx
		mov	[esp+0A8h+hWnd], edi ; ho
		call	ds:DeleteObject
		push	ebx

loc_4011DF:				; CODE XREF: sub_401000+130j
					; sub_401000+147j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Paint]
		mov	[esp+0A8h+lpPaint], eax	; lpPaint
		mov	[esp+0A8h+hWnd], ecx ; hWnd
		call	ds:EndPaint
		push	eax
		push	eax
		xor	eax, eax
		jmp	short loc_401216
; ---------------------------------------------------------------------------

loc_4011F8:				; CODE XREF: sub_401000+1Aj
					; sub_401000+2Dj
		mov	[esp+0A8h+lprc], eax ; lParam
		mov	ecx, [ebp+arg_0]
		mov	eax, [ebp+wParam]
		mov	[esp+0A8h+lpPaint], edx	; Msg
		mov	[esp+0A8h+hWnd], ecx ; hWnd
		mov	[esp+0A8h+hbr],	eax ; wParam
		call	ds:DefWindowProcA
		sub	esp, 10h

loc_401216:				; CODE XREF: sub_401000+1F6j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_401000	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401220	proc near		; CODE XREF: sub_40164F+263Fp
					; sub_406B2B+4D6p

arg_0		= dword	ptr  8

		push	ebp
		mov	ecx, ds:dword_428B54
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [ebp+arg_0]
		imul	esi, ebx, 418h
		mov	edi, [ecx+esi+8]
		test	edi, 2
		jz	short loc_401288
		inc	ebx
		xor	edx, edx
		xor	eax, eax
		add	esi, ecx
		and	edi, 1
		jmp	short loc_401280
; ---------------------------------------------------------------------------

loc_40124D:				; CODE XREF: sub_401220+66j
		mov	ecx, [esi+edx+420h]
		test	cl, 2
		jz	short loc_40125C
		inc	eax
		jmp	short loc_401279
; ---------------------------------------------------------------------------

loc_40125C:				; CODE XREF: sub_401220+37j
		test	cl, 4
		jz	short loc_401268
		test	eax, eax
		jz	short loc_401288
		dec	eax
		jmp	short loc_401279
; ---------------------------------------------------------------------------

loc_401268:				; CODE XREF: sub_401220+3Fj
		test	cl, 10h
		jnz	short loc_401279
		and	ecx, 0FFFFFFFEh
		or	ecx, edi
		mov	[esi+edx+420h],	ecx

loc_401279:				; CODE XREF: sub_401220+3Aj
					; sub_401220+46j ...
		inc	ebx
		add	edx, 418h

loc_401280:				; CODE XREF: sub_401220+2Bj
		cmp	ebx, ds:dword_428B58
		jb	short loc_40124D

loc_401288:				; CODE XREF: sub_401220+1Fj
					; sub_401220+43j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
sub_401220	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40128F	proc near		; CODE XREF: sub_40128F+5Ap
					; sub_40164F+2686p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [ebp+arg_0]
		mov	edx, ds:dword_428B54
		imul	ebx, eax, 418h
		mov	[ebp+var_1C], edx
		add	ebx, edx
		mov	edx, [ebx+8]
		test	dl, 2
		jz	short loc_4012C1
		cmp	[ebp+arg_4], 0
		jz	short loc_4012C1
		and	edx, 0FFFFFFBEh
		inc	eax
		mov	[ebx+8], edx

loc_4012C1:				; CODE XREF: sub_40128F+23j
					; sub_40128F+29j
		xor	edi, edi
		xor	esi, esi
		jmp	short loc_40132B
; ---------------------------------------------------------------------------

loc_4012C7:				; CODE XREF: sub_40128F+A2j
		imul	edx, eax, 418h
		add	edx, [ebp+var_1C]
		mov	ecx, [edx+8]
		test	cl, 2
		jnz	short loc_4012DB
		inc	eax
		jmp	short loc_4012F6
; ---------------------------------------------------------------------------

loc_4012DB:				; CODE XREF: sub_40128F+47j
		mov	[ebp+var_20], edx
		mov	[esp+38h+var_34], 1
		mov	[esp+38h+var_38], eax
		call	sub_40128F
		push	edx
		push	edx
		mov	edx, [ebp+var_20]
		mov	ecx, [edx+8]

loc_4012F6:				; CODE XREF: sub_40128F+4Aj
		test	cl, 4
		jz	short loc_401317
		test	esi, esi
		jz	short loc_401335
		test	edi, edi
		jz	short loc_401309
		or	dword ptr [ebx+8], 40h
		jmp	short loc_401335
; ---------------------------------------------------------------------------

loc_401309:				; CODE XREF: sub_40128F+72j
		mov	edx, [ebx+8]
		or	edx, 1
		and	dl, 7Fh
		mov	[ebx+8], edx
		jmp	short loc_401335
; ---------------------------------------------------------------------------

loc_401317:				; CODE XREF: sub_40128F+6Aj
		mov	edx, ecx
		and	edx, 40h
		cmp	edx, 1
		sbb	esi, 0FFFFFFFFh
		and	cl, 1
		jz	short loc_40132A
		inc	esi
		jmp	short loc_40132B
; ---------------------------------------------------------------------------

loc_40132A:				; CODE XREF: sub_40128F+96j
		inc	edi

loc_40132B:				; CODE XREF: sub_40128F+36j
					; sub_40128F+99j
		cmp	eax, ds:dword_428B58
		jb	short loc_4012C7
		xor	eax, eax

loc_401335:				; CODE XREF: sub_40128F+6Ej
					; sub_40128F+78j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_40128F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40133F	proc near		; CODE XREF: sub_40164F+2671p
					; sub_406B2B+5FDp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	edx, ds:dword_428B54
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	ebx
		cmp	ecx, 1Fh
		ja	short loc_401383
		mov	eax, 1
		shl	eax, cl
		xor	ecx, ecx
		jmp	short loc_40137B
; ---------------------------------------------------------------------------

loc_40135C:				; CODE XREF: sub_40133F+42j
		mov	ebx, [edx+8]
		test	bl, 6
		jnz	short loc_401374
		test	[edx+4], eax
		jz	short loc_40136E
		or	ebx, 1
		jmp	short loc_401371
; ---------------------------------------------------------------------------

loc_40136E:				; CODE XREF: sub_40133F+28j
		and	ebx, 0FFFFFFFEh

loc_401371:				; CODE XREF: sub_40133F+2Dj
		mov	[edx+8], ebx

loc_401374:				; CODE XREF: sub_40133F+23j
		inc	ecx
		add	edx, 418h

loc_40137B:				; CODE XREF: sub_40133F+1Bj
		cmp	ecx, ds:dword_428B58
		jb	short loc_40135C

loc_401383:				; CODE XREF: sub_40133F+10j
		pop	ebx
		pop	ebp
		retn	4
sub_40133F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401388	proc near		; CODE XREF: sub_40164F+269Bp
					; sub_406B2B+701p

var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, ds:dword_428B54
		mov	edx, ds:dword_428B58
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	eax, ds:dword_428B48
		mov	[ebp+var_14], edx

loc_4013AC:				; CODE XREF: sub_401388+7Bj
		cmp	dword ptr [eax+ecx*4+94h], 0
		jz	short loc_4013FF
		mov	edx, 1
		mov	ebx, [ebp+var_10]
		shl	edx, cl
		mov	[ebp+var_18], edx
		xor	edx, edx
		mov	[ebp+var_20], eax
		jmp	short loc_4013F5
; ---------------------------------------------------------------------------

loc_4013CA:				; CODE XREF: sub_401388+70j
		mov	esi, [ebx+8]
		test	esi, 6
		jnz	short loc_4013EE
		test	edi, edi
		jz	short loc_4013DF
		cmp	dword ptr [edi+edx*4], 0
		jz	short loc_4013EE

loc_4013DF:				; CODE XREF: sub_401388+4Fj
		mov	eax, [ebp+var_18]
		and	esi, 1
		and	eax, [ebx+4]
		shl	esi, cl
		cmp	eax, esi
		jnz	short loc_4013FC

loc_4013EE:				; CODE XREF: sub_401388+4Bj
					; sub_401388+55j
		inc	edx
		add	ebx, 418h

loc_4013F5:				; CODE XREF: sub_401388+40j
		cmp	edx, [ebp+var_14]
		jnz	short loc_4013CA
		jmp	short loc_401405
; ---------------------------------------------------------------------------

loc_4013FC:				; CODE XREF: sub_401388+64j
		mov	eax, [ebp+var_20]

loc_4013FF:				; CODE XREF: sub_401388+2Cj
		inc	ecx
		cmp	ecx, 20h
		jnz	short loc_4013AC

loc_401405:				; CODE XREF: sub_401388+72j
		add	esp, 14h
		mov	eax, ecx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
sub_401388	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401414	proc near		; CODE XREF: sub_40148F+14p
					; sub_40164F+85p ...

lpszStart	= dword	ptr -28h
var_24		= dword	ptr -24h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		cdq
		mov	ebp, esp
		push	ebx
		mov	ebx, eax
		mov	eax, edx
		sub	esp, 24h
		xor	eax, ebx
		sub	eax, edx
		mov	edx, ds:dword_40F000
		mov	ecx, eax
		and	ecx, 0Fh
		sar	eax, 4
		mov	edx, [edx+ecx*4]
		shl	eax, 0Ah
		add	eax, offset dword_40F004
		mov	[esp+28h+lpszStart], eax ; LPSTR
		mov	[esp+28h+var_24], edx ;	int
		call	sub_4083A6
		test	ebx, ebx
		push	edx
		push	edx
		jns	short loc_40145E
		mov	[esp+28h+lpszStart], eax ; lpszStart
		mov	[ebp+var_C], eax
		call	sub_4082D2
		push	eax
		mov	eax, [ebp+var_C]

loc_40145E:				; CODE XREF: sub_401414+39j
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_401414	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401463	proc near		; CODE XREF: sub_40164F+14Cp
					; sub_40164F+1BAp ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	edx, ds:dword_40F000
		mov	eax, [edx+eax*4]
		mov	[esp+18h+var_18], 0 ; LPSTR
		mov	[esp+18h+var_14], eax ;	int
		call	sub_4083A6
		push	ecx
		push	ecx
		mov	[esp+18h+var_18], eax
		call	sub_4081F5
		push	edx
		leave
		retn
sub_401463	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40148F	proc near		; CODE XREF: sub_40164F+1AE1p
					; sub_40164F+1DE0p ...

hKey		= dword	ptr -38h
lpSubKey	= dword	ptr -34h
ulOptions	= dword	ptr -30h
samDesired	= dword	ptr -2Ch
phkResult	= dword	ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	ebx, ds:dword_428B38
		or	ebx, eax
		mov	eax, 22h
		call	sub_401414
		mov	edx, ds:dword_40F000
		mov	edx, [edx+4]
		test	edx, edx
		jnz	short loc_4014C1
		mov	edx, ds:dword_428B0C
		sub	edx, 7FFFFFFFh

loc_4014C1:				; CODE XREF: sub_40148F+24j
		lea	ecx, [ebp+var_C]
		mov	[esp+38h+samDesired], ebx ; samDesired
		mov	[esp+38h+hKey],	edx ; hKey
		mov	[esp+38h+phkResult], ecx ; phkResult
		mov	[esp+38h+ulOptions], 0 ; ulOptions
		mov	[esp+38h+lpSubKey], eax	; lpSubKey
		call	ds:RegOpenKeyExA
		xor	edx, edx
		mov	ebx, [ebp+var_4]
		sub	esp, 14h
		test	eax, eax
		cmovz	edx, [ebp+var_C]
		leave
		mov	eax, edx
		retn
sub_40148F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4014F3	proc near		; CODE XREF: sub_4014F3+6Ep
					; sub_40164F+1B78p

hKey		= dword	ptr -158h
lpSubKey	= dword	ptr -154h
ulOptions	= dword	ptr -150h
samDesired	= dword	ptr -14Ch
phkResult	= dword	ptr -148h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_121		= byte ptr -121h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 14Ch
		lea	eax, [ebp+var_1C]
		mov	[esp+158h+phkResult], eax ; phkResult
		mov	eax, ds:dword_428B38
		mov	[ebp+var_130], ecx
		mov	[esp+158h+ulOptions], 0	; ulOptions
		mov	[esp+158h+lpSubKey], edx ; lpSubKey
		or	eax, 8
		mov	[esp+158h+samDesired], eax ; samDesired
		mov	[esp+158h+hKey], esi ; hKey
		call	ds:RegOpenKeyExA
		sub	esp, 14h
		test	eax, eax
		jz	short loc_40156C
		jmp	loc_401607
; ---------------------------------------------------------------------------

loc_40153D:				; CODE XREF: sub_4014F3+AFj
		cmp	[ebp+var_130], 0
		mov	eax, [ebp+var_1C]
		jz	short loc_40155D
		mov	[esp+158h+hKey], eax ; hKey
		call	ds:RegCloseKey
		mov	eax, 1
		push	ecx
		jmp	loc_401607
; ---------------------------------------------------------------------------

loc_40155D:				; CODE XREF: sub_4014F3+54j
		xor	ecx, ecx
		mov	edx, edi
		call	sub_4014F3
		test	eax, eax
		jz	short loc_40157D
		jmp	short loc_4015A4
; ---------------------------------------------------------------------------

loc_40156C:				; CODE XREF: sub_4014F3+43j
		mov	eax, ds:RegEnumKeyA
		lea	edi, [ebp+var_121]
		mov	[ebp+var_12C], eax

loc_40157D:				; CODE XREF: sub_4014F3+75j
		mov	eax, [ebp+var_1C]
		mov	[esp+158h+samDesired], 105h
		mov	[esp+158h+ulOptions], edi
		mov	[esp+158h+lpSubKey], 0
		mov	[esp+158h+hKey], eax
		call	[ebp+var_12C]
		sub	esp, 10h
		test	eax, eax
		jz	short loc_40153D

loc_4015A4:				; CODE XREF: sub_4014F3+77j
		mov	eax, [ebp+var_1C]
		mov	[esp+158h+hKey], eax ; hKey
		call	ds:RegCloseKey
		push	edi
		mov	[esp+158h+hKey], 4
		call	sub_40894A
		test	eax, eax
		push	edx
		jz	short loc_4015E2
		mov	edx, ds:dword_428B38
		mov	[esp+158h+samDesired], 0
		mov	[esp+158h+lpSubKey], ebx
		mov	[esp+158h+hKey], esi
		mov	[esp+158h+ulOptions], edx
		call	eax
		sub	esp, 10h
		jmp	short loc_401607
; ---------------------------------------------------------------------------

loc_4015E2:				; CODE XREF: sub_4014F3+CDj
		cmp	ds:dword_428B38, 0
		mov	eax, 1
		jnz	short loc_401607
		mov	[esp+158h+lpSubKey], ebx ; lpSubKey
		mov	[esp+158h+hKey], esi ; hKey
		call	ds:RegDeleteKeyA
		test	eax, eax
		push	ecx
		setnz	al
		push	ecx
		movzx	eax, al

loc_401607:				; CODE XREF: sub_4014F3+45j
					; sub_4014F3+65j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4014F3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40160F	proc near		; CODE XREF: sub_40164F+E7p
					; sub_403DAD+34p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jns	short locret_40162C
		not	eax
		shl	eax, 0Ah
		add	eax, offset dword_42D000
		mov	[ebp+arg_0], eax
		leave
		jmp	sub_4081F5
; ---------------------------------------------------------------------------

locret_40162C:				; CODE XREF: sub_40160F+8j
		leave
		retn	4
sub_40160F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401630	proc near		; CODE XREF: sub_40164F+3A7p
					; sub_40164F+3D5p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_14], offset byte_40F404
		mov	[esp+18h+var_18], eax
		call	sub_407538
		push	eax
		push	eax
		leave
		retn	4
sub_401630	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40164F	proc near		; CODE XREF: sub_403DAD+25p

var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
CodePage	= dword	ptr -220h
dwFlags		= dword	ptr -21Ch
lpMultiByteStr	= dword	ptr -218h
cbMultiByte	= dword	ptr -214h
lpWideCharStr	= dword	ptr -210h
cchWideChar	= dword	ptr -20Ch
var_204		= dword	ptr -204h
hMem		= dword	ptr -200h
var_1FC		= dword	ptr -1FCh
var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
lpFileName	= dword	ptr -1E0h
lpFileTime2	= dword	ptr -1DCh
nExitCode	= dword	ptr -1D8h
nCmdShow	= dword	ptr -1D4h
lpBuffer	= dword	ptr -1D0h
lpFilePart	= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
uTimeout	= dword	ptr -1C4h
lpdwResult	= dword	ptr -1C0h
phkResult	= dword	ptr -1BCh
lpdwDisposition	= dword	ptr -1B8h
var_1A4		= dword	ptr -1A4h
lpString1	= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
hWnd		= dword	ptr -194h
lpszShortPath	= dword	ptr -190h
var_18C		= dword	ptr -18Ch
Rect		= tagRECT ptr -180h
var_170		= word ptr -170h
var_166		= dword	ptr -166h
var_154		= byte ptr -154h
var_40		= dword	ptr -40h
hKey		= dword	ptr -3Ch
dwFileAttributes= dword	ptr -38h
nNumberOfBytesToRead= dword ptr	-34h
FileTime2	= FILETIME ptr -30h
var_28		= dword	ptr -28h
FilePart	= dword	ptr -24h
Default		= byte ptr -20h
ppv		= dword	ptr -1Ch

		push	ebp
		mov	ecx, 7
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 1CCh
		mov	edx, ds:hwnd
		lea	edi, [ebp+var_40]
		mov	[ebp+hWnd], edx
		rep movsd
		mov	eax, [ebp+dwFileAttributes]
		mov	esi, [ebp+hKey]
		mov	edx, eax
		shl	edx, 0Ah
		mov	ebx, esi
		mov	[ebp+var_198], edx
		add	edx, offset dword_42D000
		mov	[ebp+lpszShortPath], edx
		lea	edx, [ebp+hKey]
		mov	ds:dword_40F000, edx
		mov	edx, [ebp+var_40]
		shl	ebx, 0Ah
		lea	edi, dword_42D000[ebx]
		sub	edx, 2		; switch 67 cases
		cmp	edx, 42h
		ja	loc_403D97	; jumptable 004016B3 default case
		jmp	ds:off_40C5FC[edx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_4016BA:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	[esp+1D8h+nCmdShow], esi ; jumptable 004016B3 case 2
		mov	[esp+1D8h+nExitCode], offset aJumpD ; "Jump: %d"
		call	sub_408780
		mov	eax, [ebp+hKey]
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_4016D2:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 3
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aAbortingS	; "Aborting: \"%s\""
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		mov	eax, [ebp+hKey]
		mov	[esp+1D8h+nCmdShow], 0
		mov	[esp+1D8h+nExitCode], eax
		jmp	loc_401E80
; ---------------------------------------------------------------------------

loc_4016FC:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		inc	ds:dword_4293A8	; jumptable 004016B3 case 4
		mov	eax, 7FFFFFFFh
		cmp	[ebp+hWnd], 0
		jz	loc_403DA5
		mov	[ebp+lpString1], eax
		mov	[esp+1D8h+nExitCode], 0	; nExitCode
		call	ds:PostQuitMessage
		mov	eax, [ebp+lpString1]
		push	ebx
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_401733:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	[esp+1D8h+nExitCode], esi ; jumptable 004016B3 case 5
		call	sub_40160F
		lea	ebx, [eax-1]
		push	edx
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+nExitCode], offset aCallD ; "Call: %d"
		call	sub_408780
		mov	[esp+1D8h+nCmdShow], 0 ; hWnd
		mov	[esp+1D8h+nExitCode], ebx ; int
		call	sub_403DAD
		push	ecx
		push	ecx
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_401766:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 6
		xor	esi, esi
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aDetailprintS ; "detailprint: %s"
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		mov	eax, [ebp+hKey]
		mov	[esp+1D8h+nCmdShow], 0
		mov	[esp+1D8h+nExitCode], eax
		call	sub_407538
		push	eax		; char
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401799:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 7
		call	sub_401463
		mov	[esp+1D8h+nExitCode], offset aSleepD ; "Sleep(%d)"
		mov	ebx, eax
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		test	ebx, ebx
		mov	edx, 1
		cmovg	edx, ebx
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], edx ; dwMilliseconds
		call	ds:Sleep
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4017CD:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	[esp+1D8h+nExitCode], offset aBringtofront ; jumptable 004016B3	case 8
		xor	esi, esi
		call	sub_408780
		mov	ebx, [ebp+hWnd]
		mov	[esp+1D8h+nExitCode], ebx ; hWnd
		call	ds:SetForegroundWindow
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4017F0:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		cmp	[ebp+nNumberOfBytesToRead], 0 ;	jumptable 004016B3 case	13
		jnz	short loc_40181C
		mov	eax, ds:dword_428B08[esi*4]
		mov	ds:dword_428AD0[esi*4],	eax
		mov	eax, 1
		call	sub_401463
		mov	ds:dword_428B08[esi*4],	eax
		xor	esi, esi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40181C:				; CODE XREF: sub_40164F+1A5j
		mov	eax, ds:dword_428AD0[esi*4]
		mov	ds:dword_428B08[esi*4],	eax
		xor	esi, esi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401831:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	edx, [ebp+nNumberOfBytesToRead]	; jumptable 004016B3 case 14
		xor	eax, eax
		mov	ecx, ds:dword_428B08[edx*4]
		test	ecx, ecx
		setz	al
		and	ecx, [ebp+FileTime2.dwLowDateTime]
		mov	eax, [ebp+eax*4+hKey]
		mov	ds:dword_428B08[edx*4],	ecx
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_401855:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, ds:dword_428B08[eax*4] ; jumptable	004016B3 case 15
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		mov	[esp+1D8h+nCmdShow], eax ; int
		call	sub_4081D0
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401871:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	edx, ds:hWnd	; jumptable 004016B3 case 9
		test	edx, edx
		jz	short loc_40188A
		mov	[esp+1D8h+nCmdShow], eax ; nCmdShow
		mov	[esp+1D8h+nExitCode], edx ; hWnd
		call	ds:ShowWindow
		push	eax
		push	eax

loc_40188A:				; CODE XREF: sub_40164F+22Aj
		mov	eax, ds:dword_4293B0
		xor	esi, esi
		test	eax, eax
		jz	loc_403D9D
		mov	edx, [ebp+hKey]
		mov	[esp+1D8h+nExitCode], eax ; hWnd
		mov	[esp+1D8h+nCmdShow], edx ; nCmdShow
		call	ds:ShowWindow
		push	edi
		push	edi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4018B0:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFF0h	; jumptable 004016B3 case 10
		xor	esi, esi
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aSetfileattribu ; "SetFileAttributes: \"%s\":%08X"
		mov	ebx, eax
		mov	eax, [ebp+dwFileAttributes]
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+lpBuffer], eax
		call	sub_408780
		mov	eax, [ebp+dwFileAttributes]
		mov	[esp+1D8h+nExitCode], ebx ; lpFileName
		mov	[esp+1D8h+nCmdShow], eax ; dwFileAttributes
		call	ds:SetFileAttributesA
		test	eax, eax
		push	ebx		; char
		push	ebx
		jnz	loc_403D9D
		mov	[esp+1D8h+nExitCode], offset aSetfileattri_0 ; "SetFileAttributes failed."
		mov	si, 1
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401904:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFF0h	; jumptable 004016B3 case 11
		xor	esi, esi
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aCreatedirector ; "CreateDirectory: \"%s\"	(%d)"
		mov	ebx, eax
		mov	eax, [ebp+dwFileAttributes]
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+lpBuffer], eax
		call	sub_408780
		mov	[esp+1D8h+nExitCode], ebx ; LPCSTR
		call	sub_407F0F
		test	eax, eax
		push	ecx
		jz	loc_4019E9
		mov	edx, ds:CreateDirectoryA
		mov	[ebp+var_18C], edx

loc_401946:				; CODE XREF: sub_40164F+394j
		mov	[esp+1D8h+nCmdShow], 5Ch ; char
		mov	[esp+1D8h+nExitCode], eax ; LPCSTR
		call	sub_407E73
		push	ecx
		mov	edi, eax
		push	ecx
		mov	cl, [eax]
		mov	byte ptr [eax],	0
		mov	[esp+1D8h+nCmdShow], 0
		mov	byte ptr [ebp+lpszShortPath], cl
		mov	[esp+1D8h+nExitCode], ebx
		call	[ebp+var_18C]
		test	eax, eax
		push	edx
		push	edx
		jnz	short loc_4019C6
		call	ds:GetLastError
		cmp	eax, 0B7h
		jz	short loc_4019A5
		call	ds:GetLastError
		mov	[esp+1E0h+lpFileTime2],	ebx ; char
		mov	[esp+1E0h+lpFileName], offset aCreatedirect_0 ;	"CreateDirectory: can't create \"%s\" (e"...
		mov	[esp+1E0h+nExitCode], eax
		call	sub_408780
		jmp	short loc_4019C3
; ---------------------------------------------------------------------------

loc_4019A5:				; CODE XREF: sub_40164F+338j
		mov	[esp+1E0h+lpFileName], ebx ; lpFileName
		call	ds:GetFileAttributesA
		test	al, 10h
		push	edx
		jnz	short loc_4019D6
		mov	[esp+1E0h+lpFileTime2],	ebx ; char
		mov	[esp+1E0h+lpFileName], offset aCreatedirect_1 ;	"CreateDirectory: can't create \"%s\" - "...
		call	sub_408780

loc_4019C3:				; CODE XREF: sub_40164F+354j
		inc	esi
		jmp	short loc_4019D6
; ---------------------------------------------------------------------------

loc_4019C6:				; CODE XREF: sub_40164F+32Bj
		mov	[esp+1E0h+lpFileTime2],	ebx ; char
		mov	[esp+1E0h+lpFileName], offset aCreatedirect_2 ;	"CreateDirectory: \"%s\" created"
		call	sub_408780

loc_4019D6:				; CODE XREF: sub_40164F+362j
					; sub_40164F+375j
		mov	dl, byte ptr [ebp+lpszShortPath]
		lea	eax, [edi+1]
		test	dl, dl
		mov	[edi], dl
		jnz	loc_401946

loc_4019E9:				; CODE XREF: sub_40164F+2E5j
		cmp	[ebp+dwFileAttributes],	0
		jz	short loc_401A1D
		mov	[esp+1E0h+lpFileName], 0FFFFFFE6h
		call	sub_401630
		push	edi
		mov	[esp+1E0h+lpFileTime2],	ebx ; LPCSTR
		mov	[esp+1E0h+lpFileName], offset Directory	; LPSTR
		call	sub_408294
		push	eax
		push	eax
		mov	[esp+1E0h+lpFileName], ebx ; lpPathName
		call	ds:SetCurrentDirectoryA
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401A1D:				; CODE XREF: sub_40164F+39Ej
		mov	[esp+1E0h+lpFileName], 0FFFFFFF5h
		call	sub_401630
		push	ebx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401A2F:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 12
		call	sub_401414
		mov	ebx, eax
		mov	[esp+1D8h+nExitCode], eax ; LPCSTR
		call	sub_4087D7
		test	eax, eax
		push	ecx
		jz	short loc_401A61
		mov	eax, [ebp+dwFileAttributes]
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+nExitCode], offset aIffileexistsFi ; "IfFileExists: file \"%s\" exists, jumpi"...
		mov	[esp+1D8h+lpBuffer], eax
		call	sub_408780
		jmp	loc_402579
; ---------------------------------------------------------------------------

loc_401A61:				; CODE XREF: sub_40164F+3F4j
		mov	eax, [ebp+nNumberOfBytesToRead]
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+nExitCode], offset aIffileexists_0 ; "IfFileExists: file \"%s\" does not exis"...
		mov	[esp+1D8h+lpBuffer], eax
		call	sub_408780
		jmp	loc_402581
; ---------------------------------------------------------------------------

loc_401A7D:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFD0h	; jumptable 004016B3 case 16
		call	sub_401414
		mov	esi, eax
		mov	eax, 0FFFFFFDFh
		call	sub_401414
		mov	edi, eax
		mov	eax, 13h
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aRenameS ;	"Rename: %s"
		mov	ebx, eax
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		mov	[esp+1D8h+nCmdShow], edi ; lpNewFileName
		mov	[esp+1D8h+nExitCode], esi ; lpExistingFileName
		call	ds:MoveFileA
		test	eax, eax
		push	edx
		push	edx
		jz	short loc_401AD8
		mov	[esp+1D8h+nExitCode], 0FFFFFFE3h
		xor	esi, esi
		call	sub_401630
		push	ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401AD8:				; CODE XREF: sub_40164F+473j
		cmp	[ebp+nNumberOfBytesToRead], 0
		jz	short loc_401B1D
		mov	[esp+1D8h+nExitCode], esi ; LPCSTR
		call	sub_4087D7
		test	eax, eax
		push	edx
		jz	short loc_401B1D
		mov	[esp+1D8h+nExitCode], esi ; LPCSTR
		mov	[esp+1D8h+nCmdShow], edi ; lpszLongPath
		call	sub_408996
		push	ecx
		push	ecx
		mov	[esp+1D8h+nExitCode], 0FFFFFFE4h
		call	sub_401630
		push	esi
		xor	esi, esi
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+nExitCode], offset aRenameOnReboot ; "Rename on reboot: %s"
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401B1D:				; CODE XREF: sub_40164F+48Dj
					; sub_40164F+49Aj
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	esi, 1
		mov	[esp+1D8h+nExitCode], offset aRenameFailedS ; "Rename failed: %s"
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401B37:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 17
		call	sub_401414
		mov	ecx, [ebp+lpszShortPath]
		mov	[esp+1D8h+nCmdShow], 400h ; nBufferLength
		mov	[esp+1D8h+lpBuffer], ecx ; lpBuffer
		mov	ebx, eax
		lea	eax, [ebp+FilePart]
		mov	[esp+1D8h+lpFilePart], eax ; lpFilePart
		mov	[esp+1D8h+nExitCode], ebx ; lpFileName
		call	ds:GetFullPathNameA
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_401B78
		mov	ebx, [ebp+var_198]
		mov	byte ptr ds:dword_42D000[ebx], 0
		jmp	short loc_401BB6
; ---------------------------------------------------------------------------

loc_401B78:				; CODE XREF: sub_40164F+518j
		mov	eax, [ebp+FilePart]
		xor	esi, esi
		cmp	eax, ebx
		jbe	short loc_401BBB
		cmp	byte ptr [eax],	0
		jz	short loc_401BBB
		mov	[esp+1D8h+nExitCode], ebx ; LPCSTR
		call	sub_4087D7
		test	eax, eax
		push	edx
		jz	short loc_401BA9
		add	eax, 2Ch
		mov	[esp+1D8h+nCmdShow], eax ; LPCSTR
		mov	eax, [ebp+FilePart]
		mov	[esp+1D8h+nExitCode], eax ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		jmp	short loc_401BBB
; ---------------------------------------------------------------------------

loc_401BA9:				; CODE XREF: sub_40164F+542j
		mov	esi, [ebp+var_198]
		mov	byte ptr ds:dword_42D000[esi], 0

loc_401BB6:				; CODE XREF: sub_40164F+527j
		mov	esi, 1

loc_401BBB:				; CODE XREF: sub_40164F+530j
					; sub_40164F+535j ...
		cmp	[ebp+nNumberOfBytesToRead], 0
		jnz	loc_403D9D
		mov	edx, [ebp+lpszShortPath]
		mov	[esp+1D8h+lpBuffer], 400h ; cchBuffer
		mov	[esp+1D8h+nCmdShow], edx ; lpszShortPath
		mov	[esp+1D8h+nExitCode], edx ; lpszLongPath
		call	ds:GetShortPathNameA
		sub	esp, 0Ch
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401BE8:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		or	eax, 0FFFFFFFFh	; jumptable 004016B3 case 18
		xor	esi, esi
		call	sub_401414
		lea	edx, [ebp+FilePart]
		mov	[esp+1D8h+uTimeout], edx ; lpFilePart
		mov	[esp+1D8h+var_1C8], edi	; lpBuffer
		mov	[esp+1D8h+lpFilePart], 400h ; nBufferLength
		mov	[esp+1D8h+lpBuffer], 0 ; lpExtension
		mov	[esp+1D8h+nExitCode], 0	; lpPath
		mov	[esp+1D8h+nCmdShow], eax ; lpFileName
		call	ds:SearchPathA
		sub	esp, 18h
		test	eax, eax
		jnz	loc_403D9D
		mov	byte ptr ds:dword_42D000[ebx], 0
		mov	si, 1
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401C39:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFEFh	; jumptable 004016B3 case 19
		call	sub_401414
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		mov	[esp+1D8h+nCmdShow], eax ; LPCSTR
		call	sub_4080B5
		xor	ecx, ecx
		test	eax, eax
		push	edi
		setz	cl
		push	edi
		mov	esi, ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401C5F:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 31h	; jumptable 004016B3 case 20
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aFileOverwritef ; "File: overwriteflag=%d,	allowskipfilesf"...
		mov	edi, eax
		mov	eax, [ebp+hKey]
		mov	[esp+1D8h+lpFilePart], edi
		mov	ebx, eax
		sar	eax, 3
		and	ebx, 7
		and	eax, 2
		mov	[esp+1D8h+lpBuffer], eax
		mov	[esp+1D8h+nCmdShow], ebx ; char
		call	sub_408780
		mov	[esp+1D8h+nExitCode], edi
		call	sub_407EE1
		test	eax, eax
		push	esi
		jz	short loc_401CB0
		mov	[esp+1D8h+nCmdShow], edi ; LPCSTR
		mov	[esp+1D8h+nExitCode], offset dword_40F004 ; LPSTR
		call	sub_408294
		jmp	short loc_401CDB
; ---------------------------------------------------------------------------

loc_401CB0:				; CODE XREF: sub_40164F+64Dj
		mov	[esp+1D8h+nCmdShow], offset Directory ;	LPCSTR
		mov	[esp+1D8h+nExitCode], offset dword_40F004 ; LPSTR
		call	sub_408294
		push	edx
		push	edx
		mov	[esp+1D8h+nExitCode], eax ; lpszStart
		call	sub_407E2D
		push	ecx
		mov	[esp+1D8h+nCmdShow], edi
		mov	[esp+1D8h+nExitCode], eax
		call	sub_4082C7

loc_401CDB:				; CODE XREF: sub_40164F+65Fj
		push	esi
		push	esi
		mov	[esp+1E0h+lpFileName], offset dword_40F004 ; lpszStart
		call	sub_4082D2
		cmp	ebx, 2
		push	eax
		jle	short loc_401D2A
		mov	[esp+1E0h+lpFileName], offset dword_40F004 ; LPCSTR
		call	sub_4087D7
		xor	edx, edx
		test	eax, eax
		push	ecx
		jz	short loc_401D19
		lea	edx, [ebp+FileTime2]
		add	eax, 14h
		mov	[esp+1E0h+lpFileTime2],	edx ; lpFileTime2
		mov	[esp+1E0h+lpFileName], eax ; lpFileTime1
		call	ds:CompareFileTime
		push	edx
		push	edx
		mov	edx, eax

loc_401D19:				; CODE XREF: sub_40164F+6B1j
		sub	ebx, 3
		or	ebx, 80000000h
		test	edx, ebx
		setz	bl
		movzx	ebx, bl

loc_401D2A:				; CODE XREF: sub_40164F+69Ej
		test	ebx, ebx
		jnz	short loc_401D42

loc_401D2E:				; CODE XREF: sub_40164F+7FAj
		mov	[esp+1E0h+lpFileName], offset dword_40F004 ; LPCSTR
		call	sub_408027
		mov	eax, 2
		push	esi
		jmp	short loc_401D4B
; ---------------------------------------------------------------------------

loc_401D42:				; CODE XREF: sub_40164F+6DDj
		xor	eax, eax
		cmp	ebx, 1
		setnz	al
		inc	eax

loc_401D4B:				; CODE XREF: sub_40164F+6F1j
		mov	[esp+1E0h+nExitCode], eax ; DWORD
		mov	[esp+1E0h+lpFileTime2],	40000000h ; DWORD
		mov	[esp+1E0h+lpFileName], offset dword_40F004 ; LPCSTR
		call	sub_408059
		sub	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		mov	esi, eax
		jnz	loc_401E91
		test	ebx, ebx
		jz	short loc_401DAE
		mov	[esp+1E0h+lpFileTime2],	edi
		mov	[esp+1E0h+lpFileName], 0FFFFFFE2h
		call	sub_407538
		xor	eax, eax
		cmp	ebx, 2
		setz	al
		mov	esi, eax
		push	ecx
		push	ecx
		mov	[esp+1E0h+nExitCode], ebx
		mov	[esp+1E0h+lpFileTime2],	offset dword_40F004 ; char
		mov	[esp+1E0h+lpFileName], offset aFileSkippedSOv ;	"File: skipped:	\"%s\" (overwriteflag=%d"...
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401DAE:				; CODE XREF: sub_40164F+724j
		mov	[esp+1E0h+lpFileTime2],	offset dword_40F004 ; char
		mov	[esp+1E0h+lpFileName], offset aFileErrorCreat ;	"File: error creating \"%s\""
		call	sub_408780
		mov	[esp+1E0h+lpFileTime2],	offset dword_42D000 ; LPCSTR
		mov	[esp+1E0h+lpFileName], offset Buffer ; LPSTR
		call	sub_408294
		push	edx
		push	edx
		mov	[esp+1E0h+lpFileTime2],	offset dword_40F004 ; LPCSTR
		mov	[esp+1E0h+lpFileName], offset dword_42D000 ; LPSTR
		call	sub_408294
		mov	eax, [ebp+var_28]
		push	ecx
		push	ecx
		mov	[esp+1E0h+lpFileTime2],	eax ; int
		mov	[esp+1E0h+lpFileName], offset byte_40F404 ; LPSTR
		call	sub_4083A6
		push	esi
		push	esi
		mov	[esp+1E0h+lpFileTime2],	offset Buffer ;	LPCSTR
		mov	[esp+1E0h+lpFileName], offset dword_42D000 ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		mov	eax, [ebp+hKey]
		mov	[esp+1E0h+lpFileName], offset byte_40F404
		sar	eax, 3
		mov	[esp+1E0h+lpFileTime2],	eax
		call	sub_407DB9
		cmp	eax, 4
		push	edx		; char
		push	edx
		jz	short loc_401E3D
		cmp	eax, 5
		jnz	short loc_401E65
		jmp	short loc_401E4E
; ---------------------------------------------------------------------------

loc_401E3D:				; CODE XREF: sub_40164F+7E5j
		mov	[esp+1E0h+lpFileName], offset aFileErrorUserR ;	"File: error, user retry"
		call	sub_408780
		jmp	loc_401D2E
; ---------------------------------------------------------------------------

loc_401E4E:				; CODE XREF: sub_40164F+7ECj
		mov	[esp+1E0h+lpFileName], offset aFileErrorUserC ;	"File: error, user cancel"
		call	sub_408780
		inc	ds:dword_428B10
		jmp	loc_403DA3
; ---------------------------------------------------------------------------

loc_401E65:				; CODE XREF: sub_40164F+7EAj
		mov	[esp+1E0h+lpFileName], offset aFileErrorUserA ;	"File: error, user abort"
		call	sub_408780
		mov	[esp+1E0h+lpFileTime2],	offset dword_40F004
		mov	[esp+1E0h+lpFileName], 0FFFFFFFAh

loc_401E80:				; CODE XREF: sub_40164F+A8j
		call	sub_407538

loc_401E85:				; CODE XREF: sub_40164F+1974j
		push	eax
		push	eax
		mov	eax, 7FFFFFFFh
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_401E91:				; CODE XREF: sub_40164F+71Cj
		mov	[esp+1E0h+lpFileTime2],	edi
		mov	[esp+1E0h+lpFileName], 0FFFFFFEAh
		call	sub_407538
		inc	ds:dword_428B3C
		push	eax
		push	eax
		mov	eax, [ebp+nNumberOfBytesToRead]
		mov	[esp+1E0h+nCmdShow], 0 ; nNumberOfBytesToRead
		mov	[esp+1E0h+nExitCode], 0	; lpBuffer
		mov	[esp+1E0h+lpFileTime2],	esi ; HANDLE
		mov	[esp+1E0h+lpFileName], eax ; int
		call	sub_4042B2
		dec	ds:dword_428B3C
		sub	esp, 10h
		mov	ebx, eax
		mov	[esp+1E0h+nExitCode], offset dword_40F004
		mov	[esp+1E0h+lpFileTime2],	eax ; char
		mov	[esp+1E0h+lpFileName], offset aFileWroteDToS ; "File: wrote %d to \"%s\""
		call	sub_408780
		cmp	[ebp+FileTime2.dwLowDateTime], 0FFFFFFFFh
		jnz	short loc_401EF7
		cmp	[ebp+FileTime2.dwHighDateTime],	0FFFFFFFFh
		jz	short loc_401F16

loc_401EF7:				; CODE XREF: sub_40164F+8A0j
		lea	eax, [ebp+FileTime2]
		mov	[esp+1E0h+nCmdShow], eax ; lpLastWriteTime
		mov	[esp+1E0h+nExitCode], 0	; lpLastAccessTime
		mov	[esp+1E0h+lpFileTime2],	eax ; lpCreationTime
		mov	[esp+1E0h+lpFileName], esi ; hFile
		call	ds:SetFileTime
		sub	esp, 10h

loc_401F16:				; CODE XREF: sub_40164F+8A6j
		mov	[esp+1E0h+lpFileName], esi ; hObject
		xor	esi, esi
		call	ds:CloseHandle
		test	ebx, ebx
		push	eax
		jns	loc_403D9D
		cmp	ebx, 0FFFFFFFEh
		jnz	short loc_401F57
		mov	[esp+1E0h+lpFileTime2],	0FFFFFFE9h ; int
		mov	[esp+1E0h+lpFileName], offset dword_40F004 ; LPSTR
		call	sub_4083A6
		push	eax
		push	eax
		mov	[esp+1E0h+lpFileTime2],	edi
		mov	[esp+1E0h+lpFileName], offset dword_40F004
		call	sub_4082C7
		jmp	short loc_401F6B
; ---------------------------------------------------------------------------

loc_401F57:				; CODE XREF: sub_40164F+8DEj
		mov	[esp+1E0h+lpFileTime2],	0FFFFFFEEh ; int
		mov	[esp+1E0h+lpFileName], offset dword_40F004 ; LPSTR
		call	sub_4083A6

loc_401F6B:				; CODE XREF: sub_40164F+906j
		push	eax
		push	eax
		mov	[esp+1E0h+lpFileTime2],	offset dword_40F004 ; char
		mov	[esp+1E0h+lpFileName], offset aS ; "%s"
		call	sub_408780
		mov	[esp+1E0h+lpFileTime2],	200010h
		mov	[esp+1E0h+lpFileName], offset dword_40F004
		jmp	loc_402FBE
; ---------------------------------------------------------------------------

loc_401F95:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 21
		xor	esi, esi
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aDeleteS ;	"Delete: \"%s\""
		mov	ebx, eax
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		mov	eax, [ebp+dwFileAttributes]
		mov	[esp+1D8h+nExitCode], ebx ; lpString
		mov	[esp+1D8h+nCmdShow], eax ; int
		call	sub_408C37
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_401FC6:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 31h	; jumptable 004016B3 case 22
		mov	esi, 1
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aMessageboxDS ; "MessageBox: %d,\"%s\""
		mov	[esp+1D8h+lpBuffer], eax
		mov	ebx, eax
		mov	eax, [ebp+hKey]
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		mov	eax, [ebp+hKey]
		mov	[esp+1D8h+nExitCode], ebx
		mov	[esp+1D8h+nCmdShow], eax
		call	sub_407DB9
		test	eax, eax
		push	edi
		push	edi
		jz	loc_403D9D
		cmp	eax, [ebp+nNumberOfBytesToRead]
		jz	loc_402244
		xor	esi, esi
		cmp	eax, [ebp+FileTime2.dwHighDateTime]
		jnz	loc_403D9D
		mov	eax, [ebp+var_28]
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_402023:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFF0h	; jumptable 004016B3 case 23
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aRmdirS ; "RMDir: \"%s\""
		mov	ebx, eax
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		mov	eax, [ebp+dwFileAttributes]
		mov	[esp+1D8h+nExitCode], ebx ; lpString
		mov	[esp+1D8h+nCmdShow], eax ; int
		call	sub_408C37
		push	esi
		push	esi
		xor	esi, esi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402057:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 1		; jumptable 004016B3 case 24
		xor	esi, esi
		call	sub_401414
		mov	[esp+1D8h+nExitCode], eax
		call	sub_4082BC
		push	ecx
		mov	[esp+1DCh+nExitCode], eax ; int
		mov	[esp+1DCh+lpFileTime2],	edi ; LPSTR
		call	sub_4081D0
		push	ebx
		push	ebx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40207F:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 2		; jumptable 004016B3 case 25
		call	sub_401463
		mov	[ebp+lpszShortPath], eax
		mov	eax, 3
		call	sub_401463
		mov	edx, eax
		mov	eax, 1
		mov	[ebp+lpString1], edx
		call	sub_401414
		mov	edx, [ebp+lpString1]
		cmp	[ebp+lpszShortPath], 0
		mov	byte ptr ds:dword_42D000[ebx], 0
		setnz	byte ptr [ebp+hWnd]
		mov	ecx, eax
		jnz	short loc_4020D6
		xor	esi, esi
		cmp	[ebp+nNumberOfBytesToRead], 0
		jnz	loc_403D9D

loc_4020D6:				; CODE XREF: sub_40164F+A79j
		mov	[ebp+lpString1], edx
		mov	[esp+1D8h+nExitCode], ecx
		mov	[ebp+var_1A4], ecx
		call	sub_4082BC
		mov	ecx, [ebp+var_1A4]
		push	edx
		mov	edx, [ebp+lpString1]
		test	edx, edx
		jns	short loc_402105
		xor	esi, esi
		add	edx, eax
		js	loc_403D9D

loc_402105:				; CODE XREF: sub_40164F+AAAj
		cmp	edx, eax
		cmovg	edx, eax
		xor	esi, esi
		add	ecx, edx
		mov	[esp+1DCh+nExitCode], ecx ; LPCSTR
		mov	[esp+1DCh+lpFileTime2],	edi ; LPSTR
		call	sub_408294
		cmp	byte ptr [ebp+hWnd], 0
		push	eax
		push	eax
		jz	loc_403D9D
		cmp	[ebp+lpszShortPath], 0
		jns	short loc_402143
		mov	[esp+1DCh+lpFileTime2],	edi
		call	sub_4082BC
		add	[ebp+lpszShortPath], eax
		push	esi
		js	short loc_402157

loc_402143:				; CODE XREF: sub_40164F+AE1j
		xor	esi, esi
		cmp	[ebp+lpszShortPath], 3FFh
		jg	loc_403D9D
		jmp	short loc_402161
; ---------------------------------------------------------------------------

loc_402157:				; CODE XREF: sub_40164F+AF2j
		mov	[ebp+lpszShortPath], 0

loc_402161:				; CODE XREF: sub_40164F+B06j
		mov	eax, [ebp+lpszShortPath]
		xor	esi, esi
		mov	byte ptr ds:dword_42D000[eax+ebx], 0
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402176:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 20h	; jumptable 004016B3 case 26
		call	sub_401414
		mov	ebx, eax
		mov	eax, 31h
		call	sub_401414
		cmp	[ebp+FileTime2.dwHighDateTime],	0
		mov	[esp+1D8h+nExitCode], ebx ; lpString1
		mov	[esp+1D8h+nCmdShow], eax ; lpString2
		jnz	short loc_4021A1
		call	ds:lstrcmpiA
		jmp	short loc_4021A7
; ---------------------------------------------------------------------------

loc_4021A1:				; CODE XREF: sub_40164F+B48j
		call	ds:lstrcmpA

loc_4021A7:				; CODE XREF: sub_40164F+B50j
		test	eax, eax
		push	ecx
		push	ecx
		jnz	loc_402244
		jmp	loc_402581
; ---------------------------------------------------------------------------

loc_4021B6:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 1		; jumptable 004016B3 case 27
		call	sub_401414
		mov	[esp+1D8h+lpBuffer], 400h ; nSize
		mov	[esp+1D8h+nCmdShow], edi ; lpDst
		mov	[esp+1D8h+nExitCode], eax ; lpSrc
		mov	[ebp+lpString1], eax
		call	ds:ExpandEnvironmentStringsA
		mov	edx, [ebp+lpString1]
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_402203
		xor	esi, esi
		cmp	[ebp+nNumberOfBytesToRead], 0
		jz	short loc_40220F
		mov	[esp+1D8h+nExitCode], edx ; lpString1
		mov	[esp+1D8h+nCmdShow], edi ; lpString2
		call	ds:lstrcmpA
		test	eax, eax
		push	edx
		push	edx
		jnz	short loc_40220F

loc_402203:				; CODE XREF: sub_40164F+B97j
		mov	byte ptr ds:dword_42D000[ebx], 0
		mov	esi, 1

loc_40220F:				; CODE XREF: sub_40164F+B9Fj
					; sub_40164F+BB2j
		mov	byte ptr [edi+3FFh], 0
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40221B:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 28
		call	sub_401463
		mov	ebx, eax
		mov	eax, 1
		call	sub_401463
		cmp	[ebp+var_28], 0
		jnz	short loc_402240
		cmp	ebx, eax
		jl	short loc_402244
		jle	loc_402581
		jmp	short loc_402252
; ---------------------------------------------------------------------------

loc_402240:				; CODE XREF: sub_40164F+BE3j
		cmp	ebx, eax
		jnb	short loc_40224C

loc_402244:				; CODE XREF: sub_40164F+9BBj
					; sub_40164F+B5Cj ...
		mov	eax, [ebp+FileTime2.dwLowDateTime]
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_40224C:				; CODE XREF: sub_40164F+BF3j
		jbe	loc_402581

loc_402252:				; CODE XREF: sub_40164F+BEFj
		mov	eax, [ebp+FileTime2.dwHighDateTime]
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_40225A:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 1		; jumptable 004016B3 case 29
		xor	esi, esi
		call	sub_401463
		mov	ebx, eax
		mov	eax, 2
		call	sub_401463
		cmp	[ebp+FileTime2.dwLowDateTime], 0Ch ; switch 13 cases
		mov	ecx, eax
		ja	short loc_4022EB ; jumptable 0040227D default case
		mov	eax, [ebp+FileTime2.dwLowDateTime]
		jmp	ds:off_40C708[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_402284:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		add	ebx, ecx	; jumptable 0040227D case 0
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_402288:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		sub	ebx, ecx	; jumptable 0040227D case 1
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_40228C:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		imul	ebx, ecx	; jumptable 0040227D case 2
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_402291:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		test	ecx, ecx	; jumptable 0040227D case 3
		jz	short loc_4022E4
		mov	eax, ebx
		cdq
		idiv	ecx
		mov	ebx, eax
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_40229E:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		or	ebx, ecx	; jumptable 0040227D case 4
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_4022A2:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		and	ebx, ecx	; jumptable 0040227D case 5
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_4022A6:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		xor	ebx, ecx	; jumptable 0040227D case 6
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_4022AA:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		test	ebx, ebx	; jumptable 0040227D case 7
		setz	bl
		jmp	short loc_4022B6
; ---------------------------------------------------------------------------

loc_4022B1:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		or	ecx, ebx	; jumptable 0040227D case 8
		setnz	bl

loc_4022B6:				; CODE XREF: sub_40164F+C60j
		movzx	ebx, bl
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_4022BB:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		xor	eax, eax	; jumptable 0040227D case 9
		test	ebx, ebx
		setnz	al
		xor	ebx, ebx
		test	ecx, ecx
		setnz	bl
		and	ebx, eax
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_4022CD:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		test	ecx, ecx	; jumptable 0040227D case 10
		jz	short loc_4022E4
		mov	eax, ebx
		cdq
		idiv	ecx
		mov	ebx, edx
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_4022DA:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		shl	ebx, cl		; jumptable 0040227D case 11
		jmp	short loc_4022E0
; ---------------------------------------------------------------------------

loc_4022DE:				; CODE XREF: sub_40164F+C2Ej
					; DATA XREF: .rdata:off_40C708o
		sar	ebx, cl		; jumptable 0040227D case 12

loc_4022E0:				; CODE XREF: sub_40164F+C37j
					; sub_40164F+C3Bj ...
		xor	esi, esi
		jmp	short loc_4022EB ; jumptable 0040227D default case
; ---------------------------------------------------------------------------

loc_4022E4:				; CODE XREF: sub_40164F+C44j
					; sub_40164F+C80j
		xor	ebx, ebx
		mov	esi, 1

loc_4022EB:				; CODE XREF: sub_40164F+C29j
					; sub_40164F+C93j
		mov	[esp+1D8h+nCmdShow], ebx ; jumptable 0040227D default case
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		call	sub_4081D0
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4022FE:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 1		; jumptable 004016B3 case 30
		xor	esi, esi
		call	sub_401414
		mov	ebx, eax
		mov	eax, 2
		call	sub_401463
		mov	[esp+1D8h+nCmdShow], ebx ; LPCSTR
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		mov	[esp+1D8h+lpBuffer], eax
		call	ds:wsprintfA
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40232C:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	edx, [ebp+nNumberOfBytesToRead]	; jumptable 004016B3 case 31
		mov	ebx, ds:hMem
		test	edx, edx
		jz	short loc_4023AF
		mov	eax, edx
		jmp	short loc_402343
; ---------------------------------------------------------------------------

loc_40233D:				; CODE XREF: sub_40164F+CF7j
		test	eax, eax
		mov	ebx, [ebx]
		jz	short loc_40234A

loc_402343:				; CODE XREF: sub_40164F+CECj
		dec	eax
		test	ebx, ebx
		jnz	short loc_40233D
		jmp	short loc_40234E
; ---------------------------------------------------------------------------

loc_40234A:				; CODE XREF: sub_40164F+CF2j
		test	ebx, ebx
		jnz	short loc_402363

loc_40234E:				; CODE XREF: sub_40164F+CF9j
		mov	[esp+1D8h+nCmdShow], edx ; char
		mov	[esp+1D8h+nExitCode], offset aExchStackDElem ; "Exch: stack < %d elements"
		call	sub_408780
		jmp	loc_402F9D
; ---------------------------------------------------------------------------

loc_402363:				; CODE XREF: sub_40164F+CFDj
		add	ebx, 4
		xor	esi, esi
		mov	[esp+1D8h+nCmdShow], ebx ; LPCSTR
		mov	[esp+1D8h+nExitCode], offset dword_40F004 ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		mov	eax, ds:hMem
		mov	[esp+1D8h+nExitCode], ebx ; LPSTR
		add	eax, 4
		mov	[esp+1D8h+nCmdShow], eax ; LPCSTR
		call	sub_408294
		push	eax
		push	eax
		mov	eax, ds:hMem
		mov	[esp+1D8h+nCmdShow], offset dword_40F004 ; LPCSTR
		add	eax, 4
		mov	[esp+1D8h+nExitCode], eax ; LPSTR
		call	sub_408294
		push	eax		; char
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4023AF:				; CODE XREF: sub_40164F+CE8j
		test	eax, eax
		jz	short loc_4023F6
		test	ebx, ebx
		jnz	short loc_4023CD
		mov	[esp+1D8h+nExitCode], offset aPopStackEmpty ; "Pop: stack empty"
		mov	esi, 1
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4023CD:				; CODE XREF: sub_40164F+D66j
		lea	eax, [ebx+4]
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		mov	[esp+1D8h+nCmdShow], eax ; LPCSTR
		call	sub_408294
		push	esi
		push	esi
		mov	eax, [ebx]
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], ebx ; hMem
		mov	ds:hMem, eax
		call	ds:GlobalFree
		push	edi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4023F6:				; CODE XREF: sub_40164F+D62j
		mov	[esp+1D8h+nCmdShow], 404h ; dwBytes
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], 40h ; uFlags
		call	ds:GlobalAlloc
		mov	ebx, eax
		mov	eax, [ebp+hKey]
		push	edx
		push	edx
		mov	[esp+1D8h+nCmdShow], eax ; int
		lea	eax, [ebx+4]
		mov	[esp+1D8h+nExitCode], eax ; LPSTR
		call	sub_4083A6
		mov	eax, ds:hMem
		push	ecx
		push	ecx
		mov	[ebx], eax
		mov	ds:hMem, ebx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402437:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 3		; jumptable 004016B3 cases 32,33
		call	sub_401463
		mov	ebx, eax
		mov	eax, 4
		call	sub_401463
		test	byte ptr [ebp+var_28], 1
		mov	esi, eax
		jz	short loc_402461
		mov	eax, 33h
		call	sub_401414
		mov	ebx, eax

loc_402461:				; CODE XREF: sub_40164F+E04j
		test	byte ptr [ebp+var_28], 2
		jz	short loc_402473
		mov	eax, 44h
		call	sub_401414
		mov	esi, eax

loc_402473:				; CODE XREF: sub_40164F+E16j
		cmp	[ebp+var_40], 21h
		mov	eax, 1
		jnz	short loc_4024FC
		call	sub_401463
		mov	edx, eax
		mov	eax, 2
		mov	[ebp+lpString1], edx
		call	sub_401463
		mov	ecx, [ebp+var_28]
		mov	edx, [ebp+lpString1]
		sar	ecx, 2
		mov	[ebp+lpszShortPath], ecx
		jz	short loc_4024E5
		lea	ecx, [ebp+FilePart]
		mov	[esp+1D8h+lpdwResult], ecx ; lpdwResult
		mov	ecx, [ebp+lpszShortPath]
		mov	[esp+1D8h+lpFilePart], esi ; lParam
		mov	[esp+1D8h+lpBuffer], ebx ; wParam
		xor	ebx, ebx
		mov	[esp+1D8h+var_1C8], 0 ;	fuFlags
		mov	[esp+1D8h+uTimeout], ecx ; uTimeout
		mov	[esp+1D8h+nCmdShow], eax ; Msg
		mov	[esp+1D8h+nExitCode], edx ; hWnd
		call	ds:SendMessageTimeoutA
		sub	esp, 1Ch
		test	eax, eax
		setz	bl
		mov	esi, ebx
		jmp	short loc_402544
; ---------------------------------------------------------------------------

loc_4024E5:				; CODE XREF: sub_40164F+E58j
		mov	[esp+1D8h+lpFilePart], esi ; lParam
		mov	[esp+1D8h+lpBuffer], ebx ; wParam
		mov	[esp+1D8h+nExitCode], edx ; hWnd
		mov	[esp+1D8h+nCmdShow], eax ; Msg
		call	ds:SendMessageA
		jmp	short loc_40253C
; ---------------------------------------------------------------------------

loc_4024FC:				; CODE XREF: sub_40164F+E2Dj
		call	sub_401414
		mov	edx, eax
		mov	eax, 12h
		mov	[ebp+lpString1], edx
		call	sub_401414
		mov	edx, [ebp+lpString1]
		xor	ecx, ecx
		cmp	byte ptr [eax],	0
		cmovz	eax, ecx
		cmp	byte ptr [edx],	0
		mov	[esp+1D8h+lpFilePart], eax ; lpszWindow
		mov	[esp+1D8h+nCmdShow], esi ; hWndChildAfter
		cmovz	edx, ecx
		mov	[esp+1D8h+lpBuffer], edx ; lpszClass
		mov	[esp+1D8h+nExitCode], ebx ; hWndParent
		call	ds:FindWindowExA

loc_40253C:				; CODE XREF: sub_40164F+EABj
		sub	esp, 10h
		xor	esi, esi
		mov	[ebp+FilePart],	eax

loc_402544:				; CODE XREF: sub_40164F+E94j
		cmp	[ebp+hKey], 0
		js	loc_403D9D
		mov	eax, [ebp+FilePart]
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		mov	[esp+1D8h+nCmdShow], eax ; int
		call	sub_4081D0
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402564:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 34
		call	sub_401463
		mov	[esp+1D8h+nExitCode], eax ; hWnd
		call	ds:IsWindow
		test	eax, eax
		push	edi
		jz	short loc_402581

loc_402579:				; CODE XREF: sub_40164F+40Dj
		mov	eax, [ebp+dwFileAttributes]
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_402581:				; CODE XREF: sub_40164F+429j
					; sub_40164F+B62j ...
		mov	eax, [ebp+nNumberOfBytesToRead]
		jmp	loc_403DA5
; ---------------------------------------------------------------------------

loc_402589:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 2		; jumptable 004016B3 case 35
		call	sub_401463
		mov	ebx, eax
		mov	eax, 1
		call	sub_401463
		mov	[esp+1D8h+nCmdShow], ebx ; nIDDlgItem
		mov	[esp+1D8h+nExitCode], eax ; hDlg
		call	ds:GetDlgItem
		push	ebx
		push	ebx
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		call	sub_4081D0
		push	esi
		push	esi
		xor	esi, esi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4025C3:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	ebx, ds:dword_428B74 ; jumptable 004016B3 case 36
		xor	esi, esi
		add	ebx, eax
		xor	eax, eax
		call	sub_401463
		mov	[esp+1D8h+lpBuffer], ebx ; dwNewLong
		mov	[esp+1D8h+nCmdShow], 0FFFFFFEBh	; nIndex
		mov	[esp+1D8h+nExitCode], eax ; hWnd
		call	ds:SetWindowLongA
		sub	esp, 0Ch
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4025F1:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	edx, [ebp+hWnd]	; jumptable 004016B3 case 37
		mov	[esp+1D8h+nCmdShow], eax ; nIDDlgItem
		mov	[esp+1D8h+nExitCode], edx ; hDlg
		call	ds:GetDlgItem
		push	edx
		mov	ebx, eax
		push	edx
		lea	eax, [ebp+Rect]
		mov	[esp+1D8h+nCmdShow], eax ; lpRect
		mov	[esp+1D8h+nExitCode], ebx ; hWnd
		call	ds:GetClientRect
		mov	esi, [ebp+nNumberOfBytesToRead]
		xor	eax, eax
		mov	edi, [ebp+Rect.bottom]
		imul	edi, esi
		push	ecx
		push	ecx
		imul	esi, [ebp+Rect.right]
		call	sub_401414
		mov	[esp+1D8h+uTimeout], 10h ; fuLoad
		mov	[esp+1D8h+var_1C8], edi	; cy
		mov	[esp+1D8h+lpFilePart], esi ; cx
		xor	esi, esi
		mov	[esp+1D8h+lpBuffer], 0 ; type
		mov	[esp+1D8h+nExitCode], 0	; hInst
		mov	[esp+1D8h+nCmdShow], eax ; name
		call	ds:LoadImageA
		sub	esp, 18h
		mov	[esp+1D8h+lpFilePart], eax ; lParam
		mov	[esp+1D8h+lpBuffer], 0 ; wParam
		mov	[esp+1D8h+nCmdShow], 172h ; Msg
		mov	[esp+1D8h+nExitCode], ebx ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		test	eax, eax
		jz	loc_403D9D
		mov	[esp+1D8h+nExitCode], eax ; ho
		call	ds:DeleteObject
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40269C:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	ebx, [ebp+hWnd]	; jumptable 004016B3 case 38
		mov	[esp+1D8h+nExitCode], ebx ; hWnd
		call	ds:GetDC
		push	edx
		mov	[esp+1D8h+nCmdShow], 5Ah ; index
		mov	[esp+1D8h+nExitCode], eax ; hdc
		call	ds:GetDeviceCaps
		push	ecx
		mov	ebx, eax
		push	ecx
		mov	eax, 2
		call	sub_401463
		mov	[esp+1D8h+nCmdShow], ebx ; nNumerator
		mov	[esp+1D8h+lpBuffer], 48h ; nDenominator
		mov	[esp+1D8h+nExitCode], eax ; nNumber
		call	ds:MulDiv
		neg	eax
		sub	esp, 0Ch
		mov	ds:lf.lfHeight,	eax
		mov	eax, 3
		call	sub_401463
		mov	ds:lf.lfCharSet, 1
		mov	[esp+1D8h+nExitCode], offset lf.lfFaceName ; LPSTR
		mov	ds:lf.lfWeight,	eax
		mov	al, byte ptr [ebp+FileTime2.dwHighDateTime]
		mov	dl, al
		and	edx, 1
		mov	ds:lf.lfItalic,	dl
		mov	dl, al
		and	eax, 4
		mov	ds:lf.lfStrikeOut, al
		mov	eax, [ebp+dwFileAttributes]
		and	edx, 2
		mov	ds:lf.lfUnderline, dl
		mov	[esp+1D8h+nCmdShow], eax ; int
		call	sub_4083A6
		push	ebx
		push	ebx
		mov	[esp+1D8h+nExitCode], offset lf	; lplf
		call	ds:CreateFontIndirectA
		push	esi
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		mov	[esp+1D8h+nCmdShow], eax ; int
		call	sub_4081D0
		push	edi		; char
		push	edi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402759:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 39
		call	sub_401463
		mov	ebx, eax
		mov	eax, 1
		call	sub_401463
		cmp	[ebp+nNumberOfBytesToRead], 0
		mov	esi, eax
		jz	short loc_402780
		mov	[esp+1D8h+nExitCode], offset aHidewindow ; "HideWindow"
		call	sub_408780

loc_402780:				; CODE XREF: sub_40164F+1123j
		cmp	[ebp+FileTime2.dwLowDateTime], 0
		mov	[esp+1D8h+nCmdShow], esi ; bEnable
		mov	[esp+1D8h+nExitCode], ebx ; hWnd
		jnz	short loc_40279C
		call	ds:ShowWindow
		xor	esi, esi
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40279C:				; CODE XREF: sub_40164F+113Cj
		call	ds:EnableWindow
		xor	esi, esi
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4027AB:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 40
		call	sub_401414
		mov	ebx, eax
		mov	eax, 31h
		call	sub_401414
		mov	edi, eax
		mov	eax, 22h
		call	sub_401414
		mov	esi, eax
		mov	eax, 15h
		call	sub_401414
		mov	[esp+1D8h+nExitCode], 0FFFFFFECh
		call	sub_401630
		mov	ecx, [ebp+FileTime2.dwLowDateTime]
		push	eax
		xor	eax, eax
		cmp	byte ptr [esi],	0
		mov	edx, eax
		cmovnz	edx, esi
		cmp	byte ptr [ebx],	0
		mov	[esp+1D8h+lpFilePart], edx ; lpParameters
		mov	edx, [ebp+hWnd]
		mov	[esp+1D8h+uTimeout], ecx ; nShowCmd
		cmovnz	eax, ebx
		mov	[esp+1D8h+var_1C8], offset Directory ; lpDirectory
		mov	[esp+1D8h+lpBuffer], edi ; lpFile
		mov	[esp+1D8h+nCmdShow], eax ; lpOperation
		mov	[esp+1D8h+nExitCode], edx ; hwnd
		call	ds:ShellExecuteA
		sub	esp, 18h
		cmp	eax, 20h
		jg	short loc_40284B
		mov	[esp+1D8h+lpFilePart], esi
		mov	esi, 1
		mov	[esp+1D8h+var_1C8], eax
		mov	[esp+1D8h+lpBuffer], edi
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+nExitCode], offset aExecshellWarni ; "ExecShell: warning: error (\"%s\": file"...
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40284B:				; CODE XREF: sub_40164F+11D4j
		mov	[esp+1D8h+lpFilePart], esi
		xor	esi, esi
		mov	[esp+1D8h+lpBuffer], edi
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+nExitCode], offset aExecshellSucce ; "ExecShell: success (\"%s\": file:\"%s\""...
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40286A:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 41
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aExecCommandS ; "Exec: command=\"%s\""
		mov	ebx, eax
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		mov	[esp+1D8h+nCmdShow], ebx
		mov	[esp+1D8h+nExitCode], 0FFFFFFEBh
		call	sub_407538
		push	esi
		push	esi
		mov	[esp+1D8h+nExitCode], ebx ; LPSTR
		call	sub_407CFB
		test	eax, eax
		push	edi
		mov	edi, eax
		mov	[esp+1D8h+nCmdShow], ebx ; char
		jz	loc_402936
		mov	[esp+1D8h+nExitCode], offset aExecSuccessS ; "Exec: success (\"%s\")"
		call	sub_408780
		mov	ebx, ds:WaitForSingleObject
		cmp	[ebp+nNumberOfBytesToRead], 0
		jnz	short loc_4028D3
		jmp	short loc_402918
; ---------------------------------------------------------------------------

loc_4028C6:				; CODE XREF: sub_40164F+1298j
		mov	[esp+1D8h+nExitCode], 0Fh ; UINT
		call	sub_408F75
		push	ecx

loc_4028D3:				; CODE XREF: sub_40164F+1273j
		mov	[esp+1D8h+nCmdShow], 64h ; dwMilliseconds
		mov	[esp+1D8h+nExitCode], edi ; hHandle
		call	ebx ; WaitForSingleObject
		cmp	eax, 102h
		push	edx
		push	edx
		jz	short loc_4028C6
		lea	eax, [ebp+FilePart]
		mov	[esp+1D8h+nCmdShow], eax ; lpExitCode
		mov	[esp+1D8h+nExitCode], edi ; hProcess
		call	ds:GetExitCodeProcess
		cmp	[ebp+dwFileAttributes],	0
		push	eax
		push	eax
		js	short loc_40291C
		mov	eax, [ebp+FilePart]
		mov	ecx, [ebp+lpszShortPath]
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	[esp+1D8h+nExitCode], ecx ; LPSTR
		call	sub_4081D0
		push	eax
		push	eax

loc_402918:				; CODE XREF: sub_40164F+1275j
		xor	esi, esi
		jmp	short loc_402927
; ---------------------------------------------------------------------------

loc_40291C:				; CODE XREF: sub_40164F+12B0j
		xor	ebx, ebx
		cmp	[ebp+FilePart],	0
		setnz	bl
		mov	esi, ebx

loc_402927:				; CODE XREF: sub_40164F+12CBj
		mov	[esp+1D8h+nExitCode], edi ; hObject
		call	ds:CloseHandle
		push	edi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402936:				; CODE XREF: sub_40164F+1257j
		mov	[esp+1D8h+nExitCode], offset aExecFailedCrea ; "Exec: failed createprocess (\"%s\")"
		mov	esi, 1
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40294C:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 2		; jumptable 004016B3 case 42
		call	sub_401414
		mov	[esp+1D8h+nExitCode], eax ; LPCSTR
		call	sub_4087D7
		test	eax, eax
		push	esi
		mov	esi, eax
		jz	short loc_402994
		mov	eax, [eax+14h]
		mov	edx, [ebp+lpszShortPath]
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	[esp+1D8h+nExitCode], edx ; LPSTR
		call	sub_4081D0
		push	ecx
		push	ecx
		mov	eax, [esi+18h]
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		mov	[esp+1D8h+nCmdShow], eax ; int
		call	sub_4081D0
		push	ebx
		push	ebx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402994:				; CODE XREF: sub_40164F+1314j
		mov	ecx, [ebp+var_198]
		mov	esi, 1
		mov	byte ptr ds:dword_42D000[ebx], 0
		mov	byte ptr ds:dword_42D000[ecx], 0
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4029B2:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFEEh	; jumptable 004016B3 case 43
		call	sub_401414
		mov	[esp+1D8h+nExitCode], 0Ch
		mov	[ebp+hWnd], eax
		call	sub_40894A
		lea	edx, [ebp+FilePart]
		push	esi
		mov	esi, [ebp+hWnd]
		mov	[esp+1D8h+nCmdShow], edx
		mov	[esp+1D8h+nExitCode], esi
		mov	esi, 1
		call	eax
		mov	ecx, [ebp+var_198]
		mov	byte ptr ds:dword_42D000[ebx], 0
		mov	byte ptr ds:dword_42D000[ecx], 0
		push	edx
		test	eax, eax
		push	edx
		jz	loc_403D9D
		mov	[esp+1E0h+lpFileTime2],	eax ; dwBytes
		mov	[esp+1E0h+lpFileName], 40h ; uFlags
		mov	[ebp+lpString1], eax
		call	ds:GlobalAlloc
		test	eax, eax
		push	ebx
		push	ebx
		mov	ebx, eax
		jz	loc_403D9D
		mov	[esp+1E0h+lpFileName], 0Dh
		call	sub_40894A
		push	edx
		mov	[ebp+var_198], eax
		mov	[esp+1E0h+lpFileName], 0Eh
		call	sub_40894A
		mov	edx, [ebp+lpString1]
		mov	[ebp+var_19C], eax
		mov	eax, [ebp+hWnd]
		push	ecx
		mov	[esp+1E0h+nCmdShow], ebx
		mov	[esp+1E0h+nExitCode], edx
		mov	[esp+1E0h+lpFileTime2],	0
		mov	[esp+1E0h+lpFileName], eax
		call	[ebp+var_198]
		sub	esp, 10h
		test	eax, eax
		jz	short loc_402AD0
		lea	eax, [ebp+ppv]
		mov	[esp+1F0h+var_1E4], eax
		lea	eax, [ebp+Default]
		mov	[esp+1F0h+var_1E8], eax
		mov	[esp+1F0h+var_1EC], offset asc_40C3A5 ;	"\\"
		mov	[esp+1F0h+var_1F0], ebx
		call	[ebp+var_19C]
		sub	esp, 10h
		test	eax, eax
		jz	short loc_402AD0
		mov	eax, dword ptr [ebp+Default]
		xor	si, si
		mov	eax, [eax+8]
		mov	[esp+200h+hMem], edi ; LPSTR
		mov	[esp+200h+var_1FC], eax	; int
		call	sub_4081D0
		mov	eax, dword ptr [ebp+Default]
		mov	edx, [ebp+lpszShortPath]
		push	edi
		push	edi
		mov	eax, [eax+0Ch]
		mov	[esp+200h+hMem], edx ; LPSTR
		mov	[esp+200h+var_1FC], eax	; int
		call	sub_4081D0
		push	eax
		push	eax

loc_402AD0:				; CODE XREF: sub_40164F+1428j
					; sub_40164F+144Ej
		mov	[esp+200h+hMem], ebx ; hMem
		call	ds:GlobalFree
		push	ebx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402ADF:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		cmp	ds:dword_428B40, 0 ; jumptable 004016B3	case 44
		js	loc_402C27
		mov	eax, 0FFFFFFF0h
		call	sub_401414
		mov	esi, eax
		mov	eax, 1
		call	sub_401414
		cmp	[ebp+FileTime2.dwHighDateTime],	0
		mov	edi, eax
		jz	short loc_402B1A
		mov	[esp+1D8h+nExitCode], esi ; lpModuleName
		call	ds:GetModuleHandleA
		test	eax, eax
		mov	ebx, eax
		push	ecx
		jnz	short loc_402B40

loc_402B1A:				; CODE XREF: sub_40164F+14B9j
		mov	[esp+1D8h+lpBuffer], 8 ; dwFlags
		mov	[esp+1D8h+nCmdShow], 0 ; hFile
		mov	[esp+1D8h+nExitCode], esi ; lpLibFileName
		call	ds:LoadLibraryExA
		sub	esp, 0Ch
		test	eax, eax
		mov	ebx, eax
		jz	loc_402C00

loc_402B40:				; CODE XREF: sub_40164F+14C9j
		mov	[esp+1D8h+nCmdShow], edi ; lpProcName
		mov	[esp+1D8h+nExitCode], ebx ; hModule
		call	ds:GetProcAddress
		test	eax, eax
		push	edx
		push	edx
		jz	short loc_402BAB
		mov	edx, [ebp+nNumberOfBytesToRead]
		test	edx, edx
		jz	short loc_402B7C
		mov	[esp+1D8h+nExitCode], edx
		mov	[ebp+lpString1], eax
		call	sub_401630
		mov	eax, [ebp+lpString1]
		push	esi
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setnz	cl
		mov	esi, ecx
		jmp	short loc_402BD6
; ---------------------------------------------------------------------------

loc_402B7C:				; CODE XREF: sub_40164F+1509j
		mov	edx, [ebp+hWnd]
		xor	esi, esi
		mov	[esp+1D8h+var_1C8], offset off_40B000
		mov	[esp+1D8h+lpFilePart], offset hMem
		mov	[esp+1D8h+lpBuffer], offset dword_42D000
		mov	[esp+1D8h+nCmdShow], 400h
		mov	[esp+1D8h+nExitCode], edx
		call	eax
		jmp	short loc_402BD6
; ---------------------------------------------------------------------------

loc_402BAB:				; CODE XREF: sub_40164F+1502j
		mov	[esp+1D8h+nCmdShow], edi
		mov	[esp+1D8h+nExitCode], 0FFFFFFF7h
		call	sub_407538
		push	ecx		; char
		push	ecx
		mov	[esp+1D8h+lpBuffer], esi
		mov	esi, 1
		mov	[esp+1D8h+nCmdShow], edi ; char
		mov	[esp+1D8h+nExitCode], offset aErrorRegisteri ; "Error registering DLL: %s not found in "...
		call	sub_408780

loc_402BD6:				; CODE XREF: sub_40164F+152Bj
					; sub_40164F+155Aj
		cmp	[ebp+FileTime2.dwLowDateTime], 0
		jnz	loc_403D9D
		mov	[esp+1D8h+nExitCode], ebx
		call	sub_404FAB
		test	eax, eax
		push	edx
		jz	loc_403D9D
		mov	[esp+1D8h+nExitCode], ebx ; hLibModule
		call	ds:FreeLibrary
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402C00:				; CODE XREF: sub_40164F+14EBj
		mov	[esp+1D8h+nExitCode], 0FFFFFFF6h
		call	sub_401630
		push	edi
		mov	[esp+1D8h+nCmdShow], esi ; char
		mov	esi, 1
		mov	[esp+1D8h+nExitCode], offset aErrorRegiste_0 ; "Error registering DLL: Could not load %"...
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402C27:				; CODE XREF: sub_40164F+1497j
		mov	[esp+1D8h+nExitCode], 0FFFFFFE7h
		call	sub_401630
		push	esi
		mov	esi, 1
		mov	[esp+1D8h+nExitCode], offset aErrorRegiste_1 ; "Error registering DLL: Could not initia"...
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402C4A:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFF0h	; jumptable 004016B3 case 45
		call	sub_401414
		mov	[ebp+lpszShortPath], eax
		mov	eax, 0FFFFFFDFh
		call	sub_401414
		mov	edi, eax
		mov	eax, 2
		call	sub_401414
		mov	[ebp+hWnd], eax
		mov	eax, 0FFFFFFCDh
		call	sub_401414
		mov	esi, eax
		mov	eax, 45h
		call	sub_401414
		mov	[esp+1D8h+nExitCode], edi
		mov	[ebp+var_198], eax
		call	sub_407EE1
		test	eax, eax
		push	ebx
		jnz	short loc_402CA6
		mov	al, 21h
		call	sub_401414

loc_402CA6:				; CODE XREF: sub_40164F+164Ej
		mov	eax, [ebp+FileTime2.dwHighDateTime]
		mov	[esp+1D8h+var_1C8], esi
		mov	[esp+1D8h+lpBuffer], edi
		mov	[esp+1D8h+nExitCode], offset aCreateshortcut ; "CreateShortCut:	out: \"%s\", in: \"%s %"...
		mov	edx, eax
		sar	edx, 10h
		mov	[esp+1D8h+phkResult], edx
		movzx	edx, ah
		and	eax, 0FFh
		mov	[esp+1D8h+uTimeout], eax
		mov	eax, [ebp+hWnd]
		mov	[esp+1D8h+lpdwResult], edx
		mov	[esp+1D8h+lpFilePart], eax
		mov	eax, [ebp+lpszShortPath]
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		lea	eax, [ebp+ppv]
		mov	[esp+1D8h+var_1C8], eax	; ppv
		mov	[esp+1D8h+lpFilePart], offset riid ; riid
		mov	[esp+1D8h+lpBuffer], 1 ; dwClsContext
		mov	[esp+1D8h+nCmdShow], 0 ; pUnkOuter
		mov	[esp+1D8h+nExitCode], offset rclsid ; rclsid
		call	ds:CoCreateInstance
		sub	esp, 14h
		test	eax, eax
		js	loc_402E6F
		mov	eax, [ebp+ppv]
		lea	ecx, [ebp+Default]
		mov	edx, [eax]
		mov	[esp+1D8h+lpBuffer], ecx
		mov	[esp+1D8h+nCmdShow], offset dword_40E070
		mov	[esp+1D8h+nExitCode], eax
		call	dword ptr [edx]
		sub	esp, 0Ch
		test	eax, eax
		mov	ebx, eax
		js	loc_402E5F
		mov	eax, [ebp+ppv]
		mov	edx, [eax]
		mov	[esp+1E4h+lpFileName], edi
		mov	[esp+1E4h+var_1E4], eax
		call	dword ptr [edx+50h]
		mov	ebx, eax
		mov	eax, [ebp+ppv]
		push	edx
		push	edx
		mov	edx, [eax]
		mov	[esp+1ECh+var_1E8], offset Directory
		mov	[esp+1ECh+var_1EC], eax
		call	dword ptr [edx+24h]
		mov	edx, [ebp+FileTime2.dwHighDateTime]
		movzx	edx, dh
		test	edx, edx
		push	ecx
		push	ecx
		jz	short loc_402D8A
		mov	eax, [ebp+ppv]
		mov	ecx, [eax]
		mov	[esp+1F4h+var_1F0], edx
		mov	[esp+1F4h+var_1F4], eax
		call	dword ptr [ecx+3Ch]
		push	eax
		push	eax

loc_402D8A:				; CODE XREF: sub_40164F+1728j
		mov	eax, [ebp+ppv]
		movzx	ecx, word ptr [ebp+FileTime2.dwHighDateTime+2]
		mov	edx, [eax]
		mov	[esp+1FCh+var_1F8], ecx
		mov	[esp+1FCh+var_1FC], eax
		call	dword ptr [edx+34h]
		push	eax
		push	eax
		cmp	byte ptr [esi],	0
		jz	short loc_402DBE
		mov	eax, [ebp+ppv]
		movzx	ecx, byte ptr [ebp+FileTime2.dwHighDateTime]
		mov	edx, [eax]
		mov	[esp+204h+var_1FC], ecx
		mov	[esp+204h+hMem], esi
		mov	[esp+204h+var_204], eax
		call	dword ptr [edx+44h]
		sub	esp, 0Ch

loc_402DBE:				; CODE XREF: sub_40164F+1753j
		mov	eax, [ebp+ppv]
		mov	ecx, [ebp+hWnd]
		mov	edx, [eax]
		mov	[esp+210h+cchWideChar],	ecx
		mov	[esp+210h+lpWideCharStr], eax
		call	dword ptr [edx+2Ch]
		mov	esi, [ebp+var_198]
		push	eax
		push	eax
		mov	eax, [ebp+ppv]
		mov	edx, [eax]
		mov	[esp+218h+cbMultiByte],	esi
		mov	[esp+218h+lpMultiByteStr], eax
		call	dword ptr [edx+1Ch]
		test	ebx, ebx
		push	eax
		push	eax
		js	short loc_402E53
		mov	eax, [ebp+lpszShortPath]
		mov	ebx, 80004005h
		mov	[esp+220h+cchWideChar],	400h ; cchWideChar
		mov	[esp+220h+lpWideCharStr], offset WideCharStr ; lpWideCharStr
		mov	[esp+220h+cbMultiByte],	0FFFFFFFFh ; cbMultiByte
		mov	[esp+220h+lpMultiByteStr], eax ; lpMultiByteStr
		mov	[esp+220h+dwFlags], 0 ;	dwFlags
		mov	[esp+220h+CodePage], 0 ; CodePage
		call	ds:MultiByteToWideChar
		sub	esp, 18h
		test	eax, eax
		jz	short loc_402E53
		mov	eax, dword ptr [ebp+Default]
		mov	edx, [eax]
		mov	[esp+220h+lpMultiByteStr], 1
		mov	[esp+220h+dwFlags], offset WideCharStr
		mov	[esp+220h+CodePage], eax
		call	dword ptr [edx+18h]
		sub	esp, 0Ch
		mov	ebx, eax

loc_402E53:				; CODE XREF: sub_40164F+179Fj
					; sub_40164F+17E2j
		mov	eax, dword ptr [ebp+Default]
		mov	edx, [eax]
		mov	[esp+22Ch+var_22C], eax
		call	dword ptr [edx+8]
		push	edi

loc_402E5F:				; CODE XREF: sub_40164F+16F2j
		mov	eax, [ebp+ppv]
		mov	edx, [eax]
		mov	[esp+230h+var_230], eax
		call	dword ptr [edx+8]
		test	ebx, ebx
		push	esi
		jns	short loc_402E86

loc_402E6F:				; CODE XREF: sub_40164F+16CCj
		mov	[esp+234h+var_234], 0FFFFFFF0h
		mov	esi, 1
		call	sub_401630
		push	ebx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402E86:				; CODE XREF: sub_40164F+181Ej
		mov	[esp+234h+var_234], 0FFFFFFF4h
		xor	esi, esi
		call	sub_401630
		push	ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402E9A:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 46
		call	sub_401414
		mov	ebx, eax
		mov	eax, 11h
		call	sub_401414
		mov	esi, eax
		mov	eax, 23h
		call	sub_401414
		mov	[esp+1D8h+lpBuffer], esi
		mov	[esp+1D8h+nCmdShow], ebx ; char
		mov	[esp+1D8h+nExitCode], offset aCopyfilesSS ; "CopyFiles \"%s\"->\"%s\""
		mov	edi, eax
		call	sub_408780
		mov	[esp+1D8h+nExitCode], ebx ; LPCSTR
		call	sub_4087D7
		test	eax, eax
		push	edx
		jnz	short loc_402EFC
		mov	[esp+1D8h+nCmdShow], 0
		mov	esi, 1
		mov	[esp+1D8h+nExitCode], 0FFFFFFF9h
		call	sub_407538
		push	edi
		push	edi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402EFC:				; CODE XREF: sub_40164F+188Bj
		mov	edx, [ebp+hWnd]
		mov	[esp+1D8h+nExitCode], ebx
		mov	[ebp+Rect.top],	2
		mov	[ebp+Rect.left], edx
		call	sub_4082BC
		push	edx
		mov	byte ptr [ebx+eax+1], 0
		mov	[esp+1DCh+lpFileTime2],	esi
		call	sub_4082BC
		push	ecx
		mov	byte ptr [esi+eax+1], 0
		mov	eax, [ebp+nNumberOfBytesToRead]
		mov	[ebp+Rect.bottom], esi
		mov	[ebp+Rect.right], ebx
		mov	[ebp+var_166], edi
		mov	[ebp+var_170], ax
		mov	[esp+1E0h+lpFileTime2],	edi
		mov	[esp+1E0h+lpFileName], 0
		call	sub_407538
		lea	eax, [ebp+Rect]
		push	ebx
		push	ebx
		mov	[esp+1E0h+lpFileName], eax ; lpFileOp
		call	ds:SHFileOperationA
		push	esi
		xor	esi, esi
		test	eax, eax
		jz	loc_403D9D
		mov	[esp+1E0h+lpFileTime2],	0
		mov	si, 1
		mov	[esp+1E0h+lpFileName], 0FFFFFFF9h
		call	sub_407538
		push	ecx
		push	ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402F95:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		cmp	esi, 0BADF00Dh	; jumptable 004016B3 case 47
		jz	short loc_402FC8

loc_402F9D:				; CODE XREF: sub_40164F+D0Fj
		mov	[esp+1D8h+nCmdShow], 0FFFFFFE8h	; int
		mov	[esp+1D8h+nExitCode], 0	; LPSTR
		call	sub_4083A6
		push	edx
		push	edx
		mov	[esp+1D8h+nCmdShow], 200010h
		mov	[esp+1D8h+nExitCode], eax

loc_402FBE:				; CODE XREF: sub_40164F+941j
		call	sub_407DB9
		jmp	loc_401E85
; ---------------------------------------------------------------------------

loc_402FC8:				; CODE XREF: sub_40164F+194Cj
		inc	ds:dword_428B1C
		xor	esi, esi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_402FD5:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	[esp+1D8h+nCmdShow], offset aRm	; jumptable 004016B3 case 48
		xor	ebx, ebx
		mov	[esp+1D8h+nExitCode], offset byte_40F404 ; LPSTR
		call	sub_408294
		push	esi
		push	esi
		mov	[esp+1D8h+nCmdShow], offset byte_40F404	; LPCSTR
		mov	[esp+1D8h+nExitCode], offset Buffer ; LPSTR
		call	sub_408294
		cmp	[ebp+hKey], 0
		push	edi
		push	edi
		jz	short loc_403012
		xor	eax, eax
		call	sub_401414
		mov	ebx, eax

loc_403012:				; CODE XREF: sub_40164F+19B8j
		xor	esi, esi
		cmp	[ebp+dwFileAttributes],	0
		jz	short loc_403026
		mov	eax, 11h
		call	sub_401414
		mov	esi, eax

loc_403026:				; CODE XREF: sub_40164F+19C9j
		xor	edi, edi
		cmp	[ebp+FileTime2.dwHighDateTime],	0
		jz	short loc_40303A
		mov	eax, 22h
		call	sub_401414
		mov	edi, eax

loc_40303A:				; CODE XREF: sub_40164F+19DDj
		mov	eax, 0FFFFFFCDh
		call	sub_401414
		mov	[esp+1D8h+lpFilePart], offset Buffer
		mov	[esp+1D8h+lpBuffer], offset byte_40F404
		mov	[esp+1D8h+nCmdShow], offset dword_40F004 ; char
		mov	[esp+1D8h+nExitCode], offset aWriteinistrWro ; "WriteINIStr: wrote [%s]	%s=%s in %s"
		mov	[esp+1D8h+var_1C8], eax
		mov	[ebp+lpString1], eax
		call	sub_408780
		mov	eax, [ebp+lpString1]
		mov	[esp+1D8h+nCmdShow], esi ; lpKeyName
		mov	[esp+1D8h+lpBuffer], edi ; lpString
		mov	[esp+1D8h+nExitCode], ebx ; lpAppName
		mov	[esp+1D8h+lpFilePart], eax ; lpFileName
		call	ds:WritePrivateProfileStringA
		xor	ecx, ecx
		sub	esp, 10h
		test	eax, eax
		setz	cl
		mov	esi, ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40309E:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 1		; jumptable 004016B3 case 49
		mov	dword ptr [ebp+Default], 7E4E21h
		call	sub_401414
		mov	esi, eax
		mov	eax, 12h
		call	sub_401414
		mov	edx, eax
		mov	eax, 0FFFFFFDDh
		mov	[ebp+lpString1], edx
		call	sub_401414
		mov	edx, [ebp+lpString1]
		mov	[esp+1D8h+nExitCode], esi ; lpAppName
		xor	esi, esi
		mov	[esp+1D8h+var_1C8], 3FFh ; nSize
		mov	[esp+1D8h+lpFilePart], edi ; lpReturnedString
		mov	[esp+1D8h+nCmdShow], edx ; lpKeyName
		mov	[esp+1D8h+uTimeout], eax ; lpFileName
		lea	eax, [ebp+Default]
		mov	[esp+1D8h+lpBuffer], eax ; lpDefault
		call	ds:GetPrivateProfileStringA
		mov	eax, dword ptr [ebp+Default]
		sub	esp, 18h
		cmp	ds:dword_42D000[ebx], eax
		jnz	loc_403D9D
		mov	byte ptr ds:dword_42D000[ebx], 0
		mov	si, 1
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40311B:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	[esp+1D8h+nExitCode], eax ; jumptable 004016B3 case 50
		call	sub_408687
		cmp	[ebp+FileTime2.dwHighDateTime],	0
		mov	esi, eax
		jnz	short loc_40318E
		mov	eax, 2
		call	sub_40148F
		test	eax, eax
		mov	ebx, eax
		jz	loc_4031D8
		mov	eax, 33h
		call	sub_401414
		mov	[esp+1D8h+nExitCode], ebx ; hKey
		mov	[esp+1D8h+nCmdShow], eax ; lpValueName
		mov	[ebp+lpString1], eax
		call	ds:RegDeleteValueA
		mov	edx, [ebp+lpString1]
		push	ecx
		mov	edi, eax
		push	ecx
		mov	[esp+1D8h+lpFilePart], edx
		mov	[esp+1D8h+lpBuffer], offset Buffer
		mov	[esp+1D8h+nCmdShow], esi ; char
		mov	[esp+1D8h+nExitCode], offset aDeleteregvalue ; "DeleteRegValue:	\"%s\\%s\" \"%s\""
		call	sub_408780
		mov	[esp+1D8h+nExitCode], ebx ; hKey
		call	ds:RegCloseKey
		push	ebx
		jmp	short loc_4031CE
; ---------------------------------------------------------------------------

loc_40318E:				; CODE XREF: sub_40164F+1ADAj
		mov	eax, 22h
		call	sub_401414
		mov	[esp+1D8h+nCmdShow], esi ; char
		mov	[esp+1D8h+nExitCode], offset aDeleteregkeySS ; "DeleteRegKey: \"%s\\%s\""
		mov	ebx, eax
		mov	[esp+1D8h+lpBuffer], eax
		call	sub_408780
		mov	ecx, [ebp+FileTime2.dwHighDateTime]
		mov	eax, [ebp+dwFileAttributes]
		and	ecx, 2
		test	eax, eax
		jnz	short loc_4031C5
		mov	eax, ds:dword_428B0C
		sub	eax, 7FFFFFFFh

loc_4031C5:				; CODE XREF: sub_40164F+1B6Aj
		mov	edx, ebx
		call	sub_4014F3
		mov	edi, eax

loc_4031CE:				; CODE XREF: sub_40164F+1B3Dj
		xor	esi, esi
		test	edi, edi
		jz	loc_403D9D

loc_4031D8:				; CODE XREF: sub_40164F+1AEAj
		mov	esi, 1
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4031E2:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		test	esi, esi	; jumptable 004016B3 case 51
		jnz	short loc_4031F2
		mov	esi, ds:dword_428B0C
		sub	esi, 7FFFFFFFh

loc_4031F2:				; CODE XREF: sub_40164F+1B95j
		mov	edx, [ebp+FileTime2.dwHighDateTime]
		mov	eax, 2
		mov	ecx, [ebp+var_28]
		mov	[ebp+lpString1], edx
		mov	[ebp+hWnd], ecx
		call	sub_401414
		mov	[ebp+lpszShortPath], eax
		mov	eax, 11h
		call	sub_401414
		mov	[esp+1D8h+nExitCode], esi
		mov	ebx, eax
		call	sub_408687
		mov	[esp+1D8h+lpdwDisposition], 0 ;	lpdwDisposition
		mov	[esp+1D8h+lpdwResult], 0 ; lpSecurityAttributes
		mov	[esp+1D8h+var_1C8], 0 ;	dwOptions
		mov	[esp+1D8h+lpFilePart], 0 ; lpClass
		mov	[esp+1D8h+lpBuffer], 0 ; Reserved
		mov	edi, eax
		lea	eax, [ebp+Default]
		mov	[esp+1D8h+phkResult], eax ; phkResult
		mov	eax, ds:dword_428B38
		mov	[esp+1D8h+nCmdShow], ebx ; lpSubKey
		mov	[esp+1D8h+nExitCode], esi ; hKey
		or	eax, 2
		mov	[esp+1D8h+uTimeout], eax ; samDesired
		call	ds:RegCreateKeyExA
		mov	edx, [ebp+lpString1]
		sub	esp, 24h
		test	eax, eax
		jnz	loc_403407
		cmp	edx, 1
		jnz	short loc_4032DA
		mov	al, 23h
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset Buffer
		call	sub_4082BC
		cmp	[ebp+hWnd], 1
		lea	esi, [eax+1]
		mov	eax, [ebp+lpszShortPath]
		push	edx
		mov	[esp+1DCh+lpFilePart], offset Buffer
		mov	[esp+1DCh+lpBuffer], eax
		mov	[esp+1DCh+nCmdShow], ebx
		mov	[esp+1DCh+nExitCode], edi
		jnz	short loc_4032CE
		mov	[esp+1DCh+lpFileTime2],	offset aWriteregstrSSS ; "WriteRegStr: \"%s\\%s\" \"%s\"=\"%s\""
		jmp	loc_403391
; ---------------------------------------------------------------------------

loc_4032CE:				; CODE XREF: sub_40164F+1C71j
		mov	[esp+1DCh+lpFileTime2],	offset aWriteregexpand ; "WriteRegExpandStr: \"%s\\%s\"	\"%s\"=\""...
		jmp	loc_403391
; ---------------------------------------------------------------------------

loc_4032DA:				; CODE XREF: sub_40164F+1C37j
		cmp	edx, 4
		jnz	short loc_403317
		mov	eax, 3
		mov	esi, 4
		call	sub_401463
		mov	[esp+1D8h+lpBuffer], ebx
		mov	[esp+1D8h+nCmdShow], edi ; char
		mov	[esp+1D8h+nExitCode], offset aWriteregdwordS ; "WriteRegDWORD: \"%s\\%s\" \"%s\"=\"0x%0"...
		mov	ds:Buffer, eax
		mov	[esp+1D8h+var_1C8], eax
		mov	eax, [ebp+lpszShortPath]
		mov	[esp+1D8h+lpFilePart], eax
		call	sub_408780
		jmp	short loc_403396
; ---------------------------------------------------------------------------

loc_403317:				; CODE XREF: sub_40164F+1C8Ej
		xor	esi, esi
		cmp	edx, 3
		jnz	short loc_403396
		mov	eax, [ebp+FileTime2.dwLowDateTime]
		mov	[esp+1D8h+lpFilePart], 0C00h ; nNumberOfBytesToRead
		mov	[esp+1D8h+lpBuffer], offset Buffer ; lpBuffer
		mov	[esp+1D8h+nCmdShow], 0 ; HANDLE
		mov	[esp+1D8h+nExitCode], eax ; int
		call	sub_4042B2
		sub	esp, 10h
		mov	esi, eax
		mov	[esp+1D8h+lpFilePart], eax ; int
		lea	eax, [ebp+Rect]
		mov	[esp+1D8h+nExitCode], eax ; LPSTR
		mov	[ebp+lpString1], eax
		mov	[esp+1D8h+lpBuffer], offset Buffer ; int
		mov	[esp+1D8h+nCmdShow], 80h ; int
		call	sub_4086F0
		mov	eax, [ebp+lpString1]
		mov	[esp+1D8h+lpBuffer], ebx
		mov	[esp+1D8h+nCmdShow], edi ; char
		mov	[esp+1D8h+nExitCode], offset aWriteregbinSSS ; "WriteRegBin: \"%s\\%s\"	\"%s\"=\"%s\""
		mov	[esp+1D8h+var_1C8], eax
		mov	eax, [ebp+lpszShortPath]
		mov	[esp+1D8h+lpFilePart], eax

loc_403391:				; CODE XREF: sub_40164F+1C7Aj
					; sub_40164F+1C86j
		call	sub_408780

loc_403396:				; CODE XREF: sub_40164F+1CC6j
					; sub_40164F+1CCDj
		mov	eax, [ebp+lpszShortPath]
		mov	edx, [ebp+hWnd]
		mov	[esp+1D8h+uTimeout], esi ; cbData
		xor	esi, esi
		mov	[esp+1D8h+var_1C8], offset Buffer ; lpData
		mov	[esp+1D8h+nCmdShow], eax ; lpValueName
		mov	eax, dword ptr [ebp+Default]
		mov	[esp+1D8h+lpFilePart], edx ; dwType
		mov	[esp+1D8h+lpBuffer], 0 ; Reserved
		mov	[esp+1D8h+nExitCode], eax ; hKey
		call	ds:RegSetValueExA
		sub	esp, 18h
		test	eax, eax
		jz	short loc_4033F5
		mov	eax, [ebp+lpszShortPath]
		mov	si, 1
		mov	[esp+1D8h+lpBuffer], ebx
		mov	[esp+1D8h+nCmdShow], edi ; char
		mov	[esp+1D8h+nExitCode], offset aWriteregErrorW ; "WriteReg: error	writing	into \"%s\\%s\""...
		mov	[esp+1D8h+lpFilePart], eax
		call	sub_408780

loc_4033F5:				; CODE XREF: sub_40164F+1D82j
		mov	eax, dword ptr [ebp+Default]
		mov	[esp+1D8h+nExitCode], eax ; hKey
		call	ds:RegCloseKey
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403407:				; CODE XREF: sub_40164F+1C2Ej
		mov	[esp+1D8h+lpBuffer], ebx
		mov	esi, 1
		mov	[esp+1D8h+nCmdShow], edi ; char
		mov	[esp+1D8h+nExitCode], offset aWriteregErrorC ; "WriteReg: error	creating key \"%s\\%s\""
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403425:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 20019h	; jumptable 004016B3 case 52
		mov	esi, 1
		call	sub_40148F
		mov	[ebp+lpszShortPath], eax
		mov	eax, 33h
		call	sub_401414
		cmp	[ebp+lpszShortPath], 0
		mov	byte ptr ds:dword_42D000[ebx], 0
		jz	loc_403D9D
		mov	[esp+1D8h+nCmdShow], eax ; lpValueName
		mov	eax, [ebp+lpszShortPath]
		lea	edx, [ebp+Default]
		mov	[esp+1D8h+uTimeout], edx ; lpcbData
		lea	edx, [ebp+ppv]
		mov	dword ptr [ebp+Default], 3FFh
		mov	[esp+1D8h+var_1C8], edi	; lpData
		mov	[esp+1D8h+lpFilePart], edx ; lpType
		mov	[esp+1D8h+lpBuffer], 0 ; lpReserved
		mov	[esp+1D8h+nExitCode], eax ; hKey
		call	ds:RegQueryValueExA
		sub	esp, 18h
		test	eax, eax
		jnz	short loc_4034A5
		mov	eax, [ebp+ppv]
		cmp	eax, 1
		jz	short loc_4034B3
		cmp	eax, 4
		jz	short loc_4034B3
		cmp	eax, 2
		jz	short loc_4034D9

loc_4034A5:				; CODE XREF: sub_40164F+1E42j
		mov	byte ptr ds:dword_42D000[ebx], 0
		mov	esi, 1
		jmp	short loc_4034E7
; ---------------------------------------------------------------------------

loc_4034B3:				; CODE XREF: sub_40164F+1E4Aj
					; sub_40164F+1E4Fj
		cmp	eax, 4
		jnz	short loc_4034D9
		mov	eax, ds:dword_42D000[ebx]
		xor	edx, edx
		cmp	[ebp+FileTime2.dwHighDateTime],	0
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		setz	dl
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	esi, edx
		call	sub_4081D0
		push	eax
		push	eax
		jmp	short loc_4034E7
; ---------------------------------------------------------------------------

loc_4034D9:				; CODE XREF: sub_40164F+1E54j
					; sub_40164F+1E67j
		mov	eax, dword ptr [ebp+Default]
		mov	esi, [ebp+FileTime2.dwHighDateTime]
		mov	byte ptr ds:dword_42D000[ebx+eax], 0

loc_4034E7:				; CODE XREF: sub_40164F+1E62j
					; sub_40164F+1E88j
		mov	eax, [ebp+lpszShortPath]
		mov	[esp+1D8h+nExitCode], eax ; hKey
		call	ds:RegCloseKey
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4034FC:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 20019h	; jumptable 004016B3 case 53
		mov	esi, 1
		call	sub_40148F
		mov	[ebp+lpszShortPath], eax
		mov	eax, 3
		call	sub_401463
		cmp	[ebp+lpszShortPath], 0
		mov	byte ptr ds:dword_42D000[ebx], 0
		jz	loc_403D9D
		cmp	[ebp+FileTime2.dwHighDateTime],	0
		mov	[ebp+ppv], 3FFh
		jz	short loc_403560
		mov	[esp+1D8h+nCmdShow], eax ; dwIndex
		mov	eax, [ebp+lpszShortPath]
		mov	[esp+1D8h+lpFilePart], 3FFh ; cchName
		mov	[esp+1D8h+lpBuffer], edi ; lpName
		mov	[esp+1D8h+nExitCode], eax ; hKey
		call	ds:RegEnumKeyA
		sub	esp, 10h
		jmp	short loc_4035A9
; ---------------------------------------------------------------------------

loc_403560:				; CODE XREF: sub_40164F+1EEBj
		mov	[esp+1D8h+nCmdShow], eax ; dwIndex
		mov	eax, [ebp+lpszShortPath]
		lea	edx, [ebp+ppv]
		mov	[esp+1D8h+phkResult], 0	; lpcbData
		mov	[esp+1D8h+lpdwResult], 0 ; lpData
		mov	[esp+1D8h+uTimeout], 0 ; lpType
		mov	[esp+1D8h+var_1C8], 0 ;	lpReserved
		mov	[esp+1D8h+lpFilePart], edx ; lpcchValueName
		mov	[esp+1D8h+lpBuffer], edi ; lpValueName
		mov	[esp+1D8h+nExitCode], eax ; hKey
		call	ds:RegEnumValueA
		sub	esp, 20h
		test	eax, eax
		jnz	loc_403D9D

loc_4035A9:				; CODE XREF: sub_40164F+1F0Fj
		mov	eax, [ebp+lpszShortPath]
		xor	esi, esi
		mov	byte ptr [edi+3FFh], 0
		mov	[esp+1D8h+nExitCode], eax ; hKey
		call	ds:RegCloseKey
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4035C7:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	esi, esi	; jumptable 004016B3 case 54
		cmp	byte ptr ds:dword_42D000[ebx], 0
		jz	loc_403D9D
		mov	[esp+1D8h+nExitCode], edi
		call	sub_4081F5
		push	ebx
		mov	[esp+1D8h+nExitCode], eax ; hObject
		call	ds:CloseHandle
		push	edi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4035EE:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFEDh	; jumptable 004016B3 case 55
		call	sub_401414
		mov	edx, [ebp+nNumberOfBytesToRead]
		mov	[esp+1D8h+lpBuffer], edx ; DWORD
		mov	edx, [ebp+dwFileAttributes]
		mov	[esp+1D8h+nExitCode], eax ; LPCSTR
		mov	[esp+1D8h+nCmdShow], edx ; DWORD
		call	sub_408059
		sub	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_403627
		mov	byte ptr ds:dword_42D000[ebx], 0
		mov	esi, 1
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403627:				; CODE XREF: sub_40164F+1FC5j
		mov	[esp+1D8h+nCmdShow], eax ; int
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		call	sub_4081D0
		push	ecx
		push	ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40363C:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		cmp	[ebp+nNumberOfBytesToRead], 0 ;	jumptable 004016B3 case	56
		jz	short loc_403658
		mov	eax, 1
		call	sub_401463
		mov	edx, 1
		mov	ds:byte_40F404,	al
		jmp	short loc_40366D
; ---------------------------------------------------------------------------

loc_403658:				; CODE XREF: sub_40164F+1FF1j
		mov	eax, 11h
		call	sub_401414
		mov	[esp+1D8h+nExitCode], eax
		call	sub_4082BC
		push	edx
		mov	edx, eax

loc_40366D:				; CODE XREF: sub_40164F+2007j
		cmp	byte ptr ds:dword_42D000[ebx], 0
		mov	esi, 1
		jz	loc_403D9D
		mov	[ebp+lpString1], edx
		mov	[esp+1DCh+lpFileTime2],	edi
		call	sub_4081F5
		mov	edx, [ebp+lpString1]
		lea	ecx, [ebp+ppv]
		push	esi
		mov	[esp+1DCh+nCmdShow], edx ; nNumberOfBytesToWrite
		mov	[esp+1DCh+lpFilePart], 0 ; lpOverlapped
		mov	[esp+1DCh+lpBuffer], ecx ; lpNumberOfBytesWritten
		mov	[esp+1DCh+nExitCode], offset byte_40F404 ; lpBuffer
		mov	[esp+1DCh+lpFileTime2],	eax ; hFile
		call	ds:WriteFile
		xor	edx, edx
		sub	esp, 14h
		test	eax, eax
		setz	dl
		mov	esi, edx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4036C9:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 2		; jumptable 004016B3 case 57
		call	sub_401463
		test	eax, eax
		jle	loc_403D9B
		cmp	eax, 3FFh
		mov	[ebp+hWnd], 3FFh
		cmovg	eax, [ebp+hWnd]
		xor	esi, esi
		cmp	byte ptr ds:dword_42D000[ebx], 0
		mov	[ebp+hWnd], eax
		jz	loc_4037F5
		mov	[esp+1D8h+nExitCode], edi
		call	sub_4081F5
		lea	edx, [ebp+ppv]
		lea	ecx, [ebp+Default]
		push	ebx
		mov	edi, eax
		xor	ebx, ebx

loc_403719:				; CODE XREF: sub_40164F+21A0j
		mov	[esp+1D8h+lpFilePart], edx ; lpNumberOfBytesRead
		mov	[esp+1D8h+nCmdShow], ecx ; lpBuffer
		mov	[ebp+lpString1], edx
		mov	[ebp+var_1A4], ecx
		mov	[esp+1D8h+var_1C8], 0 ;	lpOverlapped
		mov	[esp+1D8h+lpBuffer], 1 ; nNumberOfBytesToRead
		mov	[esp+1D8h+nExitCode], edi ; hFile
		call	ds:ReadFile
		mov	edx, [ebp+lpString1]
		mov	ecx, [ebp+var_1A4]
		sub	esp, 14h
		test	eax, eax
		jz	loc_4037F5
		cmp	[ebp+ppv], 1
		jnz	loc_4037F5
		cmp	[ebp+FileTime2.dwLowDateTime], 0
		jz	short loc_40378A
		mov	ecx, [ebp+lpszShortPath]
		movzx	eax, [ebp+Default]
		mov	[esp+1D8h+nExitCode], ecx ; LPSTR
		mov	[esp+1D8h+nCmdShow], eax ; int
		call	sub_4081D0
		push	ecx
		push	ecx
		jmp	loc_403DA3
; ---------------------------------------------------------------------------

loc_40378A:				; CODE XREF: sub_40164F+211Cj
		cmp	bl, 0Ah
		mov	al, [ebp+Default]
		jz	short loc_403797
		cmp	bl, 0Dh
		jnz	short loc_4037D9

loc_403797:				; CODE XREF: sub_40164F+2141j
		cmp	bl, al
		jz	short loc_4037A3
		cmp	al, 0Ah
		jz	short loc_4037C9
		cmp	al, 0Dh
		jz	short loc_4037C9

loc_4037A3:				; CODE XREF: sub_40164F+214Aj
		mov	[esp+1D8h+lpFilePart], 1 ; dwMoveMethod
		mov	[esp+1D8h+lpBuffer], 0 ; lpDistanceToMoveHigh
		mov	[esp+1D8h+nCmdShow], 0FFFFFFFFh	; lDistanceToMove
		mov	[esp+1D8h+nExitCode], edi ; hFile
		call	ds:SetFilePointer
		sub	esp, 10h
		jmp	short loc_4037F5
; ---------------------------------------------------------------------------

loc_4037C9:				; CODE XREF: sub_40164F+214Ej
					; sub_40164F+2152j
		mov	ebx, [ebp+var_198]
		mov	byte ptr ds:dword_42D000[esi+ebx], al
		inc	esi
		jmp	short loc_4037F5
; ---------------------------------------------------------------------------

loc_4037D9:				; CODE XREF: sub_40164F+2146j
		mov	ebx, [ebp+lpszShortPath]
		mov	[ebx+esi], al
		inc	esi
		test	al, al
		mov	bl, al
		jz	short loc_4037F5
		cmp	esi, [ebp+hWnd]
		jl	loc_403719

loc_4037F5:				; CODE XREF: sub_40164F+20B1j
					; sub_40164F+2108j ...
		mov	edx, [ebp+var_198]
		xor	ecx, ecx
		test	esi, esi
		setz	cl
		mov	byte ptr ds:dword_42D000[esi+edx], 0
		mov	esi, ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403811:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	esi, esi	; jumptable 004016B3 case 58
		cmp	byte ptr ds:dword_42D000[ebx], 0
		jz	loc_403D9D
		mov	eax, 2
		mov	ebx, [ebp+FileTime2.dwLowDateTime]
		call	sub_401463
		mov	[esp+1D8h+nExitCode], edi
		mov	[ebp+lpString1], eax
		call	sub_4081F5
		push	edx
		mov	edx, [ebp+lpString1]
		mov	[esp+1D8h+lpFilePart], ebx ; dwMoveMethod
		mov	[esp+1D8h+lpBuffer], 0 ; lpDistanceToMoveHigh
		mov	[esp+1D8h+nCmdShow], edx ; lDistanceToMove
		mov	[esp+1D8h+nExitCode], eax ; hFile
		call	ds:SetFilePointer
		sub	esp, 10h
		cmp	[ebp+dwFileAttributes],	0
		js	loc_403D9D
		mov	ebx, [ebp+lpszShortPath]
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	[esp+1D8h+nExitCode], ebx ; LPSTR
		call	sub_4081D0
		push	edi
		push	edi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403881:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	esi, esi	; jumptable 004016B3 case 59
		cmp	byte ptr ds:dword_42D000[ebx], 0
		jz	loc_403D9D
		mov	[esp+1D8h+nExitCode], edi
		call	sub_4081F5
		push	ecx
		mov	[esp+1D8h+nExitCode], eax ; hFindFile
		call	ds:FindClose
		push	ebx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4038A8:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	esi, [ebp+var_198] ; jumptable 004016B3	case 60
		cmp	byte ptr ds:dword_42D000[esi], 0
		jz	short loc_4038FA
		mov	edx, [ebp+lpszShortPath]
		mov	[esp+1D8h+nExitCode], edx
		call	sub_4081F5
		lea	edx, [ebp+Rect]
		push	esi
		mov	[esp+1D8h+nCmdShow], edx ; lpFindFileData
		mov	[esp+1D8h+nExitCode], eax ; hFindFile
		call	ds:FindNextFileA
		test	eax, eax
		push	edx
		push	edx
		jz	short loc_4038FA
		lea	eax, [ebp+var_154]
		xor	esi, esi
		mov	[esp+1D8h+nCmdShow], eax ; LPCSTR
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		call	sub_408294
		push	ecx
		push	ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_4038FA:				; CODE XREF: sub_40164F+2266j
					; sub_40164F+228Ej
		mov	byte ptr ds:dword_42D000[ebx], 0
		mov	esi, 1
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40390B:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 2		; jumptable 004016B3 case 61
		call	sub_401414
		lea	edx, [ebp+Rect]
		mov	[esp+1D8h+nCmdShow], edx ; lpFindFileData
		mov	[esp+1D8h+nExitCode], eax ; lpFileName
		call	ds:FindFirstFileA
		cmp	eax, 0FFFFFFFFh
		push	edx
		push	edx
		jnz	short loc_40394D
		mov	ecx, [ebp+var_198]
		mov	esi, 1
		mov	byte ptr ds:dword_42D000[ecx], 0
		mov	byte ptr ds:dword_42D000[ebx], 0
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40394D:				; CODE XREF: sub_40164F+22DEj
		mov	ebx, [ebp+lpszShortPath]
		xor	esi, esi
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	[esp+1D8h+nExitCode], ebx ; LPSTR
		call	sub_4081D0
		push	eax
		push	eax
		lea	eax, [ebp+var_154]
		mov	[esp+1D8h+nCmdShow], eax ; LPCSTR
		mov	[esp+1D8h+nExitCode], edi ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_40397C:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	eax, 0FFFFFFF0h	; jumptable 004016B3 case 62
		call	sub_401414
		mov	ebx, eax
		mov	[esp+1D8h+nExitCode], eax
		call	sub_407EE1
		test	eax, eax
		push	edi
		jnz	short loc_40399F
		mov	eax, 0FFFFFFEDh
		call	sub_401414

loc_40399F:				; CODE XREF: sub_40164F+2344j
		mov	[esp+1D8h+nExitCode], ebx ; LPCSTR
		call	sub_408027
		push	esi
		mov	[esp+1D8h+lpBuffer], 2 ; DWORD
		mov	[esp+1D8h+nCmdShow], 40000000h ; DWORD
		mov	[esp+1D8h+nExitCode], ebx ; LPCSTR
		call	sub_408059
		mov	[ebp+lpszShortPath], 0FFFFFD66h
		sub	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		mov	edi, eax
		jz	loc_403B34
		mov	esi, ds:dwBytes
		mov	edx, ds:GlobalAlloc
		mov	[esp+1D8h+nExitCode], 40h ; uFlags
		mov	[ebp+hWnd], esi
		mov	[esp+1D8h+nCmdShow], esi ; dwBytes
		mov	[ebp+var_18C], edx
		call	edx ; GlobalAlloc
		test	eax, eax
		mov	esi, eax
		push	ecx
		push	ecx
		jz	loc_403B2A
		mov	[esp+1D8h+nExitCode], 0	; LONG
		call	sub_404091
		mov	ecx, [ebp+hWnd]
		push	eax
		mov	[esp+1D8h+nCmdShow], ecx ; DWORD
		mov	[esp+1D8h+nExitCode], esi ; LPVOID
		call	sub_404045
		push	eax
		push	eax
		mov	eax, [ebp+nNumberOfBytesToRead]
		mov	[esp+1D8h+nExitCode], 40h
		mov	[esp+1D8h+nCmdShow], eax
		call	[ebp+var_18C]
		test	eax, eax
		push	edx
		push	edx
		mov	edx, eax
		jz	loc_403ACE
		mov	eax, [ebp+nNumberOfBytesToRead]
		mov	[esp+1E0h+nExitCode], edx ; lpBuffer
		mov	[ebp+lpString1], edx
		mov	[esp+1E0h+lpFileTime2],	0 ; HANDLE
		mov	[esp+1E0h+nCmdShow], eax ; nNumberOfBytesToRead
		mov	eax, [ebp+dwFileAttributes]
		mov	[esp+1E0h+lpFileName], eax ; int
		call	sub_4042B2
		mov	edx, [ebp+lpString1]
		mov	eax, edx
		mov	[ebp+lpszShortPath], edx
		sub	esp, 10h
		jmp	short loc_403AB9
; ---------------------------------------------------------------------------

loc_403A81:				; CODE XREF: sub_40164F+246Dj
		mov	edx, [eax]
		lea	ecx, [eax+8]
		mov	[esp+1E0h+lpFileTime2],	ecx
		mov	[esp+1E0h+nExitCode], edx
		mov	eax, [eax+4]
		mov	[ebp+lpString1], edx
		mov	[ebp+var_1A4], ecx
		add	eax, esi
		mov	[esp+1E0h+lpFileName], eax
		call	sub_407FFE
		mov	edx, [ebp+lpString1]
		mov	ecx, [ebp+var_1A4]
		lea	eax, [ecx+edx]
		sub	esp, 0Ch

loc_403AB9:				; CODE XREF: sub_40164F+2430j
		cmp	byte ptr [eax],	0
		jnz	short loc_403A81
		mov	edx, [ebp+lpszShortPath]
		mov	[esp+1E0h+lpFileName], edx ; hMem
		call	ds:GlobalFree
		push	eax

loc_403ACE:				; CODE XREF: sub_40164F+23F5j
		mov	edx, [ebp+hWnd]
		lea	eax, [ebp+Default]
		mov	[esp+1E0h+lpBuffer], 0 ; lpOverlapped
		mov	[esp+1E0h+nCmdShow], eax ; lpNumberOfBytesWritten
		mov	[esp+1E0h+lpFileTime2],	esi ; lpBuffer
		mov	[esp+1E0h+nExitCode], edx ; nNumberOfBytesToWrite
		mov	[esp+1E0h+lpFileName], edi ; hFile
		call	ds:WriteFile
		sub	esp, 14h
		mov	[esp+1E0h+lpFileName], esi ; hMem
		call	ds:GlobalFree
		push	ecx
		mov	[esp+1E0h+nCmdShow], 0 ; nNumberOfBytesToRead
		mov	[esp+1E0h+nExitCode], 0	; lpBuffer
		mov	[esp+1E0h+lpFileTime2],	edi ; HANDLE
		mov	[esp+1E0h+lpFileName], 0FFFFFFFFh ; int
		call	sub_4042B2
		sub	esp, 10h
		mov	[ebp+lpszShortPath], eax

loc_403B2A:				; CODE XREF: sub_40164F+23B4j
		mov	[esp+1E0h+lpFileName], edi ; hObject
		call	ds:CloseHandle
		push	edx

loc_403B34:				; CODE XREF: sub_40164F+2383j
		mov	eax, [ebp+lpszShortPath]
		mov	[esp+1E0h+nExitCode], ebx
		mov	[esp+1E0h+lpFileName], offset aCreatedUninsta ;	"created uninstaller: %d, \"%s\""
		mov	[esp+1E0h+lpFileTime2],	eax ; char
		call	sub_408780
		cmp	[ebp+lpszShortPath], 0
		jns	short loc_403B6D
		mov	[esp+1E0h+lpFileName], ebx ; lpFileName
		mov	esi, 1
		call	ds:DeleteFileA
		push	eax
		mov	eax, 0FFFFFFEFh
		jmp	short loc_403B74
; ---------------------------------------------------------------------------

loc_403B6D:				; CODE XREF: sub_40164F+2506j
		mov	eax, 0FFFFFFF3h
		xor	esi, esi

loc_403B74:				; CODE XREF: sub_40164F+251Cj
		mov	[esp+1E0h+lpFileName], eax
		call	sub_401630
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403B82:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		test	esi, esi	; jumptable 004016B3 case 63
		jz	short loc_403BB5
		mov	[esp+1D8h+nCmdShow], eax ; char
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], offset aSettingsLoggin ; "settings logging to %d"
		call	sub_408780
		mov	eax, [ebp+dwFileAttributes]
		mov	[esp+1D8h+nExitCode], offset aLoggingSetToD ; "logging set to %d"
		mov	ds:dword_42A3D0, eax
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403BB5:				; CODE XREF: sub_40164F+2535j
		mov	eax, 1
		xor	esi, esi
		call	sub_401414
		mov	[esp+1D8h+nExitCode], offset aS	; "%s"
		mov	[esp+1D8h+nCmdShow], eax ; char
		call	sub_408780
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403BD6:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 64
		mov	esi, 1
		call	sub_401463
		cmp	eax, ds:dword_428B58
		mov	edi, eax
		jnb	loc_403D9D
		imul	ebx, eax, 418h
		mov	eax, [ebp+nNumberOfBytesToRead]
		add	ebx, ds:dword_428B54
		cmp	eax, 0
		jl	short loc_403C43
		mov	eax, [ebx+eax*4]
		jnz	short loc_403C28
		mov	edx, [ebp+lpszShortPath]
		add	ebx, 18h
		xor	si, si
		mov	[esp+1D8h+nCmdShow], ebx ; LPCSTR
		mov	[esp+1D8h+nExitCode], edx ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403C28:				; CODE XREF: sub_40164F+25B8j
		mov	ecx, [ebp+lpszShortPath]
		xor	esi, esi
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	[esp+1D8h+nExitCode], ecx ; LPSTR
		call	sub_4081D0
		push	eax
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403C43:				; CODE XREF: sub_40164F+25B3j
		not	eax
		test	eax, eax
		mov	[ebp+nNumberOfBytesToRead], eax
		jz	short loc_403C5B
		mov	eax, 1
		call	sub_401463
		mov	[ebp+dwFileAttributes],	eax
		jmp	short loc_403C76
; ---------------------------------------------------------------------------

loc_403C5B:				; CODE XREF: sub_40164F+25FBj
		mov	eax, [ebp+FileTime2.dwHighDateTime]
		mov	[esp+1D8h+nCmdShow], eax ; int
		lea	eax, [ebx+18h]
		mov	[esp+1D8h+nExitCode], eax ; LPSTR
		call	sub_4083A6
		push	eax
		push	eax
		or	dword ptr [ebx+8], 100h

loc_403C76:				; CODE XREF: sub_40164F+260Aj
		mov	eax, [ebp+nNumberOfBytesToRead]
		xor	esi, esi
		mov	edx, [ebp+dwFileAttributes]
		mov	[ebx+eax*4], edx
		cmp	[ebp+FileTime2.dwLowDateTime], 0
		jz	loc_403D9D
		mov	[esp+1D8h+nExitCode], edi
		call	sub_401220
		push	eax
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403C99:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		xor	eax, eax	; jumptable 004016B3 case 65
		mov	esi, 1
		call	sub_401463
		cmp	eax, 1Fh
		ja	loc_403D9D
		cmp	[ebp+FileTime2.dwLowDateTime], 0
		jz	short loc_403D09
		cmp	[ebp+nNumberOfBytesToRead], 0
		jz	short loc_403CE1
		mov	[esp+1D8h+nExitCode], eax
		xor	si, si
		call	sub_40133F
		push	ebx
		mov	[esp+1D8h+nCmdShow], 0
		mov	[esp+1D8h+nExitCode], 0
		call	sub_40128F
		push	edi
		push	edi
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403CE1:				; CODE XREF: sub_40164F+2669j
		mov	[esp+1D8h+nExitCode], 0
		xor	esi, esi
		call	sub_401388
		mov	ebx, [ebp+lpszShortPath]
		push	edx
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	[esp+1D8h+nExitCode], ebx ; LPSTR
		call	sub_4081D0
		push	ecx
		push	ecx
		jmp	loc_403D9D
; ---------------------------------------------------------------------------

loc_403D09:				; CODE XREF: sub_40164F+2663j
		cmp	[ebp+nNumberOfBytesToRead], 0
		mov	edx, ds:dword_428B48
		lea	eax, [eax+24h]
		jz	short loc_403D23
		mov	ecx, [ebp+dwFileAttributes]
		xor	esi, esi
		mov	[edx+eax*4+4], ecx
		jmp	short loc_403D9D
; ---------------------------------------------------------------------------

loc_403D23:				; CODE XREF: sub_40164F+26C7j
		mov	eax, [edx+eax*4+4]
		mov	esi, [ebp+lpszShortPath]
		mov	[esp+1D8h+nCmdShow], eax ; int
		mov	[esp+1D8h+nExitCode], esi ; LPSTR
		xor	esi, esi
		call	sub_4083A6
		push	eax
		push	eax
		jmp	short loc_403D9D
; ---------------------------------------------------------------------------

loc_403D3F:				; CODE XREF: sub_40164F+64j
					; DATA XREF: .rdata:off_40C5FCo
		mov	edx, [ebp+hWnd]	; jumptable 004016B3 case 68
		and	esi, ds:dword_4250EC
		mov	[esp+1D8h+lpFilePart], 0 ; lParam
		mov	[esp+1D8h+nCmdShow], 0Bh ; Msg
		mov	[esp+1D8h+lpBuffer], esi ; wParam
		xor	esi, esi
		mov	[esp+1D8h+nExitCode], edx ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		cmp	[ebp+hKey], 0
		jz	short loc_403D9D
		mov	ebx, [ebp+hWnd]
		mov	[esp+1D8h+lpBuffer], 0 ; bErase
		mov	[esp+1D8h+nCmdShow], 0 ; lpRect
		mov	[esp+1D8h+nExitCode], ebx ; hWnd
		call	ds:InvalidateRect
		sub	esp, 0Ch
		jmp	short loc_403D9D
; ---------------------------------------------------------------------------

loc_403D97:				; CODE XREF: sub_40164F+5Ej
					; sub_40164F+64j
					; DATA XREF: ...
		xor	esi, esi	; jumptable 004016B3 default case
		jmp	short loc_403D9D
; ---------------------------------------------------------------------------

loc_403D9B:				; CODE XREF: sub_40164F+2086j
		xor	esi, esi

loc_403D9D:				; CODE XREF: sub_40164F+145j
					; sub_40164F+179j ...
		add	ds:dword_428B10, esi

loc_403DA3:				; CODE XREF: sub_40164F+811j
					; sub_40164F+2136j
		xor	eax, eax

loc_403DA5:				; CODE XREF: sub_40164F+7Ej
					; sub_40164F+BFj ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_40164F	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_403DAD(int,	HWND hWnd)
sub_403DAD	proc near		; CODE XREF: sub_40164F+10Bp
					; sub_403E5D+1Dp ...

nNumber		= dword	ptr -28h
nNumerator	= dword	ptr -24h
nDenominator	= dword	ptr -20h
lParam		= dword	ptr -1Ch
arg_0		= dword	ptr  8
hWnd		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+hWnd]
		mov	edi, ds:SendMessageA
		jmp	short loc_403E42
; ---------------------------------------------------------------------------

loc_403DC4:				; CODE XREF: sub_403DAD+97j
		imul	eax, ebx, 1Ch
		add	eax, ds:dword_428B5C
		cmp	dword ptr [eax], 1
		jz	short loc_403E4A
		call	sub_40164F
		cmp	eax, 7FFFFFFFh
		jz	short loc_403E4E
		mov	[esp+28h+nNumber], eax
		call	sub_40160F
		test	eax, eax
		push	edx
		jnz	short loc_403DF0
		inc	ebx
		mov	al, 1
		jmp	short loc_403DF9
; ---------------------------------------------------------------------------

loc_403DF0:				; CODE XREF: sub_403DAD+3Cj
		lea	edx, [eax-1]
		mov	eax, edx
		sub	eax, ebx
		mov	ebx, edx

loc_403DF9:				; CODE XREF: sub_403DAD+41j
		test	esi, esi
		jz	short loc_403E42
		mov	edx, ds:nDenominator
		add	eax, ds:dword_4293B4
		mov	[esp+28h+nNumerator], 7530h ; nNumerator
		mov	[esp+28h+nDenominator],	edx ; nDenominator
		mov	ds:dword_4293B4, eax
		mov	[esp+28h+nNumber], eax ; nNumber
		call	ds:MulDiv
		sub	esp, 0Ch
		mov	[esp+28h+lParam], 0 ; lParam
		mov	[esp+28h+nDenominator],	eax ; wParam
		mov	[esp+28h+nNumerator], 402h ; Msg
		mov	[esp+28h+nNumber], esi ; hWnd
		call	edi ; SendMessageA
		sub	esp, 10h

loc_403E42:				; CODE XREF: sub_403DAD+15j
					; sub_403DAD+4Ej
		test	ebx, ebx
		jns	loc_403DC4

loc_403E4A:				; CODE XREF: sub_403DAD+23j
		xor	eax, eax
		jmp	short loc_403E53
; ---------------------------------------------------------------------------

loc_403E4E:				; CODE XREF: sub_403DAD+2Fj
		mov	eax, 7FFFFFFFh

loc_403E53:				; CODE XREF: sub_403DAD+9Fj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_403DAD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403E5D	proc near		; CODE XREF: start+619p sub_4054A3+62p ...

var_18		= dword	ptr -18h
hWnd		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_428B48
		mov	edx, [ebp+arg_0]
		mov	[esp+18h+hWnd],	0 ; hWnd
		mov	eax, [eax+edx*4+6Ch]
		mov	[esp+18h+var_18], eax ;	int
		call	sub_403DAD
		push	ecx
		push	ecx
		leave
		retn	4
sub_403E5D	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403E88	proc near		; CODE XREF: DialogFunc:loc_403EFCp
					; sub_403F5A+6Ep

nNumber		= dword	ptr -18h
nNumerator	= dword	ptr -14h
nDenominator	= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_410C44
		cmp	ds:nNumber, eax
		mov	[esp+18h+nNumerator], 64h ; nNumerator
		mov	[esp+18h+nDenominator],	eax ; nDenominator
		cmovle	eax, ds:nNumber
		mov	[esp+18h+nNumber], eax ; nNumber
		call	ds:MulDiv
		sub	esp, 0Ch
		leave
		retn
sub_403E88	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; INT_PTR __stdcall DialogFunc(HWND, UINT, WPARAM, LPARAM)
DialogFunc	proc near		; DATA XREF: sub_403F5A+AAo

hWnd		= dword	ptr -58h
nIDEvent	= dword	ptr -54h
uElapse		= dword	ptr -50h
lpTimerFunc	= dword	ptr -4Ch
String		= byte ptr -48h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 50h
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		cmp	eax, 110h
		jnz	short loc_403EF5
		mov	[esp+58h+lpTimerFunc], 0 ; lpTimerFunc
		mov	[esp+58h+uElapse], 0FAh	; uElapse
		mov	[esp+58h+nIDEvent], 1 ;	nIDEvent
		mov	[esp+58h+hWnd],	ebx ; hWnd
		call	ds:SetTimer
		sub	esp, 10h
		jmp	short loc_403EFC
; ---------------------------------------------------------------------------

loc_403EF5:				; CODE XREF: DialogFunc+13j
		cmp	eax, 113h
		jnz	short loc_403F4F

loc_403EFC:				; CODE XREF: DialogFunc+39j
		call	sub_403E88
		mov	ecx, offset aVerifyingInsta ; "verifying installer: %d%%"
		mov	edx, offset aUnpackingDataD ; "unpacking data: %d%%"
		cmp	ds:dword_428B48, 0
		lea	esi, [ebp+String]
		mov	[esp+58h+hWnd],	esi ; LPSTR
		cmovz	edx, ecx
		mov	[esp+58h+nIDEvent], edx	; LPCSTR
		mov	[esp+58h+uElapse], eax
		call	ds:wsprintfA
		mov	[esp+58h+nIDEvent], esi	; lpString
		mov	[esp+58h+hWnd],	ebx ; hWnd
		call	ds:SetWindowTextA
		push	eax
		push	eax
		mov	[esp+58h+uElapse], esi
		mov	[esp+58h+nIDEvent], 406h
		mov	[esp+58h+hWnd],	ebx
		call	sub_407D7D
		sub	esp, 0Ch

loc_403F4F:				; CODE XREF: DialogFunc+40j
		lea	esp, [ebp-8]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	ebp
		retn	10h
DialogFunc	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403F5A	proc near		; CODE XREF: sub_4040C3+F7p
					; sub_4040C3+1CDp ...

hWnd		= dword	ptr -68h
lpTemplateName	= dword	ptr -64h
hWndParent	= dword	ptr -60h
lpDialogFunc	= dword	ptr -5Ch
dwInitParam	= dword	ptr -58h
var_48		= byte ptr -48h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 64h
		cmp	[ebp+arg_0], 0
		jz	short loc_403F89
		mov	eax, ds:dword_410C4C
		test	eax, eax
		jz	short loc_403F7A
		mov	[esp+68h+hWnd],	eax ; hWnd
		call	ds:DestroyWindow
		push	ebx

loc_403F7A:				; CODE XREF: sub_403F5A+14j
		mov	ds:dword_410C4C, 0
		jmp	loc_404040
; ---------------------------------------------------------------------------

loc_403F89:				; CODE XREF: sub_403F5A+Bj
		cmp	ds:dword_410C4C, 0
		jz	short loc_403FA4
		mov	[esp+68h+hWnd],	0 ; UINT
		call	sub_408F75
		push	ecx
		jmp	loc_404040
; ---------------------------------------------------------------------------

loc_403FA4:				; CODE XREF: sub_403F5A+36j
		call	ds:GetTickCount
		cmp	eax, ds:dword_428B8C
		jbe	loc_404040
		cmp	ds:hwnd, 0
		jz	short loc_403FF7
		test	byte ptr ds:dword_428B3C, 1
		jz	short loc_404040
		call	sub_403E88
		lea	ebx, [ebp+var_48]
		mov	[esp+68h+hWnd],	ebx ; LPSTR
		mov	[esp+68h+lpTemplateName], offset a___D ; "... %d%%"
		mov	[esp+68h+hWndParent], eax
		call	ds:wsprintfA
		mov	[esp+68h+lpTemplateName], ebx
		mov	[esp+68h+hWnd],	0
		call	sub_407538
		jmp	short loc_40403E
; ---------------------------------------------------------------------------

loc_403FF7:				; CODE XREF: sub_403F5A+63j
		mov	eax, ds:hInstance
		mov	[esp+68h+dwInitParam], 0 ; dwInitParam
		mov	[esp+68h+lpDialogFunc],	offset DialogFunc ; lpDialogFunc
		mov	[esp+68h+hWndParent], 0	; hWndParent
		mov	[esp+68h+lpTemplateName], 6Fh ;	lpTemplateName
		mov	[esp+68h+hWnd],	eax ; hInstance
		call	ds:CreateDialogParamA
		sub	esp, 14h
		mov	ds:dword_410C4C, eax
		mov	[esp+68h+lpTemplateName], 5 ; nCmdShow
		mov	[esp+68h+hWnd],	eax ; hWnd
		call	ds:ShowWindow

loc_40403E:				; CODE XREF: sub_403F5A+9Bj
		push	edx
		push	edx

loc_404040:				; CODE XREF: sub_403F5A+2Aj
					; sub_403F5A+45j ...
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_403F5A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_404045(LPVOID, DWORD)
sub_404045	proc near		; CODE XREF: sub_40164F+23D4p
					; sub_4040C3+A1p ...

hFile		= dword	ptr -38h
lpBuffer	= dword	ptr -34h
nNumberOfBytesToRead= dword ptr	-30h
lpNumberOfBytesRead= dword ptr -2Ch
lpOverlapped	= dword	ptr -28h
NumberOfBytesRead= dword ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	ebx, [ebp+arg_4]
		lea	eax, [ebp+NumberOfBytesRead]
		mov	[esp+38h+lpNumberOfBytesRead], eax ; lpNumberOfBytesRead
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+lpOverlapped],	0 ; lpOverlapped
		mov	[esp+38h+nNumberOfBytesToRead],	ebx ; nNumberOfBytesToRead
		mov	[esp+38h+lpBuffer], eax	; lpBuffer
		mov	eax, hObject
		mov	[esp+38h+hFile], eax ; hFile
		call	ds:ReadFile
		xor	edx, edx
		sub	esp, 14h
		test	eax, eax
		jz	short loc_404088
		xor	edx, edx
		cmp	[ebp+NumberOfBytesRead], ebx
		setz	dl

loc_404088:				; CODE XREF: sub_404045+39j
		mov	eax, edx
		mov	ebx, [ebp+var_4]
		leave
		retn	8
sub_404045	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_404091(LONG)
sub_404091	proc near		; CODE XREF: sub_40164F+23C1p
					; sub_4040C3+3Cp ...

hFile		= dword	ptr -18h
lDistanceToMove	= dword	ptr -14h
lpDistanceToMoveHigh= dword ptr	-10h
dwMoveMethod	= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+dwMoveMethod],	0 ; dwMoveMethod
		mov	[esp+18h+lpDistanceToMoveHigh],	0 ; lpDistanceToMoveHigh
		mov	[esp+18h+lDistanceToMove], eax ; lDistanceToMove
		mov	eax, hObject
		mov	[esp+18h+hFile], eax ; hFile
		call	ds:SetFilePointer
		sub	esp, 10h
		leave
		retn	4
sub_404091	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4040C3	proc near		; CODE XREF: sub_4042B2+45p
					; sub_4042B2+A6p

hFile		= dword	ptr -58h
lDistanceToMove	= dword	ptr -54h
lpDistanceToMoveHigh= dword ptr	-50h
dwMoveMethod	= dword	ptr -4Ch
lpOverlapped	= dword	ptr -48h
var_2C		= dword	ptr -2Ch
NumberOfBytesWritten= dword ptr	-1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:dword_418CE0
		add	ebx, eax
		sub	ebx, ds:lDistanceToMove
		call	ds:GetTickCount
		add	eax, 1F4h
		test	ebx, ebx
		mov	ds:dword_428B8C, eax
		jle	loc_404289
		mov	eax, ds:dword_418CD8
		lea	edi, [ebp+NumberOfBytesWritten]
		mov	[esp+58h+hFile], eax ; LONG
		call	sub_404091
		mov	eax, ds:lDistanceToMove
		push	ecx
		mov	[esp+58h+lDistanceToMove], eax ; lDistanceToMove
		mov	eax, dword_40B010
		mov	[esp+58h+dwMoveMethod],	0 ; dwMoveMethod
		mov	[esp+58h+lpDistanceToMoveHigh],	0 ; lpDistanceToMoveHigh
		mov	[esp+58h+hFile], eax ; hFile
		call	ds:SetFilePointer
		mov	ds:dword_410C44, ebx
		mov	ds:nNumber, 0
		sub	esp, 10h

loc_40413F:				; CODE XREF: sub_4040C3+19Bj
		mov	ebx, ds:dword_418CDC
		mov	eax, 4000h
		sub	ebx, ds:dword_418CD8
		mov	[esp+58h+hFile], offset	dword_418CE4 ; LPVOID
		cmp	ebx, 4000h
		cmovg	ebx, eax
		mov	[esp+58h+lDistanceToMove], ebx ; DWORD
		call	sub_404045
		test	eax, eax
		push	edx
		push	edx
		jz	loc_404299
		add	ds:dword_418CD8, ebx
		mov	ds:dword_418C68, offset	dword_418CE4
		mov	ds:dword_418C6C, ebx

loc_404189:				; CODE XREF: sub_4040C3+175j
		cmp	ds:dword_428B48, 0
		jz	short loc_4041BF
		cmp	ds:dword_428B28, 0
		jnz	short loc_4041BF
		mov	eax, ds:lDistanceToMove
		sub	eax, ds:dword_418CE0
		mov	[esp+58h+hFile], 0
		sub	eax, esi
		add	eax, ds:dword_410C44
		mov	ds:nNumber, eax
		call	sub_403F5A

loc_4041BF:				; CODE XREF: sub_4040C3+CDj
					; sub_4040C3+D6j
		mov	ecx, offset dword_418C50
		mov	ds:dword_418C70, offset	dword_41CCE8
		mov	ds:dword_418C74, 8000h
		call	sub_409062
		test	eax, eax
		js	loc_4042A5
		mov	edx, ds:dword_418C70
		sub	edx, offset dword_41CCE8
		jz	short loc_404240
		mov	eax, dword_40B010
		mov	[esp+58h+lpDistanceToMoveHigh],	edx ; nNumberOfBytesToWrite
		mov	[ebp+var_2C], edx
		mov	[esp+58h+lpOverlapped],	0 ; lpOverlapped
		mov	[esp+58h+dwMoveMethod],	edi ; lpNumberOfBytesWritten
		mov	[esp+58h+lDistanceToMove], offset dword_41CCE8 ; lpBuffer
		mov	[esp+58h+hFile], eax ; hFile
		call	ds:WriteFile
		mov	edx, [ebp+var_2C]
		sub	esp, 14h
		test	eax, eax
		jz	short loc_40429E
		cmp	edx, [ebp+NumberOfBytesWritten]
		jnz	short loc_40429E
		add	ds:lDistanceToMove, edx
		cmp	ds:dword_418C6C, 0
		jnz	loc_404189
		jmp	short loc_40424D
; ---------------------------------------------------------------------------

loc_404240:				; CODE XREF: sub_4040C3+12Ej
		test	ebx, ebx
		jz	short loc_4042A5
		cmp	ds:dword_418C6C, 0
		jnz	short loc_4042A5

loc_40424D:				; CODE XREF: sub_4040C3+17Bj
		mov	eax, ds:dword_418CE0
		mov	edx, eax
		sub	edx, ds:lDistanceToMove
		add	edx, esi
		test	edx, edx
		jg	loc_40413F
		mov	[esp+58h+lDistanceToMove], eax ; lDistanceToMove
		mov	eax, dword_40B010
		mov	[esp+58h+dwMoveMethod],	0 ; dwMoveMethod
		mov	[esp+58h+lpDistanceToMoveHigh],	0 ; lpDistanceToMoveHigh
		mov	[esp+58h+hFile], eax ; hFile
		call	ds:SetFilePointer
		sub	esp, 10h

loc_404289:				; CODE XREF: sub_4040C3+2Bj
		mov	[esp+58h+hFile], 1
		call	sub_403F5A
		xor	eax, eax
		jmp	short loc_4042AA
; ---------------------------------------------------------------------------

loc_404299:				; CODE XREF: sub_4040C3+AAj
		or	eax, 0FFFFFFFFh
		jmp	short loc_4042AA
; ---------------------------------------------------------------------------

loc_40429E:				; CODE XREF: sub_4040C3+161j
					; sub_4040C3+166j
		mov	eax, 0FFFFFFFEh
		jmp	short loc_4042AA
; ---------------------------------------------------------------------------

loc_4042A5:				; CODE XREF: sub_4040C3+11Cj
					; sub_4040C3+17Fj ...
		mov	eax, 0FFFFFFFDh

loc_4042AA:				; CODE XREF: sub_4040C3+1D4j
					; sub_4040C3+1D9j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4040C3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_4042B2(int,	HANDLE,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
sub_4042B2	proc near		; CODE XREF: sub_40164F+874p
					; sub_40164F+1CEDp ...

hFile		= dword	ptr -58h
lDistanceToMove	= dword	ptr -54h
lpDistanceToMoveHigh= dword ptr	-50h
dwMoveMethod	= dword	ptr -4Ch
lpOverlapped	= dword	ptr -48h
var_2C		= dword	ptr -2Ch
NumberOfBytesRead= dword ptr -24h
Buffer		= dword	ptr -20h
NumberOfBytesWritten= dword ptr	-1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpBuffer	= dword	ptr  10h
nNumberOfBytesToRead= dword ptr	 14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [ebp+arg_0]
		test	eax, eax
		js	short loc_4042F2
		add	eax, ds:dword_428B84
		mov	[esp+58h+dwMoveMethod],	0 ; dwMoveMethod
		mov	[esp+58h+lpDistanceToMoveHigh],	0 ; lpDistanceToMoveHigh
		mov	ds:dword_418CE0, eax
		mov	[esp+58h+lDistanceToMove], eax ; lDistanceToMove
		mov	eax, dword_40B010
		mov	[esp+58h+hFile], eax ; hFile
		call	ds:SetFilePointer
		sub	esp, 10h

loc_4042F2:				; CODE XREF: sub_4042B2+Ej
		mov	eax, 4
		call	sub_4040C3
		test	eax, eax
		mov	ebx, eax
		js	loc_40445B
		lea	eax, [ebp+Buffer]
		mov	esi, ds:ReadFile
		mov	ebx, 0FFFFFFFDh
		mov	[esp+58h+lDistanceToMove], eax ; lpBuffer
		mov	eax, dword_40B010
		lea	edi, [ebp+NumberOfBytesRead]
		mov	[esp+58h+lpOverlapped],	0 ; lpOverlapped
		mov	[esp+58h+dwMoveMethod],	edi ; lpNumberOfBytesRead
		mov	[esp+58h+lpDistanceToMoveHigh],	4 ; nNumberOfBytesToRead
		mov	[esp+58h+hFile], eax ; hFile
		call	esi ; ReadFile
		sub	esp, 14h
		test	eax, eax
		jz	loc_40445B
		cmp	[ebp+NumberOfBytesRead], 4
		jnz	loc_40445B
		mov	eax, [ebp+Buffer]
		add	ds:dword_418CE0, 4
		call	sub_4040C3
		test	eax, eax
		mov	ebx, eax
		js	loc_40445B
		cmp	[ebp+lpBuffer],	0
		jnz	loc_40440D
		jmp	loc_4043FD
; ---------------------------------------------------------------------------

loc_404376:				; CODE XREF: sub_4042B2+153j
		cmp	eax, 4000h
		mov	esi, 4000h
		cmovle	esi, eax
		mov	eax, dword_40B010
		mov	[esp+58h+lpOverlapped],	0
		mov	[esp+58h+dwMoveMethod],	edi
		mov	[esp+58h+lpDistanceToMoveHigh],	esi
		mov	[esp+58h+lDistanceToMove], offset dword_418CE4
		mov	[esp+58h+hFile], eax
		call	[ebp+var_2C]
		sub	esp, 14h
		test	eax, eax
		jz	loc_40444F
		cmp	esi, [ebp+NumberOfBytesRead]
		jnz	loc_40444F
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+NumberOfBytesWritten]
		mov	[esp+58h+lpOverlapped],	0 ; lpOverlapped
		mov	[esp+58h+dwMoveMethod],	eax ; lpNumberOfBytesWritten
		mov	[esp+58h+lpDistanceToMoveHigh],	esi ; nNumberOfBytesToWrite
		mov	[esp+58h+lDistanceToMove], offset dword_418CE4 ; lpBuffer
		mov	[esp+58h+hFile], edx ; hFile
		call	ds:WriteFile
		sub	esp, 14h
		test	eax, eax
		jz	short loc_404456
		cmp	[ebp+NumberOfBytesWritten], esi
		jnz	short loc_404456
		mov	eax, [ebp+NumberOfBytesRead]
		sub	[ebp+Buffer], eax
		add	ds:dword_418CE0, eax
		add	ebx, eax
		jmp	short loc_404400
; ---------------------------------------------------------------------------

loc_4043FD:				; CODE XREF: sub_4042B2+BFj
		mov	[ebp+var_2C], esi

loc_404400:				; CODE XREF: sub_4042B2+149j
		mov	eax, [ebp+Buffer]
		test	eax, eax
		jg	loc_404376
		jmp	short loc_40445B
; ---------------------------------------------------------------------------

loc_40440D:				; CODE XREF: sub_4042B2+B9j
		mov	eax, [ebp+Buffer]
		mov	ebx, 0FFFFFFFDh
		cmp	[ebp+nNumberOfBytesToRead], eax
		cmovle	eax, [ebp+nNumberOfBytesToRead]
		mov	edx, [ebp+lpBuffer]
		mov	[esp+58h+lpOverlapped],	0 ; lpOverlapped
		mov	[esp+58h+lpDistanceToMoveHigh],	eax ; nNumberOfBytesToRead
		mov	eax, dword_40B010
		mov	[esp+58h+dwMoveMethod],	edi ; lpNumberOfBytesRead
		mov	[esp+58h+lDistanceToMove], edx ; lpBuffer
		mov	[esp+58h+hFile], eax ; hFile
		call	esi ; ReadFile
		sub	esp, 14h
		test	eax, eax
		jz	short loc_40445B
		mov	ebx, [ebp+NumberOfBytesRead]
		add	ds:dword_418CE0, ebx
		jmp	short loc_40445B
; ---------------------------------------------------------------------------

loc_40444F:				; CODE XREF: sub_4042B2+F9j
					; sub_4042B2+102j
		mov	ebx, 0FFFFFFFDh
		jmp	short loc_40445B
; ---------------------------------------------------------------------------

loc_404456:				; CODE XREF: sub_4042B2+134j
					; sub_4042B2+139j
		mov	ebx, 0FFFFFFFEh

loc_40445B:				; CODE XREF: sub_4042B2+4Ej
					; sub_4042B2+8Cj ...
		lea	esp, [ebp-0Ch]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_4042B2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404467	proc near		; CODE XREF: start+253p

hModule		= dword	ptr -178h
lpFilename	= dword	ptr -174h
nSize		= dword	ptr -170h
lpSecurityAttributes= dword ptr	-16Ch
dwCreationDisposition= dword ptr -168h
dwFlagsAndAttributes= dword ptr	-164h
hTemplateFile	= dword	ptr -160h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
FileName	= byte ptr -13Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
dwBytes		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, offset aErrorLaunching ; "Error launching installer"
		sub	esp, 16Ch
		mov	edi, [ebp+arg_0]
		call	ds:GetTickCount
		mov	[esp+178h+nSize], 400h ; nSize
		mov	[esp+178h+lpFilename], offset ExistingFileName ; lpFilename
		mov	[esp+178h+hModule], 0 ;	hModule
		add	eax, 3E8h
		mov	ds:dword_428B8C, eax
		call	ds:GetModuleFileNameA
		sub	esp, 0Ch
		mov	[esp+178h+nSize], 3 ; DWORD
		mov	[esp+178h+lpFilename], 80000000h ; DWORD
		mov	[esp+178h+hModule], offset ExistingFileName ; LPCSTR
		call	sub_408059
		sub	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		mov	esi, eax
		mov	hObject, eax
		jz	loc_404815
		mov	[esp+178h+lpFilename], offset ExistingFileName ; LPCSTR
		mov	[esp+178h+hModule], offset String2 ; LPSTR
		call	sub_408294
		push	ebx
		push	ebx
		mov	[esp+178h+hModule], offset String2 ; lpszStart
		call	sub_407EA3
		push	edx
		mov	[esp+178h+lpFilename], eax ; LPCSTR
		mov	[esp+178h+hModule], offset dword_434000	; LPSTR
		call	sub_408294
		push	ecx
		push	ecx
		mov	[esp+178h+lpFilename], 0 ; lpFileSizeHigh
		mov	[esp+178h+hModule], esi	; hFile
		call	ds:GetFileSize
		mov	[ebp+var_150], 0
		mov	[ebp+var_14C], 0
		push	ebx
		push	ebx
		mov	ebx, eax
		mov	ds:dword_410C44, eax
		jmp	loc_404667
; ---------------------------------------------------------------------------

loc_404542:				; CODE XREF: sub_404467+202j
		cmp	ds:dwBytes, 1
		mov	[esp+178h+hModule], offset dword_410C50	; LPVOID
		sbb	esi, esi
		and	esi, 0FFFF8200h
		add	esi, 8000h
		cmp	esi, ebx
		cmovg	esi, ebx
		mov	[esp+178h+lpFilename], esi ; DWORD
		call	sub_404045
		test	eax, eax
		push	ecx
		push	ecx
		jnz	short loc_404583
		mov	[esp+178h+hModule], 1
		call	sub_403F5A
		jmp	loc_404810
; ---------------------------------------------------------------------------

loc_404583:				; CODE XREF: sub_404467+109j
		cmp	ds:dwBytes, 0
		jnz	loc_404620
		lea	eax, [ebp+var_38]
		mov	[esp+178h+hModule], eax
		mov	[esp+178h+nSize], 1Ch
		mov	[esp+178h+lpFilename], offset dword_410C50
		call	sub_407FFE
		mov	eax, [ebp+var_38]
		sub	esp, 0Ch
		test	eax, 0FFFFFFF0h
		jnz	short loc_404634
		cmp	[ebp+var_34], 0DEADBEEFh
		jnz	short loc_404634
		cmp	[ebp+var_28], 74736E49h
		jnz	short loc_404634
		cmp	[ebp+var_2C], 74666F73h
		jnz	short loc_404634
		cmp	[ebp+var_30], 6C6C754Eh
		jnz	short loc_404634
		or	edi, eax
		mov	edx, ds:nNumber
		mov	eax, edi
		and	eax, 2
		or	ds:dword_428B28, eax
		mov	eax, [ebp+var_20]
		mov	ds:dwBytes, edx
		cmp	eax, ebx
		jg	loc_404810
		test	edi, 8
		jnz	short loc_404610
		test	edi, 4
		jnz	short loc_40466F

loc_404610:				; CODE XREF: sub_404467+19Fj
		lea	ebx, [eax-4]
		inc	[ebp+var_150]
		cmp	esi, ebx
		cmova	esi, ebx
		jmp	short loc_404634
; ---------------------------------------------------------------------------

loc_404620:				; CODE XREF: sub_404467+123j
		test	edi, 2
		jnz	short loc_404634
		mov	[esp+178h+hModule], 0
		call	sub_403F5A

loc_404634:				; CODE XREF: sub_404467+14Fj
					; sub_404467+158j ...
		cmp	ebx, ds:dword_410C44
		jge	short loc_40465F
		mov	eax, [ebp+var_14C]
		mov	[esp+178h+nSize], esi
		mov	[esp+178h+lpFilename], offset dword_410C50
		mov	[esp+178h+hModule], eax
		call	sub_408FC4
		sub	esp, 0Ch
		mov	[ebp+var_14C], eax

loc_40465F:				; CODE XREF: sub_404467+1D3j
		add	ds:nNumber, esi
		sub	ebx, esi

loc_404667:				; CODE XREF: sub_404467+D6j
		test	ebx, ebx
		jg	loc_404542

loc_40466F:				; CODE XREF: sub_404467+1A7j
		mov	[esp+178h+hModule], 1
		mov	ebx, offset aInstallerInteg ; "Installer integrity check has failed. C"...
		call	sub_403F5A
		cmp	ds:dwBytes, 0
		jz	loc_404815
		cmp	[ebp+var_150], 0
		jz	short loc_4046D0
		mov	eax, ds:nNumber
		mov	[esp+178h+hModule], eax	; LONG
		call	sub_404091
		push	eax
		lea	eax, [ebp+var_1C]
		mov	[esp+178h+lpFilename], 4 ; DWORD
		mov	[esp+178h+hModule], eax	; LPVOID
		call	sub_404045
		test	eax, eax
		push	edx
		push	edx
		jz	loc_404815
		mov	eax, [ebp+var_14C]
		cmp	eax, [ebp+var_1C]
		jnz	loc_404815

loc_4046D0:				; CODE XREF: sub_404467+22Dj
		mov	eax, [ebp+dwBytes]
		lea	ebx, [ebp+FileName]
		mov	[esp+178h+hModule], 40h	; uFlags
		mov	[esp+178h+lpFilename], eax ; dwBytes
		call	ds:GlobalAlloc
		mov	ecx, offset dword_418C50
		push	esi
		push	esi
		mov	esi, eax
		call	sub_40902C
		mov	[esp+178h+hModule], ebx	; LPSTR
		mov	[esp+178h+lpFilename], offset szStart ;	LPCSTR
		call	sub_4080B5
		push	edi
		push	edi
		mov	[esp+178h+hModule], ebx	; lpFileName
		mov	ebx, offset aErrorWritingTe ; "Error writing temporary file. Make sure"...
		mov	[esp+178h+hTemplateFile], 0 ; hTemplateFile
		mov	[esp+178h+dwFlagsAndAttributes], 4000100h ; dwFlagsAndAttributes
		mov	[esp+178h+dwCreationDisposition], 2 ; dwCreationDisposition
		mov	[esp+178h+lpSecurityAttributes], 0 ; lpSecurityAttributes
		mov	[esp+178h+nSize], 0 ; dwShareMode
		mov	[esp+178h+lpFilename], 0C0000000h ; dwDesiredAccess
		call	ds:CreateFileA
		sub	esp, 1Ch
		mov	dword_40B010, eax
		inc	eax
		jz	loc_404815
		mov	eax, ds:dwBytes
		add	eax, 1Ch
		mov	[esp+178h+hModule], eax	; LONG
		call	sub_404091
		mov	edx, [ebp+var_38]
		mov	ecx, [ebp+var_20]
		and	edx, 4
		cmp	edx, 1
		sbb	edx, edx
		and	edx, 4
		mov	ds:dword_418CD8, eax
		lea	eax, [eax+ecx-1Ch]
		sub	eax, edx
		mov	ds:dword_418CDC, eax
		mov	eax, [ebp+dwBytes]
		push	ebx
		mov	ebx, offset aInstallerInteg ; "Installer integrity check has failed. C"...
		mov	[esp+178h+nSize], esi ;	lpBuffer
		mov	[esp+178h+lpSecurityAttributes], eax ; nNumberOfBytesToRead
		mov	[esp+178h+lpFilename], 0 ; HANDLE
		mov	[esp+178h+hModule], 0FFFFFFFFh ; int
		call	sub_4042B2
		sub	esp, 10h
		cmp	eax, [ebp+dwBytes]
		jnz	short loc_404815
		mov	ds:dword_428B48, esi
		mov	eax, [esi]
		mov	edx, [ebp+var_38]
		mov	ds:dword_428B90, eax
		mov	eax, ds:dword_428B94
		and	edx, 1
		cmp	edx, 1
		sbb	eax, 0FFFFFFFFh
		mov	ds:dword_428B94, eax
		mov	eax, 8

loc_4047DD:				; CODE XREF: sub_404467+37Dj
		dec	eax
		add	[esi+eax*8+4], esi
		test	eax, eax
		jnz	short loc_4047DD
		mov	eax, ds:dword_418CE0
		xor	ebx, ebx
		mov	[esi+3Ch], eax
		add	esi, 4
		mov	[esp+178h+nSize], 40h
		mov	[esp+178h+lpFilename], esi
		mov	[esp+178h+hModule], offset dword_428B4C
		call	sub_407FFE
		sub	esp, 0Ch
		jmp	short loc_404815
; ---------------------------------------------------------------------------

loc_404810:				; CODE XREF: sub_404467+117j
					; sub_404467+193j
		mov	ebx, offset aInstallerInteg ; "Installer integrity check has failed. C"...

loc_404815:				; CODE XREF: sub_404467+6Dj
					; sub_404467+220j ...
		lea	esp, [ebp-0Ch]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
sub_404467	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404824	proc near		; CODE XREF: start+1FFp start+235p

lpszStart	= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpszStart], offset szStart ; lpszStart
		call	sub_4082D2
		push	eax
		mov	[esp+18h+lpszStart], offset szStart
		call	sub_407EE1
		push	edx
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		jz	short locret_40487C
		mov	[esp+18h+lpszStart], offset szStart ; lpszStart
		call	sub_407E2D
		push	eax
		mov	[esp+18h+lpszStart], offset szStart ; LPCSTR
		call	sub_407CCD
		push	edx
		mov	[esp+18h+var_14], offset szStart ; LPCSTR
		mov	[esp+18h+lpszStart], offset FileName ; LPSTR
		call	sub_4080B5
		push	ecx
		push	ecx

locret_40487C:				; CODE XREF: sub_404824+26j
		leave
		retn
sub_404824	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40487E	proc near		; CODE XREF: start:loc_404D73p

hObject		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, hObject
		cmp	eax, 0FFFFFFFFh
		jz	short loc_4048A2
		mov	[esp+18h+hObject], eax ; hObject
		call	ds:CloseHandle
		mov	hObject, 0FFFFFFFFh
		push	eax

loc_4048A2:				; CODE XREF: sub_40487E+Ej
		mov	eax, dword_40B010
		cmp	eax, 0FFFFFFFFh
		jz	short loc_4048C0
		mov	[esp+18h+hObject], eax ; hObject
		call	ds:CloseHandle
		mov	dword_40B010, 0FFFFFFFFh
		push	eax

loc_4048C0:				; CODE XREF: sub_40487E+2Cj
		call	sub_404F54
		mov	[esp+18h+var_14], 7 ; int
		mov	[esp+18h+hObject], offset dword_433800 ; lpString
		call	sub_408C37
		push	ecx
		push	ecx
		leave
		retn
sub_40487E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

		public start
start		proc near

uExitCode	= dword	ptr -220h
dwReason	= dword	ptr -21Ch
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= dword	ptr -204h
var_200		= dword	ptr -200h
var_1FC		= dword	ptr -1FCh
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
lpExistingFileName= dword ptr -1E0h
lpString1	= dword	ptr -1DCh
lpString2	= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
lpFileName	= dword	ptr -1C4h
var_1C0		= byte ptr -1C0h
pvReserved	= dword	ptr -1BCh
uMode		= dword	ptr -1B8h
psfi		= dword	ptr -1B4h
cbFileInfo	= dword	ptr -1B0h
uFlags		= dword	ptr -1ACh
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_17C		= SHFILEINFOA ptr -17Ch
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1ACh
		mov	[esp+1B8h+uMode], 8001h	; uMode
		call	ds:SetErrorMode
		push	edi
		call	ds:GetVersion
		cmp	ax, 6
		jz	short loc_40491E
		mov	[esp+1B8h+uMode], 0
		call	sub_40894A
		test	eax, eax
		push	esi
		jz	short loc_40491E
		mov	[esp+1B8h+uMode], 0C00h
		call	eax
		push	ebx

loc_40491E:				; CODE XREF: start+24j	start+35j
		mov	[esp+1BCh+pvReserved], offset aUxtheme ; "UXTHEME"
		call	sub_4088C6
		push	ebx
		mov	[esp+1BCh+pvReserved], offset aUserenv ; "USERENV"
		call	sub_4088C6
		push	esi
		mov	[esp+1BCh+pvReserved], offset aSetupapi	; "SETUPAPI"
		call	sub_4088C6
		push	edi
		mov	[esp+1BCh+pvReserved], 0Dh
		call	sub_40894A
		push	eax
		mov	[esp+1BCh+pvReserved], 0Bh
		call	sub_40894A
		push	edx
		mov	ds:dword_428B9C, eax
		call	ds:InitCommonControls
		mov	[esp+1BCh+pvReserved], 0 ; pvReserved
		call	ds:OleInitialize
		mov	ds:dword_428B40, eax
		lea	eax, [ebp+var_17C]
		push	ecx
		mov	[esp+1BCh+uFlags], 0 ; uFlags
		mov	[esp+1BCh+cbFileInfo], 160h ; cbFileInfo
		mov	[esp+1BCh+psfi], eax ; psfi
		mov	[esp+1BCh+uMode], 0 ; dwFileAttributes
		mov	[esp+1BCh+pvReserved], offset pszPath ;	pszPath
		call	ds:SHGetFileInfoA
		sub	esp, 14h
		mov	[esp+1BCh+uMode], offset aNsisError ; "NSIS Error"
		mov	[esp+1BCh+pvReserved], offset chText ; LPSTR
		call	sub_408294
		push	ebx
		push	ebx
		call	ds:GetCommandLineA
		mov	[esp+1BCh+pvReserved], offset byte_432000 ; LPSTR
		mov	[esp+1BCh+uMode], eax ;	LPCSTR
		call	sub_408294
		push	esi
		push	esi
		mov	[esp+1BCh+pvReserved], 0 ; lpModuleName
		call	ds:GetModuleHandleA
		mov	edx, offset byte_432001
		cmp	ds:byte_432000,	22h
		mov	ds:hInstance, eax
		mov	eax, offset byte_432000
		cmovz	eax, edx
		setz	dl
		lea	edx, [edx+edx+20h]
		xor	ebx, ebx
		movsx	edx, dl
		push	edi
		mov	[esp+1BCh+uMode], edx ;	char
		mov	[esp+1BCh+pvReserved], eax ; LPCSTR
		call	sub_407E73
		push	edx
		push	edx
		mov	[esp+1BCh+pvReserved], eax ; lpsz
		call	ds:CharNextA
		mov	edi, eax
		push	ecx
		jmp	loc_404ABC
; ---------------------------------------------------------------------------

loc_404A2F:				; CODE XREF: start+158j
		inc	eax

loc_404A30:				; CODE XREF: start+1E2j
		mov	dl, [eax]
		cmp	dl, 20h
		jz	short loc_404A2F
		cmp	dl, 22h
		mov	cl, 20h
		jnz	short loc_404A41
		inc	eax
		mov	cl, 22h

loc_404A41:				; CODE XREF: start+15Fj
		cmp	byte ptr [eax],	2Fh
		jnz	short loc_404AA1
		cmp	byte ptr [eax+1], 53h
		jnz	short loc_404A5D
		mov	dl, [eax+2]
		mov	esi, ebx
		or	esi, 2
		or	edx, 20h
		cmp	dl, 20h
		cmovz	ebx, esi

loc_404A5D:				; CODE XREF: start+16Dj
		cmp	dword ptr [eax+1], 4352434Eh
		jnz	short loc_404A77
		mov	dl, [eax+5]
		mov	esi, ebx
		or	esi, 4
		or	edx, 20h
		cmp	dl, 20h
		cmovz	ebx, esi

loc_404A77:				; CODE XREF: start+187j
		cmp	dword ptr [eax-1], 3D442F20h
		jz	short loc_404A83
		inc	eax
		jmp	short loc_404AA1
; ---------------------------------------------------------------------------

loc_404A83:				; CODE XREF: start+1A1j
		mov	dword ptr [eax-1], 0
		add	eax, 3
		mov	[esp+1BCh+uMode], eax ;	LPCSTR
		mov	[esp+1BCh+pvReserved], offset byte_432400 ; LPSTR
		call	sub_408294
		push	ecx
		push	ecx
		jmp	short loc_404AC5
; ---------------------------------------------------------------------------

loc_404AA1:				; CODE XREF: start+167j start+1A4j
		movsx	ecx, cl
		mov	[esp+1BCh+uMode], ecx ;	char
		mov	[esp+1BCh+pvReserved], eax ; LPCSTR
		call	sub_407E73
		push	edx
		push	edx
		xor	edx, edx
		cmp	byte ptr [eax],	22h
		setz	dl
		add	eax, edx

loc_404ABC:				; CODE XREF: start+14Dj
		cmp	byte ptr [eax],	0
		jnz	loc_404A30

loc_404AC5:				; CODE XREF: start+1C2j
		mov	[esp+1BCh+uMode], offset szStart ; lpBuffer
		mov	[esp+1BCh+pvReserved], 400h ; nBufferLength
		call	ds:GetTempPathA
		push	eax
		push	eax
		call	sub_404824
		test	eax, eax
		jnz	short loc_404B1F
		mov	[esp+1BCh+uMode], 3FBh ; uSize
		mov	[esp+1BCh+pvReserved], offset szStart ;	lpBuffer
		call	ds:GetWindowsDirectoryA
		push	esi
		push	esi
		mov	[esp+1BCh+uMode], offset aTemp ; "\\Temp"
		mov	[esp+1BCh+pvReserved], offset szStart
		call	sub_4082C7
		push	eax
		push	eax
		call	sub_404824
		test	eax, eax
		jz	loc_404D65

loc_404B1F:				; CODE XREF: start+206j
		mov	[esp+1C4h+lpFileName], offset FileName ; lpFileName
		call	ds:DeleteFileA
		push	ecx
		mov	[esp+1C4h+lpFileName], ebx
		call	sub_404467
		push	ebx
		xor	ebx, ebx
		test	eax, eax
		mov	esi, eax
		jnz	loc_404D73
		cmp	ds:dword_428B94, 0
		jz	loc_404D52
		mov	dword ptr [esp+1C4h+var_1C0], 0	; char
		mov	[esp+1C4h+lpFileName], offset byte_432000 ; LPCSTR
		call	sub_407E73
		push	edx
		push	edx
		jmp	short loc_404B68
; ---------------------------------------------------------------------------

loc_404B67:				; CODE XREF: start+298j
		dec	eax

loc_404B68:				; CODE XREF: start+288j
		cmp	eax, offset byte_432000
		jb	short loc_404B7C
		cmp	dword ptr [eax], 3D3F5F20h
		jnz	short loc_404B67
		jmp	loc_404F10
; ---------------------------------------------------------------------------

loc_404B7C:				; CODE XREF: start+290j
		call	sub_408F4F
		mov	dword ptr [esp+1C4h+var_1C0], offset aNsu ; "~nsu"
		mov	[esp+1C4h+lpFileName], offset szStart
		mov	ebx, eax
		call	sub_4082C7
		test	ebx, ebx
		push	eax
		push	eax
		jz	short loc_404BDE
		jmp	short loc_404BC8
; ---------------------------------------------------------------------------

loc_404B9F:				; CODE XREF: start+64Aj
		mov	[esp+1CCh+var_1C8], ebx	; LPCSTR
		mov	[esp+1CCh+var_1CC], offset byte_432400 ; LPSTR
		call	sub_408294
		push	edi
		push	edi
		mov	[esp+1CCh+var_1C8], ebx	; LPCSTR
		mov	[esp+1CCh+var_1CC], offset Directory ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		jmp	loc_404D52
; ---------------------------------------------------------------------------

loc_404BC8:				; CODE XREF: start+2C0j
		mov	[esp+1CCh+var_1C8], offset aA ;	"A"
		mov	[esp+1CCh+var_1CC], offset szStart
		call	sub_4082C7
		push	ecx
		push	ecx

loc_404BDE:				; CODE XREF: start+2BEj
		mov	[esp+1D4h+var_1D0], offset a_tmp ; ".tmp"
		mov	[esp+1D4h+var_1D4], offset szStart
		call	sub_4082C7
		push	eax
		push	eax
		mov	[esp+1DCh+lpString2], offset String2 ; lpString2
		mov	[esp+1DCh+lpString1], offset szStart ; lpString1
		call	ds:lstrcmpiA
		test	eax, eax
		push	edx
		push	edx
		jz	loc_404D6C
		test	ebx, ebx
		mov	[esp+1DCh+lpString1], offset szStart ; LPCSTR
		jz	short loc_404C25
		call	sub_407C2C
		jmp	short loc_404C2A
; ---------------------------------------------------------------------------

loc_404C25:				; CODE XREF: start+33Fj
		call	sub_407CCD

loc_404C2A:				; CODE XREF: start+346j
		push	eax
		mov	[esp+1DCh+lpString1], offset szStart ; lpPathName
		call	ds:SetCurrentDirectoryA
		cmp	ds:byte_432400,	0
		push	eax
		jnz	short loc_404C58
		mov	[esp+1DCh+lpString2], offset String2 ; LPCSTR
		mov	[esp+1DCh+lpString1], offset byte_432400 ; LPSTR
		call	sub_408294
		push	eax
		push	eax

loc_404C58:				; CODE XREF: start+363j
		mov	[esp+1DCh+lpString2], edi ; LPCSTR
		mov	ebx, 1Ah
		mov	esi, offset aErrorLaunchi_0 ; "Error launching installer"
		mov	[esp+1DCh+lpString1], offset dword_42D000 ; LPSTR
		call	sub_408294
		mov	edi, ds:CopyFileA
		mov	ds:word_42D400,	41h
		push	eax
		push	eax
		mov	eax, ds:DeleteFileA
		mov	[ebp+var_18C], eax

loc_404C8E:				; CODE XREF: start+457j
		mov	eax, ds:dword_428B48
		mov	eax, [eax+120h]
		mov	[esp+1DCh+lpString1], offset NewFileName ; LPSTR
		mov	[esp+1DCh+lpString2], eax ; int
		call	sub_4083A6
		push	ecx
		push	ecx
		mov	[esp+1DCh+lpString1], offset NewFileName
		call	[ebp+var_18C]
		test	esi, esi
		push	eax
		jz	short loc_404D2D
		mov	[esp+1E0h+lpString2], 1	; bFailIfExists
		mov	[esp+1E0h+lpString1], offset NewFileName ; lpNewFileName
		mov	[esp+1E0h+lpExistingFileName], offset ExistingFileName ; lpExistingFileName
		call	edi ; CopyFileA
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_404D2D
		mov	[esp+1E0h+lpString1], 0	; lpszLongPath
		mov	[esp+1E0h+lpExistingFileName], offset NewFileName ; LPCSTR
		call	sub_408996
		push	eax
		push	eax
		mov	eax, ds:dword_428B48
		mov	eax, [eax+124h]
		mov	[esp+1E0h+lpExistingFileName], offset NewFileName ; LPSTR
		mov	[esp+1E0h+lpString1], eax ; int
		call	sub_4083A6
		push	eax
		push	eax
		mov	[esp+1E0h+lpExistingFileName], offset NewFileName ; LPSTR
		call	sub_407CFB
		test	eax, eax
		push	edx
		jz	short loc_404D2D
		mov	[esp+1E0h+lpExistingFileName], eax ; hObject
		xor	esi, esi
		call	ds:CloseHandle
		push	eax

loc_404D2D:				; CODE XREF: start+3DEj start+3FEj ...
		inc	byte ptr ds:word_42D400
		dec	ebx
		jnz	loc_404C8E
		mov	[esp+1E0h+lpString1], 0	; lpszLongPath
		mov	[esp+1E0h+lpExistingFileName], offset szStart ;	LPCSTR
		call	sub_408996
		push	eax
		push	eax
		jmp	short loc_404D71
; ---------------------------------------------------------------------------

loc_404D52:				; CODE XREF: start+26Cj start+2E6j
		mov	ds:uExitCode, 0FFFFFFFFh
		call	sub_4065F8
		mov	ebx, eax
		jmp	short loc_404D73
; ---------------------------------------------------------------------------

loc_404D65:				; CODE XREF: start+23Cj
		mov	esi, offset aErrorWriting_0 ; "Error writing temporary file. Make sure"...
		jmp	short loc_404D71
; ---------------------------------------------------------------------------

loc_404D6C:				; CODE XREF: start+330j start+644j
		mov	esi, offset aErrorLaunchi_0 ; "Error launching installer"

loc_404D71:				; CODE XREF: start+473j start+48Dj
		xor	ebx, ebx

loc_404D73:				; CODE XREF: start+25Fj start+486j
		call	sub_40487E
		call	ds:OleUninitialize
		test	esi, esi
		jz	short loc_404DA0
		mov	[esp+1DCh+lpString2], 200010h
		mov	[esp+1DCh+lpString1], esi
		call	sub_407DB9
		push	edi
		push	edi
		mov	[esp+1DCh+lpString1], 2
		jmp	loc_404F0A
; ---------------------------------------------------------------------------

loc_404DA0:				; CODE XREF: start+4A3j
		cmp	ds:dword_428B1C, 0
		jz	loc_404EFC
		mov	[esp+1DCh+lpString1], 5
		call	sub_40894A
		push	edx
		mov	[ebp+var_190], eax
		mov	[esp+1DCh+lpString1], 6
		call	sub_40894A
		push	ecx
		mov	edi, eax
		mov	[esp+1DCh+lpString1], 7
		call	sub_40894A
		test	edi, edi
		push	esi
		mov	esi, eax
		jz	loc_404E93
		cmp	[ebp+var_190], 0
		jz	loc_404E93
		test	eax, eax
		jz	loc_404E93
		call	ds:GetCurrentProcess
		lea	edx, [ebp+var_1C]
		mov	[esp+1DCh+var_1D4], edx
		mov	[esp+1DCh+lpString2], 28h
		mov	[esp+1DCh+lpString1], eax
		call	[ebp+var_190]
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_404E93
		lea	edx, [ebp+var_17C]
		lea	eax, [ebp+var_17C.iIcon]
		mov	[ebp+var_194], edx
		mov	[esp+1E8h+lpExistingFileName], eax
		mov	[esp+1E8h+var_1E4], offset aSeshutdownpriv ; "SeShutdownPrivilege"
		mov	[esp+1E8h+var_1E8], 0
		call	edi
		mov	edx, [ebp+var_194]
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_17C.hIcon], 1
		mov	dword ptr [ebp+var_17C.szDisplayName], 2
		sub	esp, 0Ch
		mov	[esp+1F4h+lpExistingFileName], 0
		mov	[esp+1F4h+var_1E4], 0
		mov	[esp+1F4h+var_1E8], 0
		mov	[esp+1F4h+var_1EC], edx
		mov	[esp+1F4h+var_1F0], 0
		mov	[esp+1F4h+var_1F4], eax
		call	esi
		sub	esp, 18h

loc_404E93:				; CODE XREF: start+503j start+510j ...
		mov	[esp+20Ch+var_20C], 8
		call	sub_40894A
		test	eax, eax
		push	edi
		jz	short loc_404ED4
		mov	[esp+20Ch+var_1FC], 80040002h
		mov	[esp+20Ch+var_200], 25h
		mov	[esp+20Ch+var_204], 0
		mov	[esp+20Ch+var_208], 0
		mov	[esp+20Ch+var_20C], 0
		call	eax
		sub	esp, 14h
		test	eax, eax
		jz	short loc_404EEF

loc_404ED4:				; CODE XREF: start+5C5j
		mov	[esp+220h+dwReason], 80040002h ; dwReason
		mov	[esp+220h+uExitCode], 2	; uFlags
		call	ds:ExitWindowsEx
		test	eax, eax
		push	esi
		push	esi
		jnz	short loc_404EFC

loc_404EEF:				; CODE XREF: start+5F5j
		mov	[esp+220h+uExitCode], 9
		call	sub_403E5D
		push	ecx

loc_404EFC:				; CODE XREF: start+4CAj start+610j
		mov	eax, ds:uExitCode
		cmp	eax, 0FFFFFFFFh
		cmovnz	ebx, eax
		mov	[esp+220h+uExitCode], ebx ; uExitCode

loc_404F0A:				; CODE XREF: start+4BEj
		call	ds:ExitProcess
; ---------------------------------------------------------------------------

loc_404F10:				; CODE XREF: start+29Aj
		mov	byte ptr [eax],	0
		lea	ebx, [eax+4]
		mov	[esp+1C4h+lpFileName], ebx ; LPCSTR
		call	sub_40880F
		test	eax, eax
		push	edx
		jz	loc_404D6C
		jmp	loc_404B9F
start		endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404F2C	proc near		; CODE XREF: sub_404F54+16p
					; sub_4065F8+42Dp

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		mov	ebx, ds:dword_4250E8
		jmp	short loc_404F47
; ---------------------------------------------------------------------------

loc_404F3F:				; CODE XREF: sub_404F2C+1Dj
		mov	[esp+18h+var_18], esi
		call	dword ptr [ebx+4]
		mov	ebx, [ebx]

loc_404F47:				; CODE XREF: sub_404F2C+11j
		test	ebx, ebx
		jnz	short loc_404F3F
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn	4
sub_404F2C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404F54	proc near		; CODE XREF: sub_40487E:loc_4048C0p

hLibModule	= dword	ptr -38h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, ds:dword_4250E8
		mov	[esp+38h+hLibModule], 0
		call	sub_404F2C
		mov	edi, ds:FreeLibrary
		mov	esi, ds:GlobalFree
		push	ecx
		jmp	short loc_404F95
; ---------------------------------------------------------------------------

loc_404F7E:				; CODE XREF: sub_404F54+43j
		mov	eax, [ebx]
		mov	[ebp+var_1C], eax
		mov	eax, [ebx+8]
		mov	[esp+38h+hLibModule], eax ; hLibModule
		call	edi ; FreeLibrary
		push	eax
		mov	[esp+38h+hLibModule], ebx ; hMem
		call	esi ; GlobalFree
		mov	ebx, [ebp+var_1C]
		push	edx

loc_404F95:				; CODE XREF: sub_404F54+28j
		test	ebx, ebx
		jnz	short loc_404F7E
		mov	ds:dword_4250E8, 0
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_404F54	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404FAB	proc near		; CODE XREF: sub_40164F+1594p
					; sub_404FCD+Dp

arg_0		= dword	ptr  8

		push	ebp
		mov	eax, ds:dword_4250E8
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		jmp	short loc_404FBF
; ---------------------------------------------------------------------------

loc_404FB8:				; CODE XREF: sub_404FAB+16j
		cmp	[eax+8], edx
		jz	short loc_404FC7
		mov	eax, [eax]

loc_404FBF:				; CODE XREF: sub_404FAB+Bj
		test	eax, eax
		jnz	short loc_404FB8
		mov	al, 1
		jmp	short loc_404FC9
; ---------------------------------------------------------------------------

loc_404FC7:				; CODE XREF: sub_404FAB+10j
		xor	eax, eax

loc_404FC9:				; CODE XREF: sub_404FAB+1Aj
		pop	ebp
		retn	4
sub_404FAB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404FCD	proc near		; DATA XREF: .data:0040B00Co

uFlags		= dword	ptr -18h
dwBytes		= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	[esp+18h+uFlags], ebx
		call	sub_404FAB
		test	eax, eax
		push	ecx
		mov	ecx, 1
		jz	short loc_405021
		mov	[esp+18h+dwBytes], 0Ch ; dwBytes
		mov	[esp+18h+uFlags], 40h ;	uFlags
		call	ds:GlobalAlloc
		or	ecx, 0FFFFFFFFh
		push	edx
		test	eax, eax
		push	edx
		mov	edx, eax
		jz	short loc_405021
		mov	eax, [ebp+arg_4]
		xor	ecx, ecx
		mov	[edx+8], ebx
		mov	[edx+4], eax
		mov	eax, ds:dword_4250E8
		mov	ds:dword_4250E8, edx
		mov	[edx], eax

loc_405021:				; CODE XREF: sub_404FCD+1Aj
					; sub_404FCD+3Aj
		mov	eax, ecx
		mov	ebx, [ebp+var_4]
		leave
		retn	8
sub_404FCD	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40502C	proc near		; CODE XREF: sub_405D58+401p
					; sub_406B2B+893p ...
		push	ebp
		mov	ecx, ds:dword_428B58
		mov	ebp, esp
		mov	edx, ds:dword_428B54
		push	ebx
		lea	ebx, ds:0[eax*4]
		xor	eax, eax
		jmp	short loc_405056
; ---------------------------------------------------------------------------

loc_405047:				; CODE XREF: sub_40502C+2Ej
		test	byte ptr [edx+8], 1
		jz	short loc_405050
		add	eax, [edx+ebx]

loc_405050:				; CODE XREF: sub_40502C+1Fj
		add	edx, 418h

loc_405056:				; CODE XREF: sub_40502C+19j
		dec	ecx
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_405047
		pop	ebx
		pop	ebp
		retn
sub_40502C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40505F	proc near		; CODE XREF: sub_405D58+4C3p
					; sub_406242+219p

hWnd		= dword	ptr -18h
Msg		= dword	ptr -14h
wParam		= dword	ptr -10h
lParam		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_426124
		cmp	ds:dword_428B14, 0
		cmovz	eax, ds:dword_426120
		mov	[esp+18h+lParam], 1 ; lParam
		mov	[esp+18h+wParam], 1 ; wParam
		mov	[esp+18h+Msg], 0F4h ; Msg
		mov	[esp+18h+hWnd],	eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		leave
		retn
sub_40505F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40509E	proc near		; CODE XREF: sub_405619:loc_405922p
					; sub_405D58+156p ...

hWnd		= dword	ptr -18h
Msg		= dword	ptr -14h
wParam		= dword	ptr -10h
lParam		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+wParam], eax ;	wParam
		mov	eax, ds:hwnd
		mov	[esp+18h+lParam], 1 ; lParam
		mov	[esp+18h+Msg], 28h ; Msg
		mov	[esp+18h+hWnd],	eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		leave
		retn
sub_40509E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4050CB	proc near		; CODE XREF: StartAddress+38p
					; StartAddress+91p ...

hWnd		= dword	ptr -18h
Msg		= dword	ptr -14h
wParam		= dword	ptr -10h
lParam		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	edx, ds:hDlg
		test	edx, edx
		jz	short locret_4050FB
		mov	[esp+18h+lParam], 0 ; lParam
		mov	[esp+18h+wParam], 0 ; wParam
		mov	[esp+18h+Msg], eax ; Msg
		mov	[esp+18h+hWnd],	edx ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h

locret_4050FB:				; CODE XREF: sub_4050CB+Ej
		leave
		retn
sub_4050CB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4050FD	proc near		; CODE XREF: sub_405619:loc_405C61p
					; sub_407678:loc_407A42p

hWnd		= dword	ptr -18h
Msg		= dword	ptr -14h
wParam		= dword	ptr -10h
lParam		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	eax, 78h
		jnz	short loc_40510E
		inc	ds:dword_4293A8

loc_40510E:				; CODE XREF: sub_4050FD+9j
		mov	[esp+18h+wParam], eax ;	wParam
		mov	eax, ds:hwnd
		mov	[esp+18h+lParam], 0 ; lParam
		mov	[esp+18h+Msg], 408h ; Msg
		mov	[esp+18h+hWnd],	eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		leave
		retn
sub_4050FD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_405135(int,	LPSTR, int, int)
sub_405135	proc near		; DATA XREF: sub_406242+54o

lpString1	= dword	ptr -18h
lpString2	= dword	ptr -14h
iMaxLength	= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	edx, [ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		add	eax, ds:dword_426944
		mov	[esp+18h+iMaxLength], edx ; iMaxLength
		mov	[esp+18h+lpString1], ebx ; lpString1
		mov	[esp+18h+lpString2], eax ; lpString2
		call	ds:lstrcpynA
		sub	esp, 0Ch
		mov	[esp+18h+lpString1], ebx
		call	sub_4082BC
		add	ds:dword_426944, eax
		push	edx
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		xor	eax, eax
		mov	ebx, [ebp+var_4]
		leave
		retn	10h
sub_405135	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40517C	proc near		; CODE XREF: sub_405619+253p
					; sub_405D58+4B1p ...

hWnd		= dword	ptr -18h
bEnable		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+bEnable], eax ; bEnable
		mov	eax, ds:dword_426120
		mov	[esp+18h+hWnd],	eax ; hWnd
		call	ds:EnableWindow
		push	ecx
		push	ecx
		leave
		retn
sub_40517C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_405198(int)
sub_405198	proc near		; CODE XREF: sub_405619+72p
					; sub_405619+1CBp ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, edx
		push	ebx
		mov	ebx, eax
		sub	esp, 10h
		add	esi, 3E8h
		mov	[esp+18h+var_14], ecx ;	int
		mov	[esp+18h+var_18], 0 ; LPSTR
		call	sub_4083A6
		push	edx
		push	edx
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_18], ebx
		mov	[esp+18h+var_10], eax
		call	sub_407D7D
		sub	esp, 0Ch
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_405198	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; DWORD	__stdcall StartAddress(LPVOID lpThreadParameter)
StartAddress	proc near		; CODE XREF: sub_4065F8+43Bp
					; DATA XREF: sub_407678+2EDo

pvReserved	= dword	ptr -38h
hWnd		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
lpThreadParameter= dword ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, ds:dword_428B40
		mov	edi, [ebp+lpThreadParameter]
		mov	esi, ds:dword_428B58
		mov	ebx, ds:dword_428B54
		mov	[ebp+var_1C], eax
		mov	[esp+38h+pvReserved], 0	; pvReserved
		call	ds:OleInitialize
		or	eax, [ebp+var_1C]
		push	edx
		mov	ds:dword_428B40, eax
		xor	eax, eax
		call	sub_4050CB
		jmp	short loc_40525E
; ---------------------------------------------------------------------------

loc_405215:				; CODE XREF: StartAddress+8Aj
		test	byte ptr [ebx+8], 1
		lea	eax, [ebx+18h]
		mov	[esp+38h+hWnd],	eax ; char
		jz	short loc_40524B
		mov	[esp+38h+pvReserved], offset aSectionS ; "Section: \"%s\""
		call	sub_408780
		mov	[esp+38h+hWnd],	edi ; hWnd
		mov	eax, [ebx+0Ch]
		mov	[esp+38h+pvReserved], eax ; int
		call	sub_403DAD
		test	eax, eax
		push	ecx
		push	ecx
		jz	short loc_405257
		inc	ds:dword_428B14
		jmp	short loc_405262
; ---------------------------------------------------------------------------

loc_40524B:				; CODE XREF: StartAddress+4Aj
		mov	[esp+38h+pvReserved], offset aSkippingSectio ; "Skipping section: \"%s\""
		call	sub_408780

loc_405257:				; CODE XREF: StartAddress+6Bj
		add	ebx, 418h
		dec	esi

loc_40525E:				; CODE XREF: StartAddress+3Dj
		test	esi, esi
		jnz	short loc_405215

loc_405262:				; CODE XREF: StartAddress+73j
		mov	eax, 404h
		call	sub_4050CB
		call	ds:OleUninitialize
		mov	eax, ds:dword_428B14
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
StartAddress	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405281	proc near		; CODE XREF: sub_405D58+43Cp
					; sub_405D58+45Ep ...

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
var_38		= byte ptr -38h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_5C], eax
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_60], edx
		test	edi, edi
		jz	short loc_4052A9
		shrd	esi, edi, 14h
		mov	ebx, 0FFFFFFDCh
		mov	edi, esi
		xor	esi, esi
		jmp	short loc_40530A
; ---------------------------------------------------------------------------

loc_4052A9:				; CODE XREF: sub_405281+17j
		cmp	esi, 0FFFFFh
		ja	short loc_4052CD
		cmp	esi, 400h
		sbb	ecx, ecx
		not	ecx
		and	ecx, 0Ah
		cmp	esi, 400h
		sbb	ebx, ebx
		not	ebx
		sub	ebx, 22h
		jmp	short loc_4052DF
; ---------------------------------------------------------------------------

loc_4052CD:				; CODE XREF: sub_405281+2Ej
		cmp	esi, 0FFFF3332h
		mov	ecx, 14h
		mov	ebx, 0FFFFFFDCh
		ja	short loc_4052F0

loc_4052DF:				; CODE XREF: sub_405281+4Aj
		mov	eax, 1
		mov	edi, 14h
		shl	eax, cl
		cdq
		idiv	edi
		add	esi, eax

loc_4052F0:				; CODE XREF: sub_405281+5Cj
		mov	edi, esi
		and	esi, 0FFFFFFh
		imul	eax, esi, 0Ah
		xor	edx, edx
		shr	edi, cl
		shr	eax, cl
		mov	ecx, 0Ah
		div	ecx
		mov	esi, edx

loc_40530A:				; CODE XREF: sub_405281+26j
		mov	edx, [ebp+var_60]
		mov	[esp+88h+var_88], offset Data ;	LPSTR
		mov	[esp+88h+var_84], edx ;	int
		call	sub_4083A6
		lea	eax, [ebp+var_38]
		push	ecx
		push	ecx
		mov	[esp+88h+var_84], 0FFFFFFDFh ; int
		mov	[esp+88h+var_88], eax ;	LPSTR
		call	sub_4083A6
		push	edx
		push	edx
		mov	edx, eax
		lea	eax, [ebp+var_58]
		mov	[ebp+var_64], edx
		mov	[esp+88h+var_84], ebx ;	int
		mov	[esp+88h+var_88], eax ;	LPSTR
		call	sub_4083A6
		push	ecx
		mov	ebx, eax
		push	ecx
		mov	[esp+88h+var_88], offset Data
		call	sub_4082BC
		push	edx
		mov	edx, [ebp+var_64]
		add	eax, offset Data
		mov	[esp+80h+var_70], ebx
		mov	[esp+80h+var_74], esi
		mov	[esp+80h+var_78], edi
		mov	[esp+80h+var_6C], edx
		mov	[esp+80h+var_7C], offset aU_USS	; "%u.%u%s%s"
		mov	[esp+80h+var_80], eax ;	LPSTR
		call	ds:wsprintfA
		mov	eax, [ebp+var_5C]
		mov	[esp+80h+var_78], offset Data
		mov	[esp+80h+var_7C], eax
		mov	eax, ds:hDlg
		mov	[esp+80h+var_80], eax
		call	sub_407D7D
		sub	esp, 0Ch
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_405281	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4053AB	proc near		; CODE XREF: sub_4065F8+C0p
					; sub_4065F8+33Dp

hWnd		= dword	ptr -38h
lpString	= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	[esp+38h+hWnd],	offset FileName
		call	sub_4081F5
		mov	edx, ds:dword_428B70
		mov	esi, ds:dword_428B48
		mov	[ebp+var_1C], edx
		mov	edx, ds:dword_428B6C
		push	ebx
		or	ebx, 0FFFFFFFFh
		mov	[ebp+var_20], edx

loc_4053DC:				; CODE XREF: sub_4053AB+79j
		mov	ecx, [ebp+var_1C]
		jmp	short loc_40540F
; ---------------------------------------------------------------------------

loc_4053E1:				; CODE XREF: sub_4053AB+68j
		mov	edx, [esi+64h]
		mov	edi, eax
		imul	edx, ecx
		add	edx, [ebp+var_20]
		xor	di, [edx]
		test	di, bx
		jnz	short loc_40540F
		mov	ecx, [edx+2]
		mov	ds:dword_4293C4, ecx
		mov	ecx, [edx+6]
		mov	ds:dword_428B30, ecx
		mov	ecx, edx
		add	ecx, 0Ah
		jz	short loc_405415
		jmp	short loc_405426
; ---------------------------------------------------------------------------

loc_40540F:				; CODE XREF: sub_4053AB+34j
					; sub_4053AB+47j
		dec	ecx
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_4053E1

loc_405415:				; CODE XREF: sub_4053AB+60j
		inc	bx
		mov	edx, 3FFh
		mov	ebx, 0
		cmovz	ebx, edx
		jmp	short loc_4053DC
; ---------------------------------------------------------------------------

loc_405426:				; CODE XREF: sub_4053AB+62j
		mov	ds:dword_4293CC, ecx
		movzx	eax, word ptr [edx]
		mov	[esp+38h+hWnd],	offset FileName	; LPSTR
		mov	[esp+38h+lpString], eax	; int
		call	sub_4081D0
		push	eax
		push	eax
		mov	[esp+38h+lpString], 0FFFFFFFEh ; int
		mov	[esp+38h+hWnd],	offset chText ;	LPSTR
		call	sub_4083A6
		push	edx
		push	edx
		mov	[esp+38h+lpString], eax	; lpString
		mov	eax, ds:dword_426118
		mov	[esp+38h+hWnd],	eax ; hWnd
		call	ds:SetWindowTextA
		mov	ebx, ds:dword_428B54
		mov	esi, ds:dword_428B58
		push	ecx
		push	ecx
		jmp	short loc_405497
; ---------------------------------------------------------------------------

loc_405479:				; CODE XREF: sub_4053AB+EEj
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_405490
		mov	[esp+38h+lpString], eax	; int
		lea	eax, [ebx+18h]
		mov	[esp+38h+hWnd],	eax ; LPSTR
		call	sub_4083A6
		push	edi
		push	edi

loc_405490:				; CODE XREF: sub_4053AB+D2j
		add	ebx, 418h
		dec	esi

loc_405497:				; CODE XREF: sub_4053AB+CCj
		test	esi, esi
		jnz	short loc_405479
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4053AB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_4054A3(HWND	hWnd, int, LPCITEMIDLIST, LPSTR)
sub_4054A3	proc near		; DATA XREF: sub_405D58+1DDo

pidl		= dword	ptr -18h
pszPath		= dword	ptr -14h
wParam		= dword	ptr -10h
lParam		= dword	ptr -0Ch
hWnd		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+hWnd]
		mov	ebx, [ebp+arg_C]
		cmp	eax, 1
		jnz	short loc_4054E1
		mov	[esp+18h+pszPath], ebx ; LPSTR
		mov	[esp+18h+pidl],	3FBh ; int
		call	sub_407D88
		push	eax
		push	eax
		mov	[esp+18h+lParam], ebx
		mov	[esp+18h+wParam], 1
		mov	[esp+18h+pszPath], 466h
		jmp	short loc_405526
; ---------------------------------------------------------------------------

loc_4054E1:				; CODE XREF: sub_4054A3+14j
		cmp	eax, 2
		jnz	short loc_405532
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+pszPath], ebx ; pszPath
		mov	[esp+18h+pidl],	eax ; pidl
		call	ds:SHGetPathFromIDListA
		xor	edx, edx
		push	ecx
		test	eax, eax
		push	ecx
		jz	short loc_405512
		mov	[esp+18h+pidl],	7
		call	sub_403E5D
		push	edx
		xor	edx, edx
		test	eax, eax
		setz	dl

loc_405512:				; CODE XREF: sub_4054A3+59j
		mov	[esp+18h+lParam], edx ;	lParam
		mov	[esp+18h+wParam], 0 ; wParam
		mov	[esp+18h+pszPath], 465h	; Msg

loc_405526:				; CODE XREF: sub_4054A3+3Cj
		mov	[esp+18h+pidl],	esi ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h

loc_405532:				; CODE XREF: sub_4054A3+41j
		lea	esp, [ebp-8]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	ebp
		retn	10h
sub_4054A3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall sub_40553D(HWND hWnd, HDC hdc)
sub_40553D	proc near		; CODE XREF: sub_405619+6C7p
					; sub_405CF7+52p ...

hWnd		= dword	ptr -38h
nIndex		= dword	ptr -34h
plbrush		= LOGBRUSH ptr -24h

		push	ebp
		sub	eax, 133h
		mov	ebp, esp
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		mov	ebx, edx
		sub	esp, 2Ch
		cmp	eax, 5
		ja	loc_40560F
		mov	[esp+38h+hWnd],	ecx ; hWnd
		mov	[esp+38h+nIndex], 0FFFFFFEBh ; nIndex
		call	ds:GetWindowLongA
		test	eax, eax
		mov	esi, eax
		push	ecx
		push	ecx
		jz	loc_40560F
		test	byte ptr [esi+14h], 2
		mov	eax, [eax]
		jz	short loc_405587
		mov	[esp+38h+hWnd],	eax ; nIndex
		call	ds:GetSysColor
		push	edx

loc_405587:				; CODE XREF: sub_40553D+3Ej
		test	byte ptr [esi+14h], 1
		jz	short loc_40559C
		mov	[esp+38h+nIndex], eax ;	color
		mov	[esp+38h+hWnd],	ebx ; hdc
		call	ds:SetTextColor
		push	eax
		push	eax

loc_40559C:				; CODE XREF: sub_40553D+4Ej
		mov	eax, [esi+10h]
		mov	[esp+38h+hWnd],	ebx ; hdc
		mov	[esp+38h+nIndex], eax ;	mode
		call	ds:SetBkMode
		push	eax
		push	eax
		mov	eax, [esi+4]
		test	byte ptr [esi+14h], 8
		mov	[ebp+plbrush.lbColor], eax
		jz	short loc_4055C7
		mov	[esp+38h+hWnd],	eax ; nIndex
		call	ds:GetSysColor
		mov	[ebp+plbrush.lbColor], eax
		push	edi

loc_4055C7:				; CODE XREF: sub_40553D+7Bj
		test	byte ptr [esi+14h], 4
		jz	short loc_4055DF
		mov	eax, [ebp+plbrush.lbColor]
		mov	[esp+38h+hWnd],	ebx ; hdc
		mov	[esp+38h+nIndex], eax ;	color
		call	ds:SetBkColor
		push	ebx
		push	ebx

loc_4055DF:				; CODE XREF: sub_40553D+8Ej
		test	byte ptr [esi+14h], 10h
		jz	short loc_40560C
		mov	eax, [esi+8]
		mov	[ebp+plbrush.lbStyle], eax
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_4055FC
		mov	[esp+38h+hWnd],	eax ; ho
		call	ds:DeleteObject
		push	ecx

loc_4055FC:				; CODE XREF: sub_40553D+B3j
		lea	eax, [ebp+plbrush]
		mov	[esp+38h+hWnd],	eax ; plbrush
		call	ds:CreateBrushIndirect
		push	edx
		mov	[esi+0Ch], eax

loc_40560C:				; CODE XREF: sub_40553D+A6j
		mov	edi, [esi+0Ch]

loc_40560F:				; CODE XREF: sub_40553D+15j
					; sub_40553D+32j
		lea	esp, [ebp-0Ch]
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_40553D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; INT_PTR __stdcall sub_405619(HWND, UINT, WPARAM, LPARAM)
sub_405619	proc near		; DATA XREF: sub_4065F8+3ECo

hDlg		= dword	ptr -58h
nIDDlgItem	= dword	ptr -54h
dwNewLong	= dword	ptr -50h
lParam		= dword	ptr -4Ch
dwInitParam	= dword	ptr -48h
cy		= dword	ptr -44h
uFlags		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
Rect		= tagRECT ptr -28h
hWnd		= dword	ptr  8
arg_4		= dword	ptr  0Ch
wParam		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+hWnd]
		cmp	[ebp+arg_4], 110h
		mov	ebx, [ebp+wParam]
		setz	al
		cmp	[ebp+arg_4], 408h
		jz	short loc_405643
		test	al, al
		jz	loc_405B23

loc_405643:				; CODE XREF: sub_405619+20j
		test	al, al
		mov	ds:dword_42611C, ebx
		jz	short loc_4056C9
		mov	ebx, ds:GetDlgItem
		mov	ds:hwnd, esi
		mov	[esp+58h+nIDDlgItem], 1	; nIDDlgItem
		mov	[esp+58h+hDlg],	esi ; hDlg
		call	ebx ; GetDlgItem
		push	ecx
		push	ecx
		mov	ds:dword_426120, eax
		mov	[esp+58h+nIDDlgItem], 2	; nIDDlgItem
		mov	[esp+58h+hDlg],	esi ; hDlg
		call	ebx ; GetDlgItem
		or	ecx, 0FFFFFFFFh	; int
		mov	edx, 1Ch
		push	ebx
		push	ebx
		mov	ds:dword_426124, eax
		mov	eax, esi
		call	sub_405198
		mov	eax, ds:dwNewLong
		mov	[esp+58h+nIDDlgItem], 0FFFFFFF2h ; nIndex
		mov	[esp+58h+hDlg],	esi ; hWnd
		mov	[esp+58h+dwNewLong], eax ; dwNewLong
		call	ds:SetClassLongA
		sub	esp, 0Ch
		mov	[esp+58h+hDlg],	4
		call	sub_403E5D
		mov	ds:dword_42611C, 1
		push	edi
		mov	ds:dword_4293A8, eax

loc_4056C9:				; CODE XREF: sub_405619+32j
		mov	eax, dword_40B018
		mov	ebx, eax
		shl	ebx, 6
		add	ebx, ds:dword_428B4C
		test	eax, eax
		js	short loc_405744
		cmp	ds:dword_42611C, 1
		jnz	short loc_405739
		mov	[esp+58h+nIDDlgItem], 0	; hWnd
		mov	eax, [ebx+10h]
		mov	[esp+58h+hDlg],	eax ; int
		call	sub_403DAD
		test	eax, eax
		push	edx
		push	edx
		jz	short loc_405739
		mov	eax, ds:hDlg
		mov	[esp+58h+lParam], 1 ; lParam
		mov	[esp+58h+dwNewLong], 0 ; wParam
		mov	[esp+58h+nIDDlgItem], 40Fh ; Msg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SendMessageA
		xor	eax, eax
		sub	esp, 10h
		cmp	ds:dword_4293A8, 0
		setz	al
		jmp	loc_405CE5
; ---------------------------------------------------------------------------

loc_405739:				; CODE XREF: sub_405619+CBj
					; sub_405619+E4j
		xor	edi, edi
		cmp	dword ptr [ebx], 0
		jz	loc_405CEB

loc_405744:				; CODE XREF: sub_405619+C2j
		mov	eax, 40Bh
		call	sub_4050CB

loc_40574E:				; CODE XREF: sub_405619+371j
					; sub_405619+37Aj ...
		mov	eax, dword_40B018
		mov	edi, ds:dword_42611C
		add	eax, edi
		cmp	eax, ds:dword_428B50
		mov	dword_40B018, eax
		jnz	short loc_405775
		mov	[esp+58h+hDlg],	1
		call	sub_403E5D
		push	eax

loc_405775:				; CODE XREF: sub_405619+14Dj
		cmp	ds:dword_4293A8, 0
		jnz	short loc_40578B
		mov	eax, ds:dword_428B50
		cmp	dword_40B018, eax
		jb	short loc_4057BD

loc_40578B:				; CODE XREF: sub_405619+163j
		mov	eax, ds:hDlg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:DestroyWindow
		mov	eax, ds:nResult
		mov	ds:hwnd, 0
		push	ecx
		mov	[esp+58h+nIDDlgItem], eax ; nResult
		mov	[esp+58h+hDlg],	esi ; hDlg
		call	ds:EndDialog
		push	ebx
		push	ebx
		jmp	loc_405AE5
; ---------------------------------------------------------------------------

loc_4057BD:				; CODE XREF: sub_405619+170j
		shl	edi, 6
		add	ebx, edi
		mov	eax, [ebx+24h]
		mov	edi, [ebx+14h]
		mov	[esp+58h+hDlg],	offset dword_434800 ; LPSTR
		mov	[esp+58h+nIDDlgItem], eax ; int
		call	sub_4083A6
		mov	edx, 0FFFFFC19h
		push	eax
		push	eax
		mov	ecx, [ebx+20h]	; int
		mov	eax, esi
		call	sub_405198
		mov	ecx, [ebx+1Ch]	; int
		mov	edx, 0FFFFFC1Bh
		mov	eax, esi
		call	sub_405198
		mov	ecx, [ebx+28h]	; int
		mov	edx, 0FFFFFC1Ah
		mov	eax, esi
		call	sub_405198
		mov	[esp+58h+nIDDlgItem], 3	; nIDDlgItem
		mov	[esp+58h+hDlg],	esi ; hDlg
		call	ds:GetDlgItem
		cmp	ds:dword_428B14, 0
		push	edx
		push	edx
		mov	[ebp+var_2C], eax
		jz	short loc_40582F
		and	edi, 0FFFFFEFDh
		or	edi, 4

loc_40582F:				; CODE XREF: sub_405619+20Bj
		mov	eax, edi
		and	eax, 8
		mov	[esp+58h+nIDDlgItem], eax ; nCmdShow
		mov	eax, [ebp+var_2C]
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:ShowWindow
		mov	edx, ds:EnableWindow
		mov	[ebp+var_34], edx
		push	eax
		push	eax
		mov	eax, edi
		and	eax, 100h
		mov	[esp+58h+nIDDlgItem], eax ; bEnable
		mov	eax, [ebp+var_2C]
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	edx ; EnableWindow
		push	eax
		push	eax
		mov	eax, edi
		and	eax, 2
		and	edi, 4
		call	sub_40517C
		mov	eax, ds:dword_426124
		mov	edx, [ebp+var_34]
		mov	[esp+58h+nIDDlgItem], edi
		mov	[esp+58h+hDlg],	eax
		call	edx
		test	edi, edi
		push	eax
		push	eax
		mov	eax, ds:GetSystemMenu
		mov	[esp+58h+nIDDlgItem], 0	; bRevert
		mov	[esp+58h+hDlg],	esi ; hWnd
		jz	short loc_4058A6
		call	eax ; GetSystemMenu
		push	edi
		push	edi
		mov	[esp+58h+dwNewLong], 0
		jmp	short loc_4058B2
; ---------------------------------------------------------------------------

loc_4058A6:				; CODE XREF: sub_405619+27Dj
		call	eax ; GetSystemMenu
		push	ecx
		push	ecx
		mov	[esp+58h+dwNewLong], 1 ; uEnable

loc_4058B2:				; CODE XREF: sub_405619+28Bj
		mov	[esp+58h+nIDDlgItem], 0F060h ; uIDEnableItem
		mov	[esp+58h+hDlg],	eax ; hMenu
		call	ds:EnableMenuItem
		mov	eax, [ebp+var_2C]
		mov	edi, ds:SendMessageA
		sub	esp, 0Ch
		mov	[esp+58h+lParam], 1 ; lParam
		mov	[esp+58h+dwNewLong], 0 ; wParam
		mov	[esp+58h+nIDDlgItem], 0F4h ; Msg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	edi ; SendMessageA
		mov	eax, ds:dword_426120
		sub	esp, 10h
		cmp	ds:dword_428B14, 0
		jz	short loc_405922
		mov	[esp+58h+lParam], 0 ; lParam
		mov	[esp+58h+dwNewLong], 2 ; wParam
		mov	[esp+58h+nIDDlgItem], 401h ; Msg
		mov	[esp+58h+hDlg],	esi ; hWnd
		call	edi ; SendMessageA
		mov	eax, ds:dword_426124
		sub	esp, 10h

loc_405922:				; CODE XREF: sub_405619+2E2j
		call	sub_40509E
		mov	[esp+58h+nIDDlgItem], offset chText ; LPCSTR
		mov	[esp+58h+hDlg],	offset Data ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		mov	edi, [ebx+18h]
		mov	[esp+58h+hDlg],	offset Data
		call	sub_4082BC
		add	eax, offset Data
		push	edx
		mov	[esp+58h+nIDDlgItem], edi ; int
		mov	[esp+58h+hDlg],	eax ; LPSTR
		call	sub_4083A6
		push	ecx
		push	ecx
		mov	[esp+58h+nIDDlgItem], offset Data ; lpString
		mov	[esp+58h+hDlg],	esi ; hWnd
		call	ds:SetWindowTextA
		push	edi
		push	edi
		mov	[esp+58h+nIDDlgItem], 0	; hWnd
		mov	eax, [ebx+8]
		mov	[esp+58h+hDlg],	eax ; int
		call	sub_403DAD
		test	eax, eax
		push	edx
		push	edx
		jnz	loc_40574E
		cmp	dword ptr [ebx], 0
		jz	loc_40574E
		cmp	dword ptr [ebx+4], 5
		jz	short loc_4059BF
		mov	eax, ds:hDlg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:DestroyWindow
		mov	ds:dword_42612C, ebx
		push	eax
		mov	eax, [ebx]
		test	eax, eax
		jg	short loc_4059DE
		jmp	loc_405AE5
; ---------------------------------------------------------------------------

loc_4059BF:				; CODE XREF: sub_405619+384j
		cmp	ds:dword_428B14, 0
		jnz	loc_405CE9
		cmp	ds:dword_428B08, 0
		jnz	loc_40574E
		jmp	loc_405CE9
; ---------------------------------------------------------------------------

loc_4059DE:				; CODE XREF: sub_405619+39Fj
		add	eax, ds:dword_4293C4
		mov	[esp+58h+dwInitParam], ebx ; dwInitParam
		mov	edx, [ebx+4]
		mov	[esp+58h+dwNewLong], esi ; hWndParent
		movzx	eax, ax
		mov	[esp+58h+nIDDlgItem], eax ; lpTemplateName
		mov	eax, ds:hInstance
		mov	edx, ds:lpDialogFunc[edx*4]
		mov	[esp+58h+hDlg],	eax ; hInstance
		mov	[esp+58h+lParam], edx ;	lpDialogFunc
		call	ds:CreateDialogParamA
		sub	esp, 14h
		test	eax, eax
		mov	ds:hDlg, eax
		jz	loc_405AE5
		mov	ecx, [ebx+2Ch]	; int
		mov	edx, 6
		lea	edi, [ebp+Rect]
		call	sub_405198
		mov	[esp+58h+nIDDlgItem], 3FAh ; nIDDlgItem
		mov	[esp+58h+hDlg],	esi ; hDlg
		call	ds:GetDlgItem
		push	edx
		push	edx
		mov	[esp+58h+nIDDlgItem], edi ; lpRect
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:GetWindowRect
		push	ecx
		push	ecx
		mov	[esp+58h+nIDDlgItem], edi ; lpPoint
		mov	[esp+58h+hDlg],	esi ; hWnd
		call	ds:ScreenToClient
		mov	eax, [ebp+Rect.top]
		push	edi
		push	edi
		xor	edi, edi
		mov	[esp+58h+lParam], eax ;	Y
		mov	eax, [ebp+Rect.left]
		mov	[esp+58h+uFlags], 15h ;	uFlags
		mov	[esp+58h+cy], 0	; cy
		mov	[esp+58h+dwInitParam], 0 ; cx
		mov	[esp+58h+dwNewLong], eax ; X
		mov	eax, ds:hDlg
		mov	[esp+58h+nIDDlgItem], 0	; hWndInsertAfter
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SetWindowPos
		sub	esp, 1Ch
		mov	[esp+58h+nIDDlgItem], 0	; hWnd
		mov	eax, [ebx+0Ch]
		mov	[esp+58h+hDlg],	eax ; int
		call	sub_403DAD
		cmp	ds:dword_4293A8, 0
		push	eax
		push	eax
		jnz	loc_405CEB
		mov	eax, ds:hDlg
		mov	[esp+58h+nIDDlgItem], 8	; nCmdShow
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:ShowWindow
		push	eax
		push	eax
		mov	eax, 405h
		call	sub_4050CB

loc_405AE5:				; CODE XREF: sub_405619+19Fj
					; sub_405619+3A1j ...
		xor	edi, edi
		cmp	ds:dword_4250EC, 0
		jnz	loc_405CEB
		cmp	ds:hDlg, 0
		jz	loc_405CEB
		mov	[esp+58h+nIDDlgItem], 0Ah ; nCmdShow
		mov	[esp+58h+hDlg],	esi ; hWnd
		call	ds:ShowWindow
		mov	ds:dword_4250EC, 1
		push	eax
		push	eax
		jmp	loc_405CEB
; ---------------------------------------------------------------------------

loc_405B23:				; CODE XREF: sub_405619+24j
		cmp	[ebp+arg_4], 47h
		jnz	short loc_405B6B
		mov	eax, ds:dword_426118
		mov	[esp+58h+uFlags], 13h ;	uFlags
		mov	[esp+58h+cy], 0	; cy
		mov	[esp+58h+dwInitParam], 0 ; cx
		mov	[esp+58h+lParam], 0 ; Y
		mov	[esp+58h+dwNewLong], 0 ; X
		mov	[esp+58h+nIDDlgItem], esi ; hWndInsertAfter
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SetWindowPos
		sub	esp, 1Ch
		jmp	loc_405CD8
; ---------------------------------------------------------------------------

loc_405B6B:				; CODE XREF: sub_405619+50Ej
		cmp	[ebp+arg_4], 5
		jnz	short loc_405B95
		xor	eax, eax
		cmp	ebx, 1
		setnz	al
		lea	eax, [eax+eax*4]
		mov	[esp+58h+nIDDlgItem], eax ; nCmdShow
		mov	eax, ds:dword_426118
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:ShowWindow
		push	eax
		push	eax
		jmp	loc_405CD8
; ---------------------------------------------------------------------------

loc_405B95:				; CODE XREF: sub_405619+556j
		cmp	[ebp+arg_4], 40Dh
		jnz	short loc_405BB8
		mov	eax, ds:hDlg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:DestroyWindow
		mov	ds:hDlg, ebx
		push	edi
		jmp	loc_405AE5
; ---------------------------------------------------------------------------

loc_405BB8:				; CODE XREF: sub_405619+583j
		cmp	[ebp+arg_4], 11h
		jnz	short loc_405BE4
		mov	[esp+58h+dwNewLong], 0 ; dwNewLong
		mov	edi, 1
		mov	[esp+58h+nIDDlgItem], 0	; nIndex
		mov	[esp+58h+hDlg],	esi ; hWnd
		call	ds:SetWindowLongA
		sub	esp, 0Ch
		jmp	loc_405CEB
; ---------------------------------------------------------------------------

loc_405BE4:				; CODE XREF: sub_405619+5A3j
		cmp	[ebp+arg_4], 111h
		jnz	loc_405CD8
		movzx	eax, bx
		mov	[esp+58h+hDlg],	esi ; hDlg
		mov	[ebp+var_30], eax
		mov	[esp+58h+nIDDlgItem], eax ; nIDDlgItem
		call	ds:GetDlgItem
		test	eax, eax
		mov	esi, eax
		push	ecx
		push	ecx
		jz	short loc_405C44
		mov	[esp+58h+lParam], 0 ; lParam
		xor	edi, edi
		mov	[esp+58h+dwNewLong], 0 ; wParam
		mov	[esp+58h+nIDDlgItem], 0F3h ; Msg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		mov	[esp+58h+hDlg],	esi ; hWnd
		call	ds:IsWindowEnabled
		test	eax, eax
		push	edx
		jz	loc_405CEB

loc_405C44:				; CODE XREF: sub_405619+5F1j
		cmp	[ebp+var_30], 1
		mov	eax, 1
		jz	short loc_405C61
		cmp	[ebp+var_30], 3
		jnz	short loc_405C68
		cmp	dword_40B018, 0
		jle	short loc_405CB4
		or	eax, 0FFFFFFFFh

loc_405C61:				; CODE XREF: sub_405619+634j
					; sub_405619+67Aj ...
		call	sub_4050FD
		jmp	short loc_405CD8
; ---------------------------------------------------------------------------

loc_405C68:				; CODE XREF: sub_405619+63Aj
		cmp	[ebp+var_30], 2
		jnz	short loc_405CB4
		cmp	ds:dword_428B14, 0
		jz	short loc_405C95
		mov	[esp+58h+hDlg],	2
		call	sub_403E5D
		mov	eax, 78h
		mov	ds:nResult, 2
		push	edi
		jmp	short loc_405C61
; ---------------------------------------------------------------------------

loc_405C95:				; CODE XREF: sub_405619+65Cj
		mov	[esp+58h+hDlg],	3
		call	sub_403E5D
		test	eax, eax
		push	esi
		jnz	short loc_405CD8
		mov	ds:nResult, 1
		mov	al, 78h
		jmp	short loc_405C61
; ---------------------------------------------------------------------------

loc_405CB4:				; CODE XREF: sub_405619+643j
					; sub_405619+653j
		mov	eax, [ebp+arg_C]
		mov	[esp+58h+dwNewLong], ebx ; wParam
		mov	[esp+58h+nIDDlgItem], 111h ; Msg
		mov	[esp+58h+lParam], eax ;	lParam
		mov	eax, ds:hDlg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h

loc_405CD8:				; CODE XREF: sub_405619+54Dj
					; sub_405619+577j ...
		mov	ecx, [ebp+arg_C] ; hWnd
		mov	edx, ebx	; hdc
		mov	eax, [ebp+arg_4]
		call	sub_40553D

loc_405CE5:				; CODE XREF: sub_405619+11Bj
		mov	edi, eax
		jmp	short loc_405CEB
; ---------------------------------------------------------------------------

loc_405CE9:				; CODE XREF: sub_405619+3ADj
					; sub_405619+3C0j
		xor	edi, edi

loc_405CEB:				; CODE XREF: sub_405619+125j
					; sub_405619+4A4j ...
		lea	esp, [ebp-0Ch]
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_405619	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_405CF7(int,	int, HDC hdc, HWND hWnd)
sub_405CF7	proc near		; DATA XREF: .rdata:0040CA30o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
hdc		= dword	ptr  10h
hWnd		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+hWnd]
		cmp	edi, 110h
		jnz	short loc_405D42
		mov	ecx, [ebx+30h]	; int
		mov	edx, 1Dh
		mov	eax, esi
		call	sub_405198
		mov	eax, [ebx+3Ch]
		mov	[esp+28h+var_24], 3E8h
		mov	[esp+28h+var_28], esi
		shl	eax, 0Ah
		add	eax, offset dword_42D000
		mov	[esp+28h+var_20], eax
		call	sub_407D7D
		sub	esp, 0Ch

loc_405D42:				; CODE XREF: sub_405CF7+18j
		mov	edx, [ebp+hdc]	; hdc
		mov	ecx, ebx	; hWnd
		mov	eax, edi
		call	sub_40553D
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_405CF7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_405D58(HWND, int, HDC hdc, HWND)
sub_405D58	proc near		; DATA XREF: .rdata:0040CA28o

hDlg		= dword	ptr -98h
nIDDlgItem	= dword	ptr -94h
lpBytesPerSector= dword	ptr -90h
lpNumberOfFreeClusters=	dword ptr -8Ch
lpTotalNumberOfClusters= dword ptr -88h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
hWnd		= dword	ptr -6Ch
bi		= _browseinfoA ptr -60h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_30		= byte ptr -30h
SectorsPerCluster= dword ptr -28h
BytesPerSector	= dword	ptr -24h
NumberOfFreeClusters= dword ptr	-20h
TotalNumberOfClusters= dword ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
hdc		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	eax, ds:dword_42612C
		mov	esi, [ebp+arg_0]
		mov	ebx, [eax+3Ch]
		mov	[ebp+var_70], eax
		mov	edx, [eax+38h]
		shl	ebx, 0Ah
		add	ebx, offset dword_42D000
		cmp	[ebp+arg_4], 40Bh
		jnz	short loc_405DDA
		mov	[esp+98h+nIDDlgItem], ebx ; LPSTR
		mov	[esp+98h+hDlg],	3FBh ; int
		call	sub_407D88
		push	edi
		push	edi
		mov	[esp+98h+hDlg],	ebx ; lpszStart
		call	sub_4082D2
		push	eax
		mov	[esp+98h+nIDDlgItem], 3F0h ; nIDDlgItem
		mov	[esp+98h+hDlg],	esi ; hDlg
		call	ds:GetDlgItem
		test	eax, eax
		push	edx
		push	edx
		jz	loc_405FFF
		mov	[esp+98h+nIDDlgItem], 3F0h ; nIDButton
		mov	[esp+98h+hDlg],	esi ; hDlg
		call	ds:IsDlgButtonChecked
		push	ecx
		push	ecx
		mov	ds:dword_42A3D0, eax
		jmp	loc_405FFF
; ---------------------------------------------------------------------------

loc_405DDA:				; CODE XREF: sub_405D58+2Dj
		cmp	[ebp+arg_4], 110h
		jnz	loc_405EDC
		mov	edx, ds:GetDlgItem
		mov	[esp+98h+nIDDlgItem], 3FBh ; nIDDlgItem
		mov	[esp+98h+hDlg],	esi ; hDlg
		mov	[ebp+var_74], edx
		call	edx ; GetDlgItem
		push	edi
		push	edi
		mov	edi, eax
		mov	[esp+98h+hDlg],	10h ; vKey
		call	ds:GetAsyncKeyState
		test	ax, ax
		push	edx
		mov	edx, [ebp+var_74]
		jns	short loc_405E50
		mov	[esp+98h+nIDDlgItem], 3F0h
		mov	[esp+98h+hDlg],	esi
		call	edx
		mov	ecx, 0FFFFFFE0h	; int
		push	edx
		push	edx
		mov	edx, 8
		mov	[ebp+hWnd], eax
		mov	eax, esi
		call	sub_405198
		mov	eax, [ebp+hWnd]
		mov	[esp+98h+nIDDlgItem], 8	; nCmdShow
		mov	[esp+98h+hDlg],	eax ; hWnd
		call	ds:ShowWindow
		push	ecx
		push	ecx

loc_405E50:				; CODE XREF: sub_405D58+BDj
		mov	[esp+98h+hDlg],	ebx
		call	sub_407EE1
		test	eax, eax
		push	ecx
		jz	short loc_405E73
		mov	[esp+98h+hDlg],	ebx ; LPCSTR
		call	sub_407F0F
		test	eax, eax
		push	edx
		jnz	short loc_405E73
		mov	[esp+98h+hDlg],	ebx ; lpszStart
		call	sub_407E2D
		push	ecx

loc_405E73:				; CODE XREF: sub_405D58+103j
					; sub_405D58+110j
		mov	ds:hDlg, esi
		mov	[esp+98h+nIDDlgItem], ebx ; lpString
		mov	[esp+98h+hDlg],	edi ; hWnd
		call	ds:SetWindowTextA
		mov	edx, [ebp+arg_C]
		push	eax
		push	eax
		mov	ecx, [edx+34h]	; int
		mov	eax, esi
		mov	edx, 1
		call	sub_405198
		mov	eax, [ebp+arg_C]
		mov	edx, 14h
		mov	ecx, [eax+30h]	; int
		mov	eax, esi
		call	sub_405198
		mov	eax, edi
		call	sub_40509E
		mov	[esp+98h+hDlg],	0Ah
		call	sub_40894A
		test	eax, eax
		push	edx
		jz	loc_405FFF
		mov	[esp+98h+hDlg],	edi
		mov	[esp+98h+nIDDlgItem], 1
		call	eax
		push	edi
		push	edi
		jmp	loc_405FFF
; ---------------------------------------------------------------------------

loc_405EDC:				; CODE XREF: sub_405D58+89j
		cmp	[ebp+arg_4], 111h
		jnz	loc_405FFF
		movzx	eax, word ptr [ebp+hdc]
		cmp	eax, 3FBh
		jnz	short loc_405F0F
		mov	eax, [ebp+hdc]
		shr	eax, 10h
		cmp	ax, 300h
		mov	eax, 40Fh
		cmovnz	eax, [ebp+arg_4]
		mov	[ebp+arg_4], eax
		jmp	loc_405FFF
; ---------------------------------------------------------------------------

loc_405F0F:				; CODE XREF: sub_405D58+19Aj
		cmp	eax, 3E9h
		jnz	loc_405FFF
		xor	ax, ax
		mov	ecx, 8
		lea	edi, [ebp+bi]
		rep stosd
		mov	[esp+98h+nIDDlgItem], edx ; int
		mov	[ebp+bi.hwndOwner], esi
		mov	[ebp+bi.pszDisplayName], offset	Data
		mov	[ebp+bi.lpfn], offset sub_4054A3
		mov	[ebp+bi.lParam], ebx
		mov	[esp+98h+hDlg],	offset dword_426130 ; LPSTR
		call	sub_4083A6
		mov	[ebp+bi.ulFlags], 41h
		push	edx
		push	edx
		mov	[ebp+bi.lpszTitle], eax
		lea	eax, [ebp+bi]
		mov	[esp+98h+hDlg],	eax ; lpbi
		call	ds:SHBrowseForFolderA
		test	eax, eax
		push	ecx
		jz	loc_405FF8
		mov	[esp+98h+hDlg],	eax ; pv
		call	ds:CoTaskMemFree
		push	ecx
		mov	[esp+98h+hDlg],	ebx ; lpszStart
		call	sub_407E2D
		mov	eax, ds:dword_428B48
		push	edi
		mov	eax, [eax+11Ch]
		test	eax, eax
		jz	short loc_405FD9
		cmp	ebx, offset byte_432400
		jnz	short loc_405FD9
		mov	[esp+98h+nIDDlgItem], eax ; int
		mov	[esp+98h+hDlg],	0 ; LPSTR
		call	sub_4083A6
		push	edi
		push	edi
		mov	[esp+98h+nIDDlgItem], offset Data ; lpString2
		mov	[esp+98h+hDlg],	offset String1 ; lpString1
		call	ds:lstrcmpiA
		test	eax, eax
		push	edx
		push	edx
		jz	short loc_405FD9
		mov	[esp+98h+nIDDlgItem], offset String1
		mov	[esp+98h+hDlg],	offset byte_432400
		call	sub_4082C7
		push	ecx
		push	ecx

loc_405FD9:				; CODE XREF: sub_405D58+234j
					; sub_405D58+23Cj ...
		inc	ds:dword_426530
		mov	[esp+98h+lpBytesPerSector], ebx
		mov	[esp+98h+nIDDlgItem], 3FBh
		mov	[esp+98h+hDlg],	esi
		call	sub_407D7D
		sub	esp, 0Ch
		jmp	short loc_405FFF
; ---------------------------------------------------------------------------

loc_405FF8:				; CODE XREF: sub_405D58+20Ej
		mov	[ebp+arg_4], 40Fh

loc_405FFF:				; CODE XREF: sub_405D58+5Fj
					; sub_405D58+7Dj ...
		cmp	[ebp+arg_4], 405h
		jz	short loc_406015
		cmp	[ebp+arg_4], 40Fh
		jnz	loc_40622A

loc_406015:				; CODE XREF: sub_405D58+2AEj
		mov	[esp+98h+nIDDlgItem], ebx ; LPSTR
		mov	[esp+98h+hDlg],	3FBh ; int
		call	sub_407D88
		push	edi
		push	edi
		mov	[esp+98h+hDlg],	ebx ; LPCSTR
		call	sub_40880F
		push	edx
		xor	edx, edx
		test	eax, eax
		setz	dl
		mov	edi, edx
		mov	[esp+98h+nIDDlgItem], ebx ; LPCSTR
		mov	[esp+98h+hDlg],	offset RootPathName ; LPSTR
		call	sub_408294
		push	ecx
		push	ecx
		mov	[esp+98h+hDlg],	1
		call	sub_40894A
		test	eax, eax
		push	edx
		mov	[ebp+hWnd], eax
		jz	short loc_4060D1
		xor	edx, edx

loc_406061:				; CODE XREF: sub_405D58+377j
		lea	eax, [ebp+var_30]
		mov	[esp+98h+lpNumberOfFreeClusters], eax
		lea	eax, [ebp+var_38]
		mov	[esp+98h+lpBytesPerSector], eax
		lea	eax, [ebp+var_40]
		mov	[ebp+var_74], edx
		mov	[esp+98h+nIDDlgItem], eax
		mov	[esp+98h+hDlg],	offset RootPathName
		call	[ebp+hWnd]
		mov	edx, [ebp+var_74]
		sub	esp, 10h
		test	eax, eax
		jz	short loc_4060AA
		mov	edx, [ebp+var_3C]
		mov	ebx, 1
		mov	eax, [ebp+var_40]
		shrd	eax, edx, 0Ah
		shr	edx, 0Ah
		mov	[ebp+var_40], eax
		mov	[ebp+var_3C], edx
		jmp	loc_406154
; ---------------------------------------------------------------------------

loc_4060AA:				; CODE XREF: sub_405D58+333j
		test	edx, edx
		jz	short loc_4060B3
		mov	word ptr [edx],	0

loc_4060B3:				; CODE XREF: sub_405D58+354j
		mov	[esp+98h+hDlg],	offset RootPathName ; lpszStart
		call	sub_407EA3
		lea	edx, [eax-1]
		cmp	edx, offset RootPathName
		push	ecx
		mov	word ptr [eax-1], 5Ch
		jnz	short loc_406061

loc_4060D1:				; CODE XREF: sub_405D58+305j
		mov	[esp+98h+nIDDlgItem], ebx ; LPCSTR
		mov	[esp+98h+hDlg],	offset RootPathName ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		mov	[esp+98h+hDlg],	offset RootPathName ; LPCSTR
		call	sub_407F0F
		test	eax, eax
		push	edx
		jz	short loc_4060F7
		mov	byte ptr [eax],	0

loc_4060F7:				; CODE XREF: sub_405D58+39Aj
		lea	eax, [ebp+TotalNumberOfClusters]
		xor	ebx, ebx
		mov	[esp+98h+lpTotalNumberOfClusters], eax ; lpTotalNumberOfClusters
		lea	eax, [ebp+NumberOfFreeClusters]
		mov	[esp+98h+lpNumberOfFreeClusters], eax ;	lpNumberOfFreeClusters
		lea	eax, [ebp+BytesPerSector]
		mov	[esp+98h+lpBytesPerSector], eax	; lpBytesPerSector
		lea	eax, [ebp+SectorsPerCluster]
		mov	[esp+98h+nIDDlgItem], eax ; lpSectorsPerCluster
		mov	[esp+98h+hDlg],	offset RootPathName ; lpRootPathName
		call	ds:GetDiskFreeSpaceA
		sub	esp, 14h
		test	eax, eax
		jz	short loc_406154
		mov	eax, [ebp+NumberOfFreeClusters]
		mov	bl, 1
		mov	[esp+98h+lpBytesPerSector], 400h ; nDenominator
		mov	[esp+98h+nIDDlgItem], eax ; nNumerator
		mov	eax, [ebp+SectorsPerCluster]
		imul	eax, [ebp+BytesPerSector]
		mov	[esp+98h+hDlg],	eax ; nNumber
		call	ds:MulDiv
		cdq
		sub	esp, 0Ch
		mov	[ebp+var_40], eax
		mov	[ebp+var_3C], edx

loc_406154:				; CODE XREF: sub_405D58+34Dj
					; sub_405D58+3CFj
		mov	eax, 5
		call	sub_40502C
		test	ebx, ebx
		jz	short loc_406173
		cmp	[ebp+var_3C], 0
		ja	short loc_406173
		cmp	[ebp+var_40], eax
		mov	edx, 2
		cmovb	edi, edx

loc_406173:				; CODE XREF: sub_405D58+408j
					; sub_405D58+40Ej
		mov	edx, ds:dword_4293CC
		cmp	dword ptr [edx+10h], 0
		jz	short loc_4061DA
		mov	[esp+98h+hDlg],	eax
		mov	edx, 0FFFFFFFBh
		mov	eax, 3FFh
		mov	[esp+98h+nIDDlgItem], 0
		call	sub_405281
		test	ebx, ebx
		push	eax
		push	eax
		jz	short loc_4061BF
		mov	eax, [ebp+var_40]
		mov	edx, [ebp+var_3C]
		mov	[esp+98h+hDlg],	eax
		mov	eax, 400h
		mov	[esp+98h+nIDDlgItem], edx
		mov	edx, 0FFFFFFFCh
		call	sub_405281
		push	ecx
		push	ecx
		jmp	short loc_4061DA
; ---------------------------------------------------------------------------

loc_4061BF:				; CODE XREF: sub_405D58+445j
		mov	[esp+98h+lpBytesPerSector], offset byte_40C977
		mov	[esp+98h+nIDDlgItem], 400h
		mov	[esp+98h+hDlg],	esi
		call	sub_407D7D
		sub	esp, 0Ch

loc_4061DA:				; CODE XREF: sub_405D58+425j
					; sub_405D58+465j
		test	edi, edi
		mov	ds:dword_428B2C, edi
		jnz	short loc_4061F3
		mov	[esp+98h+hDlg],	7
		call	sub_403E5D
		mov	edi, eax
		push	edx

loc_4061F3:				; CODE XREF: sub_405D58+48Aj
		mov	eax, [ebp+var_70]
		test	byte ptr [eax+15h], 4
		mov	eax, 0
		cmovnz	edi, eax
		xor	eax, eax
		test	edi, edi
		setz	al
		call	sub_40517C
		test	edi, edi
		jnz	short loc_406220
		cmp	ds:dword_426530, 0
		jnz	short loc_406220
		call	sub_40505F

loc_406220:				; CODE XREF: sub_405D58+4B8j
					; sub_405D58+4C1j
		mov	ds:dword_426530, 0

loc_40622A:				; CODE XREF: sub_405D58+2B7j
		mov	ecx, [ebp+arg_C] ; hWnd
		mov	edx, [ebp+hdc]	; hdc
		mov	eax, [ebp+arg_4]
		call	sub_40553D
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_405D58	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_406242(HWND	hwnd, int, HDC hdc, HWND hWnd)
sub_406242	proc near		; DATA XREF: .rdata:lpDialogFunco

hDlg		= dword	ptr -58h
nIDButton	= dword	ptr -54h
uCheck		= dword	ptr -50h
lParam		= dword	ptr -4Ch
lpDirectory	= dword	ptr -48h
nShowCmd	= dword	ptr -44h
var_34		= dword	ptr -34h
wParam		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
lpFile		= dword	ptr -1Ch
hwnd		= dword	ptr  8
arg_4		= dword	ptr  0Ch
hdc		= dword	ptr  10h
hWnd		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+hwnd]
		cmp	[ebp+arg_4], 110h
		mov	ebx, [ebp+hWnd]
		mov	edi, ds:dword_42612C
		jnz	loc_4063E5
		mov	eax, [ebx+30h]
		test	eax, eax
		jns	short loc_406276
		mov	edx, ds:dword_4293CC
		not	eax
		mov	eax, [edx+eax*4]

loc_406276:				; CODE XREF: sub_406242+27j
		add	eax, ds:dword_428B64
		mov	ecx, [ebx+34h]	; int
		movsx	edx, byte ptr [eax]
		inc	eax
		mov	[ebp+var_2C], eax
		mov	[ebp+var_24], eax
		mov	eax, [ebx+14h]
		mov	[ebp+var_20], 0
		mov	[ebp+wParam], edx
		mov	[ebp+lpFile], offset sub_405135
		test	al, 20h
		mov	edi, eax
		setz	dl
		mov	eax, esi
		or	edi, edx
		mov	edx, 22h
		call	sub_405198
		mov	ecx, [ebx+38h]	; int
		and	edi, 1
		mov	edx, 23h
		mov	eax, esi
		call	sub_405198
		mov	eax, edi
		neg	eax
		add	eax, 40Bh
		mov	[esp+58h+uCheck], 1 ; uCheck
		mov	[esp+58h+nIDButton], eax ; nIDButton
		mov	[esp+58h+hDlg],	esi ; hDlg
		call	ds:CheckDlgButton
		mov	eax, edi
		sub	esp, 0Ch
		call	sub_40517C
		mov	[esp+58h+nIDButton], 3E8h ; nIDDlgItem
		mov	[esp+58h+hDlg],	esi ; hDlg
		call	ds:GetDlgItem
		push	edi
		mov	ebx, eax
		push	edi
		call	sub_40509E
		mov	[esp+58h+lParam], 0 ; lParam
		mov	[esp+58h+uCheck], 1 ; wParam
		mov	[esp+58h+nIDButton], 45Bh ; Msg
		mov	[esp+58h+hDlg],	ebx ; hWnd
		call	ds:SendMessageA
		mov	eax, ds:dword_428B48
		mov	eax, [eax+68h]
		sub	esp, 10h
		test	eax, eax
		jns	short loc_406342
		neg	eax
		mov	[esp+58h+hDlg],	eax ; nIndex
		call	ds:GetSysColor
		push	esi

loc_406342:				; CODE XREF: sub_406242+F2j
		mov	esi, ds:SendMessageA
		mov	[esp+58h+lParam], eax ;	lParam
		mov	[esp+58h+uCheck], 0 ; wParam
		mov	[esp+58h+nIDButton], 443h ; Msg
		mov	[esp+58h+hDlg],	ebx ; hWnd
		call	esi ; SendMessageA
		sub	esp, 10h
		mov	[esp+58h+lParam], 4010000h ; lParam
		mov	[esp+58h+uCheck], 0 ; wParam
		mov	[esp+58h+nIDButton], 445h ; Msg
		mov	[esp+58h+hDlg],	ebx ; hWnd
		call	esi ; SendMessageA
		mov	eax, [ebp+var_2C]
		mov	ds:dword_426944, 0
		sub	esp, 10h
		mov	[esp+58h+hDlg],	eax
		call	sub_4082BC
		push	ecx
		mov	[esp+58h+lParam], eax ;	lParam
		mov	[esp+58h+uCheck], 0 ; wParam
		mov	[esp+58h+nIDButton], 435h ; Msg
		mov	[esp+58h+hDlg],	ebx ; hWnd
		call	esi ; SendMessageA
		mov	edx, [ebp+wParam]
		lea	eax, [ebp+var_24]
		sub	esp, 10h
		mov	[esp+58h+lParam], eax ;	lParam
		mov	[esp+58h+uCheck], edx ;	wParam
		mov	[esp+58h+nIDButton], 449h ; Msg
		mov	[esp+58h+hDlg],	ebx ; hWnd
		call	esi ; SendMessageA
		xor	esi, esi
		mov	ds:dword_426948, 0
		sub	esp, 10h
		jmp	loc_4065EC
; ---------------------------------------------------------------------------

loc_4063E5:				; CODE XREF: sub_406242+1Cj
		cmp	[ebp+arg_4], 111h
		jnz	short loc_406465
		mov	edx, [ebp+hdc]
		shr	edx, 10h
		jnz	loc_4065DD
		cmp	ds:dword_426948, 0
		jnz	loc_4065DD
		test	byte ptr [edi+14h], 20h
		jz	loc_4065DD
		mov	[esp+58h+hDlg],	esi ; hDlg
		mov	[esp+58h+nIDButton], 40Ah ; nIDDlgItem
		call	ds:GetDlgItem
		push	edx
		push	edx
		mov	[esp+58h+lParam], 0 ; lParam
		mov	[esp+58h+uCheck], 0 ; wParam
		mov	[esp+58h+nIDButton], 0F0h ; Msg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SendMessageA
		mov	edx, [edi+14h]
		and	edx, 0FFFFFFFEh
		and	eax, 1
		sub	esp, 10h
		or	edx, eax
		mov	[edi+14h], edx
		call	sub_40517C
		call	sub_40505F
		jmp	loc_4065DD
; ---------------------------------------------------------------------------

loc_406465:				; CODE XREF: sub_406242+1AAj
		cmp	[ebp+arg_4], 4Eh
		jnz	loc_4065CE
		mov	[esp+58h+nIDButton], 3E8h ; nIDDlgItem
		mov	[esp+58h+hDlg],	esi ; hDlg
		call	ds:GetDlgItem
		push	edi
		push	edi
		cmp	dword ptr [ebx+8], 70Bh
		jnz	loc_406557
		cmp	dword ptr [ebx+0Ch], 201h
		jnz	loc_406557
		mov	edx, [ebx+18h]
		mov	ecx, [ebx+1Ch]
		mov	[ebp+lpFile], offset String1
		mov	[ebp+var_24], edx
		mov	[ebp+var_20], ecx
		sub	ecx, edx
		cmp	ecx, 7FFh
		ja	loc_406557
		lea	edx, [ebp+var_24]
		mov	[esp+58h+lParam], edx ;	lParam
		mov	[esp+58h+uCheck], 0 ; wParam
		mov	[esp+58h+nIDButton], 44Bh ; Msg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SendMessageA
		mov	edx, ds:LoadCursorA
		mov	[ebp+var_34], edx
		sub	esp, 10h
		mov	[esp+58h+nIDButton], 7F02h ; lpCursorName
		mov	[esp+58h+hDlg],	0 ; hInstance
		call	edx ; LoadCursorA
		mov	edi, ds:SetCursor
		push	ecx
		push	ecx
		mov	[esp+58h+hDlg],	eax ; hCursor
		call	edi ; SetCursor
		push	eax
		mov	eax, [ebp+lpFile]
		mov	[esp+58h+nShowCmd], 1 ;	nShowCmd
		mov	[esp+58h+lpDirectory], 0 ; lpDirectory
		mov	[esp+58h+lParam], 0 ; lpParameters
		mov	[esp+58h+uCheck], eax ;	lpFile
		mov	[esp+58h+nIDButton], offset Operation ;	"open"
		mov	[esp+58h+hDlg],	esi ; hwnd
		call	ds:ShellExecuteA
		mov	edx, [ebp+var_34]
		sub	esp, 18h
		mov	[esp+58h+nIDButton], 7F00h
		mov	[esp+58h+hDlg],	0
		call	edx
		push	edx
		push	edx
		mov	[esp+58h+hDlg],	eax ; hCursor
		call	edi ; SetCursor
		push	ecx

loc_406557:				; CODE XREF: sub_406242+247j
					; sub_406242+254j ...
		cmp	dword ptr [ebx+8], 700h
		jnz	short loc_4065DD
		cmp	dword ptr [ebx+0Ch], 100h
		jnz	short loc_4065DD
		cmp	dword ptr [ebx+10h], 0Dh
		jnz	short loc_406598
		mov	eax, ds:hwnd
		mov	[esp+58h+lParam], 0 ; lParam
		mov	[esp+58h+uCheck], 1 ; wParam
		mov	[esp+58h+nIDButton], 111h ; Msg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h

loc_406598:				; CODE XREF: sub_406242+32Bj
		cmp	dword ptr [ebx+10h], 1Bh
		mov	esi, 1
		jnz	short loc_4065EC
		mov	eax, ds:hwnd
		mov	[esp+58h+lParam], 0 ; lParam
		mov	[esp+58h+uCheck], 0 ; wParam
		mov	[esp+58h+nIDButton], 10h ; Msg
		mov	[esp+58h+hDlg],	eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		jmp	short loc_4065EC
; ---------------------------------------------------------------------------

loc_4065CE:				; CODE XREF: sub_406242+227j
		cmp	[ebp+arg_4], 40Bh
		jnz	short loc_4065DD
		inc	ds:dword_426948

loc_4065DD:				; CODE XREF: sub_406242+1B2j
					; sub_406242+1BFj ...
		mov	edx, [ebp+hdc]	; hdc
		mov	ecx, ebx	; hWnd
		mov	eax, [ebp+arg_4]
		call	sub_40553D
		mov	esi, eax

loc_4065EC:				; CODE XREF: sub_406242+19Ej
					; sub_406242+35Fj ...
		lea	esp, [ebp-0Ch]
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_406242	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4065F8	proc near		; CODE XREF: start+47Fp

lpString1	= dword	ptr -64h
lpString2	= dword	ptr -60h
type		= dword	ptr -5Ch
fWinIni		= dword	ptr -58h
cy		= dword	ptr -54h
fuLoad		= dword	ptr -50h
nWidth		= dword	ptr -4Ch
nHeight		= dword	ptr -48h
hWndParent	= dword	ptr -44h
hMenu		= dword	ptr -40h
hInstance	= dword	ptr -3Ch
lpParam		= dword	ptr -38h
pvParam		= dword	ptr -1Ch
Y		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
ClassName	= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 50h
		mov	esi, ds:dword_428B48
		mov	[esp+58h+fWinIni], 3
		call	sub_40894A
		test	eax, eax
		push	ecx
		jz	short loc_406631
		call	eax
		mov	[esp+58h+fWinIni], offset FileName ; LPSTR
		movzx	eax, ax
		mov	[esp+58h+cy], eax ; int
		call	sub_4081D0
		jmp	loc_4066B6
; ---------------------------------------------------------------------------

loc_406631:				; CODE XREF: sub_4065F8+1Dj
		mov	ds:FileName, 7830h
		mov	[esp+58h+nHeight], 0 ; int
		mov	[esp+58h+nWidth], offset Data ;	lpData
		mov	[esp+58h+fuLoad], 0 ; lpValueName
		mov	[esp+58h+cy], offset aControlPanelDe ; "Control	Panel\\Desktop\\ResourceLocale"
		mov	[esp+58h+fWinIni], 80000001h ; HKEY
		call	sub_408127
		sub	esp, 14h
		cmp	ds:Data, 0
		jnz	short loc_4066A2
		mov	[esp+58h+nHeight], 0 ; int
		mov	[esp+58h+nWidth], offset Data ;	lpData
		mov	[esp+58h+fuLoad], (offset aControlPanelDe+1Eh) ; lpValueName
		mov	[esp+58h+cy], offset a_defaultContro ; ".DEFAULT\\Control Panel\\International"
		mov	[esp+58h+fWinIni], 80000003h ; HKEY
		call	sub_408127
		sub	esp, 14h

loc_4066A2:				; CODE XREF: sub_4065F8+79j
		mov	[esp+58h+cy], offset Data
		mov	[esp+58h+fWinIni], offset FileName
		call	sub_4082C7

loc_4066B6:				; CODE XREF: sub_4065F8+34j
		push	ebx
		push	ebx
		call	sub_4053AB
		mov	eax, ds:dword_428B90
		mov	ds:dword_428B24, 10000h
		mov	[esp+60h+lpString2], offset byte_432400	; LPCSTR
		and	eax, 20h
		mov	ds:dword_428B08, eax
		call	sub_40880F
		test	eax, eax
		push	edx
		jnz	loc_4067B9
		mov	edx, [esi+48h]
		test	edx, edx
		jz	loc_4067B9
		mov	eax, ds:dword_428B64
		mov	[esp+60h+fuLoad], 0 ; int
		mov	[esp+60h+cy], offset String1 ; lpData
		mov	ecx, [esi+4Ch]
		add	ecx, eax
		add	eax, edx
		mov	[esp+60h+fWinIni], ecx ; lpValueName
		mov	[esp+60h+type],	eax ; LPCSTR
		mov	eax, [esi+44h]
		mov	[esp+60h+lpString2], eax ; HKEY
		call	sub_408127
		mov	al, ds:String1
		sub	esp, 14h
		test	al, al
		jz	loc_4067B9
		cmp	al, 22h
		mov	ebx, offset String1
		jnz	short loc_40675A
		mov	[esp+60h+type],	22h ; char
		mov	ebx, offset byte_429BD1
		mov	[esp+60h+lpString2], offset byte_429BD1	; LPCSTR
		call	sub_407E73
		push	ecx
		push	ecx
		mov	byte ptr [eax],	0

loc_40675A:				; CODE XREF: sub_4065F8+142j
		mov	[esp+60h+lpString2], ebx
		call	sub_4082BC
		lea	eax, [ebx+eax-4]
		cmp	eax, ebx
		push	edx
		jbe	short loc_40679E
		mov	[esp+64h+lpString2], offset a_exe ; ".exe"
		mov	[esp+64h+lpString1], eax ; lpString1
		call	ds:lstrcmpiA
		test	eax, eax
		push	ecx
		push	ecx
		jnz	short loc_40679E
		mov	[esp+64h+lpString1], ebx ; lpFileName
		call	ds:GetFileAttributesA
		cmp	eax, 0FFFFFFFFh
		push	edx
		jz	short loc_406795
		test	al, 10h
		jnz	short loc_40679E

loc_406795:				; CODE XREF: sub_4065F8+197j
		mov	[esp+64h+lpString1], ebx ; lpszStart
		call	sub_407EA3
		push	eax

loc_40679E:				; CODE XREF: sub_4065F8+171j
					; sub_4065F8+188j ...
		mov	[esp+64h+lpString1], ebx ; lpszStart
		call	sub_407E2D
		push	ecx
		mov	[esp+64h+lpString2], eax ; LPCSTR
		mov	[esp+64h+lpString1], offset byte_432400	; LPSTR
		call	sub_408294
		push	ebx
		push	ebx

loc_4067B9:				; CODE XREF: sub_4065F8+EBj
					; sub_4065F8+F6j ...
		mov	[esp+64h+lpString1], offset byte_432400	; LPCSTR
		call	sub_40880F
		test	eax, eax
		push	edx
		jnz	short loc_4067E2
		mov	eax, [esi+118h]
		mov	[esp+64h+lpString1], offset byte_432400	; LPSTR
		mov	[esp+64h+lpString2], eax ; int
		call	sub_4083A6
		push	eax
		push	eax

loc_4067E2:				; CODE XREF: sub_4065F8+1D0j
		test	byte ptr ds:dword_428B90, 10h
		jz	short loc_4067FE
		cmp	ds:dword_428B94, 0
		jnz	short loc_4067FE
		mov	ds:dword_42A3D0, 1

loc_4067FE:				; CODE XREF: sub_4065F8+1F1j
					; sub_4065F8+1FAj
		mov	eax, ds:hInstance
		mov	[esp+64h+fuLoad], 8040h	; fuLoad
		mov	[esp+64h+cy], 0	; cy
		mov	[esp+64h+fWinIni], 0 ; cx
		mov	[esp+64h+type],	1 ; type
		mov	[esp+64h+lpString2], 67h ; name
		mov	[esp+64h+lpString1], eax ; hInst
		call	ds:LoadImageA
		sub	esp, 18h
		cmp	dword ptr [esi+50h], 0FFFFFFFFh
		mov	ds:dwNewLong, eax
		jz	loc_40691B
		mov	edx, ds:hInstance
		lea	esi, [ebp+ClassName]
		mov	dword ptr [ebp+ClassName], 624E5Fh
		mov	ds:WndClass.lpfnWndProc, offset	sub_401000
		mov	ds:WndClass.hIcon, eax
		mov	ds:WndClass.hInstance, edx
		mov	ds:WndClass.lpszClassName, esi
		mov	[esp+64h+lpString1], offset WndClass ; lpWndClass
		call	ds:RegisterClassA
		push	ebx
		xor	ebx, ebx
		test	ax, ax
		jz	loc_406A64
		lea	eax, [ebp+pvParam]
		mov	[esp+64h+fWinIni], 0 ; fWinIni
		mov	[esp+64h+type],	eax ; pvParam
		mov	[esp+64h+lpString2], 0 ; uiParam
		mov	[esp+64h+lpString1], 30h ; uiAction
		call	ds:SystemParametersInfoA
		mov	eax, ds:hInstance
		mov	ecx, [ebp+Y]
		mov	edx, [ebp+pvParam]
		sub	esp, 10h
		mov	[esp+64h+hInstance], eax ; hInstance
		mov	eax, [ebp+var_10]
		mov	[esp+64h+lpParam], 0 ; lpParam
		mov	[esp+64h+hMenu], 0 ; hMenu
		mov	[esp+64h+hWndParent], 0	; hWndParent
		sub	eax, ecx
		mov	[esp+64h+nHeight], eax ; nHeight
		mov	eax, [ebp+var_14]
		mov	[esp+64h+fuLoad], ecx ;	Y
		mov	[esp+64h+cy], edx ; X
		mov	[esp+64h+fWinIni], 80000000h ; dwStyle
		sub	eax, edx
		mov	[esp+64h+nWidth], eax ;	nWidth
		mov	[esp+64h+type],	0 ; lpWindowName
		mov	[esp+64h+lpString2], esi ; lpClassName
		mov	[esp+64h+lpString1], 80h ; dwExStyle
		call	ds:CreateWindowExA
		sub	esp, 30h
		mov	ds:dword_426118, eax

loc_40691B:				; CODE XREF: sub_4065F8+248j
		mov	[esp+64h+lpString1], 0
		mov	ebx, 2
		call	sub_403E5D
		test	eax, eax
		push	ecx
		jnz	loc_406A64
		call	sub_4053AB
		cmp	ds:dword_428B28, 0
		jnz	loc_406A2C
		mov	eax, ds:dword_426118
		mov	[esp+64h+lpString2], 5 ; nCmdShow
		mov	[esp+64h+lpString1], eax ; hWnd
		call	ds:ShowWindow
		push	eax
		push	eax
		mov	[esp+64h+lpString1], offset aRiched20 ;	"RichEd20"
		call	sub_4088C6
		test	eax, eax
		push	edx
		jnz	short loc_40697D
		mov	[esp+64h+lpString1], offset aRiched32 ;	"RichEd32"
		call	sub_4088C6
		push	esi

loc_40697D:				; CODE XREF: sub_4065F8+376j
		mov	ebx, ds:GetClassInfoA
		mov	[esp+64h+type],	offset WndClass	; lpWndClass
		mov	[esp+64h+lpString2], offset ClassName ;	"RichEdit20A"
		mov	[esp+64h+lpString1], 0 ; hInstance
		call	ebx ; GetClassInfoA
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_4069D7
		mov	[esp+64h+type],	offset WndClass	; lpWndClass
		mov	[esp+64h+lpString2], offset aRichedit ;	"RichEdit"
		mov	[esp+64h+lpString1], 0 ; hInstance
		call	ebx ; GetClassInfoA
		mov	ds:WndClass.lpszClassName, offset ClassName ; "RichEdit20A"
		sub	esp, 0Ch
		mov	[esp+64h+lpString1], offset WndClass ; lpWndClass
		call	ds:RegisterClassA
		push	ebx

loc_4069D7:				; CODE XREF: sub_4065F8+3A9j
		mov	eax, ds:dword_4293C4
		mov	[esp+64h+cy], 0	; dwInitParam
		mov	[esp+64h+fWinIni], offset sub_405619 ; lpDialogFunc
		mov	[esp+64h+type],	0 ; hWndParent
		add	eax, 69h
		movzx	eax, ax
		mov	[esp+64h+lpString2], eax ; lpTemplateName
		mov	eax, ds:hInstance
		mov	[esp+64h+lpString1], eax ; hInstance
		call	ds:DialogBoxParamA
		sub	esp, 14h
		mov	ebx, eax
		mov	[esp+64h+lpString1], 5
		call	sub_403E5D
		push	ecx
		mov	[esp+64h+lpString1], 1
		call	sub_404F2C
		jmp	short loc_406A52
; ---------------------------------------------------------------------------

loc_406A2C:				; CODE XREF: sub_4065F8+349j
		mov	[esp+64h+lpString1], 0 ; lpThreadParameter
		call	StartAddress
		test	eax, eax
		push	edx
		jz	short loc_406A55
		cmp	ds:dword_4293A8, 0
		jnz	short loc_406A64
		mov	[esp+64h+lpString1], 2
		call	sub_403E5D

loc_406A52:				; CODE XREF: sub_4065F8+432j
		push	eax
		jmp	short loc_406A64
; ---------------------------------------------------------------------------

loc_406A55:				; CODE XREF: sub_4065F8+443j
		mov	[esp+64h+lpString1], 1
		xor	ebx, ebx
		call	sub_403E5D
		push	eax

loc_406A64:				; CODE XREF: sub_4065F8+28Cj
					; sub_4065F8+337j ...
		lea	esp, [ebp-8]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_4065F8	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_406A6D(HWND, int)
sub_406A6D	proc near		; CODE XREF: sub_406B2B+48Cp
					; sub_407447+52p

hWnd		= dword	ptr -68h
Msg		= dword	ptr -64h
wParam		= dword	ptr -60h
lParam		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_2C		= dword	ptr -2Ch
Point		= tagPOINT ptr -28h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, ds:SendMessageA
		mov	[esp+68h+lParam], 0 ; lParam
		mov	[esp+68h+wParam], 9 ; wParam
		mov	[esp+68h+Msg], 110Ah ; Msg
		mov	[esp+68h+hWnd],	ebx ; hWnd
		call	esi ; SendMessageA
		sub	esp, 10h
		cmp	[ebp+arg_4], 0
		jz	short loc_406AF1
		call	ds:GetMessagePos
		lea	edi, [ebp+Point]
		mov	[esp+68h+Msg], edi ; lpPoint
		mov	[esp+68h+hWnd],	ebx ; hWnd
		movsx	edx, ax
		sar	eax, 10h
		mov	[ebp+Point.x], edx
		mov	[ebp+Point.y], eax
		call	ds:ScreenToClient
		push	eax
		push	eax
		mov	[esp+68h+lParam], edi ;	lParam
		mov	[esp+68h+wParam], 0 ; wParam
		mov	[esp+68h+Msg], 1111h ; Msg
		mov	[esp+68h+hWnd],	ebx ; hWnd
		call	esi ; SendMessageA
		or	eax, 0FFFFFFFFh
		sub	esp, 10h
		test	[ebp+var_20], 66h
		jz	short loc_406B21
		mov	eax, [ebp+var_1C]

loc_406AF1:				; CODE XREF: sub_406A6D+36j
		mov	[ebp+var_4C], eax
		lea	eax, [ebp+var_50]
		mov	[ebp+var_50], 4
		mov	[esp+68h+lParam], eax ;	lParam
		mov	[esp+68h+wParam], 0 ; wParam
		mov	[esp+68h+Msg], 110Ch ; Msg
		mov	[esp+68h+hWnd],	ebx ; hWnd
		call	ds:SendMessageA
		mov	eax, [ebp+var_2C]
		sub	esp, 10h

loc_406B21:				; CODE XREF: sub_406A6D+7Fj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_406A6D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_406B2B(HWND, int, HDC hdc, int)
sub_406B2B	proc near		; DATA XREF: .rdata:0040CA24o

hDlg		= dword	ptr -0C8h
nIDDlgItem	= dword	ptr -0C4h
dwNewLong	= dword	ptr -0C0h
cInitial	= dword	ptr -0BCh
cGrow		= dword	ptr -0B8h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
hbmImage	= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
hWnd		= dword	ptr -7Ch
lParam		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
hdc		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	eax, [ebp+arg_0]
		mov	ebx, ds:GetDlgItem
		mov	esi, [ebp+arg_C]
		mov	[esp+0C8h+nIDDlgItem], 3F9h ; nIDDlgItem
		mov	[esp+0C8h+hDlg], eax ; hDlg
		call	ebx ; GetDlgItem
		mov	edx, [ebp+arg_0]
		push	ecx
		push	ecx
		mov	[ebp+hWnd], eax
		mov	[esp+0C8h+nIDDlgItem], 408h ; nIDDlgItem
		mov	[esp+0C8h+hDlg], edx ; hDlg
		call	ebx ; GetDlgItem
		mov	ecx, ds:dword_428B54
		cmp	[ebp+arg_4], 110h
		mov	[ebp+var_84], ecx
		push	ebx
		push	ebx
		mov	ebx, eax
		mov	eax, ds:dword_428B48
		mov	[ebp+var_98], eax
		jnz	loc_406F48
		mov	eax, ds:dword_428B58
		mov	edx, [ebp+arg_0]
		mov	[esp+0C8h+hDlg], 40h ; uFlags
		shl	eax, 2
		mov	ds:dword_428B44, edx
		mov	[esp+0C8h+nIDDlgItem], eax ; dwBytes
		call	ds:GlobalAlloc
		mov	ds:dword_426934, eax
		mov	eax, ds:hInstance
		push	edi
		push	edi
		mov	[esp+0C8h+nIDDlgItem], 6Eh ; lpBitmapName
		mov	[esp+0C8h+hDlg], eax ; hInstance
		call	ds:LoadBitmapA
		mov	ds:dword_426938, 0FFFFFFFFh
		push	edx
		push	edx
		mov	[ebp+hbmImage],	eax
		mov	[esp+0C8h+dwNewLong], offset sub_407447	; dwNewLong
		mov	[esp+0C8h+nIDDlgItem], 0FFFFFFFCh ; nIndex
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:SetWindowLongA
		sub	esp, 0Ch
		mov	ds:lpPrevWndFunc, eax
		mov	[esp+0C8h+cGrow], 0 ; cGrow
		mov	[esp+0C8h+cInitial], 6 ; cInitial
		mov	[esp+0C8h+dwNewLong], 21h ; flags
		mov	[esp+0C8h+nIDDlgItem], 10h ; cy
		mov	[esp+0C8h+hDlg], 10h ; cx
		call	ds:ImageList_Create
		mov	ecx, [ebp+hbmImage]
		sub	esp, 14h
		mov	[esp+0C8h+nIDDlgItem], ecx ; hbmImage
		mov	ds:himl, eax
		mov	[esp+0C8h+dwNewLong], 0FF00FFh ; crMask
		mov	[esp+0C8h+hDlg], eax ; himl
		call	ds:ImageList_AddMasked
		mov	eax, ds:himl
		mov	edi, ds:SendMessageA
		sub	esp, 0Ch
		mov	[esp+0C8h+cInitial], eax ; lParam
		mov	[esp+0C8h+dwNewLong], 2	; wParam
		mov	[esp+0C8h+nIDDlgItem], 1109h ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	edi ; SendMessageA
		sub	esp, 10h
		mov	[esp+0C8h+cInitial], 0 ; lParam
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[esp+0C8h+nIDDlgItem], 111Ch ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	edi ; SendMessageA
		sub	esp, 10h
		cmp	eax, 0Fh
		jg	short loc_406CBE
		mov	[esp+0C8h+cInitial], 0 ; lParam
		mov	[esp+0C8h+dwNewLong], 10h ; wParam
		mov	[esp+0C8h+nIDDlgItem], 111Bh ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	edi ; SendMessageA
		sub	esp, 10h

loc_406CBE:				; CODE XREF: sub_406B2B+171j
		mov	eax, [ebp+hbmImage]
		xor	edi, edi
		mov	[esp+0C8h+hDlg], eax ; ho
		call	ds:DeleteObject
		mov	[ebp+hbmImage],	2
		push	ecx

loc_406CDA:				; CODE XREF: sub_406B2B+22Dj
		mov	edx, [ebp+var_98]
		mov	eax, [edx+edi*4+94h]
		test	eax, eax
		jz	short loc_406D54
		cmp	edi, 20h
		mov	ecx, 0
		cmovz	ecx, [ebp+hbmImage]
		mov	[esp+0C8h+nIDDlgItem], eax ; int
		mov	[esp+0C8h+hDlg], 0 ; LPSTR
		mov	[ebp+hbmImage],	ecx
		call	sub_4083A6
		push	edx
		push	edx
		mov	[esp+0C8h+cInitial], eax ; lParam
		mov	eax, [ebp+hWnd]
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[esp+0C8h+nIDDlgItem], 143h ; Msg
		mov	[esp+0C8h+hDlg], eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		mov	[esp+0C8h+dwNewLong], eax ; wParam
		mov	eax, [ebp+hWnd]
		mov	[esp+0C8h+cInitial], edi ; lParam
		mov	[esp+0C8h+nIDDlgItem], 151h ; Msg
		mov	[esp+0C8h+hDlg], eax ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h

loc_406D54:				; CODE XREF: sub_406B2B+1BEj
		inc	edi
		cmp	edi, 21h
		jnz	short loc_406CDA
		mov	edx, [ebp+hbmImage]
		xor	di, di
		mov	eax, [ebp+arg_0]
		mov	ecx, [esi+edx*4+30h] ; int
		mov	edx, 15h
		call	sub_405198
		mov	eax, [ebp+hbmImage]
		mov	edx, 16h
		mov	ecx, [esi+eax*4+34h] ; int
		mov	eax, [ebp+arg_0]
		call	sub_405198
		mov	edx, [ebp+var_84]
		mov	[ebp+var_A0], esi
		mov	[ebp+var_90], 0
		mov	[ebp+var_8C], 0
		mov	[ebp+var_94], 0
		mov	esi, edx
		jmp	loc_406ECE
; ---------------------------------------------------------------------------

loc_406DBC:				; CODE XREF: sub_406B2B+3AFj
		cmp	byte ptr [esi+18h], 0
		jz	loc_406EBB
		mov	edx, [ebp+var_8C]
		lea	eax, [esi+18h]
		mov	[ebp+lParam], edi
		mov	[ebp+var_70], 0FFFF0002h
		mov	[ebp+var_6C], 0Dh
		mov	[ebp+var_60], 20h
		mov	[ebp+var_48], edx
		mov	[ebp+var_5C], eax
		mov	eax, [esi+8]
		and	eax, 20h
		mov	[ebp+var_64], eax
		mov	eax, [esi+8]
		test	al, 2
		jz	short loc_406E56
		mov	ecx, [ebp+var_90]
		lea	eax, [ebp+lParam]
		add	ecx, ds:dword_426934
		mov	[ebp+var_6C], 4Dh
		mov	[ebp+var_4C], 1
		mov	[ebp+var_94], ecx
		mov	[esp+0C8h+cInitial], eax ; lParam
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[esp+0C8h+nIDDlgItem], 1100h ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:SendMessageA
		mov	edx, [ebp+var_94]
		mov	[ebp+var_94], 1
		sub	esp, 10h
		mov	edi, eax
		mov	[edx], eax
		jmp	short loc_406EBB
; ---------------------------------------------------------------------------

loc_406E56:				; CODE XREF: sub_406B2B+2D0j
		test	al, 4
		jz	short loc_406E7E
		mov	[esp+0C8h+cInitial], edi ; lParam
		mov	[esp+0C8h+dwNewLong], 3	; wParam
		mov	[esp+0C8h+nIDDlgItem], 110Ah ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		mov	edi, eax
		jmp	short loc_406EBB
; ---------------------------------------------------------------------------

loc_406E7E:				; CODE XREF: sub_406B2B+32Dj
		mov	ecx, [ebp+var_90]
		lea	eax, [ebp+lParam]
		add	ecx, ds:dword_426934
		mov	[esp+0C8h+cInitial], eax ; lParam
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[ebp+var_9C], ecx
		mov	[esp+0C8h+nIDDlgItem], 1100h ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:SendMessageA
		mov	edx, [ebp+var_9C]
		sub	esp, 10h
		mov	[edx], eax

loc_406EBB:				; CODE XREF: sub_406B2B+295j
					; sub_406B2B+329j ...
		inc	[ebp+var_8C]
		add	esi, 418h
		add	[ebp+var_90], 4

loc_406ECE:				; CODE XREF: sub_406B2B+28Cj
		mov	ecx, [ebp+var_8C]
		cmp	ecx, ds:dword_428B58
		jl	loc_406DBC
		cmp	[ebp+var_94], 0
		mov	esi, [ebp+var_A0]
		jnz	short loc_406F1D
		mov	[esp+0C8h+nIDDlgItem], 0FFFFFFF0h ; nIndex
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:GetWindowLongA
		push	edi
		and	eax, 0FFFFFFFBh
		push	edi
		mov	[esp+0C8h+dwNewLong], eax ; dwNewLong
		mov	[esp+0C8h+nIDDlgItem], 0FFFFFFF0h ; nIndex
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:SetWindowLongA
		sub	esp, 0Ch

loc_406F1D:				; CODE XREF: sub_406B2B+3C2j
		cmp	[ebp+hbmImage],	0
		mov	eax, ebx
		jnz	short loc_406F41
		mov	eax, [ebp+hWnd]
		mov	[esp+0C8h+nIDDlgItem], 5 ; nCmdShow
		mov	[esp+0C8h+hDlg], eax ; hWnd
		call	ds:ShowWindow
		mov	eax, [ebp+hWnd]
		push	ecx
		push	ecx

loc_406F41:				; CODE XREF: sub_406B2B+3FBj
		call	sub_40509E
		jmp	short loc_406F64
; ---------------------------------------------------------------------------

loc_406F48:				; CODE XREF: sub_406B2B+5Cj
		cmp	[ebp+arg_4], 405h
		jnz	short loc_406F64
		mov	esi, 1
		mov	[ebp+hdc], 0
		mov	[ebp+arg_4], 40Fh

loc_406F64:				; CODE XREF: sub_406B2B+41Bj
					; sub_406B2B+424j
		cmp	[ebp+arg_4], 413h
		setz	al
		jz	short loc_406F7A
		cmp	[ebp+arg_4], 4Eh
		jnz	loc_407089

loc_406F7A:				; CODE XREF: sub_406B2B+443j
		test	al, al
		mov	edi, esi
		jnz	short loc_406F8D
		cmp	dword ptr [esi+4], 408h
		jnz	loc_407089

loc_406F8D:				; CODE XREF: sub_406B2B+453j
		test	byte ptr ds:dword_428B90+1, 2
		jnz	loc_407023
		test	al, al
		jnz	short loc_406FA4
		cmp	dword ptr [esi+8], 0FFFFFFFEh
		jnz	short loc_407023

loc_406FA4:				; CODE XREF: sub_406B2B+471j
		xor	eax, eax
		cmp	[ebp+arg_4], 413h
		mov	[esp+0C8h+hDlg], ebx ; HWND
		setnz	al
		mov	[esp+0C8h+nIDDlgItem], eax ; int
		call	sub_406A6D
		test	eax, eax
		push	edx
		push	edx
		js	short loc_407023
		imul	ecx, eax, 418h
		add	ecx, [ebp+var_84]
		mov	edx, [ecx+8]
		test	dl, 10h
		jnz	short loc_407023
		mov	esi, edx
		xor	esi, 1
		test	dl, 40h
		jz	short loc_406FFB
		xor	dl, 80h
		mov	esi, edx
		mov	[ebp+hbmImage],	edx
		or	esi, 1
		and	edx, 0FFFFFFFEh
		test	byte ptr [ebp+hbmImage], 80h
		cmovz	esi, edx

loc_406FFB:				; CODE XREF: sub_406B2B+4B3j
		mov	[ecx+8], esi
		mov	[esp+0C8h+hDlg], eax
		call	sub_401220
		xor	edx, edx
		test	byte ptr ds:dword_428B90+1, 1
		mov	[ebp+hdc], 1
		mov	[ebp+arg_4], 40Fh
		setz	dl
		mov	esi, edx
		push	eax

loc_407023:				; CODE XREF: sub_406B2B+469j
					; sub_406B2B+477j ...
		test	edi, edi
		jz	short loc_407089
		cmp	dword ptr [edi+8], 0FFFFFE6Eh
		jnz	short loc_407053
		mov	eax, [edi+5Ch]
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[esp+0C8h+nIDDlgItem], 419h ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		mov	[esp+0C8h+cInitial], eax ; lParam
		call	ds:SendMessageA
		sub	esp, 10h

loc_407053:				; CODE XREF: sub_406B2B+503j
		cmp	dword ptr [edi+8], 0FFFFFE6Ah
		jnz	short loc_407089
		cmp	dword ptr [edi+0Ch], 2
		mov	eax, [edi+5Ch]
		jnz	short loc_407078
		imul	eax, 418h
		mov	ecx, [ebp+var_84]
		or	dword ptr [ecx+eax+8], 20h
		jmp	short loc_407089
; ---------------------------------------------------------------------------

loc_407078:				; CODE XREF: sub_406B2B+538j
		imul	eax, 418h
		mov	edx, [ebp+var_84]
		and	dword ptr [edx+eax+8], 0FFFFFFDFh

loc_407089:				; CODE XREF: sub_406B2B+449j
					; sub_406B2B+45Cj ...
		cmp	[ebp+arg_4], 111h
		jnz	loc_407166
		cmp	word ptr [ebp+hdc], 3F9h
		jnz	loc_407430
		mov	eax, [ebp+hdc]
		shr	eax, 10h
		dec	ax
		jnz	loc_407430
		mov	eax, [ebp+hWnd]
		mov	edi, ds:SendMessageA
		mov	[esp+0C8h+cInitial], 0 ; lParam
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[esp+0C8h+nIDDlgItem], 147h ; Msg
		mov	[esp+0C8h+hDlg], eax ; hWnd
		call	edi ; SendMessageA
		sub	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	loc_407430
		mov	[esp+0C8h+dwNewLong], eax ; wParam
		mov	eax, [ebp+hWnd]
		mov	[esp+0C8h+cInitial], 0 ; lParam
		mov	[esp+0C8h+nIDDlgItem], 150h ; Msg
		mov	[esp+0C8h+hDlg], eax ; hWnd
		call	edi ; SendMessageA
		sub	esp, 10h
		cmp	eax, 0FFFFFFFFh
		mov	esi, eax
		jz	short loc_407120
		mov	edx, [ebp+var_98]
		cmp	dword ptr [edx+eax*4+94h], 0
		mov	eax, 20h
		cmovz	esi, eax
		jmp	short loc_407125
; ---------------------------------------------------------------------------

loc_407120:				; CODE XREF: sub_406B2B+5DBj
		mov	esi, 20h

loc_407125:				; CODE XREF: sub_406B2B+5F3j
		mov	[esp+0C8h+hDlg], esi
		call	sub_40133F
		push	eax
		mov	[esp+0C8h+cInitial], esi ; lParam
		mov	esi, [ebp+arg_0]
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[esp+0C8h+nIDDlgItem], 420h ; Msg
		mov	[esp+0C8h+hDlg], esi ; hWnd
		xor	esi, esi
		call	ds:SendMessageA
		mov	[ebp+hdc], 1
		mov	[ebp+arg_4], 40Fh
		sub	esp, 10h
		jmp	loc_4071F7
; ---------------------------------------------------------------------------

loc_407166:				; CODE XREF: sub_406B2B+565j
		cmp	[ebp+arg_4], 200h
		jnz	short loc_407198
		mov	[esp+0C8h+cInitial], 0 ; lParam
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[esp+0C8h+nIDDlgItem], 200h ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h
		jmp	loc_407430
; ---------------------------------------------------------------------------

loc_407198:				; CODE XREF: sub_406B2B+642j
		cmp	[ebp+arg_4], 40Bh
		jnz	short loc_4071EA
		mov	eax, ds:himl
		test	eax, eax
		jz	short loc_4071B4
		mov	[esp+0C8h+hDlg], eax ; himl
		call	ds:ImageList_Destroy
		push	eax

loc_4071B4:				; CODE XREF: sub_406B2B+67Dj
		mov	eax, ds:dword_426934
		test	eax, eax
		jz	short loc_4071C7
		mov	[esp+0C8h+hDlg], eax ; hMem
		call	ds:GlobalFree
		push	eax

loc_4071C7:				; CODE XREF: sub_406B2B+690j
		mov	ds:himl, 0
		mov	ds:dword_426934, 0
		mov	ds:dword_428B44, 0
		jmp	loc_407430
; ---------------------------------------------------------------------------

loc_4071EA:				; CODE XREF: sub_406B2B+674j
		cmp	[ebp+arg_4], 40Fh
		jnz	loc_4073DF

loc_4071F7:				; CODE XREF: sub_406B2B+636j
		mov	[esp+0C8h+nIDDlgItem], 0
		mov	[esp+0C8h+hDlg], 0
		call	sub_40128F
		cmp	[ebp+hdc], 0
		push	eax
		push	eax
		jz	short loc_407220
		mov	[esp+0C8h+hDlg], 8
		call	sub_403E5D
		push	edi

loc_407220:				; CODE XREF: sub_406B2B+6E6j
		test	esi, esi
		jz	short loc_407283
		mov	eax, ds:dword_426934
		mov	[esp+0C8h+hDlg], eax
		call	sub_401388
		push	edx
		mov	esi, eax
		mov	[esp+0C8h+hDlg], eax
		call	sub_40133F
		xor	edx, edx
		xor	eax, eax
		push	ecx
		jmp	short loc_407255
; ---------------------------------------------------------------------------

loc_407243:				; CODE XREF: sub_406B2B+72Cj
		mov	ecx, [ebp+var_98]
		cmp	dword ptr [ecx+eax*4+94h], 1
		sbb	edx, 0FFFFFFFFh
		inc	eax

loc_407255:				; CODE XREF: sub_406B2B+716j
		cmp	eax, esi
		jl	short loc_407243
		mov	eax, [ebp+hWnd]
		mov	[esp+0C8h+cInitial], 0 ; lParam
		mov	[esp+0C8h+dwNewLong], edx ; wParam
		mov	[esp+0C8h+nIDDlgItem], 14Eh ; Msg
		mov	[esp+0C8h+hDlg], eax ; hWnd
		call	ds:SendMessageA
		mov	[ebp+arg_4], 420h
		sub	esp, 10h

loc_407283:				; CODE XREF: sub_406B2B+6F7j
		mov	[esp+0C8h+nIDDlgItem], 0
		mov	[esp+0C8h+hDlg], 0
		call	sub_40128F
		mov	edx, ds:dword_426934
		mov	[ebp+var_34], 0F030h
		mov	edi, ds:dword_428B54
		mov	[ebp+var_84], 0
		mov	[ebp+var_80], esi
		mov	[ebp+hbmImage],	edx
		push	eax
		push	eax
		jmp	loc_40737D
; ---------------------------------------------------------------------------

loc_4072C4:				; CODE XREF: sub_406B2B+85Ej
		mov	esi, [ebp+var_84]
		mov	edx, [ebp+hbmImage]
		mov	ecx, [edx+esi*4]
		test	ecx, ecx
		jz	loc_407371
		mov	eax, [edi+8]
		mov	[ebp+var_3C], ecx
		mov	[ebp+var_40], 8
		test	ah, 1
		jz	short loc_407301
		lea	edx, [edi+18h]
		mov	[ebp+var_40], 9
		mov	[ebp+var_30], edx
		and	dword ptr [edi+8], 0FFFFFEFFh

loc_407301:				; CODE XREF: sub_406B2B+7C0j
		test	al, 40h
		mov	edx, 3
		jnz	short loc_40731A
		mov	esi, eax
		and	esi, 1
		mov	edx, esi
		add	esi, 4
		inc	edx
		test	al, 10h
		cmovnz	edx, esi

loc_40731A:				; CODE XREF: sub_406B2B+7DDj
		mov	esi, eax
		and	eax, 20h
		and	esi, 8
		add	esi, esi
		shl	edx, 0Ch
		or	esi, eax
		sar	eax, 5
		or	esi, edx
		inc	eax
		mov	[esp+0C8h+cInitial], ecx ; lParam
		mov	[ebp+var_38], esi
		mov	[esp+0C8h+dwNewLong], eax ; wParam
		mov	[esp+0C8h+nIDDlgItem], 1102h ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:SendMessageA
		lea	eax, [ebp+var_40]
		sub	esp, 10h
		mov	[esp+0C8h+cInitial], eax ; lParam
		mov	[esp+0C8h+dwNewLong], 0	; wParam
		mov	[esp+0C8h+nIDDlgItem], 110Dh ; Msg
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:SendMessageA
		sub	esp, 10h

loc_407371:				; CODE XREF: sub_406B2B+7AAj
		inc	[ebp+var_84]
		add	edi, 418h

loc_40737D:				; CODE XREF: sub_406B2B+794j
		mov	edx, [ebp+var_84]
		cmp	edx, ds:dword_428B58
		jl	loc_4072C4
		mov	esi, [ebp+var_80]
		mov	[esp+0C8h+dwNewLong], 1	; bErase
		mov	[esp+0C8h+nIDDlgItem], 0 ; lpRect
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		call	ds:InvalidateRect
		mov	eax, ds:dword_4293CC
		sub	esp, 0Ch
		cmp	dword ptr [eax+10h], 0
		jz	short loc_4073DF
		mov	eax, 5
		call	sub_40502C
		mov	edx, 0FFFFFFFBh
		mov	[esp+0C8h+nIDDlgItem], 0
		mov	[esp+0C8h+hDlg], eax
		mov	eax, 3FFh
		call	sub_405281
		push	edi
		push	edi

loc_4073DF:				; CODE XREF: sub_406B2B+6C6j
					; sub_406B2B+88Cj
		cmp	[ebp+arg_4], 420h
		jnz	short loc_407430
		test	byte ptr ds:dword_428B90+1, 1
		jz	short loc_407430
		xor	ecx, ecx
		cmp	esi, 20h
		setz	cl
		mov	edi, ecx
		shl	edi, 3
		mov	[esp+0C8h+hDlg], ebx ; hWnd
		mov	ebx, ds:ShowWindow
		mov	[esp+0C8h+nIDDlgItem], edi ; nCmdShow
		call	ebx ; ShowWindow
		push	eax
		push	eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0C8h+nIDDlgItem], 3FEh ; nIDDlgItem
		mov	[esp+0C8h+hDlg], eax ; hDlg
		call	ds:GetDlgItem
		push	edx
		push	edx
		mov	[esp+0C8h+nIDDlgItem], edi ; nCmdShow
		mov	[esp+0C8h+hDlg], eax ; hWnd
		call	ebx ; ShowWindow
		push	ecx
		push	ecx

loc_407430:				; CODE XREF: sub_406B2B+571j
					; sub_406B2B+57Fj ...
		mov	edx, [ebp+hdc]	; hdc
		mov	ecx, esi	; hWnd
		mov	eax, [ebp+arg_4]
		call	sub_40553D
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_406B2B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407447(HWND, UINT, WPARAM, LPARAM)
sub_407447	proc near		; DATA XREF: sub_406B2B+B3o

hWnd		= dword	ptr -38h
var_34		= dword	ptr -34h
Msg		= dword	ptr -30h
wParam		= dword	ptr -2Ch
lParam		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [ebp+arg_0]
		cmp	[ebp+arg_8], 20h
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_C]
		jnz	short loc_407478
		cmp	ebx, 102h
		jnz	short loc_407478
		mov	eax, 413h
		call	sub_4050CB
		xor	eax, eax
		jmp	loc_40752E
; ---------------------------------------------------------------------------

loc_407478:				; CODE XREF: sub_407447+16j
					; sub_407447+1Ej
		cmp	ebx, 200h
		jnz	short loc_4074A4
		mov	[esp+38h+hWnd],	edi ; hWnd
		call	ds:IsWindowVisible
		test	eax, eax
		push	ecx
		jz	short loc_40750A
		mov	[esp+38h+var_34], 1 ; int
		mov	[esp+38h+hWnd],	edi ; HWND
		call	sub_406A6D
		push	edx
		mov	esi, eax
		push	edx
		jmp	short loc_4074AC
; ---------------------------------------------------------------------------

loc_4074A4:				; CODE XREF: sub_407447+37j
		cmp	ebx, 419h
		jnz	short loc_40750A

loc_4074AC:				; CODE XREF: sub_407447+5Bj
		cmp	ds:dword_426938, esi
		mov	ebx, 419h
		jz	short loc_40750A
		mov	ds:dword_426938, esi
		mov	[esp+38h+var_34], offset dword_42D000 ;	LPCSTR
		mov	[esp+38h+hWnd],	offset Data ; LPSTR
		call	sub_408294
		push	eax
		push	eax
		mov	[esp+38h+var_34], esi ;	int
		mov	[esp+38h+hWnd],	offset dword_42D000 ; LPSTR
		call	sub_4081D0
		push	eax
		push	eax
		mov	[esp+38h+hWnd],	6
		call	sub_403E5D
		push	eax
		mov	[esp+38h+var_34], offset Data ;	LPCSTR
		mov	[esp+38h+hWnd],	offset dword_42D000 ; LPSTR
		call	sub_408294
		push	eax
		push	eax

loc_40750A:				; CODE XREF: sub_407447+45j
					; sub_407447+63j ...
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+lParam], esi ;	lParam
		mov	[esp+38h+Msg], ebx ; Msg
		mov	[esp+38h+var_34], edi ;	hWnd
		mov	[esp+38h+wParam], eax ;	wParam
		mov	eax, ds:lpPrevWndFunc
		mov	[esp+38h+hWnd],	eax ; lpPrevWndFunc
		call	ds:CallWindowProcA
		sub	esp, 14h

loc_40752E:				; CODE XREF: sub_407447+2Cj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_407447	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_407538	proc near		; CODE XREF: sub_401630+14p
					; sub_40164F+13Ep ...

hWnd		= dword	ptr -78h
lpString	= dword	ptr -74h
wParam		= dword	ptr -70h
lParam		= dword	ptr -6Ch
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, ds:dword_4293B0
		test	ebx, ebx
		jz	loc_40766E
		mov	esi, ds:dword_428B3C
		mov	edi, esi
		and	edi, 1
		jnz	short loc_407571
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+hWnd],	offset byte_42694C ; LPSTR
		mov	[esp+78h+lpString], eax	; int
		call	sub_4083A6
		push	eax
		push	eax

loc_407571:				; CODE XREF: sub_407538+22j
		mov	[esp+78h+hWnd],	offset byte_42694C
		call	sub_4082BC
		cmp	[ebp+arg_4], 0
		push	ecx
		mov	[ebp+var_5C], eax
		jz	short loc_4075B6
		mov	eax, [ebp+arg_4]
		mov	[esp+78h+hWnd],	eax
		call	sub_4082BC
		add	eax, [ebp+var_5C]
		cmp	eax, 7FFh
		push	edx
		ja	loc_40766E
		mov	eax, [ebp+arg_4]
		mov	[esp+78h+hWnd],	offset byte_42694C
		mov	[esp+78h+lpString], eax
		call	sub_4082C7
		push	eax
		push	eax

loc_4075B6:				; CODE XREF: sub_407538+4Dj
		test	esi, 4
		jnz	short loc_4075D6
		mov	eax, ds:dword_4293C8
		mov	[esp+78h+lpString], offset byte_42694C ; lpString
		mov	[esp+78h+hWnd],	eax ; hWnd
		call	ds:SetWindowTextA
		push	eax
		push	eax

loc_4075D6:				; CODE XREF: sub_407538+84j
		and	esi, 2
		jnz	loc_407660
		mov	esi, ds:SendMessageA
		mov	[ebp+var_4C], 1
		mov	[ebp+var_38], offset byte_42694C
		mov	[esp+78h+lParam], 0 ; lParam
		mov	[esp+78h+wParam], 0 ; wParam
		mov	[esp+78h+lpString], 1004h ; Msg
		mov	[esp+78h+hWnd],	ebx ; hWnd
		call	esi ; SendMessageA
		mov	[ebp+var_44], 0
		sub	eax, edi
		sub	esp, 10h
		mov	[ebp+var_48], eax
		lea	eax, [ebp+var_4C]
		mov	[esp+78h+lParam], eax ;	lParam
		mov	eax, 1007h
		sub	eax, edi
		mov	[esp+78h+wParam], 0 ; wParam
		mov	[esp+78h+lpString], eax	; Msg
		mov	[esp+78h+hWnd],	ebx ; hWnd
		call	esi ; SendMessageA
		mov	eax, [ebp+var_48]
		sub	esp, 10h
		mov	[esp+78h+lParam], 0 ; lParam
		mov	[esp+78h+wParam], eax ;	wParam
		mov	[esp+78h+lpString], 1013h ; Msg
		mov	[esp+78h+hWnd],	ebx ; hWnd
		call	esi ; SendMessageA
		sub	esp, 10h

loc_407660:				; CODE XREF: sub_407538+A1j
		test	edi, edi
		jz	short loc_40766E
		mov	eax, [ebp+var_5C]
		mov	ds:byte_42694C[eax], 0

loc_40766E:				; CODE XREF: sub_407538+11j
					; sub_407538+63j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_407538	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407678(HWND	hWnd, int, HDC hdc, HWND)
sub_407678	proc near		; DATA XREF: .rdata:0040CA2Co

hDlg		= dword	ptr -98h
nIDDlgItem	= dword	ptr -94h
wParam		= dword	ptr -90h
lParam		= dword	ptr -8Ch
dwCreationFlags	= dword	ptr -88h
lpThreadId	= dword	ptr -84h
prcRect		= dword	ptr -80h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
Rect		= tagRECT ptr -2Ch
ThreadId	= dword	ptr -1Ch
hWnd		= dword	ptr  8
arg_4		= dword	ptr  0Ch
hdc		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+hWnd]
		mov	edi, ds:dword_4293B0
		cmp	ebx, 110h
		jnz	loc_407937
		xor	eax, eax
		mov	ecx, 8
		lea	edi, [ebp+var_60]
		rep stosd
		mov	eax, ds:dword_428B48
		mov	[ebp+var_60], 2
		mov	edi, ds:GetDlgItem
		mov	[ebp+var_58], 0FFFFFFFFh
		mov	[ebp+var_4C], 0FFFFFFFFh
		mov	ebx, [eax+5Ch]
		mov	eax, [eax+60h]
		mov	[esp+98h+nIDDlgItem], 403h ; nIDDlgItem
		mov	[esp+98h+hDlg],	esi ; hDlg
		mov	[ebp+var_70], eax
		call	edi ; GetDlgItem
		push	edx
		push	edx
		mov	ds:hWnd, eax
		mov	[esp+98h+nIDDlgItem], 3EEh ; nIDDlgItem
		mov	[esp+98h+hDlg],	esi ; hDlg
		call	edi ; GetDlgItem
		push	ecx
		push	ecx
		mov	ds:dword_4293C8, eax
		mov	[esp+98h+nIDDlgItem], 3F8h ; nIDDlgItem
		mov	[esp+98h+hDlg],	esi ; hDlg
		call	edi ; GetDlgItem
		push	edi
		push	edi
		mov	edi, eax
		mov	ds:dword_4293B0, eax
		mov	eax, ds:hWnd
		call	sub_40509E
		mov	eax, 4
		call	sub_40502C
		mov	ds:dword_4293B4, 0
		mov	[esp+98h+nIDDlgItem], 0FFFFFFFDh ; int
		mov	[esp+98h+hDlg],	0 ; LPSTR
		mov	ds:nDenominator, eax
		call	sub_4083A6
		push	edx
		push	edx
		mov	[esp+98h+nIDDlgItem], eax ; char
		mov	[esp+98h+wParam], offset byte_432400
		mov	[esp+98h+hDlg],	offset aNewInstallOfST ; "New install of \"%s\"	to \"%s\""
		call	sub_408780
		lea	eax, [ebp+Rect]
		mov	[esp+98h+nIDDlgItem], eax ; lpRect
		mov	[esp+98h+hDlg],	edi ; hWnd
		call	ds:GetClientRect
		mov	edx, [ebp+Rect.right]
		mov	[ebp+var_74], edx
		push	ecx
		push	ecx
		mov	[esp+98h+hDlg],	15h ; nIndex
		call	ds:GetSystemMetrics
		push	edx
		mov	edx, [ebp+var_74]
		mov	[esp+98h+wParam], 0 ; wParam
		mov	[esp+98h+nIDDlgItem], 101Bh ; Msg
		sub	edx, eax
		mov	[ebp+var_58], edx
		mov	edx, ds:SendMessageA
		lea	eax, [ebp+var_60]
		mov	[esp+98h+lParam], eax ;	lParam
		mov	[esp+98h+hDlg],	edi ; hWnd
		mov	[ebp+var_6C], edx
		call	edx ; SendMessageA
		sub	esp, 10h
		mov	[esp+98h+lParam], 4000h
		mov	[esp+98h+wParam], 4000h
		mov	[esp+98h+nIDDlgItem], 1036h
		mov	[esp+98h+hDlg],	edi
		call	[ebp+var_6C]
		sub	esp, 10h
		test	ebx, ebx
		js	short loc_407815
		mov	[esp+98h+lParam], ebx
		mov	[esp+98h+wParam], 0
		mov	[esp+98h+nIDDlgItem], 1001h
		mov	[esp+98h+hDlg],	edi
		call	[ebp+var_6C]
		sub	esp, 10h
		mov	[esp+98h+lParam], ebx
		mov	[esp+98h+wParam], 0
		mov	[esp+98h+nIDDlgItem], 1026h
		mov	[esp+98h+hDlg],	edi
		call	[ebp+var_6C]
		sub	esp, 10h

loc_407815:				; CODE XREF: sub_407678+161j
		cmp	[ebp+var_70], 0
		js	short loc_40783E
		mov	eax, [ebp+var_70]
		mov	[esp+98h+wParam], 0 ; wParam
		mov	[esp+98h+nIDDlgItem], 1024h ; Msg
		mov	[esp+98h+hDlg],	edi ; hWnd
		mov	[esp+98h+lParam], eax ;	lParam
		call	ds:SendMessageA
		sub	esp, 10h

loc_40783E:				; CODE XREF: sub_407678+1A1j
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		mov	ecx, [edx+30h]	; int
		mov	edx, 1Bh
		call	sub_405198
		test	byte ptr ds:dword_428B90, 3
		jz	short loc_4078A7
		mov	edx, ds:ShowWindow
		mov	eax, ds:hWnd
		mov	[esp+98h+nIDDlgItem], 0	; nCmdShow
		mov	[ebp+var_78], edx
		mov	[esp+98h+hDlg],	eax ; hWnd
		call	edx ; ShowWindow
		mov	edx, [ebp+var_78]
		test	byte ptr ds:dword_428B90, 2
		push	eax
		push	eax
		jnz	short loc_407893
		mov	[esp+98h+hDlg],	edi
		mov	[esp+98h+nIDDlgItem], 8
		call	edx
		push	edi
		push	edi
		jmp	short loc_40789D
; ---------------------------------------------------------------------------

loc_407893:				; CODE XREF: sub_407678+208j
		mov	ds:hWnd, 0

loc_40789D:				; CODE XREF: sub_407678+219j
		mov	eax, ds:dword_4293C8
		call	sub_40509E

loc_4078A7:				; CODE XREF: sub_407678+1DFj
		mov	[esp+98h+hDlg],	esi ; hDlg
		mov	[esp+98h+nIDDlgItem], 3ECh ; nIDDlgItem
		call	ds:GetDlgItem
		push	esi
		mov	edi, eax
		push	esi
		mov	esi, ds:SendMessageA
		mov	[esp+98h+lParam], 75300000h ; lParam
		mov	[esp+98h+wParam], 0 ; wParam
		mov	[esp+98h+nIDDlgItem], 401h ; Msg
		mov	[esp+98h+hDlg],	eax ; hWnd
		call	esi ; SendMessageA
		xor	edx, edx
		sub	esp, 10h
		test	byte ptr ds:dword_428B90, 4
		jz	loc_407C1E
		mov	eax, [ebp+var_70]
		mov	[ebp+var_78], edx
		mov	[esp+98h+wParam], 0 ; wParam
		mov	[esp+98h+nIDDlgItem], 409h ; Msg
		mov	[esp+98h+lParam], eax ;	lParam
		mov	[esp+98h+hDlg],	edi ; hWnd
		call	esi ; SendMessageA
		sub	esp, 10h
		mov	[esp+98h+lParam], ebx ;	lParam
		mov	[esp+98h+wParam], 0 ; wParam
		mov	[esp+98h+nIDDlgItem], 2001h ; Msg
		mov	[esp+98h+hDlg],	edi ; hWnd
		call	esi ; SendMessageA
		mov	edx, [ebp+var_78]
		sub	esp, 10h
		jmp	loc_407C1E
; ---------------------------------------------------------------------------

loc_407937:				; CODE XREF: sub_407678+1Ej
		cmp	ebx, 405h
		jnz	short loc_407994
		mov	[esp+98h+nIDDlgItem], 3ECh ; nIDDlgItem
		mov	[esp+98h+hDlg],	esi ; hDlg
		call	ds:GetDlgItem
		push	edx
		push	edx
		lea	edx, [ebp+ThreadId]
		mov	[esp+98h+lpThreadId], edx ; lpThreadId
		mov	[esp+98h+dwCreationFlags], 0 ; dwCreationFlags
		mov	[esp+98h+lParam], eax ;	lpParameter
		mov	[esp+98h+wParam], offset StartAddress ;	lpStartAddress
		mov	[esp+98h+nIDDlgItem], 0	; dwStackSize
		mov	[esp+98h+hDlg],	0 ; lpThreadAttributes
		call	ds:CreateThread
		sub	esp, 18h
		mov	[esp+98h+hDlg],	eax ; hObject
		call	ds:CloseHandle
		push	ecx
		jmp	loc_407A47
; ---------------------------------------------------------------------------

loc_407994:				; CODE XREF: sub_407678+2C5j
		cmp	ebx, 111h
		jnz	short loc_4079E0
		cmp	word ptr [ebp+hdc], 403h
		jnz	loc_407A47
		mov	edx, ds:ShowWindow
		mov	eax, ds:hWnd
		mov	[esp+98h+nIDDlgItem], 0	; nCmdShow
		mov	[ebp+var_78], edx
		mov	[esp+98h+hDlg],	eax ; hWnd
		call	edx ; ShowWindow
		mov	edx, [ebp+var_78]
		push	eax
		push	eax
		mov	[esp+98h+hDlg],	edi
		mov	[esp+98h+nIDDlgItem], 8
		call	edx
		push	eax
		push	eax
		mov	eax, edi
		call	sub_40509E
		jmp	short loc_407A47
; ---------------------------------------------------------------------------

loc_4079E0:				; CODE XREF: sub_407678+322j
		cmp	ebx, 404h
		jnz	short loc_407A47
		cmp	ds:dword_4293A8, 0
		jz	short loc_407A02
		mov	ds:nResult, 2
		mov	eax, 78h
		jmp	short loc_407A42
; ---------------------------------------------------------------------------

loc_407A02:				; CODE XREF: sub_407678+377j
		mov	eax, ds:hwnd
		mov	[esp+98h+nIDDlgItem], 8	; nCmdShow
		mov	[esp+98h+hDlg],	eax ; hWnd
		call	ds:ShowWindow
		cmp	ds:dword_428B14, 0
		push	eax
		push	eax
		jnz	short loc_407A3D
		mov	eax, ds:dword_42612C
		mov	[esp+98h+nIDDlgItem], 0
		mov	eax, [eax+34h]
		mov	[esp+98h+hDlg],	eax
		call	sub_407538
		push	ecx
		push	ecx

loc_407A3D:				; CODE XREF: sub_407678+3A9j
		mov	eax, 1

loc_407A42:				; CODE XREF: sub_407678+388j
		call	sub_4050FD

loc_407A47:				; CODE XREF: sub_407678+317j
					; sub_407678+32Aj ...
		cmp	edi, [ebp+hdc]
		jnz	loc_407C0F
		cmp	ebx, 7Bh
		jnz	loc_407C0F
		mov	[esp+98h+lParam], 0 ; lParam
		mov	[esp+98h+wParam], 0 ; wParam
		mov	[esp+98h+nIDDlgItem], 1004h ; Msg
		mov	[esp+98h+hDlg],	edi ; hWnd
		call	ds:SendMessageA
		xor	edx, edx
		sub	esp, 10h
		test	eax, eax
		mov	[ebp+var_70], eax
		jle	loc_407C1E
		call	ds:CreatePopupMenu
		mov	[esp+98h+nIDDlgItem], 0FFFFFFE1h ; int
		mov	[esp+98h+hDlg],	0 ; LPSTR
		mov	ebx, eax
		call	sub_4083A6
		push	edx
		push	edx
		mov	[esp+98h+lParam], eax ;	lpNewItem
		mov	[esp+98h+wParam], 1 ; uIDNewItem
		mov	[esp+98h+nIDDlgItem], 0	; uFlags
		mov	[esp+98h+hDlg],	ebx ; hMenu
		call	ds:AppendMenuA
		sub	esp, 10h
		cmp	[ebp+arg_C], 0FFFFFFFFh
		jnz	short loc_407AE8
		lea	eax, [ebp+Rect]
		mov	[esp+98h+nIDDlgItem], eax ; lpRect
		mov	[esp+98h+hDlg],	edi ; hWnd
		call	ds:GetWindowRect
		mov	edx, [ebp+Rect.top]
		push	eax
		push	eax
		mov	eax, [ebp+Rect.left]
		jmp	short loc_407AF2
; ---------------------------------------------------------------------------

loc_407AE8:				; CODE XREF: sub_407678+454j
		mov	edx, [ebp+arg_C]
		movsx	eax, word ptr [ebp+arg_C]
		sar	edx, 10h

loc_407AF2:				; CODE XREF: sub_407678+46Ej
		mov	[esp+98h+lParam], edx ;	y
		mov	[esp+98h+prcRect], 0 ; prcRect
		mov	[esp+98h+lpThreadId], esi ; hWnd
		mov	[esp+98h+dwCreationFlags], 0 ; nReserved
		mov	[esp+98h+wParam], eax ;	x
		mov	[esp+98h+nIDDlgItem], 180h ; uFlags
		mov	[esp+98h+hDlg],	ebx ; hMenu
		call	ds:TrackPopupMenu
		xor	edx, edx
		sub	esp, 1Ch
		dec	eax
		jnz	loc_407C1E
		mov	edx, ds:SendMessageA
		mov	esi, 1
		mov	ebx, [ebp+var_70]
		mov	[ebp+var_58], 0
		mov	[ebp+var_4C], offset Data
		mov	[ebp+var_48], 0FFFh
		mov	[ebp+var_6C], edx

loc_407B51:				; CODE XREF: sub_407678+4FCj
		dec	ebx
		lea	eax, [ebp+var_60]
		mov	[esp+98h+lParam], eax
		mov	[esp+98h+wParam], ebx
		mov	[esp+98h+nIDDlgItem], 102Dh
		mov	[esp+98h+hDlg],	edi
		call	[ebp+var_6C]
		sub	esp, 10h
		test	ebx, ebx
		lea	esi, [eax+esi+2]
		jnz	short loc_407B51
		mov	[esp+98h+hDlg],	0 ; hWndNewOwner
		call	ds:OpenClipboard
		push	eax
		call	ds:EmptyClipboard
		mov	[esp+98h+nIDDlgItem], esi ; dwBytes
		mov	[esp+98h+hDlg],	42h ; uFlags
		call	ds:GlobalAlloc
		push	edx
		mov	esi, eax
		push	edx
		mov	[esp+98h+hDlg],	eax ; hMem
		call	ds:GlobalLock
		mov	edx, eax
		mov	eax, ds:SendMessageA
		push	ecx
		mov	[ebp+var_6C], eax

loc_407BB3:				; CODE XREF: sub_407678+56Ej
		lea	eax, [ebp+var_60]
		mov	[ebp+var_4C], edx
		mov	[esp+98h+wParam], ebx
		inc	ebx
		mov	[ebp+var_78], edx
		mov	[esp+98h+lParam], eax
		mov	[esp+98h+nIDDlgItem], 102Dh
		mov	[esp+98h+hDlg],	edi
		call	[ebp+var_6C]
		mov	edx, [ebp+var_78]
		add	edx, eax
		sub	esp, 10h
		mov	word ptr [edx],	0A0Dh
		add	edx, 2
		cmp	ebx, [ebp+var_70]
		jnz	short loc_407BB3
		mov	[esp+98h+hDlg],	esi ; hMem
		call	ds:GlobalUnlock
		push	eax
		mov	[esp+98h+nIDDlgItem], esi ; hMem
		mov	[esp+98h+hDlg],	1 ; uFormat
		call	ds:SetClipboardData
		push	eax
		push	eax
		call	ds:CloseClipboard
		xor	edx, edx
		jmp	short loc_407C1E
; ---------------------------------------------------------------------------

loc_407C0F:				; CODE XREF: sub_407678+3D2j
					; sub_407678+3DBj
		mov	edx, [ebp+hdc]	; hdc
		mov	eax, ebx
		mov	ecx, [ebp+arg_C] ; hWnd
		call	sub_40553D
		mov	edx, eax

loc_407C1E:				; CODE XREF: sub_407678+273j
					; sub_407678+2BAj ...
		lea	esp, [ebp-0Ch]
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_407678	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407C2C(LPCSTR lpFileName)
sub_407C2C	proc near		; CODE XREF: start+341p

lpPathName	= dword	ptr -48h
lpSecurityAttributes= dword ptr	-44h
pSecurityDescriptor= dword ptr -40h
var_38		= byte ptr -38h
var_37		= byte ptr -37h
var_36		= word ptr -36h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
SecurityAttributes= _SECURITY_ATTRIBUTES ptr -24h
lpFileName	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+lpFileName]
		lea	eax, [ebp+SecurityAttributes]
		lea	edi, [ebp+var_38]
		mov	[ebp+var_38], 1
		mov	[ebp+var_37], 0
		mov	[ebp+var_36], 4
		mov	[ebp+var_34], offset dword_40CD88
		mov	[ebp+var_30], offset dword_40CD88
		mov	[ebp+var_2C], 0
		mov	[ebp+var_28], offset dword_40CD78
		mov	[ebp+SecurityAttributes.nLength], 0Ch
		mov	[ebp+SecurityAttributes.lpSecurityDescriptor], edi
		mov	[ebp+SecurityAttributes.bInheritHandle], 0
		mov	[esp+48h+lpSecurityAttributes],	eax ; lpSecurityAttributes
		mov	[esp+48h+lpPathName], esi ; lpPathName
		call	ds:CreateDirectoryA
		push	edx
		push	edx
		xor	edx, edx
		test	eax, eax
		jnz	short loc_407CC1
		mov	ebx, ds:GetLastError
		call	ebx ; GetLastError
		cmp	eax, 0B7h
		mov	edx, eax
		jnz	short loc_407CC1
		mov	[esp+48h+pSecurityDescriptor], edi ; pSecurityDescriptor
		mov	[esp+48h+lpSecurityAttributes],	80000007h ; SecurityInformation
		mov	[esp+48h+lpPathName], esi ; lpFileName
		call	ds:SetFileSecurityA
		xor	edx, edx
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_407CC1
		call	ebx ; GetLastError
		mov	edx, eax

loc_407CC1:				; CODE XREF: sub_407C2C+60j
					; sub_407C2C+71j ...
		lea	esp, [ebp-0Ch]
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
sub_407C2C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407CCD(LPCSTR)
sub_407CCD	proc near		; CODE XREF: sub_404824+3Cp
					; start:loc_404C25p

lpPathName	= dword	ptr -18h
lpSecurityAttributes= dword ptr	-14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+lpSecurityAttributes],	0 ; lpSecurityAttributes
		mov	[esp+18h+lpPathName], eax ; lpPathName
		call	ds:CreateDirectoryA
		mov	edx, eax
		xor	eax, eax
		push	ecx
		test	edx, edx
		push	ecx
		jnz	short locret_407CF7
		call	ds:GetLastError

locret_407CF7:				; CODE XREF: sub_407CCD+22j
		leave
		retn	4
sub_407CCD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407CFB(LPSTR)
sub_407CFB	proc near		; CODE XREF: sub_40164F+1249p
					; start+43Ap

lpApplicationName= dword ptr -48h
lpCommandLine	= dword	ptr -44h
lpProcessAttributes= dword ptr -40h
lpThreadAttributes= dword ptr -3Ch
bInheritHandles	= dword	ptr -38h
dwCreationFlags	= dword	ptr -34h
lpEnvironment	= dword	ptr -30h
lpCurrentDirectory= dword ptr -2Ch
lpStartupInfo	= dword	ptr -28h
lpProcessInformation= dword ptr	-24h
ProcessInformation= _PROCESS_INFORMATION ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+48h+lpProcessInformation],	eax ; lpProcessInformation
		mov	eax, [ebp+arg_0]
		mov	ds:StartupInfo.cb, 44h
		mov	[esp+48h+lpStartupInfo], offset	StartupInfo ; lpStartupInfo
		mov	[esp+48h+lpCurrentDirectory], 0	; lpCurrentDirectory
		mov	[esp+48h+lpEnvironment], 0 ; lpEnvironment
		mov	[esp+48h+dwCreationFlags], 0 ; dwCreationFlags
		mov	[esp+48h+bInheritHandles], 0 ; bInheritHandles
		mov	[esp+48h+lpThreadAttributes], 0	; lpThreadAttributes
		mov	[esp+48h+lpProcessAttributes], 0 ; lpProcessAttributes
		mov	[esp+48h+lpCommandLine], eax ; lpCommandLine
		mov	[esp+48h+lpApplicationName], 0 ; lpApplicationName
		call	ds:CreateProcessA
		xor	edx, edx
		sub	esp, 28h
		test	eax, eax
		jz	short loc_407D77
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+48h+lpApplicationName], eax ; hObject
		call	ds:CloseHandle
		mov	edx, [ebp+ProcessInformation.hProcess]
		push	eax

loc_407D77:				; CODE XREF: sub_407CFB+6Aj
		mov	eax, edx
		leave
		retn	4
sub_407CFB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_407D7D	proc near		; CODE XREF: DialogFunc+8Dp
					; sub_405198+2Fp ...
		push	ebp
		mov	eax, ds:SetDlgItemTextA
		mov	ebp, esp
		leave
		jmp	eax
sub_407D7D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407D88(int,	LPSTR)
sub_407D88	proc near		; CODE XREF: sub_4054A3+21p
					; sub_405D58+3Ap ...

hDlg		= dword	ptr -18h
nIDDlgItem	= dword	ptr -14h
lpString	= dword	ptr -10h
cchMax		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+cchMax], 400h ; cchMax
		mov	[esp+18h+lpString], eax	; lpString
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+nIDDlgItem], eax ; nIDDlgItem
		mov	eax, ds:hDlg
		mov	[esp+18h+hDlg],	eax ; hDlg
		call	ds:GetDlgItemTextA
		sub	esp, 10h
		leave
		retn	8
sub_407D88	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_407DB9	proc near		; CODE XREF: sub_40164F+7DBp
					; sub_40164F+9A9p ...

lpmbp		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	ds:dword_428B28, 0
		mov	edx, [ebp+arg_4]
		jz	short loc_407DD2
		mov	eax, edx
		shr	eax, 15h
		jnz	short locret_407E29

loc_407DD2:				; CODE XREF: sub_407DB9+10j
		mov	eax, edx
		and	eax, 1FFFFFh
		mov	edx, eax
		xor	edx, 180000h
		cmp	ds:dword_428B30, 0
		mov	mbp.lpszCaption, offset	chText
		mov	[esp+18h+lpmbp], offset	mbp ; lpmbp
		cmovnz	eax, edx
		mov	edx, ds:hwnd
		mov	mbp.dwStyle, eax
		mov	mbp.hwndOwner, edx
		mov	edx, ds:hInstance
		mov	mbp.hInstance, edx
		mov	edx, [ebp+arg_0]
		mov	mbp.lpszText, edx
		call	ds:MessageBoxIndirectA
		push	edx

locret_407E29:				; CODE XREF: sub_407DB9+17j
		leave
		retn	8
sub_407DB9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407E2D(LPCSTR lpszStart)
sub_407E2D	proc near		; CODE XREF: sub_40164F+67Ap
					; sub_404824+2Fp ...

lpString	= dword	ptr -18h
lpszCurrent	= dword	ptr -14h
var_4		= dword	ptr -4
lpszStart	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+lpszStart]
		mov	[esp+18h+lpString], ebx	; lpString
		call	ds:lstrlenA
		add	eax, ebx
		push	edx
		mov	[esp+18h+lpszCurrent], eax ; lpszCurrent
		mov	[esp+18h+lpString], ebx	; lpszStart
		call	ds:CharPrevA
		push	ecx
		push	ecx
		cmp	byte ptr [eax],	5Ch
		jz	short loc_407E6A
		mov	[esp+18h+lpszCurrent], offset asc_40CA34 ; "\\"
		mov	[esp+18h+lpString], ebx	; lpString1
		call	ds:lstrcatA
		push	ecx
		push	ecx

loc_407E6A:				; CODE XREF: sub_407E2D+28j
		mov	eax, ebx
		mov	ebx, [ebp+var_4]
		leave
		retn	4
sub_407E2D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407E73(LPCSTR, char)
sub_407E73	proc near		; CODE XREF: sub_40164F+302p
					; start+13Ap ...

lpsz		= dword	ptr -28h
var_9		= byte ptr -9
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	dl, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	ebx, ds:CharNextA
		mov	[ebp+var_9], dl
		jmp	short loc_407E91
; ---------------------------------------------------------------------------

loc_407E8B:				; CODE XREF: sub_407E73+27j
		mov	[esp+28h+lpsz],	eax ; lpsz
		call	ebx ; CharNextA
		push	edx

loc_407E91:				; CODE XREF: sub_407E73+16j
		mov	dl, [eax]
		test	dl, dl
		jz	short loc_407E9C
		cmp	dl, [ebp+var_9]
		jnz	short loc_407E8B

loc_407E9C:				; CODE XREF: sub_407E73+22j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
sub_407E73	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407EA3(LPCSTR lpszStart)
sub_407EA3	proc near		; CODE XREF: sub_404467+90p
					; sub_405D58+362p ...

lpString	= dword	ptr -18h
lpszCurrent	= dword	ptr -14h
lpszStart	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+lpszStart]
		mov	[esp+18h+lpString], ebx	; lpString
		call	ds:lstrlenA
		push	esi
		mov	esi, ds:CharPrevA
		add	eax, ebx

loc_407EC0:				; CODE XREF: sub_407EA3+2Fj
		cmp	byte ptr [eax],	5Ch
		jz	short loc_407ED4
		mov	[esp+18h+lpszCurrent], eax ; lpszCurrent
		mov	[esp+18h+lpString], ebx	; lpszStart
		call	esi ; CharPrevA
		cmp	eax, ebx
		push	ecx
		push	ecx
		ja	short loc_407EC0

loc_407ED4:				; CODE XREF: sub_407EA3+20j
		mov	byte ptr [eax],	0
		lea	esp, [ebp-8]
		inc	eax
		pop	ebx
		pop	esi
		pop	ebp
		retn	4
sub_407EA3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_407EE1	proc near		; CODE XREF: sub_40164F+645p
					; sub_40164F+1646p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	eax, 1
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		cmp	word ptr [edx],	5C5Ch
		mov	cl, [edx]
		jz	short loc_407F0B
		or	ecx, 20h
		xor	al, al
		sub	ecx, 61h
		cmp	cl, 19h
		ja	short loc_407F0B
		xor	eax, eax
		cmp	byte ptr [edx+1], 3Ah
		setz	al

loc_407F0B:				; CODE XREF: sub_407EE1+12j
					; sub_407EE1+1Fj
		pop	ebp
		retn	4
sub_407EE1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407F0F(LPCSTR)
sub_407F0F	proc near		; CODE XREF: sub_40164F+2DDp
					; sub_405D58+108p ...

lpsz		= dword	ptr -28h
var_24		= byte ptr -24h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, ds:CharNextA
		mov	[esp+28h+lpsz],	esi ; lpsz
		call	ebx ; CharNextA
		push	ecx
		mov	edi, eax
		mov	[esp+28h+lpsz],	eax ; lpsz
		call	ebx ; CharNextA
		push	edx
		cmp	byte ptr [esi],	0
		jz	short loc_407F49
		cmp	word ptr [edi],	5C3Ah
		jnz	short loc_407F49
		mov	[ebp+arg_0], eax
		lea	esp, [ebp-0Ch]
		mov	edx, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	edx
; ---------------------------------------------------------------------------

loc_407F49:				; CODE XREF: sub_407F0F+23j
					; sub_407F0F+2Aj
		xor	ebx, ebx
		cmp	word ptr [esi],	5C5Ch
		jnz	short loc_407F85
		mov	dword ptr [esp+28h+var_24], 5Ch	; char
		mov	[esp+28h+lpsz],	eax ; LPCSTR
		call	sub_407E73
		push	edx
		push	edx
		cmp	byte ptr [eax],	0
		jz	short loc_407F85
		inc	eax
		mov	dword ptr [esp+28h+var_24], 5Ch	; char
		mov	[esp+28h+lpsz],	eax ; LPCSTR
		call	sub_407E73
		push	edi
		push	edi
		cmp	byte ptr [eax],	0
		lea	edx, [eax+1]
		cmovnz	ebx, edx

loc_407F85:				; CODE XREF: sub_407F0F+41j
					; sub_407F0F+58j
		lea	esp, [ebp-0Ch]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
sub_407F0F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_407F91(LPCSTR lpString1, LPCSTR)
sub_407F91	proc near		; CODE XREF: sub_408996+1B4p
					; sub_408996+1E9p

lpString	= dword	ptr -38h
lpString2	= dword	ptr -34h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
lpString1	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [ebp+arg_4]
		mov	esi, ds:lstrlenA
		mov	ebx, [ebp+lpString1]
		mov	[esp+38h+lpString], eax	; lpString
		call	esi ; lstrlenA
		mov	[ebp+var_1C], esi
		push	ecx
		mov	edi, eax
		jmp	short loc_407FE5
; ---------------------------------------------------------------------------

loc_407FB3:				; CODE XREF: sub_407F91+5Dj
		lea	esi, [ebx+edi]
		mov	eax, [ebp+arg_4]
		mov	dl, [esi]
		mov	byte ptr [esi],	0
		mov	[esp+38h+lpString], ebx	; lpString1
		mov	[esp+38h+lpString2], eax ; lpString2
		mov	[ebp+var_20], dl
		call	ds:lstrcmpiA
		push	edx
		test	eax, eax
		push	edx
		mov	dl, [ebp+var_20]
		mov	[esi], dl
		jz	short loc_407FF2
		mov	[esp+38h+lpString], ebx	; lpsz
		call	ds:CharNextA
		push	ebx
		mov	ebx, eax

loc_407FE5:				; CODE XREF: sub_407F91+20j
		mov	[esp+38h+lpString], ebx
		call	[ebp+var_1C]
		cmp	eax, edi
		push	ecx
		jge	short loc_407FB3
		xor	ebx, ebx

loc_407FF2:				; CODE XREF: sub_407F91+46j
		lea	esp, [ebp-0Ch]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_407F91	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_407FFE	proc near		; CODE XREF: sub_40164F+2453p
					; sub_404467+13Fp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	edi
		mov	ecx, [ebp+arg_4]
		push	esi
		mov	edi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_0]
		jmp	short loc_408018
; ---------------------------------------------------------------------------

loc_408011:				; CODE XREF: sub_407FFE+20j
		mov	dl, [ecx+eax]
		mov	[ebx+eax], dl
		inc	eax

loc_408018:				; CODE XREF: sub_407FFE+11j
		mov	esi, edi
		sub	esi, eax
		test	esi, esi
		jg	short loc_408011
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	0Ch
sub_407FFE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_408027(LPCSTR)
sub_408027	proc near		; CODE XREF: sub_40164F+6E6p
					; sub_40164F+2353p ...

lpFileName	= dword	ptr -18h
dwFileAttributes= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	[esp+18h+lpFileName], ebx ; lpFileName
		call	ds:GetFileAttributesA
		cmp	eax, 0FFFFFFFFh
		push	edx
		jz	short loc_408052
		and	eax, 0FFFFFFFEh
		mov	[esp+18h+lpFileName], ebx ; lpFileName
		mov	[esp+18h+dwFileAttributes], eax	; dwFileAttributes
		call	ds:SetFileAttributesA
		push	ebx
		push	ebx

loc_408052:				; CODE XREF: sub_408027+17j
		mov	ebx, [ebp+var_4]
		leave
		retn	4
sub_408027	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_408059(LPCSTR, DWORD, DWORD)
sub_408059	proc near		; CODE XREF: sub_40164F+70Fp
					; sub_40164F+1FBAp ...

lpFileName	= dword	ptr -28h
dwDesiredAccess	= dword	ptr -24h
dwShareMode	= dword	ptr -20h
lpSecurityAttributes= dword ptr	-1Ch
dwCreationDisposition= dword ptr -18h
dwFlagsAndAttributes= dword ptr	-14h
hTemplateFile	= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	ebx, [ebp+arg_0]
		mov	[esp+28h+lpFileName], ebx ; lpFileName
		call	ds:GetFileAttributesA
		mov	edx, 0
		cmp	eax, 0FFFFFFFFh
		push	ecx
		cmovz	eax, edx
		mov	[esp+28h+dwFlagsAndAttributes],	eax ; dwFlagsAndAttributes
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+lpFileName], ebx ; lpFileName
		mov	[esp+28h+hTemplateFile], 0 ; hTemplateFile
		mov	[esp+28h+lpSecurityAttributes],	0 ; lpSecurityAttributes
		mov	[esp+28h+dwCreationDisposition], eax ; dwCreationDisposition
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+dwShareMode], 1 ; dwShareMode
		mov	[esp+28h+dwDesiredAccess], eax ; dwDesiredAccess
		call	ds:CreateFileA
		mov	ebx, [ebp+var_4]
		sub	esp, 1Ch
		leave
		retn	0Ch
sub_408059	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_4080B5(LPSTR, LPCSTR)
sub_4080B5	proc near		; CODE XREF: sub_40164F+5FBp
					; sub_404467+29Cp ...

lpPathName	= dword	ptr -48h
lpPrefixString	= dword	ptr -44h
uUnique		= dword	ptr -40h
lpTempFileName	= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
PrefixString	= byte ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, 65h
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_0]
		lea	edi, [ebp+PrefixString]
		jmp	short loc_408113
; ---------------------------------------------------------------------------

loc_4080CB:				; CODE XREF: sub_4080B5+5Fj
		mov	dword ptr [ebp+PrefixString], 61736Eh
		call	ds:GetTickCount
		mov	ecx, 1Ah
		xor	edx, edx
		mov	[esp+48h+lpTempFileName], ebx ;	lpTempFileName
		mov	[esp+48h+uUnique], 0 ; uUnique
		mov	[esp+48h+lpPrefixString], edi ;	lpPrefixString
		mov	[ebp+var_2C], eax
		div	ecx
		mov	[ebp+var_30], edx
		mov	cl, byte ptr [ebp+var_30]
		add	ecx, 61h
		mov	[ebp+PrefixString+2], cl
		mov	ecx, [ebp+arg_4]
		mov	[esp+48h+lpPathName], ecx ; lpPathName
		call	ds:GetTempFileNameA
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_40811B

loc_408113:				; CODE XREF: sub_4080B5+14j
		dec	esi
		jnz	short loc_4080CB
		mov	byte ptr [ebx],	0
		xor	ebx, ebx

loc_40811B:				; CODE XREF: sub_4080B5+5Cj
		lea	esp, [ebp-0Ch]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_4080B5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_408127(HKEY, LPCSTR, LPCSTR	lpValueName, LPBYTE lpData, int)
sub_408127	proc near		; CODE XREF: sub_4065F8+6Ap
					; sub_4065F8+A2p ...

hKey		= dword	ptr -38h
lpSubKey	= dword	ptr -34h
ulOptions	= dword	ptr -30h
samDesired	= dword	ptr -2Ch
phkResult	= dword	ptr -28h
lpcbData	= dword	ptr -24h
var_14		= dword	ptr -14h
cbData		= dword	ptr -10h
Type		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpValueName	= dword	ptr  10h
lpData		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	ebx, [ebp+lpData]
		cmp	[ebp+arg_10], 1
		lea	edx, [ebp+var_14]
		sbb	eax, eax
		xor	al, al
		add	eax, 20119h
		mov	byte ptr [ebx],	0
		mov	[esp+38h+samDesired], eax ; samDesired
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+phkResult], edx ; phkResult
		mov	[esp+38h+ulOptions], 0 ; ulOptions
		mov	[esp+38h+lpSubKey], eax	; lpSubKey
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+hKey],	eax ; hKey
		call	ds:RegOpenKeyExA
		sub	esp, 14h
		test	eax, eax
		jnz	short loc_4081C9
		lea	eax, [ebp+cbData]
		mov	[esp+38h+lpcbData], eax	; lpcbData
		lea	eax, [ebp+Type]
		mov	[esp+38h+samDesired], eax ; lpType
		mov	eax, [ebp+lpValueName]
		mov	[ebp+cbData], 400h
		mov	[esp+38h+phkResult], ebx ; lpData
		mov	[esp+38h+ulOptions], 0 ; lpReserved
		mov	[esp+38h+lpSubKey], eax	; lpValueName
		mov	eax, [ebp+var_14]
		mov	[esp+38h+hKey],	eax ; hKey
		call	ds:RegQueryValueExA
		sub	esp, 18h
		test	eax, eax
		jnz	short loc_4081B2
		mov	eax, [ebp+Type]
		dec	eax
		cmp	eax, 1
		jbe	short loc_4081B5

loc_4081B2:				; CODE XREF: sub_408127+80j
		mov	byte ptr [ebx],	0

loc_4081B5:				; CODE XREF: sub_408127+89j
		mov	eax, [ebp+var_14]
		mov	byte ptr [ebx+3FFh], 0
		mov	[esp+38h+hKey],	eax ; hKey
		call	ds:RegCloseKey
		push	ebx

loc_4081C9:				; CODE XREF: sub_408127+45j
		mov	ebx, [ebp+var_4]
		leave
		retn	14h
sub_408127	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_4081D0(LPSTR, int)
sub_4081D0	proc near		; CODE XREF: sub_40164F+216p
					; sub_40164F+A24p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_14], offset aD ; "%d"
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax ;	LPSTR
		call	ds:wsprintfA
		leave
		retn	8
sub_4081D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4081F5	proc near		; CODE XREF: sub_401463+24p
					; sub_40160F+18j ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, 1
		push	ebx
		sub	esp, 8
		mov	edx, [ebp+arg_0]
		cmp	byte ptr [edx],	2Dh
		jnz	short loc_40820F
		inc	edx
		or	esi, 0FFFFFFFFh

loc_40820F:				; CODE XREF: sub_4081F5+14j
		cmp	byte ptr [edx],	30h
		jnz	short loc_408241
		mov	al, [edx+1]
		lea	ecx, [eax-30h]
		cmp	cl, 8
		sbb	ebx, ebx
		and	ebx, 0FFFFFFFEh
		add	ebx, 39h
		cmp	cl, 8
		sbb	ecx, ecx
		and	eax, 0FFFFFFDFh
		and	ecx, 0FFFFFFFEh
		add	ecx, 0Ah
		cmp	al, 58h
		jz	short loc_40823A
		inc	edx
		jmp	short loc_408245
; ---------------------------------------------------------------------------

loc_40823A:				; CODE XREF: sub_4081F5+40j
		add	edx, 2
		mov	cl, 10h
		jmp	short loc_408245
; ---------------------------------------------------------------------------

loc_408241:				; CODE XREF: sub_4081F5+1Dj
		mov	bl, 39h
		mov	cl, 0Ah

loc_408245:				; CODE XREF: sub_4081F5+43j
					; sub_4081F5+4Aj
		movsx	ebx, bl
		xor	eax, eax
		mov	[ebp+var_10], ebx
		movsx	ebx, cl
		mov	[ebp+var_14], ebx

loc_408253:				; CODE XREF: sub_4081F5+91j
		movsx	ebx, byte ptr [edx]
		inc	edx
		cmp	ebx, 2Fh
		jle	short loc_408266
		cmp	ebx, [ebp+var_10]
		jg	short loc_408266
		sub	ebx, 30h
		jmp	short loc_408280
; ---------------------------------------------------------------------------

loc_408266:				; CODE XREF: sub_4081F5+65j
					; sub_4081F5+6Aj
		cmp	cl, 10h
		jnz	short loc_408288
		mov	edi, ebx
		and	edi, 0FFFFFFDFh
		cmp	edi, 40h
		jle	short loc_408288
		cmp	edi, 46h
		jg	short loc_408288
		and	ebx, 7
		add	ebx, 9

loc_408280:				; CODE XREF: sub_4081F5+6Fj
		imul	eax, [ebp+var_14]
		add	eax, ebx
		jmp	short loc_408253
; ---------------------------------------------------------------------------

loc_408288:				; CODE XREF: sub_4081F5+74j
					; sub_4081F5+7Ej ...
		imul	eax, esi
		pop	esi
		pop	edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
sub_4081F5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_408294(LPSTR, LPCSTR)
sub_408294	proc near		; CODE XREF: sub_40164F+3B8p
					; sub_40164F+551p ...

lpString1	= dword	ptr -18h
lpString2	= dword	ptr -14h
iMaxLength	= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+iMaxLength], 400h ; iMaxLength
		mov	[esp+18h+lpString2], eax ; lpString2
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+lpString1], eax ; lpString1
		call	ds:lstrcpynA
		sub	esp, 0Ch
		leave
		retn	8
sub_408294	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4082BC	proc near		; CODE XREF: sub_40164F+A17p
					; sub_40164F+A96p ...
		push	ebp
		mov	eax, ds:lstrlenA
		mov	ebp, esp
		leave
		jmp	eax
sub_4082BC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4082C7	proc near		; CODE XREF: sub_40164F+687p
					; sub_40164F+901p ...
		push	ebp
		mov	eax, ds:lstrcatA
		mov	ebp, esp
		leave
		jmp	eax
sub_4082C7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_4082D2(LPCSTR lpszStart)
sub_4082D2	proc near		; CODE XREF: sub_401414+41p
					; sub_40164F+695p ...

lpsz		= dword	ptr -38h
lpszCurrent	= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
lpszStart	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+lpszStart]
		cmp	byte ptr [ebx],	5Ch
		jnz	short loc_4082F9
		cmp	byte ptr [ebx+1], 5Ch
		jnz	short loc_4082F9
		cmp	byte ptr [ebx+2], 3Fh
		jnz	short loc_4082F9
		cmp	byte ptr [ebx+3], 5Ch
		lea	eax, [ebx+4]
		cmovz	ebx, eax

loc_4082F9:				; CODE XREF: sub_4082D2+Fj
					; sub_4082D2+15j ...
		cmp	byte ptr [ebx],	0
		jz	short loc_40830F
		mov	[esp+38h+lpsz],	ebx
		call	sub_407EE1
		lea	edx, [ebx+2]
		test	eax, eax
		push	ecx
		cmovnz	ebx, edx

loc_40830F:				; CODE XREF: sub_4082D2+2Aj
		mov	eax, ds:CharNextA
		mov	esi, ebx
		mov	edi, ebx
		mov	[ebp+var_1C], eax
		jmp	short loc_40836F
; ---------------------------------------------------------------------------

loc_40831D:				; CODE XREF: sub_4082D2+A1j
		cmp	al, 1Fh
		jbe	short loc_408366
		movsx	eax, al
		mov	[esp+38h+lpszCurrent], eax ; char
		mov	[esp+38h+lpsz],	offset a? ; "*?|<>/\":"
		call	sub_407E73
		push	edx
		push	edx
		cmp	byte ptr [eax],	0
		jnz	short loc_408366
		mov	[esp+38h+lpsz],	edi ; lpsz
		call	ds:CharNextA
		sub	eax, edi
		push	edx
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+lpsz],	esi
		mov	[esp+38h+lpszCurrent], edi
		call	sub_407FFE
		sub	esp, 0Ch
		mov	[esp+38h+lpsz],	esi ; lpsz
		call	ds:CharNextA
		mov	esi, eax
		push	ecx

loc_408366:				; CODE XREF: sub_4082D2+4Dj
					; sub_4082D2+67j
		mov	[esp+38h+lpsz],	edi
		call	[ebp+var_1C]
		mov	edi, eax
		push	ecx

loc_40836F:				; CODE XREF: sub_4082D2+49j
		mov	al, [edi]
		test	al, al
		jnz	short loc_40831D
		mov	edi, ds:CharPrevA
		mov	byte ptr [esi],	0

loc_40837E:				; CODE XREF: sub_4082D2+C8j
		mov	[esp+38h+lpszCurrent], esi ; lpszCurrent
		mov	[esp+38h+lpsz],	ebx ; lpszStart
		call	edi ; CharPrevA
		push	edx
		mov	esi, eax
		push	edx
		mov	al, [eax]
		cmp	al, 5Ch
		jz	short loc_408395
		cmp	al, 20h
		jnz	short loc_40839C

loc_408395:				; CODE XREF: sub_4082D2+BDj
		cmp	ebx, esi
		mov	byte ptr [esi],	0
		jb	short loc_40837E

loc_40839C:				; CODE XREF: sub_4082D2+C1j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
sub_4082D2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_4083A6(LPSTR, int)
sub_4083A6	proc near		; CODE XREF: sub_401414+30p
					; sub_401463+1Ap ...

hwnd		= dword	ptr -7Ch
csidl		= dword	ptr -78h
ppidl		= dword	ptr -74h
lpBuffer	= dword	ptr -68h
uSize		= dword	ptr -64h
lpValueName	= dword	ptr -60h
lpData		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	edi, [ebp+arg_4]
		test	edi, edi
		jns	short loc_4083C0
		mov	eax, ds:dword_4293CC
		not	edi
		mov	edi, [eax+edi*4]

loc_4083C0:				; CODE XREF: sub_4083A6+Ej
		mov	eax, [ebp+arg_0]
		mov	ebx, offset String1
		add	edi, ds:dword_428B64
		sub	eax, offset String1
		cmp	eax, 7FFh
		ja	loc_408644
		mov	ebx, [ebp+arg_0]
		mov	[ebp+arg_0], 0
		jmp	loc_408644
; ---------------------------------------------------------------------------

loc_4083ED:				; CODE XREF: sub_4083A6+2B2j
		cmp	al, 0FCh
		jbe	loc_40862E
		movsx	edx, byte ptr [edi+1]
		movsx	ecx, byte ptr [edi+2]
		add	edi, 3
		mov	esi, edx
		or	esi, 8000h
		mov	[ebp+var_2C], esi
		mov	esi, ecx
		or	esi, 8000h
		cmp	al, 0FEh
		mov	[ebp+var_28], edx
		mov	[ebp+var_24], esi
		mov	[ebp+var_20], ecx
		jnz	loc_4085B8
		mov	[ebp+var_44], edx
		mov	[ebp+var_40], ecx
		call	ds:GetVersion
		mov	edx, [ebp+var_44]
		mov	[ebp+var_3C], 1
		mov	ecx, [ebp+var_40]
		test	eax, eax
		jns	short loc_40845E
		cmp	ax, 5A04h
		jz	short loc_40845E
		cmp	ecx, 2Eh
		setz	byte ptr [ebp+var_3C]
		cmp	ecx, 23h
		setz	al
		or	byte ptr [ebp+var_3C], al
		movzx	eax, byte ptr [ebp+var_3C]
		mov	[ebp+var_3C], eax

loc_40845E:				; CODE XREF: sub_4083A6+99j
					; sub_4083A6+9Fj
		cmp	ds:dword_428B0C, 1
		sbb	esi, esi
		and	esi, 0FFFFFFFEh
		add	esi, 4
		test	dl, 80h
		jz	short loc_4084C7
		mov	eax, edx
		and	edx, 3Fh
		add	edx, ds:dword_428B64
		and	eax, 40h
		mov	[ebp+var_40], ecx
		xor	esi, esi
		mov	[esp+68h+var_58], eax ;	int
		mov	[esp+68h+lpData], ebx ;	lpData
		mov	[esp+68h+lpValueName], edx ; lpValueName
		mov	[esp+68h+uSize], offset	aSoftwareMicros	; "Software\\Microsoft\\Windows\\CurrentVe"...
		mov	[esp+68h+lpBuffer], 80000002h ;	HKEY
		call	sub_408127
		mov	ecx, [ebp+var_40]
		sub	esp, 14h
		cmp	byte ptr [ebx],	0
		jnz	loc_408590
		mov	[esp+68h+uSize], ecx ; int
		mov	[esp+68h+lpBuffer], ebx	; LPSTR
		call	sub_4083A6
		push	eax
		push	eax
		jmp	loc_408590
; ---------------------------------------------------------------------------

loc_4084C7:				; CODE XREF: sub_4083A6+CAj
		cmp	edx, 25h
		jnz	short loc_4084DF
		mov	[esp+68h+lpBuffer], ebx	; lpBuffer
		mov	[esp+68h+uSize], 400h ;	uSize
		call	ds:GetSystemDirectoryA
		jmp	short loc_4084F9
; ---------------------------------------------------------------------------

loc_4084DF:				; CODE XREF: sub_4083A6+124j
		cmp	edx, 24h
		jnz	loc_408590
		mov	[esp+68h+uSize], 400h ;	uSize
		mov	[esp+68h+lpBuffer], ebx	; lpBuffer
		call	ds:GetWindowsDirectoryA

loc_4084F9:				; CODE XREF: sub_4083A6+137j
		push	esi
		push	esi
		xor	esi, esi
		jmp	loc_408590
; ---------------------------------------------------------------------------

loc_408502:				; CODE XREF: sub_4083A6+1ECj
		dec	esi
		mov	eax, ds:dword_428B9C
		cmp	[ebp+var_3C], 0
		jz	short loc_408540
		test	eax, eax
		jz	short loc_408540
		mov	edx, [ebp+esi*4+var_2C]
		mov	[esp+68h+var_58], ebx
		mov	[esp+68h+lpData], 0
		mov	[esp+68h+lpValueName], 0
		mov	[esp+68h+uSize], edx
		mov	edx, ds:hwnd
		mov	[esp+68h+lpBuffer], edx
		call	eax ; dword_428B9C
		sub	esp, 14h
		test	eax, eax
		jz	short loc_408598

loc_408540:				; CODE XREF: sub_4083A6+166j
					; sub_4083A6+16Aj
		lea	eax, [ebp+var_1C]
		mov	[esp+7Ch+ppidl], eax ; ppidl
		mov	eax, [ebp+esi*4+var_2C]
		mov	[esp+7Ch+csidl], eax ; csidl
		mov	eax, ds:hwnd
		mov	[esp+7Ch+hwnd],	eax ; hwnd
		call	ds:SHGetSpecialFolderLocation
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_40858D
		mov	eax, [ebp+var_1C]
		mov	[esp+7Ch+csidl], ebx ; pszPath
		mov	[esp+7Ch+hwnd],	eax ; pidl
		call	ds:SHGetPathFromIDListA
		push	edx
		push	edx
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_40], eax
		mov	[esp+7Ch+hwnd],	edx ; pv
		call	ds:CoTaskMemFree
		mov	eax, [ebp+var_40]
		test	eax, eax
		push	ecx
		jnz	short loc_408598

loc_40858D:				; CODE XREF: sub_4083A6+1BCj
		mov	byte ptr [ebx],	0

loc_408590:				; CODE XREF: sub_4083A6+108j
					; sub_4083A6+11Cj ...
		test	esi, esi
		jnz	loc_408502

loc_408598:				; CODE XREF: sub_4083A6+198j
					; sub_4083A6+1E5j
		cmp	byte ptr [ebx],	0
		jz	short loc_408601
		cmp	[ebp+var_20], 1Ah
		jnz	short loc_408601
		mov	[esp+7Ch+csidl], offset	aMicrosoftInter	; "\\Microsoft\\Internet Explorer\\Quick L"...
		mov	[esp+7Ch+hwnd],	ebx ; lpString1
		call	ds:lstrcatA
		push	eax
		push	eax
		jmp	short loc_408601
; ---------------------------------------------------------------------------

loc_4085B8:				; CODE XREF: sub_4083A6+78j
		mov	esi, ecx
		and	edx, 7Fh
		and	esi, 7Fh
		shl	esi, 7
		or	esi, edx
		cmp	al, 0FDh
		jnz	short loc_40860C
		cmp	esi, 1Dh
		jnz	short loc_4085E1
		mov	eax, ds:hwnd
		mov	[esp+68h+lpBuffer], ebx	; LPSTR
		mov	[esp+68h+uSize], eax ; int
		call	sub_4081D0
		jmp	short loc_4085F7
; ---------------------------------------------------------------------------

loc_4085E1:				; CODE XREF: sub_4083A6+226j
		mov	eax, esi
		shl	eax, 0Ah
		add	eax, offset dword_42D000
		mov	[esp+68h+uSize], eax ; LPCSTR
		mov	[esp+68h+lpBuffer], ebx	; LPSTR
		call	sub_408294

loc_4085F7:				; CODE XREF: sub_4083A6+239j
		sub	esi, 15h
		cmp	esi, 6
		push	eax
		push	eax
		ja	short loc_408620

loc_408601:				; CODE XREF: sub_4083A6+1F5j
					; sub_4083A6+1FBj ...
		mov	[esp+68h+lpBuffer], ebx	; lpszStart
		call	sub_4082D2
		push	eax
		jmp	short loc_408620
; ---------------------------------------------------------------------------

loc_40860C:				; CODE XREF: sub_4083A6+221j
		inc	al
		jnz	short loc_408620
		not	esi
		mov	[esp+68h+uSize], esi ; int
		mov	[esp+68h+lpBuffer], ebx	; LPSTR
		call	sub_4083A6
		push	eax
		push	eax

loc_408620:				; CODE XREF: sub_4083A6+259j
					; sub_4083A6+264j ...
		mov	[esp+68h+lpBuffer], ebx	; lpString
		call	ds:lstrlenA
		add	ebx, eax
		push	esi
		jmp	short loc_408644
; ---------------------------------------------------------------------------

loc_40862E:				; CODE XREF: sub_4083A6+49j
		lea	edx, [ebx+1]
		jnz	short loc_40863F
		mov	al, [edi+1]
		add	edi, 2
		mov	[ebx], al
		mov	ebx, edx
		jmp	short loc_408644
; ---------------------------------------------------------------------------

loc_40863F:				; CODE XREF: sub_4083A6+28Bj
		mov	[ebx], al
		inc	edi
		mov	ebx, edx

loc_408644:				; CODE XREF: sub_4083A6+32j
					; sub_4083A6+42j ...
		mov	al, [edi]
		test	al, al
		jz	short loc_40865E
		mov	edx, ebx
		sub	edx, offset String1
		cmp	edx, 3FFh
		jle	loc_4083ED

loc_40865E:				; CODE XREF: sub_4083A6+2A2j
		cmp	[ebp+arg_0], 0
		mov	eax, offset String1
		mov	byte ptr [ebx],	0
		jz	short loc_40867D
		mov	[esp+68h+uSize], eax ; LPCSTR
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+lpBuffer], eax	; LPSTR
		call	sub_408294
		push	ebx
		push	ebx

loc_40867D:				; CODE XREF: sub_4083A6+2C4j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_4083A6	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_408687	proc near		; CODE XREF: sub_40164F+1ACFp
					; sub_40164F+1BD4p

arg_0		= dword	ptr  8

		push	ebp
		mov	eax, offset aHkey_classes_r ; "HKEY_CLASSES_ROOT"
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		cmp	edx, 80000000h
		jz	short loc_4086EE
		cmp	edx, 80000001h
		mov	eax, offset aHkey_current_u ; "HKEY_CURRENT_USER"
		jz	short loc_4086EE
		cmp	edx, 80000002h
		mov	eax, offset aHkey_local_mac ; "HKEY_LOCAL_MACHINE"
		jz	short loc_4086EE
		cmp	edx, 80000003h
		mov	eax, offset aHkey_users	; "HKEY_USERS"
		jz	short loc_4086EE
		cmp	edx, 80000004h
		mov	eax, offset aHkey_performan ; "HKEY_PERFORMANCE_DATA"
		jz	short loc_4086EE
		cmp	edx, 80000005h
		mov	eax, offset aHkey_current_c ; "HKEY_CURRENT_CONFIG"
		jz	short loc_4086EE
		cmp	edx, 80000006h
		mov	eax, offset aHkey_dyn_data ; "HKEY_DYN_DATA"
		mov	edx, offset aInvalidRegistr ; "invalid registry	key"
		cmovnz	eax, edx

loc_4086EE:				; CODE XREF: sub_408687+11j
					; sub_408687+1Ej ...
		pop	ebp
		retn
sub_408687	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4086F0(LPSTR,	int, int, int)
sub_4086F0	proc near		; CODE XREF: sub_40164F+1D1Ap

lpString1	= dword	ptr -38h
lpString2	= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		xor	edx, edx
		mov	ebp, esp
		mov	ecx, 3
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+arg_C]
		div	ecx
		xor	edx, edx
		cmp	esi, eax
		jbe	short loc_408716
		lea	esi, [eax-1]
		mov	edx, 1

loc_408716:				; CODE XREF: sub_4086F0+1Cj
		lea	ecx, [esi-1]
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		mov	[ebp+var_1C], ecx
		jmp	short loc_40875A
; ---------------------------------------------------------------------------

loc_408723:				; CODE XREF: sub_4086F0+6Cj
		xor	eax, eax
		mov	ecx, 20h
		cmp	ebx, [ebp+var_1C]
		cmovnz	eax, ecx
		mov	ecx, [ebp+arg_8]
		mov	[esp+38h+var_2C], eax
		movzx	eax, byte ptr [ecx+ebx]
		inc	ebx
		mov	[esp+38h+lpString1], edi ; LPSTR
		add	edi, 3
		mov	[ebp+var_20], edx
		mov	[esp+38h+lpString2], offset a02xC ; "%02x%c"
		mov	[esp+38h+var_30], eax
		call	ds:wsprintfA
		mov	edx, [ebp+var_20]

loc_40875A:				; CODE XREF: sub_4086F0+31j
		cmp	ebx, esi
		jnz	short loc_408723
		test	edx, edx
		jz	short loc_408778
		mov	ecx, [ebp+arg_0]
		mov	[esp+38h+lpString2], offset a___ ; "..."
		mov	[esp+38h+lpString1], ecx ; lpString1
		call	ds:lstrcatA
		push	eax
		push	eax

loc_408778:				; CODE XREF: sub_4086F0+70j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4086F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_408780(LPCSTR, char)
sub_408780	proc near		; CODE XREF: sub_40164F+76p
					; sub_40164F+95p ...

lpString	= dword	ptr -18h
var_14		= dword	ptr -14h
arglist		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	[esp+18h+lpString], offset OutputString	; lpString
		lea	ebx, [ebp+arg_4]
		mov	ds:OutputString, 0
		call	ds:lstrlenA
		push	edx
		mov	edx, [ebp+arg_0]
		add	eax, offset OutputString
		mov	[esp+18h+arglist], ebx ; arglist
		mov	[esp+18h+lpString], eax	; LPSTR
		mov	[esp+18h+var_14], edx ;	LPCSTR
		call	ds:wvsprintfA
		sub	esp, 0Ch
		cmp	ds:dword_42A3D0, 0
		jz	short loc_4087D2
		mov	[esp+18h+lpString], offset OutputString	; lpOutputString
		call	ds:OutputDebugStringA
		push	eax

loc_4087D2:				; CODE XREF: sub_408780+42j
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_408780	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_4087D7(LPCSTR)
sub_4087D7	proc near		; CODE XREF: sub_40164F+3ECp
					; sub_40164F+492p ...

lpFileName	= dword	ptr -18h
lpFindFileData	= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+lpFindFileData], offset FindFileData ;	lpFindFileData
		mov	[esp+18h+lpFileName], eax ; lpFileName
		call	ds:FindFirstFileA
		push	edx
		push	edx
		xor	edx, edx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_408809
		mov	[esp+18h+lpFileName], eax ; hFindFile
		call	ds:FindClose
		mov	edx, offset FindFileData
		push	ecx

loc_408809:				; CODE XREF: sub_4087D7+21j
		mov	eax, edx
		leave
		retn	4
sub_4087D7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_40880F(LPCSTR)
sub_40880F	proc near		; CODE XREF: start+63Cp
					; sub_405D58+2D2p ...

lpString	= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+lpString], offset byte_427590 ; LPSTR
		mov	[esp+18h+var_14], eax ;	LPCSTR
		call	sub_408294
		push	ebx
		push	ebx
		mov	[esp+18h+lpString], offset byte_427590 ; LPCSTR
		call	sub_407F0F
		mov	ebx, eax
		xor	eax, eax
		test	ebx, ebx
		push	esi
		jz	short loc_4088BD
		mov	[esp+18h+lpString], ebx	; lpszStart
		call	sub_4082D2
		test	byte ptr ds:dword_428B90, 80h
		push	ecx
		jz	short loc_40887D
		mov	al, [ebx]
		cmp	al, 5Ch
		jz	short loc_4088BB
		test	al, al
		jnz	short loc_40887D
		jmp	short loc_4088BB
; ---------------------------------------------------------------------------

loc_40885F:				; CODE XREF: sub_40880F+8Dj
		call	sub_4087D7
		test	eax, eax
		push	edx
		jz	short loc_40886E
		test	byte ptr [eax],	10h
		jz	short loc_4088BB

loc_40886E:				; CODE XREF: sub_40880F+58j
		mov	[esp+18h+lpString], offset byte_427590 ; lpszStart
		call	sub_407EA3
		push	ecx
		jmp	short loc_408889
; ---------------------------------------------------------------------------

loc_40887D:				; CODE XREF: sub_40880F+42j
					; sub_40880F+4Cj
		mov	esi, ds:lstrlenA
		sub	ebx, offset byte_427590

loc_408889:				; CODE XREF: sub_40880F+6Cj
		mov	[esp+18h+lpString], offset byte_427590 ; lpString
		call	esi ; lstrlenA
		cmp	eax, ebx
		push	edx
		mov	[esp+18h+lpString], offset byte_427590 ; lpszStart
		jg	short loc_40885F
		call	sub_407E2D
		push	ecx
		mov	[esp+18h+lpString], offset byte_427590 ; lpFileName
		call	ds:GetFileAttributesA
		inc	eax
		setnz	al
		push	ebx
		movzx	eax, al
		jmp	short loc_4088BD
; ---------------------------------------------------------------------------

loc_4088BB:				; CODE XREF: sub_40880F+48j
					; sub_40880F+4Ej ...
		xor	eax, eax

loc_4088BD:				; CODE XREF: sub_40880F+30j
					; sub_40880F+AAj
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	4
sub_40880F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4088C6	proc near		; CODE XREF: start+48p	start+55p ...

lpBuffer	= dword	ptr -138h
uSize		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_127		= byte ptr -127h
Buffer		= byte ptr -126h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 134h
		lea	ebx, [ebp+Buffer]
		mov	[esp+138h+uSize], 104h ; uSize
		mov	[esp+138h+lpBuffer], ebx ; lpBuffer
		call	ds:GetSystemDirectoryA
		cmp	eax, 104h
		push	ecx
		push	ecx
		ja	short loc_408908
		test	eax, eax
		mov	edx, 1
		jz	short loc_40890F
		xor	edx, edx
		cmp	[ebp+eax+var_127], 5Ch
		setz	dl
		jmp	short loc_40890F
; ---------------------------------------------------------------------------

loc_408908:				; CODE XREF: sub_4088C6+28j
		xor	eax, eax
		mov	edx, 1

loc_40890F:				; CODE XREF: sub_4088C6+31j
					; sub_4088C6+40j
		mov	ecx, [ebp+arg_0]
		lea	ebx, [ebp+Buffer]
		add	edx, offset asc_40CA34 ; "\\"
		add	eax, ebx
		mov	[esp+138h+var_130], edx
		mov	[esp+138h+uSize], offset aSS_dll ; "%s%s.dll"
		mov	[esp+138h+var_12C], ecx
		mov	[esp+138h+lpBuffer], eax ; LPSTR
		call	ds:wsprintfA
		mov	[esp+138h+lpBuffer], ebx ; lpLibFileName
		call	ds:LoadLibraryA
		mov	ebx, [ebp+var_4]
		push	edx
		leave
		retn	4
sub_4088C6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40894A	proc near		; CODE XREF: sub_4014F3+C5p
					; sub_40164F+137Ap ...

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_0]
		mov	esi, lpModuleName[ebx*8]
		mov	[esp+18h+lpModuleName],	esi ; lpModuleName
		call	ds:GetModuleHandleA
		test	eax, eax
		push	edx
		jnz	short loc_408977
		mov	[esp+18h+lpModuleName],	esi
		call	sub_4088C6
		test	eax, eax
		push	esi
		jz	short loc_40898D

loc_408977:				; CODE XREF: sub_40894A+1Ej
		mov	edx, lpProcName[ebx*8]
		mov	[esp+18h+lpModuleName],	eax ; hModule
		mov	[esp+18h+lpProcName], edx ; lpProcName
		call	ds:GetProcAddress
		push	ebx
		push	ebx

loc_40898D:				; CODE XREF: sub_40894A+2Bj
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	4
sub_40894A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_408996(LPCSTR, LPCSTR lpszLongPath)
sub_408996	proc near		; CODE XREF: sub_40164F+4A3p
					; start+40Fp ...

hObject		= dword	ptr -58h
lpszShortPath	= dword	ptr -54h
cchBuffer	= dword	ptr -50h
lpNumberOfBytesRead= dword ptr -4Ch
lpOverlapped	= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
NumberOfBytesRead= dword ptr -1Ch
arg_0		= dword	ptr  8
lpszLongPath	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+lpszLongPath]
		mov	[esp+58h+hObject], 2
		call	sub_40894A
		test	eax, eax
		push	edx
		jz	short loc_4089D2
		mov	[esp+58h+cchBuffer], 5
		mov	[esp+58h+lpszShortPath], ebx
		mov	[esp+58h+hObject], esi
		call	eax
		sub	esp, 0Ch
		test	eax, eax
		jnz	loc_408C27

loc_4089D2:				; CODE XREF: sub_408996+1Ej
		test	ebx, ebx
		mov	ds:szShortPath,	4C554Eh
		jz	short loc_408A34
		mov	[esp+58h+cchBuffer], 1 ; DWORD
		mov	[esp+58h+lpszShortPath], 0 ; DWORD
		mov	[esp+58h+hObject], ebx ; LPCSTR
		call	sub_408059
		sub	esp, 0Ch
		mov	[esp+58h+hObject], eax ; hObject
		call	ds:CloseHandle
		push	eax
		mov	[esp+58h+cchBuffer], 400h ; cchBuffer
		mov	[esp+58h+lpszShortPath], offset	szShortPath ; lpszShortPath
		mov	[esp+58h+hObject], ebx ; lpszLongPath
		call	ds:GetShortPathNameA
		sub	esp, 0Ch
		cmp	eax, 400h
		jg	loc_408C2D
		test	eax, eax
		jz	loc_408C2D

loc_408A34:				; CODE XREF: sub_408996+48j
		mov	[esp+58h+cchBuffer], 400h ; cchBuffer
		mov	[esp+58h+lpszShortPath], offset	byte_427D90 ; lpszShortPath
		mov	[esp+58h+hObject], esi ; lpszLongPath
		call	ds:GetShortPathNameA
		sub	esp, 0Ch
		cmp	eax, 400h
		jg	loc_408C2D
		test	eax, eax
		jz	loc_408C2D
		mov	[esp+58h+lpNumberOfBytesRead], offset byte_427D90
		mov	[esp+58h+cchBuffer], offset szShortPath
		mov	[esp+58h+lpszShortPath], offset	aSS ; "%s=%s\r\n"
		mov	[esp+58h+hObject], offset byte_428190 ;	LPSTR
		call	ds:wsprintfA
		mov	[ebp+var_2C], eax
		mov	eax, ds:dword_428B48
		mov	eax, [eax+128h]
		mov	[esp+58h+hObject], offset byte_427D90 ;	LPSTR
		mov	[esp+58h+lpszShortPath], eax ; int
		call	sub_4083A6
		push	edi
		push	edi
		mov	[esp+58h+cchBuffer], 4 ; DWORD
		mov	[esp+58h+lpszShortPath], 0C0000000h ; DWORD
		mov	[esp+58h+hObject], offset byte_427D90 ;	LPCSTR
		call	sub_408059
		sub	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		mov	edi, eax
		jz	loc_408C27
		mov	[esp+58h+lpszShortPath], 0 ; lpFileSizeHigh
		mov	[esp+58h+hObject], eax ; hFile
		call	ds:GetFileSize
		mov	edx, [ebp+var_2C]
		push	ecx
		mov	ebx, eax
		push	ecx
		lea	eax, [eax+edx+0Ah]
		mov	[esp+58h+lpszShortPath], eax ; dwBytes
		mov	[esp+58h+hObject], 40h ; uFlags
		call	ds:GlobalAlloc
		test	eax, eax
		push	esi
		push	esi
		mov	esi, eax
		jz	loc_408C1D
		lea	eax, [ebp+NumberOfBytesRead]
		mov	[esp+58h+lpOverlapped],	0 ; lpOverlapped
		mov	[esp+58h+lpNumberOfBytesRead], eax ; lpNumberOfBytesRead
		mov	[esp+58h+cchBuffer], ebx ; nNumberOfBytesToRead
		mov	[esp+58h+lpszShortPath], esi ; lpBuffer
		mov	[esp+58h+hObject], edi ; hFile
		call	ds:ReadFile
		sub	esp, 14h
		test	eax, eax
		jz	loc_408C1D
		cmp	ebx, [ebp+NumberOfBytesRead]
		jnz	loc_408C1D
		mov	[esp+58h+lpszShortPath], offset	aRename	; "[Rename]\r\n"
		mov	[esp+58h+hObject], esi ; lpString1
		call	sub_407F91
		test	eax, eax
		push	edx
		push	edx
		jnz	short loc_408B71
		lea	eax, [esi+ebx]
		add	ebx, 0Ah
		mov	[esp+58h+lpszShortPath], offset	aRename	; "[Rename]\r\n"
		mov	[esp+58h+hObject], eax ; LPSTR
		call	sub_408294
		push	ecx
		push	ecx
		mov	ecx, ebx
		jmp	short loc_408BAD
; ---------------------------------------------------------------------------

loc_408B71:				; CODE XREF: sub_408996+1BDj
		add	eax, 0Ah
		mov	[esp+58h+lpszShortPath], offset	asc_40CAEA ; "\n["
		mov	[esp+58h+hObject], eax ; lpString1
		call	sub_407F91
		mov	ecx, ebx
		push	edx
		test	eax, eax
		push	edx
		jz	short loc_408BAD
		lea	ecx, [eax+1]
		lea	edx, [esi+ebx]
		mov	[ebp+var_30], ecx
		mov	[ebp+var_34], edx
		jmp	short loc_408BA2
; ---------------------------------------------------------------------------

loc_408B9A:				; CODE XREF: sub_408996+210j
		mov	cl, [eax]
		mov	edx, [ebp+var_2C]
		mov	[eax+edx], cl

loc_408BA2:				; CODE XREF: sub_408996+202j
		inc	eax
		cmp	eax, [ebp+var_34]
		jb	short loc_408B9A
		mov	ecx, [ebp+var_30]
		sub	ecx, esi

loc_408BAD:				; CODE XREF: sub_408996+1D9j
					; sub_408996+1F4j
		mov	eax, [ebp+var_2C]
		add	ecx, esi
		mov	[esp+58h+hObject], ecx
		mov	[esp+58h+lpszShortPath], offset	byte_428190
		mov	[esp+58h+cchBuffer], eax
		call	sub_407FFE
		add	ebx, [ebp+var_2C]
		sub	esp, 0Ch
		mov	[esp+58h+lpNumberOfBytesRead], 0 ; dwMoveMethod
		mov	[esp+58h+cchBuffer], 0 ; lpDistanceToMoveHigh
		mov	[esp+58h+lpszShortPath], 0 ; lDistanceToMove
		mov	[esp+58h+hObject], edi ; hFile
		call	ds:SetFilePointer
		lea	eax, [ebp+NumberOfBytesRead]
		sub	esp, 10h
		mov	[esp+58h+cchBuffer], ebx ; nNumberOfBytesToWrite
		mov	[esp+58h+lpOverlapped],	0 ; lpOverlapped
		mov	[esp+58h+lpNumberOfBytesRead], eax ; lpNumberOfBytesWritten
		mov	[esp+58h+lpszShortPath], esi ; lpBuffer
		mov	[esp+58h+hObject], edi ; hFile
		call	ds:WriteFile
		sub	esp, 14h
		mov	[esp+58h+hObject], esi ; hMem
		call	ds:GlobalFree
		push	ebx

loc_408C1D:				; CODE XREF: sub_408996+16Fj
					; sub_408996+19Aj ...
		mov	[esp+58h+hObject], edi ; hObject
		call	ds:CloseHandle
		push	ecx

loc_408C27:				; CODE XREF: sub_408996+36j
					; sub_408996+136j
		inc	ds:dword_428B18

loc_408C2D:				; CODE XREF: sub_408996+90j
					; sub_408996+98j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_408996	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_408C37(LPCSTR lpString, int)
sub_408C37	proc near		; CODE XREF: sub_40164F+96Bp
					; sub_40164F+9FAp ...

lpFileName	= dword	ptr -178h
lpString2	= dword	ptr -174h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
FindFileData	= _WIN32_FIND_DATAA ptr	-158h
lpString	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 16Ch
		mov	ebx, [ebp+lpString]
		mov	esi, [ebp+arg_4]
		mov	[esp+178h+lpFileName], ebx ; LPCSTR
		call	sub_40880F
		test	esi, 8
		mov	[ebp+var_15C], eax
		push	ecx
		jz	short loc_408C85
		mov	esi, ds:dword_428B10
		mov	[esp+178h+lpFileName], ebx ; lpFileName
		call	ds:DeleteFileA
		test	eax, eax
		setz	al
		movzx	eax, al
		add	esi, eax
		push	edx
		mov	ds:dword_428B10, esi
		jmp	loc_408F45
; ---------------------------------------------------------------------------

loc_408C85:				; CODE XREF: sub_408C37+27j
		mov	eax, esi
		and	eax, 1
		mov	[ebp+var_160], eax
		jz	short loc_408CAB
		cmp	[ebp+var_15C], 0
		jz	loc_408E99
		test	esi, 2
		jz	loc_408EA9

loc_408CAB:				; CODE XREF: sub_408C37+59j
		mov	[esp+178h+lpString2], ebx ; LPCSTR
		mov	[esp+178h+lpFileName], offset byte_427190 ; LPSTR
		call	sub_408294
		cmp	[ebp+var_160], 0
		push	eax
		push	eax
		jz	short loc_408CDF
		mov	[esp+178h+lpString2], offset a_	; "\\*.*"
		mov	[esp+178h+lpFileName], offset byte_427190 ; lpString1
		call	ds:lstrcatA
		push	eax
		push	eax
		jmp	short loc_408CE8
; ---------------------------------------------------------------------------

loc_408CDF:				; CODE XREF: sub_408C37+8Dj
		mov	[esp+178h+lpFileName], ebx ; lpszStart
		call	sub_407EA3
		push	eax

loc_408CE8:				; CODE XREF: sub_408C37+A6j
		cmp	byte ptr [ebx],	0
		jnz	short loc_408CF6
		cmp	ds:byte_427190,	5Ch
		jnz	short loc_408D09

loc_408CF6:				; CODE XREF: sub_408C37+B4j
		mov	[esp+178h+lpString2], offset asc_40CA34	; "\\"
		mov	[esp+178h+lpFileName], ebx ; lpString1
		call	ds:lstrcatA
		push	eax
		push	eax

loc_408D09:				; CODE XREF: sub_408C37+BDj
		mov	[esp+178h+lpFileName], ebx ; lpString
		call	ds:lstrlenA
		add	eax, ebx
		push	ecx
		mov	[ebp+var_164], eax
		lea	eax, [ebp+FindFileData]
		mov	[esp+178h+lpString2], eax ; lpFindFileData
		mov	[esp+178h+lpFileName], offset byte_427190 ; lpFileName
		call	ds:FindFirstFileA
		cmp	eax, 0FFFFFFFFh
		push	edi
		push	edi
		mov	edi, eax
		jz	loc_408E79

loc_408D3F:				; CODE XREF: sub_408C37+232j
		lea	eax, [ebp+FindFileData.cFileName]
		mov	[esp+178h+lpString2], 3Fh ; char
		mov	[esp+178h+lpFileName], eax ; LPCSTR
		call	sub_407E73
		push	edx
		push	edx
		cmp	byte ptr [eax],	0
		jz	short loc_408D66
		mov	dl, [ebp+FindFileData.cAlternateFileName]
		lea	eax, [ebp+FindFileData.cAlternateFileName]
		test	dl, dl
		jnz	short loc_408D72

loc_408D66:				; CODE XREF: sub_408C37+123j
		mov	dl, [ebp+FindFileData.cFileName]
		lea	eax, [ebp+FindFileData.cFileName]

loc_408D72:				; CODE XREF: sub_408C37+12Dj
		cmp	dl, 2Eh
		jnz	short loc_408D91
		mov	dl, [eax+1]
		test	dl, dl
		jz	loc_408E52
		cmp	dl, 2Eh
		jnz	short loc_408D91
		cmp	byte ptr [eax+2], 0
		jz	loc_408E52

loc_408D91:				; CODE XREF: sub_408C37+13Ej
					; sub_408C37+14Ej
		mov	[esp+178h+lpString2], eax ; LPCSTR
		mov	eax, [ebp+var_164]
		mov	[esp+178h+lpFileName], eax ; LPSTR
		call	sub_408294
		test	byte ptr [ebp+FindFileData.dwFileAttributes], 10h
		push	ecx
		push	ecx
		jz	short loc_408DCD
		mov	eax, esi
		and	eax, 3
		cmp	eax, 3
		jnz	loc_408E52
		mov	[esp+178h+lpString2], esi ; int
		mov	[esp+178h+lpFileName], ebx ; lpString
		call	sub_408C37
		jmp	loc_408E50
; ---------------------------------------------------------------------------

loc_408DCD:				; CODE XREF: sub_408C37+175j
		mov	[esp+178h+lpString2], ebx ; char
		mov	[esp+178h+lpFileName], offset aDeleteDeletefi ;	"Delete: DeleteFile(\"%s\")"
		call	sub_408780
		mov	[esp+178h+lpFileName], ebx ; LPCSTR
		call	sub_408027
		push	eax
		mov	[esp+178h+lpFileName], ebx ; lpFileName
		call	ds:DeleteFileA
		test	eax, eax
		push	edx
		mov	[esp+178h+lpString2], ebx ; char
		jnz	short loc_408E44
		test	esi, 4
		jz	short loc_408E30
		mov	[esp+178h+lpFileName], offset aDeleteDelete_0 ;	"Delete: DeleteFile on Reboot(\"%s\")"
		call	sub_408780
		mov	[esp+178h+lpString2], ebx
		mov	[esp+178h+lpFileName], 0FFFFFFF1h
		call	sub_407538
		push	eax
		push	eax
		mov	[esp+178h+lpFileName], ebx ; LPCSTR
		mov	[esp+178h+lpString2], 0	; lpszLongPath
		call	sub_408996
		jmp	short loc_408E50
; ---------------------------------------------------------------------------

loc_408E30:				; CODE XREF: sub_408C37+1C7j
		mov	[esp+178h+lpFileName], offset aDeleteDelete_1 ;	"Delete: DeleteFile failed(\"%s\")"
		call	sub_408780
		inc	ds:dword_428B10
		jmp	short loc_408E52
; ---------------------------------------------------------------------------

loc_408E44:				; CODE XREF: sub_408C37+1BFj
		mov	[esp+178h+lpFileName], 0FFFFFFF2h
		call	sub_407538

loc_408E50:				; CODE XREF: sub_408C37+191j
					; sub_408C37+1F7j
		push	ecx
		push	ecx

loc_408E52:				; CODE XREF: sub_408C37+145j
					; sub_408C37+154j ...
		lea	eax, [ebp+FindFileData]
		mov	[esp+178h+lpString2], eax ; lpFindFileData
		mov	[esp+178h+lpFileName], edi ; hFindFile
		call	ds:FindNextFileA
		test	eax, eax
		push	edx
		push	edx
		jnz	loc_408D3F
		mov	[esp+178h+lpFileName], edi ; hFindFile
		call	ds:FindClose
		push	edi

loc_408E79:				; CODE XREF: sub_408C37+102j
		cmp	[ebp+var_160], 0
		jz	loc_408F45
		mov	eax, [ebp+var_164]
		cmp	[ebp+var_15C], 0
		mov	byte ptr [eax-1], 0
		jnz	short loc_408EA9

loc_408E99:				; CODE XREF: sub_408C37+62j
		mov	[esp+178h+lpString2], ebx
		mov	[esp+178h+lpFileName], offset aRmdirRemovedir ;	"RMDir:	RemoveDirectory	invalid	input(\""...
		jmp	loc_408F2A
; ---------------------------------------------------------------------------

loc_408EA9:				; CODE XREF: sub_408C37+6Ej
					; sub_408C37+260j
		mov	[esp+178h+lpFileName], ebx ; LPCSTR
		call	sub_4087D7
		test	eax, eax
		push	ecx
		jz	loc_408F45
		mov	[esp+178h+lpFileName], ebx ; lpszStart
		call	sub_407E2D
		push	edi
		mov	[esp+178h+lpString2], ebx ; char
		mov	[esp+178h+lpFileName], offset aRmdirRemoved_0 ;	"RMDir:	RemoveDirectory(\"%s\")"
		call	sub_408780
		mov	[esp+178h+lpFileName], ebx ; LPCSTR
		call	sub_408027
		push	eax
		mov	[esp+178h+lpFileName], ebx ; lpPathName
		call	ds:RemoveDirectoryA
		test	eax, eax
		push	edx
		mov	[esp+178h+lpString2], ebx ; char
		jnz	short loc_408F37
		and	esi, 4
		jz	short loc_408F23
		mov	[esp+178h+lpFileName], offset aRmdirRemoved_1 ;	"RMDir:	RemoveDirectory	on Reboot(\"%s\""...
		call	sub_408780
		mov	[esp+178h+lpString2], ebx
		mov	[esp+178h+lpFileName], 0FFFFFFF1h
		call	sub_407538
		push	esi
		push	esi
		mov	[esp+178h+lpFileName], ebx ; LPCSTR
		mov	[esp+178h+lpString2], 0	; lpszLongPath
		call	sub_408996
		jmp	short loc_408F43
; ---------------------------------------------------------------------------

loc_408F23:				; CODE XREF: sub_408C37+2BAj
		mov	[esp+178h+lpFileName], offset aRmdirRemoved_2 ;	"RMDir:	RemoveDirectory	failed(\"%s\")"

loc_408F2A:				; CODE XREF: sub_408C37+26Dj
		call	sub_408780
		inc	ds:dword_428B10
		jmp	short loc_408F45
; ---------------------------------------------------------------------------

loc_408F37:				; CODE XREF: sub_408C37+2B5j
		mov	[esp+178h+lpFileName], 0FFFFFFE5h
		call	sub_407538

loc_408F43:				; CODE XREF: sub_408C37+2EAj
		push	ecx
		push	ecx

loc_408F45:				; CODE XREF: sub_408C37+49j
					; sub_408C37+249j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	8
sub_408C37	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_408F4F	proc near		; CODE XREF: start:loc_404B7Cp

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_18], 9
		call	sub_40894A
		push	edx
		xor	edx, edx
		test	eax, eax
		jz	short loc_408F71
		call	eax
		xor	edx, edx
		test	eax, eax
		setnz	dl

loc_408F71:				; CODE XREF: sub_408F4F+17j
		mov	eax, edx
		leave
		retn
sub_408F4F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_408F75(UINT)
sub_408F75	proc near		; CODE XREF: sub_40164F+127Ep
					; sub_403F5A+3Fp

lpMsg		= dword	ptr -58h
hWnd		= dword	ptr -54h
wMsgFilterMin	= dword	ptr -50h
wMsgFilterMax	= dword	ptr -4Ch
wRemoveMsg	= dword	ptr -48h
Msg		= MSG ptr -34h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [ebp+arg_0]
		lea	ebx, [ebp+Msg]
		mov	edi, ds:PeekMessageA
		jmp	short loc_408F96
; ---------------------------------------------------------------------------

loc_408F8C:				; CODE XREF: sub_408F75+43j
		mov	[esp+58h+lpMsg], ebx ; lpMsg
		call	ds:DispatchMessageA
		push	ecx

loc_408F96:				; CODE XREF: sub_408F75+15j
		mov	[esp+58h+wRemoveMsg], 1	; wRemoveMsg
		mov	[esp+58h+wMsgFilterMax], esi ; wMsgFilterMax
		mov	[esp+58h+wMsgFilterMin], esi ; wMsgFilterMin
		mov	[esp+58h+hWnd],	0 ; hWnd
		mov	[esp+58h+lpMsg], ebx ; lpMsg
		call	edi ; PeekMessageA
		sub	esp, 14h
		test	eax, eax
		jnz	short loc_408F8C
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
sub_408F75	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_408FC4	proc near		; CODE XREF: sub_404467+1EAp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		cmp	ds:dword_4286D4, 0
		mov	ebp, esp
		push	edi
		mov	ecx, [ebp+arg_4]
		push	esi
		push	ebx
		mov	ebx, [ebp+arg_8]
		jnz	short loc_409005
		xor	edx, edx

loc_408FDB:				; CODE XREF: sub_408FC4+3Fj
		mov	eax, edx
		mov	esi, 8

loc_408FE2:				; CODE XREF: sub_408FC4+2Fj
		mov	edi, eax
		and	eax, 1
		neg	eax
		shr	edi, 1
		and	eax, 0EDB88320h
		xor	eax, edi
		dec	esi
		jnz	short loc_408FE2
		mov	ds:dword_4286D0[edx*4],	eax
		inc	edx
		cmp	edx, 100h
		jnz	short loc_408FDB

loc_409005:				; CODE XREF: sub_408FC4+13j
		mov	eax, [ebp+arg_0]
		not	eax
		jmp	short loc_40901F
; ---------------------------------------------------------------------------

loc_40900C:				; CODE XREF: sub_408FC4+5Dj
		mov	dl, [ecx]
		dec	ebx
		inc	ecx
		xor	edx, eax
		movzx	edx, dl
		shr	eax, 8
		xor	eax, ds:dword_4286D0[edx*4]

loc_40901F:				; CODE XREF: sub_408FC4+46j
		test	ebx, ebx
		jnz	short loc_40900C
		pop	ebx
		not	eax
		pop	esi
		pop	edi
		pop	ebp
		retn	0Ch
sub_408FC4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40902C	proc near		; CODE XREF: sub_404467+28Cp
		push	ebp
		mov	eax, 80h
		mov	ebp, esp

loc_409034:				; CODE XREF: sub_40902C+Fj
		dec	eax
		test	eax, eax
		mov	byte ptr [ecx+eax], 0
		jnz	short loc_409034
		mov	dword ptr [ecx+68h], 1
		mov	dword ptr [ecx+64h], 1
		mov	dword ptr [ecx+60h], 1
		mov	dword ptr [ecx+5Ch], 1
		mov	dword ptr [ecx+78h], 0FFFFFFFFh
		pop	ebp
		retn
sub_40902C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_409062	proc near		; CODE XREF: sub_4040C3+115p

hMem		= dword	ptr -148h
dwBytes		= dword	ptr -144h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F2		= byte ptr -0F2h
var_F1		= byte ptr -0F1h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A0		= byte ptr -0A0h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, ecx
		sub	esp, 13Ch
		mov	ecx, 22h
		lea	edi, [ebp+var_A0]
		mov	esi, ebx
		rep movsd
		mov	eax, [ebx+4]
		mov	ecx, [ebx+8]
		mov	edx, [ebx]
		mov	[ebp+var_EC], eax
		mov	eax, [ebx+0Ch]
		mov	[ebp+var_11C], ecx
		mov	ecx, [ebx+10h]
		mov	[ebp+var_114], eax
		mov	eax, [ebx+14h]
		mov	[ebp+var_128], ecx
		mov	ecx, [ebx+18h]
		mov	[ebp+var_E0], eax
		mov	eax, [ebx+1Ch]
		mov	[ebp+var_B8], ecx
		mov	ecx, [ebx+20h]
		mov	[ebp+var_B4], eax
		mov	eax, [ebx+24h]
		mov	[ebp+var_100], ecx
		mov	ecx, [ebx+28h]
		mov	[ebp+var_104], eax
		mov	al, [ebx+2Ch]
		mov	[ebp+var_FC], ecx
		mov	cl, [ebx+2Dh]
		mov	[ebp+var_F1], al
		mov	eax, [ebx+30h]
		mov	[ebp+var_F2], cl
		mov	[ebp+var_CC], eax
		mov	ecx, [ebx+38h]
		mov	eax, [ebx+34h]
		mov	[ebp+var_D8], ecx
		mov	ecx, [ebx+40h]
		mov	[ebp+var_BC], eax
		mov	eax, [ebx+3Ch]
		mov	[ebp+var_C4], ecx
		mov	ecx, [ebx+48h]
		mov	[ebp+var_110], eax
		mov	eax, [ebx+44h]
		mov	[ebp+var_B0], ecx
		mov	ecx, [ebx+4Ch]
		mov	[ebp+var_AC], eax
		mov	eax, [ebx+50h]
		mov	[ebp+var_118], ecx
		mov	ecx, [ebx+54h]
		mov	[ebp+var_C0], eax
		mov	eax, [ebx+58h]
		mov	[ebp+var_120], ecx
		mov	ecx, [ebx+5Ch]
		mov	[ebp+var_E4], eax
		mov	eax, [ebx+60h]
		mov	[ebp+var_C8], ecx
		mov	ecx, [ebx+64h]
		mov	[ebp+var_108], eax
		mov	eax, [ebx+68h]
		mov	[ebp+var_10C], ecx
		mov	ecx, [ebx+6Ch]
		mov	[ebp+var_124], eax
		mov	eax, [ebx+70h]
		mov	[ebp+var_12C], ecx
		mov	ecx, [ebx+74h]
		mov	[ebp+var_130], eax
		mov	[ebp+var_F0], ecx
		mov	eax, [ebx+78h]
		cmp	[ebp+var_E4], 0FFFFFFFFh
		mov	[ebp+var_D0], eax
		mov	eax, [ebx+7Ch]
		mov	[ebp+var_D4], eax
		mov	eax, [ebx+80h]
		mov	[ebp+var_F8], eax
		mov	eax, [ebx+84h]
		mov	[ebp+var_DC], eax
		mov	eax, 1
		jz	loc_40A2F3
		mov	[ebp+var_E8], ebx
		mov	edi, [ebp+var_D0]
		mov	esi, [ebp+var_D4]
		mov	ebx, [ebp+var_BC]

loc_4091E3:				; CODE XREF: sub_409062+D80j
					; sub_409062+DB9j ...
		cmp	edx, 1Ch	; switch 29 cases
		ja	loc_40A2F0	; jumptable 00409202 default case
		mov	ecx, [ebp+var_118]
		mov	[ebp+var_D4], 8
		sub	[ebp+var_D4], ecx

loc_409202:				; CODE XREF: sub_409062+D1Cj
		jmp	ds:off_40CDBC[edx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_409209:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		mov	ebx, [ebp+var_CC] ; jumptable 00409202 case 17
		jmp	loc_409A67
; ---------------------------------------------------------------------------

loc_409214:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 0
		jz	loc_40A18B
		mov	edx, [ebp+var_B8]
		mov	al, [edx]
		cmp	al, 0E1h
		ja	loc_40A2F0	; jumptable 00409202 default case
		mov	dl, 2Dh
		movzx	eax, al
		div	dl
		mov	dl, 9
		movzx	ecx, al
		mov	byte ptr [ebp+var_BC], al
		mov	byte ptr [ebp+var_C4], ah
		movzx	eax, byte ptr [ebp+var_C4]
		div	dl
		mov	edx, 300h
		movzx	eax, ah
		movzx	eax, al
		add	ecx, eax
		mov	[ebp+var_118], eax
		mov	eax, [ebp+var_128]
		shl	edx, cl
		add	edx, 736h
		lea	ecx, [edx+edx]
		mov	[ebp+var_B0], ecx
		cmp	ecx, eax
		jz	short loc_4092F3
		cmp	[ebp+var_DC], 0
		jz	short loc_4092A5
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_134], edx
		mov	[esp+148h+hMem], eax ; hMem
		call	ds:GlobalFree
		mov	edx, [ebp+var_134]
		push	ecx

loc_4092A5:				; CODE XREF: sub_409062+225j
		mov	ecx, [ebp+var_B0]
		mov	[ebp+var_134], edx
		mov	[esp+148h+hMem], 40h ; uFlags
		mov	[esp+148h+dwBytes], ecx	; dwBytes
		call	ds:GlobalAlloc
		test	eax, eax
		push	edx
		push	edx
		mov	edx, [ebp+var_134]
		mov	[ebp+var_DC], eax
		jz	loc_40A2F0	; jumptable 00409202 default case
		mov	ecx, [ebp+var_B0]
		mov	[ebp+var_128], ecx
		jmp	short loc_4092F3
; ---------------------------------------------------------------------------

loc_4092E6:				; CODE XREF: sub_409062+293j
		mov	eax, [ebp+var_DC]
		dec	edx
		mov	word ptr [eax+edx*2], 400h

loc_4092F3:				; CODE XREF: sub_409062+21Cj
					; sub_409062+282j
		test	edx, edx
		jnz	short loc_4092E6
		mov	cl, byte ptr [ebp+var_BC]
		mov	dl, 1
		mov	eax, edx
		dec	[ebp+var_B4]
		inc	[ebp+var_B8]
		shl	eax, cl
		mov	cl, 9
		dec	eax
		mov	[ebp+var_12C], eax
		movzx	eax, byte ptr [ebp+var_C4]
		mov	[ebp+var_B0], 0
		mov	[ebp+var_C4], 0
		div	cl
		mov	cl, al
		shl	edx, cl
		mov	eax, edx
		dec	eax
		mov	[ebp+var_130], eax

loc_409342:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		mov	edx, [ebp+var_C4] ; jumptable 00409202 case 1
		lea	ecx, ds:0[edx*8]

loc_40934F:				; CODE XREF: sub_409062+324j
		cmp	[ebp+var_B4], 0
		mov	[ebp+var_C4], edx
		jz	loc_409FD2
		mov	eax, [ebp+var_B8]
		inc	edx
		dec	[ebp+var_B4]
		inc	[ebp+var_B8]
		movzx	eax, byte ptr [eax]
		shl	eax, cl
		add	ecx, 8
		or	[ebp+var_B0], eax
		cmp	edx, 3
		jle	short loc_40934F
		mov	edx, [ebp+var_E0]
		cmp	[ebp+var_B0], edx
		jz	short loc_4093E2
		cmp	[ebp+var_F8], 0
		jz	short loc_4093AF
		mov	eax, [ebp+var_F8]
		mov	[esp+148h+hMem], eax ; hMem
		call	ds:GlobalFree
		push	ecx

loc_4093AF:				; CODE XREF: sub_409062+33Bj
		mov	ecx, [ebp+var_B0]
		mov	[esp+148h+hMem], 40h ; uFlags
		mov	[esp+148h+dwBytes], ecx	; dwBytes
		call	ds:GlobalAlloc
		test	eax, eax
		push	edx
		push	edx
		mov	[ebp+var_F8], eax
		jz	loc_40A2F0	; jumptable 00409202 default case
		mov	ecx, [ebp+var_B0]
		mov	[ebp+var_E0], ecx

loc_4093E2:				; CODE XREF: sub_409062+332j
		mov	eax, [ebp+var_E0]
		mov	edx, [ebp+var_F8]
		mov	byte ptr [edx+eax-1], 0
		mov	eax, 5
		jmp	short loc_40942A
; ---------------------------------------------------------------------------

loc_4093FA:				; CODE XREF: sub_409062:loc_409202j
					; sub_409062+3D3j
					; DATA XREF: ...
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 3
		jz	loc_409FF4
		mov	ecx, [ebp+var_B8]
		mov	eax, esi
		shl	eax, 8
		dec	[ebp+var_B4]
		movzx	esi, byte ptr [ecx]
		inc	ecx
		mov	[ebp+var_B8], ecx
		or	esi, eax
		mov	eax, [ebp+var_C4]

loc_40942A:				; CODE XREF: sub_409062+396j
		lea	ecx, [eax-1]
		test	eax, eax
		mov	[ebp+var_C4], ecx
		jnz	short loc_4093FA ; jumptable 00409202 case 3

loc_409437:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		mov	eax, [ebp+var_12C] ; jumptable 00409202	case 2
		and	eax, [ebp+var_FC]
		mov	edx, [ebp+var_DC]
		mov	[ebp+var_EC], 6
		mov	[ebp+var_110], eax
		mov	eax, [ebp+var_C0]
		shl	eax, 4
		add	eax, [ebp+var_110]
		lea	ebx, [edx+eax*2]
		jmp	loc_409D83	; jumptable 00409202 case 4
; ---------------------------------------------------------------------------

loc_409470:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B0], 0	; jumptable 00409202 case 6
		jnz	loc_4097EB
		mov	cl, byte ptr [ebp+var_D4]
		movzx	eax, [ebp+var_F1]
		mov	edx, [ebp+var_130]
		and	edx, [ebp+var_FC]
		sar	eax, cl
		mov	cl, byte ptr [ebp+var_118]
		shl	edx, cl
		add	eax, edx
		mov	edx, [ebp+var_DC]
		imul	eax, 600h
		cmp	[ebp+var_C0], 3
		lea	eax, [edx+eax+0E6Ch]
		mov	[ebp+var_CC], eax
		jle	short loc_4094E8
		mov	eax, [ebp+var_C0]
		mov	edx, [ebp+var_C0]
		sub	eax, 3
		sub	edx, 6
		cmp	[ebp+var_C0], 9
		cmovg	eax, edx
		mov	[ebp+var_C0], eax
		jmp	short loc_4094F2
; ---------------------------------------------------------------------------

loc_4094E8:				; CODE XREF: sub_409062+460j
		mov	[ebp+var_C0], 0

loc_4094F2:				; CODE XREF: sub_409062+484j
		cmp	[ebp+var_120], 0
		mov	[ebp+var_AC], 1
		jz	loc_4096EB
		mov	eax, [ebp+var_F0]
		mov	edx, [ebp+var_E0]
		sub	eax, [ebp+var_C8]
		mov	ecx, [ebp+var_F8]
		add	edx, eax
		cmp	eax, [ebp+var_E0]
		cmovnb	eax, edx
		mov	al, [ecx+eax]
		mov	[ebp+var_F2], al

loc_409535:				; CODE XREF: sub_409062+668j
		mov	al, [ebp+var_F2]
		mov	edx, [ebp+var_CC]
		shl	[ebp+var_F2], 1
		shr	al, 7
		mov	ecx, eax
		and	ecx, 1
		mov	eax, ecx
		inc	eax
		shl	eax, 8
		add	eax, [ebp+var_AC]
		mov	[ebp+var_C4], ecx
		lea	ebx, [edx+eax*2]
		mov	cx, [ebx]
		movzx	eax, cx
		mov	[ebp+var_B0], eax
		mov	eax, edi
		shr	eax, 0Bh
		imul	eax, [ebp+var_B0]
		cmp	esi, eax
		jnb	short loc_4095A7
		mov	edx, 800h
		mov	edi, eax
		sub	edx, [ebp+var_B0]
		shl	[ebp+var_AC], 1
		sar	edx, 5
		add	edx, ecx
		mov	[ebx], dx
		mov	[ebp+var_B0], 0
		jmp	short loc_4095D1
; ---------------------------------------------------------------------------

loc_4095A7:				; CODE XREF: sub_409062+51Cj
		mov	edx, [ebp+var_AC]
		sub	edi, eax
		sub	esi, eax
		mov	eax, ecx
		shr	ax, 5
		sub	cx, ax
		lea	edx, [edx+edx+1]
		mov	[ebx], cx
		mov	[ebp+var_AC], edx
		mov	[ebp+var_B0], 1

loc_4095D1:				; CODE XREF: sub_409062+543j
		cmp	edi, 0FFFFFFh
		ja	short loc_409606

loc_4095D9:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 13
		jz	loc_40A016
		mov	ecx, [ebp+var_B8]
		mov	eax, esi
		dec	[ebp+var_B4]
		shl	eax, 8
		shl	edi, 8
		movzx	esi, byte ptr [ecx]
		inc	ecx
		mov	[ebp+var_B8], ecx
		or	esi, eax

loc_409606:				; CODE XREF: sub_409062+575j
		mov	ecx, [ebp+var_B0]
		cmp	[ebp+var_C4], ecx
		jnz	loc_4096A6
		jmp	loc_4096C0
; ---------------------------------------------------------------------------

loc_40961D:				; CODE XREF: sub_409062+650j
		mov	ebx, [ebp+var_CC]
		add	ecx, ecx
		add	ebx, ecx
		mov	ax, [ebx]
		movzx	edx, ax
		mov	[ebp+var_AC], edx
		mov	edx, edi
		shr	edx, 0Bh
		imul	edx, [ebp+var_AC]
		cmp	esi, edx
		jnb	short loc_40965A
		mov	edi, 800h
		sub	edi, [ebp+var_AC]
		sar	edi, 5
		add	eax, edi
		mov	edi, edx
		mov	[ebx], ax
		jmp	short loc_40966B
; ---------------------------------------------------------------------------

loc_40965A:				; CODE XREF: sub_409062+5DFj
		sub	edi, edx
		sub	esi, edx
		mov	edx, eax
		inc	ecx
		shr	dx, 5
		sub	ax, dx
		mov	[ebx], ax

loc_40966B:				; CODE XREF: sub_409062+5F6j
		cmp	edi, 0FFFFFFh
		ja	short loc_4096AC
		mov	[ebp+var_AC], ecx

loc_409679:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 14
		jz	loc_40A038
		mov	ecx, [ebp+var_B8]
		mov	eax, esi
		dec	[ebp+var_B4]
		shl	eax, 8
		shl	edi, 8
		movzx	esi, byte ptr [ecx]
		inc	ecx
		mov	[ebp+var_B8], ecx
		or	esi, eax

loc_4096A6:				; CODE XREF: sub_409062+5B0j
		mov	ecx, [ebp+var_AC]

loc_4096AC:				; CODE XREF: sub_409062+60Fj
		cmp	ecx, 0FFh
		jle	loc_40961D
		mov	[ebp+var_AC], ecx
		jmp	short loc_4096D0
; ---------------------------------------------------------------------------

loc_4096C0:				; CODE XREF: sub_409062+5B6j
		cmp	[ebp+var_AC], 0FFh
		jle	loc_409535

loc_4096D0:				; CODE XREF: sub_409062+65Cj
		mov	al, byte ptr [ebp+var_AC]
		mov	[ebp+var_120], 0
		mov	[ebp+var_F1], al
		jmp	loc_40979E	; jumptable 00409202 case 26
; ---------------------------------------------------------------------------

loc_4096EB:				; CODE XREF: sub_409062+4A1j
					; sub_409062+72Aj
		mov	edx, [ebp+var_AC]
		mov	eax, edi
		mov	ebx, [ebp+var_CC]
		shr	eax, 0Bh
		add	edx, edx
		add	ebx, edx
		mov	[ebp+var_AC], edx
		mov	dx, [ebx]
		movzx	ecx, dx
		imul	eax, ecx
		mov	[ebp+var_BC], ecx
		cmp	esi, eax
		jnb	short loc_409730
		mov	ecx, 800h
		mov	edi, eax
		sub	ecx, [ebp+var_BC]
		sar	ecx, 5
		add	edx, ecx
		mov	[ebx], dx
		jmp	short loc_40974D
; ---------------------------------------------------------------------------

loc_409730:				; CODE XREF: sub_409062+6B5j
		sub	edi, eax
		sub	esi, eax
		mov	eax, edx
		shr	ax, 5
		sub	dx, ax
		mov	eax, [ebp+var_AC]
		mov	[ebx], dx
		inc	eax
		mov	[ebp+var_AC], eax

loc_40974D:				; CODE XREF: sub_409062+6CCj
		cmp	edi, 0FFFFFFh
		ja	short loc_409782

loc_409755:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 15
		jz	loc_40A05A
		mov	edx, [ebp+var_B8]
		mov	eax, esi
		dec	[ebp+var_B4]
		shl	eax, 8
		shl	edi, 8
		movzx	esi, byte ptr [edx]
		inc	edx
		mov	[ebp+var_B8], edx
		or	esi, eax

loc_409782:				; CODE XREF: sub_409062+6F1j
		cmp	[ebp+var_AC], 0FFh
		jle	loc_4096EB
		mov	cl, byte ptr [ebp+var_AC]
		mov	[ebp+var_F1], cl

loc_40979E:				; CODE XREF: sub_409062:loc_409202j
					; sub_409062+684j
					; DATA XREF: ...
		cmp	[ebp+var_104], 0 ; jumptable 00409202 case 26
		jz	loc_40A07C
		mov	al, [ebp+var_F1]
		mov	edx, [ebp+var_100]
		mov	ecx, [ebp+var_F8]
		inc	[ebp+var_FC]
		dec	[ebp+var_104]
		mov	[edx], al
		inc	edx
		mov	[ebp+var_100], edx
		mov	edx, [ebp+var_F0]
		mov	[ecx+edx], al
		mov	eax, edx
		xor	edx, edx
		inc	eax
		div	[ebp+var_E0]
		jmp	loc_409D73
; ---------------------------------------------------------------------------

loc_4097EB:				; CODE XREF: sub_409062+415j
		mov	ecx, [ebp+var_C0]
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_120], 1
		mov	[ebp+var_EC], 7
		lea	ebx, [eax+ecx*2+180h]
		jmp	loc_409D83	; jumptable 00409202 case 4
; ---------------------------------------------------------------------------

loc_409817:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B0], 1	; jumptable 00409202 case 7
		jnz	loc_409A0C
		mov	edx, [ebp+var_C0]
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_EC], 8
		lea	ebx, [eax+edx*2+198h]
		jmp	loc_409D83	; jumptable 00409202 case 4
; ---------------------------------------------------------------------------

loc_409846:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B0], 0	; jumptable 00409202 case 8
		jnz	loc_40992A
		mov	eax, [ebp+var_C0]
		mov	edx, [ebp+var_110]
		mov	ecx, [ebp+var_DC]
		mov	[ebp+var_EC], 9
		shl	eax, 4
		lea	eax, [edx+eax+0F0h]
		lea	ebx, [ecx+eax*2]
		jmp	loc_409D83	; jumptable 00409202 case 4
; ---------------------------------------------------------------------------

loc_409881:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B0], 0	; jumptable 00409202 case 9
		jnz	loc_4099D2
		cmp	[ebp+var_FC], 0
		jz	loc_40A2F0	; jumptable 00409202 default case
		xor	eax, eax
		cmp	[ebp+var_C0], 6
		setnle	al
		lea	edx, [eax+eax+9]
		mov	[ebp+var_C0], edx

loc_4098B1:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_104], 0 ; jumptable 00409202 case 27
		jz	loc_40A09E
		mov	eax, [ebp+var_F0]
		mov	edx, [ebp+var_E0]
		sub	eax, [ebp+var_C8]
		mov	ecx, [ebp+var_F8]
		add	edx, eax
		cmp	eax, [ebp+var_E0]
		cmovnb	eax, edx
		mov	edx, [ebp+var_F0]
		mov	al, [ecx+eax]
		inc	[ebp+var_FC]
		dec	[ebp+var_104]
		mov	[ecx+edx], al
		mov	[ebp+var_F1], al
		mov	eax, edx
		xor	edx, edx
		inc	eax
		mov	cl, [ebp+var_F1]
		div	[ebp+var_E0]
		mov	eax, [ebp+var_100]
		mov	[eax], cl
		inc	eax
		mov	[ebp+var_100], eax
		mov	[ebp+var_F0], edx
		jmp	loc_409D79
; ---------------------------------------------------------------------------

loc_40992A:				; CODE XREF: sub_409062+7EBj
		mov	edx, [ebp+var_C0]
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_EC], 0Ah
		lea	ebx, [eax+edx*2+1B0h]
		jmp	loc_409D83	; jumptable 00409202 case 4
; ---------------------------------------------------------------------------

loc_40994C:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B0], 0	; jumptable 00409202 case 10
		jz	short loc_409994
		mov	edx, [ebp+var_C0]
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_EC], 0Bh
		lea	ebx, [eax+edx*2+1C8h]
		jmp	loc_409D83	; jumptable 00409202 case 4
; ---------------------------------------------------------------------------

loc_409977:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B0], 0	; jumptable 00409202 case 11
		mov	eax, [ebp+var_C8]
		jnz	short loc_4099A8
		mov	edx, [ebp+var_10C]
		mov	[ebp+var_C8], edx
		jmp	short loc_4099C0
; ---------------------------------------------------------------------------

loc_409994:				; CODE XREF: sub_409062+8F1j
		mov	edx, [ebp+var_108]
		mov	eax, [ebp+var_C8]
		mov	[ebp+var_C8], edx
		jmp	short loc_4099CC
; ---------------------------------------------------------------------------

loc_4099A8:				; CODE XREF: sub_409062+922j
		mov	ecx, [ebp+var_124]
		mov	edx, [ebp+var_10C]
		mov	[ebp+var_C8], ecx
		mov	[ebp+var_124], edx

loc_4099C0:				; CODE XREF: sub_409062+930j
		mov	ecx, [ebp+var_108]
		mov	[ebp+var_10C], ecx

loc_4099CC:				; CODE XREF: sub_409062+944j
		mov	[ebp+var_108], eax

loc_4099D2:				; CODE XREF: sub_409062+826j
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_11C], 15h
		add	eax, 0A68h
		mov	[ebp+var_CC], eax
		mov	ebx, eax
		jmp	short loc_409A67
; ---------------------------------------------------------------------------

loc_4099F1:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		xor	ecx, ecx	; jumptable 00409202 case 21
		cmp	[ebp+var_C0], 6
		setnle	cl
		lea	eax, [ecx+ecx*2+8]
		mov	[ebp+var_C0], eax
		jmp	loc_409CCC
; ---------------------------------------------------------------------------

loc_409A0C:				; CODE XREF: sub_409062+7BCj
		xor	edx, edx
		mov	eax, [ebp+var_DC]
		cmp	[ebp+var_C0], 6
		mov	[ebp+var_11C], 16h
		setnle	dl
		add	eax, 664h
		lea	ecx, [edx+edx*2+7]
		mov	edx, [ebp+var_10C]
		mov	[ebp+var_CC], eax
		mov	eax, [ebp+var_C8]
		mov	[ebp+var_C0], ecx
		mov	ecx, [ebp+var_108]
		mov	ebx, [ebp+var_CC]
		mov	[ebp+var_124], edx
		mov	[ebp+var_108], eax
		mov	[ebp+var_10C], ecx

loc_409A67:				; CODE XREF: sub_409062+1ADj
					; sub_409062+98Dj
		mov	[ebp+var_EC], 12h
		jmp	loc_409D83	; jumptable 00409202 case 4
; ---------------------------------------------------------------------------

loc_409A76:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_E4], 3	; jumptable 00409202 case 22
		mov	eax, 3
		mov	edx, [ebp+var_DC]
		cmovle	eax, [ebp+var_E4]
		mov	[ebp+var_B0], 6
		mov	[ebp+var_114], 19h
		shl	eax, 6
		lea	eax, [edx+eax*2+360h]
		mov	[ebp+var_CC], eax
		jmp	loc_409ECC	; jumptable 00409202 case 23
; ---------------------------------------------------------------------------

loc_409AB8:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		mov	eax, [ebp+var_AC] ; jumptable 00409202 case 25
		cmp	eax, 3
		jle	loc_409CC5
		mov	ecx, eax
		and	eax, 1
		sar	ecx, 1
		or	eax, 2
		mov	[ebp+var_BC], ecx
		dec	ecx
		shl	eax, cl
		cmp	[ebp+var_AC], 0Dh
		mov	[ebp+var_C4], ecx
		mov	[ebp+var_C8], eax
		jg	short loc_409B19
		mov	ecx, [ebp+var_DC]
		sub	eax, [ebp+var_AC]
		lea	ecx, [ecx+eax*2+55Eh]
		mov	[ebp+var_CC], ecx
		mov	ecx, [ebp+var_C4]
		mov	[ebp+var_B0], ecx
		jmp	loc_409BB7
; ---------------------------------------------------------------------------

loc_409B19:				; CODE XREF: sub_409062+A8Bj
		mov	eax, [ebp+var_BC]
		mov	[ebp+var_AC], 0
		sub	eax, 5
		mov	[ebp+var_C4], eax
		jmp	short loc_409B84
; ---------------------------------------------------------------------------

loc_409B34:				; CODE XREF: sub_409062+B29j
		shr	edi, 1
		shl	[ebp+var_AC], 1
		cmp	esi, edi
		jb	short loc_409B49
		or	[ebp+var_AC], 1
		sub	esi, edi

loc_409B49:				; CODE XREF: sub_409062+ADCj
		cmp	edi, 0FFFFFFh
		ja	short loc_409B7E

loc_409B51:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 12
		jz	loc_40A0C0
		mov	ecx, [ebp+var_B8]
		mov	eax, esi
		dec	[ebp+var_B4]
		shl	eax, 8
		shl	edi, 8
		movzx	esi, byte ptr [ecx]
		inc	ecx
		mov	[ebp+var_B8], ecx
		or	esi, eax

loc_409B7E:				; CODE XREF: sub_409062+AEDj
		dec	[ebp+var_C4]

loc_409B84:				; CODE XREF: sub_409062+AD0j
		cmp	[ebp+var_C4], 0
		jg	short loc_409B34
		mov	eax, [ebp+var_AC]
		mov	[ebp+var_B0], 4
		shl	eax, 4
		add	[ebp+var_C8], eax
		mov	eax, [ebp+var_DC]
		add	eax, 644h
		mov	[ebp+var_CC], eax

loc_409BB7:				; CODE XREF: sub_409062+AB2j
		mov	[ebp+var_AC], 0
		mov	[ebp+var_C4], 0
		mov	[ebp+var_D8], 1
		jmp	loc_409CA7
; ---------------------------------------------------------------------------

loc_409BDA:				; CODE XREF: sub_409062+C51j
		mov	ecx, [ebp+var_D8]
		mov	ebx, [ebp+var_CC]
		add	ecx, ecx
		add	ebx, ecx
		mov	ax, [ebx]
		mov	[ebp+var_D8], ecx
		mov	word ptr [ebp+var_BC], ax
		movzx	ecx, ax
		mov	eax, edi
		shr	eax, 0Bh
		imul	eax, ecx
		cmp	esi, eax
		mov	[ebp+var_D0], eax
		jnb	short loc_409C2A
		mov	eax, 800h
		mov	edi, [ebp+var_D0]
		sub	eax, ecx
		sar	eax, 5
		add	eax, [ebp+var_BC]
		mov	[ebx], ax
		jmp	short loc_409C6C
; ---------------------------------------------------------------------------

loc_409C2A:				; CODE XREF: sub_409062+BABj
		mov	cl, byte ptr [ebp+var_C4]
		mov	eax, 1
		sub	edi, [ebp+var_D0]
		sub	esi, [ebp+var_D0]
		shl	eax, cl
		mov	ecx, [ebp+var_BC]
		or	[ebp+var_AC], eax
		mov	eax, [ebp+var_BC]
		shr	ax, 5
		sub	cx, ax
		mov	eax, [ebp+var_D8]
		mov	[ebx], cx
		inc	eax
		mov	[ebp+var_D8], eax

loc_409C6C:				; CODE XREF: sub_409062+BC6j
		cmp	edi, 0FFFFFFh
		ja	short loc_409CA1

loc_409C74:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 16
		jz	loc_40A0E2
		mov	ecx, [ebp+var_B8]
		mov	eax, esi
		dec	[ebp+var_B4]
		shl	eax, 8
		shl	edi, 8
		movzx	esi, byte ptr [ecx]
		inc	ecx
		mov	[ebp+var_B8], ecx
		or	esi, eax

loc_409CA1:				; CODE XREF: sub_409062+C10j
		inc	[ebp+var_C4]

loc_409CA7:				; CODE XREF: sub_409062+B73j
		mov	ecx, [ebp+var_B0]
		cmp	[ebp+var_C4], ecx
		jl	loc_409BDA
		mov	eax, [ebp+var_AC]
		add	eax, [ebp+var_C8]

loc_409CC5:				; CODE XREF: sub_409062+A5Fj
		inc	eax
		mov	[ebp+var_C8], eax

loc_409CCC:				; CODE XREF: sub_409062+9A5j
		cmp	[ebp+var_C8], 0
		jz	loc_40A104
		mov	eax, [ebp+var_FC]
		cmp	[ebp+var_C8], eax
		ja	loc_40A2F0	; jumptable 00409202 default case
		add	[ebp+var_E4], 2
		mov	edx, [ebp+var_E4]
		add	eax, edx
		mov	[ebp+var_FC], eax

loc_409D00:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		mov	edx, [ebp+var_F0] ; jumptable 00409202 case 28

loc_409D06:				; CODE XREF: sub_409062+D0Fj
		cmp	[ebp+var_104], 0
		jz	loc_40A128
		mov	ecx, [ebp+var_E0]
		mov	eax, edx
		sub	eax, [ebp+var_C8]
		add	ecx, eax
		cmp	eax, [ebp+var_E0]
		cmovnb	eax, ecx
		mov	ecx, [ebp+var_F8]
		dec	[ebp+var_E4]
		dec	[ebp+var_104]
		mov	al, [ecx+eax]
		mov	[ecx+edx], al
		mov	ecx, [ebp+var_100]
		mov	[ebp+var_F1], al
		lea	eax, [edx+1]
		xor	edx, edx
		div	[ebp+var_E0]
		mov	al, [ebp+var_F1]
		mov	[ecx], al
		inc	ecx
		cmp	[ebp+var_E4], 0
		mov	[ebp+var_100], ecx
		jg	short loc_409D06

loc_409D73:				; CODE XREF: sub_409062+784j
		mov	[ebp+var_F0], edx

loc_409D79:				; CODE XREF: sub_409062+8C3j
		mov	edx, 2
		jmp	loc_409202
; ---------------------------------------------------------------------------

loc_409D83:				; CODE XREF: sub_409062:loc_409202j
					; sub_409062+409j ...
		mov	cx, [ebx]	; jumptable 00409202 case 4
		mov	edx, edi
		shr	edx, 0Bh
		movzx	eax, cx
		imul	edx, eax
		mov	[ebp+var_B0], eax
		cmp	esi, edx
		jnb	short loc_409DBC
		mov	eax, 800h
		mov	edi, edx
		sub	eax, [ebp+var_B0]
		mov	[ebp+var_B0], 0
		sar	eax, 5
		add	eax, ecx
		mov	[ebx], ax
		jmp	short loc_409DD6
; ---------------------------------------------------------------------------

loc_409DBC:				; CODE XREF: sub_409062+D37j
		mov	eax, ecx
		sub	edi, edx
		shr	ax, 5
		sub	esi, edx
		sub	cx, ax
		mov	[ebx], cx
		mov	[ebp+var_B0], 1

loc_409DD6:				; CODE XREF: sub_409062+D58j
		cmp	edi, 0FFFFFFh
		mov	edx, [ebp+var_EC]
		ja	loc_4091E3

loc_409DE8:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 5
		jz	loc_40A14D
		mov	edx, [ebp+var_B8]
		mov	eax, esi
		shl	eax, 8
		shl	edi, 8
		dec	[ebp+var_B4]
		movzx	esi, byte ptr [edx]
		inc	edx
		mov	[ebp+var_B8], edx
		mov	edx, [ebp+var_EC]
		or	esi, eax
		jmp	loc_4091E3
; ---------------------------------------------------------------------------

loc_409E20:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B0], 0	; jumptable 00409202 case 18
		jnz	short loc_409E51
		mov	ecx, [ebp+var_110]
		mov	edx, [ebp+var_CC]
		mov	[ebp+var_E4], 0
		lea	eax, ds:2[ecx*8]
		lea	edx, [edx+eax*2]
		mov	[ebp+var_CC], edx
		jmp	short loc_409E98
; ---------------------------------------------------------------------------

loc_409E51:				; CODE XREF: sub_409062+DC5j
		mov	ebx, [ebp+var_CC]
		mov	[ebp+var_EC], 13h
		add	ebx, 2
		jmp	loc_409D83	; jumptable 00409202 case 4
; ---------------------------------------------------------------------------

loc_409E69:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B0], 0	; jumptable 00409202 case 19
		jnz	short loc_409EA4
		mov	ecx, [ebp+var_110]
		mov	edx, [ebp+var_CC]
		mov	[ebp+var_E4], 8
		lea	eax, ds:82h[ecx*8]
		lea	edx, [edx+eax*2]
		mov	[ebp+var_CC], edx

loc_409E98:				; CODE XREF: sub_409062+DEDj
		mov	[ebp+var_B0], 3
		jmp	short loc_409EC2
; ---------------------------------------------------------------------------

loc_409EA4:				; CODE XREF: sub_409062+E0Ej
		add	[ebp+var_CC], 204h
		mov	[ebp+var_E4], 10h
		mov	[ebp+var_B0], 8

loc_409EC2:				; CODE XREF: sub_409062+E40j
		mov	[ebp+var_114], 14h

loc_409ECC:				; CODE XREF: sub_409062:loc_409202j
					; sub_409062+A51j
					; DATA XREF: ...
		mov	ecx, [ebp+var_B0] ; jumptable 00409202 case 23
		mov	[ebp+var_D8], 1
		mov	[ebp+var_C4], ecx
		jmp	loc_409F88
; ---------------------------------------------------------------------------

loc_409EE7:				; CODE XREF: sub_409062+F2Dj
		mov	eax, [ebp+var_D8]
		mov	ebx, [ebp+var_CC]
		add	eax, eax
		add	ebx, eax
		mov	cx, [ebx]
		mov	[ebp+var_D8], eax
		movzx	edx, cx
		mov	[ebp+var_BC], edx
		mov	edx, edi
		shr	edx, 0Bh
		imul	edx, [ebp+var_BC]
		cmp	esi, edx
		jnb	short loc_409F30
		mov	eax, 800h
		mov	edi, edx
		sub	eax, [ebp+var_BC]
		sar	eax, 5
		add	eax, ecx
		mov	[ebx], ax
		jmp	short loc_409F4D
; ---------------------------------------------------------------------------

loc_409F30:				; CODE XREF: sub_409062+EB5j
		mov	eax, ecx
		sub	edi, edx
		shr	ax, 5
		sub	esi, edx
		sub	cx, ax
		mov	[ebx], cx
		mov	ecx, [ebp+var_D8]
		inc	ecx
		mov	[ebp+var_D8], ecx

loc_409F4D:				; CODE XREF: sub_409062+ECCj
		cmp	edi, 0FFFFFFh
		ja	short loc_409F82

loc_409F55:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		cmp	[ebp+var_B4], 0	; jumptable 00409202 case 24
		jz	loc_40A16C
		mov	edx, [ebp+var_B8]
		mov	eax, esi
		dec	[ebp+var_B4]
		shl	eax, 8
		shl	edi, 8
		movzx	esi, byte ptr [edx]
		inc	edx
		mov	[ebp+var_B8], edx
		or	esi, eax

loc_409F82:				; CODE XREF: sub_409062+EF1j
		dec	[ebp+var_C4]

loc_409F88:				; CODE XREF: sub_409062+E80j
		cmp	[ebp+var_C4], 0
		jg	loc_409EE7
		mov	cl, byte ptr [ebp+var_B0]
		mov	eax, 1
		mov	edx, [ebp+var_D8]
		shl	eax, cl
		sub	edx, eax
		mov	[ebp+var_AC], edx
		mov	edx, [ebp+var_114]
		jmp	loc_4091E3
; ---------------------------------------------------------------------------

loc_409FBB:				; CODE XREF: sub_409062:loc_409202j
					; DATA XREF: .rdata:off_40CDBCo
		mov	ecx, [ebp+var_AC] ; jumptable 00409202 case 20
		add	[ebp+var_E4], ecx
		mov	edx, [ebp+var_11C]
		jmp	loc_4091E3
; ---------------------------------------------------------------------------

loc_409FD2:				; CODE XREF: sub_409062+2FAj
		mov	[ebp+var_BC], ebx
		mov	edx, 1
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_409FF4:				; CODE XREF: sub_409062+39Fj
		mov	[ebp+var_BC], ebx
		mov	edx, 3
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A016:				; CODE XREF: sub_409062+57Ej
		mov	[ebp+var_BC], ebx
		mov	edx, 0Dh
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A038:				; CODE XREF: sub_409062+61Ej
		mov	[ebp+var_BC], ebx
		mov	edx, 0Eh
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A05A:				; CODE XREF: sub_409062+6FAj
		mov	[ebp+var_BC], ebx
		mov	edx, 0Fh
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A07C:				; CODE XREF: sub_409062+743j
		mov	[ebp+var_BC], ebx
		mov	edx, 1Ah
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A09E:				; CODE XREF: sub_409062+856j
		mov	[ebp+var_BC], ebx
		mov	edx, 1Bh
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A0C0:				; CODE XREF: sub_409062+AF6j
		mov	[ebp+var_BC], ebx
		mov	edx, 0Ch
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A0E2:				; CODE XREF: sub_409062+C19j
		mov	[ebp+var_BC], ebx
		mov	edx, 10h
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A104:				; CODE XREF: sub_409062+C71j
		mov	[ebp+var_BC], ebx
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		mov	[ebp+var_E4], 0FFFFFFFFh
		jmp	short loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A128:				; CODE XREF: sub_409062+CABj
		mov	[ebp+var_BC], ebx
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_F0], edx
		mov	edx, 1Ch
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	short loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A14D:				; CODE XREF: sub_409062+D8Dj
		mov	[ebp+var_BC], ebx
		mov	edx, 5
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	short loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A16C:				; CODE XREF: sub_409062+EFAj
		mov	[ebp+var_BC], ebx
		mov	edx, 18h
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi
		jmp	short loc_40A1A3
; ---------------------------------------------------------------------------

loc_40A18B:				; CODE XREF: sub_409062+1B9j
		mov	[ebp+var_BC], ebx
		mov	ebx, [ebp+var_E8]
		mov	[ebp+var_D0], edi
		mov	[ebp+var_D4], esi

loc_40A1A3:				; CODE XREF: sub_409062+F8Dj
					; sub_409062+FAFj ...
		lea	esi, [ebp+var_A0]
		mov	ecx, 22h
		mov	edi, ebx
		rep movsd
		mov	[ebx], edx
		mov	eax, [ebp+var_EC]
		mov	edx, [ebp+var_11C]
		mov	ecx, [ebp+var_114]
		mov	[ebx+4], eax
		mov	eax, [ebp+var_128]
		mov	[ebx+8], edx
		mov	edx, [ebp+var_E0]
		mov	[ebx+0Ch], ecx
		mov	ecx, [ebp+var_B8]
		mov	[ebx+10h], eax
		mov	eax, [ebp+var_B4]
		mov	[ebx+14h], edx
		mov	edx, [ebp+var_100]
		mov	[ebx+18h], ecx
		mov	ecx, [ebp+var_104]
		mov	[ebx+1Ch], eax
		mov	eax, [ebp+var_FC]
		mov	[ebx+20h], edx
		mov	dl, [ebp+var_F1]
		mov	[ebx+24h], ecx
		mov	cl, [ebp+var_F2]
		mov	[ebx+28h], eax
		mov	eax, [ebp+var_CC]
		mov	[ebx+2Ch], dl
		mov	edx, [ebp+var_BC]
		mov	[ebx+2Dh], cl
		mov	ecx, [ebp+var_D8]
		mov	[ebx+30h], eax
		mov	eax, [ebp+var_110]
		mov	[ebx+34h], edx
		mov	[ebx+38h], ecx
		mov	[ebx+3Ch], eax
		mov	ecx, [ebp+var_C4]
		mov	eax, [ebp+var_AC]
		mov	edx, [ebp+var_120]
		mov	[ebx+40h], ecx
		mov	ecx, [ebp+var_B0]
		mov	[ebx+44h], eax
		mov	eax, [ebp+var_C0]
		mov	[ebx+54h], edx
		mov	edx, [ebp+var_108]
		mov	[ebx+48h], ecx
		mov	ecx, [ebp+var_118]
		mov	[ebx+50h], eax
		mov	eax, [ebp+var_C8]
		mov	[ebx+60h], edx
		mov	edx, [ebp+var_12C]
		mov	[ebx+4Ch], ecx
		mov	ecx, [ebp+var_E4]
		mov	[ebx+5Ch], eax
		mov	eax, [ebp+var_124]
		mov	[ebx+6Ch], edx
		mov	edx, [ebp+var_F0]
		mov	[ebx+58h], ecx
		mov	ecx, [ebp+var_10C]
		mov	[ebx+68h], eax
		mov	eax, [ebp+var_D0]
		mov	[ebx+74h], edx
		mov	edx, [ebp+var_D4]
		mov	[ebx+64h], ecx
		mov	ecx, [ebp+var_130]
		mov	[ebx+78h], eax
		mov	eax, [ebp+var_F8]
		mov	[ebx+7Ch], edx
		mov	[ebx+70h], ecx
		mov	[ebx+80h], eax
		mov	eax, [ebp+var_DC]
		mov	[ebx+84h], eax
		xor	eax, eax
		jmp	short loc_40A2F3
; ---------------------------------------------------------------------------

loc_40A2F0:				; CODE XREF: sub_409062+184j
					; sub_409062+1C9j ...
		or	eax, 0FFFFFFFFh	; jumptable 00409202 default case

loc_40A2F3:				; CODE XREF: sub_409062+163j
					; sub_409062+128Cj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_409062	endp

; ---------------------------------------------------------------------------
		align 4
		dd 0FFFFFFFFh, 0
		dd 0FFFFFFFFh, 3Eh dup(0)
		dd 300h	dup(?)
_text		ends

; Section 2. (virtual address 0000B000)
; Virtual size			: 000000BC (	188.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00009800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 40B000h
off_40B000	dd offset dword_428B08	; DATA XREF: sub_40164F+1535o
		dd offset sub_403DAD
		dd offset sub_4082D2
		dd offset sub_404FCD
; HANDLE dword_40B010
dword_40B010	dd 0FFFFFFFFh		; DATA XREF: sub_4040C3+4Br
					; sub_4040C3+130r ...
; HANDLE hObject
hObject		dd 0FFFFFFFFh		; DATA XREF: sub_404045+24r
					; sub_404091+1Dr ...
dword_40B018	dd 0FFFFFFFFh		; DATA XREF: sub_405619:loc_4056C9r
					; sub_405619:loc_40574Er ...
; LPCSTR lpModuleName
lpModuleName	dd offset aKernel32	; DATA XREF: sub_40894A+Br
					; "KERNEL32"
; LPCSTR lpProcName
lpProcName	dd offset aSetdefaultdlld ; DATA XREF: sub_40894A:loc_408977r
					; "SetDefaultDllDirectories"
		dd offset aKernel32	; "KERNEL32"
		dd offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
		dd offset aKernel32	; "KERNEL32"
		dd offset aMovefileexa	; "MoveFileExA"
		dd offset aKernel32	; "KERNEL32"
		dd offset aGetuserdefault ; "GetUserDefaultUILanguage"
		dd offset aAdvapi32	; "ADVAPI32"
		dd offset aRegdeletekeyex ; "RegDeleteKeyExA"
		dd offset aAdvapi32	; "ADVAPI32"
		dd offset aOpenprocesstok ; "OpenProcessToken"
		dd offset aAdvapi32	; "ADVAPI32"
		dd offset aLookupprivileg ; "LookupPrivilegeValueA"
		dd offset aAdvapi32	; "ADVAPI32"
		dd offset aAdjusttokenpri ; "AdjustTokenPrivileges"
		dd offset aAdvapi32	; "ADVAPI32"
		dd offset aInitiateshutdo ; "InitiateShutdownA"
		dd offset aShell32	; "SHELL32"
		dd 2A8h, 40CCACh, 40CCB4h, 40CCC3h, 40CCCCh, 40CCDDh, 40CCE5h
		dd 40CCDDh, 40CCFDh, 40CCDDh, 40CD11h
; MSGBOXPARAMSA	mbp
mbp		MSGBOXPARAMSA <28h, 0, 0, 0, 0,	0, 67h,	0, 0, 0> ; DATA	XREF: sub_407DB9+39o
					; sub_407DB9+4Ew ...
		align 1000h
_data		ends

; Section 3. (virtual address 0000C000)
; Virtual size			: 00002C28 (  11304.)
; Section size in file		: 00002E00 (  11776.)
; Offset to raw	data for section: 00009A00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40C000h
; CHAR aJumpD[]
aJumpD		db 'Jump: %d',0         ; DATA XREF: sub_40164F+6Fo
; CHAR aAbortingS[]
aAbortingS	db 'Aborting: "%s"',0   ; DATA XREF: sub_40164F+8Ao
; CHAR aCallD[]
aCallD		db 'Call: %d',0         ; DATA XREF: sub_40164F+F4o
; CHAR aDetailprintS[]
aDetailprintS	db 'detailprint: %s',0  ; DATA XREF: sub_40164F+120o
; CHAR aSleepD[]
aSleepD		db 'Sleep(%d)',0        ; DATA XREF: sub_40164F+151o
; CHAR aBringtofront[]
aBringtofront	db 'BringToFront',0     ; DATA XREF: sub_40164F:loc_4017CDo
; CHAR aSetfileattribu[]
aSetfileattribu	db 'SetFileAttributes: "%s":%08X',0 ; DATA XREF: sub_40164F+26Do
; CHAR aSetfileattri_0[]
aSetfileattri_0	db 'SetFileAttributes failed.',0 ; DATA XREF: sub_40164F+2A0o
; CHAR aCreatedirector[]
aCreatedirector	db 'CreateDirectory: "%s" (%d)',0 ; DATA XREF: sub_40164F+2C1o
; CHAR aCreatedirect_0[]
aCreatedirect_0	db 'CreateDirectory: can',27h,'t create "%s" (err=%d)',0
					; DATA XREF: sub_40164F+344o
; CHAR aCreatedirect_1[]
aCreatedirect_1	db 'CreateDirectory: can',27h,'t create "%s" - a file already exists',0
					; DATA XREF: sub_40164F+368o
; CHAR aCreatedirect_2[]
aCreatedirect_2	db 'CreateDirectory: "%s" created',0 ; DATA XREF: sub_40164F+37Bo
; CHAR aIffileexistsFi[]
aIffileexistsFi	db 'IfFileExists: file "%s" exists, jumping %d',0
					; DATA XREF: sub_40164F+3FDo
; CHAR aIffileexists_0[]
aIffileexists_0	db 'IfFileExists: file "%s" does not exist, jumping %d',0
					; DATA XREF: sub_40164F+419o
; CHAR aRenameS[]
aRenameS	db 'Rename: %s',0       ; DATA XREF: sub_40164F+450o
; CHAR aRenameOnReboot[]
aRenameOnReboot	db 'Rename on reboot: %s',0 ; DATA XREF: sub_40164F+4BDo
; CHAR aRenameFailedS[]
aRenameFailedS	db 'Rename failed: %s',0 ; DATA XREF: sub_40164F+4D7o
; CHAR aFileOverwritef[]
aFileOverwritef	db 'File: overwriteflag=%d, allowskipfilesflag=%d, name="%s"',0
					; DATA XREF: sub_40164F+61Ao
; CHAR aFileSkippedSOv[]
aFileSkippedSOv	db 'File: skipped: "%s" (overwriteflag=%d)',0 ; DATA XREF: sub_40164F+74Eo
; CHAR aFileErrorCreat[]
aFileErrorCreat	db 'File: error creating "%s"',0 ; DATA XREF: sub_40164F+767o
; CHAR aFileErrorUserR[]
aFileErrorUserR	db 'File: error, user retry',0 ; DATA XREF: sub_40164F:loc_401E3Do
; CHAR aFileErrorUserC[]
aFileErrorUserC	db 'File: error, user cancel',0 ; DATA XREF: sub_40164F:loc_401E4Eo
; CHAR aFileErrorUserA[]
aFileErrorUserA	db 'File: error, user abort',0 ; DATA XREF: sub_40164F:loc_401E65o
; CHAR aFileWroteDToS[]
aFileWroteDToS	db 'File: wrote %d to "%s"',0 ; DATA XREF: sub_40164F+890o
; CHAR aS[]
aS		db '%s',0               ; DATA XREF: sub_40164F+926o
					; sub_40164F+2572o
; CHAR aDeleteS[]
aDeleteS	db 'Delete: "%s"',0     ; DATA XREF: sub_40164F+94Fo
; CHAR aMessageboxDS[]
aMessageboxDS	db 'MessageBox: %d,"%s"',0 ; DATA XREF: sub_40164F+986o
; CHAR aRmdirS[]
aRmdirS		db 'RMDir: "%s"',0      ; DATA XREF: sub_40164F+9DEo
; CHAR aExchStackDElem[]
aExchStackDElem	db 'Exch: stack < %d elements',0 ; DATA XREF: sub_40164F+D03o
; CHAR aPopStackEmpty[]
aPopStackEmpty	db 'Pop: stack empty',0 ; DATA XREF: sub_40164F+D68o
; CHAR aHidewindow[]
aHidewindow	db 'HideWindow',0       ; DATA XREF: sub_40164F+1125o
; CHAR aExecshellWarni[]
aExecshellWarni	db 'ExecShell: warning: error ("%s": file:"%s" params:"%s")=%d',0
					; DATA XREF: sub_40164F+11EBo
; CHAR aExecshellSucce[]
aExecshellSucce	db 'ExecShell: success ("%s": file:"%s" params:"%s")',0
					; DATA XREF: sub_40164F+120Ao
; CHAR aExecCommandS[]
aExecCommandS	db 'Exec: command="%s"',0 ; DATA XREF: sub_40164F+1222o
; CHAR aExecSuccessS[]
aExecSuccessS	db 'Exec: success ("%s")',0 ; DATA XREF: sub_40164F+125Do
; CHAR aExecFailedCrea[]
aExecFailedCrea	db 'Exec: failed createprocess ("%s")',0 ; DATA XREF: sub_40164F:loc_402936o
asc_40C3A5	db '\',0                ; DATA XREF: sub_40164F+1438o
; CHAR aErrorRegisteri[]
aErrorRegisteri	db 'Error registering DLL: %s not found in %s',0
					; DATA XREF: sub_40164F+157Bo
; CHAR aErrorRegiste_0[]
aErrorRegiste_0	db 'Error registering DLL: Could not load %s',0
					; DATA XREF: sub_40164F+15C7o
; CHAR aErrorRegiste_1[]
aErrorRegiste_1	db 'Error registering DLL: Could not initialize OLE',0
					; DATA XREF: sub_40164F+15EAo
; CHAR aCreateshortcut[]
aCreateshortcut	db 'CreateShortCut: out: "%s", in: "%s %s", icon: %s,%d, sw=%d, hk=%d'
					; DATA XREF: sub_40164F+1662o
		db 0
; CHAR aCopyfilesSS[]
aCopyfilesSS	db 'CopyFiles "%s"->"%s"',0 ; DATA XREF: sub_40164F+1872o
; CHAR aRm[]
aRm		db '<RM>',0             ; DATA XREF: sub_40164F:loc_402FD5o
; CHAR aWriteinistrWro[]
aWriteinistrWro	db 'WriteINIStr: wrote [%s] %s=%s in %s',0 ; DATA XREF: sub_40164F+1A0Do
; CHAR aDeleteregvalue[]
aDeleteregvalue	db 'DeleteRegValue: "%s\%s" "%s"',0 ; DATA XREF: sub_40164F+1B27o
; CHAR aDeleteregkeySS[]
aDeleteregkeySS	db 'DeleteRegKey: "%s\%s"',0 ; DATA XREF: sub_40164F+1B4Do
aWriteregstrSSS	db 'WriteRegStr: "%s\%s" "%s"="%s"',0 ; DATA XREF: sub_40164F+1C73o
aWriteregexpand	db 'WriteRegExpandStr: "%s\%s" "%s"="%s"',0
					; DATA XREF: sub_40164F:loc_4032CEo
; CHAR aWriteregdwordS[]
aWriteregdwordS	db 'WriteRegDWORD: "%s\%s" "%s"="0x%08x"',0 ; DATA XREF: sub_40164F+1CA7o
; CHAR aWriteregbinSSS[]
aWriteregbinSSS	db 'WriteRegBin: "%s\%s" "%s"="%s"',0 ; DATA XREF: sub_40164F+1D2Do
; CHAR aWriteregErrorW[]
aWriteregErrorW	db 'WriteReg: error writing into "%s\%s" "%s"',0
					; DATA XREF: sub_40164F+1D96o
; CHAR aWriteregErrorC[]
aWriteregErrorC	db 'WriteReg: error creating key "%s\%s"',0 ; DATA XREF: sub_40164F+1DC5o
; CHAR aCreatedUninsta[]
aCreatedUninsta	db 'created uninstaller: %d, "%s"',0 ; DATA XREF: sub_40164F+24EFo
; CHAR aSettingsLoggin[]
aSettingsLoggin	db 'settings logging to %d',0 ; DATA XREF: sub_40164F+253Do
; CHAR aLoggingSetToD[]
aLoggingSetToD	db 'logging set to %d',0 ; DATA XREF: sub_40164F+254Co
		align 4
off_40C5FC	dd offset loc_4016BA, offset loc_4016D2, offset	loc_4016FC
					; DATA XREF: sub_40164F+64r
		dd offset loc_401733, offset loc_401766, offset	loc_401799 ; jump table	for switch statement
		dd offset loc_4017CD, offset loc_401871, offset	loc_4018B0
		dd offset loc_401904, offset loc_401A2F, offset	loc_4017F0
		dd offset loc_401831, offset loc_401855, offset	loc_401A7D
		dd offset loc_401B37, offset loc_401BE8, offset	loc_401C39
		dd offset loc_401C5F, offset loc_401F95, offset	loc_401FC6
		dd offset loc_402023, offset loc_402057, offset	loc_40207F
		dd offset loc_402176, offset loc_4021B6, offset	loc_40221B
		dd offset loc_40225A, offset loc_4022FE, offset	loc_40232C
		dd offset loc_402437, offset loc_402437, offset	loc_402564
		dd offset loc_402589, offset loc_4025C3, offset	loc_4025F1
		dd offset loc_40269C, offset loc_402759, offset	loc_4027AB
		dd offset loc_40286A, offset loc_40294C, offset	loc_4029B2
		dd offset loc_402ADF, offset loc_402C4A, offset	loc_402E9A
		dd offset loc_402F95, offset loc_402FD5, offset	loc_40309E
		dd offset loc_40311B, offset loc_4031E2, offset	loc_403425
		dd offset loc_4034FC, offset loc_4035C7, offset	loc_4035EE
		dd offset loc_40363C, offset loc_4036C9, offset	loc_403811
		dd offset loc_403881, offset loc_4038A8, offset	loc_40390B
		dd offset loc_40397C, offset loc_403B82, offset	loc_403BD6
		dd offset loc_403C99, offset loc_403D97, offset	loc_403D97
		dd offset loc_403D3F
off_40C708	dd offset loc_402284	; DATA XREF: sub_40164F+C2Er
		dd offset loc_402288	; jump table for switch	statement
		dd offset loc_40228C
		dd offset loc_402291
		dd offset loc_40229E
		dd offset loc_4022A2
		dd offset loc_4022A6
		dd offset loc_4022AA
		dd offset loc_4022B1
		dd offset loc_4022BB
		dd offset loc_4022CD
		dd offset loc_4022DA
		dd offset loc_4022DE
aUnpackingDataD	db 'unpacking data: %d%%',0 ; DATA XREF: DialogFunc+4Co
; CHAR aVerifyingInsta[]
aVerifyingInsta	db 'verifying installer: %d%%',0 ; DATA XREF: DialogFunc+47o
; CHAR a___D[]
a___D		db '... %d%%',0         ; DATA XREF: sub_403F5A+79o
aErrorLaunching	db 'Error launching installer',0 ; DATA XREF: sub_404467+6o
aInstallerInteg	db 'Installer integrity check has failed. Common causes include',0Ah
					; DATA XREF: sub_404467+20Fo
					; sub_404467+325o ...
		db 'incomplete download and damaged media. Contact the',0Ah
		db 'installer',27h,'s author to obtain a new copy.',0Ah
		db 0Ah
		db 'More information at:',0Ah
		db 'http://nsis.sf.net/NSIS_Error',0
aErrorWritingTe	db 'Error writing temporary file. Make sure your temp folder is valid'
					; DATA XREF: sub_404467+2A6o
		db '.',0
		align 10h
aErrorLaunchi_0	db 'Error launching installer',0 ; DATA XREF: start+384o
					; start:loc_404D6Co
aErrorWriting_0	db 'Error writing temporary file. Make sure your temp folder is valid'
					; DATA XREF: start:loc_404D65o
		db '.',0
aUxtheme	db 'UXTHEME',0          ; DATA XREF: start:loc_40491Eo
aUserenv	db 'USERENV',0          ; DATA XREF: start+4Eo
aSetupapi	db 'SETUPAPI',0         ; DATA XREF: start+5Bo
; const	CHAR pszPath
pszPath		db 0			; DATA XREF: start+C2o
; CHAR aNsisError[]
aNsisError	db 'NSIS Error',0       ; DATA XREF: start+D2o
aTemp		db '\Temp',0            ; DATA XREF: start+21Fo
aNsu		db '~nsu',0             ; DATA XREF: start+2A4o
aA		db 'A',0                ; DATA XREF: start:loc_404BC8o
a_tmp		db '.tmp',0             ; DATA XREF: start:loc_404BDEo
aSeshutdownpriv	db 'SeShutdownPrivilege',0 ; DATA XREF: start+559o
; CHAR aSectionS[]
aSectionS	db 'Section: "%s"',0    ; DATA XREF: StartAddress+4Co
; CHAR aSkippingSectio[]
aSkippingSectio	db 'Skipping section: "%s"',0 ; DATA XREF: StartAddress:loc_40524Bo
; CHAR aU_USS[]
aU_USS		db '%u.%u%s%s',0        ; DATA XREF: sub_405281+F0o
byte_40C977	db 0			; DATA XREF: sub_405D58:loc_4061BFo
; CHAR Operation[]
Operation	db 'open',0             ; DATA XREF: sub_406242+2E5o
; CHAR a_exe[]
a_exe		db '.exe',0             ; DATA XREF: sub_4065F8+173o
; CHAR aNewInstallOfST[]
aNewInstallOfST	db 'New install of "%s" to "%s"',0 ; DATA XREF: sub_407678+DCo
		align 10h
; CHAR aControlPanelDe[]
aControlPanelDe	db 'Control Panel\Desktop\ResourceLocale',0 ; DATA XREF: sub_4065F8+5Bo
		align 4
; CHAR a_defaultContro[]
a_defaultContro	db '.DEFAULT\Control Panel\International',0 ; DATA XREF: sub_4065F8+93o
		align 10h
aRiched20	db 'RichEd20',0         ; DATA XREF: sub_4065F8+367o
		align 4
aRiched32	db 'RichEd32',0         ; DATA XREF: sub_4065F8+378o
		align 4
; CHAR ClassName[]
ClassName	db 'RichEdit20A',0      ; DATA XREF: sub_4065F8+393o
					; sub_4065F8+3C4o
; CHAR aRichedit[]
aRichedit	db 'RichEdit',0         ; DATA XREF: sub_4065F8+3B3o
		align 10h
; DLGPROC lpDialogFunc
lpDialogFunc	dd offset sub_406242	; DATA XREF: sub_405619+3E2r
		dd offset sub_406B2B
		dd offset sub_405D58
		dd offset sub_407678
		dd offset sub_405CF7
; CHAR asc_40CA34[2]
asc_40CA34	db '\',0                ; DATA XREF: sub_407E2D+2Ao
					; sub_4088C6+52o ...
; CHAR a_[]
a?		db '*?|<>/":',0         ; DATA XREF: sub_4082D2+56o
aHkey_classes_r	db 'HKEY_CLASSES_ROOT',0 ; DATA XREF: sub_408687+1o
aHkey_current_u	db 'HKEY_CURRENT_USER',0 ; DATA XREF: sub_408687+19o
aHkey_local_mac	db 'HKEY_LOCAL_MACHINE',0 ; DATA XREF: sub_408687+26o
aHkey_users	db 'HKEY_USERS',0       ; DATA XREF: sub_408687+33o
aHkey_performan	db 'HKEY_PERFORMANCE_DATA',0 ; DATA XREF: sub_408687+40o
aHkey_current_c	db 'HKEY_CURRENT_CONFIG',0 ; DATA XREF: sub_408687+4Do
aHkey_dyn_data	db 'HKEY_DYN_DATA',0    ; DATA XREF: sub_408687+5Ao
aInvalidRegistr	db 'invalid registry key',0 ; DATA XREF: sub_408687+5Fo
; CHAR a02xC[]
a02xC		db '%02x%c',0           ; DATA XREF: sub_4086F0+55o
; CHAR a___[]
a___		db '...',0              ; DATA XREF: sub_4086F0+75o
; CHAR aSS_dll[]
aSS_dll		db '%s%s.dll',0         ; DATA XREF: sub_4088C6+5Eo
; CHAR aSS[]
aSS		db '%s=%s',0Dh,0Ah,0    ; DATA XREF: sub_408996+DDo
; CHAR asc_40CAEA[]
asc_40CAEA	db 0Ah			; DATA XREF: sub_408996+1DEo
		db '[',0
; CHAR a_[]
a_		db '\*.*',0             ; DATA XREF: sub_408C37+8Fo
; CHAR aDeleteDeletefi[]
aDeleteDeletefi	db 'Delete: DeleteFile("%s")',0 ; DATA XREF: sub_408C37+19Ao
; CHAR aDeleteDelete_0[]
aDeleteDelete_0	db 'Delete: DeleteFile on Reboot("%s")',0 ; DATA XREF: sub_408C37+1C9o
; CHAR aDeleteDelete_1[]
aDeleteDelete_1	db 'Delete: DeleteFile failed("%s")',0 ; DATA XREF: sub_408C37:loc_408E30o
aRmdirRemovedir	db 'RMDir: RemoveDirectory invalid input("%s")',0
					; DATA XREF: sub_408C37+266o
; CHAR aRmdirRemoved_0[]
aRmdirRemoved_0	db 'RMDir: RemoveDirectory("%s")',0 ; DATA XREF: sub_408C37+290o
; CHAR aRmdirRemoved_1[]
aRmdirRemoved_1	db 'RMDir: RemoveDirectory on Reboot("%s")',0 ; DATA XREF: sub_408C37+2BCo
; CHAR aRmdirRemoved_2[]
aRmdirRemoved_2	db 'RMDir: RemoveDirectory failed("%s")',0
					; DATA XREF: sub_408C37:loc_408F23o
aKernel32	db 'KERNEL32',0         ; DATA XREF: .data:lpModuleNameo
					; .data:0040B024o ...
aSetdefaultdlld	db 'SetDefaultDllDirectories',0 ; DATA XREF: .data:lpProcNameo
aGetdiskfreespa	db 'GetDiskFreeSpaceExA',0 ; DATA XREF: .data:0040B028o
aMovefileexa	db 'MoveFileExA',0      ; DATA XREF: .data:0040B030o
aGetuserdefault	db 'GetUserDefaultUILanguage',0 ; DATA XREF: .data:0040B038o
aAdvapi32	db 'ADVAPI32',0         ; DATA XREF: .data:0040B03Co
					; .data:0040B044o ...
aRegdeletekeyex	db 'RegDeleteKeyExA',0  ; DATA XREF: .data:0040B040o
aOpenprocesstok	db 'OpenProcessToken',0 ; DATA XREF: .data:0040B048o
aLookupprivileg	db 'LookupPrivilegeValueA',0 ; DATA XREF: .data:0040B050o
aAdjusttokenpri	db 'AdjustTokenPrivileges',0 ; DATA XREF: .data:0040B058o
aInitiateshutdo	db 'InitiateShutdownA',0 ; DATA XREF: .data:0040B060o
aShell32	db 'SHELL32',0          ; DATA XREF: .data:0040B064o
aShlwapi	db 'SHLWAPI',0
aShautocomplete	db 'SHAutoComplete',0
aShfolder	db 'SHFOLDER',0
aShgetfolderpat	db 'SHGetFolderPathA',0
aVersion	db 'VERSION',0
aGetfileversion	db 'GetFileVersionInfoSizeA',0
aGetfileversi_0	db 'GetFileVersionInfoA',0
aVerqueryvaluea	db 'VerQueryValueA',0
; CHAR aMicrosoftInter[]
aMicrosoftInter	db '\Microsoft\Internet Explorer\Quick Launch',0
					; DATA XREF: sub_4083A6+1FDo
		align 4
; CHAR aSoftwareMicros[]
aSoftwareMicros	db 'Software\Microsoft\Windows\CurrentVersion',0 ; DATA XREF: sub_4083A6+EBo
		align 4
dword_40CD78	dd 340002h, 2, 180300h,	10000000h ; DATA XREF: sub_407C2C+35o
dword_40CD88	dd 201h, 5000000h, 20h,	220h, 140300h, 130041h,	101h, 1000000h
					; DATA XREF: sub_407C2C+20o
					; sub_407C2C+27o
		dd 0
; CHAR aRename[]
aRename		db '[Rename]',0Dh,0Ah,0 ; DATA XREF: sub_408996+1A9o
					; sub_408996+1C5o
; CHAR aD[]
aD		db '%d',0               ; DATA XREF: sub_4081D0+9o
		align 4
off_40CDBC	dd offset loc_409214	; DATA XREF: sub_409062:loc_409202r
		dd offset loc_409342	; jump table for switch	statement
		dd offset loc_409437
		dd offset loc_4093FA
		dd offset loc_409D83
		dd offset loc_409DE8
		dd offset loc_409470
		dd offset loc_409817
		dd offset loc_409846
		dd offset loc_409881
		dd offset loc_40994C
		dd offset loc_409977
		dd offset loc_409B51
		dd offset loc_4095D9
		dd offset loc_409679
		dd offset loc_409755
		dd offset loc_409C74
		dd offset loc_409209
		dd offset loc_409E20
		dd offset loc_409E69
		dd offset loc_409FBB
		dd offset loc_4099F1
		dd offset loc_409A76
		dd offset loc_409ECC
		dd offset loc_409F55
		dd offset loc_409AB8
		dd offset loc_40979E
		dd offset loc_4098B1
		dd offset loc_409D00
		dd 7ECBBA04h, 11CF2D97h, 0AA0029A2h, 52733D00h,	40FC6ED4h
		dd 11CF2438h, 8DBA3h, 225F136h,	40FC6ED8h, 11CF2438h, 8DBA3h
		dd 225F136h, 40FC6ED3h,	11CF2438h, 8DBA3h, 225F136h, 0DE86A58h
		dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 40FC6ED6h,	11CF2438h
		dd 8DBA3h, 225F136h, 40FC6ED7h,	11CF2438h, 8DBA3h, 225F136h
		dd 0DE86A56h, 11CF2BAAh, 0AA0029A2h, 52733D00h,	0DE86A55h
		dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A51h,	11CF2BAAh
		dd 0AA0029A2h, 52733D00h, 0DE86A57h, 11CF2BAAh,	0AA0029A2h
		dd 52733D00h, 0DE86A52h, 11CF2BAAh, 0AA0029A2h,	52733D00h
		dd 0DE86A54h, 11CF2BAAh, 0AA0029A2h, 52733D00h,	0DE86A53h
		dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 40FC6ED9h,	11CF2438h
		dd 8DBA3h, 225F136h, 40FC6ED5h,	11CF2438h, 8DBA3h, 225F136h
		dd 0DE86A50h, 11CF2BAAh, 0AA0029A2h, 52733D00h,	7DD95802h
		dd 11CF9882h, 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h
		dd 0AA00A99Fh, 0C4426C00h, 214D0h, 0
		dd 0C0h, 46000000h, 214D1h, 0
		dd 0C0h, 46000000h, 214D2h, 0
		dd 0C0h, 46000000h, 0BB2765h, 11D06A77h, 0C00035A5h, 62D0D74Fh
		dd 3C036F1h, 11D0A186h,	0AA004A82h, 83435B00h, 330h, 0
		dd 0C0h, 46000000h, 591209C7h, 42B2767Bh, 0EE44BA9Fh, 0C7F21546h
		dd 4125DD96h, 4103E03Ah, 59E0708Fh, 9C3B807Dh, 0BB2763h
		dd 11D06A77h, 0C00035A5h, 62D0D74Fh, 0BE35201h,	11CE8F91h
		dd 0AA00E39Dh, 51B84B00h, 0BE35200h, 11CE8F91h,	0AA00E39Dh
		dd 51B84B00h, 0BE35202h, 11CE8F91h, 0AA00E39Dh,	51B84B00h
		dd 21EC2020h, 10693AEAh, 8DDA2h, 9D30302Bh, 0FB8F0822h
		dd 101B0164h, 8ED84h, 13C72E2Bh, 332h, 0
		dd 0C0h, 46000000h, 77F10CF0h, 49663DB5h, 0C5B720B5h, 0D65ED34Fh
		dd 4657278Ah, 11D2411Bh, 0C0009A83h, 0D018D94Fh, 2D3468C1h
		dd 43B636A7h, 0F0D324ACh, 7A60D92Fh, 79EAC9E7h,	11CEBAF9h
		dd 0AA00828Ch, 0BA94B00h, 0B091E540h, 11CF83E3h, 200013A7h
		dd 6297D7AFh, 0AFACED1h, 11D1E828h, 32B58791h, 5D57E9F1h
		dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h,	79EAC9E4h
		dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h,	11CEBAF9h
		dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h,	0AA00828Ch
		dd 0BA94B00h, 1Bh, 0
		dd 0C0h, 46000000h, 9A02E012h, 4E1E6303h, 0F63A1B9h, 0C5922580h
		dd 1Ch,	0
		dd 0C0h, 46000000h, 871C5380h, 106942A0h, 8EAA2h, 9D30302Bh
		dd 2DF01h, 0
		dd 0C0h, 46000000h, 0FBF23B40h,	101BE3F0h, 0AA008884h
		dd 0F8563E00h, 331h, 0
		dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
		dd 20D04FE0h, 10693AEAh, 8D8A2h, 9D30302Bh, 450D8FBAh
		dd 11D0AD25h, 8A898h, 3111B36h,	208D2C60h, 10693AEAh, 8D7A2h
		dd 9D30302Bh, 312h, 0
		dd 0C0h, 46000000h, 30Eh, 0
		dd 0C0h, 46000000h, 30Dh, 0
		dd 0C0h, 46000000h, 311h, 0
		dd 0C0h, 46000000h, 313h, 0
		dd 0C0h, 46000000h, 30Ch, 0
		dd 0C0h, 46000000h, 30Fh, 0
		dd 0C0h, 46000000h, 310h, 0
		dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
		dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
		dd 0C0h, 46000000h, 319h, 0
		dd 0C0h, 46000000h, 315h, 0
		dd 0C0h, 46000000h, 0B8967F86h,	4F9658AEh, 795DB29Fh, 4B8F7904h
		dd 645FF040h, 101B5081h, 0AA00089Fh, 4E952F00h,	0EAB22AC6h
		dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 21400h, 0
		dd 0C0h, 46000000h, 0EAB22AC3h,	11CF30C1h, 0EBA7h, 0BAE5BC0h
		dd 0F3364BA0h, 11CE65B9h, 0AA00BAA9h, 37E84A00h
; IID rclsid
rclsid		dd 21401h		; Data1	; DATA XREF: sub_40164F+16BAo
		dw 0			; Data2
		dw 0			; Data3
		db 0C0h, 6 dup(0), 46h	; Data4
		dd 316h, 0
		dd 0C0h, 46000000h, 315h, 0
		dd 0C0h, 46000000h, 2E005h, 0
		dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
		dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h,	79EAC9D1h
		dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 2DF09h, 0
		dd 0C0h, 46000000h, 17h, 0
		dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
		dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h,	79EAC9E1h
		dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 56FDF344h,	11D0FD6Dh
		dd 60008A95h, 90A0C997h, 8856F961h, 11D0340Ah, 0C0006BA9h
		dd 0A205D74Fh, 2DF06h, 0
		dd 0C0h, 46000000h, 0EAB22AC5h,	11CF30C1h, 0EBA7h, 0BAE5BC0h
		dd 0EAB22AC2h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
		dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 34A715A0h, 11D06587h
		dd 20004A92h, 4DACC7AFh, 96300DA0h, 11CF2BABh, 0AA0029A2h
		dd 52733D00h, 0D5CDD502h, 101B2E9Ch, 89793h, 0AEF92C2Bh
		dd 214A1h, 0
		dd 0C0h, 46000000h, 214A0h, 0
		dd 0C0h, 46000000h, 0F29F85E0h,	10684FF9h, 891ABh, 0D9B3272Bh
		dd 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh, 6650430Ch
		dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h, 101ABE0Fh
		dd 0AA00BB8Bh, 0AB0C3000h, 53F56312h, 11D0B6BFh, 0A000F294h
		dd 8BFB1EC9h, 53F56308h, 11D0B6BFh, 0A000F294h,	8BFB1EC9h
		dd 86E0D1E0h, 11D08089h, 8E49Ch, 731F303Eh, 53F56307h
		dd 11D0B6BFh, 0A000F294h, 8BFB1EC9h, 53F56311h,	11D0B6BFh
		dd 0A000F294h, 8BFB1EC9h, 53F56310h, 11D0B6BFh,	0A000F294h
		dd 8BFB1EC9h, 53F5630Ah, 11D0B6BFh, 0A000F294h,	8BFB1EC9h
		dd 4D36E978h, 11CEE325h, 8C1BFh, 1803E12Bh, 2ACCFE60h
		dd 11D2C130h, 0A00082B0h, 8BFB1EC9h, 53F5630Bh,	11D0B6BFh
		dd 0A000F294h, 8BFB1EC9h, 53F5630Dh, 11D0B6BFh,	0A000F294h
		dd 8BFB1EC9h, 53F5630Ch, 11D0B6BFh, 0A000F294h,	8BFB1EC9h
		dd 6650430Fh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504310h
		dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Dh, 101ABE0Fh
		dd 0AA00BB8Bh, 0AB0C3000h, 6650430Eh, 101ABE0Fh, 0AA00BB8Bh
		dd 0AB0C3000h, 66504312h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
		dd 66504311h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504313h
		dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504300h, 101ABE0Fh
		dd 0AA00BB8Bh, 0AB0C3000h, 2DE81h, 0
		dd 0C0h, 46000000h, 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
		dd 2DE80h, 0
		dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
		dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
		dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
		dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
		dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
		dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
		dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
		dd 0AA00BB8Bh, 0AB0C3000h, 2DF07h, 0
		dd 0C0h, 46000000h, 2DF05h, 0
		dd 0C0h, 46000000h, 77A130B0h, 11D094FDh, 0C00044A5h, 62D0D74Fh
		dd 618736E0h, 11CF3C3Dh, 0AA000C81h, 719B3800h,	10Fh, 0
		dd 0C0h, 46000000h, 125h, 0
		dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
		dd 4E530B0Ah, 4C77E611h, 3190ACA3h, 1B2822D0h, 79EAC9D3h
		dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 3D8B0590h,	11D2F691h
		dd 6000A98Eh, 0D45BDF97h, 73DB1241h, 45811E85h,	1EA84F8Eh
		dd 578C0F1Dh, 79EAC9D0h, 11CEBAF9h, 0AA00828Ch,	0BA94B00h
		dd 0BB2762h, 11D06A77h,	0C00035A5h, 62D0D74Fh, 0EAC04BC0h
		dd 11D23791h, 600095BBh, 4C467B97h, 0Eh, 0
		dd 0C0h, 46000000h, 0FC4801A1h,	11CF2BA9h, 0AA0029A2h
		dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch,	0BA94B00h
		dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h,	79EAC9CBh
		dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h,	11CEBAF9h
		dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
		dd 0C0h, 46000000h, 2E012h, 0
		dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
		dd 140h, 0
		dd 0C0h, 46000000h, 0B196B28Fh,	101ABAB4h, 0AA009CB6h
		dd 71D3400h, 13Dh, 0
		dd 0C0h, 46000000h, 0F4F569D1h,	101A593Bh, 869B5h, 7ABF2D2Bh
		dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h,	0E8025004h
		dd 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 214F1h, 0
		dd 0C0h, 46000000h, 0B196B286h,	101ABAB4h, 0AA009CB6h
		dd 71D3400h, 0B196B284h, 101ABAB4h, 0AA009CB6h,	71D3400h
		dd 214E4h, 0
		dd 0C0h, 46000000h, 214F4h, 0
		dd 0C0h, 46000000h, 0BCFCE0A0h,	11D0EC17h, 0A000108Dh
		dd 19270FC9h, 12Ah, 0
		dd 0C0h, 46000000h, 0B722BCCAh,	101B4E68h, 0AA00BCA2h
		dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
		dd 75121952h, 43E5E0D0h, 801D8093h, 72CF3A48h, 20405h
		dd 0
		dd 0C0h, 46000000h, 2040Eh, 0
		dd 0C0h, 46000000h, 20406h, 0
		dd 0C0h, 46000000h, 2040Fh, 0
		dd 0C0h, 46000000h, 6332DEBFh, 467087B5h, 575EC090h, 9EA408B4h
		dd 110h, 0
		dd 0C0h, 46000000h, 10Eh, 0
		dd 0C0h, 46000000h, 123h, 0
		dd 0C0h, 46000000h, 124h, 0
		dd 0C0h, 46000000h, 40D4577Fh, 4BDBE237h, 0F05869BDh, 6A1B4389h
		dd 13h,	0
		dd 0C0h, 46000000h, 14h, 0
		dd 0C0h, 46000000h, 15h, 0
		dd 0C0h, 46000000h, 20400h, 0
		dd 0C0h, 46000000h, 0DE5BF786h,	11D2477Ah, 0C0009D83h
		dd 0D018D94Fh, 121h, 0
		dd 0C0h, 46000000h, 122h, 0
		dd 0C0h, 46000000h, 4657278Bh, 11D2411Bh, 0C0009A83h, 0D018D94Fh
		dd 2E011h, 0
		dd 0C0h, 46000000h, 108h, 0
		dd 0C0h, 46000000h, 0B196B285h,	101ABAB4h, 0AA009CB6h
		dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h,	71D3400h
		dd 103h, 0
		dd 0C0h, 46000000h, 2E000h, 0
		dd 0C0h, 46000000h, 106h, 0
		dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
		dd 107h, 0
		dd 0C0h, 46000000h, 214F2h, 0
		dd 0C0h, 46000000h, 102h, 0
		dd 0C0h, 46000000h, 104h, 0
		dd 0C0h, 46000000h, 0B722BCC8h,	101B4E68h, 0AA00BCA2h
		dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
		dd 105h, 0
		dd 0C0h, 46000000h, 13Bh, 0
		dd 0C0h, 46000000h, 139h, 0
		dd 0C0h, 46000000h, 0Dh, 0
		dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
		dd 101h, 0
		dd 0C0h, 46000000h, 100h, 0
		dd 0C0h, 46000000h, 20404h, 0
		dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
		dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h,	19h, 0
		dd 0C0h, 46000000h, 214EBh, 0
		dd 0C0h, 46000000h, 214FAh, 0
		dd 0C0h, 46000000h, 1E18D10h, 11D24D8Bh, 60005D85h, 67930508h
		dd 214F0h, 0
		dd 0C0h, 46000000h, 214F3h, 0
		dd 0C0h, 46000000h, 214F8h, 0
		dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
		dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0CDE725B0h
		dd 4519CCC9h, 5D327E91h, 0CEB4FA72h, 0BEF6E002h, 101AA874h
		dd 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h, 0AA00BA8Bh
		dd 0AB0C3000h, 146h, 0
		dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
		dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h,	79EAC9C5h
		dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h,	11CEBAF9h
		dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h,	0AA00828Ch
		dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch,	0BA94B00h
		dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h,	0B7D14566h
		dd 4CCE0509h, 550A1FA7h, 9BBD3342h, 0B824B49Dh,	416122ACh
		dd 16998AACh, 7F3FFAE8h, 11h, 0
		dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
		dd 0Ah,	0
		dd 0C0h, 46000000h, 2, 0
		dd 0C0h, 46000000h, 1Dh, 0
		dd 0C0h, 46000000h, 3, 0
		dd 0C0h, 46000000h, 16h, 0
		dd 0C0h, 46000000h, 0F77459A0h,	11CFBF9Ah, 0C0004EBAh
		dd 1608D74Fh, 0Fh, 0
		dd 0C0h, 46000000h, 20h, 0
		dd 0C0h, 46000000h, 71604B0Fh, 476497B0h, 132F7785h, 22148AE9h
		dd 214E1h, 0
		dd 0C0h, 46000000h, 214F7h, 0
		dd 0C0h, 46000000h, 0BB2761h, 11D06A77h, 0C00035A5h, 62D0D74Fh
		dd 92CA9DCDh, 4BBA5622h, 9F5E05A8h, 0C9D81B54h,	5632B1A4h
		dd 400AE38Ah, 0CDD48A92h, 95022363h, 0CB5BDC81h, 11CF93C1h
		dd 8000208Fh, 64D02C5Fh, 0FC0CA0A7h, 4FD2C316h,	623E3190h
		dd 234F6D8Eh, 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h
		dd 111h, 0
		dd 0C0h, 46000000h, 11Eh, 0
		dd 0C0h, 46000000h, 128h, 0
		dd 0C0h, 46000000h, 129h, 0
		dd 0C0h, 46000000h, 118h, 0
		dd 0C0h, 46000000h, 0B722BCCBh,	101B4E68h, 0AA00BCA2h
		dd 70474000h, 11Bh, 0
		dd 0C0h, 46000000h, 0B196B288h,	101ABAB4h, 0AA009CB6h
		dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h,	71D3400h
		dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
		dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
		dd 0AA00BCA2h, 70474000h, 117h,	0
		dd 0C0h, 46000000h, 116h, 0
		dd 0C0h, 46000000h, 113h, 0
		dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
		dd 119h, 0
		dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
		dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
		dd 0
		dd 0C0h, 46000000h, 11Ch, 0
		dd 0C0h, 46000000h, 11Dh, 0
		dd 0C0h, 46000000h, 11Fh, 0
		dd 0C0h, 46000000h, 112h, 0
		dd 0C0h, 46000000h, 0A1FAF330h,	11CEEF97h, 0AA00C99Bh
		dd 18E6000h, 120h, 0
		dd 0C0h, 46000000h, 0D001F200h,	11CEEF97h, 0AA00C99Bh
		dd 18E6000h, 97D001F2h,	9B11CEEFh, 0AA00C9h, 18E60h, 894AD3B0h
		dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
		dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
		dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h,	9, 0
		dd 0C0h, 46000000h, 0D5F569D0h,	101A593Bh, 869B5h, 7ABF2D2Bh
		dd 11Ah, 0
		dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
		dd 10Ch, 0
		dd 0C0h, 46000000h
dword_40E070	dd 10Bh, 0		; DATA XREF: sub_40164F+16DEo
		dd 0C0h, 46000000h, 214EAh, 0
		dd 0C0h, 46000000h, 1AC3D9F0h, 11D1175Ch, 6000BE95h, 4FEA9797h
		dd 0CEF04FDFh, 11D2FE72h, 0C000A587h, 0CF37684Fh, 0BD1AE5E0h
		dd 11CEA6AEh, 425037BDh, 0C100h, 79EAC9C9h, 11CEBAF9h
		dd 0AA00828Ch, 0BA94B00h, 37D84F60h, 11CE42CBh,	0AA003581h
		dd 51B84B00h, 22F55881h, 11D0280Bh, 0A000A9A8h,	4200CC9h
		dd 0E318AD57h, 450F0AA0h, 0AB6FA5ACh, 17D90371h, 77EFFA68h
		dd 43664F98h, 3B5772BAh, 7105883Dh, 10Ah, 0
		dd 0C0h, 46000000h, 109h, 0
		dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
		dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
		dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
		dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
		dd 70474000h, 5852A2C3h, 11D16530h, 0A3B6h, 0F97B75F8h
		dd 509AAEDAh, 11D15639h, 0A1B6h, 0F97B75F8h, 0A9D758A0h
		dd 11CF4617h, 0AA00FC95h, 0B40D6800h, 214F6h, 0
		dd 0C0h, 46000000h, 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h
		dd 22F55882h, 11D0280Bh, 0A000A9A8h, 4200CC9h, 0F917BC8Ah
		dd 44781BBAh, 0DE1B45A2h, 3194EB03h, 380F5CADh,	42F21B5Eh
		dd 7F635D80h, 1ED392D3h, 6F79D558h, 45493E96h, 757DD1A1h
		dd 148828D2h, 57D2EDEDh, 400E5062h, 0AE5D07B1h,	0A657FE79h
		dd 0F67104FCh, 46FD2AF9h, 3C242DB3h, 0D1F30414h, 1F9FC1D0h
		dd 4B26C39Bh, 19017F81h, 0E44D367h, 507393F4h, 4A602A3Dh
		dd 0C7D99EB5h, 0DDC21657h, 78F91BDh, 440F29A2h,	0A2464E92h
		dd 20455291h, 11E1FBF9h, 4A6B2D56h, 0D17CB38Dh,	0F271A493h
		dd 9B6E051Ch, 43215DDDh, 2AFE7090h, 74E955CBh, 0A99400F4h
		dd 45573D84h, 4212BA94h, 0A6C92CFBh, 0B196B28Ah, 101ABAB4h
		dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
		dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h,	71D3400h
		dd 1E44665h, 101B24ACh,	8ED84h,	13C72E2Bh, 0B196B28Ch
		dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
		dd 0C0h, 46000000h, 138h, 0
		dd 0C0h, 46000000h, 886D8EEBh, 44468CF2h, 0BACD028Dh, 99CFBD1Dh
		dd 3017056Dh, 4E909A91h, 6C747D93h, 4FBFAB72h, 0C8E2D566h
		dd 4D49186Eh, 96941BFh,	0CC6AD5EAh, 0BC110B6Dh,	414857E8h
		dd 191C6A9h, 0A5F3B25Ah, 0CA724E8Ah, 442BC3E6h,	0B06FA488h
		dd 0A33580DBh, 0FA955FD9h, 487938BEh, 4C82CEA6h, 9F602DF5h
		dd 0B196B283h, 101ABAB4h, 0AA009CB6h, 71D3400h,	0A6BC3AC0h
		dd 11CEDBAAh, 0AA00E39Dh, 51B84B00h, 27h, 0
		dd 0C0h, 46000000h, 8, 0
		dd 0C0h, 46000000h, 21500h, 0
		dd 0C0h, 46000000h, 0CF51ED10h,	11CF62FEh, 0A00086BFh
		dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
		dd 20D00h, 0
		dd 0C0h, 46000000h, 20D03h, 0
		dd 0C0h, 46000000h, 12h, 0
		dd 0C0h, 46000000h, 4, 0
		dd 0C0h, 46000000h, 0D5F56B60h,	101A593Bh, 869B5h, 7ABF2D2Bh
		dd 7, 0
		dd 0C0h, 46000000h, 0D5F56A34h,	101A593Bh, 869B5h, 7ABF2D2Bh
		dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
		dd 0C0h, 46000000h, 0D5F56AFCh,	101A593Bh, 869B5h, 7ABF2D2Bh
		dd 126h, 0
		dd 0C0h, 46000000h, 10h, 0
		dd 0C0h, 46000000h, 0EAB22AC4h,	11CF30C1h, 0EBA7h, 0BAE5BC0h
		dd 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h,	0F4F569D0h
		dd 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
		dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
		dd 214E2h, 0
		dd 0C0h, 46000000h, 214EFh, 0
		dd 0C0h, 46000000h, 214FCh, 0
		dd 0C0h, 46000000h, 214F5h, 0
		dd 0C0h, 46000000h, 214FBh, 0
		dd 0C0h, 46000000h, 0EAB22AC1h,	11CF30C1h, 0EBA7h, 0BAE5BC0h
		dd 214E8h, 0
		dd 0C0h, 46000000h, 214E6h, 0
		dd 0C0h, 46000000h, 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh
		dd 214E5h, 0
		dd 0C0h, 46000000h, 0C6C4200h, 11D0C589h, 0C0009A99h, 0E155D64Fh
		dd 43826D1Eh, 42EEE718h, 0E2A155BCh, 0FE7BC361h, 7E9FB0D3h
		dd 4307919Fh, 189B2EABh, 930C3160h
; IID riid
riid		dd 214EEh		; Data1	; DATA XREF: sub_40164F+16A2o
		dw 0			; Data2
		dw 0			; Data3
		db 0C0h, 6 dup(0), 46h	; Data4
		dd 45E2B4AEh, 11D0B1C3h, 0A0002FB9h, 0E11203C9h, 214F9h
		dd 0
		dd 0C0h, 46000000h, 214E9h, 0
		dd 0C0h, 46000000h, 214E3h, 0
		dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
		dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
		dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
		dd 0C0h, 46000000h, 0Bh, 0
		dd 0C0h, 46000000h, 0Ch, 0
		dd 0C0h, 46000000h, 26h, 0
		dd 0C0h, 46000000h, 6, 0
		dd 0C0h, 46000000h, 0DF0B3D60h,	101B548Fh, 8658Eh, 19D12B2Bh
		dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h,	0D5F78C80h
		dd 11CF5252h, 0AA00FA90h, 6E104200h, 0EA1AFB91h, 4B869E28h
		dd 9F9EE990h, 0AFEF5E8Ah, 56FDF342h, 11D0FD6Dh,	60008A95h
		dd 90A0C997h, 602D4995h, 429BB13Ah, 35196EA6h, 17434FE4h
		dd 0EA1AFB91h, 4B869E28h, 9F9EE990h, 0AFEF5E8Ah, 0C43DC798h
		dd 4BEA95D1h, 99BB3090h, 1A3A98E2h, 28888FE3h, 483AC2A0h
		dd 0B18CEAA3h, 3DFF51CEh, 22D44C94h, 4542A419h,	26AE72A2h
		dd 0CFCE3E09h, 20410h, 0
		dd 0C0h, 46000000h, 20403h, 0
		dd 0C0h, 46000000h, 20401h, 0
		dd 0C0h, 46000000h, 20412h, 0
		dd 0C0h, 46000000h, 20402h, 0
		dd 0C0h, 46000000h, 20411h, 0
		dd 0C0h, 46000000h, 0FBF23B80h,	101BE3F0h, 0AA008884h
		dd 0F8563E00h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
		dd 10Dh, 0
		dd 0C0h, 46000000h, 127h, 0
		dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
		dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
		dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
		dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
		dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h,	79EAC9D5h
		dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
		dd 0C0h, 46000000h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
		dd 2CDA3294h, 40206C4Fh, 0C52761B1h, 0A61FC830h, 0EAB22AC0h
		dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DE0Eh, 0
		dd 0C0h, 46000000h, 2DE18h, 0
		dd 0C0h, 46000000h, 2DE1Eh, 0
		dd 0C0h, 46000000h, 2DE19h, 0
		dd 0C0h, 46000000h, 2DE0Fh, 0
		dd 0C0h, 46000000h, 2DE12h, 0
		dd 0C0h, 46000000h, 2DE21h, 0
		dd 0C0h, 46000000h, 2DE01h, 0
		dd 0C0h, 46000000h, 2DE0Bh, 0
		dd 0C0h, 46000000h, 2DE0Dh, 0
		dd 0C0h, 46000000h, 2DE02h, 0
		dd 0C0h, 46000000h, 2DE1Fh, 0
		dd 0C0h, 46000000h, 2DE04h, 0
		dd 0C0h, 46000000h, 2DE0Ch, 0
		dd 0C0h, 46000000h, 2DE05h, 0
		dd 0C0h, 46000000h, 2DE1Ch, 0
		dd 0C0h, 46000000h, 2DE06h, 0
		dd 0C0h, 46000000h, 2DE13h, 0
		dd 0C0h, 46000000h, 2DE10h, 0
		dd 0C0h, 46000000h, 2DE22h, 0
		dd 0C0h, 46000000h, 2DE09h, 0
		dd 0C0h, 46000000h, 2DE23h, 0
		dd 0C0h, 46000000h, 2DE0Ah, 0
		dd 0C0h, 46000000h, 2DE1Dh, 0
		dd 0C0h, 46000000h, 2DE11h, 0
		dd 0C0h, 46000000h, 2DE15h, 0
		dd 0C0h, 46000000h, 2DE1Bh, 0
		dd 0C0h, 46000000h, 2DE16h, 0
		dd 0C0h, 46000000h, 2DE20h, 0
		dd 0C0h, 46000000h, 2DE07h, 0
		dd 0C0h, 46000000h, 2DE1Ah, 0
		dd 0C0h, 46000000h, 2DE17h, 0
		dd 0C0h, 46000000h, 2DE14h, 0
		dd 0C0h, 46000000h, 2DE03h, 0
		dd 0C0h, 46000000h, 2DE08h, 0
		dd 0C0h, 46000000h, 9F4C2855h, 4B399F79h, 0D4E1D0A8h, 0F3D5E12Dh
		dd 8, 9F4C2855h, 4B399F79h, 0D4E1D0A8h,	0F3D5E12Dh, 5
		dd 9F4C2855h, 4B399F79h, 0D4E1D0A8h, 0F3D5E12Dh, 6, 9F4C2855h
		dd 4B399F79h, 0D4E1D0A8h, 0F3D5E12Dh, 9, 9F4C2855h, 4B399F79h
		dd 0D4E1D0A8h, 0F3D5E12Dh, 2, 9F4C2855h, 4B399F79h, 0D4E1D0A8h
		dd 0F3D5E12Dh, 4, 9F4C2855h, 4B399F79h,	0D4E1D0A8h, 0F3D5E12Dh
		dd 3, 64440490h, 11D14C8Bh, 8808Bh, 31AB136h, 7, 64440490h
		dd 11D14C8Bh, 8808Bh, 31AB136h,	0Ah, 64440490h,	11D14C8Bh
		dd 8808Bh, 31AB136h, 2,	0E6822FEEh, 4D628C17h, 9C8E3C82h
		dd 5C1DBDFCh, 64h, 2579E5D0h, 40841116h, 4F9B9ABDh, 5EDFB47Ch
		dd 64h,	64440490h, 11D14C8Bh, 8808Bh, 31AB136h,	5, 64440490h
		dd 11D14C8Bh, 8808Bh, 31AB136h,	6, 64440490h, 11D14C8Bh
		dd 8808Bh, 31AB136h, 9,	64440490h, 11D14C8Bh, 8808Bh, 31AB136h
		dd 8, 6B8DA074h, 43BC3B5Ch, 2C0A6F88h, 6F0BE0DCh, 64h
		dd 0F29F85E0h, 10684FF9h, 891ABh, 0D9B3272Bh, 2, 0B722BE00h
		dd 101B4E68h, 0AA00BCA2h, 70474000h, 0FC4801A5h, 11CF2BA9h
		dd 0AA0029A2h, 52733D00h, 76h dup(0)
		align 400h
_rdata		ends

; Section 4. (virtual address 0000F000)
; Virtual size			: 0001B3D4 ( 111572.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0300080: Bss Readable Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 40F000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_40F000	dd ?			; DATA XREF: sub_401414+10r
					; sub_401463+6r ...
; CHAR dword_40F004[]
dword_40F004	dd 100h	dup(?)		; DATA XREF: sub_401414+24o
					; sub_40164F+653o ...
; CHAR byte_40F404
byte_40F404	db ?			; DATA XREF: sub_401630+9o
					; sub_40164F+7A6o ...
		align 4
		dd 0FFh	dup(?)
; BYTE Buffer
Buffer		dd ?			; DATA XREF: sub_40164F+77Bo
					; sub_40164F+7B4o ...
		dd 2FFh	dup(?)
; HGLOBAL hMem
hMem		dd ?			; DATA XREF: sub_40164F+CE0r
					; sub_40164F+D2Br ...
; LOGFONTA lf
lf		LOGFONTA <?>		; DATA XREF: sub_40164F+1096w
					; sub_40164F+10E7o
; WCHAR	WideCharStr
WideCharStr	dw ?			; DATA XREF: sub_40164F+17B4o
					; sub_40164F+17F1o
		align 4
		dd 1FFh	dup(?)
; int dword_410C44
dword_410C44	dd ?			; DATA XREF: sub_403E88+6r
					; sub_4040C3+69w ...
; LONG nNumber
nNumber		dd ?			; DATA XREF: sub_403E88+Br
					; sub_403E88+1Dr ...
; HWND dword_410C4C
dword_410C4C	dd ?			; DATA XREF: sub_403F5A+Dr
					; sub_403F5A:loc_403F7Aw ...
dword_410C50	dd 2000h dup(?)		; DATA XREF: sub_404467+E2o
					; sub_404467+137o ...
dword_418C50	dd 6 dup(?)		; DATA XREF: sub_4040C3:loc_4041BFo
					; sub_404467+283o
dword_418C68	dd ?			; DATA XREF: sub_4040C3+B6w
dword_418C6C	dd ?			; DATA XREF: sub_4040C3+C0w
					; sub_4040C3+16Er ...
dword_418C70	dd ?			; DATA XREF: sub_4040C3+101w
					; sub_4040C3+122r
dword_418C74	dd ?			; DATA XREF: sub_4040C3+10Bw
		dd 18h dup(?)
; LONG dword_418CD8
dword_418CD8	dd ?			; DATA XREF: sub_4040C3+31r
					; sub_4040C3+87r ...
dword_418CDC	dd ?			; DATA XREF: sub_4040C3:loc_40413Fr
					; sub_404467+31Cw
; LONG dword_418CE0
dword_418CE0	dd ?			; DATA XREF: sub_4040C3+Br
					; sub_4040C3+DDr ...
dword_418CE4	dd 1000h dup(?)		; DATA XREF: sub_4040C3+8Do
					; sub_4040C3+B6o ...
; LONG lDistanceToMove
lDistanceToMove	dd ?			; DATA XREF: sub_4040C3+13r
					; sub_4040C3+41r ...
dword_41CCE8	dd 2000h dup(?)		; DATA XREF: sub_4040C3+101o
					; sub_4040C3+128o ...
; CHAR NewFileName[1024]
NewFileName	db 400h	dup(?)		; DATA XREF: start+3BCo start+3CEo ...
; HGLOBAL dword_4250E8
dword_4250E8	dd ?			; DATA XREF: sub_404F2C+Br
					; sub_404F54+9r ...
dword_4250EC	dd ?			; DATA XREF: sub_40164F+26F6r
					; sub_405619+4CEr ...
; const	CHAR Data
Data		db ?			; DATA XREF: sub_405281+8Co
					; sub_405281+CBo ...
		align 4
		dd 3FFh	dup(?)
; WNDCLASSA WndClass
WndClass	WNDCLASSA <?>		; DATA XREF: sub_4065F8+279o
					; sub_4065F8+38Bo ...
; HWND dword_426118
dword_426118	dd ?			; DATA XREF: sub_4053AB+B0r
					; sub_405619+510r ...
dword_42611C	dd ?			; DATA XREF: sub_405619+2Cw
					; sub_405619+A0w ...
; HWND dword_426120
dword_426120	dd ?			; DATA XREF: sub_40505F+12r
					; sub_40517C+Ar ...
dword_426124	dd ?			; DATA XREF: sub_40505F+6r
					; sub_405619+6Bw ...
; INT_PTR nResult
nResult		dd ?			; DATA XREF: sub_405619+180r
					; sub_405619+66Fw ...
dword_42612C	dd ?			; DATA XREF: sub_405619+394w
					; sub_405D58+Cr ...
; CHAR dword_426130[]
dword_426130	dd 100h	dup(?)		; DATA XREF: sub_405D58+1E7o
dword_426530	dd ?			; DATA XREF: sub_405D58:loc_405FD9w
					; sub_405D58+4BAr ...
; CHAR RootPathName[1024]
RootPathName	db 400h	dup(?)		; DATA XREF: sub_405D58+2E5o
					; sub_405D58+321o ...
; HGLOBAL dword_426934
dword_426934	dd ?			; DATA XREF: sub_406B2B+84w
					; sub_406B2B+2DBr ...
dword_426938	dd ?			; DATA XREF: sub_406B2B+A1w
					; sub_407447:loc_4074ACr ...
; WNDPROC lpPrevWndFunc
lpPrevWndFunc	dd ?			; DATA XREF: sub_406B2B+CFw
					; sub_407447+D6r
; LPARAM himl
himl		dd ?			; DATA XREF: sub_406B2B+10Ew
					; sub_406B2B+124r ...
dword_426944	dd ?			; DATA XREF: sub_405135+10r
					; sub_405135+32w ...
dword_426948	dd ?			; DATA XREF: sub_406242+191w
					; sub_406242+1B8r ...
; const	CHAR byte_42694C
byte_42694C	db ?			; DATA XREF: sub_407538+27o
					; sub_407538:loc_407571o ...
		align 10h
		dd 1FFh	dup(?)
; struct _STARTUPINFOA StartupInfo
StartupInfo	_STARTUPINFOA <?>	; DATA XREF: sub_407CFB+10w
					; sub_407CFB+1Ao
; CHAR byte_427190
byte_427190	db ?			; DATA XREF: sub_408C37+78o
					; sub_408C37+97o ...
		align 4
		dd 0FFh	dup(?)
; CHAR byte_427590[1024]
byte_427590	db 400h	dup(?)		; DATA XREF: sub_40880F+Bo
					; sub_40880F+1Do ...
; CHAR szShortPath[]
szShortPath	dd ?			; DATA XREF: sub_408996+3Ew
					; sub_408996+77o ...
		dd 0FFh	dup(?)
; CHAR byte_427D90[1024]
byte_427D90	db 400h	dup(?)		; DATA XREF: sub_408996+A6o
					; sub_408996+CDo ...
; CHAR byte_428190[1024]
byte_428190	db 400h	dup(?)		; DATA XREF: sub_408996+E5o
					; sub_408996+21Fo
; struct _WIN32_FIND_DATAA FindFileData
FindFileData	_WIN32_FIND_DATAA <?>	; DATA XREF: sub_4087D7+9o
					; sub_4087D7+2Co
dword_4286D0	dd ?			; DATA XREF: sub_408FC4+31w
					; sub_408FC4+54r
dword_4286D4	dd ?			; DATA XREF: sub_408FC4+1r
		dd 0FEh	dup(?)
dword_428AD0	dd ?			; DATA XREF: sub_40164F+1AEw
					; sub_40164F:loc_40181Cr
		dd 0Dh dup(?)
; int dword_428B08
dword_428B08	dd ?			; DATA XREF: sub_40164F+1A7r
					; sub_40164F+1BFw ...
dword_428B0C	dd ?			; DATA XREF: sub_40148F+26r
					; sub_40164F+1B6Cr ...
dword_428B10	dd ?			; DATA XREF: sub_40164F+80Bw
					; sub_40164F:loc_403D9Dw ...
dword_428B14	dd ?			; DATA XREF: sub_40505F+Br
					; StartAddress+6Dw ...
dword_428B18	dd ?			; DATA XREF: sub_408996:loc_408C27w
dword_428B1C	dd ?			; DATA XREF: sub_40164F:loc_402FC8w
					; start:loc_404DA0r
		dd ?
dword_428B24	dd ?			; DATA XREF: sub_4065F8+CAw
dword_428B28	dd ?			; DATA XREF: sub_4040C3+CFr
					; sub_404467+182w ...
dword_428B2C	dd ?			; DATA XREF: sub_405D58+484w
dword_428B30	dd ?			; DATA XREF: sub_4053AB+55w
					; sub_407DB9+28r
; UINT uExitCode
uExitCode	dd ?			; DATA XREF: start:loc_404D52w
					; start:loc_404EFCr
dword_428B38	dd ?			; DATA XREF: sub_40148F+7r
					; sub_4014F3+17r ...
dword_428B3C	dd ?			; DATA XREF: sub_40164F+852w
					; sub_40164F+879w ...
dword_428B40	dd ?			; DATA XREF: sub_40164F:loc_402ADFr
					; start+9Aw ...
dword_428B44	dd ?			; DATA XREF: sub_406B2B+74w
					; sub_406B2B+6B0w
dword_428B48	dd ?			; DATA XREF: sub_401000+38r
					; sub_401388+1Cr ...
dword_428B4C	dd ?			; DATA XREF: sub_404467+398o
					; sub_405619+BAr
dword_428B50	dd ?			; DATA XREF: sub_405619+142r
					; sub_405619+165r
dword_428B54	dd ?			; DATA XREF: sub_401220+1r
					; sub_40128F+Cr ...
dword_428B58	dd ?			; DATA XREF: sub_401220:loc_401280r
					; sub_40128F:loc_40132Br ...
dword_428B5C	dd ?			; DATA XREF: sub_403DAD+1Ar
		dd ?
dword_428B64	dd ?			; DATA XREF: sub_406242:loc_406276r
					; sub_4065F8+FCr ...
		dd ?
dword_428B6C	dd ?			; DATA XREF: sub_4053AB+24r
dword_428B70	dd ?			; DATA XREF: sub_4053AB+15r
dword_428B74	dd ?			; DATA XREF: sub_40164F:loc_4025C3r
		dd 3 dup(?)
dword_428B84	dd ?			; DATA XREF: sub_4042B2+10r
		dd ?
dword_428B8C	dd ?			; DATA XREF: sub_403F5A+50r
					; sub_4040C3+26w ...
dword_428B90	dd ?			; DATA XREF: sub_404467+359w
					; sub_4065F8+C5r ...
dword_428B94	dd ?			; DATA XREF: sub_404467+35Er
					; sub_404467+36Cw ...
; SIZE_T dwBytes
dwBytes		dd ?			; DATA XREF: sub_40164F+2389r
					; sub_404467:loc_404542r ...
dword_428B9C	dd ?			; DATA XREF: start+82w	sub_4083A6+15Dr
; HWND hwnd
hwnd		dd ?			; DATA XREF: sub_401000+20r
					; sub_40164F+13r ...
; HINSTANCE hInstance
hInstance	dd ?			; DATA XREF: sub_403F5A:loc_403FF7r
					; start+119w ...
; CHAR chText[2048]
chText		db 800h	dup(?)		; DATA XREF: sub_401000+1B3o start+DAo ...
dword_4293A8	dd ?			; DATA XREF: sub_40164F:loc_4016FCw
					; sub_4050FD+Bw ...
; HWND hWnd
hWnd		dd ?			; DATA XREF: sub_40164F:loc_401871r
					; sub_407678+68w ...
; HWND dword_4293B0
dword_4293B0	dd ?			; DATA XREF: sub_40164F:loc_40188Ar
					; sub_407538+9r ...
dword_4293B4	dd ?			; DATA XREF: sub_403DAD+56r
					; sub_403DAD+68w ...
; LONG dwNewLong
dwNewLong	dd ?			; DATA XREF: sub_405619+77r
					; sub_4065F8+243w
; int nDenominator
nDenominator	dd ?			; DATA XREF: sub_403DAD+50r
					; sub_407678+C4w
; HWND hDlg
hDlg		dd ?			; DATA XREF: sub_4050CB+6r
					; sub_405281+110r ...
dword_4293C4	dd ?			; DATA XREF: sub_4053AB+4Cw
					; sub_405619:loc_4059DEr ...
; HWND dword_4293C8
dword_4293C8	dd ?			; DATA XREF: sub_407538+86r
					; sub_407678+7Cw ...
dword_4293CC	dd ?			; DATA XREF: sub_4053AB:loc_405426w
					; sub_405D58:loc_406173r ...
; const	CHAR OutputString
OutputString	db ?			; DATA XREF: sub_408780+7o
					; sub_408780+11w ...
		align 4
		dd 1FFh	dup(?)
; const	CHAR String1
String1		db ?			; DATA XREF: sub_405D58+258o
					; sub_405D58+26Bo ...
; CHAR byte_429BD1[]
byte_429BD1	db 3 dup(?)		; DATA XREF: sub_4065F8+14Co
					; sub_4065F8+151o
		dd 1FFh	dup(?)
dword_42A3D0	dd ?			; DATA XREF: sub_40164F+2553w
					; sub_405D58+78w ...
		align 1000h
_bss		ends

; Section 5. (virtual address 0002B000)
; Virtual size			: 00001314 (   4884.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 0000C800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata


;
; Imports from ADVAPI32.dll
;
; LSTATUS __stdcall RegCloseKey(HKEY hKey)
		extrn RegCloseKey:dword	; CODE XREF: sub_4014F3+59p
					; sub_4014F3+B7p ...
; LSTATUS __stdcall RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey,	DWORD Reserved,	LPSTR lpClass, DWORD dwOptions,	REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
		extrn RegCreateKeyExA:dword ; CODE XREF: sub_40164F+1C1Dp
					; DATA XREF: sub_40164F+1C1Dr
; LSTATUS __stdcall RegDeleteKeyA(HKEY hKey, LPCSTR lpSubKey)
		extrn RegDeleteKeyA:dword ; CODE XREF: sub_4014F3+104p
					; DATA XREF: sub_4014F3+104r
; LSTATUS __stdcall RegDeleteValueA(HKEY hKey, LPCSTR lpValueName)
		extrn RegDeleteValueA:dword ; CODE XREF: sub_40164F+1B07p
					; DATA XREF: sub_40164F+1B07r
; LSTATUS __stdcall RegEnumKeyA(HKEY hKey, DWORD dwIndex, LPSTR	lpName,	DWORD cchName)
		extrn RegEnumKeyA:dword	; CODE XREF: sub_40164F+1F06p
					; DATA XREF: sub_4014F3:loc_40156Cr ...
; LSTATUS __stdcall RegEnumValueA(HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
		extrn RegEnumValueA:dword ; CODE XREF: sub_40164F+1F49p
					; DATA XREF: sub_40164F+1F49r
; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY	phkResult)
		extrn RegOpenKeyExA:dword ; CODE XREF: sub_40148F+4Cp
					; sub_4014F3+38p ...
; LSTATUS __stdcall RegQueryValueExA(HKEY hKey,	LPCSTR lpValueName, LPDWORD lpReserved,	LPDWORD	lpType,	LPBYTE lpData, LPDWORD lpcbData)
		extrn RegQueryValueExA:dword ; CODE XREF: sub_40164F+1E37p
					; sub_408127+75p
					; DATA XREF: ...
; LSTATUS __stdcall RegSetValueExA(HKEY	hKey, LPCSTR lpValueName, DWORD	Reserved, DWORD	dwType,	const BYTE *lpData, DWORD cbData)
		extrn RegSetValueExA:dword ; CODE XREF:	sub_40164F+1D77p
					; DATA XREF: sub_40164F+1D77r
; BOOL __stdcall SetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor)
		extrn SetFileSecurityA:dword ; CODE XREF: sub_407C2C+82p
					; DATA XREF: sub_407C2C+82r

;
; Imports from COMCTL32.DLL
;
; int __stdcall	ImageList_AddMasked(HIMAGELIST himl, HBITMAP hbmImage, COLORREF	crMask)
		extrn ImageList_AddMasked:dword	; CODE XREF: sub_406B2B+11Ep
					; DATA XREF: sub_406B2B+11Er
; HIMAGELIST __stdcall ImageList_Create(int cx,	int cy,	UINT flags, int	cInitial, int cGrow)
		extrn ImageList_Create:dword ; CODE XREF: sub_406B2B+FBp
					; DATA XREF: sub_406B2B+FBr
; BOOL __stdcall ImageList_Destroy(HIMAGELIST himl)
		extrn ImageList_Destroy:dword ;	CODE XREF: sub_406B2B+682p
					; DATA XREF: sub_406B2B+682r
; void __stdcall InitCommonControls()
		extrn InitCommonControls:dword ; CODE XREF: start+87p
					; DATA XREF: start+87r

;
; Imports from GDI32.dll
;
; HBRUSH __stdcall CreateBrushIndirect(const LOGBRUSH *plbrush)
		extrn CreateBrushIndirect:dword	; CODE XREF: sub_401000+EEp
					; sub_40553D+C5p
					; DATA XREF: ...
; HFONT	__stdcall CreateFontIndirectA(const LOGFONTA *lplf)
		extrn CreateFontIndirectA:dword	; CODE XREF: sub_401000+13Cp
					; sub_40164F+10EEp
					; DATA XREF: ...
; BOOL __stdcall DeleteObject(HGDIOBJ ho)
		extrn DeleteObject:dword ; CODE	XREF: sub_401000+115p
					; sub_401000+1D8p ...
; int __stdcall	GetDeviceCaps(HDC hdc, int index)
		extrn GetDeviceCaps:dword ; CODE XREF: sub_40164F+1068p
					; DATA XREF: sub_40164F+1068r
; HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
		extrn SelectObject:dword ; CODE	XREF: sub_401000+18Dp
					; sub_401000+1D1p
					; DATA XREF: ...
; COLORREF __stdcall SetBkColor(HDC hdc, COLORREF color)
		extrn SetBkColor:dword	; CODE XREF: sub_40553D+9Ap
					; DATA XREF: sub_40553D+9Ar
; int __stdcall	SetBkMode(HDC hdc, int mode)
		extrn SetBkMode:dword	; CODE XREF: sub_401000+166p
					; sub_40553D+69p
					; DATA XREF: ...
; COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color)
		extrn SetTextColor:dword ; CODE	XREF: sub_401000+178p
					; sub_40553D+57p
					; DATA XREF: ...

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: sub_40164F+8CCp
					; sub_40164F+12DBp ...
; LONG __stdcall CompareFileTime(const FILETIME	*lpFileTime1, const FILETIME *lpFileTime2)
		extrn CompareFileTime:dword ; CODE XREF: sub_40164F+6C0p
					; DATA XREF: sub_40164F+6C0r
; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
		extrn CopyFileA:dword	; CODE XREF: start+3F7p
					; DATA XREF: start+395r
; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
		extrn CreateDirectoryA:dword ; CODE XREF: sub_407C2C+54p
					; sub_407CCD+14p
					; DATA XREF: ...
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD	dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,	DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE	hTemplateFile)
		extrn CreateFileA:dword	; CODE XREF: sub_404467+2DBp
					; sub_408059+4Cp
					; DATA XREF: ...
; BOOL __stdcall CreateProcessA(LPCSTR lpApplicationName, LPSTR	lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES	lpThreadAttributes, BOOL bInheritHandles, DWORD	dwCreationFlags, LPVOID	lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo,	LPPROCESS_INFORMATION lpProcessInformation)
		extrn CreateProcessA:dword ; CODE XREF:	sub_407CFB+5Dp
					; DATA XREF: sub_407CFB+5Dr
; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags,	LPDWORD	lpThreadId)
		extrn CreateThread:dword ; CODE	XREF: sub_407678+304p
					; DATA XREF: sub_407678+304r
; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
		extrn DeleteFileA:dword	; CODE XREF: sub_40164F+2510p
					; start+249p ...
; void __stdcall __noreturn ExitProcess(UINT uExitCode)
		extrn ExitProcess:dword	; CODE XREF: start:loc_404F0Ap
					; DATA XREF: start:loc_404F0Ar
; DWORD	__stdcall ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR	lpDst, DWORD nSize)
		extrn ExpandEnvironmentStringsA:dword ;	CODE XREF: sub_40164F+B86p
					; DATA XREF: sub_40164F+B86r
; BOOL __stdcall FindClose(HANDLE hFindFile)
		extrn FindClose:dword	; CODE XREF: sub_40164F+224Dp
					; sub_4087D7+26p ...
; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA	lpFindFileData)
		extrn FindFirstFileA:dword ; CODE XREF:	sub_40164F+22D3p
					; sub_4087D7+14p ...
; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
		extrn FindNextFileA:dword ; CODE XREF: sub_40164F+2284p
					; sub_408C37+228p
					; DATA XREF: ...
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; CODE XREF: sub_40164F+15A5p
					; sub_404F54+35p
					; DATA XREF: ...
; LPSTR	__stdcall GetCommandLineA()
		extrn GetCommandLineA:dword ; CODE XREF: start+E8p
					; DATA XREF: start+E8r
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: start+51Ep
					; DATA XREF: start+51Er
; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
		extrn GetDiskFreeSpaceA:dword ;	CODE XREF: sub_405D58+3C4p
					; DATA XREF: sub_405D58+3C4r
; BOOL __stdcall GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode)
		extrn GetExitCodeProcess:dword ; CODE XREF: sub_40164F+12A4p
					; DATA XREF: sub_40164F+12A4r
; DWORD	__stdcall GetFileAttributesA(LPCSTR lpFileName)
		extrn GetFileAttributesA:dword ; CODE XREF: sub_40164F+359p
					; sub_4065F8+18Dp ...
; DWORD	__stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
		extrn GetFileSize:dword	; CODE XREF: sub_404467+B3p
					; sub_408996+147p
					; DATA XREF: ...
; DWORD	__stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
		extrn GetFullPathNameA:dword ; CODE XREF: sub_40164F+50Dp
					; DATA XREF: sub_40164F+50Dr
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_40164F+32Dp
					; sub_40164F+33Ap ...
; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename,	DWORD nSize)
		extrn GetModuleFileNameA:dword ; CODE XREF: sub_404467+3Bp
					; DATA XREF: sub_404467+3Br
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_40164F+14BEp
					; start+107p ...
; DWORD	__stdcall GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName)
		extrn GetPrivateProfileStringA:dword ; CODE XREF: sub_40164F+1AA4p
					; DATA XREF: sub_40164F+1AA4r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_40164F+14F8p
					; sub_40894A+3Bp
					; DATA XREF: ...
; DWORD	__stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
		extrn GetShortPathNameA:dword ;	CODE XREF: sub_40164F+58Bp
					; sub_408996+82p ...
; UINT __stdcall GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize)
		extrn GetSystemDirectoryA:dword	; CODE XREF: sub_4083A6+131p
					; sub_4088C6+1Bp
					; DATA XREF: ...
; UINT __stdcall GetTempFileNameA(LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR	lpTempFileName)
		extrn GetTempFileNameA:dword ; CODE XREF: sub_4080B5+51p
					; DATA XREF: sub_4080B5+51r
; DWORD	__stdcall GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer)
		extrn GetTempPathA:dword ; CODE	XREF: start+1F7p
					; DATA XREF: start+1F7r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_403F5A:loc_403FA4p
					; sub_4040C3+19p ...
; DWORD	__stdcall GetVersion()
		extrn GetVersion:dword	; CODE XREF: start+1Ap	sub_4083A6+84p
					; DATA XREF: ...
; UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize)
		extrn GetWindowsDirectoryA:dword ; CODE	XREF: start+217p
					; sub_4083A6+14Dp
					; DATA XREF: ...
; HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes)
		extrn GlobalAlloc:dword	; CODE XREF: sub_40164F+DB8p
					; sub_40164F+13C6p ...
; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
		extrn GlobalFree:dword	; CODE XREF: sub_40164F+D9Bp
					; sub_40164F+1484p ...
; LPVOID __stdcall GlobalLock(HGLOBAL hMem)
		extrn GlobalLock:dword	; CODE XREF: sub_407678+52Ap
					; DATA XREF: sub_407678+52Ar
; BOOL __stdcall GlobalUnlock(HGLOBAL hMem)
		extrn GlobalUnlock:dword ; CODE	XREF: sub_407678+573p
					; DATA XREF: sub_407678+573r
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn LoadLibraryA:dword ; CODE	XREF: sub_4088C6+76p
					; DATA XREF: sub_4088C6+76r
; HMODULE __stdcall LoadLibraryExA(LPCSTR lpLibFileName, HANDLE	hFile, DWORD dwFlags)
		extrn LoadLibraryExA:dword ; CODE XREF:	sub_40164F+14DEp
					; DATA XREF: sub_40164F+14DEr
; BOOL __stdcall MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
		extrn MoveFileA:dword	; CODE XREF: sub_40164F+469p
					; DATA XREF: sub_40164F+469r
; int __stdcall	MulDiv(int nNumber, int	nNumerator, int	nDenominator)
		extrn MulDiv:dword	; CODE XREF: sub_40164F+108Bp
					; sub_403DAD+70p ...
; int __stdcall	MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr,	int cchWideChar)
		extrn MultiByteToWideChar:dword	; CODE XREF: sub_40164F+17D7p
					; DATA XREF: sub_40164F+17D7r
; void __stdcall OutputDebugStringA(LPCSTR lpOutputString)
		extrn OutputDebugStringA:dword ; CODE XREF: sub_408780+4Bp
					; DATA XREF: sub_408780+4Br
; BOOL __stdcall ReadFile(HANDLE hFile,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
		extrn ReadFile:dword	; CODE XREF: sub_40164F+20F1p
					; sub_404045+2Cp ...
; BOOL __stdcall RemoveDirectoryA(LPCSTR lpPathName)
		extrn RemoveDirectoryA:dword ; CODE XREF: sub_408C37+2A8p
					; DATA XREF: sub_408C37+2A8r
; DWORD	__stdcall SearchPathA(LPCSTR lpPath, LPCSTR lpFileName,	LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
		extrn SearchPathA:dword	; CODE XREF: sub_40164F+5C9p
					; DATA XREF: sub_40164F+5C9r
; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
		extrn SetCurrentDirectoryA:dword ; CODE	XREF: sub_40164F+3C2p
					; start+355p
					; DATA XREF: ...
; UINT __stdcall SetErrorMode(UINT uMode)
		extrn SetErrorMode:dword ; CODE	XREF: start+13p
					; DATA XREF: start+13r
; BOOL __stdcall SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes)
		extrn SetFileAttributesA:dword ; CODE XREF: sub_40164F+290p
					; sub_408027+23p
					; DATA XREF: ...
; DWORD	__stdcall SetFilePointer(HANDLE	hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
		extrn SetFilePointer:dword ; CODE XREF:	sub_40164F+216Fp
					; sub_40164F+2206p ...
; BOOL __stdcall SetFileTime(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
		extrn SetFileTime:dword	; CODE XREF: sub_40164F+8BEp
					; DATA XREF: sub_40164F+8BEr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_40164F+172p
					; DATA XREF: sub_40164F+172r
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: sub_40164F+128Fp
					; DATA XREF: sub_40164F+1269r
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,	LPDWORD	lpNumberOfBytesWritten,	LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; CODE XREF: sub_40164F+2063p
					; sub_40164F+249Fp ...
; BOOL __stdcall WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName,	LPCSTR lpString, LPCSTR	lpFileName)
		extrn WritePrivateProfileStringA:dword ; CODE XREF: sub_40164F+1A38p
					; DATA XREF: sub_40164F+1A38r
; LPSTR	__stdcall lstrcatA(LPSTR lpString1, LPCSTR lpString2)
		extrn lstrcatA:dword	; CODE XREF: sub_407E2D+35p
					; sub_4083A6+208p ...
; int __stdcall	lstrcmpA(LPCSTR	lpString1, LPCSTR lpString2)
		extrn lstrcmpA:dword	; CODE XREF: sub_40164F:loc_4021A1p
					; sub_40164F+BA8p
					; DATA XREF: ...
; int __stdcall	lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
		extrn lstrcmpiA:dword	; CODE XREF: sub_40164F+B4Ap
					; start+326p ...
; LPSTR	__stdcall lstrcpynA(LPSTR lpString1, LPCSTR lpString2, int iMaxLength)
		extrn lstrcpynA:dword	; CODE XREF: sub_405135+21p
					; sub_408294+1Bp
					; DATA XREF: ...
; int __stdcall	lstrlenA(LPCSTR	lpString)
		extrn lstrlenA:dword	; CODE XREF: sub_407E2D+Dp
					; sub_407EA3+Ep ...

;
; Imports from ole32.dll
;
; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN	pUnkOuter, DWORD dwClsContext, const IID *const	riid, LPVOID *ppv)
		extrn CoCreateInstance:dword ; CODE XREF: sub_40164F+16C1p
					; DATA XREF: sub_40164F+16C1r
; void __stdcall CoTaskMemFree(LPVOID pv)
		extrn CoTaskMemFree:dword ; CODE XREF: sub_405D58+217p
					; sub_4083A6+1D9p
					; DATA XREF: ...
; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
		extrn OleInitialize:dword ; CODE XREF: start+94p
					; StartAddress+27p
					; DATA XREF: ...
; void __stdcall OleUninitialize()
		extrn OleUninitialize:dword ; CODE XREF: start+49Bp
					; StartAddress+96p
					; DATA XREF: ...

;
; Imports from SHELL32.DLL
;
; LPITEMIDLIST __stdcall SHBrowseForFolderA(LPBROWSEINFOA lpbi)
		extrn SHBrowseForFolderA:dword ; CODE XREF: sub_405D58+205p
					; DATA XREF: sub_405D58+205r
; int __stdcall	SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
		extrn SHFileOperationA:dword ; CODE XREF: sub_40164F+1916p
					; DATA XREF: sub_40164F+1916r
; DWORD_PTR __stdcall SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi,	UINT cbFileInfo, UINT uFlags)
		extrn SHGetFileInfoA:dword ; CODE XREF:	start+C9p
					; DATA XREF: start+C9r
; BOOL __stdcall SHGetPathFromIDListA(LPCITEMIDLIST pidl, LPSTR	pszPath)
		extrn SHGetPathFromIDListA:dword ; CODE	XREF: sub_4054A3+4Dp
					; sub_4083A6+1C8p
					; DATA XREF: ...
; HRESULT __stdcall SHGetSpecialFolderLocation(HWND hwnd, int csidl, LPITEMIDLIST *ppidl)
		extrn SHGetSpecialFolderLocation:dword ; CODE XREF: sub_4083A6+1B1p
					; DATA XREF: sub_4083A6+1B1r
; HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
		extrn ShellExecuteA:dword ; CODE XREF: sub_40164F+11C8p
					; sub_406242+2F0p
					; DATA XREF: ...

;
; Imports from USER32.dll
;
; BOOL __stdcall AppendMenuA(HMENU hMenu, UINT uFlags, UINT_PTR	uIDNewItem, LPCSTR lpNewItem)
		extrn AppendMenuA:dword	; CODE XREF: sub_407678+447p
					; DATA XREF: sub_407678+447r
; HDC __stdcall	BeginPaint(HWND	hWnd, LPPAINTSTRUCT lpPaint)
		extrn BeginPaint:dword	; CODE XREF: sub_401000+45p
					; DATA XREF: sub_401000+45r
; LRESULT __stdcall CallWindowProcA(WNDPROC lpPrevWndFunc, HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn CallWindowProcA:dword ; CODE XREF: sub_407447+DEp
					; DATA XREF: sub_407447+DEr
; LPSTR	__stdcall CharNextA(LPCSTR lpsz)
		extrn CharNextA:dword	; CODE XREF: start+144p sub_407E73+1Bp ...
; LPSTR	__stdcall CharPrevA(LPCSTR lpszStart, LPCSTR lpszCurrent)
		extrn CharPrevA:dword	; CODE XREF: sub_407E2D+1Dp
					; sub_407EA3+29p ...
; BOOL __stdcall CheckDlgButton(HWND hDlg, int nIDButton, UINT uCheck)
		extrn CheckDlgButton:dword ; CODE XREF:	sub_406242+9Ap
					; DATA XREF: sub_406242+9Ar
; BOOL __stdcall CloseClipboard()
		extrn CloseClipboard:dword ; CODE XREF:	sub_407678+58Dp
					; DATA XREF: sub_407678+58Dr
; HWND __stdcall CreateDialogParamA(HINSTANCE hInstance, LPCSTR	lpTemplateName,	HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
		extrn CreateDialogParamA:dword ; CODE XREF: sub_403F5A+C5p
					; sub_405619+3F0p
					; DATA XREF: ...
; HMENU	__stdcall CreatePopupMenu()
		extrn CreatePopupMenu:dword ; CODE XREF: sub_407678+412p
					; DATA XREF: sub_407678+412r
; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y,	int nWidth, int	nHeight, HWND hWndParent, HMENU	hMenu, HINSTANCE hInstance, LPVOID lpParam)
		extrn CreateWindowExA:dword ; CODE XREF: sub_4065F8+315p
					; DATA XREF: sub_4065F8+315r
; LRESULT __stdcall DefWindowProcA(HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn DefWindowProcA:dword ; CODE XREF:	sub_401000+20Dp
					; DATA XREF: sub_401000+20Dr
; BOOL __stdcall DestroyWindow(HWND hWnd)
		extrn DestroyWindow:dword ; CODE XREF: sub_403F5A+19p
					; sub_405619+17Ap ...
; INT_PTR __stdcall DialogBoxParamA(HINSTANCE hInstance, LPCSTR	lpTemplateName,	HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
		extrn DialogBoxParamA:dword ; CODE XREF: sub_4065F8+40Ep
					; DATA XREF: sub_4065F8+40Er
; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
		extrn DispatchMessageA:dword ; CODE XREF: sub_408F75+1Ap
					; DATA XREF: sub_408F75+1Ar
; int __stdcall	DrawTextA(HDC hdc, LPCSTR lpchText, int	cchText, LPRECT	lprc, UINT format)
		extrn DrawTextA:dword	; CODE XREF: sub_401000+1BBp
					; DATA XREF: sub_401000+1BBr
; BOOL __stdcall EmptyClipboard()
		extrn EmptyClipboard:dword ; CODE XREF:	sub_407678+50Cp
					; DATA XREF: sub_407678+50Cr
; BOOL __stdcall EnableMenuItem(HMENU hMenu, UINT uIDEnableItem, UINT uEnable)
		extrn EnableMenuItem:dword ; CODE XREF:	sub_405619+2A4p
					; DATA XREF: sub_405619+2A4r
; BOOL __stdcall EnableWindow(HWND hWnd, BOOL bEnable)
		extrn EnableWindow:dword ; CODE	XREF: sub_40164F:loc_40279Cp
					; sub_40517C+12p ...
; BOOL __stdcall EndDialog(HWND	hDlg, INT_PTR nResult)
		extrn EndDialog:dword	; CODE XREF: sub_405619+197p
					; DATA XREF: sub_405619+197r
; BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint)
		extrn EndPaint:dword	; CODE XREF: sub_401000+1ECp
					; DATA XREF: sub_401000+1ECr
; BOOL __stdcall ExitWindowsEx(UINT uFlags, DWORD dwReason)
		extrn ExitWindowsEx:dword ; CODE XREF: start+606p
					; DATA XREF: start+606r
; int __stdcall	FillRect(HDC hDC, const	RECT *lprc, HBRUSH hbr)
		extrn FillRect:dword	; CODE XREF: sub_401000+109p
					; DATA XREF: sub_401000+109r
; HWND __stdcall FindWindowExA(HWND hWndParent,	HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow)
		extrn FindWindowExA:dword ; CODE XREF: sub_40164F+EE7p
					; DATA XREF: sub_40164F+EE7r
; SHORT	__stdcall GetAsyncKeyState(int vKey)
		extrn GetAsyncKeyState:dword ; CODE XREF: sub_405D58+B0p
					; DATA XREF: sub_405D58+B0r
; BOOL __stdcall GetClassInfoA(HINSTANCE hInstance, LPCSTR lpClassName,	LPWNDCLASSA lpWndClass)
		extrn GetClassInfoA:dword ; CODE XREF: sub_4065F8+3A2p
					; sub_4065F8+3C2p
					; DATA XREF: ...
; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
		extrn GetClientRect:dword ; CODE XREF: sub_401000+63p
					; sub_40164F+FC6p ...
; HDC __stdcall	GetDC(HWND hWnd)
		extrn GetDC:dword	; CODE XREF: sub_40164F+1056p
					; DATA XREF: sub_40164F+1056r
; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
		extrn GetDlgItem:dword	; CODE XREF: sub_40164F+F57p
					; sub_40164F+FAFp ...
; UINT __stdcall GetDlgItemTextA(HWND hDlg, int	nIDDlgItem, LPSTR lpString, int	cchMax)
		extrn GetDlgItemTextA:dword ; CODE XREF: sub_407D88+24p
					; DATA XREF: sub_407D88+24r
; DWORD	__stdcall GetMessagePos()
		extrn GetMessagePos:dword ; CODE XREF: sub_406A6D+38p
					; DATA XREF: sub_406A6D+38r
; DWORD	__stdcall GetSysColor(int nIndex)
		extrn GetSysColor:dword	; CODE XREF: sub_40553D+43p
					; sub_40553D+80p ...
; HMENU	__stdcall GetSystemMenu(HWND hWnd, BOOL	bRevert)
		extrn GetSystemMenu:dword ; CODE XREF: sub_405619+27Fp
					; sub_405619:loc_4058A6p
					; DATA XREF: ...
; int __stdcall	GetSystemMetrics(int nIndex)
		extrn GetSystemMetrics:dword ; CODE XREF: sub_407678+107p
					; DATA XREF: sub_407678+107r
; LONG __stdcall GetWindowLongA(HWND hWnd, int nIndex)
		extrn GetWindowLongA:dword ; CODE XREF:	sub_40553D+26p
					; sub_406B2B+3CFp
					; DATA XREF: ...
; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
		extrn GetWindowRect:dword ; CODE XREF: sub_405619+430p
					; sub_407678+460p
					; DATA XREF: ...
; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
		extrn InvalidateRect:dword ; CODE XREF:	sub_40164F+273Dp
					; sub_406B2B+87Ap
					; DATA XREF: ...
; UINT __stdcall IsDlgButtonChecked(HWND hDlg, int nIDButton)
		extrn IsDlgButtonChecked:dword ; CODE XREF: sub_405D58+70p
					; DATA XREF: sub_405D58+70r
; BOOL __stdcall IsWindow(HWND hWnd)
		extrn IsWindow:dword	; CODE XREF: sub_40164F+F1Fp
					; DATA XREF: sub_40164F+F1Fr
; BOOL __stdcall IsWindowEnabled(HWND hWnd)
		extrn IsWindowEnabled:dword ; CODE XREF: sub_405619+61Cp
					; DATA XREF: sub_405619+61Cr
; BOOL __stdcall IsWindowVisible(HWND hWnd)
		extrn IsWindowVisible:dword ; CODE XREF: sub_407447+3Cp
					; DATA XREF: sub_407447+3Cr
; HBITMAP __stdcall LoadBitmapA(HINSTANCE hInstance, LPCSTR lpBitmapName)
		extrn LoadBitmapA:dword	; CODE XREF: sub_406B2B+9Bp
					; DATA XREF: sub_406B2B+9Br
; HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName)
		extrn LoadCursorA:dword	; CODE XREF: sub_406242+2B6p
					; DATA XREF: sub_406242+29Br
; HANDLE __stdcall LoadImageA(HINSTANCE	hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad)
		extrn LoadImageA:dword	; CODE XREF: sub_40164F+100Dp
					; sub_4065F8+236p
					; DATA XREF: ...
; int __stdcall	MessageBoxIndirectA(const MSGBOXPARAMSA	*lpmbp)
		extrn MessageBoxIndirectA:dword	; CODE XREF: sub_407DB9+69p
					; DATA XREF: sub_407DB9+69r
; BOOL __stdcall OpenClipboard(HWND hWndNewOwner)
		extrn OpenClipboard:dword ; CODE XREF: sub_407678+505p
					; DATA XREF: sub_407678+505r
; BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND	hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg)
		extrn PeekMessageA:dword ; CODE	XREF: sub_408F75+3Cp
					; DATA XREF: sub_408F75+Fr
; void __stdcall PostQuitMessage(int nExitCode)
		extrn PostQuitMessage:dword ; CODE XREF: sub_40164F+D2p
					; DATA XREF: sub_40164F+D2r
; ATOM __stdcall RegisterClassA(const WNDCLASSA	*lpWndClass)
		extrn RegisterClassA:dword ; CODE XREF:	sub_4065F8+280p
					; sub_4065F8+3D8p
					; DATA XREF: ...
; BOOL __stdcall ScreenToClient(HWND hWnd, LPPOINT lpPoint)
		extrn ScreenToClient:dword ; CODE XREF:	sub_405619+43Fp
					; sub_406A6D+54p
					; DATA XREF: ...
; LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn SendMessageA:dword ; CODE	XREF: sub_40164F+EA5p
					; sub_40164F+102Dp ...
; LRESULT __stdcall SendMessageTimeoutA(HWND hWnd, UINT	Msg, WPARAM wParam, LPARAM lParam, UINT	fuFlags, UINT uTimeout,	PDWORD_PTR lpdwResult)
		extrn SendMessageTimeoutA:dword	; CODE XREF: sub_40164F+E84p
					; DATA XREF: sub_40164F+E84r
; DWORD	__stdcall SetClassLongA(HWND hWnd, int nIndex, LONG dwNewLong)
		extrn SetClassLongA:dword ; CODE XREF: sub_405619+8Bp
					; DATA XREF: sub_405619+8Br
; HANDLE __stdcall SetClipboardData(UINT uFormat, HANDLE hMem)
		extrn SetClipboardData:dword ; CODE XREF: sub_407678+585p
					; DATA XREF: sub_407678+585r
; HCURSOR __stdcall SetCursor(HCURSOR hCursor)
		extrn SetCursor:dword	; CODE XREF: sub_406242+2C3p
					; sub_406242+312p
					; DATA XREF: ...
; BOOL __stdcall SetDlgItemTextA(HWND hDlg, int	nIDDlgItem, LPCSTR lpString)
		extrn SetDlgItemTextA:dword ; DATA XREF: sub_407D7D+1r
; BOOL __stdcall SetForegroundWindow(HWND hWnd)
		extrn SetForegroundWindow:dword	; CODE XREF: sub_40164F+195p
					; DATA XREF: sub_40164F+195r
; UINT_PTR __stdcall SetTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc)
		extrn SetTimer:dword	; CODE XREF: DialogFunc+30p
					; DATA XREF: DialogFunc+30r
; LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong)
		extrn SetWindowLongA:dword ; CODE XREF:	sub_40164F+F94p
					; sub_405619+5BDp ...
; BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags)
		extrn SetWindowPos:dword ; CODE	XREF: sub_405619+47Fp
					; sub_405619+544p
					; DATA XREF: ...
; BOOL __stdcall SetWindowTextA(HWND hWnd, LPCSTR lpString)
		extrn SetWindowTextA:dword ; CODE XREF:	DialogFunc+76p
					; sub_4053AB+B8p ...
; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
		extrn ShowWindow:dword	; CODE XREF: sub_40164F+233p
					; sub_40164F+254p ...
; BOOL __stdcall SystemParametersInfoA(UINT uiAction, UINT uiParam, PVOID pvParam, UINT	fWinIni)
		extrn SystemParametersInfoA:dword ; CODE XREF: sub_4065F8+2B0p
					; DATA XREF: sub_4065F8+2B0r
; BOOL __stdcall TrackPopupMenu(HMENU hMenu, UINT uFlags, int x, int y,	int nReserved, HWND hWnd, const	RECT *prcRect)
		extrn TrackPopupMenu:dword ; CODE XREF:	sub_407678+4A1p
					; DATA XREF: sub_407678+4A1r
; int wsprintfA(LPSTR, LPCSTR, ...)
		extrn wsprintfA:dword	; CODE XREF: sub_40164F+CD2p
					; DialogFunc+69p ...
; int __stdcall	wvsprintfA(LPSTR, LPCSTR, va_list arglist)
		extrn wvsprintfA:dword	; CODE XREF: sub_408780+32p
					; DATA XREF: sub_408780+32r


; Section 6. (virtual address 0002D000)
; Virtual size			: 0000B000 (  45056.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 0000DC00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_ndata		segment	dword public 'DATA' use32
		assume cs:_ndata
		;org 42D000h
; CHAR dword_42D000[]
dword_42D000	dd 0			; DATA XREF: sub_40160F+Fo
					; sub_40164F+37o ...
		align 400h
word_42D400	dw ?			; DATA XREF: start+39Bw
					; start:loc_404D2Dw
		align 4
		dd 12FFh dup(?)
; const	CHAR byte_432000
byte_432000	db ?			; DATA XREF: start+EEo	start+112r ...
; CHAR byte_432001[]
byte_432001	db 3 dup(?)		; DATA XREF: start+10Do
		align 400h
; CHAR byte_432400
byte_432400	db ?			; DATA XREF: start+1B4o start+2C6o ...
		align 400h
; CHAR Directory[1024]
Directory	db 400h	dup(?)		; DATA XREF: sub_40164F+3B1o
					; sub_40164F:loc_401CB0o ...
; CHAR String2[1024]
String2		db 400h	dup(?)		; DATA XREF: sub_404467+7Bo
					; sub_404467+89o ...
; CHAR FileName[]
FileName	dd ?			; DATA XREF: sub_404824+4Ao
					; start:loc_404B1Fo ...
		align 400h
; CHAR szStart[1024]
szStart		db 400h	dup(?)		; DATA XREF: sub_404467+294o
					; sub_404824+6o ...
; CHAR dword_433800[]
dword_433800	dd 100h	dup(?)		; DATA XREF: sub_40487E+4Fo
; CHAR ExistingFileName[1024]
ExistingFileName db 400h dup(?)		; DATA XREF: sub_404467+22o
					; sub_404467+54o ...
; CHAR dword_434000[]
dword_434000	dd 200h	dup(?)		; DATA XREF: sub_404467+9Ao
; CHAR dword_434800[]
dword_434800	dd 0E00h dup(?)		; DATA XREF: sub_405619+1AFo
_ndata		ends


		end start
