;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8D34A72DE3096B9883992742179C13AC
; Input	CRC32 :	928EB3FB

; File Name   :	C:\compspace\compare\gpg\dlls\full\pango-querymodules.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001418 (   5144.)
; Section size in file		: 00001600 (   5632.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401000	proc near		; CODE XREF: sub_402070+31p
					; sub_4023E8+12p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:atexit
		leave
		jmp	eax
sub_401000	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:_onexit
		leave
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_401020	proc near		; CODE XREF: .text:00401153p start+13p

lpTopLevelExceptionFilter= dword ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, ds:off_4042A4
		test	eax, eax
		jz	short loc_40104C
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], 2
		mov	[esp+38h+lpTopLevelExceptionFilter], 0
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_40104C:				; CODE XREF: sub_401020+Ej
		mov	[esp+38h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	SetUnhandledExceptionFilter
		sub	esp, 4
		call	sub_401C80
		call	sub_4020F0
		lea	eax, [ebp+var_10]
		mov	[ebp+var_10], 0
		mov	[esp+38h+var_28], eax
		mov	eax, dword_403000
		mov	[esp+38h+var_34], offset dword_406004
		mov	[esp+38h+lpTopLevelExceptionFilter], offset dword_406000
		mov	[esp+38h+var_2C], eax
		lea	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		call	__getmainargs
		mov	eax, ds:dword_406048
		test	eax, eax
		jnz	short loc_4010F0

loc_4010A0:				; CODE XREF: sub_401020+112j
		call	__p__fmode
		mov	edx, dword_403004
		mov	[eax], edx
		call	sub_401E90
		and	esp, 0FFFFFFF0h
		call	sub_4020D0
		call	__p__environ
		mov	eax, [eax]
		mov	[esp+38h+var_30], eax
		mov	eax, ds:dword_406004
		mov	[esp+38h+var_34], eax
		mov	eax, ds:dword_406000
		mov	[esp+38h+lpTopLevelExceptionFilter], eax
		call	sub_401760
		mov	ebx, eax
		call	_cexit
		mov	[esp+38h+lpTopLevelExceptionFilter], ebx ; uExitCode
		call	ExitProcess
; ---------------------------------------------------------------------------
		align 10h

loc_4010F0:				; CODE XREF: sub_401020+7Ej
		mov	ebx, ds:_iob
		mov	dword_403004, eax
		mov	[esp+38h+var_34], eax
		mov	eax, [ebx+10h]
		mov	[esp+38h+lpTopLevelExceptionFilter], eax
		call	_setmode
		mov	eax, ds:dword_406048
		mov	[esp+38h+var_34], eax
		mov	eax, [ebx+30h]
		mov	[esp+38h+lpTopLevelExceptionFilter], eax
		call	_setmode
		mov	eax, ds:dword_406048
		mov	[esp+38h+var_34], eax
		mov	eax, [ebx+50h]
		mov	[esp+38h+lpTopLevelExceptionFilter], eax
		call	_setmode
		jmp	loc_4010A0
sub_401020	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	dword ptr [esp], 2
		call	ds:__set_app_type
		call	sub_401020
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

		public start
start		proc near

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_18], 1
		call	ds:__set_app_type
		call	sub_401020
start		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *ExceptionInfo)
TopLevelExceptionFilter	proc near	; DATA XREF: sub_401020:loc_40104Co

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
ExceptionInfo	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+ExceptionInfo]
		mov	eax, [eax]
		mov	eax, [eax]
		cmp	eax, 0C0000091h
		ja	short loc_4011D0
		cmp	eax, 0C000008Dh
		jb	short loc_4011E7

loc_40119C:				; CODE XREF: TopLevelExceptionFilter+65j
		mov	ebx, 1

loc_4011A1:				; CODE XREF: TopLevelExceptionFilter+B2j
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 8
		call	signal
		cmp	eax, 1
		jz	loc_4012BD
		test	eax, eax
		jnz	loc_401270

loc_4011C6:				; CODE XREF: TopLevelExceptionFilter+63j
					; TopLevelExceptionFilter+77j ...
		xor	eax, eax

loc_4011C8:				; CODE XREF: TopLevelExceptionFilter+A7j
					; TopLevelExceptionFilter+E7j ...
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_4011D0:				; CODE XREF: TopLevelExceptionFilter+13j
		cmp	eax, 0C0000094h
		jz	short loc_401230
		cmp	eax, 0C0000096h
		jz	short loc_4011F9
		cmp	eax, 0C0000093h
		jnz	short loc_4011C6
		jmp	short loc_40119C
; ---------------------------------------------------------------------------

loc_4011E7:				; CODE XREF: TopLevelExceptionFilter+1Aj
		cmp	eax, 0C0000005h
		lea	esi, [esi+0]
		jz	short loc_401237
		cmp	eax, 0C000001Dh
		jnz	short loc_4011C6

loc_4011F9:				; CODE XREF: TopLevelExceptionFilter+5Cj
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 4
		call	signal
		cmp	eax, 1
		jz	short loc_401285
		test	eax, eax
		jz	short loc_4011C6
		mov	[esp+18h+var_18], 4
		lea	esi, [esi+0]
		call	eax
		mov	eax, 0FFFFFFFFh
		jmp	short loc_4011C8
; ---------------------------------------------------------------------------
		align 10h

loc_401230:				; CODE XREF: TopLevelExceptionFilter+55j
		xor	ebx, ebx
		jmp	loc_4011A1
; ---------------------------------------------------------------------------

loc_401237:				; CODE XREF: TopLevelExceptionFilter+70j
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 0Bh
		call	signal
		cmp	eax, 1
		jz	short loc_4012A1
		test	eax, eax
		jz	loc_4011C6
		mov	[esp+18h+var_18], 0Bh
		nop
		call	eax
		mov	eax, 0FFFFFFFFh
		jmp	loc_4011C8
; ---------------------------------------------------------------------------
		align 10h

loc_401270:				; CODE XREF: TopLevelExceptionFilter+40j
		mov	[esp+18h+var_18], 8
		call	eax
		mov	eax, 0FFFFFFFFh
		xchg	ax, ax
		jmp	loc_4011C8
; ---------------------------------------------------------------------------

loc_401285:				; CODE XREF: TopLevelExceptionFilter+90j
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 4
		call	signal
		or	eax, 0FFFFFFFFh
		jmp	loc_4011C8
; ---------------------------------------------------------------------------

loc_4012A1:				; CODE XREF: TopLevelExceptionFilter+CEj
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 0Bh
		call	signal
		or	eax, 0FFFFFFFFh
		jmp	loc_4011C8
; ---------------------------------------------------------------------------

loc_4012BD:				; CODE XREF: TopLevelExceptionFilter+38j
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 8
		call	signal
		test	ebx, ebx
		jnz	short loc_4012DF

loc_4012D5:				; CODE XREF: TopLevelExceptionFilter+165j
		mov	eax, 0FFFFFFFFh
		jmp	loc_4011C8
; ---------------------------------------------------------------------------

loc_4012DF:				; CODE XREF: TopLevelExceptionFilter+153j
		nop
		call	sub_4020F0
		jmp	short loc_4012D5
TopLevelExceptionFilter	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4012F0	proc near		; CODE XREF: sub_4023E8+6p

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcc_s_dw2-1.dll"
		call	GetModuleHandleA
		push	edx
		test	eax, eax
		jz	short loc_40136C
		mov	[esp+18h+lpProcName], offset ProcName ;	"__register_frame_info"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_40131A:				; CODE XREF: sub_4012F0+81j
		test	eax, eax
		jz	short loc_40132F
		mov	[esp+18h+lpProcName], offset dword_406008
		mov	[esp+18h+lpModuleName],	offset dword_405000
		call	eax

loc_40132F:				; CODE XREF: sub_4012F0+2Cj
		mov	ecx, dword_40300C
		test	ecx, ecx
		jz	short locret_40136A
		mov	[esp+18h+lpModuleName],	offset aLibgcj11_dll ; "libgcj-11.dll"
		call	GetModuleHandleA
		push	edx
		test	eax, eax
		jz	short loc_401374
		mov	[esp+18h+lpProcName], offset a_jv_registercl ; "_Jv_RegisterClasses"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_40135D:				; CODE XREF: sub_4012F0+89j
		test	eax, eax
		jz	short locret_40136A
		mov	[esp+18h+lpModuleName],	offset dword_40300C
		call	eax

locret_40136A:				; CODE XREF: sub_4012F0+47j
					; sub_4012F0+6Fj
		leave
		retn
; ---------------------------------------------------------------------------

loc_40136C:				; CODE XREF: sub_4012F0+15j
		mov	eax, 0
		jmp	short loc_40131A
; ---------------------------------------------------------------------------
		align 4

loc_401374:				; CODE XREF: sub_4012F0+58j
		mov	eax, 0
		jmp	short loc_40135D
sub_4012F0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40137C	proc near		; DATA XREF: sub_4023E8+Bo

lpModuleName	= dword	ptr -18h
lpProcName	= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpModuleName],	offset ModuleName ; "libgcc_s_dw2-1.dll"
		call	GetModuleHandleA
		push	ecx
		test	eax, eax
		jz	short loc_4013B8
		mov	[esp+18h+lpProcName], offset a__deregister_f ; "__deregister_frame_info"
		mov	[esp+18h+lpModuleName],	eax ; hModule
		call	GetProcAddress
		sub	esp, 8

loc_4013A6:				; CODE XREF: sub_40137C+41j
		test	eax, eax
		jz	short locret_4013B3
		mov	[esp+18h+lpModuleName],	offset dword_405000
		call	eax

locret_4013B3:				; CODE XREF: sub_40137C+2Cj
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_4013B8:				; CODE XREF: sub_40137C+15j
		mov	eax, 0
		jmp	short loc_4013A6
sub_40137C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_4013C0	proc near		; DATA XREF: sub_401760+3Eo

Code		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_10], offset a1_29_4 ; "1.29.4"
		mov	[esp+18h+var_14], offset aPango	; "pango"
		mov	[esp+18h+Code],	offset aPangoQuerymodu ; "pango-querymodules (%s) %s\n"
		call	g_printf
		mov	[esp+18h+var_14], offset a1_6_0	; "1.6.0"
		mov	[esp+18h+Code],	offset aModuleInterfac ; "module interface version: %s\n"
		call	g_printf
		mov	[esp+18h+Code],	0 ; Code
		call	exit
sub_4013C0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401404	proc near		; CODE XREF: sub_401760+D4p
					; sub_401760+1A7p

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_24		= byte ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, eax
		mov	esi, edx
		mov	[esp+78h+var_78], edx
		call	g_path_is_absolute
		test	eax, eax
		jz	short loc_401484
		mov	[esp+78h+var_78], esi
		call	g_strdup
		mov	esi, eax

loc_401427:				; CODE XREF: sub_401404+96j
		mov	[esp+78h+var_74], 3
		mov	[esp+78h+var_78], esi
		call	g_module_open_utf8
		mov	edi, eax
		test	eax, eax
		jz	loc_401658
		lea	eax, [ebp+var_1C]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aScript_engine_ ; "script_engine_list"
		mov	[esp+78h+var_78], edi
		call	g_module_symbol
		test	eax, eax
		jnz	short loc_40149C

loc_40145C:				; CODE XREF: sub_401404+B1j
					; sub_401404+CCj ...
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], offset aSDoesNotExport ; "%s does not	export Pango module API\n"
		call	g_printerr

loc_40146C:				; CODE XREF: sub_401404+101j
					; sub_401404+24Ej
		mov	[esp+78h+var_78], esi
		call	g_free
		mov	[esp+78h+var_78], edi
		call	g_module_close

loc_40147C:				; CODE XREF: sub_401404+285j
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_401484:				; CODE XREF: sub_401404+17j
		mov	[esp+78h+var_70], 0
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], ebx
		call	g_build_filename
		mov	esi, eax
		jmp	short loc_401427
; ---------------------------------------------------------------------------

loc_40149C:				; CODE XREF: sub_401404+56j
		lea	eax, [ebp+var_20]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aScript_engin_0 ; "script_engine_init"
		mov	[esp+78h+var_78], edi
		call	g_module_symbol
		test	eax, eax
		jz	short loc_40145C
		lea	eax, [ebp+var_24]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aScript_engin_1 ; "script_engine_exit"
		mov	[esp+78h+var_78], edi
		call	g_module_symbol
		test	eax, eax
		jz	short loc_40145C
		lea	eax, [ebp+var_28]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aScript_engin_2 ; "script_engine_create"
		mov	[esp+78h+var_78], edi
		call	g_module_symbol
		test	eax, eax
		jz	loc_40145C
		lea	eax, [ebp+var_30]
		mov	[esp+78h+var_74], eax
		lea	eax, [ebp+var_2C]
		mov	[esp+78h+var_78], eax
		call	[ebp+var_1C]
		cmp	[ebp+var_30], 0
		jle	loc_40146C
		mov	[ebp+var_3C], 0
		mov	[ebp+var_40], 0
		mov	eax, ds:g_ascii_table
		mov	eax, [eax]
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], esi
		mov	[ebp+var_4C], edi

loc_401529:				; CODE XREF: sub_401404+242j
		mov	edx, [ebp+var_44]
		mov	ecx, [ebp+var_48]
		jmp	short loc_401552
; ---------------------------------------------------------------------------
		align 4

loc_401534:				; CODE XREF: sub_401404+153j
		cmp	al, 22h
		jz	loc_4016A7
		cmp	al, 5Ch
		jz	loc_4016A7
		movzx	eax, al
		test	byte ptr [ecx+eax*2+1],	1
		jnz	loc_4016A7

loc_401552:				; CODE XREF: sub_401404+12Bj
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_401534
		mov	eax, [ebp+var_44]
		mov	[esp+78h+var_78], eax
		call	g_strdup
		mov	ebx, eax
		mov	edx, offset byte_4040B3

loc_40156B:				; CODE XREF: sub_401404+324j
		mov	eax, [ebp+var_3C]
		add	eax, [ebp+var_2C]
		mov	ecx, [eax+8]
		mov	[esp+78h+var_60], ecx
		mov	ecx, [eax+4]
		mov	[esp+78h+var_64], ecx
		mov	eax, [eax]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], edx
		mov	[esp+78h+var_70], ebx
		mov	[esp+78h+var_74], edx
		mov	[esp+78h+var_78], offset aSSSSSS ; "%s%s%s %s %s %s"
		call	g_printf
		mov	[esp+78h+var_78], ebx
		call	g_free
		mov	edx, [ebp+var_3C]
		add	edx, [ebp+var_2C]
		mov	eax, [edx+10h]
		test	eax, eax
		jle	short loc_40162D
		xor	esi, esi

loc_4015B4:				; CODE XREF: sub_401404+227j
		lea	eax, ds:0[esi*8]
		add	eax, [edx+0Ch]
		mov	edi, [eax+4]
		mov	ebx, [eax]
		jmp	short loc_4015ED
; ---------------------------------------------------------------------------
		align 4

loc_4015C8:				; CODE XREF: sub_401404+204j
		mov	[esp+78h+var_6C], ebx
		mov	[esp+78h+var_70], offset aEngineReported ; "Engine reported invalid script value %d"...
		mov	[esp+78h+var_74], 10h
		mov	[esp+78h+var_78], offset aPango_0 ; "Pango"
		call	g_log
		mov	ebx, 0FFFFFFFFh

loc_4015ED:				; CODE XREF: sub_401404+1BFj
		mov	eax, ds:dword_406020
		test	eax, eax
		jz	loc_401690

loc_4015FA:				; CODE XREF: sub_401404+29Ej
		mov	[esp+78h+var_74], ebx
		mov	[esp+78h+var_78], eax
		call	g_enum_get_value
		test	eax, eax
		jz	short loc_4015C8
		mov	[esp+78h+var_70], edi
		mov	eax, [eax+8]
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], offset aSS ; " %s:%s"
		call	g_printf
		inc	esi
		mov	edx, [ebp+var_3C]
		add	edx, [ebp+var_2C]
		cmp	[edx+10h], esi
		jg	short loc_4015B4

loc_40162D:				; CODE XREF: sub_401404+1ACj
		mov	[esp+78h+var_78], offset asc_404192 ; "\n"
		call	g_printf
		inc	[ebp+var_40]
		add	[ebp+var_3C], 14h
		mov	eax, [ebp+var_40]
		cmp	[ebp+var_30], eax
		jg	loc_401529
		mov	esi, [ebp+var_44]
		mov	edi, [ebp+var_4C]
		jmp	loc_40146C
; ---------------------------------------------------------------------------
		align 4

loc_401658:				; CODE XREF: sub_401404+37j
		call	g_module_error
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], offset aCannotLoadModu ; "Cannot load	module %s: %s\n"
		call	g_printerr
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+var_78], offset aSDoesNotExport ; "%s does not	export Pango module API\n"
		call	g_printerr
		mov	[esp+78h+var_78], esi
		call	g_free
		jmp	loc_40147C
; ---------------------------------------------------------------------------
		align 10h

loc_401690:				; CODE XREF: sub_401404+1F0j
		call	pango_script_get_type
		mov	[esp+78h+var_78], eax
		call	g_type_class_ref
		mov	ds:dword_406020, eax
		jmp	loc_4015FA
; ---------------------------------------------------------------------------

loc_4016A7:				; CODE XREF: sub_401404+132j
					; sub_401404+13Aj ...
		mov	[esp+78h+var_78], 0
		call	g_string_new
		mov	esi, eax
		mov	ebx, [ebp+var_44]

loc_4016B8:				; CODE XREF: sub_401404+2F5j
					; sub_401404+30Bj ...
		mov	al, [ebx]
		inc	ebx
		cmp	al, 22h
		jz	short loc_4016E9

loc_4016BF:				; CODE XREF: sub_401404+2E3j
		jg	short loc_4016FB
		test	al, al
		jz	short loc_401711
		cmp	al, 0Ah
		jz	short loc_40172D

loc_4016C9:				; CODE XREF: sub_401404+2F9j
		mov	ecx, [esi+4]
		lea	edx, [ecx+1]
		cmp	edx, [esi+8]
		jnb	short loc_401742
		mov	edi, [esi]
		mov	[edi+ecx], al
		mov	[esi+4], edx
		mov	eax, [esi]
		mov	byte ptr [eax+edx], 0
		mov	al, [ebx]
		inc	ebx
		cmp	al, 22h
		jnz	short loc_4016BF

loc_4016E9:				; CODE XREF: sub_401404+2B9j
		mov	[esp+78h+var_74], offset asc_404146 ; "\\\""
		mov	[esp+78h+var_78], esi
		call	g_string_append
		jmp	short loc_4016B8
; ---------------------------------------------------------------------------

loc_4016FB:				; CODE XREF: sub_401404:loc_4016BFj
		cmp	al, 5Ch
		jnz	short loc_4016C9
		mov	[esp+78h+var_74], offset asc_404149 ; "\\\\"
		mov	[esp+78h+var_78], esi
		call	g_string_append
		jmp	short loc_4016B8
; ---------------------------------------------------------------------------

loc_401711:				; CODE XREF: sub_401404+2BFj
		mov	[esp+78h+var_74], 0
		mov	[esp+78h+var_78], esi
		call	g_string_free
		mov	ebx, eax
		mov	edx, offset asc_4040B1 ; "\""
		jmp	loc_40156B
; ---------------------------------------------------------------------------

loc_40172D:				; CODE XREF: sub_401404+2C3j
		mov	[esp+78h+var_74], offset aN ; "\\n"
		mov	[esp+78h+var_78], esi
		call	g_string_append
		jmp	loc_4016B8
; ---------------------------------------------------------------------------

loc_401742:				; CODE XREF: sub_401404+2CEj
		movsx	eax, al
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], 0FFFFFFFFh
		mov	[esp+78h+var_78], esi
		call	g_string_insert_c
		jmp	loc_4016B8
sub_401404	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401760	proc near		; CODE XREF: sub_401020+B6p

Code		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF0h
		push	edi
		push	esi
		push	ebx
		sub	esp, 64h
		call	sub_4020D0
		mov	[esp+70h+var_14], 0
		lea	edi, [esp+70h+var_4C]
		mov	ecx, 38h
		xor	eax, eax
		rep stosb
		mov	[esp+70h+var_4C], offset aVersion ; "version"
		mov	[esp+70h+var_44], 8
		mov	[esp+70h+var_40], 3
		mov	[esp+70h+var_3C], offset sub_4013C0
		mov	[esp+70h+var_38], offset aShowVersionNum ; "Show version numbers"
		mov	[esp+70h+Code],	offset aModule___ ; "- [MODULE]..."
		call	g_option_context_new
		mov	ebx, eax
		mov	[esp+70h+var_68], 0
		lea	eax, [esp+70h+var_4C]
		mov	[esp+70h+var_6C], eax
		mov	[esp+70h+Code],	ebx
		call	g_option_context_add_main_entries
		lea	eax, [esp+70h+var_14]
		mov	[esp+70h+var_64], eax
		lea	eax, [ebp+arg_4]
		mov	[esp+70h+var_68], eax
		lea	eax, [ebp+arg_0]
		mov	[esp+70h+var_6C], eax
		mov	[esp+70h+Code],	ebx
		call	g_option_context_parse
		test	eax, eax
		jz	loc_401981
		mov	[esp+70h+Code],	ebx
		call	g_option_context_free
		call	g_type_init
		mov	[esp+70h+Code],	offset aPangoModulesFi ; "# Pango Modules file\n# Automatically	g"...
		call	g_printf
		cmp	[ebp+arg_0], 1
		jz	short loc_401854
		call	g_get_current_dir_utf8
		mov	esi, eax
		cmp	[ebp+arg_0], 1
		jle	short loc_40183F
		mov	ebx, 1
		nop

loc_40182C:				; CODE XREF: sub_401760+DDj
		mov	eax, [ebp+arg_4]
		mov	edx, [eax+ebx*4]
		mov	eax, esi
		call	sub_401404
		inc	ebx
		cmp	[ebp+arg_0], ebx
		jg	short loc_40182C

loc_40183F:				; CODE XREF: sub_401760+C4j
		mov	[esp+70h+Code],	esi
		call	g_free
		xor	eax, eax
		add	esp, 64h
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_401854:				; CODE XREF: sub_401760+B7j
		mov	[esp+70h+Code],	offset aPangoModulespa ; "Pango/ModulesPath"
		call	pango_config_key_get
		mov	ebx, eax
		test	eax, eax
		jz	loc_401955

loc_40186A:				; CODE XREF: sub_401760+21Cj
		mov	[esp+70h+var_6C], ebx
		mov	[esp+70h+Code],	offset aModulespathS ; "# ModulesPath =	%s\n#\n"
		call	g_printf
		mov	[esp+70h+Code],	ebx
		call	pango_split_file_list
		mov	[esp+70h+var_5C], eax
		mov	[esp+70h+Code],	ebx
		call	g_free
		mov	edx, [esp+70h+var_5C]
		mov	eax, [edx]
		test	eax, eax
		jz	loc_40193F
		add	edx, 4
		mov	[esp+70h+var_54], edx
		mov	ecx, [esp+70h+var_5C]
		mov	[esp+70h+var_58], ecx
		nop

loc_4018AC:				; CODE XREF: sub_401760+1D9j
		mov	[esp+70h+var_68], 0
		mov	[esp+70h+var_6C], 0
		mov	[esp+70h+Code],	eax
		call	g_dir_open_utf8
		mov	ebx, eax
		test	eax, eax
		jz	short loc_401924
		xchg	ax, ax

loc_4018CC:				; CODE XREF: sub_401760+18Dj
					; sub_401760+19Fj
		mov	[esp+70h+Code],	ebx
		call	g_dir_read_name_utf8
		mov	edx, eax
		test	eax, eax
		jz	short loc_40191C

loc_4018DA:				; CODE XREF: sub_401760+1B8j
		mov	ecx, 0FFFFFFFFh
		mov	edi, edx
		xor	eax, eax
		repne scasb
		not	ecx
		lea	eax, [ecx-1]
		cmp	eax, 4
		jle	short loc_4018CC
		lea	esi, [edx+ecx-5]
		mov	edi, offset a_dll ; ".dll"
		mov	ecx, 5
		repe cmpsb
		jnz	short loc_4018CC
		mov	ecx, [esp+70h+var_58]
		mov	eax, [ecx]
		call	sub_401404
		mov	[esp+70h+Code],	ebx
		call	g_dir_read_name_utf8
		mov	edx, eax
		test	eax, eax
		jnz	short loc_4018DA
		xchg	ax, ax

loc_40191C:				; CODE XREF: sub_401760+178j
		mov	[esp+70h+Code],	ebx
		call	g_dir_close

loc_401924:				; CODE XREF: sub_401760+168j
		mov	eax, [esp+70h+var_54]
		mov	[esp+70h+var_58], eax
		mov	edx, eax
		mov	eax, [eax]
		add	edx, 4
		mov	[esp+70h+var_54], edx
		test	eax, eax
		jnz	loc_4018AC

loc_40193F:				; CODE XREF: sub_401760+136j
		mov	ecx, [esp+70h+var_5C]
		mov	[esp+70h+Code],	ecx
		call	g_strfreev
		xor	eax, eax
		add	esp, 64h
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_401955:				; CODE XREF: sub_401760+104j
		call	pango_get_lib_subdirectory
		mov	[esp+70h+var_64], 0
		mov	[esp+70h+var_68], offset aModules ; "modules"
		mov	[esp+70h+var_6C], offset a1_6_0	; "1.6.0"
		mov	[esp+70h+Code],	eax
		call	g_build_filename
		mov	ebx, eax
		jmp	loc_40186A
; ---------------------------------------------------------------------------

loc_401981:				; CODE XREF: sub_401760+94j
		mov	eax, [esp+70h+var_14]
		test	eax, eax
		jz	short loc_4019A8
		mov	eax, [eax+8]
		mov	[esp+70h+var_6C], eax
		mov	[esp+70h+Code],	offset aParseOptionErr ; "Parse	option error: %s\n"
		call	g_printerr

loc_40199C:				; CODE XREF: sub_401760+254j
		mov	[esp+70h+Code],	1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_4019A8:				; CODE XREF: sub_401760+227j
		mov	[esp+70h+Code],	offset aParseOptionE_0 ; "Parse	option error\n"
		call	g_printerr
		jmp	short loc_40199C
sub_401760	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION pango_script_get_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pango_config_key_get]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION pango_split_file_list]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pango_get_lib_subdirectory]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_enum_get_value]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_type_class_ref]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_type_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_module_open_utf8]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_module_symbol]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_module_close]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_module_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_printf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_path_is_absolute]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_strdup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_printerr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_build_filename]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_log]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_string_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_string_append]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_string_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_string_insert_c]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_option_context_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_option_context_add_main_entries]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_option_context_parse]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_option_context_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_get_current_dir_utf8]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_dir_open_utf8]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_dir_read_name_utf8]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION g_dir_close]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION g_strfreev]
		align 10h
		push	ebp
		xor	eax, eax
		mov	ebp, esp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:00408008o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jnz	short loc_401AF0

loc_401ACD:				; CODE XREF: TlsCallback_1+33j
		mov	edx, [ebp+arg_8]
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_10], edx
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	sub_402180
		mov	eax, 1
		leave
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_401AF0:				; CODE XREF: TlsCallback_1+Bj
		cmp	eax, 3
		jz	short loc_401ACD
		mov	eax, 1
		leave
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_401020+27p
					; DATA XREF: .rdata:off_4042A4o ...

lpLibFileName	= dword	ptr -18h
lpProcName	= dword	ptr -14h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	edx, ds:_winmajor
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [edx], 3
		jbe	short loc_401B46
		cmp	ds:dword_406070, 2
		jz	short loc_401B28
		mov	ds:dword_406070, 2

loc_401B28:				; CODE XREF: TlsCallback_0+1Cj
		cmp	eax, 2
		jz	loc_401C36
		cmp	eax, 1
		jz	loc_401BD8

loc_401B3A:				; CODE XREF: TlsCallback_0+F2j
					; TlsCallback_0+141j
		mov	eax, 1
		mov	ebx, [ebp+var_4]
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401B46:				; CODE XREF: TlsCallback_0+13j
		mov	ds:dword_4060DC, 1
		mov	[esp+18h+lpLibFileName], offset	LibFileName ; "mingwm10.dll"
		call	LoadLibraryA
		sub	esp, 4
		test	eax, eax
		mov	ds:hLibModule, eax
		jz	loc_401C66
		mov	[esp+18h+lpProcName], offset a__mingwthr_rem ; "__mingwthr_remove_key_dtor"
		mov	[esp+18h+lpLibFileName], eax ; hModule
		call	GetProcAddress
		sub	esp, 8
		mov	ds:dword_4060CC, eax
		mov	[esp+18h+lpProcName], offset a__mingwthr_key ; "__mingwthr_key_dtor"
		mov	eax, ds:hLibModule
		mov	[esp+18h+lpLibFileName], eax ; hModule
		call	GetProcAddress
		mov	ds:dword_4060BC, eax
		mov	eax, ds:hLibModule
		sub	esp, 8
		test	eax, eax
		jz	loc_401C66
		mov	ecx, ds:dword_4060CC
		test	ecx, ecx
		jz	short loc_401BF7
		mov	edx, ds:dword_4060BC
		test	edx, edx
		jz	short loc_401BF7
		mov	ds:dword_406070, 1
		mov	eax, 1
		mov	ebx, [ebp+var_4]
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401BD8:				; CODE XREF: TlsCallback_0+34j
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+lpProcName], 1
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+lpLibFileName], eax
		call	sub_402180
		jmp	loc_401B3A
; ---------------------------------------------------------------------------

loc_401BF7:				; CODE XREF: TlsCallback_0+B6j
					; TlsCallback_0+C0j
		mov	ds:dword_4060BC, 0
		mov	ds:dword_4060CC, 0
		mov	[esp+18h+lpLibFileName], eax ; hLibModule
		call	FreeLibrary
		sub	esp, 4

loc_401C16:				; CODE XREF: TlsCallback_0+17Aj
		mov	ds:hLibModule, 0
		mov	eax, 1
		mov	ds:dword_406070, 0
		mov	ebx, [ebp+var_4]
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401C36:				; CODE XREF: TlsCallback_0+2Bj
		mov	ebx, offset dword_408014
		cmp	ebx, offset dword_408014
		jz	loc_401B3A

loc_401C47:				; CODE XREF: TlsCallback_0+158j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_401C4F
		call	eax

loc_401C4F:				; CODE XREF: TlsCallback_0+14Bj
		add	ebx, 4
		cmp	ebx, offset dword_408014
		jnz	short loc_401C47
		mov	eax, 1
		mov	ebx, [ebp+var_4]
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_401C66:				; CODE XREF: TlsCallback_0+66j
					; TlsCallback_0+A8j
		mov	ds:dword_4060BC, 0
		mov	ds:dword_4060CC, 0
		jmp	short loc_401C16
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401C80	proc near		; CODE XREF: sub_401020+3Bp
		push	ebp
		mov	ebp, esp
		push	ebx
		pushf
		pushf
		pop	eax
		mov	edx, eax
		xor	eax, 200000h
		push	eax
		popf
		pushf
		pop	eax
		popf
		xor	eax, edx
		test	eax, 200000h
		jz	loc_401D43
		xor	eax, eax
		cpuid
		test	eax, eax
		jz	loc_401D43
		mov	eax, 1
		cpuid
		test	dh, 1
		jz	short loc_401CBF
		or	ds:dword_40604C, 1

loc_401CBF:				; CODE XREF: sub_401C80+36j
		test	dx, dx
		jns	short loc_401CCB
		or	ds:dword_40604C, 2

loc_401CCB:				; CODE XREF: sub_401C80+42j
		test	edx, 800000h
		jz	short loc_401CDA
		or	ds:dword_40604C, 4

loc_401CDA:				; CODE XREF: sub_401C80+51j
		test	edx, 1000000h
		jz	short loc_401CE9
		or	ds:dword_40604C, 8

loc_401CE9:				; CODE XREF: sub_401C80+60j
		test	edx, 2000000h
		jz	short loc_401CF8
		or	ds:dword_40604C, 10h

loc_401CF8:				; CODE XREF: sub_401C80+6Fj
		and	edx, 4000000h
		jz	short loc_401D07
		or	ds:dword_40604C, 20h

loc_401D07:				; CODE XREF: sub_401C80+7Ej
		test	cl, 1
		jz	short loc_401D13
		or	ds:dword_40604C, 40h

loc_401D13:				; CODE XREF: sub_401C80+8Aj
		and	ch, 20h
		jnz	short loc_401D46

loc_401D18:				; CODE XREF: sub_401C80+D0j
		mov	eax, 80000000h
		cpuid
		cmp	eax, 80000000h
		jbe	short loc_401D43
		mov	eax, 80000001h
		cpuid
		test	edx, edx
		js	short loc_401D52

loc_401D31:				; CODE XREF: sub_401C80+DCj
		and	edx, 40000000h
		jz	short loc_401D43
		or	ds:dword_40604C, 200h

loc_401D43:				; CODE XREF: sub_401C80+1Aj
					; sub_401C80+26j ...
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401D46:				; CODE XREF: sub_401C80+96j
		or	ds:dword_40604C, 80h
		jmp	short loc_401D18
; ---------------------------------------------------------------------------

loc_401D52:				; CODE XREF: sub_401C80+AFj
		or	ds:dword_40604C, 100h
		jmp	short loc_401D31
sub_401C80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl sub_401D60(char *Format, char ArgList)
sub_401D60	proc near		; CODE XREF: sub_401DB0+CDp
					; sub_401E90+CDp ...

Str		= dword	ptr -18h
Size		= dword	ptr -14h
Count		= dword	ptr -10h
File		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Format		= dword	ptr  8
ArgList		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, ds:_iob
		mov	[ebp+var_4], esi
		lea	esi, [ebp+ArgList]
		mov	[esp+18h+Count], 17h ; Count
		mov	[esp+18h+Size],	1 ; Size
		add	ebx, 40h
		mov	[esp+18h+File],	ebx ; File
		mov	[esp+18h+Str], offset aMingwRuntimeFa ;	"Mingw runtime failure:\n"
		call	fwrite
		mov	eax, [ebp+Format]
		mov	[esp+18h+Count], esi ; ArgList
		mov	[esp+18h+Str], ebx ; File
		mov	[esp+18h+Size],	eax ; Format
		call	vfprintf
		call	abort
sub_401D60	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall sub_401DB0(size_t Size, void *Src)
sub_401DB0	proc near		; CODE XREF: sub_401E90+FCp
					; sub_401E90+128p ...

lpAddress	= dword	ptr -48h
lpBuffer	= dword	ptr -44h
dwLength	= dword	ptr -40h
lpflOldProtect	= dword	ptr -3Ch
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-38h
flOldProtect	= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		test	ecx, ecx
		mov	[ebp+var_C], ebx
		mov	ebx, eax
		mov	[ebp+var_8], esi
		mov	esi, edx
		mov	[ebp+var_4], edi
		mov	edi, ecx
		jnz	short loc_401DD6

loc_401DC9:				; CODE XREF: sub_401DB0+8Bj
					; sub_401DB0+90j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401DD6:				; CODE XREF: sub_401DB0+17j
		lea	eax, [ebp+Buffer]
		mov	[esp+48h+dwLength], 1Ch	; dwLength
		mov	[esp+48h+lpBuffer], eax	; lpBuffer
		mov	[esp+48h+lpAddress], ebx ; lpAddress
		call	VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_401E6A
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jz	short loc_401E25
		cmp	eax, 40h
		jz	short loc_401E25
		lea	eax, [ebp+flOldProtect]
		mov	[esp+48h+lpflOldProtect], eax ;	lpflOldProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+48h+dwLength], 40h	; flNewProtect
		mov	[esp+48h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+48h+lpAddress], eax ; lpAddress
		call	VirtualProtect
		sub	esp, 10h

loc_401E25:				; CODE XREF: sub_401DB0+4Aj
					; sub_401DB0+4Fj
		mov	[esp+48h+dwLength], edi	; Size
		mov	[esp+48h+lpBuffer], esi	; Src
		mov	[esp+48h+lpAddress], ebx ; Dst
		call	memcpy
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jz	short loc_401DC9
		cmp	eax, 40h
		jz	short loc_401DC9
		lea	eax, [ebp+flOldProtect]
		mov	[esp+48h+lpflOldProtect], eax ;	lpflOldProtect
		mov	eax, [ebp+flOldProtect]
		mov	[esp+48h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+48h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+48h+lpAddress], eax ; lpAddress
		call	VirtualProtect
		sub	esp, 10h
		jmp	loc_401DC9
; ---------------------------------------------------------------------------

loc_401E6A:				; CODE XREF: sub_401DB0+42j
		mov	[esp+48h+dwLength], ebx
		mov	[esp+48h+lpBuffer], 1Ch	; ArgList
		mov	[esp+48h+lpAddress], offset Format ; "	VirtualQuery failed for	%d bytes at a"...
		call	sub_401D60
sub_401DB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401E90	proc near		; CODE XREF: sub_401020+8Dp

Format		= dword	ptr -38h
ArgList		= byte ptr -34h
Src		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, ds:dword_406050
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		test	eax, eax
		jz	short loc_401EB5

loc_401EA8:				; CODE XREF: sub_401E90+3Cj
					; sub_401E90+92j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401EB5:				; CODE XREF: sub_401E90+16j
		mov	eax, offset dword_404354
		sub	eax, offset dword_404354
		cmp	eax, 7
		mov	ds:dword_406050, 1
		jle	short loc_401EA8
		cmp	eax, 0Bh
		mov	ebx, offset dword_404354
		jle	short loc_401F00
		mov	edi, ds:dword_404354
		test	edi, edi
		jnz	short loc_401F00
		mov	esi, ds:dword_404358
		test	esi, esi
		jnz	short loc_401F00
		mov	ecx, ds:dword_40435C
		test	ecx, ecx
		jnz	short loc_401F00
		mov	ebx, offset dword_404360
		nop
		lea	esi, [esi+0]

loc_401F00:				; CODE XREF: sub_401E90+46j
					; sub_401E90+50j ...
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_401F62
		mov	eax, [ebx+4]
		test	eax, eax
		jnz	short loc_401F62
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_402026
		add	ebx, 0Ch
		cmp	ebx, offset dword_404354
		jnb	short loc_401EA8
		mov	esi, 400000h

loc_401F29:				; CODE XREF: sub_401E90+16Dj
		mov	eax, [ebx+4]
		mov	ecx, [ebx]
		movzx	edx, byte ptr [ebx+8]
		add	eax, esi
		add	ecx, esi
		cmp	edx, 10h
		mov	edi, [ecx]
		jz	short loc_401FA0
		cmp	edx, 20h
		jz	loc_401FE0
		cmp	edx, 8
		jz	short loc_401FC0
		mov	[ebp+var_1C], 0
		mov	dword ptr [esp+38h+ArgList], edx ; ArgList
		mov	[esp+38h+Format], offset aUnknownPseudoR ; "  Unknown pseudo relocation	bit size %d"...
		call	sub_401D60
; ---------------------------------------------------------------------------

loc_401F62:				; CODE XREF: sub_401E90+74j
					; sub_401E90+7Bj
		cmp	ebx, offset dword_404354
		jnb	loc_401EA8
		mov	esi, 400000h
		lea	edi, [ebp+Src]

loc_401F76:				; CODE XREF: sub_401E90+107j
		mov	eax, [ebx+4]
		mov	ecx, 4		; Size
		add	eax, esi
		mov	edx, [eax]
		add	edx, [ebx]
		add	ebx, 8
		mov	[ebp+Src], edx
		mov	edx, edi	; Src
		call	sub_401DB0
		cmp	ebx, offset dword_404354
		jb	short loc_401F76
		jmp	loc_401EA8
; ---------------------------------------------------------------------------
		align 10h

loc_401FA0:				; CODE XREF: sub_401E90+ABj
		movzx	edx, word ptr [eax]
		test	dx, dx
		js	short loc_402017
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_401FB0:				; CODE XREF: sub_401E90+194j
		mov	ecx, 2		; Size
		lea	edx, [ebp+var_1C] ; Src
		call	sub_401DB0
		jmp	short loc_401FF4
; ---------------------------------------------------------------------------
		align 10h

loc_401FC0:				; CODE XREF: sub_401E90+B9j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		js	short loc_402008
		sub	edx, ecx
		lea	edi, [edx+edi]
		mov	[ebp+var_1C], edi

loc_401FCF:				; CODE XREF: sub_401E90+185j
		mov	ecx, 1		; Size
		lea	edx, [ebp+var_1C] ; Src
		call	sub_401DB0
		jmp	short loc_401FF4
; ---------------------------------------------------------------------------
		align 10h

loc_401FE0:				; CODE XREF: sub_401E90+B0j
		add	edi, [eax]
		lea	edx, [ebp+var_1C] ; Src
		sub	edi, ecx
		mov	ecx, 4		; Size
		mov	[ebp+var_1C], edi
		call	sub_401DB0

loc_401FF4:				; CODE XREF: sub_401E90+12Dj
					; sub_401E90+14Cj
		add	ebx, 0Ch
		cmp	ebx, offset dword_404354
		jb	loc_401F29
		jmp	loc_401EA8
; ---------------------------------------------------------------------------

loc_402008:				; CODE XREF: sub_401E90+135j
		or	edx, 0FFFFFF00h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_401FCF
; ---------------------------------------------------------------------------

loc_402017:				; CODE XREF: sub_401E90+116j
		or	edx, 0FFFF0000h
		sub	edx, ecx
		add	edx, edi
		mov	[ebp+var_1C], edx
		jmp	short loc_401FB0
; ---------------------------------------------------------------------------

loc_402026:				; CODE XREF: sub_401E90+83j
		mov	dword ptr [esp+38h+ArgList], eax ; ArgList
		mov	[esp+38h+Format], offset aUnknownPseud_0 ; "  Unknown pseudo relocation	protocol ve"...
		call	sub_401D60
sub_401E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402040	proc near		; DATA XREF: sub_402070:loc_40209Ao
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, off_403008
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_402068

loc_402051:				; CODE XREF: sub_402040+26j
		call	eax
		mov	eax, off_403008
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_403008, edx
		test	eax, eax
		jnz	short loc_402051

locret_402068:				; CODE XREF: sub_402040+Fj
		leave
		retn
sub_402040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402070	proc near		; CODE XREF: sub_4020D0+1Dj

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, ds:dword_402404
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_4020B0

loc_402083:				; CODE XREF: sub_402070+54j
		test	ebx, ebx
		jz	short loc_40209A
		lea	esi, ds:402404h[ebx*4]
		xchg	ax, ax

loc_402090:				; CODE XREF: sub_402070+28j
		call	dword ptr [esi]
		sub	esi, 4
		sub	ebx, 1
		jnz	short loc_402090

loc_40209A:				; CODE XREF: sub_402070+15j
		mov	[esp+18h+var_18], offset sub_402040
		call	sub_401000
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4020B0:				; CODE XREF: sub_402070+11j
		xor	ebx, ebx
		jmp	short loc_4020B6
; ---------------------------------------------------------------------------

loc_4020B4:				; CODE XREF: sub_402070+52j
		mov	ebx, eax

loc_4020B6:				; CODE XREF: sub_402070+42j
		lea	eax, [ebx+1]
		mov	edx, ds:dword_402404[eax*4]
		test	edx, edx
		jnz	short loc_4020B4
		jmp	short loc_402083
sub_402070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4020D0	proc near		; CODE XREF: sub_401020+95p
					; sub_401760+Cp
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	ecx, ds:dword_406060
		test	ecx, ecx
		jz	short loc_4020E2
		leave
		retn
; ---------------------------------------------------------------------------

loc_4020E2:				; CODE XREF: sub_4020D0+Ej
		mov	ds:dword_406060, 1
		leave
		jmp	short sub_402070
sub_4020D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4020F0	proc near		; CODE XREF: sub_401020+40p
					; TopLevelExceptionFilter+160p
		push	ebp
		mov	ebp, esp
		fninit
		pop	ebp
		retn
sub_4020F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402100	proc near		; CODE XREF: sub_402180+15p
					; sub_402180:loc_4021A1p

lpCriticalSection= dword ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:dword_406078
		test	eax, eax
		jnz	short loc_402118
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_402118:				; CODE XREF: sub_402100+Fj
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	EnterCriticalSection
		mov	ebx, ds:dword_4060A8
		sub	esp, 4
		test	ebx, ebx
		jz	short loc_40215C

loc_402131:				; CODE XREF: sub_402100+5Aj
		mov	eax, [ebx]
		mov	[esp+18h+lpCriticalSection], eax ; dwTlsIndex
		call	TlsGetValue
		sub	esp, 4
		mov	esi, eax
		call	GetLastError
		test	eax, eax
		jnz	short loc_402155
		test	esi, esi
		jz	short loc_402155
		mov	eax, [ebx+4]
		mov	[esp+18h+lpCriticalSection], esi
		call	eax

loc_402155:				; CODE XREF: sub_402100+47j
					; sub_402100+4Bj
		mov	ebx, [ebx+8]
		test	ebx, ebx
		jnz	short loc_402131

loc_40215C:				; CODE XREF: sub_402100+2Fj
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	LeaveCriticalSection
		sub	esp, 4
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_402100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402180	proc near		; CODE XREF: TlsCallback_1+1Ep
					; TlsCallback_0+EDp

lpCriticalSection= dword ptr -18h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		cmp	eax, 1
		jz	short loc_4021D0
		jb	short loc_4021A1
		cmp	eax, 3
		jnz	short loc_40219A
		call	sub_402100

loc_40219A:				; CODE XREF: sub_402180+13j
					; sub_402180+2Ej ...
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------

loc_4021A1:				; CODE XREF: sub_402180+Ej
		call	sub_402100
		mov	eax, ds:dword_406078
		cmp	eax, 1
		jnz	short loc_40219A
		mov	ds:dword_406078, 0
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_40219A
; ---------------------------------------------------------------------------
		align 10h

loc_4021D0:				; CODE XREF: sub_402180+Cj
		mov	eax, ds:dword_406078
		test	eax, eax
		jz	short loc_4021F0

loc_4021D9:				; CODE XREF: sub_402180+7Fj
		mov	ds:dword_406078, 1
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4021F0:				; CODE XREF: sub_402180+57j
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_4021D9
sub_402180	endp

; ---------------------------------------------------------------------------
		jmp	short loc_402210
; ---------------------------------------------------------------------------
		align 10h

loc_402210:				; CODE XREF: .text:00402201j
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:dword_406078
		mov	ebx, [ebp+8]
		test	eax, eax
		jnz	short loc_402230
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402230:				; CODE XREF: .text:00402221j
		mov	dword ptr [esp], offset	CriticalSection
		call	EnterCriticalSection
		mov	eax, ds:dword_4060A8
		sub	esp, 4
		test	eax, eax
		jz	short loc_40225F
		mov	edx, [eax]
		cmp	edx, ebx
		jnz	short loc_402256
		jmp	short loc_402294
; ---------------------------------------------------------------------------

loc_402250:				; CODE XREF: .text:0040225Dj
		mov	edx, [eax]
		cmp	edx, ebx
		jz	short loc_402275

loc_402256:				; CODE XREF: .text:0040224Cj
		mov	ecx, eax
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_402250

loc_40225F:				; CODE XREF: .text:00402246j
		mov	dword ptr [esp], offset	CriticalSection
		call	LeaveCriticalSection
		sub	esp, 4

loc_40226E:				; CODE XREF: .text:00402292j
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_402275:				; CODE XREF: .text:00402254j
		mov	edx, [eax+8]
		mov	[ecx+8], edx

loc_40227B:				; CODE XREF: .text:0040229Dj
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_40226E
; ---------------------------------------------------------------------------

loc_402294:				; CODE XREF: .text:0040224Ej
		mov	edx, [eax+8]
		mov	ds:dword_4060A8, edx
		jmp	short loc_40227B
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:dword_406078
		test	eax, eax
		jnz	short loc_4022B5

loc_4022B0:				; CODE XREF: .text:004022D2j
					; .text:0040230Dj
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_4022B5:				; CODE XREF: .text:004022AEj
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	calloc
		mov	ebx, eax
		mov	eax, 0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_4022B0
		mov	eax, [ebp+8]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [ebp+0Ch]
		mov	[ebx+4], eax
		call	EnterCriticalSection
		mov	eax, ds:dword_4060A8
		mov	ds:dword_4060A8, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	LeaveCriticalSection
		xor	eax, eax
		sub	esp, 4
		jmp	short loc_4022B0
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getmainargs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __p__fmode]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __p__environ]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _cexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _setmode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SetUnhandledExceptionFilter]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION LoadLibraryA]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION FreeLibrary]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION VirtualQuery]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION VirtualProtect]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION TlsGetValue]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetLastError]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION DeleteCriticalSection]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION InitializeCriticalSection]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EnterCriticalSection]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION LeaveCriticalSection]
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4023E8	proc near		; DATA XREF: .text:00402408o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_4012F0
		mov	[esp+18h+var_18], offset sub_40137C
		call	sub_401000
		leave
		retn
sub_4023E8	endp

; ---------------------------------------------------------------------------
		align 4
dword_402404	dd 0FFFFFFFFh		; DATA XREF: sub_402070+8r
					; sub_402070+49r
		dd offset sub_4023E8
		align 10h
		dd 0FFFFFFFFh
dword_402414	dd 7Bh dup(0)		; DATA XREF: .data:off_403008o
		dd 280h	dup(?)
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000010 (	 16.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 0FFFFFFFFh		; DATA XREF: sub_401020+53r
dword_403004	dd 4000h		; DATA XREF: sub_401020+85r
					; sub_401020+D6w
off_403008	dd offset dword_402414	; DATA XREF: sub_402040+6r
					; sub_402040+13r ...
dword_40300C	dd 0			; DATA XREF: sub_4012F0:loc_40132Fr
					; sub_4012F0+71o
		align 1000h
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000354 (	852.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001C00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 404000h
; CHAR ModuleName[]
ModuleName	db 'libgcc_s_dw2-1.dll',0 ; DATA XREF: sub_4012F0+6o
					; sub_40137C+6o
; CHAR ProcName[]
ProcName	db '__register_frame_info',0 ; DATA XREF: sub_4012F0+17o
; CHAR aLibgcj11_dll[]
aLibgcj11_dll	db 'libgcj-11.dll',0    ; DATA XREF: sub_4012F0+49o
; CHAR a_jv_registercl[]
a_jv_registercl	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_4012F0+5Ao
; CHAR a__deregister_f[]
a__deregister_f	db '__deregister_frame_info',0 ; DATA XREF: sub_40137C+17o
		align 4
a1_29_4		db '1.29.4',0           ; DATA XREF: sub_4013C0+6o
aPango		db 'pango',0            ; DATA XREF: sub_4013C0+Eo
aPangoQuerymodu	db 'pango-querymodules (%s) %s',0Ah,0 ; DATA XREF: sub_4013C0+16o
a1_6_0		db '1.6.0',0            ; DATA XREF: sub_4013C0+22o
					; sub_401760+20Ao
aModuleInterfac	db 'module interface version: %s',0Ah,0 ; DATA XREF: sub_4013C0+2Ao
asc_4040B1	db '"',0                ; DATA XREF: sub_401404+31Fo
byte_4040B3	db 0			; DATA XREF: sub_401404+162o
aCannotLoadModu	db 'Cannot load module %s: %s',0Ah,0 ; DATA XREF: sub_401404+261o
		align 10h
aSDoesNotExport	db '%s does not export Pango module API',0Ah,0 ; DATA XREF: sub_401404+5Co
					; sub_401404+271o
aScript_engine_	db 'script_engine_list',0 ; DATA XREF: sub_401404+44o
aScript_engin_0	db 'script_engine_init',0 ; DATA XREF: sub_401404+9Fo
aScript_engin_1	db 'script_engine_exit',0 ; DATA XREF: sub_401404+BAo
aScript_engin_2	db 'script_engine_create',0 ; DATA XREF: sub_401404+D5o
aN		db '\n',0               ; DATA XREF: sub_401404:loc_40172Do
asc_404146	db '\"',0               ; DATA XREF: sub_401404:loc_4016E9o
asc_404149	db '\\',0               ; DATA XREF: sub_401404+2FBo
aSSSSSS		db '%s%s%s %s %s %s',0  ; DATA XREF: sub_401404+18Do
aEngineReported	db 'Engine reported invalid script value %d',0Ah,0
					; DATA XREF: sub_401404+1C8o
aPango_0	db 'Pango',0            ; DATA XREF: sub_401404+1D8o
aSS		db ' %s:%s',0           ; DATA XREF: sub_401404+211o
asc_404192	db 0Ah,0		; DATA XREF: sub_401404:loc_40162Do
aVersion	db 'version',0          ; DATA XREF: sub_401760+26o
aShowVersionNum	db 'Show version numbers',0 ; DATA XREF: sub_401760+46o
aModule___	db '- [MODULE]...',0    ; DATA XREF: sub_401760+4Eo
aParseOptionErr	db 'Parse option error: %s',0Ah,0 ; DATA XREF: sub_401760+230o
aParseOptionE_0	db 'Parse option error',0Ah,0 ; DATA XREF: sub_401760:loc_4019A8o
		align 4
aPangoModulesFi	db '# Pango Modules file',0Ah ; DATA XREF: sub_401760+A7o
		db '# Automatically generated file, do not edit',0Ah
		db '#',0Ah,0
aPangoModulespa	db 'Pango/ModulesPath',0 ; DATA XREF: sub_401760:loc_401854o
aModules	db 'modules',0          ; DATA XREF: sub_401760+202o
aModulespathS	db '# ModulesPath = %s',0Ah ; DATA XREF: sub_401760+10Eo
		db '#',0Ah,0
a_dll		db '.dll',0             ; DATA XREF: sub_401760+193o
		align 4
; CHAR LibFileName[]
LibFileName	db 'mingwm10.dll',0     ; DATA XREF: TlsCallback_0+50o
; CHAR a__mingwthr_rem[]
a__mingwthr_rem	db '__mingwthr_remove_key_dtor',0 ; DATA XREF: TlsCallback_0+6Co
; CHAR a__mingwthr_key[]
a__mingwthr_key	db '__mingwthr_key_dtor',0 ; DATA XREF: TlsCallback_0+84o
off_4042A4	dd offset TlsCallback_0	; DATA XREF: sub_401020+7r
aMingwRuntimeFa	db 'Mingw runtime failure:',0Ah,0 ; DATA XREF: sub_401D60+2Co
; char Format[]
Format		db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_401DB0+C6o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_401E90+19Ao
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_401E90+C6o
		align 4
dword_404354	dd 0			; DATA XREF: sub_401E90:loc_401EB5o
					; sub_401E90+2Ao ...
dword_404358	dd 0			; DATA XREF: sub_401E90+52r
dword_40435C	dd 0			; DATA XREF: sub_401E90+5Cr
dword_404360	dd 28h dup(0)		; DATA XREF: sub_401E90+66o
		align 1000h
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000004 (	  4.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_eh_fram	segment	dword public 'DATA' use32
		assume cs:_eh_fram
		;org 405000h
dword_405000	dd 80h dup(0)		; DATA XREF: sub_4012F0+36o
					; sub_40137C+2Eo
		align 1000h
_eh_fram	ends

; Section 5. (virtual address 00006000)
; Virtual size			: 000000FC (	252.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0400080: Bss Readable Writable
; Alignment	: 8 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 406000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_406000	dd ?			; DATA XREF: sub_401020+60o
					; sub_401020+AEr
dword_406004	dd ?			; DATA XREF: sub_401020+58o
					; sub_401020+A5r
dword_406008	dd 6 dup(?)		; DATA XREF: sub_4012F0+2Eo
dword_406020	dd ?			; DATA XREF: sub_401404:loc_4015EDr
					; sub_401404+299w
		align 8
TlsIndex	dd 4 dup(?)		; DATA XREF: .tls:TlsIndex_ptro
; HMODULE hLibModule
hLibModule	dd ?			; DATA XREF: TlsCallback_0+61w
					; TlsCallback_0+8Cr ...
		dd 3 dup(?)
dword_406048	dd ?			; DATA XREF: sub_401020+77r
					; sub_401020+EAr ...
dword_40604C	dd ?			; DATA XREF: sub_401C80+38w
					; sub_401C80+44w ...
dword_406050	dd ?			; DATA XREF: sub_401E90+6r
					; sub_401E90+32w
		align 10h
dword_406060	dd ?			; DATA XREF: sub_4020D0+6r
					; sub_4020D0:loc_4020E2w
		align 10h
dword_406070	dd ?			; DATA XREF: TlsCallback_0+15r
					; TlsCallback_0+1Ew ...
		align 8
dword_406078	dd ?			; DATA XREF: sub_402100+8r
					; sub_402180+26r ...
		dd 3 dup(?)
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_402100:loc_402118o
					; sub_402100:loc_40215Co ...
		dd 2 dup(?)
dword_4060A8	dd ?			; DATA XREF: sub_402100+24r
					; .text:0040223Cr ...
		dd 4 dup(?)
dword_4060BC	dd ?			; DATA XREF: TlsCallback_0+99w
					; TlsCallback_0+B8r ...
		dd 3 dup(?)
dword_4060CC	dd ?			; DATA XREF: TlsCallback_0+7Fw
					; TlsCallback_0+AEr ...
		dd 3 dup(?)
dword_4060DC	dd ?			; DATA XREF: TlsCallback_0:loc_401B46w
		align 1000h
_bss		ends

;
; Imports from libglib-2.0-0.dll
;
; Section 6. (virtual address 00007000)
; Virtual size			: 0000089C (   2204.)
; Section size in file		: 00000A00 (   2560.)
; Offset to raw	data for section: 00002200
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn g_ascii_table:dword ; DATA XREF: sub_401404+115r
		extrn __imp_g_build_filename:dword ; DATA XREF:	g_build_filenamer
		extrn __imp_g_dir_close:dword ;	DATA XREF: g_dir_closer
		extrn __imp_g_dir_open_utf8:dword ; DATA XREF: g_dir_open_utf8r
		extrn __imp_g_dir_read_name_utf8:dword ; DATA XREF: g_dir_read_name_utf8r
		extrn __imp_g_free:dword ; DATA	XREF: g_freer
		extrn __imp_g_get_current_dir_utf8:dword
					; DATA XREF: g_get_current_dir_utf8r
		extrn __imp_g_log:dword	; DATA XREF: g_logr
		extrn __imp_g_option_context_add_main_entries:dword
					; DATA XREF: g_option_context_add_main_entriesr
		extrn __imp_g_option_context_free:dword	; DATA XREF: g_option_context_freer
		extrn __imp_g_option_context_new:dword ; DATA XREF: g_option_context_newr
		extrn __imp_g_option_context_parse:dword
					; DATA XREF: g_option_context_parser
		extrn __imp_g_path_is_absolute:dword ; DATA XREF: g_path_is_absoluter
		extrn __imp_g_printerr:dword ; DATA XREF: g_printerrr
		extrn __imp_g_printf:dword ; DATA XREF:	g_printfr
		extrn __imp_g_strdup:dword ; DATA XREF:	g_strdupr
		extrn __imp_g_strfreev:dword ; DATA XREF: g_strfreevr
		extrn __imp_g_string_append:dword ; DATA XREF: g_string_appendr
		extrn __imp_g_string_free:dword	; DATA XREF: g_string_freer
		extrn __imp_g_string_insert_c:dword ; DATA XREF: g_string_insert_cr
		extrn __imp_g_string_new:dword ; DATA XREF: g_string_newr

;
; Imports from libgmodule-2.0-0.dll
;
		extrn __imp_g_module_close:dword ; DATA	XREF: g_module_closer
		extrn __imp_g_module_error:dword ; DATA	XREF: g_module_errorr
		extrn __imp_g_module_open_utf8:dword ; DATA XREF: g_module_open_utf8r
		extrn __imp_g_module_symbol:dword ; DATA XREF: g_module_symbolr

;
; Imports from libgobject-2.0-0.dll
;
		extrn __imp_g_enum_get_value:dword ; DATA XREF:	g_enum_get_valuer
		extrn __imp_g_type_class_ref:dword ; DATA XREF:	g_type_class_refr
		extrn __imp_g_type_init:dword ;	DATA XREF: g_type_initr

;
; Imports from libpango-1.0-0.dll
;
		extrn __imp_pango_config_key_get:dword ; DATA XREF: pango_config_key_getr
		extrn __imp_pango_get_lib_subdirectory:dword
					; DATA XREF: pango_get_lib_subdirectoryr
		extrn __imp_pango_script_get_type:dword	; DATA XREF: pango_script_get_typer
		extrn __imp_pango_split_file_list:dword	; DATA XREF: pango_split_file_listr

;
; Imports from KERNEL32.dll
;
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp_DeleteCriticalSection:dword	; DATA XREF: DeleteCriticalSectionr
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp_EnterCriticalSection:dword ; DATA XREF: EnterCriticalSectionr
; void __stdcall __noreturn ExitProcess(UINT uExitCode)
		extrn __imp_ExitProcess:dword ;	DATA XREF: ExitProcessr
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn __imp_FreeLibrary:dword ;	DATA XREF: FreeLibraryr
; DWORD	__stdcall GetLastError()
		extrn __imp_GetLastError:dword ; DATA XREF: GetLastErrorr
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn __imp_GetProcAddress:dword ; DATA	XREF: GetProcAddressr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp_InitializeCriticalSection:dword
					; DATA XREF: InitializeCriticalSectionr
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp_LeaveCriticalSection:dword ; DATA XREF: LeaveCriticalSectionr
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn __imp_LoadLibraryA:dword ; DATA XREF: LoadLibraryAr
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn __imp_SetUnhandledExceptionFilter:dword
					; DATA XREF: SetUnhandledExceptionFilterr
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn __imp_TlsGetValue:dword ;	DATA XREF: TlsGetValuer
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn __imp_VirtualProtect:dword ; DATA	XREF: VirtualProtectr
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn __imp_VirtualQuery:dword ; DATA XREF: VirtualQueryr

;
; Imports from msvcrt.dll
;
		extrn __imp___getmainargs:dword	; DATA XREF: __getmainargsr
		extrn __imp___p__environ:dword ; DATA XREF: __p__environr
		extrn __imp___p__fmode:dword ; DATA XREF: __p__fmoder
		extrn __set_app_type:dword ; CODE XREF:	.text:0040114Dp
					; start+Dp
					; DATA XREF: ...
		extrn __imp__cexit:dword ; DATA	XREF: _cexitr
		extrn _iob:dword	; DATA XREF: sub_401020:loc_4010F0r
					; sub_401D60+9r
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; DATA XREF: .text:00401016r
		extrn __imp__setmode:dword ; DATA XREF:	_setmoder
		extrn _winmajor:dword	; DATA XREF: TlsCallback_0+7r
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl atexit(void (__cdecl *)())
		extrn atexit:dword	; DATA XREF: sub_401000+6r
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; void __cdecl __noreturn exit(int Code)
		extrn __imp_exit:dword	; DATA XREF: exitr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
		extrn __imp_signal:dword ; DATA	XREF: signalr
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


; Section 7. (virtual address 00008000)
; Virtual size			: 00000018 (	 24.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 408000h
		dd 0
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		dd 0
dword_408014	dd 7Bh dup(0)		; DATA XREF: TlsCallback_0:loc_401C36o
					; TlsCallback_0+13Bo ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 00009000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 409000h
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		db 0
TlsStart	db 3 dup(0)		; DATA XREF: .tls:TlsDirectoryo
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end start
