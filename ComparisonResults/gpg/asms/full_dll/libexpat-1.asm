;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5CD1D00C4C5A503BFBC26B11974C2325
; Input	CRC32 :	ECB6438C

; ---------------------------------------------------------------------------
; File Name   :	C:\compspace\compare\gpg\dlls\full\libexpat-1.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	68F40000
; Section 1. (virtual address 00001000)
; Virtual size			: 00014FCC (  85964.)
; Section size in file		: 00015000 (  86016.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 68F41000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+8]
		mov	dword ptr [esp+8], offset dword_68F5D010
		mov	dword ptr [esp+4], offset Memory
		mov	[esp], eax
		call	__dllonexit
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F41030	proc near		; CODE XREF: sub_68F55BA0+31p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_10], offset dword_68F5D010
		mov	[esp+18h+var_14], offset Memory
		mov	[esp+18h+var_18], eax
		call	__dllonexit
		leave
		cmp	eax, 1
		sbb	eax, eax
		retn
sub_68F41030	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F41060	proc near		; CODE XREF: DllEntryPoint:loc_68F410F8p

Memory		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	edx, ds:Memory
		test	edx, edx
		jz	short loc_68F410A7
		mov	eax, ds:dword_68F5D010
		lea	ebx, [eax-4]
		cmp	edx, ebx
		ja	short loc_68F41095
		lea	esi, [esi+0]

loc_68F41080:				; CODE XREF: sub_68F41060+33j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_68F4108E
		call	eax
		mov	edx, ds:Memory

loc_68F4108E:				; CODE XREF: sub_68F41060+24j
		sub	ebx, 4
		cmp	edx, ebx
		jbe	short loc_68F41080

loc_68F41095:				; CODE XREF: sub_68F41060+1Bj
		mov	[esp+8+Memory],	edx ; Memory
		call	free
		mov	ds:Memory, 0

loc_68F410A7:				; CODE XREF: sub_68F41060+Fj
		mov	[esp+8+Memory],	0 ; File
		call	fflush
		add	esp, 4
		pop	ebx
		pop	ebp
		retn
sub_68F41060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

Size		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
hinstDLL	= dword	ptr  8
fdwReason	= dword	ptr  0Ch
lpReserved	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+fdwReason]
		cmp	ebx, 1
		jz	short loc_68F41108
		mov	eax, [ebp+lpReserved]
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+hinstDLL]
		mov	[esp+18h+Size],	eax
		call	sub_68F55C20
		sub	esp, 0Ch
		test	ebx, ebx
		mov	esi, eax
		jnz	short loc_68F410FD
		mov	eax, ds:Memory
		test	eax, eax
		jz	short loc_68F41157

loc_68F410F8:				; CODE XREF: DllEntryPoint+93j
		call	sub_68F41060

loc_68F410FD:				; CODE XREF: DllEntryPoint+2Dj
					; DllEntryPoint+95j ...
		lea	esp, [ebp-8]
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_68F41108:				; CODE XREF: DllEntryPoint+Ej
		mov	[esp+18h+Size],	80h ; Size
		call	malloc
		test	eax, eax
		mov	ds:Memory, eax
		jz	short loc_68F41164
		mov	dword ptr [eax], 0
		mov	ds:dword_68F5D010, eax
		call	sub_68F55B40
		call	sub_68F55C00
		mov	eax, [ebp+lpReserved]
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+hinstDLL]
		mov	[esp+18h+Size],	eax
		call	sub_68F55C20
		sub	esp, 0Ch
		test	eax, eax
		mov	esi, eax
		jz	short loc_68F410F8
		jmp	short loc_68F410FD
; ---------------------------------------------------------------------------

loc_68F41157:				; CODE XREF: DllEntryPoint+36j
		xor	esi, esi
		lea	esp, [ebp-8]
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_68F41164:				; CODE XREF: DllEntryPoint+5Bj
		call	_errno
		xor	esi, esi
		mov	dword ptr [eax], 0Ch
		jmp	short loc_68F410FD
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F41180	proc near		; CODE XREF: sub_68F55FA8+4j
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_68F55CE0
sub_68F41180	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F41190	proc near		; CODE XREF: sub_68F43AE0+112p
					; sub_68F43AE0+11Fp ...
		push	ebp
		mov	ebp, esp
		pop	ebp
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+10h], 0
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+8], 0
		mov	[eax+14h], edx
		retn
sub_68F41190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F411C0	proc near		; CODE XREF: XML_ParserReset+3Bp
					; XML_ParserReset+8Cp
		push	ebp
		test	edx, edx
		mov	ebp, esp
		push	ebx
		mov	ebx, eax
		jz	short loc_68F411E4
		mov	ecx, [eax+178h]

loc_68F411D0:				; CODE XREF: sub_68F411C0+22j
		mov	eax, edx
		mov	edx, [edx+4]
		mov	[eax+4], ecx
		mov	ecx, eax
		test	edx, edx
		mov	[ebx+178h], eax
		jnz	short loc_68F411D0

loc_68F411E4:				; CODE XREF: sub_68F411C0+8j
		pop	ebx
		pop	ebp
		retn
sub_68F411C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F411F0	proc near		; CODE XREF: sub_68F42F20+1BDp
					; sub_68F42F20+237p ...
		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ecx, [eax+4]
		mov	ebx, eax
		test	ecx, ecx
		jnz	short loc_68F41220
		mov	dword ptr [ebx+10h], 0
		mov	ecx, [eax]
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx], 0
		mov	[eax+4], ecx
		mov	dword ptr [ebx+8], 0
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41220:				; CODE XREF: sub_68F411F0+Bj
		mov	edx, [eax]
		jmp	short loc_68F4122F
; ---------------------------------------------------------------------------

loc_68F41224:				; CODE XREF: sub_68F411F0+41j
		mov	eax, [edx]
		mov	[edx], ecx
		mov	ecx, edx
		mov	[ebx+4], edx
		mov	edx, eax

loc_68F4122F:				; CODE XREF: sub_68F411F0+32j
		test	edx, edx
		jnz	short loc_68F41224
		mov	dword ptr [ebx], 0
		mov	dword ptr [ebx+10h], 0
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+8], 0
		pop	ebx
		pop	ebp
		retn
sub_68F411F0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F41260
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F41260	proc near		; CODE XREF: .text:68F41251j
					; XML_ParserFree+32p ...

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, edx
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	ebx, eax
		jmp	short loc_68F41282
; ---------------------------------------------------------------------------
		align 10h

loc_68F41270:				; CODE XREF: sub_68F41260+26j
		mov	eax, [esi+10h]
		mov	ebx, [ebx+4]
		mov	[esp+18h+var_18], eax
		call	dword ptr [edi+14h]
		mov	[esp+18h+var_18], esi
		call	dword ptr [edi+14h]

loc_68F41282:				; CODE XREF: sub_68F41260+Dj
		test	ebx, ebx
		mov	esi, ebx
		jnz	short loc_68F41270
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F41260	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F41290	proc near		; CODE XREF: XML_ParserFree+7Bp
					; XML_ParserFree+86p ...

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 10h
		mov	edx, [eax]
		jmp	short loc_68F412AD
; ---------------------------------------------------------------------------
		align 10h

loc_68F412A0:				; CODE XREF: sub_68F41290+1Fj
		mov	ebx, [edx]
		mov	[esp+18h+var_18], edx
		mov	eax, [esi+14h]
		call	dword ptr [eax+8]
		mov	edx, ebx

loc_68F412AD:				; CODE XREF: sub_68F41290+Cj
		test	edx, edx
		jnz	short loc_68F412A0
		mov	edx, [esi+4]
		jmp	short loc_68F412C3
; ---------------------------------------------------------------------------

loc_68F412B6:				; CODE XREF: sub_68F41290+35j
		mov	ebx, [edx]
		mov	[esp+18h+var_18], edx
		mov	eax, [esi+14h]
		call	dword ptr [eax+8]
		mov	edx, ebx

loc_68F412C3:				; CODE XREF: sub_68F41290+24j
		test	edx, edx
		jnz	short loc_68F412B6
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F41290	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  54. XML_UseParserAsHandlerArg

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_UseParserAsHandlerArg
XML_UseParserAsHandlerArg proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[eax+4], eax
		pop	ebp
		retn
XML_UseParserAsHandlerArg endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  58. XML_UseForeignDTD

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_UseForeignDTD
XML_UseForeignDTD proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		push	ebx
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebx+1E0h]
		cmp	eax, 1
		setz	dl
		cmp	eax, 3
		setz	al
		or	eax, edx
		test	al, 1
		mov	edx, 1Ah
		jnz	short loc_68F4130F
		mov	[ebx+1E9h], cl
		xor	edx, edx

loc_68F4130F:				; CODE XREF: XML_UseForeignDTD+25j
		pop	ebx
		mov	eax, edx
		pop	ebp
		retn
XML_UseForeignDTD endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. XML_SetReturnNSTriplet

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetReturnNSTriplet
XML_SetReturnNSTriplet proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+1E0h]
		cmp	eax, 1
		setz	dl
		cmp	eax, 3
		setz	al
		or	eax, edx
		test	al, 1
		jnz	short loc_68F4134A
		mov	eax, [ebp+arg_4]
		test	eax, eax
		setnz	byte ptr [ecx+0EDh]

loc_68F4134A:				; CODE XREF: XML_SetReturnNSTriplet+1Cj
		pop	ebp
		retn
XML_SetReturnNSTriplet endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  52. XML_SetUserData

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetUserData
XML_SetUserData	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	eax, [edx]
		cmp	[edx+4], eax
		jz	short loc_68F41364
		mov	[edx], ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41364:				; CODE XREF: XML_SetUserData+Ej
		mov	[edx], ecx
		mov	[edx+4], ecx
		pop	ebp
		retn
XML_SetUserData	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. XML_GetBase

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetBase
XML_GetBase	proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		mov	eax, [eax+168h]
		retn
XML_GetBase	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. XML_GetSpecifiedAttributeCount

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetSpecifiedAttributeCount
XML_GetSpecifiedAttributeCount proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		mov	eax, [eax+180h]
		retn
XML_GetSpecifiedAttributeCount endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. XML_GetIdAttributeIndex

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetIdAttributeIndex
XML_GetIdAttributeIndex	proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		mov	eax, [eax+184h]
		retn
XML_GetIdAttributeIndex	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. XML_SetElementHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetElementHandler
XML_SetElementHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax+34h], edx
		mov	edx, [ebp+arg_8]
		mov	[eax+38h], edx
		pop	ebp
		retn
XML_SetElementHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  48. XML_SetStartElementHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetStartElementHandler
XML_SetStartElementHandler proc	near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+34h], edx
		pop	ebp
		retn
XML_SetStartElementHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. XML_SetEndElementHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetEndElementHandler
XML_SetEndElementHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+38h], edx
		pop	ebp
		retn
XML_SetEndElementHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. XML_SetCharacterDataHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetCharacterDataHandler
XML_SetCharacterDataHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+3Ch], edx
		pop	ebp
		retn
XML_SetCharacterDataHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  44. XML_SetProcessingInstructionHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetProcessingInstructionHandler
XML_SetProcessingInstructionHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+40h], edx
		pop	ebp
		retn
XML_SetProcessingInstructionHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. XML_SetCommentHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetCommentHandler
XML_SetCommentHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+44h], edx
		pop	ebp
		retn
XML_SetCommentHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. XML_SetCdataSectionHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetCdataSectionHandler
XML_SetCdataSectionHandler proc	near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+48h], edx
		mov	edx, [ebp+arg_8]
		mov	[eax+4Ch], edx
		pop	ebp
		retn
XML_SetCdataSectionHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  46. XML_SetStartCdataSectionHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetStartCdataSectionHandler
XML_SetStartCdataSectionHandler	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+48h], edx
		pop	ebp
		retn
XML_SetStartCdataSectionHandler	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. XML_SetEndCdataSectionHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetEndCdataSectionHandler
XML_SetEndCdataSectionHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+4Ch], edx
		pop	ebp
		retn
XML_SetEndCdataSectionHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. XML_SetDefaultHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetDefaultHandler
XML_SetDefaultHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	byte ptr [edx+134h], 0
		mov	[edx+50h], eax
		pop	ebp
		retn
XML_SetDefaultHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  28. XML_SetDefaultHandlerExpand

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetDefaultHandlerExpand
XML_SetDefaultHandlerExpand proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	byte ptr [edx+134h], 1
		mov	[edx+50h], eax
		pop	ebp
		retn
XML_SetDefaultHandlerExpand endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. XML_SetDoctypeDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetDoctypeDeclHandler
XML_SetDoctypeDeclHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax+54h], edx
		mov	edx, [ebp+arg_8]
		mov	[eax+58h], edx
		pop	ebp
		retn
XML_SetDoctypeDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  47. XML_SetStartDoctypeDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetStartDoctypeDeclHandler
XML_SetStartDoctypeDeclHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+54h], edx
		pop	ebp
		retn
XML_SetStartDoctypeDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. XML_SetEndDoctypeDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetEndDoctypeDeclHandler
XML_SetEndDoctypeDeclHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+58h], edx
		pop	ebp
		retn
XML_SetEndDoctypeDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  51. XML_SetUnparsedEntityDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetUnparsedEntityDeclHandler
XML_SetUnparsedEntityDeclHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+5Ch], edx
		pop	ebp
		retn
XML_SetUnparsedEntityDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  42. XML_SetNotationDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetNotationDeclHandler
XML_SetNotationDeclHandler proc	near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+60h], edx
		pop	ebp
		retn
XML_SetNotationDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  40. XML_SetNamespaceDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetNamespaceDeclHandler
XML_SetNamespaceDeclHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax+64h], edx
		mov	edx, [ebp+arg_8]
		mov	[eax+68h], edx
		pop	ebp
		retn
XML_SetNamespaceDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  49. XML_SetStartNamespaceDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetStartNamespaceDeclHandler
XML_SetStartNamespaceDeclHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+64h], edx
		pop	ebp
		retn
XML_SetStartNamespaceDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. XML_SetEndNamespaceDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetEndNamespaceDeclHandler
XML_SetEndNamespaceDeclHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+68h], edx
		pop	ebp
		retn
XML_SetEndNamespaceDeclHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  41. XML_SetNotStandaloneHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetNotStandaloneHandler
XML_SetNotStandaloneHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+6Ch], edx
		pop	ebp
		retn
XML_SetNotStandaloneHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. XML_SetExternalEntityRefHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetExternalEntityRefHandler
XML_SetExternalEntityRefHandler	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+70h], edx
		pop	ebp
		retn
XML_SetExternalEntityRefHandler	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  39. XML_SetExternalEntityRefHandlerArg

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetExternalEntityRefHandlerArg
XML_SetExternalEntityRefHandlerArg proc	near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		test	edx, edx
		jz	short loc_68F41562
		mov	[eax+74h], edx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41562:				; CODE XREF: XML_SetExternalEntityRefHandlerArg+Bj
		mov	[eax+74h], eax
		pop	ebp
		retn
XML_SetExternalEntityRefHandlerArg endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  56. XML_SetSkippedEntityHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetSkippedEntityHandler
XML_SetSkippedEntityHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+78h], edx
		pop	ebp
		retn
XML_SetSkippedEntityHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  50. XML_SetUnknownEncodingHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetUnknownEncodingHandler
XML_SetUnknownEncodingHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax+7Ch], edx
		mov	edx, [ebp+arg_8]
		mov	[eax+0F8h], edx
		pop	ebp
		retn
XML_SetUnknownEncodingHandler endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. XML_SetElementDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetElementDeclHandler
XML_SetElementDeclHandler proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+80h], edx
		pop	ebp
		retn
XML_SetElementDeclHandler endp

; ---------------------------------------------------------------------------
		jmp	short XML_SetAttlistDeclHandler
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. XML_SetAttlistDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetAttlistDeclHandler
XML_SetAttlistDeclHandler proc near	; CODE XREF: .text:68F415B1j

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+84h], edx
		pop	ebp
		retn
XML_SetAttlistDeclHandler endp

; ---------------------------------------------------------------------------
		jmp	short XML_SetEntityDeclHandler
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. XML_SetEntityDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetEntityDeclHandler
XML_SetEntityDeclHandler proc near	; CODE XREF: .text:68F415D1j

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+88h], edx
		pop	ebp
		retn
XML_SetEntityDeclHandler endp

; ---------------------------------------------------------------------------
		jmp	short XML_SetXmlDeclHandler
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  53. XML_SetXmlDeclHandler

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetXmlDeclHandler
XML_SetXmlDeclHandler proc near		; CODE XREF: .text:68F415F1j

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax+8Ch], edx
		pop	ebp
		retn
XML_SetXmlDeclHandler endp

; ---------------------------------------------------------------------------
		jmp	short XML_SetParamEntityParsing
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  43. XML_SetParamEntityParsing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetParamEntityParsing
XML_SetParamEntityParsing proc near	; CODE XREF: .text:68F41611j

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+1E0h]
		cmp	eax, 1
		setz	dl
		cmp	eax, 3
		setz	al
		or	eax, edx
		xor	edx, edx
		test	al, 1
		jnz	short loc_68F4164E
		mov	eax, [ebp+arg_4]
		mov	edx, 1
		mov	[ecx+1ECh], eax

loc_68F4164E:				; CODE XREF: XML_SetParamEntityParsing+1Ej
		pop	ebp
		mov	eax, edx
		retn
XML_SetParamEntityParsing endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. XML_ParseBuffer

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ParseBuffer
XML_ParseBuffer	proc near		; CODE XREF: XML_Parse+C3j

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_4]
		mov	[ebp+var_4], edi
		mov	eax, [ebx+1E0h]
		mov	edi, 1
		cmp	eax, 2
		jz	loc_68F41751
		cmp	eax, 3
		jz	loc_68F41737
		add	[ebx+24h], esi
		mov	eax, 1
		mov	edx, [ebx+1Ch]
		mov	[ebx+1E0h], eax
		movzx	eax, byte ptr [ebp+arg_8]
		mov	ecx, [ebx+18h]
		add	edx, esi
		mov	[ebx+1Ch], edx
		mov	[ebx+1E4h], al
		lea	eax, [ebx+18h]
		mov	[ebx+128h], ecx
		mov	[ebx+28h], edx
		mov	[esp+28h+var_1C], eax
		mov	[esp+28h+var_20], edx
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], ebx
		call	dword ptr [ebx+118h]
		mov	[ebx+11Ch], eax
		test	eax, eax
		jnz	short loc_68F41758
		mov	eax, [ebx+1E0h]
		cmp	eax, 1
		jbe	loc_68F41771
		cmp	eax, 3
		jz	loc_68F4178E

loc_68F416F8:				; CODE XREF: XML_ParseBuffer+116j
					; XML_ParseBuffer+133j
		lea	eax, [ebx+198h]
		mov	edx, [ebx+90h]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebx+18h]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebx+128h]
		mov	[esp+28h+var_28], edx
		mov	[esp+28h+var_24], eax
		call	dword ptr [edx+34h]
		mov	eax, [ebx+18h]
		mov	[ebx+128h], eax
		mov	ebx, [ebp+var_C]
		mov	eax, edi
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41737:				; CODE XREF: XML_ParseBuffer+2Cj
		mov	eax, 21h

loc_68F4173C:				; CODE XREF: XML_ParseBuffer+F6j
		mov	[ebx+11Ch], eax

loc_68F41742:				; CODE XREF: XML_ParseBuffer+10Fj
		xor	eax, eax

loc_68F41744:				; CODE XREF: XML_ParseBuffer+12Cj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41751:				; CODE XREF: XML_ParseBuffer+23j
		mov	eax, 24h
		jmp	short loc_68F4173C
; ---------------------------------------------------------------------------

loc_68F41758:				; CODE XREF: XML_ParseBuffer+7Ej
		mov	eax, [ebx+120h]
		mov	esi, offset sub_68F43430
		mov	[ebx+118h], esi
		mov	[ebx+124h], eax
		jmp	short loc_68F41742
; ---------------------------------------------------------------------------

loc_68F41771:				; CODE XREF: XML_ParseBuffer+89j
		mov	ecx, [ebp+arg_8]
		test	ecx, ecx
		jz	loc_68F416F8
		mov	edx, 2
		mov	eax, 1
		mov	[ebx+1E0h], edx
		jmp	short loc_68F41744
; ---------------------------------------------------------------------------

loc_68F4178E:				; CODE XREF: XML_ParseBuffer+92j
		mov	edi, 2
		jmp	loc_68F416F8
XML_ParseBuffer	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. XML_GetBuffer

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetBuffer
XML_GetBuffer	proc near		; CODE XREF: XML_Parse+8Ep

Dst		= dword	ptr -28h
Src		= dword	ptr -24h
Size		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	eax, [ecx+1E0h]
		cmp	eax, 2
		jz	loc_68F41930
		cmp	eax, 3
		jz	loc_68F41945
		mov	ecx, [ebp+arg_0]
		mov	ebx, [ecx+20h]
		mov	ecx, [ecx+1Ch]
		mov	eax, ebx
		sub	eax, ecx
		cmp	eax, edx
		jge	short loc_68F41830
		mov	eax, [ebp+arg_0]
		mov	edi, [eax+18h]
		mov	eax, ecx
		sub	eax, edi
		mov	esi, edi
		add	edx, eax
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	[ebp+var_14], eax
		sub	esi, eax
		cmp	esi, 400h
		jle	short loc_68F41807
		mov	esi, 400h

loc_68F41807:				; CODE XREF: XML_GetBuffer+60j
		mov	eax, ebx
		add	edx, esi
		sub	eax, [ebp+var_14]
		cmp	eax, edx
		jl	short loc_68F41840
		mov	edx, [ebp+var_14]
		mov	eax, edi
		sub	eax, edx
		cmp	eax, esi
		jg	loc_68F418E6
		jmp	short loc_68F41830
; ---------------------------------------------------------------------------
		align 10h

loc_68F41830:				; CODE XREF: XML_GetBuffer+3Cj
					; XML_GetBuffer+81j ...
		mov	eax, ecx

loc_68F41832:				; CODE XREF: XML_GetBuffer+1A0j
					; XML_GetBuffer+1B2j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F41840:				; CODE XREF: XML_GetBuffer+70j
		mov	eax, ebx
		sub	eax, edi
		jnz	short loc_68F41850
		mov	eax, 400h
		nop
		lea	esi, [esi+0]

loc_68F41850:				; CODE XREF: XML_GetBuffer+A4j
					; XML_GetBuffer+B7j
		lea	ebx, [eax+eax]
		cmp	ebx, edx
		mov	eax, ebx
		jl	short loc_68F41850
		mov	[esp+28h+Dst], ebx
		mov	edx, [ebp+arg_0]
		call	dword ptr [edx+0Ch]
		test	eax, eax
		mov	esi, eax
		jz	loc_68F41957
		mov	edx, [ebp+arg_0]
		lea	eax, [eax+ebx]
		mov	ecx, edx
		mov	[edx+20h], eax
		mov	edx, [edx+18h]
		test	edx, edx
		jz	loc_68F4191A
		mov	edi, [ecx+8]
		mov	ebx, edx
		sub	ebx, edi
		cmp	ebx, 400h
		jle	short loc_68F41896
		mov	ebx, 400h

loc_68F41896:				; CODE XREF: XML_GetBuffer+EFj
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+1Ch]
		mov	[esp+28h+Dst], esi ; Dst
		sub	eax, edx
		add	eax, ebx
		mov	[esp+28h+Size],	eax ; Size
		sub	edx, ebx
		mov	[esp+28h+Src], edx ; Src
		call	memcpy
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[esp+28h+Dst], eax
		call	dword ptr [edx+14h]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+18h]
		mov	[ecx+8], esi
		mov	eax, [ecx+1Ch]
		sub	eax, edx
		lea	eax, [esi+eax]
		mov	edx, [ebp+arg_0]
		lea	ecx, [eax+ebx]
		mov	eax, [ebp+arg_0]
		mov	[eax+1Ch], ecx
		lea	eax, [esi+ebx]
		mov	[edx+18h], eax
		jmp	loc_68F41830
; ---------------------------------------------------------------------------

loc_68F418E6:				; CODE XREF: XML_GetBuffer+7Bj
		mov	ebx, eax
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_14]
		sub	ebx, esi
		add	eax, esi
		mov	[esp+28h+Size],	eax ; Size
		mov	eax, [ebp+var_14]
		mov	[esp+28h+Dst], edx ; Dst
		add	eax, ebx
		mov	[esp+28h+Src], eax ; Src
		call	memmove
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+1Ch]
		sub	[eax+18h], ebx
		sub	ecx, ebx
		mov	[eax+1Ch], ecx
		jmp	loc_68F41830
; ---------------------------------------------------------------------------

loc_68F4191A:				; CODE XREF: XML_GetBuffer+DCj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+1Ch]
		mov	[eax+8], esi
		mov	[eax+18h], esi
		add	ecx, esi
		mov	[eax+1Ch], ecx
		jmp	loc_68F41830
; ---------------------------------------------------------------------------

loc_68F41930:				; CODE XREF: XML_GetBuffer+1Ej
		mov	eax, [ebp+arg_0]
		mov	edx, 24h
		mov	[eax+11Ch], edx
		xor	eax, eax
		jmp	loc_68F41832
; ---------------------------------------------------------------------------

loc_68F41945:				; CODE XREF: XML_GetBuffer+27j
		mov	ebx, 21h
		xor	eax, eax
		mov	[ecx+11Ch], ebx
		jmp	loc_68F41832
; ---------------------------------------------------------------------------

loc_68F41957:				; CODE XREF: XML_GetBuffer+C6j
		mov	ecx, [ebp+arg_0]
		mov	eax, 1
		mov	[ecx+11Ch], eax
		xor	eax, eax
		jmp	loc_68F41832
XML_GetBuffer	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. XML_Parse

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl XML_Parse(int, int, size_t, int)
		public XML_Parse
XML_Parse	proc near

Dst		= dword	ptr -28h
Src		= dword	ptr -24h
Size		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_8]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebx+1E0h]
		cmp	eax, 2
		jz	short loc_68F419D0
		cmp	eax, 3
		jz	short loc_68F419F0
		mov	eax, 1
		test	esi, esi
		mov	[ebx+1E0h], eax
		jnz	short loc_68F419F7
		mov	eax, edi
		test	edi, edi
		mov	[ebx+1E4h], al
		mov	eax, 1
		jnz	short loc_68F41A38

loc_68F419BE:				; CODE XREF: XML_Parse+99j
					; XML_Parse+13Ej ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F419D0:				; CODE XREF: XML_Parse+27j
		mov	eax, 24h

loc_68F419D5:				; CODE XREF: XML_Parse+85j
		mov	[ebx+11Ch], eax
		xor	eax, eax

loc_68F419DD:				; CODE XREF: XML_Parse+15Cj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F419F0:				; CODE XREF: XML_Parse+2Cj
		mov	eax, 21h
		jmp	short loc_68F419D5
; ---------------------------------------------------------------------------

loc_68F419F7:				; CODE XREF: XML_Parse+3Bj
		mov	[esp+28h+Src], esi
		mov	[esp+28h+Dst], ebx
		call	XML_GetBuffer
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		jz	short loc_68F419BE
		mov	[esp+28h+Size],	esi ; Size
		mov	eax, [ebp+var_10]
		mov	[esp+28h+Dst], edx ; Dst
		mov	[esp+28h+Src], eax ; Src
		call	memcpy
		mov	[ebp+arg_8], edi
		mov	edi, [ebp+var_4]
		mov	[ebp+arg_4], esi
		mov	esi, [ebp+var_8]
		mov	[ebp+arg_0], ebx
		mov	ebx, [ebp+var_C]
		mov	esp, ebp
		pop	ebp
		jmp	XML_ParseBuffer
; ---------------------------------------------------------------------------

loc_68F41A38:				; CODE XREF: XML_Parse+4Cj
		mov	ecx, [ebx+18h]
		lea	eax, [ebx+18h]
		mov	edx, [ebx+1Ch]
		mov	[ebx+128h], ecx
		mov	[ebx+28h], edx
		mov	[esp+28h+var_1C], eax
		mov	[esp+28h+Size],	edx
		mov	[esp+28h+Src], ecx
		mov	[esp+28h+Dst], ebx
		call	dword ptr [ebx+118h]
		mov	[ebx+11Ch], eax
		test	eax, eax
		jnz	short loc_68F41AB3
		mov	eax, [ebx+1E0h]
		cmp	eax, 1
		jbe	short loc_68F41AD1
		cmp	eax, 3
		jnz	short loc_68F41ADC
		lea	eax, [ebx+198h]
		mov	edx, [ebx+90h]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebx+18h]
		mov	[esp+28h+Size],	eax
		mov	eax, [ebx+128h]
		mov	[esp+28h+Dst], edx
		mov	[esp+28h+Src], eax
		call	dword ptr [edx+34h]
		mov	eax, [ebx+18h]
		mov	[ebx+128h], eax
		mov	eax, 2
		jmp	loc_68F419BE
; ---------------------------------------------------------------------------

loc_68F41AB3:				; CODE XREF: XML_Parse+F7j
		mov	eax, [ebx+120h]
		mov	esi, offset sub_68F43430
		mov	[ebx+118h], esi
		mov	[ebx+124h], eax
		xor	eax, eax
		jmp	loc_68F419DD
; ---------------------------------------------------------------------------

loc_68F41AD1:				; CODE XREF: XML_Parse+102j
		mov	edi, 2
		mov	[ebx+1E0h], edi

loc_68F41ADC:				; CODE XREF: XML_Parse+107j
		mov	eax, 1
		jmp	loc_68F419BE
XML_Parse	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  63. XML_StopParser

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_StopParser
XML_StopParser	proc near

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		movzx	ecx, [ebp+arg_4]
		mov	eax, [edx+1E0h]
		cmp	eax, 2
		jz	short loc_68F41B40
		cmp	eax, 3
		jz	short loc_68F41B50
		test	cl, cl
		jnz	short loc_68F41B20

loc_68F41B0E:				; CODE XREF: XML_StopParser+69j
		mov	eax, 2

loc_68F41B13:				; CODE XREF: XML_StopParser+3Cj
		mov	[edx+1E0h], eax
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41B20:				; CODE XREF: XML_StopParser+1Cj
		cmp	byte ptr [edx+1E8h], 0
		mov	eax, 3
		jz	short loc_68F41B13
		mov	eax, 25h

loc_68F41B33:				; CODE XREF: XML_StopParser+67j
		mov	[edx+11Ch], eax
		xor	eax, eax

loc_68F41B3B:				; CODE XREF: XML_StopParser+5Dj
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F41B40:				; CODE XREF: XML_StopParser+13j
		mov	ecx, 24h
		xor	eax, eax
		mov	[edx+11Ch], ecx
		jmp	short loc_68F41B3B
; ---------------------------------------------------------------------------
		align 10h

loc_68F41B50:				; CODE XREF: XML_StopParser+18j
		test	cl, cl
		mov	eax, 21h
		jnz	short loc_68F41B33
		jmp	short loc_68F41B0E
XML_StopParser	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  64. XML_ResumeParser

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ResumeParser
XML_ResumeParser proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_4], esi
		mov	esi, 1
		cmp	dword ptr [ebx+1E0h], 3
		jz	short loc_68F41B94
		mov	eax, 22h
		mov	[ebx+11Ch], eax

loc_68F41B88:				; CODE XREF: XML_ResumeParser+7Ej
		xor	eax, eax

loc_68F41B8A:				; CODE XREF: XML_ResumeParser+C2j
					; XML_ResumeParser+E0j
		mov	ebx, [ebp+var_8]
		mov	esi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41B94:				; CODE XREF: XML_ResumeParser+1Bj
		mov	eax, 1
		mov	[ebx+1E0h], eax
		lea	eax, [ebx+18h]
		mov	[esp+18h+var_C], eax
		mov	eax, [ebx+28h]
		mov	[esp+18h+var_10], eax
		mov	eax, [ebx+18h]
		mov	[esp+18h+var_18], ebx
		mov	[esp+18h+var_14], eax
		call	dword ptr [ebx+118h]
		mov	[ebx+11Ch], eax
		test	eax, eax
		jz	short loc_68F41BE0
		mov	eax, [ebx+120h]
		mov	[ebx+124h], eax
		mov	eax, offset sub_68F43430
		mov	[ebx+118h], eax
		jmp	short loc_68F41B88
; ---------------------------------------------------------------------------

loc_68F41BE0:				; CODE XREF: XML_ResumeParser+65j
		mov	eax, [ebx+1E0h]
		cmp	eax, 1
		jbe	short loc_68F41C27
		cmp	eax, 3
		jz	short loc_68F41C45

loc_68F41BF0:				; CODE XREF: XML_ResumeParser+CEj
					; XML_ResumeParser+EAj
		lea	eax, [ebx+198h]
		mov	edx, [ebx+90h]
		mov	[esp+18h+var_C], eax
		mov	eax, [ebx+18h]
		mov	[esp+18h+var_10], eax
		mov	eax, [ebx+128h]
		mov	[esp+18h+var_18], edx
		mov	[esp+18h+var_14], eax
		call	dword ptr [edx+34h]
		mov	eax, [ebx+18h]
		mov	[ebx+128h], eax
		mov	eax, esi
		jmp	loc_68F41B8A
; ---------------------------------------------------------------------------

loc_68F41C27:				; CODE XREF: XML_ResumeParser+89j
		cmp	byte ptr [ebx+1E4h], 0
		jz	short loc_68F41BF0
		mov	eax, 2
		mov	[ebx+1E0h], eax
		mov	eax, 1
		jmp	loc_68F41B8A
; ---------------------------------------------------------------------------

loc_68F41C45:				; CODE XREF: XML_ResumeParser+8Ej
		mov	esi, 2
		jmp	short loc_68F41BF0
XML_ResumeParser endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  65. XML_GetParsingStatus

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetParsingStatus
XML_GetParsingStatus proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_68F41C73
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+1E4h]
		mov	eax, [eax+1E0h]
		mov	[ecx+4], edx
		mov	[ecx], eax
		leave
		retn
; ---------------------------------------------------------------------------

loc_68F41C73:				; CODE XREF: XML_GetParsingStatus+Bj
		mov	[esp+18h+var_18], offset aStatusNull ; "status != NULL"
		mov	edx, 6D6h
		mov	eax, offset aLibXmlparse_c ; "lib/xmlparse.c"
		mov	[esp+18h+var_10], edx
		mov	[esp+18h+var_14], eax
		call	_assert
XML_GetParsingStatus endp

; ---------------------------------------------------------------------------
		jmp	short XML_GetErrorCode
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. XML_GetErrorCode

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetErrorCode
XML_GetErrorCode proc near		; CODE XREF: .text:68F41C91j

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		mov	eax, [eax+11Ch]
		retn
XML_GetErrorCode endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. XML_GetCurrentByteIndex

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetCurrentByteIndex
XML_GetCurrentByteIndex	proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	edx, 0FFFFFFFFh
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_0]
		mov	ecx, [ebx+120h]
		test	ecx, ecx
		jz	short loc_68F41CD0
		mov	eax, [ebx+28h]
		mov	edx, [ebx+24h]
		sub	eax, ecx
		sub	edx, eax

loc_68F41CD0:				; CODE XREF: XML_GetCurrentByteIndex+14j
		pop	ebx
		mov	eax, edx
		pop	ebp
		retn
XML_GetCurrentByteIndex	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. XML_GetCurrentByteCount

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetCurrentByteCount
XML_GetCurrentByteCount	proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+124h]
		test	eax, eax
		jz	short loc_68F41D00
		mov	edx, [edx+120h]
		test	edx, edx
		jz	short loc_68F41D00
		pop	ebp
		sub	eax, edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F41D00:				; CODE XREF: XML_GetCurrentByteCount+Ej
					; XML_GetCurrentByteCount+18j
		pop	ebp
		xor	eax, eax
		retn
XML_GetCurrentByteCount	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. XML_GetInputContext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetInputContext
XML_GetInputContext proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_0]
		mov	edx, [ebx+120h]
		test	edx, edx
		jz	short loc_68F41D40
		mov	ecx, [ebx+8]
		test	ecx, ecx
		jz	short loc_68F41D40
		mov	eax, [ebp+arg_4]
		sub	edx, ecx
		mov	[eax], edx
		mov	edx, [ebx+1Ch]
		mov	eax, [ebp+arg_8]
		sub	edx, ecx
		mov	[eax], edx
		mov	eax, ecx
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F41D40:				; CODE XREF: XML_GetInputContext+Fj
					; XML_GetInputContext+16j
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
XML_GetInputContext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. XML_GetCurrentLineNumber

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetCurrentLineNumber
XML_GetCurrentLineNumber proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_4], esi
		mov	ecx, [ebx+120h]
		test	ecx, ecx
		jz	short loc_68F41D73
		mov	esi, [ebx+128h]
		cmp	ecx, esi
		jnb	short loc_68F41D84

loc_68F41D73:				; CODE XREF: XML_GetCurrentLineNumber+17j
		mov	eax, [ebx+198h]
		mov	esi, [ebp+var_4]
		mov	ebx, [ebp+var_8]
		mov	esp, ebp
		inc	eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41D84:				; CODE XREF: XML_GetCurrentLineNumber+21j
		mov	eax, [ebx+90h]
		lea	edx, [ebx+198h]
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_C], edx
		mov	[esp+18h+var_18], eax
		mov	[esp+18h+var_10], ecx
		call	dword ptr [eax+34h]
		mov	eax, [ebx+120h]
		mov	[ebx+128h], eax
		mov	esi, [ebp+var_4]
		mov	eax, [ebx+198h]
		mov	ebx, [ebp+var_8]
		mov	esp, ebp
		inc	eax
		pop	ebp
		retn
XML_GetCurrentLineNumber endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. XML_GetCurrentColumnNumber

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetCurrentColumnNumber
XML_GetCurrentColumnNumber proc	near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_4], esi
		mov	ecx, [ebx+120h]
		test	ecx, ecx
		jz	short loc_68F41DE3
		mov	esi, [ebx+128h]
		cmp	ecx, esi
		jnb	short loc_68F41DF3

loc_68F41DE3:				; CODE XREF: XML_GetCurrentColumnNumber+17j
		mov	eax, [ebx+19Ch]
		mov	ebx, [ebp+var_8]
		mov	esi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41DF3:				; CODE XREF: XML_GetCurrentColumnNumber+21j
		mov	eax, [ebx+90h]
		lea	edx, [ebx+198h]
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_C], edx
		mov	[esp+18h+var_18], eax
		mov	[esp+18h+var_10], ecx
		call	dword ptr [eax+34h]
		mov	eax, [ebx+120h]
		mov	[ebx+128h], eax
		mov	esi, [ebp+var_4]
		mov	eax, [ebx+19Ch]
		mov	ebx, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
XML_GetCurrentColumnNumber endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  59. XML_FreeContentModel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_FreeContentModel
XML_FreeContentModel proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], edx
		mov	ecx, [eax+14h]
		pop	ebp
		jmp	ecx
XML_FreeContentModel endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  60. XML_MemMalloc

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_MemMalloc
XML_MemMalloc	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], edx
		mov	ecx, [eax+0Ch]
		pop	ebp
		jmp	ecx
XML_MemMalloc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  61. XML_MemRealloc

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_MemRealloc
XML_MemRealloc	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+arg_0], edx
		mov	[ebp+arg_4], eax
		mov	ecx, [ecx+10h]
		pop	ebp
		jmp	ecx
XML_MemRealloc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  62. XML_MemFree

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_MemFree
XML_MemFree	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], edx
		mov	ecx, [eax+14h]
		pop	ebp
		jmp	ecx
XML_MemFree	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F41EB0	proc near		; CODE XREF: XML_DefaultCurrent+36p
					; sub_68F42110+1CCp ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 2Ch
		mov	ebx, eax
		cmp	byte ptr [edx+48h], 0
		mov	edi, [ebp+arg_4]
		jnz	loc_68F41F4B
		cmp	[eax+90h], edx
		jz	loc_68F41F69
		mov	eax, [eax+12Ch]
		mov	[ebp+var_14], eax
		add	eax, 4
		mov	[ebp+var_18], eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F41EF0:				; CODE XREF: sub_68F41EB0+91j
					; sub_68F41EB0+CBj
		mov	eax, [ebx+2Ch]
		lea	edx, [ebp+var_10]
		mov	[ebp+var_10], eax
		mov	eax, [ebx+30h]
		mov	[esp+38h+var_2C], edx
		mov	[esp+38h+var_30], edi
		mov	[esp+38h+var_28], eax
		lea	eax, [ebp+arg_0]
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], esi
		call	dword ptr [esi+3Ch]
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_18]
		mov	[edx], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_34], edx
		sub	eax, edx
		mov	[esp+38h+var_30], eax
		mov	eax, [ebx+4]
		mov	[esp+38h+var_38], eax
		call	dword ptr [ebx+50h]
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_14]
		mov	[edx], eax
		cmp	[ebp+arg_0], edi
		jnz	short loc_68F41EF0
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41F4B:				; CODE XREF: sub_68F41EB0+14j
		mov	eax, [ebp+arg_0]
		sub	edi, eax
		mov	[esp+38h+var_30], edi
		mov	[esp+38h+var_34], eax
		mov	eax, [ebx+4]
		mov	[esp+38h+var_38], eax
		call	dword ptr [ebx+50h]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41F69:				; CODE XREF: sub_68F41EB0+20j
		lea	eax, [eax+120h]
		lea	edx, [ebx+124h]
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], edx
		jmp	loc_68F41EF0
sub_68F41EB0	endp

; Exported entry   1. XML_DefaultCurrent

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_DefaultCurrent
XML_DefaultCurrent proc	near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ecx, [ebp+arg_0]
		mov	ebx, [ecx+50h]
		test	ebx, ebx
		jz	short loc_68F41FBB
		mov	ebx, [ecx+12Ch]
		test	ebx, ebx
		jnz	short loc_68F41FC1
		mov	eax, [ecx+124h]
		mov	edx, [ecx+90h]
		mov	[esp+18h+var_14], eax
		mov	eax, [ecx+120h]

loc_68F41FB1:				; CODE XREF: XML_DefaultCurrent+50j
		mov	[esp+18h+var_18], eax
		mov	eax, ecx
		call	sub_68F41EB0

loc_68F41FBB:				; CODE XREF: XML_DefaultCurrent+Fj
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F41FC1:				; CODE XREF: XML_DefaultCurrent+19j
		mov	eax, [ebx+4]
		mov	edx, [ecx+0E4h]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebx]
		jmp	short loc_68F41FB1
XML_DefaultCurrent endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. XML_ErrorString

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ErrorString
XML_ErrorString	proc near

arg_0		= dword	ptr  8

		push	ebp
		xor	edx, edx
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx-1]
		cmp	eax, 27h
		ja	short loc_68F41FF7
		mov	edx, ds:dword_68F57560[ecx*4]

loc_68F41FF7:				; CODE XREF: XML_ErrorString+Ej
		pop	ebp
		mov	eax, edx
		retn
XML_ErrorString	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. XML_ExpatVersion

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ExpatVersion
XML_ExpatVersion proc near
		push	ebp
		mov	eax, offset aExpat_2_0_1 ; "expat_2.0.1"
		mov	ebp, esp
		pop	ebp
		retn
XML_ExpatVersion endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. XML_ExpatVersionInfo

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ExpatVersionInfo
XML_ExpatVersionInfo proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 2
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 1
		leave
		retn	4
XML_ExpatVersionInfo endp

; ---------------------------------------------------------------------------
		jmp	short XML_GetFeatureList
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  57. XML_GetFeatureList

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_GetFeatureList
XML_GetFeatureList proc	near		; CODE XREF: .text:68F42031j
		push	ebp
		mov	eax, offset dword_68F57660
		mov	ebp, esp
		pop	ebp
		retn
XML_GetFeatureList endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42050	proc near		; CODE XREF: sub_68F497B0+58p
					; sub_68F49A70+55p

Dst		= dword	ptr -28h
Src		= dword	ptr -24h
Size		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [eax+16Ch]
		mov	[ebp+var_10], eax
		jmp	short loc_68F4209F
; ---------------------------------------------------------------------------

loc_68F42064:				; CODE XREF: sub_68F42050+98j
					; sub_68F42050+A1j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_68F42072
		sub	eax, ecx
		add	eax, edx
		mov	[ebx+10h], eax

loc_68F42072:				; CODE XREF: sub_68F42050+19j
		mov	[ebx+24h], edx
		mov	ecx, [ebp+var_14]
		lea	eax, [edx+ecx]
		mov	[ebx+28h], eax
		mov	eax, [ebp+var_18]
		mov	ecx, [ebx+4]
		lea	esi, [edx+eax]
		mov	edx, [ebx+8]

loc_68F4208A:				; CODE XREF: sub_68F42050+77j
		mov	[esp+28h+Size],	edx ; Size
		mov	[esp+28h+Src], ecx ; Src
		mov	[esp+28h+Dst], esi ; Dst
		call	memcpy
		mov	[ebx+4], esi
		mov	ebx, [ebx]

loc_68F4209F:				; CODE XREF: sub_68F42050+12j
		test	ebx, ebx
		jz	short loc_68F420F6
		mov	eax, [ebx+18h]
		mov	edi, [ebx+24h]
		mov	ecx, [ebx+4]
		inc	eax
		lea	esi, [edi+eax]
		cmp	ecx, esi
		mov	[ebp+var_18], eax
		jz	short loc_68F420F6
		mov	edx, [ebx+8]
		add	eax, edx
		mov	[ebp+var_14], eax
		mov	eax, [ebx+28h]
		sub	eax, edi
		cmp	eax, [ebp+var_14]
		jge	short loc_68F4208A
		mov	edx, [ebp+var_14]
		mov	ecx, [ebp+var_10]
		mov	[esp+28h+Src], edx
		mov	eax, [ebx+24h]
		mov	[esp+28h+Dst], eax
		call	dword ptr [ecx+10h]
		test	eax, eax
		mov	edx, eax
		jz	short loc_68F42103
		mov	ecx, [ebx+24h]
		cmp	[ebx+0Ch], ecx
		jnz	loc_68F42064
		mov	[ebx+0Ch], eax
		jmp	loc_68F42064
; ---------------------------------------------------------------------------

loc_68F420F6:				; CODE XREF: sub_68F42050+51j
					; sub_68F42050+65j
		mov	eax, 1

loc_68F420FB:				; CODE XREF: sub_68F42050+B5j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42103:				; CODE XREF: sub_68F42050+90j
		xor	eax, eax
		jmp	short loc_68F420FB
sub_68F42050	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42110	proc near		; CODE XREF: sub_68F486C0+610p
					; sub_68F49AE0+3Ep

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1D		= byte ptr -1Dh
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 3Ch
		mov	ebx, eax
		movzx	eax, [ebp+arg_C]
		mov	edx, [ebp+arg_0]
		cmp	[ebx+90h], esi
		mov	[ebp+var_1D], al
		mov	eax, [edx]
		mov	[ebp+var_1C], eax
		jz	loc_68F422E3
		mov	edi, [ebx+12Ch]
		lea	edx, [edi+4]
		mov	[ebp+var_24], edx

loc_68F42144:				; CODE XREF: sub_68F42110+1E8j
		mov	[edi], eax
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 0

loc_68F4214F:				; CODE XREF: sub_68F42110+1A8j
		lea	eax, [ebp+var_10]
		mov	[esp+48h+var_3C], eax
		mov	edx, [ebp+arg_4]
		mov	[esp+48h+var_40], edx
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], esi
		mov	[esp+48h+var_44], eax
		call	dword ptr [esi+8]
		mov	edx, [ebp+var_10]
		mov	ecx, [ebp+var_24]
		add	eax, 4
		mov	[ecx], edx
		cmp	eax, 2Ch	; switch 45 cases
		ja	short loc_68F42181 ; jumptable 68F4217A	default	case
		jmp	ds:off_68F576A8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F42181:				; CODE XREF: sub_68F42110+68j
					; sub_68F42110+6Aj
					; DATA XREF: ...
		mov	eax, [ebp+var_10] ; jumptable 68F4217A default case
		mov	[edi], eax
		mov	eax, 17h

loc_68F4218B:				; CODE XREF: sub_68F42110+AFj
					; sub_68F42110+B6j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42193:				; CODE XREF: sub_68F42110+6Aj
					; DATA XREF: .rdata:off_68F576A8o
		mov	edx, [ebx+4Ch]	; jumptable 68F4217A case 44
		test	edx, edx
		jnz	loc_68F4231B
		mov	eax, [ebx+50h]
		test	eax, eax
		jnz	loc_68F42346

loc_68F421A9:				; CODE XREF: sub_68F42110+213j
					; sub_68F42110+24Cj
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	[edx], eax
		mov	[ecx], eax
		xor	eax, eax
		cmp	dword ptr [ebx+1E0h], 2
		jnz	short loc_68F4218B

loc_68F421C1:				; CODE XREF: sub_68F42110+19Fj
		mov	eax, 23h
		jmp	short loc_68F4218B
; ---------------------------------------------------------------------------

loc_68F421C8:				; CODE XREF: sub_68F42110+6Aj
					; DATA XREF: .rdata:off_68F576A8o
		cmp	[ebp+var_1D], 0	; jumptable 68F4217A case 2
		mov	eax, 6
		jz	short loc_68F4218B
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+arg_8]
		mov	[edx], eax
		xor	eax, eax

loc_68F421DD:				; CODE XREF: sub_68F42110+EAj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F421E5:				; CODE XREF: sub_68F42110+6Aj
					; DATA XREF: .rdata:off_68F576A8o
		cmp	[ebp+var_1D], 0	; jumptable 68F4217A cases 0,3
		mov	eax, 14h
		jz	short loc_68F4218B
		mov	eax, [ebp+var_1C]
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax

loc_68F421F8:				; CODE XREF: sub_68F42110+1B6j
		xor	eax, eax
		jmp	short loc_68F421DD
; ---------------------------------------------------------------------------
		align 10h

loc_68F42200:				; CODE XREF: sub_68F42110+6Aj
					; DATA XREF: .rdata:off_68F576A8o
		mov	eax, [ebx+3Ch]	; jumptable 68F4217A case 10
		test	eax, eax
		mov	[ebp+var_28], eax
		jz	loc_68F42297
		cmp	byte ptr [esi+48h], 0
		jz	short loc_68F42222
		jmp	loc_68F42328
; ---------------------------------------------------------------------------
		align 10h

loc_68F42220:				; CODE XREF: sub_68F42110+163j
		mov	[edi], eax

loc_68F42222:				; CODE XREF: sub_68F42110+102j
		mov	eax, [ebx+2Ch]
		lea	edx, [ebp+var_18]
		lea	ecx, [ebp+var_1C]
		mov	[ebp+var_18], eax
		mov	eax, [ebx+30h]
		mov	[esp+48h+var_3C], edx
		mov	[esp+48h+var_38], eax
		mov	eax, [ebp+var_10]
		mov	[esp+48h+var_44], ecx
		mov	[esp+48h+var_48], esi
		mov	[esp+48h+var_40], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_24]
		mov	[edx], eax
		mov	edx, [ebx+2Ch]
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_44], edx
		sub	eax, edx
		mov	[esp+48h+var_40], eax
		mov	eax, [ebx+4]
		mov	[esp+48h+var_48], eax
		call	[ebp+var_28]
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+var_10]
		cmp	eax, edx
		jnz	short loc_68F42220
		jmp	short loc_68F422A1
; ---------------------------------------------------------------------------

loc_68F42277:				; CODE XREF: sub_68F42110+6Aj
					; DATA XREF: .rdata:off_68F576A8o
		mov	eax, [ebp+var_10] ; jumptable 68F4217A case 4
		mov	[edi], eax
		add	esp, 3Ch
		mov	eax, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F42290:				; CODE XREF: sub_68F42110+6Aj
					; DATA XREF: .rdata:off_68F576A8o
		mov	edx, [ebx+3Ch]	; jumptable 68F4217A case 11
		test	edx, edx
		jnz	short loc_68F422FD

loc_68F42297:				; CODE XREF: sub_68F42110+F8j
		mov	eax, [ebx+50h]
		test	eax, eax
		jnz	short loc_68F422CB

loc_68F4229E:				; CODE XREF: sub_68F42110+1D1j
					; sub_68F42110+209j ...
		mov	edx, [ebp+var_10]

loc_68F422A1:				; CODE XREF: sub_68F42110+165j
		mov	[ebp+var_1C], edx
		mov	eax, [ebx+1E0h]
		mov	[edi], edx
		cmp	eax, 2
		jz	loc_68F421C1
		cmp	eax, 3
		jnz	loc_68F4214F
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax
		jmp	loc_68F421F8
; ---------------------------------------------------------------------------

loc_68F422CB:				; CODE XREF: sub_68F42110+18Cj
		mov	eax, [ebp+var_10]
		mov	edx, esi
		mov	[esp+48h+var_44], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax
		mov	eax, ebx
		call	sub_68F41EB0
		jmp	short loc_68F4229E
; ---------------------------------------------------------------------------

loc_68F422E3:				; CODE XREF: sub_68F42110+22j
		mov	[ebx+120h], eax
		lea	ecx, [ebx+124h]
		lea	edi, [ebx+120h]
		mov	[ebp+var_24], ecx
		jmp	loc_68F42144
; ---------------------------------------------------------------------------

loc_68F422FD:				; CODE XREF: sub_68F42110+185j
		mov	[ebp+var_11], 0Ah
		mov	eax, 1
		mov	[esp+48h+var_40], eax
		lea	eax, [ebp+var_11]
		mov	[esp+48h+var_44], eax
		mov	eax, [ebx+4]
		mov	[esp+48h+var_48], eax
		call	edx
		jmp	short loc_68F4229E
; ---------------------------------------------------------------------------

loc_68F4231B:				; CODE XREF: sub_68F42110+88j
		mov	eax, [ebx+4]
		mov	[esp+48h+var_48], eax
		call	edx
		jmp	loc_68F421A9
; ---------------------------------------------------------------------------

loc_68F42328:				; CODE XREF: sub_68F42110+104j
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_1C]
		sub	eax, edx
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], edx
		mov	eax, [ebx+4]
		mov	[esp+48h+var_48], eax
		call	[ebp+var_28]
		jmp	loc_68F4229E
; ---------------------------------------------------------------------------

loc_68F42346:				; CODE XREF: sub_68F42110+93j
		mov	eax, [ebp+var_10]
		mov	edx, esi
		mov	[esp+48h+var_44], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax
		mov	eax, ebx
		call	sub_68F41EB0
		jmp	loc_68F421A9
sub_68F42110	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F42370
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_68F42370(int,	void *,	int)
sub_68F42370	proc near		; CODE XREF: .text:68F42361j
					; sub_68F44F00+301p ...

Dst		= dword	ptr -58h
Src		= dword	ptr -54h
Size		= dword	ptr -50h
var_45		= byte ptr -45h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	cl, 1
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_1C], eax
		mov	[ebp+var_20], edx
		mov	[ebp+var_21], 0
		mov	[ebp+var_38], 1
		movzx	eax, byte ptr [edi]
		test	al, al
		mov	[ebp+var_45], al
		jnz	loc_68F4241F
		mov	esi, [edx]
		mov	eax, 1Ch
		test	esi, esi
		jnz	short loc_68F42417

loc_68F423A5:				; CODE XREF: sub_68F42370+B6j
					; sub_68F42370+BFj ...
		xor	ebx, ebx
		cmp	[ebp+var_45], 0
		jz	short loc_68F423F5
		lea	esi, [esi+0]

loc_68F423B0:				; CODE XREF: sub_68F42370+83j
		test	cl, cl
		jz	short loc_68F423C7
		cmp	ebx, 24h
		jg	short loc_68F423C5
		movzx	eax, ds:byte_68F57760[ebx]
		cmp	[ebx+edi], al
		jz	short loc_68F423C7

loc_68F423C5:				; CODE XREF: sub_68F42370+47j
		xor	ecx, ecx

loc_68F423C7:				; CODE XREF: sub_68F42370+42j
					; sub_68F42370+53j
		movzx	edx, [ebp+var_21]
		movzx	eax, [ebp+var_38]
		xor	dl, 1
		and	eax, 1
		test	eax, edx
		jz	short loc_68F423EE
		cmp	ebx, 1Dh
		jg	short loc_68F423EA
		movzx	eax, ds:byte_68F5778C[ebx]
		cmp	[ebx+edi], al
		jz	short loc_68F423EE

loc_68F423EA:				; CODE XREF: sub_68F42370+6Cj
		mov	[ebp+var_38], 0

loc_68F423EE:				; CODE XREF: sub_68F42370+67j
					; sub_68F42370+78j
		inc	ebx
		cmp	byte ptr [ebx+edi], 0
		jnz	short loc_68F423B0

loc_68F423F5:				; CODE XREF: sub_68F42370+3Bj
		cmp	ebx, 24h
		setz	al
		and	cl, al
		cmp	ebx, 1Dh
		setz	al
		and	[ebp+var_38], al
		cmp	[ebp+var_21], cl
		jz	short loc_68F42466
		cmp	[ebp+var_21], 1
		sbb	eax, eax
		and	eax, 2
		add	eax, 26h

loc_68F42417:				; CODE XREF: sub_68F42370+33j
					; sub_68F42370+FFj ...
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4241F:				; CODE XREF: sub_68F42370+24j
		mov	eax, [ebp+var_20]
		mov	edx, [eax]
		test	edx, edx
		jz	loc_68F423A5
		cmp	byte ptr [edx],	78h
		jnz	loc_68F423A5
		cmp	byte ptr [edx+1], 6Dh
		jnz	loc_68F423A5
		cmp	byte ptr [edx+2], 6Ch
		jnz	loc_68F423A5
		cmp	byte ptr [edx+3], 6Eh
		jz	loc_68F425E1

loc_68F42453:				; CODE XREF: sub_68F42370+275j
					; sub_68F42370+284j
		cmp	byte ptr [edx+3], 0
		jnz	loc_68F423A5
		mov	[ebp+var_21], 1
		jmp	loc_68F423A5
; ---------------------------------------------------------------------------

loc_68F42466:				; CODE XREF: sub_68F42370+99j
		cmp	[ebp+var_38], 0
		mov	eax, 28h
		jnz	short loc_68F42417
		mov	edx, [ebp+var_1C]
		mov	ecx, [edx+178h]
		movzx	eax, byte ptr [edx+1D8h]
		mov	[ebp+var_3C], ecx
		cmp	al, 1
		sbb	ebx, 0FFFFFFFFh
		test	ecx, ecx
		jz	loc_68F42555
		cmp	[ecx+18h], ebx
		mov	esi, ecx
		jl	loc_68F42592

loc_68F4249C:				; CODE XREF: sub_68F42370+24Dj
		mov	ecx, [ebp+var_3C]
		mov	edx, [ebp+var_1C]
		mov	eax, [ecx+4]
		mov	[edx+178h], eax
		mov	eax, [ecx+10h]

loc_68F424AE:				; CODE XREF: sub_68F42370+21Dj
		mov	[esi+14h], ebx
		mov	[esp+58h+Size],	ebx ; Size
		mov	[esp+58h+Src], edi ; Src
		mov	[esp+58h+Dst], eax ; Dst
		call	memcpy
		mov	ecx, [ebp+var_1C]
		movzx	edx, byte ptr [ecx+1D8h]
		test	dl, dl
		jz	short loc_68F424D6
		mov	eax, [esi+10h]
		mov	[eax+ebx-1], dl

loc_68F424D6:				; CODE XREF: sub_68F42370+15Dj
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+arg_0]
		mov	ecx, eax
		mov	[esi], eax
		mov	eax, [eax+4]
		mov	[esi+0Ch], edx
		mov	[esi+8], eax
		cmp	byte ptr [edi],	0
		jnz	short loc_68F42504
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+164h]
		add	eax, 98h
		cmp	eax, ecx
		jz	loc_68F425D5

loc_68F42504:				; CODE XREF: sub_68F42370+17Cj
		mov	ecx, [ebp+var_20]
		mov	[ecx+4], esi

loc_68F4250A:				; CODE XREF: sub_68F42370+26Cj
		mov	edx, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		mov	eax, [edx]
		test	ebx, ebx
		mov	[esi+4], eax
		mov	[edx], esi
		jz	short loc_68F4254B
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+64h]
		test	edx, edx
		jz	short loc_68F4254B
		mov	ecx, [ebp+var_20]
		mov	eax, edi
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jnz	short loc_68F42533
		xor	eax, eax

loc_68F42533:				; CODE XREF: sub_68F42370+1BFj
		mov	[esp+58h+Size],	eax
		mov	ecx, [ebp+var_20]
		mov	eax, [ecx]
		mov	[esp+58h+Src], eax
		mov	ecx, [ebp+var_1C]
		mov	eax, [ecx+4]
		mov	[esp+58h+Dst], eax
		call	edx

loc_68F4254B:				; CODE XREF: sub_68F42370+1A9j
					; sub_68F42370+1B3j
		add	esp, 4Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42555:				; CODE XREF: sub_68F42370+11Bj
		mov	[esp+58h+Dst], 1Ch
		mov	ecx, [ebp+var_1C]
		call	dword ptr [ecx+0Ch]
		mov	esi, eax
		test	esi, esi
		mov	eax, 1
		jz	loc_68F42417
		lea	eax, [ebx+18h]
		mov	[ebp+var_44], eax
		mov	[esp+58h+Dst], eax
		mov	edx, [ebp+var_1C]
		call	dword ptr [edx+0Ch]
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_68F425C2
		mov	edx, [ebp+var_44]
		mov	[esi+18h], edx
		jmp	loc_68F424AE
; ---------------------------------------------------------------------------

loc_68F42592:				; CODE XREF: sub_68F42370+126j
		lea	eax, [ebx+18h]
		mov	[ebp+var_40], eax
		mov	[esp+58h+Src], eax
		mov	eax, [ecx+10h]
		mov	[esp+58h+Dst], eax
		call	dword ptr [edx+10h]
		mov	edx, eax
		test	edx, edx
		mov	eax, 1
		jz	loc_68F42417
		mov	[esi+10h], edx
		mov	edx, [ebp+var_40]
		mov	[esi+18h], edx
		jmp	loc_68F4249C
; ---------------------------------------------------------------------------

loc_68F425C2:				; CODE XREF: sub_68F42370+215j
		mov	[esp+58h+Dst], esi
		mov	ecx, [ebp+var_1C]
		call	dword ptr [ecx+14h]
		mov	eax, 1
		jmp	loc_68F42417
; ---------------------------------------------------------------------------

loc_68F425D5:				; CODE XREF: sub_68F42370+18Ej
		mov	dword ptr [ecx+4], 0
		jmp	loc_68F4250A
; ---------------------------------------------------------------------------

loc_68F425E1:				; CODE XREF: sub_68F42370+DDj
		cmp	byte ptr [edx+4], 73h
		jnz	loc_68F42453
		cmp	byte ptr [edx+5], 0
		mov	eax, 27h
		jnz	loc_68F42453
		jmp	loc_68F42417
sub_68F42370	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42600	proc near		; CODE XREF: sub_68F427A0+2Dp
					; sub_68F42E40+49p ...

Dst		= dword	ptr -28h
Src		= dword	ptr -24h
Size		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ebx, eax
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_68F42662
		mov	esi, [eax+10h]
		test	esi, esi
		jnz	loc_68F42743
		mov	[eax], ecx
		mov	eax, [ecx]
		mov	[ebx+4], eax
		mov	dword ptr [ecx], 0
		mov	eax, [ebx]
		mov	ecx, [eax+4]
		lea	esi, [eax+8]
		mov	edx, esi
		add	edx, ecx
		mov	[ebx+10h], esi
		mov	[ebx+8], edx
		mov	[ebx+0Ch], esi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F42650:				; CODE XREF: sub_68F42600+EDj
					; sub_68F42600+13Ej ...
		mov	eax, 1

loc_68F42655:				; CODE XREF: sub_68F42600+9Ej
					; sub_68F42600+11Aj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42662:				; CODE XREF: sub_68F42600+16j
		mov	esi, [eax+10h]
		mov	edx, [eax+8]

loc_68F42668:				; CODE XREF: sub_68F42600+14Dj
		mov	ecx, [ebx]
		test	ecx, ecx
		jnz	loc_68F426F2

loc_68F42672:				; CODE XREF: sub_68F42600+F7j
		sub	edx, esi
		cmp	edx, 3FFh
		mov	[ebp+var_10], edx
		jg	loc_68F42798
		mov	[ebp+var_10], 400h

loc_68F4268A:				; CODE XREF: sub_68F42600+19Bj
		mov	eax, [ebp+var_10]
		mov	edx, [ebx+14h]
		add	eax, 8
		mov	[esp+28h+Dst], eax
		call	dword ptr [edx]
		mov	edi, eax
		xor	eax, eax
		test	edi, edi
		jz	short loc_68F42655
		mov	eax, [ebp+var_10]
		lea	edx, [edi+8]
		mov	esi, [ebx+10h]
		mov	[ebp+var_14], edx
		mov	[edi+4], eax
		mov	eax, [ebx]
		mov	[edi], eax
		mov	eax, [ebx+0Ch]
		mov	[ebx], edi
		cmp	eax, esi
		jz	short loc_68F426D4
		mov	[esp+28h+Src], esi ; Src
		sub	eax, esi
		mov	[esp+28h+Size],	eax ; Size
		mov	[esp+28h+Dst], edx ; Dst
		call	memcpy
		mov	esi, [ebx+10h]
		mov	eax, [ebx+0Ch]

loc_68F426D4:				; CODE XREF: sub_68F42600+BAj
		sub	eax, esi
		mov	edx, [ebp+var_10]
		lea	eax, [edi+eax+8]
		mov	[ebx+0Ch], eax
		mov	eax, [ebp+var_14]
		mov	[ebx+10h], eax
		lea	eax, [edi+edx+8]
		mov	[ebx+8], eax
		jmp	loc_68F42650
; ---------------------------------------------------------------------------

loc_68F426F2:				; CODE XREF: sub_68F42600+6Cj
		lea	eax, [ecx+8]
		cmp	esi, eax
		jnz	loc_68F42672
		mov	[esp+28h+Dst], ecx
		sub	edx, esi
		lea	edi, [edx+edx]
		mov	edx, [ebx+14h]
		lea	eax, [edi+8]
		mov	[esp+28h+Src], eax
		call	dword ptr [edx+4]
		mov	[ebx], eax
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		jz	loc_68F42655
		mov	[edx+4], edi
		mov	eax, [ebx+0Ch]
		lea	esi, [edx+8]
		mov	ecx, [ebx+10h]
		mov	[ebx+10h], esi
		sub	eax, ecx
		lea	eax, [edx+eax+8]
		mov	[ebx+0Ch], eax
		lea	edx, [esi+edi]
		mov	[ebx+8], edx
		jmp	loc_68F42650
; ---------------------------------------------------------------------------

loc_68F42743:				; CODE XREF: sub_68F42600+1Dj
		mov	edx, [eax+8]
		mov	edi, edx
		sub	edi, esi
		cmp	edi, [ecx+4]
		jge	loc_68F42668
		mov	eax, [eax]
		mov	edx, [ecx]
		mov	[ecx], eax
		mov	eax, [ebx+4]
		mov	[ebx+4], edx
		mov	[esp+28h+Size],	edi ; Size
		mov	[ebx], eax
		add	eax, 8
		mov	[esp+28h+Src], esi ; Src
		mov	[esp+28h+Dst], eax ; Dst
		call	memcpy
		mov	edx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		sub	eax, edx
		mov	edx, [ebx]
		mov	edi, [edx+4]
		lea	esi, [edx+8]
		mov	[ebx+10h], esi
		lea	eax, [edx+eax+8]
		mov	[ebx+0Ch], eax
		add	esi, edi
		mov	[ebx+8], esi
		jmp	loc_68F42650
; ---------------------------------------------------------------------------

loc_68F42798:				; CODE XREF: sub_68F42600+7Dj
		shl	[ebp+var_10], 1
		jmp	loc_68F4268A
sub_68F42600	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F427A0	proc near		; CODE XREF: XML_SetBase+1Ap
					; sub_68F42860+33p ...
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, edx
		push	ebx
		mov	ecx, [eax+0Ch]
		mov	ebx, eax
		jmp	short loc_68F427C6
; ---------------------------------------------------------------------------
		align 10h

loc_68F427B0:				; CODE XREF: sub_68F427A0+29j
		movzx	eax, byte ptr [esi]
		mov	[ecx], al
		mov	edx, [ebx+0Ch]
		inc	edx
		mov	[ebx+0Ch], edx
		mov	ecx, edx
		movzx	eax, byte ptr [esi]
		inc	esi
		test	al, al
		jz	short loc_68F427F0

loc_68F427C6:				; CODE XREF: sub_68F427A0+Cj
					; sub_68F427A0+4Dj
		cmp	ecx, [ebx+8]
		jnz	short loc_68F427B0
		mov	eax, ebx
		call	sub_68F42600
		test	al, al
		jz	short loc_68F427FC
		movzx	eax, byte ptr [esi]
		mov	ecx, [ebx+0Ch]
		mov	[ecx], al
		mov	edx, [ebx+0Ch]
		inc	edx
		mov	[ebx+0Ch], edx
		mov	ecx, edx
		movzx	eax, byte ptr [esi]
		inc	esi
		test	al, al
		jnz	short loc_68F427C6
		nop

loc_68F427F0:				; CODE XREF: sub_68F427A0+24j
		mov	esi, [ebx+10h]
		mov	[ebx+10h], edx
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F427FC:				; CODE XREF: sub_68F427A0+34j
		pop	ebx
		xor	eax, eax
		pop	esi
		pop	ebp
		retn
sub_68F427A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. XML_SetBase

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetBase
XML_SetBase	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	edx, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		test	edx, edx
		jz	short loc_68F42846
		mov	eax, [ebx+164h]
		add	eax, 50h
		call	sub_68F427A0
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		jz	short loc_68F42842
		mov	[ebx+168h], edx
		mov	eax, 1

loc_68F42842:				; CODE XREF: XML_SetBase+25j
					; XML_SetBase+43j
		pop	ebx
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42846:				; CODE XREF: XML_SetBase+Fj
		xor	eax, eax
		mov	[ebx+168h], eax
		mov	eax, 1
		jmp	short loc_68F42842
XML_SetBase	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42860	proc near		; CODE XREF: sub_68F43AE0+129p
					; XML_ParserReset+C9p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, edx
		mov	edx, offset sub_68F48440
		push	ebx
		sub	esp, 10h
		mov	ebx, eax
		mov	[eax+118h], edx
		lea	eax, [eax+100h]
		mov	[esp+18h+var_18], eax
		call	sub_68F55AF0
		xor	eax, eax
		test	esi, esi
		jz	short loc_68F42898
		lea	eax, [ebx+1A0h]
		mov	edx, esi
		call	sub_68F427A0

loc_68F42898:				; CODE XREF: sub_68F42860+29j
		mov	[ebx+0E8h], eax
		xor	eax, eax
		xor	esi, esi
		mov	[ebx+168h], eax
		xor	eax, eax
		mov	[esp+18h+var_10], eax
		lea	eax, [ebx+90h]
		mov	[esp+18h+var_14], eax
		lea	eax, [ebx+94h]
		mov	[esp+18h+var_18], eax
		call	sub_68F541D0
		mov	[ebx+158h], esi
		xor	eax, eax
		xor	ecx, ecx
		mov	[ebx+80h], eax
		xor	eax, eax
		xor	edx, edx
		mov	[ebx+84h], eax
		xor	eax, eax
		xor	esi, esi
		mov	[ebx+88h], eax
		xor	eax, eax
		mov	[ebx+8Ch], eax
		mov	eax, [ebx+8]
		mov	[ebx+15Ch], ecx
		xor	ecx, ecx
		mov	[ebx+18h], eax
		mov	[ebx+1Ch], eax
		xor	eax, eax
		mov	[ebx+140h], eax
		xor	eax, eax
		mov	[ebx+13Ch], edx
		xor	edx, edx
		mov	dword ptr [ebx], 0
		mov	dword ptr [ebx+4], 0
		mov	dword ptr [ebx+34h], 0
		mov	dword ptr [ebx+38h], 0
		mov	dword ptr [ebx+3Ch], 0
		mov	dword ptr [ebx+40h], 0
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+48h], 0
		mov	dword ptr [ebx+4Ch], 0
		mov	dword ptr [ebx+50h], 0
		mov	dword ptr [ebx+54h], 0
		mov	dword ptr [ebx+58h], 0
		mov	dword ptr [ebx+5Ch], 0
		mov	dword ptr [ebx+60h], 0
		mov	dword ptr [ebx+64h], 0
		mov	dword ptr [ebx+68h], 0
		mov	dword ptr [ebx+6Ch], 0
		mov	dword ptr [ebx+70h], 0
		mov	[ebx+74h], ebx
		mov	dword ptr [ebx+78h], 0
		mov	dword ptr [ebx+24h], 0
		mov	dword ptr [ebx+28h], 0
		mov	[ebx+144h], eax
		xor	eax, eax
		mov	[ebx+148h], eax
		xor	eax, eax
		mov	[ebx+14Ch], eax
		xor	eax, eax
		mov	[ebx+150h], eax
		xor	eax, eax
		mov	[ebx+154h], eax
		xor	eax, eax
		mov	[ebx+120h], eax
		xor	eax, eax
		mov	[ebx+124h], eax
		xor	eax, eax
		mov	[ebx+128h], eax
		xor	eax, eax
		mov	[ebx+12Ch], eax
		xor	eax, eax
		mov	[ebx+138h], eax
		xor	eax, eax
		mov	[ebx+16Ch], eax
		xor	eax, eax
		mov	[ebx+0FCh], eax
		xor	eax, eax
		mov	[ebx+0F4h], eax
		xor	eax, eax
		mov	[ebx+1DCh], eax
		xor	eax, eax
		mov	[ebx+198h], esi
		xor	esi, esi
		mov	[ebx+19Ch], ecx
		xor	ecx, ecx
		mov	[ebx+11Ch], edx
		xor	edx, edx
		mov	[ebx+1E0h], eax
		xor	eax, eax
		mov	[ebx+174h], esi
		mov	byte ptr [ebx+160h], 0
		mov	byte ptr [ebx+161h], 0
		mov	byte ptr [ebx+134h], 1
		mov	[ebx+180h], ecx
		mov	[ebx+0F0h], edx
		mov	byte ptr [ebx+1E8h], 0
		mov	byte ptr [ebx+1E9h], 0
		mov	[ebx+1ECh], eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F42860	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. XML_SetEncoding

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_SetEncoding
XML_SetEncoding	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebx+1E0h]
		cmp	eax, 1
		setz	dl
		cmp	eax, 3
		setz	al
		or	eax, edx
		xor	edx, edx
		test	al, 1
		jnz	short loc_68F42AD0
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_68F42AD6
		mov	edx, [ebp+arg_4]
		lea	eax, [ebx+1A0h]
		call	sub_68F427A0
		mov	[ebx+0E8h], eax
		xor	edx, edx
		test	eax, eax
		jz	short loc_68F42AD0
		mov	edx, 1
		lea	esi, [esi+0]

loc_68F42AD0:				; CODE XREF: XML_SetEncoding+22j
					; XML_SetEncoding+43j ...
		pop	ecx
		mov	eax, edx
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42AD6:				; CODE XREF: XML_SetEncoding+29j
		xor	eax, eax
		mov	edx, 1
		mov	[ebx+0E8h], eax
		jmp	short loc_68F42AD0
XML_SetEncoding	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42AF0	proc near		; CODE XREF: sub_68F468F0+D7Cp
					; sub_68F484B0+3Ep

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_4], edi
		mov	edi, edx
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, eax
		mov	[ebp+var_8], esi
		mov	edx, [edx]
		movzx	eax, [ebp+arg_C]
		cmp	[ebx+90h], edi
		mov	[ebp+var_18], edx
		mov	[ebp+var_11], al
		jz	loc_68F42C07
		mov	esi, [ebx+12Ch]
		lea	eax, [esi+4]
		mov	[ebp+var_1C], eax

loc_68F42B2A:				; CODE XREF: sub_68F42AF0+12Cj
		mov	edx, [ebp+var_18]
		lea	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_0]
		mov	[esi], edx
		mov	dword ptr [ecx], 0
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], edi
		mov	[esp+38h+var_30], eax
		call	dword ptr [edi+0Ch]
		mov	edx, [ebp+var_10]
		mov	ecx, [ebp+var_1C]
		add	eax, 4
		mov	[ecx], edx
		cmp	eax, 2Eh	; switch 47 cases
		ja	short loc_68F42B67 ; jumptable 68F42B60	default	case
		jmp	ds:off_68F577B0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F42B67:				; CODE XREF: sub_68F42AF0+6Ej
					; sub_68F42AF0+70j
					; DATA XREF: ...
		mov	eax, [ebp+var_10] ; jumptable 68F42B60 default case
		mov	[esi], eax
		mov	eax, 17h

loc_68F42B71:				; CODE XREF: sub_68F42AF0+CEj
					; sub_68F42AF0+F0j
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F42B80:				; CODE XREF: sub_68F42AF0+70j
					; DATA XREF: .rdata:off_68F577B0o
		mov	eax, [ebx+50h]	; jumptable 68F42B60 case 46
		test	eax, eax
		jnz	loc_68F42C21

loc_68F42B8B:				; CODE XREF: sub_68F42AF0+147j
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	[edx], eax
		mov	[ecx], eax
		xor	eax, eax
		cmp	dword ptr [ebx+1E0h], 2
		mov	esi, [ebp+var_8]
		mov	ebx, [ebp+var_C]
		mov	edi, [ebp+var_4]
		setnz	al
		mov	esp, ebp
		pop	ebp
		dec	eax
		and	eax, 23h
		retn
; ---------------------------------------------------------------------------

loc_68F42BB5:				; CODE XREF: sub_68F42AF0+70j
					; DATA XREF: .rdata:off_68F577B0o
		cmp	[ebp+var_11], 0	; jumptable 68F42B60 case 2
		mov	eax, 6
		jz	short loc_68F42B71
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+var_18]
		mov	[eax], edx
		xor	eax, eax

loc_68F42BCA:				; CODE XREF: sub_68F42AF0+FCj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42BD7:				; CODE XREF: sub_68F42AF0+70j
					; DATA XREF: .rdata:off_68F577B0o
		cmp	[ebp+var_11], 0	; jumptable 68F42B60 cases 0,3
		mov	eax, 2
		jz	short loc_68F42B71
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax
		xor	eax, eax
		jmp	short loc_68F42BCA
; ---------------------------------------------------------------------------
		align 10h

loc_68F42BF0:				; CODE XREF: sub_68F42AF0+70j
					; DATA XREF: .rdata:off_68F577B0o
		mov	eax, [ebp+var_10] ; jumptable 68F42B60 case 4
		mov	[esi], eax
		mov	ebx, [ebp+var_C]
		mov	eax, 4
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42C07:				; CODE XREF: sub_68F42AF0+28j
		mov	[ebx+120h], edx
		lea	ecx, [ebx+124h]
		lea	esi, [ebx+120h]
		mov	[ebp+var_1C], ecx
		jmp	loc_68F42B2A
; ---------------------------------------------------------------------------

loc_68F42C21:				; CODE XREF: sub_68F42AF0+95j
		mov	eax, [ebp+var_10]
		mov	edx, edi
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+var_18]
		mov	[esp+38h+var_38], eax
		mov	eax, ebx
		call	sub_68F41EB0
		jmp	loc_68F42B8B
sub_68F42AF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42C40	proc near		; CODE XREF: sub_68F42D60+54j
					; sub_68F42F20+22Ep

var_428		= dword	ptr -428h
var_424		= dword	ptr -424h
var_420		= dword	ptr -420h
var_41C		= dword	ptr -41Ch
var_418		= dword	ptr -418h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 420h
		mov	ebx, eax
		mov	ecx, [eax+7Ch]
		test	ecx, ecx
		jz	short loc_68F42CAD
		xor	eax, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F42C60:				; CODE XREF: sub_68F42C40+32j
		mov	esi, 0FFFFFFFFh
		mov	[ebp+eax*4+var_418], esi
		inc	eax
		cmp	eax, 0FFh
		jle	short loc_68F42C60
		mov	[ebp+var_18], 0
		lea	esi, [ebp+var_418]
		mov	[ebp+var_14], 0
		mov	[ebp+var_10], 0
		mov	[esp+428h+var_420], esi
		mov	[esp+428h+var_424], edx
		mov	eax, [ebx+0F8h]
		mov	[esp+428h+var_428], eax
		call	ecx
		test	eax, eax
		jnz	short loc_68F42CC6

loc_68F42CA6:				; CODE XREF: sub_68F42C40+CBj
		mov	edx, [ebp+var_10]
		test	edx, edx
		jnz	short loc_68F42CBC

loc_68F42CAD:				; CODE XREF: sub_68F42C40+12j
					; sub_68F42C40+84j
		add	esp, 420h
		mov	eax, 12h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42CBC:				; CODE XREF: sub_68F42C40+6Bj
		mov	eax, [ebp+var_18]
		mov	[esp+428h+var_428], eax
		call	edx
		jmp	short loc_68F42CAD
; ---------------------------------------------------------------------------

loc_68F42CC6:				; CODE XREF: sub_68F42C40+64j
		call	sub_68F53990
		mov	[esp+428h+var_428], eax
		call	dword ptr [ebx+0Ch]
		mov	[ebx+0F0h], eax
		test	eax, eax
		mov	edx, eax
		jz	short loc_68F42D31
		cmp	byte ptr [ebx+0ECh], 0
		mov	ecx, offset sub_68F54510
		jnz	short loc_68F42CF0
		mov	ecx, offset sub_68F53C10

loc_68F42CF0:				; CODE XREF: sub_68F42C40+A9j
		mov	eax, [ebp+var_18]
		mov	[esp+428h+var_41C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+428h+var_428], edx
		mov	[esp+428h+var_424], esi
		mov	[esp+428h+var_420], eax
		call	ecx ; sub_68F54510
		test	eax, eax
		mov	edx, eax
		jz	short loc_68F42CA6
		mov	[ebx+90h], edx
		mov	eax, [ebp+var_18]
		mov	[ebx+0F4h], eax
		mov	eax, [ebp+var_10]
		mov	[ebx+0FCh], eax
		add	esp, 420h
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42D31:				; CODE XREF: sub_68F42C40+9Bj
		mov	edx, [ebp+var_10]
		test	edx, edx
		jnz	short loc_68F42D47
		mov	eax, 1

loc_68F42D3D:				; CODE XREF: sub_68F42C40+114j
		add	esp, 420h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42D47:				; CODE XREF: sub_68F42C40+F6j
		mov	eax, [ebp+var_18]
		mov	[esp+428h+var_428], eax
		call	edx
		mov	eax, 1
		jmp	short loc_68F42D3D
sub_68F42C40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42D60	proc near		; CODE XREF: sub_68F48440+20p
					; sub_68F49A00+20p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	edx, offset sub_68F543A0
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, eax
		cmp	byte ptr [ebx+0ECh], 0
		mov	eax, [eax+0E8h]
		jnz	short loc_68F42D82
		mov	edx, offset sub_68F541D0

loc_68F42D82:				; CODE XREF: sub_68F42D60+1Bj
		mov	[esp+18h+var_10], eax
		lea	eax, [ebx+90h]
		mov	[esp+18h+var_14], eax
		lea	eax, [ebx+94h]
		mov	[esp+18h+var_18], eax
		call	edx ; sub_68F543A0
		test	eax, eax
		jz	short loc_68F42DA7
		add	esp, 14h
		xor	eax, eax
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42DA7:				; CODE XREF: sub_68F42D60+3Dj
		mov	edx, [ebx+0E8h]
		add	esp, 14h
		mov	eax, ebx
		pop	ebx
		pop	ebp
		jmp	sub_68F42C40
sub_68F42D60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42DC0	proc near		; CODE XREF: sub_68F468F0+3B6p
					; sub_68F468F0+697p ...
		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, eax
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, eax
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_68F42E19
		mov	dl, al
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F42DE0:				; CODE XREF: sub_68F42DC0+57j
		movsx	eax, dl
		lea	ecx, [eax-0Ah]
		cmp	ecx, 16h
		ja	short loc_68F42E30
		mov	eax, 1
		shl	eax, cl
		test	eax, 400009h
		jz	short loc_68F42E30
		cmp	ebx, edi
		jz	short loc_68F42E11
		cmp	byte ptr [ebx-1], 20h
		jz	short loc_68F42E11
		mov	byte ptr [ebx],	20h
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F42E10:				; CODE XREF: sub_68F42DC0+72j
		inc	ebx

loc_68F42E11:				; CODE XREF: sub_68F42DC0+3Bj
					; sub_68F42DC0+41j
		inc	esi
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jnz	short loc_68F42DE0

loc_68F42E19:				; CODE XREF: sub_68F42DC0+11j
		cmp	ebx, edi
		jz	short loc_68F42E28
		xor	eax, eax
		cmp	byte ptr [ebx-1], 20h
		setz	al
		sub	ebx, eax

loc_68F42E28:				; CODE XREF: sub_68F42DC0+5Bj
		mov	byte ptr [ebx],	0
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42E30:				; CODE XREF: sub_68F42DC0+29j
					; sub_68F42DC0+37j
		mov	[ebx], dl
		jmp	short loc_68F42E10
sub_68F42DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42E40	proc near		; CODE XREF: sub_68F42EC0+18p
					; sub_68F443A0+16Fp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 1Ch
		mov	ebx, eax
		mov	edi, [eax+0Ch]
		test	edi, edi
		jz	short loc_68F42E9E

loc_68F42E54:				; CODE XREF: sub_68F42E40+67j
		lea	edi, [ebx+0Ch]
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F42E60:				; CODE XREF: sub_68F42E40+50j
		mov	eax, [ebx+8]
		mov	[esp+28h+var_1C], edi
		mov	[esp+28h+var_18], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_20], eax
		lea	eax, [ebp+arg_0]
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+3Ch]
		mov	eax, [ebp+arg_4]
		cmp	[ebp+arg_0], eax
		jz	short loc_68F42EB0
		mov	eax, ebx
		call	sub_68F42600
		test	al, al
		jnz	short loc_68F42E60
		xor	edx, edx

loc_68F42E94:				; CODE XREF: sub_68F42E40+69j
		add	esp, 1Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42E9E:				; CODE XREF: sub_68F42E40+12j
		call	sub_68F42600
		xor	edx, edx
		test	al, al
		jnz	short loc_68F42E54
		jmp	short loc_68F42E94
; ---------------------------------------------------------------------------
		align 10h

loc_68F42EB0:				; CODE XREF: sub_68F42E40+45j
		mov	edx, [ebx+10h]
		add	esp, 1Ch
		pop	ebx
		mov	eax, edx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F42E40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42EC0	proc near		; CODE XREF: sub_68F42F20+E6p
					; sub_68F42F20+1F0p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, eax
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		mov	eax, ebx
		call	sub_68F42E40
		xor	edx, edx
		test	eax, eax
		jz	short loc_68F42EF4
		mov	eax, [ebx+0Ch]
		cmp	eax, [ebx+8]
		jz	short loc_68F42F00

loc_68F42EEB:				; CODE XREF: sub_68F42EC0+50j
		mov	byte ptr [eax],	0
		mov	edx, [ebx+10h]
		inc	dword ptr [ebx+0Ch]

loc_68F42EF4:				; CODE XREF: sub_68F42EC0+21j
					; sub_68F42EC0+4Bj
		add	esp, 14h
		mov	eax, edx
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F42F00:				; CODE XREF: sub_68F42EC0+29j
		mov	eax, ebx
		call	sub_68F42600
		xor	edx, edx
		test	al, al
		jz	short loc_68F42EF4
		mov	eax, [ebx+0Ch]
		jmp	short loc_68F42EEB
sub_68F42EC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F42F20	proc near		; CODE XREF: sub_68F44CC0+A2p
					; sub_68F468F0+CB8p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		xor	edi, edi
		push	esi
		mov	esi, edx
		mov	edx, offset sub_68F544A0
		push	ebx
		sub	esp, 4Ch
		mov	[ebp+var_24], 0
		mov	ebx, eax
		cmp	byte ptr [eax+0ECh], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_20], 0
		mov	[ebp+var_10], 0FFFFFFFFh
		jnz	short loc_68F42F65
		mov	edx, offset sub_68F542D0

loc_68F42F65:				; CODE XREF: sub_68F42F20+3Ej
		lea	eax, [ebp+var_10]
		mov	[esp+58h+var_34], eax
		lea	eax, [ebp+var_14]
		mov	[esp+58h+var_38], eax
		lea	eax, [ebp+var_18]
		mov	[esp+58h+var_3C], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_40], eax
		lea	eax, [ebp+var_20]
		mov	[esp+58h+var_44], eax
		lea	eax, [ebx+120h]
		mov	[esp+58h+var_48], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_50], eax
		mov	eax, [ebx+90h]
		mov	[esp+58h+var_58], esi
		mov	[esp+58h+var_54], eax
		call	edx ; sub_68F544A0
		test	eax, eax
		jnz	short loc_68F42FC3
		cmp	esi, 1
		sbb	eax, eax
		add	eax, 1Fh

loc_68F42FBB:				; CODE XREF: sub_68F42F20+F8j
					; sub_68F42F20+1FEj ...
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F42FC3:				; CODE XREF: sub_68F42F20+91j
		test	esi, esi
		jz	loc_68F43080

loc_68F42FCB:				; CODE XREF: sub_68F42F20+164j
					; sub_68F42F20+17Ej ...
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	loc_68F430B1
		mov	edx, [ebp+var_18]
		test	edx, edx
		jnz	loc_68F430E6

loc_68F42FE4:				; CODE XREF: sub_68F42F20+210j
		mov	ecx, [ebp+var_20]
		test	ecx, ecx
		jz	short loc_68F4301A
		mov	edx, [ebx+90h]
		lea	esi, [ebx+1B8h]
		mov	eax, [ebp+var_1C]
		sub	eax, [edx+44h]
		mov	[esp+58h+var_58], ecx
		mov	[esp+58h+var_54], eax
		mov	eax, esi
		call	sub_68F42EC0
		mov	[ebp+var_24], eax
		mov	edx, [ebp+var_24]
		mov	eax, 1
		test	edx, edx
		jz	short loc_68F42FBB

loc_68F4301A:				; CODE XREF: sub_68F42F20+C9j
		mov	eax, [ebp+var_10]
		mov	[esp+58h+var_50], edi
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+var_24]
		mov	[esp+58h+var_54], eax
		mov	eax, [ebx+4]
		mov	[esp+58h+var_58], eax
		call	dword ptr [ebx+8Ch]

loc_68F43038:				; CODE XREF: sub_68F42F20+196j
					; sub_68F42F20+1B2j
		mov	eax, [ebx+0E8h]
		test	eax, eax
		jnz	short loc_68F43070
		mov	edx, [ebp+var_14]
		test	edx, edx
		jz	loc_68F43135
		mov	eax, [ebx+90h]
		mov	eax, [eax+44h]
		cmp	[edx+44h], eax
		jnz	loc_68F43178
		mov	[ebx+90h], edx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F43070:				; CODE XREF: sub_68F42F20+120j
					; sub_68F42F20+21Aj
		or	edi, [ebp+var_24]
		jnz	short loc_68F430D7
		xor	eax, eax

loc_68F43077:				; CODE XREF: sub_68F42F20+1C4j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F43080:				; CODE XREF: sub_68F42F20+A5j
		cmp	[ebp+var_10], 1
		jnz	loc_68F42FCB
		mov	eax, [ebx+164h]
		mov	byte ptr [eax+82h], 1
		cmp	dword ptr [ebx+1ECh], 1
		jnz	loc_68F42FCB
		xor	edx, edx
		mov	[ebx+1ECh], edx
		jmp	loc_68F42FCB
; ---------------------------------------------------------------------------

loc_68F430B1:				; CODE XREF: sub_68F42F20+B3j
		mov	eax, [ebx+50h]
		test	eax, eax
		jz	short loc_68F43038
		mov	eax, [ebp+arg_4]
		mov	edx, [ebx+90h]
		mov	[esp+58h+var_54], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		mov	eax, ebx
		call	sub_68F41EB0
		jmp	loc_68F43038
; ---------------------------------------------------------------------------

loc_68F430D7:				; CODE XREF: sub_68F42F20+153j
		lea	eax, [ebx+1B8h]
		call	sub_68F411F0
		xor	eax, eax
		jmp	short loc_68F43077
; ---------------------------------------------------------------------------

loc_68F430E6:				; CODE XREF: sub_68F42F20+BEj
		mov	eax, [ebx+90h]
		mov	[esp+58h+var_54], edx
		lea	esi, [ebx+1B8h]
		mov	[esp+58h+var_58], eax
		call	dword ptr [eax+20h]
		mov	ecx, [ebp+var_18]
		mov	edx, [ebx+90h]
		add	eax, ecx
		mov	[esp+58h+var_54], eax
		mov	eax, esi
		mov	[esp+58h+var_58], ecx
		call	sub_68F42EC0
		mov	edi, eax
		test	edi, edi
		mov	eax, 1
		jz	loc_68F42FBB
		mov	eax, [ebx+1C4h]
		mov	[ebx+1C8h], eax
		jmp	loc_68F42FE4
; ---------------------------------------------------------------------------

loc_68F43135:				; CODE XREF: sub_68F42F20+127j
		mov	edx, [ebp+var_18]
		test	edx, edx
		jz	loc_68F43070
		test	edi, edi
		lea	esi, [ebx+1B8h]
		jz	short loc_68F4318B

loc_68F4314A:				; CODE XREF: sub_68F42F20+29Dj
		mov	edx, edi
		mov	eax, ebx
		call	sub_68F42C40
		mov	edi, eax
		mov	eax, esi
		call	sub_68F411F0
		cmp	edi, 12h
		jz	short loc_68F43168
		mov	eax, edi
		jmp	loc_68F42FBB
; ---------------------------------------------------------------------------

loc_68F43168:				; CODE XREF: sub_68F42F20+23Fj
		mov	eax, [ebp+var_18]
		mov	[ebx+120h], eax
		mov	eax, edi
		jmp	loc_68F42FBB
; ---------------------------------------------------------------------------

loc_68F43178:				; CODE XREF: sub_68F42F20+139j
		mov	eax, [ebp+var_18]
		mov	[ebx+120h], eax
		mov	eax, 13h
		jmp	loc_68F42FBB
; ---------------------------------------------------------------------------

loc_68F4318B:				; CODE XREF: sub_68F42F20+228j
		mov	eax, [ebx+90h]
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	dword ptr [eax+20h]
		mov	ecx, [ebp+var_18]
		mov	edx, [ebx+90h]
		add	eax, ecx
		mov	[esp+58h+var_54], eax
		mov	eax, esi
		mov	[esp+58h+var_58], ecx
		call	sub_68F42EC0
		mov	edi, eax
		test	edi, edi
		mov	eax, 1
		jnz	short loc_68F4314A
		jmp	loc_68F42FBB
sub_68F42F20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F431D0	proc near		; CODE XREF: sub_68F468F0+41Bp
					; sub_68F468F0+BBEp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
arg_0		= byte ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 0Ch
		mov	ebx, eax
		movzx	eax, [ebp+arg_0]
		movzx	edx, [ebp+arg_4]
		mov	[ebp+var_D], al
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_E], dl
		test	eax, eax
		setnz	al
		test	dl, dl
		setnz	dl
		or	eax, edx
		test	al, 1
		jz	short loc_68F43234
		mov	ecx, [ebx+0Ch]
		xor	edx, edx
		cmp	ecx, 0
		jle	short loc_68F4321C
		mov	eax, [ebx+14h]
		nop
		lea	esi, [esi+0]

loc_68F43210:				; CODE XREF: sub_68F431D0+4Aj
		cmp	[eax], esi
		jz	short loc_68F4325F
		inc	edx
		add	eax, 0Ch
		cmp	ecx, edx
		jg	short loc_68F43210

loc_68F4321C:				; CODE XREF: sub_68F431D0+36j
		cmp	[ebp+var_E], 0
		jz	short loc_68F43237
		mov	edi, [ebx+8]
		test	edi, edi
		jnz	short loc_68F43237
		cmp	byte ptr [esi+9], 0
		jnz	short loc_68F43237
		mov	[ebx+8], esi
		jmp	short loc_68F43237
; ---------------------------------------------------------------------------

loc_68F43234:				; CODE XREF: sub_68F431D0+2Cj
		mov	ecx, [ebx+0Ch]

loc_68F43237:				; CODE XREF: sub_68F431D0+50j
					; sub_68F431D0+57j ...
		cmp	ecx, [ebx+10h]
		jz	short loc_68F4326C
		mov	edx, [ebx+14h]

loc_68F4323F:				; CODE XREF: sub_68F431D0+CAj
					; sub_68F431D0+EEj
		lea	eax, [ecx+ecx*2]
		lea	eax, [edx+eax*4]
		mov	edx, [ebp+arg_8]
		mov	[eax], esi
		mov	[eax+8], edx
		movzx	edx, [ebp+var_D]
		test	dl, dl
		mov	[eax+4], dl
		jnz	short loc_68F4325C
		mov	byte ptr [esi+8], 1

loc_68F4325C:				; CODE XREF: sub_68F431D0+86j
		inc	dword ptr [ebx+0Ch]

loc_68F4325F:				; CODE XREF: sub_68F431D0+42j
		mov	eax, 1

loc_68F43264:				; CODE XREF: sub_68F431D0+BFj
					; sub_68F431D0+E9j
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4326C:				; CODE XREF: sub_68F431D0+6Aj
		test	ecx, ecx
		jz	short loc_68F4329C
		lea	edi, [ecx+ecx]
		mov	edx, [ebp+arg_C]
		lea	eax, [edi+ecx*4]
		shl	eax, 2
		mov	[esp+18h+var_14], eax
		mov	eax, [ebx+14h]
		mov	[esp+18h+var_18], eax
		call	dword ptr [edx+10h]
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		jz	short loc_68F43264
		mov	[ebx+10h], edi
		mov	ecx, [ebx+0Ch]
		mov	[ebx+14h], edx
		jmp	short loc_68F4323F
; ---------------------------------------------------------------------------

loc_68F4329C:				; CODE XREF: sub_68F431D0+9Ej
		mov	dword ptr [ebx+10h], 8
		mov	edx, [ebp+arg_C]
		mov	[esp+18h+var_18], 60h
		call	dword ptr [edx+0Ch]
		mov	[ebx+14h], eax
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		jz	short loc_68F43264
		mov	ecx, [ebx+0Ch]
		jmp	loc_68F4323F
sub_68F431D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F432D0	proc near		; CODE XREF: sub_68F468F0+1CBp
					; sub_68F468F0+E2Ap

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 0Ch
		mov	ebx, [eax+164h]
		mov	edi, [ebx+0B8h]
		test	edi, edi
		jz	loc_68F433D8

loc_68F432EF:				; CODE XREF: sub_68F432D0+12Cj
		mov	eax, [ebx+0B0h]
		mov	edx, [ebx+0ACh]
		cmp	eax, edx
		jnb	loc_68F43390
		mov	edi, [ebx+0A4h]

loc_68F43309:				; CODE XREF: sub_68F432D0+103j
		mov	edx, [ebx+0B4h]
		mov	ecx, eax
		lea	eax, [eax+1]
		mov	[ebx+0B0h], eax
		lea	eax, ds:0[ecx*8]
		sub	eax, ecx
		test	edx, edx
		lea	esi, [edi+eax*4]
		jz	short loc_68F43365
		mov	eax, [ebx+0B8h]
		mov	edx, [eax+edx*4-4]
		lea	eax, ds:0[edx*8]
		sub	eax, edx
		lea	ebx, [edi+eax*4]
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	short loc_68F43354
		lea	eax, ds:0[edx*8]
		sub	eax, edx
		mov	[edi+eax*4+18h], ecx

loc_68F43354:				; CODE XREF: sub_68F432D0+75j
		mov	eax, [ebx+14h]
		test	eax, eax
		jnz	short loc_68F4335E
		mov	[ebx+0Ch], ecx

loc_68F4335E:				; CODE XREF: sub_68F432D0+89j
		mov	[ebx+10h], ecx
		inc	eax
		mov	[ebx+14h], eax

loc_68F43365:				; CODE XREF: sub_68F432D0+58j
		mov	dword ptr [esi+18h], 0
		mov	edx, ecx
		mov	dword ptr [esi+14h], 0
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+0Ch], 0

loc_68F43383:				; CODE XREF: sub_68F432D0+EDj
					; sub_68F432D0+124j ...
		add	esp, 0Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F43390:				; CODE XREF: sub_68F432D0+2Dj
		mov	ecx, [ebx+0A4h]
		test	ecx, ecx
		jz	short loc_68F43401
		lea	eax, ds:0[edx*8]
		sub	eax, edx
		shl	eax, 3
		mov	[esp+18h+var_14], eax
		mov	eax, [ebx+0A4h]
		mov	[esp+18h+var_18], eax
		call	dword ptr [esi+10h]
		mov	edx, 0FFFFFFFFh
		test	eax, eax
		jz	short loc_68F43383
		shl	dword ptr [ebx+0ACh], 1

loc_68F433C5:				; CODE XREF: sub_68F432D0+153j
		mov	[ebx+0A4h], eax
		mov	edi, eax
		mov	eax, [ebx+0B0h]
		jmp	loc_68F43309
; ---------------------------------------------------------------------------

loc_68F433D8:				; CODE XREF: sub_68F432D0+19j
		mov	eax, [eax+1D4h]
		shl	eax, 2
		mov	[esp+18h+var_18], eax
		call	dword ptr [esi+0Ch]
		mov	edx, 0FFFFFFFFh
		test	eax, eax
		mov	[ebx+0B8h], eax
		jz	short loc_68F43383
		mov	dword ptr [eax], 0
		jmp	loc_68F432EF
; ---------------------------------------------------------------------------

loc_68F43401:				; CODE XREF: sub_68F432D0+C8j
		mov	[esp+18h+var_18], 380h
		call	dword ptr [esi+0Ch]
		mov	edx, 0FFFFFFFFh
		test	eax, eax
		jz	loc_68F43383
		mov	edx, 20h
		mov	[ebx+0ACh], edx
		jmp	short loc_68F433C5
sub_68F432D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43430	proc near		; DATA XREF: XML_ParseBuffer+FEo
					; XML_Parse+149o ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		mov	eax, [eax+11Ch]
		retn
sub_68F43430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43440	proc near		; CODE XREF: sub_68F43490+CEp
					; sub_68F43590+7Fp
		push	ebp
		mov	ebp, esp
		jmp	short loc_68F4344B
; ---------------------------------------------------------------------------

loc_68F43445:				; CODE XREF: sub_68F43440+10j
		cmp	dl, 0Dh
		jz	short loc_68F43454
		inc	eax

loc_68F4344B:				; CODE XREF: sub_68F43440+3j
		movzx	edx, byte ptr [eax]
		test	dl, dl
		jnz	short loc_68F43445
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F43454:				; CODE XREF: sub_68F43440+8j
		mov	ecx, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F43460:				; CODE XREF: sub_68F43440+2Ej
		cmp	dl, 0Dh
		jz	short loc_68F43475
		mov	[ecx], dl
		inc	eax
		inc	ecx

loc_68F43469:				; CODE XREF: sub_68F43440+43j
		movzx	edx, byte ptr [eax]

loc_68F4346C:				; CODE XREF: sub_68F43440+40j
		test	dl, dl
		jnz	short loc_68F43460
		mov	byte ptr [ecx],	0
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F43475:				; CODE XREF: sub_68F43440+23j
		mov	byte ptr [ecx],	0Ah
		inc	eax
		inc	ecx
		movzx	edx, byte ptr [eax]
		cmp	dl, 0Ah
		jnz	short loc_68F4346C
		inc	eax
		jmp	short loc_68F43469
sub_68F43440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43490	proc near		; CODE XREF: sub_68F43630+C7p
					; sub_68F468F0+DF8p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, edx
		mov	[ebp+var_4], edi
		mov	edi, eax
		mov	eax, [eax+40h]
		test	eax, eax
		jnz	short loc_68F434E0
		mov	ecx, [edi+50h]
		test	ecx, ecx
		jnz	short loc_68F434C6

loc_68F434B4:				; CODE XREF: sub_68F43490+47j
					; sub_68F43490+EFj
		mov	eax, 1

loc_68F434B9:				; CODE XREF: sub_68F43490+89j
					; sub_68F43490+C6j
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F434C6:				; CODE XREF: sub_68F43490+22j
		mov	[esp+28h+var_28], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_24], eax
		mov	eax, edi
		call	sub_68F41EB0
		jmp	short loc_68F434B4
; ---------------------------------------------------------------------------
		align 10h

loc_68F434E0:				; CODE XREF: sub_68F43490+1Bj
		mov	eax, [edx+44h]
		mov	[esp+28h+var_28], edx
		lea	ebx, [ebx+eax*2]
		mov	[esp+28h+var_24], ebx
		call	dword ptr [edx+20h]
		mov	[esp+28h+var_28], ebx
		lea	edx, [edi+1A0h]
		mov	[ebp+var_18], edx
		mov	edx, esi
		add	eax, ebx
		mov	[ebp+var_14], eax
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+var_18]
		call	sub_68F42EC0
		mov	[ebp+var_10], eax
		mov	edx, [ebp+var_10]
		xor	eax, eax
		test	edx, edx
		jz	short loc_68F434B9
		mov	[esp+28h+var_28], esi
		mov	eax, [edi+1ACh]
		mov	[edi+1B0h], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+24h]
		mov	edx, [esi+44h]
		add	edx, edx
		sub	[ebp+arg_4], edx
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+arg_4]
		mov	[esp+28h+var_24], edx
		mov	edx, esi
		call	sub_68F42EC0
		mov	ebx, eax
		xor	eax, eax
		test	ebx, ebx
		jz	loc_68F434B9
		mov	eax, ebx
		call	sub_68F43440
		mov	[esp+28h+var_20], ebx
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax
		mov	eax, [edi+4]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+40h]
		mov	eax, [ebp+var_18]
		call	sub_68F411F0
		jmp	loc_68F434B4
sub_68F43490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43590	proc near		; CODE XREF: sub_68F43630+11Fp
					; sub_68F468F0+DCFp ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_C], ebx
		mov	ecx, [ebp+arg_4]
		mov	ebx, edx
		mov	[ebp+var_8], esi
		mov	esi, eax
		mov	[ebp+var_4], edi
		mov	eax, [eax+44h]
		mov	edi, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_68F435E0
		mov	eax, [esi+50h]
		test	eax, eax
		jnz	short loc_68F435D0

loc_68F435B7:				; CODE XREF: sub_68F43590+4Ej
					; sub_68F43590+99j
		mov	eax, 1

loc_68F435BC:				; CODE XREF: sub_68F43590+7Bj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F435D0:				; CODE XREF: sub_68F43590+25j
		mov	[esp+18h+var_14], ecx
		mov	eax, esi
		mov	[esp+18h+var_18], edi
		call	sub_68F41EB0
		jmp	short loc_68F435B7
; ---------------------------------------------------------------------------

loc_68F435E0:				; CODE XREF: sub_68F43590+1Ej
		lea	eax, [esi+1A0h]
		mov	[ebp+var_10], eax
		mov	eax, [edx+44h]
		lea	edx, [eax+eax*2]
		lea	eax, [edi+eax*4]
		sub	ecx, edx
		mov	edx, ebx
		mov	[esp+18h+var_18], eax
		mov	eax, [ebp+var_10]
		mov	[esp+18h+var_14], ecx
		call	sub_68F42EC0
		mov	ebx, eax
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_68F435BC
		mov	eax, ebx
		call	sub_68F43440
		mov	[esp+18h+var_14], ebx
		mov	eax, [esi+4]
		mov	[esp+18h+var_18], eax
		call	dword ptr [esi+44h]
		mov	eax, [ebp+var_10]
		call	sub_68F411F0
		jmp	short loc_68F435B7
sub_68F43590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43630	proc near		; CODE XREF: sub_68F486C0+960p
					; DATA XREF: sub_68F43630+1o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	eax, offset sub_68F43630
		mov	ebp, esp
		push	edi
		lea	edi, [ebp+var_10]
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[esi+118h], eax
		mov	[esi+120h], ebx

loc_68F43653:				; CODE XREF: sub_68F43630+F1j
		mov	[ebp+var_10], 0
		mov	eax, [esi+90h]
		mov	[esp+28h+var_1C], edi
		mov	edx, [ebp+arg_8]
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], eax
		mov	[esp+28h+var_20], edx
		call	dword ptr [eax]
		mov	ecx, [ebp+var_10]
		add	eax, 0Fh
		cmp	eax, 1Eh	; switch 31 cases
		mov	[esi+124h], ecx
		ja	short loc_68F436B0 ; jumptable 68F43685	default	case
		jmp	ds:off_68F5786C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F43690:				; CODE XREF: sub_68F43630+55j
					; DATA XREF: .rdata:off_68F5786Co
		cmp	byte ptr [esi+1E4h], 0 ; jumptable 68F43685 case 13
		mov	eax, 6
		jnz	short loc_68F436A5

loc_68F4369E:				; CODE XREF: sub_68F43630+55j
					; DATA XREF: .rdata:off_68F5786Co
		mov	edx, [ebp+arg_C] ; jumptable 68F43685 case 11
		mov	[edx], ebx

loc_68F436A3:				; CODE XREF: sub_68F43630+A3j
					; sub_68F43630+105j ...
		xor	eax, eax

loc_68F436A5:				; CODE XREF: sub_68F43630+6Cj
					; sub_68F43630+9Cj ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F436B0:				; CODE XREF: sub_68F43630+53j
					; sub_68F43630+55j
					; DATA XREF: ...
		add	esp, 1Ch	; jumptable 68F43685 default case
		mov	eax, 9
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F436C0:				; CODE XREF: sub_68F43630+55j
					; DATA XREF: .rdata:off_68F5786Co
		cmp	byte ptr [esi+1E4h], 0 ; jumptable 68F43685 case 14
		mov	eax, 5
		jnz	short loc_68F436A5
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		jmp	short loc_68F436A3
; ---------------------------------------------------------------------------

loc_68F436D5:				; CODE XREF: sub_68F43630+55j
					; DATA XREF: .rdata:off_68F5786Co
		mov	[esi+120h], ecx	; jumptable 68F43685 case 15
		add	esp, 1Ch
		mov	eax, 4
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F436E8:				; CODE XREF: sub_68F43630+55j
					; DATA XREF: .rdata:off_68F5786Co
		mov	edx, [esi+90h]	; jumptable 68F43685 case 26
		mov	eax, esi
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], ebx
		call	sub_68F43490

loc_68F436FC:				; CODE XREF: sub_68F43630+124j
		test	eax, eax
		jz	loc_68F437AD

loc_68F43704:				; CODE XREF: sub_68F43630+141j
		mov	ecx, [ebp+var_10]

loc_68F43707:				; CODE XREF: sub_68F43630+12Bj
		mov	[esi+120h], ecx
		mov	eax, [esi+1E0h]
		mov	ebx, ecx
		cmp	eax, 2
		jz	loc_68F437B7
		cmp	eax, 3
		jnz	loc_68F43653
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F43730:				; CODE XREF: sub_68F43630+148j
		mov	eax, [ebp+arg_C]
		mov	[eax], ecx
		jmp	loc_68F436A3
; ---------------------------------------------------------------------------
		align 10h

loc_68F43740:				; CODE XREF: sub_68F43630+55j
					; DATA XREF: .rdata:off_68F5786Co
		mov	edx, [esi+90h]	; jumptable 68F43685 case 28
		mov	eax, esi
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], ebx
		call	sub_68F43590
		jmp	short loc_68F436FC
; ---------------------------------------------------------------------------

loc_68F43756:				; CODE XREF: sub_68F43630+55j
					; DATA XREF: .rdata:off_68F5786Co
		mov	eax, [esi+50h]	; jumptable 68F43685 case 30
		test	eax, eax
		jz	short loc_68F43707
		mov	edx, [esi+90h]
		mov	eax, esi
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], ebx
		call	sub_68F41EB0
		jmp	short loc_68F43704
; ---------------------------------------------------------------------------

loc_68F43773:				; CODE XREF: sub_68F43630+55j
					; DATA XREF: .rdata:off_68F5786Co
		mov	eax, [esi+50h]	; jumptable 68F43685 case 0
		test	eax, eax
		jz	short loc_68F43730
		mov	edx, [esi+90h]
		mov	eax, esi
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], ebx
		call	sub_68F41EB0
		cmp	dword ptr [esi+1E0h], 2
		mov	eax, 23h
		jz	loc_68F436A5
		mov	ecx, [ebp+var_10]
		mov	eax, [ebp+arg_C]
		mov	[eax], ecx
		jmp	loc_68F436A3
; ---------------------------------------------------------------------------

loc_68F437AD:				; CODE XREF: sub_68F43630+CEj
		mov	eax, 1
		jmp	loc_68F436A5
; ---------------------------------------------------------------------------

loc_68F437B7:				; CODE XREF: sub_68F43630+E8j
		mov	eax, 23h
		jmp	loc_68F436A5
sub_68F43630	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F437D0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F437D0	proc near		; CODE XREF: .text:68F437C1j
					; XML_ParserFree+154p ...
		push	ebp
		mov	ecx, [edx]
		mov	ebp, esp
		pop	ebp
		mov	edx, [edx+8]
		mov	[eax], ecx
		lea	edx, [ecx+edx*4]
		mov	[eax+4], edx
		retn
sub_68F437D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F437F0	proc near		; CODE XREF: XML_ParserFree+15Cp
					; XML_ParserFree+178p ...
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, eax
		push	ebx
		mov	edx, [eax]
		mov	ebx, [eax+4]
		cmp	edx, ebx
		jz	short loc_68F43822
		add	edx, 4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F43810:				; CODE XREF: sub_68F437F0+2Ej
		mov	ecx, edx
		lea	edx, [edx+4]
		mov	eax, [edx-8]
		test	eax, eax
		jnz	short loc_68F43828
		cmp	ecx, ebx
		jnz	short loc_68F43810
		mov	[esi], ecx

loc_68F43822:				; CODE XREF: sub_68F437F0+Ej
		pop	ebx
		xor	eax, eax
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F43828:				; CODE XREF: sub_68F437F0+2Aj
		mov	[esi], ecx
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F437F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43830	proc near		; CODE XREF: sub_68F43AE0+1A4p
					; sub_68F43AE0+1AEp ...
		push	ebp
		mov	ebp, esp
		pop	ebp
		mov	byte ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax], 0
		mov	[eax+10h], edx
		retn
sub_68F43830	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43850	proc near		; CODE XREF: XML_ParserReset+11Ap
					; XML_ParserReset+12Cp	...

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 10h
		mov	ebx, eax
		mov	edx, [eax+8]
		test	edx, edx
		jz	short loc_68F4388B
		mov	eax, [eax]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F43870:				; CODE XREF: sub_68F43850+39j
		mov	eax, [eax+esi*4]
		mov	edx, [ebx+10h]
		mov	[esp+18h+var_18], eax
		call	dword ptr [edx+8]
		mov	eax, [ebx]
		mov	dword ptr [eax+esi*4], 0
		inc	esi
		cmp	[ebx+8], esi
		ja	short loc_68F43870

loc_68F4388B:				; CODE XREF: sub_68F43850+11j
		mov	dword ptr [ebx+0Ch], 0
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F43850	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F438A0	proc near		; CODE XREF: XML_ParserFree+183p
					; XML_ParserFree+18Ep ...

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 10h
		mov	ebx, eax
		mov	ecx, [eax+8]
		test	ecx, ecx
		jnz	short loc_68F438C5

loc_68F438B3:				; CODE XREF: sub_68F438A0+37j
					; sub_68F438A0+4Dj
		mov	eax, [ebx]
		mov	edx, [ebx+10h]
		mov	[esp+18h+var_18], eax
		call	dword ptr [edx+8]
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F438C5:				; CODE XREF: sub_68F438A0+11j
					; sub_68F438A0+4Bj
		mov	edx, [ebx]
		mov	eax, [ebx+10h]
		mov	edx, [edx+esi*4]
		inc	esi
		mov	[esp+18h+var_18], edx
		call	dword ptr [eax+8]
		cmp	[ebx+8], esi
		jbe	short loc_68F438B3
		mov	edx, [ebx]
		mov	eax, [ebx+10h]
		mov	edx, [edx+esi*4]
		inc	esi
		mov	[esp+18h+var_18], edx
		call	dword ptr [eax+8]
		cmp	[ebx+8], esi
		ja	short loc_68F438C5
		jmp	short loc_68F438B3
sub_68F438A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. XML_ParserFree

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ParserFree
XML_ParserFree	proc near		; CODE XREF: sub_68F43AE0+2B6p
					; XML_ExternalEntityParserCreate+27Fp ...

var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
var_18		= byte ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jz	loc_68F439E4
		mov	esi, [edi+16Ch]
		jmp	short loc_68F4392D
; ---------------------------------------------------------------------------
		align 10h

loc_68F43910:				; CODE XREF: XML_ParserFree+3Fj
					; XML_ParserFree+59j
		mov	ebx, esi
		mov	eax, [ebx+24h]
		mov	esi, [esi]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]
		mov	eax, [ebx+2Ch]
		mov	edx, edi
		call	sub_68F41260
		mov	[esp+28h+var_28], ebx
		call	dword ptr [edi+14h]

loc_68F4392D:				; CODE XREF: XML_ParserFree+1Aj
		test	esi, esi
		jnz	short loc_68F43910
		mov	eax, [edi+170h]
		test	eax, eax
		jz	loc_68F439EC
		mov	esi, eax
		xor	eax, eax
		mov	[edi+170h], eax
		jmp	short loc_68F43910
; ---------------------------------------------------------------------------

loc_68F4394B:				; CODE XREF: XML_ParserFree+11Bj
		mov	eax, [edi+178h]
		mov	edx, edi
		call	sub_68F41260
		mov	eax, [edi+174h]
		mov	edx, edi
		call	sub_68F41260
		lea	eax, [edi+1A0h]
		call	sub_68F41290
		lea	eax, [edi+1B8h]
		call	sub_68F41290
		cmp	byte ptr [edi+1E8h], 0
		jnz	short loc_68F43992
		mov	ebx, [edi+164h]
		test	ebx, ebx
		jnz	loc_68F43A2A

loc_68F43992:				; CODE XREF: XML_ParserFree+92j
					; XML_ParserFree+1C7j
		mov	eax, [edi+188h]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+1D0h]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+8]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+2Ch]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+18Ch]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]
		mov	eax, [edi+0F0h]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]
		mov	edx, [edi+0FCh]
		test	edx, edx
		jnz	short loc_68F43A1D

loc_68F439DE:				; CODE XREF: XML_ParserFree+138j
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+14h]

loc_68F439E4:				; CODE XREF: XML_ParserFree+Ej
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F439EC:				; CODE XREF: XML_ParserFree+49j
		mov	ebx, [edi+12Ch]
		jmp	short loc_68F439FF
; ---------------------------------------------------------------------------

loc_68F439F4:				; CODE XREF: XML_ParserFree+111j
					; XML_ParserFree+12Bj
		mov	eax, ebx
		mov	ebx, [ebx+8]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]

loc_68F439FF:				; CODE XREF: XML_ParserFree+102j
		test	ebx, ebx
		jnz	short loc_68F439F4
		mov	eax, [edi+130h]
		test	eax, eax
		jz	loc_68F4394B
		xor	esi, esi
		mov	ebx, eax
		mov	[edi+130h], esi
		jmp	short loc_68F439F4
; ---------------------------------------------------------------------------

loc_68F43A1D:				; CODE XREF: XML_ParserFree+ECj
		mov	eax, [edi+0F4h]
		mov	[esp+28h+var_28], eax
		call	edx
		jmp	short loc_68F439DE
; ---------------------------------------------------------------------------

loc_68F43A2A:				; CODE XREF: XML_ParserFree+9Cj
		mov	ecx, [edi+1DCh]
		lea	eax, [ebx+14h]
		mov	edx, eax
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_18]
		test	ecx, ecx
		setz	[ebp+var_19]
		lea	esi, [edi+0Ch]
		call	sub_68F437D0

loc_68F43A49:				; CODE XREF: XML_ParserFree+16Aj
		lea	eax, [ebp+var_18]
		call	sub_68F437F0
		test	eax, eax
		jz	short loc_68F43A71

loc_68F43A55:				; CODE XREF: XML_ParserFree+17Fj
		mov	edx, [eax+10h]
		test	edx, edx
		jz	short loc_68F43A49
		mov	eax, [eax+14h]
		mov	[esp+28h+var_28], eax
		call	dword ptr [esi+8]
		lea	eax, [ebp+var_18]
		call	sub_68F437F0
		test	eax, eax
		jnz	short loc_68F43A55

loc_68F43A71:				; CODE XREF: XML_ParserFree+163j
		mov	eax, ebx
		call	sub_68F438A0
		lea	eax, [ebx+84h]
		call	sub_68F438A0
		mov	eax, [ebp+var_20]
		call	sub_68F438A0
		lea	eax, [ebx+28h]
		call	sub_68F438A0
		lea	eax, [ebx+3Ch]
		call	sub_68F438A0
		lea	eax, [ebx+50h]
		call	sub_68F41290
		lea	eax, [ebx+68h]
		call	sub_68F41290
		cmp	[ebp+var_19], 0
		jnz	short loc_68F43ABC

loc_68F43AB1:				; CODE XREF: XML_ParserFree+1E4j
		mov	[esp+28h+var_28], ebx
		call	dword ptr [esi+8]
		jmp	loc_68F43992
; ---------------------------------------------------------------------------

loc_68F43ABC:				; CODE XREF: XML_ParserFree+1BFj
		mov	eax, [ebx+0B8h]
		mov	[esp+28h+var_28], eax
		call	dword ptr [esi+8]
		mov	eax, [ebx+0A4h]
		mov	[esp+28h+var_28], eax
		call	dword ptr [esi+8]
		jmp	short loc_68F43AB1
XML_ParserFree	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43AE0	proc near		; CODE XREF: XML_ExternalEntityParserCreate+113p
					; XML_ParserCreate_MM+19p

Size		= dword	ptr -18h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 0Ch
		test	edx, edx
		mov	[ebp+var_10], eax
		jz	loc_68F43D50
		mov	[esp+18h+Size],	1F0h
		call	dword ptr [edx]
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F43C4C
		lea	edi, [eax+0Ch]
		mov	eax, [esi]
		mov	[ebx+0Ch], eax
		mov	eax, [esi+4]
		mov	[edi+4], eax
		mov	eax, [esi+8]
		mov	[edi+8], eax

loc_68F43B1D:				; CODE XREF: sub_68F43AE0+29Ej
		test	ebx, ebx
		jz	loc_68F43C4C
		mov	dword ptr [ebx+8], 0
		mov	eax, 10h
		mov	dword ptr [ebx+20h], 0
		mov	[ebx+17Ch], eax
		mov	[esp+18h+Size],	100h
		call	dword ptr [ebx+0Ch]
		mov	[ebx+188h], eax
		test	eax, eax
		jz	loc_68F43D3C
		mov	[esp+18h+Size],	400h
		call	dword ptr [ebx+0Ch]
		mov	[ebx+2Ch], eax
		test	eax, eax
		jz	loc_68F43D30
		add	eax, 400h
		mov	[ebx+30h], eax
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	loc_68F43C56
		mov	eax, [ebp+arg_4]
		mov	[ebx+164h], eax

loc_68F43B87:				; CODE XREF: sub_68F43AE0+241j
		mov	dword ptr [ebx+7Ch], 0
		xor	eax, eax
		xor	ecx, ecx
		mov	[ebx+178h], eax
		xor	eax, eax
		xor	edx, edx
		mov	[ebx+170h], eax
		xor	eax, eax
		xor	esi, esi
		mov	[ebx+130h], eax
		xor	eax, eax
		mov	[ebx+18Ch], eax
		xor	eax, eax
		mov	[ebx+1D0h], ecx
		mov	[ebx+0F8h], edx
		mov	edx, edi
		mov	[ebx+190h], eax
		lea	eax, [ebx+1A0h]
		mov	[ebx+1D4h], esi
		mov	byte ptr [ebx+1D8h], 21h
		mov	byte ptr [ebx+0ECh], 0
		mov	byte ptr [ebx+0EDh], 0
		mov	byte ptr [ebx+194h], 0
		call	sub_68F41190
		lea	eax, [ebx+1B8h]
		mov	edx, edi
		call	sub_68F41190
		mov	edx, [ebp+var_10]
		mov	eax, ebx
		call	sub_68F42860
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_68F43C23
		mov	eax, [ebx+0E8h]
		test	eax, eax
		jz	loc_68F43D93

loc_68F43C23:				; CODE XREF: sub_68F43AE0+133j
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	loc_68F43D83
		mov	byte ptr [ebx+0ECh], 1
		call	sub_68F54340
		mov	[ebx+0E4h], eax
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx]
		mov	[ebx+1D8h], al

loc_68F43C4C:				; CODE XREF: sub_68F43AE0+23j
					; sub_68F43AE0+3Fj ...
		mov	eax, ebx

loc_68F43C4E:				; CODE XREF: sub_68F43AE0+264j
					; sub_68F43AE0+2BDj
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F43C56:				; CODE XREF: sub_68F43AE0+98j
		mov	[esp+18h+Size],	0BCh
		call	dword ptr [ebx+0Ch]
		mov	esi, eax
		xor	eax, eax
		test	esi, esi
		jz	loc_68F43D19
		lea	eax, [esi+50h]
		mov	edx, edi
		call	sub_68F41190
		lea	eax, [esi+68h]
		mov	edx, edi
		call	sub_68F41190
		mov	edx, edi
		mov	eax, esi
		call	sub_68F43830
		lea	eax, [esi+14h]
		mov	edx, edi
		call	sub_68F43830
		lea	eax, [esi+28h]
		mov	edx, edi
		call	sub_68F43830
		lea	eax, [esi+3Ch]
		mov	edx, edi
		call	sub_68F43830
		mov	byte ptr [esi+83h], 0
		lea	eax, [esi+84h]
		mov	edx, edi
		call	sub_68F43830
		mov	byte ptr [esi+0A0h], 0
		xor	eax, eax
		xor	ecx, ecx
		mov	[esi+98h], eax
		xor	eax, eax
		xor	edx, edx
		mov	[esi+9Ch], eax
		xor	eax, eax
		mov	[esi+0B8h], eax
		xor	eax, eax
		mov	[esi+0ACh], eax
		xor	eax, eax
		mov	[esi+0B0h], eax
		xor	eax, eax
		mov	[esi+0A8h], eax
		mov	eax, esi
		mov	[esi+0A4h], ecx
		mov	[esi+0B4h], edx
		mov	byte ptr [esi+80h], 1
		mov	byte ptr [esi+81h], 0
		mov	byte ptr [esi+82h], 0

loc_68F43D19:				; CODE XREF: sub_68F43AE0+186j
		mov	[ebx+164h], eax
		test	eax, eax
		jnz	loc_68F43B87
		mov	eax, [ebx+2Ch]
		mov	[esp+18h+Size],	eax
		call	dword ptr [ebx+14h]

loc_68F43D30:				; CODE XREF: sub_68F43AE0+85j
		mov	eax, [ebx+188h]
		mov	[esp+18h+Size],	eax
		call	dword ptr [ebx+14h]

loc_68F43D3C:				; CODE XREF: sub_68F43AE0+70j
		mov	[esp+18h+Size],	ebx
		call	dword ptr [ebx+14h]
		xor	eax, eax
		jmp	loc_68F43C4E
; ---------------------------------------------------------------------------
		align 10h

loc_68F43D50:				; CODE XREF: sub_68F43AE0+10j
		mov	[esp+18h+Size],	1F0h ; Size
		call	malloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F43C4C
		mov	dword ptr [eax+0Ch], offset malloc
		lea	edi, [eax+0Ch]
		mov	dword ptr [edi+4], offset loc_68F55F90
		mov	dword ptr [edi+8], offset free
		jmp	loc_68F43B1D
; ---------------------------------------------------------------------------

loc_68F43D83:				; CODE XREF: sub_68F43AE0+148j
		call	sub_68F54170
		mov	[ebx+0E4h], eax
		jmp	loc_68F43C4C
; ---------------------------------------------------------------------------

loc_68F43D93:				; CODE XREF: sub_68F43AE0+13Dj
		mov	[esp+18h+Size],	ebx
		call	XML_ParserFree
		xor	eax, eax
		jmp	loc_68F43C4E
sub_68F43AE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43DB0	proc near		; CODE XREF: sub_68F43DE0+73p
					; sub_68F43DE0+10Dp ...
		push	ebp
		mov	edx, eax
		mov	ebp, esp
		xor	ecx, ecx
		jmp	short loc_68F43DCC
; ---------------------------------------------------------------------------
		align 10h

loc_68F43DC0:				; CODE XREF: sub_68F43DB0+21j
		imul	ecx, 0F4243h
		movzx	eax, al
		inc	edx
		xor	ecx, eax

loc_68F43DCC:				; CODE XREF: sub_68F43DB0+7j
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	short loc_68F43DC0
		pop	ebp
		mov	eax, ecx
		retn
sub_68F43DB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F43DE0	proc near		; CODE XREF: sub_68F441C0+58p
					; sub_68F441C0+16Bp ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [eax+8]
		mov	[ebp+var_10], eax
		mov	[ebp+var_14], edx
		test	ebx, ebx
		jnz	loc_68F43EEA
		mov	edx, [ebp+arg_0]
		xor	eax, eax
		test	edx, edx
		jz	loc_68F43ECF
		mov	eax, [ebp+var_10]
		mov	byte ptr [eax+4], 6
		mov	edx, [ebp+var_10]
		mov	dword ptr [eax+8], 40h
		mov	eax, [edx+10h]
		mov	[esp+48h+var_48], 100h
		call	dword ptr [eax]
		mov	ecx, [ebp+var_10]
		test	eax, eax
		mov	esi, eax
		mov	[ecx], eax
		jz	loc_68F440E7
		test	esi, 4
		mov	edi, eax
		mov	eax, 100h
		jnz	loc_68F43ED7

loc_68F43E46:				; CODE XREF: sub_68F43DE0+105j
		cld
		mov	ecx, eax
		shr	ecx, 2
		mov	eax, ebx
		rep stosd
		mov	eax, [ebp+var_14]
		call	sub_68F43DB0
		mov	edx, [ebp+var_10]
		mov	ebx, eax
		mov	eax, [edx+8]
		mov	esi, [edx]
		dec	eax
		and	ebx, eax

loc_68F43E65:				; CODE XREF: sub_68F43DE0+1C6j
					; sub_68F43DE0+385j ...
		mov	edx, [ebp+var_10]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+10h]
		mov	[esp+48h+var_48], ecx
		call	dword ptr [eax]
		mov	edi, [ebp+var_10]
		mov	[esi+ebx*4], eax
		mov	eax, [edi]
		mov	edi, [eax+ebx*4]
		xor	eax, eax
		test	edi, edi
		jz	short loc_68F43ECF
		mov	edx, [ebp+arg_0]
		cmp	edx, 7
		jbe	short loc_68F43EA0
		test	edi, 4
		jnz	loc_68F440CB
		nop
		lea	esi, [esi+0]

loc_68F43EA0:				; CODE XREF: sub_68F43DE0+AAj
					; sub_68F43DE0+2F7j
		cld
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		test	dl, 2
		rep stosd
		jz	short loc_68F43EB7
		mov	word ptr [edi],	0
		add	edi, 2

loc_68F43EB7:				; CODE XREF: sub_68F43DE0+CDj
		test	dl, 1
		jz	short loc_68F43EBF
		mov	byte ptr [edi],	0

loc_68F43EBF:				; CODE XREF: sub_68F43DE0+DAj
		mov	edx, [ebp+var_10]
		mov	ecx, [ebp+var_14]
		mov	eax, [edx]
		inc	dword ptr [edx+0Ch]
		mov	eax, [eax+ebx*4]
		mov	[eax], ecx

loc_68F43ECF:				; CODE XREF: sub_68F43DE0+21j
					; sub_68F43DE0+A2j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F43ED7:				; CODE XREF: sub_68F43DE0+60j
		mov	dword ptr [esi], 0
		lea	edi, [esi+4]
		mov	eax, 0FCh
		jmp	loc_68F43E46
; ---------------------------------------------------------------------------

loc_68F43EEA:				; CODE XREF: sub_68F43DE0+14j
		mov	eax, [ebp+var_14]
		call	sub_68F43DB0
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_10]
		mov	ebx, eax
		mov	[ebp+var_1D], 0
		mov	edi, [ebp+var_10]
		mov	ecx, [ecx+8]
		mov	esi, [edi]
		mov	[ebp+var_30], ecx
		dec	ecx
		and	ebx, ecx
		mov	[ebp+var_1C], ecx
		mov	eax, [esi+ebx*4]
		test	eax, eax
		jz	short loc_68F43F87
		mov	edx, [ebp+var_14]
		not	ecx
		mov	edi, [ebp+var_18]
		movzx	edx, byte ptr [edx]
		and	ecx, edi
		mov	[ebp+var_44], ecx
		mov	[ebp+var_31], dl
		lea	esi, [esi+0]

loc_68F43F30:				; CODE XREF: sub_68F43DE0+1A5j
		mov	ecx, [eax]
		mov	edx, [ebp+var_14]
		movzx	eax, [ebp+var_31]
		cmp	al, [ecx]
		jz	loc_68F440A0

loc_68F43F41:				; CODE XREF: sub_68F43DE0+2D7j
		xor	eax, eax

loc_68F43F43:				; CODE XREF: sub_68F43DE0+2E6j
		test	al, al
		jnz	loc_68F441B5
		cmp	[ebp+var_1D], 0
		jnz	short loc_68F43F6D
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+var_1C]
		movzx	ecx, byte ptr [edx+4]
		mov	edx, [ebp+var_44]
		shr	eax, 2
		dec	ecx
		shr	edx, cl
		and	dl, al
		mov	[ebp+var_1D], dl
		or	[ebp+var_1D], 1

loc_68F43F6D:				; CODE XREF: sub_68F43DE0+16Fj
		movzx	eax, [ebp+var_1D]
		cmp	eax, ebx
		jbe	loc_68F440E0
		mov	ecx, [ebp+var_30]
		sub	ecx, eax
		add	ebx, ecx

loc_68F43F80:				; CODE XREF: sub_68F43DE0+302j
		mov	eax, [esi+ebx*4]
		test	eax, eax
		jnz	short loc_68F43F30

loc_68F43F87:				; CODE XREF: sub_68F43DE0+134j
		mov	edi, [ebp+arg_0]
		xor	eax, eax
		test	edi, edi
		jz	loc_68F43ECF
		mov	edi, [ebp+var_10]
		mov	eax, [edi+0Ch]
		movzx	edx, byte ptr [edi+4]
		movzx	ecx, dl
		dec	ecx
		shr	eax, cl
		test	eax, eax
		jz	loc_68F43E65
		mov	[ebp+var_24], 1
		inc	dl
		mov	cl, dl
		shl	[ebp+var_24], cl
		mov	[ebp+var_1E], dl
		mov	edx, [ebp+var_10]
		mov	edi, [ebp+var_24]
		mov	ebx, [ebp+var_24]
		mov	eax, [edx+10h]
		dec	edi
		mov	[ebp+var_28], edi
		shl	ebx, 2
		mov	[esp+48h+var_48], ebx
		call	dword ptr [eax]
		mov	[ebp+var_2C], eax
		mov	esi, [ebp+var_2C]
		xor	eax, eax
		test	esi, esi
		jz	loc_68F43ECF
		cmp	ebx, 7
		mov	edi, [ebp+var_2C]
		mov	eax, ebx
		ja	loc_68F440F5

loc_68F43FF3:				; CODE XREF: sub_68F43DE0+31Bj
					; sub_68F43DE0+330j
		cld
		mov	ecx, eax
		shr	ecx, 2
		xor	eax, eax
		xor	ebx, ebx
		rep stosd
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+8]
		cmp	ecx, 0
		mov	[ebp+var_30], ecx
		jbe	loc_68F4412E
		movzx	edx, [ebp+var_1E]
		mov	edi, [ebp+var_10]
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_28]
		mov	esi, [edi]
		not	eax
		mov	[ebp+var_38], eax
		shr	ecx, 2
		mov	[ebp+var_3C], edx
		mov	[ebp+var_40], ecx
		jmp	short loc_68F4403A
; ---------------------------------------------------------------------------

loc_68F44030:				; CODE XREF: sub_68F43DE0+25Fj
					; sub_68F43DE0+349j
		inc	ebx
		cmp	[ebp+var_30], ebx
		jbe	loc_68F44133

loc_68F4403A:				; CODE XREF: sub_68F43DE0+24Ej
		mov	eax, [esi+ebx*4]
		test	eax, eax
		jz	short loc_68F44030
		mov	eax, [eax]
		call	sub_68F43DB0
		mov	[ebp+var_1D], 0
		mov	edi, [ebp+var_28]
		mov	edx, [ebp+var_2C]
		and	edi, eax
		mov	ecx, [edx+edi*4]
		test	ecx, ecx
		jz	loc_68F44115
		mov	edx, [ebp+var_38]
		mov	ecx, [ebp+var_3C]
		and	eax, edx
		movzx	edx, byte ptr [ebp+var_40]
		dec	ecx
		shr	eax, cl
		and	dl, al
		or	dl, 1
		jmp	short loc_68F4408A
; ---------------------------------------------------------------------------

loc_68F44075:				; CODE XREF: sub_68F43DE0+2B9j
		mov	ecx, [ebp+var_24]
		sub	ecx, eax
		add	edi, ecx

loc_68F4407C:				; CODE XREF: sub_68F43DE0+2BDj
		mov	eax, [ebp+var_2C]
		mov	eax, [eax+edi*4]
		test	eax, eax
		jz	loc_68F44115

loc_68F4408A:				; CODE XREF: sub_68F43DE0+293j
		cmp	[ebp+var_1D], 0
		jnz	short loc_68F44093
		mov	[ebp+var_1D], dl

loc_68F44093:				; CODE XREF: sub_68F43DE0+2AEj
		movzx	eax, [ebp+var_1D]
		cmp	eax, edi
		ja	short loc_68F44075
		sub	edi, eax
		jmp	short loc_68F4407C
; ---------------------------------------------------------------------------
		align 10h

loc_68F440A0:				; CODE XREF: sub_68F43DE0+15Bj
		movzx	eax, byte ptr [edx]
		test	al, al
		jz	short loc_68F440C1
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F440B0:				; CODE XREF: sub_68F43DE0+2DFj
		inc	edx
		inc	ecx
		movzx	eax, byte ptr [edx]
		cmp	al, [ecx]
		jnz	loc_68F43F41
		test	al, al
		jnz	short loc_68F440B0

loc_68F440C1:				; CODE XREF: sub_68F43DE0+2C5j
		mov	eax, 1
		jmp	loc_68F43F43
; ---------------------------------------------------------------------------

loc_68F440CB:				; CODE XREF: sub_68F43DE0+B2j
		mov	dword ptr [edi], 0
		sub	edx, 4
		add	edi, 4
		jmp	loc_68F43EA0
; ---------------------------------------------------------------------------
		align 10h

loc_68F440E0:				; CODE XREF: sub_68F43DE0+193j
		sub	ebx, eax
		jmp	loc_68F43F80
; ---------------------------------------------------------------------------

loc_68F440E7:				; CODE XREF: sub_68F43DE0+4Dj
		mov	dword ptr [ecx+8], 0
		xor	eax, eax
		jmp	loc_68F43ECF
; ---------------------------------------------------------------------------

loc_68F440F5:				; CODE XREF: sub_68F43DE0+20Dj
		test	edi, 4
		jz	loc_68F43FF3
		mov	dword ptr [edi], 0
		sub	eax, 4
		mov	edi, [ebp+var_2C]
		add	edi, 4
		jmp	loc_68F43FF3
; ---------------------------------------------------------------------------

loc_68F44115:				; CODE XREF: sub_68F43DE0+279j
					; sub_68F43DE0+2A4j
		mov	edx, [ebp+var_10]
		mov	ecx, [ebp+var_2C]
		mov	esi, [edx]
		mov	eax, [esi+ebx*4]
		mov	[ecx+edi*4], eax
		mov	edi, [edx+8]
		mov	[ebp+var_30], edi
		jmp	loc_68F44030
; ---------------------------------------------------------------------------

loc_68F4412E:				; CODE XREF: sub_68F43DE0+22Bj
		mov	eax, [ebp+var_10]
		mov	esi, [eax]

loc_68F44133:				; CODE XREF: sub_68F43DE0+254j
		mov	edx, [ebp+var_10]
		mov	eax, [edx+10h]
		mov	[esp+48h+var_48], esi
		call	dword ptr [eax+8]
		movzx	eax, [ebp+var_1E]
		mov	ecx, [ebp+var_10]
		mov	esi, [ebp+var_2C]
		mov	[ecx+4], al
		mov	ebx, [ebp+var_18]
		mov	[ecx], esi
		mov	edi, [ebp+var_28]
		mov	[ebp+var_1D], 0
		mov	edx, [ebp+var_24]
		and	ebx, edi
		mov	[ecx+8], edx
		mov	ecx, [esi+ebx*4]
		test	ecx, ecx
		jz	loc_68F43E65
		movzx	ecx, [ebp+var_1E]
		mov	eax, [ebp+var_28]
		mov	edx, [ebp+var_18]
		shr	[ebp+var_28], 2
		not	eax
		dec	ecx
		and	eax, edx
		shr	eax, cl
		movzx	edx, byte ptr [ebp+var_28]
		and	dl, al
		or	dl, 1
		jmp	short loc_68F441A0
; ---------------------------------------------------------------------------

loc_68F4418B:				; CODE XREF: sub_68F43DE0+3CFj
		mov	ecx, [ebp+var_24]
		sub	ecx, eax
		add	ebx, ecx

loc_68F44192:				; CODE XREF: sub_68F43DE0+3D3j
		mov	edi, [ebp+var_2C]
		mov	eax, [edi+ebx*4]
		test	eax, eax
		jz	loc_68F43E65

loc_68F441A0:				; CODE XREF: sub_68F43DE0+3A9j
		cmp	[ebp+var_1D], 0
		jnz	short loc_68F441A9
		mov	[ebp+var_1D], dl

loc_68F441A9:				; CODE XREF: sub_68F43DE0+3C4j
		movzx	eax, [ebp+var_1D]
		cmp	eax, ebx
		ja	short loc_68F4418B
		sub	ebx, eax
		jmp	short loc_68F44192
; ---------------------------------------------------------------------------

loc_68F441B5:				; CODE XREF: sub_68F43DE0+165j
		mov	eax, [esi+ebx*4]
		jmp	loc_68F43ECF
sub_68F43DE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F441C0	proc near		; CODE XREF: sub_68F44F00+E0p
					; sub_68F468F0+604p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	[ebp+var_10], eax
		mov	esi, [eax+164h]
		mov	ebx, edx
		mov	ecx, [esi+5Ch]
		lea	eax, [esi+50h]
		cmp	ecx, [esi+58h]
		mov	[ebp+var_20], eax
		jz	loc_68F44284

loc_68F441E6:				; CODE XREF: sub_68F441C0+D2j
		mov	byte ptr [ecx],	0
		mov	edx, ebx
		mov	eax, [ebp+arg_4]
		inc	dword ptr [esi+5Ch]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		mov	eax, [ebp+var_20]
		call	sub_68F42EC0
		xor	edx, edx
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68F44231
		mov	[esp+38h+var_38], 0Ch
		inc	ebx
		lea	eax, [esi+28h]
		mov	edx, ebx
		call	sub_68F43DE0
		xor	edx, edx
		test	eax, eax
		mov	edi, eax
		jz	short loc_68F44231
		cmp	[eax], ebx
		jz	short loc_68F44240
		mov	ecx, [esi+60h]
		mov	[esi+5Ch], ecx

loc_68F4422F:				; CODE XREF: sub_68F441C0+90j
					; sub_68F441C0+A8j ...
		mov	edx, edi

loc_68F44231:				; CODE XREF: sub_68F441C0+49j
					; sub_68F441C0+63j ...
		add	esp, 2Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F44240:				; CODE XREF: sub_68F441C0+67j
		mov	ecx, [esi+5Ch]
		mov	eax, [ebp+var_10]
		mov	[esi+60h], ecx
		cmp	byte ptr [eax+0ECh], 0
		jz	short loc_68F4422F
		movzx	edx, byte ptr [ebx]
		cmp	dl, 78h
		mov	[ebp+var_21], dl
		jz	short loc_68F44297

loc_68F4425D:				; CODE XREF: sub_68F441C0+DBj
					; sub_68F441C0+E1j ...
		cmp	[ebp+var_21], 0
		mov	[ebp+var_18], 0
		jz	short loc_68F4422F
		movzx	eax, byte ptr [ebx]
		lea	esi, [esi+0]

loc_68F44270:				; CODE XREF: sub_68F441C0+C0j
		cmp	al, 3Ah
		jz	short loc_68F442E4
		inc	[ebp+var_18]
		mov	edx, [ebp+var_18]
		movzx	eax, byte ptr [edx+ebx]
		test	al, al
		jnz	short loc_68F44270
		jmp	short loc_68F4422F
; ---------------------------------------------------------------------------

loc_68F44284:				; CODE XREF: sub_68F441C0+20j
		call	sub_68F42600
		xor	edx, edx
		test	al, al
		jz	short loc_68F44231
		mov	ecx, [esi+5Ch]
		jmp	loc_68F441E6
; ---------------------------------------------------------------------------

loc_68F44297:				; CODE XREF: sub_68F441C0+9Bj
		cmp	byte ptr [ebx+1], 6Dh
		jnz	short loc_68F4425D
		cmp	byte ptr [ebx+2], 6Ch
		jnz	short loc_68F4425D
		cmp	byte ptr [ebx+3], 6Eh
		jnz	short loc_68F4425D
		cmp	byte ptr [ebx+4], 73h
		jnz	short loc_68F4425D
		movzx	eax, byte ptr [ebx+5]
		test	al, al
		mov	[ebp+var_11], al
		setz	al
		cmp	[ebp+var_11], 3Ah
		setz	dl
		or	eax, edx
		test	al, 1
		jz	short loc_68F4425D
		cmp	[ebp+var_11], 0
		lea	eax, [esi+98h]
		jnz	loc_68F4437C

loc_68F442D8:				; CODE XREF: sub_68F441C0+1CEj
		mov	[edi+4], eax
		mov	byte ptr [edi+9], 1
		jmp	loc_68F4422F
; ---------------------------------------------------------------------------

loc_68F442E4:				; CODE XREF: sub_68F441C0+B2j
		mov	[ebp+var_1C], 0
		mov	edx, [ebp+var_18]
		cmp	[ebp+var_1C], edx
		jmp	short loc_68F44311
; ---------------------------------------------------------------------------

loc_68F442F3:				; CODE XREF: sub_68F441C0:loc_68F44311j
		cmp	ecx, [esi+58h]
		jz	short loc_68F44342

loc_68F442F8:				; CODE XREF: sub_68F441C0+191j
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+ebx]
		inc	edx
		mov	[ecx], al
		mov	ecx, [esi+5Ch]
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_18]
		inc	ecx
		mov	[esi+5Ch], ecx
		cmp	edx, eax

loc_68F44311:				; CODE XREF: sub_68F441C0+131j
		jl	short loc_68F442F3
		cmp	ecx, [esi+58h]
		jz	short loc_68F44353

loc_68F44318:				; CODE XREF: sub_68F441C0+1A8j
		mov	byte ptr [ecx],	0
		lea	eax, [esi+3Ch]
		mov	edx, [esi+60h]
		inc	dword ptr [esi+5Ch]
		mov	[esp+38h+var_38], 8
		call	sub_68F43DE0
		mov	[edi+4], eax
		mov	edx, [esi+60h]
		cmp	[eax], edx
		jz	short loc_68F4436A
		mov	[esi+5Ch], edx
		jmp	loc_68F4422F
; ---------------------------------------------------------------------------

loc_68F44342:				; CODE XREF: sub_68F441C0+136j
		mov	eax, [ebp+var_20]
		call	sub_68F42600
		test	al, al
		jz	short loc_68F44375
		mov	ecx, [esi+5Ch]
		jmp	short loc_68F442F8
; ---------------------------------------------------------------------------

loc_68F44353:				; CODE XREF: sub_68F441C0+156j
		mov	eax, [ebp+var_20]
		call	sub_68F42600
		xor	edx, edx
		test	al, al
		jz	loc_68F44231
		mov	ecx, [esi+5Ch]
		jmp	short loc_68F44318
; ---------------------------------------------------------------------------

loc_68F4436A:				; CODE XREF: sub_68F441C0+178j
		mov	eax, [esi+5Ch]
		mov	[esi+60h], eax
		jmp	loc_68F4422F
; ---------------------------------------------------------------------------

loc_68F44375:				; CODE XREF: sub_68F441C0+18Cj
		xor	edx, edx
		jmp	loc_68F44231
; ---------------------------------------------------------------------------

loc_68F4437C:				; CODE XREF: sub_68F441C0+112j
		mov	[esp+38h+var_38], 8
		lea	edx, [ebx+6]
		lea	eax, [esi+3Ch]
		call	sub_68F43DE0
		jmp	loc_68F442D8
sub_68F441C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F443A0	proc near		; CODE XREF: sub_68F443A0+2CCp
					; sub_68F447D0+2Ap

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_18], eax
		mov	edx, [ebp+var_18]
		movzx	eax, [ebp+arg_0]
		mov	edx, [edx+164h]
		mov	[ebp+var_19], al
		mov	[ebp+var_20], edx

loc_68F443C4:				; CODE XREF: sub_68F443A0+83j
					; sub_68F443A0+1DAj ...
		lea	ecx, [ebp+var_10]
		mov	[esp+38h+var_2C], ecx
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], esi
		mov	[esp+38h+var_30], eax
		call	dword ptr [esi+10h]
		add	eax, 4		; switch 44 cases
		cmp	eax, 2Bh
		ja	short loc_68F44425 ; jumptable 68F443E4	default	case
		jmp	ds:off_68F578E8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F443F0:				; CODE XREF: sub_68F443A0+44j
					; DATA XREF: .rdata:off_68F578E8o
		mov	eax, [esi+44h]	; jumptable 68F443E4 case -3
		add	ebx, eax
		mov	[ebp+var_10], ebx

loc_68F443F8:				; CODE XREF: sub_68F443A0+44j
					; DATA XREF: .rdata:off_68F578E8o
		cmp	[ebp+var_19], 0	; jumptable 68F443E4 cases 7,39
		jnz	loc_68F44580
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx+0Ch]
		cmp	edx, [ecx+10h]
		jz	short loc_68F44420
		cmp	byte ptr [edx-1], 20h
		jnz	loc_68F44586
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F44420:				; CODE XREF: sub_68F443A0+6Bj
					; sub_68F443A0+D1j ...
		mov	ebx, [ebp+var_10]
		jmp	short loc_68F443C4
; ---------------------------------------------------------------------------

loc_68F44425:				; CODE XREF: sub_68F443A0+42j
					; sub_68F443A0+44j
					; DATA XREF: ...
		mov	eax, [ebp+var_18] ; jumptable 68F443E4 default case
		cmp	[eax+90h], esi
		jz	loc_68F4469F
		mov	eax, 17h

loc_68F44439:				; CODE XREF: sub_68F443A0+30Aj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F44441:				; CODE XREF: sub_68F443A0+44j
					; DATA XREF: .rdata:off_68F578E8o
		mov	[esp+38h+var_34], ebx ;	jumptable 68F443E4 case	10
		mov	[esp+38h+var_38], esi
		call	dword ptr [esi+2Ch]
		test	eax, eax
		mov	edi, eax
		js	loc_68F44727
		cmp	[ebp+var_19], 0
		setz	al
		xor	edx, edx
		cmp	edi, 20h
		setz	dl
		test	edx, eax
		jz	short loc_68F44479
		mov	edx, [ebp+arg_C]
		mov	eax, [edx+0Ch]
		cmp	eax, [edx+10h]
		jz	short loc_68F44420
		cmp	byte ptr [eax-1], 20h
		jz	short loc_68F44420

loc_68F44479:				; CODE XREF: sub_68F443A0+C6j
		mov	[esp+38h+var_38], edi
		lea	ecx, [ebp+var_14]
		mov	[esp+38h+var_34], ecx
		call	sub_68F53880
		test	eax, eax
		mov	edi, eax
		jz	loc_68F44727
		xor	ebx, ebx
		cmp	ebx, eax
		jge	short loc_68F44420
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx+0Ch]
		jmp	short loc_68F444BA
; ---------------------------------------------------------------------------

loc_68F444A0:				; CODE XREF: sub_68F443A0+120j
					; sub_68F443A0+131j
		movzx	eax, byte ptr [ebx+ebp-14h]
		inc	ebx
		mov	[edx], al
		mov	eax, [ebp+arg_C]
		mov	edx, [eax+0Ch]
		inc	edx
		cmp	ebx, edi
		mov	[eax+0Ch], edx
		jge	loc_68F44420

loc_68F444BA:				; CODE XREF: sub_68F443A0+FEj
		mov	eax, [ebp+arg_C]
		cmp	edx, [eax+8]
		jnz	short loc_68F444A0
		call	sub_68F42600
		test	al, al
		jz	short loc_68F4451C
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx+0Ch]
		jmp	short loc_68F444A0
; ---------------------------------------------------------------------------

loc_68F444D3:				; CODE XREF: sub_68F443A0+44j
					; DATA XREF: .rdata:off_68F578E8o
		mov	ecx, [ebp+var_18] ; jumptable 68F443E4 case -1
		cmp	[ecx+90h], esi
		jz	loc_68F446AF

loc_68F444E2:				; CODE XREF: sub_68F443A0+18Cj
		mov	eax, 4

loc_68F444E7:				; CODE XREF: sub_68F443A0+19Cj
					; sub_68F443A0+31Aj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F444F0:				; CODE XREF: sub_68F443A0+44j
					; DATA XREF: .rdata:off_68F578E8o
		xor	eax, eax	; jumptable 68F443E4 case -4

loc_68F444F2:				; CODE XREF: sub_68F443A0+181j
					; sub_68F443A0+2D7j ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F44500:				; CODE XREF: sub_68F443A0+44j
					; DATA XREF: .rdata:off_68F578E8o
		mov	eax, [ebp+var_10] ; jumptable 68F443E4 case 6
		mov	[esp+38h+var_38], ebx
		mov	edx, esi
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_C]
		call	sub_68F42E40
		test	eax, eax
		jnz	loc_68F44420

loc_68F4451C:				; CODE XREF: sub_68F443A0+129j
					; sub_68F443A0+225j ...
		mov	eax, 1
		jmp	short loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F44523:				; CODE XREF: sub_68F443A0+44j
					; DATA XREF: .rdata:off_68F578E8o
		mov	edx, [ebp+var_18] ; jumptable 68F443E4 case 0
		cmp	[edx+90h], esi
		jnz	short loc_68F444E2
		mov	eax, [ebp+var_10]
		mov	[edx+120h], eax
		mov	eax, 4
		jmp	short loc_68F444E7
; ---------------------------------------------------------------------------
		align 10h

loc_68F44540:				; CODE XREF: sub_68F443A0+44j
					; DATA XREF: .rdata:off_68F578E8o
		mov	edx, [esi+44h]	; jumptable 68F443E4 case 9
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_38], esi
		sub	eax, edx
		add	edx, ebx
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], edx
		call	dword ptr [esi+30h]
		test	al, al
		mov	edi, eax
		jz	short loc_68F445A3
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx+0Ch]
		cmp	edx, [ecx+8]
		jz	loc_68F446DC

loc_68F4456D:				; CODE XREF: sub_68F443A0+351j
		mov	ecx, edi
		mov	[edx], cl
		mov	eax, [ebp+arg_C]
		mov	ebx, [ebp+var_10]
		inc	dword ptr [eax+0Ch]
		jmp	loc_68F443C4
; ---------------------------------------------------------------------------
		align 10h

loc_68F44580:				; CODE XREF: sub_68F443A0+5Cj
		mov	eax, [ebp+arg_C]
		mov	edx, [eax+0Ch]

loc_68F44586:				; CODE XREF: sub_68F443A0+71j
		mov	ecx, [ebp+arg_C]
		cmp	edx, [ecx+8]
		jz	loc_68F44685

loc_68F44592:				; CODE XREF: sub_68F443A0+2FAj
		mov	byte ptr [edx],	20h
		mov	edx, [ebp+arg_C]
		mov	ebx, [ebp+var_10]
		inc	dword ptr [edx+0Ch]
		jmp	loc_68F443C4
; ---------------------------------------------------------------------------

loc_68F445A3:				; CODE XREF: sub_68F443A0+1BCj
		mov	ecx, [esi+44h]
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+var_18]
		sub	edx, ecx
		add	eax, 1B8h
		add	ecx, ebx
		mov	[esp+38h+var_34], edx
		mov	edx, esi
		mov	[esp+38h+var_38], ecx
		call	sub_68F42EC0
		test	eax, eax
		jz	loc_68F4451C
		mov	[esp+38h+var_38], 0
		mov	edx, eax
		mov	eax, [ebp+var_20]
		call	sub_68F43DE0
		mov	edx, [ebp+var_18]
		mov	edi, eax
		mov	eax, [edx+1C8h]
		mov	[edx+1C4h], eax
		mov	eax, [ebp+var_20]
		add	eax, 50h
		cmp	eax, [ebp+arg_C]
		jz	loc_68F446F6
		mov	edx, [ebp+var_20]
		cmp	byte ptr [edx+81h], 0
		jnz	loc_68F446BF

loc_68F4460C:				; CODE XREF: sub_68F443A0+326j
					; sub_68F443A0+376j
		test	edi, edi
		jz	loc_68F44795
		cmp	byte ptr [edi+22h], 0
		jz	loc_68F4478B

loc_68F4461E:				; CODE XREF: sub_68F443A0+32Ej
		cmp	byte ptr [edi+20h], 0
		jnz	loc_68F44776
		mov	eax, [edi+1Ch]
		test	eax, eax
		jnz	loc_68F44761
		mov	eax, [edi+4]
		test	eax, eax
		jz	loc_68F4474C
		mov	byte ptr [edi+20h], 1
		mov	ecx, [edi+8]
		add	eax, ecx
		mov	ecx, [ebp+var_18]
		mov	edx, [ecx+0E4h]
		mov	ecx, [ebp+arg_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_2C], ecx
		mov	eax, [edi+4]
		mov	[esp+38h+var_34], eax
		movzx	eax, [ebp+var_19]
		mov	[esp+38h+var_38], eax
		mov	eax, [ebp+var_18]
		call	sub_68F443A0
		mov	byte ptr [edi+20h], 0
		test	eax, eax
		jnz	loc_68F444F2
		mov	ebx, [ebp+var_10]
		jmp	loc_68F443C4
; ---------------------------------------------------------------------------

loc_68F44685:				; CODE XREF: sub_68F443A0+1ECj
		mov	eax, ecx
		call	sub_68F42600
		test	al, al
		jz	loc_68F4451C
		mov	eax, [ebp+arg_C]
		mov	edx, [eax+0Ch]
		jmp	loc_68F44592
; ---------------------------------------------------------------------------

loc_68F4469F:				; CODE XREF: sub_68F443A0+8Ej
		mov	[eax+120h], ebx
		mov	eax, 17h
		jmp	loc_68F44439
; ---------------------------------------------------------------------------

loc_68F446AF:				; CODE XREF: sub_68F443A0+13Cj
		mov	[ecx+120h], ebx
		mov	eax, 4
		jmp	loc_68F444E7
; ---------------------------------------------------------------------------

loc_68F446BF:				; CODE XREF: sub_68F443A0+266j
		cmp	byte ptr [edx+82h], 0
		jnz	loc_68F4460C

loc_68F446CC:				; CODE XREF: sub_68F443A0+35Ej
					; sub_68F443A0:loc_68F44714j
		test	edi, edi
		jnz	loc_68F4461E
		mov	ebx, [ebp+var_10]
		jmp	loc_68F443C4
; ---------------------------------------------------------------------------

loc_68F446DC:				; CODE XREF: sub_68F443A0+1C7j
		mov	eax, ecx
		call	sub_68F42600
		test	al, al
		jz	loc_68F4451C
		mov	eax, [ebp+arg_C]
		mov	edx, [eax+0Ch]
		jmp	loc_68F4456D
; ---------------------------------------------------------------------------

loc_68F446F6:				; CODE XREF: sub_68F443A0+256j
		mov	eax, [edx+110h]
		test	eax, eax
		jz	short loc_68F446CC
		mov	ecx, [ebp+var_20]
		cmp	byte ptr [ecx+82h], 0
		jz	short loc_68F4471B
		mov	eax, [edx+12Ch]
		test	eax, eax

loc_68F44714:				; CODE XREF: sub_68F443A0+385j
		jnz	short loc_68F446CC
		jmp	loc_68F4460C
; ---------------------------------------------------------------------------

loc_68F4471B:				; CODE XREF: sub_68F443A0+36Aj
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+81h], 0
		jmp	short loc_68F44714
; ---------------------------------------------------------------------------

loc_68F44727:				; CODE XREF: sub_68F443A0+AFj
					; sub_68F443A0+ECj
		mov	eax, [ebp+var_18]
		cmp	[eax+90h], esi
		jz	short loc_68F4473C
		mov	eax, 0Eh
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F4473C:				; CODE XREF: sub_68F443A0+390j
		mov	[eax+120h], ebx
		mov	eax, 0Eh
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F4474C:				; CODE XREF: sub_68F443A0+298j
		mov	edx, [ebp+var_18]
		cmp	[edx+90h], esi
		jz	short loc_68F447BF
		mov	eax, 10h
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F44761:				; CODE XREF: sub_68F443A0+28Dj
		mov	eax, [ebp+var_18]
		cmp	[eax+90h], esi
		jz	short loc_68F447AF
		mov	eax, 0Fh
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F44776:				; CODE XREF: sub_68F443A0+282j
		mov	ecx, [ebp+var_18]
		cmp	[ecx+90h], esi
		jz	short loc_68F4479F
		mov	eax, 0Ch
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F4478B:				; CODE XREF: sub_68F443A0+278j
		mov	eax, 18h
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F44795:				; CODE XREF: sub_68F443A0+26Ej
		mov	eax, 0Bh
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F4479F:				; CODE XREF: sub_68F443A0+3DFj
		mov	[ecx+120h], ebx
		mov	eax, 0Ch
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F447AF:				; CODE XREF: sub_68F443A0+3CAj
		mov	[eax+120h], ebx
		mov	eax, 0Fh
		jmp	loc_68F444F2
; ---------------------------------------------------------------------------

loc_68F447BF:				; CODE XREF: sub_68F443A0+3B5j
		mov	[edx+120h], ebx
		mov	eax, 10h
		jmp	loc_68F444F2
sub_68F443A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F447D0	proc near		; CODE XREF: sub_68F44F00+189p
					; sub_68F468F0+B7Fp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_5		= byte ptr -5
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_C]
		movzx	ecx, [ebp+arg_0]
		mov	[esp+18h+var_C], ebx
		mov	[ebp+var_5], cl
		mov	ecx, [ebp+arg_8]
		mov	[esp+18h+var_10], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+18h+var_14], ecx
		movzx	ecx, [ebp+var_5]
		mov	[esp+18h+var_18], ecx
		call	sub_68F443A0
		test	eax, eax
		mov	edx, eax
		jnz	short loc_68F4481B
		cmp	[ebp+var_5], 0
		jz	short loc_68F44823
		mov	eax, [ebx+0Ch]

loc_68F4480E:				; CODE XREF: sub_68F447D0+59j
					; sub_68F447D0+5Fj ...
		cmp	eax, [ebx+8]
		jz	short loc_68F44837

loc_68F44813:				; CODE XREF: sub_68F447D0+7Aj
		mov	byte ptr [eax],	0
		xor	edx, edx
		inc	dword ptr [ebx+0Ch]

loc_68F4481B:				; CODE XREF: sub_68F447D0+33j
					; sub_68F447D0+75j
		add	esp, 14h
		mov	eax, edx
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F44823:				; CODE XREF: sub_68F447D0+39j
		mov	eax, [ebx+0Ch]
		cmp	eax, [ebx+10h]
		jz	short loc_68F4480E
		cmp	byte ptr [eax-1], 20h
		jnz	short loc_68F4480E
		dec	eax
		mov	[ebx+0Ch], eax
		jmp	short loc_68F4480E
; ---------------------------------------------------------------------------

loc_68F44837:				; CODE XREF: sub_68F447D0+41j
		mov	eax, ebx
		call	sub_68F42600
		test	al, al
		mov	edx, 1
		jz	short loc_68F4481B
		mov	eax, [ebx+0Ch]
		jmp	short loc_68F44813
sub_68F447D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F44850	proc near		; CODE XREF: sub_68F44850+2B5p
					; sub_68F44C10+8Ap ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_18], eax
		mov	edx, [ebp+var_18]
		mov	[ebp+var_24], 0
		mov	eax, [eax+164h]
		mov	edx, [edx+114h]
		mov	[ebp+var_1C], eax
		add	eax, 68h
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_18]
		mov	[ebp+var_28], edx
		mov	edx, 1
		mov	[eax+114h], edx
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+68h]
		test	eax, eax
		jz	loc_68F44AB0

loc_68F4489F:				; CODE XREF: sub_68F44850+99j
					; sub_68F44850+1B8j ...
		lea	eax, [ebp+var_10]
		mov	[esp+48h+var_3C], eax
		mov	edx, [ebp+arg_4]
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		mov	[esp+48h+var_40], edx
		call	dword ptr [esi+14h]
		add	eax, 4		; switch 33 cases
		cmp	eax, 20h
		ja	short loc_68F448F0 ; jumptable 68F448BF	default	case
		jmp	ds:off_68F57998[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F448C6:				; CODE XREF: sub_68F44850+6Fj
					; DATA XREF: .rdata:off_68F57998o
		mov	eax, [esi+44h]	; jumptable 68F448BF case -3
		add	ebx, eax
		mov	[ebp+var_10], ebx

loc_68F448CE:				; CODE XREF: sub_68F44850+6Fj
					; DATA XREF: .rdata:off_68F57998o
		mov	eax, [ebp+var_20] ; jumptable 68F448BF case 7
		mov	edx, [eax+0Ch]
		cmp	[eax+8], edx
		jz	loc_68F44ACF

loc_68F448DD:				; CODE XREF: sub_68F44850+28Ej
		mov	byte ptr [edx],	0Ah
		mov	edx, [ebp+var_20]
		inc	dword ptr [edx+0Ch]

loc_68F448E6:				; CODE XREF: sub_68F44850+1EFj
					; sub_68F44850+219j ...
		mov	ebx, [ebp+var_10]
		jmp	short loc_68F4489F
; ---------------------------------------------------------------------------
		align 10h

loc_68F448F0:				; CODE XREF: sub_68F44850+6Dj
					; sub_68F44850+6Fj
					; DATA XREF: ...
		mov	eax, [ebp+var_18] ; jumptable 68F448BF default case
		cmp	[eax+90h], esi
		jz	loc_68F44B21

loc_68F448FF:				; CODE XREF: sub_68F44850+2D7j
		mov	[ebp+var_24], 17h
		jmp	short loc_68F44930
; ---------------------------------------------------------------------------

loc_68F44908:				; CODE XREF: sub_68F44850+6Fj
					; DATA XREF: .rdata:off_68F57998o
		mov	eax, [ebp+var_18] ; jumptable 68F448BF case 0
		cmp	[eax+90h], esi
		jz	loc_68F44B2C

loc_68F44917:				; CODE XREF: sub_68F44850+109j
					; sub_68F44850+111j ...
		mov	[ebp+var_24], 4
		jmp	short loc_68F44930
; ---------------------------------------------------------------------------

loc_68F44920:				; CODE XREF: sub_68F44850+6Fj
					; DATA XREF: .rdata:off_68F57998o
		mov	[ebp+var_24], 0	; jumptable 68F448BF case -4
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F44930:				; CODE XREF: sub_68F44850+B6j
					; sub_68F44850+CEj ...
		mov	eax, [ebp+var_28]
		mov	edx, [ebp+var_18]
		mov	[edx+114h], eax
		mov	edx, [ebp+var_24]
		add	esp, 3Ch
		pop	ebx
		mov	eax, edx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F44950:				; CODE XREF: sub_68F44850+6Fj
					; DATA XREF: .rdata:off_68F57998o
		mov	edx, [ebp+var_18] ; jumptable 68F448BF case -1
		cmp	[edx+90h], esi
		jnz	short loc_68F44917
		mov	[edx+120h], ebx
		jmp	short loc_68F44917
; ---------------------------------------------------------------------------

loc_68F44963:				; CODE XREF: sub_68F44850+6Fj
					; DATA XREF: .rdata:off_68F57998o
		mov	eax, [ebp+var_18] ; jumptable 68F448BF case 28
		cmp	byte ptr [eax+1E8h], 0
		jnz	short loc_68F4497B
		cmp	[eax+90h], esi
		jz	loc_68F44BD4

loc_68F4497B:				; CODE XREF: sub_68F44850+11Dj
		mov	ecx, [esi+44h]
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+var_18]
		sub	edx, ecx
		add	eax, 1A0h
		add	ecx, ebx
		mov	[esp+48h+var_44], edx
		mov	edx, esi
		mov	[esp+48h+var_48], ecx
		call	sub_68F42EC0
		test	eax, eax
		mov	edx, eax
		jz	loc_68F44AA4
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], 0
		add	eax, 84h
		call	sub_68F43DE0
		mov	edx, [ebp+var_18]
		mov	edi, eax
		test	edi, edi
		mov	eax, [edx+1B0h]
		mov	[edx+1ACh], eax
		jz	loc_68F44BAB
		cmp	byte ptr [edi+20h], 0
		jnz	loc_68F44BC0
		mov	eax, [edi+10h]
		test	eax, eax
		jz	loc_68F44AE3
		mov	eax, [ebp+var_18]
		mov	eax, [eax+70h]
		test	eax, eax
		jnz	loc_68F44B3D
		mov	edx, [ebp+var_1C]

loc_68F449F8:				; CODE XREF: sub_68F44850+336j
		movzx	eax, byte ptr [edx+82h]
		mov	[edx+80h], al
		mov	ebx, [ebp+var_10]
		jmp	loc_68F4489F
; ---------------------------------------------------------------------------
		align 10h

loc_68F44A10:				; CODE XREF: sub_68F44850+6Fj
					; DATA XREF: .rdata:off_68F57998o
		mov	[esp+48h+var_44], ebx ;	jumptable 68F448BF case	10
		mov	[esp+48h+var_48], esi
		call	dword ptr [esi+2Ch]
		test	eax, eax
		js	loc_68F44B94
		mov	[esp+48h+var_48], eax
		lea	edx, [ebp+var_14]
		mov	[esp+48h+var_44], edx
		call	sub_68F53880
		test	eax, eax
		mov	edi, eax
		jz	loc_68F44B94
		xor	ebx, ebx
		cmp	ebx, eax
		jge	loc_68F448E6
		mov	eax, [ebp+var_20]
		mov	edx, [eax+0Ch]
		jmp	short loc_68F44A6F
; ---------------------------------------------------------------------------
		align 10h

loc_68F44A50:				; CODE XREF: sub_68F44850+225j
					; sub_68F44850+236j
		movzx	eax, byte ptr [ebx+ebp-14h]
		inc	ebx
		mov	[edx], al
		mov	edx, [ebp+var_20]
		mov	eax, [edx+0Ch]
		inc	eax
		mov	edx, eax
		mov	eax, [ebp+var_20]
		cmp	ebx, edi
		mov	[eax+0Ch], edx
		jge	loc_68F448E6

loc_68F44A6F:				; CODE XREF: sub_68F44850+1FBj
		mov	eax, [ebp+var_20]
		cmp	[eax+8], edx
		jnz	short loc_68F44A50
		call	sub_68F42600
		test	al, al
		jz	short loc_68F44AA4
		mov	eax, [ebp+var_20]
		mov	edx, [eax+0Ch]
		jmp	short loc_68F44A50
; ---------------------------------------------------------------------------

loc_68F44A88:				; CODE XREF: sub_68F44850+6Fj
					; DATA XREF: .rdata:off_68F57998o
		mov	eax, [ebp+var_10] ; jumptable 68F448BF cases 6,9
		mov	[esp+48h+var_48], ebx
		mov	edx, esi
		mov	[esp+48h+var_44], eax
		mov	eax, [ebp+var_20]
		call	sub_68F42E40
		test	eax, eax
		jnz	loc_68F448E6

loc_68F44AA4:				; CODE XREF: sub_68F44850+14Fj
					; sub_68F44850+22Ej ...
		mov	[ebp+var_24], 1
		jmp	loc_68F44930
; ---------------------------------------------------------------------------

loc_68F44AB0:				; CODE XREF: sub_68F44850+49j
		mov	eax, [ebp+var_20]
		call	sub_68F42600
		test	al, al
		mov	edx, 1
		jnz	loc_68F4489F
		add	esp, 3Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F44ACF:				; CODE XREF: sub_68F44850+87j
		call	sub_68F42600
		test	al, al
		jz	short loc_68F44AA4
		mov	eax, [ebp+var_20]
		mov	edx, [eax+0Ch]
		jmp	loc_68F448DD
; ---------------------------------------------------------------------------

loc_68F44AE3:				; CODE XREF: sub_68F44850+191j
		mov	byte ptr [edi+20h], 1
		mov	ecx, [edi+4]
		mov	eax, [ebp+var_18]
		mov	edx, [eax+0E4h]
		mov	eax, [edi+8]
		add	eax, ecx
		mov	[esp+48h+var_44], eax
		mov	eax, [edi+4]
		mov	[esp+48h+var_48], eax
		mov	eax, [ebp+var_18]
		call	sub_68F44850
		mov	[ebp+var_24], eax
		test	eax, eax
		mov	byte ptr [edi+20h], 0
		jnz	loc_68F44930
		mov	ebx, [ebp+var_10]
		jmp	loc_68F4489F
; ---------------------------------------------------------------------------

loc_68F44B21:				; CODE XREF: sub_68F44850+A9j
		mov	[eax+120h], ebx
		jmp	loc_68F448FF
; ---------------------------------------------------------------------------

loc_68F44B2C:				; CODE XREF: sub_68F44850+C1j
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_18]
		mov	[edx+120h], eax
		jmp	loc_68F44917
; ---------------------------------------------------------------------------

loc_68F44B3D:				; CODE XREF: sub_68F44850+19Fj
		mov	edx, [ebp+var_1C]
		xor	ebx, ebx
		mov	byte ptr [edx+83h], 0
		mov	eax, [edi+18h]
		mov	byte ptr [edi+20h], 1
		mov	[esp+48h+var_38], eax
		mov	eax, [edi+10h]
		mov	[esp+48h+var_3C], eax
		mov	eax, [edi+14h]
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_40], eax
		mov	edx, [ebp+var_18]
		mov	eax, [edx+74h]
		mov	[esp+48h+var_48], eax
		call	dword ptr [edx+70h]
		test	eax, eax
		jz	short loc_68F44BF1
		mov	byte ptr [edi+20h], 0
		mov	eax, [ebp+var_1C]
		mov	edx, eax
		cmp	byte ptr [eax+83h], 0
		jz	loc_68F449F8
		mov	ebx, [ebp+var_10]
		jmp	loc_68F4489F
; ---------------------------------------------------------------------------

loc_68F44B94:				; CODE XREF: sub_68F44850+1CCj
					; sub_68F44850+1E5j
		mov	eax, [ebp+var_18]
		cmp	[eax+90h], esi
		jz	short loc_68F44BE9

loc_68F44B9F:				; CODE XREF: sub_68F44850+39Fj
		mov	[ebp+var_24], 0Eh
		jmp	loc_68F44930
; ---------------------------------------------------------------------------

loc_68F44BAB:				; CODE XREF: sub_68F44850+17Cj
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+82h]
		mov	[edx+80h], al
		jmp	loc_68F44930
; ---------------------------------------------------------------------------

loc_68F44BC0:				; CODE XREF: sub_68F44850+186j
		cmp	[edx+90h], esi
		jz	short loc_68F44C01

loc_68F44BC8:				; CODE XREF: sub_68F44850+3B7j
		mov	[ebp+var_24], 0Ch
		jmp	loc_68F44930
; ---------------------------------------------------------------------------

loc_68F44BD4:				; CODE XREF: sub_68F44850+125j
		mov	[ebp+var_24], 0Ah
		mov	edx, [ebp+var_18]
		mov	[edx+120h], ebx
		jmp	loc_68F44930
; ---------------------------------------------------------------------------

loc_68F44BE9:				; CODE XREF: sub_68F44850+34Dj
		mov	[eax+120h], ebx
		jmp	short loc_68F44B9F
; ---------------------------------------------------------------------------

loc_68F44BF1:				; CODE XREF: sub_68F44850+324j
		mov	byte ptr [edi+20h], 0
		mov	[ebp+var_24], 15h
		jmp	loc_68F44930
; ---------------------------------------------------------------------------

loc_68F44C01:				; CODE XREF: sub_68F44850+376j
		mov	[edx+120h], ebx
		jmp	short loc_68F44BC8
sub_68F44850	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F44C10	proc near		; CODE XREF: sub_68F44CC0+E5p
					; DATA XREF: sub_68F44CC0+C3o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		lea	esi, [ebp+var_10]
		push	ebx
		sub	esp, 1Ch
		mov	edi, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	ebx, [edi+90h]
		mov	[ebp+var_10], eax
		jmp	short loc_68F44C33
; ---------------------------------------------------------------------------
		align 10h

loc_68F44C30:				; CODE XREF: sub_68F44C10+3Bj
		mov	eax, [ebp+var_10]

loc_68F44C33:				; CODE XREF: sub_68F44C10+1Bj
		mov	[esp+28h+var_1C], esi
		mov	edx, [ebp+arg_8]
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], ebx
		mov	[esp+28h+var_20], edx
		call	dword ptr [ebx]
		test	eax, eax
		mov	ecx, eax
		jg	short loc_68F44C30
		cmp	byte ptr [edi+1E4h], 0
		setz	al
		xor	edx, edx
		test	ecx, ecx
		setnz	dl
		test	edx, eax
		jz	short loc_68F44C74
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+arg_4]
		mov	[eax], edx
		xor	eax, eax

loc_68F44C6C:				; CODE XREF: sub_68F44C10+6Cj
					; sub_68F44C10:loc_68F44C87j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F44C74:				; CODE XREF: sub_68F44C10+50j
		cmp	ecx, 0FFFFFFFFh
		mov	eax, 5
		jz	short loc_68F44C6C
		jle	short loc_68F44CA7
		mov	eax, 4
		test	ecx, ecx

loc_68F44C87:				; CODE XREF: sub_68F44C10+9Fj
		jz	short loc_68F44C6C
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_24], eax
		mov	edx, [ebp+arg_4]
		mov	eax, edi
		mov	[esp+28h+var_28], edx
		mov	edx, ebx
		call	sub_68F44850
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F44CA7:				; CODE XREF: sub_68F44C10+6Ej
		mov	eax, 6
		cmp	ecx, 0FFFFFFFEh
		jmp	short loc_68F44C87
sub_68F44C10	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F44CC0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F44CC0	proc near		; CODE XREF: .text:68F44CB1j
					; sub_68F49ED0+66j
					; DATA XREF: ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		lea	edi, [ebp+var_10]
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edx, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		mov	esi, edx
		mov	[ebp+var_10], edx
		mov	[ebx+120h], edx
		jmp	short loc_68F44CE8
; ---------------------------------------------------------------------------
		align 10h

loc_68F44CE0:				; CODE XREF: sub_68F44CC0+59j
					; sub_68F44CC0+5Ej ...
		mov	[ebx+120h], edx
		mov	esi, edx

loc_68F44CE8:				; CODE XREF: sub_68F44CC0+1Dj
		mov	eax, [ebx+90h]
		mov	[esp+28h+var_1C], edi
		mov	ecx, [ebp+arg_8]
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], eax
		mov	[esp+28h+var_20], ecx
		call	dword ptr [eax]
		mov	edx, [ebp+var_10]
		test	eax, eax
		mov	ecx, eax
		mov	[ebx+124h], edx
		jle	short loc_68F44D38
		cmp	eax, 0Ch
		jz	short loc_68F44D57
		cmp	eax, 0Eh
		jnz	short loc_68F44CE0
		cmp	edx, [ebp+arg_8]
		jnz	short loc_68F44CE0
		cmp	byte ptr [ebx+1E4h], 0
		jnz	short loc_68F44CE0
		mov	ecx, [ebp+arg_C]
		mov	[ecx], edx

loc_68F44D2E:				; CODE XREF: sub_68F44CC0+95j
					; sub_68F44CC0+139j
		xor	eax, eax

loc_68F44D30:				; CODE XREF: sub_68F44CC0+A9j
					; sub_68F44CC0+B9j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F44D38:				; CODE XREF: sub_68F44CC0+4Fj
		cmp	byte ptr [ebx+1E4h], 0
		setz	al
		xor	edx, edx
		test	ecx, ecx
		setnz	dl
		test	edx, eax
		jz	short loc_68F44DB2
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		jmp	short loc_68F44D2E
; ---------------------------------------------------------------------------

loc_68F44D57:				; CODE XREF: sub_68F44CC0+54j
		mov	[esp+28h+var_24], edx
		mov	eax, ebx
		xor	edx, edx
		mov	[esp+28h+var_28], esi
		call	sub_68F42F20
		test	eax, eax
		jnz	short loc_68F44D30
		mov	edx, [ebx+1E0h]
		mov	eax, 23h
		cmp	edx, 2
		jz	short loc_68F44D30
		cmp	edx, 3
		jz	short loc_68F44DF1
		mov	eax, [ebp+var_10]
		mov	esi, offset sub_68F44C10
		mov	ecx, [ebp+arg_C]
		mov	[ebx+118h], esi
		mov	[ecx], eax
		mov	[esp+28h+var_1C], ecx
		mov	edx, [ebp+arg_8]
		mov	[esp+28h+var_28], ebx
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_20], edx
		call	sub_68F44C10
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F44DB2:				; CODE XREF: sub_68F44CC0+8Bj
		cmp	ecx, 0FFFFFFFFh
		mov	eax, 5
		jz	loc_68F44D30
		jle	short loc_68F44DFE
		mov	eax, 4
		test	ecx, ecx

loc_68F44DC9:				; CODE XREF: sub_68F44CC0+146j
		jz	loc_68F44D30
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebx+90h]
		mov	[esp+28h+var_24], ecx
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_28], eax
		mov	eax, ebx
		call	sub_68F44850
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F44DF1:				; CODE XREF: sub_68F44CC0+BEj
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		jmp	loc_68F44D2E
; ---------------------------------------------------------------------------

loc_68F44DFE:				; CODE XREF: sub_68F44CC0+100j
		mov	eax, 6
		cmp	ecx, 0FFFFFFFEh
		jmp	short loc_68F44DC9
sub_68F44CC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F44E10	proc near		; CODE XREF: sub_68F44F00+733p
					; sub_68F45960+74p

var_18		= dword	ptr -18h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	edi, [edx]
		mov	[ebp+var_10], edx
		mov	esi, [eax+164h]
		movzx	eax, byte ptr [edi]
		test	al, al
		jz	short loc_68F44E3C
		nop
		lea	esi, [esi+0]

loc_68F44E30:				; CODE XREF: sub_68F44E10+2Aj
		cmp	al, 3Ah
		jz	short loc_68F44E50
		inc	edi

loc_68F44E35:				; CODE XREF: sub_68F44E10+C2j
		movzx	eax, byte ptr [edi]
		test	al, al
		jnz	short loc_68F44E30

loc_68F44E3C:				; CODE XREF: sub_68F44E10+19j
		mov	eax, 1

loc_68F44E41:				; CODE XREF: sub_68F44E10+AFj
					; sub_68F44E10+E7j
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F44E50:				; CODE XREF: sub_68F44E10+22j
		mov	eax, [ebp+var_10]
		mov	ebx, [eax]
		cmp	ebx, edi
		jz	loc_68F44EF0
		mov	edx, [esi+5Ch]
		jmp	short loc_68F44E73
; ---------------------------------------------------------------------------

loc_68F44E62:				; CODE XREF: sub_68F44E10+66j
		movzx	eax, byte ptr [ebx]
		inc	ebx
		mov	[edx], al
		mov	edx, [esi+5Ch]
		inc	edx
		mov	[esi+5Ch], edx
		cmp	ebx, edi
		jz	short loc_68F44EA0

loc_68F44E73:				; CODE XREF: sub_68F44E10+50j
					; sub_68F44E10+86j
		cmp	edx, [esi+58h]
		jnz	short loc_68F44E62
		lea	eax, [esi+50h]
		call	sub_68F42600
		test	al, al
		jz	short loc_68F44EF5
		movzx	eax, byte ptr [ebx]
		inc	ebx
		mov	edx, [esi+5Ch]
		mov	[edx], al
		mov	edx, [esi+5Ch]
		inc	edx
		mov	[esi+5Ch], edx
		cmp	ebx, edi
		jnz	short loc_68F44E73
		nop
		lea	esi, [esi+0]

loc_68F44EA0:				; CODE XREF: sub_68F44E10+61j
					; sub_68F44E10+E3j
		cmp	edx, [esi+58h]
		jz	short loc_68F44ED7

loc_68F44EA5:				; CODE XREF: sub_68F44E10+D6j
		mov	byte ptr [edx],	0
		lea	eax, [esi+3Ch]
		mov	edx, [esi+60h]
		inc	dword ptr [esi+5Ch]
		mov	[esp+18h+var_18], 8
		call	sub_68F43DE0
		test	eax, eax
		jz	short loc_68F44E41
		mov	edx, [esi+60h]
		cmp	[eax], edx
		jz	short loc_68F44EE8
		mov	[esi+5Ch], edx

loc_68F44ECB:				; CODE XREF: sub_68F44E10+DEj
		mov	edx, [ebp+var_10]
		inc	edi
		mov	[edx+4], eax
		jmp	loc_68F44E35
; ---------------------------------------------------------------------------

loc_68F44ED7:				; CODE XREF: sub_68F44E10+93j
		lea	eax, [esi+50h]
		call	sub_68F42600
		test	al, al
		jz	short loc_68F44EF5
		mov	edx, [esi+5Ch]
		jmp	short loc_68F44EA5
; ---------------------------------------------------------------------------

loc_68F44EE8:				; CODE XREF: sub_68F44E10+B6j
		mov	edx, [esi+5Ch]
		mov	[esi+60h], edx
		jmp	short loc_68F44ECB
; ---------------------------------------------------------------------------

loc_68F44EF0:				; CODE XREF: sub_68F44E10+47j
		mov	edx, [esi+5Ch]
		jmp	short loc_68F44EA0
; ---------------------------------------------------------------------------

loc_68F44EF5:				; CODE XREF: sub_68F44E10+72j
					; sub_68F44E10+D1j
		xor	eax, eax
		jmp	loc_68F44E41
sub_68F44E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F44F00	proc near		; CODE XREF: sub_68F486C0+2BBp
					; sub_68F486C0+36Dp

Dst		= dword	ptr -88h
Src		= dword	ptr -84h
Size		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_52		= byte ptr -52h
var_51		= byte ptr -51h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_39		= byte ptr -39h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, eax
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	eax, [eax+164h]
		mov	[ebp+var_10], edx
		mov	[ebp+var_24], 0
		mov	ebx, eax
		add	ebx, 14h
		mov	[ebp+var_14], eax
		mov	eax, ebx
		mov	[ebp+var_38], 0
		mov	[esp+88h+Dst], 0
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		call	sub_68F43DE0
		mov	[ebp+var_18], eax
		test	eax, eax
		jz	loc_68F455E5

loc_68F44F48:				; CODE XREF: sub_68F44F00+729j
					; sub_68F44F00+745j
		mov	ebx, [ebp+var_18]
		mov	eax, [edi+188h]
		mov	ebx, [ebx+0Ch]
		mov	[ebp+var_1C], ebx
		mov	[esp+88h+var_7C], eax
		mov	eax, [edi+17Ch]
		mov	[esp+88h+Size],	eax
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+Src], eax
		mov	edx, [ebp+var_10]
		mov	[esp+88h+Dst], edx
		call	dword ptr [edx+28h]
		mov	esi, [edi+17Ch]
		mov	[ebp+var_30], eax
		add	eax, ebx
		cmp	eax, esi
		jg	loc_68F45226

loc_68F44F88:				; CODE XREF: sub_68F44F00+377j
		mov	ebx, [edi+188h]

loc_68F44F8E:				; CODE XREF: sub_68F44F00+356j
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+var_30]
		cmp	[ebp+var_2C], eax
		mov	[ebp+var_20], ebx
		mov	[ebp+var_70], 0
		jge	loc_68F450FA
		nop
		lea	esi, [esi+0]

loc_68F44FB0:				; CODE XREF: sub_68F44F00+1E3j
		mov	edx, [ebp+var_70]
		mov	eax, [edx+ebx]
		mov	[esp+88h+Src], eax
		mov	ecx, [ebp+var_10]
		mov	[esp+88h+Dst], ecx
		call	dword ptr [ecx+20h]
		mov	edx, [ebp+var_70]
		mov	esi, [edx+ebx]
		add	eax, esi
		mov	[esp+88h+Src], eax
		mov	eax, [edi+188h]
		mov	eax, [edx+eax]
		mov	[esp+88h+Dst], eax
		mov	edx, [ebp+var_10]
		mov	eax, edi
		call	sub_68F441C0
		test	eax, eax
		mov	esi, eax
		jz	loc_68F451D9
		mov	eax, [eax]
		cmp	byte ptr [eax-1], 0
		jnz	loc_68F4564A
		mov	byte ptr [eax-1], 1
		mov	edx, [ebp+var_24]
		mov	eax, [esi]
		mov	ecx, [ebp+var_20]
		mov	ebx, [edi+188h]
		mov	[ecx+edx*4], eax
		mov	eax, [ebp+var_70]
		inc	edx
		mov	[ebp+var_24], edx
		cmp	byte ptr [eax+ebx+0Ch],	0
		jnz	loc_68F451A8
		mov	[ebp+var_39], 1
		cmp	byte ptr [esi+8], 0
		jz	short loc_68F45060
		xor	edx, edx
		cmp	edx, [ebp+var_1C]
		jge	short loc_68F45060
		mov	ecx, [ebp+var_18]
		mov	eax, [ecx+14h]
		xor	ecx, ecx
		mov	[ebp+var_64], eax
		xchg	ax, ax

loc_68F45040:				; CODE XREF: sub_68F44F00+152j
		cmp	[eax], esi
		jz	loc_68F45216
		inc	edx
		add	ecx, 0Ch
		add	eax, 0Ch
		cmp	edx, [ebp+var_1C]
		jl	short loc_68F45040
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F45060:				; CODE XREF: sub_68F44F00+12Aj
					; sub_68F44F00+131j ...
		lea	eax, [edi+1A0h]
		mov	[esp+88h+var_7C], eax
		mov	edx, [ebp+var_70]
		mov	eax, [edx+ebx+8]
		mov	[esp+88h+Size],	eax
		mov	eax, [edx+ebx+4]
		mov	[esp+88h+Src], eax
		movzx	eax, [ebp+var_39]
		mov	[esp+88h+Dst], eax
		mov	edx, [ebp+var_10]
		mov	eax, edi
		call	sub_68F447D0
		test	eax, eax
		jnz	loc_68F4568A
		mov	eax, [edi+1B0h]
		mov	ecx, [ebp+var_24]
		mov	ebx, [ebp+var_20]
		mov	[ebx+ecx*4], eax

loc_68F450A5:				; CODE XREF: sub_68F44F00+2D3j
		mov	edx, [esi+4]
		mov	eax, [edi+1ACh]
		test	edx, edx
		mov	[edi+1B0h], eax
		jz	short loc_68F450E8
		cmp	byte ptr [esi+9], 0
		jnz	loc_68F451E8
		inc	[ebp+var_24]
		mov	eax, [esi]
		inc	[ebp+var_38]
		mov	byte ptr [eax-1], 2

loc_68F450CE:				; CODE XREF: sub_68F44F00+311j
		inc	[ebp+var_2C]
		mov	eax, [ebp+var_30]
		add	[ebp+var_70], 10h
		cmp	[ebp+var_2C], eax
		jge	short loc_68F450FA

loc_68F450DD:				; CODE XREF: sub_68F44F00+1F8j
		mov	ebx, [edi+188h]
		jmp	loc_68F44FB0
; ---------------------------------------------------------------------------

loc_68F450E8:				; CODE XREF: sub_68F44F00+1B6j
		inc	[ebp+var_2C]
		mov	eax, [ebp+var_30]
		inc	[ebp+var_24]
		add	[ebp+var_70], 10h
		cmp	[ebp+var_2C], eax
		jl	short loc_68F450DD

loc_68F450FA:				; CODE XREF: sub_68F44F00+A5j
					; sub_68F44F00+1DBj
		mov	ecx, [ebp+var_18]
		mov	edx, [ebp+var_24]
		mov	eax, [ecx+8]
		mov	[edi+180h], edx
		test	eax, eax
		jz	short loc_68F45119
		mov	eax, [eax]
		cmp	byte ptr [eax-1], 0
		jnz	loc_68F4527C

loc_68F45119:				; CODE XREF: sub_68F44F00+20Bj
		mov	ecx, 0FFFFFFFFh

loc_68F4511E:				; CODE XREF: sub_68F44F00+A4Cj
		mov	[edi+184h], ecx

loc_68F45124:				; CODE XREF: sub_68F44F00+386j
		mov	[ebp+var_2C], 0
		mov	ebx, [ebp+var_1C]
		cmp	[ebp+var_2C], ebx
		jge	loc_68F452BB

loc_68F45137:				; CODE XREF: sub_68F44F00+3B5j
		xor	esi, esi
		jmp	short loc_68F45182
; ---------------------------------------------------------------------------

loc_68F4513B:				; CODE XREF: sub_68F44F00+2A0j
		cmp	byte ptr [eax+9], 0
		jnz	loc_68F45668
		mov	byte ptr [ecx-1], 2
		inc	[ebp+var_38]

loc_68F4514C:				; CODE XREF: sub_68F44F00+2A6j
		mov	eax, [ebx]
		mov	edx, [ebp+var_24]
		mov	ecx, [ebp+var_20]
		mov	eax, [eax]
		mov	[ecx+edx*4], eax
		mov	eax, [ebx+8]
		inc	edx
		mov	[ecx+edx*4], eax
		inc	edx
		mov	[ebp+var_24], edx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F45170:				; CODE XREF: sub_68F44F00+292j
					; sub_68F44F00+299j ...
		inc	[ebp+var_2C]
		add	esi, 0Ch
		mov	ebx, [ebp+var_1C]
		cmp	[ebp+var_2C], ebx
		jge	loc_68F452BB

loc_68F45182:				; CODE XREF: sub_68F44F00+239j
		mov	eax, [ebp+var_18]
		mov	ebx, [eax+14h]
		add	ebx, esi
		mov	eax, [ebx]
		mov	ecx, [eax]
		cmp	byte ptr [ecx-1], 0
		jnz	short loc_68F45170
		mov	edx, [ebx+8]
		test	edx, edx
		jz	short loc_68F45170
		mov	edx, [eax+4]
		test	edx, edx
		jnz	short loc_68F4513B
		mov	byte ptr [ecx-1], 1
		jmp	short loc_68F4514C
; ---------------------------------------------------------------------------

loc_68F451A8:				; CODE XREF: sub_68F44F00+11Cj
		mov	edx, [ebp+var_70]
		mov	eax, [edx+ebx+8]
		mov	[esp+88h+Src], eax
		mov	eax, [edx+ebx+4]
		mov	[esp+88h+Dst], eax
		mov	edx, [ebp+var_10]
		lea	eax, [edi+1A0h]
		call	sub_68F42EC0
		mov	ecx, [ebp+var_24]
		test	eax, eax
		mov	ebx, [ebp+var_20]
		mov	[ebx+ecx*4], eax
		jnz	loc_68F450A5

loc_68F451D9:				; CODE XREF: sub_68F44F00+E9j
					; sub_68F44F00+572j ...
		mov	edx, 1

loc_68F451DE:				; CODE XREF: sub_68F44F00+349j
					; sub_68F44F00+459j ...
		add	esp, 7Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F451E8:				; CODE XREF: sub_68F44F00+1BCj
		mov	eax, [ebp+arg_8]
		mov	[esp+88h+Size],	eax ; int
		mov	ecx, [ebp+var_24]
		mov	ebx, [ebp+var_20]
		mov	eax, [ebx+ecx*4]
		mov	[esp+88h+Dst], esi ; int
		mov	[esp+88h+Src], eax ; void *
		mov	eax, edi
		call	sub_68F42370
		test	eax, eax
		jnz	loc_68F4568A
		dec	[ebp+var_24]
		jmp	loc_68F450CE
; ---------------------------------------------------------------------------

loc_68F45216:				; CODE XREF: sub_68F44F00+142j
		mov	eax, [ebp+var_64]
		movzx	ecx, byte ptr [ecx+eax+4]
		mov	[ebp+var_39], cl
		jmp	loc_68F45060
; ---------------------------------------------------------------------------

loc_68F45226:				; CODE XREF: sub_68F44F00+82j
		add	eax, 10h
		mov	[edi+17Ch], eax
		shl	eax, 4
		mov	[esp+88h+Src], eax
		mov	eax, [edi+188h]
		mov	[esp+88h+Dst], eax
		call	dword ptr [edi+10h]
		mov	edx, 1
		test	eax, eax
		jz	short loc_68F451DE
		cmp	[ebp+var_30], esi
		mov	ebx, eax
		mov	[edi+188h], eax
		jle	loc_68F44F8E
		mov	[esp+88h+var_7C], eax
		mov	ecx, [ebp+var_30]
		mov	[esp+88h+Size],	ecx
		mov	ebx, [ebp+arg_0]
		mov	[esp+88h+Src], ebx
		mov	eax, [ebp+var_10]
		mov	[esp+88h+Dst], eax
		call	dword ptr [eax+28h]
		jmp	loc_68F44F88
; ---------------------------------------------------------------------------

loc_68F4527C:				; CODE XREF: sub_68F44F00+213j
		mov	[ebp+var_2C], 0
		cmp	[ebp+var_2C], edx
		jge	loc_68F45124

loc_68F4528C:				; CODE XREF: sub_68F44F00+3A6j
		mov	ebx, [ebp+var_2C]
		mov	edx, [ebp+var_20]
		cmp	[edx+ebx*4], eax
		jz	loc_68F45949
		mov	ecx, [ebp+var_24]
		add	ebx, 2
		mov	[ebp+var_2C], ebx
		cmp	ebx, ecx
		jl	short loc_68F4528C
		mov	[ebp+var_2C], 0
		mov	ebx, [ebp+var_1C]
		cmp	[ebp+var_2C], ebx
		jl	loc_68F45137

loc_68F452BB:				; CODE XREF: sub_68F44F00+231j
					; sub_68F44F00+27Cj
		mov	[ebp+var_2C], 0
		mov	ebx, [ebp+var_38]
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+var_20]
		test	ebx, ebx
		mov	dword ptr [edx+eax*4], 0
		jz	loc_68F4553F
		mov	ecx, [edi+190h]
		mov	eax, [ebp+var_38]
		mov	[ebp+var_44], ecx
		add	eax, eax
		movzx	edx, byte ptr [edi+194h]
		mov	[ebp+var_48], 1
		movzx	ecx, dl
		sar	eax, cl
		shl	[ebp+var_48], cl
		test	eax, eax
		jz	loc_68F45696
		jmp	short loc_68F4530A
; ---------------------------------------------------------------------------

loc_68F45308:				; CODE XREF: sub_68F44F00+41Bj
		mov	dl, cl

loc_68F4530A:				; CODE XREF: sub_68F44F00+406j
		mov	eax, [ebp+var_38]
		mov	cl, dl
		sar	eax, cl
		inc	cl
		test	eax, eax
		mov	[edi+194h], cl
		jnz	short loc_68F45308
		cmp	cl, 2
		mov	dl, cl
		ja	short loc_68F4532D
		mov	byte ptr [edi+194h], 3
		mov	dl, 3

loc_68F4532D:				; CODE XREF: sub_68F44F00+422j
		mov	[ebp+var_48], 1
		mov	cl, dl
		shl	[ebp+var_48], cl
		mov	ebx, [ebp+var_48]
		lea	eax, [ebx+ebx*2]
		shl	eax, 2
		mov	[esp+88h+Src], eax
		mov	eax, [edi+18Ch]
		mov	[esp+88h+Dst], eax
		call	dword ptr [edi+10h]
		mov	edx, 1
		test	eax, eax
		jz	loc_68F451DE
		mov	[edi+18Ch], eax

loc_68F45365:				; CODE XREF: sub_68F44F00+7A1j
		mov	[ebp+var_44], 0FFFFFFFFh
		mov	eax, [ebp+var_48]
		test	eax, eax
		mov	[ebp+var_40], eax
		jz	short loc_68F45392
		mov	edx, [edi+18Ch]
		lea	eax, [eax+eax*2]
		shl	eax, 2
		add	eax, edx

loc_68F45384:				; CODE XREF: sub_68F44F00+490j
		sub	eax, 0Ch
		dec	[ebp+var_40]
		mov	dword ptr [eax], 0FFFFFFFFh
		jnz	short loc_68F45384

loc_68F45392:				; CODE XREF: sub_68F44F00+474j
					; sub_68F44F00+79Bj
		dec	[ebp+var_44]
		mov	ecx, [ebp+var_24]
		cmp	[ebp+var_2C], ecx
		mov	edx, [ebp+var_44]
		mov	[edi+190h], edx
		jge	loc_68F45561
		mov	ebx, [ebp+var_48]
		dec	ebx
		mov	[ebp+var_6C], ebx
		jmp	short loc_68F453C7
; ---------------------------------------------------------------------------

loc_68F453B3:				; CODE XREF: sub_68F44F00+4D4j
		mov	byte ptr [ebx-1], 0

loc_68F453B7:				; CODE XREF: sub_68F44F00+635j
		add	[ebp+var_2C], 2
		mov	ebx, [ebp+var_24]
		cmp	[ebp+var_2C], ebx
		jge	loc_68F45561

loc_68F453C7:				; CODE XREF: sub_68F44F00+4B1j
		mov	eax, [ebp+var_2C]
		mov	edx, [ebp+var_20]
		mov	ebx, [edx+eax*4]
		cmp	byte ptr [ebx-1], 2
		jnz	short loc_68F453B3
		mov	[ebp+var_50], 0
		mov	edx, ebx
		mov	byte ptr [ebx-1], 0
		mov	[esp+88h+Dst], 0
		mov	ecx, [ebp+var_14]
		lea	eax, [ecx+28h]
		call	sub_68F43DE0
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		test	eax, eax
		mov	[ebp+var_4C], eax
		jz	loc_68F45951
		mov	[ebp+var_40], 0
		mov	esi, [eax+14h]
		test	esi, esi
		jle	short loc_68F45480
		mov	esi, [edi+1ACh]
		jmp	short loc_68F4544D
; ---------------------------------------------------------------------------

loc_68F4541C:				; CODE XREF: sub_68F44F00+563j
					; sub_68F44F00+57Ej
		movzx	eax, [ebp+var_51]
		mov	[esi], al
		mov	esi, [edi+1ACh]
		imul	edx, [ebp+var_50], 0F4243h
		movzx	eax, [ebp+var_51]
		inc	esi
		inc	[ebp+var_40]
		mov	[edi+1ACh], esi
		xor	edx, eax
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_50], edx
		mov	ecx, [ebp+var_40]
		cmp	[eax+14h], ecx
		jle	short loc_68F45486

loc_68F4544D:				; CODE XREF: sub_68F44F00+51Aj
		cmp	esi, [edi+1A8h]
		mov	edx, [ebp+var_4C]
		mov	ecx, [ebp+var_40]
		mov	eax, [edx+10h]
		movzx	eax, byte ptr [ecx+eax]
		mov	[ebp+var_51], al
		jnz	short loc_68F4541C
		lea	eax, [edi+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F451D9
		mov	esi, [edi+1ACh]
		jmp	short loc_68F4541C
; ---------------------------------------------------------------------------

loc_68F45480:				; CODE XREF: sub_68F44F00+512j
		mov	esi, [edi+1ACh]

loc_68F45486:				; CODE XREF: sub_68F44F00+54Bj
					; sub_68F44F00+594j
		movzx	eax, byte ptr [ebx]
		inc	ebx
		cmp	al, 3Ah
		jz	short loc_68F454C9
		movzx	eax, byte ptr [ebx]
		inc	ebx
		cmp	al, 3Ah
		jnz	short loc_68F45486
		jmp	short loc_68F454C9
; ---------------------------------------------------------------------------

loc_68F45498:				; CODE XREF: sub_68F44F00+5D7j
					; sub_68F44F00+5F5j
		mov	[esi], al
		mov	ecx, [edi+1ACh]
		imul	eax, [ebp+var_50], 0F4243h
		inc	ecx
		mov	esi, ecx
		mov	[ebp+var_58], ecx
		mov	[ebp+var_50], eax
		movzx	eax, [ebp+var_52]
		mov	[edi+1ACh], ecx
		xor	[ebp+var_50], eax
		movzx	eax, byte ptr [ebx]
		inc	ebx
		test	al, al
		jz	loc_68F456A6

loc_68F454C9:				; CODE XREF: sub_68F44F00+58Cj
					; sub_68F44F00+596j
		movzx	edx, byte ptr [ebx]
		cmp	esi, [edi+1A8h]
		mov	al, dl
		mov	[ebp+var_52], dl
		jnz	short loc_68F45498
		lea	eax, [edi+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F451D9
		movzx	eax, byte ptr [ebx]
		mov	esi, [edi+1ACh]
		jmp	short loc_68F45498
; ---------------------------------------------------------------------------

loc_68F454F7:				; CODE XREF: sub_68F44F00+80Cj
		mov	ecx, [edi+18Ch]
		mov	[ebp+var_68], ecx

loc_68F45500:				; CODE XREF: sub_68F44F00+7D2j
		mov	ebx, [edi+1B0h]
		mov	[edi+1B0h], esi
		mov	eax, [ebp+var_2C]
		mov	edx, [ebp+var_20]
		mov	ecx, [ebp+var_40]
		mov	[edx+eax*4], ebx
		mov	edx, [ebp+var_68]
		lea	eax, [ecx+ecx*2]
		mov	ecx, [ebp+var_44]
		shl	eax, 2
		dec	[ebp+var_38]
		mov	[eax+edx+8], ebx
		mov	[eax+edx], ecx
		mov	ecx, [ebp+var_50]
		mov	[eax+edx+4], ecx
		jnz	loc_68F453B7
		add	[ebp+var_2C], 2

loc_68F4553F:				; CODE XREF: sub_68F44F00+3D4j
		mov	eax, [ebp+var_24]
		cmp	[ebp+var_2C], eax
		jmp	short loc_68F4555F
; ---------------------------------------------------------------------------

loc_68F45547:				; CODE XREF: sub_68F44F00:loc_68F4555Fj
		mov	edx, [ebp+var_2C]
		mov	ecx, [ebp+var_20]
		mov	eax, [ecx+edx*4]
		add	edx, 2
		mov	byte ptr [eax-1], 0
		mov	ebx, [ebp+var_24]
		mov	[ebp+var_2C], edx
		cmp	edx, ebx

loc_68F4555F:				; CODE XREF: sub_68F44F00+645j
		jl	short loc_68F45547

loc_68F45561:				; CODE XREF: sub_68F44F00+4A4j
					; sub_68F44F00+4C1j
		mov	eax, [ebp+arg_8]
		mov	ebx, [eax]
		jmp	short loc_68F45574
; ---------------------------------------------------------------------------

loc_68F45568:				; CODE XREF: sub_68F44F00+676j
		mov	eax, [ebx+0Ch]
		mov	eax, [eax]
		mov	byte ptr [eax-1], 0
		mov	ebx, [ebx+4]

loc_68F45574:				; CODE XREF: sub_68F44F00+666j
		test	ebx, ebx
		jnz	short loc_68F45568
		xor	edx, edx
		cmp	byte ptr [edi+0ECh], 0
		jz	loc_68F451DE
		mov	edx, [ebp+var_18]
		mov	eax, [edx+4]
		test	eax, eax
		jz	loc_68F45735
		mov	ebx, [eax+4]
		mov	edx, 1Bh
		test	ebx, ebx
		jz	loc_68F451DE
		mov	ecx, [ebp+arg_4]
		mov	esi, [ecx]

loc_68F455AA:				; CODE XREF: sub_68F44F00+6B0j
		movzx	eax, byte ptr [esi]
		inc	esi
		cmp	al, 3Ah
		jnz	short loc_68F455AA

loc_68F455B2:				; CODE XREF: sub_68F44F00+84Fj
		mov	[ebp+var_28], 0
		cmp	byte ptr [edi+0EDh], 0
		jz	loc_68F45754
		mov	ecx, [ebx]
		mov	eax, [ecx]
		test	eax, eax
		jz	loc_68F45756
		mov	edx, eax

loc_68F455D4:				; CODE XREF: sub_68F44F00+6DEj
		mov	eax, [ebp+var_28]
		inc	[ebp+var_28]
		cmp	byte ptr [eax+edx], 0
		jnz	short loc_68F455D4
		jmp	loc_68F45756
; ---------------------------------------------------------------------------

loc_68F455E5:				; CODE XREF: sub_68F44F00+42j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+var_14]
		mov	edx, [ecx]
		add	eax, 50h
		call	sub_68F427A0
		test	eax, eax
		mov	edx, 1
		jz	loc_68F451DE
		mov	[esp+88h+Dst], 18h
		mov	edx, eax
		mov	eax, ebx
		call	sub_68F43DE0
		mov	[ebp+var_18], eax
		test	eax, eax
		mov	edx, 1
		jz	loc_68F451DE
		cmp	byte ptr [edi+0ECh], 0
		jz	loc_68F44F48
		mov	edx, eax
		mov	eax, edi
		call	sub_68F44E10
		test	eax, eax
		mov	edx, 1
		jz	loc_68F451DE
		jmp	loc_68F44F48
; ---------------------------------------------------------------------------

loc_68F4564A:				; CODE XREF: sub_68F44F00+F5j
		mov	ecx, [ebp+var_10]
		cmp	[edi+90h], ecx
		jz	loc_68F457E0
		mov	edx, 8

loc_68F4565E:				; CODE XREF: sub_68F44F00+8F7j
					; sub_68F44F00+983j ...
		add	esp, 7Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F45668:				; CODE XREF: sub_68F44F00+23Fj
		mov	ecx, [ebp+arg_8]
		mov	[esp+88h+Size],	ecx ; int
		mov	eax, [ebx+8]
		mov	[esp+88h+Src], eax ; void *
		mov	eax, [ebx]
		mov	[esp+88h+Dst], eax ; int
		mov	eax, edi
		call	sub_68F42370
		test	eax, eax
		jz	loc_68F45170

loc_68F4568A:				; CODE XREF: sub_68F44F00+190j
					; sub_68F44F00+308j
		add	esp, 7Ch
		mov	edx, eax
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F45696:				; CODE XREF: sub_68F44F00+400j
		mov	ecx, [ebp+var_44]
		test	ecx, ecx
		jnz	loc_68F45392
		jmp	loc_68F45365
; ---------------------------------------------------------------------------

loc_68F456A6:				; CODE XREF: sub_68F44F00+5C3j
		mov	ebx, [ebp+var_6C]
		xor	edx, edx
		mov	ecx, [ebp+var_50]
		and	ecx, ebx
		mov	ebx, [edi+18Ch]
		lea	eax, [ecx+ecx*2]
		mov	[ebp+var_40], ecx
		mov	ecx, [ebp+var_44]
		cmp	[ebx+eax*4], ecx
		mov	[ebp+var_68], ebx
		jz	loc_68F457FC

loc_68F456CB:				; CODE XREF: sub_68F44F00+922j
		cmp	byte ptr [edi+0EDh], 0
		jz	loc_68F45500
		movzx	eax, byte ptr [edi+1D8h]
		mov	ebx, [ebp+var_58]
		mov	[ebx-1], al
		mov	edx, [ebp+var_4C]
		mov	esi, [edi+1ACh]
		mov	eax, [edx]
		mov	ebx, [eax]
		jmp	short loc_68F45712
; ---------------------------------------------------------------------------

loc_68F456F4:				; CODE XREF: sub_68F44F00+818j
					; sub_68F44F00+833j
		movzx	eax, byte ptr [ebx]
		mov	[esi], al
		mov	esi, [edi+1ACh]
		inc	esi
		mov	[edi+1ACh], esi
		movzx	eax, byte ptr [ebx]
		inc	ebx
		test	al, al
		jz	loc_68F454F7

loc_68F45712:				; CODE XREF: sub_68F44F00+7F2j
		cmp	esi, [edi+1A8h]
		jnz	short loc_68F456F4
		lea	eax, [edi+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F451D9
		mov	esi, [edi+1ACh]
		jmp	short loc_68F456F4
; ---------------------------------------------------------------------------

loc_68F45735:				; CODE XREF: sub_68F44F00+68Fj
		mov	ebx, [ebp+var_14]
		xor	edx, edx
		mov	eax, [ebx+9Ch]
		test	eax, eax
		jz	loc_68F451DE
		mov	ebx, eax
		mov	eax, [ebp+arg_4]
		mov	esi, [eax]
		jmp	loc_68F455B2
; ---------------------------------------------------------------------------

loc_68F45754:				; CODE XREF: sub_68F44F00+6C0j
		mov	ecx, [ebx]

loc_68F45756:				; CODE XREF: sub_68F44F00+6CCj
					; sub_68F44F00+6E0j
		mov	[ebp+var_2C], 0
		mov	edx, [ebp+arg_4]
		mov	eax, [ebx+14h]
		mov	[edx+4], esi
		mov	[edx+10h], eax
		mov	eax, [ecx]
		mov	ecx, [ebp+var_28]
		mov	[edx+8], eax
		mov	[edx+14h], ecx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F45780:				; CODE XREF: sub_68F44F00+88Aj
		mov	eax, [ebp+var_2C]
		inc	[ebp+var_2C]
		cmp	byte ptr [eax+esi], 0
		jnz	short loc_68F45780
		mov	ecx, [ebp+var_2C]
		mov	edx, [ebx+14h]
		lea	eax, [edx+ecx]
		mov	ecx, [ebp+var_28]
		add	eax, ecx
		cmp	[ebx+18h], eax
		mov	[ebp+var_30], eax
		jl	loc_68F458A4
		mov	ecx, [ebx+10h]

loc_68F457A9:				; CODE XREF: sub_68F44F00+A44j
		mov	eax, [ebp+var_2C]
		add	ecx, edx
		mov	[ebp+var_34], ecx
		mov	[esp+88h+Src], esi ; Src
		mov	[esp+88h+Size],	eax ; Size
		mov	[esp+88h+Dst], ecx ; Dst
		call	memcpy
		mov	eax, [ebp+var_28]
		test	eax, eax
		jnz	loc_68F45904

loc_68F457CC:				; CODE XREF: sub_68F44F00+A2Dj
		mov	eax, [ebx+10h]
		xor	edx, edx
		mov	ebx, [ebp+arg_4]
		mov	[ebx], eax
		add	esp, 7Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F457E0:				; CODE XREF: sub_68F44F00+753j
		mov	eax, [edi+188h]
		mov	edx, 8
		mov	ebx, [ebp+var_70]
		mov	eax, [ebx+eax]
		mov	[edi+120h], eax
		jmp	loc_68F4565E
; ---------------------------------------------------------------------------

loc_68F457FC:				; CODE XREF: sub_68F44F00+7C5j
		mov	ebx, [ebp+var_6C]
		mov	ecx, [ebp+var_50]
		not	ebx
		and	ebx, ecx
		mov	[ebp+var_5C], ebx
		jmp	short loc_68F45828
; ---------------------------------------------------------------------------

loc_68F4580B:				; CODE XREF: sub_68F44F00+95Cj
		mov	ebx, [ebp+var_48]
		sub	ebx, eax
		add	[ebp+var_40], ebx

loc_68F45813:				; CODE XREF: sub_68F44F00+961j
		mov	ecx, [ebp+var_40]
		mov	ebx, [ebp+var_68]
		lea	eax, [ecx+ecx*2]
		mov	ecx, [ebp+var_44]
		cmp	[ebx+eax*4], ecx
		jnz	loc_68F456CB

loc_68F45828:				; CODE XREF: sub_68F44F00+909j
		mov	ebx, [ebp+var_68]
		shl	eax, 2
		mov	ecx, [ebp+var_50]
		mov	[ebp+var_74], eax
		cmp	[eax+ebx+4], ecx
		jz	short loc_68F45863

loc_68F4583A:				; CODE XREF: sub_68F44F00+97Cj
		test	dl, dl
		jnz	short loc_68F45856
		movzx	ecx, byte ptr [edi+194h]
		mov	edx, [ebp+var_5C]
		mov	eax, [ebp+var_6C]
		dec	ecx
		shr	edx, cl
		shr	eax, 2
		and	dl, al
		or	dl, 1

loc_68F45856:				; CODE XREF: sub_68F44F00+93Cj
		movzx	eax, dl
		cmp	eax, [ebp+var_40]
		jg	short loc_68F4580B
		sub	[ebp+var_40], eax
		jmp	short loc_68F45813
; ---------------------------------------------------------------------------

loc_68F45863:				; CODE XREF: sub_68F44F00+938j
		mov	ecx, [ebp+var_68]
		mov	ebx, [edi+1B0h]
		mov	ecx, [eax+ecx+8]
		mov	[ebp+var_78], ecx
		movzx	eax, byte ptr [ebx]
		cmp	al, [ecx]
		jz	short loc_68F45896

loc_68F4587A:				; CODE XREF: sub_68F44F00+994j
		test	al, al
		jnz	short loc_68F4583A
		mov	edx, 8
		jmp	loc_68F4565E
; ---------------------------------------------------------------------------

loc_68F45888:				; CODE XREF: sub_68F44F00+998j
		inc	[ebp+var_78]
		inc	ebx
		mov	ecx, [ebp+var_78]
		movzx	eax, byte ptr [ebx]
		cmp	al, [ecx]
		jnz	short loc_68F4587A

loc_68F45896:				; CODE XREF: sub_68F44F00+978j
		test	al, al
		jnz	short loc_68F45888
		mov	edx, 8
		jmp	loc_68F4565E
; ---------------------------------------------------------------------------

loc_68F458A4:				; CODE XREF: sub_68F44F00+8A0j
		add	eax, 18h
		mov	[ebp+var_60], eax
		mov	[esp+88h+Dst], eax
		call	dword ptr [edi+0Ch]
		mov	edx, 1
		test	eax, eax
		mov	[ebp+var_34], eax
		jz	loc_68F451DE
		mov	eax, [ebp+var_60]
		mov	edx, [ebx+10h]
		mov	[ebx+18h], eax
		mov	eax, [ebx+14h]
		mov	[esp+88h+Src], edx ; Src
		mov	[esp+88h+Size],	eax ; Size
		mov	edx, [ebp+var_34]
		mov	[esp+88h+Dst], edx ; Dst
		call	memcpy
		mov	eax, [edi+16Ch]
		test	eax, eax
		jz	short loc_68F45932
		mov	ecx, [ebx+10h]
		jmp	short loc_68F458F4
; ---------------------------------------------------------------------------

loc_68F458EE:				; CODE XREF: sub_68F44F00+9F7j
					; sub_68F44F00+A02j
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_68F45935

loc_68F458F4:				; CODE XREF: sub_68F44F00+9ECj
		cmp	[eax+0Ch], ecx
		jnz	short loc_68F458EE
		mov	ecx, [ebp+var_34]
		mov	[eax+0Ch], ecx
		mov	ecx, [ebx+10h]
		jmp	short loc_68F458EE
; ---------------------------------------------------------------------------

loc_68F45904:				; CODE XREF: sub_68F44F00+8C6j
		mov	eax, [ebp+var_2C]
		mov	edx, [ebp+var_34]
		add	edx, eax
		movzx	eax, byte ptr [edi+1D8h]
		mov	[edx-1], al
		mov	eax, [ebx]
		mov	ecx, [ebp+var_28]
		mov	eax, [eax]
		mov	[esp+88h+Size],	ecx ; Size
		mov	[esp+88h+Dst], edx ; Dst
		mov	[esp+88h+Src], eax ; Src
		call	memcpy
		jmp	loc_68F457CC
; ---------------------------------------------------------------------------

loc_68F45932:				; CODE XREF: sub_68F44F00+9E7j
		mov	ecx, [ebx+10h]

loc_68F45935:				; CODE XREF: sub_68F44F00+9F2j
		mov	[esp+88h+Dst], ecx
		call	dword ptr [edi+14h]
		mov	ecx, [ebp+var_34]
		mov	edx, [ebx+14h]
		mov	[ebx+10h], ecx
		jmp	loc_68F457A9
; ---------------------------------------------------------------------------

loc_68F45949:				; CODE XREF: sub_68F44F00+395j
		mov	ecx, [ebp+var_2C]
		jmp	loc_68F4511E
; ---------------------------------------------------------------------------

loc_68F45951:				; CODE XREF: sub_68F44F00+500j
		mov	edx, 1Bh
		jmp	loc_68F451DE
sub_68F44F00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F45960	proc near		; CODE XREF: sub_68F468F0+4C5p
					; sub_68F468F0+E6Fp ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_C], ebx
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	edi, [eax+164h]
		mov	[esp+18h+var_14], ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_10], eax
		lea	eax, [edi+50h]
		mov	[esp+18h+var_18], ecx
		call	sub_68F42EC0
		xor	edx, edx
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68F459BA
		mov	[esp+18h+var_18], 18h
		mov	edx, ebx
		lea	eax, [edi+14h]
		call	sub_68F43DE0
		xor	edx, edx
		test	eax, eax
		mov	esi, eax
		jz	short loc_68F459BA
		cmp	[eax], ebx
		jz	short loc_68F459C9
		mov	eax, [edi+60h]
		mov	[edi+5Ch], eax

loc_68F459B8:				; CODE XREF: sub_68F45960+7Dj
		mov	edx, esi

loc_68F459BA:				; CODE XREF: sub_68F45960+33j
					; sub_68F45960+4Cj ...
		mov	ebx, [ebp+var_C]
		mov	eax, edx
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F459C9:				; CODE XREF: sub_68F45960+50j
		mov	eax, [edi+5Ch]
		mov	edx, esi
		mov	[edi+60h], eax
		mov	eax, [ebp+var_10]
		call	sub_68F44E10
		xor	edx, edx
		test	eax, eax
		jnz	short loc_68F459B8
		jmp	short loc_68F459BA
sub_68F45960	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F459F0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F459F0	proc near		; CODE XREF: .text:68F459E1j
					; XML_ExternalEntityParserCreate+5F5p ...

var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, edx
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_18]
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		call	sub_68F437D0
		lea	eax, [ebp+var_18]
		call	sub_68F437F0
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	loc_68F45B0B
		lea	esi, [esi+0]

loc_68F45A30:				; CODE XREF: sub_68F459F0+115j
		mov	edx, [eax]
		mov	eax, edi
		call	sub_68F427A0
		test	eax, eax
		jz	loc_68F45B10
		mov	[esp+38h+var_38], 24h
		mov	edx, eax
		mov	eax, [ebp+var_1C]
		call	sub_68F43DE0
		mov	[ebp+var_28], eax
		test	eax, eax
		jz	loc_68F45B10
		mov	eax, [ebp+var_2C]
		mov	edx, [eax+10h]
		test	edx, edx
		jnz	loc_68F45B18
		mov	edx, [edi+0Ch]
		mov	eax, [ebp+var_2C]
		test	edx, edx
		mov	esi, [eax+4]
		mov	ebx, [eax+8]
		jnz	short loc_68F45A8E
		jmp	loc_68F45B94
; ---------------------------------------------------------------------------

loc_68F45A80:				; CODE XREF: sub_68F459F0+A5j
					; sub_68F459F0+B9j
		movzx	eax, byte ptr [esi]
		dec	ebx
		inc	esi
		mov	[edx], al
		mov	edx, [edi+0Ch]
		inc	edx
		mov	[edi+0Ch], edx

loc_68F45A8E:				; CODE XREF: sub_68F459F0+89j
					; sub_68F459F0+1B2j
		test	ebx, ebx
		jle	short loc_68F45AB0
		cmp	edx, [edi+8]
		jnz	short loc_68F45A80
		mov	eax, edi
		call	sub_68F42600
		test	al, al
		jz	loc_68F45BB2
		mov	edx, [edi+0Ch]
		jmp	short loc_68F45A80
; ---------------------------------------------------------------------------
		align 10h

loc_68F45AB0:				; CODE XREF: sub_68F459F0+A0j
		mov	esi, [edi+10h]
		mov	[edi+10h], edx
		test	esi, esi
		jz	loc_68F45BB2
		mov	edx, [ebp+var_28]
		mov	[edx+4], esi
		mov	edx, [ebp+var_2C]
		mov	eax, [edx+8]
		mov	edx, [ebp+var_28]
		mov	[edx+8], eax

loc_68F45AD0:				; CODE XREF: sub_68F459F0+169j
		mov	eax, [ebp+var_2C]
		mov	edx, [eax+1Ch]
		test	edx, edx
		jnz	loc_68F45B7E

loc_68F45ADE:				; CODE XREF: sub_68F459F0+188j
					; sub_68F459F0+19Fj
		mov	edx, [ebp+var_2C]
		movzx	eax, byte ptr [edx+21h]
		mov	edx, [ebp+var_28]
		mov	[edx+21h], al
		mov	edx, [ebp+var_2C]
		movzx	eax, byte ptr [edx+22h]
		mov	edx, [ebp+var_28]
		mov	[edx+22h], al
		lea	eax, [ebp+var_18]
		call	sub_68F437F0
		mov	[ebp+var_2C], eax
		test	eax, eax
		jnz	loc_68F45A30

loc_68F45B0B:				; CODE XREF: sub_68F459F0+34j
		mov	eax, 1

loc_68F45B10:				; CODE XREF: sub_68F459F0+4Bj
					; sub_68F459F0+67j ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F45B18:				; CODE XREF: sub_68F459F0+75j
		mov	eax, edi
		call	sub_68F427A0
		test	eax, eax
		jz	short loc_68F45B10
		mov	edx, [ebp+var_28]
		mov	[edx+10h], eax
		mov	edx, [ebp+var_2C]
		mov	eax, [edx+14h]
		test	eax, eax
		jz	short loc_68F45B51
		cmp	eax, [ebp+var_20]
		jz	short loc_68F45BA7
		mov	[ebp+var_20], eax
		mov	edx, eax
		mov	eax, edi
		call	sub_68F427A0
		test	eax, eax
		jz	short loc_68F45B10
		mov	[ebp+var_24], eax
		mov	edx, [ebp+var_28]
		mov	[edx+14h], eax

loc_68F45B51:				; CODE XREF: sub_68F459F0+141j
					; sub_68F459F0+1C0j
		mov	eax, [ebp+var_2C]
		mov	edx, [eax+18h]
		test	edx, edx
		jz	loc_68F45AD0
		mov	eax, edi
		call	sub_68F427A0
		test	eax, eax
		jz	short loc_68F45B10
		mov	edx, [ebp+var_28]
		mov	[edx+18h], eax
		mov	eax, [ebp+var_2C]
		mov	edx, [eax+1Ch]
		test	edx, edx
		jz	loc_68F45ADE

loc_68F45B7E:				; CODE XREF: sub_68F459F0+E8j
		mov	eax, edi
		call	sub_68F427A0
		test	eax, eax
		jz	short loc_68F45B10
		mov	edx, [ebp+var_28]
		mov	[edx+1Ch], eax
		jmp	loc_68F45ADE
; ---------------------------------------------------------------------------

loc_68F45B94:				; CODE XREF: sub_68F459F0+8Bj
		mov	eax, edi
		call	sub_68F42600
		test	al, al
		jz	short loc_68F45BB2
		mov	edx, [edi+0Ch]
		jmp	loc_68F45A8E
; ---------------------------------------------------------------------------

loc_68F45BA7:				; CODE XREF: sub_68F459F0+146j
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_28]
		mov	[eax+14h], edx
		jmp	short loc_68F45B51
; ---------------------------------------------------------------------------

loc_68F45BB2:				; CODE XREF: sub_68F459F0+B0j
					; sub_68F459F0+C8j ...
		add	esp, 2Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F459F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F45BC0	proc near		; CODE XREF: XML_ExternalEntityParserCreate+6B7p
					; XML_ParserReset+1D4p	...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, edx
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 1Ch
		mov	eax, [eax+164h]
		mov	[ebp+var_14], edx
		mov	[ebp+var_10], eax
		cmp	byte ptr [edx],	0
		jz	short loc_68F45C5C
		mov	ebx, [esi+1ACh]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F45BF0:				; CODE XREF: sub_68F45BC0+9Aj
		mov	edx, [ebp+var_14]
		movzx	ecx, byte ptr [edx]
		cmp	cl, 0Ch
		setz	al
		test	cl, cl
		setz	dl
		or	eax, edx
		test	al, 1
		jz	short loc_68F45C70
		cmp	ebx, [esi+1A8h]
		jz	loc_68F45C97

loc_68F45C13:				; CODE XREF: sub_68F45BC0+F0j
		mov	byte ptr [ebx],	0
		mov	edx, [esi+1B0h]
		mov	[esp+28h+var_28], 0
		mov	eax, [ebp+var_10]
		inc	dword ptr [esi+1ACh]
		call	sub_68F43DE0
		test	eax, eax
		jz	short loc_68F45C39
		mov	byte ptr [eax+20h], 1

loc_68F45C39:				; CODE XREF: sub_68F45BC0+73j
		mov	ecx, [ebp+var_14]
		mov	ebx, [esi+1B0h]
		movzx	eax, byte ptr [ecx]
		mov	[esi+1ACh], ebx
		cmp	al, 1
		sbb	ecx, 0FFFFFFFFh
		mov	edi, ecx
		mov	[ebp+var_14], ecx

loc_68F45C55:				; CODE XREF: sub_68F45BC0+D5j
		movzx	eax, byte ptr [edi]

loc_68F45C58:				; CODE XREF: sub_68F45BC0+1EFj
		test	al, al
		jnz	short loc_68F45BF0

loc_68F45C5C:				; CODE XREF: sub_68F45BC0+1Cj
		mov	eax, 1

loc_68F45C61:				; CODE XREF: sub_68F45BC0+133j
					; sub_68F45BC0+288j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F45C70:				; CODE XREF: sub_68F45BC0+45j
		cmp	cl, 3Dh
		jz	short loc_68F45CB5
		cmp	ebx, [esi+1A8h]
		jz	loc_68F45DB4

loc_68F45C81:				; CODE XREF: sub_68F45BC0+213j
		mov	[ebx], cl
		mov	eax, [esi+1ACh]
		inc	[ebp+var_14]
		inc	eax
		mov	ebx, eax
		mov	[esi+1ACh], eax
		jmp	short loc_68F45C55
; ---------------------------------------------------------------------------

loc_68F45C97:				; CODE XREF: sub_68F45BC0+4Dj
		lea	eax, [esi+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F45E59
		mov	ebx, [esi+1ACh]
		jmp	loc_68F45C13
; ---------------------------------------------------------------------------

loc_68F45CB5:				; CODE XREF: sub_68F45BC0+B3j
		cmp	ebx, [esi+1B0h]
		jz	loc_68F45DD8
		cmp	ebx, [esi+1A8h]
		jz	loc_68F45E1C

loc_68F45CCD:				; CODE XREF: sub_68F45BC0+271j
		mov	byte ptr [ebx],	0
		mov	ecx, [ebp+var_10]
		mov	[esp+28h+var_28], 8
		mov	edx, [esi+1B0h]
		inc	dword ptr [esi+1ACh]
		lea	eax, [ecx+3Ch]
		call	sub_68F43DE0
		mov	[ebp+var_18], eax
		test	eax, eax
		jz	loc_68F45C61
		mov	eax, [ebp+var_18]
		mov	edx, [esi+1B0h]
		cmp	[eax], edx
		jz	loc_68F45E36

loc_68F45D0A:				; CODE XREF: sub_68F45BC0+294j
		mov	[esi+1ACh], edx
		mov	ebx, edx

loc_68F45D12:				; CODE XREF: sub_68F45BC0+223j
		mov	ecx, [ebp+var_14]
		mov	edi, [ebp+var_14]
		movzx	eax, byte ptr [ecx+1]
		inc	edi
		jmp	short loc_68F45D42
; ---------------------------------------------------------------------------
		align 10h

loc_68F45D20:				; CODE XREF: sub_68F45BC0+191j
		cmp	ebx, [esi+1A8h]
		jz	loc_68F45E02

loc_68F45D2C:				; CODE XREF: sub_68F45BC0+257j
		movzx	eax, byte ptr [edi]
		inc	edi
		mov	[ebx], al
		mov	ebx, [esi+1ACh]
		inc	ebx
		mov	[esi+1ACh], ebx
		movzx	eax, byte ptr [edi]

loc_68F45D42:				; CODE XREF: sub_68F45BC0+15Dj
		cmp	al, 0Ch
		setnz	dl
		test	al, al
		setnz	al
		movzx	eax, al
		test	eax, edx
		jnz	short loc_68F45D20
		cmp	ebx, [esi+1A8h]
		jz	loc_68F45DE8

loc_68F45D5F:				; CODE XREF: sub_68F45BC0+23Dj
		mov	byte ptr [ebx],	0
		lea	eax, [esi+174h]
		mov	edx, [ebp+var_18]
		inc	dword ptr [esi+1ACh]
		mov	[esp+28h+var_20], eax ;	int
		mov	eax, [esi+1B0h]
		mov	[esp+28h+var_28], 0 ; int
		mov	[esp+28h+var_24], eax ;	void *
		mov	eax, esi
		call	sub_68F42370
		test	eax, eax
		jnz	loc_68F45E59
		mov	ebx, [esi+1B0h]
		mov	[esi+1ACh], ebx
		movzx	eax, byte ptr [edi]
		test	al, al
		jz	short loc_68F45DAC
		inc	edi
		movzx	eax, byte ptr [edi]

loc_68F45DAC:				; CODE XREF: sub_68F45BC0+1E6j
		mov	[ebp+var_14], edi
		jmp	loc_68F45C58
; ---------------------------------------------------------------------------

loc_68F45DB4:				; CODE XREF: sub_68F45BC0+BBj
		lea	eax, [esi+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F45E59
		mov	eax, [ebp+var_14]
		mov	ebx, [esi+1ACh]
		movzx	ecx, byte ptr [eax]
		jmp	loc_68F45C81
; ---------------------------------------------------------------------------

loc_68F45DD8:				; CODE XREF: sub_68F45BC0+FBj
		mov	eax, [ebp+var_10]
		add	eax, 98h
		mov	[ebp+var_18], eax
		jmp	loc_68F45D12
; ---------------------------------------------------------------------------

loc_68F45DE8:				; CODE XREF: sub_68F45BC0+199j
		lea	eax, [esi+1A0h]
		call	sub_68F42600
		test	al, al
		jz	short loc_68F45E59
		mov	ebx, [esi+1ACh]
		jmp	loc_68F45D5F
; ---------------------------------------------------------------------------

loc_68F45E02:				; CODE XREF: sub_68F45BC0+166j
		lea	eax, [esi+1A0h]
		call	sub_68F42600
		test	al, al
		jz	short loc_68F45E59
		mov	ebx, [esi+1ACh]
		jmp	loc_68F45D2C
; ---------------------------------------------------------------------------

loc_68F45E1C:				; CODE XREF: sub_68F45BC0+107j
		lea	eax, [esi+1A0h]
		call	sub_68F42600
		test	al, al
		jz	short loc_68F45E59
		mov	ebx, [esi+1ACh]
		jmp	loc_68F45CCD
; ---------------------------------------------------------------------------

loc_68F45E36:				; CODE XREF: sub_68F45BC0+144j
		mov	ecx, [ebp+var_10]
		lea	eax, [ecx+50h]
		call	sub_68F427A0
		mov	edx, [ebp+var_18]
		test	eax, eax
		mov	[edx], eax
		jz	loc_68F45C61
		mov	edx, [esi+1B0h]
		jmp	loc_68F45D0A
; ---------------------------------------------------------------------------

loc_68F45E59:				; CODE XREF: sub_68F45BC0+E4j
					; sub_68F45BC0+1CFj ...
		xor	eax, eax
		jmp	loc_68F45C61
sub_68F45BC0	endp

; Exported entry   5. XML_ExternalEntityParserCreate

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ExternalEntityParserCreate
XML_ExternalEntityParserCreate proc near

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_89		= byte ptr -89h
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_7D		= byte ptr -7Dh
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_12		= byte ptr -12h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	esi, [ebp+arg_0]
		mov	eax, [esi+164h]
		mov	edx, [esi+34h]
		mov	[ebp+var_24], eax
		mov	eax, [esi+38h]
		mov	[ebp+var_28], edx
		mov	edx, [esi+3Ch]
		mov	[ebp+var_2C], eax
		mov	eax, [esi+40h]
		mov	[ebp+var_30], edx
		mov	edx, [esi+44h]
		mov	[ebp+var_34], eax
		mov	eax, [esi+48h]
		mov	[ebp+var_38], edx
		mov	edx, [esi+4Ch]
		mov	[ebp+var_3C], eax
		mov	eax, [esi+50h]
		mov	[ebp+var_40], edx
		mov	edx, [esi+5Ch]
		mov	[ebp+var_44], eax
		mov	eax, [esi+60h]
		mov	[ebp+var_48], edx
		mov	edx, [esi+64h]
		mov	[ebp+var_4C], eax
		mov	eax, [esi+68h]
		mov	[ebp+var_50], edx
		mov	edx, [esi+6Ch]
		mov	[ebp+var_54], eax
		mov	[ebp+var_58], edx
		mov	eax, [esi+70h]
		mov	edx, [esi+78h]
		mov	ebx, [esi]
		mov	edi, [esi+74h]
		mov	[ebp+var_5C], eax
		mov	eax, [esi+7Ch]
		mov	[ebp+var_60], edx
		mov	edx, [esi+80h]
		mov	[ebp+var_64], eax
		mov	eax, [esi+84h]
		mov	[ebp+var_68], edx
		mov	edx, [esi+88h]
		mov	[ebp+var_6C], eax
		mov	eax, [esi+8Ch]
		mov	[ebp+var_70], edx
		mov	edx, [esi+158h]
		mov	[ebp+var_74], eax
		mov	eax, [esi+4]
		mov	[ebp+var_78], edx
		mov	[ebp+var_7C], eax
		mov	eax, [esi+1ECh]
		movzx	edx, byte ptr [esi+134h]
		mov	[ebp+var_84], eax
		mov	[ebp+var_7D], dl
		mov	edx, [esi+114h]
		mov	[ebp+var_88], edx
		movzx	eax, byte ptr [esi+0EDh]
		mov	[ebp+var_89], al
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	loc_68F46104

loc_68F45F4C:				; CODE XREF: XML_ExternalEntityParserCreate+2A7j
		cmp	byte ptr [esi+0ECh], 0
		jz	loc_68F460F1
		movzx	eax, byte ptr [esi+1D8h]
		lea	edx, [esi+0Ch]
		mov	[ebp+var_12], al
		lea	eax, [ebp+var_12]
		mov	[esp+0B8h+var_B4], ecx
		mov	[esp+0B8h+var_B8], eax

loc_68F45F70:				; CODE XREF: XML_ExternalEntityParserCreate+29Fj
		mov	eax, [ebp+arg_8]
		call	sub_68F43AE0
		mov	esi, eax
		xor	eax, eax
		test	esi, esi
		jz	loc_68F460E6
		mov	edx, [ebp+var_28]
		mov	ecx, [ebp+var_2C]
		mov	eax, [ebp+var_30]
		mov	[esi+34h], edx
		mov	edx, [ebp+var_34]
		mov	[esi+38h], ecx
		mov	ecx, [ebp+var_38]
		mov	[esi+3Ch], eax
		mov	eax, [ebp+var_3C]
		mov	[esi+40h], edx
		mov	edx, [ebp+var_40]
		mov	[esi+44h], ecx
		mov	ecx, [ebp+var_44]
		mov	[esi+48h], eax
		mov	eax, [ebp+var_48]
		mov	[esi+4Ch], edx
		mov	edx, [ebp+var_4C]
		mov	[esi+50h], ecx
		mov	ecx, [ebp+var_50]
		mov	[esi+5Ch], eax
		mov	eax, [ebp+var_54]
		mov	[esi+60h], edx
		mov	edx, [ebp+var_58]
		mov	[esi+64h], ecx
		mov	ecx, [ebp+var_5C]
		mov	[esi+68h], eax
		mov	eax, [ebp+var_60]
		mov	[esi+6Ch], edx
		mov	edx, [ebp+var_64]
		mov	[esi+70h], ecx
		mov	ecx, [ebp+var_68]
		mov	[esi+78h], eax
		mov	[esi+7Ch], edx
		mov	[esi+80h], ecx
		mov	eax, [ebp+var_6C]
		mov	[esi], ebx
		mov	edx, [ebp+var_70]
		mov	ecx, [ebp+var_74]
		cmp	ebx, [ebp+var_7C]
		mov	[esi+84h], eax
		mov	eax, [ebp+var_78]
		mov	[esi+88h], edx
		mov	[esi+8Ch], ecx
		mov	[esi+158h], eax
		jz	loc_68F4610C
		mov	[esi+4], esi

loc_68F4601F:				; CODE XREF: XML_ExternalEntityParserCreate+2AFj
		cmp	edi, [ebp+arg_0]
		jz	short loc_68F46027
		mov	[esi+74h], edi

loc_68F46027:				; CODE XREF: XML_ExternalEntityParserCreate+1C2j
		movzx	edx, [ebp+var_7D]
		mov	[esi+134h], dl
		movzx	ecx, [ebp+var_89]
		mov	[esi+0EDh], cl
		mov	ecx, [ebp+var_88]
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_84]
		mov	[esi+114h], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esi+1DCh], eax
		mov	[esi+1ECh], edx
		test	ecx, ecx
		jz	loc_68F46114
		lea	edx, [esi+0Ch]
		mov	eax, [esi+164h]
		mov	[ebp+var_94], edx
		mov	edx, [ebp+var_24]
		mov	[ebp+var_90], eax
		lea	eax, [ebp+var_20]
		add	edx, 3Ch
		call	sub_68F437D0
		mov	ecx, [ebp+var_90]
		add	ecx, 50h
		mov	[ebp+var_A4], ecx
		lea	esi, [esi+0]

loc_68F460A0:				; CODE XREF: XML_ExternalEntityParserCreate+27Aj
		lea	eax, [ebp+var_20]
		call	sub_68F437F0
		test	eax, eax
		jz	loc_68F46141
		mov	edx, [eax]
		mov	eax, [ebp+var_A4]
		call	sub_68F427A0
		test	eax, eax
		jz	short loc_68F460DC
		mov	[esp+0B8h+var_B8], 8
		mov	edx, eax
		mov	ecx, [ebp+var_90]
		lea	eax, [ecx+3Ch]
		call	sub_68F43DE0
		test	eax, eax
		jnz	short loc_68F460A0

loc_68F460DC:				; CODE XREF: XML_ExternalEntityParserCreate+25Fj
					; XML_ExternalEntityParserCreate+33Fj ...
		mov	[esp+0B8h+var_B8], esi
		call	XML_ParserFree
		xor	eax, eax

loc_68F460E6:				; CODE XREF: XML_ExternalEntityParserCreate+11Ej
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F460F1:				; CODE XREF: XML_ExternalEntityParserCreate+F3j
		mov	[esp+0B8h+var_B4], ecx
		lea	edx, [esi+0Ch]
		mov	[esp+0B8h+var_B8], 0
		jmp	loc_68F45F70
; ---------------------------------------------------------------------------

loc_68F46104:				; CODE XREF: XML_ExternalEntityParserCreate+E6j
		mov	ecx, [ebp+var_24]
		jmp	loc_68F45F4C
; ---------------------------------------------------------------------------

loc_68F4610C:				; CODE XREF: XML_ExternalEntityParserCreate+1B6j
		mov	[esi+4], ebx
		jmp	loc_68F4601F
; ---------------------------------------------------------------------------

loc_68F46114:				; CODE XREF: XML_ExternalEntityParserCreate+204j
		mov	byte ptr [esi+1E8h], 1
		lea	eax, [esi+100h]
		mov	edi, offset sub_68F49ED0
		mov	[esp+0B8h+var_B8], eax
		call	sub_68F55B20
		mov	[esi+118h], edi
		mov	eax, esi

loc_68F46136:				; CODE XREF: XML_ExternalEntityParserCreate+6D1j
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F46141:				; CODE XREF: XML_ExternalEntityParserCreate+24Aj
		mov	edx, [ebp+var_24]
		lea	eax, [ebp+var_20]
		add	edx, 28h
		call	sub_68F437D0
		mov	eax, [ebp+var_90]
		add	eax, 28h
		mov	[ebp+var_AC], eax
		xchg	ax, ax

loc_68F46160:				; CODE XREF: XML_ExternalEntityParserCreate+37Cj
					; XML_ExternalEntityParserCreate+3ABj ...
		lea	eax, [ebp+var_20]
		call	sub_68F437F0
		test	eax, eax
		mov	edi, eax
		jz	loc_68F46244
		mov	edx, [ebp+var_90]
		mov	eax, [edx+5Ch]
		cmp	eax, [edx+58h]
		jz	loc_68F46210

loc_68F46184:				; CODE XREF: XML_ExternalEntityParserCreate+3CCj
		mov	byte ptr [eax],	0
		mov	eax, [ebp+var_90]
		inc	dword ptr [eax+5Ch]
		mov	eax, [ebp+var_A4]
		mov	edx, [edi]
		call	sub_68F427A0
		test	eax, eax
		jz	loc_68F460DC
		mov	edx, [ebp+var_AC]
		inc	eax
		mov	[ebp+var_A8], edx
		mov	edx, eax
		mov	[esp+0B8h+var_B8], 0Ch
		mov	eax, [ebp+var_A8]
		call	sub_68F43DE0
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F460DC
		movzx	eax, byte ptr [edi+8]
		mov	edx, [edi+4]
		test	edx, edx
		mov	[ebx+8], al
		jz	short loc_68F46160
		movzx	eax, byte ptr [edi+9]
		mov	[ebx+9], al
		mov	eax, [ebp+var_24]
		add	eax, 98h
		cmp	edx, eax
		jz	short loc_68F46231
		mov	[esp+0B8h+var_B8], 0
		mov	ecx, [ebp+var_90]
		mov	edx, [edx]
		lea	eax, [ecx+3Ch]
		call	sub_68F43DE0
		mov	[ebx+4], eax
		jmp	loc_68F46160
; ---------------------------------------------------------------------------

loc_68F46210:				; CODE XREF: XML_ExternalEntityParserCreate+31Ej
		mov	eax, [ebp+var_A4]
		call	sub_68F42600
		test	al, al
		jz	loc_68F460DC
		mov	ecx, [ebp+var_90]
		mov	eax, [ecx+5Ch]
		jmp	loc_68F46184
; ---------------------------------------------------------------------------

loc_68F46231:				; CODE XREF: XML_ExternalEntityParserCreate+38Fj
		mov	eax, [ebp+var_90]
		add	eax, 98h
		mov	[ebx+4], eax
		jmp	loc_68F46160
; ---------------------------------------------------------------------------

loc_68F46244:				; CODE XREF: XML_ExternalEntityParserCreate+30Cj
		mov	edx, [ebp+var_24]
		lea	eax, [ebp+var_20]
		add	edx, 14h
		call	sub_68F437D0

loc_68F46252:				; CODE XREF: XML_ExternalEntityParserCreate+48Fj
					; XML_ExternalEntityParserCreate+4D8j
		lea	eax, [ebp+var_20]
		call	sub_68F437F0
		mov	[ebp+var_A0], eax
		test	eax, eax
		jz	loc_68F46443
		mov	edx, [eax]
		mov	eax, [ebp+var_A4]
		call	sub_68F427A0
		test	eax, eax
		jz	loc_68F460DC
		mov	[esp+0B8h+var_B8], 18h
		mov	edx, eax
		mov	ecx, [ebp+var_90]
		lea	eax, [ecx+14h]
		call	sub_68F43DE0
		mov	[ebp+var_9C], eax
		test	eax, eax
		jz	loc_68F460DC
		mov	edx, [ebp+var_A0]
		mov	eax, [edx+0Ch]
		test	eax, eax
		jnz	loc_68F463B9

loc_68F462B3:				; CODE XREF: XML_ExternalEntityParserCreate+577j
		mov	edx, [ebp+var_A0]
		mov	eax, [edx+8]
		test	eax, eax
		jnz	loc_68F4641C

loc_68F462C4:				; CODE XREF: XML_ExternalEntityParserCreate+5DEj
		mov	ecx, [ebp+var_A0]
		mov	edx, [ebp+var_9C]
		mov	eax, [ecx+0Ch]
		mov	[edx+0Ch], eax
		mov	[edx+10h], eax
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	loc_68F463F4

loc_68F462E4:				; CODE XREF: XML_ExternalEntityParserCreate+5B7j
		xor	edx, edx
		cmp	eax, 0
		mov	[ebp+var_98], edx
		jle	loc_68F46252
		mov	eax, [ebp+var_9C]
		xor	edi, edi
		mov	ecx, [ebp+var_90]
		mov	ebx, [eax+14h]
		add	ecx, 28h
		mov	[ebp+var_A8], ecx
		jmp	short loc_68F4633E
; ---------------------------------------------------------------------------

loc_68F46311:				; CODE XREF: XML_ExternalEntityParserCreate+525j
		mov	ecx, [ebp+var_9C]
		xor	eax, eax
		mov	ebx, [ecx+14h]
		mov	[edi+ebx+8], eax

loc_68F46320:				; CODE XREF: XML_ExternalEntityParserCreate+54Ej
		inc	[ebp+var_98]
		add	edi, 0Ch
		mov	eax, [ebp+var_9C]
		mov	edx, [ebp+var_98]
		cmp	[eax+0Ch], edx
		jle	loc_68F46252

loc_68F4633E:				; CODE XREF: XML_ExternalEntityParserCreate+4AFj
		mov	edx, [ebp+var_A0]
		mov	eax, [edx+14h]
		mov	eax, [edi+eax]
		mov	[esp+0B8h+var_B8], 0
		mov	edx, [eax]
		mov	eax, [ebp+var_A8]
		call	sub_68F43DE0
		mov	[edi+ebx], eax
		mov	ecx, [ebp+var_9C]
		mov	edx, [ecx+14h]
		mov	ecx, [ebp+var_A0]
		mov	eax, [ecx+14h]
		movzx	eax, byte ptr [edi+eax+4]
		mov	[edi+edx+4], al
		mov	eax, [ecx+14h]
		mov	edx, [edi+eax+8]
		test	edx, edx
		jz	short loc_68F46311
		mov	eax, [ebp+var_9C]
		mov	ebx, [eax+14h]
		mov	eax, [ebp+var_A4]
		call	sub_68F427A0
		mov	[edi+ebx+8], eax
		mov	edx, [ebp+var_9C]
		mov	ebx, [edx+14h]
		mov	eax, [edi+ebx+8]
		test	eax, eax
		jnz	loc_68F46320
		jmp	loc_68F460DC
; ---------------------------------------------------------------------------

loc_68F463B9:				; CODE XREF: XML_ExternalEntityParserCreate+44Dj
		lea	eax, [eax+eax*2]
		shl	eax, 2
		mov	[esp+0B8h+var_B8], eax
		mov	ecx, [ebp+var_94]
		call	dword ptr [ecx]
		mov	ebx, eax
		mov	eax, [ebp+var_9C]
		test	ebx, ebx
		mov	[eax+14h], ebx
		jnz	loc_68F462B3
		mov	eax, [ebp+var_9C]
		mov	[esp+0B8h+var_B8], eax
		mov	edx, [ebp+var_94]
		call	dword ptr [edx+8]
		jmp	loc_68F460DC
; ---------------------------------------------------------------------------

loc_68F463F4:				; CODE XREF: XML_ExternalEntityParserCreate+47Ej
		mov	[esp+0B8h+var_B8], 0
		mov	ecx, [ebp+var_90]
		mov	edx, [edx]
		lea	eax, [ecx+3Ch]
		call	sub_68F43DE0
		mov	edx, [ebp+var_9C]
		mov	[edx+4], eax
		mov	eax, [edx+0Ch]
		jmp	loc_68F462E4
; ---------------------------------------------------------------------------

loc_68F4641C:				; CODE XREF: XML_ExternalEntityParserCreate+45Ej
		mov	ecx, [ebp+var_90]
		mov	[esp+0B8h+var_B8], 0
		mov	edx, [eax]
		add	ecx, 28h
		mov	eax, ecx
		call	sub_68F43DE0
		mov	edx, [ebp+var_9C]
		mov	[edx+8], eax
		jmp	loc_68F462C4
; ---------------------------------------------------------------------------

loc_68F46443:				; CODE XREF: XML_ExternalEntityParserCreate+402j
		mov	ecx, [ebp+var_24]
		mov	[esp+0B8h+var_B8], ecx
		mov	edx, [ebp+var_A4]
		mov	eax, [ebp+var_90]
		call	sub_68F459F0
		test	eax, eax
		jz	loc_68F460DC
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_90]
		add	edx, 84h
		mov	[esp+0B8h+var_B8], edx
		add	eax, 84h
		mov	edx, [ebp+var_A4]
		call	sub_68F459F0
		test	eax, eax
		jz	loc_68F460DC
		mov	ecx, [ebp+var_24]
		mov	edx, [ebp+var_90]
		movzx	eax, byte ptr [ecx+83h]
		mov	[edx+83h], al
		movzx	eax, byte ptr [ecx+80h]
		mov	[edx+80h], al
		movzx	eax, byte ptr [ecx+81h]
		mov	[edx+81h], al
		movzx	eax, byte ptr [ecx+82h]
		mov	[edx+82h], al
		movzx	eax, byte ptr [ecx+0A0h]
		mov	[edx+0A0h], al
		mov	eax, [ecx+0A4h]
		mov	[edx+0A4h], eax
		mov	eax, [ecx+0A8h]
		mov	[edx+0A8h], eax
		mov	eax, [ecx+0ACh]
		mov	[edx+0ACh], eax
		mov	eax, [ecx+0B4h]
		mov	[edx+0B4h], eax
		mov	eax, [ecx+0B8h]
		mov	[edx+0B8h], eax
		mov	edx, [ebp+arg_4]
		mov	eax, esi
		call	sub_68F45BC0
		test	al, al
		jz	loc_68F460DC
		mov	eax, offset sub_68F49A00
		mov	[esi+118h], eax
		mov	eax, esi
		jmp	loc_68F46136
XML_ExternalEntityParserCreate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  55. XML_ParserReset

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ParserReset
XML_ParserReset	proc near

var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [ebp+arg_0]
		mov	ecx, [edi+1DCh]
		test	ecx, ecx
		jnz	loc_68F4671C
		mov	esi, [edi+16Ch]
		test	esi, esi
		jz	short loc_68F46593
		mov	eax, [edi+170h]
		lea	esi, [esi+0]

loc_68F46570:				; CODE XREF: XML_ParserReset+51j
		mov	ebx, esi
		mov	edx, [ebx+2Ch]
		mov	esi, [esi]
		mov	[ebx], eax
		mov	eax, edi
		call	sub_68F411C0
		mov	dword ptr [ebx+2Ch], 0
		test	esi, esi
		mov	eax, ebx
		mov	[edi+170h], ebx
		jnz	short loc_68F46570

loc_68F46593:				; CODE XREF: XML_ParserReset+24j
		mov	ecx, [edi+12Ch]
		test	ecx, ecx
		jz	short loc_68F465C4
		mov	edx, [edi+130h]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F465B0:				; CODE XREF: XML_ParserReset+82j
		mov	eax, ecx
		mov	ecx, [ecx+8]
		mov	[eax+8], edx
		mov	edx, eax
		test	ecx, ecx
		mov	[edi+130h], eax
		jnz	short loc_68F465B0

loc_68F465C4:				; CODE XREF: XML_ParserReset+5Bj
		mov	edx, [edi+174h]
		mov	eax, edi
		call	sub_68F411C0
		mov	eax, [edi+0F0h]
		mov	[esp+28h+var_28], eax
		call	dword ptr [edi+14h]
		mov	edx, [edi+0FCh]
		test	edx, edx
		jnz	loc_68F46724

loc_68F465EB:				; CODE XREF: XML_ParserReset+1EFj
		lea	eax, [edi+1A0h]
		lea	esi, [edi+0Ch]
		call	sub_68F411F0
		lea	eax, [edi+1B8h]
		call	sub_68F411F0
		mov	edx, [ebp+arg_4]
		mov	eax, edi
		call	sub_68F42860
		mov	ebx, [edi+164h]
		lea	eax, [ebx+14h]
		mov	edx, eax
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_18]
		call	sub_68F437D0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F46630:				; CODE XREF: XML_ParserReset+101j
		lea	eax, [ebp+var_18]
		call	sub_68F437F0
		test	eax, eax
		jz	short loc_68F46658

loc_68F4663C:				; CODE XREF: XML_ParserReset+116j
		mov	edx, [eax+10h]
		test	edx, edx
		jz	short loc_68F46630
		mov	eax, [eax+14h]
		mov	[esp+28h+var_28], eax
		call	dword ptr [esi+8]
		lea	eax, [ebp+var_18]
		call	sub_68F437F0
		test	eax, eax
		jnz	short loc_68F4663C

loc_68F46658:				; CODE XREF: XML_ParserReset+FAj
		mov	eax, ebx
		call	sub_68F43850
		mov	byte ptr [ebx+83h], 0
		lea	eax, [ebx+84h]
		call	sub_68F43850
		mov	eax, [ebp+var_1C]
		call	sub_68F43850
		lea	eax, [ebx+28h]
		call	sub_68F43850
		lea	eax, [ebx+3Ch]
		call	sub_68F43850
		lea	eax, [ebx+50h]
		call	sub_68F411F0
		lea	eax, [ebx+68h]
		call	sub_68F411F0
		mov	byte ptr [ebx+0A0h], 0
		xor	eax, eax
		xor	ecx, ecx
		mov	[ebx+98h], eax
		mov	eax, [ebx+0B8h]
		mov	[ebx+9Ch], ecx
		mov	[esp+28h+var_28], eax
		call	dword ptr [esi+8]
		mov	eax, [ebx+0A4h]
		xor	edx, edx
		mov	[ebx+0B8h], edx
		mov	[esp+28h+var_28], eax
		call	dword ptr [esi+8]
		mov	byte ptr [ebx+80h], 1
		xor	eax, eax
		mov	edx, offset aXmlHttpWww_w3_ ; "xml=http://www.w3.org/XML/1998/namespac"...
		mov	[ebx+0A4h], eax
		xor	eax, eax
		mov	[ebx+0B4h], eax
		xor	eax, eax
		mov	[ebx+0ACh], eax
		xor	eax, eax
		mov	[ebx+0B0h], eax
		xor	eax, eax
		mov	[ebx+0A8h], eax
		mov	eax, edi
		mov	byte ptr [ebx+81h], 0
		mov	byte ptr [ebx+82h], 0
		call	sub_68F45BC0
		movzx	eax, al

loc_68F4671C:				; CODE XREF: XML_ParserReset+16j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F46724:				; CODE XREF: XML_ParserReset+A5j
		mov	eax, [edi+0F4h]
		mov	[esp+28h+var_28], eax
		call	edx
		jmp	loc_68F465EB
XML_ParserReset	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. XML_ParserCreate_MM

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ParserCreate_MM
XML_ParserCreate_MM proc near		; CODE XREF: XML_ParserCreateNS+1Fp
					; XML_ParserCreate+18p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		xor	ebx, ebx
		mov	[esp+18h+var_14], ebx
		mov	ecx, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[esp+18h+var_18], ecx
		call	sub_68F43AE0
		test	eax, eax
		mov	ebx, eax
		jz	short loc_68F4676D
		cmp	byte ptr [eax+0ECh], 0
		jnz	short loc_68F46775

loc_68F4676D:				; CODE XREF: XML_ParserCreate_MM+22j
					; XML_ParserCreate_MM+41j
		mov	eax, ebx

loc_68F4676F:				; CODE XREF: XML_ParserCreate_MM+4Dj
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F46775:				; CODE XREF: XML_ParserCreate_MM+2Bj
		mov	edx, offset aXmlHttpWww_w3_ ; "xml=http://www.w3.org/XML/1998/namespac"...
		call	sub_68F45BC0
		test	al, al
		jnz	short loc_68F4676D
		mov	[esp+18h+var_18], ebx
		call	XML_ParserFree
		xor	eax, eax
		jmp	short loc_68F4676F
XML_ParserCreate_MM endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. XML_ParserCreateNS

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ParserCreateNS
XML_ParserCreateNS proc	near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_2		= byte ptr -2
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_2], al
		lea	eax, [ebp+var_2]
		mov	[esp+18h+var_10], eax
		xor	eax, eax
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	XML_ParserCreate_MM
		leave
		retn
XML_ParserCreateNS endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  18. XML_ParserCreate

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public XML_ParserCreate
XML_ParserCreate proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_10], eax
		xor	eax, eax
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	XML_ParserCreate_MM
		leave
		retn
XML_ParserCreate endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F467E0	proc near		; CODE XREF: sub_68F467E0+92p
					; sub_68F468F0+14AEp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	eax, [eax+164h]
		mov	ebx, [eax+0A4h]
		mov	[ebp+var_14], eax
		lea	eax, ds:0[edx*8]
		sub	eax, edx
		lea	ecx, ds:0[eax*4]
		mov	edx, [ecx+ebx]
		mov	eax, [ecx+ebx+4]
		mov	[esi], edx
		cmp	edx, 4
		mov	[esi+4], eax
		jz	loc_68F468A7
		mov	edx, [ecx+ebx+14h]
		xor	edi, edi
		mov	esi, [ebp+arg_0]
		mov	[esi+0Ch], edx
		mov	esi, [ebp+arg_4]
		mov	ebx, [ecx+ebx+0Ch]
		mov	eax, [esi]
		mov	esi, [ebp+arg_0]
		mov	[esi+10h], eax
		mov	esi, [ebp+arg_4]
		lea	eax, [edx+edx*4]
		shl	eax, 2
		add	[esi], eax
		cmp	edx, 0
		jbe	short loc_68F46895
		xor	esi, esi

loc_68F46850:				; CODE XREF: sub_68F467E0+B3j
		mov	eax, [ebp+arg_8]
		inc	edi
		mov	[esp+20h+var_18], eax
		mov	edx, [ebp+arg_4]
		mov	[esp+20h+var_1C], edx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		mov	edx, ebx
		add	eax, esi
		add	esi, 14h
		mov	[esp+20h+var_20], eax
		mov	eax, [ebp+var_10]
		call	sub_68F467E0
		mov	eax, [ebp+var_14]
		mov	edx, [eax+0A4h]
		lea	eax, ds:0[ebx*8]
		sub	eax, ebx
		mov	ebx, [edx+eax*4+18h]
		mov	edx, [ebp+arg_0]
		cmp	[edx+0Ch], edi
		ja	short loc_68F46850

loc_68F46895:				; CODE XREF: sub_68F467E0+6Cj
		mov	esi, [ebp+arg_0]
		mov	dword ptr [esi+8], 0
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F468A7:				; CODE XREF: sub_68F467E0+3Dj
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		mov	[esi+8], eax
		mov	ecx, [ecx+ebx+8]
		mov	edx, [edx]
		jmp	short loc_68F468B8
; ---------------------------------------------------------------------------

loc_68F468B7:				; CODE XREF: sub_68F467E0+EDj
		inc	ecx

loc_68F468B8:				; CODE XREF: sub_68F467E0+D5j
		movzx	eax, byte ptr [ecx]
		mov	[edx], al
		mov	edx, [ebp+arg_8]
		mov	esi, [ebp+arg_8]
		mov	eax, [edx]
		inc	eax
		mov	edx, eax
		mov	[esi], eax
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F468B7
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+10h], 0
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F467E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F468F0	proc near		; CODE XREF: sub_68F483C0+66p
					; sub_68F48540+13Ap ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_39		= byte ptr -39h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_19		= byte ptr -19h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, eax
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_8]
		mov	[ebp+var_18], edx
		mov	ecx, [ebp+var_18]
		mov	edx, [edi+164h]
		movzx	eax, [ebp+arg_14]
		cmp	[edi+90h], ecx
		mov	[ebp+var_20], edx
		mov	[ebp+var_19], al
		jz	loc_68F47B1A
		mov	eax, [edi+12Ch]
		mov	[ebp+var_24], eax
		add	eax, 4

loc_68F4692C:				; CODE XREF: sub_68F468F0+1239j
		mov	[ebp+var_28], eax
		mov	[ebp+var_2D], 1
		mov	ecx, [ebp+arg_0]
		test	ebx, ebx
		mov	edx, [ebp+var_24]
		mov	esi, [ebp+var_28]
		mov	[edx], ecx
		mov	eax, [ebp+arg_C]
		mov	[esi], eax
		jle	loc_68F46A31
		nop
		lea	esi, [esi+0]

loc_68F46950:				; CODE XREF: sub_68F468F0+13Bj
		mov	eax, [ebp+arg_C]

loc_68F46953:				; CODE XREF: sub_68F468F0+177j
		mov	edx, [ebp+var_18]
		mov	[esp+68h+var_5C], eax
		lea	eax, [edi+100h]
		mov	[esp+68h+var_58], edx
		mov	ecx, [ebp+arg_0]
		mov	[esp+68h+var_64], ebx
		mov	[esp+68h+var_68], eax
		mov	[esp+68h+var_60], ecx
		call	dword ptr [edi+100h]
		mov	esi, eax
		lea	eax, [eax+1]	; switch 62 cases
		cmp	eax, 3Dh
		ja	short loc_68F469D0 ; jumptable 68F46982	default	case
		jmp	ds:off_68F57A64[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F46989:				; CODE XREF: sub_68F468F0+129Aj
					; sub_68F468F0:loc_68F47BA7j
		test	ebx, ebx
		jz	loc_68F48110

loc_68F46991:				; CODE XREF: sub_68F468F0+12C9j
		cmp	byte ptr [ebx+20h], 0
		jnz	loc_68F48326
		mov	eax, [ebx+4]
		test	eax, eax
		jnz	loc_68F48066
		mov	eax, [edi+70h]
		test	eax, eax
		jnz	loc_68F480AC
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [ecx+82h]
		mov	[ecx+80h], al
		jmp	short loc_68F469D0 ; jumptable 68F46982	default	case
; ---------------------------------------------------------------------------
		align 10h

loc_68F469D0:				; CODE XREF: sub_68F468F0+90j
					; sub_68F468F0+D1j ...
		mov	eax, [edi+50h]	; jumptable 68F46982 default case
		test	eax, eax
		jnz	loc_68F46B10

loc_68F469DB:				; CODE XREF: sub_68F468F0:loc_68F46AFCj
					; sub_68F468F0+217j ...
		mov	eax, [edi+1E0h]
		cmp	eax, 2
		jz	loc_68F47E00
		cmp	eax, 3
		jz	loc_68F47E0A
		mov	ebx, [ebp+arg_C]
		lea	eax, [ebp+arg_C]
		mov	[ebp+arg_0], ebx
		mov	[esp+68h+var_5C], eax
		mov	esi, [ebp+arg_4]
		mov	[esp+68h+var_64], ebx
		mov	[esp+68h+var_60], esi
		mov	eax, [ebp+var_18]
		mov	[esp+68h+var_68], eax
		call	dword ptr [eax]
		mov	ebx, eax
		mov	[ebp+var_2D], 1
		mov	ecx, [ebp+arg_0]
		test	ebx, ebx
		mov	edx, [ebp+var_24]
		mov	esi, [ebp+var_28]
		mov	[edx], ecx
		mov	eax, [ebp+arg_C]
		mov	[esi], eax
		jg	loc_68F46950

loc_68F46A31:				; CODE XREF: sub_68F468F0+55j
		cmp	[ebp+var_19], 0
		setnz	al
		xor	edx, edx
		test	ebx, ebx
		setnz	dl
		test	edx, eax
		jnz	loc_68F48169
		cmp	ebx, 0FFFFFFFEh
		jz	loc_68F4815F
		jg	loc_68F47A20
		cmp	ebx, 0FFFFFFFCh
		jz	loc_68F4828C

loc_68F46A5F:				; CODE XREF: sub_68F468F0+113Bj
		mov	eax, [ebp+arg_4]
		neg	ebx
		mov	[ebp+arg_C], eax
		jmp	loc_68F46953
; ---------------------------------------------------------------------------

loc_68F46A6C:				; CODE XREF: sub_68F468F0+1060j
		mov	eax, [edi+1D4h]
		shl	eax, 2
		mov	[esp+68h+var_64], eax
		mov	edx, [ebp+var_20]
		mov	eax, [edx+0B8h]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+10h]
		test	eax, eax
		jz	loc_68F470CF
		mov	ecx, [ebp+var_20]
		mov	[ecx+0B8h], eax
		mov	ecx, [edi+104h]

loc_68F46A9F:				; CODE XREF: sub_68F468F0+101Fj
		mov	ebx, [edi+1D0h]

loc_68F46AA5:				; CODE XREF: sub_68F468F0+106Cj
		mov	byte ptr [ecx+ebx], 0
		mov	ebx, [ebp+var_20]
		cmp	byte ptr [ebx+0A0h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, edi
		call	sub_68F432D0
		test	eax, eax
		mov	ecx, eax
		js	loc_68F470CF
		mov	edx, [ebx+0B4h]
		mov	eax, [ebx+0B8h]
		mov	[eax+edx*4], ecx
		mov	edx, [ebx+0A4h]
		lea	eax, ds:0[ecx*8]
		inc	dword ptr [ebx+0B4h]
		sub	eax, ecx
		mov	dword ptr [edx+eax*4], 6

loc_68F46AF5:				; CODE XREF: sub_68F468F0+92j
					; sub_68F468F0+EA2j ...
		cmp	dword ptr [edi+80h], 0 ; jumptable 68F46982 case 39

loc_68F46AFC:				; CODE XREF: sub_68F468F0+4F0j
					; sub_68F468F0+7F5j ...
		jnz	loc_68F469DB
		mov	eax, [edi+50h]
		test	eax, eax
		jz	loc_68F469DB
		lea	esi, [esi+0]

loc_68F46B10:				; CODE XREF: sub_68F468F0+E5j
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_64], eax
		mov	edx, [ebp+arg_0]
		mov	eax, edi
		mov	[esp+68h+var_68], edx
		mov	edx, [ebp+var_18]
		call	sub_68F41EB0
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F46B2C:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	byte ptr [edi+1E9h], 0 ; jumptable 68F46982 case 5
		mov	ecx, [ebp+var_20]
		mov	byte ptr [ecx+81h], 1
		mov	ebx, [edi+54h]
		test	ebx, ebx
		jnz	loc_68F47C77
		mov	eax, offset byte_68F57A1C
		mov	[edi+144h], eax

loc_68F46B53:				; CODE XREF: sub_68F468F0+13CEj
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+82h], 0
		jnz	short loc_68F46B80
		mov	eax, [edi+1ECh]
		test	eax, eax
		jnz	short loc_68F46B80
		mov	edx, [edi+6Ch]
		test	edx, edx
		jz	short loc_68F46B80
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		test	eax, eax
		jz	loc_68F47632

loc_68F46B80:				; CODE XREF: sub_68F468F0+26Dj
					; sub_68F468F0+277j ...
		mov	eax, [edi+13Ch]
		test	eax, eax
		jnz	short loc_68F46BB8 ; jumptable 68F46982	case 13
		mov	eax, [ebp+var_20]
		mov	edx, offset byte_68F57A1C
		mov	[esp+68h+var_68], 24h
		add	eax, 84h
		call	sub_68F43DE0
		mov	[edi+13Ch], eax
		test	eax, eax
		jz	loc_68F470CF
		mov	dword ptr [eax+18h], 0

loc_68F46BB8:				; CODE XREF: sub_68F468F0+92j
					; sub_68F468F0+298j
					; DATA XREF: ...
		mov	edx, [ebp+var_20] ; jumptable 68F46982 case 13
		cmp	byte ptr [edx+80h], 0
		jz	short loc_68F46BE0
		mov	ebx, [edi+13Ch]
		test	ebx, ebx
		jnz	loc_68F47AC9
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F46BE0:				; CODE XREF: sub_68F468F0+2D2j
					; sub_68F468F0+372j ...
		cmp	[ebp+var_2D], 0

loc_68F46BE4:				; CODE XREF: sub_68F468F0+CD2j
		jnz	loc_68F469D0	; jumptable 68F46982 default case
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F46BEF:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	byte ptr [edi+1E9h], 0 ; jumptable 68F46982 case 6
		mov	edx, offset byte_68F57A1C
		mov	eax, [ebp+var_20]
		mov	[esp+68h+var_68], 24h
		add	eax, 84h
		call	sub_68F43DE0
		mov	[edi+13Ch], eax
		test	eax, eax
		jz	loc_68F470CF
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+81h], 1
		mov	ebx, [edi+54h]
		test	ebx, ebx
		jnz	loc_68F47A55

loc_68F46C32:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+var_24] ; jumptable 68F46982 case 14
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_60], eax
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+var_64], edx
		mov	ecx, [ebp+var_18]
		mov	[esp+68h+var_68], ecx
		call	dword ptr [ecx+38h]
		test	eax, eax
		jz	loc_68F48330

loc_68F46C58:				; CODE XREF: sub_68F468F0+11D4j
		mov	ebx, [ebp+var_20]
		cmp	byte ptr [ebx+80h], 0
		jz	loc_68F46BE0
		mov	esi, [edi+13Ch]
		test	esi, esi
		jz	loc_68F46BE0
		mov	esi, [ebp+var_18]
		mov	eax, ebx
		mov	edx, [ebp+arg_C]
		add	eax, 50h
		mov	ebx, [esi+44h]
		sub	edx, ebx
		mov	[esp+68h+var_64], edx
		mov	edx, [ebp+arg_0]
		mov	ecx, [esi+44h]
		add	edx, ecx
		mov	[esp+68h+var_68], edx
		mov	edx, esi
		call	sub_68F42EC0
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F470CF
		call	sub_68F42DC0
		mov	eax, [edi+13Ch]
		mov	edx, [ebp+var_20]
		mov	[eax+18h], ebx
		mov	eax, [edx+5Ch]
		mov	[edx+60h], eax

loc_68F46CBD:				; CODE XREF: sub_68F468F0+1225j
		mov	esi, [edi+88h]
		test	esi, esi
		jz	loc_68F46BE0
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F46CD0:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ecx, [ebp+var_20] ; jumptable 68F46982 cases 35,36
		cmp	byte ptr [ecx+80h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		xor	ecx, ecx
		mov	edx, [edi+15Ch]
		mov	eax, [edi+158h]
		mov	[esp+68h+var_5C], edi
		mov	[esp+68h+var_60], ecx
		movzx	ecx, byte ptr [edi+161h]
		mov	[esp+68h+var_64], ecx
		movzx	ecx, byte ptr [edi+160h]
		mov	[esp+68h+var_68], ecx
		call	sub_68F431D0
		test	eax, eax
		jz	loc_68F470CF
		mov	ecx, [edi+84h]
		test	ecx, ecx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, [edi+14Ch]
		test	eax, eax
		jz	loc_68F469D0	; jumptable 68F46982 default case
		movzx	edx, byte ptr [eax]
		cmp	dl, 28h
		jz	loc_68F4820F
		lea	ebx, [edi+1A0h]
		cmp	dl, 4Eh
		mov	[ebp+var_38], ebx
		jz	loc_68F48205

loc_68F46D52:				; CODE XREF: sub_68F468F0+1919j
					; sub_68F468F0+197Ej
		mov	eax, [ebp+var_28]
		mov	edx, [ebp+arg_0]
		mov	[eax], edx
		xor	eax, eax
		cmp	esi, 24h
		setz	al
		xor	ebx, ebx
		mov	[esp+68h+var_54], eax

loc_68F46D68:				; CODE XREF: sub_68F468F0+C1Dj
		mov	[esp+68h+var_58], ebx
		mov	eax, [edi+14Ch]
		mov	[esp+68h+var_5C], eax
		mov	eax, [edi+15Ch]
		mov	eax, [eax]
		mov	[esp+68h+var_60], eax
		mov	eax, [edi+158h]
		mov	eax, [eax]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	ecx
		mov	eax, [ebp+var_38]
		call	sub_68F411F0
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F46DA3:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+arg_C] ; jumptable 68F46982 case 34
		mov	[esp+68h+var_64], eax
		mov	esi, [ebp+arg_0]
		mov	eax, edi
		mov	[esp+68h+var_68], esi
		mov	edx, [ebp+var_18]
		call	sub_68F45960
		mov	[edi+158h], eax
		test	eax, eax
		jz	loc_68F470CF

loc_68F46DC8:				; CODE XREF: sub_68F468F0+59Cj
					; sub_68F468F0+5ACj ...
		mov	edx, [ebp+var_20]
		cmp	byte ptr [edx+80h], 0

loc_68F46DD2:				; CODE XREF: sub_68F468F0+4FFj
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, [edi+84h]
		test	eax, eax
		jmp	loc_68F46AFC
; ---------------------------------------------------------------------------

loc_68F46DE5:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+var_20] ; jumptable 68F46982 case 33
		cmp	byte ptr [eax+80h], 0
		jmp	short loc_68F46DD2
; ---------------------------------------------------------------------------

loc_68F46DF1:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ecx, [ebp+var_20] ; jumptable 68F46982 cases 31,32
		cmp	byte ptr [ecx+80h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	ecx, [edi+84h]
		test	ecx, ecx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	edx, [edi+14Ch]
		mov	eax, offset asc_68F57A5F ; "|"
		test	edx, edx
		jnz	short loc_68F46E2D
		cmp	esi, 20h
		mov	eax, offset aNotation ;	"NOTATION("
		jz	short loc_68F46E2D
		mov	eax, offset asc_68F57A61 ; "("

loc_68F46E2D:				; CODE XREF: sub_68F468F0+52Cj
					; sub_68F468F0+536j
		lea	ebx, [edi+1A0h]
		mov	[ebp+var_38], ebx
		mov	ebx, eax
		cmp	byte ptr [eax],	0
		jz	loc_68F47F84
		mov	esi, [ebp+var_38]
		mov	edx, [esi+0Ch]
		jmp	short loc_68F46E64
; ---------------------------------------------------------------------------

loc_68F46E49:				; CODE XREF: sub_68F468F0+57Aj
					; sub_68F468F0+58Fj
		movzx	eax, byte ptr [ebx]
		inc	ebx
		mov	[edx], al
		mov	esi, [ebp+var_38]
		mov	eax, [esi+0Ch]
		inc	eax
		mov	edx, eax
		mov	[esi+0Ch], eax
		cmp	byte ptr [ebx],	0
		jz	loc_68F47F84

loc_68F46E64:				; CODE XREF: sub_68F468F0+557j
		mov	eax, [ebp+var_38]
		cmp	edx, [eax+8]
		jnz	short loc_68F46E49
		call	sub_68F42600
		test	al, al
		jz	loc_68F470CF
		mov	ecx, [ebp+var_38]
		mov	edx, [ecx+0Ch]
		jmp	short loc_68F46E49
; ---------------------------------------------------------------------------

loc_68F46E81:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ebx, offset aNmtokens ;	jumptable 68F46982 case	30
		mov	[edi+14Ch], ebx
		jmp	loc_68F46DC8
; ---------------------------------------------------------------------------

loc_68F46E91:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	esi, offset aNmtoken ; jumptable 68F46982 case 29
		mov	[edi+14Ch], esi
		jmp	loc_68F46DC8
; ---------------------------------------------------------------------------

loc_68F46EA1:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, offset aEntities ;	jumptable 68F46982 case	28

loc_68F46EA6:				; CODE XREF: sub_68F468F0+5C6j
					; sub_68F468F0+5CDj ...
		mov	[edi+14Ch], eax
		jmp	loc_68F46DC8
; ---------------------------------------------------------------------------

loc_68F46EB1:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, offset aEntity ; jumptable	68F46982 case 27
		jmp	short loc_68F46EA6
; ---------------------------------------------------------------------------

loc_68F46EB8:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, offset aIdrefs ; jumptable	68F46982 case 26
		jmp	short loc_68F46EA6
; ---------------------------------------------------------------------------

loc_68F46EBF:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, offset aIdref ; jumptable 68F46982	case 25
		jmp	short loc_68F46EA6
; ---------------------------------------------------------------------------

loc_68F46EC6:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	byte ptr [edi+161h], 1 ; jumptable 68F46982 case 24
		mov	eax, offset aId	; "ID"
		jmp	short loc_68F46EA6
; ---------------------------------------------------------------------------

loc_68F46ED4:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	byte ptr [edi+160h], 1 ; jumptable 68F46982 case 23
		mov	eax, offset aCdata ; "CDATA"
		jmp	short loc_68F46EA6
; ---------------------------------------------------------------------------

loc_68F46EE2:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+arg_C] ; jumptable 68F46982 case 22
		mov	[esp+68h+var_64], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_68], eax
		mov	edx, [ebp+var_18]
		mov	eax, edi
		call	sub_68F441C0
		mov	[edi+15Ch], eax
		test	eax, eax
		jz	loc_68F470CF
		mov	byte ptr [edi+160h], 0
		xor	edx, edx
		mov	[edi+14Ch], edx
		mov	byte ptr [edi+161h], 0
		jmp	loc_68F46DC8
; ---------------------------------------------------------------------------

loc_68F46F22:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	edx, [ebp+var_24] ; jumptable 68F46982 case 21
		mov	[esp+68h+var_5C], edx
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_60], eax
		mov	ecx, [ebp+arg_0]
		mov	[esp+68h+var_64], ecx
		mov	ebx, [ebp+var_18]
		mov	[esp+68h+var_68], ebx
		call	dword ptr [ebx+38h]
		test	eax, eax
		jz	loc_68F48330
		mov	ecx, [edi+150h]
		test	ecx, ecx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	edx, [ebx+44h]
		lea	esi, [edi+1A0h]
		mov	eax, [ebp+arg_C]
		sub	eax, edx
		mov	[esp+68h+var_64], eax
		mov	eax, [ebx+44h]
		add	[ebp+arg_0], eax
		mov	eax, esi
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+var_68], edx
		mov	edx, ebx
		call	sub_68F42EC0
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F470CF
		call	sub_68F42DC0
		mov	[edi+154h], ebx

loc_68F46F92:				; CODE XREF: sub_68F468F0+7D9j
		mov	eax, [edi+1ACh]
		mov	[edi+1B0h], eax
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F46FA3:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ebx, [edi+154h]	; jumptable 68F46982 case 20
		test	ebx, ebx
		jz	short loc_68F46FEC
		mov	edx, [edi+60h]
		test	edx, edx
		jz	short loc_68F46FEC
		mov	eax, [ebp+arg_0]
		xor	ecx, ecx
		mov	esi, [ebp+var_28]
		mov	[esi], eax
		mov	eax, [edi+154h]
		mov	[esp+68h+var_5C], ecx
		mov	[esp+68h+var_58], eax
		mov	eax, [edi+168h]
		mov	[esp+68h+var_60], eax
		mov	eax, [edi+150h]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		mov	[ebp+var_2D], 0

loc_68F46FEC:				; CODE XREF: sub_68F468F0+6BBj
					; sub_68F468F0+6C2j
		lea	edx, [edi+1A0h]
		mov	eax, edx
		call	sub_68F411F0
		jmp	loc_68F46BE0
; ---------------------------------------------------------------------------

loc_68F46FFE:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [edi+150h]	; jumptable 68F46982 case 19
		lea	ecx, [edi+1A0h]
		mov	[ebp+var_38], ecx
		test	eax, eax
		jz	short loc_68F4707C
		mov	esi, [edi+60h]
		test	esi, esi
		jz	short loc_68F4707C
		mov	edx, [ebp+var_18]
		mov	esi, ecx
		mov	eax, [ebp+arg_C]
		mov	ebx, [edx+44h]
		sub	eax, ebx
		mov	[esp+68h+var_64], eax
		mov	ecx, [edx+44h]
		mov	eax, [ebp+arg_0]
		add	eax, ecx
		mov	[esp+68h+var_68], eax
		mov	eax, esi
		call	sub_68F42EC0
		test	eax, eax
		mov	edx, eax
		jz	loc_68F470CF
		mov	ebx, [ebp+arg_0]
		mov	ecx, [ebp+var_28]
		mov	[ecx], ebx
		mov	eax, [edi+154h]
		mov	[esp+68h+var_5C], edx
		mov	[esp+68h+var_58], eax
		mov	eax, [edi+168h]
		mov	[esp+68h+var_60], eax
		mov	eax, [edi+150h]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+60h]
		mov	[ebp+var_2D], 0

loc_68F4707C:				; CODE XREF: sub_68F468F0+71Fj
					; sub_68F468F0+726j
		mov	eax, [ebp+var_38]
		call	sub_68F411F0
		jmp	loc_68F46BE0
; ---------------------------------------------------------------------------

loc_68F47089:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ebx, [edi+60h]	; jumptable 68F46982 case 18
		xor	eax, eax
		xor	esi, esi
		mov	[edi+154h], eax
		mov	[edi+150h], esi
		test	ebx, ebx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, [ebp+arg_C]
		lea	esi, [edi+1A0h]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_68], eax
		mov	edx, [ebp+var_18]
		mov	eax, esi
		call	sub_68F42EC0
		mov	[edi+150h], eax
		test	eax, eax
		jnz	loc_68F46F92

loc_68F470CF:				; CODE XREF: sub_68F468F0+19Aj
					; sub_68F468F0+1D4j ...
		mov	edx, 1
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------
		align 10h

loc_68F470E0:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [edi+60h]	; jumptable 68F46982 case 17
		test	eax, eax
		jmp	loc_68F46AFC
; ---------------------------------------------------------------------------

loc_68F470EA:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	esi, [ebp+var_20] ; jumptable 68F46982 case 16
		cmp	byte ptr [esi+80h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	ebx, [edi+13Ch]
		test	ebx, ebx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		add	eax, 50h
		mov	[esp+68h+var_64], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+var_68], edx
		mov	edx, [ebp+var_18]
		call	sub_68F42EC0
		mov	[ebx+1Ch], eax
		mov	edx, [edi+13Ch]
		mov	eax, [edx+1Ch]
		test	eax, eax
		jz	short loc_68F470CF
		mov	ecx, [edi+5Ch]
		mov	eax, [esi+5Ch]
		test	ecx, ecx
		mov	[esi+60h], eax
		jnz	loc_68F47F4D
		mov	ecx, [edi+88h]
		test	ecx, ecx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, [ebp+var_28]
		mov	ebx, [ebp+arg_0]
		mov	[eax], ebx
		mov	eax, [edx+1Ch]
		mov	[esp+68h+var_48], eax
		mov	eax, [edx+18h]
		mov	[esp+68h+var_4C], eax
		mov	eax, [edx+10h]
		mov	[esp+68h+var_50], eax
		mov	eax, [edx+14h]
		mov	[esp+68h+var_54], eax
		xor	eax, eax
		mov	[esp+68h+var_58], eax
		xor	eax, eax
		mov	[esp+68h+var_5C], eax
		xor	eax, eax

loc_68F47183:				; CODE XREF: sub_68F468F0+909j
		mov	[esp+68h+var_60], eax
		mov	eax, [edx]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	ecx
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F4719A:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	esi, [ebp+var_20] ; jumptable 68F46982 case 15
		cmp	byte ptr [esi+80h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	edx, [edi+13Ch]
		test	edx, edx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	ecx, [edi+88h]
		test	ecx, ecx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebp+var_28]
		mov	[eax], ebx
		xor	ebx, ebx
		mov	[esp+68h+var_48], ebx
		mov	eax, [edx+18h]
		mov	[esp+68h+var_4C], eax
		mov	eax, [edx+10h]
		mov	[esp+68h+var_50], eax
		mov	eax, [edx+14h]
		mov	[esp+68h+var_54], eax
		xor	eax, eax
		mov	[esp+68h+var_58], eax
		xor	eax, eax
		mov	[esp+68h+var_5C], eax
		movzx	eax, byte ptr [edx+21h]
		jmp	short loc_68F47183
; ---------------------------------------------------------------------------
		align 10h

loc_68F47200:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	esi, [ebp+var_20] ; jumptable 68F46982 case 10
		cmp	byte ptr [esi+80h], 0
		jnz	loc_68F47BEC

loc_68F47210:				; CODE XREF: sub_68F468F0+95Bj
		mov	ebx, [ebp+var_20]
		mov	eax, [ebx+60h]
		mov	[ebx+5Ch], eax

loc_68F47219:				; CODE XREF: sub_68F468F0+94Fj
					; sub_68F468F0+9ADj
		xor	esi, esi
		mov	[edi+13Ch], esi
		jmp	loc_68F469D0	; jumptable 68F46982 default case
; ---------------------------------------------------------------------------

loc_68F47226:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+arg_C] ; jumptable 68F46982 case 9
		mov	[esp+68h+var_60], eax
		mov	esi, [ebp+arg_0]
		mov	[esp+68h+var_64], esi
		mov	eax, [ebp+var_18]
		mov	[esp+68h+var_68], eax
		call	dword ptr [eax+30h]
		test	eax, eax
		jnz	short loc_68F47219
		mov	ecx, [ebp+var_20]
		cmp	byte ptr [ecx+80h], 0
		jz	short loc_68F47210
		mov	edx, [ebp+arg_C]
		mov	eax, ecx
		add	eax, 50h
		mov	[esp+68h+var_64], edx
		mov	ebx, [ebp+arg_0]
		mov	[esp+68h+var_68], ebx
		mov	edx, [ebp+var_18]
		call	sub_68F42EC0
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F470CF
		mov	[esp+68h+var_68], 24h
		mov	edx, eax
		mov	eax, [ebp+var_20]
		call	sub_68F43DE0
		test	eax, eax
		mov	edx, eax
		jz	loc_68F48344
		cmp	[eax], ebx
		jz	loc_68F48178
		mov	esi, [ebp+var_20]

loc_68F47297:				; CODE XREF: sub_68F468F0+1341j
		mov	eax, [esi+60h]
		mov	[esi+5Ch], eax
		jmp	loc_68F47219
; ---------------------------------------------------------------------------

loc_68F472A2:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	edx, [edi+140h]	; jumptable 68F46982 case 8
		test	edx, edx
		jnz	loc_68F47CC3

loc_68F472B0:				; CODE XREF: sub_68F468F0+140Bj
		mov	ecx, [edi+144h]
		test	ecx, ecx
		jz	loc_68F47A43

loc_68F472BE:				; CODE XREF: sub_68F468F0+1160j
		mov	esi, [ebp+var_20]
		movzx	ebx, byte ptr [esi+81h]
		mov	byte ptr [esi+81h], 1
		mov	edx, [edi+1ECh]
		test	edx, edx
		jz	short loc_68F472E4
		mov	eax, [edi+70h]
		test	eax, eax
		jnz	loc_68F47FC3

loc_68F472E4:				; CODE XREF: sub_68F468F0+9E7j
					; sub_68F468F0+1750j ...
		mov	byte ptr [edi+1E9h], 0

loc_68F472EB:				; CODE XREF: sub_68F468F0+115Aj
		mov	edx, [edi+58h]
		test	edx, edx
		jz	loc_68F46BE0
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F47303:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	edx, [edi+54h]	; jumptable 68F46982 case 7
		test	edx, edx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, 1
		xor	esi, esi
		mov	[esp+68h+var_58], eax
		mov	eax, [edi+148h]
		mov	[esp+68h+var_5C], eax
		mov	eax, [edi+144h]
		mov	[esp+68h+var_60], eax
		mov	eax, [edi+140h]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		mov	[edi+140h], esi
		lea	ecx, [edi+1A0h]
		mov	eax, ecx
		call	sub_68F411F0
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F47357:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	edx, [ebp+var_20] ; jumptable 68F46982 case 12
		cmp	byte ptr [edx+80h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	ecx, [ebp+var_18]
		mov	eax, [ebp+arg_C]
		mov	ebx, [ecx+44h]
		sub	eax, ebx
		mov	[esp+68h+var_64], eax
		mov	edx, [ecx+44h]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	edx, ecx
		mov	[esp+68h+var_68], eax
		mov	eax, edi
		call	sub_68F44850
		mov	ecx, [edi+13Ch]
		mov	ebx, eax
		test	ecx, ecx
		jz	loc_68F47E19
		mov	esi, [ebp+var_20]
		mov	eax, [esi+78h]
		mov	[ecx+4], eax
		mov	edx, [esi+74h]
		mov	eax, edx
		sub	eax, [esi+78h]
		mov	[esi+78h], edx
		mov	edx, [edi+88h]
		mov	[ecx+8], eax
		test	edx, edx
		jz	loc_68F47E22
		mov	esi, [ebp+arg_0]
		mov	eax, [ebp+var_28]
		mov	[eax], esi
		xor	eax, eax
		xor	esi, esi
		mov	[esp+68h+var_48], eax
		xor	eax, eax
		mov	[esp+68h+var_4C], eax
		mov	[esp+68h+var_50], esi
		mov	eax, [edi+168h]
		mov	[esp+68h+var_54], eax
		mov	eax, [ecx+8]
		mov	[esp+68h+var_58], eax
		mov	eax, [ecx+4]
		mov	[esp+68h+var_5C], eax
		movzx	eax, byte ptr [ecx+21h]
		mov	[esp+68h+var_60], eax
		mov	eax, [ecx]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		mov	[ebp+var_2D], 0
		jmp	loc_68F47E22
; ---------------------------------------------------------------------------

loc_68F47410:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	esi, [ebp+var_20] ; jumptable 68F46982 case 11
		cmp	byte ptr [esi+80h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case

loc_68F47420:				; CODE XREF: sub_68F468F0+1382j
		mov	edx, [edi+88h]
		test	edx, edx
		jmp	loc_68F46AFC
; ---------------------------------------------------------------------------

loc_68F4742D:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ecx, [ebp+var_20] ; jumptable 68F46982 cases 37,38
		cmp	byte ptr [ecx+80h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, ecx
		add	eax, 50h
		mov	[esp+68h+var_5C], eax
		mov	ebx, [ebp+var_18]
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebx+44h]
		sub	eax, ecx
		mov	[esp+68h+var_60], eax
		mov	edx, [ebx+44h]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	edx, ebx
		mov	[esp+68h+var_64], eax
		movzx	eax, byte ptr [edi+160h]
		mov	[esp+68h+var_68], eax
		mov	eax, edi
		call	sub_68F447D0
		test	eax, eax
		jnz	loc_68F4758B
		mov	eax, [ebp+var_20]
		xor	ecx, ecx
		mov	ebx, [eax+60h]
		mov	edx, eax
		mov	eax, [eax+5Ch]
		mov	[edx+60h], eax
		mov	edx, [edi+15Ch]
		mov	eax, [edi+158h]
		mov	[esp+68h+var_5C], edi
		mov	[esp+68h+var_60], ebx
		mov	[esp+68h+var_64], ecx
		movzx	ecx, byte ptr [edi+160h]
		mov	[esp+68h+var_68], ecx
		call	sub_68F431D0
		test	eax, eax
		jz	loc_68F470CF
		mov	ecx, [edi+84h]
		test	ecx, ecx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, [edi+14Ch]
		test	eax, eax
		jz	loc_68F469D0	; jumptable 68F46982 default case
		movzx	edx, byte ptr [eax]
		cmp	dl, 28h
		mov	[ebp+var_39], dl
		jz	loc_68F481A1
		cmp	[ebp+var_39], 4Eh
		lea	edx, [edi+1A0h]
		mov	[ebp+var_38], edx
		jz	loc_68F48197

loc_68F474F9:				; CODE XREF: sub_68F468F0+18ABj
					; sub_68F468F0+1910j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_28]
		mov	[edx], eax
		xor	eax, eax
		cmp	esi, 26h
		setz	al
		mov	[esp+68h+var_54], eax
		jmp	loc_68F46D68
; ---------------------------------------------------------------------------

loc_68F47512:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [edi+54h]	; jumptable 68F46982 case 4
		test	eax, eax
		jnz	loc_68F47D00

loc_68F4751D:				; CODE XREF: sub_68F468F0+1457j
		xor	eax, eax
		mov	[edi+144h], eax
		jmp	loc_68F46BE0
; ---------------------------------------------------------------------------

loc_68F4752A:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ecx, [edi+54h]	; jumptable 68F46982 case 3
		test	ecx, ecx
		jmp	loc_68F46AFC
; ---------------------------------------------------------------------------

loc_68F47534:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		cmp	byte ptr [edi+1E9h], 0 ; jumptable 68F46982 case 2
		jz	short loc_68F47563
		mov	esi, [ebp+var_20]
		movzx	ebx, byte ptr [esi+81h]
		mov	byte ptr [esi+81h], 1
		mov	eax, [edi+1ECh]
		test	eax, eax
		jz	short loc_68F47563
		mov	eax, [edi+70h]
		test	eax, eax
		jnz	loc_68F47E99

loc_68F47563:				; CODE XREF: sub_68F468F0+C4Bj
					; sub_68F468F0+C66j ...
		mov	edx, [ebp+arg_10]
		mov	ecx, offset sub_68F49A70
		mov	[edi+118h], ecx
		mov	[esp+68h+var_5C], edx
		mov	ecx, [ebp+arg_4]
		mov	[esp+68h+var_60], ecx
		mov	ebx, [ebp+arg_0]
		mov	[esp+68h+var_68], edi
		mov	[esp+68h+var_64], ebx
		call	sub_68F49A70

loc_68F4758B:				; CODE XREF: sub_68F468F0+B86j
					; sub_68F468F0+CBFj ...
		mov	edx, eax

loc_68F4758D:				; CODE XREF: sub_68F468F0+1794j
		add	esp, 5Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F47597:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+arg_C] ; jumptable 68F46982 case 1
		xor	edx, edx
		mov	[esp+68h+var_64], eax
		mov	ebx, [ebp+arg_0]
		mov	[esp+68h+var_68], ebx

loc_68F475A6:				; CODE XREF: sub_68F468F0+DB8j
		mov	eax, edi
		call	sub_68F42F20
		test	eax, eax
		jnz	short loc_68F4758B
		mov	esi, [edi+90h]
		mov	[ebp+var_18], esi
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F475BF:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		cmp	ebx, 0Eh	; jumptable 68F46982 case 0
		jmp	loc_68F46BE4
; ---------------------------------------------------------------------------

loc_68F475C7:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		cmp	ebx, 0Ch	; jumptable 68F46982 case -1
		mov	edx, 11h
		jz	short loc_68F475E0
		xor	edx, edx
		cmp	ebx, 1Ch
		setz	dl
		lea	edx, ds:2[edx*8]

loc_68F475E0:				; CODE XREF: sub_68F468F0+7E4j
					; sub_68F468F0+CDFj ...
		add	esp, 5Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F475EA:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	edx, [ebp+var_20] ; jumptable 68F46982 cases 59,60
		mov	byte ptr [edx+81h], 1
		mov	eax, [edi+1ECh]
		test	eax, eax
		jnz	loc_68F47B2E
		movzx	eax, byte ptr [edx+82h]
		mov	[edx+80h], al

loc_68F4760F:				; CODE XREF: sub_68F468F0+198Dj
		test	al, al
		jnz	loc_68F46BE0
		mov	edx, [edi+6Ch]
		test	edx, edx
		jz	loc_68F46BE0
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		test	eax, eax
		jnz	loc_68F46BE0

loc_68F47632:				; CODE XREF: sub_68F468F0+28Aj
					; sub_68F468F0+1771j
		mov	edx, 16h
		jmp	short loc_68F475E0
; ---------------------------------------------------------------------------
		align 10h

loc_68F47640:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	edx, [edi+50h]	; jumptable 68F46982 case 58
		test	edx, edx
		jnz	loc_68F47BD0

loc_68F4764B:				; CODE XREF: sub_68F468F0+12F7j
		movzx	eax, [ebp+var_19]
		mov	[esp+68h+var_5C], eax
		mov	ebx, [ebp+arg_10]
		lea	eax, [ebp+arg_C]
		mov	[esp+68h+var_60], ebx
		mov	esi, [ebp+arg_4]
		mov	[esp+68h+var_68], eax
		mov	eax, edi
		mov	[esp+68h+var_64], esi
		mov	edx, [ebp+var_18]
		call	sub_68F42AF0
		test	eax, eax
		jnz	loc_68F4758B
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jnz	loc_68F469DB
		mov	eax, offset sub_68F484B0
		xor	edx, edx
		mov	[edi+118h], eax
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F47696:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+arg_C] ; jumptable 68F46982 case 57
		mov	edx, 1
		mov	[esp+68h+var_64], eax
		mov	ebx, [ebp+arg_0]
		mov	[esp+68h+var_68], ebx
		jmp	loc_68F475A6
; ---------------------------------------------------------------------------

loc_68F476AD:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+arg_C] ; jumptable 68F46982 case 56
		mov	[esp+68h+var_64], eax
		mov	ebx, [ebp+arg_0]
		mov	eax, edi
		mov	[esp+68h+var_68], ebx
		mov	edx, [ebp+var_18]
		call	sub_68F43590

loc_68F476C4:				; CODE XREF: sub_68F468F0+DFDj
		test	eax, eax
		jnz	loc_68F469DB
		mov	edx, 1
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F476D6:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+arg_C] ; jumptable 68F46982 case 55
		mov	[esp+68h+var_64], eax
		mov	ecx, [ebp+arg_0]
		mov	eax, edi
		mov	[esp+68h+var_68], ecx
		mov	edx, [ebp+var_18]
		call	sub_68F43490
		jmp	short loc_68F476C4
; ---------------------------------------------------------------------------

loc_68F476EF:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	[ebp+var_2C], 3	; jumptable 68F46982 case 54

loc_68F476F6:				; CODE XREF: sub_68F468F0+EAEj
					; sub_68F468F0+EBAj ...
		mov	esi, [ebp+var_20]
		cmp	byte ptr [esi+0A0h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	ecx, [ebp+var_2C]
		mov	esi, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_68F47718
		mov	eax, [ebp+var_18]
		mov	edx, [eax+44h]
		sub	esi, edx

loc_68F47718:				; CODE XREF: sub_68F468F0+E1Ej
		mov	eax, edi
		call	sub_68F432D0
		test	eax, eax
		mov	ecx, eax
		js	loc_68F470CF
		mov	ebx, [ebp+var_20]
		lea	eax, ds:0[eax*8]
		sub	eax, ecx
		mov	edx, [ebx+0A4h]
		lea	ebx, ds:0[eax*4]
		mov	eax, [ebp+var_2C]
		mov	dword ptr [ebx+edx], 4
		mov	[ebx+edx+4], eax
		mov	eax, edi
		mov	[esp+68h+var_64], esi
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+var_68], edx
		mov	edx, [ebp+var_18]
		call	sub_68F45960
		test	eax, eax
		jz	loc_68F470CF
		mov	esi, [ebp+var_20]
		xor	edx, edx
		mov	ecx, [eax]
		mov	eax, [esi+0A4h]
		mov	[ebx+eax+8], ecx
		lea	esi, [esi+0]

loc_68F47780:				; CODE XREF: sub_68F468F0+E97j
		mov	eax, edx
		inc	edx
		cmp	byte ptr [eax+ecx], 0
		jnz	short loc_68F47780
		mov	eax, [ebp+var_20]
		add	[eax+0A8h], edx
		jmp	loc_68F46AF5	; jumptable 68F46982 case 39
; ---------------------------------------------------------------------------

loc_68F47797:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	[ebp+var_2C], 1	; jumptable 68F46982 case 53
		jmp	loc_68F476F6
; ---------------------------------------------------------------------------

loc_68F477A3:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	[ebp+var_2C], 2	; jumptable 68F46982 case 52
		jmp	loc_68F476F6
; ---------------------------------------------------------------------------

loc_68F477AF:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	[ebp+var_2C], 0	; jumptable 68F46982 case 51
		jmp	loc_68F476F6
; ---------------------------------------------------------------------------

loc_68F477BB:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	edx, [edi+104h]	; jumptable 68F46982 case 50
		mov	eax, [edi+1D0h]
		cmp	byte ptr [edx+eax], 7Ch
		jz	loc_68F4833A
		mov	byte ptr [edx+eax], 2Ch
		mov	esi, [ebp+var_20]
		cmp	byte ptr [esi+0A0h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		jmp	loc_68F46AF5	; jumptable 68F46982 case 39
; ---------------------------------------------------------------------------

loc_68F477EA:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ecx, [edi+104h]	; jumptable 68F46982 case 49
		mov	ebx, [edi+1D0h]
		movzx	eax, byte ptr [ecx+ebx]
		cmp	al, 2Ch
		jz	loc_68F4833A
		mov	edx, [ebp+var_20]
		cmp	byte ptr [edx+0A0h], 0
		jz	short loc_68F47853
		test	al, al
		jnz	short loc_68F47853
		mov	esi, edx
		mov	eax, [esi+0B8h]
		mov	edx, [edx+0B4h]
		mov	esi, [esi+0A4h]
		mov	edx, [eax+edx*4-4]
		lea	eax, ds:0[edx*8]
		sub	eax, edx
		shl	eax, 2
		cmp	dword ptr [eax+esi], 3
		jz	short loc_68F47853
		mov	dword ptr [eax+esi], 5
		mov	eax, [edi+80h]
		test	eax, eax
		setz	al
		neg	al
		and	[ebp+var_2D], al

loc_68F47853:				; CODE XREF: sub_68F468F0+F1Cj
					; sub_68F468F0+F20j ...
		mov	byte ptr [ecx+ebx], 7Ch
		jmp	loc_68F46BE0
; ---------------------------------------------------------------------------

loc_68F4785C:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	[ebp+var_2C], 3	; jumptable 68F46982 case 48

loc_68F47863:				; CODE XREF: sub_68F468F0+FF4j
					; sub_68F468F0+1000j ...
		mov	edx, [ebp+var_20]
		cmp	byte ptr [edx+0A0h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	esi, [edi+80h]
		mov	ecx, edx
		mov	edx, [edx+0B4h]
		test	esi, esi
		setz	al
		dec	edx
		mov	[ecx+0B4h], edx
		neg	al
		mov	esi, [ebp+var_20]
		and	[ebp+var_2D], al
		mov	eax, [ecx+0B8h]
		mov	ebx, [esi+0A4h]
		mov	ecx, [eax+edx*4]
		lea	eax, ds:0[ecx*8]
		sub	eax, ecx
		mov	ecx, [ebp+var_2C]
		test	edx, edx
		mov	[ebx+eax*4+4], ecx
		jnz	loc_68F46BE0
		cmp	[ebp+var_2D], 0
		jz	loc_68F47D4C

loc_68F478C6:				; CODE XREF: sub_68F468F0+14D7j
		mov	edx, [ebp+var_20]
		xor	ebx, ebx
		mov	byte ptr [edx+0A0h], 0
		mov	[edx+0A8h], ebx
		jmp	loc_68F46BE0
; ---------------------------------------------------------------------------

loc_68F478DD:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	[ebp+var_2C], 1	; jumptable 68F46982 case 47
		jmp	loc_68F47863
; ---------------------------------------------------------------------------

loc_68F478E9:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	[ebp+var_2C], 2	; jumptable 68F46982 case 46
		jmp	loc_68F47863
; ---------------------------------------------------------------------------

loc_68F478F5:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	[ebp+var_2C], 0	; jumptable 68F46982 case 45
		jmp	loc_68F47863
; ---------------------------------------------------------------------------

loc_68F47901:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ecx, [edi+104h]	; jumptable 68F46982 case 44
		mov	eax, [edi+1D4h]
		cmp	ecx, eax
		jb	loc_68F46A9F
		test	eax, eax
		jz	loc_68F47DCC
		add	eax, eax
		mov	[edi+1D4h], eax
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+1D0h]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+10h]
		test	eax, eax
		jz	loc_68F470CF
		mov	[edi+1D0h], eax
		mov	ebx, eax
		mov	eax, [ebp+var_20]
		mov	eax, [eax+0B8h]
		test	eax, eax
		jnz	loc_68F46A6C

loc_68F47956:				; CODE XREF: sub_68F468F0+14FBj
		mov	ecx, [edi+104h]
		jmp	loc_68F46AA5
; ---------------------------------------------------------------------------

loc_68F47961:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	eax, [ebp+var_20] ; jumptable 68F46982 case 43
		cmp	byte ptr [eax+0A0h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	edx, [eax+0B4h]
		mov	ecx, eax
		mov	eax, [eax+0B8h]
		mov	ecx, [ecx+0A4h]
		mov	edx, [eax+edx*4-4]
		lea	eax, ds:0[edx*8]
		sub	eax, edx
		mov	dword ptr [ecx+eax*4], 3
		jmp	loc_68F46AF5	; jumptable 68F46982 case 39
; ---------------------------------------------------------------------------

loc_68F4799E:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	edx, [ebp+var_20] ; jumptable 68F46982 cases 41,42
		cmp	byte ptr [edx+0A0h], 0
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	ebx, [edi+80h]
		test	ebx, ebx
		jnz	loc_68F47E31

loc_68F479BC:				; CODE XREF: sub_68F468F0+15A4j
		mov	esi, [ebp+var_20]
		mov	byte ptr [esi+0A0h], 0
		jmp	loc_68F46BE0
; ---------------------------------------------------------------------------

loc_68F479CB:				; CODE XREF: sub_68F468F0+92j
					; DATA XREF: .rdata:off_68F57A64o
		mov	ecx, [edi+80h]	; jumptable 68F46982 case 40
		test	ecx, ecx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_64], eax
		mov	esi, [ebp+arg_0]
		mov	eax, edi
		mov	[esp+68h+var_68], esi
		mov	edx, [ebp+var_18]
		call	sub_68F45960
		mov	[edi+158h], eax
		test	eax, eax
		jz	loc_68F470CF
		mov	eax, [ebp+var_20]
		xor	edx, edx
		xor	esi, esi
		mov	[eax+0B4h], edx
		mov	[eax+0B0h], esi
		mov	byte ptr [eax+0A0h], 1
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------
		align 10h

loc_68F47A20:				; CODE XREF: sub_68F468F0+160j
		cmp	ebx, 0FFFFFFFFh
		jz	loc_68F48282
		test	ebx, ebx
		jnz	loc_68F46A5F
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+arg_C]
		mov	[edx], eax
		mov	edx, 4
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F47A43:				; CODE XREF: sub_68F468F0+9C8j
		cmp	byte ptr [edi+1E9h], 0
		jz	loc_68F472EB
		jmp	loc_68F472BE
; ---------------------------------------------------------------------------

loc_68F47A55:				; CODE XREF: sub_68F468F0+33Cj
		mov	edx, [ebp+var_24]
		mov	[esp+68h+var_5C], edx
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_60], eax
		mov	ecx, [ebp+arg_0]
		mov	[esp+68h+var_64], ecx
		mov	ebx, [ebp+var_18]
		mov	[esp+68h+var_68], ebx
		call	dword ptr [ebx+38h]
		test	eax, eax
		jz	loc_68F48330
		mov	eax, [ebp+arg_C]
		lea	esi, [edi+1A0h]
		mov	ecx, [ebx+44h]
		sub	eax, ecx
		mov	[esp+68h+var_64], eax
		mov	edx, [ebx+44h]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	edx, ebx
		mov	[esp+68h+var_68], eax
		mov	eax, esi
		call	sub_68F42EC0
		mov	[edi+148h], eax
		test	eax, eax
		jz	loc_68F470CF
		call	sub_68F42DC0
		mov	[ebp+var_2D], 0
		mov	eax, [edi+1ACh]
		mov	[edi+1B0h], eax
		jmp	loc_68F46C58
; ---------------------------------------------------------------------------

loc_68F47AC9:				; CODE XREF: sub_68F468F0+2DCj
		mov	ecx, [ebp+var_18]
		mov	eax, edx
		mov	edx, [ebp+arg_C]
		add	eax, 50h
		mov	esi, [ecx+44h]
		sub	edx, esi
		mov	[esp+68h+var_64], edx
		mov	edx, [ebp+arg_0]
		mov	esi, [ecx+44h]
		add	edx, esi
		mov	[esp+68h+var_68], edx
		mov	edx, ecx
		call	sub_68F42EC0
		mov	[ebx+10h], eax
		mov	edx, [edi+13Ch]
		mov	eax, [edx+10h]
		test	eax, eax
		jz	loc_68F470CF
		mov	eax, [edi+168h]
		mov	ebx, [ebp+var_20]
		mov	[edx+14h], eax
		mov	eax, [ebx+5Ch]
		mov	[ebx+60h], eax
		jmp	loc_68F46CBD
; ---------------------------------------------------------------------------

loc_68F47B1A:				; CODE XREF: sub_68F468F0+2Aj
		lea	esi, [edi+120h]
		lea	eax, [edi+124h]
		mov	[ebp+var_24], esi
		jmp	loc_68F4692C
; ---------------------------------------------------------------------------

loc_68F47B2E:				; CODE XREF: sub_68F468F0+D0Cj
		mov	ecx, [ebp+var_18]
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+var_20]
		mov	ebx, [ecx+44h]
		add	eax, 50h
		sub	edx, ebx
		mov	[esp+68h+var_64], edx
		mov	edx, [ebp+arg_0]
		mov	ebx, [ecx+44h]
		add	edx, ebx
		mov	[esp+68h+var_68], edx
		mov	edx, ecx
		call	sub_68F42EC0
		mov	[ebp+var_34], eax
		test	eax, eax
		jz	loc_68F470CF
		mov	eax, [ebp+var_20]
		mov	[esp+68h+var_68], 0
		mov	edx, [ebp+var_34]
		add	eax, 84h
		call	sub_68F43DE0
		mov	edx, [ebp+var_20]
		mov	ebx, eax
		mov	eax, [edx+60h]
		mov	[edx+5Ch], eax
		mov	eax, [edi+110h]
		test	eax, eax
		jz	loc_68F46989
		cmp	byte ptr [edx+82h], 0
		jnz	loc_68F47F40
		mov	ecx, [ebp+var_20]
		cmp	byte ptr [ecx+81h], 0

loc_68F47BA7:				; CODE XREF: sub_68F468F0+1658j
		jnz	loc_68F46989
		test	ebx, ebx
		jz	loc_68F4831C
		cmp	byte ptr [ebx+22h], 0
		jnz	loc_68F46991
		mov	edx, 18h
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------
		align 10h

loc_68F47BD0:				; CODE XREF: sub_68F468F0+D55j
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_64], eax
		mov	ecx, [ebp+arg_0]
		mov	eax, edi
		mov	[esp+68h+var_68], ecx
		mov	edx, [ebp+var_18]
		call	sub_68F41EB0
		jmp	loc_68F4764B
; ---------------------------------------------------------------------------

loc_68F47BEC:				; CODE XREF: sub_68F468F0+91Aj
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		add	eax, 50h
		mov	[esp+68h+var_64], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+var_68], edx
		mov	edx, [ebp+var_18]
		call	sub_68F42EC0
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F470CF
		mov	[esp+68h+var_68], 24h
		mov	eax, esi
		mov	edx, ebx
		add	eax, 84h
		call	sub_68F43DE0
		test	eax, eax
		mov	edx, eax
		jz	loc_68F48344
		cmp	[eax], ebx
		jnz	loc_68F47297
		mov	[edi+13Ch], eax
		mov	ecx, [ebp+var_20]
		mov	eax, [ecx+5Ch]
		mov	[ecx+60h], eax
		mov	dword ptr [edx+18h], 0
		mov	byte ptr [edx+21h], 1

loc_68F47C51:				; CODE XREF: sub_68F468F0+18A2j
		mov	ebx, [edi+1DCh]
		xor	edx, edx
		mov	eax, [edi+13Ch]
		test	ebx, ebx
		jnz	short loc_68F47C6F
		mov	ecx, [edi+12Ch]
		test	ecx, ecx
		jnz	short loc_68F47C6F
		mov	dl, 1

loc_68F47C6F:				; CODE XREF: sub_68F468F0+1371j
					; sub_68F468F0+137Bj
		mov	[eax+22h], dl
		jmp	loc_68F47420
; ---------------------------------------------------------------------------

loc_68F47C77:				; CODE XREF: sub_68F468F0+252j
		mov	esi, [ebp+var_18]
		lea	ebx, [edi+1A0h]
		mov	eax, [ebp+arg_C]
		mov	ecx, [esi+44h]
		sub	eax, ecx
		mov	[esp+68h+var_64], eax
		mov	edx, [esi+44h]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	edx, esi
		mov	[esp+68h+var_68], eax
		mov	eax, ebx
		call	sub_68F42EC0
		mov	[edi+144h], eax
		test	eax, eax
		jz	loc_68F470CF
		mov	[ebp+var_2D], 0
		mov	eax, [edi+1ACh]
		mov	[edi+1B0h], eax
		jmp	loc_68F46B53
; ---------------------------------------------------------------------------

loc_68F47CC3:				; CODE XREF: sub_68F468F0+9BAj
		xor	ebx, ebx
		mov	[esp+68h+var_58], ebx
		mov	eax, [edi+148h]
		mov	[esp+68h+var_5C], eax
		mov	eax, [edi+144h]
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_60], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+54h]
		lea	ecx, [edi+1A0h]
		mov	eax, ecx
		call	sub_68F411F0
		mov	[ebp+var_2D], 0
		jmp	loc_68F472B0
; ---------------------------------------------------------------------------

loc_68F47D00:				; CODE XREF: sub_68F468F0+C27j
		lea	eax, [edi+1A0h]
		mov	[ebp+var_38], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_64], eax
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+var_68], edx
		mov	edx, [ebp+var_18]
		mov	eax, [ebp+var_38]
		call	sub_68F42EC0
		mov	[edi+140h], eax
		test	eax, eax
		jz	loc_68F470CF
		mov	[ebp+var_2D], 0
		mov	eax, [edi+1ACh]
		mov	[edi+1B0h], eax
		xor	eax, eax
		mov	[edi+148h], eax
		jmp	loc_68F4751D
; ---------------------------------------------------------------------------

loc_68F47D4C:				; CODE XREF: sub_68F468F0+FD0j
		mov	ebx, [edi+164h]
		mov	eax, [ebx+0B0h]
		mov	edx, [ebx+0A8h]
		lea	eax, [eax+eax*4]
		lea	eax, [edx+eax*4]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+0Ch]
		test	eax, eax
		mov	esi, eax
		jz	loc_68F470CF
		mov	eax, [ebx+0B0h]
		xor	edx, edx
		lea	eax, [eax+eax*4]
		lea	eax, [esi+eax*4]
		mov	[ebp+var_10], eax
		lea	eax, [esi+14h]
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_10]
		mov	[esp+68h+var_60], eax
		lea	eax, [ebp+var_14]
		mov	[esp+68h+var_64], eax
		mov	eax, edi
		mov	[esp+68h+var_68], esi
		call	sub_68F467E0
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+var_28]
		mov	[ebx], eax
		mov	[esp+68h+var_60], esi
		mov	eax, [edi+158h]
		mov	eax, [eax]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+80h]
		jmp	loc_68F478C6
; ---------------------------------------------------------------------------

loc_68F47DCC:				; CODE XREF: sub_68F468F0+1027j
		mov	eax, 20h
		mov	[edi+1D4h], eax
		mov	[esp+68h+var_68], 20h
		call	dword ptr [edi+0Ch]
		mov	[edi+1D0h], eax
		test	eax, eax
		mov	ebx, eax
		jnz	loc_68F47956
		mov	edx, 1
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------
		align 10h

loc_68F47E00:				; CODE XREF: sub_68F468F0+F4j
		mov	edx, 23h
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F47E0A:				; CODE XREF: sub_68F468F0+FDj
		mov	eax, [ebp+arg_C]
		xor	edx, edx
		mov	ecx, [ebp+arg_10]
		mov	[ecx], eax
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F47E19:				; CODE XREF: sub_68F468F0+AA4j
		mov	edx, [ebp+var_20]
		mov	eax, [edx+78h]
		mov	[edx+74h], eax

loc_68F47E22:				; CODE XREF: sub_68F468F0+AC9j
					; sub_68F468F0+B1Bj
		test	ebx, ebx
		jz	loc_68F46BE0
		mov	edx, ebx
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F47E31:				; CODE XREF: sub_68F468F0+10C6j
		mov	[esp+68h+var_68], 14h
		call	dword ptr [edi+0Ch]
		test	eax, eax
		mov	edx, eax
		jz	loc_68F470CF
		mov	dword ptr [eax+8], 0
		mov	ebx, [ebp+arg_0]
		mov	ecx, [ebp+var_28]
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+10h], 0
		xor	eax, eax
		cmp	esi, 29h
		mov	[ecx], ebx
		setz	al
		inc	eax
		mov	[edx], eax
		mov	[esp+68h+var_60], edx
		mov	eax, [edi+158h]
		mov	eax, [eax]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+80h]
		mov	[ebp+var_2D], 0
		jmp	loc_68F479BC
; ---------------------------------------------------------------------------

loc_68F47E99:				; CODE XREF: sub_68F468F0+C6Dj
		mov	[esp+68h+var_68], 24h
		mov	eax, esi
		mov	edx, offset byte_68F57A1C
		add	eax, 84h
		call	sub_68F43DE0
		test	eax, eax
		mov	ecx, eax
		mov	edx, 1
		jz	loc_68F475E0
		mov	eax, [edi+168h]
		mov	[ecx+14h], eax
		mov	byte ptr [esi+83h], 0
		mov	eax, [ecx+18h]
		mov	[esp+68h+var_58], eax
		mov	eax, [ecx+10h]
		mov	[esp+68h+var_5C], eax
		mov	eax, [ecx+14h]
		mov	[esp+68h+var_60], eax
		xor	eax, eax
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+74h]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+70h]
		mov	edx, 15h
		test	eax, eax
		jz	loc_68F475E0
		cmp	byte ptr [esi+83h], 0
		jz	loc_68F48151
		cmp	byte ptr [esi+82h], 0
		jnz	loc_68F47563
		mov	edx, [edi+6Ch]
		test	edx, edx
		jz	loc_68F47563
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		mov	edx, 16h
		test	eax, eax
		jnz	loc_68F47563
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F47F40:				; CODE XREF: sub_68F468F0+12A7j
		mov	eax, [edi+12Ch]
		test	eax, eax
		jmp	loc_68F47BA7
; ---------------------------------------------------------------------------

loc_68F47F4D:				; CODE XREF: sub_68F468F0+84Dj
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+var_28]
		mov	[ebx], esi
		mov	eax, [edx+1Ch]
		mov	[esp+68h+var_54], eax
		mov	eax, [edx+18h]
		mov	[esp+68h+var_58], eax
		mov	eax, [edx+10h]
		mov	[esp+68h+var_5C], eax
		mov	eax, [edx+14h]
		mov	[esp+68h+var_60], eax
		mov	eax, [edx]
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	ecx
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F47F84:				; CODE XREF: sub_68F468F0+54Bj
					; sub_68F468F0+56Ej
		mov	eax, [ebp+var_38]
		mov	ebx, [eax+10h]
		test	ebx, ebx
		jz	loc_68F470CF
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_64], eax
		mov	edx, [ebp+arg_0]
		mov	[esp+68h+var_68], edx
		mov	edx, [ebp+var_18]
		mov	eax, [ebp+var_38]
		call	sub_68F42E40
		test	eax, eax
		jz	loc_68F470CF
		mov	eax, [edi+1B0h]
		mov	[edi+14Ch], eax
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F47FC3:				; CODE XREF: sub_68F468F0+9EEj
		mov	[esp+68h+var_68], 24h
		mov	eax, esi
		mov	edx, offset byte_68F57A1C
		add	eax, 84h
		call	sub_68F43DE0
		test	eax, eax
		mov	edx, eax
		jz	loc_68F470CF
		cmp	byte ptr [edi+1E9h], 0
		jz	short loc_68F47FF7
		mov	eax, [edi+168h]
		mov	[edx+14h], eax

loc_68F47FF7:				; CODE XREF: sub_68F468F0+16FCj
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+83h], 0
		mov	eax, [edx+18h]
		mov	[esp+68h+var_58], eax
		mov	eax, [edx+10h]
		mov	[esp+68h+var_5C], eax
		mov	eax, [edx+14h]
		mov	[esp+68h+var_60], eax
		xor	eax, eax
		mov	[esp+68h+var_64], eax
		mov	eax, [edi+74h]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+70h]
		test	eax, eax
		jz	loc_68F48312
		mov	edx, [ebp+var_20]
		cmp	byte ptr [edx+83h], 0
		jz	short loc_68F48090
		cmp	byte ptr [edx+82h], 0
		jnz	loc_68F472E4
		mov	edx, [edi+6Ch]
		test	edx, edx
		jz	loc_68F472E4
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		test	eax, eax
		jnz	loc_68F472E4
		jmp	loc_68F47632
; ---------------------------------------------------------------------------

loc_68F48066:				; CODE XREF: sub_68F468F0+B0j
		xor	eax, eax
		cmp	esi, 3Ch
		setz	al
		mov	[esp+68h+var_68], eax
		mov	edx, ebx
		mov	eax, edi
		call	sub_68F48540
		test	eax, eax
		jz	loc_68F469DB
		mov	edx, eax
		jmp	loc_68F4758D
; ---------------------------------------------------------------------------
		align 10h

loc_68F48090:				; CODE XREF: sub_68F468F0+1747j
		mov	eax, [edi+144h]
		test	eax, eax
		jnz	loc_68F472E4
		mov	ecx, [ebp+var_20]
		mov	[ecx+81h], bl
		jmp	loc_68F472E4
; ---------------------------------------------------------------------------

loc_68F480AC:				; CODE XREF: sub_68F468F0+BBj
		mov	eax, [ebp+var_20]
		xor	esi, esi
		mov	byte ptr [eax+83h], 0
		mov	eax, [ebx+18h]
		mov	byte ptr [ebx+20h], 1
		mov	[esp+68h+var_58], eax
		mov	eax, [ebx+10h]
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebx+14h]
		mov	[esp+68h+var_64], esi
		mov	[esp+68h+var_60], eax
		mov	eax, [edi+74h]
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+70h]
		test	eax, eax
		jz	loc_68F4830E
		mov	byte ptr [ebx+20h], 0
		mov	edx, [ebp+var_20]
		mov	[ebp+var_2D], 0
		cmp	byte ptr [edx+83h], 0
		jnz	loc_68F48273
		movzx	eax, byte ptr [edx+82h]
		mov	[edx+80h], al
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F48110:				; CODE XREF: sub_68F468F0+9Bj
		mov	ebx, [ebp+var_20]
		cmp	esi, 3Ch
		movzx	eax, byte ptr [ebx+82h]
		mov	[ebx+80h], al
		jnz	loc_68F469D0	; jumptable 68F46982 default case
		mov	edx, [edi+78h]
		test	edx, edx
		jz	loc_68F469D0	; jumptable 68F46982 default case
		mov	eax, 1
		mov	[esp+68h+var_60], eax
		mov	esi, [ebp+var_34]
		mov	[esp+68h+var_64], esi
		mov	eax, [edi+4]
		mov	[esp+68h+var_68], eax
		call	edx
		jmp	loc_68F469DB
; ---------------------------------------------------------------------------

loc_68F48151:				; CODE XREF: sub_68F468F0+1618j
		mov	eax, [ebp+var_20]
		mov	[eax+81h], bl
		jmp	loc_68F47563
; ---------------------------------------------------------------------------

loc_68F4815F:				; CODE XREF: sub_68F468F0+15Aj
		mov	edx, 6
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F48169:				; CODE XREF: sub_68F468F0+151j
		mov	edx, [ebp+arg_10]
		mov	ecx, [ebp+arg_0]
		mov	[edx], ecx
		xor	edx, edx
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F48178:				; CODE XREF: sub_68F468F0+99Ej
		mov	[edi+13Ch], eax
		mov	ecx, [ebp+var_20]
		mov	eax, [ecx+5Ch]
		mov	[ecx+60h], eax
		mov	dword ptr [edx+18h], 0
		mov	byte ptr [edx+21h], 0
		jmp	loc_68F47C51
; ---------------------------------------------------------------------------

loc_68F48197:				; CODE XREF: sub_68F468F0+C03j
		cmp	byte ptr [eax+1], 4Fh
		jnz	loc_68F474F9

loc_68F481A1:				; CODE XREF: sub_68F468F0+BF0j
		mov	edx, [edi+1ACh]
		lea	ecx, [edi+1A0h]
		cmp	edx, [edi+1A8h]
		mov	[ebp+var_38], ecx
		jz	loc_68F48371

loc_68F481BC:				; CODE XREF: sub_68F468F0+1A96j
		mov	byte ptr [edx],	29h
		mov	edx, [edi+1ACh]
		inc	edx
		cmp	edx, [edi+1A8h]
		mov	[edi+1ACh], edx
		jz	loc_68F48356

loc_68F481D8:				; CODE XREF: sub_68F468F0+1A7Cj
		mov	byte ptr [edx],	0
		mov	edx, [edi+1ACh]
		mov	eax, [edi+1B0h]
		mov	ecx, [edi+84h]
		inc	edx
		mov	[edi+1ACh], edx
		mov	[edi+14Ch], eax
		mov	[edi+1B0h], edx
		jmp	loc_68F474F9
; ---------------------------------------------------------------------------

loc_68F48205:				; CODE XREF: sub_68F468F0+45Cj
		cmp	byte ptr [eax+1], 4Fh
		jnz	loc_68F46D52

loc_68F4820F:				; CODE XREF: sub_68F468F0+44Aj
		mov	edx, [edi+1ACh]
		lea	ecx, [edi+1A0h]
		cmp	edx, [edi+1A8h]
		mov	[ebp+var_38], ecx
		jz	loc_68F483A6

loc_68F4822A:				; CODE XREF: sub_68F468F0+1ACBj
		mov	byte ptr [edx],	29h
		mov	edx, [edi+1ACh]
		inc	edx
		cmp	edx, [edi+1A8h]
		mov	[edi+1ACh], edx
		jz	loc_68F4838B

loc_68F48246:				; CODE XREF: sub_68F468F0+1AB1j
		mov	byte ptr [edx],	0
		mov	edx, [edi+1ACh]
		mov	eax, [edi+1B0h]
		mov	ecx, [edi+84h]
		inc	edx
		mov	[edi+1ACh], edx
		mov	[edi+14Ch], eax
		mov	[edi+1B0h], edx
		jmp	loc_68F46D52
; ---------------------------------------------------------------------------

loc_68F48273:				; CODE XREF: sub_68F468F0+1808j
		mov	ebx, [ebp+var_20]
		movzx	eax, byte ptr [ebx+82h]
		jmp	loc_68F4760F
; ---------------------------------------------------------------------------

loc_68F48282:				; CODE XREF: sub_68F468F0+1133j
		mov	edx, 5
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F4828C:				; CODE XREF: sub_68F468F0+169j
		mov	ecx, [edi+90h]
		cmp	ecx, [ebp+var_18]
		jz	short loc_68F482A3
		mov	eax, [edi+12Ch]
		cmp	byte ptr [eax+14h], 0
		jz	short loc_68F482FF

loc_68F482A3:				; CODE XREF: sub_68F468F0+19A5j
		cmp	byte ptr [edi+1E8h], 0
		jnz	short loc_68F482BA
		cmp	ecx, [ebp+var_18]
		mov	edx, 3
		jz	loc_68F475E0

loc_68F482BA:				; CODE XREF: sub_68F468F0+19BAj
		mov	ecx, [ebp+var_18]
		mov	eax, 0FFFFFFFCh
		mov	[esp+68h+var_58], ecx
		mov	ebx, [ebp+arg_4]
		mov	[esp+68h+var_64], eax
		lea	eax, [edi+100h]
		mov	[esp+68h+var_5C], ebx
		mov	[esp+68h+var_60], ebx
		mov	[esp+68h+var_68], eax
		call	dword ptr [edi+100h]
		mov	edx, 1Dh
		inc	eax
		jz	loc_68F475E0
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		mov	esi, [ebp+arg_10]
		mov	[esi], eax
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F482FF:				; CODE XREF: sub_68F468F0+19B1j
		mov	esi, [ebp+arg_0]
		xor	edx, edx
		mov	ebx, [ebp+arg_10]
		mov	[ebx], esi
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F4830E:				; CODE XREF: sub_68F468F0+17F0j
		mov	byte ptr [ebx+20h], 0

loc_68F48312:				; CODE XREF: sub_68F468F0+1737j
		mov	edx, 15h
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F4831C:				; CODE XREF: sub_68F468F0+12BFj
		mov	edx, 0Bh
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F48326:				; CODE XREF: sub_68F468F0+A5j
		mov	edx, 0Ch
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F48330:				; CODE XREF: sub_68F468F0+362j
					; sub_68F468F0+652j ...
		mov	edx, 20h
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F4833A:				; CODE XREF: sub_68F468F0+EDBj
					; sub_68F468F0+F0Cj
		mov	edx, 2
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F48344:				; CODE XREF: sub_68F468F0+996j
					; sub_68F468F0+1339j
		xor	eax, eax
		mov	edx, 1
		mov	[edi+13Ch], eax
		jmp	loc_68F475E0
; ---------------------------------------------------------------------------

loc_68F48356:				; CODE XREF: sub_68F468F0+18E2j
		mov	eax, [ebp+var_38]
		call	sub_68F42600
		test	al, al
		jz	loc_68F470CF
		mov	edx, [edi+1ACh]
		jmp	loc_68F481D8
; ---------------------------------------------------------------------------

loc_68F48371:				; CODE XREF: sub_68F468F0+18C6j
		mov	eax, ecx
		call	sub_68F42600
		test	al, al
		jz	loc_68F470CF
		mov	edx, [edi+1ACh]
		jmp	loc_68F481BC
; ---------------------------------------------------------------------------

loc_68F4838B:				; CODE XREF: sub_68F468F0+1950j
		mov	eax, [ebp+var_38]
		call	sub_68F42600
		test	al, al
		jz	loc_68F470CF
		mov	edx, [edi+1ACh]
		jmp	loc_68F48246
; ---------------------------------------------------------------------------

loc_68F483A6:				; CODE XREF: sub_68F468F0+1934j
		mov	eax, ecx
		call	sub_68F42600
		test	al, al
		jz	loc_68F470CF
		mov	edx, [edi+1ACh]
		jmp	loc_68F4822A
sub_68F468F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F483C0	proc near		; CODE XREF: sub_68F48440+5Cj
					; sub_68F484B0+7Ap
					; DATA XREF: ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_0]
		lea	eax, [ebp+var_10]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_4]
		mov	[ebp+var_4], edi
		mov	edx, [ebx+90h]
		mov	[esp+28h+var_1C], eax
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_10], esi
		mov	[esp+28h+var_24], esi
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_28], edx
		call	dword ptr [edx]
		xor	ecx, ecx
		cmp	byte ptr [ebx+1E4h], 0
		mov	edx, [ebx+90h]
		mov	[esp+28h+var_24], edi
		mov	[esp+28h+var_20], eax
		setz	cl
		mov	eax, ebx
		mov	[esp+28h+var_14], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_18], ecx
		mov	ecx, [ebp+var_10]
		mov	[esp+28h+var_1C], ecx
		call	sub_68F468F0
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F483C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F48440	proc near		; DATA XREF: sub_68F42860+6o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_10], eax
		mov	eax, ebx
		call	sub_68F42D60
		test	eax, eax
		jz	short loc_68F48476
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F48476:				; CODE XREF: sub_68F48440+27j
		mov	eax, [ebp+var_10]
		mov	edx, offset sub_68F483C0
		mov	[ebx+118h], edx
		mov	[ebp+arg_C], esi
		mov	esi, [ebp+var_8]
		mov	[ebp+arg_8], edi
		mov	edi, [ebp+var_4]
		mov	[ebp+arg_0], ebx
		mov	ebx, [ebp+var_C]
		mov	[ebp+arg_4], eax
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F483C0
sub_68F48440	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F484B0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F484B0	proc near		; CODE XREF: .text:68F484A1j
					; DATA XREF: sub_68F468F0+D94o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_8]
		mov	edx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		mov	[esp+28h+var_20], esi
		mov	[esp+28h+var_24], edi
		setz	al
		mov	[esp+28h+var_1C], eax
		lea	eax, [ebp+arg_4]
		mov	[esp+28h+var_28], eax
		mov	eax, ebx
		call	sub_68F42AF0
		test	eax, eax
		jnz	short loc_68F484FE
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jnz	short loc_68F48510

loc_68F484FE:				; CODE XREF: sub_68F484B0+45j
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F48510:				; CODE XREF: sub_68F484B0+4Cj
		mov	ecx, offset sub_68F483C0
		mov	[ebx+118h], ecx
		mov	[esp+28h+var_1C], esi
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_28], ebx
		mov	[esp+28h+var_24], edx
		call	sub_68F483C0
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F484B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F48540	proc near		; CODE XREF: sub_68F468F0+1785p
					; sub_68F486C0+ED7p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 2Ch
		mov	ebx, edx
		movzx	eax, [ebp+arg_0]
		mov	[ebp+var_11], al
		mov	eax, [esi+130h]
		test	eax, eax
		jz	loc_68F48684
		mov	edi, eax
		mov	eax, [eax+8]
		mov	[esi+130h], eax

loc_68F4856D:				; CODE XREF: sub_68F48540+157j
		mov	byte ptr [ebx+20h], 1
		mov	eax, [esi+12Ch]
		mov	dword ptr [ebx+0Ch], 0
		movzx	edx, [ebp+var_11]
		mov	[edi+8], eax
		mov	eax, [esi+138h]
		mov	[esi+12Ch], edi
		mov	dword ptr [edi], 0
		mov	[edi+14h], dl
		mov	[edi+10h], eax
		mov	eax, [ebx+8]
		mov	dword ptr [edi+4], 0
		mov	ecx, [ebx+4]
		mov	[edi+0Ch], ebx
		mov	[ebp+var_18], ecx
		add	ecx, eax
		mov	[ebp+var_1C], ecx
		cmp	byte ptr [ebx+21h], 0
		jnz	short loc_68F48630
		xor	eax, eax
		mov	ecx, [ebp+var_18]
		mov	edx, [esi+138h]
		mov	[esp+38h+var_28], eax
		lea	eax, [ebp+var_10]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+var_34], ecx
		mov	[esp+38h+var_30], eax
		mov	eax, [esi+0E4h]
		mov	[esp+38h+var_38], eax
		mov	eax, esi
		call	sub_68F486C0

loc_68F485EC:				; CODE XREF: sub_68F48540+13Fj
		test	eax, eax
		mov	edx, eax
		jnz	short loc_68F48623
		mov	eax, [ebp+var_10]
		cmp	[ebp+var_1C], eax
		jz	short loc_68F48607
		cmp	dword ptr [esi+1E0h], 3
		jz	loc_68F486A0

loc_68F48607:				; CODE XREF: sub_68F48540+B8j
		mov	byte ptr [ebx+20h], 0
		mov	eax, [edi+8]
		mov	[esi+12Ch], eax
		mov	eax, [esi+130h]
		mov	[edi+8], eax
		mov	[esi+130h], edi

loc_68F48623:				; CODE XREF: sub_68F48540+B0j
					; sub_68F48540+173j
		mov	eax, edx

loc_68F48625:				; CODE XREF: sub_68F48540+15Dj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F48630:				; CODE XREF: sub_68F48540+79j
		mov	[esp+38h+var_30], ecx
		mov	eax, [esi+0E4h]
		lea	edx, [ebp+var_10]
		mov	[esp+38h+var_2C], edx
		mov	ecx, [ebp+var_18]
		mov	[esp+38h+var_38], eax
		mov	[esp+38h+var_34], ecx
		call	dword ptr [eax]
		xor	ecx, ecx
		mov	edx, [esi+0E4h]
		mov	[esp+38h+var_24], ecx
		lea	ecx, [ebp+var_10]
		mov	[esp+38h+var_28], ecx
		mov	ecx, [ebp+var_10]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+var_2C], ecx
		mov	ecx, [ebp+var_18]
		mov	[esp+38h+var_34], eax
		mov	eax, esi
		mov	[esp+38h+var_38], ecx
		call	sub_68F468F0
		jmp	loc_68F485EC
; ---------------------------------------------------------------------------

loc_68F48684:				; CODE XREF: sub_68F48540+1Cj
		mov	[esp+38h+var_38], 18h
		call	dword ptr [esi+0Ch]
		mov	edi, eax
		test	edi, edi
		mov	eax, 1
		jnz	loc_68F4856D
		jmp	short loc_68F48625
; ---------------------------------------------------------------------------
		align 10h

loc_68F486A0:				; CODE XREF: sub_68F48540+C1j
		mov	edi, [ebp+var_18]
		sub	eax, edi
		mov	[ebx+0Ch], eax
		mov	ebx, offset sub_68F49BA0
		mov	[esi+118h], ebx
		jmp	loc_68F48623
sub_68F48540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F486C0	proc near		; CODE XREF: sub_68F48540+A7p
					; sub_68F497B0+40p ...

var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_94		= dword	ptr -94h
var_8D		= byte ptr -8Dh
var_8C		= dword	ptr -8Ch
var_85		= byte ptr -85h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_6D		= byte ptr -6Dh
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_59		= byte ptr -59h
var_58		= byte ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_3E		= byte ptr -3Eh
var_3D		= byte ptr -3Dh
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_68], eax
		mov	ecx, [ebp+var_68]
		mov	[ebp+var_6C], edx
		mov	edx, [ebp+var_68]
		movzx	eax, [ebp+arg_10]
		cmp	[ecx+90h], ebx
		mov	edx, [edx+164h]
		mov	[ebp+var_6D], al
		mov	[ebp+var_74], edx
		jz	loc_68F48EE8
		mov	ecx, [ebp+var_68]
		mov	ecx, [ecx+12Ch]
		mov	[ebp+var_78], ecx
		add	ecx, 4
		mov	[ebp+var_7C], ecx

loc_68F48709:				; CODE XREF: sub_68F486C0+83Cj
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+var_78]
		mov	[ebx], eax
		jmp	short loc_68F48720
; ---------------------------------------------------------------------------
		align 10h

loc_68F48720:				; CODE XREF: sub_68F486C0+51j
					; sub_68F486C0+C2j
		mov	eax, [ebp+arg_4]
		lea	edx, [ebp+var_3C]
		mov	ecx, [ebp+arg_8]
		mov	[esp+0B8h+var_AC], edx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_3C], eax
		mov	[esp+0B8h+var_B0], ecx
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], ebx
		call	dword ptr [ebx+4]
		mov	edx, [ebp+var_3C]
		add	eax, 5		; switch 19 cases
		cmp	eax, 12h
		ja	short loc_68F48753 ; jumptable 68F4874C	default	case
		jmp	ds:off_68F57B5C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F48753:				; CODE XREF: sub_68F486C0+8Aj
		mov	ecx, [ebp+var_7C] ; jumptable 68F4874C default case
		mov	[ecx], edx

loc_68F48758:				; CODE XREF: sub_68F486C0+79Dj
					; sub_68F486C0+B9Cj ...
		mov	ebx, [ebp+var_68]
		mov	eax, [ebx+50h]
		test	eax, eax
		jnz	short loc_68F487A0

loc_68F48762:				; CODE XREF: sub_68F486C0+F7j
					; sub_68F486C0+2F1j ...
		mov	eax, [ebp+var_3C]

loc_68F48765:				; CODE XREF: sub_68F486C0+58Aj
					; sub_68F486C0+622j
		mov	[ebp+arg_4], eax
		mov	edx, [ebp+var_78]
		mov	ecx, [ebp+var_68]
		mov	[edx], eax
		mov	eax, [ecx+1E0h]
		cmp	eax, 2
		jz	loc_68F494B4
		cmp	eax, 3
		jnz	short loc_68F48720
		mov	eax, [ebp+var_3C]
		mov	ebx, [ebp+arg_C]
		mov	[ebx], eax

loc_68F4878C:				; CODE XREF: sub_68F486C0+18Cj
					; sub_68F486C0+636j ...
		xor	eax, eax

loc_68F4878E:				; CODE XREF: sub_68F486C0+1A3j
					; sub_68F486C0+2C2j ...
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F487A0:				; CODE XREF: sub_68F486C0+A0j
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, ebx
		call	sub_68F41EB0
		jmp	short loc_68F48762
; ---------------------------------------------------------------------------

loc_68F487B9:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		cmp	[ebp+var_6D], 0	; jumptable 68F4874C case -5
		mov	ecx, [ebp+var_7C]
		mov	[ecx], edx
		jnz	loc_68F48F01
		mov	ebx, [ebp+var_68]
		mov	ecx, [ebx+3Ch]
		test	ecx, ecx
		jz	loc_68F49183
		mov	eax, [ebp+arg_0]
		cmp	byte ptr [eax+48h], 0
		jnz	loc_68F4945C
		mov	eax, [ebx+2Ch]
		mov	edx, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_60], eax
		mov	eax, [ebx+30h]
		mov	[esp+0B8h+var_B0], edx
		mov	[esp+0B8h+var_B8], ecx
		mov	[esp+0B8h+var_A8], eax
		lea	eax, [ebp+var_60]
		mov	[esp+0B8h+var_AC], eax
		lea	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B4], eax
		call	dword ptr [ecx+3Ch]
		mov	edx, [ebx+2Ch]
		mov	eax, [ebp+var_60]
		mov	[esp+0B8h+var_B4], edx
		sub	eax, edx
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ebx+4]
		mov	[esp+0B8h+var_B8], eax
		call	dword ptr [ebx+3Ch]

loc_68F48827:				; CODE XREF: sub_68F486C0+ACBj
					; sub_68F486C0+AE9j ...
		mov	eax, [ebp+var_6C]
		test	eax, eax
		jz	loc_68F496A7
		mov	ecx, [ebp+var_68]
		mov	ebx, [ebp+var_6C]
		cmp	[ecx+138h], ebx
		jnz	loc_68F49526
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		jmp	loc_68F4878C
; ---------------------------------------------------------------------------

loc_68F48851:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	ebx, [ebp+var_7C] ; jumptable 68F4874C case 0
		mov	[ebx], edx
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+var_78]
		mov	[edx], eax
		mov	eax, 4
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F48868:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	eax, [ebp+var_7C] ; jumptable 68F4874C cases 1,2
		mov	[eax], edx
		mov	edx, [ebp+var_68]
		mov	eax, [edx+170h]
		test	eax, eax
		jz	loc_68F49149
		mov	esi, eax
		mov	eax, [eax]
		mov	[edx+170h], eax

loc_68F48888:				; CODE XREF: sub_68F486C0+ABEj
		mov	dword ptr [esi+2Ch], 0
		mov	edx, [ebp+var_68]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [esi+10h], 0
		mov	eax, [edx+16Ch]
		mov	ebx, [ecx+44h]
		mov	dword ptr [esi+14h], 0
		mov	[esi], eax
		mov	eax, [ebp+arg_4]
		mov	[edx+16Ch], esi
		add	eax, ebx
		mov	[esi+4], eax
		mov	[esp+0B8h+var_B4], eax
		mov	[esp+0B8h+var_B8], ecx
		call	dword ptr [ecx+20h]
		mov	ebx, [ebp+var_68]
		mov	[esi+8], eax
		mov	eax, [esi+4]
		inc	dword ptr [ebx+138h]
		mov	[ebp+var_50], eax
		mov	edx, [esi+8]
		add	edx, eax
		mov	[ebp+var_8C], edx
		mov	eax, [esi+24h]
		jmp	short loc_68F48916
; ---------------------------------------------------------------------------

loc_68F488E8:				; CODE XREF: sub_68F486C0+293j
		mov	eax, [esi+28h]
		sub	eax, edx
		lea	edi, [eax+eax]
		mov	[esp+0B8h+var_B4], edi
		mov	edx, [ebp+var_68]
		mov	eax, [esi+24h]
		mov	[esp+0B8h+var_B8], eax
		call	dword ptr [edx+10h]
		test	eax, eax
		jz	loc_68F48EB0
		mov	[esi+24h], eax
		mov	edx, eax
		lea	eax, [eax+edi]
		mov	[esi+28h], eax
		lea	eax, [edx+ebx]

loc_68F48916:				; CODE XREF: sub_68F486C0+226j
		mov	[ebp+var_4C], eax
		mov	eax, [esi+28h]
		mov	ebx, [ebp+var_8C]
		mov	edx, [ebp+arg_0]
		dec	eax
		lea	ecx, [ebp+var_4C]
		mov	[esp+0B8h+var_A8], eax
		lea	eax, [ebp+var_50]
		mov	[esp+0B8h+var_AC], ecx
		mov	[esp+0B8h+var_B0], ebx
		mov	[esp+0B8h+var_B8], edx
		mov	[esp+0B8h+var_B4], eax
		call	dword ptr [edx+3Ch]
		mov	ebx, [ebp+var_4C]
		mov	edx, [esi+24h]
		mov	ecx, [ebp+var_8C]
		sub	ebx, edx
		cmp	[ebp+var_50], ecx
		jnz	short loc_68F488E8
		mov	[esi+0Ch], edx
		mov	eax, [ebp+var_4C]
		mov	[esi+18h], ebx
		mov	byte ptr [eax],	0
		lea	eax, [esi+2Ch]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B0], eax
		lea	eax, [esi+0Ch]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, [ebp+var_68]
		call	sub_68F44F00
		test	eax, eax
		jnz	loc_68F4878E
		mov	ecx, [ebp+var_68]
		mov	edx, [ecx+34h]
		test	edx, edx
		jnz	loc_68F491F8
		mov	ebx, [ebp+var_68]
		mov	edx, [ebx+50h]
		test	edx, edx
		jnz	loc_68F4947C

loc_68F489A4:				; CODE XREF: sub_68F486C0+B51j
					; sub_68F486C0+DD3j
		mov	eax, [ebp+var_68]
		add	eax, 1A0h
		call	sub_68F411F0
		jmp	loc_68F48762
; ---------------------------------------------------------------------------

loc_68F489B6:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	[ebp+var_54], 0	; jumptable 68F4874C cases 3,4
		mov	eax, [ebp+var_7C]
		mov	[ebp+var_8D], 1
		mov	[eax], edx
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	eax, [edx+44h]
		mov	[esp+0B8h+var_B8], edx
		add	ebx, eax
		mov	[esp+0B8h+var_B4], ebx
		call	dword ptr [edx+20h]
		mov	[esp+0B8h+var_B8], ebx
		mov	esi, [ebp+var_68]
		mov	edx, [ebp+arg_0]
		add	eax, ebx
		add	esi, 1A0h
		mov	[esp+0B8h+var_B4], eax
		mov	eax, esi
		call	sub_68F42EC0
		mov	[ebp+var_38], eax
		test	eax, eax
		jz	loc_68F48EB0
		mov	ecx, [ebp+var_68]
		mov	edx, [ebp+arg_0]
		mov	eax, [ecx+1ACh]
		mov	[ecx+1B0h], eax
		lea	eax, [ebp+var_54]
		mov	[esp+0B8h+var_B0], eax
		lea	eax, [ebp+var_38]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, ecx
		call	sub_68F44F00
		test	eax, eax
		jnz	loc_68F4878E
		mov	ebx, [ebp+var_68]
		mov	edx, [ebx+34h]
		mov	eax, [ebx+1ACh]
		test	edx, edx
		mov	[ebx+1B0h], eax
		jnz	loc_68F49102

loc_68F48A54:				; CODE XREF: sub_68F486C0+A62j
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+38h]
		test	ecx, ecx
		jnz	loc_68F48FB2
		cmp	[ebp+var_8D], 0
		jz	short loc_68F48A79
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx+50h]
		test	eax, eax
		jnz	loc_68F494F0

loc_68F48A79:				; CODE XREF: sub_68F486C0+3A9j
					; sub_68F486C0+915j ...
		mov	eax, esi
		call	sub_68F411F0
		mov	eax, [ebp+var_54]
		jmp	short loc_68F48AA7
; ---------------------------------------------------------------------------

loc_68F48A85:				; CODE XREF: sub_68F486C0+3F9j
					; sub_68F486C0+40Ej
		mov	edx, [ebp+var_68]
		mov	ecx, [eax+4]
		mov	eax, [edx+178h]
		mov	[ebp+var_54], ecx
		mov	[ebx+4], eax
		mov	[edx+178h], ebx
		mov	eax, [ebx+8]
		mov	edx, [ebx]
		mov	[edx+4], eax
		mov	eax, ecx

loc_68F48AA7:				; CODE XREF: sub_68F486C0+3C3j
		test	eax, eax
		jz	loc_68F48FF7
		mov	ecx, [ebp+var_68]
		mov	ebx, eax
		mov	edx, [ecx+68h]
		test	edx, edx
		jz	short loc_68F48A85
		mov	eax, [eax]
		mov	eax, [eax]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ecx+4]
		mov	[esp+0B8h+var_B8], eax
		call	edx
		mov	eax, [ebp+var_54]
		jmp	short loc_68F48A85
; ---------------------------------------------------------------------------

loc_68F48AD0:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	ebx, [ebp+var_68] ; jumptable 68F4874C case 5
		mov	eax, [ebp+var_6C]
		mov	ecx, [ebp+var_7C]
		cmp	[ebx+138h], eax
		mov	[ecx], edx
		jz	loc_68F4952E
		mov	edx, [ebx+16Ch]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_94], edx
		mov	[ebx+16Ch], eax
		mov	eax, [ebx+170h]
		mov	[edx], eax
		mov	eax, [ebp+arg_4]
		mov	[ebx+170h], edx
		mov	edx, [ecx+44h]
		mov	[esp+0B8h+var_B8], ecx
		lea	ebx, [eax+edx*2]
		mov	[esp+0B8h+var_B4], ebx
		call	dword ptr [ecx+20h]
		mov	ecx, [ebp+var_94]
		mov	edx, [ecx+8]
		cmp	edx, eax
		jnz	loc_68F49726
		cld
		mov	esi, [ecx+4]
		cmp	edx, edx
		mov	edi, ebx
		mov	ecx, edx
		repe cmpsb
		jnz	loc_68F49726
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+38h]
		dec	dword ptr [edx+138h]
		test	ecx, ecx
		jnz	loc_68F48F1B
		mov	eax, [ebp+var_68]
		mov	eax, [eax+50h]
		test	eax, eax
		jnz	loc_68F49237

loc_68F48B64:				; CODE XREF: sub_68F486C0+8EDj
					; sub_68F486C0+B8Fj
		mov	edx, [ebp+var_94]
		mov	eax, [edx+2Ch]
		jmp	short loc_68F48B99
; ---------------------------------------------------------------------------
		align 10h

loc_68F48B70:				; CODE XREF: sub_68F486C0+4EBj
					; sub_68F486C0+506j
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_94]
		mov	edx, [ebp+var_68]
		mov	[ecx+2Ch], eax
		mov	eax, [edx+178h]
		mov	[ebx+4], eax
		mov	[edx+178h], ebx
		mov	eax, [ebx+8]
		mov	edx, [ebx]
		mov	[edx+4], eax
		mov	eax, [ecx+2Ch]

loc_68F48B99:				; CODE XREF: sub_68F486C0+4ADj
		test	eax, eax
		jz	loc_68F48FF7
		mov	ecx, [ebp+var_68]
		mov	ebx, eax
		mov	edx, [ecx+68h]
		test	edx, edx
		jz	short loc_68F48B70
		mov	eax, [eax]
		mov	eax, [eax]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ecx+4]
		mov	[esp+0B8h+var_B8], eax
		call	edx
		mov	edx, [ebp+var_94]
		mov	eax, [edx+2Ch]
		jmp	short loc_68F48B70
; ---------------------------------------------------------------------------

loc_68F48BC8:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	eax, [ebp+var_68] ; jumptable 68F4874C case 6
		mov	ecx, [ebp+var_7C]
		mov	ebx, [eax+3Ch]
		mov	[ecx], edx
		test	ebx, ebx
		jz	loc_68F491CE
		mov	edx, [ebp+arg_0]
		cmp	byte ptr [edx+48h], 0
		jnz	loc_68F491AE
		lea	edi, [ebp+arg_4]
		lea	esi, [ebp+var_64]
		jmp	short loc_68F48BF5
; ---------------------------------------------------------------------------

loc_68F48BF0:				; CODE XREF: sub_68F486C0+588j
		mov	eax, [ebp+var_78]
		mov	[eax], edx

loc_68F48BF5:				; CODE XREF: sub_68F486C0+52Ej
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx+2Ch]
		mov	[ebp+var_64], eax
		mov	eax, [ecx+30h]
		mov	[esp+0B8h+var_AC], esi
		mov	[esp+0B8h+var_B4], edi
		mov	[esp+0B8h+var_A8], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], eax
		call	dword ptr [eax+3Ch]
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_7C]
		mov	ecx, [ebp+var_68]
		mov	[edx], eax
		mov	edx, [ecx+2Ch]
		mov	eax, [ebp+var_64]
		mov	[esp+0B8h+var_B4], edx
		sub	eax, edx
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ecx+4]
		mov	[esp+0B8h+var_B8], eax
		call	ebx
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_3C]
		cmp	edx, eax
		jnz	short loc_68F48BF0
		jmp	loc_68F48765
; ---------------------------------------------------------------------------

loc_68F48C4F:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	ecx, [ebp+var_7C] ; jumptable 68F4874C case 7
		mov	ebx, [ebp+var_68]
		mov	[ecx], edx
		mov	edx, [ebx+3Ch]
		test	edx, edx
		jnz	loc_68F49134

loc_68F48C62:				; CODE XREF: sub_68F486C0+676j
					; sub_68F486C0+A23j
		mov	eax, [ebp+var_68]
		mov	ebx, [eax+50h]
		test	ebx, ebx
		jz	loc_68F48762
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, [ebp+var_68]
		call	sub_68F41EB0
		jmp	loc_68F48762
; ---------------------------------------------------------------------------

loc_68F48C8D:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	ecx, [ebp+var_7C] ; jumptable 68F4874C case 8
		mov	ebx, [ebp+var_68]
		mov	[ecx], edx
		mov	edx, [ebx+48h]
		test	edx, edx
		jnz	loc_68F49127
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+50h]
		test	ecx, ecx
		jnz	loc_68F48FDA

loc_68F48CAE:				; CODE XREF: sub_68F486C0+932j
					; sub_68F486C0+A6Fj
		movzx	eax, [ebp+var_6D]
		lea	ebx, [ebp+var_3C]
		mov	edx, [ebp+arg_C]
		mov	[esp+0B8h+var_B8], ebx
		mov	ecx, [ebp+arg_8]
		mov	[esp+0B8h+var_AC], eax
		mov	eax, [ebp+var_68]
		mov	[esp+0B8h+var_B0], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], ecx
		call	sub_68F42110
		test	eax, eax
		jnz	loc_68F4878E
		mov	eax, [ebp+var_3C]
		test	eax, eax
		jnz	loc_68F48765
		mov	eax, [ebp+var_68]
		mov	edx, offset sub_68F49AE0
		mov	[eax+118h], edx
		jmp	loc_68F4878C
; ---------------------------------------------------------------------------
		align 10h

loc_68F48D00:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	eax, [ebp+var_7C] ; jumptable 68F4874C case 9
		mov	ecx, [ebp+arg_0]
		mov	[eax], edx
		mov	eax, [ebp+var_3C]
		mov	edx, [ecx+44h]
		mov	[esp+0B8h+var_B8], ecx
		mov	ebx, [ebp+arg_4]
		sub	eax, edx
		mov	[esp+0B8h+var_B0], eax
		add	edx, ebx
		mov	[esp+0B8h+var_B4], edx
		call	dword ptr [ecx+30h]
		mov	[ebp+var_3E], al
		test	al, al
		jz	loc_68F49030
		mov	ebx, [ebp+var_68]
		mov	edx, [ebx+3Ch]
		test	edx, edx
		jz	loc_68F48C62
		mov	ecx, 1
		lea	eax, [ebp+var_3E]
		mov	[esp+0B8h+var_B0], ecx

loc_68F48D48:				; CODE XREF: sub_68F486C0+A84j
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0B8h+var_B8], eax
		call	edx
		jmp	loc_68F48762
; ---------------------------------------------------------------------------

loc_68F48D59:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		cmp	[ebp+var_6D], 0	; jumptable 68F4874C case -4
		mov	ecx, [ebp+var_7C]
		mov	[ecx], edx
		jnz	loc_68F48F01
		mov	esi, [ebp+var_6C]
		mov	eax, 3
		test	esi, esi
		jle	loc_68F4878E
		mov	ebx, [ebp+var_68]
		mov	eax, 0Dh
		mov	edx, [ebp+var_6C]
		cmp	[ebx+138h], edx
		jz	loc_68F48E2B
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F48D94:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		cmp	[ebp+var_6D], 0	; jumptable 68F4874C case -3
		jnz	loc_68F48F0E
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+var_7C]
		mov	ecx, [ebp+var_68]
		mov	[eax], edx
		mov	edx, [ecx+3Ch]
		test	edx, edx
		jnz	loc_68F49216
		mov	ebx, [ebp+var_68]
		mov	eax, [ebx+50h]
		test	eax, eax
		jnz	loc_68F49498

loc_68F48DC2:				; CODE XREF: sub_68F486C0+B72j
					; sub_68F486C0+DEFj
		mov	edi, [ebp+var_6C]
		mov	eax, 3
		test	edi, edi
		jz	loc_68F4878E
		mov	edx, [ebp+var_68]
		mov	eax, 0Dh
		mov	ecx, [ebp+var_6C]
		cmp	[edx+138h], ecx
		jnz	loc_68F4878E
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_C]
		mov	[ebx], eax
		jmp	loc_68F4878C
; ---------------------------------------------------------------------------

loc_68F48DF6:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		cmp	[ebp+var_6D], 0	; jumptable 68F4874C case -2
		mov	eax, 6
		mov	ebx, [ebp+var_7C]
		mov	[ebx], edx
		jz	loc_68F4878E
		mov	eax, [ebp+arg_4]

loc_68F48E0D:				; CODE XREF: sub_68F486C0+856j
		mov	ebx, [ebp+arg_C]
		mov	[ebx], eax
		jmp	loc_68F4878C
; ---------------------------------------------------------------------------

loc_68F48E17:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		cmp	[ebp+var_6D], 0	; jumptable 68F4874C case -1
		mov	eax, 5
		mov	ecx, [ebp+var_7C]
		mov	[ecx], edx
		jz	loc_68F4878E

loc_68F48E2B:				; CODE XREF: sub_68F486C0+6C9j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		jmp	loc_68F4878C
; ---------------------------------------------------------------------------

loc_68F48E38:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	ecx, [ebp+var_7C] ; jumptable 68F4874C case 10
		mov	ebx, [ebp+arg_0]
		mov	[ecx], edx
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], ebx
		mov	[esp+0B8h+var_B4], eax
		call	dword ptr [ebx+2Ch]
		test	eax, eax
		js	loc_68F49760
		mov	edx, [ebp+var_68]
		mov	edi, [edx+3Ch]
		test	edi, edi
		jz	loc_68F48758
		mov	[esp+0B8h+var_B8], eax
		lea	ebx, [ebp+var_58]
		mov	[esp+0B8h+var_B4], ebx
		call	sub_68F53880
		mov	[esp+0B8h+var_B0], eax
		mov	ecx, [ebp+var_68]
		mov	[esp+0B8h+var_B4], ebx
		mov	eax, [ecx+4]
		mov	[esp+0B8h+var_B8], eax
		call	dword ptr [ecx+3Ch]
		jmp	loc_68F48762
; ---------------------------------------------------------------------------

loc_68F48E8B:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	ebx, [ebp+var_7C] ; jumptable 68F4874C case 11
		mov	[ebx], edx
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, [ebp+var_68]
		call	sub_68F43490

loc_68F48EA8:				; CODE XREF: sub_68F486C0+826j
		test	eax, eax
		jnz	loc_68F48762

loc_68F48EB0:				; CODE XREF: sub_68F486C0+242j
					; sub_68F486C0+33Fj ...
		mov	eax, 1
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F48EBA:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	eax, [ebp+var_7C] ; jumptable 68F4874C case 12
		mov	[eax], edx
		mov	eax, 11h
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F48EC9:				; CODE XREF: sub_68F486C0+8Cj
					; DATA XREF: .rdata:off_68F57B5Co
		mov	eax, [ebp+var_7C] ; jumptable 68F4874C case 13
		mov	[eax], edx
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, [ebp+var_68]
		call	sub_68F43590
		jmp	short loc_68F48EA8
; ---------------------------------------------------------------------------

loc_68F48EE8:				; CODE XREF: sub_68F486C0+31j
		mov	eax, [ebp+var_68]
		add	ecx, 120h
		mov	[ebp+var_78], ecx
		add	eax, 124h
		mov	[ebp+var_7C], eax
		jmp	loc_68F48709
; ---------------------------------------------------------------------------

loc_68F48F01:				; CODE XREF: sub_68F486C0+102j
					; sub_68F486C0+6A2j
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		jmp	loc_68F4878C
; ---------------------------------------------------------------------------

loc_68F48F0E:				; CODE XREF: sub_68F486C0+6D8j
		mov	ecx, [ebp+var_7C]
		mov	[ecx], edx
		mov	eax, [ebp+arg_4]
		jmp	loc_68F48E0D
; ---------------------------------------------------------------------------

loc_68F48F1B:				; CODE XREF: sub_68F486C0+490j
		cmp	byte ptr [edx+0ECh], 0
		mov	eax, [ebp+var_94]
		mov	ebx, [eax+10h]
		setnz	al
		xor	edx, edx
		test	ebx, ebx
		setnz	dl
		test	edx, eax
		jz	short loc_68F48F95
		mov	edx, [ebp+var_94]
		mov	ecx, [edx+1Ch]
		mov	eax, [edx+0Ch]
		add	ecx, eax
		jmp	short loc_68F48F4D
; ---------------------------------------------------------------------------

loc_68F48F49:				; CODE XREF: sub_68F486C0+892j
		mov	[ecx], al
		inc	ebx
		inc	ecx

loc_68F48F4D:				; CODE XREF: sub_68F486C0+887j
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F48F49
		mov	edx, [ebp+var_68]
		mov	eax, [ebp+var_94]
		cmp	byte ptr [edx+0EDh], 0
		mov	ebx, [eax+14h]
		setnz	al
		xor	edx, edx
		test	ebx, ebx
		setnz	dl
		test	edx, eax
		jz	short loc_68F48F8C
		mov	edx, [ebp+var_68]
		movzx	eax, byte ptr [edx+1D8h]
		jmp	short loc_68F48F82
; ---------------------------------------------------------------------------

loc_68F48F81:				; CODE XREF: sub_68F486C0+8CAj
		inc	ebx

loc_68F48F82:				; CODE XREF: sub_68F486C0+8BFj
		mov	[ecx], al
		inc	ecx
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F48F81

loc_68F48F8C:				; CODE XREF: sub_68F486C0+8B3j
		mov	byte ptr [ecx],	0
		mov	ebx, [ebp+var_68]
		mov	ecx, [ebx+38h]

loc_68F48F95:				; CODE XREF: sub_68F486C0+877j
		mov	edx, [ebp+var_94]
		mov	ebx, [ebp+var_68]
		mov	eax, [edx+0Ch]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0B8h+var_B8], eax
		call	ecx
		jmp	loc_68F48B64
; ---------------------------------------------------------------------------

loc_68F48FB2:				; CODE XREF: sub_68F486C0+39Cj
		mov	eax, [eax+34h]
		test	eax, eax
		jz	short loc_68F48FC3
		mov	edx, [ebp+var_7C]
		mov	ebx, [ebp+var_78]
		mov	eax, [edx]
		mov	[ebx], eax

loc_68F48FC3:				; CODE XREF: sub_68F486C0+8F7j
		mov	eax, [ebp+var_38]
		mov	edx, [ebp+var_68]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [edx+4]
		mov	[esp+0B8h+var_B8], eax
		call	ecx
		jmp	loc_68F48A79
; ---------------------------------------------------------------------------

loc_68F48FDA:				; CODE XREF: sub_68F486C0+5E8j
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, [ebp+var_68]
		call	sub_68F41EB0
		jmp	loc_68F48CAE
; ---------------------------------------------------------------------------

loc_68F48FF7:				; CODE XREF: sub_68F486C0+3E9j
					; sub_68F486C0+4DBj
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx+138h]
		test	eax, eax
		jnz	loc_68F48762
		mov	[esp+0B8h+var_B8], ecx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_C]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ebp+var_3C]
		mov	[esp+0B8h+var_AC], ebx
		mov	[esp+0B8h+var_B4], eax
		call	sub_68F43630
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------
		align 10h

loc_68F49030:				; CODE XREF: sub_68F486C0+668j
		mov	ebx, [ebp+arg_0]
		mov	edx, [ebp+var_3C]
		mov	eax, [ebp+var_74]
		mov	ecx, [ebx+44h]
		add	eax, 50h
		sub	edx, ecx
		mov	[esp+0B8h+var_B4], edx
		mov	edx, [ebp+arg_4]
		add	ecx, edx
		mov	[esp+0B8h+var_B8], ecx
		mov	edx, ebx
		call	sub_68F42EC0
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F48EB0
		mov	[esp+0B8h+var_B8], 0
		mov	edx, eax
		mov	eax, [ebp+var_74]
		call	sub_68F43DE0
		mov	[ebp+var_80], eax
		mov	edx, [ebp+var_74]
		mov	eax, [edx+60h]
		cmp	byte ptr [edx+81h], 0
		mov	[edx+5Ch], eax
		jz	short loc_68F49091
		cmp	byte ptr [edx+82h], 0
		jz	loc_68F494BE

loc_68F49091:				; CODE XREF: sub_68F486C0+9C2j
		mov	edi, [ebp+var_80]
		test	edi, edi
		jz	loc_68F4979B
		mov	ecx, [ebp+var_80]
		cmp	byte ptr [ecx+22h], 0
		jz	loc_68F49791

loc_68F490A9:				; CODE XREF: sub_68F486C0+E03j
		mov	eax, [ebp+var_80]
		cmp	byte ptr [eax+20h], 0
		jnz	loc_68F49787
		mov	edi, [eax+1Ch]
		test	edi, edi
		jnz	loc_68F4976A
		mov	esi, [eax+4]
		test	esi, esi
		jz	loc_68F49254
		mov	edx, [ebp+var_68]
		cmp	byte ptr [edx+134h], 0
		jnz	loc_68F4958A
		mov	ecx, edx
		mov	edx, [edx+78h]
		test	edx, edx
		jz	loc_68F48C62
		xor	ebx, ebx
		mov	[esp+0B8h+var_B0], ebx
		mov	eax, [eax]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ecx+4]

loc_68F490F8:				; CODE XREF: sub_68F486C0+E26j
		mov	[esp+0B8h+var_B8], eax
		call	edx
		jmp	loc_68F48762
; ---------------------------------------------------------------------------

loc_68F49102:				; CODE XREF: sub_68F486C0+38Ej
		mov	eax, [ebx+188h]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [ebp+var_38]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebx+4]
		mov	[esp+0B8h+var_B8], eax
		call	edx
		mov	[ebp+var_8D], 0
		jmp	loc_68F48A54
; ---------------------------------------------------------------------------

loc_68F49127:				; CODE XREF: sub_68F486C0+5DAj
		mov	eax, [ebx+4]
		mov	[esp+0B8h+var_B8], eax
		call	edx
		jmp	loc_68F48CAE
; ---------------------------------------------------------------------------

loc_68F49134:				; CODE XREF: sub_68F486C0+59Cj
		mov	[ebp+var_59], 0Ah
		mov	esi, 1
		lea	eax, [ebp+var_59]
		mov	[esp+0B8h+var_B0], esi
		jmp	loc_68F48D48
; ---------------------------------------------------------------------------

loc_68F49149:				; CODE XREF: sub_68F486C0+1B8j
		mov	[esp+0B8h+var_B8], 30h
		mov	ecx, [ebp+var_68]
		call	dword ptr [ecx+0Ch]
		test	eax, eax
		mov	esi, eax
		jz	loc_68F48EB0
		mov	[esp+0B8h+var_B8], 20h
		mov	ebx, [ebp+var_68]
		call	dword ptr [ebx+0Ch]
		mov	[esi+24h], eax
		test	eax, eax
		jz	loc_68F49774
		lea	eax, [eax+20h]
		mov	[esi+28h], eax
		jmp	loc_68F48888
; ---------------------------------------------------------------------------

loc_68F49183:				; CODE XREF: sub_68F486C0+110j
		mov	eax, [ebp+var_68]
		mov	eax, [eax+50h]
		test	eax, eax
		jz	loc_68F48827
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B4], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, [ebp+var_68]
		call	sub_68F41EB0
		jmp	loc_68F48827
; ---------------------------------------------------------------------------

loc_68F491AE:				; CODE XREF: sub_68F486C0+522j
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_3C]
		mov	[esp+0B8h+var_B4], edx
		sub	eax, edx
		mov	edx, [ebp+var_68]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [edx+4]
		mov	[esp+0B8h+var_B8], eax
		call	ebx
		jmp	loc_68F48762
; ---------------------------------------------------------------------------

loc_68F491CE:				; CODE XREF: sub_68F486C0+515j
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx+50h]
		test	eax, eax
		jz	loc_68F48762
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, ecx
		call	sub_68F41EB0
		jmp	loc_68F48762
; ---------------------------------------------------------------------------

loc_68F491F8:				; CODE XREF: sub_68F486C0+2D0j
		mov	eax, [ecx+188h]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [esi+0Ch]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ecx+4]
		mov	[esp+0B8h+var_B8], eax
		call	edx
		jmp	loc_68F489A4
; ---------------------------------------------------------------------------

loc_68F49216:				; CODE XREF: sub_68F486C0+6EEj
		mov	[ebp+var_3D], 0Ah
		mov	eax, 1
		mov	[esp+0B8h+var_B0], eax
		lea	eax, [ebp+var_3D]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ecx+4]
		mov	[esp+0B8h+var_B8], eax
		call	edx
		jmp	loc_68F48DC2
; ---------------------------------------------------------------------------

loc_68F49237:				; CODE XREF: sub_68F486C0+49Ej
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, [ebp+var_68]
		call	sub_68F41EB0
		jmp	loc_68F48B64
; ---------------------------------------------------------------------------

loc_68F49254:				; CODE XREF: sub_68F486C0+A06j
		mov	edx, [ebp+var_68]
		mov	eax, [edx+70h]
		test	eax, eax
		jz	loc_68F48758
		mov	ecx, [ebp+var_80]
		mov	byte ptr [ecx+20h], 1
		mov	ebx, [edx+164h]
		mov	[ebp+var_85], 0
		mov	eax, [ebx+9Ch]
		mov	[ebp+var_84], ebx
		test	eax, eax
		jz	loc_68F49311
		mov	ecx, [edx+1ACh]
		cmp	ecx, [edx+1A8h]
		jz	loc_68F49702

loc_68F4929C:				; CODE XREF: sub_68F486C0+1061j
		mov	byte ptr [ecx],	3Dh
		mov	edx, [ebp+var_68]
		mov	ebx, [ebp+var_84]
		mov	ecx, [edx+1ACh]
		inc	ecx
		mov	[edx+1ACh], ecx
		mov	edx, [ebx+9Ch]
		mov	ebx, [ebp+var_68]
		mov	esi, [edx+14h]
		movzx	eax, byte ptr [ebx+1D8h]
		cmp	al, 1
		adc	esi, 0FFFFFFFFh
		xor	ebx, ebx
		jmp	short loc_68F49306
; ---------------------------------------------------------------------------

loc_68F492D1:				; CODE XREF: sub_68F486C0+C48j
		mov	eax, [ebp+var_68]
		cmp	ecx, [eax+1A8h]
		jz	loc_68F495D1

loc_68F492E0:				; CODE XREF: sub_68F486C0+F2Cj
		mov	edx, [ebp+var_84]
		mov	eax, [edx+9Ch]
		mov	eax, [eax+10h]
		movzx	eax, byte ptr [ebx+eax]
		inc	ebx
		mov	[ecx], al
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+1ACh]
		inc	ecx
		mov	[eax+1ACh], ecx

loc_68F49306:				; CODE XREF: sub_68F486C0+C0Fj
		cmp	ebx, esi
		jl	short loc_68F492D1
		mov	[ebp+var_85], 1

loc_68F49311:				; CODE XREF: sub_68F486C0+BC4j
		mov	edx, [ebp+var_84]
		lea	eax, [ebp+var_48]
		add	edx, 3Ch
		call	sub_68F437D0

loc_68F49322:				; CODE XREF: sub_68F486C0+C79j
					; sub_68F486C0+D48j
		lea	eax, [ebp+var_48]
		call	sub_68F437F0
		test	eax, eax
		mov	esi, eax
		jz	loc_68F495F1
		mov	edi, [eax+4]
		test	edi, edi
		jz	short loc_68F49322
		cmp	[ebp+var_85], 0
		jz	loc_68F4944E
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+1ACh]
		cmp	ecx, [edx+1A8h]
		jz	loc_68F495B0

loc_68F4935D:				; CODE XREF: sub_68F486C0+F0Cj
		mov	byte ptr [ecx],	0Ch
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+1ACh]
		inc	ecx
		mov	[eax+1ACh], ecx

loc_68F49370:				; CODE XREF: sub_68F486C0+D97j
		mov	ebx, [esi]
		jmp	short loc_68F49396
; ---------------------------------------------------------------------------

loc_68F49374:				; CODE XREF: sub_68F486C0+CDBj
		mov	edx, [ebp+var_68]
		cmp	ecx, [edx+1A8h]
		jz	loc_68F4940D

loc_68F49383:				; CODE XREF: sub_68F486C0+D6Cj
		mov	[ecx], al
		inc	ebx
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+1ACh]
		inc	ecx
		mov	[edx+1ACh], ecx

loc_68F49396:				; CODE XREF: sub_68F486C0+CB2j
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F49374
		mov	ebx, [ebp+var_68]
		cmp	ecx, [ebx+1A8h]
		jz	loc_68F4950C

loc_68F493AC:				; CODE XREF: sub_68F486C0+E61j
		mov	byte ptr [ecx],	3Dh
		mov	eax, [ebp+var_68]
		mov	edx, [esi+4]
		mov	ecx, [eax+1ACh]
		mov	edi, [edx+14h]
		inc	ecx
		mov	[eax+1ACh], ecx
		movzx	eax, byte ptr [eax+1D8h]
		cmp	al, 1
		adc	edi, 0FFFFFFFFh
		xor	ebx, ebx
		jmp	short loc_68F493FD
; ---------------------------------------------------------------------------

loc_68F493D5:				; CODE XREF: sub_68F486C0+D3Fj
		mov	eax, [ebp+var_68]
		cmp	ecx, [eax+1A8h]
		jz	short loc_68F49431

loc_68F493E0:				; CODE XREF: sub_68F486C0+D8Cj
		mov	eax, [esi+4]
		mov	eax, [eax+10h]
		movzx	eax, byte ptr [ebx+eax]
		inc	ebx
		mov	[ecx], al
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+1ACh]
		inc	ecx
		mov	[eax+1ACh], ecx

loc_68F493FD:				; CODE XREF: sub_68F486C0+D13j
		cmp	ebx, edi
		jl	short loc_68F493D5
		mov	[ebp+var_85], 1
		jmp	loc_68F49322
; ---------------------------------------------------------------------------

loc_68F4940D:				; CODE XREF: sub_68F486C0+CBDj
		lea	eax, [edx+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F49538
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+1ACh]
		movzx	eax, byte ptr [ebx]
		jmp	loc_68F49383
; ---------------------------------------------------------------------------

loc_68F49431:				; CODE XREF: sub_68F486C0+D1Ej
		add	eax, 1A0h
		call	sub_68F42600
		test	al, al
		jz	loc_68F49538
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+1ACh]
		jmp	short loc_68F493E0
; ---------------------------------------------------------------------------

loc_68F4944E:				; CODE XREF: sub_68F486C0+C82j
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+1ACh]
		jmp	loc_68F49370
; ---------------------------------------------------------------------------

loc_68F4945C:				; CODE XREF: sub_68F486C0+11Dj
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	ebx, [ebp+var_68]
		mov	[esp+0B8h+var_B4], eax
		sub	edx, eax
		mov	[esp+0B8h+var_B0], edx
		mov	eax, [ebx+4]
		mov	[esp+0B8h+var_B8], eax
		call	ecx
		jmp	loc_68F48827
; ---------------------------------------------------------------------------

loc_68F4947C:				; CODE XREF: sub_68F486C0+2DEj
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, ebx
		call	sub_68F41EB0
		jmp	loc_68F489A4
; ---------------------------------------------------------------------------

loc_68F49498:				; CODE XREF: sub_68F486C0+6FCj
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, ebx
		call	sub_68F41EB0
		jmp	loc_68F48DC2
; ---------------------------------------------------------------------------

loc_68F494B4:				; CODE XREF: sub_68F486C0+B9j
		mov	eax, 23h
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F494BE:				; CODE XREF: sub_68F486C0+9CBj
		mov	esi, [ebp+var_80]
		test	esi, esi
		jnz	loc_68F490A9
		mov	eax, [ebp+var_68]
		mov	edx, [eax+78h]
		test	edx, edx
		jz	loc_68F48758
		mov	[esp+0B8h+var_B4], ebx
		xor	ecx, ecx
		mov	[esp+0B8h+var_B0], ecx
		mov	ecx, eax
		mov	eax, [ecx+4]
		jmp	loc_68F490F8
; ---------------------------------------------------------------------------
		align 10h

loc_68F494F0:				; CODE XREF: sub_68F486C0+3B3j
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	[esp+0B8h+var_B4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0B8h+var_B8], eax
		mov	eax, ecx
		call	sub_68F41EB0
		jmp	loc_68F48A79
; ---------------------------------------------------------------------------

loc_68F4950C:				; CODE XREF: sub_68F486C0+CE6j
		lea	eax, [ebx+1A0h]
		call	sub_68F42600
		test	al, al
		jz	short loc_68F49538
		mov	ecx, [ebx+1ACh]
		jmp	loc_68F493AC
; ---------------------------------------------------------------------------

loc_68F49526:				; CODE XREF: sub_68F486C0+17Ej
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+var_78]
		mov	[eax], edx

loc_68F4952E:				; CODE XREF: sub_68F486C0+421j
		mov	eax, 0Dh
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F49538:				; CODE XREF: sub_68F486C0+D5Aj
					; sub_68F486C0+D7Dj ...
		xor	edx, edx

loc_68F4953A:				; CODE XREF: sub_68F486C0+101Cj
					; sub_68F486C0+1052j ...
		mov	ebx, [ebp+var_80]
		test	edx, edx
		mov	byte ptr [ebx+20h], 0
		jz	loc_68F48EB0
		mov	eax, [ebx+18h]
		mov	[esp+0B8h+var_A8], eax
		mov	eax, [ebx+10h]
		mov	[esp+0B8h+var_AC], eax
		mov	eax, [ebx+14h]
		mov	[esp+0B8h+var_B4], edx
		mov	edx, [ebp+var_68]
		mov	[esp+0B8h+var_B0], eax
		mov	eax, [edx+74h]
		mov	[esp+0B8h+var_B8], eax
		call	dword ptr [edx+70h]
		test	eax, eax
		jz	loc_68F497A5
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx+1B0h]
		mov	[ecx+1ACh], eax
		jmp	loc_68F48762
; ---------------------------------------------------------------------------

loc_68F4958A:				; CODE XREF: sub_68F486C0+A16j
		mov	[esp+0B8h+var_B8], 0
		mov	edx, [ebp+var_80]
		mov	eax, [ebp+var_68]
		call	sub_68F48540
		test	eax, eax
		jz	loc_68F48762
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------
		align 10h

loc_68F495B0:				; CODE XREF: sub_68F486C0+C97j
		lea	eax, [edx+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F49538
		mov	ebx, [ebp+var_68]
		mov	ecx, [ebx+1ACh]
		jmp	loc_68F4935D
; ---------------------------------------------------------------------------

loc_68F495D1:				; CODE XREF: sub_68F486C0+C1Aj
		add	eax, 1A0h
		call	sub_68F42600
		test	al, al
		jz	loc_68F49538
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+1ACh]
		jmp	loc_68F492E0
; ---------------------------------------------------------------------------

loc_68F495F1:				; CODE XREF: sub_68F486C0+C6Ej
		mov	edx, [ebp+var_84]
		lea	eax, [ebp+var_48]
		call	sub_68F437D0

loc_68F495FF:				; CODE XREF: sub_68F486C0+F55j
					; sub_68F486C0+FE2j
		lea	eax, [ebp+var_48]
		call	sub_68F437F0
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F496B9
		cmp	byte ptr [eax+20h], 0
		jz	short loc_68F495FF
		cmp	[ebp+var_85], 0
		jz	short loc_68F49641
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+1ACh]
		cmp	ecx, [edx+1A8h]
		jz	loc_68F496E1

loc_68F49635:				; CODE XREF: sub_68F486C0+103Dj
		mov	byte ptr [ecx],	0Ch
		mov	edx, [ebp+var_68]
		inc	dword ptr [edx+1ACh]

loc_68F49641:				; CODE XREF: sub_68F486C0+F5Ej
		mov	ebx, [ebx]
		movzx	eax, byte ptr [ebx]
		test	al, al
		jz	short loc_68F4969B
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+1ACh]
		jmp	short loc_68F4966F
; ---------------------------------------------------------------------------

loc_68F49655:				; CODE XREF: sub_68F486C0+FB8j
					; sub_68F486C0+FD9j
		mov	[ecx], al
		inc	ebx
		mov	edx, [ebp+var_68]
		mov	ecx, [edx+1ACh]
		inc	ecx
		mov	[edx+1ACh], ecx
		movzx	eax, byte ptr [ebx]
		test	al, al
		jz	short loc_68F4969B

loc_68F4966F:				; CODE XREF: sub_68F486C0+F93j
		mov	edx, [ebp+var_68]
		cmp	ecx, [edx+1A8h]
		jnz	short loc_68F49655
		lea	eax, [edx+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F49538
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+1ACh]
		movzx	eax, byte ptr [ebx]
		jmp	short loc_68F49655
; ---------------------------------------------------------------------------

loc_68F4969B:				; CODE XREF: sub_68F486C0+F88j
					; sub_68F486C0+FADj
		mov	[ebp+var_85], 1
		jmp	loc_68F495FF
; ---------------------------------------------------------------------------

loc_68F496A7:				; CODE XREF: sub_68F486C0+16Cj
		mov	ebx, [ebp+arg_8]
		mov	eax, 3
		mov	ecx, [ebp+var_78]
		mov	[ecx], ebx
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F496B9:				; CODE XREF: sub_68F486C0+F4Bj
		mov	ebx, [ebp+var_68]
		mov	ecx, [ebx+1ACh]
		cmp	ecx, [ebx+1A8h]
		jz	short loc_68F49735

loc_68F496CA:				; CODE XREF: sub_68F486C0+1094j
		mov	byte ptr [ecx],	0
		mov	edx, [ebp+var_68]
		inc	dword ptr [edx+1ACh]
		mov	edx, [edx+1B0h]
		jmp	loc_68F4953A
; ---------------------------------------------------------------------------

loc_68F496E1:				; CODE XREF: sub_68F486C0+F6Fj
		lea	eax, [edx+1A0h]
		call	sub_68F42600
		test	al, al
		jz	loc_68F49538
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+1ACh]
		jmp	loc_68F49635
; ---------------------------------------------------------------------------

loc_68F49702:				; CODE XREF: sub_68F486C0+BD6j
		mov	eax, edx
		add	eax, 1A0h
		call	sub_68F42600
		xor	edx, edx
		test	al, al
		jz	loc_68F4953A
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+1ACh]
		jmp	loc_68F4929C
; ---------------------------------------------------------------------------

loc_68F49726:				; CODE XREF: sub_68F486C0+46Aj
					; sub_68F486C0+47Cj
		mov	eax, [ebp+var_78]
		mov	[eax], ebx
		mov	eax, 7
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F49735:				; CODE XREF: sub_68F486C0+1008j
		mov	eax, ebx
		add	eax, 1A0h
		call	sub_68F42600
		xor	edx, edx
		test	al, al
		jz	loc_68F4953A
		mov	eax, [ebp+var_68]
		mov	ecx, [eax+1ACh]
		jmp	loc_68F496CA
; ---------------------------------------------------------------------------
		align 10h

loc_68F49760:				; CODE XREF: sub_68F486C0+78Fj
		mov	eax, 0Eh
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F4976A:				; CODE XREF: sub_68F486C0+9FBj
		mov	eax, 0Fh
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F49774:				; CODE XREF: sub_68F486C0+AB2j
		mov	[esp+0B8h+var_B8], esi
		mov	eax, [ebp+var_68]
		call	dword ptr [eax+14h]
		mov	eax, 1
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F49787:				; CODE XREF: sub_68F486C0+9F0j
		mov	eax, 0Ch
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F49791:				; CODE XREF: sub_68F486C0+9E3j
		mov	eax, 18h
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F4979B:				; CODE XREF: sub_68F486C0+9D6j
		mov	eax, 0Bh
		jmp	loc_68F4878E
; ---------------------------------------------------------------------------

loc_68F497A5:				; CODE XREF: sub_68F486C0+EB0j
		mov	eax, 15h
		jmp	loc_68F4878E
sub_68F486C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F497B0	proc near		; CODE XREF: sub_68F49820+80p
					; sub_68F49AE0+72p
					; DATA XREF: ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	esi
		mov	edx, 1
		push	ebx
		sub	esp, 20h
		mov	ebx, [ebp+arg_0]
		cmp	byte ptr [ebx+1E4h], 0
		setz	al
		mov	[esp+28h+var_18], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+90h]
		mov	[esp+28h+var_28], eax
		mov	eax, ebx
		call	sub_68F486C0
		test	eax, eax
		mov	esi, eax
		jz	short loc_68F49806

loc_68F497FB:				; CODE XREF: sub_68F497B0+64j
		add	esp, 20h
		mov	edx, esi
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F49806:				; CODE XREF: sub_68F497B0+49j
		mov	eax, ebx
		call	sub_68F42050
		test	al, al
		mov	edx, 1
		jnz	short loc_68F497FB
		add	esp, 20h
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F497B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49820	proc near		; CODE XREF: sub_68F49920+5Fp
					; DATA XREF: sub_68F49920:loc_68F49962o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_4]
		lea	eax, [ebp+var_10]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_C]
		mov	edx, [esi+90h]
		mov	[ebp+var_10], ebx
		mov	[esi+120h], ebx
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_28], edx
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_20], eax
		call	dword ptr [edx+4]
		mov	edx, [ebp+var_10]
		cmp	eax, 0FFFFFFFFh
		mov	[esi+124h], edx
		jz	short loc_68F498B2
		jle	loc_68F49905
		cmp	eax, 0Ch
		jz	short loc_68F498D1

loc_68F49878:				; CODE XREF: sub_68F49820+E0j
					; sub_68F49820+E8j
		mov	eax, offset sub_68F497B0
		mov	[esi+118h], eax
		mov	eax, 1
		mov	[esi+138h], eax
		mov	[esp+28h+var_1C], edi
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_20], eax
		call	sub_68F497B0

loc_68F498A5:				; CODE XREF: sub_68F49820+9Ej
					; sub_68F49820+C6j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F498B2:				; CODE XREF: sub_68F49820+4Bj
		mov	eax, 5

loc_68F498B7:				; CODE XREF: sub_68F49820+F3j
		cmp	byte ptr [esi+1E4h], 0
		jnz	short loc_68F498A5
		mov	[edi], ebx
		xor	eax, eax

loc_68F498C4:				; CODE XREF: sub_68F49820+FCj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F498D1:				; CODE XREF: sub_68F49820+56j
		mov	[esp+28h+var_24], edx
		mov	eax, esi
		mov	edx, 1
		mov	[esp+28h+var_28], ebx
		call	sub_68F42F20
		test	eax, eax
		jnz	short loc_68F498A5
		mov	edx, [esi+1E0h]
		mov	eax, 23h
		cmp	edx, 2
		jz	short loc_68F498A5
		cmp	edx, 3
		jz	short loc_68F49915
		mov	ebx, [ebp+var_10]
		jmp	loc_68F49878
; ---------------------------------------------------------------------------

loc_68F49905:				; CODE XREF: sub_68F49820+4Dj
		cmp	eax, 0FFFFFFFEh
		jnz	loc_68F49878
		mov	eax, 6
		jmp	short loc_68F498B7
; ---------------------------------------------------------------------------

loc_68F49915:				; CODE XREF: sub_68F49820+DBj
		mov	eax, [ebp+var_10]
		mov	[edi], eax
		xor	eax, eax
		jmp	short loc_68F498C4
sub_68F49820	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49920	proc near		; CODE XREF: sub_68F49A00+5Cj
					; DATA XREF: sub_68F49A00:loc_68F49A36o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_10]
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_4], edi
		mov	edx, [esi+90h]
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_10], ebx
		mov	[esp+28h+var_1C], eax
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edx
		call	dword ptr [edx+4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68F49991
		jle	short loc_68F499C0
		cmp	eax, 0Eh
		jz	short loc_68F499B0

loc_68F49962:				; CODE XREF: sub_68F49920+99j
					; sub_68F49920+A3j
		mov	eax, offset sub_68F49820
		mov	[esi+118h], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_1C], eax
		mov	[esp+28h+var_28], esi
		call	sub_68F49820

loc_68F49984:				; CODE XREF: sub_68F49920+B9j
					; sub_68F49920+DDj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F49991:				; CODE XREF: sub_68F49920+39j
		cmp	byte ptr [esi+1E4h], 0
		jnz	short loc_68F499F2

loc_68F4999A:				; CODE XREF: sub_68F49920+ACj
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax

loc_68F499A1:				; CODE XREF: sub_68F49920+D0j
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F499B0:				; CODE XREF: sub_68F49920+40j
		mov	eax, [ebp+var_10]
		cmp	eax, edi
		jz	short loc_68F499E0

loc_68F499B7:				; CODE XREF: sub_68F49920+C7j
		mov	ebx, eax
		jmp	short loc_68F49962
; ---------------------------------------------------------------------------
		align 10h

loc_68F499C0:				; CODE XREF: sub_68F49920+3Bj
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_68F49962
		cmp	byte ptr [esi+1E4h], 0
		jz	short loc_68F4999A
		mov	[esi+120h], ebx
		mov	eax, 6
		jmp	short loc_68F49984
; ---------------------------------------------------------------------------
		align 10h

loc_68F499E0:				; CODE XREF: sub_68F49920+95j
		cmp	byte ptr [esi+1E4h], 0
		jnz	short loc_68F499B7
		mov	eax, [ebp+arg_C]
		mov	[eax], edi
		xor	eax, eax
		jmp	short loc_68F499A1
; ---------------------------------------------------------------------------

loc_68F499F2:				; CODE XREF: sub_68F49920+78j
		mov	[esi+120h], ebx
		mov	eax, 5
		jmp	short loc_68F49984
sub_68F49920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49A00	proc near		; DATA XREF: XML_ExternalEntityParserCreate+6C4o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_10], eax
		mov	eax, ebx
		call	sub_68F42D60
		test	eax, eax
		jz	short loc_68F49A36
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F49A36:				; CODE XREF: sub_68F49A00+27j
		mov	eax, offset sub_68F49920
		mov	[ebx+118h], eax
		mov	eax, [ebp+var_10]
		mov	[ebp+arg_C], esi
		mov	esi, [ebp+var_8]
		mov	[ebp+arg_8], edi
		mov	edi, [ebp+var_4]
		mov	[ebp+arg_0], ebx
		mov	ebx, [ebp+var_C]
		mov	[ebp+arg_4], eax
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F49920
sub_68F49A00	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F49A70
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49A70	proc near		; CODE XREF: sub_68F468F0+C96p
					; .text:68F49A61j ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [ebp+arg_0]
		cmp	byte ptr [ebx+1E4h], 0
		setz	al
		xor	edx, edx
		mov	[esp+28h+var_18], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebx+90h]
		mov	[esp+28h+var_28], eax
		mov	eax, ebx
		call	sub_68F486C0
		test	eax, eax
		mov	esi, eax
		jz	short loc_68F49AC3

loc_68F49AB8:				; CODE XREF: sub_68F49A70+61j
		add	esp, 20h
		mov	edx, esi
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F49AC3:				; CODE XREF: sub_68F49A70+46j
		mov	eax, ebx
		call	sub_68F42050
		test	al, al
		mov	edx, 1
		jnz	short loc_68F49AB8
		add	esp, 20h
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F49A70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49AE0	proc near		; DATA XREF: sub_68F486C0+62Bo

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_8]
		mov	edx, [ebx+90h]
		cmp	byte ptr [ebx+1E4h], 0
		mov	[esp+28h+var_20], esi
		mov	[esp+28h+var_24], edi
		setz	al
		mov	[esp+28h+var_1C], eax
		lea	eax, [ebp+arg_4]
		mov	[esp+28h+var_28], eax
		mov	eax, ebx
		call	sub_68F42110
		test	eax, eax
		jnz	short loc_68F49B60
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jz	short loc_68F49B60
		mov	eax, [ebx+1DCh]
		test	eax, eax
		jz	short loc_68F49B70
		mov	eax, offset sub_68F497B0
		mov	[ebx+118h], eax
		mov	[esp+28h+var_1C], esi
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], ebx
		call	sub_68F497B0
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F49B60:				; CODE XREF: sub_68F49AE0+45j
					; sub_68F49AE0+4Cj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F49B70:				; CODE XREF: sub_68F49AE0+56j
		mov	ecx, offset sub_68F49A70
		mov	[ebx+118h], ecx
		mov	[esp+28h+var_1C], esi
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_28], ebx
		mov	[esp+28h+var_24], edx
		call	sub_68F49A70
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F49AE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49BA0	proc near		; DATA XREF: sub_68F48540+168o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	eax, [esi+12Ch]
		mov	[ebp+var_18], eax
		mov	ebx, [ebp+var_18]
		mov	eax, 17h
		test	ebx, ebx
		jz	loc_68F49CD0
		mov	edx, [ebp+var_18]
		mov	edi, [edx+0Ch]
		mov	eax, [edi+4]
		mov	edx, [edi+8]
		mov	ecx, [edi+0Ch]
		mov	ebx, eax
		add	eax, edx
		add	ebx, ecx
		mov	[ebp+var_14], eax
		cmp	byte ptr [edi+21h], 0
		jnz	loc_68F49CD8
		mov	ecx, [ebp+var_18]
		lea	eax, [ebp+var_10]
		mov	edx, [ecx+10h]
		mov	[esp+38h+var_2C], eax
		xor	ecx, ecx
		mov	[esp+38h+var_28], ecx
		mov	ecx, [ebp+var_14]
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_30], ecx
		mov	eax, [esi+0E4h]
		mov	[esp+38h+var_38], eax
		mov	eax, esi
		call	sub_68F486C0

loc_68F49C15:				; CODE XREF: sub_68F49BA0+184j
		test	eax, eax
		jnz	loc_68F49CD0
		mov	eax, [ebp+var_10]
		cmp	[ebp+var_14], eax
		jz	short loc_68F49C32
		cmp	dword ptr [esi+1E0h], 3
		jz	loc_68F49D84

loc_68F49C32:				; CODE XREF: sub_68F49BA0+83j
		mov	byte ptr [edi+20h], 0
		mov	edx, [ebp+var_18]
		mov	eax, [edx+8]
		mov	[esi+12Ch], eax
		mov	eax, [esi+130h]
		mov	[edx+8], eax
		mov	[esi+130h], edx
		cmp	byte ptr [edi+21h], 0
		jz	loc_68F49D30
		mov	eax, offset sub_68F483C0
		lea	ecx, [ebp+var_10]
		mov	[esi+118h], eax
		mov	eax, [esi+90h]
		mov	[esp+38h+var_2C], ecx
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+var_30], edx
		mov	ecx, [ebp+arg_4]
		mov	[esp+38h+var_38], eax
		mov	[esp+38h+var_34], ecx
		call	dword ptr [eax]
		xor	ecx, ecx
		cmp	byte ptr [esi+1E4h], 0
		mov	edx, [esi+90h]
		setz	cl
		mov	[esp+38h+var_24], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+38h+var_28], ecx
		mov	ecx, [ebp+var_10]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_2C], ecx
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_34], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, esi
		mov	[esp+38h+var_38], ecx
		call	sub_68F468F0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F49CD0:				; CODE XREF: sub_68F49BA0+1Fj
					; sub_68F49BA0+77j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F49CD8:				; CODE XREF: sub_68F49BA0+41j
		lea	ecx, [ebp+var_10]
		mov	eax, [esi+0E4h]
		mov	[esp+38h+var_2C], ecx
		mov	edx, [ebp+var_14]
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], eax
		mov	[esp+38h+var_30], edx
		call	dword ptr [eax]
		xor	ecx, ecx
		mov	edx, [esi+0E4h]
		mov	[esp+38h+var_24], ecx
		lea	ecx, [ebp+var_10]
		mov	[esp+38h+var_28], ecx
		mov	ecx, [ebp+var_10]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_2C], ecx
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], ebx
		mov	[esp+38h+var_34], eax
		mov	eax, esi
		call	sub_68F468F0
		jmp	loc_68F49C15
; ---------------------------------------------------------------------------
		align 10h

loc_68F49D30:				; CODE XREF: sub_68F49BA0+B5j
		xor	edx, edx
		cmp	dword ptr [esi+1DCh], 0
		mov	eax, offset sub_68F49A70
		mov	[esi+118h], eax
		setnz	dl
		xor	eax, eax
		cmp	byte ptr [esi+1E4h], 0
		setz	al
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_2C], eax
		mov	ecx, [ebp+arg_8]
		mov	[esp+38h+var_30], ecx
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	eax, [esi+90h]
		mov	[esp+38h+var_38], eax
		mov	eax, esi
		call	sub_68F486C0
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F49D84:				; CODE XREF: sub_68F49BA0+8Cj
		mov	edx, [edi+4]
		sub	eax, edx
		mov	[edi+0Ch], eax
		add	esp, 2Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F49BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49DA0	proc near		; CODE XREF: sub_68F49ED0+A6j
					; DATA XREF: sub_68F49ED0:loc_68F49F50o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_4]
		mov	[ebp+var_4], edi
		lea	edi, [ebp+var_10]
		mov	eax, [ebx+90h]
		mov	[ebp+var_10], esi
		mov	[esp+38h+var_2C], edi
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], eax
		mov	[esp+38h+var_30], edx
		call	dword ptr [eax]
		test	eax, eax
		mov	ecx, eax
		jle	short loc_68F49E40
		cmp	eax, 0Eh
		jz	loc_68F49E90
		movzx	edx, byte ptr [ebx+1E4h]
		mov	[ebp+var_11], dl

loc_68F49DEE:				; CODE XREF: sub_68F49DA0:loc_68F49E6Dj
					; sub_68F49DA0+119j
		xor	eax, eax
		cmp	[ebp+var_11], 0
		mov	edi, offset sub_68F483C0
		mov	edx, [ebx+90h]
		mov	[ebx+118h], edi
		setz	al
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_30], ecx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_38], esi
		mov	[esp+38h+var_34], eax
		mov	eax, ebx
		call	sub_68F468F0

loc_68F49E2F:				; CODE XREF: sub_68F49DA0+C2j
					; sub_68F49DA0+D3j
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F49E40:				; CODE XREF: sub_68F49DA0+39j
		movzx	eax, byte ptr [ebx+1E4h]
		test	al, al
		mov	[ebp+var_11], al
		setz	al
		xor	edx, edx
		test	ecx, ecx
		setnz	dl
		test	edx, eax
		jnz	short loc_68F49E75
		cmp	ecx, 0FFFFFFFFh
		mov	eax, 5
		jz	short loc_68F49E2F
		jle	short loc_68F49EBE
		mov	eax, 4
		test	ecx, ecx

loc_68F49E6D:				; CODE XREF: sub_68F49DA0+126j
		jnz	loc_68F49DEE
		jmp	short loc_68F49E2F
; ---------------------------------------------------------------------------

loc_68F49E75:				; CODE XREF: sub_68F49DA0+B8j
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], esi
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F49E90:				; CODE XREF: sub_68F49DA0+3Ej
		mov	esi, [ebp+var_10]
		mov	eax, [ebx+90h]
		mov	[esp+38h+var_2C], edi
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+var_34], esi
		mov	[esp+38h+var_38], eax
		mov	[esp+38h+var_30], edx
		call	dword ptr [eax]
		mov	ecx, eax
		movzx	eax, byte ptr [ebx+1E4h]
		mov	[ebp+var_11], al
		jmp	loc_68F49DEE
; ---------------------------------------------------------------------------

loc_68F49EBE:				; CODE XREF: sub_68F49DA0+C4j
		mov	eax, 6
		cmp	ecx, 0FFFFFFFEh
		jmp	short loc_68F49E6D
sub_68F49DA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49ED0	proc near		; DATA XREF: XML_ExternalEntityParserCreate+2C1o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_10], eax
		mov	eax, ebx
		call	sub_68F42D60
		test	eax, eax
		jnz	short loc_68F49F40
		mov	eax, [ebx+164h]
		mov	byte ptr [eax+83h], 1
		mov	eax, [ebx+114h]
		test	eax, eax
		jz	short loc_68F49F50
		mov	eax, offset sub_68F44CC0
		mov	[ebx+118h], eax
		mov	eax, [ebp+var_10]
		mov	[ebp+arg_C], esi
		mov	esi, [ebp+var_8]
		mov	[ebp+arg_8], edi
		mov	edi, [ebp+var_4]
		mov	[ebp+arg_0], ebx
		mov	ebx, [ebp+var_C]
		mov	[ebp+arg_4], eax
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F44CC0
; ---------------------------------------------------------------------------
		align 10h

loc_68F49F40:				; CODE XREF: sub_68F49ED0+27j
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F49F50:				; CODE XREF: sub_68F49ED0+3Ej
		mov	eax, offset sub_68F49DA0
		mov	[ebx+118h], eax
		mov	eax, [ebp+var_10]
		mov	[ebp+arg_C], esi
		mov	esi, [ebp+var_8]
		mov	[ebp+arg_8], edi
		mov	edi, [ebp+var_4]
		mov	[ebp+arg_0], ebx
		mov	ebx, [ebp+var_C]
		mov	[ebp+arg_4], eax
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F49DA0
sub_68F49ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49F80	proc near		; DATA XREF: .rdata:68F58054o
					; .rdata:68F58060o ...
		push	ebp
		xor	eax, eax
		mov	ebp, esp
		pop	ebp
		retn
sub_68F49F80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49F90	proc near		; DATA XREF: .rdata:68F5804Co
					; .rdata:68F58D6Co ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_4], esi
		mov	esi, [ebp+arg_4]
		mov	[esp+8+var_8], ebx
		movzx	ecx, byte ptr [esi]
		mov	al, cl
		mov	ebx, ecx
		movzx	ecx, byte ptr [esi+1]
		shr	al, 2
		and	eax, 7
		movzx	edx, ds:byte_68F58980[eax]
		and	ebx, 3
		mov	esi, [esp+8+var_4]
		mov	al, cl
		shr	al, 5
		and	ecx, 1Fh
		and	eax, 1
		lea	edx, [eax+edx*8]
		lea	ebx, [edx+ebx*2]
		mov	edx, ds:dword_68F58480[ebx*4]
		mov	eax, 1
		mov	ebx, [esp+8+var_8]
		mov	esp, ebp
		shl	eax, cl
		and	eax, edx
		pop	ebp
		retn
sub_68F49F90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F49FF0	proc near		; DATA XREF: .rdata:68F58050o
					; .rdata:68F58D70o ...

arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		push	ebx
		movzx	ebx, byte ptr [ecx+1]
		movzx	eax, byte ptr [ecx]
		movzx	ecx, byte ptr [ecx+2]
		mov	dl, bl
		and	eax, 0Fh
		shr	dl, 2
		and	ebx, 3
		shl	eax, 4
		and	edx, 0Fh
		movzx	edx, ds:byte_68F58980[eax+edx]
		mov	al, cl
		shr	al, 5
		and	eax, 1
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		lea	ebx, [edx+ebx*2]
		mov	eax, 1
		shl	eax, cl
		mov	ecx, ds:dword_68F58480[ebx*4]
		pop	ebx
		and	eax, ecx
		pop	ebp
		retn
sub_68F49FF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A040	proc near		; DATA XREF: .rdata:68F58058o
					; .rdata:68F58D78o ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_4], esi
		mov	esi, [ebp+arg_4]
		mov	[esp+8+var_8], ebx
		movzx	ecx, byte ptr [esi]
		mov	al, cl
		mov	ebx, ecx
		movzx	ecx, byte ptr [esi+1]
		shr	al, 2
		and	eax, 7
		movzx	edx, ds:byte_68F58380[eax]
		and	ebx, 3
		mov	al, cl
		shr	al, 5
		and	ecx, 1Fh
		and	eax, 1
		lea	edx, [eax+edx*8]
		lea	ebx, [edx+ebx*2]
		mov	eax, 1
		mov	esi, ds:dword_68F58480[ebx*4]
		shl	eax, cl
		mov	ebx, [esp+8+var_8]
		and	eax, esi
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F4A040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A0A0	proc near		; DATA XREF: .rdata:68F5805Co
					; .rdata:68F58D7Co ...

arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		push	ebx
		movzx	ebx, byte ptr [ecx+1]
		movzx	eax, byte ptr [ecx]
		movzx	ecx, byte ptr [ecx+2]
		mov	dl, bl
		and	eax, 0Fh
		shr	dl, 2
		and	ebx, 3
		shl	eax, 4
		and	edx, 0Fh
		movzx	edx, ds:byte_68F58380[eax+edx]
		mov	al, cl
		shr	al, 5
		and	eax, 1
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		lea	ebx, [edx+ebx*2]
		mov	eax, 1
		mov	edx, ds:dword_68F58480[ebx*4]
		pop	ebx
		shl	eax, cl
		and	eax, edx
		pop	ebp
		retn
sub_68F4A0A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A0F0	proc near		; DATA XREF: .rdata:68F58064o
					; .rdata:68F58D84o ...

arg_4		= dword	ptr  0Ch

		push	ebp
		xor	edx, edx
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		cmp	byte ptr [eax],	0C1h
		jbe	short loc_68F4A105
		movzx	eax, byte ptr [eax+1]
		test	al, al
		js	short loc_68F4A110

loc_68F4A105:				; CODE XREF: sub_68F4A0F0+Bj
					; sub_68F4A0F0+2Aj
		pop	ebp
		mov	edx, 1
		mov	eax, edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4A110:				; CODE XREF: sub_68F4A0F0+13j
		and	eax, 0C0h
		cmp	eax, 0C0h
		jz	short loc_68F4A105
		pop	ebp
		mov	eax, edx
		retn
sub_68F4A0F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A120	proc near		; DATA XREF: .rdata:68F58068o
					; .rdata:68F58D88o ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_4], esi
		mov	edx, [ebp+arg_4]
		xor	esi, esi
		mov	[esp+8+var_8], ebx
		movzx	eax, byte ptr [edx+2]
		test	al, al
		js	short loc_68F4A150

loc_68F4A13A:				; CODE XREF: sub_68F4A120+42j
					; sub_68F4A120+4Fj ...
		mov	esi, 1

loc_68F4A13F:				; CODE XREF: sub_68F4A120+62j
					; sub_68F4A120+81j
		mov	eax, esi
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4A150:				; CODE XREF: sub_68F4A120+18j
		movzx	ecx, byte ptr [edx]
		cmp	cl, 0EFh
		jz	short loc_68F4A186

loc_68F4A158:				; CODE XREF: sub_68F4A120+6Dj
		and	eax, 0C0h
		cmp	eax, 0C0h
		jz	short loc_68F4A13A
		movzx	ebx, byte ptr [edx+1]
		cmp	cl, 0E0h
		jz	short loc_68F4A195
		test	bl, bl
		jns	short loc_68F4A13A
		cmp	cl, 0EDh
		jz	short loc_68F4A19C

loc_68F4A176:				; CODE XREF: sub_68F4A120+73j
					; sub_68F4A120+7Aj
		mov	eax, ebx
		and	eax, 0C0h
		cmp	eax, 0C0h
		jnz	short loc_68F4A13F
		jmp	short loc_68F4A13A
; ---------------------------------------------------------------------------

loc_68F4A186:				; CODE XREF: sub_68F4A120+36j
		movzx	ebx, byte ptr [edx+1]
		cmp	bl, 0BFh
		jnz	short loc_68F4A158
		cmp	al, 0BDh
		ja	short loc_68F4A13A
		jmp	short loc_68F4A176
; ---------------------------------------------------------------------------

loc_68F4A195:				; CODE XREF: sub_68F4A120+4Bj
		cmp	bl, 9Fh
		jbe	short loc_68F4A13A
		jmp	short loc_68F4A176
; ---------------------------------------------------------------------------

loc_68F4A19C:				; CODE XREF: sub_68F4A120+54j
		cmp	bl, 9Fh
		ja	short loc_68F4A13A
		jmp	short loc_68F4A13F
sub_68F4A120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A1B0	proc near		; DATA XREF: .rdata:68F5806Co
					; .rdata:68F58D8Co ...

arg_4		= dword	ptr  0Ch

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		push	ebx
		mov	edx, [ebp+arg_4]
		movzx	eax, byte ptr [edx+3]
		test	al, al
		js	short loc_68F4A1D0

loc_68F4A1C1:				; CODE XREF: sub_68F4A1B0+2Aj
					; sub_68F4A1B0+32j ...
		mov	ecx, 1

loc_68F4A1C6:				; CODE XREF: sub_68F4A1B0+73j
		pop	ebx
		mov	eax, ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4A1D0:				; CODE XREF: sub_68F4A1B0+Fj
		and	eax, 0C0h
		cmp	eax, 0C0h
		jz	short loc_68F4A1C1
		movzx	eax, byte ptr [edx+2]
		test	al, al
		jns	short loc_68F4A1C1
		and	eax, 0C0h
		cmp	eax, 0C0h
		jz	short loc_68F4A1C1
		movzx	ebx, byte ptr [edx]
		cmp	bl, 0F0h
		jz	short loc_68F4A216
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jns	short loc_68F4A1C1
		cmp	bl, 0F4h
		jz	short loc_68F4A225

loc_68F4A205:				; CODE XREF: sub_68F4A1B0+6Cj
		and	eax, 0C0h
		cmp	eax, 0C0h
		jz	short loc_68F4A1C1
		pop	ebx
		mov	eax, ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A216:				; CODE XREF: sub_68F4A1B0+46j
		movzx	eax, byte ptr [edx+1]
		cmp	al, 8Fh
		ja	short loc_68F4A205
		mov	ecx, 1
		jmp	short loc_68F4A1C6
; ---------------------------------------------------------------------------

loc_68F4A225:				; CODE XREF: sub_68F4A1B0+53j
		cmp	al, 8Fh
		ja	short loc_68F4A1C1
		pop	ebx
		mov	eax, ecx
		pop	ebp
		retn
sub_68F4A1B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A230	proc near		; CODE XREF: sub_68F4AAC0+447p
					; sub_68F4B930+747p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, edi
		mov	[ebp+var_8], esi
		mov	esi, eax
		jz	short loc_68F4A2B0
		cmp	byte ptr [edx],	2Dh
		jz	short loc_68F4A263 ; jumptable 68F4A275	default	case

loc_68F4A24F:				; CODE XREF: sub_68F4A230+AAj
					; sub_68F4A230+FBj
		mov	eax, [ebp+arg_4]
		mov	[eax], ebx

loc_68F4A254:				; CODE XREF: sub_68F4A230+51j
		xor	eax, eax

loc_68F4A256:				; CODE XREF: sub_68F4A230+F2j
					; sub_68F4A230+10Ej ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A263:				; CODE XREF: sub_68F4A230+1Dj
					; sub_68F4A230+43j ...
		inc	ebx		; jumptable 68F4A275 default case

loc_68F4A264:				; CODE XREF: sub_68F4A230+B3j
					; sub_68F4A230+D7j ...
		cmp	ebx, edi
		jz	short loc_68F4A2B0

loc_68F4A268:				; CODE XREF: sub_68F4A230+76j
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 1Bh	; switch 28 cases
		ja	short loc_68F4A263 ; jumptable 68F4A275	default	case
		jmp	ds:off_68F59830[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4A27C:				; CODE XREF: sub_68F4A230+45j
					; sub_68F4A230+6Fj ...
		mov	edx, [ebp+arg_4] ; jumptable 68F4A275 cases 0,1,8
		mov	[edx], ebx
		jmp	short loc_68F4A254
; ---------------------------------------------------------------------------

loc_68F4A283:				; CODE XREF: sub_68F4A230+45j
					; DATA XREF: .rdata:off_68F59830o
		mov	eax, edi	; jumptable 68F4A275 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4A343
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	short loc_68F4A27C ; jumptable 68F4A275	cases 0,1,8
		add	ebx, 4
		cmp	ebx, edi
		jnz	short loc_68F4A268
		nop
		lea	esi, [esi+0]

loc_68F4A2B0:				; CODE XREF: sub_68F4A230+18j
					; sub_68F4A230+36j ...
		mov	ebx, [ebp+var_C]
		mov	eax, 0FFFFFFFFh
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A2C2:				; CODE XREF: sub_68F4A230+45j
					; DATA XREF: .rdata:off_68F59830o
		mov	eax, edi	; jumptable 68F4A275 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4A343
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	loc_68F4A24F
		add	ebx, 3
		jmp	loc_68F4A264
; ---------------------------------------------------------------------------

loc_68F4A2E8:				; CODE XREF: sub_68F4A230+45j
					; DATA XREF: .rdata:off_68F59830o
		mov	eax, edi	; jumptable 68F4A275 case 5
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4A343
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	loc_68F4A27C	; jumptable 68F4A275 cases 0,1,8
		add	ebx, 2
		jmp	loc_68F4A264
; ---------------------------------------------------------------------------

loc_68F4A30C:				; CODE XREF: sub_68F4A230+45j
					; DATA XREF: .rdata:off_68F59830o
		inc	ebx		; jumptable 68F4A275 case 27
		cmp	ebx, edi
		jz	short loc_68F4A2B0
		cmp	byte ptr [ebx],	2Dh
		jnz	loc_68F4A264
		inc	ebx
		mov	eax, 0FFFFFFFFh
		cmp	ebx, edi
		jz	loc_68F4A256
		cmp	byte ptr [ebx],	3Eh
		jnz	loc_68F4A24F
		mov	edx, [ebp+arg_4]
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	eax, 0Dh
		jmp	loc_68F4A256
; ---------------------------------------------------------------------------

loc_68F4A343:				; CODE XREF: sub_68F4A230+5Aj
					; sub_68F4A230+99j ...
		mov	eax, 0FFFFFFFEh
		jmp	loc_68F4A256
sub_68F4A230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A350	proc near		; CODE XREF: sub_68F4A3F0+48p
					; sub_68F4A3F0+13Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_4], esi
		mov	esi, 1
		mov	[esp+8+var_8], ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		sub	eax, edx
		cmp	eax, 3
		mov	dword ptr [ebx], 0Bh
		jz	short loc_68F4A384

loc_68F4A377:				; CODE XREF: sub_68F4A350+77j
					; sub_68F4A350+7Fj
		mov	eax, esi
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A384:				; CODE XREF: sub_68F4A350+25j
		movsx	eax, byte ptr [edx]
		cmp	eax, 58h
		jz	short loc_68F4A3A3
		cmp	eax, 78h
		jz	short loc_68F4A3A8

loc_68F4A391:				; CODE XREF: sub_68F4A350+64j
		mov	esi, 1

loc_68F4A396:				; CODE XREF: sub_68F4A350+8Cj
		mov	eax, esi
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A3A3:				; CODE XREF: sub_68F4A350+3Aj
		mov	ecx, 1

loc_68F4A3A8:				; CODE XREF: sub_68F4A350+3Fj
		inc	edx
		movsx	eax, byte ptr [edx]
		cmp	eax, 4Dh
		jz	short loc_68F4A3DE
		cmp	eax, 6Dh
		jnz	short loc_68F4A391

loc_68F4A3B6:				; CODE XREF: sub_68F4A350+93j
		movsx	eax, byte ptr [edx+1]
		cmp	eax, 4Ch
		jz	short loc_68F4A3CD
		cmp	eax, 6Ch
		mov	esi, 1
		jnz	short loc_68F4A377
		test	ecx, ecx
		jz	short loc_68F4A3D1

loc_68F4A3CD:				; CODE XREF: sub_68F4A350+6Dj
		xor	esi, esi
		jmp	short loc_68F4A377
; ---------------------------------------------------------------------------

loc_68F4A3D1:				; CODE XREF: sub_68F4A350+7Bj
		mov	dword ptr [ebx], 0Ch
		mov	esi, 1
		jmp	short loc_68F4A396
; ---------------------------------------------------------------------------

loc_68F4A3DE:				; CODE XREF: sub_68F4A350+5Fj
		mov	ecx, 1
		jmp	short loc_68F4A3B6
sub_68F4A350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A3F0	proc near		; CODE XREF: sub_68F4AAC0+463p
					; sub_68F4B930+294j

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	ebx, edi
		mov	[ebp+var_8], esi
		mov	esi, eax
		mov	[ebp+var_14], edx
		mov	edx, 0FFFFFFFFh
		jz	short loc_68F4A457
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4A450 ; jumptable 68F4A422	default	case
		jmp	ds:off_68F598A0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4A429:				; CODE XREF: sub_68F4A3F0+8Fj
					; DATA XREF: .rdata:off_68F59904o
		mov	[esp+28h+var_28], ebx ;	jumptable 68F4A47F cases 9,10,21
		mov	edx, [ebp+var_14]
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax
		mov	eax, esi
		call	sub_68F4A350
		test	eax, eax
		jnz	loc_68F4A4FF	; jumptable 68F4A515 default case
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4A450:				; CODE XREF: sub_68F4A3F0+30j
					; sub_68F4A3F0+32j ...
		mov	eax, [ebp+arg_4] ; jumptable 68F4A422 default case
		mov	[eax], ebx

loc_68F4A455:				; CODE XREF: sub_68F4A3F0+1CFj
		xor	edx, edx

loc_68F4A457:				; CODE XREF: sub_68F4A3F0+20j
					; sub_68F4A3F0+A2j ...
		mov	ebx, [ebp+var_C]
		mov	eax, edx
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A466:				; CODE XREF: sub_68F4A3F0+32j
					; sub_68F4A3F0+8Fj
					; DATA XREF: ...
		inc	ebx		; jumptable 68F4A422 cases 22,24
					; jumptable 68F4A47F cases 22,24-27

loc_68F4A467:				; CODE XREF: sub_68F4A3F0+BCj
					; sub_68F4A3F0+E0j ...
		cmp	ebx, edi
		jz	loc_68F4A63F
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4A450 ; jumptable 68F4A422	default	case
		jmp	ds:off_68F59904[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4A486:				; CODE XREF: sub_68F4A3F0+32j
					; DATA XREF: .rdata:off_68F598A0o
		mov	eax, edi	; jumptable 68F4A422 case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4A457
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+160h]

loc_68F4A4A1:				; CODE XREF: sub_68F4A3F0+189j
		test	eax, eax
		jz	loc_68F4A5BA	; jumptable 68F4A515 cases 0,1,8
		add	ebx, 4
		jmp	short loc_68F4A467
; ---------------------------------------------------------------------------

loc_68F4A4AE:				; CODE XREF: sub_68F4A3F0+32j
					; DATA XREF: .rdata:off_68F598A0o
		mov	eax, edi	; jumptable 68F4A422 case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4A457
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+15Ch]

loc_68F4A4C9:				; CODE XREF: sub_68F4A3F0+1A8j
		test	eax, eax
		jz	short loc_68F4A450 ; jumptable 68F4A422	default	case
		add	ebx, 3
		jmp	short loc_68F4A467
; ---------------------------------------------------------------------------

loc_68F4A4D2:				; CODE XREF: sub_68F4A3F0+32j
					; DATA XREF: .rdata:off_68F598A0o
		mov	eax, edi	; jumptable 68F4A422 case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	loc_68F4A457
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+158h]

loc_68F4A4EF:				; CODE XREF: sub_68F4A3F0+1C5j
		test	eax, eax
		jz	loc_68F4A5BA	; jumptable 68F4A515 cases 0,1,8
		add	ebx, 2
		jmp	loc_68F4A467
; ---------------------------------------------------------------------------

loc_68F4A4FF:				; CODE XREF: sub_68F4A3F0+4Fj
					; sub_68F4A3F0+123j ...
		inc	ebx		; jumptable 68F4A515 default case

loc_68F4A500:				; CODE XREF: sub_68F4A3F0+1DCj
					; sub_68F4A3F0+204j ...
		cmp	ebx, edi
		jz	loc_68F4A63F
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Fh	; switch 16 cases
		ja	short loc_68F4A4FF ; jumptable 68F4A515	default	case
		jmp	ds:off_68F59968[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4A51C:				; CODE XREF: sub_68F4A3F0+8Fj
					; DATA XREF: .rdata:off_68F59904o
		mov	[esp+28h+var_28], ebx ;	jumptable 68F4A47F case	15
		mov	edx, [ebp+var_14]
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax
		mov	eax, esi
		call	sub_68F4A350
		test	eax, eax
		jz	loc_68F4A450	; jumptable 68F4A422 default case
		inc	ebx
		mov	edx, 0FFFFFFFFh
		cmp	ebx, edi
		jz	loc_68F4A457
		cmp	byte ptr [ebx],	3Eh
		jnz	loc_68F4A450	; jumptable 68F4A422 default case

loc_68F4A54F:				; CODE XREF: sub_68F4A3F0+1E2j
		mov	edx, [ebp+arg_4]
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, [ebp+var_10]
		jmp	loc_68F4A457
; ---------------------------------------------------------------------------

loc_68F4A55F:				; CODE XREF: sub_68F4A3F0+8Fj
					; DATA XREF: .rdata:off_68F59904o
		mov	eax, edi	; jumptable 68F4A47F case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4A649
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+154h]
		jmp	loc_68F4A4A1
; ---------------------------------------------------------------------------

loc_68F4A57E:				; CODE XREF: sub_68F4A3F0+8Fj
					; DATA XREF: .rdata:off_68F59904o
		mov	eax, edi	; jumptable 68F4A47F case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4A649
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+150h]
		jmp	loc_68F4A4C9
; ---------------------------------------------------------------------------

loc_68F4A59D:				; CODE XREF: sub_68F4A3F0+8Fj
					; DATA XREF: .rdata:off_68F59904o
		mov	eax, edi	; jumptable 68F4A47F case 5
		sub	eax, ebx
		dec	eax
		jle	loc_68F4A649
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+14Ch]
		jmp	loc_68F4A4EF
; ---------------------------------------------------------------------------

loc_68F4A5BA:				; CODE XREF: sub_68F4A3F0+B3j
					; sub_68F4A3F0+101j ...
		mov	edx, [ebp+arg_4] ; jumptable 68F4A515 cases 0,1,8
		mov	[edx], ebx
		jmp	loc_68F4A455
; ---------------------------------------------------------------------------

loc_68F4A5C4:				; CODE XREF: sub_68F4A3F0+125j
					; DATA XREF: .rdata:off_68F59968o
		inc	ebx		; jumptable 68F4A515 case 15
		cmp	ebx, edi
		jz	short loc_68F4A63F
		cmp	byte ptr [ebx],	3Eh
		jnz	loc_68F4A500
		jmp	loc_68F4A54F
; ---------------------------------------------------------------------------

loc_68F4A5D7:				; CODE XREF: sub_68F4A3F0+125j
					; DATA XREF: .rdata:off_68F59968o
		mov	eax, edi	; jumptable 68F4A515 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4A649
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	short loc_68F4A5BA ; jumptable 68F4A515	cases 0,1,8
		add	ebx, 4
		jmp	loc_68F4A500
; ---------------------------------------------------------------------------

loc_68F4A5F9:				; CODE XREF: sub_68F4A3F0+125j
					; DATA XREF: .rdata:off_68F59968o
		mov	eax, edi	; jumptable 68F4A515 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4A649
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	loc_68F4A450	; jumptable 68F4A422 default case
		add	ebx, 3
		jmp	loc_68F4A500
; ---------------------------------------------------------------------------

loc_68F4A61F:				; CODE XREF: sub_68F4A3F0+125j
					; DATA XREF: .rdata:off_68F59968o
		mov	eax, edi	; jumptable 68F4A515 case 5
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4A649
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	short loc_68F4A5BA ; jumptable 68F4A515	cases 0,1,8
		add	ebx, 2
		jmp	loc_68F4A500
; ---------------------------------------------------------------------------

loc_68F4A63F:				; CODE XREF: sub_68F4A3F0+79j
					; sub_68F4A3F0+112j ...
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F4A457
; ---------------------------------------------------------------------------

loc_68F4A649:				; CODE XREF: sub_68F4A3F0+176j
					; sub_68F4A3F0+195j ...
		mov	edx, 0FFFFFFFEh
		jmp	loc_68F4A457
sub_68F4A3F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A660	proc near		; DATA XREF: .rdata:68F57F08o
					; .rdata:68F58088o ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	edx, 0FFFFFFFCh
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	esi, [ebp+arg_0]
		cmp	ebx, edi
		jz	short loc_68F4A6EA
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		jbe	short loc_68F4A6B0
		nop			; jumptable 68F4A6B0 default case
		lea	esi, [esi+0]

loc_68F4A690:				; CODE XREF: sub_68F4A660+44j
					; sub_68F4A660+46j ...
		inc	ebx		; jumptable 68F4A6A6 default case
					; jumptable 68F4A6B0 cases 2,3

loc_68F4A691:				; CODE XREF: sub_68F4A660+DCj
					; sub_68F4A660+103j ...
		cmp	ebx, edi
		jz	loc_68F4A715

loc_68F4A699:				; CODE XREF: sub_68F4A660+B3j
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F4A690 ; jumptable 68F4A6A6	default	case
					; jumptable 68F4A6B0 cases 2,3
		jmp	ds:off_68F599A8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4A6B0:				; CODE XREF: sub_68F4A660+26j
		jmp	ds:off_68F599D4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4A6B7:				; CODE XREF: sub_68F4A660+46j
					; DATA XREF: .rdata:off_68F599A8o
		mov	eax, edi	; jumptable 68F4A6A6 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4A6E0 ; jumptable 68F4A6A6	cases 0,1,4,8-10
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jz	loc_68F4A760
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4A6E0:				; CODE XREF: sub_68F4A660+46j
					; sub_68F4A660+5Ej
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4A6A6 cases 0,1,4,8-10
		mov	[edx], ebx
		mov	edx, 6

loc_68F4A6EA:				; CODE XREF: sub_68F4A660+19j
					; sub_68F4A660+BFj ...
		add	esp, 0Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A6F4:				; CODE XREF: sub_68F4A660+46j
					; DATA XREF: .rdata:off_68F599A8o
		mov	eax, edi	; jumptable 68F4A6A6 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4A715
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	short loc_68F4A715

loc_68F4A70E:				; CODE XREF: sub_68F4A660+17Bj
		add	ebx, 4
		cmp	ebx, edi
		jnz	short loc_68F4A699

loc_68F4A715:				; CODE XREF: sub_68F4A660+33j
					; sub_68F4A660+9Bj ...
		mov	eax, [ebp+arg_C]
		mov	edx, 6
		mov	[eax], ebx
		jmp	short loc_68F4A6EA
; ---------------------------------------------------------------------------

loc_68F4A721:				; CODE XREF: sub_68F4A660+46j
					; DATA XREF: .rdata:off_68F599A8o
		mov	eax, edi	; jumptable 68F4A6A6 case 5
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4A715
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	short loc_68F4A715

loc_68F4A739:				; CODE XREF: sub_68F4A660+1A9j
		add	ebx, 2
		jmp	loc_68F4A691
; ---------------------------------------------------------------------------

loc_68F4A741:				; CODE XREF: sub_68F4A660:loc_68F4A6B0j
					; DATA XREF: .rdata:off_68F599D4o
		mov	eax, edi	; jumptable 68F4A6B0 case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4A6EA
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	short loc_68F4A768 ; jumptable 68F4A6B0	cases 0,1,8

loc_68F4A760:				; CODE XREF: sub_68F4A660+6Fj
		add	ebx, 3
		jmp	loc_68F4A691
; ---------------------------------------------------------------------------

loc_68F4A768:				; CODE XREF: sub_68F4A660:loc_68F4A6B0j
					; sub_68F4A660+FEj
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4A6B0 cases 0,1,8
		mov	[edx], ebx
		xor	edx, edx

loc_68F4A76F:				; CODE XREF: sub_68F4A660+188j
		add	esp, 0Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A779:				; CODE XREF: sub_68F4A660:loc_68F4A6B0j
					; DATA XREF: .rdata:off_68F599D4o
		inc	ebx		; jumptable 68F4A6B0 case 9
		mov	edx, 0FFFFFFFFh
		cmp	ebx, edi
		jz	loc_68F4A6EA
		movzx	eax, byte ptr [ebx]
		mov	edx, 7
		cmp	byte ptr [esi+eax+4Ch],	0Ah
		setz	al
		movzx	eax, al
		add	ebx, eax
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx

loc_68F4A7A1:				; CODE XREF: sub_68F4A660+158j
		add	esp, 0Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A7AB:				; CODE XREF: sub_68F4A660:loc_68F4A6B0j
					; DATA XREF: .rdata:off_68F599D4o
		mov	edx, [ebp+arg_C] ; jumptable 68F4A6B0 case 10
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 7
		jmp	short loc_68F4A7A1
; ---------------------------------------------------------------------------

loc_68F4A7BA:				; CODE XREF: sub_68F4A660:loc_68F4A6B0j
					; DATA XREF: .rdata:off_68F599D4o
		mov	eax, edi	; jumptable 68F4A6B0 case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4A6EA
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jz	loc_68F4A70E
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx

loc_68F4A7E6:				; CODE XREF: sub_68F4A660+1B4j
		xor	edx, edx
		jmp	short loc_68F4A76F
; ---------------------------------------------------------------------------

loc_68F4A7EA:				; CODE XREF: sub_68F4A660:loc_68F4A6B0j
					; DATA XREF: .rdata:off_68F599D4o
		mov	eax, edi	; jumptable 68F4A6B0 case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	loc_68F4A6EA
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jz	loc_68F4A739
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		jmp	short loc_68F4A7E6
; ---------------------------------------------------------------------------

loc_68F4A816:				; CODE XREF: sub_68F4A660:loc_68F4A6B0j
					; DATA XREF: .rdata:off_68F599D4o
		inc	ebx		; jumptable 68F4A6B0 case 4
		mov	edx, 0FFFFFFFFh
		cmp	ebx, edi
		jz	loc_68F4A6EA
		cmp	byte ptr [ebx],	5Dh
		jnz	loc_68F4A691
		inc	ebx
		cmp	ebx, edi
		jz	loc_68F4A6EA
		cmp	byte ptr [ebx],	3Eh
		jz	short loc_68F4A841
		dec	ebx
		jmp	loc_68F4A691
; ---------------------------------------------------------------------------

loc_68F4A841:				; CODE XREF: sub_68F4A660+1D9j
		mov	edx, [ebp+arg_C]
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 28h
		jmp	loc_68F4A6EA
sub_68F4A660	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4A860	proc near		; CODE XREF: sub_68F4AAC0+267p
					; sub_68F4AAC0+A70p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	ebx, edi
		mov	[ebp+var_8], esi
		mov	edx, 0FFFFFFFFh
		mov	esi, eax
		jz	short loc_68F4A8C7
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4A8C0 ; jumptable 68F4A88F	default	case
					; jumptable 68F4A929 case 29
		jmp	ds:off_68F59A00[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4A896:				; CODE XREF: sub_68F4A860+2Fj
					; DATA XREF: .rdata:off_68F59A00o
		mov	eax, edi	; jumptable 68F4A88F case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4A8C7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+160h]
		test	eax, eax
		jnz	loc_68F4A9C1
		lea	esi, [esi+0]

loc_68F4A8C0:				; CODE XREF: sub_68F4A860+2Dj
					; sub_68F4A860+2Fj ...
		mov	edx, [ebp+arg_4] ; jumptable 68F4A88F default case
					; jumptable 68F4A929 case 29
		mov	[edx], ebx

loc_68F4A8C5:				; CODE XREF: sub_68F4A860+A5j
		xor	edx, edx

loc_68F4A8C7:				; CODE XREF: sub_68F4A860+1Dj
					; sub_68F4A860+42j ...
		mov	ebx, [ebp+var_C]
		mov	eax, edx
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4A8D6:				; CODE XREF: sub_68F4A860+2Fj
					; DATA XREF: .rdata:off_68F59A00o
		mov	eax, edi	; jumptable 68F4A88F case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4A8C7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+15Ch]
		test	eax, eax
		jnz	loc_68F4A9EB
		lea	esi, [esi+0]

loc_68F4A900:				; CODE XREF: sub_68F4A860+2Fj
					; sub_68F4A860+C7j ...
		mov	eax, [ebp+arg_4] ; jumptable 68F4A88F case 29
		mov	[eax], ebx
		jmp	short loc_68F4A8C5
; ---------------------------------------------------------------------------

loc_68F4A907:				; CODE XREF: sub_68F4A860+2Fj
					; sub_68F4A860+C9j
					; DATA XREF: ...
		inc	ebx		; jumptable 68F4A88F cases 22,24
					; jumptable 68F4A929 cases 22,24-27
		nop
		lea	esi, [esi+0]

loc_68F4A910:				; CODE XREF: sub_68F4A860+12Bj
					; sub_68F4A860+164j ...
		cmp	ebx, edi
		mov	edx, 0FFFFFFFFh
		jz	short loc_68F4A8C7
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4A900 ; jumptable 68F4A88F	case 29
		jmp	ds:off_68F59A64[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4A930:				; CODE XREF: sub_68F4A860+2Fj
					; DATA XREF: .rdata:off_68F59A00o
		lea	edx, [ebx+1]	; jumptable 68F4A88F case 19
		cmp	edx, edi
		jz	loc_68F4AA60
		movzx	eax, byte ptr [ebx+1]
		cmp	al, 78h
		jz	loc_68F4AA1B
		movzx	eax, al
		cmp	byte ptr [esi+eax+4Ch],	19h
		jz	loc_68F4AA6C

loc_68F4A955:				; CODE XREF: sub_68F4A860+1D1j
					; sub_68F4A860+1E9j ...
		mov	eax, [ebp+arg_4]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4A8C7
; ---------------------------------------------------------------------------

loc_68F4A963:				; CODE XREF: sub_68F4A860+2Fj
					; DATA XREF: .rdata:off_68F59A00o
		mov	eax, edi	; jumptable 68F4A88F case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	loc_68F4A8C7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+158h]
		test	eax, eax
		jz	loc_68F4A8C0	; jumptable 68F4A88F default case
					; jumptable 68F4A929 case 29
		add	ebx, 2
		jmp	short loc_68F4A910
; ---------------------------------------------------------------------------

loc_68F4A98D:				; CODE XREF: sub_68F4A860+C9j
					; DATA XREF: .rdata:off_68F59A64o
		mov	edx, [ebp+arg_4] ; jumptable 68F4A929 case 18
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 9
		jmp	loc_68F4A8C7
; ---------------------------------------------------------------------------

loc_68F4A99F:				; CODE XREF: sub_68F4A860+C9j
					; DATA XREF: .rdata:off_68F59A64o
		mov	eax, edi	; jumptable 68F4A929 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4AAA7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+154h]
		test	eax, eax
		jz	loc_68F4A900	; jumptable 68F4A88F case 29

loc_68F4A9C1:				; CODE XREF: sub_68F4A860+53j
		add	ebx, 4
		jmp	loc_68F4A910
; ---------------------------------------------------------------------------

loc_68F4A9C9:				; CODE XREF: sub_68F4A860+C9j
					; DATA XREF: .rdata:off_68F59A64o
		mov	eax, edi	; jumptable 68F4A929 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4AAA7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+150h]
		test	eax, eax
		jz	loc_68F4A8C0	; jumptable 68F4A88F default case
					; jumptable 68F4A929 case 29

loc_68F4A9EB:				; CODE XREF: sub_68F4A860+93j
		add	ebx, 3
		jmp	loc_68F4A910
; ---------------------------------------------------------------------------

loc_68F4A9F3:				; CODE XREF: sub_68F4A860+C9j
					; DATA XREF: .rdata:off_68F59A64o
		mov	eax, edi	; jumptable 68F4A929 case 5
		sub	eax, ebx
		dec	eax
		jle	loc_68F4AAA7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+14Ch]
		test	eax, eax
		jz	loc_68F4A900	; jumptable 68F4A88F case 29
		add	ebx, 2
		jmp	loc_68F4A910
; ---------------------------------------------------------------------------

loc_68F4AA1B:				; CODE XREF: sub_68F4A860+E1j
		lea	edx, [ebx+2]
		cmp	edx, edi
		jz	short loc_68F4AA60
		movzx	eax, byte ptr [ebx+2]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 18h
		cmp	eax, 1
		ja	loc_68F4A955
		lea	edx, [ebx+3]
		jmp	short loc_68F4AA5C
; ---------------------------------------------------------------------------

loc_68F4AA3C:				; CODE XREF: sub_68F4A860+1FEj
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 12h
		jz	short loc_68F4AA93
		jl	loc_68F4A955
		sub	eax, 18h
		cmp	eax, 1
		ja	loc_68F4A955
		inc	edx

loc_68F4AA5C:				; CODE XREF: sub_68F4A860+1DAj
		cmp	edx, edi
		jnz	short loc_68F4AA3C

loc_68F4AA60:				; CODE XREF: sub_68F4A860+D5j
					; sub_68F4A860+1C0j
		mov	eax, 0FFFFFFFFh

loc_68F4AA65:				; CODE XREF: sub_68F4A860+231j
		mov	edx, eax
		jmp	loc_68F4A8C7
; ---------------------------------------------------------------------------

loc_68F4AA6C:				; CODE XREF: sub_68F4A860+EFj
		lea	edx, [ebx+2]
		jmp	short loc_68F4AA88
; ---------------------------------------------------------------------------

loc_68F4AA71:				; CODE XREF: sub_68F4A860+22Aj
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 12h
		jz	short loc_68F4AA93
		cmp	eax, 19h
		jnz	loc_68F4A955
		inc	edx

loc_68F4AA88:				; CODE XREF: sub_68F4A860+20Fj
		cmp	edx, edi
		jnz	short loc_68F4AA71
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68F4AA65
; ---------------------------------------------------------------------------

loc_68F4AA93:				; CODE XREF: sub_68F4A860+1E7j
					; sub_68F4A860+21Cj
		lea	eax, [edx+1]
		mov	edx, [ebp+arg_4]
		mov	[edx], eax
		mov	eax, 0Ah
		mov	edx, eax
		jmp	loc_68F4A8C7
; ---------------------------------------------------------------------------

loc_68F4AAA7:				; CODE XREF: sub_68F4A860+146j
					; sub_68F4A860+170j ...
		mov	edx, 0FFFFFFFEh
		jmp	loc_68F4A8C7
sub_68F4A860	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F4AAC0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4AAC0	proc near		; CODE XREF: .text:68F4AAB1j
					; DATA XREF: .rdata:68F57F04o ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	edx, 0FFFFFFFCh
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	esi, [ebp+arg_0]
		cmp	ebx, edi
		jz	short loc_68F4AB3D
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		jbe	short loc_68F4AB10
		nop			; jumptable 68F4AB10 default case
		lea	esi, [esi+0]

loc_68F4AAF0:				; CODE XREF: sub_68F4AAC0+44j
		inc	ebx		; jumptable 68F4AB06 default case

loc_68F4AAF1:				; CODE XREF: sub_68F4AAC0+118j
					; sub_68F4AAC0+12Cj ...
		cmp	ebx, edi
		jz	loc_68F4ABA9

loc_68F4AAF9:				; CODE XREF: sub_68F4AAC0+E3j
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F4AAF0 ; jumptable 68F4AB06	default	case
		jmp	ds:off_68F59AD0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4AB10:				; CODE XREF: sub_68F4AAC0+26j
		jmp	ds:off_68F59AFC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4AB17:				; CODE XREF: sub_68F4AAC0+394j
					; sub_68F4AAC0+590j
					; DATA XREF: ...
		inc	[ebp+var_14]	; jumptable 68F4AE54 case 17
					; jumptable 68F4B050 case 17
		mov	edx, 0FFFFFFFFh
		cmp	[ebp+var_14], edi
		jz	short loc_68F4AB3D
		mov	ecx, [ebp+var_14]
		cmp	byte ptr [ecx],	3Eh
		jnz	loc_68F4ADF8	; jumptable 68F4AD57 case 29
		mov	edx, [ebp+arg_C]
		mov	eax, ecx
		inc	eax
		mov	[edx], eax
		mov	edx, 4

loc_68F4AB3D:				; CODE XREF: sub_68F4AAC0+19j
					; sub_68F4AAC0+62j ...
		add	esp, 1Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4AB47:				; CODE XREF: sub_68F4AAC0+46j
					; DATA XREF: .rdata:off_68F59AD0o
		mov	eax, edi	; jumptable 68F4AB06 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4AB70 ; jumptable 68F4AB06	cases 0-3,8-10
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jz	loc_68F4AC20
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4AB70:				; CODE XREF: sub_68F4AAC0+46j
					; sub_68F4AAC0+8Ej ...
		mov	eax, [ebp+arg_C] ; jumptable 68F4AB06 cases 0-3,8-10
		mov	[eax], ebx
		mov	edx, 6

loc_68F4AB7A:				; CODE XREF: sub_68F4AAC0+F3j
					; sub_68F4AAC0+2D6j
		add	esp, 1Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4AB84:				; CODE XREF: sub_68F4AAC0+46j
					; DATA XREF: .rdata:off_68F59AD0o
		mov	eax, edi	; jumptable 68F4AB06 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4ABA9
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	short loc_68F4ABA9

loc_68F4AB9E:				; CODE XREF: sub_68F4AAC0+21Bj
		add	ebx, 4
		cmp	ebx, edi
		jnz	loc_68F4AAF9

loc_68F4ABA9:				; CODE XREF: sub_68F4AAC0+33j
					; sub_68F4AAC0+CBj ...
		mov	edx, [ebp+arg_C]
		mov	[edx], ebx
		mov	edx, 6
		jmp	short loc_68F4AB7A
; ---------------------------------------------------------------------------

loc_68F4ABB5:				; CODE XREF: sub_68F4AAC0+46j
					; DATA XREF: .rdata:off_68F59AD0o
		mov	eax, edi	; jumptable 68F4AB06 case 5
		sub	eax, ebx
		dec	eax
		jle	loc_68F4AD8C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	loc_68F4AD8C

loc_68F4ABD5:				; CODE XREF: sub_68F4AAC0+1A9j
		add	ebx, 2
		jmp	loc_68F4AAF1
; ---------------------------------------------------------------------------

loc_68F4ABDD:				; CODE XREF: sub_68F4AAC0+46j
					; DATA XREF: .rdata:off_68F59AD0o
		lea	eax, [ebx+1]	; jumptable 68F4AB06 case 4
		cmp	eax, edi
		jz	short loc_68F4AB70 ; jumptable 68F4AB06	cases 0-3,8-10
		cmp	byte ptr [ebx+1], 5Dh
		jz	short loc_68F4AC28

loc_68F4ABEA:				; CODE XREF: sub_68F4AAC0+177j
		mov	ebx, eax
		jmp	loc_68F4AAF1
; ---------------------------------------------------------------------------

loc_68F4ABF1:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; DATA XREF: .rdata:off_68F59AFCo
		mov	eax, edi	; jumptable 68F4AB10 case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4AB3D
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	loc_68F4AD80	; jumptable 68F4AF58 case 29
		nop
		lea	esi, [esi+0]

loc_68F4AC20:				; CODE XREF: sub_68F4AAC0+9Fj
		add	ebx, 3
		jmp	loc_68F4AAF1
; ---------------------------------------------------------------------------

loc_68F4AC28:				; CODE XREF: sub_68F4AAC0+128j
		lea	edx, [ebx+2]
		cmp	edx, edi
		jz	loc_68F4AB70	; jumptable 68F4AB06 cases 0-3,8-10
		cmp	byte ptr [ebx+2], 3Eh
		jnz	short loc_68F4ABEA
		mov	ecx, [ebp+arg_C]
		mov	[ecx], edx
		xor	edx, edx

loc_68F4AC40:				; CODE XREF: sub_68F4AAC0+1B6j
					; sub_68F4AAC0+228j ...
		add	esp, 1Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4AC4A:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; DATA XREF: .rdata:off_68F59AFCo
		mov	eax, edi	; jumptable 68F4AB10 case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	loc_68F4AB3D
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jz	loc_68F4ABD5

loc_68F4AC6F:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; sub_68F4AAC0+5F8j ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4AB10 cases 0,1,8
					; jumptable 68F4B0B8 case 29
		mov	[edx], ebx

loc_68F4AC74:				; CODE XREF: sub_68F4AAC0+7C9j
		xor	edx, edx
		jmp	short loc_68F4AC40
; ---------------------------------------------------------------------------

loc_68F4AC78:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; DATA XREF: .rdata:off_68F59AFCo
		inc	ebx		; jumptable 68F4AB10 case 9
		mov	edx, 0FFFFFFFDh
		cmp	ebx, edi
		jz	loc_68F4AB3D
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+arg_C]
		cmp	byte ptr [esi+eax+4Ch],	0Ah
		setz	al
		movzx	eax, al
		lea	eax, [ebx+eax]
		mov	[edx], eax
		mov	edx, 7

loc_68F4ACA1:				; CODE XREF: sub_68F4AAC0+1F8j
		add	esp, 1Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4ACAB:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; DATA XREF: .rdata:off_68F59AFCo
		mov	ecx, [ebp+arg_C] ; jumptable 68F4AB10 case 10
		lea	eax, [ebx+1]
		mov	edx, 7
		mov	[ecx], eax
		jmp	short loc_68F4ACA1
; ---------------------------------------------------------------------------

loc_68F4ACBA:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; DATA XREF: .rdata:off_68F59AFCo
		mov	eax, edi	; jumptable 68F4AB10 case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4AB3D
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jz	loc_68F4AB9E

loc_68F4ACE1:				; CODE XREF: sub_68F4AAC0+250j
					; sub_68F4AAC0+492j ...
		mov	eax, [ebp+arg_C] ; jumptable 68F4AF58 default case
		mov	[eax], ebx

loc_68F4ACE6:				; CODE XREF: sub_68F4AAC0+6FEj
					; sub_68F4AAC0+7A3j
		xor	edx, edx
		jmp	loc_68F4AC40
; ---------------------------------------------------------------------------

loc_68F4ACED:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; DATA XREF: .rdata:off_68F59AFCo
		inc	ebx		; jumptable 68F4AB10 case 4
		mov	edx, 0FFFFFFFBh
		cmp	ebx, edi
		jz	loc_68F4AB3D
		cmp	byte ptr [ebx],	5Dh
		jnz	loc_68F4AAF1
		inc	ebx
		cmp	ebx, edi
		jz	loc_68F4AB3D
		cmp	byte ptr [ebx],	3Eh
		jz	short loc_68F4ACE1 ; jumptable 68F4AF58	default	case
		dec	ebx
		jmp	loc_68F4AAF1
; ---------------------------------------------------------------------------

loc_68F4AD18:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; DATA XREF: .rdata:off_68F59AFCo
		mov	ecx, [ebp+arg_C] ; jumptable 68F4AB10 case 3
		lea	edx, [ebx+1]
		mov	eax, esi
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], ecx
		call	sub_68F4A860

loc_68F4AD2C:				; CODE XREF: sub_68F4AAC0+6A8j
					; sub_68F4AAC0+AF7j
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4AD33:				; CODE XREF: sub_68F4AAC0:loc_68F4AB10j
					; DATA XREF: .rdata:off_68F59AFCo
		lea	eax, [ebx+1]	; jumptable 68F4AB10 case 2
		mov	edx, 0FFFFFFFFh
		cmp	eax, edi
		mov	[ebp+var_14], eax
		jz	loc_68F4AB3D
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4ADC3 ; jumptable 68F4AD57	default	case
		jmp	ds:off_68F59B28[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4AD5E:				; CODE XREF: sub_68F4AAC0+5F8j
					; DATA XREF: .rdata:off_68F59D1Co
		mov	eax, edi	; jumptable 68F4B0B8 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4B22C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+150h]
		test	eax, eax
		jnz	loc_68F4B117

loc_68F4AD80:				; CODE XREF: sub_68F4AAC0+152j
					; sub_68F4AAC0+498j ...
		mov	ecx, [ebp+arg_C] ; jumptable 68F4AF58 case 29
		xor	edx, edx
		mov	[ecx], ebx
		jmp	loc_68F4AC40
; ---------------------------------------------------------------------------

loc_68F4AD8C:				; CODE XREF: sub_68F4AAC0+FAj
					; sub_68F4AAC0+10Fj
		mov	ecx, [ebp+arg_C]
		mov	edx, 6
		mov	[ecx], ebx
		jmp	loc_68F4AB7A
; ---------------------------------------------------------------------------

loc_68F4AD9B:				; CODE XREF: sub_68F4AAC0+566j
					; DATA XREF: .rdata:off_68F59C54o
		mov	ecx, [ebp+var_14] ; jumptable 68F4B026 case 6
		mov	eax, edi
		sub	eax, ecx
		cmp	eax, 2
		jle	loc_68F4B22C
		mov	ecx, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], ecx
		call	dword ptr [esi+15Ch]
		test	eax, eax
		jnz	loc_68F4AFBE

loc_68F4ADC3:				; CODE XREF: sub_68F4AAC0+295j
					; sub_68F4AAC0+297j ...
		mov	edx, [ebp+var_14] ; jumptable 68F4AD57 default case
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	edx, edx
		jmp	loc_68F4AC40
; ---------------------------------------------------------------------------

loc_68F4ADD2:				; CODE XREF: sub_68F4AAC0+566j
					; DATA XREF: .rdata:off_68F59C54o
		mov	edx, [ebp+var_14] ; jumptable 68F4B026 case 5
		mov	eax, edi
		sub	eax, edx
		dec	eax
		jle	loc_68F4B22C
		mov	edx, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], edx
		call	dword ptr [esi+158h]
		test	eax, eax
		jnz	loc_68F4AFE9

loc_68F4ADF8:				; CODE XREF: sub_68F4AAC0+6Aj
					; sub_68F4AAC0+297j ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4AD57 case 29
		mov	ecx, [ebp+var_14]
		mov	[edx], ecx
		xor	edx, edx
		jmp	loc_68F4AC40
; ---------------------------------------------------------------------------

loc_68F4AE07:				; CODE XREF: sub_68F4AAC0+297j
					; DATA XREF: .rdata:off_68F59B28o
		mov	ecx, [ebp+var_14] ; jumptable 68F4AD57 case 5
		mov	eax, edi
		mov	edx, 0FFFFFFFEh
		sub	eax, ecx
		dec	eax
		jle	loc_68F4AB3D
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+158h]
		test	eax, eax
		jz	short loc_68F4ADF8 ; jumptable 68F4AD57	case 29
		add	[ebp+var_14], 2

loc_68F4AE32:				; CODE XREF: sub_68F4AAC0+3CCj
					; sub_68F4AAC0+3FFj ...
		xor	ebx, ebx

loc_68F4AE34:				; CODE XREF: sub_68F4AAC0+502j
					; sub_68F4AAC0+52Dj ...
		cmp	[ebp+var_14], edi
		jz	loc_68F4B150
		mov	edx, [ebp+var_14]
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4AF87	; jumptable 68F4AE54 default case
					; jumptable 68F4B026 case 29
					; jumptable 68F4B050 case 29
		jmp	ds:off_68F59B8C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4AE5B:				; CODE XREF: sub_68F4AAC0+297j
					; DATA XREF: .rdata:off_68F59B28o
		mov	ebx, [ebp+var_14] ; jumptable 68F4AD57 case 7
		mov	eax, edi
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4AB3D
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+160h]
		test	eax, eax
		jz	loc_68F4ADF8	; jumptable 68F4AD57 case 29
		add	[ebp+var_14], 4
		jmp	short loc_68F4AE32
; ---------------------------------------------------------------------------

loc_68F4AE8E:				; CODE XREF: sub_68F4AAC0+297j
					; DATA XREF: .rdata:off_68F59B28o
		mov	edx, [ebp+var_14] ; jumptable 68F4AD57 case 6
		mov	eax, edi
		sub	eax, edx
		cmp	eax, 2
		mov	edx, 0FFFFFFFEh
		jle	loc_68F4AB3D
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+15Ch]
		test	eax, eax
		jz	loc_68F4ADF8	; jumptable 68F4AD57 case 29
		add	[ebp+var_14], 3
		jmp	loc_68F4AE32
; ---------------------------------------------------------------------------

loc_68F4AEC4:				; CODE XREF: sub_68F4AAC0+297j
					; DATA XREF: .rdata:off_68F59B28o
		inc	[ebp+var_14]	; jumptable 68F4AD57 cases 22,24
		jmp	loc_68F4AE32
; ---------------------------------------------------------------------------

loc_68F4AECC:				; CODE XREF: sub_68F4AAC0+297j
					; DATA XREF: .rdata:off_68F59B28o
		inc	[ebp+var_14]	; jumptable 68F4AD57 case 16
		mov	edx, 0FFFFFFFFh
		cmp	[ebp+var_14], edi
		jz	loc_68F4AB3D
		mov	edx, [ebp+var_14]
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 14h
		jz	loc_68F4B15A
		cmp	eax, 1Bh
		jnz	loc_68F4ADC3	; jumptable 68F4AD57 default case
		mov	ecx, [ebp+arg_C]
		inc	edx
		mov	eax, esi
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], ecx
		call	sub_68F4A230
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4AF13:				; CODE XREF: sub_68F4AAC0+297j
					; DATA XREF: .rdata:off_68F59B28o
		mov	edx, [ebp+var_14] ; jumptable 68F4AD57 case 15
		mov	eax, esi
		mov	ecx, [ebp+arg_C]
		mov	[esp+28h+var_28], edi
		inc	edx
		mov	[esp+28h+var_24], ecx
		call	sub_68F4A3F0
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4AF2F:				; CODE XREF: sub_68F4AAC0+297j
					; DATA XREF: .rdata:off_68F59B28o
		mov	ebx, [ebp+var_14] ; jumptable 68F4AD57 case 17
		mov	edx, 0FFFFFFFFh
		inc	ebx
		cmp	ebx, edi
		jz	loc_68F4AB3D
		mov	edx, [ebp+var_14]
		movzx	eax, byte ptr [edx+1]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4ACE1	; jumptable 68F4AF58 default case
		jmp	ds:off_68F59BF0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4AF5F:				; CODE XREF: sub_68F4AAC0+566j
					; DATA XREF: .rdata:off_68F59C54o
		mov	edx, [ebp+var_14] ; jumptable 68F4B026 case 7
		mov	eax, edi
		sub	eax, edx
		cmp	eax, 3
		jle	loc_68F4B22C
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+160h]
		test	eax, eax
		jnz	loc_68F4B092

loc_68F4AF87:				; CODE XREF: sub_68F4AAC0+38Ej
					; sub_68F4AAC0+394j ...
		mov	eax, [ebp+var_14] ; jumptable 68F4AE54 default case
					; jumptable 68F4B026 case 29
					; jumptable 68F4B050 case 29
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	edx, edx
		jmp	loc_68F4AC40
; ---------------------------------------------------------------------------

loc_68F4AF96:				; CODE XREF: sub_68F4AAC0+394j
					; DATA XREF: .rdata:off_68F59B8Co
		mov	edx, [ebp+var_14] ; jumptable 68F4AE54 case 6
		mov	eax, edi
		sub	eax, edx
		cmp	eax, 2
		jle	loc_68F4B22C
		mov	ecx, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], ecx
		call	dword ptr [esi+150h]
		test	eax, eax
		jz	loc_68F4ADF8	; jumptable 68F4AD57 case 29

loc_68F4AFBE:				; CODE XREF: sub_68F4AAC0+2FDj
		add	[ebp+var_14], 3
		jmp	loc_68F4AE34
; ---------------------------------------------------------------------------

loc_68F4AFC7:				; CODE XREF: sub_68F4AAC0+394j
					; DATA XREF: .rdata:off_68F59B8Co
		mov	ecx, [ebp+var_14] ; jumptable 68F4AE54 case 5
		mov	eax, edi
		sub	eax, ecx
		dec	eax
		jle	loc_68F4B22C
		mov	edx, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], edx
		call	dword ptr [esi+14Ch]
		test	eax, eax
		jz	short loc_68F4AF87 ; jumptable 68F4AE54	default	case
					; jumptable 68F4B026 case 29
					; jumptable 68F4B050 case 29

loc_68F4AFE9:				; CODE XREF: sub_68F4AAC0+332j
		add	[ebp+var_14], 2
		jmp	loc_68F4AE34
; ---------------------------------------------------------------------------

loc_68F4AFF2:				; CODE XREF: sub_68F4AAC0+394j
					; sub_68F4AAC0+566j
					; DATA XREF: ...
		inc	[ebp+var_14]	; jumptable 68F4AE54 cases 22,24-27
					; jumptable 68F4B026 cases 22,24
		jmp	loc_68F4AE34
; ---------------------------------------------------------------------------

loc_68F4AFFA:				; CODE XREF: sub_68F4AAC0+394j
					; DATA XREF: .rdata:off_68F59B8Co
		test	ebx, ebx	; jumptable 68F4AE54 case 23
		jnz	short loc_68F4AF87 ; jumptable 68F4AE54	default	case
					; jumptable 68F4B026 case 29
					; jumptable 68F4B050 case 29
		inc	[ebp+var_14]
		mov	ebx, 1
		cmp	[ebp+var_14], edi
		jz	loc_68F4B150
		mov	edx, [ebp+var_14]
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4ADF8	; jumptable 68F4AD57 case 29
		jmp	ds:off_68F59C54[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B02D:				; CODE XREF: sub_68F4AAC0+394j
					; sub_68F4AAC0+590j
					; DATA XREF: ...
		inc	[ebp+var_14]	; jumptable 68F4AE54 cases 9,10,21
					; jumptable 68F4B050 cases 9,10,21
		cmp	[ebp+var_14], edi
		jz	loc_68F4B150
		mov	edx, [ebp+var_14]
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4ADF8	; jumptable 68F4AD57 case 29
		jmp	ds:off_68F59CB8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B057:				; CODE XREF: sub_68F4AAC0+394j
					; sub_68F4AAC0+590j
					; DATA XREF: ...
		mov	eax, [ebp+var_14] ; jumptable 68F4AE54 case 11
					; jumptable 68F4B050 case 11
		mov	edx, [ebp+arg_C]
		inc	eax
		mov	[edx], eax
		mov	edx, 2
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B06A:				; CODE XREF: sub_68F4AAC0+394j
					; DATA XREF: .rdata:off_68F59B8Co
		mov	ecx, [ebp+var_14] ; jumptable 68F4AE54 case 7
		mov	eax, edi
		sub	eax, ecx
		cmp	eax, 3
		jle	loc_68F4B22C
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+154h]
		test	eax, eax
		jz	loc_68F4ADC3	; jumptable 68F4AD57 default case

loc_68F4B092:				; CODE XREF: sub_68F4AAC0+4C1j
		add	[ebp+var_14], 4
		jmp	loc_68F4AE34
; ---------------------------------------------------------------------------

loc_68F4B09B:				; CODE XREF: sub_68F4AAC0+498j
					; sub_68F4AAC0+5F8j
					; DATA XREF: ...
		inc	ebx		; jumptable 68F4AF58 cases 22,24
					; jumptable 68F4B0B8 cases 22-27

loc_68F4B09C:				; CODE XREF: sub_68F4AAC0+629j
					; sub_68F4AAC0+65Aj ...
		cmp	ebx, edi
		jz	loc_68F4B150
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4AD80	; jumptable 68F4AF58 case 29
		jmp	ds:off_68F59D1C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B0BF:				; CODE XREF: sub_68F4AAC0+498j
					; DATA XREF: .rdata:off_68F59BF0o
		mov	eax, edi	; jumptable 68F4AF58 case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4AB3D
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+160h]
		test	eax, eax
		jz	loc_68F4AD80	; jumptable 68F4AF58 case 29

loc_68F4B0E6:				; CODE XREF: sub_68F4AAC0+798j
		add	ebx, 4
		jmp	short loc_68F4B09C
; ---------------------------------------------------------------------------
		align 10h

loc_68F4B0F0:				; CODE XREF: sub_68F4AAC0+498j
					; DATA XREF: .rdata:off_68F59BF0o
		mov	eax, edi	; jumptable 68F4AF58 case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4AB3D
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+15Ch]
		test	eax, eax
		jz	loc_68F4AC6F	; jumptable 68F4AB10 cases 0,1,8
					; jumptable 68F4B0B8 case 29

loc_68F4B117:				; CODE XREF: sub_68F4AAC0+2BAj
		add	ebx, 3
		jmp	short loc_68F4B09C
; ---------------------------------------------------------------------------
		align 10h

loc_68F4B120:				; CODE XREF: sub_68F4AAC0+498j
					; DATA XREF: .rdata:off_68F59BF0o
		mov	eax, edi	; jumptable 68F4AF58 case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	loc_68F4AB3D
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+158h]
		test	eax, eax
		jz	loc_68F4ACE1	; jumptable 68F4AF58 default case

loc_68F4B145:				; CODE XREF: sub_68F4AAC0+7BEj
		add	ebx, 2
		jmp	loc_68F4B09C
; ---------------------------------------------------------------------------
		align 10h

loc_68F4B150:				; CODE XREF: sub_68F4AAC0+377j
					; sub_68F4AAC0+549j ...
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B15A:				; CODE XREF: sub_68F4AAC0+42Bj
		mov	edx, [ebp+var_14]
		mov	eax, 0FFFFFFFFh
		inc	edx
		sub	edi, edx
		cmp	edi, 5
		jle	loc_68F4AD2C
		xor	ecx, ecx

loc_68F4B170:				; CODE XREF: sub_68F4AAC0+6C4j
		movzx	eax, ds:byte_68F59AC8[ecx]
		cmp	[edx], al
		jnz	loc_68F4B20C	; jumptable 68F4B463 case 2
		inc	ecx
		inc	edx
		cmp	ecx, 5
		jle	short loc_68F4B170
		mov	ecx, [ebp+arg_C]
		mov	eax, 8
		mov	[ecx], edx
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B197:				; CODE XREF: sub_68F4AAC0+6F2j
		cmp	eax, 15h
		jnz	loc_68F4ACE1	; jumptable 68F4AF58 default case

loc_68F4B1A0:				; CODE XREF: sub_68F4AAC0+5F8j
					; sub_68F4AAC0+6F7j
					; DATA XREF: ...
		inc	ebx		; jumptable 68F4B0B8 cases 9,10,21
		cmp	ebx, edi
		jz	short loc_68F4B150
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Bh
		jz	short loc_68F4B21A
		jg	short loc_68F4B197
		cmp	eax, 9
		jge	short loc_68F4B1A0 ; jumptable 68F4B0B8	cases 9,10,21
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		jmp	loc_68F4ACE6
; ---------------------------------------------------------------------------

loc_68F4B1C3:				; CODE XREF: sub_68F4AAC0+7FCj
					; sub_68F4AAC0+896j
					; DATA XREF: ...
		mov	[ebp+var_18], 0	; jumptable 68F4B2BC case 14
		inc	edx
		mov	[ebp+var_1C], edx

loc_68F4B1CE:				; CODE XREF: sub_68F4AAC0+74Aj
		mov	edx, [ebp+var_1C]
		lea	eax, [edx+1]
		cmp	edx, edi
		mov	[ebp+var_1C], eax
		mov	[ebp+var_10], edx
		jz	loc_68F4B64E
		movzx	eax, byte ptr [eax-1]
		movzx	ebx, byte ptr [esi+eax+4Ch]
		lea	eax, [ebx-0Ch]
		cmp	eax, 1
		jbe	loc_68F4B442	; jumptable 68F4B463 default case
		cmp	ebx, 15h
		ja	short loc_68F4B20C ; jumptable 68F4B463	case 2
		mov	eax, 1
		mov	cl, bl
		shl	eax, cl
		test	eax, 200600h
		jnz	short loc_68F4B1CE

loc_68F4B20C:				; CODE XREF: sub_68F4AAC0+6B9j
					; sub_68F4AAC0+73Aj ...
		mov	eax, [ebp+arg_C] ; jumptable 68F4B463 case 2
		mov	[eax], edx

loc_68F4B211:				; CODE XREF: sub_68F4AAC0+8BDj
					; sub_68F4AAC0+91Cj ...
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B21A:				; CODE XREF: sub_68F4AAC0+6F0j
		mov	ecx, [ebp+arg_C]
		lea	eax, [ebx+1]
		mov	[ecx], eax

loc_68F4B222:				; CODE XREF: sub_68F4AAC0+77Ej
		mov	edx, 5
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B22C:				; CODE XREF: sub_68F4AAC0+2A5j
					; sub_68F4AAC0+2E5j ...
		mov	edx, 0FFFFFFFEh
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B236:				; CODE XREF: sub_68F4AAC0+5F8j
					; DATA XREF: .rdata:off_68F59D1Co
		mov	edx, [ebp+arg_C] ; jumptable 68F4B0B8 case 11
		lea	eax, [ebx+1]
		mov	[edx], eax
		jmp	short loc_68F4B222
; ---------------------------------------------------------------------------

loc_68F4B240:				; CODE XREF: sub_68F4AAC0+5F8j
					; DATA XREF: .rdata:off_68F59D1Co
		mov	eax, edi	; jumptable 68F4B0B8 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4B22C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+154h]
		test	eax, eax
		jnz	loc_68F4B0E6
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		jmp	loc_68F4ACE6
; ---------------------------------------------------------------------------

loc_68F4B268:				; CODE XREF: sub_68F4AAC0+5F8j
					; DATA XREF: .rdata:off_68F59D1Co
		mov	eax, edi	; jumptable 68F4B0B8 case 5
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4B22C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+14Ch]
		test	eax, eax
		jnz	loc_68F4B145
		mov	edx, [ebp+arg_C]
		mov	[edx], ebx
		jmp	loc_68F4AC74
; ---------------------------------------------------------------------------

loc_68F4B28E:				; CODE XREF: sub_68F4AAC0+590j
					; DATA XREF: .rdata:off_68F59CB8o
		inc	[ebp+var_14]	; jumptable 68F4B050 cases 22,24

loc_68F4B291:				; CODE XREF: sub_68F4AAC0+834j
					; sub_68F4AAC0+B55j ...
		mov	[ebp+var_18], 0
		mov	eax, [ebp+var_14]
		mov	edx, eax
		mov	[ebp+var_10], eax

loc_68F4B2A0:				; CODE XREF: sub_68F4AAC0+83Aj
		cmp	edx, edi
		jz	loc_68F4B64E
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4B5C6	; jumptable 68F4B2BC default case
					; jumptable 68F4B463 cases 0,1,8
		jmp	ds:off_68F59D80[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B2C3:				; CODE XREF: sub_68F4AAC0+590j
					; DATA XREF: .rdata:off_68F59CB8o
		mov	ebx, [ebp+var_14] ; jumptable 68F4B050 case 7
		mov	eax, edi
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4AB3D
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+160h]
		test	eax, eax
		jz	loc_68F4AF87	; jumptable 68F4AE54 default case
					; jumptable 68F4B026 case 29
					; jumptable 68F4B050 case 29
		add	[ebp+var_14], 4
		jmp	short loc_68F4B291
; ---------------------------------------------------------------------------

loc_68F4B2F6:				; CODE XREF: sub_68F4AAC0+7FCj
					; DATA XREF: .rdata:off_68F59D80o
		inc	edx		; jumptable 68F4B2BC cases 22,24-27

loc_68F4B2F7:				; CODE XREF: sub_68F4AAC0+8C5j
					; sub_68F4AAC0+8EAj ...
		mov	[ebp+var_10], edx
		jmp	short loc_68F4B2A0
; ---------------------------------------------------------------------------

loc_68F4B2FC:				; CODE XREF: sub_68F4AAC0+7FCj
					; DATA XREF: .rdata:off_68F59D80o
		mov	ecx, [ebp+var_18] ; jumptable 68F4B2BC case 23
		test	ecx, ecx
		jnz	loc_68F4B5C6	; jumptable 68F4B2BC default case
					; jumptable 68F4B463 cases 0,1,8
		mov	[ebp+var_18], 1
		lea	ecx, [edx+1]
		cmp	ecx, edi
		mov	[ebp+var_10], ecx
		jz	loc_68F4B64E
		movzx	eax, byte ptr [ecx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4B404	; jumptable 68F4B330 default case
		jmp	ds:off_68F59DE4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B337:				; CODE XREF: sub_68F4AAC0+7FCj
					; DATA XREF: .rdata:off_68F59D80o
		lea	ebx, [edx+1]	; jumptable 68F4B2BC cases 9,10,21

loc_68F4B33A:				; CODE XREF: sub_68F4AAC0+8B1j
		mov	edx, ebx
		cmp	edx, edi
		lea	ebx, [ebx+1]
		mov	[ebp+var_10], edx
		jz	loc_68F4B64E
		movzx	eax, byte ptr [ebx-1]
		movzx	ecx, byte ptr [esi+eax+4Ch]
		cmp	ecx, 0Eh
		jz	loc_68F4B1C3	; jumptable 68F4B2BC case 14
		cmp	ecx, 15h
		ja	loc_68F4B5C6	; jumptable 68F4B2BC default case
					; jumptable 68F4B463 cases 0,1,8
		mov	eax, 1
		shl	eax, cl
		test	eax, 200600h
		jnz	short loc_68F4B33A
		jmp	loc_68F4B5C6	; jumptable 68F4B2BC default case
					; jumptable 68F4B463 cases 0,1,8
; ---------------------------------------------------------------------------

loc_68F4B378:				; CODE XREF: sub_68F4AAC0+870j
					; sub_68F4AAC0+ADFj ...
		mov	eax, [ebp+arg_C] ; jumptable 68F4B330 case 29
		mov	[eax], ecx
		jmp	loc_68F4B211
; ---------------------------------------------------------------------------

loc_68F4B382:				; CODE XREF: sub_68F4AAC0+870j
					; sub_68F4AAC0+AE5j
					; DATA XREF: ...
		lea	edx, [ecx+1]	; jumptable 68F4B330 cases 22,24
					; jumptable 68F4B5A5 cases 22,24
		jmp	loc_68F4B2F7
; ---------------------------------------------------------------------------

loc_68F4B38A:				; CODE XREF: sub_68F4AAC0+870j
					; sub_68F4AAC0+AE5j
					; DATA XREF: ...
		mov	eax, edi	; jumptable 68F4B330 case 7
					; jumptable 68F4B5A5 case 7
		sub	eax, ecx
		cmp	eax, 3
		jle	short loc_68F4B40E
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+160h]

loc_68F4B3A0:				; CODE XREF: sub_68F4AAC0+97Dj
		test	eax, eax
		jz	short loc_68F4B3D4
		mov	edx, [ebp+var_10]
		add	edx, 4
		jmp	loc_68F4B2F7
; ---------------------------------------------------------------------------

loc_68F4B3AF:				; CODE XREF: sub_68F4AAC0+870j
					; sub_68F4AAC0+AE5j
					; DATA XREF: ...
		mov	eax, edi	; jumptable 68F4B330 case 6
					; jumptable 68F4B5A5 case 6
		sub	eax, ecx
		cmp	eax, 2
		jle	short loc_68F4B40E
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+15Ch]

loc_68F4B3C5:				; CODE XREF: sub_68F4AAC0+9C0j
		test	eax, eax
		jz	short loc_68F4B41A
		mov	edx, [ebp+var_10]
		add	edx, 3
		jmp	loc_68F4B2F7
; ---------------------------------------------------------------------------

loc_68F4B3D4:				; CODE XREF: sub_68F4AAC0+8E2j
					; sub_68F4AAC0+937j ...
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		jmp	loc_68F4B211
; ---------------------------------------------------------------------------

loc_68F4B3E1:				; CODE XREF: sub_68F4AAC0+870j
					; sub_68F4AAC0+AE5j
					; DATA XREF: ...
		mov	eax, edi	; jumptable 68F4B330 case 5
					; jumptable 68F4B5A5 case 5
		sub	eax, ecx
		dec	eax
		jle	short loc_68F4B40E
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+158h]

loc_68F4B3F5:				; CODE XREF: sub_68F4AAC0+9D9j
		test	eax, eax
		jz	short loc_68F4B3D4
		mov	edx, [ebp+var_10]
		add	edx, 2
		jmp	loc_68F4B2F7
; ---------------------------------------------------------------------------

loc_68F4B404:				; CODE XREF: sub_68F4AAC0+86Aj
					; sub_68F4AAC0+870j ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4B330 default case
		mov	[edx], ecx
		jmp	loc_68F4B211
; ---------------------------------------------------------------------------

loc_68F4B40E:				; CODE XREF: sub_68F4AAC0+8D1j
					; sub_68F4AAC0+8F6j ...
		mov	eax, 0FFFFFFFEh
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B41A:				; CODE XREF: sub_68F4AAC0+907j
					; sub_68F4AAC0+9FAj ...
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		jmp	loc_68F4B211
; ---------------------------------------------------------------------------

loc_68F4B427:				; CODE XREF: sub_68F4AAC0+7FCj
					; DATA XREF: .rdata:off_68F59D80o
		mov	eax, edi	; jumptable 68F4B2BC case 7
		sub	eax, edx
		cmp	eax, 3
		jle	short loc_68F4B40E
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+154h]
		jmp	loc_68F4B3A0
; ---------------------------------------------------------------------------

loc_68F4B442:				; CODE XREF: sub_68F4AAC0+731j
					; sub_68F4AAC0+9A1j ...
		inc	edx		; jumptable 68F4B463 default case

loc_68F4B443:				; CODE XREF: sub_68F4AAC0+A06j
					; sub_68F4AAC0+A33j ...
		mov	[ebp+var_10], edx

loc_68F4B446:				; CODE XREF: sub_68F4AAC0+A7Ej
		cmp	edx, edi
		jz	loc_68F4B64E
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, ebx
		jz	loc_68F4B543
		cmp	eax, 8		; switch 9 cases
		ja	short loc_68F4B442 ; jumptable 68F4B463	default	case
		jmp	ds:off_68F59E48[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B46A:				; CODE XREF: sub_68F4AAC0+7FCj
					; DATA XREF: .rdata:off_68F59D80o
		mov	eax, edi	; jumptable 68F4B2BC case 6
		sub	eax, edx
		cmp	eax, 2
		jle	short loc_68F4B40E
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+150h]
		jmp	loc_68F4B3C5
; ---------------------------------------------------------------------------

loc_68F4B485:				; CODE XREF: sub_68F4AAC0+7FCj
					; DATA XREF: .rdata:off_68F59D80o
		mov	eax, edi	; jumptable 68F4B2BC case 5
		sub	eax, edx
		dec	eax
		jle	short loc_68F4B40E
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+14Ch]
		jmp	loc_68F4B3F5
; ---------------------------------------------------------------------------

loc_68F4B49E:				; CODE XREF: sub_68F4AAC0+9A3j
					; DATA XREF: .rdata:off_68F59E48o
		mov	eax, edi	; jumptable 68F4B463 case 7
		sub	eax, edx
		cmp	eax, 3
		jle	loc_68F4B40E
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	loc_68F4B41A
		mov	edx, [ebp+var_10]
		add	edx, 4
		jmp	loc_68F4B443
; ---------------------------------------------------------------------------

loc_68F4B4CB:				; CODE XREF: sub_68F4AAC0+9A3j
					; DATA XREF: .rdata:off_68F59E48o
		mov	eax, edi	; jumptable 68F4B463 case 6
		sub	eax, edx
		cmp	eax, 2
		jle	loc_68F4B40E
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	loc_68F4B3D4
		mov	edx, [ebp+var_10]
		add	edx, 3
		jmp	loc_68F4B443
; ---------------------------------------------------------------------------

loc_68F4B4F8:				; CODE XREF: sub_68F4AAC0+9A3j
					; DATA XREF: .rdata:off_68F59E48o
		mov	eax, edi	; jumptable 68F4B463 case 5
		sub	eax, edx
		dec	eax
		jle	loc_68F4B40E
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	loc_68F4B41A
		mov	edx, [ebp+var_10]
		add	edx, 2
		jmp	loc_68F4B443
; ---------------------------------------------------------------------------

loc_68F4B523:				; CODE XREF: sub_68F4AAC0+9A3j
					; DATA XREF: .rdata:off_68F59E48o
		mov	[esp+28h+var_28], edi ;	jumptable 68F4B463 case	3
		lea	eax, [ebp+var_10]
		inc	edx
		mov	[esp+28h+var_24], eax
		mov	eax, esi
		call	sub_68F4A860
		test	eax, eax
		mov	edx, eax
		jle	short loc_68F4B56E
		mov	edx, [ebp+var_10]
		jmp	loc_68F4B446
; ---------------------------------------------------------------------------

loc_68F4B543:				; CODE XREF: sub_68F4AAC0+998j
		lea	ecx, [edx+1]
		cmp	ecx, edi
		mov	edx, ecx
		mov	[ebp+var_10], ecx
		jz	loc_68F4B64E
		movzx	eax, byte ptr [ecx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 9		; switch 13 cases
		cmp	eax, 0Ch
		ja	loc_68F4B404	; jumptable 68F4B330 default case
		jmp	ds:off_68F59E6C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B56E:				; CODE XREF: sub_68F4AAC0+A79j
		jnz	short loc_68F4B578
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax

loc_68F4B578:				; CODE XREF: sub_68F4AAC0:loc_68F4B56Ej
		mov	eax, edx
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B581:				; CODE XREF: sub_68F4AAC0+AA7j
					; sub_68F4AAC0+AE5j
					; DATA XREF: ...
		lea	ecx, [edx+1]	; jumptable 68F4B567 cases 9,10,21
					; jumptable 68F4B5A5 cases 9,10,21
		cmp	ecx, edi
		mov	edx, ecx
		mov	[ebp+var_10], ecx
		jz	loc_68F4B64E
		movzx	eax, byte ptr [ecx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4B378	; jumptable 68F4B330 case 29
		jmp	ds:off_68F59EA0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B5AC:				; CODE XREF: sub_68F4AAC0+AA7j
					; sub_68F4AAC0+AE5j
					; DATA XREF: ...
		inc	edx		; jumptable 68F4B567 case 17
					; jumptable 68F4B5A5 case 17
		mov	eax, 0FFFFFFFFh
		cmp	edx, edi
		mov	[ebp+var_10], edx
		jz	loc_68F4AD2C
		cmp	byte ptr [edx],	3Eh
		jz	loc_68F4B65A

loc_68F4B5C6:				; CODE XREF: sub_68F4AAC0+7F6j
					; sub_68F4AAC0+7FCj ...
		mov	ecx, [ebp+arg_C] ; jumptable 68F4B2BC default case
					; jumptable 68F4B463 cases 0,1,8
		mov	[ecx], edx
		jmp	loc_68F4B211
; ---------------------------------------------------------------------------

loc_68F4B5D0:				; CODE XREF: sub_68F4AAC0+AA7j
					; sub_68F4AAC0+AE5j
					; DATA XREF: ...
		lea	eax, [edx+1]	; jumptable 68F4B567 case 11
					; jumptable 68F4B5A5 case 11
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		mov	eax, 1
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B5E4:				; CODE XREF: sub_68F4AAC0+590j
					; DATA XREF: .rdata:off_68F59CB8o
		mov	edx, [ebp+var_14] ; jumptable 68F4B050 case 6
		mov	eax, edi
		sub	eax, edx
		cmp	eax, 2
		mov	edx, 0FFFFFFFEh
		jle	loc_68F4AB3D
		mov	ecx, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], ecx
		call	dword ptr [esi+15Ch]
		test	eax, eax
		jz	loc_68F4ADC3	; jumptable 68F4AD57 default case
		add	[ebp+var_14], 3
		jmp	loc_68F4B291
; ---------------------------------------------------------------------------

loc_68F4B61A:				; CODE XREF: sub_68F4AAC0+590j
					; DATA XREF: .rdata:off_68F59CB8o
		mov	ecx, [ebp+var_14] ; jumptable 68F4B050 case 5
		mov	eax, edi
		mov	edx, 0FFFFFFFEh
		sub	eax, ecx
		dec	eax
		jle	loc_68F4AB3D
		mov	edx, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], edx
		call	dword ptr [esi+158h]
		test	eax, eax
		jz	loc_68F4ADF8	; jumptable 68F4AD57 case 29
		add	[ebp+var_14], 2
		jmp	loc_68F4B291
; ---------------------------------------------------------------------------

loc_68F4B64E:				; CODE XREF: sub_68F4AAC0+71Cj
					; sub_68F4AAC0+7E2j ...
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4AB3D
; ---------------------------------------------------------------------------

loc_68F4B65A:				; CODE XREF: sub_68F4AAC0+B00j
		mov	ecx, [ebp+arg_C]
		lea	eax, [edx+1]
		mov	[ecx], eax
		mov	eax, 3
		mov	edx, eax
		jmp	loc_68F4AB3D
sub_68F4AAC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4B670	proc near		; CODE XREF: sub_68F4B930+326j
					; sub_68F4C220+59p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	ebx, edi
		mov	[ebp+var_8], esi
		mov	edx, 0FFFFFFEAh
		mov	esi, eax
		jz	short loc_68F4B6D7
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 26 cases
		cmp	eax, 19h
		ja	short loc_68F4B6D0 ; jumptable 68F4B69F	default	case
					; jumptable 68F4B739 case 29
		jmp	ds:off_68F59F04[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B6A6:				; CODE XREF: sub_68F4B670+2Fj
					; DATA XREF: .rdata:off_68F59F04o
		mov	eax, edi	; jumptable 68F4B69F case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4B6D7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+160h]
		test	eax, eax
		jnz	loc_68F4B7A5
		lea	esi, [esi+0]

loc_68F4B6D0:				; CODE XREF: sub_68F4B670+2Dj
					; sub_68F4B670+2Fj ...
		mov	edx, [ebp+arg_4] ; jumptable 68F4B69F default case
					; jumptable 68F4B739 case 29
		mov	[edx], ebx

loc_68F4B6D5:				; CODE XREF: sub_68F4B670+A5j
		xor	edx, edx

loc_68F4B6D7:				; CODE XREF: sub_68F4B670+1Dj
					; sub_68F4B670+42j ...
		mov	ebx, [ebp+var_C]
		mov	eax, edx
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4B6E6:				; CODE XREF: sub_68F4B670+2Fj
					; DATA XREF: .rdata:off_68F59F04o
		mov	eax, edi	; jumptable 68F4B69F case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4B6D7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+15Ch]
		test	eax, eax
		jnz	loc_68F4B7CB
		lea	esi, [esi+0]

loc_68F4B710:				; CODE XREF: sub_68F4B670+2Fj
					; sub_68F4B670+C7j ...
		mov	eax, [ebp+arg_4] ; jumptable 68F4B69F case 29
		mov	[eax], ebx
		jmp	short loc_68F4B6D5
; ---------------------------------------------------------------------------

loc_68F4B717:				; CODE XREF: sub_68F4B670+2Fj
					; sub_68F4B670+C9j
					; DATA XREF: ...
		inc	ebx		; jumptable 68F4B69F cases 22,24
					; jumptable 68F4B739 cases 22,24-27
		nop
		lea	esi, [esi+0]

loc_68F4B720:				; CODE XREF: sub_68F4B670+F4j
					; sub_68F4B670+138j ...
		cmp	ebx, edi
		mov	edx, 0FFFFFFFFh
		jz	short loc_68F4B6D7
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4B710 ; jumptable 68F4B69F	case 29
		jmp	ds:off_68F59F6C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B740:				; CODE XREF: sub_68F4B670+2Fj
					; DATA XREF: .rdata:off_68F59F04o
		mov	eax, edi	; jumptable 68F4B69F case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4B6D7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+158h]
		test	eax, eax
		jz	loc_68F4B6D0	; jumptable 68F4B69F default case
					; jumptable 68F4B739 case 29
		add	ebx, 2
		jmp	short loc_68F4B720
; ---------------------------------------------------------------------------

loc_68F4B766:				; CODE XREF: sub_68F4B670+2Fj
					; DATA XREF: .rdata:off_68F59F04o
		mov	eax, [ebp+arg_4] ; jumptable 68F4B69F cases 9,10,21,30
		mov	edx, 16h
		mov	[eax], ebx
		jmp	loc_68F4B6D7
; ---------------------------------------------------------------------------

loc_68F4B775:				; CODE XREF: sub_68F4B670+C9j
					; DATA XREF: .rdata:off_68F59F6Co
		mov	edx, [ebp+arg_4] ; jumptable 68F4B739 case 18
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 1Ch
		jmp	loc_68F4B6D7
; ---------------------------------------------------------------------------

loc_68F4B787:				; CODE XREF: sub_68F4B670+C9j
					; DATA XREF: .rdata:off_68F59F6Co
		mov	eax, edi	; jumptable 68F4B739 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4B7F7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+154h]
		test	eax, eax
		jz	loc_68F4B710	; jumptable 68F4B69F case 29

loc_68F4B7A5:				; CODE XREF: sub_68F4B670+53j
		add	ebx, 4
		jmp	loc_68F4B720
; ---------------------------------------------------------------------------

loc_68F4B7AD:				; CODE XREF: sub_68F4B670+C9j
					; DATA XREF: .rdata:off_68F59F6Co
		mov	eax, edi	; jumptable 68F4B739 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4B7F7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+150h]
		test	eax, eax
		jz	loc_68F4B6D0	; jumptable 68F4B69F default case
					; jumptable 68F4B739 case 29

loc_68F4B7CB:				; CODE XREF: sub_68F4B670+93j
		add	ebx, 3
		jmp	loc_68F4B720
; ---------------------------------------------------------------------------

loc_68F4B7D3:				; CODE XREF: sub_68F4B670+C9j
					; DATA XREF: .rdata:off_68F59F6Co
		mov	eax, edi	; jumptable 68F4B739 case 5
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4B7F7
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+14Ch]
		test	eax, eax
		jz	loc_68F4B710	; jumptable 68F4B69F case 29
		add	ebx, 2
		jmp	loc_68F4B720
; ---------------------------------------------------------------------------

loc_68F4B7F7:				; CODE XREF: sub_68F4B670+11Ej
					; sub_68F4B670+144j ...
		mov	edx, 0FFFFFFFEh
		jmp	loc_68F4B6D7
sub_68F4B670	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F4B810
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4B810	proc near		; CODE XREF: .text:68F4B801j
					; sub_68F4B930+1C5j

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 0Ch
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	edi, [ebp+arg_4]

loc_68F4B824:				; CODE XREF: sub_68F4B810+76j
					; sub_68F4B810+99j ...
		cmp	ebx, edi
		jz	short loc_68F4B845

loc_68F4B828:				; CODE XREF: sub_68F4B810+33j
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		cmp	eax, 0Dh	; switch 14 cases
		ja	short loc_68F4B840 ; jumptable 68F4B835	default	case
		jmp	ds:off_68F59FD0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4B840:				; CODE XREF: sub_68F4B810+23j
					; sub_68F4B810+25j
					; DATA XREF: ...
		inc	ebx		; jumptable 68F4B835 default case
		cmp	ebx, edi
		jnz	short loc_68F4B828

loc_68F4B845:				; CODE XREF: sub_68F4B810+16j
		add	esp, 0Ch
		mov	edx, 0FFFFFFFFh
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4B854:				; CODE XREF: sub_68F4B810+25j
					; sub_68F4B810+71j ...
		mov	eax, [ebp+arg_8] ; jumptable 68F4B835 cases 0,1,8
		mov	[eax], ebx

loc_68F4B859:				; CODE XREF: sub_68F4B810+E5j
					; sub_68F4B810+FCj
		xor	edx, edx

loc_68F4B85B:				; CODE XREF: sub_68F4B810+CFj
					; sub_68F4B810+102j ...
		add	esp, 0Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4B865:				; CODE XREF: sub_68F4B810+25j
					; DATA XREF: .rdata:off_68F59FD0o
		mov	eax, edi	; jumptable 68F4B835 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4B917
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+16Ch]
		test	eax, eax
		jnz	short loc_68F4B854 ; jumptable 68F4B835	cases 0,1,8
		add	ebx, 4
		jmp	short loc_68F4B824
; ---------------------------------------------------------------------------

loc_68F4B888:				; CODE XREF: sub_68F4B810+25j
					; DATA XREF: .rdata:off_68F59FD0o
		mov	eax, edi	; jumptable 68F4B835 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4B917
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+168h]
		test	eax, eax
		jnz	short loc_68F4B854 ; jumptable 68F4B835	cases 0,1,8
		add	ebx, 3
		jmp	loc_68F4B824
; ---------------------------------------------------------------------------

loc_68F4B8AE:				; CODE XREF: sub_68F4B810+25j
					; DATA XREF: .rdata:off_68F59FD0o
		mov	eax, edi	; jumptable 68F4B835 case 5
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4B917
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], esi
		call	dword ptr [esi+164h]
		test	eax, eax
		jnz	short loc_68F4B854 ; jumptable 68F4B835	cases 0,1,8
		add	ebx, 2
		jmp	loc_68F4B824
; ---------------------------------------------------------------------------

loc_68F4B8CE:				; CODE XREF: sub_68F4B810+25j
					; DATA XREF: .rdata:off_68F59FD0o
		inc	ebx		; jumptable 68F4B835 cases 12,13
		cmp	eax, [ebp+var_10]
		jnz	loc_68F4B824
		cmp	ebx, edi
		mov	edx, 0FFFFFFE5h
		jz	loc_68F4B85B
		mov	eax, [ebp+arg_8]
		mov	[eax], ebx
		movzx	eax, byte ptr [ebx]
		movzx	ecx, byte ptr [esi+eax+4Ch]
		cmp	ecx, 1Eh
		ja	loc_68F4B859
		mov	eax, 1
		mov	edx, 1Bh
		shl	eax, cl
		test	eax, 40300E00h
		jz	loc_68F4B859
		jmp	loc_68F4B85B
; ---------------------------------------------------------------------------

loc_68F4B917:				; CODE XREF: sub_68F4B810+5Cj
					; sub_68F4B810+7Fj ...
		mov	edx, 0FFFFFFFEh
		jmp	loc_68F4B85B
sub_68F4B810	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F4B930
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4B930	proc near		; CODE XREF: .text:68F4B921j
					; DATA XREF: .rdata:off_68F57F00o ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	edx, 0FFFFFFFCh
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_8]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		cmp	ebx, esi
		mov	[ebp+var_10], eax
		jz	short loc_68F4B997
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 24h	; switch 37 cases
		ja	short loc_68F4B990 ; jumptable 68F4B964	default	case
					; jumptable 68F4BFFD case 29
		jmp	ds:off_68F5A008[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4B96B:				; CODE XREF: sub_68F4B930+6CDj
					; DATA XREF: .rdata:off_68F5A270o
		mov	eax, esi	; jumptable 68F4BFFD case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4C10C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+154h]
		test	eax, eax
		jnz	loc_68F4BCE2
		lea	esi, [esi+0]

loc_68F4B990:				; CODE XREF: sub_68F4B930+32j
					; sub_68F4B930+34j ...
		mov	eax, [ebp+var_10] ; jumptable 68F4B964 default case
					; jumptable 68F4BFFD case 29
		mov	[eax], ebx

loc_68F4B995:				; CODE XREF: sub_68F4B930+33Aj
					; sub_68F4B930+48Ej ...
		xor	edx, edx

loc_68F4B997:				; CODE XREF: sub_68F4B930+25j
					; sub_68F4B930+ADj ...
		mov	ebx, [ebp+var_C]
		mov	eax, edx
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4B9A6:				; CODE XREF: sub_68F4B930+95j
		cmp	eax, 15h
		jnz	short loc_68F4B9D3

loc_68F4B9AB:				; CODE XREF: sub_68F4B930+34j
					; sub_68F4B930+93j
					; DATA XREF: ...
		lea	eax, [ebx+1]	; jumptable 68F4B964 cases 10,21

loc_68F4B9AE:				; CODE XREF: sub_68F4B930+A1j
					; sub_68F4B930+18Ej
		cmp	eax, esi
		mov	ebx, eax
		jz	loc_68F4BF01
		movzx	eax, byte ptr [eax]
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 0Ah
		jz	short loc_68F4B9AB ; jumptable 68F4B964	cases 10,21
		jg	short loc_68F4B9A6
		cmp	eax, 9
		jnz	short loc_68F4B9D3
		lea	eax, [ebx+1]
		cmp	eax, esi
		jnz	short loc_68F4B9AE

loc_68F4B9D3:				; CODE XREF: sub_68F4B930+79j
					; sub_68F4B930+9Aj
		mov	eax, [ebp+var_10]
		mov	[eax], ebx
		mov	edx, 0Fh
		jmp	short loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4B9DF:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	edx, [ebp+var_10] ; jumptable 68F4B964 case 20
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 19h
		jmp	short loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4B9EE:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	[ebp+var_14], 12h ; jumptable 68F4B964 cases 22,24

loc_68F4B9F5:				; CODE XREF: sub_68F4B930+DEj
					; sub_68F4B930+ECj ...
		inc	ebx		; jumptable 68F4BA0E cases 22,24-27
					; jumptable 68F4BFFD cases 22,24-27

loc_68F4B9F6:				; CODE XREF: sub_68F4B930+11Dj
					; sub_68F4B930+36Aj ...
		cmp	ebx, esi
		jz	loc_68F4BF10
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5		; switch 32 cases
		cmp	eax, 1Fh
		ja	short loc_68F4B990 ; jumptable 68F4B964	default	case
					; jumptable 68F4BFFD case 29
		jmp	ds:off_68F5A09C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4BA15:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	[ebp+var_14], 13h ; jumptable 68F4B964 cases 23,25-27
		jmp	short loc_68F4B9F5 ; jumptable 68F4BA0E	cases 22,24-27
					; jumptable 68F4BFFD cases 22,24-27
; ---------------------------------------------------------------------------

loc_68F4BA1E:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	eax, esi	; jumptable 68F4B964 case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	loc_68F4B997
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+158h]
		test	eax, eax
		jz	loc_68F4BF1A
		add	ebx, 2

loc_68F4BA46:				; CODE XREF: sub_68F4B930+149j
					; sub_68F4B930+175j
		mov	[ebp+var_14], 12h
		jmp	short loc_68F4B9F6
; ---------------------------------------------------------------------------

loc_68F4BA4F:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	eax, esi	; jumptable 68F4B964 case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4B997
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+15Ch]
		test	eax, eax
		jz	loc_68F4BF37
		add	ebx, 3
		jmp	short loc_68F4BA46
; ---------------------------------------------------------------------------

loc_68F4BA7B:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	eax, esi	; jumptable 68F4B964 case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4B997
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+160h]
		test	eax, eax
		jz	loc_68F4BF54
		add	ebx, 4
		jmp	short loc_68F4BA46
; ---------------------------------------------------------------------------

loc_68F4BAA7:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	edx, [ebp+var_10] ; jumptable 68F4B964 case 11
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 11h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BAB9:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		lea	eax, [ebx+1]	; jumptable 68F4B964 case 9
		cmp	eax, esi
		jnz	loc_68F4B9AE
		mov	edx, [ebp+var_10]
		mov	[edx], esi
		mov	edx, 0FFFFFFF1h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BAD3:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	[ebp+arg_4], esi ; jumptable 68F4B964 case 13
		mov	eax, [ebp+var_10]
		mov	edx, edi
		mov	[ebp+arg_8], eax
		lea	eax, [ebx+1]
		mov	[ebp+arg_0], eax
		mov	eax, 0Dh

loc_68F4BAE9:				; CODE XREF: sub_68F4B930+20Fj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F4B810
; ---------------------------------------------------------------------------

loc_68F4BAFA:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		lea	eax, [ebx+1]	; jumptable 68F4B964 case 19
		mov	edx, 0FFFFFFFFh
		cmp	eax, esi
		mov	[ebp+var_18], eax
		jz	loc_68F4B997
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4BDB6	; jumptable 68F4BB22 default case
					; jumptable 68F4BE21 case 29
		jmp	ds:off_68F5A11C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4BB29:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	[ebp+arg_4], esi ; jumptable 68F4B964 case 12
		mov	edx, [ebp+var_10]
		lea	eax, [ebx+1]
		mov	[ebp+arg_0], eax
		mov	eax, 0Ch
		mov	[ebp+arg_8], edx
		mov	edx, edi
		jmp	short loc_68F4BAE9
; ---------------------------------------------------------------------------

loc_68F4BB41:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	edx, [ebp+var_10] ; jumptable 68F4B964 case 35
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 26h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BB53:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	edx, [ebp+var_10] ; jumptable 68F4B964 case 36
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 15h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BB65:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		inc	ebx		; jumptable 68F4B964 case 2
		mov	edx, 0FFFFFFFFh
		cmp	ebx, esi
		jz	loc_68F4B997
		movzx	eax, byte ptr [ebx]
		movzx	ecx, byte ptr [edi+eax+4Ch]
		cmp	ecx, 1Dh
		ja	loc_68F4B990	; jumptable 68F4B964 default case
					; jumptable 68F4BFFD case 29
		mov	eax, 1
		shl	eax, cl
		test	eax, 214000E0h
		jnz	loc_68F4C085
		test	eax, 10000h
		jnz	loc_68F4BF71
		test	ah, 80h
		jz	loc_68F4B990	; jumptable 68F4B964 default case
					; jumptable 68F4BFFD case 29
		mov	[ebp+arg_0], esi
		mov	eax, [ebp+var_10]
		lea	edx, [ebx+1]
		mov	esi, [ebp+var_8]
		mov	ebx, [ebp+var_C]
		mov	[ebp+arg_4], eax
		mov	eax, edi
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F4A3F0
; ---------------------------------------------------------------------------

loc_68F4BBC9:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		inc	ebx		; jumptable 68F4B964 case 4
		mov	edx, 0FFFFFFE6h
		cmp	ebx, esi
		jz	loc_68F4B997
		cmp	byte ptr [ebx],	5Dh
		jnz	short loc_68F4BBF6
		lea	eax, [ebx+1]
		mov	edx, 0FFFFFFFFh
		cmp	eax, esi
		jz	loc_68F4B997
		cmp	byte ptr [ebx+1], 3Eh
		jz	loc_68F4C097

loc_68F4BBF6:				; CODE XREF: sub_68F4B930+2AAj
		mov	eax, [ebp+var_10]
		mov	edx, 1Ah
		mov	[eax], ebx
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BC05:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	edx, [ebp+var_10] ; jumptable 68F4B964 case 31
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 17h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BC17:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		inc	ebx		; jumptable 68F4B964 case 32
		mov	edx, 0FFFFFFE8h
		cmp	ebx, esi
		jz	loc_68F4B997
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 9		; switch 28 cases
		cmp	eax, 1Bh
		ja	short loc_68F4BC65 ; jumptable 68F4BC35	default	case
		jmp	ds:off_68F5A180[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4BC3C:				; CODE XREF: sub_68F4B930+34j
					; DATA XREF: .rdata:off_68F5A008o
		mov	[ebp+arg_0], esi ; jumptable 68F4B964 case 30
		mov	eax, [ebp+var_10]
		lea	edx, [ebx+1]
		mov	esi, [ebp+var_8]
		mov	ebx, [ebp+var_C]
		mov	[ebp+arg_4], eax
		mov	eax, edi
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F4B670
; ---------------------------------------------------------------------------

loc_68F4BC5B:				; CODE XREF: sub_68F4B930+DEj
					; DATA XREF: .rdata:off_68F5A09Co
		cmp	[ebp+var_14], 13h ; jumptable 68F4BA0E case 34
		jnz	loc_68F4BE8F

loc_68F4BC65:				; CODE XREF: sub_68F4B930+303j
					; sub_68F4B930+305j ...
		mov	edx, [ebp+var_10] ; jumptable 68F4BC35 default case
		mov	[edx], ebx
		jmp	loc_68F4B995
; ---------------------------------------------------------------------------

loc_68F4BC6F:				; CODE XREF: sub_68F4B930+DEj
					; DATA XREF: .rdata:off_68F5A09Co
		cmp	[ebp+var_14], 13h ; jumptable 68F4BA0E case 33
		jz	loc_68F4B990	; jumptable 68F4B964 default case
					; jumptable 68F4BFFD case 29
		mov	edx, [ebp+var_10]
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 1Fh
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BC8B:				; CODE XREF: sub_68F4B930+DEj
					; DATA XREF: .rdata:off_68F5A09Co
		inc	ebx		; jumptable 68F4BA0E case 23
		cmp	[ebp+var_14], 12h
		jz	loc_68F4BFDA
		cmp	[ebp+var_14], 29h
		jnz	loc_68F4B9F6

loc_68F4BCA0:				; CODE XREF: sub_68F4B930+602j
					; sub_68F4B930+61Fj ...
		mov	[ebp+var_14], 13h ; jumptable 68F4BFFD default case
		jmp	loc_68F4B9F6
; ---------------------------------------------------------------------------

loc_68F4BCAC:				; CODE XREF: sub_68F4B930+DEj
					; DATA XREF: .rdata:off_68F5A09Co
		cmp	[ebp+var_14], 13h ; jumptable 68F4BA0E case 15
		jz	short loc_68F4BC65 ; jumptable 68F4BC35	default	case
		mov	edx, [ebp+var_10]
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 1Eh
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BCC4:				; CODE XREF: sub_68F4B930+DEj
					; DATA XREF: .rdata:off_68F5A09Co
		mov	eax, esi	; jumptable 68F4BA0E case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4C10C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+154h]
		test	eax, eax
		jz	short loc_68F4BC65 ; jumptable 68F4BC35	default	case

loc_68F4BCE2:				; CODE XREF: sub_68F4B930+57j
		add	ebx, 4
		jmp	loc_68F4B9F6
; ---------------------------------------------------------------------------

loc_68F4BCEA:				; CODE XREF: sub_68F4B930+DEj
					; DATA XREF: .rdata:off_68F5A09Co
		mov	edx, [ebp+var_10] ; jumptable 68F4BA0E cases 9-11,20,21,30,32,35,36
		mov	[edx], ebx
		mov	edx, [ebp+var_14]
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BCF7:				; CODE XREF: sub_68F4B930+DEj
					; DATA XREF: .rdata:off_68F5A09Co
		mov	eax, esi	; jumptable 68F4BA0E case 5
		sub	eax, ebx
		dec	eax
		jle	loc_68F4C10C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+14Ch]
		test	eax, eax
		jz	loc_68F4BC65	; jumptable 68F4BC35 default case
		add	ebx, 2
		jmp	loc_68F4B9F6
; ---------------------------------------------------------------------------

loc_68F4BD1F:				; CODE XREF: sub_68F4B930+DEj
					; DATA XREF: .rdata:off_68F5A09Co
		mov	eax, esi	; jumptable 68F4BA0E case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4C10C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+150h]
		test	eax, eax
		jz	loc_68F4B990	; jumptable 68F4B964 default case
					; jumptable 68F4BFFD case 29
		add	ebx, 3
		jmp	loc_68F4B9F6
; ---------------------------------------------------------------------------

loc_68F4BD49:				; CODE XREF: sub_68F4B930+305j
					; DATA XREF: .rdata:off_68F5A180o
		mov	edx, [ebp+var_10] ; jumptable 68F4BC35 case 34
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 25h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BD5B:				; CODE XREF: sub_68F4B930+305j
					; DATA XREF: .rdata:off_68F5A180o
		mov	edx, [ebp+var_10] ; jumptable 68F4BC35 case 33
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 24h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BD6D:				; CODE XREF: sub_68F4B930+305j
					; DATA XREF: .rdata:off_68F5A180o
		mov	edx, [ebp+var_10] ; jumptable 68F4BC35 case 15
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 23h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BD7F:				; CODE XREF: sub_68F4B930+305j
					; DATA XREF: .rdata:off_68F5A180o
		mov	eax, [ebp+var_10] ; jumptable 68F4BC35 cases 9-11,21,32,35,36
		mov	edx, 18h
		mov	[eax], ebx
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BD8E:				; CODE XREF: sub_68F4B930+4F1j
					; DATA XREF: .rdata:off_68F5A1F0o
		mov	edx, [ebp+var_18] ; jumptable 68F4BE21 case 6
		mov	eax, esi
		sub	eax, edx
		cmp	eax, 2
		jle	loc_68F4C10C
		mov	edx, [ebp+var_18]
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], edx
		call	dword ptr [edi+150h]
		test	eax, eax
		jnz	loc_68F4BEA1

loc_68F4BDB6:				; CODE XREF: sub_68F4B930+1ECj
					; sub_68F4B930+1F2j ...
		mov	edx, [ebp+var_18] ; jumptable 68F4BB22 default case
					; jumptable 68F4BE21 case 29
		mov	eax, [ebp+var_10]
		mov	[eax], edx
		jmp	loc_68F4B995
; ---------------------------------------------------------------------------

loc_68F4BDC3:				; CODE XREF: sub_68F4B930+1F2j
					; DATA XREF: .rdata:off_68F5A11Co
		mov	edx, [ebp+var_18] ; jumptable 68F4BB22 case 6
		mov	eax, esi
		sub	eax, edx
		cmp	eax, 2
		mov	edx, 0FFFFFFFEh
		jle	loc_68F4B997
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], eax
		call	dword ptr [edi+15Ch]
		test	eax, eax
		jnz	loc_68F4BEA1

loc_68F4BDF0:				; CODE XREF: sub_68F4B930+1F2j
					; sub_68F4B930+4EFj ...
		mov	eax, [ebp+var_18] ; jumptable 68F4BB22 case 29
		mov	edx, [ebp+var_10]
		mov	[edx], eax
		jmp	loc_68F4B995
; ---------------------------------------------------------------------------

loc_68F4BDFD:				; CODE XREF: sub_68F4B930+1F2j
					; sub_68F4B930+4F1j
					; DATA XREF: ...
		inc	[ebp+var_18]	; jumptable 68F4BB22 cases 22,24
					; jumptable 68F4BE21 cases 22,24-27

loc_68F4BE00:				; CODE XREF: sub_68F4B930+527j
					; sub_68F4B930+55Aj ...
		cmp	[ebp+var_18], esi
		mov	edx, 0FFFFFFECh
		jz	loc_68F4B997
		mov	edx, [ebp+var_18]
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5		; switch 32 cases
		cmp	eax, 1Fh
		ja	short loc_68F4BDF0 ; jumptable 68F4BB22	case 29
		jmp	ds:off_68F5A1F0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4BE28:				; CODE XREF: sub_68F4B930+1F2j
					; DATA XREF: .rdata:off_68F5A11Co
		mov	ecx, [ebp+var_18] ; jumptable 68F4BB22 case 5
		mov	eax, esi
		mov	edx, 0FFFFFFFEh
		sub	eax, ecx
		dec	eax
		jle	loc_68F4B997
		mov	edx, [ebp+var_18]
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], edx
		call	dword ptr [edi+158h]

loc_68F4BE4B:				; CODE XREF: sub_68F4B930+5CCj
		test	eax, eax
		jz	loc_68F4BDB6	; jumptable 68F4BB22 default case
					; jumptable 68F4BE21 case 29
		add	[ebp+var_18], 2
		jmp	short loc_68F4BE00
; ---------------------------------------------------------------------------

loc_68F4BE59:				; CODE XREF: sub_68F4B930+1F2j
					; DATA XREF: .rdata:off_68F5A11Co
		mov	ebx, [ebp+var_18] ; jumptable 68F4BB22 case 7
		mov	eax, esi
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4B997
		mov	edx, [ebp+var_18]
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], edx
		call	dword ptr [edi+160h]

loc_68F4BE7E:				; CODE XREF: sub_68F4B930+5ACj
		test	eax, eax
		jz	loc_68F4BDB6	; jumptable 68F4BB22 default case
					; jumptable 68F4BE21 case 29
		add	[ebp+var_18], 4
		jmp	loc_68F4BE00
; ---------------------------------------------------------------------------

loc_68F4BE8F:				; CODE XREF: sub_68F4B930+32Fj
		mov	edx, [ebp+var_10]
		lea	eax, [ebx+1]
		mov	[edx], eax
		mov	edx, 20h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BEA1:				; CODE XREF: sub_68F4B930+480j
					; sub_68F4B930+4BAj
		add	[ebp+var_18], 3
		jmp	loc_68F4BE00
; ---------------------------------------------------------------------------

loc_68F4BEAA:				; CODE XREF: sub_68F4B930+4F1j
					; DATA XREF: .rdata:off_68F5A1F0o
		mov	edx, [ebp+var_10] ; jumptable 68F4BE21 cases 9-11,21,30,32,36
		mov	eax, [ebp+var_18]
		mov	[edx], eax
		mov	edx, 14h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BEBC:				; CODE XREF: sub_68F4B930+4F1j
					; DATA XREF: .rdata:off_68F5A1F0o
		mov	ebx, [ebp+var_18] ; jumptable 68F4BE21 case 7
		mov	eax, esi
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4C10C
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], eax
		call	dword ptr [edi+154h]
		jmp	short loc_68F4BE7E
; ---------------------------------------------------------------------------

loc_68F4BEDE:				; CODE XREF: sub_68F4B930+4F1j
					; DATA XREF: .rdata:off_68F5A1F0o
		mov	ecx, [ebp+var_18] ; jumptable 68F4BE21 case 5
		mov	eax, esi
		sub	eax, ecx
		dec	eax
		jle	loc_68F4C10C
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], eax
		call	dword ptr [edi+14Ch]
		jmp	loc_68F4BE4B
; ---------------------------------------------------------------------------

loc_68F4BF01:				; CODE XREF: sub_68F4B930+82j
		mov	edx, [ebp+var_10]
		mov	[edx], eax
		mov	edx, 0Fh
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BF10:				; CODE XREF: sub_68F4B930+C8j
		mov	edx, [ebp+var_14]
		neg	edx
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BF1A:				; CODE XREF: sub_68F4B930+10Dj
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+14Ch]
		test	eax, eax
		jz	loc_68F4BC65	; jumptable 68F4BC35 default case
		add	ebx, 2
		jmp	loc_68F4BCA0	; jumptable 68F4BFFD default case
; ---------------------------------------------------------------------------

loc_68F4BF37:				; CODE XREF: sub_68F4B930+140j
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+150h]
		test	eax, eax
		jz	loc_68F4B990	; jumptable 68F4B964 default case
					; jumptable 68F4BFFD case 29
		add	ebx, 3
		jmp	loc_68F4BCA0	; jumptable 68F4BFFD default case
; ---------------------------------------------------------------------------

loc_68F4BF54:				; CODE XREF: sub_68F4B930+16Cj
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+154h]
		test	eax, eax
		jz	loc_68F4BC65	; jumptable 68F4BC35 default case
		add	ebx, 4
		jmp	loc_68F4BCA0	; jumptable 68F4BFFD default case
; ---------------------------------------------------------------------------

loc_68F4BF71:				; CODE XREF: sub_68F4B930+26Bj
		lea	edx, [ebx+1]
		mov	ecx, 0FFFFFFFFh
		cmp	edx, esi
		jz	short loc_68F4BFA1
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 16h
		jz	short loc_68F4BFC9
		jg	loc_68F4C056
		cmp	eax, 14h
		jz	loc_68F4C0A9

loc_68F4BF9A:				; CODE XREF: sub_68F4B930+683j
					; sub_68F4B930+732j ...
		mov	eax, [ebp+var_10]
		xor	ecx, ecx
		mov	[eax], edx

loc_68F4BFA1:				; CODE XREF: sub_68F4B930+64Bj
					; sub_68F4B930+7A9j
		mov	edx, ecx
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BFA8:				; CODE XREF: sub_68F4B930+69Cj
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [edi+eax+4Ch]
		cmp	ecx, 1Eh
		ja	short loc_68F4BF9A
		mov	ebx, 1
		mov	eax, ebx
		shl	eax, cl
		test	eax, 1400000h
		jz	loc_68F4C0BD

loc_68F4BFC9:				; CODE XREF: sub_68F4B930+659j
					; sub_68F4B930+729j
		inc	edx
		cmp	edx, esi
		jnz	short loc_68F4BFA8
		mov	ecx, 0FFFFFFFFh
		mov	edx, ecx
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4BFDA:				; CODE XREF: sub_68F4B930+360j
		cmp	ebx, esi
		jz	loc_68F4C116
		mov	[ebp+var_14], 29h
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4BCA0	; jumptable 68F4BFFD default case
		jmp	ds:off_68F5A270[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4C004:				; CODE XREF: sub_68F4B930+6CDj
					; DATA XREF: .rdata:off_68F5A270o
		mov	eax, esi	; jumptable 68F4BFFD case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4C10C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+150h]
		test	eax, eax
		jz	loc_68F4BC65	; jumptable 68F4BC35 default case
		add	ebx, 3
		jmp	loc_68F4B9F6
; ---------------------------------------------------------------------------

loc_68F4C02E:				; CODE XREF: sub_68F4B930+6CDj
					; DATA XREF: .rdata:off_68F5A270o
		mov	eax, esi	; jumptable 68F4BFFD case 5
		sub	eax, ebx
		dec	eax
		jle	loc_68F4C10C
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], edi
		call	dword ptr [edi+14Ch]
		test	eax, eax
		jz	loc_68F4B990	; jumptable 68F4B964 default case
					; jumptable 68F4BFFD case 29
		add	ebx, 2
		jmp	loc_68F4B9F6
; ---------------------------------------------------------------------------

loc_68F4C056:				; CODE XREF: sub_68F4B930+65Bj
		cmp	eax, 18h
		jz	loc_68F4BFC9
		cmp	eax, 1Bh
		jnz	loc_68F4BF9A
		mov	eax, [ebp+var_10]
		lea	edx, [ebx+2]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		mov	eax, edi
		call	sub_68F4A230
		mov	ecx, eax
		mov	edx, ecx
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4C085:				; CODE XREF: sub_68F4B930+260j
		mov	edx, [ebp+var_10]
		lea	eax, [ebx-1]
		mov	[edx], eax
		mov	edx, 1Dh
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4C097:				; CODE XREF: sub_68F4B930+2C0j
		mov	edx, [ebp+var_10]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 22h
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4C0A9:				; CODE XREF: sub_68F4B930+664j
		mov	edx, [ebp+var_10]
		lea	eax, [ebx+2]
		mov	ecx, 21h
		mov	[edx], eax
		mov	edx, ecx
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4C0BD:				; CODE XREF: sub_68F4B930+693j
		test	eax, 200600h
		jnz	short loc_68F4C0FB
		test	eax, 40000000h
		jz	loc_68F4BF9A
		lea	eax, [edx+1]
		mov	ecx, 0FFFFFFFFh
		cmp	eax, esi
		jz	loc_68F4BFA1
		movzx	eax, byte ptr [edx+1]
		movzx	ecx, byte ptr [edi+eax+4Ch]
		cmp	ecx, 1Eh
		ja	short loc_68F4C0FB
		shl	ebx, cl
		and	ebx, 40200600h
		jnz	loc_68F4BF9A

loc_68F4C0FB:				; CODE XREF: sub_68F4B930+792j
					; sub_68F4B930+7BBj
		mov	eax, [ebp+var_10]
		mov	ecx, 10h
		mov	[eax], edx
		mov	edx, ecx
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4C10C:				; CODE XREF: sub_68F4B930+42j
					; sub_68F4B930+39Bj ...
		mov	edx, 0FFFFFFFEh
		jmp	loc_68F4B997
; ---------------------------------------------------------------------------

loc_68F4C116:				; CODE XREF: sub_68F4B930+6ACj
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F4B997
sub_68F4B930	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C120	proc near		; DATA XREF: .rdata:68F57F10o
					; .rdata:68F58090o ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	eax, 0FFFFFFFCh
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		mov	edi, [ebp+arg_C]
		cmp	edx, ecx
		jz	short loc_68F4C16C
		mov	esi, edx

loc_68F4C148:				; CODE XREF: sub_68F4C120+43j
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		cmp	eax, 15h	; switch 22 cases
		ja	short loc_68F4C160 ; jumptable 68F4C155	default	case
		jmp	ds:off_68F5A2D4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4C160:				; CODE XREF: sub_68F4C120+33j
					; sub_68F4C120+35j
					; DATA XREF: ...
		inc	edx		; jumptable 68F4C155 default case

loc_68F4C161:				; CODE XREF: sub_68F4C120+A1j
					; sub_68F4C120+A6j ...
		cmp	edx, ecx
		jnz	short loc_68F4C148

loc_68F4C165:				; CODE XREF: sub_68F4C120+5Dj
					; sub_68F4C120+6Dj ...
		mov	[edi], edx
		mov	eax, 6

loc_68F4C16C:				; CODE XREF: sub_68F4C120+24j
					; sub_68F4C120+69j ...
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C17B:				; CODE XREF: sub_68F4C120+35j
					; DATA XREF: .rdata:off_68F5A2D4o
		cmp	edx, esi	; jumptable 68F4C155 case 21
		jnz	short loc_68F4C165
		lea	eax, [edx+1]
		mov	[edi], eax
		mov	eax, 27h
		jmp	short loc_68F4C16C
; ---------------------------------------------------------------------------

loc_68F4C18B:				; CODE XREF: sub_68F4C120+35j
					; DATA XREF: .rdata:off_68F5A2D4o
		cmp	edx, esi	; jumptable 68F4C155 case 3
		jnz	short loc_68F4C165
		mov	[ebp+arg_4], edi
		mov	eax, ebx
		inc	edx
		mov	[ebp+arg_0], ecx
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F4A860
; ---------------------------------------------------------------------------

loc_68F4C1AB:				; CODE XREF: sub_68F4C120+35j
					; DATA XREF: .rdata:off_68F5A2D4o
		mov	[edi], edx	; jumptable 68F4C155 case 2
		xor	eax, eax
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C1BE:				; CODE XREF: sub_68F4C120+35j
					; DATA XREF: .rdata:off_68F5A2D4o
		add	edx, 2		; jumptable 68F4C155 case 5
		jmp	short loc_68F4C161
; ---------------------------------------------------------------------------

loc_68F4C1C3:				; CODE XREF: sub_68F4C120+35j
					; DATA XREF: .rdata:off_68F5A2D4o
		add	edx, 3		; jumptable 68F4C155 case 6
		jmp	short loc_68F4C161
; ---------------------------------------------------------------------------

loc_68F4C1C8:				; CODE XREF: sub_68F4C120+35j
					; DATA XREF: .rdata:off_68F5A2D4o
		add	edx, 4		; jumptable 68F4C155 case 7
		jmp	short loc_68F4C161
; ---------------------------------------------------------------------------

loc_68F4C1CD:				; CODE XREF: sub_68F4C120+35j
					; DATA XREF: .rdata:off_68F5A2D4o
		cmp	edx, esi	; jumptable 68F4C155 case 9
		jnz	short loc_68F4C165
		inc	edx
		mov	eax, 0FFFFFFFDh
		cmp	edx, ecx
		jz	short loc_68F4C16C
		movzx	eax, byte ptr [edx]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		setz	al
		movzx	eax, al
		add	edx, eax
		mov	eax, 7
		mov	[edi], edx

loc_68F4C1F2:				; CODE XREF: sub_68F4C120+F3j
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C201:				; CODE XREF: sub_68F4C120+35j
					; DATA XREF: .rdata:off_68F5A2D4o
		cmp	edx, esi	; jumptable 68F4C155 case 10
		jnz	loc_68F4C165
		lea	eax, [edx+1]
		mov	[edi], eax
		mov	eax, 7
		jmp	short loc_68F4C1F2
sub_68F4C120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C220	proc near		; DATA XREF: .rdata:68F57F14o
					; .rdata:68F58094o ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	eax, 0FFFFFFFCh
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		mov	edi, [ebp+arg_C]
		cmp	edx, ecx
		jz	short loc_68F4C263
		mov	esi, edx

loc_68F4C240:				; CODE XREF: sub_68F4C220+3Aj
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ebx+eax+4Ch]
		sub	eax, 3		; switch 28 cases
		cmp	eax, 1Bh
		ja	short loc_68F4C257 ; jumptable 68F4C250	default	case
		jmp	ds:off_68F5A32C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4C257:				; CODE XREF: sub_68F4C220+2Ej
					; sub_68F4C220+30j
					; DATA XREF: ...
		inc	edx		; jumptable 68F4C250 default case

loc_68F4C258:				; CODE XREF: sub_68F4C220+6Aj
					; sub_68F4C220+88j ...
		cmp	edx, ecx
		jnz	short loc_68F4C240

loc_68F4C25C:				; CODE XREF: sub_68F4C220+4Dj
					; sub_68F4C220+6Ej ...
		mov	[edi], edx
		mov	eax, 6

loc_68F4C263:				; CODE XREF: sub_68F4C220+1Cj
					; sub_68F4C220+61j ...
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C26B:				; CODE XREF: sub_68F4C220+30j
					; DATA XREF: .rdata:off_68F5A32Co
		cmp	edx, esi	; jumptable 68F4C250 case 30
		jnz	short loc_68F4C25C
		mov	[esp+18h+var_14], edi
		inc	edx
		mov	eax, ebx
		mov	[esp+18h+var_18], ecx
		call	sub_68F4B670
		cmp	eax, 16h
		jnz	short loc_68F4C263
		xor	eax, eax
		jmp	short loc_68F4C263
; ---------------------------------------------------------------------------

loc_68F4C287:				; CODE XREF: sub_68F4C220+30j
					; DATA XREF: .rdata:off_68F5A32Co
		add	edx, 2		; jumptable 68F4C250 case 5
		jmp	short loc_68F4C258
; ---------------------------------------------------------------------------

loc_68F4C28C:				; CODE XREF: sub_68F4C220+30j
					; DATA XREF: .rdata:off_68F5A32Co
		cmp	edx, esi	; jumptable 68F4C250 case 3
		jnz	short loc_68F4C25C
		mov	[ebp+arg_4], edi
		mov	eax, ebx
		inc	edx
		mov	[ebp+arg_0], ecx
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F4A860
; ---------------------------------------------------------------------------

loc_68F4C2A5:				; CODE XREF: sub_68F4C220+30j
					; DATA XREF: .rdata:off_68F5A32Co
		add	edx, 3		; jumptable 68F4C250 case 6
		jmp	short loc_68F4C258
; ---------------------------------------------------------------------------

loc_68F4C2AA:				; CODE XREF: sub_68F4C220+30j
					; DATA XREF: .rdata:off_68F5A32Co
		add	edx, 4		; jumptable 68F4C250 case 7
		jmp	short loc_68F4C258
; ---------------------------------------------------------------------------

loc_68F4C2AF:				; CODE XREF: sub_68F4C220+30j
					; DATA XREF: .rdata:off_68F5A32Co
		cmp	edx, esi	; jumptable 68F4C250 case 9
		jnz	short loc_68F4C25C
		inc	edx
		mov	eax, 0FFFFFFFDh
		cmp	edx, ecx
		jz	short loc_68F4C263
		movzx	eax, byte ptr [edx]
		cmp	byte ptr [ebx+eax+4Ch],	0Ah
		setz	al
		movzx	eax, al
		add	edx, eax
		mov	eax, 7
		mov	[edi], edx

loc_68F4C2D4:				; CODE XREF: sub_68F4C220+CEj
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C2DC:				; CODE XREF: sub_68F4C220+30j
					; DATA XREF: .rdata:off_68F5A32Co
		cmp	edx, esi	; jumptable 68F4C250 case 10
		jnz	loc_68F4C25C
		lea	eax, [edx+1]
		mov	[edi], eax
		mov	eax, 7
		jmp	short loc_68F4C2D4
sub_68F4C220	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C2F0	proc near		; DATA XREF: .rdata:68F57F0Co
					; .rdata:68F5808Co ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_10], 0
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]

loc_68F4C309:				; CODE XREF: sub_68F4C2F0+39j
					; sub_68F4C2F0+43j ...
		cmp	ebx, esi
		jz	short loc_68F4C345

loc_68F4C30D:				; CODE XREF: sub_68F4C2F0+53j
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 8		; switch 9 cases
		ja	short loc_68F4C340 ; jumptable 68F4C31A	default	case
		jmp	ds:off_68F5A39C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4C321:				; CODE XREF: sub_68F4C2F0+2Aj
					; DATA XREF: .rdata:off_68F5A39Co
		inc	ebx		; jumptable 68F4C31A case 2
		cmp	ebx, esi
		jz	short loc_68F4C345
		cmp	byte ptr [ebx],	21h
		jnz	short loc_68F4C309
		inc	ebx
		cmp	ebx, esi
		jz	short loc_68F4C345
		cmp	byte ptr [ebx],	5Bh
		jnz	short loc_68F4C309
		inc	[ebp+var_10]
		nop
		lea	esi, [esi+0]

loc_68F4C340:				; CODE XREF: sub_68F4C2F0+28j
					; sub_68F4C2F0+2Aj
					; DATA XREF: ...
		inc	ebx		; jumptable 68F4C31A default case
		cmp	ebx, esi
		jnz	short loc_68F4C30D

loc_68F4C345:				; CODE XREF: sub_68F4C2F0+1Bj
					; sub_68F4C2F0+34j ...
		add	esp, 0Ch
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C352:				; CODE XREF: sub_68F4C2F0+2Aj
					; sub_68F4C2F0+8Dj ...
		mov	eax, [ebp+arg_C] ; jumptable 68F4C31A cases 0,1,8
		mov	[eax], ebx
		xor	eax, eax

loc_68F4C359:				; CODE XREF: sub_68F4C2F0+10Fj
					; sub_68F4C2F0+11Ej
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C361:				; CODE XREF: sub_68F4C2F0+2Aj
					; DATA XREF: .rdata:off_68F5A39Co
		mov	eax, esi	; jumptable 68F4C31A case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4C3FA
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], edi
		call	dword ptr [edi+16Ch]
		test	eax, eax
		jnz	short loc_68F4C352 ; jumptable 68F4C31A	cases 0,1,8
		add	ebx, 4
		jmp	short loc_68F4C309
; ---------------------------------------------------------------------------

loc_68F4C384:				; CODE XREF: sub_68F4C2F0+2Aj
					; DATA XREF: .rdata:off_68F5A39Co
		mov	eax, esi	; jumptable 68F4C31A case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4C3FA
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], edi
		call	dword ptr [edi+168h]
		test	eax, eax
		jnz	short loc_68F4C352 ; jumptable 68F4C31A	cases 0,1,8
		add	ebx, 3
		jmp	loc_68F4C309
; ---------------------------------------------------------------------------

loc_68F4C3A6:				; CODE XREF: sub_68F4C2F0+2Aj
					; DATA XREF: .rdata:off_68F5A39Co
		mov	eax, esi	; jumptable 68F4C31A case 5
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4C3FA
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], edi
		call	dword ptr [edi+164h]
		test	eax, eax
		jnz	short loc_68F4C352 ; jumptable 68F4C31A	cases 0,1,8
		add	ebx, 2
		jmp	loc_68F4C309
; ---------------------------------------------------------------------------

loc_68F4C3C6:				; CODE XREF: sub_68F4C2F0+2Aj
					; DATA XREF: .rdata:off_68F5A39Co
		inc	ebx		; jumptable 68F4C31A case 4
		cmp	ebx, esi
		jz	loc_68F4C345
		cmp	byte ptr [ebx],	5Dh
		jnz	loc_68F4C309
		inc	ebx
		cmp	ebx, esi
		jz	loc_68F4C345
		cmp	byte ptr [ebx],	3Eh
		jnz	loc_68F4C309
		mov	eax, [ebp+var_10]
		inc	ebx
		test	eax, eax
		jz	short loc_68F4C404
		dec	[ebp+var_10]
		jmp	loc_68F4C309
; ---------------------------------------------------------------------------

loc_68F4C3FA:				; CODE XREF: sub_68F4C2F0+78j
					; sub_68F4C2F0+9Bj ...
		mov	eax, 0FFFFFFFEh
		jmp	loc_68F4C359
; ---------------------------------------------------------------------------

loc_68F4C404:				; CODE XREF: sub_68F4C2F0+100j
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		mov	eax, 2Ah
		jmp	loc_68F4C359
sub_68F4C2F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C420	proc near		; DATA XREF: .rdata:68F57F38o
					; .rdata:68F580B8o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	edx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		inc	edx
		dec	esi
		cmp	edx, esi
		jz	short loc_68F4C482
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4C440:				; CODE XREF: sub_68F4C420+60j
		movzx	ebx, byte ptr [edx]
		movzx	eax, bl
		movzx	eax, byte ptr [edi+eax+4Ch]
		lea	ecx, [eax-9]
		cmp	ecx, 1Ah
		ja	short loc_68F4C470
		mov	eax, 1
		shl	eax, cl
		test	eax, 7E5C7F3h
		jnz	short loc_68F4C47D
		test	eax, 22000h
		jnz	short loc_68F4C490
		test	ah, 10h
		jnz	short loc_68F4C497
		lea	esi, [esi+0]

loc_68F4C470:				; CODE XREF: sub_68F4C420+31j
					; sub_68F4C420+72j
		movsx	eax, bl
		cmp	eax, 24h
		jz	short loc_68F4C47D
		cmp	eax, 40h
		jnz	short loc_68F4C49C

loc_68F4C47D:				; CODE XREF: sub_68F4C420+3Fj
					; sub_68F4C420+56j ...
		inc	edx

loc_68F4C47E:				; CODE XREF: sub_68F4C420+75j
		cmp	edx, esi
		jnz	short loc_68F4C440

loc_68F4C482:				; CODE XREF: sub_68F4C420+13j
		pop	ebx
		mov	eax, 1
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4C490:				; CODE XREF: sub_68F4C420+46j
		test	bl, bl
		js	short loc_68F4C470
		inc	edx
		jmp	short loc_68F4C47E
; ---------------------------------------------------------------------------

loc_68F4C497:				; CODE XREF: sub_68F4C420+4Bj
		cmp	bl, 9
		jnz	short loc_68F4C47D

loc_68F4C49C:				; CODE XREF: sub_68F4C420+5Bj
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F4C420	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C4B0	proc near		; DATA XREF: .rdata:68F57F28o
					; .rdata:68F580A8o ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 8
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_10], 1
		mov	[ebp+var_14], 0
		inc	ebx
		lea	esi, [esi+0]

loc_68F4C4D0:				; CODE XREF: sub_68F4C4B0+72j
					; sub_68F4C4B0+C5j ...
		movzx	edx, byte ptr [ebx]
		mov	ecx, [ebp+arg_0]
		movzx	eax, dl
		movzx	eax, byte ptr [ecx+eax+4Ch]
		lea	ecx, [ebx+1]
		sub	eax, 3		; switch 27 cases
		cmp	eax, 1Ah
		ja	short loc_68F4C520 ; jumptable 68F4C4E9	default	case
		jmp	ds:off_68F5A3C0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4C4F0:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		cmp	[ebp+var_10], 2	; jumptable 68F4C4E9 case 13
		jz	loc_68F4C6FF
		cmp	edi, [ebp+arg_8]
		lea	ecx, [ebx+1]
		jge	short loc_68F4C50E
		mov	esi, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		mov	[eax+esi+4], ecx

loc_68F4C50E:				; CODE XREF: sub_68F4C4B0+50j
		mov	[ebp+var_10], 2
		mov	[ebp+var_14], 0Dh
		lea	esi, [esi+0]

loc_68F4C520:				; CODE XREF: sub_68F4C4B0+37j
					; sub_68F4C4B0+93j ...
		mov	ebx, ecx	; jumptable 68F4C4E9 default case
		jmp	short loc_68F4C4D0
; ---------------------------------------------------------------------------

loc_68F4C524:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		cmp	[ebp+var_10], 1	; jumptable 68F4C4E9 case 21
		jz	loc_68F4C6C2
		cmp	[ebp+var_10], 2
		setz	al
		cmp	edi, [ebp+arg_8]
		setl	cl
		movzx	esi, cl
		test	esi, eax
		lea	ecx, [ebx+1]
		jz	short loc_68F4C520 ; jumptable 68F4C4E9	default	case
		mov	esi, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		cmp	byte ptr [eax+esi+0Ch],	0
		jz	short loc_68F4C520 ; jumptable 68F4C4E9	default	case
		cmp	[eax+esi+4], ebx
		jz	short loc_68F4C563
		cmp	dl, 20h
		jz	loc_68F4C727

loc_68F4C563:				; CODE XREF: sub_68F4C4B0+A8j
					; sub_68F4C4B0+1D3j ...
		mov	ecx, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		mov	byte ptr [eax+ecx+0Ch],	0

loc_68F4C570:				; CODE XREF: sub_68F4C4B0+39j
					; sub_68F4C4B0+CEj
					; DATA XREF: ...
		lea	ecx, [ebx+1]	; jumptable 68F4C4E9 cases 4,8,14-16,18-20,23,25-28

loc_68F4C573:				; CODE XREF: sub_68F4C4B0+20Dj
					; sub_68F4C4B0+21Cj ...
		mov	ebx, ecx
		jmp	loc_68F4C4D0
; ---------------------------------------------------------------------------

loc_68F4C57A:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		cmp	[ebp+var_10], 2	; jumptable 68F4C4E9 cases 11,17
		jz	short loc_68F4C570 ; jumptable 68F4C4E9	cases 4,8,14-16,18-20,23,25-28
		add	esp, 8
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C58A:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		cmp	[ebp+var_10], 2	; jumptable 68F4C4E9 case 12
		jz	loc_68F4C6D1
		cmp	edi, [ebp+arg_8]
		lea	ecx, [ebx+1]
		jge	short loc_68F4C5A8
		mov	edx, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		mov	[eax+edx+4], ecx

loc_68F4C5A8:				; CODE XREF: sub_68F4C4B0+EAj
		mov	[ebp+var_10], 2
		mov	ebx, ecx
		mov	[ebp+var_14], 0Ch
		jmp	loc_68F4C4D0
; ---------------------------------------------------------------------------

loc_68F4C5BD:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		cmp	[ebp+var_10], 1	; jumptable 68F4C4E9 cases 9,10
		jz	loc_68F4C6C2
		cmp	[ebp+var_10], 2
		setz	al
		cmp	edi, [ebp+arg_8]
		setl	cl
		movzx	esi, cl
		test	esi, eax
		lea	ecx, [ebx+1]
		jz	loc_68F4C520	; jumptable 68F4C4E9 default case
		mov	esi, [ebp+arg_C]
		mov	eax, edi
		mov	ebx, ecx
		shl	eax, 4
		mov	byte ptr [eax+esi+0Ch],	0
		jmp	loc_68F4C4D0
; ---------------------------------------------------------------------------

loc_68F4C5F6:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		mov	eax, [ebp+var_10] ; jumptable 68F4C4E9 case 7
		test	eax, eax
		jnz	short loc_68F4C619
		cmp	edi, [ebp+arg_8]
		jge	short loc_68F4C612
		mov	ecx, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		mov	[eax+ecx], ebx
		mov	byte ptr [eax+ecx+0Ch],	1

loc_68F4C612:				; CODE XREF: sub_68F4C4B0+150j
		mov	[ebp+var_10], 1

loc_68F4C619:				; CODE XREF: sub_68F4C4B0+14Bj
		lea	ecx, [ebx+4]
		mov	ebx, ecx
		jmp	loc_68F4C4D0
; ---------------------------------------------------------------------------

loc_68F4C623:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		mov	eax, [ebp+var_10] ; jumptable 68F4C4E9 case 6
		test	eax, eax
		jnz	short loc_68F4C646
		cmp	edi, [ebp+arg_8]
		jge	short loc_68F4C63F
		mov	edx, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		mov	[eax+edx], ebx
		mov	byte ptr [eax+edx+0Ch],	1

loc_68F4C63F:				; CODE XREF: sub_68F4C4B0+17Dj
		mov	[ebp+var_10], 1

loc_68F4C646:				; CODE XREF: sub_68F4C4B0+178j
		lea	ecx, [ebx+3]
		mov	ebx, ecx
		jmp	loc_68F4C4D0
; ---------------------------------------------------------------------------

loc_68F4C650:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		mov	eax, [ebp+var_10] ; jumptable 68F4C4E9 case 5
		test	eax, eax
		jnz	short loc_68F4C673
		cmp	edi, [ebp+arg_8]
		jge	short loc_68F4C66C
		mov	esi, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		mov	[eax+esi], ebx
		mov	byte ptr [eax+esi+0Ch],	1

loc_68F4C66C:				; CODE XREF: sub_68F4C4B0+1AAj
		mov	[ebp+var_10], 1

loc_68F4C673:				; CODE XREF: sub_68F4C4B0+1A5j
		lea	ecx, [ebx+2]
		mov	ebx, ecx
		jmp	loc_68F4C4D0
; ---------------------------------------------------------------------------

loc_68F4C67D:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		cmp	edi, [ebp+arg_8] ; jumptable 68F4C4E9 case 3
		lea	ecx, [ebx+1]
		jl	loc_68F4C563
		mov	ebx, ecx
		jmp	loc_68F4C4D0
; ---------------------------------------------------------------------------

loc_68F4C690:				; CODE XREF: sub_68F4C4B0+39j
					; DATA XREF: .rdata:off_68F5A3C0o
		mov	eax, [ebp+var_10] ; jumptable 68F4C4E9 cases 22,24,29
		lea	ecx, [ebx+1]
		test	eax, eax
		jnz	loc_68F4C520	; jumptable 68F4C4E9 default case
		cmp	edi, [ebp+arg_8]
		jge	short loc_68F4C6B3
		mov	esi, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		mov	[eax+esi], ebx
		mov	byte ptr [eax+esi+0Ch],	1

loc_68F4C6B3:				; CODE XREF: sub_68F4C4B0+1F1j
		mov	[ebp+var_10], 1
		lea	ecx, [ebx+1]
		jmp	loc_68F4C573
; ---------------------------------------------------------------------------

loc_68F4C6C2:				; CODE XREF: sub_68F4C4B0+78j
					; sub_68F4C4B0+111j
		mov	[ebp+var_10], 0
		lea	ecx, [ebx+1]
		jmp	loc_68F4C573
; ---------------------------------------------------------------------------

loc_68F4C6D1:				; CODE XREF: sub_68F4C4B0+DEj
		cmp	[ebp+var_14], 0Ch
		lea	ecx, [ebx+1]
		jnz	loc_68F4C520	; jumptable 68F4C4E9 default case
		cmp	edi, [ebp+arg_8]
		mov	[ebp+var_10], 0
		jge	short loc_68F4C6F6
		mov	ecx, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		mov	[eax+ecx+8], ebx

loc_68F4C6F6:				; CODE XREF: sub_68F4C4B0+238j
					; sub_68F4C4B0+266j
		inc	edi

loc_68F4C6F7:				; CODE XREF: sub_68F4C4B0+275j
		lea	ecx, [ebx+1]
		jmp	loc_68F4C573
; ---------------------------------------------------------------------------

loc_68F4C6FF:				; CODE XREF: sub_68F4C4B0+44j
		cmp	[ebp+var_14], 0Dh
		lea	ecx, [ebx+1]
		jnz	loc_68F4C520	; jumptable 68F4C4E9 default case
		cmp	edi, [ebp+arg_8]
		mov	[ebp+var_10], 0
		jge	short loc_68F4C6F6
		mov	edx, [ebp+arg_C]
		mov	eax, edi
		shl	eax, 4
		inc	edi
		mov	[eax+edx+8], ebx
		jmp	short loc_68F4C6F7
; ---------------------------------------------------------------------------

loc_68F4C727:				; CODE XREF: sub_68F4C4B0+ADj
		movzx	eax, byte ptr [ebx+1]
		cmp	al, 20h
		jz	loc_68F4C563
		mov	edx, [ebp+arg_0]
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]
		cmp	eax, [ebp+var_14]
		jz	loc_68F4C563
		mov	ebx, ecx
		jmp	loc_68F4C4D0
sub_68F4C4B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C750	proc near		; CODE XREF: sub_68F4C7B0+35j
					; sub_68F4FDD0+92j ...
		push	ebp
		mov	edx, eax
		sar	eax, 8
		cmp	eax, 0DFh
		mov	ebp, esp
		jg	short loc_68F4C775
		cmp	eax, 0D8h
		mov	ecx, 0FFFFFFFFh
		jge	short loc_68F4C771
		test	eax, eax
		jz	short loc_68F4C790

loc_68F4C76F:				; CODE XREF: sub_68F4C750+2Aj
		mov	ecx, edx

loc_68F4C771:				; CODE XREF: sub_68F4C750+19j
					; sub_68F4C750+3Aj ...
		pop	ebp
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_68F4C775:				; CODE XREF: sub_68F4C750+Dj
		cmp	eax, 0FFh
		jnz	short loc_68F4C76F
		lea	eax, [edx-0FFFEh]
		mov	ecx, 0FFFFFFFFh
		cmp	eax, 1
		jbe	short loc_68F4C771
		mov	ecx, edx
		jmp	short loc_68F4C771
; ---------------------------------------------------------------------------

loc_68F4C790:				; CODE XREF: sub_68F4C750+1Dj
		cmp	ds:byte_68F58ACC[edx], 0
		mov	ecx, 0FFFFFFFFh
		jz	short loc_68F4C771
		mov	ecx, edx
		jmp	short loc_68F4C771
sub_68F4C750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C7B0	proc near		; DATA XREF: .rdata:68F57F2Co
					; .rdata:68F580ACo ...

arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ecx, [ebp+arg_4]
		xor	ebx, ebx
		add	ecx, 2
		movzx	edx, byte ptr [ecx]
		cmp	dl, 78h
		jnz	short loc_68F4C7DC
		jmp	short loc_68F4C808
; ---------------------------------------------------------------------------

loc_68F4C7C6:				; CODE XREF: sub_68F4C7B0+2Fj
		movsx	edx, dl
		lea	eax, [ebx+ebx*4]
		lea	ebx, [edx+eax*2-30h]
		cmp	ebx, 10FFFFh
		jg	short loc_68F4C823
		inc	ecx
		movzx	edx, byte ptr [ecx]

loc_68F4C7DC:				; CODE XREF: sub_68F4C7B0+12j
		cmp	dl, 3Bh
		jnz	short loc_68F4C7C6

loc_68F4C7E1:				; CODE XREF: sub_68F4C7B0+5Fj
		mov	eax, ebx
		pop	ebx
		pop	ebp
		jmp	sub_68F4C750
; ---------------------------------------------------------------------------

loc_68F4C7EA:				; CODE XREF: sub_68F4C7B0+6Cj
					; DATA XREF: .rdata:off_68F5A42Co
		shl	ebx, 4		; jumptable 68F4C81C cases 97-102
		lea	ebx, [edx+ebx-57h]
		jmp	short loc_68F4C800 ; jumptable 68F4C81C	default	case
; ---------------------------------------------------------------------------
		align 10h

loc_68F4C800:				; CODE XREF: sub_68F4C7B0+41j
					; sub_68F4C7B0+6Aj ...
		cmp	ebx, 10FFFFh	; jumptable 68F4C81C default case
		jg	short loc_68F4C823

loc_68F4C808:				; CODE XREF: sub_68F4C7B0+14j
					; sub_68F4C7B0+88j ...
		inc	ecx
		movzx	edx, byte ptr [ecx]
		cmp	dl, 3Bh
		jz	short loc_68F4C7E1
		movsx	edx, dl
		lea	eax, [edx-30h]	; switch 55 cases
		cmp	eax, 36h
		ja	short loc_68F4C800 ; jumptable 68F4C81C	default	case
		jmp	ds:off_68F5A42C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4C823:				; CODE XREF: sub_68F4C7B0+26j
					; sub_68F4C7B0+56j ...
		pop	ebx
		mov	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C82B:				; CODE XREF: sub_68F4C7B0+6Cj
					; DATA XREF: .rdata:off_68F5A42Co
		shl	ebx, 4		; jumptable 68F4C81C cases 65-70
		lea	ebx, [edx+ebx-37h]
		cmp	ebx, 10FFFFh
		jle	short loc_68F4C808
		jmp	short loc_68F4C823
; ---------------------------------------------------------------------------
		align 10h

loc_68F4C840:				; CODE XREF: sub_68F4C7B0+6Cj
					; DATA XREF: .rdata:off_68F5A42Co
		shl	ebx, 4		; jumptable 68F4C81C cases 48-57
		or	ebx, eax
		cmp	ebx, 10FFFFh
		jle	short loc_68F4C808
		jmp	short loc_68F4C823
sub_68F4C7B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C850	proc near		; DATA XREF: .rdata:68F57F30o
					; .rdata:68F580B0o ...

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		sub	eax, edx
		cmp	eax, 3
		jz	short loc_68F4C8A0
		jg	short loc_68F4C874
		cmp	eax, 2
		jz	short loc_68F4C8B6
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F4C870:				; CODE XREF: sub_68F4C850+27j
					; sub_68F4C850+34j ...
		xor	eax, eax

loc_68F4C872:				; CODE XREF: sub_68F4C850+77j
					; sub_68F4C850:loc_68F4C8D1j ...
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C874:				; CODE XREF: sub_68F4C850+10j
		cmp	eax, 4
		jnz	short loc_68F4C870
		movsx	eax, byte ptr [edx]
		cmp	eax, 61h
		jz	short loc_68F4C8D7
		cmp	eax, 71h
		jnz	short loc_68F4C870
		inc	edx
		cmp	byte ptr [edx],	75h
		jnz	short loc_68F4C870
		inc	edx
		cmp	byte ptr [edx],	6Fh
		jnz	short loc_68F4C870
		cmp	byte ptr [edx+1], 74h
		mov	eax, 22h
		jmp	short loc_68F4C8D1
; ---------------------------------------------------------------------------
		align 10h

loc_68F4C8A0:				; CODE XREF: sub_68F4C850+Ej
		cmp	byte ptr [edx],	61h
		jnz	short loc_68F4C870
		inc	edx
		cmp	byte ptr [edx],	6Dh
		jnz	short loc_68F4C870
		cmp	byte ptr [edx+1], 70h
		mov	eax, 26h
		jmp	short loc_68F4C8D1
; ---------------------------------------------------------------------------

loc_68F4C8B6:				; CODE XREF: sub_68F4C850+15j
		cmp	byte ptr [edx+1], 74h
		jnz	short loc_68F4C870
		movsx	edx, byte ptr [edx]
		mov	eax, 3Eh
		cmp	edx, 67h
		jz	short loc_68F4C872
		mov	eax, 3Ch
		cmp	edx, 6Ch

loc_68F4C8D1:				; CODE XREF: sub_68F4C850+4Bj
					; sub_68F4C850+64j ...
		jz	short loc_68F4C872
		xor	eax, eax
		jmp	short loc_68F4C872
; ---------------------------------------------------------------------------

loc_68F4C8D7:				; CODE XREF: sub_68F4C850+2Fj
		inc	edx
		cmp	byte ptr [edx],	70h
		jnz	short loc_68F4C870
		inc	edx
		cmp	byte ptr [edx],	6Fh
		jnz	short loc_68F4C870
		cmp	byte ptr [edx+1], 73h
		mov	eax, 27h
		jmp	short loc_68F4C8D1
sub_68F4C850	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C8F0	proc near		; DATA XREF: .rdata:68F57F18o
					; .rdata:68F58098o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		xchg	ax, ax

loc_68F4C900:				; CODE XREF: sub_68F4C8F0+5Bj
		movzx	edx, byte ptr [ebx]
		movzx	eax, dl
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4C956 ; jumptable 68F4C913	default	case
		jmp	ds:off_68F5A508[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4C920:				; CODE XREF: sub_68F4C8F0+23j
					; DATA XREF: .rdata:off_68F5A508o
		movzx	eax, byte ptr [ecx] ; jumptable	68F4C913 case 7
		inc	ebx
		inc	ecx
		cmp	dl, al
		jnz	short loc_68F4C94D
		movzx	edx, byte ptr [ebx]

loc_68F4C92C:				; CODE XREF: sub_68F4C8F0+23j
					; DATA XREF: .rdata:off_68F5A508o
		movzx	eax, byte ptr [ecx] ; jumptable	68F4C913 case 6
		inc	ebx
		inc	ecx
		cmp	dl, al
		jnz	short loc_68F4C94D
		movzx	edx, byte ptr [ebx]

loc_68F4C938:				; CODE XREF: sub_68F4C8F0+23j
					; DATA XREF: .rdata:off_68F5A508o
		movzx	eax, byte ptr [ecx] ; jumptable	68F4C913 case 5
		inc	ebx
		inc	ecx
		cmp	dl, al
		jnz	short loc_68F4C94D
		movzx	edx, byte ptr [ecx]
		inc	ecx
		movzx	eax, byte ptr [ebx]
		inc	ebx

loc_68F4C949:				; CODE XREF: sub_68F4C8F0+A5j
		cmp	al, dl
		jz	short loc_68F4C900

loc_68F4C94D:				; CODE XREF: sub_68F4C8F0+37j
					; sub_68F4C8F0+43j ...
		xor	ecx, ecx
		nop

loc_68F4C950:				; CODE XREF: sub_68F4C8F0+70j
					; sub_68F4C8F0+8Dj
		pop	ebx
		mov	eax, ecx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C956:				; CODE XREF: sub_68F4C8F0+21j
					; sub_68F4C8F0+23j
					; DATA XREF: ...
		movzx	eax, byte ptr [ecx] ; jumptable	68F4C913 default case
		mov	ecx, 1
		cmp	dl, al
		jz	short loc_68F4C950
		movzx	eax, al
		movzx	ecx, byte ptr [esi+eax+4Ch]
		cmp	ecx, 1Dh
		ja	short loc_68F4C980
		mov	eax, 1
		shl	eax, cl
		xor	ecx, ecx
		test	eax, 2FC000E0h
		jnz	short loc_68F4C950
		nop

loc_68F4C980:				; CODE XREF: sub_68F4C8F0+7Dj
		mov	ecx, 1
		mov	eax, ecx
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4C990:				; CODE XREF: sub_68F4C8F0+23j
					; DATA XREF: .rdata:off_68F5A508o
		movzx	eax, byte ptr [ecx] ; jumptable	68F4C913 cases 22-27,29
		inc	ebx
		inc	ecx
		jmp	short loc_68F4C949
sub_68F4C8F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C9A0	proc near		; DATA XREF: .rdata:68F57F1Co
					; .rdata:68F5809Co ...

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ecx, [ebp+arg_C]
		mov	edx, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	short loc_68F4C9D1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4C9C0:				; CODE XREF: sub_68F4C9A0+2Fj
		cmp	edx, ebx
		jz	short loc_68F4C9DB
		cmp	[edx], al
		jnz	short loc_68F4C9DB
		inc	edx
		inc	ecx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jnz	short loc_68F4C9C0

loc_68F4C9D1:				; CODE XREF: sub_68F4C9A0+12j
		xor	eax, eax
		cmp	edx, ebx
		setz	al
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4C9DB:				; CODE XREF: sub_68F4C9A0+22j
					; sub_68F4C9A0+26j
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
sub_68F4C9A0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4C9E0	proc near		; DATA XREF: .rdata:68F57F20o
					; .rdata:68F580A0o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		push	ebx
		mov	ecx, [ebp+arg_0]
		mov	ebx, edx
		lea	esi, [esi+0]

loc_68F4C9F0:				; CODE XREF: sub_68F4C9E0+31j
					; sub_68F4C9E0+36j ...
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [ecx+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4CA07 ; jumptable 68F4CA00	default	case
		jmp	ds:off_68F5A56C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4CA07:				; CODE XREF: sub_68F4C9E0+1Ej
					; sub_68F4C9E0+20j
					; DATA XREF: ...
		sub	edx, ebx	; jumptable 68F4CA00 default case
		mov	eax, edx
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CA10:				; CODE XREF: sub_68F4C9E0+20j
					; DATA XREF: .rdata:off_68F5A56Co
		inc	edx		; jumptable 68F4CA00 cases 22-27,29
		jmp	short loc_68F4C9F0
; ---------------------------------------------------------------------------

loc_68F4CA13:				; CODE XREF: sub_68F4C9E0+20j
					; DATA XREF: .rdata:off_68F5A56Co
		add	edx, 4		; jumptable 68F4CA00 case 7
		jmp	short loc_68F4C9F0
; ---------------------------------------------------------------------------

loc_68F4CA18:				; CODE XREF: sub_68F4C9E0+20j
					; DATA XREF: .rdata:off_68F5A56Co
		add	edx, 3		; jumptable 68F4CA00 case 6
		jmp	short loc_68F4C9F0
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CA20:				; CODE XREF: sub_68F4C9E0+20j
					; DATA XREF: .rdata:off_68F5A56Co
		add	edx, 2		; jumptable 68F4CA00 case 5
		jmp	short loc_68F4C9F0
sub_68F4C9E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CA30	proc near		; DATA XREF: .rdata:68F57F24o
					; .rdata:68F580A4o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_0]
		push	ebx
		mov	ebx, 1
		jmp	short loc_68F4CA4E
; ---------------------------------------------------------------------------

loc_68F4CA42:				; CODE XREF: sub_68F4CA30+29j
		mov	eax, ebx
		shl	eax, cl
		test	eax, 200600h
		jz	short loc_68F4CA5B
		inc	edx

loc_68F4CA4E:				; CODE XREF: sub_68F4CA30+10j
		movzx	eax, byte ptr [edx]
		movzx	ecx, byte ptr [esi+eax+4Ch]
		cmp	ecx, 15h
		jbe	short loc_68F4CA42

loc_68F4CA5B:				; CODE XREF: sub_68F4CA30+1Bj
		pop	ebx
		mov	eax, edx
		pop	esi
		pop	ebp
		retn
sub_68F4CA30	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F4CA70
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CA70	proc near		; CODE XREF: .text:68F4CA61j
					; sub_68F53330+Bj
					; DATA XREF: ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		push	esi
		mov	ecx, [ebp+arg_C]
		mov	esi, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+arg_8]
		cmp	edx, ebx
		jz	short loc_68F4CAB8
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4CA90:				; CODE XREF: sub_68F4CA70+46j
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		sub	eax, 5		; switch 6 cases
		cmp	eax, 5
		ja	short loc_68F4CAB0 ; jumptable 68F4CAA0	default	case
		jmp	ds:off_68F5A5D0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4CAA7:				; CODE XREF: sub_68F4CA70+30j
					; DATA XREF: .rdata:off_68F5A5D0o
		inc	dword ptr [ecx]	; jumptable 68F4CAA0 case 10
		mov	dword ptr [ecx+4], 0FFFFFFFFh

loc_68F4CAB0:				; CODE XREF: sub_68F4CA70+2Ej
					; sub_68F4CA70+30j
					; DATA XREF: ...
		inc	dword ptr [ecx+4] ; jumptable 68F4CAA0 default case
		inc	edx

loc_68F4CAB4:				; CODE XREF: sub_68F4CA70+6Dj
					; sub_68F4CA70+75j ...
		cmp	edx, ebx
		jnz	short loc_68F4CA90

loc_68F4CAB8:				; CODE XREF: sub_68F4CA70+13j
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4CABC:				; CODE XREF: sub_68F4CA70+30j
					; DATA XREF: .rdata:off_68F5A5D0o
		inc	dword ptr [ecx]	; jumptable 68F4CAA0 case 9
		inc	edx
		cmp	edx, ebx
		jz	short loc_68F4CAD3
		movzx	eax, byte ptr [edx]
		cmp	byte ptr [esi+eax+4Ch],	0Ah
		setz	al
		movzx	eax, al
		add	edx, eax

loc_68F4CAD3:				; CODE XREF: sub_68F4CA70+51j
		mov	dword ptr [ecx+4], 0FFFFFFFFh
		inc	dword ptr [ecx+4]
		jmp	short loc_68F4CAB4
; ---------------------------------------------------------------------------

loc_68F4CADF:				; CODE XREF: sub_68F4CA70+30j
					; DATA XREF: .rdata:off_68F5A5D0o
		inc	dword ptr [ecx+4] ; jumptable 68F4CAA0 case 7
		add	edx, 4
		jmp	short loc_68F4CAB4
; ---------------------------------------------------------------------------

loc_68F4CAE7:				; CODE XREF: sub_68F4CA70+30j
					; DATA XREF: .rdata:off_68F5A5D0o
		inc	dword ptr [ecx+4] ; jumptable 68F4CAA0 case 6
		add	edx, 3
		jmp	short loc_68F4CAB4
; ---------------------------------------------------------------------------

loc_68F4CAEF:				; CODE XREF: sub_68F4CA70+30j
					; DATA XREF: .rdata:off_68F5A5D0o
		inc	dword ptr [ecx+4] ; jumptable 68F4CAA0 case 5
		add	edx, 2
		jmp	short loc_68F4CAB4
sub_68F4CA70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CB00	proc near		; DATA XREF: .rdata:68F57F3Co
					; .rdata:68F58C5Co ...

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_C]
		mov	edx, [ebp+arg_10]
		push	esi
		push	ebx
		mov	ebx, [ebp+arg_8]
		mov	esi, [eax]
		mov	ecx, [edi]
		mov	eax, ebx
		sub	eax, esi
		sub	edx, ecx
		cmp	eax, edx
		jle	short loc_68F4CB43
		lea	ebx, [esi+edx]
		cmp	esi, ebx
		jnb	short loc_68F4CB43
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F4CB30:				; CODE XREF: sub_68F4CB00+41j
		movzx	eax, byte ptr [ebx-1]
		and	eax, 0C0h
		add	eax, 0FFFFFF80h
		jnz	short loc_68F4CB43
		dec	ebx
		cmp	esi, ebx
		jb	short loc_68F4CB30

loc_68F4CB43:				; CODE XREF: sub_68F4CB00+1Ej
					; sub_68F4CB00+25j ...
		mov	edx, esi
		jmp	short loc_68F4CB4E
; ---------------------------------------------------------------------------

loc_68F4CB47:				; CODE XREF: sub_68F4CB00+50j
		movzx	eax, byte ptr [edx]
		inc	edx
		mov	[ecx], al
		inc	ecx

loc_68F4CB4E:				; CODE XREF: sub_68F4CB00+45j
		cmp	edx, ebx
		jnz	short loc_68F4CB47
		mov	eax, [ebp+arg_4]
		mov	[eax], edx
		mov	[edi], ecx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F4CB00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CB60	proc near		; DATA XREF: .rdata:68F57F40o
					; .rdata:68F58C60o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_C]
		push	edi
		mov	edi, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_10]
		push	ebx
		mov	ebx, [eax]
		mov	ecx, [edi]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4CB80:				; CODE XREF: sub_68F4CB60+DCj
					; sub_68F4CB60+108j ...
		cmp	ecx, [ebp+arg_8]
		setnz	al
		xor	edx, edx
		cmp	ebx, esi
		setnz	dl
		test	edx, eax
		jz	short loc_68F4CBCF

loc_68F4CB91:				; CODE XREF: sub_68F4CB60+6Dj
		movzx	edx, byte ptr [ecx]
		mov	edi, [ebp+arg_0]
		movzx	eax, dl
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 6
		jz	loc_68F4CC41
		jg	short loc_68F4CBE0
		cmp	eax, 5
		jz	loc_68F4CC70

loc_68F4CBB3:				; CODE XREF: sub_68F4CB60+83j
		movsx	ax, dl
		inc	ecx
		mov	[ebx], ax
		add	ebx, 2
		cmp	ecx, [ebp+arg_8]
		setnz	al
		xor	edx, edx
		cmp	ebx, esi
		setnz	dl
		test	edx, eax
		jnz	short loc_68F4CB91

loc_68F4CBCF:				; CODE XREF: sub_68F4CB60+2Fj
					; sub_68F4CB60+8Aj
		mov	edi, [ebp+arg_C]
		mov	eax, [ebp+arg_4]
		mov	[edi], ebx
		mov	[eax], ecx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CBE0:				; CODE XREF: sub_68F4CB60+48j
		cmp	eax, 7
		jnz	short loc_68F4CBB3
		lea	eax, [ebx+2]
		cmp	eax, esi
		jz	short loc_68F4CBCF
		movsx	eax, byte ptr [ecx+1]
		and	edx, 7
		shl	edx, 12h
		and	eax, 3Fh
		shl	eax, 0Ch
		or	edx, eax
		movsx	eax, byte ptr [ecx+2]
		and	eax, 3Fh
		shl	eax, 6
		or	edx, eax
		movsx	eax, byte ptr [ecx+3]
		add	ecx, 4
		and	eax, 3Fh
		or	edx, eax
		sub	edx, 10000h
		mov	eax, edx
		shr	eax, 0Ah
		and	edx, 3FFh
		or	eax, 0FFFFD800h
		mov	[ebx], ax
		or	edx, 0FFFFDC00h
		mov	[ebx+2], dx
		add	ebx, 4
		jmp	loc_68F4CB80
; ---------------------------------------------------------------------------

loc_68F4CC41:				; CODE XREF: sub_68F4CB60+42j
		mov	eax, edx
		and	eax, 0Fh
		shl	eax, 0Ch
		movsx	edx, byte ptr [ecx+1]
		and	edx, 3Fh
		shl	edx, 6
		or	eax, edx
		movsx	dx, byte ptr [ecx+2]
		add	ecx, 3
		and	edx, 3Fh
		or	eax, edx
		mov	[ebx], ax
		add	ebx, 2
		jmp	loc_68F4CB80
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CC70:				; CODE XREF: sub_68F4CB60+4Dj
		movsx	ax, byte ptr [ecx+1]
		and	edx, 1Fh
		shl	edx, 6
		add	ecx, 2
		and	eax, 3Fh
		or	edx, eax
		mov	[ebx], dx
		add	ebx, 2
		jmp	loc_68F4CB80
sub_68F4CB60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CC90	proc near		; DATA XREF: .rdata:68F5823Co
					; .rdata:68F58ABCo

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_10]
		push	esi
		mov	esi, [ebp+arg_4]
		push	ebx
		mov	ebx, [ebp+arg_C]
		nop

loc_68F4CCA0:				; CODE XREF: sub_68F4CC90+30j
		mov	edx, [esi]
		mov	eax, edx
		cmp	edx, [ebp+arg_8]
		jz	short loc_68F4CCF2

loc_68F4CCA9:				; CODE XREF: sub_68F4CC90+60j
		movzx	ecx, byte ptr [edx]
		test	cl, cl
		js	short loc_68F4CCC2
		mov	ecx, [ebx]
		cmp	ecx, edi
		jz	short loc_68F4CCF2
		inc	edx
		mov	[esi], edx
		movzx	eax, byte ptr [eax]
		mov	[ecx], al
		inc	dword ptr [ebx]
		jmp	short loc_68F4CCA0
; ---------------------------------------------------------------------------

loc_68F4CCC2:				; CODE XREF: sub_68F4CC90+1Ej
		mov	edx, [ebx]
		mov	eax, edi
		sub	eax, edx
		dec	eax
		jle	short loc_68F4CCF2
		mov	al, cl
		shr	al, 6
		and	cl, 3Fh
		or	al, 0C0h
		or	cl, 80h
		mov	[edx], al
		mov	edx, [ebx]
		lea	eax, [edx+1]
		mov	[ebx], eax
		mov	[edx+1], cl
		inc	dword ptr [ebx]
		mov	edx, [esi]
		inc	edx
		mov	[esi], edx
		mov	eax, edx
		cmp	edx, [ebp+arg_8]
		jnz	short loc_68F4CCA9

loc_68F4CCF2:				; CODE XREF: sub_68F4CC90+17j
					; sub_68F4CC90+24j ...
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F4CC90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CD00	proc near		; DATA XREF: .rdata:68F580C0o
					; .rdata:68F58240o ...

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_C]
		push	esi
		push	ebx
		mov	edx, [eax]
		cmp	edx, [ebp+arg_8]
		jz	short loc_68F4CD42
		mov	eax, [edi]
		cmp	eax, [ebp+arg_10]
		jz	short loc_68F4CD42
		lea	ecx, [edx+1]
		lea	ebx, [eax+2]

loc_68F4CD20:				; CODE XREF: sub_68F4CD00+40j
		movzx	ax, byte ptr [ecx-1]
		mov	edx, ecx
		mov	esi, [ebp+arg_4]
		mov	[esi], ecx
		inc	ecx
		mov	[ebx-2], ax
		mov	eax, ebx
		add	ebx, 2
		cmp	edx, [ebp+arg_8]
		mov	[edi], eax
		jz	short loc_68F4CD42
		cmp	eax, [ebp+arg_10]
		jnz	short loc_68F4CD20

loc_68F4CD42:				; CODE XREF: sub_68F4CD00+11j
					; sub_68F4CD00+18j ...
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F4CD00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CD50	proc near		; DATA XREF: .rdata:68F580BCo
					; .rdata:68F593FCo

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_10]
		push	esi
		mov	esi, [ebp+arg_4]
		push	ebx
		mov	ebx, [ebp+arg_C]
		mov	edx, [esi]
		cmp	edx, [ebp+arg_8]
		jz	short loc_68F4CD8C
		mov	ecx, [ebx]
		cmp	ecx, edi
		jmp	short loc_68F4CD8A
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CD70:				; CODE XREF: sub_68F4CD50:loc_68F4CD8Aj
		mov	eax, edx
		inc	edx
		mov	[esi], edx
		movzx	eax, byte ptr [eax]
		mov	[ecx], al
		mov	eax, [ebx]
		inc	eax
		mov	[ebx], eax
		mov	ecx, eax
		mov	edx, [esi]
		cmp	edx, [ebp+arg_8]
		jz	short loc_68F4CD8C
		cmp	eax, edi

loc_68F4CD8A:				; CODE XREF: sub_68F4CD50+1Aj
		jnz	short loc_68F4CD70

loc_68F4CD8C:				; CODE XREF: sub_68F4CD50+14j
					; sub_68F4CD50+36j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F4CD50	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F4CDA0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CDA0	proc near		; CODE XREF: .text:68F4CD91j
					; sub_68F4D220+6Cp ...
		push	ebp
		movzx	eax, al
		sub	eax, 0D8h
		cmp	eax, 27h	; switch 40 cases
		mov	ebp, esp
		ja	short loc_68F4CDD0 ; jumptable 68F4CDB0	default	case
		jmp	ds:off_68F5A5E8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4CDB7:				; CODE XREF: sub_68F4CDA0+10j
					; DATA XREF: .rdata:off_68F5A5E8o
		movzx	eax, dl		; jumptable 68F4CDB0 case 39
		xor	ecx, ecx
		sub	eax, 0FEh
		cmp	eax, 1
		jbe	short loc_68F4CDD5
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4CDD0:				; CODE XREF: sub_68F4CDA0+Ej
					; sub_68F4CDA0+10j
					; DATA XREF: ...
		mov	ecx, 1Dh	; jumptable 68F4CDB0 default case

loc_68F4CDD5:				; CODE XREF: sub_68F4CDA0+24j
		pop	ebp
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CDE0:				; CODE XREF: sub_68F4CDA0+10j
					; DATA XREF: .rdata:off_68F5A5E8o
		pop	ebp		; jumptable 68F4CDB0 cases 4-7
		mov	ecx, 8
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CDF0:				; CODE XREF: sub_68F4CDA0+10j
					; DATA XREF: .rdata:off_68F5A5E8o
		pop	ebp		; jumptable 68F4CDB0 cases 0-3
		mov	ecx, 7
		mov	eax, ecx
		retn
sub_68F4CDA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CE00	proc near		; DATA XREF: .rdata:68F57C3Co
					; .rdata:68F58DDCo ...

var_10		= dword	ptr -10h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	eax, [ebp+arg_4]
		mov	edi, [eax]
		cmp	edi, [ebp+arg_8]
		jz	short loc_68F4CE71
		mov	edx, [ebp+arg_C]
		mov	esi, [edx]
		nop
		lea	esi, [esi+0]

loc_68F4CE20:				; CODE XREF: sub_68F4CE00+6Fj
		movzx	edx, byte ptr [edi+1]
		movzx	ebx, byte ptr [edi]
		movzx	eax, dl
		cmp	eax, 7
		jg	short loc_68F4CE80
		cmp	eax, 1
		jl	loc_68F4CF60

loc_68F4CE38:				; CODE XREF: sub_68F4CE00+166j
		mov	eax, [ebp+arg_10]
		sub	eax, esi
		dec	eax
		jle	short loc_68F4CE71
		mov	al, bl
		movzx	edx, dl
		shr	al, 6
		shl	edx, 2
		or	al, dl
		or	al, 0C0h
		mov	[esi], al

loc_68F4CE51:				; CODE XREF: sub_68F4CE00+159j
		mov	edx, [ebp+arg_C]
		and	bl, 3Fh
		or	bl, 80h
		mov	eax, [edx]
		lea	esi, [eax+1]
		mov	[edx], esi
		mov	[eax+1], bl

loc_68F4CE64:				; CODE XREF: sub_68F4CE00+17Aj
		mov	esi, [edx]
		inc	esi

loc_68F4CE67:				; CODE XREF: sub_68F4CE00+121j
		mov	[edx], esi
		add	edi, 2
		cmp	edi, [ebp+arg_8]
		jnz	short loc_68F4CE20

loc_68F4CE71:				; CODE XREF: sub_68F4CE00+11j
					; sub_68F4CE00+3Ej ...
		mov	eax, [ebp+arg_4]
		mov	[eax], edi
		pop	eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CE80:				; CODE XREF: sub_68F4CE00+2Dj
		sub	eax, 0D8h
		cmp	eax, 3
		ja	loc_68F4CF26
		mov	eax, [ebp+arg_10]
		sub	eax, esi
		cmp	eax, 3
		jle	short loc_68F4CE71
		mov	al, bl
		and	edx, 3
		shr	al, 6
		and	eax, 3
		shl	edx, 2
		or	edx, eax
		inc	edx
		add	edi, 2
		mov	eax, edx
		sar	eax, 2
		and	edx, 3
		or	al, 0F0h
		mov	[esi], al
		shl	edx, 4
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		lea	esi, [ecx+1]
		mov	[eax], esi
		mov	al, bl
		shr	al, 2
		and	al, 0Fh
		or	al, dl
		or	al, 80h
		mov	[ecx+1], al
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_C]
		mov	edx, [edx]
		mov	esi, edx
		inc	esi
		mov	[eax], esi
		mov	[ebp+var_10], edx
		mov	edx, ebx
		and	edx, 3
		movzx	eax, byte ptr [edi+1]
		shl	edx, 4
		movzx	ecx, byte ptr [edi]
		and	eax, 3
		shl	eax, 2
		or	al, dl
		mov	dl, cl
		shr	dl, 6
		or	al, dl
		mov	edx, [ebp+var_10]
		or	al, 80h
		and	cl, 3Fh
		or	cl, 80h
		mov	[edx+1], al
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		lea	esi, [eax+1]
		mov	[edx], esi
		mov	[eax+1], cl
		mov	eax, [edx]
		inc	eax
		mov	esi, eax
		jmp	loc_68F4CE67
; ---------------------------------------------------------------------------

loc_68F4CF26:				; CODE XREF: sub_68F4CE00+88j
					; sub_68F4CE00+162j
		mov	eax, [ebp+arg_10]
		sub	eax, esi
		cmp	eax, 2
		jle	loc_68F4CE71
		mov	al, dl
		shr	al, 4
		and	edx, 0Fh
		or	al, 0E0h
		shl	edx, 2
		mov	[esi], al
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		lea	esi, [ecx+1]
		mov	[eax], esi
		mov	al, bl
		shr	al, 6
		or	al, dl
		or	al, 80h
		mov	[ecx+1], al
		jmp	loc_68F4CE51
; ---------------------------------------------------------------------------
		align 10h

loc_68F4CF60:				; CODE XREF: sub_68F4CE00+32j
		test	eax, eax
		jnz	short loc_68F4CF26
		test	bl, bl
		js	loc_68F4CE38
		cmp	esi, [ebp+arg_10]
		jz	loc_68F4CE71
		mov	[esi], bl
		mov	edx, [ebp+arg_C]
		jmp	loc_68F4CE64
sub_68F4CE00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4CF80	proc near		; DATA XREF: .rdata:68F57C40o
					; .rdata:68F58DE0o ...

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_C]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ecx, [eax]
		mov	ebx, [edi]
		mov	eax, [ebp+arg_10]
		mov	edx, esi
		sub	edx, ecx
		sub	eax, ebx
		and	eax, 0FFFFFFFEh
		cmp	edx, eax
		jle	short loc_68F4CFB3
		movzx	eax, byte ptr [esi-1]
		and	eax, 0F8h
		cmp	eax, 0D8h
		jz	short loc_68F4D004

loc_68F4CFB3:				; CODE XREF: sub_68F4CF80+21j
					; sub_68F4CF80+87j
		cmp	ecx, esi
		jz	short loc_68F4CFFF
		cmp	ebx, [ebp+arg_10]
		jz	short loc_68F4CFFF
		lea	ecx, [ecx+2]
		add	ebx, 2
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4CFD0:				; CODE XREF: sub_68F4CF80+7Dj
		movzx	eax, byte ptr [ecx-1]
		mov	edi, [ebp+arg_4]
		movzx	dx, byte ptr [ecx-2]
		shl	eax, 8
		mov	[edi], ecx
		or	eax, edx
		mov	edx, ebx
		mov	[ebx-2], ax
		mov	eax, [ebp+arg_C]
		add	ebx, 2
		mov	[eax], edx
		mov	eax, ecx
		add	ecx, 2
		cmp	eax, esi
		jz	short loc_68F4CFFF
		cmp	edx, [ebp+arg_10]
		jnz	short loc_68F4CFD0

loc_68F4CFFF:				; CODE XREF: sub_68F4CF80+35j
					; sub_68F4CF80+3Aj ...
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D004:				; CODE XREF: sub_68F4CF80+31j
		sub	esi, 2
		jmp	short loc_68F4CFB3
sub_68F4CF80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4D010	proc near		; DATA XREF: .rdata:68F57DBCo
					; .rdata:68F5927Co

var_10		= dword	ptr -10h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	eax, [ebp+arg_4]
		mov	edi, [eax]
		cmp	edi, [ebp+arg_8]
		jz	short loc_68F4D081
		mov	edx, [ebp+arg_C]
		mov	esi, [edx]
		nop
		lea	esi, [esi+0]

loc_68F4D030:				; CODE XREF: sub_68F4D010+6Fj
		movzx	edx, byte ptr [edi]
		movzx	ebx, byte ptr [edi+1]
		movzx	eax, dl
		cmp	eax, 7
		jg	short loc_68F4D090
		cmp	eax, 1
		jl	loc_68F4D170

loc_68F4D048:				; CODE XREF: sub_68F4D010+166j
		mov	eax, [ebp+arg_10]
		sub	eax, esi
		dec	eax
		jle	short loc_68F4D081
		mov	al, bl
		movzx	edx, dl
		shr	al, 6
		shl	edx, 2
		or	al, dl
		or	al, 0C0h
		mov	[esi], al

loc_68F4D061:				; CODE XREF: sub_68F4D010+159j
		mov	edx, [ebp+arg_C]
		and	bl, 3Fh
		or	bl, 80h
		mov	eax, [edx]
		lea	esi, [eax+1]
		mov	[edx], esi
		mov	[eax+1], bl

loc_68F4D074:				; CODE XREF: sub_68F4D010+17Aj
		mov	esi, [edx]
		inc	esi

loc_68F4D077:				; CODE XREF: sub_68F4D010+121j
		mov	[edx], esi
		add	edi, 2
		cmp	edi, [ebp+arg_8]
		jnz	short loc_68F4D030

loc_68F4D081:				; CODE XREF: sub_68F4D010+11j
					; sub_68F4D010+3Ej ...
		mov	eax, [ebp+arg_4]
		mov	[eax], edi
		pop	edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4D090:				; CODE XREF: sub_68F4D010+2Dj
		sub	eax, 0D8h
		cmp	eax, 3
		ja	loc_68F4D136
		mov	eax, [ebp+arg_10]
		sub	eax, esi
		cmp	eax, 3
		jle	short loc_68F4D081
		mov	al, bl
		and	edx, 3
		shr	al, 6
		and	eax, 3
		shl	edx, 2
		or	edx, eax
		inc	edx
		add	edi, 2
		mov	eax, edx
		sar	eax, 2
		and	edx, 3
		or	al, 0F0h
		mov	[esi], al
		shl	edx, 4
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		lea	esi, [ecx+1]
		mov	[eax], esi
		mov	al, bl
		shr	al, 2
		and	al, 0Fh
		or	al, dl
		or	al, 80h
		mov	[ecx+1], al
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_C]
		mov	edx, [edx]
		mov	esi, edx
		inc	esi
		mov	[eax], esi
		mov	[ebp+var_10], edx
		mov	edx, ebx
		and	edx, 3
		movzx	eax, byte ptr [edi]
		shl	edx, 4
		movzx	ecx, byte ptr [edi+1]
		and	eax, 3
		shl	eax, 2
		or	al, dl
		mov	dl, cl
		shr	dl, 6
		or	al, dl
		mov	edx, [ebp+var_10]
		or	al, 80h
		and	cl, 3Fh
		or	cl, 80h
		mov	[edx+1], al
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		lea	esi, [eax+1]
		mov	[edx], esi
		mov	[eax+1], cl
		mov	eax, [edx]
		inc	eax
		mov	esi, eax
		jmp	loc_68F4D077
; ---------------------------------------------------------------------------

loc_68F4D136:				; CODE XREF: sub_68F4D010+88j
					; sub_68F4D010+162j
		mov	eax, [ebp+arg_10]
		sub	eax, esi
		cmp	eax, 2
		jle	loc_68F4D081
		mov	al, dl
		shr	al, 4
		and	edx, 0Fh
		or	al, 0E0h
		shl	edx, 2
		mov	[esi], al
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		lea	esi, [ecx+1]
		mov	[eax], esi
		mov	al, bl
		shr	al, 6
		or	al, dl
		or	al, 80h
		mov	[ecx+1], al
		jmp	loc_68F4D061
; ---------------------------------------------------------------------------
		align 10h

loc_68F4D170:				; CODE XREF: sub_68F4D010+32j
		test	eax, eax
		jnz	short loc_68F4D136
		test	bl, bl
		js	loc_68F4D048
		cmp	esi, [ebp+arg_10]
		jz	loc_68F4D081
		mov	[esi], bl
		mov	edx, [ebp+arg_C]
		jmp	loc_68F4D074
sub_68F4D010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4D190	proc near		; DATA XREF: .rdata:68F57DC0o
					; .rdata:68F59280o

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_C]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ecx, [eax]
		mov	ebx, [edi]
		mov	eax, [ebp+arg_10]
		mov	edx, esi
		sub	edx, ecx
		sub	eax, ebx
		and	eax, 0FFFFFFFEh
		cmp	edx, eax
		jle	short loc_68F4D1C3
		movzx	eax, byte ptr [esi-2]
		and	eax, 0F8h
		cmp	eax, 0D8h
		jz	short loc_68F4D214

loc_68F4D1C3:				; CODE XREF: sub_68F4D190+21j
					; sub_68F4D190+87j
		cmp	ecx, esi
		jz	short loc_68F4D20F
		cmp	ebx, [ebp+arg_10]
		jz	short loc_68F4D20F
		lea	ecx, [ecx+2]
		add	ebx, 2
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4D1E0:				; CODE XREF: sub_68F4D190+7Dj
		movzx	eax, byte ptr [ecx-2]
		mov	edi, [ebp+arg_4]
		movzx	dx, byte ptr [ecx-1]
		shl	eax, 8
		mov	[edi], ecx
		or	eax, edx
		mov	edx, ebx
		mov	[ebx-2], ax
		mov	eax, [ebp+arg_C]
		add	ebx, 2
		mov	[eax], edx
		mov	eax, ecx
		add	ecx, 2
		cmp	eax, esi
		jz	short loc_68F4D20F
		cmp	edx, [ebp+arg_10]
		jnz	short loc_68F4D1E0

loc_68F4D20F:				; CODE XREF: sub_68F4D190+35j
					; sub_68F4D190+3Aj ...
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D214:				; CODE XREF: sub_68F4D190+31j
		sub	esi, 2
		jmp	short loc_68F4D1C3
sub_68F4D190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4D220	proc near		; CODE XREF: sub_68F4DA70+79Ep
					; sub_68F4EDB0+833p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, esi
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_10], eax
		jz	short loc_68F4D293
		cmp	byte ptr [edx+1], 0
		jz	short loc_68F4D255

loc_68F4D244:				; CODE XREF: sub_68F4D220+38j
					; sub_68F4D220+5Fj ...
		mov	[edi], ebx	; jumptable 68F4D27F cases 0,1,8
		xor	eax, eax

loc_68F4D248:				; CODE XREF: sub_68F4D220+78j
					; sub_68F4D220+96j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D255:				; CODE XREF: sub_68F4D220+22j
		cmp	byte ptr [edx],	2Dh
		jnz	short loc_68F4D244 ; jumptable 68F4D27F	cases 0,1,8
		lea	esi, [esi+0]

loc_68F4D260:				; CODE XREF: sub_68F4D220+5Dj
					; sub_68F4D220+5Fj ...
		add	ebx, 2		; jumptable 68F4D27F default case

loc_68F4D263:				; CODE XREF: sub_68F4D220+85j
					; sub_68F4D220+8Aj ...
		cmp	ebx, esi
		jz	short loc_68F4D293
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4D286
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+var_10]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4D27A:				; CODE XREF: sub_68F4D220+71j
		cmp	eax, 1Bh	; switch 28 cases
		ja	short loc_68F4D260 ; jumptable 68F4D27F	default	case
		jmp	ds:off_68F5A688[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4D286:				; CODE XREF: sub_68F4D220+4Dj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4D27A
; ---------------------------------------------------------------------------

loc_68F4D293:				; CODE XREF: sub_68F4D220+1Cj
					; sub_68F4D220+45j ...
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68F4D248
; ---------------------------------------------------------------------------

loc_68F4D29A:				; CODE XREF: sub_68F4D220+5Fj
					; DATA XREF: .rdata:off_68F5A688o
		add	ebx, 2		; jumptable 68F4D27F case 27
		cmp	ebx, esi
		jz	short loc_68F4D293
		cmp	byte ptr [ebx+1], 0
		jnz	short loc_68F4D263
		cmp	byte ptr [ebx],	2Dh
		jnz	short loc_68F4D263
		add	ebx, 2
		mov	eax, 0FFFFFFFFh
		cmp	ebx, esi
		jz	short loc_68F4D248
		cmp	byte ptr [ebx+1], 0
		jnz	short loc_68F4D244 ; jumptable 68F4D27F	cases 0,1,8
		cmp	byte ptr [ebx],	3Eh
		jnz	short loc_68F4D244 ; jumptable 68F4D27F	cases 0,1,8
		lea	eax, [ebx+2]
		mov	[edi], eax
		mov	eax, 0Dh
		jmp	loc_68F4D248
; ---------------------------------------------------------------------------

loc_68F4D2D2:				; CODE XREF: sub_68F4D220+5Fj
					; DATA XREF: .rdata:off_68F5A688o
		mov	eax, esi	; jumptable 68F4D27F case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4D2FC
		add	ebx, 4
		jmp	short loc_68F4D263
; ---------------------------------------------------------------------------

loc_68F4D2E0:				; CODE XREF: sub_68F4D220+5Fj
					; DATA XREF: .rdata:off_68F5A688o
		mov	eax, esi	; jumptable 68F4D27F case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4D2FC
		add	ebx, 3
		jmp	loc_68F4D263
; ---------------------------------------------------------------------------

loc_68F4D2F1:				; CODE XREF: sub_68F4D220+5Fj
					; DATA XREF: .rdata:off_68F5A688o
		mov	eax, esi	; jumptable 68F4D27F case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F4D260	; jumptable 68F4D27F default case

loc_68F4D2FC:				; CODE XREF: sub_68F4D220+B9j
					; sub_68F4D220+C7j
		mov	eax, 0FFFFFFFEh
		jmp	loc_68F4D248
sub_68F4D220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4D310	proc near		; CODE XREF: sub_68F4D3C0+14Dp
					; sub_68F4D3C0+190p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_4], esi
		mov	esi, 1
		mov	[esp+8+var_8], ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		sub	eax, edx
		cmp	eax, 6
		mov	dword ptr [ebx], 0Bh
		jz	short loc_68F4D344

loc_68F4D337:				; CODE XREF: sub_68F4D310+99j
		mov	eax, esi
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D344:				; CODE XREF: sub_68F4D310+25j
		cmp	byte ptr [edx+1], 0
		jnz	short loc_68F4D360
		movsx	eax, byte ptr [edx]
		cmp	eax, 58h
		jz	short loc_68F4D372
		cmp	eax, 78h
		jz	short loc_68F4D377
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F4D360:				; CODE XREF: sub_68F4D310+38j
					; sub_68F4D310+6Ej ...
		mov	esi, 1

loc_68F4D365:				; CODE XREF: sub_68F4D310+A6j
		mov	eax, esi
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D372:				; CODE XREF: sub_68F4D310+40j
		mov	ecx, 1

loc_68F4D377:				; CODE XREF: sub_68F4D310+45j
		add	edx, 2
		cmp	byte ptr [edx+1], 0
		jnz	short loc_68F4D360
		movsx	eax, byte ptr [edx]
		cmp	eax, 4Dh
		jz	short loc_68F4D3B8
		cmp	eax, 6Dh
		jnz	short loc_68F4D360

loc_68F4D38D:				; CODE XREF: sub_68F4D310+ADj
		add	edx, 2
		cmp	byte ptr [edx+1], 0
		jnz	short loc_68F4D360
		movsx	eax, byte ptr [edx]
		cmp	eax, 4Ch
		jz	short loc_68F4D3A7
		cmp	eax, 6Ch
		jnz	short loc_68F4D360
		test	ecx, ecx
		jz	short loc_68F4D3AB

loc_68F4D3A7:				; CODE XREF: sub_68F4D310+8Cj
		xor	esi, esi
		jmp	short loc_68F4D337
; ---------------------------------------------------------------------------

loc_68F4D3AB:				; CODE XREF: sub_68F4D310+95j
		mov	dword ptr [ebx], 0Ch
		mov	esi, 1
		jmp	short loc_68F4D365
; ---------------------------------------------------------------------------

loc_68F4D3B8:				; CODE XREF: sub_68F4D310+76j
		mov	ecx, 1
		jmp	short loc_68F4D38D
sub_68F4D310	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4D3C0	proc near		; CODE XREF: sub_68F4DA70+41Ap
					; sub_68F4EDB0+123j

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_39		= byte ptr -39h
var_38		= byte ptr -38h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 50h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, esi
		mov	[ebp+var_4], edi
		mov	edi, eax
		mov	eax, 0FFFFFFFFh
		mov	[ebp+var_20], edx
		jz	short loc_68F4D42D
		movzx	eax, byte ptr [edx+1]
		test	al, al
		mov	[ebp+var_39], al
		jz	short loc_68F4D410
		movzx	eax, byte ptr [edx]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_39]
		call	sub_68F4CDA0
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4D426 ; jumptable 68F4D407	default	case
					; jumptable 68F4D53A cases 0,1,8

loc_68F4D407:				; CODE XREF: sub_68F4D3C0+64j
		jmp	ds:off_68F5A6F8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4D410:				; CODE XREF: sub_68F4D3C0+2Bj
		movzx	edx, byte ptr [edx]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5
		cmp	eax, 18h
		jbe	short loc_68F4D407

loc_68F4D426:				; CODE XREF: sub_68F4D3C0+45j
					; sub_68F4D3C0:loc_68F4D407j ...
		mov	edx, [ebp+arg_4] ; jumptable 68F4D407 default case
					; jumptable 68F4D53A cases 0,1,8
		mov	[edx], ebx

loc_68F4D42B:				; CODE XREF: sub_68F4D3C0+F1j
					; sub_68F4D3C0+115j
		xor	eax, eax

loc_68F4D42D:				; CODE XREF: sub_68F4D3C0+20j
					; sub_68F4D3C0:loc_68F4D4AAj ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D43A:				; CODE XREF: sub_68F4D3C0:loc_68F4D407j
					; DATA XREF: .rdata:off_68F5A6F8o
		movzx	eax, [ebp+var_39] ; jumptable 68F4D407 case 29
		movzx	edx, ds:byte_68F58380[eax]

loc_68F4D445:				; CODE XREF: sub_68F4D3C0+139j
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_38]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F4D426 ; jumptable 68F4D407	default	case
					; jumptable 68F4D53A cases 0,1,8

loc_68F4D469:				; CODE XREF: sub_68F4D3C0:loc_68F4D407j
					; sub_68F4D3C0+D5j
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4D407 cases 22,24
					; jumptable 68F4D495 cases 22,24-27
		cmp	ebx, esi
		jz	loc_68F4D5F7
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		mov	[ebp+var_39], al
		jnz	short loc_68F4D4DA
		movzx	edx, byte ptr [ebx]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4D48D:				; CODE XREF: sub_68F4D3C0+12Cj
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4D4AC ; jumptable 68F4D495	default	case
		jmp	ds:off_68F5A75C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4D4A0:				; CODE XREF: sub_68F4D3C0:loc_68F4D407j
					; sub_68F4D3C0+D5j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4D407 case 7
					; jumptable 68F4D495 case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3

loc_68F4D4AA:				; CODE XREF: sub_68F4D3C0+FEj
		jle	short loc_68F4D42D

loc_68F4D4AC:				; CODE XREF: sub_68F4D3C0+D3j
					; sub_68F4D3C0+D5j ...
		mov	eax, [ebp+arg_4] ; jumptable 68F4D495 default case
		mov	[eax], ebx
		jmp	loc_68F4D42B
; ---------------------------------------------------------------------------

loc_68F4D4B6:				; CODE XREF: sub_68F4D3C0:loc_68F4D407j
					; sub_68F4D3C0+D5j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4D407 case 5
					; jumptable 68F4D495 case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jmp	short loc_68F4D4AA
; ---------------------------------------------------------------------------

loc_68F4D4C0:				; CODE XREF: sub_68F4D3C0:loc_68F4D407j
					; sub_68F4D3C0+D5j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4D407 case 6
					; jumptable 68F4D495 case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F4D42D
		mov	edx, [ebp+arg_4]
		mov	[edx], ebx
		jmp	loc_68F4D42B
; ---------------------------------------------------------------------------

loc_68F4D4DA:				; CODE XREF: sub_68F4D3C0+BDj
		movzx	eax, byte ptr [ebx]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_39]
		call	sub_68F4CDA0
		jmp	short loc_68F4D48D
; ---------------------------------------------------------------------------

loc_68F4D4EE:				; CODE XREF: sub_68F4D3C0+D5j
					; DATA XREF: .rdata:off_68F5A75Co
		movzx	eax, [ebp+var_39] ; jumptable 68F4D495 case 29
		movzx	edx, ds:byte_68F58980[eax]
		jmp	loc_68F4D445
; ---------------------------------------------------------------------------

loc_68F4D4FE:				; CODE XREF: sub_68F4D3C0+D5j
					; DATA XREF: .rdata:off_68F5A75Co
		mov	[esp+50h+var_50], ebx ;	jumptable 68F4D495 cases 9,10,21
		mov	edx, [ebp+var_20]
		lea	eax, [ebp+var_1C]
		mov	[esp+50h+var_4C], eax
		mov	eax, edi
		call	sub_68F4D310
		test	eax, eax
		jz	short loc_68F4D4AC ; jumptable 68F4D495	default	case

loc_68F4D516:				; CODE XREF: sub_68F4D3C0+178j
					; sub_68F4D3C0+17Aj ...
		add	ebx, 2		; jumptable 68F4D53A default case

loc_68F4D519:				; CODE XREF: sub_68F4D3C0+1DBj
					; sub_68F4D3C0+1E4j ...
		cmp	ebx, esi
		jz	loc_68F4D5F7
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	loc_68F4D5E7
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4D535:				; CODE XREF: sub_68F4D3C0+232j
		cmp	eax, 0Fh	; switch 16 cases
		ja	short loc_68F4D516 ; jumptable 68F4D53A	default	case
		jmp	ds:off_68F5A7C0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4D541:				; CODE XREF: sub_68F4D3C0+D5j
					; DATA XREF: .rdata:off_68F5A75Co
		mov	[esp+50h+var_50], ebx ;	jumptable 68F4D495 case	15
		mov	edx, [ebp+var_20]
		lea	eax, [ebp+var_1C]
		mov	[esp+50h+var_4C], eax
		mov	eax, edi
		call	sub_68F4D310
		test	eax, eax
		jz	loc_68F4D426	; jumptable 68F4D407 default case
					; jumptable 68F4D53A cases 0,1,8
		add	ebx, 2
		mov	eax, 0FFFFFFFFh
		cmp	ebx, esi
		jz	loc_68F4D42D
		cmp	byte ptr [ebx+1], 0
		jnz	loc_68F4D4AC	; jumptable 68F4D495 default case
		cmp	byte ptr [ebx],	3Eh
		jnz	loc_68F4D4AC	; jumptable 68F4D495 default case

loc_68F4D580:				; CODE XREF: sub_68F4D3C0+1EAj
		mov	edx, [ebp+arg_4]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, [ebp+var_1C]
		jmp	loc_68F4D42D
; ---------------------------------------------------------------------------

loc_68F4D590:				; CODE XREF: sub_68F4D3C0+17Aj
					; DATA XREF: .rdata:off_68F5A7C0o
		add	ebx, 2		; jumptable 68F4D53A case 15
		cmp	ebx, esi
		jz	short loc_68F4D5F7
		cmp	byte ptr [ebx+1], 0
		jnz	loc_68F4D519
		cmp	byte ptr [ebx],	3Eh
		jnz	loc_68F4D519
		jmp	short loc_68F4D580
; ---------------------------------------------------------------------------
		align 10h

loc_68F4D5B0:				; CODE XREF: sub_68F4D3C0+17Aj
					; DATA XREF: .rdata:off_68F5A7C0o
		mov	eax, esi	; jumptable 68F4D53A case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4D5DD
		add	ebx, 4
		jmp	loc_68F4D519
; ---------------------------------------------------------------------------

loc_68F4D5C1:				; CODE XREF: sub_68F4D3C0+17Aj
					; DATA XREF: .rdata:off_68F5A7C0o
		mov	eax, esi	; jumptable 68F4D53A case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4D5DD
		add	ebx, 3
		jmp	loc_68F4D519
; ---------------------------------------------------------------------------

loc_68F4D5D2:				; CODE XREF: sub_68F4D3C0+17Aj
					; DATA XREF: .rdata:off_68F5A7C0o
		mov	eax, esi	; jumptable 68F4D53A case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F4D516	; jumptable 68F4D53A default case

loc_68F4D5DD:				; CODE XREF: sub_68F4D3C0+1F7j
					; sub_68F4D3C0+208j
		mov	eax, 0FFFFFFFEh
		jmp	loc_68F4D42D
; ---------------------------------------------------------------------------

loc_68F4D5E7:				; CODE XREF: sub_68F4D3C0+167j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F4D535
; ---------------------------------------------------------------------------

loc_68F4D5F7:				; CODE XREF: sub_68F4D3C0+AEj
					; sub_68F4D3C0+15Bj ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_68F4D42D
sub_68F4D3C0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F4D610
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4D610	proc near		; CODE XREF: .text:68F4D601j
					; DATA XREF: .rdata:68F57C08o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	edx, 0FFFFFFFCh
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		cmp	ebx, esi
		jz	loc_68F4D6CA
		mov	eax, esi
		sub	eax, ebx
		test	al, 1
		jnz	short loc_68F4D683
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4D697

loc_68F4D63C:				; CODE XREF: sub_68F4D610+85j
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4D644:				; CODE XREF: sub_68F4D610+92j
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F4D660 ; jumptable 68F4D649	default	case
		jmp	ds:off_68F5A800[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4D650:				; CODE XREF: sub_68F4D610+39j
					; DATA XREF: .rdata:off_68F5A800o
		mov	eax, esi	; jumptable 68F4D649 case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	short loc_68F4D6CA
		lea	esi, [esi+0]

loc_68F4D660:				; CODE XREF: sub_68F4D610+37j
					; sub_68F4D610+39j ...
		add	ebx, 2		; jumptable 68F4D649 default case

loc_68F4D663:				; CODE XREF: sub_68F4D610+103j
					; sub_68F4D610+18Aj ...
		cmp	ebx, esi
		jz	short loc_68F4D6E1

loc_68F4D667:				; CODE XREF: sub_68F4D610+CFj
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4D6A4
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4D677:				; CODE XREF: sub_68F4D610+9Fj
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F4D660 ; jumptable 68F4D649	default	case
		jmp	ds:off_68F5A82C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4D683:				; CODE XREF: sub_68F4D610+22j
		and	eax, 0FFFFFFFEh
		jz	loc_68F4D7DE
		lea	esi, [ebx+eax]
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jz	short loc_68F4D63C

loc_68F4D697:				; CODE XREF: sub_68F4D610+2Aj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4D644
; ---------------------------------------------------------------------------

loc_68F4D6A4:				; CODE XREF: sub_68F4D610+5Dj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4D677
; ---------------------------------------------------------------------------

loc_68F4D6B1:				; CODE XREF: sub_68F4D610+6Cj
					; DATA XREF: .rdata:off_68F5A82Co
		mov	eax, esi	; jumptable 68F4D67C case 6
		sub	eax, ebx
		cmp	eax, 2
		jg	short loc_68F4D710
		lea	esi, [esi+0]

loc_68F4D6C0:				; CODE XREF: sub_68F4D610+6Cj
					; DATA XREF: .rdata:off_68F5A82Co
		mov	eax, [ebp+arg_C] ; jumptable 68F4D67C cases 0,1,4,8-10
		mov	[eax], ebx
		mov	edx, 6

loc_68F4D6CA:				; CODE XREF: sub_68F4D610+16j
					; sub_68F4D610+4Aj ...
		pop	ebx
		mov	eax, edx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D6D1:				; CODE XREF: sub_68F4D610+6Cj
					; DATA XREF: .rdata:off_68F5A82Co
		mov	eax, esi	; jumptable 68F4D67C case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4D6E1
		add	ebx, 4

loc_68F4D6DD:				; CODE XREF: sub_68F4D610+171j
		cmp	ebx, esi
		jnz	short loc_68F4D667

loc_68F4D6E1:				; CODE XREF: sub_68F4D610+55j
					; sub_68F4D610+C8j
		mov	edx, [ebp+arg_C]
		mov	[edx], ebx

loc_68F4D6E6:				; CODE XREF: sub_68F4D610+EDj
		mov	edx, 6
		jmp	short loc_68F4D6CA
; ---------------------------------------------------------------------------

loc_68F4D6ED:				; CODE XREF: sub_68F4D610+6Cj
					; DATA XREF: .rdata:off_68F5A82Co
		mov	eax, esi	; jumptable 68F4D67C case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F4D660	; jumptable 68F4D649 default case
		mov	edx, [ebp+arg_C]
		mov	[edx], ebx
		jmp	short loc_68F4D6E6
; ---------------------------------------------------------------------------

loc_68F4D6FF:				; CODE XREF: sub_68F4D610+39j
					; DATA XREF: .rdata:off_68F5A800o
		mov	eax, esi	; jumptable 68F4D649 case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4D6CA
		lea	esi, [esi+0]

loc_68F4D710:				; CODE XREF: sub_68F4D610+A8j
		add	ebx, 3
		jmp	loc_68F4D663
; ---------------------------------------------------------------------------

loc_68F4D718:				; CODE XREF: sub_68F4D610+39j
					; DATA XREF: .rdata:off_68F5A800o
		mov	edx, [ebp+arg_C] ; jumptable 68F4D649 case 10
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 7

loc_68F4D725:				; CODE XREF: sub_68F4D610+14Ej
		pop	ebx
		mov	eax, edx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D72C:				; CODE XREF: sub_68F4D610+39j
					; DATA XREF: .rdata:off_68F5A800o
		add	ebx, 2		; jumptable 68F4D649 case 9
		mov	edx, 0FFFFFFFFh
		cmp	ebx, esi
		jz	short loc_68F4D6CA
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jz	loc_68F4D7C7
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah

loc_68F4D752:				; CODE XREF: sub_68F4D610+1BFj
		jz	short loc_68F4D7D1
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx

loc_68F4D759:				; CODE XREF: sub_68F4D610+1C9j
		mov	edx, 7
		jmp	short loc_68F4D725
; ---------------------------------------------------------------------------

loc_68F4D760:				; CODE XREF: sub_68F4D610+39j
					; DATA XREF: .rdata:off_68F5A800o
		mov	eax, [ebp+arg_C] ; jumptable 68F4D649 cases 0,1,8
		xor	edx, edx
		mov	[eax], ebx
		jmp	loc_68F4D6CA
; ---------------------------------------------------------------------------

loc_68F4D76C:				; CODE XREF: sub_68F4D610+39j
					; DATA XREF: .rdata:off_68F5A800o
		mov	eax, esi	; jumptable 68F4D649 case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F4D6CA
		add	ebx, 4
		jmp	loc_68F4D6DD
; ---------------------------------------------------------------------------

loc_68F4D786:				; CODE XREF: sub_68F4D610+39j
					; DATA XREF: .rdata:off_68F5A800o
		add	ebx, 2		; jumptable 68F4D649 case 4
		mov	edx, 0FFFFFFFFh
		cmp	ebx, esi
		jz	loc_68F4D6CA
		cmp	byte ptr [ebx+1], 0
		jnz	loc_68F4D663
		cmp	byte ptr [ebx],	5Dh
		jnz	loc_68F4D663
		add	ebx, 2
		cmp	ebx, esi
		jz	loc_68F4D6CA
		cmp	byte ptr [ebx+1], 0
		jnz	short loc_68F4D7BF
		cmp	byte ptr [ebx],	3Eh
		jz	short loc_68F4D7E8

loc_68F4D7BF:				; CODE XREF: sub_68F4D610+1A8j
		sub	ebx, 2
		jmp	loc_68F4D663
; ---------------------------------------------------------------------------

loc_68F4D7C7:				; CODE XREF: sub_68F4D610+12Ej
		movzx	eax, byte ptr [ebx]
		cmp	byte ptr [edi+eax+4Ch],	0Ah
		jmp	short loc_68F4D752
; ---------------------------------------------------------------------------

loc_68F4D7D1:				; CODE XREF: sub_68F4D610:loc_68F4D752j
		mov	eax, [ebp+arg_C]
		add	ebx, 2
		mov	[eax], ebx
		jmp	loc_68F4D759
; ---------------------------------------------------------------------------

loc_68F4D7DE:				; CODE XREF: sub_68F4D610+76j
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F4D6CA
; ---------------------------------------------------------------------------

loc_68F4D7E8:				; CODE XREF: sub_68F4D610+1ADj
		mov	edx, [ebp+arg_C]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 28h
		jmp	loc_68F4D6CA
sub_68F4D610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4D800	proc near		; CODE XREF: sub_68F4DA70+218p
					; sub_68F4DA70+C8Ep ...

var_39		= byte ptr -39h
var_38		= byte ptr -38h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, esi
		mov	[ebp+var_1C], eax
		mov	eax, 0FFFFFFFFh
		mov	[ebp+var_4], edi
		jz	short loc_68F4D870
		movzx	eax, byte ptr [edx+1]
		test	al, al
		mov	[ebp+var_39], al
		jz	short loc_68F4D850
		movzx	eax, byte ptr [edx]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_39]
		call	sub_68F4CDA0
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4D869 ; jumptable 68F4D845	default	case

loc_68F4D845:				; CODE XREF: sub_68F4D800+67j
		jmp	ds:off_68F5A858[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4D850:				; CODE XREF: sub_68F4D800+29j
		movzx	edx, byte ptr [edx]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]
		sub	eax, 5
		cmp	eax, 18h
		jbe	short loc_68F4D845

loc_68F4D869:				; CODE XREF: sub_68F4D800+43j
					; sub_68F4D800:loc_68F4D845j ...
		mov	edx, [ebp+arg_4] ; jumptable 68F4D845 default case
		mov	[edx], ebx

loc_68F4D86E:				; CODE XREF: sub_68F4D800+FBj
					; sub_68F4D800+11Fj ...
		xor	eax, eax

loc_68F4D870:				; CODE XREF: sub_68F4D800+1Ej
					; sub_68F4D800:loc_68F4D8F0j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4D87D:				; CODE XREF: sub_68F4D800:loc_68F4D845j
					; DATA XREF: .rdata:off_68F5A858o
		movzx	eax, [ebp+var_39] ; jumptable 68F4D845 case 29
		movzx	edx, ds:byte_68F58380[eax]

loc_68F4D888:				; CODE XREF: sub_68F4D800+1C2j
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_38]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F4D869 ; jumptable 68F4D845	default	case

loc_68F4D8AC:				; CODE XREF: sub_68F4D800:loc_68F4D845j
					; sub_68F4D800+DFj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4D845 cases 22,24
					; jumptable 68F4D8DF cases 22,24-27
		cmp	ebx, esi
		jz	loc_68F4D9D9
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		mov	[ebp+var_39], al
		jnz	loc_68F4D950
		movzx	edx, byte ptr [ebx]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4D8D7:				; CODE XREF: sub_68F4D800+162j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4D8F6 ; jumptable 68F4D8DF	default	case
		jmp	ds:off_68F5A8BC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4D8E6:				; CODE XREF: sub_68F4D800:loc_68F4D845j
					; sub_68F4D800+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4D845 case 7
					; jumptable 68F4D8DF case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3

loc_68F4D8F0:				; CODE XREF: sub_68F4D800+108j
		jle	loc_68F4D870

loc_68F4D8F6:				; CODE XREF: sub_68F4D800+DDj
					; sub_68F4D800+DFj
					; DATA XREF: ...
		mov	eax, [ebp+arg_4] ; jumptable 68F4D8DF default case
		mov	[eax], ebx
		jmp	loc_68F4D86E
; ---------------------------------------------------------------------------

loc_68F4D900:				; CODE XREF: sub_68F4D800:loc_68F4D845j
					; sub_68F4D800+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4D845 case 5
					; jumptable 68F4D8DF case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jmp	short loc_68F4D8F0
; ---------------------------------------------------------------------------

loc_68F4D90A:				; CODE XREF: sub_68F4D800:loc_68F4D845j
					; sub_68F4D800+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4D845 case 6
					; jumptable 68F4D8DF case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F4D870
		mov	edx, [ebp+arg_4]
		mov	[edx], ebx
		jmp	loc_68F4D86E
; ---------------------------------------------------------------------------

loc_68F4D924:				; CODE XREF: sub_68F4D800:loc_68F4D845j
					; DATA XREF: .rdata:off_68F5A858o
		lea	edi, [ebx+2]	; jumptable 68F4D845 case 19
		cmp	edi, esi
		jz	loc_68F4D9D9
		movzx	eax, byte ptr [edi+1]
		test	al, al
		jnz	short loc_68F4D967
		movzx	eax, byte ptr [ebx+2]
		cmp	al, 78h
		jz	loc_68F4D9E3
		mov	edx, [ebp+var_1C]
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]
		jmp	short loc_68F4D973
; ---------------------------------------------------------------------------

loc_68F4D950:				; CODE XREF: sub_68F4D800+C0j
		movzx	eax, byte ptr [ebx]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_39]
		call	sub_68F4CDA0
		jmp	loc_68F4D8D7
; ---------------------------------------------------------------------------

loc_68F4D967:				; CODE XREF: sub_68F4D800+135j
		movsx	edx, byte ptr [ebx+2]
		movsx	eax, al
		call	sub_68F4CDA0

loc_68F4D973:				; CODE XREF: sub_68F4D800+14Ej
		cmp	eax, 19h
		jz	short loc_68F4D99B

loc_68F4D978:				; CODE XREF: sub_68F4D800+199j
					; sub_68F4D800+204j
		mov	eax, [ebp+arg_4]
		mov	[eax], edi
		jmp	loc_68F4D86E
; ---------------------------------------------------------------------------

loc_68F4D982:				; CODE XREF: sub_68F4D800+1A8j
		movzx	eax, byte ptr [edi]
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4D98D:				; CODE XREF: sub_68F4D800+1B5j
		cmp	eax, 12h
		jz	loc_68F4DA50
		cmp	eax, 19h
		jnz	short loc_68F4D978

loc_68F4D99B:				; CODE XREF: sub_68F4D800+176j
		add	edi, 2
		cmp	edi, esi
		jz	short loc_68F4D9D9
		movzx	eax, byte ptr [edi+1]
		test	al, al
		jz	short loc_68F4D982
		movsx	edx, byte ptr [edi]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4D98D
; ---------------------------------------------------------------------------

loc_68F4D9B7:				; CODE XREF: sub_68F4D800+DFj
					; DATA XREF: .rdata:off_68F5A8BCo
		movzx	eax, [ebp+var_39] ; jumptable 68F4D8DF case 29
		movzx	edx, ds:byte_68F58980[eax]
		jmp	loc_68F4D888
; ---------------------------------------------------------------------------

loc_68F4D9C7:				; CODE XREF: sub_68F4D800+DFj
					; DATA XREF: .rdata:off_68F5A8BCo
		mov	edx, [ebp+arg_4] ; jumptable 68F4D8DF case 18
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 9
		jmp	loc_68F4D870
; ---------------------------------------------------------------------------

loc_68F4D9D9:				; CODE XREF: sub_68F4D800+B1j
					; sub_68F4D800+129j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_68F4D870
; ---------------------------------------------------------------------------

loc_68F4D9E3:				; CODE XREF: sub_68F4D800+13Dj
		lea	edi, [ebx+4]
		cmp	edi, esi
		jz	short loc_68F4D9D9
		movzx	eax, byte ptr [edi+1]
		test	al, al
		jnz	short loc_68F4DA42
		movzx	eax, byte ptr [ebx+4]
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4D9FE:				; CODE XREF: sub_68F4D800+229j
					; sub_68F4D800+24Ej
		sub	eax, 18h
		cmp	eax, 1
		ja	loc_68F4D978
		add	edi, 2
		cmp	edi, esi
		jz	short loc_68F4D9D9
		movzx	eax, byte ptr [edi+1]
		test	al, al
		jnz	short loc_68F4DA35
		movzx	eax, byte ptr [edi]
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4DA24:				; CODE XREF: sub_68F4D800+240j
		cmp	eax, 12h
		jz	short loc_68F4DA50
		jge	short loc_68F4D9FE
		mov	eax, [ebp+arg_4]
		mov	[eax], edi
		jmp	loc_68F4D86E
; ---------------------------------------------------------------------------

loc_68F4DA35:				; CODE XREF: sub_68F4D800+217j
		movsx	edx, byte ptr [edi]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4DA24
; ---------------------------------------------------------------------------

loc_68F4DA42:				; CODE XREF: sub_68F4D800+1F0j
		movsx	edx, byte ptr [ebx+4]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4D9FE
; ---------------------------------------------------------------------------

loc_68F4DA50:				; CODE XREF: sub_68F4D800+190j
					; sub_68F4D800+227j
		mov	edx, [ebp+arg_4]
		lea	eax, [edi+2]
		mov	[edx], eax
		mov	eax, 0Ah
		jmp	loc_68F4D870
sub_68F4D800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4DA70	proc near		; DATA XREF: .rdata:68F57C04o
					; .rdata:68F58DA4o ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4A		= byte ptr -4Ah
var_49		= byte ptr -49h
var_48		= byte ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	edx, 0FFFFFFFCh
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		cmp	ebx, esi
		jz	loc_68F4DB30
		mov	eax, esi
		sub	eax, ebx
		test	al, 1
		jnz	short loc_68F4DAB3
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4DAC7

loc_68F4DA9F:				; CODE XREF: sub_68F4DA70+55j
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F4DAE0 ; jumptable 68F4DAAC	default	case

loc_68F4DAAC:				; CODE XREF: sub_68F4DA70+65j
		jmp	ds:off_68F5A928[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4DAB3:				; CODE XREF: sub_68F4DA70+25j
		and	eax, 0FFFFFFFEh
		jz	loc_68F4E168
		lea	esi, [ebx+eax]
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jz	short loc_68F4DA9F

loc_68F4DAC7:				; CODE XREF: sub_68F4DA70+2Dj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jbe	short loc_68F4DAAC
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F4DAE0:				; CODE XREF: sub_68F4DA70+3Aj
					; sub_68F4DA70+8Ej ...
		add	ebx, 2		; jumptable 68F4DAAC default case

loc_68F4DAE3:				; CODE XREF: sub_68F4DA70+11Cj
					; sub_68F4DA70+133j ...
		cmp	ebx, esi
		jz	loc_68F4DB67
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4DB07
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4DAFB:				; CODE XREF: sub_68F4DA70+A2j
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F4DAE0 ; jumptable 68F4DAAC	default	case
		jmp	ds:off_68F5A954[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4DB07:				; CODE XREF: sub_68F4DA70+81j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4DAFB
; ---------------------------------------------------------------------------

loc_68F4DB14:				; CODE XREF: sub_68F4DA70+90j
					; DATA XREF: .rdata:off_68F5A954o
		mov	eax, esi	; jumptable 68F4DB00 case 6
		sub	eax, ebx
		cmp	eax, 2
		jg	loc_68F4DBC0
		mov	ecx, [ebp+arg_C]
		mov	edx, 6
		mov	[ecx], ebx
		nop
		lea	esi, [esi+0]

loc_68F4DB30:				; CODE XREF: sub_68F4DA70+19j
					; sub_68F4DA70+EAj ...
		add	esp, 5Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4DB3A:				; CODE XREF: sub_68F4DA70+90j
					; DATA XREF: .rdata:off_68F5A954o
		mov	eax, esi	; jumptable 68F4DB00 case 7
		sub	eax, ebx
		cmp	eax, 3
		jg	short loc_68F4DBA0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4DB50:				; CODE XREF: sub_68F4DA70+90j
					; sub_68F4DA70+108j ...
		mov	eax, [ebp+arg_C] ; jumptable 68F4DB00 cases 0-3,8-10
		mov	[eax], ebx
		mov	edx, 6
		jmp	short loc_68F4DB30
; ---------------------------------------------------------------------------

loc_68F4DB5C:				; CODE XREF: sub_68F4DA70+90j
					; DATA XREF: .rdata:off_68F5A954o
		mov	eax, esi	; jumptable 68F4DB00 case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F4DAE0	; jumptable 68F4DAAC default case

loc_68F4DB67:				; CODE XREF: sub_68F4DA70+75j
		mov	edx, [ebp+arg_C]
		mov	[edx], ebx
		mov	edx, 6
		jmp	short loc_68F4DB30
; ---------------------------------------------------------------------------

loc_68F4DB73:				; CODE XREF: sub_68F4DA70+90j
					; DATA XREF: .rdata:off_68F5A954o
		lea	eax, [ebx+2]	; jumptable 68F4DB00 case 4
		cmp	eax, esi
		jz	short loc_68F4DB50 ; jumptable 68F4DB00	cases 0-3,8-10
		cmp	byte ptr [ebx+3], 0
		jnz	short loc_68F4DB8A
		cmp	byte ptr [ebx+2], 5Dh
		jz	loc_68F4DCD3

loc_68F4DB8A:				; CODE XREF: sub_68F4DA70+10Ej
					; sub_68F4DA70+272j ...
		mov	ebx, eax
		jmp	loc_68F4DAE3
; ---------------------------------------------------------------------------

loc_68F4DB91:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		mov	eax, esi	; jumptable 68F4DAAC case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4DB30
		nop

loc_68F4DBA0:				; CODE XREF: sub_68F4DA70+D1j
		add	ebx, 4
		jmp	loc_68F4DAE3
; ---------------------------------------------------------------------------

loc_68F4DBA8:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		mov	eax, esi	; jumptable 68F4DAAC case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F4DB30
		lea	esi, [esi+0]

loc_68F4DBC0:				; CODE XREF: sub_68F4DA70+ABj
		add	ebx, 3
		jmp	loc_68F4DAE3
; ---------------------------------------------------------------------------

loc_68F4DBC8:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		mov	edx, [ebp+arg_C] ; jumptable 68F4DAAC case 10
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 7
		jmp	loc_68F4DB30
; ---------------------------------------------------------------------------

loc_68F4DBDA:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		add	ebx, 2		; jumptable 68F4DAAC case 9
		mov	edx, 0FFFFFFFDh
		cmp	ebx, esi
		jz	loc_68F4DB30
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	loc_68F4E143
		movzx	eax, byte ptr [ebx]
		cmp	byte ptr [edi+eax+4Ch],	0Ah

loc_68F4DBFE:				; CODE XREF: sub_68F4DA70+6E1j
		jz	loc_68F4DD00
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx

loc_68F4DC09:				; CODE XREF: sub_68F4DA70+298j
		mov	edx, 7
		jmp	loc_68F4DB30
; ---------------------------------------------------------------------------

loc_68F4DC13:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		mov	eax, [ebp+arg_C] ; jumptable 68F4DAAC cases 0,1,8
		xor	edx, edx
		mov	[eax], ebx
		jmp	loc_68F4DB30
; ---------------------------------------------------------------------------

loc_68F4DC1F:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		mov	eax, esi	; jumptable 68F4DAAC case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jg	loc_68F4DAE0	; jumptable 68F4DAAC default case
		jmp	loc_68F4DB30
; ---------------------------------------------------------------------------

loc_68F4DC34:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		add	ebx, 2		; jumptable 68F4DAAC case 4
		mov	edx, 0FFFFFFFBh
		cmp	ebx, esi
		jz	loc_68F4DB30
		cmp	byte ptr [ebx+1], 0
		jnz	loc_68F4DAE3
		cmp	byte ptr [ebx],	5Dh
		jnz	loc_68F4DAE3
		add	ebx, 2
		cmp	ebx, esi
		jz	loc_68F4DB30
		cmp	byte ptr [ebx+1], 0
		jnz	short loc_68F4DC71
		cmp	byte ptr [ebx],	3Eh
		jz	loc_68F4DEBA

loc_68F4DC71:				; CODE XREF: sub_68F4DA70+1F6j
		sub	ebx, 2
		jmp	loc_68F4DAE3
; ---------------------------------------------------------------------------

loc_68F4DC79:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		mov	ecx, [ebp+arg_C] ; jumptable 68F4DAAC case 3
		lea	edx, [ebx+2]
		mov	eax, edi
		mov	[esp+68h+var_68], esi
		mov	[esp+68h+var_64], ecx
		call	sub_68F4D800

loc_68F4DC8D:				; CODE XREF: sub_68F4DA70+237j
					; sub_68F4DA70+342j ...
		mov	edx, eax

loc_68F4DC8F:				; CODE XREF: sub_68F4DA70+2A9j
					; sub_68F4DA70+330j ...
		add	esp, 5Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4DC99:				; CODE XREF: sub_68F4DA70:loc_68F4DAACj
					; DATA XREF: .rdata:off_68F5A928o
		lea	eax, [ebx+2]	; jumptable 68F4DAAC case 2
		mov	[ebp+var_20], eax
		mov	eax, 0FFFFFFFFh
		cmp	[ebp+var_20], esi
		jz	short loc_68F4DC8D
		mov	edx, [ebp+var_20]
		movzx	edx, byte ptr [edx+1]
		test	dl, dl
		mov	[ebp+var_4A], dl
		jnz	loc_68F4E156
		movzx	eax, byte ptr [ebx+2]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4DCC4:				; CODE XREF: sub_68F4DA70+6F3j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4DD0D ; jumptable 68F4DCCC	default	case
		jmp	ds:off_68F5A980[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4DCD3:				; CODE XREF: sub_68F4DA70+114j
		lea	edx, [ebx+4]
		cmp	edx, esi
		jz	loc_68F4DB50	; jumptable 68F4DB00 cases 0-3,8-10
		cmp	byte ptr [ebx+5], 0
		jnz	loc_68F4DB8A
		cmp	byte ptr [ebx+4], 3Eh
		jnz	loc_68F4DB8A
		mov	ecx, [ebp+arg_C]
		mov	[ecx], edx
		xor	edx, edx
		jmp	loc_68F4DB30
; ---------------------------------------------------------------------------
		align 10h

loc_68F4DD00:				; CODE XREF: sub_68F4DA70:loc_68F4DBFEj
		mov	eax, [ebp+arg_C]
		add	ebx, 2
		mov	[eax], ebx
		jmp	loc_68F4DC09
; ---------------------------------------------------------------------------

loc_68F4DD0D:				; CODE XREF: sub_68F4DA70+25Aj
					; sub_68F4DA70+25Cj
					; DATA XREF: ...
		mov	edx, [ebp+var_20] ; jumptable 68F4DCCC default case
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DD1E:				; CODE XREF: sub_68F4DA70+25Cj
					; sub_68F4DA70+322j
					; DATA XREF: ...
		add	[ebp+var_20], 2	; jumptable 68F4DCCC cases 22,24
		mov	[ebp+var_24], 0

loc_68F4DD29:				; CODE XREF: sub_68F4DA70+468j
		cmp	[ebp+var_20], esi
		jz	loc_68F4E2CD
		mov	edx, [ebp+var_20]
		movzx	edx, byte ptr [edx+1]
		test	dl, dl
		mov	[ebp+var_4A], dl
		jnz	loc_68F4E172
		mov	ecx, [ebp+var_20]
		movzx	ebx, byte ptr [ecx]
		movzx	eax, bl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4DD52:				; CODE XREF: sub_68F4DA70+714j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4E078	; jumptable 68F4DD5E default case
		jmp	ds:off_68F5A9E4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4DD65:				; CODE XREF: sub_68F4DA70+25Cj
					; DATA XREF: .rdata:off_68F5A980o
		movzx	eax, [ebp+var_4A] ; jumptable 68F4DCCC case 29
		movzx	edx, ds:byte_68F58380[eax]
		mov	eax, [ebp+var_20]
		movzx	ecx, byte ptr [eax]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	short loc_68F4DD1E ; jumptable 68F4DCCC	cases 22,24
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DDA5:				; CODE XREF: sub_68F4DA70+25Cj
					; DATA XREF: .rdata:off_68F5A980o
		mov	eax, [ebp+var_20] ; jumptable 68F4DCCC case 6
		sub	esi, eax
		cmp	esi, 2
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DDC9:				; CODE XREF: sub_68F4DA70+25Cj
					; DATA XREF: .rdata:off_68F5A980o
		mov	edx, [ebp+var_20] ; jumptable 68F4DCCC case 5
		mov	eax, 0FFFFFFFEh
		sub	esi, edx
		dec	esi
		jle	loc_68F4DC8D
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DDEB:				; CODE XREF: sub_68F4DA70+25Cj
					; DATA XREF: .rdata:off_68F5A980o
		mov	ebx, [ebp+var_20] ; jumptable 68F4DCCC case 17
		mov	eax, 0FFFFFFFFh
		add	ebx, 2
		cmp	ebx, esi
		jz	loc_68F4DC8D
		movzx	edx, byte ptr [ebx+1]
		test	dl, dl
		mov	[ebp+var_49], dl
		jnz	loc_68F4E189
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [ecx+2]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4DE19:				; CODE XREF: sub_68F4DA70+729j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4DEC6	; jumptable 68F4DE25 default case
		jmp	ds:off_68F5AA48[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4DE2C:				; CODE XREF: sub_68F4DA70+25Cj
					; DATA XREF: .rdata:off_68F5A980o
		add	[ebp+var_20], 2	; jumptable 68F4DCCC case 16
		mov	eax, 0FFFFFFFFh
		cmp	[ebp+var_20], esi
		jz	loc_68F4DC8D
		mov	edx, [ebp+var_20]
		movzx	eax, byte ptr [edx+1]
		test	al, al
		jnz	loc_68F4E19E
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4DE55:				; CODE XREF: sub_68F4DA70+73Cj
		cmp	eax, 14h
		jz	loc_68F4E1B1
		cmp	eax, 1Bh
		jz	loc_68F4E1FC
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DE78:				; CODE XREF: sub_68F4DA70+25Cj
					; DATA XREF: .rdata:off_68F5A980o
		mov	edx, [ebp+var_20] ; jumptable 68F4DCCC case 15
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_68], esi
		add	edx, 2
		mov	[esp+68h+var_64], eax
		mov	eax, edi
		call	sub_68F4D3C0
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DE96:				; CODE XREF: sub_68F4DA70+25Cj
					; DATA XREF: .rdata:off_68F5A980o
		mov	eax, [ebp+var_20] ; jumptable 68F4DCCC case 7
		sub	esi, eax
		cmp	esi, 3
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DEBA:				; CODE XREF: sub_68F4DA70+1FBj
		mov	ecx, [ebp+arg_C]
		xor	edx, edx
		mov	[ecx], ebx
		jmp	loc_68F4DB30
; ---------------------------------------------------------------------------

loc_68F4DEC6:				; CODE XREF: sub_68F4DA70+3AFj
					; sub_68F4DA70+3B5j
					; DATA XREF: ...
		mov	ecx, [ebp+arg_C] ; jumptable 68F4DE25 default case
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DED4:				; CODE XREF: sub_68F4DA70+2EEj
					; sub_68F4DA70+4E2j ...
		add	[ebp+var_20], 2	; jumptable 68F4DD5E cases 22,24-27
					; jumptable 68F4DFB0 cases 22,24
		jmp	loc_68F4DD29
; ---------------------------------------------------------------------------

loc_68F4DEDD:				; CODE XREF: sub_68F4DA70+2EEj
					; sub_68F4DA70+580j
					; DATA XREF: ...
		add	[ebp+var_20], 2	; jumptable 68F4DD5E case 17
					; jumptable 68F4DFF0 case 17
		mov	eax, 0FFFFFFFFh
		cmp	[ebp+var_20], esi
		jz	loc_68F4DC8D
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax+1], 0
		jnz	short loc_68F4DF01
		cmp	byte ptr [eax],	3Eh
		jz	loc_68F4E31A

loc_68F4DF01:				; CODE XREF: sub_68F4DA70+486j
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DF12:				; CODE XREF: sub_68F4DA70+2EEj
					; sub_68F4DA70+580j
					; DATA XREF: ...
		mov	eax, [ebp+var_20] ; jumptable 68F4DD5E case 11
					; jumptable 68F4DFF0 case 11
		mov	ecx, [ebp+arg_C]
		add	eax, 2
		mov	[ecx], eax
		mov	eax, 2
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DF29:				; CODE XREF: sub_68F4DA70+2EEj
					; DATA XREF: .rdata:off_68F5A9E4o
		movzx	eax, [ebp+var_4A] ; jumptable 68F4DD5E case 29
		mov	ecx, ebx
		and	ecx, 1Fh
		movzx	edx, ds:byte_68F58980[eax]
		mov	al, bl
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	short loc_68F4DED4 ; jumptable 68F4DD5E	cases 22,24-27
					; jumptable 68F4DFB0 cases 22,24
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4DF65:				; CODE XREF: sub_68F4DA70+2EEj
					; DATA XREF: .rdata:off_68F5A9E4o
		mov	eax, [ebp+var_24] ; jumptable 68F4DD5E case 23
		test	eax, eax
		jnz	loc_68F4E3E7
		add	[ebp+var_20], 2
		mov	[ebp+var_24], 1
		cmp	[ebp+var_20], esi
		jz	loc_68F4E3DB
		mov	edx, [ebp+var_20]
		movzx	edx, byte ptr [edx+1]
		test	dl, dl
		mov	[ebp+var_4A], dl
		jnz	loc_68F4E21A
		mov	ecx, [ebp+var_20]
		movzx	ebx, byte ptr [ecx]
		movzx	eax, bl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4DFA4:				; CODE XREF: sub_68F4DA70+7BCj
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4E481	; jumptable 68F4DFB0 default case
		jmp	ds:off_68F5AAAC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4DFB7:				; CODE XREF: sub_68F4DA70+2EEj
					; sub_68F4DA70+580j
					; DATA XREF: ...
		add	[ebp+var_20], 2	; jumptable 68F4DD5E cases 9,10,21
					; jumptable 68F4DFF0 cases 9,10,21
		cmp	[ebp+var_20], esi
		jz	loc_68F4E492
		mov	eax, [ebp+var_20]
		movzx	eax, byte ptr [eax+1]
		test	al, al
		mov	[ebp+var_4A], al
		jnz	loc_68F4E231
		mov	edx, [ebp+var_20]
		movzx	ebx, byte ptr [edx]
		movzx	eax, bl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4DFE4:				; CODE XREF: sub_68F4DA70+7D3j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4E4C0	; jumptable 68F4DFF0 default case
		jmp	ds:off_68F5AB10[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4DFF7:				; CODE XREF: sub_68F4DA70+3B5j
					; sub_68F4DA70+5BBj ...
		add	ebx, 2		; jumptable 68F4DE25 cases 22,24
					; jumptable 68F4E02B cases 22-27
		cmp	ebx, esi
		jz	loc_68F4E475
		movzx	edx, byte ptr [ebx+1]
		test	dl, dl
		mov	[ebp+var_49], dl
		jnz	loc_68F4E45E
		movzx	ecx, byte ptr [ebx]
		movzx	eax, cl
		mov	[ebp+var_48], cl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4E01F:				; CODE XREF: sub_68F4DA70+A00j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4E450	; jumptable 68F4E02B default case
		jmp	ds:off_68F5AB74[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4E032:				; CODE XREF: sub_68F4DA70+2EEj
					; DATA XREF: .rdata:off_68F5A9E4o
		mov	eax, [ebp+var_20] ; jumptable 68F4DD5E case 7
		sub	esi, eax
		cmp	esi, 3
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E056:				; CODE XREF: sub_68F4DA70+2EEj
					; DATA XREF: .rdata:off_68F5A9E4o
		mov	eax, [ebp+var_20] ; jumptable 68F4DD5E case 5
		sub	esi, eax
		dec	esi
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E078:				; CODE XREF: sub_68F4DA70+2E8j
					; sub_68F4DA70+2EEj
					; DATA XREF: ...
		mov	eax, [ebp+var_20] ; jumptable 68F4DD5E default case
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E089:				; CODE XREF: sub_68F4DA70+2EEj
					; DATA XREF: .rdata:off_68F5A9E4o
		mov	eax, [ebp+var_20] ; jumptable 68F4DD5E case 6
		sub	esi, eax
		cmp	esi, 2
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E0AD:				; CODE XREF: sub_68F4DA70+3B5j
					; DATA XREF: .rdata:off_68F5AA48o
		sub	esi, ebx	; jumptable 68F4DE25 case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E0CB:				; CODE XREF: sub_68F4DA70+3B5j
					; DATA XREF: .rdata:off_68F5AA48o
		sub	esi, ebx	; jumptable 68F4DE25 case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F4DC8D
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E0E9:				; CODE XREF: sub_68F4DA70+3B5j
					; DATA XREF: .rdata:off_68F5AA48o
		sub	esi, ebx	; jumptable 68F4DE25 case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jle	loc_68F4DC8D
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E105:				; CODE XREF: sub_68F4DA70+3B5j
					; DATA XREF: .rdata:off_68F5AA48o
		movzx	eax, [ebp+var_49] ; jumptable 68F4DE25 case 29
		movzx	ecx, byte ptr [ebx]
		movzx	edx, ds:byte_68F58380[eax]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F4DFF7	; jumptable 68F4DE25 cases 22,24
					; jumptable 68F4E02B cases 22-27
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E143:				; CODE XREF: sub_68F4DA70+180j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jmp	loc_68F4DBFE
; ---------------------------------------------------------------------------

loc_68F4E156:				; CODE XREF: sub_68F4DA70+245j
		movsx	edx, byte ptr [ebx+2]
		movsx	eax, [ebp+var_4A]
		call	sub_68F4CDA0
		jmp	loc_68F4DCC4
; ---------------------------------------------------------------------------

loc_68F4E168:				; CODE XREF: sub_68F4DA70+46j
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F4DB30
; ---------------------------------------------------------------------------

loc_68F4E172:				; CODE XREF: sub_68F4DA70+2CEj
		mov	eax, [ebp+var_20]
		movzx	ebx, byte ptr [eax]
		movsx	eax, [ebp+var_4A]
		movsx	edx, bl
		call	sub_68F4CDA0
		jmp	loc_68F4DD52
; ---------------------------------------------------------------------------

loc_68F4E189:				; CODE XREF: sub_68F4DA70+397j
		mov	eax, [ebp+var_20]
		movsx	edx, byte ptr [eax+2]
		movsx	eax, [ebp+var_49]
		call	sub_68F4CDA0
		jmp	loc_68F4DE19
; ---------------------------------------------------------------------------

loc_68F4E19E:				; CODE XREF: sub_68F4DA70+3D7j
		mov	ecx, [ebp+var_20]
		movsx	eax, al
		movsx	edx, byte ptr [ecx]
		call	sub_68F4CDA0
		jmp	loc_68F4DE55
; ---------------------------------------------------------------------------

loc_68F4E1B1:				; CODE XREF: sub_68F4DA70+3E8j
		mov	edx, [ebp+var_20]
		mov	eax, 0FFFFFFFFh
		add	edx, 2
		sub	esi, edx
		cmp	esi, 0Bh
		jle	loc_68F4DC8D
		xor	ecx, ecx

loc_68F4E1C9:				; CODE XREF: sub_68F4DA70+779j
		cmp	byte ptr [edx+1], 0
		jnz	loc_68F4E2BF
		movzx	eax, ds:byte_68F5A920[ecx]
		cmp	[edx], al
		jnz	loc_68F4E2BF
		inc	ecx
		add	edx, 2
		cmp	ecx, 5
		jle	short loc_68F4E1C9
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		mov	eax, 8
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E1FC:				; CODE XREF: sub_68F4DA70+3F1j
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_68], esi
		add	edx, 2
		mov	[esp+68h+var_64], eax
		mov	eax, edi
		call	sub_68F4D220
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E21A:				; CODE XREF: sub_68F4DA70+520j
		mov	eax, [ebp+var_20]
		movzx	ebx, byte ptr [eax]
		movsx	eax, [ebp+var_4A]
		movsx	edx, bl
		call	sub_68F4CDA0
		jmp	loc_68F4DFA4
; ---------------------------------------------------------------------------

loc_68F4E231:				; CODE XREF: sub_68F4DA70+560j
		movsx	eax, [ebp+var_4A]
		mov	ecx, [ebp+var_20]
		movzx	ebx, byte ptr [ecx]
		movsx	edx, bl
		call	sub_68F4CDA0
		jmp	loc_68F4DFE4
; ---------------------------------------------------------------------------

loc_68F4E248:				; CODE XREF: sub_68F4DA70+7F9j
		cmp	eax, 15h
		jnz	short loc_68F4E270

loc_68F4E24D:				; CODE XREF: sub_68F4DA70+5BBj
					; sub_68F4DA70+7FEj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4E02B cases 9,10,21
		cmp	ebx, esi
		jz	short loc_68F4E2B3
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4E2A6
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4E264:				; CODE XREF: sub_68F4DA70+841j
		cmp	eax, 0Bh
		jz	short loc_68F4E292
		jg	short loc_68F4E248
		cmp	eax, 9
		jge	short loc_68F4E24D ; jumptable 68F4E02B	cases 9,10,21

loc_68F4E270:				; CODE XREF: sub_68F4DA70+7DBj
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	[ecx], ebx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E27E:				; CODE XREF: sub_68F4DA70+5BBj
					; DATA XREF: .rdata:off_68F5AB74o
		mov	edx, [ebp+arg_C] ; jumptable 68F4E02B case 11
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 5
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E292:				; CODE XREF: sub_68F4DA70+7F7j
		mov	edx, [ebp+arg_C]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 5
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E2A6:				; CODE XREF: sub_68F4DA70+7EAj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4E264
; ---------------------------------------------------------------------------

loc_68F4E2B3:				; CODE XREF: sub_68F4DA70+7E2j
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E2BF:				; CODE XREF: sub_68F4DA70+75Dj
					; sub_68F4DA70+76Cj
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	[ecx], edx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E2CD:				; CODE XREF: sub_68F4DA70+2BCj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E2D9:				; CODE XREF: sub_68F4DA70+5BBj
					; DATA XREF: .rdata:off_68F5AB74o
		movzx	eax, [ebp+var_49] ; jumptable 68F4E02B case 29
		movzx	ecx, [ebp+var_48]
		movzx	edx, ds:byte_68F58980[eax]
		and	ecx, 1Fh
		movzx	eax, [ebp+var_48]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F4DFF7	; jumptable 68F4DE25 cases 22,24
					; jumptable 68F4E02B cases 22-27
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E31A:				; CODE XREF: sub_68F4DA70+48Bj
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+arg_C]
		add	eax, 2
		mov	[edx], eax
		mov	eax, 4
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E331:				; CODE XREF: sub_68F4DA70+540j
					; DATA XREF: .rdata:off_68F5AAACo
		movzx	eax, [ebp+var_4A] ; jumptable 68F4DFB0 case 29
		mov	ecx, ebx
		and	ecx, 1Fh
		movzx	edx, ds:byte_68F58380[eax]
		mov	al, bl
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F4DED4	; jumptable 68F4DD5E cases 22,24-27
					; jumptable 68F4DFB0 cases 22,24
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E371:				; CODE XREF: sub_68F4DA70+540j
					; DATA XREF: .rdata:off_68F5AAACo
		mov	ecx, [ebp+var_20] ; jumptable 68F4DFB0 case 7
		mov	eax, 0FFFFFFFEh
		sub	esi, ecx
		cmp	esi, 3
		jle	loc_68F4DC8D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E395:				; CODE XREF: sub_68F4DA70+540j
					; DATA XREF: .rdata:off_68F5AAACo
		mov	ebx, [ebp+var_20] ; jumptable 68F4DFB0 case 6
		mov	eax, 0FFFFFFFEh
		sub	esi, ebx
		cmp	esi, 2
		jle	loc_68F4DC8D
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E3B9:				; CODE XREF: sub_68F4DA70+540j
					; DATA XREF: .rdata:off_68F5AAACo
		mov	edi, [ebp+var_20] ; jumptable 68F4DFB0 case 5
		mov	eax, 0FFFFFFFEh
		sub	esi, edi
		dec	esi
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E3DB:				; CODE XREF: sub_68F4DA70+50Ej
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E3E7:				; CODE XREF: sub_68F4DA70+4FAj
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E3F8:				; CODE XREF: sub_68F4DA70+5BBj
					; DATA XREF: .rdata:off_68F5AB74o
		sub	esi, ebx	; jumptable 68F4E02B case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3
		jle	loc_68F4DC8D
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E416:				; CODE XREF: sub_68F4DA70+5BBj
					; DATA XREF: .rdata:off_68F5AB74o
		sub	esi, ebx	; jumptable 68F4E02B case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F4DC8D
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E434:				; CODE XREF: sub_68F4DA70+5BBj
					; DATA XREF: .rdata:off_68F5AB74o
		sub	esi, ebx	; jumptable 68F4E02B case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E450:				; CODE XREF: sub_68F4DA70+5B5j
					; sub_68F4DA70+5BBj
					; DATA XREF: ...
		mov	ecx, [ebp+arg_C] ; jumptable 68F4E02B default case
		xor	eax, eax
		mov	[ecx], ebx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E45E:				; CODE XREF: sub_68F4DA70+59Bj
		movzx	eax, byte ptr [ebx]
		movsx	edx, al
		mov	[ebp+var_48], al
		movsx	eax, [ebp+var_49]
		call	sub_68F4CDA0
		jmp	loc_68F4E01F
; ---------------------------------------------------------------------------

loc_68F4E475:				; CODE XREF: sub_68F4DA70+58Cj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E481:				; CODE XREF: sub_68F4DA70+53Aj
					; sub_68F4DA70+540j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4DFB0 default case
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E492:				; CODE XREF: sub_68F4DA70+54Ej
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E49E:				; CODE XREF: sub_68F4DA70+580j
					; DATA XREF: .rdata:off_68F5AB10o
		mov	edx, [ebp+var_20] ; jumptable 68F4DFF0 case 5
		mov	eax, 0FFFFFFFEh
		sub	esi, edx
		dec	esi
		jle	loc_68F4DC8D
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E4C0:				; CODE XREF: sub_68F4DA70+57Aj
					; sub_68F4DA70+580j
					; DATA XREF: ...
		mov	edx, [ebp+var_20] ; jumptable 68F4DFF0 default case
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E4D1:				; CODE XREF: sub_68F4DA70+580j
					; DATA XREF: .rdata:off_68F5AB10o
		movzx	eax, [ebp+var_4A] ; jumptable 68F4DFF0 case 29
		mov	ecx, ebx
		and	ecx, 1Fh
		movzx	edx, ds:byte_68F58380[eax]
		mov	al, bl
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F4E53C

loc_68F4E4FC:				; CODE XREF: sub_68F4DA70+580j
					; DATA XREF: .rdata:off_68F5AB10o
		add	[ebp+var_20], 2	; jumptable 68F4DFF0 cases 22,24
		mov	[ebp+var_28], 0
		mov	ebx, [ebp+var_20]
		mov	[ebp+var_1C], ebx

loc_68F4E50D:				; CODE XREF: sub_68F4DA70+B13j
		cmp	ebx, esi
		jz	loc_68F4E799
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	loc_68F4E789
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4E529:				; CODE XREF: sub_68F4DA70+D24j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4E77B	; jumptable 68F4E535 default case
		jmp	ds:off_68F5ABD8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4E53C:				; CODE XREF: sub_68F4DA70+A8Aj
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E54D:				; CODE XREF: sub_68F4DA70+AC5j
					; DATA XREF: .rdata:off_68F5ABD8o
		movzx	eax, byte ptr [ebx+1] ;	jumptable 68F4E535 case	29
		movzx	ecx, byte ptr [ebx]
		movzx	edx, ds:byte_68F58980[eax]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	loc_68F4E859

loc_68F4E57D:				; CODE XREF: sub_68F4DA70+AC5j
					; sub_68F4DA70+E29j ...
		add	ebx, 2		; jumptable 68F4E535 cases 22,24-27
		mov	[ebp+var_1C], ebx
		jmp	short loc_68F4E50D
; ---------------------------------------------------------------------------

loc_68F4E585:				; CODE XREF: sub_68F4DA70+AC5j
					; DATA XREF: .rdata:off_68F5ABD8o
		add	ebx, 2		; jumptable 68F4E535 cases 9,10,21
		mov	[ebp+var_54], ebx

loc_68F4E58B:				; CODE XREF: sub_68F4DA70+B5Cj
		mov	ebx, [ebp+var_54]
		lea	eax, [ebx+2]
		cmp	ebx, esi
		mov	[ebp+var_54], eax
		mov	[ebp+var_1C], ebx
		jz	loc_68F4E803
		mov	edx, eax
		movzx	eax, byte ptr [eax-1]
		test	al, al
		jnz	loc_68F4E7ED
		movzx	eax, byte ptr [edx-2]
		movzx	ecx, byte ptr [edi+eax+4Ch]

loc_68F4E5B6:				; CODE XREF: sub_68F4DA70+D8Ej
		cmp	ecx, 0Eh
		jz	short loc_68F4E5DC ; jumptable 68F4E535	case 14
		cmp	ecx, 15h
		ja	short loc_68F4E5CE
		mov	eax, 1
		shl	eax, cl
		test	eax, 200600h
		jnz	short loc_68F4E58B

loc_68F4E5CE:				; CODE XREF: sub_68F4DA70+B4Ej
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E5DC:				; CODE XREF: sub_68F4DA70+AC5j
					; sub_68F4DA70+B49j
					; DATA XREF: ...
		mov	[ebp+var_28], 0	; jumptable 68F4E535 case 14
		add	ebx, 2
		mov	[ebp+var_50], ebx

loc_68F4E5E9:				; CODE XREF: sub_68F4DA70+BC2j
		mov	ebx, [ebp+var_50]
		lea	edx, [ebx+2]
		cmp	ebx, esi
		mov	[ebp+var_50], edx
		mov	[ebp+var_1C], ebx
		jz	loc_68F4E68A
		movzx	eax, byte ptr [edx-1]
		test	al, al
		jnz	short loc_68F4E679
		movzx	eax, byte ptr [edx-2]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4E60E:				; CODE XREF: sub_68F4DA70+C18j
		mov	[ebp+var_30], eax
		mov	eax, [ebp+var_30]
		sub	eax, 0Ch
		cmp	eax, 1
		jbe	short loc_68F4E642 ; jumptable 68F4E672	default	case
		cmp	[ebp+var_30], 15h
		ja	short loc_68F4E634
		movzx	ecx, byte ptr [ebp+var_30]
		mov	eax, 1
		shl	eax, cl
		test	eax, 200600h
		jnz	short loc_68F4E5E9

loc_68F4E634:				; CODE XREF: sub_68F4DA70+BB0j
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E642:				; CODE XREF: sub_68F4DA70+BAAj
					; sub_68F4DA70+C00j ...
		add	ebx, 2		; jumptable 68F4E672 default case

loc_68F4E645:				; CODE XREF: sub_68F4DA70+C40j
					; sub_68F4DA70+C4Ej
		mov	[ebp+var_1C], ebx

loc_68F4E648:				; CODE XREF: sub_68F4DA70+CA0j
		cmp	ebx, esi
		jz	loc_68F4E964
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	loc_68F4E954
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4E664:				; CODE XREF: sub_68F4DA70+EEFj
		cmp	eax, [ebp+var_30]
		jz	loc_68F4E970
		cmp	eax, 8		; switch 9 cases
		ja	short loc_68F4E642 ; jumptable 68F4E672	default	case
		jmp	ds:off_68F5AC3C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4E679:				; CODE XREF: sub_68F4DA70+B93j
		mov	ecx, [ebp+var_50]
		movsx	eax, al
		movsx	edx, byte ptr [ecx-2]
		call	sub_68F4CDA0
		jmp	short loc_68F4E60E
; ---------------------------------------------------------------------------

loc_68F4E68A:				; CODE XREF: sub_68F4DA70+B87j
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E696:				; CODE XREF: sub_68F4DA70+C02j
					; DATA XREF: .rdata:off_68F5AC3Co
		mov	edx, [ebp+arg_C] ; jumptable 68F4E672 cases 0,1,8
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E6A4:				; CODE XREF: sub_68F4DA70+C02j
					; DATA XREF: .rdata:off_68F5AC3Co
		mov	eax, esi	; jumptable 68F4E672 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4E6C0
		add	ebx, 4
		jmp	short loc_68F4E645
; ---------------------------------------------------------------------------

loc_68F4E6B2:				; CODE XREF: sub_68F4DA70+C02j
					; DATA XREF: .rdata:off_68F5AC3Co
		mov	eax, esi	; jumptable 68F4E672 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4E6CC
		add	ebx, 3
		jmp	short loc_68F4E645
; ---------------------------------------------------------------------------

loc_68F4E6C0:				; CODE XREF: sub_68F4DA70+C3Bj
		mov	eax, 0FFFFFFFEh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E6CC:				; CODE XREF: sub_68F4DA70+C49j
		mov	eax, 0FFFFFFFEh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E6D8:				; CODE XREF: sub_68F4DA70+C02j
					; DATA XREF: .rdata:off_68F5AC3Co
		mov	eax, esi	; jumptable 68F4E672 case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F4E642	; jumptable 68F4E672 default case
		mov	eax, 0FFFFFFFEh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E6EF:				; CODE XREF: sub_68F4DA70+C02j
					; DATA XREF: .rdata:off_68F5AC3Co
		mov	[esp+68h+var_68], esi ;	jumptable 68F4E672 case	3
		lea	eax, [ebp+var_1C]
		lea	edx, [ebx+2]
		mov	[esp+68h+var_64], eax
		mov	eax, edi
		call	sub_68F4D800
		test	eax, eax
		mov	edx, eax
		jle	loc_68F4E9A8
		mov	ebx, [ebp+var_1C]
		jmp	loc_68F4E648
; ---------------------------------------------------------------------------

loc_68F4E715:				; CODE XREF: sub_68F4DA70+C02j
					; DATA XREF: .rdata:off_68F5AC3Co
		mov	eax, [ebp+arg_C] ; jumptable 68F4E672 case 2
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E723:				; CODE XREF: sub_68F4DA70+AC5j
					; DATA XREF: .rdata:off_68F5ABD8o
		sub	esi, ebx	; jumptable 68F4E535 case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E741:				; CODE XREF: sub_68F4DA70+AC5j
					; DATA XREF: .rdata:off_68F5ABD8o
		sub	esi, ebx	; jumptable 68F4E535 case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F4DC8D
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E75F:				; CODE XREF: sub_68F4DA70+AC5j
					; DATA XREF: .rdata:off_68F5ABD8o
		sub	esi, ebx	; jumptable 68F4E535 case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jle	loc_68F4DC8D
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E77B:				; CODE XREF: sub_68F4DA70+ABFj
					; sub_68F4DA70+AC5j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4E535 default case
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E789:				; CODE XREF: sub_68F4DA70+AABj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F4E529
; ---------------------------------------------------------------------------

loc_68F4E799:				; CODE XREF: sub_68F4DA70+A9Fj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E7A5:				; CODE XREF: sub_68F4DA70+580j
					; DATA XREF: .rdata:off_68F5AB10o
		mov	eax, [ebp+var_20] ; jumptable 68F4DFF0 case 7
		sub	esi, eax
		cmp	esi, 3
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E7C9:				; CODE XREF: sub_68F4DA70+580j
					; DATA XREF: .rdata:off_68F5AB10o
		mov	eax, [ebp+var_20] ; jumptable 68F4DFF0 case 6
		sub	esi, eax
		cmp	esi, 2
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E7ED:				; CODE XREF: sub_68F4DA70+B37j
		mov	ecx, [ebp+var_54]
		movsx	eax, al
		movsx	edx, byte ptr [ecx-2]
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	loc_68F4E5B6
; ---------------------------------------------------------------------------

loc_68F4E803:				; CODE XREF: sub_68F4DA70+B29j
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E80F:				; CODE XREF: sub_68F4DA70+AC5j
					; DATA XREF: .rdata:off_68F5ABD8o
		mov	eax, [ebp+var_28] ; jumptable 68F4E535 case 23
		test	eax, eax
		jnz	loc_68F4E946
		mov	[ebp+var_28], 1
		add	ebx, 2
		cmp	ebx, esi
		mov	[ebp+var_2C], ebx
		mov	[ebp+var_1C], ebx
		jz	loc_68F4E93A
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	loc_68F4E92A
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4E846:				; CODE XREF: sub_68F4DA70+EC5j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4E919	; jumptable 68F4E852 default case
		jmp	ds:off_68F5AC60[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4E859:				; CODE XREF: sub_68F4DA70+B07j
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E867:				; CODE XREF: sub_68F4DA70+DE2j
					; DATA XREF: .rdata:off_68F5AC60o
		mov	ecx, [ebp+var_2C] ; jumptable 68F4E852 case 29
		movzx	eax, byte ptr [ecx+1]
		movzx	ecx, byte ptr [ecx]
		movzx	edx, ds:byte_68F58380[eax]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F4E908

loc_68F4E896:				; CODE XREF: sub_68F4DA70+DE2j
					; DATA XREF: .rdata:off_68F5AC60o
		mov	ebx, [ebp+var_2C] ; jumptable 68F4E852 cases 22,24
		jmp	loc_68F4E57D	; jumptable 68F4E535 cases 22,24-27
; ---------------------------------------------------------------------------

loc_68F4E89E:				; CODE XREF: sub_68F4DA70+DE2j
					; DATA XREF: .rdata:off_68F5AC60o
		mov	eax, [ebp+var_2C] ; jumptable 68F4E852 case 6
		sub	esi, eax
		cmp	esi, 2
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E8C2:				; CODE XREF: sub_68F4DA70+DE2j
					; DATA XREF: .rdata:off_68F5AC60o
		mov	eax, [ebp+var_2C] ; jumptable 68F4E852 case 5
		sub	esi, eax
		dec	esi
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_2C]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E8E4:				; CODE XREF: sub_68F4DA70+DE2j
					; DATA XREF: .rdata:off_68F5AC60o
		mov	eax, [ebp+var_2C] ; jumptable 68F4E852 case 7
		sub	esi, eax
		cmp	esi, 3
		mov	eax, 0FFFFFFFEh
		jle	loc_68F4DC8D
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E908:				; CODE XREF: sub_68F4DA70+E24j
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_2C]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E919:				; CODE XREF: sub_68F4DA70+DDCj
					; sub_68F4DA70+DE2j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4E852 default case
		xor	eax, eax
		mov	ecx, [ebp+var_2C]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E92A:				; CODE XREF: sub_68F4DA70+DC8j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F4E846
; ---------------------------------------------------------------------------

loc_68F4E93A:				; CODE XREF: sub_68F4DA70+DBCj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E946:				; CODE XREF: sub_68F4DA70+DA4j
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E954:				; CODE XREF: sub_68F4DA70+BE6j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F4E664
; ---------------------------------------------------------------------------

loc_68F4E964:				; CODE XREF: sub_68F4DA70+BDAj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E970:				; CODE XREF: sub_68F4DA70+BF7j
		add	ebx, 2
		cmp	ebx, esi
		mov	[ebp+var_34], ebx
		mov	[ebp+var_1C], ebx
		jz	loc_68F4EB4A
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	loc_68F4EB3A
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4E995:				; CODE XREF: sub_68F4DA70+10D5j
		sub	eax, 9		; switch 13 cases
		cmp	eax, 0Ch
		ja	loc_68F4EB29	; jumptable 68F4E9A1 default case
		jmp	ds:off_68F5ACC4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4E9A8:				; CODE XREF: sub_68F4DA70+C97j
		jnz	short loc_68F4E9B2
		mov	eax, [ebp+var_1C]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax

loc_68F4E9B2:				; CODE XREF: sub_68F4DA70:loc_68F4E9A8j
		mov	eax, edx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4E9BB:				; CODE XREF: sub_68F4DA70+F31j
					; sub_68F4DA70+F7Cj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4E9A1 cases 9,10,21
					; jumptable 68F4E9EC cases 9,10,21
		cmp	ebx, esi
		mov	[ebp+var_38], ebx
		mov	[ebp+var_1C], ebx
		jz	loc_68F4EB09
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	loc_68F4EAF9
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4E9E0:				; CODE XREF: sub_68F4DA70+1094j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4EAE8	; jumptable 68F4E9EC default case
		jmp	ds:off_68F5ACF8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4E9F3:				; CODE XREF: sub_68F4DA70+F31j
					; sub_68F4DA70+F7Cj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4E9A1 case 17
					; jumptable 68F4E9EC case 17
		mov	eax, 0FFFFFFFFh
		cmp	ebx, esi
		mov	[ebp+var_1C], ebx
		jz	loc_68F4DC8D
		cmp	byte ptr [ebx+1], 0
		jnz	short loc_68F4EA11
		cmp	byte ptr [ebx],	3Eh
		jz	short loc_68F4EA1F

loc_68F4EA11:				; CODE XREF: sub_68F4DA70+F9Aj
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EA1F:				; CODE XREF: sub_68F4DA70+F9Fj
		mov	edx, [ebp+arg_C]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 3
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EA33:				; CODE XREF: sub_68F4DA70+F7Cj
					; DATA XREF: .rdata:off_68F5ACF8o
		mov	edx, [ebp+var_38] ; jumptable 68F4E9EC case 29
		movzx	eax, byte ptr [edx+1]
		movzx	edx, ds:byte_68F58380[eax]
		mov	eax, [ebp+var_38]
		movzx	ecx, byte ptr [eax]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F4EA6D

loc_68F4EA65:				; CODE XREF: sub_68F4DA70+F7Cj
					; DATA XREF: .rdata:off_68F5ACF8o
		mov	ebx, [ebp+var_38] ; jumptable 68F4E9EC cases 22,24
		jmp	loc_68F4E57D	; jumptable 68F4E535 cases 22,24-27
; ---------------------------------------------------------------------------

loc_68F4EA6D:				; CODE XREF: sub_68F4DA70+FF3j
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EA7E:				; CODE XREF: sub_68F4DA70+F7Cj
					; DATA XREF: .rdata:off_68F5ACF8o
		mov	ecx, [ebp+var_38] ; jumptable 68F4E9EC case 7
		mov	eax, 0FFFFFFFEh
		sub	esi, ecx
		cmp	esi, 3
		jle	loc_68F4DC8D
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EAA2:				; CODE XREF: sub_68F4DA70+F7Cj
					; DATA XREF: .rdata:off_68F5ACF8o
		mov	ebx, [ebp+var_38] ; jumptable 68F4E9EC case 6
		mov	eax, 0FFFFFFFEh
		sub	esi, ebx
		cmp	esi, 2
		jle	loc_68F4DC8D
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EAC6:				; CODE XREF: sub_68F4DA70+F7Cj
					; DATA XREF: .rdata:off_68F5ACF8o
		mov	edi, [ebp+var_38] ; jumptable 68F4E9EC case 5
		mov	eax, 0FFFFFFFEh
		sub	esi, edi
		dec	esi
		jle	loc_68F4DC8D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_38]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EAE8:				; CODE XREF: sub_68F4DA70+F76j
					; sub_68F4DA70+F7Cj
					; DATA XREF: ...
		mov	eax, [ebp+var_38] ; jumptable 68F4E9EC default case
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EAF9:				; CODE XREF: sub_68F4DA70+F62j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F4E9E0
; ---------------------------------------------------------------------------

loc_68F4EB09:				; CODE XREF: sub_68F4DA70+F56j
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EB15:				; CODE XREF: sub_68F4DA70+F31j
					; sub_68F4DA70+F7Cj
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4E9A1 case 11
					; jumptable 68F4E9EC case 11
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 1
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EB29:				; CODE XREF: sub_68F4DA70+F2Bj
					; sub_68F4DA70+F31j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F4E9A1 default case
		xor	eax, eax
		mov	ecx, [ebp+var_34]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F4DC8F
; ---------------------------------------------------------------------------

loc_68F4EB3A:				; CODE XREF: sub_68F4DA70+F17j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F4E995
; ---------------------------------------------------------------------------

loc_68F4EB4A:				; CODE XREF: sub_68F4DA70+F0Bj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F4DC8F
sub_68F4DA70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4EB60	proc near		; CODE XREF: sub_68F4EDB0+36Bj
					; sub_68F4F7F0+95p

var_38		= byte ptr -38h
var_1D		= byte ptr -1Dh
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, esi
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_1C], eax
		mov	eax, 0FFFFFFEAh
		jz	short loc_68F4EBD4
		movzx	eax, byte ptr [edx+1]
		test	al, al
		mov	[ebp+var_1D], al
		jz	short loc_68F4EBB0
		movzx	eax, byte ptr [edx]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_1D]
		call	sub_68F4CDA0
		sub	eax, 5		; switch 26 cases
		cmp	eax, 19h
		ja	short loc_68F4EBD0 ; jumptable 68F4EBA8	default	case

loc_68F4EBA8:				; CODE XREF: sub_68F4EB60+67j
		jmp	ds:off_68F5AD5C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F4EBB0:				; CODE XREF: sub_68F4EB60+2Cj
		movzx	edx, byte ptr [edx]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]
		sub	eax, 5
		cmp	eax, 19h
		jbe	short loc_68F4EBA8
		lea	esi, [esi+0]

loc_68F4EBD0:				; CODE XREF: sub_68F4EB60+46j
					; sub_68F4EB60:loc_68F4EBA8j ...
		mov	[edi], ebx	; jumptable 68F4EBA8 default case
		xor	eax, eax

loc_68F4EBD4:				; CODE XREF: sub_68F4EB60+21j
					; sub_68F4EB60+F6j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4EBE1:				; CODE XREF: sub_68F4EB60:loc_68F4EBA8j
					; DATA XREF: .rdata:off_68F5AD5Co
		movzx	eax, [ebp+var_1D] ; jumptable 68F4EBA8 case 29
		movzx	edx, ds:byte_68F58380[eax]

loc_68F4EBEC:				; CODE XREF: sub_68F4EB60+13Cj
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_38]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F4EBD0 ; jumptable 68F4EBA8	default	case

loc_68F4EC10:				; CODE XREF: sub_68F4EB60:loc_68F4EBA8j
					; sub_68F4EB60+DFj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4EBA8 cases 22,24
					; jumptable 68F4EC3F cases 22,24-27
		cmp	ebx, esi
		jz	loc_68F4ECB0
		movzx	edx, byte ptr [ebx+1]
		test	dl, dl
		mov	[ebp+var_1D], dl
		jnz	short loc_68F4EC7D
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_38], al
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4EC37:				; CODE XREF: sub_68F4EB60+12Fj
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F4EBD0 ; jumptable 68F4EBA8	default	case
		jmp	ds:off_68F5ADC4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4EC46:				; CODE XREF: sub_68F4EB60:loc_68F4EBA8j
					; sub_68F4EB60+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4EBA8 case 7
					; jumptable 68F4EC3F case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3

loc_68F4EC50:				; CODE XREF: sub_68F4EB60+105j
					; sub_68F4EB60+10Fj
		jg	loc_68F4EBD0	; jumptable 68F4EBA8 default case
		jmp	loc_68F4EBD4
; ---------------------------------------------------------------------------

loc_68F4EC5B:				; CODE XREF: sub_68F4EB60:loc_68F4EBA8j
					; sub_68F4EB60+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4EBA8 case 6
					; jumptable 68F4EC3F case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jmp	short loc_68F4EC50
; ---------------------------------------------------------------------------

loc_68F4EC67:				; CODE XREF: sub_68F4EB60:loc_68F4EBA8j
					; sub_68F4EB60+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F4EBA8 case 5
					; jumptable 68F4EC3F case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jmp	short loc_68F4EC50
; ---------------------------------------------------------------------------

loc_68F4EC71:				; CODE XREF: sub_68F4EB60:loc_68F4EBA8j
					; DATA XREF: .rdata:off_68F5AD5Co
		mov	[edi], ebx	; jumptable 68F4EBA8 cases 9,10,21,30
		mov	eax, 16h
		jmp	loc_68F4EBD4
; ---------------------------------------------------------------------------

loc_68F4EC7D:				; CODE XREF: sub_68F4EB60+C4j
		movzx	eax, byte ptr [ebx]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_1D]
		call	sub_68F4CDA0
		jmp	short loc_68F4EC37
; ---------------------------------------------------------------------------

loc_68F4EC91:				; CODE XREF: sub_68F4EB60+DFj
					; DATA XREF: .rdata:off_68F5ADC4o
		movzx	eax, [ebp+var_1D] ; jumptable 68F4EC3F case 29
		movzx	edx, ds:byte_68F58980[eax]
		jmp	loc_68F4EBEC
; ---------------------------------------------------------------------------

loc_68F4ECA1:				; CODE XREF: sub_68F4EB60+DFj
					; DATA XREF: .rdata:off_68F5ADC4o
		lea	eax, [ebx+2]	; jumptable 68F4EC3F case 18
		mov	[edi], eax
		mov	eax, 1Ch
		jmp	loc_68F4EBD4
; ---------------------------------------------------------------------------

loc_68F4ECB0:				; CODE XREF: sub_68F4EB60+B5j
		mov	eax, 0FFFFFFFFh
		jmp	loc_68F4EBD4
sub_68F4EB60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4ECC0	proc near		; CODE XREF: sub_68F4EDB0+1EBj

var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, edx
		push	esi
		push	ebx
		sub	esp, 4
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	esi, [ebp+arg_4]

loc_68F4ECD4:				; CODE XREF: sub_68F4ECC0+67j
					; sub_68F4ECC0+BCj ...
		cmp	ebx, esi
		jz	short loc_68F4ED07

loc_68F4ECD8:				; CODE XREF: sub_68F4ECC0+45j
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4ED14
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4ECE8:				; CODE XREF: sub_68F4ECC0+5Fj
		cmp	eax, 0Dh	; switch 14 cases
		ja	short loc_68F4ED00 ; jumptable 68F4ECED	default	case
		jmp	ds:off_68F5AE28[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4ECF4:				; CODE XREF: sub_68F4ECC0+2Dj
					; DATA XREF: .rdata:off_68F5AE28o
		mov	eax, esi	; jumptable 68F4ECED case 5
		sub	eax, ebx
		dec	eax
		jle	loc_68F4ED92
		nop

loc_68F4ED00:				; CODE XREF: sub_68F4ECC0+2Bj
					; sub_68F4ECC0+2Dj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4ECED default case
		cmp	ebx, esi
		jnz	short loc_68F4ECD8

loc_68F4ED07:				; CODE XREF: sub_68F4ECC0+16j
		pop	ecx
		mov	edx, 0FFFFFFFFh
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4ED14:				; CODE XREF: sub_68F4ECC0+1Ej
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4ECE8
; ---------------------------------------------------------------------------

loc_68F4ED21:				; CODE XREF: sub_68F4ECC0+2Dj
					; DATA XREF: .rdata:off_68F5AE28o
		add	ebx, 2		; jumptable 68F4ECED cases 12,13
		cmp	eax, [ebp+var_10]
		jnz	short loc_68F4ECD4
		cmp	ebx, esi
		mov	edx, 0FFFFFFE5h
		jz	short loc_68F4ED61
		mov	eax, [ebp+arg_8]
		mov	[eax], ebx
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4ED99
		movzx	eax, byte ptr [ebx]
		movzx	ecx, byte ptr [edi+eax+4Ch]

loc_68F4ED47:				; CODE XREF: sub_68F4ECC0+E6j
		cmp	ecx, 1Eh
		ja	short loc_68F4ED5F
		mov	eax, 1
		mov	edx, 1Bh
		shl	eax, cl
		test	eax, 40300E00h
		jnz	short loc_68F4ED61

loc_68F4ED5F:				; CODE XREF: sub_68F4ECC0+8Aj
					; sub_68F4ECC0+AEj
		xor	edx, edx

loc_68F4ED61:				; CODE XREF: sub_68F4ECC0+70j
					; sub_68F4ECC0+9Dj ...
		pop	ecx
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4ED69:				; CODE XREF: sub_68F4ECC0+2Dj
					; DATA XREF: .rdata:off_68F5AE28o
		mov	eax, [ebp+arg_8] ; jumptable 68F4ECED cases 0,1,8
		mov	[eax], ebx
		jmp	short loc_68F4ED5F
; ---------------------------------------------------------------------------

loc_68F4ED70:				; CODE XREF: sub_68F4ECC0+2Dj
					; DATA XREF: .rdata:off_68F5AE28o
		mov	eax, esi	; jumptable 68F4ECED case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4ED92
		add	ebx, 4
		jmp	loc_68F4ECD4
; ---------------------------------------------------------------------------

loc_68F4ED81:				; CODE XREF: sub_68F4ECC0+2Dj
					; DATA XREF: .rdata:off_68F5AE28o
		mov	eax, esi	; jumptable 68F4ECED case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4ED92
		add	ebx, 3
		jmp	loc_68F4ECD4
; ---------------------------------------------------------------------------

loc_68F4ED92:				; CODE XREF: sub_68F4ECC0+39j
					; sub_68F4ECC0+B7j ...
		mov	edx, 0FFFFFFFEh
		jmp	short loc_68F4ED61
; ---------------------------------------------------------------------------

loc_68F4ED99:				; CODE XREF: sub_68F4ECC0+7Dj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	short loc_68F4ED47
sub_68F4ECC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4EDB0	proc near		; DATA XREF: .rdata:off_68F57C00o
					; .rdata:off_68F58DA0o	...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_58		= byte ptr -58h
var_48		= byte ptr -48h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_0]
		cmp	esi, edi
		mov	[ebp+var_20], edx
		mov	edx, 0FFFFFFFCh
		mov	[ebp+var_1C], eax
		jz	short loc_68F4EE32
		mov	eax, edi
		sub	eax, esi
		test	al, 1
		jnz	short loc_68F4EE01
		movzx	ebx, byte ptr [esi+1]
		test	bl, bl
		jnz	short loc_68F4EE15

loc_68F4EDE4:				; CODE XREF: sub_68F4EDB0+63j
		movzx	ecx, byte ptr [esi]
		mov	edx, [ebp+var_1C]
		movzx	eax, cl
		mov	[ebp+var_58], cl
		movzx	eax, byte ptr [edx+eax+4Ch]
		cmp	eax, 24h	; switch 37 cases
		ja	short loc_68F4EE2B ; jumptable 68F4EDFA	default	case

loc_68F4EDFA:				; CODE XREF: sub_68F4EDB0+79j
		jmp	ds:off_68F5AE60[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4EE01:				; CODE XREF: sub_68F4EDB0+2Aj
		and	eax, 0FFFFFFFEh
		jz	loc_68F4F3C5
		movzx	ebx, byte ptr [esi+1]
		lea	edi, [esi+eax]
		test	bl, bl
		jz	short loc_68F4EDE4

loc_68F4EE15:				; CODE XREF: sub_68F4EDB0+32j
		movzx	ecx, byte ptr [esi]
		movsx	eax, bl
		movsx	edx, cl
		mov	[ebp+var_58], cl
		call	sub_68F4CDA0
		cmp	eax, 24h
		jbe	short loc_68F4EDFA

loc_68F4EE2B:				; CODE XREF: sub_68F4EDB0+48j
					; sub_68F4EDB0:loc_68F4EDFAj ...
		mov	eax, [ebp+var_20] ; jumptable 68F4EDFA default case
		mov	[eax], esi

loc_68F4EE30:				; CODE XREF: sub_68F4EDB0+9Dj
					; sub_68F4EDB0+AEj ...
		xor	edx, edx

loc_68F4EE32:				; CODE XREF: sub_68F4EDB0+22j
					; sub_68F4EDB0:loc_68F4EE46j ...
		add	esp, 5Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4EE3C:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; sub_68F4EDB0+301j
					; DATA XREF: ...
		sub	edi, esi	; jumptable 68F4EDFA case 7
					; jumptable 68F4F0B1 case 7
		mov	edx, 0FFFFFFFEh
		cmp	edi, 3

loc_68F4EE46:				; CODE XREF: sub_68F4EDB0+7AAj
		jle	short loc_68F4EE32

loc_68F4EE48:				; CODE XREF: sub_68F4EDB0+E9j
					; sub_68F4EDB0+10Bj ...
		mov	ecx, [ebp+var_20] ; jumptable 68F4F0B1 default case
		mov	[ecx], esi
		jmp	short loc_68F4EE30
; ---------------------------------------------------------------------------

loc_68F4EE4F:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; sub_68F4EDB0+301j
					; DATA XREF: ...
		sub	edi, esi	; jumptable 68F4EDFA case 5
					; jumptable 68F4F0B1 case 5
		mov	edx, 0FFFFFFFEh
		dec	edi

loc_68F4EE57:				; CODE XREF: sub_68F4EDB0+79Bj
		jle	short loc_68F4EE32
		mov	eax, [ebp+var_20]
		mov	[eax], esi
		jmp	short loc_68F4EE30
; ---------------------------------------------------------------------------

loc_68F4EE60:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; sub_68F4EDB0+301j
					; DATA XREF: ...
		sub	edi, esi	; jumptable 68F4EDFA case 6
					; jumptable 68F4F0B1 case 6
		mov	edx, 0FFFFFFFEh
		cmp	edi, 2

loc_68F4EE6A:				; CODE XREF: sub_68F4EDB0+7B9j
		jle	short loc_68F4EE32

loc_68F4EE6C:				; CODE XREF: sub_68F4EDB0+3AFj
		mov	edx, [ebp+var_20]
		mov	[edx], esi
		jmp	short loc_68F4EE30
; ---------------------------------------------------------------------------

loc_68F4EE73:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		add	esi, 2		; jumptable 68F4EDFA case 2
		mov	edx, 0FFFFFFFFh
		cmp	esi, edi
		jz	short loc_68F4EE32
		movzx	eax, byte ptr [esi+1]
		test	al, al
		jnz	loc_68F4F401
		movzx	eax, byte ptr [esi]
		mov	edx, [ebp+var_1C]
		movzx	ecx, byte ptr [edx+eax+4Ch]

loc_68F4EE96:				; CODE XREF: sub_68F4EDB0+65Ej
		cmp	ecx, 1Dh
		ja	short loc_68F4EE48 ; jumptable 68F4F0B1	default	case
		mov	eax, 1
		shl	eax, cl
		test	eax, 214000E0h
		jnz	loc_68F4F61E
		test	eax, 10000h
		jnz	loc_68F4F464
		test	ah, 80h
		jz	short loc_68F4EE48 ; jumptable 68F4F0B1	default	case
		mov	[ebp+arg_0], edi
		mov	ecx, [ebp+var_20]
		lea	edx, [esi+2]
		mov	eax, [ebp+var_1C]
		mov	[ebp+arg_4], ecx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F4D3C0
; ---------------------------------------------------------------------------

loc_68F4EED8:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		add	esi, 2		; jumptable 68F4EDFA case 4
		mov	edx, 0FFFFFFE6h
		cmp	esi, edi
		jz	loc_68F4EE32
		cmp	byte ptr [esi+1], 0
		jnz	short loc_68F4EEF7
		cmp	byte ptr [esi],	5Dh
		jz	loc_68F4F42E

loc_68F4EEF7:				; CODE XREF: sub_68F4EDB0+13Cj
					; sub_68F4EDB0+692j ...
		mov	ecx, [ebp+var_20]
		mov	edx, 1Ah
		mov	[ecx], esi
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4EF06:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		lea	ebx, [esi+2]	; jumptable 68F4EDFA case 9
		cmp	ebx, edi
		jz	loc_68F4F696
		jmp	short loc_68F4EF20
; ---------------------------------------------------------------------------
		align 10h

loc_68F4EF20:				; CODE XREF: sub_68F4EDB0+161j
					; sub_68F4EDB0+1AAj ...
		cmp	ebx, edi
		mov	esi, ebx
		jz	loc_68F4F3B6
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	loc_68F4F390
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4EF41:				; CODE XREF: sub_68F4EDB0+5EBj
		cmp	eax, 0Ah
		jz	loc_68F4F381
		jg	loc_68F4F378
		cmp	eax, 9
		jnz	short loc_68F4EF5C
		add	ebx, 2
		cmp	ebx, edi
		jnz	short loc_68F4EF20

loc_68F4EF5C:				; CODE XREF: sub_68F4EDB0+1A3j
					; sub_68F4EDB0+5CBj
		mov	ecx, [ebp+var_20]
		mov	[ecx], esi
		mov	edx, 0Fh
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4EF6B:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	ecx, [ebp+var_20] ; jumptable 68F4EDFA case 11
		lea	eax, [esi+2]
		mov	edx, 11h
		mov	[ecx], eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4EF7D:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	[ebp+arg_4], edi ; jumptable 68F4EDFA case 12
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+var_1C]
		mov	[ebp+arg_8], eax
		lea	eax, [esi+2]
		mov	[ebp+arg_0], eax
		mov	eax, 0Ch

loc_68F4EF94:				; CODE XREF: sub_68F4EDB0+265j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F4ECC0
; ---------------------------------------------------------------------------

loc_68F4EFA0:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	edx, [ebp+var_20] ; jumptable 68F4EDFA case 31
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 17h
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4EFB2:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		add	esi, 2		; jumptable 68F4EDFA case 32
		mov	edx, 0FFFFFFE8h
		cmp	esi, edi
		jz	loc_68F4EE32
		movzx	eax, byte ptr [esi+1]
		test	al, al
		jnz	loc_68F4F3F1
		movzx	eax, byte ptr [esi]
		mov	ecx, [ebp+var_1C]
		movzx	eax, byte ptr [ecx+eax+4Ch]

loc_68F4EFD9:				; CODE XREF: sub_68F4EDB0+64Cj
		sub	eax, 9		; switch 28 cases
		cmp	eax, 1Bh
		ja	loc_68F4EE2B	; jumptable 68F4EDFA default case
		jmp	ds:off_68F5AEF4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4EFEC:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	edx, [ebp+var_20] ; jumptable 68F4EDFA case 35
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 26h
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4EFFE:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	[ebp+arg_4], edi ; jumptable 68F4EDFA case 13
		mov	edx, [ebp+var_20]
		lea	eax, [esi+2]
		mov	[ebp+arg_0], eax
		mov	eax, 0Dh
		mov	[ebp+arg_8], edx
		mov	edx, [ebp+var_1C]
		jmp	loc_68F4EF94
; ---------------------------------------------------------------------------

loc_68F4F01A:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		lea	eax, [esi+2]	; jumptable 68F4EDFA case 19
		mov	[ebp+var_28], eax
		mov	eax, 0FFFFFFFFh
		cmp	[ebp+var_28], edi
		jz	loc_68F4F24E
		mov	edx, [ebp+var_28]
		movzx	ebx, byte ptr [edx+1]
		test	bl, bl
		jnz	loc_68F4F41D
		movzx	eax, byte ptr [esi+2]
		mov	ecx, [ebp+var_1C]
		movzx	eax, byte ptr [ecx+eax+4Ch]

loc_68F4F049:				; CODE XREF: sub_68F4EDB0+679j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4F244	; jumptable 68F4F055 default case
		jmp	ds:off_68F5AF64[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4F05C:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	ecx, [ebp+var_20] ; jumptable 68F4EDFA case 20
		lea	eax, [esi+2]
		mov	edx, 19h
		mov	[ecx], eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F06E:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		lea	ebx, [esi+2]	; jumptable 68F4EDFA cases 10,21
		jmp	loc_68F4EF20
; ---------------------------------------------------------------------------

loc_68F4F076:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	[ebp+var_24], 12h ; jumptable 68F4EDFA cases 22,24

loc_68F4F07D:				; CODE XREF: sub_68F4EDB0+301j
					; sub_68F4EDB0+30Fj ...
		add	esi, 2		; jumptable 68F4F0B1 cases 22,24-27
					; jumptable 68F4F4FE cases 22,24-27

loc_68F4F080:				; CODE XREF: sub_68F4EDB0+350j
					; sub_68F4EDB0+414j ...
		cmp	esi, edi
		jz	loc_68F4F413
		movzx	ebx, byte ptr [esi+1]
		test	bl, bl
		jnz	loc_68F4F3A0
		movzx	eax, byte ptr [esi]
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_58], al
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4F0A5:				; CODE XREF: sub_68F4EDB0+601j
		sub	eax, 5		; switch 32 cases
		cmp	eax, 1Fh
		ja	loc_68F4EE48	; jumptable 68F4F0B1 default case
		jmp	ds:off_68F5AFC8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4F0B8:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	[ebp+var_24], 13h ; jumptable 68F4EDFA cases 23,25-27
		jmp	short loc_68F4F07D ; jumptable 68F4F0B1	cases 22,24-27
					; jumptable 68F4F4FE cases 22,24-27
; ---------------------------------------------------------------------------

loc_68F4F0C1:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		movzx	edx, [ebp+var_58] ; jumptable 68F4EDFA case 29
		movzx	ebx, bl
		movzx	ecx, [ebp+var_58]
		movzx	eax, ds:byte_68F58380[ebx]
		mov	[ebp+var_2C], ebx
		shr	dl, 5
		mov	ebx, 1
		and	ecx, 1Fh
		movzx	edx, dl
		lea	eax, [edx+eax*8]
		shl	ebx, cl
		test	ds:dword_68F58480[eax*4], ebx
		jz	loc_68F4F3CF
		mov	[ebp+var_24], 12h
		add	esi, 2
		jmp	loc_68F4F080
; ---------------------------------------------------------------------------

loc_68F4F105:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	[ebp+arg_0], edi ; jumptable 68F4EDFA case 30
		mov	ecx, [ebp+var_20]
		lea	edx, [esi+2]
		mov	eax, [ebp+var_1C]
		mov	[ebp+arg_4], ecx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F4EB60
; ---------------------------------------------------------------------------

loc_68F4F120:				; CODE XREF: sub_68F4EDB0:loc_68F4EDFAj
					; DATA XREF: .rdata:off_68F5AE60o
		mov	edx, [ebp+var_20] ; jumptable 68F4EDFA case 36
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 15h
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F132:				; CODE XREF: sub_68F4EDB0+301j
					; DATA XREF: .rdata:off_68F5AFC8o
		mov	eax, [ebp+var_20] ; jumptable 68F4F0B1 cases 9-11,20,21,30,32,35,36
		mov	edx, [ebp+var_24]
		mov	[eax], esi
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F13F:				; CODE XREF: sub_68F4EDB0+301j
					; DATA XREF: .rdata:off_68F5AFC8o
		cmp	[ebp+var_24], 13h ; jumptable 68F4F0B1 case 34
		jz	loc_68F4EE2B	; jumptable 68F4EDFA default case
		mov	edx, [ebp+var_20]
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 20h
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F15B:				; CODE XREF: sub_68F4EDB0+301j
					; DATA XREF: .rdata:off_68F5AFC8o
		cmp	[ebp+var_24], 13h ; jumptable 68F4F0B1 case 33
		jz	loc_68F4EE6C
		mov	ecx, [ebp+var_20]
		lea	eax, [esi+2]
		mov	edx, 1Fh
		mov	[ecx], eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F177:				; CODE XREF: sub_68F4EDB0+301j
					; DATA XREF: .rdata:off_68F5AFC8o
		movzx	ecx, [ebp+var_58] ; jumptable 68F4F0B1 case 29
		movzx	eax, bl
		movzx	edx, ds:byte_68F58980[eax]
		movzx	eax, [ebp+var_58]
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F4F07D	; jumptable 68F4F0B1 cases 22,24-27
					; jumptable 68F4F4FE cases 22,24-27
		mov	edx, [ebp+var_20]
		mov	[edx], esi
		jmp	loc_68F4EE30
; ---------------------------------------------------------------------------

loc_68F4F1B3:				; CODE XREF: sub_68F4EDB0+301j
					; DATA XREF: .rdata:off_68F5AFC8o
		add	esi, 2		; jumptable 68F4F0B1 case 23
		cmp	[ebp+var_24], 12h
		jz	loc_68F4F4C6
		cmp	[ebp+var_24], 29h
		jnz	loc_68F4F080

loc_68F4F1CA:				; CODE XREF: sub_68F4EDB0+63Cj
					; sub_68F4EDB0+748j ...
		mov	[ebp+var_24], 13h ; jumptable 68F4F4FE default case
		jmp	loc_68F4F080
; ---------------------------------------------------------------------------

loc_68F4F1D6:				; CODE XREF: sub_68F4EDB0+301j
					; DATA XREF: .rdata:off_68F5AFC8o
		cmp	[ebp+var_24], 13h ; jumptable 68F4F0B1 case 15
		jz	loc_68F4EE48	; jumptable 68F4F0B1 default case
		mov	edx, [ebp+var_20]
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 1Eh
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F1F2:				; CODE XREF: sub_68F4EDB0+235j
					; DATA XREF: .rdata:off_68F5AEF4o
		mov	ecx, [ebp+var_20] ; jumptable 68F4EFE5 cases 9-11,21,32,35,36
		mov	edx, 18h
		mov	[ecx], esi
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F201:				; CODE XREF: sub_68F4EDB0+235j
					; DATA XREF: .rdata:off_68F5AEF4o
		mov	edx, [ebp+var_20] ; jumptable 68F4EFE5 case 34
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 25h
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F213:				; CODE XREF: sub_68F4EDB0+235j
					; DATA XREF: .rdata:off_68F5AEF4o
		mov	edx, [ebp+var_20] ; jumptable 68F4EFE5 case 33
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 24h
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F225:				; CODE XREF: sub_68F4EDB0+235j
					; DATA XREF: .rdata:off_68F5AEF4o
		mov	ecx, [ebp+var_20] ; jumptable 68F4EFE5 case 15
		lea	eax, [esi+2]
		mov	edx, 23h
		mov	[ecx], eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F237:				; CODE XREF: sub_68F4EDB0+2A5j
					; DATA XREF: .rdata:off_68F5AF64o
		mov	eax, [ebp+var_28] ; jumptable 68F4F055 case 5
		sub	edi, eax
		dec	edi
		mov	eax, 0FFFFFFFEh

loc_68F4F242:				; CODE XREF: sub_68F4EDB0+5B4j
		jle	short loc_68F4F24E

loc_68F4F244:				; CODE XREF: sub_68F4EDB0+29Fj
					; sub_68F4EDB0+2A5j ...
		mov	eax, [ebp+var_20] ; jumptable 68F4F055 default case
		mov	edx, [ebp+var_28]
		mov	[eax], edx
		xor	eax, eax

loc_68F4F24E:				; CODE XREF: sub_68F4EDB0+278j
					; sub_68F4EDB0:loc_68F4F242j ...
		mov	edx, eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F255:				; CODE XREF: sub_68F4EDB0+508j
					; DATA XREF: .rdata:off_68F5B048o
		movzx	ecx, [ebp+var_48] ; jumptable 68F4F2B8 case 29
		movzx	eax, bl
		movzx	edx, ds:byte_68F58980[eax]
		movzx	eax, [ebp+var_48]
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F4F244 ; jumptable 68F4F055	default	case

loc_68F4F283:				; CODE XREF: sub_68F4EDB0+2A5j
					; sub_68F4EDB0+508j ...
		add	[ebp+var_28], 2	; jumptable 68F4F055 cases 22,24
					; jumptable 68F4F2B8 cases 22,24-27
		cmp	[ebp+var_28], edi
		jz	loc_68F4F63A
		mov	ecx, [ebp+var_28]
		movzx	ebx, byte ptr [ecx+1]
		test	bl, bl
		jnz	loc_68F4F5EF
		movzx	eax, byte ptr [ecx]
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_48], al
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4F2B0:				; CODE XREF: sub_68F4EDB0+853j
		sub	eax, 5		; switch 32 cases
		cmp	eax, 1Fh
		ja	short loc_68F4F2ED ; jumptable 68F4F2B8	default	case
		jmp	ds:off_68F5B048[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4F2BF:				; CODE XREF: sub_68F4EDB0+2A5j
					; DATA XREF: .rdata:off_68F5AF64o
		movzx	eax, bl		; jumptable 68F4F055 case 29
		movzx	edx, ds:byte_68F58380[eax]
		mov	eax, [ebp+var_28]
		movzx	ecx, byte ptr [eax]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	short loc_68F4F283 ; jumptable 68F4F055	cases 22,24
					; jumptable 68F4F2B8 cases 22,24-27

loc_68F4F2ED:				; CODE XREF: sub_68F4EDB0+506j
					; sub_68F4EDB0+508j ...
		mov	ecx, [ebp+var_28] ; jumptable 68F4F2B8 default case
		xor	eax, eax
		mov	edx, [ebp+var_20]
		mov	[edx], ecx
		jmp	loc_68F4F24E
; ---------------------------------------------------------------------------

loc_68F4F2FC:				; CODE XREF: sub_68F4EDB0+2A5j
					; DATA XREF: .rdata:off_68F5AF64o
		mov	eax, [ebp+var_28] ; jumptable 68F4F055 case 7
		sub	edi, eax
		cmp	edi, 3
		mov	eax, 0FFFFFFFEh

loc_68F4F309:				; CODE XREF: sub_68F4EDB0+5C6j
		jg	short loc_68F4F2ED ; jumptable 68F4F2B8	default	case
		mov	edx, eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F312:				; CODE XREF: sub_68F4EDB0+2A5j
					; DATA XREF: .rdata:off_68F5AF64o
		mov	eax, [ebp+var_28] ; jumptable 68F4F055 case 6
		sub	edi, eax
		cmp	edi, 2
		mov	eax, 0FFFFFFFEh

loc_68F4F31F:				; CODE XREF: sub_68F4EDB0+591j
		jle	loc_68F4F24E
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_20]
		mov	[ecx], eax
		xor	eax, eax
		jmp	loc_68F4F24E
; ---------------------------------------------------------------------------

loc_68F4F334:				; CODE XREF: sub_68F4EDB0+508j
					; DATA XREF: .rdata:off_68F5B048o
		mov	eax, [ebp+var_28] ; jumptable 68F4F2B8 case 5
		sub	edi, eax
		cmp	edi, 1
		mov	eax, 0FFFFFFFEh
		jmp	short loc_68F4F31F
; ---------------------------------------------------------------------------

loc_68F4F343:				; CODE XREF: sub_68F4EDB0+508j
					; DATA XREF: .rdata:off_68F5B048o
		mov	eax, [ebp+var_28] ; jumptable 68F4F2B8 cases 9-11,21,30,32,36
		mov	ecx, [ebp+var_20]
		mov	[ecx], eax
		mov	eax, 14h
		mov	edx, eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F357:				; CODE XREF: sub_68F4EDB0+508j
					; DATA XREF: .rdata:off_68F5B048o
		mov	ebx, [ebp+var_28] ; jumptable 68F4F2B8 case 7
		mov	eax, 0FFFFFFFEh
		sub	edi, ebx
		cmp	edi, 3
		jmp	loc_68F4F242
; ---------------------------------------------------------------------------

loc_68F4F369:				; CODE XREF: sub_68F4EDB0+508j
					; DATA XREF: .rdata:off_68F5B048o
		mov	esi, [ebp+var_28] ; jumptable 68F4F2B8 case 6
		mov	eax, 0FFFFFFFEh
		sub	edi, esi
		cmp	edi, 2
		jmp	short loc_68F4F309
; ---------------------------------------------------------------------------

loc_68F4F378:				; CODE XREF: sub_68F4EDB0+19Aj
		cmp	eax, 15h
		jnz	loc_68F4EF5C

loc_68F4F381:				; CODE XREF: sub_68F4EDB0+194j
		add	ebx, 2
		jmp	loc_68F4EF20
; ---------------------------------------------------------------------------
		align 10h

loc_68F4F390:				; CODE XREF: sub_68F4EDB0+180j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F4EF41
; ---------------------------------------------------------------------------

loc_68F4F3A0:				; CODE XREF: sub_68F4EDB0+2DEj
		movzx	ecx, byte ptr [esi]
		movsx	eax, bl
		movsx	edx, cl
		mov	[ebp+var_58], cl
		call	sub_68F4CDA0
		jmp	loc_68F4F0A5
; ---------------------------------------------------------------------------

loc_68F4F3B6:				; CODE XREF: sub_68F4EDB0+174j
		mov	eax, [ebp+var_20]
		mov	edx, 0Fh
		mov	[eax], ebx
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F3C5:				; CODE XREF: sub_68F4EDB0+54j
					; sub_68F4EDB0+718j ...
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F3CF:				; CODE XREF: sub_68F4EDB0+340j
		mov	ecx, [ebp+var_2C]
		movzx	eax, ds:byte_68F58980[ecx]
		lea	eax, [edx+eax*8]
		test	ds:dword_68F58480[eax*4], ebx
		jz	loc_68F4EE2B	; jumptable 68F4EDFA default case
		add	esi, 2
		jmp	loc_68F4F1CA	; jumptable 68F4F4FE default case
; ---------------------------------------------------------------------------

loc_68F4F3F1:				; CODE XREF: sub_68F4EDB0+218j
		movsx	edx, byte ptr [esi]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F4EFD9
; ---------------------------------------------------------------------------

loc_68F4F401:				; CODE XREF: sub_68F4EDB0+D5j
		movsx	edx, byte ptr [esi]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	loc_68F4EE96
; ---------------------------------------------------------------------------

loc_68F4F413:				; CODE XREF: sub_68F4EDB0+2D2j
		mov	edx, [ebp+var_24]
		neg	edx
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F41D:				; CODE XREF: sub_68F4EDB0+287j
		movsx	edx, byte ptr [esi+2]
		movsx	eax, bl
		call	sub_68F4CDA0
		jmp	loc_68F4F049
; ---------------------------------------------------------------------------

loc_68F4F42E:				; CODE XREF: sub_68F4EDB0+141j
		lea	eax, [esi+2]
		mov	edx, 0FFFFFFFFh
		cmp	eax, edi
		jz	loc_68F4EE32
		cmp	byte ptr [esi+3], 0
		jnz	loc_68F4EEF7
		cmp	byte ptr [esi+2], 3Eh
		jnz	loc_68F4EEF7
		mov	edx, [ebp+var_20]
		lea	eax, [esi+4]
		mov	[edx], eax
		mov	edx, 22h
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F464:				; CODE XREF: sub_68F4EDB0+102j
		lea	ebx, [esi+2]
		mov	edx, 0FFFFFFFFh
		cmp	ebx, edi
		jz	loc_68F4EE32
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4F4B8
		movzx	eax, byte ptr [esi+2]
		mov	ecx, [ebp+var_1C]
		movzx	eax, byte ptr [ecx+eax+4Ch]

loc_68F4F488:				; CODE XREF: sub_68F4EDB0+714j
		cmp	eax, 16h
		jz	loc_68F4F56E
		jg	loc_68F4F5C5
		cmp	eax, 14h
		jz	short loc_68F4F4A6

loc_68F4F49C:				; CODE XREF: sub_68F4EDB0+81Dj
		mov	ecx, [ebp+var_20]
		mov	[ecx], ebx
		jmp	loc_68F4EE30
; ---------------------------------------------------------------------------

loc_68F4F4A6:				; CODE XREF: sub_68F4EDB0+6EAj
		mov	edx, [ebp+var_20]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 21h
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F4B8:				; CODE XREF: sub_68F4EDB0+6CAj
		movsx	edx, byte ptr [esi+2]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4F488
; ---------------------------------------------------------------------------

loc_68F4F4C6:				; CODE XREF: sub_68F4EDB0+40Aj
		cmp	esi, edi
		jz	loc_68F4F3C5
		mov	[ebp+var_24], 29h
		movzx	ebx, byte ptr [esi+1]
		test	bl, bl
		jnz	loc_68F4F608
		movzx	edx, byte ptr [esi]
		mov	ecx, [ebp+var_1C]
		movzx	eax, dl
		mov	[ebp+var_58], dl
		movzx	eax, byte ptr [ecx+eax+4Ch]

loc_68F4F4F2:				; CODE XREF: sub_68F4EDB0+869j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F4F1CA	; jumptable 68F4F4FE default case
		jmp	ds:off_68F5B0C8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4F505:				; CODE XREF: sub_68F4EDB0+74Ej
					; DATA XREF: .rdata:off_68F5B0C8o
		movzx	ecx, [ebp+var_58] ; jumptable 68F4F4FE case 29
		movzx	eax, bl
		movzx	edx, ds:byte_68F58980[eax]
		movzx	eax, [ebp+var_58]
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F4F07D	; jumptable 68F4F0B1 cases 22,24-27
					; jumptable 68F4F4FE cases 22,24-27
		mov	ecx, [ebp+var_20]
		mov	[ecx], esi
		jmp	loc_68F4EE30
; ---------------------------------------------------------------------------

loc_68F4F541:				; CODE XREF: sub_68F4EDB0+74Ej
					; DATA XREF: .rdata:off_68F5B0C8o
		sub	edi, esi	; jumptable 68F4F4FE case 7
		mov	edx, 0FFFFFFFEh
		cmp	edi, 3
		jmp	loc_68F4EE57
; ---------------------------------------------------------------------------

loc_68F4F550:				; CODE XREF: sub_68F4EDB0+74Ej
					; DATA XREF: .rdata:off_68F5B0C8o
		sub	edi, esi	; jumptable 68F4F4FE case 6
		mov	edx, 0FFFFFFFEh
		cmp	edi, 2
		jmp	loc_68F4EE46
; ---------------------------------------------------------------------------

loc_68F4F55F:				; CODE XREF: sub_68F4EDB0+74Ej
					; DATA XREF: .rdata:off_68F5B0C8o
		sub	edi, esi	; jumptable 68F4F4FE case 5
		mov	edx, 0FFFFFFFEh
		cmp	edi, 1
		jmp	loc_68F4EE6A
; ---------------------------------------------------------------------------

loc_68F4F56E:				; CODE XREF: sub_68F4EDB0+6DBj
					; sub_68F4EDB0+818j
		add	ebx, 2
		cmp	ebx, edi
		jz	loc_68F4F3C5
		mov	esi, 1
		jmp	short loc_68F4F5AE
; ---------------------------------------------------------------------------

loc_68F4F580:				; CODE XREF: sub_68F4EDB0+804j
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+var_1C]
		movzx	ecx, byte ptr [edx+eax+4Ch]

loc_68F4F58B:				; CODE XREF: sub_68F4EDB0+813j
		cmp	ecx, 1Eh
		ja	loc_68F4F630
		mov	eax, esi
		shl	eax, cl
		test	eax, 1400000h
		jz	loc_68F4F646
		add	ebx, 2
		cmp	ebx, edi
		jz	loc_68F4F3C5

loc_68F4F5AE:				; CODE XREF: sub_68F4EDB0+7CEj
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jz	short loc_68F4F580
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	short loc_68F4F58B
; ---------------------------------------------------------------------------

loc_68F4F5C5:				; CODE XREF: sub_68F4EDB0+6E1j
		cmp	eax, 18h
		jz	short loc_68F4F56E
		cmp	eax, 1Bh
		jnz	loc_68F4F49C
		mov	eax, [ebp+var_20]
		mov	[esp+68h+var_68], edi
		lea	edx, [ebx+2]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebp+var_1C]
		call	sub_68F4D220
		mov	edx, eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F5EF:				; CODE XREF: sub_68F4EDB0+4E9j
		mov	ecx, [ebp+var_28]
		movsx	eax, bl
		movzx	ecx, byte ptr [ecx]
		movsx	edx, cl
		mov	[ebp+var_48], cl
		call	sub_68F4CDA0
		jmp	loc_68F4F2B0
; ---------------------------------------------------------------------------

loc_68F4F608:				; CODE XREF: sub_68F4EDB0+72Bj
		movzx	eax, byte ptr [esi]
		movsx	edx, al
		mov	[ebp+var_58], al
		movsx	eax, bl
		call	sub_68F4CDA0
		jmp	loc_68F4F4F2
; ---------------------------------------------------------------------------

loc_68F4F61E:				; CODE XREF: sub_68F4EDB0+F7j
		mov	edx, [ebp+var_20]
		lea	eax, [esi-2]
		mov	[edx], eax
		mov	edx, 1Dh
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F630:				; CODE XREF: sub_68F4EDB0+7DEj
					; sub_68F4EDB0+8A2j ...
		mov	eax, [ebp+var_20]
		mov	[eax], ebx
		jmp	loc_68F4EE30
; ---------------------------------------------------------------------------

loc_68F4F63A:				; CODE XREF: sub_68F4EDB0+4DAj
		mov	eax, 0FFFFFFECh
		mov	edx, eax
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F646:				; CODE XREF: sub_68F4EDB0+7EDj
		test	eax, 200600h
		jnz	short loc_68F4F687
		test	eax, 40000000h
		jz	short loc_68F4F630
		lea	eax, [ebx+2]
		mov	edx, 0FFFFFFFFh
		cmp	eax, edi
		jz	loc_68F4EE32
		movzx	eax, byte ptr [ebx+3]
		test	al, al
		jnz	short loc_68F4F6A5
		movzx	eax, byte ptr [ebx+2]
		mov	edx, [ebp+var_1C]
		movzx	ecx, byte ptr [edx+eax+4Ch]

loc_68F4F678:				; CODE XREF: sub_68F4EDB0+903j
		cmp	ecx, 1Eh
		ja	short loc_68F4F687
		shl	esi, cl
		and	esi, 40200600h
		jnz	short loc_68F4F630

loc_68F4F687:				; CODE XREF: sub_68F4EDB0+89Bj
					; sub_68F4EDB0+8CBj
		mov	ecx, [ebp+var_20]
		mov	edx, 10h
		mov	[ecx], ebx
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F696:				; CODE XREF: sub_68F4EDB0+15Bj
		mov	eax, [ebp+var_20]
		mov	edx, 0FFFFFFF1h
		mov	[eax], edi
		jmp	loc_68F4EE32
; ---------------------------------------------------------------------------

loc_68F4F6A5:				; CODE XREF: sub_68F4EDB0+8BAj
		movsx	edx, byte ptr [ebx+2]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	short loc_68F4F678
sub_68F4EDB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4F6C0	proc near		; DATA XREF: .rdata:68F57C10o
					; .rdata:68F58DB0o ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		cmp	ebx, esi
		mov	[ebp+var_10], eax
		mov	eax, 0FFFFFFFCh
		mov	[ebp+var_14], edx
		jz	short loc_68F4F716
		mov	edi, ebx

loc_68F4F6E6:				; CODE XREF: sub_68F4F6C0+4Aj
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4F720
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+var_10]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4F6F9:				; CODE XREF: sub_68F4F6C0+6Bj
		cmp	eax, 15h	; switch 22 cases
		ja	short loc_68F4F705 ; jumptable 68F4F6FE	default	case
		jmp	ds:off_68F5B12C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4F705:				; CODE XREF: sub_68F4F6C0+3Cj
					; sub_68F4F6C0+3Ej
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4F6FE default case

loc_68F4F708:				; CODE XREF: sub_68F4F6C0+ADj
					; sub_68F4F6C0+B2j
		cmp	ebx, esi
		jnz	short loc_68F4F6E6

loc_68F4F70C:				; CODE XREF: sub_68F4F6C0+7Ej
					; sub_68F4F6C0+B6j ...
		mov	edx, [ebp+var_14]
		mov	[edx], ebx

loc_68F4F711:				; CODE XREF: sub_68F4F6C0+7Aj
		mov	eax, 6

loc_68F4F716:				; CODE XREF: sub_68F4F6C0+22j
					; sub_68F4F6C0+C2j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4F720:				; CODE XREF: sub_68F4F6C0+2Cj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4F6F9
; ---------------------------------------------------------------------------

loc_68F4F72D:				; CODE XREF: sub_68F4F6C0+3Ej
					; DATA XREF: .rdata:off_68F5B12Co
		cmp	ebx, edi	; jumptable 68F4F6FE case 21
		jz	loc_68F4F7DC
		mov	eax, [ebp+var_14]
		mov	[eax], ebx
		jmp	short loc_68F4F711
; ---------------------------------------------------------------------------

loc_68F4F73C:				; CODE XREF: sub_68F4F6C0+3Ej
					; DATA XREF: .rdata:off_68F5B12Co
		cmp	ebx, edi	; jumptable 68F4F6FE case 3
		jnz	short loc_68F4F70C
		mov	[ebp+arg_0], esi
		mov	eax, [ebp+var_14]
		lea	edx, [ebx+2]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+var_10]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F4D800
; ---------------------------------------------------------------------------

loc_68F4F75B:				; CODE XREF: sub_68F4F6C0+3Ej
					; DATA XREF: .rdata:off_68F5B12Co
		mov	eax, [ebp+var_14] ; jumptable 68F4F6FE case 2
		mov	[eax], ebx
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4F76A:				; CODE XREF: sub_68F4F6C0+3Ej
					; DATA XREF: .rdata:off_68F5B12Co
		add	ebx, 3		; jumptable 68F4F6FE case 6
		jmp	short loc_68F4F708
; ---------------------------------------------------------------------------

loc_68F4F76F:				; CODE XREF: sub_68F4F6C0+3Ej
					; DATA XREF: .rdata:off_68F5B12Co
		add	ebx, 4		; jumptable 68F4F6FE case 7
		jmp	short loc_68F4F708
; ---------------------------------------------------------------------------

loc_68F4F774:				; CODE XREF: sub_68F4F6C0+3Ej
					; DATA XREF: .rdata:off_68F5B12Co
		cmp	ebx, edi	; jumptable 68F4F6FE case 9
		jnz	short loc_68F4F70C
		add	ebx, 2
		mov	eax, 0FFFFFFFDh
		cmp	ebx, esi
		jz	short loc_68F4F716
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4F7C2
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+var_10]
		cmp	byte ptr [edx+eax+4Ch],	0Ah

loc_68F4F797:				; CODE XREF: sub_68F4F6C0+110j
		jz	short loc_68F4F7D2
		mov	eax, [ebp+var_14]
		mov	[eax], ebx

loc_68F4F79E:				; CODE XREF: sub_68F4F6C0+11Aj
		mov	eax, 7

loc_68F4F7A3:				; CODE XREF: sub_68F4F6C0+100j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4F7AB:				; CODE XREF: sub_68F4F6C0+3Ej
					; DATA XREF: .rdata:off_68F5B12Co
		cmp	ebx, edi	; jumptable 68F4F6FE case 10
		jnz	loc_68F4F70C
		mov	edx, [ebp+var_14]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 7
		jmp	short loc_68F4F7A3
; ---------------------------------------------------------------------------

loc_68F4F7C2:				; CODE XREF: sub_68F4F6C0+CAj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jmp	short loc_68F4F797
; ---------------------------------------------------------------------------

loc_68F4F7D2:				; CODE XREF: sub_68F4F6C0:loc_68F4F797j
		mov	eax, [ebp+var_14]
		add	ebx, 2
		mov	[eax], ebx
		jmp	short loc_68F4F79E
; ---------------------------------------------------------------------------

loc_68F4F7DC:				; CODE XREF: sub_68F4F6C0+6Fj
		mov	edx, [ebp+var_14]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 27h
		jmp	loc_68F4F716
sub_68F4F6C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4F7F0	proc near		; DATA XREF: .rdata:68F57C14o
					; .rdata:68F58DB4o ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		cmp	ebx, esi
		mov	[ebp+var_10], eax
		mov	eax, 0FFFFFFFCh
		mov	[ebp+var_14], edx
		jz	short loc_68F4F853
		mov	edi, ebx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4F820:				; CODE XREF: sub_68F4F7F0+57j
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4F860
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+var_10]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4F833:				; CODE XREF: sub_68F4F7F0+7Bj
		sub	eax, 3		; switch 28 cases
		cmp	eax, 1Bh
		ja	short loc_68F4F842 ; jumptable 68F4F83B	default	case
		jmp	ds:off_68F5B184[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4F842:				; CODE XREF: sub_68F4F7F0+49j
					; sub_68F4F7F0+4Bj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F4F83B default case

loc_68F4F845:				; CODE XREF: sub_68F4F7F0+A6j
					; sub_68F4F7F0+CAj
		cmp	ebx, esi
		jnz	short loc_68F4F820

loc_68F4F849:				; CODE XREF: sub_68F4F7F0+105j
		mov	eax, [ebp+var_14]
		mov	[eax], ebx

loc_68F4F84E:				; CODE XREF: sub_68F4F7F0+11Fj
		mov	eax, 6

loc_68F4F853:				; CODE XREF: sub_68F4F7F0+22j
					; sub_68F4F7F0+9Dj ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4F860:				; CODE XREF: sub_68F4F7F0+36j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4F833
; ---------------------------------------------------------------------------

loc_68F4F86D:				; CODE XREF: sub_68F4F7F0+4Bj
					; DATA XREF: .rdata:off_68F5B184o
		cmp	ebx, edi	; jumptable 68F4F83B case 30
		jnz	loc_68F4F90A
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		lea	edx, [ebx+2]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+var_10]
		call	sub_68F4EB60
		cmp	eax, 16h
		jnz	short loc_68F4F853
		xor	eax, eax
		jmp	short loc_68F4F853
; ---------------------------------------------------------------------------

loc_68F4F893:				; CODE XREF: sub_68F4F7F0+4Bj
					; DATA XREF: .rdata:off_68F5B184o
		add	ebx, 3		; jumptable 68F4F83B case 6
		jmp	short loc_68F4F845
; ---------------------------------------------------------------------------

loc_68F4F898:				; CODE XREF: sub_68F4F7F0+4Bj
					; DATA XREF: .rdata:off_68F5B184o
		cmp	ebx, edi	; jumptable 68F4F83B case 3
		jnz	short loc_68F4F90A
		mov	[ebp+arg_0], esi
		mov	eax, [ebp+var_14]
		lea	edx, [ebx+2]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+var_10]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F4D800
; ---------------------------------------------------------------------------

loc_68F4F8B7:				; CODE XREF: sub_68F4F7F0+4Bj
					; DATA XREF: .rdata:off_68F5B184o
		add	ebx, 4		; jumptable 68F4F83B case 7
		jmp	short loc_68F4F845
; ---------------------------------------------------------------------------

loc_68F4F8BC:				; CODE XREF: sub_68F4F7F0+4Bj
					; DATA XREF: .rdata:off_68F5B184o
		cmp	ebx, edi	; jumptable 68F4F83B case 9
		jnz	short loc_68F4F90A
		add	ebx, 2
		mov	eax, 0FFFFFFFDh
		cmp	ebx, esi
		jz	short loc_68F4F853
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4F914
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+var_10]
		cmp	byte ptr [edx+eax+4Ch],	0Ah

loc_68F4F8DF:				; CODE XREF: sub_68F4F7F0+132j
		jz	short loc_68F4F924
		mov	eax, [ebp+var_14]
		mov	[eax], ebx

loc_68F4F8E6:				; CODE XREF: sub_68F4F7F0+13Cj
		mov	eax, 7

loc_68F4F8EB:				; CODE XREF: sub_68F4F7F0+118j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4F8F3:				; CODE XREF: sub_68F4F7F0+4Bj
					; DATA XREF: .rdata:off_68F5B184o
		cmp	ebx, edi	; jumptable 68F4F83B case 10
		jnz	loc_68F4F849
		mov	edx, [ebp+var_14]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 7
		jmp	short loc_68F4F8EB
; ---------------------------------------------------------------------------

loc_68F4F90A:				; CODE XREF: sub_68F4F7F0+7Fj
					; sub_68F4F7F0+AAj ...
		mov	edx, [ebp+var_14]
		mov	[edx], ebx
		jmp	loc_68F4F84E
; ---------------------------------------------------------------------------

loc_68F4F914:				; CODE XREF: sub_68F4F7F0+E2j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jmp	short loc_68F4F8DF
; ---------------------------------------------------------------------------

loc_68F4F924:				; CODE XREF: sub_68F4F7F0:loc_68F4F8DFj
		mov	eax, [ebp+var_14]
		add	ebx, 2
		mov	[eax], ebx
		jmp	short loc_68F4F8E6
sub_68F4F7F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4F930	proc near		; DATA XREF: .rdata:68F57C0Co
					; .rdata:68F58DACo ...

var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	esi, [ebp+arg_8]
		mov	[ebp+var_10], 0
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_0]
		mov	eax, esi
		sub	eax, ebx
		test	al, 1
		jz	short loc_68F4F960
		and	eax, 0FFFFFFFEh
		lea	esi, [ebx+eax]
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F4F960:				; CODE XREF: sub_68F4F930+1Fj
					; sub_68F4F930+5Bj ...
		cmp	ebx, esi
		jz	short loc_68F4F9B7

loc_68F4F964:				; CODE XREF: sub_68F4F930+85j
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F4F9C2
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4F974:				; CODE XREF: sub_68F4F930+9Dj
		cmp	eax, 8		; switch 9 cases
		ja	short loc_68F4F9B0 ; jumptable 68F4F979	default	case
		jmp	ds:off_68F5B1F4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4F980:				; CODE XREF: sub_68F4F930+49j
					; DATA XREF: .rdata:off_68F5B1F4o
		add	ebx, 2		; jumptable 68F4F979 case 2
		cmp	ebx, esi
		jz	short loc_68F4F9B7
		cmp	byte ptr [ebx+1], 0
		jnz	short loc_68F4F960
		cmp	byte ptr [ebx],	21h
		jnz	short loc_68F4F960
		add	ebx, 2
		cmp	ebx, esi
		jz	short loc_68F4F9B7
		cmp	byte ptr [ebx+1], 0
		jnz	short loc_68F4F960
		cmp	byte ptr [ebx],	5Bh
		jnz	short loc_68F4F960
		inc	[ebp+var_10]
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F4F9B0:				; CODE XREF: sub_68F4F930+47j
					; sub_68F4F930+49j ...
		add	ebx, 2		; jumptable 68F4F979 default case
		cmp	ebx, esi
		jnz	short loc_68F4F964

loc_68F4F9B7:				; CODE XREF: sub_68F4F930+32j
					; sub_68F4F930+55j ...
		pop	edx
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4F9C2:				; CODE XREF: sub_68F4F930+3Aj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F4F974
; ---------------------------------------------------------------------------

loc_68F4F9CF:				; CODE XREF: sub_68F4F930+49j
					; DATA XREF: .rdata:off_68F5B1F4o
		mov	eax, [ebp+arg_C] ; jumptable 68F4F979 cases 0,1,8
		mov	[eax], ebx
		xor	eax, eax

loc_68F4F9D6:				; CODE XREF: sub_68F4F930+DAj
					; sub_68F4F930+130j
		pop	edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4F9DC:				; CODE XREF: sub_68F4F930+49j
					; DATA XREF: .rdata:off_68F5B1F4o
		mov	eax, esi	; jumptable 68F4F979 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F4FA05
		add	ebx, 4
		jmp	loc_68F4F960
; ---------------------------------------------------------------------------

loc_68F4F9ED:				; CODE XREF: sub_68F4F930+49j
					; DATA XREF: .rdata:off_68F5B1F4o
		mov	eax, esi	; jumptable 68F4F979 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F4FA05
		add	ebx, 3
		jmp	loc_68F4F960
; ---------------------------------------------------------------------------

loc_68F4F9FE:				; CODE XREF: sub_68F4F930+49j
					; DATA XREF: .rdata:off_68F5B1F4o
		mov	eax, esi	; jumptable 68F4F979 case 5
		sub	eax, ebx
		dec	eax
		jg	short loc_68F4F9B0 ; jumptable 68F4F979	default	case

loc_68F4FA05:				; CODE XREF: sub_68F4F930+B3j
					; sub_68F4F930+C4j
		mov	eax, 0FFFFFFFEh
		jmp	short loc_68F4F9D6
; ---------------------------------------------------------------------------
		align 10h

loc_68F4FA10:				; CODE XREF: sub_68F4F930+49j
					; DATA XREF: .rdata:off_68F5B1F4o
		add	ebx, 2		; jumptable 68F4F979 case 4
		cmp	ebx, esi
		jz	short loc_68F4F9B7
		cmp	byte ptr [ebx+1], 0
		jnz	loc_68F4F960
		cmp	byte ptr [ebx],	5Dh
		jnz	loc_68F4F960
		add	ebx, 2
		cmp	ebx, esi
		jz	short loc_68F4F9B7
		cmp	byte ptr [ebx+1], 0
		jnz	loc_68F4F960
		cmp	byte ptr [ebx],	3Eh
		jnz	loc_68F4F960
		mov	ecx, [ebp+var_10]
		add	ebx, 2
		test	ecx, ecx
		jz	short loc_68F4FA56
		dec	[ebp+var_10]
		jmp	loc_68F4F960
; ---------------------------------------------------------------------------

loc_68F4FA56:				; CODE XREF: sub_68F4F930+11Cj
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		mov	eax, 2Ah
		jmp	loc_68F4F9D6
sub_68F4F930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4FA70	proc near		; DATA XREF: .rdata:68F57C38o
					; .rdata:68F58DD8o ...

var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		add	ebx, 2
		sub	esi, 2
		cmp	ebx, esi
		jz	short loc_68F4FAEB
		lea	esi, [esi+0]

loc_68F4FA90:				; CODE XREF: sub_68F4FA70+79j
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		mov	[ebp+var_D], al
		jnz	short loc_68F4FAF6
		movzx	eax, byte ptr [ebx]
		mov	[ebp+var_E], al
		movzx	eax, al
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4FAA9:				; CODE XREF: sub_68F4FA70+98j
		lea	ecx, [eax-9]
		cmp	ecx, 1Ah
		ja	short loc_68F4FAD0
		mov	eax, 1
		shl	eax, cl
		test	eax, 7E5C7F3h
		jnz	short loc_68F4FAE4
		test	eax, 22000h
		jnz	short loc_68F4FB10
		test	ah, 10h
		jnz	short loc_68F4FB24
		nop
		lea	esi, [esi+0]

loc_68F4FAD0:				; CODE XREF: sub_68F4FA70+3Fj
		cmp	[ebp+var_D], 0
		jnz	short loc_68F4FB30

loc_68F4FAD6:				; CODE XREF: sub_68F4FA70+ADj
		movsx	eax, [ebp+var_E]
		cmp	eax, 24h
		jz	short loc_68F4FAE4
		cmp	eax, 40h
		jnz	short loc_68F4FB30

loc_68F4FAE4:				; CODE XREF: sub_68F4FA70+4Dj
					; sub_68F4FA70+6Dj ...
		add	ebx, 2

loc_68F4FAE7:				; CODE XREF: sub_68F4FA70+B2j
		cmp	ebx, esi
		jnz	short loc_68F4FA90

loc_68F4FAEB:				; CODE XREF: sub_68F4FA70+1Aj
		pop	ebx
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4FAF6:				; CODE XREF: sub_68F4FA70+29j
		movzx	eax, byte ptr [ebx]
		movsx	edx, al
		mov	[ebp+var_E], al
		movsx	eax, [ebp+var_D]
		call	sub_68F4CDA0
		jmp	short loc_68F4FAA9
; ---------------------------------------------------------------------------
		align 10h

loc_68F4FB10:				; CODE XREF: sub_68F4FA70+54j
		cmp	[ebp+var_D], 0
		jnz	short loc_68F4FB30
		movsx	eax, [ebp+var_E]
		and	eax, 0FFFFFF80h
		jnz	short loc_68F4FAD6
		add	ebx, 2
		jmp	short loc_68F4FAE7
; ---------------------------------------------------------------------------

loc_68F4FB24:				; CODE XREF: sub_68F4FA70+59j
		cmp	[ebp+var_D], 0
		jnz	short loc_68F4FAE4
		cmp	[ebp+var_E], 9
		jnz	short loc_68F4FAE4

loc_68F4FB30:				; CODE XREF: sub_68F4FA70+64j
					; sub_68F4FA70+72j ...
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		pop	ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F4FA70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4FB40	proc near		; DATA XREF: .rdata:68F57C28o
					; .rdata:68F58DC8o ...

var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 0Ch
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_10], 1
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_14], 0
		add	ebx, 2
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		mov	[ebp+var_15], al
		jnz	short loc_68F4FBCD
		lea	esi, [esi+0]

loc_68F4FB70:				; CODE XREF: sub_68F4FB40+8Bj
		movzx	edx, byte ptr [ebx]
		movzx	eax, dl
		mov	[ebp+var_16], dl
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F4FB81:				; CODE XREF: sub_68F4FB40+9Fj
		sub	eax, 3
		lea	ecx, [ebx+2]
		cmp	eax, 1Ah	; switch 27 cases
		ja	short loc_68F4FBC0 ; jumptable 68F4FB8C	default	case
		jmp	ds:off_68F5B218[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4FB93:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		cmp	[ebp+var_10], 2	; jumptable 68F4FB8C case 10
		jz	loc_68F4FD7E
		cmp	esi, edi
		lea	ecx, [ebx+2]
		jge	short loc_68F4FBB0
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx+4], ecx

loc_68F4FBB0:				; CODE XREF: sub_68F4FB40+62j
		mov	[ebp+var_10], 2
		mov	[ebp+var_14], 0Dh
		xchg	ax, ax

loc_68F4FBC0:				; CODE XREF: sub_68F4FB40+4Aj
					; sub_68F4FB40+A9j ...
		mov	ebx, ecx	; jumptable 68F4FB8C default case

loc_68F4FBC2:				; CODE XREF: sub_68F4FB40+CBj
					; sub_68F4FB40+160j ...
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		mov	[ebp+var_15], al
		jz	short loc_68F4FB70

loc_68F4FBCD:				; CODE XREF: sub_68F4FB40+2Bj
		movzx	eax, byte ptr [ebx]
		movsx	edx, al
		mov	[ebp+var_16], al
		movsx	eax, [ebp+var_15]
		call	sub_68F4CDA0
		jmp	short loc_68F4FB81
; ---------------------------------------------------------------------------

loc_68F4FBE1:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		mov	eax, [ebp+var_10] ; jumptable 68F4FB8C cases 2,19,21,26
		lea	ecx, [ebx+2]
		test	eax, eax
		jnz	short loc_68F4FBC0 ; jumptable 68F4FB8C	default	case
		cmp	esi, edi
		jge	short loc_68F4FBFF
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx], ebx
		mov	byte ptr [eax+edx+0Ch],	1

loc_68F4FBFF:				; CODE XREF: sub_68F4FB40+ADj
		mov	[ebp+var_10], 1

loc_68F4FC06:				; CODE XREF: sub_68F4FB40+4Cj
					; sub_68F4FB40+127j
					; DATA XREF: ...
		lea	ecx, [ebx+2]	; jumptable 68F4FB8C cases 1,5,11-13,15-17,20,22-25

loc_68F4FC09:				; CODE XREF: sub_68F4FB40+121j
					; sub_68F4FB40+20Cj ...
		mov	ebx, ecx
		jmp	short loc_68F4FBC2
; ---------------------------------------------------------------------------

loc_68F4FC0D:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		cmp	[ebp+var_10], 1	; jumptable 68F4FB8C case 18
		jz	loc_68F4FD42
		cmp	[ebp+var_10], 2
		lea	ecx, [ebx+2]
		setz	al
		xor	edx, edx
		cmp	esi, edi
		setl	dl
		test	edx, eax
		jz	short loc_68F4FBC0 ; jumptable 68F4FB8C	default	case
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		cmp	byte ptr [eax+edx+0Ch],	0
		jz	short loc_68F4FBC0 ; jumptable 68F4FB8C	default	case
		cmp	[eax+edx+4], ebx
		jz	short loc_68F4FC51
		cmp	[ebp+var_15], 0
		jnz	short loc_68F4FC51
		cmp	[ebp+var_16], 20h
		jz	loc_68F4FD87

loc_68F4FC51:				; CODE XREF: sub_68F4FB40+FFj
					; sub_68F4FB40+105j ...
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		lea	ecx, [ebx+2]
		shl	eax, 4
		mov	byte ptr [eax+edx+0Ch],	0
		jmp	short loc_68F4FC09
; ---------------------------------------------------------------------------

loc_68F4FC63:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		cmp	[ebp+var_10], 2	; jumptable 68F4FB8C cases 8,14
		jz	short loc_68F4FC06 ; jumptable 68F4FB8C	cases 1,5,11-13,15-17,20,22-25
		add	esp, 0Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4FC73:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		cmp	[ebp+var_10], 2	; jumptable 68F4FB8C case 9
		jz	loc_68F4FD51
		cmp	esi, edi
		lea	ecx, [ebx+2]
		jge	short loc_68F4FC90
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx+4], ecx

loc_68F4FC90:				; CODE XREF: sub_68F4FB40+142j
		mov	[ebp+var_10], 2
		mov	ebx, ecx
		mov	[ebp+var_14], 0Ch
		jmp	loc_68F4FBC2
; ---------------------------------------------------------------------------

loc_68F4FCA5:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		cmp	[ebp+var_10], 1	; jumptable 68F4FB8C cases 6,7
		jz	loc_68F4FD42
		cmp	[ebp+var_10], 2
		lea	ecx, [ebx+2]
		setz	al
		xor	edx, edx
		cmp	esi, edi
		setl	dl
		test	edx, eax
		jz	loc_68F4FBC0	; jumptable 68F4FB8C default case

loc_68F4FCC8:				; CODE XREF: sub_68F4FB40+1F9j
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		mov	ebx, ecx
		shl	eax, 4
		mov	byte ptr [eax+edx+0Ch],	0
		jmp	loc_68F4FBC2
; ---------------------------------------------------------------------------

loc_68F4FCDC:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		mov	eax, [ebp+var_10] ; jumptable 68F4FB8C case 4
		test	eax, eax
		jnz	short loc_68F4FCFE
		cmp	esi, edi
		jge	short loc_68F4FCF7
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx], ebx
		mov	byte ptr [eax+edx+0Ch],	1

loc_68F4FCF7:				; CODE XREF: sub_68F4FB40+1A5j
		mov	[ebp+var_10], 1

loc_68F4FCFE:				; CODE XREF: sub_68F4FB40+1A1j
		lea	ecx, [ebx+4]
		mov	ebx, ecx
		jmp	loc_68F4FBC2
; ---------------------------------------------------------------------------

loc_68F4FD08:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		mov	eax, [ebp+var_10] ; jumptable 68F4FB8C case 3
		test	eax, eax
		jnz	short loc_68F4FD2A
		cmp	esi, edi
		jge	short loc_68F4FD23
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx], ebx
		mov	byte ptr [eax+edx+0Ch],	1

loc_68F4FD23:				; CODE XREF: sub_68F4FB40+1D1j
		mov	[ebp+var_10], 1

loc_68F4FD2A:				; CODE XREF: sub_68F4FB40+1CDj
		lea	ecx, [ebx+3]
		mov	ebx, ecx
		jmp	loc_68F4FBC2
; ---------------------------------------------------------------------------

loc_68F4FD34:				; CODE XREF: sub_68F4FB40+4Cj
					; DATA XREF: .rdata:off_68F5B218o
		cmp	esi, edi	; jumptable 68F4FB8C case 0
		lea	ecx, [ebx+2]
		jl	short loc_68F4FCC8
		mov	ebx, ecx
		jmp	loc_68F4FBC2
; ---------------------------------------------------------------------------

loc_68F4FD42:				; CODE XREF: sub_68F4FB40+D1j
					; sub_68F4FB40+169j
		mov	[ebp+var_10], 0
		lea	ecx, [ebx+2]
		jmp	loc_68F4FC09
; ---------------------------------------------------------------------------

loc_68F4FD51:				; CODE XREF: sub_68F4FB40+137j
		cmp	[ebp+var_14], 0Ch
		lea	ecx, [ebx+2]

loc_68F4FD58:				; CODE XREF: sub_68F4FB40+245j
		jnz	loc_68F4FBC0	; jumptable 68F4FB8C default case
		mov	[ebp+var_10], 0
		cmp	esi, edi
		jge	short loc_68F4FD75
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx+8], ebx

loc_68F4FD75:				; CODE XREF: sub_68F4FB40+227j
		inc	esi
		lea	ecx, [ebx+2]
		jmp	loc_68F4FC09
; ---------------------------------------------------------------------------

loc_68F4FD7E:				; CODE XREF: sub_68F4FB40+57j
		cmp	[ebp+var_14], 0Dh
		lea	ecx, [ebx+2]
		jmp	short loc_68F4FD58
; ---------------------------------------------------------------------------

loc_68F4FD87:				; CODE XREF: sub_68F4FB40+10Bj
		movzx	eax, byte ptr [ebx+3]
		test	al, al
		jnz	short loc_68F4FDA8
		movzx	eax, byte ptr [ebx+2]
		cmp	al, 20h
		jz	loc_68F4FC51
		mov	edx, [ebp+arg_0]
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]
		jmp	short loc_68F4FDB7
; ---------------------------------------------------------------------------

loc_68F4FDA8:				; CODE XREF: sub_68F4FB40+24Dj
		movsx	edx, byte ptr [ebx+2]
		movsx	eax, al
		call	sub_68F4CDA0
		lea	ecx, [ebx+2]

loc_68F4FDB7:				; CODE XREF: sub_68F4FB40+266j
		cmp	eax, [ebp+var_14]
		jz	loc_68F4FC51
		mov	ebx, ecx
		jmp	loc_68F4FBC2
sub_68F4FB40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4FDD0	proc near		; DATA XREF: .rdata:68F57C2Co
					; .rdata:68F58DCCo ...

arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		mov	ecx, [ebp+arg_4]
		add	ecx, 4
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FE10
		movzx	edx, byte ptr [ecx]
		cmp	dl, 78h
		jz	short loc_68F4FE25
		cmp	dl, 3Bh

loc_68F4FDED:				; CODE XREF: sub_68F4FDD0+3Cj
		jz	short loc_68F4FE60
		movsx	edx, byte ptr [ecx]
		lea	eax, [eax+eax*4]
		lea	eax, [edx+eax*2-30h]
		cmp	eax, 10FFFFh
		jg	short loc_68F4FE42

loc_68F4FE00:				; CODE XREF: sub_68F4FDD0+51j
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FE10
		cmp	byte ptr [ecx],	3Bh
		jmp	short loc_68F4FDED
; ---------------------------------------------------------------------------
		align 10h

loc_68F4FE10:				; CODE XREF: sub_68F4FDD0+10j
					; sub_68F4FDD0+37j
		mov	edx, 0FFFFFFFFh
		lea	eax, [eax+eax*4]
		lea	eax, [edx+eax*2-30h]
		cmp	eax, 10FFFFh
		jle	short loc_68F4FE00
		jmp	short loc_68F4FE42
; ---------------------------------------------------------------------------

loc_68F4FE25:				; CODE XREF: sub_68F4FDD0+18j
					; sub_68F4FDD0+70j
		add	ecx, 2
		mov	edx, 0FFFFFFFFh
		cmp	byte ptr [ecx+1], 0
		jz	short loc_68F4FE50

loc_68F4FE33:				; CODE XREF: sub_68F4FDD0+9Aj
		lea	ebx, [edx-30h]
		cmp	ebx, 36h	; switch 55 cases
		jbe	short loc_68F4FE6C

loc_68F4FE3B:				; CODE XREF: sub_68F4FDD0:loc_68F4FE6Cj
					; sub_68F4FDD0+AAj ...
		cmp	eax, 10FFFFh	; jumptable 68F4FE6C default case
		jle	short loc_68F4FE25

loc_68F4FE42:				; CODE XREF: sub_68F4FDD0+2Ej
					; sub_68F4FDD0+53j
		pop	ebx
		mov	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F4FE50:				; CODE XREF: sub_68F4FDD0+61j
		cmp	byte ptr [ecx],	3Bh
		jnz	short loc_68F4FE67
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4FE60:				; CODE XREF: sub_68F4FDD0:loc_68F4FDEDj
		pop	ebx
		pop	ebp
		jmp	sub_68F4C750
; ---------------------------------------------------------------------------

loc_68F4FE67:				; CODE XREF: sub_68F4FDD0+83j
		movsx	edx, byte ptr [ecx]
		jmp	short loc_68F4FE33
; ---------------------------------------------------------------------------

loc_68F4FE6C:				; CODE XREF: sub_68F4FDD0+69j
		jmp	ds:off_68F5B284[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F4FE73:				; CODE XREF: sub_68F4FDD0:loc_68F4FE6Cj
					; DATA XREF: .rdata:off_68F5B284o
		shl	eax, 4		; jumptable 68F4FE6C cases 49-54
		lea	eax, [edx+eax-57h]
		jmp	short loc_68F4FE3B ; jumptable 68F4FE6C	default	case
; ---------------------------------------------------------------------------

loc_68F4FE7C:				; CODE XREF: sub_68F4FDD0:loc_68F4FE6Cj
					; DATA XREF: .rdata:off_68F5B284o
		shl	eax, 4		; jumptable 68F4FE6C cases 17-22
		lea	eax, [edx+eax-37h]
		jmp	short loc_68F4FE3B ; jumptable 68F4FE6C	default	case
; ---------------------------------------------------------------------------

loc_68F4FE85:				; CODE XREF: sub_68F4FDD0:loc_68F4FE6Cj
					; DATA XREF: .rdata:off_68F5B284o
		shl	eax, 4		; jumptable 68F4FE6C cases 0-9
		or	eax, ebx
		jmp	short loc_68F4FE3B ; jumptable 68F4FE6C	default	case
sub_68F4FDD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4FE90	proc near		; DATA XREF: .rdata:68F57C30o
					; .rdata:68F58DD0o ...

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		sub	eax, ecx
		mov	edx, eax
		shr	edx, 1Fh
		add	eax, edx
		sar	eax, 1
		cmp	eax, 3
		jz	short loc_68F4FF10
		jg	short loc_68F4FEC4
		cmp	eax, 2
		jz	loc_68F4FF40
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4FEC0:				; CODE XREF: sub_68F4FE90+37j
					; sub_68F4FE90+3Dj ...
		xor	eax, eax

loc_68F4FEC2:				; CODE XREF: sub_68F4FE90:loc_68F4FF3Aj
					; sub_68F4FE90+AEj ...
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F4FEC4:				; CODE XREF: sub_68F4FE90+19j
		cmp	eax, 4
		jnz	short loc_68F4FEC0
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FEC0
		movsx	eax, byte ptr [ecx]
		cmp	eax, 61h
		jz	loc_68F4FF79
		cmp	eax, 71h
		jnz	short loc_68F4FEC0
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FEC0
		cmp	byte ptr [ecx],	75h
		jnz	short loc_68F4FEC0
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FEC0
		cmp	byte ptr [ecx],	6Fh
		jnz	short loc_68F4FEC0
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FEC0
		cmp	byte ptr [ecx],	74h
		mov	eax, 22h
		jmp	short loc_68F4FF3A
; ---------------------------------------------------------------------------
		align 10h

loc_68F4FF10:				; CODE XREF: sub_68F4FE90+17j
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FEC0
		cmp	byte ptr [ecx],	61h
		jnz	short loc_68F4FEC0
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FEC0
		cmp	byte ptr [ecx],	6Dh
		jnz	short loc_68F4FEC0
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_68F4FEC0
		cmp	byte ptr [ecx],	70h
		mov	eax, 26h

loc_68F4FF3A:				; CODE XREF: sub_68F4FE90+7Dj
					; sub_68F4FE90+E7j ...
		jz	short loc_68F4FEC2
		xor	eax, eax
		jmp	short loc_68F4FEC2
; ---------------------------------------------------------------------------

loc_68F4FF40:				; CODE XREF: sub_68F4FE90+1Ej
		cmp	byte ptr [ecx+3], 0
		jnz	loc_68F4FEC0
		cmp	byte ptr [ecx+2], 74h
		jnz	loc_68F4FEC0
		cmp	byte ptr [ecx+1], 0
		jnz	loc_68F4FEC0
		movsx	edx, byte ptr [ecx]
		mov	eax, 3Eh
		cmp	edx, 67h
		jz	loc_68F4FEC2
		mov	eax, 3Ch
		cmp	edx, 6Ch
		jmp	short loc_68F4FF3A
; ---------------------------------------------------------------------------

loc_68F4FF79:				; CODE XREF: sub_68F4FE90+45j
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	loc_68F4FEC0
		cmp	byte ptr [ecx],	70h
		jnz	loc_68F4FEC0
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	loc_68F4FEC0
		cmp	byte ptr [ecx],	6Fh
		jnz	loc_68F4FEC0
		add	ecx, 2
		cmp	byte ptr [ecx+1], 0
		jnz	loc_68F4FEC0
		cmp	byte ptr [ecx],	73h
		mov	eax, 27h
		jmp	loc_68F4FF3A
sub_68F4FE90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F4FFC0	proc near		; DATA XREF: .rdata:68F57C18o
					; .rdata:68F58DB8o ...

var_D		= byte ptr -0Dh
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F4FFE0:				; CODE XREF: sub_68F4FFC0+8Cj
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F50005
		movzx	eax, byte ptr [ebx]
		mov	[ebp+var_D], al
		movzx	eax, al
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F4FFF6:				; CODE XREF: sub_68F4FFC0+56j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F50058 ; jumptable 68F4FFFE	default	case
		jmp	ds:off_68F5B360[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50005:				; CODE XREF: sub_68F4FFC0+26j
		movzx	edx, byte ptr [ebx]
		movsx	eax, al
		mov	[ebp+var_D], dl
		movsx	edx, dl
		call	sub_68F4CDA0
		jmp	short loc_68F4FFF6
; ---------------------------------------------------------------------------

loc_68F50018:				; CODE XREF: sub_68F4FFC0+3Ej
					; DATA XREF: .rdata:off_68F5B360o
		movzx	eax, byte ptr [esi] ; jumptable	68F4FFFE case 7
		inc	ebx
		inc	esi
		cmp	[ebp+var_D], al
		jnz	short loc_68F5004E
		movzx	eax, byte ptr [ebx]
		mov	[ebp+var_D], al

loc_68F50028:				; CODE XREF: sub_68F4FFC0+3Ej
					; DATA XREF: .rdata:off_68F5B360o
		movzx	eax, byte ptr [esi] ; jumptable	68F4FFFE case 6
		inc	ebx
		inc	esi
		cmp	[ebp+var_D], al
		jnz	short loc_68F5004E
		movzx	edx, byte ptr [ebx]
		mov	[ebp+var_D], dl

loc_68F50038:				; CODE XREF: sub_68F4FFC0+3Ej
					; DATA XREF: .rdata:off_68F5B360o
		movzx	eax, byte ptr [esi] ; jumptable	68F4FFFE case 5
		inc	ebx
		inc	esi
		cmp	[ebp+var_D], al
		jnz	short loc_68F5004E
		movzx	edx, byte ptr [esi]
		inc	esi
		movzx	eax, byte ptr [ebx]
		inc	ebx

loc_68F5004A:				; CODE XREF: sub_68F4FFC0+E2j
		cmp	al, dl
		jz	short loc_68F4FFE0

loc_68F5004E:				; CODE XREF: sub_68F4FFC0+60j
					; sub_68F4FFC0+70j ...
		xor	edx, edx

loc_68F50050:				; CODE XREF: sub_68F4FFC0+BBj
		mov	eax, edx
		pop	edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F50058:				; CODE XREF: sub_68F4FFC0+3Cj
					; sub_68F4FFC0+3Ej
					; DATA XREF: ...
		movzx	eax, byte ptr [esi+1] ;	jumptable 68F4FFFE default case
		test	al, al
		jnz	short loc_68F500A4
		movzx	eax, byte ptr [esi]
		movzx	ecx, byte ptr [edi+eax+4Ch]

loc_68F50068:				; CODE XREF: sub_68F4FFC0+F1j
		cmp	ecx, 1Dh
		ja	short loc_68F5007D
		mov	eax, 1
		xor	edx, edx
		shl	eax, cl
		test	eax, 2FC000E0h
		jnz	short loc_68F50050

loc_68F5007D:				; CODE XREF: sub_68F4FFC0+ABj
		mov	edx, 1
		mov	eax, edx
		pop	edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F50090:				; CODE XREF: sub_68F4FFC0+3Ej
					; DATA XREF: .rdata:off_68F5B360o
		movzx	eax, byte ptr [esi] ; jumptable	68F4FFFE cases 22-27,29
		inc	ebx
		inc	esi
		cmp	al, [ebp+var_D]
		jnz	short loc_68F5004E
		movzx	edx, byte ptr [ebx]
		inc	ebx
		movzx	eax, byte ptr [esi]
		inc	esi
		jmp	short loc_68F5004A
; ---------------------------------------------------------------------------

loc_68F500A4:				; CODE XREF: sub_68F4FFC0+9Ej
		movsx	edx, byte ptr [esi]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	short loc_68F50068
sub_68F4FFC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F500C0	proc near		; DATA XREF: .rdata:68F57C1Co
					; .rdata:68F58DBCo ...

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ecx, [ebp+arg_C]
		mov	edx, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	short loc_68F500F9
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F500E0:				; CODE XREF: sub_68F500C0+37j
		cmp	edx, ebx
		jz	short loc_68F50103
		cmp	byte ptr [edx+1], 0
		jnz	short loc_68F50103
		cmp	[edx], al
		jnz	short loc_68F50103
		add	edx, 2
		inc	ecx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jnz	short loc_68F500E0

loc_68F500F9:				; CODE XREF: sub_68F500C0+12j
		xor	eax, eax
		cmp	edx, ebx
		setz	al
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F50103:				; CODE XREF: sub_68F500C0+22j
					; sub_68F500C0+28j ...
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
sub_68F500C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F50110	proc near		; DATA XREF: .rdata:68F57C20o
					; .rdata:68F58DC0o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_0]
		push	esi
		push	ebx
		mov	ebx, [ebp+arg_4]
		mov	esi, ebx
		xchg	ax, ax

loc_68F50120:				; CODE XREF: sub_68F50110+63j
					; sub_68F50110+68j ...
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F50140
		movzx	eax, byte ptr [ebx]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F50160 ; jumptable 68F50138	default	case

loc_68F50138:				; CODE XREF: sub_68F50110+41j
		jmp	ds:off_68F5B3C4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F50140:				; CODE XREF: sub_68F50110+16j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		sub	eax, 5
		cmp	eax, 18h
		jbe	short loc_68F50138
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F50160:				; CODE XREF: sub_68F50110+26j
					; sub_68F50110:loc_68F50138j
					; DATA XREF: ...
		sub	ebx, esi	; jumptable 68F50138 default case
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F50170:				; CODE XREF: sub_68F50110:loc_68F50138j
					; DATA XREF: .rdata:off_68F5B3C4o
		add	ebx, 2		; jumptable 68F50138 cases 5,22-27,29
		jmp	short loc_68F50120
; ---------------------------------------------------------------------------

loc_68F50175:				; CODE XREF: sub_68F50110:loc_68F50138j
					; DATA XREF: .rdata:off_68F5B3C4o
		add	ebx, 4		; jumptable 68F50138 case 7
		jmp	short loc_68F50120
; ---------------------------------------------------------------------------
		align 10h

loc_68F50180:				; CODE XREF: sub_68F50110:loc_68F50138j
					; DATA XREF: .rdata:off_68F5B3C4o
		add	ebx, 3		; jumptable 68F50138 case 6
		jmp	short loc_68F50120
sub_68F50110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F50190	proc near		; DATA XREF: .rdata:68F57C24o
					; .rdata:68F58DC4o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_68F501BE
; ---------------------------------------------------------------------------
		align 10h

loc_68F501A0:				; CODE XREF: sub_68F50190+34j
		movzx	eax, byte ptr [ebx]
		movzx	ecx, byte ptr [esi+eax+4Ch]
		cmp	ecx, 15h
		ja	short loc_68F501D8

loc_68F501AD:				; CODE XREF: sub_68F50190+46j
		mov	eax, 1
		shl	eax, cl
		test	eax, 200600h
		jz	short loc_68F501D8
		add	ebx, 2

loc_68F501BE:				; CODE XREF: sub_68F50190+Bj
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jz	short loc_68F501A0
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		cmp	ecx, 15h
		jbe	short loc_68F501AD

loc_68F501D8:				; CODE XREF: sub_68F50190+1Bj
					; sub_68F50190+29j
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F50190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F501E0	proc near		; DATA XREF: .rdata:68F57C34o
					; .rdata:68F58DD4o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_C]
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	ebx, edi
		jz	short loc_68F5023A
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F50200:				; CODE XREF: sub_68F501E0+58j
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F50240
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F50213:				; CODE XREF: sub_68F501E0+6Bj
		sub	eax, 5		; switch 6 cases
		cmp	eax, 5
		ja	short loc_68F50230 ; jumptable 68F5021B	default	case
		jmp	ds:off_68F5B428[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50222:				; CODE XREF: sub_68F501E0+3Bj
					; DATA XREF: .rdata:off_68F5B428o
		inc	dword ptr [esi]	; jumptable 68F5021B case 10
		mov	dword ptr [esi+4], 0FFFFFFFFh
		nop
		lea	esi, [esi+0]

loc_68F50230:				; CODE XREF: sub_68F501E0+39j
					; sub_68F501E0+3Bj
					; DATA XREF: ...
		inc	dword ptr [esi+4] ; jumptable 68F5021B default case
		add	ebx, 2

loc_68F50236:				; CODE XREF: sub_68F501E0+95j
					; sub_68F501E0+9Dj ...
		cmp	ebx, edi
		jnz	short loc_68F50200

loc_68F5023A:				; CODE XREF: sub_68F501E0+11j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F50240:				; CODE XREF: sub_68F501E0+26j
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F50213
; ---------------------------------------------------------------------------

loc_68F5024D:				; CODE XREF: sub_68F501E0+3Bj
					; DATA XREF: .rdata:off_68F5B428o
		inc	dword ptr [esi]	; jumptable 68F5021B case 9
		add	ebx, 2
		cmp	ebx, edi
		jz	short loc_68F5026B
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		jnz	short loc_68F50287
		movzx	eax, byte ptr [ebx]
		mov	edx, [ebp+arg_0]
		cmp	byte ptr [edx+eax+4Ch],	0Ah
		jz	short loc_68F50297

loc_68F5026B:				; CODE XREF: sub_68F501E0+74j
					; sub_68F501E0+B5j ...
		mov	dword ptr [esi+4], 0FFFFFFFFh
		inc	dword ptr [esi+4]
		jmp	short loc_68F50236
; ---------------------------------------------------------------------------

loc_68F50277:				; CODE XREF: sub_68F501E0+3Bj
					; DATA XREF: .rdata:off_68F5B428o
		inc	dword ptr [esi+4] ; jumptable 68F5021B case 7
		add	ebx, 4
		jmp	short loc_68F50236
; ---------------------------------------------------------------------------

loc_68F5027F:				; CODE XREF: sub_68F501E0+3Bj
					; DATA XREF: .rdata:off_68F5B428o
		inc	dword ptr [esi+4] ; jumptable 68F5021B case 6
		add	ebx, 3
		jmp	short loc_68F50236
; ---------------------------------------------------------------------------

loc_68F50287:				; CODE XREF: sub_68F501E0+7Cj
		movsx	edx, byte ptr [ebx]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jnz	short loc_68F5026B

loc_68F50297:				; CODE XREF: sub_68F501E0+89j
		add	ebx, 2
		jmp	short loc_68F5026B
sub_68F501E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F502A0	proc near		; CODE XREF: sub_68F50B00+7ABp
					; sub_68F51E50+7D3p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, esi
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_10], eax
		jz	short loc_68F50314
		cmp	byte ptr [edx],	0
		jz	short loc_68F502D4

loc_68F502C3:				; CODE XREF: sub_68F502A0+38j
					; sub_68F502A0+5Fj ...
		mov	[edi], ebx	; jumptable 68F502FF cases 0,1,8
		xor	eax, eax

loc_68F502C7:				; CODE XREF: sub_68F502A0+79j
					; sub_68F502A0+97j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F502D4:				; CODE XREF: sub_68F502A0+21j
		cmp	byte ptr [edx+1], 2Dh
		jnz	short loc_68F502C3 ; jumptable 68F502FF	cases 0,1,8
		lea	esi, [esi+0]

loc_68F502E0:				; CODE XREF: sub_68F502A0+5Dj
					; sub_68F502A0+5Fj ...
		add	ebx, 2		; jumptable 68F502FF default case

loc_68F502E3:				; CODE XREF: sub_68F502A0+85j
					; sub_68F502A0+8Bj ...
		cmp	ebx, esi
		jz	short loc_68F50314
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F50306
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_10]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F502FA:				; CODE XREF: sub_68F502A0+72j
		cmp	eax, 1Bh	; switch 28 cases
		ja	short loc_68F502E0 ; jumptable 68F502FF	default	case
		jmp	ds:off_68F5B440[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50306:				; CODE XREF: sub_68F502A0+4Cj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F502FA
; ---------------------------------------------------------------------------

loc_68F50314:				; CODE XREF: sub_68F502A0+1Cj
					; sub_68F502A0+45j ...
		mov	eax, 0FFFFFFFFh
		jmp	short loc_68F502C7
; ---------------------------------------------------------------------------

loc_68F5031B:				; CODE XREF: sub_68F502A0+5Fj
					; DATA XREF: .rdata:off_68F5B440o
		add	ebx, 2		; jumptable 68F502FF case 27
		cmp	ebx, esi
		jz	short loc_68F50314
		cmp	byte ptr [ebx],	0
		jnz	short loc_68F502E3
		cmp	byte ptr [ebx+1], 2Dh
		jnz	short loc_68F502E3
		add	ebx, 2
		mov	eax, 0FFFFFFFFh
		cmp	ebx, esi
		jz	short loc_68F502C7
		cmp	byte ptr [ebx],	0
		jnz	short loc_68F502C3 ; jumptable 68F502FF	cases 0,1,8
		cmp	byte ptr [ebx+1], 3Eh
		jnz	loc_68F502C3	; jumptable 68F502FF cases 0,1,8
		lea	eax, [ebx+2]
		mov	[edi], eax
		mov	eax, 0Dh
		jmp	loc_68F502C7
; ---------------------------------------------------------------------------

loc_68F50357:				; CODE XREF: sub_68F502A0+5Fj
					; DATA XREF: .rdata:off_68F5B440o
		mov	eax, esi	; jumptable 68F502FF case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F50384
		add	ebx, 4
		jmp	loc_68F502E3
; ---------------------------------------------------------------------------

loc_68F50368:				; CODE XREF: sub_68F502A0+5Fj
					; DATA XREF: .rdata:off_68F5B440o
		mov	eax, esi	; jumptable 68F502FF case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F50384
		add	ebx, 3
		jmp	loc_68F502E3
; ---------------------------------------------------------------------------

loc_68F50379:				; CODE XREF: sub_68F502A0+5Fj
					; DATA XREF: .rdata:off_68F5B440o
		mov	eax, esi	; jumptable 68F502FF case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F502E0	; jumptable 68F502FF default case

loc_68F50384:				; CODE XREF: sub_68F502A0+BEj
					; sub_68F502A0+CFj
		mov	eax, 0FFFFFFFEh
		jmp	loc_68F502C7
sub_68F502A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F50390	proc near		; CODE XREF: sub_68F50440+14Ep
					; sub_68F50440+191p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_4], esi
		mov	esi, 1
		mov	[esp+8+var_8], ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		sub	eax, edx
		cmp	eax, 6
		mov	dword ptr [ebx], 0Bh
		jz	short loc_68F503C4

loc_68F503B7:				; CODE XREF: sub_68F50390+99j
		mov	eax, esi
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F503C4:				; CODE XREF: sub_68F50390+25j
		cmp	byte ptr [edx],	0
		jnz	short loc_68F503E0
		movsx	eax, byte ptr [edx+1]
		cmp	eax, 58h
		jz	short loc_68F503F2
		cmp	eax, 78h
		jz	short loc_68F503F7
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F503E0:				; CODE XREF: sub_68F50390+37j
					; sub_68F50390+6Dj ...
		mov	esi, 1

loc_68F503E5:				; CODE XREF: sub_68F50390+A6j
		mov	eax, esi
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F503F2:				; CODE XREF: sub_68F50390+40j
		mov	ecx, 1

loc_68F503F7:				; CODE XREF: sub_68F50390+45j
		add	edx, 2
		cmp	byte ptr [edx],	0
		jnz	short loc_68F503E0
		movsx	eax, byte ptr [edx+1]
		cmp	eax, 4Dh
		jz	short loc_68F50438
		cmp	eax, 6Dh
		jnz	short loc_68F503E0

loc_68F5040D:				; CODE XREF: sub_68F50390+ADj
		add	edx, 2
		cmp	byte ptr [edx],	0
		jnz	short loc_68F503E0
		movsx	eax, byte ptr [edx+1]
		cmp	eax, 4Ch
		jz	short loc_68F50427
		cmp	eax, 6Ch
		jnz	short loc_68F503E0
		test	ecx, ecx
		jz	short loc_68F5042B

loc_68F50427:				; CODE XREF: sub_68F50390+8Cj
		xor	esi, esi
		jmp	short loc_68F503B7
; ---------------------------------------------------------------------------

loc_68F5042B:				; CODE XREF: sub_68F50390+95j
		mov	dword ptr [ebx], 0Ch
		mov	esi, 1
		jmp	short loc_68F503E5
; ---------------------------------------------------------------------------

loc_68F50438:				; CODE XREF: sub_68F50390+76j
		mov	ecx, 1
		jmp	short loc_68F5040D
sub_68F50390	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F50440	proc near		; CODE XREF: sub_68F50B00+41Bp
					; sub_68F51E50+123j

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 40h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, esi
		mov	[ebp+var_4], edi
		mov	edi, eax
		mov	eax, 0FFFFFFFFh
		mov	[ebp+var_20], edx
		jz	short loc_68F504AE
		movzx	eax, byte ptr [edx]
		test	al, al
		mov	[ebp+var_21], al
		jz	short loc_68F50490
		movzx	eax, byte ptr [edx+1]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_21]
		call	sub_68F4CDA0
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F504A7 ; jumptable 68F50487	default	case
					; jumptable 68F505BB cases 0,1,8

loc_68F50487:				; CODE XREF: sub_68F50440+65j
		jmp	ds:off_68F5B4B0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F50490:				; CODE XREF: sub_68F50440+2Aj
		movzx	edx, byte ptr [edx+1]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5
		cmp	eax, 18h
		jbe	short loc_68F50487

loc_68F504A7:				; CODE XREF: sub_68F50440+45j
					; sub_68F50440:loc_68F50487j ...
		mov	edx, [ebp+arg_4] ; jumptable 68F50487 default case
					; jumptable 68F505BB cases 0,1,8
		mov	[edx], ebx

loc_68F504AC:				; CODE XREF: sub_68F50440+F1j
					; sub_68F50440+115j
		xor	eax, eax

loc_68F504AE:				; CODE XREF: sub_68F50440+20j
					; sub_68F50440:loc_68F5052Aj ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F504BB:				; CODE XREF: sub_68F50440:loc_68F50487j
					; DATA XREF: .rdata:off_68F5B4B0o
		movzx	eax, [ebp+var_21] ; jumptable 68F50487 case 29
		movzx	edx, ds:byte_68F58380[eax]

loc_68F504C6:				; CODE XREF: sub_68F50440+13Aj
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_38]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F504A7 ; jumptable 68F50487	default	case
					; jumptable 68F505BB cases 0,1,8

loc_68F504EA:				; CODE XREF: sub_68F50440:loc_68F50487j
					; sub_68F50440+D6j
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F50487 cases 22,24
					; jumptable 68F50516 cases 22,24-27
		cmp	ebx, esi
		jz	loc_68F50678
		movzx	eax, byte ptr [ebx]
		test	al, al
		mov	[ebp+var_21], al
		jnz	short loc_68F5055A
		movzx	edx, byte ptr [ebx+1]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F5050E:				; CODE XREF: sub_68F50440+12Dj
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F5052C ; jumptable 68F50516	default	case
		jmp	ds:off_68F5B514[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F50520:				; CODE XREF: sub_68F50440:loc_68F50487j
					; sub_68F50440+D6j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F50487 case 7
					; jumptable 68F50516 case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3

loc_68F5052A:				; CODE XREF: sub_68F50440+FEj
		jle	short loc_68F504AE

loc_68F5052C:				; CODE XREF: sub_68F50440+D4j
					; sub_68F50440+D6j ...
		mov	eax, [ebp+arg_4] ; jumptable 68F50516 default case
		mov	[eax], ebx
		jmp	loc_68F504AC
; ---------------------------------------------------------------------------

loc_68F50536:				; CODE XREF: sub_68F50440:loc_68F50487j
					; sub_68F50440+D6j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F50487 case 5
					; jumptable 68F50516 case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jmp	short loc_68F5052A
; ---------------------------------------------------------------------------

loc_68F50540:				; CODE XREF: sub_68F50440:loc_68F50487j
					; sub_68F50440+D6j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F50487 case 6
					; jumptable 68F50516 case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F504AE
		mov	edx, [ebp+arg_4]
		mov	[edx], ebx
		jmp	loc_68F504AC
; ---------------------------------------------------------------------------

loc_68F5055A:				; CODE XREF: sub_68F50440+BDj
		movzx	eax, byte ptr [ebx+1]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_21]
		call	sub_68F4CDA0
		jmp	short loc_68F5050E
; ---------------------------------------------------------------------------

loc_68F5056F:				; CODE XREF: sub_68F50440+D6j
					; DATA XREF: .rdata:off_68F5B514o
		movzx	eax, [ebp+var_21] ; jumptable 68F50516 case 29
		movzx	edx, ds:byte_68F58980[eax]
		jmp	loc_68F504C6
; ---------------------------------------------------------------------------

loc_68F5057F:				; CODE XREF: sub_68F50440+D6j
					; DATA XREF: .rdata:off_68F5B514o
		mov	[esp+40h+var_40], ebx ;	jumptable 68F50516 cases 9,10,21
		mov	edx, [ebp+var_20]
		lea	eax, [ebp+var_1C]
		mov	[esp+40h+var_3C], eax
		mov	eax, edi
		call	sub_68F50390
		test	eax, eax
		jz	short loc_68F5052C ; jumptable 68F50516	default	case

loc_68F50597:				; CODE XREF: sub_68F50440+179j
					; sub_68F50440+17Bj ...
		add	ebx, 2		; jumptable 68F505BB default case

loc_68F5059A:				; CODE XREF: sub_68F50440+1DBj
					; sub_68F50440+1E5j ...
		cmp	ebx, esi
		jz	loc_68F50678
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	loc_68F50667
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F505B6:				; CODE XREF: sub_68F50440+233j
		cmp	eax, 0Fh	; switch 16 cases
		ja	short loc_68F50597 ; jumptable 68F505BB	default	case
		jmp	ds:off_68F5B578[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F505C2:				; CODE XREF: sub_68F50440+D6j
					; DATA XREF: .rdata:off_68F5B514o
		mov	[esp+40h+var_40], ebx ;	jumptable 68F50516 case	15
		mov	edx, [ebp+var_20]
		lea	eax, [ebp+var_1C]
		mov	[esp+40h+var_3C], eax
		mov	eax, edi
		call	sub_68F50390
		test	eax, eax
		jz	loc_68F504A7	; jumptable 68F50487 default case
					; jumptable 68F505BB cases 0,1,8
		add	ebx, 2
		mov	eax, 0FFFFFFFFh
		cmp	ebx, esi
		jz	loc_68F504AE
		cmp	byte ptr [ebx],	0
		jnz	loc_68F5052C	; jumptable 68F50516 default case
		cmp	byte ptr [ebx+1], 3Eh
		jnz	loc_68F5052C	; jumptable 68F50516 default case

loc_68F50601:				; CODE XREF: sub_68F50440+1EBj
		mov	edx, [ebp+arg_4]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, [ebp+var_1C]
		jmp	loc_68F504AE
; ---------------------------------------------------------------------------

loc_68F50611:				; CODE XREF: sub_68F50440+17Bj
					; DATA XREF: .rdata:off_68F5B578o
		add	ebx, 2		; jumptable 68F505BB case 15
		cmp	ebx, esi
		jz	short loc_68F50678
		cmp	byte ptr [ebx],	0
		jnz	loc_68F5059A
		cmp	byte ptr [ebx+1], 3Eh
		jnz	loc_68F5059A
		jmp	short loc_68F50601
; ---------------------------------------------------------------------------
		align 10h

loc_68F50630:				; CODE XREF: sub_68F50440+17Bj
					; DATA XREF: .rdata:off_68F5B578o
		mov	eax, esi	; jumptable 68F505BB case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F5065D
		add	ebx, 4
		jmp	loc_68F5059A
; ---------------------------------------------------------------------------

loc_68F50641:				; CODE XREF: sub_68F50440+17Bj
					; DATA XREF: .rdata:off_68F5B578o
		mov	eax, esi	; jumptable 68F505BB case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F5065D
		add	ebx, 3
		jmp	loc_68F5059A
; ---------------------------------------------------------------------------

loc_68F50652:				; CODE XREF: sub_68F50440+17Bj
					; DATA XREF: .rdata:off_68F5B578o
		mov	eax, esi	; jumptable 68F505BB case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F50597	; jumptable 68F505BB default case

loc_68F5065D:				; CODE XREF: sub_68F50440+1F7j
					; sub_68F50440+208j
		mov	eax, 0FFFFFFFEh
		jmp	loc_68F504AE
; ---------------------------------------------------------------------------

loc_68F50667:				; CODE XREF: sub_68F50440+167j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F505B6
; ---------------------------------------------------------------------------

loc_68F50678:				; CODE XREF: sub_68F50440+AFj
					; sub_68F50440+15Cj ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_68F504AE
sub_68F50440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F50690	proc near		; DATA XREF: .rdata:68F57D88o
					; .rdata:68F59248o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	edx, 0FFFFFFFCh
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		cmp	ebx, esi
		jz	loc_68F5074A
		mov	eax, esi
		sub	eax, ebx
		test	al, 1
		jnz	short loc_68F50703
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F50716

loc_68F506BB:				; CODE XREF: sub_68F50690+84j
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F506C4:				; CODE XREF: sub_68F50690+92j
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F506E0 ; jumptable 68F506C9	default	case
		jmp	ds:off_68F5B5B8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F506D0:				; CODE XREF: sub_68F50690+39j
					; DATA XREF: .rdata:off_68F5B5B8o
		mov	eax, esi	; jumptable 68F506C9 case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jle	short loc_68F5074A
		lea	esi, [esi+0]

loc_68F506E0:				; CODE XREF: sub_68F50690+37j
					; sub_68F50690+39j ...
		add	ebx, 2		; jumptable 68F506C9 default case

loc_68F506E3:				; CODE XREF: sub_68F50690+103j
					; sub_68F50690+189j ...
		cmp	ebx, esi
		jz	short loc_68F50761

loc_68F506E7:				; CODE XREF: sub_68F50690+CFj
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F50724
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F506F7:				; CODE XREF: sub_68F50690+A0j
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F506E0 ; jumptable 68F506C9	default	case
		jmp	ds:off_68F5B5E4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50703:				; CODE XREF: sub_68F50690+22j
		and	eax, 0FFFFFFFEh
		jz	loc_68F5085F
		lea	esi, [ebx+eax]
		movzx	eax, byte ptr [ebx]
		test	al, al
		jz	short loc_68F506BB

loc_68F50716:				; CODE XREF: sub_68F50690+29j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F506C4
; ---------------------------------------------------------------------------

loc_68F50724:				; CODE XREF: sub_68F50690+5Cj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F506F7
; ---------------------------------------------------------------------------

loc_68F50732:				; CODE XREF: sub_68F50690+6Cj
					; DATA XREF: .rdata:off_68F5B5E4o
		mov	eax, esi	; jumptable 68F506FC case 6
		sub	eax, ebx
		cmp	eax, 2
		jg	short loc_68F50790
		nop
		lea	esi, [esi+0]

loc_68F50740:				; CODE XREF: sub_68F50690+6Cj
					; DATA XREF: .rdata:off_68F5B5E4o
		mov	eax, [ebp+arg_C] ; jumptable 68F506FC cases 0,1,4,8-10
		mov	[eax], ebx
		mov	edx, 6

loc_68F5074A:				; CODE XREF: sub_68F50690+16j
					; sub_68F50690+4Aj ...
		pop	ebx
		mov	eax, edx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F50751:				; CODE XREF: sub_68F50690+6Cj
					; DATA XREF: .rdata:off_68F5B5E4o
		mov	eax, esi	; jumptable 68F506FC case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F50761
		add	ebx, 4

loc_68F5075D:				; CODE XREF: sub_68F50690+171j
		cmp	ebx, esi
		jnz	short loc_68F506E7

loc_68F50761:				; CODE XREF: sub_68F50690+55j
					; sub_68F50690+C8j
		mov	edx, [ebp+arg_C]
		mov	[edx], ebx

loc_68F50766:				; CODE XREF: sub_68F50690+EDj
		mov	edx, 6
		jmp	short loc_68F5074A
; ---------------------------------------------------------------------------

loc_68F5076D:				; CODE XREF: sub_68F50690+6Cj
					; DATA XREF: .rdata:off_68F5B5E4o
		mov	eax, esi	; jumptable 68F506FC case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F506E0	; jumptable 68F506C9 default case
		mov	edx, [ebp+arg_C]
		mov	[edx], ebx
		jmp	short loc_68F50766
; ---------------------------------------------------------------------------

loc_68F5077F:				; CODE XREF: sub_68F50690+39j
					; DATA XREF: .rdata:off_68F5B5B8o
		mov	eax, esi	; jumptable 68F506C9 case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F5074A
		lea	esi, [esi+0]

loc_68F50790:				; CODE XREF: sub_68F50690+A9j
		add	ebx, 3
		jmp	loc_68F506E3
; ---------------------------------------------------------------------------

loc_68F50798:				; CODE XREF: sub_68F50690+39j
					; DATA XREF: .rdata:off_68F5B5B8o
		mov	edx, [ebp+arg_C] ; jumptable 68F506C9 case 10
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 7

loc_68F507A5:				; CODE XREF: sub_68F50690+14Ej
		pop	ebx
		mov	eax, edx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F507AC:				; CODE XREF: sub_68F50690+39j
					; DATA XREF: .rdata:off_68F5B5B8o
		add	ebx, 2		; jumptable 68F506C9 case 9
		mov	edx, 0FFFFFFFFh
		cmp	ebx, esi
		jz	short loc_68F5074A
		movzx	eax, byte ptr [ebx]
		test	al, al
		jz	loc_68F50847
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah

loc_68F507D2:				; CODE XREF: sub_68F50690+1C0j
		jz	short loc_68F50852
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx

loc_68F507D9:				; CODE XREF: sub_68F50690+1CAj
		mov	edx, 7
		jmp	short loc_68F507A5
; ---------------------------------------------------------------------------

loc_68F507E0:				; CODE XREF: sub_68F50690+39j
					; DATA XREF: .rdata:off_68F5B5B8o
		mov	eax, [ebp+arg_C] ; jumptable 68F506C9 cases 0,1,8
		xor	edx, edx
		mov	[eax], ebx
		jmp	loc_68F5074A
; ---------------------------------------------------------------------------

loc_68F507EC:				; CODE XREF: sub_68F50690+39j
					; DATA XREF: .rdata:off_68F5B5B8o
		mov	eax, esi	; jumptable 68F506C9 case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_68F5074A
		add	ebx, 4
		jmp	loc_68F5075D
; ---------------------------------------------------------------------------

loc_68F50806:				; CODE XREF: sub_68F50690+39j
					; DATA XREF: .rdata:off_68F5B5B8o
		add	ebx, 2		; jumptable 68F506C9 case 4
		mov	edx, 0FFFFFFFFh
		cmp	ebx, esi
		jz	loc_68F5074A
		cmp	byte ptr [ebx],	0
		jnz	loc_68F506E3
		cmp	byte ptr [ebx+1], 5Dh
		jnz	loc_68F506E3
		add	ebx, 2
		cmp	ebx, esi
		jz	loc_68F5074A
		cmp	byte ptr [ebx],	0
		jnz	short loc_68F5083F
		cmp	byte ptr [ebx+1], 3Eh
		jz	short loc_68F50869

loc_68F5083F:				; CODE XREF: sub_68F50690+1A7j
		sub	ebx, 2
		jmp	loc_68F506E3
; ---------------------------------------------------------------------------

loc_68F50847:				; CODE XREF: sub_68F50690+12Dj
		movzx	eax, byte ptr [ebx+1]
		cmp	byte ptr [edi+eax+4Ch],	0Ah
		jmp	short loc_68F507D2
; ---------------------------------------------------------------------------

loc_68F50852:				; CODE XREF: sub_68F50690:loc_68F507D2j
		mov	eax, [ebp+arg_C]
		add	ebx, 2
		mov	[eax], ebx
		jmp	loc_68F507D9
; ---------------------------------------------------------------------------

loc_68F5085F:				; CODE XREF: sub_68F50690+76j
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F5074A
; ---------------------------------------------------------------------------

loc_68F50869:				; CODE XREF: sub_68F50690+1ADj
		mov	edx, [ebp+arg_C]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 28h
		jmp	loc_68F5074A
sub_68F50690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F50880	proc near		; CODE XREF: sub_68F50B00+218p
					; sub_68F50B00+C9Fp ...

var_38		= byte ptr -38h
var_1D		= byte ptr -1Dh
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, esi
		mov	[ebp+var_1C], eax
		mov	eax, 0FFFFFFFFh
		mov	[ebp+var_4], edi
		jz	short loc_68F508F1
		movzx	eax, byte ptr [edx]
		test	al, al
		mov	[ebp+var_1D], al
		jz	short loc_68F508D0
		movzx	eax, byte ptr [edx+1]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_1D]
		call	sub_68F4CDA0
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F508EA ; jumptable 68F508C5	default	case

loc_68F508C5:				; CODE XREF: sub_68F50880+68j
		jmp	ds:off_68F5B610[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F508D0:				; CODE XREF: sub_68F50880+28j
		movzx	edx, byte ptr [edx+1]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]
		sub	eax, 5
		cmp	eax, 18h
		jbe	short loc_68F508C5

loc_68F508EA:				; CODE XREF: sub_68F50880+43j
					; sub_68F50880:loc_68F508C5j ...
		mov	edx, [ebp+arg_4] ; jumptable 68F508C5 default case
		mov	[edx], ebx

loc_68F508EF:				; CODE XREF: sub_68F50880+FCj
					; sub_68F50880+120j ...
		xor	eax, eax

loc_68F508F1:				; CODE XREF: sub_68F50880+1Ej
					; sub_68F50880:loc_68F50971j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F508FE:				; CODE XREF: sub_68F50880:loc_68F508C5j
					; DATA XREF: .rdata:off_68F5B610o
		movzx	eax, [ebp+var_1D] ; jumptable 68F508C5 case 29
		movzx	edx, ds:byte_68F58380[eax]

loc_68F50909:				; CODE XREF: sub_68F50880+21Ej
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_38]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F508EA ; jumptable 68F508C5	default	case

loc_68F5092D:				; CODE XREF: sub_68F50880:loc_68F508C5j
					; sub_68F50880+E0j
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F508C5 cases 22,24
					; jumptable 68F50960 cases 22,24-27
		cmp	ebx, esi
		jz	loc_68F50AB5
		movzx	eax, byte ptr [ebx]
		test	al, al
		mov	[ebp+var_1D], al
		jnz	loc_68F50A24
		movzx	edx, byte ptr [ebx+1]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F50958:				; CODE XREF: sub_68F50880+1B7j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F50977 ; jumptable 68F50960	default	case
		jmp	ds:off_68F5B674[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50967:				; CODE XREF: sub_68F50880:loc_68F508C5j
					; sub_68F50880+E0j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F508C5 case 7
					; jumptable 68F50960 case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3

loc_68F50971:				; CODE XREF: sub_68F50880+109j
		jle	loc_68F508F1

loc_68F50977:				; CODE XREF: sub_68F50880+DEj
					; sub_68F50880+E0j
					; DATA XREF: ...
		mov	eax, [ebp+arg_4] ; jumptable 68F50960 default case
		mov	[eax], ebx
		jmp	loc_68F508EF
; ---------------------------------------------------------------------------

loc_68F50981:				; CODE XREF: sub_68F50880:loc_68F508C5j
					; sub_68F50880+E0j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F508C5 case 5
					; jumptable 68F50960 case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jmp	short loc_68F50971
; ---------------------------------------------------------------------------

loc_68F5098B:				; CODE XREF: sub_68F50880:loc_68F508C5j
					; sub_68F50880+E0j
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F508C5 case 6
					; jumptable 68F50960 case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F508F1
		mov	edx, [ebp+arg_4]
		mov	[edx], ebx
		jmp	loc_68F508EF
; ---------------------------------------------------------------------------

loc_68F509A5:				; CODE XREF: sub_68F50880:loc_68F508C5j
					; DATA XREF: .rdata:off_68F5B610o
		lea	edi, [ebx+2]	; jumptable 68F508C5 case 19
		cmp	edi, esi
		jz	loc_68F50AB5
		cmp	byte ptr [ebx+2], 0
		jnz	loc_68F50A3C
		movzx	eax, byte ptr [edi+1]
		cmp	al, 78h
		jnz	short loc_68F50A40
		lea	edi, [ebx+4]
		cmp	edi, esi
		jz	loc_68F50AB5
		movzx	eax, byte ptr [ebx+4]
		test	al, al
		jnz	loc_68F50ADD
		movzx	eax, byte ptr [edi+1]
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F509E5:				; CODE XREF: sub_68F50880+198j
					; sub_68F50880+269j
		sub	eax, 18h
		cmp	eax, 1
		ja	short loc_68F50A1A
		add	edi, 2
		cmp	edi, esi
		jz	loc_68F50AB5
		movzx	eax, byte ptr [edi]
		test	al, al
		jnz	loc_68F50ACC
		movzx	eax, byte ptr [edi+1]
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F50A0F:				; CODE XREF: sub_68F50880+258j
		cmp	eax, 12h
		jz	loc_68F50AEE
		jge	short loc_68F509E5

loc_68F50A1A:				; CODE XREF: sub_68F50880+16Bj
					; sub_68F50880+1F5j
		mov	eax, [ebp+arg_4]
		mov	[eax], edi
		jmp	loc_68F508EF
; ---------------------------------------------------------------------------

loc_68F50A24:				; CODE XREF: sub_68F50880+C0j
		movzx	eax, byte ptr [ebx+1]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_1D]
		call	sub_68F4CDA0
		jmp	loc_68F50958
; ---------------------------------------------------------------------------

loc_68F50A3C:				; CODE XREF: sub_68F50880+134j
		movzx	eax, byte ptr [edi+1]

loc_68F50A40:				; CODE XREF: sub_68F50880+140j
		movzx	ecx, byte ptr [edi]
		test	cl, cl
		jnz	short loc_68F50ABF
		mov	edx, [ebp+var_1C]
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F50A52:				; CODE XREF: sub_68F50880+24Aj
		cmp	eax, 19h
		jz	short loc_68F50A77
		mov	eax, [ebp+arg_4]
		mov	[eax], edi
		jmp	loc_68F508EF
; ---------------------------------------------------------------------------

loc_68F50A61:				; CODE XREF: sub_68F50880+203j
		movzx	eax, byte ptr [edi+1]
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F50A6D:				; CODE XREF: sub_68F50880+211j
		cmp	eax, 12h
		jz	short loc_68F50AEE
		cmp	eax, 19h
		jnz	short loc_68F50A1A

loc_68F50A77:				; CODE XREF: sub_68F50880+1D5j
		add	edi, 2
		cmp	edi, esi
		jz	short loc_68F50AB5
		movzx	eax, byte ptr [edi]
		test	al, al
		jz	short loc_68F50A61
		movsx	edx, byte ptr [edi+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F50A6D
; ---------------------------------------------------------------------------

loc_68F50A93:				; CODE XREF: sub_68F50880+E0j
					; DATA XREF: .rdata:off_68F5B674o
		movzx	eax, [ebp+var_1D] ; jumptable 68F50960 case 29
		movzx	edx, ds:byte_68F58980[eax]
		jmp	loc_68F50909
; ---------------------------------------------------------------------------

loc_68F50AA3:				; CODE XREF: sub_68F50880+E0j
					; DATA XREF: .rdata:off_68F5B674o
		mov	edx, [ebp+arg_4] ; jumptable 68F50960 case 18
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 9
		jmp	loc_68F508F1
; ---------------------------------------------------------------------------

loc_68F50AB5:				; CODE XREF: sub_68F50880+B2j
					; sub_68F50880+12Aj ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_68F508F1
; ---------------------------------------------------------------------------

loc_68F50ABF:				; CODE XREF: sub_68F50880+1C5j
		movsx	edx, al
		movsx	eax, cl
		call	sub_68F4CDA0
		jmp	short loc_68F50A52
; ---------------------------------------------------------------------------

loc_68F50ACC:				; CODE XREF: sub_68F50880+17Dj
		movsx	edx, byte ptr [edi+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F50A0F
; ---------------------------------------------------------------------------

loc_68F50ADD:				; CODE XREF: sub_68F50880+153j
		movsx	edx, byte ptr [edi+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F509E5
; ---------------------------------------------------------------------------

loc_68F50AEE:				; CODE XREF: sub_68F50880+192j
					; sub_68F50880+1F0j
		mov	edx, [ebp+arg_4]
		lea	eax, [edi+2]
		mov	[edx], eax
		mov	eax, 0Ah
		jmp	loc_68F508F1
sub_68F50880	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F50B00	proc near		; DATA XREF: .rdata:68F57D84o
					; .rdata:68F59244o

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_59		= byte ptr -59h
var_58		= byte ptr -58h
var_39		= byte ptr -39h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	edx, 0FFFFFFFCh
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		cmp	ebx, esi
		jz	loc_68F50BC0
		mov	eax, esi
		sub	eax, ebx
		test	al, 1
		jnz	short loc_68F50B43
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F50B56

loc_68F50B2E:				; CODE XREF: sub_68F50B00+54j
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F50B70 ; jumptable 68F50B3C	default	case

loc_68F50B3C:				; CODE XREF: sub_68F50B00+65j
		jmp	ds:off_68F5B6E0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50B43:				; CODE XREF: sub_68F50B00+25j
		and	eax, 0FFFFFFFEh
		jz	loc_68F51201
		lea	esi, [ebx+eax]
		movzx	eax, byte ptr [ebx]
		test	al, al
		jz	short loc_68F50B2E

loc_68F50B56:				; CODE XREF: sub_68F50B00+2Cj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jbe	short loc_68F50B3C
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F50B70:				; CODE XREF: sub_68F50B00+3Aj
					; sub_68F50B00+8Ej ...
		add	ebx, 2		; jumptable 68F50B3C default case

loc_68F50B73:				; CODE XREF: sub_68F50B00+11Cj
					; sub_68F50B00+133j ...
		cmp	ebx, esi
		jz	loc_68F50BF7
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F50B97
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F50B8B:				; CODE XREF: sub_68F50B00+A3j
		cmp	eax, 0Ah	; switch 11 cases
		ja	short loc_68F50B70 ; jumptable 68F50B3C	default	case
		jmp	ds:off_68F5B70C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50B97:				; CODE XREF: sub_68F50B00+80j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F50B8B
; ---------------------------------------------------------------------------

loc_68F50BA5:				; CODE XREF: sub_68F50B00+90j
					; DATA XREF: .rdata:off_68F5B70Co
		mov	eax, esi	; jumptable 68F50B90 case 6
		sub	eax, ebx
		cmp	eax, 2
		jg	loc_68F50C50
		mov	ecx, [ebp+arg_C]
		mov	edx, 6
		mov	[ecx], ebx
		lea	esi, [esi+0]

loc_68F50BC0:				; CODE XREF: sub_68F50B00+19j
					; sub_68F50B00+EAj ...
		add	esp, 6Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F50BCA:				; CODE XREF: sub_68F50B00+90j
					; DATA XREF: .rdata:off_68F5B70Co
		mov	eax, esi	; jumptable 68F50B90 case 7
		sub	eax, ebx
		cmp	eax, 3
		jg	short loc_68F50C30
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F50BE0:				; CODE XREF: sub_68F50B00+90j
					; sub_68F50B00+108j ...
		mov	eax, [ebp+arg_C] ; jumptable 68F50B90 cases 0-3,8-10
		mov	[eax], ebx
		mov	edx, 6
		jmp	short loc_68F50BC0
; ---------------------------------------------------------------------------

loc_68F50BEC:				; CODE XREF: sub_68F50B00+90j
					; DATA XREF: .rdata:off_68F5B70Co
		mov	eax, esi	; jumptable 68F50B90 case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F50B70	; jumptable 68F50B3C default case

loc_68F50BF7:				; CODE XREF: sub_68F50B00+75j
		mov	edx, [ebp+arg_C]
		mov	[edx], ebx
		mov	edx, 6
		jmp	short loc_68F50BC0
; ---------------------------------------------------------------------------

loc_68F50C03:				; CODE XREF: sub_68F50B00+90j
					; DATA XREF: .rdata:off_68F5B70Co
		lea	eax, [ebx+2]	; jumptable 68F50B90 case 4
		cmp	eax, esi
		jz	short loc_68F50BE0 ; jumptable 68F50B90	cases 0-3,8-10
		cmp	byte ptr [ebx+2], 0
		jnz	short loc_68F50C1A
		cmp	byte ptr [ebx+3], 5Dh
		jz	loc_68F50D63

loc_68F50C1A:				; CODE XREF: sub_68F50B00+10Ej
					; sub_68F50B00+272j ...
		mov	ebx, eax
		jmp	loc_68F50B73
; ---------------------------------------------------------------------------

loc_68F50C21:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		mov	eax, esi	; jumptable 68F50B3C case 7
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F50BC0
		nop

loc_68F50C30:				; CODE XREF: sub_68F50B00+D1j
		add	ebx, 4
		jmp	loc_68F50B73
; ---------------------------------------------------------------------------

loc_68F50C38:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		mov	eax, esi	; jumptable 68F50B3C case 6
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		cmp	eax, 2
		jle	loc_68F50BC0
		lea	esi, [esi+0]

loc_68F50C50:				; CODE XREF: sub_68F50B00+ACj
		add	ebx, 3
		jmp	loc_68F50B73
; ---------------------------------------------------------------------------

loc_68F50C58:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		mov	edx, [ebp+arg_C] ; jumptable 68F50B3C case 10
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 7
		jmp	loc_68F50BC0
; ---------------------------------------------------------------------------

loc_68F50C6A:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		add	ebx, 2		; jumptable 68F50B3C case 9
		mov	edx, 0FFFFFFFDh
		cmp	ebx, esi
		jz	loc_68F50BC0
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	loc_68F511D6
		movzx	eax, byte ptr [ebx+1]
		cmp	byte ptr [edi+eax+4Ch],	0Ah

loc_68F50C8E:				; CODE XREF: sub_68F50B00+6E5j
		jz	loc_68F50D90
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx

loc_68F50C99:				; CODE XREF: sub_68F50B00+298j
		mov	edx, 7
		jmp	loc_68F50BC0
; ---------------------------------------------------------------------------

loc_68F50CA3:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		mov	eax, [ebp+arg_C] ; jumptable 68F50B3C cases 0,1,8
		xor	edx, edx
		mov	[eax], ebx
		jmp	loc_68F50BC0
; ---------------------------------------------------------------------------

loc_68F50CAF:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		mov	eax, esi	; jumptable 68F50B3C case 5
		mov	edx, 0FFFFFFFEh
		sub	eax, ebx
		dec	eax
		jg	loc_68F50B70	; jumptable 68F50B3C default case
		jmp	loc_68F50BC0
; ---------------------------------------------------------------------------

loc_68F50CC4:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		add	ebx, 2		; jumptable 68F50B3C case 4
		mov	edx, 0FFFFFFFBh
		cmp	ebx, esi
		jz	loc_68F50BC0
		cmp	byte ptr [ebx],	0
		jnz	loc_68F50B73
		cmp	byte ptr [ebx+1], 5Dh
		jnz	loc_68F50B73
		add	ebx, 2
		cmp	ebx, esi
		jz	loc_68F50BC0
		cmp	byte ptr [ebx],	0
		jnz	short loc_68F50D01
		cmp	byte ptr [ebx+1], 3Eh
		jz	loc_68F50F4B

loc_68F50D01:				; CODE XREF: sub_68F50B00+1F5j
		sub	ebx, 2
		jmp	loc_68F50B73
; ---------------------------------------------------------------------------

loc_68F50D09:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		mov	ecx, [ebp+arg_C] ; jumptable 68F50B3C case 3
		lea	edx, [ebx+2]
		mov	eax, edi
		mov	[esp+78h+var_78], esi
		mov	[esp+78h+var_74], ecx
		call	sub_68F50880

loc_68F50D1D:				; CODE XREF: sub_68F50B00+237j
					; sub_68F50B00+340j ...
		mov	edx, eax

loc_68F50D1F:				; CODE XREF: sub_68F50B00+2A9j
					; sub_68F50B00+32Ej ...
		add	esp, 6Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F50D29:				; CODE XREF: sub_68F50B00:loc_68F50B3Cj
					; DATA XREF: .rdata:off_68F5B6E0o
		lea	eax, [ebx+2]	; jumptable 68F50B3C case 2
		mov	[ebp+var_20], eax
		mov	eax, 0FFFFFFFFh
		cmp	[ebp+var_20], esi
		jz	short loc_68F50D1D
		movzx	eax, byte ptr [ebx+2]
		test	al, al
		jnz	loc_68F511EA
		mov	edx, [ebp+var_20]
		movzx	ebx, byte ptr [edx+1]
		movzx	eax, bl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F50D54:				; CODE XREF: sub_68F50B00+6FCj
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F50D9D ; jumptable 68F50D5C	default	case
		jmp	ds:off_68F5B738[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50D63:				; CODE XREF: sub_68F50B00+114j
		lea	edx, [ebx+4]
		cmp	edx, esi
		jz	loc_68F50BE0	; jumptable 68F50B90 cases 0-3,8-10
		cmp	byte ptr [ebx+4], 0
		jnz	loc_68F50C1A
		cmp	byte ptr [ebx+5], 3Eh
		jnz	loc_68F50C1A
		mov	ecx, [ebp+arg_C]
		mov	[ecx], edx
		xor	edx, edx
		jmp	loc_68F50BC0
; ---------------------------------------------------------------------------
		align 10h

loc_68F50D90:				; CODE XREF: sub_68F50B00:loc_68F50C8Ej
		mov	eax, [ebp+arg_C]
		add	ebx, 2
		mov	[eax], ebx
		jmp	loc_68F50C99
; ---------------------------------------------------------------------------

loc_68F50D9D:				; CODE XREF: sub_68F50B00+25Aj
					; sub_68F50B00+25Cj
					; DATA XREF: ...
		mov	edx, [ebp+var_20] ; jumptable 68F50D5C default case
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50DAE:				; CODE XREF: sub_68F50B00+25Cj
					; sub_68F50B00+320j
					; DATA XREF: ...
		add	[ebp+var_20], 2	; jumptable 68F50D5C cases 22,24
		mov	[ebp+var_24], 0

loc_68F50DB9:				; CODE XREF: sub_68F50B00+469j
		cmp	[ebp+var_20], esi
		jz	loc_68F5136D
		mov	edx, [ebp+var_20]
		movzx	edx, byte ptr [edx]
		test	dl, dl
		mov	[ebp+var_59], dl
		jnz	loc_68F5120B
		mov	ecx, [ebp+var_20]
		movzx	ebx, byte ptr [ecx+1]
		movzx	eax, bl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F50DE2:				; CODE XREF: sub_68F50B00+71Ej
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F51109	; jumptable 68F50DEE default case
		jmp	ds:off_68F5B79C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50DF5:				; CODE XREF: sub_68F50B00+25Cj
					; DATA XREF: .rdata:off_68F5B738o
		mov	edx, [ebp+var_20] ; jumptable 68F50D5C case 29
		mov	ecx, ebx
		and	ecx, 1Fh
		movzx	eax, byte ptr [edx]
		movzx	edx, ds:byte_68F58380[eax]
		mov	al, bl
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	short loc_68F50DAE ; jumptable 68F50D5C	cases 22,24
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50E33:				; CODE XREF: sub_68F50B00+25Cj
					; DATA XREF: .rdata:off_68F5B738o
		mov	eax, [ebp+var_20] ; jumptable 68F50D5C case 6
		sub	esi, eax
		cmp	esi, 2
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50E57:				; CODE XREF: sub_68F50B00+25Cj
					; DATA XREF: .rdata:off_68F5B738o
		mov	edx, [ebp+var_20] ; jumptable 68F50D5C case 5
		mov	eax, 0FFFFFFFEh
		sub	esi, edx
		dec	esi
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50E79:				; CODE XREF: sub_68F50B00+25Cj
					; DATA XREF: .rdata:off_68F5B738o
		mov	ebx, [ebp+var_20] ; jumptable 68F50D5C case 17
		mov	eax, 0FFFFFFFFh
		add	ebx, 2
		cmp	ebx, esi
		jz	loc_68F50D1D
		mov	edx, [ebp+var_20]
		movzx	eax, byte ptr [edx+2]
		test	al, al
		jnz	loc_68F51223
		movzx	ecx, byte ptr [ebx+1]
		movzx	eax, cl
		mov	[ebp+var_58], cl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F50EAA:				; CODE XREF: sub_68F50B00+735j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F50F57	; jumptable 68F50EB6 default case
		jmp	ds:off_68F5B800[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F50EBD:				; CODE XREF: sub_68F50B00+25Cj
					; DATA XREF: .rdata:off_68F5B738o
		add	[ebp+var_20], 2	; jumptable 68F50D5C case 16
		mov	eax, 0FFFFFFFFh
		cmp	[ebp+var_20], esi
		jz	loc_68F50D1D
		mov	edx, [ebp+var_20]
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	loc_68F5123A
		movzx	eax, byte ptr [edx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F50EE6:				; CODE XREF: sub_68F50B00+749j
		cmp	eax, 14h
		jz	loc_68F5124E
		cmp	eax, 1Bh
		jz	loc_68F51299
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50F09:				; CODE XREF: sub_68F50B00+25Cj
					; DATA XREF: .rdata:off_68F5B738o
		mov	edx, [ebp+var_20] ; jumptable 68F50D5C case 15
		mov	eax, [ebp+arg_C]
		mov	[esp+78h+var_78], esi
		add	edx, 2
		mov	[esp+78h+var_74], eax
		mov	eax, edi
		call	sub_68F50440
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50F27:				; CODE XREF: sub_68F50B00+25Cj
					; DATA XREF: .rdata:off_68F5B738o
		mov	eax, [ebp+var_20] ; jumptable 68F50D5C case 7
		sub	esi, eax
		cmp	esi, 3
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50F4B:				; CODE XREF: sub_68F50B00+1FBj
		mov	ecx, [ebp+arg_C]
		xor	edx, edx
		mov	[ecx], ebx
		jmp	loc_68F50BC0
; ---------------------------------------------------------------------------

loc_68F50F57:				; CODE XREF: sub_68F50B00+3B0j
					; sub_68F50B00+3B6j
					; DATA XREF: ...
		mov	eax, [ebp+arg_C] ; jumptable 68F50EB6 default case
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50F65:				; CODE XREF: sub_68F50B00+2EEj
					; sub_68F50B00+4E3j ...
		add	[ebp+var_20], 2	; jumptable 68F50DEE cases 22,24-27
					; jumptable 68F51041 cases 22,24
		jmp	loc_68F50DB9
; ---------------------------------------------------------------------------

loc_68F50F6E:				; CODE XREF: sub_68F50B00+2EEj
					; sub_68F50B00+581j
					; DATA XREF: ...
		add	[ebp+var_20], 2	; jumptable 68F50DEE case 17
					; jumptable 68F51081 case 17
		mov	eax, 0FFFFFFFFh
		cmp	[ebp+var_20], esi
		jz	loc_68F50D1D
		mov	eax, [ebp+var_20]
		cmp	byte ptr [eax],	0
		jnz	short loc_68F50F92
		cmp	byte ptr [eax+1], 3Eh
		jz	loc_68F513BA

loc_68F50F92:				; CODE XREF: sub_68F50B00+486j
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50FA3:				; CODE XREF: sub_68F50B00+2EEj
					; sub_68F50B00+581j
					; DATA XREF: ...
		mov	eax, [ebp+var_20] ; jumptable 68F50DEE case 11
					; jumptable 68F51081 case 11
		mov	ecx, [ebp+arg_C]
		add	eax, 2
		mov	[ecx], eax
		mov	eax, 2
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50FBA:				; CODE XREF: sub_68F50B00+2EEj
					; DATA XREF: .rdata:off_68F5B79Co
		movzx	eax, [ebp+var_59] ; jumptable 68F50DEE case 29
		mov	ecx, ebx
		and	ecx, 1Fh
		movzx	edx, ds:byte_68F58980[eax]
		mov	al, bl
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	short loc_68F50F65 ; jumptable 68F50DEE	cases 22,24-27
					; jumptable 68F51041 cases 22,24
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F50FF6:				; CODE XREF: sub_68F50B00+2EEj
					; DATA XREF: .rdata:off_68F5B79Co
		mov	eax, [ebp+var_24] ; jumptable 68F50DEE case 23
		test	eax, eax
		jnz	loc_68F51487
		add	[ebp+var_20], 2
		mov	[ebp+var_24], 1
		cmp	[ebp+var_20], esi
		jz	loc_68F5147B
		mov	edx, [ebp+var_20]
		movzx	edx, byte ptr [edx]
		test	dl, dl
		mov	[ebp+var_59], dl
		jnz	loc_68F512B7
		mov	ecx, [ebp+var_20]
		movzx	ebx, byte ptr [ecx+1]
		movzx	eax, bl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F51035:				; CODE XREF: sub_68F50B00+7CAj
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F51522	; jumptable 68F51041 default case
		jmp	ds:off_68F5B864[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F51048:				; CODE XREF: sub_68F50B00+2EEj
					; sub_68F50B00+581j
					; DATA XREF: ...
		add	[ebp+var_20], 2	; jumptable 68F50DEE cases 9,10,21
					; jumptable 68F51081 cases 9,10,21
		cmp	[ebp+var_20], esi
		jz	loc_68F51533
		mov	eax, [ebp+var_20]
		movzx	eax, byte ptr [eax]
		test	al, al
		mov	[ebp+var_59], al
		jnz	loc_68F512CF
		mov	edx, [ebp+var_20]
		movzx	ebx, byte ptr [edx+1]
		movzx	eax, bl
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F51075:				; CODE XREF: sub_68F50B00+7E2j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F51561	; jumptable 68F51081 default case
		jmp	ds:off_68F5B8C8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F51088:				; CODE XREF: sub_68F50B00+3B6j
					; sub_68F50B00+5BCj ...
		add	ebx, 2		; jumptable 68F50EB6 cases 22,24
					; jumptable 68F510BC cases 22-27
		cmp	ebx, esi
		jz	loc_68F51516
		movzx	ecx, byte ptr [ebx]
		test	cl, cl
		mov	[ebp+var_39], cl
		jnz	loc_68F514FE
		movzx	eax, byte ptr [ebx+1]
		mov	[ebp+var_58], al
		movzx	eax, al
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F510B0:				; CODE XREF: sub_68F50B00+A11j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F514F0	; jumptable 68F510BC default case
		jmp	ds:off_68F5B92C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F510C3:				; CODE XREF: sub_68F50B00+2EEj
					; DATA XREF: .rdata:off_68F5B79Co
		mov	eax, [ebp+var_20] ; jumptable 68F50DEE case 7
		sub	esi, eax
		cmp	esi, 3
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F510E7:				; CODE XREF: sub_68F50B00+2EEj
					; DATA XREF: .rdata:off_68F5B79Co
		mov	eax, [ebp+var_20] ; jumptable 68F50DEE case 5
		sub	esi, eax
		dec	esi
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51109:				; CODE XREF: sub_68F50B00+2E8j
					; sub_68F50B00+2EEj
					; DATA XREF: ...
		mov	eax, [ebp+var_20] ; jumptable 68F50DEE default case
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5111A:				; CODE XREF: sub_68F50B00+2EEj
					; DATA XREF: .rdata:off_68F5B79Co
		mov	eax, [ebp+var_20] ; jumptable 68F50DEE case 6
		sub	esi, eax
		cmp	esi, 2
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5113E:				; CODE XREF: sub_68F50B00+3B6j
					; DATA XREF: .rdata:off_68F5B800o
		sub	esi, ebx	; jumptable 68F50EB6 case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3
		jle	loc_68F50D1D
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5115C:				; CODE XREF: sub_68F50B00+3B6j
					; DATA XREF: .rdata:off_68F5B800o
		sub	esi, ebx	; jumptable 68F50EB6 case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5117A:				; CODE XREF: sub_68F50B00+3B6j
					; DATA XREF: .rdata:off_68F5B800o
		sub	esi, ebx	; jumptable 68F50EB6 case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jle	loc_68F50D1D
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51196:				; CODE XREF: sub_68F50B00+3B6j
					; DATA XREF: .rdata:off_68F5B800o
		movzx	eax, byte ptr [ebx] ; jumptable	68F50EB6 case 29
		movzx	ecx, [ebp+var_58]
		movzx	edx, ds:byte_68F58380[eax]
		and	ecx, 1Fh
		movzx	eax, [ebp+var_58]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F51088	; jumptable 68F50EB6 cases 22,24
					; jumptable 68F510BC cases 22-27
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F511D6:				; CODE XREF: sub_68F50B00+17Fj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jmp	loc_68F50C8E
; ---------------------------------------------------------------------------

loc_68F511EA:				; CODE XREF: sub_68F50B00+23Fj
		mov	ecx, [ebp+var_20]
		movsx	eax, al
		movzx	ebx, byte ptr [ecx+1]
		movsx	edx, bl
		call	sub_68F4CDA0
		jmp	loc_68F50D54
; ---------------------------------------------------------------------------

loc_68F51201:				; CODE XREF: sub_68F50B00+46j
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F50BC0
; ---------------------------------------------------------------------------

loc_68F5120B:				; CODE XREF: sub_68F50B00+2CDj
		mov	eax, [ebp+var_20]
		movzx	ebx, byte ptr [eax+1]
		movsx	eax, [ebp+var_59]
		movsx	edx, bl
		call	sub_68F4CDA0
		jmp	loc_68F50DE2
; ---------------------------------------------------------------------------

loc_68F51223:				; CODE XREF: sub_68F50B00+395j
		movzx	edx, byte ptr [ebx+1]
		movsx	eax, al
		mov	[ebp+var_58], dl
		movsx	edx, dl
		call	sub_68F4CDA0
		jmp	loc_68F50EAA
; ---------------------------------------------------------------------------

loc_68F5123A:				; CODE XREF: sub_68F50B00+3D7j
		mov	ecx, [ebp+var_20]
		movsx	eax, al
		movsx	edx, byte ptr [ecx+1]
		call	sub_68F4CDA0
		jmp	loc_68F50EE6
; ---------------------------------------------------------------------------

loc_68F5124E:				; CODE XREF: sub_68F50B00+3E9j
		mov	edx, [ebp+var_20]
		mov	eax, 0FFFFFFFFh
		add	edx, 2
		sub	esi, edx
		cmp	esi, 0Bh
		jle	loc_68F50D1D
		xor	ecx, ecx

loc_68F51266:				; CODE XREF: sub_68F50B00+786j
		cmp	byte ptr [edx],	0
		jnz	loc_68F5135F
		movzx	eax, ds:byte_68F5B6D8[ecx]
		cmp	[edx+1], al
		jnz	loc_68F5135F
		inc	ecx
		add	edx, 2
		cmp	ecx, 5
		jle	short loc_68F51266
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		mov	eax, 8
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51299:				; CODE XREF: sub_68F50B00+3F2j
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[esp+78h+var_78], esi
		add	edx, 2
		mov	[esp+78h+var_74], eax
		mov	eax, edi
		call	sub_68F502A0
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F512B7:				; CODE XREF: sub_68F50B00+520j
		mov	eax, [ebp+var_20]
		movzx	ebx, byte ptr [eax+1]
		movsx	eax, [ebp+var_59]
		movsx	edx, bl
		call	sub_68F4CDA0
		jmp	loc_68F51035
; ---------------------------------------------------------------------------

loc_68F512CF:				; CODE XREF: sub_68F50B00+560j
		movsx	eax, [ebp+var_59]
		mov	ecx, [ebp+var_20]
		movzx	ebx, byte ptr [ecx+1]
		movsx	edx, bl
		call	sub_68F4CDA0
		jmp	loc_68F51075
; ---------------------------------------------------------------------------

loc_68F512E7:				; CODE XREF: sub_68F50B00+808j
		cmp	eax, 15h
		jnz	short loc_68F5130F

loc_68F512EC:				; CODE XREF: sub_68F50B00+5BCj
					; sub_68F50B00+80Dj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F510BC cases 9,10,21
		cmp	ebx, esi
		jz	short loc_68F51353
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F51345
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F51303:				; CODE XREF: sub_68F50B00+851j
		cmp	eax, 0Bh
		jz	short loc_68F51331
		jg	short loc_68F512E7
		cmp	eax, 9
		jge	short loc_68F512EC ; jumptable 68F510BC	cases 9,10,21

loc_68F5130F:				; CODE XREF: sub_68F50B00+7EAj
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5131D:				; CODE XREF: sub_68F50B00+5BCj
					; DATA XREF: .rdata:off_68F5B92Co
		mov	edx, [ebp+arg_C] ; jumptable 68F510BC case 11
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 5
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51331:				; CODE XREF: sub_68F50B00+806j
		mov	ecx, [ebp+arg_C]
		lea	eax, [ebx+2]
		mov	[ecx], eax
		mov	eax, 5
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51345:				; CODE XREF: sub_68F50B00+7F8j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F51303
; ---------------------------------------------------------------------------

loc_68F51353:				; CODE XREF: sub_68F50B00+7F1j
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5135F:				; CODE XREF: sub_68F50B00+769j
					; sub_68F50B00+779j
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	[ecx], edx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5136D:				; CODE XREF: sub_68F50B00+2BCj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51379:				; CODE XREF: sub_68F50B00+5BCj
					; DATA XREF: .rdata:off_68F5B92Co
		movzx	eax, [ebp+var_39] ; jumptable 68F510BC case 29
		movzx	ecx, [ebp+var_58]
		movzx	edx, ds:byte_68F58980[eax]
		and	ecx, 1Fh
		movzx	eax, [ebp+var_58]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F51088	; jumptable 68F50EB6 cases 22,24
					; jumptable 68F510BC cases 22-27
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F513BA:				; CODE XREF: sub_68F50B00+48Cj
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+arg_C]
		add	eax, 2
		mov	[edx], eax
		mov	eax, 4
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F513D1:				; CODE XREF: sub_68F50B00+541j
					; DATA XREF: .rdata:off_68F5B864o
		movzx	eax, [ebp+var_59] ; jumptable 68F51041 case 29
		mov	ecx, ebx
		and	ecx, 1Fh
		movzx	edx, ds:byte_68F58380[eax]
		mov	al, bl
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F50F65	; jumptable 68F50DEE cases 22,24-27
					; jumptable 68F51041 cases 22,24
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51411:				; CODE XREF: sub_68F50B00+541j
					; DATA XREF: .rdata:off_68F5B864o
		mov	ecx, [ebp+var_20] ; jumptable 68F51041 case 7
		mov	eax, 0FFFFFFFEh
		sub	esi, ecx
		cmp	esi, 3
		jle	loc_68F50D1D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51435:				; CODE XREF: sub_68F50B00+541j
					; DATA XREF: .rdata:off_68F5B864o
		mov	ebx, [ebp+var_20] ; jumptable 68F51041 case 6
		mov	eax, 0FFFFFFFEh
		sub	esi, ebx
		cmp	esi, 2
		jle	loc_68F50D1D
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51459:				; CODE XREF: sub_68F50B00+541j
					; DATA XREF: .rdata:off_68F5B864o
		mov	edi, [ebp+var_20] ; jumptable 68F51041 case 5
		mov	eax, 0FFFFFFFEh
		sub	esi, edi
		dec	esi
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5147B:				; CODE XREF: sub_68F50B00+50Fj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51487:				; CODE XREF: sub_68F50B00+4FBj
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51498:				; CODE XREF: sub_68F50B00+5BCj
					; DATA XREF: .rdata:off_68F5B92Co
		sub	esi, ebx	; jumptable 68F510BC case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F514B6:				; CODE XREF: sub_68F50B00+5BCj
					; DATA XREF: .rdata:off_68F5B92Co
		sub	esi, ebx	; jumptable 68F510BC case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F50D1D
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F514D4:				; CODE XREF: sub_68F50B00+5BCj
					; DATA XREF: .rdata:off_68F5B92Co
		sub	esi, ebx	; jumptable 68F510BC case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jle	loc_68F50D1D
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F514F0:				; CODE XREF: sub_68F50B00+5B6j
					; sub_68F50B00+5BCj
					; DATA XREF: ...
		mov	ecx, [ebp+arg_C] ; jumptable 68F510BC default case
		xor	eax, eax
		mov	[ecx], ebx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F514FE:				; CODE XREF: sub_68F50B00+59Bj
		movzx	edx, byte ptr [ebx+1]
		movsx	eax, [ebp+var_39]
		mov	[ebp+var_58], dl
		movsx	edx, dl
		call	sub_68F4CDA0
		jmp	loc_68F510B0
; ---------------------------------------------------------------------------

loc_68F51516:				; CODE XREF: sub_68F50B00+58Dj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51522:				; CODE XREF: sub_68F50B00+53Bj
					; sub_68F50B00+541j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F51041 default case
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51533:				; CODE XREF: sub_68F50B00+54Fj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5153F:				; CODE XREF: sub_68F50B00+581j
					; DATA XREF: .rdata:off_68F5B8C8o
		mov	edx, [ebp+var_20] ; jumptable 68F51081 case 5
		mov	eax, 0FFFFFFFEh
		sub	esi, edx
		dec	esi
		jle	loc_68F50D1D
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51561:				; CODE XREF: sub_68F50B00+57Bj
					; sub_68F50B00+581j
					; DATA XREF: ...
		mov	edx, [ebp+var_20] ; jumptable 68F51081 default case
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51572:				; CODE XREF: sub_68F50B00+581j
					; DATA XREF: .rdata:off_68F5B8C8o
		movzx	eax, [ebp+var_59] ; jumptable 68F51081 case 29
		mov	ecx, ebx
		and	ecx, 1Fh
		movzx	edx, ds:byte_68F58380[eax]
		mov	al, bl
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F515DD

loc_68F5159D:				; CODE XREF: sub_68F50B00+581j
					; DATA XREF: .rdata:off_68F5B8C8o
		add	[ebp+var_20], 2	; jumptable 68F51081 cases 22,24
		mov	[ebp+var_28], 0
		mov	ebx, [ebp+var_20]
		mov	[ebp+var_1C], ebx

loc_68F515AE:				; CODE XREF: sub_68F50B00+B24j
		cmp	ebx, esi
		jz	loc_68F5183B
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	loc_68F5182A
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F515CA:				; CODE XREF: sub_68F50B00+D36j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F5181C	; jumptable 68F515D6 default case
		jmp	ds:off_68F5B990[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F515DD:				; CODE XREF: sub_68F50B00+A9Bj
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F515EE:				; CODE XREF: sub_68F50B00+AD6j
					; DATA XREF: .rdata:off_68F5B990o
		movzx	eax, byte ptr [ebx] ; jumptable	68F515D6 case 29
		movzx	ecx, byte ptr [ebx+1]
		movzx	edx, ds:byte_68F58980[eax]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	loc_68F518FB

loc_68F5161E:				; CODE XREF: sub_68F50B00+AD6j
					; sub_68F50B00+E3Bj ...
		add	ebx, 2		; jumptable 68F515D6 cases 22,24-27
		mov	[ebp+var_1C], ebx
		jmp	short loc_68F515AE
; ---------------------------------------------------------------------------

loc_68F51626:				; CODE XREF: sub_68F50B00+AD6j
					; DATA XREF: .rdata:off_68F5B990o
		add	ebx, 2		; jumptable 68F515D6 cases 9,10,21
		mov	[ebp+var_64], ebx

loc_68F5162C:				; CODE XREF: sub_68F50B00+B6Dj
		mov	ebx, [ebp+var_64]
		lea	eax, [ebx+2]
		cmp	ebx, esi
		mov	[ebp+var_64], eax
		mov	[ebp+var_1C], ebx
		jz	loc_68F518A5
		mov	edx, eax
		movzx	eax, byte ptr [eax-2]
		test	al, al
		jnz	loc_68F5188F
		movzx	eax, byte ptr [edx-1]
		movzx	ecx, byte ptr [edi+eax+4Ch]

loc_68F51657:				; CODE XREF: sub_68F50B00+DA0j
		cmp	ecx, 0Eh
		jz	short loc_68F5167D ; jumptable 68F515D6	case 14
		cmp	ecx, 15h
		ja	short loc_68F5166F
		mov	eax, 1
		shl	eax, cl
		test	eax, 200600h
		jnz	short loc_68F5162C

loc_68F5166F:				; CODE XREF: sub_68F50B00+B5Fj
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5167D:				; CODE XREF: sub_68F50B00+AD6j
					; sub_68F50B00+B5Aj
					; DATA XREF: ...
		mov	[ebp+var_28], 0	; jumptable 68F515D6 case 14
		add	ebx, 2
		mov	[ebp+var_60], ebx

loc_68F5168A:				; CODE XREF: sub_68F50B00+BD3j
		mov	ebx, [ebp+var_60]
		lea	edx, [ebx+2]
		cmp	ebx, esi
		mov	[ebp+var_60], edx
		mov	[ebp+var_1C], ebx
		jz	loc_68F5172B
		movzx	eax, byte ptr [edx-2]
		test	al, al
		jnz	short loc_68F5171A
		movzx	eax, byte ptr [edx-1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F516AF:				; CODE XREF: sub_68F50B00+C29j
		mov	[ebp+var_30], eax
		mov	eax, [ebp+var_30]
		sub	eax, 0Ch
		cmp	eax, 1
		jbe	short loc_68F516E3 ; jumptable 68F51713	default	case
		cmp	[ebp+var_30], 15h
		ja	short loc_68F516D5
		movzx	ecx, byte ptr [ebp+var_30]
		mov	eax, 1
		shl	eax, cl
		test	eax, 200600h
		jnz	short loc_68F5168A

loc_68F516D5:				; CODE XREF: sub_68F50B00+BC1j
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F516E3:				; CODE XREF: sub_68F50B00+BBBj
					; sub_68F50B00+C11j ...
		add	ebx, 2		; jumptable 68F51713 default case

loc_68F516E6:				; CODE XREF: sub_68F50B00+C51j
					; sub_68F50B00+C5Fj
		mov	[ebp+var_1C], ebx

loc_68F516E9:				; CODE XREF: sub_68F50B00+CB1j
		cmp	ebx, esi
		jz	loc_68F51A08
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	loc_68F519F7
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F51705:				; CODE XREF: sub_68F50B00+F03j
		cmp	eax, [ebp+var_30]
		jz	loc_68F51A14
		cmp	eax, 8		; switch 9 cases
		ja	short loc_68F516E3 ; jumptable 68F51713	default	case
		jmp	ds:off_68F5B9F4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F5171A:				; CODE XREF: sub_68F50B00+BA4j
		mov	ecx, [ebp+var_60]
		movsx	eax, al
		movsx	edx, byte ptr [ecx-1]
		call	sub_68F4CDA0
		jmp	short loc_68F516AF
; ---------------------------------------------------------------------------

loc_68F5172B:				; CODE XREF: sub_68F50B00+B98j
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51737:				; CODE XREF: sub_68F50B00+C13j
					; DATA XREF: .rdata:off_68F5B9F4o
		mov	edx, [ebp+arg_C] ; jumptable 68F51713 cases 0,1,8
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51745:				; CODE XREF: sub_68F50B00+C13j
					; DATA XREF: .rdata:off_68F5B9F4o
		mov	eax, esi	; jumptable 68F51713 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F51761
		add	ebx, 4
		jmp	short loc_68F516E6
; ---------------------------------------------------------------------------

loc_68F51753:				; CODE XREF: sub_68F50B00+C13j
					; DATA XREF: .rdata:off_68F5B9F4o
		mov	eax, esi	; jumptable 68F51713 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F5176D
		add	ebx, 3
		jmp	short loc_68F516E6
; ---------------------------------------------------------------------------

loc_68F51761:				; CODE XREF: sub_68F50B00+C4Cj
		mov	eax, 0FFFFFFFEh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5176D:				; CODE XREF: sub_68F50B00+C5Aj
		mov	eax, 0FFFFFFFEh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51779:				; CODE XREF: sub_68F50B00+C13j
					; DATA XREF: .rdata:off_68F5B9F4o
		mov	eax, esi	; jumptable 68F51713 case 5
		sub	eax, ebx
		dec	eax
		jg	loc_68F516E3	; jumptable 68F51713 default case
		mov	eax, 0FFFFFFFEh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51790:				; CODE XREF: sub_68F50B00+C13j
					; DATA XREF: .rdata:off_68F5B9F4o
		mov	[esp+78h+var_78], esi ;	jumptable 68F51713 case	3
		lea	eax, [ebp+var_1C]
		lea	edx, [ebx+2]
		mov	[esp+78h+var_74], eax
		mov	eax, edi
		call	sub_68F50880
		test	eax, eax
		mov	edx, eax
		jle	loc_68F51A4C
		mov	ebx, [ebp+var_1C]
		jmp	loc_68F516E9
; ---------------------------------------------------------------------------

loc_68F517B6:				; CODE XREF: sub_68F50B00+C13j
					; DATA XREF: .rdata:off_68F5B9F4o
		mov	eax, [ebp+arg_C] ; jumptable 68F51713 case 2
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F517C4:				; CODE XREF: sub_68F50B00+AD6j
					; DATA XREF: .rdata:off_68F5B990o
		sub	esi, ebx	; jumptable 68F515D6 case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F517E2:				; CODE XREF: sub_68F50B00+AD6j
					; DATA XREF: .rdata:off_68F5B990o
		sub	esi, ebx	; jumptable 68F515D6 case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jle	loc_68F50D1D
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51800:				; CODE XREF: sub_68F50B00+AD6j
					; DATA XREF: .rdata:off_68F5B990o
		sub	esi, ebx	; jumptable 68F515D6 case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jle	loc_68F50D1D
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5181C:				; CODE XREF: sub_68F50B00+AD0j
					; sub_68F50B00+AD6j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F515D6 default case
		xor	eax, eax
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5182A:				; CODE XREF: sub_68F50B00+ABBj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F515CA
; ---------------------------------------------------------------------------

loc_68F5183B:				; CODE XREF: sub_68F50B00+AB0j
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51847:				; CODE XREF: sub_68F50B00+581j
					; DATA XREF: .rdata:off_68F5B8C8o
		mov	eax, [ebp+var_20] ; jumptable 68F51081 case 7
		sub	esi, eax
		cmp	esi, 3
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5186B:				; CODE XREF: sub_68F50B00+581j
					; DATA XREF: .rdata:off_68F5B8C8o
		mov	eax, [ebp+var_20] ; jumptable 68F51081 case 6
		sub	esi, eax
		cmp	esi, 2
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F5188F:				; CODE XREF: sub_68F50B00+B48j
		mov	ecx, [ebp+var_64]
		movsx	eax, al
		movsx	edx, byte ptr [ecx-1]
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	loc_68F51657
; ---------------------------------------------------------------------------

loc_68F518A5:				; CODE XREF: sub_68F50B00+B3Aj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F518B1:				; CODE XREF: sub_68F50B00+AD6j
					; DATA XREF: .rdata:off_68F5B990o
		mov	eax, [ebp+var_28] ; jumptable 68F515D6 case 23
		test	eax, eax
		jnz	loc_68F519E9
		mov	[ebp+var_28], 1
		add	ebx, 2
		cmp	ebx, esi
		mov	[ebp+var_2C], ebx
		mov	[ebp+var_1C], ebx
		jz	loc_68F519DD
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	loc_68F519CC
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F518E8:				; CODE XREF: sub_68F50B00+ED8j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F519BB	; jumptable 68F518F4 default case
		jmp	ds:off_68F5BA18[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F518FB:				; CODE XREF: sub_68F50B00+B18j
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51909:				; CODE XREF: sub_68F50B00+DF4j
					; DATA XREF: .rdata:off_68F5BA18o
		mov	ecx, [ebp+var_2C] ; jumptable 68F518F4 case 29
		movzx	eax, byte ptr [ecx]
		movzx	ecx, byte ptr [ecx+1]
		movzx	edx, ds:byte_68F58380[eax]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F519AA

loc_68F51938:				; CODE XREF: sub_68F50B00+DF4j
					; DATA XREF: .rdata:off_68F5BA18o
		mov	ebx, [ebp+var_2C] ; jumptable 68F518F4 cases 22,24
		jmp	loc_68F5161E	; jumptable 68F515D6 cases 22,24-27
; ---------------------------------------------------------------------------

loc_68F51940:				; CODE XREF: sub_68F50B00+DF4j
					; DATA XREF: .rdata:off_68F5BA18o
		mov	eax, [ebp+var_2C] ; jumptable 68F518F4 case 6
		sub	esi, eax
		cmp	esi, 2
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51964:				; CODE XREF: sub_68F50B00+DF4j
					; DATA XREF: .rdata:off_68F5BA18o
		mov	eax, [ebp+var_2C] ; jumptable 68F518F4 case 5
		sub	esi, eax
		dec	esi
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_2C]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51986:				; CODE XREF: sub_68F50B00+DF4j
					; DATA XREF: .rdata:off_68F5BA18o
		mov	eax, [ebp+var_2C] ; jumptable 68F518F4 case 7
		sub	esi, eax
		cmp	esi, 3
		mov	eax, 0FFFFFFFEh
		jle	loc_68F50D1D
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F519AA:				; CODE XREF: sub_68F50B00+E36j
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_2C]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F519BB:				; CODE XREF: sub_68F50B00+DEEj
					; sub_68F50B00+DF4j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F518F4 default case
		xor	eax, eax
		mov	ecx, [ebp+var_2C]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F519CC:				; CODE XREF: sub_68F50B00+DD9j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F518E8
; ---------------------------------------------------------------------------

loc_68F519DD:				; CODE XREF: sub_68F50B00+DCEj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F519E9:				; CODE XREF: sub_68F50B00+DB6j
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F519F7:				; CODE XREF: sub_68F50B00+BF6j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F51705
; ---------------------------------------------------------------------------

loc_68F51A08:				; CODE XREF: sub_68F50B00+BEBj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51A14:				; CODE XREF: sub_68F50B00+C08j
		add	ebx, 2
		cmp	ebx, esi
		mov	[ebp+var_34], ebx
		mov	[ebp+var_1C], ebx
		jz	loc_68F51BF0
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	loc_68F51BDF
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F51A39:				; CODE XREF: sub_68F50B00+10EBj
		sub	eax, 9		; switch 13 cases
		cmp	eax, 0Ch
		ja	loc_68F51BCE	; jumptable 68F51A45 default case
		jmp	ds:off_68F5BA7C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F51A4C:				; CODE XREF: sub_68F50B00+CA8j
		jnz	short loc_68F51A56
		mov	eax, [ebp+var_1C]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax

loc_68F51A56:				; CODE XREF: sub_68F50B00:loc_68F51A4Cj
		mov	eax, edx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51A5F:				; CODE XREF: sub_68F50B00+F45j
					; sub_68F50B00+F90j
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F51A45 cases 9,10,21
					; jumptable 68F51A90 cases 9,10,21
		cmp	ebx, esi
		mov	[ebp+var_38], ebx
		mov	[ebp+var_1C], ebx
		jz	loc_68F51BAE
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	loc_68F51B9D
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F51A84:				; CODE XREF: sub_68F50B00+10A9j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F51B8C	; jumptable 68F51A90 default case
		jmp	ds:off_68F5BAB0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F51A97:				; CODE XREF: sub_68F50B00+F45j
					; sub_68F50B00+F90j
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F51A45 case 17
					; jumptable 68F51A90 case 17
		mov	eax, 0FFFFFFFFh
		cmp	ebx, esi
		mov	[ebp+var_1C], ebx
		jz	loc_68F50D1D
		cmp	byte ptr [ebx],	0
		jnz	short loc_68F51AB5
		cmp	byte ptr [ebx+1], 3Eh
		jz	short loc_68F51AC3

loc_68F51AB5:				; CODE XREF: sub_68F50B00+FADj
		mov	ecx, [ebp+arg_C]
		xor	eax, eax
		mov	edx, eax
		mov	[ecx], ebx
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51AC3:				; CODE XREF: sub_68F50B00+FB3j
		mov	edx, [ebp+arg_C]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 3
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51AD7:				; CODE XREF: sub_68F50B00+F90j
					; DATA XREF: .rdata:off_68F5BAB0o
		mov	edx, [ebp+var_38] ; jumptable 68F51A90 case 29
		movzx	eax, byte ptr [edx]
		movzx	edx, ds:byte_68F58380[eax]
		mov	eax, [ebp+var_38]
		movzx	ecx, byte ptr [eax+1]
		mov	al, cl
		shr	al, 5
		movzx	eax, al
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F51B11

loc_68F51B09:				; CODE XREF: sub_68F50B00+F90j
					; DATA XREF: .rdata:off_68F5BAB0o
		mov	ebx, [ebp+var_38] ; jumptable 68F51A90 cases 22,24
		jmp	loc_68F5161E	; jumptable 68F515D6 cases 22,24-27
; ---------------------------------------------------------------------------

loc_68F51B11:				; CODE XREF: sub_68F50B00+1007j
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51B22:				; CODE XREF: sub_68F50B00+F90j
					; DATA XREF: .rdata:off_68F5BAB0o
		mov	ecx, [ebp+var_38] ; jumptable 68F51A90 case 7
		mov	eax, 0FFFFFFFEh
		sub	esi, ecx
		cmp	esi, 3
		jle	loc_68F50D1D
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51B46:				; CODE XREF: sub_68F50B00+F90j
					; DATA XREF: .rdata:off_68F5BAB0o
		mov	ebx, [ebp+var_38] ; jumptable 68F51A90 case 6
		mov	eax, 0FFFFFFFEh
		sub	esi, ebx
		cmp	esi, 2
		jle	loc_68F50D1D
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51B6A:				; CODE XREF: sub_68F50B00+F90j
					; DATA XREF: .rdata:off_68F5BAB0o
		mov	edi, [ebp+var_38] ; jumptable 68F51A90 case 5
		mov	eax, 0FFFFFFFEh
		sub	esi, edi
		dec	esi
		jle	loc_68F50D1D
		mov	edx, [ebp+arg_C]
		xor	eax, eax
		mov	ecx, [ebp+var_38]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51B8C:				; CODE XREF: sub_68F50B00+F8Aj
					; sub_68F50B00+F90j
					; DATA XREF: ...
		mov	eax, [ebp+var_38] ; jumptable 68F51A90 default case
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		xor	eax, eax
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51B9D:				; CODE XREF: sub_68F50B00+F75j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F51A84
; ---------------------------------------------------------------------------

loc_68F51BAE:				; CODE XREF: sub_68F50B00+F6Aj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51BBA:				; CODE XREF: sub_68F50B00+F45j
					; sub_68F50B00+F90j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F51A45 case 11
					; jumptable 68F51A90 case 11
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 1
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51BCE:				; CODE XREF: sub_68F50B00+F3Fj
					; sub_68F50B00+F45j
					; DATA XREF: ...
		mov	edx, [ebp+arg_C] ; jumptable 68F51A45 default case
		xor	eax, eax
		mov	ecx, [ebp+var_34]
		mov	[edx], ecx
		mov	edx, eax
		jmp	loc_68F50D1F
; ---------------------------------------------------------------------------

loc_68F51BDF:				; CODE XREF: sub_68F50B00+F2Aj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F51A39
; ---------------------------------------------------------------------------

loc_68F51BF0:				; CODE XREF: sub_68F50B00+F1Fj
		mov	eax, 0FFFFFFFFh
		mov	edx, eax
		jmp	loc_68F50D1F
sub_68F50B00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F51C00	proc near		; CODE XREF: sub_68F51E50+36Aj
					; sub_68F52830+96p

var_39		= byte ptr -39h
var_38		= byte ptr -38h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	ebx, edx
		cmp	edx, esi
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_1C], eax
		mov	eax, 0FFFFFFEAh
		jz	short loc_68F51C74
		movzx	eax, byte ptr [edx]
		test	al, al
		mov	[ebp+var_39], al
		jz	short loc_68F51C50
		movzx	eax, byte ptr [edx+1]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_39]
		call	sub_68F4CDA0
		sub	eax, 5		; switch 26 cases
		cmp	eax, 19h
		ja	short loc_68F51C70 ; jumptable 68F51C48	default	case

loc_68F51C48:				; CODE XREF: sub_68F51C00+68j
		jmp	ds:off_68F5BB14[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F51C50:				; CODE XREF: sub_68F51C00+2Bj
		movzx	edx, byte ptr [edx+1]
		movzx	eax, dl
		mov	[ebp+var_38], dl
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]
		sub	eax, 5
		cmp	eax, 19h
		jbe	short loc_68F51C48
		lea	esi, [esi+0]

loc_68F51C70:				; CODE XREF: sub_68F51C00+46j
					; sub_68F51C00:loc_68F51C48j ...
		mov	[edi], ebx	; jumptable 68F51C48 default case
		xor	eax, eax

loc_68F51C74:				; CODE XREF: sub_68F51C00+21j
					; sub_68F51C00+F6j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F51C81:				; CODE XREF: sub_68F51C00:loc_68F51C48j
					; DATA XREF: .rdata:off_68F5BB14o
		movzx	eax, [ebp+var_39] ; jumptable 68F51C48 case 29
		movzx	edx, ds:byte_68F58380[eax]

loc_68F51C8C:				; CODE XREF: sub_68F51C00+13Dj
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_38]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F51C70 ; jumptable 68F51C48	default	case

loc_68F51CB0:				; CODE XREF: sub_68F51C00:loc_68F51C48j
					; sub_68F51C00+DFj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F51C48 cases 22,24
					; jumptable 68F51CDF cases 22,24-27
		cmp	ebx, esi
		jz	loc_68F51D51
		movzx	edx, byte ptr [ebx]
		test	dl, dl
		mov	[ebp+var_39], dl
		jnz	short loc_68F51D1D
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_38], al
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F51CD7:				; CODE XREF: sub_68F51C00+130j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F51C70 ; jumptable 68F51C48	default	case
		jmp	ds:off_68F5BB7C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F51CE6:				; CODE XREF: sub_68F51C00:loc_68F51C48j
					; sub_68F51C00+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F51C48 case 7
					; jumptable 68F51CDF case 7
		mov	eax, 0FFFFFFFEh
		cmp	esi, 3

loc_68F51CF0:				; CODE XREF: sub_68F51C00+105j
					; sub_68F51C00+10Fj
		jg	loc_68F51C70	; jumptable 68F51C48 default case
		jmp	loc_68F51C74
; ---------------------------------------------------------------------------

loc_68F51CFB:				; CODE XREF: sub_68F51C00:loc_68F51C48j
					; sub_68F51C00+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F51C48 case 6
					; jumptable 68F51CDF case 6
		mov	eax, 0FFFFFFFEh
		cmp	esi, 2
		jmp	short loc_68F51CF0
; ---------------------------------------------------------------------------

loc_68F51D07:				; CODE XREF: sub_68F51C00:loc_68F51C48j
					; sub_68F51C00+DFj
					; DATA XREF: ...
		sub	esi, ebx	; jumptable 68F51C48 case 5
					; jumptable 68F51CDF case 5
		mov	eax, 0FFFFFFFEh
		dec	esi
		jmp	short loc_68F51CF0
; ---------------------------------------------------------------------------

loc_68F51D11:				; CODE XREF: sub_68F51C00:loc_68F51C48j
					; DATA XREF: .rdata:off_68F5BB14o
		mov	[edi], ebx	; jumptable 68F51C48 cases 9,10,21,30
		mov	eax, 16h
		jmp	loc_68F51C74
; ---------------------------------------------------------------------------

loc_68F51D1D:				; CODE XREF: sub_68F51C00+C3j
		movzx	eax, byte ptr [ebx+1]
		movsx	edx, al
		mov	[ebp+var_38], al
		movsx	eax, [ebp+var_39]
		call	sub_68F4CDA0
		jmp	short loc_68F51CD7
; ---------------------------------------------------------------------------

loc_68F51D32:				; CODE XREF: sub_68F51C00+DFj
					; DATA XREF: .rdata:off_68F5BB7Co
		movzx	eax, [ebp+var_39] ; jumptable 68F51CDF case 29
		movzx	edx, ds:byte_68F58980[eax]
		jmp	loc_68F51C8C
; ---------------------------------------------------------------------------

loc_68F51D42:				; CODE XREF: sub_68F51C00+DFj
					; DATA XREF: .rdata:off_68F5BB7Co
		lea	eax, [ebx+2]	; jumptable 68F51CDF case 18
		mov	[edi], eax
		mov	eax, 1Ch
		jmp	loc_68F51C74
; ---------------------------------------------------------------------------

loc_68F51D51:				; CODE XREF: sub_68F51C00+B5j
		mov	eax, 0FFFFFFFFh
		jmp	loc_68F51C74
sub_68F51C00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F51D60	proc near		; CODE XREF: sub_68F51E50+1EBj

var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, edx
		push	esi
		push	ebx
		sub	esp, 4
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	esi, [ebp+arg_4]

loc_68F51D74:				; CODE XREF: sub_68F51D60+68j
					; sub_68F51D60+BDj ...
		cmp	ebx, esi
		jz	short loc_68F51DA7

loc_68F51D78:				; CODE XREF: sub_68F51D60+45j
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F51DB4
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F51D88:				; CODE XREF: sub_68F51D60+60j
		cmp	eax, 0Dh	; switch 14 cases
		ja	short loc_68F51DA0 ; jumptable 68F51D8D	default	case
		jmp	ds:off_68F5BBE0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F51D94:				; CODE XREF: sub_68F51D60+2Dj
					; DATA XREF: .rdata:off_68F5BBE0o
		mov	eax, esi	; jumptable 68F51D8D case 5
		sub	eax, ebx
		dec	eax
		jle	loc_68F51E33
		nop

loc_68F51DA0:				; CODE XREF: sub_68F51D60+2Bj
					; sub_68F51D60+2Dj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F51D8D default case
		cmp	ebx, esi
		jnz	short loc_68F51D78

loc_68F51DA7:				; CODE XREF: sub_68F51D60+16j
		pop	ecx
		mov	edx, 0FFFFFFFFh
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F51DB4:				; CODE XREF: sub_68F51D60+1Dj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F51D88
; ---------------------------------------------------------------------------

loc_68F51DC2:				; CODE XREF: sub_68F51D60+2Dj
					; DATA XREF: .rdata:off_68F5BBE0o
		add	ebx, 2		; jumptable 68F51D8D cases 12,13
		cmp	eax, [ebp+var_10]
		jnz	short loc_68F51D74
		cmp	ebx, esi
		mov	edx, 0FFFFFFE5h
		jz	short loc_68F51E02
		mov	eax, [ebp+arg_8]
		mov	[eax], ebx
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F51E3A
		movzx	eax, byte ptr [ebx+1]
		movzx	ecx, byte ptr [edi+eax+4Ch]

loc_68F51DE8:				; CODE XREF: sub_68F51D60+E8j
		cmp	ecx, 1Eh
		ja	short loc_68F51E00
		mov	eax, 1
		mov	edx, 1Bh
		shl	eax, cl
		test	eax, 40300E00h
		jnz	short loc_68F51E02

loc_68F51E00:				; CODE XREF: sub_68F51D60+8Bj
					; sub_68F51D60+AFj
		xor	edx, edx

loc_68F51E02:				; CODE XREF: sub_68F51D60+71j
					; sub_68F51D60+9Ej ...
		pop	ecx
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F51E0A:				; CODE XREF: sub_68F51D60+2Dj
					; DATA XREF: .rdata:off_68F5BBE0o
		mov	eax, [ebp+arg_8] ; jumptable 68F51D8D cases 0,1,8
		mov	[eax], ebx
		jmp	short loc_68F51E00
; ---------------------------------------------------------------------------

loc_68F51E11:				; CODE XREF: sub_68F51D60+2Dj
					; DATA XREF: .rdata:off_68F5BBE0o
		mov	eax, esi	; jumptable 68F51D8D case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F51E33
		add	ebx, 4
		jmp	loc_68F51D74
; ---------------------------------------------------------------------------

loc_68F51E22:				; CODE XREF: sub_68F51D60+2Dj
					; DATA XREF: .rdata:off_68F5BBE0o
		mov	eax, esi	; jumptable 68F51D8D case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F51E33
		add	ebx, 3
		jmp	loc_68F51D74
; ---------------------------------------------------------------------------

loc_68F51E33:				; CODE XREF: sub_68F51D60+39j
					; sub_68F51D60+B8j ...
		mov	edx, 0FFFFFFFEh
		jmp	short loc_68F51E02
; ---------------------------------------------------------------------------

loc_68F51E3A:				; CODE XREF: sub_68F51D60+7Dj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	short loc_68F51DE8
sub_68F51D60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F51E50	proc near		; DATA XREF: .rdata:off_68F57D80o
					; .rdata:off_68F59240o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_58		= byte ptr -58h
var_48		= byte ptr -48h
var_29		= byte ptr -29h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_0]
		cmp	esi, edi
		mov	[ebp+var_20], edx
		mov	edx, 0FFFFFFFCh
		mov	[ebp+var_1C], eax
		jz	short loc_68F51ED2
		mov	eax, edi
		sub	eax, esi
		test	al, 1
		jnz	short loc_68F51EA1
		movzx	ebx, byte ptr [esi]
		test	bl, bl
		jnz	short loc_68F51EB4

loc_68F51E83:				; CODE XREF: sub_68F51E50+62j
		movzx	ecx, byte ptr [esi+1]
		mov	edx, [ebp+var_1C]
		movzx	eax, cl
		mov	[ebp+var_58], cl
		movzx	eax, byte ptr [edx+eax+4Ch]
		cmp	eax, 24h	; switch 37 cases
		ja	short loc_68F51ECB ; jumptable 68F51E9A	default	case

loc_68F51E9A:				; CODE XREF: sub_68F51E50+79j
		jmp	ds:off_68F5BC18[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F51EA1:				; CODE XREF: sub_68F51E50+2Aj
		and	eax, 0FFFFFFFEh
		jz	loc_68F523F8
		movzx	ebx, byte ptr [esi]
		lea	edi, [esi+eax]
		test	bl, bl
		jz	short loc_68F51E83

loc_68F51EB4:				; CODE XREF: sub_68F51E50+31j
		movzx	ecx, byte ptr [esi+1]
		movsx	eax, bl
		movsx	edx, cl
		mov	[ebp+var_58], cl
		call	sub_68F4CDA0
		cmp	eax, 24h
		jbe	short loc_68F51E9A

loc_68F51ECB:				; CODE XREF: sub_68F51E50+48j
					; sub_68F51E50:loc_68F51E9Aj ...
		mov	eax, [ebp+var_20] ; jumptable 68F51E9A default case
		mov	[eax], esi

loc_68F51ED0:				; CODE XREF: sub_68F51E50+9Dj
					; sub_68F51E50+AEj ...
		xor	edx, edx

loc_68F51ED2:				; CODE XREF: sub_68F51E50+22j
					; sub_68F51E50:loc_68F51EE6j ...
		add	esp, 5Ch
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F51EDC:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; sub_68F51E50+300j
					; DATA XREF: ...
		sub	edi, esi	; jumptable 68F51E9A case 7
					; jumptable 68F52150 case 7
		mov	edx, 0FFFFFFFEh
		cmp	edi, 3

loc_68F51EE6:				; CODE XREF: sub_68F51E50+749j
		jle	short loc_68F51ED2

loc_68F51EE8:				; CODE XREF: sub_68F51E50+E9j
					; sub_68F51E50+10Bj ...
		mov	ecx, [ebp+var_20] ; jumptable 68F52150 default case
		mov	[ecx], esi
		jmp	short loc_68F51ED0
; ---------------------------------------------------------------------------

loc_68F51EEF:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; sub_68F51E50+300j
					; DATA XREF: ...
		sub	edi, esi	; jumptable 68F51E9A case 5
					; jumptable 68F52150 case 5
		mov	edx, 0FFFFFFFEh
		dec	edi

loc_68F51EF7:				; CODE XREF: sub_68F51E50+73Aj
		jle	short loc_68F51ED2
		mov	eax, [ebp+var_20]
		mov	[eax], esi
		jmp	short loc_68F51ED0
; ---------------------------------------------------------------------------

loc_68F51F00:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; sub_68F51E50+300j
					; DATA XREF: ...
		sub	edi, esi	; jumptable 68F51E9A case 6
					; jumptable 68F52150 case 6
		mov	edx, 0FFFFFFFEh
		cmp	edi, 2

loc_68F51F0A:				; CODE XREF: sub_68F51E50+758j
		jle	short loc_68F51ED2

loc_68F51F0C:				; CODE XREF: sub_68F51E50+3AEj
		mov	edx, [ebp+var_20]
		mov	[edx], esi
		jmp	short loc_68F51ED0
; ---------------------------------------------------------------------------

loc_68F51F13:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		add	esi, 2		; jumptable 68F51E9A case 2
		mov	edx, 0FFFFFFFFh
		cmp	esi, edi
		jz	short loc_68F51ED2
		movzx	eax, byte ptr [esi]
		test	al, al
		jnz	loc_68F52435
		movzx	eax, byte ptr [esi+1]
		mov	edx, [ebp+var_1C]
		movzx	ecx, byte ptr [edx+eax+4Ch]

loc_68F51F36:				; CODE XREF: sub_68F51E50+5F3j
		cmp	ecx, 1Dh
		ja	short loc_68F51EE8 ; jumptable 68F52150	default	case
		mov	eax, 1
		shl	eax, cl
		test	eax, 214000E0h
		jnz	loc_68F5265E
		test	eax, 10000h
		jnz	loc_68F524A0
		test	ah, 80h
		jz	short loc_68F51EE8 ; jumptable 68F52150	default	case
		mov	[ebp+arg_0], edi
		mov	ecx, [ebp+var_20]
		lea	edx, [esi+2]
		mov	eax, [ebp+var_1C]
		mov	[ebp+arg_4], ecx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F50440
; ---------------------------------------------------------------------------

loc_68F51F78:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		add	esi, 2		; jumptable 68F51E9A case 4
		mov	edx, 0FFFFFFE6h
		cmp	esi, edi
		jz	loc_68F51ED2
		cmp	byte ptr [esi],	0
		jnz	short loc_68F51F97
		cmp	byte ptr [esi+1], 5Dh
		jz	loc_68F52469

loc_68F51F97:				; CODE XREF: sub_68F51E50+13Bj
					; sub_68F51E50+62Dj ...
		mov	ecx, [ebp+var_20]
		mov	edx, 1Ah
		mov	[ecx], esi
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F51FA6:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		lea	ebx, [esi+2]	; jumptable 68F51E9A case 9
		cmp	ebx, edi
		jz	loc_68F526D6
		jmp	short loc_68F51FC0
; ---------------------------------------------------------------------------
		align 10h

loc_68F51FC0:				; CODE XREF: sub_68F51E50+161j
					; sub_68F51E50+1AAj ...
		cmp	ebx, edi
		mov	esi, ebx
		jz	loc_68F523E9
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	loc_68F523C1
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_1C]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F51FE1:				; CODE XREF: sub_68F51E50+57Dj
		cmp	eax, 0Ah
		jz	loc_68F523B9
		jg	loc_68F523B0
		cmp	eax, 9
		jnz	short loc_68F51FFC
		add	ebx, 2
		cmp	ebx, edi
		jnz	short loc_68F51FC0

loc_68F51FFC:				; CODE XREF: sub_68F51E50+1A3j
					; sub_68F51E50+563j
		mov	ecx, [ebp+var_20]
		mov	[ecx], esi
		mov	edx, 0Fh
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F5200B:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	ecx, [ebp+var_20] ; jumptable 68F51E9A case 11
		lea	eax, [esi+2]
		mov	edx, 11h
		mov	[ecx], eax
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F5201D:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	[ebp+arg_4], edi ; jumptable 68F51E9A case 12
		mov	eax, [ebp+var_20]
		mov	edx, [ebp+var_1C]
		mov	[ebp+arg_8], eax
		lea	eax, [esi+2]
		mov	[ebp+arg_0], eax
		mov	eax, 0Ch

loc_68F52034:				; CODE XREF: sub_68F51E50+265j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F51D60
; ---------------------------------------------------------------------------

loc_68F52040:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	edx, [ebp+var_20] ; jumptable 68F51E9A case 31
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 17h
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F52052:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		add	esi, 2		; jumptable 68F51E9A case 32
		mov	edx, 0FFFFFFE8h
		cmp	esi, edi
		jz	loc_68F51ED2
		movzx	eax, byte ptr [esi]
		test	al, al
		jnz	loc_68F52424
		movzx	eax, byte ptr [esi+1]
		mov	ecx, [ebp+var_1C]
		movzx	eax, byte ptr [ecx+eax+4Ch]

loc_68F52079:				; CODE XREF: sub_68F51E50+5E0j
		sub	eax, 9		; switch 28 cases
		cmp	eax, 1Bh
		ja	loc_68F51ECB	; jumptable 68F51E9A default case
		jmp	ds:off_68F5BCAC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F5208C:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	edx, [ebp+var_20] ; jumptable 68F51E9A case 35
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 26h
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F5209E:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	[ebp+arg_4], edi ; jumptable 68F51E9A case 13
		mov	edx, [ebp+var_20]
		lea	eax, [esi+2]
		mov	[ebp+arg_0], eax
		mov	eax, 0Dh
		mov	[ebp+arg_8], edx
		mov	edx, [ebp+var_1C]
		jmp	loc_68F52034
; ---------------------------------------------------------------------------

loc_68F520BA:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		lea	ebx, [esi+2]	; jumptable 68F51E9A case 19
		mov	eax, 0FFFFFFFFh
		cmp	ebx, edi
		jz	loc_68F522E7
		movzx	eax, byte ptr [esi+2]
		test	al, al
		jnz	loc_68F52452
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_48], al
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F520E8:				; CODE XREF: sub_68F51E50+614j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F522E0	; jumptable 68F520F4 default case
		jmp	ds:off_68F5BD1C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F520FB:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	ecx, [ebp+var_20] ; jumptable 68F51E9A case 20
		lea	eax, [esi+2]
		mov	edx, 19h
		mov	[ecx], eax
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F5210D:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		lea	ebx, [esi+2]	; jumptable 68F51E9A cases 10,21
		jmp	loc_68F51FC0
; ---------------------------------------------------------------------------

loc_68F52115:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	[ebp+var_24], 12h ; jumptable 68F51E9A cases 22,24

loc_68F5211C:				; CODE XREF: sub_68F51E50+300j
					; sub_68F51E50+30Ej ...
		add	esi, 2		; jumptable 68F52150 cases 22,24-27
					; jumptable 68F5253A cases 22,24-27

loc_68F5211F:				; CODE XREF: sub_68F51E50+34Fj
					; sub_68F51E50+413j ...
		cmp	esi, edi
		jz	loc_68F52448
		movzx	ebx, byte ptr [esi]
		test	bl, bl
		jnz	loc_68F523D2
		movzx	eax, byte ptr [esi+1]
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_58], al
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F52144:				; CODE XREF: sub_68F51E50+594j
		sub	eax, 5		; switch 32 cases
		cmp	eax, 1Fh
		ja	loc_68F51EE8	; jumptable 68F52150 default case
		jmp	ds:off_68F5BD80[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F52157:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	[ebp+var_24], 13h ; jumptable 68F51E9A cases 23,25-27
		jmp	short loc_68F5211C ; jumptable 68F52150	cases 22,24-27
					; jumptable 68F5253A cases 22,24-27
; ---------------------------------------------------------------------------

loc_68F52160:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		movzx	edx, [ebp+var_58] ; jumptable 68F51E9A case 29
		movzx	ebx, bl
		movzx	ecx, [ebp+var_58]
		movzx	eax, ds:byte_68F58380[ebx]
		mov	[ebp+var_28], ebx
		shr	dl, 5
		mov	ebx, 1
		and	ecx, 1Fh
		movzx	edx, dl
		lea	eax, [edx+eax*8]
		shl	ebx, cl
		test	ds:dword_68F58480[eax*4], ebx
		jz	loc_68F52402
		mov	[ebp+var_24], 12h
		add	esi, 2
		jmp	loc_68F5211F
; ---------------------------------------------------------------------------

loc_68F521A4:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	[ebp+arg_0], edi ; jumptable 68F51E9A case 30
		mov	ecx, [ebp+var_20]
		lea	edx, [esi+2]
		mov	eax, [ebp+var_1C]
		mov	[ebp+arg_4], ecx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F51C00
; ---------------------------------------------------------------------------

loc_68F521BF:				; CODE XREF: sub_68F51E50:loc_68F51E9Aj
					; DATA XREF: .rdata:off_68F5BC18o
		mov	edx, [ebp+var_20] ; jumptable 68F51E9A case 36
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 15h
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F521D1:				; CODE XREF: sub_68F51E50+300j
					; DATA XREF: .rdata:off_68F5BD80o
		mov	eax, [ebp+var_20] ; jumptable 68F52150 cases 9-11,20,21,30,32,35,36
		mov	edx, [ebp+var_24]
		mov	[eax], esi
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F521DE:				; CODE XREF: sub_68F51E50+300j
					; DATA XREF: .rdata:off_68F5BD80o
		cmp	[ebp+var_24], 13h ; jumptable 68F52150 case 34
		jz	loc_68F51ECB	; jumptable 68F51E9A default case
		mov	edx, [ebp+var_20]
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 20h
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F521FA:				; CODE XREF: sub_68F51E50+300j
					; DATA XREF: .rdata:off_68F5BD80o
		cmp	[ebp+var_24], 13h ; jumptable 68F52150 case 33
		jz	loc_68F51F0C
		mov	ecx, [ebp+var_20]
		lea	eax, [esi+2]
		mov	edx, 1Fh
		mov	[ecx], eax
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F52216:				; CODE XREF: sub_68F51E50+300j
					; DATA XREF: .rdata:off_68F5BD80o
		movzx	ecx, [ebp+var_58] ; jumptable 68F52150 case 29
		movzx	eax, bl
		movzx	edx, ds:byte_68F58980[eax]
		movzx	eax, [ebp+var_58]
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F5211C	; jumptable 68F52150 cases 22,24-27
					; jumptable 68F5253A cases 22,24-27
		mov	edx, [ebp+var_20]
		mov	[edx], esi
		jmp	loc_68F51ED0
; ---------------------------------------------------------------------------

loc_68F52252:				; CODE XREF: sub_68F51E50+300j
					; DATA XREF: .rdata:off_68F5BD80o
		add	esi, 2		; jumptable 68F52150 case 23
		cmp	[ebp+var_24], 12h
		jz	loc_68F52502
		cmp	[ebp+var_24], 29h
		jnz	loc_68F5211F

loc_68F52269:				; CODE XREF: sub_68F51E50+5CFj
					; sub_68F51E50+6E4j ...
		mov	[ebp+var_24], 13h ; jumptable 68F5253A default case
		jmp	loc_68F5211F
; ---------------------------------------------------------------------------

loc_68F52275:				; CODE XREF: sub_68F51E50+300j
					; DATA XREF: .rdata:off_68F5BD80o
		cmp	[ebp+var_24], 13h ; jumptable 68F52150 case 15
		jz	loc_68F51EE8	; jumptable 68F52150 default case
		mov	edx, [ebp+var_20]
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 1Eh
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F52291:				; CODE XREF: sub_68F51E50+235j
					; DATA XREF: .rdata:off_68F5BCACo
		mov	ecx, [ebp+var_20] ; jumptable 68F52085 cases 9-11,21,32,35,36
		mov	edx, 18h
		mov	[ecx], esi
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F522A0:				; CODE XREF: sub_68F51E50+235j
					; DATA XREF: .rdata:off_68F5BCACo
		mov	edx, [ebp+var_20] ; jumptable 68F52085 case 34
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 25h
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F522B2:				; CODE XREF: sub_68F51E50+235j
					; DATA XREF: .rdata:off_68F5BCACo
		mov	edx, [ebp+var_20] ; jumptable 68F52085 case 33
		lea	eax, [esi+2]
		mov	[edx], eax
		mov	edx, 24h
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F522C4:				; CODE XREF: sub_68F51E50+235j
					; DATA XREF: .rdata:off_68F5BCACo
		mov	ecx, [ebp+var_20] ; jumptable 68F52085 case 15
		lea	eax, [esi+2]
		mov	edx, 23h
		mov	[ecx], eax
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F522D6:				; CODE XREF: sub_68F51E50+2A4j
					; sub_68F51E50+4FFj
					; DATA XREF: ...
		sub	edi, ebx	; jumptable 68F520F4 case 5
					; jumptable 68F5234F case 5
		mov	eax, 0FFFFFFFEh
		dec	edi
		jle	short loc_68F522E7

loc_68F522E0:				; CODE XREF: sub_68F51E50+29Ej
					; sub_68F51E50+2A4j
					; DATA XREF: ...
		mov	edx, [ebp+var_20] ; jumptable 68F520F4 default case
		xor	eax, eax
		mov	[edx], ebx

loc_68F522E7:				; CODE XREF: sub_68F51E50+274j
					; sub_68F51E50+48Ej ...
		mov	edx, eax
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F522EE:				; CODE XREF: sub_68F51E50+2A4j
					; DATA XREF: .rdata:off_68F5BD1Co
		movzx	eax, byte ptr [ebx] ; jumptable	68F520F4 case 29
		movzx	edx, ds:byte_68F58380[eax]

loc_68F522F8:				; CODE XREF: sub_68F51E50+545j
		movzx	eax, [ebp+var_48]
		movzx	ecx, [ebp+var_48]
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jz	short loc_68F52362

loc_68F5231C:				; CODE XREF: sub_68F51E50+2A4j
					; sub_68F51E50+4FFj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F520F4 cases 22,24
					; jumptable 68F5234F cases 22,24-27
		cmp	ebx, edi
		jz	loc_68F5267A
		movzx	ecx, byte ptr [ebx]
		test	cl, cl
		mov	[ebp+var_29], cl
		jnz	loc_68F5262F
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_48], al
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F52347:				; CODE XREF: sub_68F51E50+7F2j
		sub	eax, 5		; switch 32 cases
		cmp	eax, 1Fh
		ja	short loc_68F5237E ; jumptable 68F5234F	default	case
		jmp	ds:off_68F5BE00[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F52356:				; CODE XREF: sub_68F51E50+2A4j
					; sub_68F51E50+4FFj
					; DATA XREF: ...
		sub	edi, ebx	; jumptable 68F520F4 case 7
					; jumptable 68F5234F case 7
		mov	eax, 0FFFFFFFEh
		cmp	edi, 3
		jle	short loc_68F522E7

loc_68F52362:				; CODE XREF: sub_68F51E50+4CAj
		mov	eax, [ebp+var_20]
		mov	[eax], ebx
		xor	eax, eax
		jmp	loc_68F522E7
; ---------------------------------------------------------------------------

loc_68F5236E:				; CODE XREF: sub_68F51E50+2A4j
					; sub_68F51E50+4FFj
					; DATA XREF: ...
		sub	edi, ebx	; jumptable 68F520F4 case 6
					; jumptable 68F5234F case 6
		mov	eax, 0FFFFFFFEh
		cmp	edi, 2
		jle	loc_68F522E7

loc_68F5237E:				; CODE XREF: sub_68F51E50+4FDj
					; sub_68F51E50+4FFj
					; DATA XREF: ...
		mov	ecx, [ebp+var_20] ; jumptable 68F5234F default case
		xor	eax, eax
		mov	[ecx], ebx
		jmp	loc_68F522E7
; ---------------------------------------------------------------------------

loc_68F5238A:				; CODE XREF: sub_68F51E50+4FFj
					; DATA XREF: .rdata:off_68F5BE00o
		movzx	eax, [ebp+var_29] ; jumptable 68F5234F case 29
		movzx	edx, ds:byte_68F58980[eax]
		jmp	loc_68F522F8
; ---------------------------------------------------------------------------

loc_68F5239A:				; CODE XREF: sub_68F51E50+4FFj
					; DATA XREF: .rdata:off_68F5BE00o
		mov	edx, [ebp+var_20] ; jumptable 68F5234F cases 9-11,21,30,32,36
		mov	eax, 14h
		mov	[edx], ebx
		mov	edx, eax
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------
		align 10h

loc_68F523B0:				; CODE XREF: sub_68F51E50+19Aj
		cmp	eax, 15h
		jnz	loc_68F51FFC

loc_68F523B9:				; CODE XREF: sub_68F51E50+194j
		add	ebx, 2
		jmp	loc_68F51FC0
; ---------------------------------------------------------------------------

loc_68F523C1:				; CODE XREF: sub_68F51E50+17Fj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F51FE1
; ---------------------------------------------------------------------------

loc_68F523D2:				; CODE XREF: sub_68F51E50+2DCj
		movzx	ecx, byte ptr [esi+1]
		movsx	eax, bl
		movsx	edx, cl
		mov	[ebp+var_58], cl
		call	sub_68F4CDA0
		jmp	loc_68F52144
; ---------------------------------------------------------------------------

loc_68F523E9:				; CODE XREF: sub_68F51E50+174j
		mov	eax, [ebp+var_20]
		mov	edx, 0Fh
		mov	[eax], ebx
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F523F8:				; CODE XREF: sub_68F51E50+54j
					; sub_68F51E50+6B4j ...
		mov	edx, 0FFFFFFFFh
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F52402:				; CODE XREF: sub_68F51E50+33Fj
		mov	ecx, [ebp+var_28]
		movzx	eax, ds:byte_68F58980[ecx]
		lea	eax, [edx+eax*8]
		test	ds:dword_68F58480[eax*4], ebx
		jz	loc_68F51ECB	; jumptable 68F51E9A default case
		add	esi, 2
		jmp	loc_68F52269	; jumptable 68F5253A default case
; ---------------------------------------------------------------------------

loc_68F52424:				; CODE XREF: sub_68F51E50+217j
		movsx	edx, byte ptr [esi+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	loc_68F52079
; ---------------------------------------------------------------------------

loc_68F52435:				; CODE XREF: sub_68F51E50+D4j
		movsx	edx, byte ptr [esi+1]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	loc_68F51F36
; ---------------------------------------------------------------------------

loc_68F52448:				; CODE XREF: sub_68F51E50+2D1j
		mov	edx, [ebp+var_24]
		neg	edx
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F52452:				; CODE XREF: sub_68F51E50+280j
		movzx	ecx, byte ptr [ebx+1]
		movsx	eax, al
		movsx	edx, cl
		mov	[ebp+var_48], cl
		call	sub_68F4CDA0
		jmp	loc_68F520E8
; ---------------------------------------------------------------------------

loc_68F52469:				; CODE XREF: sub_68F51E50+141j
		lea	eax, [esi+2]
		mov	edx, 0FFFFFFFFh
		cmp	eax, edi
		jz	loc_68F51ED2
		cmp	byte ptr [esi+2], 0
		jnz	loc_68F51F97
		cmp	byte ptr [esi+3], 3Eh
		jnz	loc_68F51F97
		mov	edx, [ebp+var_20]
		lea	eax, [esi+4]
		mov	[edx], eax
		mov	edx, 22h
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------
		align 10h

loc_68F524A0:				; CODE XREF: sub_68F51E50+102j
		lea	ebx, [esi+2]
		mov	edx, 0FFFFFFFFh
		cmp	ebx, edi
		jz	loc_68F51ED2
		movzx	eax, byte ptr [esi+2]
		test	al, al
		jnz	short loc_68F524F4
		movzx	eax, byte ptr [ebx+1]
		mov	ecx, [ebp+var_1C]
		movzx	eax, byte ptr [ecx+eax+4Ch]

loc_68F524C4:				; CODE XREF: sub_68F51E50+6B0j
		cmp	eax, 16h
		jz	loc_68F525AD
		jg	loc_68F52605
		cmp	eax, 14h
		jz	short loc_68F524E2

loc_68F524D8:				; CODE XREF: sub_68F51E50+7BDj
		mov	ecx, [ebp+var_20]
		mov	[ecx], ebx
		jmp	loc_68F51ED0
; ---------------------------------------------------------------------------

loc_68F524E2:				; CODE XREF: sub_68F51E50+686j
		mov	edx, [ebp+var_20]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	edx, 21h
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F524F4:				; CODE XREF: sub_68F51E50+666j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F524C4
; ---------------------------------------------------------------------------

loc_68F52502:				; CODE XREF: sub_68F51E50+409j
		cmp	esi, edi
		jz	loc_68F523F8
		mov	[ebp+var_24], 29h
		movzx	ebx, byte ptr [esi]
		test	bl, bl
		jnz	loc_68F52647
		movzx	edx, byte ptr [esi+1]
		mov	ecx, [ebp+var_1C]
		movzx	eax, dl
		mov	[ebp+var_58], dl
		movzx	eax, byte ptr [ecx+eax+4Ch]

loc_68F5252E:				; CODE XREF: sub_68F51E50+809j
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	loc_68F52269	; jumptable 68F5253A default case
		jmp	ds:off_68F5BE80[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F52541:				; CODE XREF: sub_68F51E50+6EAj
					; DATA XREF: .rdata:off_68F5BE80o
		movzx	ecx, [ebp+var_58] ; jumptable 68F5253A case 29
		movzx	eax, bl
		movzx	edx, ds:byte_68F58980[eax]
		movzx	eax, [ebp+var_58]
		and	ecx, 1Fh
		shr	al, 5
		movzx	eax, al
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		test	ds:dword_68F58480[edx*4], eax
		jnz	loc_68F5211C	; jumptable 68F52150 cases 22,24-27
					; jumptable 68F5253A cases 22,24-27
		mov	ecx, [ebp+var_20]
		mov	[ecx], esi
		jmp	loc_68F51ED0
; ---------------------------------------------------------------------------
		align 10h

loc_68F52580:				; CODE XREF: sub_68F51E50+6EAj
					; DATA XREF: .rdata:off_68F5BE80o
		sub	edi, esi	; jumptable 68F5253A case 7
		mov	edx, 0FFFFFFFEh
		cmp	edi, 3
		jmp	loc_68F51EF7
; ---------------------------------------------------------------------------

loc_68F5258F:				; CODE XREF: sub_68F51E50+6EAj
					; DATA XREF: .rdata:off_68F5BE80o
		sub	edi, esi	; jumptable 68F5253A case 6
		mov	edx, 0FFFFFFFEh
		cmp	edi, 2
		jmp	loc_68F51EE6
; ---------------------------------------------------------------------------

loc_68F5259E:				; CODE XREF: sub_68F51E50+6EAj
					; DATA XREF: .rdata:off_68F5BE80o
		sub	edi, esi	; jumptable 68F5253A case 5
		mov	edx, 0FFFFFFFEh
		cmp	edi, 1
		jmp	loc_68F51F0A
; ---------------------------------------------------------------------------

loc_68F525AD:				; CODE XREF: sub_68F51E50+677j
					; sub_68F51E50+7B8j
		add	ebx, 2
		cmp	ebx, edi
		jz	loc_68F523F8
		mov	esi, 1
		jmp	short loc_68F525EE
; ---------------------------------------------------------------------------

loc_68F525BF:				; CODE XREF: sub_68F51E50+7A3j
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_1C]
		movzx	ecx, byte ptr [edx+eax+4Ch]

loc_68F525CB:				; CODE XREF: sub_68F51E50+7B3j
		cmp	ecx, 1Eh
		ja	loc_68F52670
		mov	eax, esi
		shl	eax, cl
		test	eax, 1400000h
		jz	loc_68F52686
		add	ebx, 2
		cmp	ebx, edi
		jz	loc_68F523F8

loc_68F525EE:				; CODE XREF: sub_68F51E50+76Dj
		movzx	eax, byte ptr [ebx]
		test	al, al
		jz	short loc_68F525BF
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	short loc_68F525CB
; ---------------------------------------------------------------------------

loc_68F52605:				; CODE XREF: sub_68F51E50+67Dj
		cmp	eax, 18h
		jz	short loc_68F525AD
		cmp	eax, 1Bh
		jnz	loc_68F524D8
		mov	eax, [ebp+var_20]
		mov	[esp+68h+var_68], edi
		lea	edx, [ebx+2]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebp+var_1C]
		call	sub_68F502A0
		mov	edx, eax
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F5262F:				; CODE XREF: sub_68F51E50+4DFj
		movzx	ecx, byte ptr [ebx+1]
		movsx	eax, [ebp+var_29]
		movsx	edx, cl
		mov	[ebp+var_48], cl
		call	sub_68F4CDA0
		jmp	loc_68F52347
; ---------------------------------------------------------------------------

loc_68F52647:				; CODE XREF: sub_68F51E50+6C6j
		movzx	eax, byte ptr [esi+1]
		movsx	edx, al
		mov	[ebp+var_58], al
		movsx	eax, bl
		call	sub_68F4CDA0
		jmp	loc_68F5252E
; ---------------------------------------------------------------------------

loc_68F5265E:				; CODE XREF: sub_68F51E50+F7j
		mov	edx, [ebp+var_20]
		lea	eax, [esi-2]
		mov	[edx], eax
		mov	edx, 1Dh
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F52670:				; CODE XREF: sub_68F51E50+77Ej
					; sub_68F51E50+842j ...
		mov	eax, [ebp+var_20]
		mov	[eax], ebx
		jmp	loc_68F51ED0
; ---------------------------------------------------------------------------

loc_68F5267A:				; CODE XREF: sub_68F51E50+4D1j
		mov	eax, 0FFFFFFECh
		mov	edx, eax
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F52686:				; CODE XREF: sub_68F51E50+78Dj
		test	eax, 200600h
		jnz	short loc_68F526C7
		test	eax, 40000000h
		jz	short loc_68F52670
		lea	eax, [ebx+2]
		mov	edx, 0FFFFFFFFh
		cmp	eax, edi
		jz	loc_68F51ED2
		movzx	eax, byte ptr [ebx+2]
		test	al, al
		jnz	short loc_68F526E5
		movzx	eax, byte ptr [ebx+3]
		mov	edx, [ebp+var_1C]
		movzx	ecx, byte ptr [edx+eax+4Ch]

loc_68F526B8:				; CODE XREF: sub_68F51E50+8A3j
		cmp	ecx, 1Eh
		ja	short loc_68F526C7
		shl	esi, cl
		and	esi, 40200600h
		jnz	short loc_68F52670

loc_68F526C7:				; CODE XREF: sub_68F51E50+83Bj
					; sub_68F51E50+86Bj
		mov	ecx, [ebp+var_20]
		mov	edx, 10h
		mov	[ecx], ebx
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F526D6:				; CODE XREF: sub_68F51E50+15Bj
		mov	eax, [ebp+var_20]
		mov	edx, 0FFFFFFF1h
		mov	[eax], edi
		jmp	loc_68F51ED2
; ---------------------------------------------------------------------------

loc_68F526E5:				; CODE XREF: sub_68F51E50+85Aj
		movsx	edx, byte ptr [ebx+3]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	short loc_68F526B8
sub_68F51E50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F52700	proc near		; DATA XREF: .rdata:68F57D90o
					; .rdata:68F59250o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		cmp	ebx, esi
		mov	[ebp+var_10], eax
		mov	eax, 0FFFFFFFCh
		mov	[ebp+var_14], edx
		jz	short loc_68F52756
		mov	edi, ebx

loc_68F52726:				; CODE XREF: sub_68F52700+4Aj
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F52760
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_10]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F52739:				; CODE XREF: sub_68F52700+6Cj
		cmp	eax, 15h	; switch 22 cases
		ja	short loc_68F52745 ; jumptable 68F5273E	default	case
		jmp	ds:off_68F5BEE4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F52745:				; CODE XREF: sub_68F52700+3Cj
					; sub_68F52700+3Ej
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F5273E default case

loc_68F52748:				; CODE XREF: sub_68F52700+AEj
					; sub_68F52700+B3j
		cmp	ebx, esi
		jnz	short loc_68F52726

loc_68F5274C:				; CODE XREF: sub_68F52700+7Fj
					; sub_68F52700+B7j ...
		mov	edx, [ebp+var_14]
		mov	[edx], ebx

loc_68F52751:				; CODE XREF: sub_68F52700+7Bj
		mov	eax, 6

loc_68F52756:				; CODE XREF: sub_68F52700+22j
					; sub_68F52700+C3j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F52760:				; CODE XREF: sub_68F52700+2Bj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F52739
; ---------------------------------------------------------------------------

loc_68F5276E:				; CODE XREF: sub_68F52700+3Ej
					; DATA XREF: .rdata:off_68F5BEE4o
		cmp	ebx, edi	; jumptable 68F5273E case 21
		jz	loc_68F5281E
		mov	eax, [ebp+var_14]
		mov	[eax], ebx
		jmp	short loc_68F52751
; ---------------------------------------------------------------------------

loc_68F5277D:				; CODE XREF: sub_68F52700+3Ej
					; DATA XREF: .rdata:off_68F5BEE4o
		cmp	ebx, edi	; jumptable 68F5273E case 3
		jnz	short loc_68F5274C
		mov	[ebp+arg_0], esi
		mov	eax, [ebp+var_14]
		lea	edx, [ebx+2]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+var_10]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F50880
; ---------------------------------------------------------------------------

loc_68F5279C:				; CODE XREF: sub_68F52700+3Ej
					; DATA XREF: .rdata:off_68F5BEE4o
		mov	eax, [ebp+var_14] ; jumptable 68F5273E case 2
		mov	[eax], ebx
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F527AB:				; CODE XREF: sub_68F52700+3Ej
					; DATA XREF: .rdata:off_68F5BEE4o
		add	ebx, 3		; jumptable 68F5273E case 6
		jmp	short loc_68F52748
; ---------------------------------------------------------------------------

loc_68F527B0:				; CODE XREF: sub_68F52700+3Ej
					; DATA XREF: .rdata:off_68F5BEE4o
		add	ebx, 4		; jumptable 68F5273E case 7
		jmp	short loc_68F52748
; ---------------------------------------------------------------------------

loc_68F527B5:				; CODE XREF: sub_68F52700+3Ej
					; DATA XREF: .rdata:off_68F5BEE4o
		cmp	ebx, edi	; jumptable 68F5273E case 9
		jnz	short loc_68F5274C
		add	ebx, 2
		mov	eax, 0FFFFFFFDh
		cmp	ebx, esi
		jz	short loc_68F52756
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F52803
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_10]
		cmp	byte ptr [edx+eax+4Ch],	0Ah

loc_68F527D8:				; CODE XREF: sub_68F52700+112j
		jz	short loc_68F52814
		mov	eax, [ebp+var_14]
		mov	[eax], ebx

loc_68F527DF:				; CODE XREF: sub_68F52700+11Cj
		mov	eax, 7

loc_68F527E4:				; CODE XREF: sub_68F52700+101j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F527EC:				; CODE XREF: sub_68F52700+3Ej
					; DATA XREF: .rdata:off_68F5BEE4o
		cmp	ebx, edi	; jumptable 68F5273E case 10
		jnz	loc_68F5274C
		mov	edx, [ebp+var_14]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 7
		jmp	short loc_68F527E4
; ---------------------------------------------------------------------------

loc_68F52803:				; CODE XREF: sub_68F52700+CAj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jmp	short loc_68F527D8
; ---------------------------------------------------------------------------

loc_68F52814:				; CODE XREF: sub_68F52700:loc_68F527D8j
		mov	eax, [ebp+var_14]
		add	ebx, 2
		mov	[eax], ebx
		jmp	short loc_68F527DF
; ---------------------------------------------------------------------------

loc_68F5281E:				; CODE XREF: sub_68F52700+70j
		mov	edx, [ebp+var_14]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 27h
		jmp	loc_68F52756
sub_68F52700	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F52830	proc near		; DATA XREF: .rdata:68F57D94o
					; .rdata:68F59254o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		cmp	ebx, esi
		mov	[ebp+var_10], eax
		mov	eax, 0FFFFFFFCh
		mov	[ebp+var_14], edx
		jz	short loc_68F52893
		mov	edi, ebx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F52860:				; CODE XREF: sub_68F52830+57j
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F528A0
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_10]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F52873:				; CODE XREF: sub_68F52830+7Cj
		sub	eax, 3		; switch 28 cases
		cmp	eax, 1Bh
		ja	short loc_68F52882 ; jumptable 68F5287B	default	case
		jmp	ds:off_68F5BF3C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F52882:				; CODE XREF: sub_68F52830+49j
					; sub_68F52830+4Bj
					; DATA XREF: ...
		add	ebx, 2		; jumptable 68F5287B default case

loc_68F52885:				; CODE XREF: sub_68F52830+A7j
					; sub_68F52830+CBj
		cmp	ebx, esi
		jnz	short loc_68F52860

loc_68F52889:				; CODE XREF: sub_68F52830+106j
		mov	eax, [ebp+var_14]
		mov	[eax], ebx

loc_68F5288E:				; CODE XREF: sub_68F52830+120j
		mov	eax, 6

loc_68F52893:				; CODE XREF: sub_68F52830+22j
					; sub_68F52830+9Ej ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F528A0:				; CODE XREF: sub_68F52830+35j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F52873
; ---------------------------------------------------------------------------

loc_68F528AE:				; CODE XREF: sub_68F52830+4Bj
					; DATA XREF: .rdata:off_68F5BF3Co
		cmp	ebx, edi	; jumptable 68F5287B case 30
		jnz	loc_68F5294B
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], esi
		lea	edx, [ebx+2]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+var_10]
		call	sub_68F51C00
		cmp	eax, 16h
		jnz	short loc_68F52893
		xor	eax, eax
		jmp	short loc_68F52893
; ---------------------------------------------------------------------------

loc_68F528D4:				; CODE XREF: sub_68F52830+4Bj
					; DATA XREF: .rdata:off_68F5BF3Co
		add	ebx, 3		; jumptable 68F5287B case 6
		jmp	short loc_68F52885
; ---------------------------------------------------------------------------

loc_68F528D9:				; CODE XREF: sub_68F52830+4Bj
					; DATA XREF: .rdata:off_68F5BF3Co
		cmp	ebx, edi	; jumptable 68F5287B case 3
		jnz	short loc_68F5294B
		mov	[ebp+arg_0], esi
		mov	eax, [ebp+var_14]
		lea	edx, [ebx+2]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+var_10]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_68F50880
; ---------------------------------------------------------------------------

loc_68F528F8:				; CODE XREF: sub_68F52830+4Bj
					; DATA XREF: .rdata:off_68F5BF3Co
		add	ebx, 4		; jumptable 68F5287B case 7
		jmp	short loc_68F52885
; ---------------------------------------------------------------------------

loc_68F528FD:				; CODE XREF: sub_68F52830+4Bj
					; DATA XREF: .rdata:off_68F5BF3Co
		cmp	ebx, edi	; jumptable 68F5287B case 9
		jnz	short loc_68F5294B
		add	ebx, 2
		mov	eax, 0FFFFFFFDh
		cmp	ebx, esi
		jz	short loc_68F52893
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F52955
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+var_10]
		cmp	byte ptr [edx+eax+4Ch],	0Ah

loc_68F52920:				; CODE XREF: sub_68F52830+134j
		jz	short loc_68F52966
		mov	eax, [ebp+var_14]
		mov	[eax], ebx

loc_68F52927:				; CODE XREF: sub_68F52830+13Ej
		mov	eax, 7

loc_68F5292C:				; CODE XREF: sub_68F52830+119j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F52934:				; CODE XREF: sub_68F52830+4Bj
					; DATA XREF: .rdata:off_68F5BF3Co
		cmp	ebx, edi	; jumptable 68F5287B case 10
		jnz	loc_68F52889
		mov	edx, [ebp+var_14]
		lea	eax, [ebx+2]
		mov	[edx], eax
		mov	eax, 7
		jmp	short loc_68F5292C
; ---------------------------------------------------------------------------

loc_68F5294B:				; CODE XREF: sub_68F52830+80j
					; sub_68F52830+ABj ...
		mov	edx, [ebp+var_14]
		mov	[edx], ebx
		jmp	loc_68F5288E
; ---------------------------------------------------------------------------

loc_68F52955:				; CODE XREF: sub_68F52830+E2j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jmp	short loc_68F52920
; ---------------------------------------------------------------------------

loc_68F52966:				; CODE XREF: sub_68F52830:loc_68F52920j
		mov	eax, [ebp+var_14]
		add	ebx, 2
		mov	[eax], ebx
		jmp	short loc_68F52927
sub_68F52830	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F52970	proc near		; DATA XREF: .rdata:68F57D8Co
					; .rdata:68F5924Co

var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	esi, [ebp+arg_8]
		mov	[ebp+var_10], 0
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebp+arg_0]
		mov	eax, esi
		sub	eax, ebx
		test	al, 1
		jz	short loc_68F529A0
		and	eax, 0FFFFFFFEh
		lea	esi, [ebx+eax]
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F529A0:				; CODE XREF: sub_68F52970+1Fj
					; sub_68F52970+5Aj ...
		cmp	ebx, esi
		jz	short loc_68F529F7

loc_68F529A4:				; CODE XREF: sub_68F52970+85j
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F52A02
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F529B4:				; CODE XREF: sub_68F52970+9Ej
		cmp	eax, 8		; switch 9 cases
		ja	short loc_68F529F0 ; jumptable 68F529B9	default	case
		jmp	ds:off_68F5BFAC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F529C0:				; CODE XREF: sub_68F52970+49j
					; DATA XREF: .rdata:off_68F5BFACo
		add	ebx, 2		; jumptable 68F529B9 case 2
		cmp	ebx, esi
		jz	short loc_68F529F7
		cmp	byte ptr [ebx],	0
		jnz	short loc_68F529A0
		cmp	byte ptr [ebx+1], 21h
		jnz	short loc_68F529A0
		add	ebx, 2
		cmp	ebx, esi
		jz	short loc_68F529F7
		cmp	byte ptr [ebx],	0
		jnz	short loc_68F529A0
		cmp	byte ptr [ebx+1], 5Bh
		jnz	short loc_68F529A0
		inc	[ebp+var_10]
		mov	esi, esi
		lea	edi, [edi+0]

loc_68F529F0:				; CODE XREF: sub_68F52970+47j
					; sub_68F52970+49j ...
		add	ebx, 2		; jumptable 68F529B9 default case
		cmp	ebx, esi
		jnz	short loc_68F529A4

loc_68F529F7:				; CODE XREF: sub_68F52970+32j
					; sub_68F52970+55j ...
		pop	ebx
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F52A02:				; CODE XREF: sub_68F52970+39j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F529B4
; ---------------------------------------------------------------------------

loc_68F52A10:				; CODE XREF: sub_68F52970+49j
					; DATA XREF: .rdata:off_68F5BFACo
		mov	eax, [ebp+arg_C] ; jumptable 68F529B9 cases 0,1,8
		mov	[eax], ebx
		xor	eax, eax

loc_68F52A17:				; CODE XREF: sub_68F52970+DBj
					; sub_68F52970+130j
		pop	ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F52A1D:				; CODE XREF: sub_68F52970+49j
					; DATA XREF: .rdata:off_68F5BFACo
		mov	eax, esi	; jumptable 68F529B9 case 7
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_68F52A46
		add	ebx, 4
		jmp	loc_68F529A0
; ---------------------------------------------------------------------------

loc_68F52A2E:				; CODE XREF: sub_68F52970+49j
					; DATA XREF: .rdata:off_68F5BFACo
		mov	eax, esi	; jumptable 68F529B9 case 6
		sub	eax, ebx
		cmp	eax, 2
		jle	short loc_68F52A46
		add	ebx, 3
		jmp	loc_68F529A0
; ---------------------------------------------------------------------------

loc_68F52A3F:				; CODE XREF: sub_68F52970+49j
					; DATA XREF: .rdata:off_68F5BFACo
		mov	eax, esi	; jumptable 68F529B9 case 5
		sub	eax, ebx
		dec	eax
		jg	short loc_68F529F0 ; jumptable 68F529B9	default	case

loc_68F52A46:				; CODE XREF: sub_68F52970+B4j
					; sub_68F52970+C5j
		mov	eax, 0FFFFFFFEh
		jmp	short loc_68F52A17
; ---------------------------------------------------------------------------
		align 10h

loc_68F52A50:				; CODE XREF: sub_68F52970+49j
					; DATA XREF: .rdata:off_68F5BFACo
		add	ebx, 2		; jumptable 68F529B9 case 4
		cmp	ebx, esi
		jz	short loc_68F529F7
		cmp	byte ptr [ebx],	0
		jnz	loc_68F529A0
		cmp	byte ptr [ebx+1], 5Dh
		jnz	loc_68F529A0
		add	ebx, 2
		cmp	ebx, esi
		jz	short loc_68F529F7
		cmp	byte ptr [ebx],	0
		jnz	loc_68F529A0
		cmp	byte ptr [ebx+1], 3Eh
		jnz	loc_68F529A0
		mov	eax, [ebp+var_10]
		add	ebx, 2
		test	eax, eax
		jz	short loc_68F52A96
		dec	[ebp+var_10]
		jmp	loc_68F529A0
; ---------------------------------------------------------------------------

loc_68F52A96:				; CODE XREF: sub_68F52970+11Cj
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		mov	eax, 2Ah
		jmp	loc_68F52A17
sub_68F52970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F52AB0	proc near		; DATA XREF: .rdata:68F57DB8o
					; .rdata:68F59278o

var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		add	ebx, 2
		sub	esi, 2
		cmp	ebx, esi
		jz	short loc_68F52B2B
		lea	esi, [esi+0]

loc_68F52AD0:				; CODE XREF: sub_68F52AB0+79j
		movzx	eax, byte ptr [ebx]
		test	al, al
		mov	[ebp+var_E], al
		jnz	short loc_68F52B36
		movzx	eax, byte ptr [ebx+1]
		mov	[ebp+var_D], al
		movzx	eax, al
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F52AE9:				; CODE XREF: sub_68F52AB0+99j
		lea	ecx, [eax-9]
		cmp	ecx, 1Ah
		ja	short loc_68F52B10
		mov	eax, 1
		shl	eax, cl
		test	eax, 7E5C7F3h
		jnz	short loc_68F52B24
		test	eax, 22000h
		jnz	short loc_68F52B50
		test	ah, 10h
		jnz	short loc_68F52B64
		nop
		lea	esi, [esi+0]

loc_68F52B10:				; CODE XREF: sub_68F52AB0+3Fj
		cmp	[ebp+var_E], 0
		jnz	short loc_68F52B70

loc_68F52B16:				; CODE XREF: sub_68F52AB0+ADj
		movsx	eax, [ebp+var_D]
		cmp	eax, 24h
		jz	short loc_68F52B24
		cmp	eax, 40h
		jnz	short loc_68F52B70

loc_68F52B24:				; CODE XREF: sub_68F52AB0+4Dj
					; sub_68F52AB0+6Dj ...
		add	ebx, 2

loc_68F52B27:				; CODE XREF: sub_68F52AB0+B2j
		cmp	ebx, esi
		jnz	short loc_68F52AD0

loc_68F52B2B:				; CODE XREF: sub_68F52AB0+1Aj
		pop	edx
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F52B36:				; CODE XREF: sub_68F52AB0+28j
		movzx	eax, byte ptr [ebx+1]
		movsx	edx, al
		mov	[ebp+var_D], al
		movsx	eax, [ebp+var_E]
		call	sub_68F4CDA0
		jmp	short loc_68F52AE9
; ---------------------------------------------------------------------------
		align 10h

loc_68F52B50:				; CODE XREF: sub_68F52AB0+54j
		cmp	[ebp+var_E], 0
		jnz	short loc_68F52B70
		movsx	eax, [ebp+var_D]
		and	eax, 0FFFFFF80h
		jnz	short loc_68F52B16
		add	ebx, 2
		jmp	short loc_68F52B27
; ---------------------------------------------------------------------------

loc_68F52B64:				; CODE XREF: sub_68F52AB0+59j
		cmp	[ebp+var_E], 0
		jnz	short loc_68F52B24
		cmp	[ebp+var_D], 9
		jnz	short loc_68F52B24

loc_68F52B70:				; CODE XREF: sub_68F52AB0+64j
					; sub_68F52AB0+72j ...
		mov	eax, [ebp+arg_C]
		mov	[eax], ebx
		xor	eax, eax
		pop	edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F52AB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F52B80	proc near		; DATA XREF: .rdata:68F57DA8o
					; .rdata:68F59268o

var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 0Ch
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_10], 1
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_14], 0
		add	ebx, 2
		movzx	eax, byte ptr [ebx]
		test	al, al
		mov	[ebp+var_16], al
		jnz	short loc_68F52C0C
		lea	esi, [esi+0]

loc_68F52BB0:				; CODE XREF: sub_68F52B80+8Aj
		movzx	edx, byte ptr [ebx+1]
		movzx	eax, dl
		mov	[ebp+var_15], dl
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F52BC2:				; CODE XREF: sub_68F52B80+9Fj
		sub	eax, 3
		lea	ecx, [ebx+2]
		cmp	eax, 1Ah	; switch 27 cases
		ja	short loc_68F52C00 ; jumptable 68F52BCD	default	case
		jmp	ds:off_68F5BFD0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F52BD4:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		cmp	[ebp+var_10], 2	; jumptable 68F52BCD case 10
		jz	loc_68F52DBE
		cmp	esi, edi
		lea	ecx, [ebx+2]
		jge	short loc_68F52BF1
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx+4], ecx

loc_68F52BF1:				; CODE XREF: sub_68F52B80+63j
		mov	[ebp+var_10], 2
		mov	[ebp+var_14], 0Dh
		nop

loc_68F52C00:				; CODE XREF: sub_68F52B80+4Bj
					; sub_68F52B80+A9j ...
		mov	ebx, ecx	; jumptable 68F52BCD default case

loc_68F52C02:				; CODE XREF: sub_68F52B80+CBj
					; sub_68F52B80+160j ...
		movzx	eax, byte ptr [ebx]
		test	al, al
		mov	[ebp+var_16], al
		jz	short loc_68F52BB0

loc_68F52C0C:				; CODE XREF: sub_68F52B80+2Aj
		movzx	eax, byte ptr [ebx+1]
		movsx	edx, al
		mov	[ebp+var_15], al
		movsx	eax, [ebp+var_16]
		call	sub_68F4CDA0
		jmp	short loc_68F52BC2
; ---------------------------------------------------------------------------

loc_68F52C21:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		mov	eax, [ebp+var_10] ; jumptable 68F52BCD cases 2,19,21,26
		lea	ecx, [ebx+2]
		test	eax, eax
		jnz	short loc_68F52C00 ; jumptable 68F52BCD	default	case
		cmp	esi, edi
		jge	short loc_68F52C3F
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx], ebx
		mov	byte ptr [eax+edx+0Ch],	1

loc_68F52C3F:				; CODE XREF: sub_68F52B80+ADj
		mov	[ebp+var_10], 1

loc_68F52C46:				; CODE XREF: sub_68F52B80+4Dj
					; sub_68F52B80+127j
					; DATA XREF: ...
		lea	ecx, [ebx+2]	; jumptable 68F52BCD cases 1,5,11-13,15-17,20,22-25

loc_68F52C49:				; CODE XREF: sub_68F52B80+121j
					; sub_68F52B80+20Cj ...
		mov	ebx, ecx
		jmp	short loc_68F52C02
; ---------------------------------------------------------------------------

loc_68F52C4D:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		cmp	[ebp+var_10], 1	; jumptable 68F52BCD case 18
		jz	loc_68F52D82
		cmp	[ebp+var_10], 2
		lea	ecx, [ebx+2]
		setz	al
		xor	edx, edx
		cmp	esi, edi
		setl	dl
		test	edx, eax
		jz	short loc_68F52C00 ; jumptable 68F52BCD	default	case
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		cmp	byte ptr [eax+edx+0Ch],	0
		jz	short loc_68F52C00 ; jumptable 68F52BCD	default	case
		cmp	[eax+edx+4], ebx
		jz	short loc_68F52C91
		cmp	[ebp+var_16], 0
		jnz	short loc_68F52C91
		cmp	[ebp+var_15], 20h
		jz	loc_68F52DC7

loc_68F52C91:				; CODE XREF: sub_68F52B80+FFj
					; sub_68F52B80+105j ...
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		lea	ecx, [ebx+2]
		shl	eax, 4
		mov	byte ptr [eax+edx+0Ch],	0
		jmp	short loc_68F52C49
; ---------------------------------------------------------------------------

loc_68F52CA3:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		cmp	[ebp+var_10], 2	; jumptable 68F52BCD cases 8,14
		jz	short loc_68F52C46 ; jumptable 68F52BCD	cases 1,5,11-13,15-17,20,22-25
		add	esp, 0Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F52CB3:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		cmp	[ebp+var_10], 2	; jumptable 68F52BCD case 9
		jz	loc_68F52D91
		cmp	esi, edi
		lea	ecx, [ebx+2]
		jge	short loc_68F52CD0
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx+4], ecx

loc_68F52CD0:				; CODE XREF: sub_68F52B80+142j
		mov	[ebp+var_10], 2
		mov	ebx, ecx
		mov	[ebp+var_14], 0Ch
		jmp	loc_68F52C02
; ---------------------------------------------------------------------------

loc_68F52CE5:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		cmp	[ebp+var_10], 1	; jumptable 68F52BCD cases 6,7
		jz	loc_68F52D82
		cmp	[ebp+var_10], 2
		lea	ecx, [ebx+2]
		setz	al
		xor	edx, edx
		cmp	esi, edi
		setl	dl
		test	edx, eax
		jz	loc_68F52C00	; jumptable 68F52BCD default case

loc_68F52D08:				; CODE XREF: sub_68F52B80+1F9j
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		mov	ebx, ecx
		shl	eax, 4
		mov	byte ptr [eax+edx+0Ch],	0
		jmp	loc_68F52C02
; ---------------------------------------------------------------------------

loc_68F52D1C:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		mov	eax, [ebp+var_10] ; jumptable 68F52BCD case 4
		test	eax, eax
		jnz	short loc_68F52D3E
		cmp	esi, edi
		jge	short loc_68F52D37
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx], ebx
		mov	byte ptr [eax+edx+0Ch],	1

loc_68F52D37:				; CODE XREF: sub_68F52B80+1A5j
		mov	[ebp+var_10], 1

loc_68F52D3E:				; CODE XREF: sub_68F52B80+1A1j
		lea	ecx, [ebx+4]
		mov	ebx, ecx
		jmp	loc_68F52C02
; ---------------------------------------------------------------------------

loc_68F52D48:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		mov	eax, [ebp+var_10] ; jumptable 68F52BCD case 3
		test	eax, eax
		jnz	short loc_68F52D6A
		cmp	esi, edi
		jge	short loc_68F52D63
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx], ebx
		mov	byte ptr [eax+edx+0Ch],	1

loc_68F52D63:				; CODE XREF: sub_68F52B80+1D1j
		mov	[ebp+var_10], 1

loc_68F52D6A:				; CODE XREF: sub_68F52B80+1CDj
		lea	ecx, [ebx+3]
		mov	ebx, ecx
		jmp	loc_68F52C02
; ---------------------------------------------------------------------------

loc_68F52D74:				; CODE XREF: sub_68F52B80+4Dj
					; DATA XREF: .rdata:off_68F5BFD0o
		cmp	esi, edi	; jumptable 68F52BCD case 0
		lea	ecx, [ebx+2]
		jl	short loc_68F52D08
		mov	ebx, ecx
		jmp	loc_68F52C02
; ---------------------------------------------------------------------------

loc_68F52D82:				; CODE XREF: sub_68F52B80+D1j
					; sub_68F52B80+169j
		mov	[ebp+var_10], 0
		lea	ecx, [ebx+2]
		jmp	loc_68F52C49
; ---------------------------------------------------------------------------

loc_68F52D91:				; CODE XREF: sub_68F52B80+137j
		cmp	[ebp+var_14], 0Ch
		lea	ecx, [ebx+2]

loc_68F52D98:				; CODE XREF: sub_68F52B80+245j
		jnz	loc_68F52C00	; jumptable 68F52BCD default case
		mov	[ebp+var_10], 0
		cmp	esi, edi
		jge	short loc_68F52DB5
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		shl	eax, 4
		mov	[eax+edx+8], ebx

loc_68F52DB5:				; CODE XREF: sub_68F52B80+227j
		inc	esi
		lea	ecx, [ebx+2]
		jmp	loc_68F52C49
; ---------------------------------------------------------------------------

loc_68F52DBE:				; CODE XREF: sub_68F52B80+58j
		cmp	[ebp+var_14], 0Dh
		lea	ecx, [ebx+2]
		jmp	short loc_68F52D98
; ---------------------------------------------------------------------------

loc_68F52DC7:				; CODE XREF: sub_68F52B80+10Bj
		movzx	eax, byte ptr [ebx+2]
		test	al, al
		jnz	short loc_68F52DE8
		movzx	eax, byte ptr [ebx+3]
		cmp	al, 20h
		jz	loc_68F52C91
		mov	edx, [ebp+arg_0]
		movzx	eax, al
		movzx	eax, byte ptr [edx+eax+4Ch]
		jmp	short loc_68F52DF7
; ---------------------------------------------------------------------------

loc_68F52DE8:				; CODE XREF: sub_68F52B80+24Dj
		movsx	edx, byte ptr [ebx+3]
		movsx	eax, al
		call	sub_68F4CDA0
		lea	ecx, [ebx+2]

loc_68F52DF7:				; CODE XREF: sub_68F52B80+266j
		cmp	eax, [ebp+var_14]
		jz	loc_68F52C91
		mov	ebx, ecx
		jmp	loc_68F52C02
sub_68F52B80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F52E10	proc near		; DATA XREF: .rdata:68F57DACo
					; .rdata:68F5926Co

arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		mov	ecx, [ebp+arg_4]
		add	ecx, 4
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52E60
		movzx	edx, byte ptr [ecx+1]
		cmp	dl, 78h
		jz	short loc_68F52E75
		cmp	dl, 3Bh

loc_68F52E2D:				; CODE XREF: sub_68F52E10+4Cj
		jz	loc_68F52EB0
		movsx	edx, byte ptr [ecx+1]
		lea	eax, [eax+eax*4]
		lea	eax, [edx+eax*2-30h]
		cmp	eax, 10FFFFh
		jg	short loc_68F52E91
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F52E50:				; CODE XREF: sub_68F52E10+61j
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52E60
		cmp	byte ptr [ecx+1], 3Bh
		jmp	short loc_68F52E2D
; ---------------------------------------------------------------------------
		align 10h

loc_68F52E60:				; CODE XREF: sub_68F52E10+Fj
					; sub_68F52E10+46j
		mov	edx, 0FFFFFFFFh
		lea	eax, [eax+eax*4]
		lea	eax, [edx+eax*2-30h]
		cmp	eax, 10FFFFh
		jle	short loc_68F52E50
		jmp	short loc_68F52E91
; ---------------------------------------------------------------------------

loc_68F52E75:				; CODE XREF: sub_68F52E10+18j
					; sub_68F52E10+7Fj
		add	ecx, 2
		mov	edx, 0FFFFFFFFh
		cmp	byte ptr [ecx],	0
		jz	short loc_68F52EA0

loc_68F52E82:				; CODE XREF: sub_68F52E10+ABj
		lea	ebx, [edx-30h]
		cmp	ebx, 36h	; switch 55 cases
		jbe	short loc_68F52EBD

loc_68F52E8A:				; CODE XREF: sub_68F52E10:loc_68F52EBDj
					; sub_68F52E10+BBj ...
		cmp	eax, 10FFFFh	; jumptable 68F52EBD default case
		jle	short loc_68F52E75

loc_68F52E91:				; CODE XREF: sub_68F52E10+33j
					; sub_68F52E10+63j
		pop	ebx
		mov	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F52EA0:				; CODE XREF: sub_68F52E10+70j
		cmp	byte ptr [ecx+1], 3Bh
		jnz	short loc_68F52EB7
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F52EB0:				; CODE XREF: sub_68F52E10:loc_68F52E2Dj
		pop	ebx
		pop	ebp
		jmp	sub_68F4C750
; ---------------------------------------------------------------------------

loc_68F52EB7:				; CODE XREF: sub_68F52E10+94j
		movsx	edx, byte ptr [ecx+1]
		jmp	short loc_68F52E82
; ---------------------------------------------------------------------------

loc_68F52EBD:				; CODE XREF: sub_68F52E10+78j
		jmp	ds:off_68F5C03C[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F52EC4:				; CODE XREF: sub_68F52E10:loc_68F52EBDj
					; DATA XREF: .rdata:off_68F5C03Co
		shl	eax, 4		; jumptable 68F52EBD cases 49-54
		lea	eax, [edx+eax-57h]
		jmp	short loc_68F52E8A ; jumptable 68F52EBD	default	case
; ---------------------------------------------------------------------------

loc_68F52ECD:				; CODE XREF: sub_68F52E10:loc_68F52EBDj
					; DATA XREF: .rdata:off_68F5C03Co
		shl	eax, 4		; jumptable 68F52EBD cases 17-22
		lea	eax, [edx+eax-37h]
		jmp	short loc_68F52E8A ; jumptable 68F52EBD	default	case
; ---------------------------------------------------------------------------

loc_68F52ED6:				; CODE XREF: sub_68F52E10:loc_68F52EBDj
					; DATA XREF: .rdata:off_68F5C03Co
		shl	eax, 4		; jumptable 68F52EBD cases 0-9
		or	eax, ebx
		jmp	short loc_68F52E8A ; jumptable 68F52EBD	default	case
sub_68F52E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F52EE0	proc near		; DATA XREF: .rdata:68F57DB0o
					; .rdata:68F59270o

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		sub	eax, ecx
		mov	edx, eax
		shr	edx, 1Fh
		add	eax, edx
		sar	eax, 1
		cmp	eax, 3
		jz	short loc_68F52F60
		jg	short loc_68F52F14
		cmp	eax, 2
		jz	loc_68F52F90
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F52F10:				; CODE XREF: sub_68F52EE0+37j
					; sub_68F52EE0+3Cj ...
		xor	eax, eax

loc_68F52F12:				; CODE XREF: sub_68F52EE0:loc_68F52F8Aj
					; sub_68F52EE0+AEj ...
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F52F14:				; CODE XREF: sub_68F52EE0+19j
		cmp	eax, 4
		jnz	short loc_68F52F10
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52F10
		movsx	eax, byte ptr [ecx+1]
		cmp	eax, 61h
		jz	loc_68F52FC9
		cmp	eax, 71h
		jnz	short loc_68F52F10
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52F10
		cmp	byte ptr [ecx+1], 75h
		jnz	short loc_68F52F10
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52F10
		cmp	byte ptr [ecx+1], 6Fh
		jnz	short loc_68F52F10
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52F10
		cmp	byte ptr [ecx+1], 74h
		mov	eax, 22h
		jmp	short loc_68F52F8A
; ---------------------------------------------------------------------------
		align 10h

loc_68F52F60:				; CODE XREF: sub_68F52EE0+17j
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52F10
		cmp	byte ptr [ecx+1], 61h
		jnz	short loc_68F52F10
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52F10
		cmp	byte ptr [ecx+1], 6Dh
		jnz	short loc_68F52F10
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	short loc_68F52F10
		cmp	byte ptr [ecx+1], 70h
		mov	eax, 26h

loc_68F52F8A:				; CODE XREF: sub_68F52EE0+7Dj
					; sub_68F52EE0+E7j ...
		jz	short loc_68F52F12
		xor	eax, eax
		jmp	short loc_68F52F12
; ---------------------------------------------------------------------------

loc_68F52F90:				; CODE XREF: sub_68F52EE0+1Ej
		cmp	byte ptr [ecx+2], 0
		jnz	loc_68F52F10
		cmp	byte ptr [ecx+3], 74h
		jnz	loc_68F52F10
		cmp	byte ptr [ecx],	0
		jnz	loc_68F52F10
		movsx	edx, byte ptr [ecx+1]
		mov	eax, 3Eh
		cmp	edx, 67h
		jz	loc_68F52F12
		mov	eax, 3Ch
		cmp	edx, 6Ch
		jmp	short loc_68F52F8A
; ---------------------------------------------------------------------------

loc_68F52FC9:				; CODE XREF: sub_68F52EE0+45j
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	loc_68F52F10
		cmp	byte ptr [ecx+1], 70h
		jnz	loc_68F52F10
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	loc_68F52F10
		cmp	byte ptr [ecx+1], 6Fh
		jnz	loc_68F52F10
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	loc_68F52F10
		cmp	byte ptr [ecx+1], 73h
		mov	eax, 27h
		jmp	loc_68F52F8A
sub_68F52EE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53010	proc near		; DATA XREF: .rdata:68F57D98o
					; .rdata:68F59258o

var_D		= byte ptr -0Dh
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F53030:				; CODE XREF: sub_68F53010+85j
		movzx	eax, byte ptr [ebx]
		test	al, al
		mov	[ebp+var_D], al
		jnz	short loc_68F53052
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]

loc_68F53043:				; CODE XREF: sub_68F53010+4Fj
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F530A1 ; jumptable 68F5304B	default	case
		jmp	ds:off_68F5C118[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F53052:				; CODE XREF: sub_68F53010+28j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, [ebp+var_D]
		call	sub_68F4CDA0
		jmp	short loc_68F53043
; ---------------------------------------------------------------------------

loc_68F53061:				; CODE XREF: sub_68F53010+3Bj
					; DATA XREF: .rdata:off_68F5C118o
		movzx	eax, byte ptr [esi] ; jumptable	68F5304B case 7
		inc	ebx
		inc	esi
		cmp	[ebp+var_D], al
		jnz	short loc_68F53097
		movzx	eax, byte ptr [ebx]
		mov	[ebp+var_D], al

loc_68F53071:				; CODE XREF: sub_68F53010+3Bj
					; DATA XREF: .rdata:off_68F5C118o
		movzx	eax, byte ptr [esi] ; jumptable	68F5304B case 6
		inc	ebx
		inc	esi
		cmp	[ebp+var_D], al
		jnz	short loc_68F53097
		movzx	eax, byte ptr [ebx]
		mov	[ebp+var_D], al

loc_68F53081:				; CODE XREF: sub_68F53010+3Bj
					; DATA XREF: .rdata:off_68F5C118o
		movzx	eax, byte ptr [esi] ; jumptable	68F5304B case 5
		inc	ebx
		inc	esi
		cmp	[ebp+var_D], al
		jnz	short loc_68F53097
		movzx	edx, byte ptr [esi]
		inc	esi
		movzx	eax, byte ptr [ebx]
		inc	ebx

loc_68F53093:				; CODE XREF: sub_68F53010+D5j
		cmp	al, dl
		jz	short loc_68F53030

loc_68F53097:				; CODE XREF: sub_68F53010+59j
					; sub_68F53010+69j ...
		xor	edx, edx

loc_68F53099:				; CODE XREF: sub_68F53010+B4j
		mov	eax, edx
		pop	edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F530A1:				; CODE XREF: sub_68F53010+39j
					; sub_68F53010+3Bj
					; DATA XREF: ...
		movzx	eax, byte ptr [esi] ; jumptable	68F5304B default case
		test	al, al
		jnz	short loc_68F530E7
		movzx	eax, byte ptr [esi+1]
		movzx	ecx, byte ptr [edi+eax+4Ch]

loc_68F530B1:				; CODE XREF: sub_68F53010+E5j
		cmp	ecx, 1Dh
		ja	short loc_68F530C6
		mov	eax, 1
		xor	edx, edx
		shl	eax, cl
		test	eax, 2FC000E0h
		jnz	short loc_68F53099

loc_68F530C6:				; CODE XREF: sub_68F53010+A4j
		mov	edx, 1
		mov	eax, edx
		pop	edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F530D3:				; CODE XREF: sub_68F53010+3Bj
					; DATA XREF: .rdata:off_68F5C118o
		movzx	eax, byte ptr [esi] ; jumptable	68F5304B cases 22-27,29
		inc	ebx
		inc	esi
		cmp	al, [ebp+var_D]
		jnz	short loc_68F53097
		movzx	edx, byte ptr [ebx]
		inc	ebx
		movzx	eax, byte ptr [esi]
		inc	esi
		jmp	short loc_68F53093
; ---------------------------------------------------------------------------

loc_68F530E7:				; CODE XREF: sub_68F53010+96j
		movsx	edx, byte ptr [esi+1]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		jmp	short loc_68F530B1
sub_68F53010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53100	proc near		; DATA XREF: .rdata:68F57D9Co
					; .rdata:68F5925Co

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ecx, [ebp+arg_C]
		mov	edx, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	short loc_68F53139
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F53120:				; CODE XREF: sub_68F53100+37j
		cmp	edx, ebx
		jz	short loc_68F53143
		cmp	byte ptr [edx],	0
		jnz	short loc_68F53143
		cmp	[edx+1], al
		jnz	short loc_68F53143
		add	edx, 2
		inc	ecx
		movzx	eax, byte ptr [ecx]
		test	al, al
		jnz	short loc_68F53120

loc_68F53139:				; CODE XREF: sub_68F53100+12j
		xor	eax, eax
		cmp	edx, ebx
		setz	al
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F53143:				; CODE XREF: sub_68F53100+22j
					; sub_68F53100+27j ...
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
sub_68F53100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53150	proc near		; DATA XREF: .rdata:68F57DA0o
					; .rdata:68F59260o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_0]
		push	esi
		push	ebx
		mov	ebx, [ebp+arg_4]
		mov	esi, ebx
		xchg	ax, ax

loc_68F53160:				; CODE XREF: sub_68F53150+63j
					; sub_68F53150+68j ...
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F53180
		movzx	eax, byte ptr [ebx+1]
		movzx	eax, byte ptr [edi+eax+4Ch]
		sub	eax, 5		; switch 25 cases
		cmp	eax, 18h
		ja	short loc_68F531A0 ; jumptable 68F53178	default	case

loc_68F53178:				; CODE XREF: sub_68F53150+42j
		jmp	ds:off_68F5C17C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F53180:				; CODE XREF: sub_68F53150+15j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		sub	eax, 5
		cmp	eax, 18h
		jbe	short loc_68F53178
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F531A0:				; CODE XREF: sub_68F53150+26j
					; sub_68F53150:loc_68F53178j
					; DATA XREF: ...
		sub	ebx, esi	; jumptable 68F53178 default case
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F531B0:				; CODE XREF: sub_68F53150:loc_68F53178j
					; DATA XREF: .rdata:off_68F5C17Co
		add	ebx, 2		; jumptable 68F53178 cases 5,22-27,29
		jmp	short loc_68F53160
; ---------------------------------------------------------------------------

loc_68F531B5:				; CODE XREF: sub_68F53150:loc_68F53178j
					; DATA XREF: .rdata:off_68F5C17Co
		add	ebx, 4		; jumptable 68F53178 case 7
		jmp	short loc_68F53160
; ---------------------------------------------------------------------------
		align 10h

loc_68F531C0:				; CODE XREF: sub_68F53150:loc_68F53178j
					; DATA XREF: .rdata:off_68F5C17Co
		add	ebx, 3		; jumptable 68F53178 case 6
		jmp	short loc_68F53160
sub_68F53150	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F531D0	proc near		; DATA XREF: .rdata:68F57DA4o
					; .rdata:68F59264o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_68F531FF
; ---------------------------------------------------------------------------
		align 10h

loc_68F531E0:				; CODE XREF: sub_68F531D0+34j
		movzx	eax, byte ptr [ebx+1]
		movzx	ecx, byte ptr [esi+eax+4Ch]
		cmp	ecx, 15h
		ja	short loc_68F53219

loc_68F531EE:				; CODE XREF: sub_68F531D0+47j
		mov	eax, 1
		shl	eax, cl
		test	eax, 200600h
		jz	short loc_68F53219
		add	ebx, 2

loc_68F531FF:				; CODE XREF: sub_68F531D0+Bj
		movzx	eax, byte ptr [ebx]
		test	al, al
		jz	short loc_68F531E0
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		mov	ecx, eax
		cmp	ecx, 15h
		jbe	short loc_68F531EE

loc_68F53219:				; CODE XREF: sub_68F531D0+1Cj
					; sub_68F531D0+2Aj
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F531D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53220	proc near		; DATA XREF: .rdata:68F57DB4o
					; .rdata:68F59274o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_C]
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	ebx, edi
		jz	short loc_68F5327A
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F53240:				; CODE XREF: sub_68F53220+58j
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F53280
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+eax+4Ch]

loc_68F53253:				; CODE XREF: sub_68F53220+6Cj
		sub	eax, 5		; switch 6 cases
		cmp	eax, 5
		ja	short loc_68F53270 ; jumptable 68F5325B	default	case
		jmp	ds:off_68F5C1E0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F53262:				; CODE XREF: sub_68F53220+3Bj
					; DATA XREF: .rdata:off_68F5C1E0o
		inc	dword ptr [esi]	; jumptable 68F5325B case 10
		mov	dword ptr [esi+4], 0FFFFFFFFh
		nop
		lea	esi, [esi+0]

loc_68F53270:				; CODE XREF: sub_68F53220+39j
					; sub_68F53220+3Bj
					; DATA XREF: ...
		inc	dword ptr [esi+4] ; jumptable 68F5325B default case
		add	ebx, 2

loc_68F53276:				; CODE XREF: sub_68F53220+96j
					; sub_68F53220+9Ej ...
		cmp	ebx, edi
		jnz	short loc_68F53240

loc_68F5327A:				; CODE XREF: sub_68F53220+11j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F53280:				; CODE XREF: sub_68F53220+25j
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		jmp	short loc_68F53253
; ---------------------------------------------------------------------------

loc_68F5328E:				; CODE XREF: sub_68F53220+3Bj
					; DATA XREF: .rdata:off_68F5C1E0o
		inc	dword ptr [esi]	; jumptable 68F5325B case 9
		add	ebx, 2
		cmp	ebx, edi
		jz	short loc_68F532AC
		movzx	eax, byte ptr [ebx]
		test	al, al
		jnz	short loc_68F532C8
		movzx	eax, byte ptr [ebx+1]
		mov	edx, [ebp+arg_0]
		cmp	byte ptr [edx+eax+4Ch],	0Ah
		jz	short loc_68F532D9

loc_68F532AC:				; CODE XREF: sub_68F53220+75j
					; sub_68F53220+B7j ...
		mov	dword ptr [esi+4], 0FFFFFFFFh
		inc	dword ptr [esi+4]
		jmp	short loc_68F53276
; ---------------------------------------------------------------------------

loc_68F532B8:				; CODE XREF: sub_68F53220+3Bj
					; DATA XREF: .rdata:off_68F5C1E0o
		inc	dword ptr [esi+4] ; jumptable 68F5325B case 7
		add	ebx, 4
		jmp	short loc_68F53276
; ---------------------------------------------------------------------------

loc_68F532C0:				; CODE XREF: sub_68F53220+3Bj
					; DATA XREF: .rdata:off_68F5C1E0o
		inc	dword ptr [esi+4] ; jumptable 68F5325B case 6
		add	ebx, 3
		jmp	short loc_68F53276
; ---------------------------------------------------------------------------

loc_68F532C8:				; CODE XREF: sub_68F53220+7Cj
		movsx	edx, byte ptr [ebx+1]
		movsx	eax, al
		call	sub_68F4CDA0
		cmp	eax, 0Ah
		jnz	short loc_68F532AC

loc_68F532D9:				; CODE XREF: sub_68F53220+8Aj
		add	ebx, 2
		jmp	short loc_68F532AC
sub_68F53220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F532E0	proc near		; CODE XREF: sub_68F53E70+29p
					; sub_68F54220+70p ...
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		lea	esi, [esi+0]

loc_68F532F0:				; CODE XREF: sub_68F532E0+38j
		movzx	eax, byte ptr [esi]
		inc	esi
		mov	dl, al
		movzx	eax, byte ptr [ebx]
		inc	ebx
		mov	cl, al
		mov	al, dl
		sub	al, 61h
		cmp	al, 19h
		ja	short loc_68F53307
		sub	dl, 20h

loc_68F53307:				; CODE XREF: sub_68F532E0+22j
		mov	al, cl
		sub	al, 61h
		cmp	al, 19h
		ja	short loc_68F53312
		sub	cl, 20h

loc_68F53312:				; CODE XREF: sub_68F532E0+2Dj
		cmp	dl, cl
		jnz	short loc_68F53323
		test	dl, dl
		jnz	short loc_68F532F0
		pop	ebx
		mov	eax, 1
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F53323:				; CODE XREF: sub_68F532E0+34j
		pop	ebx
		xor	eax, eax
		pop	esi
		pop	ebp
		retn
sub_68F532E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53330	proc near		; DATA XREF: sub_68F541D0+37o
					; sub_68F543A0+37o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	[ebp+arg_0], offset off_68F58C20
		pop	ebp
		jmp	sub_68F4CA70
sub_68F53330	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53340	proc near		; CODE XREF: sub_68F533C0+1Ap
					; sub_68F533C0+46p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_5		= byte ptr -5
var_4		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	[ebp+var_10], edx
		lea	edx, [ebp+var_4]
		mov	[esp+28h+var_28], eax
		lea	ebx, [ebp+var_5]
		mov	[esp+28h+var_18], edx
		lea	edx, [ebp+var_C]
		mov	[esp+28h+var_1C], edx
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_C], ebx
		mov	[esp+28h+var_20], edx
		lea	edx, [ebp+var_10]
		mov	[esp+28h+var_24], edx
		call	dword ptr [eax+3Ch]
		cmp	ebx, [ebp+var_C]
		mov	eax, 0FFFFFFFFh
		jz	short loc_68F53380
		movsx	eax, [ebp+var_5]

loc_68F53380:				; CODE XREF: sub_68F53340+3Aj
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
sub_68F53340	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53390	proc near		; CODE XREF: sub_68F533C0+1Fp
					; sub_68F533C0+4Bp ...
		push	ebp
		lea	ecx, [eax-9]
		cmp	ecx, 17h
		mov	ebp, esp
		ja	short loc_68F533AE
		mov	eax, 1
		mov	edx, 1
		shl	eax, cl
		test	eax, 800013h
		jnz	short loc_68F533B0

loc_68F533AE:				; CODE XREF: sub_68F53390+9j
		xor	edx, edx

loc_68F533B0:				; CODE XREF: sub_68F53390+1Cj
		pop	ebp
		mov	eax, edx
		retn
sub_68F53390	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F533C0	proc near		; CODE XREF: sub_68F53590+5Dp
					; sub_68F53590+1C0p ...

var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, eax
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 0Ch
		cmp	edx, [ebp+arg_0]
		jz	short loc_68F53450
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		mov	eax, edi
		call	sub_68F53340
		call	sub_68F53390
		test	eax, eax
		jnz	short loc_68F533F7

loc_68F533E8:				; CODE XREF: sub_68F533C0+8Bj
					; sub_68F533C0+B0j ...
		mov	eax, [ebp+arg_10]
		mov	[eax], esi
		add	esp, 0Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F533F7:				; CODE XREF: sub_68F533C0+26j
					; sub_68F533C0+52j
		mov	eax, [edi+44h]
		add	esi, eax
		mov	eax, [ebp+arg_0]
		mov	edx, esi
		mov	[esp+18h+var_18], eax
		mov	eax, edi
		call	sub_68F53340
		call	sub_68F53390
		test	eax, eax
		jnz	short loc_68F533F7
		cmp	esi, [ebp+arg_0]
		jz	short loc_68F53450
		mov	eax, [ebp+arg_4]
		mov	[eax], esi
		jmp	short loc_68F53437
; ---------------------------------------------------------------------------

loc_68F53420:				; CODE XREF: sub_68F533C0+89j
		cmp	eax, 3Dh
		jz	short loc_68F53466
		call	sub_68F53390
		test	eax, eax
		jnz	loc_68F53537
		mov	eax, [edi+44h]
		add	esi, eax

loc_68F53437:				; CODE XREF: sub_68F533C0+5Ej
		mov	eax, [ebp+arg_0]
		mov	edx, esi
		mov	[esp+18h+var_18], eax
		mov	eax, edi
		call	sub_68F53340
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_68F53420
		jmp	short loc_68F533E8
; ---------------------------------------------------------------------------
		align 10h

loc_68F53450:				; CODE XREF: sub_68F533C0+10j
					; sub_68F533C0+57j
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0
		mov	eax, 1

loc_68F5345E:				; CODE XREF: sub_68F533C0+1BCj
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F53466:				; CODE XREF: sub_68F533C0+63j
		mov	eax, [ebp+arg_8]
		mov	[eax], esi

loc_68F5346B:				; CODE XREF: sub_68F533C0+1A8j
		mov	eax, [ebp+arg_4]
		cmp	[eax], esi
		jz	loc_68F533E8
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F53480:				; CODE XREF: sub_68F533C0+DDj
		mov	eax, [edi+44h]
		add	esi, eax
		mov	eax, [ebp+arg_0]
		mov	edx, esi
		mov	[esp+18h+var_18], eax
		mov	eax, edi
		call	sub_68F53340
		mov	ebx, eax
		call	sub_68F53390
		test	eax, eax
		jnz	short loc_68F53480
		cmp	ebx, 22h
		setnz	al
		xor	edx, edx
		cmp	ebx, 27h
		setnz	dl
		test	edx, eax
		jnz	loc_68F533E8
		mov	eax, [edi+44h]
		movsx	edx, bl
		mov	[ebp+var_10], edx
		add	esi, eax
		mov	eax, [ebp+arg_C]
		mov	[eax], esi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F534D0:				; CODE XREF: sub_68F533C0+175j
		mov	eax, [ebp+arg_0]
		mov	edx, esi
		mov	[esp+18h+var_18], eax
		mov	eax, edi
		call	sub_68F53340
		cmp	[ebp+var_10], eax
		mov	ebx, eax
		jz	loc_68F5356D
		lea	eax, [eax-61h]
		cmp	eax, 19h
		lea	eax, [ebx-41h]
		setnbe	dl
		cmp	eax, 19h
		setnbe	al
		movzx	eax, al
		test	eax, edx
		jz	short loc_68F53530
		lea	eax, [ebx-30h]
		cmp	eax, 9
		setnbe	dl
		xor	eax, eax
		cmp	ebx, 2Eh
		setnz	al
		test	eax, edx
		jz	short loc_68F53530
		cmp	ebx, 2Dh
		setnz	al
		xor	edx, edx
		cmp	ebx, 5Fh
		setnz	dl
		test	edx, eax
		jnz	loc_68F533E8
		xchg	ax, ax

loc_68F53530:				; CODE XREF: sub_68F533C0+141j
					; sub_68F533C0+156j
		mov	ebx, [edi+44h]
		add	esi, ebx
		jmp	short loc_68F534D0
; ---------------------------------------------------------------------------

loc_68F53537:				; CODE XREF: sub_68F533C0+6Cj
		mov	eax, [ebp+arg_8]
		mov	[eax], esi
		lea	esi, [esi+0]

loc_68F53540:				; CODE XREF: sub_68F533C0+19Dj
		mov	eax, [edi+44h]
		add	esi, eax
		mov	eax, [ebp+arg_0]
		mov	edx, esi
		mov	[esp+18h+var_18], eax
		mov	eax, edi
		call	sub_68F53340
		mov	ebx, eax
		call	sub_68F53390
		test	eax, eax
		jnz	short loc_68F53540
		cmp	ebx, 3Dh
		jnz	loc_68F533E8
		jmp	loc_68F5346B
; ---------------------------------------------------------------------------

loc_68F5356D:				; CODE XREF: sub_68F533C0+124j
		mov	ecx, [edi+44h]
		mov	eax, [ebp+arg_10]
		add	esi, ecx
		mov	[eax], esi
		mov	eax, 1
		jmp	loc_68F5345E
sub_68F533C0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F53590
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53590	proc near		; CODE XREF: .text:68F53581j
					; sub_68F542D0+5Dj ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h

		push	ebp
		mov	ebp, esp
		push	edi
		lea	edi, [ebp+var_18]
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		mov	ebx, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_20], edx
		mov	eax, [esi+44h]
		mov	[ebp+var_10], 0
		mov	[ebp+var_18], 0
		lea	edx, [eax+eax*4]
		add	eax, eax
		mov	[ebp+var_14], 0
		sub	ebx, eax
		lea	eax, [ebp+arg_4]
		mov	[esp+38h+var_28], eax
		lea	eax, [ebp+var_10]
		add	edx, ecx
		mov	[esp+38h+var_2C], eax
		lea	eax, [ebp+var_14]
		mov	[esp+38h+var_30], eax
		mov	eax, esi
		mov	[ebp+arg_4], edx
		mov	[esp+38h+var_34], edi
		mov	[esp+38h+var_38], ebx
		call	sub_68F533C0
		test	eax, eax
		jz	short loc_68F535FD
		mov	edx, [ebp+var_18]
		test	edx, edx
		jnz	short loc_68F53610

loc_68F535FD:				; CODE XREF: sub_68F53590+64j
					; sub_68F53590+1C7j ...
		mov	eax, [ebp+arg_4]

loc_68F53600:				; CODE XREF: sub_68F53590+1EBj
		mov	edx, [ebp+arg_C]
		mov	[edx], eax

loc_68F53605:				; CODE XREF: sub_68F53590+174j
					; sub_68F53590+1F8j ...
		xor	eax, eax

loc_68F53607:				; CODE XREF: sub_68F53590+169j
					; sub_68F53590+1E2j ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F53610:				; CODE XREF: sub_68F53590+6Bj
		mov	[esp+38h+var_34], edx
		mov	eax, offset aVersion ; "version"
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], esi
		mov	[esp+38h+var_30], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jnz	loc_68F53710
		mov	eax, [ebp+var_20]
		test	eax, eax
		jz	loc_68F53780
		mov	edx, [ebp+var_18]

loc_68F53640:				; CODE XREF: sub_68F53590+1D2j
		mov	[esp+38h+var_34], edx
		mov	eax, offset aEncoding ;	"encoding"
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], esi
		mov	[esp+38h+var_30], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jnz	loc_68F5378D
		mov	edx, [ebp+var_18]

loc_68F53665:				; CODE XREF: sub_68F53590+295j
		mov	[esp+38h+var_34], edx
		mov	eax, offset aStandalone	; "standalone"
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], esi
		mov	[esp+38h+var_30], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	loc_68F53780
		mov	edi, [ebp+var_20]
		test	edi, edi
		jnz	loc_68F53780
		mov	ecx, offset byte_68F57BC3
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], ecx
		mov	edx, [esi+44h]
		mov	[esp+38h+var_38], esi
		sub	eax, edx
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_34], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	loc_68F5383F
		mov	eax, [ebp+arg_20]
		test	eax, eax
		jz	short loc_68F536CC
		mov	eax, [ebp+arg_20]
		mov	dword ptr [eax], 1

loc_68F536CC:				; CODE XREF: sub_68F53590+131j
					; sub_68F53590+2DAj ...
		mov	edx, [ebp+arg_4]
		jmp	short loc_68F536DC
; ---------------------------------------------------------------------------

loc_68F536D1:				; CODE XREF: sub_68F53590+15Dj
		mov	edx, [ebp+arg_4]
		mov	eax, [esi+44h]
		add	edx, eax
		mov	[ebp+arg_4], edx

loc_68F536DC:				; CODE XREF: sub_68F53590+13Fj
		mov	[esp+38h+var_38], ebx
		mov	eax, esi
		call	sub_68F53340
		call	sub_68F53390
		test	eax, eax
		jnz	short loc_68F536D1
		mov	edx, [ebp+arg_4]
		mov	eax, 1
		cmp	edx, ebx
		jz	loc_68F53607
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		jmp	loc_68F53605
; ---------------------------------------------------------------------------
		align 10h

loc_68F53710:				; CODE XREF: sub_68F53590+9Cj
		mov	eax, [ebp+arg_10]
		test	eax, eax
		jz	short loc_68F5371F
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_10]
		mov	[edx], eax

loc_68F5371F:				; CODE XREF: sub_68F53590+185j
		mov	ecx, [ebp+arg_14]
		test	ecx, ecx
		jz	loc_68F5382A
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_14]
		mov	[eax], edx

loc_68F53732:				; CODE XREF: sub_68F53590+29Dj
		mov	[esp+38h+var_34], edi
		lea	eax, [ebp+arg_4]
		mov	[esp+38h+var_28], eax
		lea	eax, [ebp+var_10]
		mov	[esp+38h+var_2C], eax
		lea	eax, [ebp+var_14]
		mov	[esp+38h+var_30], eax
		mov	eax, esi
		mov	[esp+38h+var_38], ebx
		call	sub_68F533C0
		test	eax, eax
		jz	loc_68F535FD
		mov	edx, [ebp+var_18]
		test	edx, edx
		jnz	loc_68F53640
		mov	edx, [ebp+var_20]
		mov	eax, 1
		test	edx, edx
		jz	loc_68F53607
		mov	eax, [ebp+arg_4]
		jmp	loc_68F53600
; ---------------------------------------------------------------------------

loc_68F53780:				; CODE XREF: sub_68F53590+A7j
					; sub_68F53590+F1j ...
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		jmp	loc_68F53605
; ---------------------------------------------------------------------------

loc_68F5378D:				; CODE XREF: sub_68F53590+CCj
		mov	[esp+38h+var_38], ebx
		mov	edx, [ebp+var_10]
		mov	eax, esi
		call	sub_68F53340
		lea	edx, [eax-61h]
		cmp	edx, 19h
		setnbe	dl
		sub	eax, 41h
		cmp	eax, 19h
		setnbe	al
		movzx	eax, al
		test	eax, edx
		jnz	short loc_68F53832
		mov	eax, [ebp+arg_18]
		test	eax, eax
		jz	short loc_68F537C2
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_18]
		mov	[edx], eax

loc_68F537C2:				; CODE XREF: sub_68F53590+228j
		mov	ecx, [ebp+arg_1C]
		test	ecx, ecx
		jz	short loc_68F537E7
		mov	edx, [esi+44h]
		mov	[esp+38h+var_38], esi
		mov	eax, [ebp+arg_4]
		sub	eax, edx
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_34], eax
		call	[ebp+var_1C]
		mov	edx, [ebp+arg_1C]
		mov	[edx], eax

loc_68F537E7:				; CODE XREF: sub_68F53590+237j
		mov	[esp+38h+var_34], edi
		lea	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+var_28], eax
		lea	eax, [ebp+var_10]
		mov	[esp+38h+var_2C], eax
		lea	eax, [ebp+var_14]
		mov	[esp+38h+var_30], eax
		mov	eax, esi
		mov	[esp+38h+var_38], ebx
		call	sub_68F533C0
		test	eax, eax
		jz	loc_68F535FD
		mov	edx, [ebp+var_18]
		mov	eax, 1
		test	edx, edx
		jz	loc_68F53607
		jmp	loc_68F53665
; ---------------------------------------------------------------------------

loc_68F5382A:				; CODE XREF: sub_68F53590+194j
		mov	edx, [ebp+arg_4]
		jmp	loc_68F53732
; ---------------------------------------------------------------------------

loc_68F53832:				; CODE XREF: sub_68F53590+221j
					; sub_68F53590+2D3j
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		jmp	loc_68F53605
; ---------------------------------------------------------------------------

loc_68F5383F:				; CODE XREF: sub_68F53590+126j
		mov	edi, offset byte_68F57BC0
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], edi
		mov	ecx, [esi+44h]
		mov	[esp+38h+var_38], esi
		sub	eax, ecx
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_34], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68F53832
		mov	edx, [ebp+arg_20]
		test	edx, edx
		jz	loc_68F536CC
		mov	edx, [ebp+arg_20]
		mov	dword ptr [edx], 0
		jmp	loc_68F536CC
sub_68F53590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53880	proc near		; CODE XREF: sub_68F443A0+E3p
					; sub_68F44850+1DCp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		test	edx, edx
		js	short loc_68F538AE
		cmp	edx, 7Fh
		jle	short loc_68F538B0
		cmp	edx, 7FFh
		jle	short loc_68F538EA
		cmp	edx, 0FFFFh
		jle	short loc_68F53903
		xor	eax, eax
		cmp	edx, 10FFFFh
		jle	short loc_68F538B9

loc_68F538AE:				; CODE XREF: sub_68F53880+Dj
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F538B0:				; CODE XREF: sub_68F53880+12j
		mov	[ecx], dl
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F538B9:				; CODE XREF: sub_68F53880+2Cj
		mov	eax, edx
		sar	eax, 12h
		or	al, 0F0h
		mov	[ecx], al
		mov	eax, edx
		sar	eax, 0Ch
		and	al, 3Fh
		or	al, 80h
		mov	[ecx+1], al
		mov	eax, edx
		sar	eax, 6
		and	al, 3Fh
		or	al, 80h
		mov	[ecx+2], al
		mov	al, dl
		and	al, 3Fh
		or	al, 80h
		mov	[ecx+3], al
		mov	eax, 4
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F538EA:				; CODE XREF: sub_68F53880+1Aj
		mov	eax, edx
		sar	eax, 6
		or	al, 0C0h
		mov	[ecx], al
		mov	al, dl
		and	al, 3Fh
		or	al, 80h
		mov	[ecx+1], al
		mov	eax, 2
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F53903:				; CODE XREF: sub_68F53880+22j
		mov	eax, edx
		sar	eax, 0Ch
		or	al, 0E0h
		mov	[ecx], al
		mov	eax, edx
		sar	eax, 6
		and	al, 3Fh
		or	al, 80h
		mov	[ecx+1], al
		mov	al, dl
		and	al, 3Fh
		or	al, 80h
		mov	[ecx+2], al
		mov	eax, 3
		pop	ebp
		retn
sub_68F53880	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		xor	eax, eax
		mov	ebp, esp
		mov	edx, [ebp+8]
		mov	ecx, [ebp+0Ch]
		test	edx, edx
		js	short loc_68F5394F
		cmp	edx, 0FFFFh
		jg	short loc_68F53951
		mov	[ecx], dx
		mov	eax, 1

loc_68F5394F:				; CODE XREF: .text:68F5393Dj
					; .text:68F53959j
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F53951:				; CODE XREF: .text:68F53945j
		xor	eax, eax
		cmp	edx, 10FFFFh
		jg	short loc_68F5394F
		sub	edx, 10000h
		mov	eax, edx
		sar	eax, 0Ah
		sub	eax, 2800h
		and	edx, 3FFh
		mov	[ecx], ax
		lea	eax, [edx-2400h]
		mov	[ecx+2], ax
		mov	eax, 2
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53990	proc near		; CODE XREF: sub_68F42C40:loc_68F42CC6p
		push	ebp
		mov	eax, 778h
		mov	ebp, esp
		pop	ebp
		retn
sub_68F53990	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F539A0	proc near		; DATA XREF: sub_68F53C10+1E2o
					; sub_68F53C10+1F7o ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[esp+8+var_4], edx
		mov	edx, [eax+174h]
		mov	[esp+8+var_8], edx
		call	dword ptr [eax+170h]
		mov	ecx, eax
		xor	eax, eax
		test	ecx, 0FFFF0000h
		jnz	short locret_68F539F3
		mov	eax, ecx
		sar	eax, 8
		movzx	edx, ds:byte_68F58980[eax]
		movzx	eax, cl
		sar	eax, 5
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		mov	ecx, ds:dword_68F58480[edx*4]
		and	eax, ecx

locret_68F539F3:			; CODE XREF: sub_68F539A0+29j
		leave
		retn
sub_68F539A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53A00	proc near		; DATA XREF: sub_68F53C10+212o
					; sub_68F53C10+21Do ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[esp+8+var_4], edx
		mov	edx, [eax+174h]
		mov	[esp+8+var_8], edx
		call	dword ptr [eax+170h]
		mov	ecx, eax
		xor	eax, eax
		test	ecx, 0FFFF0000h
		jnz	short locret_68F53A53
		mov	eax, ecx
		sar	eax, 8
		movzx	edx, ds:byte_68F58380[eax]
		movzx	eax, cl
		sar	eax, 5
		and	ecx, 1Fh
		lea	edx, [eax+edx*8]
		mov	eax, 1
		shl	eax, cl
		mov	ecx, ds:dword_68F58480[edx*4]
		and	eax, ecx

locret_68F53A53:			; CODE XREF: sub_68F53A00+29j
		leave
		retn
sub_68F53A00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53A60	proc near		; DATA XREF: sub_68F53C10+1E7o
					; sub_68F53C10+1ECo ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		xor	ebx, ebx
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_14], edx
		mov	edx, [eax+174h]
		mov	[esp+18h+var_18], edx
		call	dword ptr [eax+170h]
		test	eax, 0FFFF0000h
		jnz	short loc_68F53AA0
		call	sub_68F4C750
		test	eax, eax
		jns	short loc_68F53AA5
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F53AA0:				; CODE XREF: sub_68F53A60+27j
		mov	ebx, 1

loc_68F53AA5:				; CODE XREF: sub_68F53A60+30j
		add	esp, 14h
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_68F53A60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53AB0	proc near		; DATA XREF: sub_68F53C10:loc_68F53E55o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	edi, [ebp+arg_4]
		mov	esi, [ebp+arg_C]
		mov	edx, [edi]
		cmp	edx, [ebp+arg_8]
		jz	short loc_68F53B17
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F53AD0:				; CODE XREF: sub_68F53AB0+65j
		movzx	eax, byte ptr [edx]
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx+eax*4]
		movsx	ecx, byte ptr [eax+378h]
		lea	ebx, [eax+379h]
		test	ecx, ecx
		jz	short loc_68F53B1F
		mov	eax, [ebp+arg_10]
		sub	eax, [esi]
		cmp	eax, ecx
		jl	short loc_68F53B17
		lea	eax, [edx+1]
		mov	[edi], eax

loc_68F53AF8:				; CODE XREF: sub_68F53AB0+B9j
		mov	edx, [esi]
		lea	esi, [esi+0]

loc_68F53B00:				; CODE XREF: sub_68F53AB0+5Ej
		movzx	eax, byte ptr [ebx]
		inc	ebx
		mov	[edx], al
		mov	eax, [esi]
		inc	eax
		mov	[esi], eax
		dec	ecx
		mov	edx, eax
		jnz	short loc_68F53B00
		mov	edx, [edi]
		cmp	edx, [ebp+arg_8]
		jnz	short loc_68F53AD0

loc_68F53B17:				; CODE XREF: sub_68F53AB0+14j
					; sub_68F53AB0+41j ...
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F53B1F:				; CODE XREF: sub_68F53AB0+38j
		mov	[esp+18h+var_14], edx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+174h]
		mov	[esp+18h+var_18], eax
		call	dword ptr [edx+170h]
		lea	ecx, [ebp+var_10]
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], eax
		call	sub_68F53880
		mov	ecx, eax
		mov	edx, [esi]
		mov	eax, [ebp+arg_10]
		sub	eax, edx
		cmp	eax, ecx
		jl	short loc_68F53B17
		mov	eax, [edi]
		lea	ebx, [ebp+var_10]
		movzx	edx, byte ptr [eax]
		mov	eax, [ebp+arg_0]
		movzx	edx, byte ptr [eax+edx+4Ch]
		mov	eax, [edi]
		lea	edx, [eax+edx-3]
		mov	[edi], edx
		jmp	short loc_68F53AF8
sub_68F53AB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53B70	proc near		; DATA XREF: sub_68F53C10+24Eo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_C]
		mov	edx, [eax]
		cmp	edx, [ebp+arg_8]
		jz	short loc_68F53C00
		mov	ebx, [edi]
		cmp	ebx, [ebp+arg_10]
		jmp	short loc_68F53BA8
; ---------------------------------------------------------------------------

loc_68F53B90:				; CODE XREF: sub_68F53B70+47j
		mov	[ebx], cx
		mov	eax, [ebp+arg_4]
		inc	edx
		mov	[eax], edx
		lea	eax, [ebx+2]
		mov	ebx, eax
		cmp	edx, [ebp+arg_8]
		mov	[edi], eax
		jz	short loc_68F53C00

loc_68F53BA5:				; CODE XREF: sub_68F53B70+84j
		cmp	eax, [ebp+arg_10]

loc_68F53BA8:				; CODE XREF: sub_68F53B70+1Ej
		jz	short loc_68F53C00
		movzx	eax, byte ptr [edx]
		movzx	ecx, word ptr [esi+eax*2+178h]
		test	ecx, ecx
		jnz	short loc_68F53B90
		mov	[esp+18h+var_14], edx
		mov	eax, [esi+174h]
		mov	[esp+18h+var_18], eax
		call	dword ptr [esi+170h]
		mov	ebx, [edi]
		movzx	ecx, ax
		mov	eax, [ebp+arg_4]
		mov	edx, [eax]
		movzx	eax, byte ptr [edx]
		movzx	eax, byte ptr [esi+eax+4Ch]
		mov	[ebx], cx
		lea	edx, [edx+eax-3]
		mov	eax, [ebp+arg_4]
		mov	[eax], edx
		lea	eax, [ebx+2]
		mov	ebx, eax
		cmp	edx, [ebp+arg_8]
		mov	[edi], eax
		jnz	short loc_68F53BA5
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F53C00:				; CODE XREF: sub_68F53B70+17j
					; sub_68F53B70+33j ...
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_68F53B70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53C10	proc near		; CODE XREF: sub_68F54510+21p
					; DATA XREF: sub_68F42C40+ABo

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14h
		xor	ebx, ebx
		mov	esi, [ebp+arg_0]
		xchg	ax, ax

loc_68F53C20:				; CODE XREF: sub_68F53C10+21j
		movzx	eax, ds:off_68F58A80[ebx]
		mov	[ebx+esi], al
		inc	ebx
		cmp	ebx, 16Fh
		jle	short loc_68F53C20
		xor	ebx, ebx
		jmp	short loc_68F53C3D
; ---------------------------------------------------------------------------

loc_68F53C37:				; CODE XREF: sub_68F53C10+43j
					; sub_68F53C10+4Bj
		inc	ebx
		cmp	ebx, 7Fh
		jg	short loc_68F53C67

loc_68F53C3D:				; CODE XREF: sub_68F53C10+25j
		movzx	eax, ds:byte_68F58ACC[ebx]
		cmp	al, 1Ch
		setnz	dl
		test	al, al
		setnz	al
		movzx	eax, al
		test	eax, edx
		jz	short loc_68F53C37
		mov	eax, [ebp+arg_4]
		cmp	[eax+ebx*4], ebx
		jz	short loc_68F53C37

loc_68F53C5D:				; CODE XREF: sub_68F53C10+8Fj
					; sub_68F53C10+111j ...
		xor	eax, eax

loc_68F53C5F:				; CODE XREF: sub_68F53C10+255j
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F53C67:				; CODE XREF: sub_68F53C10+2Bj
		lea	edx, [esi+379h]
		xor	ebx, ebx
		mov	[ebp+var_18], edx
		jmp	short loc_68F53CDB
; ---------------------------------------------------------------------------

loc_68F53C74:				; CODE XREF: sub_68F53C10+D4j
		test	edi, edi
		js	loc_68F53D87
		cmp	edi, 7Fh
		jg	loc_68F53D0C
		movzx	ecx, ds:byte_68F58ACC[edi]
		cmp	cl, 1Ch
		setnz	al
		xor	edx, edx
		test	cl, cl
		setnz	dl
		test	edx, eax
		jz	short loc_68F53CA1
		cmp	edi, ebx
		jnz	short loc_68F53C5D

loc_68F53CA1:				; CODE XREF: sub_68F53C10+8Bj
		mov	[esi+ebx+4Ch], cl
		mov	al, 1
		mov	ecx, edi
		mov	[esi+ebx*4+378h], al
		test	edi, edi
		mov	eax, edi
		mov	[esi+ebx*4+379h], cl
		jnz	short loc_68F53CC2
		mov	eax, 0FFFFFFFFh

loc_68F53CC2:				; CODE XREF: sub_68F53C10+ABj
					; sub_68F53C10+195j
		mov	[esi+ebx*2+178h], ax

loc_68F53CCA:				; CODE XREF: sub_68F53C10+FAj
					; sub_68F53C10+172j
		add	[ebp+var_18], 4
		inc	ebx
		cmp	ebx, 0FFh
		jg	loc_68F53DDC

loc_68F53CDB:				; CODE XREF: sub_68F53C10+62j
		mov	ecx, [ebp+arg_4]
		mov	edi, [ecx+ebx*4]
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_68F53C74
		mov	byte ptr [esi+ebx+4Ch],	1

loc_68F53CEB:				; CODE XREF: sub_68F53C10+1C7j
		mov	eax, 0FFFFFFFFh
		mov	[esi+ebx*2+178h], ax
		mov	al, 1
		mov	[esi+ebx*4+378h], al
		xor	eax, eax
		mov	[esi+ebx*4+379h], al
		jmp	short loc_68F53CCA
; ---------------------------------------------------------------------------

loc_68F53D0C:				; CODE XREF: sub_68F53C10+6Fj
		mov	eax, edi
		call	sub_68F4C750
		test	eax, eax
		js	loc_68F53DD2
		cmp	edi, 0FFFFh
		jg	loc_68F53C5D
		mov	[ebp+var_14], 1
		mov	eax, edi
		mov	ecx, edi
		sar	eax, 8
		and	ecx, 1Fh
		mov	edx, edi
		mov	[ebp+var_10], eax
		movzx	eax, ds:byte_68F58380[eax]
		and	edx, 0FFh
		sar	edx, 5
		shl	[ebp+var_14], cl
		lea	eax, [edx+eax*8]
		mov	ecx, [ebp+var_14]
		test	ds:dword_68F58480[eax*4], ecx
		jz	short loc_68F53DAA
		mov	byte ptr [esi+ebx+4Ch],	16h

loc_68F53D64:				; CODE XREF: sub_68F53C10+1C0j
		mov	[esp+20h+var_20], edi
		mov	eax, [ebp+var_18]
		mov	[esp+20h+var_1C], eax
		call	sub_68F53880
		mov	[esi+ebx*4+378h], al
		mov	[esi+ebx*2+178h], di
		jmp	loc_68F53CCA
; ---------------------------------------------------------------------------

loc_68F53D87:				; CODE XREF: sub_68F53C10+66j
		cmp	edi, 0FFFFFFFCh
		jl	loc_68F53C5D
		mov	al, 3
		mov	edx, edi
		sub	al, dl
		mov	[esi+ebx+4Ch], al
		xor	eax, eax
		mov	[esi+ebx*4+378h], al
		xor	eax, eax
		jmp	loc_68F53CC2
; ---------------------------------------------------------------------------

loc_68F53DAA:				; CODE XREF: sub_68F53C10+14Dj
		mov	ecx, [ebp+var_10]
		movzx	eax, ds:byte_68F58980[ecx]
		lea	eax, [edx+eax*8]
		mov	ecx, ds:dword_68F58480[eax*4]
		mov	edx, [ebp+var_14]
		and	edx, ecx
		cmp	edx, 1
		sbb	eax, eax
		and	al, 2
		add	al, 1Ah
		mov	[esi+ebx+4Ch], al
		jmp	short loc_68F53D64
; ---------------------------------------------------------------------------

loc_68F53DD2:				; CODE XREF: sub_68F53C10+105j
		mov	byte ptr [esi+ebx+4Ch],	0
		jmp	loc_68F53CEB
; ---------------------------------------------------------------------------

loc_68F53DDC:				; CODE XREF: sub_68F53C10+C5j
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_C]
		test	edx, edx
		mov	[esi+174h], eax
		mov	[esi+170h], edx
		jz	short loc_68F53E55
		mov	eax, offset sub_68F539A0
		mov	edi, offset sub_68F53A60
		mov	ebx, offset sub_68F53A60
		mov	[esi+14Ch], eax
		mov	eax, offset sub_68F539A0
		mov	ecx, offset sub_68F53A60
		mov	[esi+150h], eax
		mov	eax, offset sub_68F539A0
		mov	[esi+154h], eax
		mov	eax, offset sub_68F53A00
		mov	[esi+158h], eax
		mov	eax, offset sub_68F53A00
		mov	[esi+15Ch], eax
		mov	eax, offset sub_68F53A00
		mov	[esi+160h], eax
		mov	[esi+164h], edi
		mov	[esi+168h], ebx
		mov	[esi+16Ch], ecx

loc_68F53E55:				; CODE XREF: sub_68F53C10+1E0j
		mov	dword ptr [esi+3Ch], offset sub_68F53AB0
		mov	eax, esi
		mov	dword ptr [esi+40h], offset sub_68F53B70
		jmp	loc_68F53C5F
sub_68F53C10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53E70	proc near		; CODE XREF: sub_68F541D0+16p
					; sub_68F54220+83p ...
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, eax
		test	esi, esi
		push	ebx
		mov	eax, 6
		jz	short loc_68F53EAD
		xor	ebx, ebx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F53E90:				; CODE XREF: sub_68F53E70+36j
		mov	edx, ds:off_68F5C1F8[ebx*4]
		mov	eax, esi
		call	sub_68F532E0
		test	eax, eax
		jnz	short loc_68F53EB1
		inc	ebx
		cmp	ebx, 5
		jle	short loc_68F53E90
		mov	eax, 0FFFFFFFFh

loc_68F53EAD:				; CODE XREF: sub_68F53E70+Ej
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F53EB1:				; CODE XREF: sub_68F53E70+30j
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_68F53E70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F53EC0	proc near		; CODE XREF: sub_68F54190+13j
					; sub_68F541B0+13j ...

var_1F		= byte ptr -1Fh
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, edx
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_0]
		cmp	ecx, esi
		mov	[ebp+var_18], edx
		mov	edx, 0FFFFFFFCh
		mov	[ebp+var_14], eax
		jz	loc_68F540EA
		lea	eax, [ecx+1]
		mov	edi, [ebx+4Ch]
		cmp	eax, esi
		jz	loc_68F54081
		movzx	eax, byte ptr [ecx]
		movzx	edx, al
		shl	edx, 8
		mov	[ebp+var_1D], al
		movzx	eax, byte ptr [ecx+1]
		mov	[ebp+var_1E], al
		movzx	eax, al
		or	edx, eax
		cmp	edx, 0EFBBh
		jz	loc_68F53FB3
		jg	short loc_68F53F73
		cmp	edx, 3C00h
		jz	loc_68F540F4

loc_68F53F2D:				; CODE XREF: sub_68F53EC0+C5j
		cmp	[ebp+var_1D], 0
		jz	loc_68F54010
		cmp	[ebp+var_1E], 0
		jnz	loc_68F53FD7
		cmp	[ebp+var_14], 1
		jz	loc_68F53FD7

loc_68F53F4B:				; CODE XREF: sub_68F53EC0+255j
		mov	edx, [ebp+var_10]
		mov	ebx, [ebp+var_18]
		mov	eax, [edx+14h]
		mov	[edi], eax
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_C], ebx
		mov	[ebp+arg_8], esi
		mov	edx, [edi]
		mov	[ebp+arg_0], edx
		mov	edx, [ebp+var_14]
		mov	ecx, [eax+edx*4]
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	ecx
; ---------------------------------------------------------------------------

loc_68F53F73:				; CODE XREF: sub_68F53EC0+5Fj
		cmp	edx, 0FEFFh
		jz	loc_68F540B8
		cmp	edx, 0FFFEh
		jnz	short loc_68F53F2D
		movzx	ebx, byte ptr [ebx+49h]
		test	bl, bl
		setz	al
		mov	[ebp+var_1F], bl
		xor	edx, edx
		cmp	[ebp+var_14], 1
		setz	dl
		test	edx, eax
		jnz	short loc_68F53FDE
		mov	ebx, [ebp+var_18]
		lea	eax, [ecx+2]
		mov	edx, [ebp+var_10]
		mov	[ebx], eax
		mov	eax, [edx+14h]
		jmp	loc_68F540E3
; ---------------------------------------------------------------------------

loc_68F53FB3:				; CODE XREF: sub_68F53EC0+59j
		cmp	[ebp+var_14], 1
		jz	loc_68F54042

loc_68F53FBD:				; CODE XREF: sub_68F53EC0+1BCj
		lea	eax, [ecx+2]
		mov	edx, 0FFFFFFFFh
		cmp	eax, esi
		jz	loc_68F540EA
		cmp	byte ptr [ecx+2], 0BFh
		jz	loc_68F5415C

loc_68F53FD7:				; CODE XREF: sub_68F53EC0+7Bj
					; sub_68F53EC0+85j
		movzx	ebx, byte ptr [ebx+49h]
		mov	[ebp+var_1F], bl

loc_68F53FDE:				; CODE XREF: sub_68F53EC0+DEj
					; sub_68F53EC0+19Ej ...
		movsx	eax, [ebp+var_1F]
		mov	ebx, [ebp+var_10]
		mov	edx, [ebx+eax*4]
		mov	eax, [ebp+var_18]
		mov	ebx, [ebp+var_14]
		mov	[edi], edx
		mov	[ebp+arg_4], ecx
		mov	ecx, [edx+ebx*4]
		mov	[ebp+arg_C], eax
		mov	[ebp+arg_8], esi
		mov	eax, [edi]
		mov	[ebp+arg_0], eax
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	ecx
; ---------------------------------------------------------------------------
		align 10h

loc_68F54010:				; CODE XREF: sub_68F53EC0+71j
		cmp	[ebp+var_14], 1
		jz	loc_68F54147

loc_68F5401A:				; CODE XREF: sub_68F53EC0+291j
		mov	ebx, [ebp+var_10]
		mov	edx, [ebp+var_18]
		mov	eax, [ebx+10h]
		mov	ebx, [ebp+var_14]
		mov	[edi], eax
		mov	[ebp+arg_4], ecx
		mov	ecx, [eax+ebx*4]
		mov	[ebp+arg_C], edx
		mov	[ebp+arg_8], esi
		mov	edx, [edi]
		mov	[ebp+arg_0], edx
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	ecx
; ---------------------------------------------------------------------------

loc_68F54042:				; CODE XREF: sub_68F53EC0+F7j
		movzx	eax, byte ptr [ebx+49h]
		movsx	edx, al
		test	edx, edx
		mov	[ebp+var_1F], al
		setz	al
		cmp	edx, 4
		mov	[ebp+var_1C], edx
		setz	dl
		or	eax, edx
		test	al, 1
		jnz	loc_68F53FDE
		cmp	[ebp+var_1C], 5
		setz	al
		cmp	[ebp+var_1C], 3
		setz	dl
		or	eax, edx
		test	al, 1
		jnz	loc_68F53FDE
		jmp	loc_68F53FBD
; ---------------------------------------------------------------------------

loc_68F54081:				; CODE XREF: sub_68F53EC0+35j
		movzx	ebx, byte ptr [ebx+49h]
		mov	edx, 0FFFFFFFFh
		movsx	eax, bl
		mov	[ebp+var_1F], bl
		sub	eax, 3
		cmp	eax, 2
		jbe	short loc_68F540EA
		movzx	eax, byte ptr [ecx]
		cmp	eax, 0EFh
		jz	loc_68F54128
		jg	short loc_68F5411A
		test	eax, eax
		jz	loc_68F54140
		cmp	eax, 3Ch
		jmp	loc_68F5413A
; ---------------------------------------------------------------------------

loc_68F540B8:				; CODE XREF: sub_68F53EC0+B9j
		movzx	ebx, byte ptr [ebx+49h]
		test	bl, bl
		setz	al
		mov	[ebp+var_1F], bl
		xor	edx, edx
		cmp	[ebp+var_14], 1
		setz	dl
		test	edx, eax
		jnz	loc_68F53FDE
		mov	edx, [ebp+var_18]
		lea	eax, [ecx+2]
		mov	ebx, [ebp+var_10]
		mov	[edx], eax
		mov	eax, [ebx+10h]

loc_68F540E3:				; CODE XREF: sub_68F53EC0+EEj
					; sub_68F53EC0+2AAj
		mov	[edi], eax
		mov	edx, 0Eh

loc_68F540EA:				; CODE XREF: sub_68F53EC0+27j
					; sub_68F53EC0+107j ...
		add	esp, 14h
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F540F4:				; CODE XREF: sub_68F53EC0+67j
		movzx	ebx, byte ptr [ebx+49h]
		mov	al, bl
		sub	al, 3
		mov	[ebp+var_1F], bl
		cmp	al, 1
		setbe	dl
		xor	eax, eax
		cmp	[ebp+var_14], 1
		setz	al
		test	eax, edx
		jnz	loc_68F53FDE
		jmp	loc_68F53F4B
; ---------------------------------------------------------------------------

loc_68F5411A:				; CODE XREF: sub_68F53EC0+1E6j
		sub	eax, 0FEh
		cmp	eax, 1
		ja	loc_68F53FDE

loc_68F54128:				; CODE XREF: sub_68F53EC0+1E0j
		cmp	[ebp+var_1F], 0
		setz	al
		xor	edx, edx
		cmp	[ebp+var_14], 1
		setz	dl
		test	edx, eax

loc_68F5413A:				; CODE XREF: sub_68F53EC0+1F3j
		jnz	loc_68F53FDE

loc_68F54140:				; CODE XREF: sub_68F53EC0+1EAj
		mov	edx, 0FFFFFFFFh
		jmp	short loc_68F540EA
; ---------------------------------------------------------------------------

loc_68F54147:				; CODE XREF: sub_68F53EC0+154j
		movzx	ebx, byte ptr [ebx+49h]
		cmp	bl, 5
		mov	[ebp+var_1F], bl
		jnz	loc_68F5401A
		jmp	loc_68F53FDE
; ---------------------------------------------------------------------------

loc_68F5415C:				; CODE XREF: sub_68F53EC0+111j
		mov	ebx, [ebp+var_18]
		lea	eax, [ecx+3]
		mov	edx, [ebp+var_10]
		mov	[ebx], eax
		mov	eax, [edx+8]
		jmp	loc_68F540E3
sub_68F53EC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54170	proc near		; CODE XREF: sub_68F43AE0:loc_68F43D83p
		push	ebp
		mov	eax, offset off_68F596C0
		mov	ebp, esp
		pop	ebp
		retn
sub_68F54170	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	eax, offset off_68F59540
		mov	ebp, esp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54190	proc near		; DATA XREF: sub_68F541D0+2Ao

arg_0		= dword	ptr  8

		push	ebp
		mov	eax, offset off_68F59090
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	[ebp+arg_0], 0
		pop	ebp
		jmp	sub_68F53EC0
sub_68F54190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F541B0	proc near		; DATA XREF: sub_68F541D0+30o

arg_0		= dword	ptr  8

		push	ebp
		mov	eax, offset off_68F59090
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	[ebp+arg_0], 1
		pop	ebp
		jmp	sub_68F53EC0
sub_68F541B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F541D0	proc near		; CODE XREF: sub_68F42860+61p
					; DATA XREF: sub_68F42D60+1Do

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_8], ebx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		mov	[esp+8+var_4], esi
		mov	esi, [ebp+arg_4]
		call	sub_68F53E70
		xor	edx, edx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68F54213
		mov	[ebx+49h], al
		mov	edx, 1
		mov	dword ptr [ebx], offset	sub_68F54190
		mov	dword ptr [ebx+4], offset sub_68F541B0
		mov	dword ptr [ebx+34h], offset sub_68F53330
		mov	[ebx+4Ch], esi
		mov	[esi], ebx

loc_68F54213:				; CODE XREF: sub_68F541D0+20j
		mov	ebx, [esp+8+var_8]
		mov	eax, edx
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F541D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54220	proc near		; DATA XREF: sub_68F542D0+4Do

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_9C		= dword	ptr -9Ch
var_98		= byte ptr -98h
var_19		= byte ptr -19h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C8h
		mov	[ebp+var_C], ebx
		lea	eax, [ebp+var_19]
		mov	ebx, [ebp+arg_8]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_4], edi
		lea	edi, [ebp+var_98]
		mov	[ebp+var_9C], edi
		mov	[esp+0C8h+var_B8], eax
		lea	eax, [ebp+var_9C]
		mov	[esp+0C8h+var_BC], eax
		lea	eax, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C0], ebx
		mov	[esp+0C8h+var_C8], esi
		call	dword ptr [esi+3Ch]
		xor	eax, eax
		cmp	[ebp+arg_4], ebx
		jz	short loc_68F54280

loc_68F5426D:				; CODE XREF: sub_68F54220+7Fj
					; sub_68F54220+8Fj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F54280:				; CODE XREF: sub_68F54220+4Bj
		mov	eax, [ebp+var_9C]
		mov	edx, offset aUtf16 ; "UTF-16"
		mov	byte ptr [eax],	0
		mov	eax, edi
		call	sub_68F532E0
		test	eax, eax
		jz	short loc_68F542A1
		cmp	dword ptr [esi+44h], 2
		mov	eax, esi
		jz	short loc_68F5426D

loc_68F542A1:				; CODE XREF: sub_68F54220+77j
		mov	eax, edi
		call	sub_68F53E70
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_68F5426D
		mov	eax, ds:off_68F59090[edx*4]
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F54220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F542D0	proc near		; DATA XREF: sub_68F42F20+40o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		mov	edi, [ebp+arg_14]
		mov	esi, [ebp+arg_18]
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_1C]
		mov	[ebp+arg_14], esi
		mov	ecx, [ebp+arg_20]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+arg_1C], ecx
		mov	[ebp+arg_18], ebx
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+arg_10], edi
		mov	[ebp+arg_C], eax
		mov	eax, [ebp+arg_24]
		mov	[ebp+arg_20], eax
		mov	ebx, [esp+0Ch+var_C]
		mov	eax, offset sub_68F54220
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F53590
sub_68F542D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54340	proc near		; CODE XREF: sub_68F43AE0+155p
		push	ebp
		mov	eax, offset off_68F58F20
		mov	ebp, esp
		pop	ebp
		retn
sub_68F54340	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	eax, offset off_68F58DA0
		mov	ebp, esp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54360	proc near		; DATA XREF: sub_68F543A0+2Ao

arg_0		= dword	ptr  8

		push	ebp
		mov	eax, offset off_68F57BE4
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	[ebp+arg_0], 0
		pop	ebp
		jmp	sub_68F53EC0
sub_68F54360	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54380	proc near		; DATA XREF: sub_68F543A0+30o

arg_0		= dword	ptr  8

		push	ebp
		mov	eax, offset off_68F57BE4
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	[ebp+arg_0], 1
		pop	ebp
		jmp	sub_68F53EC0
sub_68F54380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F543A0	proc near		; CODE XREF: sub_68F42D60+39p
					; DATA XREF: sub_68F42D60+1o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_8], ebx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		mov	[esp+8+var_4], esi
		mov	esi, [ebp+arg_4]
		call	sub_68F53E70
		xor	edx, edx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_68F543E3
		mov	[ebx+49h], al
		mov	edx, 1
		mov	dword ptr [ebx], offset	sub_68F54360
		mov	dword ptr [ebx+4], offset sub_68F54380
		mov	dword ptr [ebx+34h], offset sub_68F53330
		mov	[ebx+4Ch], esi
		mov	[esi], ebx

loc_68F543E3:				; CODE XREF: sub_68F543A0+20j
		mov	ebx, [esp+8+var_8]
		mov	eax, edx
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F543A0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F543F0	proc near		; DATA XREF: sub_68F544A0+4Do

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_9C		= dword	ptr -9Ch
var_98		= byte ptr -98h
var_19		= byte ptr -19h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C8h
		mov	[ebp+var_C], ebx
		lea	eax, [ebp+var_19]
		mov	ebx, [ebp+arg_8]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_4], edi
		lea	edi, [ebp+var_98]
		mov	[ebp+var_9C], edi
		mov	[esp+0C8h+var_B8], eax
		lea	eax, [ebp+var_9C]
		mov	[esp+0C8h+var_BC], eax
		lea	eax, [ebp+arg_4]
		mov	[esp+0C8h+var_C4], eax
		mov	[esp+0C8h+var_C0], ebx
		mov	[esp+0C8h+var_C8], esi
		call	dword ptr [esi+3Ch]
		xor	eax, eax
		cmp	[ebp+arg_4], ebx
		jz	short loc_68F54450

loc_68F5443D:				; CODE XREF: sub_68F543F0+7Fj
					; sub_68F543F0+8Fj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F54450:				; CODE XREF: sub_68F543F0+4Bj
		mov	eax, [ebp+var_9C]
		mov	edx, offset aUtf16 ; "UTF-16"
		mov	byte ptr [eax],	0
		mov	eax, edi
		call	sub_68F532E0
		test	eax, eax
		jz	short loc_68F54471
		cmp	dword ptr [esi+44h], 2
		mov	eax, esi
		jz	short loc_68F5443D

loc_68F54471:				; CODE XREF: sub_68F543F0+77j
		mov	eax, edi
		call	sub_68F53E70
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_68F5443D
		mov	eax, ds:off_68F57BE4[edx*4]
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F543F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F544A0	proc near		; CODE XREF: sub_68F42F20+8Dp
					; DATA XREF: sub_68F42F20+9o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		mov	edi, [ebp+arg_14]
		mov	esi, [ebp+arg_18]
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_1C]
		mov	[ebp+arg_14], esi
		mov	ecx, [ebp+arg_20]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+arg_1C], ecx
		mov	[ebp+arg_18], ebx
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+arg_10], edi
		mov	[ebp+arg_C], eax
		mov	eax, [ebp+arg_24]
		mov	[ebp+arg_20], eax
		mov	ebx, [esp+0Ch+var_C]
		mov	eax, offset sub_68F543F0
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F53590
sub_68F544A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54510	proc near		; CODE XREF: sub_68F42C40+C5p
					; DATA XREF: sub_68F42C40+A4o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_C]
		mov	[esp+10h+var_4], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+10h+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+10h+var_C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+10h+var_10], eax
		call	sub_68F53C10
		test	eax, eax
		jz	short locret_68F54541
		mov	byte ptr [eax+86h], 17h

locret_68F54541:			; CODE XREF: sub_68F54510+28j
		leave
		retn
sub_68F54510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54550	proc near		; CODE XREF: sub_68F54590+60j
					; sub_68F54650+60j ...
		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, eax
		mov	eax, [eax+10h]
		test	eax, eax
		setz	cl
		xor	eax, eax
		cmp	edx, 1Ch
		setz	al
		mov	edx, 3Bh
		test	eax, ecx
		jz	short loc_68F54574
		pop	ebx
		mov	eax, edx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F54574:				; CODE XREF: sub_68F54550+1Dj
		mov	dword ptr [ebx], offset	sub_68F55AE0
		mov	edx, 0FFFFFFFFh
		mov	eax, edx
		pop	ebx
		pop	ebp
		retn
sub_68F54550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54590	proc near		; DATA XREF: sub_68F55AF0+6o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		mov	[ebp+var_C], ebx
		mov	edx, [ebp+arg_10]
		lea	eax, [esi-0Bh]
		mov	[ebp+var_4], edi
		cmp	eax, 12h	; switch 19 cases
		mov	ebx, [ebp+arg_0]
		mov	edi, [ebp+arg_8]
		ja	short loc_68F545E0 ; jumptable 68F545B6	default	case
		jmp	ds:off_68F5C2C4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F545BD:				; CODE XREF: sub_68F54590+26j
					; DATA XREF: .rdata:off_68F5C2C4o
		mov	[esp+28h+var_20], ecx ;	jumptable 68F545B6 case	5
		mov	eax, offset aDoctype ; "DOCTYPE"
		mov	[esp+28h+var_1C], eax
		mov	eax, [edx+44h]
		mov	[esp+28h+var_28], edx
		lea	eax, [edi+eax*2]
		mov	[esp+28h+var_24], eax
		call	dword ptr [edx+1Ch]
		test	eax, eax
		jnz	short loc_68F54641
		xchg	ax, ax

loc_68F545E0:				; CODE XREF: sub_68F54590+24j
					; sub_68F54590+26j
					; DATA XREF: ...
		mov	edi, [ebp+var_4] ; jumptable 68F545B6 default case
		mov	edx, esi
		mov	eax, ebx
		mov	esi, [ebp+var_8]
		mov	ebx, [ebp+var_C]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F545F5:				; CODE XREF: sub_68F54590+26j
					; DATA XREF: .rdata:off_68F5C2C4o
		mov	dword ptr [ebx], offset	sub_68F54650 ; jumptable 68F545B6 case 4

loc_68F545FB:				; CODE XREF: sub_68F54590+26j
					; DATA XREF: .rdata:off_68F5C2C4o
		xor	eax, eax	; jumptable 68F545B6 case 3
		lea	esi, [esi+0]

loc_68F54600:				; CODE XREF: sub_68F54590+88j
					; sub_68F54590+95j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F5460D:				; CODE XREF: sub_68F54590+26j
					; DATA XREF: .rdata:off_68F5C2C4o
		mov	dword ptr [ebx], offset	sub_68F54650 ; jumptable 68F545B6 case 0
		mov	eax, 37h
		jmp	short loc_68F54600
; ---------------------------------------------------------------------------

loc_68F5461A:				; CODE XREF: sub_68F54590+26j
					; DATA XREF: .rdata:off_68F5C2C4o
		mov	dword ptr [ebx], offset	sub_68F54650 ; jumptable 68F545B6 case 1
		mov	eax, 1
		jmp	short loc_68F54600
; ---------------------------------------------------------------------------

loc_68F54627:				; CODE XREF: sub_68F54590+26j
					; DATA XREF: .rdata:off_68F5C2C4o
		mov	dword ptr [ebx], offset	sub_68F54650 ; jumptable 68F545B6 case 2
		mov	eax, 38h
		jmp	short loc_68F54600
; ---------------------------------------------------------------------------

loc_68F54634:				; CODE XREF: sub_68F54590+26j
					; DATA XREF: .rdata:off_68F5C2C4o
		mov	dword ptr [ebx], offset	sub_68F55AE0 ; jumptable 68F545B6 case 18
		mov	eax, 2
		jmp	short loc_68F54600
; ---------------------------------------------------------------------------

loc_68F54641:				; CODE XREF: sub_68F54590+4Cj
		mov	dword ptr [ebx], offset	sub_68F54740
		mov	eax, 3
		jmp	short loc_68F54600
sub_68F54590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54650	proc near		; DATA XREF: sub_68F54590:loc_68F545F5o
					; sub_68F54590:loc_68F5460Do ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		mov	[ebp+var_C], ebx
		mov	edx, [ebp+arg_10]
		lea	eax, [esi-0Bh]
		mov	[ebp+var_4], edi
		cmp	eax, 12h	; switch 19 cases
		mov	ebx, [ebp+arg_0]
		mov	edi, [ebp+arg_8]
		ja	short loc_68F546A0 ; jumptable 68F54676	default	case
		jmp	ds:off_68F5C310[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F5467D:				; CODE XREF: sub_68F54650+26j
					; DATA XREF: .rdata:off_68F5C310o
		mov	[esp+28h+var_20], ecx ;	jumptable 68F54676 case	5
		mov	eax, offset aDoctype ; "DOCTYPE"
		mov	[esp+28h+var_1C], eax
		mov	eax, [edx+44h]
		mov	[esp+28h+var_28], edx
		lea	eax, [edi+eax*2]
		mov	[esp+28h+var_24], eax
		call	dword ptr [edx+1Ch]
		test	eax, eax
		jnz	short loc_68F546DF
		xchg	ax, ax

loc_68F546A0:				; CODE XREF: sub_68F54650+24j
					; sub_68F54650+26j
					; DATA XREF: ...
		mov	edi, [ebp+var_4] ; jumptable 68F54676 default case
		mov	edx, esi
		mov	eax, ebx
		mov	esi, [ebp+var_8]
		mov	ebx, [ebp+var_C]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F546B5:				; CODE XREF: sub_68F54650+26j
					; DATA XREF: .rdata:off_68F5C310o
		xor	eax, eax	; jumptable 68F54676 cases 3,4

loc_68F546B7:				; CODE XREF: sub_68F54650+7Fj
					; sub_68F54650+86j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F546C4:				; CODE XREF: sub_68F54650+26j
					; DATA XREF: .rdata:off_68F5C310o
		mov	dword ptr [ebx], offset	sub_68F55AE0 ; jumptable 68F54676 case 18
		mov	eax, 2
		jmp	short loc_68F546B7
; ---------------------------------------------------------------------------

loc_68F546D1:				; CODE XREF: sub_68F54650+26j
					; DATA XREF: .rdata:off_68F5C310o
		mov	eax, 37h	; jumptable 68F54676 case 0
		jmp	short loc_68F546B7
; ---------------------------------------------------------------------------

loc_68F546D8:				; CODE XREF: sub_68F54650+26j
					; DATA XREF: .rdata:off_68F5C310o
		mov	eax, 38h	; jumptable 68F54676 case 2
		jmp	short loc_68F546B7
; ---------------------------------------------------------------------------

loc_68F546DF:				; CODE XREF: sub_68F54650+4Cj
		mov	dword ptr [ebx], offset	sub_68F54740
		mov	eax, 3
		jmp	short loc_68F546B7
sub_68F54650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F546F0	proc near		; DATA XREF: sub_68F54780:loc_68F54833o
					; sub_68F548C0:loc_68F548ECo ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Dh
		jz	short loc_68F54724
		jle	short loc_68F54710
		cmp	edx, 0Fh
		jz	short loc_68F54720
		cmp	edx, 1Dh
		jz	short loc_68F5472B

loc_68F5470A:				; CODE XREF: sub_68F546F0+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54710:				; CODE XREF: sub_68F546F0+Ej
		cmp	edx, 0Bh
		jnz	short loc_68F5470A
		pop	ebp
		mov	eax, 37h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F54720:				; CODE XREF: sub_68F546F0+13j
		pop	ebp
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_68F54724:				; CODE XREF: sub_68F546F0+Cj
		pop	ebp
		mov	eax, 38h
		retn
; ---------------------------------------------------------------------------

loc_68F5472B:				; CODE XREF: sub_68F546F0+18j
		mov	dword ptr [eax], offset	sub_68F55AE0
		mov	eax, 2
		pop	ebp
		retn
sub_68F546F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54740	proc near		; DATA XREF: sub_68F54590:loc_68F54641o
					; sub_68F54650:loc_68F546DFo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 12h
		jz	short loc_68F54770
		jle	short loc_68F54760
		cmp	edx, 29h
		jz	short loc_68F54770

loc_68F54755:				; CODE XREF: sub_68F54740+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F54760:				; CODE XREF: sub_68F54740+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F54755
		pop	ebp
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F54770:				; CODE XREF: sub_68F54740+Cj
					; sub_68F54740+13j
		mov	dword ptr [eax], offset	sub_68F54780
		mov	eax, 4
		pop	ebp
		retn
sub_68F54740	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54780	proc near		; DATA XREF: sub_68F54740:loc_68F54770o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_10]
		cmp	ebx, 11h
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_14], eax
		jz	loc_68F54833
		jle	short loc_68F547D2
		cmp	ebx, 12h
		jz	short loc_68F547E9
		cmp	ebx, 19h
		jz	loc_68F54840

loc_68F547BD:				; CODE XREF: sub_68F54780+55j
					; sub_68F54780+A9j
		mov	esi, [ebp+var_8]
		mov	edx, ebx
		mov	eax, edi
		mov	ebx, [ebp+var_C]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F547D2:				; CODE XREF: sub_68F54780+2Dj
		cmp	ebx, 0Fh
		jnz	short loc_68F547BD

loc_68F547D7:				; CODE XREF: sub_68F54780+B1j
					; sub_68F54780+D3j
		mov	eax, 3

loc_68F547DC:				; CODE XREF: sub_68F54780+BEj
					; sub_68F54780+CBj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F547E9:				; CODE XREF: sub_68F54780+32j
		mov	eax, offset aSystem ; "SYSTEM"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jnz	short loc_68F5484D
		mov	eax, offset aPublic ; "PUBLIC"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68F547BD
		mov	dword ptr [edi], offset	sub_68F54860
		jmp	short loc_68F547D7
; ---------------------------------------------------------------------------

loc_68F54833:				; CODE XREF: sub_68F54780+27j
		mov	dword ptr [edi], offset	sub_68F546F0
		mov	eax, 8
		jmp	short loc_68F547DC
; ---------------------------------------------------------------------------

loc_68F54840:				; CODE XREF: sub_68F54780+37j
		mov	dword ptr [edi], offset	sub_68F54940
		mov	eax, 7
		jmp	short loc_68F547DC
; ---------------------------------------------------------------------------

loc_68F5484D:				; CODE XREF: sub_68F54780+88j
		mov	dword ptr [edi], offset	sub_68F54890
		jmp	short loc_68F547D7
sub_68F54780	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54860	proc near		; DATA XREF: sub_68F54780+ABo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54879
		cmp	edx, 1Bh
		jz	short loc_68F54880
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54879:				; CODE XREF: sub_68F54860+Cj
		pop	ebp
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_68F54880:				; CODE XREF: sub_68F54860+11j
		mov	dword ptr [eax], offset	sub_68F54890
		mov	eax, 6
		pop	ebp
		retn
sub_68F54860	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54890	proc near		; DATA XREF: sub_68F54780:loc_68F5484Do
					; sub_68F54860:loc_68F54880o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F548A9
		cmp	edx, 1Bh
		jz	short loc_68F548B0
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F548A9:				; CODE XREF: sub_68F54890+Cj
		pop	ebp
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_68F548B0:				; CODE XREF: sub_68F54890+11j
		mov	dword ptr [eax], offset	sub_68F548C0
		mov	eax, 5
		pop	ebp
		retn
sub_68F54890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F548C0	proc near		; DATA XREF: sub_68F54890:loc_68F548B0o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 11h
		jz	short loc_68F548EC
		jle	short loc_68F548E0
		cmp	edx, 19h
		jz	short loc_68F548F9

loc_68F548D5:				; CODE XREF: sub_68F548C0+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F548E0:				; CODE XREF: sub_68F548C0+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F548D5
		pop	ebp
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_68F548EC:				; CODE XREF: sub_68F548C0+Cj
		mov	dword ptr [eax], offset	sub_68F546F0
		mov	eax, 8
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F548F9:				; CODE XREF: sub_68F548C0+13j
		mov	dword ptr [eax], offset	sub_68F54940
		mov	eax, 7
		pop	ebp
		retn
sub_68F548C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54910	proc near		; DATA XREF: sub_68F54940+123o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54929
		cmp	edx, 11h
		jz	short loc_68F54930
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54929:				; CODE XREF: sub_68F54910+Cj
		pop	ebp
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_68F54930:				; CODE XREF: sub_68F54910+11j
		mov	dword ptr [eax], offset	sub_68F546F0
		mov	eax, 8
		pop	ebp
		retn
sub_68F54910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54940	proc near		; CODE XREF: sub_68F54AC0+4Dj
					; DATA XREF: sub_68F54780:loc_68F54840o ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_10]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_14], eax
		add	eax, 4		; switch 33 cases
		cmp	eax, 20h
		ja	short loc_68F54973 ; jumptable 68F5496C	default	case
		jmp	ds:off_68F5C35C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F54973:				; CODE XREF: sub_68F54940+2Aj
					; sub_68F54940+2Cj ...
		mov	edx, [ebp+var_14] ; jumptable 68F5496C default case
		mov	eax, [ebp+var_10]
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F54990:				; CODE XREF: sub_68F54940+2Cj
					; DATA XREF: .rdata:off_68F5C35Co
		xor	eax, eax	; jumptable 68F5496C cases -4,15
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F549A0:				; CODE XREF: sub_68F54940+72j
					; sub_68F54940+79j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F549AD:				; CODE XREF: sub_68F54940+2Cj
					; DATA XREF: .rdata:off_68F5C35Co
		mov	eax, 37h	; jumptable 68F5496C case 11
		jmp	short loc_68F549A0
; ---------------------------------------------------------------------------

loc_68F549B4:				; CODE XREF: sub_68F54940+2Cj
					; DATA XREF: .rdata:off_68F5C35Co
		mov	eax, 38h	; jumptable 68F5496C case 13
		jmp	short loc_68F549A0
; ---------------------------------------------------------------------------

loc_68F549BB:				; CODE XREF: sub_68F54940+2Cj
					; DATA XREF: .rdata:off_68F5C35Co
		mov	[esp+28h+var_20], esi ;	jumptable 68F5496C case	16
		mov	ecx, offset aEntity_0 ;	"ENTITY"
		mov	[esp+28h+var_1C], ecx
		mov	eax, [ebx+44h]
		mov	[esp+28h+var_28], ebx
		lea	eax, [edi+eax*2]
		mov	[esp+28h+var_24], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	loc_68F54A90
		mov	[esp+28h+var_20], esi
		mov	edx, offset aAttlist ; "ATTLIST"
		mov	[esp+28h+var_1C], edx
		mov	eax, [ebx+44h]
		mov	[esp+28h+var_28], ebx
		lea	eax, [edi+eax*2]
		mov	[esp+28h+var_24], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	loc_68F54AA3
		mov	[esp+28h+var_20], esi
		mov	eax, offset aElement ; "ELEMENT"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebx+44h]
		mov	[esp+28h+var_28], ebx
		lea	eax, [edi+eax*2]
		mov	[esp+28h+var_24], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	short loc_68F54A7D
		mov	[esp+28h+var_20], esi
		mov	eax, offset aNotation_0	; "NOTATION"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebx+44h]
		mov	[esp+28h+var_28], ebx
		lea	eax, [edi+eax*2]
		mov	[esp+28h+var_24], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	loc_68F54973	; jumptable 68F5496C default case
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F54F90
		mov	eax, 11h
		jmp	loc_68F549A0
; ---------------------------------------------------------------------------
		align 10h

loc_68F54A60:				; CODE XREF: sub_68F54940+2Cj
					; DATA XREF: .rdata:off_68F5C35Co
		mov	eax, [ebp+var_10] ; jumptable 68F5496C case 26
		mov	dword ptr [eax], offset	sub_68F54910
		mov	eax, 3
		jmp	loc_68F549A0
; ---------------------------------------------------------------------------

loc_68F54A73:				; CODE XREF: sub_68F54940+2Cj
					; DATA XREF: .rdata:off_68F5C35Co
		mov	eax, 3Ch	; jumptable 68F5496C case 28
		jmp	loc_68F549A0
; ---------------------------------------------------------------------------

loc_68F54A7D:				; CODE XREF: sub_68F54940+E4j
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F55550
		mov	eax, 27h
		jmp	loc_68F549A0
; ---------------------------------------------------------------------------

loc_68F54A90:				; CODE XREF: sub_68F54940+9Aj
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F54BA0
		mov	eax, 0Bh
		jmp	loc_68F549A0
; ---------------------------------------------------------------------------

loc_68F54AA3:				; CODE XREF: sub_68F54940+BFj
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F55140
		mov	eax, 21h
		jmp	loc_68F549A0
sub_68F54940	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54AC0	proc near		; CODE XREF: sub_68F54B60+28j
					; DATA XREF: sub_68F54B60+16o ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		mov	edx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_8]
		lea	eax, [edx+4]
		mov	ebx, [ebp+arg_C]
		cmp	eax, 26h	; switch 39 cases
		mov	ecx, [ebp+arg_10]
		ja	short loc_68F54AF0 ; jumptable 68F54AE8	default	case
		jmp	ds:off_68F5C3E0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_68F54AF0:				; CODE XREF: sub_68F54AC0+26j
					; sub_68F54AC0+28j
					; DATA XREF: ...
		mov	[ebp+arg_10], ecx ; jumptable 68F54AE8 default case
		mov	[ebp+arg_C], ebx
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], edx
		mov	[ebp+arg_0], esi
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54940
; ---------------------------------------------------------------------------

loc_68F54B12:				; CODE XREF: sub_68F54AC0+28j
					; DATA XREF: .rdata:off_68F5C3E0o
		mov	eax, [esi+0Ch]	; jumptable 68F54AE8 case 38
		test	eax, eax
		jz	short loc_68F54B40 ; jumptable 68F54AE8	case 30
		dec	eax
		mov	[esi+0Ch], eax
		lea	esi, [esi+0]

loc_68F54B20:				; CODE XREF: sub_68F54AC0+28j
					; sub_68F54AC0+76j ...
		mov	ebx, [esp+0Ch+var_C] ; jumptable 68F54AE8 case 19
		xor	eax, eax
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F54B31:				; CODE XREF: sub_68F54AC0+28j
					; DATA XREF: .rdata:off_68F5C3E0o
		mov	ebx, [esi+0Ch]	; jumptable 68F54AE8 case 0
		test	ebx, ebx
		jz	short loc_68F54B20 ; jumptable 68F54AE8	case 19
		nop
		lea	esi, [esi+0]

loc_68F54B40:				; CODE XREF: sub_68F54AC0+28j
					; sub_68F54AC0+57j
					; DATA XREF: ...
		mov	eax, esi	; jumptable 68F54AE8 case 30
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54B55:				; CODE XREF: sub_68F54AC0+28j
					; DATA XREF: .rdata:off_68F5C3E0o
		mov	dword ptr [esi], offset	sub_68F55980 ; jumptable 68F54AE8 case 37
		jmp	short loc_68F54B20 ; jumptable 68F54AE8	case 19
sub_68F54AC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54B60	proc near		; DATA XREF: sub_68F55B20+6o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_8], ebx
		mov	[esp+8+var_4], esi
		mov	ecx, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		cmp	ecx, 0Ch
		mov	dword ptr [ebx], offset	sub_68F54AC0
		jz	short loc_68F54B8D
		mov	ebx, [esp+8+var_8]
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54AC0
; ---------------------------------------------------------------------------

loc_68F54B8D:				; CODE XREF: sub_68F54B60+1Cj
		mov	ebx, [esp+8+var_8]
		mov	eax, 39h
		mov	esi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_68F54B60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54BA0	proc near		; DATA XREF: sub_68F54940+153o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 12h
		jz	short loc_68F54BCC
		jle	short loc_68F54BC0
		cmp	edx, 16h
		jz	short loc_68F54BD9

loc_68F54BB5:				; CODE XREF: sub_68F54BA0+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F54BC0:				; CODE XREF: sub_68F54BA0+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F54BB5
		mov	eax, 0Bh

loc_68F54BCA:				; CODE XREF: sub_68F54BA0+44j
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F54BCC:				; CODE XREF: sub_68F54BA0+Cj
		mov	dword ptr [eax], offset	sub_68F54C20
		mov	eax, 9
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F54BD9:				; CODE XREF: sub_68F54BA0+13j
		mov	dword ptr [eax], offset	sub_68F54BF0
		mov	eax, 0Bh
		jmp	short loc_68F54BCA
sub_68F54BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54BF0	proc near		; DATA XREF: sub_68F54BA0:loc_68F54BD9o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54C09
		cmp	edx, 12h
		jz	short loc_68F54C10
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54C09:				; CODE XREF: sub_68F54BF0+Cj
		pop	ebp
		mov	eax, 0Bh
		retn
; ---------------------------------------------------------------------------

loc_68F54C10:				; CODE XREF: sub_68F54BF0+11j
		mov	dword ptr [eax], offset	sub_68F54E20
		mov	eax, 0Ah
		pop	ebp
		retn
sub_68F54BF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54C20	proc near		; DATA XREF: sub_68F54BA0:loc_68F54BCCo

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_10]
		cmp	ebx, 12h
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_14], eax
		jz	short loc_68F54C87
		jle	short loc_68F54C70
		cmp	ebx, 1Bh
		jz	loc_68F54CD9

loc_68F54C54:				; CODE XREF: sub_68F54C20+53j
					; sub_68F54C20+A7j
		mov	esi, [ebp+var_8]
		mov	edx, ebx
		mov	eax, edi
		mov	ebx, [ebp+var_C]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F54C70:				; CODE XREF: sub_68F54C20+29j
		cmp	ebx, 0Fh
		jnz	short loc_68F54C54

loc_68F54C75:				; CODE XREF: sub_68F54C20+AFj
					; sub_68F54C20+B7j
		mov	eax, 0Bh

loc_68F54C7A:				; CODE XREF: sub_68F54C20+CBj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F54C87:				; CODE XREF: sub_68F54C20+27j
		mov	eax, offset aSystem ; "SYSTEM"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jnz	short loc_68F54CD1
		mov	eax, offset aPublic ; "PUBLIC"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68F54C54
		mov	dword ptr [edi], offset	sub_68F54CF0
		jmp	short loc_68F54C75
; ---------------------------------------------------------------------------

loc_68F54CD1:				; CODE XREF: sub_68F54C20+86j
		mov	dword ptr [edi], offset	sub_68F54D20
		jmp	short loc_68F54C75
; ---------------------------------------------------------------------------

loc_68F54CD9:				; CODE XREF: sub_68F54C20+2Ej
		mov	dword ptr [edi], offset	sub_68F55AA0
		mov	eax, 0Ch
		mov	dword ptr [edi+8], 0Bh
		jmp	short loc_68F54C7A
sub_68F54C20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54CF0	proc near		; DATA XREF: sub_68F54C20+A9o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54D09
		cmp	edx, 1Bh
		jz	short loc_68F54D10
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54D09:				; CODE XREF: sub_68F54CF0+Cj
		pop	ebp
		mov	eax, 0Bh
		retn
; ---------------------------------------------------------------------------

loc_68F54D10:				; CODE XREF: sub_68F54CF0+11j
		mov	dword ptr [eax], offset	sub_68F54D20
		mov	eax, 0Eh
		pop	ebp
		retn
sub_68F54CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54D20	proc near		; DATA XREF: sub_68F54C20:loc_68F54CD1o
					; sub_68F54CF0:loc_68F54D10o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54D39
		cmp	edx, 1Bh
		jz	short loc_68F54D40
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54D39:				; CODE XREF: sub_68F54D20+Cj
		pop	ebp
		mov	eax, 0Bh
		retn
; ---------------------------------------------------------------------------

loc_68F54D40:				; CODE XREF: sub_68F54D20+11j
		mov	dword ptr [eax], offset	sub_68F54D50
		mov	eax, 0Dh
		pop	ebp
		retn
sub_68F54D20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54D50	proc near		; DATA XREF: sub_68F54D20:loc_68F54D40o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	[ebp+var_4], esi
		mov	eax, [ebp+arg_C]
		cmp	ebx, 11h
		mov	esi, [ebp+arg_0]
		mov	edx, [ebp+arg_10]
		jz	short loc_68F54DC6
		jle	short loc_68F54D90
		cmp	ebx, 12h
		jz	short loc_68F54DA4

loc_68F54D77:				; CODE XREF: sub_68F54D50+43j
					; sub_68F54D50+6Cj
		mov	edx, ebx
		mov	eax, esi
		mov	ebx, [ebp+var_8]
		mov	esi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F54D90:				; CODE XREF: sub_68F54D50+20j
		cmp	ebx, 0Fh
		jnz	short loc_68F54D77

loc_68F54D95:				; CODE XREF: sub_68F54D50+74j
		mov	eax, 0Bh

loc_68F54D9A:				; CODE XREF: sub_68F54D50+8Ej
		mov	ebx, [ebp+var_8]
		mov	esi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F54DA4:				; CODE XREF: sub_68F54D50+25j
		mov	[esp+18h+var_C], offset	aNdata ; "NDATA"
		mov	[esp+18h+var_10], eax
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], edx
		call	dword ptr [edx+1Ch]
		test	eax, eax
		jz	short loc_68F54D77
		mov	dword ptr [esi], offset	sub_68F54DE0
		jmp	short loc_68F54D95
; ---------------------------------------------------------------------------

loc_68F54DC6:				; CODE XREF: sub_68F54D50+1Ej
		mov	edx, [esi+10h]
		mov	eax, offset sub_68F54940
		test	edx, edx
		jnz	short loc_68F54DD7
		mov	eax, offset sub_68F54AC0

loc_68F54DD7:				; CODE XREF: sub_68F54D50+80j
		mov	[esi], eax
		mov	eax, 0Fh
		jmp	short loc_68F54D9A
sub_68F54D50	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54DE0	proc near		; DATA XREF: sub_68F54D50+6Eo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54DF9
		cmp	edx, 12h
		jz	short loc_68F54E00
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54DF9:				; CODE XREF: sub_68F54DE0+Cj
		pop	ebp
		mov	eax, 0Bh
		retn
; ---------------------------------------------------------------------------

loc_68F54E00:				; CODE XREF: sub_68F54DE0+11j
		mov	dword ptr [eax], offset	sub_68F55AA0
		mov	dword ptr [eax+8], 0Bh
		mov	eax, 10h
		pop	ebp
		retn
sub_68F54DE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54E20	proc near		; DATA XREF: sub_68F54BF0:loc_68F54C10o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_10]
		cmp	ebx, 12h
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_14], eax
		jz	short loc_68F54E87
		jle	short loc_68F54E70
		cmp	ebx, 1Bh
		jz	loc_68F54ED9

loc_68F54E54:				; CODE XREF: sub_68F54E20+53j
					; sub_68F54E20+A7j
		mov	esi, [ebp+var_8]
		mov	edx, ebx
		mov	eax, edi
		mov	ebx, [ebp+var_C]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F54E70:				; CODE XREF: sub_68F54E20+29j
		cmp	ebx, 0Fh
		jnz	short loc_68F54E54

loc_68F54E75:				; CODE XREF: sub_68F54E20+AFj
					; sub_68F54E20+B7j
		mov	eax, 0Bh

loc_68F54E7A:				; CODE XREF: sub_68F54E20+CBj
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F54E87:				; CODE XREF: sub_68F54E20+27j
		mov	eax, offset aSystem ; "SYSTEM"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jnz	short loc_68F54ED1
		mov	ecx, offset aPublic ; "PUBLIC"
		mov	[esp+28h+var_1C], ecx
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68F54E54
		mov	dword ptr [edi], offset	sub_68F54EF0
		jmp	short loc_68F54E75
; ---------------------------------------------------------------------------

loc_68F54ED1:				; CODE XREF: sub_68F54E20+86j
		mov	dword ptr [edi], offset	sub_68F54F20
		jmp	short loc_68F54E75
; ---------------------------------------------------------------------------

loc_68F54ED9:				; CODE XREF: sub_68F54E20+2Ej
		mov	dword ptr [edi], offset	sub_68F55AA0
		mov	eax, 0Ch
		mov	dword ptr [edi+8], 0Bh
		jmp	short loc_68F54E7A
sub_68F54E20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54EF0	proc near		; DATA XREF: sub_68F54E20+A9o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54F09
		cmp	edx, 1Bh
		jz	short loc_68F54F10
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54F09:				; CODE XREF: sub_68F54EF0+Cj
		pop	ebp
		mov	eax, 0Bh
		retn
; ---------------------------------------------------------------------------

loc_68F54F10:				; CODE XREF: sub_68F54EF0+11j
		mov	dword ptr [eax], offset	sub_68F54F20
		mov	eax, 0Eh
		pop	ebp
		retn
sub_68F54EF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54F20	proc near		; DATA XREF: sub_68F54E20:loc_68F54ED1o
					; sub_68F54EF0:loc_68F54F10o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54F39
		cmp	edx, 1Bh
		jz	short loc_68F54F40
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54F39:				; CODE XREF: sub_68F54F20+Cj
		pop	ebp
		mov	eax, 0Bh
		retn
; ---------------------------------------------------------------------------

loc_68F54F40:				; CODE XREF: sub_68F54F20+11j
		mov	dword ptr [eax], offset	sub_68F54F50
		mov	eax, 0Dh
		pop	ebp
		retn
sub_68F54F20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54F50	proc near		; DATA XREF: sub_68F54F20:loc_68F54F40o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54F69
		cmp	edx, 11h
		jz	short loc_68F54F70
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54F69:				; CODE XREF: sub_68F54F50+Cj
		pop	ebp
		mov	eax, 0Bh
		retn
; ---------------------------------------------------------------------------

loc_68F54F70:				; CODE XREF: sub_68F54F50+11j
		mov	ecx, [eax+10h]
		mov	edx, offset sub_68F54940
		test	ecx, ecx
		jnz	short loc_68F54F81
		mov	edx, offset sub_68F54AC0

loc_68F54F81:				; CODE XREF: sub_68F54F50+2Aj
		mov	[eax], edx
		mov	eax, 0Fh
		pop	ebp
		retn
sub_68F54F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54F90	proc near		; DATA XREF: sub_68F54940+10Eo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F54FA9
		cmp	edx, 12h
		jz	short loc_68F54FB0
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F54FA9:				; CODE XREF: sub_68F54F90+Cj
		pop	ebp
		mov	eax, 11h
		retn
; ---------------------------------------------------------------------------

loc_68F54FB0:				; CODE XREF: sub_68F54F90+11j
		mov	dword ptr [eax], offset	sub_68F54FC0
		mov	eax, 12h
		pop	ebp
		retn
sub_68F54F90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F54FC0	proc near		; DATA XREF: sub_68F54F90:loc_68F54FB0o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_10]
		cmp	ebx, 0Fh
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_14], eax
		jz	short loc_68F55048
		cmp	ebx, 12h
		jz	short loc_68F55003

loc_68F54FEE:				; CODE XREF: sub_68F54FC0+80j
		mov	esi, [ebp+var_8]
		mov	edx, ebx
		mov	eax, edi
		mov	ebx, [ebp+var_C]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F55003:				; CODE XREF: sub_68F54FC0+2Cj
		mov	[esp+28h+var_20], eax
		mov	edx, offset aSystem ; "SYSTEM"
		mov	[esp+28h+var_1C], edx
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jnz	short loc_68F5505A
		mov	eax, offset aPublic ; "PUBLIC"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68F54FEE
		mov	dword ptr [edi], offset	sub_68F55070

loc_68F55048:				; CODE XREF: sub_68F54FC0+27j
					; sub_68F54FC0+A0j
		mov	ebx, [ebp+var_C]
		mov	eax, 11h
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F5505A:				; CODE XREF: sub_68F54FC0+5Fj
		mov	dword ptr [edi], offset	sub_68F550A0
		jmp	short loc_68F55048
sub_68F54FC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55070	proc near		; DATA XREF: sub_68F54FC0+82o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F55089
		cmp	edx, 1Bh
		jz	short loc_68F55090
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F55089:				; CODE XREF: sub_68F55070+Cj
		pop	ebp
		mov	eax, 11h
		retn
; ---------------------------------------------------------------------------

loc_68F55090:				; CODE XREF: sub_68F55070+11j
		mov	dword ptr [eax], offset	sub_68F550E0
		mov	eax, 15h
		pop	ebp
		retn
sub_68F55070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F550A0	proc near		; DATA XREF: sub_68F54FC0:loc_68F5505Ao

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F550B9
		cmp	edx, 1Bh
		jz	short loc_68F550C0
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F550B9:				; CODE XREF: sub_68F550A0+Cj
		pop	ebp
		mov	eax, 11h
		retn
; ---------------------------------------------------------------------------

loc_68F550C0:				; CODE XREF: sub_68F550A0+11j
		mov	dword ptr [eax], offset	sub_68F55AA0
		mov	dword ptr [eax+8], 11h
		mov	eax, 13h
		pop	ebp
		retn
sub_68F550A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F550E0	proc near		; DATA XREF: sub_68F55070:loc_68F55090o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 11h
		jz	short loc_68F5510C
		jle	short loc_68F55100
		cmp	edx, 1Bh
		jz	short loc_68F55126

loc_68F550F5:				; CODE XREF: sub_68F550E0+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55100:				; CODE XREF: sub_68F550E0+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F550F5
		pop	ebp
		mov	eax, 11h
		retn
; ---------------------------------------------------------------------------

loc_68F5510C:				; CODE XREF: sub_68F550E0+Cj
		mov	ecx, [eax+10h]
		mov	edx, offset sub_68F54940
		test	ecx, ecx
		jnz	short loc_68F5511D
		mov	edx, offset sub_68F54AC0

loc_68F5511D:				; CODE XREF: sub_68F550E0+36j
		mov	[eax], edx
		mov	eax, 14h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F55126:				; CODE XREF: sub_68F550E0+13j
		mov	dword ptr [eax], offset	sub_68F55AA0
		mov	dword ptr [eax+8], 11h
		mov	eax, 13h
		pop	ebp
		retn
sub_68F550E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55140	proc near		; DATA XREF: sub_68F54940+166o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 12h
		jz	short loc_68F55170
		jle	short loc_68F55160
		cmp	edx, 29h
		jz	short loc_68F55170

loc_68F55155:				; CODE XREF: sub_68F55140+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55160:				; CODE XREF: sub_68F55140+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F55155
		pop	ebp
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F55170:				; CODE XREF: sub_68F55140+Cj
					; sub_68F55140+13j
		mov	dword ptr [eax], offset	sub_68F55180
		mov	eax, 22h
		pop	ebp
		retn
sub_68F55140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55180	proc near		; DATA XREF: sub_68F55140:loc_68F55170o
					; sub_68F55400+E5o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 11h
		jz	short loc_68F551BD
		jle	short loc_68F551A0
		cmp	edx, 12h
		jz	short loc_68F551B0
		cmp	edx, 29h
		jz	short loc_68F551B0

loc_68F5519A:				; CODE XREF: sub_68F55180+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F551A0:				; CODE XREF: sub_68F55180+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F5519A
		mov	eax, 21h

loc_68F551AA:				; CODE XREF: sub_68F55180+55j
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F551B0:				; CODE XREF: sub_68F55180+13j
					; sub_68F55180+18j
		mov	dword ptr [eax], offset	sub_68F551E0
		mov	eax, 16h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F551BD:				; CODE XREF: sub_68F55180+Cj
		mov	ecx, [eax+10h]
		mov	edx, offset sub_68F54940
		test	ecx, ecx
		jnz	short loc_68F551CE
		mov	edx, offset sub_68F54AC0

loc_68F551CE:				; CODE XREF: sub_68F55180+47j
		mov	[eax], edx
		mov	eax, 21h
		jmp	short loc_68F551AA
sub_68F55180	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F551E0	proc near		; DATA XREF: sub_68F55180:loc_68F551B0o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_4], edi
		mov	eax, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_10]
		cmp	edi, 12h
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_8], esi
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_18], eax
		jz	short loc_68F55240
		jle	short loc_68F55230
		cmp	edi, 17h
		jz	loc_68F552C7

loc_68F55217:				; CODE XREF: sub_68F551E0+53j
					; sub_68F551E0+B8j
		mov	eax, [ebp+var_10]
		mov	edx, edi
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55230:				; CODE XREF: sub_68F551E0+2Cj
		cmp	edi, 0Fh
		jnz	short loc_68F55217
		mov	eax, 21h
		jmp	short loc_68F552BA
; ---------------------------------------------------------------------------
		align 10h

loc_68F55240:				; CODE XREF: sub_68F551E0+2Aj
		xor	esi, esi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_68F55250:				; CODE XREF: sub_68F551E0+97j
		mov	eax, ds:off_68F5C480[esi*4]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], ebx
		mov	[esp+28h+var_24], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	short loc_68F552AE
		inc	esi
		cmp	esi, 7
		jle	short loc_68F55250
		mov	esi, offset aNotation_0	; "NOTATION"
		mov	[esp+28h+var_1C], esi
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], ebx
		mov	[esp+28h+var_24], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	loc_68F55217
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F55360
		mov	eax, 21h
		jmp	short loc_68F552BA
; ---------------------------------------------------------------------------

loc_68F552AE:				; CODE XREF: sub_68F551E0+91j
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F55400
		lea	eax, [esi+17h]

loc_68F552BA:				; CODE XREF: sub_68F551E0+5Aj
					; sub_68F551E0+CCj ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F552C7:				; CODE XREF: sub_68F551E0+31j
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F552E0
		mov	eax, 21h
		jmp	short loc_68F552BA
sub_68F551E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F552E0	proc near		; DATA XREF: sub_68F551E0+EAo
					; sub_68F55320:loc_68F5534Co

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 13h
		jg	short loc_68F55300
		cmp	edx, 12h
		jge	short loc_68F55305
		cmp	edx, 0Fh
		jz	short loc_68F55312

loc_68F552F8:				; CODE XREF: sub_68F552E0+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55300:				; CODE XREF: sub_68F552E0+Cj
		cmp	edx, 29h
		jnz	short loc_68F552F8

loc_68F55305:				; CODE XREF: sub_68F552E0+11j
		mov	dword ptr [eax], offset	sub_68F55320
		mov	eax, 1Fh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F55312:				; CODE XREF: sub_68F552E0+16j
		pop	ebp
		mov	eax, 21h
		retn
sub_68F552E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55320	proc near		; DATA XREF: sub_68F552E0:loc_68F55305o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 15h
		jz	short loc_68F5534C
		jle	short loc_68F55340
		cmp	edx, 18h
		jz	short loc_68F55354

loc_68F55335:				; CODE XREF: sub_68F55320+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55340:				; CODE XREF: sub_68F55320+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F55335

loc_68F55345:				; CODE XREF: sub_68F55320+32j
					; sub_68F55320+3Aj
		pop	ebp
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------

loc_68F5534C:				; CODE XREF: sub_68F55320+Cj
		mov	dword ptr [eax], offset	sub_68F552E0
		jmp	short loc_68F55345
; ---------------------------------------------------------------------------

loc_68F55354:				; CODE XREF: sub_68F55320+13j
		mov	dword ptr [eax], offset	sub_68F55400
		jmp	short loc_68F55345
sub_68F55320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55360	proc near		; DATA XREF: sub_68F551E0+C1o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F5537F
		cmp	edx, 17h
		jz	short loc_68F55379
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F55379:				; CODE XREF: sub_68F55360+11j
		mov	dword ptr [eax], offset	sub_68F55390

loc_68F5537F:				; CODE XREF: sub_68F55360+Cj
		pop	ebp
		mov	eax, 21h
		retn
sub_68F55360	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55390	proc near		; DATA XREF: sub_68F55360:loc_68F55379o
					; sub_68F553C0:loc_68F553ECo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F553A9
		cmp	edx, 12h
		jz	short loc_68F553B0
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F553A9:				; CODE XREF: sub_68F55390+Cj
		pop	ebp
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------

loc_68F553B0:				; CODE XREF: sub_68F55390+11j
		mov	dword ptr [eax], offset	sub_68F553C0
		mov	eax, 20h
		pop	ebp
		retn
sub_68F55390	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F553C0	proc near		; DATA XREF: sub_68F55390:loc_68F553B0o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 15h
		jz	short loc_68F553EC
		jle	short loc_68F553E0
		cmp	edx, 18h
		jz	short loc_68F553F4

loc_68F553D5:				; CODE XREF: sub_68F553C0+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F553E0:				; CODE XREF: sub_68F553C0+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F553D5

loc_68F553E5:				; CODE XREF: sub_68F553C0+32j
					; sub_68F553C0+3Aj
		pop	ebp
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------

loc_68F553EC:				; CODE XREF: sub_68F553C0+Cj
		mov	dword ptr [eax], offset	sub_68F55390
		jmp	short loc_68F553E5
; ---------------------------------------------------------------------------

loc_68F553F4:				; CODE XREF: sub_68F553C0+13j
		mov	dword ptr [eax], offset	sub_68F55400
		jmp	short loc_68F553E5
sub_68F553C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55400	proc near		; DATA XREF: sub_68F551E0+D1o
					; sub_68F55320:loc_68F55354o ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_8], esi
		mov	eax, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_10]
		cmp	esi, 14h
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_14], eax
		jz	short loc_68F55467
		jle	short loc_68F55450
		cmp	esi, 1Bh
		jz	loc_68F55508

loc_68F55434:				; CODE XREF: sub_68F55400+53j
					; sub_68F55400+CEj
		mov	eax, [ebp+var_10]
		mov	edx, esi
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55450:				; CODE XREF: sub_68F55400+29j
		cmp	esi, 0Fh
		jnz	short loc_68F55434

loc_68F55455:				; CODE XREF: sub_68F55400+DDj
		mov	eax, 21h

loc_68F5545A:				; CODE XREF: sub_68F55400+F0j
					; sub_68F55400+103j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F55467:				; CODE XREF: sub_68F55400+27j
		mov	eax, offset aImplied ; "IMPLIED"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebx+44h]
		mov	[esp+28h+var_28], ebx
		add	eax, edi
		mov	[esp+28h+var_24], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	short loc_68F554E2
		mov	eax, offset aRequired ;	"REQUIRED"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebx+44h]
		mov	[esp+28h+var_28], ebx
		add	eax, edi
		mov	[esp+28h+var_24], eax
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jnz	short loc_68F554F5
		mov	eax, offset aFixed ; "FIXED"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebx+44h]
		mov	[esp+28h+var_28], ebx
		add	edi, eax
		mov	[esp+28h+var_24], edi
		call	dword ptr [ebx+1Ch]
		test	eax, eax
		jz	loc_68F55434
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F55520
		jmp	loc_68F55455
; ---------------------------------------------------------------------------

loc_68F554E2:				; CODE XREF: sub_68F55400+88j
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F55180
		mov	eax, 23h
		jmp	loc_68F5545A
; ---------------------------------------------------------------------------

loc_68F554F5:				; CODE XREF: sub_68F55400+ABj
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F55180
		mov	eax, 24h
		jmp	loc_68F5545A
; ---------------------------------------------------------------------------

loc_68F55508:				; CODE XREF: sub_68F55400+2Ej
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	sub_68F55180
		mov	eax, 25h
		jmp	loc_68F5545A
sub_68F55400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55520	proc near		; DATA XREF: sub_68F55400+D7o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F55539
		cmp	edx, 1Bh
		jz	short loc_68F55540
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F55539:				; CODE XREF: sub_68F55520+Cj
		pop	ebp
		mov	eax, 21h
		retn
; ---------------------------------------------------------------------------

loc_68F55540:				; CODE XREF: sub_68F55520+11j
		mov	dword ptr [eax], offset	sub_68F55180
		mov	eax, 26h
		pop	ebp
		retn
sub_68F55520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55550	proc near		; DATA XREF: sub_68F54940+140o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 12h
		jz	short loc_68F55580
		jle	short loc_68F55570
		cmp	edx, 29h
		jz	short loc_68F55580

loc_68F55565:				; CODE XREF: sub_68F55550+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55570:				; CODE XREF: sub_68F55550+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F55565
		pop	ebp
		mov	eax, 27h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F55580:				; CODE XREF: sub_68F55550+Cj
					; sub_68F55550+13j
		mov	dword ptr [eax], offset	sub_68F55590
		mov	eax, 28h
		pop	ebp
		retn
sub_68F55550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55590	proc near		; DATA XREF: sub_68F55550:loc_68F55580o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_10]
		cmp	ebx, 12h
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_14], eax
		jz	short loc_68F555F7
		jle	short loc_68F555E0
		cmp	ebx, 17h
		jz	loc_68F55661

loc_68F555C4:				; CODE XREF: sub_68F55590+53j
					; sub_68F55590+A7j
		mov	esi, [ebp+var_8]
		mov	edx, ebx
		mov	eax, edi
		mov	ebx, [ebp+var_C]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F555E0:				; CODE XREF: sub_68F55590+29j
		cmp	ebx, 0Fh
		jnz	short loc_68F555C4
		mov	eax, 27h

loc_68F555EA:				; CODE XREF: sub_68F55590+BBj
					; sub_68F55590+CFj ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F555F7:				; CODE XREF: sub_68F55590+27j
		mov	eax, offset aEmpty ; "EMPTY"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jnz	short loc_68F5564D
		mov	eax, offset aAny ; "ANY"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68F555C4
		mov	dword ptr [edi], offset	sub_68F55AA0
		mov	eax, 29h
		mov	dword ptr [edi+8], 27h
		jmp	short loc_68F555EA
; ---------------------------------------------------------------------------

loc_68F5564D:				; CODE XREF: sub_68F55590+86j
		mov	dword ptr [edi], offset	sub_68F55AA0
		mov	eax, 2Ah
		mov	dword ptr [edi+8], 27h
		jmp	short loc_68F555EA
; ---------------------------------------------------------------------------

loc_68F55661:				; CODE XREF: sub_68F55590+2Ej
		mov	dword ptr [edi], offset	sub_68F55680
		mov	eax, 2Ch
		mov	dword ptr [edi+4], 1
		jmp	loc_68F555EA
sub_68F55590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55680	proc near		; DATA XREF: sub_68F55590:loc_68F55661o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	[ebp+var_C], ebx
		mov	edx, [ebp+arg_10]
		lea	eax, [esi-0Fh]
		mov	[ebp+var_4], edi
		cmp	eax, 1Ah	; switch 27 cases
		mov	ebx, [ebp+arg_0]
		mov	edi, [ebp+arg_C]
		ja	short loc_68F556D0 ; jumptable 68F556A6	default	case
		jmp	ds:off_68F5C4A0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F556AD:				; CODE XREF: sub_68F55680+26j
					; DATA XREF: .rdata:off_68F5C4A0o
		mov	[esp+28h+var_20], edi ;	jumptable 68F556A6 case	5
		mov	eax, offset aPcdata ; "PCDATA"
		mov	[esp+28h+var_1C], eax
		mov	edi, [edx+44h]
		mov	[esp+28h+var_28], edx
		add	ecx, edi
		mov	[esp+28h+var_24], ecx
		call	dword ptr [edx+1Ch]
		test	eax, eax
		jnz	short loc_68F5573F
		lea	esi, [esi+0]

loc_68F556D0:				; CODE XREF: sub_68F55680+24j
					; sub_68F55680+26j
					; DATA XREF: ...
		mov	edi, [ebp+var_4] ; jumptable 68F556A6 default case
		mov	edx, esi
		mov	eax, ebx
		mov	esi, [ebp+var_8]
		mov	ebx, [ebp+var_C]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F556E5:				; CODE XREF: sub_68F55680+26j
					; DATA XREF: .rdata:off_68F5C4A0o
		mov	dword ptr [ebx], offset	sub_68F558C0 ; jumptable 68F556A6 cases	3,26
		mov	eax, 33h

loc_68F556F0:				; CODE XREF: sub_68F55680+82j
					; sub_68F55680+96j ...
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F556FD:				; CODE XREF: sub_68F55680+26j
					; DATA XREF: .rdata:off_68F5C4A0o
		mov	eax, 27h	; jumptable 68F556A6 case 0
		jmp	short loc_68F556F0
; ---------------------------------------------------------------------------

loc_68F55704:				; CODE XREF: sub_68F55680+26j
					; DATA XREF: .rdata:off_68F5C4A0o
		mov	dword ptr [ebx+4], 2 ; jumptable 68F556A6 case 8
		mov	eax, 2Ch
		mov	dword ptr [ebx], offset	sub_68F55850
		jmp	short loc_68F556F0
; ---------------------------------------------------------------------------

loc_68F55718:				; CODE XREF: sub_68F55680+26j
					; DATA XREF: .rdata:off_68F5C4A0o
		mov	dword ptr [ebx], offset	sub_68F558C0 ; jumptable 68F556A6 case 15
		mov	eax, 35h
		jmp	short loc_68F556F0
; ---------------------------------------------------------------------------

loc_68F55725:				; CODE XREF: sub_68F55680+26j
					; DATA XREF: .rdata:off_68F5C4A0o
		mov	dword ptr [ebx], offset	sub_68F558C0 ; jumptable 68F556A6 case 16
		mov	eax, 34h
		jmp	short loc_68F556F0
; ---------------------------------------------------------------------------

loc_68F55732:				; CODE XREF: sub_68F55680+26j
					; DATA XREF: .rdata:off_68F5C4A0o
		mov	dword ptr [ebx], offset	sub_68F558C0 ; jumptable 68F556A6 case 17
		mov	eax, 36h
		jmp	short loc_68F556F0
; ---------------------------------------------------------------------------

loc_68F5573F:				; CODE XREF: sub_68F55680+4Bj
		mov	dword ptr [ebx], offset	sub_68F55750
		mov	eax, 2Bh
		jmp	short loc_68F556F0
sub_68F55680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55750	proc near		; DATA XREF: sub_68F55680:loc_68F5573Fo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 15h
		jz	short loc_68F5577C
		jle	short loc_68F55770
		cmp	edx, 18h
		jz	short loc_68F55789
		cmp	edx, 24h
		jz	short loc_68F5579D

loc_68F5576A:				; CODE XREF: sub_68F55750+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F55770:				; CODE XREF: sub_68F55750+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F5576A
		mov	eax, 27h

loc_68F5577A:				; CODE XREF: sub_68F55750+37j
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F5577C:				; CODE XREF: sub_68F55750+Cj
		mov	dword ptr [eax], offset	sub_68F557C0
		mov	eax, 27h
		jmp	short loc_68F5577A
; ---------------------------------------------------------------------------

loc_68F55789:				; CODE XREF: sub_68F55750+13j
		mov	dword ptr [eax], offset	sub_68F55AA0
		mov	dword ptr [eax+8], 27h
		mov	eax, 2Dh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F5579D:				; CODE XREF: sub_68F55750+18j
		mov	dword ptr [eax], offset	sub_68F55AA0
		mov	dword ptr [eax+8], 27h
		mov	eax, 2Eh
		pop	ebp
		retn
sub_68F55750	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F557C0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F557C0	proc near		; CODE XREF: .text:68F557B1j
					; DATA XREF: sub_68F55750:loc_68F5577Co ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 12h
		jz	short loc_68F557F0
		jle	short loc_68F557E0
		cmp	edx, 29h
		jz	short loc_68F557F0

loc_68F557D5:				; CODE XREF: sub_68F557C0+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F557E0:				; CODE XREF: sub_68F557C0+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F557D5
		pop	ebp
		mov	eax, 27h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F557F0:				; CODE XREF: sub_68F557C0+Cj
					; sub_68F557C0+13j
		mov	dword ptr [eax], offset	sub_68F55800
		mov	eax, 33h
		pop	ebp
		retn
sub_68F557C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55800	proc near		; DATA XREF: sub_68F557C0:loc_68F557F0o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 15h
		jz	short loc_68F5582C
		jle	short loc_68F55820
		cmp	edx, 24h
		jz	short loc_68F55839

loc_68F55815:				; CODE XREF: sub_68F55800+23j
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55820:				; CODE XREF: sub_68F55800+Ej
		cmp	edx, 0Fh
		jnz	short loc_68F55815
		mov	eax, 27h

loc_68F5582A:				; CODE XREF: sub_68F55800+37j
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F5582C:				; CODE XREF: sub_68F55800+Cj
		mov	dword ptr [eax], offset	sub_68F557C0
		mov	eax, 27h
		jmp	short loc_68F5582A
; ---------------------------------------------------------------------------

loc_68F55839:				; CODE XREF: sub_68F55800+13j
		mov	dword ptr [eax], offset	sub_68F55AA0
		mov	dword ptr [eax+8], 27h
		mov	eax, 2Eh
		pop	ebp
		retn
sub_68F55800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55850	proc near		; DATA XREF: sub_68F55680+90o
					; sub_68F558C0:loc_68F558E0o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		lea	ecx, [edx-0Fh]	; switch 27 cases
		cmp	ecx, 1Ah
		ja	short loc_68F55868 ; jumptable 68F55861	default	case
		jmp	ds:off_68F5C50C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F55868:				; CODE XREF: sub_68F55850+Fj
					; sub_68F55850+11j
					; DATA XREF: ...
		pop	ebp		; jumptable 68F55861 default case
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F5586E:				; CODE XREF: sub_68F55850+11j
					; DATA XREF: .rdata:off_68F5C50Co
		mov	dword ptr [eax], offset	sub_68F558C0 ; jumptable 68F55861 cases	18,41
		mov	eax, 33h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F5587B:				; CODE XREF: sub_68F55850+11j
					; DATA XREF: .rdata:off_68F5C50Co
		pop	ebp		; jumptable 68F55861 case 15
		mov	eax, 27h
		retn
; ---------------------------------------------------------------------------

loc_68F55882:				; CODE XREF: sub_68F55850+11j
					; DATA XREF: .rdata:off_68F5C50Co
		inc	dword ptr [eax+4] ; jumptable 68F55861 case 23
		mov	eax, 2Ch
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F5588C:				; CODE XREF: sub_68F55850+11j
					; DATA XREF: .rdata:off_68F5C50Co
		mov	dword ptr [eax], offset	sub_68F558C0 ; jumptable 68F55861 case 30
		mov	eax, 35h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F55899:				; CODE XREF: sub_68F55850+11j
					; DATA XREF: .rdata:off_68F5C50Co
		mov	dword ptr [eax], offset	sub_68F558C0 ; jumptable 68F55861 case 31
		mov	eax, 34h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F558A6:				; CODE XREF: sub_68F55850+11j
					; DATA XREF: .rdata:off_68F5C50Co
		mov	dword ptr [eax], offset	sub_68F558C0 ; jumptable 68F55861 case 32
		mov	eax, 36h
		pop	ebp
		retn
sub_68F55850	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F558C0	proc near		; DATA XREF: sub_68F55680:loc_68F556E5o
					; sub_68F55680:loc_68F55718o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lea	eax, [edx-0Fh]	; switch 24 cases
		cmp	eax, 17h
		ja	short loc_68F558D8 ; jumptable 68F558D1	default	case
		jmp	ds:off_68F5C578[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_68F558D8:				; CODE XREF: sub_68F558C0+Fj
					; sub_68F558C0+11j
					; DATA XREF: ...
		pop	ebp		; jumptable 68F558D1 default case
		mov	eax, ecx
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F558E0:				; CODE XREF: sub_68F558C0+11j
					; DATA XREF: .rdata:off_68F5C578o
		mov	dword ptr [ecx], offset	sub_68F55850 ; jumptable 68F558D1 case 38
		mov	eax, 32h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F558ED:				; CODE XREF: sub_68F558C0+11j
					; DATA XREF: .rdata:off_68F5C578o
		pop	ebp		; jumptable 68F558D1 case 15
		mov	eax, 27h
		retn
; ---------------------------------------------------------------------------

loc_68F558F4:				; CODE XREF: sub_68F558C0+11j
					; DATA XREF: .rdata:off_68F5C578o
		mov	dword ptr [ecx], offset	sub_68F55850 ; jumptable 68F558D1 case 21
		mov	eax, 31h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F55901:				; CODE XREF: sub_68F558C0+11j
					; DATA XREF: .rdata:off_68F5C578o
		mov	eax, [ecx+4]	; jumptable 68F558D1 case 24
		dec	eax
		test	eax, eax
		mov	[ecx+4], eax
		jnz	short loc_68F55919
		mov	dword ptr [ecx], offset	sub_68F55AA0
		mov	dword ptr [ecx+8], 27h

loc_68F55919:				; CODE XREF: sub_68F558C0+4Aj
		pop	ebp
		mov	eax, 2Dh
		retn
; ---------------------------------------------------------------------------

loc_68F55920:				; CODE XREF: sub_68F558C0+11j
					; DATA XREF: .rdata:off_68F5C578o
		mov	eax, [ecx+4]	; jumptable 68F558D1 case 35
		dec	eax
		test	eax, eax
		mov	[ecx+4], eax
		jnz	short loc_68F55938
		mov	dword ptr [ecx], offset	sub_68F55AA0
		mov	dword ptr [ecx+8], 27h

loc_68F55938:				; CODE XREF: sub_68F558C0+69j
		pop	ebp
		mov	eax, 2Fh
		retn
; ---------------------------------------------------------------------------

loc_68F5593F:				; CODE XREF: sub_68F558C0+11j
					; DATA XREF: .rdata:off_68F5C578o
		mov	eax, [ecx+4]	; jumptable 68F558D1 case 36
		dec	eax
		test	eax, eax
		mov	[ecx+4], eax
		jnz	short loc_68F55957
		mov	dword ptr [ecx], offset	sub_68F55AA0
		mov	dword ptr [ecx+8], 27h

loc_68F55957:				; CODE XREF: sub_68F558C0+88j
		pop	ebp
		mov	eax, 2Eh
		retn
; ---------------------------------------------------------------------------

loc_68F5595E:				; CODE XREF: sub_68F558C0+11j
					; DATA XREF: .rdata:off_68F5C578o
		mov	eax, [ecx+4]	; jumptable 68F558D1 case 37
		dec	eax
		test	eax, eax
		mov	[ecx+4], eax
		jnz	short loc_68F55976
		mov	dword ptr [ecx], offset	sub_68F55AA0
		mov	dword ptr [ecx+8], 27h

loc_68F55976:				; CODE XREF: sub_68F558C0+A7j
		pop	ebp
		mov	eax, 30h
		retn
sub_68F558C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55980	proc near		; DATA XREF: sub_68F54AC0:loc_68F54B55o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	eax, [ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+arg_10]
		cmp	ebx, 0Fh
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_14], eax
		jz	short loc_68F559F0
		cmp	ebx, 12h
		jz	short loc_68F55A00

loc_68F559AE:				; CODE XREF: sub_68F55980+62j
		mov	esi, [ebp+var_8]
		mov	edx, ebx
		mov	eax, edi
		mov	ebx, [ebp+var_C]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------

loc_68F559C3:				; CODE XREF: sub_68F55980+9Cj
		mov	eax, offset aIgnore ; "IGNORE"
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68F559AE
		mov	dword ptr [edi], offset	sub_68F55A60
		lea	esi, [esi+0]

loc_68F559F0:				; CODE XREF: sub_68F55980+27j
					; sub_68F55980+A4j
		mov	ebx, [ebp+var_C]
		xor	eax, eax
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F55A00:				; CODE XREF: sub_68F55980+2Cj
		mov	[esp+28h+var_20], eax
		mov	edx, offset aInclude ; "INCLUDE"
		mov	[esp+28h+var_1C], edx
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], esi
		mov	[esp+28h+var_24], eax
		call	dword ptr [esi+1Ch]
		test	eax, eax
		jz	short loc_68F559C3
		mov	dword ptr [edi], offset	sub_68F55A30
		jmp	short loc_68F559F0
sub_68F55980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55A30	proc near		; DATA XREF: sub_68F55980+9Eo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F55A59
		cmp	edx, 19h
		jz	short loc_68F55A50
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55A50:				; CODE XREF: sub_68F55A30+11j
		inc	dword ptr [eax+0Ch]
		mov	dword ptr [eax], offset	sub_68F54AC0

loc_68F55A59:				; CODE XREF: sub_68F55A30+Cj
		pop	ebp
		xor	eax, eax
		retn
sub_68F55A30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55A60	proc near		; DATA XREF: sub_68F55980+64o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F55A80
		cmp	edx, 19h
		jz	short loc_68F55A84
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55A80:				; CODE XREF: sub_68F55A60+Cj
		pop	ebp
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_68F55A84:				; CODE XREF: sub_68F55A60+11j
		mov	dword ptr [eax], offset	sub_68F54AC0
		mov	eax, 3Ah
		pop	ebp
		retn
sub_68F55A60	endp

; ---------------------------------------------------------------------------
		jmp	short sub_68F55AA0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55AA0	proc near		; CODE XREF: .text:68F55A91j
					; DATA XREF: sub_68F54C20:loc_68F54CD9o ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	edx, 0Fh
		jz	short loc_68F55AD3
		cmp	edx, 11h
		jz	short loc_68F55AC0
		pop	ebp
		jmp	sub_68F54550
; ---------------------------------------------------------------------------
		align 10h

loc_68F55AC0:				; CODE XREF: sub_68F55AA0+11j
		mov	ecx, [eax+10h]
		mov	edx, offset sub_68F54940
		test	ecx, ecx
		jnz	short loc_68F55AD1
		mov	edx, offset sub_68F54AC0

loc_68F55AD1:				; CODE XREF: sub_68F55AA0+2Aj
		mov	[eax], edx

loc_68F55AD3:				; CODE XREF: sub_68F55AA0+Cj
		pop	ebp
		mov	eax, [eax+8]
		retn
sub_68F55AA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55AE0	proc near		; DATA XREF: sub_68F54550:loc_68F54574o
					; sub_68F54590:loc_68F54634o ...
		push	ebp
		xor	eax, eax
		mov	ebp, esp
		pop	ebp
		retn
sub_68F55AE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55AF0	proc near		; CODE XREF: sub_68F42860+20p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	sub_68F54590
		mov	dword ptr [eax+10h], 1
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+14h], 0
		pop	ebp
		retn
sub_68F55AF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55B20	proc near		; CODE XREF: XML_ExternalEntityParserCreate+2C9p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	sub_68F54B60
		mov	dword ptr [eax+10h], 0
		mov	dword ptr [eax+0Ch], 0
		pop	ebp
		retn
sub_68F55B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55B40	proc near		; CODE XREF: DllEntryPoint+68p
		mov	ecx, offset dword_68F5C6A0
		push	ebp
		cmp	ecx, offset dword_68F5C6A0
		mov	ebp, esp
		jnb	short loc_68F55B66

loc_68F55B50:				; CODE XREF: sub_68F55B40+24j
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	[edx+68F40000h], eax
		cmp	ecx, offset dword_68F5C6A0
		jb	short loc_68F55B50

loc_68F55B66:				; CODE XREF: sub_68F55B40+Ej
		pop	ebp
		retn
sub_68F55B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55B70	proc near		; DATA XREF: sub_68F55BA0:loc_68F55BCAo
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, off_68F56000
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_68F55B98

loc_68F55B81:				; CODE XREF: sub_68F55B70+26j
		call	eax
		mov	edx, off_68F56000
		lea	eax, [edx+4]
		mov	off_68F56000, eax
		mov	eax, [edx+4]
		test	eax, eax
		jnz	short loc_68F55B81

locret_68F55B98:			; CODE XREF: sub_68F55B70+Fj
		leave
		retn
sub_68F55B70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55BA0	proc near		; CODE XREF: sub_68F55C00+1Bj

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, ds:dword_68F55FB8
		cmp	esi, 0FFFFFFFFh
		jz	short loc_68F55BE0

loc_68F55BB3:				; CODE XREF: sub_68F55BA0+56j
		test	esi, esi
		jz	short loc_68F55BCA
		lea	ebx, dword_68F55FB8[esi*4]
		xchg	ax, ax

loc_68F55BC0:				; CODE XREF: sub_68F55BA0+28j
		call	dword ptr [ebx]
		sub	ebx, 4
		sub	esi, 1
		jnz	short loc_68F55BC0

loc_68F55BCA:				; CODE XREF: sub_68F55BA0+15j
		mov	[esp+18h+var_18], offset sub_68F55B70
		call	sub_68F41030
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F55BE0:				; CODE XREF: sub_68F55BA0+11j
		xor	edx, edx
		jmp	short loc_68F55BE6
; ---------------------------------------------------------------------------

loc_68F55BE4:				; CODE XREF: sub_68F55BA0+52j
		mov	edx, eax

loc_68F55BE6:				; CODE XREF: sub_68F55BA0+42j
		lea	eax, [edx+1]
		mov	ecx, ds:dword_68F55FB8[eax*4]
		test	ecx, ecx
		jnz	short loc_68F55BE4
		mov	esi, edx
		jmp	short loc_68F55BB3
sub_68F55BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55C00	proc near		; CODE XREF: DllEntryPoint+6Dp
		mov	eax, ds:dword_68F5D020
		push	ebp
		mov	ebp, esp
		test	eax, eax
		jz	short loc_68F55C10
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_68F55C10:				; CODE XREF: sub_68F55C00+Aj
		pop	ebp
		mov	ds:dword_68F5D020, 1
		jmp	short sub_68F55BA0
sub_68F55C00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55C20	proc near		; CODE XREF: DllEntryPoint+21p
					; DllEntryPoint+87p
		push	ebp
		mov	eax, 1
		mov	ebp, esp
		pop	ebp
		retn	0Ch
sub_68F55C20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55C30	proc near		; DATA XREF: sub_68F55C40+194o
		push	ebp
		mov	eax, ds:dword_68F5D084
		mov	ebp, esp
		pop	ebp
		mov	ecx, [eax+4]
		jmp	ecx
sub_68F55C30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55C40	proc near		; CODE XREF: sub_68F55C40:loc_68F55F0Cp
					; sub_68F55C40+2F3p

lpString	= dword	ptr -0C8h
Val		= dword	ptr -0C4h
Size		= dword	ptr -0C0h
String		= byte ptr -0B8h
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= word ptr -78h
nAtom		= word ptr -68h
lpBuffer	= dword	ptr -64h
nSize		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
Buffer		= byte ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= word ptr -28h
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 42h
		mov	ebp, esp
		push	ebx
		movzx	eax, ax
		sub	esp, 64h
		mov	[esp+68h+nSize], edx ; nSize
		lea	edx, [ebp+Buffer]
		xor	ebx, ebx
		mov	[esp+68h+lpBuffer], edx	; lpBuffer
		mov	dword ptr [esp+68h+nAtom], eax ; nAtom
		call	ds:GetAtomNameA
		mov	edx, 1Fh
		mov	ecx, 1
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_68F55C7D
		jmp	short loc_68F55CB5
; ---------------------------------------------------------------------------

loc_68F55C78:				; CODE XREF: sub_68F55C40+42j
		add	ecx, ecx
		dec	edx
		js	short loc_68F55C8B

loc_68F55C7D:				; CODE XREF: sub_68F55C40+34j
					; sub_68F55C40+49j
		cmp	byte ptr [edx+ebp-58h],	41h
		jnz	short loc_68F55C78
		or	ebx, ecx
		add	ecx, ecx
		dec	edx
		jns	short loc_68F55C7D

loc_68F55C8B:				; CODE XREF: sub_68F55C40+3Bj
		cmp	dword ptr [ebx], 54h
		jnz	short loc_68F55C97
		mov	eax, ebx
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_68F55C97:				; CODE XREF: sub_68F55C40+4Ej
		mov	dword ptr [esp+68h+nAtom], offset aW32_sharedptrS ; "w32_sharedptr->size == sizeof(W32_EH_SH"...
		mov	edx, 0F7h
		mov	eax, offset a____Gcc3_4_5Gc ; "../../gcc-3.4.5/gcc/config/i386/w32-sha"...
		mov	[esp+68h+nSize], edx
		mov	[esp+68h+lpBuffer], eax
		call	_assert
; ---------------------------------------------------------------------------

loc_68F55CB5:				; CODE XREF: sub_68F55C40+36j
		mov	dword ptr [esp+68h+nAtom], offset aGetatomnameaAt ; "GetAtomNameA (atom, s, sizeof(s)) != 0"
		mov	ebx, 0F1h
		mov	ecx, offset a____Gcc3_4_5Gc ; "../../gcc-3.4.5/gcc/config/i386/w32-sha"...
		mov	[esp+68h+nSize], ebx
		mov	[esp+68h+lpBuffer], ecx
		call	_assert
; ---------------------------------------------------------------------------
		align 10h

loc_68F55CE0:				; CODE XREF: sub_68F41180+4j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	edi, ds:dword_68F5D084
		test	edi, edi
		jz	short loc_68F55CFE
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F55CFE:				; CODE XREF: sub_68F55C40+B4j
		mov	dword ptr [ebp+nAtom], 41414141h
		mov	eax, ds:dword_68F5C5E0
		lea	edi, [ebp+nAtom]
		mov	[ebp+lpBuffer],	41414141h
		mov	[ebp+nSize], 41414141h
		mov	[ebp+var_48], eax
		mov	eax, ds:dword_68F5C5E4
		mov	[ebp+var_5C], 41414141h
		mov	dword ptr [ebp+Buffer],	41414141h
		mov	[ebp+var_44], eax
		mov	eax, ds:dword_68F5C5E8
		mov	[ebp+var_54], 41414141h
		mov	[ebp+var_50], 41414141h
		mov	[ebp+var_40], eax
		mov	eax, ds:dword_68F5C5EC
		mov	[ebp+var_4C], 41414141h
		mov	[ebp+var_3C], eax
		mov	eax, ds:dword_68F5C5F0
		mov	[ebp+var_38], eax
		mov	eax, ds:dword_68F5C5F4
		mov	[ebp+var_34], eax
		mov	eax, ds:dword_68F5C5F8
		mov	[ebp+var_30], eax
		mov	eax, ds:dword_68F5C5FC
		mov	[ebp+var_2C], eax
		movzx	eax, ds:word_68F5C600
		mov	[ebp+var_28], ax
		mov	[esp+0C8h+lpString], edi ; lpString
		call	ds:FindAtomA
		movzx	eax, ax
		sub	esp, 4
		test	eax, eax
		jnz	loc_68F55F0C
		mov	[esp+0C8h+lpString], 54h ; Size
		call	malloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_68F55F40
		mov	[esp+0C8h+lpString], eax ; Dst
		xor	ecx, ecx
		mov	esi, 54h
		mov	[esp+0C8h+Val],	ecx ; Val
		mov	[esp+0C8h+Size], esi ; Size
		call	memset
		mov	dword ptr [ebx+4], offset abort
		mov	ecx, 1
		mov	dword ptr [ebx+8], offset sub_68F55C30
		mov	eax, ds:dword_68F5D034
		mov	dword ptr [ebx], 54h
		mov	edx, ds:dword_68F5D038
		mov	dword ptr [ebx+28h], 0
		mov	[ebx+14h], eax
		mov	eax, dword_68F56004
		mov	[ebx+18h], edx
		mov	edx, dword_68F56008
		mov	[ebx+1Ch], eax
		mov	eax, ds:dword_68F5D044
		mov	dword ptr [ebx+2Ch], 0FFFFFFFFh
		mov	[ebx+20h], edx
		mov	[ebx+30h], eax
		mov	eax, dword_68F5600C
		mov	edx, dword_68F56010
		mov	[ebx+34h], eax
		mov	eax, ds:dword_68F5D054
		mov	[ebx+38h], edx
		mov	edx, ds:dword_68F5D058
		mov	[ebx+3Ch], eax
		mov	eax, ds:dword_68F5D064
		mov	dword ptr [ebx+44h], 0FFFFFFFFh
		mov	[ebx+40h], edx
		mov	[ebx+48h], eax
		mov	edx, dword_68F56018
		mov	eax, dword_68F56014
		mov	[ebx+50h], edx
		mov	edx, 1Fh
		mov	[ebx+4Ch], eax

loc_68F55E60:				; CODE XREF: sub_68F55C40+237j
		mov	eax, ebx
		and	eax, ecx
		cmp	eax, 1
		sbb	eax, eax
		and	al, 20h
		add	ecx, ecx
		add	al, 41h
		mov	[edx+ebp-0B8h],	al
		dec	edx
		jns	short loc_68F55E60
		mov	eax, ds:dword_68F5C5E0
		mov	[ebp+var_98], eax
		mov	eax, ds:dword_68F5C5E4
		mov	[ebp+var_94], eax
		mov	eax, ds:dword_68F5C5E8
		mov	[ebp+var_90], eax
		mov	eax, ds:dword_68F5C5EC
		mov	[ebp+var_8C], eax
		mov	eax, ds:dword_68F5C5F0
		mov	[ebp+var_88], eax
		mov	eax, ds:dword_68F5C5F4
		mov	[ebp+var_84], eax
		mov	eax, ds:dword_68F5C5F8
		mov	[ebp+var_80], eax
		mov	eax, ds:dword_68F5C5FC
		mov	[ebp+var_7C], eax
		movzx	eax, ds:word_68F5C600
		mov	[ebp+var_78], ax
		lea	eax, [ebp+String]
		mov	[esp+0C8h+lpString], eax ; lpString
		call	ds:AddAtomA
		movzx	esi, ax
		sub	esp, 4
		test	esi, esi
		jnz	short loc_68F55F31

loc_68F55EEF:				; CODE XREF: sub_68F55C40+2FCj
		xor	edx, edx

loc_68F55EF1:				; CODE XREF: sub_68F55C40+2FEj
		test	edx, edx
		jnz	short loc_68F55F13
		mov	[esp+0C8h+lpString], ebx ; Memory
		call	free
		mov	[esp+0C8h+lpString], edi ; lpString
		call	ds:FindAtomA
		sub	esp, 4
		movzx	eax, ax

loc_68F55F0C:				; CODE XREF: sub_68F55C40+155j
		call	sub_68F55C40
		mov	ebx, eax

loc_68F55F13:				; CODE XREF: sub_68F55C40+2B3j
		mov	ds:dword_68F5D084, ebx
		lea	eax, [ebx+4]
		mov	ds:dword_68F5D074, eax
		lea	eax, [ebx+8]
		mov	ds:dword_68F5D094, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_68F55F31:				; CODE XREF: sub_68F55C40+2ADj
		mov	eax, esi
		call	sub_68F55C40
		cmp	eax, ebx
		mov	edx, esi
		jnz	short loc_68F55EEF
		jmp	short loc_68F55EF1
; ---------------------------------------------------------------------------

loc_68F55F40:				; CODE XREF: sub_68F55C40+16Bj
		call	abort
sub_68F55C40	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _errno]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fflush]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _assert]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memmove]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 10h

loc_68F55F90:				; DATA XREF: sub_68F43AE0+290o
		jmp	ds:realloc
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memset]
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_68F55FA8	proc near		; DATA XREF: .text:68F55FBCo
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_68F41180
sub_68F55FA8	endp

; ---------------------------------------------------------------------------
		align 8
dword_68F55FB8	dd 0FFFFFFFFh		; DATA XREF: sub_68F55BA0+8r
					; sub_68F55BA0+17o ...
		dd offset sub_68F55FA8
		dd 0
		dd 0FFFFFFFFh
dword_68F55FC8	dd 0Eh dup(0)		; DATA XREF: .data:off_68F56000o
_text		ends

; Section 2. (virtual address 00016000)
; Virtual size			: 00000024 (	 36.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00015400
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 68F56000h
off_68F56000	dd offset dword_68F55FC8 ; DATA	XREF: sub_68F55B70+6r
					; sub_68F55B70+13r ...
dword_68F56004	dd 0			; DATA XREF: sub_68F55C40+1B6r
dword_68F56008	dd 0FFFFFFFFh		; DATA XREF: sub_68F55C40+1BEr
dword_68F5600C	dd 0			; DATA XREF: sub_68F55C40+1D9r
dword_68F56010	dd 0FFFFFFFFh		; DATA XREF: sub_68F55C40+1DEr
dword_68F56014	dd 0			; DATA XREF: sub_68F55C40+210r
dword_68F56018	dd 0FFFFFFFFh		; DATA XREF: sub_68F55C40+20Ar
		align 1000h
_data		ends

; Section 3. (virtual address 00017000)
; Virtual size			: 000056A0 (  22176.)
; Section size in file		: 00005800 (  22528.)
; Offset to raw	data for section: 00015600
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 68F57000h
aXmlHttpWww_w3_	db 'xml=http://www.w3.org/XML/1998/namespace',0
					; DATA XREF: XML_ParserReset+199o
					; XML_ParserCreate_MM:loc_68F46775o
aStatusNull	db 'status != NULL',0   ; DATA XREF: XML_GetParsingStatus:loc_68F41C73o
aLibXmlparse_c	db 'lib/xmlparse.c',0   ; DATA XREF: XML_GetParsingStatus+2Fo
aOutOfMemory	db 'out of memory',0    ; DATA XREF: .rdata:68F57564o
aSyntaxError	db 'syntax error',0     ; DATA XREF: .rdata:68F57568o
aNoElementFound	db 'no element found',0 ; DATA XREF: .rdata:68F5756Co
		align 4
aNotWellFormedI	db 'not well-formed (invalid token)',0 ; DATA XREF: .rdata:68F57570o
aUnclosedToken	db 'unclosed token',0   ; DATA XREF: .rdata:68F57574o
aPartialCharact	db 'partial character',0 ; DATA XREF: .rdata:68F57578o
aMismatchedTag	db 'mismatched tag',0   ; DATA XREF: .rdata:68F5757Co
aDuplicateAttri	db 'duplicate attribute',0 ; DATA XREF: .rdata:68F57580o
aJunkAfterDocum	db 'junk after document element',0 ; DATA XREF: .rdata:68F57584o
aIllegalParamet	db 'illegal parameter entity reference',0 ; DATA XREF: .rdata:68F57588o
aUndefinedEntit	db 'undefined entity',0 ; DATA XREF: .rdata:68F5758Co
aRecursiveEntit	db 'recursive entity reference',0 ; DATA XREF: .rdata:68F57590o
aAsynchronousEn	db 'asynchronous entity',0 ; DATA XREF: .rdata:68F57594o
		align 4
aReferenceToInv	db 'reference to invalid character number',0 ; DATA XREF: .rdata:68F57598o
aReferenceToBin	db 'reference to binary entity',0 ; DATA XREF: .rdata:68F5759Co
		align 4
aReferenceToExt	db 'reference to external entity in attribute',0
					; DATA XREF: .rdata:68F575A0o
		align 4
aXmlOrTextDecla	db 'XML or text declaration not at start of entity',0
					; DATA XREF: .rdata:68F575A4o
aUnknownEncodin	db 'unknown encoding',0 ; DATA XREF: .rdata:68F575A8o
aEncodingSpecif	db 'encoding specified in XML declaration is incorrect',0
					; DATA XREF: .rdata:68F575ACo
aUnclosedCdataS	db 'unclosed CDATA section',0 ; DATA XREF: .rdata:68F575B0o
		align 4
aErrorInProcess	db 'error in processing external entity reference',0
					; DATA XREF: .rdata:68F575B4o
aDocumentIsNotS	db 'document is not standalone',0 ; DATA XREF: .rdata:68F575B8o
		align 10h
aUnexpectedPars	db 'unexpected parser state - please send a bug report',0
					; DATA XREF: .rdata:68F575BCo
		align 4
aEntityDeclared	db 'entity declared in parameter entity',0 ; DATA XREF: .rdata:68F575C0o
aRequestedFeatu	db 'requested feature requires XML_DTD support in Expat',0
					; DATA XREF: .rdata:68F575C4o
aCannotChangeSe	db 'cannot change setting once parsing has begun',0
					; DATA XREF: .rdata:68F575C8o
aUnboundPrefix	db 'unbound prefix',0   ; DATA XREF: .rdata:68F575CCo
aMustNotUndecla	db 'must not undeclare prefix',0 ; DATA XREF: .rdata:68F575D0o
		align 4
aIncompleteMark	db 'incomplete markup in parameter entity',0 ; DATA XREF: .rdata:68F575D4o
		align 4
aXmlDeclaration	db 'XML declaration not well-formed',0 ; DATA XREF: .rdata:68F575D8o
aTextDeclaratio	db 'text declaration not well-formed',0 ; DATA XREF: .rdata:68F575DCo
		align 10h
aIllegalCharact	db 'illegal character(s) in public id',0 ; DATA XREF: .rdata:68F575E0o
aParserSuspende	db 'parser suspended',0 ; DATA XREF: .rdata:68F575E4o
aParserNotSuspe	db 'parser not suspended',0 ; DATA XREF: .rdata:68F575E8o
aParsingAborted	db 'parsing aborted',0  ; DATA XREF: .rdata:68F575ECo
aParsingFinishe	db 'parsing finished',0 ; DATA XREF: .rdata:68F575F0o
		align 4
aCannotSuspendI	db 'cannot suspend in external parameter entity',0
					; DATA XREF: .rdata:68F575F4o
aReservedPrefix	db 'reserved prefix (xml) must not be undeclared or bound to another '
					; DATA XREF: .rdata:68F575F8o
		db 'namespace name',0
aReservedPref_0	db 'reserved prefix (xmlns) must not be declared or undeclared',0
					; DATA XREF: .rdata:68F575FCo
		align 4
aPrefixMustNotB	db 'prefix must not be bound to one of the reserved namespace names',0
					; DATA XREF: .rdata:68F57600o
		align 10h
dword_68F57560	dd 0			; DATA XREF: XML_ErrorString+10r
		dd offset aOutOfMemory	; "out of memory"
		dd offset aSyntaxError	; "syntax error"
		dd offset aNoElementFound ; "no	element	found"
		dd offset aNotWellFormedI ; "not well-formed (invalid token)"
		dd offset aUnclosedToken ; "unclosed token"
		dd offset aPartialCharact ; "partial character"
		dd offset aMismatchedTag ; "mismatched tag"
		dd offset aDuplicateAttri ; "duplicate attribute"
		dd offset aJunkAfterDocum ; "junk after	document element"
		dd offset aIllegalParamet ; "illegal parameter entity reference"
		dd offset aUndefinedEntit ; "undefined entity"
		dd offset aRecursiveEntit ; "recursive entity reference"
		dd offset aAsynchronousEn ; "asynchronous entity"
		dd offset aReferenceToInv ; "reference to invalid character number"
		dd offset aReferenceToBin ; "reference to binary entity"
		dd offset aReferenceToExt ; "reference to external entity in attribu"...
		dd offset aXmlOrTextDecla ; "XML or text declaration not at start of"...
		dd offset aUnknownEncodin ; "unknown encoding"
		dd offset aEncodingSpecif ; "encoding specified	in XML declaration i"...
		dd offset aUnclosedCdataS ; "unclosed CDATA section"
		dd offset aErrorInProcess ; "error in processing external entity ref"...
		dd offset aDocumentIsNotS ; "document is not standalone"
		dd offset aUnexpectedPars ; "unexpected	parser state - please send a"...
		dd offset aEntityDeclared ; "entity declared in	parameter entity"
		dd offset aRequestedFeatu ; "requested feature requires	XML_DTD	supp"...
		dd offset aCannotChangeSe ; "cannot change setting once	parsing	has "...
		dd offset aUnboundPrefix ; "unbound prefix"
		dd offset aMustNotUndecla ; "must not undeclare	prefix"
		dd offset aIncompleteMark ; "incomplete	markup in parameter entity"
		dd offset aXmlDeclaration ; "XML declaration not well-formed"
		dd offset aTextDeclaratio ; "text declaration not well-formed"
		dd offset aIllegalCharact ; "illegal character(s) in public id"
		dd offset aParserSuspende ; "parser suspended"
		dd offset aParserNotSuspe ; "parser not	suspended"
		dd offset aParsingAborted ; "parsing aborted"
		dd offset aParsingFinishe ; "parsing finished"
		dd offset aCannotSuspendI ; "cannot suspend in external	parameter en"...
		dd offset aReservedPrefix ; "reserved prefix (xml) must	not be undec"...
		dd offset aReservedPref_0 ; "reserved prefix (xmlns) must not be dec"...
		dd offset aPrefixMustNotB ; "prefix must not be	bound to one of	the "...
aExpat_2_0_1	db 'expat_2.0.1',0      ; DATA XREF: XML_ExpatVersion+1o
aSizeofXml_char	db 'sizeof(XML_Char)',0 ; DATA XREF: .rdata:68F57664o
aSizeofXml_lcha	db 'sizeof(XML_LChar)',0 ; DATA XREF: .rdata:68F57670o
aXml_dtd	db 'XML_DTD',0          ; DATA XREF: .rdata:68F5767Co
aXml_context_by	db 'XML_CONTEXT_BYTES',0 ; DATA XREF: .rdata:68F57688o
aXml_ns		db 'XML_NS',0           ; DATA XREF: .rdata:68F57694o
		align 10h
dword_68F57660	dd 6			; DATA XREF: XML_GetFeatureList+1o
		dd offset aSizeofXml_char ; "sizeof(XML_Char)"
		dd 1, 7
		dd offset aSizeofXml_lcha ; "sizeof(XML_LChar)"
		dd 1, 3
		dd offset aXml_dtd	; "XML_DTD"
		dd 0
		dd 4
		dd offset aXml_context_by ; "XML_CONTEXT_BYTES"
		dd 400h, 8
		dd offset aXml_ns	; "XML_NS"
		dd 4 dup(0)
off_68F576A8	dd offset loc_68F421E5	; DATA XREF: sub_68F42110+6Ar
		dd offset loc_68F42181	; jump table for switch	statement
		dd offset loc_68F421C8
		dd offset loc_68F421E5
		dd offset loc_68F42277
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42200
		dd offset loc_68F42290
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42181
		dd offset loc_68F42193
		align 10h
byte_68F57760	db 68h			; DATA XREF: sub_68F42370+49r
aTtpWww_w3_orgX	db 'ttp://www.w3.org/XML/1998/namespace',0
		align 4
		db '$',0
		align 4
byte_68F5778C	db 68h			; DATA XREF: sub_68F42370+6Er
aTtpWww_w3_org2	db 'ttp://www.w3.org/2000/xmlns/',0
		align 4
		dd 1Dh
off_68F577B0	dd offset loc_68F42BD7	; DATA XREF: sub_68F42AF0+70r
		dd offset loc_68F42B67	; jump table for switch	statement
		dd offset loc_68F42BB5
		dd offset loc_68F42BD7
		dd offset loc_68F42BF0
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B67
		dd offset loc_68F42B80
off_68F5786C	dd offset loc_68F43773	; DATA XREF: sub_68F43630+55r
		dd offset loc_68F436B0	; jump table for switch	statement
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F4369E
		dd offset loc_68F436B0
		dd offset loc_68F43690
		dd offset loc_68F436C0
		dd offset loc_68F436D5
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436B0
		dd offset loc_68F436E8
		dd offset loc_68F436B0
		dd offset loc_68F43740
		dd offset loc_68F436B0
		dd offset loc_68F43756
off_68F578E8	dd offset loc_68F444F0	; DATA XREF: sub_68F443A0+44r
		dd offset loc_68F443F0	; jump table for switch	statement
		dd offset loc_68F44425
		dd offset loc_68F444D3
		dd offset loc_68F44523
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44500
		dd offset loc_68F443F8
		dd offset loc_68F44425
		dd offset loc_68F44540
		dd offset loc_68F44441
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F44425
		dd offset loc_68F443F8
off_68F57998	dd offset loc_68F44920	; DATA XREF: sub_68F44850+6Fr
		dd offset loc_68F448C6	; jump table for switch	statement
		dd offset loc_68F448F0
		dd offset loc_68F44950
		dd offset loc_68F44908
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F44A88
		dd offset loc_68F448CE
		dd offset loc_68F448F0
		dd offset loc_68F44A88
		dd offset loc_68F44A10
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F448F0
		dd offset loc_68F44963
byte_68F57A1C	db 23h,	0		; DATA XREF: sub_68F468F0+258o
					; sub_68F468F0+29Do ...
aCdata		db 'CDATA',0            ; DATA XREF: sub_68F468F0+5EBo
aId		db 'ID',0               ; DATA XREF: sub_68F468F0+5DDo
aIdref		db 'IDREF',0            ; DATA XREF: sub_68F468F0:loc_68F46EBFo
aIdrefs		db 'IDREFS',0           ; DATA XREF: sub_68F468F0:loc_68F46EB8o
aEntity		db 'ENTITY',0           ; DATA XREF: sub_68F468F0:loc_68F46EB1o
aEntities	db 'ENTITIES',0         ; DATA XREF: sub_68F468F0:loc_68F46EA1o
aNmtoken	db 'NMTOKEN',0          ; DATA XREF: sub_68F468F0:loc_68F46E91o
aNmtokens	db 'NMTOKENS',0         ; DATA XREF: sub_68F468F0:loc_68F46E81o
aNotation	db 'NOTATION(',0        ; DATA XREF: sub_68F468F0+531o
asc_68F57A5F	db '|',0                ; DATA XREF: sub_68F468F0+525o
asc_68F57A61	db '(',0                ; DATA XREF: sub_68F468F0+538o
		align 4
off_68F57A64	dd offset loc_68F475C7,	offset loc_68F475BF, offset loc_68F47597
					; DATA XREF: sub_68F468F0+92r
		dd offset loc_68F47534,	offset loc_68F4752A, offset loc_68F47512 ; jump	table for switch statement
		dd offset loc_68F46B2C,	offset loc_68F46BEF, offset loc_68F47303
		dd offset loc_68F472A2,	offset loc_68F47226, offset loc_68F47200
		dd offset loc_68F47410,	offset loc_68F47357, offset loc_68F46BB8
		dd offset loc_68F46C32,	offset loc_68F4719A, offset loc_68F470EA
		dd offset loc_68F470E0,	offset loc_68F47089, offset loc_68F46FFE
		dd offset loc_68F46FA3,	offset loc_68F46F22, offset loc_68F46EE2
		dd offset loc_68F46ED4,	offset loc_68F46EC6, offset loc_68F46EBF
		dd offset loc_68F46EB8,	offset loc_68F46EB1, offset loc_68F46EA1
		dd offset loc_68F46E91,	offset loc_68F46E81, offset loc_68F46DF1
		dd offset loc_68F46DF1,	offset loc_68F46DE5, offset loc_68F46DA3
		dd offset loc_68F46CD0,	offset loc_68F46CD0, offset loc_68F4742D
		dd offset loc_68F4742D,	offset loc_68F46AF5, offset loc_68F479CB
		dd offset loc_68F4799E,	offset loc_68F4799E, offset loc_68F47961
		dd offset loc_68F47901,	offset loc_68F478F5, offset loc_68F478E9
		dd offset loc_68F478DD,	offset loc_68F4785C, offset loc_68F477EA
		dd offset loc_68F477BB,	offset loc_68F477AF, offset loc_68F477A3
		dd offset loc_68F47797,	offset loc_68F476EF, offset loc_68F476D6
		dd offset loc_68F476AD,	offset loc_68F47696, offset loc_68F47640
		dd offset loc_68F475EA,	offset loc_68F475EA
off_68F57B5C	dd offset loc_68F487B9	; DATA XREF: sub_68F486C0+8Cr
		dd offset loc_68F48D59	; jump table for switch	statement
		dd offset loc_68F48D94
		dd offset loc_68F48DF6
		dd offset loc_68F48E17
		dd offset loc_68F48851
		dd offset loc_68F48868
		dd offset loc_68F48868
		dd offset loc_68F489B6
		dd offset loc_68F489B6
		dd offset loc_68F48AD0
		dd offset loc_68F48BC8
		dd offset loc_68F48C4F
		dd offset loc_68F48C8D
		dd offset loc_68F48D00
		dd offset loc_68F48E38
		dd offset loc_68F48E8B
		dd offset loc_68F48EBA
		dd offset loc_68F48EC9
		align 20h
byte_68F57BC0	db 6Eh,	6Fh, 0		; DATA XREF: sub_68F53590:loc_68F5383Fo
byte_68F57BC3	db 79h			; DATA XREF: sub_68F53590+102o
		db 65h,	73h, 0
aStandalone	db 'standalone',0       ; DATA XREF: sub_68F53590+D9o
aEncoding	db 'encoding',0         ; DATA XREF: sub_68F53590+B4o
aVersion	db 'version',0          ; DATA XREF: sub_68F53590+84o
		align 4
off_68F57BE4	dd offset off_68F58200	; DATA XREF: sub_68F54360+1o
					; sub_68F54380+1o ...
		dd offset off_68F58080
		dd offset off_68F57F00
		dd offset off_68F57D80
		dd offset off_68F57D80
		dd offset off_68F57C00
		dd offset off_68F57F00
off_68F57C00	dd offset sub_68F4EDB0	; DATA XREF: .rdata:68F57BF8o
		dd offset sub_68F4DA70
		dd offset sub_68F4D610
		dd offset sub_68F4F930
		dd offset sub_68F4F6C0
		dd offset sub_68F4F7F0
		dd offset sub_68F4FFC0
		dd offset sub_68F500C0
		dd offset sub_68F50110
		dd offset sub_68F50190
		dd offset sub_68F4FB40
		dd offset sub_68F4FDD0
		dd offset sub_68F4FE90
		dd offset sub_68F501E0
		dd offset sub_68F4FA70
		dd offset sub_68F4CE00
		dd offset sub_68F4CF80
		dd 2, 100h, 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
off_68F57D80	dd offset sub_68F51E50	; DATA XREF: .rdata:68F57BF0o
					; .rdata:68F57BF4o
		dd offset sub_68F50B00
		dd offset sub_68F50690
		dd offset sub_68F52970
		dd offset sub_68F52700
		dd offset sub_68F52830
		dd offset sub_68F53010
		dd offset sub_68F53100
		dd offset sub_68F53150
		dd offset sub_68F531D0
		dd offset sub_68F52B80
		dd offset sub_68F52E10
		dd offset sub_68F52EE0
		dd offset sub_68F53220
		dd offset sub_68F52AB0
		dd offset sub_68F4D010
		dd offset sub_68F4D190
		dd 2, 3	dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
off_68F57F00	dd offset sub_68F4B930	; DATA XREF: .rdata:68F57BECo
					; .rdata:68F57BFCo
		dd offset sub_68F4AAC0
		dd offset sub_68F4A660
		dd offset sub_68F4C2F0
		dd offset sub_68F4C120
		dd offset sub_68F4C220
		dd offset sub_68F4C8F0
		dd offset sub_68F4C9A0
		dd offset sub_68F4C9E0
		dd offset sub_68F4CA30
		dd offset sub_68F4C4B0
		dd offset sub_68F4C7B0
		dd offset sub_68F4C850
		dd offset sub_68F4CA70
		dd offset sub_68F4C420
		dd offset sub_68F4CB00
		dd offset sub_68F4CB60
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 10h dup(8080808h), 8 dup(5050505h)
		dd 4 dup(6060606h), 7070707h, 7, 0
		dd 1010000h
		dd offset sub_68F49F90
		dd offset sub_68F49FF0
		dd offset sub_68F49F80
		dd offset sub_68F4A040
		dd offset sub_68F4A0A0
		dd offset sub_68F49F80
		dd offset sub_68F4A0F0
		dd offset sub_68F4A120
		dd offset sub_68F4A1B0
		align 20h
off_68F58080	dd offset sub_68F4B930	; DATA XREF: .rdata:68F57BE8o
		dd offset sub_68F4AAC0
		dd offset sub_68F4A660
		dd offset sub_68F4C2F0
		dd offset sub_68F4C120
		dd offset sub_68F4C220
		dd offset sub_68F4C8F0
		dd offset sub_68F4C9A0
		dd offset sub_68F4C9E0
		dd offset sub_68F4CA30
		dd offset sub_68F4C4B0
		dd offset sub_68F4C7B0
		dd offset sub_68F4C850
		dd offset sub_68F4CA70
		dd offset sub_68F4C420
		dd offset sub_68F4CD50
		dd offset sub_68F4CD00
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 2Dh dup(0)
off_68F58200	dd offset sub_68F4B930	; DATA XREF: .rdata:off_68F57BE4o
		dd offset sub_68F4AAC0
		dd offset sub_68F4A660
		dd offset sub_68F4C2F0
		dd offset sub_68F4C120
		dd offset sub_68F4C220
		dd offset sub_68F4C8F0
		dd offset sub_68F4C9A0
		dd offset sub_68F4C9E0
		dd offset sub_68F4CA30
		dd offset sub_68F4C4B0
		dd offset sub_68F4C7B0
		dd offset sub_68F4C850
		dd offset sub_68F4CA70
		dd offset sub_68F4C420
		dd offset sub_68F4CC90
		dd offset sub_68F4CD00
		dd 1, 3	dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 9 dup(0)
aUtf16		db 'UTF-16',0           ; DATA XREF: sub_68F54220+66o
					; sub_68F543F0+66o ...
		align 10h
byte_68F58380	db 2			; DATA XREF: sub_68F4A040+21r
					; sub_68F4A0A0+23r ...
		db 3, 4, 5
		dd 80706h, 0B0A0900h, 0F0E0D0Ch, 1110h,	2 dup(0)
		dd 13120000h, 1400h, 3 dup(0)
		dd 1615h, 6 dup(0)
		dd 1010000h, 13h dup(1010101h),	17010101h, 3 dup(0)
		dd 0Ah dup(1010101h), 18010101h, 0Ah dup(0)
dword_68F58480	dd 0			; DATA XREF: sub_68F49F90+40r
					; sub_68F49FF0+43r ...
		align 20h
		dd 8 dup(0FFFFFFFFh), 0
		dd 4000000h, 87FFFFFEh,	7FFFFFEh, 2 dup(0)
		dd 2 dup(0FF7FFFFFh), 0FFFFFFFFh, 7FF3FFFFh, 0FFFFFDFEh
		dd 7FFFFFFFh, 2	dup(0FFFFFFFFh), 0FFFFE00Fh, 0FC31FFFFh
		dd 0FFFFFFh, 0
		dd 0FFFF0000h, 2 dup(0FFFFFFFFh), 0F80001FFh, 3, 5 dup(0)
		dd 0FFFFD740h, 0FFFFFFFBh, 547F7FFFh, 0FFFFDh, 0FFFFDFFEh
		dd 0FFFFFFFFh, 0DFFEFFFFh, 0FFFFFFFFh, 0FFFF0003h, 0FFFFFFFFh
		dd 0FFFF199Fh, 33FCFFFh, 0
		dd 0FFFE0000h, 27FFFFFh, 0FFFFFFFEh, 7Fh, 0
		dd 0FFFF0000h, 707FFh, 0
		dd 7FFFFFEh, 7FEh, 0FFFE0000h, 0FFFFFFFFh, 7CFFFFFFh, 2F7FFFh
		dd 60h,	0FFFFFFE0h, 23FFFFFFh, 0FF000000h, 3, 0FFF99FE0h
		dd 3C5FDFFh, 0B0000000h, 30003h, 0FFF987E0h, 36DFDFFh
		dd 5E000000h, 1C0000h, 0FFFBAFE0h, 23EDFDFFh, 0
		dd 1, 0FFF99FE0h, 23CDFDFFh, 0B0000000h, 3, 0D63DC7E0h
		dd 3BFC718h, 2 dup(0)
		dd 0FFFDDFE0h, 3EFFDFFh, 0
		dd 3, 0FFFDDFE0h, 3EFFDFFh, 40000000h, 3, 0FFFDDFE0h, 3FFFDFFh
		dd 0
		dd 3, 4	dup(0)
		dd 0FFFFFFFEh, 0D7FFFh,	3Fh, 0
		dd 0FEF02596h, 200D6CAEh, 1Fh, 3 dup(0)
		dd 0FFFFFEFFh, 3FFh, 9 dup(0)
		dd 0FFFFFFFFh, 0FFFF003Fh, 7FFFFFh, 7DAEDh, 50000000h
		dd 82315001h, 2C62ABh, 40000000h, 0F580C900h, 7, 2010800h
		dd 4 dup(0FFFFFFFFh), 0FFFFFFFh, 2 dup(0FFFFFFFFh), 3FFFFFFh
		dd 3F3FFFFFh, 0FFFFFFFFh, 0AAFF3F3Fh, 3FFFFFFFh, 0FFFFFFFFh
		dd 5FDFFFFFh, 0FCF1FDCh, 1FDC1FFFh, 0
		dd 4C40h, 2 dup(0)
		dd 7, 3	dup(0)
		dd 80h,	3FEh, 0FFFFFFFEh, 0FFFFFFFFh, 1FFFFFh, 0FFFFFFFEh
		dd 0FFFFFFFFh, 7FFFFFFh, 0FFFFFFE0h, 1FFFh, 6 dup(0)
		dd 5 dup(0FFFFFFFFh), 3Fh, 2 dup(0)
		dd 5 dup(0FFFFFFFFh), 0Fh, 3 dup(0)
		dd 7FF6000h, 87FFFFFEh,	7FFFFFEh, 0
		dd 800000h, 2 dup(0FF7FFFFFh), 0FFFFFFh, 0
		dd 0FFFF0000h, 2 dup(0FFFFFFFFh), 0F80001FFh, 30003h, 0
		dd 2 dup(0FFFFFFFFh), 3Fh, 3, 0FFFFD7C0h, 0FFFFFFFBh, 547F7FFFh
		dd 0FFFFDh, 0FFFFDFFEh,	0FFFFFFFFh, 0DFFEFFFFh,	0FFFFFFFFh
		dd 0FFFF007Bh, 0FFFFFFFFh, 0FFFF199Fh, 33FCFFFh, 0
		dd 0FFFE0000h, 27FFFFFh, 0FFFFFFFEh, 0FFFE007Fh, 0BBFFFFFBh
		dd 0FFFF0016h, 707FFh, 0
		dd 7FFFFFEh, 7FFFFh, 0FFFF03FFh, 0FFFFFFFFh, 7CFFFFFFh
		dd 0FFEF7FFFh, 3FF3DFFh, 0FFFFFFEEh, 0F3FFFFFFh, 0FF1E3FFFh
		dd 0FFCFh, 0FFF99FEEh, 0D3C5FDFFh, 0B080399Fh, 3FFCFh
		dd 0FFF987E4h, 0D36DFDFFh, 5E003987h, 1FFFC0h, 0FFFBAFEEh
		dd 0F3EDFDFFh, 3BBFh, 0FFC1h, 0FFF99FEEh, 0F3CDFDFFh, 0B0C0398Fh
		dd 0FFC3h, 0D63DC7ECh, 0C3BFC718h, 803DC7h, 0FF80h, 0FFFDDFEEh
		dd 0C3EFFDFFh, 603DDFh,	0FFC3h,	0FFFDDFECh, 0C3EFFDFFh
		dd 40603DDFh, 0FFC3h, 0FFFDDFECh, 0C3FFFDFFh, 803DCFh
		dd 0FFC3h, 4 dup(0)
		dd 0FFFFFFFEh, 7FF7FFFh, 3FF7FFFh, 0
		dd 0FEF02596h, 3BFF6CAEh, 3FF3F5Fh, 0
		dd 3000000h, 0C2A003FFh, 0FFFFFEFFh, 0FFFE03FFh, 0FEBF0FDFh
		dd 2FE3FFFh, 8 dup(0)
		dd 1FFF0000h, 2, 0A0h, 3EFFFEh,	0FFFFFFFEh, 0FFFFFFFFh
		dd 661FFFFFh, 0FFFFFFFEh, 0FFFFFFFFh, 77FFFFFFh
byte_68F58980	db 19h			; DATA XREF: sub_68F49F90+21r
					; sub_68F49FF0+23r ...
		db 3, 1Ah, 1Bh
		dd 1E1D1Ch, 21201F00h, 25242322h, 1110h, 2 dup(0)
		dd 13120000h, 1426h, 3 dup(0)
		dd 1627h, 6 dup(0)
		dd 1010000h, 13h dup(1010101h),	17010101h, 3 dup(0)
		dd 0Ah dup(1010101h), 18010101h, 0Ah dup(0)
off_68F58A80	db 30h			; DATA XREF: sub_68F53C10:loc_68F53C20r
					; .rdata:off_68F59090o
		db 0B9h, 0F4h, 68h
		dd offset sub_68F4AAC0
		dd offset sub_68F4A660
		dd offset sub_68F4C2F0
		dd offset sub_68F4C120
		dd offset sub_68F4C220
		dd offset sub_68F4C8F0
		dd offset sub_68F4C9A0
		dd offset sub_68F4C9E0
		dd offset sub_68F4CA30
		dd offset sub_68F4C4B0
		dd offset sub_68F4C7B0
		dd offset sub_68F4C850
		dd offset sub_68F4CA70
		dd offset sub_68F4C420
		dd offset sub_68F4CC90
		dd offset sub_68F4CD00
		dd 1, 0
byte_68F58ACC	db 0			; DATA XREF: sub_68F4C750:loc_68F4C790r
					; sub_68F53C10:loc_68F53C3Dr ...
		align 10h
		dd 0
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 9 dup(0)
aUtf16le	db 'UTF-16LE',0         ; DATA XREF: .rdata:68F5C20Co
aUtf16be	db 'UTF-16BE',0         ; DATA XREF: .rdata:68F5C208o
aUtf8		db 'UTF-8',0            ; DATA XREF: .rdata:68F5C200o
aUsAscii	db 'US-ASCII',0         ; DATA XREF: .rdata:68F5C1FCo
aIso88591	db 'ISO-8859-1',0       ; DATA XREF: .rdata:off_68F5C1F8o
		align 10h
off_68F58C20	dd offset sub_68F4B930	; DATA XREF: sub_68F53330+3o
					; .rdata:68F59098o ...
		dd offset sub_68F4AAC0
		dd offset sub_68F4A660
		dd offset sub_68F4C2F0
		dd offset sub_68F4C120
		dd offset sub_68F4C220
		dd offset sub_68F4C8F0
		dd offset sub_68F4C9A0
		dd offset sub_68F4C9E0
		dd offset sub_68F4CA30
		dd offset sub_68F4C4B0
		dd offset sub_68F4C7B0
		dd offset sub_68F4C850
		dd offset sub_68F4CA70
		dd offset sub_68F4C420
		dd offset sub_68F4CB00
		dd offset sub_68F4CB60
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 10h dup(8080808h), 8 dup(5050505h)
		dd 4 dup(6060606h), 7070707h, 7, 0
		dd 1010000h
		dd offset sub_68F49F90
		dd offset sub_68F49FF0
		dd offset sub_68F49F80
		dd offset sub_68F4A040
		dd offset sub_68F4A0A0
		dd offset sub_68F49F80
		dd offset sub_68F4A0F0
		dd offset sub_68F4A120
		dd offset sub_68F4A1B0
		align 20h
off_68F58DA0	dd offset sub_68F4EDB0	; DATA XREF: .text:68F54351o
		dd offset sub_68F4DA70
		dd offset sub_68F4D610
		dd offset sub_68F4F930
		dd offset sub_68F4F6C0
		dd offset sub_68F4F7F0
		dd offset sub_68F4FFC0
		dd offset sub_68F500C0
		dd offset sub_68F50110
		dd offset sub_68F50190
		dd offset sub_68F4FB40
		dd offset sub_68F4FDD0
		dd offset sub_68F4FE90
		dd offset sub_68F501E0
		dd offset sub_68F4FA70
		dd offset sub_68F4CE00
		dd offset sub_68F4CF80
		dd 2, 100h, 2 dup(0)
		dd 0A1500h, 1500h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
off_68F58F20	dd offset sub_68F4B930	; DATA XREF: sub_68F54340+1o
		dd offset sub_68F4AAC0
		dd offset sub_68F4A660
		dd offset sub_68F4C2F0
		dd offset sub_68F4C120
		dd offset sub_68F4C220
		dd offset sub_68F4C8F0
		dd offset sub_68F4C9A0
		dd offset sub_68F4C9E0
		dd offset sub_68F4CA30
		dd offset sub_68F4C4B0
		dd offset sub_68F4C7B0
		dd offset sub_68F4C850
		dd offset sub_68F4CA70
		dd offset sub_68F4C420
		dd offset sub_68F4CB00
		dd offset sub_68F4CB60
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 1500h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12171919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 10h dup(8080808h), 8 dup(5050505h)
		dd 4 dup(6060606h), 7070707h, 7, 0
		dd 1010000h
		dd offset sub_68F49F90
		dd offset sub_68F49FF0
		dd offset sub_68F49F80
		dd offset sub_68F4A040
		dd offset sub_68F4A0A0
		dd offset sub_68F49F80
		dd offset sub_68F4A0F0
		dd offset sub_68F4A120
		dd offset sub_68F4A1B0
off_68F59090	dd offset off_68F58A80	; DATA XREF: sub_68F54190+1o
					; sub_68F541B0+1o ...
		dd offset off_68F593C0
		dd offset off_68F58C20
		dd offset off_68F59240
		dd offset off_68F59240
		dd offset off_68F590C0
		dd offset off_68F58C20
		align 20h
off_68F590C0	dd offset sub_68F4EDB0	; DATA XREF: .rdata:68F590A4o
		dd offset sub_68F4DA70
		dd offset sub_68F4D610
		dd offset sub_68F4F930
		dd offset sub_68F4F6C0
		dd offset sub_68F4F7F0
		dd offset sub_68F4FFC0
		dd offset sub_68F500C0
		dd offset sub_68F50110
		dd offset sub_68F50190
		dd offset sub_68F4FB40
		dd offset sub_68F4FDD0
		dd offset sub_68F4FE90
		dd offset sub_68F501E0
		dd offset sub_68F4FA70
		dd offset sub_68F4CE00
		dd offset sub_68F4CF80
		dd 2, 100h, 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
off_68F59240	dd offset sub_68F51E50	; DATA XREF: .rdata:68F5909Co
					; .rdata:68F590A0o
		dd offset sub_68F50B00
		dd offset sub_68F50690
		dd offset sub_68F52970
		dd offset sub_68F52700
		dd offset sub_68F52830
		dd offset sub_68F53010
		dd offset sub_68F53100
		dd offset sub_68F53150
		dd offset sub_68F531D0
		dd offset sub_68F52B80
		dd offset sub_68F52E10
		dd offset sub_68F52EE0
		dd offset sub_68F53220
		dd offset sub_68F52AB0
		dd offset sub_68F4D010
		dd offset sub_68F4D190
		dd 2, 3	dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
off_68F593C0	dd offset sub_68F4B930	; DATA XREF: .rdata:68F59094o
		dd offset sub_68F4AAC0
		dd offset sub_68F4A660
		dd offset sub_68F4C2F0
		dd offset sub_68F4C120
		dd offset sub_68F4C220
		dd offset sub_68F4C8F0
		dd offset sub_68F4C9A0
		dd offset sub_68F4C9E0
		dd offset sub_68F4CA30
		dd offset sub_68F4C4B0
		dd offset sub_68F4C7B0
		dd offset sub_68F4C850
		dd offset sub_68F4CA70
		dd offset sub_68F4C420
		dd offset sub_68F4CD50
		dd offset sub_68F4CD00
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 900h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 2Dh dup(0)
off_68F59540	dd offset sub_68F4EDB0	; DATA XREF: .text:68F54181o
		dd offset sub_68F4DA70
		dd offset sub_68F4D610
		dd offset sub_68F4F930
		dd offset sub_68F4F6C0
		dd offset sub_68F4F7F0
		dd offset sub_68F4FFC0
		dd offset sub_68F500C0
		dd offset sub_68F50110
		dd offset sub_68F50190
		dd offset sub_68F4FB40
		dd offset sub_68F4FDD0
		dd offset sub_68F4FE90
		dd offset sub_68F501E0
		dd offset sub_68F4FA70
		dd offset sub_68F4CE00
		dd offset sub_68F4CF80
		dd 2, 100h, 2 dup(0)
		dd 0A1500h, 1500h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 0Ah dup(1C1C1C1Ch), 1C161C1Ch
		dd 2 dup(1C1C1C1Ch), 1A1C161Ch,	1C161C1Ch, 1C1C1C1Ch, 5	dup(16161616h)
		dd 1C161616h, 7	dup(16161616h),	1C161616h, 2 dup(16161616h)
		dd 0Dh dup(0)
off_68F596C0	dd offset sub_68F4B930	; DATA XREF: sub_68F54170+1o
		dd offset sub_68F4AAC0
		dd offset sub_68F4A660
		dd offset sub_68F4C2F0
		dd offset sub_68F4C120
		dd offset sub_68F4C220
		dd offset sub_68F4C8F0
		dd offset sub_68F4C9A0
		dd offset sub_68F4C9E0
		dd offset sub_68F4CA30
		dd offset sub_68F4C4B0
		dd offset sub_68F4C7B0
		dd offset sub_68F4C850
		dd offset sub_68F4CA70
		dd offset sub_68F4C420
		dd offset sub_68F4CB00
		dd offset sub_68F4CB60
		dd 2 dup(1), 2 dup(0)
		dd 0A1500h, 1500h, 4 dup(0)
		dd 130C1015h, 0D031E1Ch, 2221201Fh, 111A1B23h, 2 dup(19191919h)
		dd 12161919h, 0F0B0E02h, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 14161616h, 161C041Ch, 1818181Ch, 16181818h, 4 dup(16161616h)
		dd 1C161616h, 1C1C1C24h, 10h dup(8080808h), 8 dup(5050505h)
		dd 4 dup(6060606h), 7070707h, 7, 0
		dd 1010000h
		dd offset sub_68F49F90
		dd offset sub_68F49FF0
		dd offset sub_68F49F80
		dd offset sub_68F4A040
		dd offset sub_68F4A0A0
		dd offset sub_68F49F80
		dd offset sub_68F4A0F0
		dd offset sub_68F4A120
		dd offset sub_68F4A1B0
off_68F59830	dd offset loc_68F4A27C	; DATA XREF: sub_68F4A230+45r
		dd offset loc_68F4A27C	; jump table for switch	statement
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A2E8
		dd offset loc_68F4A2C2
		dd offset loc_68F4A283
		dd offset loc_68F4A27C
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A263
		dd offset loc_68F4A30C
off_68F598A0	dd offset loc_68F4A4D2	; DATA XREF: sub_68F4A3F0+32r
		dd offset loc_68F4A4AE	; jump table for switch	statement
		dd offset loc_68F4A486
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A466
		dd offset loc_68F4A450
		dd offset loc_68F4A466
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
off_68F59904	dd offset loc_68F4A59D	; DATA XREF: sub_68F4A3F0+8Fr
		dd offset loc_68F4A57E	; jump table for switch	statement
		dd offset loc_68F4A55F
		dd offset loc_68F4A450
		dd offset loc_68F4A429
		dd offset loc_68F4A429
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A51C
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A450
		dd offset loc_68F4A429
		dd offset loc_68F4A466
		dd offset loc_68F4A450
		dd offset loc_68F4A466
		dd offset loc_68F4A466
		dd offset loc_68F4A466
		dd offset loc_68F4A466
		dd offset loc_68F4A450
		dd offset loc_68F4A450
off_68F59968	dd offset loc_68F4A5BA	; DATA XREF: sub_68F4A3F0+125r
		dd offset loc_68F4A5BA	; jump table for switch	statement
		dd offset loc_68F4A4FF
		dd offset loc_68F4A4FF
		dd offset loc_68F4A4FF
		dd offset loc_68F4A61F
		dd offset loc_68F4A5F9
		dd offset loc_68F4A5D7
		dd offset loc_68F4A5BA
		dd offset loc_68F4A4FF
		dd offset loc_68F4A4FF
		dd offset loc_68F4A4FF
		dd offset loc_68F4A4FF
		dd offset loc_68F4A4FF
		dd offset loc_68F4A4FF
		dd offset loc_68F4A5C4
off_68F599A8	dd offset loc_68F4A6E0	; DATA XREF: sub_68F4A660+46r
		dd offset loc_68F4A6E0	; jump table for switch	statement
		dd offset loc_68F4A690
		dd offset loc_68F4A690
		dd offset loc_68F4A6E0
		dd offset loc_68F4A721
		dd offset loc_68F4A6B7
		dd offset loc_68F4A6F4
		dd offset loc_68F4A6E0
		dd offset loc_68F4A6E0
		dd offset loc_68F4A6E0
off_68F599D4	dd offset loc_68F4A768	; DATA XREF: sub_68F4A660:loc_68F4A6B0r
		dd offset loc_68F4A768	; jump table for switch	statement
		dd offset loc_68F4A690
		dd offset loc_68F4A690
		dd offset loc_68F4A816
		dd offset loc_68F4A7EA
		dd offset loc_68F4A741
		dd offset loc_68F4A7BA
		dd offset loc_68F4A768
		dd offset loc_68F4A779
		dd offset loc_68F4A7AB
off_68F59A00	dd offset loc_68F4A963	; DATA XREF: sub_68F4A860+2Fr
		dd offset loc_68F4A8D6	; jump table for switch	statement
		dd offset loc_68F4A896
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A930
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A907
		dd offset loc_68F4A8C0
		dd offset loc_68F4A907
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A8C0
		dd offset loc_68F4A900
off_68F59A64	dd offset loc_68F4A9F3	; DATA XREF: sub_68F4A860+C9r
		dd offset loc_68F4A9C9	; jump table for switch	statement
		dd offset loc_68F4A99F
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A98D
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A900
		dd offset loc_68F4A907
		dd offset loc_68F4A900
		dd offset loc_68F4A907
		dd offset loc_68F4A907
		dd offset loc_68F4A907
		dd offset loc_68F4A907
		dd offset loc_68F4A900
		dd offset loc_68F4A8C0
byte_68F59AC8	db 43h			; DATA XREF: sub_68F4AAC0:loc_68F4B170r
aData		db 'DATA[',0
		align 10h
off_68F59AD0	dd offset loc_68F4AB70	; DATA XREF: sub_68F4AAC0+46r
		dd offset loc_68F4AB70	; jump table for switch	statement
		dd offset loc_68F4AB70
		dd offset loc_68F4AB70
		dd offset loc_68F4ABDD
		dd offset loc_68F4ABB5
		dd offset loc_68F4AB47
		dd offset loc_68F4AB84
		dd offset loc_68F4AB70
		dd offset loc_68F4AB70
		dd offset loc_68F4AB70
off_68F59AFC	dd offset loc_68F4AC6F	; DATA XREF: sub_68F4AAC0:loc_68F4AB10r
		dd offset loc_68F4AC6F	; jump table for switch	statement
		dd offset loc_68F4AD33
		dd offset loc_68F4AD18
		dd offset loc_68F4ACED
		dd offset loc_68F4AC4A
		dd offset loc_68F4ABF1
		dd offset loc_68F4ACBA
		dd offset loc_68F4AC6F
		dd offset loc_68F4AC78
		dd offset loc_68F4ACAB
off_68F59B28	dd offset loc_68F4AE07	; DATA XREF: sub_68F4AAC0+297r
		dd offset loc_68F4AE8E	; jump table for switch	statement
		dd offset loc_68F4AE5B
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4AF13
		dd offset loc_68F4AECC
		dd offset loc_68F4AF2F
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4AEC4
		dd offset loc_68F4ADC3
		dd offset loc_68F4AEC4
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADC3
		dd offset loc_68F4ADF8
off_68F59B8C	dd offset loc_68F4AFC7	; DATA XREF: sub_68F4AAC0+394r
		dd offset loc_68F4AF96	; jump table for switch	statement
		dd offset loc_68F4B06A
		dd offset loc_68F4AF87
		dd offset loc_68F4B02D
		dd offset loc_68F4B02D
		dd offset loc_68F4B057
		dd offset loc_68F4AF87
		dd offset loc_68F4AF87
		dd offset loc_68F4AF87
		dd offset loc_68F4AF87
		dd offset loc_68F4AF87
		dd offset loc_68F4AB17
		dd offset loc_68F4AF87
		dd offset loc_68F4AF87
		dd offset loc_68F4AF87
		dd offset loc_68F4B02D
		dd offset loc_68F4AFF2
		dd offset loc_68F4AFFA
		dd offset loc_68F4AFF2
		dd offset loc_68F4AFF2
		dd offset loc_68F4AFF2
		dd offset loc_68F4AFF2
		dd offset loc_68F4AF87
		dd offset loc_68F4AF87
off_68F59BF0	dd offset loc_68F4B120	; DATA XREF: sub_68F4AAC0+498r
		dd offset loc_68F4B0F0	; jump table for switch	statement
		dd offset loc_68F4B0BF
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4B09B
		dd offset loc_68F4ACE1
		dd offset loc_68F4B09B
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4ACE1
		dd offset loc_68F4AD80
off_68F59C54	dd offset loc_68F4ADD2	; DATA XREF: sub_68F4AAC0+566r
		dd offset loc_68F4AD9B	; jump table for switch	statement
		dd offset loc_68F4AF5F
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4AFF2
		dd offset loc_68F4ADF8
		dd offset loc_68F4AFF2
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4AF87
off_68F59CB8	dd offset loc_68F4B61A	; DATA XREF: sub_68F4AAC0+590r
		dd offset loc_68F4B5E4	; jump table for switch	statement
		dd offset loc_68F4B2C3
		dd offset loc_68F4ADF8
		dd offset loc_68F4B02D
		dd offset loc_68F4B02D
		dd offset loc_68F4B057
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4AB17
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4B02D
		dd offset loc_68F4B28E
		dd offset loc_68F4ADF8
		dd offset loc_68F4B28E
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4ADF8
		dd offset loc_68F4AF87
off_68F59D1C	dd offset loc_68F4B268	; DATA XREF: sub_68F4AAC0+5F8r
		dd offset loc_68F4AD5E	; jump table for switch	statement
		dd offset loc_68F4B240
		dd offset loc_68F4AD80
		dd offset loc_68F4B1A0
		dd offset loc_68F4B1A0
		dd offset loc_68F4B236
		dd offset loc_68F4AD80
		dd offset loc_68F4AD80
		dd offset loc_68F4AD80
		dd offset loc_68F4AD80
		dd offset loc_68F4AD80
		dd offset loc_68F4AD80
		dd offset loc_68F4AD80
		dd offset loc_68F4AD80
		dd offset loc_68F4AD80
		dd offset loc_68F4B1A0
		dd offset loc_68F4B09B
		dd offset loc_68F4B09B
		dd offset loc_68F4B09B
		dd offset loc_68F4B09B
		dd offset loc_68F4B09B
		dd offset loc_68F4B09B
		dd offset loc_68F4AD80
		dd offset loc_68F4AC6F
off_68F59D80	dd offset loc_68F4B485	; DATA XREF: sub_68F4AAC0+7FCr
		dd offset loc_68F4B46A	; jump table for switch	statement
		dd offset loc_68F4B427
		dd offset loc_68F4B5C6
		dd offset loc_68F4B337
		dd offset loc_68F4B337
		dd offset loc_68F4B5C6
		dd offset loc_68F4B5C6
		dd offset loc_68F4B5C6
		dd offset loc_68F4B1C3
		dd offset loc_68F4B5C6
		dd offset loc_68F4B5C6
		dd offset loc_68F4B5C6
		dd offset loc_68F4B5C6
		dd offset loc_68F4B5C6
		dd offset loc_68F4B5C6
		dd offset loc_68F4B337
		dd offset loc_68F4B2F6
		dd offset loc_68F4B2FC
		dd offset loc_68F4B2F6
		dd offset loc_68F4B2F6
		dd offset loc_68F4B2F6
		dd offset loc_68F4B2F6
		dd offset loc_68F4B5C6
		dd offset loc_68F4B5C6
off_68F59DE4	dd offset loc_68F4B3E1	; DATA XREF: sub_68F4AAC0+870r
		dd offset loc_68F4B3AF	; jump table for switch	statement
		dd offset loc_68F4B38A
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B382
		dd offset loc_68F4B404
		dd offset loc_68F4B382
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B378
off_68F59E48	dd offset loc_68F4B5C6	; DATA XREF: sub_68F4AAC0+9A3r
		dd offset loc_68F4B5C6	; jump table for switch	statement
		dd offset loc_68F4B20C
		dd offset loc_68F4B523
		dd offset loc_68F4B442
		dd offset loc_68F4B4F8
		dd offset loc_68F4B4CB
		dd offset loc_68F4B49E
		dd offset loc_68F4B5C6
off_68F59E6C	dd offset loc_68F4B581	; DATA XREF: sub_68F4AAC0+AA7r
		dd offset loc_68F4B581	; jump table for switch	statement
		dd offset loc_68F4B5D0
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B5AC
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B404
		dd offset loc_68F4B581
off_68F59EA0	dd offset loc_68F4B3E1	; DATA XREF: sub_68F4AAC0+AE5r
		dd offset loc_68F4B3AF	; jump table for switch	statement
		dd offset loc_68F4B38A
		dd offset loc_68F4B378
		dd offset loc_68F4B581
		dd offset loc_68F4B581
		dd offset loc_68F4B5D0
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B5AC
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B581
		dd offset loc_68F4B382
		dd offset loc_68F4B378
		dd offset loc_68F4B382
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B378
		dd offset loc_68F4B378
off_68F59F04	dd offset loc_68F4B740	; DATA XREF: sub_68F4B670+2Fr
		dd offset loc_68F4B6E6	; jump table for switch	statement
		dd offset loc_68F4B6A6
		dd offset loc_68F4B6D0
		dd offset loc_68F4B766
		dd offset loc_68F4B766
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B766
		dd offset loc_68F4B717
		dd offset loc_68F4B6D0
		dd offset loc_68F4B717
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B6D0
		dd offset loc_68F4B710
		dd offset loc_68F4B766
off_68F59F6C	dd offset loc_68F4B7D3	; DATA XREF: sub_68F4B670+C9r
		dd offset loc_68F4B7AD	; jump table for switch	statement
		dd offset loc_68F4B787
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B775
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B710
		dd offset loc_68F4B717
		dd offset loc_68F4B710
		dd offset loc_68F4B717
		dd offset loc_68F4B717
		dd offset loc_68F4B717
		dd offset loc_68F4B717
		dd offset loc_68F4B710
		dd offset loc_68F4B6D0
off_68F59FD0	dd offset loc_68F4B854	; DATA XREF: sub_68F4B810+25r
		dd offset loc_68F4B854	; jump table for switch	statement
		dd offset loc_68F4B840
		dd offset loc_68F4B840
		dd offset loc_68F4B840
		dd offset loc_68F4B8AE
		dd offset loc_68F4B888
		dd offset loc_68F4B865
		dd offset loc_68F4B854
		dd offset loc_68F4B840
		dd offset loc_68F4B840
		dd offset loc_68F4B840
		dd offset loc_68F4B8CE
		dd offset loc_68F4B8CE
off_68F5A008	dd offset loc_68F4B990	; DATA XREF: sub_68F4B930+34r
		dd offset loc_68F4B990	; jump table for switch	statement
		dd offset loc_68F4BB65
		dd offset loc_68F4B990
		dd offset loc_68F4BBC9
		dd offset loc_68F4BA1E
		dd offset loc_68F4BA4F
		dd offset loc_68F4BA7B
		dd offset loc_68F4B990
		dd offset loc_68F4BAB9
		dd offset loc_68F4B9AB
		dd offset loc_68F4BAA7
		dd offset loc_68F4BB29
		dd offset loc_68F4BAD3
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4BAFA
		dd offset loc_68F4B9DF
		dd offset loc_68F4B9AB
		dd offset loc_68F4B9EE
		dd offset loc_68F4BA15
		dd offset loc_68F4B9EE
		dd offset loc_68F4BA15
		dd offset loc_68F4BA15
		dd offset loc_68F4BA15
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4BC3C
		dd offset loc_68F4BC05
		dd offset loc_68F4BC17
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4BB41
		dd offset loc_68F4BB53
off_68F5A09C	dd offset loc_68F4BCF7	; DATA XREF: sub_68F4B930+DEr
		dd offset loc_68F4BD1F	; jump table for switch	statement
		dd offset loc_68F4BCC4
		dd offset loc_68F4B990
		dd offset loc_68F4BCEA
		dd offset loc_68F4BCEA
		dd offset loc_68F4BCEA
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4BCAC
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4BCEA
		dd offset loc_68F4BCEA
		dd offset loc_68F4B9F5
		dd offset loc_68F4BC8B
		dd offset loc_68F4B9F5
		dd offset loc_68F4B9F5
		dd offset loc_68F4B9F5
		dd offset loc_68F4B9F5
		dd offset loc_68F4B990
		dd offset loc_68F4B990
		dd offset loc_68F4BCEA
		dd offset loc_68F4B990
		dd offset loc_68F4BCEA
		dd offset loc_68F4BC6F
		dd offset loc_68F4BC5B
		dd offset loc_68F4BCEA
		dd offset loc_68F4BCEA
off_68F5A11C	dd offset loc_68F4BE28	; DATA XREF: sub_68F4B930+1F2r
		dd offset loc_68F4BDC3	; jump table for switch	statement
		dd offset loc_68F4BE59
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDFD
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDFD
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDB6
		dd offset loc_68F4BDF0
off_68F5A180	dd offset loc_68F4BD7F	; DATA XREF: sub_68F4B930+305r
		dd offset loc_68F4BD7F	; jump table for switch	statement
		dd offset loc_68F4BD7F
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BD6D
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BD7F
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BC65
		dd offset loc_68F4BD7F
		dd offset loc_68F4BD5B
		dd offset loc_68F4BD49
		dd offset loc_68F4BD7F
		dd offset loc_68F4BD7F
off_68F5A1F0	dd offset loc_68F4BEDE	; DATA XREF: sub_68F4B930+4F1r
		dd offset loc_68F4BD8E	; jump table for switch	statement
		dd offset loc_68F4BEBC
		dd offset loc_68F4BDF0
		dd offset loc_68F4BEAA
		dd offset loc_68F4BEAA
		dd offset loc_68F4BEAA
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BEAA
		dd offset loc_68F4BDFD
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDFD
		dd offset loc_68F4BDFD
		dd offset loc_68F4BDFD
		dd offset loc_68F4BDFD
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDB6
		dd offset loc_68F4BEAA
		dd offset loc_68F4BDF0
		dd offset loc_68F4BEAA
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BDF0
		dd offset loc_68F4BEAA
off_68F5A270	dd offset loc_68F4C02E	; DATA XREF: sub_68F4B930+6CDr
		dd offset loc_68F4C004	; jump table for switch	statement
		dd offset loc_68F4B96B
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4BCA0
		dd offset loc_68F4B9F5
		dd offset loc_68F4BCA0
		dd offset loc_68F4B9F5
		dd offset loc_68F4B9F5
		dd offset loc_68F4B9F5
		dd offset loc_68F4B9F5
		dd offset loc_68F4BCA0
		dd offset loc_68F4B990
off_68F5A2D4	dd offset loc_68F4C160	; DATA XREF: sub_68F4C120+35r
		dd offset loc_68F4C160	; jump table for switch	statement
		dd offset loc_68F4C1AB
		dd offset loc_68F4C18B
		dd offset loc_68F4C160
		dd offset loc_68F4C1BE
		dd offset loc_68F4C1C3
		dd offset loc_68F4C1C8
		dd offset loc_68F4C160
		dd offset loc_68F4C1CD
		dd offset loc_68F4C201
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C160
		dd offset loc_68F4C17B
off_68F5A32C	dd offset loc_68F4C28C	; DATA XREF: sub_68F4C220+30r
		dd offset loc_68F4C257	; jump table for switch	statement
		dd offset loc_68F4C287
		dd offset loc_68F4C2A5
		dd offset loc_68F4C2AA
		dd offset loc_68F4C257
		dd offset loc_68F4C2AF
		dd offset loc_68F4C2DC
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C257
		dd offset loc_68F4C26B
off_68F5A39C	dd offset loc_68F4C352	; DATA XREF: sub_68F4C2F0+2Ar
		dd offset loc_68F4C352	; jump table for switch	statement
		dd offset loc_68F4C321
		dd offset loc_68F4C340
		dd offset loc_68F4C3C6
		dd offset loc_68F4C3A6
		dd offset loc_68F4C384
		dd offset loc_68F4C361
		dd offset loc_68F4C352
off_68F5A3C0	dd offset loc_68F4C67D	; DATA XREF: sub_68F4C4B0+39r
		dd offset loc_68F4C570	; jump table for switch	statement
		dd offset loc_68F4C650
		dd offset loc_68F4C623
		dd offset loc_68F4C5F6
		dd offset loc_68F4C570
		dd offset loc_68F4C5BD
		dd offset loc_68F4C5BD
		dd offset loc_68F4C57A
		dd offset loc_68F4C58A
		dd offset loc_68F4C4F0
		dd offset loc_68F4C570
		dd offset loc_68F4C570
		dd offset loc_68F4C570
		dd offset loc_68F4C57A
		dd offset loc_68F4C570
		dd offset loc_68F4C570
		dd offset loc_68F4C570
		dd offset loc_68F4C524
		dd offset loc_68F4C690
		dd offset loc_68F4C570
		dd offset loc_68F4C690
		dd offset loc_68F4C570
		dd offset loc_68F4C570
		dd offset loc_68F4C570
		dd offset loc_68F4C570
		dd offset loc_68F4C690
off_68F5A42C	dd offset loc_68F4C840,	offset loc_68F4C840, offset loc_68F4C840
					; DATA XREF: sub_68F4C7B0+6Cr
		dd offset loc_68F4C840,	offset loc_68F4C840, offset loc_68F4C840 ; jump	table for switch statement
		dd offset loc_68F4C840,	offset loc_68F4C840, offset loc_68F4C840
		dd offset loc_68F4C840,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C82B
		dd offset loc_68F4C82B,	offset loc_68F4C82B, offset loc_68F4C82B
		dd offset loc_68F4C82B,	offset loc_68F4C82B, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C800, offset loc_68F4C800
		dd offset loc_68F4C800,	offset loc_68F4C7EA, offset loc_68F4C7EA
		dd offset loc_68F4C7EA,	offset loc_68F4C7EA, offset loc_68F4C7EA
		dd offset loc_68F4C7EA
off_68F5A508	dd offset loc_68F4C938	; DATA XREF: sub_68F4C8F0+23r
		dd offset loc_68F4C92C	; jump table for switch	statement
		dd offset loc_68F4C920
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C956
		dd offset loc_68F4C990
		dd offset loc_68F4C990
		dd offset loc_68F4C990
		dd offset loc_68F4C990
		dd offset loc_68F4C990
		dd offset loc_68F4C990
		dd offset loc_68F4C956
		dd offset loc_68F4C990
off_68F5A56C	dd offset loc_68F4CA20	; DATA XREF: sub_68F4C9E0+20r
		dd offset loc_68F4CA18	; jump table for switch	statement
		dd offset loc_68F4CA13
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA07
		dd offset loc_68F4CA10
		dd offset loc_68F4CA10
		dd offset loc_68F4CA10
		dd offset loc_68F4CA10
		dd offset loc_68F4CA10
		dd offset loc_68F4CA10
		dd offset loc_68F4CA07
		dd offset loc_68F4CA10
off_68F5A5D0	dd offset loc_68F4CAEF	; DATA XREF: sub_68F4CA70+30r
		dd offset loc_68F4CAE7	; jump table for switch	statement
		dd offset loc_68F4CADF
		dd offset loc_68F4CAB0
		dd offset loc_68F4CABC
		dd offset loc_68F4CAA7
off_68F5A5E8	dd offset loc_68F4CDF0	; DATA XREF: sub_68F4CDA0+10r
		dd offset loc_68F4CDF0	; jump table for switch	statement
		dd offset loc_68F4CDF0
		dd offset loc_68F4CDF0
		dd offset loc_68F4CDE0
		dd offset loc_68F4CDE0
		dd offset loc_68F4CDE0
		dd offset loc_68F4CDE0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDD0
		dd offset loc_68F4CDB7
off_68F5A688	dd offset loc_68F4D244	; DATA XREF: sub_68F4D220+5Fr
		dd offset loc_68F4D244	; jump table for switch	statement
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D2F1
		dd offset loc_68F4D2E0
		dd offset loc_68F4D2D2
		dd offset loc_68F4D244
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D260
		dd offset loc_68F4D29A
off_68F5A6F8	dd offset loc_68F4D4B6	; DATA XREF: sub_68F4D3C0:loc_68F4D407r
		dd offset loc_68F4D4C0	; jump table for switch	statement
		dd offset loc_68F4D4A0
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D469
		dd offset loc_68F4D426
		dd offset loc_68F4D469
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D426
		dd offset loc_68F4D43A
off_68F5A75C	dd offset loc_68F4D4B6	; DATA XREF: sub_68F4D3C0+D5r
		dd offset loc_68F4D4C0	; jump table for switch	statement
		dd offset loc_68F4D4A0
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4FE
		dd offset loc_68F4D4FE
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4AC
		dd offset loc_68F4D541
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4FE
		dd offset loc_68F4D469
		dd offset loc_68F4D4AC
		dd offset loc_68F4D469
		dd offset loc_68F4D469
		dd offset loc_68F4D469
		dd offset loc_68F4D469
		dd offset loc_68F4D4AC
		dd offset loc_68F4D4EE
off_68F5A7C0	dd offset loc_68F4D426	; DATA XREF: sub_68F4D3C0+17Ar
		dd offset loc_68F4D426	; jump table for switch	statement
		dd offset loc_68F4D516
		dd offset loc_68F4D516
		dd offset loc_68F4D516
		dd offset loc_68F4D5D2
		dd offset loc_68F4D5C1
		dd offset loc_68F4D5B0
		dd offset loc_68F4D426
		dd offset loc_68F4D516
		dd offset loc_68F4D516
		dd offset loc_68F4D516
		dd offset loc_68F4D516
		dd offset loc_68F4D516
		dd offset loc_68F4D516
		dd offset loc_68F4D590
off_68F5A800	dd offset loc_68F4D760	; DATA XREF: sub_68F4D610+39r
		dd offset loc_68F4D760	; jump table for switch	statement
		dd offset loc_68F4D660
		dd offset loc_68F4D660
		dd offset loc_68F4D786
		dd offset loc_68F4D650
		dd offset loc_68F4D6FF
		dd offset loc_68F4D76C
		dd offset loc_68F4D760
		dd offset loc_68F4D72C
		dd offset loc_68F4D718
off_68F5A82C	dd offset loc_68F4D6C0	; DATA XREF: sub_68F4D610+6Cr
		dd offset loc_68F4D6C0	; jump table for switch	statement
		dd offset loc_68F4D660
		dd offset loc_68F4D660
		dd offset loc_68F4D6C0
		dd offset loc_68F4D6ED
		dd offset loc_68F4D6B1
		dd offset loc_68F4D6D1
		dd offset loc_68F4D6C0
		dd offset loc_68F4D6C0
		dd offset loc_68F4D6C0
off_68F5A858	dd offset loc_68F4D900	; DATA XREF: sub_68F4D800:loc_68F4D845r
		dd offset loc_68F4D90A	; jump table for switch	statement
		dd offset loc_68F4D8E6
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D924
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D8AC
		dd offset loc_68F4D869
		dd offset loc_68F4D8AC
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D869
		dd offset loc_68F4D87D
off_68F5A8BC	dd offset loc_68F4D900	; DATA XREF: sub_68F4D800+DFr
		dd offset loc_68F4D90A	; jump table for switch	statement
		dd offset loc_68F4D8E6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D9C7
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8AC
		dd offset loc_68F4D8F6
		dd offset loc_68F4D8AC
		dd offset loc_68F4D8AC
		dd offset loc_68F4D8AC
		dd offset loc_68F4D8AC
		dd offset loc_68F4D8F6
		dd offset loc_68F4D9B7
byte_68F5A920	db 43h			; DATA XREF: sub_68F4DA70+763r
aData_0		db 'DATA[',0
		align 4
off_68F5A928	dd offset loc_68F4DC13	; DATA XREF: sub_68F4DA70:loc_68F4DAACr
		dd offset loc_68F4DC13	; jump table for switch	statement
		dd offset loc_68F4DC99
		dd offset loc_68F4DC79
		dd offset loc_68F4DC34
		dd offset loc_68F4DC1F
		dd offset loc_68F4DBA8
		dd offset loc_68F4DB91
		dd offset loc_68F4DC13
		dd offset loc_68F4DBDA
		dd offset loc_68F4DBC8
off_68F5A954	dd offset loc_68F4DB50	; DATA XREF: sub_68F4DA70+90r
		dd offset loc_68F4DB50	; jump table for switch	statement
		dd offset loc_68F4DB50
		dd offset loc_68F4DB50
		dd offset loc_68F4DB73
		dd offset loc_68F4DB5C
		dd offset loc_68F4DB14
		dd offset loc_68F4DB3A
		dd offset loc_68F4DB50
		dd offset loc_68F4DB50
		dd offset loc_68F4DB50
off_68F5A980	dd offset loc_68F4DDC9	; DATA XREF: sub_68F4DA70+25Cr
		dd offset loc_68F4DDA5	; jump table for switch	statement
		dd offset loc_68F4DE96
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DE78
		dd offset loc_68F4DE2C
		dd offset loc_68F4DDEB
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD1E
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD1E
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD0D
		dd offset loc_68F4DD65
off_68F5A9E4	dd offset loc_68F4E056	; DATA XREF: sub_68F4DA70+2EEr
		dd offset loc_68F4E089	; jump table for switch	statement
		dd offset loc_68F4E032
		dd offset loc_68F4E078
		dd offset loc_68F4DFB7
		dd offset loc_68F4DFB7
		dd offset loc_68F4DF12
		dd offset loc_68F4E078
		dd offset loc_68F4E078
		dd offset loc_68F4E078
		dd offset loc_68F4E078
		dd offset loc_68F4E078
		dd offset loc_68F4DEDD
		dd offset loc_68F4E078
		dd offset loc_68F4E078
		dd offset loc_68F4E078
		dd offset loc_68F4DFB7
		dd offset loc_68F4DED4
		dd offset loc_68F4DF65
		dd offset loc_68F4DED4
		dd offset loc_68F4DED4
		dd offset loc_68F4DED4
		dd offset loc_68F4DED4
		dd offset loc_68F4E078
		dd offset loc_68F4DF29
off_68F5AA48	dd offset loc_68F4E0E9	; DATA XREF: sub_68F4DA70+3B5r
		dd offset loc_68F4E0CB	; jump table for switch	statement
		dd offset loc_68F4E0AD
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DFF7
		dd offset loc_68F4DEC6
		dd offset loc_68F4DFF7
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4DEC6
		dd offset loc_68F4E105
off_68F5AAAC	dd offset loc_68F4E3B9	; DATA XREF: sub_68F4DA70+540r
		dd offset loc_68F4E395	; jump table for switch	statement
		dd offset loc_68F4E371
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4DED4
		dd offset loc_68F4E481
		dd offset loc_68F4DED4
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E481
		dd offset loc_68F4E331
off_68F5AB10	dd offset loc_68F4E49E	; DATA XREF: sub_68F4DA70+580r
		dd offset loc_68F4E7C9	; jump table for switch	statement
		dd offset loc_68F4E7A5
		dd offset loc_68F4E4C0
		dd offset loc_68F4DFB7
		dd offset loc_68F4DFB7
		dd offset loc_68F4DF12
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4DEDD
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4DFB7
		dd offset loc_68F4E4FC
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4FC
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4C0
		dd offset loc_68F4E4D1
off_68F5AB74	dd offset loc_68F4E434	; DATA XREF: sub_68F4DA70+5BBr
		dd offset loc_68F4E416	; jump table for switch	statement
		dd offset loc_68F4E3F8
		dd offset loc_68F4E450
		dd offset loc_68F4E24D
		dd offset loc_68F4E24D
		dd offset loc_68F4E27E
		dd offset loc_68F4E450
		dd offset loc_68F4E450
		dd offset loc_68F4E450
		dd offset loc_68F4E450
		dd offset loc_68F4E450
		dd offset loc_68F4E450
		dd offset loc_68F4E450
		dd offset loc_68F4E450
		dd offset loc_68F4E450
		dd offset loc_68F4E24D
		dd offset loc_68F4DFF7
		dd offset loc_68F4DFF7
		dd offset loc_68F4DFF7
		dd offset loc_68F4DFF7
		dd offset loc_68F4DFF7
		dd offset loc_68F4DFF7
		dd offset loc_68F4E450
		dd offset loc_68F4E2D9
off_68F5ABD8	dd offset loc_68F4E75F	; DATA XREF: sub_68F4DA70+AC5r
		dd offset loc_68F4E741	; jump table for switch	statement
		dd offset loc_68F4E723
		dd offset loc_68F4E77B
		dd offset loc_68F4E585
		dd offset loc_68F4E585
		dd offset loc_68F4E77B
		dd offset loc_68F4E77B
		dd offset loc_68F4E77B
		dd offset loc_68F4E5DC
		dd offset loc_68F4E77B
		dd offset loc_68F4E77B
		dd offset loc_68F4E77B
		dd offset loc_68F4E77B
		dd offset loc_68F4E77B
		dd offset loc_68F4E77B
		dd offset loc_68F4E585
		dd offset loc_68F4E57D
		dd offset loc_68F4E80F
		dd offset loc_68F4E57D
		dd offset loc_68F4E57D
		dd offset loc_68F4E57D
		dd offset loc_68F4E57D
		dd offset loc_68F4E77B
		dd offset loc_68F4E54D
off_68F5AC3C	dd offset loc_68F4E696	; DATA XREF: sub_68F4DA70+C02r
		dd offset loc_68F4E696	; jump table for switch	statement
		dd offset loc_68F4E715
		dd offset loc_68F4E6EF
		dd offset loc_68F4E642
		dd offset loc_68F4E6D8
		dd offset loc_68F4E6B2
		dd offset loc_68F4E6A4
		dd offset loc_68F4E696
off_68F5AC60	dd offset loc_68F4E8C2	; DATA XREF: sub_68F4DA70+DE2r
		dd offset loc_68F4E89E	; jump table for switch	statement
		dd offset loc_68F4E8E4
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E896
		dd offset loc_68F4E919
		dd offset loc_68F4E896
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E919
		dd offset loc_68F4E867
off_68F5ACC4	dd offset loc_68F4E9BB	; DATA XREF: sub_68F4DA70+F31r
		dd offset loc_68F4E9BB	; jump table for switch	statement
		dd offset loc_68F4EB15
		dd offset loc_68F4EB29
		dd offset loc_68F4EB29
		dd offset loc_68F4EB29
		dd offset loc_68F4EB29
		dd offset loc_68F4EB29
		dd offset loc_68F4E9F3
		dd offset loc_68F4EB29
		dd offset loc_68F4EB29
		dd offset loc_68F4EB29
		dd offset loc_68F4E9BB
off_68F5ACF8	dd offset loc_68F4EAC6	; DATA XREF: sub_68F4DA70+F7Cr
		dd offset loc_68F4EAA2	; jump table for switch	statement
		dd offset loc_68F4EA7E
		dd offset loc_68F4EAE8
		dd offset loc_68F4E9BB
		dd offset loc_68F4E9BB
		dd offset loc_68F4EB15
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4E9F3
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4E9BB
		dd offset loc_68F4EA65
		dd offset loc_68F4EAE8
		dd offset loc_68F4EA65
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4EAE8
		dd offset loc_68F4EA33
off_68F5AD5C	dd offset loc_68F4EC67	; DATA XREF: sub_68F4EB60:loc_68F4EBA8r
		dd offset loc_68F4EC5B	; jump table for switch	statement
		dd offset loc_68F4EC46
		dd offset loc_68F4EBD0
		dd offset loc_68F4EC71
		dd offset loc_68F4EC71
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EC71
		dd offset loc_68F4EC10
		dd offset loc_68F4EBD0
		dd offset loc_68F4EC10
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBE1
		dd offset loc_68F4EC71
off_68F5ADC4	dd offset loc_68F4EC67	; DATA XREF: sub_68F4EB60+DFr
		dd offset loc_68F4EC5B	; jump table for switch	statement
		dd offset loc_68F4EC46
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4ECA1
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EBD0
		dd offset loc_68F4EC10
		dd offset loc_68F4EBD0
		dd offset loc_68F4EC10
		dd offset loc_68F4EC10
		dd offset loc_68F4EC10
		dd offset loc_68F4EC10
		dd offset loc_68F4EBD0
		dd offset loc_68F4EC91
off_68F5AE28	dd offset loc_68F4ED69	; DATA XREF: sub_68F4ECC0+2Dr
		dd offset loc_68F4ED69	; jump table for switch	statement
		dd offset loc_68F4ED00
		dd offset loc_68F4ED00
		dd offset loc_68F4ED00
		dd offset loc_68F4ECF4
		dd offset loc_68F4ED81
		dd offset loc_68F4ED70
		dd offset loc_68F4ED69
		dd offset loc_68F4ED00
		dd offset loc_68F4ED00
		dd offset loc_68F4ED00
		dd offset loc_68F4ED21
		dd offset loc_68F4ED21
off_68F5AE60	dd offset loc_68F4EE2B	; DATA XREF: sub_68F4EDB0:loc_68F4EDFAr
		dd offset loc_68F4EE2B	; jump table for switch	statement
		dd offset loc_68F4EE73
		dd offset loc_68F4EE2B
		dd offset loc_68F4EED8
		dd offset loc_68F4EE4F
		dd offset loc_68F4EE60
		dd offset loc_68F4EE3C
		dd offset loc_68F4EE2B
		dd offset loc_68F4EF06
		dd offset loc_68F4F06E
		dd offset loc_68F4EF6B
		dd offset loc_68F4EF7D
		dd offset loc_68F4EFFE
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4F01A
		dd offset loc_68F4F05C
		dd offset loc_68F4F06E
		dd offset loc_68F4F076
		dd offset loc_68F4F0B8
		dd offset loc_68F4F076
		dd offset loc_68F4F0B8
		dd offset loc_68F4F0B8
		dd offset loc_68F4F0B8
		dd offset loc_68F4EE2B
		dd offset loc_68F4F0C1
		dd offset loc_68F4F105
		dd offset loc_68F4EFA0
		dd offset loc_68F4EFB2
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EFEC
		dd offset loc_68F4F120
off_68F5AEF4	dd offset loc_68F4F1F2	; DATA XREF: sub_68F4EDB0+235r
		dd offset loc_68F4F1F2	; jump table for switch	statement
		dd offset loc_68F4F1F2
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4F225
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4F1F2
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4EE2B
		dd offset loc_68F4F1F2
		dd offset loc_68F4F213
		dd offset loc_68F4F201
		dd offset loc_68F4F1F2
		dd offset loc_68F4F1F2
off_68F5AF64	dd offset loc_68F4F237	; DATA XREF: sub_68F4EDB0+2A5r
		dd offset loc_68F4F312	; jump table for switch	statement
		dd offset loc_68F4F2FC
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F283
		dd offset loc_68F4F244
		dd offset loc_68F4F283
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F244
		dd offset loc_68F4F2BF
off_68F5AFC8	dd offset loc_68F4EE4F	; DATA XREF: sub_68F4EDB0+301r
		dd offset loc_68F4EE60	; jump table for switch	statement
		dd offset loc_68F4EE3C
		dd offset loc_68F4EE48
		dd offset loc_68F4F132
		dd offset loc_68F4F132
		dd offset loc_68F4F132
		dd offset loc_68F4EE48
		dd offset loc_68F4EE48
		dd offset loc_68F4EE48
		dd offset loc_68F4F1D6
		dd offset loc_68F4EE48
		dd offset loc_68F4EE48
		dd offset loc_68F4EE48
		dd offset loc_68F4EE48
		dd offset loc_68F4F132
		dd offset loc_68F4F132
		dd offset loc_68F4F07D
		dd offset loc_68F4F1B3
		dd offset loc_68F4F07D
		dd offset loc_68F4F07D
		dd offset loc_68F4F07D
		dd offset loc_68F4F07D
		dd offset loc_68F4EE48
		dd offset loc_68F4F177
		dd offset loc_68F4F132
		dd offset loc_68F4EE48
		dd offset loc_68F4F132
		dd offset loc_68F4F15B
		dd offset loc_68F4F13F
		dd offset loc_68F4F132
		dd offset loc_68F4F132
off_68F5B048	dd offset loc_68F4F334	; DATA XREF: sub_68F4EDB0+508r
		dd offset loc_68F4F369	; jump table for switch	statement
		dd offset loc_68F4F357
		dd offset loc_68F4F2ED
		dd offset loc_68F4F343
		dd offset loc_68F4F343
		dd offset loc_68F4F343
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F343
		dd offset loc_68F4F283
		dd offset loc_68F4F2ED
		dd offset loc_68F4F283
		dd offset loc_68F4F283
		dd offset loc_68F4F283
		dd offset loc_68F4F283
		dd offset loc_68F4F2ED
		dd offset loc_68F4F255
		dd offset loc_68F4F343
		dd offset loc_68F4F2ED
		dd offset loc_68F4F343
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F2ED
		dd offset loc_68F4F343
off_68F5B0C8	dd offset loc_68F4F55F	; DATA XREF: sub_68F4EDB0+74Er
		dd offset loc_68F4F550	; jump table for switch	statement
		dd offset loc_68F4F541
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F1CA
		dd offset loc_68F4F07D
		dd offset loc_68F4F1CA
		dd offset loc_68F4F07D
		dd offset loc_68F4F07D
		dd offset loc_68F4F07D
		dd offset loc_68F4F07D
		dd offset loc_68F4F1CA
		dd offset loc_68F4F505
off_68F5B12C	dd offset loc_68F4F705	; DATA XREF: sub_68F4F6C0+3Er
		dd offset loc_68F4F705	; jump table for switch	statement
		dd offset loc_68F4F75B
		dd offset loc_68F4F73C
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F76A
		dd offset loc_68F4F76F
		dd offset loc_68F4F705
		dd offset loc_68F4F774
		dd offset loc_68F4F7AB
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F705
		dd offset loc_68F4F72D
off_68F5B184	dd offset loc_68F4F898	; DATA XREF: sub_68F4F7F0+4Br
		dd offset loc_68F4F842	; jump table for switch	statement
		dd offset loc_68F4F842
		dd offset loc_68F4F893
		dd offset loc_68F4F8B7
		dd offset loc_68F4F842
		dd offset loc_68F4F8BC
		dd offset loc_68F4F8F3
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F842
		dd offset loc_68F4F86D
off_68F5B1F4	dd offset loc_68F4F9CF	; DATA XREF: sub_68F4F930+49r
		dd offset loc_68F4F9CF	; jump table for switch	statement
		dd offset loc_68F4F980
		dd offset loc_68F4F9B0
		dd offset loc_68F4FA10
		dd offset loc_68F4F9FE
		dd offset loc_68F4F9ED
		dd offset loc_68F4F9DC
		dd offset loc_68F4F9CF
off_68F5B218	dd offset loc_68F4FD34	; DATA XREF: sub_68F4FB40+4Cr
		dd offset loc_68F4FC06	; jump table for switch	statement
		dd offset loc_68F4FBE1
		dd offset loc_68F4FD08
		dd offset loc_68F4FCDC
		dd offset loc_68F4FC06
		dd offset loc_68F4FCA5
		dd offset loc_68F4FCA5
		dd offset loc_68F4FC63
		dd offset loc_68F4FC73
		dd offset loc_68F4FB93
		dd offset loc_68F4FC06
		dd offset loc_68F4FC06
		dd offset loc_68F4FC06
		dd offset loc_68F4FC63
		dd offset loc_68F4FC06
		dd offset loc_68F4FC06
		dd offset loc_68F4FC06
		dd offset loc_68F4FC0D
		dd offset loc_68F4FBE1
		dd offset loc_68F4FC06
		dd offset loc_68F4FBE1
		dd offset loc_68F4FC06
		dd offset loc_68F4FC06
		dd offset loc_68F4FC06
		dd offset loc_68F4FC06
		dd offset loc_68F4FBE1
off_68F5B284	dd offset loc_68F4FE85,	offset loc_68F4FE85, offset loc_68F4FE85
					; DATA XREF: sub_68F4FDD0:loc_68F4FE6Cr
		dd offset loc_68F4FE85,	offset loc_68F4FE85, offset loc_68F4FE85 ; jump	table for switch statement
		dd offset loc_68F4FE85,	offset loc_68F4FE85, offset loc_68F4FE85
		dd offset loc_68F4FE85,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE7C
		dd offset loc_68F4FE7C,	offset loc_68F4FE7C, offset loc_68F4FE7C
		dd offset loc_68F4FE7C,	offset loc_68F4FE7C, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE3B, offset loc_68F4FE3B
		dd offset loc_68F4FE3B,	offset loc_68F4FE73, offset loc_68F4FE73
		dd offset loc_68F4FE73,	offset loc_68F4FE73, offset loc_68F4FE73
		dd offset loc_68F4FE73
off_68F5B360	dd offset loc_68F50038	; DATA XREF: sub_68F4FFC0+3Er
		dd offset loc_68F50028	; jump table for switch	statement
		dd offset loc_68F50018
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50058
		dd offset loc_68F50090
		dd offset loc_68F50090
		dd offset loc_68F50090
		dd offset loc_68F50090
		dd offset loc_68F50090
		dd offset loc_68F50090
		dd offset loc_68F50058
		dd offset loc_68F50090
off_68F5B3C4	dd offset loc_68F50170	; DATA XREF: sub_68F50110:loc_68F50138r
		dd offset loc_68F50180	; jump table for switch	statement
		dd offset loc_68F50175
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50160
		dd offset loc_68F50170
		dd offset loc_68F50170
		dd offset loc_68F50170
		dd offset loc_68F50170
		dd offset loc_68F50170
		dd offset loc_68F50170
		dd offset loc_68F50160
		dd offset loc_68F50170
off_68F5B428	dd offset loc_68F50230	; DATA XREF: sub_68F501E0+3Br
		dd offset loc_68F5027F	; jump table for switch	statement
		dd offset loc_68F50277
		dd offset loc_68F50230
		dd offset loc_68F5024D
		dd offset loc_68F50222
off_68F5B440	dd offset loc_68F502C3	; DATA XREF: sub_68F502A0+5Fr
		dd offset loc_68F502C3	; jump table for switch	statement
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F50379
		dd offset loc_68F50368
		dd offset loc_68F50357
		dd offset loc_68F502C3
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F502E0
		dd offset loc_68F5031B
off_68F5B4B0	dd offset loc_68F50536	; DATA XREF: sub_68F50440:loc_68F50487r
		dd offset loc_68F50540	; jump table for switch	statement
		dd offset loc_68F50520
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504EA
		dd offset loc_68F504A7
		dd offset loc_68F504EA
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504A7
		dd offset loc_68F504BB
off_68F5B514	dd offset loc_68F50536	; DATA XREF: sub_68F50440+D6r
		dd offset loc_68F50540	; jump table for switch	statement
		dd offset loc_68F50520
		dd offset loc_68F5052C
		dd offset loc_68F5057F
		dd offset loc_68F5057F
		dd offset loc_68F5052C
		dd offset loc_68F5052C
		dd offset loc_68F5052C
		dd offset loc_68F5052C
		dd offset loc_68F505C2
		dd offset loc_68F5052C
		dd offset loc_68F5052C
		dd offset loc_68F5052C
		dd offset loc_68F5052C
		dd offset loc_68F5052C
		dd offset loc_68F5057F
		dd offset loc_68F504EA
		dd offset loc_68F5052C
		dd offset loc_68F504EA
		dd offset loc_68F504EA
		dd offset loc_68F504EA
		dd offset loc_68F504EA
		dd offset loc_68F5052C
		dd offset loc_68F5056F
off_68F5B578	dd offset loc_68F504A7	; DATA XREF: sub_68F50440+17Br
		dd offset loc_68F504A7	; jump table for switch	statement
		dd offset loc_68F50597
		dd offset loc_68F50597
		dd offset loc_68F50597
		dd offset loc_68F50652
		dd offset loc_68F50641
		dd offset loc_68F50630
		dd offset loc_68F504A7
		dd offset loc_68F50597
		dd offset loc_68F50597
		dd offset loc_68F50597
		dd offset loc_68F50597
		dd offset loc_68F50597
		dd offset loc_68F50597
		dd offset loc_68F50611
off_68F5B5B8	dd offset loc_68F507E0	; DATA XREF: sub_68F50690+39r
		dd offset loc_68F507E0	; jump table for switch	statement
		dd offset loc_68F506E0
		dd offset loc_68F506E0
		dd offset loc_68F50806
		dd offset loc_68F506D0
		dd offset loc_68F5077F
		dd offset loc_68F507EC
		dd offset loc_68F507E0
		dd offset loc_68F507AC
		dd offset loc_68F50798
off_68F5B5E4	dd offset loc_68F50740	; DATA XREF: sub_68F50690+6Cr
		dd offset loc_68F50740	; jump table for switch	statement
		dd offset loc_68F506E0
		dd offset loc_68F506E0
		dd offset loc_68F50740
		dd offset loc_68F5076D
		dd offset loc_68F50732
		dd offset loc_68F50751
		dd offset loc_68F50740
		dd offset loc_68F50740
		dd offset loc_68F50740
off_68F5B610	dd offset loc_68F50981	; DATA XREF: sub_68F50880:loc_68F508C5r
		dd offset loc_68F5098B	; jump table for switch	statement
		dd offset loc_68F50967
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F509A5
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F5092D
		dd offset loc_68F508EA
		dd offset loc_68F5092D
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508EA
		dd offset loc_68F508FE
off_68F5B674	dd offset loc_68F50981	; DATA XREF: sub_68F50880+E0r
		dd offset loc_68F5098B	; jump table for switch	statement
		dd offset loc_68F50967
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50AA3
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F50977
		dd offset loc_68F5092D
		dd offset loc_68F50977
		dd offset loc_68F5092D
		dd offset loc_68F5092D
		dd offset loc_68F5092D
		dd offset loc_68F5092D
		dd offset loc_68F50977
		dd offset loc_68F50A93
byte_68F5B6D8	db 43h			; DATA XREF: sub_68F50B00+76Fr
aData_1		db 'DATA[',0
		align 10h
off_68F5B6E0	dd offset loc_68F50CA3	; DATA XREF: sub_68F50B00:loc_68F50B3Cr
		dd offset loc_68F50CA3	; jump table for switch	statement
		dd offset loc_68F50D29
		dd offset loc_68F50D09
		dd offset loc_68F50CC4
		dd offset loc_68F50CAF
		dd offset loc_68F50C38
		dd offset loc_68F50C21
		dd offset loc_68F50CA3
		dd offset loc_68F50C6A
		dd offset loc_68F50C58
off_68F5B70C	dd offset loc_68F50BE0	; DATA XREF: sub_68F50B00+90r
		dd offset loc_68F50BE0	; jump table for switch	statement
		dd offset loc_68F50BE0
		dd offset loc_68F50BE0
		dd offset loc_68F50C03
		dd offset loc_68F50BEC
		dd offset loc_68F50BA5
		dd offset loc_68F50BCA
		dd offset loc_68F50BE0
		dd offset loc_68F50BE0
		dd offset loc_68F50BE0
off_68F5B738	dd offset loc_68F50E57	; DATA XREF: sub_68F50B00+25Cr
		dd offset loc_68F50E33	; jump table for switch	statement
		dd offset loc_68F50F27
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50F09
		dd offset loc_68F50EBD
		dd offset loc_68F50E79
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50DAE
		dd offset loc_68F50D9D
		dd offset loc_68F50DAE
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50D9D
		dd offset loc_68F50DF5
off_68F5B79C	dd offset loc_68F510E7	; DATA XREF: sub_68F50B00+2EEr
		dd offset loc_68F5111A	; jump table for switch	statement
		dd offset loc_68F510C3
		dd offset loc_68F51109
		dd offset loc_68F51048
		dd offset loc_68F51048
		dd offset loc_68F50FA3
		dd offset loc_68F51109
		dd offset loc_68F51109
		dd offset loc_68F51109
		dd offset loc_68F51109
		dd offset loc_68F51109
		dd offset loc_68F50F6E
		dd offset loc_68F51109
		dd offset loc_68F51109
		dd offset loc_68F51109
		dd offset loc_68F51048
		dd offset loc_68F50F65
		dd offset loc_68F50FF6
		dd offset loc_68F50F65
		dd offset loc_68F50F65
		dd offset loc_68F50F65
		dd offset loc_68F50F65
		dd offset loc_68F51109
		dd offset loc_68F50FBA
off_68F5B800	dd offset loc_68F5117A	; DATA XREF: sub_68F50B00+3B6r
		dd offset loc_68F5115C	; jump table for switch	statement
		dd offset loc_68F5113E
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F51088
		dd offset loc_68F50F57
		dd offset loc_68F51088
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F50F57
		dd offset loc_68F51196
off_68F5B864	dd offset loc_68F51459	; DATA XREF: sub_68F50B00+541r
		dd offset loc_68F51435	; jump table for switch	statement
		dd offset loc_68F51411
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F50F65
		dd offset loc_68F51522
		dd offset loc_68F50F65
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F51522
		dd offset loc_68F513D1
off_68F5B8C8	dd offset loc_68F5153F	; DATA XREF: sub_68F50B00+581r
		dd offset loc_68F5186B	; jump table for switch	statement
		dd offset loc_68F51847
		dd offset loc_68F51561
		dd offset loc_68F51048
		dd offset loc_68F51048
		dd offset loc_68F50FA3
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F50F6E
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F51048
		dd offset loc_68F5159D
		dd offset loc_68F51561
		dd offset loc_68F5159D
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F51561
		dd offset loc_68F51572
off_68F5B92C	dd offset loc_68F514D4	; DATA XREF: sub_68F50B00+5BCr
		dd offset loc_68F514B6	; jump table for switch	statement
		dd offset loc_68F51498
		dd offset loc_68F514F0
		dd offset loc_68F512EC
		dd offset loc_68F512EC
		dd offset loc_68F5131D
		dd offset loc_68F514F0
		dd offset loc_68F514F0
		dd offset loc_68F514F0
		dd offset loc_68F514F0
		dd offset loc_68F514F0
		dd offset loc_68F514F0
		dd offset loc_68F514F0
		dd offset loc_68F514F0
		dd offset loc_68F514F0
		dd offset loc_68F512EC
		dd offset loc_68F51088
		dd offset loc_68F51088
		dd offset loc_68F51088
		dd offset loc_68F51088
		dd offset loc_68F51088
		dd offset loc_68F51088
		dd offset loc_68F514F0
		dd offset loc_68F51379
off_68F5B990	dd offset loc_68F51800	; DATA XREF: sub_68F50B00+AD6r
		dd offset loc_68F517E2	; jump table for switch	statement
		dd offset loc_68F517C4
		dd offset loc_68F5181C
		dd offset loc_68F51626
		dd offset loc_68F51626
		dd offset loc_68F5181C
		dd offset loc_68F5181C
		dd offset loc_68F5181C
		dd offset loc_68F5167D
		dd offset loc_68F5181C
		dd offset loc_68F5181C
		dd offset loc_68F5181C
		dd offset loc_68F5181C
		dd offset loc_68F5181C
		dd offset loc_68F5181C
		dd offset loc_68F51626
		dd offset loc_68F5161E
		dd offset loc_68F518B1
		dd offset loc_68F5161E
		dd offset loc_68F5161E
		dd offset loc_68F5161E
		dd offset loc_68F5161E
		dd offset loc_68F5181C
		dd offset loc_68F515EE
off_68F5B9F4	dd offset loc_68F51737	; DATA XREF: sub_68F50B00+C13r
		dd offset loc_68F51737	; jump table for switch	statement
		dd offset loc_68F517B6
		dd offset loc_68F51790
		dd offset loc_68F516E3
		dd offset loc_68F51779
		dd offset loc_68F51753
		dd offset loc_68F51745
		dd offset loc_68F51737
off_68F5BA18	dd offset loc_68F51964	; DATA XREF: sub_68F50B00+DF4r
		dd offset loc_68F51940	; jump table for switch	statement
		dd offset loc_68F51986
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F51938
		dd offset loc_68F519BB
		dd offset loc_68F51938
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F519BB
		dd offset loc_68F51909
off_68F5BA7C	dd offset loc_68F51A5F	; DATA XREF: sub_68F50B00+F45r
		dd offset loc_68F51A5F	; jump table for switch	statement
		dd offset loc_68F51BBA
		dd offset loc_68F51BCE
		dd offset loc_68F51BCE
		dd offset loc_68F51BCE
		dd offset loc_68F51BCE
		dd offset loc_68F51BCE
		dd offset loc_68F51A97
		dd offset loc_68F51BCE
		dd offset loc_68F51BCE
		dd offset loc_68F51BCE
		dd offset loc_68F51A5F
off_68F5BAB0	dd offset loc_68F51B6A	; DATA XREF: sub_68F50B00+F90r
		dd offset loc_68F51B46	; jump table for switch	statement
		dd offset loc_68F51B22
		dd offset loc_68F51B8C
		dd offset loc_68F51A5F
		dd offset loc_68F51A5F
		dd offset loc_68F51BBA
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51A97
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51A5F
		dd offset loc_68F51B09
		dd offset loc_68F51B8C
		dd offset loc_68F51B09
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51B8C
		dd offset loc_68F51AD7
off_68F5BB14	dd offset loc_68F51D07	; DATA XREF: sub_68F51C00:loc_68F51C48r
		dd offset loc_68F51CFB	; jump table for switch	statement
		dd offset loc_68F51CE6
		dd offset loc_68F51C70
		dd offset loc_68F51D11
		dd offset loc_68F51D11
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51D11
		dd offset loc_68F51CB0
		dd offset loc_68F51C70
		dd offset loc_68F51CB0
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C81
		dd offset loc_68F51D11
off_68F5BB7C	dd offset loc_68F51D07	; DATA XREF: sub_68F51C00+DFr
		dd offset loc_68F51CFB	; jump table for switch	statement
		dd offset loc_68F51CE6
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51D42
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51C70
		dd offset loc_68F51CB0
		dd offset loc_68F51C70
		dd offset loc_68F51CB0
		dd offset loc_68F51CB0
		dd offset loc_68F51CB0
		dd offset loc_68F51CB0
		dd offset loc_68F51C70
		dd offset loc_68F51D32
off_68F5BBE0	dd offset loc_68F51E0A	; DATA XREF: sub_68F51D60+2Dr
		dd offset loc_68F51E0A	; jump table for switch	statement
		dd offset loc_68F51DA0
		dd offset loc_68F51DA0
		dd offset loc_68F51DA0
		dd offset loc_68F51D94
		dd offset loc_68F51E22
		dd offset loc_68F51E11
		dd offset loc_68F51E0A
		dd offset loc_68F51DA0
		dd offset loc_68F51DA0
		dd offset loc_68F51DA0
		dd offset loc_68F51DC2
		dd offset loc_68F51DC2
off_68F5BC18	dd offset loc_68F51ECB	; DATA XREF: sub_68F51E50:loc_68F51E9Ar
		dd offset loc_68F51ECB	; jump table for switch	statement
		dd offset loc_68F51F13
		dd offset loc_68F51ECB
		dd offset loc_68F51F78
		dd offset loc_68F51EEF
		dd offset loc_68F51F00
		dd offset loc_68F51EDC
		dd offset loc_68F51ECB
		dd offset loc_68F51FA6
		dd offset loc_68F5210D
		dd offset loc_68F5200B
		dd offset loc_68F5201D
		dd offset loc_68F5209E
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F520BA
		dd offset loc_68F520FB
		dd offset loc_68F5210D
		dd offset loc_68F52115
		dd offset loc_68F52157
		dd offset loc_68F52115
		dd offset loc_68F52157
		dd offset loc_68F52157
		dd offset loc_68F52157
		dd offset loc_68F51ECB
		dd offset loc_68F52160
		dd offset loc_68F521A4
		dd offset loc_68F52040
		dd offset loc_68F52052
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F5208C
		dd offset loc_68F521BF
off_68F5BCAC	dd offset loc_68F52291	; DATA XREF: sub_68F51E50+235r
		dd offset loc_68F52291	; jump table for switch	statement
		dd offset loc_68F52291
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F522C4
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F52291
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F51ECB
		dd offset loc_68F52291
		dd offset loc_68F522B2
		dd offset loc_68F522A0
		dd offset loc_68F52291
		dd offset loc_68F52291
off_68F5BD1C	dd offset loc_68F522D6	; DATA XREF: sub_68F51E50+2A4r
		dd offset loc_68F5236E	; jump table for switch	statement
		dd offset loc_68F52356
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F5231C
		dd offset loc_68F522E0
		dd offset loc_68F5231C
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522E0
		dd offset loc_68F522EE
off_68F5BD80	dd offset loc_68F51EEF	; DATA XREF: sub_68F51E50+300r
		dd offset loc_68F51F00	; jump table for switch	statement
		dd offset loc_68F51EDC
		dd offset loc_68F51EE8
		dd offset loc_68F521D1
		dd offset loc_68F521D1
		dd offset loc_68F521D1
		dd offset loc_68F51EE8
		dd offset loc_68F51EE8
		dd offset loc_68F51EE8
		dd offset loc_68F52275
		dd offset loc_68F51EE8
		dd offset loc_68F51EE8
		dd offset loc_68F51EE8
		dd offset loc_68F51EE8
		dd offset loc_68F521D1
		dd offset loc_68F521D1
		dd offset loc_68F5211C
		dd offset loc_68F52252
		dd offset loc_68F5211C
		dd offset loc_68F5211C
		dd offset loc_68F5211C
		dd offset loc_68F5211C
		dd offset loc_68F51EE8
		dd offset loc_68F52216
		dd offset loc_68F521D1
		dd offset loc_68F51EE8
		dd offset loc_68F521D1
		dd offset loc_68F521FA
		dd offset loc_68F521DE
		dd offset loc_68F521D1
		dd offset loc_68F521D1
off_68F5BE00	dd offset loc_68F522D6	; DATA XREF: sub_68F51E50+4FFr
		dd offset loc_68F5236E	; jump table for switch	statement
		dd offset loc_68F52356
		dd offset loc_68F5237E
		dd offset loc_68F5239A
		dd offset loc_68F5239A
		dd offset loc_68F5239A
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5239A
		dd offset loc_68F5231C
		dd offset loc_68F5237E
		dd offset loc_68F5231C
		dd offset loc_68F5231C
		dd offset loc_68F5231C
		dd offset loc_68F5231C
		dd offset loc_68F5237E
		dd offset loc_68F5238A
		dd offset loc_68F5239A
		dd offset loc_68F5237E
		dd offset loc_68F5239A
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5237E
		dd offset loc_68F5239A
off_68F5BE80	dd offset loc_68F5259E	; DATA XREF: sub_68F51E50+6EAr
		dd offset loc_68F5258F	; jump table for switch	statement
		dd offset loc_68F52580
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F52269
		dd offset loc_68F5211C
		dd offset loc_68F52269
		dd offset loc_68F5211C
		dd offset loc_68F5211C
		dd offset loc_68F5211C
		dd offset loc_68F5211C
		dd offset loc_68F52269
		dd offset loc_68F52541
off_68F5BEE4	dd offset loc_68F52745	; DATA XREF: sub_68F52700+3Er
		dd offset loc_68F52745	; jump table for switch	statement
		dd offset loc_68F5279C
		dd offset loc_68F5277D
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F527AB
		dd offset loc_68F527B0
		dd offset loc_68F52745
		dd offset loc_68F527B5
		dd offset loc_68F527EC
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F52745
		dd offset loc_68F5276E
off_68F5BF3C	dd offset loc_68F528D9	; DATA XREF: sub_68F52830+4Br
		dd offset loc_68F52882	; jump table for switch	statement
		dd offset loc_68F52882
		dd offset loc_68F528D4
		dd offset loc_68F528F8
		dd offset loc_68F52882
		dd offset loc_68F528FD
		dd offset loc_68F52934
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F52882
		dd offset loc_68F528AE
off_68F5BFAC	dd offset loc_68F52A10	; DATA XREF: sub_68F52970+49r
		dd offset loc_68F52A10	; jump table for switch	statement
		dd offset loc_68F529C0
		dd offset loc_68F529F0
		dd offset loc_68F52A50
		dd offset loc_68F52A3F
		dd offset loc_68F52A2E
		dd offset loc_68F52A1D
		dd offset loc_68F52A10
off_68F5BFD0	dd offset loc_68F52D74	; DATA XREF: sub_68F52B80+4Dr
		dd offset loc_68F52C46	; jump table for switch	statement
		dd offset loc_68F52C21
		dd offset loc_68F52D48
		dd offset loc_68F52D1C
		dd offset loc_68F52C46
		dd offset loc_68F52CE5
		dd offset loc_68F52CE5
		dd offset loc_68F52CA3
		dd offset loc_68F52CB3
		dd offset loc_68F52BD4
		dd offset loc_68F52C46
		dd offset loc_68F52C46
		dd offset loc_68F52C46
		dd offset loc_68F52CA3
		dd offset loc_68F52C46
		dd offset loc_68F52C46
		dd offset loc_68F52C46
		dd offset loc_68F52C4D
		dd offset loc_68F52C21
		dd offset loc_68F52C46
		dd offset loc_68F52C21
		dd offset loc_68F52C46
		dd offset loc_68F52C46
		dd offset loc_68F52C46
		dd offset loc_68F52C46
		dd offset loc_68F52C21
off_68F5C03C	dd offset loc_68F52ED6,	offset loc_68F52ED6, offset loc_68F52ED6
					; DATA XREF: sub_68F52E10:loc_68F52EBDr
		dd offset loc_68F52ED6,	offset loc_68F52ED6, offset loc_68F52ED6 ; jump	table for switch statement
		dd offset loc_68F52ED6,	offset loc_68F52ED6, offset loc_68F52ED6
		dd offset loc_68F52ED6,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52ECD
		dd offset loc_68F52ECD,	offset loc_68F52ECD, offset loc_68F52ECD
		dd offset loc_68F52ECD,	offset loc_68F52ECD, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52E8A, offset loc_68F52E8A
		dd offset loc_68F52E8A,	offset loc_68F52EC4, offset loc_68F52EC4
		dd offset loc_68F52EC4,	offset loc_68F52EC4, offset loc_68F52EC4
		dd offset loc_68F52EC4
off_68F5C118	dd offset loc_68F53081	; DATA XREF: sub_68F53010+3Br
		dd offset loc_68F53071	; jump table for switch	statement
		dd offset loc_68F53061
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530A1
		dd offset loc_68F530D3
		dd offset loc_68F530D3
		dd offset loc_68F530D3
		dd offset loc_68F530D3
		dd offset loc_68F530D3
		dd offset loc_68F530D3
		dd offset loc_68F530A1
		dd offset loc_68F530D3
off_68F5C17C	dd offset loc_68F531B0	; DATA XREF: sub_68F53150:loc_68F53178r
		dd offset loc_68F531C0	; jump table for switch	statement
		dd offset loc_68F531B5
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531A0
		dd offset loc_68F531B0
		dd offset loc_68F531B0
		dd offset loc_68F531B0
		dd offset loc_68F531B0
		dd offset loc_68F531B0
		dd offset loc_68F531B0
		dd offset loc_68F531A0
		dd offset loc_68F531B0
off_68F5C1E0	dd offset loc_68F53270	; DATA XREF: sub_68F53220+3Br
		dd offset loc_68F532C0	; jump table for switch	statement
		dd offset loc_68F532B8
		dd offset loc_68F53270
		dd offset loc_68F5328E
		dd offset loc_68F53262
off_68F5C1F8	dd offset aIso88591	; DATA XREF: sub_68F53E70:loc_68F53E90r
					; "ISO-8859-1"
		dd offset aUsAscii	; "US-ASCII"
		dd offset aUtf8		; "UTF-8"
		dd offset aUtf16	; "UTF-16"
		dd offset aUtf16be	; "UTF-16BE"
		dd offset aUtf16le	; "UTF-16LE"
		align 20h
aNotation_0	db 'NOTATION',0         ; DATA XREF: sub_68F54940+EAo
					; sub_68F551E0+99o
aElement	db 'ELEMENT',0          ; DATA XREF: sub_68F54940+C9o
aAttlist	db 'ATTLIST',0          ; DATA XREF: sub_68F54940+A4o
aEntity_0	db 'ENTITY',0           ; DATA XREF: sub_68F54940+7Fo
					; .rdata:68F5C490o
aPublic		db 'PUBLIC',0           ; DATA XREF: sub_68F54780+8Ao
					; sub_68F54C20+88o ...
aSystem		db 'SYSTEM',0           ; DATA XREF: sub_68F54780:loc_68F547E9o
					; sub_68F54C20:loc_68F54C87o ...
aAny		db 'ANY',0              ; DATA XREF: sub_68F55590+88o
aEmpty		db 'EMPTY',0            ; DATA XREF: sub_68F55590:loc_68F555F7o
aPcdata		db 'PCDATA',0           ; DATA XREF: sub_68F55680+31o
aNmtokens_0	db 'NMTOKENS',0         ; DATA XREF: .rdata:68F5C49Co
aNmtoken_0	db 'NMTOKEN',0          ; DATA XREF: .rdata:68F5C498o
aEntities_0	db 'ENTITIES',0         ; DATA XREF: .rdata:68F5C494o
aIdrefs_0	db 'IDREFS',0           ; DATA XREF: .rdata:68F5C48Co
aIdref_0	db 'IDREF',0            ; DATA XREF: .rdata:68F5C488o
aId_0		db 'ID',0               ; DATA XREF: .rdata:68F5C484o
aCdata_0	db 'CDATA',0            ; DATA XREF: .rdata:off_68F5C480o
aFixed		db 'FIXED',0            ; DATA XREF: sub_68F55400+ADo
aRequired	db 'REQUIRED',0         ; DATA XREF: sub_68F55400+8Ao
aImplied	db 'IMPLIED',0          ; DATA XREF: sub_68F55400:loc_68F55467o
aNdata		db 'NDATA',0            ; DATA XREF: sub_68F54D50:loc_68F54DA4o
aIgnore		db 'IGNORE',0           ; DATA XREF: sub_68F55980:loc_68F559C3o
aInclude	db 'INCLUDE',0          ; DATA XREF: sub_68F55980+84o
aDoctype	db 'DOCTYPE',0          ; DATA XREF: sub_68F54590+31o
					; sub_68F54650+31o
		align 4
off_68F5C2C4	dd offset loc_68F5460D	; DATA XREF: sub_68F54590+26r
		dd offset loc_68F5461A	; jump table for switch	statement
		dd offset loc_68F54627
		dd offset loc_68F545FB
		dd offset loc_68F545F5
		dd offset loc_68F545BD
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F545E0
		dd offset loc_68F54634
off_68F5C310	dd offset loc_68F546D1	; DATA XREF: sub_68F54650+26r
		dd offset loc_68F546A0	; jump table for switch	statement
		dd offset loc_68F546D8
		dd offset loc_68F546B5
		dd offset loc_68F546B5
		dd offset loc_68F5467D
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546A0
		dd offset loc_68F546C4
off_68F5C35C	dd offset loc_68F54990	; DATA XREF: sub_68F54940+2Cr
		dd offset loc_68F54973	; jump table for switch	statement
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F549AD
		dd offset loc_68F54973
		dd offset loc_68F549B4
		dd offset loc_68F54973
		dd offset loc_68F54990
		dd offset loc_68F549BB
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54973
		dd offset loc_68F54A60
		dd offset loc_68F54973
		dd offset loc_68F54A73
off_68F5C3E0	dd offset loc_68F54B31	; DATA XREF: sub_68F54AC0+28r
		dd offset loc_68F54AF0	; jump table for switch	statement
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54B20
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54B40
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54AF0
		dd offset loc_68F54B55
		dd offset loc_68F54B12
		align 10h
off_68F5C480	dd offset aCdata_0	; DATA XREF: sub_68F551E0:loc_68F55250r
					; "CDATA"
		dd offset aId_0		; "ID"
		dd offset aIdref_0	; "IDREF"
		dd offset aIdrefs_0	; "IDREFS"
		dd offset aEntity_0	; "ENTITY"
		dd offset aEntities_0	; "ENTITIES"
		dd offset aNmtoken_0	; "NMTOKEN"
		dd offset aNmtokens_0	; "NMTOKENS"
off_68F5C4A0	dd offset loc_68F556FD	; DATA XREF: sub_68F55680+26r
		dd offset loc_68F556D0	; jump table for switch	statement
		dd offset loc_68F556D0
		dd offset loc_68F556E5
		dd offset loc_68F556D0
		dd offset loc_68F556AD
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F55704
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F55718
		dd offset loc_68F55725
		dd offset loc_68F55732
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556D0
		dd offset loc_68F556E5
off_68F5C50C	dd offset loc_68F5587B	; DATA XREF: sub_68F55850+11r
		dd offset loc_68F55868	; jump table for switch	statement
		dd offset loc_68F55868
		dd offset loc_68F5586E
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55882
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F5588C
		dd offset loc_68F55899
		dd offset loc_68F558A6
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F55868
		dd offset loc_68F5586E
off_68F5C578	dd offset loc_68F558ED	; DATA XREF: sub_68F558C0+11r
		dd offset loc_68F558D8	; jump table for switch	statement
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558F4
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F55901
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F558D8
		dd offset loc_68F55920
		dd offset loc_68F5593F
		dd offset loc_68F5595E
		dd offset loc_68F558E0
		align 10h
dword_68F5C5E0	dd 42494C2Dh		; DATA XREF: sub_68F55C40+C5r
					; sub_68F55C40+239r
dword_68F5C5E4	dd 57434347h		; DATA XREF: sub_68F55C40+DEr
					; sub_68F55C40+244r
dword_68F5C5E8	dd 452D3233h		; DATA XREF: sub_68F55C40+F4r
					; sub_68F55C40+24Fr
dword_68F5C5EC	dd 2D332D48h		; DATA XREF: sub_68F55C40+10Ar
					; sub_68F55C40+25Ar
dword_68F5C5F0	dd 4A4C4A53h		; DATA XREF: sub_68F55C40+119r
					; sub_68F55C40+265r
dword_68F5C5F4	dd 4854472Dh		; DATA XREF: sub_68F55C40+121r
					; sub_68F55C40+270r
dword_68F5C5F8	dd 494D2D52h		; DATA XREF: sub_68F55C40+129r
					; sub_68F55C40+27Br
dword_68F5C5FC	dd 3357474Eh		; DATA XREF: sub_68F55C40+131r
					; sub_68F55C40+283r
word_68F5C600	dw 32h			; DATA XREF: sub_68F55C40+139r
					; sub_68F55C40+28Br
		align 4
aW32_sharedptrS	db 'w32_sharedptr->size == sizeof(W32_EH_SHARED)',0
					; DATA XREF: sub_68F55C40:loc_68F55C97o
		align 4
a____Gcc3_4_5Gc	db '../../gcc-3.4.5/gcc/config/i386/w32-shared-ptr.c',0
					; DATA XREF: sub_68F55C40+63o
					; sub_68F55C40+81o
		align 4
aGetatomnameaAt	db 'GetAtomNameA (atom, s, sizeof(s)) != 0',0
					; DATA XREF: sub_68F55C40:loc_68F55CB5o
		align 20h
dword_68F5C6A0	dd 58h dup(0)		; DATA XREF: sub_68F55B40o
					; sub_68F55B40+6o ...
		align 1000h
_rdata		ends

; Section 4. (virtual address 0001D000)
; Virtual size			: 000000C4 (	196.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0400080: Bss Readable Writable
; Alignment	: 8 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 68F5D000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; void *Memory
Memory		dd ?			; DATA XREF: .text:68F41011o
					; sub_68F41030+11o ...
		align 10h
dword_68F5D010	dd ?			; DATA XREF: .text:68F41009o
					; sub_68F41030+9o ...
		align 10h
dword_68F5D020	dd ?			; DATA XREF: sub_68F55C00r
					; sub_68F55C00+11w
		dd 4 dup(?)
dword_68F5D034	dd ?			; DATA XREF: sub_68F55C40+19Br
dword_68F5D038	dd ?			; DATA XREF: sub_68F55C40+1A6r
		dd 2 dup(?)
dword_68F5D044	dd ?			; DATA XREF: sub_68F55C40+1C7r
		dd 3 dup(?)
dword_68F5D054	dd ?			; DATA XREF: sub_68F55C40+1E7r
dword_68F5D058	dd ?			; DATA XREF: sub_68F55C40+1EFr
		dd 2 dup(?)
dword_68F5D064	dd ?			; DATA XREF: sub_68F55C40+1F8r
		dd 3 dup(?)
dword_68F5D074	dd ?			; DATA XREF: sub_68F55C40+2DCw
		dd 3 dup(?)
dword_68F5D084	dd ?			; DATA XREF: sub_68F55C30+1r
					; sub_68F55C40+ACr ...
		dd 3 dup(?)
dword_68F5D094	dd ?			; DATA XREF: sub_68F55C40+2E4w
		align 1000h
_bss		ends

; Section 6. (virtual address 0001F000)
; Virtual size			: 000001B8 (	440.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 0001B800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata


;
; Imports from KERNEL32.dll
;
; ATOM __stdcall AddAtomA(LPCSTR lpString)
		extrn AddAtomA:dword	; CODE XREF: sub_68F55C40+29Fp
					; DATA XREF: sub_68F55C40+29Fr
; ATOM __stdcall FindAtomA(LPCSTR lpString)
		extrn FindAtomA:dword	; CODE XREF: sub_68F55C40+147p
					; sub_68F55C40+2C0p
					; DATA XREF: ...
; UINT __stdcall GetAtomNameA(ATOM nAtom, LPSTR	lpBuffer, int nSize)
		extrn GetAtomNameA:dword ; CODE	XREF: sub_68F55C40+1Fp
					; DATA XREF: sub_68F55C40+1Fr

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__assert:dword ; DATA XREF: _assertr
; int *__cdecl _errno()
		extrn __imp__errno:dword ; DATA	XREF: _errnor
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl fflush(FILE *File)
		extrn __imp_fflush:dword ; DATA	XREF: fflushr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp_memmove:dword ; DATA XREF: memmover
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; void *__cdecl	realloc(void *Memory, size_t NewSize)
		extrn realloc:dword	; DATA XREF: .text:loc_68F55F90r



		end DllEntryPoint
